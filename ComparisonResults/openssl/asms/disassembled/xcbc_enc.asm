;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7EA769C325EA44BEE07E0DA1ADE350D0
; Input	CRC32 :	4D50F03A

; File Name   :	C:\compspace\Diff\openssl\obj\xcbc_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_xcbc_encrypt
_DES_xcbc_encrypt proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 1Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	eax, [esp+2Ch+arg_14]
		lea	edx, [eax+1]
		movzx	ebx, byte ptr [edx+3]
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebx, eax
		mov	[esp+2Ch+var_18], ecx
		movzx	ecx, byte ptr [edx+6]
		movzx	eax, byte ptr [edx+5]
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [esp+2Ch+arg_18]
		lea	edx, [eax+1]
		shl	ecx, 10h
		movzx	esi, byte ptr [eax]
		or	ebx, ecx
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edx+6]
		shl	eax, 8
		or	esi, eax
		mov	[esp+2Ch+var_14], ebx
		movzx	eax, byte ptr [edx+1]
		movzx	ebx, byte ptr [edx+3]
		shl	eax, 10h
		or	esi, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	esi, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebx, eax
		mov	[esp+2Ch+arg_18], esi
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		mov	eax, [esp+2Ch+arg_10]
		shl	ecx, 10h
		or	ebx, ecx
		cmp	[esp+2Ch+arg_1C], 0
		mov	[esp+2Ch+var_1C], ebx
		jz	loc_307
		movzx	ebx, byte ptr [eax]
		lea	edx, [eax+1]
		movzx	eax, byte ptr [edx]
		movzx	ebp, byte ptr [edx+3]
		movzx	ecx, byte ptr [edx+6]
		shl	eax, 8
		or	ebx, eax
		mov	esi, [esp+2Ch+arg_4]
		movzx	eax, byte ptr [edx+1]
		mov	edi, [esp+2Ch+arg_0]
		shl	eax, 10h
		or	ebx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebp, eax
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		mov	[esp+2Ch+arg_14], ebp
		shl	ecx, 10h
		mov	edx, ebp
		or	edx, ecx
		mov	ecx, [esp+2Ch+arg_8]
		add	ecx, 0FFFFFFF8h
		mov	[esp+2Ch+arg_14], edx
		mov	[esp+2Ch+arg_8], ecx
		js	loc_1F4
		lea	eax, [ecx+8]
		shr	eax, 3
		mov	[esp+2Ch+arg_1C], eax
		neg	eax
		lea	ecx, [ecx+eax*8]
		mov	[esp+2Ch+arg_8], ecx
		nop	dword ptr [eax+eax+00000000h]

loc_130:				; CODE XREF: _DES_xcbc_encrypt+1EAj
		movzx	eax, byte ptr [edi+1]
		movzx	edx, byte ptr [edi]
		movzx	ecx, byte ptr [edi+4]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [edi+2]
		shl	eax, 10h
		or	edx, eax
		movzx	eax, byte ptr [edi+3]
		shl	eax, 18h
		or	edx, eax
		movzx	eax, byte ptr [edi+5]
		shl	eax, 8
		xor	edx, ebx
		xor	edx, [esp+2Ch+var_18]
		or	ecx, eax
		movzx	eax, byte ptr [edi+6]
		shl	eax, 10h
		or	ecx, eax
		mov	[esp+2Ch+var_8], edx
		movzx	eax, byte ptr [edi+7]
		add	edi, 8
		shl	eax, 18h
		or	ecx, eax
		lea	eax, [esp+2Ch+var_8]
		xor	ecx, [esp+2Ch+arg_14]
		xor	ecx, [esp+2Ch+var_14]
		push	1
		push	[esp+30h+arg_C]
		mov	[esp+34h+var_4], ecx
		push	eax
		call	_DES_encrypt1
		mov	ebx, [esp+38h+var_8]
		add	esp, 0Ch
		xor	ebx, [esp+2Ch+arg_18]
		mov	edx, [esp+2Ch+var_4]
		mov	eax, ebx
		xor	edx, [esp+2Ch+var_1C]
		shr	eax, 8
		mov	[esi], bl
		mov	[esi+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[esi+2], al
		mov	eax, ebx
		shr	eax, 18h
		mov	[esi+3], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+4], dl
		mov	[esi+5], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+6], al
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+7], al
		add	esi, 8
		sub	[esp+2Ch+arg_1C], 1
		mov	[esp+2Ch+arg_14], edx
		jnz	loc_130
		mov	ecx, [esp+2Ch+arg_8]

loc_1F4:				; CODE XREF: _DES_xcbc_encrypt+10Fj
		cmp	ecx, 0FFFFFFF8h
		jz	loc_2CA
		mov	eax, [esp+2Ch+arg_8]
		add	edi, 8
		add	ecx, edi
		add	eax, 7
		xor	edi, edi
		xor	ebp, ebp
		cmp	eax, 7		; switch 8 cases
		ja	short loc_25E	; jumptable 00000212 default case
		jmp	ds:$LN44[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	edi, byte ptr [ecx-1] ;	jumptable 00000212 case	7
		dec	ecx
		shl	edi, 18h

$LN16:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000212 case	6
		dec	ecx
		shl	eax, 10h
		or	edi, eax

$LN17:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000212 case	5
		dec	ecx
		shl	eax, 8
		or	edi, eax

$LN18:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000212 case	4
		dec	ecx
		or	edi, eax

$LN19:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	ebp, byte ptr [ecx-1] ;	jumptable 00000212 case	3
		dec	ecx
		shl	ebp, 18h

$LN20:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000212 case	2
		dec	ecx
		shl	eax, 10h
		or	ebp, eax

$LN21:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000212 case	1
		dec	ecx
		shl	eax, 8
		or	ebp, eax

$LN22:					; CODE XREF: _DES_xcbc_encrypt+212j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000212 case	0
		or	ebp, eax

loc_25E:				; CODE XREF: _DES_xcbc_encrypt+210j
		push	1		; jumptable 00000212 default case
		push	[esp+30h+arg_C]
		xor	edi, edx
		lea	eax, [esp+34h+var_8]
		xor	edi, [esp+34h+var_14]
		xor	ebp, ebx
		xor	ebp, [esp+34h+var_18]
		push	eax
		mov	[esp+38h+var_8], ebp
		mov	[esp+38h+var_4], edi
		call	_DES_encrypt1
		mov	ebx, [esp+38h+var_8]
		add	esp, 0Ch
		xor	ebx, [esp+2Ch+arg_18]
		mov	edx, [esp+2Ch+var_4]
		mov	eax, ebx
		xor	edx, [esp+2Ch+var_1C]
		shr	eax, 8
		mov	[esi], bl
		mov	[esi+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[esi+2], al
		mov	eax, ebx
		shr	eax, 18h
		mov	[esi+3], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+4], dl
		mov	[esi+5], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+6], al
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+7], al

loc_2CA:				; CODE XREF: _DES_xcbc_encrypt+1F7j
		mov	esi, [esp+2Ch+arg_10]
		mov	eax, ebx
		shr	eax, 8
		pop	edi
		mov	[esi], bl
		mov	[esi+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[esi+2], al
		mov	eax, edx
		shr	ebx, 18h
		mov	[esi+3], bl
		mov	[esi+4], dl
		shr	eax, 8
		mov	[esi+5], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+6], al
		shr	edx, 18h
		mov	[esi+7], dl
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_307:				; CODE XREF: _DES_xcbc_encrypt+ADj
		movzx	ecx, byte ptr [eax]
		lea	ebp, [eax+1]
		mov	edx, ebp
		mov	edi, [esp+2Ch+arg_8]
		mov	ebx, [esp+2Ch+arg_0]
		add	edi, 0FFFFFFF8h
		mov	[esp+2Ch+var_10], ebp
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [edx+4]
		mov	[esp+2Ch+arg_1C], ecx
		movzx	ecx, byte ptr [edx+3]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+5]
		mov	[esp+2Ch+arg_14], ecx
		movzx	ecx, byte ptr [edx+6]
		mov	edx, [esp+2Ch+arg_14]
		shl	ecx, 8
		or	ecx, eax
		shl	ecx, 10h
		or	edx, ecx
		mov	[esp+2Ch+arg_14], edx
		test	edi, edi
		jle	loc_46F
		mov	ebp, [esp+2Ch+arg_4]
		lea	eax, [edi-1]
		shr	eax, 3
		inc	eax
		mov	[esp+2Ch+arg_8], eax
		neg	eax
		lea	edi, [edi+eax*8]
		mov	[esp+2Ch+var_C], edi
		nop	word ptr [eax+eax+00000000h]

loc_390:				; CODE XREF: _DES_xcbc_encrypt+457j
		movzx	eax, byte ptr [ebx+1]
		movzx	edi, byte ptr [ebx]
		shl	eax, 8
		or	edi, eax
		movzx	eax, byte ptr [ebx+2]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, byte ptr [ebx+3]
		shl	eax, 18h
		or	edi, eax
		mov	eax, edi
		xor	eax, esi
		movzx	esi, byte ptr [ebx+4]
		mov	[esp+2Ch+var_8], eax
		movzx	eax, byte ptr [ebx+5]
		shl	eax, 8
		or	esi, eax
		movzx	eax, byte ptr [ebx+6]
		shl	eax, 10h
		or	esi, eax
		movzx	eax, byte ptr [ebx+7]
		shl	eax, 18h
		add	ebx, 8
		or	esi, eax
		mov	eax, esi
		xor	eax, [esp+2Ch+var_1C]
		push	0
		push	[esp+30h+arg_C]
		mov	[esp+34h+var_4], eax
		lea	eax, [esp+34h+var_8]
		push	eax
		call	_DES_encrypt1
		mov	ecx, [esp+38h+var_8]
		add	esp, 0Ch
		xor	ecx, [esp+2Ch+arg_1C]
		xor	ecx, [esp+2Ch+var_18]
		mov	edx, [esp+2Ch+var_4]
		mov	eax, ecx
		xor	edx, [esp+2Ch+arg_14]
		xor	edx, [esp+2Ch+var_14]
		mov	[ebp+0], cl
		shr	eax, 8
		mov	[ebp+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebp+2], al
		mov	eax, edx
		shr	ecx, 18h
		mov	[ebp+3], cl
		mov	ecx, edi
		mov	[ebp+4], dl
		shr	eax, 8
		mov	[ebp+5], al
		mov	eax, edx
		shr	eax, 10h
		shr	edx, 18h
		mov	[ebp+6], al
		mov	[ebp+7], dl
		add	ebp, 8
		sub	[esp+2Ch+arg_8], 1
		mov	edx, esi
		mov	esi, [esp+2Ch+arg_18]
		mov	[esp+2Ch+arg_1C], ecx
		mov	[esp+2Ch+arg_14], edx
		jnz	loc_390
		mov	edi, [esp+2Ch+var_C]
		mov	[esp+2Ch+arg_8], ebp
		mov	ebp, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+arg_8]
		jmp	short loc_477
; ---------------------------------------------------------------------------

loc_46F:				; CODE XREF: _DES_xcbc_encrypt+369j
		mov	esi, [esp+2Ch+arg_4]
		mov	ecx, [esp+2Ch+arg_1C]

loc_477:				; CODE XREF: _DES_xcbc_encrypt+46Dj
		cmp	edi, 0FFFFFFF8h
		jz	loc_552
		movzx	eax, byte ptr [ebx+1]
		movzx	ecx, byte ptr [ebx]
		movzx	edx, byte ptr [ebx+4]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+2]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [ebx+3]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [ebx+5]
		mov	[esp+2Ch+arg_8], ecx
		xor	ecx, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_8], ecx
		movzx	ecx, byte ptr [ebx+7]
		shl	eax, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [ebx+6]
		or	ecx, eax
		lea	eax, [esp+2Ch+var_8]
		shl	ecx, 10h
		or	edx, ecx
		push	0
		push	[esp+30h+arg_C]
		mov	[esp+34h+arg_18], edx
		xor	edx, [esp+34h+var_1C]
		push	eax
		mov	[esp+38h+var_4], edx
		call	_DES_encrypt1
		mov	edx, [esp+38h+var_8]
		lea	ecx, [edi+8]
		mov	ebx, [esp+38h+var_4]
		add	edi, 7
		xor	edx, [esp+38h+arg_1C]
		add	esp, 0Ch
		xor	ebx, [esp+2Ch+arg_14]
		add	ecx, esi
		xor	edx, [esp+2Ch+var_18]
		xor	ebx, [esp+2Ch+var_14]
		cmp	edi, 7		; switch 8 cases
		ja	short loc_54A	; jumptable 0000050D default case
		jmp	ds:$LN45[edi*4]	; switch jump
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 7
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx], al

$LN25:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 6
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx], al

$LN26:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 5
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx], al

$LN27:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 4
		mov	[ecx], bl

$LN28:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 3
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx], al

$LN29:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 2
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx], al

$LN30:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 0000050D case 1
		mov	eax, edx
		shr	eax, 8
		mov	[ecx], al

$LN31:					; CODE XREF: _DES_xcbc_encrypt+50Dj
					; DATA XREF: .text$mn:$LN45o
		mov	[ecx-1], dl	; jumptable 0000050D case 0

loc_54A:				; CODE XREF: _DES_xcbc_encrypt+50Bj
		mov	ecx, [esp+2Ch+arg_8] ; jumptable 0000050D default case
		mov	edx, [esp+2Ch+arg_18]

loc_552:				; CODE XREF: _DES_xcbc_encrypt+47Aj
		mov	eax, [esp+2Ch+arg_10]
		pop	edi
		pop	esi
		mov	[eax], cl
		mov	eax, ecx
		shr	eax, 8
		mov	[ebp+0], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebp+1], al
		mov	eax, edx
		shr	ecx, 18h
		mov	[ebp+2], cl
		mov	[ebp+3], dl
		shr	eax, 8
		mov	[ebp+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ebp+5], al
		shr	edx, 18h
		mov	[ebp+6], dl
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
_DES_xcbc_encrypt endp

; ---------------------------------------------------------------------------
		align 10h
$LN44		dd offset $LN22		; DATA XREF: _DES_xcbc_encrypt+212r
		dd offset $LN21		; jump table for switch	statement
		dd offset $LN20
		dd offset $LN19
		dd offset $LN18
		dd offset $LN17
		dd offset $LN16
		dd offset $LN15
$LN45		dd offset $LN31		; DATA XREF: _DES_xcbc_encrypt+50Dr
		dd offset $LN30		; jump table for switch	statement
		dd offset $LN29
		dd offset $LN28
		dd offset $LN27
		dd offset $LN26
		dd offset $LN25
		dd offset $LN24
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_xcbc_encrypt+191p
					; _DES_xcbc_encrypt+27Dp ...
		extrn __chkstk:near	; CODE XREF: _DES_xcbc_encrypt+5p


		end
