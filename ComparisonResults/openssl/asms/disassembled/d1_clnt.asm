;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1FCE3323FBA9FF0D4D80D16B8ECE755C
; Input	CRC32 :	03F46788

; File Name   :	C:\compspace\Diff\openssl\obj\d1_clnt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _dtls1_connect
_dtls1_connect	proc near		; DATA XREF: _dtls1_connect+77Do
					; .rdata:000009BCo ...

var_18		= qword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  4
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		push	ebp		; Time
		call	dword ptr ds:__imp___time64
		add	esp, 4
		mov	[esp+18h+var_4], eax
		xor	edi, edi
		lea	eax, [ebp+8]
		mov	[esp+18h+var_8], edi
		call	__chkstk
		xorps	xmm0, xmm0
		lea	eax, [esp+18h+arg_0]
		movsd	[esp+18h+var_18], xmm0
		push	4
		push	eax
		call	_RAND_add
		add	esp, 10h
		call	_ERR_clear_error
		push	edi		; dwErrCode
		call	dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
		mov	esi, [esp+10h+arg_8]
		mov	ebx, [esi+0D0h]
		test	ebx, ebx
		jnz	short loc_6E
		mov	eax, [esi+0E4h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		cmovnz	ebx, eax

loc_6E:					; CODE XREF: _dtls1_connect+5Bj
		inc	dword ptr [esi+1Ch]
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_91
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 4000h
		jz	short loc_9A

loc_91:					; CODE XREF: _dtls1_connect+7Fj
		push	esi
		call	_SSL_clear
		add	esp, 4

loc_9A:					; CODE XREF: _dtls1_connect+8Fj
		cmp	[esi+188h], edi
		jz	short loc_C0
		push	esi
		call	_dtls1_stop_timer
		add	esp, 4
		mov	[esi+188h], edi
		inc	dword ptr [esi+18Ch]
		nop	word ptr [eax+eax+00000000h]

loc_C0:					; CODE XREF: _dtls1_connect+A0j
					; _dtls1_connect+296j
		mov	eax, [esi+34h]
		mov	[esp+10h+arg_8], eax
		cmp	eax, 1100h
		jg	short loc_124
		jz	short loc_EC
		sub	eax, 3
		jz	loc_726
		sub	eax, 0FFDh
		jz	loc_643
		sub	eax, 3
		jmp	loc_63D
; ---------------------------------------------------------------------------

loc_EC:					; CODE XREF: _dtls1_connect+CEj
		push	0
		push	0
		push	0Bh
		push	dword ptr [esi+10h]
		mov	dword ptr [esi+18h], 2
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jle	loc_7AC
		mov	eax, [esi+58h]
		mov	dword ptr [esi+18h], 1
		mov	eax, [eax+350h]
		mov	[esi+34h], eax
		jmp	loc_23D
; ---------------------------------------------------------------------------

loc_124:				; CODE XREF: _dtls1_connect+CCj
		cmp	eax, 3004h
		jg	loc_631
		jz	loc_615
		sub	eax, 1110h	; switch 226 cases
		cmp	eax, 0E1h ; 'á'
		ja	$LN124		; jumptable 0000014C default case
		movzx	eax, ds:$LN135[eax]
		jmp	ds:$LN143[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C case 4368
		mov	dword ptr [esi+30h], 0
		call	_ssl3_init_finished_mac
		add	esp, 4

$LN23:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C case 4369
		call	_dtls1_start_timer
		push	esi
		call	_ssl3_client_hello
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jle	$end$144
		mov	eax, [esi+5Ch]
		cmp	dword ptr [eax], 0
		jz	short loc_19A
		mov	eax, [esi+58h]
		mov	dword ptr [esi+34h], 1100h
		mov	dword ptr [eax+350h], 1120h
		jmp	short loc_1A1
; ---------------------------------------------------------------------------

loc_19A:				; CODE XREF: _dtls1_connect+182j
		mov	dword ptr [esi+34h], 1120h

loc_1A1:				; CODE XREF: _dtls1_connect+198j
		mov	eax, [esi+14h]
		mov	ecx, [esi+10h]
		mov	dword ptr [esi+44h], 0
		cmp	eax, ecx
		jz	loc_239
		push	ecx
		push	eax
		call	_BIO_push
		add	esp, 8
		mov	[esi+10h], eax
		jmp	short loc_239
; ---------------------------------------------------------------------------

$LN28:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4384,4385
		call	_ssl3_get_server_hello
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		cmp	dword ptr [esi+6Ch], 0
		jz	short loc_1F7
		cmp	dword ptr [esi+140h], 0
		mov	dword ptr [esi+34h], 11D0h
		jz	short loc_232
		mov	dword ptr [esi+34h], 11E0h
		jmp	short loc_232
; ---------------------------------------------------------------------------

loc_1F7:				; CODE XREF: _dtls1_connect+1DCj
		mov	dword ptr [esi+34h], 1126h
		jmp	short loc_232
; ---------------------------------------------------------------------------

$LN34:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4390,4391
		call	_dtls1_get_hello_verify
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		push	esi
		call	_dtls1_stop_timer
		mov	eax, [esi+5Ch]
		add	esp, 4
		mov	ecx, 1130h
		cmp	dword ptr [eax], 0
		mov	eax, 1110h
		cmovnz	ecx, eax

loc_22F:				; CODE XREF: _dtls1_connect+401j
		mov	[esi+34h], ecx

loc_232:				; CODE XREF: _dtls1_connect+1ECj
					; _dtls1_connect+1F5j ...
		mov	dword ptr [esi+44h], 0

loc_239:				; CODE XREF: _dtls1_connect+1B0j
					; _dtls1_connect+1C3j ...
		mov	edi, [esp+10h]

loc_23D:				; CODE XREF: _dtls1_connect+11Fj
					; _dtls1_connect+2E8j ...
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+354h], 0
		jnz	short loc_290
		test	edi, edi
		jnz	short loc_290
		cmp	[esi+0E8h], edi
		jz	short loc_26E
		push	edi
		push	edi
		push	0Bh
		push	dword ptr [esi+10h]
		call	_BIO_ctrl
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jle	$end$144

loc_26E:				; CODE XREF: _dtls1_connect+253j
		test	ebx, ebx
		jz	short loc_290
		mov	edi, [esi+34h]
		mov	eax, [esp+10h+arg_8]
		cmp	edi, eax
		jz	short loc_290
		push	1
		push	1001h
		push	esi
		mov	[esi+34h], eax
		call	ebx
		add	esp, 0Ch
		mov	[esi+34h], edi

loc_290:				; CODE XREF: _dtls1_connect+247j
					; _dtls1_connect+24Bj ...
		xor	edi, edi
		mov	[esp+10h], edi
		jmp	loc_C0
; ---------------------------------------------------------------------------

$LN38:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		mov	eax, [esi+58h]	; jumptable 0000014C cases 4400,4401
		mov	eax, [eax+344h]
		test	byte ptr [eax+10h], 4
		jnz	short loc_2ED
		test	dword ptr [eax+0Ch], 100h
		jnz	short loc_2ED
		push	esi
		call	_ssl3_get_server_certificate
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		cmp	dword ptr [esi+12Ch], 0
		mov	eax, 1140h
		mov	edi, [esp+10h]
		mov	ecx, 11F0h
		cmovnz	eax, ecx
		mov	dword ptr [esi+44h], 0
		mov	[esi+34h], eax
		jmp	loc_23D
; ---------------------------------------------------------------------------

loc_2ED:				; CODE XREF: _dtls1_connect+2A8j
					; _dtls1_connect+2B1j
		mov	edi, 1
		mov	dword ptr [esi+34h], 1140h
		mov	dword ptr [esi+44h], 0
		jmp	loc_23D
; ---------------------------------------------------------------------------

$LN44:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4416,4417
		call	_ssl3_get_key_exchange
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		push	esi
		mov	dword ptr [esi+34h], 1150h
		mov	dword ptr [esi+44h], 0
		call	_ssl3_check_cert_and_algorithm
		add	esp, 4
		test	eax, eax
		jz	loc_80D
		jmp	loc_239
; ---------------------------------------------------------------------------

$LN47:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4432,4433
		call	_ssl3_get_certificate_request
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		mov	dword ptr [esi+34h], 1160h
		jmp	loc_232
; ---------------------------------------------------------------------------

$LN49:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4448,4449
		call	_ssl3_get_server_done
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		push	esi
		call	_dtls1_stop_timer
		mov	ecx, [esi+58h]
		add	esp, 4
		mov	eax, 1180h
		mov	edx, 1170h
		cmp	dword ptr [ecx+358h], 0
		cmovnz	eax, edx
		mov	[ecx+350h], eax
		mov	eax, [esi+58h]
		mov	dword ptr [esi+44h], 0
		mov	eax, [eax+350h]
		mov	[esi+34h], eax
		jmp	loc_239
; ---------------------------------------------------------------------------

$LN53:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4464-4467
		call	_dtls1_start_timer
		push	esi
		call	_ssl3_send_client_certificate
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jle	$end$144
		mov	dword ptr [esi+34h], 1180h
		jmp	loc_232
; ---------------------------------------------------------------------------

$LN55:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4480,4481
		call	_dtls1_start_timer
		push	esi
		call	_ssl3_send_client_key_exchange
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jle	$end$144
		mov	eax, [esi+58h]
		mov	ecx, 11A0h
		cmp	dword ptr [eax+358h], 1
		mov	eax, 1190h
		cmovz	ecx, eax
		jmp	loc_22F
; ---------------------------------------------------------------------------

$LN59:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4496,4497
		call	_dtls1_start_timer
		push	esi
		call	_ssl3_send_client_verify
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jle	$end$144
		mov	dword ptr [esi+34h], 11A0h
		jmp	loc_232
; ---------------------------------------------------------------------------

$LN61:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		cmp	dword ptr [esi+6Ch], 0 ; jumptable 0000014C cases 4512,4513
		jnz	short loc_43A
		push	esi
		call	_dtls1_start_timer
		add	esp, 4

loc_43A:				; CODE XREF: _dtls1_connect+42Fj
		push	11A1h
		push	11A0h
		push	esi
		call	_dtls1_send_change_cipher_spec
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jle	$end$144
		mov	eax, [esi+58h]
		mov	ecx, [esi+0C0h]
		mov	dword ptr [esi+34h], 11B0h
		mov	dword ptr [esi+44h], 0
		mov	eax, [eax+344h]
		mov	[ecx+0B4h], eax
		mov	eax, [esi+58h]
		mov	eax, [eax+38Ch]
		test	eax, eax
		jnz	short loc_499
		mov	eax, [esi+0C0h]
		mov	dword ptr [eax+0B0h], 0
		jmp	short loc_4A7
; ---------------------------------------------------------------------------

loc_499:				; CODE XREF: _dtls1_connect+485j
		mov	ecx, [esi+0C0h]
		mov	eax, [eax]
		mov	[ecx+0B0h], eax

loc_4A7:				; CODE XREF: _dtls1_connect+497j
		mov	eax, [esi+8]
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		call	eax
		add	esp, 4
		test	eax, eax
		jz	loc_80D
		mov	eax, [esi+8]
		push	12h
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		call	eax
		add	esp, 8
		test	eax, eax
		jz	loc_80D
		push	2
		push	esi
		call	_dtls1_reset_seq_numbers
		add	esp, 8
		jmp	loc_239
; ---------------------------------------------------------------------------

$LN68:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		cmp	dword ptr [esi+6Ch], 0 ; jumptable 0000014C cases 4528,4529
		jnz	short loc_4F6
		push	esi
		call	_dtls1_start_timer
		add	esp, 4

loc_4F6:				; CODE XREF: _dtls1_connect+4EBj
		mov	eax, [esi+8]
		mov	eax, [eax+64h]
		push	dword ptr [eax+24h]
		push	dword ptr [eax+20h]
		push	11B1h
		push	11B0h
		push	esi
		call	_ssl3_send_finished
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jle	$end$144
		mov	eax, [esi+58h]
		mov	dword ptr [esi+34h], 1100h
		and	dword ptr [eax], 0FFFFFFFBh
		cmp	dword ptr [esi+6Ch], 0
		mov	eax, [esi+58h]
		jz	short loc_564
		mov	dword ptr [eax+350h], 3
		mov	eax, [esi+58h]
		test	byte ptr [eax],	2
		jz	loc_232
		mov	dword ptr [esi+34h], 3
		or	dword ptr [eax], 4
		mov	eax, [esi+58h]
		mov	dword ptr [eax+4], 0
		jmp	loc_232
; ---------------------------------------------------------------------------

loc_564:				; CODE XREF: _dtls1_connect+533j
		cmp	dword ptr [esi+140h], 0
		jz	short loc_57C
		mov	dword ptr [eax+350h], 11E0h
		jmp	loc_232
; ---------------------------------------------------------------------------

loc_57C:				; CODE XREF: _dtls1_connect+56Bj
		mov	dword ptr [eax+350h], 11D0h
		jmp	loc_232
; ---------------------------------------------------------------------------

$LN76:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4576,4577
		call	_ssl3_get_new_session_ticket
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		mov	dword ptr [esi+34h], 11D0h
		jmp	loc_232
; ---------------------------------------------------------------------------

$LN78:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		push	esi		; jumptable 0000014C cases 4592,4593
		call	_ssl3_get_cert_status
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	$end$144
		mov	dword ptr [esi+34h], 1140h
		jmp	loc_232
; ---------------------------------------------------------------------------

$LN80:					; CODE XREF: _dtls1_connect+14Cj
					; DATA XREF: .text$mn:$LN143o
		mov	eax, [esi+5Ch]	; jumptable 0000014C cases 4560,4561
		push	11D1h
		push	11D0h
		push	esi
		mov	dword ptr [eax+2E8h], 1
		call	_ssl3_get_finished
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jle	$end$144
		push	esi
		call	_dtls1_stop_timer
		add	esp, 4
		mov	eax, 3
		cmp	dword ptr [esi+6Ch], 0
		mov	ecx, 11A0h
		cmovnz	eax, ecx
		mov	[esi+34h], eax
		jmp	loc_232
; ---------------------------------------------------------------------------

loc_615:				; CODE XREF: _dtls1_connect+12Fj
		mov	eax, [esi+0E4h]
		mov	dword ptr [esi+190h], 1
		mov	dword ptr [esi+34h], 1000h
		inc	dword ptr [eax+38h]
		jmp	short loc_643
; ---------------------------------------------------------------------------

loc_631:				; CODE XREF: _dtls1_connect+129j
		cmp	eax, 4000h
		jz	short loc_643
		cmp	eax, 5000h

loc_63D:				; CODE XREF: _dtls1_connect+E7j
		jnz	$LN124		; jumptable 0000014C default case

loc_643:				; CODE XREF: _dtls1_connect+DEj
					; _dtls1_connect+62Fj ...
		mov	dword ptr [esi+24h], 0
		test	ebx, ebx
		jz	short loc_658
		push	1
		push	10h
		push	esi
		call	ebx
		add	esp, 0Ch

loc_658:				; CODE XREF: _dtls1_connect+64Cj
		mov	eax, [esi]
		and	eax, 0FF00h
		cmp	eax, 0FE00h
		jz	short loc_671
		cmp	eax, 100h
		jnz	loc_7F2

loc_671:				; CODE XREF: _dtls1_connect+664j
		cmp	dword ptr [esi+3Ch], 0
		mov	dword ptr [esi+4], 1000h
		jnz	short loc_6A8
		call	_BUF_MEM_new
		mov	ebp, eax
		test	ebp, ebp
		jz	loc_80D
		push	4000h
		push	ebp
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_80D
		mov	[esi+3Ch], ebp
		xor	ebp, ebp

loc_6A8:				; CODE XREF: _dtls1_connect+67Cj
		push	esi
		call	_ssl3_setup_buffers
		add	esp, 4
		test	eax, eax
		jz	loc_80D
		push	0
		push	esi
		call	_ssl_init_wbio_buffer
		add	esp, 8
		test	eax, eax
		jz	loc_80D
		mov	eax, [esi+0E4h]
		xorps	xmm0, xmm0
		mov	dword ptr [esi+34h], 1110h
		inc	dword ptr [eax+34h]
		mov	eax, [esi+58h]
		mov	dword ptr [esi+44h], 0
		movups	xmmword	ptr [eax+0C0h],	xmm0
		movups	xmmword	ptr [eax+0D0h],	xmm0
		mov	eax, [esi+5Ch]
		mov	dword ptr [eax], 0
		mov	eax, [esi+5Ch]
		mov	dword ptr [esi+6Ch], 0
		mov	dword ptr [eax+2E8h], 0
		mov	eax, [esi+58h]
		mov	dword ptr [eax+180h], 0
		jmp	loc_23D
; ---------------------------------------------------------------------------

loc_726:				; CODE XREF: _dtls1_connect+D3j
		push	esi
		call	_ssl3_cleanup_key_block
		mov	eax, [esi+58h]
		add	esp, 4
		test	byte ptr [eax],	4
		jnz	short loc_740
		push	esi
		call	_ssl_free_wbio_buffer
		add	esp, 4

loc_740:				; CODE XREF: _dtls1_connect+735j
		push	1
		push	esi
		mov	dword ptr [esi+44h], 0
		mov	dword ptr [esi+190h], 0
		mov	dword ptr [esi+28h], 0
		call	_ssl_update_cache
		add	esp, 8
		cmp	dword ptr [esi+6Ch], 0
		jz	short loc_772
		mov	eax, [esi+0E4h]
		inc	dword ptr [eax+58h]

loc_772:				; CODE XREF: _dtls1_connect+767j
		mov	eax, [esi+0E4h]
		mov	edi, 1
		mov	dword ptr [esi+20h], offset _dtls1_connect
		inc	dword ptr [eax+3Ch]
		test	ebx, ebx
		jz	short loc_794
		push	edi
		push	20h ; ' '
		push	esi
		call	ebx
		add	esp, 0Ch

loc_794:				; CODE XREF: _dtls1_connect+789j
		mov	eax, [esi+5Ch]
		xor	ecx, ecx
		mov	[eax+228h], cx
		mov	eax, [esi+5Ch]
		mov	[eax+226h], cx
		jmp	short $end$144
; ---------------------------------------------------------------------------

loc_7AC:				; CODE XREF: _dtls1_connect+106j
		push	8
		push	dword ptr [esi+10h]
		call	_BIO_test_flags
		add	esp, 8
		test	eax, eax
		jnz	short loc_814
		mov	eax, [esi+58h]
		mov	dword ptr [esi+18h], 1
		mov	eax, [eax+350h]
		mov	[esi+34h], eax
		jmp	short loc_814
; ---------------------------------------------------------------------------

$LN124:					; CODE XREF: _dtls1_connect+13Fj
					; _dtls1_connect+14Cj ...
		push	309h		; jumptable 0000014C default case
		push	offset ??_C@_0BA@DHCNDJNF@?4?2ssl?2d1_clnt?4c?$AA@ ; ".\\ssl\\d1_clnt.c"
		push	0FFh
		push	0F9h ; 'ù'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_814
; ---------------------------------------------------------------------------

loc_7F2:				; CODE XREF: _dtls1_connect+66Bj
		push	0E7h ; 'ç'
		push	offset ??_C@_0BA@DHCNDJNF@?4?2ssl?2d1_clnt?4c?$AA@ ; ".\\ssl\\d1_clnt.c"
		push	44h ; 'D'
		push	0F9h ; 'ù'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_80D:				; CODE XREF: _dtls1_connect+331j
					; _dtls1_connect+4B8j ...
		mov	dword ptr [esi+34h], 5

loc_814:				; CODE XREF: _dtls1_connect+7BBj
					; _dtls1_connect+7D0j ...
		or	edi, 0FFFFFFFFh

$end$144:				; CODE XREF: _dtls1_connect+176j
					; _dtls1_connect+1D2j ...
		dec	dword ptr [esi+1Ch]
		test	ebp, ebp
		jz	short loc_827
		push	ebp
		call	_BUF_MEM_free
		add	esp, 4

loc_827:				; CODE XREF: _dtls1_connect+81Cj
		test	ebx, ebx
		jz	short loc_837
		push	edi
		push	1002h
		push	esi
		call	ebx
		add	esp, 0Ch

loc_837:				; CODE XREF: _dtls1_connect+829j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_dtls1_connect	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 4
$LN143		dd offset $LN22, offset	$LN23, offset $LN28, offset $LN34
					; DATA XREF: _dtls1_connect+14Cr
		dd offset $LN38, offset	$LN44, offset $LN47, offset $LN49 ; jump table for switch statement
		dd offset $LN53, offset	$LN55, offset $LN59, offset $LN61
		dd offset $LN68, offset	$LN80, offset $LN76, offset $LN78
		dd offset $LN124
$LN135		db 0, 1, 10h, 10h, 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h
					; DATA XREF: _dtls1_connect+145r
		db 10h,	10h, 10h, 10h, 2, 2, 10h, 10h, 10h, 10h, 3, 3 ;	indirect table for switch statement
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 4, 4, 10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	5, 5, 10h, 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 6, 6, 10h, 10h, 10h, 10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	7, 7, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 8,	8, 8, 8, 10h, 10h, 10h,	10h, 10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 9, 9, 10h, 10h, 10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 0Ah
		db 0Ah,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 10h, 10h, 0Bh, 0Bh, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	0Ch, 0Ch
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 0Dh,	0Dh, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 0Eh, 0Eh, 10h, 10h, 10h, 10h, 10h,	10h, 10h
		db 10h,	10h, 10h, 10h, 10h, 10h, 10h, 0Fh, 0Fh
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 96Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_get_client_method proc near	; DATA XREF: .rdata:00000A04o
					; .rdata:00000A7Co ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		cmp	ecx, 1FFFFh
		jnz	short loc_97E
		mov	eax, offset ?DTLS_client_method_data@?1??DTLS_client_method@@9@9 ; `DTLS_client_method'::`2'::DTLS_client_method_data
		retn
; ---------------------------------------------------------------------------

loc_97E:				; CODE XREF: _dtls1_get_client_method+Aj
		cmp	ecx, 0FEFFh
		jz	short loc_99F
		cmp	ecx, 100h
		jz	short loc_99F
		xor	edx, edx
		mov	eax, offset ?DTLSv1_2_client_method_data@?1??DTLSv1_2_client_method@@9@9 ; `DTLSv1_2_client_method'::`2'::DTLSv1_2_client_method_data
		cmp	ecx, 0FEFDh
		cmovnz	eax, edx
		retn
; ---------------------------------------------------------------------------

loc_99F:				; CODE XREF: _dtls1_get_client_method+18j
					; _dtls1_get_client_method+20j
		mov	eax, offset ?DTLSv1_client_method_data@?1??DTLSv1_client_method@@9@9 ; `DTLSv1_client_method'::`2'::DTLSv1_client_method_data
		retn
_dtls1_get_client_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 9A8h
; `DTLSv1_client_method'::`2'::DTLSv1_client_method_data
?DTLSv1_client_method_data@?1??DTLSv1_client_method@@9@9 dd 0FEFFh
					; DATA XREF: _dtls1_get_client_method:loc_99Fo
					; _DTLSv1_client_methodo
		dd offset _dtls1_new
		dd offset _dtls1_clear
		dd offset _dtls1_free
		dd offset _ssl_undefined_function
		dd offset _dtls1_connect
		dd offset _ssl3_read
		dd offset _ssl3_peek
		dd offset _ssl3_write
		dd offset _dtls1_shutdown
		dd offset _ssl3_renegotiate
		dd offset _ssl3_renegotiate_check
		dd offset _dtls1_get_message
		dd offset _dtls1_read_bytes
		dd offset _dtls1_write_app_data_bytes
		dd offset _dtls1_dispatch_alert
		dd offset _dtls1_ctrl
		dd offset _ssl3_ctx_ctrl
		dd offset _ssl3_get_cipher_by_char
		dd offset _ssl3_put_cipher_by_char
		dd offset _ssl3_pending
		dd offset _ssl3_num_ciphers
		dd offset _dtls1_get_cipher
		dd offset _dtls1_get_client_method
		dd offset _dtls1_default_timeout
		dd offset _DTLSv1_enc_data
		dd offset _ssl_undefined_void_function
		dd offset _ssl3_callback_ctrl
		dd offset _ssl3_ctx_callback_ctrl
		align 10h
; `DTLSv1_2_client_method'::`2'::DTLSv1_2_client_method_data
?DTLSv1_2_client_method_data@?1??DTLSv1_2_client_method@@9@9 dd	0FEFDh
					; DATA XREF: _dtls1_get_client_method+24o
					; _DTLSv1_2_client_methodo
		dd offset _dtls1_new
		dd offset _dtls1_clear
		dd offset _dtls1_free
		dd offset _ssl_undefined_function
		dd offset _dtls1_connect
		dd offset _ssl3_read
		dd offset _ssl3_peek
		dd offset _ssl3_write
		dd offset _dtls1_shutdown
		dd offset _ssl3_renegotiate
		dd offset _ssl3_renegotiate_check
		dd offset _dtls1_get_message
		dd offset _dtls1_read_bytes
		dd offset _dtls1_write_app_data_bytes
		dd offset _dtls1_dispatch_alert
		dd offset _dtls1_ctrl
		dd offset _ssl3_ctx_ctrl
		dd offset _ssl3_get_cipher_by_char
		dd offset _ssl3_put_cipher_by_char
		dd offset _ssl3_pending
		dd offset _ssl3_num_ciphers
		dd offset _dtls1_get_cipher
		dd offset _dtls1_get_client_method
		dd offset _dtls1_default_timeout
		dd offset _DTLSv1_2_enc_data
		dd offset _ssl_undefined_void_function
		dd offset _ssl3_callback_ctrl
		dd offset _ssl3_ctx_callback_ctrl
		align 8
; `DTLS_client_method'::`2'::DTLS_client_method_data
?DTLS_client_method_data@?1??DTLS_client_method@@9@9 dd	1FFFFh
					; DATA XREF: _dtls1_get_client_method+Co
					; _DTLS_client_methodo
		dd offset _dtls1_new
		dd offset _dtls1_clear
		dd offset _dtls1_free
		dd offset _ssl_undefined_function
		dd offset _dtls1_connect
		dd offset _ssl3_read
		dd offset _ssl3_peek
		dd offset _ssl3_write
		dd offset _dtls1_shutdown
		dd offset _ssl3_renegotiate
		dd offset _ssl3_renegotiate_check
		dd offset _dtls1_get_message
		dd offset _dtls1_read_bytes
		dd offset _dtls1_write_app_data_bytes
		dd offset _dtls1_dispatch_alert
		dd offset _dtls1_ctrl
		dd offset _ssl3_ctx_ctrl
		dd offset _ssl3_get_cipher_by_char
		dd offset _ssl3_put_cipher_by_char
		dd offset _ssl3_pending
		dd offset _ssl3_num_ciphers
		dd offset _dtls1_get_cipher
		dd offset _dtls1_get_client_method
		dd offset _dtls1_default_timeout
		dd offset _DTLSv1_2_enc_data
		dd offset _ssl_undefined_void_function
		dd offset _ssl3_callback_ctrl
		dd offset _ssl3_ctx_callback_ctrl
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DTLS_client_method
_DTLS_client_method proc near
		mov	eax, offset ?DTLS_client_method_data@?1??DTLS_client_method@@9@9 ; `DTLS_client_method'::`2'::DTLS_client_method_data
		retn
_DTLS_client_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DTLSv1_2_client_method
_DTLSv1_2_client_method	proc near
		mov	eax, offset ?DTLSv1_2_client_method_data@?1??DTLSv1_2_client_method@@9@9 ; `DTLSv1_2_client_method'::`2'::DTLSv1_2_client_method_data
		retn
_DTLSv1_2_client_method	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DTLSv1_client_method
_DTLSv1_client_method proc near
		mov	eax, offset ?DTLSv1_client_method_data@?1??DTLSv1_client_method@@9@9 ; `DTLSv1_client_method'::`2'::DTLSv1_client_method_data
		retn
_DTLSv1_client_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B24h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_get_hello_verify	proc near	; CODE XREF: _dtls1_connect+201p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+arg_0]
		lea	ecx, [esp+8+var_4]
		push	ecx
		mov	[esp+0Ch+var_4], 0
		push	dword ptr [esi+108h]
		mov	eax, [esi+8]
		push	0FFFFFFFFh
		push	1127h
		mov	dword ptr [esi+10Ch], 1
		mov	eax, [eax+30h]
		push	1126h
		push	esi
		call	eax
		add	esp, 18h
		mov	dword ptr [esi+10Ch], 0
		cmp	[esp+8+var_4], 0
		jz	loc_BFE
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+340h], 3
		jz	short loc_BA7
		mov	eax, [esi+5Ch]
		mov	dword ptr [eax], 0
		mov	eax, [esi+58h]
		pop	esi
		mov	dword ptr [eax+354h], 1
		mov	eax, 1
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_BA7:				; CODE XREF: _dtls1_get_hello_verify+63j
		mov	eax, [esi+40h]
		push	edi
		movzx	edi, byte ptr [eax+2]
		cmp	edi, 100h
		jbe	short loc_BD2

$f_err$8:
		push	2Fh ; '/'
		push	2
		push	esi
		call	_ssl3_send_alert
		add	esp, 0Ch
		mov	dword ptr [esi+34h], 5
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_BD2:				; CODE XREF: _dtls1_get_hello_verify+91j
		add	eax, 3
		push	edi		; Size
		push	eax		; Src
		mov	eax, [esi+5Ch]
		add	eax, 4
		push	eax		; Dst
		call	_memcpy
		mov	eax, [esi+5Ch]
		add	esp, 0Ch
		mov	[eax+204h], edi
		mov	eax, [esi+5Ch]
		pop	edi
		mov	dword ptr [eax], 1
		mov	eax, 1

loc_BFE:				; CODE XREF: _dtls1_get_hello_verify+53j
		pop	esi
		pop	ecx
		retn
_dtls1_get_hello_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C04h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; time_t __cdecl static	time(time_t *Time)
_time		proc near
		jmp	dword ptr ds:__imp___time64
_time		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0Ch
; COMDAT (pick any)
		public ??_C@_0BA@DHCNDJNF@?4?2ssl?2d1_clnt?4c?$AA@
; `string'
??_C@_0BA@DHCNDJNF@?4?2ssl?2d1_clnt?4c?$AA@ db '.\ssl\d1_clnt.c',0
					; DATA XREF: _dtls1_connect+7D7o
					; _dtls1_connect+7F7o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DTLSv1_enc_data:near ; DATA XREF: .rdata:00000A0Co
		extrn _DTLSv1_2_enc_data:near ;	DATA XREF: .rdata:00000A84o
					; .rdata:00000AFCo
		extrn _dtls1_new:near	; DATA XREF: .rdata:000009ACo
					; .rdata:00000A24o ...
		extrn _dtls1_free:near	; DATA XREF: .rdata:000009B4o
					; .rdata:00000A2Co ...
		extrn _dtls1_clear:near	; DATA XREF: .rdata:000009B0o
					; .rdata:00000A28o ...
		extrn _dtls1_ctrl:near	; DATA XREF: .rdata:000009E8o
					; .rdata:00000A60o ...
		extrn _dtls1_shutdown:near ; DATA XREF:	.rdata:000009CCo
					; .rdata:00000A44o ...
		extrn _dtls1_get_message:near ;	DATA XREF: .rdata:000009D8o
					; .rdata:00000A50o ...
		extrn _dtls1_dispatch_alert:near ; DATA	XREF: .rdata:000009E4o
					; .rdata:00000A5Co ...
		extrn _ssl_undefined_function:near ; DATA XREF:	.rdata:000009B8o
					; .rdata:00000A30o ...
		extrn _ssl_undefined_void_function:near	; DATA XREF: .rdata:00000A10o
					; .rdata:00000A88o ...
		extrn _ssl3_get_cipher_by_char:near ; DATA XREF: .rdata:000009F0o
					; .rdata:00000A68o ...
		extrn _ssl3_put_cipher_by_char:near ; DATA XREF: .rdata:000009F4o
					; .rdata:00000A6Co ...
		extrn _ssl3_num_ciphers:near ; DATA XREF: .rdata:000009FCo
					; .rdata:00000A74o ...
		extrn _ssl3_renegotiate:near ; DATA XREF: .rdata:000009D0o
					; .rdata:00000A48o ...
		extrn _ssl3_renegotiate_check:near ; DATA XREF:	.rdata:000009D4o
					; .rdata:00000A4Co ...
		extrn _ssl3_read:near	; DATA XREF: .rdata:000009C0o
					; .rdata:00000A38o ...
		extrn _ssl3_peek:near	; DATA XREF: .rdata:000009C4o
					; .rdata:00000A3Co ...
		extrn _ssl3_write:near	; DATA XREF: .rdata:000009C8o
					; .rdata:00000A40o ...
		extrn _ssl3_ctx_ctrl:near ; DATA XREF: .rdata:000009ECo
					; .rdata:00000A64o ...
		extrn _ssl3_callback_ctrl:near ; DATA XREF: .rdata:00000A14o
					; .rdata:00000A8Co ...
		extrn _ssl3_ctx_callback_ctrl:near ; DATA XREF:	.rdata:00000A18o
					; .rdata:00000A90o ...
		extrn _ssl3_pending:near ; DATA	XREF: .rdata:000009F8o
					; .rdata:00000A70o ...
		extrn _dtls1_read_bytes:near ; DATA XREF: .rdata:000009DCo
					; .rdata:00000A54o ...
		extrn _dtls1_write_app_data_bytes:near ; DATA XREF: .rdata:000009E0o
					; .rdata:00000A58o ...
		extrn _dtls1_default_timeout:near ; DATA XREF: .rdata:00000A08o
					; .rdata:00000A80o ...
		extrn _dtls1_get_cipher:near ; DATA XREF: .rdata:00000A00o
					; .rdata:00000A78o ...
; __time64_t __cdecl __time64(__time64_t *Time)
		extrn __imp___time64:near ; CODE XREF: _dtls1_connect+11p
					; DATA XREF: _dtls1_connect+11r ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn __imp__SetLastError@4:near ; CODE	XREF: _dtls1_connect+49p
					; DATA XREF: _dtls1_connect+49r
		extrn _BUF_MEM_new:near	; CODE XREF: _dtls1_connect+67Ep
		extrn _BUF_MEM_free:near ; CODE	XREF: _dtls1_connect+81Fp
		extrn _BUF_MEM_grow:near ; CODE	XREF: _dtls1_connect+693p
		extrn _BIO_test_flags:near ; CODE XREF:	_dtls1_connect+7B1p
		extrn _BIO_ctrl:near	; CODE XREF: _dtls1_connect+FCp
					; _dtls1_connect+25Cp
		extrn _BIO_push:near	; CODE XREF: _dtls1_connect+1B8p
		extrn _ERR_put_error:near ; CODE XREF: _dtls1_connect+7E8p
					; _dtls1_connect+805p
		extrn _ERR_clear_error:near ; CODE XREF: _dtls1_connect+43p
		extrn _SSL_clear:near	; CODE XREF: _dtls1_connect+92p
		extrn _SSL_state:near	; CODE XREF: _dtls1_connect+72p
					; _dtls1_connect+82p
		extrn _ssl_update_cache:near ; CODE XREF: _dtls1_connect+75Bp
		extrn _ssl3_init_finished_mac:near ; CODE XREF:	_dtls1_connect+15Bp
		extrn _ssl3_get_finished:near ;	CODE XREF: _dtls1_connect+5E1p
		extrn _ssl3_cleanup_key_block:near ; CODE XREF:	_dtls1_connect+727p
		extrn _ssl3_send_alert:near ; CODE XREF: _dtls1_get_hello_verify+98p
		extrn _ssl3_send_finished:near ; CODE XREF: _dtls1_connect+50Dp
		extrn _ssl3_setup_buffers:near ; CODE XREF: _dtls1_connect+6A9p
		extrn _dtls1_send_change_cipher_spec:near ; CODE XREF: _dtls1_connect+445p
		extrn _dtls1_reset_seq_numbers:near ; CODE XREF: _dtls1_connect+4DAp
		extrn _dtls1_start_timer:near ;	CODE XREF: _dtls1_connect+164p
					; _dtls1_connect+3ADp ...
		extrn _dtls1_stop_timer:near ; CODE XREF: _dtls1_connect+A3p
					; _dtls1_connect+214p ...
		extrn _ssl3_client_hello:near ;	CODE XREF: _dtls1_connect+16Ap
		extrn _ssl3_get_server_hello:near ; CODE XREF: _dtls1_connect+1C6p
		extrn _ssl3_get_certificate_request:near ; CODE	XREF: _dtls1_connect+33Dp
		extrn _ssl3_get_new_session_ticket:near	; CODE XREF: _dtls1_connect+58Cp
		extrn _ssl3_get_cert_status:near ; CODE	XREF: _dtls1_connect+5ABp
		extrn _ssl3_get_server_done:near ; CODE	XREF: _dtls1_connect+35Cp
		extrn _ssl3_send_client_verify:near ; CODE XREF: _dtls1_connect+40Dp
		extrn _ssl3_send_client_certificate:near ; CODE	XREF: _dtls1_connect+3B3p
		extrn _ssl3_send_client_key_exchange:near ; CODE XREF: _dtls1_connect+3D8p
		extrn _ssl3_get_key_exchange:near ; CODE XREF: _dtls1_connect+306p
		extrn _ssl3_get_server_certificate:near	; CODE XREF: _dtls1_connect+2B4p
		extrn _ssl3_check_cert_and_algorithm:near ; CODE XREF: _dtls1_connect+327p
		extrn _ssl_init_wbio_buffer:near ; CODE	XREF: _dtls1_connect+6BCp
		extrn _ssl_free_wbio_buffer:near ; CODE	XREF: _dtls1_connect+738p
		extrn _RAND_add:near	; CODE XREF: _dtls1_connect+3Bp
		extrn __chkstk:near	; CODE XREF: _dtls1_connect+5p
					; _dtls1_connect+27p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _dtls1_get_hello_verify+BAp
		extrn __fltused:near


		end
