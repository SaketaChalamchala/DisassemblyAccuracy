;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AD6B4C20D1BB001D1CD53880BE7760F1
; Input	CRC32 :	E3934C62

; File Name   :	C:\compspace\Diff\openssl\obj\verify.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_v_verbose	dd ?			; DATA XREF: _cb:loc_104r
					; _verify_main+3CCw
_vflags		dd ?			; DATA XREF: _check+5Er
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cb		proc near		; DATA XREF: _verify_main+60o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		push	edi
		call	_X509_STORE_CTX_get_error
		push	edi
		mov	ebx, eax
		call	_X509_STORE_CTX_get_current_cert
		mov	esi, [esp+14h+arg_0]
		add	esp, 8
		test	esi, esi
		jnz	loc_F1
		test	eax, eax
		jz	short loc_8A
		push	82031Fh
		push	esi
		push	eax
		call	_X509_get_subject_name
		add	esp, 4
		push	eax
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax
		call	_X509_NAME_print_ex_fp
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		add	esp, 14h

loc_8A:					; CODE XREF: _cb+26j
		push	ebx
		call	_X509_verify_cert_error_string
		add	esp, 4
		push	eax
		push	edi
		call	_X509_STORE_CTX_get_error_depth
		add	esp, 4
		push	eax
		push	ebx
		push	edi
		call	_X509_STORE_CTX_get0_parent_ctx
		add	esp, 4
		mov	edx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		test	eax, eax
		mov	ecx, offset ??_C@_0L@FFLNPCGI@?$FLCRL?5path?$FN?$AA@ ; "[CRL path]"
		cmovz	ecx, edx
		push	ecx
		push	offset ??_C@_0CC@ELIKHEHP@?$CFserror?5?$CFd?5at?5?$CFd?5depth?5lookup?3?$CFs@ ;	"%serror %d at %d depth	lookup:%s\n"
		call	_printf
		add	ebx, 0FFFFFFF6h
		add	esp, 14h
		cmp	ebx, 21h ; '!'  ; switch 34 cases
		ja	short $LN9	; jumptable 000000D4 default case
		movzx	eax, ds:$LN11[ebx]
		jmp	ds:$LN13[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _cb+A0j
					; DATA XREF: .text$mn:$LN13o
		push	edi		; jumptable 000000D4 case 33
		push	0
		call	_policies_print
		add	esp, 8

$LN7:					; CODE XREF: _cb+A0j
					; DATA XREF: .text$mn:$LN13o
		mov	esi, 1		; jumptable 000000D4 cases 0-2,8,14-16,24,27
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F1:					; CODE XREF: _cb+1Ej
		test	ebx, ebx
		jnz	short loc_104
		cmp	esi, 2
		jnz	short loc_104
		push	edi
		push	ebx
		call	_policies_print
		add	esp, 8

loc_104:				; CODE XREF: _cb+BFj _cb+C4j
		cmp	ds:_v_verbose, 0
		jnz	short $LN9	; jumptable 000000D4 default case
		call	_ERR_clear_error

$LN9:					; CODE XREF: _cb+97j _cb+A0j ...
		pop	edi		; jumptable 000000D4 default case
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
_cb		endp

; ---------------------------------------------------------------------------
$LN13		dd offset $LN7		; DATA XREF: _cb+A0r
		dd offset $LN6		; jump table for switch	statement
		dd offset $LN9
$LN11		db	0,     0,     0,     2 ; DATA XREF: _cb+99r
		db	2,     2,     2,     2 ; indirect table	for switch statement
		db	0,     2,     2,     2
		db	2,     2,     0,     0
		db	0,     2,     2,     2
		db	2,     2,     2,     2
		db	0,     2,     2,     0
		db	2,     2,     2,     2
		db	2,     1
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check		proc near		; CODE XREF: _verify_main+593p
					; _verify_main+5CBp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebx, ebx
		push	edi
		push	offset ??_C@_0BB@ODBFPAJB@certificate?5file?$AA@ ; "certificate	file"
		push	[esp+14h+arg_14]
		push	ebx
		push	3
		push	esi
		push	dword ptr ds:_bio_err
		call	_load_cert
		mov	ebp, eax
		add	esp, 18h
		test	ebp, ebp
		jz	loc_232
		test	esi, esi
		mov	eax, offset ??_C@_05MHOFLBOO@stdin?$AA@	; "stdin"
		cmovnz	eax, esi
		push	eax
		push	offset ??_C@_04PFAOODAA@?$CFs?3?5?$AA@ ; "%s: "
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 0Ch
		call	_X509_STORE_CTX_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_224
		push	ds:_vflags
		mov	esi, [esp+14h+arg_0]
		push	esi
		call	_X509_STORE_set_flags
		push	[esp+18h+arg_8]
		push	ebp
		push	esi
		push	edi
		call	_X509_STORE_CTX_init
		add	esp, 18h
		test	eax, eax
		jz	short loc_224
		mov	eax, [esp+10h+arg_C]
		test	eax, eax
		jz	short loc_1DB
		push	eax
		push	edi
		call	_X509_STORE_CTX_trusted_stack
		add	esp, 8

loc_1DB:				; CODE XREF: _check+87j
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1ED
		push	eax
		push	edi
		call	_X509_STORE_CTX_set0_crls
		add	esp, 8

loc_1ED:				; CODE XREF: _check+99j
		push	edi
		call	_X509_verify_cert
		push	edi
		mov	esi, eax
		call	_X509_STORE_CTX_free
		add	esp, 8
		xor	ebx, ebx

$end$14:
		test	esi, esi
		jle	short loc_232
		push	offset ??_C@_03JLOMOCCD@OK?6?$AA@ ; "OK\n"
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	ebx, 1
		jmp	short loc_240
; ---------------------------------------------------------------------------

loc_224:				; CODE XREF: _check+5Cj _check+7Fj
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4

loc_232:				; CODE XREF: _check+29j _check+BAj
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4

loc_240:				; CODE XREF: _check+DAj
		test	ebp, ebp
		jz	short loc_24D
		push	ebp
		call	_X509_free
		add	esp, 4

loc_24D:				; CODE XREF: _check+FAj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
_check		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 254h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _check+4Bp _check+CDp

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 278h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _cb+4Ep _cb+89p

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _verify_main
_verify_main	proc near

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 34h ; '4'
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		xor	esi, esi
		mov	[esp+40h+var_1C], 0
		push	edi
		mov	ebp, 1
		mov	[esp+44h+var_14], 0
		mov	[esp+44h+var_28], esi
		mov	[esp+44h+var_10], esi
		mov	[esp+44h+var_C], esi
		mov	[esp+44h+var_8], esi
		mov	[esp+44h+var_2C], esi
		mov	[esp+44h+var_30], esi
		mov	[esp+44h+var_20], esi
		mov	[esp+44h+var_24], esi
		mov	[esp+44h+var_4], esi
		mov	[esp+44h+var_18], esi
		call	_X509_STORE_new
		mov	ebx, eax
		mov	[esp+44h+var_34], ebx
		test	ebx, ebx
		jz	loc_89C
		push	offset _cb
		push	ebx
		call	_X509_STORE_set_verify_cb
		add	esp, 8
		call	_ERR_load_crypto_strings
		mov	eax, dword ptr ds:_bio_err
		test	eax, eax
		jnz	short loc_35B
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_35B
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		mov	eax, dword ptr ds:_bio_err
		add	esp, 14h

loc_35B:				; CODE XREF: _verify_main+7Aj
					; _verify_main+91j
		push	0
		push	eax
		call	_load_config
		add	esp, 8
		test	eax, eax
		jz	loc_89C
		mov	ecx, [esp+44h+arg_0]
		mov	edi, [esp+44h+arg_4]
		dec	ecx
		add	edi, 4
		mov	[esp+44h+arg_0], ecx
		mov	[esp+44h+arg_4], edi
		cmp	ecx, 1
		jl	loc_6A8

loc_38B:				; CODE XREF: _verify_main+3E5j
		mov	esi, [edi]
		mov	edx, offset ??_C@_07MNNNLALG@?9CApath?$AA@ ; "-CApath"
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_398:				; CODE XREF: _verify_main+10Aj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_3B8
		test	bl, bl
		jz	short loc_3B4
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_3B8
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_398

loc_3B4:				; CODE XREF: _verify_main+F8j
		xor	eax, eax
		jmp	short loc_3BD
; ---------------------------------------------------------------------------

loc_3B8:				; CODE XREF: _verify_main+F4j
					; _verify_main+100j
		sbb	eax, eax
		or	eax, 1

loc_3BD:				; CODE XREF: _verify_main+10Ej
		test	eax, eax
		jnz	short loc_3E3
		mov	eax, ecx
		dec	ecx
		mov	[esp+44h+arg_0], ecx
		cmp	eax, 1
		jl	loc_898
		add	edi, 4
		mov	[esp+44h+arg_4], edi
		mov	eax, [edi]
		mov	[esp+44h+var_14], eax
		jmp	loc_67E
; ---------------------------------------------------------------------------

loc_3E3:				; CODE XREF: _verify_main+117j
		mov	eax, offset ??_C@_07EAFCHGPO@?9CAfile?$AA@ ; "-CAfile"

loc_3E8:				; CODE XREF: _verify_main+15Aj
		mov	dl, [esi]
		cmp	dl, [eax]
		jnz	short loc_408
		test	dl, dl
		jz	short loc_404
		mov	dl, [esi+1]
		cmp	dl, [eax+1]
		jnz	short loc_408
		add	esi, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_3E8

loc_404:				; CODE XREF: _verify_main+148j
		xor	eax, eax
		jmp	short loc_40D
; ---------------------------------------------------------------------------

loc_408:				; CODE XREF: _verify_main+144j
					; _verify_main+150j
		sbb	eax, eax
		or	eax, 1

loc_40D:				; CODE XREF: _verify_main+15Ej
		test	eax, eax
		jnz	short loc_433
		mov	eax, ecx
		dec	ecx
		mov	[esp+44h+arg_0], ecx
		cmp	eax, 1
		jl	loc_898
		add	edi, 4
		mov	[esp+44h+arg_4], edi
		mov	eax, [edi]
		mov	[esp+44h+var_28], eax
		jmp	loc_67E
; ---------------------------------------------------------------------------

loc_433:				; CODE XREF: _verify_main+167j
		lea	eax, [esp+44h+var_24]
		push	eax
		push	dword ptr ds:_bio_err
		lea	eax, [esp+4Ch+var_1C]
		push	eax
		lea	eax, [esp+50h+arg_0]
		push	eax
		lea	eax, [esp+54h+arg_4]
		push	eax
		call	_args_verify
		add	esp, 14h
		test	eax, eax
		jz	short loc_471
		cmp	[esp+44h+var_1C], 0
		jnz	loc_898
		mov	edi, [esp+44h+arg_4]
		mov	ecx, [esp+44h+arg_0]
		jmp	loc_68A
; ---------------------------------------------------------------------------

loc_471:				; CODE XREF: _verify_main+1AFj
		mov	edi, [esp+44h+arg_4]
		mov	ecx, offset ??_C@_0L@EABBFAIP@?9untrusted?$AA@ ; "-untrusted"
		mov	esi, [edi]
		mov	eax, esi

loc_47E:				; CODE XREF: _verify_main+1F0j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_49E
		test	dl, dl
		jz	short loc_49A
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_49E
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_47E

loc_49A:				; CODE XREF: _verify_main+1DEj
		xor	eax, eax
		jmp	short loc_4A3
; ---------------------------------------------------------------------------

loc_49E:				; CODE XREF: _verify_main+1DAj
					; _verify_main+1E6j
		sbb	eax, eax
		or	eax, 1

loc_4A3:				; CODE XREF: _verify_main+1F4j
		test	eax, eax
		jnz	short loc_4CD
		mov	ecx, [esp+44h+arg_0]
		mov	eax, ecx
		dec	ecx
		mov	[esp+44h+arg_0], ecx
		cmp	eax, 1
		jl	loc_898
		add	edi, 4
		mov	[esp+44h+arg_4], edi
		mov	eax, [edi]
		mov	[esp+44h+var_10], eax
		jmp	loc_67E
; ---------------------------------------------------------------------------

loc_4CD:				; CODE XREF: _verify_main+1FDj
		mov	ecx, offset ??_C@_08HHOIEGAD@?9trusted?$AA@ ; "-trusted"
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_4D8:				; CODE XREF: _verify_main+24Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_4F8
		test	dl, dl
		jz	short loc_4F4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_4F8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_4D8

loc_4F4:				; CODE XREF: _verify_main+238j
		xor	eax, eax
		jmp	short loc_4FD
; ---------------------------------------------------------------------------

loc_4F8:				; CODE XREF: _verify_main+234j
					; _verify_main+240j
		sbb	eax, eax
		or	eax, 1

loc_4FD:				; CODE XREF: _verify_main+24Ej
		test	eax, eax
		jnz	short loc_527
		mov	ecx, [esp+44h+arg_0]
		mov	eax, ecx
		dec	ecx
		mov	[esp+44h+arg_0], ecx
		cmp	eax, 1
		jl	loc_898
		add	edi, 4
		mov	[esp+44h+arg_4], edi
		mov	eax, [edi]
		mov	[esp+44h+var_C], eax
		jmp	loc_67E
; ---------------------------------------------------------------------------

loc_527:				; CODE XREF: _verify_main+257j
		mov	ecx, offset ??_C@_08IJBOOOA@?9CRLfile?$AA@ ; "-CRLfile"
		mov	eax, esi

loc_52E:				; CODE XREF: _verify_main+2A0j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_54E
		test	dl, dl
		jz	short loc_54A
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_54E
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_52E

loc_54A:				; CODE XREF: _verify_main+28Ej
		xor	eax, eax
		jmp	short loc_553
; ---------------------------------------------------------------------------

loc_54E:				; CODE XREF: _verify_main+28Aj
					; _verify_main+296j
		sbb	eax, eax
		or	eax, 1

loc_553:				; CODE XREF: _verify_main+2A4j
		test	eax, eax
		jnz	short loc_57D
		mov	ecx, [esp+44h+arg_0]
		mov	eax, ecx
		dec	ecx
		mov	[esp+44h+arg_0], ecx
		cmp	eax, 1
		jl	loc_898
		add	edi, 4
		mov	[esp+44h+arg_4], edi
		mov	eax, [edi]
		mov	[esp+44h+var_8], eax
		jmp	loc_67E
; ---------------------------------------------------------------------------

loc_57D:				; CODE XREF: _verify_main+2ADj
		mov	ecx, offset ??_C@_0O@FJDFGOOH@?9crl_download?$AA@ ; "-crl_download"
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_588:				; CODE XREF: _verify_main+2FAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_5A8
		test	dl, dl
		jz	short loc_5A4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_5A8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_588

loc_5A4:				; CODE XREF: _verify_main+2E8j
		xor	eax, eax
		jmp	short loc_5AD
; ---------------------------------------------------------------------------

loc_5A8:				; CODE XREF: _verify_main+2E4j
					; _verify_main+2F0j
		sbb	eax, eax
		or	eax, 1

loc_5AD:				; CODE XREF: _verify_main+2FEj
		test	eax, eax
		jnz	short loc_5BA
		mov	[esp+44h+var_4], ebp
		jmp	loc_67A
; ---------------------------------------------------------------------------

loc_5BA:				; CODE XREF: _verify_main+307j
		mov	ecx, offset ??_C@_07CECBDAGF@?9engine?$AA@ ; "-engine"
		mov	eax, esi
		nop	dword ptr [eax+00000000h]

loc_5C8:				; CODE XREF: _verify_main+33Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_5E8
		test	dl, dl
		jz	short loc_5E4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_5E8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_5C8

loc_5E4:				; CODE XREF: _verify_main+328j
		xor	eax, eax
		jmp	short loc_5ED
; ---------------------------------------------------------------------------

loc_5E8:				; CODE XREF: _verify_main+324j
					; _verify_main+330j
		sbb	eax, eax
		or	eax, 1

loc_5ED:				; CODE XREF: _verify_main+33Ej
		test	eax, eax
		jnz	short loc_612
		mov	ecx, [esp+44h+arg_0]
		dec	ecx
		mov	[esp+44h+arg_0], ecx
		cmp	ecx, 1
		jl	loc_898
		add	edi, 4
		mov	[esp+44h+arg_4], edi
		mov	eax, [edi]
		mov	[esp+44h+var_18], eax
		jmp	short loc_67E
; ---------------------------------------------------------------------------

loc_612:				; CODE XREF: _verify_main+347j
		mov	ecx, offset ??_C@_05DOEHDILL@?9help?$AA@ ; "-help"
		mov	eax, esi

loc_619:				; CODE XREF: _verify_main+38Bj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_639
		test	dl, dl
		jz	short loc_635
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_639
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_619

loc_635:				; CODE XREF: _verify_main+379j
		xor	eax, eax
		jmp	short loc_63E
; ---------------------------------------------------------------------------

loc_639:				; CODE XREF: _verify_main+375j
					; _verify_main+381j
		sbb	eax, eax
		or	eax, 1

loc_63E:				; CODE XREF: _verify_main+38Fj
		test	eax, eax
		jz	loc_898
		mov	eax, offset ??_C@_08FBJJFDKJ@?9verbose?$AA@ ; "-verbose"

loc_64B:				; CODE XREF: _verify_main+3BDj
		mov	cl, [esi]
		cmp	cl, [eax]
		jnz	short loc_66B
		test	cl, cl
		jz	short loc_667
		mov	cl, [esi+1]
		cmp	cl, [eax+1]
		jnz	short loc_66B
		add	esi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_64B

loc_667:				; CODE XREF: _verify_main+3ABj
		xor	eax, eax
		jmp	short loc_670
; ---------------------------------------------------------------------------

loc_66B:				; CODE XREF: _verify_main+3A7j
					; _verify_main+3B3j
		sbb	eax, eax
		or	eax, 1

loc_670:				; CODE XREF: _verify_main+3C1j
		test	eax, eax
		jnz	short loc_695
		mov	ds:_v_verbose, ebp

loc_67A:				; CODE XREF: _verify_main+30Dj
		mov	ecx, [esp+44h+arg_0]

loc_67E:				; CODE XREF: _verify_main+136j
					; _verify_main+186j ...
		dec	ecx
		add	edi, 4
		mov	[esp+44h+arg_0], ecx
		mov	[esp+44h+arg_4], edi

loc_68A:				; CODE XREF: _verify_main+1C4j
		cmp	ecx, 1
		jge	loc_38B
		jmp	short loc_6A0
; ---------------------------------------------------------------------------

loc_695:				; CODE XREF: _verify_main+3CAj
		mov	eax, [edi]
		cmp	byte ptr [eax],	2Dh ; '-'
		jz	loc_898

loc_6A0:				; CODE XREF: _verify_main+3EBj
		mov	esi, [esp+44h+var_28]
		mov	ebx, [esp+44h+var_34]

loc_6A8:				; CODE XREF: _verify_main+DDj
		push	0
		push	[esp+48h+var_18]
		push	dword ptr ds:_bio_err
		call	_setup_engine
		mov	edi, eax
		add	esp, 0Ch
		mov	eax, [esp+44h+var_24]
		test	eax, eax
		jz	short loc_6D0
		push	eax
		push	ebx
		call	_X509_STORE_set1_param
		add	esp, 8

loc_6D0:				; CODE XREF: _verify_main+41Cj
		call	_X509_LOOKUP_file
		push	eax
		push	ebx
		call	_X509_STORE_add_lookup
		add	esp, 8
		test	eax, eax
		jnz	short $LN145
		call	dword ptr ds:__imp__abort

$LN145:					; CODE XREF: _verify_main+439j
		push	0
		test	esi, esi
		jz	short loc_725
		push	1
		push	esi
		push	1
		push	eax
		call	_X509_LOOKUP_ctrl
		add	esp, 14h
		test	eax, eax
		jnz	short loc_734
		push	esi
		push	offset ??_C@_0BH@FHLAEOCH@Error?5loading?5file?5?$CFs?6?$AA@ ; "Error loading file %s\n"

loc_707:				; CODE XREF: _verify_main+4C7j
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 10h
		jmp	loc_89C
; ---------------------------------------------------------------------------

loc_725:				; CODE XREF: _verify_main+445j
		push	3
		push	0
		push	1
		push	eax
		call	_X509_LOOKUP_ctrl
		add	esp, 14h

loc_734:				; CODE XREF: _verify_main+457j
		call	_X509_LOOKUP_hash_dir
		push	eax
		push	ebx
		call	_X509_STORE_add_lookup
		add	esp, 8
		test	eax, eax
		jnz	short $LN146
		call	dword ptr ds:__imp__abort

$LN146:					; CODE XREF: _verify_main+49Dj
		mov	esi, [esp+44h+var_14]
		push	0
		test	esi, esi
		jz	short loc_771
		push	1
		push	esi
		push	2
		push	eax
		call	_X509_LOOKUP_ctrl
		add	esp, 14h
		test	eax, eax
		jnz	short loc_780
		push	esi
		push	offset ??_C@_0BM@OKGFCOK@Error?5loading?5directory?5?$CFs?6?$AA@ ; "Error loading directory %s\n"
		jmp	short loc_707
; ---------------------------------------------------------------------------

loc_771:				; CODE XREF: _verify_main+4ADj
		push	3
		push	0
		push	2
		push	eax
		call	_X509_LOOKUP_ctrl
		add	esp, 14h

loc_780:				; CODE XREF: _verify_main+4BFj
		call	_ERR_clear_error
		mov	eax, [esp+44h+var_10]
		test	eax, eax
		jz	short loc_7B2
		push	offset ??_C@_0BH@LEHBNKBE@untrusted?5certificates?$AA@ ; "untrusted certificates"
		push	edi
		push	0
		push	3
		push	eax
		push	dword ptr ds:_bio_err
		call	_load_certs
		add	esp, 18h
		mov	[esp+44h+var_2C], eax
		test	eax, eax
		jz	loc_89C

loc_7B2:				; CODE XREF: _verify_main+4E3j
		mov	eax, [esp+44h+var_C]
		test	eax, eax
		jz	short loc_7DF
		push	offset ??_C@_0BF@JDMECOPM@trusted?5certificates?$AA@ ; "trusted	certificates"
		push	edi
		push	0
		push	3
		push	eax
		push	dword ptr ds:_bio_err
		call	_load_certs
		add	esp, 18h
		mov	[esp+44h+var_30], eax
		test	eax, eax
		jz	loc_89C

loc_7DF:				; CODE XREF: _verify_main+510j
		mov	eax, [esp+44h+var_8]
		test	eax, eax
		jz	short loc_810
		push	offset ??_C@_0L@KINIPLHJ@other?5CRLs?$AA@ ; "other CRLs"
		push	edi
		push	0
		push	3
		push	eax
		push	dword ptr ds:_bio_err
		call	_load_crls
		mov	esi, eax
		add	esp, 18h
		mov	[esp+44h+var_20], esi
		test	esi, esi
		jz	loc_89C
		jmp	short loc_812
; ---------------------------------------------------------------------------

loc_810:				; CODE XREF: _verify_main+53Dj
		xor	esi, esi

loc_812:				; CODE XREF: _verify_main+566j
		xor	ebp, ebp
		cmp	[esp+44h+var_4], ebp
		jz	short loc_823
		push	ebx
		call	_store_setup_crl_download
		add	esp, 4

loc_823:				; CODE XREF: _verify_main+570j
		mov	eax, [esp+44h+arg_0]
		cmp	eax, 1
		jge	short loc_854
		push	edi
		mov	edi, [esp+48h+var_2C]
		push	esi
		mov	esi, [esp+4Ch+var_30]
		push	esi
		push	edi
		push	0
		push	ebx
		call	_check
		add	esp, 18h
		cmp	eax, 1
		jz	loc_93B
		or	ebp, 0FFFFFFFFh
		jmp	loc_93B
; ---------------------------------------------------------------------------

loc_854:				; CODE XREF: _verify_main+582j
		xor	esi, esi
		test	eax, eax
		jle	loc_933

loc_85E:				; CODE XREF: _verify_main+5E3j
		mov	eax, [esp+44h+arg_4]
		push	edi
		push	[esp+48h+var_20]
		push	[esp+4Ch+var_30]
		push	[esp+50h+var_2C]
		push	dword ptr [eax+esi*4]
		push	ebx
		call	_check
		add	esp, 18h
		cmp	eax, 1
		mov	eax, 0FFFFFFFFh
		cmovnz	ebp, eax
		inc	esi
		cmp	esi, [esp+44h+arg_0]
		jl	short loc_85E

$end$147:
		cmp	ebp, 1
		jnz	loc_933
		jmp	short loc_89C
; ---------------------------------------------------------------------------

loc_898:				; CODE XREF: _verify_main+123j
					; _verify_main+173j ...
		mov	ebx, [esp+44h+var_34]

loc_89C:				; CODE XREF: _verify_main+5Aj
					; _verify_main+C0j ...
		push	offset ??_C@_0FH@MLFLDGNL@usage?3?5verify?5?$FL?9verbose?$FN?5?$FL?9CApat@ ; "usage: verify [-verbose] [-CApath	path]"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CG@GCIDDDJA@?5?$FL?9no_alt_chains?$FN?5?$FL?9attime?5times@ ; " [-no_alt_chains] [-attime	timestamp]"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0N@KGGMOIDH@?5?$FL?9engine?5e?$FN?$AA@ ; "	[-engine e]"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BC@PPMFFMNJ@?5cert1?5cert2?5?4?4?4?6?$AA@	; " cert1 cert2	...\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BE@JFOOIHKN@recognized?5usages?3?6?$AA@ ;	"recognized usages:\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 28h
		xor	edi, edi
		call	_X509_PURPOSE_get_count
		test	eax, eax
		jle	short loc_933

loc_8FA:				; CODE XREF: _verify_main+689j
		push	edi
		call	_X509_PURPOSE_get0
		mov	esi, eax
		push	esi
		call	_X509_PURPOSE_get0_name
		add	esp, 8
		push	eax
		push	esi
		call	_X509_PURPOSE_get0_sname
		add	esp, 4
		push	eax
		push	offset ??_C@_0L@GPOJFHNG@?7?$CF?910s?7?$CFs?6?$AA@ ; "\t%-10s\t%s\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 10h
		inc	edi
		call	_X509_PURPOSE_get_count
		cmp	edi, eax
		jl	short loc_8FA

loc_933:				; CODE XREF: _verify_main+5B0j
					; _verify_main+5E8j ...
		mov	edi, [esp+44h+var_2C]
		mov	esi, [esp+44h+var_30]

loc_93B:				; CODE XREF: _verify_main+59Ej
					; _verify_main+5A7j
		mov	eax, [esp+44h+var_24]
		test	eax, eax
		jz	short loc_94C
		push	eax
		call	_X509_VERIFY_PARAM_free
		add	esp, 4

loc_94C:				; CODE XREF: _verify_main+699j
		test	ebx, ebx
		jz	short loc_959
		push	ebx
		call	_X509_STORE_free
		add	esp, 4

loc_959:				; CODE XREF: _verify_main+6A6j
		push	offset _X509_free
		push	edi
		call	_sk_pop_free
		push	offset _X509_free
		push	esi
		call	_sk_pop_free
		push	offset _X509_CRL_free
		push	[esp+58h+var_20]
		call	_sk_pop_free
		add	esp, 18h
		mov	eax, 2
		test	ebp, ebp
		cmovs	ebp, eax
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 34h
		retn
_verify_main	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 994h
; COMDAT (pick any)
		public ??_C@_07MNNNLALG@?9CApath?$AA@
; `string'
??_C@_07MNNNLALG@?9CApath?$AA@ db '-CApath',0 ; DATA XREF: _verify_main+E5o
_rdata		ends			; $LN144

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 99Ch
; COMDAT (pick any)
		public ??_C@_07EAFCHGPO@?9CAfile?$AA@
; `string'
??_C@_07EAFCHGPO@?9CAfile?$AA@ db '-CAfile',0 ; DATA XREF: _verify_main:loc_3E3o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9A4h
; COMDAT (pick any)
		public ??_C@_0L@EABBFAIP@?9untrusted?$AA@
; `string'
??_C@_0L@EABBFAIP@?9untrusted?$AA@ db '-untrusted',0 ; DATA XREF: _verify_main+1CDo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9B0h
; COMDAT (pick any)
		public ??_C@_08HHOIEGAD@?9trusted?$AA@
; `string'
??_C@_08HHOIEGAD@?9trusted?$AA@	db '-trusted',0 ; DATA XREF: _verify_main:loc_4CDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9BCh
; COMDAT (pick any)
		public ??_C@_08IJBOOOA@?9CRLfile?$AA@
; `string'
??_C@_08IJBOOOA@?9CRLfile?$AA@ db '-CRLfile',0 ; DATA XREF: _verify_main:loc_527o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9C8h
; COMDAT (pick any)
		public ??_C@_0O@FJDFGOOH@?9crl_download?$AA@
; `string'
??_C@_0O@FJDFGOOH@?9crl_download?$AA@ db '-crl_download',0
					; DATA XREF: _verify_main:loc_57Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9D8h
; COMDAT (pick any)
		public ??_C@_07CECBDAGF@?9engine?$AA@
; `string'
??_C@_07CECBDAGF@?9engine?$AA@ db '-engine',0 ; DATA XREF: _verify_main:loc_5BAo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E0h
; COMDAT (pick any)
		public ??_C@_05DOEHDILL@?9help?$AA@
; `string'
??_C@_05DOEHDILL@?9help?$AA@ db	'-help',0 ; DATA XREF: _verify_main:loc_612o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E8h
; COMDAT (pick any)
		public ??_C@_08FBJJFDKJ@?9verbose?$AA@
; `string'
??_C@_08FBJJFDKJ@?9verbose?$AA@	db '-verbose',0 ; DATA XREF: _verify_main+39Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F4h
; COMDAT (pick any)
		public ??_C@_0BH@FHLAEOCH@Error?5loading?5file?5?$CFs?6?$AA@
; `string'
??_C@_0BH@FHLAEOCH@Error?5loading?5file?5?$CFs?6?$AA@ db 'Error loading file %s',0Ah,0
					; DATA XREF: _verify_main+45Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0Ch
; COMDAT (pick any)
		public ??_C@_0BM@OKGFCOK@Error?5loading?5directory?5?$CFs?6?$AA@
; `string'
??_C@_0BM@OKGFCOK@Error?5loading?5directory?5?$CFs?6?$AA@ db 'Error loading directory %s',0Ah,0
					; DATA XREF: _verify_main+4C2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A28h
; COMDAT (pick any)
		public ??_C@_0BH@LEHBNKBE@untrusted?5certificates?$AA@
; `string'
??_C@_0BH@LEHBNKBE@untrusted?5certificates?$AA@	db 'untrusted certificates',0
					; DATA XREF: _verify_main+4E5o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A40h
; COMDAT (pick any)
		public ??_C@_0BF@JDMECOPM@trusted?5certificates?$AA@
; `string'
??_C@_0BF@JDMECOPM@trusted?5certificates?$AA@ db 'trusted certificates',0
					; DATA XREF: _verify_main+512o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A58h
; COMDAT (pick any)
		public ??_C@_0L@KINIPLHJ@other?5CRLs?$AA@
; `string'
??_C@_0L@KINIPLHJ@other?5CRLs?$AA@ db 'other CRLs',0 ; DATA XREF: _verify_main+53Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0A64h
; COMDAT (pick any)
		public ??_C@_0FH@MLFLDGNL@usage?3?5verify?5?$FL?9verbose?$FN?5?$FL?9CApat@
; `string'
??_C@_0FH@MLFLDGNL@usage?3?5verify?5?$FL?9verbose?$FN?5?$FL?9CApat@ db 'usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose '
					; DATA XREF: _verify_main:loc_89Co
		db 'purpose] [-crl_check]',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ABCh
; COMDAT (pick any)
		public ??_C@_0CG@GCIDDDJA@?5?$FL?9no_alt_chains?$FN?5?$FL?9attime?5times@
; `string'
??_C@_0CG@GCIDDDJA@?5?$FL?9no_alt_chains?$FN?5?$FL?9attime?5times@ db ' [-no_alt_chains] [-attime timestamp]',0
					; DATA XREF: _verify_main+604o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AE4h
; COMDAT (pick any)
		public ??_C@_0N@KGGMOIDH@?5?$FL?9engine?5e?$FN?$AA@
; `string'
??_C@_0N@KGGMOIDH@?5?$FL?9engine?5e?$FN?$AA@ db	' [-engine e]',0
					; DATA XREF: _verify_main+614o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AF4h
; COMDAT (pick any)
		public ??_C@_0BC@PPMFFMNJ@?5cert1?5cert2?5?4?4?4?6?$AA@
; `string'
??_C@_0BC@PPMFFMNJ@?5cert1?5cert2?5?4?4?4?6?$AA@ db ' cert1 cert2 ...',0Ah,0
					; DATA XREF: _verify_main+624o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B08h
; COMDAT (pick any)
		public ??_C@_0BE@JFOOIHKN@recognized?5usages?3?6?$AA@
; `string'
??_C@_0BE@JFOOIHKN@recognized?5usages?3?6?$AA@ db 'recognized usages:',0Ah,0
					; DATA XREF: _verify_main+634o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B1Ch
; COMDAT (pick any)
		public ??_C@_0L@GPOJFHNG@?7?$CF?910s?7?$CFs?6?$AA@
; `string'
??_C@_0L@GPOJFHNG@?7?$CF?910s?7?$CFs?6?$AA@ db 9,'%-10s',9,'%s',0Ah,0
					; DATA XREF: _verify_main+66Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B28h
; COMDAT (pick any)
		public ??_C@_0BB@ODBFPAJB@certificate?5file?$AA@
; `string'
??_C@_0BB@ODBFPAJB@certificate?5file?$AA@ db 'certificate file',0 ; DATA XREF: _check+Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B3Ch
; COMDAT (pick any)
		public ??_C@_05MHOFLBOO@stdin?$AA@
; `string'
??_C@_05MHOFLBOO@stdin?$AA@ db 'stdin',0 ; DATA XREF: _check+31o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B44h
; COMDAT (pick any)
		public ??_C@_04PFAOODAA@?$CFs?3?5?$AA@
; char `string'[]
??_C@_04PFAOODAA@?$CFs?3?5?$AA@	db '%s: ',0 ; DATA XREF: _check+3Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4Ch
; COMDAT (pick any)
		public ??_C@_03JLOMOCCD@OK?6?$AA@
; char `string'[4]
??_C@_03JLOMOCCD@OK?6?$AA@ db 'OK',0Ah,0 ; DATA XREF: _check+BCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B50h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; char `string'[2]
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _cb+49o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B54h
; COMDAT (pick any)
		public ??_C@_0L@FFLNPCGI@?$FLCRL?5path?$FN?$AA@
; `string'
??_C@_0L@FFLNPCGI@?$FLCRL?5path?$FN?$AA@ db '[CRL path]',0 ; DATA XREF: _cb+7Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0B60h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _cb+74o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B64h
; COMDAT (pick any)
		public ??_C@_0CC@ELIKHEHP@?$CFserror?5?$CFd?5at?5?$CFd?5depth?5lookup?3?$CFs@
; char `string'[]
??_C@_0CC@ELIKHEHP@?$CFserror?5?$CFd?5at?5?$CFd?5depth?5lookup?3?$CFs@ db '%serror %d at %d depth lookup:%s',0Ah,0
					; DATA XREF: _cb+84o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _cb+3Ap
					; _check+41p ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p	...
; void __cdecl _abort()
		extrn __imp__abort:near	; CODE XREF: _verify_main+43Bp
					; _verify_main+49Fp
					; DATA XREF: ...
		extrn _sk_pop_free:near	; CODE XREF: _verify_main+6B7p
					; _verify_main+6C2p ...
		extrn _BIO_s_file:near	; CODE XREF: _verify_main+7Cp
		extrn _BIO_new:near	; CODE XREF: _verify_main+82p
		extrn _BIO_ctrl:near	; CODE XREF: _verify_main+A6p
		extrn _BIO_printf:near	; CODE XREF: _verify_main+465p
					; _verify_main+5FFp ...
		extrn _X509_STORE_new:near ; CODE XREF:	_verify_main+4Dp
		extrn _X509_STORE_free:near ; CODE XREF: _verify_main+6A9p
		extrn _X509_STORE_set_flags:near ; CODE	XREF: _check+69p
		extrn _X509_STORE_set1_param:near ; CODE XREF: _verify_main+420p
		extrn _X509_STORE_set_verify_cb:near ; CODE XREF: _verify_main+66p
		extrn _X509_STORE_CTX_new:near ; CODE XREF: _check+53p
		extrn _X509_STORE_CTX_free:near	; CODE XREF: _check+AEp
		extrn _X509_STORE_CTX_init:near	; CODE XREF: _check+75p
		extrn _X509_STORE_CTX_trusted_stack:near ; CODE	XREF: _check+8Bp
		extrn _X509_STORE_add_lookup:near ; CODE XREF: _verify_main+42Fp
					; _verify_main+493p
		extrn _X509_LOOKUP_hash_dir:near ; CODE	XREF: _verify_main:loc_734p
		extrn _X509_LOOKUP_file:near ; CODE XREF: _verify_main:loc_6D0p
		extrn _X509_LOOKUP_ctrl:near ; CODE XREF: _verify_main+44Dp
					; _verify_main+484p ...
		extrn _X509_STORE_CTX_get_error:near ; CODE XREF: _cb+8p
		extrn _X509_STORE_CTX_get_error_depth:near ; CODE XREF:	_cb+61p
		extrn _X509_STORE_CTX_get_current_cert:near ; CODE XREF: _cb+10p
		extrn _X509_STORE_CTX_get0_parent_ctx:near ; CODE XREF:	_cb+6Cp
		extrn _X509_STORE_CTX_set0_crls:near ; CODE XREF: _check+9Dp
		extrn _X509_VERIFY_PARAM_free:near ; CODE XREF:	_verify_main+69Cp
		extrn _X509_verify_cert_error_string:near ; CODE XREF: _cb+57p
		extrn _X509_free:near	; CODE XREF: _check+FDp
					; DATA XREF: _verify_main:loc_959o ...
		extrn _X509_CRL_free:near ; DATA XREF: _verify_main+6C7o
		extrn _X509_get_subject_name:near ; CODE XREF: _cb+2Fp
		extrn _X509_NAME_print_ex_fp:near ; CODE XREF: _cb+44p
		extrn _X509_verify_cert:near ; CODE XREF: _check+A6p
		extrn _ERR_clear_error:near ; CODE XREF: _cb+D9p
					; _verify_main:loc_780p
		extrn _ERR_print_errors:near ; CODE XREF: _check+E2p
					; _check+F0p ...
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _verify_main+6Ep
		extrn _X509_PURPOSE_get_count:near ; CODE XREF:	_verify_main+649p
					; _verify_main+682p
		extrn _X509_PURPOSE_get0:near ;	CODE XREF: _verify_main+653p
		extrn _X509_PURPOSE_get0_name:near ; CODE XREF:	_verify_main+65Bp
		extrn _X509_PURPOSE_get0_sname:near ; CODE XREF: _verify_main+665p
		extrn _load_cert:near	; CODE XREF: _check+1Dp
		extrn _load_certs:near	; CODE XREF: _verify_main+4F6p
					; _verify_main+523p
		extrn _load_crls:near	; CODE XREF: _verify_main+550p
		extrn _setup_engine:near ; CODE	XREF: _verify_main+40Cp
		extrn _load_config:near	; CODE XREF: _verify_main+B6p
		extrn _args_verify:near	; CODE XREF: _verify_main+1A5p
		extrn _policies_print:near ; CODE XREF:	_cb+AAp _cb+C8p
		extrn _store_setup_crl_download:near ; CODE XREF: _verify_main+573p
		extrn __chkstk:near	; CODE XREF: _verify_main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn _bio_err:near	; DATA XREF: _check+17r
					; _check:loc_224r ...


		end
