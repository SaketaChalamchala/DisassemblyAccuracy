;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	95B913412E087B90C2AA6099F396356F
; Input	CRC32 :	434C2DC4

; File Name   :	C:\compspace\Diff\openssl\obj\bn_mul.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; size_t BN_mul
		public _BN_mul
_BN_mul		proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 10h
		call	__chkstk
		mov	eax, [esp+10h+arg_4]
		push	ebx
		push	edi
		mov	[esp+18h+var_4], 0
		mov	edi, [eax+4]
		mov	eax, [esp+18h+arg_8]
		mov	ebx, [eax+4]
		test	edi, edi
		jz	loc_2B3
		test	ebx, ebx
		jz	loc_2B3
		push	esi
		mov	esi, [esp+1Ch+arg_C]
		lea	eax, [ebx+edi]
		push	esi
		mov	[esp+20h+var_8], eax
		call	_BN_CTX_start
		mov	eax, [esp+20h+arg_0]
		add	esp, 4
		mov	edx, [esp+1Ch+arg_4]
		cmp	eax, edx
		jz	short loc_5F
		mov	ecx, [esp+1Ch+arg_8]
		cmp	eax, ecx
		jz	short loc_5F
		mov	esi, eax
		jmp	short loc_7A
; ---------------------------------------------------------------------------

loc_5F:					; CODE XREF: _BN_mul+51j _BN_mul+59j
		push	esi
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	$err$52
		mov	ecx, [esp+1Ch+arg_8]
		mov	edx, [esp+1Ch+arg_4]

loc_7A:					; CODE XREF: _BN_mul+5Dj
		mov	eax, [edx+0Ch]
		xor	eax, [ecx+0Ch]
		push	ebp
		mov	ebp, edi
		mov	[esi+0Ch], eax
		sub	ebp, ebx
		jnz	short loc_CE
		cmp	edi, 8
		jnz	short loc_CE
		cmp	dword ptr [esi+8], 10h
		jl	short loc_99
		mov	eax, esi
		jmp	short loc_AC
; ---------------------------------------------------------------------------

loc_99:					; CODE XREF: _BN_mul+93j
		push	10h
		push	esi
		call	_bn_expand2
		mov	ecx, [esp+28h+arg_8]
		add	esp, 8
		mov	edx, [esp+20h+arg_4]

loc_AC:					; CODE XREF: _BN_mul+97j
		test	eax, eax
		jz	loc_29B
		mov	dword ptr [esi+4], 10h
		push	dword ptr [ecx]
		push	dword ptr [edx]
		push	dword ptr [esi]
		call	_bn_mul_comba8
		add	esp, 0Ch
		jmp	$end$53
; ---------------------------------------------------------------------------

loc_CE:					; CODE XREF: _BN_mul+88j _BN_mul+8Dj
		cmp	edi, 10h
		jl	loc_22B
		cmp	ebx, 10h
		jl	loc_22B
		lea	eax, [ebp+1]
		cmp	eax, 2
		ja	loc_22B
		test	ebp, ebp
		js	short loc_FB
		push	edi
		call	_BN_num_bits_word
		add	esp, 4
		jmp	short loc_FD
; ---------------------------------------------------------------------------

loc_FB:					; CODE XREF: _BN_mul+EEj
		xor	eax, eax

loc_FD:					; CODE XREF: _BN_mul+F9j
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_10B
		push	ebx
		call	_BN_num_bits_word
		add	esp, 4

loc_10B:				; CODE XREF: _BN_mul+100j
		push	[esp+20h+arg_C]
		lea	ecx, [eax-1]
		mov	eax, 1
		shl	eax, cl
		mov	[esp+24h+var_10], eax
		add	eax, eax
		mov	[esp+24h+var_C], eax
		call	_BN_CTX_get
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_29B
		mov	eax, [esp+20h+var_10]
		cmp	edi, eax
		jg	short loc_1B7
		cmp	ebx, eax
		jg	short loc_1B7
		mov	eax, [esp+20h+var_C]
		add	eax, eax
		mov	[esp+20h+var_C], eax
		cmp	eax, [ebp+8]
		jg	short loc_154
		mov	ecx, ebp
		jmp	short loc_164
; ---------------------------------------------------------------------------

loc_154:				; CODE XREF: _BN_mul+14Ej
		push	eax
		push	ebp
		call	_bn_expand2
		mov	ecx, eax
		add	esp, 8
		mov	eax, [esp+20h+var_C]

loc_164:				; CODE XREF: _BN_mul+152j
		test	ecx, ecx
		jz	loc_29B
		cmp	eax, [esi+8]
		jg	short loc_175
		mov	eax, esi
		jmp	short loc_17F
; ---------------------------------------------------------------------------

loc_175:				; CODE XREF: _BN_mul+16Fj
		push	eax
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_17F:				; CODE XREF: _BN_mul+173j
		test	eax, eax
		jz	loc_29B
		push	dword ptr [ebp+0]
		mov	eax, [esp+24h+var_10]
		sub	ebx, eax
		push	ebx
		sub	edi, eax
		push	edi
		push	eax
		mov	eax, [esp+30h+arg_8]
		push	dword ptr [eax]
		mov	eax, [esp+34h+arg_4]
		push	dword ptr [eax]
		push	dword ptr [esi]
		call	_bn_mul_recursive
		mov	eax, [esp+3Ch+var_8]
		add	esp, 1Ch
		mov	[esi+4], eax
		jmp	$end$53
; ---------------------------------------------------------------------------

loc_1B7:				; CODE XREF: _BN_mul+13Bj _BN_mul+13Fj
		mov	eax, [esp+20h+var_C]
		shl	eax, 2
		mov	[esp+20h+var_C], eax
		cmp	eax, [ebp+8]
		jg	short loc_1CB
		mov	ecx, ebp
		jmp	short loc_1DB
; ---------------------------------------------------------------------------

loc_1CB:				; CODE XREF: _BN_mul+1C5j
		push	eax
		push	ebp
		call	_bn_expand2
		mov	ecx, eax
		add	esp, 8
		mov	eax, [esp+20h+var_C]

loc_1DB:				; CODE XREF: _BN_mul+1C9j
		test	ecx, ecx
		jz	loc_29B
		cmp	eax, [esi+8]
		jg	short loc_1EC
		mov	eax, esi
		jmp	short loc_1F6
; ---------------------------------------------------------------------------

loc_1EC:				; CODE XREF: _BN_mul+1E6j
		push	eax
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_1F6:				; CODE XREF: _BN_mul+1EAj
		test	eax, eax
		jz	loc_29B
		push	dword ptr [ebp+0]
		mov	eax, [esp+24h+var_10]
		sub	ebx, eax
		push	ebx
		sub	edi, eax
		push	edi
		push	eax
		mov	eax, [esp+30h+arg_8]
		push	dword ptr [eax]
		mov	eax, [esp+34h+arg_4]
		push	dword ptr [eax]
		push	dword ptr [esi]
		call	_bn_mul_part_recursive
		mov	eax, [esp+3Ch+var_8]
		add	esp, 1Ch
		mov	[esi+4], eax
		jmp	short $end$53
; ---------------------------------------------------------------------------

loc_22B:				; CODE XREF: _BN_mul+D1j _BN_mul+DAj ...
		mov	ebp, [esp+20h+var_8]
		cmp	ebp, [esi+8]
		jg	short loc_238
		mov	eax, esi
		jmp	short loc_24A
; ---------------------------------------------------------------------------

loc_238:				; CODE XREF: _BN_mul+232j
		push	ebp
		push	esi
		call	_bn_expand2
		mov	ecx, [esp+28h+arg_8]
		add	esp, 8
		mov	edx, [esp+20h+arg_4]

loc_24A:				; CODE XREF: _BN_mul+236j
		test	eax, eax
		jz	short loc_29B
		push	ebx
		mov	[esi+4], ebp
		push	dword ptr [ecx]
		push	edi
		push	dword ptr [edx]
		push	dword ptr [esi]
		call	_bn_mul_normal
		add	esp, 14h

$end$53:				; CODE XREF: _BN_mul+C9j _BN_mul+1B2j	...
		mov	ecx, [esi+4]
		test	ecx, ecx
		jle	short loc_281
		mov	eax, [esi]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]

loc_270:				; CODE XREF: _BN_mul+27Cj
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_27E
		dec	ecx
		test	ecx, ecx
		jg	short loc_270

loc_27E:				; CODE XREF: _BN_mul+277j
		mov	[esi+4], ecx

loc_281:				; CODE XREF: _BN_mul+266j
		mov	eax, [esp+20h+arg_0]
		cmp	eax, esi
		jz	short loc_293
		push	esi
		push	eax
		call	_BN_copy
		add	esp, 8

loc_293:				; CODE XREF: _BN_mul+287j
		mov	[esp+20h+var_4], 1

loc_29B:				; CODE XREF: _BN_mul+AEj _BN_mul+12Fj	...
		pop	ebp

$err$52:				; CODE XREF: _BN_mul+6Cj
		push	[esp+1Ch+arg_C]
		call	_BN_CTX_end
		mov	eax, [esp+20h+var_4]
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_2B3:				; CODE XREF: _BN_mul+24j _BN_mul+2Cj
		push	0
		push	[esp+1Ch+arg_0]
		call	_BN_set_word
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
_BN_mul		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_add_part_words
_bn_add_part_words proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_C]
		push	edi
		push	ebx
		push	ebp
		push	esi
		call	_bn_add_words
		mov	ecx, [esp+20h+arg_10]
		add	esp, 10h
		mov	edx, eax
		test	ecx, ecx
		jz	loc_47F
		lea	eax, ds:0[edi*4]
		add	esi, eax
		add	ebp, eax
		add	ebx, eax
		test	ecx, ecx
		jns	loc_3D1
		test	edx, edx
		jz	short loc_377

loc_313:				; CODE XREF: _bn_add_part_words+A9j
		mov	eax, [ebx]
		add	eax, edx
		cmp	eax, edx
		mov	[esi], eax
		sbb	edx, edx
		neg	edx
		add	ecx, 1
		jns	loc_47D
		mov	eax, [ebx+4]
		add	eax, edx
		cmp	eax, edx
		mov	[esi+4], eax
		sbb	edx, edx
		neg	edx
		add	ecx, 1
		jns	loc_47D
		mov	eax, [ebx+8]
		add	eax, edx
		cmp	eax, edx
		mov	[esi+8], eax
		sbb	edx, edx
		neg	edx
		add	ecx, 1
		jns	loc_47D
		mov	eax, [ebx+0Ch]
		add	eax, edx
		cmp	eax, edx
		mov	[esi+0Ch], eax
		sbb	edx, edx
		neg	edx
		add	ecx, 1
		jns	loc_47D
		add	ebx, 10h
		add	esi, 10h
		test	edx, edx
		jnz	short loc_313

loc_377:				; CODE XREF: _bn_add_part_words+45j
		add	ecx, 1
		mov	eax, [ebx]
		mov	[esi], eax
		jns	loc_47D
		lea	ebp, [ebx+8]
		sub	ebx, esi
		lea	edi, [esi+8]

loc_38C:				; CODE XREF: _bn_add_part_words+FCj
		add	ecx, 1
		mov	eax, [ebp-4]
		mov	[edi-4], eax
		jns	loc_47D
		add	ecx, 1
		mov	eax, [ebp+0]
		mov	[edi], eax
		jns	loc_47D
		add	ecx, 1
		mov	eax, [ebp+4]
		mov	[edi+4], eax
		jns	loc_47D
		mov	eax, [ebx+edi+8]
		add	edi, 10h
		add	ebp, 10h
		add	ecx, 1
		mov	[edi-8], eax
		js	short loc_38C
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_3D1:				; CODE XREF: _bn_add_part_words+3Dj
		test	edx, edx
		jz	short loc_435
		nop	dword ptr [eax+00000000h]

loc_3DC:				; CODE XREF: _bn_add_part_words+167j
		mov	eax, [ebp+0]
		add	eax, edx
		cmp	eax, edx
		mov	[esi], eax
		sbb	edx, edx
		dec	ecx
		neg	edx
		test	ecx, ecx
		jle	loc_47D
		mov	eax, [ebp+4]
		add	eax, edx
		cmp	eax, edx
		mov	[esi+4], eax
		sbb	edx, edx
		dec	ecx
		neg	edx
		test	ecx, ecx
		jle	short loc_47D
		mov	eax, [ebp+8]
		add	eax, edx
		cmp	eax, edx
		mov	[esi+8], eax
		sbb	edx, edx
		dec	ecx
		neg	edx
		test	ecx, ecx
		jle	short loc_47D
		mov	eax, [ebp+0Ch]
		add	eax, edx
		cmp	eax, edx
		mov	[esi+0Ch], eax
		sbb	edx, edx
		dec	ecx
		neg	edx
		test	ecx, ecx
		jle	short loc_47D
		add	ebp, 10h
		add	esi, 10h
		test	edx, edx
		jnz	short loc_3DC

loc_435:				; CODE XREF: _bn_add_part_words+107j
		test	ecx, ecx
		jle	short loc_47D
		mov	eax, [ebp+0]
		dec	ecx
		mov	[esi], eax
		test	ecx, ecx
		jle	short loc_47D
		lea	ebx, [ebp+8]
		sub	ebp, esi
		lea	edi, [esi+8]
		nop

loc_44C:				; CODE XREF: _bn_add_part_words+1AFj
		mov	eax, [ebx-4]
		dec	ecx
		mov	[edi-4], eax
		test	ecx, ecx
		jle	short loc_47D
		mov	eax, [ebx]
		dec	ecx
		mov	[edi], eax
		test	ecx, ecx
		jle	short loc_47D
		mov	eax, [ebx+4]
		dec	ecx
		mov	[edi+4], eax
		test	ecx, ecx
		jle	short loc_47D
		mov	eax, [edi+ebp+8]
		add	edi, 10h
		dec	ecx
		add	ebx, 10h
		mov	[edi-8], eax
		test	ecx, ecx
		jg	short loc_44C

loc_47D:				; CODE XREF: _bn_add_part_words+56j
					; _bn_add_part_words+6Dj ...
		mov	eax, edx

loc_47F:				; CODE XREF: _bn_add_part_words+28j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_bn_add_part_words endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 484h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_mul_high
_bn_mul_high	proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		mov	eax, [esp+14h+arg_10]
		push	ebx
		push	ebp
		cdq
		sub	eax, edx
		mov	[esp+1Ch+var_C], 0
		mov	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		sar	ebp, 1
		push	esi
		push	edi
		push	ebp
		lea	ebx, ds:0[ebp*4]
		mov	[esp+28h+var_8], ebp
		lea	ecx, [ebx+eax]
		mov	[esp+28h+var_4], ebx
		push	ecx
		push	eax
		mov	[esp+30h+var_10], ecx
		call	_bn_cmp_words
		mov	esi, eax
		mov	eax, [esp+30h+arg_8]
		push	ebp
		push	eax
		lea	ecx, [ebx+eax]
		push	ecx
		mov	[esp+3Ch+var_14], ecx
		call	_bn_cmp_words
		mov	edi, [esp+3Ch+arg_0]
		lea	ecx, [esi+esi*2]
		add	eax, 4
		add	esp, 18h
		add	eax, ecx
		cmp	eax, 8		; switch 9 cases
		ja	$LN2		; jumptable 000004F4 default case
		jmp	ds:$LN75[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN19:					; CODE XREF: _bn_mul_high+70j
					; DATA XREF: .text$mn:$LN75o
		push	ebp		; jumptable 000004F4 case 0
		push	[esp+28h+arg_4]
		push	[esp+2Ch+var_10]
		push	edi
		call	_bn_sub_words
		push	ebp
		push	[esp+38h+var_14]
		push	[esp+3Ch+arg_8]
		jmp	short loc_572
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _bn_mul_high+70j
					; DATA XREF: .text$mn:$LN75o
		push	ebp		; jumptable 000004F4 case 2
		push	[esp+28h+arg_4]
		push	[esp+2Ch+var_10]
		push	edi
		call	_bn_sub_words
		push	ebp
		push	[esp+38h+arg_8]
		push	[esp+3Ch+var_14]

loc_52D:				; CODE XREF: _bn_mul_high+D4j
		lea	eax, [ebx+edi]
		push	eax
		call	_bn_sub_words
		mov	[esp+44h+var_C], 1
		jmp	short loc_57B
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _bn_mul_high+70j
					; DATA XREF: .text$mn:$LN75o
		push	ebp		; jumptable 000004F4 case 6
		push	[esp+28h+var_10]
		push	[esp+2Ch+arg_4]
		push	edi
		call	_bn_sub_words
		push	ebp
		push	[esp+38h+var_14]
		push	[esp+3Ch+arg_8]
		jmp	short loc_52D
; ---------------------------------------------------------------------------

$LN25:					; CODE XREF: _bn_mul_high+70j
					; DATA XREF: .text$mn:$LN75o
		push	ebp		; jumptable 000004F4 case 8
		push	[esp+28h+var_10]
		push	[esp+2Ch+arg_4]
		push	edi
		call	_bn_sub_words
		push	ebp
		push	[esp+38h+arg_8]
		push	[esp+3Ch+var_14]

loc_572:				; CODE XREF: _bn_mul_high+8Fj
		lea	eax, [ebx+edi]
		push	eax
		call	_bn_sub_words

loc_57B:				; CODE XREF: _bn_mul_high+BAj
		add	esp, 20h

$LN2:					; CODE XREF: _bn_mul_high+6Aj
					; _bn_mul_high+70j
					; DATA XREF: ...
		cmp	ebp, 8		; jumptable 000004F4 default case
		jnz	short loc_5AD
		mov	esi, [esp+24h+arg_14]
		lea	eax, [edi+20h]
		push	eax
		push	edi
		push	esi
		call	_bn_mul_comba8
		mov	eax, [esp+30h+arg_8]
		add	eax, 20h ; ' '
		push	eax
		mov	eax, [esp+34h+arg_4]
		add	eax, 20h ; ' '
		push	eax
		push	edi
		call	_bn_mul_comba8
		add	esp, 18h
		jmp	short loc_5E4
; ---------------------------------------------------------------------------

loc_5AD:				; CODE XREF: _bn_mul_high+FDj
		mov	ecx, [esp+24h+arg_14]
		mov	eax, [esp+24h+arg_10]
		lea	esi, [ecx+eax*4]
		push	esi
		push	0
		push	0
		push	ebp
		lea	eax, [ebx+edi]
		push	eax
		push	edi
		push	ecx
		call	_bn_mul_recursive
		push	esi
		push	0
		push	0
		push	ebp
		push	[esp+50h+var_14]
		push	[esp+54h+var_10]
		push	edi
		call	_bn_mul_recursive
		mov	esi, [esp+5Ch+arg_14]
		add	esp, 38h

loc_5E4:				; CODE XREF: _bn_mul_high+127j
		mov	ecx, [esp+24h+arg_C]
		mov	ebx, [esp+24h+arg_10]
		test	ecx, ecx
		jz	short loc_60C
		push	ebp
		push	ecx
		lea	eax, [ebx+ebp]
		lea	eax, [esi+eax*4]
		push	edi
		push	eax
		mov	[esp+34h+arg_8], eax
		call	_bn_add_words
		mov	eax, [esp+34h+arg_8]
		add	esp, 10h
		jmp	short loc_60E
; ---------------------------------------------------------------------------

loc_60C:				; CODE XREF: _bn_mul_high+16Aj
		mov	eax, edi

loc_60E:				; CODE XREF: _bn_mul_high+186j
		cmp	[esp+24h+var_C], 0
		lea	ebx, [esi+ebx*4]
		push	ebp
		push	esi
		push	eax
		push	ebx
		jz	short loc_623
		call	_bn_sub_words
		jmp	short loc_628
; ---------------------------------------------------------------------------

loc_623:				; CODE XREF: _bn_mul_high+196j
		call	_bn_add_words

loc_628:				; CODE XREF: _bn_mul_high+19Dj
		mov	eax, [esp+34h+arg_10]
		add	esp, 10h
		mov	edx, [esp+24h+arg_C]
		add	eax, ebp
		test	edx, edx
		jz	short loc_66F
		lea	ecx, [esi+eax*4]
		push	ebp
		push	ebx
		lea	eax, [edx+ebp*4]
		mov	[esp+2Ch+arg_8], ecx
		push	eax
		push	ecx
		call	_bn_sub_words
		push	ebp
		push	[esp+38h+arg_C]
		mov	eax, ebx
		push	[esp+3Ch+arg_8]
		mov	[esp+40h+arg_4], eax
		push	eax
		call	_bn_add_words
		mov	edx, [esp+44h+arg_4]
		add	esp, 20h
		mov	ebx, eax
		jmp	loc_73C
; ---------------------------------------------------------------------------

loc_66F:				; CODE XREF: _bn_mul_high+1B3j
		xor	ecx, ecx
		lea	edx, [esi+eax*4]
		mov	[esp+24h+arg_8], edx
		mov	[esp+24h+arg_4], ecx
		test	ebp, ebp
		jle	loc_73A
		cmp	ebp, 8
		jb	loc_716
		lea	eax, [ebp-1]
		mov	[esp+24h+arg_4], ecx
		lea	eax, [ebx+eax*4]
		cmp	edx, eax
		ja	short loc_6A5
		lea	eax, [ebp-1]
		lea	eax, [edx+eax*4]
		cmp	eax, ebx
		jnb	short loc_716

loc_6A5:				; CODE XREF: _bn_mul_high+215j
		mov	eax, ebp
		and	eax, 80000007h
		jns	short loc_6B3
		dec	eax
		or	eax, 0FFFFFFF8h
		inc	eax

loc_6B3:				; CODE XREF: _bn_mul_high+228j
		movaps	xmm1, __xmm@00000001000000010000000100000001
		mov	edi, ebp
		movups	xmm2, ds:__xmm@ffffffffffffffffffffffffffffffff
		sub	edi, eax
		lea	eax, [ebx+10h]
		mov	[esp+24h+arg_C], edi
		mov	edi, edx
		sub	edi, ebx
		mov	[esp+24h+arg_4], edi
		mov	edi, edx
		mov	esi, [esp+24h+arg_4]

loc_6DA:				; CODE XREF: _bn_mul_high+284j
		movups	xmm0, xmmword ptr [eax-10h]
		add	ecx, 8
		lea	edi, [edi+20h]
		lea	eax, [eax+20h]
		pandn	xmm0, xmm2
		paddd	xmm0, xmm1
		movups	xmmword	ptr [edi-20h], xmm0
		movups	xmm0, xmmword ptr [eax-20h]
		pandn	xmm0, xmm2
		paddd	xmm0, xmm1
		movups	xmmword	ptr [esi+eax-20h], xmm0
		cmp	ecx, [esp+24h+arg_C]
		jl	short loc_6DA
		mov	edi, [esp+24h+arg_0]
		mov	esi, [esp+24h+arg_14]
		mov	[esp+24h+arg_4], ecx

loc_716:				; CODE XREF: _bn_mul_high+203j
					; _bn_mul_high+21Fj
		cmp	ecx, ebp
		jge	short loc_73A
		lea	ecx, [edx+ecx*4]
		sub	ebx, edx
		mov	edx, ebp
		sub	edx, [esp+24h+arg_4]

loc_725:				; CODE XREF: _bn_mul_high+2B0j
		mov	eax, [ebx+ecx]
		lea	ecx, [ecx+4]
		not	eax
		inc	eax
		mov	[ecx-4], eax
		sub	edx, 1
		jnz	short loc_725
		mov	edx, [esp+24h+arg_8]

loc_73A:				; CODE XREF: _bn_mul_high+1FAj
					; _bn_mul_high+294j
		xor	ebx, ebx

loc_73C:				; CODE XREF: _bn_mul_high+1E6j
		mov	ecx, [esp+24h+arg_10]
		push	ebp
		push	edi
		push	edx
		lea	eax, [esi+ecx*4]
		push	eax
		call	_bn_add_words
		mov	ecx, [esp+34h+arg_10]
		add	esp, 10h
		add	ebx, eax
		cmp	[esp+24h+var_C], 0
		push	ebp
		push	esi
		lea	eax, [esi+ecx*4]
		push	eax
		push	eax
		jz	short loc_76F
		call	_bn_sub_words
		add	esp, 10h
		sub	ebx, eax
		jmp	short loc_779
; ---------------------------------------------------------------------------

loc_76F:				; CODE XREF: _bn_mul_high+2DDj
		call	_bn_add_words
		add	esp, 10h
		add	ebx, eax

loc_779:				; CODE XREF: _bn_mul_high+2E9j
		push	ebp
		push	[esp+28h+arg_8]
		push	edi
		push	edi
		call	_bn_add_words
		push	[esp+34h+var_8]
		lea	ebp, [edi+ebp*4]
		mov	esi, eax
		push	ebp
		push	edi
		push	edi
		call	_bn_add_words
		add	esp, 20h
		add	esi, eax
		mov	eax, [esp+24h+var_4]
		add	eax, [esp+24h+arg_14]
		cmp	[esp+24h+var_C], 0
		push	[esp+24h+var_8]
		push	eax
		push	edi
		push	edi
		jz	short loc_7BD
		call	_bn_sub_words
		add	esp, 10h
		sub	esi, eax
		jmp	short loc_7C7
; ---------------------------------------------------------------------------

loc_7BD:				; CODE XREF: _bn_mul_high+32Bj
		call	_bn_add_words
		add	esp, 10h
		add	esi, eax

loc_7C7:				; CODE XREF: _bn_mul_high+337j
		test	ebx, ebx
		jz	short loc_7FE
		jle	short loc_7E8
		nop	dword ptr [eax+00000000h]

loc_7D4:				; CODE XREF: _bn_mul_high+360j
		mov	eax, [edi]
		lea	edi, [edi+4]
		add	eax, ebx
		cmp	eax, ebx
		mov	[edi-4], eax
		sbb	ebx, ebx
		neg	ebx
		jnz	short loc_7D4
		jmp	short loc_7FE
; ---------------------------------------------------------------------------

loc_7E8:				; CODE XREF: _bn_mul_high+347j
		neg	ebx

loc_7EA:				; CODE XREF: _bn_mul_high+378j
		mov	ecx, [edi]
		lea	edi, [edi+4]
		mov	eax, ecx
		sub	eax, ebx
		cmp	ecx, ebx
		mov	[edi-4], eax
		sbb	ebx, ebx
		neg	ebx
		jnz	short loc_7EA

loc_7FE:				; CODE XREF: _bn_mul_high+345j
					; _bn_mul_high+362j
		test	esi, esi
		jz	short loc_839
		jle	short loc_81F

loc_804:				; CODE XREF: _bn_mul_high+391j
		mov	eax, [ebp+0]
		lea	ebp, [ebp+4]
		add	eax, esi
		cmp	eax, esi
		mov	[ebp-4], eax
		sbb	esi, esi
		neg	esi
		jnz	short loc_804
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_81F:				; CODE XREF: _bn_mul_high+37Ej
		neg	esi
		nop	dword ptr [eax]

loc_824:				; CODE XREF: _bn_mul_high+3B3j
		mov	ecx, [ebp+0]
		lea	ebp, [ebp+4]
		mov	eax, ecx
		sub	eax, esi
		cmp	ecx, esi
		mov	[ebp-4], eax
		sbb	esi, esi
		neg	esi
		jnz	short loc_824

loc_839:				; CODE XREF: _bn_mul_high+37Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
_bn_mul_high	endp

; ---------------------------------------------------------------------------
		align 4
$LN75		dd offset $LN19		; DATA XREF: _bn_mul_high+70r
		dd offset $LN2		; jump table for switch	statement
		dd offset $LN21
		dd offset $LN2
		dd offset $LN2
		dd offset $LN2
		dd offset $LN23
		dd offset $LN2
		dd offset $LN25
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 868h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_mul_low_normal
_bn_mul_low_normal proc	near		; CODE XREF: _bn_mul_low_recursive+8Ep
					; _bn_mul_low_recursive+A7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		push	dword ptr [edi]
		push	esi
		push	ebp
		push	ebx
		call	_bn_mul_words
		dec	esi
		add	esp, 10h
		test	esi, esi
		jle	short loc_8F2
		add	edi, 8
		add	ebx, 8
		nop	dword ptr [eax+00h]

loc_898:				; CODE XREF: _bn_mul_low_normal+88j
		push	dword ptr [edi-4]
		lea	eax, [ebx-4]
		push	esi
		push	ebp
		push	eax
		call	_bn_mul_add_words
		dec	esi
		add	esp, 10h
		test	esi, esi
		jle	short loc_8F2
		push	dword ptr [edi]
		push	esi
		push	ebp
		push	ebx
		call	_bn_mul_add_words
		dec	esi
		add	esp, 10h
		test	esi, esi
		jle	short loc_8F2
		push	dword ptr [edi+4]
		lea	eax, [ebx+4]
		push	esi
		push	ebp
		push	eax
		call	_bn_mul_add_words
		dec	esi
		add	esp, 10h
		test	esi, esi
		jle	short loc_8F2
		push	dword ptr [edi+8]
		lea	eax, [ebx+8]
		push	esi
		push	ebp
		push	eax
		call	_bn_mul_add_words
		dec	esi
		add	esp, 10h
		add	edi, 10h
		add	ebx, 10h
		test	esi, esi
		jg	short loc_898

loc_8F2:				; CODE XREF: _bn_mul_low_normal+24j
					; _bn_mul_low_normal+44j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_bn_mul_low_normal endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_mul_low_recursive
_bn_mul_low_recursive proc near		; CODE XREF: _bn_mul_low_recursive+4Dp
					; _bn_mul_low_recursive+71p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_C]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_10]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		push	edi
		mov	edi, [esp+10h+arg_4]
		push	ebp
		cdq
		push	0
		sub	eax, edx
		mov	ebx, eax
		push	0
		sar	ebx, 1
		push	ebx
		push	esi
		push	edi
		push	[esp+28h+arg_0]
		call	_bn_mul_recursive
		add	esp, 1Ch
		cmp	ebx, 20h ; ' '
		jl	short loc_97F
		mov	eax, [esp+10h+arg_C]
		lea	esi, ds:0[eax*4]
		mov	eax, [esp+10h+arg_8]
		add	esi, ebp
		push	esi
		push	ebx
		lea	eax, [eax+ebx*4]
		push	eax
		push	edi
		push	ebp
		call	_bn_mul_low_recursive
		mov	eax, [esp+24h+arg_0]
		push	ebx
		push	ebp
		lea	edi, [eax+ebx*4]
		push	edi
		push	edi
		call	_bn_add_words
		mov	eax, [esp+34h+arg_4]
		push	esi
		push	ebx
		push	[esp+3Ch+arg_8]
		lea	eax, [eax+ebx*4]
		push	eax
		push	ebp
		call	_bn_mul_low_recursive
		push	ebx
		push	ebp
		push	edi
		push	edi
		call	_bn_add_words
		add	esp, 48h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_97F:				; CODE XREF: _bn_mul_low_recursive+32j
		push	ebx
		lea	eax, [esi+ebx*4]
		push	eax
		push	edi
		push	ebp
		call	_bn_mul_low_normal
		mov	eax, [esp+20h+arg_4]
		lea	edi, ds:0[ebx*4]
		push	ebx
		push	esi
		add	edi, ebp
		lea	eax, [eax+ebx*4]
		push	eax
		push	edi
		call	_bn_mul_low_normal
		mov	eax, [esp+30h+arg_0]
		push	ebx
		push	ebp
		lea	esi, [eax+ebx*4]
		push	esi
		push	esi
		call	_bn_add_words
		push	ebx
		push	edi
		push	esi
		push	esi
		call	_bn_add_words
		add	esp, 40h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_bn_mul_low_recursive endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_mul_normal
_bn_mul_normal	proc near		; CODE XREF: _BN_mul+259p
					; _bn_mul_part_recursive+2Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_10]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	edi, esi
		jge	short loc_9E8
		mov	ebp, [esp+10h+arg_4]
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax
		mov	eax, [esp+10h+arg_C]
		jmp	short loc_9F0
; ---------------------------------------------------------------------------

loc_9E8:				; CODE XREF: _bn_mul_normal+Ej
		mov	ebp, [esp+10h+arg_C]
		mov	eax, [esp+10h+arg_4]

loc_9F0:				; CODE XREF: _bn_mul_normal+1Ej
		mov	ecx, [esp+10h+arg_0]
		mov	[esp+10h+arg_8], eax
		lea	ebx, [ecx+edi*4]
		test	esi, esi
		jg	short loc_A11
		push	0
		push	edi
		push	eax
		push	ecx
		call	_bn_mul_words
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A11:				; CODE XREF: _bn_mul_normal+35j
		push	dword ptr [ebp+0]
		push	edi
		push	eax
		push	ecx
		call	_bn_mul_words
		dec	esi
		mov	[ebx], eax
		add	esp, 10h
		test	esi, esi
		jle	loc_AC7
		mov	eax, [esp+10h+arg_0]
		add	ebx, 8
		add	ebp, 8
		add	eax, 8
		mov	[esp+10h+arg_0], eax

loc_A3B:				; CODE XREF: _bn_mul_normal+F9j
		push	dword ptr [ebp-4]
		add	eax, 0FFFFFFFCh
		push	edi
		push	[esp+18h+arg_8]
		push	eax
		call	_bn_mul_add_words
		dec	esi
		mov	[ebx-4], eax
		add	esp, 10h
		test	esi, esi
		jle	short loc_AC7
		push	dword ptr [ebp+0]
		push	edi
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_0]
		call	_bn_mul_add_words
		dec	esi
		mov	[ebx], eax
		add	esp, 10h
		test	esi, esi
		jle	short loc_AC7
		push	dword ptr [ebp+4]
		mov	eax, [esp+14h+arg_0]
		push	edi
		push	[esp+18h+arg_8]
		add	eax, 4
		push	eax
		call	_bn_mul_add_words
		dec	esi
		mov	[ebx+4], eax
		add	esp, 10h
		test	esi, esi
		jle	short loc_AC7
		push	dword ptr [ebp+8]
		mov	eax, [esp+14h+arg_0]
		push	edi
		push	[esp+18h+arg_8]
		add	eax, 8
		push	eax
		call	_bn_mul_add_words
		mov	[ebx+8], eax
		dec	esi
		mov	eax, [esp+20h+arg_0]
		add	esp, 10h
		add	eax, 10h
		add	ebx, 10h
		add	ebp, 10h
		mov	[esp+10h+arg_0], eax
		test	esi, esi
		jg	loc_A3B

loc_AC7:				; CODE XREF: _bn_mul_normal+5Cj
					; _bn_mul_normal+8Dj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_bn_mul_normal	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_mul_part_recursive
_bn_mul_part_recursive proc near	; CODE XREF: _BN_mul+21Ap
					; _bn_mul_part_recursive+29Fp ...

var_18		= dword	ptr -18h
Size		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 18h
		call	__chkstk
		push	ebp
		mov	ebp, [esp+1Ch+arg_C]
		cmp	ebp, 8
		jge	short loc_B07
		mov	eax, [esp+1Ch+arg_14]
		add	eax, ebp
		push	eax
		push	[esp+20h+arg_8]
		mov	eax, [esp+24h+arg_10]
		add	eax, ebp
		push	eax
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	_bn_mul_normal
		add	esp, 14h
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_B07:				; CODE XREF: _bn_mul_part_recursive+12j
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, ebp
		push	ebx
		mov	ebx, [esp+20h+arg_10]
		sub	edx, ebx
		push	esi
		push	edi
		push	edx
		lea	ecx, [eax+ebp*4]
		mov	[esp+2Ch+var_C], edx
		push	ebx
		push	ecx
		push	eax
		mov	[esp+38h+var_18], ecx
		call	_bn_cmp_part_words
		mov	edi, [esp+38h+arg_14]
		mov	esi, eax
		mov	eax, [esp+38h+arg_8]
		mov	edx, edi
		sub	edx, ebp
		mov	[esp+38h+var_8], 0
		push	edx
		push	edi
		lea	ecx, [eax+ebp*4]
		mov	[esp+40h+var_10], edx
		push	eax
		push	ecx
		mov	[esp+48h+arg_C], ecx
		call	_bn_cmp_part_words
		lea	ecx, [esi+esi*2]
		add	eax, 4
		mov	esi, [esp+48h+arg_18]
		add	eax, ecx
		add	esp, 20h
		cmp	eax, 8		; switch 9 cases
		ja	loc_C1A		; jumptable 00000B6C default case
		jmp	ds:$LN55[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN11_0:				; CODE XREF: _bn_mul_part_recursive+A0j
					; DATA XREF: .text$mn:$LN55o
		mov	eax, ebx	; jumptable 00000B6C case 0
		sub	eax, ebp
		push	eax
		push	ebx
		push	[esp+30h+arg_4]
		push	[esp+34h+var_18]
		push	esi
		call	_bn_sub_part_words
		mov	eax, ebp
		sub	eax, edi
		push	eax
		push	edi
		push	[esp+44h+arg_C]
		push	[esp+48h+arg_8]
		jmp	short loc_C0E
; ---------------------------------------------------------------------------

$LN12_0:				; CODE XREF: _bn_mul_part_recursive+A0j
					; DATA XREF: .text$mn:$LN55o
		mov	eax, ebx	; jumptable 00000B6C cases 1,2
		sub	eax, ebp
		push	eax
		push	ebx
		push	[esp+30h+arg_4]
		push	[esp+34h+var_18]
		push	esi
		call	_bn_sub_part_words
		push	[esp+3Ch+var_10]
		push	edi
		push	[esp+44h+arg_8]
		push	[esp+48h+arg_C]

loc_BB8:				; CODE XREF: _bn_mul_part_recursive+120j
		lea	eax, [esi+ebp*4]
		push	eax
		call	_bn_sub_part_words
		mov	[esp+50h+var_8], 1
		jmp	short loc_C17
; ---------------------------------------------------------------------------

$LN13:					; CODE XREF: _bn_mul_part_recursive+A0j
					; DATA XREF: .text$mn:$LN55o
		push	[esp+28h+var_C]	; jumptable 00000B6C cases 3-6
		push	ebx
		push	[esp+30h+var_18]
		push	[esp+34h+arg_4]
		push	esi
		call	_bn_sub_part_words
		mov	eax, ebp
		sub	eax, edi
		push	eax
		push	edi
		push	[esp+44h+arg_C]
		push	[esp+48h+arg_8]
		jmp	short loc_BB8
; ---------------------------------------------------------------------------

$LN14_0:				; CODE XREF: _bn_mul_part_recursive+A0j
					; DATA XREF: .text$mn:$LN55o
		push	[esp+28h+var_C]	; jumptable 00000B6C cases 7,8
		push	ebx
		push	[esp+30h+var_18]
		push	[esp+34h+arg_4]
		push	esi
		call	_bn_sub_part_words
		push	[esp+3Ch+var_10]
		push	edi
		push	[esp+44h+arg_8]
		push	[esp+48h+arg_C]

loc_C0E:				; CODE XREF: _bn_mul_part_recursive+C9j
		lea	eax, [esi+ebp*4]
		push	eax
		call	_bn_sub_part_words

loc_C17:				; CODE XREF: _bn_mul_part_recursive+FDj
		add	esp, 28h

loc_C1A:				; CODE XREF: _bn_mul_part_recursive+9Aj
		lea	eax, ds:0[ebp*2] ; jumptable 00000B6C default case
		cmp	ebp, 8
		jnz	short loc_CA4
		lea	ecx, [esi+eax*4]
		lea	eax, [esi+20h]
		mov	[esp+28h+var_C], ecx
		push	eax
		push	esi
		push	ecx
		call	_bn_mul_comba8
		push	[esp+34h+arg_8]
		push	[esp+38h+arg_4]
		push	[esp+3Ch+arg_0]
		call	_bn_mul_comba8
		mov	ecx, [esp+40h+arg_0]
		lea	eax, ds:0[ebp*2]
		push	edi
		lea	ecx, [ecx+eax*4]
		mov	eax, [esp+44h+arg_8]
		add	eax, 20h ; ' '
		mov	[esp+44h+Size],	ecx
		push	eax
		mov	eax, [esp+48h+arg_4]
		push	ebx
		add	eax, 20h ; ' '
		push	eax
		push	ecx
		call	_bn_mul_normal
		lea	ecx, ds:0[ebp*2]
		mov	eax, ecx
		sub	eax, ebx
		sub	eax, edi
		shl	eax, 2
		push	eax		; Size
		lea	eax, [ecx+ebx]
		mov	ecx, [esp+58h+arg_0]
		add	eax, edi
		push	0		; Val
		lea	eax, [ecx+eax*4]
		push	eax		; Dst
		call	_memset
		mov	edi, [esp+60h+Size]
		add	esp, 38h
		jmp	loc_E19
; ---------------------------------------------------------------------------

loc_CA4:				; CODE XREF: _bn_mul_part_recursive+158j
		lea	edx, [esi+eax*8]
		shl	eax, 2
		push	edx
		push	0
		push	0
		lea	ecx, [eax+esi]
		mov	[esp+34h+Size],	eax
		push	ebp
		lea	eax, [esi+ebp*4]
		mov	[esp+38h+var_10], edx
		push	eax
		push	esi
		push	ecx
		mov	[esp+44h+var_C], ecx
		call	_bn_mul_recursive
		push	[esp+44h+var_10]
		push	0
		push	0
		push	ebp
		push	[esp+54h+arg_8]
		push	[esp+58h+arg_4]
		push	[esp+5Ch+arg_0]
		call	_bn_mul_recursive
		mov	eax, ebp
		mov	ecx, edi
		cdq
		add	esp, 38h
		sub	eax, edx
		mov	edx, eax
		mov	eax, ebx
		sar	edx, 1
		sub	eax, edx
		mov	[esp+28h+var_4], edx
		sub	ecx, edx
		cmp	ebx, edi
		cmovg	ecx, eax
		test	ecx, ecx
		jnz	short loc_D45
		push	[esp+28h+var_10]
		mov	eax, [esp+2Ch+arg_0]
		sub	edi, edx
		add	eax, [esp+2Ch+Size]
		sub	ebx, edx
		push	edi
		push	ebx
		push	edx
		push	[esp+38h+arg_C]
		mov	[esp+3Ch+Size],	eax
		push	[esp+3Ch+var_18]
		push	eax
		call	_bn_mul_recursive
		mov	eax, [esp+44h+var_4]
		lea	edx, ds:0[ebp*2]
		lea	ecx, [eax+eax]
		mov	eax, edx
		sub	eax, ecx
		shl	eax, 2
		push	eax
		lea	eax, [ecx+edx]
		jmp	short loc_D86
; ---------------------------------------------------------------------------

loc_D45:				; CODE XREF: _bn_mul_part_recursive+237j
		mov	ecx, [esp+28h+Size]
		jle	short loc_D9E
		push	[esp+28h+var_10]
		add	ecx, [esp+2Ch+arg_0]
		mov	eax, edi
		sub	eax, edx
		mov	[esp+2Ch+Size],	ecx
		push	eax
		mov	eax, ebx
		sub	eax, edx
		push	eax
		push	edx
		push	[esp+38h+arg_C]
		push	[esp+3Ch+var_18]
		push	ecx
		call	_bn_mul_part_recursive
		lea	ecx, ds:0[ebp*2]
		mov	eax, ecx
		sub	eax, ebx
		sub	eax, edi
		shl	eax, 2
		push	eax		; Size
		lea	eax, [ecx+ebx]
		add	eax, edi

loc_D86:				; CODE XREF: _bn_mul_part_recursive+277j
		mov	ecx, [esp+48h+arg_0]
		push	0		; Val
		lea	eax, [ecx+eax*4]
		push	eax		; Dst
		call	_memset
		mov	edi, [esp+50h+Size]
		add	esp, 28h
		jmp	short loc_E19
; ---------------------------------------------------------------------------

loc_D9E:				; CODE XREF: _bn_mul_part_recursive+27Dj
		mov	eax, [esp+28h+arg_0]
		push	ecx		; Size
		add	eax, ecx
		push	0		; Val
		push	eax		; Dst
		mov	[esp+34h+Size],	eax
		call	_memset
		add	esp, 0Ch
		cmp	ebx, 10h
		jge	short loc_DD7
		cmp	edi, 10h
		jge	short loc_DD7
		push	edi
		push	[esp+2Ch+arg_C]
		mov	edi, [esp+30h+Size]
		push	ebx
		push	[esp+34h+var_18]
		push	edi
		call	_bn_mul_normal
		add	esp, 14h
		jmp	short loc_E19
; ---------------------------------------------------------------------------

loc_DD7:				; CODE XREF: _bn_mul_part_recursive+2EBj
					; _bn_mul_part_recursive+2F0j
		mov	eax, [esp+28h+var_4]
		cdq
		sub	eax, edx
		sar	eax, 1
		cmp	eax, ebx
		jl	short loc_DF9

loc_DE4:				; CODE XREF: _bn_mul_part_recursive+32Bj
		cmp	eax, edi
		jl	short loc_DF9
		cmp	eax, ebx
		jz	short loc_E4C
		cmp	eax, edi
		jz	short loc_E4C
		cdq
		sub	eax, edx
		sar	eax, 1
		cmp	eax, ebx
		jge	short loc_DE4

loc_DF9:				; CODE XREF: _bn_mul_part_recursive+316j
					; _bn_mul_part_recursive+31Aj
		push	[esp+28h+var_10]
		sub	edi, eax
		sub	ebx, eax
		push	edi
		mov	edi, [esp+30h+Size]
		push	ebx
		push	eax
		push	[esp+38h+arg_C]
		push	[esp+3Ch+var_18]
		push	edi
		call	_bn_mul_part_recursive

loc_E16:				; CODE XREF: _bn_mul_part_recursive+39Dj
		add	esp, 1Ch

loc_E19:				; CODE XREF: _bn_mul_part_recursive+1D3j
					; _bn_mul_part_recursive+2D0j ...
		lea	ebx, ds:0[ebp*2]
		push	ebx
		push	edi
		push	[esp+30h+arg_0]
		push	esi
		call	_bn_add_words
		add	esp, 10h
		mov	edi, eax
		cmp	[esp+28h+var_8], 0
		mov	eax, [esp+28h+var_C]
		push	ebx
		jz	short loc_E6B
		push	eax
		push	esi
		push	eax
		call	_bn_sub_words
		add	esp, 10h
		sub	edi, eax
		jmp	short loc_E78
; ---------------------------------------------------------------------------

loc_E4C:				; CODE XREF: _bn_mul_part_recursive+31Ej
					; _bn_mul_part_recursive+322j
		push	[esp+28h+var_10]
		sub	edi, eax
		sub	ebx, eax
		push	edi
		mov	edi, [esp+30h+Size]
		push	ebx
		push	eax
		push	[esp+38h+arg_C]
		push	[esp+3Ch+var_18]
		push	edi
		call	_bn_mul_recursive
		jmp	short loc_E16
; ---------------------------------------------------------------------------

loc_E6B:				; CODE XREF: _bn_mul_part_recursive+36Fj
		push	esi
		push	eax
		push	eax
		call	_bn_add_words
		add	esp, 10h
		add	edi, eax

loc_E78:				; CODE XREF: _bn_mul_part_recursive+37Ej
		mov	esi, [esp+28h+arg_0]
		push	ebx
		push	[esp+2Ch+var_C]
		lea	eax, [esi+ebp*4]
		push	eax
		push	eax
		call	_bn_add_words
		add	esp, 10h
		add	edi, eax
		jz	short loc_EAB
		lea	eax, [ebx+ebp]
		lea	ecx, [esi+eax*4]
		mov	eax, [ecx]
		add	eax, edi
		mov	[ecx], eax
		cmp	eax, edi
		jnb	short loc_EAB

loc_EA2:				; CODE XREF: _bn_mul_part_recursive+3DDj
		add	dword ptr [ecx+4], 1
		lea	ecx, [ecx+4]
		jz	short loc_EA2

loc_EAB:				; CODE XREF: _bn_mul_part_recursive+3C4j
					; _bn_mul_part_recursive+3D4j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 18h
		retn
_bn_mul_part_recursive endp

; ---------------------------------------------------------------------------
		align 4
$LN55		dd offset $LN11_0	; DATA XREF: _bn_mul_part_recursive+A0r
		dd offset $LN12_0	; jump table for switch	statement
		dd offset $LN12_0
		dd offset $LN13
		dd offset $LN13
		dd offset $LN13
		dd offset $LN13
		dd offset $LN14_0
		dd offset $LN14_0
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ED8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_mul_recursive
_bn_mul_recursive proc near		; CODE XREF: _BN_mul+1A3p
					; _bn_mul_high+140p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 1Ch
		call	__chkstk
		push	ebx
		mov	ebx, [esp+20h+arg_C]
		mov	eax, ebx
		cdq
		push	ebp
		sub	eax, edx
		mov	ebp, eax
		sar	ebp, 1
		mov	[esp+24h+var_8], ebp
		push	esi
		mov	esi, [esp+28h+arg_14]
		push	edi
		mov	edi, [esp+2Ch+arg_10]
		lea	eax, [esi+ebp]
		mov	[esp+2Ch+arg_C], eax
		lea	ecx, [edi+ebp]
		cmp	ebx, 8
		jnz	short loc_F32
		test	edi, edi
		jnz	short loc_F37
		test	esi, esi
		jnz	short loc_F37
		push	[esp+2Ch+arg_8]
		push	[esp+30h+arg_4]
		push	[esp+34h+arg_0]
		call	_bn_mul_comba8
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_F32:				; CODE XREF: _bn_mul_recursive+34j
		cmp	ebx, 10h
		jge	short loc_F84

loc_F37:				; CODE XREF: _bn_mul_recursive+38j
					; _bn_mul_recursive+3Cj
		mov	ebp, [esp+2Ch+arg_0]
		lea	eax, [ebx+esi]
		push	eax
		push	[esp+30h+arg_8]
		lea	eax, [ebx+edi]
		push	eax
		push	[esp+38h+arg_4]
		push	ebp
		call	_bn_mul_normal
		lea	eax, [edi+esi]
		add	esp, 14h
		test	eax, eax
		jns	loc_12A1
		imul	eax, -4
		push	eax		; Size
		lea	eax, [edi+ebx*2]
		add	eax, esi
		push	0		; Val
		lea	eax, ds:0[eax*4]
		add	eax, ebp
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_F84:				; CODE XREF: _bn_mul_recursive+5Dj
		mov	eax, [esp+2Ch+arg_4]
		lea	edx, ds:0[ebp*4]
		mov	esi, ebp
		mov	[esp+2Ch+var_4], edx
		sub	esi, ecx
		add	edx, eax
		push	esi
		push	ecx
		push	edx
		push	eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_18], edx
		call	_bn_cmp_part_words
		mov	ecx, [esp+3Ch+arg_C]
		mov	esi, eax
		mov	eax, ecx
		mov	[esp+3Ch+var_10], 0
		sub	eax, ebp
		mov	[esp+3Ch+var_14], eax
		mov	eax, [esp+3Ch+arg_8]
		push	[esp+3Ch+var_14]
		push	ecx
		lea	edx, [eax+ebp*4]
		push	eax
		push	edx
		mov	[esp+4Ch+var_1C], edx
		call	_bn_cmp_part_words
		lea	ecx, [esi+esi*2]
		add	eax, 4
		mov	esi, [esp+4Ch+arg_18]
		add	eax, ecx
		add	esp, 20h
		cmp	eax, 8		; switch 9 cases
		ja	loc_10C4	; jumptable 00000FEF default case
		jmp	ds:$LN43[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _bn_mul_recursive+117j
					; DATA XREF: .text$mn:$LN43o
		lea	ecx, [edi+ebp]	; jumptable 00000FEF case 0
		mov	eax, ecx
		sub	eax, ebp
		push	eax
		push	ecx
		push	[esp+34h+arg_4]
		push	[esp+38h+var_18]
		push	esi
		call	_bn_sub_part_words
		mov	ecx, [esp+40h+arg_C]
		mov	eax, ebp
		sub	eax, ecx
		push	eax
		push	ecx
		push	[esp+48h+var_1C]
		push	[esp+4Ch+arg_8]
		jmp	loc_10B8
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _bn_mul_recursive+117j
					; DATA XREF: .text$mn:$LN43o
		mov	eax, 1		; jumptable 00000FEF cases 1,3-5,7
		jmp	loc_10C6
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _bn_mul_recursive+117j
					; DATA XREF: .text$mn:$LN43o
		lea	ecx, [edi+ebp]	; jumptable 00000FEF case 2
		mov	eax, ecx
		sub	eax, ebp
		push	eax
		push	ecx
		push	[esp+34h+arg_4]
		push	[esp+38h+var_18]
		push	esi
		call	_bn_sub_part_words
		push	[esp+40h+var_14]
		push	[esp+44h+arg_C]
		push	[esp+48h+arg_8]
		push	[esp+4Ch+var_1C]

loc_1055:				; CODE XREF: _bn_mul_recursive+1B8j
		lea	eax, [esi+ebp*4]
		push	eax
		call	_bn_sub_part_words
		mov	[esp+54h+var_10], 1
		jmp	short loc_10C1
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _bn_mul_recursive+117j
					; DATA XREF: .text$mn:$LN43o
		push	[esp+2Ch+var_C]	; jumptable 00000FEF case 6
		lea	ecx, [edi+ebp]
		push	ecx
		push	[esp+34h+var_18]
		push	[esp+38h+arg_4]
		push	esi
		call	_bn_sub_part_words
		mov	ecx, [esp+40h+arg_C]
		mov	eax, ebp
		sub	eax, ecx
		push	eax
		push	ecx
		push	[esp+48h+var_1C]
		push	[esp+4Ch+arg_8]
		jmp	short loc_1055
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _bn_mul_recursive+117j
					; DATA XREF: .text$mn:$LN43o
		push	[esp+2Ch+var_C]	; jumptable 00000FEF case 8
		lea	ecx, [edi+ebp]
		push	ecx
		push	[esp+34h+var_18]
		push	[esp+38h+arg_4]
		push	esi
		call	_bn_sub_part_words
		push	[esp+40h+var_14]
		push	[esp+44h+arg_C]
		push	[esp+48h+arg_8]
		push	[esp+4Ch+var_1C]

loc_10B8:				; CODE XREF: _bn_mul_recursive+147j
		lea	eax, [esi+ebp*4]
		push	eax
		call	_bn_sub_part_words

loc_10C1:				; CODE XREF: _bn_mul_recursive+18Ej
		add	esp, 28h

loc_10C4:				; CODE XREF: _bn_mul_recursive+111j
		xor	eax, eax	; jumptable 00000FEF default case

loc_10C6:				; CODE XREF: _bn_mul_recursive+151j
		cmp	ebp, 4
		jnz	short loc_113B
		test	edi, edi
		jnz	loc_11A5
		cmp	[esp+2Ch+arg_14], edi
		jnz	loc_11A5
		lea	edi, [esi+ebx*4]
		test	eax, eax
		jnz	short loc_10F4
		lea	eax, [esi+10h]
		push	eax
		push	esi
		push	edi
		call	_bn_mul_comba4
		add	esp, 0Ch
		jmp	short loc_10FE
; ---------------------------------------------------------------------------

loc_10F4:				; CODE XREF: _bn_mul_recursive+20Aj
		xorps	xmm0, xmm0
		movups	xmmword	ptr [edi], xmm0
		movups	xmmword	ptr [edi+10h], xmm0

loc_10FE:				; CODE XREF: _bn_mul_recursive+21Aj
		push	[esp+2Ch+arg_8]
		mov	ebp, [esp+30h+arg_0]
		push	[esp+30h+arg_4]
		push	ebp
		call	_bn_mul_comba4
		mov	eax, [esp+38h+arg_8]
		lea	ecx, ds:0[ebx*4]
		add	eax, 10h
		add	ecx, ebp
		push	eax
		mov	eax, [esp+3Ch+arg_4]
		add	eax, 10h
		mov	[esp+3Ch+arg_C], ecx
		push	eax
		push	ecx
		call	_bn_mul_comba4
		add	esp, 18h
		jmp	loc_1222
; ---------------------------------------------------------------------------

loc_113B:				; CODE XREF: _bn_mul_recursive+1F1j
		cmp	ebp, 8
		jnz	short loc_11A5
		test	edi, edi
		jnz	short loc_11A5
		cmp	[esp+2Ch+arg_14], edi
		jnz	short loc_11A5
		lea	edi, [esi+ebx*4]
		test	eax, eax
		jnz	short loc_115E
		lea	eax, [esi+20h]
		push	eax
		push	esi
		push	edi
		call	_bn_mul_comba8
		jmp	short loc_1168
; ---------------------------------------------------------------------------

loc_115E:				; CODE XREF: _bn_mul_recursive+277j
		push	40h ; '@'       ; Size
		push	0		; Val
		push	edi		; Dst
		call	_memset

loc_1168:				; CODE XREF: _bn_mul_recursive+284j
		mov	ebp, [esp+38h+arg_0]
		add	esp, 0Ch
		push	[esp+2Ch+arg_8]
		push	[esp+30h+arg_4]
		push	ebp
		call	_bn_mul_comba8
		mov	eax, [esp+38h+arg_8]
		lea	ecx, ds:0[ebx*4]
		add	eax, 20h ; ' '
		add	ecx, ebp
		push	eax
		mov	eax, [esp+3Ch+arg_4]
		add	eax, 20h ; ' '
		mov	[esp+3Ch+arg_C], ecx
		push	eax
		push	ecx
		call	_bn_mul_comba8
		add	esp, 18h
		jmp	short loc_1222
; ---------------------------------------------------------------------------

loc_11A5:				; CODE XREF: _bn_mul_recursive+1F5j
					; _bn_mul_recursive+1FFj ...
		lea	ecx, [esi+ebx*8]
		test	eax, eax
		jnz	short loc_11C3
		push	ecx
		push	eax
		push	eax
		push	ebp
		lea	eax, [esi+ebp*4]
		push	eax
		lea	edi, [esi+ebx*4]
		push	esi
		push	edi
		call	_bn_mul_recursive
		add	esp, 1Ch
		jmp	short loc_11D9
; ---------------------------------------------------------------------------

loc_11C3:				; CODE XREF: _bn_mul_recursive+2D2j
		lea	eax, ds:0[ebx*4]
		push	eax		; Size
		lea	edi, [eax+esi]
		push	0		; Val
		push	edi		; Dst
		call	_memset
		add	esp, 0Ch

loc_11D9:				; CODE XREF: _bn_mul_recursive+2E9j
		lea	eax, [esi+ebx*8]
		push	eax
		push	0
		push	0
		push	ebp
		push	[esp+3Ch+arg_8]
		mov	ebp, [esp+40h+arg_0]
		push	[esp+40h+arg_4]
		push	ebp
		call	_bn_mul_recursive
		lea	ecx, [esi+ebx*8]
		push	ecx
		push	[esp+4Ch+arg_14]
		lea	eax, ds:0[ebx*4]
		push	[esp+50h+arg_10]
		add	eax, ebp
		push	[esp+54h+var_8]
		mov	[esp+58h+arg_C], eax
		push	[esp+58h+var_1C]
		push	[esp+5Ch+var_18]
		push	eax
		call	_bn_mul_recursive
		add	esp, 38h

loc_1222:				; CODE XREF: _bn_mul_recursive+25Ej
					; _bn_mul_recursive+2CBj
		push	ebx
		push	[esp+30h+arg_C]
		push	ebp
		push	esi
		call	_bn_add_words
		add	esp, 10h
		mov	[esp+2Ch+arg_14], eax
		cmp	[esp+2Ch+var_10], 0
		push	ebx
		jz	short loc_1250
		push	edi
		push	esi
		push	edi
		call	_bn_sub_words
		mov	esi, [esp+3Ch+arg_14]
		add	esp, 10h
		sub	esi, eax
		jmp	short loc_1261
; ---------------------------------------------------------------------------

loc_1250:				; CODE XREF: _bn_mul_recursive+363j
		push	esi
		push	edi
		push	edi
		call	_bn_add_words
		mov	esi, [esp+3Ch+arg_14]
		add	esp, 10h
		add	esi, eax

loc_1261:				; CODE XREF: _bn_mul_recursive+376j
		mov	eax, [esp+2Ch+var_4]
		push	ebx
		add	eax, ebp
		push	edi
		push	eax
		push	eax
		call	_bn_add_words
		add	esp, 10h
		add	esi, eax
		jz	short loc_12A1
		mov	eax, [esp+2Ch+var_8]
		add	eax, ebx
		lea	ecx, ds:0[eax*4]
		mov	eax, [ecx+ebp]
		add	ecx, ebp
		add	eax, esi
		mov	[ecx], eax
		cmp	eax, esi
		jnb	short loc_12A1
		nop	dword ptr [eax+00000000h]

loc_1298:				; CODE XREF: _bn_mul_recursive+3C7j
		add	dword ptr [ecx+4], 1
		lea	ecx, [ecx+4]
		jz	short loc_1298

loc_12A1:				; CODE XREF: _bn_mul_recursive+81j
					; _bn_mul_recursive+39Dj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
_bn_mul_recursive endp

; ---------------------------------------------------------------------------
		align 4
$LN43		dd offset $LN10		; DATA XREF: _bn_mul_recursive+117r
		dd offset $LN11		; jump table for switch	statement
		dd offset $LN12
		dd offset $LN11
		dd offset $LN11
		dd offset $LN11
		dd offset $LN14
		dd offset $LN11
		dd offset $LN16
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 12D0h
; COMDAT (pick any)
		public __xmm@00000001000000010000000100000001
__xmm@00000001000000010000000100000001 xmmword 1000000010000000100000001h
					; DATA XREF: _bn_mul_high:loc_6B3r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 12E0h
; COMDAT (pick any)
		public __xmm@ffffffffffffffffffffffffffffffff
__xmm@ffffffffffffffffffffffffffffffff xmmword 0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFh
					; DATA XREF: _bn_mul_high+238r
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_mul+3Fp
		extrn _BN_CTX_get:near	; CODE XREF: _BN_mul+60p _BN_mul+123p
		extrn _BN_CTX_end:near	; CODE XREF: _BN_mul+2A0p
		extrn _BN_num_bits_word:near ; CODE XREF: _BN_mul+F1p
					; _BN_mul+103p
		extrn _BN_copy:near	; CODE XREF: _BN_mul+28Bp
		extrn _BN_set_word:near	; CODE XREF: _BN_mul+2B9p
		extrn _bn_expand2:near	; CODE XREF: _BN_mul+9Cp _BN_mul+156p	...
		extrn _bn_mul_add_words:near ; CODE XREF: _bn_mul_low_normal+39p
					; _bn_mul_low_normal+4Bp ...
		extrn _bn_mul_words:near ; CODE	XREF: _bn_mul_low_normal+19p
					; _bn_mul_normal+3Cp ...
		extrn _bn_add_words:near ; CODE	XREF: _bn_add_part_words+18p
					; _bn_mul_high+17Ap ...
		extrn _bn_sub_words:near ; CODE	XREF: _bn_mul_high+81p
					; _bn_mul_high+9Bp ...
		extrn _bn_mul_comba8:near ; CODE XREF: _BN_mul+C1p
					; _bn_mul_high+109p ...
		extrn _bn_mul_comba4:near ; CODE XREF: _bn_mul_recursive+212p
					; _bn_mul_recursive+233p ...
		extrn _bn_cmp_words:near ; CODE	XREF: _bn_mul_high+3Ep
					; _bn_mul_high+53p
		extrn _bn_cmp_part_words:near ;	CODE XREF: _bn_mul_part_recursive+59p
					; _bn_mul_part_recursive+83p ...
		extrn _bn_sub_part_words:near ;	CODE XREF: _bn_mul_part_recursive+B6p
					; _bn_mul_part_recursive+DAp ...
		extrn __chkstk:near	; CODE XREF: _BN_mul+5p
					; _bn_mul_high+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _bn_mul_part_recursive+1C7p
					; _bn_mul_part_recursive+2C4p ...


		end
