;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CBB052BD6E9272F8952016B244191E4A
; Input	CRC32 :	3959FCC4

; File Name   :	C:\compspace\Diff\openssl\obj\bn_exp.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_exp
_BN_exp		proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_4], 0
		test	byte ptr [esi+10h], 4
		jz	short loc_3D
		push	96h ; '–'
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	42h ; 'B'
		push	7Bh ; '{'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_3D:					; CODE XREF: _BN_exp+1Bj
		push	ebx
		mov	ebx, [esp+10h+arg_C]
		push	ebp
		push	edi
		push	ebx
		call	_BN_CTX_start
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 4
		cmp	eax, [esp+18h+arg_4]
		jz	short loc_5B
		cmp	eax, esi
		jnz	short loc_64

loc_5B:					; CODE XREF: _BN_exp+55j
		push	ebx
		call	_BN_CTX_get
		add	esp, 4

loc_64:					; CODE XREF: _BN_exp+59j
		push	ebx
		mov	edi, eax
		call	_BN_CTX_get
		add	esp, 4
		mov	ebp, eax
		test	edi, edi
		jz	$err$31
		test	ebp, ebp
		jz	$err$31
		push	[esp+18h+arg_4]
		push	ebp
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	$err$31
		push	esi
		call	_BN_num_bits
		add	esp, 4
		mov	[esp+18h+var_8], eax
		cmp	dword ptr [esi+4], 0
		jle	short loc_BC
		mov	eax, [esi]
		test	byte ptr [eax],	1
		jz	short loc_BC
		push	[esp+18h+arg_4]
		push	edi
		call	_BN_copy
		jmp	short loc_C4
; ---------------------------------------------------------------------------

loc_BC:					; CODE XREF: _BN_exp+A7j _BN_exp+AEj
		push	1
		push	edi
		call	_BN_set_word

loc_C4:					; CODE XREF: _BN_exp+BAj
		add	esp, 8
		test	eax, eax
		jz	short $err$31
		mov	esi, 1
		cmp	[esp+18h+var_8], esi
		jle	short loc_10D

loc_D6:					; CODE XREF: _BN_exp+10Bj
		push	ebx
		push	ebp
		push	ebp
		call	_BN_sqr
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$31
		push	esi
		push	[esp+1Ch+arg_8]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_106
		push	ebx
		push	ebp
		push	edi
		push	edi
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	short $err$31

loc_106:				; CODE XREF: _BN_exp+F4j
		inc	esi
		cmp	esi, [esp+18h+var_8]
		jl	short loc_D6

loc_10D:				; CODE XREF: _BN_exp+D4j
		mov	eax, [esp+18h+arg_0]
		cmp	eax, edi
		jz	short loc_11F
		push	edi
		push	eax
		call	_BN_copy
		add	esp, 8

loc_11F:				; CODE XREF: _BN_exp+113j
		mov	[esp+18h+var_4], 1

$err$31:				; CODE XREF: _BN_exp+73j _BN_exp+7Bj ...
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+1Ch+var_4]
		add	esp, 4
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 8
		retn
_BN_exp		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_exp
_BN_mod_exp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	ecx, [esp+arg_C]
		cmp	dword ptr [ecx+4], 0
		jle	short loc_196
		mov	eax, [ecx]
		test	byte ptr [eax],	1
		jz	short loc_196
		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_8]
		cmp	dword ptr [eax+4], 1
		jnz	short loc_180
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_180
		test	byte ptr [edx+10h], 4
		jnz	short loc_180
		mov	eax, [eax]
		push	0
		push	[esp+4+arg_10]
		push	ecx
		push	edx
		push	dword ptr [eax]
		push	[esp+14h+arg_0]
		call	_BN_mod_exp_mont_word
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_180:				; CODE XREF: _BN_mod_exp+1Dj
					; _BN_mod_exp+23j ...
		push	0
		push	[esp+4+arg_10]
		push	ecx
		push	edx
		push	eax
		push	[esp+14h+arg_0]
		call	_BN_mod_exp_mont
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_196:				; CODE XREF: _BN_mod_exp+8j
					; _BN_mod_exp+Fj
		mov	[esp+arg_C], ecx
		jmp	_BN_mod_exp_recp
_BN_mod_exp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_exp_mont
_BN_mod_exp_mont proc near		; CODE XREF: _BN_mod_exp+51p

var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 0C0h ; 'À'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0C0h+var_4], eax
		mov	ecx, [esp+0C0h+arg_8]
		mov	eax, [esp+0C0h+arg_4]
		mov	edx, [esp+0C0h+arg_14]
		push	ebx
		mov	ebx, [esp+0C4h+arg_C]
		push	ebp
		mov	ebp, [esp+0C8h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+0D0h+arg_10]
		xor	esi, esi
		test	byte ptr [ecx+10h], 4
		mov	[esp+0D0h+var_98], ebp
		mov	[esp+0D0h+var_BC], eax
		mov	[esp+0D0h+var_9C], ecx
		mov	[esp+0D0h+var_AC], edi
		mov	[esp+0D0h+var_94], edx
		mov	[esp+0D0h+var_A0], 0
		jz	short loc_21D
		push	edx
		push	edi
		push	ebx
		push	ecx
		push	eax
		push	ebp
		call	_BN_mod_exp_mont_consttime
		add	esp, 18h
		jmp	loc_6E4
; ---------------------------------------------------------------------------

loc_21D:				; CODE XREF: _BN_mod_exp_mont+68j
		cmp	[ebx+4], esi
		jle	loc_6CA
		mov	eax, [ebx]
		test	byte ptr [eax],	1
		jz	loc_6CA
		push	ecx
		call	_BN_num_bits
		add	esp, 4
		mov	[esp+0D0h+var_B4], eax
		test	eax, eax
		jnz	short loc_27D
		cmp	dword ptr [ebx+4], 1
		jnz	short loc_26B
		mov	eax, [ebx]
		cmp	dword ptr [eax], 1
		jnz	short loc_26B
		cmp	[ebx+0Ch], esi
		jnz	short loc_26B
		push	0
		push	ebp
		mov	esi, 1
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		jmp	loc_6E4
; ---------------------------------------------------------------------------

loc_26B:				; CODE XREF: _BN_mod_exp_mont+A6j
					; _BN_mod_exp_mont+ADj	...
		push	1
		push	ebp
		call	_BN_set_word
		mov	esi, eax
		add	esp, 8
		jmp	loc_6E4
; ---------------------------------------------------------------------------

loc_27D:				; CODE XREF: _BN_mod_exp_mont+A0j
		push	edi
		call	_BN_CTX_start
		push	edi
		call	_BN_CTX_get
		push	edi
		mov	[esp+0DCh+var_B8], eax
		call	_BN_CTX_get
		mov	ebp, eax
		push	edi
		mov	[esp+0E0h+var_88], ebp
		call	_BN_CTX_get
		add	esp, 10h
		mov	[esp+0D0h+var_84], eax
		cmp	[esp+0D0h+var_B8], esi
		jz	$err$149
		test	ebp, ebp
		jz	$err$149
		test	eax, eax
		jz	$err$149
		mov	eax, [esp+0D0h+var_94]
		test	eax, eax
		jz	short loc_2D0
		mov	esi, eax
		mov	[esp+0D0h+var_C0], esi
		jmp	short loc_2F6
; ---------------------------------------------------------------------------

loc_2D0:				; CODE XREF: _BN_mod_exp_mont+126j
		call	_BN_MONT_CTX_new
		mov	esi, eax
		mov	[esp+0D0h+var_C0], esi
		test	esi, esi
		jz	loc_6BB
		push	edi
		push	ebx
		push	esi
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6AE

loc_2F6:				; CODE XREF: _BN_mod_exp_mont+12Ej
		mov	eax, [esp+0D0h+var_BC]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_318
		push	ebx
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		mov	eax, [esp+0D0h+var_BC]
		jns	short loc_318
		mov	ecx, [esp+0D0h+var_84]
		jmp	short loc_335
; ---------------------------------------------------------------------------

loc_318:				; CODE XREF: _BN_mod_exp_mont+15Ej
					; _BN_mod_exp_mont+170j
		push	edi
		push	ebx
		push	eax
		push	[esp+0DCh+var_84]
		call	_BN_nnmod
		add	esp, 10h
		test	eax, eax
		jz	$err$149
		mov	ecx, [esp+0D0h+var_84]
		mov	eax, ecx

loc_335:				; CODE XREF: _BN_mod_exp_mont+176j
		cmp	dword ptr [eax+4], 0
		jnz	short loc_356
		push	0
		push	[esp+0D4h+var_98]
		call	_BN_set_word
		add	esp, 8
		mov	[esp+0D0h+var_A0], 1
		jmp	$err$149
; ---------------------------------------------------------------------------

loc_356:				; CODE XREF: _BN_mod_exp_mont+199j
		push	edi
		push	esi
		lea	edx, [esi+4]
		push	edx
		push	eax
		push	ecx
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$149
		mov	eax, [esp+0D0h+var_B4]
		cmp	eax, 29Fh
		jle	short loc_383
		mov	[esp+0D0h+var_B0], 6
		jmp	short loc_3BB
; ---------------------------------------------------------------------------

loc_383:				; CODE XREF: _BN_mod_exp_mont+1D7j
		cmp	eax, 0EFh ; 'ï'
		jle	short loc_394
		mov	[esp+0D0h+var_B0], 5
		jmp	short loc_3BB
; ---------------------------------------------------------------------------

loc_394:				; CODE XREF: _BN_mod_exp_mont+1E8j
		cmp	eax, 4Fh ; 'O'
		jle	short loc_3A3
		mov	[esp+0D0h+var_B0], 4
		jmp	short loc_3BB
; ---------------------------------------------------------------------------

loc_3A3:				; CODE XREF: _BN_mod_exp_mont+1F7j
		xor	ecx, ecx
		cmp	eax, 17h
		setnle	cl
		lea	ecx, ds:1[ecx*2]
		mov	[esp+0D0h+var_B0], ecx
		cmp	ecx, 1
		jle	short loc_430

loc_3BB:				; CODE XREF: _BN_mod_exp_mont+1E1j
					; _BN_mod_exp_mont+1F2j ...
		mov	eax, [esp+0D0h+var_84]
		push	edi
		push	esi
		push	eax
		push	eax
		push	[esp+0E0h+var_B8]
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$149
		mov	ecx, [esp+0D0h+var_B0]
		mov	eax, 1
		mov	esi, 1
		lea	ecx, [ecx-1]
		shl	eax, cl
		mov	[esp+0D0h+var_A8], eax
		cmp	eax, esi
		jle	short loc_42C

loc_3F2:				; CODE XREF: _BN_mod_exp_mont+28Aj
		push	edi
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+esi*4+0D0h+var_84], eax
		test	eax, eax
		jz	loc_6A3
		push	edi
		push	[esp+0D4h+var_C0]
		push	[esp+0D8h+var_B8]
		push	[esp+esi*4+0DCh+var_88]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	loc_6A3
		inc	esi
		cmp	esi, [esp+0D0h+var_A8]
		jl	short loc_3F2

loc_42C:				; CODE XREF: _BN_mod_exp_mont+250j
		mov	eax, [esp+0D0h+var_B4]

loc_430:				; CODE XREF: _BN_mod_exp_mont+219j
		mov	esi, [ebx+4]
		lea	ecx, [eax-1]
		mov	eax, [ebx]
		mov	[esp+0D0h+var_A4], 1
		mov	[esp+0D0h+var_B8], ecx
		test	dword ptr [eax+esi*4-4], 80000000h
		jz	loc_59B
		cmp	esi, [ebp+8]
		jg	short loc_45B
		mov	eax, ebp
		jmp	short loc_465
; ---------------------------------------------------------------------------

loc_45B:				; CODE XREF: _BN_mod_exp_mont+2B5j
		push	esi
		push	ebp
		call	_bn_expand2
		add	esp, 8

loc_465:				; CODE XREF: _BN_mod_exp_mont+2B9j
		test	eax, eax
		jz	loc_6A3
		mov	eax, [ebx]
		mov	edx, 1
		mov	ecx, [eax]
		mov	eax, [ebp+0]
		neg	ecx
		mov	[eax], ecx
		lea	ecx, [esi-1]
		cmp	esi, edx
		jle	loc_532
		cmp	ecx, 8
		jb	loc_518
		mov	edi, [ebp+0]
		lea	eax, [edi+4]
		mov	[esp+0D0h+var_B4], eax
		lea	edi, [edi+ecx*4]
		mov	eax, [ebx]
		mov	[esp+0D0h+var_BC], edi
		lea	edi, [eax+4]
		lea	eax, [eax+ecx*4]
		mov	[esp+0D0h+var_90], edi
		cmp	[esp+0D0h+var_B4], eax
		mov	edi, [esp+0D0h+var_AC]
		mov	eax, [esp+0D0h+var_BC]
		ja	short loc_4C2
		cmp	eax, [esp+0D0h+var_90]
		jnb	short loc_518

loc_4C2:				; CODE XREF: _BN_mod_exp_mont+31Aj
		cmp	[esp+0D0h+var_B4], ebp
		ja	short loc_4CC
		cmp	eax, ebp
		jnb	short loc_518

loc_4CC:				; CODE XREF: _BN_mod_exp_mont+326j
		cmp	[esp+0D0h+var_B4], ebx
		ja	short loc_4D6
		cmp	eax, ebx
		jnb	short loc_518

loc_4D6:				; CODE XREF: _BN_mod_exp_mont+330j
		and	ecx, 80000007h
		jns	short loc_4E3
		dec	ecx
		or	ecx, 0FFFFFFF8h
		inc	ecx

loc_4E3:				; CODE XREF: _BN_mod_exp_mont+33Cj
		movups	xmm1, ds:__xmm@ffffffffffffffffffffffffffffffff
		mov	edi, [ebp+0]
		mov	eax, esi
		sub	eax, ecx
		mov	ecx, [ebx]

loc_4F3:				; CODE XREF: _BN_mod_exp_mont+372j
		movups	xmm0, xmmword ptr [ecx+edx*4]
		pandn	xmm0, xmm1
		movups	xmmword	ptr [edi+edx*4], xmm0
		movups	xmm0, xmmword ptr [ecx+edx*4+10h]
		pandn	xmm0, xmm1
		movups	xmmword	ptr [edi+edx*4+10h], xmm0
		add	edx, 8
		cmp	edx, eax
		jl	short loc_4F3
		mov	edi, [esp+0D0h+var_AC]

loc_518:				; CODE XREF: _BN_mod_exp_mont+2EBj
					; _BN_mod_exp_mont+320j ...
		cmp	edx, esi
		jge	short loc_532
		nop	dword ptr [eax+00h]

loc_520:				; CODE XREF: _BN_mod_exp_mont+390j
		mov	eax, [ebx]
		mov	ecx, [eax+edx*4]
		mov	eax, [ebp+0]
		not	ecx
		mov	[eax+edx*4], ecx
		inc	edx
		cmp	edx, esi
		jl	short loc_520

loc_532:				; CODE XREF: _BN_mod_exp_mont+2E2j
					; _BN_mod_exp_mont+37Aj
		mov	[ebp+4], esi
		test	esi, esi
		jle	short loc_553
		mov	eax, [ebp+0]
		lea	ecx, [esi-1]
		lea	ecx, [eax+ecx*4]

loc_542:				; CODE XREF: _BN_mod_exp_mont+3AEj
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_550
		dec	esi
		test	esi, esi
		jg	short loc_542

loc_550:				; CODE XREF: _BN_mod_exp_mont+3A9j
		mov	[ebp+4], esi

loc_553:				; CODE XREF: _BN_mod_exp_mont+397j
		mov	esi, [esp+0D0h+var_C0]

loc_557:				; CODE XREF: _BN_mod_exp_mont+41Cj
		mov	ebx, [esp+0D0h+var_B8]
		nop	dword ptr [eax+eax+00h]

loc_560:				; CODE XREF: _BN_mod_exp_mont+3F9j
					; _BN_mod_exp_mont+4D8j
		push	ebx
		push	[esp+0D4h+var_9C]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_5BE
		cmp	[esp+0D0h+var_A4], eax
		jnz	short loc_58C
		push	edi
		push	esi
		push	ebp
		push	ebp
		push	ebp
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$149

loc_58C:				; CODE XREF: _BN_mod_exp_mont+3D5j
		test	ebx, ebx
		jz	loc_67E
		dec	ebx
		mov	[esp+0D0h+var_B8], ebx
		jmp	short loc_560
; ---------------------------------------------------------------------------

loc_59B:				; CODE XREF: _BN_mod_exp_mont+2ACj
		mov	esi, [esp+0D0h+var_C0]
		push	edi
		push	esi
		lea	eax, [esi+4]
		push	eax
		call	_BN_value_one
		push	eax
		push	ebp
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$149
		jmp	short loc_557
; ---------------------------------------------------------------------------

loc_5BE:				; CODE XREF: _BN_mod_exp_mont+3CFj
		mov	ebx, 1
		xor	eax, eax
		mov	esi, ebx
		mov	[esp+0D0h+var_BC], eax
		cmp	[esp+0D0h+var_B0], ebx
		jle	short loc_615
		mov	edi, [esp+0D0h+var_B8]
		mov	ebp, [esp+0D0h+var_9C]
		dec	edi
		nop	word ptr [eax+eax+00h]

loc_5E0:				; CODE XREF: _BN_mod_exp_mont+46Fj
		test	edi, edi
		js	short loc_611
		push	edi
		push	ebp
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_605
		mov	ecx, esi
		mov	eax, esi
		sub	ecx, [esp+0D0h+var_BC]
		shl	ebx, cl
		or	ebx, 1
		mov	[esp+0D0h+var_BC], eax
		jmp	short loc_609
; ---------------------------------------------------------------------------

loc_605:				; CODE XREF: _BN_mod_exp_mont+450j
		mov	eax, [esp+0D0h+var_BC]

loc_609:				; CODE XREF: _BN_mod_exp_mont+463j
		inc	esi
		dec	edi
		cmp	esi, [esp+0D0h+var_B0]
		jl	short loc_5E0

loc_611:				; CODE XREF: _BN_mod_exp_mont+442j
		mov	ebp, [esp+0D0h+var_88]

loc_615:				; CODE XREF: _BN_mod_exp_mont+42Fj
		cmp	[esp+0D0h+var_A4], 0
		lea	edi, [eax+1]
		jnz	short loc_641
		xor	esi, esi
		test	edi, edi
		jle	short loc_641

loc_625:				; CODE XREF: _BN_mod_exp_mont+49Fj
		push	[esp+0D0h+var_AC]
		push	[esp+0D4h+var_C0]
		push	ebp
		push	ebp
		push	ebp
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short loc_69F
		inc	esi
		cmp	esi, edi
		jl	short loc_625

loc_641:				; CODE XREF: _BN_mod_exp_mont+47Dj
					; _BN_mod_exp_mont+483j
		mov	edi, [esp+0D0h+var_AC]
		mov	esi, [esp+0D0h+var_C0]
		push	edi
		sar	ebx, 1
		push	esi
		push	[esp+ebx*4+0D8h+var_84]
		push	ebp
		push	ebp
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short $err$149
		mov	ebx, [esp+0D0h+var_B8]
		or	eax, 0FFFFFFFFh
		sub	eax, [esp+0D0h+var_BC]
		add	ebx, eax
		mov	[esp+0D0h+var_A4], 0
		mov	[esp+0D0h+var_B8], ebx
		jns	loc_560

loc_67E:				; CODE XREF: _BN_mod_exp_mont+3EEj
		push	edi
		push	esi
		push	ebp
		push	[esp+0DCh+var_98]
		call	_BN_from_montgomery
		xor	ecx, ecx
		add	esp, 10h
		test	eax, eax
		mov	eax, 1
		cmovnz	ecx, eax
		mov	[esp+0D0h+var_A0], ecx
		jmp	short $err$149
; ---------------------------------------------------------------------------

loc_69F:				; CODE XREF: _BN_mod_exp_mont+49Aj
		mov	edi, [esp+0D0h+var_AC]

loc_6A3:				; CODE XREF: _BN_mod_exp_mont+261j
					; _BN_mod_exp_mont+27Fj ...
		mov	esi, [esp+0D0h+var_C0]

$err$149:				; CODE XREF: _BN_mod_exp_mont+10Aj
					; _BN_mod_exp_mont+112j ...
		cmp	[esp+0D0h+var_94], 0
		jnz	short loc_6BB

loc_6AE:				; CODE XREF: _BN_mod_exp_mont+150j
		test	esi, esi
		jz	short loc_6BB
		push	esi
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_6BB:				; CODE XREF: _BN_mod_exp_mont+13Dj
					; _BN_mod_exp_mont+50Cj ...
		push	edi
		call	_BN_CTX_end
		mov	eax, [esp+0D4h+var_A0]
		add	esp, 4
		jmp	short loc_6E4
; ---------------------------------------------------------------------------

loc_6CA:				; CODE XREF: _BN_mod_exp_mont+80j
					; _BN_mod_exp_mont+8Bj
		push	1A6h
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	66h ; 'f'
		push	6Dh ; 'm'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax

loc_6E4:				; CODE XREF: _BN_mod_exp_mont+78j
					; _BN_mod_exp_mont+C6j	...
		mov	ecx, [esp+0D0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C0h
		retn
_BN_mod_exp_mont endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 700h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _BN_mod_exp_mont_consttime
_BN_mod_exp_mont_consttime proc	near	; CODE XREF: _BN_mod_exp_mont+70p

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
Size		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	eax, 60h ; '`'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	esi
		push	edi
		mov	[ebp+var_4C], 0
		mov	eax, [ebx+4]
		mov	[ebp+var_24], 0
		mov	[ebp+Size], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_8], eax
		test	eax, eax
		jle	loc_CC5
		mov	eax, [ebx]
		test	byte ptr [eax],	1
		jz	loc_CC5
		push	[ebp+arg_8]
		call	_BN_num_bits
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_7C0
		cmp	dword ptr [ebx+4], 1
		jnz	short loc_79D
		mov	eax, [ebx]
		cmp	dword ptr [eax], 1
		jnz	short loc_79D
		cmp	[ebx+0Ch], esi
		jnz	short loc_79D
		push	0
		push	[ebp+arg_0]
		mov	esi, 1
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		lea	esp, [ebp-6Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_79D:				; CODE XREF: _BN_mod_exp_mont_consttime+67j
					; _BN_mod_exp_mont_consttime+6Ej ...
		push	1
		push	[ebp+arg_0]
		call	_BN_set_word
		mov	esi, eax
		add	esp, 8
		lea	esp, [ebp-6Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_7C0:				; CODE XREF: _BN_mod_exp_mont_consttime+61j
		push	[ebp+arg_10]
		call	_BN_CTX_start
		mov	eax, [ebp+arg_14]
		add	esp, 4
		test	eax, eax
		jz	short loc_7D9
		mov	edi, eax
		mov	[ebp+var_14], edi
		jmp	short loc_800
; ---------------------------------------------------------------------------

loc_7D9:				; CODE XREF: _BN_mod_exp_mont_consttime+D0j
		call	_BN_MONT_CTX_new
		mov	edi, eax
		mov	[ebp+var_14], edi
		test	edi, edi
		jz	loc_CA3
		push	[ebp+arg_10]
		push	ebx
		push	edi
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	loc_C73

loc_800:				; CODE XREF: _BN_mod_exp_mont_consttime+D7j
		cmp	esi, 3A9h
		jle	short loc_80F
		mov	ebx, 6
		jmp	short loc_839
; ---------------------------------------------------------------------------

loc_80F:				; CODE XREF: _BN_mod_exp_mont_consttime+106j
		cmp	esi, 132h
		jle	short loc_81E
		mov	ebx, 5
		jmp	short loc_839
; ---------------------------------------------------------------------------

loc_81E:				; CODE XREF: _BN_mod_exp_mont_consttime+115j
		cmp	esi, 59h ; 'Y'
		jle	short loc_82A
		mov	ebx, 4
		jmp	short loc_839
; ---------------------------------------------------------------------------

loc_82A:				; CODE XREF: _BN_mod_exp_mont_consttime+121j
		xor	ebx, ebx
		cmp	esi, 16h
		setnle	bl
		lea	ebx, ds:1[ebx*2]

loc_839:				; CODE XREF: _BN_mod_exp_mont_consttime+10Dj
					; _BN_mod_exp_mont_consttime+11Cj ...
		mov	edx, [ebp+var_8]
		mov	ecx, ebx
		mov	eax, 1
		mov	[ebp+var_10], ebx
		shl	eax, cl
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_20]
		lea	eax, [edx+edx]
		cmp	eax, ecx
		cmovg	ecx, eax
		mov	eax, [ebp+var_20]
		imul	eax, edx
		mov	[ebp+var_1C], eax
		add	eax, ecx
		shl	eax, 2
		mov	[ebp+Size], eax
		cmp	eax, 0C00h
		jge	short loc_87D
		add	eax, 40h ; '@'
		call	__alloca_probe_16
		mov	ecx, esp
		mov	[ebp+var_24], ecx
		jmp	short loc_8A0
; ---------------------------------------------------------------------------

loc_87D:				; CODE XREF: _BN_mod_exp_mont_consttime+16Cj
		push	32Dh
		add	eax, 40h ; '@'
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ecx, eax
		add	esp, 0Ch
		mov	[ebp+var_24], ecx
		test	ecx, ecx
		jz	$err$114

loc_8A0:				; CODE XREF: _BN_mod_exp_mont_consttime+17Bj
		push	[ebp+Size]	; Size
		mov	eax, ecx
		and	eax, 3Fh
		sub	ecx, eax
		add	ecx, 40h ; '@'
		push	0		; Val
		push	ecx		; Dst
		mov	[ebp+var_C], ecx
		call	_memset
		mov	eax, [ebp+var_24]
		xor	ecx, ecx
		mov	edx, [ebp+var_8]
		add	esp, 0Ch
		cmp	[ebp+Size], 0C00h
		mov	[ebp+var_5C], 0
		cmovl	eax, ecx
		mov	[ebp+var_3C], 0
		mov	ecx, [ebp+var_1C]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], edx
		mov	[ebp+var_38], edx
		mov	[ebp+var_54], 0
		lea	eax, [eax+ecx*4]
		mov	[ebp+var_34], 0
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_40], eax
		mov	[ebp+var_1C], eax
		lea	eax, [eax+edx*4]
		mov	[ebp+var_60], eax
		mov	eax, [ecx]
		mov	[ebp+var_50], 2
		mov	[ebp+var_30], 2
		test	dword ptr [eax+edx*4-4], 80000000h
		jz	loc_A06
		mov	eax, [eax]
		mov	edx, [ebp+var_1C]
		neg	eax
		mov	[edx], eax
		mov	edx, 1
		mov	eax, [ebp+var_8]
		lea	edi, [eax-1]
		mov	[ebp+var_18], edi
		mov	edi, [ebp+var_14]
		cmp	eax, edx
		jle	loc_9FE
		cmp	[ebp+var_18], 8
		jb	loc_9DB
		mov	eax, [ecx]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_40]
		lea	ebx, [eax+4]
		mov	[ebp+var_48], ebx
		mov	ebx, [ebp+var_18]
		lea	eax, [eax+ebx*4]
		mov	ebx, [ebp+var_1C]
		mov	[ebp+var_44], eax
		lea	eax, [ebx+4]
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_18]
		lea	eax, [ebx+eax*4]
		mov	ebx, [ebp+var_10]
		cmp	[ebp+var_48], eax
		mov	eax, [ebp+var_44]
		ja	short loc_98A
		cmp	eax, [ebp+var_28]
		jnb	short loc_9DB

loc_98A:				; CODE XREF: _BN_mod_exp_mont_consttime+283j
		cmp	[ebp+var_48], ecx
		ja	short loc_993
		cmp	eax, ecx
		jnb	short loc_9DB

loc_993:				; CODE XREF: _BN_mod_exp_mont_consttime+28Dj
		mov	eax, [ebp+var_18]
		and	eax, 80000007h
		jns	short loc_9A2
		dec	eax
		or	eax, 0FFFFFFF8h
		inc	eax

loc_9A2:				; CODE XREF: _BN_mod_exp_mont_consttime+29Bj
		mov	ecx, [ebp+var_8]
		movups	xmm1, ds:__xmm@ffffffffffffffffffffffffffffffff
		mov	edi, [ebp+var_1C]
		sub	ecx, eax

loc_9B1:				; CODE XREF: _BN_mod_exp_mont_consttime+2D6j
		movups	xmm0, xmmword ptr [edi+edx*4]
		mov	eax, [ebp+var_40]
		pandn	xmm0, xmm1
		movups	xmmword	ptr [eax+edx*4], xmm0
		mov	eax, [ebp+var_40]
		movups	xmm0, xmmword ptr [edi+edx*4+10h]
		pandn	xmm0, xmm1
		movups	xmmword	ptr [eax+edx*4+10h], xmm0
		add	edx, 8
		cmp	edx, ecx
		jl	short loc_9B1
		mov	edi, [ebp+var_14]

loc_9DB:				; CODE XREF: _BN_mod_exp_mont_consttime+24Ej
					; _BN_mod_exp_mont_consttime+288j ...
		cmp	edx, [ebp+var_8]
		jge	short loc_9FE
		mov	edi, [ebp+arg_C]
		mov	ebx, [ebp+var_8]

loc_9E6:				; CODE XREF: _BN_mod_exp_mont_consttime+2F6j
		mov	eax, [edi]
		mov	ecx, [eax+edx*4]
		mov	eax, [ebp+var_40]
		not	ecx
		mov	[eax+edx*4], ecx
		inc	edx
		cmp	edx, ebx
		jl	short loc_9E6
		mov	ebx, [ebp+var_10]
		mov	edi, [ebp+var_14]

loc_9FE:				; CODE XREF: _BN_mod_exp_mont_consttime+244j
					; _BN_mod_exp_mont_consttime+2DEj
		mov	edx, [ebp+var_8]
		mov	[ebp+var_3C], edx
		jmp	short loc_A28
; ---------------------------------------------------------------------------

loc_A06:				; CODE XREF: _BN_mod_exp_mont_consttime+222j
		push	[ebp+arg_10]
		lea	eax, [edi+4]
		push	edi
		push	eax
		call	_BN_value_one
		push	eax
		lea	eax, [ebp+var_40]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$114

loc_A28:				; CODE XREF: _BN_mod_exp_mont_consttime+304j
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_A64
		push	[ebp+arg_C]
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	short loc_A61
		push	[ebp+arg_10]
		lea	eax, [edi+4]
		push	edi
		push	eax
		push	[ebp+arg_4]
		lea	eax, [ebp+var_60]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jnz	short loc_A9E
		jmp	$err$114
; ---------------------------------------------------------------------------

loc_A61:				; CODE XREF: _BN_mod_exp_mont_consttime+33Fj
		mov	eax, [ebp+arg_4]

loc_A64:				; CODE XREF: _BN_mod_exp_mont_consttime+32Fj
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	eax
		lea	eax, [ebp+var_60]
		push	eax
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		push	[ebp+arg_10]
		lea	eax, [edi+4]
		push	edi
		push	eax
		lea	eax, [ebp+var_60]
		push	eax
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$114

loc_A9E:				; CODE XREF: _BN_mod_exp_mont_consttime+35Aj
		push	ebx
		push	0
		push	[ebp+var_C]
		lea	eax, [ebp+var_40]
		push	[ebp+var_8]
		push	eax
		call	_MOD_EXP_CTIME_COPY_TO_PREBUF
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		push	ebx
		push	1
		push	[ebp+var_C]
		lea	eax, [ebp+var_60]
		push	[ebp+var_8]
		push	eax
		call	_MOD_EXP_CTIME_COPY_TO_PREBUF
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		cmp	ebx, 1
		jle	loc_B72
		push	[ebp+arg_10]
		lea	eax, [ebp+var_60]
		push	edi
		push	eax
		push	eax
		lea	eax, [ebp+var_40]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		push	ebx
		push	2
		push	[ebp+var_C]
		lea	eax, [ebp+var_40]
		push	[ebp+var_8]
		push	eax
		call	_MOD_EXP_CTIME_COPY_TO_PREBUF
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		cmp	[ebp+var_20], 3
		mov	[ebp+var_18], 3
		jle	short loc_B72

loc_B28:				; CODE XREF: _BN_mod_exp_mont_consttime+470j
		push	[ebp+arg_10]
		lea	eax, [ebp+var_40]
		push	edi
		push	eax
		lea	eax, [ebp+var_60]
		push	eax
		lea	eax, [ebp+var_40]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		push	ebx
		push	[ebp+var_18]
		lea	eax, [ebp+var_40]
		push	[ebp+var_C]
		push	[ebp+var_8]
		push	eax
		call	_MOD_EXP_CTIME_COPY_TO_PREBUF
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		mov	eax, [ebp+var_18]
		inc	eax
		mov	[ebp+var_18], eax
		cmp	eax, [ebp+var_20]
		jl	short loc_B28

loc_B72:				; CODE XREF: _BN_mod_exp_mont_consttime+3DBj
					; _BN_mod_exp_mont_consttime+426j
		dec	esi
		xor	ecx, ecx
		mov	eax, esi
		cdq
		idiv	ebx
		mov	[ebp+var_28], edx
		test	edx, edx
		js	short loc_BA6
		mov	edi, edx
		xor	ebx, ebx

loc_B85:				; CODE XREF: _BN_mod_exp_mont_consttime+498j
		push	esi
		push	[ebp+arg_8]
		call	_BN_is_bit_set
		add	esp, 8
		dec	esi
		sub	edi, 1
		lea	ebx, [eax+ebx*2]
		jns	short loc_B85
		mov	edi, [ebp+var_14]
		mov	[ebp+var_28], ebx
		mov	ebx, [ebp+var_10]
		mov	ecx, [ebp+var_28]

loc_BA6:				; CODE XREF: _BN_mod_exp_mont_consttime+47Fj
		push	ebx
		push	ecx
		push	[ebp+var_C]
		lea	eax, [ebp+var_40]
		push	[ebp+var_8]
		push	eax
		call	_MOD_EXP_CTIME_COPY_FROM_PREBUF
		add	esp, 14h
		test	eax, eax
		jz	$err$114
		test	esi, esi
		js	loc_C48
		nop	word ptr [eax+eax+00h]

loc_BD0:				; CODE XREF: _BN_mod_exp_mont_consttime+546j
		mov	eax, [ebp+var_10]
		xor	ebx, ebx
		xor	edi, edi
		test	eax, eax
		jle	short loc_C10
		nop	dword ptr [eax+eax+00h]

loc_BE0:				; CODE XREF: _BN_mod_exp_mont_consttime+50Ej
		push	[ebp+arg_10]
		lea	eax, [ebp+var_40]
		push	[ebp+var_14]
		push	eax
		push	eax
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short $err$114
		push	esi
		push	[ebp+arg_8]
		call	_BN_is_bit_set
		inc	edi
		add	esp, 8
		dec	esi
		lea	ebx, [eax+ebx*2]
		mov	eax, [ebp+var_10]
		cmp	edi, eax
		jl	short loc_BE0

loc_C10:				; CODE XREF: _BN_mod_exp_mont_consttime+4D9j
		push	eax
		push	ebx
		push	[ebp+var_C]
		lea	eax, [ebp+var_60]
		push	[ebp+var_8]
		push	eax
		call	_MOD_EXP_CTIME_COPY_FROM_PREBUF
		add	esp, 14h
		test	eax, eax
		jz	short $err$114
		push	[ebp+arg_10]
		mov	edi, [ebp+var_14]
		lea	eax, [ebp+var_60]
		push	edi
		push	eax
		lea	eax, [ebp+var_40]
		push	eax
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short $err$114
		test	esi, esi
		jns	short loc_BD0

loc_C48:				; CODE XREF: _BN_mod_exp_mont_consttime+4C4j
		push	[ebp+arg_10]
		lea	eax, [ebp+var_40]
		push	edi
		push	eax
		push	[ebp+arg_0]
		call	_BN_from_montgomery
		xor	ecx, ecx
		add	esp, 10h
		test	eax, eax
		mov	eax, 1
		cmovnz	ecx, eax
		mov	[ebp+var_4C], ecx

$err$114:				; CODE XREF: _BN_mod_exp_mont_consttime+19Aj
					; _BN_mod_exp_mont_consttime+322j ...
		cmp	[ebp+arg_14], 0
		jnz	short loc_C80
		mov	edi, [ebp+var_14]

loc_C73:				; CODE XREF: _BN_mod_exp_mont_consttime+FAj
		test	edi, edi
		jz	short loc_C80
		push	edi
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_C80:				; CODE XREF: _BN_mod_exp_mont_consttime+56Ej
					; _BN_mod_exp_mont_consttime+575j
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_CA3
		push	[ebp+Size]
		push	eax
		call	_OPENSSL_cleanse
		mov	eax, [ebp+var_24]
		add	esp, 8
		test	eax, eax
		jz	short loc_CA3
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_CA3:				; CODE XREF: _BN_mod_exp_mont_consttime+E5j
					; _BN_mod_exp_mont_consttime+585j ...
		push	[ebp+arg_10]
		call	_BN_CTX_end
		mov	eax, [ebp+var_4C]
		add	esp, 4
		lea	esp, [ebp-6Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_CC5:				; CODE XREF: _BN_mod_exp_mont_consttime+41j
					; _BN_mod_exp_mont_consttime+4Cj
		push	2CCh
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	66h ; 'f'
		push	7Ch ; '|'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		lea	esp, [ebp-6Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
_BN_mod_exp_mont_consttime endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CF4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_exp_mont_word
_BN_mod_exp_mont_word proc near		; CODE XREF: _BN_mod_exp+3Bp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		push	ebp
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		xor	ebp, ebp
		mov	[esp+1Ch+var_4], ebp
		test	byte ptr [edi+10h], 4
		jz	short loc_D31
		push	4C5h
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	42h ; 'B'
		push	75h ; 'u'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_D31:				; CODE XREF: _BN_mod_exp_mont_word+1Aj
		push	ebx
		mov	ebx, [esp+20h+arg_C]
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jle	loc_1082
		mov	eax, [ebx]
		mov	eax, [eax]
		mov	[esp+20h+var_8], eax
		test	al, 1
		jz	loc_1082
		push	esi
		cmp	ecx, 1
		jnz	short loc_D69
		mov	eax, [esp+24h+arg_4]
		xor	edx, edx
		div	[esp+24h+var_8]
		mov	esi, edx
		mov	[esp+24h+var_C], edx
		jmp	short loc_D71
; ---------------------------------------------------------------------------

loc_D69:				; CODE XREF: _BN_mod_exp_mont_word+61j
		mov	esi, [esp+24h+arg_4]
		mov	[esp+24h+var_C], esi

loc_D71:				; CODE XREF: _BN_mod_exp_mont_word+73j
		push	edi
		call	_BN_num_bits
		add	esp, 4
		mov	[esp+24h+var_8], eax
		test	eax, eax
		jnz	short loc_DC9
		cmp	dword ptr [ebx+4], 1
		jnz	short loc_DB1
		mov	eax, [ebx]
		cmp	dword ptr [eax], 1
		jnz	short loc_DB1
		cmp	[ebx+0Ch], ebp
		jnz	short loc_DB1
		push	0
		push	[esp+28h+arg_0]
		mov	esi, 1
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_DB1:				; CODE XREF: _BN_mod_exp_mont_word+92j
					; _BN_mod_exp_mont_word+99j ...
		push	1
		push	[esp+28h+arg_0]
		call	_BN_set_word
		add	esp, 8
		mov	esi, eax
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_DC9:				; CODE XREF: _BN_mod_exp_mont_word+8Cj
		test	esi, esi
		jnz	short loc_DE5
		push	esi
		push	[esp+28h+arg_0]
		call	_BN_set_word
		add	esp, 8
		lea	eax, [esi+1]
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_DE5:				; CODE XREF: _BN_mod_exp_mont_word+D7j
		mov	ebx, [esp+24h+arg_10]
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	esi, eax
		call	_BN_CTX_get
		push	ebx
		mov	edi, eax
		call	_BN_CTX_get
		add	esp, 10h
		mov	[esp+24h+var_10], eax
		test	esi, esi
		jz	$err$74
		test	edi, edi
		jz	$err$74
		test	eax, eax
		jz	$err$74
		mov	eax, [esp+24h+arg_14]
		test	eax, eax
		jz	short loc_E30
		mov	ebp, eax
		jmp	short loc_E55
; ---------------------------------------------------------------------------

loc_E30:				; CODE XREF: _BN_mod_exp_mont_word+136j
		call	_BN_MONT_CTX_new
		mov	ebp, eax
		test	ebp, ebp
		jz	loc_106D
		push	ebx
		push	[esp+28h+arg_C]
		push	ebp
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1060

loc_E55:				; CODE XREF: _BN_mod_exp_mont_word+13Aj
		add	[esp+24h+var_8], 0FFFFFFFEh
		mov	ecx, 1
		mov	esi, [esp+24h+var_C]
		mov	[esp+24h+var_14], ecx
		js	loc_FD2
		nop	dword ptr [eax+00000000h]

loc_E74:				; CODE XREF: _BN_mod_exp_mont_word+2D4j
		mov	ebx, esi
		xor	edx, edx
		imul	ebx, esi
		mov	eax, ebx
		div	esi
		cmp	eax, esi
		jz	short loc_EFD
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_EBD
		call	_BN_set_word
		mov	ebx, [esp+2Ch+arg_10]
		add	esp, 8
		test	eax, eax
		jz	$err$74
		push	ebx
		push	ebp
		lea	eax, [ebp+4]
		push	eax
		push	edi
		push	edi
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$74
		xor	ecx, ecx
		mov	[esp+24h+var_14], ecx
		jmp	short loc_EF8
; ---------------------------------------------------------------------------

loc_EBD:				; CODE XREF: _BN_mod_exp_mont_word+193j
		call	_BN_mul_word
		mov	ebx, [esp+2Ch+arg_10]
		add	esp, 8
		test	eax, eax
		jz	$err$74
		mov	esi, [esp+24h+var_10]
		push	ebx
		push	[esp+28h+arg_C]
		push	edi
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$74
		mov	ecx, [esp+24h+var_14]
		mov	[esp+24h+var_10], edi
		mov	edi, esi

loc_EF8:				; CODE XREF: _BN_mod_exp_mont_word+1C7j
		mov	ebx, 1

loc_EFD:				; CODE XREF: _BN_mod_exp_mont_word+18Dj
		mov	esi, ebx
		test	ecx, ecx
		jnz	short loc_F1B
		push	[esp+24h+arg_10]
		push	ebp
		push	edi
		push	edi
		push	edi
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	loc_1055

loc_F1B:				; CODE XREF: _BN_mod_exp_mont_word+20Dj
		push	[esp+24h+var_8]
		push	[esp+28h+arg_8]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	loc_FBF
		imul	ebx, [esp+24h+var_C]
		xor	edx, edx
		mov	eax, ebx
		div	[esp+24h+var_C]
		cmp	eax, esi
		jz	short loc_FBD
		mov	eax, [esp+24h+var_14]
		push	esi
		push	edi
		test	eax, eax
		jz	short loc_F82
		call	_BN_set_word
		mov	ebx, [esp+2Ch+arg_10]
		add	esp, 8
		test	eax, eax
		jz	$err$74
		push	ebx
		push	ebp
		lea	eax, [ebp+4]
		push	eax
		push	edi
		push	edi
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$74
		xor	eax, eax
		mov	[esp+24h+var_14], eax
		jmp	short loc_FB9
; ---------------------------------------------------------------------------

loc_F82:				; CODE XREF: _BN_mod_exp_mont_word+258j
		call	_BN_mul_word
		mov	ebx, [esp+2Ch+arg_10]
		add	esp, 8
		test	eax, eax
		jz	$err$74
		mov	esi, [esp+24h+var_10]
		push	ebx
		push	[esp+28h+arg_C]
		push	edi
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$74
		mov	[esp+24h+var_10], edi
		mov	edi, esi

loc_FB9:				; CODE XREF: _BN_mod_exp_mont_word+28Cj
		mov	ebx, [esp+24h+var_C]

loc_FBD:				; CODE XREF: _BN_mod_exp_mont_word+24Ej
		mov	esi, ebx

loc_FBF:				; CODE XREF: _BN_mod_exp_mont_word+239j
		sub	[esp+24h+var_8], 1
		mov	ecx, [esp+24h+var_14]
		jns	loc_E74
		mov	ebx, [esp+24h+arg_10]

loc_FD2:				; CODE XREF: _BN_mod_exp_mont_word+173j
		cmp	esi, 1
		jz	short loc_1041
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_101A
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	short $err$74
		push	ebx
		push	ebp
		lea	eax, [ebp+4]
		push	eax
		push	edi
		push	edi
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short $err$74

loc_FFD:				; CODE XREF: _BN_mod_exp_mont_word+34Bj
					; _BN_mod_exp_mont_word+34Fj
		push	ebx
		push	ebp
		push	edi
		push	[esp+30h+arg_0]
		call	_BN_from_montgomery
		add	esp, 10h

loc_100C:				; CODE XREF: _BN_mod_exp_mont_word+35Fj
		test	eax, eax
		jz	short $err$74
		mov	[esp+24h+var_4], 1
		jmp	short $err$74
; ---------------------------------------------------------------------------

loc_101A:				; CODE XREF: _BN_mod_exp_mont_word+2E7j
		call	_BN_mul_word
		add	esp, 8
		test	eax, eax
		jz	short $err$74
		push	ebx
		push	[esp+28h+arg_C]
		push	edi
		mov	edi, [esp+30h+var_10]
		push	edi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	short $err$74
		jmp	short loc_FFD
; ---------------------------------------------------------------------------

loc_1041:				; CODE XREF: _BN_mod_exp_mont_word+2E1j
		test	ecx, ecx
		jz	short loc_FFD
		push	1
		push	[esp+28h+arg_0]
		call	_BN_set_word
		add	esp, 8
		jmp	short loc_100C
; ---------------------------------------------------------------------------

loc_1055:				; CODE XREF: _BN_mod_exp_mont_word+221j
		mov	ebx, [esp+24h+arg_10]

$err$74:				; CODE XREF: _BN_mod_exp_mont_word+11Aj
					; _BN_mod_exp_mont_word+122j ...
		cmp	[esp+24h+arg_14], 0
		jnz	short loc_106D

loc_1060:				; CODE XREF: _BN_mod_exp_mont_word+15Bj
		test	ebp, ebp
		jz	short loc_106D
		push	ebp
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_106D:				; CODE XREF: _BN_mod_exp_mont_word+145j
					; _BN_mod_exp_mont_word+36Aj ...
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+28h+var_4]
		add	esp, 4
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1082:				; CODE XREF: _BN_mod_exp_mont_word+47j
					; _BN_mod_exp_mont_word+57j
		push	4CDh
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	66h ; 'f'
		push	75h ; 'u'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
_BN_mod_exp_mont_word endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_exp_recp
_BN_mod_exp_recp proc near		; CODE XREF: _BN_mod_exp+5Ej

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= byte ptr -0B8h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 0D8h ; 'Ø'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0D8h+var_4], eax
		mov	eax, [esp+0D8h+arg_4]
		push	ebx
		mov	ebx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_C8], eax
		mov	eax, [esp+0DCh+arg_8]
		push	ebp
		mov	ebp, [esp+0E0h+arg_10]
		push	esi
		test	byte ptr [eax+10h], 4
		mov	esi, [esp+0E4h+arg_C]
		mov	[esp+0E4h+var_BC], ebx
		mov	[esp+0E4h+var_C0], eax
		mov	[esp+0E4h+var_CC], ebp
		mov	[esp+0E4h+var_C4], 0
		jz	short loc_1133
		push	119h
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	42h ; 'B'
		push	7Dh ; '}'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+0D8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
; ---------------------------------------------------------------------------

loc_1133:				; CODE XREF: _BN_mod_exp_recp+5Aj
		push	eax
		call	_BN_num_bits
		add	esp, 4
		mov	[esp+0E4h+var_D4], eax
		test	eax, eax
		jnz	short loc_11A6
		cmp	dword ptr [esi+4], 1
		jnz	short loc_1181
		mov	eax, [esi]
		cmp	dword ptr [eax], 1
		jnz	short loc_1181
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1181
		push	0
		push	ebx
		mov	esi, 1
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+0D8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
; ---------------------------------------------------------------------------

loc_1181:				; CODE XREF: _BN_mod_exp_recp+A4j
					; _BN_mod_exp_recp+ABj	...
		push	1
		push	ebx
		call	_BN_set_word
		add	esp, 8
		mov	esi, eax
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+0D8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
; ---------------------------------------------------------------------------

loc_11A6:				; CODE XREF: _BN_mod_exp_recp+9Ej
		push	edi
		push	ebp
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		push	ebp
		mov	[esp+0F4h+var_D8], eax
		call	_BN_CTX_get
		add	esp, 0Ch
		mov	edi, eax
		cmp	[esp+0E8h+var_D8], 0
		mov	[esp+0E8h+var_84], edi
		jz	$err$84
		test	edi, edi
		jz	$err$84
		lea	eax, [esp+0E8h+var_B8]
		push	eax
		call	_BN_RECP_CTX_init
		add	esp, 4
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_1210
		push	esi
		push	[esp+0ECh+var_D8]
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	$err$84
		mov	eax, [esp+0E8h+var_D8]
		push	ebp
		push	eax
		mov	dword ptr [eax+0Ch], 0
		jmp	short loc_1212
; ---------------------------------------------------------------------------

loc_1210:				; CODE XREF: _BN_mod_exp_recp+146j
		push	ebp
		push	esi

loc_1212:				; CODE XREF: _BN_mod_exp_recp+16Aj
		lea	eax, [esp+0F0h+var_B8]
		push	eax
		call	_BN_RECP_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jle	$err$84
		push	ebp
		push	esi
		push	[esp+0F0h+var_C8]
		push	edi
		call	_BN_nnmod
		add	esp, 10h
		test	eax, eax
		jz	$err$84
		cmp	dword ptr [edi+4], 0
		jnz	short loc_1254
		push	0
		push	ebx
		call	_BN_set_word
		add	esp, 8
		jmp	loc_1433
; ---------------------------------------------------------------------------

loc_1254:				; CODE XREF: _BN_mod_exp_recp+19Ej
		mov	eax, [esp+0E8h+var_D4]
		cmp	eax, 29Fh
		jle	short loc_126A
		mov	esi, 6
		mov	[esp+0E8h+var_D0], esi
		jmp	short loc_12A8
; ---------------------------------------------------------------------------

loc_126A:				; CODE XREF: _BN_mod_exp_recp+1B9j
		cmp	eax, 0EFh ; 'ï'
		jle	short loc_127C
		mov	esi, 5
		mov	[esp+0E8h+var_D0], esi
		jmp	short loc_12A8
; ---------------------------------------------------------------------------

loc_127C:				; CODE XREF: _BN_mod_exp_recp+1CBj
		cmp	eax, 4Fh ; 'O'
		jle	short loc_128C
		mov	esi, 4
		mov	[esp+0E8h+var_D0], esi
		jmp	short loc_12A8
; ---------------------------------------------------------------------------

loc_128C:				; CODE XREF: _BN_mod_exp_recp+1DBj
		xor	eax, eax
		cmp	[esp+0E8h+var_D4], 17h
		setnle	al
		lea	eax, ds:1[eax*2]
		mov	[esp+0E8h+var_D0], eax
		cmp	eax, 1
		jle	short loc_1310
		mov	esi, eax

loc_12A8:				; CODE XREF: _BN_mod_exp_recp+1C4j
					; _BN_mod_exp_recp+1D6j ...
		push	ebp
		lea	eax, [esp+0ECh+var_B8]
		push	eax
		push	edi
		push	edi
		push	[esp+0F8h+var_D8]
		call	_BN_mod_mul_reciprocal
		add	esp, 14h
		test	eax, eax
		jz	$err$84
		lea	ecx, [esi-1]
		mov	edi, 1
		shl	edi, cl
		mov	esi, 1
		cmp	edi, esi
		jle	short loc_1310

loc_12D7:				; CODE XREF: _BN_mod_exp_recp+26Aj
		push	ebp
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+esi*4+0E8h+var_84], eax
		test	eax, eax
		jz	$err$84
		push	ebp
		lea	ecx, [esp+0ECh+var_B8]
		push	ecx
		push	[esp+0F0h+var_D8]
		push	[esp+esi*4+0F4h+var_88]
		push	eax
		call	_BN_mod_mul_reciprocal
		add	esp, 14h
		test	eax, eax
		jz	$err$84
		inc	esi
		cmp	esi, edi
		jl	short loc_12D7

loc_1310:				; CODE XREF: _BN_mod_exp_recp+200j
					; _BN_mod_exp_recp+231j
		mov	esi, [esp+0E8h+var_D4]
		mov	edi, 1
		push	edi
		dec	esi
		mov	[esp+0ECh+var_C8], edi
		push	ebx
		mov	[esp+0F0h+var_D4], esi
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	$err$84
		jmp	short loc_133A
; ---------------------------------------------------------------------------

loc_1336:				; CODE XREF: _BN_mod_exp_recp+389j
		mov	ebp, [esp+0E8h+var_CC]

loc_133A:				; CODE XREF: _BN_mod_exp_recp+290j
					; _BN_mod_exp_recp+2D1j
		push	esi
		push	[esp+0ECh+var_C0]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_1377
		test	edi, edi
		jnz	short loc_1368
		push	ebp
		lea	eax, [esp+0ECh+var_B8]
		push	eax
		push	ebx
		push	ebx
		push	ebx
		call	_BN_mod_mul_reciprocal
		add	esp, 14h
		test	eax, eax
		jz	$err$84

loc_1368:				; CODE XREF: _BN_mod_exp_recp+2A9j
		test	esi, esi
		jz	loc_1433
		dec	esi
		mov	[esp+0E8h+var_D4], esi
		jmp	short loc_133A
; ---------------------------------------------------------------------------

loc_1377:				; CODE XREF: _BN_mod_exp_recp+2A5j
		mov	ebp, 1
		xor	eax, eax
		mov	edi, ebp
		mov	[esp+0E8h+var_D8], eax
		cmp	[esp+0E8h+var_D0], edi
		jle	short loc_13C9
		mov	ebx, [esp+0E8h+var_C0]
		dec	esi
		nop	dword ptr [eax+eax+00h]

loc_1394:				; CODE XREF: _BN_mod_exp_recp+31Fj
		test	esi, esi
		js	short loc_13C5
		push	esi
		push	ebx
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_13B9
		mov	ecx, edi
		mov	eax, edi
		sub	ecx, [esp+0E8h+var_D8]
		shl	ebp, cl
		or	ebp, 1
		mov	[esp+0E8h+var_D8], eax
		jmp	short loc_13BD
; ---------------------------------------------------------------------------

loc_13B9:				; CODE XREF: _BN_mod_exp_recp+300j
		mov	eax, [esp+0E8h+var_D8]

loc_13BD:				; CODE XREF: _BN_mod_exp_recp+313j
		inc	edi
		dec	esi
		cmp	edi, [esp+0E8h+var_D0]
		jl	short loc_1394

loc_13C5:				; CODE XREF: _BN_mod_exp_recp+2F2j
		mov	ebx, [esp+0E8h+var_BC]

loc_13C9:				; CODE XREF: _BN_mod_exp_recp+2E4j
		cmp	[esp+0E8h+var_C8], 0
		lea	edi, [eax+1]
		jnz	short loc_13F6
		xor	esi, esi
		test	edi, edi
		jle	short loc_13F6

loc_13D9:				; CODE XREF: _BN_mod_exp_recp+350j
		push	[esp+0E8h+var_CC]
		lea	eax, [esp+0ECh+var_B8]
		push	eax
		push	ebx
		push	ebx
		push	ebx
		call	_BN_mod_mul_reciprocal
		add	esp, 14h
		test	eax, eax
		jz	short $err$84
		inc	esi
		cmp	esi, edi
		jl	short loc_13D9

loc_13F6:				; CODE XREF: _BN_mod_exp_recp+32Dj
					; _BN_mod_exp_recp+333j
		push	[esp+0E8h+var_CC]
		lea	eax, [esp+0ECh+var_B8]
		sar	ebp, 1
		push	eax
		push	[esp+ebp*4+0F0h+var_84]
		push	ebx
		push	ebx
		call	_BN_mod_mul_reciprocal
		add	esp, 14h
		test	eax, eax
		jz	short $err$84
		mov	esi, [esp+0E8h+var_D4]
		or	eax, 0FFFFFFFFh
		sub	eax, [esp+0E8h+var_D8]
		mov	edi, 0
		add	esi, eax
		mov	[esp+0E8h+var_C8], edi
		mov	[esp+0E8h+var_D4], esi
		jns	loc_1336

loc_1433:				; CODE XREF: _BN_mod_exp_recp+1ABj
					; _BN_mod_exp_recp+2C6j
		mov	[esp+0E8h+var_C4], 1

$err$84:				; CODE XREF: _BN_mod_exp_recp+127j
					; _BN_mod_exp_recp+12Fj ...
		push	[esp+0E8h+var_CC]
		call	_BN_CTX_end
		lea	eax, [esp+0ECh+var_B8]
		push	eax
		call	_BN_RECP_CTX_free
		mov	ecx, [esp+0F0h+var_4]
		add	esp, 8
		mov	eax, [esp+0E8h+var_C4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
_BN_mod_exp_recp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1470h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_exp_simple
_BN_mod_exp_simple proc	near

var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 0A8h ; '¨'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0A8h+var_4], eax
		mov	eax, [esp+0A8h+arg_4]
		push	ebx
		mov	ebx, [esp+0ACh+arg_0]
		mov	[esp+0ACh+var_A0], eax
		mov	eax, [esp+0ACh+arg_8]
		push	ebp
		mov	ebp, [esp+0B0h+arg_10]
		push	edi
		test	byte ptr [eax+10h], 4
		mov	edi, [esp+0B4h+arg_C]
		mov	[esp+0B4h+var_88], ebx
		mov	[esp+0B4h+var_90], eax
		mov	[esp+0B4h+var_8C], edi
		mov	[esp+0B4h+var_98], ebp
		mov	[esp+0B4h+var_94], 0
		jz	short loc_1503
		push	548h
		push	offset ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; ".\\crypto\\bn\\bn_exp.c"
		push	42h ; 'B'
		push	7Eh ; '~'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+0A8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A8h
		retn
; ---------------------------------------------------------------------------

loc_1503:				; CODE XREF: _BN_mod_exp_simple+5Ej
		push	esi
		push	eax
		call	_BN_num_bits
		add	esp, 4
		mov	[esp+0B8h+var_A4], eax
		test	eax, eax
		jnz	short loc_1551
		cmp	dword ptr [edi+4], 1
		jnz	short loc_153F
		mov	eax, [edi]
		cmp	dword ptr [eax], 1
		jnz	short loc_153F
		cmp	dword ptr [edi+0Ch], 0
		jnz	short loc_153F
		push	0
		push	ebx
		mov	esi, 1
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		jmp	loc_17A0
; ---------------------------------------------------------------------------

loc_153F:				; CODE XREF: _BN_mod_exp_simple+A9j
					; _BN_mod_exp_simple+B0j ...
		push	1
		push	ebx
		call	_BN_set_word
		mov	esi, eax
		add	esp, 8
		jmp	loc_17A0
; ---------------------------------------------------------------------------

loc_1551:				; CODE XREF: _BN_mod_exp_simple+A3j
		push	ebp
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		push	ebp
		mov	[esp+0C4h+var_A8], eax
		call	_BN_CTX_get
		add	esp, 0Ch
		mov	esi, eax
		cmp	[esp+0B8h+var_A8], 0
		mov	[esp+0B8h+var_84], esi
		jz	$err$78
		test	esi, esi
		jz	$err$78
		push	ebp
		push	edi
		push	[esp+0C0h+var_A0]
		push	esi
		call	_BN_nnmod
		add	esp, 10h
		test	eax, eax
		jz	$err$78
		cmp	dword ptr [esi+4], 0
		jnz	short loc_15B0
		push	0
		push	ebx
		call	_BN_set_word
		add	esp, 8
		jmp	loc_1788
; ---------------------------------------------------------------------------

loc_15B0:				; CODE XREF: _BN_mod_exp_simple+12Ej
		mov	eax, [esp+0B8h+var_A4]
		cmp	eax, 29Fh
		jle	short loc_15C5
		mov	[esp+0B8h+var_9C], 6
		jmp	short loc_15FF
; ---------------------------------------------------------------------------

loc_15C5:				; CODE XREF: _BN_mod_exp_simple+149j
		cmp	eax, 0EFh ; 'ï'
		jle	short loc_15D6
		mov	[esp+0B8h+var_9C], 5
		jmp	short loc_15FF
; ---------------------------------------------------------------------------

loc_15D6:				; CODE XREF: _BN_mod_exp_simple+15Aj
		cmp	eax, 4Fh ; 'O'
		jle	short loc_15E5
		mov	[esp+0B8h+var_9C], 4
		jmp	short loc_15FF
; ---------------------------------------------------------------------------

loc_15E5:				; CODE XREF: _BN_mod_exp_simple+169j
		xor	eax, eax
		cmp	[esp+0B8h+var_A4], 17h
		setnle	al
		lea	eax, ds:1[eax*2]
		mov	[esp+0B8h+var_9C], eax
		cmp	eax, 1
		jle	short loc_1667

loc_15FF:				; CODE XREF: _BN_mod_exp_simple+153j
					; _BN_mod_exp_simple+164j ...
		push	ebp
		push	edi
		push	esi
		push	esi
		push	[esp+0C8h+var_A8]
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	$err$78
		mov	ecx, [esp+0B8h+var_9C]
		mov	eax, 1
		dec	ecx
		mov	esi, 1
		shl	eax, cl
		mov	[esp+0B8h+var_A0], eax
		cmp	eax, esi
		jle	short loc_1667

loc_1630:				; CODE XREF: _BN_mod_exp_simple+1F5j
		push	ebp
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+esi*4+0B8h+var_84], eax
		test	eax, eax
		jz	$err$78
		push	ebp
		push	edi
		push	[esp+0C0h+var_A8]
		push	[esp+esi*4+0C4h+var_88]
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	$err$78
		inc	esi
		cmp	esi, [esp+0B8h+var_A0]
		jl	short loc_1630

loc_1667:				; CODE XREF: _BN_mod_exp_simple+18Dj
					; _BN_mod_exp_simple+1BEj
		mov	esi, [esp+0B8h+var_A4]
		push	1
		dec	esi
		mov	[esp+0BCh+var_A0], 1
		push	ebx
		mov	[esp+0C0h+var_A4], esi
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	$err$78
		jmp	short loc_1694
; ---------------------------------------------------------------------------
		align 10h

loc_1690:				; CODE XREF: _BN_mod_exp_simple+312j
		mov	ebp, [esp+0B8h+var_98]

loc_1694:				; CODE XREF: _BN_mod_exp_simple+21Bj
					; _BN_mod_exp_simple+25Dj
		push	esi
		push	[esp+0BCh+var_90]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_16CF
		cmp	[esp+0B8h+var_A0], eax
		jnz	short loc_16C0
		push	ebp
		push	edi
		push	ebx
		push	ebx
		push	ebx
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	$err$78

loc_16C0:				; CODE XREF: _BN_mod_exp_simple+239j
		test	esi, esi
		jz	loc_1788
		dec	esi
		mov	[esp+0B8h+var_A4], esi
		jmp	short loc_1694
; ---------------------------------------------------------------------------

loc_16CF:				; CODE XREF: _BN_mod_exp_simple+233j
		mov	ebp, 1
		xor	eax, eax
		mov	edi, ebp
		mov	[esp+0B8h+var_A8], eax
		cmp	[esp+0B8h+var_9C], edi
		jle	short loc_171C
		mov	ebx, [esp+0B8h+var_90]
		dec	esi

loc_16E7:				; CODE XREF: _BN_mod_exp_simple+2A6j
		test	esi, esi
		js	short loc_1718
		push	esi
		push	ebx
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_170C
		mov	ecx, edi
		mov	eax, edi
		sub	ecx, [esp+0B8h+var_A8]
		shl	ebp, cl
		or	ebp, 1
		mov	[esp+0B8h+var_A8], eax
		jmp	short loc_1710
; ---------------------------------------------------------------------------

loc_170C:				; CODE XREF: _BN_mod_exp_simple+287j
		mov	eax, [esp+0B8h+var_A8]

loc_1710:				; CODE XREF: _BN_mod_exp_simple+29Aj
		inc	edi
		dec	esi
		cmp	edi, [esp+0B8h+var_9C]
		jl	short loc_16E7

loc_1718:				; CODE XREF: _BN_mod_exp_simple+279j
		mov	ebx, [esp+0B8h+var_88]

loc_171C:				; CODE XREF: _BN_mod_exp_simple+270j
		cmp	[esp+0B8h+var_A0], 0
		lea	edi, [eax+1]
		jnz	short loc_174C
		xor	esi, esi
		test	edi, edi
		jle	short loc_174C
		nop	dword ptr [eax+00h]

loc_1730:				; CODE XREF: _BN_mod_exp_simple+2DAj
		push	[esp+0B8h+var_98]
		push	[esp+0BCh+var_8C]
		push	ebx
		push	ebx
		push	ebx
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	short $err$78
		inc	esi
		cmp	esi, edi
		jl	short loc_1730

loc_174C:				; CODE XREF: _BN_mod_exp_simple+2B4j
					; _BN_mod_exp_simple+2BAj
		push	[esp+0B8h+var_98]
		mov	edi, [esp+0BCh+var_8C]
		sar	ebp, 1
		push	edi
		push	[esp+ebp*4+0C0h+var_84]
		push	ebx
		push	ebx
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	short $err$78
		mov	esi, [esp+0B8h+var_A4]
		or	eax, 0FFFFFFFFh
		sub	eax, [esp+0B8h+var_A8]
		add	esi, eax
		mov	[esp+0B8h+var_A0], 0
		mov	[esp+0B8h+var_A4], esi
		jns	loc_1690

loc_1788:				; CODE XREF: _BN_mod_exp_simple+13Bj
					; _BN_mod_exp_simple+252j
		mov	[esp+0B8h+var_94], 1

$err$78:				; CODE XREF: _BN_mod_exp_simple+105j
					; _BN_mod_exp_simple+10Dj ...
		push	[esp+0B8h+var_98]
		call	_BN_CTX_end
		mov	eax, [esp+0BCh+var_94]
		add	esp, 4

loc_17A0:				; CODE XREF: _BN_mod_exp_simple+CAj
					; _BN_mod_exp_simple+DCj
		mov	ecx, [esp+0B8h+var_4]
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A8h
		retn
_BN_mod_exp_simple endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_MOD_EXP_CTIME_COPY_FROM_PREBUF	proc near ; CODE XREF: _BN_mod_exp_mont_consttime+4B2p
					; _BN_mod_exp_mont_consttime+51Cp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 24h ; '$'
		call	__chkstk
		mov	eax, [esp+24h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+2Ch+arg_4]
		mov	ebx, 1
		push	esi
		mov	esi, [esp+30h+arg_10]
		mov	ecx, esi
		shl	ebx, cl
		push	edi
		mov	edi, [esp+34h+arg_8]
		cmp	ebp, [eax+8]
		jle	short loc_17F2
		push	ebp
		push	eax
		call	_bn_expand2
		add	esp, 8

loc_17F2:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+2Aj
		test	eax, eax
		jnz	short loc_17FE
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_17FE:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+38j
		cmp	esi, 3
		jg	short loc_1864
		xor	ecx, ecx
		mov	[esp+34h+arg_4], ecx
		test	ebp, ebp
		jle	loc_19BA

loc_1811:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+A1j
		xor	esi, esi
		xor	eax, eax
		test	ebx, ebx
		jle	short loc_1844
		nop	dword ptr [eax]

loc_181C:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+82j
		mov	ecx, eax
		xor	ecx, [esp+34h+arg_C]
		lea	edx, [ecx-1]
		not	ecx
		shr	edx, 1Fh
		shr	ecx, 1Fh
		and	edx, ecx
		neg	edx
		and	edx, 1
		neg	edx
		and	edx, [edi+eax*4]
		inc	eax
		or	esi, edx
		cmp	eax, ebx
		jl	short loc_181C
		mov	ecx, [esp+34h+arg_4]

loc_1844:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+5Bj
		mov	eax, [esp+34h+arg_0]
		mov	eax, [eax]
		mov	[eax+ecx*4], esi
		inc	ecx
		lea	eax, ds:0[ebx*4]
		mov	[esp+34h+arg_4], ecx
		add	edi, eax
		cmp	ecx, ebp
		jl	short loc_1811
		jmp	loc_19BA
; ---------------------------------------------------------------------------

loc_1864:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+45j
		mov	edx, [esp+34h+arg_C]
		lea	ecx, [esi-2]
		sar	edx, cl
		mov	esi, 1
		shl	esi, cl
		mov	ecx, [esp+34h+arg_C]
		mov	[esp+34h+var_8], esi
		lea	eax, [esi-1]
		and	ecx, eax
		mov	eax, edx
		mov	[esp+34h+var_1C], ecx
		not	eax
		shr	eax, 1Fh
		lea	ecx, [edx-1]
		shr	ecx, 1Fh
		and	ecx, eax
		mov	eax, edx
		neg	ecx
		xor	eax, 1
		and	ecx, 1
		neg	ecx
		mov	[esp+34h+var_C], ecx
		lea	ecx, [eax-1]
		not	eax
		shr	ecx, 1Fh
		shr	eax, 1Fh
		and	ecx, eax
		mov	eax, edx
		neg	ecx
		xor	eax, 2
		and	ecx, 1
		xor	edx, 3
		neg	ecx
		mov	[esp+34h+var_10], ecx
		lea	ecx, [eax-1]
		not	eax
		shr	eax, 1Fh
		shr	ecx, 1Fh
		and	ecx, eax
		lea	eax, [edx-1]
		shr	eax, 1Fh
		neg	ecx
		not	edx
		and	ecx, 1
		shr	edx, 1Fh
		neg	ecx
		and	eax, edx
		mov	[esp+34h+var_14], ecx
		neg	eax
		xor	ecx, ecx
		and	eax, 1
		mov	[esp+34h+var_20], ecx
		neg	eax
		mov	[esp+34h+var_18], eax
		test	ebp, ebp
		jle	loc_19BA
		shl	ebx, 2
		mov	[esp+34h+var_4], ebx
		nop	dword ptr [eax]

loc_190C:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+1F8j
		xor	edx, edx
		xor	ebx, ebx
		mov	[esp+34h+arg_10], edx
		test	esi, esi
		jle	loc_19A0
		lea	eax, [esi+esi*2]
		lea	ecx, [edi+esi*8]
		lea	eax, [edi+eax*4]
		mov	[esp+34h+var_24], ecx
		lea	ebp, [edi+esi*4]
		mov	[esp+34h+arg_8], eax

loc_1930:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+1DAj
		mov	eax, [eax]
		lea	ebp, [ebp+4]
		mov	ecx, [ecx]
		mov	esi, ebx
		and	ecx, [esp+34h+var_14]
		and	eax, [esp+34h+var_18]
		xor	esi, [esp+34h+var_1C]
		or	ecx, eax
		mov	edx, [ebp-4]
		and	edx, [esp+34h+var_10]
		mov	eax, [edi+ebx*4]
		or	edx, ecx
		and	eax, [esp+34h+var_C]
		lea	ecx, [esi-1]
		shr	ecx, 1Fh
		not	esi
		shr	esi, 1Fh
		or	eax, edx
		mov	edx, [esp+34h+arg_10]
		and	ecx, esi
		mov	esi, [esp+34h+var_8]
		neg	ecx
		and	ecx, 1
		inc	ebx
		neg	ecx
		and	ecx, eax
		mov	eax, [esp+34h+arg_8]
		or	edx, ecx
		add	eax, 4
		mov	ecx, [esp+34h+var_24]
		add	ecx, 4
		mov	[esp+34h+arg_10], edx
		mov	[esp+34h+arg_8], eax
		mov	[esp+34h+var_24], ecx
		cmp	ebx, esi
		jl	short loc_1930
		mov	ebp, [esp+34h+arg_4]
		mov	ecx, [esp+34h+var_20]

loc_19A0:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+15Aj
		mov	eax, [esp+34h+arg_0]
		add	edi, [esp+34h+var_4]
		mov	eax, [eax]
		mov	[eax+ecx*4], edx
		inc	ecx
		mov	[esp+34h+var_20], ecx
		cmp	ecx, ebp
		jl	loc_190C

loc_19BA:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+4Fj
					; _MOD_EXP_CTIME_COPY_FROM_PREBUF+A3j ...
		mov	esi, [esp+34h+arg_0]
		mov	[esi+4], ebp
		test	ebp, ebp
		jle	short loc_19DE
		mov	ecx, [esi]
		add	ecx, 0FFFFFFFCh
		lea	ecx, [ecx+ebp*4]

loc_19CD:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+21Dj
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_19DB
		dec	ebp
		test	ebp, ebp
		jg	short loc_19CD

loc_19DB:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+218j
		mov	[esi+4], ebp

loc_19DE:				; CODE XREF: _MOD_EXP_CTIME_COPY_FROM_PREBUF+207j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 24h
		retn
_MOD_EXP_CTIME_COPY_FROM_PREBUF	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 19ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_MOD_EXP_CTIME_COPY_TO_PREBUF proc near	; CODE XREF: _BN_mod_exp_mont_consttime+3ABp
					; _BN_mod_exp_mont_consttime+3C8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	ecx, [esp+arg_10]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ebp, 1
		shl	ebp, cl
		cmp	edi, [ebx+4]
		cmovg	edi, [ebx+4]
		xor	ecx, ecx
		test	edi, edi
		jle	short loc_1A2D
		mov	edx, [esp+0Ch+arg_C]
		mov	eax, [esp+0Ch+arg_8]
		push	esi
		shl	ebp, 2
		lea	esi, [eax+edx*4]

loc_1A1E:				; CODE XREF: _MOD_EXP_CTIME_COPY_TO_PREBUF+3Ej
		mov	edx, [ebx]
		mov	edx, [edx+ecx*4]
		inc	ecx
		mov	[esi], edx
		add	esi, ebp
		cmp	ecx, edi
		jl	short loc_1A1E
		pop	esi

loc_1A2D:				; CODE XREF: _MOD_EXP_CTIME_COPY_TO_PREBUF+21j
		pop	edi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_MOD_EXP_CTIME_COPY_TO_PREBUF endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A38h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_constant_time_eq proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		xor	ecx, [esp+arg_4]
		lea	eax, [ecx-1]
		not	ecx
		shr	eax, 1Fh
		shr	ecx, 1Fh
		and	eax, ecx
		neg	eax
		retn
_constant_time_eq endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A50h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_constant_time_eq_int proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		xor	ecx, [esp+arg_4]
		lea	eax, [ecx-1]
		not	ecx
		shr	eax, 1Fh
		shr	ecx, 1Fh
		and	eax, ecx
		neg	eax
		retn
_constant_time_eq_int endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A68h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_constant_time_is_zero proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		lea	eax, [ecx-1]
		not	ecx
		shr	eax, 1Fh
		shr	ecx, 1Fh
		and	eax, ecx
		neg	eax
		retn
_constant_time_is_zero endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A7Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_constant_time_msb proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		shr	eax, 1Fh
		neg	eax
		retn
_constant_time_msb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A88h
; COMDAT (pick any)
		public ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
; `string'
??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ db '.\crypto\bn\bn_exp.c',0
					; DATA XREF: _BN_exp+22o
					; _BN_mod_exp_mont+52Fo ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1AA0h
; COMDAT (pick any)
		public __xmm@ffffffffffffffffffffffffffffffff
__xmm@ffffffffffffffffffffffffffffffff xmmword 0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFh
					; DATA XREF: _BN_mod_exp_mont:loc_4E3r
					; _BN_mod_exp_mont_consttime+2A5r
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _BN_mod_exp_mont_consttime+18Bp
		extrn _CRYPTO_free:near	; CODE XREF: _BN_mod_exp_mont_consttime+59Bp
		extrn _OPENSSL_cleanse:near ; CODE XREF: _BN_mod_exp_mont_consttime+58Bp
		extrn _ERR_put_error:near ; CODE XREF: _BN_exp+2Dp
					; _BN_mod_exp_mont+53Ap ...
		extrn _BN_value_one:near ; CODE	XREF: _BN_mod_exp_mont+405p
					; _BN_mod_exp_mont_consttime+30Ep
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_exp+45p
					; _BN_mod_exp_mont+DEp	...
		extrn _BN_CTX_get:near	; CODE XREF: _BN_exp+5Cp _BN_exp+67p ...
		extrn _BN_CTX_end:near	; CODE XREF: _BN_exp+128p
					; _BN_mod_exp_mont+51Cp ...
		extrn _BN_num_bits:near	; CODE XREF: _BN_exp+97p
					; _BN_mod_exp_mont+92p	...
		extrn _BN_copy:near	; CODE XREF: _BN_exp+86p _BN_exp+B5p ...
		extrn _BN_mul:near	; CODE XREF: _BN_exp+FAp
		extrn _BN_sqr:near	; CODE XREF: _BN_exp+D9p
		extrn _BN_div:near	; CODE XREF: _BN_mod_exp_mont_consttime+371p
					; _BN_mod_exp_mont_word+1EAp ...
		extrn _BN_nnmod:near	; CODE XREF: _BN_mod_exp_mont+17Fp
					; _BN_mod_exp_recp+18Ap ...
		extrn _BN_mod_mul:near	; CODE XREF: _BN_mod_exp_simple+197p
					; _BN_mod_exp_simple+1E0p ...
		extrn _BN_mul_word:near	; CODE XREF: _BN_mod_exp_mont_word:loc_EBDp
					; _BN_mod_exp_mont_word:loc_F82p ...
		extrn _BN_set_word:near	; CODE XREF: _BN_exp+BFp
					; _BN_mod_exp_mont+BCp	...
		extrn _BN_is_bit_set:near ; CODE XREF: _BN_exp+EAp
					; _BN_mod_exp_mont+3C5p ...
		extrn _BN_ucmp:near	; CODE XREF: _BN_mod_exp_mont+162p
					; _BN_mod_exp_mont_consttime+335p
		extrn _BN_MONT_CTX_new:near ; CODE XREF: _BN_mod_exp_mont:loc_2D0p
					; _BN_mod_exp_mont_consttime:loc_7D9p ...
		extrn _BN_mod_mul_montgomery:near ; CODE XREF: _BN_mod_exp_mont+1BEp
					; _BN_mod_exp_mont+227p ...
		extrn _BN_from_montgomery:near ; CODE XREF: _BN_mod_exp_mont+4E5p
					; _BN_mod_exp_mont_consttime+553p ...
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _BN_mod_exp_mont+513p
					; _BN_mod_exp_mont_consttime+578p ...
		extrn _BN_MONT_CTX_set:near ; CODE XREF: _BN_mod_exp_mont+146p
					; _BN_mod_exp_mont_consttime+F0p ...
		extrn _BN_RECP_CTX_init:near ; CODE XREF: _BN_mod_exp_recp+13Ap
		extrn _BN_RECP_CTX_free:near ; CODE XREF: _BN_mod_exp_recp+3A5p
		extrn _BN_RECP_CTX_set:near ; CODE XREF: _BN_mod_exp_recp+173p
		extrn _BN_mod_mul_reciprocal:near ; CODE XREF: _BN_mod_exp_recp+210p
					; _BN_mod_exp_recp+257p ...
		extrn _bn_expand2:near	; CODE XREF: _BN_mod_exp_mont+2BDp
					; _MOD_EXP_CTIME_COPY_FROM_PREBUF+2Ep
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BN_mod_exp_mont+551p
					; _BN_mod_exp_mont_consttime+94p ...
		extrn __alloca_probe_16:near ; CODE XREF: _BN_mod_exp_mont_consttime+171p
		extrn __chkstk:near	; CODE XREF: _BN_exp+5p
					; _BN_mod_exp_mont+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _BN_mod_exp_mont_consttime+1B3p
		extrn ___security_cookie:near ;	DATA XREF: _BN_mod_exp_mont+Ar
					; _BN_mod_exp_mont_consttime+Dr ...


		end
