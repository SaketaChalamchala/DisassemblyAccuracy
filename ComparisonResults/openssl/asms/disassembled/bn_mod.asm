;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A69DFB49D020EB065AA7DDE07D4A0E5F
; Input	CRC32 :	EC306DC4

; File Name   :	C:\compspace\Diff\openssl\obj\bn_mod.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_add
_BN_mod_add	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	[esp+4+arg_8]
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	esi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1C
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1C:					; CODE XREF: _BN_mod_add+18j
		push	edi
		push	[esp+8+arg_10]
		mov	edi, [esp+0Ch+arg_C]
		push	edi
		push	esi
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jnz	short loc_39
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_39:					; CODE XREF: _BN_mod_add+34j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_47
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_47:					; CODE XREF: _BN_mod_add+3Dj
		cmp	dword ptr [edi+0Ch], 0
		mov	ecx, offset _BN_sub
		push	edi
		push	esi
		mov	eax, offset _BN_add
		push	esi
		cmovnz	eax, ecx
		call	eax
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
_BN_mod_add	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_add_quick
_BN_mod_add_quick proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_8]
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	esi
		call	_BN_uadd
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_80
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_80:					; CODE XREF: _BN_mod_add_quick+18j
		push	[esp+4+arg_C]
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_A1
		push	[esp+4+arg_C]
		push	esi
		push	esi
		call	_BN_usub
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A1:					; CODE XREF: _BN_mod_add_quick+2Bj
		mov	eax, 1
		pop	esi
		retn
_BN_mod_add_quick endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_lshift
_BN_mod_lshift	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		push	[esp+0Ch+arg_10]
		mov	edi, [esp+10h+arg_C]
		xor	esi, esi
		push	edi
		push	[esp+14h+arg_4]
		push	ebx
		push	esi
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	short loc_131
		cmp	[ebx+0Ch], esi
		jz	short loc_ED
		cmp	[edi+0Ch], esi
		mov	ecx, offset _BN_sub
		push	edi
		push	ebx
		mov	eax, offset _BN_add
		push	ebx
		cmovnz	eax, ecx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_131

loc_ED:					; CODE XREF: _BN_mod_lshift+27j
		cmp	[edi+0Ch], esi
		jz	short loc_108
		push	edi
		call	_BN_dup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_131
		mov	dword ptr [esi+0Ch], 0

loc_108:				; CODE XREF: _BN_mod_lshift+48j
		test	esi, esi
		cmovnz	edi, esi
		push	edi
		push	[esp+10h+arg_8]
		push	ebx
		push	ebx
		call	_BN_mod_lshift_quick
		add	esp, 10h
		mov	edi, eax
		test	esi, esi
		jz	short loc_12B
		push	esi
		call	_BN_free
		add	esp, 4

loc_12B:				; CODE XREF: _BN_mod_lshift+78j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_131:				; CODE XREF: _BN_mod_lshift+22j
					; _BN_mod_lshift+43j ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_mod_lshift	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_lshift1
_BN_mod_lshift1	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_4]
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_BN_lshift1
		add	esp, 8
		test	eax, eax
		jnz	short loc_150
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_150:				; CODE XREF: _BN_mod_lshift1+14j
		push	edi
		push	[esp+8+arg_C]
		mov	edi, [esp+0Ch+arg_8]
		push	edi
		push	esi
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jnz	short loc_16D
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_16D:				; CODE XREF: _BN_mod_lshift1+30j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_17B
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_17B:				; CODE XREF: _BN_mod_lshift1+39j
		cmp	dword ptr [edi+0Ch], 0
		mov	ecx, offset _BN_sub
		push	edi
		push	esi
		mov	eax, offset _BN_add
		push	esi
		cmovnz	eax, ecx
		call	eax
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
_BN_mod_lshift1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 198h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_lshift1_quick
_BN_mod_lshift1_quick proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	[esp+4+arg_4]
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_BN_lshift1
		add	esp, 8
		test	eax, eax
		jnz	short loc_1B0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1B0:				; CODE XREF: _BN_mod_lshift1_quick+14j
		push	[esp+4+arg_8]
		push	esi
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		js	short loc_1D1
		push	[esp+4+arg_8]
		push	esi
		push	esi
		call	_BN_sub
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D1:				; CODE XREF: _BN_mod_lshift1_quick+27j
		mov	eax, 1
		pop	esi
		retn
_BN_mod_lshift1_quick endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_lshift_quick
_BN_mod_lshift_quick proc near		; CODE XREF: _BN_mod_lshift+6Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	edi, eax
		jz	short loc_1F5
		push	eax
		push	edi
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jnz	short loc_1F5
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1F5:				; CODE XREF: _BN_mod_lshift_quick+Bj
					; _BN_mod_lshift_quick+19j
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		push	esi
		test	ebx, ebx
		jle	short loc_26F
		mov	ebp, [esp+10h+arg_C]
		nop	dword ptr [eax+00h]

loc_208:				; CODE XREF: _BN_mod_lshift_quick+95j
		push	edi
		call	_BN_num_bits
		push	ebp
		mov	esi, eax
		call	_BN_num_bits
		mov	ebp, eax
		add	esp, 8
		sub	ebp, esi
		js	short loc_279
		cmp	ebp, ebx
		cmovg	ebp, ebx
		test	ebp, ebp
		jz	short loc_23B
		push	ebp
		push	edi
		push	edi
		call	_BN_lshift
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_291
		sub	ebx, ebp
		jmp	short loc_24A
; ---------------------------------------------------------------------------

loc_23B:				; CODE XREF: _BN_mod_lshift_quick+4Ej
		push	edi
		push	edi
		call	_BN_lshift1
		add	esp, 8
		test	eax, eax
		jz	short loc_291
		dec	ebx

loc_24A:				; CODE XREF: _BN_mod_lshift_quick+61j
		mov	ebp, [esp+10h+arg_C]
		push	ebp
		push	edi
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		js	short loc_26B
		push	ebp
		push	edi
		push	edi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_291

loc_26B:				; CODE XREF: _BN_mod_lshift_quick+82j
		test	ebx, ebx
		jg	short loc_208

loc_26F:				; CODE XREF: _BN_mod_lshift_quick+26j
		pop	esi
		pop	ebp
		pop	ebx
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_279:				; CODE XREF: _BN_mod_lshift_quick+45j
		push	121h
		push	offset ??_C@_0BF@IHGKFBOP@?4?2crypto?2bn?2bn_mod?4c?$AA@ ; ".\\crypto\\bn\\bn_mod.c"
		push	6Eh ; 'n'
		push	77h ; 'w'
		push	3
		call	_ERR_put_error
		add	esp, 14h

loc_291:				; CODE XREF: _BN_mod_lshift_quick+5Dj
					; _BN_mod_lshift_quick+6Fj ...
		pop	esi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
_BN_mod_lshift_quick endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 298h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_mul
_BN_mod_mul	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_10]
		xor	ebx, ebx
		push	edi
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$12
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		push	esi
		cmp	eax, ecx
		jnz	short loc_2CF
		push	eax
		push	edi
		call	_BN_sqr
		add	esp, 0Ch
		jmp	short loc_2DA
; ---------------------------------------------------------------------------

loc_2CF:				; CODE XREF: _BN_mod_mul+29j
		push	ecx
		push	eax
		push	edi
		call	_BN_mul
		add	esp, 10h

loc_2DA:				; CODE XREF: _BN_mod_mul+35j
		test	eax, eax
		jz	short $err$12
		push	esi
		push	[esp+10h+arg_C]
		push	edi
		push	[esp+18h+arg_0]
		call	_BN_nnmod
		add	esp, 10h
		mov	ecx, 1
		test	eax, eax
		cmovnz	ebx, ecx

$err$12:				; CODE XREF: _BN_mod_mul+1Cj
					; _BN_mod_mul+44j
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
_BN_mod_mul	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_sqr
_BN_mod_sqr	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	esi
		call	_BN_sqr
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_328
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_328:				; CODE XREF: _BN_mod_sqr+18j
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	esi
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		pop	esi
		retn
_BN_mod_sqr	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 340h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_sub
_BN_mod_sub	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	[esp+4+arg_8]
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	esi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_35C
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_35C:				; CODE XREF: _BN_mod_sub+18j
		push	edi
		push	[esp+8+arg_10]
		mov	edi, [esp+0Ch+arg_C]
		push	edi
		push	esi
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jnz	short loc_379
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_379:				; CODE XREF: _BN_mod_sub+34j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_387
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_387:				; CODE XREF: _BN_mod_sub+3Dj
		cmp	dword ptr [edi+0Ch], 0
		mov	ecx, offset _BN_sub
		push	edi
		push	esi
		mov	eax, offset _BN_add
		push	esi
		cmovnz	eax, ecx
		call	eax
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
_BN_mod_sub	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_sub_quick
_BN_mod_sub_quick proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_8]
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	esi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_3C0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3C0:				; CODE XREF: _BN_mod_sub_quick+18j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_3D6
		push	[esp+4+arg_C]
		push	esi
		push	esi
		call	_BN_add
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3D6:				; CODE XREF: _BN_mod_sub_quick+20j
		mov	eax, 1
		pop	esi
		retn
_BN_mod_sub_quick endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_nnmod
_BN_nnmod	proc near		; CODE XREF: _BN_mod_mul+50p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	[esp+8+arg_C]
		mov	edi, [esp+0Ch+arg_8]
		push	edi
		push	[esp+10h+arg_4]
		push	esi
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jnz	short loc_405
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_405:				; CODE XREF: _BN_nnmod+20j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_413
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_413:				; CODE XREF: _BN_nnmod+29j
		cmp	dword ptr [edi+0Ch], 0
		mov	ecx, offset _BN_sub
		push	edi
		push	esi
		mov	eax, offset _BN_add
		push	esi
		cmovnz	eax, ecx
		call	eax
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
_BN_nnmod	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 430h
; COMDAT (pick any)
		public ??_C@_0BF@IHGKFBOP@?4?2crypto?2bn?2bn_mod?4c?$AA@
; `string'
??_C@_0BF@IHGKFBOP@?4?2crypto?2bn?2bn_mod?4c?$AA@ db '.\crypto\bn\bn_mod.c',0
					; DATA XREF: _BN_mod_lshift_quick+A6o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _BN_mod_lshift_quick+B1p
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_mod_mul+Ap
		extrn _BN_CTX_get:near	; CODE XREF: _BN_mod_mul+10p
		extrn _BN_CTX_end:near	; CODE XREF: _BN_mod_mul+63p
		extrn _BN_num_bits:near	; CODE XREF: _BN_mod_lshift_quick+31p
					; _BN_mod_lshift_quick+39p
		extrn _BN_copy:near	; CODE XREF: _BN_mod_lshift_quick+Fp
		extrn _BN_sub:near	; CODE XREF: _BN_mod_lshift1_quick+2Fp
					; _BN_mod_lshift_quick+87p ...
		extrn _BN_usub:near	; CODE XREF: _BN_mod_add_quick+33p
		extrn _BN_uadd:near	; CODE XREF: _BN_mod_add_quick+Ep
		extrn _BN_add:near	; CODE XREF: _BN_mod_add+Ep
					; _BN_mod_sub_quick+28p
					; DATA XREF: ...
		extrn _BN_mul:near	; CODE XREF: _BN_mod_mul+3Ap
		extrn _BN_sqr:near	; CODE XREF: _BN_mod_mul+2Dp
					; _BN_mod_sqr+Ep
		extrn _BN_div:near	; CODE XREF: _BN_mod_add+2Ap
					; _BN_mod_lshift+18p ...
		extrn _BN_cmp:near	; CODE XREF: _BN_mod_lshift1_quick+1Dp
					; _BN_mod_lshift_quick+78p
		extrn _BN_free:near	; CODE XREF: _BN_mod_lshift+7Bp
		extrn _BN_lshift:near	; CODE XREF: _BN_mod_lshift_quick+53p
		extrn _BN_lshift1:near	; CODE XREF: _BN_mod_lshift1+Ap
					; _BN_mod_lshift1_quick+Ap ...
		extrn _BN_dup:near	; CODE XREF: _BN_mod_lshift+4Bp
		extrn _BN_ucmp:near	; CODE XREF: _BN_mod_add_quick+21p


		end
