;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	60CDBCABF494DB26B2F8D0014E1E1DED
; Input	CRC32 :	B8635E6D

; File Name   :	C:\compspace\Diff\openssl\obj\x_sig.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_X509_SIG_seq_tt dd 3 dup(0)		; DATA XREF: .rdata:00000030o
		dd offset ??_C@_05CJCEEADM@algor?$AA@ ;	"algor"
		dd offset _X509_ALGOR_it
		dd 2 dup(0)
		dd 4
		dd offset ??_C@_06IJPNAHC@digest?$AA@ ;	"digest"
		dd offset _ASN1_OCTET_STRING_it
; `X509_SIG_it'::`2'::local_it
?local_it@?1??X509_SIG_it@@9@9 dd 1, 10h ; DATA	XREF: _X509_SIG_freeo
					; _X509_SIG_ito ...
		dd offset _X509_SIG_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_08DFMPDBMK@X509_SIG?$AA@ ; "X509_SIG"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
; COMDAT (pick any)
		public ??_C@_05CJCEEADM@algor?$AA@
; `string'
??_C@_05CJCEEADM@algor?$AA@ db 'algor',0 ; DATA XREF: .rdata:0000000Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
; COMDAT (pick any)
		public ??_C@_06IJPNAHC@digest?$AA@
; `string'
??_C@_06IJPNAHC@digest?$AA@ db 'digest',0 ; DATA XREF: .rdata:00000020o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
; COMDAT (pick any)
		public ??_C@_08DFMPDBMK@X509_SIG?$AA@
; `string'
??_C@_08DFMPDBMK@X509_SIG?$AA@ db 'X509_SIG',0 ; DATA XREF: .rdata:00000040o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_SIG_free
_X509_SIG_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_SIG_it@@9@9 ;	`X509_SIG_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_SIG_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_SIG_it
_X509_SIG_it	proc near
		mov	eax, offset ?local_it@?1??X509_SIG_it@@9@9 ; `X509_SIG_it'::`2'::local_it
		retn
_X509_SIG_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_SIG_new
_X509_SIG_new	proc near
		push	offset ?local_it@?1??X509_SIG_it@@9@9 ;	`X509_SIG_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_SIG_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_SIG
_d2i_X509_SIG	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_SIG_it@@9@9 ;	`X509_SIG_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_SIG	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_SIG
_i2d_X509_SIG	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_SIG_it@@9@9 ;	`X509_SIG_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_SIG	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_OCTET_STRING_it:near ; DATA	XREF: .rdata:00000024o
		extrn _X509_ALGOR_it:near ; DATA XREF: .rdata:00000010o
		extrn _ASN1_item_new:near ; CODE XREF: _X509_SIG_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_X509_SIG_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_X509_SIG+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_X509_SIG+Dp


		end
