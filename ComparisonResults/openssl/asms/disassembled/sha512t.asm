;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4ACC822CD66E85D53A1BF0F6DC9048C2
; Input	CRC32 :	D13B5482

; File Name   :	C:\compspace\Diff\openssl\obj\sha512t.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		public _app_c1
_app_c1		dd 0A135AFDDh, 0BA7A6193h, 497341CCh, 314120AEh, 4EFAE612h
					; DATA XREF: _main+7Fo
		dd 0A27EA989h, 0E6EE9E0Ah, 9AD3554Bh, 2A999221h, 0A8C14F27h
		dd 233CBA36h, 0BDEBFEA3h, 23444D45h, 0EE83C64h,	4FC99A2Ah
		dd 9FA44CA5h
		public _app_c2
_app_c2		dd 759B958Eh, 0DA13E3DAh, 28F7F48Ch, 3F14FC14h,	0C679778Fh
					; DATA XREF: _main+EAo
		dd 0A17F9FEBh, 0ADAE9972h, 189088B6h, 9E281D50h, 0E4F70049h
		dd 0DE991B33h, 3A43B5C4h, 0EE29D3C7h, 5426DDB6h, 5BE5965Eh
		dd 9E94B87h
		public _app_c3
_app_c3		dd 3D4818E7h, 6469E70Ch, 0C7422E4Eh, 63B415BCh,	0B1981F8Eh
					; DATA XREF: _main+199o
		dd 2844203Bh, 3A83256h,	0EB73A9AFh, 44F20FDEh, 0AA67E87h
		dd 2C43B04Ch, 1BC377E5h, 5C9C00EBh, 2EAA492Ch, 17B2AD4Eh
		dd 9BC08CADh
		public _app_d1
_app_d1		dd 3F7500CBh, 8B5EA345h, 693DA0B5h, 750C69Ah, 0AB322C27h
					; DATA XREF: _main+227o
		dd 63D1DE0Eh, 5A608B1Ah, 0ED5BFF43h, 2B078680h,	23CCE7A1h
		dd 0A1ECBA58h, 0A725C834h
		public _app_d2
_app_d2		dd 330C3309h, 0E84711F7h, 0C72F193Dh, 471BCD82h, 171B1153h
					; DATA XREF: _main+284o
		dd 0D2053B3Bh, 8680A02Fh, 12F7B0E3h, 1AC7C7FCh,	0B92D7E55h
		dd 0FAE9C366h, 39607491h
		public _app_d3
_app_d3		dd 9180E9Dh, 0CB746471h, 4E836E08h, 1C4A0A31h, 9C9E14EDh
					; DATA XREF: _main+32Bo
		dd 5248F200h, 0C5CE7279h, 5B2A4C70h, 0DCB3B807h, 0EBC4EC38h
		dd 0D8DD97AEh, 85893D7Fh
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 150h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 158h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _main+55p	_main+B3p ...

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_5C		= byte ptr -5Ch
var_44		= byte ptr -44h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 5Ch ; '\'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+5Ch+var_4], eax
		push	esi
		push	edi
		push	offset ??_C@_0BA@MIDPHNKH@OPENSSL_ia32cap?$AA@ ; "OPENSSL_ia32cap"
		call	dword ptr ds:__imp__getenv
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1E2
		call	_OPENSSL_ia32cap_loc
		push	0		; Radix
		push	0		; EndPtr
		push	edi		; Str
		mov	esi, eax
		call	dword ptr ds:__imp__strtoul
		add	esp, 0Ch
		mov	[esi], eax

loc_1E2:				; CODE XREF: _main+29j
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_0BB@KNJGJHHF@Testing?5SHA?9512?5?$AA@ ; "Testing SHA-512 "
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		push	0
		call	_EVP_sha512
		push	eax
		push	0
		lea	eax, [esp+70h+var_44]
		push	eax
		push	3
		push	offset ??_C@_03FIKCJHKP@abc?$AA@ ; `string'
		call	_EVP_Digest
		add	esp, 18h
		lea	ecx, [esp+64h+var_44]
		mov	edx, offset _app_c1
		mov	edi, 3Ch ; '<'
		nop	dword ptr [eax+00000000h]

loc_230:				; CODE XREF: _main+A3j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_58A
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_230
		push	ebx
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		mov	ebx, dword ptr ds:__imp__fflush
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		push	0
		call	_EVP_sha512
		push	eax
		push	0
		lea	eax, [esp+74h+var_44]
		push	eax
		push	70h ; 'p'
		push	offset ??_C@_0HB@CCOEPGHF@abcdefghbcdefghicdefghijdefghijk@ ; "abcdefghbcdefghicdefghijdefghijkefghijk"...
		call	_EVP_Digest
		add	esp, 18h
		lea	ecx, [esp+68h+var_44]
		mov	edx, offset _app_c2
		mov	edi, 3Ch ; '<'

loc_294:				; CODE XREF: _main+107j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_554
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_294
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+78h+var_5C]
		push	eax
		call	_EVP_MD_CTX_init
		add	esp, 14h
		push	0
		call	_EVP_sha512
		push	eax
		lea	eax, [esp+70h+var_5C]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		mov	edi, 0F4240h
		nop	dword ptr [eax+00000000h]

loc_2F0:				; CODE XREF: _main+175j
		mov	eax, 120h
		cmp	edi, eax
		cmovl	eax, edi
		push	eax
		lea	eax, [esp+6Ch+var_5C]
		push	offset ??_C@_0BCB@NLPKPNBG@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@ ; "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"...
		push	eax
		call	_EVP_DigestUpdate
		sub	edi, 120h
		add	esp, 0Ch
		test	edi, edi
		jg	short loc_2F0
		push	0
		lea	eax, [esp+6Ch+var_44]
		push	eax
		lea	eax, [esp+70h+var_5C]
		push	eax
		call	_EVP_DigestFinal_ex
		lea	eax, [esp+74h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 10h
		lea	ecx, [esp+68h+var_44]
		mov	edx, offset _app_c3
		mov	edi, 3Ch ; '<'

loc_343:				; CODE XREF: _main+1B6j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_543
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_343
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		push	offset ??_C@_09MCFGFJHJ@?5passed?4?6?$AA@ ; " passed.\n"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		push	offset ??_C@_0BB@FLFDFBON@Testing?5SHA?9384?5?$AA@ ; "Testing SHA-384 "
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		push	0
		call	_EVP_sha384
		push	eax
		push	0
		lea	eax, [esp+74h+var_44]
		push	eax
		push	3
		push	offset ??_C@_03FIKCJHKP@abc?$AA@ ; `string'
		call	_EVP_Digest
		add	esp, 18h
		lea	ecx, [esp+68h+var_44]
		mov	edx, offset _app_d1
		mov	edi, 2Ch ; ','

loc_3D1:				; CODE XREF: _main+244j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_532
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_3D1
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		push	0
		call	_EVP_sha384
		push	eax
		push	0
		lea	eax, [esp+74h+var_44]
		push	eax
		push	70h ; 'p'
		push	offset ??_C@_0HB@CCOEPGHF@abcdefghbcdefghicdefghijdefghijk@ ; "abcdefghbcdefghicdefghijdefghijkefghijk"...
		call	_EVP_Digest
		add	esp, 18h
		lea	ecx, [esp+68h+var_44]
		mov	edx, offset _app_d2
		mov	edi, 2Ch ; ','
		xchg	ax, ax

loc_430:				; CODE XREF: _main+2A3j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_554
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_430
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+78h+var_5C]
		push	eax
		call	_EVP_MD_CTX_init
		add	esp, 14h
		push	0
		call	_EVP_sha384
		push	eax
		lea	eax, [esp+70h+var_5C]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		mov	edi, 0F4240h

loc_485:				; CODE XREF: _main+307j
		mov	eax, 40h ; '@'
		cmp	edi, eax
		cmovl	eax, edi
		push	eax
		lea	eax, [esp+6Ch+var_5C]
		push	offset ??_C@_0EB@DGHFABGM@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@ ; "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"...
		push	eax
		call	_EVP_DigestUpdate
		sub	edi, 40h ; '@'
		add	esp, 0Ch
		test	edi, edi
		jg	short loc_485
		push	0
		lea	eax, [esp+6Ch+var_44]
		push	eax
		lea	eax, [esp+70h+var_5C]
		push	eax
		call	_EVP_DigestFinal_ex
		lea	eax, [esp+74h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 10h
		lea	ecx, [esp+68h+var_44]
		mov	edx, offset _app_d3
		mov	edi, 2Ch ; ','

loc_4D5:				; CODE XREF: _main+344j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_543
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_4D5
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		push	offset ??_C@_09MCFGFJHJ@?5passed?4?6?$AA@ ; " passed.\n"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		mov	ecx, [esp+5Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------

loc_532:				; CODE XREF: _main+235j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@FPGLGKP@?6TEST?51?5of?53?5failed?4?6?$AA@ ; "\nTEST 1 of 3 failed.\n"
		jmp	short loc_563
; ---------------------------------------------------------------------------

loc_543:				; CODE XREF: _main+1A7j _main+339j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@ICFGJDMM@?6TEST?53?5of?53?5failed?4?6?$AA@ ; "\nTEST 3	of 3 failed.\n"
		jmp	short loc_563
; ---------------------------------------------------------------------------

loc_554:				; CODE XREF: _main+F8j	_main+294j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@CMDOACFN@?6TEST?52?5of?53?5failed?4?6?$AA@ ; "\nTEST 2	of 3 failed.\n"

loc_563:				; CODE XREF: _main+3A1j _main+3B2j
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		mov	ecx, [esp+5Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------

loc_58A:				; CODE XREF: _main+94j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	dword ptr ds:__imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@FPGLGKP@?6TEST?51?5of?53?5failed?4?6?$AA@ ; "\nTEST 1 of 3 failed.\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		mov	ecx, [esp+6Ch+var_4]
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C4h
; COMDAT (pick any)
		public ??_C@_0BA@MIDPHNKH@OPENSSL_ia32cap?$AA@
; char `string'[]
??_C@_0BA@MIDPHNKH@OPENSSL_ia32cap?$AA@	db 'OPENSSL_ia32cap',0 ; DATA XREF: _main+17o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D4h
; COMDAT (pick any)
		public ??_C@_0BB@KNJGJHHF@Testing?5SHA?9512?5?$AA@
; char `string'[]
??_C@_0BB@KNJGJHHF@Testing?5SHA?9512?5?$AA@ db 'Testing SHA-512 ',0 ; DATA XREF: _main+48o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E8h
; COMDAT (pick any)
		public ??_C@_03FIKCJHKP@abc?$AA@
; `string'
??_C@_03FIKCJHKP@abc?$AA@ dd 636261h	; DATA XREF: _main+6Eo	_main+216o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ECh
; COMDAT (pick any)
		public ??_C@_0BG@FPGLGKP@?6TEST?51?5of?53?5failed?4?6?$AA@
; char `string'[]
??_C@_0BG@FPGLGKP@?6TEST?51?5of?53?5failed?4?6?$AA@ db 0Ah ; DATA XREF:	_main+39Co
					; _main+3F8o
		db 'TEST 1 of 3 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 604h
; COMDAT (pick any)
		public ??_C@_01LFCBOECM@?4?$AA@
; char `string'[2]
??_C@_01LFCBOECM@?4?$AA@ db '.',0       ; DATA XREF: _main+A6o _main+109o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 608h
; COMDAT (pick any)
		public ??_C@_0HB@CCOEPGHF@abcdefghbcdefghicdefghijdefghijk@
; `string'
??_C@_0HB@CCOEPGHF@abcdefghbcdefghicdefghijdefghijk@ db	'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoi'
					; DATA XREF: _main+D9o	_main+273o
		db 'jklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 67Ch
; COMDAT (pick any)
		public ??_C@_0BG@CMDOACFN@?6TEST?52?5of?53?5failed?4?6?$AA@
; char `string'[]
??_C@_0BG@CMDOACFN@?6TEST?52?5of?53?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+3BEo
		db 'TEST 2 of 3 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 694h
; COMDAT (pick any)
		public ??_C@_0BCB@NLPKPNBG@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@
; `string'
??_C@_0BCB@NLPKPNBG@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@ db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
					; DATA XREF: _main+15Fo
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B8h
; COMDAT (pick any)
		public ??_C@_0BG@ICFGJDMM@?6TEST?53?5of?53?5failed?4?6?$AA@
; `string'
??_C@_0BG@ICFGJDMM@?6TEST?53?5of?53?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+3ADo
		db 'TEST 3 of 3 failed.',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D0h
; COMDAT (pick any)
		public ??_C@_09MCFGFJHJ@?5passed?4?6?$AA@
; char `string'[]
??_C@_09MCFGFJHJ@?5passed?4?6?$AA@ db ' passed.',0Ah,0 ; DATA XREF: _main+1D4o
					; _main+362o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7DCh
; COMDAT (pick any)
		public ??_C@_0BB@FLFDFBON@Testing?5SHA?9384?5?$AA@
; char `string'[]
??_C@_0BB@FLFDFBON@Testing?5SHA?9384?5?$AA@ db 'Testing SHA-384 ',0 ; DATA XREF: _main+1F0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 7F0h
; COMDAT (pick any)
		public ??_C@_0EB@DGHFABGM@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@
; `string'
??_C@_0EB@DGHFABGM@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@ db	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',0
					; DATA XREF: _main+2F4o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+4Fp
					; _main+ADp ...
; int __cdecl _fflush(FILE *File)
		extrn __imp__fflush:near ; CODE	XREF: _main+C3p _main+120p ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
; unsigned __int32 __cdecl _strtoul(const char *Str, char **EndPtr, int	Radix)
		extrn __imp__strtoul:near ; CODE XREF: _main+37p
					; DATA XREF: _main+37r
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _main+1Cp
					; DATA XREF: _main+1Cr
		extrn _OPENSSL_ia32cap_loc:near	; CODE XREF: _main+2Bp
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _main+127p _main+2C3p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _main+18Dp
					; _main+31Fp
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _main+13Cp
					; _main+2D8p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _main+165p
					; _main+2FAp
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _main+183p
					; _main+315p
		extrn _EVP_Digest:near	; CODE XREF: _main+73p	_main+DEp ...
		extrn _EVP_sha384:near	; CODE XREF: _main+207p _main+264p ...
		extrn _EVP_sha512:near	; CODE XREF: _main+5Fp	_main+CAp ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _main+389p
					; _main+3E1p ...
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
