;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C1B46D4163975CAEAC158C05C661CB2D
; Input	CRC32 :	000C4D2A

; File Name   :	C:\compspace\Diff\openssl\obj\a_dup.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_dup
_ASN1_dup	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+arg_8]
		test	esi, esi
		jnz	short loc_18
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_18:					; CODE XREF: _ASN1_dup+11j
		push	edi
		push	0
		push	esi
		call	[esp+14h+arg_0]
		push	4Ch ; 'L'
		add	eax, 0Ah
		push	offset ??_C@_0BG@LIBBNHAF@?4?2crypto?2asn1?2a_dup?4c?$AA@ ; ".\\crypto\\asn1\\a_dup.c"
		push	eax
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_54
		push	4Eh ; 'N'
		push	offset ??_C@_0BG@LIBBNHAF@?4?2crypto?2asn1?2a_dup?4c?$AA@ ; ".\\crypto\\asn1\\a_dup.c"
		push	41h ; 'A'
		push	6Fh ; 'o'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_54:					; CODE XREF: _ASN1_dup+37j
		lea	eax, [esp+0Ch+arg_8]
		mov	[esp+0Ch+arg_8], edi
		push	eax
		push	esi
		call	[esp+14h+arg_0]
		push	eax
		lea	eax, [esp+18h+var_4]
		mov	[esp+18h+var_4], edi
		push	eax
		push	0
		call	[esp+20h+arg_4]
		push	edi
		mov	esi, eax
		call	_CRYPTO_free
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ecx
		retn
_ASN1_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_dup
_ASN1_item_dup	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_4]
		mov	[esp+4+var_4], 0
		test	eax, eax
		jnz	short loc_9F
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_9F:					; CODE XREF: _ASN1_item_dup+17j
		push	esi
		mov	esi, [esp+8+arg_0]
		lea	ecx, [esp+8+var_4]
		push	esi
		push	ecx
		push	eax
		call	_ASN1_item_i2d
		mov	ecx, [esp+14h+var_4]
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_D8
		push	6Eh ; 'n'
		push	offset ??_C@_0BG@LIBBNHAF@?4?2crypto?2asn1?2a_dup?4c?$AA@ ; ".\\crypto\\asn1\\a_dup.c"
		push	41h ; 'A'
		push	0BFh ; '¿'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_D8:					; CODE XREF: _ASN1_item_dup+35j
		push	esi
		push	eax
		lea	eax, [esp+10h+arg_4]
		mov	[esp+10h+arg_4], ecx
		push	eax
		push	0
		call	_ASN1_item_d2i
		push	[esp+18h+var_4]
		mov	esi, eax
		call	_CRYPTO_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	ecx
		retn
_ASN1_item_dup	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 100h
; COMDAT (pick any)
		public ??_C@_0BG@LIBBNHAF@?4?2crypto?2asn1?2a_dup?4c?$AA@
; `string'
??_C@_0BG@LIBBNHAF@?4?2crypto?2asn1?2a_dup?4c?$AA@ db '.\crypto\asn1\a_dup.c',0
					; DATA XREF: _ASN1_dup+25o
					; _ASN1_dup+3Bo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_dup+2Bp
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_dup+75p
					; _ASN1_item_dup+6Cp
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_dup+46p
					; _ASN1_item_dup+47p
		extrn _ASN1_item_d2i:near ; CODE XREF: _ASN1_item_dup+61p
		extrn _ASN1_item_i2d:near ; CODE XREF: _ASN1_item_dup+27p
		extrn __chkstk:near	; CODE XREF: _ASN1_dup+5p
					; _ASN1_item_dup+5p


		end
