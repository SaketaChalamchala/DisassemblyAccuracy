;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3DEEC735159B462898F63273D68151CD
; Input	CRC32 :	05F814A9

; File Name   :	C:\compspace\Diff\openssl\obj\x509_vfy.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _X509_version
_X509_version	db 'X.509 part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CRL_diff
_X509_CRL_diff	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		cmp	dword ptr [ebp+28h], 0
		jnz	loc_31D
		mov	esi, [esp+0Ch+arg_4]
		cmp	dword ptr [esi+28h], 0
		jnz	loc_31D
		cmp	dword ptr [ebp+24h], 0
		jz	loc_2FC
		cmp	dword ptr [esi+24h], 0
		jz	loc_2FC
		mov	eax, [esi]
		push	dword ptr [eax+8]
		mov	eax, [ebp+0]
		push	dword ptr [eax+8]
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jz	short loc_A0
		push	7DDh
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	81h ; 'Å'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_A0:					; CODE XREF: _X509_CRL_diff+51j
		push	5Ah ; 'Z'
		push	esi
		push	ebp
		call	_crl_extension_match
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_CE
		push	7E2h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	6Eh ; 'n'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_CE:					; CODE XREF: _X509_CRL_diff+82j
		push	302h
		push	esi
		push	ebp
		call	_crl_extension_match
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_102
		push	7E6h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	80h ; 'Ä'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_102:				; CODE XREF: _X509_CRL_diff+B3j
		push	dword ptr [ebp+24h]
		push	dword ptr [esi+24h]
		call	_ASN1_INTEGER_cmp
		add	esp, 8
		test	eax, eax
		jg	short loc_135
		push	7EBh
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	84h ; 'Ñ'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_135:				; CODE XREF: _X509_CRL_diff+E6j
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		test	ebx, ebx
		jz	short loc_17C
		push	ebx
		push	ebp
		call	_X509_CRL_verify
		add	esp, 8
		test	eax, eax
		jle	short loc_15A
		push	ebx
		push	esi
		call	_X509_CRL_verify
		add	esp, 8
		test	eax, eax
		jg	short loc_17C

loc_15A:				; CODE XREF: _X509_CRL_diff+11Ej
		push	7F1h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	83h ; 'É'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_17C:				; CODE XREF: _X509_CRL_diff+110j
					; _X509_CRL_diff+12Cj
		push	edi
		call	_X509_CRL_new
		mov	edi, eax
		test	edi, edi
		jz	$memerr$46
		push	1
		push	edi
		call	_X509_CRL_set_version
		add	esp, 8
		test	eax, eax
		jz	$memerr$46
		mov	eax, [esi]
		push	dword ptr [eax+8]
		push	edi
		call	_X509_CRL_set_issuer_name
		add	esp, 8
		test	eax, eax
		jz	$memerr$46
		mov	eax, [esi]
		push	dword ptr [eax+0Ch]
		push	edi
		call	_X509_CRL_set_lastUpdate
		add	esp, 8
		test	eax, eax
		jz	$memerr$46
		mov	eax, [esi]
		push	dword ptr [eax+10h]
		push	edi
		call	_X509_CRL_set_nextUpdate
		add	esp, 8
		test	eax, eax
		jz	$memerr$46
		push	0
		push	1
		push	dword ptr [ebp+24h]
		push	8Ch ; 'å'
		push	edi
		call	_X509_CRL_add1_ext_i2d
		add	esp, 14h
		test	eax, eax
		jz	$memerr$46
		push	esi
		xor	ebx, ebx
		call	_X509_CRL_get_ext_count
		add	esp, 4
		test	eax, eax
		jle	short loc_236

loc_20D:				; CODE XREF: _X509_CRL_diff+208j
		push	ebx
		push	esi
		call	_X509_CRL_get_ext
		push	0FFFFFFFFh
		push	eax
		push	edi
		call	_X509_CRL_add_ext
		add	esp, 14h
		test	eax, eax
		jz	$memerr$46
		push	esi
		inc	ebx
		call	_X509_CRL_get_ext_count
		add	esp, 4
		cmp	ebx, eax
		jl	short loc_20D

loc_236:				; CODE XREF: _X509_CRL_diff+1DFj
		mov	eax, [esi]
		xor	esi, esi
		mov	ebx, [eax+14h]
		push	ebx
		mov	[esp+18h+var_4], ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_29C

loc_24E:				; CODE XREF: _X509_CRL_diff+26Ej
		push	esi
		push	ebx
		call	_sk_value
		mov	ebx, eax
		lea	eax, [esp+1Ch+arg_0]
		push	dword ptr [ebx]
		push	eax
		push	ebp
		call	_X509_CRL_get0_by_serial
		add	esp, 14h
		test	eax, eax
		jnz	short loc_28A
		push	ebx
		call	_X509_REVOKED_dup
		add	esp, 4
		mov	[esp+14h+arg_0], eax
		test	eax, eax
		jz	short $memerr$46
		push	eax
		push	edi
		call	_X509_CRL_add0_revoked
		add	esp, 8
		test	eax, eax
		jz	short loc_2C3

loc_28A:				; CODE XREF: _X509_CRL_diff+23Dj
		mov	ebx, [esp+14h+var_4]
		inc	esi
		push	ebx
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_24E

loc_29C:				; CODE XREF: _X509_CRL_diff+220j
		mov	ecx, [esp+14h+arg_8]
		test	ecx, ecx
		jz	short loc_2BB
		mov	eax, [esp+14h+arg_C]
		test	eax, eax
		jz	short loc_2BB
		push	eax
		push	ecx
		push	edi
		call	_X509_CRL_sign
		add	esp, 0Ch
		test	eax, eax
		jz	short $memerr$46

loc_2BB:				; CODE XREF: _X509_CRL_diff+276j
					; _X509_CRL_diff+27Ej
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2C3:				; CODE XREF: _X509_CRL_diff+25Cj
		push	[esp+14h+arg_0]
		call	_X509_REVOKED_free
		add	esp, 4

$memerr$46:				; CODE XREF: _X509_CRL_diff+15Aj
					; _X509_CRL_diff+16Dj ...
		push	82Fh
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		test	edi, edi
		jz	short loc_2F4
		push	edi
		call	_X509_CRL_free
		add	esp, 4

loc_2F4:				; CODE XREF: _X509_CRL_diff+2BDj
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2FC:				; CODE XREF: _X509_CRL_diff+2Cj
					; _X509_CRL_diff+36j
		push	7D8h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	82h ; 'Ç'
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_31D:				; CODE XREF: _X509_CRL_diff+14j
					; _X509_CRL_diff+22j
		push	7D3h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	7Fh ; ''
		push	69h ; 'i'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ecx
		retn
_X509_CRL_diff	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 33Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_cleanup
_X509_STORE_CTX_cleanup	proc near	; CODE XREF: _X509_STORE_CTX_free+Ap
					; _X509_STORE_CTX_init+238p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+48h]
		test	eax, eax
		jz	short loc_356
		push	edi
		call	eax
		add	esp, 4
		mov	dword ptr [edi+48h], 0

loc_356:				; CODE XREF: _X509_STORE_CTX_cleanup+Bj
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_373
		cmp	dword ptr [edi+7Ch], 0
		jnz	short loc_36C
		push	eax
		call	_X509_VERIFY_PARAM_free
		add	esp, 4

loc_36C:				; CODE XREF: _X509_STORE_CTX_cleanup+25j
		mov	dword ptr [edi+14h], 0

loc_373:				; CODE XREF: _X509_STORE_CTX_cleanup+1Fj
		mov	eax, [edi+58h]
		test	eax, eax
		jz	short loc_38A
		push	eax
		call	_X509_policy_tree_free
		add	esp, 4
		mov	dword ptr [edi+58h], 0

loc_38A:				; CODE XREF: _X509_STORE_CTX_cleanup+3Cj
		mov	eax, [edi+54h]
		test	eax, eax
		jz	short loc_3A6
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8
		mov	dword ptr [edi+54h], 0

loc_3A6:				; CODE XREF: _X509_STORE_CTX_cleanup+53j
		lea	esi, [edi+80h]
		push	esi
		push	edi
		push	5
		call	_CRYPTO_free_ex_data
		add	esp, 0Ch
		xorps	xmm0, xmm0
		movq	qword ptr [esi], xmm0
		pop	edi
		pop	esi
		retn
_X509_STORE_CTX_cleanup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_free
_X509_STORE_CTX_free proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_3DC
		push	esi
		call	_X509_STORE_CTX_cleanup
		push	esi
		call	_CRYPTO_free
		add	esp, 8

loc_3DC:				; CODE XREF: _X509_STORE_CTX_free+7j
		pop	esi
		retn
_X509_STORE_CTX_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get0_current_crl
_X509_STORE_CTX_get0_current_crl proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		retn
_X509_STORE_CTX_get0_current_crl endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get0_current_issuer
_X509_STORE_CTX_get0_current_issuer proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+6Ch]
		retn
_X509_STORE_CTX_get0_current_issuer endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get0_param
_X509_STORE_CTX_get0_param proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		retn
_X509_STORE_CTX_get0_param endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get0_parent_ctx
_X509_STORE_CTX_get0_parent_ctx	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+7Ch]
		retn
_X509_STORE_CTX_get0_parent_ctx	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 400h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get0_policy_tree
_X509_STORE_CTX_get0_policy_tree proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+58h]
		retn
_X509_STORE_CTX_get0_policy_tree endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 408h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get1_chain
_X509_STORE_CTX_get1_chain proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+54h]
		test	eax, eax
		jnz	short loc_414
		retn
; ---------------------------------------------------------------------------

loc_414:				; CODE XREF: _X509_STORE_CTX_get1_chain+9j
		mov	[esp+arg_0], eax
		jmp	_X509_chain_up_ref
_X509_STORE_CTX_get1_chain endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_chain
_X509_STORE_CTX_get_chain proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+54h]
		retn
_X509_STORE_CTX_get_chain endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 428h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_current_cert
_X509_STORE_CTX_get_current_cert proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+68h]
		retn
_X509_STORE_CTX_get_current_cert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 430h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_error
_X509_STORE_CTX_get_error proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+64h]
		retn
_X509_STORE_CTX_get_error endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 438h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_error_depth
_X509_STORE_CTX_get_error_depth	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+60h]
		retn
_X509_STORE_CTX_get_error_depth	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 440h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_ex_data
_X509_STORE_CTX_get_ex_data proc near

arg_0		= dword	ptr  4

		sub	[esp+arg_0], 0FFFFFF80h
		jmp	_CRYPTO_get_ex_data
_X509_STORE_CTX_get_ex_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_ex_new_index
_X509_STORE_CTX_get_ex_new_index proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		push	5
		call	_CRYPTO_get_ex_new_index
		add	esp, 18h
		retn
_X509_STORE_CTX_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 46Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_get_explicit_policy
_X509_STORE_CTX_get_explicit_policy proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+5Ch]
		retn
_X509_STORE_CTX_get_explicit_policy endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 474h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_init
_X509_STORE_CTX_init proc near		; CODE XREF: _check_crl_path+33p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		xorps	xmm0, xmm0
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		lea	ebx, [esi+80h]
		mov	[esi+8], eax
		mov	eax, [esp+0Ch+arg_C]
		mov	[esi], edi
		mov	dword ptr [esi+4], 0
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+50h], 0
		mov	dword ptr [esi+18h], 0
		mov	dword ptr [esi+4Ch], 0
		mov	dword ptr [esi+54h], 0
		mov	dword ptr [esi+64h], 0
		mov	dword ptr [esi+5Ch], 0
		mov	dword ptr [esi+60h], 0
		mov	dword ptr [esi+68h], 0
		mov	dword ptr [esi+6Ch], 0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], 0
		mov	dword ptr [esi+78h], 0
		mov	dword ptr [esi+58h], 0
		mov	dword ptr [esi+7Ch], 0
		movq	qword ptr [ebx], xmm0
		call	_X509_VERIFY_PARAM_new
		mov	[esi+14h], eax
		test	eax, eax
		jnz	short loc_539
		push	8FDh
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	8Fh ; 'è'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_539:				; CODE XREF: _X509_STORE_CTX_init+A2j
		test	edi, edi
		jz	short loc_55B
		push	dword ptr [edi+0Ch]
		push	eax
		call	_X509_VERIFY_PARAM_inherit
		mov	ecx, [edi+14h]
		add	esp, 8
		mov	[esi+20h], ecx
		mov	ecx, [edi+38h]
		mov	[esi+48h], ecx
		test	eax, eax
		jz	short loc_580
		jmp	short loc_566
; ---------------------------------------------------------------------------

loc_55B:				; CODE XREF: _X509_STORE_CTX_init+C7j
		or	dword ptr [eax+10h], 11h
		mov	dword ptr [esi+48h], 0

loc_566:				; CODE XREF: _X509_STORE_CTX_init+E5j
		push	offset ??_C@_07DLHCIBDH@default?$AA@ ; "default"
		call	_X509_VERIFY_PARAM_lookup
		push	eax
		push	dword ptr [esi+14h]
		call	_X509_VERIFY_PARAM_inherit
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_58A

loc_580:				; CODE XREF: _X509_STORE_CTX_init+E3j
		push	915h
		jmp	loc_695
; ---------------------------------------------------------------------------

loc_58A:				; CODE XREF: _X509_STORE_CTX_init+10Aj
		test	edi, edi
		jz	short loc_59A
		mov	eax, [edi+1Ch]
		test	eax, eax
		jz	short loc_59A
		mov	[esi+28h], eax
		jmp	short loc_5A1
; ---------------------------------------------------------------------------

loc_59A:				; CODE XREF: _X509_STORE_CTX_init+118j
					; _X509_STORE_CTX_init+11Fj
		mov	dword ptr [esi+28h], offset _check_issued

loc_5A1:				; CODE XREF: _X509_STORE_CTX_init+124j
		test	edi, edi
		jz	short loc_5B1
		mov	eax, [edi+18h]
		test	eax, eax
		jz	short loc_5B1
		mov	[esi+24h], eax
		jmp	short loc_5B8
; ---------------------------------------------------------------------------

loc_5B1:				; CODE XREF: _X509_STORE_CTX_init+12Fj
					; _X509_STORE_CTX_init+136j
		mov	dword ptr [esi+24h], offset _X509_STORE_CTX_get1_issuer

loc_5B8:				; CODE XREF: _X509_STORE_CTX_init+13Bj
		test	edi, edi
		jz	short loc_5C8
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_5C8
		mov	[esi+20h], eax
		jmp	short loc_5CF
; ---------------------------------------------------------------------------

loc_5C8:				; CODE XREF: _X509_STORE_CTX_init+146j
					; _X509_STORE_CTX_init+14Dj
		mov	dword ptr [esi+20h], offset _null_callback

loc_5CF:				; CODE XREF: _X509_STORE_CTX_init+152j
		test	edi, edi
		jz	short loc_5DF
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_5DF
		mov	[esi+1Ch], eax
		jmp	short loc_5E6
; ---------------------------------------------------------------------------

loc_5DF:				; CODE XREF: _X509_STORE_CTX_init+15Dj
					; _X509_STORE_CTX_init+164j
		mov	dword ptr [esi+1Ch], offset _internal_verify

loc_5E6:				; CODE XREF: _X509_STORE_CTX_init+169j
		test	edi, edi
		jz	short loc_5F6
		mov	eax, [edi+20h]
		test	eax, eax
		jz	short loc_5F6
		mov	[esi+2Ch], eax
		jmp	short loc_5FD
; ---------------------------------------------------------------------------

loc_5F6:				; CODE XREF: _X509_STORE_CTX_init+174j
					; _X509_STORE_CTX_init+17Bj
		mov	dword ptr [esi+2Ch], offset _check_revocation

loc_5FD:				; CODE XREF: _X509_STORE_CTX_init+180j
		test	edi, edi
		jz	short loc_60D
		mov	eax, [edi+24h]
		test	eax, eax
		jz	short loc_60D
		mov	[esi+30h], eax
		jmp	short loc_614
; ---------------------------------------------------------------------------

loc_60D:				; CODE XREF: _X509_STORE_CTX_init+18Bj
					; _X509_STORE_CTX_init+192j
		mov	dword ptr [esi+30h], 0

loc_614:				; CODE XREF: _X509_STORE_CTX_init+197j
		test	edi, edi
		jz	short loc_624
		mov	eax, [edi+28h]
		test	eax, eax
		jz	short loc_624
		mov	[esi+34h], eax
		jmp	short loc_62B
; ---------------------------------------------------------------------------

loc_624:				; CODE XREF: _X509_STORE_CTX_init+1A2j
					; _X509_STORE_CTX_init+1A9j
		mov	dword ptr [esi+34h], offset _check_crl

loc_62B:				; CODE XREF: _X509_STORE_CTX_init+1AEj
		test	edi, edi
		jz	short loc_63B
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_63B
		mov	[esi+38h], eax
		jmp	short loc_642
; ---------------------------------------------------------------------------

loc_63B:				; CODE XREF: _X509_STORE_CTX_init+1B9j
					; _X509_STORE_CTX_init+1C0j
		mov	dword ptr [esi+38h], offset _cert_crl

loc_642:				; CODE XREF: _X509_STORE_CTX_init+1C5j
		test	edi, edi
		jz	short loc_652
		mov	eax, [edi+30h]
		test	eax, eax
		jz	short loc_652
		mov	[esi+40h], eax
		jmp	short loc_659
; ---------------------------------------------------------------------------

loc_652:				; CODE XREF: _X509_STORE_CTX_init+1D0j
					; _X509_STORE_CTX_init+1D7j
		mov	dword ptr [esi+40h], offset _X509_STORE_get1_certs

loc_659:				; CODE XREF: _X509_STORE_CTX_init+1DCj
		test	edi, edi
		jz	short loc_669
		mov	eax, [edi+34h]
		test	eax, eax
		jz	short loc_669
		mov	[esi+44h], eax
		jmp	short loc_670
; ---------------------------------------------------------------------------

loc_669:				; CODE XREF: _X509_STORE_CTX_init+1E7j
					; _X509_STORE_CTX_init+1EEj
		mov	dword ptr [esi+44h], offset _X509_STORE_get1_crls

loc_670:				; CODE XREF: _X509_STORE_CTX_init+1F3j
		push	ebx
		push	esi
		push	5
		mov	dword ptr [esi+3Ch], offset _check_policy
		call	_CRYPTO_new_ex_data
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_690
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_690:				; CODE XREF: _X509_STORE_CTX_init+211j
		push	950h

loc_695:				; CODE XREF: _X509_STORE_CTX_init+111j
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	8Fh ; 'è'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

$err$36:
		push	esi
		call	_X509_STORE_CTX_cleanup
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
_X509_STORE_CTX_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_new
_X509_STORE_CTX_new proc near
		push	esi
		push	8D0h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	88h ; 'à'
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_6F9
		push	8D2h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	8Eh ; 'é'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F9:				; CODE XREF: _X509_STORE_CTX_new+1Cj
		push	88h ; 'à'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
_X509_STORE_CTX_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 710h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_purpose_inherit
_X509_STORE_CTX_purpose_inherit	proc near ; CODE XREF: _X509_STORE_CTX_set_purpose+Cp
					; _X509_STORE_CTX_set_trust+Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jnz	short loc_72A
		mov	edi, esi
		test	esi, esi
		jnz	short loc_72A
		mov	esi, [esp+8+arg_C]
		jmp	short loc_790
; ---------------------------------------------------------------------------

loc_72A:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+Cj
					; _X509_STORE_CTX_purpose_inherit+12j
		push	edi
		call	_X509_PURPOSE_get_by_id
		add	esp, 4
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_758
		push	8ACh

loc_73D:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+6Aj
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	79h ; 'y'
		push	86h ; 'Ü'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_758:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+26j
		push	eax
		call	_X509_PURPOSE_get0
		add	esp, 4
		cmp	dword ptr [eax+4], 0FFFFFFFFh
		jnz	short loc_785
		push	esi
		call	_X509_PURPOSE_get_by_id
		add	esp, 4
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_77C
		push	8B4h
		jmp	short loc_73D
; ---------------------------------------------------------------------------

loc_77C:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+63j
		push	eax
		call	_X509_PURPOSE_get0
		add	esp, 4

loc_785:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+55j
		mov	esi, [esp+8+arg_C]
		test	esi, esi
		jnz	short loc_794
		mov	esi, [eax+4]

loc_790:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+18j
		test	esi, esi
		jz	short loc_7C2

loc_794:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+7Bj
		push	esi
		call	_X509_TRUST_get_by_id
		add	esp, 4
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_7C2
		push	8C1h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	78h ; 'x'
		push	86h ; 'Ü'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7C2:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+82j
					; _X509_STORE_CTX_purpose_inherit+90j
		mov	eax, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_7D6
		mov	ecx, [eax+14h]
		cmp	dword ptr [ecx+18h], 0
		jnz	short loc_7D6
		mov	[ecx+18h], edi

loc_7D6:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+B8j
					; _X509_STORE_CTX_purpose_inherit+C1j
		test	esi, esi
		jz	short loc_7E6
		mov	eax, [eax+14h]
		cmp	dword ptr [eax+1Ch], 0
		jnz	short loc_7E6
		mov	[eax+1Ch], esi

loc_7E6:				; CODE XREF: _X509_STORE_CTX_purpose_inherit+C8j
					; _X509_STORE_CTX_purpose_inherit+D1j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_X509_STORE_CTX_purpose_inherit	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set0_crls
_X509_STORE_CTX_set0_crls proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+10h], ecx
		retn
_X509_STORE_CTX_set0_crls endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set0_param
_X509_STORE_CTX_set0_param proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_811
		push	eax
		call	_X509_VERIFY_PARAM_free
		add	esp, 4

loc_811:				; CODE XREF: _X509_STORE_CTX_set0_param+Aj
		mov	eax, [esp+4+arg_4]
		mov	[esi+14h], eax
		pop	esi
		retn
_X509_STORE_CTX_set0_param endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 81Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_cert
_X509_STORE_CTX_set_cert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+8], ecx
		retn
_X509_STORE_CTX_set_cert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 828h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_chain
_X509_STORE_CTX_set_chain proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+0Ch], ecx
		retn
_X509_STORE_CTX_set_chain endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 834h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_default
_X509_STORE_CTX_set_default proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	_X509_VERIFY_PARAM_lookup
		add	esp, 4
		test	eax, eax
		jnz	short loc_845
		retn
; ---------------------------------------------------------------------------

loc_845:				; CODE XREF: _X509_STORE_CTX_set_default+Ej
		push	eax
		mov	eax, [esp+4+arg_0]
		push	dword ptr [eax+14h]
		call	_X509_VERIFY_PARAM_inherit
		add	esp, 8
		retn
_X509_STORE_CTX_set_default endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 858h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_depth
_X509_STORE_CTX_set_depth proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+14h]
		call	_X509_VERIFY_PARAM_set_depth
		add	esp, 8
		retn
_X509_STORE_CTX_set_depth endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 86Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_error
_X509_STORE_CTX_set_error proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+64h], ecx
		retn
_X509_STORE_CTX_set_error endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 878h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_ex_data
_X509_STORE_CTX_set_ex_data proc near

arg_0		= dword	ptr  4

		sub	[esp+arg_0], 0FFFFFF80h
		jmp	_CRYPTO_set_ex_data
_X509_STORE_CTX_set_ex_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 884h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_flags
_X509_STORE_CTX_set_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+14h]
		call	_X509_VERIFY_PARAM_set_flags
		add	esp, 8
		retn
_X509_STORE_CTX_set_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 898h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_purpose
_X509_STORE_CTX_set_purpose proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	[esp+4+arg_4]
		push	0
		push	[esp+0Ch+arg_0]
		call	_X509_STORE_CTX_purpose_inherit
		add	esp, 10h
		retn
_X509_STORE_CTX_set_purpose endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_time
_X509_STORE_CTX_set_time proc near

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_8]
		push	dword ptr [eax+14h]
		call	_X509_VERIFY_PARAM_set_time
		add	esp, 0Ch
		retn
_X509_STORE_CTX_set_time endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_trust
_X509_STORE_CTX_set_trust proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	0
		push	0
		push	[esp+0Ch+arg_0]
		call	_X509_STORE_CTX_purpose_inherit
		add	esp, 10h
		retn
_X509_STORE_CTX_set_trust endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_set_verify_cb
_X509_STORE_CTX_set_verify_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+20h], ecx
		retn
_X509_STORE_CTX_set_verify_cb endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_STORE_CTX_trusted_stack
_X509_STORE_CTX_trusted_stack proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	[ecx+18h], eax
		mov	dword ptr [ecx+24h], offset _get_issuer_sk
		retn
_X509_STORE_CTX_trusted_stack endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 900h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_cmp_current_time
_X509_cmp_current_time proc near

arg_0		= dword	ptr  4

		push	0
		push	[esp+4+arg_0]
		call	_X509_cmp_time
		add	esp, 8
		retn
_X509_cmp_current_time endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 910h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_cmp_time
_X509_cmp_time	proc near		; CODE XREF: _X509_cmp_current_time+6p
					; _check_cert_time+23p	...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= qword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+54h+arg_0]
		mov	[esp+54h+var_48], eax
		mov	ebp, [edi+4]
		mov	edx, [edi]
		mov	ecx, [edi+8]
		cmp	ebp, 17h
		jnz	short loc_976
		lea	eax, [edx-0Bh]
		cmp	eax, 6
		ja	short loc_962
		mov	ax, [ecx+8]
		lea	esi, [esp+54h+var_2C+2]
		movq	xmm0, qword ptr	[ecx]
		add	ecx, 0Ah
		mov	word ptr [esp+54h+var_2C], ax
		sub	edx, 0Ah
		jmp	short loc_993
; ---------------------------------------------------------------------------

loc_962:				; CODE XREF: _X509_cmp_time+37j
					; _X509_cmp_time+6Cj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_976:				; CODE XREF: _X509_cmp_time+2Fj
		lea	eax, [edx-0Dh]
		cmp	eax, 0Ah
		ja	short loc_962
		mov	eax, [ecx+8]
		lea	esi, [esp+54h+var_28]
		movq	xmm0, qword ptr	[ecx]
		add	ecx, 0Ch
		mov	[esp+54h+var_2C], eax
		sub	edx, 0Ch

loc_993:				; CODE XREF: _X509_cmp_time+50j
		mov	al, [ecx]
		movq	[esp+54h+var_34], xmm0
		push	ebx
		cmp	al, 5Ah	; 'Z'
		jz	short loc_9EA
		cmp	al, 2Dh	; '-'
		jz	short loc_9EA
		cmp	al, 2Bh	; '+'
		jz	short loc_9EA
		cmp	edx, 2
		jl	loc_BC9
		mov	[esi], al
		mov	al, [ecx+1]
		add	ecx, 2
		mov	[esi+1], al
		add	esi, 2
		sub	edx, 2
		jz	short loc_9F2
		cmp	byte ptr [ecx],	2Eh ; '.'
		jnz	short loc_9F2
		inc	ecx
		dec	edx
		xor	eax, eax
		nop	dword ptr [eax]

loc_9D0:				; CODE XREF: _X509_cmp_time+D6j
		test	edx, edx
		jz	short loc_9F2
		mov	bl, [ecx]
		cmp	bl, 30h	; '0'
		jl	short loc_9F2
		cmp	bl, 39h	; '9'
		jg	short loc_9F2
		inc	eax
		inc	ecx
		dec	edx
		cmp	eax, 3
		jl	short loc_9D0
		jmp	short loc_9F2
; ---------------------------------------------------------------------------

loc_9EA:				; CODE XREF: _X509_cmp_time+8Ej
					; _X509_cmp_time+92j ...
		mov	word ptr [esi],	3030h
		add	esi, 2

loc_9F2:				; CODE XREF: _X509_cmp_time+B2j
					; _X509_cmp_time+B7j ...
		mov	word ptr [esi],	5Ah ; 'Z'
		test	edx, edx
		jz	loc_BC9
		mov	bl, [ecx]
		cmp	bl, 5Ah	; 'Z'
		jnz	short loc_A16
		cmp	edx, 1
		jnz	loc_BC9
		xor	ecx, ecx
		jmp	loc_AAA
; ---------------------------------------------------------------------------

loc_A16:				; CODE XREF: _X509_cmp_time+F4j
		cmp	bl, 2Bh	; '+'
		jz	short loc_A24
		cmp	bl, 2Dh	; '-'
		jnz	loc_BC9

loc_A24:				; CODE XREF: _X509_cmp_time+109j
		cmp	edx, 5
		jnz	loc_BC9
		mov	al, [ecx+1]
		cmp	al, 30h	; '0'
		jl	loc_BC9
		cmp	al, 39h	; '9'
		jg	loc_BC9
		mov	dl, [ecx+2]
		cmp	dl, 30h	; '0'
		jl	loc_BC9
		cmp	dl, 39h	; '9'
		jg	loc_BC9
		mov	bh, [ecx+3]
		cmp	bh, 30h	; '0'
		jl	loc_BC9
		cmp	bh, 39h	; '9'
		jg	loc_BC9
		mov	dh, [ecx+4]
		cmp	dh, 30h	; '0'
		jl	loc_BC9
		cmp	dh, 39h	; '9'
		jg	loc_BC9
		movsx	eax, al
		lea	ecx, [eax+eax*4]
		movsx	eax, dl
		lea	eax, [eax+ecx*2]
		lea	ecx, [eax+eax*2]
		movsx	eax, bh
		lea	eax, [eax+ecx*2]
		lea	ecx, [eax+eax*4]
		movsx	eax, dh
		lea	ecx, [ecx-3EE8h]
		lea	ecx, [eax+ecx*2]
		cmp	bl, 2Dh	; '-'
		jnz	short loc_AAA
		neg	ecx

loc_AAA:				; CODE XREF: _X509_cmp_time+101j
					; _X509_cmp_time+196j
		push	[esp+58h+var_48]
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_40], ebp
		mov	[esp+5Ch+var_3C], eax
		mov	eax, ecx
		shl	eax, 4
		sub	eax, ecx
		mov	[esp+5Ch+var_38], 0
		shl	eax, 2
		push	eax
		lea	eax, [esp+60h+var_44]
		mov	[esp+60h+var_44], 18h
		push	0
		push	eax
		call	_X509_time_adj_ex
		add	esp, 10h
		test	eax, eax
		jz	loc_BC9
		cmp	dword ptr [edi+4], 17h
		jnz	short loc_B61
		movsx	eax, byte ptr [esp+58h+var_34]
		lea	edx, [eax+eax*4]
		movsx	eax, byte ptr [esp+58h+var_34+1]
		lea	edx, [edx-108h]
		lea	edx, [eax+edx*2]
		cmp	edx, 32h ; '2'
		jge	short loc_B10
		add	edx, 64h ; 'd'

loc_B10:				; CODE XREF: _X509_cmp_time+1FBj
		movsx	eax, [esp+58h+var_1C]
		lea	ecx, [eax+eax*4]
		movsx	eax, [esp+58h+var_1B]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		cmp	eax, 32h ; '2'
		jge	short loc_B2D
		add	eax, 64h ; 'd'

loc_B2D:				; CODE XREF: _X509_cmp_time+218j
		cmp	edx, eax
		jge	short loc_B47
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_B47:				; CODE XREF: _X509_cmp_time+21Fj
		jle	short loc_B61
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebp
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_B61:				; CODE XREF: _X509_cmp_time+1E0j
					; _X509_cmp_time:loc_B47j
		lea	ecx, [esp+58h+var_1C]
		lea	eax, [esp+58h+var_34]
		nop	dword ptr [eax+00000000h]

loc_B70:				; CODE XREF: _X509_cmp_time+27Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_BA9
		test	dl, dl
		jz	short loc_B8C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_BA9
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_B70

loc_B8C:				; CODE XREF: _X509_cmp_time+268j
		pop	ebx
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		pop	edi
		test	eax, eax
		pop	esi
		cmovz	eax, ecx
		pop	ebp
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_BA9:				; CODE XREF: _X509_cmp_time+264j
					; _X509_cmp_time+270j
		sbb	eax, eax
		or	ecx, 0FFFFFFFFh
		pop	ebx
		or	eax, 1
		pop	edi
		test	eax, eax
		pop	esi
		cmovz	eax, ecx
		pop	ebp
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_BC9:				; CODE XREF: _X509_cmp_time+9Bj
					; _X509_cmp_time+E9j ...
		mov	ecx, [esp+58h+var_4]
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
_X509_cmp_time	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BE0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_get_pubkey_parameters
_X509_get_pubkey_parameters proc near	; CODE XREF: _X509_verify_cert+4D7p
					; _X509_verify_cert+587p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_BFB
		push	eax
		call	_EVP_PKEY_missing_parameters
		add	esp, 4
		test	eax, eax
		jnz	short loc_BFB
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_BFB:				; CODE XREF: _X509_get_pubkey_parameters+6j
					; _X509_get_pubkey_parameters+13j
		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		push	ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_C4C

loc_C11:				; CODE XREF: _X509_get_pubkey_parameters+6Aj
		push	esi
		push	ebx
		call	_sk_value
		push	eax
		call	_X509_get_pubkey
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_CBB
		push	edi
		call	_EVP_PKEY_missing_parameters
		add	esp, 4
		test	eax, eax
		jz	short loc_C6A
		push	edi
		call	_EVP_PKEY_free
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 8
		cmp	esi, eax
		jl	short loc_C11

loc_C4C:				; CODE XREF: _X509_get_pubkey_parameters+2Fj
		push	7B8h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	6Bh ; 'k'
		push	6Eh ; 'n'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C6A:				; CODE XREF: _X509_get_pubkey_parameters+56j
		push	ebp
		lea	ebp, [esi-1]
		test	ebp, ebp
		js	short loc_C96

loc_C72:				; CODE XREF: _X509_get_pubkey_parameters+B4j
		push	ebp
		push	ebx
		call	_sk_value
		push	eax
		call	_X509_get_pubkey
		mov	esi, eax
		push	edi
		push	esi
		call	_EVP_PKEY_copy_parameters
		push	esi
		call	_EVP_PKEY_free
		add	esp, 18h
		sub	ebp, 1
		jns	short loc_C72

loc_C96:				; CODE XREF: _X509_get_pubkey_parameters+90j
		mov	eax, [esp+10h+arg_0]
		pop	ebp
		test	eax, eax
		jz	short loc_CA9
		push	edi
		push	eax
		call	_EVP_PKEY_copy_parameters
		add	esp, 8

loc_CA9:				; CODE XREF: _X509_get_pubkey_parameters+BDj
		push	edi
		call	_EVP_PKEY_free
		add	esp, 4
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_CBB:				; CODE XREF: _X509_get_pubkey_parameters+45j
		push	7ACh
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	6Ch ; 'l'
		push	6Eh ; 'n'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
_X509_get_pubkey_parameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CDCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_gmtime_adj
_X509_gmtime_adj proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		lea	eax, [esp+8+var_8]
		push	eax		; Time
		call	dword ptr ds:__imp___time64
		mov	eax, [esp+0Ch+arg_0]
		add	esp, 4
		test	eax, eax
		jz	short loc_D44
		test	byte ptr [eax+0Ch], 40h
		jnz	short loc_D44
		mov	ecx, [eax+4]
		cmp	ecx, 17h
		jnz	short loc_D24
		push	[esp+8+arg_4]
		push	0
		push	[esp+10h+var_4]
		push	[esp+14h+var_8]
		push	eax
		call	_ASN1_UTCTIME_adj
		add	esp, 14h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_D24:				; CODE XREF: _X509_gmtime_adj+2Bj
		cmp	ecx, 18h
		jnz	short loc_D44
		push	[esp+8+arg_4]
		push	0
		push	[esp+10h+var_4]
		push	[esp+14h+var_8]
		push	eax
		call	_ASN1_GENERALIZEDTIME_adj
		add	esp, 14h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_D44:				; CODE XREF: _X509_gmtime_adj+1Dj
					; _X509_gmtime_adj+23j	...
		push	[esp+8+arg_4]
		push	0
		push	[esp+10h+var_4]
		push	[esp+14h+var_8]
		push	eax
		call	_ASN1_TIME_adj
		add	esp, 14h
		add	esp, 8
		retn
_X509_gmtime_adj endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_time_adj
_X509_time_adj	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	0
		push	[esp+0Ch+arg_0]
		call	_X509_time_adj_ex
		add	esp, 10h
		retn
_X509_time_adj	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D78h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_time_adj_ex
_X509_time_adj_ex proc near		; CODE XREF: _X509_cmp_time+1CCp
					; _X509_time_adj+Ep

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_C]
		test	eax, eax
		jz	short loc_D98
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	[esp+8+var_8], ecx
		mov	[esp+8+var_4], edx
		jmp	short loc_DAC
; ---------------------------------------------------------------------------

loc_D98:				; CODE XREF: _X509_time_adj_ex+10j
		lea	eax, [esp+8+var_8]
		push	eax		; Time
		call	dword ptr ds:__imp___time64
		mov	edx, [esp+0Ch+var_4]
		add	esp, 4
		mov	ecx, [esp+8+var_8]

loc_DAC:				; CODE XREF: _X509_time_adj_ex+1Ej
		mov	eax, [esp+8+arg_0]
		test	eax, eax
		jz	short loc_DF4
		test	byte ptr [eax+0Ch], 40h
		jnz	short loc_DF4
		cmp	dword ptr [eax+4], 17h
		jnz	short loc_DD7
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	edx
		push	ecx
		push	eax
		call	_ASN1_UTCTIME_adj
		add	esp, 14h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_DD7:				; CODE XREF: _X509_time_adj_ex+46j
		cmp	dword ptr [eax+4], 18h
		jnz	short loc_DF4
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	edx
		push	ecx
		push	eax
		call	_ASN1_GENERALIZEDTIME_adj
		add	esp, 14h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_DF4:				; CODE XREF: _X509_time_adj_ex+3Aj
					; _X509_time_adj_ex+40j ...
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	edx
		push	ecx
		push	eax
		call	_ASN1_TIME_adj
		add	esp, 14h
		add	esp, 8
		retn
_X509_time_adj_ex endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_verify_cert
_X509_verify_cert proc near		; CODE XREF: _check_crl_path+7Dp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 1Ch
		call	__chkstk
		push	esi
		mov	esi, [esp+20h+arg_0]
		xor	eax, eax
		push	edi
		mov	[esp+24h+var_10], eax
		mov	[esp+24h+var_18], eax
		mov	edi, [esi+14h]
		mov	[esp+24h+var_8], eax
		cmp	[esi+8], eax
		jnz	short loc_E53
		push	0C9h ; '…'
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	69h ; 'i'
		push	7Fh ; ''
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_E53:				; CODE XREF: _X509_verify_cert+24j
		cmp	[esi+54h], eax
		jz	short loc_E79
		push	0D1h ; '—'
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	42h ; 'B'
		push	7Fh ; ''
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_E79:				; CODE XREF: _X509_verify_cert+4Aj
		mov	eax, [esi+20h]
		push	ebx
		push	ebp
		mov	[esp+2Ch+var_14], eax
		call	_sk_new_null
		mov	[esi+54h], eax
		test	eax, eax
		jz	loc_1373
		push	dword ptr [esi+8]
		push	eax
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_1373
		mov	eax, [esi+8]
		push	0E1h ; '·'
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	3
		add	eax, 10h
		push	1
		push	eax
		call	_CRYPTO_add_lock
		mov	eax, [esi+0Ch]
		add	esp, 14h
		mov	dword ptr [esi+50h], 1
		test	eax, eax
		jz	short loc_EEE
		push	eax
		call	_sk_dup
		mov	ebx, eax
		add	esp, 4
		mov	[esp+2Ch+var_8], ebx
		test	ebx, ebx
		jnz	short loc_EEE
		push	0E7h ; 'Á'
		jmp	loc_1378
; ---------------------------------------------------------------------------

loc_EEE:				; CODE XREF: _X509_verify_cert+C3j
					; _X509_verify_cert+D6j
		push	dword ptr [esi+54h]
		call	_sk_num
		mov	ebp, eax
		lea	eax, [ebp-1]
		push	eax
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	edi, [edi+20h]
		add	esp, 0Ch
		mov	[esp+2Ch+var_C], edi
		mov	ebx, eax
		cmp	edi, ebp
		jl	loc_FCE
		nop	dword ptr [eax+00h]

loc_F1C:				; CODE XREF: _X509_verify_cert+1BCj
		push	0
		push	0FFFFFFFFh
		push	ebx
		call	_X509_check_purpose
		add	esp, 0Ch
		test	dword ptr [ebx+28h], 2000h
		jnz	loc_FCE
		mov	eax, [esi+14h]
		test	dword ptr [eax+14h], 8000h
		jz	short loc_F65
		push	ebx
		lea	eax, [esp+30h+arg_0]
		push	esi
		push	eax
		mov	eax, [esi+24h]
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	$err$128
		jg	loc_1067
		mov	edi, [esp+2Ch+var_C]

loc_F65:				; CODE XREF: _X509_verify_cert+134j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_FCE
		push	ebx
		mov	ebx, [esp+30h+var_8]
		push	ebx
		push	esi
		call	_find_issuer
		add	esp, 0Ch
		mov	[esp+2Ch+arg_0], eax
		test	eax, eax
		jz	short loc_FCE
		push	eax
		push	dword ptr [esi+54h]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_1078
		mov	eax, [esp+2Ch+arg_0]
		push	115h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	3
		add	eax, 10h
		push	1
		push	eax
		call	_CRYPTO_add_lock
		push	[esp+40h+arg_0]
		push	ebx
		call	_sk_delete_ptr
		inc	dword ptr [esi+50h]
		inc	ebp
		mov	ebx, [esp+48h+arg_0]
		add	esp, 1Ch
		cmp	edi, ebp
		jge	loc_F1C

loc_FCE:				; CODE XREF: _X509_verify_cert+106j
					; _X509_verify_cert+124j ...
		mov	edi, ebp
		mov	[esp+2Ch+var_1C], edi

loc_FD4:				; CODE XREF: _X509_verify_cert+42Dj
		push	dword ptr [esi+54h]
		call	_sk_num
		dec	eax
		push	eax
		push	dword ptr [esi+54h]
		mov	[esp+38h+var_4], eax
		call	_sk_value
		push	0
		mov	ebx, eax
		push	0FFFFFFFFh
		push	ebx
		call	_X509_check_purpose
		add	esp, 18h
		test	dword ptr [ebx+28h], 2000h
		jz	loc_10E8
		push	dword ptr [esi+54h]
		call	_sk_num
		add	esp, 4
		cmp	eax, 1
		jnz	loc_10C2
		push	ebx
		lea	eax, [esp+30h+arg_0]
		push	esi
		push	eax
		mov	eax, [esi+24h]
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jle	short loc_1082
		push	[esp+2Ch+arg_0]
		push	ebx
		call	_X509_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1082
		push	ebx
		call	_X509_free
		mov	ebx, [esp+30h+arg_0]
		mov	eax, [esp+30h+var_4]
		push	ebx
		push	eax
		push	dword ptr [esi+54h]
		call	_sk_set
		add	esp, 10h
		mov	dword ptr [esi+50h], 0
		jmp	loc_10E8
; ---------------------------------------------------------------------------

loc_1067:				; CODE XREF: _X509_verify_cert+14Fj
		push	[esp+2Ch+arg_0]
		call	_X509_free
		add	esp, 4
		jmp	loc_FCE
; ---------------------------------------------------------------------------

loc_1078:				; CODE XREF: _X509_verify_cert+184j
		push	111h
		jmp	loc_1378
; ---------------------------------------------------------------------------

loc_1082:				; CODE XREF: _X509_verify_cert+221j
					; _X509_verify_cert+232j
		mov	eax, [esp+2Ch+var_4]
		mov	dword ptr [esi+64h], 12h
		mov	[esi+68h], ebx
		mov	[esi+60h], eax
		cmp	edi, 1
		jnz	short loc_10A4
		push	[esp+2Ch+arg_0]
		call	_X509_free
		add	esp, 4

loc_10A4:				; CODE XREF: _X509_verify_cert+28Aj
		push	esi
		push	0
		mov	[esp+34h+var_18], 1
		call	[esp+34h+var_14]
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_138E
		jmp	short loc_10E8
; ---------------------------------------------------------------------------

loc_10C2:				; CODE XREF: _X509_verify_cert+208j
		push	dword ptr [esi+54h]
		call	_sk_pop
		dec	dword ptr [esi+50h]
		dec	ebp
		dec	edi
		mov	[esp+30h+var_10], eax
		mov	[esp+30h+var_1C], edi
		lea	ecx, [ebp-1]
		push	ecx
		push	dword ptr [esi+54h]
		call	_sk_value
		add	esp, 0Ch
		mov	ebx, eax

loc_10E8:				; CODE XREF: _X509_verify_cert+1F4j
					; _X509_verify_cert+256j ...
		cmp	[esp+2Ch+var_C], ebp
		jl	short loc_113E

loc_10EE:				; CODE XREF: _X509_verify_cert+330j
		push	0
		push	0FFFFFFFFh
		push	ebx
		call	_X509_check_purpose
		add	esp, 0Ch
		test	dword ptr [ebx+28h], 2000h
		jnz	short loc_113E
		push	ebx
		lea	eax, [esp+30h+arg_0]
		push	esi
		push	eax
		mov	eax, [esi+24h]
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	$err$128
		jz	short loc_113E
		mov	ebx, [esp+2Ch+arg_0]
		push	ebx
		push	dword ptr [esi+54h]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_123E
		inc	ebp
		cmp	[esp+2Ch+var_C], ebp
		jge	short loc_10EE

loc_113E:				; CODE XREF: _X509_verify_cert+2E0j
					; _X509_verify_cert+2F6j ...
		push	esi
		call	_check_trust
		add	esp, 4
		cmp	eax, 2
		jz	loc_136F
		cmp	eax, 1
		jz	loc_129D
		mov	eax, [esi+14h]
		test	dword ptr [eax+14h], 108000h
		jnz	short loc_11A1
		mov	eax, [esp+2Ch+var_1C]
		cmp	eax, 1
		jle	short loc_11A1

loc_116E:				; CODE XREF: _X509_verify_cert+393j
		dec	eax
		mov	[esp+2Ch+var_1C], eax
		dec	eax
		push	eax
		push	dword ptr [esi+54h]
		call	_sk_value
		push	eax
		lea	eax, [esp+38h+arg_0]
		push	esi
		push	eax
		mov	eax, [esi+24h]
		call	eax
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		js	$err$128
		jg	short loc_11F1
		mov	eax, [esp+2Ch+var_1C]
		cmp	eax, 1
		jg	short loc_116E

loc_11A1:				; CODE XREF: _X509_verify_cert+357j
					; _X509_verify_cert+360j
		mov	eax, [esp+2Ch+var_18]
		test	eax, eax
		jnz	loc_129D
		mov	edi, [esp+2Ch+var_10]
		test	edi, edi
		jz	loc_1264
		mov	eax, [esi+28h]
		push	edi
		push	ebx
		push	esi
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1264
		push	edi
		push	dword ptr [esi+54h]
		call	_sk_push
		inc	ebp
		mov	[esi+68h], edi
		add	esp, 8
		mov	[esi+50h], ebp
		xor	eax, eax
		mov	dword ptr [esi+64h], 13h
		mov	[esp+2Ch+var_10], eax
		jmp	loc_127A
; ---------------------------------------------------------------------------

loc_11F1:				; CODE XREF: _X509_verify_cert+38Aj
		push	[esp+2Ch+arg_0]
		call	_X509_free
		mov	edi, [esp+30h+var_1C]
		add	esp, 4
		cmp	ebp, edi
		jle	short loc_122B
		mov	edi, ebp
		sub	edi, [esp+2Ch+var_1C]
		sub	ebp, edi

loc_120D:				; CODE XREF: _X509_verify_cert+419j
		push	dword ptr [esi+54h]
		call	_sk_pop
		push	eax
		mov	[esp+34h+arg_0], eax
		call	_X509_free
		add	esp, 8
		sub	edi, 1
		jnz	short loc_120D
		mov	edi, [esp+2Ch+var_1C]

loc_122B:				; CODE XREF: _X509_verify_cert+3F7j
		push	dword ptr [esi+54h]
		call	_sk_num
		add	esp, 4
		mov	[esi+50h], eax
		jmp	loc_FD4
; ---------------------------------------------------------------------------

loc_123E:				; CODE XREF: _X509_verify_cert+325j
		push	[esp+2Ch+arg_0]
		call	_X509_free
		push	16Ah
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	7Fh ; ''
		push	0Bh
		call	_ERR_put_error
		add	esp, 18h
		jmp	loc_138B
; ---------------------------------------------------------------------------

loc_1264:				; CODE XREF: _X509_verify_cert+3A7j
					; _X509_verify_cert+3BAj
		cmp	[esi+50h], ebp
		mov	eax, 2
		mov	ecx, 14h
		mov	[esi+68h], ebx
		cmovge	eax, ecx
		mov	[esi+64h], eax

loc_127A:				; CODE XREF: _X509_verify_cert+3E0j
		lea	eax, [ebp-1]
		mov	ebx, 1
		mov	ebp, [esp+2Ch+var_14]
		push	esi
		push	0
		mov	[esi+60h], eax
		call	ebp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	$err$128
		jmp	short loc_12A5
; ---------------------------------------------------------------------------

loc_129D:				; CODE XREF: _X509_verify_cert+347j
					; _X509_verify_cert+39Bj
		mov	ebp, [esp+2Ch+var_14]
		mov	ebx, [esp+2Ch+var_18]

loc_12A5:				; CODE XREF: _X509_verify_cert+48Fj
		push	esi
		call	_check_chain_extensions
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	$err$128
		push	esi
		call	_check_name_constraints
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	$err$128
		push	esi
		call	_check_id
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	$err$128
		push	dword ptr [esi+54h]
		push	0
		call	_X509_get_pubkey_parameters
		mov	eax, [esi+2Ch]
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short $err$128
		mov	eax, [esi+14h]
		lea	edi, [esi+60h]
		push	dword ptr [eax+14h]
		push	dword ptr [esi+54h]
		push	0
		push	edi
		call	_X509_chain_check_suiteb
		add	esp, 10h
		test	eax, eax
		jz	short loc_1330
		push	dword ptr [edi]
		mov	[esi+64h], eax
		push	dword ptr [esi+54h]
		call	_sk_value
		push	esi
		push	0
		mov	[esi+68h], eax
		call	ebp
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short $err$128

loc_1330:				; CODE XREF: _X509_verify_cert+504j
		mov	eax, [esi+1Ch]
		push	esi
		test	eax, eax
		jz	short loc_133C
		call	eax
		jmp	short loc_1341
; ---------------------------------------------------------------------------

loc_133C:				; CODE XREF: _X509_verify_cert+52Aj
		call	_internal_verify

loc_1341:				; CODE XREF: _X509_verify_cert+52Ej
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short $err$128
		test	ebx, ebx
		jnz	short loc_1362
		mov	eax, [esi+14h]
		test	byte ptr [eax+14h], 80h
		jz	short loc_1362
		mov	eax, [esi+3Ch]
		push	esi
		call	eax
		add	esp, 4
		mov	edi, eax

loc_1362:				; CODE XREF: _X509_verify_cert+540j
					; _X509_verify_cert+549j
		test	edi, edi
		jnz	short loc_139B

$err$128:				; CODE XREF: _X509_verify_cert+149j
					; _X509_verify_cert+30Bj ...
		xor	eax, eax
		test	edi, edi
		cmovg	edi, eax
		jmp	short loc_138E
; ---------------------------------------------------------------------------

loc_136F:				; CODE XREF: _X509_verify_cert+33Ej
		xor	edi, edi
		jmp	short loc_138E
; ---------------------------------------------------------------------------

loc_1373:				; CODE XREF: _X509_verify_cert+80j
					; _X509_verify_cert+94j
		push	0DDh ; '›'

loc_1378:				; CODE XREF: _X509_verify_cert+DDj
					; _X509_verify_cert+271j
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	7Fh ; ''
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_138B:				; CODE XREF: _X509_verify_cert+453j
		or	edi, 0FFFFFFFFh

loc_138E:				; CODE XREF: _X509_verify_cert+2AEj
					; _X509_verify_cert+561j ...
		push	dword ptr [esi+54h]
		push	0
		call	_X509_get_pubkey_parameters
		add	esp, 8

loc_139B:				; CODE XREF: _X509_verify_cert+558j
		mov	eax, [esp+2Ch+var_8]
		pop	ebp
		pop	ebx
		test	eax, eax
		jz	short loc_13AE
		push	eax
		call	_sk_free
		add	esp, 4

loc_13AE:				; CODE XREF: _X509_verify_cert+597j
		mov	eax, [esp+24h+var_10]
		test	eax, eax
		jz	short loc_13BF
		push	eax
		call	_X509_free
		add	esp, 4

loc_13BF:				; CODE XREF: _X509_verify_cert+5A8j
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 1Ch
		retn
_X509_verify_cert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cert_crl	proc near		; DATA XREF: _X509_STORE_CTX_init:loc_63Bo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	eax, [esi+14h]
		test	byte ptr [eax+14h], 10h
		jnz	short loc_13FF
		test	dword ptr [edi+10h], 200h
		jz	short loc_13FF
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 24h ; '$'
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_13FF

loc_13FA:				; CODE XREF: _cert_crl+73j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_13FF:				; CODE XREF: _cert_crl+11j
					; _cert_crl+1Aj ...
		push	[esp+8+arg_8]
		lea	eax, [esp+0Ch+arg_0]
		push	eax
		push	edi
		call	_X509_CRL_get0_by_cert
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_143D
		mov	eax, [esp+8+arg_0]
		cmp	dword ptr [eax+10h], 8
		jnz	short loc_1427
		pop	edi
		mov	eax, 2
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1427:				; CODE XREF: _cert_crl+55j
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 17h
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_13FA

loc_143D:				; CODE XREF: _cert_crl+4Bj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_cert_crl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1448h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cert_self_signed proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	0
		push	0FFFFFFFFh
		push	esi
		call	_X509_check_purpose
		mov	eax, [esi+28h]
		add	esp, 0Ch
		shr	eax, 0Dh
		and	eax, 1
		pop	esi
		retn
_cert_self_signed endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1468h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_cert	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		xor	ebx, ebx
		push	edi
		mov	[esp+18h+var_8], 0
		mov	[esp+18h+var_4], ebx
		push	dword ptr [esi+60h]
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	ebp, eax
		mov	[esi+6Ch], ebx
		add	esp, 8
		mov	[esi+68h], ebp
		mov	[esi+74h], ebx
		mov	[esi+78h], ebx
		nop	dword ptr [eax+00h]

loc_14A8:				; CODE XREF: _check_cert+102j
		mov	eax, [esi+78h]
		mov	[esp+18h+arg_0], eax
		mov	eax, [esi+30h]
		push	ebp
		test	eax, eax
		jz	short loc_14C4
		lea	ecx, [esp+1Ch+var_8]
		push	ecx
		push	esi
		call	eax
		add	esp, 0Ch
		jmp	short loc_14DB
; ---------------------------------------------------------------------------

loc_14C4:				; CODE XREF: _check_cert+4Dj
		lea	eax, [esp+1Ch+var_4]
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		push	esi
		call	_get_crl_delta
		mov	ebx, [esp+28h+var_4]
		add	esp, 10h

loc_14DB:				; CODE XREF: _check_cert+5Aj
		test	eax, eax
		jz	loc_1572
		mov	eax, [esp+18h+var_8]
		push	eax
		mov	[esi+70h], eax
		mov	eax, [esi+34h]
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	$err$28
		test	ebx, ebx
		jz	short loc_1528
		mov	eax, [esi+34h]
		push	ebx
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$28
		mov	eax, [esi+38h]
		push	ebp
		push	ebx
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short $err$28
		cmp	edi, 2
		jz	short loc_153C

loc_1528:				; CODE XREF: _check_cert+98j
		mov	eax, [esi+38h]
		push	ebp
		push	[esp+1Ch+var_8]
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short $err$28

loc_153C:				; CODE XREF: _check_cert+BEj
		push	[esp+18h+var_8]
		call	_X509_CRL_free
		push	ebx
		call	_X509_CRL_free
		mov	eax, [esi+78h]
		xor	ebx, ebx
		add	esp, 8
		mov	[esp+18h+var_8], 0
		mov	[esp+18h+var_4], ebx
		cmp	[esp+18h+arg_0], eax
		jz	short loc_1572
		cmp	eax, 807Fh
		jnz	loc_14A8
		jmp	short $err$28
; ---------------------------------------------------------------------------

loc_1572:				; CODE XREF: _check_cert+75j
					; _check_cert+FBj
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 3
		call	eax
		mov	edi, eax
		add	esp, 8

$err$28:				; CODE XREF: _check_cert+90j
					; _check_cert+A8j ...
		push	[esp+18h+var_8]
		call	_X509_CRL_free
		push	ebx
		call	_X509_CRL_free
		add	esp, 8
		mov	dword ptr [esi+70h], 0
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_check_cert	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_cert_time proc near		; CODE XREF: _internal_verify+116p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	eax, [esi+14h]
		test	byte ptr [eax+14h], 2
		jz	short loc_15C1
		lea	ebx, [eax+8]
		jmp	short loc_15C3
; ---------------------------------------------------------------------------

loc_15C1:				; CODE XREF: _check_cert_time+Ej
		xor	ebx, ebx

loc_15C3:				; CODE XREF: _check_cert_time+13j
		mov	edi, [esp+0Ch+arg_4]
		push	ebx
		mov	eax, [edi]
		mov	eax, [eax+10h]
		push	dword ptr [eax]
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jnz	short loc_15FA
		mov	dword ptr [esi+64h], 0Dh

loc_15E2:				; CODE XREF: _check_cert_time+57j
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	[esi+68h], edi
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_1605

loc_15F4:				; CODE XREF: _check_cert_time+85j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_15FA:				; CODE XREF: _check_cert_time+2Dj
		jle	short loc_1605
		mov	dword ptr [esi+64h], 9
		jmp	short loc_15E2
; ---------------------------------------------------------------------------

loc_1605:				; CODE XREF: _check_cert_time+46j
					; _check_cert_time:loc_15FAj
		mov	eax, [edi]
		push	ebx
		mov	eax, [eax+10h]
		push	dword ptr [eax+4]
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jnz	short loc_163C
		mov	dword ptr [esi+64h], 0Eh

loc_1621:				; CODE XREF: _check_cert_time+99j
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	[esi+68h], edi
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_15F4

loc_1633:				; CODE XREF: _check_cert_time:loc_163Cj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_163C:				; CODE XREF: _check_cert_time+6Cj
		jns	short loc_1633
		mov	dword ptr [esi+64h], 0Ah
		jmp	short loc_1621
_check_cert_time endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1648h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_chain_extensions	proc near	; CODE XREF: _X509_verify_cert+49Ap

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		or	ebp, 0FFFFFFFFh
		push	edi
		mov	[esp+20h+var_10], 0
		mov	[esp+20h+var_C], 0
		cmp	dword ptr [esi+7Ch], 0
		mov	eax, [esi+20h]
		mov	[esp+20h+arg_0], eax
		jz	short loc_168C
		mov	[esp+20h+var_8], 0
		mov	[esp+20h+var_4], 6
		jmp	short loc_16BE
; ---------------------------------------------------------------------------

loc_168C:				; CODE XREF: _check_chain_extensions+30j
		mov	eax, [esi+14h]
		push	offset ??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@ ; "OPENSSL_ALLOW_PROXY_CERTS"
		mov	edi, [eax+14h]
		shr	edi, 6
		and	edi, 1
		call	dword ptr ds:__imp__getenv
		add	esp, 4
		mov	ecx, 1
		test	eax, eax
		mov	eax, [esi+14h]
		cmovnz	edi, ecx
		mov	[esp+20h+var_8], edi
		mov	eax, [eax+18h]
		mov	[esp+20h+var_4], eax

loc_16BE:				; CODE XREF: _check_chain_extensions+42j
		xor	ebx, ebx
		cmp	[esi+50h], ebx
		jle	loc_1880

loc_16C9:				; CODE XREF: _check_chain_extensions+232j
		push	ebx
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	ecx, [esi+14h]
		add	esp, 8
		mov	edi, eax
		test	byte ptr [ecx+14h], 10h
		jnz	short loc_1708
		test	dword ptr [edi+28h], 200h
		jz	short loc_1708
		push	esi
		push	0
		mov	dword ptr [esi+64h], 22h ; '"'
		mov	[esi+60h], ebx
		mov	[esi+68h], edi
		call	[esp+28h+arg_0]
		add	esp, 8
		test	eax, eax
		jz	$end$65

loc_1708:				; CODE XREF: _check_chain_extensions+96j
					; _check_chain_extensions+9Fj
		cmp	[esp+20h+var_8], 0
		jnz	short loc_1737
		test	dword ptr [edi+28h], 400h
		jz	short loc_1737
		push	esi
		push	0
		mov	dword ptr [esi+64h], 28h ; '('
		mov	[esi+60h], ebx
		mov	[esi+68h], edi
		call	[esp+28h+arg_0]
		add	esp, 8
		test	eax, eax
		jz	$end$65

loc_1737:				; CODE XREF: _check_chain_extensions+C5j
					; _check_chain_extensions+CEj
		push	edi
		call	_X509_check_ca
		add	esp, 4
		mov	ecx, eax
		cmp	ebp, 0FFFFFFFFh
		jz	short loc_176A
		test	ebp, ebp
		jz	short loc_175D
		test	ecx, ecx
		jz	short loc_177C
		mov	eax, [esi+14h]
		test	byte ptr [eax+14h], 20h
		jz	short loc_179B
		cmp	ecx, 1
		jmp	short loc_177A
; ---------------------------------------------------------------------------

loc_175D:				; CODE XREF: _check_chain_extensions+101j
		test	ecx, ecx
		jz	short loc_179B
		mov	dword ptr [esi+64h], 25h ; '%'
		jmp	short loc_1783
; ---------------------------------------------------------------------------

loc_176A:				; CODE XREF: _check_chain_extensions+FDj
		mov	eax, [esi+14h]
		test	byte ptr [eax+14h], 20h
		jz	short loc_179B
		cmp	ecx, 1
		jz	short loc_179B
		test	ecx, ecx

loc_177A:				; CODE XREF: _check_chain_extensions+113j
		jz	short loc_179B

loc_177C:				; CODE XREF: _check_chain_extensions+105j
		mov	dword ptr [esi+64h], 18h

loc_1783:				; CODE XREF: _check_chain_extensions+120j
		push	esi
		push	0
		mov	[esi+60h], ebx
		mov	[esi+68h], edi
		call	[esp+28h+arg_0]
		add	esp, 8
		test	eax, eax
		jz	$end$65

loc_179B:				; CODE XREF: _check_chain_extensions+10Ej
					; _check_chain_extensions+117j	...
		mov	eax, [esi+14h]
		cmp	dword ptr [eax+18h], 0
		jle	short loc_17EE
		xor	eax, eax
		test	ebp, ebp
		setnle	al
		push	eax
		push	[esp+24h+var_4]
		push	edi
		call	_X509_check_purpose
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_17CB
		mov	ecx, [esi+14h]
		test	byte ptr [ecx+14h], 20h
		jz	short loc_17EE
		cmp	eax, 1
		jz	short loc_17EE

loc_17CB:				; CODE XREF: _check_chain_extensions+173j
		mov	ebp, [esp+20h+arg_0]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 1Ah
		mov	[esi+60h], ebx
		mov	[esi+68h], edi
		call	ebp
		add	esp, 8
		test	eax, eax
		jz	$end$65
		jmp	short loc_17F2
; ---------------------------------------------------------------------------

loc_17EE:				; CODE XREF: _check_chain_extensions+15Aj
					; _check_chain_extensions+17Cj	...
		mov	ebp, [esp+20h+arg_0]

loc_17F2:				; CODE XREF: _check_chain_extensions+1A4j
		cmp	ebx, 1
		jle	short loc_182D
		test	byte ptr [edi+28h], 20h
		jnz	short loc_182D
		mov	eax, [edi+20h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_182D
		mov	ecx, [esp+20h+var_C]
		inc	ecx
		add	eax, ecx
		mov	ecx, [esp+20h+var_10]
		cmp	ecx, eax
		jle	short loc_1831
		push	esi
		push	0
		mov	dword ptr [esi+64h], 19h
		mov	[esi+60h], ebx
		mov	[esi+68h], edi
		call	ebp
		add	esp, 8
		test	eax, eax
		jz	short $end$65

loc_182D:				; CODE XREF: _check_chain_extensions+1ADj
					; _check_chain_extensions+1B3j	...
		mov	ecx, [esp+20h+var_10]

loc_1831:				; CODE XREF: _check_chain_extensions+1CAj
		mov	eax, [edi+28h]
		test	al, 20h
		jnz	short loc_183D
		inc	ecx
		mov	[esp+20h+var_10], ecx

loc_183D:				; CODE XREF: _check_chain_extensions+1EEj
		test	eax, 400h
		jz	short loc_1871
		mov	eax, [edi+24h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1869
		cmp	ebx, eax
		jle	short loc_1869
		push	esi
		push	0
		mov	dword ptr [esi+64h], 26h ; '&'
		mov	[esi+60h], ebx
		mov	[esi+68h], edi
		call	ebp
		add	esp, 8
		test	eax, eax
		jz	short $end$65

loc_1869:				; CODE XREF: _check_chain_extensions+202j
					; _check_chain_extensions+206j
		inc	[esp+20h+var_C]
		xor	ebp, ebp
		jmp	short loc_1876
; ---------------------------------------------------------------------------

loc_1871:				; CODE XREF: _check_chain_extensions+1FAj
		mov	ebp, 1

loc_1876:				; CODE XREF: _check_chain_extensions+227j
		inc	ebx
		cmp	ebx, [esi+50h]
		jl	loc_16C9

loc_1880:				; CODE XREF: _check_chain_extensions+7Bj
		mov	eax, 1

$end$65:				; CODE XREF: _check_chain_extensions+BAj
					; _check_chain_extensions+E9j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_check_chain_extensions	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1890h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_crl	proc near		; DATA XREF: _X509_STORE_CTX_init:loc_624o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	[esp+10h+var_4], 0
		push	dword ptr [esi+54h]
		mov	edi, [esi+60h]
		call	_sk_num
		mov	ebx, [esi+6Ch]
		add	esp, 4
		dec	eax
		test	ebx, ebx
		jnz	short loc_190B
		cmp	edi, eax
		jge	short loc_18D6
		lea	eax, [edi+1]
		push	eax
		push	dword ptr [esi+54h]
		call	_sk_value
		add	esp, 8
		mov	ebx, eax
		jmp	short loc_190B
; ---------------------------------------------------------------------------

loc_18D6:				; CODE XREF: _check_crl+31j
		push	eax
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	ebx, eax
		mov	eax, [esi+28h]
		push	ebx
		push	ebx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jnz	short loc_190B
		push	esi
		push	eax
		mov	eax, [esi+20h]
		mov	dword ptr [esi+64h], 21h ; '!'
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	$err$74

loc_190B:				; CODE XREF: _check_crl+2Dj
					; _check_crl+44j ...
		push	ebp
		test	ebx, ebx
		jz	loc_1AEA
		mov	ebp, [esp+14h+arg_4]
		cmp	dword ptr [ebp+28h], 0
		jnz	loc_19C0
		test	byte ptr [ebx+28h], 2
		jz	short loc_194A
		test	byte ptr [ebx+2Ch], 2
		jnz	short loc_194A
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 23h ; '#'
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1AEF

loc_194A:				; CODE XREF: _check_crl+96j
					; _check_crl+9Cj
		test	byte ptr [esi+74h], 80h
		jnz	short loc_196C
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 2Ch ; ','
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1AEF

loc_196C:				; CODE XREF: _check_crl+BEj
		test	byte ptr [esi+74h], 8
		jnz	short loc_199E
		push	dword ptr [esi+6Ch]
		push	esi
		call	_check_crl_path
		add	esp, 8
		test	eax, eax
		jg	short loc_199E
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 36h ; '6'
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1AEF

loc_199E:				; CODE XREF: _check_crl+E0j
					; _check_crl+F0j
		test	byte ptr [ebp+1Ch], 2
		jz	short loc_19C0
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 29h ; ')'
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1AEF

loc_19C0:				; CODE XREF: _check_crl+8Cj
					; _check_crl+112j
		test	byte ptr [esi+74h], 40h
		jnz	loc_1A79
		mov	eax, [esi+14h]
		mov	[esi+70h], ebp
		test	byte ptr [eax+14h], 2
		jz	short loc_19DB
		lea	edi, [eax+8]
		jmp	short loc_19DD
; ---------------------------------------------------------------------------

loc_19DB:				; CODE XREF: _check_crl+144j
		xor	edi, edi

loc_19DD:				; CODE XREF: _check_crl+149j
		mov	eax, [ebp+0]
		push	edi
		push	dword ptr [eax+0Ch]
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jnz	short loc_1A1B
		push	esi
		push	eax
		mov	eax, [esi+20h]
		mov	dword ptr [esi+64h], 0Fh
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_1A33

loc_1A05:				; CODE XREF: _check_crl+1A1j
					; _check_crl+1E0j
		pop	ebp
		push	[esp+10h+var_4]
		xor	edi, edi
		call	_EVP_PKEY_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1A1B:				; CODE XREF: _check_crl+15Ej
		jle	short loc_1A33
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 0Bh
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1A05

loc_1A33:				; CODE XREF: _check_crl+173j
					; _check_crl:loc_1A1Bj
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_1A72
		push	edi
		push	eax
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jnz	short loc_1A54
		mov	dword ptr [esi+64h], 10h
		jmp	short loc_1A63
; ---------------------------------------------------------------------------

loc_1A54:				; CODE XREF: _check_crl+1B9j
		jns	short loc_1A72
		test	byte ptr [esi+74h], 2
		jnz	short loc_1A72
		mov	dword ptr [esi+64h], 0Ch

loc_1A63:				; CODE XREF: _check_crl+1C2j
		mov	eax, [esi+20h]
		push	esi
		push	0
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1A05

loc_1A72:				; CODE XREF: _check_crl+1ABj
					; _check_crl:loc_1A54j	...
		mov	dword ptr [esi+70h], 0

loc_1A79:				; CODE XREF: _check_crl+134j
		push	ebx
		call	_X509_get_pubkey
		mov	ebx, eax
		add	esp, 4
		mov	[esp+14h+var_4], ebx
		test	ebx, ebx
		jnz	short loc_1A9C
		mov	ecx, [esi+20h]
		push	esi
		push	eax
		mov	dword ptr [esi+64h], 6
		call	ecx
		jmp	short loc_1AE1
; ---------------------------------------------------------------------------

loc_1A9C:				; CODE XREF: _check_crl+1FAj
		mov	eax, [esi+14h]
		push	dword ptr [eax+14h]
		push	ebx
		push	ebp
		call	_X509_CRL_check_suiteb
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1AC4
		mov	[esi+64h], eax
		mov	eax, [esi+20h]
		push	esi
		push	0
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1AEF

loc_1AC4:				; CODE XREF: _check_crl+21Ej
		push	ebx
		push	ebp
		call	_X509_CRL_verify
		add	esp, 8
		test	eax, eax
		jg	short loc_1AEA
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 8
		call	eax

loc_1AE1:				; CODE XREF: _check_crl+20Aj
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1AEF

loc_1AEA:				; CODE XREF: _check_crl+7Ej
					; _check_crl+240j
		mov	edi, 1

loc_1AEF:				; CODE XREF: _check_crl+B4j
					; _check_crl+D6j ...
		pop	ebp

$err$74:				; CODE XREF: _check_crl+75j
		push	[esp+10h+var_4]
		call	_EVP_PKEY_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
_check_crl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B04h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_crl_chain proc near		; CODE XREF: _check_crl_path+93p

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	esi
		call	_sk_num
		dec	eax
		push	eax
		push	esi
		call	_sk_value
		mov	esi, [esp+14h+arg_8]
		mov	edi, eax
		push	esi
		call	_sk_num
		dec	eax
		push	eax
		push	esi
		call	_sk_value
		push	eax
		push	edi
		call	_X509_cmp
		add	esp, 20h
		neg	eax
		sbb	eax, eax
		inc	eax
		pop	edi
		pop	esi
		retn
_check_crl_chain endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_crl_path	proc near		; CODE XREF: _check_crl+E6p

var_88		= byte ptr -88h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_34		= dword	ptr -34h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 88h ; 'à'
		call	__chkstk
		push	esi
		mov	esi, [esp+8Ch+arg_0]
		cmp	dword ptr [esi+7Ch], 0
		jz	short loc_1B62
		xor	eax, eax
		pop	esi
		add	esp, 88h
		retn
; ---------------------------------------------------------------------------

loc_1B62:				; CODE XREF: _check_crl_path+16j
		push	dword ptr [esi+0Ch]
		lea	eax, [esp+90h+var_88]
		push	[esp+90h+arg_4]
		push	dword ptr [esi]
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1B8A
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 88h
		retn
; ---------------------------------------------------------------------------

loc_1B8A:				; CODE XREF: _check_crl_path+3Dj
		mov	eax, [esi+10h]
		mov	[esp+8Ch+var_78], eax
		mov	eax, [esp+8Ch+var_74]
		push	edi
		mov	edi, [esi+14h]
		test	eax, eax
		jz	short loc_1BA6
		push	eax
		call	_X509_VERIFY_PARAM_free
		add	esp, 4

loc_1BA6:				; CODE XREF: _check_crl_path+5Bj
		mov	eax, [esi+20h]
		mov	[esp+90h+var_68], eax
		lea	eax, [esp+90h+var_88]
		push	eax
		mov	[esp+94h+var_74], edi
		mov	[esp+94h+var_C], esi
		call	_X509_verify_cert
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	short $err$10
		push	[esp+90h+var_34]
		push	dword ptr [esi+54h]
		push	esi
		call	_check_crl_chain
		add	esp, 0Ch
		mov	edi, eax

$err$10:				; CODE XREF: _check_crl_path+89j
		lea	eax, [esp+90h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 88h
		retn
_check_crl_path	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1BF8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_crl_time	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_8]
		test	edi, edi
		jz	short loc_1C0F
		mov	[esi+70h], ebx

loc_1C0F:				; CODE XREF: _check_crl_time+12j
		mov	eax, [esi+14h]
		test	byte ptr [eax+14h], 2
		jz	short loc_1C1D
		lea	ebp, [eax+8]
		jmp	short loc_1C1F
; ---------------------------------------------------------------------------

loc_1C1D:				; CODE XREF: _check_crl_time+1Ej
		xor	ebp, ebp

loc_1C1F:				; CODE XREF: _check_crl_time+23j
		mov	eax, [ebx]
		push	ebp
		push	dword ptr [eax+0Ch]
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jnz	short loc_1C52
		test	edi, edi
		jz	short loc_1C4B
		mov	dword ptr [esi+64h], 0Fh

loc_1C3C:				; CODE XREF: _check_crl_time+67j
		mov	eax, [esi+20h]
		push	esi
		push	0
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_1C61

loc_1C4B:				; CODE XREF: _check_crl_time+3Bj
					; _check_crl_time+5Ej ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1C52:				; CODE XREF: _check_crl_time+37j
		jle	short loc_1C61
		test	edi, edi
		jz	short loc_1C4B
		mov	dword ptr [esi+64h], 0Bh
		jmp	short loc_1C3C
; ---------------------------------------------------------------------------

loc_1C61:				; CODE XREF: _check_crl_time+51j
					; _check_crl_time:loc_1C52j
		mov	eax, [ebx]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_1C92
		push	ebp
		push	eax
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jnz	short loc_1CA7
		test	edi, edi
		jz	short loc_1C4B
		mov	dword ptr [esi+64h], 10h

loc_1C83:				; CODE XREF: _check_crl_time+C2j
		mov	eax, [esi+20h]
		push	esi
		push	0
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1C4B

loc_1C92:				; CODE XREF: _check_crl_time+70j
					; _check_crl_time:loc_1CA7j ...
		test	edi, edi
		jz	short loc_1C9D
		mov	dword ptr [esi+70h], 0

loc_1C9D:				; CODE XREF: _check_crl_time+9Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1CA7:				; CODE XREF: _check_crl_time+7Ej
		jns	short loc_1C92
		test	byte ptr [esi+74h], 2
		jnz	short loc_1C92
		test	edi, edi
		jz	short loc_1C4B
		mov	dword ptr [esi+64h], 0Ch
		jmp	short loc_1C83
_check_crl_time	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1CBCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_delta_base proc near		; CODE XREF: _get_delta_sk+4Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+28h], 0
		jnz	short loc_1CCB
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1CCB:				; CODE XREF: _check_delta_base+9j
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	dword ptr [edi+24h], 0
		jz	short loc_1D21
		mov	eax, [esi]
		push	dword ptr [eax+8]
		mov	eax, [edi]
		push	dword ptr [eax+8]
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1D21
		push	5Ah ; 'Z'
		push	edi
		push	esi
		call	_crl_extension_match
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1D21
		push	302h
		push	edi
		push	esi
		call	_crl_extension_match
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1D21
		push	dword ptr [edi+24h]
		push	dword ptr [esi+28h]
		call	_ASN1_INTEGER_cmp
		add	esp, 8
		test	eax, eax
		jle	short loc_1D26

loc_1D21:				; CODE XREF: _check_delta_base+18j
					; _check_delta_base+2Ej ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D26:				; CODE XREF: _check_delta_base+63j
		push	dword ptr [edi+24h]
		push	dword ptr [esi+24h]
		call	_ASN1_INTEGER_cmp
		add	esp, 8
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
_check_delta_base endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_hosts	proc near		; CODE XREF: _check_id+17p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		push	edi
		push	dword ptr [ebx]
		call	_sk_num
		lea	ebp, [ebx+8]
		mov	edi, eax
		mov	eax, [ebp+0]
		add	esp, 4
		test	eax, eax
		jz	short loc_1D6E
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [ebp+0], 0

loc_1D6E:				; CODE XREF: _check_hosts+1Cj
		xor	esi, esi
		test	edi, edi
		jle	short loc_1D98

loc_1D74:				; CODE XREF: _check_hosts+56j
		push	esi
		push	dword ptr [ebx]
		call	_sk_value
		push	ebp
		push	dword ptr [ebx+4]
		push	0
		push	eax
		push	[esp+28h+arg_0]
		call	_X509_check_host
		add	esp, 1Ch
		test	eax, eax
		jg	short loc_1DA4
		inc	esi
		cmp	esi, edi
		jl	short loc_1D74

loc_1D98:				; CODE XREF: _check_hosts+32j
		xor	eax, eax
		test	edi, edi
		pop	edi
		pop	esi
		pop	ebp
		setz	al
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1DA4:				; CODE XREF: _check_hosts+51j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_check_hosts	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1DB0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_id	proc near		; CODE XREF: _X509_verify_cert+4C0p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	eax, [esi+14h]
		mov	ebx, [esi+8]
		mov	edi, [eax+28h]
		cmp	dword ptr [edi], 0
		jz	short loc_1DFC
		push	edi
		push	ebx
		call	_check_hosts
		add	esp, 8
		test	eax, eax
		jg	short loc_1DFC
		mov	eax, [esi+8]
		mov	[esi+68h], eax
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 3Eh ; '>'
		mov	dword ptr [esi+60h], 0
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_1DFC

loc_1DF6:				; CODE XREF: _check_id+87j
					; _check_id+C4j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1DFC:				; CODE XREF: _check_id+13j
					; _check_id+21j ...
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1E39
		push	0
		push	dword ptr [edi+10h]
		push	eax
		push	ebx
		call	_X509_check_email
		add	esp, 10h
		test	eax, eax
		jg	short loc_1E39
		mov	eax, [esi+8]
		mov	[esi+68h], eax
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 3Fh ; '?'
		mov	dword ptr [esi+60h], 0
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1DF6

loc_1E39:				; CODE XREF: _check_id+51j
					; _check_id+64j
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_1E76
		push	0
		push	dword ptr [edi+18h]
		push	eax
		push	ebx
		call	_X509_check_ip
		add	esp, 10h
		test	eax, eax
		jg	short loc_1E76
		mov	eax, [esi+8]
		mov	[esi+68h], eax
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 40h ; '@'
		mov	dword ptr [esi+60h], 0
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1DF6

loc_1E76:				; CODE XREF: _check_id+8Ej
					; _check_id+A1j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_check_id	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_id_error	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	[ecx+64h], eax
		mov	eax, [ecx+8]
		mov	[ecx+68h], eax
		mov	dword ptr [ecx+60h], 0
		mov	[esp+arg_4], ecx
		mov	[esp+arg_0], 0
		mov	eax, [ecx+20h]
		jmp	eax
_check_id_error	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1EACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_issued	proc near		; DATA XREF: _X509_STORE_CTX_init:loc_59Ao

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_8]
		push	esi
		push	edi
		call	_X509_check_issued
		mov	edx, eax
		add	esp, 8
		test	edx, edx
		jnz	short loc_1ECC
		pop	edi
		lea	eax, [edx+1]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1ECC:				; CODE XREF: _check_issued+18j
		mov	ecx, [esp+8+arg_0]
		mov	eax, [ecx+14h]
		test	byte ptr [eax+14h], 1
		jnz	short loc_1EDE
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1EDE:				; CODE XREF: _check_issued+2Bj
		mov	eax, [ecx+20h]
		push	ecx
		push	0
		mov	[ecx+64h], edx
		mov	[ecx+68h], esi
		mov	[ecx+6Ch], edi
		call	eax
		add	esp, 8
		pop	edi
		pop	esi
		retn
_check_issued	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1EF8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_name_constraints	proc near	; CODE XREF: _X509_verify_cert+4ADp

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	dword ptr [edi+54h]
		call	_sk_num
		mov	ebx, eax
		add	esp, 4
		sub	ebx, 1
		js	short loc_1F8B
		nop	word ptr [eax+eax+00h]

loc_1F18:				; CODE XREF: _check_name_constraints+91j
		push	ebx
		push	dword ptr [edi+54h]
		call	_sk_value
		add	esp, 8
		mov	ebp, eax
		test	ebx, ebx
		jz	short loc_1F30
		test	byte ptr [ebp+28h], 20h
		jnz	short loc_1F86

loc_1F30:				; CODE XREF: _check_name_constraints+30j
		push	dword ptr [edi+54h]
		call	_sk_num
		add	esp, 4
		lea	esi, [eax-1]
		cmp	esi, ebx
		jle	short loc_1F86
		nop	word ptr [eax+eax+00h]

loc_1F48:				; CODE XREF: _check_name_constraints+8Cj
		push	esi
		push	dword ptr [edi+54h]
		call	_sk_value
		add	esp, 8
		mov	eax, [eax+4Ch]
		test	eax, eax
		jz	short loc_1F81
		push	eax
		push	ebp
		call	_NAME_CONSTRAINTS_check
		add	esp, 8
		test	eax, eax
		jz	short loc_1F81
		mov	[edi+64h], eax
		mov	eax, [edi+20h]
		push	edi
		push	0
		mov	[edi+60h], ebx
		mov	[edi+68h], ebp
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1F95

loc_1F81:				; CODE XREF: _check_name_constraints+61j
					; _check_name_constraints+6Fj
		dec	esi
		cmp	esi, ebx
		jg	short loc_1F48

loc_1F86:				; CODE XREF: _check_name_constraints+36j
					; _check_name_constraints+48j
		sub	ebx, 1
		jns	short loc_1F18

loc_1F8B:				; CODE XREF: _check_name_constraints+18j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1F95:				; CODE XREF: _check_name_constraints+87j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
_check_name_constraints	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_policy	proc near		; DATA XREF: _X509_STORE_CTX_init+200o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+7Ch], 0
		jz	short loc_1FAE

loc_1FA7:				; CODE XREF: _check_policy+E5j
					; _check_policy+106j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1FAE:				; CODE XREF: _check_policy+9j
		mov	eax, [esi+14h]
		push	dword ptr [eax+14h]
		push	dword ptr [eax+24h]
		lea	eax, [esi+5Ch]
		push	dword ptr [esi+54h]
		push	eax
		lea	eax, [esi+58h]
		push	eax
		call	_X509_policy_check
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1FED
		push	660h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	41h ; 'A'
		push	91h ; 'ë'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1FED:				; CODE XREF: _check_policy+30j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_2057
		push	edi
		push	dword ptr [esi+54h]
		lea	edi, [eax+2]
		call	_sk_num
		add	esp, 4
		cmp	eax, edi
		jle	short loc_204A
		nop	dword ptr [eax+00000000h]

loc_200C:				; CODE XREF: _check_policy+ACj
		push	edi
		push	dword ptr [esi+54h]
		call	_sk_value
		add	esp, 8
		test	dword ptr [eax+28h], 800h
		jz	short loc_203A
		mov	[esi+68h], eax
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 2Ah ; '*'
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_2052

loc_203A:				; CODE XREF: _check_policy+83j
		push	dword ptr [esi+54h]
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_200C

loc_204A:				; CODE XREF: _check_policy+67j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2052:				; CODE XREF: _check_policy+9Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2057:				; CODE XREF: _check_policy+54j
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_2077
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+68h], 0
		mov	dword ptr [esi+64h], 2Bh ; '+'
		call	eax
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2077:				; CODE XREF: _check_policy+BEj
		mov	eax, [esi+14h]
		test	dword ptr [eax+14h], 800h
		jz	loc_1FA7
		mov	eax, [esi+20h]
		push	esi
		push	2
		mov	dword ptr [esi+68h], 0
		mov	dword ptr [esi+64h], 0
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	loc_1FA7
		pop	esi
		retn
_check_policy	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_revocation proc near		; DATA XREF: _X509_STORE_CTX_init:loc_5F6o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 10h
		call	__chkstk
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	eax, [esi+14h]
		mov	eax, [eax+14h]
		test	al, 4
		jnz	short loc_20CF

loc_20C5:				; CODE XREF: _check_revocation+3Bj
		mov	eax, 1
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_20CF:				; CODE XREF: _check_revocation+17j
		test	al, 8
		jz	short loc_20E3
		push	dword ptr [esi+54h]
		call	_sk_num
		add	esp, 4
		lea	ecx, [eax-1]
		jmp	short loc_20EB
; ---------------------------------------------------------------------------

loc_20E3:				; CODE XREF: _check_revocation+25j
		cmp	dword ptr [esi+7Ch], 0
		jnz	short loc_20C5
		xor	ecx, ecx

loc_20EB:				; CODE XREF: _check_revocation+35j
		push	ebx
		xor	eax, eax
		mov	[esp+18h+var_8], ecx
		mov	[esp+18h+var_C], eax
		push	ebp
		push	edi
		test	ecx, ecx
		js	loc_223A

loc_2100:				; CODE XREF: _check_revocation+188j
		push	eax
		push	dword ptr [esi+54h]
		xor	ebx, ebx
		mov	[esi+60h], eax
		mov	[esp+28h+arg_0], 0
		mov	[esp+28h+var_10], ebx
		call	_sk_value
		mov	ebp, eax
		mov	[esi+6Ch], ebx
		add	esp, 8
		mov	[esi+68h], ebp
		mov	[esi+74h], ebx
		mov	[esi+78h], ebx
		nop

loc_212C:				; CODE XREF: _check_revocation+142j
		mov	ecx, [esi+30h]
		mov	eax, [esi+78h]
		mov	[esp+20h+var_4], eax
		push	ebp
		test	ecx, ecx
		jz	short loc_2148
		lea	eax, [esp+24h+arg_0]
		push	eax
		push	esi
		call	ecx
		add	esp, 0Ch
		jmp	short loc_215F
; ---------------------------------------------------------------------------

loc_2148:				; CODE XREF: _check_revocation+8Dj
		lea	eax, [esp+24h+var_10]
		push	eax
		lea	eax, [esp+28h+arg_0]
		push	eax
		push	esi
		call	_get_crl_delta
		mov	ebx, [esp+30h+var_10]
		add	esp, 10h

loc_215F:				; CODE XREF: _check_revocation+9Aj
		test	eax, eax
		jz	loc_21F6
		mov	eax, [esp+20h+arg_0]
		push	eax
		mov	[esi+70h], eax
		mov	eax, [esi+34h]
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	$err$48
		test	ebx, ebx
		jz	short loc_21AC
		mov	eax, [esi+34h]
		push	ebx
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$48
		mov	eax, [esi+38h]
		push	ebp
		push	ebx
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short $err$48
		cmp	edi, 2
		jz	short loc_21C0

loc_21AC:				; CODE XREF: _check_revocation+D8j
		mov	eax, [esi+38h]
		push	ebp
		push	[esp+24h+arg_0]
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short $err$48

loc_21C0:				; CODE XREF: _check_revocation+FEj
		push	[esp+20h+arg_0]
		call	_X509_CRL_free
		push	ebx
		call	_X509_CRL_free
		mov	eax, [esi+78h]
		xor	ebx, ebx
		add	esp, 8
		mov	[esp+20h+arg_0], 0
		mov	[esp+20h+var_10], ebx
		cmp	[esp+20h+var_4], eax
		jz	short loc_21F6
		cmp	eax, 807Fh
		jnz	loc_212C
		jmp	short $err$48
; ---------------------------------------------------------------------------

loc_21F6:				; CODE XREF: _check_revocation+B5j
					; _check_revocation+13Bj
		mov	eax, [esi+20h]
		push	esi
		push	0
		mov	dword ptr [esi+64h], 3
		call	eax
		mov	edi, eax
		add	esp, 8

$err$48:				; CODE XREF: _check_revocation+D0j
					; _check_revocation+E8j ...
		push	[esp+20h+arg_0]
		call	_X509_CRL_free
		push	ebx
		call	_X509_CRL_free
		add	esp, 8
		mov	dword ptr [esi+70h], 0
		test	edi, edi
		jz	short loc_2247
		mov	eax, [esp+20h+var_C]
		inc	eax
		mov	[esp+20h+var_C], eax
		cmp	eax, [esp+20h+var_8]
		jle	loc_2100

loc_223A:				; CODE XREF: _check_revocation+4Ej
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, 1
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_2247:				; CODE XREF: _check_revocation+179j
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
_check_revocation endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2254h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_trust	proc near		; CODE XREF: _X509_verify_cert+333p

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		push	dword ptr [esi+54h]
		mov	ebp, [esi+20h]
		mov	edi, [esi+50h]
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jge	short loc_22C3
		nop	dword ptr [eax]

loc_2274:				; CODE XREF: _check_trust+6Dj
		push	edi
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	ecx, [esi+14h]
		mov	ebx, eax
		push	0
		push	dword ptr [ecx+1Ch]
		push	ebx
		call	_X509_check_trust
		add	esp, 14h
		cmp	eax, 1
		jz	short loc_2314
		cmp	eax, 2
		jnz	short loc_22B3
		push	esi
		push	0
		mov	[esi+60h], edi
		mov	[esi+68h], ebx
		mov	dword ptr [esi+64h], 1Ch
		call	ebp
		add	esp, 8
		test	eax, eax
		jz	short loc_231E

loc_22B3:				; CODE XREF: _check_trust+44j
		push	dword ptr [esi+54h]
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_2274

loc_22C3:				; CODE XREF: _check_trust+1Bj
		mov	eax, [esi+14h]
		test	dword ptr [eax+14h], 80000h
		jz	short loc_2328
		push	dword ptr [esi+54h]
		call	_sk_num
		add	esp, 4
		cmp	[esi+50h], eax
		jl	short loc_2314
		push	0
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	edi, eax
		push	edi
		push	esi
		call	_lookup_cert_match
		add	esp, 10h
		test	eax, eax
		jz	short loc_2328
		push	eax
		push	0
		push	dword ptr [esi+54h]
		call	_sk_set
		push	edi
		call	_X509_free
		add	esp, 10h
		mov	dword ptr [esi+50h], 0

loc_2314:				; CODE XREF: _check_trust+3Fj
					; _check_trust+89j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_231E:				; CODE XREF: _check_trust+5Dj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 2
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2328:				; CODE XREF: _check_trust+79j
					; _check_trust+A3j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 3
		pop	ebx
		retn
_check_trust	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2334h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_crl_akid_check	proc near		; CODE XREF: _get_crl_score+11Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	eax, [ebp+0]
		push	dword ptr [edi+54h]
		mov	eax, [eax+8]
		mov	esi, [edi+60h]
		mov	[esp+14h+arg_4], eax
		call	_sk_num
		dec	eax
		add	esp, 4
		cmp	esi, eax
		jz	short loc_235E
		inc	esi

loc_235E:				; CODE XREF: _crl_akid_check+27j
		push	esi
		push	dword ptr [edi+54h]
		call	_sk_value
		push	dword ptr [ebp+14h]
		mov	ebx, eax
		push	ebx
		call	_X509_check_akid
		add	esp, 10h
		test	eax, eax
		jnz	short loc_2393
		mov	ecx, [esp+10h+arg_C]
		mov	eax, [ecx]
		test	al, 20h
		jz	short loc_2393
		or	eax, 1Ch
		mov	[ecx], eax
		mov	eax, [esp+10h+arg_8]
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax], ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2393:				; CODE XREF: _crl_akid_check+43j
					; _crl_akid_check+4Dj
		push	dword ptr [edi+54h]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jge	short loc_23EC
		nop

loc_23A4:				; CODE XREF: _crl_akid_check+B6j
		push	esi
		push	dword ptr [edi+54h]
		call	_sk_value
		add	esp, 8
		mov	ebx, eax
		push	[esp+10h+arg_4]
		push	ebx
		call	_X509_get_subject_name
		add	esp, 4
		push	eax
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_23DC
		push	dword ptr [ebp+14h]
		push	ebx
		call	_X509_check_akid
		add	esp, 8
		test	eax, eax
		jz	short loc_2456

loc_23DC:				; CODE XREF: _crl_akid_check+96j
		push	dword ptr [edi+54h]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_23A4

loc_23EC:				; CODE XREF: _crl_akid_check+6Dj
		mov	eax, [edi+14h]
		test	dword ptr [eax+14h], 1000h
		jz	short loc_2475
		push	dword ptr [edi+0Ch]
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2475

loc_2409:				; CODE XREF: _crl_akid_check+11Bj
		push	esi
		push	dword ptr [edi+0Ch]
		call	_sk_value
		add	esp, 8
		mov	ebx, eax
		push	[esp+10h+arg_4]
		push	ebx
		call	_X509_get_subject_name
		add	esp, 4
		push	eax
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_2441
		push	dword ptr [ebp+14h]
		push	ebx
		call	_X509_check_akid
		add	esp, 8
		test	eax, eax
		jz	short loc_2468

loc_2441:				; CODE XREF: _crl_akid_check+FBj
		push	dword ptr [edi+0Ch]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2409
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2456:				; CODE XREF: _crl_akid_check+A6j
		mov	eax, [esp+10h+arg_C]
		pop	edi
		pop	esi
		pop	ebp
		or	dword ptr [eax], 0Ch
		mov	eax, [esp+4+arg_8]
		mov	[eax], ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2468:				; CODE XREF: _crl_akid_check+10Bj
		mov	eax, [esp+10h+arg_8]
		mov	[eax], ebx
		mov	eax, [esp+10h+arg_C]
		or	dword ptr [eax], 4

loc_2475:				; CODE XREF: _crl_akid_check+C2j
					; _crl_akid_check+D3j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_crl_akid_check	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 247Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_crl_crldp_check proc near		; CODE XREF: _get_crl_score+13Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_4]
		mov	eax, [edi+1Ch]
		test	al, 10h
		jz	short loc_248C
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_248C:				; CODE XREF: _crl_crldp_check+Aj
		push	ebx
		mov	ebx, [esp+8+arg_0]
		test	byte ptr [ebx+28h], 10h
		jz	short loc_24A0
		test	al, 4
		jz	short loc_24A9
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_24A0:				; CODE XREF: _crl_crldp_check+19j
		test	al, 8
		jz	short loc_24A9
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_24A9:				; CODE XREF: _crl_crldp_check+1Dj
					; _crl_crldp_check+26j
		mov	ecx, [esp+8+arg_C]
		mov	eax, [edi+20h]
		push	ebp
		push	esi
		mov	[ecx], eax
		xor	esi, esi
		push	dword ptr [ebx+44h]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2511
		nop	dword ptr [eax+00000000h]

loc_24CC:				; CODE XREF: _crl_crldp_check+93j
		push	esi
		push	dword ptr [ebx+44h]
		call	_sk_value
		push	[esp+18h+arg_8]
		mov	ebp, eax
		push	edi
		push	ebp
		call	_crldp_check_crlissuer
		add	esp, 14h
		test	eax, eax
		jz	short loc_2501
		mov	ecx, [edi+18h]
		test	ecx, ecx
		jz	short loc_252B
		push	dword ptr [ecx]
		push	dword ptr [ebp+0]
		call	_idp_check_dp
		add	esp, 8
		test	eax, eax
		jnz	short loc_252B

loc_2501:				; CODE XREF: _crl_crldp_check+6Bj
		push	dword ptr [ebx+44h]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_24CC

loc_2511:				; CODE XREF: _crl_crldp_check+47j
		mov	eax, [edi+18h]
		test	eax, eax
		jz	short loc_251D
		cmp	dword ptr [eax], 0
		jnz	short loc_2524

loc_251D:				; CODE XREF: _crl_crldp_check+9Aj
		test	byte ptr [esp+10h+arg_8], 20h
		jnz	short loc_2534

loc_2524:				; CODE XREF: _crl_crldp_check+9Fj
		pop	esi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_252B:				; CODE XREF: _crl_crldp_check+72j
					; _crl_crldp_check+83j
		mov	ecx, [esp+10h+arg_C]
		mov	eax, [ebp+0Ch]
		and	[ecx], eax

loc_2534:				; CODE XREF: _crl_crldp_check+A6j
		pop	esi
		pop	ebp
		pop	ebx
		mov	eax, 1
		pop	edi
		retn
_crl_crldp_check endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2540h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_crl_extension_match proc near		; CODE XREF: _X509_CRL_diff+78p
					; _X509_CRL_diff+A9p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		push	0FFFFFFFFh
		push	esi
		push	edi
		call	_X509_CRL_get_ext_by_NID
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_2587
		push	ebx
		push	esi
		push	edi
		call	_X509_CRL_get_ext_by_NID
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_2573
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2573:				; CODE XREF: _crl_extension_match+2Bj
		push	ebx
		push	edi
		call	_X509_CRL_get_ext
		push	eax
		call	_X509_EXTENSION_get_data
		add	esp, 0Ch
		mov	edi, eax
		jmp	short loc_2589
; ---------------------------------------------------------------------------

loc_2587:				; CODE XREF: _crl_extension_match+1Bj
		xor	edi, edi

loc_2589:				; CODE XREF: _crl_extension_match+45j
		mov	ebx, [esp+0Ch+arg_4]
		push	ebp
		push	0FFFFFFFFh
		push	esi
		push	ebx
		call	_X509_CRL_get_ext_by_NID
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	short loc_25C2
		push	ebp
		push	esi
		push	ebx
		call	_X509_CRL_get_ext_by_NID
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_25EC
		push	ebp
		push	ebx
		call	_X509_CRL_get_ext
		push	eax
		call	_X509_EXTENSION_get_data
		add	esp, 0Ch
		jmp	short loc_25C4
; ---------------------------------------------------------------------------

loc_25C2:				; CODE XREF: _crl_extension_match+5Ej
		xor	eax, eax

loc_25C4:				; CODE XREF: _crl_extension_match+80j
		test	edi, edi
		jnz	short loc_25D4
		test	eax, eax
		jnz	short loc_25EC
		pop	ebp
		lea	eax, [edi+1]
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_25D4:				; CODE XREF: _crl_extension_match+86j
		test	eax, eax
		jz	short loc_25EC
		push	eax
		push	edi
		call	_ASN1_OCTET_STRING_cmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		inc	eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_25EC:				; CODE XREF: _crl_extension_match+6Ej
					; _crl_extension_match+8Aj ...
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_crl_extension_match endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 25F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_crldp_check_crlissuer proc near	; CODE XREF: _crl_crldp_check+61p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [eax]
		mov	ebx, [eax+8]
		mov	eax, [edi+8]
		test	eax, eax
		jnz	short loc_2617
		mov	eax, [esp+8+arg_8]
		shr	eax, 5
		pop	edi
		and	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2617:				; CODE XREF: _crldp_check_crlissuer+14j
		push	esi
		push	eax
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2658

loc_2627:				; CODE XREF: _crldp_check_crlissuer+62j
		push	esi
		push	dword ptr [edi+8]
		call	_sk_value
		add	esp, 8
		cmp	dword ptr [eax], 4
		jnz	short loc_2648
		push	ebx
		push	dword ptr [eax+4]
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jz	short loc_265E

loc_2648:				; CODE XREF: _crldp_check_crlissuer+42j
		push	dword ptr [edi+8]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2627

loc_2658:				; CODE XREF: _crldp_check_crlissuer+31j
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_265E:				; CODE XREF: _crldp_check_crlissuer+52j
		pop	esi
		pop	edi
		mov	eax, 1
		pop	ebx
		retn
_crldp_check_crlissuer endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2668h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_find_issuer	proc near		; CODE XREF: _X509_verify_cert+166p
					; _get_issuer_sk+Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		xor	esi, esi
		push	edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_26B1
		mov	ebp, [esp+10h+arg_0]
		nop	dword ptr [eax+eax+00h]

loc_2688:				; CODE XREF: _find_issuer+47j
		push	esi
		push	edi
		call	_sk_value
		mov	ecx, [ebp+28h]
		mov	ebx, eax
		push	ebx
		push	[esp+1Ch+arg_8]
		push	ebp
		call	ecx
		add	esp, 14h
		test	eax, eax
		jnz	short loc_26B8
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2688

loc_26B1:				; CODE XREF: _find_issuer+15j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_26B8:				; CODE XREF: _find_issuer+39j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
_find_issuer	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_get_crl_delta	proc near		; CODE XREF: _check_cert+67p
					; _check_revocation+A7p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 10h
		call	__chkstk
		push	esi
		push	edi
		push	[esp+18h+arg_C]
		mov	[esp+1Ch+var_C], 0
		mov	[esp+1Ch+var_8], 0
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_4], 0
		call	_X509_get_issuer_name
		mov	esi, [esp+1Ch+arg_0]
		mov	edi, eax
		lea	eax, [esp+1Ch+arg_0]
		push	dword ptr [esi+10h]
		mov	ecx, [esi+78h]
		push	eax
		lea	eax, [esp+24h+var_8]
		mov	[esp+24h+arg_0], ecx
		push	eax
		lea	eax, [esp+28h+var_C]
		push	eax
		lea	eax, [esp+2Ch+var_4]
		push	eax
		lea	eax, [esp+30h+var_10]
		push	eax
		push	esi
		call	_get_crl_sk
		add	esp, 20h
		test	eax, eax
		jnz	short $done$8
		mov	eax, [esi+44h]
		push	edi
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_2743
		mov	ecx, [esp+18h+var_10]
		test	ecx, ecx
		jnz	short loc_2779

loc_2743:				; CODE XREF: _get_crl_delta+79j
		push	edi
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_4]
		push	eax
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	esi
		call	_get_crl_sk
		push	offset _X509_CRL_free
		push	edi
		call	_sk_pop_free
		add	esp, 24h

$done$8:				; CODE XREF: _get_crl_delta+69j
		mov	ecx, [esp+18h+var_10]
		test	ecx, ecx
		jz	short loc_27A9

loc_2779:				; CODE XREF: _get_crl_delta+81j
		mov	eax, [esp+18h+var_C]
		mov	[esi+6Ch], eax
		mov	eax, [esp+18h+var_8]
		mov	[esi+74h], eax
		mov	eax, [esp+18h+arg_0]
		mov	[esi+78h], eax
		mov	eax, [esp+18h+arg_4]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	ecx, [esp+10h+arg_8]
		mov	eax, [esp+10h+var_4]
		mov	[ecx], eax
		mov	eax, 1
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_27A9:				; CODE XREF: _get_crl_delta+B7j
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
_get_crl_delta	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_get_crl_score	proc near		; CODE XREF: _get_crl_sk+70p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_C]
		xor	esi, esi
		mov	ebp, [ebp+0]
		mov	[esp+10h+var_4], esi
		mov	ecx, [edi+1Ch]
		test	cl, 2
		jz	short loc_27E1
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_27E1:				; CODE XREF: _get_crl_score+24j
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		mov	eax, [ebx+14h]
		test	dword ptr [eax+14h], 1000h
		jnz	short loc_27FF
		test	cl, 60h
		jz	short loc_281A
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_27FF:				; CODE XREF: _get_crl_score+3Cj
		test	cl, 40h
		jz	short loc_2815
		mov	eax, ebp
		not	eax
		test	[edi+20h], eax
		jnz	short loc_281A
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2815:				; CODE XREF: _get_crl_score+4Ej
		cmp	[edi+28h], esi
		jnz	short loc_283E

loc_281A:				; CODE XREF: _get_crl_score+41j
					; _get_crl_score+57j
		mov	eax, [edi]
		push	dword ptr [eax+8]
		push	[esp+18h+arg_10]
		call	_X509_get_issuer_name
		add	esp, 4
		push	eax
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jz	short loc_2846
		test	byte ptr [edi+1Ch], 20h
		jnz	short loc_284F

loc_283E:				; CODE XREF: _get_crl_score+64j
					; _get_crl_score+129j ...
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2846:				; CODE XREF: _get_crl_score+82j
		mov	esi, 20h ; ' '
		mov	[esp+14h+var_4], esi

loc_284F:				; CODE XREF: _get_crl_score+88j
		test	dword ptr [edi+10h], 200h
		jnz	short loc_2862
		or	esi, 100h
		mov	[esp+14h+var_4], esi

loc_2862:				; CODE XREF: _get_crl_score+A2j
		mov	ebx, [ebx+14h]
		test	byte ptr [ebx+14h], 2
		jz	short loc_2870
		add	ebx, 8
		jmp	short loc_2872
; ---------------------------------------------------------------------------

loc_2870:				; CODE XREF: _get_crl_score+B5j
		xor	ebx, ebx

loc_2872:				; CODE XREF: _get_crl_score+BAj
		mov	eax, [edi]
		push	ebx
		push	dword ptr [eax+0Ch]
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jz	short loc_28BF
		jg	short loc_28BF
		mov	eax, [edi]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_28B2
		push	ebx
		push	eax
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		mov	eax, [esp+14h+arg_0]
		jz	short loc_28C3
		jns	short loc_28B6
		test	byte ptr [eax+74h], 2
		jz	short loc_28C3
		or	esi, 40h
		mov	[esp+14h+var_4], esi
		jmp	short loc_28C3
; ---------------------------------------------------------------------------

loc_28B2:				; CODE XREF: _get_crl_score+D9j
		mov	eax, [esp+14h+arg_0]

loc_28B6:				; CODE XREF: _get_crl_score+EDj
		or	esi, 40h
		mov	[esp+14h+var_4], esi
		jmp	short loc_28C3
; ---------------------------------------------------------------------------

loc_28BF:				; CODE XREF: _get_crl_score+CEj
					; _get_crl_score+D0j
		mov	eax, [esp+14h+arg_0]

loc_28C3:				; CODE XREF: _get_crl_score+EBj
					; _get_crl_score+F3j ...
		lea	ecx, [esp+14h+var_4]
		push	ecx
		push	[esp+18h+arg_4]
		push	edi
		push	eax
		call	_crl_akid_check
		mov	ebx, [esp+24h+var_4]
		add	esp, 10h
		test	bl, 4
		jz	loc_283E
		lea	eax, [esp+14h+arg_C]
		push	eax
		push	ebx
		push	edi
		push	[esp+20h+arg_10]
		call	_crl_crldp_check
		add	esp, 10h
		test	eax, eax
		jz	short loc_2912
		mov	ecx, [esp+14h+arg_C]
		mov	eax, ebp
		not	eax
		test	ecx, eax
		jz	loc_283E
		or	ebp, ecx
		or	ebx, 80h

loc_2912:				; CODE XREF: _get_crl_score+144j
		mov	eax, [esp+14h+arg_8]
		mov	[eax], ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ecx
		retn
_get_crl_score	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2920h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_get_crl_sk	proc near		; CODE XREF: _get_crl_delta+5Fp
					; _get_crl_delta+9Ep

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 18h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+1Ch+arg_10]
		xor	eax, eax
		push	ebp
		mov	[esp+20h+var_C], eax
		xor	ecx, ecx
		mov	eax, [esp+20h+arg_0]
		xor	ebp, ebp
		mov	ebx, [ebx]
		push	esi
		push	edi
		mov	eax, [eax+68h]
		xor	esi, esi
		mov	edi, [esp+28h+arg_18]
		push	edi
		mov	[esp+2Ch+var_8], eax
		mov	[esp+2Ch+var_18], ebp
		mov	[esp+2Ch+var_10], ecx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_2A39

loc_2968:				; CODE XREF: _get_crl_sk+9Ej
		push	esi
		push	edi
		call	_sk_value
		push	[esp+30h+var_8]
		mov	ecx, [esp+34h+arg_14]
		push	eax
		mov	[esp+38h+var_4], eax
		lea	eax, [esp+38h+var_14]
		push	eax
		mov	ecx, [ecx]
		lea	eax, [esp+3Ch+var_18]
		push	eax
		push	[esp+40h+arg_0]
		mov	[esp+44h+var_14], ecx
		call	_get_crl_score
		add	esp, 1Ch
		cmp	eax, ebx
		jle	short loc_29B2
		mov	ecx, [esp+28h+var_18]
		mov	ebx, eax
		mov	eax, [esp+28h+var_14]
		mov	ebp, [esp+28h+var_4]
		mov	[esp+28h+var_10], ecx
		mov	[esp+28h+var_C], eax

loc_29B2:				; CODE XREF: _get_crl_sk+7Aj
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2968
		test	ebp, ebp
		jz	short loc_2A39
		mov	esi, [esp+28h+arg_4]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_29D7
		push	eax
		call	_X509_CRL_free
		add	esp, 4

loc_29D7:				; CODE XREF: _get_crl_sk+ACj
		mov	eax, [esp+28h+arg_C]
		mov	ecx, [esp+28h+var_10]
		mov	[esi], ebp
		push	405h
		mov	[eax], ecx
		mov	eax, [esp+2Ch+arg_10]
		mov	ecx, [esp+2Ch+arg_14]
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	6
		mov	[eax], ebx
		mov	eax, [esp+34h+var_C]
		mov	[ecx], eax
		lea	eax, [ebp+0Ch]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		mov	esi, [esp+3Ch+arg_8]
		add	esp, 14h
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_2A26
		push	eax
		call	_X509_CRL_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_2A26:				; CODE XREF: _get_crl_sk+F5j
		push	edi
		push	ebp
		push	[esp+30h+arg_10]
		push	esi
		push	[esp+38h+arg_0]
		call	_get_delta_sk
		add	esp, 14h

loc_2A39:				; CODE XREF: _get_crl_sk+42j
					; _get_crl_sk+A2j
		pop	edi
		xor	eax, eax
		cmp	ebx, 1C0h
		pop	esi
		pop	ebp
		setnl	al
		pop	ebx
		add	esp, 18h
		retn
_get_crl_sk	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_get_delta_sk	proc near		; CODE XREF: _get_crl_sk+111p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		mov	eax, [ebp+14h]
		test	dword ptr [eax+14h], 2000h
		jz	short loc_2AC1
		mov	eax, [ebp+68h]
		mov	ecx, [esp+4+arg_C]
		mov	eax, [eax+28h]
		or	eax, [ecx+10h]
		test	eax, 1000h
		jz	short loc_2AC1
		push	ebx
		mov	ebx, [esp+8+arg_10]
		push	esi
		push	edi
		push	ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2AB4
		nop	dword ptr [eax+eax+00h]

loc_2A8C:				; CODE XREF: _get_delta_sk+66j
		push	esi
		push	ebx
		call	_sk_value
		push	[esp+18h+arg_C]
		mov	edi, eax
		push	edi
		call	_check_delta_base
		add	esp, 10h
		test	eax, eax
		jnz	short loc_2AC3
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2A8C

loc_2AB4:				; CODE XREF: _get_delta_sk+39j
		mov	eax, [esp+10h+arg_4]
		pop	edi
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 0

loc_2AC1:				; CODE XREF: _get_delta_sk+Fj
					; _get_delta_sk+23j
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2AC3:				; CODE XREF: _get_delta_sk+58j
		mov	esi, [ebp+14h]
		test	byte ptr [esi+14h], 2
		jz	short loc_2AD1
		add	esi, 8
		jmp	short loc_2AD3
; ---------------------------------------------------------------------------

loc_2AD1:				; CODE XREF: _get_delta_sk+7Ej
		xor	esi, esi

loc_2AD3:				; CODE XREF: _get_delta_sk+83j
		mov	eax, [edi]
		push	esi
		push	dword ptr [eax+0Ch]
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jz	short loc_2B0D
		jg	short loc_2B0D
		mov	eax, [edi]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_2B06
		push	esi
		push	eax
		call	_X509_cmp_time
		add	esp, 8
		test	eax, eax
		jz	short loc_2B0D
		jns	short loc_2B06
		test	byte ptr [ebp+74h], 2
		jz	short loc_2B0D

loc_2B06:				; CODE XREF: _get_delta_sk+A2j
					; _get_delta_sk+B2j
		mov	eax, [esp+10h+arg_8]
		or	dword ptr [eax], 2

loc_2B0D:				; CODE XREF: _get_delta_sk+97j
					; _get_delta_sk+99j ...
		push	469h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	6
		lea	eax, [edi+0Ch]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		mov	eax, [esp+24h+arg_4]
		add	esp, 14h
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
_get_delta_sk	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B34h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_get_issuer_sk	proc near		; DATA XREF: _X509_STORE_CTX_trusted_stack+Bo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	[esp+arg_8]
		push	dword ptr [eax+18h]
		push	eax
		call	_find_issuer
		mov	ecx, [esp+0Ch+arg_0]
		add	esp, 0Ch
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_2B72
		push	231h
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	3
		add	eax, 10h
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_2B72:				; CODE XREF: _get_issuer_sk+1Cj
		xor	eax, eax
		retn
_get_issuer_sk	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B78h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_idp_check_dp	proc near		; CODE XREF: _crl_crldp_check+79p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edi
		test	ebp, ebp
		jz	loc_2CA3
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	loc_2CA3
		cmp	dword ptr [ebp+0], 1
		push	ebx
		push	esi
		jnz	short loc_2BC6
		mov	ebp, [ebp+8]
		test	ebp, ebp
		jz	short loc_2C1D
		cmp	dword ptr [edi], 1
		jnz	short loc_2BC1
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_2C1D
		push	eax
		push	ebp
		call	_X509_NAME_cmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		inc	eax
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2BC1:				; CODE XREF: _idp_check_dp+2Cj
		mov	ebx, [edi+4]
		jmp	short loc_2BD9
; ---------------------------------------------------------------------------

loc_2BC6:				; CODE XREF: _idp_check_dp+20j
		cmp	dword ptr [edi], 1
		jnz	short loc_2C28
		mov	ebp, [edi+8]
		test	ebp, ebp
		jz	short loc_2C1D
		mov	ebx, [esp+10h+arg_0]
		mov	ebx, [ebx+4]

loc_2BD9:				; CODE XREF: _idp_check_dp+4Cj
		test	ebp, ebp
		jz	short loc_2C24
		push	ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2C1D

loc_2BEC:				; CODE XREF: _idp_check_dp+A3j
		push	esi
		push	ebx
		call	_sk_value
		add	esp, 8
		cmp	dword ptr [eax], 4
		jnz	short loc_2C0F
		push	dword ptr [eax+4]
		push	ebp
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jz	loc_2C99

loc_2C0F:				; CODE XREF: _idp_check_dp+81j
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2BEC

loc_2C1D:				; CODE XREF: _idp_check_dp+27j
					; _idp_check_dp+33j ...
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2C24:				; CODE XREF: _idp_check_dp+63j
		mov	ebp, [esp+10h+arg_0]

loc_2C28:				; CODE XREF: _idp_check_dp+51j
		push	dword ptr [ebp+4]
		xor	ebx, ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2C1D

loc_2C39:				; CODE XREF: _idp_check_dp+118j
		push	ebx
		push	dword ptr [ebp+4]
		call	_sk_value
		push	dword ptr [edi+4]
		mov	[esp+1Ch+arg_0], eax
		xor	esi, esi
		call	_sk_num
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_2C82
		nop

loc_2C58:				; CODE XREF: _idp_check_dp+108j
		push	esi
		push	dword ptr [edi+4]
		call	_sk_value
		push	eax
		push	[esp+1Ch+arg_0]
		call	_GENERAL_NAME_cmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_2C99
		push	dword ptr [edi+4]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2C58

loc_2C82:				; CODE XREF: _idp_check_dp+DDj
		push	dword ptr [ebp+4]
		inc	ebx
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	short loc_2C39
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2C99:				; CODE XREF: _idp_check_dp+91j
					; _idp_check_dp+F8j
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2CA3:				; CODE XREF: _idp_check_dp+8j
					; _idp_check_dp+14j
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_idp_check_dp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_internal_verify proc near		; CODE XREF: _X509_verify_cert:loc_133Cp
					; DATA XREF: _X509_STORE_CTX_init:loc_5DFo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	edi
		mov	edi, [esi+20h]
		push	dword ptr [esi+54h]
		mov	[esp+1Ch+arg_0], edi
		call	_sk_num
		lea	ebx, [eax-1]
		push	ebx
		push	dword ptr [esi+54h]
		mov	[esi+60h], ebx
		call	_sk_value
		mov	ecx, [esi+28h]
		mov	ebp, eax
		push	ebp
		push	ebp
		push	esi
		call	ecx
		add	esp, 18h
		test	eax, eax
		jz	short loc_2CF1
		mov	edi, ebp
		jmp	short loc_2D34
; ---------------------------------------------------------------------------

loc_2CF1:				; CODE XREF: _internal_verify+3Fj
		mov	eax, [esi+14h]
		test	dword ptr [eax+14h], 80000h
		jz	short loc_2D04
		mov	edi, ebp
		jmp	$check_cert$29
; ---------------------------------------------------------------------------

loc_2D04:				; CODE XREF: _internal_verify+4Fj
		test	ebx, ebx
		jg	short loc_2D22
		push	esi
		push	0
		mov	dword ptr [esi+64h], 15h
		mov	[esi+68h], ebp
		call	edi
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_2D22:				; CODE XREF: _internal_verify+5Aj
		dec	ebx
		mov	[esi+60h], ebx

loc_2D26:				; CODE XREF: _internal_verify+141j
		push	ebx
		push	dword ptr [esi+54h]
		call	_sk_value
		mov	edi, eax
		add	esp, 8

loc_2D34:				; CODE XREF: _internal_verify+43j
					; _internal_verify+139j
		test	ebx, ebx
		js	loc_2E0A
		mov	[esi+60h], ebx
		cmp	dword ptr [edi+0Ch], 0
		jnz	short loc_2DB9
		cmp	edi, ebp
		jnz	short loc_2D55
		mov	eax, [esi+14h]
		test	dword ptr [eax+14h], 4000h
		jz	short loc_2DB9

loc_2D55:				; CODE XREF: _internal_verify+9Bj
		push	ebp
		call	_X509_get_pubkey
		add	esp, 4
		mov	[esp+18h+var_8], eax
		test	eax, eax
		jnz	short loc_2D83
		push	esi
		push	eax
		mov	dword ptr [esi+64h], 6
		mov	[esi+68h], ebp
		call	[esp+20h+arg_0]
		add	esp, 8
		test	eax, eax
		jz	$end$30
		jmp	short loc_2DAD
; ---------------------------------------------------------------------------

loc_2D83:				; CODE XREF: _internal_verify+B8j
		push	eax
		push	edi
		call	_X509_verify
		add	esp, 8
		test	eax, eax
		jg	short loc_2DAD
		push	esi
		push	0
		mov	dword ptr [esi+64h], 7
		mov	[esi+68h], edi
		call	[esp+20h+arg_0]
		add	esp, 8
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jz	short loc_2DF2

loc_2DAD:				; CODE XREF: _internal_verify+D5j
					; _internal_verify+E3j
		push	[esp+18h+var_8]
		call	_EVP_PKEY_free
		add	esp, 4

loc_2DB9:				; CODE XREF: _internal_verify+97j
					; _internal_verify+A7j
		mov	dword ptr [edi+0Ch], 1

$check_cert$29:				; CODE XREF: _internal_verify+53j
		push	edi
		push	esi
		call	_check_cert_time
		add	esp, 8
		test	eax, eax
		jz	short $end$30
		push	esi
		push	1
		mov	[esi+6Ch], ebp
		mov	[esi+68h], edi
		call	[esp+20h+arg_0]
		add	esp, 8
		test	eax, eax
		jz	short $end$30
		sub	ebx, 1
		js	loc_2D34
		mov	ebp, edi
		jmp	loc_2D26
; ---------------------------------------------------------------------------

loc_2DF2:				; CODE XREF: _internal_verify+FFj
		push	[esp+18h+var_8]
		call	_EVP_PKEY_free
		mov	eax, [esp+1Ch+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_2E0A:				; CODE XREF: _internal_verify+8Aj
		mov	eax, 1

$end$30:				; CODE XREF: _internal_verify+CFj
					; _internal_verify+120j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_internal_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_lookup_cert_match proc	near		; CODE XREF: _check_trust+99p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		xor	ebx, ebx
		push	edi
		push	ebp
		call	_X509_get_subject_name
		push	eax
		mov	eax, [esp+14h+arg_0]
		push	eax
		mov	eax, [eax+40h]
		call	eax
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_2E3F
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2E3F:				; CODE XREF: _lookup_cert_match+21j
		push	esi
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_2E74

loc_2E4F:				; CODE XREF: _lookup_cert_match+5Aj
		push	esi
		push	edi
		call	_sk_value
		mov	ebx, eax
		push	ebp
		push	ebx
		call	_X509_cmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_2E74
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_2E4F

loc_2E74:				; CODE XREF: _lookup_cert_match+35j
					; _lookup_cert_match+4Cj
		push	edi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		pop	esi
		jge	short loc_2EB0
		push	0B5h ; 'µ'
		push	offset ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; ".\\crypto\\x509\\x509_vfy.c"
		push	3
		lea	eax, [ebx+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		push	offset _X509_free
		push	edi
		call	_sk_pop_free
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2EB0:				; CODE XREF: _lookup_cert_match+68j
		push	offset _X509_free
		push	edi
		xor	ebx, ebx
		call	_sk_pop_free
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	ebx
		retn
_lookup_cert_match endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2EC8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_callback	proc near		; DATA XREF: _X509_STORE_CTX_init:loc_5C8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
_null_callback	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2ED0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; time_t __cdecl static	time(time_t *Time)
_time		proc near
		jmp	dword ptr ds:__imp___time64
_time		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2ED8h
; COMDAT (pick any)
		public ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
; `string'
??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ db '.\crypto\x509\x509_vfy.c',0
					; DATA XREF: _X509_CRL_diff+58o
					; _X509_CRL_diff+89o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2EF4h
; COMDAT (pick any)
		public ??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@
; char `string'[]
??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@ db 'OPENSSL_ALLOW_PROXY_CERTS',0
					; DATA XREF: _check_chain_extensions+47o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F10h
; COMDAT (pick any)
		public ??_C@_07DLHCIBDH@default?$AA@
; `string'
??_C@_07DLHCIBDH@default?$AA@ db 'default',0 ; DATA XREF: _X509_STORE_CTX_init:loc_566o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; __time64_t __cdecl __time64(__time64_t *Time)
		extrn __imp___time64:near ; CODE XREF: _X509_gmtime_adj+Ep
					; _X509_time_adj_ex+24p
					; DATA XREF: ...
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _check_chain_extensions+55p
					; DATA XREF: _check_chain_extensions+55r
		extrn _sk_num:near	; CODE XREF: _X509_CRL_diff+216p
					; _X509_CRL_diff+264p ...
		extrn _sk_value:near	; CODE XREF: _X509_CRL_diff+224p
					; _X509_get_pubkey_parameters+33p ...
		extrn _sk_set:near	; CODE XREF: _X509_verify_cert+247p
					; _check_trust+ABp
		extrn _sk_new_null:near	; CODE XREF: _X509_verify_cert+76p
		extrn _sk_free:near	; CODE XREF: _X509_verify_cert+59Ap
		extrn _sk_pop_free:near	; CODE XREF: _X509_STORE_CTX_cleanup+5Bp
					; _get_crl_delta+A9p ...
		extrn _sk_delete_ptr:near ; CODE XREF: _X509_verify_cert+1AAp
		extrn _sk_push:near	; CODE XREF: _X509_verify_cert+8Ap
					; _X509_verify_cert+17Ap ...
		extrn _sk_pop:near	; CODE XREF: _X509_verify_cert+2B9p
					; _X509_verify_cert+404p
		extrn _sk_dup:near	; CODE XREF: _X509_verify_cert+C6p
		extrn _CRYPTO_get_ex_new_index:near
					; CODE XREF: _X509_STORE_CTX_get_ex_new_index+16p
		extrn _CRYPTO_new_ex_data:near ; CODE XREF: _X509_STORE_CTX_init+207p
		extrn _CRYPTO_free_ex_data:near	; CODE XREF: _X509_STORE_CTX_cleanup+74p
		extrn _CRYPTO_set_ex_data:near ; CODE XREF: _X509_STORE_CTX_set_ex_data+5j
		extrn _CRYPTO_get_ex_data:near ; CODE XREF: _X509_STORE_CTX_get_ex_data+5j
		extrn _CRYPTO_add_lock:near ; CODE XREF: _X509_verify_cert+AFp
					; _X509_verify_cert+1A0p ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _X509_STORE_CTX_new+10p
		extrn _CRYPTO_free:near	; CODE XREF: _X509_STORE_CTX_free+10p
					; _check_hosts+1Fp
		extrn _ERR_put_error:near ; CODE XREF: _X509_CRL_diff+66p
					; _X509_CRL_diff+94p ...
		extrn _ASN1_INTEGER_cmp:near ; CODE XREF: _X509_CRL_diff+DCp
					; _check_delta_base+59p ...
		extrn _ASN1_UTCTIME_adj:near ; CODE XREF: _X509_gmtime_adj+3Cp
					; _X509_time_adj_ex+53p
		extrn _ASN1_GENERALIZEDTIME_adj:near ; CODE XREF: _X509_gmtime_adj+5Cp
					; _X509_time_adj_ex+70p
		extrn _ASN1_OCTET_STRING_cmp:near ; CODE XREF: _crl_extension_match+9Ap
		extrn _ASN1_TIME_adj:near ; CODE XREF: _X509_gmtime_adj+77p
					; _X509_time_adj_ex+87p
		extrn _EVP_PKEY_free:near ; CODE XREF: _X509_get_pubkey_parameters+59p
					; _X509_get_pubkey_parameters+A9p ...
		extrn _EVP_PKEY_copy_parameters:near
					; CODE XREF: _X509_get_pubkey_parameters+A3p
					; _X509_get_pubkey_parameters+C1p
		extrn _EVP_PKEY_missing_parameters:near
					; CODE XREF: _X509_get_pubkey_parameters+9p
					; _X509_get_pubkey_parameters+4Cp
		extrn _X509_STORE_get1_certs:near ; DATA XREF: _X509_STORE_CTX_init:loc_652o
		extrn _X509_STORE_get1_crls:near ; DATA	XREF: _X509_STORE_CTX_init:loc_669o
		extrn _X509_STORE_CTX_get1_issuer:near
					; DATA XREF: _X509_STORE_CTX_init:loc_5B1o
		extrn _X509_VERIFY_PARAM_new:near ; CODE XREF: _X509_STORE_CTX_init+98p
		extrn _X509_VERIFY_PARAM_free:near ; CODE XREF:	_X509_STORE_CTX_cleanup+28p
					; _X509_STORE_CTX_set0_param+Dp ...
		extrn _X509_VERIFY_PARAM_inherit:near ;	CODE XREF: _X509_STORE_CTX_init+CDp
					; _X509_STORE_CTX_init+100p ...
		extrn _X509_VERIFY_PARAM_set_flags:near
					; CODE XREF: _X509_STORE_CTX_set_flags+Bp
		extrn _X509_VERIFY_PARAM_set_depth:near
					; CODE XREF: _X509_STORE_CTX_set_depth+Bp
		extrn _X509_VERIFY_PARAM_set_time:near
					; CODE XREF: _X509_STORE_CTX_set_time+Fp
		extrn _X509_VERIFY_PARAM_lookup:near ; CODE XREF: _X509_STORE_CTX_init+F7p
					; _X509_STORE_CTX_set_default+4p
		extrn _X509_policy_check:near ;	CODE XREF: _check_policy+26p
		extrn _X509_policy_tree_free:near ; CODE XREF: _X509_STORE_CTX_cleanup+3Fp
		extrn _X509_verify:near	; CODE XREF: _internal_verify+D9p
		extrn _X509_CRL_verify:near ; CODE XREF: _X509_CRL_diff+114p
					; _X509_CRL_diff+122p ...
		extrn _X509_CRL_sign:near ; CODE XREF: _X509_CRL_diff+283p
		extrn _X509_REVOKED_dup:near ; CODE XREF: _X509_CRL_diff+240p
		extrn _X509_free:near	; CODE XREF: _X509_verify_cert+235p
					; _X509_verify_cert+25Fp ...
		extrn _X509_REVOKED_free:near ;	CODE XREF: _X509_CRL_diff+29Bp
		extrn _X509_CRL_new:near ; CODE	XREF: _X509_CRL_diff+151p
		extrn _X509_CRL_free:near ; CODE XREF: _X509_CRL_diff+2C0p
					; _check_cert+D8p ...
		extrn _X509_CRL_add0_revoked:near ; CODE XREF: _X509_CRL_diff+252p
		extrn _X509_CRL_get0_by_serial:near ; CODE XREF: _X509_CRL_diff+233p
		extrn _X509_CRL_get0_by_cert:near ; CODE XREF: _cert_crl+41p
		extrn _X509_get_issuer_name:near ; CODE	XREF: _get_crl_delta+30p
					; _get_crl_score+6Fp
		extrn _X509_get_subject_name:near ; CODE XREF: _crl_akid_check+83p
					; _crl_akid_check+E8p ...
		extrn _X509_get_pubkey:near ; CODE XREF: _X509_get_pubkey_parameters+39p
					; _X509_get_pubkey_parameters+9Ap ...
		extrn _X509_CRL_set_version:near ; CODE	XREF: _X509_CRL_diff+163p
		extrn _X509_CRL_set_issuer_name:near ; CODE XREF: _X509_CRL_diff+179p
		extrn _X509_CRL_set_lastUpdate:near ; CODE XREF: _X509_CRL_diff+18Fp
		extrn _X509_CRL_set_nextUpdate:near ; CODE XREF: _X509_CRL_diff+1A5p
		extrn _X509_chain_check_suiteb:near ; CODE XREF: _X509_verify_cert+4FAp
		extrn _X509_CRL_check_suiteb:near ; CODE XREF: _check_crl+214p
		extrn _X509_chain_up_ref:near ;	CODE XREF: _X509_STORE_CTX_get1_chain+10j
		extrn _X509_cmp:near	; CODE XREF: _X509_verify_cert+228p
					; _check_crl_chain+2Ap	...
		extrn _X509_NAME_cmp:near ; CODE XREF: _X509_CRL_diff+47p
					; _check_delta_base+24p ...
		extrn _X509_CRL_get_ext_count:near ; CODE XREF:	_X509_CRL_diff+1D5p
					; _X509_CRL_diff+1FEp
		extrn _X509_CRL_get_ext_by_NID:near ; CODE XREF: _crl_extension_match+Fp
					; _crl_extension_match+20p ...
		extrn _X509_CRL_get_ext:near ; CODE XREF: _X509_CRL_diff+1E3p
					; _crl_extension_match+35p ...
		extrn _X509_CRL_add_ext:near ; CODE XREF: _X509_CRL_diff+1ECp
		extrn _X509_CRL_add1_ext_i2d:near ; CODE XREF: _X509_CRL_diff+1C2p
		extrn _X509_EXTENSION_get_data:near ; CODE XREF: _crl_extension_match+3Bp
					; _crl_extension_match+78p
		extrn _X509_check_trust:near ; CODE XREF: _check_trust+34p
		extrn _X509_TRUST_get_by_id:near
					; CODE XREF: _X509_STORE_CTX_purpose_inherit+85p
		extrn _GENERAL_NAME_cmp:near ; CODE XREF: _idp_check_dp+EEp
		extrn _NAME_CONSTRAINTS_check:near ; CODE XREF:	_check_name_constraints+65p
		extrn _X509_check_ca:near ; CODE XREF: _check_chain_extensions+F0p
		extrn _X509_check_purpose:near ; CODE XREF: _X509_verify_cert+115p
					; _X509_verify_cert+1E5p ...
		extrn _X509_check_issued:near ;	CODE XREF: _check_issued+Cp
		extrn _X509_check_akid:near ; CODE XREF: _crl_akid_check+39p
					; _crl_akid_check+9Cp ...
		extrn _X509_PURPOSE_get0:near
					; CODE XREF: _X509_STORE_CTX_purpose_inherit+49p
					; _X509_STORE_CTX_purpose_inherit+6Dp
		extrn _X509_PURPOSE_get_by_id:near
					; CODE XREF: _X509_STORE_CTX_purpose_inherit+1Bp
					; _X509_STORE_CTX_purpose_inherit+58p
		extrn _X509_check_host:near ; CODE XREF: _check_hosts+47p
		extrn _X509_check_email:near ; CODE XREF: _check_id+5Ap
		extrn _X509_check_ip:near ; CODE XREF: _check_id+97p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _X509_cmp_time+5Dp
					; _X509_cmp_time+22Ep ...
		extrn __chkstk:near	; CODE XREF: _X509_CRL_diff+5p
					; _X509_cmp_time+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _X509_STORE_CTX_new+45p
		extrn ___security_cookie:near ;	DATA XREF: _X509_cmp_time+Ar


		end
