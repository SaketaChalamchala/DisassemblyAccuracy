;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DC3ED4C52EC02695B0A2426B431F991F
; Input	CRC32 :	9FC4A9FE

; File Name   :	C:\compspace\Diff\openssl\obj\ec_curve.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
__EC_SECG_CHAR2_131R2 dd offset	byte_197 ; DATA	XREF: .rdata:00002BE4o
dword_4		dd 14h,	11h, 2,	0ADD35B98h, 96D6D4BAh, 568776E6h, 215A1715h
		dd 0E3973AB4h, 8, 2 dup(0)
dword_30	dd 1000000h, 0A8E5030Dh, 0CAD71989h, 5F41BFFCh,	6517C207h
					; DATA XREF: .rdata:000024F8o
					; .rdata:00002628o ...
		dd 0B804B273h, 0C5466A26h, 73AC5756h, 18FE34Ch,	392218Fh
		dd 0F2D8DC56h, 0AD3150F9h, 95232D65h, 0A866B31Bh, 6DF04806h
		dd 0A5407986h, 269E6D36h, 24EBE95Dh, 40Fh, 0
dword_80	dd 54690100h, 9B0433A2h, 8FA9h,	0 ; DATA XREF: .rdata:00001AB0o
__EC_NIST_CHAR2_163K dd	offset byte_197	; DATA XREF: .rdata:00002BF4o
					; .rdata:00002DE4o
		align 8
		dd 15h,	2, 8, 4	dup(0)
		dd offset byte_C9
		dd 4 dup(0)
		db 0
byte_C9		db 1, 2	dup(0)		; DATA XREF: .rdata:000000B4o
					; .rdata:000001D4o
		dd 4 dup(0)
dword_DC	dd 2010000h, 53C013FEh,	0AC11BC7Bh, 93D707AAh, 5E6D4EDEh
		dd 0E8EE945Ch, 0F078902h, 0FF385DB0h, 2E1F3258h, 0D5360580h
		dd 0A3DACC38h, 4D9h, 0
		dd 2000000h, 0E0A20801h, 0F8990DCCh, 0EFA5h
__EC_SECG_CHAR2_163R1 dd offset	byte_197 ; DATA	XREF: .rdata:00002C04o
		align 8
		dd 15h,	2, 8, 4	dup(0)
		dd 88B607C9h, 0A8EFAA2Ch, 0FF54954Fh, 88BD2884h, 78D246E2h
		dd 1307E22Ah, 0DCCD2D61h, 94AB0AB4h, 0CA29DA6Bh, 0F93AF791h
		dd 3D9AF58h, 97969769h,	778943ABh, 89675689h, 7A787F56h
		dd 54A67678h, 0DB5E4300h, 0B2AFEF42h, 0FE519D98h, 9C8E3FCh
byte_194	db 88h,	0F4h, 1Fh	; DATA XREF: .rdata:__EC_brainpoolP160r1o
					; .rdata:__EC_brainpoolP160t1o	...
byte_197	db 0F8h			; DATA XREF: .rdata:__EC_SECG_CHAR2_131R2o
					; .rdata:__EC_NIST_CHAR2_163Ko	...
dword_198	dd 0FFFF0383h, 2 dup(0FFFFFFFFh), 89B6AA48h, 10A79CC2h
					; DATA XREF: .rdata:00002B40o
					; .data:00004B5Co ...
		dd 9B27h
__EC_NIST_CHAR2_163B dd	offset byte_197	; DATA XREF: .rdata:00002C14o
		align 8
		dd 15h,	2, 8, 4	dup(0)
		dd offset byte_C9
		dd 4 dup(0)
		dd 0A020100h, 0B8071960h, 14CA53C9h, 5110EB81h,	4A74782Fh
		dd 3FD0532h, 62A1EBF0h,	7ED5A286h, 681199A0h, 374699D4h
		dd 363E34E8h, 0BC1FD500h, 9A0716Ch, 0D5CDA24Fh,	5C1CB145h
		dd 2473790Ch, 4F1h, 0
		dd 2000000h, 0E777FE92h, 23A4120Ch, 334Ch
__EC_SECG_CHAR2_193R1 dd offset	byte_197 ; DATA	XREF: .rdata:00002C24o
		dd 14h,	19h, 2,	0C7AE3F10h, 676E694Dh, 51617568h, 0C57F7775h
		dd 30EF91B1h, 2, 4 dup(0)
dword_278	dd 80000000h, 85170001h, 987AEB8Fh, 0E1695197h,	407BF771h
		dd 8A09DE87h, 0DF11A9C8h, 0FD00017Bh, 0E6BF49FBh, 0AC9FA8C3h
		dd 1E7AAAADh, 0C17CBC5Bh, 31D8E5C2h, 1148847h, 5FBC81F4h
		dd 744AF80Fh, 6FDF6CADh, 61BFF4DEh
aYbsrS		db 'ybSrÿ¿≈·',0         ; DATA XREF: .rdata:_curve_listo
					; .rdata:00002A80o ...
byte_2C9	db 25h,	0E3h, 99h	; DATA XREF: .rdata:00002B00o
					; .data:00004B64o ...
dword_2CC	dd 123790F2h		; DATA XREF: .rdata:00002B30o
					; .data:00004B7Co ...
byte_2D0	db 0CCh, 0F3h, 0EAh	; DATA XREF: .rdata:00002BE0o
					; .rdata:00002BF0o ...
byte_2D3	db 9Eh			; DATA XREF: .rdata:00002C10o
					; .data:off_4B0Co
dword_2D4	dd 7FD11A3Ah, 1B20B3B0h, 1BCEF76Ah, 105h, 2 dup(0)
					; DATA XREF: .rdata:00002C20o
					; .rdata:00002C30o ...
dword_2EC	dd 0F3C70000h, 448F774Ah, 0E92CC3Ah, 49BAh, 0 ;	DATA XREF: .rdata:00002E80o
					; .rdata:00002E90o
__EC_SECG_CHAR2_193R2 dd offset	byte_197 ; DATA	XREF: .rdata:00002C34o
		dd 14h,	19h, 2,	0D6B4B710h, 8776E696h, 51171556h, 6FA1C837h
		dd 1122DAD0h, 2, 4 dup(0)
dword_338	dd 80000000h, 0F3630101h, 0C237515Ah, 0EDA63ECEh, 0B196786h
		dd 0CD3EC40Bh, 2779769h, 0C9009B70h, 27899EBBh,	374CD6D4h
		dd 85B22A7Eh, 0E3165B6Ah, 1DF6B7EFh, 0AE1643h, 197DB6D9h
		dd 0C867032Eh, 1A9EF303h, 14CA827Eh, 0A3551A6h,	8F7E61AEh
		dd 3394CE01h, 4C30756h,	0DEE729ACh, 1CAD9FBh, 27F996F5h
		dd 0CFDE4C22h, 16Ch, 2 dup(0)
		dd 0AB5A0100h, 54001B56h, 0EED4CC13h, 0D599h, 0
__EC_NIST_CHAR2_233K dd	offset byte_197	; DATA XREF: .rdata:00002C44o
					; .rdata:00002E54o
		align 8
		dd 1Eh,	4, 2, 4	dup(0)
		dd 4, 0
		dd offset dword_DC+24h
		dd 0Eh dup(0)
		dd 72010100h, 3A85BA32h, 0F11A737Eh, 0F42FF229h, 0A4639514h
		dd 0F56BC219h, 6E9D4C0Ah, 2661ADEFh, 7D53DB01h,	0B719E8ECh
		dd 5A550FF7h, 0A827C467h, 8AF19BCDh, 0E0569BEBh, 0FA5610C1h
		dd 8000A3E6h, 3	dup(0)
		dd 5B9D0600h, 0D4BC15B9h, 0D51AFB6Eh, 0DFAB73F1h, 0
__EC_NIST_CHAR2_233B dd	offset byte_197	; DATA XREF: .rdata:00002C54o
					; .rdata:00002E64o
		dd 14h,	1Eh, 2,	0F09FD574h, 3D416B7Fh, 344BA10Eh, 0DBA2204Bh
		dd 0C3509B04h, 2, 4 dup(0)
		dd 4, 0
		dd offset dword_DC+24h
		dd 6 dup(0)
		dd 1000000h, 7E646600h,	2C336CDEh, 23098C7Fh, 3B2158BBh
		dd 0E9203B33h, 0FE8142CEh, 8F7D5F11h, 0FA00AD90h, 0ACCBDFC9h
		dd 21BB1383h, 75BBF139h, 0BC65EF5Fh, 368B1F39h,	73EBF8F8h
		dd 8B55FD71h, 86A0001h,	350319A4h, 85E57806h, 8ABFBE28h
		dd 67F8EF0Bh, 7136CAA7h, 0F8017E6Fh, 15210h, 3 dup(0)
		dd 74E91300h, 698A2FE7h, 261D0322h, 0D7E0CF03h
__EC_SECG_CHAR2_239K1 dd offset	byte_197 ; DATA	XREF: .rdata:00002C64o
		align 8
		dd 1Eh,	4, 80h,	0
		dd 400000h, 4 dup(0)
		dd offset dword_DC+24h
		dd 0Eh dup(0)
		dd 0A0290100h, 0A987A8B6h, 973E983h, 2787A688h,	26D1B2A8h
		dd 0CCC24CC4h, 55652A7Bh, 0DC353019h, 4083176h,	9B542EF1h
		dd 101C01DBh, 35E78930h, 75B2AC10h, 5D2A31FCh, 5365B7C6h
		dd 20CAF0h, 3 dup(0)
		dd 0FE795A00h, 0E9B67CC6h, 0A81D1C1Fh, 0A578E400h, 0
__EC_NIST_CHAR2_283K dd	offset byte_197	; DATA XREF: .rdata:00002C74o
		align 10h
		dd offset dword_4+20h
		dd 4, 8, 7 dup(0)
		dd 0A1100000h, 11h dup(0)
		dd 1000000h, 3F210305h,	8844CA78h, 813B1A3Fh, 0E588F162h
		dd 5F26CD53h, 7A56C123h, 13698716h, 24ACC2B0h, 36284958h
		dd 38DACC01h, 319E1C0Fh, 5DF9908Dh, 6F42E507h, 0C0457EE8h
		dd 984618E8h, 366259E4h, 6111344Eh, 5922DD77h, 0FFFFFF01h
		dd 3 dup(0FFFFFFFFh), 0AEE9FFFFh, 7775D02Eh, 7FFF5D26h
		dd 61E4594h, 613C161Eh
__EC_NIST_CHAR2_283B dd	offset byte_197	; DATA XREF: .rdata:00002C84o
		dd 14h,	24h, 2,	73B0E277h, 830FEB70h, 0B6D56D2Ah, 0CD88FC2Dh
		dd 0BE84BB06h, 8, 7 dup(0)
		dd 0A1100000h, 8 dup(0)
dword_778	dd 1000000h, 0A687B02h,	6D59B8C8h, 8AAFA4A5h, 3F30A019h
		dd 76FD97CAh, 0A29F3045h, 5A4881A5h, 313E26F6h,	0F5A2793Bh
		dd 2539F905h, 90DDB78Dh, 8C4F93E1h, 0ECDFB070h,	0B825ED2Eh
		dd 9CAC7E55h, 98E1E280h, 0CDBECDF8h, 5320B186h,	54686703h
		dd 1C1424FEh, 0D4E68FB9h, 0B4020DB2h, 2F76F51h,	0B0DD0E35h
		dd 0C8796782h, 45DFF013h, 0F41281BEh, 0FFFFFF03h, 3 dup(0FFFFFFFFh)
		dd 90EFFFFFh, 0FC609639h, 16908A93h, 7C2A045Bh,	7B3ADEFh
		dd 0
__EC_NIST_CHAR2_409K dd	offset byte_197	; DATA XREF: .rdata:00002C94o
		align 8
		dd offset dword_30+4
		dd 4, 2, 9 dup(0)
		dd 8000h, 0
		dd 1000000h, 19h dup(0)
		dd 1000000h, 5FF06000h,	0C1498F65h, 89B13AADh, 2184710Fh
		dd 8709FD0Eh, 4CC807E3h, 0B8CFAC27h, 0C27CF6F9h, 9E1860C4h
		dd 62AAAAB5h, 0B12E22EEh, 0CF4055B3h, 463702E9h, 569E301h
		dd 424E7C0Bh, 0AC1DBAACh, 9C2904BFh, 2F786034h,	27A48E91h
		dd 655132E6h, 0E310EAE9h, 426C5FDAh, 1552C5E9h,	7AA29CAAh
		dd 48EC6358h, 6B28E0D8h, 0FFFF7F00h, 5 dup(0FFFFFFFFh)
		dd 5FFEFFFFh, 0EAD4B283h, 0C40E4020h, 0D35E7D55h, 5BCAE7E3h
		dd 0B8835C4Bh, 0CF5F1EE0h
__EC_NIST_CHAR2_409B dd	offset byte_197	; DATA XREF: .rdata:00002CA4o
		dd 14h,	34h, 2,	0A4B59940h, 9FD6F957h, 93D2179h, 4DCD4B4Ch
		dd 0B216242h, 2, 9 dup(0)
		dd 8000h, 0
		dd 1000000h, 0Ch dup(0)
		dd 1000000h, 0C2A52100h, 0EB9FEEC8h, 759A4B5Ch,	6B477B3Bh
		dd 2E42D67Fh, 67DDF3F1h, 99FA6147h, 0C827ACD6h,	0B297A1A9h
		dd 6C2F8272h, 0AA557AD5h, 31AE504Fh, 5F54137Bh,	60485D01h
		dd 0B3DD88D0h, 600C6B49h, 60627564h, 4ADE1C44h,	4D1D77F1h
		dd 5BFE1FB0h, 397E534h,	865A25DCh, 5180118Ah, 0ABAE0356h
		dd 544E7960h, 0A79679BBh, 0CFB16100h, 0F3E56BABh, 83A7BF2Bh
		dd 6A10ED24h, 0C5B93676h, 8D19BDA7h, 4FAA5801h,	8FD08854h
		dd 1F4F5138h, 404F4BDFh, 361B18D2h, 0BA64C381h,	6C77302h
		dd 1, 5	dup(0)
		dd 0E2010000h, 12A6D6AAh, 0BE0733F3h, 3C7CA45Fh, 832F059Eh
		dd 37CD6481h, 7311A2D9h, 0
__EC_NIST_CHAR2_571K dd	offset byte_197	; DATA XREF: .rdata:00002CB4o
		align 10h
		dd offset dword_30+18h
		dd 4, 8, 10h dup(0)
		dd 25040000h, 23h dup(0)
		dd 1000000h, 0A8B76E02h, 0BC3F9259h, 31961882h,	0E43F10F8h
		dd 97A29CACh, 0D4D51200h, 48802460h, 0A41C8401h, 84957043h
		dd 0E605B293h, 4D30DA47h, 8CB0CEB4h, 39BAD1BBh,	0FB764749h
		dd 17478B98h, 0C788CA4Dh, 835294E2h, 72891CA0h,	80DC4903h
		dd 37BF4F7Fh, 0DEEA4A4Fh, 3195CA3Bh, 0EC8CD54Dh, 547A309Fh
		dd 0FC1EC6FFh, 2C8A6D00h, 0C079499Dh, 0A7AE44ACh, 0B9BBBE4Fh
		dd 0DCAE72F7h, 1AB020B6h, 1BAFA77Bh, 0C8300432h, 0F6841959h
		dd 144CCD01h, 0A3C7F13Eh, 2, 8 dup(0)
		dd 0E1501813h, 0E4639AF1h, 0DBA891B3h, 38417F91h, 4BD830B6h
		dd 3839D6E5h, 0B4DE911Eh, 8F77FE5Ch, 1107C63h
__EC_NIST_CHAR2_571B dd	offset byte_197	; DATA XREF: .rdata:00002CC4o
		dd 14h,	48h, 2,	0F758A02Ah, 0AB330E3Ah,	610F6B48h, 3AC51004h
		dd 1023137Fh, 8, 10h dup(0)
		dd 25040000h, 11h dup(0)
		dd 1000000h, 7E0EF402h,	95F22122h, 177129DEh, 2FD6F3B7h
		dd 0FF976A5Ch, 0F1EF8CCBh, 0CEA86BCDh, 0AD189A4Ah, 0BDABFF84h
		dd 3359FA8Eh, 67ADE72Bh, 296EA656h, 5A18FD4Ah, 0AA12FF78h
		dd 0E74D0E52h, 0CCABA39h, 7FFFFE7Fh, 7A725529h,	1D000303h
		dd 2956B834h, 0D4C0166Ch, 75D73C0Dh, 0D2D1930Ah, 0AA85F95h
		dd 0C80FF4A5h, 0BD2A7BDBh, 5039E5BDh, 93D2C0F4h, 0A311D7CDh
		dd 14FB675Bh, 360AE99h,	39F11486h, 0B4A3BF4Ah, 27D950C8h
		dd 9C76E7E1h, 192DEC8Eh, 73F27B03h, 9B63DA42h, 0FEFFCC6Dh
		dd 0D7693DB7h, 0A6276C8Ch, 0CABB9C00h, 53F88019h, 0A6E82139h
		dd 433E4284h, 578AB0BAh, 8FAF9162h, 0A8B21B46h,	2F1D53B3h
		dd 9BC18504h, 51F1E216h, 3CDD236Eh, 0AF27481Ah,	5BC18A1Bh
		dd 0FFFFFF03h, 8 dup(0FFFFFFFFh), 18CE61E6h, 739855FFh
		dd 189B0508h, 1E852368h, 0A19CDDC7h, 3DE91D16h,	6ED67451h
		dd 0BBE98283h, 474EE82Fh, 0
__EC_X9_62_CHAR2_163V1 dd offset byte_197 ; DATA XREF: .rdata:00002CD4o
					; .rdata:00002E04o
		dd 14h,	15h, 2,	15FBC0D2h, 0DE600876h, 0D6F4EEF1h, 8776E696h
		dd 54171556h, 8, 3 dup(0)
		dd 1000000h, 46250707h,	345243B5h, 78E022A4h, 32F47596h
		dd 0DE3594C8h, 0C9004252h, 0D5067D51h, 0FF3C0D24h, 204BC738h
		dd 6F4DCDB6h, 7D9D49Dh,	959869AFh, 793D1046h, 3DCC9F32h
		dd 330F8874h, 0CB03E8BBh, 2123EC01h, 0AD66591Bh, 873F1DEAh
		dd 4858EAF7h, 0CAB7F0AEh, 49Fh,	0
		dd 1000000h, 82C80FE6h,	0AE4DC71Ch, 0C1AFh, 0
__EC_X9_62_CHAR2_163V2 dd offset byte_197 ; DATA XREF: .rdata:00002CE4o
		dd 14h,	15h, 2,	54C8153h, 96D6440Dh, 568776E6h,	0C581715h
		dd 0FD9FE2A4h, 8, 3 dup(0)
		dd 1000000h, 0B3080107h, 0B1C4779Eh, 81D9BE08h,	0E890EEDh
		dd 1C517C11h, 670672F0h, 0AF38EBACh, 408C484Eh,	0AEFF3374h
		dd 16811C4Fh, 20DF38h, 4E6E2624h, 0A6D10B5h, 0C4924D96h
		dd 71260E86h, 0C56C9BDBh, 4D689F07h, 0C58466DFh, 388B25CDh
		dd 231B0290h, 9FD1DF86h, 0FFFF03C5h, 0FFFFFFFFh, 0FDFFFFFFh
		dd 15E14DF6h, 8FB7DB1Ah, 0A710h, 0
__EC_X9_62_CHAR2_163V3 dd offset byte_197 ; DATA XREF: .rdata:00002CF4o
		dd 14h,	15h, 2,	0D9F1CB50h, 694DA95Ch, 7568676Eh, 0F1755161h
		dd 0B8A3366Ah, 8, 3 dup(0)
dword_FD4	dd 1000000h, 26A50707h,	253E3DC6h, 7A056A2h, 47549F69h
		dd 56E42AE3h, 0F7030EB5h, 0EB981706h, 0FD38E299h, 5BF91B6Fh
		dd 48EBFE48h, 22B2554h,	7C7BF8F9h, 0DE0B4D57h, 0E6228ACFh
		dd 0F9754752h, 0CBBDDE8Ch, 5935B905h, 175E150Ch, 3FEB48EAh
		dd 898B71F3h, 59AF53Dh,	0FFFF03D0h, 0FFFFFFFFh,	0FEFFFFFFh
		dd 0F14EE1Ah, 96FF0A11h, 913h, 0
__EC_X9_62_CHAR2_176V1 dd offset byte_197 ; DATA XREF: .rdata:00002D04o
		align 10h
		dd 17h,	0FF6Eh,	1, 3 dup(0)
		dd offset dword_778+88h
		dd 70000h, 29DBE6E4h, 405C0695h, 0B8399D7Dh, 967B96D0h
		dd 0E9A84B70h, 5D000BC9h, 0BE0A47DAh, 8EDE1464h, 28AE33C1h
		dd 0FCD7BBE9h, 0FFE00AECh, 168D00F2h, 986786C2h, 0F0F900B6h
		dd 0E8A8B48Bh, 8C29F360h, 98574AE0h, 53A46F00h,	0DDAD2D9Ch
		dd 16B5BAD6h, 36B4617Dh, 0B12BD9E1h, 2C566Ah, 92000100h
		dd 0EC977353h, 5714F6A4h, 0A2BD699h, 0FE06CE19h, 0AD26h
		dd 0
__EC_X9_62_CHAR2_191V1 dd offset byte_197 ; DATA XREF: .rdata:00002D14o
		dd 14h,	18h, 2,	54CA134Eh, 96D64427h, 568776E6h, 2F551715h
		dd 848C9A27h, 80h, 4 dup(0)
		dd 1020000h, 7B536628h,	63526767h, 65F5686Ah, 4026E154h
		dd 9E646B27h, 676252F7h, 57EF452Eh, 6F78001Fh, 1B08B067h
		dd 0D9A39594h, 0DEF56254h, 0EC85A10Ah, 0F8DAB336h, 0F90632A2h
		dd 0D799F2C4h, 369C1AB2h, 0C8F23791h, 0DAAE14Ah, 34E75B76h
		dd 5EF9B333h, 0E7322933h, 0CA45A20Eh, 0EEA1824h, 0FB1880F9h
		dd 40h,	2 dup(0)
		dd 900EA204h, 0C86790C3h, 0A5B9BB93h, 0
__EC_X9_62_CHAR2_191V2 dd offset byte_197 ; DATA XREF: .rdata:00002D24o
		dd 14h,	18h, 4,	2FEF7108h, 96D624EFh, 568776E6h, 0BE581715h
		dd 155CD9E0h, 80h, 4 dup(0)
		dd 1020000h, 77281040h,	0C777774Dh, 136D66B7h, 2043EA66h
		dd 894F2771h, 18E701FFh, 8D042006h, 3BDBC28h, 999C24B6h
		dd 8C7C2B18h, 0C30097D1h, 16AC462h, 0B7B20938h,	0CC281BCCh
		dd 6A92875Ah, 28FD83ADh, 0E2819E78h, 10BFE3C9h,	86434317h
		dd 0F3146D62h, 6017F0DBh, 3E3A21D9h, 0EC7AF31Ch, 8A667D43h
		dd 20h,	2 dup(0)
aPpmQeRkbs	db 'PPå∏üe($‡kÅs',0
		align 4
__EC_X9_62_CHAR2_191V3 dd offset byte_197 ; DATA XREF: .rdata:00002D34o
		dd 14h,	18h, 6,	2D5153E0h, 96D684C6h, 568776E6h, 67501715h
		dd 1F6D78AEh, 80h, 4 dup(0)
		dd 1020000h, 4707016Ch,	22910956h, 91561022h, 7ED7771Ch
		dd 0E777A777h, 0CB7FE7E7h, 0F91AFE71h, 7984CF26h, 8DEFEF89h
		dd 63F659B4h, 320FD994h, 0E8153FADh, 0E24C5D37h, 4443DE4Fh
		dd 4687DE89h, 18617E7h,	6EE60950h, 0DD26A938h, 17395A54h
		dd 5D579661h, 36995998h, 4CD36A6Eh, 0D77CA7E0h,	0BE067B12h
		dd 55555515h, 2	dup(55555555h),	190B0C61h, 0B6BF1268h
		dd 0A33E8A28h, 0
__EC_X9_62_CHAR2_208W1 dd offset byte_197 ; DATA XREF: .rdata:00002D44o
		align 8
		dd 1Bh,	0FE48h,	1, 3 dup(0)
		dd 8, 0
		dd 70000h, 6 dup(0)
		dd 0C8000000h, 5AD49E61h, 2E21E662h, 9E346011h,	4484FA2Bh
		dd 2AFCFA39h, 8F63D13Fh, 0FD89009Eh, 0E1ABE4FBh, 5995DF93h
		dd 0C07AF0ECh, 4E5578CEh, 8CEB8427h, 7AA5D11Eh,	0B5550F00h
		dd 8EE7061Ah, 38AC39Ah,	0D820F55Fh, 0BE8117B0h,	8BBA6B1h
		dd 0E37D61h, 0BA010100h, 23975CF9h, 216C7BC5h, 2DFF2EDAh
		dd 0BD88D55Eh, 217E71D5h, 9D2Fh, 0
__EC_X9_62_CHAR2_239V1 dd offset byte_197 ; DATA XREF: .rdata:00002D54o
		dd 14h,	1Eh, 4,	4D9A4BD3h, 68676E69h, 75516175h, 20B971CAh
		dd 5DB0EFBFh, 80h, 5 dup(0)
		dd offset dword_FD4+2Ch
		dd 1320100h, 7C075708h,	3A123154h, 9008B846h, 43F55667h
		dd 278D3E42h, 12787587h, 76AC7857h, 0F2080479h,	92F3DAEEh
		dd 0EFED12B0h, 302F39B3h, 0C7C32F4h, 0C31FF3A3h, 0AA22C483h
		dd 9257168Ch, 93FA9870h, 960A7C2Eh, 705BFDD3h, 0F5E5F76Eh
		dd 6BE156C1h, 3867C7Eh,	1DE95285h, 50EED861h, 0EC3FC377h
		dd 6BA1F1F6h, 69E48D26h, 4E74C7C3h, 6471A9A9h, 61A9C79Fh
		dd 200563h, 3 dup(0)
		dd 424D0F00h, 2A49E1FFh, 0CAF19349h, 47E466D6h
__EC_X9_62_CHAR2_239V2 dd offset byte_197 ; DATA XREF: .rdata:00002D64o
		dd 14h,	1Eh, 6,	2F98A62Ah, 96D6A4DFh, 568776E6h, 265D1715h
		dd 7D272767h, 80h, 5 dup(0)
		dd offset dword_FD4+2Ch
		dd 30420100h, 0A7577701h, 23E4FA67h, 749B5698h,	53D42563h
		dd 6607AF13h, 0B7796426h, 5FE65456h, 65EA3750h,	0F0CF9641h
		dd 0C1B282CDh, 2ECF2F4Ah, 5277F83Fh, 7245B585h,	0CDEA032Fh
		dd 0F9284BB7h, 904ED0h,	47DCC869h, 0FE3485A0h, 0B9D276h
		dd 31EFD7B7h, 209F70F5h, 5A24C0Ch, 4C336756h, 0B5F3AF45h
		dd 9DAD3BA0h, 712C5ED7h, 566293A9h, 0F753547Dh,	7E226EFAh
		dd 551533C8h, 3	dup(55555555h),	286F3C55h, 319C2585h, 15DFFCE3h
		dd 2D522446h
__EC_X9_62_CHAR2_239V3 dd offset byte_197 ; DATA XREF: .rdata:00002D74o
		dd 14h,	1Eh, 0Ah, 4D6F079Eh, 68676E69h,	75516175h, 0DD9F1EE1h
		dd 4120F977h, 80h, 5 dup(0)
		dd offset dword_FD4+2Ch
		dd 23010100h, 6A667487h, 666D7667h, 0E678F776h,	9969B676h
		dd 0E6666617h, 876D6687h, 9F6AC666h, 7719946Ah,	436A9FBAh
		dd 0FCAC9951h, 0D57E0651h, 0C519F587h, 0B841B5ECh, 0DE1141E4h
		dd 0F670401Dh, 284DD0E9h, 91894E9Ch, 0B53E33Ch,	9703E9FDh
		dd 46B1427Dh, 1BBF39D5h, 929C4EDEh, 0AF0E5A2Eh,	5135E6Eh
		dd 0CE4D00B9h, 0FED70E5Ch, 856A359h, 0C83738F3h, 790BD816h
		dd 0CC0C61F4h, 3 dup(0CCCCCCCCh), 1249ACCCh, 90DFD9D2h
		dd 8B88F93Eh, 0FF4C0E8Ah
__EC_X9_62_CHAR2_272W1 dd offset byte_197 ; DATA XREF: .rdata:00002D84o
		align 8
		dd offset dword_4+1Fh
		dd 0FF06h, 1, 5	dup(0)
		dd 1000000h, 0
		dd 0B0000h, 0F091A091h,	4ABA5F3Bh, 9CF4CCB2h, 0F22DD4Eh
		dd 2D7128B0h, 2B75BE42h, 4D09402Ch, 86B5CDBAh, 710020FBh
		dd 2BC9EF67h, 7CCEE3B2h, 34FFAA8Ah, 559C2AE1h, 0C7D70370h
		dd 0AF6F3Ah, 0CCF6993Fh, 40E58284h, 86100F7h, 0EE2CBBBAh
		dd 587F7BCh, 0BE6C058Ah, 2D62FE0Ch, 89A22377h, 0AE078AE0h
		dd 100DEF13h, 8DDD71D1h, 69C71000h, 1E851657h, 0F6A76BEFh
		dd 42612E87h, 0B841D2FBh, 0FC5EFF30h, 0B0CAECACh, 5D00025Eh
		dd 239DDEh, 0FA000100h,	0E05413F5h, 92489EE3h, 9C316EDFh
		dd 1616C872h, 0AA45FA03h, 168A997Bh, 621E8F7Bh,	2195h
		dd 0
__EC_X9_62_CHAR2_304W1 dd offset byte_197 ; DATA XREF: .rdata:00002D94o
		align 10h
		dd offset dword_4+23h
		dd 0FE2Eh, 1, 8	dup(0)
		dd 70800h, 31690DFDh, 0F618A149h, 0E6DCE651h, 37852080h
		dd 2D885F7Eh, 440B511Bh, 0C1740016h, 36788028h,	0C896035Ah
		dd 0BD0081E6h, 55E597DBh, 8E900AA5h, 791CB043h,	0A6DAA58Eh
		dd 0A21E8F78h, 0F5FC4E79h, 0C1B86671h, 1E603940h, 40738255h
		dd 7B1900BEh, 9B5E8407h, 0DB6AD9E2h, 7F3C5F0Fh,	7ABDFF2Ch
		dd 0FEB6B83Eh, 0D67F5CC3h, 0F6DD267Fh, 4F645A28h, 14260A74h
		dd 0BE9FE100h, 0A10D6EB7h, 0CF7E5171h, 28501B40h, 1014F09Bh
		dd 7A528832h, 106A419Bh, 0B26805Eh, 1BDC9F54h, 3BC092h
		dd 0D5010100h, 0AB2A5756h, 10180ACh, 2A5756D5h,	180ACABh
		dd 915C2D02h, 8F3F17DDh, 68DA61B5h, 43441699h, 1D05h, 0
__EC_X9_62_CHAR2_359V1 dd offset byte_197 ; DATA XREF: .rdata:00002DA4o
		dd 14h,	2Dh, 4Ch, 2049352Bh, 96D624B7h,	568776E6h, 5B581715h
		dd 0C62D33A1h, 80h, 8 dup(0)
		dd 10h,	0
		dd 67675601h, 204B656Ah, 6E354F75h, 0D91720A9h,	467C5646h
		dd 0F1565567h, 46A05695h, 0D267B516h, 56E0A523h, 9054FB56h
		dd 5666A916h, 722457A5h, 7C19D0E2h, 1F3F3649h, 0DBB6F5E7h
		dd 0B6525D07h, 5D137D94h, 8045A48Ch, 34BC395Dh,	96082656h
		dd 632B7487h, 8006E729h, 3C881923h, 4F38E25h, 0EDE76777h
		dd 0AAFDF1E0h, 38EEDA79h, 136A3641h, 0CE3A162Eh, 124EDD4h
		dd 0DC6B9CDFh, 0E7E898DEh, 227AC007h, 97B0B139h, 85E0D753h
		dd 48705429h, 959C1E12h, 0D81D79F3h, 48399604h,	7BAE4FF3h
		dd 23A84EF4h, 6878DC65h, 0AEE457FEh, 3011E22Dh,	471405Ah
		dd 28AF01BDh, 0F21ACA6Bh, 0AFA1BC86h, 1ACA6B28h, 0A1BC86F2h
		dd 0C96B28AFh, 856B8FFBh, 2C8956C5h, 96EBA720h,	9E71E74Fh
		dd 7590F474h, 3B8Dh, 0
__EC_X9_62_CHAR2_368W1 dd offset byte_197 ; DATA XREF: .rdata:00002DB4o
		align 8
		dd offset dword_4+2Bh
		dd 0FF70h, 1, 8	dup(0)
		dd offset dword_4+1Ch
		dd 0
		dd 70000h, 25EED2E0h, 0F5065209h, 0EDF9A4E2h, 251F9F22h
		dd 0E2A0796Eh, 0D9755B4h, 5B860D8Dh, 0C57847D9h, 0A2FD676h
		dd 0CD9C51B7h, 6A901A2Ah, 0FC000DE3h, 32D41712h, 2C45900Ah
		dd 0ED580A76h, 0DDC830CDh, 343C9B06h, 0A3373845h, 0B50CD54Eh
		dd 0C2E11749h, 0D1842D11h, 0F844F464h, 48647F7h, 8510006Ah
		dd 815375E2h, 0C1E3CCDCh, 10FA7A55h, 0C2C0F0C2h, 0C5465682h
		dd 4C394AB3h, 0C18BFABCh, 0E7E7226Bh, 0BE27E989h, 0E1026F21h
		dd 5F6A13FBh, 0B13E7B00h, 62BADCBDh, 5B2D8D5h, 9757529Bh
		dd 2C8273FCh, 629C0559h, 38FF453Ah, 0F8E8CE43h,	5A85D17Ch
		dd 2A1EA8DAh, 0FB85007h, 1023DAh, 90000100h, 0AFA92D51h
		dd 4983B072h, 0D45D8AD9h, 2E53B0C7h, 3CE51CAh, 3B0FD1E2h
		dd 0BD79C57Ah, 0AE09E987h, 31F1A640h, 5BCECFE9h, 67D9h
		dd 0
__EC_X9_62_CHAR2_431R1 dd offset byte_197 ; DATA XREF: .rdata:00002DC4o
		align 8
		dd offset dword_30+6
		dd offset dword_2760
		dd offset dword_80
		dd 8 dup(0)
		dd 10000h, 3 dup(0)
		dd 821A0100h, 0D60DF07Eh, 4C230EFCh, 6A6C04AFh,	39858A5Dh
		dd 0C46C235Bh, 2AF32CADh, 0C9BDAD0Ch, 0B020F6DDh, 0D00699EBh
		dd 6F6C7F95h, 5461CDEAh, 4D10DF68h, 8FCD96E2h, 0A3B4D910h
		dd 8B7D04D9h, 0AB594315h, 547F1BFBh, 0EB4CB085h, 0DD378286h
		dd 98DADEC9h, 5A9A672Ah, 6D629B91h, 0DDA8504Eh,	7A101B73h
		dd 1F386299h, 0BF07D8B5h, 0F121826h, 673C5DC0h,	61E19DA9h
		dd 2609F4D2h, 70CAFE22h, 0FF5E41Bh, 4E715847h, 0F2BB878Ah
		dd 8CEF58A6h, 0EFC5E721h, 1F3665E9h, 0C099296Ch, 0DBB047C2h
		dd 0B7E60CD7h, 89AFD020h, 8D6FA903h, 55C2A25Fh,	453C5D74h
		dd 932C301Bh, 0E4B7D946h, 0E4BCE785h, 1F596B1Fh, 0DD6A8F3Eh
		dd 4CBCB0CBh, 7D7A942Fh, 629BA8E1h, 8B596A5Dh, 3006037h
		dd 40033440h, 34400334h, 3344003h, 40033440h, 34400334h
		dd 3344003h, 23033440h,	0B5FA13C3h, 3B708905h, 358DC65Eh
		dd 0DC6FE87h, 49C11C16h, 914AADC1h, 0
__EC_WTLS_1	dd offset byte_197	; DATA XREF: .rdata:00002DD4o
		align 10h
		dd 0Fh,	2 dup(2), 2 dup(0)
		dd 10200h, 3 dup(0)
		dd offset dword_DC+24h
		dd 3 dup(0)
		dd 79660101h, 0A40BA479h, 0C2D5E597h, 17067870h, 4A4BF400h
		dd 63C2ECF1h, 5C78080Eh, 15CCEBh, 0FFFFFFFFh, 0FDFFFFFFh
		dd 6DAF91BFh, 73EAh, 0
__EC_IPSEC_155_ID3 dd offset byte_197	; DATA XREF: .rdata:00002E84o
		align 10h
		dd 14h,	3, 8, 2	dup(0)
		dd offset dword_30+10h
		dd 1000000h, 9 dup(0)
		dd 8F330700h, 4	dup(0)
		dd 7B000000h, 4	dup(0)
		dd 0C8010000h, 0AAAAAA02h, 0AAAAAAAAh, 0F3C7AAAAh, 0D01B88C7h
		dd 6CA88F86h
__EC_IPSEC_185_ID4 dd offset byte_197	; DATA XREF: .rdata:00002E94o
		align 8
		dd 18h,	2 dup(2), 2 dup(0)
		dd 20000000h, 0
		dd 1000000h, 0Bh dup(0)
		dd 0E91E0000h, 5 dup(0)
		dd 18000000h, 5	dup(0)
		dd 0D000000h, 0FFFFFF00h, 2 dup(0FFFFFFFFh), 447CF9EDh
		dd 20249FDBh, 5EA7FCBAh
__EC_brainpoolP160r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002EA4o
		align 8
		dd 14h,	1, 5F4A5EE9h, 0DC597073h, 0ADC7DF60h, 13D8B395h
		dd 0F621595h, 0E27B0E34h, 74EB80A2h, 0BA61BEE2h, 975D74DAh
		dd 0C3F7E8h, 859A581Eh,	12344295h, 2DAA4F13h, 0C895ECBDh
		dd 585E67D8h, 16AFD5BEh, 4F6A3FEAh, 468C9362h, 0F75AEB31h
		dd 0C3DBBCBDh, 47CB6716h, 0C38E1A7Ah, 4147F938h, 63979C66h
		dd 2163DA16h, 5F4A5EE9h, 0DC597073h, 9159DF60h,	402950D4h
		dd 9FC609Eh
__EC_brainpoolP160t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002EB4o
		align 10h
		dd 14h,	1, 5F4A5EE9h, 0DC597073h, 0ADC7DF60h, 13D8B395h
		dd 0F621595h, 5F4A5EE9h, 0DC597073h, 0ADC7DF60h, 13D8B395h
		dd 0C621595h, 6D6B557Ah, 7B5B53AEh, 4D2CED51h, 0B7AAA7Dh
		dd 80F3555Ch, 3BB199B1h, 0C1EF349Bh, 0BA647E39h, 0C2AC05EBh
		dd 7823FF65h, 8B71D6ADh, 61197C7Ch, 841B99F0h, 21774324h
		dd 0ADE0C952h, 5F4A5EE9h, 0DC597073h, 9159DF60h, 402950D4h
		dd 9FC609Eh
__EC_brainpoolP192r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002EC4o
		align 8
		dd 18h,	1, 1DF402C3h, 0CD362A93h, 3046A3A7h, 0B78DD193h
		dd 6D47CE8Fh, 9762A8E1h, 4017916Ah, 0E1E0B176h,	31C0399Ch
		dd 0C18586FEh, 0E540E0CAh, 0EF289AC6h, 0EF289A46h, 0A3CC287Ch
		dd 41D72DCh, 0BC96444Fh, 14F47ECAh, 0C925BF6Fh,	7E64A0C0h
		dd 87A4B6AAh, 0C533B053h, 90F0B06Ch, 485C2F0Ah,	0D65F3753h
		dd 8690B614h, 0B85BBD6Ah, 28485F8Bh, 20049C1h, 0A23F77E6h
		dd 8F9B29FAh, 1DF402C3h, 0CD362A93h, 2F46A3A7h,	6B919E9Eh
		dd 2F1E85Bh, 0C1ACC49Ah
__EC_brainpoolP192t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002ED4o
		align 8
		dd 18h,	1, 1DF402C3h, 0CD362A93h, 3046A3A7h, 0B78DD193h
		dd 6D47CE8Fh, 9762A8E1h, 1DF402C3h, 0CD362A93h,	3046A3A7h
		dd 0B78DD193h, 6D47CE8Fh, 9462A8E1h, 0FA6FD513h, 1E6878ECh
		dd 0B4DEF968h, 0C2BE353Bh, 2E5468FBh, 797B8927h, 8CE5E93Ah
		dd 303CF682h, 0E71F2E28h, 0A73FF4BBh, 0F66A442Ch, 298161F4h
		dd 562C7E09h, 3A22C267h, 0CAB52A90h, 84009D44h,	0DEB3E5B7h
		dd 0C901CC7Ch, 1DF402C3h, 0CD362A93h, 2F46A3A7h, 6B919E9Eh
		dd 2F1E85Bh, 0C1ACC49Ah
__EC_brainpoolP224r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002EE4o
		align 8
		dd 1Ch,	1, 0AA34C1D7h, 86664326h, 2530182Ah, 87D7D175h
		dd 57079FB0h, 0F589DA97h, 0FFC0C87Eh, 2CE6A568h, 1C6CCEA9h
		dd 0A6039829h, 510B53C1h, 0D82A184Eh, 592A04B0h, 439FD2CAh
		dd 3CF68025h, 3841E4CFh, 0B1130787h, 0E36923A9h, 0D235213Eh
		dd 72B3DB66h, 0B406C38h, 0AD29900Dh, 0F45C7E2Ch, 0B2230834h
		dd 8CC67DA8h, 17E34C9Eh, 0FD6E1E4Ch, 7DC012EEh,	0F756AA58h
		dd 6F72C072h, 9EB8C624h, 24ACCD4Eh, 999E4B35h, 0D3F6A3CAh
		dd 0CD021476h, 0AA34C1D7h, 86664326h, 2530182Ah, 98FBD075h
		dd 4BBC16D1h, 0A3BCDE6Dh, 9F93A7A5h
__EC_brainpoolP224t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002EF4o
		align 10h
		dd 1Ch,	1, 0AA34C1D7h, 86664326h, 2530182Ah, 87D7D175h
		dd 57079FB0h, 0F589DA97h, 0FFC0C87Eh, 0AA34C1D7h, 86664326h
		dd 2530182Ah, 87D7D175h, 57079FB0h, 0F589DA97h,	0FCC0C87Eh
		dd 937D334Bh, 7BCD0441h, 0F61B27EFh, 0D21EED0Ch, 84CA10Dh
		dd 0F164BBB3h, 8D88608Ah, 44E3B16Ah, 38FF25CEh,	7F4E4296h
		dd 2E7614FEh, 92F849CBh, 60C7C08Ah, 80D5B429h, 0F5E97403h
		dd 8C563E14h, 4D3F3FD2h, 1E4B0D7Ch, 0DCCC841h, 5FBD6A1Ch
		dd 4CDB461Ah, 0AA34C1D7h, 86664326h, 2530182Ah,	98FBD075h
		dd 4BBC16D1h, 0A3BCDE6Dh, 9F93A7A5h
__EC_brainpoolP256r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F04o
		align 8
		dd offset dword_4+1Ch
		dd 1, 0DB57FBA9h, 0BCA9EEA1h, 900A663Eh, 728D839Dh, 23F63B6Eh
		dd 282026D5h, 1D481320h, 77536E1Fh, 75095A7Dh, 57302CFCh
		dd 3075F6EEh, 0E7FF7A41h, 0C15580FBh, 6C5CDC26h, 444B4AE9h
		dd 0D9B530F3h, 6C5CDC26h, 444B4AE9h, 0D9B530F3h, 0BF7CD7BBh
		dd 29168495h, 0CEE1F75Ch, 18DCCC6Bh, 0B6078CFFh, 0B9AED28Bh
		dd 0CB577ECBh, 2F484B2Ch, 0AFB781FCh, 0E127DEB9h, 0C223BDE3h
		dd 0BD53443Ah, 6232CE9Ah, 35F87E54h, 0FDC4DAC3h, 1A46F897h
		dd 0C91D6114h, 134577C2h, 548EED2Dh, 0C7541D5Ch, 9769042Fh
		dd 0DB57FBA9h, 0BCA9EEA1h, 900A663Eh, 718D839Dh, 0A37A398Ch
		dd 0F7A661B5h, 820E1E90h, 0A7564897h
__EC_brainpoolP256t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F14o
		align 8
		dd offset dword_4+1Ch
		dd 1, 0DB57FBA9h, 0BCA9EEA1h, 900A663Eh, 728D839Dh, 23F63B6Eh
		dd 282026D5h, 1D481320h, 77536E1Fh, 0DB57FBA9h,	0BCA9EEA1h
		dd 900A663Eh, 728D839Dh, 23F63B6Eh, 282026D5h, 1D481320h
		dd 74536E1Fh, 0C4612C66h, 0A44ED830h, 73A766FEh, 0B7760B3Dh
		dd 0C4EB93BFh, 25492FAFh, 181E56Ah, 42BE9FEh, 3CEBE8A3h
		dd 0B7E7CFC1h, 0B2132273h, 4961653Ah, 0C442A1AFh, 2BBCAF7Ah
		dd 5691A179h, 0F405132Eh, 826C992Dh, 6DC53934h,	0E1227B7Fh
		dd 7E414446h, 0DEB6BC69h, 27D039h, 0F3E8AB1Dh, 0BEC9255Bh
		dd 0DB57FBA9h, 0BCA9EEA1h, 900A663Eh, 718D839Dh, 0A37A398Ch
		dd 0F7A661B5h, 820E1E90h, 0A7564897h
__EC_brainpoolP320r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F24o
		align 8
		dd offset dword_4+24h
		dd 1, 20475ED3h, 0B74FBC36h, 5E783CE1h,	65E001D2h, 0A6CF8FF9h
		dd 0EF0DF4F6h, 0ECB9924Fh, 28EC9378h, 0B112D4FCh, 272EB3F1h
		dd 560BE33Eh, 0F8B0BA8Fh, 0D4EBCC83h, 0B83B3F6Dh, 1335A7A2h
		dd 0DA79EBF5h, 0B00E1966h, 0F4A9FF85h, 0A975F392h, 0B40E867Dh
		dd 94830852h, 42BCFD9Dh, 8619ADD3h, 6F8A6840h, 34413FE1h
		dd 9AB45495h, 0CDDC31CCh, 81394588h, 0ACB45E6Fh, 0A6F1B18Fh
		dd 9A7EBD43h, 0B8D853FBh, 0C4BC8952h, 0E6BFE58Eh, 0D13701F2h
		dd 0B67E080Ah, 2A1E87E7h, 0C799A510h, 0D8DAF10h, 1106E239h
		dd 55D0FD14h, 0C81CEC45h, 249340ABh, 5E27777Fh,	0EDFF4307h
		dd 0EA827111h, 7778C7A9h, 0C76AACAAh, 0D14552D3h, 0E18E2E69h
		dd 20475ED3h, 0B74FBC36h, 5E783CE1h, 65E001D2h,	0A5CF8FF9h
		dd 0A3128FB6h, 0C72E482Dh, 0E95886EEh, 5B559186h, 1193C544h
__EC_brainpoolP320t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F34o
		align 8
		dd offset dword_4+24h
		dd 1, 20475ED3h, 0B74FBC36h, 5E783CE1h,	65E001D2h, 0A6CF8FF9h
		dd 0EF0DF4F6h, 0ECB9924Fh, 28EC9378h, 0B112D4FCh, 272EB3F1h
		dd 20475ED3h, 0B74FBC36h, 5E783CE1h, 65E001D2h,	0A6CF8FF9h
		dd 0EF0DF4F6h, 0ECB9924Fh, 28EC9378h, 0B112D4FCh, 242EB3F1h
		dd 0E061F5A7h, 0D51EEB38h, 47D1B360h, 132078DBh, 0F2194C06h
		dd 677CD27Eh, 7FF7AA80h, 0CE47A5B8h, 0F4FEB4B5h, 53033422h
		dd 0FBE95B92h, 0FBC6AF01h, 497D3E4Dh, 810F0190h, 10AB0834h
		dd 0CB094F6Ch, 6878E07Eh, 0FF6F13CCh, 24F65733h, 52ED1BA2h
		dd 7A3ABA63h, 0BF3E4827h, 0EFDB7166h, 0EB30BB7Ah, 584E08EEh
		dd 0AD77B0A0h, 98A0A542h, 1BE71E9Dh, 45C09B1Bh,	0C3D2B05Fh
		dd 20475ED3h, 0B74FBC36h, 5E783CE1h, 65E001D2h,	0A5CF8FF9h
		dd 0A3128FB6h, 0C72E482Dh, 0E95886EEh, 5B559186h, 1193C544h
__EC_brainpoolP384r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F44o
		align 8
		dd offset dword_30
		dd 1, 821EB98Ch, 286D38A3h, 7E6F5D0Fh, 0DF41E650h, 9712F15h
		dd 0B45654EDh, 19DAB112h, 2311B77Fh, 29A7D3ACh,	711A1D90h
		dd 13004787h, 53EC0731h, 0C682C37Bh, 0C158C3Dh,	0A08723Ch
		dd 0A0AF05CEh, 8EA2BEC2h, 8727B24Fh, 0EF659113h, 0FF991BAh
		dd 4A81A58Ah, 0EBD43A50h, 0DDC7A804h, 2628CE22h, 0DDC7A804h
		dd 2628CE22h, 54B5398Bh, 7C44F016h, 0E17DB72Fh,	0A6D2DC07h
		dd 0A50E882Eh, 0D562EB3Eh, 239B47Ch, 94C9DB95h,	9686B73Ah
		dd 114C50FAh, 0F0641C1Dh, 0FF45CF68h, 813AA6A2h, 6B3FC1B7h
		dd 0E7A34788h, 0E34FF17Eh, 0FECA7FDBh, 0E810BD0Ch, 34E026E8h
		dd 0AA46D636h, 0E2B287EFh, 1EAFD447h, 751DBE8Ah, 0A4C2F920h
		dd 8EEBB15Ch, 52D5CF95h, 290BB762h, 6458ECFEh, 4F059CE1h
		dd 282991F9h, 2146460Eh, 11819177h, 41038242h, 15533C26h
		dd 821EB98Ch, 286D38A3h, 7E6F5D0Fh, 0DF41E650h,	9712F15h
		dd 0B35654EDh, 6C6E161Fh, 0A72504ACh, 0AFB63ACFh, 10C37F6Bh
		dd 232883Bh, 656504E9h
__EC_brainpoolP384t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F54o
		align 8
		dd offset dword_30
		dd 1, 821EB98Ch, 286D38A3h, 7E6F5D0Fh, 0DF41E650h, 9712F15h
		dd 0B45654EDh, 19DAB112h, 2311B77Fh, 29A7D3ACh,	711A1D90h
		dd 13004787h, 53EC0731h, 821EB98Ch, 286D38A3h, 7E6F5D0Fh
		dd 0DF41E650h, 9712F15h, 0B45654EDh, 19DAB112h,	2311B77Fh
		dd 29A7D3ACh, 711A1D90h, 13004787h, 50EC0731h, 0AD9E517Fh
		dd 1BA8BDA7h, 0A6DB26D8h, 8C0F9147h, 0ED46934Bh, 4EC6CD8Ch
		dd 11BD1A4Bh, 1DCE6D75h, 26AA7420h, 5C80883Bh, 5A3570EDh
		dd 0EE71B433h, 0B098DE18h, 6A3B92Dh, 72CDAFF2h,	812AF735h
		dd 12AB809Bh, 1753D6EBh, 0CDFE7624h, 0FFAB2A46h, 1B19FFC4h
		dd 545F6A94h, 2FAAD0D8h, 0CC088841h, 6905AB25h,	5106D362h
		dd 0D2AF14A1h, 36D35A75h, 47937F74h, 0CA1F7A5Bh, 0B6F2883Bh
		dd 0FECC08A2h, 58089446h, 91B2C24Dh, 5BBF7526h,	2829589Eh
		dd 821EB98Ch, 286D38A3h, 7E6F5D0Fh, 0DF41E650h,	9712F15h
		dd 0B35654EDh, 6C6E161Fh, 0A72504ACh, 0AFB63ACFh, 10C37F6Bh
		dd 232883Bh, 656504E9h
__EC_brainpoolP512r1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F64o
		align 8
		dd offset dword_30+10h
		dd 1
dword_2760	dd 0B89DDDAAh, 8BC4E9DBh, 0AEE6D43Fh, 7FCC933h,	0B38D30CBh
					; DATA XREF: .rdata:00001AACo
		dd 0ED2C9B3h, 0CA9C63D6h, 71083370h, 9B4D7Dh, 4268C69Bh
		dd 2AA1CDAEh, 0E680A3E6h, 2FFF8128h, 85C6822Dh,	5660AA28h
		dd 0F3483A58h, 31A33078h, 893B608Bh, 457132E2h,	0C54C23ACh
		dd 8DDDCB94h, 1016F93Dh, 0CA4134A8h, 0BC6398EAh, 5A5DED2Dh
		dd 0A13A25A8h, 0C9F12E0Ah, 0B5C89A8Bh, 0A717117Fh, 0B9C7F22Bh
		dd 4DACC1E7h, 0CA94FC77h, 1016F93Dh, 0CA4134A8h, 0BC6398EAh
		dd 5A5DED2Dh, 0A13A25A8h, 0C9F12E0Ah, 0B5C89A8Bh, 0A717117Fh
		dd 0B9C7F22Bh, 4DACC1E7h, 0CA94FC77h, 673E08DCh, 0B7504098h
		dd 0DDE5BA5Eh, 63BD0928h, 23F71680h, 0BDE4AE81h, 64D92ED8h
		dd 2E32215Ah, 936A4C9Ch, 709FED85h, 0C116D9B5h,	0EE623BB4h
		dd 8E09D0F4h, 781F3BFFh, 8DD4D0E2h, 7B68D150h, 5F7DB993h
		dd 47506D7Ch, 685E6A40h, 922358Bh, 22F8B9BCh, 5D38DE7Dh
		dd 0EC326356h, 0A9BFEAC0h, 0FD2278CFh, 0F709F2h, 1A7BA524h
		dd 5BC500A0h, 11811F88h, 49DEDCB2h, 5E485F4Ah, 0D84BCA5Bh
		dd 0AE63278Ah, 2F2BCAD1h, 654F0A8h, 0F1ECD78h, 9208D83Ah
		dd 0B89DDDAAh, 8BC4E9DBh, 0AEE6D43Fh, 7FCC933h,	0B38D30CBh
		dd 0ED2C9B3h, 0CA9C63D6h, 70083370h, 415C3E55h,	1926A94Ch
		dd 19618641h, 4710AC7Fh, 81D3B11Dh, 0DDDA5D08h,	829687B5h
		dd 6900A99Ch
__EC_brainpoolP512t1 dd	offset byte_194+2 ; DATA XREF: .rdata:00002F74o
		align 8
		dd offset dword_30+10h
		dd 1, 0B89DDDAAh, 8BC4E9DBh, 0AEE6D43Fh, 7FCC933h, 0B38D30CBh
		dd 0ED2C9B3h, 0CA9C63D6h, 71083370h, 9B4D7Dh, 4268C69Bh
		dd 2AA1CDAEh, 0E680A3E6h, 2FFF8128h, 85C6822Dh,	5660AA28h
		dd 0F3483A58h, 0B89DDDAAh, 8BC4E9DBh, 0AEE6D43Fh, 7FCC933h
		dd 0B38D30CBh, 0ED2C9B3h, 0CA9C63D6h, 71083370h, 9B4D7Dh
		dd 4268C69Bh, 2AA1CDAEh, 0E680A3E6h, 2FFF8128h,	85C6822Dh
		dd 5660AA28h, 0F0483A58h, 0F9BCBB7Ch, 0B7FA1C44h, 0E490186Eh
		dd 0E3EA8468h, 0B0CF721h, 528149CBh, 4B509778h,	0A6363EECh
		dd 23FACD2Bh, 40659704h, 850045F6h, 45E1DAF2h, 0B45325C2h
		dd 89367665h, 57A20E18h, 3E426718h, 5CCE0E64h, 17877812h
		dd 6BAC1B9h, 0FEA6C2CBh, 248485BAh, 0DE6DC558h,	8D75B19Dh
		dd 3D31C039h, 7351BA82h, 0A43EDB5Ch, 0A777AA99h, 643A94D6h
		dd 5FF2A3F7h, 0B5066FE2h, 9626AA1Bh, 0DA3590FAh, 0D54B535Bh
		dd 0FAFF595h, 3792C8A2h, 0E1AC846Ch, 19304EBBh,	0C03416B7h
		dd 9C153111h, 0E9CE03AEh, 842193D9h, 6B21EFBEh,	0DAF21DD7h
		dd 27A686DFh, 0F9CF6E30h, 0AC8BBB6Dh, 1EB698E1h, 32B3F800h
		dd 0B89DDDAAh, 8BC4E9DBh, 0AEE6D43Fh, 7FCC933h,	0B38D30CBh
		dd 0ED2C9B3h, 0CA9C63D6h, 70083370h, 415C3E55h,	1926A94Ch
		dd 19618641h, 4710AC7Fh, 81D3B11Dh, 0DDDA5D08h,	829687B5h
		dd 6900A99Ch
_curve_list	dd offset aYbsrS	; DATA XREF: _EC_GROUP_new_by_curve_name+19o
					; _EC_GROUP_new_by_curve_name+37o
					; "ybSrÿ¿≈·"
		dd offset __EC_SECG_PRIME_112R1
		dd 0
off_2A7C	dd offset ??_C@_0CL@JMAEHKDJ@SECG?1WTLS?5curve?5over?5a?5112?5bit?5p@
					; DATA XREF: _EC_get_builtin_curves+23o
					; "SECG/WTLS curve over	a 112 bit prime	fi"...
		dd offset aYbsrS+1	; "bSrÿ¿≈·"
		dd offset __EC_SECG_PRIME_112R2
		dd 0
		dd offset ??_C@_0CG@IMPBFOOG@SECG?5curve?5over?5a?5112?5bit?5prime?5@ ;	"SECG curve over a 112 bit prime field"
		dd offset aYbsrS+2	; "Srÿ¿≈·"
		dd offset __EC_SECG_PRIME_128R1
		dd 0
		dd offset ??_C@_0CG@DNCCBNMA@SECG?5curve?5over?5a?5128?5bit?5prime?5@ ;	"SECG curve over a 128 bit prime field"
		dd offset aYbsrS+3	; "rÿ¿≈·"
		dd offset __EC_SECG_PRIME_128R2
		dd 0
		dd offset ??_C@_0CG@DNCCBNMA@SECG?5curve?5over?5a?5128?5bit?5prime?5@ ;	"SECG curve over a 128 bit prime field"
		dd offset aYbsrS+4	; "ÿ¿≈·"
		dd offset __EC_SECG_PRIME_160K1
		dd 0
		dd offset ??_C@_0CG@MDBLLOCO@SECG?5curve?5over?5a?5160?5bit?5prime?5@ ;	"SECG curve over a 160 bit prime field"
		dd offset aYbsrS+5	; "¿≈·"
		dd offset __EC_SECG_PRIME_160R1
		dd 0
		dd offset ??_C@_0CG@MDBLLOCO@SECG?5curve?5over?5a?5160?5bit?5prime?5@ ;	"SECG curve over a 160 bit prime field"
		dd offset aYbsrS+6	; "≈·"
		dd offset __EC_SECG_PRIME_160R2
		dd 0
		dd offset ??_C@_0CL@NDOOJKPB@SECG?1WTLS?5curve?5over?5a?5160?5bit?5p@ ;	"SECG/WTLS curve over a	160 bit	prime fi"...
		dd offset aYbsrS+7	; "·"
		dd offset __EC_SECG_PRIME_192K1
		dd 0
		dd offset ??_C@_0CG@IFFAEDGD@SECG?5curve?5over?5a?5192?5bit?5prime?5@ ;	"SECG curve over a 192 bit prime field"
		dd offset aYbsrS+8	; ""
		dd offset __EC_SECG_PRIME_224K1
		dd 0
		dd offset ??_C@_0CG@IOHCCJAA@SECG?5curve?5over?5a?5224?5bit?5prime?5@ ;	"SECG curve over a 224 bit prime field"
		dd offset byte_2C9
		dd offset __EC_NIST_PRIME_224
		dd 0
		dd offset ??_C@_0CL@NHPHHEEB@NIST?1SECG?5curve?5over?5a?5224?5bit?5p@ ;	"NIST/SECG curve over a	224 bit	prime fi"...
		dd offset byte_2C9+1
		dd offset __EC_SECG_PRIME_256K1
		dd 0
		dd offset ??_C@_0CG@MBJIMJMI@SECG?5curve?5over?5a?5256?5bit?5prime?5@ ;	"SECG curve over a 256 bit prime field"
		dd offset byte_2C9+2
		dd offset __EC_NIST_PRIME_384
		dd 0
		dd offset ??_C@_0CL@MPIFFEHD@NIST?1SECG?5curve?5over?5a?5384?5bit?5p@ ;	"NIST/SECG curve over a	384 bit	prime fi"...
		dd offset dword_2CC
		dd offset __EC_NIST_PRIME_521
		dd 0
		dd offset ??_C@_0CL@NCEJLDDF@NIST?1SECG?5curve?5over?5a?5521?5bit?5p@ ;	"NIST/SECG curve over a	521 bit	prime fi"...
		dd offset dword_198+1
		dd offset __EC_NIST_PRIME_192
		dd 0
		dd offset ??_C@_0DB@HJIMEGJL@NIST?1X9?462?1SECG?5curve?5over?5a?5192@ ;	"NIST/X9.62/SECG curve over a 192 bit pr"...
		dd offset dword_198+2
		dd offset __EC_X9_62_PRIME_192V2
		dd 0
		dd offset ??_C@_0CH@BHJCBJE@X9?462?5curve?5over?5a?5192?5bit?5prime@ ; "X9.62 curve over a 192 bit prime field"
		dd offset dword_198+3
		dd offset __EC_X9_62_PRIME_192V3
		dd 0
		dd offset ??_C@_0CH@BHJCBJE@X9?462?5curve?5over?5a?5192?5bit?5prime@ ; "X9.62 curve over a 192 bit prime field"
		dd offset dword_198+4
		dd offset __EC_X9_62_PRIME_239V1
		dd 0
		dd offset ??_C@_0CH@COBCAEEE@X9?462?5curve?5over?5a?5239?5bit?5prime@ ;	"X9.62 curve over a 239	bit prime field"
		dd offset dword_198+5
		dd offset __EC_X9_62_PRIME_239V2
		dd 0
		dd offset ??_C@_0CH@COBCAEEE@X9?462?5curve?5over?5a?5239?5bit?5prime@ ;	"X9.62 curve over a 239	bit prime field"
		dd offset dword_198+6
		dd offset __EC_X9_62_PRIME_239V3
		dd 0
		dd offset ??_C@_0CH@COBCAEEE@X9?462?5curve?5over?5a?5239?5bit?5prime@ ;	"X9.62 curve over a 239	bit prime field"
		dd offset dword_198+7
		dd offset __EC_X9_62_PRIME_256V1
		dd 0
		dd offset ??_C@_0CM@IACJENLF@X9?462?1SECG?5curve?5over?5a?5256?5bit?5@ ; "X9.62/SECG curve over	a 256 bit prime	f"...
		dd offset dword_2CC+1
		dd offset __EC_SECG_CHAR2_113R1
		dd 0
		dd offset ??_C@_0CH@OHOOPBHG@SECG?5curve?5over?5a?5113?5bit?5binary@ ; "SECG curve over	a 113 bit binary field"
		dd offset dword_2CC+2
		dd offset __EC_SECG_CHAR2_113R2
		dd 0
		dd offset ??_C@_0CH@OHOOPBHG@SECG?5curve?5over?5a?5113?5bit?5binary@ ; "SECG curve over	a 113 bit binary field"
		dd offset dword_2CC+3
		dd offset __EC_SECG_CHAR2_131R1
		dd 0
		dd offset ??_C@_0CM@EPOILLGK@SECG?1WTLS?5curve?5over?5a?5131?5bit?5b@ ;	"SECG/WTLS curve over a	131 bit	binary f"...
		dd offset byte_2D0
		dd offset __EC_SECG_CHAR2_131R2
		dd 0
		dd offset ??_C@_0CH@FJJEIBAL@SECG?5curve?5over?5a?5131?5bit?5binary@ ; "SECG curve over	a 131 bit binary field"
		dd offset byte_2D0+1
		dd offset __EC_NIST_CHAR2_163K
		dd 0
		dd offset ??_C@_0DB@KNLLOMAB@NIST?1SECG?1WTLS?5curve?5over?5a?5163?5@ ;	"NIST/SECG/WTLS	curve over a 163 bit bin"...
		dd offset byte_2D0+2
		dd offset __EC_SECG_CHAR2_163R1
		dd 0
		dd offset ??_C@_0CH@GKKFHOF@SECG?5curve?5over?5a?5163?5bit?5binary@ ; "SECG curve over a 163 bit binary	field"
		dd offset byte_2D3
		dd offset __EC_NIST_CHAR2_163B
		dd 0
		dd offset ??_C@_0CM@HCIKDLO@NIST?1SECG?5curve?5over?5a?5163?5bit?5b@ ; "NIST/SECG curve	over a 163 bit binary f"...
		dd offset dword_2D4
		dd offset __EC_SECG_CHAR2_193R1
		dd 0
		dd offset ??_C@_0CH@HKDFCHME@SECG?5curve?5over?5a?5193?5bit?5binary@ ; "SECG curve over	a 193 bit binary field"
		dd offset dword_2D4+1
		dd offset __EC_SECG_CHAR2_193R2
		dd 0
		dd offset ??_C@_0CH@HKDFCHME@SECG?5curve?5over?5a?5193?5bit?5binary@ ; "SECG curve over	a 193 bit binary field"
		dd offset dword_2D4+2
		dd offset __EC_NIST_CHAR2_233K
		dd 0
		dd offset ??_C@_0DB@PNCPLOPN@NIST?1SECG?1WTLS?5curve?5over?5a?5233?5@ ;	"NIST/SECG/WTLS	curve over a 233 bit bin"...
		dd offset dword_2D4+3
		dd offset __EC_NIST_CHAR2_233B
		dd 0
		dd offset ??_C@_0DB@PNCPLOPN@NIST?1SECG?1WTLS?5curve?5over?5a?5233?5@ ;	"NIST/SECG/WTLS	curve over a 233 bit bin"...
		dd offset dword_2D4+4
		dd offset __EC_SECG_CHAR2_239K1
		dd 0
		dd offset ??_C@_0CH@CLCLBOGN@SECG?5curve?5over?5a?5239?5bit?5binary@ ; "SECG curve over	a 239 bit binary field"
		dd offset dword_2D4+5
		dd offset __EC_NIST_CHAR2_283K
		dd 0
		dd offset ??_C@_0CM@GFMOGKDK@NIST?1SECG?5curve?5over?5a?5283?5bit?5b@ ;	"NIST/SECG curve over a	283 bit	binary f"...
		dd offset dword_2D4+6
		dd offset __EC_NIST_CHAR2_283B
		dd 0
		dd offset ??_C@_0CM@GFMOGKDK@NIST?1SECG?5curve?5over?5a?5283?5bit?5b@ ;	"NIST/SECG curve over a	283 bit	binary f"...
		dd offset dword_2D4+7
		dd offset __EC_NIST_CHAR2_409K
		dd 0
		dd offset ??_C@_0CM@HDDNKCDK@NIST?1SECG?5curve?5over?5a?5409?5bit?5b@ ;	"NIST/SECG curve over a	409 bit	binary f"...
		dd offset dword_2D4+8
		dd offset __EC_NIST_CHAR2_409B
		dd 0
		dd offset ??_C@_0CM@HDDNKCDK@NIST?1SECG?5curve?5over?5a?5409?5bit?5b@ ;	"NIST/SECG curve over a	409 bit	binary f"...
		dd offset dword_2D4+9
		dd offset __EC_NIST_CHAR2_571K
		dd 0
		dd offset ??_C@_0CM@EACJKLC@NIST?1SECG?5curve?5over?5a?5571?5bit?5b@ ; "NIST/SECG curve	over a 571 bit binary f"...
		dd offset dword_2D4+0Ah
		dd offset __EC_NIST_CHAR2_571B
		dd 0
		dd offset ??_C@_0CM@EACJKLC@NIST?1SECG?5curve?5over?5a?5571?5bit?5b@ ; "NIST/SECG curve	over a 571 bit binary f"...
		dd offset dword_278+34h
		dd offset __EC_X9_62_CHAR2_163V1
		dd 0
		dd offset ??_C@_0CI@CFPHBJDI@X9?462?5curve?5over?5a?5163?5bit?5binar@ ;	"X9.62 curve over a 163	bit binary field"
		dd offset dword_278+35h
		dd offset __EC_X9_62_CHAR2_163V2
		dd 0
		dd offset ??_C@_0CI@CFPHBJDI@X9?462?5curve?5over?5a?5163?5bit?5binar@ ;	"X9.62 curve over a 163	bit binary field"
		dd offset dword_278+36h
		dd offset __EC_X9_62_CHAR2_163V3
		dd 0
		dd offset ??_C@_0CI@CFPHBJDI@X9?462?5curve?5over?5a?5163?5bit?5binar@ ;	"X9.62 curve over a 163	bit binary field"
		dd offset dword_278+37h
		dd offset __EC_X9_62_CHAR2_176V1
		dd 0
		dd offset ??_C@_0CI@HOBKKPME@X9?462?5curve?5over?5a?5176?5bit?5binar@ ;	"X9.62 curve over a 176	bit binary field"
		dd offset dword_278+38h
		dd offset __EC_X9_62_CHAR2_191V1
		dd 0
		dd offset ??_C@_0CI@CNNMGPOI@X9?462?5curve?5over?5a?5191?5bit?5binar@ ;	"X9.62 curve over a 191	bit binary field"
		dd offset dword_278+39h
		dd offset __EC_X9_62_CHAR2_191V2
		dd 0
		dd offset ??_C@_0CI@CNNMGPOI@X9?462?5curve?5over?5a?5191?5bit?5binar@ ;	"X9.62 curve over a 191	bit binary field"
		dd offset dword_278+3Ah
		dd offset __EC_X9_62_CHAR2_191V3
		dd 0
		dd offset ??_C@_0CI@CNNMGPOI@X9?462?5curve?5over?5a?5191?5bit?5binar@ ;	"X9.62 curve over a 191	bit binary field"
		dd offset dword_278+3Dh
		dd offset __EC_X9_62_CHAR2_208W1
		dd 0
		dd offset ??_C@_0CI@HADNJNCC@X9?462?5curve?5over?5a?5208?5bit?5binar@ ;	"X9.62 curve over a 208	bit binary field"
		dd offset dword_278+3Eh
		dd offset __EC_X9_62_CHAR2_239V1
		dd 0
		dd offset ??_C@_0CI@IHGFALA@X9?462?5curve?5over?5a?5239?5bit?5binar@ ; "X9.62 curve over a 239 bit binary field"
		dd offset dword_278+3Fh
		dd offset __EC_X9_62_CHAR2_239V2
		dd 0
		dd offset ??_C@_0CI@IHGFALA@X9?462?5curve?5over?5a?5239?5bit?5binar@ ; "X9.62 curve over a 239 bit binary field"
		dd offset dword_278+40h
		dd offset __EC_X9_62_CHAR2_239V3
		dd 0
		dd offset ??_C@_0CI@IHGFALA@X9?462?5curve?5over?5a?5239?5bit?5binar@ ; "X9.62 curve over a 239 bit binary field"
		dd offset dword_278+43h
		dd offset __EC_X9_62_CHAR2_272W1
		dd 0
		dd offset ??_C@_0CI@OMGMCAMF@X9?462?5curve?5over?5a?5272?5bit?5binar@ ;	"X9.62 curve over a 272	bit binary field"
		dd offset dword_278+44h
		dd offset __EC_X9_62_CHAR2_304W1
		dd 0
		dd offset ??_C@_0CI@PCOAONL@X9?462?5curve?5over?5a?5304?5bit?5binar@ ; "X9.62 curve over a 304 bit binary field"
		dd offset dword_278+45h
		dd offset __EC_X9_62_CHAR2_359V1
		dd 0
		dd offset ??_C@_0CI@BDIPEOPL@X9?462?5curve?5over?5a?5359?5bit?5binar@ ;	"X9.62 curve over a 359	bit binary field"
		dd offset dword_278+46h
		dd offset __EC_X9_62_CHAR2_368W1
		dd 0
		dd offset ??_C@_0CI@GLMEIDGJ@X9?462?5curve?5over?5a?5368?5bit?5binar@ ;	"X9.62 curve over a 368	bit binary field"
		dd offset dword_278+47h
		dd offset __EC_X9_62_CHAR2_431R1
		dd 0
		dd offset ??_C@_0CI@PHOKEIPD@X9?462?5curve?5over?5a?5431?5bit?5binar@ ;	"X9.62 curve over a 431	bit binary field"
		dd offset dword_2D4+0Bh
		dd offset __EC_WTLS_1
		dd 0
		dd offset ??_C@_0CH@PAECJHG@WTLS?5curve?5over?5a?5113?5bit?5binary@ ; "WTLS curve over a 113 bit binary	field"
		dd offset dword_2D4+0Ch
		dd offset __EC_NIST_CHAR2_163K
		dd 0
		dd offset ??_C@_0DB@KNLLOMAB@NIST?1SECG?1WTLS?5curve?5over?5a?5163?5@ ;	"NIST/SECG/WTLS	curve over a 163 bit bin"...
		dd offset dword_2D4+0Dh
		dd offset __EC_SECG_CHAR2_113R1
		dd 0
		dd offset ??_C@_0CH@OHOOPBHG@SECG?5curve?5over?5a?5113?5bit?5binary@ ; "SECG curve over	a 113 bit binary field"
		dd offset dword_2D4+0Eh
		dd offset __EC_X9_62_CHAR2_163V1
		dd 0
		dd offset ??_C@_0CI@CFPHBJDI@X9?462?5curve?5over?5a?5163?5bit?5binar@ ;	"X9.62 curve over a 163	bit binary field"
		dd offset dword_2D4+0Fh
		dd offset __EC_SECG_PRIME_112R1
		dd 0
		dd offset ??_C@_0CL@JMAEHKDJ@SECG?1WTLS?5curve?5over?5a?5112?5bit?5p@ ;	"SECG/WTLS curve over a	112 bit	prime fi"...
		dd offset dword_2D4+10h
		dd offset __EC_SECG_PRIME_160R2
		dd 0
		dd offset ??_C@_0CL@NDOOJKPB@SECG?1WTLS?5curve?5over?5a?5160?5bit?5p@ ;	"SECG/WTLS curve over a	160 bit	prime fi"...
		dd offset dword_2D4+11h
		dd offset __EC_WTLS_8
		dd 0
		dd offset ??_C@_0CG@NOPNGNKB@WTLS?5curve?5over?5a?5112?5bit?5prime?5@ ;	"WTLS curve over a 112 bit prime field"
		dd offset dword_2D4+12h
		dd offset __EC_WTLS_9
		dd 0
		dd offset ??_C@_0CG@JBBHINGJ@WTLS?5curve?5over?5a?5160?5bit?5prime?5@ ;	"WTLS curve over a 160 bit prime field"
		dd offset dword_2D4+13h
		dd offset __EC_NIST_CHAR2_233K
		dd 0
		dd offset ??_C@_0DB@PNCPLOPN@NIST?1SECG?1WTLS?5curve?5over?5a?5233?5@ ;	"NIST/SECG/WTLS	curve over a 233 bit bin"...
		dd offset dword_2D4+14h
		dd offset __EC_NIST_CHAR2_233B
		dd 0
		dd offset ??_C@_0DB@PNCPLOPN@NIST?1SECG?1WTLS?5curve?5over?5a?5233?5@ ;	"NIST/SECG/WTLS	curve over a 233 bit bin"...
		dd offset dword_2D4+15h
		dd offset __EC_WTLS_12
		dd 0
		dd offset ??_C@_0CG@MLNHEHNL@WTLS?5curvs?5over?5a?5224?5bit?5prime?5@ ;	"WTLS curvs over a 224 bit prime field"
		dd offset dword_2EC+1
		dd offset __EC_IPSEC_155_ID3
		dd 0
		dd offset ??_C@_0HB@LGGCBEEP@?6?7IPSec?1IKE?1Oakley?5curve?5?$CD3?5over@ ; "\n\tIPSec/IKE/Oakley curve #3 over a 15"...
		dd offset dword_2EC+2
		dd offset __EC_IPSEC_185_ID4
		dd 0
		dd offset ??_C@_0HB@IIAMGFOE@?6?7IPSec?1IKE?1Oakley?5curve?5?$CD4?5over@ ; "\n\tIPSec/IKE/Oakley curve #4 over a 18"...
		dd offset dword_338+61h
		dd offset __EC_brainpoolP160r1
		dd 0
		dd offset ??_C@_0CK@DKPAAAHG@RFC?55639?5curve?5over?5a?5160?5bit?5pr@ ;	"RFC 5639 curve	over a 160 bit prime fie"...
		dd offset dword_338+62h
		dd offset __EC_brainpoolP160t1
		dd 0
		dd offset ??_C@_0CK@DKPAAAHG@RFC?55639?5curve?5over?5a?5160?5bit?5pr@ ;	"RFC 5639 curve	over a 160 bit prime fie"...
		dd offset dword_338+63h
		dd offset __EC_brainpoolP192r1
		dd 0
		dd offset ??_C@_0CK@HMLLPNDL@RFC?55639?5curve?5over?5a?5192?5bit?5pr@ ;	"RFC 5639 curve	over a 192 bit prime fie"...
		dd offset dword_338+64h
		dd offset __EC_brainpoolP192t1
		dd 0
		dd offset ??_C@_0CK@HMLLPNDL@RFC?55639?5curve?5over?5a?5192?5bit?5pr@ ;	"RFC 5639 curve	over a 192 bit prime fie"...
		dd offset dword_338+65h
		dd offset __EC_brainpoolP224r1
		dd 0
		dd offset ??_C@_0CK@HHJJJHFI@RFC?55639?5curve?5over?5a?5224?5bit?5pr@ ;	"RFC 5639 curve	over a 224 bit prime fie"...
		dd offset dword_338+66h
		dd offset __EC_brainpoolP224t1
		dd 0
		dd offset ??_C@_0CK@HHJJJHFI@RFC?55639?5curve?5over?5a?5224?5bit?5pr@ ;	"RFC 5639 curve	over a 224 bit prime fie"...
		dd offset dword_338+67h
		dd offset __EC_brainpoolP256r1
		dd 0
		dd offset ??_C@_0CK@DIHDHHJA@RFC?55639?5curve?5over?5a?5256?5bit?5pr@ ;	"RFC 5639 curve	over a 256 bit prime fie"...
		dd offset dword_338+68h
		dd offset __EC_brainpoolP256t1
		dd 0
		dd offset ??_C@_0CK@DIHDHHJA@RFC?55639?5curve?5over?5a?5256?5bit?5pr@ ;	"RFC 5639 curve	over a 256 bit prime fie"...
		dd offset dword_338+69h
		dd offset __EC_brainpoolP320r1
		dd 0
		dd offset ??_C@_0CK@BJFGHLBI@RFC?55639?5curve?5over?5a?5320?5bit?5pr@ ;	"RFC 5639 curve	over a 320 bit prime fie"...
		dd offset dword_338+6Ah
		dd offset __EC_brainpoolP320t1
		dd 0
		dd offset ??_C@_0CK@BJFGHLBI@RFC?55639?5curve?5over?5a?5320?5bit?5pr@ ;	"RFC 5639 curve	over a 320 bit prime fie"...
		dd offset dword_338+6Bh
		dd offset __EC_brainpoolP384r1
		dd 0
		dd offset ??_C@_0CK@GPOLLHGK@RFC?55639?5curve?5over?5a?5384?5bit?5pr@ ;	"RFC 5639 curve	over a 384 bit prime fie"...
		dd offset dword_338+6Ch
		dd offset __EC_brainpoolP384t1
		dd 0
		dd offset ??_C@_0CK@GPOLLHGK@RFC?55639?5curve?5over?5a?5384?5bit?5pr@ ;	"RFC 5639 curve	over a 384 bit prime fie"...
		dd offset dword_338+6Dh
		dd offset __EC_brainpoolP512r1
		dd 0
		dd offset ??_C@_0CK@DLPHALOH@RFC?55639?5curve?5over?5a?5512?5bit?5pr@ ;	"RFC 5639 curve	over a 512 bit prime fie"...
		dd offset dword_338+6Eh
		dd offset __EC_brainpoolP512t1
		dd 0
		dd offset ??_C@_0CK@DLPHALOH@RFC?55639?5curve?5over?5a?5512?5bit?5pr@ ;	"RFC 5639 curve	over a 512 bit prime fie"...
__EC_NIST_PRIME_192 dd offset byte_194+2 ; DATA	XREF: .rdata:00002B44o
		dd 14h,	18h, 1,	6FAE4530h, 642F42C8h, 289557EDh, 0EA2081D3h
		dd 0D59621E1h, 3 dup(0FFFFFFFFh), 0FEFFFFFFh, 5	dup(0FFFFFFFFh)
		dd 0FEFFFFFFh, 0FFFFFFFFh, 0FCFFFFFFh, 19052164h, 0E7809CE5h
		dd 0ABE9A70Fh, 49302472h, 0ECDEB8FEh, 0B1B946C1h, 0EA88D18h
		dd 0F69030B0h, 0EB20BF7Ch, 88A143h, 0FD0AFFF4h,	1210FF82h
		dd 952B1907h, 78DAC8FFh, 0ED111063h, 0D5CD246Bh, 0A177F973h
		dd 1148791Eh, 3	dup(0FFFFFFFFh), 36F8DE99h, 0B1C96B14h
		dd 3128D2B4h, 0
__EC_NIST_PRIME_224 dd offset byte_194+2 ; DATA	XREF: .rdata:00002B04o
		dd 14h,	1Ch, 1,	473471BDh, 0FCC7D599h, 9FB545DCh, 8FABB9A3h
		dd 0C58B946Ah, 4 dup(0FFFFFFFFh), 2 dup(0)
		dd 1000000h, 3 dup(0FFFFFFFFh),	0FEFFFFFFh, 2 dup(0FFFFFFFFh)
		dd 0FEFFFFFFh, 850A05B4h, 0ABB3040Ch, 563241F5h, 0B7B04450h
		dd 0BAD8BFD7h, 43390B27h, 0B4FF5523h, 0BD0C0EB7h, 7FBFB46Bh
		dd 0B9901332h, 0D3C1034Ah, 2211C256h, 0D6803234h, 211D5C11h
		dd 886337BDh, 0FB23F7B5h, 0E6DF224Ch, 0A07543CDh, 6447075Ah
		dd 9981D544h, 347E0085h, 3 dup(0FFFFFFFFh), 0A216FFFFh
		dd 3EF0B8E0h, 4529DD13h, 3D2A5C5Ch, 0
__EC_NIST_PRIME_384 dd offset byte_194+2 ; DATA	XREF: .rdata:00002B24o
		dd 14h,	30h, 1,	6A9235A3h, 7AA219A3h, 6A89001Dh, 82A47367h
		dd 73ACCD7Ah, 7	dup(0FFFFFFFFh), 0FEFFFFFFh, 0FFFFFFFFh
		dd 2 dup(0)
		dd 8 dup(0FFFFFFFFh), 0FEFFFFFFh, 0FFFFFFFFh, 2	dup(0)
		dd 0FCFFFFFFh, 0A72F31B3h, 0E4E73EE2h, 6B058E98h, 192DF8E3h
		dd 6E9C1D18h, 124181FEh, 8F081403h, 5A871350h, 8D3956C6h
		dd 9DD12E8Ah, 0EDC8852Ah, 0EF2AECD3h, 22CA87AAh, 37058BBEh
		dd 1EC7B18Eh, 74AD20F3h, 623B1D6Eh, 989BA78Bh, 0E041F759h
		dd 382A5482h, 5DF20255h, 6C2955BFh, 385E543Ah, 0B70A7672h
		dd 4ADE1736h, 6F2C2696h, 0BF989E5Dh, 29DC9292h,	0BD1DF4F8h
		dd 7C149A28h, 1331DAE9h, 0C0B8F0B5h, 0CEB1600Ah, 9D817E1Dh
		dd 7C1D437Ah, 5F0EEA90h, 6 dup(0FFFFFFFFh), 814D63C7h
		dd 0DF2D37F4h, 0B20D1A58h, 7AA7B048h, 6A19ECECh, 7329C5CCh
		dd 0
__EC_NIST_PRIME_521 dd offset byte_194+2 ; DATA	XREF: .rdata:00002B34o
		dd 14h,	42h, 1,	889ED0h, 53B81C29h, 1767CC96h, 0AA843239h
		dd 0BA64DAA0h, 0FFFFFF01h, 0Fh dup(0FFFFFFFFh),	0FF01FFFFh
		dd 0Fh dup(0FFFFFFFFh),	0FCFFFFFFh, 3E955100h, 1C8E61B9h
		dd 9A921F9Ah, 85B6A021h, 0DAA2EE40h, 0B3995B72h, 0B4B8F315h
		dd 0F18E9189h, 1956E109h, 7EEC5139h, 52167B93h,	0B13BBDC0h
		dd 733507BFh, 2C3D88DFh, 45EFF134h, 506BD41Fh, 0C600003Fh
		dd 0B7068E85h, 0CDE90404h, 66CB3E9Eh, 42B49523h, 3981649Ch
		dd 21B53F05h, 60AF28F8h, 0BA3D4D6Bh, 775E4BA1h,	2859E7EFh
		dd 27C11DFEh, 0DEA8FFA2h, 0C1B34833h, 9B426A85h, 317E7EF9h
		dd 66BDE5C2h, 29391801h, 3B9A786Ah, 8A5C04C0h, 7D2CB45Fh
		dd 0F598D91Bh, 9B574944h, 0AF176844h, 3E2717BDh, 0EE972C66h
		dd 0F45E9972h, 50C54026h, 0AD3F01B9h, 3C356107h, 72A28670h
		dd 0BE8840C2h, 0D19F7694h, 0FF015066h, 7 dup(0FFFFFFFFh)
		dd 0FAFFFFFFh, 83878651h, 6B962FBFh, 4801CC7Fh,	0D0A509F7h
		dd 0B8C9B53Bh, 0AE479C89h, 1EB76FBBh, 9643891h
__EC_X9_62_PRIME_192V2 dd offset byte_194+2 ; DATA XREF: .rdata:00002B54o
		dd 14h,	18h, 1,	0E22EA931h, 0DD19F02h, 3E111B90h, 0F0100799h
		dd 0B6C61AD2h, 3 dup(0FFFFFFFFh), 0FEFFFFFFh, 5	dup(0FFFFFFFFh)
		dd 0FEFFFFFFh, 0FFFFFFFFh, 0FCFFFFFFh, 0DFD622CCh, 256B5CB9h
		dd 630D9CE4h, 98E5A464h, 0A23A390Ch, 53D96816h,	0E7BAA2EEh
		dd 427849E1h, 6977DEF2h, 89C9E9CFh, 69AD72C0h, 4A03486Fh
		dd 1DD17465h, 7AECB669h, 2AB82B67h, 0F2F23D08h,	0E97D84B0h
		dd 15DEB270h, 2	dup(0FFFFFFFFh), 0FEFFFFFFh, 24A7B15Fh
		dd 864180DCh, 31DDD848h, 0
__EC_X9_62_PRIME_192V3 dd offset byte_194+2 ; DATA XREF: .rdata:00002B64o
		dd 14h,	18h, 1,	446869C4h, 78B3DE35h, 0A95CB6C4h, 572A1E59h
		dd 2E9A0563h, 3	dup(0FFFFFFFFh), 0FEFFFFFFh, 5 dup(0FFFFFFFFh)
		dd 0FEFFFFFFh, 0FFFFFFFFh, 0FCFFFFFFh, 0C23D1222h, 0CA055A39h
		dd 0AE3D42A7h, 6047C9CCh, 2562D4A7h, 1669D56Bh,	8177297Dh
		dd 1D5AC600h, 163778A1h, 2BCE8D58h, 8EEE4A8Bh, 96188F22h
		dd 220FA938h, 33377363h, 0B6DC494Bh, 0F9C86D6Ah, 76CA8A97h
		dd 0B043A948h, 3 dup(0FFFFFFFFh), 31D0627Ah, 94423FC8h
		dd 13EC40F6h, 0
__EC_X9_62_PRIME_239V1 dd offset byte_194+2 ; DATA XREF: .rdata:00002B74o
		dd 14h,	1Eh, 1,	60B43BE4h, 0C00CB8F0h, 7975B0C0h, 6080948Eh
		dd 7D1B32F8h, 0FFFFFF7Fh, 2 dup(0FFFFFFFFh), 0FFFFFF7Fh
		dd 80FFFFh, 0
		dd 0FFFFFF7Fh, 0FF7FFFFFh, 2 dup(0FFFFFFFFh), 0FF7FFFFFh
		dd 0FFFFFFFFh, 80h, 0FF7F0000h,	0FCFFFFFFh, 3B6C016Bh
		dd 4189F1DCh, 9254D6D0h, 71CA7514h, 0B22FDBA9h,	79371D7Dh
		dd 94C28561h, 0FA0F0A2Ch, 0A8DC3C96h, 33CC6C81h, 0ED2B64B8h
		dd 0D3C305F9h, 3F3D5758h, 3BBDFB27h, 0AFAAB93Ch, 0E4E8EB7Dh
		dd 0AE5D0AE9h, 0CA54406Eh, 46A00B53h, 1868B354h, 396B22CEh
		dd 27BCBFCh, 0FF7FAEF1h, 2 dup(0FFFFFFFFh), 0FF7FFFFFh
		dd 9A5E9EFFh, 71905D9Fh, 2652D1FBh, 0B9D9088h
__EC_X9_62_PRIME_239V2 dd offset byte_194+2 ; DATA XREF: .rdata:00002B84o
		dd 14h,	1Eh, 1,	1601B4E8h, 3530904h, 99803BCAh,	9FE02B98h
		dd 16E69ACBh, 0FFFFFF7Fh, 2 dup(0FFFFFFFFh), 0FFFFFF7Fh
		dd 80FFFFh, 0
		dd 0FFFFFF7Fh, 0FF7FFFFFh, 2 dup(0FFFFFFFFh), 0FF7FFFFFh
		dd 0FFFFFFFFh, 80h, 0FF7F0000h,	0FCFFFFFFh, 68AB7F61h
		dd 0BB6C5732h, 990DD5FEh, 3F9C24F0h, 4BB958EEh,	7A8C03A0h
		dd 838C4CE8h, 0AF382C2Fh, 2787D909h, 0C9205170h, 9E5EBB21h
		dd 3C6A2926h, 57F3F2DCh, 0FDEAA057h, 0E730B887h, 0E425015Bh
		dd 0C70EEADBh, 0FCA06D20h, 81B0D901h, 55B59F32h, 60F46EDEh
		dd 8BFF7D23h, 0FF7FBAE4h, 2 dup(0FFFFFFFFh), 80FFFFh, 0E8A7CF00h
		dd 0D4774359h, 2138C014h, 632058BCh
__EC_X9_62_PRIME_239V3 dd offset byte_194+2 ; DATA XREF: .rdata:00002B94o
		dd 14h,	1Eh, 1,	1674737Dh, 7134FE8Fh, 76850AB6h, 7594A186h
		dd 0FFA2BFD3h, 0FFFFFF7Fh, 2 dup(0FFFFFFFFh), 0FFFFFF7Fh
		dd 80FFFFh, 0
		dd 0FFFFFF7Fh, 0FF7FFFFFh, 2 dup(0FFFFFFFFh), 0FF7FFFFFh
		dd 0FFFFFFFFh, 80h, 0FF7F0000h,	0FCFFFFFFh, 0FA055725h
		dd 5466302Ah, 3CBF4B1h,	0A350A7D6h, 201250Ch, 178798D4h
		dd 0AB15BAD9h, 68673E6Dh, 0BB188EAEh, 0CFCF92h,	0A29A945Ch
		dd 5348D9C6h, 0BB60E6D0h, 0C9B154F8h, 5AE95F50h, 89E60716h
		dd 60C398Fh, 2B551DBCh,	3B6F22ADh, 8BE4CF6Fh, 9984816Eh
		dd 0EDE318AFh, 0FF7FF36Ch, 2 dup(0FFFFFFFFh), 0FF7FFFFFh
		dd 0EB5D97FFh, 5A6B341h, 21433C7Ch, 51655246h
__EC_X9_62_PRIME_256V1 dd offset byte_194+2 ; DATA XREF: .rdata:00002BA4o
		dd 14h,	20h, 1,	8369DC4h, 9304E786h, 0E178666Ah, 0B7269D13h
		dd 907E9F81h, 0FFFFFFFFh, 1000000h, 3 dup(0)
		dd 4 dup(0FFFFFFFFh), 1000000h,	3 dup(0)
		dd 2 dup(0FFFFFFFFh), 0FCFFFFFFh, 0D835C65Ah, 0E7933AAAh
		dd 55BDEBB3h, 0BC869876h, 0B0061D65h, 0F6B053CCh, 3E3CCE3Bh
		dd 4B60D227h, 0F2D1176Bh, 47422CE1h, 0E5E6BCF8h, 0F240A463h
		dd 817D0377h, 0A033EB2Dh, 4539A1F4h, 96C298D8h,	0E242E34Fh
		dd 9B7F1AFEh, 4AEBE78Eh, 169E0F7Ch, 5733CE2Bh, 0CE5E316Bh
		dd 6840B6CBh, 0F551BF37h, 0FFFFFFFFh, 0
		dd 2 dup(0FFFFFFFFh), 0ADFAE6BCh, 849E17A7h, 0C2CAB9F3h
		dd 512563FCh, 0
__EC_SECG_PRIME_112R1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002A74o
					; .rdata:00002E14o
		dd 14h,	0Eh, 1,	20BF500h, 6E694D8Eh, 61756867h,	4297551h
		dd 0B13F7872h, 0BF2A7CDBh, 665EE362h, 0ADBE7680h, 7CDB8B20h
		dd 0E362BF2Ah, 7680665Eh, 8820ADBEh, 0BAF89E65h, 0EE163904h
		dd 701189DEh, 4809222Bh, 5A993972h, 556BE75Eh, 98F0C2F9h
		dd 0AFE59CA8h, 0A2C02487h, 0F70F0E3Eh, 7CDB0075h, 0E362BF2Ah
		dd 0DF28765Eh, 0C56165ACh
__EC_SECG_PRIME_112R2 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002A84o
		dd 14h,	0Eh, 4,	0A1572700h, 6E694D11h, 61756867h, 16537551h
		dd 0D40B5EC0h, 0BF2A7CDBh, 665EE362h, 0ADBE7680h, 27618B20h
		dd 0F3054CC2h, 0F6AA0A8Ah, 2CF00E5Ch, 81F1DE51h, 74EDB55Dh
		dd 854CC3FCh, 0A34B09D7h, 92E8B50Ah, 9D64E1B4h,	438692D0h
		dd 0F546CDADh, 47372E88h, 956EF3DEh, 0DF36976Eh, 0B8D8AF0Ah
		dd 0A17C59D7h, 4BD02005h
__EC_SECG_PRIME_128R1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002A94o
		dd 14h,	10h, 1,	4D0D0E00h, 68676E69h, 75516175h, 443AC00Ch
		dd 7936D073h, 0FDFFFFFFh, 3 dup(0FFFFFFFFh), 0FDFFFFFFh
		dd 2 dup(0FFFFFFFFh), 0FCFFFFFFh, 0C17975E8h, 3DF47910h
		dd 3C9924D8h, 0D35EEE2Ch, 52F71F16h, 2D9B898Bh,	7C60280Ch
		dd 865B2CA5h, 39C85ACFh, 13EBAF5Bh, 92A22DC0h, 837AEDDDh
		dd 0FEFFFFFFh, 0
		dd 1B0DA375h, 15A13890h, 0
__EC_SECG_PRIME_128R2 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002AA4o
		dd 14h,	10h, 4,	6E694D00h, 61756867h, 0D8127551h, 0FC3134F0h
		dd 0F4883BE6h, 0FDFFFFFFh, 3 dup(0FFFFFFFFh), 981903D6h
		dd 0FEBBB3D1h, 9BCC59BFh, 0E1AEF9BFh, 0A3FCEE5Eh, 1929D080h
		dd 58652CDCh, 5D8A6DBBh, 0D8A56A7Bh, 8329575Eh,	0A732FBE6h
		dd 40C1EBCDh, 6A91B627h, 0EE3A4D89h, 80FE0671h,	444BC35Fh
		dd 0FFFFFF3Fh, 0FFFFFF7Fh, 722400BEh, 0A3B51306h, 0
__EC_SECG_PRIME_160K1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002AB4o
		align 8
		dd 15h,	1, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 0ACFFFFFEh, 73h
		dd 9 dup(0)
		dd 70000h, 2C384C3Bh, 92A17AE3h, 769E01A4h, 0F5F43630h
		dd 0BB7E4DDDh, 0F98C9300h, 0DC8F3135h, 82C26BEDh, 33175386h
		dd 4F3CF0C3h, 1EEh, 0
		dd 1000000h, 0DF16FAB8h, 16CA9AABh, 0B3B6h
__EC_SECG_PRIME_160R1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002AC4o
		dd 14h,	15h, 1,	0E4CD5310h, 96D6142Ch, 568776E6h, 3B531715h
		dd 4533F8F3h, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 0FFFF7FFFh
		dd 0FFFF00FFh, 3 dup(0FFFFFFFFh), 0FF7FFFFFh, 1C00FCFFh
		dd 54FCBE97h, 658B7ABDh, 819FF8ACh, 0C5ADD4D4h,	45FA65h
		dd 68B5964Ah, 2873F58Eh, 89696446h, 0B98BC368h,	82FCCB13h
		dd 28A62300h, 94683155h, 0C9DC597Dh, 51230412h,	0FBC57A37h
		dd 132h, 0
		dd 1000000h, 27F9C8F4h,	75CAD3AEh, 5722h, 0
__EC_SECG_PRIME_160R2 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002AD4o
					; .rdata:00002E24o
		dd 14h,	15h, 1,	0B0999BB9h, 0E023B399h,	0D6A40927h, 8776E696h
		dd 51171556h, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 0ACFFFFFEh
		dd 0FFFF0073h, 3 dup(0FFFFFFFFh), 0FFFFFEFFh, 0B40070ACh
		dd 0FBD334E1h, 0AB8BEB59h, 4492757h, 0F55A4D66h, 0BA8803h
		dd 34B0DC52h, 7E113A29h, 1BF14F1Fh, 9D19F730h, 6DCE4431h
		dd 0FEAFFE00h, 0F231E3F2h, 0FA71E096h, 2C98F90Dh, 3FD4A7FEh
		dd 12Eh, 2 dup(0)
		dd 86E71E35h, 0A1F318A8h, 6BA1h, 0
__EC_SECG_PRIME_192K1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002AE4o
		align 8
		dd 18h,	1, 4 dup(0FFFFFFFFh), 0FEFFFFFFh, 37EEFFFFh, 0Bh dup(0)
		dd 3000000h, 0EF14FDBh,	0AEE957C0h, 27DB026h, 34F4B780h
		dd 0B1D1A51Dh, 7D6CE0EAh, 6D2F2F9Bh, 0A728569Ch, 0D0634184h
		dd 3486BE15h, 88AA8240h, 9D2F5ED9h, 2 dup(0FFFFFFFFh)
		dd 0FEFFFFFFh, 17FCF226h, 6A46690Fh, 8DFDDE74h
__EC_SECG_PRIME_224K1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002AF4o
		align 8
		dd 1Dh,	1, 0FFFFFF00h, 5 dup(0FFFFFFFFh), 0E5FFFFFEh, 6Dh
		dd 0Dh dup(0)
		dd 50000h, 335B45A1h, 0DF99F04Dh, 0A128FC30h, 0E967A469h
		dd 0A97570E4h, 0E657E0Fh, 5CA4B7B6h, 9F087E00h,	34BA7FEDh
		dd 0FBCA8242h, 19E3F7D6h, 0BDB0C0F7h, 4BCAE259h, 616D55DBh
		dd 1A5h, 2 dup(0)
		dd 1000000h, 0ECD2E8DCh, 0F0CA8461h, 9F7671A9h,	0F7B1h
__EC_SECG_PRIME_256K1 dd offset	byte_194+2 ; DATA XREF:	.rdata:00002B14o
		align 8
		dd offset dword_4+1Ch
		dd 1, 6	dup(0FFFFFFFFh), 0FEFFFFFFh, 2FFCFFFFh,	0Fh dup(0)
		dd 7000000h, 7E66BE79h,	0ACBBDCF9h, 9562A055h, 70B87CEh
		dd 0DBFC9B02h, 0D928CE2Dh, 5B81F259h, 9817F816h, 77DA3A48h
		dd 65C4A326h, 0FCFBA45Dh, 0A808110Eh, 48B417FDh, 195485A6h
		dd 8FD0479Ch, 0B8D410FBh, 3 dup(0FFFFFFFFh), 0FEFFFFFFh
		dd 0E6DCAEBAh, 3BA048AFh, 8C5ED2BFh, 414136D0h
__EC_WTLS_8	dd offset byte_194+2	; DATA XREF: .rdata:00002E34o
		align 8
		dd 0Fh,	1, 0FFFFFF00h, 2 dup(0FFFFFFFFh), 0E7FDFFh, 7 dup(0)
		dd 3, 2	dup(0)
		dd 1000000h, 3 dup(0)
		dd 1020000h, 0
		dd 0EC010000h, 0D81A55EAh, 0E937h, 0
__EC_WTLS_9	dd offset byte_194+2	; DATA XREF: .rdata:00002E44o
		align 8
		dd 15h,	1, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 80FCFFFFh, 8Fh
		dd 9 dup(0)
		dd 30000h, 4 dup(0)
		dd 1000000h, 5 dup(0)
		dd offset dword_DC+26h
		dd 0
		dd 1000000h, 0E08AC9CDh, 4A57DEE2h, 33BFh
__EC_WTLS_12	dd offset byte_194+2	; DATA XREF: .rdata:00002E74o
		align 8
		dd 1Ch,	1, 4 dup(0FFFFFFFFh), 2	dup(0)
		dd 1000000h, 3 dup(0FFFFFFFFh),	0FEFFFFFFh, 2 dup(0FFFFFFFFh)
		dd 0FEFFFFFFh, 850A05B4h, 0ABB3040Ch, 563241F5h, 0B7B04450h
		dd 0BAD8BFD7h, 43390B27h, 0B4FF5523h, 0BD0C0EB7h, 7FBFB46Bh
		dd 0B9901332h, 0D3C1034Ah, 2211C256h, 0D6803234h, 211D5C11h
		dd 886337BDh, 0FB23F7B5h, 0E6DF224Ch, 0A07543CDh, 6447075Ah
		dd 9981D544h, 347E0085h, 3 dup(0FFFFFFFFh), 0A216FFFFh
		dd 3EF0B8E0h, 4529DD13h, 3D2A5C5Ch
__EC_SECG_CHAR2_113R1 dd offset	byte_197 ; DATA	XREF: .rdata:00002BB4o
					; .rdata:00002DF4o
		dd 14h,	0Fh, 2,	0AB23E710h, 0E696D614h,	15568776h, 0BFFE5617h
		dd 0A949CB8Fh, 2, 2 dup(0)
		dd 10200h, 0C258830h, 0FEC7E7A6h, 58E89C64h, 0E800F720h
		dd 0E2D3E4BEh, 18440726h, 0C7E9E08Bh, 739D0023h, 0F4356F61h
		dd 0D70714ABh, 0FC16235h, 3028A500h, 0EE587927h, 5E31D184h
		dd 18618D3h, 0
		dd 0D9000000h, 398AECCCh, 6FE5h
__EC_SECG_CHAR2_113R2 dd offset	byte_197 ; DATA	XREF: .rdata:00002BC4o
		dd 14h,	0Fh, 2,	15FBC010h, 0DE600876h, 0D6F4EEF1h, 8776E696h
		dd 5D171556h, 2, 2 dup(0)
		dd 10200h, 0DB189968h, 0D5A7EECh, 0AAC0DFD6h, 9500C755h
		dd 9BECA9E9h, 0BFD47B29h, 1859E036h, 7AA5014Fh,	0CA267B6Ah
		dd 0CD2FF55Eh, 974716B8h, 0C9ADB300h, 67FED14Eh, 95E6064Ch
		dd 11DBABAh, 0
		dd 8010000h, 96249B78h,	93AFh
__EC_SECG_CHAR2_131R1 dd offset	byte_197 ; DATA	XREF: .rdata:00002BD4o
		dd 14h,	11h, 2,	676E694Dh, 51617568h, 0D35B9875h, 21DABAADh
		dd 0E2973AB4h, 8, 2 dup(0)
		dd 1000000h, 1BA1070Dh,	566BA709h, 8F414421h, 258CFFF3h
		dd 1702B870h, 881056C0h, 0C6B9634Bh, 781629C7h,	41D3F9h
		dd 1FF9BA81h, 0C43398DFh, 13189C0Fh, 99836343h,	7E6E8C07h
		dd 1F008CA3h, 4B13C873h, 0E1F94E1Bh, 450h, 0
		dd 23310200h, 64943A95h, 4DB5h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4234h
; COMDAT (pick any)
		public ??_C@_0CL@JMAEHKDJ@SECG?1WTLS?5curve?5over?5a?5112?5bit?5p@
; `string'
??_C@_0CL@JMAEHKDJ@SECG?1WTLS?5curve?5over?5a?5112?5bit?5p@ db 'SECG/WTLS curve over a 112 bit prime field',0
					; DATA XREF: .rdata:off_2A7Co
					; .rdata:00002E1Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4260h
; COMDAT (pick any)
		public ??_C@_0CG@IMPBFOOG@SECG?5curve?5over?5a?5112?5bit?5prime?5@
; `string'
??_C@_0CG@IMPBFOOG@SECG?5curve?5over?5a?5112?5bit?5prime?5@ db 'SECG curve over a 112 bit prime field',0
					; DATA XREF: .rdata:00002A8Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4288h
; COMDAT (pick any)
		public ??_C@_0CG@DNCCBNMA@SECG?5curve?5over?5a?5128?5bit?5prime?5@
; `string'
??_C@_0CG@DNCCBNMA@SECG?5curve?5over?5a?5128?5bit?5prime?5@ db 'SECG curve over a 128 bit prime field',0
					; DATA XREF: .rdata:00002A9Co
					; .rdata:00002AACo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 42B0h
; COMDAT (pick any)
		public ??_C@_0CG@MDBLLOCO@SECG?5curve?5over?5a?5160?5bit?5prime?5@
; `string'
??_C@_0CG@MDBLLOCO@SECG?5curve?5over?5a?5160?5bit?5prime?5@ db 'SECG curve over a 160 bit prime field',0
					; DATA XREF: .rdata:00002ABCo
					; .rdata:00002ACCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 42D8h
; COMDAT (pick any)
		public ??_C@_0CL@NDOOJKPB@SECG?1WTLS?5curve?5over?5a?5160?5bit?5p@
; `string'
??_C@_0CL@NDOOJKPB@SECG?1WTLS?5curve?5over?5a?5160?5bit?5p@ db 'SECG/WTLS curve over a 160 bit prime field',0
					; DATA XREF: .rdata:00002ADCo
					; .rdata:00002E2Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4304h
; COMDAT (pick any)
		public ??_C@_0CG@IFFAEDGD@SECG?5curve?5over?5a?5192?5bit?5prime?5@
; `string'
??_C@_0CG@IFFAEDGD@SECG?5curve?5over?5a?5192?5bit?5prime?5@ db 'SECG curve over a 192 bit prime field',0
					; DATA XREF: .rdata:00002AECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 432Ch
; COMDAT (pick any)
		public ??_C@_0CG@IOHCCJAA@SECG?5curve?5over?5a?5224?5bit?5prime?5@
; `string'
??_C@_0CG@IOHCCJAA@SECG?5curve?5over?5a?5224?5bit?5prime?5@ db 'SECG curve over a 224 bit prime field',0
					; DATA XREF: .rdata:00002AFCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4354h
; COMDAT (pick any)
		public ??_C@_0CL@NHPHHEEB@NIST?1SECG?5curve?5over?5a?5224?5bit?5p@
; `string'
??_C@_0CL@NHPHHEEB@NIST?1SECG?5curve?5over?5a?5224?5bit?5p@ db 'NIST/SECG curve over a 224 bit prime field',0
					; DATA XREF: .rdata:00002B0Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4380h
; COMDAT (pick any)
		public ??_C@_0CG@MBJIMJMI@SECG?5curve?5over?5a?5256?5bit?5prime?5@
; `string'
??_C@_0CG@MBJIMJMI@SECG?5curve?5over?5a?5256?5bit?5prime?5@ db 'SECG curve over a 256 bit prime field',0
					; DATA XREF: .rdata:00002B1Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 43A8h
; COMDAT (pick any)
		public ??_C@_0CL@MPIFFEHD@NIST?1SECG?5curve?5over?5a?5384?5bit?5p@
; `string'
??_C@_0CL@MPIFFEHD@NIST?1SECG?5curve?5over?5a?5384?5bit?5p@ db 'NIST/SECG curve over a 384 bit prime field',0
					; DATA XREF: .rdata:00002B2Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 43D4h
; COMDAT (pick any)
		public ??_C@_0CL@NCEJLDDF@NIST?1SECG?5curve?5over?5a?5521?5bit?5p@
; `string'
??_C@_0CL@NCEJLDDF@NIST?1SECG?5curve?5over?5a?5521?5bit?5p@ db 'NIST/SECG curve over a 521 bit prime field',0
					; DATA XREF: .rdata:00002B3Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4400h
; COMDAT (pick any)
		public ??_C@_0DB@HJIMEGJL@NIST?1X9?462?1SECG?5curve?5over?5a?5192@
; `string'
??_C@_0DB@HJIMEGJL@NIST?1X9?462?1SECG?5curve?5over?5a?5192@ db 'NIST/X9.62/SECG curve over a 192 bit prime field',0
					; DATA XREF: .rdata:00002B4Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4434h
; COMDAT (pick any)
		public ??_C@_0CH@BHJCBJE@X9?462?5curve?5over?5a?5192?5bit?5prime@
; `string'
??_C@_0CH@BHJCBJE@X9?462?5curve?5over?5a?5192?5bit?5prime@ db 'X9.62 curve over a 192 bit prime field',0
					; DATA XREF: .rdata:00002B5Co
					; .rdata:00002B6Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 445Ch
; COMDAT (pick any)
		public ??_C@_0CH@COBCAEEE@X9?462?5curve?5over?5a?5239?5bit?5prime@
; `string'
??_C@_0CH@COBCAEEE@X9?462?5curve?5over?5a?5239?5bit?5prime@ db 'X9.62 curve over a 239 bit prime field',0
					; DATA XREF: .rdata:00002B7Co
					; .rdata:00002B8Co ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4484h
; COMDAT (pick any)
		public ??_C@_0CM@IACJENLF@X9?462?1SECG?5curve?5over?5a?5256?5bit?5@
; `string'
??_C@_0CM@IACJENLF@X9?462?1SECG?5curve?5over?5a?5256?5bit?5@ db	'X9.62/SECG curve over a 256 bit prime field',0
					; DATA XREF: .rdata:00002BACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44B0h
; COMDAT (pick any)
		public ??_C@_0CH@OHOOPBHG@SECG?5curve?5over?5a?5113?5bit?5binary@
; `string'
??_C@_0CH@OHOOPBHG@SECG?5curve?5over?5a?5113?5bit?5binary@ db 'SECG curve over a 113 bit binary field',0
					; DATA XREF: .rdata:00002BBCo
					; .rdata:00002BCCo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44D8h
; COMDAT (pick any)
		public ??_C@_0CM@EPOILLGK@SECG?1WTLS?5curve?5over?5a?5131?5bit?5b@
; `string'
??_C@_0CM@EPOILLGK@SECG?1WTLS?5curve?5over?5a?5131?5bit?5b@ db 'SECG/WTLS curve over a 131 bit binary field',0
					; DATA XREF: .rdata:00002BDCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4504h
; COMDAT (pick any)
		public ??_C@_0CH@FJJEIBAL@SECG?5curve?5over?5a?5131?5bit?5binary@
; `string'
??_C@_0CH@FJJEIBAL@SECG?5curve?5over?5a?5131?5bit?5binary@ db 'SECG curve over a 131 bit binary field',0
					; DATA XREF: .rdata:00002BECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 452Ch
; COMDAT (pick any)
		public ??_C@_0DB@KNLLOMAB@NIST?1SECG?1WTLS?5curve?5over?5a?5163?5@
; `string'
??_C@_0DB@KNLLOMAB@NIST?1SECG?1WTLS?5curve?5over?5a?5163?5@ db 'NIST/SECG/WTLS curve over a 163 bit binary field',0
					; DATA XREF: .rdata:00002BFCo
					; .rdata:00002DECo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4560h
; COMDAT (pick any)
		public ??_C@_0CH@GKKFHOF@SECG?5curve?5over?5a?5163?5bit?5binary@
; `string'
??_C@_0CH@GKKFHOF@SECG?5curve?5over?5a?5163?5bit?5binary@ db 'SECG curve over a 163 bit binary field',0
					; DATA XREF: .rdata:00002C0Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4588h
; COMDAT (pick any)
		public ??_C@_0CM@HCIKDLO@NIST?1SECG?5curve?5over?5a?5163?5bit?5b@
; `string'
??_C@_0CM@HCIKDLO@NIST?1SECG?5curve?5over?5a?5163?5bit?5b@ db 'NIST/SECG curve over a 163 bit binary field',0
					; DATA XREF: .rdata:00002C1Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 45B4h
; COMDAT (pick any)
		public ??_C@_0CH@HKDFCHME@SECG?5curve?5over?5a?5193?5bit?5binary@
; `string'
??_C@_0CH@HKDFCHME@SECG?5curve?5over?5a?5193?5bit?5binary@ db 'SECG curve over a 193 bit binary field',0
					; DATA XREF: .rdata:00002C2Co
					; .rdata:00002C3Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 45DCh
; COMDAT (pick any)
		public ??_C@_0DB@PNCPLOPN@NIST?1SECG?1WTLS?5curve?5over?5a?5233?5@
; `string'
??_C@_0DB@PNCPLOPN@NIST?1SECG?1WTLS?5curve?5over?5a?5233?5@ db 'NIST/SECG/WTLS curve over a 233 bit binary field',0
					; DATA XREF: .rdata:00002C4Co
					; .rdata:00002C5Co ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4610h
; COMDAT (pick any)
		public ??_C@_0CH@CLCLBOGN@SECG?5curve?5over?5a?5239?5bit?5binary@
; `string'
??_C@_0CH@CLCLBOGN@SECG?5curve?5over?5a?5239?5bit?5binary@ db 'SECG curve over a 239 bit binary field',0
					; DATA XREF: .rdata:00002C6Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4638h
; COMDAT (pick any)
		public ??_C@_0CM@GFMOGKDK@NIST?1SECG?5curve?5over?5a?5283?5bit?5b@
; `string'
??_C@_0CM@GFMOGKDK@NIST?1SECG?5curve?5over?5a?5283?5bit?5b@ db 'NIST/SECG curve over a 283 bit binary field',0
					; DATA XREF: .rdata:00002C7Co
					; .rdata:00002C8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4664h
; COMDAT (pick any)
		public ??_C@_0CM@HDDNKCDK@NIST?1SECG?5curve?5over?5a?5409?5bit?5b@
; `string'
??_C@_0CM@HDDNKCDK@NIST?1SECG?5curve?5over?5a?5409?5bit?5b@ db 'NIST/SECG curve over a 409 bit binary field',0
					; DATA XREF: .rdata:00002C9Co
					; .rdata:00002CACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4690h
; COMDAT (pick any)
		public ??_C@_0CM@EACJKLC@NIST?1SECG?5curve?5over?5a?5571?5bit?5b@
; `string'
??_C@_0CM@EACJKLC@NIST?1SECG?5curve?5over?5a?5571?5bit?5b@ db 'NIST/SECG curve over a 571 bit binary field',0
					; DATA XREF: .rdata:00002CBCo
					; .rdata:00002CCCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 46BCh
; COMDAT (pick any)
		public ??_C@_0CI@CFPHBJDI@X9?462?5curve?5over?5a?5163?5bit?5binar@
; `string'
??_C@_0CI@CFPHBJDI@X9?462?5curve?5over?5a?5163?5bit?5binar@ db 'X9.62 curve over a 163 bit binary field',0
					; DATA XREF: .rdata:00002CDCo
					; .rdata:00002CECo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 46E4h
; COMDAT (pick any)
		public ??_C@_0CI@HOBKKPME@X9?462?5curve?5over?5a?5176?5bit?5binar@
; `string'
??_C@_0CI@HOBKKPME@X9?462?5curve?5over?5a?5176?5bit?5binar@ db 'X9.62 curve over a 176 bit binary field',0
					; DATA XREF: .rdata:00002D0Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 470Ch
; COMDAT (pick any)
		public ??_C@_0CI@CNNMGPOI@X9?462?5curve?5over?5a?5191?5bit?5binar@
; `string'
??_C@_0CI@CNNMGPOI@X9?462?5curve?5over?5a?5191?5bit?5binar@ db 'X9.62 curve over a 191 bit binary field',0
					; DATA XREF: .rdata:00002D1Co
					; .rdata:00002D2Co ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4734h
; COMDAT (pick any)
		public ??_C@_0CI@HADNJNCC@X9?462?5curve?5over?5a?5208?5bit?5binar@
; `string'
??_C@_0CI@HADNJNCC@X9?462?5curve?5over?5a?5208?5bit?5binar@ db 'X9.62 curve over a 208 bit binary field',0
					; DATA XREF: .rdata:00002D4Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 475Ch
; COMDAT (pick any)
		public ??_C@_0CI@IHGFALA@X9?462?5curve?5over?5a?5239?5bit?5binar@
; `string'
??_C@_0CI@IHGFALA@X9?462?5curve?5over?5a?5239?5bit?5binar@ db 'X9.62 curve over a 239 bit binary field',0
					; DATA XREF: .rdata:00002D5Co
					; .rdata:00002D6Co ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4784h
; COMDAT (pick any)
		public ??_C@_0CI@OMGMCAMF@X9?462?5curve?5over?5a?5272?5bit?5binar@
; `string'
??_C@_0CI@OMGMCAMF@X9?462?5curve?5over?5a?5272?5bit?5binar@ db 'X9.62 curve over a 272 bit binary field',0
					; DATA XREF: .rdata:00002D8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 47ACh
; COMDAT (pick any)
		public ??_C@_0CI@PCOAONL@X9?462?5curve?5over?5a?5304?5bit?5binar@
; `string'
??_C@_0CI@PCOAONL@X9?462?5curve?5over?5a?5304?5bit?5binar@ db 'X9.62 curve over a 304 bit binary field',0
					; DATA XREF: .rdata:00002D9Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 47D4h
; COMDAT (pick any)
		public ??_C@_0CI@BDIPEOPL@X9?462?5curve?5over?5a?5359?5bit?5binar@
; `string'
??_C@_0CI@BDIPEOPL@X9?462?5curve?5over?5a?5359?5bit?5binar@ db 'X9.62 curve over a 359 bit binary field',0
					; DATA XREF: .rdata:00002DACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 47FCh
; COMDAT (pick any)
		public ??_C@_0CI@GLMEIDGJ@X9?462?5curve?5over?5a?5368?5bit?5binar@
; `string'
??_C@_0CI@GLMEIDGJ@X9?462?5curve?5over?5a?5368?5bit?5binar@ db 'X9.62 curve over a 368 bit binary field',0
					; DATA XREF: .rdata:00002DBCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4824h
; COMDAT (pick any)
		public ??_C@_0CI@PHOKEIPD@X9?462?5curve?5over?5a?5431?5bit?5binar@
; `string'
??_C@_0CI@PHOKEIPD@X9?462?5curve?5over?5a?5431?5bit?5binar@ db 'X9.62 curve over a 431 bit binary field',0
					; DATA XREF: .rdata:00002DCCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 484Ch
; COMDAT (pick any)
		public ??_C@_0CH@PAECJHG@WTLS?5curve?5over?5a?5113?5bit?5binary@
; `string'
??_C@_0CH@PAECJHG@WTLS?5curve?5over?5a?5113?5bit?5binary@ db 'WTLS curve over a 113 bit binary field',0
					; DATA XREF: .rdata:00002DDCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4874h
; COMDAT (pick any)
		public ??_C@_0CG@NOPNGNKB@WTLS?5curve?5over?5a?5112?5bit?5prime?5@
; `string'
??_C@_0CG@NOPNGNKB@WTLS?5curve?5over?5a?5112?5bit?5prime?5@ db 'WTLS curve over a 112 bit prime field',0
					; DATA XREF: .rdata:00002E3Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 489Ch
; COMDAT (pick any)
		public ??_C@_0CG@JBBHINGJ@WTLS?5curve?5over?5a?5160?5bit?5prime?5@
; `string'
??_C@_0CG@JBBHINGJ@WTLS?5curve?5over?5a?5160?5bit?5prime?5@ db 'WTLS curve over a 160 bit prime field',0
					; DATA XREF: .rdata:00002E4Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48C4h
; COMDAT (pick any)
		public ??_C@_0CG@MLNHEHNL@WTLS?5curvs?5over?5a?5224?5bit?5prime?5@
; `string'
??_C@_0CG@MLNHEHNL@WTLS?5curvs?5over?5a?5224?5bit?5prime?5@ db 'WTLS curvs over a 224 bit prime field',0
					; DATA XREF: .rdata:00002E7Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 48ECh
; COMDAT (pick any)
		public ??_C@_0HB@LGGCBEEP@?6?7IPSec?1IKE?1Oakley?5curve?5?$CD3?5over@
; `string'
??_C@_0HB@LGGCBEEP@?6?7IPSec?1IKE?1Oakley?5curve?5?$CD3?5over@ db 0Ah
					; DATA XREF: .rdata:00002E8Co
		db 9,'IPSec/IKE/Oakley curve #3 over a 155 bit binary field.',0Ah
		db 9,'Not suitable for ECDSA.',0Ah
		db 9,'Questionable extension field!',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 4960h
; COMDAT (pick any)
		public ??_C@_0HB@IIAMGFOE@?6?7IPSec?1IKE?1Oakley?5curve?5?$CD4?5over@
; `string'
??_C@_0HB@IIAMGFOE@?6?7IPSec?1IKE?1Oakley?5curve?5?$CD4?5over@ db 0Ah
					; DATA XREF: .rdata:00002E9Co
		db 9,'IPSec/IKE/Oakley curve #4 over a 185 bit binary field.',0Ah
		db 9,'Not suitable for ECDSA.',0Ah
		db 9,'Questionable extension field!',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 49D4h
; COMDAT (pick any)
		public ??_C@_0CK@DKPAAAHG@RFC?55639?5curve?5over?5a?5160?5bit?5pr@
; `string'
??_C@_0CK@DKPAAAHG@RFC?55639?5curve?5over?5a?5160?5bit?5pr@ db 'RFC 5639 curve over a 160 bit prime field',0
					; DATA XREF: .rdata:00002EACo
					; .rdata:00002EBCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A00h
; COMDAT (pick any)
		public ??_C@_0CK@HMLLPNDL@RFC?55639?5curve?5over?5a?5192?5bit?5pr@
; `string'
??_C@_0CK@HMLLPNDL@RFC?55639?5curve?5over?5a?5192?5bit?5pr@ db 'RFC 5639 curve over a 192 bit prime field',0
					; DATA XREF: .rdata:00002ECCo
					; .rdata:00002EDCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A2Ch
; COMDAT (pick any)
		public ??_C@_0CK@HHJJJHFI@RFC?55639?5curve?5over?5a?5224?5bit?5pr@
; `string'
??_C@_0CK@HHJJJHFI@RFC?55639?5curve?5over?5a?5224?5bit?5pr@ db 'RFC 5639 curve over a 224 bit prime field',0
					; DATA XREF: .rdata:00002EECo
					; .rdata:00002EFCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A58h
; COMDAT (pick any)
		public ??_C@_0CK@DIHDHHJA@RFC?55639?5curve?5over?5a?5256?5bit?5pr@
; `string'
??_C@_0CK@DIHDHHJA@RFC?55639?5curve?5over?5a?5256?5bit?5pr@ db 'RFC 5639 curve over a 256 bit prime field',0
					; DATA XREF: .rdata:00002F0Co
					; .rdata:00002F1Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A84h
; COMDAT (pick any)
		public ??_C@_0CK@BJFGHLBI@RFC?55639?5curve?5over?5a?5320?5bit?5pr@
; `string'
??_C@_0CK@BJFGHLBI@RFC?55639?5curve?5over?5a?5320?5bit?5pr@ db 'RFC 5639 curve over a 320 bit prime field',0
					; DATA XREF: .rdata:00002F2Co
					; .rdata:00002F3Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4AB0h
; COMDAT (pick any)
		public ??_C@_0CK@GPOLLHGK@RFC?55639?5curve?5over?5a?5384?5bit?5pr@
; `string'
??_C@_0CK@GPOLLHGK@RFC?55639?5curve?5over?5a?5384?5bit?5pr@ db 'RFC 5639 curve over a 384 bit prime field',0
					; DATA XREF: .rdata:00002F4Co
					; .rdata:00002F5Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4ADCh
; COMDAT (pick any)
		public ??_C@_0CK@DLPHALOH@RFC?55639?5curve?5over?5a?5512?5bit?5pr@
; `string'
??_C@_0CK@DLPHALOH@RFC?55639?5curve?5over?5a?5512?5bit?5pr@ db 'RFC 5639 curve over a 512 bit prime field',0
					; DATA XREF: .rdata:00002F6Co
					; .rdata:00002F7Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 4B08h
_nist_curves	dd offset ??_C@_05KJOGHNFI@B?9163?$AA@
					; DATA XREF: _EC_curve_nid2nist:loc_4FF4r
					; _EC_curve_nist2nid:loc_500Cr
					; "B-163"
off_4B0C	dd offset byte_2D3	; DATA XREF: _EC_curve_nid2nist:loc_4FE2r
					; _EC_curve_nist2nid:loc_5050r
		dd offset ??_C@_05LNJIBAFN@B?9233?$AA@ ; "B-233"
		dd offset dword_2D4+3
		dd offset ??_C@_05LBMNPPLM@B?9283?$AA@ ; "B-283"
		dd offset dword_2D4+6
		dd offset ??_C@_05GAFKBJFC@B?9409?$AA@ ; "B-409"
		dd offset dword_2D4+8
		dd offset ??_C@_05BFHAOCLK@B?9571?$AA@ ; "B-571"
		dd offset dword_2D4+0Ah
		dd offset ??_C@_05IOOJCMJA@K?9163?$AA@ ; "K-163"
		dd offset byte_2D0+1
		dd offset ??_C@_05JKJHEBJF@K?9233?$AA@ ; "K-233"
		dd offset dword_2D4+2
		dd offset ??_C@_05JGMCKOHE@K?9283?$AA@ ; "K-283"
		dd offset dword_2D4+5
		dd offset ??_C@_05EHFFEIJK@K?9409?$AA@ ; "K-409"
		dd offset dword_2D4+7
		dd offset ??_C@_05DCHPLDHC@K?9571?$AA@ ; "K-571"
		dd offset dword_2D4+9
		dd offset ??_C@_05PFLPKILE@P?9192?$AA@ ; "P-192"
		dd offset dword_198+1
		dd offset ??_C@_05LNAFEPDN@P?9224?$AA@ ; "P-224"
		dd offset byte_2C9
		dd offset ??_C@_05IKHMDLDK@P?9256?$AA@ ; "P-256"
		dd offset dword_198+7
		dd offset ??_C@_05ICOKNIO@P?9384?$AA@ ;	"P-384"
		dd offset byte_2C9+2
		dd offset ??_C@_05FNKFIDMB@P?9521?$AA@ ; "P-521"
		dd offset dword_2CC
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B80h
; COMDAT (pick any)
		public ??_C@_05KJOGHNFI@B?9163?$AA@
; `string'
??_C@_05KJOGHNFI@B?9163?$AA@ db	'B-163',0 ; DATA XREF: .data:_nist_curveso
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B88h
; COMDAT (pick any)
		public ??_C@_05LNJIBAFN@B?9233?$AA@
; `string'
??_C@_05LNJIBAFN@B?9233?$AA@ db	'B-233',0 ; DATA XREF: .data:00004B10o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B90h
; COMDAT (pick any)
		public ??_C@_05LBMNPPLM@B?9283?$AA@
; `string'
??_C@_05LBMNPPLM@B?9283?$AA@ db	'B-283',0 ; DATA XREF: .data:00004B18o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B98h
; COMDAT (pick any)
		public ??_C@_05GAFKBJFC@B?9409?$AA@
; `string'
??_C@_05GAFKBJFC@B?9409?$AA@ db	'B-409',0 ; DATA XREF: .data:00004B20o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BA0h
; COMDAT (pick any)
		public ??_C@_05BFHAOCLK@B?9571?$AA@
; `string'
??_C@_05BFHAOCLK@B?9571?$AA@ db	'B-571',0 ; DATA XREF: .data:00004B28o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BA8h
; COMDAT (pick any)
		public ??_C@_05IOOJCMJA@K?9163?$AA@
; `string'
??_C@_05IOOJCMJA@K?9163?$AA@ db	'K-163',0 ; DATA XREF: .data:00004B30o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BB0h
; COMDAT (pick any)
		public ??_C@_05JKJHEBJF@K?9233?$AA@
; `string'
??_C@_05JKJHEBJF@K?9233?$AA@ db	'K-233',0 ; DATA XREF: .data:00004B38o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BB8h
; COMDAT (pick any)
		public ??_C@_05JGMCKOHE@K?9283?$AA@
; `string'
??_C@_05JGMCKOHE@K?9283?$AA@ db	'K-283',0 ; DATA XREF: .data:00004B40o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BC0h
; COMDAT (pick any)
		public ??_C@_05EHFFEIJK@K?9409?$AA@
; `string'
??_C@_05EHFFEIJK@K?9409?$AA@ db	'K-409',0 ; DATA XREF: .data:00004B48o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BC8h
; COMDAT (pick any)
		public ??_C@_05DCHPLDHC@K?9571?$AA@
; `string'
??_C@_05DCHPLDHC@K?9571?$AA@ db	'K-571',0 ; DATA XREF: .data:00004B50o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BD0h
; COMDAT (pick any)
		public ??_C@_05PFLPKILE@P?9192?$AA@
; `string'
??_C@_05PFLPKILE@P?9192?$AA@ db	'P-192',0 ; DATA XREF: .data:00004B58o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BD8h
; COMDAT (pick any)
		public ??_C@_05LNAFEPDN@P?9224?$AA@
; `string'
??_C@_05LNAFEPDN@P?9224?$AA@ db	'P-224',0 ; DATA XREF: .data:00004B60o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BE0h
; COMDAT (pick any)
		public ??_C@_05IKHMDLDK@P?9256?$AA@
; `string'
??_C@_05IKHMDLDK@P?9256?$AA@ db	'P-256',0 ; DATA XREF: .data:00004B68o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BE8h
; COMDAT (pick any)
		public ??_C@_05ICOKNIO@P?9384?$AA@
; `string'
??_C@_05ICOKNIO@P?9384?$AA@ db 'P-384',0 ; DATA XREF: .data:00004B70o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BF0h
; COMDAT (pick any)
		public ??_C@_05FNKFIDMB@P?9521?$AA@
; `string'
??_C@_05FNKFIDMB@P?9521?$AA@ db	'P-521',0 ; DATA XREF: .data:00004B78o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4BF8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_GROUP_new_by_curve_name
_EC_GROUP_new_by_curve_name proc near

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= xmmword ptr -10h
arg_0		= dword	ptr  4

		mov	eax, 30h ; '0'
		call	__chkstk
		push	edi
		mov	edi, [esp+34h+arg_0]
		xor	eax, eax
		test	edi, edi
		jle	loc_4FD7
		mov	ecx, offset _curve_list
		push	esi
		nop

loc_4C18:				; CODE XREF: _EC_GROUP_new_by_curve_name+2Bj
		cmp	[ecx], edi
		jz	short loc_4C2A
		inc	eax
		add	ecx, 10h
		cmp	eax, 51h ; 'Q'
		jb	short loc_4C18
		jmp	loc_4FA4
; ---------------------------------------------------------------------------

loc_4C2A:				; CODE XREF: _EC_GROUP_new_by_curve_name+22j
		shl	eax, 4
		xor	ecx, ecx
		add	eax, offset _curve_list
		mov	[esp+38h+var_2C], ecx
		push	ebx
		xor	esi, esi
		mov	[esp+3Ch+var_28], ecx
		push	ebp
		movups	xmm0, xmmword ptr [eax]
		xor	eax, eax
		mov	[esp+40h+var_24], esi
		mov	[esp+40h+var_20], ecx
		xor	ebx, ebx
		movups	[esp+40h+var_10], xmm0
		mov	[esp+40h+var_18], ecx
		mov	[esp+40h+var_1C], eax
		call	_BN_CTX_new
		mov	[esp+40h+var_30], eax
		test	eax, eax
		jnz	short loc_4C89
		push	0BF9h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	41h ; 'A'
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_4F0F
; ---------------------------------------------------------------------------

loc_4C89:				; CODE XREF: _EC_GROUP_new_by_curve_name+6Fj
		mov	eax, dword ptr [esp+40h+var_10+4]
		push	0
		mov	ecx, [eax+4]
		lea	ebp, [eax+10h]
		mov	ebx, [eax+8]
		add	ebp, ecx
		push	ebx
		push	ebp
		mov	[esp+4Ch+var_14], ecx
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+40h+var_2C], eax
		test	eax, eax
		jz	loc_4EF2
		push	0
		lea	eax, [ebx+ebp]
		push	ebx
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+40h+var_28], eax
		test	eax, eax
		jz	loc_4EF2
		push	0
		lea	eax, ds:0[ebx*2]
		add	eax, ebp
		push	ebx
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+40h+var_20], eax
		test	eax, eax
		jz	loc_4EF2
		mov	ecx, dword ptr [esp+40h+var_10+8]
		test	ecx, ecx
		jz	short loc_4D3C
		call	ecx
		push	eax
		call	_EC_GROUP_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_4D2B
		push	[esp+40h+var_30]
		mov	ecx, [esp+44h+var_20]
		mov	eax, [esi]
		push	ecx
		mov	ecx, [esp+48h+var_28]
		push	ecx
		mov	ecx, [esp+4Ch+var_2C]
		mov	eax, [eax+18h]
		push	ecx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jnz	short loc_4D95

loc_4D2B:				; CODE XREF: _EC_GROUP_new_by_curve_name+10Fj
		push	0C0Eh
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_4EFE
; ---------------------------------------------------------------------------

loc_4D3C:				; CODE XREF: _EC_GROUP_new_by_curve_name+FEj
		mov	ecx, dword ptr [esp+40h+var_10+4]
		push	[esp+40h+var_30]
		push	eax
		cmp	dword ptr [ecx], 196h
		mov	ecx, [esp+48h+var_28]
		push	ecx
		mov	ecx, [esp+4Ch+var_2C]
		push	ecx
		jnz	short loc_4D76
		call	_EC_GROUP_new_curve_GFp
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_4D95
		push	0C13h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_4EFE
; ---------------------------------------------------------------------------

loc_4D76:				; CODE XREF: _EC_GROUP_new_by_curve_name+15Dj
		call	_EC_GROUP_new_curve_GF2m
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_4D95
		push	0C1Ch
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_4EFE
; ---------------------------------------------------------------------------

loc_4D95:				; CODE XREF: _EC_GROUP_new_by_curve_name+131j
					; _EC_GROUP_new_by_curve_name+16Bj ...
		push	esi
		call	_EC_POINT_new
		add	esp, 4
		mov	[esp+40h+var_24], eax
		test	eax, eax
		jnz	short loc_4DB7
		push	0C23h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_4EFE
; ---------------------------------------------------------------------------

loc_4DB7:				; CODE XREF: _EC_GROUP_new_by_curve_name+1ACj
		lea	eax, ds:0[ebx*2]
		push	0
		add	eax, ebp
		add	eax, ebx
		push	ebx
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+40h+arg_0], eax
		test	eax, eax
		jz	loc_4EE1
		push	0
		lea	ecx, ds:0[ebx*4]
		add	ecx, ebp
		push	ebx
		push	ecx
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+40h+var_18], eax
		test	eax, eax
		jz	loc_4EE1
		push	[esp+40h+var_30]
		push	eax
		push	[esp+48h+arg_0]
		push	[esp+4Ch+var_24]
		push	esi
		call	_EC_POINT_set_affine_coordinates_GFp
		add	esp, 14h
		test	eax, eax
		jnz	short loc_4E39
		push	0C2Dh
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h

loc_4E21:				; CODE XREF: _EC_GROUP_new_by_curve_name+2F5j
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		mov	ebx, [esp+54h+arg_0]
		add	esp, 14h
		jmp	loc_4F0F
; ---------------------------------------------------------------------------

loc_4E39:				; CODE XREF: _EC_GROUP_new_by_curve_name+21Bj
		lea	eax, ds:0[ebx*4]
		push	0
		add	eax, ebp
		add	eax, ebx
		push	ebx
		push	eax
		call	_BN_bin2bn
		mov	ebx, [esp+4Ch+arg_0]
		add	esp, 0Ch
		mov	[esp+40h+var_1C], eax
		test	eax, eax
		jz	short loc_4EC4
		mov	eax, dword ptr [esp+40h+var_10+4]
		push	dword ptr [eax+0Ch]
		push	ebx
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	short loc_4EC4
		mov	eax, [esp+40h+var_1C]
		push	ebx
		push	eax
		push	[esp+48h+var_24]
		push	esi
		call	_EC_GROUP_set_generator
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4EA4
		push	0C36h

loc_4E8C:				; CODE XREF: _EC_GROUP_new_by_curve_name+2CAj
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_4F0F
; ---------------------------------------------------------------------------

loc_4EA4:				; CODE XREF: _EC_GROUP_new_by_curve_name+28Dj
		mov	eax, [esp+40h+var_14]
		test	eax, eax
		jz	short loc_4F1A
		push	eax
		sub	ebp, eax
		push	ebp
		push	esi
		call	_EC_GROUP_set_seed
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_4F1A
		push	0C3Bh
		jmp	short loc_4E8C
; ---------------------------------------------------------------------------

loc_4EC4:				; CODE XREF: _EC_GROUP_new_by_curve_name+262j
					; _EC_GROUP_new_by_curve_name+276j
		push	0C32h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	3
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_4F0F
; ---------------------------------------------------------------------------

loc_4EE1:				; CODE XREF: _EC_GROUP_new_by_curve_name+1DCj
					; _EC_GROUP_new_by_curve_name+1FDj
		push	0C29h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	3
		jmp	loc_4E21
; ---------------------------------------------------------------------------

loc_4EF2:				; CODE XREF: _EC_GROUP_new_by_curve_name+B6j
					; _EC_GROUP_new_by_curve_name+D1j ...
		push	0C06h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	3

loc_4EFE:				; CODE XREF: _EC_GROUP_new_by_curve_name+13Fj
					; _EC_GROUP_new_by_curve_name+179j ...
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	ebx, ebx

loc_4F0F:				; CODE XREF: _EC_GROUP_new_by_curve_name+8Cj
					; _EC_GROUP_new_by_curve_name+23Cj ...
		push	esi
		call	_EC_GROUP_free
		add	esp, 4
		xor	esi, esi

loc_4F1A:				; CODE XREF: _EC_GROUP_new_by_curve_name+2B2j
					; _EC_GROUP_new_by_curve_name+2C3j
		mov	eax, [esp+40h+var_24]
		test	eax, eax
		jz	short loc_4F2B
		push	eax
		call	_EC_POINT_free
		add	esp, 4

loc_4F2B:				; CODE XREF: _EC_GROUP_new_by_curve_name+328j
		mov	eax, [esp+40h+var_30]
		test	eax, eax
		jz	short loc_4F3C
		push	eax
		call	_BN_CTX_free
		add	esp, 4

loc_4F3C:				; CODE XREF: _EC_GROUP_new_by_curve_name+339j
		mov	eax, [esp+40h+var_2C]
		test	eax, eax
		jz	short loc_4F4D
		push	eax
		call	_BN_free
		add	esp, 4

loc_4F4D:				; CODE XREF: _EC_GROUP_new_by_curve_name+34Aj
		mov	eax, [esp+40h+var_28]
		test	eax, eax
		jz	short loc_4F5E
		push	eax
		call	_BN_free
		add	esp, 4

loc_4F5E:				; CODE XREF: _EC_GROUP_new_by_curve_name+35Bj
		mov	eax, [esp+40h+var_20]
		test	eax, eax
		jz	short loc_4F6F
		push	eax
		call	_BN_free
		add	esp, 4

loc_4F6F:				; CODE XREF: _EC_GROUP_new_by_curve_name+36Cj
		mov	eax, [esp+40h+var_1C]
		test	eax, eax
		jz	short loc_4F80
		push	eax
		call	_BN_free
		add	esp, 4

loc_4F80:				; CODE XREF: _EC_GROUP_new_by_curve_name+37Dj
		test	ebx, ebx
		jz	short loc_4F8D
		push	ebx
		call	_BN_free
		add	esp, 4

loc_4F8D:				; CODE XREF: _EC_GROUP_new_by_curve_name+38Aj
		mov	eax, [esp+40h+var_18]
		pop	ebp
		pop	ebx
		test	eax, eax
		jz	short loc_4FA0
		push	eax
		call	_BN_free
		add	esp, 4

loc_4FA0:				; CODE XREF: _EC_GROUP_new_by_curve_name+39Dj
		test	esi, esi
		jnz	short loc_4FCA

loc_4FA4:				; CODE XREF: _EC_GROUP_new_by_curve_name+2Dj
		push	0C6Bh
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	81h ; 'Å'
		push	0AEh ; 'Æ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	edi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_4FCA:				; CODE XREF: _EC_GROUP_new_by_curve_name+3AAj
		push	edi
		push	esi
		call	_EC_GROUP_set_curve_name
		add	esp, 8
		mov	eax, esi
		pop	esi

loc_4FD7:				; CODE XREF: _EC_GROUP_new_by_curve_name+13j
		pop	edi
		add	esp, 30h
		retn
_EC_GROUP_new_by_curve_name endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4FDCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_curve_nid2nist
_EC_curve_nid2nist proc	near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax

loc_4FE2:				; CODE XREF: _EC_curve_nid2nist+13j
		cmp	ds:off_4B0C[eax*8], ecx
		jz	short loc_4FF4
		inc	eax
		cmp	eax, 0Fh
		jb	short loc_4FE2
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_4FF4:				; CODE XREF: _EC_curve_nid2nist+Dj
		mov	eax, ds:_nist_curves[eax*8]
		retn
_EC_curve_nid2nist endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4FFCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_curve_nist2nid
_EC_curve_nist2nid proc	near

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	esi, esi
		nop	dword ptr [eax+eax+00000000h]

loc_500C:				; CODE XREF: _EC_curve_nist2nid+4Dj
		mov	ecx, ds:_nist_curves[esi*8]
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_501C:				; CODE XREF: _EC_curve_nist2nid+3Aj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_503C
		test	dl, dl
		jz	short loc_5038
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_503C
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_501C

loc_5038:				; CODE XREF: _EC_curve_nist2nid+28j
		xor	eax, eax
		jmp	short loc_5041
; ---------------------------------------------------------------------------

loc_503C:				; CODE XREF: _EC_curve_nist2nid+24j
					; _EC_curve_nist2nid+30j
		sbb	eax, eax
		or	eax, 1

loc_5041:				; CODE XREF: _EC_curve_nist2nid+3Ej
		test	eax, eax
		jz	short loc_5050
		inc	esi
		cmp	esi, 0Fh
		jb	short loc_500C
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5050:				; CODE XREF: _EC_curve_nist2nid+47j
		mov	eax, ds:off_4B0C[esi*8]
		pop	edi
		pop	esi
		retn
_EC_curve_nist2nid endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 505Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_get_builtin_curves
_EC_get_builtin_curves proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_50A3
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_50A3
		push	ebx
		mov	ebx, 51h ; 'Q'
		cmp	eax, ebx
		push	esi
		cmovb	ebx, eax
		xor	esi, esi
		test	ebx, ebx
		jz	short loc_50A1
		mov	edx, offset off_2A7C
		nop	dword ptr [eax+eax+00000000h]

loc_508C:				; CODE XREF: _EC_get_builtin_curves+43j
		mov	eax, [edx-0Ch]
		lea	edx, [edx+10h]
		mov	[edi+esi*8], eax
		mov	ecx, [edx-10h]
		mov	[edi+esi*8+4], ecx
		inc	esi
		cmp	esi, ebx
		jb	short loc_508C

loc_50A1:				; CODE XREF: _EC_get_builtin_curves+21j
		pop	esi
		pop	ebx

loc_50A3:				; CODE XREF: _EC_get_builtin_curves+7j
					; _EC_get_builtin_curves+Fj
		mov	eax, 51h ; 'Q'
		pop	edi
		retn
_EC_get_builtin_curves endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_group_new_from_data	proc near

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 24h ; '$'
		call	__chkstk
		push	ebx
		push	ebp
		xor	ecx, ecx
		xor	eax, eax
		push	esi
		push	edi
		xor	esi, esi
		mov	[esp+34h+var_20], ecx
		mov	[esp+34h+var_18], esi
		xor	edi, edi
		mov	[esp+34h+var_1C], ecx
		mov	[esp+34h+var_14], ecx
		mov	[esp+34h+var_8], ecx
		mov	[esp+34h+var_10], eax
		call	_BN_CTX_new
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_5105
		push	0BF9h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	41h ; 'A'
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_536E
; ---------------------------------------------------------------------------

loc_5105:				; CODE XREF: _ec_group_new_from_data+37j
		mov	eax, [esp+34h+arg_4]
		push	0
		mov	[esp+38h+var_C], eax
		mov	ecx, [eax+4]
		lea	ebx, [eax+10h]
		mov	edi, [eax+8]
		add	ebx, ecx
		push	edi
		push	ebx
		mov	[esp+40h+var_4], ecx
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+34h+var_20], eax
		test	eax, eax
		jz	loc_5351
		push	0
		lea	eax, [ebx+edi]
		push	edi
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+34h+var_1C], eax
		test	eax, eax
		jz	loc_5351
		push	0
		lea	eax, [ebx+edi*2]
		push	edi
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+34h+var_14], eax
		test	eax, eax
		jz	loc_5351
		mov	ecx, [esp+34h+arg_8]
		test	ecx, ecx
		jz	short loc_51B3
		call	ecx
		push	eax
		call	_EC_GROUP_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_51A2
		mov	ecx, [esp+34h+var_14]
		mov	eax, [esi]
		push	ebp
		push	ecx
		mov	ecx, [esp+3Ch+var_1C]
		mov	eax, [eax+18h]
		push	ecx
		mov	ecx, [esp+40h+var_20]
		push	ecx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jnz	short loc_5209

loc_51A2:				; CODE XREF: _ec_group_new_from_data+D5j
		push	0C0Eh
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_535D
; ---------------------------------------------------------------------------

loc_51B3:				; CODE XREF: _ec_group_new_from_data+C4j
		mov	ecx, [esp+34h+var_C]
		push	ebp
		push	eax
		cmp	dword ptr [ecx], 196h
		mov	ecx, [esp+3Ch+var_1C]
		push	ecx
		mov	ecx, [esp+40h+var_20]
		push	ecx
		jnz	short loc_51EA
		call	_EC_GROUP_new_curve_GFp
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_5209
		push	0C13h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_535D
; ---------------------------------------------------------------------------

loc_51EA:				; CODE XREF: _ec_group_new_from_data+11Dj
		call	_EC_GROUP_new_curve_GF2m
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_5209
		push	0C1Ch
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_535D
; ---------------------------------------------------------------------------

loc_5209:				; CODE XREF: _ec_group_new_from_data+F4j
					; _ec_group_new_from_data+12Bj	...
		push	esi
		call	_EC_POINT_new
		add	esp, 4
		mov	[esp+34h+var_18], eax
		test	eax, eax
		jnz	short loc_522B
		push	0C23h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		jmp	loc_535D
; ---------------------------------------------------------------------------

loc_522B:				; CODE XREF: _ec_group_new_from_data+16Cj
		push	0
		lea	eax, [ebx+edi*2]
		add	eax, edi
		push	edi
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+34h+var_24], eax
		test	eax, eax
		jz	loc_5340
		push	0
		lea	ecx, [ebx+edi*4]
		push	edi
		push	ecx
		call	_BN_bin2bn
		add	esp, 0Ch
		mov	[esp+34h+var_8], eax
		test	eax, eax
		jz	loc_5340
		push	ebp
		push	eax
		push	[esp+3Ch+var_24]
		push	[esp+40h+var_18]
		push	esi
		call	_EC_POINT_set_affine_coordinates_GFp
		add	esp, 14h
		test	eax, eax
		jnz	short loc_529E
		push	0C2Dh
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h

loc_5286:				; CODE XREF: _ec_group_new_from_data+2A0j
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		mov	edi, [esp+48h+var_24]
		add	esp, 14h
		jmp	loc_536E
; ---------------------------------------------------------------------------

loc_529E:				; CODE XREF: _ec_group_new_from_data+1CCj
		push	0
		lea	eax, [ebx+edi*4]
		add	eax, edi
		push	edi
		push	eax
		call	_BN_bin2bn
		mov	edi, [esp+40h+var_24]
		add	esp, 0Ch
		mov	[esp+34h+var_10], eax
		test	eax, eax
		jz	short loc_5323
		mov	eax, [esp+34h+var_C]
		push	dword ptr [eax+0Ch]
		push	edi
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	short loc_5323
		mov	eax, [esp+34h+var_10]
		push	edi
		push	eax
		push	[esp+3Ch+var_18]
		push	esi
		call	_EC_GROUP_set_generator
		add	esp, 10h
		test	eax, eax
		jnz	short loc_5303
		push	0C36h

loc_52EB:				; CODE XREF: _ec_group_new_from_data+275j
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	10h
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_536E
; ---------------------------------------------------------------------------

loc_5303:				; CODE XREF: _ec_group_new_from_data+238j
		mov	eax, [esp+34h+var_4]
		test	eax, eax
		jz	short loc_5379
		push	eax
		sub	ebx, eax
		push	ebx
		push	esi
		call	_EC_GROUP_set_seed
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_5379
		push	0C3Bh
		jmp	short loc_52EB
; ---------------------------------------------------------------------------

loc_5323:				; CODE XREF: _ec_group_new_from_data+20Dj
					; _ec_group_new_from_data+221j
		push	0C32h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	3
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_536E
; ---------------------------------------------------------------------------

loc_5340:				; CODE XREF: _ec_group_new_from_data+196j
					; _ec_group_new_from_data+1B1j
		push	0C29h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	3
		jmp	loc_5286
; ---------------------------------------------------------------------------

loc_5351:				; CODE XREF: _ec_group_new_from_data+82j
					; _ec_group_new_from_data+9Dj ...
		push	0C06h
		push	offset ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ ; ".\\crypto\\ec\\ec_curve.c"
		push	3

loc_535D:				; CODE XREF: _ec_group_new_from_data+102j
					; _ec_group_new_from_data+139j	...
		push	0AFh ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	edi, edi

loc_536E:				; CODE XREF: _ec_group_new_from_data+54j
					; _ec_group_new_from_data+1EDj	...
		push	esi
		call	_EC_GROUP_free
		add	esp, 4
		xor	esi, esi

loc_5379:				; CODE XREF: _ec_group_new_from_data+25Dj
					; _ec_group_new_from_data+26Ej
		mov	eax, [esp+34h+var_18]
		test	eax, eax
		jz	short loc_538A
		push	eax
		call	_EC_POINT_free
		add	esp, 4

loc_538A:				; CODE XREF: _ec_group_new_from_data+2D3j
		test	ebp, ebp
		jz	short loc_5397
		push	ebp
		call	_BN_CTX_free
		add	esp, 4

loc_5397:				; CODE XREF: _ec_group_new_from_data+2E0j
		mov	eax, [esp+34h+var_20]
		test	eax, eax
		jz	short loc_53A8
		push	eax
		call	_BN_free
		add	esp, 4

loc_53A8:				; CODE XREF: _ec_group_new_from_data+2F1j
		mov	eax, [esp+34h+var_1C]
		test	eax, eax
		jz	short loc_53B9
		push	eax
		call	_BN_free
		add	esp, 4

loc_53B9:				; CODE XREF: _ec_group_new_from_data+302j
		mov	eax, [esp+34h+var_14]
		test	eax, eax
		jz	short loc_53CA
		push	eax
		call	_BN_free
		add	esp, 4

loc_53CA:				; CODE XREF: _ec_group_new_from_data+313j
		mov	eax, [esp+34h+var_10]
		test	eax, eax
		jz	short loc_53DB
		push	eax
		call	_BN_free
		add	esp, 4

loc_53DB:				; CODE XREF: _ec_group_new_from_data+324j
		test	edi, edi
		jz	short loc_53E8
		push	edi
		call	_BN_free
		add	esp, 4

loc_53E8:				; CODE XREF: _ec_group_new_from_data+331j
		mov	eax, [esp+34h+var_8]
		test	eax, eax
		jz	short loc_53F9
		push	eax
		call	_BN_free
		add	esp, 4

loc_53F9:				; CODE XREF: _ec_group_new_from_data+342j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
_ec_group_new_from_data	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5404h
; COMDAT (pick any)
		public ??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@
; `string'
??_C@_0BH@GJAOOFMK@?4?2crypto?2ec?2ec_curve?4c?$AA@ db '.\crypto\ec\ec_curve.c',0
					; DATA XREF: _EC_GROUP_new_by_curve_name+76o
					; _EC_GROUP_new_by_curve_name+138o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_CTX_new:near	; CODE XREF: _EC_GROUP_new_by_curve_name+64p
					; _ec_group_new_from_data+2Ep
		extrn _BN_CTX_free:near	; CODE XREF: _EC_GROUP_new_by_curve_name+33Cp
					; _ec_group_new_from_data+2E3p
		extrn _BN_bin2bn:near	; CODE XREF: _EC_GROUP_new_by_curve_name+A8p
					; _EC_GROUP_new_by_curve_name+C3p ...
		extrn _BN_set_word:near	; CODE XREF: _EC_GROUP_new_by_curve_name+26Cp
					; _ec_group_new_from_data+217p
		extrn _BN_free:near	; CODE XREF: _EC_GROUP_new_by_curve_name+34Dp
					; _EC_GROUP_new_by_curve_name+35Ep ...
		extrn _EC_GROUP_new:near ; CODE	XREF: _EC_GROUP_new_by_curve_name+103p
					; _ec_group_new_from_data+C9p
		extrn _EC_GROUP_free:near ; CODE XREF: _EC_GROUP_new_by_curve_name+318p
					; _ec_group_new_from_data+2C3p
		extrn _EC_GROUP_set_generator:near
					; CODE XREF: _EC_GROUP_new_by_curve_name+283p
					; _ec_group_new_from_data+22Ep
		extrn _EC_GROUP_set_curve_name:near
					; CODE XREF: _EC_GROUP_new_by_curve_name+3D4p
		extrn _EC_GROUP_set_seed:near ;	CODE XREF: _EC_GROUP_new_by_curve_name+2B9p
					; _ec_group_new_from_data+264p
		extrn _EC_GROUP_new_curve_GFp:near
					; CODE XREF: _EC_GROUP_new_by_curve_name+15Fp
					; _ec_group_new_from_data+11Fp
		extrn _EC_GROUP_new_curve_GF2m:near
					; CODE XREF: _EC_GROUP_new_by_curve_name:loc_4D76p
					; _ec_group_new_from_data:loc_51EAp
		extrn _EC_POINT_new:near ; CODE	XREF: _EC_GROUP_new_by_curve_name+19Ep
					; _ec_group_new_from_data+15Ep
		extrn _EC_POINT_free:near ; CODE XREF: _EC_GROUP_new_by_curve_name+32Bp
					; _ec_group_new_from_data+2D6p
		extrn _EC_POINT_set_affine_coordinates_GFp:near
					; CODE XREF: _EC_GROUP_new_by_curve_name+211p
					; _ec_group_new_from_data+1C2p
		extrn _ERR_put_error:near ; CODE XREF: _EC_GROUP_new_by_curve_name+84p
					; _EC_GROUP_new_by_curve_name+230p ...
		extrn __chkstk:near	; CODE XREF: _EC_GROUP_new_by_curve_name+5p
					; _ec_group_new_from_data+5p


		end
