;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	05F43979ED0BEDA531D8059DBDA6A780
; Input	CRC32 :	DFBCBEBF

; File Name   :	C:\compspace\Diff\openssl\obj\a_bitstr.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_check
_ASN1_BIT_STRING_check proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	esi
		test	edx, edx
		jz	short loc_4F
		mov	esi, [edx+8]
		test	esi, esi
		jz	short loc_4F
		push	edi
		mov	edi, [edx]
		xor	eax, eax
		mov	ecx, 1
		test	edi, edi
		jle	short loc_4A
		mov	edx, [esp+8+arg_8]
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]

loc_27:					; CODE XREF: _ASN1_BIT_STRING_check+47j
		test	ecx, ecx
		jz	short loc_49
		cmp	eax, edx
		jge	short loc_36
		mov	cl, [eax+ebx]
		not	cl
		jmp	short loc_39
; ---------------------------------------------------------------------------

loc_36:					; CODE XREF: _ASN1_BIT_STRING_check+2Dj
		or	cl, 0FFh

loc_39:					; CODE XREF: _ASN1_BIT_STRING_check+34j
		test	[esi+eax], cl
		mov	ecx, 0
		setz	cl
		inc	eax
		cmp	eax, edi
		jl	short loc_27

loc_49:					; CODE XREF: _ASN1_BIT_STRING_check+29j
		pop	ebx

loc_4A:					; CODE XREF: _ASN1_BIT_STRING_check+1Cj
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4F:					; CODE XREF: _ASN1_BIT_STRING_check+7j
					; _ASN1_BIT_STRING_check+Ej
		mov	eax, 1
		pop	esi
		retn
_ASN1_BIT_STRING_check endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 58h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_get_bit
_ASN1_BIT_STRING_get_bit proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	eax, edi
		cdq
		and	edx, 7
		lea	esi, [edx+eax]
		mov	edx, [esp+8+arg_0]
		sar	esi, 3
		test	edx, edx
		jz	short loc_9F
		lea	ecx, [esi+1]
		cmp	[edx], ecx
		jl	short loc_9F
		mov	edx, [edx+8]
		test	edx, edx
		jz	short loc_9F
		and	edi, 7
		mov	ecx, 7
		sub	ecx, edi
		mov	eax, 1
		shl	eax, cl
		test	[edx+esi], al
		mov	eax, 0
		pop	edi
		setnz	al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_9F:					; CODE XREF: _ASN1_BIT_STRING_get_bit+18j
					; _ASN1_BIT_STRING_get_bit+1Fj	...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_ASN1_BIT_STRING_get_bit endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_set
_ASN1_BIT_STRING_set proc near
		jmp	_ASN1_STRING_set
_ASN1_BIT_STRING_set endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_set_bit
_ASN1_BIT_STRING_set_bit proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		mov	ecx, 7
		mov	eax, esi
		and	esi, 7
		cdq
		sub	ecx, esi
		mov	esi, [esp+8+arg_0]
		and	edx, 7
		add	edx, eax
		mov	eax, 1
		shl	eax, cl
		xor	ecx, ecx
		sar	edx, 3
		mov	ebx, eax
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		not	ebx
		test	edi, edi
		mov	[esp+0Ch+arg_4], edx
		cmovz	eax, ecx
		mov	[esp+0Ch+arg_8], eax
		test	esi, esi
		jnz	short loc_F4
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F4:					; CODE XREF: _ASN1_BIT_STRING_set_bit+40j
		and	dword ptr [esi+0Ch], 0FFFFFFF0h
		mov	ecx, [esi]
		push	ebp
		lea	ebp, [edx+1]
		cmp	ecx, ebp
		jl	short loc_10C
		cmp	dword ptr [esi+8], 0
		jnz	loc_194

loc_10C:				; CODE XREF: _ASN1_BIT_STRING_set_bit+54j
		test	edi, edi
		jz	loc_1BC
		mov	eax, [esi+8]
		test	eax, eax
		jnz	short loc_130
		push	0D0h ; 'Ð'
		push	offset ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ ; ".\\crypto\\asn1\\a_bitstr.c"
		push	ebp
		call	_CRYPTO_malloc
		add	esp, 0Ch
		jmp	short loc_145
; ---------------------------------------------------------------------------

loc_130:				; CODE XREF: _ASN1_BIT_STRING_set_bit+6Dj
		push	0D3h ; 'Ó'
		push	offset ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ ; ".\\crypto\\asn1\\a_bitstr.c"
		push	ebp
		push	ecx
		push	eax
		call	_CRYPTO_realloc_clean
		add	esp, 14h

loc_145:				; CODE XREF: _ASN1_BIT_STRING_set_bit+82j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_16D
		push	0D5h ; 'Õ'
		push	offset ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ ; ".\\crypto\\asn1\\a_bitstr.c"
		push	41h ; 'A'
		push	0B7h ; '·'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_16D:				; CODE XREF: _ASN1_BIT_STRING_set_bit+9Dj
		mov	edx, [esp+10h+arg_4]
		mov	eax, edx
		mov	ecx, [esi]
		sub	eax, ecx
		inc	eax
		test	eax, eax
		jle	short loc_18F
		push	eax		; Size
		lea	eax, [ecx+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		mov	edx, [esp+1Ch+arg_4]
		add	esp, 0Ch

loc_18F:				; CODE XREF: _ASN1_BIT_STRING_set_bit+CEj
		mov	[esi+8], edi
		mov	[esi], ebp

loc_194:				; CODE XREF: _ASN1_BIT_STRING_set_bit+5Aj
		mov	eax, [esi+8]
		and	bl, [eax+edx]
		or	bl, byte ptr [esp+10h+arg_8]
		mov	[eax+edx], bl
		cmp	dword ptr [esi], 0
		jle	short loc_1BC
		mov	ecx, [esi+8]
		nop	dword ptr [eax]

loc_1AC:				; CODE XREF: _ASN1_BIT_STRING_set_bit+10Ej
		mov	eax, [esi]
		cmp	byte ptr [ecx+eax-1], 0
		jnz	short loc_1BC
		dec	eax
		mov	[esi], eax
		test	eax, eax
		jg	short loc_1AC

loc_1BC:				; CODE XREF: _ASN1_BIT_STRING_set_bit+62j
					; _ASN1_BIT_STRING_set_bit+F8j	...
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_ASN1_BIT_STRING_set_bit endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _c2i_ASN1_BIT_STRING
_c2i_ASN1_BIT_STRING proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		push	esi
		xor	esi, esi
		push	edi
		mov	edi, [esp+14h+arg_0]
		cmp	ebx, 1
		jge	short loc_1EC
		mov	eax, 98h ; '˜'
		jmp	short $err$17
; ---------------------------------------------------------------------------

loc_1EC:				; CODE XREF: _c2i_ASN1_BIT_STRING+1Bj
		test	edi, edi
		jz	short loc_1F6
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_20A

loc_1F6:				; CODE XREF: _c2i_ASN1_BIT_STRING+26j
		push	3
		call	_ASN1_STRING_type_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_28B

loc_20A:				; CODE XREF: _c2i_ASN1_BIT_STRING+2Cj
		mov	ebp, [esp+14h+arg_4]
		mov	ebp, [ebp+0]
		movzx	ecx, byte ptr [ebp+0]
		inc	ebp
		mov	[esp+14h+var_4], ecx
		cmp	ecx, 7
		jle	short loc_226
		mov	eax, 0DCh ; 'Ü'
		jmp	short $err$17
; ---------------------------------------------------------------------------

loc_226:				; CODE XREF: _c2i_ASN1_BIT_STRING+55j
		mov	eax, [esi+0Ch]
		and	eax, 0FFFFFFF8h
		or	eax, ecx
		or	eax, 8
		mov	[esi+0Ch], eax
		mov	eax, ebx
		dec	ebx
		cmp	eax, 1
		jle	short loc_2B2
		push	9Eh ; 'ž'
		push	offset ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ ; ".\\crypto\\asn1\\a_bitstr.c"
		push	ebx
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+14h+arg_8], eax
		test	eax, eax
		jnz	short loc_293
		mov	eax, 41h ; 'A'

$err$17:				; CODE XREF: _c2i_ASN1_BIT_STRING+22j
					; _c2i_ASN1_BIT_STRING+5Cj
		push	0B3h ; '³'
		push	offset ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ ; ".\\crypto\\asn1\\a_bitstr.c"
		push	eax
		push	0BDh ; '½'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		test	esi, esi
		jz	short loc_28B
		test	edi, edi
		jz	short loc_282
		cmp	[edi], esi
		jz	short loc_28B

loc_282:				; CODE XREF: _c2i_ASN1_BIT_STRING+B4j
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_28B:				; CODE XREF: _c2i_ASN1_BIT_STRING+3Cj
					; _c2i_ASN1_BIT_STRING+B0j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_293:				; CODE XREF: _c2i_ASN1_BIT_STRING+8Dj
		push	ebx		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		mov	ecx, [esp+20h+var_4]
		or	al, 0FFh
		shl	al, cl
		add	esp, 0Ch
		mov	ecx, [esp+14h+arg_8]
		and	[ecx+ebx-1], al
		add	ebp, ebx
		jmp	short loc_2BA
; ---------------------------------------------------------------------------

loc_2B2:				; CODE XREF: _c2i_ASN1_BIT_STRING+72j
		mov	[esp+14h+arg_8], 0

loc_2BA:				; CODE XREF: _c2i_ASN1_BIT_STRING+E8j
		mov	eax, [esi+8]
		mov	[esi], ebx
		test	eax, eax
		jz	short loc_2CC
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_2CC:				; CODE XREF: _c2i_ASN1_BIT_STRING+F9j
		mov	eax, [esp+14h+arg_8]
		mov	[esi+8], eax
		mov	dword ptr [esi+4], 3
		test	edi, edi
		jz	short loc_2E0
		mov	[edi], esi

loc_2E0:				; CODE XREF: _c2i_ASN1_BIT_STRING+114j
		mov	eax, [esp+14h+arg_4]
		pop	edi
		mov	[eax], ebp
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_c2i_ASN1_BIT_STRING endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2c_ASN1_BIT_STRING
_i2c_ASN1_BIT_STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_2FB
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_2FB:				; CODE XREF: _i2c_ASN1_BIT_STRING+6j
		push	ebx
		push	esi
		mov	esi, [ecx]
		test	esi, esi
		jle	short loc_378
		mov	ebx, [ecx+0Ch]
		test	bl, 8
		jz	short loc_310
		and	ebx, 7
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_310:				; CODE XREF: _i2c_ASN1_BIT_STRING+19j
		mov	eax, [ecx+8]

loc_313:				; CODE XREF: _i2c_ASN1_BIT_STRING+2Dj
		cmp	byte ptr [eax+esi-1], 0
		jnz	short loc_31F
		dec	esi
		test	esi, esi
		jg	short loc_313

loc_31F:				; CODE XREF: _i2c_ASN1_BIT_STRING+28j
		movzx	eax, byte ptr [eax+esi-1]
		test	al, 1
		jnz	short loc_378
		test	al, 2
		jz	short loc_333
		mov	ebx, 1
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_333:				; CODE XREF: _i2c_ASN1_BIT_STRING+3Aj
		test	al, 4
		jz	short loc_33E
		mov	ebx, 2
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_33E:				; CODE XREF: _i2c_ASN1_BIT_STRING+45j
		test	al, 8
		jz	short loc_349
		mov	ebx, 3
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_349:				; CODE XREF: _i2c_ASN1_BIT_STRING+50j
		test	al, 10h
		jz	short loc_354
		mov	ebx, 4
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_354:				; CODE XREF: _i2c_ASN1_BIT_STRING+5Bj
		test	al, 20h
		jz	short loc_35F
		mov	ebx, 5
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_35F:				; CODE XREF: _i2c_ASN1_BIT_STRING+66j
		test	al, 40h
		jz	short loc_36A
		mov	ebx, 6
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_36A:				; CODE XREF: _i2c_ASN1_BIT_STRING+71j
		and	al, 80h
		movsx	ebx, al
		neg	ebx
		sbb	ebx, ebx
		and	ebx, 7
		jmp	short loc_37A
; ---------------------------------------------------------------------------

loc_378:				; CODE XREF: _i2c_ASN1_BIT_STRING+11j
					; _i2c_ASN1_BIT_STRING+36j
		xor	ebx, ebx

loc_37A:				; CODE XREF: _i2c_ASN1_BIT_STRING+1Ej
					; _i2c_ASN1_BIT_STRING+41j ...
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		lea	eax, [esi+1]
		test	ebp, ebp
		jz	short loc_3B0
		push	edi
		mov	edi, [ebp+0]
		push	esi		; Size
		mov	[edi], bl
		inc	edi
		push	dword ptr [ecx+8] ; Src
		push	edi		; Dst
		call	_memcpy
		add	esp, 0Ch
		add	edi, esi
		test	esi, esi
		jle	short loc_3A9
		or	al, 0FFh
		mov	ecx, ebx
		shl	al, cl
		and	[edi-1], al

loc_3A9:				; CODE XREF: _i2c_ASN1_BIT_STRING+AEj
		mov	[ebp+0], edi
		lea	eax, [esi+1]
		pop	edi

loc_3B0:				; CODE XREF: _i2c_ASN1_BIT_STRING+94j
		pop	ebp
		pop	esi
		pop	ebx
		retn
_i2c_ASN1_BIT_STRING endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B4h
; COMDAT (pick any)
		public ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
; `string'
??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ db '.\crypto\asn1\a_bitstr.c',0
					; DATA XREF: _ASN1_BIT_STRING_set_bit+74o
					; _ASN1_BIT_STRING_set_bit+89o	...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_BIT_STRING_set_bit+7Ap
					; _c2i_ASN1_BIT_STRING+7Fp
		extrn _CRYPTO_free:near	; CODE XREF: _c2i_ASN1_BIT_STRING+FCp
		extrn _CRYPTO_realloc_clean:near ; CODE	XREF: _ASN1_BIT_STRING_set_bit+91p
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_BIT_STRING_set_bit+B2p
					; _c2i_ASN1_BIT_STRING+A6p
		extrn _ASN1_STRING_free:near ; CODE XREF: _c2i_ASN1_BIT_STRING+BBp
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _c2i_ASN1_BIT_STRING+30p
		extrn _ASN1_STRING_set:near ; CODE XREF: _ASN1_BIT_STRING_setj
		extrn __chkstk:near	; CODE XREF: _c2i_ASN1_BIT_STRING+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _c2i_ASN1_BIT_STRING+CEp
					; _i2c_ASN1_BIT_STRING+A2p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _ASN1_BIT_STRING_set_bit+D7p


		end
