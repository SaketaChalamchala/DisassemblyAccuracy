;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3EF7ADF23BD691610BEC228344F07EB5
; Input	CRC32 :	E71DA737

; File Name   :	C:\compspace\Diff\openssl\obj\hm_pmeth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_hmac_init	proc near		; CODE XREF: _pkey_hmac_copy+6p
					; DATA XREF: .rdata:0000035Co

arg_0		= dword	ptr  4

		push	esi
		push	4Eh ; 'N'
		push	offset ??_C@_0BJ@CJCCPCOL@?4?2crypto?2hmac?2hm_pmeth?4c?$AA@ ; ".\\crypto\\hmac\\hm_pmeth.c"
		push	0E4h ; 'ä'
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1D
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D:					; CODE XREF: _pkey_hmac_init+19j
		lea	eax, [esi+14h]
		mov	dword ptr [esi], 0
		push	eax
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+8], 4
		call	_HMAC_CTX_init
		mov	eax, [esp+8+arg_0]
		add	esp, 4
		mov	[eax+14h], esi
		mov	dword ptr [eax+24h], 0
		mov	eax, 1
		pop	esi
		retn
_pkey_hmac_init	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_hmac_copy	proc near		; DATA XREF: .rdata:00000360o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_pkey_hmac_init
		add	esp, 4
		test	eax, eax
		jnz	short loc_74
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_74:					; CODE XREF: _pkey_hmac_copy+10j
		mov	eax, [esp+4+arg_4]
		push	ebx
		mov	ebx, [esi+14h]
		push	edi
		mov	edi, [eax+14h]
		lea	esi, [ebx+14h]
		push	esi
		mov	eax, [edi]
		mov	[ebx], eax
		call	_HMAC_CTX_init
		lea	eax, [edi+14h]
		push	eax
		push	esi
		call	_HMAC_CTX_copy
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_B9
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_BF
		push	dword ptr [edi+4]
		push	eax
		lea	eax, [ebx+4]
		push	eax
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_BF

loc_B9:					; CODE XREF: _pkey_hmac_copy+3Cj
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_BF:					; CODE XREF: _pkey_hmac_copy+43j
					; _pkey_hmac_copy+57j
		pop	edi
		pop	ebx
		mov	eax, 1
		pop	esi
		retn
_pkey_hmac_copy	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_hmac_cleanup proc	near		; DATA XREF: .rdata:00000364o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+14h]
		lea	eax, [esi+14h]
		push	eax
		call	_HMAC_CTX_cleanup
		mov	ecx, [esi+0Ch]
		add	esp, 4
		test	ecx, ecx
		jz	short loc_106
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_F4
		push	eax
		push	ecx
		call	_OPENSSL_cleanse
		add	esp, 8

loc_F4:					; CODE XREF: _pkey_hmac_cleanup+20j
		push	dword ptr [esi+0Ch]
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [esi+0Ch], 0

loc_106:				; CODE XREF: _pkey_hmac_cleanup+19j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_pkey_hmac_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 114h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_hmac_keygen proc near		; DATA XREF: .rdata:00000374o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_124

loc_121:				; CODE XREF: _pkey_hmac_keygen+1Ej
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_124:				; CODE XREF: _pkey_hmac_keygen+Bj
		add	eax, 4
		push	eax
		call	_ASN1_OCTET_STRING_dup
		add	esp, 4
		test	eax, eax
		jz	short loc_121
		push	eax
		push	357h
		push	[esp+8+arg_4]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		retn
_pkey_hmac_keygen endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_hmac_signctx_init proc	near		; DATA XREF: .rdata:00000390o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	eax, [esi+8]
		and	eax, 0FFFFFEFFh
		push	eax
		mov	eax, [esp+8+arg_0]
		mov	eax, [eax+14h]
		add	eax, 14h
		push	eax
		call	_HMAC_CTX_set_flags
		push	100h
		push	esi
		call	_EVP_MD_CTX_set_flags
		add	esp, 10h
		mov	dword ptr [esi+14h], offset _int_update
		mov	eax, 1
		pop	esi
		retn
_hmac_signctx_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 188h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_hmac_signctx	proc near		; DATA XREF: .rdata:00000394o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	edi
		push	[esp+4+arg_C]
		mov	edi, [eax+14h]
		call	_EVP_MD_CTX_md
		push	eax
		call	_EVP_MD_size
		add	esp, 8
		test	eax, eax
		jns	short loc_1AA
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1AA:				; CODE XREF: _hmac_signctx+1Cj
		push	esi
		mov	esi, [esp+8+arg_8]
		mov	[esi], eax
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_1D8
		lea	ecx, [esp+8+arg_0]
		push	ecx
		push	eax
		lea	eax, [edi+14h]
		push	eax
		call	_HMAC_Final
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1D2
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1D2:				; CODE XREF: _hmac_signctx+45j
		mov	eax, [esp+8+arg_0]
		mov	[esi], eax

loc_1D8:				; CODE XREF: _hmac_signctx+2Fj
		pop	esi
		mov	eax, 1
		pop	edi
		retn
_hmac_signctx	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_hmac_ctrl	proc near		; DATA XREF: .rdata:000003B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	ecx, [edx+14h]
		sub	eax, 1
		jz	short loc_24B
		sub	eax, 5
		jz	short loc_221
		sub	eax, 1
		jz	short loc_200
		mov	eax, 0FFFFFFFEh
		retn
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _pkey_hmac_ctrl+18j
		mov	eax, [edx+8]
		push	dword ptr [edx+4]
		push	dword ptr [ecx]
		mov	eax, [eax+14h]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		lea	eax, [ecx+14h]
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_251
		retn
; ---------------------------------------------------------------------------

loc_221:				; CODE XREF: _pkey_hmac_ctrl+13j
		mov	edx, [esp+arg_C]
		mov	eax, [esp+arg_8]
		test	edx, edx
		jnz	short loc_231
		test	eax, eax
		jg	short loc_248

loc_231:				; CODE XREF: _pkey_hmac_ctrl+4Bj
		cmp	eax, 0FFFFFFFFh
		jl	short loc_248
		push	eax
		push	edx
		lea	eax, [ecx+4]
		push	eax
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_251

loc_248:				; CODE XREF: _pkey_hmac_ctrl+4Fj
					; _pkey_hmac_ctrl+54j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_24B:				; CODE XREF: _pkey_hmac_ctrl+Ej
		mov	eax, [esp+arg_C]
		mov	[ecx], eax

loc_251:				; CODE XREF: _pkey_hmac_ctrl+3Ej
					; _pkey_hmac_ctrl+66j
		mov	eax, 1
		retn
_pkey_hmac_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 258h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_hmac_ctrl_str proc near		; DATA XREF: .rdata:000003BCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jnz	short loc_265
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_265:				; CODE XREF: _pkey_hmac_ctrl_str+7j
		mov	ecx, [esp+4+arg_4]
		mov	edx, offset ??_C@_03ICHNJLJF@key?$AA@ ;	`string'
		mov	eax, ecx
		push	ebx
		nop	dword ptr [eax+00000000h]

loc_278:				; CODE XREF: _pkey_hmac_ctrl_str+3Aj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_298
		test	bl, bl
		jz	short loc_294
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_298
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_278

loc_294:				; CODE XREF: _pkey_hmac_ctrl_str+28j
		xor	eax, eax
		jmp	short loc_29D
; ---------------------------------------------------------------------------

loc_298:				; CODE XREF: _pkey_hmac_ctrl_str+24j
					; _pkey_hmac_ctrl_str+30j
		sbb	eax, eax
		or	eax, 1

loc_29D:				; CODE XREF: _pkey_hmac_ctrl_str+3Ej
		pop	ebx
		test	eax, eax
		jnz	short loc_2C0
		mov	eax, [esp+4+arg_0]
		push	0FFFFFFFFh
		push	esi
		mov	eax, [eax+14h]
		add	eax, 4
		push	eax
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2C0:				; CODE XREF: _pkey_hmac_ctrl_str+48j
		mov	eax, offset ??_C@_06BHJHKMJC@hexkey?$AA@ ; "hexkey"
		nop	dword ptr [eax]

loc_2C8:				; CODE XREF: _pkey_hmac_ctrl_str+8Aj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_2E8
		test	dl, dl
		jz	short loc_2E4
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_2E8
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_2C8

loc_2E4:				; CODE XREF: _pkey_hmac_ctrl_str+78j
		xor	eax, eax
		jmp	short loc_2ED
; ---------------------------------------------------------------------------

loc_2E8:				; CODE XREF: _pkey_hmac_ctrl_str+74j
					; _pkey_hmac_ctrl_str+80j
		sbb	eax, eax
		or	eax, 1

loc_2ED:				; CODE XREF: _pkey_hmac_ctrl_str+8Ej
		test	eax, eax
		jnz	short loc_34D
		push	edi
		lea	eax, [esp+8+arg_8]
		push	eax
		push	esi
		call	_string_to_hex
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_309
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_309:				; CODE XREF: _pkey_hmac_ctrl_str+ACj
		mov	eax, [esp+8+arg_0]
		mov	ecx, [eax+14h]
		mov	eax, [esp+8+arg_8]
		cmp	eax, 0FFFFFFFFh
		jge	short loc_329
		push	edi
		xor	esi, esi
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_329:				; CODE XREF: _pkey_hmac_ctrl_str+BFj
		push	eax
		lea	eax, [ecx+4]
		push	edi
		push	eax
		call	_ASN1_OCTET_STRING_set
		mov	esi, eax
		add	esp, 0Ch
		neg	esi
		sbb	esi, esi
		push	edi
		neg	esi
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_34D:				; CODE XREF: _pkey_hmac_ctrl_str+97j
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_pkey_hmac_ctrl_str endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 354h
		public _hmac_pkey_meth
_hmac_pkey_meth	dd offset _hmac_pkey_meth+3 ; DATA XREF: .rdata:_hmac_pkey_metho
		dd 0
		dd offset _pkey_hmac_init
		dd offset _pkey_hmac_copy
		dd offset _pkey_hmac_cleanup
		dd 3 dup(0)
		dd offset _pkey_hmac_keygen
		dd 6 dup(0)
		dd offset _hmac_signctx_init
		dd offset _hmac_signctx
		dd 8 dup(0)
		dd offset _pkey_hmac_ctrl
		dd offset _pkey_hmac_ctrl_str
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_update	proc near		; DATA XREF: _hmac_signctx_init+2Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		mov	eax, [eax+10h]
		mov	eax, [eax+14h]
		add	eax, 14h
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_int_update	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3E8h
; COMDAT (pick any)
		public ??_C@_0BJ@CJCCPCOL@?4?2crypto?2hmac?2hm_pmeth?4c?$AA@
; `string'
??_C@_0BJ@CJCCPCOL@?4?2crypto?2hmac?2hm_pmeth?4c?$AA@ db '.\crypto\hmac\hm_pmeth.c',0
					; DATA XREF: _pkey_hmac_init+3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 404h
; COMDAT (pick any)
		public ??_C@_03ICHNJLJF@key?$AA@
; `string'
??_C@_03ICHNJLJF@key?$AA@ dd 79656Bh	; DATA XREF: _pkey_hmac_ctrl_str+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 408h
; COMDAT (pick any)
		public ??_C@_06BHJHKMJC@hexkey?$AA@
; `string'
??_C@_06BHJHKMJC@hexkey?$AA@ db	'hexkey',0 ; DATA XREF: _pkey_hmac_ctrl_str:loc_2C0o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _pkey_hmac_init+Dp
		extrn _CRYPTO_free:near	; CODE XREF: _pkey_hmac_cleanup+2Fp
					; _pkey_hmac_cleanup+3Fp ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _pkey_hmac_cleanup+24p
		extrn _ASN1_OCTET_STRING_dup:near ; CODE XREF: _pkey_hmac_keygen+14p
		extrn _ASN1_OCTET_STRING_set:near ; CODE XREF: _pkey_hmac_copy+4Dp
					; _pkey_hmac_ctrl+5Cp ...
		extrn _EVP_MD_size:near	; CODE XREF: _hmac_signctx+12p
		extrn _EVP_MD_CTX_md:near ; CODE XREF: _hmac_signctx+Cp
		extrn _EVP_MD_CTX_set_flags:near ; CODE	XREF: _hmac_signctx_init+24p
		extrn _EVP_PKEY_assign:near ; CODE XREF: _pkey_hmac_keygen+2Ap
		extrn _string_to_hex:near ; CODE XREF: _pkey_hmac_ctrl_str+A0p
		extrn _HMAC_CTX_init:near ; CODE XREF: _pkey_hmac_init+43p
					; _pkey_hmac_copy+28p
		extrn _HMAC_CTX_cleanup:near ; CODE XREF: _pkey_hmac_cleanup+Cp
		extrn _HMAC_Init_ex:near ; CODE	XREF: _pkey_hmac_ctrl+34p
		extrn _HMAC_Update:near	; CODE XREF: _int_update+16p
		extrn _HMAC_Final:near	; CODE XREF: _hmac_signctx+3Bp
		extrn _HMAC_CTX_copy:near ; CODE XREF: _pkey_hmac_copy+32p
		extrn _HMAC_CTX_set_flags:near ; CODE XREF: _hmac_signctx_init+19p


		end
