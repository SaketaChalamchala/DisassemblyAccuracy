;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D18CC9D3226807EC804661310E60A46E
; Input	CRC32 :	D9C350DC

; File Name   :	C:\compspace\Diff\openssl\obj\evp_pkey.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKCS82PKEY
_EVP_PKCS82PKEY	proc near

var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 58h ; 'X'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		push	edi
		mov	edi, [esp+5Ch+arg_0]
		lea	eax, [esp+5Ch+var_58]
		push	edi
		push	0
		push	0
		push	0
		push	eax
		call	_PKCS8_pkey_get0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_42
		pop	edi
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_42:					; CODE XREF: _EVP_PKCS82PKEY+30j
		push	esi
		call	_EVP_PKEY_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_76
		push	4Fh ; 'O'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	41h ; 'A'
		push	6Fh ; 'o'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	edi
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_76:					; CODE XREF: _EVP_PKCS82PKEY+4Cj
		push	[esp+60h+var_58]
		call	_OBJ_obj2nid
		push	eax
		push	esi
		call	_EVP_PKEY_set_type
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_C5
		push	54h ; 'T'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	76h ; 'v'
		push	6Fh ; 'o'
		push	6
		call	_ERR_put_error
		push	[esp+74h+var_58]
		lea	eax, [esp+78h+var_54]
		push	50h ; 'P'
		push	eax
		call	_i2t_ASN1_OBJECT
		lea	eax, [esp+80h+var_54]
		push	eax
		push	offset ??_C@_05DLJFLBDA@TYPE?$DN?$AA@ ;	"TYPE="
		push	2
		call	_ERR_add_error_data
		add	esp, 2Ch
		jmp	short $error$13
; ---------------------------------------------------------------------------

loc_C5:					; CODE XREF: _EVP_PKCS82PKEY+8Bj
		mov	eax, [esi+0Ch]
		mov	eax, [eax+24h]
		test	eax, eax
		jz	short loc_FB
		push	edi
		push	esi
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_E8
		push	5Ch ; '\'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	91h ; 'ë'
		jmp	short loc_107
; ---------------------------------------------------------------------------

loc_E8:					; CODE XREF: _EVP_PKCS82PKEY+D8j
		mov	eax, esi
		pop	esi
		pop	edi
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_FB:					; CODE XREF: _EVP_PKCS82PKEY+CDj
		push	60h ; '`'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	90h ; 'ê'

loc_107:				; CODE XREF: _EVP_PKCS82PKEY+E6j
		push	6Fh ; 'o'
		push	6
		call	_ERR_put_error
		add	esp, 14h

$error$13:				; CODE XREF: _EVP_PKCS82PKEY+C3j
		push	esi
		call	_EVP_PKEY_free
		mov	ecx, [esp+64h+var_4]
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
_EVP_PKCS82PKEY	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 130h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY2PKCS8
_EVP_PKEY2PKCS8	proc near

arg_0		= dword	ptr  4

		push	0
		push	[esp+4+arg_0]
		call	_EVP_PKEY2PKCS8_broken
		add	esp, 8
		retn
_EVP_PKEY2PKCS8	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 140h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY2PKCS8_broken
_EVP_PKEY2PKCS8_broken proc near	; CODE XREF: _EVP_PKEY2PKCS8+6p

var_C		= qword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_PKCS8_PRIV_KEY_INFO_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_165
		push	77h ; 'w'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	41h ; 'A'
		push	71h ; 'q'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_165:				; CODE XREF: _EVP_PKEY2PKCS8_broken+Aj
		mov	ecx, [esp+4+arg_0]
		mov	eax, [esp+4+arg_4]
		mov	[esi], eax
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	short loc_1D3
		mov	eax, [eax+28h]
		test	eax, eax
		jz	short loc_1C2
		push	ecx
		push	esi
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_199
		push	80h ; 'Ä'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	92h ; 'í'
		jmp	short loc_1DF
; ---------------------------------------------------------------------------

loc_199:				; CODE XREF: _EVP_PKEY2PKCS8_broken+46j
		mov	eax, [esi+0Ch]
		mov	ecx, [eax+4]
		mov	eax, 8
		call	__chkstk
		xorps	xmm0, xmm0
		movsd	[esp+0Ch+var_C], xmm0
		push	dword ptr [ecx]
		push	dword ptr [ecx+8]
		call	_RAND_add
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1C2:				; CODE XREF: _EVP_PKEY2PKCS8_broken+3Bj
		push	84h ; 'Ñ'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	90h ; 'ê'
		jmp	short loc_1DF
; ---------------------------------------------------------------------------

loc_1D3:				; CODE XREF: _EVP_PKEY2PKCS8_broken+34j
		push	89h ; 'â'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	76h ; 'v'

loc_1DF:				; CODE XREF: _EVP_PKEY2PKCS8_broken+57j
					; _EVP_PKEY2PKCS8_broken+91j
		push	71h ; 'q'
		push	6
		call	_ERR_put_error
		add	esp, 14h

$error$12:
		push	esi
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
_EVP_PKEY2PKCS8_broken endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_add1_attr
_EVP_PKEY_add1_attr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		add	eax, 1Ch
		push	eax
		call	_X509at_add1_attr
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_EVP_PKEY_add1_attr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 214h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_add1_attr_by_NID
_EVP_PKEY_add1_attr_by_NID proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_C]
		add	eax, 1Ch
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	eax
		call	_X509at_add1_attr_by_NID
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_EVP_PKEY_add1_attr_by_NID endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_add1_attr_by_OBJ
_EVP_PKEY_add1_attr_by_OBJ proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_C]
		add	eax, 1Ch
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	eax
		call	_X509at_add1_attr_by_OBJ
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_EVP_PKEY_add1_attr_by_OBJ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 264h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_add1_attr_by_txt
_EVP_PKEY_add1_attr_by_txt proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_C]
		add	eax, 1Ch
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	eax
		call	_X509at_add1_attr_by_txt
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_EVP_PKEY_add1_attr_by_txt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_delete_attr
_EVP_PKEY_delete_attr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+1Ch]
		call	_X509at_delete_attr
		add	esp, 8
		retn
_EVP_PKEY_delete_attr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_get_attr
_EVP_PKEY_get_attr proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+1Ch]
		call	_X509at_get_attr
		add	esp, 8
		retn
_EVP_PKEY_get_attr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_get_attr_by_NID
_EVP_PKEY_get_attr_by_NID proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+1Ch]
		call	_X509at_get_attr_by_NID
		add	esp, 0Ch
		retn
_EVP_PKEY_get_attr_by_NID endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_get_attr_by_OBJ
_EVP_PKEY_get_attr_by_OBJ proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+1Ch]
		call	_X509at_get_attr_by_OBJ
		add	esp, 0Ch
		retn
_EVP_PKEY_get_attr_by_OBJ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_get_attr_count
_EVP_PKEY_get_attr_count proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+1Ch]
		call	_X509at_get_attr_count
		add	esp, 4
		retn
_EVP_PKEY_get_attr_count endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_set_broken
_PKCS8_set_broken proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		sub	eax, 0
		jz	short loc_331
		sub	eax, 1
		jz	short loc_31D
		push	0A4h ; '§'
		push	offset ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ ; ".\\crypto\\evp\\evp_pkey.c"
		push	75h ; 'u'
		push	70h ; 'p'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_31D:				; CODE XREF: _PKCS8_set_broken+Cj
		mov	eax, [esp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	dword ptr [eax], 1
		mov	dword ptr [ecx], 10h
		retn
; ---------------------------------------------------------------------------

loc_331:				; CODE XREF: _PKCS8_set_broken+7j
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		retn
_PKCS8_set_broken endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33Ch
; COMDAT (pick any)
		public ??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@
; `string'
??_C@_0BI@NHBEHKCC@?4?2crypto?2evp?2evp_pkey?4c?$AA@ db	'.\crypto\evp\evp_pkey.c',0
					; DATA XREF: _EVP_PKCS82PKEY+50o
					; _EVP_PKCS82PKEY+8Fo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 354h
; COMDAT (pick any)
		public ??_C@_05DLJFLBDA@TYPE?$DN?$AA@
; `string'
??_C@_05DLJFLBDA@TYPE?$DN?$AA@ db 'TYPE=',0 ; DATA XREF: _EVP_PKCS82PKEY+B4o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _EVP_PKCS82PKEY+5Bp
					; _EVP_PKCS82PKEY+9Ap ...
		extrn _ERR_add_error_data:near ; CODE XREF: _EVP_PKCS82PKEY+BBp
		extrn _i2t_ASN1_OBJECT:near ; CODE XREF: _EVP_PKCS82PKEY+AAp
		extrn _OBJ_obj2nid:near	; CODE XREF: _EVP_PKCS82PKEY+7Ap
		extrn _EVP_PKEY_set_type:near ;	CODE XREF: _EVP_PKCS82PKEY+81p
		extrn _EVP_PKEY_new:near ; CODE	XREF: _EVP_PKCS82PKEY+43p
		extrn _EVP_PKEY_free:near ; CODE XREF: _EVP_PKCS82PKEY+114p
		extrn _X509at_get_attr_count:near ; CODE XREF: _EVP_PKEY_get_attr_count+7p
		extrn _X509at_get_attr_by_NID:near ; CODE XREF:	_EVP_PKEY_get_attr_by_NID+Fp
		extrn _X509at_get_attr_by_OBJ:near ; CODE XREF:	_EVP_PKEY_get_attr_by_OBJ+Fp
		extrn _X509at_get_attr:near ; CODE XREF: _EVP_PKEY_get_attr+Bp
		extrn _X509at_delete_attr:near ; CODE XREF: _EVP_PKEY_delete_attr+Bp
		extrn _X509at_add1_attr:near ; CODE XREF: _EVP_PKEY_add1_attr+Cp
		extrn _X509at_add1_attr_by_OBJ:near
					; CODE XREF: _EVP_PKEY_add1_attr_by_OBJ+18p
		extrn _X509at_add1_attr_by_NID:near
					; CODE XREF: _EVP_PKEY_add1_attr_by_NID+18p
		extrn _X509at_add1_attr_by_txt:near
					; CODE XREF: _EVP_PKEY_add1_attr_by_txt+18p
		extrn _PKCS8_PRIV_KEY_INFO_new:near ; CODE XREF: _EVP_PKEY2PKCS8_broken+1p
		extrn _PKCS8_PRIV_KEY_INFO_free:near ; CODE XREF: _EVP_PKEY2PKCS8_broken+ACp
		extrn _PKCS8_pkey_get0:near ; CODE XREF: _EVP_PKCS82PKEY+26p
		extrn _RAND_add:near	; CODE XREF: _EVP_PKEY2PKCS8_broken+76p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _EVP_PKCS82PKEY+39p
					; _EVP_PKCS82PKEY+6Dp ...
		extrn __chkstk:near	; CODE XREF: _EVP_PKCS82PKEY+5p
					; _EVP_PKEY2PKCS8_broken+64p
		extrn ___security_cookie:near ;	DATA XREF: _EVP_PKCS82PKEY+Ar
		extrn __fltused:near


		end
