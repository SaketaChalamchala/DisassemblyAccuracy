;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6C02FDC7F90F65FCDC22864FC2689225
; Input	CRC32 :	8DA34425

; File Name   :	C:\compspace\Diff\openssl\obj\e_camellia.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_init_key proc	near		; DATA XREF: .rdata:000002E0o
					; .rdata:00000314o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+58h]
		mov	esi, [edi+60h]
		push	esi
		shl	eax, 3
		push	eax
		push	[esp+10h+arg_4]
		call	_Camellia_set_key
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_44
		push	108h
		push	offset ??_C@_0BK@GBILIGIN@?4?2crypto?2evp?2e_camellia?4c?$AA@ ;	".\\crypto\\evp\\e_camellia.c"
		push	9Dh ; 'ù'
		push	9Fh ; 'ü'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_44:					; CODE XREF: _camellia_init_key+1Fj
		mov	eax, [edi]
		mov	ecx, [eax+10h]
		and	ecx, 0F0007h
		cmp	ecx, 1
		jz	short loc_59
		cmp	ecx, 2
		jnz	short loc_6C

loc_59:					; CODE XREF: _camellia_init_key+52j
		cmp	[esp+8+arg_C], 0
		jnz	short loc_6C
		mov	dword ptr [esi+118h], offset _Camellia_decrypt
		jmp	short loc_76
; ---------------------------------------------------------------------------

loc_6C:					; CODE XREF: _camellia_init_key+57j
					; _camellia_init_key+5Ej
		mov	dword ptr [esi+118h], offset _Camellia_encrypt

loc_76:					; CODE XREF: _camellia_init_key+6Aj
		xor	eax, eax
		mov	edx, offset _Camellia_cbc_encrypt
		cmp	ecx, 2
		pop	edi
		cmovz	eax, edx
		mov	[esi+11Ch], eax
		mov	eax, 1
		pop	esi
		retn
_camellia_init_key endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_cbc_cipher proc near		; DATA XREF: .rdata:000002E4o
					; .rdata:0000041Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+60h]
		mov	edx, [ecx+11Ch]
		test	edx, edx
		jz	short loc_C4
		push	dword ptr [eax+8]
		add	eax, 20h ; ' '
		push	eax
		push	ecx
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_8]
		call	edx
		add	esp, 18h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_C4:					; CODE XREF: _camellia_cbc_cipher+Fj
		cmp	dword ptr [eax+8], 0
		push	dword ptr [ecx+118h]
		jz	short loc_EF
		add	eax, 20h ; ' '
		push	eax
		push	ecx
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_8]
		call	_CRYPTO_cbc128_encrypt
		add	esp, 18h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_EF:					; CODE XREF: _camellia_cbc_cipher+3Aj
		add	eax, 20h ; ' '
		push	eax
		push	ecx
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_8]
		call	_CRYPTO_cbc128_decrypt
		add	esp, 18h
		mov	eax, 1
		retn
_camellia_cbc_cipher endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 110h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_ecb_cipher proc near		; DATA XREF: .rdata:00000318o
					; .rdata:00000450o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		push	ebp
		mov	ebp, [esp+4+arg_C]
		push	edi
		mov	eax, [ecx]
		mov	ecx, [ecx+60h]

loc_11F:				; DATA XREF: .rdata:00000320o
					; .rdata:00000354o ...
		mov	[esp+8+arg_0], ecx
		mov	edi, [eax+4]
		cmp	ebp, edi
		jb	short loc_162
		mov	eax, [esp+8+arg_4]
		sub	ebp, edi
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_8]
		xor	ebx, ebx
		sub	eax, esi
		mov	[esp+10h+arg_4], eax
		xchg	ax, ax

loc_140:				; CODE XREF: _camellia_ecb_cipher+4Ej
		push	ecx
		add	eax, esi
		push	eax
		mov	eax, [ecx+118h]
		push	esi
		call	eax
		mov	ecx, [esp+1Ch+arg_0]
		add	ebx, edi
		mov	eax, [esp+1Ch+arg_4]
		add	esp, 0Ch
		add	esi, edi
		cmp	ebx, ebp
		jbe	short loc_140
		pop	esi
		pop	ebx

loc_162:				; CODE XREF: _camellia_ecb_cipher+18j
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_camellia_ecb_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_ofb_cipher proc near		; DATA XREF: .rdata:0000034Co
					; .rdata:00000484o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		mov	edx, [ecx+60h]
		lea	eax, [ecx+50h]
		push	dword ptr [edx+118h]
		push	eax
		lea	eax, [ecx+20h]
		push	eax
		push	edx
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_8]
		call	_CRYPTO_ofb128_encrypt
		add	esp, 1Ch
		mov	eax, 1
		retn
_camellia_ofb_cipher endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 19Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_cfb_cipher proc near		; DATA XREF: .rdata:00000380o
					; .rdata:000004B8o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		mov	edx, [ecx+60h]
		lea	eax, [ecx+50h]
		push	dword ptr [edx+118h]
		push	dword ptr [ecx+8]
		push	eax
		lea	eax, [ecx+20h]
		push	eax
		push	edx
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_8]
		call	_CRYPTO_cfb128_encrypt
		add	esp, 20h
		mov	eax, 1
		retn
_camellia_cfb_cipher endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_cfb8_cipher proc near		; DATA XREF: .rdata:000003E8o
					; .rdata:00000520o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		mov	edx, [ecx+60h]
		lea	eax, [ecx+50h]
		push	dword ptr [edx+118h]
		push	dword ptr [ecx+8]
		push	eax
		lea	eax, [ecx+20h]
		push	eax
		push	edx
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_8]
		call	_CRYPTO_cfb128_8_encrypt
		add	esp, 20h
		mov	eax, 1
		retn
_camellia_cfb8_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 204h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_camellia_cfb1_cipher proc near		; DATA XREF: .rdata:000003B4o
					; .rdata:000004ECo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		test	dword ptr [esi+5Ch], 2000h
		mov	ebx, [esi+60h]
		jz	short loc_244
		push	dword ptr [ebx+118h]
		lea	eax, [esi+50h]
		push	dword ptr [esi+8]
		push	eax
		lea	eax, [esi+20h]
		push	eax
		push	ebx
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_4]
		push	[esp+24h+arg_8]
		call	_CRYPTO_cfb128_1_encrypt
		add	esp, 20h
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_244:				; CODE XREF: _camellia_cfb1_cipher+10j
		mov	ecx, [esp+8+arg_8]
		mov	edx, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_C]
		cmp	edi, 10000000h
		jb	short loc_299
		push	ebp
		mov	ebp, edi
		lea	eax, [esi+50h]
		shr	ebp, 1Ch
		xchg	ax, ax

loc_264:				; CODE XREF: _camellia_cfb1_cipher+92j
		push	dword ptr [ebx+118h]
		push	dword ptr [esi+8]
		push	eax
		lea	eax, [esi+20h]
		push	eax
		push	ebx
		push	80000000h
		push	edx
		push	ecx
		call	_CRYPTO_cfb128_1_encrypt
		mov	ecx, [esp+30h+arg_8]
		lea	eax, [esi+50h]
		mov	edx, [esp+30h+arg_4]
		add	esp, 20h
		sub	edi, 10000000h
		sub	ebp, 1
		jnz	short loc_264
		pop	ebp

loc_299:				; CODE XREF: _camellia_cfb1_cipher+53j
		test	edi, edi
		jz	short loc_2C1
		push	dword ptr [ebx+118h]
		lea	eax, [esi+50h]
		push	dword ptr [esi+8]
		push	eax
		lea	eax, [esi+20h]
		push	eax
		push	ebx
		lea	eax, ds:0[edi*8]
		push	eax
		push	edx
		push	ecx
		call	_CRYPTO_cfb128_1_encrypt
		add	esp, 20h

loc_2C1:				; CODE XREF: _camellia_cfb1_cipher+97j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_camellia_cfb1_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2CCh
_camellia_128_cbc dd offset byte_2EF	; DATA XREF: _EVP_camellia_128_cbco
		dd 3 dup(10h), 1002h
		dd offset _camellia_init_key
		dd offset _camellia_cbc_cipher
		dd 0
		db 20h,	1, 0
byte_2EF	db 0			; DATA XREF: .rdata:_camellia_128_cbco
byte_2F0	db 0			; DATA XREF: .rdata:_camellia_192_cbco
byte_2F1	db 0			; DATA XREF: .rdata:_camellia_256_cbco
byte_2F2	db 0			; DATA XREF: .rdata:_camellia_128_ecbo
byte_2F3	db 0			; DATA XREF: .rdata:_camellia_192_ecbo
byte_2F4	db 0			; DATA XREF: .rdata:_camellia_256_ecbo
byte_2F5	db 0			; DATA XREF: .rdata:_camellia_128_cfbo
byte_2F6	db 0			; DATA XREF: .rdata:_camellia_192_cfbo
byte_2F7	db 0			; DATA XREF: .rdata:_camellia_256_cfbo
byte_2F8	db 0			; DATA XREF: .rdata:_camellia_128_cfb1o
byte_2F9	db 0			; DATA XREF: .rdata:_camellia_192_cfb1o
byte_2FA	db 0			; DATA XREF: .rdata:_camellia_256_cfb1o
byte_2FB	db 0			; DATA XREF: .rdata:_camellia_128_cfb8o
byte_2FC	db 0			; DATA XREF: .rdata:_camellia_192_cfb8o
byte_2FD	db 0			; DATA XREF: .rdata:_camellia_256_cfb8o
byte_2FE	db 0			; DATA XREF: .rdata:_camellia_128_ofbo
byte_2FF	db 0			; DATA XREF: .rdata:_camellia_192_ofbo
_camellia_128_ecb dd offset byte_2F2	; DATA XREF: .rdata:_camellia_256_ofbo
					; _EVP_camellia_128_ecbo
		dd 2 dup(10h), 0
		dd 1001h
		dd offset _camellia_init_key
		dd offset _camellia_ecb_cipher
		align 10h
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_128_ofb dd offset byte_2FE	; DATA XREF: _EVP_camellia_128_ofbo
		dd 1, 2	dup(10h), 1004h
		dd offset _camellia_init_key
		dd offset _camellia_ofb_cipher
		dd 0
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_128_cfb dd offset byte_2F5	; DATA XREF: _EVP_camellia_128_cfb128o
		dd 1, 2	dup(10h), 1003h
		dd offset _camellia_init_key
		dd offset _camellia_cfb_cipher
		align 8
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_128_cfb1 dd offset byte_2F8	; DATA XREF: _EVP_camellia_128_cfb1o
		dd 1, 2	dup(10h), 3
		dd offset _camellia_init_key
		dd offset _camellia_cfb1_cipher
		dd 0
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_128_cfb8 dd offset byte_2FB	; DATA XREF: _EVP_camellia_128_cfb8o
		dd 1, 2	dup(10h), 3
		dd offset _camellia_init_key
		dd offset _camellia_cfb8_cipher
		align 10h
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_192_cbc dd offset byte_2F0	; DATA XREF: _EVP_camellia_192_cbco
		dd 10h,	18h, 10h, 1002h
		dd offset _camellia_init_key
		dd offset _camellia_cbc_cipher
		dd 0
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_192_ecb dd offset byte_2F3	; DATA XREF: _EVP_camellia_192_ecbo
		dd 10h,	18h, 0
		dd 1001h
		dd offset _camellia_init_key
		dd offset _camellia_ecb_cipher
		align 8
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_192_ofb dd offset byte_2FF	; DATA XREF: _EVP_camellia_192_ofbo
		dd 1, 18h, 10h,	1004h
		dd offset _camellia_init_key
		dd offset _camellia_ofb_cipher
		dd 0
		dd offset loc_11F+1
		align 20h
_camellia_192_cfb dd offset byte_2F6	; DATA XREF: _EVP_camellia_192_cfb128o
		dd 1, 18h, 10h,	1003h
		dd offset _camellia_init_key
		dd offset _camellia_cfb_cipher
		align 10h
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_192_cfb1 dd offset byte_2F9	; DATA XREF: _EVP_camellia_192_cfb1o
		dd 1, 18h, 10h,	3
		dd offset _camellia_init_key
		dd offset _camellia_cfb1_cipher
		dd 0
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_192_cfb8 dd offset byte_2FC	; DATA XREF: _EVP_camellia_192_cfb8o
		dd 1, 18h, 10h,	3
		dd offset _camellia_init_key
		dd offset _camellia_cfb8_cipher
		align 8
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_256_cbc dd offset byte_2F1	; DATA XREF: _EVP_camellia_256_cbco
		dd 10h,	20h, 10h, 1002h
		dd offset _camellia_init_key
		dd offset _camellia_cbc_cipher
		dd 0
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_256_ecb dd offset byte_2F4	; DATA XREF: _EVP_camellia_256_ecbo
		dd 10h,	20h, 0
		dd 1001h
		dd offset _camellia_init_key
		dd offset _camellia_ecb_cipher
		align 10h
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_256_ofb dd offset _camellia_128_ecb ;	DATA XREF: _EVP_camellia_256_ofbo
		dd 1, 20h, 10h,	1004h
		dd offset _camellia_init_key
		dd offset _camellia_ofb_cipher
		dd 0
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_256_cfb dd offset byte_2F7	; DATA XREF: _EVP_camellia_256_cfb128o
		dd 1, 20h, 10h,	1003h
		dd offset _camellia_init_key
		dd offset _camellia_cfb_cipher
		align 8
		dd offset loc_11F+1
		dd 4 dup(0)
_camellia_256_cfb1 dd offset byte_2FA	; DATA XREF: _EVP_camellia_256_cfb1o
		dd 1, 20h, 10h,	3
		dd offset _camellia_init_key
		dd offset _camellia_cfb1_cipher
		dd 0
		dd offset loc_11F+1
		align 20h
_camellia_256_cfb8 dd offset byte_2FD	; DATA XREF: _EVP_camellia_256_cfb8o
		dd 1, 20h, 10h,	3
		dd offset _camellia_init_key
		dd offset _camellia_cfb8_cipher
		align 10h
		dd offset loc_11F+1
		dd 4 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 674h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_128_cbc
_EVP_camellia_128_cbc proc near
		mov	eax, offset _camellia_128_cbc
		retn
_EVP_camellia_128_cbc endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 67Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_128_cfb1
_EVP_camellia_128_cfb1 proc near
		mov	eax, offset _camellia_128_cfb1
		retn
_EVP_camellia_128_cfb1 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 684h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_128_cfb128
_EVP_camellia_128_cfb128 proc near
		mov	eax, offset _camellia_128_cfb
		retn
_EVP_camellia_128_cfb128 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_128_cfb8
_EVP_camellia_128_cfb8 proc near
		mov	eax, offset _camellia_128_cfb8
		retn
_EVP_camellia_128_cfb8 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 694h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_128_ecb
_EVP_camellia_128_ecb proc near
		mov	eax, offset _camellia_128_ecb
		retn
_EVP_camellia_128_ecb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 69Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_128_ofb
_EVP_camellia_128_ofb proc near
		mov	eax, offset _camellia_128_ofb
		retn
_EVP_camellia_128_ofb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_192_cbc
_EVP_camellia_192_cbc proc near
		mov	eax, offset _camellia_192_cbc
		retn
_EVP_camellia_192_cbc endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_192_cfb1
_EVP_camellia_192_cfb1 proc near
		mov	eax, offset _camellia_192_cfb1
		retn
_EVP_camellia_192_cfb1 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_192_cfb128
_EVP_camellia_192_cfb128 proc near
		mov	eax, offset _camellia_192_cfb
		retn
_EVP_camellia_192_cfb128 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_192_cfb8
_EVP_camellia_192_cfb8 proc near
		mov	eax, offset _camellia_192_cfb8
		retn
_EVP_camellia_192_cfb8 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_192_ecb
_EVP_camellia_192_ecb proc near
		mov	eax, offset _camellia_192_ecb
		retn
_EVP_camellia_192_ecb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_192_ofb
_EVP_camellia_192_ofb proc near
		mov	eax, offset _camellia_192_ofb
		retn
_EVP_camellia_192_ofb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_256_cbc
_EVP_camellia_256_cbc proc near
		mov	eax, offset _camellia_256_cbc
		retn
_EVP_camellia_256_cbc endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_256_cfb1
_EVP_camellia_256_cfb1 proc near
		mov	eax, offset _camellia_256_cfb1
		retn
_EVP_camellia_256_cfb1 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_256_cfb128
_EVP_camellia_256_cfb128 proc near
		mov	eax, offset _camellia_256_cfb
		retn
_EVP_camellia_256_cfb128 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_256_cfb8
_EVP_camellia_256_cfb8 proc near
		mov	eax, offset _camellia_256_cfb8
		retn
_EVP_camellia_256_cfb8 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_256_ecb
_EVP_camellia_256_ecb proc near
		mov	eax, offset _camellia_256_ecb
		retn
_EVP_camellia_256_ecb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_camellia_256_ofb
_EVP_camellia_256_ofb proc near
		mov	eax, offset _camellia_256_ofb
		retn
_EVP_camellia_256_ofb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 704h
; COMDAT (pick any)
		public ??_C@_0BK@GBILIGIN@?4?2crypto?2evp?2e_camellia?4c?$AA@
; `string'
??_C@_0BK@GBILIGIN@?4?2crypto?2evp?2e_camellia?4c?$AA@ db '.\crypto\evp\e_camellia.c',0
					; DATA XREF: _camellia_init_key+26o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _camellia_init_key+37p
		extrn _Camellia_set_key:near ; CODE XREF: _camellia_init_key+15p
		extrn _Camellia_encrypt:near ; DATA XREF: _camellia_init_key:loc_6Co
		extrn _Camellia_decrypt:near ; DATA XREF: _camellia_init_key+60o
		extrn _Camellia_cbc_encrypt:near ; DATA	XREF: _camellia_init_key+78o
		extrn _CRYPTO_cbc128_encrypt:near ; CODE XREF: _camellia_cbc_cipher+4Dp
		extrn _CRYPTO_cbc128_decrypt:near ; CODE XREF: _camellia_cbc_cipher+6Cp
		extrn _CRYPTO_ofb128_encrypt:near ; CODE XREF: _camellia_ofb_cipher+22p
		extrn _CRYPTO_cfb128_encrypt:near ; CODE XREF: _camellia_cfb_cipher+25p
		extrn _CRYPTO_cfb128_8_encrypt:near ; CODE XREF: _camellia_cfb8_cipher+25p
		extrn _CRYPTO_cfb128_1_encrypt:near ; CODE XREF: _camellia_cfb1_cipher+30p
					; _camellia_cfb1_cipher+76p ...


		end
