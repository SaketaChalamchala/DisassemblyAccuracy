;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	EC86AFDA470367B4ED0CA77FCBBE4FC4
; Input	CRC32 :	BB729039

; File Name   :	C:\compspace\Diff\openssl\obj\t_x509.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; COMDAT (pick any)
		public ??_C@_03HJBDCHOM@Feb?$AA@
; `string'
??_C@_03HJBDCHOM@Feb?$AA@ dd 626546h	; DATA XREF: .data:00000030o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
; COMDAT (pick any)
		public ??_C@_03ODNJBKGA@Mar?$AA@
; `string'
??_C@_03ODNJBKGA@Mar?$AA@ dd 72614Dh	; DATA XREF: .data:00000034o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
; COMDAT (pick any)
		public ??_C@_03LEOLGMJP@Apr?$AA@
; `string'
??_C@_03LEOLGMJP@Apr?$AA@ dd 727041h	; DATA XREF: .data:00000038o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
; COMDAT (pick any)
		public ??_C@_03CNMDKL@May?$AA@
; `string'
??_C@_03CNMDKL@May?$AA@	dd 79614Dh	; DATA XREF: .data:0000003Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
; COMDAT (pick any)
		public ??_C@_03IDFGHECI@Jun?$AA@
; `string'
??_C@_03IDFGHECI@Jun?$AA@ dd 6E754Ah	; DATA XREF: .data:00000040o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
; COMDAT (pick any)
		public ??_C@_03LBGABGKK@Jul?$AA@
; `string'
??_C@_03LBGABGKK@Jul?$AA@ dd 6C754Ah	; DATA XREF: .data:00000044o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
; COMDAT (pick any)
		public ??_C@_03IFJFEIGA@Aug?$AA@
; `string'
??_C@_03IFJFEIGA@Aug?$AA@ dd 677541h	; DATA XREF: .data:00000048o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
; COMDAT (pick any)
		public ??_C@_03GGCAPAJC@Sep?$AA@
; `string'
??_C@_03GGCAPAJC@Sep?$AA@ dd 706553h	; DATA XREF: .data:0000004Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
; COMDAT (pick any)
		public ??_C@_03BMAOKBAD@Oct?$AA@
; `string'
??_C@_03BMAOKBAD@Oct?$AA@ dd 74634Fh	; DATA XREF: .data:00000050o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
; COMDAT (pick any)
		public ??_C@_03JPJOFNIA@Nov?$AA@
; `string'
??_C@_03JPJOFNIA@Nov?$AA@ dd 766F4Eh	; DATA XREF: .data:00000054o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
; COMDAT (pick any)
		public ??_C@_03MKABNOCG@Dec?$AA@
; `string'
??_C@_03MKABNOCG@Dec?$AA@ dd 636544h	; DATA XREF: .data:00000058o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2Ch
_mon		dd offset ??_C@_03JIHJHPIE@Jan?$AA@
					; DATA XREF: _ASN1_GENERALIZEDTIME_print+181r
					; `string'
		dd offset ??_C@_03HJBDCHOM@Feb?$AA@ ; `string'
		dd offset ??_C@_03ODNJBKGA@Mar?$AA@ ; `string'
		dd offset ??_C@_03LEOLGMJP@Apr?$AA@ ; `string'
		dd offset ??_C@_03CNMDKL@May?$AA@ ; `string'
		dd offset ??_C@_03IDFGHECI@Jun?$AA@ ; `string'
		dd offset ??_C@_03LBGABGKK@Jul?$AA@ ; `string'
		dd offset ??_C@_03IFJFEIGA@Aug?$AA@ ; `string'
		dd offset ??_C@_03GGCAPAJC@Sep?$AA@ ; `string'
		dd offset ??_C@_03BMAOKBAD@Oct?$AA@ ; `string'
		dd offset ??_C@_03JPJOFNIA@Nov?$AA@ ; `string'
		dd offset ??_C@_03MKABNOCG@Dec?$AA@ ; DATA XREF: _ASN1_UTCTIME_print+131r
_data		ends			; `string'

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
; COMDAT (pick any)
		public ??_C@_03JIHJHPIE@Jan?$AA@
; `string'
??_C@_03JIHJHPIE@Jan?$AA@ dd 6E614Ah	; DATA XREF: .data:_mono
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALIZEDTIME_print
_ASN1_GENERALIZEDTIME_print proc near	; CODE XREF: _ASN1_TIME_print+1Ej

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h
		call	__chkstk
		mov	eax, [esp+18h+arg_4]
		xor	ecx, ecx
		push	ebp
		push	esi
		push	edi
		mov	edi, [eax]
		xor	ebp, ebp
		mov	edx, [eax+8]
		xor	esi, esi
		mov	[esp+24h+var_18], ecx
		cmp	edi, 0Ch
		jl	$err$30
		cmp	byte ptr [edx+edi-1], 5Ah ; 'Z'
		mov	eax, 1
		cmovz	ecx, eax
		xor	eax, eax
		mov	[esp+24h+arg_4], ecx
		nop	dword ptr [eax+00h]

loc_A0:					; CODE XREF: _ASN1_GENERALIZEDTIME_print+59j
		mov	cl, [edx+eax]
		cmp	cl, 39h	; '9'
		jg	$err$30
		cmp	cl, 30h	; '0'
		jl	$err$30
		inc	eax
		cmp	eax, 0Ch
		jl	short loc_A0
		movsx	eax, byte ptr [edx]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+1]
		lea	eax, [eax+ecx*2]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+2]
		lea	eax, [eax+ecx*2]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+3]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFF2FB0h
		mov	[esp+24h+var_14], eax
		movsx	eax, byte ptr [edx+4]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+5]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+24h+var_4], eax
		dec	eax
		cmp	eax, 0Bh
		ja	$err$30
		movsx	eax, byte ptr [edx+6]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+7]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+24h+var_8], eax
		movsx	eax, byte ptr [edx+8]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+9]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+24h+var_C], eax
		movsx	eax, byte ptr [edx+0Ah]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+0Bh]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+24h+var_10], eax
		cmp	edi, 0Eh
		jl	short loc_1B4
		mov	al, [edx+0Ch]
		cmp	al, 30h	; '0'
		jl	short loc_1B4
		cmp	al, 39h	; '9'
		jg	short loc_1B4
		push	ebx
		mov	bl, [edx+0Dh]
		cmp	bl, 30h	; '0'
		jl	short loc_1B3
		cmp	bl, 39h	; '9'
		jg	short loc_1B3
		movsx	eax, al
		lea	ecx, [eax+eax*4]
		movsx	eax, bl
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+28h+var_18], eax
		cmp	edi, 0Fh
		jl	short loc_1B3
		cmp	byte ptr [edx+0Eh], 2Eh	; '.'
		jnz	short loc_1B3
		lea	ebp, [edx+0Eh]
		mov	esi, 1
		cmp	edi, 0Fh
		jle	short loc_1B3
		mov	edx, 0Eh
		lea	ecx, [ebp+1]
		sub	edx, ebp

loc_1A0:				; CODE XREF: _ASN1_GENERALIZEDTIME_print+151j
		mov	al, [ecx]
		cmp	al, 30h	; '0'
		jl	short loc_1B3
		cmp	al, 39h	; '9'
		jg	short loc_1B3
		inc	ecx
		inc	esi
		lea	eax, [edx+ecx]
		cmp	eax, edi
		jl	short loc_1A0

loc_1B3:				; CODE XREF: _ASN1_GENERALIZEDTIME_print+102j
					; _ASN1_GENERALIZEDTIME_print+107j ...
		pop	ebx

loc_1B4:				; CODE XREF: _ASN1_GENERALIZEDTIME_print+EEj
					; _ASN1_GENERALIZEDTIME_print+F5j ...
		cmp	[esp+24h+arg_4], 0
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		mov	eax, offset ??_C@_04FIEKMBKB@?5GMT?$AA@	; " GMT"
		cmovz	eax, ecx
		push	eax
		push	[esp+28h+var_14]
		mov	eax, [esp+2Ch+var_4]
		push	ebp
		push	esi
		push	[esp+34h+var_18]
		push	[esp+38h+var_10]
		push	[esp+3Ch+var_C]
		push	[esp+40h+var_8]
		push	ds:(_mon-4)[eax*4]
		push	offset ??_C@_0BP@OGIOIJMK@?$CFs?5?$CF2d?5?$CF02d?3?$CF02d?3?$CF02d?$CF?4?$CKs?5?$CFd?$CFs?$AA@ ; "%s %2d %02d:%02d:%02d%.*s %d%s"
		push	[esp+4Ch+arg_0]
		call	_BIO_printf
		add	esp, 2Ch
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		pop	esi
		mov	eax, ecx
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$err$30:				; CODE XREF: _ASN1_GENERALIZEDTIME_print+23j
					; _ASN1_GENERALIZEDTIME_print+46j ...
		push	0Eh
		push	offset ??_C@_0P@FGACABCD@Bad?5time?5value?$AA@ ; "Bad time value"
		push	[esp+2Ch+arg_0]
		call	_BIO_write
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 18h
		retn
_ASN1_GENERALIZEDTIME_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 228h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_print
_ASN1_STRING_print proc	near

var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 54h ; 'T'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		push	ebx
		mov	ebx, [esp+58h+arg_0]
		xor	eax, eax
		push	edi
		mov	edi, [esp+5Ch+arg_4]
		test	edi, edi
		jz	loc_2D1
		push	ebp
		mov	ebp, [edi+8]
		push	esi
		xor	esi, esi
		cmp	[edi], eax
		jle	short loc_2CA

loc_25C:				; CODE XREF: _ASN1_STRING_print+74j
		mov	cl, [esi+ebp]
		cmp	cl, 7Eh	; '~'
		jg	short loc_279
		cmp	cl, 20h	; ' '
		jge	short loc_273
		cmp	cl, 0Ah
		jz	short loc_273
		cmp	cl, 0Dh
		jnz	short loc_279

loc_273:				; CODE XREF: _ASN1_STRING_print+3Fj
					; _ASN1_STRING_print+44j
		mov	[esp+eax+64h+var_54], cl
		jmp	short loc_27E
; ---------------------------------------------------------------------------

loc_279:				; CODE XREF: _ASN1_STRING_print+3Aj
					; _ASN1_STRING_print+49j
		mov	[esp+eax+64h+var_54], 2Eh ; '.'

loc_27E:				; CODE XREF: _ASN1_STRING_print+4Fj
		inc	eax
		cmp	eax, 50h ; 'P'
		jl	short loc_299
		push	eax
		lea	eax, [esp+68h+var_54]
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_2B5
		xor	eax, eax

loc_299:				; CODE XREF: _ASN1_STRING_print+5Aj
		inc	esi
		cmp	esi, [edi]
		jl	short loc_25C
		test	eax, eax
		jle	short loc_2CA
		push	eax
		lea	eax, [esp+68h+var_54]
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_2CA

loc_2B5:				; CODE XREF: _ASN1_STRING_print+6Dj
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+54h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_2CA:				; CODE XREF: _ASN1_STRING_print+32j
					; _ASN1_STRING_print+78j ...
		pop	esi
		mov	eax, 1
		pop	ebp

loc_2D1:				; CODE XREF: _ASN1_STRING_print+23j
		mov	ecx, [esp+5Ch+var_4]
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
_ASN1_STRING_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_print
_ASN1_TIME_print proc near		; CODE XREF: _X509_print_ex+26Bp
					; _X509_print_ex+29Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [eax+4]
		cmp	ecx, 17h
		jnz	short loc_2F9
		mov	[esp+arg_4], eax
		jmp	_ASN1_UTCTIME_print
; ---------------------------------------------------------------------------

loc_2F9:				; CODE XREF: _ASN1_TIME_print+Aj
		cmp	ecx, 18h
		jnz	short loc_307
		mov	[esp+arg_4], eax
		jmp	_ASN1_GENERALIZEDTIME_print
; ---------------------------------------------------------------------------

loc_307:				; CODE XREF: _ASN1_TIME_print+18j
		push	0Eh
		push	offset ??_C@_0P@FGACABCD@Bad?5time?5value?$AA@ ; "Bad time value"
		push	[esp+8+arg_0]
		call	_BIO_write
		add	esp, 0Ch
		xor	eax, eax
		retn
_ASN1_TIME_print endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 320h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTCTIME_print
_ASN1_UTCTIME_print proc near		; CODE XREF: _ASN1_TIME_print+10j

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	edx, [eax+8]
		xor	ebx, ebx
		push	edi
		mov	edi, [eax]
		mov	[esp+1Ch+var_C], ebx
		cmp	edi, 0Ah
		jl	$err$22
		cmp	byte ptr [edx+edi-1], 5Ah ; 'Z'
		mov	eax, 1
		cmovz	ebx, eax
		xor	eax, eax
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_360:				; CODE XREF: _ASN1_UTCTIME_print+59j
		mov	cl, [edx+eax]
		cmp	cl, 39h	; '9'
		jg	$err$22
		cmp	cl, 30h	; '0'
		jl	$err$22
		inc	eax
		cmp	eax, 0Ah
		jl	short loc_360
		movsx	eax, byte ptr [edx]
		lea	esi, [eax+eax*4]
		movsx	eax, byte ptr [edx+1]
		lea	esi, [esi-108h]
		lea	esi, [eax+esi*2]
		cmp	esi, 32h ; '2'
		jge	short loc_396
		add	esi, 64h ; 'd'

loc_396:				; CODE XREF: _ASN1_UTCTIME_print+71j
		movsx	eax, byte ptr [edx+2]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+3]
		lea	ebp, [eax+ecx*2]
		lea	eax, [ebp-211h]
		cmp	eax, 0Bh
		ja	$err$22
		movsx	eax, byte ptr [edx+4]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+5]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+1Ch+var_4], eax
		movsx	eax, byte ptr [edx+6]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+7]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+1Ch+var_8], eax
		movsx	eax, byte ptr [edx+8]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [edx+9]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+1Ch+arg_4], eax
		cmp	edi, 0Ch
		jl	short loc_42A
		mov	al, [edx+0Ah]
		cmp	al, 30h	; '0'
		jl	short loc_42A
		cmp	al, 39h	; '9'
		jg	short loc_42A
		mov	dl, [edx+0Bh]
		cmp	dl, 30h	; '0'
		jl	short loc_42A
		cmp	dl, 39h	; '9'
		jg	short loc_42A
		movsx	eax, al
		lea	ecx, [eax+eax*4]
		movsx	eax, dl
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	[esp+1Ch+var_C], eax

loc_42A:				; CODE XREF: _ASN1_UTCTIME_print+DBj
					; _ASN1_UTCTIME_print+E2j ...
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		test	ebx, ebx
		mov	eax, offset ??_C@_04FIEKMBKB@?5GMT?$AA@	; " GMT"
		cmovz	eax, ecx
		push	eax
		lea	eax, [esi+76Ch]
		push	eax
		push	[esp+24h+var_C]
		push	[esp+28h+arg_4]
		push	[esp+2Ch+var_8]
		push	[esp+30h+var_4]
		push	(off_58-870h)[ebp*4]
		push	offset ??_C@_0BL@NKCHLFNC@?$CFs?5?$CF2d?5?$CF02d?3?$CF02d?3?$CF02d?5?$CFd?$CFs?$AA@ ; "%s %2d %02d:%02d:%02d %d%s"
		push	[esp+3Ch+arg_0]
		call	_BIO_printf
		add	esp, 24h
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

$err$22:				; CODE XREF: _ASN1_UTCTIME_print+20j
					; _ASN1_UTCTIME_print+46j ...
		push	0Eh
		push	offset ??_C@_0P@FGACABCD@Bad?5time?5value?$AA@ ; "Bad time value"
		push	[esp+24h+arg_0]
		call	_BIO_write
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_ASN1_UTCTIME_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 498h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_print
_X509_NAME_print proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	0
		push	0
		push	[esp+10h+arg_4]
		mov	[esp+14h+var_8], 0
		call	_X509_NAME_oneline
		add	esp, 0Ch
		mov	[esp+8+var_4], eax
		test	eax, eax
		jnz	short loc_4C6
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4C6:				; CODE XREF: _X509_NAME_print+28j
		cmp	byte ptr [eax],	0
		jnz	short loc_4DD
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, 1
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4DD:				; CODE XREF: _X509_NAME_print+31j
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	edi
		lea	edi, [eax+1]
		mov	ebx, edi

loc_4EA:				; CODE XREF: _X509_NAME_print+B3j
		mov	cl, [edi]
		cmp	cl, 2Fh	; '/'
		jnz	short loc_511
		mov	al, [edi+1]
		cmp	al, 41h	; 'A'
		jl	short loc_511
		cmp	al, 5Ah	; 'Z'
		jg	short loc_511
		mov	al, [edi+2]
		cmp	al, 3Dh	; '='
		jz	short loc_515
		cmp	al, 41h	; 'A'
		jl	short loc_511
		cmp	al, 5Ah	; 'Z'
		jg	short loc_511
		cmp	byte ptr [edi+3], 3Dh ;	'='
		jz	short loc_515

loc_511:				; CODE XREF: _X509_NAME_print+57j
					; _X509_NAME_print+5Ej	...
		test	cl, cl
		jnz	short loc_54A

loc_515:				; CODE XREF: _X509_NAME_print+69j
					; _X509_NAME_print+77j
		mov	esi, edi
		sub	esi, ebx
		push	esi
		push	ebx
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	short $err$29
		cmp	byte ptr [edi],	0
		lea	ebx, [edi+1]
		jz	short loc_54D
		push	2
		push	offset ??_C@_02KEGNLNML@?0?5?$AA@ ; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$29
		cmp	byte ptr [edi],	0
		jz	short loc_54D

loc_54A:				; CODE XREF: _X509_NAME_print+7Bj
		inc	edi
		jmp	short loc_4EA
; ---------------------------------------------------------------------------

loc_54D:				; CODE XREF: _X509_NAME_print+96j
					; _X509_NAME_print+B0j
		mov	[esp+18h+var_8], 1
		jmp	short loc_56F
; ---------------------------------------------------------------------------

$err$29:				; CODE XREF: _X509_NAME_print+8Ej
					; _X509_NAME_print+ABj
		push	228h
		push	offset ??_C@_0BH@JKAMAPCI@?4?2crypto?2asn1?2t_x509?4c?$AA@ ; ".\\crypto\\asn1\\t_x509.c"
		push	7
		push	75h ; 'u'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_56F:				; CODE XREF: _X509_NAME_print+BDj
		push	[esp+18h+var_4]
		call	_CRYPTO_free
		mov	eax, [esp+1Ch+var_8]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_X509_NAME_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 588h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ocspid_print
_X509_ocspid_print proc	near

var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 1Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+24h+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+2Ch+arg_0]
		push	offset ??_C@_0BM@LFJGBJLH@?5?5?5?5?5?5?5?5Subject?5OCSP?5hash?3?5?$AA@ ; "	  Subject OCSP hash: "
		push	edi
		call	_BIO_printf
		add	esp, 8
		test	eax, eax
		jle	loc_6DA
		mov	eax, [ebp+0]
		push	0
		push	dword ptr [eax+14h]
		call	_i2d_X509_NAME
		push	118h
		mov	esi, eax
		push	offset ??_C@_0BH@JKAMAPCI@?4?2crypto?2asn1?2t_x509?4c?$AA@ ; ".\\crypto\\asn1\\t_x509.c"
		push	esi
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 14h
		mov	[esp+2Ch+var_1C], ebx
		test	ebx, ebx
		jz	loc_6DA
		mov	ecx, [ebp+0]
		lea	eax, [esp+2Ch+var_1C]
		push	eax
		push	dword ptr [ecx+14h]
		call	_i2d_X509_NAME
		add	esp, 8
		push	0
		call	_EVP_sha1
		push	eax
		push	0
		lea	eax, [esp+38h+var_18]
		push	eax
		push	esi
		push	ebx
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	$err$28
		xor	esi, esi
		nop	dword ptr [eax]

loc_628:				; CODE XREF: _X509_ocspid_print+C0j
		movzx	eax, [esp+esi+2Ch+var_18]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	$err$28
		inc	esi
		cmp	esi, 14h
		jl	short loc_628
		push	ebx
		call	_CRYPTO_free
		push	offset ??_C@_0CA@LJFFMFJO@?6?5?5?5?5?5?5?5?5Public?5key?5OCSP?5hash?3?5?$AA@ ; "\n	  Public key OCSP hash:	"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_6DA
		mov	eax, [ebp+0]
		push	0
		mov	eax, [eax+18h]
		mov	esi, [eax+4]
		call	_EVP_sha1
		push	eax
		push	0
		lea	eax, [esp+38h+var_18]
		push	eax
		push	dword ptr [esi]
		push	dword ptr [esi+8]
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	short loc_6DA
		xor	esi, esi

loc_68D:				; CODE XREF: _X509_ocspid_print+121j
		movzx	eax, [esp+esi+2Ch+var_18]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_6DA
		inc	esi
		cmp	esi, 14h
		jl	short loc_68D
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_printf
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

$err$28:				; CODE XREF: _X509_ocspid_print+95j
					; _X509_ocspid_print+B6j
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_6DA:				; CODE XREF: _X509_ocspid_print+31j
					; _X509_ocspid_print+61j ...
		mov	ecx, [esp+2Ch+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
_X509_ocspid_print endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_print
_X509_print	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_X509_print_ex
		add	esp, 10h
		retn
_X509_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 708h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_print_ex
_X509_print_ex	proc near		; CODE XREF: _X509_print+Cp
					; _X509_print_ex_fp+4Ap ...

var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		mov	edx, [esp+8+arg_8]
		xor	ecx, ecx
		mov	eax, edx
		mov	[esp+8+var_5], 20h ; ' '
		and	eax, 0F0000h
		cmp	eax, 40000h
		jnz	short loc_735
		mov	[esp+8+var_5], 0Ah
		mov	ecx, 0Ch

loc_735:				; CODE XREF: _X509_print_ex+21j
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	edx, edx
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		mov	eax, 10h
		push	esi
		mov	esi, [esp+14h+arg_0]
		cmovz	ecx, eax
		mov	[esp+14h+var_4], ecx
		push	edi
		mov	edi, [ebp+0]
		mov	[esp+18h+arg_4], edi
		test	bl, 1
		jnz	short loc_78F
		push	0Dh
		push	offset ??_C@_0O@OBKKCMDE@Certificate?3?6?$AA@ ;	"Certificate:\n"
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	0Ah
		push	offset ??_C@_0L@JAJPBNB@?5?5?5?5Data?3?6?$AA@ ;	"    Data:\n"
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0

loc_78F:				; CODE XREF: _X509_print_ex+55j
		test	bl, 2
		jnz	short loc_7BC
		mov	eax, [ebp+0]
		push	dword ptr [eax]
		call	_ASN1_INTEGER_get
		push	eax
		inc	eax
		push	eax
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	offset ??_C@_0BJ@GHEPBFNG@?$CF8sVersion?3?5?$CFlu?5?$CI0x?$CFlx?$CJ?6?$AA@ ; "%8sVersion: %lu (0x%lx)\n"
		push	esi
		call	_BIO_printf
		add	esp, 18h
		test	eax, eax
		jle	loc_BA0

loc_7BC:				; CODE XREF: _X509_print_ex+8Aj
		test	bl, 4
		jnz	loc_8BA
		push	16h
		push	offset ??_C@_0BH@EDANBKOA@?5?5?5?5?5?5?5?5Serial?5Number?3?$AA@	; "	   Serial Number:"
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	ebp
		call	_X509_get_serialNumber
		mov	edi, eax
		add	esp, 4
		mov	eax, [edi]
		cmp	eax, 4
		jl	loc_87C
		jnz	short loc_801
		mov	eax, [edi+8]
		test	byte ptr [eax],	80h
		jz	loc_87C

loc_801:				; CODE XREF: _X509_print_ex+EBj
		cmp	dword ptr [edi+4], 102h
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		mov	eax, offset ??_C@_0M@IBLDKCHK@?5?$CINegative?$CJ?$AA@ ;	" (Negative)"
		cmovnz	eax, ecx
		push	eax
		push	ecx
		push	offset ??_C@_07MBEBLEMH@?6?$CF12s?$CFs?$AA@ ; "\n%12s%s"
		push	esi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_BA0
		mov	edx, [edi]
		xor	ecx, ecx
		test	edx, edx
		jle	loc_8B6

loc_839:				; CODE XREF: _X509_print_ex+170j
		lea	eax, [ecx+1]
		mov	[esp+18h+arg_C], eax
		mov	eax, 3Ah ; ':'
		cmp	[esp+18h+arg_C], edx
		mov	edx, 0Ah
		cmovz	eax, edx
		push	eax
		mov	eax, [edi+8]
		movzx	eax, byte ptr [eax+ecx]
		push	eax
		push	offset ??_C@_06POFAOOON@?$CF02x?$CFc?$AA@ ; "%02x%c"
		push	esi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_BA0
		mov	ecx, [esp+18h+arg_C]
		mov	edx, [edi]
		cmp	ecx, edx
		jl	short loc_839
		jmp	short loc_8B6
; ---------------------------------------------------------------------------

loc_87C:				; CODE XREF: _X509_print_ex+E5j
					; _X509_print_ex+F3j
		push	edi
		call	_ASN1_INTEGER_get
		add	esp, 4
		cmp	dword ptr [edi+4], 102h
		jnz	short loc_897
		neg	eax
		mov	ecx, offset ??_C@_01JOAMLHOP@?9?$AA@ ; `string'
		jmp	short loc_89C
; ---------------------------------------------------------------------------

loc_897:				; CODE XREF: _X509_print_ex+184j
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'

loc_89C:				; CODE XREF: _X509_print_ex+18Dj
		push	eax
		push	ecx
		push	eax
		push	ecx
		push	offset ??_C@_0BC@CFJFFMBJ@?5?$CFs?$CFlu?5?$CI?$CFs0x?$CFlx?$CJ?6?$AA@ ;	" %s%lu	(%s0x%lx)\n"
		push	esi
		call	_BIO_printf
		add	esp, 18h
		test	eax, eax
		jle	loc_BA0

loc_8B6:				; CODE XREF: _X509_print_ex+12Bj
					; _X509_print_ex+172j
		mov	edi, [esp+18h+arg_4]

loc_8BA:				; CODE XREF: _X509_print_ex+B7j
		test	bl, 8
		jnz	short loc_8D5
		push	0
		push	dword ptr [edi+8]
		push	esi
		call	_X509_signature_print
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0

loc_8D5:				; CODE XREF: _X509_print_ex+1B5j
		test	bl, 10h
		jnz	short loc_931
		movsx	eax, [esp+18h+var_5]
		push	eax
		push	offset ??_C@_0BC@JHKJKLPA@?5?5?5?5?5?5?5?5Issuer?3?$CFc?$AA@ ; "	Issuer:%c"
		push	esi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	[esp+18h+arg_8]
		push	[esp+1Ch+var_4]
		push	ebp
		call	_X509_get_issuer_name
		add	esp, 4
		push	eax
		push	esi
		call	_X509_NAME_print_ex
		add	esp, 10h
		test	eax, eax
		js	loc_BA0
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0

loc_931:				; CODE XREF: _X509_print_ex+1D0j
		test	bl, 20h
		jnz	loc_9CD
		push	11h
		push	offset ??_C@_0BC@LAOBJDFN@?5?5?5?5?5?5?5?5Validity?6?$AA@ ; "	     Validity\n"
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	18h
		push	offset ??_C@_0BJ@OELJGAM@?5?5?5?5?5?5?5?5?5?5?5?5Not?5Before?3?5?$AA@ ;	"	     Not Before: "
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		push	dword ptr [eax]
		push	esi
		call	_ASN1_TIME_print
		add	esp, 8
		test	eax, eax
		jz	loc_BA0
		push	19h
		push	offset ??_C@_0BK@ECBJHNMK@?6?5?5?5?5?5?5?5?5?5?5?5?5Not?5After?5?3?5?$AA@ ; "\n		   Not After : "
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		push	dword ptr [eax+4]
		push	esi
		call	_ASN1_TIME_print
		add	esp, 8
		test	eax, eax
		jz	loc_BA0
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0

loc_9CD:				; CODE XREF: _X509_print_ex+22Cj
		test	bl, 40h
		jnz	short loc_A29
		movsx	eax, [esp+18h+var_5]
		push	eax
		push	offset ??_C@_0BD@PPLJHLMD@?5?5?5?5?5?5?5?5Subject?3?$CFc?$AA@ ;	"	 Subject:%c"
		push	esi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	[esp+18h+arg_8]
		push	[esp+1Ch+var_4]
		push	ebp
		call	_X509_get_subject_name
		add	esp, 4
		push	eax
		push	esi
		call	_X509_NAME_print_ex
		add	esp, 10h
		test	eax, eax
		js	loc_BA0
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0

loc_A29:				; CODE XREF: _X509_print_ex+2C8j
		test	bl, bl
		js	loc_AD0
		push	21h ; '!'
		push	offset ??_C@_0CC@MHFIINFH@?5?5?5?5?5?5?5?5Subject?5Public?5Key?5Info?3@	; "	   Subject Public Key Info:\n"
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	offset ??_C@_0BL@FFNOEEIC@?$CF12sPublic?5Key?5Algorithm?3?5?$AA@ ; "%12sPublic Key Algorithm: "
		push	esi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		mov	eax, [edi+18h]
		mov	eax, [eax]
		push	dword ptr [eax]
		push	esi
		call	_i2a_ASN1_OBJECT
		add	esp, 8
		test	eax, eax
		jle	loc_BA0
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_BA0
		push	ebp
		call	_X509_get_pubkey
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_ABC
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	offset ??_C@_0BP@GNNOMHLK@?$CF12sUnable?5to?5load?5Public?5Key?6?$AA@ ;	"%12sUnable to load Public Key\n"
		push	esi
		call	_BIO_printf
		push	esi
		call	_ERR_print_errors
		add	esp, 10h
		jmp	short loc_AD0
; ---------------------------------------------------------------------------

loc_ABC:				; CODE XREF: _X509_print_ex+397j
		push	0
		push	10h
		push	edi
		push	esi
		call	_EVP_PKEY_print_public
		push	edi
		call	_EVP_PKEY_free
		add	esp, 14h

loc_AD0:				; CODE XREF: _X509_print_ex+323j
					; _X509_print_ex+3B2j
		mov	edi, [esp+18h+arg_4]
		test	ebx, 1000h
		jnz	short loc_B42
		cmp	dword ptr [edi+1Ch], 0
		jz	short loc_B13
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	offset ??_C@_0BG@ENCICHMG@?$CF8sIssuer?5Unique?5ID?3?5?$AA@ ; "%8sIssuer Unique	ID: "
		push	esi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	loc_BA0
		push	0Ch
		push	dword ptr [edi+1Ch]
		push	esi
		call	_X509_signature_dump
		add	esp, 0Ch
		test	eax, eax
		jz	loc_BA0

loc_B13:				; CODE XREF: _X509_print_ex+3D8j
		cmp	dword ptr [edi+20h], 0
		jz	short loc_B42
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	offset ??_C@_0BH@LLKBPDKJ@?$CF8sSubject?5Unique?5ID?3?5?$AA@ ; "%8sSubject Unique ID: "
		push	esi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_BA0
		push	0Ch
		push	dword ptr [edi+20h]
		push	esi
		call	_X509_signature_dump
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_BA0

loc_B42:				; CODE XREF: _X509_print_ex+3D2j
					; _X509_print_ex+40Fj
		test	ebx, 100h
		jnz	short loc_B5E
		push	8
		push	ebx
		push	dword ptr [edi+24h]
		push	offset ??_C@_0BC@DLHPBBML@X509v3?5extensions?$AA@ ; "X509v3 extensions"
		push	esi
		call	_X509V3_extensions_print
		add	esp, 14h

loc_B5E:				; CODE XREF: _X509_print_ex+440j
		test	ebx, 200h
		jnz	short loc_B79
		push	dword ptr [ebp+8]
		push	dword ptr [ebp+4]
		push	esi
		call	_X509_signature_print
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_BA0

loc_B79:				; CODE XREF: _X509_print_ex+45Cj
		test	ebx, 400h
		jnz	short loc_B93
		push	0
		push	dword ptr [ebp+64h]
		push	esi
		call	_X509_CERT_AUX_print
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_BA0

loc_B93:				; CODE XREF: _X509_print_ex+477j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_BA0:				; CODE XREF: _X509_print_ex+69j
					; _X509_print_ex+81j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
_X509_print_ex	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_print_ex_fp
_X509_print_ex_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_BDA
		push	5Ah ; 'Z'
		push	offset ??_C@_0BH@JKAMAPCI@?4?2crypto?2asn1?2t_x509?4c?$AA@ ; ".\\crypto\\asn1\\t_x509.c"
		push	7
		push	76h ; 'v'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_BDA:				; CODE XREF: _X509_print_ex_fp+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	edi
		call	_X509_print_ex
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 24h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_X509_print_ex_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_print_fp
_X509_print_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_C3A
		push	5Ah ; 'Z'
		push	offset ??_C@_0BH@JKAMAPCI@?4?2crypto?2asn1?2t_x509?4c?$AA@ ; ".\\crypto\\asn1\\t_x509.c"
		push	7
		push	76h ; 'v'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_C3A:				; CODE XREF: _X509_print_fp+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	0
		push	0
		push	[esp+20h+arg_4]
		push	edi
		call	_X509_print_ex
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 24h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_X509_print_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_signature_dump
_X509_signature_dump proc near		; CODE XREF: _X509_print_ex+3FBp
					; _X509_print_ex+42Ep ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	ebx, [eax]
		xor	esi, esi
		mov	ecx, [eax+8]
		mov	[esp+10h+arg_4], ecx
		push	edi
		mov	edi, [esp+14h+arg_0]
		test	ebx, ebx
		jle	loc_D1E
		mov	ebp, [esp+14h+arg_8]
		mov	eax, 1
		sub	eax, ecx
		mov	[esp+14h+var_4], eax
		nop	dword ptr [eax+eax+00000000h]

loc_CA8:				; CODE XREF: _X509_signature_dump+B4j
		mov	eax, 38E38E39h
		imul	esi
		sar	edx, 2
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		lea	ecx, [eax+eax*8]
		mov	eax, esi
		add	ecx, ecx
		sub	eax, ecx
		jnz	short loc_CE7
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_D3A
		push	ebp
		push	ebp
		push	edi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_D3A

loc_CE7:				; CODE XREF: _X509_signature_dump+5Aj
		mov	edx, [esp+14h+arg_4]
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		mov	eax, [esp+14h+var_4]
		add	edx, esi
		add	eax, edx
		cmp	eax, ebx
		mov	eax, offset ??_C@_01JLIPDDHJ@?3?$AA@ ; ":"
		cmovnz	ecx, eax
		movzx	eax, byte ptr [edx]
		push	ecx
		push	eax
		push	offset ??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@ ; "%02x%s"
		push	edi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	short loc_D3A
		inc	esi
		cmp	esi, ebx
		jl	short loc_CA8

loc_D1E:				; CODE XREF: _X509_signature_dump+23j
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		dec	eax
		neg	eax
		sbb	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		inc	eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_D3A:				; CODE XREF: _X509_signature_dump+6Ej
					; _X509_signature_dump+7Dj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
_X509_signature_dump endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_signature_print
_X509_signature_print proc near		; CODE XREF: _X509_print_ex+1BDp
					; _X509_print_ex+465p

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	offset ??_C@_0BK@HDBNKAEJ@?5?5?5?5Signature?5Algorithm?3?5?$AA@	; "    Signature Algorithm: "
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jg	short loc_D6C
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_D6C:				; CODE XREF: _X509_signature_print+1Fj
		push	edi
		mov	edi, [esp+10h+arg_4]
		push	dword ptr [edi]
		push	esi
		call	_i2a_ASN1_OBJECT
		add	esp, 8
		test	eax, eax
		jg	short loc_D88
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_D88:				; CODE XREF: _X509_signature_print+3Aj
		push	dword ptr [edi]
		call	_OBJ_obj2nid
		add	esp, 4
		test	eax, eax
		jz	short loc_DDB
		lea	ecx, [esp+10h+var_8]
		push	ecx
		lea	ecx, [esp+14h+var_4]
		push	ecx
		push	eax
		call	_OBJ_find_sigid_algs
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_DDB
		push	[esp+10h+var_8]
		push	0
		call	_EVP_PKEY_asn1_find
		add	esp, 8
		test	eax, eax
		jz	short loc_DDB
		mov	eax, [eax+50h]
		test	eax, eax
		jz	short loc_DDB
		push	0
		push	9
		push	[esp+18h+arg_8]
		push	edi
		push	esi
		call	eax
		add	esp, 14h
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_DDB:				; CODE XREF: _X509_signature_print+50j
					; _X509_signature_print+67j ...
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jz	short loc_DF5
		push	9
		push	eax
		push	esi
		call	_X509_signature_dump
		add	esp, 0Ch
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_DF5:				; CODE XREF: _X509_signature_print+9Dj
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		mov	eax, ecx
		pop	esi
		add	esp, 8
		retn
_X509_signature_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E14h
; COMDAT (pick any)
		public ??_C@_0BH@JKAMAPCI@?4?2crypto?2asn1?2t_x509?4c?$AA@
; `string'
??_C@_0BH@JKAMAPCI@?4?2crypto?2asn1?2t_x509?4c?$AA@ db '.\crypto\asn1\t_x509.c',0
					; DATA XREF: _X509_NAME_print+C4o
					; _X509_ocspid_print+4Bo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E2Ch
; COMDAT (pick any)
		public ??_C@_0O@OBKKCMDE@Certificate?3?6?$AA@
; `string'
??_C@_0O@OBKKCMDE@Certificate?3?6?$AA@ db 'Certificate:',0Ah,0
					; DATA XREF: _X509_print_ex+59o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E3Ch
; COMDAT (pick any)
		public ??_C@_0L@JAJPBNB@?5?5?5?5Data?3?6?$AA@
; `string'
??_C@_0L@JAJPBNB@?5?5?5?5Data?3?6?$AA@ db '    Data:',0Ah,0 ; DATA XREF: _X509_print_ex+71o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0E48h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _ASN1_GENERALIZEDTIME_print+159o
					; _ASN1_UTCTIME_print:loc_42Ao	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4Ch
; COMDAT (pick any)
		public ??_C@_0BJ@GHEPBFNG@?$CF8sVersion?3?5?$CFlu?5?$CI0x?$CFlx?$CJ?6?$AA@
; `string'
??_C@_0BJ@GHEPBFNG@?$CF8sVersion?3?5?$CFlu?5?$CI0x?$CFlx?$CJ?6?$AA@ db '%8sVersion: %lu (0x%lx)',0Ah,0
					; DATA XREF: _X509_print_ex+9Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E68h
; COMDAT (pick any)
		public ??_C@_0BH@EDANBKOA@?5?5?5?5?5?5?5?5Serial?5Number?3?$AA@
; `string'
??_C@_0BH@EDANBKOA@?5?5?5?5?5?5?5?5Serial?5Number?3?$AA@ db '        Serial Number:',0
					; DATA XREF: _X509_print_ex+BFo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E80h
; COMDAT (pick any)
		public ??_C@_01JOAMLHOP@?9?$AA@
; `string'
??_C@_01JOAMLHOP@?9?$AA@ db 2Dh, 0	; DATA XREF: _X509_print_ex+188o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E84h
; COMDAT (pick any)
		public ??_C@_0BC@CFJFFMBJ@?5?$CFs?$CFlu?5?$CI?$CFs0x?$CFlx?$CJ?6?$AA@
; `string'
??_C@_0BC@CFJFFMBJ@?5?$CFs?$CFlu?5?$CI?$CFs0x?$CFlx?$CJ?6?$AA@ db ' %s%lu (%s0x%lx)',0Ah,0
					; DATA XREF: _X509_print_ex+198o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E98h
; COMDAT (pick any)
		public ??_C@_0M@IBLDKCHK@?5?$CINegative?$CJ?$AA@
; `string'
??_C@_0M@IBLDKCHK@?5?$CINegative?$CJ?$AA@ db ' (Negative)',0
					; DATA XREF: _X509_print_ex+105o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EA4h
; COMDAT (pick any)
		public ??_C@_07MBEBLEMH@?6?$CF12s?$CFs?$AA@
; `string'
??_C@_07MBEBLEMH@?6?$CF12s?$CFs?$AA@ db	0Ah ; DATA XREF: _X509_print_ex+10Fo
		db '%12s%s',0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EACh
; COMDAT (pick any)
		public ??_C@_06POFAOOON@?$CF02x?$CFc?$AA@
; `string'
??_C@_06POFAOOON@?$CF02x?$CFc?$AA@ db '%02x%c',0 ; DATA XREF: _X509_print_ex+152o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EB4h
; COMDAT (pick any)
		public ??_C@_0BC@JHKJKLPA@?5?5?5?5?5?5?5?5Issuer?3?$CFc?$AA@
; `string'
??_C@_0BC@JHKJKLPA@?5?5?5?5?5?5?5?5Issuer?3?$CFc?$AA@ db '        Issuer:%c',0
					; DATA XREF: _X509_print_ex+1D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EC8h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _X509_ocspid_print+123o
					; _X509_print_ex+213o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECCh
; COMDAT (pick any)
		public ??_C@_0BC@LAOBJDFN@?5?5?5?5?5?5?5?5Validity?6?$AA@
; `string'
??_C@_0BC@LAOBJDFN@?5?5?5?5?5?5?5?5Validity?6?$AA@ db '        Validity',0Ah,0
					; DATA XREF: _X509_print_ex+234o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EE0h
; COMDAT (pick any)
		public ??_C@_0BJ@OELJGAM@?5?5?5?5?5?5?5?5?5?5?5?5Not?5Before?3?5?$AA@
; `string'
??_C@_0BJ@OELJGAM@?5?5?5?5?5?5?5?5?5?5?5?5Not?5Before?3?5?$AA@ db '            Not Before: ',0
					; DATA XREF: _X509_print_ex+24Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EFCh
; COMDAT (pick any)
		public ??_C@_0BK@ECBJHNMK@?6?5?5?5?5?5?5?5?5?5?5?5?5Not?5After?5?3?5?$AA@
; `string'
??_C@_0BK@ECBJHNMK@?6?5?5?5?5?5?5?5?5?5?5?5?5Not?5After?5?3?5?$AA@ db 0Ah
					; DATA XREF: _X509_print_ex+27Do
		db '            Not After : ',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F18h
; COMDAT (pick any)
		public ??_C@_0BD@PPLJHLMD@?5?5?5?5?5?5?5?5Subject?3?$CFc?$AA@
; `string'
??_C@_0BD@PPLJHLMD@?5?5?5?5?5?5?5?5Subject?3?$CFc?$AA@ db '        Subject:%c',0
					; DATA XREF: _X509_print_ex+2D0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F2Ch
; COMDAT (pick any)
		public ??_C@_0CC@MHFIINFH@?5?5?5?5?5?5?5?5Subject?5Public?5Key?5Info?3@
; `string'
??_C@_0CC@MHFIINFH@?5?5?5?5?5?5?5?5Subject?5Public?5Key?5Info?3@ db '        Subject Public Key Info:',0Ah,0
					; DATA XREF: _X509_print_ex+32Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F50h
; COMDAT (pick any)
		public ??_C@_0BL@FFNOEEIC@?$CF12sPublic?5Key?5Algorithm?3?5?$AA@
; `string'
??_C@_0BL@FFNOEEIC@?$CF12sPublic?5Key?5Algorithm?3?5?$AA@ db '%12sPublic Key Algorithm: ',0
					; DATA XREF: _X509_print_ex+346o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F6Ch
; COMDAT (pick any)
		public ??_C@_0BP@GNNOMHLK@?$CF12sUnable?5to?5load?5Public?5Key?6?$AA@
; `string'
??_C@_0BP@GNNOMHLK@?$CF12sUnable?5to?5load?5Public?5Key?6?$AA@ db '%12sUnable to load Public Key',0Ah,0
					; DATA XREF: _X509_print_ex+39Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8Ch
; COMDAT (pick any)
		public ??_C@_0BG@ENCICHMG@?$CF8sIssuer?5Unique?5ID?3?5?$AA@
; `string'
??_C@_0BG@ENCICHMG@?$CF8sIssuer?5Unique?5ID?3?5?$AA@ db	'%8sIssuer Unique ID: ',0
					; DATA XREF: _X509_print_ex+3DFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FA4h
; COMDAT (pick any)
		public ??_C@_0BH@LLKBPDKJ@?$CF8sSubject?5Unique?5ID?3?5?$AA@
; `string'
??_C@_0BH@LLKBPDKJ@?$CF8sSubject?5Unique?5ID?3?5?$AA@ db '%8sSubject Unique ID: ',0
					; DATA XREF: _X509_print_ex+416o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FBCh
; COMDAT (pick any)
		public ??_C@_0BC@DLHPBBML@X509v3?5extensions?$AA@
; `string'
??_C@_0BC@DLHPBBML@X509v3?5extensions?$AA@ db 'X509v3 extensions',0
					; DATA XREF: _X509_print_ex+448o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FD0h
; COMDAT (pick any)
		public ??_C@_0BM@LFJGBJLH@?5?5?5?5?5?5?5?5Subject?5OCSP?5hash?3?5?$AA@
; `string'
??_C@_0BM@LFJGBJLH@?5?5?5?5?5?5?5?5Subject?5OCSP?5hash?3?5?$AA@	db '        Subject OCSP hash: ',0
					; DATA XREF: _X509_ocspid_print+21o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FECh
; COMDAT (pick any)
		public ??_C@_04JFFKLGJF@?$CF02X?$AA@
; `string'
??_C@_04JFFKLGJF@?$CF02X?$AA@ db '%02X',0 ; DATA XREF: _X509_ocspid_print+A6o
					; _X509_ocspid_print+10Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FF4h
; COMDAT (pick any)
		public ??_C@_0CA@LJFFMFJO@?6?5?5?5?5?5?5?5?5Public?5key?5OCSP?5hash?3?5?$AA@
; `string'
??_C@_0CA@LJFFMFJO@?6?5?5?5?5?5?5?5?5Public?5key?5OCSP?5hash?3?5?$AA@ db 0Ah
					; DATA XREF: _X509_ocspid_print+C8o
		db '        Public key OCSP hash: ',0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1014h
; COMDAT (pick any)
		public ??_C@_01JLIPDDHJ@?3?$AA@
; `string'
??_C@_01JLIPDDHJ@?3?$AA@ db ':',0       ; DATA XREF: _X509_signature_dump+92o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1018h
; COMDAT (pick any)
		public ??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@
; `string'
??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@ db '%02x%s',0 ; DATA XREF: _X509_signature_dump+9Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1020h
; COMDAT (pick any)
		public ??_C@_0BK@HDBNKAEJ@?5?5?5?5Signature?5Algorithm?3?5?$AA@
; `string'
??_C@_0BK@HDBNKAEJ@?5?5?5?5Signature?5Algorithm?3?5?$AA@ db '    Signature Algorithm: ',0
					; DATA XREF: _X509_signature_print+Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 103Ch
; COMDAT (pick any)
		public ??_C@_0P@FGACABCD@Bad?5time?5value?$AA@
; `string'
??_C@_0P@FGACABCD@Bad?5time?5value?$AA@	db 'Bad time value',0
					; DATA XREF: _ASN1_GENERALIZEDTIME_print+1ABo
					; _ASN1_TIME_print+25o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 104Ch
; COMDAT (pick any)
		public ??_C@_04FIEKMBKB@?5GMT?$AA@
; `string'
??_C@_04FIEKMBKB@?5GMT?$AA@ db ' GMT',0 ; DATA XREF: _ASN1_GENERALIZEDTIME_print+15Eo
					; _ASN1_UTCTIME_print+111o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1054h
; COMDAT (pick any)
		public ??_C@_0BP@OGIOIJMK@?$CFs?5?$CF2d?5?$CF02d?3?$CF02d?3?$CF02d?$CF?4?$CKs?5?$CFd?$CFs?$AA@
; `string'
??_C@_0BP@OGIOIJMK@?$CFs?5?$CF2d?5?$CF02d?3?$CF02d?3?$CF02d?$CF?4?$CKs?5?$CFd?$CFs?$AA@	db '%s %2d %02d:%02d:%02d%.*s %d%s',0
					; DATA XREF: _ASN1_GENERALIZEDTIME_print+188o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1074h
; COMDAT (pick any)
		public ??_C@_0BL@NKCHLFNC@?$CFs?5?$CF2d?5?$CF02d?3?$CF02d?3?$CF02d?5?$CFd?$CFs?$AA@
; `string'
??_C@_0BL@NKCHLFNC@?$CFs?5?$CF2d?5?$CF02d?3?$CF02d?3?$CF02d?5?$CFd?$CFs?$AA@ db	'%s %2d %02d:%02d:%02d %d%s',0
					; DATA XREF: _ASN1_UTCTIME_print+138o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1090h
; COMDAT (pick any)
		public ??_C@_02KEGNLNML@?0?5?$AA@
; `string'
??_C@_02KEGNLNML@?0?5?$AA@ db 2Ch, 20h,	0 ; DATA XREF: _X509_NAME_print+9Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _X509_ocspid_print+51p
		extrn _CRYPTO_free:near	; CODE XREF: _X509_NAME_print+34p
					; _X509_NAME_print+DBp	...
		extrn _BIO_s_file:near	; CODE XREF: _X509_print_ex_fp+1p
					; _X509_print_fp+1p
		extrn _BIO_new:near	; CODE XREF: _X509_print_ex_fp+7p
					; _X509_print_fp+7p
		extrn _BIO_free:near	; CODE XREF: _X509_print_ex_fp+52p
					; _X509_print_fp+4Ep
		extrn _BIO_write:near	; CODE XREF: _ASN1_GENERALIZEDTIME_print+1B4p
					; _ASN1_STRING_print+63p ...
		extrn _BIO_puts:near	; CODE XREF: _X509_print_ex+37Ap
					; _X509_signature_print+15p ...
		extrn _BIO_indent:near	; CODE XREF: _X509_signature_dump+73p
		extrn _BIO_ctrl:near	; CODE XREF: _X509_print_ex_fp+38p
					; _X509_print_fp+38p
		extrn _BIO_printf:near	; CODE XREF: _ASN1_GENERALIZEDTIME_print+191p
					; _ASN1_UTCTIME_print+141p ...
		extrn _ERR_put_error:near ; CODE XREF: _X509_NAME_print+CFp
					; _X509_print_ex_fp+22p ...
		extrn _ERR_print_errors:near ; CODE XREF: _X509_print_ex+3AAp
		extrn _i2a_ASN1_OBJECT:near ; CODE XREF: _X509_print_ex+364p
					; _X509_signature_print+30p
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _X509_print_ex+91p
					; _X509_print_ex+175p
		extrn _OBJ_obj2nid:near	; CODE XREF: _X509_signature_print+46p
		extrn _OBJ_find_sigid_algs:near	; CODE XREF: _X509_signature_print+5Dp
		extrn _EVP_Digest:near	; CODE XREF: _X509_ocspid_print+8Bp
					; _X509_ocspid_print+F7p
		extrn _EVP_sha1:near	; CODE XREF: _X509_ocspid_print+7Cp
					; _X509_ocspid_print+E5p
		extrn _EVP_PKEY_free:near ; CODE XREF: _X509_print_ex+3C0p
		extrn _EVP_PKEY_print_public:near ; CODE XREF: _X509_print_ex+3BAp
		extrn _EVP_PKEY_asn1_find:near ; CODE XREF: _X509_signature_print+6Fp
		extrn _i2d_X509_NAME:near ; CODE XREF: _X509_ocspid_print+3Fp
					; _X509_ocspid_print+72p
		extrn _X509_NAME_oneline:near ;	CODE XREF: _X509_NAME_print+1Ap
		extrn _X509_get_serialNumber:near ; CODE XREF: _X509_print_ex+D6p
		extrn _X509_get_issuer_name:near ; CODE	XREF: _X509_print_ex+1F7p
		extrn _X509_get_subject_name:near ; CODE XREF: _X509_print_ex+2EFp
		extrn _X509_get_pubkey:near ; CODE XREF: _X509_print_ex+38Bp
		extrn _X509_NAME_print_ex:near ; CODE XREF: _X509_print_ex+201p
					; _X509_print_ex+2F9p
		extrn _X509_CERT_AUX_print:near	; CODE XREF: _X509_print_ex+47Fp
		extrn _X509V3_extensions_print:near ; CODE XREF: _X509_print_ex+44Ep
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ASN1_STRING_print+99p
					; _ASN1_STRING_print+B1p ...
		extrn __chkstk:near	; CODE XREF: _ASN1_GENERALIZEDTIME_print+5p
					; _ASN1_STRING_print+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _ASN1_STRING_print+Ar
					; _X509_ocspid_print+Ar


		end
