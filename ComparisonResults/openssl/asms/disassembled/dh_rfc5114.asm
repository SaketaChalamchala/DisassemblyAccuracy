;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	21CD689DAE5785973D30BDB1FBE8FEDF
; Input	CRC32 :	2A012046

; File Name   :	C:\compspace\Diff\openssl\obj\dh_rfc5114.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_dh1024_160_p	dd 2E4A4371h, 0DF1FB2BCh, 6D4DA708h, 0E68CFDA7h, 365C1A65h
					; DATA XREF: .rdata:`DH_get_1024_160'::`2'::_bignum_dh1024_160_po
		dd 45BF37DFh, 0DC8B4BDh, 0A151AF5Fh, 0F55BCCC0h, 0FAA31A4Fh
		dd 0E5644738h, 4EFFD6FAh, 219A7372h, 98488E9Ch,	90C4BD70h
		dd 0ACCBDD7Dh, 0D49B83BFh, 24975C3Ch, 0A9061123h, 13ECB4AEh
		dd 2EE652C0h, 9838EF1Eh, 75A23D18h, 6073E286h, 52D23B61h
		dd 9A6A9DCAh, 0FB06A3C6h, 52C99FBCh, 0AE5D54ECh, 0DE92DE5Eh
		dd 0A080E01Dh, 0B10B8F96h
_dh1024_160_g	dd 22B3B2E5h, 855E6EEBh, 0F97C2A24h, 858F4DCEh,	18D08BC8h
					; DATA XREF: .rdata:`DH_get_1024_160'::`2'::_bignum_dh1024_160_go
		dd 2D779D59h, 8E73AFA3h, 0D662A4D1h, 69B6A28Ah,	1DBF0A01h
		dd 7A091F53h, 0A6A24C08h, 63F80A76h, 909D0D22h,	0B9A92EE1h
		dd 0D7FBD7D3h, 9E2749F4h, 5E91547Fh, 0B01B886Ah, 160217B4h
		dd 5504F213h, 777E690Fh, 5C41564Bh, 266FEA1Eh, 14266D31h
		dd 0D6406CFFh, 58AC507Fh, 0F8104DD2h, 0EFB99905h, 6765A442h
		dd 0C3FD3412h, 0A4D1CBD5h
_dh1024_160_q	dd 49462353h, 64B7CB9Dh, 8ABA4E7Dh, 81A8DF27h, 0F518AA87h
					; DATA XREF: .rdata:`DH_get_1024_160'::`2'::_bignum_dh1024_160_qo
_dh2048_224_q	dd 0B36371EBh, 0BF389A99h, 4738CEBCh, 1F80535Ah, 99717710h
					; DATA XREF: .rdata:`DH_get_2048_224'::`2'::_bignum_dh2048_224_qo
		dd 0C58D93FEh, 801C0D34h
_dh2048_224_p	dd 0C10E64Fh, 0AC4DFFEh, 4E71B81Ch, 0CF9DE538h,	0FFA31F71h
					; DATA XREF: .rdata:`DH_get_2048_224'::`2'::_bignum_dh2048_224_po
		dd 7EF363E2h, 6B8E75B9h, 0E3FB73C1h, 4BA80A29h,	0C9B53DCFh
		dd 16E79763h, 23F10B0Eh, 13042E9Bh, 0C52172E4h,	0C928B2B9h
		dd 0BE60E69Ch, 0B9E587E8h, 80CD86A1h, 98C641A4h, 315D75E1h
		dd 44328387h, 0CDF93ACCh, 0DC0A486Dh, 15987D9Ah, 1FD5A074h
		dd 7310F712h, 0DE31EFDCh, 278273C7h, 415D9330h,	1602E714h
		dd 0BC8985DBh, 81286130h, 70918836h, 0B3BF8A31h, 0B9C49708h
		dd 6A00E0A0h, 8BBC27BEh, 0C6BA0B2Ch, 0ED34DBF6h, 0C9F98D11h
		dd 0B6C12207h, 7AD5B7D0h, 55B7394Bh, 0D91E8FEFh, 0EFDA4DF8h
		dd 9037C9EDh, 0AD6AC212h, 6D3F8152h, 1274A0A6h,	1DE6B85Ah
		dd 309C180Eh, 0EB3D688Ah, 7BA1DF15h, 0AF9A3C40h, 0F95A56DBh
		dd 0E6FA141Dh, 0B61D0A75h, 0B54B1597h, 683B9FD1h, 0A20D64E5h
		dd 9559C51Fh, 0D660FAA7h, 9123A9D0h, 0AD107E1Eh
_dh2048_224_g	dd 191F2BFAh, 84B890D3h, 2A7065B3h, 81BC087Fh, 0F6EC0179h
					; DATA XREF: .rdata:`DH_get_2048_224'::`2'::_bignum_dh2048_224_go
		dd 19C418E1h, 71CFFF4Ch, 7B5A0F1Ch, 9B6AA4BDh, 0EDFE72FEh
		dd 94B30269h, 81E1BCFEh, 8D6C0191h, 566AFBB4h, 409D13CDh
		dd 0B539CCE3h, 5F2FF381h, 6AA21E7Fh, 770589EFh,	0D9E263E4h
		dd 0D19963DDh, 10E183EDh, 150B8EEBh, 0B70A8137h, 28C8F8ACh
		dd 51AE3D4h, 0C1AB15Bh,	0BB77A86Fh, 16A330EFh, 6E3025E3h
		dd 0D6F83456h, 19529A45h, 118E98D1h, 0F180EB34h, 50717CBEh
		dd 0B5F6C6B2h, 0DA7460CDh, 9939D54h, 22EA1ED4h,	0E2471504h
		dd 521BC98Ah, 0B8A762D0h, 5AC1348Bh, 0F4D02727h, 1999024Ah
		dd 0C1766910h, 0A8D66AD7h, 0BE5E9001h, 620A8652h, 0C57DB17Ch
		dd 0C29F52h, 0AB739D77h, 0A70C4AFAh, 0DD921F01h, 10B9A6F0h
		dd 0A6824A4Eh, 0CFE4FFE3h, 74866A08h, 89998CAFh, 6CDEBE7Bh
		dd 8FFDAC50h, 9DF30B5Ch, 4F2D9AE3h, 0AC4032EFh
_dh2048_256_p	dd 1E1A1597h, 0DB094AE9h, 0D7EF09CAh, 693877FAh, 6E11715Fh
					; DATA XREF: .rdata:`DH_get_2048_256'::`2'::_bignum_dh2048_256_po
		dd 6116D227h, 0C198AF12h, 0A4B54330h, 0D7014103h, 75F26375h
		dd 54E710C3h, 0C3A3960Ah, 0BD0BE621h, 0DED4010Ah, 89962856h
		dd 0C0B857F6h, 71506026h, 0B3CA3F79h, 0E6B486F6h, 1CCACB83h
		dd 14056425h, 67E144E5h, 0A41825D9h, 0F6A167B5h, 96524D8Eh
		dd 3AD83477h, 51BFA4ABh, 0F13C6D9Ah, 35488A0Eh,	2D525267h
		dd 0CAA6B790h, 0B63ACAE1h, 81B23F76h, 4FDB70C5h, 12307F5Ch
		dd 0BC39A0BFh, 0B1E59BB8h, 0B941F54Eh, 0D45F9088h, 6C5BFC11h
		dd 4275BF7Bh, 22E0B1EFh, 5B4758C0h, 91F9E672h, 6BCF67EDh
		dd 5A8A9D30h, 97517ABDh, 209E0C64h, 830E9A7Ch, 3BF4296Dh
		dd 34096FAAh, 16C3D911h, 61B2AA30h, 0FAF7DF45h,	0D61957D4h
		dd 0E00DF8F1h, 435E3B00h, 5D2CEED4h, 660DD0F2h,	8CEEF608h
		dd 65195999h, 0FFBBD19Ch, 0B4B6663Ch, 87A8E61Dh
_dh2048_256_g	dd 6CC41659h, 664B4C0Fh, 0EF98C582h, 5E2327CFh,	0D4795451h
					; DATA XREF: .rdata:`DH_get_2048_256'::`2'::_bignum_dh2048_256_go
		dd 0D647D148h, 90F00EF8h, 2F630784h, 1DB246C3h,	184B523Dh
		dd 0CDC67EB6h, 0C7891428h, 0DF92B52h, 7FD02837h, 64E0EC37h
		dd 0B3353BBBh, 57CD0915h, 0ECD06E15h, 0DF016199h, 0B7D2BBD2h
		dd 52588B9h, 0C8484B1Eh, 13D3FE14h, 0DB2A3B73h,	0D182EA0Ah
		dd 0D052B985h, 0E83B9C80h, 0A4BD1BFFh, 0FB3F2E55h, 0DFC967C1h
		dd 767164E1h, 0B5045AF2h, 6F2F9193h, 1D14348Fh,	428EBC83h
		dd 64E67982h, 82D6ED38h, 8AC376D2h, 0AAB8A862h,	777DE62Ah
		dd 0E9EC144Bh, 0DDF463E5h, 0C77A57F2h, 196F931h, 41000A65h
		dd 0A55AE313h, 0C28CBB18h, 901228F8h, 7E8C6F62h, 0BC3773BFh
		dd 0C6B47B1h, 0BE3A6C1Bh, 0AC0BB555h, 0FF4FED4Ah, 77BE463Fh
		dd 10DBC150h, 1A0BA125h, 7F4793Ah, 21EF2054h, 4CA7B18Fh
		dd 60EDBD48h, 2E775066h, 73134D0Bh, 3FB32C9Bh
_dh2048_256_q	dd 64F5FBD3h, 0A308B0FEh, 1EB3750Bh, 99B1A47Dh,	40129DA2h
					; DATA XREF: .rdata:`DH_get_2048_256'::`2'::_bignum_dh2048_256_qo
		dd 0B4479976h, 0A709A097h, 8CF83642h
; `DH_get_1024_160'::`2'::_bignum_dh1024_160_p
?_bignum_dh1024_160_p@?1??DH_get_1024_160@@9@9 dd offset _dh1024_160_p
					; DATA XREF: _DH_get_1024_160+Co
		dd offset _dh1024_160_p+20h
		dd offset _dh1024_160_p+20h
		align 10h
		dd 2
; `DH_get_1024_160'::`2'::_bignum_dh1024_160_q
?_bignum_dh1024_160_q@?1??DH_get_1024_160@@9@9 dd offset _dh1024_160_q
					; DATA XREF: _DH_get_1024_160+23o
		dd 2 dup(5), 0
		dd 2
; `DH_get_1024_160'::`2'::_bignum_dh1024_160_g
?_bignum_dh1024_160_g@?1??DH_get_1024_160@@9@9 dd offset _dh1024_160_g
					; DATA XREF: _DH_get_1024_160+16o
		dd offset _dh1024_160_p+20h
		dd offset _dh1024_160_p+20h
		align 8
		dd 2
; `DH_get_2048_224'::`2'::_bignum_dh2048_224_p
?_bignum_dh2048_224_p@?1??DH_get_2048_224@@9@9 dd offset _dh2048_224_p
					; DATA XREF: _DH_get_2048_224+Co
		dd offset _dh1024_160_p+40h
		dd offset _dh1024_160_p+40h
		dd 0
		dd 2
; `DH_get_2048_224'::`2'::_bignum_dh2048_224_q
?_bignum_dh2048_224_q@?1??DH_get_2048_224@@9@9 dd offset _dh2048_224_q
					; DATA XREF: _DH_get_2048_224+23o
		dd 2 dup(7), 0
		dd 2
; `DH_get_2048_224'::`2'::_bignum_dh2048_224_g
?_bignum_dh2048_224_g@?1??DH_get_2048_224@@9@9 dd offset _dh2048_224_g
					; DATA XREF: _DH_get_2048_224+16o
		dd offset _dh1024_160_p+40h
		dd offset _dh1024_160_p+40h
		dd 0
		dd 2
; `DH_get_2048_256'::`2'::_bignum_dh2048_256_p
?_bignum_dh2048_256_p@?1??DH_get_2048_256@@9@9 dd offset _dh2048_256_p
					; DATA XREF: _DH_get_2048_256+Co
		dd offset _dh1024_160_p+40h
		dd offset _dh1024_160_p+40h
		align 8
		dd 2
; `DH_get_2048_256'::`2'::_bignum_dh2048_256_q
?_bignum_dh2048_256_q@?1??DH_get_2048_256@@9@9 dd offset _dh2048_256_q
					; DATA XREF: _DH_get_2048_256+23o
		dd 2 dup(8), 0
		dd 2
; `DH_get_2048_256'::`2'::_bignum_dh2048_256_g
?_bignum_dh2048_256_g@?1??DH_get_2048_256@@9@9 dd offset _dh2048_256_g
					; DATA XREF: _DH_get_2048_256+16o
		dd offset _dh1024_160_p+40h
		dd offset _dh1024_160_p+40h
		align 10h
		dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 604h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DH_get_1024_160
_DH_get_1024_160 proc near
		push	esi
		call	_DH_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_657
		push	offset ?_bignum_dh1024_160_p@?1??DH_get_1024_160@@9@9 ;	`DH_get_1024_160'::`2'::_bignum_dh1024_160_p
		call	_BN_dup
		push	offset ?_bignum_dh1024_160_g@?1??DH_get_1024_160@@9@9 ;	`DH_get_1024_160'::`2'::_bignum_dh1024_160_g
		mov	[esi+8], eax
		call	_BN_dup
		push	offset ?_bignum_dh1024_160_q@?1??DH_get_1024_160@@9@9 ;	`DH_get_1024_160'::`2'::_bignum_dh1024_160_q
		mov	[esi+0Ch], eax
		call	_BN_dup
		add	esp, 0Ch
		mov	[esi+24h], eax
		cmp	dword ptr [esi+8], 0
		jz	short loc_64E
		test	eax, eax
		jz	short loc_64E
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_64E
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_64E:				; CODE XREF: _DH_get_1024_160+3Aj
					; _DH_get_1024_160+3Ej	...
		push	esi
		call	_DH_free
		add	esp, 4

loc_657:				; CODE XREF: _DH_get_1024_160+Aj
		xor	eax, eax
		pop	esi
		retn
_DH_get_1024_160 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 65Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DH_get_2048_224
_DH_get_2048_224 proc near
		push	esi
		call	_DH_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_6AF
		push	offset ?_bignum_dh2048_224_p@?1??DH_get_2048_224@@9@9 ;	`DH_get_2048_224'::`2'::_bignum_dh2048_224_p
		call	_BN_dup
		push	offset ?_bignum_dh2048_224_g@?1??DH_get_2048_224@@9@9 ;	`DH_get_2048_224'::`2'::_bignum_dh2048_224_g
		mov	[esi+8], eax
		call	_BN_dup
		push	offset ?_bignum_dh2048_224_q@?1??DH_get_2048_224@@9@9 ;	`DH_get_2048_224'::`2'::_bignum_dh2048_224_q
		mov	[esi+0Ch], eax
		call	_BN_dup
		add	esp, 0Ch
		mov	[esi+24h], eax
		cmp	dword ptr [esi+8], 0
		jz	short loc_6A6
		test	eax, eax
		jz	short loc_6A6
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_6A6
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6A6:				; CODE XREF: _DH_get_2048_224+3Aj
					; _DH_get_2048_224+3Ej	...
		push	esi
		call	_DH_free
		add	esp, 4

loc_6AF:				; CODE XREF: _DH_get_2048_224+Aj
		xor	eax, eax
		pop	esi
		retn
_DH_get_2048_224 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DH_get_2048_256
_DH_get_2048_256 proc near
		push	esi
		call	_DH_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_707
		push	offset ?_bignum_dh2048_256_p@?1??DH_get_2048_256@@9@9 ;	`DH_get_2048_256'::`2'::_bignum_dh2048_256_p
		call	_BN_dup
		push	offset ?_bignum_dh2048_256_g@?1??DH_get_2048_256@@9@9 ;	`DH_get_2048_256'::`2'::_bignum_dh2048_256_g
		mov	[esi+8], eax
		call	_BN_dup
		push	offset ?_bignum_dh2048_256_q@?1??DH_get_2048_256@@9@9 ;	`DH_get_2048_256'::`2'::_bignum_dh2048_256_q
		mov	[esi+0Ch], eax
		call	_BN_dup
		add	esp, 0Ch
		mov	[esi+24h], eax
		cmp	dword ptr [esi+8], 0
		jz	short loc_6FE
		test	eax, eax
		jz	short loc_6FE
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_6FE
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FE:				; CODE XREF: _DH_get_2048_256+3Aj
					; _DH_get_2048_256+3Ej	...
		push	esi
		call	_DH_free
		add	esp, 4

loc_707:				; CODE XREF: _DH_get_2048_256+Aj
		xor	eax, eax
		pop	esi
		retn
_DH_get_2048_256 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_dup:near	; CODE XREF: _DH_get_1024_160+11p
					; _DH_get_1024_160+1Ep	...
		extrn _DH_new:near	; CODE XREF: _DH_get_1024_160+1p
					; _DH_get_2048_224+1p ...
		extrn _DH_free:near	; CODE XREF: _DH_get_1024_160+4Bp
					; _DH_get_2048_224+4Bp	...


		end
