;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D2B4396178B7595AC5CAB58F6284F72F
; Input	CRC32 :	8EE03BD5

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_x931.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_X931_hash_id
_RSA_X931_hash_id proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 2A1h
		jg	short loc_2B
		jz	short loc_25
		cmp	eax, 40h ; '@'
		jz	short loc_1F
		cmp	eax, 2A0h
		jnz	short loc_32
		mov	eax, 34h ; '4'
		retn
; ---------------------------------------------------------------------------

loc_1F:					; CODE XREF: _RSA_X931_hash_id+10j
		mov	eax, 33h ; '3'
		retn
; ---------------------------------------------------------------------------

loc_25:					; CODE XREF: _RSA_X931_hash_id+Bj
		mov	eax, 36h ; '6'
		retn
; ---------------------------------------------------------------------------

loc_2B:					; CODE XREF: _RSA_X931_hash_id+9j
		cmp	eax, 2A2h
		jz	short loc_36

loc_32:					; CODE XREF: _RSA_X931_hash_id+17j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_36:					; CODE XREF: _RSA_X931_hash_id+30j
		mov	eax, 35h ; '5'
		retn
_RSA_X931_hash_id endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl RSA_padding_add_X931(int,	int, void *Src,	size_t Size)
		public _RSA_padding_add_X931
_RSA_padding_add_X931 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+Size]
		push	edi
		mov	edi, [esp+8+arg_4]
		sub	edi, ebx
		sub	edi, 2
		jns	short loc_68
		push	51h ; 'Q'
		push	offset ??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@ ; ".\\crypto\\rsa\\rsa_x931.c"
		push	6Eh ; 'n'
		push	7Fh ; ''
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68:					; CODE XREF: _RSA_padding_add_X931+Fj
		mov	eax, [esp+8+arg_0]
		push	esi
		lea	esi, [eax+1]
		test	edi, edi
		jnz	short loc_79
		mov	byte ptr [eax],	6Ah ; 'j'
		jmp	short loc_9A
; ---------------------------------------------------------------------------

loc_79:					; CODE XREF: _RSA_padding_add_X931+36j
		mov	byte ptr [eax],	6Bh ; 'k'
		cmp	edi, 1
		jle	short loc_96
		lea	eax, [edi-1]
		push	eax		; Size
		push	0BBh ; '»'      ; Val
		push	esi		; Dst
		call	_memset
		dec	esi
		add	esp, 0Ch
		add	esi, edi

loc_96:					; CODE XREF: _RSA_padding_add_X931+43j
		mov	byte ptr [esi],	0BAh ; 'º'
		inc	esi

loc_9A:					; CODE XREF: _RSA_padding_add_X931+3Bj
		push	ebx		; Size
		push	[esp+10h+Src]	; Src
		push	esi		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	byte ptr [esi+ebx], 0CCh ; 'Ì'
		mov	eax, 1
		pop	esi
		pop	edi
		pop	ebx
		retn
_RSA_padding_add_X931 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl RSA_padding_check_X931(void *Dst,	int, int, int, int)
		public _RSA_padding_check_X931
_RSA_padding_check_X931	proc near

Dst		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_C]
		cmp	[esp+4+arg_10],	esi
		jnz	loc_181
		mov	ecx, [esp+4+arg_8]
		mov	al, [ecx]
		cmp	al, 6Ah	; 'j'
		jz	short loc_D9
		cmp	al, 6Bh	; 'k'
		jnz	loc_181

loc_D9:					; CODE XREF: _RSA_padding_check_X931+17j
		inc	ecx
		cmp	al, 6Bh	; 'k'
		jnz	short loc_143
		add	esi, 0FFFFFFFDh
		xor	eax, eax
		test	esi, esi
		jle	short loc_FA
		nop

loc_E8:					; CODE XREF: _RSA_padding_check_X931+40j
		mov	dl, [ecx]
		inc	ecx
		cmp	dl, 0BAh ; 'º'
		jz	short loc_FA
		cmp	dl, 0BBh ; '»'
		jnz	short loc_123
		inc	eax
		cmp	eax, esi
		jl	short loc_E8

loc_FA:					; CODE XREF: _RSA_padding_check_X931+2Dj
					; _RSA_padding_check_X931+36j
		sub	esi, eax
		test	eax, eax
		jnz	short loc_146
		push	83h ; 'ƒ'
		push	offset ??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@ ; ".\\crypto\\rsa\\rsa_x931.c"
		push	8Ah ; 'Š'
		push	80h ; '€'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_123:				; CODE XREF: _RSA_padding_check_X931+3Bj
		push	7Bh ; '{'
		push	offset ??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@ ; ".\\crypto\\rsa\\rsa_x931.c"
		push	8Ah ; 'Š'
		push	80h ; '€'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_143:				; CODE XREF: _RSA_padding_check_X931+24j
		add	esi, 0FFFFFFFEh

loc_146:				; CODE XREF: _RSA_padding_check_X931+46j
		cmp	byte ptr [esi+ecx], 0CCh ; 'Ì'
		jz	short loc_16F
		push	8Bh ; '‹'
		push	offset ??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@ ; ".\\crypto\\rsa\\rsa_x931.c"
		push	8Bh ; '‹'
		push	80h ; '€'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: _RSA_padding_check_X931+92j
		push	esi		; Size
		push	ecx		; Src
		push	[esp+0Ch+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_181:				; CODE XREF: _RSA_padding_check_X931+9j
					; _RSA_padding_check_X931+1Bj
		push	70h ; 'p'
		push	offset ??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@ ; ".\\crypto\\rsa\\rsa_x931.c"
		push	89h ; '‰'
		push	80h ; '€'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
_RSA_padding_check_X931	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A4h
; COMDAT (pick any)
		public ??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@
; `string'
??_C@_0BI@KEEABKFJ@?4?2crypto?2rsa?2rsa_x931?4c?$AA@ db	'.\crypto\rsa\rsa_x931.c',0
					; DATA XREF: _RSA_padding_add_X931+13o
					; _RSA_padding_check_X931+4Do ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _RSA_padding_add_X931+1Ep
					; _RSA_padding_check_X931+5Ep ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _RSA_padding_add_X931+64p
					; _RSA_padding_check_X931+BDp
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _RSA_padding_add_X931+4Fp


		end
