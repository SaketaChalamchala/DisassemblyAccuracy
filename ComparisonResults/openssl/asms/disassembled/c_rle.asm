;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E0FF776B1F9BD058A308AD579683E8E1
; Input	CRC32 :	C2D01006

; File Name   :	C:\compspace\Diff\openssl\obj\c_rle.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl rle_compress_block(int, int, int,	void *Src, size_t Size)
_rle_compress_block proc near		; DATA XREF: .data:00000074o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
Size		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+Size]
		test	esi, esi
		jz	short loc_2D
		lea	eax, [esi-1]
		cmp	[esp+4+arg_8], eax
		jb	short loc_2D
		mov	eax, [esp+4+arg_4]
		push	esi		; Size
		push	[esp+8+Src]	; Src
		mov	byte ptr [eax],	0
		inc	eax
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		lea	eax, [esi+1]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2D:					; CODE XREF: _rle_compress_block+7j
					; _rle_compress_block+10j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
_rle_compress_block endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl rle_expand_block(int, void *Dst, int, int, int)
_rle_expand_block proc near		; DATA XREF: .data:00000078o

Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_10]
		dec	esi
		cmp	[esp+4+arg_8], esi
		jnb	short loc_45
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_45:					; CODE XREF: _rle_expand_block+Aj
		mov	ecx, [esp+4+arg_C]
		cmp	byte ptr [ecx],	0
		jnz	short loc_5D
		push	esi		; Size
		inc	ecx
		push	ecx		; Src
		push	[esp+0Ch+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch

loc_5D:					; CODE XREF: _rle_expand_block+18j
		mov	eax, esi
		pop	esi
		retn
_rle_expand_block endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 64h
_rle_method	dd offset dword_7C	; DATA XREF: _COMP_rleo
		dd offset ??_C@_0BH@CAEIMNHD@run?5length?5compression?$AA@ ; "run length compression"
		dd 2 dup(0)
		dd offset _rle_compress_block
		dd offset _rle_expand_block
dword_7C	dd 2 dup(0)		; DATA XREF: .data:_rle_methodo
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
; COMDAT (pick any)
		public ??_C@_0BH@CAEIMNHD@run?5length?5compression?$AA@
; `string'
??_C@_0BH@CAEIMNHD@run?5length?5compression?$AA@ db 'run length compression',0
					; DATA XREF: .data:00000068o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _COMP_rle
_COMP_rle	proc near
		mov	eax, offset _rle_method
		retn
_COMP_rle	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _rle_compress_block+20p
					; _rle_expand_block+21p


		end
