;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1777D791A08501931D6F5EC0B578F18B
; Input	CRC32 :	6CBDF0B1

; File Name   :	C:\compspace\Diff\openssl\obj\gendh.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_scanf_options
___local_stdio_scanf_options proc near	; CODE XREF: __vsscanf_l+12p
					; _sscanf+11p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
		retn
___local_stdio_scanf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public __vsscanf_l
__vsscanf_l	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	0FFFFFFFFh
		push	[esp+10h+arg_0]
		call	___local_stdio_scanf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vsscanf
		add	esp, 1Ch
		retn
__vsscanf_l	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_cb		proc near		; DATA XREF: _gendh_main+38o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	al, 2Ah	; '*'
		test	ecx, ecx
		jnz	short loc_41
		mov	byte ptr [esp+arg_0], 2Eh ; '.'
		jmp	short loc_6B
; ---------------------------------------------------------------------------

loc_41:					; CODE XREF: _dh_cb+8j
		cmp	ecx, 1
		jnz	short loc_4D
		mov	byte ptr [esp+arg_0], 2Bh ; '+'
		jmp	short loc_6B
; ---------------------------------------------------------------------------

loc_4D:					; CODE XREF: _dh_cb+14j
		cmp	ecx, 2
		jnz	short loc_59
		mov	byte ptr [esp+arg_0], 2Ah ; '*'
		jmp	short loc_6B
; ---------------------------------------------------------------------------

loc_59:					; CODE XREF: _dh_cb+20j
		cmp	ecx, 3
		movzx	eax, al
		mov	edx, 0Ah
		cmovz	eax, edx
		mov	byte ptr [esp+arg_0], al

loc_6B:					; CODE XREF: _dh_cb+Fj	_dh_cb+1Bj ...
		push	esi
		mov	esi, [esp+4+arg_8]
		lea	eax, [esp+4+arg_0]
		push	1
		push	eax
		push	dword ptr [esi+4]
		call	_BIO_write
		push	0
		push	0
		push	0Bh
		push	dword ptr [esi+4]
		call	_BIO_ctrl
		add	esp, 1Ch
		mov	eax, 1
		pop	esi
		retn
_dh_cb		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gendh_main
_gendh_main	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
ErrMsg		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 1Ch
		call	__chkstk
		mov	eax, dword ptr ds:_bio_err
		push	ebx
		xor	ebx, ebx
		mov	[esp+20h+var_18], 800h
		push	ebp
		push	esi
		push	edi
		xor	esi, esi
		mov	[esp+2Ch+ErrMsg], ebx
		lea	ebp, [ebx+2]
		mov	[esp+2Ch+var_1C], esi
		xor	edi, edi
		mov	[esp+2Ch+var_14], ebx
		mov	[esp+2Ch+var_C], ebp
		mov	[esp+2Ch+var_8], eax
		mov	[esp+2Ch+var_4], offset	_dh_cb
		test	eax, eax
		jnz	short loc_112
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_112
		push	ebp
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		mov	eax, dword ptr ds:_bio_err
		add	esp, 14h

loc_112:				; CODE XREF: _gendh_main+42j
					; _gendh_main+59j
		push	0
		push	eax
		call	_load_config
		add	esp, 8
		test	eax, eax
		jz	loc_39A
		mov	edi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		dec	edi
		add	ebx, 4
		test	edi, edi
		jle	loc_2AB

loc_139:				; CODE XREF: _gendh_main+207j
		mov	esi, [ebx]
		mov	ecx, offset ??_C@_04HKKABCEL@?9out?$AA@	; "-out"
		mov	eax, esi
		nop	word ptr [eax+eax+00h]

loc_148:				; CODE XREF: _gendh_main+CAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_168
		test	dl, dl
		jz	short loc_164
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_168
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_148

loc_164:				; CODE XREF: _gendh_main+B8j
		xor	eax, eax
		jmp	short loc_16D
; ---------------------------------------------------------------------------

loc_168:				; CODE XREF: _gendh_main+B4j
					; _gendh_main+C0j
		sbb	eax, eax
		or	eax, 1

loc_16D:				; CODE XREF: _gendh_main+CEj
		test	eax, eax
		jnz	short loc_18E
		dec	edi
		cmp	edi, 1
		jl	$bad$72
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	esi, [esp+2Ch+var_1C]
		mov	[esp+2Ch+ErrMsg], eax
		jmp	loc_299
; ---------------------------------------------------------------------------

loc_18E:				; CODE XREF: _gendh_main+D7j
		mov	ecx, offset ??_C@_02NNFLKHCP@?92?$AA@ ;	`string'
		mov	eax, esi
		nop	dword ptr [eax]

loc_198:				; CODE XREF: _gendh_main+11Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1B8
		test	dl, dl
		jz	short loc_1B4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1B8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_198

loc_1B4:				; CODE XREF: _gendh_main+108j
		xor	eax, eax
		jmp	short loc_1BD
; ---------------------------------------------------------------------------

loc_1B8:				; CODE XREF: _gendh_main+104j
					; _gendh_main+110j
		sbb	eax, eax
		or	eax, 1

loc_1BD:				; CODE XREF: _gendh_main+11Ej
		test	eax, eax
		jnz	short loc_1CD
		mov	esi, [esp+2Ch+var_1C]
		lea	ebp, [eax+2]
		jmp	loc_299
; ---------------------------------------------------------------------------

loc_1CD:				; CODE XREF: _gendh_main+127j
		mov	ecx, offset ??_C@_02JCBKDBOI@?95?$AA@ ;	`string'
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_1D8:				; CODE XREF: _gendh_main+15Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1F8
		test	dl, dl
		jz	short loc_1F4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1F8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1D8

loc_1F4:				; CODE XREF: _gendh_main+148j
		xor	eax, eax
		jmp	short loc_1FD
; ---------------------------------------------------------------------------

loc_1F8:				; CODE XREF: _gendh_main+144j
					; _gendh_main+150j
		sbb	eax, eax
		or	eax, 1

loc_1FD:				; CODE XREF: _gendh_main+15Ej
		test	eax, eax
		jnz	short loc_20D
		mov	esi, [esp+2Ch+var_1C]
		lea	ebp, [eax+5]
		jmp	loc_299
; ---------------------------------------------------------------------------

loc_20D:				; CODE XREF: _gendh_main+167j
		mov	ecx, offset ??_C@_07CECBDAGF@?9engine?$AA@ ; "-engine"
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_218:				; CODE XREF: _gendh_main+19Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_238
		test	dl, dl
		jz	short loc_234
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_238
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_218

loc_234:				; CODE XREF: _gendh_main+188j
		xor	eax, eax
		jmp	short loc_23D
; ---------------------------------------------------------------------------

loc_238:				; CODE XREF: _gendh_main+184j
					; _gendh_main+190j
		sbb	eax, eax
		or	eax, 1

loc_23D:				; CODE XREF: _gendh_main+19Ej
		test	eax, eax
		jnz	short loc_25B
		dec	edi
		cmp	edi, 1
		jl	$bad$72
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	esi, [esp+2Ch+var_1C]
		mov	[esp+2Ch+var_14], eax
		jmp	short loc_299
; ---------------------------------------------------------------------------

loc_25B:				; CODE XREF: _gendh_main+1A7j
		mov	eax, offset ??_C@_05LGFPCDPE@?9rand?$AA@ ; "-rand"

loc_260:				; CODE XREF: _gendh_main+1E2j
		mov	cl, [esi]
		cmp	cl, [eax]
		jnz	short loc_280
		test	cl, cl
		jz	short loc_27C
		mov	cl, [esi+1]
		cmp	cl, [eax+1]
		jnz	short loc_280
		add	esi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_260

loc_27C:				; CODE XREF: _gendh_main+1D0j
		xor	eax, eax
		jmp	short loc_285
; ---------------------------------------------------------------------------

loc_280:				; CODE XREF: _gendh_main+1CCj
					; _gendh_main+1D8j
		sbb	eax, eax
		or	eax, 1

loc_285:				; CODE XREF: _gendh_main+1E6j
		test	eax, eax
		jnz	short loc_2A7
		dec	edi
		cmp	edi, 1
		jl	short $bad$72
		mov	esi, [ebx+4]
		add	ebx, 4
		mov	[esp+2Ch+var_1C], esi

loc_299:				; CODE XREF: _gendh_main+F1j
					; _gendh_main+130j ...
		dec	edi
		add	ebx, 4
		test	edi, edi
		jg	loc_139
		jmp	short loc_2AB
; ---------------------------------------------------------------------------

loc_2A7:				; CODE XREF: _gendh_main+1EFj
		mov	esi, [esp+2Ch+var_1C]

loc_2AB:				; CODE XREF: _gendh_main+9Bj
					; _gendh_main+20Dj
		cmp	edi, 1
		jl	loc_365
		lea	eax, [esp+2Ch+var_18]
		push	eax
		push	offset ??_C@_02DPKJAMEF@?$CFd?$AA@ ; "%d"
		push	dword ptr [ebx]	; Src
		call	_sscanf
		add	esp, 0Ch
		test	eax, eax
		jz	short $bad$72
		cmp	[esp+2Ch+var_18], 0
		jge	loc_365

$bad$72:				; CODE XREF: _gendh_main+DDj
					; _gendh_main+1ADj ...
		push	offset ??_C@_0BP@KICIFPBK@usage?3?5gendh?5?$FLargs?$FN?5?$FLnumbits?$FN?6?$AA@ ; "usage: gendh [args] [numbits]\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CG@HHJHEFFN@?5?9out?5file?5?9?5output?5the?5key?5to?5?8@ ; " -out	file - output the key to 'file\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CL@DIPAAPBJ@?5?92?5?5?5?5?5?5?5?5?9?5use?52?5as?5the?5genera@ ; "	-2	  - use	2 as the generator val"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CL@BFMGINJL@?5?95?5?5?5?5?5?5?5?5?9?5use?55?5as?5the?5genera@ ; "	-5	  - use	5 as the generator val"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DI@IGMMGMDL@?5?9engine?5e?5?9?5use?5engine?5e?0?5possi@ ;	" -engine e - use engine e, possibly a h"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	3Bh ; ';'
		push	3Bh ; ';'
		push	offset ??_C@_0BI@HHIJKENB@?5?9rand?5file?$CFcfile?$CFc?4?4?4?6?$AA@ ; "	-rand file%cfile%c...\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0EB@KLOHJNHD@?5?5?5?5?5?5?5?5?5?5?5?9?5load?5the?5file?5?$CIor?5t@	; "	      -	load the file (or the file"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 40h
		push	offset ??_C@_0CK@NBGNPKEI@?5?5?5?5?5?5?5?5?5?5?5?5?5the?5random?5number?5g@ ; "		    the	random number generato"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		xor	edi, edi
		jmp	short loc_398
; ---------------------------------------------------------------------------

loc_365:				; CODE XREF: _gendh_main+216j
					; _gendh_main+239j
		push	0
		push	[esp+30h+var_14]
		push	dword ptr ds:_bio_err
		call	_setup_engine
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_3D1
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors

loc_395:				; CODE XREF: _gendh_main+39Ej
		add	esp, 4

loc_398:				; CODE XREF: _gendh_main+2CBj
		xor	ebx, ebx

loc_39A:				; CODE XREF: _gendh_main+87j
					; _gendh_main+3F2j ...
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4
		mov	ebp, 1

loc_3AD:				; CODE XREF: _gendh_main+434j
		test	edi, edi
		jz	short loc_3BA
		push	edi
		call	_BIO_free_all
		add	esp, 4

loc_3BA:				; CODE XREF: _gendh_main+317j
		test	ebx, ebx
		jz	short loc_3C7
		push	ebx
		call	_DH_free
		add	esp, 4

loc_3C7:				; CODE XREF: _gendh_main+324j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_3D1:				; CODE XREF: _gendh_main+2F0j
		mov	ebx, [esp+2Ch+ErrMsg]
		test	ebx, ebx
		jnz	short loc_41D
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	ebx
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		add	esp, 14h

loc_3EE:				; CODE XREF: _gendh_main+395j
		push	1
		push	dword ptr ds:_bio_err
		push	0
		call	_app_RAND_load_file
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_43B
		test	esi, esi
		jnz	short loc_43F
		push	offset ??_C@_0EG@NMHBLOCJ@warning?0?5not?5much?5extra?5random?5d@ ; "warning, not much extra random data, co"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		jmp	short loc_459
; ---------------------------------------------------------------------------

loc_41D:				; CODE XREF: _gendh_main+33Fj
		push	ebx
		push	5
		push	6Ch ; 'l'
		push	edi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_3EE
		push	ebx		; ErrMsg
		call	dword ptr ds:__imp__perror
		jmp	loc_395
; ---------------------------------------------------------------------------

loc_43B:				; CODE XREF: _gendh_main+36Aj
		test	esi, esi
		jz	short loc_459

loc_43F:				; CODE XREF: _gendh_main+36Ej
		push	esi
		call	_app_RAND_load_files
		push	eax
		push	offset ??_C@_0BO@JENMPIEN@?$CFld?5semi?9random?5bytes?5loaded?6?$AA@ ; "%ld semi-random	bytes loaded\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 10h

loc_459:				; CODE XREF: _gendh_main+383j
					; _gendh_main+3A5j
		push	ebp
		push	[esp+30h+var_18]
		push	offset ??_C@_0EA@BEOHJPIA@Generating?5DH?5parameters?0?5?$CFd?5bit@ ; "Generating DH parameters, %d bit	long s"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CD@OEGFFOKJ@This?5is?5going?5to?5take?5a?5long?5tim@ ; "This is going to take a long time\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 18h
		call	_DH_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_39A
		lea	eax, [esp+2Ch+var_C]
		push	eax
		push	ebp
		push	[esp+34h+var_18]
		push	ebx
		call	_DH_generate_parameters_ex
		add	esp, 10h
		test	eax, eax
		jz	loc_39A
		push	dword ptr ds:_bio_err
		push	0
		call	_app_RAND_write_file
		push	ebx
		push	edi
		call	_PEM_write_bio_DHparams
		add	esp, 10h
		test	eax, eax
		jz	loc_39A
		xor	ebp, ebp
		jmp	loc_3AD
_gendh_main	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sscanf(const char	*Src, const char *Format, ...)
		public _sscanf
_sscanf		proc near		; CODE XREF: _gendh_main+228p

Src		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Src]
		call	___local_stdio_scanf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vsscanf
		add	esp, 1Ch
		retn
_sscanf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4FCh
; COMDAT (pick any)
		public ??_C@_04HKKABCEL@?9out?$AA@
; `string'
??_C@_04HKKABCEL@?9out?$AA@ db '-out',0 ; DATA XREF: _gendh_main+A3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 504h
; COMDAT (pick any)
		public ??_C@_02NNFLKHCP@?92?$AA@
; `string'
??_C@_02NNFLKHCP@?92?$AA@ db 2Dh, 32h, 0 ; DATA	XREF: _gendh_main:loc_18Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 508h
; COMDAT (pick any)
		public ??_C@_02JCBKDBOI@?95?$AA@
; `string'
??_C@_02JCBKDBOI@?95?$AA@ db 2Dh, 35h, 0 ; DATA	XREF: _gendh_main:loc_1CDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50Ch
; COMDAT (pick any)
		public ??_C@_07CECBDAGF@?9engine?$AA@
; `string'
??_C@_07CECBDAGF@?9engine?$AA@ db '-engine',0 ; DATA XREF: _gendh_main:loc_20Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 514h
; COMDAT (pick any)
		public ??_C@_05LGFPCDPE@?9rand?$AA@
; `string'
??_C@_05LGFPCDPE@?9rand?$AA@ db	'-rand',0 ; DATA XREF: _gendh_main:loc_25Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 51Ch
; COMDAT (pick any)
		public ??_C@_02DPKJAMEF@?$CFd?$AA@
; char `string'[3]
??_C@_02DPKJAMEF@?$CFd?$AA@ db '%d',0   ; DATA XREF: _gendh_main+221o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 520h
; COMDAT (pick any)
		public ??_C@_0BP@KICIFPBK@usage?3?5gendh?5?$FLargs?$FN?5?$FLnumbits?$FN?6?$AA@
; `string'
??_C@_0BP@KICIFPBK@usage?3?5gendh?5?$FLargs?$FN?5?$FLnumbits?$FN?6?$AA@	db 'usage: gendh [args] [numbits]',0Ah,0
					; DATA XREF: _gendh_main:$bad$72o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 540h
; COMDAT (pick any)
		public ??_C@_0CG@HHJHEFFN@?5?9out?5file?5?9?5output?5the?5key?5to?5?8@
; `string'
??_C@_0CG@HHJHEFFN@?5?9out?5file?5?9?5output?5the?5key?5to?5?8@	db ' -out file - output the key to ',27h,'file',0Ah,0
					; DATA XREF: _gendh_main+24Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 568h
; COMDAT (pick any)
		public ??_C@_0CL@DIPAAPBJ@?5?92?5?5?5?5?5?5?5?5?9?5use?52?5as?5the?5genera@
; `string'
??_C@_0CL@DIPAAPBJ@?5?92?5?5?5?5?5?5?5?5?9?5use?52?5as?5the?5genera@ db	' -2        - use 2 as the generator value',0Ah,0
					; DATA XREF: _gendh_main+25Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 594h
; COMDAT (pick any)
		public ??_C@_0CL@BFMGINJL@?5?95?5?5?5?5?5?5?5?5?9?5use?55?5as?5the?5genera@
; `string'
??_C@_0CL@BFMGINJL@?5?95?5?5?5?5?5?5?5?5?9?5use?55?5as?5the?5genera@ db	' -5        - use 5 as the generator value',0Ah,0
					; DATA XREF: _gendh_main+26Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C0h
; COMDAT (pick any)
		public ??_C@_0DI@IGMMGMDL@?5?9engine?5e?5?9?5use?5engine?5e?0?5possi@
; `string'
??_C@_0DI@IGMMGMDL@?5?9engine?5e?5?9?5use?5engine?5e?0?5possi@ db ' -engine e - use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _gendh_main+27Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5F8h
; COMDAT (pick any)
		public ??_C@_0BI@HHIJKENB@?5?9rand?5file?$CFcfile?$CFc?4?4?4?6?$AA@
; `string'
??_C@_0BI@HHIJKENB@?5?9rand?5file?$CFcfile?$CFc?4?4?4?6?$AA@ db	' -rand file%cfile%c...',0Ah,0
					; DATA XREF: _gendh_main+293o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 610h
; COMDAT (pick any)
		public ??_C@_0EB@KLOHJNHD@?5?5?5?5?5?5?5?5?5?5?5?9?5load?5the?5file?5?$CIor?5t@
; `string'
??_C@_0EB@KLOHJNHD@?5?5?5?5?5?5?5?5?5?5?5?9?5load?5the?5file?5?$CIor?5t@ db '           - load the file (or the files in the directory) into',0Ah
					; DATA XREF: _gendh_main+2A3o
		db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 654h
; COMDAT (pick any)
		public ??_C@_0CK@NBGNPKEI@?5?5?5?5?5?5?5?5?5?5?5?5?5the?5random?5number?5g@
; `string'
??_C@_0CK@NBGNPKEI@?5?5?5?5?5?5?5?5?5?5?5?5?5the?5random?5number?5g@ db	'             the random number generator',0Ah,0
					; DATA XREF: _gendh_main+2B6o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 680h
; COMDAT (pick any)
		public ??_C@_0EG@NMHBLOCJ@warning?0?5not?5much?5extra?5random?5d@
; `string'
??_C@_0EG@NMHBLOCJ@warning?0?5not?5much?5extra?5random?5d@ db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _gendh_main+370o
		db 'ion',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6C8h
; COMDAT (pick any)
		public ??_C@_0BO@JENMPIEN@?$CFld?5semi?9random?5bytes?5loaded?6?$AA@
; `string'
??_C@_0BO@JENMPIEN@?$CFld?5semi?9random?5bytes?5loaded?6?$AA@ db '%ld semi-random bytes loaded',0Ah,0
					; DATA XREF: _gendh_main+3AEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6E8h
; COMDAT (pick any)
		public ??_C@_0EA@BEOHJPIA@Generating?5DH?5parameters?0?5?$CFd?5bit@
; `string'
??_C@_0EA@BEOHJPIA@Generating?5DH?5parameters?0?5?$CFd?5bit@ db	'Generating DH parameters, %d bit long safe prime, generator %d',0Ah,0
					; DATA XREF: _gendh_main+3C6o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 728h
; COMDAT (pick any)
		public ??_C@_0CD@OEGFFOKJ@This?5is?5going?5to?5take?5a?5long?5tim@
; `string'
??_C@_0CD@OEGFFOKJ@This?5is?5going?5to?5take?5a?5long?5tim@ db 'This is going to take a long time',0Ah,0
					; DATA XREF: _gendh_main+3D6o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _gendh_main+5Cp
					; _gendh_main+343p
					; DATA XREF: ...
; void __cdecl _perror(const char *ErrMsg)
		extrn __imp__perror:near ; CODE	XREF: _gendh_main+398p
					; DATA XREF: _gendh_main+398r
		extrn __imp____stdio_common_vsscanf:near ; CODE	XREF: __vsscanf_l+1Cp
					; _sscanf+1Bp
					; DATA XREF: ...
		extrn _BIO_s_file:near	; CODE XREF: _gendh_main+44p
					; _gendh_main+2DEp
		extrn _BIO_new:near	; CODE XREF: _gendh_main+4Ap
					; _gendh_main+2E4p
		extrn _BIO_write:near	; CODE XREF: _dh_cb+4Ap
		extrn _BIO_ctrl:near	; CODE XREF: _dh_cb+58p
					; _gendh_main+6Dp ...
		extrn _BIO_free_all:near ; CODE	XREF: _gendh_main+31Ap
		extrn _BIO_printf:near	; CODE XREF: _gendh_main+24Ap
					; _gendh_main+25Ap ...
		extrn _DH_new:near	; CODE XREF: _gendh_main+3E9p
		extrn _DH_free:near	; CODE XREF: _gendh_main+327p
		extrn _DH_generate_parameters_ex:near ;	CODE XREF: _gendh_main+403p
		extrn _ERR_print_errors:near ; CODE XREF: _gendh_main+2F8p
					; _gendh_main+308p
		extrn _app_RAND_load_file:near ; CODE XREF: _gendh_main+360p
		extrn _app_RAND_write_file:near	; CODE XREF: _gendh_main+41Bp
		extrn _app_RAND_load_files:near	; CODE XREF: _gendh_main+3A8p
		extrn _setup_engine:near ; CODE	XREF: _gendh_main+2D9p
		extrn _load_config:near	; CODE XREF: _gendh_main+7Dp
		extrn _PEM_write_bio_DHparams:near ; CODE XREF:	_gendh_main+422p
		extrn __chkstk:near	; CODE XREF: _gendh_main+5p
; `__local_stdio_scanf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:near
					; DATA XREF: ___local_stdio_scanf_optionso
		extrn _bio_err:near	; DATA XREF: _gendh_main+Ar
					; _gendh_main+52w ...


		end
