;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2A587E324B892A1509FD389A1C857FA2
; Input	CRC32 :	E5464B50

; File Name   :	C:\compspace\Diff\openssl\obj\asn_mime.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_B64_write_ASN1	proc near		; CODE XREF: _PEM_write_bio_ASN1_stream+26p
					; _SMIME_write_ASN1+230p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		call	_BIO_f_base64
		push	eax
		call	_BIO_new
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_34
		push	9Bh ; '›'
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	41h ; 'A'
		push	0D2h ; 'Ò'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_34:					; CODE XREF: _B64_write_ASN1+13j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		push	ebx
		call	_BIO_push
		push	[esp+14h+arg_10]
		mov	edi, eax
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	edi
		call	_i2d_ASN1_bio_stream
		push	0
		push	0
		push	0Bh
		push	edi
		mov	esi, eax
		call	_BIO_ctrl
		push	edi
		call	_BIO_pop
		push	ebx
		call	_BIO_free
		add	esp, 34h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
_B64_write_ASN1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_ASN1_stream
_PEM_write_bio_ASN1_stream proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		push	edi
		push	[esp+8+arg_10]
		mov	edi, [esp+0Ch+arg_0]
		push	offset ??_C@_0BE@JOAPMNHH@?9?9?9?9?9BEGIN?5?$CFs?9?9?9?9?9?6?$AA@ ; "-----BEGIN	%s-----\n"
		push	edi
		call	_BIO_printf
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	edi
		call	_B64_write_ASN1
		push	[esp+28h+arg_10]
		mov	esi, eax
		push	offset ??_C@_0BC@BEJKDKBL@?9?9?9?9?9END?5?$CFs?9?9?9?9?9?6?$AA@	; "-----END %s-----\n"
		push	edi
		call	_BIO_printf
		add	esp, 2Ch
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_PEM_write_bio_ASN1_stream endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SMIME_crlf_copy
_SMIME_crlf_copy proc near		; CODE XREF: _asn1_output_data+7Fp
					; _asn1_output_data+106p ...

var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 404h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		push	ebp
		push	esi
		mov	esi, [esp+40Ch+arg_4]
		push	edi
		mov	edi, [esp+410h+arg_0]
		call	_BIO_f_buffer
		push	eax
		call	_BIO_new
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_115
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+404h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
; ---------------------------------------------------------------------------

loc_115:				; CODE XREF: _SMIME_crlf_copy+3Bj
		push	esi
		push	ebp
		call	_BIO_push
		mov	esi, eax
		add	esp, 8
		mov	eax, [esp+410h+arg_8]
		test	al, al
		jns	short loc_16F
		push	400h
		lea	eax, [esp+414h+var_404]
		push	eax
		push	edi
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jle	loc_209

loc_147:				; CODE XREF: _SMIME_crlf_copy+A8j
		push	eax
		lea	eax, [esp+414h+var_404]
		push	eax
		push	esi
		call	_BIO_write
		push	400h
		lea	eax, [esp+420h+var_404]
		push	eax
		push	edi
		call	_BIO_read
		add	esp, 18h
		test	eax, eax
		jg	short loc_147
		jmp	loc_209
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: _SMIME_crlf_copy+6Aj
		test	al, 1
		jz	short loc_181
		push	offset ??_C@_0BN@PPPPFNNH@Content?9Type?3?5text?1plain?$AN?6?$AN?6?$AA@	; "Content-Type: text/plain\r\n\r\n"
		push	esi
		call	_BIO_printf
		add	esp, 8

loc_181:				; CODE XREF: _SMIME_crlf_copy+B1j
		push	400h
		lea	eax, [esp+414h+var_404]
		push	eax
		push	edi
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_209
		push	ebx
		nop	dword ptr [eax+00000000h]

loc_1A0:				; CODE XREF: _SMIME_crlf_copy+146j
		xor	ebx, ebx
		test	eax, eax
		jle	short loc_1CC
		lea	edx, [esp+414h+var_404]
		nop	word ptr [eax+eax+00h]

loc_1B0:				; CODE XREF: _SMIME_crlf_copy+108j
		mov	cl, [edx+eax-1]
		cmp	cl, 0Ah
		jnz	short loc_1C0
		mov	ebx, 1
		jmp	short loc_1C5
; ---------------------------------------------------------------------------

loc_1C0:				; CODE XREF: _SMIME_crlf_copy+F7j
		cmp	cl, 0Dh
		jnz	short loc_1CA

loc_1C5:				; CODE XREF: _SMIME_crlf_copy+FEj
		dec	eax
		test	eax, eax
		jg	short loc_1B0

loc_1CA:				; CODE XREF: _SMIME_crlf_copy+103j
		test	eax, eax

loc_1CC:				; CODE XREF: _SMIME_crlf_copy+E4j
		jz	short loc_1DD
		push	eax
		lea	eax, [esp+418h+var_404]
		push	eax
		push	esi
		call	_BIO_write
		add	esp, 0Ch

loc_1DD:				; CODE XREF: _SMIME_crlf_copy:loc_1CCj
		test	bl, bl
		jz	short loc_1F1
		push	2
		push	offset ??_C@_02PCIJFNDE@?$AN?6?$AA@ ; `string'
		push	esi
		call	_BIO_write
		add	esp, 0Ch

loc_1F1:				; CODE XREF: _SMIME_crlf_copy+11Fj
		push	400h
		lea	eax, [esp+418h+var_404]
		push	eax
		push	edi
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_1A0
		pop	ebx

loc_209:				; CODE XREF: _SMIME_crlf_copy+81j
					; _SMIME_crlf_copy+AAj	...
		push	0
		push	0
		push	0Bh
		push	esi
		call	_BIO_ctrl
		push	esi
		call	_BIO_pop
		push	ebp
		call	_BIO_free
		mov	ecx, [esp+428h+var_4]
		add	esp, 18h
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
_SMIME_crlf_copy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 244h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SMIME_read_ASN1
_SMIME_read_ASN1 proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 18h
		call	__chkstk
		mov	eax, [esp+18h+arg_4]
		mov	[esp+18h+var_18], 0
		test	eax, eax
		jz	short loc_263
		mov	dword ptr [eax], 0

loc_263:				; CODE XREF: _SMIME_read_ASN1+17j
		push	ebp
		mov	ebp, [esp+1Ch+arg_0]
		push	edi
		push	ebp
		call	_mime_parse_hdr
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_29E
		push	1B2h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CFh ; 'Ï'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_29E:				; CODE XREF: _SMIME_read_ASN1+32j
		push	esi
		lea	eax, [esp+24h+var_C]
		mov	[esp+24h+var_C], offset	??_C@_0N@MCOKKOFB@content?9type?$AA@ ; "content-type"
		push	eax
		push	edi
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	loc_687
		push	eax
		push	edi
		call	_sk_value
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_687
		mov	edx, [esi+4]
		test	edx, edx
		jz	loc_687
		mov	ecx, offset ??_C@_0BB@ILCPDBF@multipart?1signed?$AA@ ; "multipart/signed"
		mov	eax, edx
		push	ebx

loc_2E4:				; CODE XREF: _SMIME_read_ASN1+BAj
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_304
		test	bl, bl
		jz	short loc_300
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_304
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_2E4

loc_300:				; CODE XREF: _SMIME_read_ASN1+A8j
		xor	eax, eax
		jmp	short loc_309
; ---------------------------------------------------------------------------

loc_304:				; CODE XREF: _SMIME_read_ASN1+A4j
					; _SMIME_read_ASN1+B0j
		sbb	eax, eax
		or	eax, 1

loc_309:				; CODE XREF: _SMIME_read_ASN1+BEj
		test	eax, eax
		jnz	loc_59D
		lea	eax, [esp+28h+var_14]
		mov	[esp+28h+var_14], offset ??_C@_08KIKGFOKI@boundary?$AA@	; "boundary"
		push	eax
		push	dword ptr [esi+8]
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	loc_56A
		push	eax
		push	dword ptr [esi+8]
		call	_sk_value
		add	esp, 8
		test	eax, eax
		jz	loc_56A
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_56A
		lea	ecx, [esp+28h+var_18]
		push	ecx
		push	eax
		push	ebp
		call	_multi_split
		push	offset _mime_hdr_free
		push	edi
		mov	esi, eax
		call	_sk_pop_free
		add	esp, 14h
		test	esi, esi
		mov	esi, [esp+28h+var_18]
		jz	loc_556
		push	esi
		call	_sk_num
		add	esp, 4
		cmp	eax, 2
		jnz	loc_556
		push	1
		push	esi
		call	_sk_value
		push	eax
		mov	[esp+34h+var_18], eax
		call	_mime_parse_hdr
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_3B9
		push	1D2h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0D0h ; 'Ð'
		jmp	loc_4BB
; ---------------------------------------------------------------------------

loc_3B9:				; CODE XREF: _SMIME_read_ASN1+15Fj
		push	offset ??_C@_0N@MCOKKOFB@content?9type?$AA@ ; "content-type"
		push	edi
		call	_mime_hdr_find
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	loc_523
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jz	loc_523
		mov	edx, offset ??_C@_0BO@KCNJHHFC@application?1x?9pkcs7?9signature?$AA@ ; "application/x-pkcs7-signature"
		mov	eax, ecx
		nop

loc_3E4:				; CODE XREF: _SMIME_read_ASN1+1BAj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_404
		test	bl, bl
		jz	short loc_400
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_404
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_3E4

loc_400:				; CODE XREF: _SMIME_read_ASN1+1A8j
		xor	eax, eax
		jmp	short loc_409
; ---------------------------------------------------------------------------

loc_404:				; CODE XREF: _SMIME_read_ASN1+1A4j
					; _SMIME_read_ASN1+1B0j
		sbb	eax, eax
		or	eax, 1

loc_409:				; CODE XREF: _SMIME_read_ASN1+1BEj
		test	eax, eax
		jz	short loc_48A
		mov	eax, offset ??_C@_0BM@INAPNOAN@application?1pkcs7?9signature?$AA@ ; "application/pkcs7-signature"
		xchg	ax, ax

loc_414:				; CODE XREF: _SMIME_read_ASN1+1EAj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_434
		test	dl, dl
		jz	short loc_430
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_434
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_414

loc_430:				; CODE XREF: _SMIME_read_ASN1+1D8j
		xor	eax, eax
		jmp	short loc_439
; ---------------------------------------------------------------------------

loc_434:				; CODE XREF: _SMIME_read_ASN1+1D4j
					; _SMIME_read_ASN1+1E0j
		sbb	eax, eax
		or	eax, 1

loc_439:				; CODE XREF: _SMIME_read_ASN1+1EEj
		test	eax, eax
		jz	short loc_48A
		push	1E1h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0D5h ; 'Õ'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		push	dword ptr [ebp+4]
		push	offset ??_C@_06BPMLCLKK@type?3?5?$AA@ ;	"type: "
		push	2
		call	_ERR_add_error_data
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		push	offset _BIO_vfree
		push	esi
		call	_sk_pop_free
		add	esp, 30h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_48A:				; CODE XREF: _SMIME_read_ASN1+1C7j
					; _SMIME_read_ASN1+1F7j
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		push	[esp+30h+arg_8]
		mov	ebx, [esp+34h+var_18]
		push	ebx
		call	_b64_read_asn1
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_4DF
		push	1EAh
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CCh ; 'Ì'

loc_4BB:				; CODE XREF: _SMIME_read_ASN1+170j
					; _SMIME_read_ASN1+321j
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		push	offset _BIO_vfree
		push	esi
		call	_sk_pop_free
		add	esp, 1Ch
		xor	eax, eax

loc_4D7:				; CODE XREF: _SMIME_read_ASN1+415j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_4DF:				; CODE XREF: _SMIME_read_ASN1+266j
		mov	ebp, [esp+28h+arg_4]
		test	ebp, ebp
		jz	short loc_50B
		push	0
		push	esi
		call	_sk_value
		push	ebx
		mov	[ebp+0], eax
		call	_BIO_free
		push	esi
		call	_sk_free
		add	esp, 10h
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_50B:				; CODE XREF: _SMIME_read_ASN1+2A1j
		push	offset _BIO_vfree
		push	esi
		call	_sk_pop_free
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_523:				; CODE XREF: _SMIME_read_ASN1+187j
					; _SMIME_read_ASN1+192j
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		push	1DBh
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0D4h ; 'Ô'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_556:				; CODE XREF: _SMIME_read_ASN1+12Ej
					; _SMIME_read_ASN1+140j
		push	1C9h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0D2h ; 'Ò'
		jmp	loc_4BB
; ---------------------------------------------------------------------------

loc_56A:				; CODE XREF: _SMIME_read_ASN1+E7j
					; _SMIME_read_ASN1+FBj	...
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		push	1C3h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0D3h ; 'Ó'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_59D:				; CODE XREF: _SMIME_read_ASN1+C7j
		mov	ecx, offset ??_C@_0BJ@FHHCEEOK@application?1x?9pkcs7?9mime?$AA@	; "application/x-pkcs7-mime"
		mov	eax, edx

loc_5A4:				; CODE XREF: _SMIME_read_ASN1+37Aj
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_5C4
		test	bl, bl
		jz	short loc_5C0
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_5C4
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_5A4

loc_5C0:				; CODE XREF: _SMIME_read_ASN1+368j
		xor	eax, eax
		jmp	short loc_5C9
; ---------------------------------------------------------------------------

loc_5C4:				; CODE XREF: _SMIME_read_ASN1+364j
					; _SMIME_read_ASN1+370j
		sbb	eax, eax
		or	eax, 1

loc_5C9:				; CODE XREF: _SMIME_read_ASN1+37Ej
		test	eax, eax
		jz	short loc_63F
		mov	eax, offset ??_C@_0BH@CABCCFDD@application?1pkcs7?9mime?$AA@ ; "application/pkcs7-mime"
		xchg	ax, ax

loc_5D4:				; CODE XREF: _SMIME_read_ASN1+3AAj
		mov	cl, [edx]
		cmp	cl, [eax]
		jnz	short loc_5F4
		test	cl, cl
		jz	short loc_5F0
		mov	cl, [edx+1]
		cmp	cl, [eax+1]
		jnz	short loc_5F4
		add	edx, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_5D4

loc_5F0:				; CODE XREF: _SMIME_read_ASN1+398j
		xor	eax, eax
		jmp	short loc_5F9
; ---------------------------------------------------------------------------

loc_5F4:				; CODE XREF: _SMIME_read_ASN1+394j
					; _SMIME_read_ASN1+3A0j
		sbb	eax, eax
		or	eax, 1

loc_5F9:				; CODE XREF: _SMIME_read_ASN1+3AEj
		test	eax, eax
		jz	short loc_63F
		push	1FCh
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CDh ; 'Í'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		push	dword ptr [esi+4]
		push	offset ??_C@_06BPMLCLKK@type?3?5?$AA@ ;	"type: "
		push	2
		call	_ERR_add_error_data
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		add	esp, 28h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_63F:				; CODE XREF: _SMIME_read_ASN1+387j
					; _SMIME_read_ASN1+3B7j
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		push	[esp+30h+arg_8]
		push	ebp
		call	_b64_read_asn1
		add	esp, 10h
		test	eax, eax
		jnz	loc_4D7
		push	205h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CBh ; 'Ë'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_687:				; CODE XREF: _SMIME_read_ASN1+73j
					; _SMIME_read_ASN1+87j	...
		push	offset _mime_hdr_free
		push	edi
		call	_sk_pop_free
		push	1B8h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0D1h ; 'Ñ'
		push	0D4h ; 'Ô'
		push	0Dh
		call	_ERR_put_error
		add	esp, 1Ch
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 18h
		retn
_SMIME_read_ASN1 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SMIME_text
_SMIME_text	proc near

var_1010	= dword	ptr -1010h
var_1004	= byte ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 1010h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1010h+var_4], eax
		push	ebp
		mov	ebp, [esp+1014h+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+101Ch+arg_0]
		push	edi
		call	_mime_parse_hdr
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_72C
		push	238h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CFh ; 'Ï'
		push	0D5h ; 'Õ'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+1010h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1010h
		retn
; ---------------------------------------------------------------------------

loc_72C:				; CODE XREF: _SMIME_text+36j
		push	ebx
		lea	eax, [esp+1020h+var_1010]
		mov	[esp+1020h+var_1010], offset ??_C@_0N@MCOKKOFB@content?9type?$AA@ ; "content-type"
		push	eax
		push	esi
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	loc_82A
		push	eax
		push	esi
		call	_sk_value
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_82A
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_82A
		mov	edx, offset ??_C@_0L@NPNLKGOJ@text?1plain?$AA@ ; "text/plain"

loc_76F:				; CODE XREF: _SMIME_text+CDj
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_78F
		test	al, al
		jz	short loc_78B
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_78F
		add	ecx, 2
		add	edx, 2
		test	al, al
		jnz	short loc_76F

loc_78B:				; CODE XREF: _SMIME_text+BBj
		xor	eax, eax
		jmp	short loc_794
; ---------------------------------------------------------------------------

loc_78F:				; CODE XREF: _SMIME_text+B7j
					; _SMIME_text+C3j
		sbb	eax, eax
		or	eax, 1

loc_794:				; CODE XREF: _SMIME_text+D1j
		test	eax, eax
		jz	short loc_7D5
		push	241h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CDh ; 'Í'
		push	0D5h ; 'Õ'
		push	0Dh
		call	_ERR_put_error
		push	dword ptr [ebx+4]
		push	offset ??_C@_06BPMLCLKK@type?3?5?$AA@ ;	"type: "
		push	2
		call	_ERR_add_error_data
		push	offset _mime_hdr_free
		push	esi
		call	_sk_pop_free
		add	esp, 28h
		jmp	loc_853
; ---------------------------------------------------------------------------

loc_7D5:				; CODE XREF: _SMIME_text+DAj
		push	offset _mime_hdr_free
		push	esi
		call	_sk_pop_free
		push	1000h
		lea	eax, [esp+102Ch+var_1004]
		push	eax
		push	edi
		call	_BIO_read
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jle	short loc_821
		nop	dword ptr [eax]

loc_7FC:				; CODE XREF: _SMIME_text+163j
		push	ecx
		lea	eax, [esp+1024h+var_1004]
		push	eax
		push	ebp
		call	_BIO_write
		push	1000h
		lea	eax, [esp+1030h+var_1004]
		push	eax
		push	edi
		call	_BIO_read
		mov	ecx, eax
		add	esp, 18h
		test	ecx, ecx
		jg	short loc_7FC

loc_821:				; CODE XREF: _SMIME_text+13Bj
		xor	eax, eax
		test	ecx, ecx
		setns	al
		jmp	short loc_855
; ---------------------------------------------------------------------------

loc_82A:				; CODE XREF: _SMIME_text+89j
					; _SMIME_text+9Dj ...
		push	23Ch
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CEh ; 'Î'
		push	0D5h ; 'Õ'
		push	0Dh
		call	_ERR_put_error
		push	offset _mime_hdr_free
		push	esi
		call	_sk_pop_free
		add	esp, 1Ch

loc_853:				; CODE XREF: _SMIME_text+114j
		xor	eax, eax

loc_855:				; CODE XREF: _SMIME_text+16Cj
		mov	ecx, [esp+1020h+var_4]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1010h
		retn
_SMIME_text	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 870h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SMIME_write_ASN1
_SMIME_write_ASN1 proc near

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= xmmword ptr -28h
var_18		= xmmword ptr -18h
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 40h ; '@'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+40h+var_4], eax
		mov	eax, [esp+40h+arg_4]
		mov	ecx, [esp+40h+arg_C]
		mov	edx, [esp+40h+arg_8]
		mov	[esp+40h+var_38], eax
		mov	eax, [esp+40h+arg_18]
		push	ebx
		mov	[esp+44h+var_34], eax
		xor	ebx, ebx
		mov	eax, [esp+44h+arg_1C]
		test	ecx, 400h
		push	esi
		mov	esi, [esp+48h+arg_0]
		push	edi
		mov	[esp+4Ch+var_3C], eax
		mov	edi, offset ??_C@_0BD@NDADAIF@application?1pkcs7?9?$AA@	; "application/pkcs7-"
		mov	eax, offset ??_C@_0BF@GKPLIGCF@application?1x?9pkcs7?9?$AA@ ; "application/x-pkcs7-"
		mov	[esp+4Ch+var_2C], edx
		cmovz	eax, edi
		mov	[esp+4Ch+var_40], offset ??_C@_09DFGCBALL@smime?4p7m?$AA@ ; "smime.p7m"
		test	ecx, 800h
		mov	[esp+4Ch+var_30], eax
		mov	edi, offset ??_C@_02PCIJFNDE@?$AN?6?$AA@ ; `string'
		mov	eax, offset ??_C@_01EEMJAFIK@?6?$AA@ ; `string'
		cmovz	edi, eax
		test	cl, 40h
		jz	loc_AC0
		test	edx, edx
		jz	loc_AC0
		lea	eax, [esp+4Ch+var_28]
		push	20h ; ' '
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		jns	short loc_91C

loc_908:				; CODE XREF: _SMIME_write_ASN1+1CCj
					; _SMIME_write_ASN1+32Fj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_91C:				; CODE XREF: _SMIME_write_ASN1+96j
		movups	xmm3, [esp+4Ch+var_28]
		push	edi
		movaps	xmm2, ds:__xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a
		pand	xmm3, ds:__xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
		pcmpgtb	xmm2, xmm3
		mov	[esp+50h+var_8], bl
		pandn	xmm2, ds:__xmm@ffffffffffffffffffffffffffffffff
		movaps	xmm0, xmm3
		paddb	xmm3, ds:__xmm@37373737373737373737373737373737
		movaps	xmm1, xmm2
		paddb	xmm0, ds:__xmm@30303030303030303030303030303030
		pand	xmm3, xmm2
		movups	xmm2, [esp+50h+var_18]
		push	offset ??_C@_0BE@MBODPAJ@MIME?9Version?3?51?40?$CFs?$AA@ ; "MIME-Version: 1.0%s"
		pandn	xmm1, xmm0
		pand	xmm2, ds:__xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
		por	xmm1, xmm3
		movaps	xmm3, ds:__xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a
		movaps	xmm0, xmm2
		paddb	xmm0, ds:__xmm@30303030303030303030303030303030
		pcmpgtb	xmm3, xmm2
		pandn	xmm3, ds:__xmm@ffffffffffffffffffffffffffffffff
		paddb	xmm2, ds:__xmm@37373737373737373737373737373737
		movups	[esp+54h+var_28], xmm1
		push	esi
		movaps	xmm1, xmm3
		pand	xmm2, xmm3
		pandn	xmm1, xmm0
		por	xmm1, xmm2
		movups	[esp+58h+var_18], xmm1
		call	_BIO_printf
		push	offset ??_C@_0CA@OLICOBKO@Content?9Type?3?5multipart?1signed?$DL?$AA@ ;	"Content-Type: multipart/signed;"
		push	esi
		call	_BIO_printf
		mov	ebx, [esp+60h+var_30]
		push	ebx
		push	offset ??_C@_0BJ@LMOEKNCM@?5protocol?$DN?$CC?$CFssignature?$CC?$DL?$AA@	; " protocol=\"%ssignature\";"
		push	esi
		call	_BIO_printf
		push	offset ??_C@_09DJGEKGKI@?5micalg?$DN?$CC?$AA@ ;	" micalg=\""
		push	esi
		call	_BIO_puts
		push	[esp+74h+var_34]
		push	esi
		call	_asn1_write_micalg
		push	edi
		push	edi
		lea	eax, [esp+84h+var_28]
		push	eax
		push	offset ??_C@_0BJ@PGDHPNJG@?$CC?$DL?5boundary?$DN?$CC?9?9?9?9?$CFs?$CC?$CFs?$CFs?$AA@ ; "\"; boundary=\"----%s\"%s%s"
		push	esi
		call	_BIO_printf
		add	esp, 44h
		push	edi
		push	edi
		push	offset ??_C@_0CF@PFAGFGFE@This?5is?5an?5S?1MIME?5signed?5message@ ; "This is an	S/MIME signed message%s%s"
		push	esi
		call	_BIO_printf
		push	edi
		lea	eax, [esp+60h+var_28]
		push	eax
		push	offset ??_C@_0L@CNHJFJFM@?9?9?9?9?9?9?$CFs?$CFs?$AA@ ; "------%s%s"
		push	esi
		call	_BIO_printf
		push	[esp+6Ch+var_3C]
		mov	eax, [esp+70h+arg_C]
		push	eax
		push	[esp+74h+var_38]
		push	[esp+78h+var_2C]
		push	esi
		call	_asn1_output_data
		add	esp, 34h
		test	eax, eax
		jz	loc_908
		push	edi
		lea	eax, [esp+50h+var_28]
		push	eax
		push	edi
		push	offset ??_C@_0N@LEAPAFNA@?$CFs?9?9?9?9?9?9?$CFs?$CFs?$AA@ ; "%s------%s%s"
		push	esi
		call	_BIO_printf
		push	ebx
		push	offset ??_C@_0BL@IBDMLFLD@Content?9Type?3?5?$CFssignature?$DL?$AA@ ; "Content-Type: %ssignature;"
		push	esi
		call	_BIO_printf
		push	edi
		push	offset ??_C@_0BE@BMNPFHLD@?5name?$DN?$CCsmime?4p7s?$CC?$CFs?$AA@ ; " name=\"smime.p7s\"%s"
		push	esi
		call	_BIO_printf
		push	edi
		push	offset ??_C@_0CE@LMBKLCNI@Content?9Transfer?9Encoding?3?5base6@	; "Content-Transfer-Encoding: base64%s"
		push	esi
		call	_BIO_printf
		push	offset ??_C@_0CB@JNLOJFLI@Content?9Disposition?3?5attachment?$DL@ ; "Content-Disposition: attachment;"
		push	esi
		call	_BIO_printf
		add	esp, 40h
		push	edi
		push	edi
		push	offset ??_C@_0BK@OFJEPDGB@?5filename?$DN?$CCsmime?4p7s?$CC?$CFs?$CFs?$AA@ ; " filename=\"smime.p7s\"%s%s"
		push	esi
		call	_BIO_printf
		push	[esp+5Ch+var_3C]
		push	0
		push	0
		push	[esp+68h+var_38]
		push	esi
		call	_B64_write_ASN1
		push	edi
		push	edi
		lea	eax, [esp+78h+var_28]
		push	eax
		push	edi
		push	offset ??_C@_0BB@CEFPDGPA@?$CFs?9?9?9?9?9?9?$CFs?9?9?$CFs?$CFs?$AA@ ; "%s------%s--%s%s"
		push	esi
		call	_BIO_printf
		add	esp, 3Ch
		jmp	loc_BB4
; ---------------------------------------------------------------------------

loc_AC0:				; CODE XREF: _SMIME_write_ASN1+77j
					; _SMIME_write_ASN1+7Fj
		mov	eax, [esp+4Ch+arg_10]
		cmp	eax, 17h
		jnz	short loc_AD0
		mov	ebx, offset ??_C@_0P@KCEEPGAP@enveloped?9data?$AA@ ; "enveloped-data"
		jmp	short loc_B17
; ---------------------------------------------------------------------------

loc_AD0:				; CODE XREF: _SMIME_write_ASN1+257j
		cmp	eax, 16h
		jnz	short loc_B03
		cmp	[esp+4Ch+arg_14], 0CCh ; 'Ì'
		jnz	short loc_AE6
		mov	ebx, offset ??_C@_0P@JEJBLIHN@signed?9receipt?$AA@ ; "signed-receipt"
		jmp	short loc_B17
; ---------------------------------------------------------------------------

loc_AE6:				; CODE XREF: _SMIME_write_ASN1+26Dj
		push	[esp+4Ch+var_34]
		call	_sk_num
		add	esp, 4
		mov	ebx, offset ??_C@_0M@MHALIMFG@signed?9data?$AA@	; "signed-data"
		test	eax, eax
		mov	ecx, offset ??_C@_0L@IFNGEJCO@certs?9only?$AA@ ; "certs-only"
		cmovs	ebx, ecx
		jmp	short loc_B17
; ---------------------------------------------------------------------------

loc_B03:				; CODE XREF: _SMIME_write_ASN1+263j
		cmp	eax, 312h
		jnz	short loc_B17
		mov	ebx, offset ??_C@_0BA@DFPMGHIN@compressed?9data?$AA@ ; "compressed-data"
		mov	[esp+4Ch+var_40], offset ??_C@_09DAOBJECN@smime?4p7z?$AA@ ; "smime.p7z"

loc_B17:				; CODE XREF: _SMIME_write_ASN1+25Ej
					; _SMIME_write_ASN1+274j ...
		push	edi
		push	offset ??_C@_0BE@MBODPAJ@MIME?9Version?3?51?40?$CFs?$AA@ ; "MIME-Version: 1.0%s"
		push	esi
		call	_BIO_printf
		push	offset ??_C@_0CB@JNLOJFLI@Content?9Disposition?3?5attachment?$DL@ ; "Content-Disposition: attachment;"
		push	esi
		call	_BIO_printf
		push	edi
		push	[esp+64h+var_40]
		push	offset ??_C@_0BB@OFJOJND@?5filename?$DN?$CC?$CFs?$CC?$CFs?$AA@ ; " filename=\"%s\"%s"
		push	esi
		call	_BIO_printf
		push	[esp+70h+var_30]
		push	offset ??_C@_0BG@GOHJPKDF@Content?9Type?3?5?$CFsmime?$DL?$AA@ ;	"Content-Type: %smime;"
		push	esi
		call	_BIO_printf
		add	esp, 30h
		test	ebx, ebx
		jz	short loc_B63
		push	ebx
		push	offset ??_C@_0BA@ICJPMDJA@?5smime?9type?$DN?$CFs?$DL?$AA@ ; " smime-type=%s;"
		push	esi
		call	_BIO_printf
		add	esp, 0Ch

loc_B63:				; CODE XREF: _SMIME_write_ASN1+2E2j
		push	edi
		push	[esp+50h+var_40]
		push	offset ??_C@_0N@LOHHOGEF@?5name?$DN?$CC?$CFs?$CC?$CFs?$AA@ ; " name=\"%s\"%s"
		push	esi
		call	_BIO_printf
		push	edi
		push	edi
		push	offset ??_C@_0CG@FGBKIPJD@Content?9Transfer?9Encoding?3?5base6@	; "Content-Transfer-Encoding: base64%s%s"
		push	esi
		call	_BIO_printf
		push	[esp+6Ch+var_3C]
		mov	eax, [esp+70h+arg_C]
		push	eax
		push	[esp+74h+var_2C]
		push	[esp+78h+var_38]
		push	esi
		call	_B64_write_ASN1
		add	esp, 34h
		test	eax, eax
		jz	loc_908
		push	edi
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		add	esp, 0Ch

loc_BB4:				; CODE XREF: _SMIME_write_ASN1+24Bj
		mov	ecx, [esp+4Ch+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
_SMIME_write_ASN1 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BCCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_output_data proc near		; CODE XREF: _SMIME_write_ASN1+1C2p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		mov	ebx, [esp+10h+arg_C]
		mov	eax, ebx
		push	ebp
		mov	ebp, [esp+14h+arg_10]
		and	eax, 8040h
		push	esi
		mov	esi, [ebp+10h]
		cmp	eax, 40h ; '@'
		jnz	loc_CC9
		test	esi, esi
		jz	loc_CA2
		cmp	dword ptr [esi+10h], 0
		jz	loc_CA2
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		lea	eax, [esp+1Ch+var_C]
		push	eax
		push	ebp
		lea	eax, [esp+24h+arg_8]
		mov	[esp+24h+var_C], edi
		push	eax
		mov	[esp+28h+var_8], 0
		mov	[esp+28h+var_4], 0
		mov	eax, [esi+10h]
		push	0Ch
		call	eax
		add	esp, 10h
		test	eax, eax
		jg	short loc_C42
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_C42:				; CODE XREF: _asn1_output_data+6Aj
		push	ebx
		push	[esp+20h+var_8]
		push	[esp+24h+arg_4]
		call	_SMIME_crlf_copy
		lea	eax, [esp+28h+var_C]
		push	eax
		push	ebp
		lea	eax, [esp+30h+arg_8]
		push	eax
		mov	eax, [esi+10h]
		push	0Dh
		call	eax
		mov	esi, [esp+38h+var_8]
		xor	ecx, ecx
		add	esp, 1Ch
		mov	ebx, 1
		test	eax, eax
		cmovle	ebx, ecx
		cmp	esi, edi
		jz	short loc_C98
		nop	dword ptr [eax]

loc_C7C:				; CODE XREF: _asn1_output_data+CAj
		push	esi
		call	_BIO_pop
		push	[esp+20h+var_8]
		mov	esi, eax
		call	_BIO_free
		add	esp, 8
		mov	[esp+1Ch+var_8], esi
		cmp	esi, edi
		jnz	short loc_C7C

loc_C98:				; CODE XREF: _asn1_output_data+ABj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_CA2:				; CODE XREF: _asn1_output_data+2Aj
					; _asn1_output_data+34j
		push	17Eh
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0CAh ; 'Ê'
		push	0D6h ; 'Ö'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_CC9:				; CODE XREF: _asn1_output_data+22j
		push	ebx
		push	[esp+1Ch+arg_0]
		push	[esp+20h+arg_4]
		call	_SMIME_crlf_copy
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_asn1_output_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CE8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_write_micalg proc	near		; CODE XREF: _SMIME_write_ASN1+175p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_4]
		xor	eax, eax
		push	edi
		mov	[esp+1Ch+var_4], eax
		xor	ebp, ebp
		xor	ebx, ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_E19
		mov	esi, [esp+18h+arg_0]

loc_D19:				; CODE XREF: _asn1_write_micalg+12Bj
		test	ebp, ebp
		jz	short loc_D2D
		push	1
		push	offset ??_C@_01IHBHIGKO@?0?$AA@	; `string'
		push	esi
		call	_BIO_write
		add	esp, 0Ch

loc_D2D:				; CODE XREF: _asn1_write_micalg+33j
		push	ebx
		push	edi
		mov	ebp, 1
		call	_sk_value
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		mov	edi, eax
		push	edi
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 14h
		test	eax, eax
		jz	short loc_D91
		mov	eax, [eax+48h]
		test	eax, eax
		jz	short loc_D91
		lea	ecx, [esp+18h+var_8]
		push	ecx
		push	0
		push	2
		push	0
		call	eax
		add	esp, 10h
		test	eax, eax
		jle	short loc_D88
		push	[esp+18h+var_8]
		push	esi
		call	_BIO_puts
		push	[esp+20h+var_8]
		call	_CRYPTO_free
		add	esp, 0Ch
		jmp	short loc_E03
; ---------------------------------------------------------------------------

loc_D88:				; CODE XREF: _asn1_write_micalg+86j
		cmp	eax, 0FFFFFFFEh
		jnz	loc_E34

loc_D91:				; CODE XREF: _asn1_write_micalg+6Bj
					; _asn1_write_micalg+72j
		cmp	edi, 2A1h
		jg	short loc_DC9
		jz	short loc_DC2
		cmp	edi, 4
		jz	short loc_DBB
		cmp	edi, 40h ; '@'
		jz	short loc_DB4
		cmp	edi, 2A0h
		jnz	short loc_DD9
		push	offset ??_C@_07LDMAFAJ@sha?9256?$AA@ ; "sha-256"
		jmp	short loc_DFA
; ---------------------------------------------------------------------------

loc_DB4:				; CODE XREF: _asn1_write_micalg+BBj
		push	offset ??_C@_04PGHFOLLE@sha1?$AA@ ; "sha1"
		jmp	short loc_DFA
; ---------------------------------------------------------------------------

loc_DBB:				; CODE XREF: _asn1_write_micalg+B6j
		push	offset ??_C@_03PKBIKOHH@md5?$AA@ ; `string'
		jmp	short loc_DFA
; ---------------------------------------------------------------------------

loc_DC2:				; CODE XREF: _asn1_write_micalg+B1j
		push	offset ??_C@_07IJGOJDLN@sha?9384?$AA@ ;	"sha-384"
		jmp	short loc_DFA
; ---------------------------------------------------------------------------

loc_DC9:				; CODE XREF: _asn1_write_micalg+AFj
		cmp	edi, 2A2h
		jz	short loc_DF5
		cmp	edi, 329h
		jz	short loc_E26

loc_DD9:				; CODE XREF: _asn1_write_micalg+C3j
		cmp	[esp+18h+var_4], 0
		jz	short loc_DE4
		xor	ebp, ebp
		jmp	short loc_E03
; ---------------------------------------------------------------------------

loc_DE4:				; CODE XREF: _asn1_write_micalg+F6j
		push	offset ??_C@_07CIFAGBMG@unknown?$AA@ ; "unknown"
		push	esi
		call	_BIO_puts
		mov	[esp+20h+var_4], ebp
		jmp	short loc_E00
; ---------------------------------------------------------------------------

loc_DF5:				; CODE XREF: _asn1_write_micalg+E7j
		push	offset ??_C@_07PFIOFAGI@sha?9512?$AA@ ;	"sha-512"

loc_DFA:				; CODE XREF: _asn1_write_micalg+CAj
					; _asn1_write_micalg+D1j ...
		push	esi
		call	_BIO_puts

loc_E00:				; CODE XREF: _asn1_write_micalg+10Bj
		add	esp, 8

loc_E03:				; CODE XREF: _asn1_write_micalg+9Ej
					; _asn1_write_micalg+FAj
		mov	edi, [esp+18h+arg_4]
		inc	ebx
		push	edi
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	loc_D19

loc_E19:				; CODE XREF: _asn1_write_micalg+27j
		mov	eax, 1

$err$32:
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_E26:				; CODE XREF: _asn1_write_micalg+EFj
		push	offset ??_C@_0N@FJDLKGKL@gostr3411?994?$AA@ ; "gostr3411-94"
		push	esi
		call	_BIO_puts
		add	esp, 8

loc_E34:				; CODE XREF: _asn1_write_micalg+A3j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
_asn1_write_micalg endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_b64_read_asn1	proc near		; CODE XREF: _SMIME_read_ASN1+25Ap
					; _SMIME_read_ASN1+40Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_BIO_f_base64
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_E74
		push	0BAh ; 'º'
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	41h ; 'A'
		push	0D1h ; 'Ñ'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E74:				; CODE XREF: _b64_read_asn1+13j
		push	ebx
		push	edi
		push	[esp+0Ch+arg_0]
		push	esi
		call	_BIO_push
		mov	edi, eax
		push	0
		push	edi
		push	[esp+1Ch+arg_4]
		call	_ASN1_item_d2i_bio
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_EB2
		push	0C0h ; 'À'
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	6Eh ; 'n'
		push	0D1h ; 'Ñ'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_EB2:				; CODE XREF: _b64_read_asn1+55j
		push	0
		push	0
		push	0Bh
		push	edi
		call	_BIO_ctrl
		push	edi
		call	_BIO_pop
		push	esi
		call	_BIO_free
		add	esp, 18h
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
_b64_read_asn1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ED4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_bio_stream
_i2d_ASN1_bio_stream proc near		; CODE XREF: _B64_write_ASN1+53p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		push	edi
		test	esi, 1000h
		jz	short loc_F56
		push	[esp+0Ch+arg_10]
		mov	ebx, [esp+10h+arg_0]
		push	[esp+10h+arg_4]
		push	ebx
		call	_BIO_new_NDEF
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_F1C
		push	7Dh ; '}'
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	41h ; 'A'
		push	0D3h ; 'Ó'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F1C:				; CODE XREF: _i2d_ASN1_bio_stream+28j
		push	esi
		push	edi
		push	[esp+14h+arg_8]
		call	_SMIME_crlf_copy
		push	0
		push	0
		push	0Bh
		push	edi
		call	_BIO_ctrl
		add	esp, 1Ch

loc_F36:				; CODE XREF: _i2d_ASN1_bio_stream+77j
		push	edi
		call	_BIO_pop
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 8
		mov	edi, esi
		cmp	esi, ebx
		jnz	short loc_F36
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F56:				; CODE XREF: _i2d_ASN1_bio_stream+Dj
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		push	[esp+14h+arg_10]
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		retn
_i2d_ASN1_bio_stream endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl mime_bound_check(char *Str1, int,	char *Str2, size_t MaxCount)
_mime_bound_check proc near		; CODE XREF: _multi_split+9Bp

Str1		= dword	ptr  4
arg_4		= dword	ptr  8
Str2		= dword	ptr  0Ch
MaxCount	= dword	ptr  10h

		mov	ecx, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+Str1]
		push	esi
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_F91
		mov	ecx, ebx
		lea	edx, [ecx+1]

loc_F88:				; CODE XREF: _mime_bound_check+19j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_F88
		sub	ecx, edx

loc_F91:				; CODE XREF: _mime_bound_check+Dj
		mov	esi, [esp+8+MaxCount]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_FAD
		mov	esi, [esp+8+Str2]
		lea	edx, [esi+1]
		nop	dword ptr [eax]

loc_FA4:				; CODE XREF: _mime_bound_check+35j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_FA4
		sub	esi, edx

loc_FAD:				; CODE XREF: _mime_bound_check+24j
		lea	eax, [esi+2]
		cmp	eax, ecx
		jle	short loc_FB9
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_FB9:				; CODE XREF: _mime_bound_check+3Ej
		push	edi
		mov	edi, dword ptr ds:__imp__strncmp
		push	2		; MaxCount
		push	offset ??_C@_02BAABKJLB@?9?9?$AA@ ; "--"
		push	ebx		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000
		push	esi		; MaxCount
		push	[esp+10h+Str2]	; Str2
		lea	eax, [ebx+2]
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000
		push	2		; MaxCount
		lea	eax, [ebx+2]
		add	eax, esi
		push	offset ??_C@_02BAABKJLB@?9?9?$AA@ ; "--"
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		add	eax, 2
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000:				; CODE XREF: _mime_bound_check+5Bj
					; _mime_bound_check+6Dj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_mime_bound_check endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1008h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_hdr_addparam proc	near		; CODE XREF: _mime_parse_hdr+18Ep
					; _mime_parse_hdr+263p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		test	eax, eax
		jz	short loc_105B
		push	eax
		call	_BUF_strdup
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1074
		cmp	byte ptr [ebx],	0
		mov	esi, ebx
		jz	short loc_105D
		push	ebp
		mov	ebp, dword ptr ds:__imp__tolower
		push	edi
		nop	dword ptr [eax+eax+00000000h]

loc_1038:				; CODE XREF: _mime_hdr_addparam+4Dj
		movzx	edi, byte ptr [esi]
		push	edi		; C
		call	dword ptr ds:__imp__isupper
		add	esp, 4
		test	eax, eax
		jz	short loc_1051
		push	edi		; C
		call	ebp ; __imp__tolower
		add	esp, 4
		mov	[esi], al

loc_1051:				; CODE XREF: _mime_hdr_addparam+3Fj
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_1038
		pop	edi
		pop	ebp
		jmp	short loc_105D
; ---------------------------------------------------------------------------

loc_105B:				; CODE XREF: _mime_hdr_addparam+8j
		xor	ebx, ebx

loc_105D:				; CODE XREF: _mime_hdr_addparam+1Ej
					; _mime_hdr_addparam+51j
		mov	eax, [esp+8+arg_8]
		test	eax, eax
		jz	short loc_1079
		push	eax
		call	_BUF_strdup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_107B

loc_1074:				; CODE XREF: _mime_hdr_addparam+17j
					; _mime_hdr_addparam+89j
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1079:				; CODE XREF: _mime_hdr_addparam+5Bj
		xor	esi, esi

loc_107B:				; CODE XREF: _mime_hdr_addparam+6Aj
		push	360h
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	8
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1074
		mov	[eax], ebx
		mov	[eax+4], esi
		push	eax
		mov	eax, [esp+0Ch+arg_0]
		push	dword ptr [eax+8]
		call	_sk_push
		add	esp, 8
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
_mime_hdr_addparam endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_hdr_cmp	proc near		; DATA XREF: _mime_parse_hdr+27o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_10ED
		mov	eax, [ecx]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_10ED

loc_10C8:				; CODE XREF: _mime_hdr_cmp+32j
		mov	cl, [edx]
		cmp	cl, [eax]
		jnz	short loc_10E7
		test	cl, cl
		jz	short loc_10E4
		mov	cl, [edx+1]
		cmp	cl, [eax+1]
		jnz	short loc_10E7
		add	edx, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_10C8

loc_10E4:				; CODE XREF: _mime_hdr_cmp+20j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10E7:				; CODE XREF: _mime_hdr_cmp+1Cj
					; _mime_hdr_cmp+28j
		sbb	eax, eax
		or	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_10ED:				; CODE XREF: _mime_hdr_cmp+Ej
					; _mime_hdr_cmp+16j
		mov	eax, [ecx]
		xor	ecx, ecx
		cmp	[eax], ecx
		setnz	cl
		xor	eax, eax
		test	edx, edx
		setnz	al
		sub	eax, ecx
		retn
_mime_hdr_cmp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1100h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_hdr_find	proc near		; CODE XREF: _SMIME_read_ASN1+17Bp

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_C], eax
		lea	eax, [esp+0Ch+var_C]
		push	eax
		push	[esp+10h+arg_0]
		call	_sk_find
		add	esp, 8
		test	eax, eax
		jns	short loc_112B
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_112B:				; CODE XREF: _mime_hdr_find+23j
		push	eax
		push	[esp+10h+arg_0]
		call	_sk_value
		add	esp, 8
		add	esp, 0Ch
		retn
_mime_hdr_find	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 113Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_hdr_free	proc near		; DATA XREF: _SMIME_read_ASN1+118o
					; _SMIME_read_ASN1+223o ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1150
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1150:				; CODE XREF: _mime_hdr_free+9j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1160
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1160:				; CODE XREF: _mime_hdr_free+19j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_1175
		push	offset _mime_param_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_1175:				; CODE XREF: _mime_hdr_free+29j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_mime_hdr_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1180h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_hdr_new	proc near		; CODE XREF: _mime_parse_hdr+126p
					; _mime_parse_hdr+206p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_0]
		push	ebx
		mov	ebx, dword ptr ds:__imp__tolower
		push	ebp
		mov	ebp, dword ptr ds:__imp__isupper
		push	esi
		push	edi
		test	eax, eax
		jz	short loc_11E1
		push	eax
		call	_BUF_strdup
		mov	ecx, eax
		add	esp, 4
		mov	[esp+14h+arg_0], ecx
		test	ecx, ecx
		jnz	short loc_11BD

loc_11B5:				; CODE XREF: _mime_hdr_new+82j
					; _mime_hdr_new+CBj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_11BD:				; CODE XREF: _mime_hdr_new+33j
		cmp	byte ptr [ecx],	0
		mov	esi, ecx
		jz	short loc_11E9

loc_11C4:				; CODE XREF: _mime_hdr_new+5Dj
		movzx	edi, byte ptr [esi]
		push	edi		; C
		call	ebp ; __imp__isupper
		add	esp, 4
		test	eax, eax
		jz	short loc_11D9
		push	edi		; C
		call	ebx ; __imp__tolower
		add	esp, 4
		mov	[esi], al

loc_11D9:				; CODE XREF: _mime_hdr_new+4Fj
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_11C4
		jmp	short loc_11E9
; ---------------------------------------------------------------------------

loc_11E1:				; CODE XREF: _mime_hdr_new+20j
		mov	[esp+14h+arg_0], 0

loc_11E9:				; CODE XREF: _mime_hdr_new+42j
					; _mime_hdr_new+5Fj
		mov	eax, [esp+14h+arg_4]
		test	eax, eax
		jz	short loc_1231
		push	eax
		call	_BUF_strdup
		mov	edi, eax
		add	esp, 4
		mov	[esp+14h+var_4], edi
		test	edi, edi
		jz	short loc_11B5
		cmp	byte ptr [edi],	0
		mov	esi, edi
		jz	short loc_1233
		nop	dword ptr [eax+eax+00h]

loc_1210:				; CODE XREF: _mime_hdr_new+A9j
		movzx	edi, byte ptr [esi]
		push	edi		; C
		call	ebp ; __imp__isupper
		add	esp, 4
		test	eax, eax
		jz	short loc_1225
		push	edi		; C
		call	ebx ; __imp__tolower
		add	esp, 4
		mov	[esi], al

loc_1225:				; CODE XREF: _mime_hdr_new+9Bj
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_1210
		mov	edi, [esp+14h+var_4]
		jmp	short loc_1233
; ---------------------------------------------------------------------------

loc_1231:				; CODE XREF: _mime_hdr_new+6Fj
		xor	edi, edi

loc_1233:				; CODE XREF: _mime_hdr_new+89j
					; _mime_hdr_new+AFj
		push	33Dh
		push	offset ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ ; ".\\crypto\\asn1\\asn_mime.c"
		push	0Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_11B5
		mov	eax, [esp+14h+arg_0]
		push	offset _mime_param_cmp
		mov	[esi], eax
		mov	[esi+4], edi
		call	_sk_new
		add	esp, 4
		mov	[esi+8], eax
		xor	ecx, ecx
		test	eax, eax
		cmovz	esi, ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_mime_hdr_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 127Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_param_cmp	proc near		; DATA XREF: _mime_hdr_new+D5o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_12B9
		mov	eax, [ecx]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_12B9

loc_1294:				; CODE XREF: _mime_param_cmp+32j
		mov	cl, [edx]
		cmp	cl, [eax]
		jnz	short loc_12B3
		test	cl, cl
		jz	short loc_12B0
		mov	cl, [edx+1]
		cmp	cl, [eax+1]
		jnz	short loc_12B3
		add	edx, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_1294

loc_12B0:				; CODE XREF: _mime_param_cmp+20j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_12B3:				; CODE XREF: _mime_param_cmp+1Cj
					; _mime_param_cmp+28j
		sbb	eax, eax
		or	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_12B9:				; CODE XREF: _mime_param_cmp+Ej
					; _mime_param_cmp+16j
		mov	eax, [ecx]
		xor	ecx, ecx
		cmp	[eax], ecx
		setnz	cl
		xor	eax, eax
		test	edx, edx
		setnz	al
		sub	eax, ecx
		retn
_mime_param_cmp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_param_find proc near

var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], eax
		lea	eax, [esp+0Ch+var_8]
		push	eax
		push	dword ptr [esi+8]
		call	_sk_find
		add	esp, 8
		test	eax, eax
		jns	short loc_12FE
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_12FE:				; CODE XREF: _mime_param_find+29j
		push	eax
		push	dword ptr [esi+8]
		call	_sk_value
		add	esp, 8
		pop	esi
		add	esp, 8
		retn
_mime_param_find endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1310h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_param_free proc near		; DATA XREF: _mime_hdr_free+2Bo

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1324
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1324:				; CODE XREF: _mime_param_free+9j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1334
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1334:				; CODE XREF: _mime_param_free+19j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_mime_param_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1340h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mime_parse_hdr	proc near		; CODE XREF: _SMIME_read_ASN1+26p
					; _SMIME_read_ASN1+153p ...

var_418		= dword	ptr -418h
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 418h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+418h+var_4], eax
		push	ebx
		mov	ebx, [esp+41Ch+arg_0]
		push	esi
		xor	esi, esi
		mov	[esp+420h+var_408], ebx
		push	offset _mime_hdr_cmp
		mov	[esp+424h+var_414], esi
		mov	[esp+424h+var_410], esi
		call	_sk_new
		add	esp, 4
		mov	[esp+420h+var_40C], eax
		test	eax, eax
		jnz	short loc_139B
		pop	esi
		pop	ebx
		mov	ecx, [esp+418h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 418h
		retn
; ---------------------------------------------------------------------------

loc_139B:				; CODE XREF: _mime_parse_hdr+42j
		push	400h
		lea	eax, [esp+424h+var_404]
		push	eax
		push	ebx
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jle	loc_15E3
		push	ebp
		mov	ebp, dword ptr ds:__imp__isspace
		push	edi
		xchg	ax, ax

loc_13C0:				; CODE XREF: _mime_parse_hdr+29Bj
		test	esi, esi
		jz	short loc_13D8
		movzx	eax, [esp+428h+var_404]
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		mov	edi, 3
		test	eax, eax
		jnz	short loc_13DD

loc_13D8:				; CODE XREF: _mime_parse_hdr+82j
		mov	edi, 1

loc_13DD:				; CODE XREF: _mime_parse_hdr+96j
		mov	al, [esp+428h+var_404]
		lea	ebx, [esp+428h+var_404]
		mov	[esp+428h+var_418], 0
		mov	esi, ebx
		test	al, al
		jz	loc_150E
		mov	ebp, [esp+428h+var_414]
		nop	dword ptr [eax+eax+00h]

loc_1400:				; CODE XREF: _mime_parse_hdr+1BEj
		cmp	al, 0Dh
		jz	loc_1504
		cmp	al, 0Ah
		jz	loc_1504
		lea	ecx, [edi-1]	; switch 6 cases
		cmp	ecx, 5
		ja	loc_14F8	; jumptable 0000141C default case
		jmp	ds:$LN91[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _mime_parse_hdr+DCj
					; DATA XREF: .text$mn:$LN91o
		cmp	al, 3Ah	; ':'   ; jumptable 0000141C case 1
		jnz	loc_14F8	; jumptable 0000141C default case
		mov	edi, 2

loc_1430:				; CODE XREF: _mime_parse_hdr+16Ej
		push	esi
		mov	byte ptr [ebx],	0
		call	_strip_start
		push	eax
		call	_strip_end
		add	esp, 8
		mov	[esp+428h+var_418], eax
		lea	esi, [ebx+1]
		jmp	loc_14F8	; jumptable 0000141C default case
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _mime_parse_hdr+DCj
					; DATA XREF: .text$mn:$LN91o
		cmp	al, 3Bh	; ';'   ; jumptable 0000141C case 2
		jnz	short loc_148C
		push	esi
		mov	byte ptr [ebx],	0
		call	_strip_start
		push	eax
		call	_strip_end
		push	eax
		push	[esp+434h+var_418]
		call	_mime_hdr_new
		mov	ebp, eax
		push	ebp
		push	[esp+43Ch+var_40C]
		call	_sk_push
		add	esp, 18h
		mov	[esp+428h+var_418], 0
		lea	esi, [ebx+1]
		mov	edi, 3
		jmp	short loc_14F8	; jumptable 0000141C default case
; ---------------------------------------------------------------------------

loc_148C:				; CODE XREF: _mime_parse_hdr+110j
					; _mime_parse_hdr+1A5j
		cmp	al, 28h	; '('
		jnz	short loc_14F8	; jumptable 0000141C default case
		mov	[esp+428h+var_410], edi
		mov	edi, 6
		jmp	short loc_14F8	; jumptable 0000141C default case
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _mime_parse_hdr+DCj
					; DATA XREF: .text$mn:$LN91o
		cmp	al, 29h	; ')'   ; jumptable 0000141C case 6
		jnz	short loc_14F8	; jumptable 0000141C default case
		mov	edi, [esp+428h+var_410]
		jmp	short loc_14F8	; jumptable 0000141C default case
; ---------------------------------------------------------------------------

$LN20:					; CODE XREF: _mime_parse_hdr+DCj
					; DATA XREF: .text$mn:$LN91o
		cmp	al, 3Dh	; '='   ; jumptable 0000141C case 3
		jnz	short loc_14F8	; jumptable 0000141C default case
		mov	edi, 4
		jmp	short loc_1430
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: _mime_parse_hdr+DCj
					; DATA XREF: .text$mn:$LN91o
		cmp	al, 3Bh	; ';'   ; jumptable 0000141C case 4
		jnz	short loc_14E3
		push	esi
		mov	edi, 3
		mov	byte ptr [ebx],	0
		call	_strip_start
		push	eax
		call	_strip_end
		push	eax
		push	[esp+434h+var_418]
		push	ebp
		call	_mime_hdr_addparam
		add	esp, 14h
		mov	[esp+428h+var_418], 0
		lea	esi, [ebx+1]
		jmp	short loc_14F8	; jumptable 0000141C default case
; ---------------------------------------------------------------------------

loc_14E3:				; CODE XREF: _mime_parse_hdr+172j
		cmp	al, 22h	; '"'
		jnz	short loc_148C
		mov	edi, 5
		jmp	short loc_14F8	; jumptable 0000141C default case
; ---------------------------------------------------------------------------

$LN28:					; CODE XREF: _mime_parse_hdr+DCj
					; DATA XREF: .text$mn:$LN91o
		cmp	al, 22h	; '"'   ; jumptable 0000141C case 5
		mov	eax, 4
		cmovz	edi, eax

loc_14F8:				; CODE XREF: _mime_parse_hdr+D6j
					; _mime_parse_hdr+E5j ...
		mov	al, [ebx+1]	; jumptable 0000141C default case
		inc	ebx
		test	al, al
		jnz	loc_1400

loc_1504:				; CODE XREF: _mime_parse_hdr+C2j
					; _mime_parse_hdr+CAj
		mov	[esp+428h+var_414], ebp
		mov	ebp, dword ptr ds:__imp__isspace

loc_150E:				; CODE XREF: _mime_parse_hdr+B1j
		cmp	edi, 2
		jnz	short loc_156D
		mov	al, [esi]
		test	al, al
		jz	short loc_1539
		nop	dword ptr [eax+00000000h]

loc_1520:				; CODE XREF: _mime_parse_hdr+1F7j
		cmp	al, 22h	; '"'
		jz	short loc_1560
		movzx	eax, al
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_153B
		mov	al, [esi+1]
		inc	esi
		test	al, al
		jnz	short loc_1520

loc_1539:				; CODE XREF: _mime_parse_hdr+1D7j
		xor	esi, esi

loc_153B:				; CODE XREF: _mime_parse_hdr+1EFj
					; _mime_parse_hdr+22Bj
		push	esi
		call	_strip_end
		push	eax
		push	[esp+430h+var_418]
		call	_mime_hdr_new
		mov	esi, eax
		push	esi
		push	[esp+438h+var_40C]
		mov	[esp+43Ch+var_414], esi
		call	_sk_push
		add	esp, 14h
		jmp	short loc_15BE
; ---------------------------------------------------------------------------

loc_1560:				; CODE XREF: _mime_parse_hdr+1E2j
		lea	eax, [esi+1]
		xor	esi, esi
		cmp	byte ptr [eax],	0
		cmovnz	esi, eax
		jmp	short loc_153B
; ---------------------------------------------------------------------------

loc_156D:				; CODE XREF: _mime_parse_hdr+1D1j
		cmp	edi, 4
		jnz	short loc_15BA
		mov	al, [esi]
		test	al, al
		jz	short loc_1591

loc_1578:				; CODE XREF: _mime_parse_hdr+24Fj
		cmp	al, 22h	; '"'
		jz	short loc_15AD
		movzx	eax, al
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_1593
		mov	al, [esi+1]
		inc	esi
		test	al, al
		jnz	short loc_1578

loc_1591:				; CODE XREF: _mime_parse_hdr+236j
		xor	esi, esi

loc_1593:				; CODE XREF: _mime_parse_hdr+247j
					; _mime_parse_hdr+278j
		push	esi
		call	_strip_end
		mov	esi, [esp+42Ch+var_414]
		push	eax
		push	[esp+430h+var_418]
		push	esi
		call	_mime_hdr_addparam
		add	esp, 10h
		jmp	short loc_15BE
; ---------------------------------------------------------------------------

loc_15AD:				; CODE XREF: _mime_parse_hdr+23Aj
		lea	eax, [esi+1]
		xor	esi, esi
		cmp	byte ptr [eax],	0
		cmovnz	esi, eax
		jmp	short loc_1593
; ---------------------------------------------------------------------------

loc_15BA:				; CODE XREF: _mime_parse_hdr+230j
		mov	esi, [esp+428h+var_414]

loc_15BE:				; CODE XREF: _mime_parse_hdr+21Ej
					; _mime_parse_hdr+26Bj
		lea	eax, [esp+428h+var_404]
		cmp	ebx, eax
		jz	short loc_15E1
		mov	ebx, [esp+428h+var_408]
		push	400h
		push	eax
		push	ebx
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jg	loc_13C0

loc_15E1:				; CODE XREF: _mime_parse_hdr+284j
		pop	edi
		pop	ebp

loc_15E3:				; CODE XREF: _mime_parse_hdr+70j
		mov	ecx, [esp+420h+var_4]
		mov	eax, [esp+420h+var_40C]
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 418h
		retn
_mime_parse_hdr	endp

; ---------------------------------------------------------------------------
		align 10h
$LN91		dd offset $LN12		; DATA XREF: _mime_parse_hdr+DCr
		dd offset $LN14		; jump table for switch	statement
		dd offset $LN20
		dd offset $LN22
		dd offset $LN28
		dd offset $LN18
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1618h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_multi_split	proc near		; CODE XREF: _SMIME_read_ASN1+113p

var_416		= byte ptr -416h
var_415		= byte ptr -415h
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
Str2		= dword	ptr -408h
Str1		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 418h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+418h+var_4], eax
		mov	eax, [esp+418h+arg_0]
		push	ebx
		push	ebp
		mov	[esp+420h+var_410], eax
		mov	eax, [esp+420h+arg_4]
		mov	ebp, eax
		push	esi
		mov	esi, [esp+424h+arg_8]
		push	edi
		mov	[esp+428h+Str2], eax
		lea	ecx, [ebp+1]
		mov	[esp+428h+var_414], 0
		xor	edi, edi

loc_1660:				; CODE XREF: _multi_split+4Ej
		mov	al, [ebp+0]
		inc	ebp
		test	al, al
		jnz	short loc_1660
		xor	bl, bl
		mov	[esp+428h+var_416], 1
		sub	ebp, ecx
		mov	[esp+428h+var_415], bl
		call	_sk_new_null
		mov	[esp+428h+var_40C], eax
		mov	[esi], eax
		lea	eax, [esp+428h+Str1]
		push	400h
		push	eax
		push	[esp+430h+var_410]
		call	_BIO_gets
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jle	loc_1790
		nop	dword ptr [eax+eax+00000000h]

loc_16A8:				; CODE XREF: _multi_split+172j
		push	ebp		; MaxCount
		push	[esp+42Ch+Str2]	; Str2
		lea	eax, [esp+430h+Str1]
		push	esi		; int
		push	eax		; Str1
		call	_mime_bound_check
		add	esp, 10h
		cmp	al, 1
		jnz	short loc_16CE
		inc	bl
		mov	[esp+428h+var_416], al
		mov	[esp+428h+var_415], bl
		jmp	loc_1770
; ---------------------------------------------------------------------------

loc_16CE:				; CODE XREF: _multi_split+A5j
		cmp	al, 2
		jz	loc_17AB
		test	bl, bl
		jz	loc_1770
		xor	ebx, ebx
		test	esi, esi
		jle	short loc_1700
		lea	ecx, [esp+428h+Str1]

loc_16E8:				; CODE XREF: _multi_split+E6j
		mov	al, [ecx+esi-1]
		cmp	al, 0Ah
		jnz	short loc_16F7
		mov	ebx, 1
		jmp	short loc_16FB
; ---------------------------------------------------------------------------

loc_16F7:				; CODE XREF: _multi_split+D6j
		cmp	al, 0Dh
		jnz	short loc_1700

loc_16FB:				; CODE XREF: _multi_split+DDj
		dec	esi
		test	esi, esi
		jg	short loc_16E8

loc_1700:				; CODE XREF: _multi_split+CAj
					; _multi_split+E1j
		cmp	[esp+428h+var_416], 0
		jz	short loc_173E
		mov	[esp+428h+var_416], 0
		test	edi, edi
		jz	short loc_171D
		push	edi
		push	[esp+42Ch+var_40C]
		call	_sk_push
		add	esp, 8

loc_171D:				; CODE XREF: _multi_split+F6j
		call	_BIO_s_mem
		push	eax
		call	_BIO_new
		push	0
		push	0
		mov	edi, eax
		push	82h ; '‚'
		push	edi
		call	_BIO_ctrl
		add	esp, 14h
		jmp	short loc_1755
; ---------------------------------------------------------------------------

loc_173E:				; CODE XREF: _multi_split+EDj
		cmp	[esp+428h+var_414], 0
		jz	short loc_1755
		push	2
		push	offset ??_C@_02PCIJFNDE@?$AN?6?$AA@ ; `string'
		push	edi
		call	_BIO_write
		add	esp, 0Ch

loc_1755:				; CODE XREF: _multi_split+124j
					; _multi_split+12Bj
		mov	[esp+428h+var_414], ebx
		test	esi, esi
		jz	short loc_176C
		push	esi
		lea	eax, [esp+42Ch+Str1]
		push	eax
		push	edi
		call	_BIO_write
		add	esp, 0Ch

loc_176C:				; CODE XREF: _multi_split+143j
		mov	bl, [esp+428h+var_415]

loc_1770:				; CODE XREF: _multi_split+B1j
					; _multi_split+C0j
		push	400h
		lea	eax, [esp+42Ch+Str1]
		push	eax
		push	[esp+430h+var_410]
		call	_BIO_gets
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jg	loc_16A8

loc_1790:				; CODE XREF: _multi_split+82j
		xor	eax, eax

loc_1792:				; CODE XREF: _multi_split+1A5j
		mov	ecx, [esp+428h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 418h
		retn
; ---------------------------------------------------------------------------

loc_17AB:				; CODE XREF: _multi_split+B8j
		push	edi
		push	[esp+42Ch+var_40C]
		call	_sk_push
		add	esp, 8
		mov	eax, 1
		jmp	short loc_1792
_multi_split	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_strip_end	proc near		; CODE XREF: _mime_parse_hdr+FAp
					; _mime_parse_hdr+11Cp	...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_17CD
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_17CD:				; CODE XREF: _strip_end+7j
		mov	ecx, edi
		lea	edx, [ecx+1]

loc_17D2:				; CODE XREF: _strip_end+17j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_17D2
		push	ebx
		push	esi
		sub	ecx, edx
		lea	esi, [edi-1]
		add	esi, ecx
		cmp	esi, edi
		jb	short loc_180B
		mov	ebx, dword ptr ds:__imp__isspace
		nop	dword ptr [eax+00h]

loc_17F0:				; CODE XREF: _strip_end+49j
		mov	al, [esi]
		cmp	al, 22h	; '"'
		jz	short loc_1811
		movzx	eax, al
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_181B
		mov	byte ptr [esi],	0
		dec	esi
		cmp	esi, edi
		jnb	short loc_17F0

loc_180B:				; CODE XREF: _strip_end+24j
					; _strip_end+56j
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1811:				; CODE XREF: _strip_end+34j
		lea	eax, [esi-1]
		cmp	eax, edi
		jz	short loc_180B
		mov	byte ptr [esi],	0

loc_181B:				; CODE XREF: _strip_end+41j
		pop	esi
		pop	ebx
		mov	eax, edi
		pop	edi
		retn
_strip_end	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1824h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_strip_ends	proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	_strip_start
		add	esp, 4
		mov	[esp+arg_0], eax
		jmp	_strip_end
_strip_ends	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 183Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_strip_eol	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		dec	eax
		xor	esi, esi
		mov	ecx, [edi]
		add	eax, ecx
		test	ecx, ecx
		jle	short loc_186A

loc_1851:				; CODE XREF: _strip_eol+2Cj
		mov	dl, [eax]
		cmp	dl, 0Ah
		jnz	short loc_185F
		mov	esi, 1
		jmp	short loc_1864
; ---------------------------------------------------------------------------

loc_185F:				; CODE XREF: _strip_eol+1Aj
		cmp	dl, 0Dh
		jnz	short loc_186A

loc_1864:				; CODE XREF: _strip_eol+21j
		dec	ecx
		dec	eax
		test	ecx, ecx
		jg	short loc_1851

loc_186A:				; CODE XREF: _strip_eol+13j
					; _strip_eol+26j
		mov	[edi], ecx
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_strip_eol	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1874h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_strip_start	proc near		; CODE XREF: _mime_parse_hdr+F4p
					; _mime_parse_hdr+116p	...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	al, [esi]
		test	al, al
		jz	short loc_189F
		mov	edi, dword ptr ds:__imp__isspace

loc_1886:				; CODE XREF: _strip_start+29j
		cmp	al, 22h	; '"'
		jz	short loc_18A9
		movzx	eax, al
		push	eax		; C
		call	edi ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_18A4
		mov	al, [esi+1]
		inc	esi
		test	al, al
		jnz	short loc_1886

loc_189F:				; CODE XREF: _strip_start+Aj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_18A4:				; CODE XREF: _strip_start+21j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_18A9:				; CODE XREF: _strip_start+14j
		lea	ecx, [esi+1]
		xor	eax, eax
		cmp	[ecx], al
		pop	edi
		cmovnz	eax, ecx
		pop	esi
		retn
_strip_start	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18B8h
; COMDAT (pick any)
		public ??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@
; `string'
??_C@_0BJ@NBGEILCD@?4?2crypto?2asn1?2asn_mime?4c?$AA@ db '.\crypto\asn1\asn_mime.c',0
					; DATA XREF: _B64_write_ASN1+1Ao
					; _SMIME_read_ASN1+39o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18D4h
; COMDAT (pick any)
		public ??_C@_0BE@JOAPMNHH@?9?9?9?9?9BEGIN?5?$CFs?9?9?9?9?9?6?$AA@
; `string'
??_C@_0BE@JOAPMNHH@?9?9?9?9?9BEGIN?5?$CFs?9?9?9?9?9?6?$AA@ db '-----BEGIN %s-----',0Ah,0
					; DATA XREF: _PEM_write_bio_ASN1_stream+Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18E8h
; COMDAT (pick any)
		public ??_C@_0BC@BEJKDKBL@?9?9?9?9?9END?5?$CFs?9?9?9?9?9?6?$AA@
; `string'
??_C@_0BC@BEJKDKBL@?9?9?9?9?9END?5?$CFs?9?9?9?9?9?6?$AA@ db '-----END %s-----',0Ah,0
					; DATA XREF: _PEM_write_bio_ASN1_stream+31o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18FCh
; COMDAT (pick any)
		public ??_C@_01IHBHIGKO@?0?$AA@
; `string'
??_C@_01IHBHIGKO@?0?$AA@ db 2Ch, 0	; DATA XREF: _asn1_write_micalg+37o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1900h
; COMDAT (pick any)
		public ??_C@_04PGHFOLLE@sha1?$AA@
; `string'
??_C@_04PGHFOLLE@sha1?$AA@ db 'sha1',0  ; DATA XREF: _asn1_write_micalg:loc_DB4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1908h
; COMDAT (pick any)
		public ??_C@_03PKBIKOHH@md5?$AA@
; `string'
??_C@_03PKBIKOHH@md5?$AA@ dd 35646Dh	; DATA XREF: _asn1_write_micalg:loc_DBBo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 190Ch
; COMDAT (pick any)
		public ??_C@_07LDMAFAJ@sha?9256?$AA@
; `string'
??_C@_07LDMAFAJ@sha?9256?$AA@ db 'sha-256',0 ; DATA XREF: _asn1_write_micalg+C5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1914h
; COMDAT (pick any)
		public ??_C@_07IJGOJDLN@sha?9384?$AA@
; `string'
??_C@_07IJGOJDLN@sha?9384?$AA@ db 'sha-384',0 ; DATA XREF: _asn1_write_micalg:loc_DC2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 191Ch
; COMDAT (pick any)
		public ??_C@_07PFIOFAGI@sha?9512?$AA@
; `string'
??_C@_07PFIOFAGI@sha?9512?$AA@ db 'sha-512',0 ; DATA XREF: _asn1_write_micalg:loc_DF5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1924h
; COMDAT (pick any)
		public ??_C@_0N@FJDLKGKL@gostr3411?994?$AA@
; `string'
??_C@_0N@FJDLKGKL@gostr3411?994?$AA@ db	'gostr3411-94',0
					; DATA XREF: _asn1_write_micalg:loc_E26o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1934h
; COMDAT (pick any)
		public ??_C@_07CIFAGBMG@unknown?$AA@
; `string'
??_C@_07CIFAGBMG@unknown?$AA@ db 'unknown',0 ; DATA XREF: _asn1_write_micalg:loc_DE4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 193Ch
; COMDAT (pick any)
		public ??_C@_09DFGCBALL@smime?4p7m?$AA@
; `string'
??_C@_09DFGCBALL@smime?4p7m?$AA@ db 'smime.p7m',0 ; DATA XREF: _SMIME_write_ASN1+55o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1948h
; COMDAT (pick any)
		public ??_C@_0BF@GKPLIGCF@application?1x?9pkcs7?9?$AA@
; `string'
??_C@_0BF@GKPLIGCF@application?1x?9pkcs7?9?$AA@	db 'application/x-pkcs7-',0
					; DATA XREF: _SMIME_write_ASN1+49o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1960h
; COMDAT (pick any)
		public ??_C@_0BD@NDADAIF@application?1pkcs7?9?$AA@
; `string'
??_C@_0BD@NDADAIF@application?1pkcs7?9?$AA@ db 'application/pkcs7-',0
					; DATA XREF: _SMIME_write_ASN1+44o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1974h
; COMDAT (pick any)
		public ??_C@_02PCIJFNDE@?$AN?6?$AA@
; `string'
??_C@_02PCIJFNDE@?$AN?6?$AA@ db	0Dh, 0Ah, 0 ; DATA XREF: _SMIME_crlf_copy+123o
					; _SMIME_write_ASN1+67o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1978h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _SMIME_write_ASN1+6Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 197Ch
; COMDAT (pick any)
		public ??_C@_0BE@MBODPAJ@MIME?9Version?3?51?40?$CFs?$AA@
; `string'
??_C@_0BE@MBODPAJ@MIME?9Version?3?51?40?$CFs?$AA@ db 'MIME-Version: 1.0%s',0
					; DATA XREF: _SMIME_write_ASN1+F0o
					; _SMIME_write_ASN1+2A8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1990h
; COMDAT (pick any)
		public ??_C@_0CA@OLICOBKO@Content?9Type?3?5multipart?1signed?$DL?$AA@
; `string'
??_C@_0CA@OLICOBKO@Content?9Type?3?5multipart?1signed?$DL?$AA@ db 'Content-Type: multipart/signed;',0
					; DATA XREF: _SMIME_write_ASN1+14Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19B0h
; COMDAT (pick any)
		public ??_C@_0BJ@LMOEKNCM@?5protocol?$DN?$CC?$CFssignature?$CC?$DL?$AA@
; `string'
??_C@_0BJ@LMOEKNCM@?5protocol?$DN?$CC?$CFssignature?$CC?$DL?$AA@ db ' protocol="%ssignature";',0
					; DATA XREF: _SMIME_write_ASN1+15Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19CCh
; COMDAT (pick any)
		public ??_C@_09DJGEKGKI@?5micalg?$DN?$CC?$AA@
; `string'
??_C@_09DJGEKGKI@?5micalg?$DN?$CC?$AA@ db ' micalg="',0 ; DATA XREF: _SMIME_write_ASN1+165o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19D8h
; COMDAT (pick any)
		public ??_C@_0BJ@PGDHPNJG@?$CC?$DL?5boundary?$DN?$CC?9?9?9?9?$CFs?$CC?$CFs?$CFs?$AA@
; `string'
??_C@_0BJ@PGDHPNJG@?$CC?$DL?5boundary?$DN?$CC?9?9?9?9?$CFs?$CC?$CFs?$CFs?$AA@ db '"; boundary="----%s"%s%s',0
					; DATA XREF: _SMIME_write_ASN1+181o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19F4h
; COMDAT (pick any)
		public ??_C@_0CF@PFAGFGFE@This?5is?5an?5S?1MIME?5signed?5message@
; `string'
??_C@_0CF@PFAGFGFE@This?5is?5an?5S?1MIME?5signed?5message@ db 'This is an S/MIME signed message%s%s',0
					; DATA XREF: _SMIME_write_ASN1+191o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A1Ch
; COMDAT (pick any)
		public ??_C@_0L@CNHJFJFM@?9?9?9?9?9?9?$CFs?$CFs?$AA@
; `string'
??_C@_0L@CNHJFJFM@?9?9?9?9?9?9?$CFs?$CFs?$AA@ db '------%s%s',0
					; DATA XREF: _SMIME_write_ASN1+1A2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A28h
; COMDAT (pick any)
		public ??_C@_0N@LEAPAFNA@?$CFs?9?9?9?9?9?9?$CFs?$CFs?$AA@
; `string'
??_C@_0N@LEAPAFNA@?$CFs?9?9?9?9?9?9?$CFs?$CFs?$AA@ db '%s------%s%s',0
					; DATA XREF: _SMIME_write_ASN1+1D9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A38h
; COMDAT (pick any)
		public ??_C@_0BL@IBDMLFLD@Content?9Type?3?5?$CFssignature?$DL?$AA@
; `string'
??_C@_0BL@IBDMLFLD@Content?9Type?3?5?$CFssignature?$DL?$AA@ db 'Content-Type: %ssignature;',0
					; DATA XREF: _SMIME_write_ASN1+1E5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A54h
; COMDAT (pick any)
		public ??_C@_0BE@BMNPFHLD@?5name?$DN?$CCsmime?4p7s?$CC?$CFs?$AA@
; `string'
??_C@_0BE@BMNPFHLD@?5name?$DN?$CCsmime?4p7s?$CC?$CFs?$AA@ db ' name="smime.p7s"%s',0
					; DATA XREF: _SMIME_write_ASN1+1F1o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A68h
; COMDAT (pick any)
		public ??_C@_0CE@LMBKLCNI@Content?9Transfer?9Encoding?3?5base6@
; `string'
??_C@_0CE@LMBKLCNI@Content?9Transfer?9Encoding?3?5base6@ db 'Content-Transfer-Encoding: base64%s',0
					; DATA XREF: _SMIME_write_ASN1+1FDo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A8Ch
; COMDAT (pick any)
		public ??_C@_0CB@JNLOJFLI@Content?9Disposition?3?5attachment?$DL@
; `string'
??_C@_0CB@JNLOJFLI@Content?9Disposition?3?5attachment?$DL@ db 'Content-Disposition: attachment;',0
					; DATA XREF: _SMIME_write_ASN1+208o
					; _SMIME_write_ASN1+2B3o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AB0h
; COMDAT (pick any)
		public ??_C@_0BK@OFJEPDGB@?5filename?$DN?$CCsmime?4p7s?$CC?$CFs?$CFs?$AA@
; `string'
??_C@_0BK@OFJEPDGB@?5filename?$DN?$CCsmime?4p7s?$CC?$CFs?$CFs?$AA@ db ' filename="smime.p7s"%s%s',0
					; DATA XREF: _SMIME_write_ASN1+218o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ACCh
; COMDAT (pick any)
		public ??_C@_0BB@CEFPDGPA@?$CFs?9?9?9?9?9?9?$CFs?9?9?$CFs?$CFs?$AA@
; `string'
??_C@_0BB@CEFPDGPA@?$CFs?9?9?9?9?9?9?$CFs?9?9?$CFs?$CFs?$AA@ db	'%s------%s--%s%s',0
					; DATA XREF: _SMIME_write_ASN1+23Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AE0h
; COMDAT (pick any)
		public ??_C@_0P@KCEEPGAP@enveloped?9data?$AA@
; `string'
??_C@_0P@KCEEPGAP@enveloped?9data?$AA@ db 'enveloped-data',0
					; DATA XREF: _SMIME_write_ASN1+259o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AF0h
; COMDAT (pick any)
		public ??_C@_0P@JEJBLIHN@signed?9receipt?$AA@
; `string'
??_C@_0P@JEJBLIHN@signed?9receipt?$AA@ db 'signed-receipt',0
					; DATA XREF: _SMIME_write_ASN1+26Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B00h
; COMDAT (pick any)
		public ??_C@_0M@MHALIMFG@signed?9data?$AA@
; `string'
??_C@_0M@MHALIMFG@signed?9data?$AA@ db 'signed-data',0 ; DATA XREF: _SMIME_write_ASN1+282o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B0Ch
; COMDAT (pick any)
		public ??_C@_0L@IFNGEJCO@certs?9only?$AA@
; `string'
??_C@_0L@IFNGEJCO@certs?9only?$AA@ db 'certs-only',0 ; DATA XREF: _SMIME_write_ASN1+289o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B18h
; COMDAT (pick any)
		public ??_C@_0BA@DFPMGHIN@compressed?9data?$AA@
; `string'
??_C@_0BA@DFPMGHIN@compressed?9data?$AA@ db 'compressed-data',0
					; DATA XREF: _SMIME_write_ASN1+29Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B28h
; COMDAT (pick any)
		public ??_C@_09DAOBJECN@smime?4p7z?$AA@
; `string'
??_C@_09DAOBJECN@smime?4p7z?$AA@ db 'smime.p7z',0 ; DATA XREF: _SMIME_write_ASN1+29Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B34h
; COMDAT (pick any)
		public ??_C@_0BB@OFJOJND@?5filename?$DN?$CC?$CFs?$CC?$CFs?$AA@
; `string'
??_C@_0BB@OFJOJND@?5filename?$DN?$CC?$CFs?$CC?$CFs?$AA@	db ' filename="%s"%s',0
					; DATA XREF: _SMIME_write_ASN1+2C3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B48h
; COMDAT (pick any)
		public ??_C@_0BG@GOHJPKDF@Content?9Type?3?5?$CFsmime?$DL?$AA@
; `string'
??_C@_0BG@GOHJPKDF@Content?9Type?3?5?$CFsmime?$DL?$AA@ db 'Content-Type: %smime;',0
					; DATA XREF: _SMIME_write_ASN1+2D2o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B60h
; COMDAT (pick any)
		public ??_C@_0BA@ICJPMDJA@?5smime?9type?$DN?$CFs?$DL?$AA@
; `string'
??_C@_0BA@ICJPMDJA@?5smime?9type?$DN?$CFs?$DL?$AA@ db ' smime-type=%s;',0
					; DATA XREF: _SMIME_write_ASN1+2E5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B70h
; COMDAT (pick any)
		public ??_C@_0N@LOHHOGEF@?5name?$DN?$CC?$CFs?$CC?$CFs?$AA@
; `string'
??_C@_0N@LOHHOGEF@?5name?$DN?$CC?$CFs?$CC?$CFs?$AA@ db ' name="%s"%s',0
					; DATA XREF: _SMIME_write_ASN1+2F8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B80h
; COMDAT (pick any)
		public ??_C@_0CG@FGBKIPJD@Content?9Transfer?9Encoding?3?5base6@
; `string'
??_C@_0CG@FGBKIPJD@Content?9Transfer?9Encoding?3?5base6@ db 'Content-Transfer-Encoding: base64%s%s',0
					; DATA XREF: _SMIME_write_ASN1+305o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BA8h
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; `string'
??_C@_02DKCKIIND@?$CFs?$AA@ db 25h, 73h, 0 ; DATA XREF:	_SMIME_write_ASN1+336o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BACh
; COMDAT (pick any)
		public ??_C@_0N@MCOKKOFB@content?9type?$AA@
; `string'
??_C@_0N@MCOKKOFB@content?9type?$AA@ db	'content-type',0 ; DATA XREF: _SMIME_read_ASN1+5Fo
					; _SMIME_read_ASN1:loc_3B9o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BBCh
; COMDAT (pick any)
		public ??_C@_0BB@ILCPDBF@multipart?1signed?$AA@
; `string'
??_C@_0BB@ILCPDBF@multipart?1signed?$AA@ db 'multipart/signed',0
					; DATA XREF: _SMIME_read_ASN1+98o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BD0h
; COMDAT (pick any)
		public ??_C@_08KIKGFOKI@boundary?$AA@
; `string'
??_C@_08KIKGFOKI@boundary?$AA@ db 'boundary',0 ; DATA XREF: _SMIME_read_ASN1+D1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BDCh
; COMDAT (pick any)
		public ??_C@_0BO@KCNJHHFC@application?1x?9pkcs7?9signature?$AA@
; `string'
??_C@_0BO@KCNJHHFC@application?1x?9pkcs7?9signature?$AA@ db 'application/x-pkcs7-signature',0
					; DATA XREF: _SMIME_read_ASN1+198o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BFCh
; COMDAT (pick any)
		public ??_C@_0BM@INAPNOAN@application?1pkcs7?9signature?$AA@
; `string'
??_C@_0BM@INAPNOAN@application?1pkcs7?9signature?$AA@ db 'application/pkcs7-signature',0
					; DATA XREF: _SMIME_read_ASN1+1C9o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C18h
; COMDAT (pick any)
		public ??_C@_06BPMLCLKK@type?3?5?$AA@
; `string'
??_C@_06BPMLCLKK@type?3?5?$AA@ db 'type: ',0 ; DATA XREF: _SMIME_read_ASN1+217o
					; _SMIME_read_ASN1+3D7o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C20h
; COMDAT (pick any)
		public ??_C@_0BJ@FHHCEEOK@application?1x?9pkcs7?9mime?$AA@
; `string'
??_C@_0BJ@FHHCEEOK@application?1x?9pkcs7?9mime?$AA@ db 'application/x-pkcs7-mime',0
					; DATA XREF: _SMIME_read_ASN1:loc_59Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C3Ch
; COMDAT (pick any)
		public ??_C@_0BH@CABCCFDD@application?1pkcs7?9mime?$AA@
; `string'
??_C@_0BH@CABCCFDD@application?1pkcs7?9mime?$AA@ db 'application/pkcs7-mime',0
					; DATA XREF: _SMIME_read_ASN1+389o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C54h
; COMDAT (pick any)
		public ??_C@_0BN@PPPPFNNH@Content?9Type?3?5text?1plain?$AN?6?$AN?6?$AA@
; `string'
??_C@_0BN@PPPPFNNH@Content?9Type?3?5text?1plain?$AN?6?$AN?6?$AA@ db 'Content-Type: text/plain',0Dh,0Ah
					; DATA XREF: _SMIME_crlf_copy+B3o
		db 0Dh,0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C74h
; COMDAT (pick any)
		public ??_C@_0L@NPNLKGOJ@text?1plain?$AA@
; `string'
??_C@_0L@NPNLKGOJ@text?1plain?$AA@ db 'text/plain',0 ; DATA XREF: _SMIME_text+AEo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C80h
; COMDAT (pick any)
		public ??_C@_02BAABKJLB@?9?9?$AA@
; char `string'[3]
??_C@_02BAABKJLB@?9?9?$AA@ db '--',0    ; DATA XREF: _mime_bound_check+4Eo
					; _mime_bound_check+76o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1C84h
; COMDAT (pick any)
		public __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a
__xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a xmmword 0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0Ah
					; DATA XREF: _SMIME_write_ASN1+B2r
					; _SMIME_write_ASN1+105r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1C94h
; COMDAT (pick any)
		public __xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
__xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f xmmword 0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0Fh
					; DATA XREF: _SMIME_write_ASN1+B9r
					; _SMIME_write_ASN1+F9r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1CA4h
; COMDAT (pick any)
		public __xmm@30303030303030303030303030303030
__xmm@30303030303030303030303030303030 xmmword 30303030303030303030303030303030h
					; DATA XREF: _SMIME_write_ASN1+DFr
					; _SMIME_write_ASN1+10Fr
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1CB4h
; COMDAT (pick any)
		public __xmm@37373737373737373737373737373737
__xmm@37373737373737373737373737373737 xmmword 37373737373737373737373737373737h
					; DATA XREF: _SMIME_write_ASN1+D4r
					; _SMIME_write_ASN1+123r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1CC4h
; COMDAT (pick any)
		public __xmm@ffffffffffffffffffffffffffffffff
__xmm@ffffffffffffffffffffffffffffffff xmmword 0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFh
					; DATA XREF: _SMIME_write_ASN1+C9r
					; _SMIME_write_ASN1+11Br
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _isupper(int C)
		extrn __imp__isupper:near ; CODE XREF: _mime_hdr_addparam+34p
					; _mime_hdr_new+48p ...
; int __cdecl _isspace(int C)
		extrn __imp__isspace:near ; CODE XREF: _mime_parse_hdr+8Ap
					; _mime_parse_hdr+1E8p	...
; int __cdecl _tolower(int C)
		extrn __imp__tolower:near ; CODE XREF: _mime_hdr_addparam+42p
					; _mime_hdr_new+52p ...
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _mime_bound_check+54p
					; _mime_bound_check+66p ...
		extrn _sk_num:near	; CODE XREF: _SMIME_read_ASN1+135p
					; _SMIME_write_ASN1+27Ap ...
		extrn _sk_value:near	; CODE XREF: _SMIME_read_ASN1+7Bp
					; _SMIME_read_ASN1+F1p	...
		extrn _sk_new:near	; CODE XREF: _mime_hdr_new+DFp
					; _mime_parse_hdr+34p
		extrn _sk_new_null:near	; CODE XREF: _multi_split+5Dp
		extrn _sk_free:near	; CODE XREF: _SMIME_read_ASN1+2B5p
		extrn _sk_pop_free:near	; CODE XREF: _SMIME_read_ASN1+120p
					; _SMIME_read_ASN1+229p ...
		extrn _sk_find:near	; CODE XREF: _SMIME_read_ASN1+69p
					; _SMIME_read_ASN1+DDp	...
		extrn _sk_push:near	; CODE XREF: _mime_hdr_addparam+98p
					; _mime_parse_hdr+132p	...
		extrn _CRYPTO_malloc:near ; CODE XREF: _mime_hdr_addparam+7Fp
					; _mime_hdr_new+BFp
		extrn _CRYPTO_free:near	; CODE XREF: _asn1_write_micalg+96p
					; _mime_hdr_free+Cp ...
		extrn _BUF_strdup:near	; CODE XREF: _mime_hdr_addparam+Bp
					; _mime_hdr_addparam+5Ep ...
		extrn _BIO_new:near	; CODE XREF: _B64_write_ASN1+7p
					; _SMIME_crlf_copy+2Fp	...
		extrn _BIO_free:near	; CODE XREF: _B64_write_ASN1+6Dp
					; _SMIME_crlf_copy+15Cp ...
		extrn _BIO_vfree:near	; DATA XREF: _SMIME_read_ASN1+22Eo
					; _SMIME_read_ASN1+283o ...
		extrn _BIO_read:near	; CODE XREF: _SMIME_crlf_copy+77p
					; _SMIME_crlf_copy+9Ep	...
		extrn _BIO_gets:near	; CODE XREF: _SMIME_crlf_copy+CCp
					; _SMIME_crlf_copy+13Cp ...
		extrn _BIO_write:near	; CODE XREF: _SMIME_crlf_copy+8Ep
					; _SMIME_crlf_copy+115p ...
		extrn _BIO_puts:near	; CODE XREF: _SMIME_write_ASN1+16Bp
					; _asn1_write_micalg+8Dp ...
		extrn _BIO_ctrl:near	; CODE XREF: _B64_write_ASN1+61p
					; _SMIME_crlf_copy+150p ...
		extrn _BIO_push:near	; CODE XREF: _B64_write_ASN1+3Bp
					; _SMIME_crlf_copy+57p	...
		extrn _BIO_pop:near	; CODE XREF: _B64_write_ASN1+67p
					; _SMIME_crlf_copy+156p ...
		extrn _BIO_s_mem:near	; CODE XREF: _multi_split:loc_171Dp
		extrn _BIO_f_buffer:near ; CODE	XREF: _SMIME_crlf_copy+29p
		extrn _BIO_printf:near	; CODE XREF: _PEM_write_bio_ASN1_stream+10p
					; _PEM_write_bio_ASN1_stream+37p ...
		extrn _ERR_put_error:near ; CODE XREF: _B64_write_ASN1+28p
					; _SMIME_read_ASN1+4Ap	...
		extrn _ERR_add_error_data:near ; CODE XREF: _SMIME_read_ASN1+21Ep
					; _SMIME_read_ASN1+3DEp ...
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _SMIME_write_ASN1+8Cp
		extrn _ASN1_item_d2i_bio:near ;	CODE XREF: _b64_read_asn1+49p
		extrn _ASN1_item_i2d_bio:near ;	CODE XREF: _i2d_ASN1_bio_stream+8Ep
		extrn _BIO_new_NDEF:near ; CODE	XREF: _i2d_ASN1_bio_stream+1Cp
		extrn _OBJ_nid2sn:near	; CODE XREF: _asn1_write_micalg+5Bp
		extrn _OBJ_obj2nid:near	; CODE XREF: _asn1_write_micalg+53p
		extrn _BIO_f_base64:near ; CODE	XREF: _B64_write_ASN1+1p
					; _b64_read_asn1+1p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _asn1_write_micalg+61p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _SMIME_crlf_copy+49p
					; _SMIME_crlf_copy+175p ...
		extrn __chkstk:near	; CODE XREF: _SMIME_crlf_copy+5p
					; _SMIME_read_ASN1+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _SMIME_crlf_copy+Ar
					; _SMIME_text+Ar ...


		end
