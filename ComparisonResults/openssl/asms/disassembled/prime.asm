;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	660E322A76ED9561D86AFE7E43C9ECD2
; Input	CRC32 :	3F88B27E

; File Name   :	C:\compspace\Diff\openssl\obj\prime.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _prime_main
_prime_main	proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 14h
		call	__chkstk
		push	ebx
		xor	ecx, ecx
		mov	[esp+18h+var_C], 0
		push	ebp
		mov	ebp, 14h
		mov	[esp+1Ch+var_10], ecx
		push	esi
		push	edi
		mov	[esp+24h+var_8], ecx
		mov	[esp+24h+var_4], ecx
		mov	[esp+24h+var_14], ecx
		cmp	dword ptr ds:_bio_err, ecx
		jnz	short loc_69
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_67
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		add	esp, 14h

loc_67:					; CODE XREF: _prime_main+4Aj
		xor	ecx, ecx

loc_69:					; CODE XREF: _prime_main+33j
		mov	edi, [esp+24h+arg_0]
		mov	ebx, [esp+24h+arg_4]
		dec	edi
		add	ebx, 4
		cmp	edi, 1
		jl	loc_206
		xchg	ax, ax

loc_80:					; CODE XREF: _prime_main+1E3j
		mov	esi, [ebx]
		cmp	byte ptr [esi],	2Dh ; '-'
		jnz	loc_202
		mov	ecx, offset ??_C@_04FHOEMGIO@?9hex?$AA@	; "-hex"
		mov	eax, esi

loc_92:					; CODE XREF: _prime_main+ACj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_B2
		test	dl, dl
		jz	short loc_AE
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_B2
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_92

loc_AE:					; CODE XREF: _prime_main+9Aj
		xor	eax, eax
		jmp	short loc_B7
; ---------------------------------------------------------------------------

loc_B2:					; CODE XREF: _prime_main+96j
					; _prime_main+A2j
		sbb	eax, eax
		or	eax, 1

loc_B7:					; CODE XREF: _prime_main+B0j
		test	eax, eax
		jnz	short loc_C8
		mov	[esp+24h+var_C], 1
		jmp	loc_1D8
; ---------------------------------------------------------------------------

loc_C8:					; CODE XREF: _prime_main+B9j
		mov	ecx, offset ??_C@_09MOJFIIKN@?9generate?$AA@ ; "-generate"
		mov	eax, esi
		nop

loc_D0:					; CODE XREF: _prime_main+EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_F0
		test	dl, dl
		jz	short loc_EC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_F0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_D0

loc_EC:					; CODE XREF: _prime_main+D8j
		xor	eax, eax
		jmp	short loc_F5
; ---------------------------------------------------------------------------

loc_F0:					; CODE XREF: _prime_main+D4j
					; _prime_main+E0j
		sbb	eax, eax
		or	eax, 1

loc_F5:					; CODE XREF: _prime_main+EEj
		test	eax, eax
		jnz	short loc_107
		mov	ecx, 1
		mov	[esp+24h+var_10], ecx
		jmp	loc_1DC
; ---------------------------------------------------------------------------

loc_107:				; CODE XREF: _prime_main+F7j
		mov	ecx, offset ??_C@_05HDJDOKJ@?9bits?$AA@	; "-bits"
		mov	eax, esi
		xchg	ax, ax

loc_110:				; CODE XREF: _prime_main+12Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_130
		test	dl, dl
		jz	short loc_12C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_130
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_110

loc_12C:				; CODE XREF: _prime_main+118j
		xor	eax, eax
		jmp	short loc_135
; ---------------------------------------------------------------------------

loc_130:				; CODE XREF: _prime_main+114j
					; _prime_main+120j
		sbb	eax, eax
		or	eax, 1

loc_135:				; CODE XREF: _prime_main+12Ej
		test	eax, eax
		jnz	short loc_158
		dec	edi
		cmp	edi, 1
		jl	$bad$64
		push	dword ptr [ebx+4] ; Str
		add	ebx, 4
		call	dword ptr ds:__imp__atoi
		mov	[esp+28h+var_8], eax
		jmp	loc_1D5
; ---------------------------------------------------------------------------

loc_158:				; CODE XREF: _prime_main+137j
		mov	ecx, offset ??_C@_05JMDHGKLN@?9safe?$AA@ ; "-safe"
		mov	eax, esi
		nop

loc_160:				; CODE XREF: _prime_main+17Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_180
		test	dl, dl
		jz	short loc_17C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_180
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_160

loc_17C:				; CODE XREF: _prime_main+168j
		xor	eax, eax
		jmp	short loc_185
; ---------------------------------------------------------------------------

loc_180:				; CODE XREF: _prime_main+164j
					; _prime_main+170j
		sbb	eax, eax
		or	eax, 1

loc_185:				; CODE XREF: _prime_main+17Ej
		test	eax, eax
		jnz	short loc_193
		mov	[esp+24h+var_4], 1
		jmp	short loc_1D8
; ---------------------------------------------------------------------------

loc_193:				; CODE XREF: _prime_main+187j
		mov	eax, offset ??_C@_07JOIGCCHK@?9checks?$AA@ ; "-checks"

loc_198:				; CODE XREF: _prime_main+1B2j
		mov	cl, [esi]
		cmp	cl, [eax]
		jnz	short loc_1B8
		test	cl, cl
		jz	short loc_1B4
		mov	cl, [esi+1]
		cmp	cl, [eax+1]
		jnz	short loc_1B8
		add	esi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_198

loc_1B4:				; CODE XREF: _prime_main+1A0j
		xor	eax, eax
		jmp	short loc_1BD
; ---------------------------------------------------------------------------

loc_1B8:				; CODE XREF: _prime_main+19Cj
					; _prime_main+1A8j
		sbb	eax, eax
		or	eax, 1

loc_1BD:				; CODE XREF: _prime_main+1B6j
		test	eax, eax
		jnz	short loc_1EB
		dec	edi
		cmp	edi, 1
		jl	short $bad$64
		push	dword ptr [ebx+4] ; Str
		add	ebx, 4
		call	dword ptr ds:__imp__atoi
		mov	ebp, eax

loc_1D5:				; CODE XREF: _prime_main+153j
		add	esp, 4

loc_1D8:				; CODE XREF: _prime_main+C3j
					; _prime_main+191j
		mov	ecx, [esp+24h+var_10]

loc_1DC:				; CODE XREF: _prime_main+102j
		dec	edi
		add	ebx, 4
		cmp	edi, 1
		jge	loc_80
		jmp	short loc_206
; ---------------------------------------------------------------------------

loc_1EB:				; CODE XREF: _prime_main+1BFj
		push	dword ptr [ebx]
		push	offset ??_C@_0BF@DKEEOPFF@Unknown?5option?5?8?$CFs?8?6?$AA@ ; "Unknown option '%s'\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch
		jmp	short $bad$64
; ---------------------------------------------------------------------------

loc_202:				; CODE XREF: _prime_main+85j
		mov	ecx, [esp+24h+var_10]

loc_206:				; CODE XREF: _prime_main+78j
					; _prime_main+1E9j
		cmp	dword ptr [ebx], 0
		jnz	short loc_26C
		test	ecx, ecx
		jnz	short loc_26C
		push	offset ??_C@_0BE@KFPKNCFA@No?5prime?5specified?6?$AA@ ;	"No prime specified\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8

$bad$64:				; CODE XREF: _prime_main+13Dj
					; _prime_main+1C5j ...
		push	offset ??_C@_0N@NDELNNPO@options?5are?6?$AA@ ; "options	are\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_04FHOEMGIO@?9hex?$AA@ ; "-hex"
		push	offset ??_C@_0L@DOEGEJKP@?$CF?914s?5hex?6?$AA@ ; "%-14s	hex\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0M@DNJFMGLC@?9checks?5?$DMn?$DO?$AA@ ; "-checks <n>"
		push	offset ??_C@_0BI@KOKHAHLD@?$CF?914s?5number?5of?5checks?6?$AA@ ; "%-14s	number of checks\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 20h
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_26C:				; CODE XREF: _prime_main+209j
					; _prime_main+20Dj
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_296
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 14h

loc_296:				; CODE XREF: _prime_main+27Ej
		cmp	[esp+24h+var_10], 0
		jz	loc_317
		mov	edi, [esp+24h+var_8]
		test	edi, edi
		jnz	short loc_2C7
		push	offset ??_C@_0BO@OCGJBDGA@Specifiy?5the?5number?5of?5bits?4?6?$AA@ ; "Specifiy the number of bits.\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		lea	eax, [edi+1]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_2C7:				; CODE XREF: _prime_main+2A7j
		call	_BN_new
		push	0
		push	0
		push	0
		push	[esp+30h+var_4]
		mov	[esp+34h+var_14], eax
		push	edi
		push	eax
		call	_BN_generate_prime_ex
		add	esp, 18h
		cmp	[esp+24h+var_C], 0
		push	[esp+24h+var_14]
		jz	short loc_2F6
		call	_BN_bn2hex
		jmp	short loc_2FB
; ---------------------------------------------------------------------------

loc_2F6:				; CODE XREF: _prime_main+2EDj
		call	_BN_bn2dec

loc_2FB:				; CODE XREF: _prime_main+2F4j
		add	esp, 4
		mov	edi, eax
		push	edi
		push	offset ??_C@_03OFAPEBGM@?$CFs?6?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		push	edi
		call	_CRYPTO_free
		add	esp, 10h
		jmp	short loc_36A
; ---------------------------------------------------------------------------

loc_317:				; CODE XREF: _prime_main+29Bj
		cmp	[esp+24h+var_C], 0
		lea	eax, [esp+24h+var_14]
		push	dword ptr [ebx]
		push	eax
		jz	short loc_32C
		call	_BN_hex2bn
		jmp	short loc_331
; ---------------------------------------------------------------------------

loc_32C:				; CODE XREF: _prime_main+323j
		call	_BN_dec2bn

loc_331:				; CODE XREF: _prime_main+32Aj
		add	esp, 8
		push	[esp+24h+var_14]
		push	esi
		call	_BN_print
		push	0
		push	0
		push	ebp
		push	[esp+38h+var_14]
		call	_BN_is_prime_ex
		test	eax, eax
		mov	edx, offset ??_C@_04LKOGMCLF@not?5?$AA@	; "not "
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		cmovz	ecx, edx
		push	ecx
		push	offset ??_C@_0N@HHDFGFOO@?5is?5?$CFsprime?6?$AA@ ; " is	%sprime\n"
		push	esi
		call	_BIO_printf
		add	esp, 24h

loc_36A:				; CODE XREF: _prime_main+315j
		push	[esp+24h+var_14]
		call	_BN_free
		push	esi
		call	_BIO_free_all
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
_prime_main	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 388h
; COMDAT (pick any)
		public ??_C@_04FHOEMGIO@?9hex?$AA@
; `string'
??_C@_04FHOEMGIO@?9hex?$AA@ db '-hex',0 ; DATA XREF: _prime_main+8Bo
					; _prime_main+232o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 390h
; COMDAT (pick any)
		public ??_C@_09MOJFIIKN@?9generate?$AA@
; `string'
??_C@_09MOJFIIKN@?9generate?$AA@ db '-generate',0 ; DATA XREF: _prime_main:loc_C8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 39Ch
; COMDAT (pick any)
		public ??_C@_05HDJDOKJ@?9bits?$AA@
; `string'
??_C@_05HDJDOKJ@?9bits?$AA@ db '-bits',0 ; DATA XREF: _prime_main:loc_107o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3A4h
; COMDAT (pick any)
		public ??_C@_05JMDHGKLN@?9safe?$AA@
; `string'
??_C@_05JMDHGKLN@?9safe?$AA@ db	'-safe',0 ; DATA XREF: _prime_main:loc_158o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3ACh
; COMDAT (pick any)
		public ??_C@_07JOIGCCHK@?9checks?$AA@
; `string'
??_C@_07JOIGCCHK@?9checks?$AA@ db '-checks',0 ; DATA XREF: _prime_main:loc_193o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B4h
; COMDAT (pick any)
		public ??_C@_0BF@DKEEOPFF@Unknown?5option?5?8?$CFs?8?6?$AA@
; `string'
??_C@_0BF@DKEEOPFF@Unknown?5option?5?8?$CFs?8?6?$AA@ db	'Unknown option ',27h,'%s',27h,0Ah,0
					; DATA XREF: _prime_main+1EDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3CCh
; COMDAT (pick any)
		public ??_C@_0BE@KFPKNCFA@No?5prime?5specified?6?$AA@
; `string'
??_C@_0BE@KFPKNCFA@No?5prime?5specified?6?$AA@ db 'No prime specified',0Ah,0
					; DATA XREF: _prime_main+20Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3E0h
; COMDAT (pick any)
		public ??_C@_0BO@OCGJBDGA@Specifiy?5the?5number?5of?5bits?4?6?$AA@
; `string'
??_C@_0BO@OCGJBDGA@Specifiy?5the?5number?5of?5bits?4?6?$AA@ db 'Specifiy the number of bits.',0Ah,0
					; DATA XREF: _prime_main+2A9o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 400h
; COMDAT (pick any)
		public ??_C@_03OFAPEBGM@?$CFs?6?$AA@
; `string'
??_C@_03OFAPEBGM@?$CFs?6?$AA@ dd 0A7325h ; DATA	XREF: _prime_main+301o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 404h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _prime_main+353o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 408h
; COMDAT (pick any)
		public ??_C@_04LKOGMCLF@not?5?$AA@
; `string'
??_C@_04LKOGMCLF@not?5?$AA@ db 'not ',0 ; DATA XREF: _prime_main+34Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 410h
; COMDAT (pick any)
		public ??_C@_0N@HHDFGFOO@?5is?5?$CFsprime?6?$AA@
; `string'
??_C@_0N@HHDFGFOO@?5is?5?$CFsprime?6?$AA@ db ' is %sprime',0Ah,0
					; DATA XREF: _prime_main+35Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 420h
; COMDAT (pick any)
		public ??_C@_0N@NDELNNPO@options?5are?6?$AA@
; `string'
??_C@_0N@NDELNNPO@options?5are?6?$AA@ db 'options are',0Ah,0
					; DATA XREF: _prime_main:$bad$64o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 430h
; COMDAT (pick any)
		public ??_C@_0L@DOEGEJKP@?$CF?914s?5hex?6?$AA@
; `string'
??_C@_0L@DOEGEJKP@?$CF?914s?5hex?6?$AA@	db '%-14s hex',0Ah,0 ; DATA XREF: _prime_main+237o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 43Ch
; COMDAT (pick any)
		public ??_C@_0M@DNJFMGLC@?9checks?5?$DMn?$DO?$AA@
; `string'
??_C@_0M@DNJFMGLC@?9checks?5?$DMn?$DO?$AA@ db '-checks <n>',0 ; DATA XREF: _prime_main+247o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 448h
; COMDAT (pick any)
		public ??_C@_0BI@KOKHAHLD@?$CF?914s?5number?5of?5checks?6?$AA@
; `string'
??_C@_0BI@KOKHAHLD@?$CF?914s?5number?5of?5checks?6?$AA@	db '%-14s number of checks',0Ah,0
					; DATA XREF: _prime_main+24Co
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _prime_main+4Ep
					; _prime_main+282p
					; DATA XREF: ...
; int __cdecl _atoi(const char *Str)
		extrn __imp__atoi:near	; CODE XREF: _prime_main+149p
					; _prime_main+1CDp
					; DATA XREF: ...
		extrn _CRYPTO_free:near	; CODE XREF: _prime_main+30Dp
		extrn _BIO_s_file:near	; CODE XREF: _prime_main+35p
					; _prime_main:loc_26Cp
		extrn _BIO_new:near	; CODE XREF: _prime_main+3Bp
					; _prime_main+272p
		extrn _BIO_ctrl:near	; CODE XREF: _prime_main+5Fp
					; _prime_main+28Ep
		extrn _BIO_free_all:near ; CODE	XREF: _prime_main+374p
		extrn _BIO_printf:near	; CODE XREF: _prime_main+1F8p
					; _prime_main+21Ap ...
		extrn _BN_new:near	; CODE XREF: _prime_main:loc_2C7p
		extrn _BN_free:near	; CODE XREF: _prime_main+36Ep
		extrn _BN_print:near	; CODE XREF: _prime_main+339p
		extrn _BN_bn2hex:near	; CODE XREF: _prime_main+2EFp
		extrn _BN_bn2dec:near	; CODE XREF: _prime_main:loc_2F6p
		extrn _BN_hex2bn:near	; CODE XREF: _prime_main+325p
		extrn _BN_dec2bn:near	; CODE XREF: _prime_main:loc_32Cp
		extrn _BN_generate_prime_ex:near ; CODE	XREF: _prime_main+2DCp
		extrn _BN_is_prime_ex:near ; CODE XREF:	_prime_main+347p
		extrn __chkstk:near	; CODE XREF: _prime_main+5p
		extrn _bio_err:near	; DATA XREF: _prime_main+2Dr
					; _prime_main+43w ...


		end
