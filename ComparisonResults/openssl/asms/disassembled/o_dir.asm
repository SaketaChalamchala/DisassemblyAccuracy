;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E455AD48986DE15CF4B2224300B05A78
; Input	CRC32 :	63263BDD

; File Name   :	C:\compspace\Diff\openssl\obj\o_dir.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OPENSSL_DIR_end
_OPENSSL_DIR_end proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_33
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_33
		push	dword ptr [eax+140h] ; hFindFile
		call	dword ptr ds:__imp__FindClose@4	; FindClose(x)
		push	dword ptr [esi]	; Memory
		call	dword ptr ds:__imp__free
		add	esp, 4
		mov	dword ptr [esi], 0
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_33:					; CODE XREF: _OPENSSL_DIR_end+7j
					; _OPENSSL_DIR_end+Dj
		call	dword ptr ds:__imp___errno
		pop	esi
		mov	dword ptr [eax], 16h
		xor	eax, eax
		retn
_OPENSSL_DIR_end endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl OPENSSL_DIR_read(int, LPCSTR lpFileName)
		public _OPENSSL_DIR_read
_OPENSSL_DIR_read proc near

arg_0		= dword	ptr  4
lpFileName	= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		test	ebx, ebx
		jz	loc_208
		mov	esi, [esp+8+lpFileName]
		test	esi, esi
		jz	loc_208
		push	ebp
		push	edi
		call	dword ptr ds:__imp___errno
		mov	dword ptr [eax], 0
		mov	eax, [ebx]
		test	eax, eax
		jnz	loc_1C3
		mov	edi, esi
		xor	ebp, ebp
		lea	ecx, [edi+1]
		nop	dword ptr [eax+00000000h]

loc_84:					; CODE XREF: _OPENSSL_DIR_read+45j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_84
		sub	edi, ecx
		jnz	short loc_A3
		mov	eax, dword ptr ds:__imp___errno
		call	eax ; __imp___errno
		mov	dword ptr [eax], 2

loc_9C:					; CODE XREF: _OPENSSL_DIR_read+18Ej
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A3:					; CODE XREF: _OPENSSL_DIR_read+49j
		push	244h		; Size
		call	dword ptr ds:__imp__malloc
		add	esp, 4
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_F2
		push	244h		; Size
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		cmp	byte ptr [edi+esi-1], 2Ah ; '*'
		jz	loc_177
		lea	eax, [edi+3]
		push	eax		; Size
		call	dword ptr ds:__imp__malloc
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_106
		push	dword ptr [ebx]	; Memory
		call	dword ptr ds:__imp__free
		add	esp, 4
		mov	[ebx], ebp

loc_F2:					; CODE XREF: _OPENSSL_DIR_read+71j
		mov	eax, dword ptr ds:__imp___errno
		call	eax ; __imp___errno
		pop	edi
		pop	ebp
		pop	esi
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_106:				; CODE XREF: _OPENSSL_DIR_read+9Fj
		mov	al, [edi+esi-1]
		cmp	al, 2Fh	; '/'
		jz	short loc_146
		cmp	al, 5Ch	; '\'
		jz	short loc_146
		mov	ecx, ebp
		sub	ecx, esi

loc_116:				; CODE XREF: _OPENSSL_DIR_read+DDj
		mov	al, [esi]
		lea	esi, [esi+1]
		mov	[ecx+esi-1], al
		test	al, al
		jnz	short loc_116
		lea	ecx, [ebp-1]
		lea	esi, [ecx+1]

loc_129:				; CODE XREF: _OPENSSL_DIR_read+EDj
		mov	al, [ecx+1]
		lea	ecx, [ecx+1]
		test	al, al
		jnz	short loc_129
		mov	ax, ??_C@_02FMMEOLBI@?1?$CK?$AA@ ; `string'
		mov	[ecx], ax
		mov	al, byte_21E
		mov	[ecx+2], al
		jmp	short loc_177
; ---------------------------------------------------------------------------

loc_146:				; CODE XREF: _OPENSSL_DIR_read+C8j
					; _OPENSSL_DIR_read+CCj
		mov	ecx, ebp
		sub	ecx, esi

loc_14A:				; CODE XREF: _OPENSSL_DIR_read+111j
		mov	al, [esi]
		lea	esi, [esi+1]
		mov	[ecx+esi-1], al
		test	al, al
		jnz	short loc_14A
		lea	edi, [ebp-1]
		lea	esi, [edi+1]
		nop	dword ptr [eax+00000000h]

loc_164:				; CODE XREF: _OPENSSL_DIR_read+128j
		mov	al, [edi+1]
		lea	edi, [edi+1]
		test	al, al
		jnz	short loc_164
		mov	ax, ds:??_C@_01NBENCBCI@?$CK?$AA@ ; `string'
		mov	[edi], ax

loc_177:				; CODE XREF: _OPENSSL_DIR_read+88j
					; _OPENSSL_DIR_read+100j
		push	dword ptr [ebx]	; lpFindFileData
		push	esi		; lpFileName
		call	dword ptr ds:__imp__FindFirstFileA@8 ; FindFirstFileA(x,x)
		mov	ecx, [ebx]
		mov	esi, dword ptr ds:__imp__free
		mov	[ecx+140h], eax
		test	ebp, ebp
		jz	short loc_198
		push	ebp		; Memory
		call	esi ; __imp__free
		add	esp, 4

loc_198:				; CODE XREF: _OPENSSL_DIR_read+14Cj
		mov	eax, [ebx]
		cmp	dword ptr [eax+140h], 0FFFFFFFFh
		jnz	short loc_1D8
		push	eax		; Memory
		call	esi ; __imp__free
		mov	eax, dword ptr ds:__imp___errno
		add	esp, 4
		mov	dword ptr [ebx], 0
		call	eax ; __imp___errno
		pop	edi
		pop	ebp
		pop	esi
		mov	dword ptr [eax], 16h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1C3:				; CODE XREF: _OPENSSL_DIR_read+2Cj
		push	eax		; lpFindFileData
		push	dword ptr [eax+140h] ; hFindFile
		call	dword ptr ds:__imp__FindNextFileA@8 ; FindNextFileA(x,x)
		test	eax, eax
		jz	loc_9C

loc_1D8:				; CODE XREF: _OPENSSL_DIR_read+15Dj
		mov	ecx, [ebx]
		push	0FFh		; Count
		lea	eax, [ecx+2Ch]
		push	eax		; Source
		lea	eax, [ecx+144h]
		push	eax		; Dest
		call	dword ptr ds:__imp__strncpy
		mov	eax, [ebx]
		add	esp, 0Ch
		pop	edi
		pop	ebp
		mov	byte ptr [eax+243h], 0
		mov	eax, [ebx]
		pop	esi
		add	eax, 144h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_208:				; CODE XREF: _OPENSSL_DIR_read+8j
					; _OPENSSL_DIR_read+14j
		call	dword ptr ds:__imp___errno
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 16h
		xor	eax, eax
		retn
_OPENSSL_DIR_read endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 21Ch
; COMDAT (pick any)
		public ??_C@_02FMMEOLBI@?1?$CK?$AA@
; `string'
??_C@_02FMMEOLBI@?1?$CK?$AA@ dw	2A2Fh	; DATA XREF: _OPENSSL_DIR_read+EFr
byte_21E	db 0			; DATA XREF: _OPENSSL_DIR_read+F8r
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 220h
; COMDAT (pick any)
		public ??_C@_01NBENCBCI@?$CK?$AA@
; `string'
??_C@_01NBENCBCI@?$CK?$AA@ dw 2Ah	; DATA XREF: _OPENSSL_DIR_read+12Ar
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int *__cdecl __errno()
		extrn __imp___errno:near ; CODE	XREF: _OPENSSL_DIR_end:loc_33p
					; _OPENSSL_DIR_read+1Cp ...
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near ; CODE XREF: _OPENSSL_DIR_read+1A6p
					; DATA XREF: _OPENSSL_DIR_read+1A6r
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn __imp__FindClose@4:near ;	CODE XREF: _OPENSSL_DIR_end+15p
					; DATA XREF: _OPENSSL_DIR_end+15r
; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA	lpFindFileData)
		extrn __imp__FindFirstFileA@8:near ; CODE XREF:	_OPENSSL_DIR_read+136p
					; DATA XREF: _OPENSSL_DIR_read+136r
; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
		extrn __imp__FindNextFileA@8:near ; CODE XREF: _OPENSSL_DIR_read+186p
					; DATA XREF: _OPENSSL_DIR_read+186r
; void __cdecl _free(void *Memory)
		extrn __imp__free:near	; CODE XREF: _OPENSSL_DIR_end+1Dp
					; _OPENSSL_DIR_read+A3p ...
; void *__cdecl	_malloc(size_t Size)
		extrn __imp__malloc:near ; CODE	XREF: _OPENSSL_DIR_read+64p
					; _OPENSSL_DIR_read+92p
					; DATA XREF: ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _OPENSSL_DIR_read+7Bp


		end
