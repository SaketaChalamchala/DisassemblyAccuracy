;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2A4C6F94800D1B2F0A53B3FBDA3D5B8B
; Input	CRC32 :	9B9DC683

; File Name   :	C:\compspace\Diff\openssl\obj\pk7_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_RECIP_INFO_get0_alg
_PKCS7_RECIP_INFO_get0_alg proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short locret_11
		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		mov	[ecx], eax

locret_11:				; CODE XREF: _PKCS7_RECIP_INFO_get0_alg+6j
		retn
_PKCS7_RECIP_INFO_get0_alg endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_RECIP_INFO_set
_PKCS7_RECIP_INFO_set proc near		; CODE XREF: _PKCS7_add_recipient+11p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		push	0
		push	dword ptr [edi]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_2B
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_2B:					; CODE XREF: _PKCS7_RECIP_INFO_set+13j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	ebx
		call	_X509_get_issuer_name
		push	eax
		push	dword ptr [edi+4]
		call	_X509_NAME_set
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6A
		mov	eax, [edi+4]
		push	dword ptr [eax+4]
		call	_ASN1_STRING_free
		push	ebx
		call	_X509_get_serialNumber
		push	eax
		call	_ASN1_STRING_dup
		mov	ecx, [edi+4]
		add	esp, 0Ch
		mov	[ecx+4], eax
		test	eax, eax
		jnz	short loc_6F

loc_6A:					; CODE XREF: _PKCS7_RECIP_INFO_set+30j
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6F:					; CODE XREF: _PKCS7_RECIP_INFO_set+54j
		push	esi
		push	ebx
		call	_X509_get_pubkey
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_E5
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_E5
		mov	eax, [eax+58h]
		test	eax, eax
		jz	short loc_E5
		push	edi
		push	0
		push	2
		push	esi
		call	eax
		add	esp, 10h
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_A4
		push	21Eh
		jmp	short loc_EA
; ---------------------------------------------------------------------------

loc_A4:					; CODE XREF: _PKCS7_RECIP_INFO_set+87j
		test	eax, eax
		jg	short loc_B9
		push	223h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	95h ; 'ï'
		jmp	short loc_F4
; ---------------------------------------------------------------------------

loc_B9:					; CODE XREF: _PKCS7_RECIP_INFO_set+92j
		push	esi
		call	_EVP_PKEY_free
		push	229h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	3
		lea	eax, [ebx+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 18h
		mov	[edi+10h], ebx
		mov	eax, 1
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_E5:					; CODE XREF: _PKCS7_RECIP_INFO_set+69j
					; _PKCS7_RECIP_INFO_set+70j ...
		push	217h

loc_EA:					; CODE XREF: _PKCS7_RECIP_INFO_set+8Ej
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	96h ; 'ñ'

loc_F4:					; CODE XREF: _PKCS7_RECIP_INFO_set+A3j
		push	82h ; 'Ç'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h

$err$17:
		test	esi, esi
		jz	short loc_110
		push	esi
		call	_EVP_PKEY_free
		add	esp, 4

loc_110:				; CODE XREF: _PKCS7_RECIP_INFO_set+F1j
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
_PKCS7_RECIP_INFO_set endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 118h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_SIGNER_INFO_get0_algs
_PKCS7_SIGNER_INFO_get0_algs proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		test	edx, edx
		jz	short loc_129
		mov	eax, [ecx+1Ch]
		mov	[edx], eax

loc_129:				; CODE XREF: _PKCS7_SIGNER_INFO_get0_algs+Aj
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_136
		mov	eax, [ecx+8]
		mov	[edx], eax

loc_136:				; CODE XREF: _PKCS7_SIGNER_INFO_get0_algs+17j
		mov	edx, [esp+arg_C]
		test	edx, edx
		jz	short locret_143
		mov	eax, [ecx+10h]
		mov	[edx], eax

locret_143:				; CODE XREF: _PKCS7_SIGNER_INFO_get0_algs+24j
		retn
_PKCS7_SIGNER_INFO_get0_algs endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 144h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_SIGNER_INFO_set
_PKCS7_SIGNER_INFO_set proc near	; CODE XREF: _PKCS7_add_signature+6Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	1
		push	dword ptr [esi]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	$err$11_0
		mov	edi, [esp+8+arg_4]
		push	edi
		call	_X509_get_issuer_name
		push	eax
		push	dword ptr [esi+4]
		call	_X509_NAME_set
		add	esp, 0Ch
		test	eax, eax
		jz	$err$11_0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	_ASN1_STRING_free
		push	edi
		call	_X509_get_serialNumber
		push	eax
		call	_ASN1_STRING_dup
		mov	ecx, [esi+4]
		add	esp, 0Ch
		mov	[ecx+4], eax
		test	eax, eax
		jz	$err$11_0
		mov	edi, [esp+8+arg_8]
		push	179h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	0Ah
		lea	eax, [edi+8]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	[esi+1Ch], edi
		push	0
		push	5
		push	[esp+10h+arg_C]
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2obj
		add	esp, 8
		push	eax
		push	dword ptr [esi+8]
		call	_X509_ALGOR_set0
		mov	eax, [edi+0Ch]
		add	esp, 10h
		test	eax, eax
		jz	short loc_234
		mov	eax, [eax+58h]
		test	eax, eax
		jz	short loc_234
		push	esi
		push	0
		push	1
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jle	short loc_20C
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: _PKCS7_SIGNER_INFO_set+BEj
		cmp	eax, 0FFFFFFFEh
		jz	short loc_234
		push	187h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	93h ; 'ì'
		push	81h ; 'Å'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_234:				; CODE XREF: _PKCS7_SIGNER_INFO_set+A8j
					; _PKCS7_SIGNER_INFO_set+AFj ...
		push	18Ch
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	94h ; 'î'
		push	81h ; 'Å'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h

$err$11_0:				; CODE XREF: _PKCS7_SIGNER_INFO_set+14j
					; _PKCS7_SIGNER_INFO_set+32j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_PKCS7_SIGNER_INFO_set endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 258h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_add_certificate
_PKCS7_add_certificate proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		sub	eax, 16h
		jz	short loc_28E
		sub	eax, 2
		jz	short loc_28E
		push	130h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	71h ; 'q'
		push	64h ; 'd'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_28E:				; CODE XREF: _PKCS7_add_certificate+13j
					; _PKCS7_add_certificate+18j
		mov	esi, [esi+14h]
		add	esi, 8
		cmp	dword ptr [esi], 0
		jnz	short loc_2C0
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_2C0
		push	137h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	41h ; 'A'
		push	64h ; 'd'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2C0:				; CODE XREF: _PKCS7_add_certificate+3Fj
					; _PKCS7_add_certificate+4Aj
		push	edi
		mov	edi, [esp+8+arg_4]
		push	13Ah
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	3
		lea	eax, [edi+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		push	edi
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_2F9
		push	edi
		call	_X509_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2F9:				; CODE XREF: _PKCS7_add_certificate+91j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_PKCS7_add_certificate endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 304h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_add_crl
_PKCS7_add_crl	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		sub	eax, 16h
		jz	short loc_33A
		sub	eax, 2
		jz	short loc_33A
		push	150h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	71h ; 'q'
		push	65h ; 'e'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_33A:				; CODE XREF: _PKCS7_add_crl+13j
					; _PKCS7_add_crl+18j
		mov	esi, [esi+14h]
		add	esi, 0Ch
		cmp	dword ptr [esi], 0
		jnz	short loc_36C
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_36C
		push	157h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	41h ; 'A'
		push	65h ; 'e'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_36C:				; CODE XREF: _PKCS7_add_crl+3Fj
					; _PKCS7_add_crl+4Aj
		push	edi
		mov	edi, [esp+8+arg_4]
		push	15Bh
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	6
		lea	eax, [edi+0Ch]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		push	edi
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_3A5
		push	edi
		call	_X509_CRL_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3A5:				; CODE XREF: _PKCS7_add_crl+91j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_PKCS7_add_crl	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_add_recipient
_PKCS7_add_recipient proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_PKCS7_RECIP_INFO_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_3EB
		push	[esp+4+arg_4]
		push	esi
		call	_PKCS7_RECIP_INFO_set
		add	esp, 8
		test	eax, eax
		jz	short $err$8_0
		push	esi
		push	[esp+8+arg_0]
		call	_PKCS7_add_recipient_info
		add	esp, 8
		test	eax, eax
		jz	short $err$8_0
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$err$8_0:				; CODE XREF: _PKCS7_add_recipient+1Bj
					; _PKCS7_add_recipient+2Cj
		push	esi
		call	_PKCS7_RECIP_INFO_free
		add	esp, 4

loc_3EB:				; CODE XREF: _PKCS7_add_recipient+Aj
		xor	eax, eax
		pop	esi
		retn
_PKCS7_add_recipient endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_add_recipient_info
_PKCS7_add_recipient_info proc near	; CODE XREF: _PKCS7_add_recipient+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		sub	eax, 17h
		jz	short loc_441
		sub	eax, 1
		jz	short loc_426
		push	1FBh
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	71h ; 'q'
		push	66h ; 'f'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_426:				; CODE XREF: _PKCS7_add_recipient_info+18j
		mov	eax, [esi+14h]
		push	[esp+4+arg_4]
		mov	eax, [eax+18h]
		push	eax
		call	_sk_push
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_441:				; CODE XREF: _PKCS7_add_recipient_info+13j
		mov	eax, [esi+14h]
		push	[esp+4+arg_4]
		mov	eax, [eax+4]
		push	eax
		call	_sk_push
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	esi
		retn
_PKCS7_add_recipient_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 45Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_add_signature
_PKCS7_add_signature proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_C]
		test	edi, edi
		jnz	short loc_4B6
		lea	eax, [esp+8+arg_C]
		push	eax
		push	[esp+0Ch+arg_8]
		call	_EVP_PKEY_get_default_digest_nid
		add	esp, 8
		test	eax, eax
		jle	short loc_4F6
		push	[esp+8+arg_C]
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_4B6
		push	19Ch
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	97h ; 'ó'
		push	83h ; 'É'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4B6:				; CODE XREF: _PKCS7_add_signature+8j
					; _PKCS7_add_signature+35j
		call	_PKCS7_SIGNER_INFO_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_4F6
		push	edi
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	esi
		call	_PKCS7_SIGNER_INFO_set
		add	esp, 10h
		test	eax, eax
		jz	short $err$11_1
		push	esi
		push	[esp+0Ch+arg_0]
		call	_PKCS7_add_signer
		add	esp, 8
		test	eax, eax
		jz	short $err$11_1
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$err$11_1:				; CODE XREF: _PKCS7_add_signature+79j
					; _PKCS7_add_signature+8Aj
		push	esi
		call	_PKCS7_SIGNER_INFO_free
		add	esp, 4

loc_4F6:				; CODE XREF: _PKCS7_add_signature+1Dj
					; _PKCS7_add_signature+63j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_PKCS7_add_signature endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_add_signer
_PKCS7_add_signer proc near		; CODE XREF: _PKCS7_add_signature+80p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		sub	eax, 16h
		jz	short loc_536
		sub	eax, 2
		jz	short loc_536
		push	0FFh
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	71h ; 'q'
		push	67h ; 'g'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_536:				; CODE XREF: _PKCS7_add_signer+15j
					; _PKCS7_add_signer+1Aj
		mov	eax, [esi+14h]
		push	ebx
		mov	edi, [eax+4]
		mov	ebp, [eax+10h]
		mov	eax, [esp+10h+arg_4]
		mov	eax, [eax+8]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	edi
		mov	ebx, eax
		xor	esi, esi
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	short loc_582

loc_55F:				; CODE XREF: _PKCS7_add_signer+84j
		push	esi
		push	edi
		call	_sk_value
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 0Ch
		cmp	eax, ebx
		jz	short loc_5C8
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_55F

loc_582:				; CODE XREF: _PKCS7_add_signer+61j
		call	_X509_ALGOR_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_5E0
		call	_ASN1_TYPE_new
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_5E0
		push	ebx
		call	_OBJ_nid2obj
		mov	[esi], eax
		mov	eax, [esi+4]
		push	esi
		push	edi
		mov	dword ptr [eax], 5
		call	_sk_push
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_5C8
		push	esi
		call	_X509_ALGOR_free
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_5C8:				; CODE XREF: _PKCS7_add_signer+76j
					; _PKCS7_add_signer+BAj
		push	[esp+10h+arg_4]
		push	ebp
		call	_sk_push
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_5E0:				; CODE XREF: _PKCS7_add_signer+8Fj
					; _PKCS7_add_signer+9Bj
		push	esi
		call	_X509_ALGOR_free
		push	112h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	41h ; 'A'
		push	67h ; 'g'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 18h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
_PKCS7_add_signer endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 608h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_cert_from_signer_info
_PKCS7_cert_from_signer_info proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 16h
		jnz	short loc_639
		mov	eax, [esp+4+arg_4]
		mov	eax, [eax+4]
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		mov	eax, [esi+14h]
		push	dword ptr [eax+8]
		call	_X509_find_by_issuer_and_serial
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_639:				; CODE XREF: _PKCS7_cert_from_signer_info+13j
		xor	eax, eax
		pop	esi
		retn
_PKCS7_cert_from_signer_info endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 640h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_content_new
_PKCS7_content_new proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_PKCS7_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_67E
		push	[esp+4+arg_4]
		push	esi
		call	_PKCS7_set_type
		add	esp, 8
		test	eax, eax
		jz	short $err$8
		push	esi
		push	[esp+8+arg_0]
		call	_PKCS7_set_content
		add	esp, 8
		test	eax, eax
		jz	short $err$8
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

$err$8:					; CODE XREF: _PKCS7_content_new+1Bj
					; _PKCS7_content_new+2Cj
		push	esi
		call	_PKCS7_free
		add	esp, 4

loc_67E:				; CODE XREF: _PKCS7_content_new+Aj
		xor	eax, eax
		pop	esi
		retn
_PKCS7_content_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 684h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_ctrl
_PKCS7_ctrl	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		mov	ecx, [esp+8+arg_4]
		add	esp, 4
		sub	ecx, 1
		jz	short loc_6FA
		sub	ecx, 1
		jz	short loc_6BB
		push	69h ; 'i'
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	6Eh ; 'n'
		push	68h ; 'h'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6BB:				; CODE XREF: _PKCS7_ctrl+1Cj
		cmp	eax, 16h
		jnz	short loc_6E1
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_6D7
		mov	eax, [eax+14h]
		cmp	dword ptr [eax+14h], 0
		jz	short loc_6D7
		xor	eax, eax
		mov	[esi+0Ch], eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6D7:				; CODE XREF: _PKCS7_ctrl+41j
					; _PKCS7_ctrl+4Aj
		mov	eax, 1
		mov	[esi+0Ch], eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E1:				; CODE XREF: _PKCS7_ctrl+3Aj
		push	63h ; 'c'

loc_6E3:				; CODE XREF: _PKCS7_ctrl+C2j
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	68h ; 'h'
		push	68h ; 'h'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FA:				; CODE XREF: _PKCS7_ctrl+17j
		cmp	eax, 16h
		jnz	short loc_744
		push	edi
		mov	edi, [esp+8+arg_8]
		mov	[esi+0Ch], edi
		test	edi, edi
		jz	short loc_73F
		mov	eax, [esi+14h]
		mov	eax, [eax+14h]
		push	dword ptr [eax+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 15h
		jnz	short loc_73F
		mov	ecx, [esi+14h]
		mov	ecx, [ecx+14h]
		push	dword ptr [ecx+14h]
		call	_ASN1_OCTET_STRING_free
		mov	ecx, [esi+14h]
		add	esp, 4
		mov	ecx, [ecx+14h]
		mov	dword ptr [ecx+14h], 0

loc_73F:				; CODE XREF: _PKCS7_ctrl+85j
					; _PKCS7_ctrl+9Bj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_744:				; CODE XREF: _PKCS7_ctrl+79j
		push	55h ; 'U'
		jmp	short loc_6E3
_PKCS7_ctrl	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 748h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_get_signer_info
_PKCS7_get_signer_info proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_77F
		cmp	dword ptr [esi+14h], 0
		jz	short loc_77F
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 16h
		jnz	short loc_76F

loc_767:				; CODE XREF: _PKCS7_get_signer_info+35j
		mov	eax, [esi+14h]
		pop	esi
		mov	eax, [eax+10h]
		retn
; ---------------------------------------------------------------------------

loc_76F:				; CODE XREF: _PKCS7_get_signer_info+1Dj
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 18h
		jz	short loc_767

loc_77F:				; CODE XREF: _PKCS7_get_signer_info+7j
					; _PKCS7_get_signer_info+Dj
		xor	eax, eax
		pop	esi
		retn
_PKCS7_get_signer_info endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 784h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_set0_type_other
_PKCS7_set0_type_other proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_4]
		call	_OBJ_nid2obj
		mov	ecx, [esp+4+arg_0]
		add	esp, 4
		mov	[ecx+10h], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+14h], eax
		mov	eax, 1
		retn
_PKCS7_set0_type_other endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_set_cipher
_PKCS7_set_cipher proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		sub	eax, 17h
		jz	short loc_7E4
		sub	eax, 1
		jz	short loc_7DC
		push	24Dh
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	71h ; 'q'
		push	6Ch ; 'l'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7DC:				; CODE XREF: _PKCS7_set_cipher+19j
		mov	eax, [esi+14h]
		mov	edi, [eax+14h]
		jmp	short loc_7EA
; ---------------------------------------------------------------------------

loc_7E4:				; CODE XREF: _PKCS7_set_cipher+14j
		mov	eax, [esi+14h]
		mov	edi, [eax+8]

loc_7EA:				; CODE XREF: _PKCS7_set_cipher+3Ej
		mov	esi, [esp+8+arg_4]
		push	esi
		call	_EVP_CIPHER_type
		add	esp, 4
		test	eax, eax
		jnz	short loc_81B
		push	255h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	90h ; 'ê'
		push	6Ch ; 'l'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_81B:				; CODE XREF: _PKCS7_set_cipher+55j
		mov	[edi+0Ch], esi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_PKCS7_set_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 828h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_set_content
_PKCS7_set_content proc	near		; CODE XREF: _PKCS7_content_new+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 16h
		jz	short loc_882
		cmp	eax, 19h
		jz	short loc_85E
		push	96h ; 'ñ'
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	70h ; 'p'
		push	6Dh ; 'm'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h

$err$11:
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_85E:				; CODE XREF: _PKCS7_set_content+18j
		mov	eax, [esi+14h]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_871
		push	eax
		call	_PKCS7_free
		add	esp, 4

loc_871:				; CODE XREF: _PKCS7_set_content+3Ej
		mov	ecx, [esi+14h]
		mov	eax, [esp+4+arg_4]
		pop	esi
		mov	[ecx+8], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_882:				; CODE XREF: _PKCS7_set_content+13j
		mov	eax, [esi+14h]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_895
		push	eax
		call	_PKCS7_free
		add	esp, 4

loc_895:				; CODE XREF: _PKCS7_set_content+62j
		mov	ecx, [esi+14h]
		mov	eax, [esp+4+arg_4]
		pop	esi
		mov	[ecx+14h], eax
		mov	eax, 1
		retn
_PKCS7_set_content endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_set_digest
_PKCS7_set_digest proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 19h
		jnz	short loc_91B
		call	_ASN1_TYPE_new
		mov	ecx, [esi+14h]
		mov	ecx, [ecx+4]
		mov	[ecx+4], eax
		test	eax, eax
		jnz	short loc_8EB
		push	1B2h
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	41h ; 'A'
		push	7Eh ; '~'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_8EB:				; CODE XREF: _PKCS7_set_digest+25j
		mov	eax, [esi+14h]
		push	[esp+4+arg_4]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	dword ptr [eax], 5
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2obj
		mov	ecx, [esi+14h]
		add	esp, 8
		mov	ecx, [ecx+4]
		pop	esi
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_91B:				; CODE XREF: _PKCS7_set_digest+13j
		push	1BAh
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	71h ; 'q'
		push	7Eh ; '~'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 1
		pop	esi
		retn
_PKCS7_set_digest endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 93Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_set_type
_PKCS7_set_type	proc near		; CODE XREF: _PKCS7_content_new+11p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	esi
		call	_OBJ_nid2obj
		add	esi, 0FFFFFFEBh
		add	esp, 4
		cmp	esi, 5		; switch 6 cases
		ja	loc_AB1		; jumptable 00000956 default case
		jmp	ds:$LN26[esi*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _PKCS7_set_type+1Aj
					; DATA XREF: .text$mn:$LN26o
		mov	esi, [esp+4+arg_0] ; jumptable 00000956	case 1
		mov	[esi+10h], eax
		call	_PKCS7_SIGNED_new
		mov	[esi+14h], eax
		test	eax, eax
		jz	$err$27
		push	1
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jnz	loc_AAA
		push	dword ptr [esi+14h]
		call	_PKCS7_SIGNED_free
		add	esp, 4
		mov	dword ptr [esi+14h], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _PKCS7_set_type+1Aj
					; DATA XREF: .text$mn:$LN26o
		mov	esi, [esp+4+arg_0] ; jumptable 00000956	case 0
		push	4
		mov	[esi+10h], eax
		call	_ASN1_STRING_type_new
		add	esp, 4
		mov	[esi+14h], eax
		jmp	loc_AA6
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _PKCS7_set_type+1Aj
					; DATA XREF: .text$mn:$LN26o
		mov	esi, [esp+4+arg_0] ; jumptable 00000956	case 3
		mov	[esi+10h], eax
		call	_PKCS7_SIGN_ENVELOPE_new
		mov	[esi+14h], eax
		test	eax, eax
		jz	$err$27
		push	1
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		mov	eax, [esi+14h]
		push	1
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 10h
		test	eax, eax
		jz	$err$27
		push	15h
		call	_OBJ_nid2obj
		mov	ecx, [esi+14h]
		add	esp, 4
		mov	ecx, [ecx+14h]
		pop	esi
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _PKCS7_set_type+1Aj
					; DATA XREF: .text$mn:$LN26o
		mov	esi, [esp+4+arg_0] ; jumptable 00000956	case 2
		mov	[esi+10h], eax
		call	_PKCS7_ENVELOPE_new
		mov	[esi+14h], eax
		test	eax, eax
		jz	$err$27
		push	0
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	$err$27
		push	15h
		call	_OBJ_nid2obj
		mov	ecx, [esi+14h]
		add	esp, 4
		mov	ecx, [ecx+8]
		pop	esi
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _PKCS7_set_type+1Aj
					; DATA XREF: .text$mn:$LN26o
		mov	esi, [esp+4+arg_0] ; jumptable 00000956	case 5
		mov	[esi+10h], eax
		call	_PKCS7_ENCRYPT_new
		mov	[esi+14h], eax
		test	eax, eax
		jz	short $err$27
		push	0
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short $err$27
		push	15h
		call	_OBJ_nid2obj
		mov	ecx, [esi+14h]
		add	esp, 4
		mov	ecx, [ecx+4]
		pop	esi
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _PKCS7_set_type+1Aj
					; DATA XREF: .text$mn:$LN26o
		mov	esi, [esp+4+arg_0] ; jumptable 00000956	case 4
		mov	[esi+10h], eax
		call	_PKCS7_DIGEST_new
		mov	[esi+14h], eax
		test	eax, eax
		jz	short $err$27
		push	0
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 8

loc_AA6:				; CODE XREF: _PKCS7_set_type+76j
		test	eax, eax
		jz	short $err$27

loc_AAA:				; CODE XREF: _PKCS7_set_type+46j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AB1:				; CODE XREF: _PKCS7_set_type+14j
		push	0DEh ; 'ﬁ'      ; jumptable 00000956 default case
		push	offset ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ ; ".\\crypto\\pkcs7\\pk7_lib.c"
		push	70h ; 'p'
		push	6Eh ; 'n'
		push	21h ; '!'
		call	_ERR_put_error
		add	esp, 14h

$err$27:				; CODE XREF: _PKCS7_set_type+32j
					; _PKCS7_set_type+8Cj ...
		xor	eax, eax
		pop	esi
		retn
_PKCS7_set_type	endp

; ---------------------------------------------------------------------------
		align 10h
$LN26		dd offset $LN7		; DATA XREF: _PKCS7_set_type+1Ar
		dd offset $LN4		; jump table for switch	statement
		dd offset $LN12
		dd offset $LN9
		dd offset $LN18
		dd offset $LN15
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AE8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_stream
_PKCS7_stream	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	eax, 0FFFFFFEBh
		add	esp, 4
		cmp	eax, 3		; switch 4 cases
		ja	short loc_B75	; jumptable 00000B00 default case
		jmp	ds:$LN15_0[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN4_0:					; CODE XREF: _PKCS7_stream+18j
					; DATA XREF: .text$mn:$LN15_0o
		mov	edx, [esi+14h]	; jumptable 00000B00 case 0
		jmp	short loc_B5D
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _PKCS7_stream+18j
					; DATA XREF: .text$mn:$LN15_0o
		mov	eax, [esi+14h]	; jumptable 00000B00 case 3
		mov	eax, [eax+14h]
		mov	edx, [eax+8]
		test	edx, edx
		jnz	short loc_B61
		push	4
		call	_ASN1_STRING_type_new
		mov	ecx, [esi+14h]
		mov	edx, eax
		add	esp, 4
		mov	ecx, [ecx+14h]
		mov	[ecx+8], edx
		jmp	short loc_B5D
; ---------------------------------------------------------------------------

$LN7_0:					; CODE XREF: _PKCS7_stream+18j
					; DATA XREF: .text$mn:$LN15_0o
		mov	eax, [esi+14h]	; jumptable 00000B00 case 2
		mov	eax, [eax+8]
		mov	edx, [eax+8]
		test	edx, edx
		jnz	short loc_B61
		push	4
		call	_ASN1_STRING_type_new
		mov	edx, eax
		add	esp, 4
		mov	eax, [esi+14h]
		mov	eax, [eax+8]
		mov	[eax+8], edx
		jmp	short loc_B5D
; ---------------------------------------------------------------------------

$LN9_0:					; CODE XREF: _PKCS7_stream+18j
					; DATA XREF: .text$mn:$LN15_0o
		mov	eax, [esi+14h]	; jumptable 00000B00 case 1
		mov	eax, [eax+14h]
		mov	edx, [eax+14h]

loc_B5D:				; CODE XREF: _PKCS7_stream+22j
					; _PKCS7_stream+46j ...
		test	edx, edx
		jz	short loc_B75	; jumptable 00000B00 default case

loc_B61:				; CODE XREF: _PKCS7_stream+2Fj
					; _PKCS7_stream+53j
		mov	eax, [esp+4+arg_0]
		lea	ecx, [edx+8]
		or	dword ptr [edx+0Ch], 10h
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_B75:				; CODE XREF: _PKCS7_stream+16j
					; _PKCS7_stream+77j
		xor	eax, eax	; jumptable 00000B00 default case
		pop	esi
		retn
_PKCS7_stream	endp

; ---------------------------------------------------------------------------
		align 4
$LN15_0		dd offset $LN4_0	; DATA XREF: _PKCS7_stream+18r
		dd offset $LN9_0	; jump table for switch	statement
		dd offset $LN7_0
		dd offset $LN5
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8Ch
; COMDAT (pick any)
		public ??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@
; `string'
??_C@_0BJ@GHBNBDLB@?4?2crypto?2pkcs7?2pk7_lib?4c?$AA@ db '.\crypto\pkcs7\pk7_lib.c',0
					; DATA XREF: _PKCS7_RECIP_INFO_set+99o
					; _PKCS7_RECIP_INFO_set+B0o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _PKCS7_add_signer+57p
					; _PKCS7_add_signer+7Ap
		extrn _sk_value:near	; CODE XREF: _PKCS7_add_signer+65p
		extrn _sk_new_null:near	; CODE XREF: _PKCS7_add_certificate+41p
					; _PKCS7_add_crl+41p
		extrn _sk_push:near	; CODE XREF: _PKCS7_add_certificate+87p
					; _PKCS7_add_crl+87p ...
		extrn _CRYPTO_add_lock:near ; CODE XREF: _PKCS7_RECIP_INFO_set+BDp
					; _PKCS7_SIGNER_INFO_set+76p ...
		extrn _ERR_put_error:near ; CODE XREF: _PKCS7_RECIP_INFO_set+E7p
					; _PKCS7_SIGNER_INFO_set+E3p ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _PKCS7_add_signer+91p
					; _PKCS7_set_digest+15p
		extrn _ASN1_STRING_free:near ; CODE XREF: _PKCS7_RECIP_INFO_set+38p
					; _PKCS7_SIGNER_INFO_set+3Ep
		extrn _ASN1_STRING_dup:near ; CODE XREF: _PKCS7_RECIP_INFO_set+44p
					; _PKCS7_SIGNER_INFO_set+4Ap
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _PKCS7_set_type+6Bp
					; _PKCS7_stream+33p ...
		extrn _ASN1_OCTET_STRING_free:near ; CODE XREF:	_PKCS7_ctrl+A6p
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _PKCS7_RECIP_INFO_set+9p
					; _PKCS7_SIGNER_INFO_set+Ap ...
		extrn _OBJ_nid2obj:near	; CODE XREF: _PKCS7_SIGNER_INFO_set+8Fp
					; _PKCS7_add_signer+9Ep ...
		extrn _OBJ_nid2sn:near	; CODE XREF: _PKCS7_add_signature+23p
		extrn _OBJ_obj2nid:near	; CODE XREF: _PKCS7_add_certificate+8p
					; _PKCS7_add_crl+8p ...
		extrn _EVP_MD_type:near	; CODE XREF: _PKCS7_SIGNER_INFO_set+89p
					; _PKCS7_set_digest+56p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _PKCS7_add_signature+29p
		extrn _EVP_PKEY_free:near ; CODE XREF: _PKCS7_RECIP_INFO_set+A6p
					; _PKCS7_RECIP_INFO_set+F4p
		extrn _EVP_PKEY_get_default_digest_nid:near
					; CODE XREF: _PKCS7_add_signature+13p
		extrn _EVP_CIPHER_type:near ; CODE XREF: _PKCS7_set_cipher+4Bp
		extrn _PKCS7_SIGNER_INFO_new:near ; CODE XREF: _PKCS7_add_signature:loc_4B6p
		extrn _PKCS7_SIGNER_INFO_free:near ; CODE XREF:	_PKCS7_add_signature+92p
		extrn _PKCS7_RECIP_INFO_new:near ; CODE	XREF: _PKCS7_add_recipient+1p
		extrn _PKCS7_RECIP_INFO_free:near ; CODE XREF: _PKCS7_add_recipient+33p
		extrn _PKCS7_SIGNED_new:near ; CODE XREF: _PKCS7_set_type+28p
		extrn _PKCS7_SIGNED_free:near ;	CODE XREF: _PKCS7_set_type+4Fp
		extrn _PKCS7_ENVELOPE_new:near ; CODE XREF: _PKCS7_set_type+D2p
		extrn _PKCS7_SIGN_ENVELOPE_new:near ; CODE XREF: _PKCS7_set_type+82p
		extrn _PKCS7_DIGEST_new:near ; CODE XREF: _PKCS7_set_type+152p
		extrn _PKCS7_ENCRYPT_new:near ;	CODE XREF: _PKCS7_set_type+116p
		extrn _PKCS7_new:near	; CODE XREF: _PKCS7_content_new+1p
		extrn _PKCS7_free:near	; CODE XREF: _PKCS7_content_new+36p
					; _PKCS7_set_content+41p ...
		extrn _X509_ALGOR_set0:near ; CODE XREF: _PKCS7_SIGNER_INFO_set+9Bp
		extrn _X509_ALGOR_new:near ; CODE XREF:	_PKCS7_add_signer:loc_582p
		extrn _X509_ALGOR_free:near ; CODE XREF: _PKCS7_add_signer+BDp
					; _PKCS7_add_signer+E5p
		extrn _X509_NAME_set:near ; CODE XREF: _PKCS7_RECIP_INFO_set+26p
					; _PKCS7_SIGNER_INFO_set+28p
		extrn _X509_free:near	; CODE XREF: _PKCS7_add_certificate+94p
		extrn _X509_CRL_free:near ; CODE XREF: _PKCS7_add_crl+94p
		extrn _X509_get_serialNumber:near ; CODE XREF: _PKCS7_RECIP_INFO_set+3Ep
					; _PKCS7_SIGNER_INFO_set+44p
		extrn _X509_get_issuer_name:near ; CODE	XREF: _PKCS7_RECIP_INFO_set+1Dp
					; _PKCS7_SIGNER_INFO_set+1Fp
		extrn _X509_get_pubkey:near ; CODE XREF: _PKCS7_RECIP_INFO_set+5Dp
		extrn _X509_find_by_issuer_and_serial:near
					; CODE XREF: _PKCS7_cert_from_signer_info+27p


		end
