;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F24705CBA018A8D2150B8DEEE7320A6B
; Input	CRC32 :	AC60E341

; File Name   :	C:\compspace\Diff\openssl\obj\pem_oth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_ASN1_read_bio
_PEM_ASN1_read_bio proc	near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 0Ch
		call	__chkstk
		push	[esp+0Ch+arg_14]
		lea	eax, [esp+10h+var_4]
		mov	[esp+10h+var_8], 0
		push	[esp+10h+arg_10]
		mov	[esp+14h+var_C], 0
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	0
		push	eax
		lea	eax, [esp+24h+var_C]
		push	eax
		call	_PEM_bytes_read_bio
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_46
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_46:					; CODE XREF: _PEM_ASN1_read_bio+40j
		mov	eax, [esp+0Ch+var_C]
		push	esi
		push	[esp+10h+var_4]
		mov	[esp+14h+var_8], eax
		lea	eax, [esp+14h+var_8]
		push	eax
		push	[esp+18h+arg_C]
		call	[esp+1Ch+arg_0]
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_7D
		push	53h ; 'S'
		push	offset ??_C@_0BH@MJHCPJFL@?4?2crypto?2pem?2pem_oth?4c?$AA@ ; ".\\crypto\\pem\\pem_oth.c"
		push	0Dh
		push	67h ; 'g'
		push	9
		call	_ERR_put_error
		add	esp, 14h

loc_7D:					; CODE XREF: _PEM_ASN1_read_bio+66j
		push	[esp+10h+var_C]
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 0Ch
		retn
_PEM_ASN1_read_bio endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
; COMDAT (pick any)
		public ??_C@_0BH@MJHCPJFL@?4?2crypto?2pem?2pem_oth?4c?$AA@
; `string'
??_C@_0BH@MJHCPJFL@?4?2crypto?2pem?2pem_oth?4c?$AA@ db '.\crypto\pem\pem_oth.c',0
					; DATA XREF: _PEM_ASN1_read_bio+6Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_free:near	; CODE XREF: _PEM_ASN1_read_bio+81p
		extrn _ERR_put_error:near ; CODE XREF: _PEM_ASN1_read_bio+75p
		extrn _PEM_bytes_read_bio:near ; CODE XREF: _PEM_ASN1_read_bio+36p
		extrn __chkstk:near	; CODE XREF: _PEM_ASN1_read_bio+5p


		end
