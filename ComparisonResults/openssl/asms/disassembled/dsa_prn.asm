;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	10048B1007C6F26C7CACC6454078A58B
; Input	CRC32 :	0041FEB0

; File Name   :	C:\compspace\Diff\openssl\obj\dsa_prn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DSA_print
_DSA_print	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_3E
		push	[esp+4+arg_4]
		push	edi
		call	_EVP_PKEY_set1_DSA
		add	esp, 8
		test	eax, eax
		jz	short loc_3E
		push	esi
		push	0
		push	[esp+0Ch+arg_8]
		push	edi
		push	[esp+14h+arg_0]
		call	_EVP_PKEY_print_private
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_3E:					; CODE XREF: _DSA_print+Aj
					; _DSA_print+1Bj
		xor	eax, eax
		pop	edi
		retn
_DSA_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DSA_print_fp
_DSA_print_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_72
		push	48h ; 'H'
		push	offset ??_C@_0BH@FJBPGLLO@?4?2crypto?2dsa?2dsa_prn?4c?$AA@ ; ".\\crypto\\dsa\\dsa_prn.c"
		push	7
		push	69h ; 'i'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_72:					; CODE XREF: _DSA_print_fp+13j
		push	ebx
		push	edi
		push	[esp+0Ch+arg_0]
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_C8
		push	[esp+0Ch+arg_4]
		push	edi
		call	_EVP_PKEY_set1_DSA
		add	esp, 8
		test	eax, eax
		jz	short loc_C8
		push	0
		push	[esp+10h+arg_8]
		push	edi
		push	esi
		call	_EVP_PKEY_print_private
		push	edi
		mov	ebx, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C8:					; CODE XREF: _DSA_print_fp+4Aj
					; _DSA_print_fp+5Bj
		push	esi
		xor	ebx, ebx
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
_DSA_print_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DSAparams_print
_DSAparams_print proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_118
		push	[esp+4+arg_4]
		push	edi
		call	_EVP_PKEY_set1_DSA
		add	esp, 8
		test	eax, eax
		jz	short loc_118
		push	esi
		push	0
		push	4
		push	edi
		push	[esp+14h+arg_0]
		call	_EVP_PKEY_print_params
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_118:				; CODE XREF: _DSAparams_print+Aj
					; _DSAparams_print+1Bj
		xor	eax, eax
		pop	edi
		retn
_DSAparams_print endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DSAparams_print_fp
_DSAparams_print_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_14A
		push	57h ; 'W'
		push	offset ??_C@_0BH@FJBPGLLO@?4?2crypto?2dsa?2dsa_prn?4c?$AA@ ; ".\\crypto\\dsa\\dsa_prn.c"
		push	7
		push	65h ; 'e'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_14A:				; CODE XREF: _DSAparams_print_fp+13j
		push	ebx
		push	edi
		push	[esp+0Ch+arg_0]
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_19E
		push	[esp+0Ch+arg_4]
		push	edi
		call	_EVP_PKEY_set1_DSA
		add	esp, 8
		test	eax, eax
		jz	short loc_19E
		push	0
		push	4
		push	edi
		push	esi
		call	_EVP_PKEY_print_params
		push	edi
		mov	ebx, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_19E:				; CODE XREF: _DSAparams_print_fp+4Aj
					; _DSAparams_print_fp+5Bj
		push	esi
		xor	ebx, ebx
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
_DSAparams_print_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B0h
; COMDAT (pick any)
		public ??_C@_0BH@FJBPGLLO@?4?2crypto?2dsa?2dsa_prn?4c?$AA@
; `string'
??_C@_0BH@FJBPGLLO@?4?2crypto?2dsa?2dsa_prn?4c?$AA@ db '.\crypto\dsa\dsa_prn.c',0
					; DATA XREF: _DSA_print_fp+17o
					; _DSAparams_print_fp+17o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_s_file:near	; CODE XREF: _DSA_print_fp+1p
					; _DSAparams_print_fp+1p
		extrn _BIO_new:near	; CODE XREF: _DSA_print_fp+7p
					; _DSAparams_print_fp+7p
		extrn _BIO_free:near	; CODE XREF: _DSA_print_fp+76p
					; _DSA_print_fp+87p ...
		extrn _BIO_ctrl:near	; CODE XREF: _DSA_print_fp+39p
					; _DSAparams_print_fp+39p
		extrn _ERR_put_error:near ; CODE XREF: _DSA_print_fp+22p
					; _DSAparams_print_fp+22p
		extrn _EVP_PKEY_set1_DSA:near ;	CODE XREF: _DSA_print+11p
					; _DSA_print_fp+51p ...
		extrn _EVP_PKEY_new:near ; CODE	XREF: _DSA_print+1p
					; _DSA_print_fp+41p ...
		extrn _EVP_PKEY_free:near ; CODE XREF: _DSA_print+31p
					; _DSA_print_fp+6Dp ...
		extrn _EVP_PKEY_print_private:near ; CODE XREF:	_DSA_print+29p
					; _DSA_print_fp+65p
		extrn _EVP_PKEY_print_params:near ; CODE XREF: _DSAparams_print+27p
					; _DSAparams_print_fp+63p


		end
