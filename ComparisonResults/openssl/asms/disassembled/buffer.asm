;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B30B25110D6C069438711522B64982FA
; Input	CRC32 :	3B273E4F

; File Name   :	C:\compspace\Diff\openssl\obj\buffer.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BUF_MEM_free
_BUF_MEM_free	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_2D
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_24
		push	dword ptr [esi+8]
		push	eax
		call	_OPENSSL_cleanse
		push	dword ptr [esi+4]
		call	_CRYPTO_free
		add	esp, 0Ch

loc_24:					; CODE XREF: _BUF_MEM_free+Ej
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_2D:					; CODE XREF: _BUF_MEM_free+7j
		pop	esi
		retn
_BUF_MEM_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BUF_MEM_grow
_BUF_MEM_grow	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, [edi]
		cmp	ecx, esi
		jnb	short loc_5A
		cmp	[edi+8], esi
		jb	short loc_61
		mov	eax, esi
		sub	eax, ecx
		push	eax		; Size
		mov	eax, [edi+4]
		add	eax, ecx
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch

loc_5A:					; CODE XREF: _BUF_MEM_grow+Ej
		mov	[edi], esi
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_61:					; CODE XREF: _BUF_MEM_grow+13j
		cmp	esi, 5FFFFFFCh
		jbe	short loc_83
		push	71h ; 'q'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	41h ; 'A'
		push	64h ; 'd'
		push	7
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_83:					; CODE XREF: _BUF_MEM_grow+37j
		lea	ecx, [esi+3]
		mov	eax, 0AAAAAAABh
		mul	ecx
		mov	eax, [edi+4]
		push	ebx
		mov	ebx, edx
		shr	ebx, 1
		shl	ebx, 2
		test	eax, eax
		jnz	short loc_AE
		push	76h ; 'v'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	ebx
		call	_CRYPTO_malloc
		add	esp, 0Ch
		jmp	short loc_BF
; ---------------------------------------------------------------------------

loc_AE:					; CODE XREF: _BUF_MEM_grow+6Aj
		push	78h ; 'x'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	ebx
		push	eax
		call	_CRYPTO_realloc
		add	esp, 10h

loc_BF:					; CODE XREF: _BUF_MEM_grow+7Cj
		mov	edx, eax
		test	edx, edx
		jnz	short loc_E2
		push	7Ah ; 'z'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	41h ; 'A'
		push	64h ; 'd'
		push	7
		call	_ERR_put_error
		add	esp, 14h
		xor	esi, esi
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E2:					; CODE XREF: _BUF_MEM_grow+93j
		mov	ecx, [edi]
		mov	eax, esi
		sub	eax, ecx
		mov	[edi+4], edx
		push	eax		; Size
		push	0		; Val
		lea	eax, [ecx+edx]
		mov	[edi+8], ebx
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	[edi], esi
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		retn
_BUF_MEM_grow	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 108h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BUF_MEM_grow_clean
_BUF_MEM_grow_clean proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, [edi]
		cmp	ecx, esi
		jb	short loc_132
		sub	ecx, esi
		push	ecx		; Size
		mov	ecx, [edi+4]
		add	ecx, esi
		push	0		; Val
		push	ecx		; Dst
		call	_memset
		add	esp, 0Ch
		mov	[edi], esi
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_132:				; CODE XREF: _BUF_MEM_grow_clean+Ej
		cmp	[edi+8], esi
		jb	short loc_153
		mov	eax, esi
		sub	eax, ecx
		push	eax		; Size
		mov	eax, [edi+4]
		add	eax, ecx
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	[edi], esi
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_153:				; CODE XREF: _BUF_MEM_grow_clean+2Dj
		cmp	esi, 5FFFFFFCh
		jbe	short loc_178
		push	96h ; 'ñ'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	7
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_178:				; CODE XREF: _BUF_MEM_grow_clean+51j
		lea	ecx, [esi+3]
		mov	eax, 0AAAAAAABh
		mul	ecx
		mov	eax, [edi+4]
		push	ebx
		mov	ebx, edx
		shr	ebx, 1
		shl	ebx, 2
		test	eax, eax
		jnz	short loc_1A6
		push	9Bh ; 'õ'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	ebx
		call	_CRYPTO_malloc
		add	esp, 0Ch
		jmp	short loc_1BD
; ---------------------------------------------------------------------------

loc_1A6:				; CODE XREF: _BUF_MEM_grow_clean+87j
		push	9Dh ; 'ù'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	ebx
		push	dword ptr [edi+8]
		push	eax
		call	_CRYPTO_realloc_clean
		add	esp, 14h

loc_1BD:				; CODE XREF: _BUF_MEM_grow_clean+9Cj
		mov	edx, eax
		test	edx, edx
		jnz	short loc_1E3
		push	9Fh ; 'ü'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	7
		call	_ERR_put_error
		add	esp, 14h
		xor	esi, esi
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1E3:				; CODE XREF: _BUF_MEM_grow_clean+B9j
		mov	ecx, [edi]
		mov	eax, esi
		sub	eax, ecx
		mov	[edi+4], edx
		push	eax		; Size
		push	0		; Val
		lea	eax, [ecx+edx]
		mov	[edi+8], ebx
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	[edi], esi
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		retn
_BUF_MEM_grow_clean endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 208h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BUF_MEM_new
_BUF_MEM_new	proc near
		push	4Ah ; 'J'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	0Ch
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_235
		push	4Ch ; 'L'
		push	offset ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ ; ".\\crypto\\buffer\\buffer.c"
		push	41h ; 'A'
		push	65h ; 'e'
		push	7
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_235:				; CODE XREF: _BUF_MEM_new+13j
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		retn
_BUF_MEM_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BUF_reverse
_BUF_reverse	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	esi
		test	ecx, ecx
		jz	short loc_276
		mov	esi, [esp+4+arg_8]
		lea	edx, [esi-1]
		add	edx, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_2A3

loc_264:				; CODE XREF: _BUF_reverse+26j
		mov	al, [ecx]
		lea	edx, [edx-1]
		mov	[edx+1], al
		lea	ecx, [ecx+1]
		sub	esi, 1
		jnz	short loc_264
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_276:				; CODE XREF: _BUF_reverse+7j
		mov	edx, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_8]
		lea	esi, [edi-1]
		add	esi, edx
		shr	edi, 1
		jz	short loc_2A2
		nop	dword ptr [eax+00h]

loc_28C:				; CODE XREF: _BUF_reverse+54j
		mov	al, [edx]
		lea	esi, [esi-1]
		mov	cl, [esi+1]
		lea	edx, [edx+1]
		mov	[esi+1], al
		mov	[edx-1], cl
		sub	edi, 1
		jnz	short loc_28C

loc_2A2:				; CODE XREF: _BUF_reverse+3Aj
		pop	edi

loc_2A3:				; CODE XREF: _BUF_reverse+16j
		pop	esi
		retn
_BUF_reverse	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A8h
; COMDAT (pick any)
		public ??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@
; `string'
??_C@_0BJ@BNFJHNHM@?4?2crypto?2buffer?2buffer?4c?$AA@ db '.\crypto\buffer\buffer.c',0
					; DATA XREF: _BUF_MEM_grow+3Bo
					; _BUF_MEM_grow+6Eo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _BUF_MEM_grow+74p
					; _BUF_MEM_grow_clean+94p ...
		extrn _CRYPTO_free:near	; CODE XREF: _BUF_MEM_free+1Cp
					; _BUF_MEM_free+25p
		extrn _CRYPTO_realloc:near ; CODE XREF:	_BUF_MEM_grow+87p
		extrn _CRYPTO_realloc_clean:near ; CODE	XREF: _BUF_MEM_grow_clean+ADp
		extrn _OPENSSL_cleanse:near ; CODE XREF: _BUF_MEM_free+14p
		extrn _ERR_put_error:near ; CODE XREF: _BUF_MEM_grow+46p
					; _BUF_MEM_grow+A2p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _BUF_MEM_grow+22p
					; _BUF_MEM_grow+C5p ...


		end
