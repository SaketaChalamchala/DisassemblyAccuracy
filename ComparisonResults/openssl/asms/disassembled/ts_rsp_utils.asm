;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	09961CD7F7AF923337637F79ACA0DFBB
; Input	CRC32 :	3D079D1A

; File Name   :	C:\compspace\Diff\openssl\obj\ts_rsp_utils.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_ACCURACY_get_micros
_TS_ACCURACY_get_micros	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
_TS_ACCURACY_get_micros	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_ACCURACY_get_millis
_TS_ACCURACY_get_millis	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		retn
_TS_ACCURACY_get_millis	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_ACCURACY_get_seconds
_TS_ACCURACY_get_seconds proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
_TS_ACCURACY_get_seconds endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_ACCURACY_set_micros
_TS_ACCURACY_set_micros	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	esi, esi
		cmp	[edi+8], eax
		jz	short loc_67
		test	eax, eax
		jz	short loc_59
		push	eax
		call	_ASN1_INTEGER_dup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_59
		push	116h
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	73h ; 's'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_59:					; CODE XREF: _TS_ACCURACY_set_micros+13j
					; _TS_ACCURACY_set_micros+22j
		push	dword ptr [edi+8]
		call	_ASN1_INTEGER_free
		add	esp, 4
		mov	[edi+8], esi

loc_67:					; CODE XREF: _TS_ACCURACY_set_micros+Fj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_TS_ACCURACY_set_micros	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 70h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_ACCURACY_set_millis
_TS_ACCURACY_set_millis	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	esi, esi
		cmp	[edi+4], eax
		jz	short loc_BF
		test	eax, eax
		jz	short loc_B1
		push	eax
		call	_ASN1_INTEGER_dup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_B1
		push	0FFh
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	74h ; 't'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B1:					; CODE XREF: _TS_ACCURACY_set_millis+13j
					; _TS_ACCURACY_set_millis+22j
		push	dword ptr [edi+4]
		call	_ASN1_INTEGER_free
		add	esp, 4
		mov	[edi+4], esi

loc_BF:					; CODE XREF: _TS_ACCURACY_set_millis+Fj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_TS_ACCURACY_set_millis	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_ACCURACY_set_seconds
_TS_ACCURACY_set_seconds proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi], eax
		jnz	short loc_DC
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DC:					; CODE XREF: _TS_ACCURACY_set_seconds+Bj
		push	edi
		push	eax
		call	_ASN1_INTEGER_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_109
		push	0E9h ; 'é'
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	75h ; 'u'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_109:				; CODE XREF: _TS_ACCURACY_set_seconds+22j
		push	dword ptr [esi]
		call	_ASN1_INTEGER_free
		add	esp, 4
		mov	[esi], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_ACCURACY_set_seconds endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_get_status_info
_TS_RESP_get_status_info proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
_TS_RESP_get_status_info endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 128h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_get_token
_TS_RESP_get_token proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		retn
_TS_RESP_get_token endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 130h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_get_tst_info
_TS_RESP_get_tst_info proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
_TS_RESP_get_tst_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_set_status_info
_TS_RESP_set_status_info proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi], eax
		jnz	short loc_14C
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_14C:				; CODE XREF: _TS_RESP_set_status_info+Bj
		push	edi
		push	eax
		call	_TS_STATUS_INFO_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_179
		push	4Ch ; 'L'
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	87h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_179:				; CODE XREF: _TS_RESP_set_status_info+22j
		push	dword ptr [esi]
		call	_TS_STATUS_INFO_free
		add	esp, 4
		mov	[esi], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_RESP_set_status_info endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 190h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_set_tst_info
_TS_RESP_set_tst_info proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+4]
		call	_PKCS7_free
		mov	eax, [esp+8+arg_4]
		push	dword ptr [esi+8]
		mov	[esi+4], eax
		call	_TS_TST_INFO_free
		mov	eax, [esp+0Ch+arg_8]
		add	esp, 8
		mov	[esi+8], eax
		pop	esi
		retn
_TS_RESP_set_tst_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_add_ext
_TS_TST_INFO_add_ext proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		add	eax, 24h ; '$'
		push	eax
		call	_X509v3_add_ext
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_TS_TST_INFO_add_ext endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_delete_ext
_TS_TST_INFO_delete_ext	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+24h]
		call	_X509v3_delete_ext
		add	esp, 8
		retn
_TS_TST_INFO_delete_ext	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_ext_free
_TS_TST_INFO_ext_free proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_20C
		push	offset _X509_EXTENSION_free
		push	dword ptr [esi+24h]
		call	_sk_pop_free
		add	esp, 8
		mov	dword ptr [esi+24h], 0

loc_20C:				; CODE XREF: _TS_TST_INFO_ext_free+7j
		pop	esi
		retn
_TS_TST_INFO_ext_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_accuracy
_TS_TST_INFO_get_accuracy proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		retn
_TS_TST_INFO_get_accuracy endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 218h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ext
_TS_TST_INFO_get_ext proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+24h]
		call	_X509v3_get_ext
		add	esp, 8
		retn
_TS_TST_INFO_get_ext endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ext_by_NID
_TS_TST_INFO_get_ext_by_NID proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+24h]
		call	_X509v3_get_ext_by_NID
		add	esp, 0Ch
		retn
_TS_TST_INFO_get_ext_by_NID endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 244h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ext_by_OBJ
_TS_TST_INFO_get_ext_by_OBJ proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+24h]
		call	_X509v3_get_ext_by_OBJ
		add	esp, 0Ch
		retn
_TS_TST_INFO_get_ext_by_OBJ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 25Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ext_by_critical
_TS_TST_INFO_get_ext_by_critical proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+24h]
		call	_X509v3_get_ext_by_critical
		add	esp, 0Ch
		retn
_TS_TST_INFO_get_ext_by_critical endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 274h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ext_count
_TS_TST_INFO_get_ext_count proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+24h]
		call	_X509v3_get_ext_count
		add	esp, 4
		retn
_TS_TST_INFO_get_ext_count endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 284h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ext_d2i
_TS_TST_INFO_get_ext_d2i proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	dword ptr [eax+24h]
		call	_X509V3_get_d2i
		add	esp, 10h
		retn
_TS_TST_INFO_get_ext_d2i endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_exts
_TS_TST_INFO_get_exts proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		retn
_TS_TST_INFO_get_exts endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_msg_imprint
_TS_TST_INFO_get_msg_imprint proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
_TS_TST_INFO_get_msg_imprint endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_nonce
_TS_TST_INFO_get_nonce proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+1Ch]
		retn
_TS_TST_INFO_get_nonce endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_ordering
_TS_TST_INFO_get_ordering proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	[ecx+18h], eax
		setnz	al
		retn
_TS_TST_INFO_get_ordering endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_policy_id
_TS_TST_INFO_get_policy_id proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		retn
_TS_TST_INFO_get_policy_id endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_serial
_TS_TST_INFO_get_serial	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		retn
_TS_TST_INFO_get_serial	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_time
_TS_TST_INFO_get_time proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+10h]
		retn
_TS_TST_INFO_get_time endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_tsa
_TS_TST_INFO_get_tsa proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+20h]
		retn
_TS_TST_INFO_get_tsa endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_get_version
_TS_TST_INFO_get_version proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax]
		call	_ASN1_INTEGER_get
		add	esp, 4
		retn
_TS_TST_INFO_get_version endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_accuracy
_TS_TST_INFO_set_accuracy proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+14h], eax
		jnz	short loc_30D
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_30D:				; CODE XREF: _TS_TST_INFO_set_accuracy+Cj
		push	edi
		push	eax
		call	_TS_ACCURACY_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_33D
		push	0D4h ; 'Ô'
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	89h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_33D:				; CODE XREF: _TS_TST_INFO_set_accuracy+23j
		push	dword ptr [esi+14h]
		call	_TS_ACCURACY_free
		add	esp, 4
		mov	[esi+14h], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_accuracy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 354h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_msg_imprint
_TS_TST_INFO_set_msg_imprint proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+8], eax
		jnz	short loc_369
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_369:				; CODE XREF: _TS_TST_INFO_set_msg_imprint+Cj
		push	edi
		push	eax
		call	_TS_MSG_IMPRINT_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_399
		push	95h ; ''
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	8Ah ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_399:				; CODE XREF: _TS_TST_INFO_set_msg_imprint+23j
		push	dword ptr [esi+8]
		call	_TS_MSG_IMPRINT_free
		add	esp, 4
		mov	[esi+8], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_msg_imprint endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_nonce
_TS_TST_INFO_set_nonce proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+1Ch], eax
		jnz	short loc_3C5
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3C5:				; CODE XREF: _TS_TST_INFO_set_nonce+Cj
		push	edi
		push	eax
		call	_ASN1_INTEGER_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_3F5
		push	137h
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	8Bh ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3F5:				; CODE XREF: _TS_TST_INFO_set_nonce+23j
		push	dword ptr [esi+1Ch]
		call	_ASN1_INTEGER_free
		add	esp, 4
		mov	[esi+1Ch], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_nonce endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_ordering
_TS_TST_INFO_set_ordering proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFh
		mov	[eax+18h], ecx
		mov	eax, 1
		retn
_TS_TST_INFO_set_ordering endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 428h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_policy_id
_TS_TST_INFO_set_policy_id proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+4], eax
		jnz	short loc_43D
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_43D:				; CODE XREF: _TS_TST_INFO_set_policy_id+Cj
		push	edi
		push	eax
		call	_OBJ_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_46D
		push	80h ; ''
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	8Ch ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_46D:				; CODE XREF: _TS_TST_INFO_set_policy_id+23j
		push	dword ptr [esi+4]
		call	_ASN1_OBJECT_free
		add	esp, 4
		mov	[esi+4], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_policy_id endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 484h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_serial
_TS_TST_INFO_set_serial	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+0Ch], eax
		jnz	short loc_499
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_499:				; CODE XREF: _TS_TST_INFO_set_serial+Cj
		push	edi
		push	eax
		call	_ASN1_INTEGER_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_4C9
		push	0AAh ; 'ª'
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	8Dh ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4C9:				; CODE XREF: _TS_TST_INFO_set_serial+23j
		push	dword ptr [esi+0Ch]
		call	_ASN1_INTEGER_free
		add	esp, 4
		mov	[esi+0Ch], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_serial	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_time
_TS_TST_INFO_set_time proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+10h], eax
		jnz	short loc_4F5
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4F5:				; CODE XREF: _TS_TST_INFO_set_time+Cj
		push	edi
		push	eax
		call	_ASN1_STRING_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_525
		push	0BFh ; '¿'
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	8Eh ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_525:				; CODE XREF: _TS_TST_INFO_set_time+23j
		push	dword ptr [esi+10h]
		call	_ASN1_GENERALIZEDTIME_free
		add	esp, 4
		mov	[esi+10h], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_time endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 53Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_tsa
_TS_TST_INFO_set_tsa proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	[esi+20h], eax
		jnz	short loc_551
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_551:				; CODE XREF: _TS_TST_INFO_set_tsa+Cj
		push	edi
		push	eax
		call	_GENERAL_NAME_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_581
		push	14Ch
		push	offset ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_utils.c"
		push	41h ; 'A'
		push	8Fh ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_581:				; CODE XREF: _TS_TST_INFO_set_tsa+23j
		push	dword ptr [esi+20h]
		call	_GENERAL_NAME_free
		add	esp, 4
		mov	[esi+20h], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_set_tsa endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 598h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_TST_INFO_set_version
_TS_TST_INFO_set_version proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 8
		retn
_TS_TST_INFO_set_version endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ACh
; COMDAT (pick any)
		public ??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@
; `string'
??_C@_0BL@HNOAOAF@?4?2crypto?2ts?2ts_rsp_utils?4c?$AA@ db '.\crypto\ts\ts_rsp_utils.c',0
					; DATA XREF: _TS_ACCURACY_set_micros+29o
					; _TS_ACCURACY_set_millis+29o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_pop_free:near	; CODE XREF: _TS_TST_INFO_ext_free+11p
		extrn _ERR_put_error:near ; CODE XREF: _TS_ACCURACY_set_micros+34p
					; _TS_ACCURACY_set_millis+34p ...
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _TS_TST_INFO_set_policy_id+48p
		extrn _ASN1_STRING_dup:near ; CODE XREF: _TS_TST_INFO_set_time+17p
		extrn _ASN1_INTEGER_free:near ;	CODE XREF: _TS_ACCURACY_set_micros+44p
					; _TS_ACCURACY_set_millis+44p ...
		extrn _ASN1_INTEGER_dup:near ; CODE XREF: _TS_ACCURACY_set_micros+16p
					; _TS_ACCURACY_set_millis+16p ...
		extrn _ASN1_GENERALIZEDTIME_free:near ;	CODE XREF: _TS_TST_INFO_set_time+48p
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _TS_TST_INFO_set_version+Ap
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _TS_TST_INFO_get_version+6p
		extrn _OBJ_dup:near	; CODE XREF: _TS_TST_INFO_set_policy_id+17p
		extrn _PKCS7_free:near	; CODE XREF: _TS_RESP_set_tst_info+8p
		extrn _X509_EXTENSION_free:near	; DATA XREF: _TS_TST_INFO_ext_free+9o
		extrn _X509v3_get_ext_count:near ; CODE	XREF: _TS_TST_INFO_get_ext_count+7p
		extrn _X509v3_get_ext_by_NID:near
					; CODE XREF: _TS_TST_INFO_get_ext_by_NID+Fp
		extrn _X509v3_get_ext_by_OBJ:near
					; CODE XREF: _TS_TST_INFO_get_ext_by_OBJ+Fp
		extrn _X509v3_get_ext_by_critical:near
					; CODE XREF: _TS_TST_INFO_get_ext_by_critical+Fp
		extrn _X509v3_get_ext:near ; CODE XREF:	_TS_TST_INFO_get_ext+Bp
		extrn _X509v3_delete_ext:near ;	CODE XREF: _TS_TST_INFO_delete_ext+Bp
		extrn _X509v3_add_ext:near ; CODE XREF:	_TS_TST_INFO_add_ext+10p
		extrn _GENERAL_NAME_free:near ;	CODE XREF: _TS_TST_INFO_set_tsa+48p
		extrn _GENERAL_NAME_dup:near ; CODE XREF: _TS_TST_INFO_set_tsa+17p
		extrn _X509V3_get_d2i:near ; CODE XREF:	_TS_TST_INFO_get_ext_d2i+13p
		extrn _TS_MSG_IMPRINT_free:near
					; CODE XREF: _TS_TST_INFO_set_msg_imprint+48p
		extrn _TS_MSG_IMPRINT_dup:near ; CODE XREF: _TS_TST_INFO_set_msg_imprint+17p
		extrn _TS_STATUS_INFO_free:near	; CODE XREF: _TS_RESP_set_status_info+43p
		extrn _TS_STATUS_INFO_dup:near ; CODE XREF: _TS_RESP_set_status_info+16p
		extrn _TS_TST_INFO_free:near ; CODE XREF: _TS_RESP_set_tst_info+17p
		extrn _TS_ACCURACY_free:near ; CODE XREF: _TS_TST_INFO_set_accuracy+48p
		extrn _TS_ACCURACY_dup:near ; CODE XREF: _TS_TST_INFO_set_accuracy+17p


		end
