;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E78D0FDEA26EBA8D7B2906709389F54D
; Input	CRC32 :	CC48219C

; File Name   :	C:\compspace\Diff\openssl\obj\bn_shift.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; size_t BN_lshift
		public _BN_lshift
_BN_lshift	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		mov	ebx, [esp+0Ch+Dst]
		test	ebx, ebx
		jns	short loc_35
		push	8Dh ; 'ç'
		push	offset ??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@ ; ".\\crypto\\bn\\bn_shift.c"
		push	77h ; 'w'
		push	91h ; 'ë'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_35:					; CODE XREF: _BN_lshift+11j
		push	esi
		mov	esi, [esp+10h+arg_4]
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	eax, [esi+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, ebx
		cdq
		and	edx, 1Fh
		add	edx, eax
		mov	eax, [esi+4]
		sar	edx, 5
		inc	eax
		add	eax, edx
		mov	[esp+14h+var_8], edx
		cmp	eax, [edi+8]
		jg	short loc_63
		mov	eax, edi
		jmp	short loc_71
; ---------------------------------------------------------------------------

loc_63:					; CODE XREF: _BN_lshift+5Dj
		push	eax
		push	edi
		call	_bn_expand2
		mov	edx, [esp+1Ch+var_8]
		add	esp, 8

loc_71:					; CODE XREF: _BN_lshift+61j
		test	eax, eax
		jnz	short loc_7C
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_7C:					; CODE XREF: _BN_lshift+73j
		push	ebp
		and	ebx, 8000001Fh
		jns	short loc_8A
		dec	ebx
		or	ebx, 0FFFFFFE0h
		inc	ebx

loc_8A:					; CODE XREF: _BN_lshift+83j
		mov	eax, [edi]
		mov	ecx, 20h ; ' '
		mov	ebp, [esi]
		sub	ecx, ebx
		mov	[esp+18h+Dst], eax
		mov	eax, [esi+4]
		mov	edi, [esp+18h+Dst]
		add	eax, edx
		mov	[esp+18h+var_4], ecx
		mov	dword ptr [edi+eax*4], 0
		mov	edi, [esp+18h+arg_0]
		test	ebx, ebx
		jnz	short loc_E5
		mov	ecx, [esi+4]
		sub	ecx, 1
		js	short loc_129
		lea	eax, [ecx+edx]
		mov	edx, [esp+18h+Dst]
		lea	edx, [edx+eax*4]
		nop	word ptr [eax+eax+00000000h]

loc_D0:					; CODE XREF: _BN_lshift+DDj
		mov	eax, [ebp+ecx*4+0]
		lea	edx, [edx-4]
		sub	ecx, 1
		mov	[edx+4], eax
		jns	short loc_D0
		mov	edx, [esp+18h+var_8]
		jmp	short loc_129
; ---------------------------------------------------------------------------

loc_E5:					; CODE XREF: _BN_lshift+B3j
		mov	esi, [esi+4]
		sub	esi, 1
		js	short loc_125
		lea	edi, [edx+1]
		mov	edx, [esp+18h+Dst]
		add	edi, esi
		lea	edi, [edx+edi*4]
		nop	dword ptr [eax+00000000h]

loc_100:				; CODE XREF: _BN_lshift+11Bj
		mov	edx, [ebp+esi*4+0]
		lea	edi, [edi-4]
		mov	eax, edx
		shr	eax, cl
		mov	ecx, ebx
		or	[edi+4], eax
		shl	edx, cl
		sub	esi, 1
		mov	ecx, [esp+18h+var_4]
		mov	[edi], edx
		jns	short loc_100
		mov	edi, [esp+18h+arg_0]
		mov	edx, [esp+18h+var_8]

loc_125:				; CODE XREF: _BN_lshift+EBj
		mov	esi, [esp+18h+arg_4]

loc_129:				; CODE XREF: _BN_lshift+BBj
					; _BN_lshift+E3j
		lea	eax, ds:0[edx*4]
		push	eax		; Size
		push	0		; Val
		push	[esp+20h+Dst]	; Dst
		call	_memset
		mov	ecx, [esp+24h+var_8]
		add	esp, 0Ch
		inc	ecx
		add	ecx, [esi+4]
		mov	[edi+4], ecx
		pop	ebp
		test	ecx, ecx
		jle	short loc_168
		mov	eax, [edi]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]

loc_157:				; CODE XREF: _BN_lshift+163j
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_165
		dec	ecx
		test	ecx, ecx
		jg	short loc_157

loc_165:				; CODE XREF: _BN_lshift+15Ej
		mov	[edi+4], ecx

loc_168:				; CODE XREF: _BN_lshift+14Dj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
_BN_lshift	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 174h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_lshift1
_BN_lshift1	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	esi, edi
		jz	short loc_1B0
		mov	eax, [edi+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [edi+4]
		inc	eax
		cmp	eax, [esi+8]
		jg	short loc_195
		mov	eax, esi
		jmp	short loc_19F
; ---------------------------------------------------------------------------

loc_195:				; CODE XREF: _BN_lshift1+1Bj
		push	eax
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_19F:				; CODE XREF: _BN_lshift1+1Fj
		test	eax, eax
		jnz	short loc_1A8

loc_1A3:				; CODE XREF: _BN_lshift1+55j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A8:				; CODE XREF: _BN_lshift1+2Dj
		mov	eax, [edi+4]
		mov	[esi+4], eax
		jmp	short loc_1CB
; ---------------------------------------------------------------------------

loc_1B0:				; CODE XREF: _BN_lshift1+Cj
		mov	eax, [edi+4]
		inc	eax
		cmp	eax, [esi+8]
		jg	short loc_1BD
		mov	eax, esi
		jmp	short loc_1C7
; ---------------------------------------------------------------------------

loc_1BD:				; CODE XREF: _BN_lshift1+43j
		push	eax
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_1C7:				; CODE XREF: _BN_lshift1+47j
		test	eax, eax
		jz	short loc_1A3

loc_1CB:				; CODE XREF: _BN_lshift1+3Aj
		push	ebx
		mov	ebx, [esi]
		xor	edx, edx
		push	ebp
		mov	ebp, [edi]
		cmp	[edi+4], edx
		jle	short loc_207
		xor	esi, esi

loc_1DA:				; CODE XREF: _BN_lshift1+80j
		mov	ecx, [ebp+0]
		lea	ebp, [ebp+4]
		inc	esi
		lea	ebx, [ebx+4]
		lea	eax, [ecx+ecx]
		or	eax, edx
		mov	edx, ecx
		mov	[ebx-4], eax
		shr	edx, 1Fh
		cmp	esi, [edi+4]
		jl	short loc_1DA
		mov	esi, [esp+10h+arg_0]
		test	edx, edx
		jz	short loc_207
		mov	dword ptr [ebx], 1
		inc	dword ptr [esi+4]

loc_207:				; CODE XREF: _BN_lshift1+62j
					; _BN_lshift1+88j
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_BN_lshift1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 214h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_rshift
_BN_rshift	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	edi
		mov	edi, [esp+10h+arg_8]
		test	edi, edi
		jns	short loc_249
		push	0B7h ; '∑'
		push	offset ??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@ ; ".\\crypto\\bn\\bn_shift.c"
		push	77h ; 'w'
		push	92h ; 'í'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_249:				; CODE XREF: _BN_rshift+11j
		mov	eax, edi
		cdq
		and	edx, 1Fh
		push	ebp
		push	esi
		mov	esi, edi
		lea	ecx, [edx+eax]
		sar	ecx, 5
		mov	[esp+18h+var_C], ecx
		and	esi, 8000001Fh
		jns	short loc_26A
		dec	esi
		or	esi, 0FFFFFFE0h
		inc	esi

loc_26A:				; CODE XREF: _BN_rshift+4Fj
		mov	ebp, [esp+18h+arg_4]
		mov	eax, 20h ; ' '
		sub	eax, esi
		mov	[esp+18h+arg_8], esi
		mov	[esp+18h+var_4], eax
		mov	eax, [ebp+4]
		cmp	ecx, eax
		jge	loc_366
		test	eax, eax
		jz	loc_366
		push	ebx
		push	ebp
		call	_BN_num_bits
		mov	ebx, [esp+20h+arg_0]
		mov	ecx, 1Fh
		sub	ecx, edi
		add	esp, 4
		add	eax, ecx
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		mov	[esp+1Ch+var_8], eax
		cmp	ebx, ebp
		jz	short loc_2DD
		mov	ecx, [ebp+0Ch]
		mov	[ebx+0Ch], ecx
		cmp	eax, [ebx+8]
		jg	short loc_2C7
		mov	eax, ebx
		jmp	short loc_2D1
; ---------------------------------------------------------------------------

loc_2C7:				; CODE XREF: _BN_rshift+ADj
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_2D1:				; CODE XREF: _BN_rshift+B1j
		test	eax, eax
		jnz	short loc_2E1
		pop	ebx
		pop	esi
		pop	ebp
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_2DD:				; CODE XREF: _BN_rshift+A2j
		test	edi, edi
		jz	short loc_359

loc_2E1:				; CODE XREF: _BN_rshift+BFj
		mov	ecx, [esp+1Ch+var_C]
		mov	eax, [ebp+0]
		mov	edx, [ebp+4]
		mov	edi, [ebx]
		sub	edx, ecx
		lea	eax, [eax+ecx*4]
		mov	ecx, [esp+1Ch+var_8]
		mov	[ebx+4], ecx
		test	esi, esi
		jnz	short loc_31F
		test	edx, edx
		jz	short loc_359
		nop	dword ptr [eax]

loc_304:				; CODE XREF: _BN_rshift+FEj
		mov	ecx, [eax]
		lea	edi, [edi+4]
		mov	[edi-4], ecx
		lea	eax, [eax+4]
		sub	edx, 1
		jnz	short loc_304
		pop	ebx
		pop	esi
		pop	ebp
		lea	eax, [edx+1]
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_31F:				; CODE XREF: _BN_rshift+E7j
		mov	ebx, [eax]
		lea	ebp, [edx-1]
		add	eax, 4
		test	ebp, ebp
		jz	short loc_34F

loc_32B:				; CODE XREF: _BN_rshift+139j
		mov	ecx, esi
		lea	eax, [eax+4]
		shr	ebx, cl
		mov	ecx, [esp+1Ch+var_4]
		mov	esi, ebx
		mov	ebx, [eax-4]
		mov	edx, ebx
		shl	edx, cl
		or	edx, esi
		mov	esi, [esp+1Ch+arg_8]
		mov	[edi], edx
		add	edi, 4
		sub	ebp, 1
		jnz	short loc_32B

loc_34F:				; CODE XREF: _BN_rshift+115j
		mov	ecx, esi
		shr	ebx, cl
		test	ebx, ebx
		jz	short loc_359
		mov	[edi], ebx

loc_359:				; CODE XREF: _BN_rshift+CBj
					; _BN_rshift+EBj ...
		pop	ebx
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_366:				; CODE XREF: _BN_rshift+6Ej
					; _BN_rshift+76j
		push	0
		push	[esp+1Ch+arg_0]
		call	_BN_set_word
		add	esp, 8
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	edi
		add	esp, 0Ch
		retn
_BN_rshift	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 380h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_rshift1
_BN_rshift1	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	esi, [edi+4]
		test	esi, esi
		jnz	short loc_3A0
		push	esi
		push	[esp+0Ch+arg_0]
		call	_BN_set_word
		add	esp, 8
		lea	eax, [esi+1]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3A0:				; CODE XREF: _BN_rshift1+Bj
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		xor	eax, eax
		push	ebp
		mov	ebp, [edi]
		mov	ecx, esi
		cmp	dword ptr [ebp+esi*4-4], 1
		setz	al
		sub	ecx, eax
		mov	[esp+10h+arg_4], ecx
		cmp	edi, ebx
		jz	short loc_3E0
		cmp	ecx, [ebx+8]
		jg	short loc_3C7
		mov	eax, ebx
		jmp	short loc_3D1
; ---------------------------------------------------------------------------

loc_3C7:				; CODE XREF: _BN_rshift1+41j
		push	ecx
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_3D1:				; CODE XREF: _BN_rshift1+45j
		test	eax, eax
		jnz	short loc_3DA
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3DA:				; CODE XREF: _BN_rshift1+53j
		mov	eax, [edi+0Ch]
		mov	[ebx+0Ch], eax

loc_3E0:				; CODE XREF: _BN_rshift1+3Cj
		mov	eax, [ebp+esi*4-4]
		dec	esi
		mov	ecx, [ebx]
		mov	edi, eax
		shl	edi, 1Fh
		shr	eax, 1
		jz	short loc_3F3
		mov	[ecx+esi*4], eax

loc_3F3:				; CODE XREF: _BN_rshift1+6Ej
		test	esi, esi
		jle	short loc_419
		lea	edx, [ecx+esi*4]
		sub	ebp, ecx
		nop	dword ptr [eax+00h]

loc_400:				; CODE XREF: _BN_rshift1+97j
		mov	ecx, [edx+ebp-4]
		lea	edx, [edx-4]
		mov	eax, ecx
		dec	esi
		shr	eax, 1
		or	eax, edi
		mov	edi, ecx
		shl	edi, 1Fh
		mov	[edx], eax
		test	esi, esi
		jg	short loc_400

loc_419:				; CODE XREF: _BN_rshift1+75j
		mov	eax, [esp+10h+arg_4]
		pop	ebp
		mov	[ebx+4], eax
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		retn
_BN_rshift1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 42Ch
; COMDAT (pick any)
		public ??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@
; `string'
??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@ db '.\crypto\bn\bn_shift.c',0
					; DATA XREF: _BN_lshift+18o
					; _BN_rshift+18o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _BN_lshift+26p
					; _BN_rshift+26p
		extrn _BN_num_bits:near	; CODE XREF: _BN_rshift+7Ep
		extrn _BN_set_word:near	; CODE XREF: _BN_rshift+158p
					; _BN_rshift1+12p
		extrn _bn_expand2:near	; CODE XREF: _BN_lshift+65p
					; _BN_lshift1+23p ...
		extrn __chkstk:near	; CODE XREF: _BN_lshift+5p
					; _BN_rshift+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _BN_lshift+137p


		end
