;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	97DAFE6ADC40487B424345B53AA70423
; Input	CRC32 :	D4AEAA43

; File Name   :	C:\compspace\Diff\openssl\obj\eng_rdrand.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl get_random_bytes(void *Dst, int Src)
_get_random_bytes proc near		; DATA XREF: .data:00000060o
					; .data:0000006Co

Dst		= dword	ptr  4
Src		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Src]
		push	edi
		mov	edi, [esp+8+Dst]
		cmp	esi, 4
		jl	short loc_26
		nop

loc_10:					; CODE XREF: _get_random_bytes+24j
		call	_OPENSSL_ia32_rdrand
		test	eax, eax
		jz	short loc_4E
		mov	[edi], eax
		sub	esi, 4
		add	edi, 4
		cmp	esi, 4
		jge	short loc_10

loc_26:					; CODE XREF: _get_random_bytes+Dj
		test	esi, esi
		jz	short loc_46
		call	_OPENSSL_ia32_rdrand
		mov	[esp+8+Src], eax
		test	eax, eax
		jz	short loc_4E
		push	esi		; Size
		lea	eax, [esp+0Ch+Src]
		push	eax		; Src
		push	edi		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_46:					; CODE XREF: _get_random_bytes+28j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4E:					; CODE XREF: _get_random_bytes+17j
					; _get_random_bytes+35j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_get_random_bytes endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_random_status	proc near		; DATA XREF: .data:00000070o
		mov	eax, 1
		retn
_random_status	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 5Ch
_rdrand_meth	dd 0			; DATA XREF: _bind_helper+4Co
		dd offset _get_random_bytes
		dd 2 dup(0)
		dd offset _get_random_bytes
		dd offset _random_status
_engine_e_rdrand_id dd offset ??_C@_06MJFBMHIP@rdrand?$AA@ ; DATA XREF:	_bind_helper+1r
					; "rdrand"
_engine_e_rdrand_name dd offset	??_C@_0BE@MLJBKLKM@Intel?5RDRAND?5engine?$AA@
					; DATA XREF: _bind_helper+18r
_data		ends			; "Intel RDRAND	engine"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
; COMDAT (pick any)
		public ??_C@_06MJFBMHIP@rdrand?$AA@
; `string'
??_C@_06MJFBMHIP@rdrand?$AA@ db	'rdrand',0 ; DATA XREF: .data:_engine_e_rdrand_ido
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
; COMDAT (pick any)
		public ??_C@_0BE@MLJBKLKM@Intel?5RDRAND?5engine?$AA@
; `string'
??_C@_0BE@MLJBKLKM@Intel?5RDRAND?5engine?$AA@ db 'Intel RDRAND engine',0
					; DATA XREF: .data:_engine_e_rdrand_nameo
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_load_rdrand
_ENGINE_load_rdrand proc near
		test	dword ptr _OPENSSL_ia32cap_P+4,	40000000h
		jz	short locret_C7
		push	esi
		call	_ENGINE_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_C6
		push	esi
		call	_bind_helper
		add	esp, 4
		push	esi
		test	eax, eax
		jnz	short loc_C8
		call	_ENGINE_free
		add	esp, 4

loc_C6:					; CODE XREF: _ENGINE_load_rdrand+16j
		pop	esi

locret_C7:				; CODE XREF: _ENGINE_load_rdrand+Aj
		retn
; ---------------------------------------------------------------------------

loc_C8:					; CODE XREF: _ENGINE_load_rdrand+24j
		call	_ENGINE_add
		push	esi
		call	_ENGINE_free
		add	esp, 8
		pop	esi
		jmp	_ERR_clear_error
_ENGINE_load_rdrand endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ENGINE_rdrand	proc near
		push	esi
		call	_ENGINE_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_FE
		push	esi
		call	_bind_helper
		add	esp, 4
		test	eax, eax
		jnz	short loc_102
		push	esi
		call	_ENGINE_free
		add	esp, 4

loc_FE:					; CODE XREF: _ENGINE_rdrand+Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_102:				; CODE XREF: _ENGINE_rdrand+17j
		mov	eax, esi
		pop	esi
		retn
_ENGINE_rdrand	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 108h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bind_helper	proc near		; CODE XREF: _ENGINE_load_rdrand+19p
					; _ENGINE_rdrand+Dp

arg_0		= dword	ptr  4

		push	esi
		push	_engine_e_rdrand_id
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	short loc_16D
		push	_engine_e_rdrand_name
		push	esi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	short loc_16D
		push	8
		push	esi
		call	_ENGINE_set_flags
		add	esp, 8
		test	eax, eax
		jz	short loc_16D
		push	offset _rdrand_init
		push	esi
		call	_ENGINE_set_init_function
		add	esp, 8
		test	eax, eax
		jz	short loc_16D
		push	offset _rdrand_meth
		push	esi
		call	_ENGINE_set_RAND
		add	esp, 8
		test	eax, eax
		jz	short loc_16D
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_16D:				; CODE XREF: _bind_helper+16j
					; _bind_helper+29j ...
		xor	eax, eax
		pop	esi
		retn
_bind_helper	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 174h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rdrand_init	proc near		; DATA XREF: _bind_helper+3Ao
		mov	eax, 1
		retn
_rdrand_init	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_clear_error:near ; CODE XREF: _ENGINE_load_rdrand+3Fj
		extrn _ENGINE_add:near	; CODE XREF: _ENGINE_load_rdrand:loc_C8p
		extrn _ENGINE_new:near	; CODE XREF: _ENGINE_load_rdrand+Dp
					; _ENGINE_rdrand+1p
		extrn _ENGINE_free:near	; CODE XREF: _ENGINE_load_rdrand+26p
					; _ENGINE_load_rdrand+36p ...
		extrn _ENGINE_set_id:near ; CODE XREF: _bind_helper+Cp
		extrn _ENGINE_set_name:near ; CODE XREF: _bind_helper+1Fp
		extrn _ENGINE_set_RAND:near ; CODE XREF: _bind_helper+52p
		extrn _ENGINE_set_init_function:near ; CODE XREF: _bind_helper+40p
		extrn _ENGINE_set_flags:near ; CODE XREF: _bind_helper+2Ep
		extrn _OPENSSL_ia32_rdrand:near	; CODE XREF: _get_random_bytes:loc_10p
					; _get_random_bytes+2Ap
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _get_random_bytes+3Ep
		extrn _OPENSSL_ia32cap_P:near ;	DATA XREF: _ENGINE_load_rdrandr


		end
