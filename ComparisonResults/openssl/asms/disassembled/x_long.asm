;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C24EEB242E300D8E0A180E786FBF2454
; Input	CRC32 :	BD8E155B

; File Name   :	C:\compspace\Diff\openssl\obj\x_long.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_long_new	proc near		; DATA XREF: .data:00000160o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [eax+14h]
		mov	eax, [esp+arg_0]
		mov	[eax], ecx
		mov	eax, 1
		retn
_long_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_long_free	proc near		; DATA XREF: .data:00000164o
					; .data:00000168o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [eax+14h]
		mov	eax, [esp+arg_0]
		mov	[eax], ecx
		retn
_long_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_long_i2c	proc near		; DATA XREF: .data:00000170o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		mov	eax, [esp+4+arg_C]
		cmp	esi, [eax+14h]
		jnz	short loc_39
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_39:					; CODE XREF: _long_i2c+Ej
		or	eax, 0FFFFFFFFh
		push	ebx
		sub	eax, esi
		mov	ebx, esi
		test	esi, esi
		push	edi
		cmovs	ebx, eax
		push	ebx
		call	_BN_num_bits_word
		mov	edx, [esp+10h+arg_4]
		add	esp, 4
		test	al, 7
		mov	ecx, 0
		setz	cl
		lea	edi, [eax+7]
		sar	edi, 3
		mov	[esp+0Ch+arg_0], ecx
		test	edx, edx
		jz	short loc_9E
		test	ecx, ecx
		jz	short loc_7A
		test	esi, esi
		setns	al
		dec	al
		mov	[edx], al
		inc	edx

loc_7A:					; CODE XREF: _long_i2c+4Aj
		lea	ecx, [edi-1]
		test	ecx, ecx
		js	short loc_9A
		nop	dword ptr [eax]

loc_84:					; CODE XREF: _long_i2c+74j
		mov	[ecx+edx], bl
		test	esi, esi
		jns	short loc_92
		mov	al, bl
		not	al
		mov	[ecx+edx], al

loc_92:					; CODE XREF: _long_i2c+65j
		shr	ebx, 8
		sub	ecx, 1
		jns	short loc_84

loc_9A:					; CODE XREF: _long_i2c+5Bj
		mov	ecx, [esp+0Ch+arg_0]

loc_9E:					; CODE XREF: _long_i2c+46j
		lea	eax, [ecx+edi]
		pop	edi
		pop	ebx
		pop	esi
		retn
_long_i2c	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_long_c2i	proc near		; DATA XREF: .data:0000016Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_8]
		cmp	esi, 4
		jle	short loc_D4
		push	0A3h ; '£'

loc_B7:					; CODE XREF: _long_c2i+87j
		push	offset ??_C@_0BH@OOENGGEL@?4?2crypto?2asn1?2x_long?4c?$AA@ ; ".\\crypto\\asn1\\x_long.c"
		push	80h ; '€'
		push	0A6h ; '¦'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D4:					; CODE XREF: _long_c2i+8j
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	short loc_EA
		test	byte ptr [edi],	80h
		jz	short loc_EA
		mov	ebx, 1
		jmp	short loc_EC
; ---------------------------------------------------------------------------

loc_EA:					; CODE XREF: _long_c2i+34j
					; _long_c2i+39j
		xor	ebx, ebx

loc_EC:					; CODE XREF: _long_c2i+40j
		xor	ecx, ecx
		xor	edx, edx
		test	esi, esi
		jle	short loc_114
		nop	dword ptr [eax+00h]

loc_F8:					; CODE XREF: _long_c2i+6Aj
		shl	ecx, 8
		test	ebx, ebx
		jz	short loc_109
		mov	al, [edx+edi]
		not	al
		movzx	eax, al
		jmp	short loc_10D
; ---------------------------------------------------------------------------

loc_109:				; CODE XREF: _long_c2i+55j
		movzx	eax, byte ptr [edx+edi]

loc_10D:				; CODE XREF: _long_c2i+5Fj
		inc	edx
		or	ecx, eax
		cmp	edx, esi
		jl	short loc_F8

loc_114:				; CODE XREF: _long_c2i+4Aj
		pop	edi
		test	ebx, ebx
		pop	ebx
		jz	short loc_121
		or	eax, 0FFFFFFFFh
		sub	eax, ecx
		mov	ecx, eax

loc_121:				; CODE XREF: _long_c2i+70j
		mov	eax, [esp+4+arg_14]
		cmp	ecx, [eax+14h]
		jnz	short loc_131
		push	0B9h ; '¹'
		jmp	short loc_B7
; ---------------------------------------------------------------------------

loc_131:				; CODE XREF: _long_c2i+80j
		mov	eax, [esp+4+arg_0]
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
_long_c2i	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 140h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_long_print	proc near		; DATA XREF: .data:00000174o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	dword ptr [eax]
		push	offset ??_C@_04PEDNGLFL@?$CFld?6?$AA@ ;	"%ld\n"
		push	[esp+8+arg_0]
		call	_BIO_printf
		add	esp, 0Ch
		retn
_long_print	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 158h
_long_pf	dd 2 dup(0)		; DATA XREF: .rdata:00000188o
					; .rdata:000001A4o
		dd offset _long_new
		dd offset _long_free
		dd offset _long_free
		dd offset _long_c2i
		dd offset _long_i2c
		dd offset _long_print
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 178h
; `LONG_it'::`2'::local_it
?local_it@?1??LONG_it@@9@9 dd 0		; DATA XREF: _LONG_ito
		dd 2, 2	dup(0)
		dd offset _long_pf
		dd 7FFFFFFFh
		dd offset ??_C@_04KCJFIMMJ@LONG?$AA@ ; "LONG"
; `ZLONG_it'::`2'::local_it
?local_it@?1??ZLONG_it@@9@9 dd 0	; DATA XREF: _ZLONG_ito
		dd 2, 2	dup(0)
		dd offset _long_pf
		dd 0
		dd offset ??_C@_05HIGAPBOG@ZLONG?$AA@ ;	"ZLONG"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B0h
; COMDAT (pick any)
		public ??_C@_04KCJFIMMJ@LONG?$AA@
; `string'
??_C@_04KCJFIMMJ@LONG?$AA@ db 'LONG',0  ; DATA XREF: .rdata:00000190o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B8h
; COMDAT (pick any)
		public ??_C@_05HIGAPBOG@ZLONG?$AA@
; `string'
??_C@_05HIGAPBOG@ZLONG?$AA@ db 'ZLONG',0 ; DATA XREF: .rdata:000001ACo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _LONG_it
_LONG_it	proc near
		mov	eax, offset ?local_it@?1??LONG_it@@9@9 ; `LONG_it'::`2'::local_it
		retn
_LONG_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ZLONG_it
_ZLONG_it	proc near
		mov	eax, offset ?local_it@?1??ZLONG_it@@9@9	; `ZLONG_it'::`2'::local_it
		retn
_ZLONG_it	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D0h
; COMDAT (pick any)
		public ??_C@_0BH@OOENGGEL@?4?2crypto?2asn1?2x_long?4c?$AA@
; `string'
??_C@_0BH@OOENGGEL@?4?2crypto?2asn1?2x_long?4c?$AA@ db '.\crypto\asn1\x_long.c',0
					; DATA XREF: _long_c2i:loc_B7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E8h
; COMDAT (pick any)
		public ??_C@_04PEDNGLFL@?$CFld?6?$AA@
; `string'
??_C@_04PEDNGLFL@?$CFld?6?$AA@ db '%ld',0Ah,0 ; DATA XREF: _long_print+6o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_printf:near	; CODE XREF: _long_print+Fp
		extrn _ERR_put_error:near ; CODE XREF: _long_c2i+20p
		extrn _BN_num_bits_word:near ; CODE XREF: _long_i2c+24p


		end
