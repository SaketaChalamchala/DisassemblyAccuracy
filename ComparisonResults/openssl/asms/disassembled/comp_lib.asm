;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	204DF6F338DE20E4918BB731C8DDC382
; Input	CRC32 :	475DEBE0

; File Name   :	C:\compspace\Diff\openssl\obj\comp_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _COMP_CTX_free
_COMP_CTX_free	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_21
		mov	eax, [esi]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_18
		push	esi
		call	eax
		add	esp, 4

loc_18:					; CODE XREF: _COMP_CTX_free+10j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_21:					; CODE XREF: _COMP_CTX_free+7j
		pop	esi
		retn
_COMP_CTX_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _COMP_CTX_new
_COMP_CTX_new	proc near

arg_0		= dword	ptr  4

		push	esi
		push	0Bh
		push	offset ??_C@_0BJ@DAGKNKDH@?4?2crypto?2comp?2comp_lib?4c?$AA@ ; ".\\crypto\\comp\\comp_lib.c"
		push	1Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_3E
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3E:					; CODE XREF: _COMP_CTX_new+16j
		mov	eax, [esp+4+arg_0]
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		movq	qword ptr [esi+10h], xmm0
		mov	dword ptr [esi+18h], 0
		mov	[esi], eax
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_72
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		jnz	short loc_72
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	esi, esi

loc_72:					; CODE XREF: _COMP_CTX_new+37j
					; _COMP_CTX_new+41j
		mov	eax, esi
		pop	esi
		retn
_COMP_CTX_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 78h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _COMP_compress_block
_COMP_compress_block proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_8B
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_8B:					; CODE XREF: _COMP_compress_block+Cj
		push	edi
		mov	edi, [esp+8+arg_10]
		push	edi
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jle	short loc_AD
		add	[esi+4], edi
		add	[esi+8], eax

loc_AD:					; CODE XREF: _COMP_compress_block+2Dj
		pop	edi
		pop	esi
		retn
_COMP_compress_block endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _COMP_expand_block
_COMP_expand_block proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	eax, [eax+14h]
		test	eax, eax
		jnz	short loc_C3
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C3:					; CODE XREF: _COMP_expand_block+Cj
		push	edi
		mov	edi, [esp+8+arg_10]
		push	edi
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jle	short loc_E5
		add	[esi+0Ch], edi
		add	[esi+10h], eax

loc_E5:					; CODE XREF: _COMP_expand_block+2Dj
		pop	edi
		pop	esi
		retn
_COMP_expand_block endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
; COMDAT (pick any)
		public ??_C@_0BJ@DAGKNKDH@?4?2crypto?2comp?2comp_lib?4c?$AA@
; `string'
??_C@_0BJ@DAGKNKDH@?4?2crypto?2comp?2comp_lib?4c?$AA@ db '.\crypto\comp\comp_lib.c',0
					; DATA XREF: _COMP_CTX_new+3o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _COMP_CTX_new+Ap
		extrn _CRYPTO_free:near	; CODE XREF: _COMP_CTX_free+19p
					; _COMP_CTX_new+44p


		end
