;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6C1AB96FDDD79DB91ECDD31F288729F4
; Input	CRC32 :	ABD9E6F3

; File Name   :	C:\compspace\Diff\openssl\obj\p12_p8e.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_encrypt
_PKCS8_encrypt	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	esi
		push	edi
		call	_X509_SIG_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1B
		push	49h ; 'I'
		push	offset ??_C@_0BK@DMNJHBA@?4?2crypto?2pkcs12?2p12_p8e?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_p8e.c"
		push	41h ; 'A'
		jmp	loc_D9
; ---------------------------------------------------------------------------

loc_1B:					; CODE XREF: _PKCS8_encrypt+Bj
		mov	edi, [esp+8+arg_0]
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_3B
		push	[esp+8+arg_14]
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_18]
		push	[esp+14h+arg_4]
		call	_PKCS5_pbe2_set
		jmp	short loc_84
; ---------------------------------------------------------------------------

loc_3B:					; CODE XREF: _PKCS8_encrypt+22j
		push	0
		push	0
		push	0
		push	edi
		push	1
		call	_EVP_PBE_find
		add	esp, 14h
		test	eax, eax
		jz	short loc_6D
		push	edi
		push	0
		push	[esp+10h+arg_14]
		push	[esp+14h+arg_10]
		push	[esp+18h+arg_18]
		push	[esp+1Ch+arg_4]
		call	_PKCS5_pbe2_set_iv
		add	esp, 18h
		jmp	short loc_87
; ---------------------------------------------------------------------------

loc_6D:					; CODE XREF: _PKCS8_encrypt+4Ej
		call	_ERR_clear_error
		push	[esp+8+arg_14]
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_18]
		push	edi
		call	_PKCS5_pbe_set

loc_84:					; CODE XREF: _PKCS8_encrypt+39j
		add	esp, 10h

loc_87:					; CODE XREF: _PKCS8_encrypt+6Bj
		mov	edi, eax
		test	edi, edi
		jnz	short loc_98
		push	56h ; 'V'
		push	offset ??_C@_0BK@DMNJHBA@?4?2crypto?2pkcs12?2p12_p8e?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_p8e.c"
		push	0Dh
		jmp	short loc_D9
; ---------------------------------------------------------------------------

loc_98:					; CODE XREF: _PKCS8_encrypt+8Bj
		push	dword ptr [esi]
		call	_X509_ALGOR_free
		push	dword ptr [esi+4]
		mov	[esi], edi
		call	_ASN1_STRING_free
		add	esp, 8
		push	1
		push	[esp+0Ch+arg_1C]
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_8]
		call	_PKCS8_PRIV_KEY_INFO_it
		push	eax
		push	edi
		call	_PKCS12_item_i2d_encrypt
		add	esp, 18h
		mov	[esi+4], eax
		test	eax, eax
		jnz	short loc_F3
		push	60h ; '`'
		push	offset ??_C@_0BK@DMNJHBA@?4?2crypto?2pkcs12?2p12_p8e?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_p8e.c"
		push	67h ; 'g'

loc_D9:					; CODE XREF: _PKCS8_encrypt+16j
					; _PKCS8_encrypt+96j
		push	7Dh ; '}'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h

$err$14:
		push	esi
		call	_X509_SIG_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_F3:					; CODE XREF: _PKCS8_encrypt+CEj
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_PKCS8_encrypt	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
; COMDAT (pick any)
		public ??_C@_0BK@DMNJHBA@?4?2crypto?2pkcs12?2p12_p8e?4c?$AA@
; `string'
??_C@_0BK@DMNJHBA@?4?2crypto?2pkcs12?2p12_p8e?4c?$AA@ db '.\crypto\pkcs12\p12_p8e.c',0
					; DATA XREF: _PKCS8_encrypt+Fo
					; _PKCS8_encrypt+8Fo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _PKCS8_encrypt+DDp
		extrn _ERR_clear_error:near ; CODE XREF: _PKCS8_encrypt:loc_6Dp
		extrn _ASN1_STRING_free:near ; CODE XREF: _PKCS8_encrypt+A4p
		extrn _EVP_PBE_find:near ; CODE	XREF: _PKCS8_encrypt+44p
		extrn _X509_ALGOR_free:near ; CODE XREF: _PKCS8_encrypt+9Ap
		extrn _X509_SIG_new:near ; CODE	XREF: _PKCS8_encrypt+2p
		extrn _X509_SIG_free:near ; CODE XREF: _PKCS8_encrypt+E6p
		extrn _PKCS5_pbe_set:near ; CODE XREF: _PKCS8_encrypt+7Fp
		extrn _PKCS5_pbe2_set:near ; CODE XREF:	_PKCS8_encrypt+34p
		extrn _PKCS5_pbe2_set_iv:near ;	CODE XREF: _PKCS8_encrypt+63p
		extrn _PKCS8_PRIV_KEY_INFO_it:near ; CODE XREF:	_PKCS8_encrypt+BAp
		extrn _PKCS12_item_i2d_encrypt:near ; CODE XREF: _PKCS8_encrypt+C1p


		end
