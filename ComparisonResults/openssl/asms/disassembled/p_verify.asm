;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D34235FF748D11801C3FC7B7E9FCCEE0
; Input	CRC32 :	CBAF4A88

; File Name   :	C:\compspace\Diff\openssl\obj\p_verify.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_VerifyFinal
_EVP_VerifyFinal proc near

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 64h ; 'd'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+64h+var_4], eax
		mov	eax, [esp+64h+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+6Ch+arg_0]
		xor	ebx, ebx
		push	esi
		mov	[esp+70h+var_64], eax
		xor	esi, esi
		push	edi
		mov	edi, [esp+74h+arg_C]
		lea	eax, [esp+74h+var_5C]
		push	eax
		call	_EVP_MD_CTX_init
		lea	eax, [esp+78h+var_5C]
		push	ebp
		push	eax
		call	_EVP_MD_CTX_copy_ex
		add	esp, 0Ch
		test	eax, eax
		jz	$err$24
		lea	eax, [esp+74h+var_60]
		push	eax
		lea	eax, [esp+78h+var_44]
		push	eax
		lea	eax, [esp+7Ch+var_5C]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$24
		lea	eax, [esp+74h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	esi, [ebp+0]
		add	esp, 4
		test	byte ptr [esi+0Ch], 4
		jz	short loc_F9
		push	0
		push	edi
		or	ebx, 0FFFFFFFFh
		call	_EVP_PKEY_CTX_new
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short $err$24
		push	esi
		call	_EVP_PKEY_verify_init
		add	esp, 4
		test	eax, eax
		jle	short $err$24
		push	dword ptr [ebp+0]
		push	0
		push	1
		push	0F8h ; 'ø'
		push	ebx
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short $err$24
		push	[esp+74h+var_60]
		lea	eax, [esp+78h+var_44]
		push	eax
		push	[esp+7Ch+arg_8]
		push	[esp+80h+var_64]
		push	esi
		call	_EVP_PKEY_verify
		add	esp, 14h
		mov	ebx, eax

$err$24:				; CODE XREF: _EVP_VerifyFinal+4Aj
					; _EVP_VerifyFinal+69j	...
		push	esi
		call	_EVP_PKEY_CTX_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_F9:					; CODE XREF: _EVP_VerifyFinal+7Fj
		xor	eax, eax
		lea	ecx, [esi+2Ch]
		xchg	ax, ax

loc_100:				; CODE XREF: _EVP_VerifyFinal+111j
		mov	edx, [ecx]
		test	edx, edx
		jz	short loc_113
		cmp	[edi], edx
		jz	short loc_13E
		inc	eax
		add	ecx, 4
		cmp	eax, 4
		jl	short loc_100

loc_113:				; CODE XREF: _EVP_VerifyFinal+104j
		push	6Ah ; 'j'
		push	offset ??_C@_0BI@EBBNMGHM@?4?2crypto?2evp?2p_verify?4c?$AA@ ; ".\\crypto\\evp\\p_verify.c"
		push	6Eh ; 'n'
		push	6Ch ; 'l'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_13E:				; CODE XREF: _EVP_VerifyFinal+108j
		mov	eax, [esi+28h]
		test	eax, eax
		jnz	short loc_16F
		push	6Eh ; 'n'
		push	offset ??_C@_0BI@EBBNMGHM@?4?2crypto?2evp?2p_verify?4c?$AA@ ; ".\\crypto\\evp\\p_verify.c"
		push	69h ; 'i'
		push	6Ch ; 'l'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: _EVP_VerifyFinal+143j
		push	dword ptr [edi+14h]
		lea	ecx, [esp+78h+var_44]
		push	[esp+78h+arg_8]
		push	[esp+7Ch+var_64]
		push	[esp+80h+var_60]
		push	ecx
		push	dword ptr [esi]
		call	eax
		mov	ecx, [esp+8Ch+var_4]
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
_EVP_VerifyFinal endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A4h
; COMDAT (pick any)
		public ??_C@_0BI@EBBNMGHM@?4?2crypto?2evp?2p_verify?4c?$AA@
; `string'
??_C@_0BI@EBBNMGHM@?4?2crypto?2evp?2p_verify?4c?$AA@ db	'.\crypto\evp\p_verify.c',0
					; DATA XREF: _EVP_VerifyFinal+115o
					; _EVP_VerifyFinal+147o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _EVP_VerifyFinal+120p
					; _EVP_VerifyFinal+152p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _EVP_VerifyFinal+35p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _EVP_VerifyFinal+70p
		extrn _EVP_MD_CTX_copy_ex:near ; CODE XREF: _EVP_VerifyFinal+40p
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _EVP_VerifyFinal+5Fp
		extrn _EVP_PKEY_CTX_new:near ; CODE XREF: _EVP_VerifyFinal+87p
		extrn _EVP_PKEY_CTX_free:near ;	CODE XREF: _EVP_VerifyFinal+DCp
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _EVP_VerifyFinal+B0p
		extrn _EVP_PKEY_verify_init:near ; CODE	XREF: _EVP_VerifyFinal+96p
		extrn _EVP_PKEY_verify:near ; CODE XREF: _EVP_VerifyFinal+D1p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _EVP_VerifyFinal+F0p
					; _EVP_VerifyFinal+135p ...
		extrn __chkstk:near	; CODE XREF: _EVP_VerifyFinal+5p
		extrn ___security_cookie:near ;	DATA XREF: _EVP_VerifyFinal+Ar


		end
