;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A643E0400C5C3D482BDFD663428D9787
; Input	CRC32 :	096D8657

; File Name   :	C:\compspace\Diff\openssl\obj\app_rand.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_seeded		dd ?			; DATA XREF: _app_RAND_allow_write_filew
					; _app_RAND_load_file:loc_10Aw	...
_egdsocket	dd ?			; DATA XREF: _app_RAND_load_file+EAw
					; _app_RAND_write_file+18r
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_allow_write_file
_app_RAND_allow_write_file proc	near
		mov	ds:_seeded, 1
		retn
_app_RAND_allow_write_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_load_file
_app_RAND_load_file proc near

var_CC		= byte ptr -0CCh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0CCh ; 'Ì'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0CCh+var_4], eax
		push	ebx
		push	esi
		mov	esi, [esp+0D4h+arg_4]
		xor	ebx, ebx
		push	edi
		mov	edi, [esp+0D8h+arg_0]
		test	edi, edi
		setz	bl
		call	_RAND_screen
		test	edi, edi
		jnz	loc_ED
		lea	eax, [esp+0D8h+var_CC]
		push	0C8h ; 'È'
		push	eax
		call	_RAND_file_name
		add	esp, 8
		mov	edi, eax

loc_65:					; CODE XREF: _app_RAND_load_file+E4j
		test	edi, edi
		jz	short loc_7C
		push	0FFFFFFFFh
		push	edi
		call	_RAND_load_file
		add	esp, 8
		test	eax, eax
		jnz	loc_10A

loc_7C:					; CODE XREF: _app_RAND_load_file+53j
		call	_RAND_status
		test	eax, eax
		jnz	loc_10A
		cmp	[esp+0D8h+arg_8], eax
		jnz	short loc_D3
		push	offset ??_C@_0BP@ICAJCDFF@unable?5to?5load?5?8random?5state?8?6?$AA@ ; "unable to load 'random state'\n"
		push	esi
		call	_BIO_printf
		push	offset ??_C@_0EB@BOMNFNFB@This?5means?5that?5the?5random?5numbe@ ; "This means that the	random number gener"...
		push	esi
		call	_BIO_printf
		push	offset ??_C@_0BI@FIMGNHKG@with?5much?5random?5data?4?6?$AA@ ; "with much random	data.\n"
		push	esi
		call	_BIO_printf
		add	esp, 18h
		test	ebx, ebx
		jz	short loc_D3
		push	offset ??_C@_0EM@KIIGPAJP@Consider?5setting?5the?5RANDFILE?5en@	; "Consider setting the	RANDFILE environme"...
		push	esi
		call	_BIO_printf
		push	offset ??_C@_0DO@PCEBKOHF@?8random?8?5data?5can?5be?5kept?5in?5?$CIth@ ; "'random' data can be kept in (the file "...
		push	esi
		call	_BIO_printf
		add	esp, 10h

loc_D3:					; CODE XREF: _app_RAND_load_file+7Cj
					; _app_RAND_load_file+A4j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+0CCh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0CCh
		retn
; ---------------------------------------------------------------------------

loc_ED:					; CODE XREF: _app_RAND_load_file+37j
		push	edi
		call	_RAND_egd
		add	esp, 4
		test	eax, eax
		jle	loc_65
		mov	ds:_egdsocket, 1
		jmp	short loc_114
; ---------------------------------------------------------------------------

loc_10A:				; CODE XREF: _app_RAND_load_file+62j
					; _app_RAND_load_file+6Fj
		mov	ds:_seeded, 1

loc_114:				; CODE XREF: _app_RAND_load_file+F4j
		mov	ecx, [esp+0D8h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0CCh
		retn
_app_RAND_load_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 134h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_load_files
_app_RAND_load_files proc near

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		xor	esi, esi
		push	edi
		lea	ecx, [esi+1]
		nop	dword ptr [eax]

loc_144:				; CODE XREF: _app_RAND_load_files+5Fj
		xor	ebp, ebp
		mov	eax, ebx
		cmp	byte ptr [ebx],	0
		jz	short loc_15F
		nop	dword ptr [eax+00000000h]

loc_154:				; CODE XREF: _app_RAND_load_files+29j
		cmp	byte ptr [eax],	3Bh ; ';'
		jz	short loc_15F
		inc	eax
		cmp	byte ptr [eax],	0
		jnz	short loc_154

loc_15F:				; CODE XREF: _app_RAND_load_files+17j
					; _app_RAND_load_files+23j
		cmp	byte ptr [eax],	0
		mov	edi, ebx
		mov	byte ptr [eax],	0
		lea	ebx, [eax+1]
		cmovz	ebp, ecx
		cmp	byte ptr [edi],	0
		jz	short loc_195
		push	edi
		call	_RAND_egd
		add	esp, 4
		test	eax, eax
		jg	short loc_18A
		push	0FFFFFFFFh
		push	edi
		call	_RAND_load_file
		add	esp, 8

loc_18A:				; CODE XREF: _app_RAND_load_files+49j
		add	esi, eax
		mov	ecx, 1
		test	ebp, ebp
		jz	short loc_144

loc_195:				; CODE XREF: _app_RAND_load_files+3Cj
		mov	ecx, ds:_seeded
		cmp	esi, 200h
		mov	eax, 1
		pop	edi
		cmovg	ecx, eax
		mov	eax, esi
		pop	esi
		pop	ebp
		mov	ds:_seeded, ecx
		pop	ebx
		retn
_app_RAND_load_files endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_write_file
_app_RAND_write_file proc near

var_CC		= byte ptr -0CCh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0CCh ; 'Ì'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0CCh+var_4], eax
		cmp	ds:_egdsocket, 0
		mov	eax, [esp+0CCh+arg_0]
		push	esi
		mov	esi, [esp+0D0h+arg_4]
		jnz	short loc_241
		cmp	ds:_seeded, 0
		jz	short loc_241
		test	eax, eax
		jnz	short loc_20B
		lea	eax, [esp+0D0h+var_CC]
		push	0C8h ; 'È'
		push	eax
		call	_RAND_file_name
		add	esp, 8
		test	eax, eax
		jz	short loc_233

loc_20B:				; CODE XREF: _app_RAND_write_file+3Bj
		push	eax
		call	_RAND_write_file
		add	esp, 4
		test	eax, eax
		jz	short loc_233
		mov	eax, 1
		pop	esi
		mov	ecx, [esp+0CCh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0CCh
		retn
; ---------------------------------------------------------------------------

loc_233:				; CODE XREF: _app_RAND_write_file+51j
					; _app_RAND_write_file+5Ej
		push	offset ??_C@_0CA@GJGIJFIP@unable?5to?5write?5?8random?5state?8?6?$AA@ ;	"unable	to write 'random state'\n"
		push	esi
		call	_BIO_printf
		add	esp, 8

loc_241:				; CODE XREF: _app_RAND_write_file+2Ej
					; _app_RAND_write_file+37j
		mov	ecx, [esp+0D0h+var_4]
		xor	eax, eax
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0CCh
		retn
_app_RAND_write_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
; COMDAT (pick any)
		public ??_C@_0BP@ICAJCDFF@unable?5to?5load?5?8random?5state?8?6?$AA@
; `string'
??_C@_0BP@ICAJCDFF@unable?5to?5load?5?8random?5state?8?6?$AA@ db 'unable to load ',27h,'random state',27h,0Ah,0
					; DATA XREF: _app_RAND_load_file+7Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 27Ch
; COMDAT (pick any)
		public ??_C@_0EB@BOMNFNFB@This?5means?5that?5the?5random?5numbe@
; `string'
??_C@_0EB@BOMNFNFB@This?5means?5that?5the?5random?5numbe@ db 'This means that the random number generator has not been seeded',0Ah
					; DATA XREF: _app_RAND_load_file+89o
		db 0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C0h
; COMDAT (pick any)
		public ??_C@_0BI@FIMGNHKG@with?5much?5random?5data?4?6?$AA@
; `string'
??_C@_0BI@FIMGNHKG@with?5much?5random?5data?4?6?$AA@ db	'with much random data.',0Ah,0
					; DATA XREF: _app_RAND_load_file+94o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 2D8h
; COMDAT (pick any)
		public ??_C@_0EM@KIIGPAJP@Consider?5setting?5the?5RANDFILE?5en@
; `string'
??_C@_0EM@KIIGPAJP@Consider?5setting?5the?5RANDFILE?5en@ db 'Consider setting the RANDFILE environment variable to point at a '
					; DATA XREF: _app_RAND_load_file+A6o
		db 'file that',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 324h
; COMDAT (pick any)
		public ??_C@_0DO@PCEBKOHF@?8random?8?5data?5can?5be?5kept?5in?5?$CIth@
; `string'
??_C@_0DO@PCEBKOHF@?8random?8?5data?5can?5be?5kept?5in?5?$CIth@	db 27h,'random',27h,' data can be kept in (the file will be overwritten).',0Ah
					; DATA XREF: _app_RAND_load_file+B1o
		db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 364h
; COMDAT (pick any)
		public ??_C@_0CA@GJGIJFIP@unable?5to?5write?5?8random?5state?8?6?$AA@
; `string'
??_C@_0CA@GJGIJFIP@unable?5to?5write?5?8random?5state?8?6?$AA@ db 'unable to write ',27h,'random state',27h,0Ah,0
					; DATA XREF: _app_RAND_write_file:loc_233o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_printf:near	; CODE XREF: _app_RAND_load_file+84p
					; _app_RAND_load_file+8Fp ...
		extrn _RAND_load_file:near ; CODE XREF:	_app_RAND_load_file+58p
					; _app_RAND_load_files+4Ep
		extrn _RAND_write_file:near ; CODE XREF: _app_RAND_write_file+54p
		extrn _RAND_file_name:near ; CODE XREF:	_app_RAND_load_file+47p
					; _app_RAND_write_file+47p
		extrn _RAND_status:near	; CODE XREF: _app_RAND_load_file:loc_7Cp
		extrn _RAND_egd:near	; CODE XREF: _app_RAND_load_file+DAp
					; _app_RAND_load_files+3Fp
		extrn _RAND_screen:near	; CODE XREF: _app_RAND_load_file+30p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _app_RAND_load_file+CDp
					; _app_RAND_load_file+111p ...
		extrn __chkstk:near	; CODE XREF: _app_RAND_load_file+5p
					; _app_RAND_write_file+5p
		extrn ___security_cookie:near ;	DATA XREF: _app_RAND_load_file+Ar
					; _app_RAND_write_file+Ar


		end
