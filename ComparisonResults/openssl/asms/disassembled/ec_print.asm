;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	272CCF189A40D1DB09DF36B52D72FD2F
; Input	CRC32 :	8B1F1E47

; File Name   :	C:\compspace\Diff\openssl\obj\ec_print.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_HEX_DIGITS	dd offset ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
					; DATA XREF: _EC_POINT_point2hex+A3r
_data		ends			; "0123456789ABCDEF"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
; COMDAT (pick any)
		public ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; `string'
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ db '0123456789ABCDEF',0
					; DATA XREF: .data:_HEX_DIGITSo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_POINT_bn2point
_EC_POINT_bn2point proc	near		; CODE XREF: _EC_POINT_hex2point+3Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	ebp, [edx+eax]
		sar	ebp, 3
		test	ebp, ebp
		jnz	short loc_3D
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_3D:					; CODE XREF: _EC_POINT_bn2point+1Ej
		push	esi
		push	5Fh ; '_'
		push	offset ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ ; ".\\crypto\\ec\\ec_print.c"
		push	ebp
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_6B
		push	esi
		push	edi
		call	_BN_bn2bin
		add	esp, 8
		test	eax, eax
		jnz	short loc_71
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_6B:					; CODE XREF: _EC_POINT_bn2point+3Aj
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_71:					; CODE XREF: _EC_POINT_bn2point+48j
		mov	eax, [esp+0Ch+arg_0]
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		test	ebx, ebx
		jnz	short loc_9D
		push	eax
		call	_EC_POINT_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_A1
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_9D:					; CODE XREF: _EC_POINT_bn2point+64j
		mov	edi, ebx
		jmp	short loc_A5
; ---------------------------------------------------------------------------

loc_A1:					; CODE XREF: _EC_POINT_bn2point+73j
		mov	eax, [esp+10h+arg_0]

loc_A5:					; CODE XREF: _EC_POINT_bn2point+87j
		push	[esp+10h+arg_C]
		push	ebp
		push	esi
		push	edi
		push	eax
		call	_EC_POINT_oct2point
		add	esp, 14h
		test	eax, eax
		jnz	short loc_D6
		test	ebx, ebx
		jnz	short loc_C6
		push	edi
		call	_EC_POINT_clear_free
		add	esp, 4

loc_C6:					; CODE XREF: _EC_POINT_bn2point+A3j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_D6:					; CODE XREF: _EC_POINT_bn2point+9Fj
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_EC_POINT_bn2point endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_POINT_hex2point
_EC_POINT_hex2point proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	[esp+4+arg_4]
		lea	eax, [esp+8+var_4]
		mov	[esp+8+var_4], 0
		push	eax
		call	_BN_hex2bn
		add	esp, 8
		test	eax, eax
		jnz	short loc_111
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_111:				; CODE XREF: _EC_POINT_hex2point+25j
		push	esi
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+var_4]
		push	[esp+14h+arg_0]
		call	_EC_POINT_bn2point
		push	[esp+18h+var_4]
		mov	esi, eax
		call	_BN_clear_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	ecx
		retn
_EC_POINT_hex2point endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_POINT_point2bn
_EC_POINT_point2bn proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	[esp+4+arg_10]
		push	0
		push	0
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_EC_POINT_point2oct
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_161
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_161:				; CODE XREF: _EC_POINT_point2bn+21j
		push	edi
		push	47h ; 'G'
		push	offset ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ ; ".\\crypto\\ec\\ec_print.c"
		push	esi
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_19F
		push	[esp+8+arg_10]
		push	esi
		push	edi
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	_EC_POINT_point2oct
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1A4
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_19F:				; CODE XREF: _EC_POINT_point2bn+3Aj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A4:				; CODE XREF: _EC_POINT_point2bn+58j
		push	[esp+8+arg_C]
		push	esi
		push	edi
		call	_BN_bin2bn
		push	edi
		mov	esi, eax
		call	_CRYPTO_free
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_EC_POINT_point2bn endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_POINT_point2hex
_EC_POINT_point2hex proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_C]
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	esi
		push	ebx
		push	0
		push	0
		push	ebp
		push	[esp+20h+arg_4]
		push	[esp+24h+arg_0]
		call	_EC_POINT_point2oct
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_1F6
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1F6:				; CODE XREF: _EC_POINT_point2hex+2Fj
		push	edi
		push	8Ah ; 'Š'
		push	offset ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ ; ".\\crypto\\ec\\ec_print.c"
		push	esi
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_253
		push	ebx
		push	esi
		push	edi
		push	ebp
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_0]
		call	_EC_POINT_point2oct
		add	esp, 18h
		test	eax, eax
		jz	short loc_24A
		push	92h ; '’'
		lea	eax, ds:2[esi*2]
		push	offset ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ ; ".\\crypto\\ec\\ec_print.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jnz	short loc_25B

loc_24A:				; CODE XREF: _EC_POINT_point2hex+66j
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_253:				; CODE XREF: _EC_POINT_point2hex+4Ej
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_25B:				; CODE XREF: _EC_POINT_point2hex+88j
		mov	edx, eax
		mov	ebx, edi
		test	esi, esi
		jz	short loc_293
		mov	ebp, _HEX_DIGITS
		nop	dword ptr [eax+00000000h]

loc_270:				; CODE XREF: _EC_POINT_point2hex+D1j
		movzx	ecx, byte ptr [ebx]
		lea	ebx, [ebx+1]
		mov	eax, ecx
		and	ecx, 0Fh
		sar	eax, 4
		movzx	eax, byte ptr [eax+ebp]
		mov	[edx], al
		movzx	eax, byte ptr [ecx+ebp]
		mov	[edx+1], al
		add	edx, 2
		sub	esi, 1
		jnz	short loc_270

loc_293:				; CODE XREF: _EC_POINT_point2hex+A1j
		push	edi
		mov	byte ptr [edx],	0
		call	_CRYPTO_free
		mov	eax, [esp+18h+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_EC_POINT_point2hex endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2ACh
; COMDAT (pick any)
		public ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@
; `string'
??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ db '.\crypto\ec\ec_print.c',0
					; DATA XREF: _EC_POINT_bn2point+28o
					; _EC_POINT_point2bn+28o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _EC_POINT_bn2point+2Ep
					; _EC_POINT_point2bn+2Ep ...
		extrn _CRYPTO_free:near	; CODE XREF: _EC_POINT_bn2point+4Bp
					; _EC_POINT_bn2point+76p ...
		extrn _BN_num_bits:near	; CODE XREF: _EC_POINT_bn2point+7p
		extrn _BN_clear_free:near ; CODE XREF: _EC_POINT_hex2point+45p
		extrn _BN_bin2bn:near	; CODE XREF: _EC_POINT_point2bn+6Ep
		extrn _BN_bn2bin:near	; CODE XREF: _EC_POINT_bn2point+3Ep
		extrn _BN_hex2bn:near	; CODE XREF: _EC_POINT_hex2point+1Bp
		extrn _EC_POINT_new:near ; CODE	XREF: _EC_POINT_bn2point+67p
		extrn _EC_POINT_clear_free:near	; CODE XREF: _EC_POINT_bn2point+A6p
		extrn _EC_POINT_point2oct:near ; CODE XREF: _EC_POINT_point2bn+15p
					; _EC_POINT_point2bn+4Ep ...
		extrn _EC_POINT_oct2point:near ; CODE XREF: _EC_POINT_bn2point+95p
		extrn __chkstk:near	; CODE XREF: _EC_POINT_hex2point+5p
					; _EC_POINT_point2hex+5p


		end
