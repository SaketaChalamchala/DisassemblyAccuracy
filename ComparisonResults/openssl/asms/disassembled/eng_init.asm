;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6C29D132002E22E93CEF3140A7FF770D
; Input	CRC32 :	1E918875

; File Name   :	C:\compspace\Diff\openssl\obj\eng_init.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_finish
_ENGINE_finish	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_25
		push	92h ; '’'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	43h ; 'C'
		push	6Bh ; 'k'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_25:					; CODE XREF: _ENGINE_finish+7j
		push	edi
		push	95h ; '•'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	9
		call	_CRYPTO_lock
		add	esp, 10h
		mov	edi, 1
		add	dword ptr [esi+5Ch], 0FFFFFFFFh
		jnz	short loc_7C
		cmp	dword ptr [esi+3Ch], 0
		jz	short loc_7C
		push	69h ; 'i'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		mov	eax, [esi+3Ch]
		push	esi
		call	eax
		push	6Ch ; 'l'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	9
		mov	edi, eax
		call	_CRYPTO_lock
		add	esp, 24h
		test	edi, edi
		jz	short loc_A3

loc_7C:					; CODE XREF: _ENGINE_finish+45j
					; _ENGINE_finish+4Bj
		push	0
		push	esi
		call	_engine_free_util
		add	esp, 8
		test	eax, eax
		jnz	short loc_A5
		push	78h ; 'x'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	6Ah ; 'j'
		push	0BFh ; '¿'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h

loc_A3:					; CODE XREF: _ENGINE_finish+7Aj
		xor	edi, edi

loc_A5:					; CODE XREF: _ENGINE_finish+89j
		push	97h ; '—'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		test	edi, edi
		jnz	short loc_DC
		push	99h ; '™'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	6Ah ; 'j'
		push	6Bh ; 'k'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DC:					; CODE XREF: _ENGINE_finish+BDj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_ENGINE_finish	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_init
_ENGINE_init	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_109
		push	83h ; 'ƒ'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	43h ; 'C'
		push	77h ; 'w'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_109:				; CODE XREF: _ENGINE_init+7j
		push	edi
		push	86h ; '†'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	9
		call	_CRYPTO_lock
		add	esp, 10h
		mov	edi, 1
		cmp	dword ptr [esi+5Ch], 0
		jnz	short loc_13E
		mov	eax, [esi+38h]
		test	eax, eax
		jz	short loc_13E
		push	esi
		call	eax
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_144

loc_13E:				; CODE XREF: _ENGINE_init+45j
					; _ENGINE_init+4Cj
		inc	dword ptr [esi+58h]
		inc	dword ptr [esi+5Ch]

loc_144:				; CODE XREF: _ENGINE_init+58j
		push	88h ; 'ˆ'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_ENGINE_init	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 160h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_unlocked_finish
_engine_unlocked_finish	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, 1
		add	dword ptr [esi+5Ch], 0FFFFFFFFh
		jnz	short loc_1BA
		cmp	dword ptr [esi+3Ch], 0
		jz	short loc_1BA
		cmp	[esp+8+arg_4], 0
		jz	short loc_191
		push	69h ; 'i'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h

loc_191:				; CODE XREF: _engine_unlocked_finish+1Cj
		mov	eax, [esi+3Ch]
		push	esi
		call	eax
		add	esp, 4
		mov	edi, eax
		cmp	[esp+8+arg_4], 0
		jz	short loc_1B6
		push	6Ch ; 'l'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	1Eh
		push	9
		call	_CRYPTO_lock
		add	esp, 10h

loc_1B6:				; CODE XREF: _engine_unlocked_finish+41j
		test	edi, edi
		jz	short loc_1E1

loc_1BA:				; CODE XREF: _engine_unlocked_finish+Fj
					; _engine_unlocked_finish+15j
		push	0
		push	esi
		call	_engine_free_util
		add	esp, 8
		test	eax, eax
		jnz	short loc_1E6
		push	78h ; 'x'
		push	offset ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ ;	".\\crypto\\engine\\eng_init.c"
		push	6Ah ; 'j'
		push	0BFh ; '¿'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h

loc_1E1:				; CODE XREF: _engine_unlocked_finish+58j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1E6:				; CODE XREF: _engine_unlocked_finish+67j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_engine_unlocked_finish	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_unlocked_init
_engine_unlocked_init proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, 1
		cmp	dword ptr [esi+5Ch], 0
		jnz	short loc_20D
		mov	ecx, [esi+38h]
		test	ecx, ecx
		jz	short loc_20D
		push	esi
		call	ecx
		add	esp, 4
		test	eax, eax
		jz	short loc_213

loc_20D:				; CODE XREF: _engine_unlocked_init+Ej
					; _engine_unlocked_init+15j
		inc	dword ptr [esi+58h]
		inc	dword ptr [esi+5Ch]

loc_213:				; CODE XREF: _engine_unlocked_init+1Fj
		pop	esi
		retn
_engine_unlocked_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 218h
; COMDAT (pick any)
		public ??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@
; `string'
??_C@_0BL@BEBELKO@?4?2crypto?2engine?2eng_init?4c?$AA@ db '.\crypto\engine\eng_init.c',0
					; DATA XREF: _ENGINE_finish+Eo
					; _ENGINE_finish+2Bo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_lock:near	; CODE XREF: _ENGINE_finish+34p
					; _ENGINE_finish+58p ...
		extrn _ERR_put_error:near ; CODE XREF: _ENGINE_finish+19p
					; _ENGINE_finish+9Bp ...
		extrn _engine_free_util:near ; CODE XREF: _ENGINE_finish+7Fp
					; _engine_unlocked_finish+5Dp


		end
