;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C5EE58F9F1D54E1DDE489E4CE5287D92
; Input	CRC32 :	346574FF

; File Name   :	C:\compspace\Diff\openssl\obj\srptest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _main+72p	_run_srp+60p ...

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		push	esi
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		push	edi
		push	0
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax
		call	_BIO_new_fp
		push	offset _CRYPTO_dbg_get_options
		push	offset _CRYPTO_dbg_set_options
		push	offset _CRYPTO_dbg_free
		push	offset _CRYPTO_dbg_realloc
		push	offset _CRYPTO_dbg_malloc
		mov	edi, eax
		call	_CRYPTO_set_mem_debug_functions
		push	3
		call	_CRYPTO_dbg_set_options
		push	1
		call	_CRYPTO_mem_ctrl
		call	_ERR_load_crypto_strings
		push	offset ??_C@_09DAKGFJEM@password2?$AA@ ; "password2"
		push	offset ??_C@_09BLILAKIP@password1?$AA@ ; "password1"
		push	offset ??_C@_05MFGCEKPN@alice?$AA@ ; "alice"
		call	_run_srp
		add	esp, 30h
		test	eax, eax
		jnz	short loc_D2
		push	offset ??_C@_0BL@EJOPECBK@Mismatched?5SRP?5run?5failed?6?$AA@ ;	"Mismatched SRP	run failed\n"

loc_BA:					; CODE XREF: _main+A2j
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D2:					; CODE XREF: _main+63j
		push	offset ??_C@_08NLHBPEGP@password?$AA@ ;	"password"
		push	offset ??_C@_08NLHBPEGP@password?$AA@ ;	"password"
		push	offset ??_C@_05MFGCEKPN@alice?$AA@ ; "alice"
		call	_run_srp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_F4
		push	offset ??_C@_0BG@OHDBDOPH@Plain?5SRP?5run?5failed?6?$AA@ ; "Plain SRP run failed\n"
		jmp	short loc_BA
; ---------------------------------------------------------------------------

loc_F4:					; CODE XREF: _main+9Bj
		call	_CRYPTO_cleanup_all_ex_data
		push	0
		call	_ERR_remove_thread_state
		call	_ERR_free_strings
		push	edi
		call	_CRYPTO_mem_leaks
		push	edi
		call	_BIO_free
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_run_srp	proc near		; CODE XREF: _main+59p	_main+91p

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 40h ; '@'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+40h+var_4], eax
		mov	eax, [esp+40h+arg_4]
		push	ebx
		mov	ebx, [esp+44h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+4Ch+arg_8]
		push	offset ??_C@_04MJHCKDHM@1024?$AA@ ; "1024"
		mov	[esp+50h+var_30], ebx
		mov	[esp+50h+var_38], eax
		mov	[esp+50h+var_3C], 0
		mov	[esp+50h+var_40], 0
		call	_SRP_get_default_gN
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_199
		push	offset ??_C@_0BO@NGBEKJID@Failed?5to?5get?5SRP?5parameters?6?$AA@ ; "Failed to get SRP parameters\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_199:				; CODE XREF: _run_srp+4Dj
		push	dword ptr [esi+4]
		lea	eax, [esp+50h+var_40]
		push	dword ptr [esi+8]
		push	eax
		lea	eax, [esp+58h+var_3C]
		push	eax
		push	edi
		push	ebx
		call	_SRP_create_verifier_BN
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1E5
		push	offset ??_C@_0BP@FCJLBNGB@Failed?5to?5create?5SRP?5verifier?6?$AA@ ; "Failed to	create SRP verifier\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1E5:				; CODE XREF: _run_srp+99j
		push	ebp
		push	dword ptr [esi+8] ; int
		push	offset ??_C@_01NANMIPIL@N?$AA@ ; Str
		call	_showbn
		push	dword ptr [esi+4] ; int
		push	offset ??_C@_01JEJKBAGA@g?$AA@ ; Str
		call	_showbn
		push	[esp+60h+var_3C] ; int
		push	offset ??_C@_04MPGKKDCJ@Salt?$AA@ ; "Salt"
		call	_showbn
		push	[esp+68h+var_40] ; int
		push	offset ??_C@_08NHPAMKDJ@Verifier?$AA@ ;	"Verifier"
		call	_showbn
		lea	eax, [esp+70h+var_24]
		push	20h ; ' '
		push	eax
		call	_RAND_pseudo_bytes
		push	0
		lea	eax, [esp+7Ch+var_24]
		push	20h ; ' '
		push	eax
		call	_BN_bin2bn
		mov	ebx, eax
		push	ebx		; int
		push	offset ??_C@_01OJONOECF@b?$AA@ ; Str
		mov	[esp+8Ch+var_2C], ebx
		call	_showbn
		push	[esp+8Ch+var_40]
		push	dword ptr [esi+4]
		push	dword ptr [esi+8]
		push	ebx
		call	_SRP_Calc_B
		add	esp, 4Ch
		mov	ebp, eax
		push	ebp		; int
		push	offset ??_C@_01HMGJMAIH@B?$AA@ ; Str
		call	_showbn
		push	dword ptr [esi+8]
		push	ebp
		call	_SRP_Verify_B_mod_N
		add	esp, 10h
		test	eax, eax
		jnz	short loc_2A6
		push	offset ??_C@_0L@EPDHPAFE@Invalid?5B?6?$AA@ ; "Invalid B\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_2A6:				; CODE XREF: _run_srp+159j
		lea	eax, [esp+50h+var_24]
		push	20h ; ' '
		push	eax
		call	_RAND_pseudo_bytes
		push	0
		lea	eax, [esp+5Ch+var_24]
		push	20h ; ' '
		push	eax
		call	_BN_bin2bn
		mov	ebx, eax
		push	ebx		; int
		push	offset ??_C@_01MCMALHOG@a?$AA@ ; Str
		call	_showbn
		push	dword ptr [esi+4]
		push	dword ptr [esi+8]
		push	ebx
		call	_SRP_Calc_A
		mov	edi, eax
		push	edi		; int
		push	offset ??_C@_01FHEEJDEE@A?$AA@ ; Str
		call	_showbn
		push	dword ptr [esi+8]
		push	edi
		call	_SRP_Verify_A_mod_N
		add	esp, 38h
		test	eax, eax
		jnz	short loc_325
		push	offset ??_C@_0L@ENHBEOAN@Invalid?5A?6?$AA@ ; "Invalid A\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_325:				; CODE XREF: _run_srp+1D8j
		push	dword ptr [esi+8]
		push	ebp
		push	edi
		call	_SRP_Calc_u
		push	[esp+5Ch+var_38]
		mov	[esp+60h+var_34], eax
		push	[esp+60h+var_30]
		push	[esp+64h+var_3C]
		call	_SRP_Calc_x
		push	[esp+68h+var_34]
		mov	[esp+6Ch+var_28], eax
		push	ebx
		push	eax
		push	dword ptr [esi+4]
		push	ebp
		push	dword ptr [esi+8]
		call	_SRP_Calc_client_key
		push	eax		; int
		push	offset ??_C@_0N@GHNDCLEL@Client?8s?5key?$AA@ ; "Client's key"
		mov	[esp+88h+var_38], eax
		call	_showbn
		push	dword ptr [esi+8]
		push	[esp+8Ch+var_2C]
		push	[esp+90h+var_34]
		push	[esp+94h+var_40]
		push	edi
		call	_SRP_Calc_server_key
		add	esp, 4Ch
		mov	esi, eax
		mov	[esp+50h+var_30], esi
		push	esi		; int
		push	offset ??_C@_0N@ELAJFJDO@Server?8s?5key?$AA@ ; "Server's key"
		call	_showbn
		push	esi
		push	[esp+5Ch+var_38]
		call	_BN_cmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_3A7
		xor	esi, esi
		jmp	short loc_3C5
; ---------------------------------------------------------------------------

loc_3A7:				; CODE XREF: _run_srp+285j
		push	offset ??_C@_0P@JKFBNJAG@Keys?5mismatch?6?$AA@ ; "Keys mismatch\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	esi, 1

loc_3C5:				; CODE XREF: _run_srp+289j
		push	[esp+50h+var_38]
		call	_BN_clear_free
		push	[esp+54h+var_30]
		call	_BN_clear_free
		push	[esp+58h+var_28]
		call	_BN_clear_free
		push	[esp+5Ch+var_34]
		call	_BN_free
		push	edi
		call	_BN_free
		push	ebx
		call	_BN_clear_free
		push	ebp
		call	_BN_free
		push	[esp+6Ch+var_2C]
		call	_BN_clear_free
		push	[esp+70h+var_3C]
		call	_BN_free
		push	[esp+74h+var_40]
		call	_BN_clear_free
		mov	ecx, [esp+78h+var_4]
		add	esp, 28h
		mov	eax, esi
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
_run_srp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 430h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl showbn(char *Str,	int)
_showbn		proc near		; CODE XREF: _run_srp+D2p _run_srp+DFp ...

Str		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, dword ptr ds:__imp____acrt_iob_func
		push	1
		call	edi ; __imp____acrt_iob_func
		push	eax		; File
		push	[esp+0Ch+Str]	; Str
		call	dword ptr ds:__imp__fputs
		push	1
		call	edi ; __imp____acrt_iob_func
		push	eax		; File
		push	offset ??_C@_03MHLONNLM@?5?$DN?5?$AA@ ;	" = "
		call	dword ptr ds:__imp__fputs
		add	esp, 18h
		push	[esp+4+arg_4]
		push	1
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax
		call	_BN_print_fp
		push	1
		call	edi ; __imp____acrt_iob_func
		add	esp, 0Ch
		pop	edi
		mov	[esp+arg_4], eax
		mov	[esp+Str], 0Ah
		jmp	dword ptr ds:__imp__putc
_showbn		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 484h
; COMDAT (pick any)
		public ??_C@_03MHLONNLM@?5?$DN?5?$AA@
; char `string'[4]
??_C@_03MHLONNLM@?5?$DN?5?$AA@ db ' = ',0 ; DATA XREF: _showbn+1Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 488h
; COMDAT (pick any)
		public ??_C@_04MJHCKDHM@1024?$AA@
; `string'
??_C@_04MJHCKDHM@1024?$AA@ db '1024',0  ; DATA XREF: _run_srp+24o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 490h
; COMDAT (pick any)
		public ??_C@_0BO@NGBEKJID@Failed?5to?5get?5SRP?5parameters?6?$AA@
; char `string'[]
??_C@_0BO@NGBEKJID@Failed?5to?5get?5SRP?5parameters?6?$AA@ db 'Failed to get SRP parameters',0Ah,0
					; DATA XREF: _run_srp+4Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
; COMDAT (pick any)
		public ??_C@_0BP@FCJLBNGB@Failed?5to?5create?5SRP?5verifier?6?$AA@
; char `string'[]
??_C@_0BP@FCJLBNGB@Failed?5to?5create?5SRP?5verifier?6?$AA@ db 'Failed to create SRP verifier',0Ah,0
					; DATA XREF: _run_srp+9Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D0h
; COMDAT (pick any)
		public ??_C@_01NANMIPIL@N?$AA@
; char `string'[]
??_C@_01NANMIPIL@N?$AA@	db 4Eh,	0	; DATA XREF: _run_srp+CDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D4h
; COMDAT (pick any)
		public ??_C@_01JEJKBAGA@g?$AA@
; char `string'[]
??_C@_01JEJKBAGA@g?$AA@	db 67h,	0	; DATA XREF: _run_srp+DAo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D8h
; COMDAT (pick any)
		public ??_C@_04MPGKKDCJ@Salt?$AA@
; char `string'[]
??_C@_04MPGKKDCJ@Salt?$AA@ db 'Salt',0  ; DATA XREF: _run_srp+E8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E0h
; COMDAT (pick any)
		public ??_C@_08NHPAMKDJ@Verifier?$AA@
; char `string'[]
??_C@_08NHPAMKDJ@Verifier?$AA@ db 'Verifier',0 ; DATA XREF: _run_srp+F6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4ECh
; COMDAT (pick any)
		public ??_C@_01OJONOECF@b?$AA@
; char `string'[]
??_C@_01OJONOECF@b?$AA@	db 62h,	0	; DATA XREF: _run_srp+11Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F0h
; COMDAT (pick any)
		public ??_C@_01HMGJMAIH@B?$AA@
; char `string'[]
??_C@_01HMGJMAIH@B?$AA@	db 42h,	0	; DATA XREF: _run_srp+141o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F4h
; COMDAT (pick any)
		public ??_C@_0L@EPDHPAFE@Invalid?5B?6?$AA@
; char `string'[]
??_C@_0L@EPDHPAFE@Invalid?5B?6?$AA@ db 'Invalid B',0Ah,0 ; DATA XREF: _run_srp+15Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 500h
; COMDAT (pick any)
		public ??_C@_01MCMALHOG@a?$AA@
; char `string'[]
??_C@_01MCMALHOG@a?$AA@	db 61h,	0	; DATA XREF: _run_srp+1A7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 504h
; COMDAT (pick any)
		public ??_C@_01FHEEJDEE@A?$AA@
; char `string'[]
??_C@_01FHEEJDEE@A?$AA@	db 41h,	0	; DATA XREF: _run_srp+1C0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 508h
; COMDAT (pick any)
		public ??_C@_0L@ENHBEOAN@Invalid?5A?6?$AA@
; char `string'[]
??_C@_0L@ENHBEOAN@Invalid?5A?6?$AA@ db 'Invalid A',0Ah,0 ; DATA XREF: _run_srp+1DAo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 514h
; COMDAT (pick any)
		public ??_C@_0N@GHNDCLEL@Client?8s?5key?$AA@
; char `string'[]
??_C@_0N@GHNDCLEL@Client?8s?5key?$AA@ db 'Client',27h,'s key',0 ; DATA XREF: _run_srp+23Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 524h
; COMDAT (pick any)
		public ??_C@_0N@ELAJFJDO@Server?8s?5key?$AA@
; char `string'[]
??_C@_0N@ELAJFJDO@Server?8s?5key?$AA@ db 'Server',27h,'s key',0 ; DATA XREF: _run_srp+26Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 534h
; COMDAT (pick any)
		public ??_C@_0P@JKFBNJAG@Keys?5mismatch?6?$AA@
; char `string'[]
??_C@_0P@JKFBNJAG@Keys?5mismatch?6?$AA@	db 'Keys mismatch',0Ah,0
					; DATA XREF: _run_srp:loc_3A7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 544h
; COMDAT (pick any)
		public ??_C@_09DAKGFJEM@password2?$AA@
; `string'
??_C@_09DAKGFJEM@password2?$AA@	db 'password2',0 ; DATA XREF: _main+4Ao
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 550h
; COMDAT (pick any)
		public ??_C@_09BLILAKIP@password1?$AA@
; `string'
??_C@_09BLILAKIP@password1?$AA@	db 'password1',0 ; DATA XREF: _main+4Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 55Ch
; COMDAT (pick any)
		public ??_C@_05MFGCEKPN@alice?$AA@
; `string'
??_C@_05MFGCEKPN@alice?$AA@ db 'alice',0 ; DATA XREF: _main+54o _main+8Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 564h
; COMDAT (pick any)
		public ??_C@_0BL@EJOPECBK@Mismatched?5SRP?5run?5failed?6?$AA@
; char `string'[]
??_C@_0BL@EJOPECBK@Mismatched?5SRP?5run?5failed?6?$AA@ db 'Mismatched SRP run failed',0Ah,0
					; DATA XREF: _main+65o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 580h
; COMDAT (pick any)
		public ??_C@_08NLHBPEGP@password?$AA@
; `string'
??_C@_08NLHBPEGP@password?$AA@ db 'password',0 ; DATA XREF: _main:loc_D2o
					; _main+87o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58Ch
; COMDAT (pick any)
		public ??_C@_0BG@OHDBDOPH@Plain?5SRP?5run?5failed?6?$AA@
; `string'
??_C@_0BG@OHDBDOPH@Plain?5SRP?5run?5failed?6?$AA@ db 'Plain SRP run failed',0Ah,0
					; DATA XREF: _main+9Do
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+Cp
					; _main+6Cp ...
; int __cdecl _fputs(const char	*Str, FILE *File)
		extrn __imp__fputs:near	; CODE XREF: _showbn+10p _showbn+20p
					; DATA XREF: ...
; int __cdecl _putc(int	Ch, FILE *File)
		extrn __imp__putc:near	; DATA XREF: _showbn+4Er
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
		extrn _CRYPTO_mem_ctrl:near ; CODE XREF: _main+40p
		extrn _CRYPTO_cleanup_all_ex_data:near ; CODE XREF: _main:loc_F4p
		extrn _CRYPTO_set_mem_debug_functions:near ; CODE XREF:	_main+32p
		extrn _CRYPTO_dbg_malloc:near ;	DATA XREF: _main+2Bo
		extrn _CRYPTO_dbg_realloc:near ; DATA XREF: _main+26o
		extrn _CRYPTO_dbg_free:near ; DATA XREF: _main+21o
		extrn _CRYPTO_dbg_set_options:near ; CODE XREF:	_main+39p
					; DATA XREF: _main+1Co
		extrn _CRYPTO_dbg_get_options:near ; DATA XREF:	_main+17o
		extrn _CRYPTO_mem_leaks:near ; CODE XREF: _main+B6p
		extrn _BN_clear_free:near ; CODE XREF: _run_srp+2ADp
					; _run_srp+2B6p ...
		extrn _BN_bin2bn:near	; CODE XREF: _run_srp+115p
					; _run_srp+19Fp
		extrn _BN_cmp:near	; CODE XREF: _run_srp+27Bp
		extrn _BN_free:near	; CODE XREF: _run_srp+2C8p
					; _run_srp+2CEp ...
		extrn _BN_print_fp:near	; CODE XREF: _showbn+35p
		extrn _SRP_create_verifier_BN:near ; CODE XREF:	_run_srp+8Fp
		extrn _SRP_get_default_gN:near ; CODE XREF: _run_srp+41p
		extrn _SRP_Calc_server_key:near	; CODE XREF: _run_srp+25Dp
		extrn _SRP_Calc_B:near	; CODE XREF: _run_srp+136p
		extrn _SRP_Verify_A_mod_N:near ; CODE XREF: _run_srp+1CEp
		extrn _SRP_Calc_u:near	; CODE XREF: _run_srp+20Ep
		extrn _SRP_Calc_x:near	; CODE XREF: _run_srp+223p
		extrn _SRP_Calc_A:near	; CODE XREF: _run_srp+1B8p
		extrn _SRP_Calc_client_key:near	; CODE XREF: _run_srp+239p
		extrn _SRP_Verify_B_mod_N:near ; CODE XREF: _run_srp+14Fp
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _run_srp+107p
					; _run_srp+191p
		extrn _BIO_new_fp:near	; CODE XREF: _main+12p
		extrn _BIO_free:near	; CODE XREF: _main+BCp
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _main+45p
		extrn _ERR_free_strings:near ; CODE XREF: _main+B0p
		extrn _ERR_remove_thread_state:near ; CODE XREF: _main+ABp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _run_srp+74p
					; _run_srp+C0p	...
		extrn __chkstk:near	; CODE XREF: _run_srp+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _run_srp+Ar


		end
