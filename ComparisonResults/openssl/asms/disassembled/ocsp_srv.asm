;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2229F8D5EA4C335F6F42FD7B7FF0FFD0
; Input	CRC32 :	528859EA

; File Name   :	C:\compspace\Diff\openssl\obj\ocsp_srv.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_basic_add1_cert
_OCSP_basic_add1_cert proc near		; CODE XREF: _OCSP_basic_sign+79p
					; _OCSP_basic_sign+9Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_19
		call	_sk_new_null
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_19
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_19:					; CODE XREF: _OCSP_basic_add1_cert+9j
					; _OCSP_basic_add1_cert+15j
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		push	dword ptr [esi+0Ch]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short loc_31
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_31:					; CODE XREF: _OCSP_basic_add1_cert+2Cj
		push	0D6h ; 'Ö'
		push	offset ??_C@_0BJ@DBHLPEEI@?4?2crypto?2ocsp?2ocsp_srv?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_srv.c"
		push	3
		lea	eax, [edi+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_OCSP_basic_add1_cert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_basic_add1_status
_OCSP_basic_add1_status	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	esi, esi
		mov	eax, [edi]
		cmp	[eax+0Ch], esi
		jnz	short loc_78
		call	_sk_new_null
		mov	ecx, eax
		mov	eax, [edi]
		mov	[eax+0Ch], ecx
		test	ecx, ecx
		jz	$err$22

loc_78:					; CODE XREF: _OCSP_basic_add1_status+Ej
		call	_OCSP_SINGLERESP_new
		mov	esi, eax
		test	esi, esi
		jz	$err$22
		lea	ecx, [esi+8]
		push	ecx
		push	[esp+10h+arg_14]
		call	_ASN1_TIME_to_generalizedtime
		add	esp, 8
		test	eax, eax
		jz	$err$22
		mov	ecx, [esp+0Ch+arg_18]
		test	ecx, ecx
		jz	short loc_B8
		lea	eax, [esi+0Ch]
		push	eax
		push	ecx
		call	_ASN1_TIME_to_generalizedtime
		add	esp, 8
		test	eax, eax
		jz	short $err$22

loc_B8:					; CODE XREF: _OCSP_basic_add1_status+51j
		push	dword ptr [esi]
		call	_OCSP_CERTID_free
		push	[esp+10h+arg_4]
		call	_OCSP_CERTID_dup
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jz	short $err$22
		mov	edi, [esi+4]
		mov	eax, [esp+0Ch+arg_8]
		mov	[edi], eax
		sub	eax, 0
		jz	short loc_E9
		sub	eax, 1
		jz	short loc_10D
		sub	eax, 1
		jnz	short $err$22

loc_E9:					; CODE XREF: _OCSP_basic_add1_status+89j
		call	_ASN1_NULL_new
		mov	[edi+4], eax

loc_F1:					; CODE XREF: _OCSP_basic_add1_status+10Dj
					; _OCSP_basic_add1_status+129j
		mov	eax, [esp+0Ch+arg_0]
		push	esi
		mov	eax, [eax]
		push	dword ptr [eax+0Ch]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$22
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10D:				; CODE XREF: _OCSP_basic_add1_status+8Ej
		cmp	[esp+0Ch+arg_10], 0
		jnz	short loc_13B
		push	0AAh ; 'ª'
		push	offset ??_C@_0BJ@DBHLPEEI@?4?2crypto?2ocsp?2ocsp_srv?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_srv.c"
		push	6Dh ; 'm'
		push	67h ; 'g'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h

$err$22:				; CODE XREF: _OCSP_basic_add1_status+1Ej
					; _OCSP_basic_add1_status+2Dj ...
		push	esi
		call	_OCSP_SINGLERESP_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_13B:				; CODE XREF: _OCSP_basic_add1_status+BEj
		call	_OCSP_REVOKEDINFO_new
		mov	ebx, eax
		mov	[edi+4], ebx
		test	ebx, ebx
		jz	short $err$22
		push	ebx
		push	[esp+10h+arg_10]
		call	_ASN1_TIME_to_generalizedtime
		add	esp, 8
		test	eax, eax
		jz	short $err$22
		mov	edi, [esp+0Ch+arg_C]
		cmp	edi, 0FFFFFFFFh
		jz	short loc_F1
		call	_ASN1_ENUMERATED_new
		mov	[ebx+4], eax
		test	eax, eax
		jz	short $err$22
		push	edi
		push	eax
		call	_ASN1_ENUMERATED_set
		add	esp, 8
		test	eax, eax
		jz	short $err$22
		jmp	loc_F1
_OCSP_basic_add1_status	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 184h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_basic_sign
_OCSP_basic_sign proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 20h ; ' '
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+20h+var_4], eax
		mov	eax, [esp+20h+arg_8]
		mov	ecx, [esp+20h+arg_C]
		push	ebx
		mov	ebx, [esp+24h+arg_10]
		push	ebp
		mov	ebp, [esp+28h+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+30h+arg_0]
		push	eax
		push	ebp
		mov	[esp+38h+var_1C], eax
		mov	[esp+38h+var_20], ecx
		call	_X509_check_private_key
		add	esp, 8
		test	eax, eax
		jnz	short loc_1F4
		push	0E3h ; 'ã'
		push	offset ??_C@_0BJ@DBHLPEEI@?4?2crypto?2ocsp?2ocsp_srv?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_srv.c"
		push	6Eh ; 'n'
		push	68h ; 'h'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h

$err$23:				; CODE XREF: _OCSP_basic_sign+83j
					; _OCSP_basic_sign+A7j	...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+20h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1F4:				; CODE XREF: _OCSP_basic_sign+41j
		test	byte ptr [esp+30h+arg_14], 1
		jnz	short loc_23B
		push	ebp
		push	edi
		call	_OCSP_basic_add1_cert
		add	esp, 8
		test	eax, eax
		jz	short $err$23
		push	ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_23B

loc_218:				; CODE XREF: _OCSP_basic_sign+B5j
		push	esi
		push	ebx
		call	_sk_value
		push	eax
		push	edi
		call	_OCSP_basic_add1_cert
		add	esp, 10h
		test	eax, eax
		jz	short $err$23
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_218

loc_23B:				; CODE XREF: _OCSP_basic_sign+75j
					; _OCSP_basic_sign+92j
		mov	eax, [edi]
		mov	ebx, [esp+30h+arg_14]
		mov	esi, [eax+4]
		test	ebx, 400h
		jz	short loc_292
		lea	eax, [esp+30h+var_18]
		push	0
		push	eax
		call	_EVP_sha1
		push	eax
		push	ebp
		call	_X509_pubkey_digest
		add	esp, 10h
		call	_ASN1_OCTET_STRING_new
		mov	[esi+4], eax
		test	eax, eax
		jz	$err$23
		push	14h
		lea	ecx, [esp+34h+var_18]
		push	ecx
		push	eax
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jz	$err$23
		mov	dword ptr [esi], 1
		jmp	short loc_2B3
; ---------------------------------------------------------------------------

loc_292:				; CODE XREF: _OCSP_basic_sign+C6j
		push	ebp
		call	_X509_get_subject_name
		push	eax
		lea	eax, [esi+4]
		push	eax
		call	_X509_NAME_set
		add	esp, 0Ch
		test	eax, eax
		jz	$err$23
		mov	dword ptr [esi], 0

loc_2B3:				; CODE XREF: _OCSP_basic_sign+10Cj
		test	ebx, 800h
		jnz	short loc_2D2
		mov	eax, [edi]
		push	0
		push	dword ptr [eax+8]
		call	_X509_gmtime_adj
		add	esp, 8
		test	eax, eax
		jz	$err$23

loc_2D2:				; CODE XREF: _OCSP_basic_sign+135j
		push	[esp+30h+var_20]
		push	[esp+34h+var_1C]
		push	dword ptr [edi]
		push	dword ptr [edi+8]
		push	0
		push	dword ptr [edi+4]
		call	_OCSP_RESPDATA_it
		push	eax
		call	_ASN1_item_sign
		add	esp, 1Ch
		test	eax, eax
		jz	$err$23
		mov	ecx, [esp+30h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
_OCSP_basic_sign endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 314h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_id_get0_info
_OCSP_id_get0_info proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	ecx, [esp+arg_10]
		test	ecx, ecx
		jnz	short loc_31F
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_31F:				; CODE XREF: _OCSP_id_get0_info+6j
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_32D
		mov	eax, [ecx]
		mov	eax, [eax]
		mov	[edx], eax

loc_32D:				; CODE XREF: _OCSP_id_get0_info+11j
		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_33A
		mov	eax, [ecx+4]
		mov	[edx], eax

loc_33A:				; CODE XREF: _OCSP_id_get0_info+1Fj
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_347
		mov	eax, [ecx+8]
		mov	[edx], eax

loc_347:				; CODE XREF: _OCSP_id_get0_info+2Cj
		mov	edx, [esp+arg_C]
		test	edx, edx
		jz	short loc_354
		mov	eax, [ecx+0Ch]
		mov	[edx], eax

loc_354:				; CODE XREF: _OCSP_id_get0_info+39j
		mov	eax, 1
		retn
_OCSP_id_get0_info endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 35Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_onereq_get0_id
_OCSP_onereq_get0_id proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
_OCSP_onereq_get0_id endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 364h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_request_is_signed
_OCSP_request_is_signed	proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	[ecx+4], eax
		setnz	al
		retn
_OCSP_request_is_signed	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 374h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_request_onereq_count
_OCSP_request_onereq_count proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	dword ptr [eax+8]
		call	_sk_num
		add	esp, 4
		retn
_OCSP_request_onereq_count endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 388h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_request_onereq_get0
_OCSP_request_onereq_get0 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		mov	eax, [eax]
		push	dword ptr [eax+8]
		call	_sk_value
		add	esp, 8
		retn
_OCSP_request_onereq_get0 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_response_create
_OCSP_response_create proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_OCSP_RESPONSE_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_40D
		push	[esp+4+arg_0]
		push	dword ptr [esi]
		call	_ASN1_ENUMERATED_set
		add	esp, 8
		test	eax, eax
		jz	short $err$11
		cmp	[esp+4+arg_4], 0
		jnz	short loc_3C9

loc_3C5:				; CODE XREF: _OCSP_response_create+62j
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3C9:				; CODE XREF: _OCSP_response_create+23j
		call	_OCSP_RESPBYTES_new
		mov	[esi+4], eax
		test	eax, eax
		jz	short $err$11
		push	16Dh
		call	_OBJ_nid2obj
		mov	ecx, [esi+4]
		add	esp, 4
		mov	[ecx], eax
		mov	eax, [esi+4]
		add	eax, 4
		push	eax
		call	_OCSP_BASICRESP_it
		push	eax
		push	[esp+0Ch+arg_4]
		call	_ASN1_item_pack
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_3C5

$err$11:				; CODE XREF: _OCSP_response_create+1Cj
					; _OCSP_response_create+33j
		push	esi
		call	_OCSP_RESPONSE_free
		add	esp, 4

loc_40D:				; CODE XREF: _OCSP_response_create+Aj
		xor	eax, eax
		pop	esi
		retn
_OCSP_response_create endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 414h
; COMDAT (pick any)
		public ??_C@_0BJ@DBHLPEEI@?4?2crypto?2ocsp?2ocsp_srv?4c?$AA@
; `string'
??_C@_0BJ@DBHLPEEI@?4?2crypto?2ocsp?2ocsp_srv?4c?$AA@ db '.\crypto\ocsp\ocsp_srv.c',0
					; DATA XREF: _OCSP_basic_add1_cert+36o
					; _OCSP_basic_add1_status+C5o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _OCSP_basic_sign+88p
					; _OCSP_basic_sign+ABp	...
		extrn _sk_value:near	; CODE XREF: _OCSP_basic_sign+96p
					; _OCSP_request_onereq_get0+Dp
		extrn _sk_new_null:near	; CODE XREF: _OCSP_basic_add1_cert+Bp
					; _OCSP_basic_add1_status+10p
		extrn _sk_push:near	; CODE XREF: _OCSP_basic_add1_cert+22p
					; _OCSP_basic_add1_status+A7p
		extrn _CRYPTO_add_lock:near ; CODE XREF: _OCSP_basic_add1_cert+43p
		extrn _ERR_put_error:near ; CODE XREF: _OCSP_basic_add1_status+D0p
					; _OCSP_basic_sign+53p
		extrn _ASN1_ENUMERATED_new:near	; CODE XREF: _OCSP_basic_add1_status+10Fp
		extrn _ASN1_OCTET_STRING_new:near ; CODE XREF: _OCSP_basic_sign+DEp
		extrn _ASN1_OCTET_STRING_set:near ; CODE XREF: _OCSP_basic_sign+F6p
		extrn _ASN1_NULL_new:near ; CODE XREF: _OCSP_basic_add1_status:loc_E9p
		extrn _ASN1_TIME_to_generalizedtime:near
					; CODE XREF: _OCSP_basic_add1_status+3Bp
					; _OCSP_basic_add1_status+58p ...
		extrn _ASN1_ENUMERATED_set:near	; CODE XREF: _OCSP_basic_add1_status+11Dp
					; _OCSP_response_create+12p
		extrn _ASN1_item_pack:near ; CODE XREF:	_OCSP_response_create+58p
		extrn _OBJ_nid2obj:near	; CODE XREF: _OCSP_response_create+3Ap
		extrn _EVP_sha1:near	; CODE XREF: _OCSP_basic_sign+CFp
		extrn _X509_pubkey_digest:near ; CODE XREF: _OCSP_basic_sign+D6p
		extrn _X509_gmtime_adj:near ; CODE XREF: _OCSP_basic_sign+13Ep
		extrn _X509_NAME_set:near ; CODE XREF: _OCSP_basic_sign+119p
		extrn _ASN1_item_sign:near ; CODE XREF:	_OCSP_basic_sign+166p
		extrn _X509_get_subject_name:near ; CODE XREF: _OCSP_basic_sign+10Fp
		extrn _X509_check_private_key:near ; CODE XREF:	_OCSP_basic_sign+37p
		extrn _OCSP_CERTID_dup:near ; CODE XREF: _OCSP_basic_add1_status+6Fp
		extrn _OCSP_SINGLERESP_new:near	; CODE XREF: _OCSP_basic_add1_status:loc_78p
		extrn _OCSP_SINGLERESP_free:near ; CODE	XREF: _OCSP_basic_add1_status+D9p
		extrn _OCSP_REVOKEDINFO_new:near
					; CODE XREF: _OCSP_basic_add1_status:loc_13Bp
		extrn _OCSP_BASICRESP_it:near ;	CODE XREF: _OCSP_response_create+4Ep
		extrn _OCSP_RESPDATA_it:near ; CODE XREF: _OCSP_basic_sign+160p
		extrn _OCSP_RESPONSE_new:near ;	CODE XREF: _OCSP_response_create+1p
		extrn _OCSP_RESPONSE_free:near ; CODE XREF: _OCSP_response_create+65p
		extrn _OCSP_RESPBYTES_new:near ; CODE XREF: _OCSP_response_create:loc_3C9p
		extrn _OCSP_CERTID_free:near ; CODE XREF: _OCSP_basic_add1_status+66p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _OCSP_basic_sign+67p
					; _OCSP_basic_sign+185p
		extrn __chkstk:near	; CODE XREF: _OCSP_basic_sign+5p
		extrn ___security_cookie:near ;	DATA XREF: _OCSP_basic_sign+Ar


		end
