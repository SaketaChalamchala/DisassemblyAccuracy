;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	36608836105894CC4E046E6C1AD43874
; Input	CRC32 :	5E5F2FF0

; File Name   :	C:\compspace\Diff\openssl\obj\eck_prn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
; `ECPKParameters_print'::`2'::gen_compressed
?gen_compressed@?1??ECPKParameters_print@@9@9 dd offset	??_C@_0BI@DFFFIKFB@Generator?5?$CIcompressed?$CJ?3?$AA@
					; DATA XREF: _ECPKParameters_print+414r
					; "Generator (compressed):"
; `ECPKParameters_print'::`2'::gen_uncompressed
?gen_uncompressed@?1??ECPKParameters_print@@9@9	dd offset ??_C@_0BK@DOCPEENO@Generator?5?$CIuncompressed?$CJ?3?$AA@
					; DATA XREF: _ECPKParameters_print+421r
					; "Generator (uncompressed):"
; `ECPKParameters_print'::`2'::gen_hybrid
?gen_hybrid@?1??ECPKParameters_print@@9@9 dd offset ??_C@_0BE@FPCNHCIJ@Generator?5?$CIhybrid?$CJ?3?$AA@
					; DATA XREF: _ECPKParameters_print:loc_47Dr
_data		ends			; "Generator (hybrid):"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
; COMDAT (pick any)
		public ??_C@_0BI@DFFFIKFB@Generator?5?$CIcompressed?$CJ?3?$AA@
; `string'
??_C@_0BI@DFFFIKFB@Generator?5?$CIcompressed?$CJ?3?$AA@	db 'Generator (compressed):',0
					; DATA XREF: .data:`ECPKParameters_print'::`2'::gen_compressedo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
; COMDAT (pick any)
		public ??_C@_0BK@DOCPEENO@Generator?5?$CIuncompressed?$CJ?3?$AA@
; `string'
??_C@_0BK@DOCPEENO@Generator?5?$CIuncompressed?$CJ?3?$AA@ db 'Generator (uncompressed):',0
					; DATA XREF: .data:`ECPKParameters_print'::`2'::gen_uncompressedo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
; COMDAT (pick any)
		public ??_C@_0BE@FPCNHCIJ@Generator?5?$CIhybrid?$CJ?3?$AA@
; `string'
??_C@_0BE@FPCNHCIJ@Generator?5?$CIhybrid?$CJ?3?$AA@ db 'Generator (hybrid):',0
					; DATA XREF: .data:`ECPKParameters_print'::`2'::gen_hybrido
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECPKParameters_print
_ECPKParameters_print proc near		; CODE XREF: _ECPKParameters_print_fp+49p

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 30h ; '0'
		call	__chkstk
		push	ebx
		push	ebp
		xor	ebx, ebx
		xor	ebp, ebp
		push	esi
		push	edi
		mov	edi, [esp+40h+arg_4]
		xor	esi, esi
		mov	[esp+40h+var_18], ebx
		mov	[esp+40h+var_2C], ebx
		mov	[esp+40h+var_28], ebx
		mov	[esp+40h+var_24], ebx
		mov	[esp+40h+var_20], ebx
		mov	[esp+40h+var_1C], ebx
		mov	[esp+40h+var_10], ebx
		test	edi, edi
		jnz	short loc_94
		lea	eax, [ebx+43h]
		jmp	loc_569
; ---------------------------------------------------------------------------

loc_94:					; CODE XREF: _ECPKParameters_print+36j
		call	_BN_CTX_new
		mov	esi, eax
		mov	[esp+40h+arg_4], esi
		test	esi, esi
		jnz	short loc_AB
		lea	eax, [esi+41h]
		jmp	loc_569
; ---------------------------------------------------------------------------

loc_AB:					; CODE XREF: _ECPKParameters_print+4Dj
		push	edi
		call	_EC_GROUP_get_asn1_flag
		add	esp, 4
		test	eax, eax
		jz	loc_180
		push	80h ; '€'
		push	[esp+44h+arg_8]
		push	[esp+48h+arg_0]
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_564
		push	edi
		call	_EC_GROUP_get_curve_name
		add	esp, 4
		mov	[esp+40h+arg_4], eax
		test	eax, eax
		jz	loc_55B
		push	eax
		call	_OBJ_nid2sn
		mov	edi, [esp+44h+arg_0]
		push	eax
		push	offset ??_C@_0N@JOFLCJFF@ASN1?5OID?3?5?$CFs?$AA@ ; "ASN1 OID: %s"
		push	edi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_564
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_printf
		add	esp, 8
		test	eax, eax
		jle	loc_564
		push	[esp+40h+arg_4]
		call	_EC_curve_nid2nist
		add	esp, 4
		mov	[esp+40h+arg_4], eax
		test	eax, eax
		jz	loc_50B
		push	80h ; '€'
		push	[esp+44h+arg_8]
		push	edi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_564
		push	[esp+40h+arg_4]
		push	offset ??_C@_0BA@LNIECBHN@NIST?5CURVE?3?5?$CFs?6?$AA@ ;	"NIST CURVE: %s\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		xor	edi, edi
		test	eax, eax
		jle	loc_55D
		mov	[esp+40h+var_18], 1
		jmp	loc_585
; ---------------------------------------------------------------------------

loc_180:				; CODE XREF: _ECPKParameters_print+62j
		push	edi
		xor	ebp, ebp
		call	_EC_GROUP_method_of
		push	eax
		call	_EC_METHOD_get_field_type
		add	esp, 8
		mov	[esp+40h+var_8], eax
		cmp	eax, 197h
		mov	ecx, 1
		cmovz	ebp, ecx
		mov	[esp+40h+var_14], ebp
		call	_BN_new
		mov	ebp, eax
		mov	[esp+40h+var_30], ebp
		test	ebp, ebp
		jz	loc_51B
		call	_BN_new
		mov	esi, eax
		mov	[esp+40h+var_2C], esi
		test	esi, esi
		jz	loc_517
		call	_BN_new
		mov	[esp+40h+var_28], eax
		test	eax, eax
		jz	loc_517
		call	_BN_new
		mov	[esp+40h+var_20], eax
		test	eax, eax
		jz	loc_517
		call	_BN_new
		mov	[esp+40h+var_1C], eax
		test	eax, eax
		jz	loc_517
		push	[esp+40h+arg_4]
		push	[esp+44h+var_28]
		push	esi
		push	ebp
		push	edi
		cmp	[esp+54h+var_14], ebx
		jz	short loc_22C
		call	_EC_GROUP_get_curve_GF2m

loc_215:				; CODE XREF: _ECPKParameters_print+1DDj
		add	esp, 14h
		test	eax, eax
		jnz	short loc_233

loc_21C:				; CODE XREF: _ECPKParameters_print+1EEj
					; _ECPKParameters_print+201j ...
		mov	edi, esi
		mov	eax, 10h
		mov	esi, [esp+40h+arg_4]
		jmp	loc_56B
; ---------------------------------------------------------------------------

loc_22C:				; CODE XREF: _ECPKParameters_print+1BAj
		call	_EC_GROUP_get_curve_GFp
		jmp	short loc_215
; ---------------------------------------------------------------------------

loc_233:				; CODE XREF: _ECPKParameters_print+1C6j
		push	edi
		call	_EC_GROUP_get0_generator
		add	esp, 4
		mov	[esp+40h+var_C], eax
		test	eax, eax
		jz	short loc_21C
		push	0
		push	[esp+44h+var_20]
		push	edi
		call	_EC_GROUP_get_order
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_21C
		push	0
		push	[esp+44h+var_1C]
		push	edi
		call	_EC_GROUP_get_cofactor
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_21C
		push	edi
		call	_EC_GROUP_get_point_conversion_form
		push	[esp+44h+arg_4]
		mov	[esp+48h+var_4], eax
		push	0
		push	eax
		push	[esp+50h+var_C]
		push	edi
		call	_EC_POINT_point2bn
		add	esp, 18h
		mov	[esp+40h+var_24], eax
		test	eax, eax
		jz	short loc_21C
		push	ebp
		call	_BN_num_bits
		add	eax, 7
		cdq
		and	edx, 7
		push	esi
		lea	ebx, [edx+eax]
		sar	ebx, 3
		call	_BN_num_bits
		push	[esp+48h+var_28]
		add	eax, 7
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ebx, eax
		cmovb	ebx, eax
		call	_BN_num_bits
		push	[esp+4Ch+var_24]
		add	eax, 7
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ebx, eax
		cmovb	ebx, eax
		call	_BN_num_bits
		push	[esp+50h+var_20]
		add	eax, 7
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ebx, eax
		cmovb	ebx, eax
		call	_BN_num_bits
		push	[esp+54h+var_1C]
		add	eax, 7
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ebx, eax
		cmovb	ebx, eax
		call	_BN_num_bits
		add	eax, 7
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ebx, eax
		push	edi
		cmovb	ebx, eax
		call	_EC_GROUP_get0_seed
		add	esp, 1Ch
		mov	[esp+40h+var_C], eax
		test	eax, eax
		jz	short loc_340
		push	edi
		call	_EC_GROUP_get_seed_len
		add	esp, 4
		mov	[esp+40h+var_10], eax

loc_340:				; CODE XREF: _ECPKParameters_print+2DDj
		push	101h
		lea	eax, [ebx+0Ah]
		push	offset ??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@ ; ".\\crypto\\ec\\eck_prn.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_36A
		mov	edi, esi
		lea	eax, [ebx+41h]
		mov	esi, [esp+40h+arg_4]
		jmp	loc_56B
; ---------------------------------------------------------------------------

loc_36A:				; CODE XREF: _ECPKParameters_print+306j
		mov	ebp, [esp+40h+arg_8]
		mov	esi, [esp+40h+arg_0]
		push	80h ; '€'
		push	ebp
		push	esi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_548
		push	[esp+40h+var_8]
		call	_OBJ_nid2sn
		push	eax
		push	offset ??_C@_0BA@KNKNOIFH@Field?5Type?3?5?$CFs?6?$AA@ ;	"Field Type: %s\n"
		push	esi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_535
		cmp	[esp+40h+var_14], 0
		jz	short loc_404
		push	edi
		call	_EC_GROUP_get_basis_type
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_535
		push	80h ; '€'
		push	ebp
		push	esi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_535
		push	edi
		call	_OBJ_nid2sn
		push	eax
		push	offset ??_C@_0BA@ENMKKION@Basis?5Type?3?5?$CFs?6?$AA@ ;	"Basis Type: %s\n"
		push	esi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_535
		push	ebp
		push	ebx
		push	[esp+48h+var_30]
		push	offset ??_C@_0M@JDIPGLHE@Polynomial?3?$AA@ ; "Polynomial:"
		jmp	short loc_40F
; ---------------------------------------------------------------------------

loc_404:				; CODE XREF: _ECPKParameters_print+35Aj
		push	ebp
		push	ebx
		push	[esp+48h+var_30]
		push	offset ??_C@_06DBHHIIKM@Prime?3?$AA@ ; "Prime:"

loc_40F:				; CODE XREF: _ECPKParameters_print+3AEj
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_535
		mov	edi, [esp+40h+var_2C]
		push	ebp
		push	ebx
		push	edi
		push	offset ??_C@_05GMFDOKMO@A?3?5?5?5?$AA@ ; "A:   "
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_526
		push	ebp
		push	ebx
		push	[esp+48h+var_28]
		push	offset ??_C@_05OKMHJIGA@B?3?5?5?5?$AA@ ; "B:   "
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_526
		mov	eax, [esp+40h+var_4]
		push	ebp
		push	ebx
		push	[esp+48h+var_24]
		cmp	eax, 2
		jnz	short loc_470
		push	?gen_compressed@?1??ECPKParameters_print@@9@9 ;	`ECPKParameters_print'::`2'::gen_compressed
		jmp	short loc_483
; ---------------------------------------------------------------------------

loc_470:				; CODE XREF: _ECPKParameters_print+412j
		cmp	eax, 4
		jnz	short loc_47D
		push	?gen_uncompressed@?1??ECPKParameters_print@@9@9	; `ECPKParameters_print'::`2'::gen_uncompressed
		jmp	short loc_483
; ---------------------------------------------------------------------------

loc_47D:				; CODE XREF: _ECPKParameters_print+41Fj
		push	?gen_hybrid@?1??ECPKParameters_print@@9@9 ; `ECPKParameters_print'::`2'::gen_hybrid

loc_483:				; CODE XREF: _ECPKParameters_print+41Aj
					; _ECPKParameters_print+427j
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_526
		push	ebp
		push	ebx
		push	[esp+48h+var_20]
		push	offset ??_C@_07KOGOKIFH@Order?3?5?$AA@ ; "Order: "
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_526
		push	ebp
		push	ebx
		push	[esp+48h+var_1C]
		push	offset ??_C@_0L@IEMHODML@Cofactor?3?5?$AA@ ; "Cofactor:	"
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_526
		mov	eax, [esp+40h+var_C]
		test	eax, eax
		jz	short loc_4F9
		push	ebp
		push	[esp+44h+var_10]
		push	eax
		push	offset ??_C@_05PDHKGGIM@Seed?3?$AA@ ; "Seed:"
		push	esi
		call	_print_bin
		mov	ebp, [esp+54h+var_30]
		add	esp, 14h
		mov	esi, [esp+40h+arg_4]
		test	eax, eax
		jz	short loc_55D
		mov	[esp+40h+var_18], 1
		jmp	loc_585
; ---------------------------------------------------------------------------

loc_4F9:				; CODE XREF: _ECPKParameters_print+476j
		mov	ebp, [esp+40h+var_30]
		mov	esi, [esp+40h+arg_4]
		mov	[esp+40h+var_18], 1
		jmp	short loc_585
; ---------------------------------------------------------------------------

loc_50B:				; CODE XREF: _ECPKParameters_print+E3j
		xor	edi, edi
		mov	[esp+40h+var_18], 1
		jmp	short loc_585
; ---------------------------------------------------------------------------

loc_517:				; CODE XREF: _ECPKParameters_print+172j
					; _ECPKParameters_print+183j ...
		mov	esi, [esp+40h+arg_4]

loc_51B:				; CODE XREF: _ECPKParameters_print+15Fj
		mov	edi, [esp+40h+var_2C]
		mov	eax, 41h ; 'A'
		jmp	short loc_56B
; ---------------------------------------------------------------------------

loc_526:				; CODE XREF: _ECPKParameters_print+3E3j
					; _ECPKParameters_print+3FFj ...
		mov	ebp, [esp+40h+var_30]
		mov	eax, 20h ; ' '
		mov	esi, [esp+40h+arg_4]
		jmp	short loc_56B
; ---------------------------------------------------------------------------

loc_535:				; CODE XREF: _ECPKParameters_print+34Fj
					; _ECPKParameters_print+369j ...
		mov	ebp, [esp+40h+var_30]
		mov	eax, 20h ; ' '
		mov	edi, [esp+40h+var_2C]
		mov	esi, [esp+40h+arg_4]
		jmp	short loc_56B
; ---------------------------------------------------------------------------

loc_548:				; CODE XREF: _ECPKParameters_print+32Fj
		mov	ebp, [esp+40h+var_30]
		mov	eax, 20h ; ' '
		mov	edi, [esp+40h+var_2C]
		mov	esi, [esp+40h+arg_4]
		jmp	short loc_56B
; ---------------------------------------------------------------------------

loc_55B:				; CODE XREF: _ECPKParameters_print+94j
		xor	edi, edi

loc_55D:				; CODE XREF: _ECPKParameters_print+119j
					; _ECPKParameters_print+496j
		mov	eax, 20h ; ' '
		jmp	short loc_56B
; ---------------------------------------------------------------------------

loc_564:				; CODE XREF: _ECPKParameters_print+7Fj
					; _ECPKParameters_print+B5j ...
		mov	eax, 20h ; ' '

loc_569:				; CODE XREF: _ECPKParameters_print+3Bj
					; _ECPKParameters_print+52j
		xor	edi, edi

loc_56B:				; CODE XREF: _ECPKParameters_print+1D3j
					; _ECPKParameters_print+311j ...
		push	141h
		push	offset ??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@ ; ".\\crypto\\ec\\eck_prn.c"
		push	eax
		push	95h ; '•'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_585:				; CODE XREF: _ECPKParameters_print+127j
					; _ECPKParameters_print+4A0j ...
		test	ebp, ebp
		jz	short loc_592
		push	ebp
		call	_BN_free
		add	esp, 4

loc_592:				; CODE XREF: _ECPKParameters_print+533j
		test	edi, edi
		jz	short loc_59F
		push	edi
		call	_BN_free
		add	esp, 4

loc_59F:				; CODE XREF: _ECPKParameters_print+540j
		mov	eax, [esp+40h+var_28]
		test	eax, eax
		jz	short loc_5B0
		push	eax
		call	_BN_free
		add	esp, 4

loc_5B0:				; CODE XREF: _ECPKParameters_print+551j
		mov	eax, [esp+40h+var_24]
		test	eax, eax
		jz	short loc_5C1
		push	eax
		call	_BN_free
		add	esp, 4

loc_5C1:				; CODE XREF: _ECPKParameters_print+562j
		mov	eax, [esp+40h+var_20]
		test	eax, eax
		jz	short loc_5D2
		push	eax
		call	_BN_free
		add	esp, 4

loc_5D2:				; CODE XREF: _ECPKParameters_print+573j
		mov	eax, [esp+40h+var_1C]
		test	eax, eax
		jz	short loc_5E3
		push	eax
		call	_BN_free
		add	esp, 4

loc_5E3:				; CODE XREF: _ECPKParameters_print+584j
		test	esi, esi
		jz	short loc_5F0
		push	esi
		call	_BN_CTX_free
		add	esp, 4

loc_5F0:				; CODE XREF: _ECPKParameters_print+591j
		test	ebx, ebx
		jz	short loc_5FD
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_5FD:				; CODE XREF: _ECPKParameters_print+59Ej
		mov	eax, [esp+40h+var_18]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 30h
		retn
_ECPKParameters_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECPKParameters_print_fp
_ECPKParameters_print_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_63D
		push	4Dh ; 'M'
		push	offset ??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@ ; ".\\crypto\\ec\\eck_prn.c"
		push	7
		push	96h ; '–'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_63D:				; CODE XREF: _ECPKParameters_print_fp+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	edi
		call	_ECPKParameters_print
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 20h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_ECPKParameters_print_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 66Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECParameters_print
_ECParameters_print proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_6A8
		push	[esp+4+arg_4]
		push	edi
		call	_EVP_PKEY_set1_EC_KEY
		add	esp, 8
		test	eax, eax
		jz	short loc_6A8
		push	esi
		push	0
		push	4
		push	edi
		push	[esp+14h+arg_0]
		call	_EVP_PKEY_print_params
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6A8:				; CODE XREF: _ECParameters_print+Aj
					; _ECParameters_print+1Bj
		xor	eax, eax
		pop	edi
		retn
_ECParameters_print endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECParameters_print_fp
_ECParameters_print_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_6DD
		push	6Bh ; 'k'
		push	offset ??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@ ; ".\\crypto\\ec\\eck_prn.c"
		push	20h ; ' '
		push	94h ; '”'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6DD:				; CODE XREF: _ECParameters_print_fp+13j
		push	ebx
		push	edi
		push	[esp+0Ch+arg_0]
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_731
		push	[esp+0Ch+arg_4]
		push	edi
		call	_EVP_PKEY_set1_EC_KEY
		add	esp, 8
		test	eax, eax
		jz	short loc_731
		push	0
		push	4
		push	edi
		push	esi
		call	_EVP_PKEY_print_params
		push	edi
		mov	ebx, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_731:				; CODE XREF: _ECParameters_print_fp+4Dj
					; _ECParameters_print_fp+5Ej
		push	esi
		xor	ebx, ebx
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
_ECParameters_print_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 744h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_KEY_print
_EC_KEY_print	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_782
		push	[esp+4+arg_4]
		push	edi
		call	_EVP_PKEY_set1_EC_KEY
		add	esp, 8
		test	eax, eax
		jz	short loc_782
		push	esi
		push	0
		push	[esp+0Ch+arg_8]
		push	edi
		push	[esp+14h+arg_0]
		call	_EVP_PKEY_print_private
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_782:				; CODE XREF: _EC_KEY_print+Aj
					; _EC_KEY_print+1Bj
		xor	eax, eax
		pop	edi
		retn
_EC_KEY_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 788h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_KEY_print_fp
_EC_KEY_print_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_7B9
		push	5Ch ; '\'
		push	offset ??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@ ; ".\\crypto\\ec\\eck_prn.c"
		push	20h ; ' '
		push	0B5h ; 'µ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7B9:				; CODE XREF: _EC_KEY_print_fp+13j
		push	ebx
		push	edi
		push	[esp+0Ch+arg_0]
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_80F
		push	[esp+0Ch+arg_4]
		push	edi
		call	_EVP_PKEY_set1_EC_KEY
		add	esp, 8
		test	eax, eax
		jz	short loc_80F
		push	0
		push	[esp+10h+arg_8]
		push	edi
		push	esi
		call	_EVP_PKEY_print_private
		push	edi
		mov	ebx, eax
		call	_EVP_PKEY_free
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_80F:				; CODE XREF: _EC_KEY_print_fp+4Dj
					; _EC_KEY_print_fp+5Ej
		push	esi
		xor	ebx, ebx
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		retn
_EC_KEY_print_fp endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 820h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_print_bin	proc near		; CODE XREF: _ECPKParameters_print+484p

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
Dst		= byte ptr -84h
var_83		= byte ptr -83h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8Ch ; 'Œ'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+8Ch+var_4], eax
		mov	eax, [esp+8Ch+arg_8]
		mov	[esp+8Ch+var_8C], eax
		push	ebx
		mov	ebx, [esp+90h+arg_0]
		push	ebp
		mov	ebp, [esp+94h+arg_C]
		push	esi
		mov	esi, [esp+98h+arg_4]
		test	eax, eax
		jnz	short loc_87B
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+8Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------

loc_87B:				; CODE XREF: _print_bin+3Cj
		push	edi
		mov	edi, [esp+9Ch+arg_10]
		test	edi, edi
		jle	short loc_8B8
		mov	eax, 80h ; '€'
		cmp	edi, eax
		cmovg	edi, eax
		lea	eax, [esp+9Ch+Dst]
		push	edi		; Size
		push	20h ; ' '       ; Val
		push	eax		; Dst
		call	_memset
		push	edi
		lea	eax, [esp+0ACh+Dst]
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 18h
		test	eax, eax
		jg	short loc_8BA

loc_8B1:				; CODE XREF: _print_bin+ABj
					; _print_bin+104j ...
		xor	eax, eax
		jmp	loc_97A
; ---------------------------------------------------------------------------

loc_8B8:				; CODE XREF: _print_bin+65j
		xor	edi, edi

loc_8BA:				; CODE XREF: _print_bin+8Fj
		push	esi
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; `string'
		push	ebx
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_8B1
		xor	esi, esi
		test	ebp, ebp
		jz	loc_961
		mov	eax, 1
		sub	eax, [esp+9Ch+var_8C]
		mov	[esp+9Ch+var_88], eax

loc_8E4:				; CODE XREF: _print_bin+13Fj
		mov	eax, 88888889h
		mul	esi
		mov	eax, esi
		shr	edx, 3
		mov	ecx, edx
		shl	ecx, 4
		sub	ecx, edx
		sub	eax, ecx
		jnz	short loc_926
		lea	eax, [edi+4]
		mov	[esp+9Ch+Dst], 0Ah
		push	eax		; Size
		lea	eax, [esp+0A0h+var_83]
		push	20h ; ' '       ; Val
		push	eax		; Dst
		call	_memset
		lea	eax, [edi+5]
		push	eax
		lea	eax, [esp+0ACh+Dst]
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 18h
		test	eax, eax
		jle	short loc_8B1

loc_926:				; CODE XREF: _print_bin+D9j
		mov	edx, [esp+9Ch+var_8C]
		mov	ecx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		mov	eax, [esp+9Ch+var_88]
		add	edx, esi
		add	eax, edx
		cmp	eax, ebp
		mov	eax, offset ??_C@_01JLIPDDHJ@?3?$AA@ ; `string'
		cmovnz	ecx, eax
		movzx	eax, byte ptr [edx]
		push	ecx
		push	eax
		push	offset ??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@ ; "%02x%s"
		push	ebx
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_8B1
		inc	esi
		cmp	esi, ebp
		jb	short loc_8E4

loc_961:				; CODE XREF: _print_bin+B1j
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	ebx
		call	_BIO_write
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		setnle	cl
		mov	eax, ecx

loc_97A:				; CODE XREF: _print_bin+93j
		mov	ecx, [esp+9Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 8Ch
		retn
_print_bin	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 994h
; COMDAT (pick any)
		public ??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@
; `string'
??_C@_0BG@EOKACLHK@?4?2crypto?2ec?2eck_prn?4c?$AA@ db '.\crypto\ec\eck_prn.c',0
					; DATA XREF: _ECPKParameters_print+2F4o
					; _ECPKParameters_print+51Co ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9ACh
; COMDAT (pick any)
		public ??_C@_0N@JOFLCJFF@ASN1?5OID?3?5?$CFs?$AA@
; `string'
??_C@_0N@JOFLCJFF@ASN1?5OID?3?5?$CFs?$AA@ db 'ASN1 OID: %s',0
					; DATA XREF: _ECPKParameters_print+A5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9BCh
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _ECPKParameters_print+BBo
					; _print_bin+143o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9C0h
; COMDAT (pick any)
		public ??_C@_0BA@LNIECBHN@NIST?5CURVE?3?5?$CFs?6?$AA@
; `string'
??_C@_0BA@LNIECBHN@NIST?5CURVE?3?5?$CFs?6?$AA@ db 'NIST CURVE: %s',0Ah,0
					; DATA XREF: _ECPKParameters_print+107o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9D0h
; COMDAT (pick any)
		public ??_C@_0BA@KNKNOIFH@Field?5Type?3?5?$CFs?6?$AA@
; `string'
??_C@_0BA@KNKNOIFH@Field?5Type?3?5?$CFs?6?$AA@ db 'Field Type: %s',0Ah,0
					; DATA XREF: _ECPKParameters_print+33Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E0h
; COMDAT (pick any)
		public ??_C@_0BA@ENMKKION@Basis?5Type?3?5?$CFs?6?$AA@
; `string'
??_C@_0BA@ENMKKION@Basis?5Type?3?5?$CFs?6?$AA@ db 'Basis Type: %s',0Ah,0
					; DATA XREF: _ECPKParameters_print+38Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F0h
; COMDAT (pick any)
		public ??_C@_0M@JDIPGLHE@Polynomial?3?$AA@
; `string'
??_C@_0M@JDIPGLHE@Polynomial?3?$AA@ db 'Polynomial:',0
					; DATA XREF: _ECPKParameters_print+3A9o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9FCh
; COMDAT (pick any)
		public ??_C@_06DBHHIIKM@Prime?3?$AA@
; `string'
??_C@_06DBHHIIKM@Prime?3?$AA@ db 'Prime:',0 ; DATA XREF: _ECPKParameters_print+3B6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A04h
; COMDAT (pick any)
		public ??_C@_05GMFDOKMO@A?3?5?5?5?$AA@
; `string'
??_C@_05GMFDOKMO@A?3?5?5?5?$AA@	db 'A:   ',0 ; DATA XREF: _ECPKParameters_print+3D3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0Ch
; COMDAT (pick any)
		public ??_C@_05OKMHJIGA@B?3?5?5?5?$AA@
; `string'
??_C@_05OKMHJIGA@B?3?5?5?5?$AA@	db 'B:   ',0 ; DATA XREF: _ECPKParameters_print+3EFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A14h
; COMDAT (pick any)
		public ??_C@_07KOGOKIFH@Order?3?5?$AA@
; `string'
??_C@_07KOGOKIFH@Order?3?5?$AA@	db 'Order: ',0 ; DATA XREF: _ECPKParameters_print+446o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A1Ch
; COMDAT (pick any)
		public ??_C@_0L@IEMHODML@Cofactor?3?5?$AA@
; `string'
??_C@_0L@IEMHODML@Cofactor?3?5?$AA@ db 'Cofactor: ',0
					; DATA XREF: _ECPKParameters_print+45Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A28h
; COMDAT (pick any)
		public ??_C@_05PDHKGGIM@Seed?3?$AA@
; `string'
??_C@_05PDHKGGIM@Seed?3?$AA@ db	'Seed:',0 ; DATA XREF: _ECPKParameters_print+47Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A30h
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; `string'
??_C@_02DKCKIIND@?$CFs?$AA@ db 25h, 73h, 0 ; DATA XREF:	_print_bin+9Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0A34h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _print_bin+10Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A38h
; COMDAT (pick any)
		public ??_C@_01JLIPDDHJ@?3?$AA@
; `string'
??_C@_01JLIPDDHJ@?3?$AA@ db 3Ah, 0	; DATA XREF: _print_bin+119o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A3Ch
; COMDAT (pick any)
		public ??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@
; `string'
??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@ db '%02x%s',0 ; DATA XREF: _print_bin+126o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ECPKParameters_print+2FAp
		extrn _CRYPTO_free:near	; CODE XREF: _ECPKParameters_print+5A1p
		extrn _BIO_s_file:near	; CODE XREF: _ECPKParameters_print_fp+1p
					; _ECParameters_print_fp+1p ...
		extrn _BIO_new:near	; CODE XREF: _ECPKParameters_print_fp+7p
					; _ECParameters_print_fp+7p ...
		extrn _BIO_free:near	; CODE XREF: _ECPKParameters_print_fp+51p
					; _ECParameters_print_fp+77p ...
		extrn _BIO_write:near	; CODE XREF: _print_bin+85p
					; _print_bin+FAp ...
		extrn _BIO_indent:near	; CODE XREF: _ECPKParameters_print+75p
					; _ECPKParameters_print+F3p ...
		extrn _BIO_ctrl:near	; CODE XREF: _ECPKParameters_print_fp+3Bp
					; _ECParameters_print_fp+3Cp ...
		extrn _BIO_printf:near	; CODE XREF: _ECPKParameters_print+ABp
					; _ECPKParameters_print+C1p ...
		extrn _ERR_put_error:near ; CODE XREF: _ECPKParameters_print+529p
					; _ECPKParameters_print_fp+25p	...
		extrn _BN_CTX_new:near	; CODE XREF: _ECPKParameters_print:loc_94p
		extrn _BN_CTX_free:near	; CODE XREF: _ECPKParameters_print+594p
		extrn _BN_num_bits:near	; CODE XREF: _ECPKParameters_print+23Dp
					; _ECPKParameters_print+250p ...
		extrn _BN_new:near	; CODE XREF: _ECPKParameters_print+152p
					; _ECPKParameters_print+165p ...
		extrn _BN_free:near	; CODE XREF: _ECPKParameters_print+536p
					; _ECPKParameters_print+543p ...
		extrn _ASN1_bn_print:near ; CODE XREF: _ECPKParameters_print+3BCp
					; _ECPKParameters_print+3D9p ...
		extrn _OBJ_nid2sn:near	; CODE XREF: _ECPKParameters_print+9Bp
					; _ECPKParameters_print+339p ...
		extrn _EVP_PKEY_set1_EC_KEY:near ; CODE	XREF: _ECParameters_print+11p
					; _ECParameters_print_fp+54p ...
		extrn _EVP_PKEY_new:near ; CODE	XREF: _ECParameters_print+1p
					; _ECParameters_print_fp+44p ...
		extrn _EVP_PKEY_free:near ; CODE XREF: _ECParameters_print+2Fp
					; _ECParameters_print_fp+6Ep ...
		extrn _EVP_PKEY_print_private:near ; CODE XREF:	_EC_KEY_print+29p
					; _EC_KEY_print_fp+68p
		extrn _EVP_PKEY_print_params:near ; CODE XREF: _ECParameters_print+27p
					; _ECParameters_print_fp+66p
		extrn _EC_GROUP_method_of:near ; CODE XREF: _ECPKParameters_print+12Fp
		extrn _EC_METHOD_get_field_type:near ; CODE XREF: _ECPKParameters_print+135p
		extrn _EC_GROUP_get0_generator:near ; CODE XREF: _ECPKParameters_print+1E0p
		extrn _EC_GROUP_get_order:near ; CODE XREF: _ECPKParameters_print+1F7p
		extrn _EC_GROUP_get_cofactor:near ; CODE XREF: _ECPKParameters_print+20Ap
		extrn _EC_GROUP_get_curve_name:near ; CODE XREF: _ECPKParameters_print+86p
		extrn _EC_GROUP_get_asn1_flag:near ; CODE XREF:	_ECPKParameters_print+58p
		extrn _EC_GROUP_get_point_conversion_form:near
					; CODE XREF: _ECPKParameters_print+217p
		extrn _EC_GROUP_get0_seed:near ; CODE XREF: _ECPKParameters_print+2CFp
		extrn _EC_GROUP_get_seed_len:near ; CODE XREF: _ECPKParameters_print+2E0p
		extrn _EC_GROUP_get_curve_GFp:near
					; CODE XREF: _ECPKParameters_print:loc_22Cp
		extrn _EC_GROUP_get_curve_GF2m:near ; CODE XREF: _ECPKParameters_print+1BCp
		extrn _EC_curve_nid2nist:near ;	CODE XREF: _ECPKParameters_print+D5p
		extrn _EC_POINT_point2bn:near ;	CODE XREF: _ECPKParameters_print+22Cp
		extrn _EC_GROUP_get_basis_type:near ; CODE XREF: _ECPKParameters_print+35Dp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _print_bin+4Fp
					; _print_bin+167p
		extrn __chkstk:near	; CODE XREF: _ECPKParameters_print+5p
					; _print_bin+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _print_bin+79p
					; _print_bin+EBp
		extrn ___security_cookie:near ;	DATA XREF: _print_bin+Ar


		end
