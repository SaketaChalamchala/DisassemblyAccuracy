;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BB9BD0EE7836B3CAE329C70C6B640BC7
; Input	CRC32 :	EA69E935

; File Name   :	C:\compspace\Diff\openssl\obj\bn_nist.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
__nist_p_192	dd 2 dup(0FFFFFFFFh), 0FFFFFFFEh, 3 dup(0FFFFFFFFh), 0FFFFFFFEh
					; DATA XREF: .rdata:__bignum_nist_p_192o
					; _BN_nist_mod_192+1F6o
		dd 0FFFFFFFFh, 0FFFFFFFDh, 3 dup(0FFFFFFFFh), 0FFFFFFFDh
		dd 0FFFFFFFFh, 0FFFFFFFCh, 3 dup(0FFFFFFFFh)
__nist_p_192_sqr dd 1, 0		; DATA XREF: .rdata:`BN_nist_mod_192'::`2'::_bignum_nist_p_192_sqro
		dd 2, 0
		dd 1
dword_5C	dd 0			; DATA XREF: _BN_nist_mod_224+212o
		dd 0FFFFFFFEh, 0FFFFFFFFh, 0FFFFFFFDh, 3 dup(0FFFFFFFFh)
__nist_p_224	dd 1, 2	dup(0)		; DATA XREF: .rdata:__bignum_nist_p_224o
					; _BN_nist_mod_224+236o ...
		dd 4 dup(0FFFFFFFFh), 2, 2 dup(0)
		dd 0FFFFFFFEh, 3 dup(0FFFFFFFFh)
__nist_p_224_sqr dd 1, 2 dup(0)		; DATA XREF: .rdata:`BN_nist_mod_224'::`2'::_bignum_nist_p_224_sqro
		dd 0FFFFFFFEh, 2 dup(0FFFFFFFFh)
dword_C8	dd 0			; DATA XREF: _BN_nist_mod_256+303o
		dd 2, 2	dup(0)
		dd 0FFFFFFFEh, 3 dup(0FFFFFFFFh)
__nist_p_256	dd 3 dup(0FFFFFFFFh), 3	dup(0) ; DATA XREF: .rdata:__bignum_nist_p_256o
					; _BN_nist_mod_256+31Bo ...
		dd 1, 0FFFFFFFFh, 0FFFFFFFEh, 2	dup(0FFFFFFFFh), 1, 2 dup(0)
		dd 2, 0FFFFFFFEh, 0FFFFFFFDh, 2	dup(0FFFFFFFFh), 2, 2 dup(0)
		dd 3, 0FFFFFFFDh, 0FFFFFFFCh, 2	dup(0FFFFFFFFh), 3, 2 dup(0)
		dd 4, 0FFFFFFFCh, 0FFFFFFFBh, 2	dup(0FFFFFFFFh), 4, 2 dup(0)
		dd 5, 0FFFFFFFBh
__nist_p_256_sqr dd 1, 2 dup(0)		; DATA XREF: .rdata:`BN_nist_mod_256'::`2'::_bignum_nist_p_256_sqro
		dd 0FFFFFFFEh
dword_198	dd 2 dup(0FFFFFFFFh), 0FFFFFFFEh, 1, 0FFFFFFFEh, 1, 0FFFFFFFEh
					; DATA XREF: _BN_nist_mod_384+38Bo
		dd 2 dup(1), 0FFFFFFFEh, 2, 0FFFFFFFEh
__nist_p_384	dd 0FFFFFFFFh, 2 dup(0)	; DATA XREF: .rdata:__bignum_nist_p_384o
					; _BN_nist_mod_384+3A5o ...
		dd 0FFFFFFFFh, 0FFFFFFFEh, 7 dup(0FFFFFFFFh), 0FFFFFFFEh
		dd 1, 0
		dd 0FFFFFFFEh, 0FFFFFFFDh, 7 dup(0FFFFFFFFh), 0FFFFFFFDh
		dd 2, 0
		dd 0FFFFFFFDh, 0FFFFFFFCh, 7 dup(0FFFFFFFFh), 0FFFFFFFCh
		dd 3, 0
		dd 0FFFFFFFCh, 0FFFFFFFBh, 7 dup(0FFFFFFFFh), 0FFFFFFFBh
		dd 4, 0
		dd 0FFFFFFFBh, 0FFFFFFFAh, 7 dup(0FFFFFFFFh)
__nist_p_384_sqr dd 1, 0FFFFFFFEh, 0	; DATA XREF: .rdata:`BN_nist_mod_384'::`2'::_bignum_nist_p_384_sqro
		dd 2, 0
		dd 0FFFFFFFEh, 0
		dd 2, 1, 3 dup(0)
		dd 0FFFFFFFEh, 1, 0
		dd 0FFFFFFFEh, 0FFFFFFFDh, 7 dup(0FFFFFFFFh)
__nist_p_521	dd 10h dup(0FFFFFFFFh),	1FFh ; DATA XREF: .rdata:__bignum_nist_p_521o
					; _BN_nist_mod_521+15Bo
__bignum_nist_p_192 dd offset __nist_p_192 ; DATA XREF:	_BN_get0_nist_prime_192o
					; _BN_nist_mod_192+53o	...
		dd 2 dup(6), 0
		dd 2
__nist_p_521_sqr dd 1, 0Fh dup(0)	; DATA XREF: .rdata:`BN_nist_mod_521'::`2'::_bignum_nist_p_521_sqro
		dd 0FFFFFC00h, 0Fh dup(0FFFFFFFFh), 3FFFFh
__bignum_nist_p_224 dd offset __nist_p_224 ; DATA XREF:	_BN_get0_nist_prime_224o
					; _BN_nist_mod_224+53o	...
		dd 2 dup(7), 0
		dd 2
__bignum_nist_p_256 dd offset __nist_p_256 ; DATA XREF:	_BN_get0_nist_prime_256o
					; _BN_nist_mod_256+53o	...
		dd 2 dup(8), 0
		dd 2
__bignum_nist_p_384 dd offset __nist_p_384 ; DATA XREF:	_BN_get0_nist_prime_384o
					; _BN_nist_mod_384+59o	...
		dd 2 dup(0Ch), 0
		dd 2
__bignum_nist_p_521 dd offset __nist_p_521 ; DATA XREF:	_BN_get0_nist_prime_521o
					; _BN_nist_mod_521+4Fo	...
		dd 2 dup(11h), 0
		dd 2
; `BN_nist_mod_192'::`2'::_bignum_nist_p_192_sqr
?_bignum_nist_p_192_sqr@?1??BN_nist_mod_192@@9@9 dd offset __nist_p_192_sqr
					; DATA XREF: _BN_nist_mod_192+3Co
		dd 2 dup(0Ch), 0
		dd 2
; `BN_nist_mod_224'::`2'::_bignum_nist_p_224_sqr
?_bignum_nist_p_224_sqr@?1??BN_nist_mod_224@@9@9 dd offset __nist_p_224_sqr
					; DATA XREF: _BN_nist_mod_224+3Co
		dd 2 dup(0Eh), 0
		dd 2
; `BN_nist_mod_256'::`2'::_bignum_nist_p_256_sqr
?_bignum_nist_p_256_sqr@?1??BN_nist_mod_256@@9@9 dd offset __nist_p_256_sqr
					; DATA XREF: _BN_nist_mod_256+3Co
		dd 2 dup(10h), 0
		dd 2
; `BN_nist_mod_384'::`2'::_bignum_nist_p_384_sqr
?_bignum_nist_p_384_sqr@?1??BN_nist_mod_384@@9@9 dd offset __nist_p_384_sqr
					; DATA XREF: _BN_nist_mod_384+42o
		dd 2 dup(18h), 0
		dd 2
; `BN_nist_mod_521'::`2'::_bignum_nist_p_521_sqr
?_bignum_nist_p_521_sqr@?1??BN_nist_mod_521@@9@9 dd offset __nist_p_521_sqr
					; DATA XREF: _BN_nist_mod_521+38o
		dd offset __nist_p_192+21h
		dd offset __nist_p_192+21h
		dd 0
		db 2, 2	dup(0)
byte_4A7	db 0			; DATA XREF: _BN_nist_mod_192+1D9o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_get0_nist_prime_192
_BN_get0_nist_prime_192	proc near
		mov	eax, offset __bignum_nist_p_192
		retn
_BN_get0_nist_prime_192	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_get0_nist_prime_224
_BN_get0_nist_prime_224	proc near
		mov	eax, offset __bignum_nist_p_224
		retn
_BN_get0_nist_prime_224	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_get0_nist_prime_256
_BN_get0_nist_prime_256	proc near
		mov	eax, offset __bignum_nist_p_256
		retn
_BN_get0_nist_prime_256	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_get0_nist_prime_384
_BN_get0_nist_prime_384	proc near
		mov	eax, offset __bignum_nist_p_384
		retn
_BN_get0_nist_prime_384	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_get0_nist_prime_521
_BN_get0_nist_prime_521	proc near
		mov	eax, offset __bignum_nist_p_521
		retn
_BN_get0_nist_prime_521	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_nist_mod_192
_BN_nist_mod_192 proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 3Ch ; '<'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+40h+arg_0]
		push	ebp
		mov	ebp, [esp+44h+arg_C]
		push	esi
		mov	esi, [esp+48h+arg_4]
		push	edi
		mov	[esp+4Ch+var_38], ebx
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [esi+4]
		mov	edi, [esi]
		mov	[esp+4Ch+var_3C], eax
		jnz	loc_74D
		push	offset ?_bignum_nist_p_192_sqr@?1??BN_nist_mod_192@@9@9	; `BN_nist_mod_192'::`2'::_bignum_nist_p_192_sqr
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_74D
		push	esi
		push	offset __bignum_nist_p_192
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_556
		push	eax
		push	ebx
		call	_BN_set_word
		add	esp, 8

loc_53E:				; CODE XREF: _BN_nist_mod_192+8Aj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_556:				; CODE XREF: _BN_nist_mod_192+62j
		jle	short loc_57F
		cmp	ebx, esi
		jz	short loc_53E
		push	esi
		push	ebx
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_57F:				; CODE XREF: _BN_nist_mod_192:loc_556j
		cmp	ebx, esi
		jz	short loc_5D5
		cmp	dword ptr [ebx+8], 6
		jl	short loc_58D
		mov	eax, ebx
		jmp	short loc_598
; ---------------------------------------------------------------------------

loc_58D:				; CODE XREF: _BN_nist_mod_192+B7j
		push	6
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_598:				; CODE XREF: _BN_nist_mod_192+BBj
		test	eax, eax
		jnz	short loc_5AF
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_5AF:				; CODE XREF: _BN_nist_mod_192+CAj
		mov	esi, [ebx]
		mov	eax, [edi]
		mov	[esi], eax
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		mov	[esi+8], eax
		mov	eax, [edi+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [edi+10h]
		mov	[esi+10h], eax
		mov	eax, [edi+14h]
		mov	[esi+14h], eax
		jmp	short loc_5D7
; ---------------------------------------------------------------------------

loc_5D5:				; CODE XREF: _BN_nist_mod_192+B1j
		mov	esi, edi

loc_5D7:				; CODE XREF: _BN_nist_mod_192+103j
		mov	eax, [esp+4Ch+var_3C]
		add	eax, 0FFFFFFFAh
		push	6
		push	eax
		lea	eax, [edi+18h]
		push	eax
		lea	eax, [esp+58h+var_34]
		push	eax
		call	_nist_cp_bn_0
		mov	eax, [esi]
		xor	ecx, ecx
		add	esp, 10h
		mov	ebx, [esp+4Ch+var_28]
		add	eax, [esp+4Ch+var_34]
		mov	ebp, 0
		mov	edi, 0
		adc	ecx, ecx
		add	eax, [esp+4Ch+var_24]
		mov	[esi], eax
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [esi+4]
		adc	eax, 0
		add	ecx, [esp+4Ch+var_30]
		adc	eax, 0
		add	ecx, [esp+4Ch+var_20]
		mov	[esi+4], ecx
		mov	ecx, [esp+4Ch+var_2C]
		adc	eax, 0
		add	ecx, [esp+4Ch+var_24]
		mov	edx, eax
		mov	[esp+4Ch+var_3C], ecx
		adc	ebp, ebp
		sar	edx, 1Fh
		add	eax, [esi+8]
		adc	edx, 0
		add	eax, ecx
		adc	edx, ebp
		add	eax, [esp+4Ch+var_34]
		mov	[esi+8], eax
		adc	edx, 0
		add	ebx, [esp+4Ch+var_20]
		mov	ecx, edx
		adc	edi, edi
		sar	ecx, 1Fh
		add	edx, [esi+0Ch]
		adc	ecx, 0
		add	edx, [esp+4Ch+var_30]
		adc	ecx, 0
		add	edx, ebx
		mov	[esi+0Ch], edx
		adc	ecx, edi
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [esi+10h]
		adc	eax, 0
		add	ecx, [esp+4Ch+var_3C]
		mov	[esi+10h], ecx
		adc	eax, ebp
		mov	ecx, eax
		sar	ecx, 1Fh
		add	eax, [esi+14h]
		adc	ecx, 0
		add	eax, ebx
		mov	[esi+14h], eax
		adc	ecx, edi
		mov	eax, ecx
		sar	eax, 1Fh
		test	ecx, ecx
		jle	short loc_6BF
		lea	eax, [ecx+ecx*2]
		push	6
		lea	eax, (byte_4A7-4BFh)[eax*8]
		push	eax
		push	esi
		push	esi
		call	_bn_sub_words
		add	esp, 10h
		mov	edi, eax
		jmp	short loc_6C4
; ---------------------------------------------------------------------------

loc_6BF:				; CODE XREF: _BN_nist_mod_192+1D2j
		mov	edi, 1

loc_6C4:				; CODE XREF: _BN_nist_mod_192+1EDj
		push	6
		push	offset __nist_p_192
		lea	eax, [esp+54h+var_1C]
		push	esi
		push	eax
		call	_bn_sub_words
		neg	eax
		lea	edx, [esp+5Ch+var_1C]
		neg	edi
		add	esp, 10h
		and	eax, edi
		mov	ecx, eax
		and	eax, esi
		not	ecx
		and	ecx, edx
		mov	edx, 6
		or	ecx, eax
		mov	eax, [ecx]
		mov	[esi], eax
		mov	eax, [ecx+4]
		mov	[esi+4], eax
		mov	eax, [ecx+8]
		mov	[esi+8], eax
		mov	eax, [ecx+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [ecx+10h]
		mov	[esi+10h], eax
		mov	eax, [ecx+14h]
		mov	[esi+14h], eax
		mov	esi, [esp+4Ch+var_38]
		mov	ecx, [esi]
		mov	dword ptr [esi+4], 6
		add	ecx, 14h

loc_724:				; CODE XREF: _BN_nist_mod_192+260j
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_732
		dec	edx
		test	edx, edx
		jg	short loc_724

loc_732:				; CODE XREF: _BN_nist_mod_192+25Bj
		pop	edi
		mov	[esi+4], edx
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_74D:				; CODE XREF: _BN_nist_mod_192+36j
					; _BN_nist_mod_192+4Cj
		push	ebp
		push	offset __bignum_nist_p_192
		push	esi
		push	ebx
		call	_BN_nnmod
		mov	ecx, [esp+5Ch+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
_BN_nist_mod_192 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 770h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_nist_mod_224
_BN_nist_mod_224 proc near

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 44h ; 'D'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+44h+var_4], eax
		push	ebx
		mov	ebx, [esp+48h+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+50h+arg_4]
		push	edi
		mov	edi, [esp+54h+arg_C]
		mov	[esp+54h+var_40], ebx
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [esi+4]
		mov	ebp, [esi]
		mov	[esp+54h+var_44], eax
		jnz	loc_A69
		push	offset ?_bignum_nist_p_224_sqr@?1??BN_nist_mod_224@@9@9	; `BN_nist_mod_224'::`2'::_bignum_nist_p_224_sqr
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_A69
		push	esi
		push	offset __bignum_nist_p_224
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_7F6
		push	eax
		push	ebx
		call	_BN_set_word
		add	esp, 8

loc_7DE:				; CODE XREF: _BN_nist_mod_224+8Aj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_7F6:				; CODE XREF: _BN_nist_mod_224+62j
		jle	short loc_81F
		cmp	ebx, esi
		jz	short loc_7DE
		push	esi
		push	ebx
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_81F:				; CODE XREF: _BN_nist_mod_224:loc_7F6j
		cmp	ebx, esi
		jz	short loc_87C
		cmp	dword ptr [ebx+8], 7
		jl	short loc_82D
		mov	eax, ebx
		jmp	short loc_838
; ---------------------------------------------------------------------------

loc_82D:				; CODE XREF: _BN_nist_mod_224+B7j
		push	7
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_838:				; CODE XREF: _BN_nist_mod_224+BBj
		test	eax, eax
		jnz	short loc_84F
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_84F:				; CODE XREF: _BN_nist_mod_224+CAj
		mov	edi, [ebx]
		mov	eax, [ebp+0]
		mov	[edi], eax
		mov	eax, [ebp+4]
		mov	[edi+4], eax
		mov	eax, [ebp+8]
		mov	[edi+8], eax
		mov	eax, [ebp+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [ebp+10h]
		mov	[edi+10h], eax
		mov	eax, [ebp+14h]
		mov	[edi+14h], eax
		mov	eax, [ebp+18h]
		mov	[edi+18h], eax
		jmp	short loc_87E
; ---------------------------------------------------------------------------

loc_87C:				; CODE XREF: _BN_nist_mod_224+B1j
		mov	edi, ebp

loc_87E:				; CODE XREF: _BN_nist_mod_224+10Aj
		mov	eax, [esp+54h+var_44]
		add	eax, 0FFFFFFF9h
		push	7
		push	eax
		lea	eax, [ebp+1Ch]
		push	eax
		lea	eax, [esp+60h+var_3C]
		push	eax
		call	_nist_cp_bn_0
		xor	ecx, ecx
		mov	eax, [edi]
		add	esp, 10h
		mov	esi, offset _bn_sub_words
		sub	eax, [esp+54h+var_3C]
		sbb	ecx, ecx
		sub	eax, [esp+54h+var_2C]
		mov	[edi], eax
		sbb	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [edi+4]
		adc	eax, 0
		sub	ecx, [esp+54h+var_38]
		sbb	eax, 0
		sub	ecx, [esp+54h+var_28]
		mov	[edi+4], ecx
		sbb	eax, 0
		mov	ecx, eax
		sar	ecx, 1Fh
		add	eax, [edi+8]
		adc	ecx, 0
		sub	eax, [esp+54h+var_34]
		sbb	ecx, 0
		sub	eax, [esp+54h+var_24]
		mov	[edi+8], eax
		sbb	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [edi+0Ch]
		adc	eax, 0
		sub	ecx, [esp+54h+var_30]
		sbb	eax, 0
		add	ecx, [esp+54h+var_3C]
		adc	eax, 0
		add	ecx, [esp+54h+var_2C]
		mov	[edi+0Ch], ecx
		adc	eax, 0
		mov	ecx, eax
		sar	ecx, 1Fh
		sub	eax, [esp+54h+var_2C]
		sbb	ecx, 0
		add	eax, [edi+10h]
		adc	ecx, 0
		add	eax, [esp+54h+var_38]
		adc	ecx, 0
		add	eax, [esp+54h+var_28]
		mov	[edi+10h], eax
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [edi+14h]
		adc	eax, 0
		sub	ecx, [esp+54h+var_28]
		sbb	eax, 0
		add	ecx, [esp+54h+var_34]
		adc	eax, 0
		add	ecx, [esp+54h+var_24]
		mov	[edi+14h], ecx
		adc	eax, 0
		mov	ecx, eax
		sar	ecx, 1Fh
		add	eax, [edi+18h]
		adc	ecx, 0
		sub	eax, [esp+54h+var_24]
		sbb	ecx, 0
		add	eax, [esp+54h+var_30]
		mov	[edi+18h], eax
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		test	ecx, ecx
		jle	short loc_998
		lea	eax, ds:0[ecx*8]
		sub	eax, ecx
		push	7
		lea	eax, dword_5C[eax*4]
		push	eax
		push	edi
		push	edi
		call	_bn_sub_words
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_9D9
; ---------------------------------------------------------------------------

loc_998:				; CODE XREF: _BN_nist_mod_224+205j
		jns	short loc_9D4
		lea	eax, [ecx+1]
		lea	ecx, ds:0[eax*8]
		sub	ecx, eax
		mov	eax, offset __nist_p_224
		shl	ecx, 2
		push	7
		sub	eax, ecx
		push	eax
		push	edi
		push	edi
		call	_bn_add_words
		mov	ebx, eax
		add	esp, 10h
		neg	eax
		mov	esi, eax
		and	eax, offset _bn_sub_words
		not	esi
		and	esi, offset _bn_add_words
		or	esi, eax
		jmp	short loc_9D9
; ---------------------------------------------------------------------------

loc_9D4:				; CODE XREF: _BN_nist_mod_224:loc_998j
		mov	ebx, 1

loc_9D9:				; CODE XREF: _BN_nist_mod_224+226j
					; _BN_nist_mod_224+262j
		push	7
		push	offset __nist_p_224
		lea	eax, [esp+5Ch+var_20]
		push	edi
		push	eax
		call	esi ; _bn_sub_words
		neg	eax
		mov	esi, [esp+64h+var_40]
		neg	ebx
		lea	edx, [esp+64h+var_20]
		and	eax, ebx
		add	esp, 10h
		mov	ecx, eax
		and	eax, edi
		not	ecx
		and	ecx, edx
		mov	edx, 7
		or	ecx, eax
		mov	eax, [ecx]
		mov	[edi], eax
		mov	eax, [ecx+4]
		mov	[edi+4], eax
		mov	eax, [ecx+8]
		mov	[edi+8], eax
		mov	eax, [ecx+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [ecx+10h]
		mov	[edi+10h], eax
		mov	eax, [ecx+14h]
		mov	[edi+14h], eax
		mov	eax, [ecx+18h]
		mov	[edi+18h], eax
		mov	ecx, [esi]
		mov	dword ptr [esi+4], 7
		add	ecx, 18h
		nop	dword ptr [eax+00h]

loc_A40:				; CODE XREF: _BN_nist_mod_224+2DCj
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_A4E
		dec	edx
		test	edx, edx
		jg	short loc_A40

loc_A4E:				; CODE XREF: _BN_nist_mod_224+2D7j
		pop	edi
		mov	[esi+4], edx
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_A69:				; CODE XREF: _BN_nist_mod_224+36j
					; _BN_nist_mod_224+4Cj
		push	edi
		push	offset __bignum_nist_p_224
		push	esi
		push	ebx
		call	_BN_nnmod
		mov	ecx, [esp+64h+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
_BN_nist_mod_224 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_nist_mod_256
_BN_nist_mod_256 proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 4Ch ; 'L'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+50h+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+58h+arg_4]
		push	edi
		mov	edi, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_48], ebx
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [esi+4]
		mov	ebp, [esi]
		mov	[esp+5Ch+var_4C], eax
		jnz	loc_E6C
		push	offset ?_bignum_nist_p_256_sqr@?1??BN_nist_mod_256@@9@9	; `BN_nist_mod_256'::`2'::_bignum_nist_p_256_sqr
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_E6C
		push	esi
		push	offset __bignum_nist_p_256
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_B12
		push	eax
		push	ebx
		call	_BN_set_word
		add	esp, 8

loc_AFA:				; CODE XREF: _BN_nist_mod_256+8Aj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_B12:				; CODE XREF: _BN_nist_mod_256+62j
		jle	short loc_B3B
		cmp	ebx, esi
		jz	short loc_AFA
		push	esi
		push	ebx
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_B3B:				; CODE XREF: _BN_nist_mod_256:loc_B12j
		cmp	ebx, esi
		jz	short loc_B9E
		cmp	dword ptr [ebx+8], 8
		jl	short loc_B49
		mov	eax, ebx
		jmp	short loc_B54
; ---------------------------------------------------------------------------

loc_B49:				; CODE XREF: _BN_nist_mod_256+B7j
		push	8
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_B54:				; CODE XREF: _BN_nist_mod_256+BBj
		test	eax, eax
		jnz	short loc_B6B
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_B6B:				; CODE XREF: _BN_nist_mod_256+CAj
		mov	edi, [ebx]
		mov	eax, [ebp+0]
		mov	[edi], eax
		mov	eax, [ebp+4]
		mov	[edi+4], eax
		mov	eax, [ebp+8]
		mov	[edi+8], eax
		mov	eax, [ebp+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [ebp+10h]
		mov	[edi+10h], eax
		mov	eax, [ebp+14h]
		mov	[edi+14h], eax
		mov	eax, [ebp+18h]
		mov	[edi+18h], eax
		mov	eax, [ebp+1Ch]
		mov	[edi+1Ch], eax
		jmp	short loc_BA0
; ---------------------------------------------------------------------------

loc_B9E:				; CODE XREF: _BN_nist_mod_256+B1j
		mov	edi, ebp

loc_BA0:				; CODE XREF: _BN_nist_mod_256+110j
		mov	eax, [esp+5Ch+var_4C]
		add	eax, 0FFFFFFF8h
		push	8
		push	eax
		lea	eax, [ebp+20h]
		push	eax
		lea	eax, [esp+68h+var_44]
		push	eax
		call	_nist_cp_bn_0
		xor	ebx, ebx
		mov	eax, [edi]
		xor	ecx, ecx
		mov	ebp, [esp+6Ch+var_2C]
		add	esp, 10h
		mov	esi, ebx
		sub	eax, [esp+5Ch+var_38]
		sbb	ecx, ecx
		sub	eax, [esp+5Ch+var_34]
		sbb	ecx, ebx
		sub	eax, [esp+5Ch+var_30]
		sbb	ecx, ebx
		sub	eax, ebp
		sbb	ecx, ebx
		add	eax, [esp+5Ch+var_44]
		adc	ecx, ebx
		add	eax, [esp+5Ch+var_40]
		mov	[edi], eax
		adc	ecx, ebx
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [edi+4]
		adc	eax, ebx
		sub	ecx, [esp+5Ch+var_28]
		sbb	eax, ebx
		sub	ecx, [esp+5Ch+var_34]
		sbb	eax, ebx
		sub	ecx, [esp+5Ch+var_30]
		sbb	eax, ebx
		sub	ecx, ebp
		sbb	eax, ebx
		add	ecx, [esp+5Ch+var_3C]
		adc	eax, ebx
		add	ecx, [esp+5Ch+var_40]
		mov	[edi+4], ecx
		adc	eax, ebx
		mov	ecx, [esp+5Ch+var_38]
		mov	edx, eax
		sar	edx, 1Fh
		sub	eax, [esp+5Ch+var_28]
		sbb	edx, ebx
		sub	eax, [esp+5Ch+var_30]
		sbb	edx, ebx
		sub	eax, ebp
		sbb	edx, ebx
		add	eax, [edi+8]
		adc	edx, ebx
		add	eax, [esp+5Ch+var_3C]
		adc	edx, ebx
		add	eax, ecx
		mov	[edi+8], eax
		adc	edx, ebx
		add	ecx, [esp+5Ch+var_34]
		mov	eax, edx
		adc	esi, ebx
		sar	eax, 1Fh
		shld	esi, ecx, 1
		add	ecx, ecx
		add	ecx, edx
		adc	esi, eax
		sub	ecx, [esp+5Ch+var_28]
		sbb	esi, ebx
		sub	ecx, [esp+5Ch+var_44]
		sbb	esi, ebx
		sub	ecx, [esp+5Ch+var_40]
		sbb	esi, ebx
		add	ecx, [edi+0Ch]
		adc	esi, ebx
		add	ecx, [esp+5Ch+var_30]
		mov	[edi+0Ch], ecx
		mov	ecx, [esp+5Ch+var_34]
		adc	esi, ebx
		add	ecx, [esp+5Ch+var_30]
		mov	edx, ebx
		mov	eax, esi
		adc	edx, edx
		sar	eax, 1Fh
		shld	edx, ecx, 1
		add	ecx, ecx
		add	ecx, esi
		mov	esi, ebx
		adc	edx, eax
		sub	ecx, [esp+5Ch+var_3C]
		sbb	edx, ebx
		sub	ecx, [esp+5Ch+var_40]
		sbb	edx, ebx
		add	ecx, [edi+10h]
		adc	edx, ebx
		add	ecx, ebp
		mov	[edi+10h], ecx
		adc	edx, ebx
		mov	ecx, [esp+5Ch+var_30]
		add	ecx, ebp
		mov	eax, edx
		adc	esi, ebx
		sar	eax, 1Fh
		shld	esi, ecx, 1
		add	ecx, ecx
		add	ecx, edx
		mov	edx, [esp+5Ch+var_28]
		adc	esi, eax
		add	ecx, [edi+14h]
		mov	eax, ebp
		adc	esi, ebx
		sub	ecx, [esp+5Ch+var_3C]
		sbb	esi, ebx
		sub	ecx, [esp+5Ch+var_38]
		sbb	esi, ebx
		add	ecx, [esp+5Ch+var_28]
		mov	[edi+14h], ecx
		adc	esi, ebx
		xor	ecx, ecx
		shld	ecx, eax, 1
		shld	ebx, edx, 1
		add	eax, eax
		add	edx, edx
		add	ebp, eax
		mov	eax, 0
		adc	eax, ecx
		add	edx, ebp
		adc	ebx, eax
		mov	eax, esi
		sar	eax, 1Fh
		add	edx, esi
		adc	ebx, eax
		sub	edx, [esp+5Ch+var_44]
		sbb	ebx, 0
		sub	edx, [esp+5Ch+var_40]
		sbb	ebx, 0
		add	edx, [edi+18h]
		adc	ebx, 0
		add	edx, [esp+5Ch+var_30]
		mov	[edi+18h], edx
		mov	edx, [esp+5Ch+var_28]
		adc	ebx, 0
		xor	ecx, ecx
		mov	eax, edx
		shld	ecx, eax, 1
		add	eax, eax
		add	edx, eax
		mov	eax, 0
		adc	eax, ecx
		mov	[esp+5Ch+var_4C], eax
		mov	eax, ebx
		mov	ecx, [esp+5Ch+var_4C]
		sar	eax, 1Fh
		add	edx, ebx
		adc	ecx, eax
		sub	edx, [esp+5Ch+var_3C]
		sbb	ecx, 0
		sub	edx, [esp+5Ch+var_38]
		sbb	ecx, 0
		sub	edx, [esp+5Ch+var_34]
		sbb	ecx, 0
		mov	esi, offset _bn_sub_words
		sub	edx, [esp+5Ch+var_30]
		sbb	ecx, 0
		add	edx, [edi+1Ch]
		adc	ecx, 0
		add	edx, [esp+5Ch+var_44]
		mov	[edi+1Ch], edx
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		test	ecx, ecx
		jle	short loc_DA4
		shl	ecx, 5
		push	8
		lea	eax, dword_C8[ecx]
		push	eax
		push	edi
		push	edi
		call	_bn_sub_words
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_DDA
; ---------------------------------------------------------------------------

loc_DA4:				; CODE XREF: _BN_nist_mod_256+2FCj
		jns	short loc_DD5
		inc	ecx
		mov	eax, offset __nist_p_256
		shl	ecx, 5
		push	8
		sub	eax, ecx
		push	eax
		push	edi
		push	edi
		call	_bn_add_words
		mov	ebx, eax
		add	esp, 10h
		neg	eax
		mov	esi, eax
		and	eax, offset _bn_sub_words
		not	esi
		and	esi, offset _bn_add_words
		or	esi, eax
		jmp	short loc_DDA
; ---------------------------------------------------------------------------

loc_DD5:				; CODE XREF: _BN_nist_mod_256:loc_DA4j
		mov	ebx, 1

loc_DDA:				; CODE XREF: _BN_nist_mod_256+316j
					; _BN_nist_mod_256+347j
		push	8
		push	offset __nist_p_256
		lea	eax, [esp+64h+var_24]
		push	edi
		push	eax
		call	esi ; _bn_sub_words
		neg	eax
		mov	esi, [esp+6Ch+var_48]
		neg	ebx
		lea	edx, [esp+6Ch+var_24]
		and	eax, ebx
		add	esp, 10h
		mov	ecx, eax
		and	eax, edi
		not	ecx
		and	ecx, edx
		mov	edx, 8
		or	ecx, eax
		mov	eax, [ecx]
		mov	[edi], eax
		mov	eax, [ecx+4]
		mov	[edi+4], eax
		mov	eax, [ecx+8]
		mov	[edi+8], eax
		mov	eax, [ecx+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [ecx+10h]
		mov	[edi+10h], eax
		mov	eax, [ecx+14h]
		mov	[edi+14h], eax
		mov	eax, [ecx+18h]
		mov	[edi+18h], eax
		mov	eax, [ecx+1Ch]
		mov	[edi+1Ch], eax
		mov	ecx, [esi]
		mov	dword ptr [esi+4], 8
		add	ecx, 1Ch

loc_E43:				; CODE XREF: _BN_nist_mod_256+3C3j
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_E51
		dec	edx
		test	edx, edx
		jg	short loc_E43

loc_E51:				; CODE XREF: _BN_nist_mod_256+3BEj
		pop	edi
		mov	[esi+4], edx
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_E6C:				; CODE XREF: _BN_nist_mod_256+36j
					; _BN_nist_mod_256+4Cj
		push	edi
		push	offset __bignum_nist_p_256
		push	esi
		push	ebx
		call	_BN_nnmod
		mov	ecx, [esp+6Ch+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
_BN_nist_mod_256 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_nist_mod_384
_BN_nist_mod_384 proc near

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 6Ch ; 'l'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+6Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+70h+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+78h+arg_4]
		push	edi
		mov	edi, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_68], ebx
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [esi+4]
		mov	ebp, [esi]
		mov	[esp+7Ch+var_6C], eax
		jnz	loc_12EC
		push	offset ?_bignum_nist_p_384_sqr@?1??BN_nist_mod_384@@9@9	; `BN_nist_mod_384'::`2'::_bignum_nist_p_384_sqr
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_12EC
		push	esi
		push	offset __bignum_nist_p_384
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_F1C
		push	eax
		push	ebx
		call	_BN_set_word
		add	esp, 8

loc_F04:				; CODE XREF: _BN_nist_mod_384+90j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+6Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_F1C:				; CODE XREF: _BN_nist_mod_384+68j
		jle	short loc_F45
		cmp	ebx, esi
		jz	short loc_F04
		push	esi
		push	ebx
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+6Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_F45:				; CODE XREF: _BN_nist_mod_384:loc_F1Cj
		cmp	ebx, esi
		jz	short loc_F92
		cmp	dword ptr [ebx+8], 0Ch
		jl	short loc_F53
		mov	eax, ebx
		jmp	short loc_F5E
; ---------------------------------------------------------------------------

loc_F53:				; CODE XREF: _BN_nist_mod_384+BDj
		push	0Ch
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_F5E:				; CODE XREF: _BN_nist_mod_384+C1j
		test	eax, eax
		jnz	short loc_F75
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+6Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_F75:				; CODE XREF: _BN_nist_mod_384+D0j
		mov	edi, [ebx]
		mov	esi, ebp
		mov	ecx, edi
		sub	esi, edi
		mov	edx, 0Ch

loc_F82:				; CODE XREF: _BN_nist_mod_384+FEj
		mov	eax, [esi+ecx]
		lea	ecx, [ecx+4]
		mov	[ecx-4], eax
		sub	edx, 1
		jnz	short loc_F82
		jmp	short loc_F94
; ---------------------------------------------------------------------------

loc_F92:				; CODE XREF: _BN_nist_mod_384+B7j
		mov	edi, ebp

loc_F94:				; CODE XREF: _BN_nist_mod_384+100j
		mov	eax, [esp+7Ch+var_6C]
		add	eax, 0FFFFFFF4h
		push	0Ch
		push	eax
		lea	eax, [ebp+30h]
		push	eax
		lea	eax, [esp+88h+var_64]
		push	eax
		call	_nist_cp_bn_0
		mov	ebp, [esp+8Ch+var_40]
		add	esp, 10h
		sub	ebp, [esp+7Ch+var_38]
		mov	edx, 0
		mov	esi, [esp+7Ch+var_64]
		sbb	edx, edx
		mov	eax, [edi]
		xor	ecx, ecx
		mov	ebx, [esp+7Ch+var_60]
		add	eax, esi
		mov	[esp+7Ch+var_6C], edx
		adc	ecx, ecx
		add	eax, [esp+7Ch+var_44]
		adc	ecx, 0
		add	eax, ebp
		mov	[edi], eax
		adc	ecx, edx
		mov	eax, ecx
		sar	eax, 1Fh
		add	ecx, [edi+4]
		adc	eax, 0
		sub	ecx, esi
		sbb	eax, 0
		sub	ecx, [esp+7Ch+var_44]
		sbb	eax, 0
		add	ecx, ebx
		adc	eax, 0
		add	ecx, [esp+7Ch+var_3C]
		adc	eax, 0
		add	ecx, [esp+7Ch+var_38]
		mov	[edi+4], ecx
		adc	eax, 0
		mov	edx, eax
		sar	edx, 1Fh
		sub	eax, ebx
		sbb	edx, 0
		sub	eax, [esp+7Ch+var_40]
		sbb	edx, 0
		add	eax, [edi+8]
		adc	edx, 0
		add	eax, [esp+7Ch+var_5C]
		adc	edx, 0
		add	eax, [esp+7Ch+var_38]
		mov	[edi+8], eax
		adc	edx, 0
		mov	ecx, edx
		sar	ecx, 1Fh
		sub	edx, [esp+7Ch+var_5C]
		sbb	ecx, 0
		sub	edx, [esp+7Ch+var_3C]
		sbb	ecx, 0
		add	edx, [edi+0Ch]
		adc	ecx, 0
		add	edx, [esp+7Ch+var_58]
		adc	ecx, 0
		add	edx, esi
		adc	ecx, 0
		add	edx, [esp+7Ch+var_44]
		adc	ecx, 0
		add	edx, ebp
		mov	[edi+0Ch], edx
		adc	ecx, [esp+7Ch+var_6C]
		mov	edx, [esp+7Ch+var_6C]
		mov	eax, ecx
		shld	edx, ebp, 1
		sar	eax, 1Fh
		add	ebp, ebp
		add	ebp, ecx
		adc	edx, eax
		sub	ebp, [esp+7Ch+var_58]
		sbb	edx, 0
		add	ebp, [edi+10h]
		adc	edx, 0
		mov	ecx, [esp+7Ch+var_3C]
		add	ebp, [esp+7Ch+var_54]
		adc	edx, 0
		add	ebp, ebx
		adc	edx, 0
		add	ebp, [esp+7Ch+var_3C]
		adc	edx, 0
		add	ebp, esi
		adc	edx, 0
		add	ebp, [esp+7Ch+var_44]
		mov	[edi+10h], ebp
		adc	edx, 0
		mov	ebp, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_6C], edx
		xor	edx, edx
		shld	edx, ecx, 1
		mov	eax, [esp+7Ch+var_6C]
		add	ecx, ecx
		sar	eax, 1Fh
		add	ecx, [esp+7Ch+var_6C]
		adc	edx, eax
		sub	ecx, [esp+7Ch+var_54]
		sbb	edx, 0
		add	ecx, [edi+14h]
		adc	edx, 0
		add	ecx, ebp
		adc	edx, 0
		add	ecx, [esp+7Ch+var_5C]
		adc	edx, 0
		add	ecx, ebx
		mov	ebx, [esp+7Ch+var_4C]
		adc	edx, 0
		add	ecx, [esp+7Ch+var_40]
		adc	edx, 0
		add	ecx, [esp+7Ch+var_38]
		mov	[edi+14h], ecx
		adc	edx, 0
		mov	ecx, [esp+7Ch+var_38]
		xor	esi, esi
		mov	eax, edx
		shld	esi, ecx, 1
		sar	eax, 1Fh
		add	ecx, ecx
		add	ecx, edx
		mov	edx, [esp+7Ch+var_48]
		adc	esi, eax
		sub	ecx, ebp
		sbb	esi, 0
		add	ecx, [edi+18h]
		adc	esi, 0
		add	ecx, ebx
		adc	esi, 0
		add	ecx, [esp+7Ch+var_58]
		adc	esi, 0
		add	ecx, [esp+7Ch+var_5C]
		adc	esi, 0
		add	ecx, [esp+7Ch+var_3C]
		mov	[edi+18h], ecx
		adc	esi, 0
		mov	ecx, esi
		sar	ecx, 1Fh
		add	esi, [edi+1Ch]
		adc	ecx, 0
		sub	esi, ebx
		sbb	ecx, 0
		add	esi, edx
		adc	ecx, 0
		add	esi, [esp+7Ch+var_54]
		adc	ecx, 0
		add	esi, [esp+7Ch+var_58]
		adc	ecx, 0
		add	esi, [esp+7Ch+var_38]
		mov	[edi+1Ch], esi
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		sub	ecx, edx
		sbb	eax, 0
		add	ecx, [edi+20h]
		adc	eax, 0
		add	ecx, ebp
		mov	esi, [esp+7Ch+var_44]
		adc	eax, 0
		add	ecx, [esp+7Ch+var_54]
		adc	eax, 0
		add	ecx, esi
		mov	[edi+20h], ecx
		adc	eax, 0
		mov	ecx, eax
		sar	ecx, 1Fh
		sub	eax, esi
		sbb	ecx, 0
		add	eax, [edi+24h]
		adc	ecx, 0
		add	eax, ebx
		adc	ecx, 0
		add	eax, ebp
		adc	ecx, 0
		add	eax, [esp+7Ch+var_40]
		mov	[edi+24h], eax
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		sub	ecx, [esp+7Ch+var_40]
		sbb	eax, 0
		add	ecx, [edi+28h]
		adc	eax, 0
		add	ecx, edx
		adc	eax, 0
		add	ecx, ebx
		adc	eax, 0
		add	ecx, [esp+7Ch+var_3C]
		mov	[edi+28h], ecx
		adc	eax, 0
		mov	ecx, eax
		sar	ecx, 1Fh
		add	eax, [edi+2Ch]
		adc	ecx, 0
		sub	eax, [esp+7Ch+var_3C]
		sbb	ecx, 0
		add	eax, edx
		adc	ecx, 0
		add	eax, esi
		mov	esi, offset _bn_sub_words
		adc	ecx, 0
		add	eax, [esp+7Ch+var_38]
		mov	[edi+2Ch], eax
		adc	ecx, 0
		mov	eax, ecx
		sar	eax, 1Fh
		test	ecx, ecx
		jle	short loc_1230
		lea	eax, [ecx+ecx*2]
		shl	eax, 4
		push	0Ch
		lea	eax, dword_198[eax]
		push	eax
		push	edi
		push	edi
		call	_bn_sub_words
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_126B
; ---------------------------------------------------------------------------

loc_1230:				; CODE XREF: _BN_nist_mod_384+381j
		jns	short loc_1266
		lea	ecx, [ecx+ecx*2]
		mov	eax, offset __nist_p_384
		add	ecx, 3
		shl	ecx, 4
		push	0Ch
		sub	eax, ecx
		push	eax
		push	edi
		push	edi
		call	_bn_add_words
		mov	ebx, eax
		add	esp, 10h
		neg	eax
		mov	esi, eax
		and	eax, offset _bn_sub_words
		not	esi
		and	esi, offset _bn_add_words
		or	esi, eax
		jmp	short loc_126B
; ---------------------------------------------------------------------------

loc_1266:				; CODE XREF: _BN_nist_mod_384:loc_1230j
		mov	ebx, 1

loc_126B:				; CODE XREF: _BN_nist_mod_384+39Ej
					; _BN_nist_mod_384+3D4j
		push	0Ch
		push	offset __nist_p_384
		lea	eax, [esp+84h+var_34]
		push	edi
		push	eax
		call	esi ; _bn_sub_words
		neg	eax
		lea	edx, [esp+8Ch+var_34]
		neg	ebx
		add	esp, 10h
		and	eax, ebx
		mov	ecx, eax
		and	eax, edi
		not	ecx
		and	ecx, edx
		mov	edx, 0Ch
		or	ecx, eax
		sub	ecx, edi
		nop	dword ptr [eax+eax+00000000h]

loc_12A0:				; CODE XREF: _BN_nist_mod_384+41Cj
		mov	eax, [ecx+edi]
		lea	edi, [edi+4]
		mov	[edi-4], eax
		sub	edx, 1
		jnz	short loc_12A0
		mov	esi, [esp+7Ch+var_68]
		mov	edx, 0Ch
		mov	ecx, [esi]
		mov	dword ptr [esi+4], 0Ch
		add	ecx, 2Ch ; ','

loc_12C3:				; CODE XREF: _BN_nist_mod_384+43Fj
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_12D1
		dec	edx
		test	edx, edx
		jg	short loc_12C3

loc_12D1:				; CODE XREF: _BN_nist_mod_384+43Aj
		pop	edi
		mov	[esi+4], edx
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+6Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_12EC:				; CODE XREF: _BN_nist_mod_384+3Cj
					; _BN_nist_mod_384+52j
		push	edi
		push	offset __bignum_nist_p_384
		push	esi
		push	ebx
		call	_BN_nnmod
		mov	ecx, [esp+8Ch+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 6Ch
		retn
_BN_nist_mod_384 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1314h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_nist_mod_521
_BN_nist_mod_521 proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 4Ch ; 'L'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+50h+arg_C]
		push	ebp
		push	esi
		mov	esi, [esp+58h+arg_4]
		push	edi
		mov	edi, [esp+5Ch+arg_0]
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [esi+4]
		mov	ebp, [esi]
		mov	[esp+5Ch+var_4C], eax
		jnz	loc_14DF
		push	offset ?_bignum_nist_p_521_sqr@?1??BN_nist_mod_521@@9@9	; `BN_nist_mod_521'::`2'::_bignum_nist_p_521_sqr
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_14DF
		push	esi
		push	offset __bignum_nist_p_521
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1396
		push	eax
		push	edi
		call	_BN_set_word
		add	esp, 8

loc_137E:				; CODE XREF: _BN_nist_mod_521+86j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1396:				; CODE XREF: _BN_nist_mod_521+5Ej
		jle	short loc_13BF
		cmp	edi, esi
		jz	short loc_137E
		push	esi
		push	edi
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_13BF:				; CODE XREF: _BN_nist_mod_521:loc_1396j
		cmp	edi, esi
		jz	short loc_1414
		cmp	dword ptr [edi+8], 11h
		jl	short loc_13CD
		mov	eax, edi
		jmp	short loc_13D8
; ---------------------------------------------------------------------------

loc_13CD:				; CODE XREF: _BN_nist_mod_521+B3j
		push	11h
		push	edi
		call	_bn_expand2
		add	esp, 8

loc_13D8:				; CODE XREF: _BN_nist_mod_521+B7j
		test	eax, eax
		jnz	short loc_13EF
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_13EF:				; CODE XREF: _BN_nist_mod_521+C6j
		mov	esi, [edi]
		mov	ebx, ebp
		mov	ecx, esi
		sub	ebx, esi
		mov	edx, 11h
		nop	dword ptr [eax+eax+00000000h]

loc_1404:				; CODE XREF: _BN_nist_mod_521+FCj
		mov	eax, [ebx+ecx]
		lea	ecx, [ecx+4]
		mov	[ecx-4], eax
		sub	edx, 1
		jnz	short loc_1404
		jmp	short loc_1416
; ---------------------------------------------------------------------------

loc_1414:				; CODE XREF: _BN_nist_mod_521+ADj
		mov	esi, ebp

loc_1416:				; CODE XREF: _BN_nist_mod_521+FEj
		mov	eax, [esp+5Ch+var_4C]
		add	eax, 0FFFFFFF0h
		push	11h
		push	eax
		lea	eax, [ebp+40h]
		push	eax
		lea	eax, [esp+68h+var_48]
		push	eax
		call	_nist_cp_bn_0
		mov	edx, [esp+6Ch+var_48]
		add	esp, 10h
		xor	ecx, ecx

loc_1437:				; CODE XREF: _BN_nist_mod_521+13Bj
		mov	ebx, [esp+ecx*4+5Ch+var_44]
		mov	eax, ebx
		shr	edx, 9
		shl	eax, 17h
		or	eax, edx
		mov	edx, ebx
		mov	[esp+ecx*4+5Ch+var_48],	eax
		inc	ecx
		cmp	ecx, 10h
		jl	short loc_1437
		push	11h
		lea	eax, [esp+60h+var_48]
		shr	ebx, 9
		push	eax
		push	esi
		mov	[esp+ecx*4+68h+var_48],	ebx
		and	dword ptr [esi+ecx*4], 1FFh
		push	esi
		call	_bn_add_words
		push	11h
		push	offset __nist_p_521
		lea	eax, [esp+74h+var_48]
		push	esi
		push	eax
		call	_bn_sub_words
		neg	eax
		lea	ecx, [esp+7Ch+var_48]
		mov	edx, eax
		add	esp, 20h
		not	edx
		and	eax, esi
		and	edx, ecx
		mov	ecx, 11h
		or	edx, eax
		sub	edx, esi

loc_1499:				; CODE XREF: _BN_nist_mod_521+191j
		mov	eax, [edx+esi]
		lea	esi, [esi+4]
		mov	[esi-4], eax
		sub	ecx, 1
		jnz	short loc_1499
		lea	edx, [ecx+11h]
		mov	dword ptr [edi+4], 11h
		mov	ecx, [edi]
		add	ecx, 40h ; '@'

loc_14B6:				; CODE XREF: _BN_nist_mod_521+1AEj
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_14C4
		dec	edx
		test	edx, edx
		jg	short loc_14B6

loc_14C4:				; CODE XREF: _BN_nist_mod_521+1A9j
		mov	[edi+4], edx
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_14DF:				; CODE XREF: _BN_nist_mod_521+32j
					; _BN_nist_mod_521+48j
		push	ebx
		push	offset __bignum_nist_p_521
		push	esi
		push	edi
		call	_BN_nnmod
		mov	ecx, [esp+6Ch+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
_BN_nist_mod_521 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1504h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nist_cp_bn	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_8]
		test	edx, edx
		jle	short locret_1526
		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		sub	esi, eax

loc_1517:				; CODE XREF: _nist_cp_bn+1Fj
		mov	ecx, [esi+eax]
		lea	eax, [eax+4]
		mov	[eax-4], ecx
		sub	edx, 1
		jnz	short loc_1517
		pop	esi

locret_1526:				; CODE XREF: _nist_cp_bn+6j
		retn
_nist_cp_bn	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1528h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nist_cp_bn_0	proc near		; CODE XREF: _BN_nist_mod_192+11Ap
					; _BN_nist_mod_224+121p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_8]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		test	edx, edx
		jle	short loc_1557
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		mov	eax, ebx
		sub	esi, ebx
		mov	edi, edx
		nop	dword ptr [eax+eax+00h]

loc_1548:				; CODE XREF: _nist_cp_bn_0+2Cj
		mov	ecx, [esi+eax]
		lea	eax, [eax+4]
		mov	[eax-4], ecx
		sub	edx, 1
		jnz	short loc_1548
		pop	esi

loc_1557:				; CODE XREF: _nist_cp_bn_0+Ej
		mov	ecx, [esp+8+arg_C]
		cmp	edi, ecx
		jge	short loc_1568
		sub	ecx, edi
		xor	eax, eax
		lea	edi, [ebx+edi*4]
		rep stosd

loc_1568:				; CODE XREF: _nist_cp_bn_0+35j
		pop	edi
		pop	ebx
		retn
_nist_cp_bn_0	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_copy:near	; CODE XREF: _BN_nist_mod_192+8Ep
					; _BN_nist_mod_224+8Ep	...
		extrn _BN_nnmod:near	; CODE XREF: _BN_nist_mod_192+285p
					; _BN_nist_mod_224+301p ...
		extrn _BN_set_word:near	; CODE XREF: _BN_nist_mod_192+66p
					; _BN_nist_mod_224+66p	...
		extrn _BN_ucmp:near	; CODE XREF: _BN_nist_mod_192+42p
					; _BN_nist_mod_192+58p	...
		extrn _bn_expand2:near	; CODE XREF: _BN_nist_mod_192+C0p
					; _BN_nist_mod_224+C0p	...
		extrn _bn_add_words:near ; CODE	XREF: _BN_nist_mod_224+245p
					; _BN_nist_mod_256+32Ap ...
		extrn _bn_sub_words:near ; CODE	XREF: _BN_nist_mod_192+1E3p
					; _BN_nist_mod_192+201p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BN_nist_mod_192+7Dp
					; _BN_nist_mod_192+A6p	...
		extrn __chkstk:near	; CODE XREF: _BN_nist_mod_192+5p
					; _BN_nist_mod_224+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _BN_nist_mod_192+Ar
					; _BN_nist_mod_224+Ar ...


		end
