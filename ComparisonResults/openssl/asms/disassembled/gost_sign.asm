;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	659F61811C6DCD621A7B7734862AEE1E
; Input	CRC32 :	3FA70CCE

; File Name   :	C:\compspace\Diff\openssl\obj\gost_sign.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _fill_GOST94_params
_fill_GOST94_params proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, dword ptr ds:_R3410_paramset
		push	esi
		mov	esi, offset _R3410_paramset
		test	eax, eax
		jz	short loc_23
		mov	ecx, [esp+4+arg_4]

loc_13:					; CODE XREF: _fill_GOST94_params+1Fj
		cmp	eax, ecx
		jz	short loc_23
		mov	eax, [esi+10h]
		add	esi, 10h
		test	eax, eax
		jnz	short loc_13
		jmp	short loc_28
; ---------------------------------------------------------------------------

loc_23:					; CODE XREF: _fill_GOST94_params+Dj
					; _fill_GOST94_params+15j
		cmp	dword ptr [esi], 0
		jnz	short loc_45

loc_28:					; CODE XREF: _fill_GOST94_params+21j
		push	109h
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	82h ; '‚'
		push	66h ; 'f'
		call	_ERR_GOST_error
		add	esp, 10h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_45:					; CODE XREF: _fill_GOST94_params+26j
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	eax, [ebx+0Ch]
		push	edi
		lea	edi, [ebx+0Ch]
		test	eax, eax
		jz	short loc_5E
		push	eax
		call	_BN_free
		add	esp, 4

loc_5E:					; CODE XREF: _fill_GOST94_params+53j
		mov	dword ptr [edi], 0
		push	dword ptr [esi+8]
		push	edi
		call	_BN_dec2bn
		mov	eax, [ebx+10h]
		lea	edi, [ebx+10h]
		add	esp, 8
		test	eax, eax
		jz	short loc_83
		push	eax
		call	_BN_free
		add	esp, 4

loc_83:					; CODE XREF: _fill_GOST94_params+78j
		mov	dword ptr [edi], 0
		push	dword ptr [esi+0Ch]
		push	edi
		call	_BN_dec2bn
		mov	eax, [ebx+14h]
		lea	edi, [ebx+14h]
		add	esp, 8
		test	eax, eax
		jz	short loc_A8
		push	eax
		call	_BN_free
		add	esp, 4

loc_A8:					; CODE XREF: _fill_GOST94_params+9Dj
		mov	dword ptr [edi], 0
		push	dword ptr [esi+4]
		push	edi
		call	_BN_dec2bn
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	ebx
		pop	esi
		retn
_fill_GOST94_params endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _getbnfrombuf
_getbnfrombuf	proc near		; CODE XREF: _unpack_cp_signature+37p
					; _unpack_cp_signature+44p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		cmp	byte ptr [ecx],	0
		jnz	short loc_DF
		nop	dword ptr [eax]

loc_D4:					; CODE XREF: _getbnfrombuf+19j
		test	eax, eax
		jz	short loc_F0
		inc	ecx
		dec	eax
		cmp	byte ptr [ecx],	0
		jz	short loc_D4

loc_DF:					; CODE XREF: _getbnfrombuf+Bj
		test	eax, eax
		jz	short loc_F0
		push	0
		push	eax
		push	ecx
		call	_BN_bin2bn
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_F0:					; CODE XREF: _getbnfrombuf+12j
					; _getbnfrombuf+1Dj
		push	esi
		call	_BN_new
		mov	esi, eax
		push	0
		push	esi
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		pop	esi
		retn
_getbnfrombuf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 108h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost94_compute_public
_gost94_compute_public proc near	; CODE XREF: _gost_sign_keygen+38p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_12D
		push	0E9h ; 'é'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	71h ; 'q'
		push	6Eh ; 'n'
		call	_ERR_GOST_error
		add	esp, 10h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_12D:				; CODE XREF: _gost94_compute_public+9j
		push	edi
		call	_BN_CTX_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_154
		push	0EEh ; 'î'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'
		push	6Eh ; 'n'
		call	_ERR_GOST_error
		add	esp, 10h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_154:				; CODE XREF: _gost94_compute_public+2Fj
		call	_BN_new
		mov	[esi+18h], eax
		test	eax, eax
		jnz	short loc_181
		push	0F4h ; 'ô'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'
		push	6Eh ; 'n'
		call	_ERR_GOST_error
		push	edi
		call	_BN_CTX_free
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_181:				; CODE XREF: _gost94_compute_public+56j
		push	edi
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+14h]
		push	eax
		call	_BN_mod_exp
		push	edi
		call	_BN_CTX_free
		add	esp, 18h
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_gost94_compute_public endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_do_sign
_gost_do_sign	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	[esp+18h+arg_0]
		xor	esi, esi
		xor	ebp, ebp
		call	_hashsum2bn
		add	esp, 4
		mov	[esp+18h+var_C], eax
		call	_BN_CTX_new
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_1E8
		push	3Dh ; '='
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'
		push	70h ; 'p'
		call	_ERR_GOST_error
		add	esp, 10h
		jmp	$err$44
; ---------------------------------------------------------------------------

loc_1E8:				; CODE XREF: _gost_do_sign+2Aj
		push	ebx
		call	_BN_CTX_start
		add	esp, 4
		call	_DSA_SIG_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_214
		push	43h ; 'C'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	76h ; 'v'
		push	70h ; 'p'
		call	_ERR_GOST_error
		add	esp, 10h
		jmp	$err$44
; ---------------------------------------------------------------------------

loc_214:				; CODE XREF: _gost_do_sign+56j
		push	edi
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	ebp, eax
		call	_BN_CTX_get
		mov	edi, eax
		push	ebx
		mov	[esp+28h+var_8], edi
		call	_BN_CTX_get
		add	esp, 0Ch
		mov	[esp+1Ch+var_4], eax
		test	ebp, ebp
		jz	loc_332
		test	edi, edi
		jz	loc_332
		test	eax, eax
		jz	loc_332
		mov	edi, [esp+1Ch+arg_8]
		push	ebx
		push	dword ptr [edi+10h]
		push	[esp+24h+var_C]
		push	ebp
		push	0
		call	_BN_div
		add	esp, 14h
		cmp	dword ptr [ebp+4], 0
		jnz	short loc_284
		push	1
		push	[esp+20h+var_C]
		call	_BN_set_word
		add	esp, 8
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_284:				; CODE XREF: _gost_do_sign+C5j
					; _gost_do_sign+127j ...
		push	dword ptr [edi+10h]
		push	[esp+20h+var_8]
		call	_BN_rand_range
		push	ebx
		push	dword ptr [edi+0Ch]
		push	[esp+2Ch+var_8]
		push	dword ptr [edi+14h]
		push	ebp
		call	_BN_mod_exp
		add	esp, 1Ch
		cmp	dword ptr [esi], 0
		jnz	short loc_2B4
		call	_BN_new
		mov	[esi], eax
		test	eax, eax
		jz	short loc_32A

loc_2B4:				; CODE XREF: _gost_do_sign+103j
		push	ebx
		push	dword ptr [edi+10h]
		push	ebp
		push	dword ptr [esi]
		push	0
		call	_BN_div
		mov	eax, [esi]
		add	esp, 14h
		cmp	dword ptr [eax+4], 0
		jz	short loc_284
		push	ebx
		push	dword ptr [edi+10h]
		push	eax
		push	dword ptr [edi+1Ch]
		push	ebp
		call	_BN_mod_mul
		push	ebx
		push	dword ptr [edi+10h]
		push	[esp+38h+var_C]
		push	[esp+3Ch+var_8]
		push	[esp+40h+var_4]
		call	_BN_mod_mul
		add	esp, 28h
		cmp	dword ptr [esi+4], 0
		jnz	short loc_305
		call	_BN_new
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_32E

loc_305:				; CODE XREF: _gost_do_sign+153j
		push	ebx
		push	dword ptr [edi+10h]
		push	[esp+24h+var_4]
		push	ebp
		push	dword ptr [esi+4]
		call	_BN_mod_add
		mov	eax, [esi+4]
		add	esp, 14h
		cmp	dword ptr [eax+4], 0
		jz	loc_284
		mov	ebp, esi
		jmp	short loc_347
; ---------------------------------------------------------------------------

loc_32A:				; CODE XREF: _gost_do_sign+10Ej
		push	5Ch ; '\'
		jmp	short loc_334
; ---------------------------------------------------------------------------

loc_32E:				; CODE XREF: _gost_do_sign+15Fj
		push	69h ; 'i'
		jmp	short loc_334
; ---------------------------------------------------------------------------

loc_332:				; CODE XREF: _gost_do_sign+94j
					; _gost_do_sign+9Cj ...
		push	4Ah ; 'J'

loc_334:				; CODE XREF: _gost_do_sign+188j
					; _gost_do_sign+18Cj
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'
		push	70h ; 'p'
		call	_ERR_GOST_error
		add	esp, 10h
		xor	ebp, ebp

loc_347:				; CODE XREF: _gost_do_sign+184j
		pop	edi

$err$44:				; CODE XREF: _gost_do_sign+3Fj
					; _gost_do_sign+6Bj
		push	[esp+18h+var_C]
		call	_BN_free
		add	esp, 4
		test	ebx, ebx
		jz	short loc_367
		push	ebx
		call	_BN_CTX_end
		push	ebx
		call	_BN_CTX_free
		add	esp, 8

loc_367:				; CODE XREF: _gost_do_sign+1B2j
		test	ebp, ebp
		jnz	short loc_378
		test	esi, esi
		jz	short loc_378
		push	esi
		call	_DSA_SIG_free
		add	esp, 4

loc_378:				; CODE XREF: _gost_do_sign+1C5j
					; _gost_do_sign+1C9j
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_gost_do_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 384h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_do_verify
_gost_do_verify	proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 20h ; ' '
		call	__chkstk
		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BN_CTX_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_3BB
		push	0ACh ; '¬'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'
		push	71h ; 'q'
		call	_ERR_GOST_error
		add	esp, 10h
		mov	eax, ebx
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_3BB:				; CODE XREF: _gost_do_verify+17j
		push	ebp
		push	edi
		push	esi
		call	_BN_CTX_start
		mov	edi, [esp+34h+arg_C]
		mov	ebp, [esp+34h+arg_8]
		push	dword ptr [edi+10h]
		push	dword ptr [ebp+4]
		call	_BN_cmp
		add	esp, 0Ch
		cmp	eax, 1
		jge	loc_5CA
		push	dword ptr [edi+10h]
		push	dword ptr [ebp+0]
		call	_BN_cmp
		add	esp, 8
		cmp	eax, 1
		jge	loc_5CA
		push	[esp+30h+arg_0]
		call	_hashsum2bn
		push	esi
		mov	ebp, eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+3Ch+var_20], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+40h+var_1C], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+44h+var_8], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+48h+var_18], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+4Ch+var_14], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+50h+var_10], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+54h+var_C], eax
		call	_BN_CTX_get
		mov	ecx, eax
		add	esp, 24h
		mov	eax, [esp+30h+var_20]
		mov	[esp+30h+var_4], ecx
		test	eax, eax
		jz	loc_5A5
		cmp	[esp+30h+var_1C], ebx
		jz	loc_5A5
		cmp	[esp+30h+var_8], ebx
		jz	loc_5A5
		cmp	[esp+30h+var_18], ebx
		jz	loc_5A5
		cmp	[esp+30h+var_14], ebx
		jz	loc_5A5
		cmp	[esp+30h+var_10], ebx
		jz	loc_5A5
		cmp	[esp+30h+var_C], ebx
		jz	loc_5A5
		test	ecx, ecx
		jz	loc_5A5
		push	esi
		push	dword ptr [edi+10h]
		push	ebp
		push	eax
		push	0
		call	_BN_div
		mov	eax, [esp+44h+var_20]
		add	esp, 14h
		cmp	[eax+4], ebx
		jnz	short loc_4CD
		push	1
		push	ebp
		call	_BN_set_word
		add	esp, 8

loc_4CD:				; CODE XREF: _gost_do_verify+13Cj
		push	dword ptr [edi+10h]
		mov	ebx, [esp+34h+var_8]
		push	ebx
		call	_BN_copy
		push	2
		push	ebx
		call	_BN_sub_word
		push	esi
		push	dword ptr [edi+10h]
		push	ebx
		mov	ebx, [esp+4Ch+var_1C]
		push	ebp
		push	ebx
		call	_BN_mod_exp
		push	esi
		push	dword ptr [edi+10h]
		push	ebx
		mov	ebx, [esp+60h+arg_8]
		push	dword ptr [ebx+4]
		push	[esp+64h+var_18]
		call	_BN_mod_mul
		push	dword ptr [ebx]
		push	dword ptr [edi+10h]
		push	[esp+70h+var_20]
		call	_BN_sub
		add	esp, 44h
		push	esi
		push	dword ptr [edi+0Ch]
		push	[esp+38h+var_1C]
		push	[esp+3Ch+var_20]
		push	[esp+40h+var_14]
		call	_BN_mod_mul
		push	esi
		push	dword ptr [edi+0Ch]
		push	[esp+4Ch+var_18]
		push	dword ptr [edi+14h]
		push	[esp+54h+var_20]
		call	_BN_mod_exp
		push	esi
		push	dword ptr [edi+0Ch]
		push	[esp+60h+var_14]
		push	dword ptr [edi+18h]
		push	[esp+68h+var_10]
		call	_BN_mod_exp
		push	esi
		push	dword ptr [edi+0Ch]
		push	[esp+74h+var_10]
		push	[esp+78h+var_20]
		push	[esp+7Ch+var_C]
		call	_BN_mod_mul
		add	esp, 50h
		push	esi
		push	dword ptr [edi+10h]
		mov	edi, [esp+38h+var_4]
		push	[esp+38h+var_C]
		push	edi
		push	0
		call	_BN_div
		push	dword ptr [ebx]
		push	edi
		call	_BN_cmp
		add	esp, 1Ch
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		add	ebx, 1
		jnz	short $err$15
		push	0D5h ; 'Õ'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	7Eh ; '~'
		jmp	short loc_5B1
; ---------------------------------------------------------------------------

loc_5A5:				; CODE XREF: _gost_do_verify+DBj
					; _gost_do_verify+E5j ...
		push	0C0h ; 'À'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'

loc_5B1:				; CODE XREF: _gost_do_verify+21Fj
		push	71h ; 'q'
		call	_ERR_GOST_error
		add	esp, 10h

$err$15:				; CODE XREF: _gost_do_verify+211j
		test	ebp, ebp
		jz	short loc_5E0
		push	ebp
		call	_BN_free
		add	esp, 4
		jmp	short loc_5E0
; ---------------------------------------------------------------------------

loc_5CA:				; CODE XREF: _gost_do_verify+58j
					; _gost_do_verify+6Fj
		push	0B2h ; '²'
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	7Fh ; ''
		push	71h ; 'q'
		call	_ERR_GOST_error
		add	esp, 10h

loc_5E0:				; CODE XREF: _gost_do_verify+239j
					; _gost_do_verify+244j
		push	esi
		call	_BN_CTX_end
		push	esi
		call	_BN_CTX_free
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
_gost_do_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_sign_keygen
_gost_sign_keygen proc near

arg_0		= dword	ptr  4

		push	esi
		call	_BN_new
		mov	esi, [esp+4+arg_0]
		mov	[esi+1Ch], eax
		test	eax, eax
		jnz	short loc_62A
		push	128h
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	41h ; 'A'
		push	8Eh ; 'Ž'
		call	_ERR_GOST_error
		add	esp, 10h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_62A:				; CODE XREF: _gost_sign_keygen+Fj
		push	dword ptr [esi+10h]
		push	eax
		call	_BN_rand_range
		push	esi
		call	_gost94_compute_public
		add	esp, 0Ch
		pop	esi
		retn
_gost_sign_keygen endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 640h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _hashsum2bn
_hashsum2bn	proc near		; CODE XREF: _gost_do_sign+15p
					; _gost_do_verify+79p

var_24		= byte ptr -24h
var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 24h ; '$'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		push	esi
		mov	esi, [esp+28h+arg_0]
		lea	edx, [esp+28h+var_5]
		xor	ecx, ecx

loc_660:				; CODE XREF: _hashsum2bn+2Dj
		mov	al, [ecx+esi]
		lea	edx, [edx-1]
		inc	ecx
		mov	[edx+1], al
		cmp	ecx, 20h ; ' '
		jl	short loc_660
		cmp	[esp+28h+var_24], 0
		lea	ecx, [esp+28h+var_24]
		mov	eax, 20h ; ' '
		jnz	short loc_6B3
		nop

loc_680:				; CODE XREF: _hashsum2bn+49j
		test	eax, eax
		jz	short loc_68F
		inc	ecx
		dec	eax
		cmp	byte ptr [ecx],	0
		jz	short loc_680
		test	eax, eax
		jnz	short loc_6B3

loc_68F:				; CODE XREF: _hashsum2bn+42j
		call	_BN_new
		mov	esi, eax
		push	0
		push	esi
		call	_BN_set_word
		add	esp, 8
		mov	eax, esi
		pop	esi
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_6B3:				; CODE XREF: _hashsum2bn+3Dj
					; _hashsum2bn+4Dj
		push	0
		push	eax
		push	ecx
		call	_BN_bin2bn
		mov	ecx, [esp+34h+var_4]
		add	esp, 0Ch
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
_hashsum2bn	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl pack_sign_cp(int,	size_t Size, void *Dst,	int)
		public _pack_sign_cp
_pack_sign_cp	proc near

arg_0		= dword	ptr  4
Size		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Dst]
		push	edi
		mov	edi, [esp+10h+Size]
		lea	ecx, [edi+edi]
		push	ecx		; Size
		push	0		; Val
		push	esi		; Dst
		mov	[eax], ecx
		call	_memset
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, [ebp+4]
		push	eax
		mov	[esp+20h+Size],	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 10h
		cdq
		and	edx, 7
		lea	ebx, [edx+eax]
		sar	ebx, 3
		cmp	ebx, edi
		jg	short loc_72F
		push	edi		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		mov	eax, edi
		sub	eax, ebx
		add	eax, esi
		push	eax
		push	[esp+20h+Size]
		call	_BN_bn2bin
		add	esp, 14h

loc_72F:				; CODE XREF: _pack_sign_cp+41j
		mov	eax, [ebp+0]
		add	esi, edi
		push	eax
		mov	[esp+14h+Size],	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	ebx, [edx+eax]
		sar	ebx, 3
		cmp	ebx, edi
		jg	short loc_76C
		push	edi		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		sub	esi, ebx
		add	esi, edi
		push	esi
		push	[esp+20h+Size]
		call	_BN_bn2bin
		add	esp, 14h

loc_76C:				; CODE XREF: _pack_sign_cp+80j
		push	ebp
		call	_DSA_SIG_free
		add	esp, 4
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_pack_sign_cp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 780h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl store_bignum(int,	void *Dst, size_t Size)
		public _store_bignum
_store_bignum	proc near

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		push	edi
		push	[esp+8+arg_0]
		call	_BN_num_bits
		mov	edi, [esp+0Ch+Size]
		add	eax, 7
		cdq
		add	esp, 4
		and	edx, 7
		lea	ebx, [edx+eax]
		sar	ebx, 3
		cmp	ebx, edi
		jle	short loc_7A8
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_7A8:				; CODE XREF: _store_bignum+21j
		push	esi
		mov	esi, [esp+0Ch+Dst]
		push	edi		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		sub	esi, ebx
		add	esi, edi
		push	esi
		push	[esp+1Ch+arg_0]
		call	_BN_bn2bin
		add	esp, 14h
		mov	eax, 1
		pop	esi
		pop	edi
		pop	ebx
		retn
_store_bignum	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _unpack_cp_signature
_unpack_cp_signature proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		call	_DSA_SIG_new
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_7F9
		push	146h
		push	offset ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ ; ".\\engines\\ccgost\\gost_sign.c"
		push	76h ; 'v'
		push	89h ; '‰'
		call	_ERR_GOST_error
		add	esp, 10h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_7F9:				; CODE XREF: _unpack_cp_signature+Aj
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		shr	edi, 1
		push	edi
		push	esi
		call	_getbnfrombuf
		mov	[ebx+4], eax
		lea	eax, [edi+esi]
		push	edi
		push	eax
		call	_getbnfrombuf
		add	esp, 10h
		mov	[ebx], eax
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
_unpack_cp_signature endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 824h
; COMDAT (pick any)
		public ??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@
; `string'
??_C@_0BN@CDKEEHFM@?4?2engines?2ccgost?2gost_sign?4c?$AA@ db '.\engines\ccgost\gost_sign.c',0
					; DATA XREF: _fill_GOST94_params+2Do
					; _gost94_compute_public+10o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_CTX_new:near	; CODE XREF: _gost94_compute_public+26p
					; _gost_do_sign+21p ...
		extrn _BN_CTX_free:near	; CODE XREF: _gost94_compute_public+6Cp
					; _gost94_compute_public+8Ap ...
		extrn _BN_CTX_start:near ; CODE	XREF: _gost_do_sign+45p
					; _gost_do_verify+3Ap
		extrn _BN_CTX_get:near	; CODE XREF: _gost_do_sign+72p
					; _gost_do_sign+7Ap ...
		extrn _BN_CTX_end:near	; CODE XREF: _gost_do_sign+1B5p
					; _gost_do_verify+25Dp
		extrn _BN_rand_range:near ; CODE XREF: _gost_do_sign+E7p
					; _gost_sign_keygen+32p
		extrn _BN_num_bits:near	; CODE XREF: _pack_sign_cp+2Ap
					; _pack_sign_cp+69p ...
		extrn _BN_new:near	; CODE XREF: _getbnfrombuf+2Dp
					; _gost94_compute_public:loc_154p ...
		extrn _BN_copy:near	; CODE XREF: _gost_do_verify+151p
		extrn _BN_bin2bn:near	; CODE XREF: _getbnfrombuf+23p
					; _hashsum2bn+77p
		extrn _BN_bn2bin:near	; CODE XREF: _pack_sign_cp+57p
					; _pack_sign_cp+94p ...
		extrn _BN_sub:near	; CODE XREF: _gost_do_verify+18Cp
		extrn _BN_div:near	; CODE XREF: _gost_do_sign+B9p
					; _gost_do_sign+119p ...
		extrn _BN_mod_add:near	; CODE XREF: _gost_do_sign+16Dp
		extrn _BN_mod_mul:near	; CODE XREF: _gost_do_sign+132p
					; _gost_do_sign+147p ...
		extrn _BN_sub_word:near	; CODE XREF: _gost_do_verify+159p
		extrn _BN_set_word:near	; CODE XREF: _getbnfrombuf+37p
					; _gost_do_sign+CDp ...
		extrn _BN_cmp:near	; CODE XREF: _gost_do_verify+4Dp
					; _gost_do_verify+64p ...
		extrn _BN_free:near	; CODE XREF: _fill_GOST94_params+56p
					; _fill_GOST94_params+7Bp ...
		extrn _BN_mod_exp:near	; CODE XREF: _gost94_compute_public+84p
					; _gost_do_sign+F8p ...
		extrn _BN_dec2bn:near	; CODE XREF: _fill_GOST94_params+68p
					; _fill_GOST94_params+8Dp ...
		extrn _DSA_SIG_new:near	; CODE XREF: _gost_do_sign+4Dp
					; _unpack_cp_signature+1p
		extrn _DSA_SIG_free:near ; CODE	XREF: _gost_do_sign+1CCp
					; _pack_sign_cp+9Dp
		extrn _ERR_GOST_error:near ; CODE XREF:	_fill_GOST94_params+39p
					; _gost94_compute_public+19p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _hashsum2bn+6Ap
					; _hashsum2bn+86p
		extrn __chkstk:near	; CODE XREF: _gost_do_sign+5p
					; _gost_do_verify+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _pack_sign_cp+19p
					; _pack_sign_cp+47p ...
		extrn _R3410_paramset:near ; DATA XREF:	_fill_GOST94_paramsr
					; _fill_GOST94_params+6o
		extrn ___security_cookie:near ;	DATA XREF: _hashsum2bn+Ar


		end
