;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5DF0F8B5F004FA8B288ED6E860B14AC0
; Input	CRC32 :	AE3A807B

; File Name   :	C:\compspace\Diff\openssl\obj\asn_pack.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_pack
_ASN1_item_pack	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	short loc_10
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_41

loc_10:					; CODE XREF: _ASN1_item_pack+8j
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_3B
		push	0ACh ; '¨'

loc_20:					; CODE XREF: _ASN1_item_pack+9Bj
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	41h ; 'A'
		push	0C6h ; '∆'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3B:					; CODE XREF: _ASN1_item_pack+19j
		test	edi, edi
		jz	short loc_41
		mov	[edi], esi

loc_41:					; CODE XREF: _ASN1_item_pack+Ej
					; _ASN1_item_pack+3Dj
		mov	eax, [esi+8]
		lea	edi, [esi+8]
		test	eax, eax
		jz	short loc_5A
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [edi], 0

loc_5A:					; CODE XREF: _ASN1_item_pack+49j
		push	[esp+8+arg_4]
		push	edi
		push	[esp+10h+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_91
		push	0BAh ; '∫'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	70h ; 'p'
		push	0C6h ; '∆'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_91:					; CODE XREF: _ASN1_item_pack+6Fj
		cmp	dword ptr [edi], 0
		jnz	short loc_9D
		push	0BEh ; 'æ'
		jmp	short loc_20
; ---------------------------------------------------------------------------

loc_9D:					; CODE XREF: _ASN1_item_pack+94j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_ASN1_item_pack	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_unpack
_ASN1_item_unpack proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	esi
		push	[esp+4+arg_4]
		mov	eax, [ecx+8]
		push	dword ptr [ecx]
		mov	[esp+0Ch+arg_0], eax
		lea	eax, [esp+0Ch+arg_0]
		push	eax
		push	0
		call	_ASN1_item_d2i
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_E8
		push	0CDh ; 'Õ'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	6Eh ; 'n'
		push	0C7h ; '«'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi

loc_E8:					; CODE XREF: _ASN1_item_unpack+25j
		pop	esi
		retn
_ASN1_item_unpack endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_pack_string
_ASN1_pack_string proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		test	esi, esi
		jz	short loc_FC
		mov	edi, [esi]
		test	edi, edi
		jnz	short loc_12A

loc_FC:					; CODE XREF: _ASN1_pack_string+8j
		call	_ASN1_STRING_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_124
		push	86h ; 'Ü'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	41h ; 'A'
		push	7Ch ; '|'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_124:				; CODE XREF: _ASN1_pack_string+19j
		test	esi, esi
		jz	short loc_12A
		mov	[esi], edi

loc_12A:				; CODE XREF: _ASN1_pack_string+Ej
					; _ASN1_pack_string+3Aj
		push	0
		push	[esp+0Ch+arg_0]
		call	[esp+10h+arg_4]
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_14B
		push	8Fh ; 'è'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	70h ; 'p'
		jmp	short loc_172
; ---------------------------------------------------------------------------

loc_14B:				; CODE XREF: _ASN1_pack_string+4Fj
		push	92h ; 'í'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+8+arg_8], eax
		test	eax, eax
		jnz	short loc_19F
		push	93h ; 'ì'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	41h ; 'A'

loc_172:				; CODE XREF: _ASN1_pack_string+5Dj
		push	7Ch ; '|'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

$err$15:
		test	esi, esi
		jz	short loc_187
		cmp	dword ptr [esi], 0
		jnz	short loc_19A

loc_187:				; CODE XREF: _ASN1_pack_string+94j
		push	edi
		call	_ASN1_STRING_free
		add	esp, 4
		test	esi, esi
		jz	short loc_19A
		mov	dword ptr [esi], 0

loc_19A:				; CODE XREF: _ASN1_pack_string+99j
					; _ASN1_pack_string+A6j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_19F:				; CODE XREF: _ASN1_pack_string+78j
		mov	[edi+8], eax
		lea	eax, [esp+8+arg_8]
		push	eax
		push	[esp+0Ch+arg_0]
		call	[esp+10h+arg_4]
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_ASN1_pack_string endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_seq_pack
_ASN1_seq_pack	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	edi
		push	0
		push	0
		push	10h
		push	[esp+14h+arg_4]
		push	0
		push	[esp+1Ch+arg_0]
		call	_i2d_ASN1_SET
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jnz	short loc_1FB
		push	5Fh ; '_'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	70h ; 'p'
		push	7Eh ; '~'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1FB:				; CODE XREF: _ASN1_seq_pack+27j
		push	esi
		push	62h ; 'b'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	edi
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_22D
		push	63h ; 'c'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	41h ; 'A'
		push	7Eh ; '~'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_22D:				; CODE XREF: _ASN1_seq_pack+58j
		push	0
		push	0
		push	10h
		push	[esp+18h+arg_4]
		lea	eax, [esp+1Ch+var_4]
		mov	[esp+1Ch+var_4], esi
		push	eax
		push	[esp+20h+arg_0]
		call	_i2d_ASN1_SET
		mov	eax, [esp+24h+arg_C]
		add	esp, 18h
		test	eax, eax
		jz	short loc_256
		mov	[eax], edi

loc_256:				; CODE XREF: _ASN1_seq_pack+9Aj
		mov	eax, [esp+0Ch+arg_8]
		test	eax, eax
		jz	short loc_260
		mov	[eax], esi

loc_260:				; CODE XREF: _ASN1_seq_pack+A4j
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ecx
		retn
_ASN1_seq_pack	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_seq_unpack
_ASN1_seq_unpack proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	0
		push	10h
		push	[esp+0Ch+arg_C]
		mov	[esp+10h+arg_0], eax
		lea	eax, [esp+10h+arg_0]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	eax
		push	0
		call	_d2i_ASN1_SET
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jnz	short loc_2AD
		push	4Fh ; 'O'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	6Eh ; 'n'
		push	7Fh ; ''
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi

loc_2AD:				; CODE XREF: _ASN1_seq_unpack+2Cj
		pop	esi
		retn
_ASN1_seq_unpack endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_unpack_string
_ASN1_unpack_string proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	esi
		mov	eax, [ecx+8]
		push	dword ptr [ecx]
		mov	[esp+8+arg_0], eax
		lea	eax, [esp+8+arg_0]
		push	eax
		push	0
		call	[esp+10h+arg_4]
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_2EC
		push	79h ; 'y'
		push	offset ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ ; ".\\crypto\\asn1\\asn_pack.c"
		push	6Eh ; 'n'
		push	88h ; 'à'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi

loc_2EC:				; CODE XREF: _ASN1_unpack_string+20j
		pop	esi
		retn
_ASN1_unpack_string endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F0h
; COMDAT (pick any)
		public ??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@
; `string'
??_C@_0BJ@GENBDNBC@?4?2crypto?2asn1?2asn_pack?4c?$AA@ db '.\crypto\asn1\asn_pack.c',0
					; DATA XREF: _ASN1_item_pack:loc_20o
					; _ASN1_item_pack+76o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_pack_string+6Ap
					; _ASN1_seq_pack+4Cp
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_item_pack+4Cp
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_item_pack+2Ep
					; _ASN1_item_pack+84p ...
		extrn _ASN1_STRING_new:near ; CODE XREF: _ASN1_item_pack:loc_10p
					; _ASN1_pack_string:loc_FCp
		extrn _ASN1_STRING_free:near ; CODE XREF: _ASN1_pack_string+9Cp
		extrn _i2d_ASN1_SET:near ; CODE	XREF: _ASN1_seq_pack+1Bp
					; _ASN1_seq_pack+8Cp
		extrn _d2i_ASN1_SET:near ; CODE	XREF: _ASN1_seq_unpack+20p
		extrn _ASN1_item_d2i:near ; CODE XREF: _ASN1_item_unpack+19p
		extrn _ASN1_item_i2d:near ; CODE XREF: _ASN1_item_pack+63p
		extrn __chkstk:near	; CODE XREF: _ASN1_seq_pack+5p


		end
