;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FCCC7B5EFE9C7F55A8E4BFE784F68FFF
; Input	CRC32 :	C74AE126

; File Name   :	C:\compspace\Diff\openssl\obj\pem_seal.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_SealFinal
_PEM_SealFinal	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_14]
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		xor	ebx, ebx
		push	esi
		xor	esi, esi
		cmp	dword ptr [eax], 6
		jz	short loc_3B
		push	99h ; '™'
		push	offset ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ ; ".\\crypto\\pem\\pem_seal.c"
		push	6Eh ; 'n'
		push	6Eh ; 'n'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$12
; ---------------------------------------------------------------------------

loc_3B:					; CODE XREF: _PEM_SealFinal+1Cj
		push	dword ptr [eax+14h]
		call	_RSA_size
		mov	ecx, 64h ; 'd'
		cmp	eax, ecx
		push	9Fh ; 'Ÿ'
		cmovb	eax, ecx
		mov	[esp+18h+arg_0], eax
		add	eax, eax
		push	offset ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ ; ".\\crypto\\pem\\pem_seal.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_89
		push	0A1h ; '¡'
		push	offset ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ ; ".\\crypto\\pem\\pem_seal.c"
		push	41h ; 'A'
		push	6Eh ; 'n'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$12
; ---------------------------------------------------------------------------

loc_89:					; CODE XREF: _PEM_SealFinal+6Aj
		lea	eax, [esp+10h+arg_0]
		push	eax
		lea	eax, [ebp+78h]
		push	ebx
		push	eax
		call	_EVP_EncryptFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$12
		mov	esi, [esp+10h+arg_C]
		lea	eax, [esp+10h+var_4]
		push	edi
		push	[esp+14h+arg_0]
		push	ebx
		push	eax
		push	esi
		push	ebp
		call	_EVP_EncodeUpdate
		mov	edi, [esp+28h+arg_10]
		lea	ecx, [esp+28h+var_4]
		mov	eax, [esp+28h+var_4]
		push	ecx
		mov	[edi], eax
		add	eax, esi
		push	eax
		push	ebp
		call	_EVP_EncodeFinal
		mov	eax, [esp+34h+var_4]
		add	[edi], eax
		lea	eax, [esp+34h+arg_0]
		push	[esp+34h+arg_14]
		push	eax
		lea	eax, [ebp+60h]
		push	ebx
		push	eax
		call	_EVP_SignFinal
		add	esp, 30h
		pop	edi
		test	eax, eax
		jz	short loc_10C
		push	[esp+10h+arg_0]
		push	ebx
		push	[esp+18h+arg_4]
		call	_EVP_EncodeBlock
		mov	ecx, [esp+1Ch+arg_8]
		add	esp, 0Ch
		mov	esi, 1
		mov	[ecx], eax
		jmp	short $err$12
; ---------------------------------------------------------------------------

loc_10C:				; CODE XREF: _PEM_SealFinal+ECj
		xor	esi, esi

$err$12:				; CODE XREF: _PEM_SealFinal+36j
					; _PEM_SealFinal+84j ...
		lea	eax, [ebp+60h]
		push	eax
		call	_EVP_MD_CTX_cleanup
		lea	ecx, [ebp+78h]
		push	ecx
		call	_EVP_CIPHER_CTX_cleanup
		add	esp, 8
		test	ebx, ebx
		jz	short loc_130
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_130:				; CODE XREF: _PEM_SealFinal+125j
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_PEM_SealFinal	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_SealInit
_PEM_SealInit	proc near

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 5Ch ; '\'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+5Ch+var_4], eax
		mov	eax, [esp+5Ch+arg_0]
		push	ebx
		mov	ebx, [esp+60h+arg_18]
		mov	[esp+60h+var_5C], eax
		mov	eax, [esp+60h+arg_4]
		push	ebp
		mov	[esp+64h+var_48], eax
		xor	ebp, ebp
		mov	eax, [esp+64h+arg_8]
		push	esi
		mov	[esp+68h+var_50], eax
		xor	esi, esi
		mov	eax, [esp+68h+arg_10]
		mov	[esp+68h+var_58], eax
		mov	eax, [esp+68h+arg_14]
		push	edi
		mov	edi, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_4C], eax
		mov	[esp+6Ch+var_54], 0FFFFFFFFh
		cmp	[esp+6Ch+arg_1C], esi
		jle	short loc_1BB

loc_199:				; CODE XREF: _PEM_SealInit+81j
		mov	eax, [ebx+esi*4]
		cmp	dword ptr [eax], 6
		jnz	short loc_1F2
		push	dword ptr [eax+14h]
		call	_RSA_size
		add	esp, 4
		cmp	eax, ebp
		cmovg	ebp, eax
		inc	esi
		cmp	esi, [esp+6Ch+arg_1C]
		jl	short loc_199

loc_1BB:				; CODE XREF: _PEM_SealInit+5Fj
		push	58h ; 'X'
		lea	eax, ds:0[ebp*2]
		push	offset ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ ; ".\\crypto\\pem\\pem_seal.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_20C
		push	5Ah ; 'Z'
		push	offset ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ ; ".\\crypto\\pem\\pem_seal.c"
		push	41h ; 'A'
		push	6Fh ; 'o'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_2D0
; ---------------------------------------------------------------------------

loc_1F2:				; CODE XREF: _PEM_SealInit+67j
		push	51h ; 'Q'
		push	offset ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ ; ".\\crypto\\pem\\pem_seal.c"
		push	6Eh ; 'n'
		push	6Fh ; 'o'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_2D0
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: _PEM_SealInit+9Ej
		mov	esi, [esp+6Ch+var_5C]
		push	esi
		call	_EVP_EncodeInit
		add	esi, 60h ; '`'
		push	esi
		call	_EVP_MD_CTX_init
		push	[esp+74h+var_50]
		push	esi
		call	_EVP_DigestInit
		add	esp, 10h
		test	eax, eax
		jz	$err$25
		mov	esi, [esp+6Ch+var_5C]
		add	esi, 78h ; 'x'
		push	esi
		call	_EVP_CIPHER_CTX_init
		push	[esp+70h+arg_1C]
		push	ebx
		push	[esp+78h+var_4C]
		push	[esp+7Ch+var_58]
		push	edi
		push	[esp+84h+var_48]
		push	esi
		call	_EVP_SealInit
		mov	esi, eax
		add	esp, 20h
		mov	[esp+6Ch+var_54], esi
		test	esi, esi
		jle	short $err$25
		mov	eax, [esp+6Ch+arg_1C]
		test	eax, eax
		jle	short loc_2C3
		mov	ecx, [esp+6Ch+var_58]
		sub	ebx, ecx
		sub	ecx, edi
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_58], ecx
		nop	dword ptr [eax+00h]

loc_288:				; CODE XREF: _PEM_SealInit+182j
		lea	esi, [ecx+edi]
		mov	eax, [esi+ebx]
		push	dword ptr [eax+14h]
		call	_RSA_size
		push	eax
		push	dword ptr [edi]
		push	ebp
		call	_EVP_EncodeBlock
		mov	[esi], eax
		inc	eax
		push	eax		; Size
		push	ebp		; Src
		push	dword ptr [edi]	; Dst
		call	_memcpy
		mov	ecx, [esp+88h+var_58]
		lea	edi, [edi+4]
		add	esp, 1Ch
		sub	[esp+6Ch+var_5C], 1
		jnz	short loc_288
		mov	eax, [esp+6Ch+arg_1C]

loc_2C3:				; CODE XREF: _PEM_SealInit+13Aj
		mov	[esp+6Ch+var_54], eax

$err$25:				; CODE XREF: _PEM_SealInit+F6j
					; _PEM_SealInit+12Fj
		push	ebp
		call	_CRYPTO_free
		add	esp, 4

loc_2D0:				; CODE XREF: _PEM_SealInit+B5j
					; _PEM_SealInit+CFj
		lea	eax, [esp+6Ch+var_44]
		push	40h ; '@'
		push	eax
		call	_OPENSSL_cleanse
		mov	ecx, [esp+74h+var_4]
		add	esp, 8
		mov	eax, [esp+6Ch+var_54]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
_PEM_SealInit	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_SealUpdate
_PEM_SealUpdate	proc near

var_654		= dword	ptr -654h
var_650		= dword	ptr -650h
var_64C		= dword	ptr -64Ch
var_648		= dword	ptr -648h
var_644		= byte ptr -644h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 654h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+654h+var_4], eax
		mov	eax, [esp+654h+arg_8]
		push	ebx
		mov	ebx, [esp+658h+arg_C]
		push	ebp
		mov	ebp, [esp+65Ch+arg_4]
		push	esi
		mov	esi, [esp+660h+arg_0]
		push	edi
		mov	edi, [esp+664h+arg_10]
		push	edi
		mov	[esp+668h+var_64C], eax
		mov	dword ptr [eax], 0
		lea	eax, [esi+60h]
		push	ebx
		push	eax
		mov	[esp+670h+var_650], esi
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	edi, edi
		jle	short loc_3BD
		lea	eax, [esi+78h]
		mov	ecx, 4B0h
		mov	[esp+664h+var_648], eax
		nop	dword ptr [eax+eax+00h]

loc_368:				; CODE XREF: _PEM_SealUpdate+C3j
		cmp	edi, 4B0h
		mov	esi, edi
		cmovg	esi, ecx
		lea	ecx, [esp+664h+var_654]
		push	esi
		push	ebx
		push	ecx
		lea	ecx, [esp+670h+var_644]
		push	ecx
		push	eax
		call	_EVP_EncryptUpdate
		push	[esp+678h+var_654]
		lea	eax, [esp+67Ch+var_644]
		push	eax
		lea	eax, [esp+680h+var_654]
		push	eax
		push	ebp
		push	[esp+688h+var_650]
		call	_EVP_EncodeUpdate
		mov	ecx, [esp+68Ch+var_64C]
		sub	edi, esi
		mov	eax, [esp+68Ch+var_654]
		add	esp, 28h
		add	ebp, eax
		add	ebx, esi
		add	[ecx], eax
		mov	ecx, 4B0h
		mov	eax, [esp+664h+var_648]
		test	edi, edi
		jg	short loc_368

loc_3BD:				; CODE XREF: _PEM_SealUpdate+5Dj
		mov	ecx, [esp+664h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 654h
		retn
_PEM_SealUpdate	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D8h
; COMDAT (pick any)
		public ??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@
; `string'
??_C@_0BI@JOBLAJDB@?4?2crypto?2pem?2pem_seal?4c?$AA@ db	'.\crypto\pem\pem_seal.c',0
					; DATA XREF: _PEM_SealFinal+23o
					; _PEM_SealFinal+58o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _PEM_SealFinal+5Ep
					; _PEM_SealInit+92p
		extrn _CRYPTO_free:near	; CODE XREF: _PEM_SealFinal+128p
					; _PEM_SealInit+190p
		extrn _OPENSSL_cleanse:near ; CODE XREF: _PEM_SealInit+19Fp
		extrn _ERR_put_error:near ; CODE XREF: _PEM_SealFinal+2Ep
					; _PEM_SealFinal+7Cp ...
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _PEM_SealInit+E2p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _PEM_SealFinal+112p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _PEM_SealUpdate+53p
		extrn _EVP_DigestInit:near ; CODE XREF:	_PEM_SealInit+ECp
		extrn _EVP_EncryptUpdate:near ;	CODE XREF: _PEM_SealUpdate+88p
		extrn _EVP_EncryptFinal_ex:near	; CODE XREF: _PEM_SealFinal+93p
		extrn _EVP_SignFinal:near ; CODE XREF: _PEM_SealFinal+E1p
		extrn _EVP_SealInit:near ; CODE	XREF: _PEM_SealInit+11Fp
		extrn _EVP_EncodeInit:near ; CODE XREF:	_PEM_SealInit+D9p
		extrn _EVP_EncodeUpdate:near ; CODE XREF: _PEM_SealFinal+B0p
					; _PEM_SealUpdate+A0p
		extrn _EVP_EncodeFinal:near ; CODE XREF: _PEM_SealFinal+C8p
		extrn _EVP_EncodeBlock:near ; CODE XREF: _PEM_SealFinal+F7p
					; _PEM_SealInit+162p
		extrn _EVP_CIPHER_CTX_init:near	; CODE XREF: _PEM_SealInit+104p
		extrn _EVP_CIPHER_CTX_cleanup:near ; CODE XREF:	_PEM_SealFinal+11Bp
		extrn _RSA_size:near	; CODE XREF: _PEM_SealFinal+3Ep
					; _PEM_SealInit+6Cp ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _PEM_SealInit+1B5p
					; _PEM_SealUpdate+D2p
		extrn __chkstk:near	; CODE XREF: _PEM_SealFinal+5p
					; _PEM_SealInit+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _PEM_SealInit+16Ep
		extrn ___security_cookie:near ;	DATA XREF: _PEM_SealInit+Ar
					; _PEM_SealUpdate+Ar


		end
