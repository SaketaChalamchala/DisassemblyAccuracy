;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DBDD742879D54CE16CFFEB627179F87F
; Input	CRC32 :	1E10DE00

; File Name   :	C:\compspace\Diff\openssl\obj\t_bitst.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_name_print
_ASN1_BIT_STRING_name_print proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	bl, 1
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+10h+arg_C]
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	edi
		call	_BIO_printf
		mov	esi, [esp+1Ch+arg_8]
		add	esp, 10h
		add	esi, 4
		cmp	dword ptr [esi], 0
		jz	short loc_69
		push	ebp
		mov	ebp, [esp+10h+arg_4]

loc_31:					; CODE XREF: _ASN1_BIT_STRING_name_print+66j
		push	dword ptr [esi-4]
		push	ebp
		call	_ASN1_BIT_STRING_get_bit
		add	esp, 8
		test	eax, eax
		jz	short loc_60
		test	bl, bl
		jnz	short loc_53
		push	offset ??_C@_02KEGNLNML@?0?5?$AA@ ; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8

loc_53:					; CODE XREF: _ASN1_BIT_STRING_name_print+43j
		push	dword ptr [esi]
		push	edi
		call	_BIO_puts
		add	esp, 8
		xor	bl, bl

loc_60:					; CODE XREF: _ASN1_BIT_STRING_name_print+3Fj
		add	esi, 0Ch
		cmp	dword ptr [esi], 0
		jnz	short loc_31
		pop	ebp

loc_69:					; CODE XREF: _ASN1_BIT_STRING_name_print+2Aj
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		retn
_ASN1_BIT_STRING_name_print endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_num_asc
_ASN1_BIT_STRING_num_asc proc near	; CODE XREF: _ASN1_BIT_STRING_set_asc+8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		cmp	dword ptr [esi+4], 0
		jz	short loc_F5
		mov	edi, [esp+8+arg_0]

loc_90:					; CODE XREF: _ASN1_BIT_STRING_num_asc+73j
		mov	eax, [esi+8]
		mov	ecx, edi

loc_95:					; CODE XREF: _ASN1_BIT_STRING_num_asc+2Fj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_B5
		test	dl, dl
		jz	short loc_B1
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_B5
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_95

loc_B1:					; CODE XREF: _ASN1_BIT_STRING_num_asc+1Dj
		xor	eax, eax
		jmp	short loc_BA
; ---------------------------------------------------------------------------

loc_B5:					; CODE XREF: _ASN1_BIT_STRING_num_asc+19j
					; _ASN1_BIT_STRING_num_asc+25j
		sbb	eax, eax
		or	eax, 1

loc_BA:					; CODE XREF: _ASN1_BIT_STRING_num_asc+33j
		test	eax, eax
		jz	short loc_FB
		mov	ecx, [esi+4]
		mov	eax, edi

loc_C3:					; CODE XREF: _ASN1_BIT_STRING_num_asc+5Dj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_E3
		test	dl, dl
		jz	short loc_DF
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_E3
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_C3

loc_DF:					; CODE XREF: _ASN1_BIT_STRING_num_asc+4Bj
		xor	eax, eax
		jmp	short loc_E8
; ---------------------------------------------------------------------------

loc_E3:					; CODE XREF: _ASN1_BIT_STRING_num_asc+47j
					; _ASN1_BIT_STRING_num_asc+53j
		sbb	eax, eax
		or	eax, 1

loc_E8:					; CODE XREF: _ASN1_BIT_STRING_num_asc+61j
		test	eax, eax
		jz	short loc_FB
		add	esi, 0Ch
		cmp	dword ptr [esi+4], 0
		jnz	short loc_90

loc_F5:					; CODE XREF: _ASN1_BIT_STRING_num_asc+Aj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_FB:					; CODE XREF: _ASN1_BIT_STRING_num_asc+3Cj
					; _ASN1_BIT_STRING_num_asc+6Aj
		mov	eax, [esi]
		pop	edi
		pop	esi
		retn
_ASN1_BIT_STRING_num_asc endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 100h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_set_asc
_ASN1_BIT_STRING_set_asc proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_4]
		call	_ASN1_BIT_STRING_num_asc
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jns	short loc_119

loc_116:				; CODE XREF: _ASN1_BIT_STRING_set_asc+31j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_119:				; CODE XREF: _ASN1_BIT_STRING_set_asc+14j
		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_133
		push	[esp+arg_8]
		push	ecx
		push	eax
		call	_ASN1_BIT_STRING_set_bit
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_116

loc_133:				; CODE XREF: _ASN1_BIT_STRING_set_asc+1Fj
		mov	eax, 1
		retn
_ASN1_BIT_STRING_set_asc endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 13Ch
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _ASN1_BIT_STRING_name_print+9o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 140h
; COMDAT (pick any)
		public ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@
; `string'
??_C@_03HIJPJGOM@?$CF?$CKs?$AA@	dd 732A25h ; DATA XREF:	_ASN1_BIT_STRING_name_print+12o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 144h
; COMDAT (pick any)
		public ??_C@_02KEGNLNML@?0?5?$AA@
; `string'
??_C@_02KEGNLNML@?0?5?$AA@ db 2Ch, 20h,	0 ; DATA XREF: _ASN1_BIT_STRING_name_print+45o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 148h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _ASN1_BIT_STRING_name_print:loc_69o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_puts:near	; CODE XREF: _ASN1_BIT_STRING_name_print+4Bp
					; _ASN1_BIT_STRING_name_print+56p ...
		extrn _BIO_printf:near	; CODE XREF: _ASN1_BIT_STRING_name_print+18p
		extrn _ASN1_BIT_STRING_set_bit:near
					; CODE XREF: _ASN1_BIT_STRING_set_asc+27p
		extrn _ASN1_BIT_STRING_get_bit:near
					; CODE XREF: _ASN1_BIT_STRING_name_print+35p


		end
