;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A16EA09F54B1FECAF1AA93FF5ABCBFED
; Input	CRC32 :	AFC28BA6

; File Name   :	C:\compspace\Diff\openssl\obj\d1_pkt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl do_dtls1_write(int, int, void *Src, size_t Size, int)
		public _do_dtls1_write
_do_dtls1_write	proc near		; CODE XREF: _dtls1_dispatch_alert+3Fp
					; _dtls1_write_app_data_bytes+8Ep ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+108h], 0
		jz	short loc_47
		push	offset ??_C@_01GBGANLPD@0?$AA@ ; "0"
		push	5E1h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		call	_OpenSSLDie
		push	[esp+14h+Size]
		push	[esp+18h+Src]
		push	[esp+1Ch+arg_4]
		push	esi
		call	_ssl3_write_pending
		add	esp, 1Ch
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_47:					; CODE XREF: _do_dtls1_write+19j
		cmp	dword ptr [eax+18Ch], 0
		jz	short loc_64
		mov	eax, [esi+8]
		push	esi
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 4
		test	eax, eax
		jle	loc_2FB

loc_64:					; CODE XREF: _do_dtls1_write+4Ej
		cmp	[esp+8+Size], 0
		jnz	short loc_77
		cmp	[esp+8+arg_10],	0
		jnz	short loc_77
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_77:					; CODE XREF: _do_dtls1_write+69j
					; _do_dtls1_write+70j
		cmp	dword ptr [esi+0C0h], 0
		push	ebx
		mov	ebx, [esi+58h]
		push	ebp
		push	edi
		jz	short loc_C5
		cmp	dword ptr [esi+8Ch], 0
		jz	short loc_C5
		push	dword ptr [esi+90h]
		call	_EVP_MD_CTX_md
		add	esp, 4
		test	eax, eax
		jz	short loc_C5
		push	dword ptr [esi+90h]
		call	_EVP_MD_CTX_md
		push	eax
		call	_EVP_MD_size
		mov	ecx, eax
		add	esp, 8
		mov	[esp+14h+arg_0], ecx
		test	ecx, ecx
		js	$err$36
		jmp	short loc_CD
; ---------------------------------------------------------------------------

loc_C5:					; CODE XREF: _do_dtls1_write+84j
					; _do_dtls1_write+8Dj ...
		mov	[esp+14h+arg_0], 0

loc_CD:					; CODE XREF: _do_dtls1_write+C3j
		mov	edi, [ebx+0FCh]
		mov	eax, [esp+14h+arg_4]
		mov	[edi], al
		mov	[ebx+130h], eax
		mov	eax, [esi+8]
		cmp	dword ptr [eax], 1FFFFh
		jnz	short loc_F2
		mov	word ptr [edi+1], 0FFFEh
		jmp	short loc_FF
; ---------------------------------------------------------------------------

loc_F2:					; CODE XREF: _do_dtls1_write+E8j
		mov	eax, [esi]
		sar	eax, 8
		mov	[edi+1], al
		mov	al, [esi]
		mov	[edi+2], al

loc_FF:					; CODE XREF: _do_dtls1_write+F0j
		mov	eax, [esi+8Ch]
		add	edi, 3
		mov	[esp+14h+var_4], edi
		add	edi, 0Ah
		test	eax, eax
		jz	short loc_13B
		push	eax
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_197
		push	dword ptr [esi+8Ch]
		call	_EVP_CIPHER_CTX_iv_length
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, 1
		jg	short loc_13D

loc_13B:				; CODE XREF: _do_dtls1_write+111j
		xor	ebp, ebp

loc_13D:				; CODE XREF: _do_dtls1_write+139j
					; _do_dtls1_write+1A4j
		mov	eax, [esp+14h+Size]
		lea	edx, [edi+ebp]
		mov	ecx, [esp+14h+Src]
		mov	[ebx+13Ch], edx
		mov	[ebx+134h], eax
		mov	[ebx+140h], ecx
		cmp	dword ptr [esi+94h], 0
		jz	short loc_1A6
		push	esi
		call	_ssl3_do_compress
		add	esp, 4
		test	eax, eax
		jnz	short loc_1BD
		push	656h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	8Dh ; 'ç'
		push	0F5h ; 'ı'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_197:				; CODE XREF: _do_dtls1_write+124j
		xor	ebp, ebp
		mov	ecx, 8
		cmp	eax, 6
		cmovz	ebp, ecx
		jmp	short loc_13D
; ---------------------------------------------------------------------------

loc_1A6:				; CODE XREF: _do_dtls1_write+161j
		push	eax		; Size
		push	ecx		; Src
		push	edx		; Dst
		call	_memcpy
		mov	eax, [ebx+13Ch]
		add	esp, 0Ch
		mov	[ebx+140h], eax

loc_1BD:				; CODE XREF: _do_dtls1_write+16Ej
		cmp	[esp+14h+arg_0], 0
		jz	short loc_1EE
		mov	eax, [esi+8]
		push	1
		mov	ecx, [eax+64h]
		mov	eax, [ebx+134h]
		add	eax, ebp
		add	eax, edi
		push	eax
		mov	eax, [ecx+4]
		push	esi
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short $err$36
		mov	eax, [esp+14h+arg_0]
		add	[ebx+134h], eax

loc_1EE:				; CODE XREF: _do_dtls1_write+1C2j
		mov	[ebx+140h], edi
		mov	[ebx+13Ch], edi
		test	ebp, ebp
		jz	short loc_204
		add	[ebx+134h], ebp

loc_204:				; CODE XREF: _do_dtls1_write+1FCj
		mov	eax, [esi+8]
		push	1
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax]
		call	eax
		add	esp, 8
		cmp	eax, 1
		jge	short loc_222

$err$36:				; CODE XREF: _do_dtls1_write+BDj
					; _do_dtls1_write+1E2j
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_222:				; CODE XREF: _do_dtls1_write+217j
		mov	eax, [esi+5Ch]
		mov	edx, [esp+14h+var_4]
		movzx	eax, byte ptr [eax+20Bh]
		mov	[edx], al
		mov	eax, [esi+5Ch]
		movzx	eax, byte ptr [eax+20Ah]
		mov	[edx+1], al
		mov	ecx, [esi+58h]
		mov	eax, [ecx+56h]
		mov	[edx+2], eax
		mov	ax, [ecx+5Ah]
		mov	[edx+6], ax
		movzx	eax, byte ptr [ebx+135h]
		mov	[edx+8], al
		movzx	eax, byte ptr [ebx+134h]
		mov	[edx+9], al
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_283
		push	dword ptr [esi+68h]
		lea	eax, [edx-3]
		push	esi
		push	0Dh
		push	eax
		push	100h
		push	0
		push	1
		call	ecx
		add	esp, 1Ch

loc_283:				; CODE XREF: _do_dtls1_write+269j
		mov	edi, [esp+14h+arg_4]
		add	dword ptr [ebx+134h], 0Dh
		mov	[ebx+130h], edi
		mov	eax, [esi+58h]
		add	eax, 54h ; 'T'
		push	eax
		call	_ssl3_record_sequence_update
		mov	eax, [ebx+134h]
		add	esp, 4
		cmp	[esp+14h+arg_10], 0
		jnz	short loc_2F8
		mov	ecx, [esp+14h+Size]
		mov	edx, [esp+14h+Src]
		mov	[ebx+108h], eax
		mov	dword ptr [ebx+104h], 0
		mov	eax, [esi+58h]
		push	ecx
		push	edx
		push	edi
		mov	[eax+168h], ecx
		mov	eax, [esi+58h]
		push	esi
		mov	[eax+174h], edx
		mov	eax, [esi+58h]
		mov	[eax+16Ch], edi
		mov	eax, [esi+58h]
		mov	[eax+170h], ecx
		call	_ssl3_write_pending
		add	esp, 10h

loc_2F8:				; CODE XREF: _do_dtls1_write+2AEj
		pop	edi
		pop	ebp
		pop	ebx

loc_2FB:				; CODE XREF: _do_dtls1_write+5Ej
		pop	esi
		pop	ecx
		retn
_do_dtls1_write	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 300h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_buffer_record proc near		; CODE XREF: _dtls1_get_record+255p
					; _dtls1_process_buffered_records+9Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	dword ptr [ebx+4]
		call	_pqueue_size
		add	esp, 4
		cmp	eax, 64h ; 'd'
		jl	short loc_319
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_319:				; CODE XREF: _dtls1_buffer_record+13j
		push	esi
		push	edi
		push	0E6h ; 'Ê'
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	3Ch ; '<'
		call	_CRYPTO_malloc
		mov	esi, eax
		push	esi
		push	[esp+1Ch+arg_8]
		call	_pitem_new
		add	esp, 14h
		mov	edi, eax
		test	esi, esi
		jz	loc_43B
		test	edi, edi
		jz	loc_433
		mov	edx, [esp+0Ch+arg_0]
		push	edx
		mov	ecx, [edx+4Ch]
		mov	[esi], ecx
		mov	eax, [edx+50h]
		mov	[esi+4], eax
		mov	eax, [edx+58h]
		movups	xmm0, xmmword ptr [eax+0ECh]
		movups	xmmword	ptr [esi+8], xmm0
		mov	eax, [edx+58h]
		movups	xmm0, xmmword ptr [eax+10Ch]
		movups	xmmword	ptr [esi+18h], xmm0
		movups	xmm0, xmmword ptr [eax+11Ch]
		movups	xmmword	ptr [esi+28h], xmm0
		mov	eax, [eax+12Ch]
		mov	[esi+38h], eax
		xorps	xmm0, xmm0
		mov	[edi+8], esi
		mov	eax, [edx+58h]
		mov	dword ptr [edx+4Ch], 0
		mov	dword ptr [edx+50h], 0
		movups	xmmword	ptr [eax+0ECh],	xmm0
		mov	eax, [edx+58h]
		movups	xmmword	ptr [eax+10Ch],	xmm0
		movups	xmmword	ptr [eax+11Ch],	xmm0
		mov	dword ptr [eax+12Ch], 0
		call	_ssl3_setup_buffers
		add	esp, 4
		test	eax, eax
		jnz	short loc_413
		push	109h

loc_3D7:				; CODE XREF: _dtls1_buffer_record+128j
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	44h ; 'D'
		push	0F7h ; '˜'
		push	14h
		call	_ERR_put_error
		mov	eax, [esi+8]
		add	esp, 14h
		test	eax, eax
		jz	short loc_3FD
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_3FD:				; CODE XREF: _dtls1_buffer_record+F2j
		push	esi
		call	_CRYPTO_free
		push	edi
		call	_pitem_free
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_413:				; CODE XREF: _dtls1_buffer_record+D0j
		push	edi
		push	dword ptr [ebx+4]
		call	_pqueue_insert
		add	esp, 8
		test	eax, eax
		jnz	short loc_42A
		push	113h
		jmp	short loc_3D7
; ---------------------------------------------------------------------------

loc_42A:				; CODE XREF: _dtls1_buffer_record+121j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_433:				; CODE XREF: _dtls1_buffer_record+47j
		push	esi
		call	_CRYPTO_free
		jmp	short loc_445
; ---------------------------------------------------------------------------

loc_43B:				; CODE XREF: _dtls1_buffer_record+3Fj
		test	edi, edi
		jz	short loc_448
		push	edi
		call	_pitem_free

loc_445:				; CODE XREF: _dtls1_buffer_record+139j
		add	esp, 4

loc_448:				; CODE XREF: _dtls1_buffer_record+13Dj
		push	0EEh ; 'Ó'
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	44h ; 'D'
		push	0F7h ; '˜'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		retn
_dtls1_buffer_record endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 46Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_copy_record proc	near		; CODE XREF: _dtls1_get_record+3Cp
					; _dtls1_process_buffered_records+69p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [eax+8]
		mov	eax, [esi+58h]
		mov	eax, [eax+0ECh]
		test	eax, eax
		jz	short loc_48F
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_48F:				; CODE XREF: _dtls1_copy_record+18j
		mov	eax, [edi]
		mov	[esi+4Ch], eax
		mov	eax, [edi+4]
		mov	[esi+50h], eax
		mov	eax, [esi+58h]
		movups	xmm0, xmmword ptr [edi+8]
		movups	xmmword	ptr [eax+0ECh],	xmm0
		mov	ecx, [esi+58h]
		movups	xmm0, xmmword ptr [edi+18h]
		movups	xmmword	ptr [ecx+10Ch],	xmm0
		movups	xmm0, xmmword ptr [edi+28h]
		movups	xmmword	ptr [ecx+11Ch],	xmm0
		mov	eax, [edi+38h]
		mov	[ecx+12Ch], eax
		mov	edx, [edi]
		mov	ecx, [esi+58h]
		pop	edi
		pop	esi
		mov	eax, [edx+5]
		mov	[ecx+0Ah], eax
		mov	ax, [edx+9]
		mov	[ecx+0Eh], ax
		mov	eax, 1
		retn
_dtls1_copy_record endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl dtls1_dispatch_alert(int Src)
		public _dtls1_dispatch_alert
_dtls1_dispatch_alert proc near

Src		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Src]
		push	edi
		push	0		; int
		push	2		; Size
		mov	eax, [esi+58h]
		mov	dword ptr [eax+18Ch], 0
		xor	eax, eax
		mov	ecx, [esi+58h]
		mov	word ptr [esp+10h+Src],	ax
		movzx	eax, byte ptr [ecx+190h]
		mov	byte ptr [esp+10h+Src],	al
		movzx	eax, byte ptr [ecx+191h]
		mov	byte ptr [esp+10h+Src+1], al
		lea	eax, [esp+10h+Src]
		push	eax		; Src
		push	15h		; int
		push	esi		; int
		call	_do_dtls1_write
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jg	short loc_545
		mov	ecx, [esi+58h]
		pop	edi
		pop	esi
		mov	dword ptr [ecx+18Ch], 1
		retn
; ---------------------------------------------------------------------------

loc_545:				; CODE XREF: _dtls1_dispatch_alert+4Bj
		mov	eax, [esi+58h]
		cmp	byte ptr [eax+190h], 2
		jnz	short loc_562
		push	0
		push	0
		push	0Bh
		push	dword ptr [esi+10h]
		call	_BIO_ctrl
		add	esp, 10h

loc_562:				; CODE XREF: _dtls1_dispatch_alert+67j
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_583
		push	dword ptr [esi+68h]
		mov	eax, [esi+58h]
		push	esi
		push	2
		add	eax, 190h
		push	eax
		push	15h
		push	dword ptr [esi]
		push	1
		call	ecx
		add	esp, 1Ch

loc_583:				; CODE XREF: _dtls1_dispatch_alert+7Fj
		mov	edx, [esi+0D0h]
		test	edx, edx
		jnz	short loc_59D
		mov	eax, [esi+0E4h]
		mov	edx, [eax+9Ch]
		test	edx, edx
		jz	short loc_5BF

loc_59D:				; CODE XREF: _dtls1_dispatch_alert+A3j
		mov	eax, [esi+58h]
		movzx	ecx, byte ptr [eax+190h]
		movzx	eax, byte ptr [eax+191h]
		shl	ecx, 8
		or	ecx, eax
		push	ecx
		push	4008h
		push	esi
		call	edx
		add	esp, 0Ch

loc_5BF:				; CODE XREF: _dtls1_dispatch_alert+B3j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_dtls1_dispatch_alert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_get_bitmap proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	dword ptr [edx], 0
		push	edi
		mov	eax, [esi+5Ch]
		movzx	edi, word ptr [eax+208h]
		cmp	[ecx+18h], edi
		jnz	short loc_5EF
		pop	edi
		add	eax, 20Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5EF:				; CODE XREF: _dtls1_get_bitmap+21j
		lea	eax, [edi+1]
		cmp	[ecx+18h], eax
		jnz	short loc_614
		mov	eax, [ecx]
		cmp	eax, 16h
		jz	short loc_603
		cmp	eax, 15h
		jnz	short loc_614

loc_603:				; CODE XREF: _dtls1_get_bitmap+38j
		mov	dword ptr [edx], 1
		mov	eax, [esi+5Ch]
		pop	edi
		add	eax, 218h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_614:				; CODE XREF: _dtls1_get_bitmap+31j
					; _dtls1_get_bitmap+3Dj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_dtls1_get_bitmap endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 61Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _dtls1_get_record
_dtls1_get_record proc near		; CODE XREF: _dtls1_read_bytes+16Cp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	esi
		mov	edi, [esi+58h]
		add	edi, 10Ch
		call	_dtls1_process_buffered_records
		add	esp, 4
		test	eax, eax
		jns	short loc_63E
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_63E:				; CODE XREF: _dtls1_get_record+1Aj
		mov	eax, [esi+5Ch]
		push	ebx
		push	dword ptr [eax+240h]
		call	_pqueue_pop
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_677
		push	ebx
		push	esi
		call	_dtls1_copy_record
		push	dword ptr [ebx+8]
		call	_CRYPTO_free
		push	ebx
		call	_pitem_free
		add	esp, 10h
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_677:				; CODE XREF: _dtls1_get_record+38j
		push	ebp
		nop	dword ptr [eax+00h]

$again$57:				; CODE XREF: _dtls1_get_record+9Ej
					; _dtls1_get_record+127j ...
		cmp	dword ptr [esi+38h], 0F1h ; 'Ò'
		jnz	short loc_68F
		cmp	dword ptr [esi+50h], 0Dh
		jnb	loc_780

loc_68F:				; CODE XREF: _dtls1_get_record+67j
		mov	eax, [esi+58h]
		push	0
		push	dword ptr [eax+0F0h]
		push	0Dh
		push	esi
		call	_ssl3_read_n
		add	esp, 10h
		test	eax, eax
		jle	loc_8D0
		cmp	dword ptr [esi+50h], 0Dh
		jz	short loc_6BC
		mov	dword ptr [esi+50h], 0
		jmp	short $again$57
; ---------------------------------------------------------------------------

loc_6BC:				; CODE XREF: _dtls1_get_record+95j
		mov	eax, [esi+64h]
		mov	ebx, [esi+4Ch]
		mov	dword ptr [esi+38h], 0F1h ; 'Ò'
		test	eax, eax
		jz	short loc_6E2
		push	dword ptr [esi+68h]
		push	esi
		push	0Dh
		push	ebx
		push	100h
		push	0
		push	0
		call	eax
		add	esp, 1Ch

loc_6E2:				; CODE XREF: _dtls1_get_record+AFj
		movzx	eax, byte ptr [ebx]
		mov	[edi], eax
		movzx	ecx, byte ptr [ebx+1]
		movzx	eax, byte ptr [ebx+2]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+4]
		movzx	edx, cx
		movzx	ecx, byte ptr [ebx+3]
		shl	ecx, 8
		or	ecx, eax
		mov	[edi+18h], ecx
		mov	ecx, [esi+58h]
		mov	eax, [ebx+5]
		mov	[ecx+0Ah], eax
		mov	ax, [ebx+9]
		mov	[ecx+0Eh], ax
		movzx	ecx, byte ptr [ebx+0Bh]
		movzx	eax, byte ptr [ebx+0Ch]
		shl	ecx, 8
		or	ecx, eax
		mov	[edi+4], ecx
		cmp	dword ptr [esi+10Ch], 0
		jnz	short loc_748
		cmp	edx, [esi]
		jz	short loc_748
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+50h], 0
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_748:				; CODE XREF: _dtls1_get_record+113j
					; _dtls1_get_record+117j
		xor	edx, [esi]
		test	edx, 0FF00h
		jz	short loc_765
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+50h], 0
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_765:				; CODE XREF: _dtls1_get_record+134j
		cmp	ecx, 4540h
		jbe	short loc_780
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+50h], 0
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_780:				; CODE XREF: _dtls1_get_record+6Dj
					; _dtls1_get_record+14Fj
		mov	eax, [esi+50h]
		mov	ebx, [edi+4]
		sub	eax, 0Dh
		cmp	ebx, eax
		jbe	short loc_7B1
		push	1
		push	ebx
		push	ebx
		push	esi
		call	_ssl3_read_n
		add	esp, 10h
		cmp	eax, ebx
		jz	short loc_7B1
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+50h], 0
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_7B1:				; CODE XREF: _dtls1_get_record+16Fj
					; _dtls1_get_record+180j
		mov	ecx, [esi+5Ch]
		xor	ebp, ebp
		mov	dword ptr [esi+38h], 0F0h ; ''
		mov	edx, [edi+18h]
		movzx	eax, word ptr [ecx+208h]
		cmp	edx, eax
		jnz	short loc_7D3
		lea	ebx, [ecx+20Ch]
		jmp	short loc_7F7
; ---------------------------------------------------------------------------

loc_7D3:				; CODE XREF: _dtls1_get_record+1ADj
		inc	eax
		cmp	edx, eax
		jnz	loc_8A6
		mov	eax, [edi]
		cmp	eax, 16h
		jz	short loc_7EC
		cmp	eax, 15h
		jnz	loc_8A6

loc_7EC:				; CODE XREF: _dtls1_get_record+1C5j
		mov	ebp, 1
		lea	ebx, [ecx+218h]

loc_7F7:				; CODE XREF: _dtls1_get_record+1B5j
		test	ebx, ebx
		jz	loc_8A6
		cmp	dword ptr [ecx+254h], 0
		jz	short loc_81C
		cmp	dword ptr [edi], 16h
		jnz	short loc_81C
		cmp	dword ptr [esi+50h], 0Dh
		jbe	short loc_81C
		mov	eax, [esi+4Ch]
		cmp	byte ptr [eax+0Dh], 1
		jz	short loc_835

loc_81C:				; CODE XREF: _dtls1_get_record+1EAj
					; _dtls1_get_record+1EFj ...
		push	ebx
		push	esi
		call	_dtls1_record_replay_check
		add	esp, 8
		test	eax, eax
		jnz	short loc_835
		mov	[edi+4], eax
		mov	[esi+50h], eax
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_835:				; CODE XREF: _dtls1_get_record+1FEj
					; _dtls1_get_record+20Cj
		cmp	dword ptr [edi+4], 0
		jz	$again$57
		push	esi
		test	ebp, ebp
		jz	short loc_89A
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jnz	short loc_859
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_887

loc_859:				; CODE XREF: _dtls1_get_record+235j
		mov	ecx, [esi+5Ch]
		cmp	dword ptr [ecx+254h], 0
		jnz	short loc_887
		lea	eax, [edi+1Ch]
		push	eax
		lea	eax, [ecx+234h]
		push	eax
		push	esi
		call	_dtls1_buffer_record
		add	esp, 0Ch
		test	eax, eax
		js	short loc_8B9
		push	ebx
		push	esi
		call	_dtls1_record_bitmap_update
		add	esp, 8

loc_887:				; CODE XREF: _dtls1_get_record+23Bj
					; _dtls1_get_record+247j
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+50h], 0
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_89A:				; CODE XREF: _dtls1_get_record+226j
		call	_dtls1_process_record
		add	esp, 4
		test	eax, eax
		jnz	short loc_8C1

loc_8A6:				; CODE XREF: _dtls1_get_record+1BAj
					; _dtls1_get_record+1CAj ...
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+50h], 0
		jmp	$again$57
; ---------------------------------------------------------------------------

loc_8B9:				; CODE XREF: _dtls1_get_record+25Fj
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_8C1:				; CODE XREF: _dtls1_get_record+288j
		push	ebx
		push	esi
		call	_dtls1_record_bitmap_update
		add	esp, 8
		mov	eax, 1

loc_8D0:				; CODE XREF: _dtls1_get_record+8Bj
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
_dtls1_get_record endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_process_buffered_records	proc near ; CODE XREF: _dtls1_get_record+10p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	eax, [esi+5Ch]
		push	dword ptr [eax+238h]
		call	_pqueue_peek
		add	esp, 4
		test	eax, eax
		jz	loc_998
		mov	ecx, [esi+5Ch]
		mov	ax, [ecx+234h]
		cmp	ax, [ecx+208h]
		jnz	loc_9BC
		push	dword ptr [ecx+238h]
		call	_pqueue_peek
		add	esp, 4
		test	eax, eax
		jz	short loc_998
		nop	dword ptr [eax+eax+00000000h]

loc_928:				; CODE XREF: _dtls1_process_buffered_records+BEj
		mov	eax, [esi+5Ch]
		push	dword ptr [eax+238h]
		call	_pqueue_pop
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_957
		push	edi
		push	esi
		call	_dtls1_copy_record
		push	dword ptr [edi+8]
		call	_CRYPTO_free
		push	edi
		call	_pitem_free
		add	esp, 10h

loc_957:				; CODE XREF: _dtls1_process_buffered_records+65j
		push	esi
		call	_dtls1_process_record
		add	esp, 4
		test	eax, eax
		jz	short loc_9CA
		mov	eax, [esi+58h]
		add	eax, 128h
		push	eax
		mov	eax, [esi+5Ch]
		add	eax, 23Ch
		push	eax
		push	esi
		call	_dtls1_buffer_record
		add	esp, 0Ch
		test	eax, eax
		js	short loc_9C4
		mov	eax, [esi+5Ch]
		push	dword ptr [eax+238h]
		call	_pqueue_peek
		add	esp, 4
		test	eax, eax
		jnz	short loc_928

loc_998:				; CODE XREF: _dtls1_process_buffered_records+19j
					; _dtls1_process_buffered_records+46j
		mov	ecx, [esi+5Ch]
		movzx	eax, word ptr [ecx+208h]
		mov	[ecx+23Ch], ax
		mov	ecx, [esi+5Ch]
		movzx	eax, word ptr [ecx+208h]
		inc	ax
		mov	[ecx+234h], ax

loc_9BC:				; CODE XREF: _dtls1_process_buffered_records+30j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_9C4:				; CODE XREF: _dtls1_process_buffered_records+A9j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_9CA:				; CODE XREF: _dtls1_process_buffered_records+8Aj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_dtls1_process_buffered_records	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_process_record proc near		; CODE XREF: _dtls1_get_record:loc_89Ap
					; _dtls1_process_buffered_records+80p

var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 88h ; 'à'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+88h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+98h+arg_0]
		mov	esi, [edi+58h]
		mov	eax, [edi+4Ch]
		add	esi, 10Ch
		mov	ebx, [edi+0C0h]
		add	eax, 0Dh
		cmp	dword ptr [esi+4], 4540h
		mov	[esi+10h], eax
		jbe	short loc_A28
		push	1ABh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	96h ; 'ñ'
		jmp	loc_BE4
; ---------------------------------------------------------------------------

loc_A28:				; CODE XREF: _dtls1_process_record+42j
		mov	[esi+0Ch], eax
		mov	eax, [edi+8]
		push	0
		push	edi
		mov	eax, [eax+64h]
		mov	eax, [eax]
		call	eax
		mov	ebp, eax
		add	esp, 8
		mov	[esp+98h+var_88], ebp
		test	ebp, ebp
		jnz	short loc_A5A

loc_A45:				; CODE XREF: _dtls1_process_record+197j
					; _dtls1_process_record+19Fj
		mov	dword ptr [esi+4], 0
		xor	eax, eax
		mov	dword ptr [edi+50h], 0
		jmp	loc_C1B
; ---------------------------------------------------------------------------

loc_A5A:				; CODE XREF: _dtls1_process_record+73j
		test	ebx, ebx
		jz	loc_B6D
		cmp	dword ptr [edi+80h], 0
		jz	loc_B6D
		push	dword ptr [edi+84h]
		call	_EVP_MD_CTX_md
		add	esp, 4
		test	eax, eax
		jz	loc_B6D
		push	dword ptr [edi+84h]
		call	_EVP_MD_CTX_md
		push	eax
		call	_EVP_MD_size
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, 40h ; '@'
		jbe	short loc_AB7
		push	offset ??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ ; "mac_size <= EVP_MAX_MD_SIZE"
		push	1D0h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_AB7:				; CODE XREF: _dtls1_process_record+CEj
		mov	ebp, [esi]
		shr	ebp, 8
		add	ebp, [esi+4]
		cmp	ebp, ebx
		jb	loc_B98
		push	dword ptr [edi+80h]
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_AEA
		lea	eax, [ebx+1]
		cmp	ebp, eax
		jb	loc_B98

loc_AEA:				; CODE XREF: _dtls1_process_record+10Dj
		push	dword ptr [edi+80h]
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_B1B
		push	ebp
		push	ebx
		lea	eax, [esp+0A0h+var_84]
		push	esi
		push	eax
		call	_ssl3_cbc_copy_mac
		add	esp, 10h
		lea	ebp, [esp+98h+var_84]
		sub	[esi+4], ebx
		jmp	short loc_B24
; ---------------------------------------------------------------------------

loc_B1B:				; CODE XREF: _dtls1_process_record+130j
		mov	ebp, [esi+0Ch]
		sub	[esi+4], ebx
		add	ebp, [esi+4]

loc_B24:				; CODE XREF: _dtls1_process_record+149j
		mov	eax, [edi+8]
		lea	ecx, [esp+98h+var_44]
		push	0
		push	ecx
		push	edi
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_B55
		test	ebp, ebp
		jz	short loc_B55
		push	ebx
		lea	eax, [esp+9Ch+var_44]
		push	ebp
		push	eax
		call	_CRYPTO_memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_B5A

loc_B55:				; CODE XREF: _dtls1_process_record+16Cj
					; _dtls1_process_record+170j
		or	ebp, 0FFFFFFFFh
		jmp	short loc_B5E
; ---------------------------------------------------------------------------

loc_B5A:				; CODE XREF: _dtls1_process_record+183j
		mov	ebp, [esp+98h+var_88]

loc_B5E:				; CODE XREF: _dtls1_process_record+188j
		lea	eax, [ebx+4400h]
		cmp	[esi+4], eax
		ja	loc_A45

loc_B6D:				; CODE XREF: _dtls1_process_record+8Cj
					; _dtls1_process_record+99j ...
		test	ebp, ebp
		js	loc_A45
		cmp	dword ptr [edi+88h], 0
		jz	short loc_BCC
		cmp	dword ptr [esi+4], 4400h
		jbe	short loc_BAE
		push	20Eh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	8Ch ; 'å'
		jmp	short loc_BE4
; ---------------------------------------------------------------------------

loc_B98:				; CODE XREF: _dtls1_process_record+F1j
					; _dtls1_process_record+114j
		push	1E2h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		mov	esi, 32h ; '2'
		push	0A0h ; '†'
		jmp	short loc_BE9
; ---------------------------------------------------------------------------

loc_BAE:				; CODE XREF: _dtls1_process_record+1B5j
		push	edi
		call	_ssl3_do_uncompress
		add	esp, 4
		test	eax, eax
		jnz	short loc_BCC
		push	213h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		lea	esi, [eax+1Eh]
		push	6Bh ; 'k'
		jmp	short loc_BE9
; ---------------------------------------------------------------------------

loc_BCC:				; CODE XREF: _dtls1_process_record+1ACj
					; _dtls1_process_record+1E9j
		cmp	dword ptr [esi+4], 4000h
		jbe	short loc_C08
		push	21Ah
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	92h ; 'í'

loc_BE4:				; CODE XREF: _dtls1_process_record+53j
					; _dtls1_process_record+1C6j
		mov	esi, 16h

loc_BE9:				; CODE XREF: _dtls1_process_record+1DCj
					; _dtls1_process_record+1FAj
		push	101h
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$f_err$25:
		push	esi
		push	2
		push	edi
		call	_ssl3_send_alert
		add	esp, 0Ch

$err$26:
		xor	eax, eax
		jmp	short loc_C1B
; ---------------------------------------------------------------------------

loc_C08:				; CODE XREF: _dtls1_process_record+203j
		mov	dword ptr [esi+8], 0
		mov	eax, 1
		mov	dword ptr [edi+50h], 0

loc_C1B:				; CODE XREF: _dtls1_process_record+85j
					; _dtls1_process_record+236j
		mov	ecx, [esp+98h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 88h
		retn
_dtls1_process_record endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C34h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _dtls1_read_bytes
_dtls1_read_bytes proc near

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
Dst		= dword	ptr -48h
var_44		= byte ptr -44h
var_40		= byte ptr -40h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 50h ; 'P'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+50h+var_4], eax
		mov	ecx, [esp+50h+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+58h+arg_0]
		xor	ebp, ebp
		mov	[esp+58h+Dst], ecx
		mov	[esp+58h+var_50], ebp
		mov	eax, [esi+58h]
		cmp	[eax+0ECh], ebp
		jnz	short loc_C8D
		push	esi
		call	_ssl3_setup_buffers
		add	esp, 4
		test	eax, eax
		jnz	short loc_C89
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_C89:				; CODE XREF: _dtls1_read_bytes+3Fj
		mov	ecx, [esp+58h+Dst]

loc_C8D:				; CODE XREF: _dtls1_read_bytes+32j
		push	edi
		mov	edi, [esp+5Ch+arg_4]
		test	edi, edi
		jz	short loc_CA0
		cmp	edi, 17h
		jz	short loc_CA0
		cmp	edi, 16h
		jnz	short loc_CAD

loc_CA0:				; CODE XREF: _dtls1_read_bytes+60j
					; _dtls1_read_bytes+65j
		mov	eax, [esp+5Ch+arg_10]
		test	eax, eax
		jz	short loc_CBB
		cmp	edi, 17h
		jz	short loc_CBB

loc_CAD:				; CODE XREF: _dtls1_read_bytes+6Aj
		push	312h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	44h ; 'D'
		jmp	short loc_D0A
; ---------------------------------------------------------------------------

loc_CBB:				; CODE XREF: _dtls1_read_bytes+72j
					; _dtls1_read_bytes+77j
		push	eax
		push	[esp+60h+arg_C]
		push	ecx
		push	edi
		push	esi
		call	_have_handshake_fragment
		add	esp, 14h
		test	eax, eax
		jnz	loc_166C
		cmp	[esi+1Ch], ebp
		jnz	short loc_D2E
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_D2E
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_166C
		jnz	short loc_D2E
		push	333h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	0E5h ; 'Â'

loc_D0A:				; CODE XREF: _dtls1_read_bytes+85j
		push	102h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_D2E:				; CODE XREF: _dtls1_read_bytes+A2j
					; _dtls1_read_bytes+B2j ...
		push	ebx
		nop	dword ptr [eax+eax+00h]

$start$154:				; CODE XREF: _dtls1_read_bytes+15Aj
					; _dtls1_read_bytes+184j ...
		mov	ebx, [esi+58h]
		add	ebx, 10Ch
		mov	dword ptr [esi+18h], 1
		cmp	dword ptr [esi+34h], 3
		jnz	short loc_D83
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_D83
		mov	eax, [esi+5Ch]
		push	dword ptr [eax+250h]
		call	_pqueue_pop
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_D7F
		push	edi
		push	esi
		call	_dtls1_copy_record
		push	dword ptr [edi+8]
		call	_CRYPTO_free
		push	edi
		call	_pitem_free
		add	esp, 10h

loc_D7F:				; CODE XREF: _dtls1_read_bytes+131j
		mov	edi, [esp+60h+arg_4]

loc_D83:				; CODE XREF: _dtls1_read_bytes+114j
					; _dtls1_read_bytes+11Aj
		push	esi
		call	_dtls1_handle_timeout
		add	esp, 4
		test	eax, eax
		jg	short $start$154
		cmp	dword ptr [ebx+4], 0
		jz	short loc_D9F
		cmp	dword ptr [esi+38h], 0F1h ; 'Ò'
		jnz	short loc_DD1

loc_D9F:				; CODE XREF: _dtls1_read_bytes+160j
		push	esi
		call	_dtls1_get_record
		add	esp, 4
		test	eax, eax
		jg	short loc_DD1
		push	eax
		push	esi
		call	_dtls1_read_failed
		add	esp, 8
		test	eax, eax
		jg	$start$154
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_DD1:				; CODE XREF: _dtls1_read_bytes+169j
					; _dtls1_read_bytes+176j
		mov	ecx, [esi+5Ch]
		cmp	dword ptr [ecx+254h], 0
		jz	short loc_DEE
		cmp	dword ptr [ebx], 16h
		jz	short loc_DEE
		mov	dword ptr [ebx+4], 0
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_DEE:				; CODE XREF: _dtls1_read_bytes+1A7j
					; _dtls1_read_bytes+1ACj
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+180h], 0
		jz	short loc_E27
		cmp	dword ptr [ebx], 16h
		jz	short loc_E27
		lea	eax, [ebx+1Ch]
		push	eax
		lea	eax, [ecx+24Ch]
		push	eax
		push	esi
		call	_dtls1_buffer_record
		add	esp, 0Ch
		test	eax, eax
		js	loc_12E5
		mov	dword ptr [ebx+4], 0
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_E27:				; CODE XREF: _dtls1_read_bytes+1C4j
					; _dtls1_read_bytes+1C9j
		test	byte ptr [esi+30h], 2
		jnz	loc_165B
		mov	eax, [ebx]
		cmp	edi, eax
		jz	loc_15A2
		cmp	eax, 16h
		jnz	short loc_E51
		lea	edi, [eax-0Ah]
		lea	ebp, [ecx+2D4h]
		lea	eax, [ecx+2E0h]
		jmp	short loc_E67
; ---------------------------------------------------------------------------

loc_E51:				; CODE XREF: _dtls1_read_bytes+20Aj
		cmp	eax, 15h
		jnz	short loc_EBB
		mov	edi, 2
		lea	ebp, [ecx+2CEh]
		lea	eax, [ecx+2D0h]

loc_E67:				; CODE XREF: _dtls1_read_bytes+21Bj
		mov	[esp+60h+var_4C], eax
		cmp	[ebx+4], edi
		jnb	short loc_E8B
		mov	ebp, [esp+60h+var_50]
		mov	edi, [esp+60h+arg_4]
		mov	dword ptr [esi+38h], 0F0h ; ''
		mov	dword ptr [ebx+4], 0
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_E8B:				; CODE XREF: _dtls1_read_bytes+23Aj
		xor	edx, edx
		test	edi, edi
		jz	short loc_EAB
		nop	dword ptr [eax]

loc_E94:				; CODE XREF: _dtls1_read_bytes+275j
		mov	eax, [ebx+8]
		mov	ecx, [ebx+0Ch]
		mov	al, [ecx+eax]
		mov	[edx+ebp], al
		inc	edx
		inc	dword ptr [ebx+8]
		dec	dword ptr [ebx+4]
		cmp	edx, edi
		jb	short loc_E94

loc_EAB:				; CODE XREF: _dtls1_read_bytes+25Bj
		mov	eax, [esp+60h+var_4C]
		mov	ebp, [esp+60h+var_50]
		mov	[eax], edi
		mov	edi, [esp+60h+arg_4]
		jmp	short loc_ECD
; ---------------------------------------------------------------------------

loc_EBB:				; CODE XREF: _dtls1_read_bytes+220j
		cmp	eax, 18h
		jz	loc_154D
		cmp	eax, 14h
		jnz	loc_14EF

loc_ECD:				; CODE XREF: _dtls1_read_bytes+285j
		cmp	dword ptr [esi+24h], 0
		jnz	loc_1020
		mov	eax, [esi+5Ch]
		cmp	dword ptr [eax+2E0h], 0Ch
		jb	loc_1020
		cmp	byte ptr [eax+2D4h], 0
		jnz	loc_1020
		mov	ecx, [esi+0C0h]
		test	ecx, ecx
		jz	loc_1020
		cmp	dword ptr [ecx+0B4h], 0
		jz	loc_1020
		mov	dword ptr [eax+2E0h], 0
		mov	eax, [esi+5Ch]
		cmp	byte ptr [eax+2D5h], 0
		jnz	loc_1300
		cmp	byte ptr [eax+2D6h], 0
		jnz	loc_1300
		cmp	byte ptr [eax+2D7h], 0
		jnz	loc_1300
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_F61
		push	dword ptr [esi+68h]
		add	eax, 2D4h
		push	esi
		push	4
		push	eax
		push	16h
		push	dword ptr [esi]
		push	0
		call	ecx
		add	esp, 1Ch

loc_F61:				; CODE XREF: _dtls1_read_bytes+314j
		push	esi
		call	_SSL_state
		add	esp, 4
		cmp	eax, 3
		jnz	$start$154
		mov	eax, [esi+58h]
		test	byte ptr [eax],	1
		jnz	$start$154
		cmp	dword ptr [eax+194h], 0
		jnz	$start$154
		mov	eax, [esi+5Ch]
		push	esi
		inc	word ptr [eax+228h]
		mov	dword ptr [esi+28h], 1
		call	_ssl3_renegotiate
		push	esi
		call	_ssl3_renegotiate_check
		add	esp, 8
		test	eax, eax
		jz	$start$154
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_166B
		jz	loc_12F6
		test	byte ptr [esi+104h], 4
		jnz	$start$154
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+0F8h], 0
		jnz	$start$154
		push	esi
		mov	dword ptr [esi+18h], 3
		call	_SSL_get_rbio
		mov	esi, eax
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		push	9
		push	esi
		call	_BIO_set_flags
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1020:				; CODE XREF: _dtls1_read_bytes+29Dj
					; _dtls1_read_bytes+2ADj ...
		mov	ecx, [esi+5Ch]
		cmp	dword ptr [ecx+2D0h], 2
		jb	loc_10CA
		movzx	ebx, byte ptr [ecx+2CEh]
		movzx	edi, byte ptr [ecx+2CFh]
		mov	dword ptr [ecx+2D0h], 0
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_1069
		push	dword ptr [esi+68h]
		mov	eax, [esi+5Ch]
		push	esi
		push	2
		add	eax, 2CEh
		push	eax
		push	15h
		push	dword ptr [esi]
		push	0
		call	ecx
		add	esp, 1Ch

loc_1069:				; CODE XREF: _dtls1_read_bytes+419j
		mov	eax, [esi+0D0h]
		test	eax, eax
		jz	short loc_107B
		mov	ebp, eax
		mov	[esp+60h+var_50], eax
		jmp	short loc_1090
; ---------------------------------------------------------------------------

loc_107B:				; CODE XREF: _dtls1_read_bytes+43Dj
		mov	eax, [esi+0E4h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		cmovnz	ebp, eax
		mov	[esp+60h+var_50], ebp

loc_1090:				; CODE XREF: _dtls1_read_bytes+445j
		test	ebp, ebp
		jz	short loc_10A7
		mov	eax, ebx
		shl	eax, 8
		or	eax, edi
		push	eax
		push	4004h
		push	esi
		call	ebp
		add	esp, 0Ch

loc_10A7:				; CODE XREF: _dtls1_read_bytes+45Ej
		cmp	ebx, 1
		jnz	loc_132F
		mov	eax, [esi+58h]
		mov	[eax+184h], edi
		test	edi, edi
		jz	loc_1316
		mov	edi, [esp+60h+arg_4]
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_10CA:				; CODE XREF: _dtls1_read_bytes+3F6j
		test	byte ptr [esi+30h], 1
		jnz	loc_14CC
		mov	eax, [ebx]
		cmp	eax, 14h
		jnz	loc_11A1
		lea	edi, [eax-13h]
		lea	eax, [esp+60h+var_44]
		push	eax
		push	dword ptr [ebx+0Ch]
		call	_dtls1_get_ccs_header
		add	esp, 8
		mov	eax, 3
		cmp	dword ptr [esi], 100h
		cmovz	edi, eax
		cmp	[ebx+4], edi
		jnz	loc_13CC
		cmp	dword ptr [ebx+8], 0
		jnz	loc_13CC
		mov	ecx, [ebx+0Ch]
		cmp	byte ptr [ecx],	1
		jnz	loc_13CC
		mov	dword ptr [ebx+4], 0
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_113F
		push	dword ptr [esi+68h]
		push	esi
		push	1
		push	ecx
		push	14h
		push	dword ptr [esi]
		push	0
		call	eax
		add	esp, 1Ch

loc_113F:				; CODE XREF: _dtls1_read_bytes+4F7j
		mov	eax, [esi+5Ch]
		mov	edi, [esp+60h+arg_4]
		cmp	dword ptr [eax+2E8h], 0
		jz	$start$154
		mov	dword ptr [eax+2E8h], 0
		mov	eax, [esi+58h]
		push	esi
		mov	dword ptr [eax+180h], 1
		call	_ssl3_do_change_cipher_spec
		add	esp, 4
		test	eax, eax
		jz	$err$155
		push	1
		push	esi
		call	_dtls1_reset_seq_numbers
		add	esp, 8
		cmp	dword ptr [esi], 100h
		jnz	$start$154
		mov	eax, [esi+5Ch]
		inc	word ptr [eax+228h]
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_11A1:				; CODE XREF: _dtls1_read_bytes+4A5j
		cmp	dword ptr [ecx+2E0h], 0Ch
		jb	loc_12B6
		cmp	dword ptr [esi+1Ch], 0
		jnz	loc_12B6
		lea	eax, [esp+60h+var_40]
		push	eax
		push	dword ptr [ebx+0Ch]
		call	_dtls1_get_message_header
		mov	eax, [esi+5Ch]
		add	esp, 8
		movzx	eax, word ptr [eax+208h]
		cmp	[ebx+18h], eax
		jz	short loc_11E3
		mov	dword ptr [ebx+4], 0
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_11E3:				; CODE XREF: _dtls1_read_bytes+5A1j
		cmp	[esp+60h+var_40], 14h
		jnz	short loc_1210
		push	esi
		call	_dtls1_check_timeout_num
		add	esp, 4
		test	eax, eax
		js	$err$155
		push	esi
		call	_dtls1_retransmit_buffered_messages
		add	esp, 4
		mov	dword ptr [ebx+4], 0
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_1210:				; CODE XREF: _dtls1_read_bytes+5B4j
		mov	eax, [esi+34h]
		and	eax, 0FFFh
		cmp	eax, 3
		jnz	short loc_124A
		mov	eax, [esi+58h]
		test	byte ptr [eax],	1
		jnz	short loc_124A
		cmp	dword ptr [esi+24h], 0
		mov	eax, 1000h
		mov	ecx, 2000h
		mov	dword ptr [esi+190h], 1
		cmovnz	eax, ecx
		mov	dword ptr [esi+28h], 1
		mov	[esi+34h], eax

loc_124A:				; CODE XREF: _dtls1_read_bytes+5E7j
					; _dtls1_read_bytes+5EFj
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_166B
		jz	loc_13FD
		test	byte ptr [esi+104h], 4
		jnz	$start$154
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+0F8h], 0
		jnz	$start$154
		push	esi
		mov	dword ptr [esi+18h], 3
		call	_SSL_get_rbio
		mov	esi, eax
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		push	9
		push	esi
		call	_BIO_set_flags
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_12B6:				; CODE XREF: _dtls1_read_bytes+574j
					; _dtls1_read_bytes+57Ej
		cmp	eax, 14h
		jl	short loc_12CD
		cmp	eax, 16h
		jle	loc_14A7
		cmp	eax, 17h
		jz	loc_1431

loc_12CD:				; CODE XREF: _dtls1_read_bytes+685j
		cmp	dword ptr [esi], 301h
		jnz	loc_14B8
		mov	dword ptr [ebx+4], 0
		jmp	$start$154
; ---------------------------------------------------------------------------

loc_12E5:				; CODE XREF: _dtls1_read_bytes+1E1j
		push	37Dh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	44h ; 'D'
		jmp	loc_140C
; ---------------------------------------------------------------------------

loc_12F6:				; CODE XREF: _dtls1_read_bytes+391j
		push	448h
		jmp	loc_1402
; ---------------------------------------------------------------------------

loc_1300:				; CODE XREF: _dtls1_read_bytes+2EFj
					; _dtls1_read_bytes+2FCj ...
		push	42Fh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		mov	edi, 32h ; '2'
		push	69h ; 'i'
		jmp	loc_15D1
; ---------------------------------------------------------------------------

loc_1316:				; CODE XREF: _dtls1_read_bytes+487j
		or	dword ptr [esi+30h], 2
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_132F:				; CODE XREF: _dtls1_read_bytes+476j
		cmp	ebx, 2
		jnz	loc_13B3
		mov	eax, [esi+58h]
		push	4B0h
		mov	dword ptr [esi+18h], 1
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		mov	[eax+188h], edi
		lea	eax, [edi+3E8h]
		push	eax
		push	102h
		push	14h
		call	_ERR_put_error
		push	edi
		push	offset ??_C@_02DPKJAMEF@?$CFd?$AA@ ; "%d"
		lea	eax, [esp+7Ch+var_14]
		push	10h
		push	eax
		call	_BIO_snprintf
		lea	eax, [esp+84h+var_14]
		push	eax
		push	offset ??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@ ; "SSL alert number	"
		push	ebx
		call	_ERR_add_error_data
		push	dword ptr [esi+0C0h]
		or	[esi+30h], ebx
		push	dword ptr [esi+0E4h]
		call	_SSL_CTX_remove_session
		add	esp, 38h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_13B3:				; CODE XREF: _dtls1_read_bytes+6FEj
		push	4B8h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		mov	edi, 2Fh ; '/'
		push	0F6h ; 'ˆ'
		jmp	loc_15D1
; ---------------------------------------------------------------------------

loc_13CC:				; CODE XREF: _dtls1_read_bytes+4CFj
					; _dtls1_read_bytes+4D9j ...
		push	4D7h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	67h ; 'g'
		push	102h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_13FD:				; CODE XREF: _dtls1_read_bytes+627j
		push	52Eh

loc_1402:				; CODE XREF: _dtls1_read_bytes+6C7j
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	0E5h ; 'Â'

loc_140C:				; CODE XREF: _dtls1_read_bytes+6BDj
		push	102h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1431:				; CODE XREF: _dtls1_read_bytes+693j
		mov	ecx, [esi+58h]
		cmp	dword ptr [ecx+1A0h], 0
		jz	short loc_1493
		cmp	dword ptr [ecx+198h], 0
		jz	short loc_1493
		mov	eax, [esi+34h]
		test	eax, 1000h
		jz	short loc_145E
		cmp	eax, 1110h
		jl	short loc_145E
		cmp	eax, 1120h
		jle	short loc_1473

loc_145E:				; CODE XREF: _dtls1_read_bytes+81Aj
					; _dtls1_read_bytes+821j
		test	eax, 2000h
		jz	short loc_1493
		cmp	eax, 2120h
		jg	short loc_1493
		cmp	eax, 2110h
		jl	short loc_1493

loc_1473:				; CODE XREF: _dtls1_read_bytes+828j
		pop	ebx
		pop	edi
		pop	esi
		mov	dword ptr [ecx+1A0h], 2
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1493:				; CODE XREF: _dtls1_read_bytes+807j
					; _dtls1_read_bytes+810j ...
		push	572h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	0F5h ; 'ı'
		jmp	loc_15CC
; ---------------------------------------------------------------------------

loc_14A7:				; CODE XREF: _dtls1_read_bytes+68Aj
		push	55Ah
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	44h ; 'D'
		jmp	loc_15CC
; ---------------------------------------------------------------------------

loc_14B8:				; CODE XREF: _dtls1_read_bytes+69Fj
		push	54Fh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	0F5h ; 'ı'
		jmp	loc_15CC
; ---------------------------------------------------------------------------

loc_14CC:				; CODE XREF: _dtls1_read_bytes+49Aj
		mov	dword ptr [esi+18h], 1
		xor	eax, eax
		mov	dword ptr [ebx+4], 0
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_14EF:				; CODE XREF: _dtls1_read_bytes+293j
		cmp	eax, 17h
		jnz	short loc_1539
		mov	eax, [esi+58h]
		push	esi
		mov	dword ptr [eax+1A0h], 2
		call	_SSL_get_rbio
		mov	edi, eax
		mov	dword ptr [esi+18h], 3
		push	0Fh
		push	edi
		call	_BIO_clear_flags
		push	9
		push	edi
		call	_BIO_set_flags
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1539:				; CODE XREF: _dtls1_read_bytes+8BEj
		push	3FEh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	0F5h ; 'ı'
		jmp	loc_15CC
; ---------------------------------------------------------------------------

loc_154D:				; CODE XREF: _dtls1_read_bytes+28Aj
		push	esi
		call	_dtls1_process_heartbeat
		add	esp, 4
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [esi+18h], 3
		push	0Fh
		push	esi
		call	_SSL_get_rbio
		add	esp, 4
		push	eax
		call	_BIO_clear_flags
		add	esp, 8
		push	9
		push	esi
		call	_SSL_get_rbio
		add	esp, 4
		push	eax
		call	_BIO_set_flags
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_15A2:				; CODE XREF: _dtls1_read_bytes+201j
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_1602
		cmp	edi, 17h
		jnz	short loc_1602
		cmp	dword ptr [esi+80h], 0
		jnz	short loc_1602
		push	397h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	64h ; 'd'

loc_15CC:				; CODE XREF: _dtls1_read_bytes+86Ej
					; _dtls1_read_bytes+87Fj ...
		mov	edi, 0Ah

loc_15D1:				; CODE XREF: _dtls1_read_bytes+6DDj
					; _dtls1_read_bytes+793j
		push	102h
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$f_err$156:
		push	edi
		push	2
		push	esi
		call	_ssl3_send_alert
		add	esp, 0Ch

$err$155:				; CODE XREF: _dtls1_read_bytes+541j
					; _dtls1_read_bytes+5C1j
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1602:				; CODE XREF: _dtls1_read_bytes+97Cj
					; _dtls1_read_bytes+981j ...
		mov	ebp, [esp+60h+arg_C]
		test	ebp, ebp
		jle	short loc_1646
		cmp	ebp, [ebx+4]
		mov	eax, [ebx+0Ch]
		cmova	ebp, [ebx+4]
		add	eax, [ebx+8]
		push	ebp		; Size
		push	eax		; Src
		push	[esp+68h+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		cmp	[esp+60h+arg_10], 0
		jnz	short loc_1646
		sub	[ebx+4], ebp
		add	[ebx+8], ebp
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_1646
		mov	dword ptr [esi+38h], 0F0h ; ''
		mov	dword ptr [ebx+8], 0

loc_1646:				; CODE XREF: _dtls1_read_bytes+9D4j
					; _dtls1_read_bytes+9F6j ...
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_165B:				; CODE XREF: _dtls1_read_bytes+1F7j
		mov	dword ptr [ebx+4], 0
		xor	eax, eax
		mov	dword ptr [esi+18h], 1

loc_166B:				; CODE XREF: _dtls1_read_bytes+38Bj
					; _dtls1_read_bytes+621j
		pop	ebx

loc_166C:				; CODE XREF: _dtls1_read_bytes+99j
					; _dtls1_read_bytes+BFj
		mov	ecx, [esp+5Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
_dtls1_read_bytes endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1680h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_record_bitmap_update proc near	; CODE XREF: _dtls1_get_record+263p
					; _dtls1_get_record+2A7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		mov	edi, [eax+58h]
		add	edi, 8
		lea	ebx, [esi+4]
		push	ebx
		push	edi
		call	_satsub64be
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jle	short loc_16D4
		cmp	ecx, 20h ; ' '
		jnb	short loc_16C0
		mov	edx, [esi]
		shl	edx, cl
		or	edx, 1
		mov	[esi], edx
		mov	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		pop	edi
		pop	esi
		mov	[ebx+4], eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_16C0:				; CODE XREF: _dtls1_record_bitmap_update+27j
		mov	dword ptr [esi], 1
		mov	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		pop	edi
		pop	esi
		mov	[ebx+4], eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_16D4:				; CODE XREF: _dtls1_record_bitmap_update+22j
		neg	ecx
		cmp	ecx, 20h ; ' '
		jnb	short loc_16E2
		mov	eax, [esi]
		bts	eax, ecx
		mov	[esi], eax

loc_16E2:				; CODE XREF: _dtls1_record_bitmap_update+59j
		pop	edi
		pop	esi
		pop	ebx
		retn
_dtls1_record_bitmap_update endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_record_replay_check proc	near	; CODE XREF: _dtls1_get_record+202p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, [eax+58h]
		push	edi
		lea	eax, [ebx+4]
		push	eax
		lea	edi, [esi+8]
		push	edi
		call	_satsub64be
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jle	short loc_1726
		mov	eax, [edi]
		mov	[esi+128h], eax
		mov	eax, [edi+4]
		pop	edi
		mov	[esi+12Ch], eax
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1726:				; CODE XREF: _dtls1_record_replay_check+22j
		neg	ecx
		cmp	ecx, 20h ; ' '
		jb	short loc_1733

loc_172D:				; CODE XREF: _dtls1_record_replay_check+54j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1733:				; CODE XREF: _dtls1_record_replay_check+43j
		mov	eax, 1
		shl	eax, cl
		test	[ebx], eax
		jnz	short loc_172D
		mov	ecx, [edi]
		mov	eax, 1
		mov	[esi+128h], ecx
		mov	ecx, [edi+4]
		pop	edi
		mov	[esi+12Ch], ecx
		pop	esi
		pop	ebx
		retn
_dtls1_record_replay_check endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1758h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _dtls1_reset_seq_numbers
_dtls1_reset_seq_numbers proc near	; CODE XREF: _dtls1_read_bytes+54Ap

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		test	[esp+arg_4], 1
		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx+58h]
		jz	short loc_17B4
		mov	eax, [edx+5Ch]
		add	esi, 8
		inc	word ptr [eax+208h]
		mov	ecx, [edx+5Ch]
		movq	xmm0, qword ptr	[ecx+218h]
		movq	qword ptr [ecx+20Ch], xmm0
		xorps	xmm0, xmm0
		mov	eax, [ecx+220h]
		mov	[ecx+214h], eax
		mov	eax, [edx+5Ch]
		movq	qword ptr [eax+218h], xmm0
		xorps	xmm0, xmm0
		mov	dword ptr [eax+220h], 0
		movq	qword ptr [esi], xmm0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_17B4:				; CODE XREF: _dtls1_reset_seq_numbers+Dj
		mov	ecx, [edx+5Ch]
		add	esi, 54h ; 'T'
		xorps	xmm0, xmm0
		mov	eax, [esi]
		mov	[ecx+22Ah], eax
		mov	eax, [esi+4]
		mov	[ecx+22Eh], eax
		mov	eax, [edx+5Ch]
		inc	word ptr [eax+20Ah]
		movq	qword ptr [esi], xmm0
		pop	esi
		retn
_dtls1_reset_seq_numbers endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dtls1_retrieve_buffered_record	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	dword ptr [eax+4]
		call	_pqueue_pop
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1818
		push	esi
		push	[esp+8+arg_0]
		call	_dtls1_copy_record
		push	dword ptr [esi+8]
		call	_CRYPTO_free
		push	esi
		call	_pitem_free
		add	esp, 10h
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1818:				; CODE XREF: _dtls1_retrieve_buffered_record+14j
		xor	eax, eax
		pop	esi
		retn
_dtls1_retrieve_buffered_record	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 181Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl dtls1_write_app_data_bytes(int, int, void	*Src, size_t Size)
		public _dtls1_write_app_data_bytes
_dtls1_write_app_data_bytes proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_1869
		cmp	dword ptr [esi+1Ch], 0
		jnz	short loc_1869
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	short loc_18B2
		jnz	short loc_1869
		push	594h
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	0E5h ; 'Â'
		push	10Ch
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1869:				; CODE XREF: _dtls1_write_app_data_bytes+13j
					; _dtls1_write_app_data_bytes+19j ...
		mov	eax, [esp+4+Size]
		cmp	eax, 4000h
		jle	short loc_1897
		push	59Ah
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		push	14Eh
		push	10Ch
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1897:				; CODE XREF: _dtls1_write_app_data_bytes+56j
		push	0		; int
		push	eax		; Size
		push	[esp+0Ch+Src]	; Src
		mov	dword ptr [esi+18h], 1
		push	[esp+10h+arg_4]	; int
		push	esi		; int
		call	_do_dtls1_write
		add	esp, 14h

loc_18B2:				; CODE XREF: _dtls1_write_app_data_bytes+26j
		pop	esi
		retn
_dtls1_write_app_data_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl dtls1_write_bytes(int, int, void *Src, size_t Size)
		public _dtls1_write_bytes
_dtls1_write_bytes proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		cmp	[esp+Size], 4000h
		jle	short loc_18D5
		push	offset ??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@ ; "len <= SSL3_RT_MAX_PLAIN_LENGTH"
		push	5CBh
		push	offset ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; ".\\ssl\\d1_pkt.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_18D5:				; CODE XREF: _dtls1_write_bytes+8j
		mov	eax, [esp+arg_0]
		push	0		; int
		push	[esp+4+Size]	; Size
		push	[esp+8+Src]	; Src
		mov	dword ptr [eax+18h], 1
		push	[esp+0Ch+arg_4]	; int
		push	eax		; int
		call	_do_dtls1_write
		add	esp, 14h
		retn
_dtls1_write_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_have_handshake_fragment proc near	; CODE XREF: _dtls1_read_bytes+8Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_4], 16h
		push	edi
		jnz	short loc_1976
		mov	edi, [esp+4+arg_0]
		mov	edx, [edi+5Ch]
		cmp	dword ptr [edx+2E0h], 0
		jbe	short loc_1976
		mov	ecx, [esp+4+arg_C]
		add	edx, 2D4h
		push	ebx
		xor	ebx, ebx
		push	esi
		test	ecx, ecx
		jle	short loc_1949
		mov	esi, [esp+0Ch+arg_8]
		xchg	ax, ax

loc_1928:				; CODE XREF: _have_handshake_fragment+4Fj
		mov	eax, [edi+5Ch]
		cmp	dword ptr [eax+2E0h], 0
		jbe	short loc_1949
		mov	al, [edx]
		dec	ecx
		mov	[ebx+esi], al
		inc	edx
		mov	eax, [edi+5Ch]
		inc	ebx
		dec	dword ptr [eax+2E0h]
		test	ecx, ecx
		jg	short loc_1928

loc_1949:				; CODE XREF: _have_handshake_fragment+28j
					; _have_handshake_fragment+3Aj
		mov	eax, [edi+5Ch]
		xor	esi, esi
		cmp	[eax+2E0h], esi
		jbe	short loc_1970
		xchg	ax, ax

loc_1958:				; CODE XREF: _have_handshake_fragment+76j
		mov	cl, [edx]
		lea	edx, [edx+1]
		mov	[eax+esi+2D4h],	cl
		inc	esi
		mov	eax, [edi+5Ch]
		cmp	esi, [eax+2E0h]
		jb	short loc_1958

loc_1970:				; CODE XREF: _have_handshake_fragment+5Cj
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1976:				; CODE XREF: _have_handshake_fragment+6j
					; _have_handshake_fragment+16j
		xor	eax, eax
		pop	edi
		retn
_have_handshake_fragment endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 197Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_satsub64be	proc near		; CODE XREF: _dtls1_record_bitmap_update+16p
					; _dtls1_record_replay_check+16p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		movzx	ecx, byte ptr [esi+7]
		movzx	eax, byte ptr [edi+7]
		sub	ecx, eax
		movzx	eax, byte ptr [edi+6]
		mov	edx, ecx
		mov	[esp+0Ch+arg_0], ecx
		sar	edx, 8
		test	cl, cl
		movzx	ecx, byte ptr [esi+6]
		jns	loc_1A30
		sub	ecx, eax
		movzx	eax, byte ptr [edi+5]
		add	edx, ecx
		movzx	ecx, byte ptr [esi+5]
		sub	ecx, eax
		mov	ebx, edx
		sar	edx, 8
		not	ebx
		add	ecx, edx
		movzx	edx, byte ptr [esi+4]
		mov	eax, ecx
		sar	ecx, 8
		not	eax
		or	ebx, eax
		movzx	eax, byte ptr [edi+4]
		sub	edx, eax
		add	edx, ecx
		movzx	ecx, byte ptr [esi+3]
		mov	eax, edx
		sar	edx, 8
		not	eax
		or	ebx, eax
		movzx	eax, byte ptr [edi+3]
		sub	ecx, eax
		add	ecx, edx
		movzx	edx, byte ptr [esi+2]
		mov	eax, ecx
		sar	ecx, 8
		not	eax
		or	ebx, eax
		movzx	eax, byte ptr [edi+2]
		sub	edx, eax
		add	edx, ecx
		movzx	ecx, byte ptr [esi+1]
		mov	eax, edx
		sar	edx, 8
		not	eax
		or	ebx, eax
		movzx	eax, byte ptr [edi+1]
		sub	ecx, eax
		add	ecx, edx
		movzx	edx, byte ptr [esi]
		mov	eax, ecx
		sar	ecx, 8
		not	eax
		or	ebx, eax
		movzx	eax, byte ptr [edi]
		sub	edx, eax
		add	edx, ecx
		mov	eax, edx
		not	eax
		or	ebx, eax
		jmp	short loc_1A9A
; ---------------------------------------------------------------------------

loc_1A30:				; CODE XREF: _satsub64be+28j
		sub	ecx, eax
		movzx	eax, byte ptr [edi+5]
		add	edx, ecx
		movzx	ecx, byte ptr [esi+5]
		sub	ecx, eax
		mov	ebx, edx
		movzx	eax, byte ptr [edi+4]
		sar	edx, 8
		add	ecx, edx
		movzx	edx, byte ptr [esi+4]
		or	ebx, ecx
		sub	edx, eax
		movzx	eax, byte ptr [edi+3]
		sar	ecx, 8
		add	edx, ecx
		movzx	ecx, byte ptr [esi+3]
		or	ebx, edx
		sub	ecx, eax
		movzx	eax, byte ptr [edi+2]
		sar	edx, 8
		add	ecx, edx
		movzx	edx, byte ptr [esi+2]
		or	ebx, ecx
		sub	edx, eax
		movzx	eax, byte ptr [edi+1]
		sar	ecx, 8
		add	edx, ecx
		movzx	ecx, byte ptr [esi+1]
		or	ebx, edx
		sub	ecx, eax
		movzx	eax, byte ptr [edi]
		sar	edx, 8
		add	ecx, edx
		movzx	edx, byte ptr [esi]
		or	ebx, ecx
		sub	edx, eax
		sar	ecx, 8
		add	edx, ecx
		or	ebx, edx

loc_1A9A:				; CODE XREF: _satsub64be+B2j
		sar	edx, 8
		pop	edi
		shl	edx, 8
		test	bl, bl
		pop	esi
		pop	ebx
		jz	short loc_1AB0
		or	edx, 80h
		mov	eax, edx
		retn
; ---------------------------------------------------------------------------

loc_1AB0:				; CODE XREF: _satsub64be+129j
		mov	eax, [esp+arg_0]
		movzx	eax, al
		add	eax, edx
		retn
_satsub64be	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ABCh
; COMDAT (pick any)
		public ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
; `string'
??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@ db '.\ssl\d1_pkt.c',0
					; DATA XREF: _do_dtls1_write+25o
					; _do_dtls1_write+175o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ACCh
; COMDAT (pick any)
		public ??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@
; `string'
??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ db 'mac_size <= EVP_MAX_MD_SIZE',0
					; DATA XREF: _dtls1_process_record+D0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AE8h
; COMDAT (pick any)
		public ??_C@_02DPKJAMEF@?$CFd?$AA@
; `string'
??_C@_02DPKJAMEF@?$CFd?$AA@ db '%d',0   ; DATA XREF: _dtls1_read_bytes+732o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AECh
; COMDAT (pick any)
		public ??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@
; `string'
??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@ db	'SSL alert number ',0
					; DATA XREF: _dtls1_read_bytes+748o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B00h
; COMDAT (pick any)
		public ??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@
; `string'
??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@	db 'len <= SSL3_RT_MAX_PLAIN_LENGTH',0
					; DATA XREF: _dtls1_write_bytes+Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B20h
; COMDAT (pick any)
		public ??_C@_01GBGANLPD@0?$AA@
; `string'
??_C@_01GBGANLPD@0?$AA@	db '0',0        ; DATA XREF: _do_dtls1_write+1Bo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _dtls1_buffer_record+27p
		extrn _CRYPTO_free:near	; CODE XREF: _dtls1_buffer_record+F5p
					; _dtls1_buffer_record+FEp ...
		extrn _OpenSSLDie:near	; CODE XREF: _do_dtls1_write+2Ap
					; _dtls1_process_record+DFp ...
		extrn _CRYPTO_memcmp:near ; CODE XREF: _dtls1_process_record+179p
		extrn _BIO_set_flags:near ; CODE XREF: _dtls1_read_bytes+3CEp
					; _dtls1_read_bytes+664p ...
		extrn _BIO_clear_flags:near ; CODE XREF: _dtls1_read_bytes+3C6p
					; _dtls1_read_bytes+65Cp ...
		extrn _BIO_ctrl:near	; CODE XREF: _dtls1_dispatch_alert+72p
		extrn _BIO_snprintf:near ; CODE	XREF: _dtls1_read_bytes+73Ep
		extrn _ERR_put_error:near ; CODE XREF: _do_dtls1_write+186p
					; _dtls1_buffer_record+E5p ...
		extrn _ERR_add_error_data:near ; CODE XREF: _dtls1_read_bytes+74Ep
		extrn _EVP_MD_size:near	; CODE XREF: _do_dtls1_write+ADp
					; _dtls1_process_record+C1p
		extrn _EVP_MD_CTX_md:near ; CODE XREF: _do_dtls1_write+95p
					; _do_dtls1_write+A7p ...
		extrn _EVP_CIPHER_CTX_iv_length:near ; CODE XREF: _do_dtls1_write+12Cp
		extrn _EVP_CIPHER_CTX_flags:near ; CODE	XREF: _do_dtls1_write+114p
					; _dtls1_process_record+FDp ...
		extrn _pitem_new:near	; CODE XREF: _dtls1_buffer_record+33p
		extrn _pitem_free:near	; CODE XREF: _dtls1_buffer_record+104p
					; _dtls1_buffer_record+140p ...
		extrn _pqueue_insert:near ; CODE XREF: _dtls1_buffer_record+117p
		extrn _pqueue_peek:near	; CODE XREF: _dtls1_process_buffered_records+Fp
					; _dtls1_process_buffered_records+3Cp ...
		extrn _pqueue_pop:near	; CODE XREF: _dtls1_get_record+2Cp
					; _dtls1_process_buffered_records+59p ...
		extrn _pqueue_size:near	; CODE XREF: _dtls1_buffer_record+8p
		extrn _SSL_get_rbio:near ; CODE	XREF: _dtls1_read_bytes+3BCp
					; _dtls1_read_bytes+652p ...
		extrn _SSL_CTX_remove_session:near ; CODE XREF:	_dtls1_read_bytes+762p
		extrn _SSL_state:near	; CODE XREF: _dtls1_get_record+228p
					; _dtls1_read_bytes+A5p ...
		extrn _ssl3_send_alert:near ; CODE XREF: _dtls1_process_record+22Cp
					; _dtls1_read_bytes+9B0p
		extrn _ssl3_renegotiate:near ; CODE XREF: _dtls1_read_bytes+36Ap
		extrn _ssl3_renegotiate_check:near ; CODE XREF:	_dtls1_read_bytes+370p
		extrn _ssl3_setup_buffers:near ; CODE XREF: _dtls1_buffer_record+C6p
					; _dtls1_read_bytes+35p
		extrn _ssl3_record_sequence_update:near	; CODE XREF: _do_dtls1_write+29Bp
		extrn _ssl3_do_change_cipher_spec:near ; CODE XREF: _dtls1_read_bytes+537p
		extrn _ssl3_read_n:near	; CODE XREF: _dtls1_get_record+81p
					; _dtls1_get_record+176p
		extrn _ssl3_do_compress:near ; CODE XREF: _do_dtls1_write+164p
		extrn _ssl3_do_uncompress:near ; CODE XREF: _dtls1_process_record+1DFp
		extrn _ssl3_write_pending:near ; CODE XREF: _do_dtls1_write+3Cp
					; _do_dtls1_write+2F0p
		extrn _dtls1_read_failed:near ;	CODE XREF: _dtls1_read_bytes+17Ap
		extrn _dtls1_retransmit_buffered_messages:near
					; CODE XREF: _dtls1_read_bytes+5C8p
		extrn _dtls1_get_message_header:near ; CODE XREF: _dtls1_read_bytes+58Cp
		extrn _dtls1_get_ccs_header:near ; CODE	XREF: _dtls1_read_bytes+4B6p
		extrn _dtls1_check_timeout_num:near ; CODE XREF: _dtls1_read_bytes+5B7p
		extrn _dtls1_handle_timeout:near ; CODE	XREF: _dtls1_read_bytes+150p
		extrn _dtls1_process_heartbeat:near ; CODE XREF: _dtls1_read_bytes+91Ap
		extrn _ssl3_cbc_copy_mac:near ;	CODE XREF: _dtls1_process_record+13Ap
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _dtls1_process_record+258p
					; _dtls1_read_bytes+4Cp ...
		extrn __chkstk:near	; CODE XREF: _do_dtls1_write+5p
					; _dtls1_process_record+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _do_dtls1_write+1A9p
					; _dtls1_read_bytes+9E9p
		extrn ___security_cookie:near ;	DATA XREF: _dtls1_process_record+Ar
					; _dtls1_read_bytes+Ar


		end
