;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7B7854E71233B51731B8B329DCCAAA25
; Input	CRC32 :	D8551806

; File Name   :	C:\compspace\Diff\openssl\obj\v3_prn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509V3_EXT_print
_X509V3_EXT_print proc near		; CODE XREF: _X509V3_EXT_print_fp+25p
					; _X509V3_extensions_print+C2p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		mov	ebx, 1
		push	esi
		push	ebp
		mov	[esp+18h+var_4], 0
		call	_X509V3_EXT_get
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_4A
		push	eax
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	ebp
		push	[esp+24h+arg_0]
		call	_unknown_ext_print
		add	esp, 14h
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4A:					; CODE XREF: _X509V3_EXT_print+2Bj
		mov	ecx, [ebp+8]
		push	edi
		mov	eax, [ecx+8]
		mov	[esp+18h+var_8], eax
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_75
		call	eax
		push	eax
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		lea	eax, [esp+20h+var_8]
		push	eax
		push	0
		call	_ASN1_item_d2i
		add	esp, 10h
		jmp	short loc_86
; ---------------------------------------------------------------------------

loc_75:					; CODE XREF: _X509V3_EXT_print+5Aj
		push	dword ptr [ecx]
		lea	eax, [esp+1Ch+var_8]
		push	eax
		mov	eax, [esi+14h]
		push	0
		call	eax
		add	esp, 0Ch

loc_86:					; CODE XREF: _X509V3_EXT_print+73j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_AB
		push	1
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	ebp
		push	[esp+28h+arg_0]
		call	_unknown_ext_print
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_AB:					; CODE XREF: _X509V3_EXT_print+8Aj
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_DE
		push	edi
		push	esi
		call	eax
		add	esp, 8
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jz	short loc_12C
		push	eax
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+20h+arg_C]
		push	offset ??_C@_05NBDDFMDA@?$CF?$CKs?$CFs?$AA@ ; "%*s%s"
		push	[esp+28h+arg_0]
		call	_BIO_printf
		add	esp, 14h
		jmp	short loc_12E
; ---------------------------------------------------------------------------

loc_DE:					; CODE XREF: _X509V3_EXT_print+B0j
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_112
		push	0
		push	edi
		push	esi
		call	eax
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_F8
		xor	ebx, ebx
		jmp	short $err$23
; ---------------------------------------------------------------------------

loc_F8:					; CODE XREF: _X509V3_EXT_print+F2j
		mov	eax, [esi+4]
		and	eax, 4
		push	eax
		push	[esp+1Ch+arg_C]
		push	ebp
		push	[esp+24h+arg_0]
		call	_X509V3_EXT_val_prn
		add	esp, 10h
		jmp	short $err$23
; ---------------------------------------------------------------------------

loc_112:				; CODE XREF: _X509V3_EXT_print+E3j
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_12C
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_0]
		push	edi
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_12E

loc_12C:				; CODE XREF: _X509V3_EXT_print+BFj
					; _X509V3_EXT_print+117j
		xor	ebx, ebx

loc_12E:				; CODE XREF: _X509V3_EXT_print+DCj
					; _X509V3_EXT_print+12Aj
		xor	ebp, ebp

$err$23:				; CODE XREF: _X509V3_EXT_print+F6j
					; _X509V3_EXT_print+110j
		push	offset _X509V3_conf_free
		push	ebp
		call	_sk_pop_free
		mov	eax, [esp+20h+var_4]
		add	esp, 8
		test	eax, eax
		jz	short loc_14F
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_14F:				; CODE XREF: _X509V3_EXT_print+144j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_16C
		call	eax
		push	eax
		push	edi
		call	_ASN1_item_free
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_16C:				; CODE XREF: _X509V3_EXT_print+154j
		mov	ecx, [esi+10h]
		push	edi
		call	ecx
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_X509V3_EXT_print endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 180h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509V3_EXT_print_fp
_X509V3_EXT_print_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_197
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_197:				; CODE XREF: _X509V3_EXT_print_fp+13j
		push	esi
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	edi
		call	_X509V3_EXT_print
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_X509V3_EXT_print_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509V3_EXT_val_prn
_X509V3_EXT_val_prn proc near		; CODE XREF: _X509V3_EXT_print+108p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jz	loc_2C4
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		test	ebp, ebp
		jz	short loc_1E4
		push	ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jnz	short loc_213

loc_1E4:				; CODE XREF: _X509V3_EXT_val_prn+19j
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+10h+arg_8]
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		push	ebx
		call	_sk_num
		add	esp, 14h
		test	eax, eax
		jnz	short loc_213
		push	offset ??_C@_08DGFAABGD@?$DMEMPTY?$DO?6?$AA@ ; "<EMPTY>\n"
		push	esi
		call	_BIO_puts
		add	esp, 8

loc_213:				; CODE XREF: _X509V3_EXT_val_prn+26j
					; _X509V3_EXT_val_prn+47j
		push	edi
		push	ebx
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_2C1
		nop	dword ptr [eax+eax+00h]

loc_22C:				; CODE XREF: _X509V3_EXT_val_prn+FFj
		test	ebp, ebp
		jz	short loc_249
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+14h+arg_8]
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		add	esp, 10h
		jmp	short loc_25B
; ---------------------------------------------------------------------------

loc_249:				; CODE XREF: _X509V3_EXT_val_prn+72j
		test	edi, edi
		jle	short loc_25B
		push	offset ??_C@_02KEGNLNML@?0?5?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		add	esp, 8

loc_25B:				; CODE XREF: _X509V3_EXT_val_prn+8Bj
					; _X509V3_EXT_val_prn+8Fj
		push	edi
		push	ebx
		call	_sk_value
		add	esp, 8
		mov	ecx, [eax+4]
		test	ecx, ecx
		jnz	short loc_27A
		push	dword ptr [eax+8]
		push	esi
		call	_BIO_puts
		add	esp, 8
		jmp	short loc_29D
; ---------------------------------------------------------------------------

loc_27A:				; CODE XREF: _X509V3_EXT_val_prn+AEj
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_28D
		push	ecx
		push	esi
		call	_BIO_puts
		add	esp, 8
		jmp	short loc_29D
; ---------------------------------------------------------------------------

loc_28D:				; CODE XREF: _X509V3_EXT_val_prn+C3j
		push	eax
		push	ecx
		push	offset ??_C@_05CCMOGDN@?$CFs?3?$CFs?$AA@ ; "%s:%s"
		push	esi
		call	_BIO_printf
		add	esp, 10h

loc_29D:				; CODE XREF: _X509V3_EXT_val_prn+BCj
					; _X509V3_EXT_val_prn+CFj
		test	ebp, ebp
		jz	short loc_2AF
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8

loc_2AF:				; CODE XREF: _X509V3_EXT_val_prn+E3j
		push	ebx
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	loc_22C

loc_2C1:				; CODE XREF: _X509V3_EXT_val_prn+65j
		pop	edi
		pop	esi
		pop	ebp

loc_2C4:				; CODE XREF: _X509V3_EXT_val_prn+7j
		pop	ebx
		retn
_X509V3_EXT_val_prn endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509V3_extensions_print
_X509V3_extensions_print proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		mov	ebp, [esp+4+arg_8]
		push	ebp
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jg	short loc_2E1
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2E1:				; CODE XREF: _X509V3_extensions_print+10j
		mov	eax, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_10]
		test	eax, eax
		jz	short loc_30B
		push	eax
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	edi
		push	offset ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@	; "%*s%s:\n"
		push	esi
		call	_BIO_printf
		add	esp, 14h
		add	edi, 4

loc_30B:				; CODE XREF: _X509V3_extensions_print+29j
		push	ebx
		push	ebp
		xor	ebx, ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_3E0

loc_31F:				; CODE XREF: _X509V3_extensions_print+112j
		push	ebx
		push	ebp
		call	_sk_value
		add	esp, 8
		mov	ebp, eax
		test	edi, edi
		jz	short loc_34B
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	edi
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_3EA

loc_34B:				; CODE XREF: _X509V3_extensions_print+65j
		push	ebp
		call	_X509_EXTENSION_get_object
		push	eax
		push	esi
		call	_i2a_ASN1_OBJECT
		push	ebp
		call	_X509_EXTENSION_get_critical
		test	eax, eax
		mov	ecx, offset ??_C@_08CBBMEOFB@critical?$AA@ ; "critical"
		mov	eax, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		cmovz	ecx, eax
		push	ecx
		push	offset ??_C@_05BBKJDEBM@?3?5?$CFs?6?$AA@ ; ": %s\n"
		push	esi
		call	_BIO_printf
		add	esp, 1Ch
		test	eax, eax
		jle	short loc_3EA
		lea	eax, [edi+4]
		push	eax
		push	[esp+14h+arg_C]
		push	ebp
		push	esi
		call	_X509V3_EXT_print
		add	esp, 10h
		test	eax, eax
		jnz	short loc_3B6
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		lea	eax, [edi+4]
		push	eax
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	esi
		call	_BIO_printf
		push	dword ptr [ebp+8]
		push	esi
		call	_ASN1_STRING_print
		add	esp, 18h

loc_3B6:				; CODE XREF: _X509V3_extensions_print+CCj
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_3EA
		mov	ebp, [esp+10h+arg_8]
		inc	ebx
		push	ebp
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	loc_31F

loc_3E0:				; CODE XREF: _X509V3_extensions_print+51j
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_3EA:				; CODE XREF: _X509V3_extensions_print+7Dj
					; _X509V3_extensions_print+B6j	...
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
_X509V3_extensions_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_unknown_ext_print proc	near		; CODE XREF: _X509V3_EXT_print+3Bp
					; _X509V3_EXT_print+9Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_8]
		and	eax, 0F0000h
		cmp	eax, 20000h
		ja	short loc_471
		jz	short loc_452
		test	eax, eax
		jz	short loc_44F
		cmp	eax, 10000h
		jnz	short loc_478
		cmp	[esp+arg_10], 0
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+4+arg_C]
		jz	short loc_438
		push	offset ??_C@_0BB@NBGCBFIG@?$CF?$CKs?$DMParse?5Error?$DO?$AA@ ; "%*s<Parse Error>"
		push	[esp+0Ch+arg_0]
		call	_BIO_printf
		mov	eax, 1
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_438:				; CODE XREF: _unknown_ext_print+2Bj
		push	offset ??_C@_0BD@BEPJCIKF@?$CF?$CKs?$DMNot?5Supported?$DO?$AA@ ; "%*s<Not Supported>"
		push	[esp+0Ch+arg_0]
		call	_BIO_printf
		mov	eax, 1
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_44F:				; CODE XREF: _unknown_ext_print+14j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_452:				; CODE XREF: _unknown_ext_print+10j
		mov	eax, [esp+arg_4]
		push	0FFFFFFFFh
		push	[esp+4+arg_C]
		mov	eax, [eax+8]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	[esp+10h+arg_0]
		call	_ASN1_parse_dump
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_471:				; CODE XREF: _unknown_ext_print+Ej
		cmp	eax, 30000h
		jz	short loc_47E

loc_478:				; CODE XREF: _unknown_ext_print+1Bj
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_47E:				; CODE XREF: _unknown_ext_print+82j
		mov	eax, [esp+arg_4]
		push	[esp+arg_C]
		mov	eax, [eax+8]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	[esp+0Ch+arg_0]
		call	_BIO_dump_indent
		add	esp, 10h
		retn
_unknown_ext_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 49Ch
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _X509V3_EXT_print+C2o
					; _X509V3_EXT_val_prn:loc_1E4o	...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A0h
; COMDAT (pick any)
		public ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@
; `string'
??_C@_03HIJPJGOM@?$CF?$CKs?$AA@	dd 732A25h ; DATA XREF:	_X509V3_EXT_val_prn+31o
					; _X509V3_EXT_val_prn+7Do ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A4h
; COMDAT (pick any)
		public ??_C@_08DGFAABGD@?$DMEMPTY?$DO?6?$AA@
; `string'
??_C@_08DGFAABGD@?$DMEMPTY?$DO?6?$AA@ db '<EMPTY>',0Ah,0
					; DATA XREF: _X509V3_EXT_val_prn+49o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
; COMDAT (pick any)
		public ??_C@_02KEGNLNML@?0?5?$AA@
; `string'
??_C@_02KEGNLNML@?0?5?$AA@ db 2Ch, 20h,	0 ; DATA XREF: _X509V3_EXT_val_prn+91o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B4h
; COMDAT (pick any)
		public ??_C@_05CCMOGDN@?$CFs?3?$CFs?$AA@
; `string'
??_C@_05CCMOGDN@?$CFs?3?$CFs?$AA@ db '%s:%s',0 ; DATA XREF: _X509V3_EXT_val_prn+D3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BCh
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _X509V3_EXT_val_prn+E5o
					; _X509V3_extensions_print+F0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4C0h
; COMDAT (pick any)
		public ??_C@_05NBDDFMDA@?$CF?$CKs?$CFs?$AA@
; `string'
??_C@_05NBDDFMDA@?$CF?$CKs?$CFs?$AA@ db	'%*s%s',0 ; DATA XREF: _X509V3_EXT_print+CBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4C8h
; COMDAT (pick any)
		public ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@
; `string'
??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@ db '%*s%s:',0Ah,0
					; DATA XREF: _X509V3_extensions_print+32o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D0h
; COMDAT (pick any)
		public ??_C@_08CBBMEOFB@critical?$AA@
; `string'
??_C@_08CBBMEOFB@critical?$AA@ db 'critical',0 ; DATA XREF: _X509V3_extensions_print+98o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4DCh
; COMDAT (pick any)
		public ??_C@_05BBKJDEBM@?3?5?$CFs?6?$AA@
; `string'
??_C@_05BBKJDEBM@?3?5?$CFs?6?$AA@ db ': %s',0Ah,0 ; DATA XREF: _X509V3_extensions_print+A6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E4h
; COMDAT (pick any)
		public ??_C@_0BB@NBGCBFIG@?$CF?$CKs?$DMParse?5Error?$DO?$AA@
; `string'
??_C@_0BB@NBGCBFIG@?$CF?$CKs?$DMParse?5Error?$DO?$AA@ db '%*s<Parse Error>',0
					; DATA XREF: _unknown_ext_print+2Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F8h
; COMDAT (pick any)
		public ??_C@_0BD@BEPJCIKF@?$CF?$CKs?$DMNot?5Supported?$DO?$AA@
; `string'
??_C@_0BD@BEPJCIKF@?$CF?$CKs?$DMNot?5Supported?$DO?$AA@	db '%*s<Not Supported>',0
					; DATA XREF: _unknown_ext_print:loc_438o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _X509V3_EXT_val_prn+1Cp
					; _X509V3_EXT_val_prn+3Dp ...
		extrn _sk_value:near	; CODE XREF: _X509V3_EXT_val_prn+A1p
					; _X509V3_extensions_print+59p
		extrn _sk_pop_free:near	; CODE XREF: _X509V3_EXT_print+136p
		extrn _CRYPTO_free:near	; CODE XREF: _X509V3_EXT_print+147p
		extrn _BIO_new_fp:near	; CODE XREF: _X509V3_EXT_print_fp+7p
		extrn _BIO_free:near	; CODE XREF: _X509V3_EXT_print_fp+2Dp
		extrn _BIO_write:near	; CODE XREF: _X509V3_extensions_print+F6p
		extrn _BIO_puts:near	; CODE XREF: _X509V3_EXT_val_prn+4Fp
					; _X509V3_EXT_val_prn+B4p ...
		extrn _BIO_dump_indent:near ; CODE XREF: _unknown_ext_print+9Ep
		extrn _BIO_printf:near	; CODE XREF: _X509V3_EXT_print+D4p
					; _X509V3_EXT_val_prn+37p ...
		extrn _i2a_ASN1_OBJECT:near ; CODE XREF: _X509V3_extensions_print+8Bp
		extrn _ASN1_STRING_print:near ;	CODE XREF: _X509V3_extensions_print+E6p
		extrn _ASN1_parse_dump:near ; CODE XREF: _unknown_ext_print+74p
		extrn _ASN1_item_free:near ; CODE XREF:	_X509V3_EXT_print+15Ap
		extrn _ASN1_item_d2i:near ; CODE XREF: _X509V3_EXT_print+6Bp
		extrn _X509_EXTENSION_get_object:near
					; CODE XREF: _X509V3_extensions_print+84p
		extrn _X509_EXTENSION_get_critical:near
					; CODE XREF: _X509V3_extensions_print+91p
		extrn _X509V3_conf_free:near ; DATA XREF: _X509V3_EXT_print:$err$23o
		extrn _X509V3_EXT_get:near ; CODE XREF:	_X509V3_EXT_print+1Fp
		extrn __chkstk:near	; CODE XREF: _X509V3_EXT_print+5p


		end
