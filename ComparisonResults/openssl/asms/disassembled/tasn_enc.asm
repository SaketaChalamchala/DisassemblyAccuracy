;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0128E4512C7CF4F07CA5D1A06FB9E4FD
; Input	CRC32 :	D5371312

; File Name   :	C:\compspace\Diff\openssl\obj\tasn_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_ex_i2d
_ASN1_item_ex_i2d proc near		; CODE XREF: _asn1_item_flags_i2d+20p
					; _asn1_item_flags_i2d+64p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 18h
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+20h+arg_8]
		mov	eax, 1
		xor	ebx, ebx
		mov	[esp+20h+var_14], eax
		push	edi
		mov	edi, [esp+24h+arg_0]
		mov	dl, [esi]
		mov	ecx, [esi+10h]
		test	dl, dl
		jz	short loc_36
		cmp	[edi], ebx
		jnz	short loc_36
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_36:					; CODE XREF: _ASN1_item_ex_i2d+27j
					; _ASN1_item_ex_i2d+2Bj
		test	ecx, ecx
		jz	short loc_47
		mov	eax, [ecx+10h]
		test	eax, eax
		cmovnz	ebx, eax
		mov	eax, 1

loc_47:					; CODE XREF: _ASN1_item_ex_i2d+38j
		movsx	edx, dl
		push	ebp
		cmp	edx, 6		; switch 7 cases
		ja	loc_105		; jumptable 0000005C default case
		mov	ebp, [esp+28h+arg_10]
		mov	[esp+28h+var_18], ebp
		jmp	ds:$LN53[edx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		push	[esp+28h+arg_10] ; jumptable 0000005C case 0
		mov	eax, [esi+8]
		push	[esp+2Ch+arg_C]
		test	eax, eax
		jz	short loc_8E
		push	eax
		push	[esp+34h+arg_4]
		push	edi
		call	_asn1_template_ex_i2d
		add	esp, 14h
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		push	[esp+28h+arg_10] ; jumptable 0000005C case 5
		push	0FFFFFFFFh

loc_8E:					; CODE XREF: _ASN1_item_ex_i2d+70j
		push	esi
		push	[esp+34h+arg_4]
		push	edi
		call	_asn1_i2d_ex_primitive
		add	esp, 14h
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		test	ebx, ebx	; jumptable 0000005C case 2
		jz	short loc_B7
		push	0
		push	esi
		push	edi
		push	6
		call	ebx
		add	esp, 10h
		test	eax, eax
		jz	short loc_105	; jumptable 0000005C default case

loc_B7:					; CODE XREF: _ASN1_item_ex_i2d+A6j
		push	esi
		push	edi
		call	_asn1_get_choice_selector
		add	esp, 8
		test	eax, eax
		js	short loc_F6
		cmp	eax, [esi+0Ch]
		jge	short loc_F6
		lea	ecx, [eax+eax*4]
		mov	eax, [esi+8]
		lea	esi, [eax+ecx*4]
		push	esi
		push	edi
		call	_asn1_get_field_ptr
		push	[esp+30h+arg_10]
		push	0FFFFFFFFh
		push	esi
		push	[esp+3Ch+arg_4]
		push	eax
		call	_asn1_template_ex_i2d
		add	esp, 1Ch
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_F6:					; CODE XREF: _ASN1_item_ex_i2d+C3j
					; _ASN1_item_ex_i2d+C8j
		test	ebx, ebx
		jz	short loc_105	; jumptable 0000005C default case
		push	0
		push	esi
		push	edi
		push	7
		call	ebx
		add	esp, 10h

loc_105:				; CODE XREF: _ASN1_item_ex_i2d+4Ej
					; _ASN1_item_ex_i2d+B5j ...
		xor	eax, eax	; jumptable 0000005C default case

loc_107:				; CODE XREF: _ASN1_item_ex_i2d+148j
					; _ASN1_item_ex_i2d+151j
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$LN19:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		push	[esp+28h+arg_10] ; jumptable 0000005C case 4
		mov	eax, [ecx+14h]
		push	[esp+2Ch+arg_C]
		push	esi
		push	[esp+34h+arg_4]
		push	edi
		call	eax
		add	esp, 14h
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$LN20:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		mov	esi, [esp+28h+arg_4] ; jumptable 0000005C case 3
		test	esi, esi
		jz	short loc_139
		mov	ebx, [esi]
		jmp	short loc_13B
; ---------------------------------------------------------------------------

loc_139:				; CODE XREF: _ASN1_item_ex_i2d+133j
		xor	ebx, ebx

loc_13B:				; CODE XREF: _ASN1_item_ex_i2d+137j
		mov	eax, [ecx+0Ch]
		push	esi
		push	dword ptr [edi]
		call	eax
		add	esp, 8
		test	esi, esi
		jz	short loc_107
		mov	edx, [esp+28h+arg_C]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_107
		mov	cl, [ebx]
		and	cl, 20h
		or	cl, byte ptr [esp+28h+arg_10]
		pop	ebp
		pop	edi
		or	cl, dl
		pop	esi
		mov	[ebx], cl
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		test	ebp, 800h	; jumptable 0000005C case 6
		mov	ecx, 2
		cmovnz	eax, ecx
		mov	[esp+28h+var_14], eax

$LN24:					; CODE XREF: _ASN1_item_ex_i2d+5Cj
					; DATA XREF: .text$mn:$LN53o
		push	esi		; jumptable 0000005C case 1
		push	edi
		push	[esp+30h+arg_4]
		lea	eax, [esp+34h+arg_8]
		push	eax
		call	_asn1_enc_restore
		add	esp, 10h
		test	eax, eax
		js	loc_105		; jumptable 0000005C default case
		jle	short loc_1A3
		mov	eax, [esp+28h+arg_8]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1A3:				; CODE XREF: _ASN1_item_ex_i2d+195j
		mov	eax, [esp+28h+arg_C]
		xor	ecx, ecx
		mov	[esp+28h+arg_8], ecx
		mov	[esp+28h+var_10], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1C8
		and	ebp, 0FFFFFF3Fh
		mov	[esp+28h+var_10], 10h
		mov	[esp+28h+var_18], ebp

loc_1C8:				; CODE XREF: _ASN1_item_ex_i2d+1B4j
		test	ebx, ebx
		jz	short loc_1E3
		push	0
		push	esi
		push	edi
		push	6
		call	ebx
		add	esp, 10h
		test	eax, eax
		jz	loc_105		; jumptable 0000005C default case
		mov	ecx, [esp+28h+arg_8]

loc_1E3:				; CODE XREF: _ASN1_item_ex_i2d+1CAj
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [esi+8]
		mov	[esp+28h+var_8], 0
		mov	[esp+28h+var_C], eax
		jle	short loc_24E

loc_1F8:				; CODE XREF: _ASN1_item_ex_i2d+248j
		push	1
		push	eax
		push	edi
		call	_asn1_do_adb
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_105		; jumptable 0000005C default case
		push	ebp
		push	edi
		call	_asn1_get_field_ptr
		push	[esp+30h+var_18]
		push	0FFFFFFFFh
		push	ebp
		push	0
		push	eax
		call	_asn1_template_ex_i2d
		mov	ecx, [esp+44h+arg_8]
		add	esp, 1Ch
		mov	edx, [esp+28h+var_8]
		add	ecx, eax
		mov	eax, [esp+28h+var_C]
		inc	edx
		add	eax, 14h
		mov	[esp+28h+arg_8], ecx
		mov	[esp+28h+var_C], eax
		mov	[esp+28h+var_8], edx
		cmp	edx, [esi+0Ch]
		jl	short loc_1F8
		mov	ebp, [esp+28h+var_18]

loc_24E:				; CODE XREF: _ASN1_item_ex_i2d+1F6j
		push	[esp+28h+var_10]
		push	ecx
		push	[esp+30h+var_14]
		call	_ASN1_object_size
		mov	ecx, eax
		add	esp, 0Ch
		mov	eax, [esp+28h+arg_4]
		mov	[esp+28h+var_4], ecx
		test	eax, eax
		jnz	short loc_277
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, ecx
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_277:				; CODE XREF: _ASN1_item_ex_i2d+26Bj
		push	ebp
		push	[esp+2Ch+var_10]
		push	[esp+30h+arg_8]
		push	[esp+34h+var_14]
		push	eax
		call	_ASN1_put_object
		mov	eax, [esi+8]
		add	esp, 14h
		cmp	dword ptr [esi+0Ch], 0
		mov	[esp+28h+var_C], 0
		mov	[esp+28h+var_8], eax
		jle	short loc_2EF

loc_2A2:				; CODE XREF: _ASN1_item_ex_i2d+2EBj
		push	1
		push	eax
		push	edi
		call	_asn1_do_adb
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_105		; jumptable 0000005C default case
		push	ebp
		push	edi
		call	_asn1_get_field_ptr
		push	[esp+30h+var_18]
		push	0FFFFFFFFh
		push	ebp
		mov	ebp, [esp+3Ch+arg_4]
		push	ebp
		push	eax
		call	_asn1_template_ex_i2d
		mov	ecx, [esp+44h+var_C]
		add	esp, 1Ch
		mov	eax, [esp+28h+var_8]
		inc	ecx
		add	eax, 14h
		mov	[esp+28h+var_C], ecx
		mov	[esp+28h+var_8], eax
		cmp	ecx, [esi+0Ch]
		jl	short loc_2A2
		jmp	short loc_2F3
; ---------------------------------------------------------------------------

loc_2EF:				; CODE XREF: _ASN1_item_ex_i2d+2A0j
		mov	ebp, [esp+28h+arg_4]

loc_2F3:				; CODE XREF: _ASN1_item_ex_i2d+2EDj
		cmp	[esp+28h+var_14], 2
		jnz	short loc_303
		push	ebp
		call	_ASN1_put_eoc
		add	esp, 4

loc_303:				; CODE XREF: _ASN1_item_ex_i2d+2F8j
		test	ebx, ebx
		jz	short loc_31A
		push	0
		push	esi
		push	edi
		push	7
		call	ebx
		add	esp, 10h
		test	eax, eax
		jz	loc_105		; jumptable 0000005C default case

loc_31A:				; CODE XREF: _ASN1_item_ex_i2d+305j
		mov	eax, [esp+28h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
_ASN1_item_ex_i2d endp

; ---------------------------------------------------------------------------
		align 4
$LN53		dd offset $LN12		; DATA XREF: _ASN1_item_ex_i2d+5Cr
		dd offset $LN24		; jump table for switch	statement
		dd offset $LN15
		dd offset $LN20
		dd offset $LN19
		dd offset $LN14
		dd offset $LN23
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 344h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_i2d
_ASN1_item_i2d	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_asn1_item_flags_i2d
		add	esp, 10h
		retn
_ASN1_item_i2d	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 35Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_ndef_i2d
_ASN1_item_ndef_i2d proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	800h
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_asn1_item_flags_i2d
		add	esp, 10h
		retn
_ASN1_item_ndef_i2d endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 378h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_template_i2d
_ASN1_template_i2d proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0
		push	0FFFFFFFFh
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_asn1_template_ex_i2d
		add	esp, 14h
		retn
_ASN1_template_i2d endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 394h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl asn1_ex_i2c(int, void *Dst, int, int)
		public _asn1_ex_i2c
_asn1_ex_i2c	proc near		; CODE XREF: _asn1_i2d_ex_primitive+2Bp
					; _asn1_i2d_ex_primitive+A9p

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_C]
		mov	eax, [edx+10h]
		test	eax, eax
		jz	short loc_3B9
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_3B9
		push	edx
		push	[esp+4+arg_8]
		push	[esp+8+Dst]
		push	[esp+0Ch+arg_0]
		call	eax
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_3B9:				; CODE XREF: _asn1_ex_i2c+9j
					; _asn1_ex_i2c+10j
		mov	al, [edx]
		mov	ecx, [esp+arg_0]
		test	al, al
		jnz	short loc_3C9
		cmp	dword ptr [edx+4], 1
		jz	short loc_3D2

loc_3C9:				; CODE XREF: _asn1_ex_i2c+2Dj
		cmp	dword ptr [ecx], 0
		jnz	short loc_3D2
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_3D2:				; CODE XREF: _asn1_ex_i2c+33j
					; _asn1_ex_i2c+38j
		push	esi
		cmp	al, 5
		jnz	short loc_3E4
		mov	eax, [ecx]
		mov	esi, [eax+4]
		mov	eax, [esp+4+arg_8]
		mov	[eax], esi
		jmp	short loc_3FB
; ---------------------------------------------------------------------------

loc_3E4:				; CODE XREF: _asn1_ex_i2c+41j
		cmp	dword ptr [edx+4], 0FFFFFFFCh
		mov	eax, [esp+4+arg_8]
		jnz	short loc_3F9
		mov	ecx, [ecx]
		mov	esi, [ecx]
		add	ecx, 4
		mov	[eax], esi
		jmp	short loc_3FB
; ---------------------------------------------------------------------------

loc_3F9:				; CODE XREF: _asn1_ex_i2c+58j
		mov	esi, [eax]

loc_3FB:				; CODE XREF: _asn1_ex_i2c+4Ej
					; _asn1_ex_i2c+63j
		dec	esi
		cmp	esi, 9		; switch 10 cases
		ja	$LN21		; jumptable 00000405 default case
		jmp	ds:$LN30[esi*4]	; switch jump
; ---------------------------------------------------------------------------

$LN12_0:				; CODE XREF: _asn1_ex_i2c+71j
					; DATA XREF: .text$mn:$LN30o
		mov	eax, [ecx]	; jumptable 00000405 case 5
		mov	ecx, [eax+10h]
		mov	esi, [eax+0Ch]
		jmp	loc_4B5
; ---------------------------------------------------------------------------

$LN13:					; CODE XREF: _asn1_ex_i2c+71j
					; DATA XREF: .text$mn:$LN30o
		xor	ecx, ecx	; jumptable 00000405 case 4
		xor	esi, esi
		jmp	loc_4B5
; ---------------------------------------------------------------------------

$LN14_0:				; CODE XREF: _asn1_ex_i2c+71j
					; DATA XREF: .text$mn:$LN30o
		mov	eax, [ecx]	; jumptable 00000405 case 0
		cmp	eax, 0FFFFFFFFh
		jz	short loc_439
		cmp	dword ptr [edx+4], 0FFFFFFFCh
		jz	short loc_444
		test	eax, eax
		jz	short loc_43E
		cmp	dword ptr [edx+14h], 0
		jle	short loc_444

loc_439:				; CODE XREF: _asn1_ex_i2c+93j
					; _asn1_ex_i2c+AEj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_43E:				; CODE XREF: _asn1_ex_i2c+9Dj
		cmp	dword ptr [edx+14h], 0
		jz	short loc_439

loc_444:				; CODE XREF: _asn1_ex_i2c+99j
					; _asn1_ex_i2c+A3j
		mov	byte ptr [esp+4+arg_C],	al
		lea	ecx, [esp+4+arg_C]
		mov	esi, 1
		jmp	short loc_4B5
; ---------------------------------------------------------------------------

$LN19_0:				; CODE XREF: _asn1_ex_i2c+71j
					; DATA XREF: .text$mn:$LN30o
		xor	edx, edx	; jumptable 00000405 case 2
		lea	eax, [esp+4+Dst]
		cmp	[esp+4+Dst], edx
		cmovz	eax, edx
		push	eax
		push	dword ptr [ecx]
		call	_i2c_ASN1_BIT_STRING
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN20_0:				; CODE XREF: _asn1_ex_i2c+71j
					; DATA XREF: .text$mn:$LN30o
		xor	edx, edx	; jumptable 00000405 cases 1,9
		lea	eax, [esp+4+Dst]
		cmp	[esp+4+Dst], edx
		cmovz	eax, edx
		push	eax
		push	dword ptr [ecx]
		call	_i2c_ASN1_INTEGER
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _asn1_ex_i2c+6Bj
					; _asn1_ex_i2c+71j
					; DATA XREF: ...
		cmp	dword ptr [edx+14h], 800h ; jumptable 00000405 default case
		mov	esi, [ecx]
		jnz	short loc_4B0
		test	byte ptr [esi+0Ch], 10h
		jz	short loc_4B0
		mov	eax, [esp+4+Dst]
		test	eax, eax
		jz	short loc_4A9
		mov	[esi+8], eax
		mov	dword ptr [esi], 0

loc_4A9:				; CODE XREF: _asn1_ex_i2c+10Aj
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4B0:				; CODE XREF: _asn1_ex_i2c+FCj
					; _asn1_ex_i2c+102j
		mov	ecx, [esi+8]
		mov	esi, [esi]

loc_4B5:				; CODE XREF: _asn1_ex_i2c+80j
					; _asn1_ex_i2c+89j ...
		mov	eax, [esp+4+Dst]
		test	eax, eax
		jz	short loc_4CC
		test	esi, esi
		jz	short loc_4CC
		push	esi		; Size
		push	ecx		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_4CC:				; CODE XREF: _asn1_ex_i2c+127j
					; _asn1_ex_i2c+12Bj
		mov	eax, esi
		pop	esi
		retn
_asn1_ex_i2c	endp

; ---------------------------------------------------------------------------
$LN30		dd offset $LN14_0	; DATA XREF: _asn1_ex_i2c+71r
		dd offset $LN20_0	; jump table for switch	statement
		dd offset $LN19_0
		dd offset $LN21
		dd offset $LN13
		dd offset $LN12_0
		dd offset $LN21
		dd offset $LN21
		dd offset $LN21
		dd offset $LN20_0
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_i2d_ex_primitive proc near	; CODE XREF: _ASN1_item_ex_i2d+94p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		mov	ecx, [esp+8+arg_8]
		push	ebp
		push	esi
		push	ecx		; int
		mov	eax, [ecx+4]
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h+var_4]
		push	eax		; int
		push	0		; Dst
		push	[esp+1Ch+arg_0]	; int
		mov	[esp+20h+var_8], 0
		call	_asn1_ex_i2c
		mov	esi, eax
		add	esp, 10h
		mov	eax, [esp+10h+var_4]
		cmp	eax, 10h
		jz	short loc_547
		cmp	eax, 11h
		jz	short loc_547
		cmp	eax, 0FFFFFFFDh
		jz	short loc_547
		mov	ebp, 1
		jmp	short loc_549
; ---------------------------------------------------------------------------

loc_547:				; CODE XREF: _asn1_i2d_ex_primitive+3Cj
					; _asn1_i2d_ex_primitive+41j ...
		xor	ebp, ebp

loc_549:				; CODE XREF: _asn1_i2d_ex_primitive+4Dj
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_556
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_556:				; CODE XREF: _asn1_i2d_ex_primitive+54j
		cmp	esi, 0FFFFFFFEh
		jnz	short loc_568
		mov	ecx, 2
		xor	esi, esi
		mov	[esp+10h+var_8], ecx
		jmp	short loc_56A
; ---------------------------------------------------------------------------

loc_568:				; CODE XREF: _asn1_i2d_ex_primitive+61j
		xor	ecx, ecx

loc_56A:				; CODE XREF: _asn1_i2d_ex_primitive+6Ej
		push	ebx
		mov	ebx, [esp+14h+arg_C]
		cmp	ebx, 0FFFFFFFFh
		push	edi
		mov	edi, [esp+18h+arg_4]
		cmovz	ebx, eax
		test	edi, edi
		jz	short loc_5BA
		test	ebp, ebp
		jz	short loc_592
		push	[esp+18h+arg_10]
		push	ebx
		push	esi
		push	ecx
		push	edi
		call	_ASN1_put_object
		add	esp, 14h

loc_592:				; CODE XREF: _asn1_i2d_ex_primitive+88j
		push	[esp+18h+arg_8]	; int
		lea	eax, [esp+1Ch+var_4]
		push	eax		; int
		push	dword ptr [edi]	; Dst
		push	[esp+24h+arg_0]	; int
		call	_asn1_ex_i2c
		mov	eax, [esp+28h+var_8]
		add	esp, 10h
		test	eax, eax
		jz	short loc_5D5
		push	edi
		call	_ASN1_put_eoc
		add	esp, 4

loc_5BA:				; CODE XREF: _asn1_i2d_ex_primitive+84j
		mov	eax, [esp+18h+var_8]

loc_5BE:				; CODE XREF: _asn1_i2d_ex_primitive+DFj
		test	ebp, ebp
		jz	short loc_5D9
		push	ebx
		push	esi
		push	eax
		call	_ASN1_object_size
		add	esp, 0Ch
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_5D5:				; CODE XREF: _asn1_i2d_ex_primitive+B7j
		add	[edi], esi
		jmp	short loc_5BE
; ---------------------------------------------------------------------------

loc_5D9:				; CODE XREF: _asn1_i2d_ex_primitive+C8j
		pop	edi
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 8
		retn
_asn1_i2d_ex_primitive endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_item_flags_i2d proc near		; CODE XREF: _ASN1_item_i2d+Ep
					; _ASN1_item_ndef_i2d+11p

arg_0		= byte ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_658
		cmp	dword ptr [esi], 0
		jnz	short loc_658
		push	edi
		push	[esp+8+arg_C]
		lea	eax, [esp+0Ch+arg_0]
		push	0FFFFFFFFh
		push	[esp+10h+arg_8]
		push	0
		push	eax
		call	_ASN1_item_ex_i2d
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jle	short loc_62D
		push	ebx
		push	6Dh ; 'm'
		push	offset ??_C@_0BJ@BDIDBFLG@?4?2crypto?2asn1?2tasn_enc?4c?$AA@ ; ".\\crypto\\asn1\\tasn_enc.c"
		push	edi
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_630
		or	eax, 0FFFFFFFFh
		pop	ebx

loc_62D:				; CODE XREF: _asn1_item_flags_i2d+2Cj
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_630:				; CODE XREF: _asn1_item_flags_i2d+43j
		push	[esp+0Ch+arg_C]
		lea	eax, [esp+10h+arg_4]
		mov	[esp+10h+arg_4], ebx
		push	0FFFFFFFFh
		push	[esp+14h+arg_8]
		push	eax
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		call	_ASN1_item_ex_i2d
		add	esp, 14h
		mov	[esi], ebx
		mov	eax, edi
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_658:				; CODE XREF: _asn1_item_flags_i2d+7j
					; _asn1_item_flags_i2d+Cj
		push	[esp+4+arg_C]
		lea	eax, [esp+8+arg_0]
		push	0FFFFFFFFh
		push	[esp+0Ch+arg_8]
		push	esi
		push	eax
		call	_ASN1_item_ex_i2d
		add	esp, 14h
		pop	esi
		retn
_asn1_item_flags_i2d endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 674h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_set_seq_out proc near		; CODE XREF: _asn1_template_ex_i2d+1F0p

Dst		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 0Ch
		call	__chkstk
		cmp	[esp+0Ch+arg_10], 0
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	[esp+1Ch+Dst], 0
		jz	loc_815
		push	esi
		call	_sk_num
		add	esp, 4
		cmp	eax, 2
		jl	loc_815
		push	1B2h
		push	offset ??_C@_0BJ@BDIDBFLG@?4?2crypto?2asn1?2tasn_enc?4c?$AA@ ; ".\\crypto\\asn1\\tasn_enc.c"
		push	esi
		call	_sk_num
		add	esp, 4
		lea	eax, [eax+eax*2]
		shl	eax, 2
		push	eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_6FA
		push	1B5h
		push	offset ??_C@_0BJ@BDIDBFLG@?4?2crypto?2asn1?2tasn_enc?4c?$AA@ ; ".\\crypto\\asn1\\tasn_enc.c"
		push	[esp+24h+arg_8]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jnz	short loc_704
		push	ebp
		call	_CRYPTO_free
		add	esp, 4

loc_6FA:				; CODE XREF: _asn1_set_seq_out+5Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_704:				; CODE XREF: _asn1_set_seq_out+7Bj
		push	esi
		mov	[esp+20h+Dst], eax
		xor	ebx, ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_760
		lea	edi, [ebp+8]

loc_71A:				; CODE XREF: _asn1_set_seq_out+EAj
		push	ebx
		push	esi
		call	_sk_value
		push	[esp+24h+arg_14]
		mov	[esp+28h+var_8], eax
		mov	eax, [esp+28h+Dst]
		push	0FFFFFFFFh
		push	[esp+2Ch+arg_C]
		mov	[edi-8], eax
		lea	eax, [esp+30h+Dst]
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		call	_ASN1_item_ex_i2d
		mov	[edi-4], eax
		lea	edi, [edi+0Ch]
		mov	eax, [esp+38h+var_8]
		inc	ebx
		mov	[edi-0Ch], eax
		push	esi
		call	_sk_num
		add	esp, 20h
		cmp	ebx, eax
		jl	short loc_71A

loc_760:				; CODE XREF: _asn1_set_seq_out+A1j
		push	offset _der_cmp	; PtFuncCompare
		push	0Ch		; SizeOfElements
		push	esi
		call	_sk_num
		add	esp, 4
		push	eax		; NumOfElements
		push	ebp		; Base
		call	dword ptr ds:__imp__qsort
		mov	eax, [esp+2Ch+arg_4]
		xor	ebx, ebx
		push	esi
		mov	eax, [eax]
		mov	[esp+30h+Dst], eax
		call	_sk_num
		add	esp, 14h
		test	eax, eax
		jle	short loc_7B9
		lea	edi, [ebp+4]

loc_794:				; CODE XREF: _asn1_set_seq_out+143j
		push	dword ptr [edi]	; Size
		push	dword ptr [edi-4] ; Src
		push	[esp+24h+Dst]	; Dst
		call	_memcpy
		mov	eax, [edi]
		lea	edi, [edi+0Ch]
		add	[esp+28h+Dst], eax
		inc	ebx
		push	esi
		call	_sk_num
		add	esp, 10h
		cmp	ebx, eax
		jl	short loc_794

loc_7B9:				; CODE XREF: _asn1_set_seq_out+11Bj
		cmp	[esp+1Ch+arg_10], 2
		mov	ecx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+Dst]
		mov	[ecx], eax
		jnz	short loc_7F6
		push	esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_7F6
		lea	ebx, [ebp+8]

loc_7DC:				; CODE XREF: _asn1_set_seq_out+180j
		push	dword ptr [ebx]
		push	edi
		push	esi
		call	_sk_set
		push	esi
		inc	edi
		lea	ebx, [ebx+0Ch]
		call	_sk_num
		add	esp, 10h
		cmp	edi, eax
		jl	short loc_7DC

loc_7F6:				; CODE XREF: _asn1_set_seq_out+154j
					; _asn1_set_seq_out+163j
		push	ebp
		call	_CRYPTO_free
		push	[esp+20h+var_4]
		call	_CRYPTO_free
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_815:				; CODE XREF: _asn1_set_seq_out+1Fj
					; _asn1_set_seq_out+31j
		push	esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_857
		mov	ebx, [esp+1Ch+arg_14]
		mov	ebp, [esp+1Ch+arg_C]

loc_82C:				; CODE XREF: _asn1_set_seq_out+1E1j
		push	edi
		push	esi
		call	_sk_value
		push	ebx
		push	0FFFFFFFFh
		push	ebp
		push	[esp+30h+arg_4]
		mov	[esp+34h+var_8], eax
		lea	eax, [esp+34h+var_8]
		push	eax
		call	_ASN1_item_ex_i2d
		push	esi
		inc	edi
		call	_sk_num
		add	esp, 20h
		cmp	edi, eax
		jl	short loc_82C

loc_857:				; CODE XREF: _asn1_set_seq_out+1AEj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 0Ch
		retn
_asn1_set_seq_out endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 864h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_template_ex_i2d proc near		; CODE XREF: _ASN1_item_ex_i2d+78p
					; _ASN1_item_ex_i2d+E6p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 28h ; '('
		call	__chkstk
		mov	ecx, [esp+28h+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	ebx, [ecx]
		mov	[esp+34h+var_4], ebx
		push	edi
		test	bl, 18h
		jz	short loc_8A0
		cmp	[esp+38h+arg_C], 0FFFFFFFFh
		jz	short loc_893
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_893:				; CODE XREF: _asn1_template_ex_i2d+22j
		mov	ebp, [ecx+4]
		mov	esi, ebx
		and	esi, 0C0h
		jmp	short loc_8C0
; ---------------------------------------------------------------------------

loc_8A0:				; CODE XREF: _asn1_template_ex_i2d+1Bj
		mov	ebp, [esp+38h+arg_C]
		mov	[esp+38h+var_24], ebp
		cmp	ebp, 0FFFFFFFFh
		jz	short loc_8BB
		mov	edi, [esp+38h+arg_10]
		mov	esi, edi
		and	esi, 0C0h
		jmp	short loc_8C8
; ---------------------------------------------------------------------------

loc_8BB:				; CODE XREF: _asn1_template_ex_i2d+47j
		or	ebp, 0FFFFFFFFh
		xor	esi, esi

loc_8C0:				; CODE XREF: _asn1_template_ex_i2d+3Aj
		mov	edi, [esp+38h+arg_10]
		mov	[esp+38h+var_24], ebp

loc_8C8:				; CODE XREF: _asn1_template_ex_i2d+55j
		and	edi, 0FFFFFF3Fh
		mov	[esp+38h+var_28], esi
		mov	eax, ebx
		mov	[esp+38h+arg_10], edi
		and	eax, edi
		bt	eax, 0Bh
		mov	eax, 0
		setb	al
		inc	eax
		mov	[esp+38h+var_C], eax
		test	bl, 6
		jz	loc_A83
		mov	eax, [esp+38h+arg_0]
		mov	ecx, [eax]
		mov	[esp+38h+var_14], ecx
		test	ecx, ecx
		jnz	short loc_90C

loc_902:				; CODE XREF: _asn1_template_ex_i2d+245j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_90C:				; CODE XREF: _asn1_template_ex_i2d+9Cj
		test	bl, 2
		jz	short loc_926
		mov	edx, 1
		mov	[esp+38h+var_18], edx
		test	bl, 4
		jz	short loc_92C
		mov	edx, 2
		jmp	short loc_928
; ---------------------------------------------------------------------------

loc_926:				; CODE XREF: _asn1_template_ex_i2d+ABj
		xor	edx, edx

loc_928:				; CODE XREF: _asn1_template_ex_i2d+C0j
		mov	[esp+38h+var_18], edx

loc_92C:				; CODE XREF: _asn1_template_ex_i2d+B9j
		cmp	ebp, 0FFFFFFFFh
		jz	short loc_940
		test	bl, 10h
		jnz	short loc_940
		mov	[esp+38h+var_20], ebp
		mov	[esp+38h+var_10], esi
		jmp	short loc_956
; ---------------------------------------------------------------------------

loc_940:				; CODE XREF: _asn1_template_ex_i2d+CBj
					; _asn1_template_ex_i2d+D0j
		xor	eax, eax
		mov	[esp+38h+var_10], 0
		test	edx, edx
		setnz	al
		add	eax, 10h
		mov	[esp+38h+var_20], eax

loc_956:				; CODE XREF: _asn1_template_ex_i2d+DAj
		push	ecx
		mov	[esp+3Ch+var_1C], 0
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_9BD
		mov	ebx, [esp+38h+arg_8]
		xor	esi, esi
		xor	ebp, ebp
		nop

loc_974:				; CODE XREF: _asn1_template_ex_i2d+147j
		push	esi
		push	[esp+3Ch+var_14]
		call	_sk_value
		add	esp, 8
		mov	[esp+38h+var_8], eax
		mov	eax, [ebx+10h]
		push	edi
		push	0FFFFFFFFh
		call	eax
		push	eax
		lea	eax, [esp+44h+var_8]
		push	0
		push	eax
		call	_ASN1_item_ex_i2d
		push	[esp+4Ch+var_14]
		add	ebp, eax
		inc	esi
		call	_sk_num
		add	esp, 18h
		cmp	esi, eax
		jl	short loc_974
		mov	ebx, [esp+38h+var_4]
		mov	esi, [esp+38h+var_28]
		mov	[esp+38h+var_1C], ebp
		mov	ebp, [esp+38h+var_24]

loc_9BD:				; CODE XREF: _asn1_template_ex_i2d+105j
		push	[esp+38h+var_20]
		mov	edi, [esp+3Ch+var_C]
		push	[esp+3Ch+var_1C]
		push	edi
		call	_ASN1_object_size
		add	esp, 0Ch
		mov	edx, eax
		mov	[esp+38h+var_4], edx
		and	ebx, 10h
		jz	short loc_9F4
		push	ebp
		push	edx
		push	edi
		call	_ASN1_object_size
		mov	edx, [esp+44h+var_4]
		mov	ecx, eax
		add	esp, 0Ch
		mov	[esp+38h+var_24], ecx
		jmp	short loc_9FA
; ---------------------------------------------------------------------------

loc_9F4:				; CODE XREF: _asn1_template_ex_i2d+177j
		mov	ecx, edx
		mov	[esp+38h+var_24], edx

loc_9FA:				; CODE XREF: _asn1_template_ex_i2d+18Ej
		mov	eax, [esp+38h+arg_4]
		test	eax, eax
		jnz	short loc_A0C
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_A0C:				; CODE XREF: _asn1_template_ex_i2d+19Cj
		test	ebx, ebx
		jz	short loc_A21
		push	esi
		push	ebp
		push	edx
		push	edi
		push	eax
		call	_ASN1_put_object
		mov	eax, [esp+4Ch+arg_4]
		add	esp, 14h

loc_A21:				; CODE XREF: _asn1_template_ex_i2d+1AAj
		push	[esp+38h+var_10]
		mov	ebp, [esp+3Ch+var_1C]
		push	[esp+3Ch+var_20]
		push	ebp
		push	edi
		push	eax
		call	_ASN1_put_object
		mov	eax, [esp+4Ch+arg_8]
		add	esp, 14h
		push	[esp+38h+arg_10]
		mov	eax, [eax+10h]
		push	[esp+3Ch+var_18]
		call	eax
		mov	esi, [esp+40h+arg_4]
		push	eax
		push	ebp
		push	esi
		push	[esp+4Ch+var_14]
		call	_asn1_set_seq_out
		add	esp, 18h
		cmp	edi, 2
		jnz	short loc_A77
		push	esi
		call	_ASN1_put_eoc
		add	esp, 4
		test	ebx, ebx
		jz	short loc_A77
		push	esi
		call	_ASN1_put_eoc
		add	esp, 4

loc_A77:				; CODE XREF: _asn1_template_ex_i2d+1FBj
					; _asn1_template_ex_i2d+208j
		mov	eax, [esp+38h+var_24]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_A83:				; CODE XREF: _asn1_template_ex_i2d+8Aj
		mov	eax, [ecx+10h]
		test	bl, 10h
		jz	loc_B11
		push	edi
		push	0FFFFFFFFh
		call	eax
		push	eax
		push	0
		push	[esp+48h+arg_0]
		call	_ASN1_item_ex_i2d
		add	esp, 14h
		mov	[esp+38h+var_4], eax
		test	eax, eax
		jz	loc_902
		mov	edi, [esp+38h+var_C]
		push	ebp
		push	eax
		push	edi
		call	_ASN1_object_size
		mov	ebx, [esp+44h+arg_4]
		add	esp, 0Ch
		mov	[esp+38h+var_8], eax
		test	ebx, ebx
		jz	short loc_B05
		push	esi
		push	ebp
		push	[esp+40h+var_4]
		push	edi
		push	ebx
		call	_ASN1_put_object
		mov	eax, [esp+4Ch+arg_8]
		add	esp, 14h
		push	[esp+38h+arg_10]
		mov	eax, [eax+10h]
		push	0FFFFFFFFh
		call	eax
		push	eax
		push	ebx
		push	[esp+48h+arg_0]
		call	_ASN1_item_ex_i2d
		add	esp, 14h
		cmp	edi, 2
		jnz	short loc_B05
		push	ebx
		call	_ASN1_put_eoc
		add	esp, 4

loc_B05:				; CODE XREF: _asn1_template_ex_i2d+264j
					; _asn1_template_ex_i2d+296j
		mov	eax, [esp+38h+var_8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_B11:				; CODE XREF: _asn1_template_ex_i2d+225j
		or	esi, edi
		push	esi
		push	ebp
		call	eax
		push	eax
		push	[esp+44h+arg_4]
		push	[esp+48h+arg_0]
		call	_ASN1_item_ex_i2d
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 28h
		retn
_asn1_template_ex_i2d endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl der_cmp(const void *, const void *)
_der_cmp	proc near		; DATA XREF: _asn1_set_seq_out:loc_760o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		push	ebx
		push	esi
		mov	edx, [eax]
		mov	ebx, [ecx+4]
		mov	esi, ebx
		mov	ecx, [ecx]
		push	edi
		mov	edi, [eax+4]
		cmp	edi, ebx
		cmovl	esi, edi
		sub	esi, 4
		jb	short loc_B62

loc_B51:				; CODE XREF: _der_cmp+30j
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_B67
		add	edx, 4
		add	ecx, 4
		sub	esi, 4
		jnb	short loc_B51

loc_B62:				; CODE XREF: _der_cmp+1Fj
		cmp	esi, 0FFFFFFFCh
		jz	short loc_B9B

loc_B67:				; CODE XREF: _der_cmp+25j
		mov	al, [edx]
		cmp	al, [ecx]
		jnz	short loc_B94
		cmp	esi, 0FFFFFFFDh
		jz	short loc_B9B
		mov	al, [edx+1]
		cmp	al, [ecx+1]
		jnz	short loc_B94
		cmp	esi, 0FFFFFFFEh
		jz	short loc_B9B
		mov	al, [edx+2]
		cmp	al, [ecx+2]
		jnz	short loc_B94
		cmp	esi, 0FFFFFFFFh
		jz	short loc_B9B
		mov	al, [edx+3]
		cmp	al, [ecx+3]
		jz	short loc_B9B

loc_B94:				; CODE XREF: _der_cmp+3Bj _der_cmp+48j ...
		sbb	eax, eax
		or	eax, 1
		jmp	short loc_B9D
; ---------------------------------------------------------------------------

loc_B9B:				; CODE XREF: _der_cmp+35j _der_cmp+40j ...
		xor	eax, eax

loc_B9D:				; CODE XREF: _der_cmp+69j
		test	eax, eax
		jnz	short loc_BA5
		sub	edi, ebx
		mov	eax, edi

loc_BA5:				; CODE XREF: _der_cmp+6Fj
		pop	edi
		pop	esi
		pop	ebx
		retn
_der_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BACh
; COMDAT (pick any)
		public ??_C@_0BJ@BDIDBFLG@?4?2crypto?2asn1?2tasn_enc?4c?$AA@
; `string'
??_C@_0BJ@BDIDBFLG@?4?2crypto?2asn1?2tasn_enc?4c?$AA@ db '.\crypto\asn1\tasn_enc.c',0
					; DATA XREF: _asn1_item_flags_i2d+31o
					; _asn1_set_seq_out+3Co ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void __cdecl _qsort(void *Base, size_t NumOfElements,	size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const	void *))
		extrn __imp__qsort:near	; CODE XREF: _asn1_set_seq_out+FEp
					; DATA XREF: _asn1_set_seq_out+FEr
		extrn _sk_num:near	; CODE XREF: _asn1_set_seq_out+26p
					; _asn1_set_seq_out+42p ...
		extrn _sk_value:near	; CODE XREF: _asn1_set_seq_out+A8p
					; _asn1_set_seq_out+1BAp ...
		extrn _sk_set:near	; CODE XREF: _asn1_set_seq_out+16Cp
		extrn _CRYPTO_malloc:near ; CODE XREF: _asn1_item_flags_i2d+37p
					; _asn1_set_seq_out+51p ...
		extrn _CRYPTO_free:near	; CODE XREF: _asn1_set_seq_out+7Ep
					; _asn1_set_seq_out+183p ...
		extrn _i2c_ASN1_BIT_STRING:near	; CODE XREF: _asn1_ex_i2c+CFp
		extrn _i2c_ASN1_INTEGER:near ; CODE XREF: _asn1_ex_i2c+E9p
		extrn _ASN1_put_object:near ; CODE XREF: _ASN1_item_ex_i2d+285p
					; _asn1_i2d_ex_primitive+92p ...
		extrn _ASN1_put_eoc:near ; CODE	XREF: _ASN1_item_ex_i2d+2FBp
					; _asn1_i2d_ex_primitive+BAp ...
		extrn _ASN1_object_size:near ; CODE XREF: _ASN1_item_ex_i2d+257p
					; _asn1_i2d_ex_primitive+CDp ...
		extrn _asn1_get_choice_selector:near ; CODE XREF: _ASN1_item_ex_i2d+B9p
		extrn _asn1_get_field_ptr:near ; CODE XREF: _ASN1_item_ex_i2d+D5p
					; _ASN1_item_ex_i2d+210p ...
		extrn _asn1_do_adb:near	; CODE XREF: _ASN1_item_ex_i2d+1FCp
					; _ASN1_item_ex_i2d+2A6p
		extrn _asn1_enc_restore:near ; CODE XREF: _ASN1_item_ex_i2d+185p
		extrn __chkstk:near	; CODE XREF: _ASN1_item_ex_i2d+5p
					; _asn1_i2d_ex_primitive+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _asn1_ex_i2c+130p
					; _asn1_set_seq_out+129p


		end
