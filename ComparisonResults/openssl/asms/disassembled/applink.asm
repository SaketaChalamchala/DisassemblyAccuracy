;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	935E7445F3A5F150AABDD833DC3F331B
; Input	CRC32 :	A0B5976D

; File Name   :	C:\compspace\Diff\openssl\obj\applink.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
; `OPENSSL_Applink'::`2'::once
?once@?1??OPENSSL_Applink@@9@9 dd 1	; DATA XREF: _OPENSSL_Applinkr
					; _OPENSSL_Applink+E9w
		align 8
; `OPENSSL_Applink'::`2'::OPENSSL_ApplinkTable
?OPENSSL_ApplinkTable@?1??OPENSSL_Applink@@9@9 dd 16h ;	DATA XREF: _OPENSSL_Applink:loc_157o
dword_C		dd 0			; DATA XREF: _OPENSSL_Applink+8Aw
dword_10	dd 0			; DATA XREF: _OPENSSL_Applink+94w
dword_14	dd 0			; DATA XREF: _OPENSSL_Applink+9Ew
dword_18	dd 0			; DATA XREF: _OPENSSL_Applink+A8w
dword_1C	dd 0			; DATA XREF: _OPENSSL_Applink+12w
dword_20	dd 0			; DATA XREF: _OPENSSL_Applink+1Cw
dword_24	dd 0			; DATA XREF: _OPENSSL_Applink+26w
dword_28	dd 0			; DATA XREF: _OPENSSL_Applink+B2w
dword_2C	dd 0			; DATA XREF: _OPENSSL_Applink+BCw
dword_30	dd 0			; DATA XREF: _OPENSSL_Applink+30w
dword_34	dd 0			; DATA XREF: _OPENSSL_Applink+3Aw
dword_38	dd 0			; DATA XREF: _OPENSSL_Applink+44w
dword_3C	dd 0			; DATA XREF: _OPENSSL_Applink+4Ew
dword_40	dd 0			; DATA XREF: _OPENSSL_Applink+58w
dword_44	dd 0			; DATA XREF: _OPENSSL_Applink+C6w
dword_48	dd 0			; DATA XREF: _OPENSSL_Applink+D0w
dword_4C	dd 0			; DATA XREF: _OPENSSL_Applink+DAw
dword_50	dd 0			; DATA XREF: _OPENSSL_Applink+62w
dword_54	dd 0			; DATA XREF: _OPENSSL_Applink+6Cw
dword_58	dd 0			; DATA XREF: _OPENSSL_Applink+76w
dword_5C	dd 0			; DATA XREF: _OPENSSL_Applink+80w
dword_60	dd 0			; DATA XREF: _OPENSSL_Applink+E4w
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OPENSSL_Applink
_OPENSSL_Applink proc near
		cmp	?once@?1??OPENSSL_Applink@@9@9,	0 ; `OPENSSL_Applink'::`2'::once
		jz	loc_157
		mov	eax, dword ptr ds:__imp__fgets
		mov	dword_1C, eax
		mov	eax, dword ptr ds:__imp__fread
		mov	dword_20, eax
		mov	eax, dword ptr ds:__imp__fwrite
		mov	dword_24, eax
		mov	eax, dword ptr ds:__imp__fclose
		mov	dword_30, eax
		mov	eax, dword ptr ds:__imp__fopen
		mov	dword_34, eax
		mov	eax, dword ptr ds:__imp__fseek
		mov	dword_38, eax
		mov	eax, dword ptr ds:__imp__ftell
		mov	dword_3C, eax
		mov	eax, dword ptr ds:__imp__fflush
		mov	dword_40, eax
		mov	eax, dword ptr ds:__imp___open
		mov	dword_50, eax
		mov	eax, dword ptr ds:__imp___read
		mov	dword_54, eax
		mov	eax, dword ptr ds:__imp___write
		mov	dword_58, eax
		mov	eax, dword ptr ds:__imp___lseek
		mov	dword_5C, eax
		mov	eax, dword ptr ds:__imp___close
		mov	dword_C, offset	_app_stdin
		mov	dword_10, offset _app_stdout
		mov	dword_14, offset _app_stderr
		mov	dword_18, offset _fprintf
		mov	dword_28, offset _app_fsetmod
		mov	dword_2C, offset _app_feof
		mov	dword_44, offset _app_ferror
		mov	dword_48, offset _app_clearerr
		mov	dword_4C, offset _app_fileno
		mov	dword_60, eax
		mov	?once@?1??OPENSSL_Applink@@9@9,	0 ; `OPENSSL_Applink'::`2'::once

loc_157:				; CODE XREF: _OPENSSL_Applink+7j
		mov	eax, offset ?OPENSSL_ApplinkTable@?1??OPENSSL_Applink@@9@9 ; `OPENSSL_Applink'::`2'::OPENSSL_ApplinkTable
		retn
_OPENSSL_Applink endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 160h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; void __cdecl app_clearerr(FILE *File)
_app_clearerr	proc near		; DATA XREF: _OPENSSL_Applink+D0o
		jmp	dword ptr ds:__imp__clearerr
_app_clearerr	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 194h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_feof(FILE *File)
_app_feof	proc near		; DATA XREF: _OPENSSL_Applink+BCo
		jmp	dword ptr ds:__imp__feof
_app_feof	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 19Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_ferror(FILE *File)
_app_ferror	proc near		; DATA XREF: _OPENSSL_Applink+C6o
		jmp	dword ptr ds:__imp__ferror
_app_ferror	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_fileno(FILE *File)
_app_fileno	proc near		; DATA XREF: _OPENSSL_Applink+DAo
		jmp	dword ptr ds:__imp___fileno
_app_fileno	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_fsetmod(FILE *File, char)
_app_fsetmod	proc near		; DATA XREF: _OPENSSL_Applink+B2o

File		= dword	ptr  4
arg_4		= byte ptr  8

		cmp	[esp+arg_4], 62h ; 'b'
		mov	ecx, 8000h
		mov	eax, 4000h
		cmovz	eax, ecx
		push	eax
		push	[esp+4+File]	; File
		call	dword ptr ds:__imp___fileno
		add	esp, 4
		push	eax
		call	dword ptr ds:__imp___setmode
		add	esp, 8
		retn
_app_fsetmod	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_app_stderr	proc near		; DATA XREF: _OPENSSL_Applink+9Eo
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		retn
_app_stderr	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_app_stdin	proc near		; DATA XREF: _OPENSSL_Applink+8Ao
		push	0
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		retn
_app_stdin	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_app_stdout	proc near		; DATA XREF: _OPENSSL_Applink+94o
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		retn
_app_stdout	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; DATA XREF: _OPENSSL_Applink+A8o

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _app_stderr+2p
					; _app_stdin+2p ...
; void __cdecl _clearerr(FILE *File)
		extrn __imp__clearerr:near ; DATA XREF:	_app_clearerrr
; int __cdecl _fclose(FILE *File)
		extrn __imp__fclose:near ; DATA	XREF: _OPENSSL_Applink+2Br
; int __cdecl _feof(FILE *File)
		extrn __imp__feof:near	; DATA XREF: _app_feofr
; int __cdecl _ferror(FILE *File)
		extrn __imp__ferror:near ; DATA	XREF: _app_ferrorr
; int __cdecl _fflush(FILE *File)
		extrn __imp__fflush:near ; DATA	XREF: _OPENSSL_Applink+53r
; char *__cdecl	_fgets(char *Buf, int MaxCount,	FILE *File)
		extrn __imp__fgets:near	; DATA XREF: _OPENSSL_Applink+Dr
; int __cdecl __fileno(FILE *File)
		extrn __imp___fileno:near ; CODE XREF: _app_fsetmod+17p
					; DATA XREF: _app_filenor ...
; FILE *__cdecl	_fopen(const char *Filename, const char	*Mode)
		extrn __imp__fopen:near	; DATA XREF: _OPENSSL_Applink+35r
; size_t __cdecl _fread(void *DstBuf, size_t ElementSize, size_t Count,	FILE *File)
		extrn __imp__fread:near	; DATA XREF: _OPENSSL_Applink+17r
; int __cdecl _fseek(FILE *File, __int32 Offset, int Origin)
		extrn __imp__fseek:near	; DATA XREF: _OPENSSL_Applink+3Fr
; __int32 __cdecl _ftell(FILE *File)
		extrn __imp__ftell:near	; DATA XREF: _OPENSSL_Applink+49r
; size_t __cdecl _fwrite(const void *Str, size_t Size, size_t Count, FILE *File)
		extrn __imp__fwrite:near ; DATA	XREF: _OPENSSL_Applink+21r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
		extrn __imp___close:near ; DATA	XREF: _OPENSSL_Applink+85r
		extrn __imp___lseek:near ; DATA	XREF: _OPENSSL_Applink+7Br
		extrn __imp___read:near	; DATA XREF: _OPENSSL_Applink+67r
		extrn __imp___setmode:near ; CODE XREF:	_app_fsetmod+21p
					; DATA XREF: _app_fsetmod+21r
		extrn __imp___write:near ; DATA	XREF: _OPENSSL_Applink+71r
		extrn __imp___open:near	; DATA XREF: _OPENSSL_Applink+5Dr
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso


		end
