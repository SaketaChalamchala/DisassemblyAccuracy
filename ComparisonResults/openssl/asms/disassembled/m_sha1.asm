;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	746957C5E8173F776EC99439097C1157
; Input	CRC32 :	6875C8DD

; File Name   :	C:\compspace\Diff\openssl\obj\m_sha1.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_init		proc near		; DATA XREF: .rdata:0000004Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA1_Init
		add	esp, 4
		retn
_init		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_update		proc near		; DATA XREF: .rdata:00000050o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+0Ch]

loc_1F:					; DATA XREF: .rdata:000000E4o
		call	_SHA1_Update
		add	esp, 0Ch
		retn
_update		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_final		proc near		; DATA XREF: .rdata:00000054o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]

loc_2F:					; DATA XREF: .rdata:00000134o
		push	[esp+4+arg_4]
		call	_SHA1_Final
		add	esp, 8
		retn
_final		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
_sha1_md	dd offset off_40	; DATA XREF: _EVP_sha1o
off_40		dd offset off_40+1	; DATA XREF: .rdata:_sha1_mdo
					; .rdata:0000007Co ...
		dd 14h,	0Ch
		dd offset _init
		dd offset _update
		dd offset _final
		align 10h
		dd offset _RSA_sign
off_64		dd offset _RSA_verify	; DATA XREF: .rdata:off_80o
dword_68	dd 6, 13h, 3 dup(0)	; DATA XREF: .rdata:000000D0o
					; .rdata:00000120o
		dd offset off_40
off_80		dd offset off_64	; DATA XREF: .rdata:0000016Co
					; .rdata:000001BCo
		dd 2 dup(0)
_sha224_md	dd offset _SHA1_Final+3	; DATA XREF: _EVP_sha224o
		dd offset _SHA1_Update+3
		dd 1Ch,	0Ch
		dd offset _init224
		dd offset _update256
		dd offset _final256
		align 10h
		dd offset _RSA_sign
		dd offset _RSA_verify
		dd 6, 13h, 3 dup(0)
		dd offset off_40
		dd offset dword_68+0Ch
		dd 2 dup(0)
_sha256_md	dd offset _SHA1_Final	; DATA XREF: .rdata:00000170o
					; .rdata:000001C0o ...
		dd offset _SHA1_Update
		dd offset loc_1F+1
		dd 0Ch
		dd offset _init256
		dd offset _update256
		dd offset _final256
		align 10h
		dd offset _RSA_sign
		dd offset _RSA_verify
		dd 6, 13h, 3 dup(0)
		dd offset off_40
		dd offset dword_68+0Ch
		dd 2 dup(0)
_sha384_md	dd offset _SHA1_Final+1	; DATA XREF: _EVP_sha384o
		dd offset _SHA1_Update+1
		dd offset loc_2F+1
		dd 0Ch
		dd offset _init384
		dd offset _update512
		dd offset _final512
		align 10h
		dd offset _RSA_sign
		dd offset _RSA_verify
		dd 6, 13h, 3 dup(0)
		dd offset off_80
		dd offset _sha256_md
		dd 2 dup(0)
_sha512_md	dd offset _SHA1_Final+2	; DATA XREF: _EVP_sha512o
		dd offset _SHA1_Update+2
		dd offset off_40
		dd 0Ch
		dd offset _init512
		dd offset _update512
		dd offset _final512
		align 10h
		dd offset _RSA_sign
		dd offset _RSA_verify
		dd 6, 13h, 3 dup(0)
		dd offset off_80
		dd offset _sha256_md
		align 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_init224	proc near		; DATA XREF: .rdata:0000009Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA224_Init
		add	esp, 4
		retn
_init224	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_init256	proc near		; DATA XREF: .rdata:000000ECo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA256_Init
		add	esp, 4
		retn
_init256	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_update256	proc near		; DATA XREF: .rdata:000000A0o
					; .rdata:000000F0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+0Ch]
		call	_SHA256_Update
		add	esp, 0Ch
		retn
_update256	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 200h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_final256	proc near		; DATA XREF: .rdata:000000A4o
					; .rdata:000000F4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		push	[esp+4+arg_4]
		call	_SHA256_Final
		add	esp, 8
		retn
_final256	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 214h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_init384	proc near		; DATA XREF: .rdata:0000013Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA384_Init
		add	esp, 4
		retn
_init384	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 224h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_init512	proc near		; DATA XREF: .rdata:0000018Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA512_Init
		add	esp, 4
		retn
_init512	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 234h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_update512	proc near		; DATA XREF: .rdata:00000140o
					; .rdata:00000190o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+0Ch]
		call	_SHA512_Update
		add	esp, 0Ch
		retn
_update512	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_final512	proc near		; DATA XREF: .rdata:00000144o
					; .rdata:00000194o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		push	[esp+4+arg_4]
		call	_SHA512_Final
		add	esp, 8
		retn
_final512	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 260h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_sha1
_EVP_sha1	proc near
		mov	eax, offset _sha1_md
		retn
_EVP_sha1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_sha224
_EVP_sha224	proc near
		mov	eax, offset _sha224_md
		retn
_EVP_sha224	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 270h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_sha256
_EVP_sha256	proc near
		mov	eax, offset _sha256_md
		retn
_EVP_sha256	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 278h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_sha384
_EVP_sha384	proc near
		mov	eax, offset _sha384_md
		retn
_EVP_sha384	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 280h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_sha512
_EVP_sha512	proc near
		mov	eax, offset _sha512_md
		retn
_EVP_sha512	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _RSA_sign:near	; DATA XREF: .rdata:00000060o
					; .rdata:000000B0o ...
		extrn _RSA_verify:near	; DATA XREF: .rdata:off_64o
					; .rdata:000000B4o ...
		extrn _SHA1_Init:near	; CODE XREF: _init+7p
		extrn _SHA1_Update:near	; CODE XREF: _update:loc_1Fp
					; DATA XREF: .rdata:000000E0o ...
		extrn _SHA1_Final:near	; CODE XREF: _final+Bp
					; DATA XREF: .rdata:_sha256_mdo ...
		extrn _SHA224_Init:near	; CODE XREF: _init224+7p
		extrn _SHA256_Init:near	; CODE XREF: _init256+7p
		extrn _SHA256_Update:near ; CODE XREF: _update256+Fp
		extrn _SHA256_Final:near ; CODE	XREF: _final256+Bp
		extrn _SHA384_Init:near	; CODE XREF: _init384+7p
		extrn _SHA512_Init:near	; CODE XREF: _init512+7p
		extrn _SHA512_Update:near ; CODE XREF: _update512+Fp
		extrn _SHA512_Final:near ; CODE	XREF: _final512+Bp


		end
