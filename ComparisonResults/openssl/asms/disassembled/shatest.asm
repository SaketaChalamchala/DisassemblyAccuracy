;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	60C38865321CF567084B0FAA9120A45E
; Input	CRC32 :	5D1018F6

; File Name   :	C:\compspace\Diff\openssl\obj\shatest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_test		dd offset ??_C@_03FIKCJHKP@abc?$AA@ ; DATA XREF: _main+2Fr
					; _main:loc_1B0r ...
					; `string'
		dd offset ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; "abcdbcdecdefdefgefghfghighijhijkijkljkl"...
		dd 0
_ret		dd offset ??_C@_0CJ@HDNKOBPJ@0164b8a914cd2a5e74c4f7ff082c4d97@
					; DATA XREF: _main+A2r	_main+E9r
					; "0164b8a914cd2a5e74c4f7ff082c4d97f1edf88"...
		dd offset ??_C@_0CJ@KCOJABDM@d2516ee1acfa5baf33dfc1c471e43844@ ; "d2516ee1acfa5baf33dfc1c471e438449ef134c"...
_bigret		dd offset ??_C@_0CJ@OINEDNM@3232affa48628a26653b5aaa44541fd9@
					; DATA XREF: _main+1C2r
_data		ends			; "3232affa48628a26653b5aaa44541fd90d69060"...

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
; COMDAT (pick any)
		public ??_C@_03FIKCJHKP@abc?$AA@
; `string'
??_C@_03FIKCJHKP@abc?$AA@ dd 636261h	; DATA XREF: .data:_testo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
; COMDAT (pick any)
		public ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
; `string'
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ db	'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq',0
					; DATA XREF: .data:00000004o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
; COMDAT (pick any)
		public ??_C@_0CJ@HDNKOBPJ@0164b8a914cd2a5e74c4f7ff082c4d97@
; `string'
??_C@_0CJ@HDNKOBPJ@0164b8a914cd2a5e74c4f7ff082c4d97@ db	'0164b8a914cd2a5e74c4f7ff082c4d97f1edf880',0
					; DATA XREF: .data:_reto
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
; COMDAT (pick any)
		public ??_C@_0CJ@KCOJABDM@d2516ee1acfa5baf33dfc1c471e43844@
; `string'
??_C@_0CJ@KCOJABDM@d2516ee1acfa5baf33dfc1c471e43844@ db	'd2516ee1acfa5baf33dfc1c471e438449ef134c8',0
					; DATA XREF: .data:00000010o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
; COMDAT (pick any)
		public ??_C@_0CJ@OINEDNM@3232affa48628a26653b5aaa44541fd9@
; `string'
??_C@_0CJ@OINEDNM@3232affa48628a26653b5aaa44541fd9@ db '3232affa48628a26653b5aaa44541fd90d690603',0
					; DATA XREF: .data:_bigreto
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; __vsnprintf_l+14p ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 108h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsnprintf_l(char	*DstBuf, size_t	MaxCount, const	char *Format, _locale_t	Locale,	va_list	ArgList)
		public __vsnprintf_l
__vsnprintf_l	proc near

DstBuf		= dword	ptr  4
MaxCount	= dword	ptr  8
Format		= dword	ptr  0Ch
Locale		= dword	ptr  10h
ArgList		= dword	ptr  14h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+MaxCount]
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsnprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsprintf_l(char *DstBuf,	const char *Format, _locale_t, va_list ArgList)
		public __vsprintf_l
__vsprintf_l	proc near

DstBuf		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+arg_8]
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsprintf_l	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 170h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 34h ; '4'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		lea	eax, [esp+40h+var_30]
		xor	ebx, ebx
		push	edi
		push	eax
		mov	[esp+48h+var_34], ebx
		call	_EVP_MD_CTX_init
		add	esp, 4
		lea	ebp, [ebx+1]
		cmp	_test, ebx
		jz	loc_29A
		nop	dword ptr [eax+eax+00h]

loc_1B0:				; CODE XREF: _main+120j
		mov	esi, _test[ebx]
		lea	ecx, [esi+1]
		nop	dword ptr [eax+00000000h]

loc_1C0:				; CODE XREF: _main+55j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_1C0
		push	0
		sub	esi, ecx
		call	_EVP_sha
		push	eax
		push	0
		lea	eax, [esp+50h+var_18]
		push	eax
		push	esi
		push	_test[ebx]
		call	_EVP_Digest
		add	esp, 18h
		mov	esi, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		xor	edi, edi
		xchg	ax, ax

loc_1F0:				; CODE XREF: _main+A0j
		movzx	eax, [esp+edi+44h+var_18]
		push	eax
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	esi		; Dest
		call	_sprintf
		add	esi, 2
		lea	edi, [edi+1]
		add	esp, 0Ch
		cmp	esi, offset dword_864
		jl	short loc_1F0
		mov	ecx, _ret[ebx]
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		nop	dword ptr [eax]

loc_220:				; CODE XREF: _main+CAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_240
		test	dl, dl
		jz	short loc_23C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_240
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_220

loc_23C:				; CODE XREF: _main+B8j
		xor	eax, eax
		jmp	short loc_245
; ---------------------------------------------------------------------------

loc_240:				; CODE XREF: _main+B4j	_main+C0j
		sbb	eax, eax
		or	eax, 1

loc_245:				; CODE XREF: _main+CEj
		test	eax, eax
		jz	short loc_277
		push	_test[ebx]
		push	offset ??_C@_0BP@CHGLNIBJ@error?5calculating?5SHA?5on?5?8?$CFs?8?6?$AA@	; "error calculating SHA on '%s'\n"
		call	_printf
		push	_ret[ebx]
		push	offset ?buf@?1??pt@@9@9	; `pt'::`2'::buf
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 14h
		inc	[esp+44h+var_34]
		jmp	short loc_285
; ---------------------------------------------------------------------------

loc_277:				; CODE XREF: _main+D7j
		push	ebp
		push	offset ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@	; "test	%d ok\n"
		call	_printf
		add	esp, 8

loc_285:				; CODE XREF: _main+105j
		add	ebx, 4
		inc	ebp
		cmp	_test[ebx], 0
		jnz	loc_1B0
		mov	ebx, [esp+44h+var_34]

loc_29A:				; CODE XREF: _main+35j
		push	3E8h		; Size
		push	61h ; 'a'       ; Val
		push	offset ?buf@?1??main@@9@9 ; Dst
		call	_memset
		add	esp, 0Ch
		push	0
		call	_EVP_sha
		push	eax
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		mov	esi, 3E8h
		nop	dword ptr [eax+eax+00000000h]

loc_2D0:				; CODE XREF: _main+17Aj
		push	3E8h
		lea	eax, [esp+48h+var_30]
		push	offset ?buf@?1??main@@9@9 ; `main'::`2'::buf
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		sub	esi, 1
		jnz	short loc_2D0
		push	esi
		lea	eax, [esp+48h+var_18]
		push	eax
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		mov	esi, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		xor	edi, edi
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_310:				; CODE XREF: _main+1C0j
		movzx	eax, [esp+edi+44h+var_18]
		push	eax
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	esi		; Dest
		call	_sprintf
		add	esi, 2
		lea	edi, [edi+1]
		add	esp, 0Ch
		cmp	esi, offset dword_864
		jl	short loc_310
		mov	esi, _bigret
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		mov	ecx, esi
		nop

loc_340:				; CODE XREF: _main+1EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_360
		test	dl, dl
		jz	short loc_35C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_360
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_340

loc_35C:				; CODE XREF: _main+1D8j
		xor	eax, eax
		jmp	short loc_365
; ---------------------------------------------------------------------------

loc_360:				; CODE XREF: _main+1D4j _main+1E0j
		sbb	eax, eax
		or	eax, 1

loc_365:				; CODE XREF: _main+1EEj
		test	eax, eax
		jz	short loc_38E
		push	offset ?buf@?1??pt@@9@9	; `pt'::`2'::buf
		push	offset ??_C@_0BP@CHGLNIBJ@error?5calculating?5SHA?5on?5?8?$CFs?8?6?$AA@	; "error calculating SHA on '%s'\n"
		call	_printf
		push	esi
		push	offset ?buf@?1??pt@@9@9	; `pt'::`2'::buf
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 14h
		inc	ebx
		jmp	short loc_39B
; ---------------------------------------------------------------------------

loc_38E:				; CODE XREF: _main+1F7j
		push	offset ??_C@_0L@FNMDIIKJ@test?53?5ok?6?$AA@ ; "test 3 ok\n"
		call	_printf
		add	esp, 4

loc_39B:				; CODE XREF: _main+21Cj
		lea	eax, [esp+44h+var_30]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		push	ebx		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		db 5Fh
		db 5Eh,	5Dh, 5Bh
$LN48:					; $LN47
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+E4p	_main+F9p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pt		proc near

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		xchg	ax, ax

loc_3F4:				; CODE XREF: _pt+2Fj
		movzx	eax, byte ptr [edi+ebx]
		push	eax
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	esi		; Dest
		call	_sprintf
		add	esi, 2
		lea	edi, [edi+1]
		add	esp, 0Ch
		cmp	esi, offset dword_864
		jl	short loc_3F4
		pop	edi
		pop	esi
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		pop	ebx
		retn
_pt		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sprintf(char *Dest, const	char *Format, ...)
		public _sprintf
_sprintf	proc near		; CODE XREF: _main+8Cp	_main+1ACp ...

Dest		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Dest]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
_sprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 454h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; `main'::`2'::buf
?buf@?1??main@@9@9 dd 0FAh dup(?)	; DATA XREF: _main+131o _main+169o
; char `pt'::`2'::buf[40]
?buf@?1??pt@@9@9 db 28h	dup(?)		; DATA XREF: _main+77o	_main+A8o ...
dword_864	dd 0Ah dup(?)		; DATA XREF: _main+9Ao	_main+1BAo ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88Ch
; COMDAT (pick any)
		public ??_C@_0BP@CHGLNIBJ@error?5calculating?5SHA?5on?5?8?$CFs?8?6?$AA@
; char `string'[]
??_C@_0BP@CHGLNIBJ@error?5calculating?5SHA?5on?5?8?$CFs?8?6?$AA@ db 'error calculating SHA on ',27h,'%s',27h,0Ah,0
					; DATA XREF: _main+DFo	_main+1FEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8ACh
; COMDAT (pick any)
		public ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@
; char `string'[]
??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@ db 'got %s instead of %s',0Ah,0
					; DATA XREF: _main+F4o	_main+20Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8C4h
; COMDAT (pick any)
		public ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@
; char `string'[]
??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@ db 'test %d ok',0Ah,0 ; DATA XREF: _main+108o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8D0h
; COMDAT (pick any)
		public ??_C@_0L@FNMDIIKJ@test?53?5ok?6?$AA@
; char `string'[]
??_C@_0L@FNMDIIKJ@test?53?5ok?6?$AA@ db	'test 3 ok',0Ah,0 ; DATA XREF: _main:loc_38Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8DCh
; COMDAT (pick any)
		public ??_C@_04NOJCDH@?$CF02x?$AA@
; char `string'[]
??_C@_04NOJCDH@?$CF02x?$AA@ db '%02x',0 ; DATA XREF: _main+86o _main+1A6o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _printf+7p
					; DATA XREF: _printf+7r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
		extrn __imp____stdio_common_vsprintf:near ; CODE XREF: __vsnprintf_l+22p
					; __vsprintf_l+20p ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+239p
					; DATA XREF: _main+239r
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _main+24p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _main+230p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _main+14Bp
		extrn _EVP_DigestUpdate:near ; CODE XREF: _main+16Fp
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _main+187p
		extrn _EVP_Digest:near	; CODE XREF: _main+6Fp
		extrn _EVP_sha:near	; CODE XREF: _main+5Bp	_main+140p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _main+136p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
