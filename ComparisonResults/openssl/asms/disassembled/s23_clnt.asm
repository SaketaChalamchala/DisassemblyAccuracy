;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	48AC95C8D25A4B52DF8605679DE04C5C
; Input	CRC32 :	2EE9D397

; File Name   :	C:\compspace\Diff\openssl\obj\s23_clnt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl23_connect
_ssl23_connect	proc near		; DATA XREF: .rdata:000002ACo

var_20		= qword	ptr -20h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		xor	eax, eax
		push	edi
		push	eax		; Time
		mov	[esp+1Ch+var_8], eax
		call	dword ptr ds:__imp___time64
		add	esp, 4
		mov	[esp+18h+var_4], eax
		mov	eax, 8
		call	__chkstk
		xorps	xmm0, xmm0
		lea	eax, [esp+20h+var_4]
		movsd	[esp+20h+var_20], xmm0
		push	4
		push	eax
		call	_RAND_add
		add	esp, 10h
		call	_ERR_clear_error
		push	0		; dwErrCode
		call	dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
		mov	esi, [esp+18h+arg_0]
		mov	ebp, [esi+0D0h]
		test	ebp, ebp
		jnz	short loc_6F
		mov	eax, [esi+0E4h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		cmovnz	ebp, eax

loc_6F:					; CODE XREF: _ssl23_connect+5Cj
		inc	dword ptr [esi+1Ch]
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_92
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 4000h
		jz	short loc_A0

loc_92:					; CODE XREF: _ssl23_connect+80j
		push	esi
		call	_SSL_clear
		add	esp, 4
		nop	dword ptr [eax+eax+00h]

loc_A0:					; CODE XREF: _ssl23_connect+90j
					; _ssl23_connect+1CBj ...
		mov	edi, [esi+34h]
		cmp	edi, 1221h
		jg	short loc_107
		cmp	edi, 1220h
		jge	loc_1F4
		cmp	edi, 1003h
		jg	short loc_C9
		jz	short loc_11B
		cmp	edi, 1000h
		jmp	short loc_115
; ---------------------------------------------------------------------------

loc_C9:					; CODE XREF: _ssl23_connect+BDj
		cmp	edi, 1210h
		jl	loc_207
		cmp	edi, 1211h
		jg	loc_207
		push	esi
		mov	dword ptr [esi+30h], 0
		call	_ssl23_client_hello
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jle	$end$53
		mov	dword ptr [esi+34h], 1220h
		jmp	loc_1A8
; ---------------------------------------------------------------------------

loc_107:				; CODE XREF: _ssl23_connect+A9j
		cmp	edi, 4000h
		jz	short loc_11B
		cmp	edi, 5000h

loc_115:				; CODE XREF: _ssl23_connect+C7j
		jnz	loc_207

loc_11B:				; CODE XREF: _ssl23_connect+BFj
					; _ssl23_connect+10Dj
		cmp	dword ptr [esi+0C0h], 0
		jnz	loc_218
		mov	dword ptr [esi+24h], 0
		test	ebp, ebp
		jz	short loc_13D
		push	1
		push	10h
		push	esi
		call	ebp
		add	esp, 0Ch

loc_13D:				; CODE XREF: _ssl23_connect+131j
		cmp	dword ptr [esi+3Ch], 0
		mov	dword ptr [esi+4], 1000h
		jnz	short loc_17E
		call	_BUF_MEM_new
		mov	ebx, eax
		mov	[esp+18h+var_8], ebx
		test	ebx, ebx
		jz	loc_233
		push	4000h
		push	ebx
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_233
		mov	[esi+3Ch], ebx
		mov	[esp+18h+var_8], 0

loc_17E:				; CODE XREF: _ssl23_connect+148j
		push	esi
		call	_ssl3_setup_buffers
		add	esp, 4
		test	eax, eax
		jz	loc_233
		push	esi
		call	_ssl3_init_finished_mac
		mov	eax, [esi+0E4h]
		add	esp, 4
		mov	dword ptr [esi+34h], 1210h
		inc	dword ptr [eax+34h]

loc_1A8:				; CODE XREF: _ssl23_connect+102j
		cmp	dword ptr [esi+0E8h], 0
		mov	dword ptr [esi+44h], 0
		jz	short loc_1C9
		push	0
		push	0
		push	0Bh
		push	dword ptr [esi+10h]
		call	_BIO_ctrl
		add	esp, 10h

loc_1C9:				; CODE XREF: _ssl23_connect+1B6j
		test	ebp, ebp
		jz	loc_A0
		mov	ebx, [esi+34h]
		cmp	ebx, edi
		jz	loc_A0
		push	1
		push	1001h
		push	esi
		mov	[esi+34h], edi
		call	ebp
		add	esp, 0Ch
		mov	[esi+34h], ebx
		jmp	loc_A0
; ---------------------------------------------------------------------------

loc_1F4:				; CODE XREF: _ssl23_connect+B1j
		push	esi
		call	_ssl23_get_server_hello
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	short $end$53
		xor	ebp, ebp
		jmp	short $end$53
; ---------------------------------------------------------------------------

loc_207:				; CODE XREF: _ssl23_connect+CFj
					; _ssl23_connect+DBj ...
		push	0EBh ; 'ë'
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	0FFh
		jmp	short loc_227
; ---------------------------------------------------------------------------

loc_218:				; CODE XREF: _ssl23_connect+122j
		push	0B2h ; '²'
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	0DDh ; 'Ý'

loc_227:				; CODE XREF: _ssl23_connect+216j
		push	75h ; 'u'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_233:				; CODE XREF: _ssl23_connect+157j
					; _ssl23_connect+16Dj ...
		or	ebx, 0FFFFFFFFh

$end$53:				; CODE XREF: _ssl23_connect+F5j
					; _ssl23_connect+201j ...
		dec	dword ptr [esi+1Ch]
		mov	eax, [esp+18h+var_8]
		test	eax, eax
		jz	short loc_24A
		push	eax
		call	_BUF_MEM_free
		add	esp, 4

loc_24A:				; CODE XREF: _ssl23_connect+23Fj
		test	ebp, ebp
		jz	short loc_25A
		push	ebx
		push	1002h
		push	esi
		call	ebp
		add	esp, 0Ch

loc_25A:				; CODE XREF: _ssl23_connect+24Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 8
		retn
_ssl23_connect	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 264h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl23_get_client_method proc near	; DATA XREF: .rdata:000002F4o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 300h
		jz	_SSLv3_client_method
		cmp	eax, 301h
		jz	_TLSv1_client_method
		cmp	eax, 302h
		jz	_TLSv1_1_client_method
		cmp	eax, 303h
		jz	_TLSv1_2_client_method
		xor	eax, eax
		retn
_ssl23_get_client_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 298h
; `SSLv23_client_method'::`2'::SSLv23_client_method_data
?SSLv23_client_method_data@?1??SSLv23_client_method@@9@9 dd offset off_300+3
					; DATA XREF: _SSLv23_client_methodo
		dd offset _tls1_new
		dd offset _tls1_clear
		dd offset _tls1_free
		dd offset _ssl_undefined_function
		dd offset _ssl23_connect
		dd offset _ssl23_read
		dd offset _ssl23_peek
		dd offset _ssl23_write
		dd offset _ssl_undefined_function
		dd offset _ssl_undefined_function
		dd offset _ssl_ok
		dd offset _ssl3_get_message
		dd offset _ssl3_read_bytes
		dd offset _ssl3_write_bytes
		dd offset _ssl3_dispatch_alert
		dd offset _ssl3_ctrl
		dd offset _ssl3_ctx_ctrl
		dd offset _ssl23_get_cipher_by_char
		dd offset _ssl23_put_cipher_by_char
		dd offset _ssl_undefined_const_function
		dd offset _ssl23_num_ciphers
		dd offset _ssl23_get_cipher
		dd offset _ssl23_get_client_method
		dd offset _ssl23_default_timeout
		dd offset _TLSv1_2_enc_data
off_300		dd offset _ssl_undefined_void_function
					; DATA XREF: .rdata:`SSLv23_client_method'::`2'::SSLv23_client_method_datao
		dd offset _ssl3_callback_ctrl
		dd offset _ssl3_ctx_callback_ctrl
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSLv23_client_method
_SSLv23_client_method proc near
		mov	eax, offset ?SSLv23_client_method_data@?1??SSLv23_client_method@@9@9 ; `SSLv23_client_method'::`2'::SSLv23_client_method_data
		retn
_SSLv23_client_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 314h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl23_client_hello proc near		; CODE XREF: _ssl23_connect+E9p

var_1C		= dword	ptr -1Ch
Dst		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Size		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 1Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+28h+arg_0]
		push	edi
		mov	[esp+2Ch+var_8], 0
		mov	ebx, [esi+100h]
		mov	edi, ebx
		shr	edi, 18h
		not	edi
		and	edi, 1
		mov	[esp+2Ch+var_10], edi
		jz	short loc_358
		push	esi
		call	_ssl23_no_ssl2_ciphers
		xor	ecx, ecx
		add	esp, 4
		test	eax, eax
		cmovnz	edi, ecx
		mov	[esp+2Ch+var_10], edi

loc_358:				; CODE XREF: _ssl23_client_hello+2Ej
		mov	ebp, 303h
		mov	[esp+2Ch+var_14], ebp
		test	ebx, 8000000h
		jz	short loc_381
		mov	eax, ebx
		mov	ecx, 302h
		and	eax, 16000000h
		cmp	eax, 16000000h
		cmovnz	ebp, ecx
		mov	[esp+2Ch+var_14], ebp

loc_381:				; CODE XREF: _ssl23_client_hello+53j
		test	ebx, 10000000h
		jz	short loc_3A1
		mov	eax, ebx
		mov	ecx, 301h
		and	eax, 6000000h
		cmp	eax, 6000000h
		cmovnz	ebp, ecx
		mov	[esp+2Ch+var_14], ebp

loc_3A1:				; CODE XREF: _ssl23_client_hello+73j
		test	ebx, 4000000h
		jz	short loc_3BC
		test	ebx, 2000000h
		jnz	short loc_3BC
		mov	ebp, 300h
		mov	[esp+2Ch+var_14], ebp
		jmp	short loc_3C1
; ---------------------------------------------------------------------------

loc_3BC:				; CODE XREF: _ssl23_client_hello+93j
					; _ssl23_client_hello+9Bj
		cmp	ebp, 2
		jz	short loc_3EB

loc_3C1:				; CODE XREF: _ssl23_client_hello+A6j
		xor	eax, eax
		cmp	[esi+120h], eax
		cmovnz	edi, eax
		cmp	dword ptr [esi+128h], 0FFFFFFFFh
		cmovnz	edi, eax
		mov	eax, [esi+98h]
		xor	ecx, ecx
		cmp	[eax+160h], ecx
		cmovnz	edi, ecx
		mov	[esp+2Ch+var_10], edi

loc_3EB:				; CODE XREF: _ssl23_client_hello+ABj
		cmp	dword ptr [esi+34h], 1210h
		mov	eax, [esi+3Ch]
		mov	ebx, [eax+4]
		mov	[esp+2Ch+arg_0], ebx
		jnz	loc_81A
		push	0
		push	esi
		call	_ssl_get_new_session
		add	esp, 8
		test	eax, eax
		jz	loc_4AE
		mov	eax, [esi+58h]
		add	eax, 0C0h ; 'À'
		test	byte ptr [esi+104h], 20h
		mov	[esp+2Ch+Size],	eax
		jz	short loc_464
		push	0		; Time
		call	dword ptr ds:__imp___time64
		mov	edx, [esp+30h+Size]
		mov	ebx, eax
		mov	ecx, ebx
		shr	eax, 8
		shr	ecx, 18h
		push	1Ch
		mov	[edx], cl
		mov	ecx, ebx
		shr	ecx, 10h
		mov	[edx+1], cl
		mov	[edx+2], al
		lea	eax, [edx+4]
		push	eax
		mov	[edx+3], bl
		call	_RAND_pseudo_bytes
		mov	ebx, [esp+38h+arg_0]
		add	esp, 0Ch
		jmp	short loc_46F
; ---------------------------------------------------------------------------

loc_464:				; CODE XREF: _ssl23_client_hello+114j
		push	20h ; ' '
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8

loc_46F:				; CODE XREF: _ssl23_client_hello+14Ej
		test	eax, eax
		jle	short loc_4AE
		cmp	ebp, 303h
		jnz	short loc_484
		mov	ecx, 3
		mov	eax, ecx
		jmp	short loc_4FB
; ---------------------------------------------------------------------------

loc_484:				; CODE XREF: _ssl23_client_hello+165j
		mov	eax, [esi+98h]
		test	dword ptr [eax+38h], 30000h
		jz	short loc_4B9
		push	18Bh
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	17Bh
		push	74h ; 't'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_4AE:				; CODE XREF: _ssl23_client_hello+FBj
					; _ssl23_client_hello+15Dj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_4B9:				; CODE XREF: _ssl23_client_hello+17Dj
		cmp	ebp, 302h
		jnz	short loc_4C8
		mov	ecx, 3
		jmp	short loc_4F6
; ---------------------------------------------------------------------------

loc_4C8:				; CODE XREF: _ssl23_client_hello+1ABj
		cmp	ebp, 301h
		jnz	short loc_4DA
		mov	ecx, 3
		lea	eax, [ecx-2]
		jmp	short loc_4FB
; ---------------------------------------------------------------------------

loc_4DA:				; CODE XREF: _ssl23_client_hello+1BAj
		cmp	ebp, 300h
		jnz	short loc_4EB
		mov	ecx, 3
		xor	eax, eax
		jmp	short loc_4FB
; ---------------------------------------------------------------------------

loc_4EB:				; CODE XREF: _ssl23_client_hello+1CCj
		cmp	ebp, 2
		jnz	loc_864
		xor	ecx, ecx

loc_4F6:				; CODE XREF: _ssl23_client_hello+1B2j
		mov	eax, 2

loc_4FB:				; CODE XREF: _ssl23_client_hello+16Ej
					; _ssl23_client_hello+1C4j ...
		mov	[esp+2Ch+var_1C], ecx
		mov	[esp+2Ch+Dst], eax
		mov	[esi+110h], ebp
		test	edi, edi
		jz	loc_620
		lea	edx, [ebx+0Bh]
		mov	byte ptr [ebx+2], 1
		push	0
		push	edx
		mov	[ebx+3], cl
		push	esi
		mov	[esp+38h+Dst], edx
		mov	[ebx+4], al
		call	_SSL_get_ciphers
		add	esp, 4
		push	eax
		push	esi
		call	_ssl_cipher_list_to_bytes
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jnz	short loc_564
		push	1B8h

loc_543:				; CODE XREF: _ssl23_client_hello+35Fj
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	0B5h ; 'µ'

loc_54D:				; CODE XREF: _ssl23_client_hello+3F6j
					; _ssl23_client_hello+48Cj
		push	74h ; 't'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_564:				; CODE XREF: _ssl23_client_hello+228j
		add	[esp+2Ch+Dst], ecx
		mov	eax, ecx
		sar	eax, 8
		xorps	xmm0, xmm0
		mov	[ebx+5], al
		mov	eax, 10h
		mov	[ebx+6], cl
		mov	ecx, 20h ; ' '
		mov	word ptr [ebx+7], 0
		test	byte ptr [esi+100h], 2
		cmovnz	ecx, eax
		mov	eax, ecx
		mov	[ebx+0Ah], cl
		sar	eax, 8
		mov	[ebx+9], al
		mov	eax, [esi+58h]
		push	ecx
		mov	[esp+30h+Size],	ecx
		movups	xmmword	ptr [eax+0C0h],	xmm0
		movups	xmmword	ptr [eax+0D0h],	xmm0
		mov	eax, [esi+58h]
		sub	eax, ecx
		add	eax, 0E0h ; 'à'
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		jle	loc_4AE
		mov	eax, [esi+58h]
		mov	ebx, [esp+2Ch+Size]
		sub	eax, ebx
		push	ebx		; Size
		add	eax, 0E0h ; 'à'
		push	eax		; Src
		push	[esp+34h+Dst]	; Dst
		call	_memcpy
		mov	edx, [esp+38h+arg_0]
		sub	ebx, edx
		mov	ecx, [esp+38h+Dst]
		add	ecx, 0FFFFFFFEh
		add	ecx, ebx
		mov	eax, ecx
		mov	[edx+1], cl
		sar	eax, 8
		or	al, 80h
		mov	[edx], al
		lea	eax, [ecx+2]
		mov	[esi+44h], eax
		lea	eax, [edx+2]
		push	ecx
		push	eax
		push	esi
		mov	dword ptr [esi+48h], 0
		call	_ssl3_finish_mac
		add	esp, 18h
		jmp	loc_80C
; ---------------------------------------------------------------------------

loc_620:				; CODE XREF: _ssl23_client_hello+1F7j
		add	ebx, 9
		mov	[esp+2Ch+var_4], ebx
		push	offset _ssl3_put_cipher_by_char
		mov	[ebx], cl
		mov	[ebx+1], al
		mov	eax, [esi+58h]
		movups	xmm0, xmmword ptr [eax+0C0h]
		movups	xmmword	ptr [ebx+2], xmm0
		movups	xmm0, xmmword ptr [eax+0D0h]
		movups	xmmword	ptr [ebx+12h], xmm0
		mov	byte ptr [ebx+22h], 0
		add	ebx, 23h ; '#'
		lea	eax, [ebx+2]
		push	eax
		push	esi
		call	_SSL_get_ciphers
		add	esp, 4
		push	eax
		push	esi
		call	_ssl_cipher_list_to_bytes
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jnz	short loc_678
		push	1FCh
		jmp	loc_543
; ---------------------------------------------------------------------------

loc_678:				; CODE XREF: _ssl23_client_hello+358j
		mov	eax, ecx
		mov	[ebx+1], cl
		sar	eax, 8
		mov	[ebx], al
		add	ebx, ecx
		test	dword ptr [esi+100h], 20000h
		jnz	short loc_6AD
		mov	eax, [esi+0E4h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	short loc_6AD
		push	eax
		call	_sk_num
		add	esp, 4
		mov	ecx, eax
		jmp	short loc_6AF
; ---------------------------------------------------------------------------

loc_6AD:				; CODE XREF: _ssl23_client_hello+37Aj
					; _ssl23_client_hello+38Aj
		xor	ecx, ecx

loc_6AF:				; CODE XREF: _ssl23_client_hello+397j
		lea	eax, [ecx+1]
		mov	[esp+2Ch+Size],	ecx
		mov	[ebx+2], al
		add	ebx, 3
		test	ecx, ecx
		jle	short loc_6EB
		xor	edi, edi
		mov	ebp, ecx

loc_6C4:				; CODE XREF: _ssl23_client_hello+3CDj
		mov	eax, [esi+0E4h]
		push	edi
		push	dword ptr [eax+98h]
		call	_sk_value
		inc	edi
		add	esp, 8
		mov	al, [eax]
		mov	[ebx], al
		inc	ebx
		cmp	edi, ebp
		jl	short loc_6C4
		mov	edi, [esp+2Ch+var_10]
		mov	ebp, [esp+2Ch+var_14]

loc_6EB:				; CODE XREF: _ssl23_client_hello+3AAj
		push	esi
		mov	byte ptr [ebx],	0
		call	_ssl_prepare_clienthello_tlsext
		add	esp, 4
		test	eax, eax
		jg	short loc_70F
		push	220h
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	0E2h ; 'â'
		jmp	loc_54D
; ---------------------------------------------------------------------------

loc_70F:				; CODE XREF: _ssl23_client_hello+3E5j
		lea	eax, [esp+2Ch+var_8]
		push	eax
		mov	eax, [esp+30h+arg_0]
		add	eax, 4000h
		push	eax
		lea	eax, [ebx+1]
		push	eax
		push	esi
		call	_ssl_add_clienthello_tlsext
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_760
		push	[esp+2Ch+var_8]
		push	2
		push	esi
		call	_ssl3_send_alert
		push	228h
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	44h ; 'D'
		push	74h ; 't'
		push	14h
		call	_ERR_put_error
		add	esp, 20h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_760:				; CODE XREF: _ssl23_client_hello+41Bj
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ebx
		sub	edx, [esp+2Ch+var_4]
		add	eax, 5
		mov	ecx, eax
		mov	[esp+2Ch+var_4], eax
		mov	eax, edx
		shr	eax, 10h
		mov	byte ptr [ecx],	1
		mov	[ecx+1], al
		mov	eax, edx
		mov	[ecx+3], dl
		add	edx, 4
		shr	eax, 8
		mov	[ecx+2], al
		cmp	edx, 4000h
		jbe	short loc_7A5
		push	237h
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	44h ; 'D'
		jmp	loc_54D
; ---------------------------------------------------------------------------

loc_7A5:				; CODE XREF: _ssl23_client_hello+47Ej
		mov	eax, [esp+2Ch+arg_0]
		lea	ecx, [eax+1]
		mov	byte ptr [eax],	16h
		mov	eax, [esp+2Ch+var_1C]
		mov	[ecx], al
		mov	eax, [esi+110h]
		and	eax, 0FFFFFF00h
		cmp	eax, 300h
		jnz	short loc_7D9
		cmp	dword ptr [esi+110h], 301h
		jle	short loc_7D9
		mov	byte ptr [ecx+1], 1
		jmp	short loc_7E0
; ---------------------------------------------------------------------------

loc_7D9:				; CODE XREF: _ssl23_client_hello+4B1j
					; _ssl23_client_hello+4BDj
		mov	eax, [esp+2Ch+Dst]
		mov	[ecx+1], al

loc_7E0:				; CODE XREF: _ssl23_client_hello+4C3j
		sub	ebx, [esp+2Ch+arg_0]
		add	ecx, 2
		mov	eax, edx
		sar	eax, 8
		mov	[ecx], al
		lea	eax, [ebx-5]
		push	eax
		push	[esp+30h+var_4]
		mov	[ecx+1], dl
		push	esi
		mov	[esi+44h], ebx
		mov	dword ptr [esi+48h], 0
		call	_ssl3_finish_mac
		add	esp, 0Ch

loc_80C:				; CODE XREF: _ssl23_client_hello+307j
		mov	dword ptr [esi+34h], 1211h
		mov	dword ptr [esi+48h], 0

loc_81A:				; CODE XREF: _ssl23_client_hello+E8j
		push	esi
		call	_ssl23_write_bytes
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, 2
		jl	loc_8BB
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	loc_8BB
		push	dword ptr [esi+68h]
		push	esi
		test	edi, edi
		jz	short loc_88A
		lea	eax, [ebx-2]
		push	eax
		mov	eax, [esi+3Ch]
		mov	eax, [eax+4]
		add	eax, 2
		push	eax
		push	0
		push	2
		push	1
		call	ecx
		add	esp, 1Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_864:				; CODE XREF: _ssl23_client_hello+1DAj
		push	1A2h
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	0BFh ; '¿'
		push	74h ; 't'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_88A:				; CODE XREF: _ssl23_client_hello+52Bj
		mov	eax, [esi+3Ch]
		push	5
		push	dword ptr [eax+4]
		push	100h
		push	ebp
		push	1
		call	ecx
		push	dword ptr [esi+68h]
		lea	eax, [ebx-5]
		push	esi
		push	eax
		mov	eax, [esi+3Ch]
		mov	eax, [eax+4]
		add	eax, 5
		push	eax
		mov	eax, [esi+64h]
		push	16h
		push	ebp
		push	1
		call	eax
		add	esp, 38h

loc_8BB:				; CODE XREF: _ssl23_client_hello+514j
					; _ssl23_client_hello+51Fj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 1Ch
		retn
_ssl23_client_hello endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl23_get_server_hello	proc near	; CODE XREF: _ssl23_connect+1F5p

var_3		= byte ptr -3
var_2		= word ptr -2
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+arg_0]
		push	7
		push	esi
		call	_ssl23_read_bytes
		add	esp, 8
		cmp	eax, 7
		jnz	loc_B72
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esi+4Ch]
		mov	cl, [edi]
		mov	bx, [edi+4]
		mov	al, [edi+6]
		mov	ebp, [edi]
		mov	[esp+14h+var_2], bx
		mov	[esp+14h+var_3], al
		test	cl, cl
		jns	short loc_92D
		cmp	byte ptr [edi+2], 4
		jnz	short loc_92D
		cmp	byte ptr [edi+5], 0
		jnz	short loc_92D
		cmp	al, 2
		jnz	short loc_92D
		push	27Bh
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	102h
		jmp	loc_B60
; ---------------------------------------------------------------------------

loc_92D:				; CODE XREF: _ssl23_get_server_hello+3Fj
					; _ssl23_get_server_hello+45j ...
		cmp	byte ptr [edi+1], 3
		jnz	loc_B51
		mov	al, [edi+2]
		cmp	al, 3
		ja	loc_B51
		cmp	cl, 16h
		jnz	short loc_94D
		cmp	byte ptr [edi+5], 2
		jz	short loc_96A

loc_94D:				; CODE XREF: _ssl23_get_server_hello+7Dj
		cmp	cl, 15h
		jnz	loc_B51
		cmp	byte ptr [edi+3], 0
		jnz	loc_B51
		cmp	byte ptr [edi+4], 2
		jnz	loc_B51

loc_96A:				; CODE XREF: _ssl23_get_server_hello+83j
		test	al, al
		jnz	short loc_987
		test	dword ptr [esi+100h], 2000000h
		jnz	short loc_987
		mov	dword ptr [esi], 300h
		call	_SSLv3_client_method
		jmp	short loc_9E4
; ---------------------------------------------------------------------------

loc_987:				; CODE XREF: _ssl23_get_server_hello+A4j
					; _ssl23_get_server_hello+B0j
		cmp	al, 1
		jnz	short loc_9A4
		test	dword ptr [esi+100h], 4000000h
		jnz	short loc_9A4
		mov	dword ptr [esi], 301h
		call	_TLSv1_client_method
		jmp	short loc_9E4
; ---------------------------------------------------------------------------

loc_9A4:				; CODE XREF: _ssl23_get_server_hello+C1j
					; _ssl23_get_server_hello+CDj
		cmp	al, 2
		jnz	short loc_9C1
		test	dword ptr [esi+100h], 10000000h
		jnz	short loc_9C1
		mov	dword ptr [esi], 302h
		call	_TLSv1_1_client_method
		jmp	short loc_9E4
; ---------------------------------------------------------------------------

loc_9C1:				; CODE XREF: _ssl23_get_server_hello+DEj
					; _ssl23_get_server_hello+EAj
		cmp	al, 3
		jnz	loc_B40
		test	dword ptr [esi+100h], 8000000h
		jnz	loc_B40
		mov	dword ptr [esi], 303h
		call	_TLSv1_2_client_method

loc_9E4:				; CODE XREF: _ssl23_get_server_hello+BDj
					; _ssl23_get_server_hello+DAj ...
		mov	ecx, [esi+0C0h]
		mov	[esi+8], eax
		mov	eax, [esi]
		mov	[ecx], eax
		cmp	dword ptr [esi], 303h
		jle	short loc_A10
		push	offset ??_C@_0BO@NOMIEOMK@s?9?$DOversion?5?$DM?$DN?5TLS_MAX_VERSION?$AA@ ; "s->version <= TLS_MAX_VERSION"
		push	2E6h
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_A10:				; CODE XREF: _ssl23_get_server_hello+12Fj
		cmp	byte ptr [edi],	15h
		jnz	loc_AAD
		mov	cl, [edi+5]
		lea	ebx, [edi+5]
		cmp	cl, 1
		jz	loc_AA8
		mov	edx, [esi+0D0h]
		test	edx, edx
		jnz	short loc_A42
		mov	eax, [esi+0E4h]
		mov	edx, [eax+9Ch]
		test	edx, edx
		jz	short loc_A5A

loc_A42:				; CODE XREF: _ssl23_get_server_hello+168j
		movzx	eax, byte ptr [edi+6]
		movzx	ecx, cl
		shl	ecx, 8
		or	ecx, eax
		push	ecx
		push	4004h
		push	esi
		call	edx
		add	esp, 0Ch

loc_A5A:				; CODE XREF: _ssl23_get_server_hello+178j
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_A88
		push	dword ptr [esi+68h]
		push	esi
		push	5
		push	edi
		push	100h
		push	dword ptr [esi]
		push	0
		call	eax
		push	dword ptr [esi+68h]
		mov	eax, [esi+64h]
		push	esi
		push	2
		push	ebx
		push	15h
		push	dword ptr [esi]
		push	0
		call	eax
		add	esp, 38h

loc_A88:				; CODE XREF: _ssl23_get_server_hello+197j
		mov	dword ptr [esi+18h], 1
		movzx	eax, byte ptr [edi+6]
		push	301h
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		add	eax, 3E8h
		push	eax
		jmp	loc_B60
; ---------------------------------------------------------------------------

loc_AA8:				; CODE XREF: _ssl23_get_server_hello+15Aj
		mov	bx, [esp+14h+var_2]

loc_AAD:				; CODE XREF: _ssl23_get_server_hello+14Bj
		push	1
		push	esi
		call	_ssl_init_wbio_buffer
		add	esp, 8
		test	eax, eax
		jz	$err$38
		mov	eax, [esi+58h]
		mov	dword ptr [esi+34h], 1120h
		mov	dword ptr [esi+38h], 0F0h ; 'ð'
		mov	dword ptr [esi+50h], 7
		cmp	dword ptr [eax+0ECh], 0
		jnz	short loc_AEE
		push	esi
		call	_ssl3_setup_read_buffer
		add	esp, 4
		test	eax, eax
		jz	short $err$38

loc_AEE:				; CODE XREF: _ssl23_get_server_hello+217j
		mov	eax, [esi+58h]
		mov	cl, [esp+14h+var_3]
		push	esi
		mov	eax, [eax+0ECh]
		mov	[esi+4Ch], eax
		mov	[eax], ebp
		mov	[eax+4], bx
		mov	[eax+6], cl
		mov	eax, [esi+58h]
		mov	dword ptr [eax+0F8h], 7
		mov	eax, [esi+58h]
		mov	dword ptr [eax+0F4h], 0
		mov	eax, [esi+8]
		mov	eax, [eax+14h]
		mov	[esi+20h], eax
		mov	dword ptr [esi+44h], 0
		call	_SSL_connect
		add	esp, 4
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_B40:				; CODE XREF: _ssl23_get_server_hello+FBj
					; _ssl23_get_server_hello+10Bj
		push	2DFh
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	102h
		jmp	short loc_B60
; ---------------------------------------------------------------------------

loc_B51:				; CODE XREF: _ssl23_get_server_hello+69j
					; _ssl23_get_server_hello+74j ...
		push	31Ah
		push	offset ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ ; ".\\ssl\\s23_clnt.c"
		push	0FCh ; 'ü'

loc_B60:				; CODE XREF: _ssl23_get_server_hello+60j
					; _ssl23_get_server_hello+1DBj	...
		push	77h ; 'w'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$err$38:				; CODE XREF: _ssl23_get_server_hello+1F2j
					; _ssl23_get_server_hello+224j
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx

loc_B72:				; CODE XREF: _ssl23_get_server_hello+1Dj
		pop	esi
		pop	ecx
		retn
_ssl23_get_server_hello	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B78h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl23_no_ssl2_ciphers proc near	; CODE XREF: _ssl23_client_hello+31p

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	_SSL_get_ciphers
		mov	edi, eax
		xor	esi, esi
		push	edi
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	short loc_BB6
		nop	dword ptr [eax+00h]

loc_B98:				; CODE XREF: _ssl23_no_ssl2_ciphers+3Cj
		push	esi
		push	edi
		call	_sk_value
		add	esp, 8
		cmp	dword ptr [eax+1Ch], 1
		jz	short loc_BBE
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_B98

loc_BB6:				; CODE XREF: _ssl23_no_ssl2_ciphers+1Aj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_BBE:				; CODE XREF: _ssl23_no_ssl2_ciphers+2Ej
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_ssl23_no_ssl2_ciphers endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BC4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_fill_hello_random
_ssl_fill_hello_random proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_C]
		cmp	esi, 4
		jge	short loc_BD2
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_BD2:				; CODE XREF: _ssl_fill_hello_random+8j
		cmp	[esp+4+arg_4], 0
		mov	eax, [esp+4+arg_0]
		mov	eax, [eax+104h]
		jz	short loc_BE8
		shr	eax, 6
		jmp	short loc_BEB
; ---------------------------------------------------------------------------

loc_BE8:				; CODE XREF: _ssl_fill_hello_random+1Dj
		shr	eax, 5

loc_BEB:				; CODE XREF: _ssl_fill_hello_random+22j
		and	eax, 1
		test	eax, eax
		jz	short loc_C2E
		push	ebx
		push	0		; Time
		call	dword ptr ds:__imp___time64
		mov	ecx, [esp+0Ch+arg_8]
		mov	ebx, eax
		mov	edx, ebx
		shr	eax, 8
		shr	edx, 18h
		mov	[ecx], dl
		lea	edx, [ecx+1]
		mov	ecx, ebx
		shr	ecx, 10h
		mov	[edx], cl
		mov	[edx+1], al
		lea	eax, [esi-4]
		push	eax
		lea	eax, [edx+3]
		mov	[edx+2], bl
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 0Ch
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C2E:				; CODE XREF: _ssl_fill_hello_random+2Cj
		push	esi
		push	[esp+8+arg_8]
		call	_RAND_pseudo_bytes
		add	esp, 8
		pop	esi
		retn
_ssl_fill_hello_random endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C40h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; time_t __cdecl static	time(time_t *Time)
_time		proc near
		jmp	dword ptr ds:__imp___time64
_time		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C48h
; COMDAT (pick any)
		public ??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@
; `string'
??_C@_0BB@PBLDMCFL@?4?2ssl?2s23_clnt?4c?$AA@ db	'.\ssl\s23_clnt.c',0
					; DATA XREF: _ssl23_connect+20Co
					; _ssl23_connect+21Do ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C5Ch
; COMDAT (pick any)
		public ??_C@_0BO@NOMIEOMK@s?9?$DOversion?5?$DM?$DN?5TLS_MAX_VERSION?$AA@
; `string'
??_C@_0BO@NOMIEOMK@s?9?$DOversion?5?$DM?$DN?5TLS_MAX_VERSION?$AA@ db 's->version <= TLS_MAX_VERSION',0
					; DATA XREF: _ssl23_get_server_hello+131o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _tls1_new:near	; DATA XREF: .rdata:0000029Co
		extrn _tls1_free:near	; DATA XREF: .rdata:000002A4o
		extrn _tls1_clear:near	; DATA XREF: .rdata:000002A0o
		extrn _TLSv1_2_enc_data:near ; DATA XREF: .rdata:000002FCo
		extrn _ssl_ok:near	; DATA XREF: .rdata:000002C4o
		extrn _ssl_undefined_function:near ; DATA XREF:	.rdata:000002A8o
					; .rdata:000002BCo ...
		extrn _ssl_undefined_void_function:near	; DATA XREF: .rdata:off_300o
		extrn _ssl_undefined_const_function:near ; DATA	XREF: .rdata:000002E8o
		extrn _ssl3_get_message:near ; DATA XREF: .rdata:000002C8o
		extrn _ssl3_dispatch_alert:near	; DATA XREF: .rdata:000002D4o
		extrn _ssl3_read_bytes:near ; DATA XREF: .rdata:000002CCo
		extrn _ssl3_write_bytes:near ; DATA XREF: .rdata:000002D0o
		extrn _ssl3_ctrl:near	; DATA XREF: .rdata:000002D8o
		extrn _ssl3_ctx_ctrl:near ; DATA XREF: .rdata:000002DCo
		extrn _ssl3_callback_ctrl:near ; DATA XREF: .rdata:00000304o
		extrn _ssl3_ctx_callback_ctrl:near ; DATA XREF:	.rdata:00000308o
		extrn _ssl23_num_ciphers:near ;	DATA XREF: .rdata:000002ECo
		extrn _ssl23_get_cipher:near ; DATA XREF: .rdata:000002F0o
		extrn _ssl23_read:near	; DATA XREF: .rdata:000002B0o
		extrn _ssl23_peek:near	; DATA XREF: .rdata:000002B4o
		extrn _ssl23_write:near	; DATA XREF: .rdata:000002B8o
		extrn _ssl23_put_cipher_by_char:near ; DATA XREF: .rdata:000002E4o
		extrn _ssl23_get_cipher_by_char:near ; DATA XREF: .rdata:000002E0o
		extrn _ssl23_default_timeout:near ; DATA XREF: .rdata:000002F8o
; __time64_t __cdecl __time64(__time64_t *Time)
		extrn __imp___time64:near ; CODE XREF: _ssl23_connect+15p
					; _ssl23_client_hello+118p ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn __imp__SetLastError@4:near ; CODE	XREF: _ssl23_connect+4Ap
					; DATA XREF: _ssl23_connect+4Ar
		extrn _BUF_MEM_new:near	; CODE XREF: _ssl23_connect+14Ap
		extrn _BUF_MEM_free:near ; CODE	XREF: _ssl23_connect+242p
		extrn _BUF_MEM_grow:near ; CODE	XREF: _ssl23_connect+163p
		extrn _sk_num:near	; CODE XREF: _ssl23_client_hello+38Dp
					; _ssl23_no_ssl2_ciphers+10p ...
		extrn _sk_value:near	; CODE XREF: _ssl23_client_hello+3BDp
					; _ssl23_no_ssl2_ciphers+22p
		extrn _OpenSSLDie:near	; CODE XREF: _ssl23_get_server_hello+140p
		extrn _BIO_ctrl:near	; CODE XREF: _ssl23_connect+1C1p
		extrn _ERR_put_error:near ; CODE XREF: _ssl23_connect+22Bp
					; _ssl23_client_hello+192p ...
		extrn _ERR_clear_error:near ; CODE XREF: _ssl23_connect+43p
		extrn _SSL_clear:near	; CODE XREF: _ssl23_connect+93p
		extrn _SSL_connect:near	; CODE XREF: _ssl23_get_server_hello+26Ap
		extrn _SSLv3_client_method:near	; CODE XREF: _ssl23_get_client_method+9j
					; _ssl23_get_server_hello+B8p
		extrn _TLSv1_client_method:near	; CODE XREF: _ssl23_get_client_method+14j
					; _ssl23_get_server_hello+D5p
		extrn _TLSv1_1_client_method:near ; CODE XREF: _ssl23_get_client_method+1Fj
					; _ssl23_get_server_hello+F2p
		extrn _TLSv1_2_client_method:near ; CODE XREF: _ssl23_get_client_method+2Aj
					; _ssl23_get_server_hello+117p
		extrn _SSL_get_ciphers:near ; CODE XREF: _ssl23_client_hello+212p
					; _ssl23_client_hello+342p ...
		extrn _SSL_state:near	; CODE XREF: _ssl23_connect+73p
					; _ssl23_connect+83p
		extrn _ssl_get_new_session:near	; CODE XREF: _ssl23_client_hello+F1p
		extrn _ssl_cipher_list_to_bytes:near ; CODE XREF: _ssl23_client_hello+21Cp
					; _ssl23_client_hello+34Cp
		extrn _ssl3_put_cipher_by_char:near ; DATA XREF: _ssl23_client_hello+313o
		extrn _ssl3_init_finished_mac:near ; CODE XREF:	_ssl23_connect+190p
		extrn _ssl3_send_alert:near ; CODE XREF: _ssl23_client_hello+424p
		extrn _ssl3_finish_mac:near ; CODE XREF: _ssl23_client_hello+2FFp
					; _ssl23_client_hello+4F0p
		extrn _ssl3_setup_buffers:near ; CODE XREF: _ssl23_connect+17Fp
		extrn _ssl3_setup_read_buffer:near ; CODE XREF:	_ssl23_get_server_hello+21Ap
		extrn _ssl23_read_bytes:near ; CODE XREF: _ssl23_get_server_hello+12p
		extrn _ssl23_write_bytes:near ;	CODE XREF: _ssl23_client_hello+507p
		extrn _ssl_init_wbio_buffer:near ; CODE	XREF: _ssl23_get_server_hello+1E8p
		extrn _ssl_add_clienthello_tlsext:near ; CODE XREF: _ssl23_client_hello+40Fp
		extrn _ssl_prepare_clienthello_tlsext:near
					; CODE XREF: _ssl23_client_hello+3DBp
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _ssl23_client_hello+142p
					; _ssl23_client_hello+153p ...
		extrn _RAND_add:near	; CODE XREF: _ssl23_connect+3Bp
		extrn __chkstk:near	; CODE XREF: _ssl23_connect+5p
					; _ssl23_connect+27p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _ssl23_client_hello+2CCp
		extrn __fltused:near


		end
