;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C72F289D0774A5C4EF137BFAA5A22E09
; Input	CRC32 :	FDA70839

; File Name   :	C:\compspace\Diff\openssl\obj\i_cfb64.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _idea_cfb64_encrypt
_idea_cfb64_encrypt proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 8
		call	__chkstk
		cmp	[esp+8+arg_18],	0
		mov	eax, [esp+8+arg_14]
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		push	esi
		mov	esi, [eax]
		push	edi
		jz	loc_118
		test	ebp, ebp
		jz	loc_207
		mov	eax, [esp+18h+arg_0]
		mov	ecx, [esp+18h+arg_4]
		sub	eax, ecx
		mov	edx, [esp+18h+arg_10]
		mov	[esp+18h+arg_8], ecx
		mov	[esp+18h+arg_18], eax

loc_41:					; CODE XREF: _idea_cfb64_encrypt+104j
		dec	ebp
		test	esi, esi
		jnz	loc_EA
		movzx	ecx, byte ptr [edx]
		lea	ebx, [edx+1]
		movzx	eax, byte ptr [ebx]
		movzx	edx, byte ptr [ebx+3]
		push	[esp+18h+arg_C]
		shl	eax, 10h
		shl	ecx, 18h
		or	ecx, eax
		shl	edx, 18h
		movzx	eax, byte ptr [ebx+1]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+2]
		or	ecx, eax
		movzx	eax, byte ptr [ebx+4]
		mov	[esp+1Ch+var_8], ecx
		movzx	ecx, byte ptr [ebx+5]
		shl	eax, 10h
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [ebx+6]
		or	ecx, eax
		lea	eax, [esp+1Ch+var_8]
		or	ecx, edx
		push	eax
		mov	[esp+20h+var_4], ecx
		call	_idea_encrypt
		mov	ecx, [esp+20h+var_8]
		add	esp, 8
		mov	edx, [esp+18h+arg_10]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+1], al
		mov	[ebx+2], cl
		mov	ecx, [esp+18h+var_4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[ebx+3], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx+4], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+5], al
		mov	eax, [esp+18h+arg_18]
		mov	[ebx+6], cl
		mov	ecx, [esp+18h+arg_8]

loc_EA:					; CODE XREF: _idea_cfb64_encrypt+44j
		mov	al, [eax+ecx]
		xor	al, [esi+edx]
		mov	[ecx], al
		inc	ecx
		mov	[esi+edx], al
		inc	esi
		mov	eax, [esp+18h+arg_18]
		and	esi, 7
		mov	[esp+18h+arg_8], ecx
		test	ebp, ebp
		jnz	loc_41
		mov	eax, [esp+18h+arg_14]
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_118:				; CODE XREF: _idea_cfb64_encrypt+1Dj
		test	ebp, ebp
		jz	loc_207
		mov	eax, [esp+18h+arg_4]
		mov	edx, [esp+18h+arg_10]
		mov	[esp+18h+arg_18], eax
		mov	eax, [esp+18h+arg_0]
		mov	[esp+18h+arg_8], eax

loc_134:				; CODE XREF: _idea_cfb64_encrypt+1FDj
		dec	ebp
		test	esi, esi
		jnz	loc_1D9
		movzx	ecx, byte ptr [edx]
		lea	ebx, [edx+1]
		movzx	eax, byte ptr [ebx]
		movzx	edx, byte ptr [ebx+3]
		push	[esp+18h+arg_C]
		shl	eax, 10h
		shl	ecx, 18h
		or	ecx, eax
		shl	edx, 18h
		movzx	eax, byte ptr [ebx+1]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+2]
		or	ecx, eax
		movzx	eax, byte ptr [ebx+4]
		mov	[esp+1Ch+var_8], ecx
		movzx	ecx, byte ptr [ebx+5]
		shl	eax, 10h
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [ebx+6]
		or	ecx, eax
		lea	eax, [esp+1Ch+var_8]
		or	ecx, edx
		push	eax
		mov	[esp+20h+var_4], ecx
		call	_idea_encrypt
		mov	ecx, [esp+20h+var_8]
		add	esp, 8
		mov	edx, [esp+18h+arg_10]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+1], al
		mov	[ebx+2], cl
		mov	ecx, [esp+18h+var_4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[ebx+3], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx+4], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+5], al
		mov	eax, [esp+18h+arg_8]
		mov	[ebx+6], cl

loc_1D9:				; CODE XREF: _idea_cfb64_encrypt+137j
		mov	cl, [eax]
		inc	eax
		mov	[esp+18h+arg_8], eax
		mov	al, [esi+edx]
		mov	[esi+edx], cl
		xor	cl, al
		mov	eax, [esp+18h+arg_18]
		inc	esi
		and	esi, 7
		mov	[eax], cl
		inc	eax
		mov	[esp+18h+arg_18], eax
		mov	eax, [esp+18h+arg_8]
		test	ebp, ebp
		jnz	loc_134
		mov	eax, [esp+18h+arg_14]

loc_207:				; CODE XREF: _idea_cfb64_encrypt+25j
					; _idea_cfb64_encrypt+11Aj
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_idea_cfb64_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _idea_encrypt:near ; CODE	XREF: _idea_cfb64_encrypt+9Ap
					; _idea_cfb64_encrypt+18Dp
		extrn __chkstk:near	; CODE XREF: _idea_cfb64_encrypt+5p


		end
