;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	018A3D3053ADFF39B05EFA55B06949D4
; Input	CRC32 :	D130363C

; File Name   :	C:\compspace\Diff\openssl\obj\set_key.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; `_shadow_DES_check_key'::`2'::_hide_DES_check_key
?_hide_DES_check_key@?1??_shadow_DES_check_key@@9@9 dd ? ; DATA	XREF: _DES_key_schedr
					; _DES_set_keyr ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 4
_odd_parity	db 1			; DATA XREF: _DES_check_key_parity+16r
					; _DES_set_key_checked+16r ...
		db 1, 2	dup(2)
dword_8		dd 7070404h, 0B0B0808h,	0E0E0D0Dh, 13131010h, 16161515h
		dd 1A1A1919h, 1F1F1C1Ch, 23232020h, 26262525h, 2A2A2929h
		dd 2F2F2C2Ch, 32323131h, 37373434h, 3B3B3838h, 3E3E3D3Dh
		dd 43434040h, 46464545h, 4A4A4949h, 4F4F4C4Ch, 52525151h
		dd 57575454h, 5B5B5858h, 5E5E5D5Dh, 62626161h, 67676464h
		dd 6B6B6868h, 6E6E6D6Dh, 73737070h, 76767575h, 7A7A7979h
		dd 7F7F7C7Ch, 83838080h, 86868585h, 8A8A8989h, 8F8F8C8Ch
		dd 92929191h, 97979494h, 9B9B9898h, 9E9E9D9Dh, 0A2A2A1A1h
		dd 0A7A7A4A4h, 0ABABA8A8h, 0AEAEADADh, 0B3B3B0B0h, 0B6B6B5B5h
		dd 0BABAB9B9h, 0BFBFBCBCh, 0C2C2C1C1h, 0C7C7C4C4h, 0CBCBC8C8h
		dd 0CECECDCDh, 0D3D3D0D0h, 0D6D6D5D5h, 0DADAD9D9h, 0DFDFDCDCh
		dd 0E3E3E0E0h, 0E6E6E5E5h, 0EAEAE9E9h, 0EFEFECECh, 0F2F2F1F1h
		dd 0F7F7F4F4h, 0FBFBF8F8h, 0FEFEFDFDh
_weak_keys	dd 2 dup(1010101h), 2 dup(0FEFEFEFEh), 1F1F1F1Fh, 0E0E0E0Eh
					; DATA XREF: _DES_is_weak_key+4o
		dd 0E0E0E0E0h, 0F1F1F1F1h, 2 dup(0FE01FE01h), 2	dup(1FE01FEh)
		dd 0E01FE01Fh, 0F10EF10Eh, 1FE01FE0h, 0EF10EF1h, 0E001E001h
		dd 0F101F101h, 1E001E0h, 1F101F1h, 0FE1FFE1Fh, 0FE0EFE0Eh
		dd 1FFE1FFEh, 0EFE0EFEh, 1F011F01h, 0E010E01h, 11F011Fh
		dd 10E010Eh, 0FEE0FEE0h, 0FEF1FEF1h, 0E0FEE0FEh, 0F1FEF1FEh
_des_skb	dd 0			; DATA XREF: _DES_is_weak_key+21o
					; _DES_set_key_unchecked+196r
		dd 10h,	20000000h, 20000010h, 10000h, 10010h, 20010000h
		dd 20010010h, 800h, 810h, 20000800h, 20000810h,	10800h
		dd 10810h, 20010800h, 20010810h, 20h, 30h, 20000020h, 20000030h
		dd 10020h, 10030h, 20010020h, 20010030h, 820h, 830h, 20000820h
		dd 20000830h, 10820h, 10830h, 20010820h, 20010830h, 80000h
		dd 80010h, 20080000h, 20080010h, 90000h, 90010h, 20090000h
		dd 20090010h, 80800h, 80810h, 20080800h, 20080810h, 90800h
		dd 90810h, 20090800h, 20090810h, 80020h, 80030h, 20080020h
		dd 20080030h, 90020h, 90030h, 20090020h, 20090030h, 80820h
		dd 80830h, 20080820h, 20080830h, 90820h, 90830h, 20090820h
		dd 20090830h
dword_284	dd 0			; DATA XREF: _DES_set_key_unchecked+18Dr
		dd 2000000h, 2000h, 2002000h, 200000h, 2200000h, 202000h
		dd 2202000h, 4,	2000004h, 2004h, 2002004h, 200004h, 2200004h
		dd 202004h, 2202004h, 400h, 2000400h, 2400h, 2002400h
		dd 200400h, 2200400h, 202400h, 2202400h, 404h, 2000404h
		dd 2404h, 2002404h, 200404h, 2200404h, 202404h,	2202404h
		dd 10000000h, 12000000h, 10002000h, 12002000h, 10200000h
		dd 12200000h, 10202000h, 12202000h, 10000004h, 12000004h
		dd 10002004h, 12002004h, 10200004h, 12200004h, 10202004h
		dd 12202004h, 10000400h, 12000400h, 10002400h, 12002400h
		dd 10200400h, 12200400h, 10202400h, 12202400h, 10000404h
		dd 12000404h, 10002404h, 12002404h, 10200404h, 12200404h
		dd 10202404h, 12202404h
dword_384	dd 0			; DATA XREF: _DES_set_key_unchecked+17Fr
		dd 1, 40000h, 40001h, 1000000h,	1000001h, 1040000h, 1040001h
		dd 2, 3, 40002h, 40003h, 1000002h, 1000003h, 1040002h
		dd 1040003h, 200h, 201h, 40200h, 40201h, 1000200h, 1000201h
		dd 1040200h, 1040201h, 202h, 203h, 40202h, 40203h, 1000202h
		dd 1000203h, 1040202h, 1040203h, 8000000h, 8000001h, 8040000h
		dd 8040001h, 9000000h, 9000001h, 9040000h, 9040001h, 8000002h
		dd 8000003h, 8040002h, 8040003h, 9000002h, 9000003h, 9040002h
		dd 9040003h, 8000200h, 8000201h, 8040200h, 8040201h, 9000200h
		dd 9000201h, 9040200h, 9040201h, 8000202h, 8000203h, 8040202h
		dd 8040203h, 9000202h, 9000203h, 9040202h, 9040203h
dword_484	dd 0			; DATA XREF: _DES_set_key_unchecked+171r
		dd 100000h, 100h, 100100h, 8, 100008h, 108h, 100108h, 1000h
		dd 101000h, 1100h, 101100h, 1008h, 101008h, 1108h, 101108h
		dd 4000000h, 4100000h, 4000100h, 4100100h, 4000008h, 4100008h
		dd 4000108h, 4100108h, 4001000h, 4101000h, 4001100h, 4101100h
		dd 4001008h, 4101008h, 4001108h, 4101108h, 20000h, 120000h
		dd 20100h, 120100h, 20008h, 120008h, 20108h, 120108h, 21000h
		dd 121000h, 21100h, 121100h, 21008h, 121008h, 21108h, 121108h
		dd 4020000h, 4120000h, 4020100h, 4120100h, 4020008h, 4120008h
		dd 4020108h, 4120108h, 4021000h, 4121000h, 4021100h, 4121100h
		dd 4021008h, 4121008h, 4021108h, 4121108h
dword_584	dd 0			; DATA XREF: _DES_set_key_unchecked+1EBr
		dd 10000000h, 10000h, 10010000h, 4, 10000004h, 10004h
		dd 10010004h, 20000000h, 30000000h, 20010000h, 30010000h
		dd 20000004h, 30000004h, 20010004h, 30010004h, 100000h
		dd 10100000h, 110000h, 10110000h, 100004h, 10100004h, 110004h
		dd 10110004h, 20100000h, 30100000h, 20110000h, 30110000h
		dd 20100004h, 30100004h, 20110004h, 30110004h, 1000h, 10001000h
		dd 11000h, 10011000h, 1004h, 10001004h,	11004h,	10011004h
		dd 20001000h, 30001000h, 20011000h, 30011000h, 20001004h
		dd 30001004h, 20011004h, 30011004h, 101000h, 10101000h
		dd 111000h, 10111000h, 101004h,	10101004h, 111004h, 10111004h
		dd 20101000h, 30101000h, 20111000h, 30111000h, 20101004h
		dd 30101004h, 20111004h, 30111004h
dword_684	dd 0			; DATA XREF: _DES_set_key_unchecked+1CBr
		dd 8000000h, 8,	8000008h, 400h,	8000400h, 408h,	8000408h
		dd 20000h, 8020000h, 20008h, 8020008h, 20400h, 8020400h
		dd 20408h, 8020408h, 1,	8000001h, 9, 8000009h, 401h, 8000401h
		dd 409h, 8000409h, 20001h, 8020001h, 20009h, 8020009h
		dd 20401h, 8020401h, 20409h, 8020409h, 2000000h, 0A000000h
		dd 2000008h, 0A000008h,	2000400h, 0A000400h, 2000408h
		dd 0A000408h, 2020000h,	0A020000h, 2020008h, 0A020008h
		dd 2020400h, 0A020400h,	2020408h, 0A020408h, 2000001h
		dd 0A000001h, 2000009h,	0A000009h, 2000401h, 0A000401h
		dd 2000409h, 0A000409h,	2020001h, 0A020001h, 2020009h
		dd 0A020009h, 2020401h,	0A020401h, 2020409h, 0A020409h
dword_784	dd 0			; DATA XREF: _DES_set_key_unchecked+1DFr
		dd offset dword_8+0F8h
		dd 80000h, 80100h, 1000000h, 1000100h, 1080000h, 1080100h
		dd 10h,	110h, 80010h, 80110h, 1000010h,	1000110h, 1080010h
		dd 1080110h, 200000h, 200100h, 280000h,	280100h, 1200000h
		dd 1200100h, 1280000h, 1280100h, 200010h, 200110h, 280010h
		dd 280110h, 1200010h, 1200110h,	1280010h, 1280110h, 200h
		dd 300h, 80200h, 80300h, 1000200h, 1000300h, 1080200h
		dd 1080300h, 210h, 310h, 80210h, 80310h, 1000210h, 1000310h
		dd 1080210h, 1080310h, 200200h,	200300h, 280200h, 280300h
		dd 1200200h, 1200300h, 1280200h, 1280300h, 200210h, 200310h
		dd 280210h, 280310h, 1200210h, 1200310h, 1280210h, 1280310h
dword_884	dd 0			; DATA XREF: _DES_set_key_unchecked+1D8r
		dd 4000000h, 40000h, 4040000h, 2, 4000002h, 40002h, 4040002h
		dd 2000h, 4002000h, 42000h, 4042000h, 2002h, 4002002h
		dd 42002h, 4042002h, 20h, 4000020h, 40020h, 4040020h, 22h
		dd 4000022h, 40022h, 4040022h, 2020h, 4002020h,	42020h
		dd 4042020h, 2022h, 4002022h, 42022h, 4042022h,	800h, 4000800h
		dd 40800h, 4040800h, 802h, 4000802h, 40802h, 4040802h
		dd 2800h, 4002800h, 42800h, 4042800h, 2802h, 4002802h
		dd 42802h, 4042802h, 820h, 4000820h, 40820h, 4040820h
		dd 822h, 4000822h, 40822h, 4040822h, 2820h, 4002820h, 42820h
		dd 4042820h, 2822h, 4002822h, 42822h, 4042822h
; `DES_set_key_unchecked'::`2'::shifts2
?shifts2@?1??DES_set_key_unchecked@@9@9	dd 2 dup(0) ; DATA XREF: _DES_set_key_unchecked+E5o
		dd 6 dup(1), 0
		dd 6 dup(1)
		db 3 dup(0)
byte_9C3	db 0			; DATA XREF: _DES_set_key_unchecked+222o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_check_key_parity
_DES_check_key_parity proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		xor	eax, eax
		nop	word ptr [eax+eax+00000000h]

loc_9D4:				; CODE XREF: _DES_check_key_parity+22j
		mov	dl, [eax+esi]
		movzx	ecx, dl
		cmp	dl, _odd_parity[ecx]
		jnz	short loc_9EF
		inc	eax
		cmp	eax, 8
		jb	short loc_9D4
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_9EF:				; CODE XREF: _DES_check_key_parity+1Cj
		xor	eax, eax
		pop	esi
		retn
_DES_check_key_parity endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_is_weak_key
_DES_is_weak_key proc near		; CODE XREF: _DES_set_key_checked+25p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, offset _weak_keys
		nop	dword ptr [eax+00000000h]

loc_A04:				; CODE XREF: _DES_is_weak_key+26j
		mov	ecx, [eax]
		cmp	ecx, [edx]
		jnz	short loc_A12
		mov	ecx, [eax+4]
		cmp	ecx, [edx+4]
		jz	short loc_A1F

loc_A12:				; CODE XREF: _DES_is_weak_key+14j
		add	eax, 8
		cmp	eax, offset _des_skb
		jl	short loc_A04
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_A1F:				; CODE XREF: _DES_is_weak_key+1Cj
		mov	eax, 1
		retn
_DES_is_weak_key endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_key_sched
_DES_key_sched	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	ds:?_hide_DES_check_key@?1??_shadow_DES_check_key@@9@9,	0 ; `_shadow_DES_check_key'::`2'::_hide_DES_check_key
		jnz	_DES_set_key_checked
		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_DES_set_key_unchecked
		add	esp, 8
		xor	eax, eax
		retn
_DES_key_sched	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_set_key
_DES_set_key	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	ds:?_hide_DES_check_key@?1??_shadow_DES_check_key@@9@9,	0 ; `_shadow_DES_check_key'::`2'::_hide_DES_check_key
		jnz	_DES_set_key_checked
		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_DES_set_key_unchecked
		add	esp, 8
		xor	eax, eax
		retn
_DES_set_key	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_set_key_checked
_DES_set_key_checked proc near		; CODE XREF: _DES_key_sched+7j
					; _DES_set_key+7j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		xor	eax, eax
		nop	word ptr [eax+eax+00000000h]

loc_A78:				; CODE XREF: _DES_set_key_checked+22j
		mov	dl, [eax+esi]
		movzx	ecx, dl
		cmp	dl, _odd_parity[ecx]
		jnz	short loc_AB1
		inc	eax
		cmp	eax, 8
		jb	short loc_A78
		push	esi
		call	_DES_is_weak_key
		add	esp, 4
		test	eax, eax
		jz	short loc_AA0
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AA0:				; CODE XREF: _DES_set_key_checked+2Fj
		push	[esp+4+arg_4]
		push	esi
		call	_DES_set_key_unchecked
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AB1:				; CODE XREF: _DES_set_key_checked+1Cj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
_DES_set_key_checked endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AB8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_set_key_unchecked
_DES_set_key_unchecked proc near	; CODE XREF: _DES_key_sched+15p
					; _DES_set_key+15p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [esp+10h+arg_0]
		movzx	ebx, byte ptr [ecx+4]
		movzx	edx, byte ptr [ecx+7]
		movzx	eax, byte ptr [ecx]
		lea	esi, [ecx+1]
		shl	edx, 8
		movzx	ecx, byte ptr [esi]
		shl	ecx, 8
		or	eax, ecx
		movzx	ecx, byte ptr [esi+1]
		shl	ecx, 10h
		or	eax, ecx
		movzx	ecx, byte ptr [esi+2]
		shl	ecx, 18h
		or	eax, ecx
		movzx	ecx, byte ptr [esi+4]
		shl	ecx, 8
		or	ebx, ecx
		movzx	ecx, byte ptr [esi+5]
		or	edx, ecx
		shl	edx, 10h
		or	ebx, edx
		mov	ecx, ebx
		shr	ecx, 4
		xor	ecx, eax
		and	ecx, 0F0F0F0Fh
		xor	eax, ecx
		shl	ecx, 4
		xor	ebx, ecx
		mov	edx, eax
		shl	edx, 12h
		xor	edx, eax
		and	edx, 0CCCC0000h
		mov	ecx, edx
		shr	ecx, 12h
		xor	ecx, edx
		mov	edx, ebx
		xor	eax, ecx
		shl	edx, 12h
		xor	edx, ebx
		and	edx, 0CCCC0000h
		mov	ecx, edx
		shr	ecx, 12h
		xor	ecx, edx
		xor	ebx, ecx
		mov	ecx, ebx
		shr	ecx, 1
		xor	ecx, eax
		and	ecx, 55555555h
		xor	eax, ecx
		add	ecx, ecx
		xor	ebx, ecx
		mov	ecx, eax
		shr	ecx, 8
		xor	ecx, ebx
		and	ecx, 0FF00FFh
		xor	ebx, ecx
		shl	ecx, 8
		xor	eax, ecx
		mov	ecx, ebx
		shr	ecx, 1
		xor	ecx, eax
		and	ecx, 55555555h
		xor	eax, ecx
		add	ecx, ecx
		xor	ebx, ecx
		mov	ecx, eax
		mov	ebp, ebx
		and	ecx, 0F000000Fh
		shr	ebp, 0Ch
		and	ebp, 0FF0h
		or	ebp, ecx
		movzx	ecx, bl
		shr	ebp, 4
		shl	ecx, 10h
		or	ebp, ecx
		and	ebx, 0FF00h
		mov	ecx, offset ?shifts2@?1??DES_set_key_unchecked@@9@9 ; `DES_set_key_unchecked'::`2'::shifts2
		or	ebp, ebx
		and	eax, 0FFFFFFFh
		mov	[esp+10h+arg_0], ecx

loc_BAD:				; CODE XREF: _DES_set_key_unchecked+228j
		cmp	dword ptr [ecx], 0
		mov	ecx, eax
		jz	short loc_BC6
		shl	ecx, 1Ah
		shr	eax, 2
		or	eax, ecx
		mov	ecx, ebp
		shl	ecx, 1Ah
		shr	ebp, 2
		jmp	short loc_BD4
; ---------------------------------------------------------------------------

loc_BC6:				; CODE XREF: _DES_set_key_unchecked+FAj
		shl	ecx, 1Bh
		shr	eax, 1
		or	eax, ecx
		mov	ecx, ebp
		shl	ecx, 1Bh
		shr	ebp, 1

loc_BD4:				; CODE XREF: _DES_set_key_unchecked+10Cj
		or	ebp, ecx
		and	eax, 0FFFFFFFh
		mov	edi, eax
		mov	ecx, eax
		and	ecx, 0C00000h
		shr	edi, 1
		mov	esi, edi
		mov	edx, eax
		and	esi, 7000000h
		and	edx, 1E000h
		or	esi, ecx
		and	ebp, 0FFFFFFFh
		shr	esi, 1
		mov	ecx, eax
		and	ecx, 100000h
		or	esi, ecx
		mov	ecx, edi
		and	ecx, 60000h
		shr	esi, 14h
		or	edx, ecx
		and	edi, 0F00h
		shr	edx, 0Dh
		mov	ecx, eax
		and	ecx, 0C0h
		mov	ebx, dword_484[esi*4]
		or	edi, ecx
		shr	edi, 6
		mov	ecx, eax
		or	ebx, dword_384[edx*4]
		and	ecx, 3Fh
		mov	esi, ebp
		shr	esi, 1
		or	ebx, dword_284[edi*4]
		mov	edx, esi
		or	ebx, _des_skb[ecx*4]
		and	edx, 1E00h
		mov	ecx, ebp
		and	esi, 6000000h
		and	ecx, 180h
		or	edx, ecx
		mov	ecx, ebp
		and	ecx, 1E00000h
		shr	edx, 7
		or	esi, ecx
		mov	ecx, ebp
		shr	ecx, 0Fh
		and	ecx, 3Fh
		shr	esi, 15h
		mov	edi, dword_684[edx*4]
		movzx	edx, bx
		shr	ebx, 10h
		or	edi, dword_884[esi*4]
		or	edi, dword_784[ecx*4]
		mov	ecx, ebp
		and	ecx, 3Fh
		or	edi, dword_584[ecx*4]
		mov	ecx, edi
		and	edi, 0FFFF0000h
		shl	ecx, 10h
		or	ebx, edi
		or	edx, ecx
		ror	ebx, 1Ah
		mov	ecx, [esp+10h+arg_4]
		ror	edx, 1Eh
		mov	[ecx], edx
		mov	[ecx+4], ebx
		add	ecx, 8
		mov	[esp+10h+arg_4], ecx
		mov	ecx, [esp+10h+arg_0]
		add	ecx, 4
		mov	[esp+10h+arg_0], ecx
		cmp	ecx, (offset byte_9C3+1)
		jl	loc_BAD
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_DES_set_key_unchecked endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_set_odd_parity
_DES_set_odd_parity proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		movzx	eax, byte ptr [ecx]
		movzx	eax, _odd_parity[eax]
		mov	[ecx], al
		movzx	eax, byte ptr [ecx+1]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+1], al
		movzx	eax, byte ptr [ecx+2]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+2], al
		movzx	eax, byte ptr [ecx+3]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+3], al
		movzx	eax, byte ptr [ecx+4]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+4], al
		movzx	eax, byte ptr [ecx+5]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+5], al
		movzx	eax, byte ptr [ecx+6]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+6], al
		movzx	eax, byte ptr [ecx+7]
		movzx	eax, _odd_parity[eax]
		mov	[ecx+7], al
		retn
_DES_set_odd_parity endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public __shadow_DES_check_key
__shadow_DES_check_key proc near
		mov	eax, offset ?_hide_DES_check_key@?1??_shadow_DES_check_key@@9@9	; `_shadow_DES_check_key'::`2'::_hide_DES_check_key
		retn
__shadow_DES_check_key endp

_text$mn	ends


		end
