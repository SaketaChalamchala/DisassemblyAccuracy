;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D23E5860F49B1B0BB1F0094FB7D053C4
; Input	CRC32 :	D1F0E7FB

; File Name   :	C:\compspace\Diff\openssl\obj\o_str.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OPENSSL_memcmp
_OPENSSL_memcmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_8]
		mov	eax, [esp+arg_0]
		test	edx, edx
		jz	short loc_2A
		push	edi
		mov	edi, [esp+4+arg_4]
		sub	edi, eax
		push	esi

loc_14:					; CODE XREF: _OPENSSL_memcmp+23j
		movzx	ecx, byte ptr [edi+eax]
		movzx	esi, byte ptr [eax]
		sub	esi, ecx
		jnz	short loc_25
		inc	eax
		sub	edx, 1
		jnz	short loc_14

loc_25:					; CODE XREF: _OPENSSL_memcmp+1Dj
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_2A:					; CODE XREF: _OPENSSL_memcmp+Aj
		xor	eax, eax
		retn
_OPENSSL_memcmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl OPENSSL_strcasecmp(const char *Str1, const char *Str2)
		public _OPENSSL_strcasecmp
_OPENSSL_strcasecmp proc near
		jmp	dword ptr ds:__imp___stricmp
_OPENSSL_strcasecmp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 38h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl OPENSSL_strncasecmp(const	char *Str1, const char *Str2, size_t MaxCount)
		public _OPENSSL_strncasecmp
_OPENSSL_strncasecmp proc near
		jmp	dword ptr ds:__imp___strnicmp
_OPENSSL_strncasecmp endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl __stricmp(const char *Str1, const	char *Str2)
		extrn __imp___stricmp:near ; DATA XREF:	_OPENSSL_strcasecmpr
; int __cdecl __strnicmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp___strnicmp:near ; DATA XREF: _OPENSSL_strncasecmpr


		end
