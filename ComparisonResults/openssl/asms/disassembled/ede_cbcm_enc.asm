;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	09E631A5E0BC76530C83A1CE06768D2C
; Input	CRC32 :	77C1B0D9

; File Name   :	C:\compspace\Diff\openssl\obj\ede_cbcm_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_ede3_cbcm_encrypt
_DES_ede3_cbcm_encrypt proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 20h ; ' '
		call	__chkstk
		cmp	[esp+20h+arg_20], 0
		mov	eax, [esp+20h+arg_18]
		push	ebx
		push	ebp
		push	esi
		push	edi
		jz	loc_2E1
		movzx	ebx, byte ptr [eax]
		lea	edi, [eax+1]
		mov	edx, edi
		mov	[esp+30h+var_18], edi
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ebx, eax
		movzx	ebp, byte ptr [edx+3]
		movzx	eax, byte ptr [edx+1]
		movzx	ecx, byte ptr [edx+6]
		shl	eax, 10h
		or	ebx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebp, eax
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		mov	eax, [esp+30h+arg_1C]
		lea	edx, [eax+1]
		shl	ecx, 10h
		movzx	esi, byte ptr [edx+3]
		or	ebp, ecx
		mov	[esp+30h+arg_20], ebp
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		mov	[esp+30h+var_1C], ecx
		or	esi, eax
		movzx	ecx, byte ptr [edx+6]
		movzx	eax, byte ptr [edx+5]
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [esp+30h+arg_8]
		shl	ecx, 10h
		add	eax, 0FFFFFFF8h
		or	esi, ecx
		mov	[esp+30h+arg_8], eax
		mov	[esp+30h+var_20], esi
		cmp	eax, 0FFFFFFF9h
		jl	loc_262
		mov	edi, [esp+30h+arg_4]
		add	eax, 7
		mov	esi, [esp+30h+arg_0]
		mov	[esp+30h+arg_20], eax

loc_D4:					; CODE XREF: _DES_ede3_cbcm_encrypt+252j
		push	1
		push	[esp+34h+arg_14]
		lea	eax, [esp+38h+var_8]
		mov	[esp+38h+var_8], ebx
		push	eax
		mov	[esp+3Ch+var_4], ebp
		call	_DES_encrypt1
		mov	eax, [esp+3Ch+arg_8]
		add	esp, 0Ch
		mov	ebx, [esp+30h+var_8]
		mov	ebp, [esp+30h+var_4]
		test	eax, eax
		jns	short loc_164
		add	eax, 8
		xor	ecx, ecx
		add	esi, eax
		xor	edx, edx
		mov	eax, [esp+30h+arg_20]
		cmp	eax, 7		; switch 8 cases
		ja	loc_1A4		; jumptable 00000115 default case
		jmp	ds:$LN45[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	ecx, byte ptr [esi-1] ;	jumptable 00000115 case	7
		dec	esi
		shl	ecx, 18h

$LN17:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	eax, byte ptr [esi-1] ;	jumptable 00000115 case	6
		dec	esi
		shl	eax, 10h
		or	ecx, eax

$LN18:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	eax, byte ptr [esi-1] ;	jumptable 00000115 case	5
		dec	esi
		shl	eax, 8
		or	ecx, eax

$LN19:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	eax, byte ptr [esi-1] ;	jumptable 00000115 case	4
		dec	esi
		or	ecx, eax

$LN20:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	edx, byte ptr [esi-1] ;	jumptable 00000115 case	3
		dec	esi
		shl	edx, 18h

$LN21:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	eax, byte ptr [esi-1] ;	jumptable 00000115 case	2
		dec	esi
		shl	eax, 10h
		or	edx, eax

$LN22:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	eax, byte ptr [esi-1] ;	jumptable 00000115 case	1
		dec	esi
		shl	eax, 8
		or	edx, eax

$LN23:					; CODE XREF: _DES_ede3_cbcm_encrypt+115j
					; DATA XREF: .text$mn:$LN45o
		movzx	eax, byte ptr [esi-1] ;	jumptable 00000115 case	0
		dec	esi
		or	edx, eax
		jmp	short loc_1A4	; jumptable 00000115 default case
; ---------------------------------------------------------------------------

loc_164:				; CODE XREF: _DES_ede3_cbcm_encrypt+FDj
		movzx	eax, byte ptr [esi+1]
		movzx	edx, byte ptr [esi]
		movzx	ecx, byte ptr [esi+4]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+2]
		shl	eax, 10h
		or	edx, eax
		movzx	eax, byte ptr [esi+3]
		shl	eax, 18h
		or	edx, eax
		movzx	eax, byte ptr [esi+5]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+6]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esi+7]
		shl	eax, 18h
		or	ecx, eax
		add	esi, 8

loc_1A4:				; CODE XREF: _DES_ede3_cbcm_encrypt+10Fj
					; _DES_ede3_cbcm_encrypt+162j
		xor	edx, [esp+30h+var_1C] ;	jumptable 00000115 default case
		lea	eax, [esp+30h+var_8]
		xor	ecx, [esp+30h+var_20]
		push	1
		push	[esp+34h+arg_C]
		mov	[esp+38h+var_8], edx
		push	eax
		mov	[esp+3Ch+var_4], ecx
		call	_DES_encrypt1
		xor	[esp+3Ch+var_8], ebx
		lea	eax, [esp+3Ch+var_8]
		xor	[esp+3Ch+var_4], ebp
		push	0
		push	[esp+40h+arg_10]
		push	eax
		call	_DES_encrypt1
		xor	[esp+48h+var_8], ebx
		lea	eax, [esp+48h+var_8]
		xor	[esp+48h+var_4], ebp
		push	1
		push	[esp+4Ch+arg_C]
		push	eax
		call	_DES_encrypt1
		mov	edx, [esp+54h+var_8]
		add	esp, 24h
		mov	ecx, [esp+30h+var_4]
		mov	eax, edx
		shr	eax, 8
		mov	[edi], dl
		mov	[edi+1], al
		mov	eax, edx
		shr	eax, 10h
		mov	[edi+2], al
		mov	eax, edx
		sub	[esp+30h+arg_20], 8
		shr	eax, 18h
		mov	[edi+3], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edi+4], cl
		mov	[edi+5], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi+6], al
		mov	eax, ecx
		shr	eax, 18h
		mov	[edi+7], al
		add	edi, 8
		mov	eax, [esp+30h+arg_8]
		sub	eax, 8
		mov	[esp+30h+var_1C], edx
		mov	[esp+30h+var_20], ecx
		mov	[esp+30h+arg_8], eax
		cmp	eax, 0FFFFFFF9h
		jge	loc_D4
		mov	edi, [esp+30h+var_18]
		mov	[esp+30h+arg_20], ebp
		jmp	short loc_266
; ---------------------------------------------------------------------------

loc_262:				; CODE XREF: _DES_ede3_cbcm_encrypt+BFj
		mov	edx, [esp+30h+var_1C]

loc_266:				; CODE XREF: _DES_ede3_cbcm_encrypt+260j
		mov	eax, [esp+30h+arg_18]
		mov	ecx, [esp+30h+arg_20]
		mov	[eax], bl
		mov	eax, ebx
		shr	eax, 8
		mov	[edi], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[edi+1], al
		mov	eax, ecx
		shr	eax, 8
		shr	ebx, 18h
		mov	[edi+2], bl
		mov	[edi+3], cl
		mov	[edi+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi+5], al
		mov	eax, edx
		shr	ecx, 18h
		mov	[edi+6], cl
		mov	ecx, [esp+30h+arg_1C]
		lea	ebx, [ecx+1]
		shr	eax, 8
		pop	edi
		pop	esi
		mov	[ecx], dl
		mov	ecx, [esp+28h+var_20]
		mov	[ebx], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ebx+1], al
		mov	eax, ecx
		shr	edx, 18h
		mov	[ebx+2], dl
		mov	[ebx+3], cl
		shr	eax, 8
		mov	[ebx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx+5], al
		shr	ecx, 18h
		pop	ebp
		mov	[ebx+6], cl
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_2E1:				; CODE XREF: _DES_ede3_cbcm_encrypt+17j
		movzx	ecx, byte ptr [eax]
		lea	esi, [eax+1]
		mov	edx, esi
		mov	edi, [esp+30h+arg_8]
		add	edi, 0FFFFFFF8h
		mov	[esp+30h+var_10], esi
		movzx	eax, byte ptr [edx]
		movzx	ebx, byte ptr [edx+3]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebx, eax
		mov	[esp+30h+arg_20], ecx
		movzx	ecx, byte ptr [edx+6]
		movzx	eax, byte ptr [edx+5]
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [esp+30h+arg_1C]
		shl	ecx, 10h
		or	ebx, ecx
		mov	[esp+30h+var_20], ebx
		movzx	ebx, byte ptr [eax]
		lea	ebp, [eax+1]
		mov	edx, ebp
		mov	[esp+30h+var_C], ebp
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edx+3]
		shl	eax, 8
		or	ebx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ebx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ecx, eax
		mov	[esp+30h+var_18], ebx
		movzx	eax, byte ptr [edx+5]
		mov	[esp+30h+var_1C], ecx
		movzx	ecx, byte ptr [edx+6]
		mov	edx, [esp+30h+var_1C]
		shl	ecx, 8
		or	ecx, eax
		shl	ecx, 10h
		or	edx, ecx
		mov	[esp+30h+var_1C], edx
		cmp	edi, 0FFFFFFF9h
		jl	loc_530
		mov	esi, [esp+30h+arg_4]
		lea	ebp, [edi+7]
		mov	ebx, [esp+30h+arg_0]

loc_3A2:				; CODE XREF: _DES_ede3_cbcm_encrypt+520j
		mov	eax, [esp+30h+arg_20]
		mov	[esp+30h+var_8], eax
		mov	eax, [esp+30h+var_20]
		push	1
		push	[esp+34h+arg_14]
		mov	[esp+38h+var_4], eax
		lea	eax, [esp+38h+var_8]
		push	eax
		call	_DES_encrypt1
		mov	eax, [esp+3Ch+var_8]
		lea	ebx, [ebx+8]
		movzx	ecx, byte ptr [ebx-8]
		mov	[esp+3Ch+arg_20], eax
		mov	eax, [esp+3Ch+var_4]
		movzx	edx, byte ptr [ebx-4]
		mov	[esp+3Ch+var_20], eax
		movzx	eax, byte ptr [ebx-7]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx-6]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [ebx-5]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [ebx-3]
		shl	eax, 8
		or	edx, eax
		mov	[esp+3Ch+arg_8], ecx
		movzx	eax, byte ptr [ebx-2]
		shl	eax, 10h
		or	edx, eax
		mov	[esp+3Ch+var_8], ecx
		movzx	eax, byte ptr [ebx-1]
		shl	eax, 18h
		or	edx, eax
		lea	eax, [esp+3Ch+var_8]
		push	0
		push	[esp+40h+arg_C]
		mov	[esp+44h+var_14], edx
		push	eax
		mov	[esp+48h+var_4], edx
		call	_DES_encrypt1
		mov	eax, [esp+48h+arg_20]
		xor	[esp+48h+var_8], eax
		mov	eax, [esp+48h+var_20]
		xor	[esp+48h+var_4], eax
		lea	eax, [esp+48h+var_8]
		push	1
		push	[esp+4Ch+arg_10]
		push	eax
		call	_DES_encrypt1
		mov	eax, [esp+54h+arg_20]
		xor	[esp+54h+var_8], eax
		mov	eax, [esp+54h+var_20]
		xor	[esp+54h+var_4], eax
		lea	eax, [esp+54h+var_8]
		push	0
		push	[esp+58h+arg_C]
		push	eax
		call	_DES_encrypt1
		mov	edx, [esp+60h+var_8]
		add	esp, 30h
		mov	ecx, [esp+30h+var_4]
		xor	edx, [esp+30h+var_18]
		xor	ecx, [esp+30h+var_1C]
		test	edi, edi
		jns	short loc_4D3
		add	esi, 8
		add	esi, edi
		cmp	ebp, 7		; switch 8 cases
		ja	short loc_507	; jumptable 00000494 default case
		jmp	ds:$LN46[ebp*4]	; switch jump
; ---------------------------------------------------------------------------

$LN26:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 7
		mov	eax, ecx
		shr	eax, 18h
		mov	[esi], al

$LN27:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 6
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi], al

$LN28:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 5
		mov	eax, ecx
		shr	eax, 8
		mov	[esi], al

$LN29:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 4
		mov	[esi], cl

$LN30:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 3
		mov	eax, edx
		shr	eax, 18h
		mov	[esi], al

$LN31:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 2
		mov	eax, edx
		shr	eax, 10h
		mov	[esi], al

$LN32:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 1
		mov	eax, edx
		shr	eax, 8
		mov	[esi], al

$LN33:					; CODE XREF: _DES_ede3_cbcm_encrypt+494j
					; DATA XREF: .text$mn:$LN46o
		dec	esi		; jumptable 00000494 case 0
		mov	[esi], dl
		jmp	short loc_507	; jumptable 00000494 default case
; ---------------------------------------------------------------------------

loc_4D3:				; CODE XREF: _DES_ede3_cbcm_encrypt+488j
		mov	[esi], dl
		mov	eax, edx
		shr	eax, 8
		mov	[esi+1], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+2], al
		mov	eax, ecx
		shr	edx, 18h
		mov	[esi+3], dl
		mov	[esi+4], cl
		shr	eax, 8
		mov	[esi+5], al
		mov	eax, ecx
		shr	eax, 10h
		shr	ecx, 18h
		mov	[esi+6], al
		mov	[esi+7], cl
		add	esi, 8

loc_507:				; CODE XREF: _DES_ede3_cbcm_encrypt+492j
					; _DES_ede3_cbcm_encrypt+4D1j
		mov	eax, [esp+30h+arg_8] ; jumptable 00000494 default case
		sub	edi, 8
		mov	edx, [esp+30h+var_14]
		sub	ebp, 8
		mov	[esp+30h+var_18], eax
		mov	[esp+30h+var_1C], edx
		cmp	edi, 0FFFFFFF9h
		jge	loc_3A2
		mov	esi, [esp+30h+var_10]
		mov	ebx, eax
		mov	ebp, [esp+30h+var_C]

loc_530:				; CODE XREF: _DES_ede3_cbcm_encrypt+391j
		mov	eax, [esp+30h+arg_18]
		mov	ecx, [esp+30h+arg_20]
		pop	edi
		mov	[eax], cl
		mov	eax, ecx
		shr	eax, 8
		mov	[esi], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+1], al
		shr	ecx, 18h
		mov	[esi+2], cl
		mov	ecx, [esp+2Ch+var_20]
		mov	eax, ecx
		shr	eax, 8
		mov	[esi+3], cl
		mov	[esi+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+5], al
		mov	eax, [esp+2Ch+arg_1C]
		shr	ecx, 18h
		mov	[esi+6], cl
		pop	esi
		mov	[eax], bl
		mov	eax, ebx
		shr	eax, 8
		mov	[ebp+0], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ebp+1], al
		mov	eax, edx
		shr	ebx, 18h
		mov	[ebp+2], bl
		mov	[ebp+3], dl
		shr	eax, 8
		mov	[ebp+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ebp+5], al
		shr	edx, 18h
		mov	[ebp+6], dl
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
_DES_ede3_cbcm_encrypt endp

; ---------------------------------------------------------------------------
		align 4
$LN45		dd offset $LN23		; DATA XREF: _DES_ede3_cbcm_encrypt+115r
		dd offset $LN22		; jump table for switch	statement
		dd offset $LN21
		dd offset $LN20
		dd offset $LN19
		dd offset $LN18
		dd offset $LN17
		dd offset $LN16
$LN46		dd offset $LN33		; DATA XREF: _DES_ede3_cbcm_encrypt+494r
		dd offset $LN32		; jump table for switch	statement
		dd offset $LN31
		dd offset $LN30
		dd offset $LN29
		dd offset $LN28
		dd offset $LN27
		dd offset $LN26
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_ede3_cbcm_encrypt+E7p
					; _DES_ede3_cbcm_encrypt+1BFp ...
		extrn __chkstk:near	; CODE XREF: _DES_ede3_cbcm_encrypt+5p


		end
