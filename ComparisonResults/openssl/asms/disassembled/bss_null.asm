;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	17A1F355A157E588E9AE77D62CC8283F
; Input	CRC32 :	69AB6C7A

; File Name   :	C:\compspace\Diff\openssl\obj\bss_null.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_write	proc near		; DATA XREF: .data:00000098o

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		retn
_null_write	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_read	proc near		; DATA XREF: .data:0000009Co
		xor	eax, eax
		retn
_null_read	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_puts	proc near		; DATA XREF: .data:000000A0o

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_15
		retn
; ---------------------------------------------------------------------------

loc_15:					; CODE XREF: _null_puts+6j
		lea	edx, [eax+1]
		nop	dword ptr [eax+00h]

loc_1C:					; CODE XREF: _null_puts+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1C
		sub	eax, edx
		retn
_null_puts	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_gets	proc near		; DATA XREF: .data:000000A4o
		xor	eax, eax
		retn
_null_gets	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_ctrl	proc near		; DATA XREF: .data:000000A8o

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		dec	eax
		cmp	eax, 0Bh	; switch 12 cases
		ja	short $LN5	; jumptable 0000003D default case
		movzx	eax, ds:$LN7[eax]
		jmp	ds:$LN9[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _null_ctrl+11j
					; DATA XREF: .text$mn:$LN9o
		mov	eax, 1		; jumptable 0000003D cases 0,1,3,8,10,11
		retn
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _null_ctrl+8j
					; _null_ctrl+11j
					; DATA XREF: ...
		xor	eax, eax	; jumptable 0000003D default case
		retn
_null_ctrl	endp

; ---------------------------------------------------------------------------
		align 10h
$LN9		dd offset $LN4		; DATA XREF: _null_ctrl+11r
		dd offset $LN5		; jump table for switch	statement
$LN7		db	0,     0,     1,     0 ; DATA XREF: _null_ctrl+Ar
		db	1,     1,     1,     1 ; indirect table	for switch statement
		db	0,     1,     0,     0
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_new	proc near		; DATA XREF: .data:000000ACo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+0Ch], 1
		mov	dword ptr [eax+1Ch], 0
		mov	dword ptr [eax+20h], 0
		mov	eax, 1
		retn
_null_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_null_free	proc near		; DATA XREF: .data:000000B0o

arg_0		= dword	ptr  4

		xor	eax, eax
		cmp	[esp+arg_0], eax
		setnz	al
		retn
_null_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 90h
_null_method	dd 406h			; DATA XREF: _BIO_s_nullo
		dd offset ??_C@_04HIBGFPH@NULL?$AA@ ; "NULL"
		dd offset _null_write
		dd offset _null_read
		dd offset _null_puts
		dd offset _null_gets
		dd offset _null_ctrl
		dd offset _null_new
		dd offset _null_free
		align 8
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
; COMDAT (pick any)
		public ??_C@_04HIBGFPH@NULL?$AA@
; `string'
??_C@_04HIBGFPH@NULL?$AA@ db 'NULL',0   ; DATA XREF: .data:00000094o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_s_null
_BIO_s_null	proc near
		mov	eax, offset _null_method
		retn
_BIO_s_null	endp

_text$mn	ends


		end
