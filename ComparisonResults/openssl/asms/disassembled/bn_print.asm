;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BCE2B5DC022542280576E57C490FFC3E
; Input	CRC32 :	6123C837

; File Name   :	C:\compspace\Diff\openssl\obj\bn_print.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_Hex		db 30h			; DATA XREF: _BN_bn2hex+B7r
					; _BN_bn2hex+BFr ...
a123456789abcde	db '123456789ABCDEF',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 14h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; `BN_options'::`2'::init
?init@?1??BN_options@@9@9 dd ?		; DATA XREF: _BN_optionsr
					; _BN_options+19w
; `BN_options'::`2'::data
?data@?1??BN_options@@9@9 dd 4 dup(?)	; DATA XREF: _BN_options+14o
					; _BN_options:loc_68Bo
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_asc2bn
_BN_asc2bn	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	eax, esi
		push	edi
		cmp	byte ptr [esi],	2Dh ; '-'
		jnz	short loc_38
		lea	eax, [esi+1]

loc_38:					; CODE XREF: _BN_asc2bn+Bj
		cmp	byte ptr [eax],	30h ; '0'
		jnz	short loc_62
		mov	cl, [eax+1]
		cmp	cl, 58h	; 'X'
		jz	short loc_4A
		cmp	cl, 78h	; 'x'
		jnz	short loc_62

loc_4A:					; CODE XREF: _BN_asc2bn+1Bj
		mov	edi, [esp+8+arg_0]
		add	eax, 2
		push	eax
		push	edi
		call	_BN_hex2bn
		add	esp, 8
		test	eax, eax
		jnz	short loc_77
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_62:					; CODE XREF: _BN_asc2bn+13j
					; _BN_asc2bn+20j
		mov	edi, [esp+8+arg_0]
		push	eax
		push	edi
		call	_BN_dec2bn
		add	esp, 8
		test	eax, eax
		jnz	short loc_77
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_77:					; CODE XREF: _BN_asc2bn+35j
					; _BN_asc2bn+4Aj
		cmp	byte ptr [esi],	2Dh ; '-'
		jnz	short loc_85
		mov	eax, [edi]
		mov	dword ptr [eax+0Ch], 1

loc_85:					; CODE XREF: _BN_asc2bn+52j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_BN_asc2bn	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_bn2dec
_BN_bn2dec	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	[esp+1Ch+arg_0]
		xor	ebx, ebx
		call	_BN_num_bits
		push	7Ch ; '|'
		push	offset ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ ; ".\\crypto\\bn\\bn_print.c"
		lea	esi, [eax+eax*2]
		mov	eax, 10624DD3h
		imul	esi
		mov	eax, 66666667h
		sar	edx, 6
		mov	ebp, edx
		shr	ebp, 1Fh
		add	ebp, edx
		imul	esi
		sar	edx, 2
		mov	eax, edx
		add	ebp, edx
		shr	eax, 1Fh
		add	eax, 2
		add	ebp, eax
		mov	eax, 38E38E39h
		imul	ebp
		mov	[esp+28h+var_8], ebp
		sar	edx, 1
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		lea	eax, ds:4[eax*4]
		push	eax
		call	_CRYPTO_malloc
		push	7Dh ; '}'
		lea	ecx, [ebp+3]
		mov	edi, eax
		push	offset ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ ; ".\\crypto\\bn\\bn_print.c"
		push	ecx
		mov	[esp+38h+var_C], edi
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 1Ch
		test	ebp, ebp
		jz	loc_1FE
		test	edi, edi
		jz	loc_1FE
		push	[esp+1Ch+arg_0]
		call	_BN_dup
		mov	ebx, eax
		add	esp, 4
		mov	[esp+1Ch+var_4], ebx
		test	ebx, ebx
		jz	loc_213
		cmp	dword ptr [ebx+4], 0
		mov	esi, ebp
		jnz	short loc_158
		mov	word ptr [ebp+0], 30h ;	'0'
		mov	esi, 1
		jmp	$err$39
; ---------------------------------------------------------------------------

loc_158:				; CODE XREF: _BN_bn2dec+B6j
		cmp	dword ptr [ebx+0Ch], 0
		jz	short loc_165
		mov	byte ptr [ebp+0], 2Dh ;	'-'
		lea	esi, [ebp+1]

loc_165:				; CODE XREF: _BN_bn2dec+CCj
		cmp	dword ptr [ebx+4], 0
		jz	short loc_189
		nop	dword ptr [eax+eax+00h]

loc_170:				; CODE XREF: _BN_bn2dec+F7j
		push	3B9ACA00h
		push	ebx
		call	_BN_div_word
		mov	[edi], eax
		add	esp, 8
		add	edi, 4
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_170

loc_189:				; CODE XREF: _BN_bn2dec+D9j
		push	dword ptr [edi-4]
		mov	eax, [esp+20h+var_8]
		sub	edi, 4
		sub	eax, esi
		add	eax, 3
		push	offset ??_C@_02GMHACPFF@?$CFu?$AA@ ; `string'
		add	eax, ebp
		push	eax
		push	esi
		call	_BIO_snprintf
		add	esp, 10h
		cmp	byte ptr [esi],	0
		jz	short loc_1B6
		xchg	ax, ax

loc_1B0:				; CODE XREF: _BN_bn2dec+124j
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_1B0

loc_1B6:				; CODE XREF: _BN_bn2dec+11Cj
		cmp	edi, [esp+1Ch+var_C]
		jz	short loc_1F3
		mov	ebx, [esp+1Ch+var_C]

loc_1C0:				; CODE XREF: _BN_bn2dec+15Dj
		push	dword ptr [edi-4]
		mov	eax, [esp+20h+var_8]
		sub	edi, 4
		sub	eax, esi
		add	eax, 3
		push	offset ??_C@_04LJCFADJL@?$CF09u?$AA@ ; "%09u"
		add	eax, ebp
		push	eax
		push	esi
		call	_BIO_snprintf
		add	esp, 10h
		cmp	byte ptr [esi],	0
		jz	short loc_1EB

loc_1E5:				; CODE XREF: _BN_bn2dec+159j
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_1E5

loc_1EB:				; CODE XREF: _BN_bn2dec+153j
		cmp	edi, ebx
		jnz	short loc_1C0
		mov	ebx, [esp+1Ch+var_4]

loc_1F3:				; CODE XREF: _BN_bn2dec+12Aj
		mov	edi, [esp+1Ch+var_C]
		mov	esi, 1
		jmp	short $err$39
; ---------------------------------------------------------------------------

loc_1FE:				; CODE XREF: _BN_bn2dec+88j
					; _BN_bn2dec+90j
		push	7Fh ; ''
		push	offset ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ ; ".\\crypto\\bn\\bn_print.c"
		push	41h ; 'A'
		push	68h ; 'h'
		push	3
		call	_ERR_put_error
		add	esp, 14h

loc_213:				; CODE XREF: _BN_bn2dec+AAj
		xor	esi, esi

$err$39:				; CODE XREF: _BN_bn2dec+C3j
					; _BN_bn2dec+16Cj
		test	edi, edi
		jz	short loc_222
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_222:				; CODE XREF: _BN_bn2dec+187j
		test	ebx, ebx
		jz	short loc_22F
		push	ebx
		call	_BN_free
		add	esp, 4

loc_22F:				; CODE XREF: _BN_bn2dec+194j
		test	esi, esi
		jnz	short loc_24A
		test	ebp, ebp
		jz	short loc_24A
		push	ebp
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_24A:				; CODE XREF: _BN_bn2dec+1A1j
					; _BN_bn2dec+1A5j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_BN_bn2dec	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 254h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_bn2hex
_BN_bn2hex	proc near

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ebx, ebx
		push	esi
		cmp	[ebp+0Ch], ebx
		jz	short loc_27D
		cmp	[ebp+4], ebx
		jnz	short loc_27D
		push	4Dh ; 'M'
		push	offset ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ ; ".\\crypto\\bn\\bn_print.c"
		push	3
		call	_CRYPTO_malloc
		mov	esi, eax
		mov	[esp+18h+arg_0], esi
		jmp	short loc_29A
; ---------------------------------------------------------------------------

loc_27D:				; CODE XREF: _BN_bn2hex+Cj
					; _BN_bn2hex+11j
		mov	eax, [ebp+4]
		push	4Fh ; 'O'
		push	offset ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ ; ".\\crypto\\bn\\bn_print.c"
		lea	eax, ds:2[eax*8]
		push	eax
		call	_CRYPTO_malloc
		mov	esi, eax
		mov	[esp+18h+arg_0], eax

loc_29A:				; CODE XREF: _BN_bn2hex+27j
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_2BC
		push	52h ; 'R'
		push	offset ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ ; ".\\crypto\\bn\\bn_print.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi

$err$27:
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2BC:				; CODE XREF: _BN_bn2hex+4Bj
		mov	edx, esi
		cmp	[ebp+0Ch], ebx
		jz	short loc_2C9
		mov	byte ptr [esi],	2Dh ; '-'
		lea	edx, [esi+1]

loc_2C9:				; CODE XREF: _BN_bn2hex+6Dj
		cmp	[ebp+4], ebx
		jnz	short loc_2D2
		mov	byte ptr [edx],	30h ; '0'
		inc	edx

loc_2D2:				; CODE XREF: _BN_bn2hex+78j
		push	edi
		mov	edi, [ebp+4]
		sub	edi, 1
		js	short loc_32D
		nop	word ptr [eax+eax+00000000h]

loc_2E4:				; CODE XREF: _BN_bn2hex+D3j
		mov	esi, 18h

loc_2E9:				; CODE XREF: _BN_bn2hex+CEj
		mov	eax, [ebp+0]
		mov	ecx, esi
		mov	eax, [eax+edi*4]
		shr	eax, cl
		movzx	eax, al
		test	ebx, ebx
		jnz	short loc_2FE
		test	eax, eax
		jz	short loc_31F

loc_2FE:				; CODE XREF: _BN_bn2hex+A4j
		mov	ecx, eax
		mov	ebx, 1
		sar	ecx, 4
		and	eax, 0Fh
		mov	cl, _Hex[ecx]
		mov	[edx], cl
		mov	al, _Hex[eax]
		mov	[edx+1], al
		add	edx, 2

loc_31F:				; CODE XREF: _BN_bn2hex+A8j
		sub	esi, 8
		jns	short loc_2E9
		sub	edi, 1
		jns	short loc_2E4
		mov	esi, [esp+10h+arg_0]

loc_32D:				; CODE XREF: _BN_bn2hex+85j
		mov	byte ptr [edx],	0
		mov	eax, esi
		pop	edi

$err_1$28:
		pop	esi
		pop	ebp
		pop	ebx
		retn
_BN_bn2hex	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 338h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_dec2bn
_BN_dec2bn	proc near		; CODE XREF: _BN_asc2bn+40p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	esi
		xor	esi, esi
		mov	[esp+0Ch+var_4], esi
		test	ebx, ebx
		jz	loc_4B6
		mov	al, [ebx]
		test	al, al
		jz	loc_4B6
		cmp	al, 2Dh	; '-'
		jnz	short loc_36D
		mov	[esp+0Ch+var_4], 1
		inc	ebx

loc_36D:				; CODE XREF: _BN_dec2bn+2Aj
		push	edi
		xor	edi, edi
		push	ebp
		nop	dword ptr [eax+00000000h]

loc_378:				; CODE XREF: _BN_dec2bn+5Dj
		movzx	eax, byte ptr [edi+ebx]
		push	eax		; C
		call	dword ptr ds:__imp__isdigit
		mov	ebp, [esp+18h+arg_0]
		add	esp, 4
		test	eax, eax
		jz	short loc_3AE
		inc	edi
		cmp	edi, 1FFFFFFFh
		jle	short loc_378

$err$44:				; CODE XREF: _BN_dec2bn+7Cj
					; _BN_dec2bn+BBj ...
		cmp	dword ptr [ebp+0], 0
		jnz	short loc_3A6
		push	esi
		call	_BN_free
		add	esp, 4

loc_3A6:				; CODE XREF: _BN_dec2bn+63j
		xor	eax, eax

loc_3A8:				; CODE XREF: _BN_dec2bn+8Aj
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3AE:				; CODE XREF: _BN_dec2bn+54j
		cmp	edi, 1FFFFFFFh
		jg	short $err$44
		mov	eax, [esp+14h+var_4]
		add	eax, edi
		mov	[esp+14h+arg_4], eax
		test	ebp, ebp
		jz	short loc_3A8
		mov	esi, [ebp+0]
		test	esi, esi
		jnz	short loc_3DC
		call	_BN_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_3E7
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3DC:				; CODE XREF: _BN_dec2bn+91j
		push	0
		push	esi
		call	_BN_set_word
		add	esp, 8

loc_3E7:				; CODE XREF: _BN_dec2bn+9Cj
		lea	eax, ds:0[edi*4]
		cmp	eax, 7FFFFFE0h
		jg	short $err$44
		add	eax, 1Fh
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		cmp	eax, [esi+8]
		jg	short loc_40A
		mov	eax, esi
		jmp	short loc_414
; ---------------------------------------------------------------------------

loc_40A:				; CODE XREF: _BN_dec2bn+CCj
		push	eax
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_414:				; CODE XREF: _BN_dec2bn+D0j
		test	eax, eax
		jz	$err$44
		mov	eax, 38E38E39h
		imul	edi
		sar	edx, 1
		mov	eax, edx
		inc	edx
		shr	eax, 1Fh
		add	eax, edx
		lea	edx, [eax+eax*8]
		xor	eax, eax
		sub	edx, edi
		cmp	edx, 9
		cmovz	edx, eax
		mov	al, [ebx]
		xor	edi, edi
		test	al, al
		jz	short loc_47C
		nop	word ptr [eax+eax+00h]

loc_448:				; CODE XREF: _BN_dec2bn+142j
		lea	edi, [edi+edi*4]
		movsx	eax, al
		inc	edx
		lea	edi, [edi-18h]
		lea	ebx, [ebx+1]
		lea	edi, [eax+edi*2]
		cmp	edx, 9
		jnz	short loc_476
		push	3B9ACA00h
		push	esi
		call	_BN_mul_word
		push	edi
		push	esi
		call	_BN_add_word
		add	esp, 10h
		xor	edi, edi
		xor	edx, edx

loc_476:				; CODE XREF: _BN_dec2bn+123j
		mov	al, [ebx]
		test	al, al
		jnz	short loc_448

loc_47C:				; CODE XREF: _BN_dec2bn+108j
		mov	ecx, [esi+4]
		mov	eax, [esp+14h+var_4]
		mov	[esi+0Ch], eax
		test	ecx, ecx
		jle	short loc_4A9
		mov	eax, [esi]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]
		nop	word ptr [eax+eax+00h]

loc_498:				; CODE XREF: _BN_dec2bn+16Cj
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_4A6
		dec	ecx
		test	ecx, ecx
		jg	short loc_498

loc_4A6:				; CODE XREF: _BN_dec2bn+167j
		mov	[esi+4], ecx

loc_4A9:				; CODE XREF: _BN_dec2bn+150j
		mov	eax, [esp+14h+arg_4]
		mov	[ebp+0], esi
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_4B6:				; CODE XREF: _BN_dec2bn+18j
					; _BN_dec2bn+22j
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
_BN_dec2bn	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_hex2bn
_BN_hex2bn	proc near		; CODE XREF: _BN_asc2bn+2Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		mov	ecx, [esp+0Ch+arg_4]
		push	ebx
		push	ebp
		xor	ebp, ebp
		xor	ebx, ebx
		mov	[esp+14h+var_8], ebp
		test	ecx, ecx
		jz	loc_655
		mov	al, [ecx]
		test	al, al
		jz	loc_655
		cmp	al, 2Dh	; '-'
		jnz	short loc_4F8
		mov	ebp, 1
		inc	ecx
		mov	[esp+14h+var_8], ebp
		mov	[esp+14h+arg_4], ecx

loc_4F8:				; CODE XREF: _BN_hex2bn+2Cj
		push	esi
		push	edi
		mov	edi, dword ptr ds:__imp__isxdigit
		xor	esi, esi

loc_502:				; CODE XREF: _BN_hex2bn+5Fj
		movzx	eax, byte ptr [esi+ecx]
		push	eax		; C
		call	edi ; __imp__isxdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_539
		mov	ecx, [esp+1Ch+arg_4]
		inc	esi
		cmp	esi, 1FFFFFFFh
		jle	short loc_502

$err$59:				; CODE XREF: _BN_hex2bn+83j
					; _BN_hex2bn+D0j ...
		mov	eax, [esp+1Ch+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_52F
		push	ebx
		call	_BN_free
		add	esp, 4

loc_52F:				; CODE XREF: _BN_hex2bn+68j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_539:				; CODE XREF: _BN_hex2bn+52j
		cmp	esi, 1FFFFFFFh
		jg	short $err$59
		mov	eax, [esp+1Ch+arg_0]
		lea	edi, [esi+ebp]
		mov	[esp+1Ch+var_4], edi
		test	eax, eax
		jz	loc_64B
		mov	ebx, [eax]
		mov	[esp+1Ch+var_C], ebx
		test	ebx, ebx
		jnz	short loc_575
		call	_BN_new
		mov	ebx, eax
		mov	[esp+1Ch+var_C], eax
		test	ebx, ebx
		jnz	short loc_580
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_575:				; CODE XREF: _BN_hex2bn+A0j
		push	0
		push	ebx
		call	_BN_set_word
		add	esp, 8

loc_580:				; CODE XREF: _BN_hex2bn+AFj
		lea	eax, ds:0[esi*4]
		cmp	eax, 7FFFFFE0h
		jg	short $err$59
		add	eax, 1Fh
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		cmp	eax, [ebx+8]
		jg	short loc_5A3
		mov	eax, ebx
		jmp	short loc_5AD
; ---------------------------------------------------------------------------

loc_5A3:				; CODE XREF: _BN_hex2bn+E1j
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_5AD:				; CODE XREF: _BN_hex2bn+E5j
		test	eax, eax
		jz	$err$59
		xor	ebp, ebp
		test	esi, esi
		jle	short loc_61E
		mov	eax, 8

loc_5C0:				; CODE XREF: _BN_hex2bn+15Cj
		cmp	esi, 8
		mov	ebx, esi
		mov	edi, esi
		cmovge	ebx, eax
		xor	edx, edx
		sub	edi, ebx
		add	edi, [esp+1Ch+arg_4]

loc_5D2:				; CODE XREF: _BN_hex2bn+146j
		movsx	ecx, byte ptr [edi]
		lea	eax, [ecx-30h]
		cmp	eax, 9
		jbe	short loc_5F9
		lea	eax, [ecx-61h]
		cmp	eax, 5
		ja	short loc_5EA
		lea	eax, [ecx-57h]
		jmp	short loc_5F9
; ---------------------------------------------------------------------------

loc_5EA:				; CODE XREF: _BN_hex2bn+127j
		lea	eax, [ecx-41h]
		cmp	eax, 5
		ja	short loc_5F7
		lea	eax, [ecx-37h]
		jmp	short loc_5F9
; ---------------------------------------------------------------------------

loc_5F7:				; CODE XREF: _BN_hex2bn+134j
		xor	eax, eax

loc_5F9:				; CODE XREF: _BN_hex2bn+11Fj
					; _BN_hex2bn+12Cj ...
		shl	edx, 4
		dec	ebx
		or	edx, eax
		inc	edi
		test	ebx, ebx
		jg	short loc_5D2
		mov	ebx, [esp+1Ch+var_C]
		sub	esi, 8
		mov	eax, [ebx]
		mov	[eax+ebp*4], edx
		inc	ebp
		mov	eax, 8
		test	esi, esi
		jg	short loc_5C0
		mov	edi, [esp+1Ch+var_4]

loc_61E:				; CODE XREF: _BN_hex2bn+FDj
		mov	[ebx+4], ebp
		test	ebp, ebp
		jle	short loc_63E
		mov	eax, [ebx]
		lea	ecx, [ebp-1]
		lea	ecx, [eax+ecx*4]

loc_62D:				; CODE XREF: _BN_hex2bn+17Dj
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_63B
		dec	ebp
		test	ebp, ebp
		jg	short loc_62D

loc_63B:				; CODE XREF: _BN_hex2bn+178j
		mov	[ebx+4], ebp

loc_63E:				; CODE XREF: _BN_hex2bn+167j
		mov	eax, [esp+1Ch+var_8]
		mov	[ebx+0Ch], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[eax], ebx

loc_64B:				; CODE XREF: _BN_hex2bn+92j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_655:				; CODE XREF: _BN_hex2bn+1Aj
					; _BN_hex2bn+24j
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
_BN_hex2bn	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 660h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_options
_BN_options	proc near
		cmp	ds:?init@?1??BN_options@@9@9, 0	; `BN_options'::`2'::init
		jnz	short loc_68B
		push	20h ; ' '
		push	40h ; '@'
		push	offset ??_C@_09OBPAFKHI@bn?$CI?$CFd?0?$CFd?$CJ?$AA@ ; "bn(%d,%d)"
		push	10h
		push	offset ?data@?1??BN_options@@9@9 ; `BN_options'::`2'::data
		mov	ds:?init@?1??BN_options@@9@9, 1	; `BN_options'::`2'::init
		call	_BIO_snprintf
		add	esp, 14h

loc_68B:				; CODE XREF: _BN_options+7j
		mov	eax, offset ?data@?1??BN_options@@9@9 ;	`BN_options'::`2'::data
		retn
_BN_options	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 694h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_print
_BN_print	proc near		; CODE XREF: _BN_print_fp+2Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		cmp	[eax+0Ch], edi
		jz	short loc_6C3
		push	1
		push	offset ??_C@_01JOAMLHOP@?9?$AA@	; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 1
		jz	short loc_6BF

loc_6BA:				; CODE XREF: _BN_print+47j
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6BF:				; CODE XREF: _BN_print+24j
		mov	eax, [esp+8+arg_4]

loc_6C3:				; CODE XREF: _BN_print+Fj
		cmp	[eax+4], edi
		jnz	short loc_6E1
		push	1
		push	offset ??_C@_01GBGANLPD@0?$AA@ ; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 1
		jnz	short loc_6BA
		mov	eax, [esp+8+arg_4]

loc_6E1:				; CODE XREF: _BN_print+32j
		push	ebx
		mov	ebx, [eax+4]
		sub	ebx, 1
		push	esi
		js	short loc_72F

loc_6EB:				; CODE XREF: _BN_print+99j
		mov	esi, 1Ch
		nop	dword ptr [eax+00h]

loc_6F4:				; CODE XREF: _BN_print+94j
		mov	eax, [eax]
		mov	ecx, esi
		mov	eax, [eax+ebx*4]
		shr	eax, cl
		and	eax, 0Fh
		test	edi, edi
		jnz	short loc_708
		test	eax, eax
		jz	short loc_721

loc_708:				; CODE XREF: _BN_print+6Ej
		push	1
		lea	eax, _Hex[eax]
		push	eax
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 1
		jnz	short loc_739
		mov	edi, eax

loc_721:				; CODE XREF: _BN_print+72j
		sub	esi, 4
		mov	eax, [esp+10h+arg_4]
		jns	short loc_6F4
		sub	ebx, 1
		jns	short loc_6EB

loc_72F:				; CODE XREF: _BN_print+55j
		pop	esi
		mov	eax, 1
		pop	ebx

$end$32:
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_739:				; CODE XREF: _BN_print+89j
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
_BN_print	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 740h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_print_fp
_BN_print_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_757
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_757:				; CODE XREF: _BN_print_fp+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_4]
		push	edi
		call	_BN_print
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 1Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_BN_print_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 780h
; COMDAT (pick any)
		public ??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@
; `string'
??_C@_0BH@HBJNKHOA@?4?2crypto?2bn?2bn_print?4c?$AA@ db '.\crypto\bn\bn_print.c',0
					; DATA XREF: _BN_bn2dec+1Bo
					; _BN_bn2dec+72o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 798h
; COMDAT (pick any)
		public ??_C@_02GMHACPFF@?$CFu?$AA@
; `string'
??_C@_02GMHACPFF@?$CFu?$AA@ db 25h, 75h, 0 ; DATA XREF:	_BN_bn2dec+108o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 79Ch
; COMDAT (pick any)
		public ??_C@_04LJCFADJL@?$CF09u?$AA@
; `string'
??_C@_04LJCFADJL@?$CF09u?$AA@ db '%09u',0 ; DATA XREF: _BN_bn2dec+13Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A4h
; COMDAT (pick any)
		public ??_C@_01JOAMLHOP@?9?$AA@
; `string'
??_C@_01JOAMLHOP@?9?$AA@ db 2Dh, 0	; DATA XREF: _BN_print+13o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A8h
; COMDAT (pick any)
		public ??_C@_01GBGANLPD@0?$AA@
; `string'
??_C@_01GBGANLPD@0?$AA@	db 30h,	0	; DATA XREF: _BN_print+36o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7ACh
; COMDAT (pick any)
		public ??_C@_09OBPAFKHI@bn?$CI?$CFd?0?$CFd?$CJ?$AA@
; `string'
??_C@_09OBPAFKHI@bn?$CI?$CFd?0?$CFd?$CJ?$AA@ db	'bn(%d,%d)',0 ; DATA XREF: _BN_options+Do
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _isdigit(int C)
		extrn __imp__isdigit:near ; CODE XREF: _BN_dec2bn+45p
					; DATA XREF: _BN_dec2bn+45r
; int __cdecl _isxdigit(int C)
		extrn __imp__isxdigit:near ; CODE XREF:	_BN_hex2bn+4Bp
					; DATA XREF: _BN_hex2bn+3Er
		extrn _CRYPTO_malloc:near ; CODE XREF: _BN_bn2dec+66p
					; _BN_bn2dec+7Cp ...
		extrn _CRYPTO_free:near	; CODE XREF: _BN_bn2dec+18Ap
					; _BN_bn2dec+1A8p
		extrn _BIO_s_file:near	; CODE XREF: _BN_print_fp+1p
		extrn _BIO_new:near	; CODE XREF: _BN_print_fp+7p
		extrn _BIO_free:near	; CODE XREF: _BN_print_fp+33p
		extrn _BIO_write:near	; CODE XREF: _BN_print+19p
					; _BN_print+3Cp ...
		extrn _BIO_ctrl:near	; CODE XREF: _BN_print_fp+21p
		extrn _BIO_snprintf:near ; CODE	XREF: _BN_bn2dec+111p
					; _BN_bn2dec+148p ...
		extrn _ERR_put_error:near ; CODE XREF: _BN_bn2dec+17Bp
					; _BN_bn2hex+5Ap
		extrn _BN_num_bits:near	; CODE XREF: _BN_bn2dec+14p
		extrn _BN_new:near	; CODE XREF: _BN_dec2bn+93p
					; _BN_hex2bn+A2p
		extrn _BN_div_word:near	; CODE XREF: _BN_bn2dec+E6p
		extrn _BN_mul_word:near	; CODE XREF: _BN_dec2bn+12Bp
		extrn _BN_add_word:near	; CODE XREF: _BN_dec2bn+132p
		extrn _BN_set_word:near	; CODE XREF: _BN_dec2bn+A7p
					; _BN_hex2bn+BCp
		extrn _BN_free:near	; CODE XREF: _BN_bn2dec+197p
					; _BN_dec2bn+66p ...
		extrn _BN_dup:near	; CODE XREF: _BN_bn2dec+9Ap
		extrn _bn_expand2:near	; CODE XREF: _BN_dec2bn+D4p
					; _BN_hex2bn+E9p
		extrn __chkstk:near	; CODE XREF: _BN_bn2dec+5p
					; _BN_dec2bn+5p ...


		end
