;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1E276A8165E40AFCC2DD4019497674B2
; Input	CRC32 :	3AE02A50

; File Name   :	C:\compspace\Diff\openssl\obj\tasn_typ.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_ANY_it
_ASN1_ANY_it	proc near		; DATA XREF: .rdata:00000184o
					; .rdata:000001B4o
		mov	eax, offset ?local_it@?1??ASN1_ANY_it@@9@9 ; `ASN1_ANY_it'::`2'::local_it
		retn
_ASN1_ANY_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
; `ASN1_GENERALIZEDTIME_it'::`2'::local_it
?local_it@?1??ASN1_GENERALIZEDTIME_it@@9@9 dd 0	; DATA XREF: _ASN1_GENERALIZEDTIME_freeo
					; _ASN1_GENERALIZEDTIME_ito ...
		dd 18h,	4 dup(0)
		dd offset ??_C@_0BF@MPJFOIHC@ASN1_GENERALIZEDTIME?$AA@ ; "ASN1_GENERALIZEDTIME"
; `ASN1_VISIBLESTRING_it'::`2'::local_it
?local_it@?1??ASN1_VISIBLESTRING_it@@9@9 dd 0 ;	DATA XREF: _ASN1_VISIBLESTRING_freeo
					; _ASN1_VISIBLESTRING_ito ...
		dd 1Ah,	4 dup(0)
		dd offset ??_C@_0BD@HMMCNBGD@ASN1_VISIBLESTRING?$AA@ ; "ASN1_VISIBLESTRING"
; `ASN1_UNIVERSALSTRING_it'::`2'::local_it
?local_it@?1??ASN1_UNIVERSALSTRING_it@@9@9 dd 0	; DATA XREF: _ASN1_UNIVERSALSTRING_freeo
					; _ASN1_UNIVERSALSTRING_ito ...
		dd 1Ch,	4 dup(0)
		dd offset ??_C@_0BF@DMDDFBNJ@ASN1_UNIVERSALSTRING?$AA@ ; "ASN1_UNIVERSALSTRING"
; `ASN1_BMPSTRING_it'::`2'::local_it
?local_it@?1??ASN1_BMPSTRING_it@@9@9 dd	0 ; DATA XREF: _ASN1_BMPSTRING_freeo
					; _ASN1_BMPSTRING_ito ...
		dd 1Eh,	4 dup(0)
		dd offset ??_C@_0P@CHICPHIN@ASN1_BMPSTRING?$AA@	; "ASN1_BMPSTRING"
; `ASN1_ANY_it'::`2'::local_it
?local_it@?1??ASN1_ANY_it@@9@9 dd 0	; DATA XREF: _ASN1_ANY_ito
					; _ASN1_TYPE_freeo ...
		dd 0FFFFFFFCh, 4 dup(0)
		dd offset ??_C@_08FIDCPDIJ@ASN1_ANY?$AA@ ; "ASN1_ANY"
; `ASN1_SEQUENCE_it'::`2'::local_it
?local_it@?1??ASN1_SEQUENCE_it@@9@9 dd 0 ; DATA	XREF: _ASN1_SEQUENCE_ito
		dd 10h,	4 dup(0)
		dd offset ??_C@_0O@NJFCFMGE@ASN1_SEQUENCE?$AA@ ; "ASN1_SEQUENCE"
; `ASN1_PRINTABLE_it'::`2'::local_it
?local_it@?1??ASN1_PRINTABLE_it@@9@9 dd	5, 13D17h, 3 dup(0)
					; DATA XREF: _ASN1_PRINTABLE_freeo
					; _ASN1_PRINTABLE_ito ...
		dd 10h
		dd offset ??_C@_0P@NDKOCAEJ@ASN1_PRINTABLE?$AA@	; "ASN1_PRINTABLE"
; `DISPLAYTEXT_it'::`2'::local_it
?local_it@?1??DISPLAYTEXT_it@@9@9 dd 5,	2850h, 3 dup(0)	; DATA XREF: _DISPLAYTEXT_freeo
					; _DISPLAYTEXT_ito ...
		dd 10h
		dd offset ??_C@_0M@FANFDIEE@DISPLAYTEXT?$AA@ ; "DISPLAYTEXT"
; `DIRECTORYSTRING_it'::`2'::local_it
?local_it@?1??DIRECTORYSTRING_it@@9@9 dd 5, 2906h, 3 dup(0)
					; DATA XREF: _DIRECTORYSTRING_freeo
					; _DIRECTORYSTRING_ito	...
		dd 10h
		dd offset ??_C@_0BA@CBHCBCAE@DIRECTORYSTRING?$AA@ ; "DIRECTORYSTRING"
; `ASN1_BOOLEAN_it'::`2'::local_it
?local_it@?1??ASN1_BOOLEAN_it@@9@9 dd 0	; DATA XREF: _ASN1_BOOLEAN_ito
		dd 1, 3	dup(0)
		dd 0FFFFFFFFh
		dd offset ??_C@_0N@HMAPMMGF@ASN1_BOOLEAN?$AA@ ;	"ASN1_BOOLEAN"
; `ASN1_TBOOLEAN_it'::`2'::local_it
?local_it@?1??ASN1_TBOOLEAN_it@@9@9 dd 0 ; DATA	XREF: _ASN1_TBOOLEAN_ito
		dd 1, 3	dup(0)
		dd 1
		dd offset ??_C@_0O@BIDLBGAP@ASN1_TBOOLEAN?$AA@ ; "ASN1_TBOOLEAN"
; `ASN1_FBOOLEAN_it'::`2'::local_it
?local_it@?1??ASN1_FBOOLEAN_it@@9@9 dd 0 ; DATA	XREF: _ASN1_FBOOLEAN_ito
		dd 1, 4	dup(0)
		dd offset ??_C@_0O@JKANHMPI@ASN1_FBOOLEAN?$AA@ ; "ASN1_FBOOLEAN"
; `ASN1_OCTET_STRING_NDEF_it'::`2'::local_it
?local_it@?1??ASN1_OCTET_STRING_NDEF_it@@9@9 dd	0 ; DATA XREF: _ASN1_OCTET_STRING_NDEF_ito
		dd 4, 3	dup(0)
		dd offset _ASN1_VISIBLESTRING_it
		dd offset ??_C@_0BH@HEBAELGA@ASN1_OCTET_STRING_NDEF?$AA@ ; "ASN1_OCTET_STRING_NDEF"
_ASN1_SEQUENCE_ANY_item_tt dd 4, 2 dup(0) ; DATA XREF: .rdata:00000190o
		dd offset ??_C@_0BC@COPGMDLD@ASN1_SEQUENCE_ANY?$AA@ ; "ASN1_SEQUENCE_ANY"
		dd offset _ASN1_ANY_it
; `ASN1_SEQUENCE_ANY_it'::`2'::local_it
?local_it@?1??ASN1_SEQUENCE_ANY_it@@9@9	dd 0 ; DATA XREF: _ASN1_SEQUENCE_ANY_ito
					; _d2i_ASN1_SEQUENCE_ANYo ...
		dd 0FFFFFFFFh
		dd offset _ASN1_SEQUENCE_ANY_item_tt
		align 10h
		dd offset ??_C@_0BC@COPGMDLD@ASN1_SEQUENCE_ANY?$AA@ ; "ASN1_SEQUENCE_ANY"
_ASN1_SET_ANY_item_tt dd 2, 2 dup(0)	; DATA XREF: .rdata:000001C0o
		dd offset ??_C@_0N@KHICOJGI@ASN1_SET_ANY?$AA@ ;	"ASN1_SET_ANY"
		dd offset _ASN1_ANY_it
; `ASN1_SET_ANY_it'::`2'::local_it
?local_it@?1??ASN1_SET_ANY_it@@9@9 dd 0	; DATA XREF: _ASN1_SET_ANY_ito
					; _d2i_ASN1_SET_ANYo ...
		dd 0FFFFFFFFh
		dd offset _ASN1_SET_ANY_item_tt
		align 10h
		dd offset ??_C@_0N@KHICOJGI@ASN1_SET_ANY?$AA@ ;	"ASN1_SET_ANY"
; `ASN1_INTEGER_it'::`2'::local_it
?local_it@?1??ASN1_INTEGER_it@@9@9 dd 0	; DATA XREF: _ASN1_INTEGER_freeo
					; _ASN1_INTEGER_ito ...
		dd 2, 4	dup(0)
		dd offset ??_C@_0N@KIGEHGKE@ASN1_INTEGER?$AA@ ;	"ASN1_INTEGER"
; `ASN1_ENUMERATED_it'::`2'::local_it
?local_it@?1??ASN1_ENUMERATED_it@@9@9 dd 0 ; DATA XREF:	_ASN1_ENUMERATED_freeo
					; _ASN1_ENUMERATED_ito	...
		dd 0Ah,	4 dup(0)
		dd offset ??_C@_0BA@CLGIIAJD@ASN1_ENUMERATED?$AA@ ; "ASN1_ENUMERATED"
; `ASN1_BIT_STRING_it'::`2'::local_it
?local_it@?1??ASN1_BIT_STRING_it@@9@9 dd 0 ; DATA XREF:	_ASN1_BIT_STRING_freeo
					; _ASN1_BIT_STRING_ito	...
		dd 3, 4	dup(0)
		dd offset ??_C@_0BA@LJHGDIKH@ASN1_BIT_STRING?$AA@ ; "ASN1_BIT_STRING"
; `ASN1_OCTET_STRING_it'::`2'::local_it
?local_it@?1??ASN1_OCTET_STRING_it@@9@9	dd 0 ; DATA XREF: _ASN1_OCTET_STRING_freeo
					; _ASN1_OCTET_STRING_ito ...
		dd 4, 4	dup(0)
		dd offset ??_C@_0BC@PEBEKNCO@ASN1_OCTET_STRING?$AA@ ; "ASN1_OCTET_STRING"
; `ASN1_NULL_it'::`2'::local_it
?local_it@?1??ASN1_NULL_it@@9@9	dd 0	; DATA XREF: _ASN1_NULL_freeo
					; _ASN1_NULL_ito ...
		dd 5, 4	dup(0)
		dd offset ??_C@_09NHFFCPKK@ASN1_NULL?$AA@ ; "ASN1_NULL"
; `ASN1_OBJECT_it'::`2'::local_it
?local_it@?1??ASN1_OBJECT_it@@9@9 dd 0	; DATA XREF: _ASN1_OBJECT_ito
		dd 6, 4	dup(0)
		dd offset ??_C@_0M@BJNOJGBL@ASN1_OBJECT?$AA@ ; "ASN1_OBJECT"
; `ASN1_UTF8STRING_it'::`2'::local_it
?local_it@?1??ASN1_UTF8STRING_it@@9@9 dd 0 ; DATA XREF:	_ASN1_UTF8STRING_freeo
					; _ASN1_UTF8STRING_ito	...
		dd 0Ch,	4 dup(0)
		dd offset ??_C@_0BA@LEPDCAOC@ASN1_UTF8STRING?$AA@ ; "ASN1_UTF8STRING"
; `ASN1_PRINTABLESTRING_it'::`2'::local_it
?local_it@?1??ASN1_PRINTABLESTRING_it@@9@9 dd 0	; DATA XREF: _ASN1_PRINTABLESTRING_freeo
					; _ASN1_PRINTABLESTRING_ito ...
		dd 13h,	4 dup(0)
		dd offset ??_C@_0BF@CPDMNKCA@ASN1_PRINTABLESTRING?$AA@ ; "ASN1_PRINTABLESTRING"
; `ASN1_T61STRING_it'::`2'::local_it
?local_it@?1??ASN1_T61STRING_it@@9@9 dd	0 ; DATA XREF: _ASN1_T61STRING_freeo
					; _ASN1_T61STRING_ito ...
		dd 14h,	4 dup(0)
		dd offset ??_C@_0P@GDIFPLAP@ASN1_T61STRING?$AA@	; "ASN1_T61STRING"
; `ASN1_IA5STRING_it'::`2'::local_it
?local_it@?1??ASN1_IA5STRING_it@@9@9 dd	0 ; DATA XREF: _ASN1_IA5STRING_freeo
					; _ASN1_IA5STRING_ito ...
		dd 16h,	4 dup(0)
		dd offset ??_C@_0P@KBFNFBLB@ASN1_IA5STRING?$AA@	; "ASN1_IA5STRING"
; `ASN1_GENERALSTRING_it'::`2'::local_it
?local_it@?1??ASN1_GENERALSTRING_it@@9@9 dd 0 ;	DATA XREF: _ASN1_GENERALSTRING_freeo
					; _ASN1_GENERALSTRING_ito ...
		dd 1Bh,	4 dup(0)
		dd offset ??_C@_0BD@EMMGLGMD@ASN1_GENERALSTRING?$AA@ ; "ASN1_GENERALSTRING"
; `ASN1_UTCTIME_it'::`2'::local_it
?local_it@?1??ASN1_UTCTIME_it@@9@9 dd 0	; DATA XREF: _ASN1_UTCTIME_freeo
					; _ASN1_UTCTIME_ito ...
		dd 17h,	4 dup(0)
		dd offset ??_C@_0N@OIMCLPEM@ASN1_UTCTIME?$AA@ ;	"ASN1_UTCTIME"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 324h
; COMDAT (pick any)
		public ??_C@_0BF@MPJFOIHC@ASN1_GENERALIZEDTIME?$AA@
; `string'
??_C@_0BF@MPJFOIHC@ASN1_GENERALIZEDTIME?$AA@ db	'ASN1_GENERALIZEDTIME',0
					; DATA XREF: .rdata:00000020o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33Ch
; COMDAT (pick any)
		public ??_C@_0BD@HMMCNBGD@ASN1_VISIBLESTRING?$AA@
; `string'
??_C@_0BD@HMMCNBGD@ASN1_VISIBLESTRING?$AA@ db 'ASN1_VISIBLESTRING',0
					; DATA XREF: .rdata:0000003Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 350h
; COMDAT (pick any)
		public ??_C@_0BF@DMDDFBNJ@ASN1_UNIVERSALSTRING?$AA@
; `string'
??_C@_0BF@DMDDFBNJ@ASN1_UNIVERSALSTRING?$AA@ db	'ASN1_UNIVERSALSTRING',0
					; DATA XREF: .rdata:00000058o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 368h
; COMDAT (pick any)
		public ??_C@_0P@CHICPHIN@ASN1_BMPSTRING?$AA@
; `string'
??_C@_0P@CHICPHIN@ASN1_BMPSTRING?$AA@ db 'ASN1_BMPSTRING',0 ; DATA XREF: .rdata:00000074o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 378h
; COMDAT (pick any)
		public ??_C@_08FIDCPDIJ@ASN1_ANY?$AA@
; `string'
??_C@_08FIDCPDIJ@ASN1_ANY?$AA@ db 'ASN1_ANY',0 ; DATA XREF: .rdata:00000090o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 384h
; COMDAT (pick any)
		public ??_C@_0O@NJFCFMGE@ASN1_SEQUENCE?$AA@
; `string'
??_C@_0O@NJFCFMGE@ASN1_SEQUENCE?$AA@ db	'ASN1_SEQUENCE',0 ; DATA XREF: .rdata:000000ACo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 394h
; COMDAT (pick any)
		public ??_C@_0P@NDKOCAEJ@ASN1_PRINTABLE?$AA@
; `string'
??_C@_0P@NDKOCAEJ@ASN1_PRINTABLE?$AA@ db 'ASN1_PRINTABLE',0 ; DATA XREF: .rdata:000000C8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3A4h
; COMDAT (pick any)
		public ??_C@_0M@FANFDIEE@DISPLAYTEXT?$AA@
; `string'
??_C@_0M@FANFDIEE@DISPLAYTEXT?$AA@ db 'DISPLAYTEXT',0 ; DATA XREF: .rdata:000000E4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B0h
; COMDAT (pick any)
		public ??_C@_0BA@CBHCBCAE@DIRECTORYSTRING?$AA@
; `string'
??_C@_0BA@CBHCBCAE@DIRECTORYSTRING?$AA@	db 'DIRECTORYSTRING',0 ; DATA XREF: .rdata:00000100o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3C0h
; COMDAT (pick any)
		public ??_C@_0N@HMAPMMGF@ASN1_BOOLEAN?$AA@
; `string'
??_C@_0N@HMAPMMGF@ASN1_BOOLEAN?$AA@ db 'ASN1_BOOLEAN',0 ; DATA XREF: .rdata:0000011Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D0h
; COMDAT (pick any)
		public ??_C@_0O@BIDLBGAP@ASN1_TBOOLEAN?$AA@
; `string'
??_C@_0O@BIDLBGAP@ASN1_TBOOLEAN?$AA@ db	'ASN1_TBOOLEAN',0 ; DATA XREF: .rdata:00000138o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3E0h
; COMDAT (pick any)
		public ??_C@_0O@JKANHMPI@ASN1_FBOOLEAN?$AA@
; `string'
??_C@_0O@JKANHMPI@ASN1_FBOOLEAN?$AA@ db	'ASN1_FBOOLEAN',0 ; DATA XREF: .rdata:00000154o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F0h
; COMDAT (pick any)
		public ??_C@_0BH@HEBAELGA@ASN1_OCTET_STRING_NDEF?$AA@
; `string'
??_C@_0BH@HEBAELGA@ASN1_OCTET_STRING_NDEF?$AA@ db 'ASN1_OCTET_STRING_NDEF',0
					; DATA XREF: .rdata:00000170o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 408h
; COMDAT (pick any)
		public ??_C@_0BC@COPGMDLD@ASN1_SEQUENCE_ANY?$AA@
; `string'
??_C@_0BC@COPGMDLD@ASN1_SEQUENCE_ANY?$AA@ db 'ASN1_SEQUENCE_ANY',0
					; DATA XREF: .rdata:00000180o
					; .rdata:000001A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 41Ch
; COMDAT (pick any)
		public ??_C@_0N@KHICOJGI@ASN1_SET_ANY?$AA@
; `string'
??_C@_0N@KHICOJGI@ASN1_SET_ANY?$AA@ db 'ASN1_SET_ANY',0 ; DATA XREF: .rdata:000001B0o
					; .rdata:000001D0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 42Ch
; COMDAT (pick any)
		public ??_C@_0N@KIGEHGKE@ASN1_INTEGER?$AA@
; `string'
??_C@_0N@KIGEHGKE@ASN1_INTEGER?$AA@ db 'ASN1_INTEGER',0 ; DATA XREF: .rdata:000001ECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 43Ch
; COMDAT (pick any)
		public ??_C@_0BA@CLGIIAJD@ASN1_ENUMERATED?$AA@
; `string'
??_C@_0BA@CLGIIAJD@ASN1_ENUMERATED?$AA@	db 'ASN1_ENUMERATED',0 ; DATA XREF: .rdata:00000208o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44Ch
; COMDAT (pick any)
		public ??_C@_0BA@LJHGDIKH@ASN1_BIT_STRING?$AA@
; `string'
??_C@_0BA@LJHGDIKH@ASN1_BIT_STRING?$AA@	db 'ASN1_BIT_STRING',0 ; DATA XREF: .rdata:00000224o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 45Ch
; COMDAT (pick any)
		public ??_C@_0BC@PEBEKNCO@ASN1_OCTET_STRING?$AA@
; `string'
??_C@_0BC@PEBEKNCO@ASN1_OCTET_STRING?$AA@ db 'ASN1_OCTET_STRING',0
					; DATA XREF: .rdata:00000240o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 470h
; COMDAT (pick any)
		public ??_C@_09NHFFCPKK@ASN1_NULL?$AA@
; `string'
??_C@_09NHFFCPKK@ASN1_NULL?$AA@	db 'ASN1_NULL',0 ; DATA XREF: .rdata:0000025Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 47Ch
; COMDAT (pick any)
		public ??_C@_0M@BJNOJGBL@ASN1_OBJECT?$AA@
; `string'
??_C@_0M@BJNOJGBL@ASN1_OBJECT?$AA@ db 'ASN1_OBJECT',0 ; DATA XREF: .rdata:00000278o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 488h
; COMDAT (pick any)
		public ??_C@_0BA@LEPDCAOC@ASN1_UTF8STRING?$AA@
; `string'
??_C@_0BA@LEPDCAOC@ASN1_UTF8STRING?$AA@	db 'ASN1_UTF8STRING',0 ; DATA XREF: .rdata:00000294o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 498h
; COMDAT (pick any)
		public ??_C@_0BF@CPDMNKCA@ASN1_PRINTABLESTRING?$AA@
; `string'
??_C@_0BF@CPDMNKCA@ASN1_PRINTABLESTRING?$AA@ db	'ASN1_PRINTABLESTRING',0
					; DATA XREF: .rdata:000002B0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
; COMDAT (pick any)
		public ??_C@_0P@GDIFPLAP@ASN1_T61STRING?$AA@
; `string'
??_C@_0P@GDIFPLAP@ASN1_T61STRING?$AA@ db 'ASN1_T61STRING',0 ; DATA XREF: .rdata:000002CCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4C0h
; COMDAT (pick any)
		public ??_C@_0P@KBFNFBLB@ASN1_IA5STRING?$AA@
; `string'
??_C@_0P@KBFNFBLB@ASN1_IA5STRING?$AA@ db 'ASN1_IA5STRING',0 ; DATA XREF: .rdata:000002E8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D0h
; COMDAT (pick any)
		public ??_C@_0BD@EMMGLGMD@ASN1_GENERALSTRING?$AA@
; `string'
??_C@_0BD@EMMGLGMD@ASN1_GENERALSTRING?$AA@ db 'ASN1_GENERALSTRING',0
					; DATA XREF: .rdata:00000304o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E4h
; COMDAT (pick any)
		public ??_C@_0N@OIMCLPEM@ASN1_UTCTIME?$AA@
; `string'
??_C@_0N@OIMCLPEM@ASN1_UTCTIME?$AA@ db 'ASN1_UTCTIME',0 ; DATA XREF: .rdata:00000320o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_free
_ASN1_BIT_STRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_BIT_STRING_it@@9@9 ; `ASN1_BIT_STRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_BIT_STRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 508h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_it
_ASN1_BIT_STRING_it proc near
		mov	eax, offset ?local_it@?1??ASN1_BIT_STRING_it@@9@9 ; `ASN1_BIT_STRING_it'::`2'::local_it
		retn
_ASN1_BIT_STRING_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 510h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BIT_STRING_new
_ASN1_BIT_STRING_new proc near
		push	offset ?local_it@?1??ASN1_BIT_STRING_it@@9@9 ; `ASN1_BIT_STRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_BIT_STRING_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 520h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BMPSTRING_free
_ASN1_BMPSTRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_BMPSTRING_it@@9@9 ; `ASN1_BMPSTRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_BMPSTRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 534h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BMPSTRING_it
_ASN1_BMPSTRING_it proc	near
		mov	eax, offset ?local_it@?1??ASN1_BMPSTRING_it@@9@9 ; `ASN1_BMPSTRING_it'::`2'::local_it
		retn
_ASN1_BMPSTRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 53Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BMPSTRING_new
_ASN1_BMPSTRING_new proc near
		push	offset ?local_it@?1??ASN1_BMPSTRING_it@@9@9 ; `ASN1_BMPSTRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_BMPSTRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_BOOLEAN_it
_ASN1_BOOLEAN_it proc near
		mov	eax, offset ?local_it@?1??ASN1_BOOLEAN_it@@9@9 ; `ASN1_BOOLEAN_it'::`2'::local_it
		retn
_ASN1_BOOLEAN_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 554h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_ENUMERATED_free
_ASN1_ENUMERATED_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_ENUMERATED_it@@9@9 ; `ASN1_ENUMERATED_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_ENUMERATED_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 568h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_ENUMERATED_it
_ASN1_ENUMERATED_it proc near
		mov	eax, offset ?local_it@?1??ASN1_ENUMERATED_it@@9@9 ; `ASN1_ENUMERATED_it'::`2'::local_it
		retn
_ASN1_ENUMERATED_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_ENUMERATED_new
_ASN1_ENUMERATED_new proc near
		push	offset ?local_it@?1??ASN1_ENUMERATED_it@@9@9 ; `ASN1_ENUMERATED_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_ENUMERATED_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 580h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_FBOOLEAN_it
_ASN1_FBOOLEAN_it proc near
		mov	eax, offset ?local_it@?1??ASN1_FBOOLEAN_it@@9@9	; `ASN1_FBOOLEAN_it'::`2'::local_it
		retn
_ASN1_FBOOLEAN_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 588h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALIZEDTIME_free
_ASN1_GENERALIZEDTIME_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_GENERALIZEDTIME_it@@9@9 ; `ASN1_GENERALIZEDTIME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_GENERALIZEDTIME_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 59Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALIZEDTIME_it
_ASN1_GENERALIZEDTIME_it proc near
		mov	eax, offset ?local_it@?1??ASN1_GENERALIZEDTIME_it@@9@9 ; `ASN1_GENERALIZEDTIME_it'::`2'::local_it
		retn
_ASN1_GENERALIZEDTIME_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALIZEDTIME_new
_ASN1_GENERALIZEDTIME_new proc near
		push	offset ?local_it@?1??ASN1_GENERALIZEDTIME_it@@9@9 ; `ASN1_GENERALIZEDTIME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_GENERALIZEDTIME_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALSTRING_free
_ASN1_GENERALSTRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_GENERALSTRING_it@@9@9	; `ASN1_GENERALSTRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_GENERALSTRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALSTRING_it
_ASN1_GENERALSTRING_it proc near
		mov	eax, offset ?local_it@?1??ASN1_GENERALSTRING_it@@9@9 ; `ASN1_GENERALSTRING_it'::`2'::local_it
		retn
_ASN1_GENERALSTRING_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_GENERALSTRING_new
_ASN1_GENERALSTRING_new	proc near
		push	offset ?local_it@?1??ASN1_GENERALSTRING_it@@9@9	; `ASN1_GENERALSTRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_GENERALSTRING_new	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_IA5STRING_free
_ASN1_IA5STRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_IA5STRING_it@@9@9 ; `ASN1_IA5STRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_IA5STRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_IA5STRING_it
_ASN1_IA5STRING_it proc	near
		mov	eax, offset ?local_it@?1??ASN1_IA5STRING_it@@9@9 ; `ASN1_IA5STRING_it'::`2'::local_it
		retn
_ASN1_IA5STRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_IA5STRING_new
_ASN1_IA5STRING_new proc near
		push	offset ?local_it@?1??ASN1_IA5STRING_it@@9@9 ; `ASN1_IA5STRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_IA5STRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_INTEGER_free
_ASN1_INTEGER_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_INTEGER_it@@9@9 ; `ASN1_INTEGER_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_INTEGER_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 620h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_INTEGER_it
_ASN1_INTEGER_it proc near
		mov	eax, offset ?local_it@?1??ASN1_INTEGER_it@@9@9 ; `ASN1_INTEGER_it'::`2'::local_it
		retn
_ASN1_INTEGER_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 628h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_INTEGER_new
_ASN1_INTEGER_new proc near
		push	offset ?local_it@?1??ASN1_INTEGER_it@@9@9 ; `ASN1_INTEGER_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_INTEGER_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 638h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_NULL_free
_ASN1_NULL_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_NULL_it@@9@9 ; `ASN1_NULL_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_NULL_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_NULL_it
_ASN1_NULL_it	proc near
		mov	eax, offset ?local_it@?1??ASN1_NULL_it@@9@9 ; `ASN1_NULL_it'::`2'::local_it
		retn
_ASN1_NULL_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 654h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_NULL_new
_ASN1_NULL_new	proc near
		push	offset ?local_it@?1??ASN1_NULL_it@@9@9 ; `ASN1_NULL_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_NULL_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 664h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_OBJECT_it
_ASN1_OBJECT_it	proc near
		mov	eax, offset ?local_it@?1??ASN1_OBJECT_it@@9@9 ;	`ASN1_OBJECT_it'::`2'::local_it
		retn
_ASN1_OBJECT_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 66Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_OCTET_STRING_NDEF_it
_ASN1_OCTET_STRING_NDEF_it proc	near
		mov	eax, offset ?local_it@?1??ASN1_OCTET_STRING_NDEF_it@@9@9 ; `ASN1_OCTET_STRING_NDEF_it'::`2'::local_it
		retn
_ASN1_OCTET_STRING_NDEF_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 674h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_OCTET_STRING_free
_ASN1_OCTET_STRING_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_OCTET_STRING_it@@9@9 ; `ASN1_OCTET_STRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_OCTET_STRING_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 688h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_OCTET_STRING_it
_ASN1_OCTET_STRING_it proc near
		mov	eax, offset ?local_it@?1??ASN1_OCTET_STRING_it@@9@9 ; `ASN1_OCTET_STRING_it'::`2'::local_it
		retn
_ASN1_OCTET_STRING_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 690h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_OCTET_STRING_new
_ASN1_OCTET_STRING_new proc near
		push	offset ?local_it@?1??ASN1_OCTET_STRING_it@@9@9 ; `ASN1_OCTET_STRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_OCTET_STRING_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLESTRING_free
_ASN1_PRINTABLESTRING_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_PRINTABLESTRING_it@@9@9 ; `ASN1_PRINTABLESTRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_PRINTABLESTRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLESTRING_it
_ASN1_PRINTABLESTRING_it proc near
		mov	eax, offset ?local_it@?1??ASN1_PRINTABLESTRING_it@@9@9 ; `ASN1_PRINTABLESTRING_it'::`2'::local_it
		retn
_ASN1_PRINTABLESTRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLESTRING_new
_ASN1_PRINTABLESTRING_new proc near
		push	offset ?local_it@?1??ASN1_PRINTABLESTRING_it@@9@9 ; `ASN1_PRINTABLESTRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_PRINTABLESTRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLE_free
_ASN1_PRINTABLE_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_PRINTABLE_it@@9@9 ; `ASN1_PRINTABLE_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_PRINTABLE_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLE_it
_ASN1_PRINTABLE_it proc	near
		mov	eax, offset ?local_it@?1??ASN1_PRINTABLE_it@@9@9 ; `ASN1_PRINTABLE_it'::`2'::local_it
		retn
_ASN1_PRINTABLE_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLE_new
_ASN1_PRINTABLE_new proc near
		push	offset ?local_it@?1??ASN1_PRINTABLE_it@@9@9 ; `ASN1_PRINTABLE_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_PRINTABLE_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_SEQUENCE_ANY_it
_ASN1_SEQUENCE_ANY_it proc near
		mov	eax, offset ?local_it@?1??ASN1_SEQUENCE_ANY_it@@9@9 ; `ASN1_SEQUENCE_ANY_it'::`2'::local_it
		retn
_ASN1_SEQUENCE_ANY_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 700h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_SEQUENCE_it
_ASN1_SEQUENCE_it proc near
		mov	eax, offset ?local_it@?1??ASN1_SEQUENCE_it@@9@9	; `ASN1_SEQUENCE_it'::`2'::local_it
		retn
_ASN1_SEQUENCE_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 708h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_SET_ANY_it
_ASN1_SET_ANY_it proc near
		mov	eax, offset ?local_it@?1??ASN1_SET_ANY_it@@9@9 ; `ASN1_SET_ANY_it'::`2'::local_it
		retn
_ASN1_SET_ANY_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 710h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_T61STRING_free
_ASN1_T61STRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_T61STRING_it@@9@9 ; `ASN1_T61STRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_T61STRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 724h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_T61STRING_it
_ASN1_T61STRING_it proc	near
		mov	eax, offset ?local_it@?1??ASN1_T61STRING_it@@9@9 ; `ASN1_T61STRING_it'::`2'::local_it
		retn
_ASN1_T61STRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 72Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_T61STRING_new
_ASN1_T61STRING_new proc near
		push	offset ?local_it@?1??ASN1_T61STRING_it@@9@9 ; `ASN1_T61STRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_T61STRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 73Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TBOOLEAN_it
_ASN1_TBOOLEAN_it proc near
		mov	eax, offset ?local_it@?1??ASN1_TBOOLEAN_it@@9@9	; `ASN1_TBOOLEAN_it'::`2'::local_it
		retn
_ASN1_TBOOLEAN_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 744h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_free
_ASN1_TYPE_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_ANY_it@@9@9 ;	`ASN1_ANY_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_TYPE_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 758h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_new
_ASN1_TYPE_new	proc near
		push	offset ?local_it@?1??ASN1_ANY_it@@9@9 ;	`ASN1_ANY_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_TYPE_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 768h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UNIVERSALSTRING_free
_ASN1_UNIVERSALSTRING_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_UNIVERSALSTRING_it@@9@9 ; `ASN1_UNIVERSALSTRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_UNIVERSALSTRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 77Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UNIVERSALSTRING_it
_ASN1_UNIVERSALSTRING_it proc near
		mov	eax, offset ?local_it@?1??ASN1_UNIVERSALSTRING_it@@9@9 ; `ASN1_UNIVERSALSTRING_it'::`2'::local_it
		retn
_ASN1_UNIVERSALSTRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 784h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UNIVERSALSTRING_new
_ASN1_UNIVERSALSTRING_new proc near
		push	offset ?local_it@?1??ASN1_UNIVERSALSTRING_it@@9@9 ; `ASN1_UNIVERSALSTRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_UNIVERSALSTRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 794h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTCTIME_free
_ASN1_UTCTIME_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_UTCTIME_it@@9@9 ; `ASN1_UTCTIME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_UTCTIME_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTCTIME_it
_ASN1_UTCTIME_it proc near
		mov	eax, offset ?local_it@?1??ASN1_UTCTIME_it@@9@9 ; `ASN1_UTCTIME_it'::`2'::local_it
		retn
_ASN1_UTCTIME_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTCTIME_new
_ASN1_UTCTIME_new proc near
		push	offset ?local_it@?1??ASN1_UTCTIME_it@@9@9 ; `ASN1_UTCTIME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_UTCTIME_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTF8STRING_free
_ASN1_UTF8STRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_UTF8STRING_it@@9@9 ; `ASN1_UTF8STRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_UTF8STRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTF8STRING_it
_ASN1_UTF8STRING_it proc near
		mov	eax, offset ?local_it@?1??ASN1_UTF8STRING_it@@9@9 ; `ASN1_UTF8STRING_it'::`2'::local_it
		retn
_ASN1_UTF8STRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UTF8STRING_new
_ASN1_UTF8STRING_new proc near
		push	offset ?local_it@?1??ASN1_UTF8STRING_it@@9@9 ; `ASN1_UTF8STRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_UTF8STRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_VISIBLESTRING_free
_ASN1_VISIBLESTRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_VISIBLESTRING_it@@9@9	; `ASN1_VISIBLESTRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_VISIBLESTRING_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 800h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_VISIBLESTRING_it
_ASN1_VISIBLESTRING_it proc near	; DATA XREF: .rdata:0000016Co
		mov	eax, offset ?local_it@?1??ASN1_VISIBLESTRING_it@@9@9 ; `ASN1_VISIBLESTRING_it'::`2'::local_it
		retn
_ASN1_VISIBLESTRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 808h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_VISIBLESTRING_new
_ASN1_VISIBLESTRING_new	proc near
		push	offset ?local_it@?1??ASN1_VISIBLESTRING_it@@9@9	; `ASN1_VISIBLESTRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_VISIBLESTRING_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 818h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DIRECTORYSTRING_free
_DIRECTORYSTRING_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??DIRECTORYSTRING_it@@9@9 ; `DIRECTORYSTRING_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_DIRECTORYSTRING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 82Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DIRECTORYSTRING_it
_DIRECTORYSTRING_it proc near
		mov	eax, offset ?local_it@?1??DIRECTORYSTRING_it@@9@9 ; `DIRECTORYSTRING_it'::`2'::local_it
		retn
_DIRECTORYSTRING_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 834h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DIRECTORYSTRING_new
_DIRECTORYSTRING_new proc near
		push	offset ?local_it@?1??DIRECTORYSTRING_it@@9@9 ; `DIRECTORYSTRING_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_DIRECTORYSTRING_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 844h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DISPLAYTEXT_free
_DISPLAYTEXT_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??DISPLAYTEXT_it@@9@9 ; `DISPLAYTEXT_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_DISPLAYTEXT_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 858h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DISPLAYTEXT_it
_DISPLAYTEXT_it	proc near
		mov	eax, offset ?local_it@?1??DISPLAYTEXT_it@@9@9 ;	`DISPLAYTEXT_it'::`2'::local_it
		retn
_DISPLAYTEXT_it	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 860h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DISPLAYTEXT_new
_DISPLAYTEXT_new proc near
		push	offset ?local_it@?1??DISPLAYTEXT_it@@9@9 ; `DISPLAYTEXT_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_DISPLAYTEXT_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 870h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_BIT_STRING
_d2i_ASN1_BIT_STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_BIT_STRING_it@@9@9 ; `ASN1_BIT_STRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_BIT_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 88Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_BMPSTRING
_d2i_ASN1_BMPSTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_BMPSTRING_it@@9@9 ; `ASN1_BMPSTRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_BMPSTRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_ENUMERATED
_d2i_ASN1_ENUMERATED proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_ENUMERATED_it@@9@9 ; `ASN1_ENUMERATED_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_ENUMERATED endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_GENERALIZEDTIME
_d2i_ASN1_GENERALIZEDTIME proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_GENERALIZEDTIME_it@@9@9 ; `ASN1_GENERALIZEDTIME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_GENERALIZEDTIME endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_GENERALSTRING
_d2i_ASN1_GENERALSTRING	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_GENERALSTRING_it@@9@9	; `ASN1_GENERALSTRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_GENERALSTRING	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_IA5STRING
_d2i_ASN1_IA5STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_IA5STRING_it@@9@9 ; `ASN1_IA5STRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_IA5STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 918h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_INTEGER
_d2i_ASN1_INTEGER proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_INTEGER_it@@9@9 ; `ASN1_INTEGER_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_INTEGER endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 934h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_NULL
_d2i_ASN1_NULL	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_NULL_it@@9@9 ; `ASN1_NULL_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_NULL	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 950h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_OCTET_STRING
_d2i_ASN1_OCTET_STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_OCTET_STRING_it@@9@9 ; `ASN1_OCTET_STRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_OCTET_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 96Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_PRINTABLE
_d2i_ASN1_PRINTABLE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_PRINTABLE_it@@9@9 ; `ASN1_PRINTABLE_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_PRINTABLE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 988h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_PRINTABLESTRING
_d2i_ASN1_PRINTABLESTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_PRINTABLESTRING_it@@9@9 ; `ASN1_PRINTABLESTRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_PRINTABLESTRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_SEQUENCE_ANY
_d2i_ASN1_SEQUENCE_ANY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_SEQUENCE_ANY_it@@9@9 ; `ASN1_SEQUENCE_ANY_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_SEQUENCE_ANY endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_SET_ANY
_d2i_ASN1_SET_ANY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_SET_ANY_it@@9@9 ; `ASN1_SET_ANY_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_SET_ANY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_T61STRING
_d2i_ASN1_T61STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_T61STRING_it@@9@9 ; `ASN1_T61STRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_T61STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_TYPE
_d2i_ASN1_TYPE	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_ANY_it@@9@9 ;	`ASN1_ANY_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_TYPE	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_UNIVERSALSTRING
_d2i_ASN1_UNIVERSALSTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_UNIVERSALSTRING_it@@9@9 ; `ASN1_UNIVERSALSTRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_UNIVERSALSTRING endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_UTCTIME
_d2i_ASN1_UTCTIME proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_UTCTIME_it@@9@9 ; `ASN1_UTCTIME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_UTCTIME endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_UTF8STRING
_d2i_ASN1_UTF8STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_UTF8STRING_it@@9@9 ; `ASN1_UTF8STRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_UTF8STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_VISIBLESTRING
_d2i_ASN1_VISIBLESTRING	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_VISIBLESTRING_it@@9@9	; `ASN1_VISIBLESTRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_VISIBLESTRING	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_DIRECTORYSTRING
_d2i_DIRECTORYSTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??DIRECTORYSTRING_it@@9@9 ; `DIRECTORYSTRING_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_DIRECTORYSTRING endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AA0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_DISPLAYTEXT
_d2i_DISPLAYTEXT proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??DISPLAYTEXT_it@@9@9 ; `DISPLAYTEXT_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_DISPLAYTEXT endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ABCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_BIT_STRING
_i2d_ASN1_BIT_STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_BIT_STRING_it@@9@9 ; `ASN1_BIT_STRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_BIT_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AD4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_BMPSTRING
_i2d_ASN1_BMPSTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_BMPSTRING_it@@9@9 ; `ASN1_BMPSTRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_BMPSTRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_ENUMERATED
_i2d_ASN1_ENUMERATED proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_ENUMERATED_it@@9@9 ; `ASN1_ENUMERATED_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_ENUMERATED endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B04h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_GENERALIZEDTIME
_i2d_ASN1_GENERALIZEDTIME proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_GENERALIZEDTIME_it@@9@9 ; `ASN1_GENERALIZEDTIME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_GENERALIZEDTIME endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_GENERALSTRING
_i2d_ASN1_GENERALSTRING	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_GENERALSTRING_it@@9@9	; `ASN1_GENERALSTRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_GENERALSTRING	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B34h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_IA5STRING
_i2d_ASN1_IA5STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_IA5STRING_it@@9@9 ; `ASN1_IA5STRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_IA5STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_INTEGER
_i2d_ASN1_INTEGER proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_INTEGER_it@@9@9 ; `ASN1_INTEGER_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_INTEGER endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_NULL
_i2d_ASN1_NULL	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_NULL_it@@9@9 ; `ASN1_NULL_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_NULL	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_OCTET_STRING
_i2d_ASN1_OCTET_STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_OCTET_STRING_it@@9@9 ; `ASN1_OCTET_STRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_OCTET_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_PRINTABLE
_i2d_ASN1_PRINTABLE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_PRINTABLE_it@@9@9 ; `ASN1_PRINTABLE_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_PRINTABLE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_PRINTABLESTRING
_i2d_ASN1_PRINTABLESTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_PRINTABLESTRING_it@@9@9 ; `ASN1_PRINTABLESTRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_PRINTABLESTRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BC4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_SEQUENCE_ANY
_i2d_ASN1_SEQUENCE_ANY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_SEQUENCE_ANY_it@@9@9 ; `ASN1_SEQUENCE_ANY_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_SEQUENCE_ANY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BDCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_SET_ANY
_i2d_ASN1_SET_ANY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_SET_ANY_it@@9@9 ; `ASN1_SET_ANY_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_SET_ANY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BF4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_T61STRING
_i2d_ASN1_T61STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_T61STRING_it@@9@9 ; `ASN1_T61STRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_T61STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_TYPE
_i2d_ASN1_TYPE	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_ANY_it@@9@9 ;	`ASN1_ANY_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_TYPE	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C24h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_UNIVERSALSTRING
_i2d_ASN1_UNIVERSALSTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_UNIVERSALSTRING_it@@9@9 ; `ASN1_UNIVERSALSTRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_UNIVERSALSTRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_UTCTIME
_i2d_ASN1_UTCTIME proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_UTCTIME_it@@9@9 ; `ASN1_UTCTIME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_UTCTIME endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_UTF8STRING
_i2d_ASN1_UTF8STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_UTF8STRING_it@@9@9 ; `ASN1_UTF8STRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_UTF8STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_VISIBLESTRING
_i2d_ASN1_VISIBLESTRING	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_VISIBLESTRING_it@@9@9	; `ASN1_VISIBLESTRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_VISIBLESTRING	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_DIRECTORYSTRING
_i2d_DIRECTORYSTRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??DIRECTORYSTRING_it@@9@9 ; `DIRECTORYSTRING_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_DIRECTORYSTRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_DISPLAYTEXT
_i2d_DISPLAYTEXT proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??DISPLAYTEXT_it@@9@9 ; `DISPLAYTEXT_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_DISPLAYTEXT endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_item_new:near ; CODE XREF: _ASN1_BIT_STRING_new+5p
					; _ASN1_BMPSTRING_new+5p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_ASN1_BIT_STRING_free+9p
					; _ASN1_BMPSTRING_free+9p ...
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_ASN1_BIT_STRING+11p
					; _d2i_ASN1_BMPSTRING+11p ...
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_ASN1_BIT_STRING+Dp
					; _i2d_ASN1_BMPSTRING+Dp ...


		end
