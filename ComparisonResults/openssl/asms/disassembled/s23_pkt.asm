;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B6D30DE97BC4FCDF93A1C47DBC3160F0
; Input	CRC32 :	96F19C3A

; File Name   :	C:\compspace\Diff\openssl\obj\s23_pkt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl23_read_bytes
_ssl23_read_bytes proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	eax, edi
		mov	ecx, [esi+50h]
		cmp	ecx, edi
		jnb	short loc_77
		push	ebx
		mov	ebx, [esi+4Ch]
		sub	eax, ecx
		push	eax
		mov	dword ptr [esi+18h], 3
		lea	eax, [ecx+ebx]
		push	eax
		push	dword ptr [esi+0Ch]
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_76
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_40:					; CODE XREF: _ssl23_read_bytes+6Ej
		add	[esi+50h], eax
		mov	ecx, [esi+50h]
		mov	dword ptr [esi+18h], 1
		cmp	ecx, edi
		jnb	short loc_74
		mov	eax, edi
		mov	dword ptr [esi+18h], 3
		sub	eax, ecx
		push	eax
		lea	eax, [ecx+ebx]
		push	eax
		push	dword ptr [esi+0Ch]
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_40
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_74:					; CODE XREF: _ssl23_read_bytes+4Fj
		mov	eax, ecx

loc_76:					; CODE XREF: _ssl23_read_bytes+32j
		pop	ebx

loc_77:					; CODE XREF: _ssl23_read_bytes+11j
		pop	edi
		pop	esi
		retn
_ssl23_read_bytes endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl23_write_bytes
_ssl23_write_bytes proc	near

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	eax, [esi+3Ch]
		mov	ebx, [esi+48h]
		mov	edi, [esi+44h]
		push	edi
		mov	ebp, [eax+4]
		mov	dword ptr [esi+18h], 2
		lea	eax, [ebx+ebp]
		push	eax
		push	dword ptr [esi+10h]
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_D6
		nop

loc_AC:					; CODE XREF: _ssl23_write_bytes+58j
		mov	dword ptr [esi+18h], 1
		cmp	eax, edi
		jz	short loc_E1
		add	ebx, eax
		mov	dword ptr [esi+18h], 2
		sub	edi, eax
		push	edi
		lea	eax, [ebx+ebp]
		push	eax
		push	dword ptr [esi+10h]
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_AC

loc_D6:					; CODE XREF: _ssl23_write_bytes+2Dj
		mov	[esi+44h], edi
		pop	edi
		mov	[esi+48h], ebx
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_E1:					; CODE XREF: _ssl23_write_bytes+39j
		pop	edi
		pop	esi
		pop	ebp
		add	eax, ebx
		pop	ebx
		retn
_ssl23_write_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_read:near	; CODE XREF: _ssl23_read_bytes+28p
					; _ssl23_read_bytes+64p
		extrn _BIO_write:near	; CODE XREF: _ssl23_write_bytes+23p
					; _ssl23_write_bytes+4Ep


		end
