;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1A982D4F56F9EB910A0087E537F779F5
; Input	CRC32 :	B340CA03

; File Name   :	C:\compspace\Diff\openssl\obj\bio_ndef.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_new_NDEF
_BIO_new_NDEF	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		mov	ebx, [ebp+10h]
		test	ebx, ebx
		jz	loc_11D
		cmp	dword ptr [ebx+10h], 0
		jz	loc_11D
		push	esi
		push	edi
		push	6Dh ; 'm'
		push	offset ??_C@_0BJ@MAMCAFCM@?4?2crypto?2asn1?2bio_ndef?4c?$AA@ ; ".\\crypto\\asn1\\bio_ndef.c"
		push	18h
		call	_CRYPTO_malloc
		mov	esi, eax
		call	_BIO_f_asn1
		push	eax
		call	_BIO_new
		push	[esp+2Ch+arg_0]
		mov	edi, eax
		push	edi
		call	_BIO_push
		add	esp, 18h
		mov	[esp+1Ch+arg_8], eax
		test	esi, esi
		jz	$err$13
		test	edi, edi
		jz	loc_106
		test	eax, eax
		jz	$err$13
		push	offset _ndef_prefix_free
		push	offset _ndef_prefix
		push	edi
		call	_BIO_asn1_set_prefix
		push	offset _ndef_suffix_free
		push	offset _ndef_suffix
		push	edi
		call	_BIO_asn1_set_suffix
		mov	eax, [esp+34h+arg_8]
		mov	[esp+34h+var_C], eax
		lea	eax, [esp+34h+var_C]
		push	eax
		push	ebp
		lea	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_8], 0
		push	eax
		mov	[esp+40h+var_4], 0
		mov	eax, [ebx+10h]
		push	0Ah
		call	eax
		add	esp, 28h
		test	eax, eax
		jle	short $err$13
		mov	eax, [esp+1Ch+arg_4]
		mov	[esi], eax
		push	esi
		mov	[esi+4], ebp
		mov	eax, [esp+20h+var_8]
		mov	[esi+8], eax
		mov	eax, [esp+20h+var_4]
		push	0
		mov	[esi+10h], eax
		mov	eax, [esp+24h+arg_8]
		push	99h ; '™'
		push	edi
		mov	[esi+0Ch], eax
		call	_BIO_ctrl
		mov	eax, [esp+2Ch+var_8]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

$err$13:				; CODE XREF: _BIO_new_NDEF+57j
					; _BIO_new_NDEF+67j ...
		test	edi, edi
		jz	short loc_106
		push	edi
		call	_BIO_free
		add	esp, 4

loc_106:				; CODE XREF: _BIO_new_NDEF+5Fj
					; _BIO_new_NDEF+FBj
		test	esi, esi
		jz	short loc_113
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_113:				; CODE XREF: _BIO_new_NDEF+108j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_11D:				; CODE XREF: _BIO_new_NDEF+15j
					; _BIO_new_NDEF+1Fj
		push	6Ah ; 'j'
		push	offset ??_C@_0BJ@MAMCAFCM@?4?2crypto?2asn1?2bio_ndef?4c?$AA@ ; ".\\crypto\\asn1\\bio_ndef.c"
		push	0CAh ; 'Ê'
		push	0D0h ; 'Ð'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_BIO_new_NDEF	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 140h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ndef_prefix	proc near		; DATA XREF: _BIO_new_NDEF+72o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		test	eax, eax
		jnz	short loc_149
		retn
; ---------------------------------------------------------------------------

loc_149:				; CODE XREF: _ndef_prefix+6j
		push	esi
		mov	esi, [eax]
		push	dword ptr [esi+4]
		push	0
		push	dword ptr [esi]
		call	_ASN1_item_ndef_i2d
		push	0A4h ; '¤'
		push	offset ??_C@_0BJ@MAMCAFCM@?4?2crypto?2asn1?2bio_ndef?4c?$AA@ ; ".\\crypto\\asn1\\bio_ndef.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 18h
		mov	[esp+4+arg_C], eax
		test	eax, eax
		jnz	short loc_175
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_175:				; CODE XREF: _ndef_prefix+31j
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	[esi+14h], eax
		mov	eax, [esp+8+arg_C]
		mov	[edi], eax
		lea	eax, [esp+8+arg_C]
		push	dword ptr [esi+4]
		push	eax
		push	dword ptr [esi]
		call	_ASN1_item_ndef_i2d
		mov	eax, [esi+10h]
		add	esp, 0Ch
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	short loc_1A3
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A3:				; CODE XREF: _ndef_prefix+5Cj
		mov	eax, [esp+8+arg_8]
		sub	ecx, [edi]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
_ndef_prefix	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ndef_prefix_free proc near		; DATA XREF: _BIO_new_NDEF+6Do

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		test	eax, eax
		jnz	short loc_1BD
		retn
; ---------------------------------------------------------------------------

loc_1BD:				; CODE XREF: _ndef_prefix_free+6j
		push	esi
		mov	esi, [eax]
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_1D0
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1D0:				; CODE XREF: _ndef_prefix_free+11j
		mov	eax, [esp+4+arg_4]
		mov	dword ptr [esi+14h], 0
		pop	esi
		mov	dword ptr [eax], 0
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, 1
		retn
_ndef_prefix_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ndef_suffix	proc near		; DATA XREF: _BIO_new_NDEF+82o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 0Ch
		call	__chkstk
		push	esi
		mov	esi, [esp+10h+arg_C]
		test	esi, esi
		jnz	short loc_20E

loc_207:				; CODE XREF: _ndef_suffix+4Cj
					; _ndef_suffix+73j
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_20E:				; CODE XREF: _ndef_suffix+11j
		mov	esi, [esi]
		mov	eax, [esi+4]
		mov	ecx, [eax+10h]
		mov	eax, [esi+8]
		mov	[esp+10h+var_8], eax
		mov	eax, [esi+0Ch]
		mov	[esp+10h+var_C], eax
		mov	eax, [esi+10h]
		mov	[esp+10h+var_4], eax
		lea	eax, [esp+10h+var_C]
		push	eax
		push	dword ptr [esi+4]
		mov	eax, [ecx+10h]
		push	esi
		push	0Bh
		call	eax
		add	esp, 10h
		test	eax, eax
		jle	short loc_207
		push	dword ptr [esi+4]
		push	0
		push	dword ptr [esi]
		call	_ASN1_item_ndef_i2d
		push	0EAh ; 'ê'
		push	offset ??_C@_0BJ@MAMCAFCM@?4?2crypto?2asn1?2bio_ndef?4c?$AA@ ; ".\\crypto\\asn1\\bio_ndef.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 18h
		mov	[esp+10h+arg_C], eax
		test	eax, eax
		jz	short loc_207
		push	edi
		mov	edi, [esp+14h+arg_4]
		mov	[esi+14h], eax
		mov	eax, [esp+14h+arg_C]
		mov	[edi], eax
		lea	eax, [esp+14h+arg_C]
		push	dword ptr [esi+4]
		push	eax
		push	dword ptr [esi]
		call	_ASN1_item_ndef_i2d
		mov	ecx, [esi+10h]
		add	esp, 0Ch
		mov	edx, eax
		mov	ecx, [ecx]
		test	ecx, ecx
		jnz	short loc_29C
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_29C:				; CODE XREF: _ndef_suffix+9Ej
		mov	[edi], ecx
		mov	eax, [esi+10h]
		mov	ecx, [esi+14h]
		pop	edi
		pop	esi
		sub	ecx, [eax]
		mov	eax, [esp+0Ch+arg_8]
		add	ecx, edx
		mov	[eax], ecx
		mov	eax, 1
		add	esp, 0Ch
		retn
_ndef_suffix	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ndef_suffix_free proc near		; DATA XREF: _BIO_new_NDEF+7Do

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_C]
		test	esi, esi
		jz	short loc_30B
		push	edi
		mov	edi, [esi]
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_2D8
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_2D8:				; CODE XREF: _ndef_suffix_free+11j
		mov	eax, [esp+8+arg_4]
		mov	dword ptr [edi+14h], 0
		mov	dword ptr [eax], 0
		mov	eax, [esp+8+arg_8]
		mov	dword ptr [eax], 0
		push	dword ptr [esi]
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [esi], 0
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_30B:				; CODE XREF: _ndef_suffix_free+7j
		xor	eax, eax
		pop	esi
		retn
_ndef_suffix_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 310h
; COMDAT (pick any)
		public ??_C@_0BJ@MAMCAFCM@?4?2crypto?2asn1?2bio_ndef?4c?$AA@
; `string'
??_C@_0BJ@MAMCAFCM@?4?2crypto?2asn1?2bio_ndef?4c?$AA@ db '.\crypto\asn1\bio_ndef.c',0
					; DATA XREF: _BIO_new_NDEF+29o
					; _BIO_new_NDEF+11Fo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _BIO_new_NDEF+30p
					; _ndef_prefix+23p ...
		extrn _CRYPTO_free:near	; CODE XREF: _BIO_new_NDEF+10Bp
					; _ndef_prefix_free+14p ...
		extrn _BIO_asn1_set_prefix:near	; CODE XREF: _BIO_new_NDEF+78p
		extrn _BIO_asn1_set_suffix:near	; CODE XREF: _BIO_new_NDEF+88p
		extrn _BIO_new:near	; CODE XREF: _BIO_new_NDEF+3Dp
		extrn _BIO_free:near	; CODE XREF: _BIO_new_NDEF+FEp
		extrn _BIO_ctrl:near	; CODE XREF: _BIO_new_NDEF+E5p
		extrn _BIO_push:near	; CODE XREF: _BIO_new_NDEF+49p
		extrn _ASN1_item_ndef_i2d:near ; CODE XREF: _ndef_prefix+13p
					; _ndef_prefix+4Dp ...
		extrn _BIO_f_asn1:near	; CODE XREF: _BIO_new_NDEF+37p
		extrn _ERR_put_error:near ; CODE XREF: _BIO_new_NDEF+130p
		extrn __chkstk:near	; CODE XREF: _BIO_new_NDEF+5p
					; _ndef_suffix+5p


		end
