;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7FAF1E0AE5CAD9865C54C1892099701A
; Input	CRC32 :	8EB9DF4F

; File Name   :	C:\compspace\Diff\openssl\obj\a_bytes.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_collate_primitive	proc near	; CODE XREF: _d2i_ASN1_bytes+C0p

Size		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		mov	[esp+14h+Size],	0
		mov	[esp+14h+var_C], 0
		mov	[esp+14h+var_4], 0
		mov	[esp+14h+var_8], 0
		push	esi
		mov	esi, [esp+18h+arg_4]
		push	edi
		test	ebx, ebx
		jnz	short loc_84
		mov	dword ptr [esi+8], 43h ; 'C'

$err$53:				; CODE XREF: _asn1_collate_primitive+ADj
					; _asn1_collate_primitive+160j	...
		push	12Ch
		push	offset ??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@ ; ".\\crypto\\asn1\\a_bytes.c"
		push	dword ptr [esi+8]
		push	69h ; 'i'
		push	0Dh
		call	_ERR_put_error
		mov	eax, [esp+30h+Size]
		add	esp, 14h
		test	eax, eax
		jz	short loc_6A
		push	eax
		call	_ASN1_STRING_free
		add	esp, 4

loc_6A:					; CODE XREF: _asn1_collate_primitive+5Fj
		mov	eax, [esp+1Ch+var_8]
		test	eax, eax
		jz	short loc_7B
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_7B:					; CODE XREF: _asn1_collate_primitive+70j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_84:					; CODE XREF: _asn1_collate_primitive+37j
		xor	edi, edi

loc_86:					; CODE XREF: _asn1_collate_primitive+154j
		test	byte ptr [esi+0Ch], 1
		jz	short loc_E5
		mov	eax, [esi+1Ch]
		sub	eax, [esi]
		push	eax
		push	esi
		call	_ASN1_const_check_infinite_end
		add	esp, 8
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_EB

loc_A2:					; CODE XREF: _asn1_collate_primitive+E9j
		push	esi
		call	_asn1_const_Finish
		add	esp, 4
		test	eax, eax
		jz	short $err$53
		mov	eax, [ebx+8]
		mov	[ebx], edi
		test	eax, eax
		jz	short loc_C1
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_C1:					; CODE XREF: _asn1_collate_primitive+B6j
		mov	eax, [esp+1Ch+var_8]
		mov	[ebx+8], eax
		mov	eax, [esp+1Ch+Size]
		test	eax, eax
		jz	short loc_D9
		push	eax
		call	_ASN1_STRING_free
		add	esp, 4

loc_D9:					; CODE XREF: _asn1_collate_primitive+CEj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_E5:					; CODE XREF: _asn1_collate_primitive+8Aj
		cmp	dword ptr [esi+18h], 0
		jle	short loc_A2

loc_EB:					; CODE XREF: _asn1_collate_primitive+A0j
		push	dword ptr [esi+14h] ; int
		mov	ecx, [esi]
		push	dword ptr [esi+10h] ; int
		mov	eax, [esi+1Ch]
		sub	eax, ecx
		mov	[esi+20h], ecx
		push	eax		; int
		lea	eax, [esp+28h+Size]
		push	esi		; int
		push	eax		; Size
		call	_d2i_ASN1_bytes
		add	esp, 14h
		test	eax, eax
		jz	short loc_165
		mov	eax, [esp+1Ch+Size]
		mov	eax, [eax]
		add	eax, edi
		push	eax
		lea	eax, [esp+20h+var_C]
		push	eax
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	short loc_159
		mov	eax, [esp+1Ch+Size]
		push	dword ptr [eax]	; Size
		push	dword ptr [eax+8] ; Src
		mov	eax, [esp+24h+var_8]
		add	eax, edi
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		test	byte ptr [esi+0Ch], 1
		jnz	short loc_14E
		mov	eax, [esi+20h]
		sub	eax, [esi]
		add	[esi+18h], eax

loc_14E:				; CODE XREF: _asn1_collate_primitive+144j
		mov	eax, [esp+1Ch+Size]
		add	edi, [eax]
		jmp	loc_86
; ---------------------------------------------------------------------------

loc_159:				; CODE XREF: _asn1_collate_primitive+126j
		mov	dword ptr [esi+8], 7
		jmp	$err$53
; ---------------------------------------------------------------------------

loc_165:				; CODE XREF: _asn1_collate_primitive+10Cj
		mov	dword ptr [esi+8], 0Dh
		jmp	$err$53
_asn1_collate_primitive	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 174h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl d2i_ASN1_bytes(size_t Size, int, int, int, int)
		public _d2i_ASN1_bytes
_d2i_ASN1_bytes	proc near		; CODE XREF: _asn1_collate_primitive+102p

Src		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 38h ; '8'
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+44h+Size]
		xor	ebx, ebx
		test	edi, edi
		jz	short loc_191
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_1A3

loc_191:				; CODE XREF: _d2i_ASN1_bytes+15j
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1A3
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_1A3:				; CODE XREF: _d2i_ASN1_bytes+1Bj
					; _d2i_ASN1_bytes+26j
		mov	eax, [esp+44h+arg_4]
		push	ebp
		mov	ebp, [esp+48h+arg_8]
		push	ebp
		mov	eax, [eax]
		mov	[esp+4Ch+Src], eax
		lea	eax, [esp+4Ch+var_30]
		push	eax
		lea	eax, [esp+50h+var_34]
		push	eax
		lea	eax, [esp+54h+Size]
		push	eax
		lea	eax, [esp+58h+Src]
		push	eax
		call	_ASN1_get_object
		add	esp, 14h
		test	al, al
		jns	short loc_1DD
		mov	ebx, 66h ; 'f'
		jmp	$err$29
; ---------------------------------------------------------------------------

loc_1DD:				; CODE XREF: _d2i_ASN1_bytes+5Dj
		mov	ecx, [esp+48h+arg_C]
		cmp	[esp+48h+var_34], ecx
		jz	short loc_1F1
		mov	ebx, 0A8h ; '®'
		jmp	$err$29
; ---------------------------------------------------------------------------

loc_1F1:				; CODE XREF: _d2i_ASN1_bytes+71j
		test	al, 20h
		jz	short loc_249
		mov	edx, [esp+48h+arg_4]
		mov	[esp+48h+var_20], eax
		mov	eax, [esp+48h+Size]
		mov	[esp+48h+var_8], edx
		mov	edx, [esp+48h+Src]
		mov	[esp+48h+var_14], eax
		mov	eax, [esp+48h+arg_10]
		mov	[esp+48h+var_2C], edx
		mov	[esp+48h+var_1C], ecx
		mov	[esp+48h+var_18], eax
		test	ebp, ebp
		jnz	short loc_227
		mov	[esp+48h+var_10], ebx
		jmp	short loc_22E
; ---------------------------------------------------------------------------

loc_227:				; CODE XREF: _d2i_ASN1_bytes+ABj
		lea	eax, [edx+ebp]
		mov	[esp+48h+var_10], eax

loc_22E:				; CODE XREF: _d2i_ASN1_bytes+B1j
		lea	eax, [esp+48h+var_2C]
		push	eax
		push	esi
		call	_asn1_collate_primitive
		add	esp, 8
		test	eax, eax
		jz	short $err$29
		mov	eax, [esp+48h+var_2C]
		jmp	loc_310
; ---------------------------------------------------------------------------

loc_249:				; CODE XREF: _d2i_ASN1_bytes+7Fj
		mov	eax, [esp+48h+Size]
		test	eax, eax
		jz	loc_2EA
		cmp	[esi], eax
		jl	short loc_260
		mov	ebx, [esi+8]
		test	ebx, ebx
		jnz	short loc_2CA

loc_260:				; CODE XREF: _d2i_ASN1_bytes+E3j
		push	0CBh ; 'À'
		inc	eax
		push	offset ??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@ ; ".\\crypto\\asn1\\a_bytes.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_2B6
		lea	ebx, [eax+41h]

$err$29:				; CODE XREF: _d2i_ASN1_bytes+64j
					; _d2i_ASN1_bytes+78j ...
		test	esi, esi
		jz	short loc_292
		test	edi, edi
		jz	short loc_289
		cmp	[edi], esi
		jz	short loc_292

loc_289:				; CODE XREF: _d2i_ASN1_bytes+10Fj
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_292:				; CODE XREF: _d2i_ASN1_bytes+10Bj
					; _d2i_ASN1_bytes+113j
		push	0E9h ; 'È'
		push	offset ??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@ ; ".\\crypto\\asn1\\a_bytes.c"
		push	ebx
		push	8Fh ; 'è'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_2B6:				; CODE XREF: _d2i_ASN1_bytes+104j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_2C6
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_2C6:				; CODE XREF: _d2i_ASN1_bytes+147j
		mov	eax, [esp+48h+Size]

loc_2CA:				; CODE XREF: _d2i_ASN1_bytes+EAj
		push	eax		; Size
		push	[esp+4Ch+Src]	; Src
		push	ebx		; Dst
		call	_memcpy
		mov	eax, [esp+54h+Size]
		add	esp, 0Ch
		mov	byte ptr [ebx+eax], 0
		mov	eax, [esp+48h+Size]
		add	[esp+48h+Src], eax
		jmp	short loc_300
; ---------------------------------------------------------------------------

loc_2EA:				; CODE XREF: _d2i_ASN1_bytes+DBj
		mov	ecx, [esi+8]
		xor	ebx, ebx
		test	ecx, ecx
		jz	short loc_300
		push	ecx
		call	_CRYPTO_free
		mov	eax, [esp+4Ch+Size]
		add	esp, 4

loc_300:				; CODE XREF: _d2i_ASN1_bytes+174j
					; _d2i_ASN1_bytes+17Dj
		mov	[esi], eax
		mov	eax, [esp+48h+arg_C]
		mov	[esi+8], ebx
		mov	[esi+4], eax
		mov	eax, [esp+48h+Src]

loc_310:				; CODE XREF: _d2i_ASN1_bytes+D0j
		test	edi, edi
		jz	short loc_316
		mov	[edi], esi

loc_316:				; CODE XREF: _d2i_ASN1_bytes+19Ej
		mov	ecx, [esp+48h+arg_4]
		pop	ebp
		pop	edi
		mov	[ecx], eax
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 38h
		retn
_d2i_ASN1_bytes	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 328h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl d2i_ASN1_type_bytes(int, size_t Size, int, int)
		public _d2i_ASN1_type_bytes
_d2i_ASN1_type_bytes proc near

Src		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+Size]
		xor	ebx, ebx
		push	esi
		push	edi
		push	[esp+1Ch+arg_8]
		mov	eax, [ebp+0]
		xor	esi, esi
		mov	[esp+20h+Src], eax
		lea	eax, [esp+20h+var_4]
		push	eax
		lea	eax, [esp+24h+var_8]
		push	eax
		lea	eax, [esp+28h+Size]
		push	eax
		lea	eax, [esp+2Ch+Src]
		push	eax
		call	_ASN1_get_object
		mov	edi, [esp+30h+arg_0]
		add	esp, 14h
		test	al, al
		js	short $err$19
		mov	eax, [esp+1Ch+var_8]
		cmp	eax, 20h ; ' '
		jl	short loc_3B1
		mov	ebx, 99h ; 'ô'

$err$19:				; CODE XREF: _d2i_ASN1_type_bytes+43j
					; _d2i_ASN1_type_bytes+9Dj ...
		push	7Bh ; '{'
		push	offset ??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@ ; ".\\crypto\\asn1\\a_bytes.c"
		push	ebx
		push	95h ; 'ï'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		test	esi, esi
		jz	short loc_3A7
		test	edi, edi
		jz	short loc_39E
		cmp	[edi], esi
		jz	short loc_3A7

loc_39E:				; CODE XREF: _d2i_ASN1_type_bytes+70j
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_3A7:				; CODE XREF: _d2i_ASN1_type_bytes+6Cj
					; _d2i_ASN1_type_bytes+74j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_3B1:				; CODE XREF: _d2i_ASN1_type_bytes+4Cj
		push	eax
		call	_ASN1_tag2bit
		add	esp, 4
		test	[esp+1Ch+arg_C], eax
		jnz	short loc_3C7
		mov	ebx, 0A9h ; '©'
		jmp	short $err$19
; ---------------------------------------------------------------------------

loc_3C7:				; CODE XREF: _d2i_ASN1_type_bytes+96j
		cmp	[esp+1Ch+var_8], 3
		jnz	short loc_3E4
		push	[esp+1Ch+arg_8]
		push	ebp
		push	edi
		call	_d2i_ASN1_BIT_STRING
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_3E4:				; CODE XREF: _d2i_ASN1_type_bytes+A4j
		test	edi, edi
		jz	short loc_3EE
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_3F9

loc_3EE:				; CODE XREF: _d2i_ASN1_type_bytes+BEj
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_3A7

loc_3F9:				; CODE XREF: _d2i_ASN1_type_bytes+C4j
		mov	eax, [esp+1Ch+Size]
		test	eax, eax
		jz	short loc_443
		push	66h ; 'f'
		inc	eax
		push	offset ??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@ ; ".\\crypto\\asn1\\a_bytes.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_420
		lea	ebx, [eax+41h]
		jmp	$err$19
; ---------------------------------------------------------------------------

loc_420:				; CODE XREF: _d2i_ASN1_type_bytes+EEj
		push	[esp+1Ch+Size]	; Size
		push	[esp+20h+Src]	; Src
		push	ebx		; Dst
		call	_memcpy
		mov	eax, [esp+28h+Size]
		add	esp, 0Ch
		mov	byte ptr [ebx+eax], 0
		mov	eax, [esp+1Ch+Size]
		add	[esp+1Ch+Src], eax
		jmp	short loc_445
; ---------------------------------------------------------------------------

loc_443:				; CODE XREF: _d2i_ASN1_type_bytes+D7j
		xor	ebx, ebx

loc_445:				; CODE XREF: _d2i_ASN1_type_bytes+119j
		mov	ecx, [esi+8]
		test	ecx, ecx
		jz	short loc_459
		push	ecx
		call	_CRYPTO_free
		mov	eax, [esp+20h+Size]
		add	esp, 4

loc_459:				; CODE XREF: _d2i_ASN1_type_bytes+122j
		mov	[esi], eax
		mov	[esi+8], ebx
		mov	eax, [esp+1Ch+var_8]
		mov	[esi+4], eax
		test	edi, edi
		jz	short loc_46B
		mov	[edi], esi

loc_46B:				; CODE XREF: _d2i_ASN1_type_bytes+13Fj
		mov	eax, [esp+1Ch+Src]
		pop	edi
		mov	[ebp+0], eax
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_d2i_ASN1_type_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 47Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl i2d_ASN1_bytes(void *Dst,	int, int, int)
		public _i2d_ASN1_bytes
_i2d_ASN1_bytes	proc near

var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	edi
		mov	edi, [esp+8+Dst]
		test	edi, edi
		jnz	short loc_494
		xor	eax, eax
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_494:				; CODE XREF: _i2d_ASN1_bytes+11j
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		cmp	esi, 3
		jnz	short loc_4AF
		push	[esp+0Ch+arg_4]
		push	edi
		call	_i2d_ASN1_BIT_STRING
		add	esp, 8
		pop	esi
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_4AF:				; CODE XREF: _i2d_ASN1_bytes+20j
		mov	eax, [edi]
		push	ebx
		push	ebp
		push	esi
		push	eax
		push	0
		mov	[esp+20h+var_4], eax
		call	_ASN1_object_size
		mov	ebx, [esp+20h+arg_4]
		add	esp, 0Ch
		mov	ebp, eax
		test	ebx, ebx
		jz	short loc_515
		mov	eax, [ebx]
		mov	[esp+14h+Dst], eax
		cmp	esi, 10h
		jz	short loc_4E1
		cmp	esi, 11h
		jz	short loc_4E1
		xor	eax, eax
		jmp	short loc_4E6
; ---------------------------------------------------------------------------

loc_4E1:				; CODE XREF: _i2d_ASN1_bytes+5Aj
					; _i2d_ASN1_bytes+5Fj
		mov	eax, 1

loc_4E6:				; CODE XREF: _i2d_ASN1_bytes+63j
		push	[esp+14h+arg_C]
		push	esi
		push	[esp+1Ch+var_4]
		push	eax
		lea	eax, [esp+24h+Dst]
		push	eax
		call	_ASN1_put_object
		push	dword ptr [edi]	; Size
		push	dword ptr [edi+8] ; Src
		push	[esp+30h+Dst]	; Dst
		call	_memcpy
		mov	eax, [edi]
		add	esp, 20h
		add	eax, [esp+14h+Dst]
		mov	[ebx], eax
		mov	eax, ebp

loc_515:				; CODE XREF: _i2d_ASN1_bytes+4Fj
		pop	ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ecx
		retn
_i2d_ASN1_bytes	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 51Ch
; COMDAT (pick any)
		public ??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@
; `string'
??_C@_0BI@PMKHEHIP@?4?2crypto?2asn1?2a_bytes?4c?$AA@ db	'.\crypto\asn1\a_bytes.c',0
					; DATA XREF: _asn1_collate_primitive+45o
					; _d2i_ASN1_bytes+F2o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _d2i_ASN1_bytes+F8p
					; _d2i_ASN1_type_bytes+E2p
		extrn _CRYPTO_free:near	; CODE XREF: _asn1_collate_primitive+73p
					; _asn1_collate_primitive+B9p ...
		extrn _BUF_MEM_grow_clean:near ; CODE XREF: _asn1_collate_primitive+11Cp
		extrn _ERR_put_error:near ; CODE XREF: _asn1_collate_primitive+51p
					; _d2i_ASN1_bytes+130p	...
		extrn _ASN1_STRING_new:near ; CODE XREF: _d2i_ASN1_bytes:loc_191p
					; _d2i_ASN1_type_bytes:loc_3EEp
		extrn _ASN1_STRING_free:near ; CODE XREF: _asn1_collate_primitive+62p
					; _asn1_collate_primitive+D1p ...
		extrn _d2i_ASN1_BIT_STRING:near	; CODE XREF: _d2i_ASN1_type_bytes+ACp
		extrn _i2d_ASN1_BIT_STRING:near	; CODE XREF: _i2d_ASN1_bytes+27p
		extrn _ASN1_tag2bit:near ; CODE	XREF: _d2i_ASN1_type_bytes+8Ap
		extrn _asn1_const_Finish:near ;	CODE XREF: _asn1_collate_primitive+A3p
		extrn _ASN1_get_object:near ; CODE XREF: _d2i_ASN1_bytes+53p
					; _d2i_ASN1_type_bytes+35p
		extrn _ASN1_const_check_infinite_end:near
					; CODE XREF: _asn1_collate_primitive+93p
		extrn _ASN1_put_object:near ; CODE XREF: _i2d_ASN1_bytes+79p
		extrn _ASN1_object_size:near ; CODE XREF: _i2d_ASN1_bytes+3Fp
		extrn __chkstk:near	; CODE XREF: _asn1_collate_primitive+5p
					; _d2i_ASN1_bytes+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _asn1_collate_primitive+138p
					; _d2i_ASN1_bytes+15Cp	...


		end
