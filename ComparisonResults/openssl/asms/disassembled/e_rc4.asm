;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A79EBAA232ED4A3AE02E720007174887
; Input	CRC32 :	6B5D57CF

; File Name   :	C:\compspace\Diff\openssl\obj\e_rc4.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc4_init_key	proc near		; DATA XREF: .rdata:00000060o
					; .rdata:00000094o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		push	eax
		push	dword ptr [esi+60h]
		call	_RC4_set_key
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		retn
_rc4_init_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc4_cipher	proc near		; DATA XREF: .rdata:00000064o
					; .rdata:00000098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_4]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_8]
		push	[esp+8+arg_C]
		push	dword ptr [eax+60h]
		call	_RC4
		add	esp, 10h
		mov	eax, 1
		retn
_rc4_cipher	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
_r4_cipher	dd 5, 1, 10h, 0		; DATA XREF: _EVP_rc4o
		dd 8
		dd offset _rc4_init_key	; DATA XREF: .rdata:_r4_40_ciphero
		dd offset _rc4_cipher
		dd 0
		dd 408h, 4 dup(0)
_r4_40_cipher	dd offset off_60+1	; DATA XREF: _EVP_rc4_40o
		dd 1, 5, 0
		dd 8
		dd offset _rc4_init_key
		dd offset _rc4_cipher
		align 10h
		dd 408h, 4 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc4
_EVP_rc4	proc near
		mov	eax, offset _r4_cipher
		retn
_EVP_rc4	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc4_40
_EVP_rc4_40	proc near
		mov	eax, offset _r4_40_cipher
		retn
_EVP_rc4_40	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _rc4_init_key+Ap
		extrn _RC4_set_key:near	; CODE XREF: _rc4_init_key+16p
		extrn _RC4:near		; CODE XREF: _rc4_cipher+13p


		end
