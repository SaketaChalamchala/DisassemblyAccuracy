;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	619400D25A6E2E77712E42136CAB8F67
; Input	CRC32 :	99D3D0B9

; File Name   :	C:\compspace\Diff\openssl\obj\cfb128.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_cfb128_1_encrypt
_CRYPTO_cfb128_1_encrypt proc near

var_59		= byte ptr -59h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= xmmword ptr -28h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 5Ch ; '\'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+5Ch+var_4], eax
		mov	eax, [esp+5Ch+arg_4]
		xor	ecx, ecx
		push	ebx
		mov	ebx, [esp+60h+arg_10]
		push	edi
		mov	edi, [esp+64h+arg_C]
		mov	[esp+64h+var_38], eax
		mov	eax, [esp+64h+arg_1C]
		mov	[esp+64h+var_2C], edi
		mov	[esp+64h+var_30], ebx
		mov	[esp+64h+var_4C], eax
		mov	[esp+64h+var_58], ecx
		cmp	[esp+64h+arg_8], ecx
		jbe	loc_189
		lea	eax, [esp+64h+var_28]
		sub	eax, ebx
		push	ebp
		push	esi
		mov	[esp+6Ch+var_48], eax
		mov	esi, ebx
		lea	eax, [esp+6Ch+var_28+1]
		sub	esi, eax
		lea	eax, [ebx+2]
		lea	edx, [eax-1]
		mov	[esp+6Ch+var_50], esi
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_44], edx

loc_70:					; CODE XREF: _CRYPTO_cfb128_1_encrypt+181j
		movups	xmm0, xmmword ptr [ebx]
		mov	eax, ecx
		mov	ebp, 7
		and	eax, 7
		mov	edx, 1
		sub	ebp, eax
		mov	eax, ecx
		mov	ecx, [esp+6Ch+arg_0]
		shr	eax, 3
		mov	[esp+6Ch+var_3C], eax
		push	edi
		push	ebx
		mov	al, [eax+ecx]
		mov	ecx, ebp
		shl	edx, cl
		and	al, dl
		mov	[esp+74h+var_34], ebp
		neg	al
		push	ebx
		sbb	al, al
		and	al, 80h
		mov	[esp+78h+var_59], al
		movups	[esp+78h+var_28], xmm0
		call	[esp+78h+var_4C]
		add	esp, 0Ch
		cmp	[esp+6Ch+arg_18], 0
		jz	short loc_D1
		movzx	edx, byte ptr [ebx]
		movzx	eax, [esp+6Ch+var_59]
		xor	edx, eax
		mov	[esp+6Ch+var_18], dl
		jmp	short loc_DD
; ---------------------------------------------------------------------------

loc_D1:					; CODE XREF: _CRYPTO_cfb128_1_encrypt+BFj
		mov	al, [esp+6Ch+var_59]
		mov	dl, [ebx]
		mov	[esp+6Ch+var_18], al
		xor	dl, al

loc_DD:					; CODE XREF: _CRYPTO_cfb128_1_encrypt+CFj
		mov	[esp+6Ch+var_54], edx
		xor	ebp, ebp
		mov	edx, [esp+6Ch+var_48]

loc_E7:					; CODE XREF: _CRYPTO_cfb128_1_encrypt+13Ej
		lea	edi, [esp+6Ch+var_28+1]
		add	edi, ebp
		add	esi, edi
		mov	ah, [edi]
		movzx	ecx, byte ptr [esi+edx]
		mov	al, ah
		mov	bl, [edi+1]
		add	cl, cl
		shr	al, 7
		add	ah, ah
		or	cl, al
		mov	al, bl
		shr	al, 7
		add	bl, bl
		mov	[esi], cl
		or	al, ah
		mov	ecx, [esp+6Ch+var_44]
		mov	esi, [esp+6Ch+var_50]
		mov	[ecx+ebp], al
		mov	cl, [edi+2]
		mov	al, cl
		add	cl, cl
		shr	al, 7
		or	al, bl
		mov	ebx, [esp+6Ch+var_40]
		mov	[ebx+ebp], al
		mov	al, [edi+3]
		shr	al, 7
		or	al, cl
		mov	[ebx+ebp+1], al
		add	ebp, 4
		cmp	ebp, 10h
		jl	short loc_E7
		mov	esi, [esp+6Ch+var_3C]
		mov	edi, [esp+6Ch+var_38]
		mov	cl, byte ptr [esp+6Ch+var_58]
		mov	edx, [esp+6Ch+var_54]
		and	cl, 7
		mov	ebx, [esp+6Ch+var_30]
		and	dl, 80h
		movzx	eax, byte ptr [esi+edi]
		shr	dl, cl
		mov	ecx, [esp+6Ch+var_34]
		btr	eax, ecx
		mov	ecx, [esp+6Ch+var_58]
		or	dl, al
		inc	ecx
		mov	[esi+edi], dl
		mov	esi, [esp+6Ch+var_50]
		mov	edi, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_58], ecx
		cmp	ecx, [esp+6Ch+arg_8]
		jb	loc_70
		pop	esi
		pop	ebp

loc_189:				; CODE XREF: _CRYPTO_cfb128_1_encrypt+44j
		mov	ecx, [esp+64h+var_4]
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
_CRYPTO_cfb128_1_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 19Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_cfb128_8_encrypt
_CRYPTO_cfb128_8_encrypt proc near

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= xmmword ptr -28h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 30h ; '0'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+30h+var_4], eax
		mov	eax, [esp+30h+arg_C]
		mov	ecx, [esp+30h+arg_1C]
		push	ebx
		mov	ebx, [esp+34h+arg_8]
		mov	[esp+34h+var_30], eax
		mov	[esp+34h+var_2C], ecx
		push	ebp
		mov	ebp, [esp+38h+arg_4]
		push	esi
		mov	esi, [esp+3Ch+arg_10]
		test	ebx, ebx
		jz	short loc_224
		push	edi
		mov	edi, [esp+40h+arg_0]
		sub	ebp, edi
		nop

loc_1DC:				; CODE XREF: _CRYPTO_cfb128_8_encrypt+85j
		movups	xmm0, xmmword ptr [esi]
		push	eax
		push	esi
		push	esi
		movups	[esp+4Ch+var_28], xmm0
		call	ecx
		add	esp, 0Ch
		cmp	[esp+40h+arg_18], 0
		jz	short loc_200
		movzx	ecx, byte ptr [esi]
		movzx	eax, byte ptr [edi]
		xor	ecx, eax
		mov	[edi+ebp], cl
		jmp	short loc_209
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _CRYPTO_cfb128_8_encrypt+55j
		mov	cl, [edi]
		mov	al, [esi]
		xor	al, cl
		mov	[edi+ebp], al

loc_209:				; CODE XREF: _CRYPTO_cfb128_8_encrypt+62j
		mov	eax, [esp+40h+var_30]
		inc	edi
		mov	[esp+40h+var_18], cl
		mov	ecx, [esp+40h+var_2C]
		movups	xmm0, [esp+40h+var_28+1]
		movups	xmmword	ptr [esi], xmm0
		sub	ebx, 1
		jnz	short loc_1DC
		pop	edi

loc_224:				; CODE XREF: _CRYPTO_cfb128_8_encrypt+36j
		mov	ecx, [esp+3Ch+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
_CRYPTO_cfb128_8_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 238h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_cfb128_encrypt
_CRYPTO_cfb128_encrypt proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 10h
		call	__chkstk
		cmp	[esp+10h+arg_18], 0
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+1Ch+arg_14]
		push	edi
		mov	esi, [esi]
		jz	loc_373
		mov	edx, [esp+20h+arg_4]
		mov	ebp, [esp+20h+arg_0]
		mov	edi, [esp+20h+arg_8]
		mov	[esp+20h+var_10], edx
		mov	[esp+20h+arg_18], ebp
		test	esi, esi
		jz	short loc_29C
		mov	ebx, [esp+20h+arg_10]
		nop	dword ptr [eax+eax+00h]

loc_278:				; CODE XREF: _CRYPTO_cfb128_encrypt+62j
		test	edi, edi
		jz	short loc_29C
		movzx	ecx, byte ptr [esi+ebx]
		dec	edi
		movzx	eax, byte ptr [ebp+0]
		inc	ebp
		xor	ecx, eax
		mov	[esp+20h+arg_18], ebp
		mov	[esi+ebx], cl
		inc	esi
		mov	[edx], cl
		inc	edx
		mov	[esp+20h+var_10], edx
		and	esi, 0Fh
		jnz	short loc_278

loc_29C:				; CODE XREF: _CRYPTO_cfb128_encrypt+35j
					; _CRYPTO_cfb128_encrypt+42j
		cmp	edi, 10h
		jb	short loc_316
		mov	ecx, [esp+20h+arg_10]
		mov	eax, edi
		shr	eax, 4
		mov	ebx, edx
		mov	[esp+20h+var_8], eax
		sub	ebx, ecx
		shl	eax, 4
		sub	ebp, ecx
		add	edx, eax
		add	[esp+20h+arg_18], eax
		mov	[esp+20h+var_10], edx
		jmp	short loc_2CC
; ---------------------------------------------------------------------------
		align 8

loc_2C8:				; CODE XREF: _CRYPTO_cfb128_encrypt+DCj
		mov	ecx, [esp+20h+arg_10]

loc_2CC:				; CODE XREF: _CRYPTO_cfb128_encrypt+89j
		push	[esp+20h+arg_C]
		push	ecx
		push	ecx
		call	[esp+2Ch+arg_1C]
		add	esp, 0Ch
		cmp	esi, 10h
		jnb	short loc_304
		mov	ecx, [esp+20h+arg_10]
		mov	edx, 0Fh
		sub	edx, esi
		add	ecx, esi
		shr	edx, 2
		inc	edx

loc_2EF:				; CODE XREF: _CRYPTO_cfb128_encrypt+CAj
		mov	eax, [ecx+ebp]
		lea	ecx, [ecx+4]
		xor	[ecx-4], eax
		mov	eax, [ecx-4]
		mov	[ebx+ecx-4], eax
		sub	edx, 1
		jnz	short loc_2EF

loc_304:				; CODE XREF: _CRYPTO_cfb128_encrypt+A4j
		sub	edi, 10h
		add	ebx, 10h
		add	ebp, 10h
		xor	esi, esi
		sub	[esp+20h+var_8], 1
		jnz	short loc_2C8

loc_316:				; CODE XREF: _CRYPTO_cfb128_encrypt+67j
		test	edi, edi
		jz	loc_4A7
		push	[esp+20h+arg_C]
		mov	ebp, [esp+24h+arg_10]
		push	ebp
		push	ebp
		call	[esp+2Ch+arg_1C]
		mov	ebx, [esp+2Ch+var_10]
		lea	edx, [esi+ebp]
		sub	[esp+2Ch+arg_18], ebp
		add	esp, 0Ch
		sub	ebx, ebp
		add	esi, edi
		mov	[esp+20h+var_8], esi
		mov	esi, [esp+20h+arg_18]
		xchg	ax, ax

loc_348:				; CODE XREF: _CRYPTO_cfb128_encrypt+127j
		movzx	ecx, byte ptr [edx+esi]
		lea	edx, [edx+1]
		movzx	eax, byte ptr [edx-1]
		xor	ecx, eax
		mov	[edx-1], cl
		mov	[edx+ebx-1], cl
		sub	edi, 1
		jnz	short loc_348
		mov	eax, [esp+20h+arg_14]
		mov	esi, [esp+20h+var_8]
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_373:				; CODE XREF: _CRYPTO_cfb128_encrypt+19j
		mov	ebx, [esp+20h+arg_8]
		mov	ebp, [esp+20h+arg_4]
		mov	edi, [esp+20h+arg_0]
		mov	[esp+20h+var_10], ebx
		mov	[esp+20h+var_C], ebp
		mov	[esp+20h+arg_18], edi
		test	esi, esi
		jz	short loc_3BE
		mov	edx, [esp+20h+arg_10]
		nop	dword ptr [eax+eax+00h]

loc_398:				; CODE XREF: _CRYPTO_cfb128_encrypt+184j
		test	ebx, ebx
		jz	short loc_3BE
		mov	al, [esi+edx]
		dec	ebx
		mov	cl, [edi]
		inc	edi
		xor	al, cl
		mov	[esp+20h+arg_18], edi
		mov	[ebp+0], al
		inc	ebp
		mov	[esi+edx], cl
		inc	esi
		mov	[esp+20h+var_C], ebp
		mov	[esp+20h+var_10], ebx
		and	esi, 0Fh
		jnz	short loc_398

loc_3BE:				; CODE XREF: _CRYPTO_cfb128_encrypt+155j
					; _CRYPTO_cfb128_encrypt+162j
		mov	edx, [esp+20h+arg_1C]
		cmp	ebx, 10h
		jb	loc_462
		mov	ecx, [esp+20h+arg_10]
		mov	eax, ebp
		sub	eax, ecx
		mov	[esp+20h+var_8], eax
		mov	eax, ebx
		shr	eax, 4
		mov	[esp+20h+var_4], eax
		jmp	short loc_3EC
; ---------------------------------------------------------------------------
		align 8

loc_3E8:				; CODE XREF: _CRYPTO_cfb128_encrypt+228j
		mov	ecx, [esp+20h+arg_10]

loc_3EC:				; CODE XREF: _CRYPTO_cfb128_encrypt+1A8j
		push	[esp+20h+arg_C]
		push	ecx
		push	ecx
		call	edx
		add	esp, 0Ch
		cmp	esi, 10h
		jnb	short loc_43B
		mov	ebx, [esp+20h+arg_18]
		mov	edi, [esp+20h+arg_10]
		sub	ebx, ebp
		mov	ebp, 0Fh
		add	edi, esi
		sub	ebp, esi
		mov	esi, [esp+20h+var_8]
		shr	ebp, 2
		inc	ebp
		nop

loc_418:				; CODE XREF: _CRYPTO_cfb128_encrypt+1F5j
		mov	eax, [edi]
		lea	ecx, [esi+edi]
		mov	edx, [ecx+ebx]
		lea	edi, [edi+4]
		xor	eax, edx
		mov	[ecx], eax
		mov	[edi-4], edx
		sub	ebp, 1
		jnz	short loc_418
		mov	ebx, [esp+20h+var_10]
		mov	ebp, [esp+20h+var_C]
		mov	edi, [esp+20h+arg_18]

loc_43B:				; CODE XREF: _CRYPTO_cfb128_encrypt+1C2j
		add	[esp+20h+var_8], 10h
		sub	ebx, 10h
		mov	edx, [esp+20h+arg_1C]
		add	ebp, 10h
		add	edi, 10h
		mov	[esp+20h+var_10], ebx
		xor	esi, esi
		mov	[esp+20h+var_C], ebp
		sub	[esp+20h+var_4], 1
		mov	[esp+20h+arg_18], edi
		jnz	short loc_3E8

loc_462:				; CODE XREF: _CRYPTO_cfb128_encrypt+18Dj
		test	ebx, ebx
		jz	short loc_4A7
		push	[esp+20h+arg_C]
		mov	eax, [esp+24h+arg_10]
		push	eax
		push	eax
		call	edx
		mov	ecx, [esp+2Ch+arg_10]
		sub	edi, ebp
		add	esp, 0Ch
		sub	ebp, ecx
		lea	eax, [esi+ecx]
		add	esi, ebx
		mov	[esp+20h+var_8], esi
		mov	esi, eax
		mov	[esp+20h+arg_18], eax

loc_48C:				; CODE XREF: _CRYPTO_cfb128_encrypt+269j
		mov	al, [esi]
		lea	ecx, [esi+ebp]
		mov	dl, [ecx+edi]
		lea	esi, [esi+1]
		xor	al, dl
		mov	[ecx], al
		mov	[esi-1], dl
		sub	ebx, 1
		jnz	short loc_48C
		mov	esi, [esp+20h+var_8]

loc_4A7:				; CODE XREF: _CRYPTO_cfb128_encrypt+E0j
					; _CRYPTO_cfb128_encrypt+22Cj
		mov	eax, [esp+20h+arg_14]
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_CRYPTO_cfb128_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cfbr_encrypt_block proc near

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= xmmword ptr -28h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 40h ; '@'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+40h+var_4], eax
		mov	ecx, [esp+40h+arg_C]
		mov	edx, [esp+40h+arg_18]
		push	ebx
		mov	ebx, [esp+44h+arg_4]
		push	ebp
		mov	ebp, [esp+48h+arg_10]
		push	esi
		mov	esi, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_3C], ebx
		mov	[esp+4Ch+var_38], ebp
		lea	eax, [esi-1]
		cmp	eax, 7Fh ; ''
		ja	loc_739
		movups	xmm0, xmmword ptr [ebp+0]
		push	edi
		push	ecx
		push	ebp
		push	ebp
		movups	[esp+5Ch+var_28], xmm0
		call	edx
		lea	eax, [esi+7]
		add	esp, 0Ch
		cdq
		and	edx, 7
		lea	edi, [edx+eax]
		sar	edi, 3
		cmp	[esp+50h+arg_14], 0
		mov	[esp+50h+var_30], edi
		jz	short loc_55B
		test	edi, edi
		jle	loc_679
		mov	eax, [esp+50h+arg_0]
		lea	ecx, [esp+50h+var_18]
		mov	esi, ebp
		sub	ecx, eax
		sub	esi, eax
		mov	ebp, ecx
		sub	ebx, eax

loc_53C:				; CODE XREF: _cfbr_encrypt_block+9Cj
		movzx	edx, byte ptr [esi+eax]
		lea	eax, [eax+1]
		movzx	ecx, byte ptr [eax-1]
		xor	edx, ecx
		mov	[eax+ebp-1], dl
		mov	[ebx+eax-1], dl
		sub	edi, 1
		jnz	short loc_53C
		jmp	loc_675
; ---------------------------------------------------------------------------

loc_55B:				; CODE XREF: _cfbr_encrypt_block+68j
		xor	esi, esi
		test	edi, edi
		jle	loc_679
		mov	ecx, [esp+50h+arg_0]
		cmp	edi, 10h
		jb	loc_639
		lea	edx, [ebp-1]
		lea	ebx, [esp+50h+var_18]
		add	edx, edi
		cmp	ebx, edx
		lea	eax, [esp+edi+50h+var_28+0Fh]
		mov	ebx, [esp+50h+var_3C]
		ja	short loc_58F
		cmp	eax, ebp
		jnb	loc_639

loc_58F:				; CODE XREF: _cfbr_encrypt_block+CDj
		lea	edx, [ebx-1]
		lea	ebp, [esp+50h+var_18]
		add	edx, edi
		cmp	ebp, edx
		mov	ebp, [esp+50h+var_38]
		ja	short loc_5A8
		cmp	eax, ebx
		jnb	loc_639

loc_5A8:				; CODE XREF: _cfbr_encrypt_block+E6j
		lea	eax, [ebp-1]
		add	eax, edi
		cmp	ebx, eax
		ja	short loc_5B9
		cmp	edx, ebp
		jnb	loc_639

loc_5B9:				; CODE XREF: _cfbr_encrypt_block+F7j
		lea	eax, [ecx-1]
		add	eax, edi
		cmp	ebx, eax
		ja	short loc_5C6
		cmp	edx, ecx
		jnb	short loc_639

loc_5C6:				; CODE XREF: _cfbr_encrypt_block+108j
		mov	eax, edi
		and	eax, 8000000Fh
		jns	short loc_5D4
		dec	eax
		or	eax, 0FFFFFFF0h
		inc	eax

loc_5D4:				; CODE XREF: _cfbr_encrypt_block+115j
		mov	ebp, ecx
		mov	edx, edi
		sub	ebp, ebx
		lea	ecx, [esp+50h+var_18]
		mov	[esp+50h+var_2C], ebp
		sub	edx, eax
		mov	ebp, [esp+50h+var_38]
		mov	eax, ebx
		mov	[esp+50h+var_40], ebp
		sub	[esp+50h+var_40], ebx
		sub	ecx, ebx
		mov	ebp, [esp+50h+var_2C]
		mov	ebx, [esp+50h+var_40]
		mov	[esp+50h+var_34], ecx
		mov	ecx, [esp+50h+arg_0]
		mov	edi, [esp+50h+var_34]

loc_608:				; CODE XREF: _cfbr_encrypt_block+173j
		movups	xmm0, xmmword ptr [eax+ebp]
		add	esi, 10h
		lea	eax, [eax+10h]
		movups	xmm1, xmmword ptr [ebx+eax-10h]
		movups	xmmword	ptr [edi+eax-10h], xmm0
		movups	xmm0, xmmword ptr [edi+eax-10h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [eax-10h], xmm1
		cmp	esi, edx
		jl	short loc_608
		mov	edi, [esp+50h+var_30]
		mov	ebx, [esp+50h+var_3C]
		mov	ebp, [esp+50h+var_38]

loc_639:				; CODE XREF: _cfbr_encrypt_block+B4j
					; _cfbr_encrypt_block+D1j ...
		cmp	esi, edi
		jge	short loc_679
		lea	eax, [esp+50h+var_18]
		sub	ecx, eax
		mov	eax, ebp
		mov	[esp+50h+var_30], ecx
		lea	ecx, [esp+50h+var_18]
		mov	ebp, [esp+50h+var_30]
		sub	eax, ecx
		mov	[esp+50h+var_34], eax
		sub	ebx, ecx

loc_659:				; CODE XREF: _cfbr_encrypt_block+1BBj
		lea	edx, [esp+50h+var_18]
		add	edx, esi
		inc	esi
		mov	cl, [edx+ebp]
		mov	al, [eax+edx]
		xor	al, cl
		mov	[edx], cl
		mov	[ebx+edx], al
		mov	eax, [esp+50h+var_34]
		cmp	esi, edi
		jl	short loc_659

loc_675:				; CODE XREF: _cfbr_encrypt_block+9Ej
		mov	ebp, [esp+50h+var_38]

loc_679:				; CODE XREF: _cfbr_encrypt_block+6Cj
					; _cfbr_encrypt_block+A7j ...
		mov	eax, [esp+50h+arg_8]
		mov	esi, eax
		and	esi, 80000007h
		jns	short loc_68C
		dec	esi
		or	esi, 0FFFFFFF8h
		inc	esi

loc_68C:				; CODE XREF: _cfbr_encrypt_block+1CDj
		cdq
		and	edx, 7
		lea	ecx, [edx+eax]
		sar	ecx, 3
		test	esi, esi
		jnz	short loc_6B6
		movups	xmm0, [esp+ecx+50h+var_28]
		pop	edi
		pop	esi
		movups	xmmword	ptr [ebp+0], xmm0
		pop	ebp
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_6B6:				; CODE XREF: _cfbr_encrypt_block+1E0j
		mov	eax, 8
		mov	[esp+50h+var_3C], 4
		sub	eax, esi
		lea	edi, [esp+50h+var_28+1]
		inc	ebp
		mov	[esp+50h+var_40], eax
		add	edi, ecx
		nop	dword ptr [eax+eax+00000000h]

loc_6D8:				; CODE XREF: _cfbr_encrypt_block+27Ej
		mov	bl, [edi]
		lea	edi, [edi+4]
		movzx	edx, byte ptr [edi-5]
		lea	ebp, [ebp+4]
		mov	ah, [edi-3]
		mov	ecx, esi
		shl	dl, cl
		mov	al, bl
		movzx	ecx, byte ptr [esp+50h+var_40]
		shr	al, cl
		movzx	ecx, byte ptr [esp+50h+var_40]
		or	dl, al
		mov	al, ah
		mov	[ebp-5], dl
		mov	dl, [edi-2]
		shr	al, cl
		mov	ecx, esi
		shl	bl, cl
		or	al, bl
		mov	ebx, [esp+50h+var_40]
		mov	[ebp-4], al
		mov	cl, bl
		mov	al, dl
		shr	al, cl
		mov	ecx, esi
		shl	ah, cl
		mov	cl, bl
		or	al, ah
		mov	[ebp-3], al
		mov	al, [edi-1]
		shr	al, cl
		mov	ecx, esi
		shl	dl, cl
		or	al, dl
		sub	[esp+50h+var_3C], 1
		mov	[ebp-2], al
		jnz	short loc_6D8
		pop	edi

loc_739:				; CODE XREF: _cfbr_encrypt_block+3Aj
		mov	ecx, [esp+4Ch+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
_cfbr_encrypt_block endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _CRYPTO_cfb128_1_encrypt+191p
					; _CRYPTO_cfb128_8_encrypt+91p	...
		extrn __chkstk:near	; CODE XREF: _CRYPTO_cfb128_1_encrypt+5p
					; _CRYPTO_cfb128_8_encrypt+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _CRYPTO_cfb128_1_encrypt+Ar
					; _CRYPTO_cfb128_8_encrypt+Ar ...


		end
