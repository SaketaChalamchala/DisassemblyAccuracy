;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	71CD2FE6182C35859B2881588B2C0856
; Input	CRC32 :	76BD7C8C

; File Name   :	C:\compspace\Diff\openssl\obj\evp_test.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; char locret_5
locret_5:				; DATA XREF: _test1+1BCo
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_scanf_options
___local_stdio_scanf_options proc near	; CODE XREF: __vsscanf_l+12p
					; _sscanf+11p
					; DATA XREF: ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; char Format
Format:					; DATA XREF: _test1+304o
		retn
___local_stdio_scanf_options endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public __vsscanf_l
__vsscanf_l	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	0FFFFFFFFh
		push	[esp+10h+arg_0]
		call	___local_stdio_scanf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vsscanf
		add	esp, 1Ch
		retn
__vsscanf_l	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl convert(char *Src)
_convert	proc near		; CODE XREF: _main+1FEp _main+20Bp ...

Src		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Src]
		push	edi
		mov	edi, esi

; char loc_64
loc_64:					; DATA XREF: _test_digest+E1o
					; _test_digest+121o
		cmp	byte ptr [esi],	0
		jz	short loc_94
		nop	dword ptr [eax]

loc_6C:					; CODE XREF: _convert+36j
		cmp	byte ptr [esi+1], 0
		jz	short loc_9B
		lea	eax, [esp+8+Src]
		push	eax
		push	offset ??_C@_03IJFOLNOP@?$CF2x?$AA@ ; "%2x"
		push	esi		; Src
		call	_sscanf
		mov	al, byte ptr [esp+14h+Src]
		add	esi, 2
		mov	[edi], al
		add	esp, 0Ch
		inc	edi
		cmp	byte ptr [esi],	0
		jnz	short loc_6C

loc_94:					; CODE XREF: _convert+Bj
		sub	esi, edi
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_9B:					; CODE XREF: _convert+14j
		push	offset ??_C@_0BK@BIFOLIBK@Odd?5number?5of?5hex?5digits?$CB?$AA@	; "Odd number of hex digits!"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		push	4		; Code
		call	dword ptr ds:__imp__exit
_convert	endp

; ---------------------------------------------------------------------------
$LN14		db 0CCh
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _convert+50p _hexdump+11p ...

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl hexdump(FILE *File, int, int, int)
_hexdump	proc near		; CODE XREF: _test1+D0p _test1+EFp ...

File		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+File]
		push	edi
		push	[esp+0Ch+arg_4]
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		mov	edi, [esp+18h+arg_C]
		add	esp, 0Ch
		xor	ebx, ebx
		test	edi, edi
		jle	short loc_139
		push	ebp
		mov	ebp, [esp+10h+arg_8]

loc_10C:				; CODE XREF: _hexdump+52j
		test	bl, 0Fh
		jnz	short loc_120
		push	ebx
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		add	esp, 0Ch

loc_120:				; CODE XREF: _hexdump+2Bj
		movzx	eax, byte ptr [ebx+ebp]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		inc	ebx
		add	esp, 0Ch
		cmp	ebx, edi
		jl	short loc_10C
		pop	ebp

loc_139:				; CODE XREF: _hexdump+21j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		retn
_hexdump	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_1038	= dword	ptr -1038h
var_1034	= dword	ptr -1034h
var_1030	= dword	ptr -1030h
File		= dword	ptr -102Ch
var_1028	= dword	ptr -1028h
var_1024	= dword	ptr -1024h
var_1020	= dword	ptr -1020h
Src		= dword	ptr -101Ch
var_1018	= dword	ptr -1018h
var_1014	= dword	ptr -1014h
var_1010	= dword	ptr -1010h
Buf		= byte ptr -100Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 1030h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1030h+var_4], eax
		cmp	[esp+1030h+argc], 2
		push	esi
		mov	esi, [esp+1034h+argv]
		jz	short $LN49
		push	dword ptr [esi]
		push	offset ??_C@_0BA@DFJBFKNN@?$CFs?5?$DMtest?5file?$DO?6?$AA@ ; "%s <test file>\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 0Ch
		push	1		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN49:					; CODE XREF: _main+28j
		push	offset _CRYPTO_dbg_get_options
		push	offset _CRYPTO_dbg_set_options
		push	offset _CRYPTO_dbg_free
		push	offset _CRYPTO_dbg_realloc
		push	offset _CRYPTO_dbg_malloc
		call	_CRYPTO_set_mem_debug_functions
		push	3
		call	_CRYPTO_set_mem_debug_options
		push	1
		call	_CRYPTO_mem_ctrl
		mov	esi, [esi+4]
		push	offset ??_C@_01KDCPPGHE@r?$AA@ ; "r"
		push	esi		; Filename
		call	dword ptr ds:__imp__fopen
		add	esp, 24h
		mov	[esp+1034h+var_1024], eax
		test	eax, eax
		jnz	short $LN50
		push	esi		; ErrMsg
		call	dword ptr ds:__imp__perror
		add	esp, 4
		push	2		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN50:					; CODE XREF: _main+91j
		push	ebx
		push	ebp
		push	edi
		call	_ERR_load_crypto_strings
		call	_OpenSSL_add_all_ciphers
		call	_OpenSSL_add_all_digests
		call	_ENGINE_load_builtin_engines
		call	_ENGINE_register_all_ciphers
		call	_ENGINE_register_all_digests
		push	[esp+1040h+var_1024] ; File
		lea	eax, [esp+40h]
		xor	ebx, ebx
		push	1000h		; MaxCount
		push	eax		; Buf
		xor	ebp, ebp
		call	dword ptr ds:__imp__fgets
		add	esp, 0Ch
		test	eax, eax
		jz	loc_41B
		nop	dword ptr [eax+00000000h]

loc_23C:				; CODE XREF: _main+2C9j
		mov	al, [esp+3Ch]
		cmp	al, 23h	; '#'
		jz	loc_3F8
		cmp	al, 0Ah
		jz	loc_3F8
		lea	eax, [esp+3Ch]
		mov	[esp+1040h+var_1030], eax
		lea	eax, [esp+1040h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	[esp+1048h+var_1010], eax
		lea	eax, [esp+1048h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	[esp+1050h+Src], eax
		lea	eax, [esp+1050h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	[esp+1058h+var_1020], eax
		lea	eax, [esp+1058h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	[esp+1060h+var_1028], eax
		lea	eax, [esp+1060h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	ecx, [esp+1068h+var_1030]
		add	esp, 28h
		mov	[esp+1040h+File], eax
		cmp	byte ptr [ecx-1], 0Ah
		jnz	short loc_2DA
		xor	esi, esi
		mov	[esp+1040h+var_1030], 0FFFFFFFFh
		xor	edi, edi
		mov	byte ptr [ecx-1], 0
		xor	ebp, ebp
		xor	ebx, ebx
		jmp	short loc_346
; ---------------------------------------------------------------------------

loc_2DA:				; CODE XREF: _main+176j
		lea	eax, [esp+1040h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	esi, eax
		lea	eax, [esp+1048h+var_1030]
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	eax
		call	_sstrsep
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_311
		mov	eax, esi
		xor	ebp, ebp
		xor	esi, esi
		mov	[esp+1040h+var_1030], eax
		xor	ebx, ebx
		jmp	short loc_315
; ---------------------------------------------------------------------------

loc_311:				; CODE XREF: _main+1B5j
		mov	eax, [esp+1040h+var_1030]

loc_315:				; CODE XREF: _main+1C3j
		cmp	byte ptr [eax-1], 0Ah
		jnz	short loc_329
		mov	[esp+1040h+var_1030], 0FFFFFFFFh
		mov	byte ptr [eax-1], 0
		jmp	short loc_346
; ---------------------------------------------------------------------------

loc_329:				; CODE XREF: _main+1CDj
		lea	eax, [esp+1040h+var_1030]
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	eax
		call	_sstrsep
		push	eax		; Str
		call	dword ptr ds:__imp__atoi
		add	esp, 0Ch
		mov	[esp+1040h+var_1030], eax

loc_346:				; CODE XREF: _main+18Cj _main+1DBj
		push	[esp+1040h+Src]	; Src
		call	_convert
		push	[esp+1044h+var_1020] ; Src
		mov	[esp+40h], eax
		call	_convert
		push	[esp+1048h+var_1028] ; Src
		mov	dword ptr [esp+104Ch+Buf], eax
		call	_convert
		push	[esp+104Ch+File] ; Src
		mov	[esp+1050h+var_1014], eax
		call	_convert
		add	esp, 10h
		mov	[esp+1040h+var_1018], eax
		test	esi, esi
		jz	short loc_394
		push	esi		; Src
		call	_convert
		push	edi		; Src
		mov	ebx, eax
		call	_convert
		add	esp, 8
		mov	ebp, eax

loc_394:				; CODE XREF: _main+233j
		push	[esp+1040h+var_1010]
		call	_EVP_get_cipherbyname
		add	esp, 4
		test	eax, eax
		jz	short loc_3D7
		push	[esp+1040h+var_1030]
		push	ebp
		push	edi
		push	ebx
		push	esi
		push	[esp+1054h+var_1018]
		push	[esp+1058h+File]
		push	[esp+105Ch+var_1014]
		push	[esp+1060h+var_1028]
		push	dword ptr [esp+1064h+Buf]
		push	[esp+1068h+var_1020]
		push	dword ptr [esp+64h]
		push	[esp+1070h+Src]
		push	eax
		call	_test1
		add	esp, 38h
		jmp	short loc_3F8
; ---------------------------------------------------------------------------

loc_3D7:				; CODE XREF: _main+256j
		push	[esp+1040h+var_1018]
		mov	ebx, [esp+1044h+var_1010]
		push	[esp+1044h+File]
		push	[esp+1048h+var_1014]
		push	[esp+104Ch+var_1028]
		push	ebx
		call	_test_digest
		add	esp, 14h
		test	eax, eax
		jz	short loc_46C

loc_3F8:				; CODE XREF: _main+F6j	_main+FEj ...
		push	[esp+1040h+var_1024] ; File
		lea	eax, [esp+40h]
		xor	ebx, ebx
		push	1000h		; MaxCount
		push	eax		; Buf
		xor	ebp, ebp
		call	dword ptr ds:__imp__fgets
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_23C

loc_41B:				; CODE XREF: _main+E3j
		push	[esp+1040h+var_1024] ; File
		call	dword ptr ds:__imp__fclose
		call	_ENGINE_cleanup
		call	_EVP_cleanup
		call	_CRYPTO_cleanup_all_ex_data
		push	0
		call	_ERR_remove_thread_state
		call	_ERR_free_strings
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		call	_CRYPTO_mem_leaks_fp
		mov	ecx, [esp+1050h+var_4]
		add	esp, 10h
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1030h
		retn
; ---------------------------------------------------------------------------

loc_46C:				; CODE XREF: _main+2AAj
		push	ebx
		push	offset ??_C@_0P@CJCGDCLK@Can?8t?5find?5?$CFs?6?$AA@ ; "Can't find %s\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 0Ch
		push	3		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
$LN51		db 0CCh
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 490h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _test1+ACp _test1+B7Ap ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sscanf(const char	*Src, const char *Format, ...)
		public _sscanf
_sscanf		proc near		; CODE XREF: _convert+21p

Src		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Src]
		call	___local_stdio_scanf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vsscanf
		add	esp, 1Ch
		retn
_sscanf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sstrsep	proc near		; CODE XREF: _main+116p _main+129p ...

var_105		= byte ptr -105h
Dst		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 108h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+108h+var_4], eax
		push	ebx
		push	esi
		mov	esi, [esp+110h+arg_0]
		push	edi
		mov	edi, [esp+114h+arg_4]
		mov	ebx, [esi]
		mov	al, [ebx]
		mov	[esp+114h+var_105], al
		test	al, al
		jnz	short loc_537
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+108h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_537:				; CODE XREF: _sstrsep+33j
		push	100h		; Size
		lea	eax, [esp+118h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		mov	al, [edi]
		add	esp, 0Ch
		mov	[esp+114h+Dst],	1
		test	al, al
		jz	short loc_569
		xchg	ax, ax

loc_558:				; CODE XREF: _sstrsep+7Fj
		movzx	eax, al
		lea	edi, [edi+1]
		mov	[esp+eax+114h+Dst], 1
		mov	al, [edi]
		test	al, al
		jnz	short loc_558

loc_569:				; CODE XREF: _sstrsep+6Cj
		movzx	eax, [esp+114h+var_105]
		cmp	[esp+eax+114h+Dst], 0
		jnz	short loc_585
		mov	ecx, ebx
		nop

loc_578:				; CODE XREF: _sstrsep+9Bj
		inc	ecx
		mov	[esi], ecx
		movzx	eax, byte ptr [ecx]
		cmp	[esp+eax+114h+Dst], 0
		jz	short loc_578

loc_585:				; CODE XREF: _sstrsep+8Bj
		mov	ecx, [esi]
		cmp	byte ptr [ecx],	0
		jz	short loc_591
		mov	byte ptr [ecx],	0
		inc	dword ptr [esi]

loc_591:				; CODE XREF: _sstrsep+A2j
		mov	ecx, [esp+114h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
_sstrsep	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test1		proc near		; CODE XREF: _main+281p
					; _test_cipher+46p

var_10C8	= dword	ptr -10C8h
var_10C4	= dword	ptr -10C4h
var_10C0	= dword	ptr -10C0h
var_10BC	= dword	ptr -10BCh
var_10B8	= dword	ptr -10B8h
var_10B4	= dword	ptr -10B4h
var_10B0	= dword	ptr -10B0h
var_10AC	= dword	ptr -10ACh
var_10A8	= dword	ptr -10A8h
var_10A4	= dword	ptr -10A4h
var_10A0	= dword	ptr -10A0h
var_1014	= byte ptr -1014h
var_1008	= dword	ptr -1008h
var_1004	= byte ptr -1004h
var_FF8		= dword	ptr -0FF8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h
arg_34		= dword	ptr  38h
arg_3C		= dword	ptr  40h

		mov	eax, 10C8h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+10C8h+var_4], eax
		mov	eax, [esp+10C8h+arg_10]
		mov	ecx, [esp+10C8h+arg_34]
		mov	[esp+10C8h+var_10B8], eax
		mov	eax, [esp+10C8h+arg_14]
		mov	[esp+10C8h+var_10A4], eax
		mov	eax, [esp+10C8h+arg_1C]
		mov	[esp+10C8h+var_10AC], eax
		mov	eax, [esp+10C8h+arg_24]
		mov	[esp+10C8h+var_10B0], eax
		mov	eax, [esp+10C8h+arg_2C]
		mov	[esp+10C8h+var_10B4], eax
		mov	[esp+10C8h+var_10BC], ecx
		push	ebx
		mov	ebx, [esp+10CCh+arg_0]
		push	ebp		; Format
		mov	ebp, [esp+10D0h+arg_C]
		mov	[esp+10D0h+var_10C4], ebp
		push	esi
		mov	esi, [esp+10D4h+arg_4]
		mov	[esp+10D4h+var_10C0], esi
		push	edi		; Format
		cmp	ecx, 1
		jnz	short loc_633
		mov	eax, offset ??_C@_09OHJNCFDI@?$CIencrypt?$CJ?$AA@ ; "(encrypt)"
		jmp	short loc_642
; ---------------------------------------------------------------------------

loc_633:				; CODE XREF: _test1+7Ej
		test	ecx, ecx
		mov	eax, offset ??_C@_09KNIMCNCN@?$CIdecrypt?$CJ?$AA@ ; "(decrypt)"
		mov	edx, offset ??_C@_0BC@BAMMMJGG@?$CIencrypt?1decrypt?$CJ?$AA@ ; "(encrypt/decrypt)"
		cmovnz	eax, edx

loc_642:				; CODE XREF: _test1+85j
		push	eax
		push	ebx
		call	_EVP_CIPHER_nid
		push	eax
		call	_OBJ_nid2sn
		add	esp, 8
		push	eax
		push	offset ??_C@_0BF@MOFBENCO@Testing?5cipher?5?$CFs?$CFs?6?$AA@ ; "Testing	cipher %s%s\n"
		call	_printf
		mov	edi, [esp+10E4h+arg_8]
		add	esp, 0Ch
		push	edi		; int
		push	esi		; int
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_03CCEPDEKL@Key?$AA@ ; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		mov	eax, [esp+10E8h+var_10B8]
		add	esp, 10h
		test	eax, eax
		jz	short loc_6A3
		push	eax		; int
		push	ebp		; int
		push	offset ??_C@_02JDBEGKHA@IV?$AA@	; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h

loc_6A3:				; CODE XREF: _test1+DEj
		push	[esp+10D8h+arg_18] ; int
		push	[esp+10DCh+var_10A4] ; int
		push	offset ??_C@_09DOLMGAGM@Plaintext?$AA@ ; "Plaintext"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	[esp+10D8h+arg_20] ; int
		push	[esp+10DCh+var_10AC] ; int
		push	offset ??_C@_0L@ILPCGNDA@Ciphertext?$AA@ ; "Ciphertext"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		mov	eax, [esp+10E8h+arg_28]
		add	esp, 10h
		test	eax, eax
		jz	short loc_708
		push	eax		; int
		push	[esp+10DCh+var_10B0] ; int
		push	offset ??_C@_03BIFOHCEN@AAD?$AA@ ; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h

loc_708:				; CODE XREF: _test1+140j
		mov	eax, [esp+10D8h+arg_30]
		test	eax, eax
		jz	short loc_72D
		push	eax		; int
		push	[esp+10DCh+var_10B4] ; int
		push	offset ??_C@_03PJHNOEGB@Tag?$AA@ ; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h

loc_72D:				; CODE XREF: _test1+165j
		push	ebx
		call	_EVP_CIPHER_flags
		mov	ebp, eax
		push	ebx
		and	ebp, 0F0007h
		call	_EVP_CIPHER_key_length
		add	esp, 8
		cmp	edi, eax
		jz	short $LN176
		push	ebx
		call	_EVP_CIPHER_key_length
		add	esp, 4
		push	eax
		push	edi
		push	offset ??_C@_0CP@MEJKOKLG@Key?5length?5doesn?8t?5match?0?5got?5?$CFd@ ;	"Key length doesn't match, got %d expect"...
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 10h
		push	offset locret_5	; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN176:					; CODE XREF: _test1+19Aj
		lea	eax, [esp+10D8h+var_10A0]
		push	eax
		call	_EVP_CIPHER_CTX_init
		lea	eax, [esp+10DCh+var_10A0]
		push	1
		push	eax
		call	_EVP_CIPHER_CTX_set_flags
		mov	eax, [esp+10E4h+var_10BC]
		add	esp, 0Ch
		test	eax, eax
		jz	loc_D0F
		cmp	ebp, 6
		jnz	$LN180
		push	0
		push	0
		push	0
		lea	eax, [esp+10E4h+var_10A0]
		push	ebx
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short $LN177

loc_7B6:				; CODE XREF: _test1+9BBj
		push	offset ??_C@_0BE@HOKAFDP@EncryptInit?5failed?6?$AA@ ; "EncryptInit failed\n"

loc_7BB:				; CODE XREF: _test1+86Aj
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	(offset	___local_stdio_scanf_options+2)	; Code

loc_7D7:				; CODE XREF: _test1+8A9j _test1+911j ...
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN177:					; CODE XREF: _test1+208j
		push	0
		push	[esp+10DCh+var_10B8]
		lea	eax, [esp+10E0h+var_10A0]
		push	9
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short $LN178

loc_7F6:				; CODE XREF: _test1+79Fj
		push	offset ??_C@_0BG@GAFBNBKA@IV?5length?5set?5failed?6?$AA@ ; "IV length set failed\n"

loc_7FB:				; CODE XREF: _test1+3B5j
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	(offset	___local_stdio_scanf_options+3)	; Code

loc_817:				; CODE XREF: _test1+3F8j _test1+476j ...
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN178:					; CODE XREF: _test1+248j
		push	[esp+10D8h+var_10C4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+var_10C0]
		push	0
		push	0
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short $LN179
		push	offset ??_C@_0BD@HDGBHBMN@Key?1IV?5set?5failed?6?$AA@ ;	"Key/IV	set failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	(offset	___local_stdio_scanf_options+4)	; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN179:					; CODE XREF: _test1+28Cj
		mov	edi, [esp+10D8h+arg_28]
		test	edi, edi
		jz	loc_A8A
		push	edi
		push	[esp+10DCh+var_10B0]
		lea	eax, [esp+10E0h+var_10C8]
		push	eax
		lea	eax, [esp+10E4h+var_10A0]
		push	0
		push	eax
		call	_EVP_EncryptUpdate
		add	esp, 14h
		test	eax, eax
		jnz	loc_A8A
		push	offset ??_C@_0BA@PFIICIIA@AAD?5set?5failed?6?$AA@ ; "AAD set failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	offset Format	; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN180:					; CODE XREF: _test1+1ECj
		cmp	ebp, 7
		jnz	loc_A27
		push	0
		push	0
		push	0
		lea	eax, [esp+10E4h+var_10A0]
		push	ebx
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short $LN181
		push	offset ??_C@_0BE@HOKAFDP@EncryptInit?5failed?6?$AA@ ; "EncryptInit failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	(offset	___local_stdio_scanf_options+2)	; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN181:					; CODE XREF: _test1+32Bj
		push	0
		push	[esp+10DCh+var_10B8]
		lea	eax, [esp+10E0h+var_10A0]
		push	9
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short $LN182
		push	offset ??_C@_0BG@GAFBNBKA@IV?5length?5set?5failed?6?$AA@ ; "IV length set failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	(offset	___local_stdio_scanf_options+3)	; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN182:					; CODE XREF: _test1+36Bj
		push	0
		push	[esp+10DCh+arg_30]
		lea	eax, [esp+10E0h+var_10A0]
		push	11h
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short loc_966
		push	offset ??_C@_0BH@MMBGHKIC@Tag?5length?5set?5failed?6?$AA@ ; "Tag length	set failed\n"
		jmp	loc_7FB
; ---------------------------------------------------------------------------

loc_966:				; CODE XREF: _test1+3AEj
		push	[esp+10D8h+var_10C4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+var_10C0]
		push	0
		push	0
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_9A9

loc_983:				; CODE XREF: _test1+7C0j
		push	offset ??_C@_0BD@HDGBHBMN@Key?1IV?5set?5failed?6?$AA@ ;	"Key/IV	set failed\n"

loc_988:				; CODE XREF: _test1+423j
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Ch
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_9A9:				; CODE XREF: _test1+3D5j
		push	[esp+10D8h+arg_18]
		lea	eax, [esp+10DCh+var_10C8]
		push	0
		push	eax
		lea	eax, [esp+10E4h+var_10A0]
		push	0
		push	eax
		call	_EVP_EncryptUpdate
		add	esp, 14h
		test	eax, eax
		jnz	short loc_9D1
		push	offset ??_C@_0BN@LBOIFNBO@Plaintext?5length?5set?5failed?6?$AA@	; "Plaintext length set	failed\n"
		jmp	short loc_988
; ---------------------------------------------------------------------------

loc_9D1:				; CODE XREF: _test1+41Cj
		mov	edi, [esp+10D8h+arg_28]
		test	edi, edi
		jz	loc_A8A
		push	edi
		push	[esp+10DCh+var_10B0]
		lea	eax, [esp+10E0h+var_10C8]
		push	eax
		lea	eax, [esp+10E4h+var_10A0]
		push	0
		push	eax
		call	_EVP_EncryptUpdate
		add	esp, 14h
		test	eax, eax
		jnz	loc_A8A
		push	offset ??_C@_0BA@PFIICIIA@AAD?5set?5failed?6?$AA@ ; "AAD set failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Dh
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_A27:				; CODE XREF: _test1+30Fj
		cmp	ebp, 10002h
		jnz	short loc_A79
		xor	eax, eax
		cmp	[esp+10D8h+var_10B8], eax
		cmovnz	eax, [esp+10D8h+var_10C4]
		push	eax
		push	[esp+10DCh+var_10C0]
		lea	eax, [esp+10E0h+var_10A0]
		push	0
		push	ebx

loc_A46:				; CODE XREF: _test1+4DCj
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_A8A

loc_A53:				; CODE XREF: _test1+782j
		push	offset ??_C@_0BE@HOKAFDP@EncryptInit?5failed?6?$AA@ ; "EncryptInit failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Ah
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_A79:				; CODE XREF: _test1+481j
		push	[esp+10D8h+var_10C4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+var_10C0]
		push	0
		push	ebx
		jmp	short loc_A46
; ---------------------------------------------------------------------------

loc_A8A:				; CODE XREF: _test1+2BEj _test1+2DFj ...
		lea	eax, [esp+10D8h+var_10A0]
		push	0
		push	eax
		call	_EVP_CIPHER_CTX_set_padding
		push	[esp+10E0h+arg_18]
		lea	eax, [esp+10E4h+var_10C8]
		push	[esp+10E4h+var_10A4]
		push	eax
		lea	eax, [esp+10ECh+var_1004]
		push	eax
		lea	eax, [esp+10F0h+var_10A0]
		push	eax
		call	_EVP_EncryptUpdate
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_AE5
		push	offset ??_C@_0BA@JBNEJMO@Encrypt?5failed?6?$AA@	; "Encrypt failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	6
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_AE5:				; CODE XREF: _test1+511j
		lea	eax, [esp+10D8h+var_10A8]
		push	eax
		mov	eax, [esp+10DCh+var_10C8]
		lea	ecx, [esp+10DCh+var_1004]
		add	eax, ecx
		push	eax
		lea	eax, [esp+10E0h+var_10A0]
		push	eax
		call	_EVP_EncryptFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_B2F
		push	offset ??_C@_0BF@HLFMLEEK@EncryptFinal?5failed?6?$AA@ ;	"EncryptFinal failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	7
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_B2F:				; CODE XREF: _test1+55Bj
		mov	eax, [esp+10D8h+var_10A8]
		add	eax, [esp+10D8h+var_10C8]
		mov	edi, [esp+10D8h+arg_20]
		cmp	eax, edi
		jz	short loc_B60
		push	edi
		push	eax		; Format
		push	offset ??_C@_0CP@KPKLMHNB@Ciphertext?5length?5mismatch?5got?5?$CF@ ; "Ciphertext length	mismatch got %d	expec"...
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 10h
		push	8
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_B60:				; CODE XREF: _test1+594j
		mov	edx, [esp+10D8h+var_10AC]
		lea	ecx, [esp+10D8h+var_1004]
		sub	edi, 4
		jb	short loc_B81

loc_B70:				; CODE XREF: _test1+5D3j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_B8A
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_B70

loc_B81:				; CODE XREF: _test1+5C2j
		cmp	edi, 0FFFFFFFCh
		jz	loc_C12

loc_B8A:				; CODE XREF: _test1+5C8j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_BB7
		cmp	edi, 0FFFFFFFDh
		jz	short loc_C12
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_BB7
		cmp	edi, 0FFFFFFFEh
		jz	short loc_C12
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_BB7
		cmp	edi, 0FFFFFFFFh
		jz	short loc_C12
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_C12

loc_BB7:				; CODE XREF: _test1+5E2j _test1+5EFj ...
		push	offset ??_C@_0BF@DCDJHFEF@Ciphertext?5mismatch?6?$AA@ ;	"Ciphertext mismatch\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		mov	edi, [esp+10D4h+arg_2C]
		lea	eax, [esp+10D4h+var_FF8]
		add	esp, 8
		push	edi		; int
		push	eax		; int
		push	offset ??_C@_03NAKAHAII@Got?$AA@ ; int
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	edi		; int
		push	[esp+10D0h+var_10A0] ; int

loc_BF6:				; CODE XREF: _test1+752j
		push	offset ??_C@_08DDFFPEMA@Expected?$AA@ ;	"Expected"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	9
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_C12:				; CODE XREF: _test1+5D8j _test1+5E7j ...
		cmp	ebp, 6
		jz	short loc_C20
		cmp	ebp, 7
		jnz	loc_D03

loc_C20:				; CODE XREF: _test1+669j
		mov	edi, [esp+10D8h+arg_30]
		lea	eax, [esp+10D8h+var_1014]
		push	eax
		push	edi
		lea	eax, [esp+10E0h+var_10A0]
		push	10h
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short loc_C69
		push	offset ??_C@_0BA@HKOPOML@Get?5tag?5failed?6?$AA@ ; "Get	tag failed\n"

loc_C48:				; CODE XREF: _test1+7E9j
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Eh
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_C69:				; CODE XREF: _test1+695j
		mov	edx, [esp+10D8h+var_10B4]
		lea	ecx, [esp+10D8h+var_1014]
		sub	edi, 4
		jb	short loc_C8D
		nop	dword ptr [eax]

loc_C7C:				; CODE XREF: _test1+6DFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_C92
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_C7C

loc_C8D:				; CODE XREF: _test1+6CBj
		cmp	edi, 0FFFFFFFCh
		jz	short loc_D03

loc_C92:				; CODE XREF: _test1+6D4j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_CBF
		cmp	edi, 0FFFFFFFDh
		jz	short loc_D03
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_CBF
		cmp	edi, 0FFFFFFFEh
		jz	short loc_D03
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_CBF
		cmp	edi, 0FFFFFFFFh
		jz	short loc_D03
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_D03

loc_CBF:				; CODE XREF: _test1+6EAj _test1+6F7j ...
		push	offset ??_C@_0O@FPPFHIFD@Tag?5mismatch?6?$AA@ ;	"Tag mismatch\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		mov	ebx, [esp+10D4h+arg_3C]
		lea	eax, [esp+10D4h+var_1008]
		add	esp, 8
		push	ebx		; int
		push	eax		; int
		push	offset ??_C@_03NAKAHAII@Got?$AA@ ; int
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	ebx
		push	[esp+10D0h+var_10A8]
		jmp	loc_BF6
; ---------------------------------------------------------------------------

loc_D03:				; CODE XREF: _test1+66Ej _test1+6E4j ...
		mov	eax, [esp+10D8h+var_10BC]
		test	eax, eax
		jg	loc_1117

loc_D0F:				; CODE XREF: _test1+1E3j
		cmp	ebp, 6
		jnz	loc_DF0
		push	0
		push	0
		push	0
		lea	eax, [esp+10E4h+var_10A0]
		push	ebx
		push	eax
		call	_EVP_DecryptInit_ex
		add	esp, 14h
		test	eax, eax
		jz	loc_A53
		push	0
		push	[esp+10DCh+var_10B8]
		lea	eax, [esp+10E0h+var_10A0]
		push	9
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jz	loc_7F6
		push	[esp+10D8h+var_10C4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+var_10C0]
		push	0
		push	0
		push	eax
		call	_EVP_DecryptInit_ex
		add	esp, 14h
		test	eax, eax
		jz	loc_983
		push	[esp+10D8h+var_10B4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+arg_30]
		push	11h
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short loc_D9A
		push	offset ??_C@_0BA@DFLIIMNC@Set?5tag?5failed?6?$AA@ ; "Set tag failed\n"
		jmp	loc_C48
; ---------------------------------------------------------------------------

loc_D9A:				; CODE XREF: _test1+7E2j
		mov	eax, [esp+10D8h+arg_28]
		test	eax, eax
		jz	loc_F6D
		push	eax
		push	[esp+10DCh+var_10B0]
		lea	eax, [esp+10E0h+var_10C8]
		push	eax
		lea	eax, [esp+10E4h+var_10A0]
		push	0
		push	eax
		call	_EVP_DecryptUpdate
		add	esp, 14h
		test	eax, eax
		jnz	loc_F6D
		push	offset ??_C@_0BA@PFIICIIA@AAD?5set?5failed?6?$AA@ ; "AAD set failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Dh
		jmp	loc_817
; ---------------------------------------------------------------------------

loc_DF0:				; CODE XREF: _test1+766j
		cmp	ebp, 7
		jnz	loc_F39
		push	0
		push	0
		push	0
		lea	eax, [esp+10E4h+var_10A0]
		push	ebx
		push	eax
		call	_EVP_DecryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_E1B
		push	offset ??_C@_0BE@MIHKKFFF@DecryptInit?5failed?6?$AA@ ; "DecryptInit failed\n"
		jmp	loc_7BB
; ---------------------------------------------------------------------------

loc_E1B:				; CODE XREF: _test1+863j
		push	0
		push	[esp+10DCh+var_10B8]
		lea	eax, [esp+10E0h+var_10A0]
		push	9
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short loc_E5A
		push	offset ??_C@_0BG@GAFBNBKA@IV?5length?5set?5failed?6?$AA@ ; "IV length set failed\n"

loc_E39:				; CODE XREF: _test1+8D1j _test1+A45j
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Bh
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_E5A:				; CODE XREF: _test1+886j
		push	[esp+10D8h+var_10B4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+arg_30]
		push	11h
		push	eax
		call	_EVP_CIPHER_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jnz	short loc_E7F
		push	offset ??_C@_0BH@MMBGHKIC@Tag?5length?5set?5failed?6?$AA@ ; "Tag length	set failed\n"
		jmp	short loc_E39
; ---------------------------------------------------------------------------

loc_E7F:				; CODE XREF: _test1+8CAj
		push	[esp+10D8h+var_10C4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+var_10C0]
		push	0
		push	0
		push	eax
		call	_EVP_DecryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_EC2
		push	offset ??_C@_0BG@LIDKMPHM@Key?1Nonce?5set?5failed?6?$AA@ ; "Key/Nonce set failed\n"

loc_EA1:				; CODE XREF: _test1+93Dj
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Ch
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_EC2:				; CODE XREF: _test1+8EEj
		mov	ebx, [esp+10D8h+arg_18]
		lea	eax, [esp+10D8h+var_10C8]
		push	ebx
		push	0
		push	eax
		lea	eax, [esp+10E4h+var_10A0]
		push	0
		push	eax
		call	_EVP_DecryptUpdate
		add	esp, 14h
		test	eax, eax
		jnz	short loc_EEB
		push	offset ??_C@_0BN@LBOIFNBO@Plaintext?5length?5set?5failed?6?$AA@	; "Plaintext length set	failed\n"
		jmp	short loc_EA1
; ---------------------------------------------------------------------------

loc_EEB:				; CODE XREF: _test1+936j
		mov	eax, [esp+10D8h+arg_28]
		test	eax, eax
		jz	short loc_F74
		push	eax
		push	[esp+10DCh+var_10B0]
		lea	eax, [esp+10E0h+var_10C8]
		push	eax
		lea	eax, [esp+10E4h+var_10A0]
		push	0
		push	eax
		call	_EVP_EncryptUpdate
		add	esp, 14h
		test	eax, eax
		jnz	short loc_F74
		push	offset ??_C@_0BA@PFIICIIA@AAD?5set?5failed?6?$AA@ ; "AAD set failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	0Dh
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_F39:				; CODE XREF: _test1+847j
		cmp	ebp, 10002h
		jnz	loc_FD0
		xor	eax, eax
		cmp	[esp+10D8h+var_10B8], eax
		cmovnz	eax, [esp+10D8h+var_10C4]
		push	eax
		push	[esp+10DCh+var_10C0]
		lea	eax, [esp+10E0h+var_10A0]
		push	0
		push	ebx
		push	eax
		call	_EVP_DecryptInit_ex
		add	esp, 14h
		test	eax, eax
		jz	loc_7B6

loc_F6D:				; CODE XREF: _test1+7F7j _test1+818j ...
		mov	ebx, [esp+10D8h+arg_18]

loc_F74:				; CODE XREF: _test1+948j _test1+965j
		lea	eax, [esp+10D8h+var_10A0]
		push	0
		push	eax
		call	_EVP_CIPHER_CTX_set_padding
		mov	edi, [esp+10E0h+arg_20]
		lea	eax, [esp+10E0h+var_10C8]
		push	edi
		push	[esp+10E4h+var_10AC]
		push	eax
		lea	eax, [esp+10ECh+var_1004]
		push	eax
		lea	eax, [esp+10F0h+var_10A0]
		push	eax
		call	_EVP_DecryptUpdate
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_FF6
		push	offset ??_C@_0BA@HJIBHOKB@Decrypt?5failed?6?$AA@ ; "Decrypt failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	6
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_FD0:				; CODE XREF: _test1+993j
		push	[esp+10D8h+var_10C4]
		lea	eax, [esp+10DCh+var_10A0]
		push	[esp+10DCh+var_10C0]
		push	0
		push	ebx
		push	eax
		call	_EVP_DecryptInit_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_F6D
		push	offset ??_C@_0BE@MIHKKFFF@DecryptInit?5failed?6?$AA@ ; "DecryptInit failed\n"
		jmp	loc_E39
; ---------------------------------------------------------------------------

loc_FF6:				; CODE XREF: _test1+9FCj
		cmp	ebp, 7
		jz	short loc_1045
		lea	eax, [esp+10D8h+var_10A8]
		push	eax
		mov	eax, [esp+10DCh+var_10C8]
		lea	ecx, [esp+10DCh+var_1004]
		add	eax, ecx
		push	eax
		lea	eax, [esp+10E0h+var_10A0]
		push	eax
		call	_EVP_DecryptFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1045
		push	offset ??_C@_0BF@NGPEKMKM@DecryptFinal?5failed?6?$AA@ ;	"DecryptFinal failed\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	7
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_1045:				; CODE XREF: _test1+A4Dj _test1+A71j
		mov	eax, [esp+10D8h+var_10A8]
		add	eax, [esp+10D8h+var_10C8]
		cmp	eax, ebx
		jz	short loc_106F
		push	ebx
		push	eax		; Format
		push	offset ??_C@_0CO@COPDPABN@Plaintext?5length?5mismatch?5got?5?$CFd@ ; "Plaintext	length mismatch	got %d expect"...
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 10h
		push	8
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_106F:				; CODE XREF: _test1+AA3j
		mov	ebp, [esp+10D8h+var_10A4]
		lea	ecx, [esp+10D8h+var_1004]
		mov	edi, ebx
		mov	edx, ebp
		sub	edi, 4
		jb	short loc_1094

loc_1083:				; CODE XREF: _test1+AE6j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1099
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_1083

loc_1094:				; CODE XREF: _test1+AD5j
		cmp	edi, 0FFFFFFFCh
		jz	short loc_1117

loc_1099:				; CODE XREF: _test1+ADBj
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_10C6
		cmp	edi, 0FFFFFFFDh
		jz	short loc_1117
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_10C6
		cmp	edi, 0FFFFFFFEh
		jz	short loc_1117
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_10C6
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1117
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_1117

loc_10C6:				; CODE XREF: _test1+AF1j _test1+AFEj ...
		push	offset ??_C@_0BE@COAEEEAM@Plaintext?5mismatch?6?$AA@ ; "Plaintext mismatch\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		lea	eax, [esp+10CCh+var_FF8]
		push	ebx		; int
		push	eax		; int
		push	offset ??_C@_03NAKAHAII@Got?$AA@ ; int
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	ebx		; int
		push	ebp		; int
		push	offset ??_C@_08DDFFPEMA@Expected?$AA@ ;	"Expected"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	9
		jmp	loc_7D7
; ---------------------------------------------------------------------------

loc_1117:				; CODE XREF: _test1+75Dj _test1+AEBj ...
		lea	eax, [esp+10D8h+var_10A0]
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		mov	ecx, [esp+10E0h+var_4]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10C8h
		retn
_test1		endp

; ---------------------------------------------------------------------------
$LN175:
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl test1_exit(int Code)
_test1_exit	proc near

Code		= dword	ptr  4

		push	[esp+Code]	; Code
		call	dword ptr ds:__imp__exit
_test1_exit	endp

; ---------------------------------------------------------------------------
$LN4		db 0CCh
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test_cipher	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h
arg_34		= dword	ptr  38h

		push	[esp+arg_0]
		call	_EVP_get_cipherbyname
		add	esp, 4
		test	eax, eax
		jnz	short loc_1165
		retn
; ---------------------------------------------------------------------------

loc_1165:				; CODE XREF: _test_cipher+Ej
		push	[esp+arg_34]
		push	[esp+4+arg_30]
		push	[esp+8+arg_2C]
		push	[esp+0Ch+arg_28]
		push	[esp+10h+arg_24]
		push	[esp+14h+arg_20]
		push	[esp+18h+arg_1C]
		push	[esp+1Ch+arg_18]
		push	[esp+20h+arg_14]
		push	[esp+24h+arg_10]
		push	[esp+28h+arg_C]
		push	[esp+2Ch+arg_8]
		push	[esp+30h+arg_4]
		push	eax
		call	_test1
		add	esp, 38h
		mov	eax, 1
		retn
_test_cipher	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test_digest	proc near		; CODE XREF: _main+2A0p

var_64		= dword	ptr -64h
Format		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 64h ; 'd'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+64h+var_4], eax
		mov	eax, [esp+64h+arg_0]
		mov	ecx, [esp+64h+arg_C]
		push	ebp
		mov	ebp, [esp+68h+arg_4]
		push	esi		; Format
		push	eax
		mov	[esp+70h+var_64], ecx
		call	_EVP_get_digestbyname
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_11EF
		pop	esi
		pop	ebp
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_11EF:				; CODE XREF: _test_digest+34j
		push	ebx
		push	edi		; Format
		push	esi
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2sn
		push	eax
		push	offset ??_C@_0BD@GPJGODAN@Testing?5digest?5?$CFs?6?$AA@	; "Testing digest %s\n"
		call	_printf
		mov	edi, dword ptr ds:__imp____acrt_iob_func
		add	esp, 10h
		push	[esp+74h+arg_8]	; int
		push	ebp		; int
		push	offset ??_C@_09DOLMGAGM@Plaintext?$AA@ ; "Plaintext"
		push	1
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		mov	ebx, [esp+84h+arg_10]
		add	esp, 10h
		push	ebx		; int
		push	[esp+78h+var_64] ; int
		push	offset ??_C@_06MHCCOJOO@Digest?$AA@ ; "Digest"
		push	1
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		lea	eax, [esp+84h+var_5C]
		push	eax
		call	_EVP_MD_CTX_init
		push	0
		lea	eax, [esp+8Ch+var_5C]
		push	esi
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 20h
		test	eax, eax
		jnz	short $LN20
		push	offset ??_C@_0BD@DGNGHNOF@DigestInit?5failed?6?$AA@ ; "DigestInit failed\n"
		push	2
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	edi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	offset loc_64	; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN20:					; CODE XREF: _test_digest+C0j
		push	[esp+74h+arg_8]
		lea	eax, [esp+78h+var_5C]
		push	ebp
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jnz	short $LN21
		push	offset ??_C@_0BF@LBBMAPDP@DigestUpdate?5failed?6?$AA@ ;	"DigestUpdate failed\n"

loc_12AF:				; CODE XREF: _test_digest+149j
		push	2
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	2
		call	edi ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 10h
		push	(offset	loc_64+1) ; Code

loc_12CB:				; CODE XREF: _test_digest+179j
					; _test_digest+21Cj
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _test_digest+100j
		lea	eax, [esp+74h+Format]
		push	eax
		lea	eax, [esp+78h+var_44]
		push	eax
		lea	eax, [esp+7Ch+var_5C]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_12F3
		push	offset ??_C@_0BE@BNGLLDPI@DigestFinal?5failed?6?$AA@ ; "DigestFinal failed\n"
		jmp	short loc_12AF
; ---------------------------------------------------------------------------

loc_12F3:				; CODE XREF: _test_digest+142j
		lea	eax, [esp+74h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	eax, [esp+78h+Format]
		add	esp, 4
		cmp	eax, ebx
		jz	short loc_1323
		push	ebx
		push	eax		; Format
		push	offset ??_C@_0CM@BOPMGKML@Digest?5length?5mismatch?0?5got?5?$CFd?5e@ ; "Digest length mismatch,	got %d expected"...
		push	2
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 10h
		push	66h ; 'f'
		jmp	short loc_12CB
; ---------------------------------------------------------------------------

loc_1323:				; CODE XREF: _test_digest+15Ej
		mov	ebp, [esp+74h+var_64]
		lea	ecx, [esp+74h+var_44]
		mov	esi, ebx
		mov	edx, ebp
		sub	esi, 4
		jb	short loc_1349
		nop	dword ptr [eax+00h]

loc_1338:				; CODE XREF: _test_digest+19Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_134E
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1338

loc_1349:				; CODE XREF: _test_digest+18Aj
		cmp	esi, 0FFFFFFFCh
		jz	short loc_13C9

loc_134E:				; CODE XREF: _test_digest+194j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_137B
		cmp	esi, 0FFFFFFFDh
		jz	short loc_13C9
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_137B
		cmp	esi, 0FFFFFFFEh
		jz	short loc_13C9
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_137B
		cmp	esi, 0FFFFFFFFh
		jz	short loc_13C9
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_13C9

loc_137B:				; CODE XREF: _test_digest+1AAj
					; _test_digest+1B7j ...
		push	offset ??_C@_0BB@MNOOPCON@Digest?5mismatch?6?$AA@ ; "Digest mismatch\n"
		push	2
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		lea	eax, [esp+68h+var_38]
		push	ebx		; int
		push	eax		; int
		push	offset ??_C@_03NAKAHAII@Got?$AA@ ; int
		push	2
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	ebx		; int
		push	ebp		; int
		push	offset ??_C@_08DDFFPEMA@Expected?$AA@ ;	"Expected"
		push	2
		call	edi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		push	67h ; 'g'
		jmp	loc_12CB
; ---------------------------------------------------------------------------

loc_13C9:				; CODE XREF: _test_digest+1A4j
					; _test_digest+1AFj ...
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		lea	eax, [esp+78h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	ecx, [esp+7Ch+var_4]
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
_test_digest	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ustrsep	proc near
		jmp	_sstrsep	; $LN19
_ustrsep	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1400h
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; char `string'[3]
??_C@_02DKCKIIND@?$CFs?$AA@ db '%s',0   ; DATA XREF: _hexdump+Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1404h
; COMDAT (pick any)
		public ??_C@_05NCCIJLFN@?6?$CF04x?$AA@
; char `string'[]
??_C@_05NCCIJLFN@?6?$CF04x?$AA@	db 0Ah	; DATA XREF: _hexdump+2Eo
		db '%04x',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 140Ch
; COMDAT (pick any)
		public ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
; char `string'[]
??_C@_05HAJCMBLP@?5?$CF02x?$AA@	db ' %02x',0 ; DATA XREF: _hexdump+41o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1414h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; char `string'[2]
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _hexdump:loc_139o
					; _main+1E1o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1418h
; COMDAT (pick any)
		public ??_C@_0BK@BIFOLIBK@Odd?5number?5of?5hex?5digits?$CB?$AA@
; char `string'[]
??_C@_0BK@BIFOLIBK@Odd?5number?5of?5hex?5digits?$CB?$AA@ db 'Odd number of hex digits!',0
					; DATA XREF: _convert:loc_9Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1434h
; COMDAT (pick any)
		public ??_C@_03IJFOLNOP@?$CF2x?$AA@
; char `string'[4]
??_C@_03IJFOLNOP@?$CF2x?$AA@ db	'%2x',0 ; DATA XREF: _convert+1Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1438h
; COMDAT (pick any)
		public ??_C@_09OHJNCFDI@?$CIencrypt?$CJ?$AA@
; `string'
??_C@_09OHJNCFDI@?$CIencrypt?$CJ?$AA@ db '(encrypt)',0 ; DATA XREF: _test1+80o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1444h
; COMDAT (pick any)
		public ??_C@_09KNIMCNCN@?$CIdecrypt?$CJ?$AA@
; `string'
??_C@_09KNIMCNCN@?$CIdecrypt?$CJ?$AA@ db '(decrypt)',0 ; DATA XREF: _test1+89o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1450h
; COMDAT (pick any)
		public ??_C@_0BC@BAMMMJGG@?$CIencrypt?1decrypt?$CJ?$AA@
; `string'
??_C@_0BC@BAMMMJGG@?$CIencrypt?1decrypt?$CJ?$AA@ db '(encrypt/decrypt)',0
					; DATA XREF: _test1+8Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1464h
; COMDAT (pick any)
		public ??_C@_0BF@MOFBENCO@Testing?5cipher?5?$CFs?$CFs?6?$AA@
; char `string'[]
??_C@_0BF@MOFBENCO@Testing?5cipher?5?$CFs?$CFs?6?$AA@ db 'Testing cipher %s%s',0Ah,0
					; DATA XREF: _test1+A7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 147Ch
; COMDAT (pick any)
		public ??_C@_03CCEPDEKL@Key?$AA@
; `string'
??_C@_03CCEPDEKL@Key?$AA@ dd 79654Bh	; DATA XREF: _test1+C3o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1480h
; COMDAT (pick any)
		public ??_C@_02JDBEGKHA@IV?$AA@
; `string'
??_C@_02JDBEGKHA@IV?$AA@ db 49h, 56h, 0	; DATA XREF: _test1+E2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1484h
; COMDAT (pick any)
		public ??_C@_09DOLMGAGM@Plaintext?$AA@
; `string'
??_C@_09DOLMGAGM@Plaintext?$AA@	db 'Plaintext',0 ; DATA XREF: _test1+102o
					; _test_digest+71o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1490h
; COMDAT (pick any)
		public ??_C@_0L@ILPCGNDA@Ciphertext?$AA@
; `string'
??_C@_0L@ILPCGNDA@Ciphertext?$AA@ db 'Ciphertext',0 ; DATA XREF: _test1+122o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 149Ch
; COMDAT (pick any)
		public ??_C@_03BIFOHCEN@AAD?$AA@
; `string'
??_C@_03BIFOHCEN@AAD?$AA@ dd 444141h	; DATA XREF: _test1+147o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14A0h
; COMDAT (pick any)
		public ??_C@_03PJHNOEGB@Tag?$AA@
; `string'
??_C@_03PJHNOEGB@Tag?$AA@ dd 676154h	; DATA XREF: _test1+16Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14A4h
; COMDAT (pick any)
		public ??_C@_0CP@MEJKOKLG@Key?5length?5doesn?8t?5match?0?5got?5?$CFd@
; char `string'[]
??_C@_0CP@MEJKOKLG@Key?5length?5doesn?8t?5match?0?5got?5?$CFd@ db 'Key length doesn',27h,'t match, got %d expected %lu',0Ah,0
					; DATA XREF: _test1+1A7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14D4h
; COMDAT (pick any)
		public ??_C@_0BE@HOKAFDP@EncryptInit?5failed?6?$AA@
; char `string'[]
??_C@_0BE@HOKAFDP@EncryptInit?5failed?6?$AA@ db	'EncryptInit failed',0Ah,0
					; DATA XREF: _test1:loc_7B6o
					; _test1+32Do ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14E8h
; COMDAT (pick any)
		public ??_C@_0BG@GAFBNBKA@IV?5length?5set?5failed?6?$AA@
; char `string'[]
??_C@_0BG@GAFBNBKA@IV?5length?5set?5failed?6?$AA@ db 'IV length set failed',0Ah,0
					; DATA XREF: _test1:loc_7F6o
					; _test1+36Do ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1500h
; COMDAT (pick any)
		public ??_C@_0BD@HDGBHBMN@Key?1IV?5set?5failed?6?$AA@
; char `string'[]
??_C@_0BD@HDGBHBMN@Key?1IV?5set?5failed?6?$AA@ db 'Key/IV set failed',0Ah,0
					; DATA XREF: _test1+28Eo
					; _test1:loc_983o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1514h
; COMDAT (pick any)
		public ??_C@_0BA@PFIICIIA@AAD?5set?5failed?6?$AA@
; char `string'[]
??_C@_0BA@PFIICIIA@AAD?5set?5failed?6?$AA@ db 'AAD set failed',0Ah,0
					; DATA XREF: _test1+2E5o _test1+455o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1524h
; COMDAT (pick any)
		public ??_C@_0BH@MMBGHKIC@Tag?5length?5set?5failed?6?$AA@
; `string'
??_C@_0BH@MMBGHKIC@Tag?5length?5set?5failed?6?$AA@ db 'Tag length set failed',0Ah,0
					; DATA XREF: _test1+3B0o _test1+8CCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 153Ch
; COMDAT (pick any)
		public ??_C@_0BN@LBOIFNBO@Plaintext?5length?5set?5failed?6?$AA@
; `string'
??_C@_0BN@LBOIFNBO@Plaintext?5length?5set?5failed?6?$AA@ db 'Plaintext length set failed',0Ah,0
					; DATA XREF: _test1+41Eo _test1+938o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 155Ch
; COMDAT (pick any)
		public ??_C@_0BA@JBNEJMO@Encrypt?5failed?6?$AA@
; char `string'[]
??_C@_0BA@JBNEJMO@Encrypt?5failed?6?$AA@ db 'Encrypt failed',0Ah,0 ; DATA XREF: _test1+513o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 156Ch
; COMDAT (pick any)
		public ??_C@_0BF@HLFMLEEK@EncryptFinal?5failed?6?$AA@
; char `string'[]
??_C@_0BF@HLFMLEEK@EncryptFinal?5failed?6?$AA@ db 'EncryptFinal failed',0Ah,0
					; DATA XREF: _test1+55Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1584h
; COMDAT (pick any)
		public ??_C@_0CP@KPKLMHNB@Ciphertext?5length?5mismatch?5got?5?$CF@
; `string'
??_C@_0CP@KPKLMHNB@Ciphertext?5length?5mismatch?5got?5?$CF@ db 'Ciphertext length mismatch got %d expected %d',0Ah,0
					; DATA XREF: _test1+598o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15B4h
; COMDAT (pick any)
		public ??_C@_0BF@DCDJHFEF@Ciphertext?5mismatch?6?$AA@
; `string'
??_C@_0BF@DCDJHFEF@Ciphertext?5mismatch?6?$AA@ db 'Ciphertext mismatch',0Ah,0
					; DATA XREF: _test1:loc_BB7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15CCh
; COMDAT (pick any)
		public ??_C@_03NAKAHAII@Got?$AA@
; `string'
??_C@_03NAKAHAII@Got?$AA@ dd 746F47h	; DATA XREF: _test1+630o _test1+738o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15D0h
; COMDAT (pick any)
		public ??_C@_08DDFFPEMA@Expected?$AA@
; `string'
??_C@_08DDFFPEMA@Expected?$AA@ db 'Expected',0 ; DATA XREF: _test1:loc_BF6o
					; _test1+B4Fo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15DCh
; COMDAT (pick any)
		public ??_C@_0BA@HKOPOML@Get?5tag?5failed?6?$AA@
; char `string'[]
??_C@_0BA@HKOPOML@Get?5tag?5failed?6?$AA@ db 'Get tag failed',0Ah,0 ; DATA XREF: _test1+697o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15ECh
; COMDAT (pick any)
		public ??_C@_0O@FPPFHIFD@Tag?5mismatch?6?$AA@
; `string'
??_C@_0O@FPPFHIFD@Tag?5mismatch?6?$AA@ db 'Tag mismatch',0Ah,0 ; DATA XREF: _test1:loc_CBFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15FCh
; COMDAT (pick any)
		public ??_C@_0BA@DFLIIMNC@Set?5tag?5failed?6?$AA@
; `string'
??_C@_0BA@DFLIIMNC@Set?5tag?5failed?6?$AA@ db 'Set tag failed',0Ah,0
					; DATA XREF: _test1+7E4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 160Ch
; COMDAT (pick any)
		public ??_C@_0BE@MIHKKFFF@DecryptInit?5failed?6?$AA@
; `string'
??_C@_0BE@MIHKKFFF@DecryptInit?5failed?6?$AA@ db 'DecryptInit failed',0Ah,0
					; DATA XREF: _test1+865o _test1+A40o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1620h
; COMDAT (pick any)
		public ??_C@_0BG@LIDKMPHM@Key?1Nonce?5set?5failed?6?$AA@
; char `string'[]
??_C@_0BG@LIDKMPHM@Key?1Nonce?5set?5failed?6?$AA@ db 'Key/Nonce set failed',0Ah,0
					; DATA XREF: _test1+8F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1638h
; COMDAT (pick any)
		public ??_C@_0BA@HJIBHOKB@Decrypt?5failed?6?$AA@
; char `string'[]
??_C@_0BA@HJIBHOKB@Decrypt?5failed?6?$AA@ db 'Decrypt failed',0Ah,0 ; DATA XREF: _test1+9FEo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1648h
; COMDAT (pick any)
		public ??_C@_0BF@NGPEKMKM@DecryptFinal?5failed?6?$AA@
; char `string'[]
??_C@_0BF@NGPEKMKM@DecryptFinal?5failed?6?$AA@ db 'DecryptFinal failed',0Ah,0
					; DATA XREF: _test1+A73o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1660h
; COMDAT (pick any)
		public ??_C@_0CO@COPDPABN@Plaintext?5length?5mismatch?5got?5?$CFd@
; `string'
??_C@_0CO@COPDPABN@Plaintext?5length?5mismatch?5got?5?$CFd@ db 'Plaintext length mismatch got %d expected %d',0Ah,0
					; DATA XREF: _test1+AA7o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1690h
; COMDAT (pick any)
		public ??_C@_0BE@COAEEEAM@Plaintext?5mismatch?6?$AA@
; `string'
??_C@_0BE@COAEEEAM@Plaintext?5mismatch?6?$AA@ db 'Plaintext mismatch',0Ah,0
					; DATA XREF: _test1:loc_10C6o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16A4h
; COMDAT (pick any)
		public ??_C@_0BD@GPJGODAN@Testing?5digest?5?$CFs?6?$AA@
; char `string'[]
??_C@_0BD@GPJGODAN@Testing?5digest?5?$CFs?6?$AA@ db 'Testing digest %s',0Ah,0
					; DATA XREF: _test_digest+56o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16B8h
; COMDAT (pick any)
		public ??_C@_06MHCCOJOO@Digest?$AA@
; `string'
??_C@_06MHCCOJOO@Digest?$AA@ db	'Digest',0 ; DATA XREF: _test_digest+92o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16C0h
; COMDAT (pick any)
		public ??_C@_0BD@DGNGHNOF@DigestInit?5failed?6?$AA@
; char `string'[]
??_C@_0BD@DGNGHNOF@DigestInit?5failed?6?$AA@ db	'DigestInit failed',0Ah,0
					; DATA XREF: _test_digest+C2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16D4h
; COMDAT (pick any)
		public ??_C@_0BF@LBBMAPDP@DigestUpdate?5failed?6?$AA@
; char `string'[]
??_C@_0BF@LBBMAPDP@DigestUpdate?5failed?6?$AA@ db 'DigestUpdate failed',0Ah,0
					; DATA XREF: _test_digest+102o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16ECh
; COMDAT (pick any)
		public ??_C@_0BE@BNGLLDPI@DigestFinal?5failed?6?$AA@
; `string'
??_C@_0BE@BNGLLDPI@DigestFinal?5failed?6?$AA@ db 'DigestFinal failed',0Ah,0
					; DATA XREF: _test_digest+144o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1700h
; COMDAT (pick any)
		public ??_C@_0CM@BOPMGKML@Digest?5length?5mismatch?0?5got?5?$CFd?5e@
; `string'
??_C@_0CM@BOPMGKML@Digest?5length?5mismatch?0?5got?5?$CFd?5e@ db 'Digest length mismatch, got %d expected %d',0Ah,0
					; DATA XREF: _test_digest+162o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 172Ch
; COMDAT (pick any)
		public ??_C@_0BB@MNOOPCON@Digest?5mismatch?6?$AA@
; `string'
??_C@_0BB@MNOOPCON@Digest?5mismatch?6?$AA@ db 'Digest mismatch',0Ah,0
					; DATA XREF: _test_digest:loc_137Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1740h
; COMDAT (pick any)
		public ??_C@_0BA@DFJBFKNN@?$CFs?5?$DMtest?5file?$DO?6?$AA@
; char `string'[]
??_C@_0BA@DFJBFKNN@?$CFs?5?$DMtest?5file?$DO?6?$AA@ db '%s <test file>',0Ah,0
					; DATA XREF: _main+2Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1750h
; COMDAT (pick any)
		public ??_C@_01KDCPPGHE@r?$AA@
; char `string'[]
??_C@_01KDCPPGHE@r?$AA@	db 'r',0        ; DATA XREF: _main+7Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1754h
; COMDAT (pick any)
		public ??_C@_01JLIPDDHJ@?3?$AA@
; `string'
??_C@_01JLIPDDHJ@?3?$AA@ db 3Ah, 0	; DATA XREF: _main+110o _main+123o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1758h
; COMDAT (pick any)
		public ??_C@_0P@CJCGDCLK@Can?8t?5find?5?$CFs?6?$AA@
; char `string'[]
??_C@_0P@CJCGDCLK@Can?8t?5find?5?$CFs?6?$AA@ db	'Can',27h,'t find %s',0Ah,0
					; DATA XREF: _main+321o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _convert+46p
					; _main+33p ...
; int __cdecl _fclose(FILE *File)
		extrn __imp__fclose:near ; CODE	XREF: _main+2D3p
					; DATA XREF: _main+2D3r
; char *__cdecl	_fgets(char *Buf, int MaxCount,	FILE *File)
		extrn __imp__fgets:near	; CODE XREF: _main+D8p	_main+2BEp
					; DATA XREF: ...
; FILE *__cdecl	_fopen(const char *Filename, const char	*Mode)
		extrn __imp__fopen:near	; CODE XREF: _main+82p
					; DATA XREF: _main+82r
; void __cdecl _perror(const char *ErrMsg)
		extrn __imp__perror:near ; CODE	XREF: _main+94p
					; DATA XREF: _main+94r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p	...
		extrn __imp____stdio_common_vsscanf:near ; CODE	XREF: __vsscanf_l+1Cp
					; _sscanf+1Bp
					; DATA XREF: ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _convert+5Ap _main+47p ...
; int __cdecl _atoi(const char *Str)
		extrn __imp__atoi:near	; CODE XREF: _main+1EDp
					; DATA XREF: _main+1EDr
		extrn _CRYPTO_mem_ctrl:near ; CODE XREF: _main+74p
		extrn _CRYPTO_cleanup_all_ex_data:near ; CODE XREF: _main+2E3p
		extrn _CRYPTO_set_mem_debug_functions:near ; CODE XREF:	_main+66p
		extrn _CRYPTO_set_mem_debug_options:near ; CODE	XREF: _main+6Dp
		extrn _CRYPTO_dbg_malloc:near ;	DATA XREF: _main+61o
		extrn _CRYPTO_dbg_realloc:near ; DATA XREF: _main+5Co
		extrn _CRYPTO_dbg_free:near ; DATA XREF: _main+57o
		extrn _CRYPTO_dbg_set_options:near ; DATA XREF:	_main+52o
		extrn _CRYPTO_dbg_get_options:near ; DATA XREF:	_main:$LN49o
		extrn _CRYPTO_mem_leaks_fp:near	; CODE XREF: _main+2FDp
		extrn _OBJ_nid2sn:near	; CODE XREF: _test1+9Ep
					; _test_digest+50p
		extrn _EVP_MD_type:near	; CODE XREF: _test_digest+4Ap
		extrn _EVP_CIPHER_nid:near ; CODE XREF:	_test1+98p
		extrn _EVP_CIPHER_key_length:near ; CODE XREF: _test1+190p
					; _test1+19Dp
		extrn _EVP_CIPHER_flags:near ; CODE XREF: _test1+182p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _test_digest+A9p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _test_digest+150p
					; _test_digest+230p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _test_digest+B6p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _test_digest+F6p
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _test_digest+138p
		extrn _EVP_CIPHER_CTX_set_flags:near ; CODE XREF: _test1+1D5p
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _test1+1FEp
					; _test1+282p ...
		extrn _EVP_EncryptUpdate:near ;	CODE XREF: _test1+2D5p
					; _test1+412p ...
		extrn _EVP_EncryptFinal_ex:near	; CODE XREF: _test1+551p
		extrn _EVP_DecryptInit_ex:near ; CODE XREF: _test1+778p
					; _test1+7B6p ...
		extrn _EVP_DecryptUpdate:near ;	CODE XREF: _test1+80Ep
					; _test1+92Cp ...
		extrn _EVP_DecryptFinal_ex:near	; CODE XREF: _test1+A67p
		extrn _EVP_CIPHER_CTX_init:near	; CODE XREF: _test1+1C9p
		extrn _EVP_CIPHER_CTX_cleanup:near ; CODE XREF:	_test1+B70p
		extrn _EVP_CIPHER_CTX_set_padding:near ; CODE XREF: _test1+4E5p
					; _test1+9CFp
		extrn _EVP_CIPHER_CTX_ctrl:near	; CODE XREF: _test1+23Ep
					; _test1+361p ...
		extrn _OpenSSL_add_all_ciphers:near ; CODE XREF: _main+ADp
		extrn _OpenSSL_add_all_digests:near ; CODE XREF: _main+B2p
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _main+24Cp
					; _test_cipher+4p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _test_digest+28p
		extrn _EVP_cleanup:near	; CODE XREF: _main+2DEp
		extrn _ERR_print_errors_fp:near	; CODE XREF: _test1+221p
					; _test1+261p ...
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _main+A8p
		extrn _ERR_free_strings:near ; CODE XREF: _main+2EFp
		extrn _ERR_remove_thread_state:near ; CODE XREF: _main+2EAp
		extrn _ENGINE_load_builtin_engines:near	; CODE XREF: _main+B7p
		extrn _ENGINE_register_all_ciphers:near	; CODE XREF: _main+BCp
		extrn _ENGINE_register_all_digests:near	; CODE XREF: _main+C1p
		extrn _ENGINE_cleanup:near ; CODE XREF:	_main+2D9p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _main+314p
					; _sstrsep+43p	...
		extrn __chkstk:near	; CODE XREF: _main+5p _sstrsep+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _sstrsep+5Bp
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
; `__local_stdio_scanf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:near
					; DATA XREF: ___local_stdio_scanf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar
					; _sstrsep+Ar ...


		end
