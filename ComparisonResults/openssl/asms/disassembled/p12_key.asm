;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5F9B50E0809B3936723BDDD9F8CC8748
; Input	CRC32 :	95C7F6E6

; File Name   :	C:\compspace\Diff\openssl\obj\p12_key.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PKCS12_key_gen_asc(int, int, int,	int, char, int,	size_t Size, void *Dst,	int)
		public _PKCS12_key_gen_asc
_PKCS12_key_gen_asc proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h
arg_14		= dword	ptr  18h
Size		= dword	ptr  1Ch
Dst		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jnz	short loc_1D
		xor	ecx, ecx
		mov	[esp+4+arg_0], eax
		mov	[esp+4+var_4], ecx
		jmp	short loc_57
; ---------------------------------------------------------------------------

loc_1D:					; CODE XREF: _PKCS12_key_gen_asc+10j
		lea	ecx, [esp+4+var_4]
		push	ecx
		lea	ecx, [esp+8+arg_0]
		push	ecx
		push	[esp+0Ch+arg_4]
		push	eax
		call	_OPENSSL_asc2uni
		add	esp, 10h
		test	eax, eax
		jnz	short loc_50
		push	5Ch ; '\'
		push	offset ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_key.c"
		push	41h ; 'A'
		push	6Eh ; 'n'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_50:					; CODE XREF: _PKCS12_key_gen_asc+35j
		mov	eax, [esp+4+arg_0]
		mov	ecx, [esp+4+var_4]

loc_57:					; CODE XREF: _PKCS12_key_gen_asc+1Bj
		push	esi
		push	[esp+8+arg_20]	; int
		push	[esp+0Ch+Dst]	; Dst
		push	[esp+10h+Size]	; Size
		push	[esp+14h+arg_14] ; int
		push	dword ptr [esp+18h+arg_10] ; char
		push	[esp+1Ch+arg_C]	; int
		push	[esp+20h+arg_8]	; int
		push	ecx		; int
		push	eax		; int
		call	_PKCS12_key_gen_uni
		mov	esi, eax
		add	esp, 24h
		test	esi, esi
		jg	short loc_89
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_89:					; CODE XREF: _PKCS12_key_gen_asc+82j
		mov	eax, [esp+8+arg_0]
		test	eax, eax
		jz	short loc_A7
		push	[esp+8+var_4]
		push	eax
		call	_OPENSSL_cleanse
		push	[esp+10h+arg_0]
		call	_CRYPTO_free
		add	esp, 0Ch

loc_A7:					; CODE XREF: _PKCS12_key_gen_asc+8Fj
		mov	eax, esi
		pop	esi
		pop	ecx
		retn
_PKCS12_key_gen_asc endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PKCS12_key_gen_uni(int, int, int,	int, char, int,	size_t Size, void *Dst,	int)
		public _PKCS12_key_gen_uni
_PKCS12_key_gen_uni proc near		; CODE XREF: _PKCS12_key_gen_asc+76p

var_44		= dword	ptr -44h
Src		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h
arg_14		= dword	ptr  18h
Size		= dword	ptr  1Ch
Dst		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 44h ; 'D'
		call	__chkstk
		push	ebx
		lea	eax, [esp+48h+var_18]
		mov	[esp+48h+var_1C], 0
		push	esi
		push	eax
		call	_EVP_MD_CTX_init
		mov	ebx, [esp+50h+arg_20]
		push	ebx
		call	_EVP_MD_block_size
		push	ebx
		mov	esi, eax
		call	_EVP_MD_size
		mov	ebx, eax
		add	esp, 0Ch
		mov	[esp+4Ch+var_38], ebx
		test	ebx, ebx
		jns	short loc_F1
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_F1:					; CODE XREF: _PKCS12_key_gen_uni+3Bj
		push	ebp
		push	edi
		push	8Dh ; 'ç'
		push	offset ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_key.c"
		push	esi
		call	_CRYPTO_malloc
		push	8Eh ; 'é'
		push	offset ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_key.c"
		push	ebx
		mov	[esp+6Ch+var_28], eax
		call	_CRYPTO_malloc
		push	8Fh ; 'è'
		lea	ecx, [esi+1]
		mov	edi, eax
		push	offset ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_key.c"
		push	ecx
		mov	[esp+78h+Src], edi
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 24h
		mov	eax, [esp+54h+arg_C]
		dec	eax
		mov	[esp+54h+var_44], ebx
		add	eax, esi
		cdq
		idiv	esi
		mov	ecx, eax
		mov	eax, [esp+54h+arg_4]
		imul	ecx, esi
		mov	[esp+54h+var_24], ecx
		test	eax, eax
		jz	short loc_15F
		dec	eax
		add	eax, esi
		cdq
		idiv	esi
		imul	eax, esi
		jmp	short loc_161
; ---------------------------------------------------------------------------

loc_15F:				; CODE XREF: _PKCS12_key_gen_uni+A6j
		xor	eax, eax

loc_161:				; CODE XREF: _PKCS12_key_gen_uni+B1j
		push	96h ; 'ñ'
		mov	[esp+58h+var_30], eax
		add	eax, ecx
		push	offset ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_key.c"
		push	eax
		mov	[esp+60h+var_2C], eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+54h+var_3C], eax
		call	_BN_new
		mov	ebp, eax
		mov	[esp+54h+var_20], ebp
		call	_BN_new
		mov	edx, [esp+54h+var_28]
		mov	[esp+54h+var_34], eax
		test	edx, edx
		jz	$err$109
		test	edi, edi
		jz	$err$109
		test	ebx, ebx
		jz	$err$109
		cmp	[esp+54h+var_3C], 0
		jz	$err$109
		test	ebp, ebp
		jz	$err$109
		test	eax, eax
		jz	$err$109
		test	esi, esi
		jle	short loc_1F6
		movzx	eax, [esp+54h+arg_10]
		mov	ecx, esi
		mov	ebx, ecx
		imul	eax, 1010101h
		shr	ecx, 2
		mov	edi, edx
		rep stosd
		mov	ecx, ebx
		mov	ebx, [esp+54h+var_44]
		and	ecx, 3
		rep stosb
		mov	edi, [esp+54h+Src]

loc_1F6:				; CODE XREF: _PKCS12_key_gen_uni+123j
		cmp	[esp+54h+var_24], 0
		mov	ecx, [esp+54h+var_3C]
		jle	short loc_22A
		mov	ebp, [esp+54h+arg_8]
		xor	edi, edi
		mov	ebx, [esp+54h+var_24]
		nop

loc_20C:				; CODE XREF: _PKCS12_key_gen_uni+170j
		mov	eax, edi
		inc	edi
		cdq
		idiv	[esp+54h+arg_C]
		mov	al, [edx+ebp]
		mov	[ecx], al
		inc	ecx
		cmp	edi, ebx
		jl	short loc_20C
		mov	ebp, [esp+54h+var_20]
		mov	ebx, [esp+54h+var_44]
		mov	edi, [esp+54h+Src]

loc_22A:				; CODE XREF: _PKCS12_key_gen_uni+153j
		cmp	[esp+54h+var_30], 0
		jle	short loc_25D
		mov	ebp, [esp+54h+arg_0]
		xor	ebx, ebx
		mov	edi, [esp+54h+var_30]
		nop

loc_23C:				; CODE XREF: _PKCS12_key_gen_uni+1A3j
		mov	eax, ebx
		lea	ecx, [ecx+1]
		cdq
		inc	ebx
		idiv	[esp+54h+arg_4]
		mov	al, [edx+ebp]
		mov	[ecx-1], al
		cmp	ebx, edi
		jl	short loc_23C
		mov	ebp, [esp+54h+var_20]
		mov	ebx, [esp+54h+var_44]
		mov	edi, [esp+54h+Src]

loc_25D:				; CODE XREF: _PKCS12_key_gen_uni+183j
		push	0
		push	[esp+58h+arg_20]
		lea	eax, [esp+5Ch+var_18]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		nop	dword ptr [eax+00h]

loc_27C:				; CODE XREF: _PKCS12_key_gen_uni+408j
		push	esi
		push	[esp+58h+var_28]
		lea	eax, [esp+5Ch+var_18]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	[esp+54h+var_2C]
		lea	eax, [esp+58h+var_18]
		push	[esp+58h+var_3C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	0
		lea	eax, [esp+58h+var_18]
		push	edi
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		mov	edi, 1
		cmp	[esp+54h+arg_14], edi
		jle	short loc_336
		nop	word ptr [eax+eax+00h]

loc_2DC:				; CODE XREF: _PKCS12_key_gen_uni+288j
		push	0
		push	[esp+58h+arg_20]
		lea	eax, [esp+5Ch+var_18]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	[esp+54h+var_38]
		lea	eax, [esp+58h+var_18]
		push	[esp+58h+Src]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	0
		push	[esp+58h+Src]
		lea	eax, [esp+5Ch+var_18]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		inc	edi
		cmp	edi, [esp+54h+arg_14]
		jl	short loc_2DC

loc_336:				; CODE XREF: _PKCS12_key_gen_uni+228j
		mov	ecx, [esp+54h+var_38]
		mov	eax, ecx
		cmp	[esp+54h+Size],	ecx
		mov	edi, [esp+54h+Src]
		cmovl	eax, [esp+54h+Size]
		push	eax		; Size
		push	edi		; Src
		push	[esp+5Ch+Dst]	; Dst
		call	_memcpy
		mov	eax, [esp+60h+var_38]
		add	esp, 0Ch
		mov	ecx, [esp+54h+Size]
		cmp	eax, ecx
		jge	loc_520
		add	[esp+54h+Dst], eax
		sub	ecx, eax
		mov	[esp+54h+Size],	ecx
		xor	ecx, ecx
		test	esi, esi
		jle	short loc_38E
		nop	dword ptr [eax+eax+00h]

loc_37C:				; CODE XREF: _PKCS12_key_gen_uni+2E0j
		mov	eax, ecx
		cdq
		idiv	[esp+54h+var_38]
		mov	al, [edx+edi]
		mov	[ecx+ebx], al
		inc	ecx
		cmp	ecx, esi
		jl	short loc_37C

loc_38E:				; CODE XREF: _PKCS12_key_gen_uni+2C9j
		push	[esp+54h+var_34]
		push	esi
		push	ebx
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	1
		push	[esp+58h+var_34]
		call	_BN_add_word
		add	esp, 8
		test	eax, eax
		jz	loc_4BA
		cmp	[esp+54h+var_2C], 0
		mov	[esp+54h+var_30], 0
		jle	loc_49F
		mov	edi, [esp+54h+var_3C]

loc_3D1:				; CODE XREF: _PKCS12_key_gen_uni+3E9j
		push	ebp
		push	esi
		push	edi
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	[esp+54h+var_34]
		push	ebp
		push	ebp
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4BA
		push	ebx
		push	ebp
		call	_BN_bn2bin
		add	esp, 8
		test	eax, eax
		jz	loc_4BA
		push	ebp
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	ebx, [edx+eax]
		sar	ebx, 3
		cmp	ebx, esi
		jle	short loc_44C
		mov	ebx, [esp+54h+var_44]
		push	ebx
		push	ebp
		call	_BN_bn2bin
		add	esp, 8
		test	eax, eax
		jz	$err$109
		push	esi		; Size
		lea	eax, [ebx+1]
		push	eax		; Src
		push	edi		; Dst
		call	_memcpy
		add	esp, 0Ch
		jmp	short loc_481
; ---------------------------------------------------------------------------

loc_44C:				; CODE XREF: _PKCS12_key_gen_uni+378j
		jge	short loc_473
		mov	eax, esi
		sub	eax, ebx
		push	eax		; Size
		push	0		; Val
		push	edi		; Dst
		call	_memset
		mov	eax, [esp+60h+var_30]
		sub	eax, ebx
		add	eax, [esp+60h+var_3C]
		add	eax, esi
		push	eax
		push	ebp
		call	_BN_bn2bin
		add	esp, 14h
		jmp	short loc_47D
; ---------------------------------------------------------------------------

loc_473:				; CODE XREF: _PKCS12_key_gen_uni:loc_44Cj
		push	edi
		push	ebp
		call	_BN_bn2bin
		add	esp, 8

loc_47D:				; CODE XREF: _PKCS12_key_gen_uni+3C5j
		test	eax, eax
		jz	short loc_4BA

loc_481:				; CODE XREF: _PKCS12_key_gen_uni+39Ej
		mov	ebx, [esp+54h+var_30]
		add	edi, esi
		add	ebx, esi
		cmp	ebx, [esp+54h+var_2C]
		mov	[esp+54h+var_30], ebx
		mov	ebx, [esp+54h+var_44]
		jl	loc_3D1
		mov	edi, [esp+54h+Src]

loc_49F:				; CODE XREF: _PKCS12_key_gen_uni+31Bj
		push	0
		push	[esp+58h+arg_20]
		lea	eax, [esp+5Ch+var_18]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_27C

loc_4BA:				; CODE XREF: _PKCS12_key_gen_uni+1C6j
					; _PKCS12_key_gen_uni+1E4j ...
		mov	ebx, [esp+54h+var_44]

$err$109:				; CODE XREF: _PKCS12_key_gen_uni+F0j
					; _PKCS12_key_gen_uni+F8j ...
		push	0DAh ; '⁄'
		push	offset ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_key.c"
		push	41h ; 'A'
		push	6Fh ; 'o'
		push	23h ; '#'
		call	_ERR_put_error
		mov	edi, [esp+68h+Src]
		add	esp, 14h

$end$110:				; CODE XREF: _PKCS12_key_gen_uni+480j
		push	edi
		call	_CRYPTO_free
		push	ebx
		call	_CRYPTO_free
		push	[esp+5Ch+var_28]
		call	_CRYPTO_free
		push	[esp+60h+var_3C]
		call	_CRYPTO_free
		push	ebp
		call	_BN_free
		push	[esp+68h+var_34]
		call	_BN_free
		lea	eax, [esp+6Ch+var_18]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	eax, [esp+70h+var_1C]
		add	esp, 1Ch
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_520:				; CODE XREF: _PKCS12_key_gen_uni+2B5j
		mov	ebx, [esp+54h+var_44]
		mov	[esp+54h+var_1C], 1
		jmp	short $end$110
_PKCS12_key_gen_uni endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 530h
; COMDAT (pick any)
		public ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
; `string'
??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ db '.\crypto\pkcs12\p12_key.c',0
					; DATA XREF: _PKCS12_key_gen_asc+39o
					; _PKCS12_key_gen_uni+4Co ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _PKCS12_key_gen_uni+52p
					; _PKCS12_key_gen_uni+66p ...
		extrn _CRYPTO_free:near	; CODE XREF: _PKCS12_key_gen_asc+9Fp
					; _PKCS12_key_gen_uni+42Fp ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _PKCS12_key_gen_asc+96p
		extrn _ERR_put_error:near ; CODE XREF: _PKCS12_key_gen_asc+44p
					; _PKCS12_key_gen_uni+422p
		extrn _BN_num_bits:near	; CODE XREF: _PKCS12_key_gen_uni+361p
		extrn _BN_new:near	; CODE XREF: _PKCS12_key_gen_uni+D6p
					; _PKCS12_key_gen_uni+E1p
		extrn _BN_bin2bn:near	; CODE XREF: _PKCS12_key_gen_uni+2E8p
					; _PKCS12_key_gen_uni+328p
		extrn _BN_bn2bin:near	; CODE XREF: _PKCS12_key_gen_uni+350p
					; _PKCS12_key_gen_uni+380p ...
		extrn _BN_add:near	; CODE XREF: _PKCS12_key_gen_uni+33Ep
		extrn _BN_add_word:near	; CODE XREF: _PKCS12_key_gen_uni+2FEp
		extrn _BN_free:near	; CODE XREF: _PKCS12_key_gen_uni+44Dp
					; _PKCS12_key_gen_uni+456p
		extrn _EVP_MD_size:near	; CODE XREF: _PKCS12_key_gen_uni+2Bp
		extrn _EVP_MD_block_size:near ;	CODE XREF: _PKCS12_key_gen_uni+23p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _PKCS12_key_gen_uni+19p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _PKCS12_key_gen_uni+460p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _PKCS12_key_gen_uni+1BCp
					; _PKCS12_key_gen_uni+23Bp ...
		extrn _EVP_DigestUpdate:near ; CODE XREF: _PKCS12_key_gen_uni+1DAp
					; _PKCS12_key_gen_uni+1F7p ...
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _PKCS12_key_gen_uni+20Fp
					; _PKCS12_key_gen_uni+273p
		extrn _OPENSSL_asc2uni:near ; CODE XREF: _PKCS12_key_gen_asc+2Bp
		extrn __chkstk:near	; CODE XREF: _PKCS12_key_gen_asc+5p
					; _PKCS12_key_gen_uni+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _PKCS12_key_gen_uni+2A3p
					; _PKCS12_key_gen_uni+396p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _PKCS12_key_gen_uni+3AAp


		end
