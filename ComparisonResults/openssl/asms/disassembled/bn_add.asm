;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5421A00693546728EC8C62C5A7F9722A
; Input	CRC32 :	044DD5CD

; File Name   :	C:\compspace\Diff\openssl\obj\bn_add.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_add
_BN_add		proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		mov	ebx, [esi+0Ch]
		mov	eax, [edi+0Ch]
		xor	eax, ebx
		jz	short loc_79
		test	ebx, ebx
		jz	short loc_1F
		mov	eax, esi
		mov	esi, edi
		mov	edi, eax

loc_1F:					; CODE XREF: _BN_add+17j
		push	edi
		push	esi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	short loc_56
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		push	esi
		call	_BN_usub
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_46

loc_40:					; CODE XREF: _BN_add+67j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_46:					; CODE XREF: _BN_add+3Ej
		pop	edi
		mov	dword ptr [esi+0Ch], 1
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_56:					; CODE XREF: _BN_add+2Bj
		push	edi
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	esi
		call	_BN_usub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40
		pop	edi
		mov	dword ptr [esi+0Ch], 0
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_79:					; CODE XREF: _BN_add+13j
		push	edi
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	esi
		call	_BN_uadd
		add	esp, 0Ch
		mov	[esi+0Ch], ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
_BN_add		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_sub
_BN_sub		proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	dword ptr [edi+0Ch], 0
		jz	short loc_CB
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_C4
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax

loc_AD:					; CODE XREF: _BN_sub+3Fj
		mov	ecx, [esi+4]
		cmp	[edi+4], ecx
		mov	ebx, [esp+0Ch+arg_0]
		cmovg	ecx, [edi+4]
		cmp	ecx, [ebx+8]
		jg	short loc_F8
		mov	eax, ebx
		jmp	short loc_102
; ---------------------------------------------------------------------------

loc_C4:					; CODE XREF: _BN_sub+15j
		mov	ebx, 1
		jmp	short loc_D3
; ---------------------------------------------------------------------------

loc_CB:					; CODE XREF: _BN_sub+Fj
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_AD
		xor	ebx, ebx

loc_D3:					; CODE XREF: _BN_sub+39j
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		push	esi
		call	_BN_uadd
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_EC

loc_E6:					; CODE XREF: _BN_sub+74j _BN_sub+91j ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_EC:					; CODE XREF: _BN_sub+54j
		pop	edi
		mov	[esi+0Ch], ebx
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F8:					; CODE XREF: _BN_sub+2Ej
		push	ecx
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_102:				; CODE XREF: _BN_sub+32j
		test	eax, eax
		jz	short loc_E6
		push	esi
		push	edi
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	short loc_133
		push	edi
		push	esi
		push	ebx
		call	_BN_usub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_E6
		pop	edi
		pop	esi
		mov	dword ptr [ebx+0Ch], 1
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_133:				; CODE XREF: _BN_sub+82j
		push	esi
		push	edi
		push	ebx
		call	_BN_usub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_E6
		pop	edi
		pop	esi
		mov	dword ptr [ebx+0Ch], 0
		mov	eax, 1
		pop	ebx
		retn
_BN_sub		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_uadd
_BN_uadd	proc near		; CODE XREF: _BN_add+80p _BN_sub+4Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	eax, [esi+4]
		cmp	eax, [ecx+4]
		jge	short loc_172
		mov	eax, esi
		mov	esi, ecx
		mov	ecx, eax
		mov	[esp+10h+arg_8], ecx

loc_172:				; CODE XREF: _BN_uadd+12j
		mov	ebx, [esi+4]
		mov	edi, ebx
		mov	ebp, [esp+10h+arg_0]
		mov	edx, [ecx+4]
		sub	edi, edx
		mov	[esp+10h+arg_4], edx
		lea	eax, [ebx+1]
		cmp	eax, [ebp+8]
		jg	short loc_190
		mov	eax, ebp
		jmp	short loc_1A2
; ---------------------------------------------------------------------------

loc_190:				; CODE XREF: _BN_uadd+36j
		push	eax
		push	ebp
		call	_bn_expand2
		mov	ecx, [esp+18h+arg_8]
		add	esp, 8
		mov	edx, [esp+10h+arg_4]

loc_1A2:				; CODE XREF: _BN_uadd+3Aj
		test	eax, eax
		jnz	short loc_1AB
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1AB:				; CODE XREF: _BN_uadd+50j
		push	edx
		mov	[ebp+4], ebx
		push	dword ptr [ecx]
		mov	esi, [esi]
		mov	ebx, [ebp+0]
		push	esi
		push	ebx
		call	_bn_add_words
		mov	ecx, [esp+20h+arg_4]
		add	esp, 10h
		shl	ecx, 2
		add	ebx, ecx
		add	esi, ecx
		test	eax, eax
		jz	short loc_1F1
		test	edi, edi
		jz	short loc_1E8
		nop

loc_1D4:				; CODE XREF: _BN_uadd+92j
		mov	eax, [esi]
		dec	edi
		inc	eax
		add	esi, 4
		mov	[ebx], eax
		add	ebx, 4
		test	eax, eax
		jnz	short loc_1F1
		test	edi, edi
		jnz	short loc_1D4

loc_1E8:				; CODE XREF: _BN_uadd+7Dj
		mov	dword ptr [ebx], 1
		inc	dword ptr [ebp+4]

loc_1F1:				; CODE XREF: _BN_uadd+79j _BN_uadd+8Ej
		test	edi, edi
		jz	short loc_209
		cmp	ebx, esi
		jz	short loc_209
		sub	ebx, esi

loc_1FB:				; CODE XREF: _BN_uadd+B3j
		mov	eax, [esi]
		lea	esi, [esi+4]
		mov	[ebx+esi-4], eax
		sub	edi, 1
		jnz	short loc_1FB

loc_209:				; CODE XREF: _BN_uadd+9Fj _BN_uadd+A3j
		pop	edi
		pop	esi
		mov	dword ptr [ebp+0Ch], 0
		mov	eax, 1
		pop	ebp
		pop	ebx
		retn
_BN_uadd	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 21Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_usub
_BN_usub	proc near		; CODE XREF: _BN_add+34p _BN_add+5Dp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		mov	eax, [eax+4]
		push	esi
		mov	[esp+14h+arg_4], eax
		mov	ebx, [ebp+4]
		mov	esi, ebx
		sub	esi, eax
		mov	[esp+14h+var_4], ebx
		mov	[esp+14h+var_8], esi
		jns	short loc_26A
		push	0B7h ; '·'
		push	offset ??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@ ; ".\\crypto\\bn\\bn_add.c"
		push	64h ; 'd'
		push	73h ; 's'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_26A:				; CODE XREF: _BN_usub+2Bj
		push	edi
		mov	edi, [esp+18h+arg_0]
		cmp	ebx, [edi+8]
		jg	short loc_278
		mov	ecx, edi
		jmp	short loc_288
; ---------------------------------------------------------------------------

loc_278:				; CODE XREF: _BN_usub+56j
		push	ebx
		push	edi
		call	_bn_expand2
		mov	ecx, eax
		add	esp, 8
		mov	eax, [esp+18h+arg_4]

loc_288:				; CODE XREF: _BN_usub+5Aj
		test	ecx, ecx
		jz	short loc_2E8
		mov	ecx, [esp+18h+arg_8]
		mov	edx, [ebp+0]
		xor	ebp, ebp
		mov	edi, [edi]
		mov	ecx, [ecx]
		test	eax, eax
		jz	short loc_308
		mov	ebx, [esp+18h+arg_4]
		mov	esi, ecx

loc_2A3:				; CODE XREF: _BN_usub+BAj
		mov	ecx, [edx]
		lea	esi, [esi+4]
		mov	eax, [esi-4]
		add	edx, 4
		mov	[esp+18h+arg_8], eax
		test	ebp, ebp
		jz	short loc_2C6
		cmp	eax, ecx
		sbb	ebp, ebp
		or	eax, 0FFFFFFFFh
		sub	eax, [esp+18h+arg_8]
		inc	ebp
		add	ecx, eax
		jmp	short loc_2CE
; ---------------------------------------------------------------------------

loc_2C6:				; CODE XREF: _BN_usub+98j
		cmp	ecx, eax
		sbb	ebp, ebp
		neg	ebp
		sub	ecx, eax

loc_2CE:				; CODE XREF: _BN_usub+A8j
		mov	[edi], ecx
		add	edi, 4
		sub	ebx, 1
		jnz	short loc_2A3
		mov	esi, [esp+18h+var_8]
		mov	ebx, [esp+18h+var_4]
		test	ebp, ebp
		jz	short loc_308
		test	esi, esi
		jnz	short loc_2F2

loc_2E8:				; CODE XREF: _BN_usub+6Ej
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_2F2:				; CODE XREF: _BN_usub+CAj _BN_usub+EAj
		mov	ecx, [edx]
		dec	esi
		add	edx, 4
		lea	eax, [ecx-1]
		mov	[edi], eax
		add	edi, 4
		test	ecx, ecx
		jnz	short loc_308
		test	esi, esi
		jnz	short loc_2F2

loc_308:				; CODE XREF: _BN_usub+7Fj _BN_usub+C6j ...
		cmp	edi, edx
		jz	short loc_356
		test	esi, esi
		jz	short loc_356
		lea	ebp, [edx+8]
		sub	edx, edi
		lea	ecx, [edi+8]
		nop	dword ptr [eax+00h]

loc_31C:				; CODE XREF: _BN_usub+138j
		mov	eax, [edx+ecx-8]
		mov	[ecx-8], eax
		lea	eax, [esi-1]
		test	eax, eax
		jz	short loc_356
		mov	eax, [ebp-4]
		mov	[ecx-4], eax
		lea	eax, [esi-2]
		test	eax, eax
		jz	short loc_356
		mov	eax, [ebp+0]
		mov	[ecx], eax
		lea	eax, [esi-3]
		sub	esi, 4
		test	eax, eax
		jz	short loc_356
		mov	eax, [ebp+4]
		add	ebp, 10h
		mov	[ecx+4], eax
		add	ecx, 10h
		test	esi, esi
		jnz	short loc_31C

loc_356:				; CODE XREF: _BN_usub+EEj _BN_usub+F2j ...
		mov	edx, [esp+18h+arg_0]
		mov	[edx+4], ebx
		mov	dword ptr [edx+0Ch], 0
		test	ebx, ebx
		jle	short loc_381
		mov	ecx, [edx]
		add	ecx, 0FFFFFFFCh
		lea	ecx, [ecx+ebx*4]

loc_370:				; CODE XREF: _BN_usub+160j
		mov	eax, [ecx]
		lea	ecx, [ecx-4]
		test	eax, eax
		jnz	short loc_37E
		dec	ebx
		test	ebx, ebx
		jg	short loc_370

loc_37E:				; CODE XREF: _BN_usub+15Bj
		mov	[edx+4], ebx

loc_381:				; CODE XREF: _BN_usub+14Aj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
_BN_usub	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 390h
; COMDAT (pick any)
		public ??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@
; `string'
??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@ db '.\crypto\bn\bn_add.c',0
					; DATA XREF: _BN_usub+32o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _BN_usub+3Dp
		extrn _BN_ucmp:near	; CODE XREF: _BN_add+21p _BN_sub+78p
		extrn _bn_expand2:near	; CODE XREF: _BN_sub+6Ap _BN_uadd+3Ep	...
		extrn _bn_add_words:near ; CODE	XREF: _BN_uadd+64p
		extrn __chkstk:near	; CODE XREF: _BN_usub+5p


		end
