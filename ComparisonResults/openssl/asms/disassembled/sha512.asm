;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	200E3DA2B2947F53F909AE0C70C8660A
; Input	CRC32 :	009550D1

; File Name   :	C:\compspace\Diff\openssl\obj\sha512.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _SHA512_version
_SHA512_version	db 'SHA-512 part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA384(void *Src,	size_t Size, int)
		public _SHA384
_SHA384		proc near

var_DC		= dword	ptr -0DCh
var_4		= dword	ptr -4
Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0DCh ; 'Ü'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0DCh+var_4], eax
		mov	eax, [esp+0DCh+arg_8]
		test	eax, eax
		push	esi
		mov	esi, [esp+0E0h+Src]
		push	edi
		mov	edi, offset ?m@?1??SHA384@@9@9 ; `SHA384'::`2'::m
		cmovnz	edi, eax
		lea	eax, [esp+0E4h+var_DC]
		push	eax
		call	_SHA384_Init
		push	[esp+0E8h+Size]	; Size
		lea	eax, [esp+0ECh+var_DC]
		push	esi		; Src
		push	eax		; int
		call	_SHA512_Update
		lea	eax, [esp+0F4h+var_DC]
		push	eax
		push	edi
		call	_SHA512_Final
		lea	eax, [esp+0FCh+var_DC]
		push	0D8h ; 'Ø'
		push	eax
		call	_OPENSSL_cleanse
		mov	ecx, [esp+104h+var_4]
		add	esp, 20h
		mov	eax, edi
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0DCh
		retn
_SHA384		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA384_Final
_SHA384_Final	proc near
		jmp	_SHA512_Final
_SHA384_Final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA384_Init
_SHA384_Init	proc near		; CODE XREF: _SHA384+37p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0C1059ED8h
		mov	dword ptr [eax+4], 0CBBB9D5Dh
		mov	dword ptr [eax+8], 367CD507h
		mov	dword ptr [eax+0Ch], 629A292Ah
		mov	dword ptr [eax+10h], 3070DD17h
		mov	dword ptr [eax+14h], 9159015Ah
		mov	dword ptr [eax+18h], 0F70E5939h
		mov	dword ptr [eax+1Ch], 152FECD8h
		mov	dword ptr [eax+20h], 0FFC00B31h
		mov	dword ptr [eax+24h], 67332667h
		mov	dword ptr [eax+28h], 68581511h
		mov	dword ptr [eax+2Ch], 8EB44A87h
		mov	dword ptr [eax+30h], 64F98FA7h
		mov	dword ptr [eax+34h], 0DB0C2E0Dh
		mov	dword ptr [eax+38h], 0BEFA4FA4h
		mov	dword ptr [eax+3Ch], 47B5481Dh
		mov	dword ptr [eax+40h], 0
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+48h], 0
		mov	dword ptr [eax+4Ch], 0
		mov	dword ptr [eax+0D0h], 0
		mov	dword ptr [eax+0D4h], 30h ; '0'
		mov	eax, 1
		retn
_SHA384_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 164h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA384_Update
_SHA384_Update	proc near
		jmp	_SHA512_Update
_SHA384_Update	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA512(void *Src,	size_t Size, int)
		public _SHA512
_SHA512		proc near

var_DC		= dword	ptr -0DCh
var_4		= dword	ptr -4
Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0DCh ; 'Ü'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0DCh+var_4], eax
		mov	eax, [esp+0DCh+arg_8]
		test	eax, eax
		push	esi
		mov	esi, [esp+0E0h+Src]
		push	edi
		mov	edi, offset ?m@?1??SHA512@@9@9 ; `SHA512'::`2'::m
		cmovnz	edi, eax
		lea	eax, [esp+0E4h+var_DC]
		push	eax
		call	_SHA512_Init
		push	[esp+0E8h+Size]	; Size
		lea	eax, [esp+0ECh+var_DC]
		push	esi		; Src
		push	eax		; int
		call	_SHA512_Update
		lea	eax, [esp+0F4h+var_DC]
		push	eax
		push	edi
		call	_SHA512_Final
		lea	eax, [esp+0FCh+var_DC]
		push	0D8h ; 'Ø'
		push	eax
		call	_OPENSSL_cleanse
		mov	ecx, [esp+104h+var_4]
		add	esp, 20h
		mov	eax, edi
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0DCh
		retn
_SHA512		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA512_Final
_SHA512_Final	proc near		; CODE XREF: _SHA384+54p
					; _SHA384_Finalj ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		lea	esi, [edi+50h]
		mov	ebx, [edi+0D0h]
		mov	byte ptr [ebx+esi], 80h	; '€'
		inc	ebx
		cmp	ebx, 70h ; 'p'
		jbe	short loc_22B
		mov	eax, 80h ; '€'
		sub	eax, ebx
		push	eax		; Size
		lea	eax, [ebx+esi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	1
		push	esi
		push	edi
		xor	ebx, ebx
		call	_sha512_block_data_order
		add	esp, 18h

loc_22B:				; CODE XREF: _SHA512_Final+18j
		mov	eax, 70h ; 'p'
		sub	eax, ebx
		push	eax		; Size
		lea	eax, [ebx+esi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		movzx	eax, byte ptr [edi+40h]
		add	esp, 0Ch
		mov	[esi+7Fh], al
		mov	ecx, [edi+40h]
		mov	eax, [edi+44h]
		shrd	ecx, eax, 8
		mov	[esi+7Eh], cl
		mov	ecx, [edi+40h]
		shr	eax, 8
		mov	eax, [edi+44h]
		shrd	ecx, eax, 10h
		mov	[esi+7Dh], cl
		mov	ecx, [edi+40h]
		shr	eax, 10h
		mov	eax, [edi+44h]
		shrd	ecx, eax, 18h
		mov	[esi+7Ch], cl
		mov	cl, 20h	; ' '
		mov	edx, [edi+44h]
		shr	eax, 18h
		mov	eax, [edi+40h]
		call	__aullshr
		mov	[esi+7Bh], al
		mov	cl, 28h	; '('
		mov	eax, [edi+40h]
		mov	edx, [edi+44h]
		call	__aullshr
		mov	[esi+7Ah], al
		movzx	eax, byte ptr [edi+46h]
		mov	[esi+79h], al
		movzx	eax, byte ptr [edi+47h]
		mov	[esi+78h], al
		movzx	eax, byte ptr [edi+48h]
		mov	[esi+77h], al
		mov	ecx, [edi+48h]
		mov	eax, [edi+4Ch]
		shrd	ecx, eax, 8
		mov	[esi+76h], cl
		mov	ecx, [edi+48h]
		shr	eax, 8
		mov	eax, [edi+4Ch]
		shrd	ecx, eax, 10h
		mov	[esi+75h], cl
		mov	ecx, [edi+48h]
		shr	eax, 10h
		mov	eax, [edi+4Ch]
		shrd	ecx, eax, 18h
		mov	[esi+74h], cl
		mov	cl, 20h	; ' '
		mov	edx, [edi+4Ch]
		shr	eax, 18h
		mov	eax, [edi+48h]
		call	__aullshr
		mov	[esi+73h], al
		mov	cl, 28h	; '('
		mov	eax, [edi+48h]
		mov	edx, [edi+4Ch]
		call	__aullshr
		mov	[esi+72h], al
		movzx	eax, byte ptr [edi+4Eh]
		push	1
		mov	[esi+71h], al
		movzx	eax, byte ptr [edi+4Fh]
		push	esi
		push	edi
		mov	[esi+70h], al
		call	_sha512_block_data_order
		mov	esi, [esp+18h+arg_0]
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_325

loc_31F:				; CODE XREF: _SHA512_Final+147j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_325:				; CODE XREF: _SHA512_Final+12Dj
		mov	eax, [edi+0D4h]
		cmp	eax, 30h ; '0'
		jz	loc_5A0
		cmp	eax, 40h ; '@'
		jnz	short loc_31F
		mov	edx, [edi+4]
		mov	eax, edx
		mov	ebx, [edi]
		mov	ecx, ebx
		shr	eax, 18h
		mov	[esi], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+1], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+2], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+3], dl
		shr	eax, 18h
		mov	[esi+4], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+5], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+6], al
		mov	[esi+7], bl
		mov	ebx, [edi+8]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+0Ch]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+8], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+9], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+0Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+0Bh], dl
		shr	eax, 18h
		mov	[esi+0Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+0Dh], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+0Eh], al
		mov	[esi+0Fh], bl
		mov	ebx, [edi+10h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+14h]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+10h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+11h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+12h], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+13h], dl
		shr	eax, 18h
		mov	[esi+14h], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	eax, ebx
		mov	[esi+15h], cl
		shrd	eax, edx, 8
		mov	[esi+16h], al
		shr	edx, 8
		mov	[esi+17h], bl
		mov	edx, [edi+1Ch]
		mov	eax, edx
		mov	ebx, [edi+18h]
		mov	ecx, ebx
		shr	eax, 18h
		mov	[esi+18h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+19h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+1Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+1Bh], dl
		shr	eax, 18h
		mov	[esi+1Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+1Dh], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+1Eh], al
		mov	[esi+1Fh], bl
		mov	ebx, [edi+20h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+24h]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+20h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+21h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+22h], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+23h], dl
		shr	eax, 18h
		mov	[esi+24h], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+25h], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+26h], al
		mov	[esi+27h], bl
		mov	ebx, [edi+28h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+2Ch]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+28h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+29h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+2Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+2Bh], dl
		shr	eax, 18h
		mov	[esi+2Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	eax, ebx
		mov	[esi+2Dh], cl
		shrd	eax, edx, 8
		mov	[esi+2Eh], al
		shr	edx, 8
		mov	[esi+2Fh], bl
		mov	edx, [edi+34h]
		mov	eax, edx
		mov	ebx, [edi+30h]
		mov	ecx, ebx
		shr	eax, 18h
		mov	[esi+30h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+31h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+32h], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+33h], dl
		shr	eax, 18h
		mov	[esi+34h], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+35h], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+36h], al
		mov	[esi+37h], bl
		mov	ebx, [edi+38h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+3Ch]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+38h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+39h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+3Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+3Bh], dl
		shr	eax, 18h
		mov	[esi+3Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		pop	edi
		shr	eax, 10h
		mov	eax, ebx
		mov	[esi+3Dh], cl
		shrd	eax, edx, 8
		mov	[esi+3Eh], al
		mov	eax, 1
		mov	[esi+3Fh], bl
		pop	esi
		shr	edx, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_5A0:				; CODE XREF: _SHA512_Final+13Ej
		mov	edx, [edi+4]
		mov	eax, edx
		mov	ebx, [edi]
		mov	ecx, ebx
		shr	eax, 18h
		mov	[esi], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+1], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+2], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+3], dl
		shr	eax, 18h
		mov	[esi+4], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+5], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+6], al
		mov	[esi+7], bl
		mov	ebx, [edi+8]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+0Ch]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+8], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+9], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+0Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+0Bh], dl
		shr	eax, 18h
		mov	[esi+0Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+0Dh], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+0Eh], al
		mov	[esi+0Fh], bl
		mov	ebx, [edi+10h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+14h]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+10h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+11h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+12h], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+13h], dl
		shr	eax, 18h
		mov	[esi+14h], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	eax, ebx
		mov	[esi+15h], cl
		shrd	eax, edx, 8
		mov	[esi+16h], al
		shr	edx, 8
		mov	[esi+17h], bl
		mov	edx, [edi+1Ch]
		mov	eax, edx
		mov	ebx, [edi+18h]
		mov	ecx, ebx
		shr	eax, 18h
		mov	[esi+18h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+19h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+1Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+1Bh], dl
		shr	eax, 18h
		mov	[esi+1Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+1Dh], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+1Eh], al
		mov	[esi+1Fh], bl
		mov	ebx, [edi+20h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+24h]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+20h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+21h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+22h], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+23h], dl
		shr	eax, 18h
		mov	[esi+24h], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	[esi+25h], cl
		mov	eax, ebx
		shrd	eax, edx, 8
		mov	[esi+26h], al
		mov	[esi+27h], bl
		mov	ebx, [edi+28h]
		mov	ecx, ebx
		shr	edx, 8
		mov	edx, [edi+2Ch]
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+28h], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+29h], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+2Ah], al
		mov	eax, edx
		shrd	ecx, eax, 18h
		mov	[esi+2Bh], dl
		shr	eax, 18h
		mov	[esi+2Ch], cl
		mov	eax, edx
		mov	ecx, ebx
		shrd	ecx, eax, 10h
		shr	eax, 10h
		mov	eax, ebx
		mov	[esi+2Dh], cl
		shrd	eax, edx, 8
		mov	[esi+2Eh], al
		mov	[esi+2Fh], bl
		shr	edx, 8
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_SHA512_Final	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 770h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA512_Init
_SHA512_Init	proc near		; CODE XREF: _SHA512+37p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0F3BCC908h
		mov	dword ptr [eax+4], 6A09E667h
		mov	dword ptr [eax+8], 84CAA73Bh
		mov	dword ptr [eax+0Ch], 0BB67AE85h
		mov	dword ptr [eax+10h], 0FE94F82Bh
		mov	dword ptr [eax+14h], 3C6EF372h
		mov	dword ptr [eax+18h], 5F1D36F1h
		mov	dword ptr [eax+1Ch], 0A54FF53Ah
		mov	dword ptr [eax+20h], 0ADE682D1h
		mov	dword ptr [eax+24h], 510E527Fh
		mov	dword ptr [eax+28h], 2B3E6C1Fh
		mov	dword ptr [eax+2Ch], 9B05688Ch
		mov	dword ptr [eax+30h], 0FB41BD6Bh
		mov	dword ptr [eax+34h], 1F83D9ABh
		mov	dword ptr [eax+38h], 137E2179h
		mov	dword ptr [eax+3Ch], 5BE0CD19h
		mov	dword ptr [eax+40h], 0
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+48h], 0
		mov	dword ptr [eax+4Ch], 0
		mov	dword ptr [eax+0D0h], 0
		mov	dword ptr [eax+0D4h], 40h ; '@'
		mov	eax, 1
		retn
_SHA512_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 81Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA512_Transform
_SHA512_Transform proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	1
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_sha512_block_data_order
		add	esp, 0Ch
		retn
_SHA512_Transform endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 830h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA512_Update(int, void *Src, size_t Size)
		public _SHA512_Update
_SHA512_Update	proc near		; CODE XREF: _SHA384+49p
					; _SHA384_Updatej ...

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+Src]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Size]
		push	edi
		mov	edi, [esp+10h+arg_0]
		lea	ebp, [edi+50h]
		test	esi, esi
		jz	loc_902
		mov	eax, esi
		mov	edx, 8
		mul	edx
		add	eax, [edi+40h]
		adc	edx, [edi+44h]
		cmp	edx, [edi+44h]
		ja	short loc_86E
		jb	short loc_866
		cmp	eax, [edi+40h]
		jnb	short loc_86E

loc_866:				; CODE XREF: _SHA512_Update+2Fj
		add	dword ptr [edi+48h], 1
		adc	dword ptr [edi+4Ch], 0

loc_86E:				; CODE XREF: _SHA512_Update+2Dj
					; _SHA512_Update+34j
		mov	[edi+40h], eax
		mov	eax, [edi+0D0h]
		mov	[edi+44h], edx
		test	eax, eax
		jz	short loc_8CE
		mov	ebp, 80h ; '€'
		sub	ebp, eax
		add	eax, 50h ; 'P'
		add	eax, edi
		cmp	esi, ebp
		jnb	short loc_8A9
		push	esi		; Size
		push	ebx		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, 1
		add	[edi+0D0h], esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8A9:				; CODE XREF: _SHA512_Update+5Cj
		push	ebp		; Size
		push	ebx		; Src
		push	eax		; Dst
		call	_memcpy
		sub	esi, ebp
		mov	dword ptr [edi+0D0h], 0
		add	ebx, ebp
		lea	ebp, [edi+50h]
		push	1
		push	ebp
		push	edi
		call	_sha512_block_data_order
		add	esp, 18h

loc_8CE:				; CODE XREF: _SHA512_Update+4Cj
		cmp	esi, 80h ; '€'
		jb	short loc_8ED
		mov	eax, esi
		shr	eax, 7
		push	eax
		push	ebx
		push	edi
		call	_sha512_block_data_order
		add	ebx, esi
		add	esp, 0Ch
		and	esi, 7Fh
		sub	ebx, esi

loc_8ED:				; CODE XREF: _SHA512_Update+A4j
		test	esi, esi
		jz	short loc_902
		push	esi		; Size
		push	ebx		; Src
		push	ebp		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[edi+0D0h], esi

loc_902:				; CODE XREF: _SHA512_Update+15j
					; _SHA512_Update+BFj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_SHA512_Update	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 90Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; `SHA384'::`2'::m
?m@?1??SHA384@@9@9 dd 0Ch dup(?)	; DATA XREF: _SHA384+2Ao
; `SHA512'::`2'::m
?m@?1??SHA512@@9@9 dd 10h dup(?)	; DATA XREF: _SHA512+2Ao
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_cleanse:near ; CODE XREF: _SHA384+63p
					; _SHA512+63p
		extrn _sha512_block_data_order:near ; CODE XREF: _SHA512_Final+33p
					; _SHA512_Final+11Fp ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _SHA384+78p
					; _SHA512+78p
		extrn __aullshr:near	; CODE XREF: _SHA512_Final+90p
					; _SHA512_Final+A0p ...
		extrn __chkstk:near	; CODE XREF: _SHA384+5p _SHA512+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _SHA512_Update+61p
					; _SHA512_Update+7Cp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _SHA512_Final+28p
					; _SHA512_Final+49p
		extrn ___security_cookie:near ;	DATA XREF: _SHA384+Ar
					; _SHA512+Ar


		end
