;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4D9F5F934C105A886C18579D2643B8E6
; Input	CRC32 :	79F375A6

; File Name   :	C:\compspace\Diff\openssl\obj\p5_pbe.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_PBEPARAM_seq_tt dd 3 dup(0)		; DATA XREF: .rdata:00000030o
		dd offset ??_C@_04OKLIMCN@salt?$AA@ ; "salt"
		dd offset _ASN1_OCTET_STRING_it
		dd 2 dup(0)
		dd 4
		dd offset ??_C@_04BKLHDIKK@iter?$AA@ ; "iter"
		dd offset _ASN1_INTEGER_it
; `PBEPARAM_it'::`2'::local_it
?local_it@?1??PBEPARAM_it@@9@9 dd 1, 10h ; DATA	XREF: _PBEPARAM_freeo
					; _PBEPARAM_ito ...
		dd offset _PBEPARAM_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_08CKLJFNPB@PBEPARAM?$AA@ ; "PBEPARAM"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
; COMDAT (pick any)
		public ??_C@_04OKLIMCN@salt?$AA@
; `string'
??_C@_04OKLIMCN@salt?$AA@ db 'salt',0   ; DATA XREF: .rdata:0000000Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
; COMDAT (pick any)
		public ??_C@_04BKLHDIKK@iter?$AA@
; `string'
??_C@_04BKLHDIKK@iter?$AA@ db 'iter',0  ; DATA XREF: .rdata:00000020o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
; COMDAT (pick any)
		public ??_C@_08CKLJFNPB@PBEPARAM?$AA@
; `string'
??_C@_08CKLJFNPB@PBEPARAM?$AA@ db 'PBEPARAM',0 ; DATA XREF: .rdata:00000040o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PBEPARAM_free
_PBEPARAM_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_PBEPARAM_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PBEPARAM_it
_PBEPARAM_it	proc near
		mov	eax, offset ?local_it@?1??PBEPARAM_it@@9@9 ; `PBEPARAM_it'::`2'::local_it
		retn
_PBEPARAM_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PBEPARAM_new
_PBEPARAM_new	proc near
		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_PBEPARAM_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PKCS5_pbe_set(int, int, void *Src, int)
		public _PKCS5_pbe_set
_PKCS5_pbe_set	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		call	_X509_ALGOR_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_B7
		push	86h ; '†'
		push	offset ??_C@_0BH@BAEMFCCL@?4?2crypto?2asn1?2p5_pbe?4c?$AA@ ; ".\\crypto\\asn1\\p5_pbe.c"
		push	41h ; 'A'
		push	0CAh ; 'Ê'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B7:					; CODE XREF: _PKCS5_pbe_set+Aj
		push	[esp+4+arg_C]	; int
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+arg_4]	; int
		push	[esp+10h+arg_0]	; int
		push	esi		; int
		call	_PKCS5_pbe_set0_algor
		add	esp, 14h
		test	eax, eax
		jz	short loc_D8
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D8:					; CODE XREF: _PKCS5_pbe_set+46j
		push	esi
		call	_X509_ALGOR_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
_PKCS5_pbe_set	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PKCS5_pbe_set0_algor(int,	int, int, void *Src, int)
		public _PKCS5_pbe_set0_algor
_PKCS5_pbe_set0_algor proc near		; CODE XREF: _PKCS5_pbe_set+3Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	esi
		push	edi
		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		mov	[esp+10h+var_4], 0
		call	_ASN1_item_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_129
		push	56h ; 'V'
		push	offset ??_C@_0BH@BAEMFCCL@?4?2crypto?2asn1?2p5_pbe?4c?$AA@ ; ".\\crypto\\asn1\\p5_pbe.c"
		push	41h ; 'A'
		push	0D7h ; '×'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_16D
; ---------------------------------------------------------------------------

loc_129:				; CODE XREF: _PKCS5_pbe_set0_algor+25j
		mov	eax, [esp+0Ch+arg_8]
		mov	ecx, 800h
		test	eax, eax
		cmovle	eax, ecx
		push	eax
		push	dword ptr [esi+4]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_184
		push	5Ch ; '\'

loc_149:				; CODE XREF: _PKCS5_pbe_set0_algor+BDj
					; _PKCS5_pbe_set0_algor+104j
		push	offset ??_C@_0BH@BAEMFCCL@?4?2crypto?2asn1?2p5_pbe?4c?$AA@ ; ".\\crypto\\asn1\\p5_pbe.c"
		push	41h ; 'A'
		push	0D7h ; '×'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

$err$31:				; CODE XREF: _PKCS5_pbe_set0_algor+E9j
		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		push	esi
		call	_ASN1_item_free
		add	esp, 8

loc_16D:				; CODE XREF: _PKCS5_pbe_set0_algor+3Fj
					; _PKCS5_pbe_set0_algor+138j
		mov	eax, [esp+0Ch+var_4]
		test	eax, eax
		jz	short loc_17E
		push	eax
		call	_ASN1_STRING_free
		add	esp, 4

loc_17E:				; CODE XREF: _PKCS5_pbe_set0_algor+8Bj
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_184:				; CODE XREF: _PKCS5_pbe_set0_algor+5Dj
		mov	edi, [esp+0Ch+arg_10]
		mov	eax, 8
		test	edi, edi
		cmovz	edi, eax
		push	edi
		push	0
		push	dword ptr [esi]
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1A7
		push	62h ; 'b'
		jmp	short loc_149
; ---------------------------------------------------------------------------

loc_1A7:				; CODE XREF: _PKCS5_pbe_set0_algor+B9j
		push	dword ptr [esi]
		call	_ASN1_STRING_data
		mov	ecx, [esp+10h+Src]
		add	esp, 4
		push	edi		; Size
		test	ecx, ecx
		jz	short loc_1C6
		push	ecx		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		jmp	short loc_1D3
; ---------------------------------------------------------------------------

loc_1C6:				; CODE XREF: _PKCS5_pbe_set0_algor+D0j
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		js	short $err$31

loc_1D3:				; CODE XREF: _PKCS5_pbe_set0_algor+DCj
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		push	esi
		call	_ASN1_item_pack
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1F1
		push	6Ch ; 'l'
		jmp	loc_149
; ---------------------------------------------------------------------------

loc_1F1:				; CODE XREF: _PKCS5_pbe_set0_algor+100j
		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		push	esi
		call	_ASN1_item_free
		add	esp, 8
		push	[esp+0Ch+var_4]
		push	10h
		push	[esp+14h+arg_4]
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+18h+arg_0]
		call	_X509_ALGOR_set0
		add	esp, 10h
		test	eax, eax
		jz	loc_16D
		pop	edi
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
_PKCS5_pbe_set0_algor endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 230h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PBEPARAM
_d2i_PBEPARAM	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_PBEPARAM	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PBEPARAM
_i2d_PBEPARAM	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??PBEPARAM_it@@9@9 ;	`PBEPARAM_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_PBEPARAM	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 264h
; COMDAT (pick any)
		public ??_C@_0BH@BAEMFCCL@?4?2crypto?2asn1?2p5_pbe?4c?$AA@
; `string'
??_C@_0BH@BAEMFCCL@?4?2crypto?2asn1?2p5_pbe?4c?$AA@ db '.\crypto\asn1\p5_pbe.c',0
					; DATA XREF: _PKCS5_pbe_set+11o
					; _PKCS5_pbe_set0_algor+29o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:00000024o
		extrn _ASN1_OCTET_STRING_it:near ; DATA	XREF: .rdata:00000010o
		extrn _ERR_put_error:near ; CODE XREF: _PKCS5_pbe_set+1Fp
					; _PKCS5_pbe_set0_algor+37p ...
		extrn _ASN1_STRING_free:near ; CODE XREF: _PKCS5_pbe_set0_algor+8Ep
		extrn _ASN1_STRING_set:near ; CODE XREF: _PKCS5_pbe_set0_algor+AFp
		extrn _ASN1_STRING_data:near ; CODE XREF: _PKCS5_pbe_set0_algor+C1p
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _PKCS5_pbe_set0_algor+53p
		extrn _ASN1_item_pack:near ; CODE XREF:	_PKCS5_pbe_set0_algor+F6p
		extrn _ASN1_item_new:near ; CODE XREF: _PBEPARAM_new+5p
					; _PKCS5_pbe_set0_algor+19p
		extrn _ASN1_item_free:near ; CODE XREF:	_PBEPARAM_free+9p
					; _PKCS5_pbe_set0_algor+7Dp ...
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_PBEPARAM+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_PBEPARAM+Dp
		extrn _OBJ_nid2obj:near	; CODE XREF: _PKCS5_pbe_set0_algor+121p
		extrn _X509_ALGOR_set0:near ; CODE XREF: _PKCS5_pbe_set0_algor+12Ep
		extrn _X509_ALGOR_new:near ; CODE XREF:	_PKCS5_pbe_set+1p
		extrn _X509_ALGOR_free:near ; CODE XREF: _PKCS5_pbe_set+4Dp
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _PKCS5_pbe_set0_algor+DFp
		extrn __chkstk:near	; CODE XREF: _PKCS5_pbe_set0_algor+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _PKCS5_pbe_set0_algor+D4p


		end
