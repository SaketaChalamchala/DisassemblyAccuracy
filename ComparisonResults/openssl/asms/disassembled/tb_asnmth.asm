;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2129BA6E970A7A4A34F8CC771E1310D1
; Input	CRC32 :	BB41AB4F

; File Name   :	C:\compspace\Diff\openssl\obj\tb_asnmth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_pkey_asn1_meth_table dd ?		; DATA XREF: _ENGINE_get_pkey_asn1_meth_engine+4o
					; _ENGINE_pkey_asn1_find_str+47r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_pkey_asn1_meth
_ENGINE_get_pkey_asn1_meth proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+30h]
		test	ecx, ecx
		jz	short loc_29
		push	[esp+arg_4]
		lea	edx, [esp+4+arg_0]
		push	0
		push	edx
		push	eax
		call	ecx
		add	esp, 10h
		test	eax, eax
		jz	short loc_29
		mov	eax, [esp+arg_0]
		retn
; ---------------------------------------------------------------------------

loc_29:					; CODE XREF: _ENGINE_get_pkey_asn1_meth+9j
					; _ENGINE_get_pkey_asn1_meth+1Ej
		push	85h ; '…'
		push	offset ??_C@_0BM@MPBIGLJP@?4?2crypto?2engine?2tb_asnmth?4c?$AA@	; ".\\crypto\\engine\\tb_asnmth.c"
		push	65h ; 'e'
		push	0C1h ; 'Á'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
_ENGINE_get_pkey_asn1_meth endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_pkey_asn1_meth_engine
_ENGINE_get_pkey_asn1_meth_engine proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _pkey_asn1_meth_table
		call	_engine_table_select
		add	esp, 8
		retn
_ENGINE_get_pkey_asn1_meth_engine endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ENGINE_get_pkey_asn1_meth_str(int, char *Str2, size_t MaxCount)
		public _ENGINE_get_pkey_asn1_meth_str
_ENGINE_get_pkey_asn1_meth_str proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Str2		= dword	ptr  8
MaxCount	= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		mov	ecx, [ebp+30h]
		test	ecx, ecx
		jnz	short loc_79
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_79:					; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+14j
		push	esi
		mov	esi, [esp+10h+MaxCount]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_95
		mov	esi, [esp+10h+Str2]
		lea	edx, [esi+1]
		xchg	ax, ax

loc_8C:					; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+35j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_8C
		sub	esi, edx

loc_95:					; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+25j
		push	ebx
		push	edi
		push	0
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	0
		push	ebp
		call	ecx
		mov	ebx, eax
		add	esp, 10h
		xor	edi, edi
		test	ebx, ebx
		jle	short loc_103

loc_AE:					; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+A5j
		mov	ecx, [esp+18h+var_8]
		lea	eax, [esp+18h+arg_0]
		push	dword ptr [ecx+edi*4]
		push	0
		push	eax
		mov	eax, [ebp+30h]
		push	ebp
		call	eax
		mov	eax, [esp+28h+arg_0]
		add	esp, 10h
		mov	edx, [eax+0Ch]
		mov	eax, edx
		lea	ecx, [eax+1]
		mov	[esp+18h+var_4], ecx
		nop	dword ptr [eax+00000000h]

loc_DC:					; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+85j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_DC
		sub	eax, [esp+18h+var_4]
		cmp	eax, esi
		jnz	short loc_FE
		push	esi		; MaxCount
		push	[esp+1Ch+Str2]	; Str2
		push	edx		; Str1
		call	dword ptr ds:__imp___strnicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10D

loc_FE:					; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+8Dj
		inc	edi
		cmp	edi, ebx
		jl	short loc_AE

loc_103:				; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+50j
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10D:				; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+A0j
		mov	eax, [esp+18h+arg_0]
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
_ENGINE_get_pkey_asn1_meth_str endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_pkey_asn1_meths
_ENGINE_get_pkey_asn1_meths proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+30h]
		retn
_ENGINE_get_pkey_asn1_meths endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 124h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_pkey_asn1_find_str
_ENGINE_pkey_asn1_find_str proc	near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		mov	eax, [esp+10h+arg_4]
		push	0ECh ; 'ì'
		push	offset ??_C@_0BM@MPBIGLJP@?4?2crypto?2engine?2tb_asnmth?4c?$AA@	; ".\\crypto\\engine\\tb_asnmth.c"
		mov	[esp+18h+var_8], eax
		mov	eax, [esp+18h+arg_8]
		push	1Eh
		push	9
		mov	[esp+20h+var_10], 0
		mov	[esp+20h+var_C], 0
		mov	[esp+20h+var_4], eax
		call	_CRYPTO_lock
		lea	eax, [esp+20h+var_10]
		push	eax
		push	offset _look_str_cb
		push	ds:_pkey_asn1_meth_table
		call	_engine_table_doall
		mov	ecx, [esp+2Ch+var_10]
		add	esp, 1Ch
		test	ecx, ecx
		jz	short loc_187
		inc	dword ptr [ecx+58h]
		mov	ecx, [esp+10h+var_10]

loc_187:				; CODE XREF: _ENGINE_pkey_asn1_find_str+5Bj
		mov	eax, [esp+10h+arg_0]
		push	0F4h ; 'ô'
		push	offset ??_C@_0BM@MPBIGLJP@?4?2crypto?2engine?2tb_asnmth?4c?$AA@	; ".\\crypto\\engine\\tb_asnmth.c"
		push	1Eh
		push	0Ah
		mov	[eax], ecx
		call	_CRYPTO_lock
		mov	eax, [esp+20h+var_C]
		add	esp, 20h
		retn
_ENGINE_pkey_asn1_find_str endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_all_pkey_asn1_meths
_ENGINE_register_all_pkey_asn1_meths proc near

var_4		= dword	ptr -4

		mov	eax, 4
		call	__chkstk
		push	esi
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jz	short loc_201

loc_1BE:				; CODE XREF: _ENGINE_register_all_pkey_asn1_meths+57j
		mov	eax, [esi+30h]
		test	eax, eax
		jz	short loc_1F2
		push	0
		lea	ecx, [esp+0Ch+var_4]
		push	ecx
		push	0
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jle	short loc_1F2
		push	0
		push	eax
		push	[esp+10h+var_4]
		push	esi
		push	offset _engine_unregister_all_pkey_asn1_meths
		push	offset _pkey_asn1_meth_table
		call	_engine_table_register
		add	esp, 18h

loc_1F2:				; CODE XREF: _ENGINE_register_all_pkey_asn1_meths+1Bj
					; _ENGINE_register_all_pkey_asn1_meths+2Ej
		push	esi
		call	_ENGINE_get_next
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1BE

loc_201:				; CODE XREF: _ENGINE_register_all_pkey_asn1_meths+14j
		pop	esi
		pop	ecx
		retn
_ENGINE_register_all_pkey_asn1_meths endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 204h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_pkey_asn1_meths
_ENGINE_register_pkey_asn1_meths proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+30h]
		test	eax, eax
		jz	short loc_23F
		push	0
		lea	ecx, [esp+8+arg_0]
		push	ecx
		push	0
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jle	short loc_23F
		push	0
		push	eax
		push	[esp+0Ch+arg_0]
		push	esi
		push	offset _engine_unregister_all_pkey_asn1_meths
		push	offset _pkey_asn1_meth_table
		call	_engine_table_register
		add	esp, 18h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_23F:				; CODE XREF: _ENGINE_register_pkey_asn1_meths+Aj
					; _ENGINE_register_pkey_asn1_meths+1Dj
		mov	eax, 1
		pop	esi
		retn
_ENGINE_register_pkey_asn1_meths endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 248h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_default_pkey_asn1_meths
_ENGINE_set_default_pkey_asn1_meths proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+30h]
		test	eax, eax
		jz	short loc_283
		push	0
		lea	ecx, [esp+8+arg_0]
		push	ecx
		push	0
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jle	short loc_283
		push	1
		push	eax
		push	[esp+0Ch+arg_0]
		push	esi
		push	offset _engine_unregister_all_pkey_asn1_meths
		push	offset _pkey_asn1_meth_table
		call	_engine_table_register
		add	esp, 18h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_283:				; CODE XREF: _ENGINE_set_default_pkey_asn1_meths+Aj
					; _ENGINE_set_default_pkey_asn1_meths+1Dj
		mov	eax, 1
		pop	esi
		retn
_ENGINE_set_default_pkey_asn1_meths endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_pkey_asn1_meths
_ENGINE_set_pkey_asn1_meths proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+30h], ecx
		mov	eax, 1
		retn
_ENGINE_set_pkey_asn1_meths endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_unregister_pkey_asn1_meths
_ENGINE_unregister_pkey_asn1_meths proc	near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _pkey_asn1_meth_table
		call	_engine_table_unregister
		add	esp, 8
		retn
_ENGINE_unregister_pkey_asn1_meths endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_pkey_asn1_meths_free
_engine_pkey_asn1_meths_free proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+30h]
		test	eax, eax
		jz	short loc_312
		push	ebx
		push	esi
		push	0
		lea	ecx, [esp+14h+arg_0]
		push	ecx
		push	0
		push	edi
		call	eax
		mov	ebx, eax
		add	esp, 10h
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_310
		nop

loc_2E4:				; CODE XREF: _engine_pkey_asn1_meths_free+5Aj
		mov	ecx, [esp+10h+arg_0]
		lea	eax, [esp+10h+var_4]
		push	dword ptr [ecx+esi*4]
		push	0
		push	eax
		mov	eax, [edi+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_30B
		push	[esp+10h+var_4]
		call	_EVP_PKEY_asn1_free
		add	esp, 4

loc_30B:				; CODE XREF: _engine_pkey_asn1_meths_free+49j
		inc	esi
		cmp	esi, ebx
		jl	short loc_2E4

loc_310:				; CODE XREF: _engine_pkey_asn1_meths_free+2Dj
		pop	esi
		pop	ebx

loc_312:				; CODE XREF: _engine_pkey_asn1_meths_free+14j
		pop	edi
		pop	ecx
		retn
_engine_pkey_asn1_meths_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 318h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_unregister_all_pkey_asn1_meths proc near
					; DATA XREF: _ENGINE_register_all_pkey_asn1_meths+38o
					; _ENGINE_register_pkey_asn1_meths+27o	...
		push	offset _pkey_asn1_meth_table
		call	_engine_table_cleanup
		pop	ecx
		retn
_engine_unregister_all_pkey_asn1_meths endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_look_str_cb	proc near		; DATA XREF: _ENGINE_pkey_asn1_find_str+42o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	edi
		mov	edi, [esp+8+arg_C]
		cmp	dword ptr [edi+4], 0
		jnz	loc_3C8
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	esi
		push	ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_3C6
		push	ebp
		nop

loc_354:				; CODE XREF: _look_str_cb+90j
		push	esi
		push	ebx
		call	_sk_value
		push	[esp+1Ch+arg_0]
		mov	ebp, eax
		lea	eax, [esp+20h+arg_C]
		push	0
		push	eax
		push	ebp
		mov	ecx, [ebp+30h]
		call	ecx
		mov	ecx, [esp+2Ch+arg_C]
		add	esp, 18h
		mov	edx, [ecx+0Ch]
		mov	eax, edx
		lea	ecx, [eax+1]
		mov	[esp+14h+var_4], ecx
		nop	dword ptr [eax]

loc_384:				; CODE XREF: _look_str_cb+65j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_384
		sub	eax, [esp+14h+var_4]
		mov	ecx, [edi+0Ch]
		cmp	eax, ecx
		jnz	short loc_3A8
		push	ecx		; MaxCount
		push	dword ptr [edi+8] ; Str2
		push	edx		; Str1
		call	dword ptr ds:__imp___strnicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_3BC

loc_3A8:				; CODE XREF: _look_str_cb+70j
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_354
		pop	ebp
		pop	esi
		pop	ebx
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3BC:				; CODE XREF: _look_str_cb+82j
		mov	eax, [esp+14h+arg_C]
		mov	[edi], ebp
		mov	[edi+4], eax
		pop	ebp

loc_3C6:				; CODE XREF: _look_str_cb+2Cj
		pop	esi
		pop	ebx

loc_3C8:				; CODE XREF: _look_str_cb+13j
		pop	edi
		pop	ecx
		retn
_look_str_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3CCh
; COMDAT (pick any)
		public ??_C@_0BM@MPBIGLJP@?4?2crypto?2engine?2tb_asnmth?4c?$AA@
; `string'
??_C@_0BM@MPBIGLJP@?4?2crypto?2engine?2tb_asnmth?4c?$AA@ db '.\crypto\engine\tb_asnmth.c',0
					; DATA XREF: _ENGINE_get_pkey_asn1_meth+2Ao
					; _ENGINE_pkey_asn1_find_str+13o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl __strnicmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp___strnicmp:near ; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+95p
					; _look_str_cb+77p
					; DATA XREF: ...
		extrn _sk_num:near	; CODE XREF: _look_str_cb+22p
					; _look_str_cb+86p
		extrn _sk_value:near	; CODE XREF: _look_str_cb+32p
		extrn _CRYPTO_lock:near	; CODE XREF: _ENGINE_pkey_asn1_find_str+38p
					; _ENGINE_pkey_asn1_find_str+77p
		extrn _ERR_put_error:near ; CODE XREF: _ENGINE_get_pkey_asn1_meth+38p
		extrn _EVP_PKEY_asn1_free:near ; CODE XREF: _engine_pkey_asn1_meths_free+4Fp
		extrn _ENGINE_get_first:near
					; CODE XREF: _ENGINE_register_all_pkey_asn1_meths+Bp
		extrn _ENGINE_get_next:near
					; CODE XREF: _ENGINE_register_all_pkey_asn1_meths+4Bp
		extrn _engine_table_register:near
					; CODE XREF: _ENGINE_register_all_pkey_asn1_meths+42p
					; _ENGINE_register_pkey_asn1_meths+31p	...
		extrn _engine_table_unregister:near
					; CODE XREF: _ENGINE_unregister_pkey_asn1_meths+9p
		extrn _engine_table_cleanup:near
					; CODE XREF: _engine_unregister_all_pkey_asn1_meths+5p
		extrn _engine_table_select:near
					; CODE XREF: _ENGINE_get_pkey_asn1_meth_engine+9p
		extrn _engine_table_doall:near ; CODE XREF: _ENGINE_pkey_asn1_find_str+4Dp
		extrn __chkstk:near	; CODE XREF: _ENGINE_get_pkey_asn1_meth_str+5p
					; _ENGINE_pkey_asn1_find_str+5p ...


		end
