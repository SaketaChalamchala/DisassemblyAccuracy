;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2249F9851CFBBD6F3CB24E8F62705CE0
; Input	CRC32 :	F777BA25

; File Name   :	C:\compspace\Diff\openssl\obj\dh_ameth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_priv_decode	proc near		; DATA XREF: .rdata:00000498o
					; .rdata:00000508o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h
		call	__chkstk
		push	esi
		push	edi
		push	[esp+20h+arg_4]
		lea	eax, [esp+24h+var_14]
		xor	esi, esi
		push	eax
		lea	eax, [esp+28h+var_C]
		xor	edi, edi
		push	eax
		lea	eax, [esp+2Ch+var_8]
		push	eax
		push	esi
		call	_PKCS8_pkey_get0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_36
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_36:					; CODE XREF: _dh_priv_decode+2Ej
		push	ebx
		push	[esp+24h+var_14]
		lea	eax, [esp+28h+var_4]
		push	eax
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	0
		call	_X509_ALGOR_get0
		add	esp, 10h
		cmp	[esp+24h+var_10], 10h
		jnz	$decerr$16
		push	[esp+24h+var_C]
		lea	eax, [esp+28h+var_8]
		push	eax
		push	0
		call	_d2i_ASN1_INTEGER
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	$decerr$16
		mov	edx, [esp+24h+var_4]
		mov	ebx, [esp+24h+arg_0]
		mov	ecx, [edx+8]
		cmp	dword ptr [ebx+0Ch], offset _dhx_asn1_meth
		mov	[esp+24h+var_18], ecx
		mov	eax, [edx]
		push	eax
		lea	eax, [esp+28h+var_18]
		push	eax
		push	0
		jnz	short loc_A0
		call	_d2i_DHxparams
		jmp	short loc_A5
; ---------------------------------------------------------------------------

loc_A0:					; CODE XREF: _dh_priv_decode+97j
		call	_d2i_DHparams

loc_A5:					; CODE XREF: _dh_priv_decode+9Ej
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short $decerr$16
		push	0
		push	edi
		call	_ASN1_INTEGER_to_BN
		add	esp, 8
		mov	[esi+18h], eax
		test	eax, eax
		jnz	short loc_CE
		push	0ECh ; 'ì'
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	6Ah ; 'j'
		jmp	short loc_108
; ---------------------------------------------------------------------------

loc_CE:					; CODE XREF: _dh_priv_decode+BEj
		push	esi
		call	_DH_generate_key
		add	esp, 4
		test	eax, eax
		jz	short $dherr$17
		mov	eax, [ebx+0Ch]
		push	esi
		push	dword ptr [eax]
		push	ebx
		call	_EVP_PKEY_assign
		push	edi
		call	_ASN1_STRING_clear_free
		add	esp, 10h
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$decerr$16:				; CODE XREF: _dh_priv_decode+54j
					; _dh_priv_decode+71j ...
		push	0FAh ; 'ú'
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	72h ; 'r'

loc_108:				; CODE XREF: _dh_priv_decode+CCj
		push	6Eh ; 'n'
		push	5
		call	_ERR_put_error
		add	esp, 14h

$dherr$17:				; CODE XREF: _dh_priv_decode+D9j
		push	esi
		call	_DH_free
		push	edi
		call	_ASN1_STRING_clear_free
		add	esp, 8
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 18h
		retn
_dh_priv_decode	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_priv_encode	proc near		; DATA XREF: .rdata:0000049Co
					; .rdata:0000050Co

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	edi
		mov	[esp+10h+var_4], 0
		call	_ASN1_STRING_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_169
		push	10Bh

loc_151:				; CODE XREF: _dh_priv_encode+6Cj
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	41h ; 'A'
		push	6Fh ; 'o'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$17
; ---------------------------------------------------------------------------

loc_169:				; CODE XREF: _dh_priv_encode+1Ej
		mov	ebx, [esp+10h+arg_4]
		lea	eax, [edi+8]
		push	eax
		cmp	dword ptr [ebx+0Ch], offset _dhx_asn1_meth
		mov	ecx, [ebx+14h]
		push	ecx
		jnz	short loc_185
		call	_i2d_DHxparams
		jmp	short loc_18A
; ---------------------------------------------------------------------------

loc_185:				; CODE XREF: _dh_priv_encode+50j
		call	_i2d_DHparams

loc_18A:				; CODE XREF: _dh_priv_encode+57j
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jg	short loc_19A
		push	111h
		jmp	short loc_151
; ---------------------------------------------------------------------------

loc_19A:				; CODE XREF: _dh_priv_encode+65j
		mov	dword ptr [edi+4], 10h
		mov	eax, [ebx+14h]
		push	0
		push	dword ptr [eax+18h]
		call	_BN_to_ASN1_INTEGER
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_1D1
		push	11Ah
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	6Ah ; 'j'
		push	6Fh ; 'o'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$17
; ---------------------------------------------------------------------------

loc_1D1:				; CODE XREF: _dh_priv_encode+89j
		push	esi
		lea	eax, [esp+14h+var_4]
		push	eax
		push	ebp
		call	_i2d_ASN1_INTEGER
		push	ebp
		mov	esi, eax
		call	_ASN1_STRING_clear_free
		mov	eax, [ebx+0Ch]
		add	esp, 0Ch
		push	esi
		push	[esp+18h+var_4]
		push	edi
		push	10h
		push	0
		push	dword ptr [eax]
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+2Ch+arg_0]
		call	_PKCS8_pkey_set0
		add	esp, 1Ch
		pop	esi
		test	eax, eax
		jnz	short loc_236

$err$17:				; CODE XREF: _dh_priv_encode+38j
					; _dh_priv_encode+A3j
		mov	eax, [esp+10h+var_4]
		test	eax, eax
		jz	short loc_222
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_222:				; CODE XREF: _dh_priv_encode+EBj
		test	edi, edi
		jz	short loc_22F
		push	edi
		call	_ASN1_STRING_free
		add	esp, 4

loc_22F:				; CODE XREF: _dh_priv_encode+F8j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_236:				; CODE XREF: _dh_priv_encode+E3j
		pop	edi
		pop	ebp
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
_dh_priv_encode	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_param_decode proc near		; DATA XREF: .rdata:000004ACo
					; .rdata:0000051Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	[esp+4+arg_8]
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	0
		cmp	dword ptr [esi+0Ch], offset _dhx_asn1_meth
		jnz	short loc_25F
		call	_d2i_DHxparams
		jmp	short loc_264
; ---------------------------------------------------------------------------

loc_25F:				; CODE XREF: _dh_param_decode+16j
		call	_d2i_DHparams

loc_264:				; CODE XREF: _dh_param_decode+1Dj
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_287
		push	141h
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	5
		push	6Bh ; 'k'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_287:				; CODE XREF: _dh_param_decode+29j
		push	eax
		mov	eax, [esi+0Ch]
		push	dword ptr [eax]
		push	esi
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		retn
_dh_param_decode endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_param_encode proc near		; DATA XREF: .rdata:000004B0o
					; .rdata:00000520o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+0Ch], offset _dhx_asn1_meth
		mov	ecx, [eax+14h]
		jnz	short loc_2B9
		mov	[esp+arg_0], ecx
		jmp	_i2d_DHxparams
; ---------------------------------------------------------------------------

loc_2B9:				; CODE XREF: _dh_param_encode+Ej
		mov	[esp+arg_0], ecx
		jmp	_i2d_DHparams
_dh_param_encode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_dh_size	proc near		; DATA XREF: .rdata:000004A4o
					; .rdata:00000514o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_DH_size
		add	esp, 4
		retn
_int_dh_size	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_bits	proc near		; DATA XREF: .rdata:000004A8o
					; .rdata:00000518o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		push	dword ptr [eax+8]
		call	_BN_num_bits
		add	esp, 4
		retn
_dh_bits	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_cmp_parameters proc	near		; CODE XREF: _dh_pub_cmp+Cp
					; DATA XREF: .rdata:000004BCo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	eax, [edi+14h]
		push	dword ptr [eax+8]
		mov	eax, [esi+14h]
		push	dword ptr [eax+8]
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_34B
		mov	eax, [edi+14h]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+14h]
		push	dword ptr [eax+0Ch]
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_34B
		cmp	dword ptr [esi+0Ch], offset _dhx_asn1_meth
		jnz	short loc_343
		mov	eax, [edi+14h]
		push	dword ptr [eax+24h]
		mov	eax, [esi+14h]
		push	dword ptr [eax+24h]
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_34B

loc_343:				; CODE XREF: _dh_cmp_parameters+41j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_34B:				; CODE XREF: _dh_cmp_parameters+20j
					; _dh_cmp_parameters+38j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_dh_cmp_parameters endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_copy_parameters proc near		; DATA XREF: .rdata:000004B8o
					; .rdata:00000528o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		xor	eax, eax
		cmp	dword ptr [ecx+0Ch], offset _dhx_asn1_meth
		setz	al
		push	eax
		mov	eax, [esp+4+arg_0]
		push	dword ptr [ecx+14h]
		push	dword ptr [eax+14h]
		call	_int_dh_param_copy
		add	esp, 0Ch
		retn
_dh_copy_parameters endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 374h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_missing_parameters proc near	; DATA XREF: .rdata:000004B4o
					; .rdata:00000524o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		cmp	dword ptr [eax+8], 0
		jz	short loc_38A
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_38A
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_38A:				; CODE XREF: _dh_missing_parameters+Bj
					; _dh_missing_parameters+11j
		mov	eax, 1
		retn
_dh_missing_parameters endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 390h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_pub_cmp	proc near		; DATA XREF: .rdata:00000490o
					; .rdata:00000500o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi

loc_396:				; DATA XREF: .rdata:_dhx_asn1_metho
					; .rdata:000004E8o
		mov	edi, [esp+8+arg_0]
		push	esi
		push	edi
		call	_dh_cmp_parameters
		add	esp, 8
		test	eax, eax
		jnz	short loc_3AB
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3AB:				; CODE XREF: _dh_pub_cmp+16j
		mov	eax, [edi+14h]
		push	dword ptr [eax+14h]
		mov	eax, [esi+14h]
		push	dword ptr [eax+14h]
		call	_BN_cmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		inc	eax
		pop	edi
		pop	esi
		retn
_dh_pub_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_param_print	proc near		; DATA XREF: .rdata:000004C0o
					; .rdata:00000530o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	0
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+10h+arg_0]
		call	_do_dh_print
		add	esp, 14h
		retn
_dh_param_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_public_print proc near		; DATA XREF: .rdata:00000494o
					; .rdata:00000504o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	1
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+10h+arg_0]
		call	_do_dh_print
		add	esp, 14h
		retn
_dh_public_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 408h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_private_print proc near		; DATA XREF: .rdata:000004A0o
					; .rdata:00000510o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	2
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+10h+arg_0]
		call	_do_dh_print
		add	esp, 14h
		retn
_dh_private_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 428h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_pkey_ctrl	proc near		; DATA XREF: .rdata:0000053Co

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		sub	eax, 7
		jz	short loc_446
		sub	eax, 1
		jnz	short loc_46D
		mov	eax, [esp+arg_C]
		mov	dword ptr [eax], 1
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_446:				; CODE XREF: _dh_pkey_ctrl+7j
		mov	eax, [esp+arg_8]
		cmp	eax, 1
		jnz	short loc_45C
		push	[esp+arg_C]
		call	_dh_cms_decrypt
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_45C:				; CODE XREF: _dh_pkey_ctrl+25j
		test	eax, eax
		jnz	short loc_46D
		push	[esp+arg_C]
		call	_dh_cms_encrypt
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_46D:				; CODE XREF: _dh_pkey_ctrl+Cj
					; _dh_pkey_ctrl+36j
		mov	eax, 0FFFFFFFEh
		retn
_dh_pkey_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 474h
		public _dh_asn1_meth
_dh_asn1_meth	dd 2 dup(1Ch), 0
		dd offset ??_C@_02EPINMGPM@DH?$AA@ ; `string'
		dd offset ??_C@_0BJ@OPGBMMOB@OpenSSL?5PKCS?$CD3?5DH?5method?$AA@ ; "OpenSSL PKCS#3 DH method"
		dd offset _dh_pub_decode
		dd offset _dh_pub_encode
		dd offset _dh_pub_cmp
		dd offset _dh_public_print
		dd offset _dh_priv_decode
		dd offset _dh_priv_encode
		dd offset _dh_private_print
		dd offset _int_dh_size
		dd offset _dh_bits
		dd offset _dh_param_decode
		dd offset _dh_param_encode
		dd offset _dh_missing_parameters
		dd offset _dh_copy_parameters
		dd offset _dh_cmp_parameters
		dd offset _dh_param_print
		align 8
		dd offset _int_dh_free
		dd 6 dup(0)
		public _dhx_asn1_meth
_dhx_asn1_meth	dd offset loc_396+2	; DATA XREF: _dh_priv_decode+82o
					; _dh_priv_encode+45o ...
		dd offset loc_396+2
		align 10h
		dd offset ??_C@_08HOHHODNK@X9?442?5DH?$AA@ ; "X9.42 DH"
		dd offset ??_C@_0BI@JOIJFJMC@OpenSSL?5X9?442?5DH?5method?$AA@ ;	"OpenSSL X9.42 DH method"
		dd offset _dh_pub_decode
		dd offset _dh_pub_encode
		dd offset _dh_pub_cmp
		dd offset _dh_public_print
		dd offset _dh_priv_decode
		dd offset _dh_priv_encode
		dd offset _dh_private_print
		dd offset _int_dh_size
		dd offset _dh_bits
		dd offset _dh_param_decode
		dd offset _dh_param_encode
		dd offset _dh_missing_parameters
		dd offset _dh_copy_parameters
		dd offset _dh_cmp_parameters
		dd offset _dh_param_print
		align 8
		dd offset _int_dh_free
		dd offset _dh_pkey_ctrl
		dd 4 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 550h
; COMDAT (pick any)
		public ??_C@_02EPINMGPM@DH?$AA@
; `string'
??_C@_02EPINMGPM@DH?$AA@ db 44h, 48h, 0	; DATA XREF: .rdata:00000480o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 554h
; COMDAT (pick any)
		public ??_C@_0BJ@OPGBMMOB@OpenSSL?5PKCS?$CD3?5DH?5method?$AA@
; `string'
??_C@_0BJ@OPGBMMOB@OpenSSL?5PKCS?$CD3?5DH?5method?$AA@ db 'OpenSSL PKCS#3 DH method',0
					; DATA XREF: .rdata:00000484o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 570h
; COMDAT (pick any)
		public ??_C@_08HOHHODNK@X9?442?5DH?$AA@
; `string'
??_C@_08HOHHODNK@X9?442?5DH?$AA@ db 'X9.42 DH',0 ; DATA XREF: .rdata:000004F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 57Ch
; COMDAT (pick any)
		public ??_C@_0BI@JOIJFJMC@OpenSSL?5X9?442?5DH?5method?$AA@
; `string'
??_C@_0BI@JOIJFJMC@OpenSSL?5X9?442?5DH?5method?$AA@ db 'OpenSSL X9.42 DH method',0
					; DATA XREF: .rdata:000004F4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 594h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_dh_free	proc near		; DATA XREF: .rdata:000004C8o
					; .rdata:00000538o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_DH_free
		pop	ecx
		retn
_int_dh_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_pub_decode	proc near		; DATA XREF: .rdata:00000488o
					; .rdata:000004F8o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h
		call	__chkstk
		push	[esp+18h+arg_4]
		lea	eax, [esp+1Ch+var_14]
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		lea	eax, [esp+24h+var_4]
		push	eax
		push	0
		call	_X509_PUBKEY_get0_param
		add	esp, 14h
		test	eax, eax
		jnz	short loc_5D3
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_5D3:				; CODE XREF: _dh_pub_decode+29j
		push	ebx
		push	esi
		push	edi
		push	[esp+24h+var_14]
		lea	eax, [esp+28h+var_C]
		push	eax
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	0
		call	_X509_ALGOR_get0
		add	esp, 10h
		cmp	[esp+24h+var_10], 10h
		jz	short loc_613
		push	72h ; 'r'
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	69h ; 'i'
		push	6Ch ; 'l'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_613:				; CODE XREF: _dh_pub_decode+4Fj
		mov	ecx, [esp+24h+var_C]
		mov	ebx, [esp+24h+arg_0]
		mov	eax, [ecx+8]
		cmp	dword ptr [ebx+0Ch], offset _dhx_asn1_meth
		mov	[esp+24h+var_18], eax
		mov	eax, [ecx]
		push	eax
		lea	eax, [esp+28h+var_18]
		push	eax
		push	0
		jnz	short loc_63C
		call	_d2i_DHxparams
		jmp	short loc_641
; ---------------------------------------------------------------------------

loc_63C:				; CODE XREF: _dh_pub_decode+8Fj
		call	_d2i_DHparams

loc_641:				; CODE XREF: _dh_pub_decode+96j
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_668
		push	7Bh ; '{'
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	68h ; 'h'
		push	6Ch ; 'l'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_668:				; CODE XREF: _dh_pub_decode+A4j
		push	[esp+24h+var_8]
		lea	eax, [esp+28h+var_4]
		push	eax
		push	0
		call	_d2i_ASN1_INTEGER
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_6AB
		push	80h ; ''
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	68h ; 'h'
		push	6Ch ; 'l'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_DH_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_6AB:				; CODE XREF: _dh_pub_decode+DBj
		push	0
		push	edi
		call	_ASN1_INTEGER_to_BN
		add	esp, 8
		mov	[esi+14h], eax
		test	eax, eax
		jnz	short loc_6ED
		push	86h ; ''
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	6Dh ; 'm'
		push	6Ch ; 'l'
		push	5
		call	_ERR_put_error

$err$18:
		push	edi
		call	_ASN1_INTEGER_free
		add	esp, 18h
		push	esi
		call	_DH_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_6ED:				; CODE XREF: _dh_pub_decode+117j
		push	edi
		call	_ASN1_INTEGER_free
		mov	eax, [ebx+0Ch]
		push	esi
		push	dword ptr [eax]
		push	ebx
		call	_EVP_PKEY_assign
		add	esp, 10h
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
_dh_pub_decode	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 710h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_pub_encode	proc near		; DATA XREF: .rdata:0000048Co
					; .rdata:000004FCo

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx+14h]
		mov	[esp+14h+var_4], 0
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_776
		push	0A4h ; '¤'

loc_73D:				; CODE XREF: _dh_pub_encode+8Ej
					; _dh_pub_encode+C2j
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	41h ; 'A'
		push	6Dh ; 'm'
		push	5
		call	_ERR_put_error
		add	esp, 14h

$err$16:				; CODE XREF: _dh_pub_encode+A1j
					; _dh_pub_encode+EBj
		mov	eax, [esp+14h+var_4]
		test	eax, eax
		jz	short loc_761
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_761:				; CODE XREF: _dh_pub_encode+46j
		test	esi, esi
		jz	short loc_76E
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_76E:				; CODE XREF: _dh_pub_encode+53j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_776:				; CODE XREF: _dh_pub_encode+26j
		cmp	dword ptr [ebx+0Ch], offset _dhx_asn1_meth
		lea	eax, [esi+8]
		push	eax
		push	edi
		jnz	short loc_78B
		call	_i2d_DHxparams
		jmp	short loc_790
; ---------------------------------------------------------------------------

loc_78B:				; CODE XREF: _dh_pub_encode+72j
		call	_i2d_DHparams

loc_790:				; CODE XREF: _dh_pub_encode+79j
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jg	short loc_7A0
		push	0A9h ; '©'
		jmp	short loc_73D
; ---------------------------------------------------------------------------

loc_7A0:				; CODE XREF: _dh_pub_encode+87j
		push	0
		push	dword ptr [edi+14h]
		call	_BN_to_ASN1_INTEGER
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$16
		lea	eax, [esp+14h+var_4]
		push	eax
		push	edi
		call	_i2d_ASN1_INTEGER
		push	edi
		mov	ebp, eax
		call	_ASN1_INTEGER_free
		add	esp, 0Ch
		test	ebp, ebp
		jg	short loc_7D7
		push	0B7h ; '·'
		jmp	loc_73D
; ---------------------------------------------------------------------------

loc_7D7:				; CODE XREF: _dh_pub_encode+BBj
		mov	eax, [ebx+0Ch]
		push	ebp
		push	[esp+18h+var_4]
		push	esi
		push	10h
		push	dword ptr [eax]
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+28h+arg_0]
		call	_X509_PUBKEY_set0_param
		add	esp, 18h
		test	eax, eax
		jz	$err$16
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
_dh_pub_encode	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 80Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DHparams_dup
_DHparams_dup	proc near		; CODE XREF: _dh_cms_set_peerkey+7Ap

arg_0		= dword	ptr  4

		push	esi
		call	_DH_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_834
		push	0FFFFFFFFh
		push	[esp+8+arg_0]
		push	esi
		call	_int_dh_param_copy
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_838
		push	esi
		call	_DH_free
		add	esp, 4

loc_834:				; CODE XREF: _DHparams_dup+Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_838:				; CODE XREF: _DHparams_dup+1Dj
		mov	eax, esi
		pop	esi
		retn
_DHparams_dup	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 83Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DHparams_print
_DHparams_print	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	4
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_do_dh_print
		add	esp, 14h
		retn
_DHparams_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 854h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_d2i_dhp	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+0Ch], offset _dhx_asn1_meth
		jnz	short loc_86E
		mov	[esp+arg_0], 0
		jmp	_d2i_DHxparams
; ---------------------------------------------------------------------------

loc_86E:				; CODE XREF: _d2i_dhp+Bj
		mov	[esp+arg_0], 0
		jmp	_d2i_DHparams
_d2i_dhp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 87Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_cms_decrypt	proc near		; CODE XREF: _dh_pkey_ctrl+2Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	edi
		call	_CMS_RecipientInfo_get0_pkey_ctx
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_8F9
		push	esi
		call	_EVP_PKEY_CTX_get0_peerkey
		add	esp, 4
		test	eax, eax
		jnz	short loc_901
		push	eax
		push	eax
		push	eax
		lea	eax, [esp+1Ch+var_4]
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		push	edi
		call	_CMS_RecipientInfo_kari_get0_orig_id
		add	esp, 18h
		test	eax, eax
		jz	short loc_8F9
		mov	eax, [esp+10h+var_8]
		test	eax, eax
		jz	short loc_8F9
		mov	ecx, [esp+10h+var_4]
		test	ecx, ecx
		jz	short loc_8F9
		push	ecx
		push	eax
		push	esi
		call	_dh_cms_set_peerkey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_901
		push	329h
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	71h ; 'q'
		push	75h ; 'u'
		push	5
		call	_ERR_put_error
		add	esp, 14h

loc_8F9:				; CODE XREF: _dh_cms_decrypt+1Dj
					; _dh_cms_decrypt+44j ...
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_901:				; CODE XREF: _dh_cms_decrypt+2Aj
					; _dh_cms_decrypt+63j
		push	edi
		push	esi
		call	_dh_cms_set_shared_info
		add	esp, 8
		test	eax, eax
		jnz	short loc_92F
		push	32Fh
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	72h ; 'r'
		push	75h ; 'u'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_92F:				; CODE XREF: _dh_cms_decrypt+91j
		pop	edi
		mov	eax, 1
		pop	esi
		add	esp, 8
		retn
_dh_cms_decrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 93Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_cms_encrypt	proc near		; CODE XREF: _dh_pkey_ctrl+3Cp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 24h ; '$'
		call	__chkstk
		push	ebp
		mov	ebp, [esp+28h+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		push	ebp
		mov	[esp+34h+var_24], esi
		mov	[esp+34h+var_10], esi
		mov	[esp+34h+var_C], esi
		call	_CMS_RecipientInfo_get0_pkey_ctx
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_971
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_971:				; CODE XREF: _dh_cms_encrypt+2Cj
		push	ebx
		push	edi
		call	_EVP_PKEY_CTX_get0_pkey
		push	0
		push	0
		mov	ebx, eax
		lea	eax, [esp+40h+var_1C]
		push	0
		push	eax
		lea	eax, [esp+48h+var_20]
		push	eax
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_orig_id
		add	esp, 1Ch
		test	eax, eax
		jz	loc_CB7
		push	[esp+34h+var_20]
		lea	eax, [esp+38h+var_8]
		push	0
		push	0
		push	eax
		call	_X509_ALGOR_get0
		push	0
		call	_OBJ_nid2obj
		add	esp, 14h
		cmp	[esp+34h+var_8], eax
		jnz	loc_A42
		mov	eax, [ebx+14h]
		push	0
		push	dword ptr [eax+14h]
		call	_BN_to_ASN1_INTEGER
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_CB7
		lea	eax, [esp+34h+var_24]
		push	eax
		push	ebx
		call	_i2d_ASN1_INTEGER
		push	ebx
		mov	[esp+40h+var_4], eax
		call	_ASN1_INTEGER_free
		mov	eax, [esp+40h+var_4]
		add	esp, 0Ch
		test	eax, eax
		jle	loc_CB7
		push	eax
		push	[esp+38h+var_24]
		push	[esp+3Ch+var_1C]
		call	_ASN1_STRING_set0
		mov	eax, [esp+40h+var_1C]
		add	esp, 0Ch
		and	dword ptr [eax+0Ch], 0FFFFFFF0h
		mov	eax, [esp+34h+var_1C]
		push	0
		push	0FFFFFFFFh
		push	398h
		or	dword ptr [eax+0Ch], 8
		mov	[esp+40h+var_24], esi
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+40h+var_20]
		call	_X509_ALGOR_set0
		add	esp, 10h

loc_A42:				; CODE XREF: _dh_cms_encrypt+7Fj
		push	0
		push	0FFFFFFFEh
		push	1006h
		push	400h
		push	398h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		jle	loc_CB7
		lea	eax, [esp+34h+var_18]
		push	eax
		push	0
		push	1008h
		push	400h
		push	398h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jz	loc_CB7
		cmp	ebx, 1
		jnz	short loc_ABA
		push	0
		push	2
		push	1006h
		push	400h
		push	398h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_CB7
		jmp	short loc_AC3
; ---------------------------------------------------------------------------

loc_ABA:				; CODE XREF: _dh_cms_encrypt+156j
		cmp	ebx, 2
		jnz	loc_CB7

loc_AC3:				; CODE XREF: _dh_cms_encrypt+17Cj
		mov	eax, [esp+34h+var_18]
		test	eax, eax
		jnz	short loc_AF9
		call	_EVP_sha1
		push	eax
		push	0
		push	1007h
		push	400h
		push	398h
		push	edi
		mov	[esp+4Ch+var_18], eax
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_CB7
		jmp	short loc_B0B
; ---------------------------------------------------------------------------

loc_AF9:				; CODE XREF: _dh_cms_encrypt+18Dj
		push	eax
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 40h ; '@'
		jnz	loc_CB7

loc_B0B:				; CODE XREF: _dh_cms_encrypt+1BBj
		lea	eax, [esp+34h+var_14]
		push	eax
		lea	eax, [esp+38h+var_20]
		push	eax
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_alg
		add	esp, 0Ch
		test	eax, eax
		jz	loc_CB7
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_ctx
		mov	ebx, eax
		push	ebx
		call	_EVP_CIPHER_CTX_cipher
		push	eax
		call	_EVP_CIPHER_type
		mov	ebp, eax
		push	ebp
		call	_OBJ_nid2obj
		push	eax
		push	0
		push	100Dh
		push	400h
		push	398h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 28h
		test	eax, eax
		jle	loc_CB7
		push	ebx
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		mov	[esp+34h+var_4], eax
		call	_X509_ALGOR_new
		mov	esi, eax
		test	esi, esi
		jz	loc_CB7
		push	ebp
		call	_OBJ_nid2obj
		add	esp, 4
		mov	[esi], eax
		call	_ASN1_TYPE_new
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_CB7
		push	eax
		push	ebx
		call	_EVP_CIPHER_param_to_asn1
		add	esp, 8
		test	eax, eax
		jle	loc_CB7
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_get
		add	esp, 4
		test	eax, eax
		jnz	short loc_BCF
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_free
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_BCF:				; CODE XREF: _dh_cms_encrypt+27Fj
		push	0
		push	[esp+38h+var_4]
		push	1009h
		push	400h
		push	398h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_CB7
		mov	eax, [esp+34h+var_14]
		test	eax, eax
		jz	short loc_C2A
		push	eax
		call	_ASN1_STRING_length
		add	esp, 4
		mov	[esp+34h+var_10], eax
		push	eax
		push	[esp+38h+var_14]
		call	_ASN1_STRING_data
		add	esp, 4
		push	eax
		call	_BUF_memdup
		add	esp, 8
		test	eax, eax
		jz	loc_CB7
		jmp	short loc_C2C
; ---------------------------------------------------------------------------

loc_C2A:				; CODE XREF: _dh_cms_encrypt+2BFj
		xor	eax, eax

loc_C2C:				; CODE XREF: _dh_cms_encrypt+2ECj
		push	eax
		push	[esp+38h+var_10]
		push	100Bh
		push	400h
		push	398h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_CB7
		lea	eax, [esp+34h+var_24]
		mov	[esp+34h+var_24], 0
		push	eax
		push	esi
		call	_i2d_X509_ALGOR
		mov	ecx, [esp+3Ch+var_24]
		add	esp, 8
		mov	ebx, eax
		test	ecx, ecx
		jz	short loc_CC8
		test	ebx, ebx
		jz	short $err$36
		call	_ASN1_STRING_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_CB7
		push	ebx
		push	[esp+38h+var_24]
		push	edi
		call	_ASN1_STRING_set0
		add	esp, 0Ch
		mov	[esp+34h+var_24], 0
		push	edi
		push	10h
		push	0F5h ; 'õ'
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+40h+var_20]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	[esp+34h+var_C], 1

loc_CB7:				; CODE XREF: _dh_cms_encrypt+59j
					; _dh_cms_encrypt+99j ...
		mov	ecx, [esp+34h+var_24]

$err$36:				; CODE XREF: _dh_cms_encrypt+333j
		test	ecx, ecx
		jz	short loc_CC8
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_CC8:				; CODE XREF: _dh_cms_encrypt+32Fj
					; _dh_cms_encrypt+381j
		pop	ebx
		test	esi, esi
		jz	short loc_CD6
		push	esi
		call	_X509_ALGOR_free
		add	esp, 4

loc_CD6:				; CODE XREF: _dh_cms_encrypt+38Fj
		mov	eax, [esp+30h+var_C]
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 24h
		retn
_dh_cms_encrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CE4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_cms_set_peerkey proc near		; CODE XREF: _dh_cms_decrypt+59p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 18h
		call	__chkstk
		push	ebx
		push	edi
		push	[esp+20h+arg_4]
		lea	eax, [esp+24h+var_4]
		xor	edi, edi
		push	eax
		lea	eax, [esp+28h+var_14]
		xor	ebx, ebx
		push	eax
		lea	eax, [esp+2Ch+var_18]
		push	eax
		call	_X509_ALGOR_get0
		push	[esp+30h+var_18]
		call	_OBJ_obj2nid
		add	esp, 14h
		cmp	eax, 398h
		jnz	loc_E49
		mov	eax, [esp+20h+var_14]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_D35
		cmp	eax, 5
		jz	loc_E49

loc_D35:				; CODE XREF: _dh_cms_set_peerkey+46j
		push	[esp+20h+arg_0]
		call	_EVP_PKEY_CTX_get0_pkey
		add	esp, 4
		mov	[esp+20h+var_8], eax
		test	eax, eax
		jz	loc_E49
		cmp	dword ptr [eax], 398h
		jnz	loc_E49
		push	ebp
		push	esi
		push	dword ptr [eax+14h]
		call	_DHparams_dup
		mov	esi, [esp+2Ch+arg_8]
		mov	ebp, eax
		push	esi
		call	_ASN1_STRING_length
		push	esi
		mov	[esp+34h+var_10], eax
		call	_ASN1_STRING_data
		add	esp, 0Ch
		mov	[esp+28h+var_C], eax
		test	eax, eax
		jz	loc_E3A
		mov	eax, [esp+28h+var_10]
		test	eax, eax
		jz	loc_E3A
		push	eax
		lea	eax, [esp+2Ch+var_C]
		push	eax
		push	0
		call	_d2i_ASN1_INTEGER
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_DC4
		push	2AFh
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	68h ; 'h'
		push	76h ; 'v'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_E3A
; ---------------------------------------------------------------------------

loc_DC4:				; CODE XREF: _dh_cms_set_peerkey+C4j
		push	0
		push	esi
		call	_ASN1_INTEGER_to_BN
		add	esp, 8
		mov	[ebp+14h], eax
		test	eax, eax
		jnz	short loc_DF0
		push	2B5h
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	6Dh ; 'm'
		push	76h ; 'v'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$23
; ---------------------------------------------------------------------------

loc_DF0:				; CODE XREF: _dh_cms_set_peerkey+F0j
		call	_EVP_PKEY_new
		mov	ebx, eax
		test	ebx, ebx
		jz	short $err$23
		mov	ecx, [esp+28h+var_8]
		push	ebp
		mov	ecx, [ecx+0Ch]
		push	dword ptr [ecx]
		push	ebx
		call	_EVP_PKEY_assign
		push	ebx
		push	[esp+38h+arg_0]
		xor	ebp, ebp
		call	_EVP_PKEY_derive_set_peer
		add	esp, 14h
		mov	ecx, 1
		test	eax, eax
		cmovg	edi, ecx

$err$23:				; CODE XREF: _dh_cms_set_peerkey+10Aj
					; _dh_cms_set_peerkey+115j
		push	esi
		call	_ASN1_INTEGER_free
		add	esp, 4
		test	ebx, ebx
		jz	short loc_E3A
		push	ebx
		call	_EVP_PKEY_free
		add	esp, 4

loc_E3A:				; CODE XREF: _dh_cms_set_peerkey+9Ej
					; _dh_cms_set_peerkey+AAj ...
		test	ebp, ebp
		jz	short loc_E47
		push	ebp
		call	_DH_free
		add	esp, 4

loc_E47:				; CODE XREF: _dh_cms_set_peerkey+158j
		pop	esi
		pop	ebp

loc_E49:				; CODE XREF: _dh_cms_set_peerkey+39j
					; _dh_cms_set_peerkey+4Bj ...
		mov	eax, edi
		pop	edi
		pop	ebx
		add	esp, 18h
		retn
_dh_cms_set_peerkey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_cms_set_shared_info	proc near	; CODE XREF: _dh_cms_decrypt+87p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h
		call	__chkstk
		push	ebp
		mov	ebp, [esp+1Ch+arg_4]
		lea	eax, [esp+1Ch+var_C]
		push	esi
		push	edi
		push	eax
		lea	eax, [esp+28h+var_14]
		xor	esi, esi
		push	eax
		push	ebp
		xor	edi, edi
		mov	[esp+30h+var_8], esi
		call	_CMS_RecipientInfo_kari_get0_alg
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1099
		mov	eax, [esp+24h+var_14]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 0F5h ; 'õ'
		jz	short loc_EBE
		push	2DFh
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	70h ; 'p'
		push	77h ; 'w'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_EBE:				; CODE XREF: _dh_cms_set_shared_info+47j
		push	ebx
		mov	ebx, [esp+28h+arg_0]
		push	0
		push	2
		push	1006h
		push	400h
		push	398h
		push	ebx
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_1098
		call	_EVP_sha1
		push	eax
		push	0
		push	1007h
		push	400h
		push	398h
		push	ebx
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_1098
		mov	ecx, [esp+28h+var_14]
		mov	eax, [ecx+4]
		cmp	dword ptr [eax], 10h
		jnz	loc_1098
		mov	eax, [eax+4]
		mov	eax, [eax+8]
		mov	[esp+28h+var_4], eax
		mov	eax, [ecx+4]
		mov	eax, [eax+4]
		push	dword ptr [eax]
		lea	eax, [esp+2Ch+var_4]
		push	eax
		push	0
		call	_d2i_X509_ALGOR
		add	esp, 0Ch
		mov	[esp+28h+var_18], eax
		test	eax, eax
		jz	loc_1098
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_ctx
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	$err$29
		mov	eax, [esp+28h+var_18]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_cipherbyname
		add	esp, 0Ch
		mov	[esp+28h+var_10], eax
		test	eax, eax
		jz	$err$29
		push	eax
		call	_EVP_CIPHER_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 10002h
		jnz	$err$29
		push	0
		push	0
		push	0
		push	[esp+34h+var_10]
		push	ebp
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jz	$err$29
		mov	eax, [esp+28h+var_18]
		push	dword ptr [eax+4]
		push	ebp
		call	_EVP_CIPHER_asn1_to_param
		add	esp, 8
		test	eax, eax
		jle	$err$29
		push	ebp
		call	_EVP_CIPHER_CTX_key_length
		push	0
		push	eax
		push	1009h
		push	400h
		push	398h
		push	ebx
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 1Ch
		test	eax, eax
		jle	$err$29
		push	[esp+28h+var_10]
		call	_EVP_CIPHER_type
		push	eax
		call	_OBJ_nid2obj
		push	eax
		push	0
		push	100Dh
		push	400h
		push	398h
		push	ebx
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 20h
		test	eax, eax
		jle	short $err$29
		mov	eax, [esp+28h+var_C]
		test	eax, eax
		jz	short loc_1059
		push	eax
		call	_ASN1_STRING_length
		add	esp, 4
		mov	[esp+28h+var_8], eax
		push	eax
		push	[esp+2Ch+var_C]
		call	_ASN1_STRING_data
		add	esp, 4
		push	eax
		call	_BUF_memdup
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$29

loc_1059:				; CODE XREF: _dh_cms_set_shared_info+1DAj
		push	edi
		push	[esp+2Ch+var_8]
		push	100Bh
		push	400h
		push	398h
		push	ebx
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short $err$29
		xor	edi, edi
		lea	esi, [edi+1]

$err$29:				; CODE XREF: _dh_cms_set_shared_info+105j
					; _dh_cms_set_shared_info+12Bj	...
		push	[esp+28h+var_18]
		call	_X509_ALGOR_free
		add	esp, 4
		test	edi, edi
		jz	short loc_1098
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_1098:				; CODE XREF: _dh_cms_set_shared_info+8Dj
					; _dh_cms_set_shared_info+B5j ...
		pop	ebx

loc_1099:				; CODE XREF: _dh_cms_set_shared_info+2Ej
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 18h
		retn
_dh_cms_set_shared_info	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_dh_print	proc near		; CODE XREF: _dh_param_print+15p
					; _dh_public_print+15p	...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_10]
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+14h+arg_4]
		push	edi
		cmp	ebp, 2
		jnz	short loc_10D1
		mov	eax, [esi+18h]
		mov	ecx, [esi+14h]
		mov	[esp+18h+arg_4], eax
		mov	[esp+18h+var_8], ecx
		jmp	short loc_10EA
; ---------------------------------------------------------------------------

loc_10D1:				; CODE XREF: _do_dh_print+1Bj
		xor	eax, eax
		mov	[esp+18h+arg_4], eax
		test	ebp, ebp
		jle	short loc_10E4
		mov	ecx, [esi+14h]
		mov	[esp+18h+var_8], ecx
		jmp	short loc_10EA
; ---------------------------------------------------------------------------

loc_10E4:				; CODE XREF: _do_dh_print+35j
		xor	eax, eax
		mov	[esp+18h+var_8], eax

loc_10EA:				; CODE XREF: _do_dh_print+2Bj
					; _do_dh_print+3Ej
		mov	eax, [esi+8]
		test	eax, eax
		jz	loc_1443
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	edi, [edx+eax]
		sar	edi, 3
		test	edi, edi
		jz	loc_1443
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1134
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_1134:				; CODE XREF: _do_dh_print+74j
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_1155
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_1155:				; CODE XREF: _do_dh_print+95j
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_1176
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_1176:				; CODE XREF: _do_dh_print+B6j
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_1197
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_1197:				; CODE XREF: _do_dh_print+D7j
		mov	eax, [esp+18h+var_8]
		test	eax, eax
		jz	short loc_11B9
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_11B9:				; CODE XREF: _do_dh_print+F9j
		mov	eax, [esp+18h+arg_4]
		test	eax, eax
		jz	short loc_11DB
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_11DB:				; CODE XREF: _do_dh_print+11Bj
		cmp	ebp, 2
		jnz	short loc_11EA
		mov	[esp+18h+var_4], offset	??_C@_0P@ELBFBOG@DH?5Private?9Key?$AA@ ; "DH Private-Key"
		jmp	short loc_1200
; ---------------------------------------------------------------------------

loc_11EA:				; CODE XREF: _do_dh_print+13Aj
		cmp	[esp+18h+arg_10], 1
		mov	ebp, offset ??_C@_0O@EBAKGDPN@DH?5Public?9Key?$AA@ ; "DH Public-Key"
		mov	eax, offset ??_C@_0O@OMPEPKAJ@DH?5Parameters?$AA@ ; "DH	Parameters"
		cmovnz	ebp, eax
		mov	[esp+18h+var_4], ebp

loc_1200:				; CODE XREF: _do_dh_print+144j
		push	177h
		lea	eax, [edi+0Ah]
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		mov	[esp+18h+arg_10], ebx
		test	ebx, ebx
		jnz	short loc_1228
		lea	eax, [ebx+41h]
		jmp	$err$83
; ---------------------------------------------------------------------------

loc_1228:				; CODE XREF: _do_dh_print+17Aj
		mov	ebp, [esp+18h+arg_8]
		mov	edi, [esp+18h+arg_0]
		push	80h ; ''
		push	ebp
		push	edi
		call	_BIO_indent
		push	dword ptr [esi+8]
		call	_BN_num_bits
		push	eax
		push	[esp+2Ch+var_4]
		push	offset ??_C@_0O@OPPPNLCD@?$CFs?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ ; "%s: (%d bit)\n"
		push	edi
		call	_BIO_printf
		add	esp, 20h
		test	eax, eax
		jle	loc_144E
		mov	eax, [esp+18h+arg_4]
		add	ebp, 4
		push	ebp
		push	ebx
		push	eax
		push	offset ??_C@_0N@MPONDEBM@private?9key?3?$AA@ ; "private-key:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_144E
		mov	eax, [esp+18h+var_8]
		push	ebp
		push	ebx
		push	eax
		push	offset ??_C@_0M@BCALNHOD@public?9key?3?$AA@ ; "public-key:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_144E
		push	ebp
		push	ebx
		push	dword ptr [esi+8]
		push	offset ??_C@_06POMKLBDA@prime?3?$AA@ ; "prime:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_144E
		push	ebp
		push	ebx
		push	dword ptr [esi+0Ch]
		push	offset ??_C@_0L@HDGHCIJF@generator?3?$AA@ ; "generator:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_144E
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_12F2
		push	ebp
		push	ebx
		push	eax
		push	offset ??_C@_0BA@PFGIPGBD@subgroup?5order?3?$AA@ ; "subgroup order:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_144E

loc_12F2:				; CODE XREF: _do_dh_print+233j
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_1312
		push	ebp
		push	ebx
		push	eax
		push	offset ??_C@_0BB@HEOELHJJ@subgroup?5factor?3?$AA@ ; "subgroup factor:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_144E

loc_1312:				; CODE XREF: _do_dh_print+253j
		cmp	dword ptr [esi+2Ch], 0
		jz	loc_13F9
		push	80h ; ''
		push	ebp
		push	edi
		call	_BIO_indent
		push	offset ??_C@_05PENGGDLK@seed?3?$AA@ ; "seed:"
		push	edi
		call	_BIO_puts
		xor	ebx, ebx
		add	esp, 14h
		cmp	[esi+30h], ebx
		jle	loc_13D7
		nop	dword ptr [eax]

loc_1344:				; CODE XREF: _do_dh_print+32Dj
		mov	eax, 88888889h
		imul	ebx
		add	edx, ebx
		sar	edx, 3
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		mov	ecx, eax
		shl	ecx, 4
		sub	ecx, eax
		mov	eax, ebx
		sub	eax, ecx
		jnz	short loc_1394
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_144A
		push	80h ; ''
		lea	eax, [ebp+4]
		push	eax
		push	edi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_144A

loc_1394:				; CODE XREF: _do_dh_print+2BEj
		lea	ecx, [ebx+1]
		mov	eax, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		cmp	ecx, [esi+30h]
		mov	[esp+18h+arg_4], ecx
		mov	ecx, offset ??_C@_01JLIPDDHJ@?3?$AA@ ; `string'
		cmovnz	eax, ecx
		push	eax
		mov	eax, [esi+2Ch]
		movzx	eax, byte ptr [eax+ebx]
		push	eax
		push	offset ??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@ ; "%02x%s"
		push	edi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	loc_144A
		mov	ebx, [esp+18h+arg_4]
		cmp	ebx, [esi+30h]
		jl	loc_1344

loc_13D7:				; CODE XREF: _do_dh_print+297j
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_13F5
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_13F5:				; CODE XREF: _do_dh_print+345j
		mov	ebx, [esp+18h+arg_10]

loc_13F9:				; CODE XREF: _do_dh_print+272j
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_1415
		push	ebp
		push	ebx
		push	eax
		push	offset ??_C@_08ILALFGPI@counter?3?$AA@ ; "counter:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_144E

loc_1415:				; CODE XREF: _do_dh_print+35Aj
		cmp	dword ptr [esi+10h], 0
		jz	short loc_143C
		push	80h ; ''
		push	ebp
		push	edi
		call	_BIO_indent
		push	dword ptr [esi+10h]
		push	offset ??_C@_0CF@KKPEILHE@recommended?9private?9length?3?5?$CFd?5b@ ; "recommended-private-length: %d bits\n"
		push	edi
		call	_BIO_printf
		add	esp, 18h
		test	eax, eax
		jle	short loc_144E

loc_143C:				; CODE XREF: _do_dh_print+375j
		mov	ebp, 1
		jmp	short loc_146C
; ---------------------------------------------------------------------------

loc_1443:				; CODE XREF: _do_dh_print+4Bj
					; _do_dh_print+69j
		mov	eax, 43h ; 'C'
		jmp	short $err$83
; ---------------------------------------------------------------------------

loc_144A:				; CODE XREF: _do_dh_print+2D0j
					; _do_dh_print+2EAj ...
		mov	ebx, [esp+18h+arg_10]

loc_144E:				; CODE XREF: _do_dh_print+1B5j
					; _do_dh_print+1D5j ...
		mov	eax, 7

$err$83:				; CODE XREF: _do_dh_print+17Fj
					; _do_dh_print+3A4j
		push	1ACh
		push	offset ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ ; ".\\crypto\\dh\\dh_ameth.c"
		push	eax
		push	64h ; 'd'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		xor	ebp, ebp

loc_146C:				; CODE XREF: _do_dh_print+39Dj
		test	ebx, ebx
		jz	short loc_1479
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_1479:				; CODE XREF: _do_dh_print+3CAj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_do_dh_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1484h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2d_dhp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		cmp	dword ptr [eax+0Ch], offset _dhx_asn1_meth
		jnz	short loc_14A2
		call	_i2d_DHxparams
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_14A2:				; CODE XREF: _i2d_dhp+13j
		call	_i2d_DHparams
		add	esp, 8
		retn
_i2d_dhp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_dh_bn_cpy	proc near		; CODE XREF: _int_dh_param_copy+8Ap
					; _int_dh_param_copy+9Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		test	eax, eax
		jz	short loc_14C6
		push	eax
		call	_BN_dup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_14C8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_14C6:				; CODE XREF: _int_dh_bn_cpy+7j
		xor	esi, esi

loc_14C8:				; CODE XREF: _int_dh_bn_cpy+16j
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_14DC
		push	eax
		call	_BN_free
		add	esp, 4

loc_14DC:				; CODE XREF: _int_dh_bn_cpy+25j
		mov	[edi], esi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_int_dh_bn_cpy	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_dh_param_copy proc	near		; CODE XREF: _dh_copy_parameters+1Bp
					; _DHparams_dup+13p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_1501
		xor	ebx, ebx
		cmp	[edi+24h], ebx
		setnz	bl

loc_1501:				; CODE XREF: _int_dh_param_copy+Fj
		mov	eax, [edi+8]
		mov	esi, [esp+10h+arg_0]
		test	eax, eax
		jz	short loc_1522
		push	eax
		call	_BN_dup
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1524

loc_151B:				; CODE XREF: _int_dh_param_copy+94j
					; _int_dh_param_copy+A7j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1522:				; CODE XREF: _int_dh_param_copy+22j
		xor	ebp, ebp

loc_1524:				; CODE XREF: _int_dh_param_copy+31j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_1534
		push	eax
		call	_BN_free
		add	esp, 4

loc_1534:				; CODE XREF: _int_dh_param_copy+41j
		mov	[esi+8], ebp
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1552
		push	eax
		call	_BN_dup
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1554
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1552:				; CODE XREF: _int_dh_param_copy+54j
		xor	ebp, ebp

loc_1554:				; CODE XREF: _int_dh_param_copy+63j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1564
		push	eax
		call	_BN_free
		add	esp, 4

loc_1564:				; CODE XREF: _int_dh_param_copy+71j
		mov	[esi+0Ch], ebp
		test	ebx, ebx
		jz	short loc_15DD
		push	dword ptr [edi+24h]
		lea	eax, [esi+24h]
		push	eax
		call	_int_dh_bn_cpy
		add	esp, 8
		test	eax, eax
		jz	short loc_151B
		push	dword ptr [edi+28h]
		lea	eax, [esi+28h]
		push	eax
		call	_int_dh_bn_cpy
		add	esp, 8
		test	eax, eax
		jz	short loc_151B
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_15AF
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [esi+2Ch], 0
		mov	dword ptr [esi+30h], 0

loc_15AF:				; CODE XREF: _int_dh_param_copy+AEj
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_15E3
		push	dword ptr [edi+30h]
		push	eax
		call	_BUF_memdup
		add	esp, 8
		mov	[esi+2Ch], eax
		test	eax, eax
		jz	loc_151B
		mov	eax, [edi+30h]
		pop	edi
		mov	[esi+30h], eax
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_15DD:				; CODE XREF: _int_dh_param_copy+81j
		mov	eax, [edi+10h]
		mov	[esi+10h], eax

loc_15E3:				; CODE XREF: _int_dh_param_copy+CCj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_int_dh_param_copy endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_update_buflen	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_1617
		push	eax
		call	_BN_num_bits
		mov	ecx, [esp+4+arg_4]
		add	eax, 7
		cdq
		add	esp, 4
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	[ecx], eax
		jnb	short locret_1617
		mov	[ecx], eax

locret_1617:				; CODE XREF: _update_buflen+6j
					; _update_buflen+23j
		retn
_update_buflen	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1618h
; COMDAT (pick any)
		public ??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@
; `string'
??_C@_0BH@KKMLPDGC@?4?2crypto?2dh?2dh_ameth?4c?$AA@ db '.\crypto\dh\dh_ameth.c',0
					; DATA XREF: _dh_priv_decode+C5o
					; _dh_priv_decode+101o	...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1630h
; COMDAT (pick any)
		public ??_C@_0P@ELBFBOG@DH?5Private?9Key?$AA@
; `string'
??_C@_0P@ELBFBOG@DH?5Private?9Key?$AA@ db 'DH Private-Key',0 ; DATA XREF: _do_dh_print+13Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1640h
; COMDAT (pick any)
		public ??_C@_0O@EBAKGDPN@DH?5Public?9Key?$AA@
; `string'
??_C@_0O@EBAKGDPN@DH?5Public?9Key?$AA@ db 'DH Public-Key',0 ; DATA XREF: _do_dh_print+14Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1650h
; COMDAT (pick any)
		public ??_C@_0O@OMPEPKAJ@DH?5Parameters?$AA@
; `string'
??_C@_0O@OMPEPKAJ@DH?5Parameters?$AA@ db 'DH Parameters',0 ; DATA XREF: _do_dh_print+150o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1660h
; COMDAT (pick any)
		public ??_C@_0O@OPPPNLCD@?$CFs?3?5?$CI?$CFd?5bit?$CJ?6?$AA@
; `string'
??_C@_0O@OPPPNLCD@?$CFs?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ db	'%s: (%d bit)',0Ah,0
					; DATA XREF: _do_dh_print+1A5o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1670h
; COMDAT (pick any)
		public ??_C@_0N@MPONDEBM@private?9key?3?$AA@
; `string'
??_C@_0N@MPONDEBM@private?9key?3?$AA@ db 'private-key:',0 ; DATA XREF: _do_dh_print+1C5o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1680h
; COMDAT (pick any)
		public ??_C@_0M@BCALNHOD@public?9key?3?$AA@
; `string'
??_C@_0M@BCALNHOD@public?9key?3?$AA@ db	'public-key:',0 ; DATA XREF: _do_dh_print+1E2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 168Ch
; COMDAT (pick any)
		public ??_C@_06POMKLBDA@prime?3?$AA@
; `string'
??_C@_06POMKLBDA@prime?3?$AA@ db 'prime:',0 ; DATA XREF: _do_dh_print+1FDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1694h
; COMDAT (pick any)
		public ??_C@_0L@HDGHCIJF@generator?3?$AA@
; `string'
??_C@_0L@HDGHCIJF@generator?3?$AA@ db 'generator:',0 ; DATA XREF: _do_dh_print+218o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16A0h
; COMDAT (pick any)
		public ??_C@_0BA@PFGIPGBD@subgroup?5order?3?$AA@
; `string'
??_C@_0BA@PFGIPGBD@subgroup?5order?3?$AA@ db 'subgroup order:',0
					; DATA XREF: _do_dh_print+238o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16B0h
; COMDAT (pick any)
		public ??_C@_0BB@HEOELHJJ@subgroup?5factor?3?$AA@
; `string'
??_C@_0BB@HEOELHJJ@subgroup?5factor?3?$AA@ db 'subgroup factor:',0
					; DATA XREF: _do_dh_print+258o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16C4h
; COMDAT (pick any)
		public ??_C@_05PENGGDLK@seed?3?$AA@
; `string'
??_C@_05PENGGDLK@seed?3?$AA@ db	'seed:',0 ; DATA XREF: _do_dh_print+284o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16CCh
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _do_dh_print+2C0o
					; _do_dh_print+335o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 16D0h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _do_dh_print+2F3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16D4h
; COMDAT (pick any)
		public ??_C@_01JLIPDDHJ@?3?$AA@
; `string'
??_C@_01JLIPDDHJ@?3?$AA@ db 3Ah, 0	; DATA XREF: _do_dh_print+2FFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16D8h
; COMDAT (pick any)
		public ??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@
; `string'
??_C@_06LEJCPMLM@?$CF02x?$CFs?$AA@ db '%02x%s',0 ; DATA XREF: _do_dh_print+310o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16E0h
; COMDAT (pick any)
		public ??_C@_08ILALFGPI@counter?3?$AA@
; `string'
??_C@_08ILALFGPI@counter?3?$AA@	db 'counter:',0 ; DATA XREF: _do_dh_print+35Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16ECh
; COMDAT (pick any)
		public ??_C@_0CF@KKPEILHE@recommended?9private?9length?3?5?$CFd?5b@
; `string'
??_C@_0CF@KKPEILHE@recommended?9private?9length?3?5?$CFd?5b@ db	'recommended-private-length: %d bits',0Ah,0
					; DATA XREF: _do_dh_print+386o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _do_dh_print+16Ap
		extrn _CRYPTO_free:near	; CODE XREF: _dh_priv_encode+EEp
					; _dh_pub_encode+49p ...
		extrn _BUF_memdup:near	; CODE XREF: _dh_cms_encrypt+2DCp
					; _dh_cms_set_shared_info+1F7p	...
		extrn _BIO_write:near	; CODE XREF: _do_dh_print+33Bp
		extrn _BIO_puts:near	; CODE XREF: _do_dh_print+28Ap
					; _do_dh_print+2C6p
		extrn _BIO_indent:near	; CODE XREF: _do_dh_print+193p
					; _do_dh_print+27Fp ...
		extrn _BIO_printf:near	; CODE XREF: _do_dh_print+1ABp
					; _do_dh_print+316p ...
		extrn _ERR_put_error:near ; CODE XREF: _dh_priv_decode+10Cp
					; _dh_priv_encode+30p ...
		extrn _BN_num_bits:near	; CODE XREF: _dh_bits+Ap
					; _do_dh_print+52p ...
		extrn _BN_cmp:near	; CODE XREF: _dh_cmp_parameters+16p
					; _dh_cmp_parameters+2Ep ...
		extrn _BN_free:near	; CODE XREF: _int_dh_bn_cpy+28p
					; _int_dh_param_copy+44p ...
		extrn _BN_dup:near	; CODE XREF: _int_dh_bn_cpy+Ap
					; _int_dh_param_copy+25p ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _dh_cms_encrypt+250p
		extrn _ASN1_TYPE_free:near ; CODE XREF:	_dh_cms_encrypt+284p
		extrn _ASN1_TYPE_get:near ; CODE XREF: _dh_cms_encrypt+275p
		extrn _ASN1_STRING_new:near ; CODE XREF: _dh_priv_encode+15p
					; _dh_pub_encode+1Dp ...
		extrn _ASN1_STRING_free:near ; CODE XREF: _dh_priv_encode+FBp
					; _dh_pub_encode+56p
		extrn _ASN1_STRING_clear_free:near ; CODE XREF:	_dh_priv_decode+E8p
					; _dh_priv_decode+11Bp	...
		extrn _ASN1_STRING_set0:near ; CODE XREF: _dh_cms_encrypt+CCp
					; _dh_cms_encrypt+346p
		extrn _ASN1_STRING_length:near ; CODE XREF: _dh_cms_encrypt+2C2p
					; _dh_cms_set_peerkey+86p ...
		extrn _ASN1_STRING_data:near ; CODE XREF: _dh_cms_encrypt+2D3p
					; _dh_cms_set_peerkey+90p ...
		extrn _ASN1_INTEGER_free:near ;	CODE XREF: _dh_pub_decode+12Fp
					; _dh_pub_decode+14Ap ...
		extrn _d2i_ASN1_INTEGER:near ; CODE XREF: _dh_priv_decode+65p
					; _dh_pub_decode+CFp ...
		extrn _i2d_ASN1_INTEGER:near ; CODE XREF: _dh_priv_encode+ACp
					; _dh_pub_encode+A9p ...
		extrn _BN_to_ASN1_INTEGER:near ; CODE XREF: _dh_priv_encode+7Dp
					; _dh_pub_encode+95p ...
		extrn _ASN1_INTEGER_to_BN:near ; CODE XREF: _dh_priv_decode+B1p
					; _dh_pub_decode+10Ap ...
		extrn _ASN1_bn_print:near ; CODE XREF: _do_dh_print+1CBp
					; _do_dh_print+1E8p ...
		extrn _OBJ_nid2obj:near	; CODE XREF: _dh_priv_encode+CBp
					; _dh_pub_encode+D4p ...
		extrn _OBJ_nid2sn:near	; CODE XREF: _dh_cms_set_shared_info+117p
		extrn _OBJ_obj2nid:near	; CODE XREF: _dh_cms_set_peerkey+2Cp
					; _dh_cms_set_shared_info+3Ap ...
		extrn _EVP_MD_type:near	; CODE XREF: _dh_cms_encrypt+1BEp
		extrn _EVP_CIPHER_flags:near ; CODE XREF: _dh_cms_set_shared_info+132p
		extrn _EVP_CIPHER_CTX_cipher:near ; CODE XREF: _dh_cms_encrypt+1F3p
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _dh_cms_encrypt+22Ap
					; _dh_cms_set_shared_info+17Ep
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _dh_cms_set_shared_info+155p
		extrn _EVP_sha1:near	; CODE XREF: _dh_cms_encrypt+18Fp
					; _dh_cms_set_shared_info+93p
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _dh_cms_set_shared_info+11Dp
		extrn _EVP_PKEY_assign:near ; CODE XREF: _dh_priv_decode+E2p
					; _dh_param_decode+4Ep	...
		extrn _EVP_PKEY_new:near ; CODE	XREF: _dh_cms_set_peerkey:loc_DF0p
		extrn _EVP_PKEY_free:near ; CODE XREF: _dh_cms_set_peerkey+14Ep
		extrn _EVP_CIPHER_type:near ; CODE XREF: _dh_cms_encrypt+1F9p
					; _dh_cms_set_shared_info+1AAp
		extrn _EVP_CIPHER_param_to_asn1:near ; CODE XREF: _dh_cms_encrypt+262p
		extrn _EVP_CIPHER_asn1_to_param:near
					; CODE XREF: _dh_cms_set_shared_info+16Dp
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _dh_cms_encrypt+11Ap
					; _dh_cms_encrypt+143p	...
		extrn _EVP_PKEY_CTX_get0_pkey:near ; CODE XREF:	_dh_cms_encrypt+37p
					; _dh_cms_set_peerkey+55p
		extrn _EVP_PKEY_CTX_get0_peerkey:near ;	CODE XREF: _dh_cms_decrypt+20p
		extrn _EVP_PKEY_derive_set_peer:near ; CODE XREF: _dh_cms_set_peerkey+12Ep
		extrn _DH_new:near	; CODE XREF: _DHparams_dup+1p
		extrn _DH_free:near	; CODE XREF: _dh_priv_decode+115p
					; _int_dh_free+7p ...
		extrn _DH_size:near	; CODE XREF: _int_dh_size+7p
		extrn _DH_generate_key:near ; CODE XREF: _dh_priv_decode+CFp
		extrn _d2i_DHparams:near ; CODE	XREF: _dh_priv_decode:loc_A0p
					; _dh_param_decode:loc_25Fp ...
		extrn _i2d_DHparams:near ; CODE	XREF: _dh_priv_encode:loc_185p
					; _dh_param_encode+1Dj	...
		extrn _d2i_DHxparams:near ; CODE XREF: _dh_priv_decode+99p
					; _dh_param_decode+18p	...
		extrn _i2d_DHxparams:near ; CODE XREF: _dh_priv_encode+52p
					; _dh_param_encode+14j	...
		extrn _X509_ALGOR_set0:near ; CODE XREF: _dh_cms_encrypt+FEp
					; _dh_cms_encrypt+36Bp
		extrn _X509_ALGOR_get0:near ; CODE XREF: _dh_priv_decode+47p
					; _dh_pub_decode+42p ...
		extrn _X509_ALGOR_new:near ; CODE XREF:	_dh_cms_encrypt+236p
		extrn _X509_ALGOR_free:near ; CODE XREF: _dh_cms_encrypt+392p
					; _dh_cms_set_shared_info+22Fp
		extrn _d2i_X509_ALGOR:near ; CODE XREF:	_dh_cms_set_shared_info+E4p
		extrn _i2d_X509_ALGOR:near ; CODE XREF:	_dh_cms_encrypt+31Fp
		extrn _PKCS8_pkey_set0:near ; CODE XREF: _dh_priv_encode+D8p
		extrn _PKCS8_pkey_get0:near ; CODE XREF: _dh_priv_decode+24p
		extrn _X509_PUBKEY_set0_param:near ; CODE XREF:	_dh_pub_encode+E1p
		extrn _X509_PUBKEY_get0_param:near ; CODE XREF:	_dh_pub_decode+1Fp
		extrn _CMS_RecipientInfo_get0_pkey_ctx:near ; CODE XREF: _dh_cms_decrypt+11p
					; _dh_cms_encrypt+20p
		extrn _CMS_RecipientInfo_kari_get0_alg:near
					; CODE XREF: _dh_cms_encrypt+1DAp
					; _dh_cms_set_shared_info+24p
		extrn _CMS_RecipientInfo_kari_get0_orig_id:near
					; CODE XREF: _dh_cms_decrypt+3Ap
					; _dh_cms_encrypt+4Fp
		extrn _CMS_RecipientInfo_kari_get0_ctx:near
					; CODE XREF: _dh_cms_encrypt+1EBp
					; _dh_cms_set_shared_info+F9p
		extrn __chkstk:near	; CODE XREF: _dh_priv_decode+5p
					; _dh_priv_encode+5p ...


		end
