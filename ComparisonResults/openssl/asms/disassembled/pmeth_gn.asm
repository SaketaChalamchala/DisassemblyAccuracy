;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D0937D1654483BB328E2BD94EB9C14DD
; Input	CRC32 :	21CF62D1

; File Name   :	C:\compspace\Diff\openssl\obj\pmeth_gn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_CTX_get_cb
_EVP_PKEY_CTX_get_cb proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+1Ch]
		retn
_EVP_PKEY_CTX_get_cb endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_CTX_get_keygen_info
_EVP_PKEY_CTX_get_keygen_info proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_19
		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		retn
; ---------------------------------------------------------------------------

loc_19:					; CODE XREF: _EVP_PKEY_CTX_get_keygen_info+7j
		test	ecx, ecx
		js	short loc_2D
		mov	eax, [esp+arg_0]
		cmp	ecx, [eax+24h]
		jg	short loc_2D
		mov	eax, [eax+20h]
		mov	eax, [eax+ecx*4]
		retn
; ---------------------------------------------------------------------------

loc_2D:					; CODE XREF: _EVP_PKEY_CTX_get_keygen_info+13j
					; _EVP_PKEY_CTX_get_keygen_info+1Cj
		xor	eax, eax
		retn
_EVP_PKEY_CTX_get_keygen_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_CTX_set_cb
_EVP_PKEY_CTX_set_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+1Ch], ecx
		retn
_EVP_PKEY_CTX_set_cb endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_keygen
_EVP_PKEY_keygen proc near		; CODE XREF: _EVP_PKEY_new_mac_key+5Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_BD
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_BD
		cmp	dword ptr [eax+20h], 0
		jz	short loc_BD
		cmp	dword ptr [edi+10h], 4
		jz	short loc_7A
		push	91h ; 'ë'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	97h ; 'ó'
		push	92h ; 'í'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_7A:					; CODE XREF: _EVP_PKEY_keygen+19j
		push	esi
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jnz	short loc_89
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_89:					; CODE XREF: _EVP_PKEY_keygen+45j
		cmp	dword ptr [esi], 0
		jnz	short loc_95
		call	_EVP_PKEY_new
		mov	[esi], eax

loc_95:					; CODE XREF: _EVP_PKEY_keygen+50j
		mov	eax, [edi]
		push	dword ptr [esi]
		push	edi
		mov	eax, [eax+20h]
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jg	short loc_B8
		push	dword ptr [esi]
		call	_EVP_PKEY_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_B8:					; CODE XREF: _EVP_PKEY_keygen+6Aj
		pop	esi
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_BD:					; CODE XREF: _EVP_PKEY_keygen+7j
					; _EVP_PKEY_keygen+Dj ...
		push	8Dh ; 'ç'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	96h ; 'ñ'
		push	92h ; 'í'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	edi
		retn
_EVP_PKEY_keygen endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_keygen_init
_EVP_PKEY_keygen_init proc near		; CODE XREF: _EVP_PKEY_new_mac_key+2Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_121
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_121
		cmp	dword ptr [eax+20h], 0
		jz	short loc_121
		mov	dword ptr [esi+10h], 4
		mov	eax, [eax+1Ch]
		test	eax, eax
		jnz	short loc_10E
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10E:				; CODE XREF: _EVP_PKEY_keygen_init+21j
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		jg	short loc_141
		mov	dword ptr [esi+10h], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_121:				; CODE XREF: _EVP_PKEY_keygen_init+7j
					; _EVP_PKEY_keygen_init+Dj ...
		push	7Bh ; '{'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	96h ; 'ñ'
		push	93h ; 'ì'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh

loc_141:				; CODE XREF: _EVP_PKEY_keygen_init+32j
		pop	esi
		retn
_EVP_PKEY_keygen_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 144h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_new_mac_key
_EVP_PKEY_new_mac_key proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		xor	edi, edi
		push	[esp+10h+arg_0]
		mov	[esp+14h+var_4], edi
		call	_EVP_PKEY_CTX_new_id
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_170
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_170:				; CODE XREF: _EVP_PKEY_new_mac_key+26j
		push	esi
		call	_EVP_PKEY_keygen_init
		add	esp, 4
		test	eax, eax
		jle	short $merr$9
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_C]
		push	6
		push	4
		push	0FFFFFFFFh
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short $merr$9
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	esi
		call	_EVP_PKEY_keygen
		mov	edi, [esp+14h+var_4]
		add	esp, 8

$merr$9:				; CODE XREF: _EVP_PKEY_new_mac_key+37j
					; _EVP_PKEY_new_mac_key+52j
		push	esi
		call	_EVP_PKEY_CTX_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn
_EVP_PKEY_new_mac_key endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_paramgen
_EVP_PKEY_paramgen proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	loc_262
		mov	eax, [edi]
		test	eax, eax
		jz	loc_262
		cmp	dword ptr [eax+18h], 0
		jz	loc_262
		cmp	dword ptr [edi+10h], 2
		jz	short loc_203
		push	5Fh ; '_'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	97h ; 'ó'
		push	94h ; 'î'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_203:				; CODE XREF: _EVP_PKEY_paramgen+25j
		push	esi
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_234
		cmp	dword ptr [esi], 0
		jnz	short loc_23A
		call	_EVP_PKEY_new
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_23A
		push	6Ah ; 'j'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	41h ; 'A'
		push	94h ; 'î'
		push	6
		call	_ERR_put_error
		add	esp, 14h

loc_234:				; CODE XREF: _EVP_PKEY_paramgen+4Ej
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_23A:				; CODE XREF: _EVP_PKEY_paramgen+53j
					; _EVP_PKEY_paramgen+5Ej
		mov	eax, [edi]
		push	dword ptr [esi]
		push	edi
		mov	eax, [eax+18h]
		call	eax
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jg	short loc_25D
		push	dword ptr [esi]
		call	_EVP_PKEY_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_25D:				; CODE XREF: _EVP_PKEY_paramgen+8Fj
		pop	esi
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_262:				; CODE XREF: _EVP_PKEY_paramgen+7j
					; _EVP_PKEY_paramgen+11j ...
		push	5Ah ; 'Z'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	96h ; 'ñ'
		push	94h ; 'î'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	edi
		retn
_EVP_PKEY_paramgen endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 284h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PKEY_paramgen_init
_EVP_PKEY_paramgen_init	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_2C1
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_2C1
		cmp	dword ptr [eax+18h], 0
		jz	short loc_2C1
		mov	dword ptr [esi+10h], 2
		mov	eax, [eax+14h]
		test	eax, eax
		jnz	short loc_2AE
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2AE:				; CODE XREF: _EVP_PKEY_paramgen_init+21j
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		jg	short loc_2E1
		mov	dword ptr [esi+10h], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2C1:				; CODE XREF: _EVP_PKEY_paramgen_init+7j
					; _EVP_PKEY_paramgen_init+Dj ...
		push	49h ; 'I'
		push	offset ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ ; ".\\crypto\\evp\\pmeth_gn.c"
		push	96h ; 'ñ'
		push	95h ; 'ï'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh

loc_2E1:				; CODE XREF: _EVP_PKEY_paramgen_init+32j
		pop	esi
		retn
_EVP_PKEY_paramgen_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _evp_pkey_set_cb_translate
_evp_pkey_set_cb_translate proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	dword ptr [ecx], 2
		mov	[ecx+4], eax
		mov	dword ptr [ecx+8], offset _trans_cb
		retn
_evp_pkey_set_cb_translate endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 300h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_trans_cb	proc near		; DATA XREF: _evp_pkey_set_cb_translate+11o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [eax+4]
		mov	eax, [esp+arg_0]
		push	edx
		mov	ecx, [edx+20h]
		mov	[ecx], eax
		mov	ecx, [edx+20h]
		mov	eax, [esp+4+arg_4]
		mov	[ecx+4], eax
		mov	eax, [edx+1Ch]
		call	eax
		add	esp, 4
		retn
_trans_cb	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 324h
; COMDAT (pick any)
		public ??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@
; `string'
??_C@_0BI@OJGELKNO@?4?2crypto?2evp?2pmeth_gn?4c?$AA@ db	'.\crypto\evp\pmeth_gn.c',0
					; DATA XREF: _EVP_PKEY_keygen+20o
					; _EVP_PKEY_keygen+86o	...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _EVP_PKEY_keygen+31p
					; _EVP_PKEY_keygen+97p	...
		extrn _EVP_PKEY_new:near ; CODE	XREF: _EVP_PKEY_keygen+52p
					; _EVP_PKEY_paramgen+55p
		extrn _EVP_PKEY_free:near ; CODE XREF: _EVP_PKEY_keygen+6Ep
					; _EVP_PKEY_paramgen+93p
		extrn _EVP_PKEY_CTX_new_id:near	; CODE XREF: _EVP_PKEY_new_mac_key+1Ap
		extrn _EVP_PKEY_CTX_free:near ;	CODE XREF: _EVP_PKEY_new_mac_key+67p
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _EVP_PKEY_new_mac_key+48p
		extrn __chkstk:near	; CODE XREF: _EVP_PKEY_new_mac_key+5p


		end
