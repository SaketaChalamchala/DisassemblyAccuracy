;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	00B31D8773ADE45DF6731D3C6453879C
; Input	CRC32 :	8249EE84

; File Name   :	C:\compspace\Diff\openssl\obj\p12_crt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_add_cert
_PKCS12_add_cert proc near		; CODE XREF: _PKCS12_create+13Bp
					; _PKCS12_create+1A0p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		push	edi
		mov	[esp+14h+var_8], 0FFFFFFFFh
		mov	[esp+14h+var_4], 0FFFFFFFFh
		call	_PKCS12_x5092certbag
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_91
		lea	eax, [esp+10h+var_8]
		push	eax
		push	edi
		call	_X509_alias_get0
		add	esp, 8
		test	eax, eax
		jz	short loc_53
		push	[esp+10h+var_8]
		push	eax
		push	esi
		call	_PKCS12_add_friendlyname_asc
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$9

loc_53:					; CODE XREF: _PKCS12_add_cert+3Fj
		lea	eax, [esp+10h+var_4]
		push	eax
		push	edi
		call	_X509_keyid_get0
		add	esp, 8
		test	eax, eax
		jz	short loc_77
		push	[esp+10h+var_4]
		push	eax
		push	esi
		call	_PKCS12_add_localkeyid
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$9

loc_77:					; CODE XREF: _PKCS12_add_cert+63j
		push	esi
		push	[esp+14h+arg_0]
		call	_pkcs12_add_bag
		add	esp, 8
		test	eax, eax
		jnz	short loc_99

$err$9:					; CODE XREF: _PKCS12_add_cert+51j
					; _PKCS12_add_cert+75j
		push	esi
		call	_PKCS12_SAFEBAG_free
		add	esp, 4

loc_91:					; CODE XREF: _PKCS12_add_cert+2Dj
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_99:					; CODE XREF: _PKCS12_add_cert+86j
		pop	edi
		mov	eax, esi
		pop	esi
		add	esp, 8
		retn
_PKCS12_add_cert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_add_key
_PKCS12_add_key	proc near		; CODE XREF: _PKCS12_create+224p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		push	edi
		push	[esp+8+arg_4]
		call	_EVP_PKEY2PKCS8
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_121
		mov	eax, [esp+8+arg_8]
		test	eax, eax
		jz	short loc_CE
		push	eax
		push	edi
		call	_PKCS8_add_keyusage
		add	esp, 8
		test	eax, eax
		jz	short loc_121

loc_CE:					; CODE XREF: _PKCS12_add_key+1Aj
		mov	eax, [esp+8+arg_10]
		push	edi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_F9
		push	[esp+0Ch+arg_C]
		push	0
		push	0
		push	0FFFFFFFFh
		push	[esp+1Ch+arg_14]
		push	eax
		call	_PKCS12_MAKE_SHKEYBAG
		push	edi
		mov	esi, eax
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 20h
		jmp	short loc_103
; ---------------------------------------------------------------------------

loc_F9:					; CODE XREF: _PKCS12_add_key+32j
		call	_PKCS12_MAKE_KEYBAG
		add	esp, 4
		mov	esi, eax

loc_103:				; CODE XREF: _PKCS12_add_key+53j
		test	esi, esi
		jz	short loc_121
		push	esi
		push	[esp+0Ch+arg_0]
		call	_pkcs12_add_bag
		add	esp, 8
		test	eax, eax
		jnz	short loc_126

$err$11:
		push	esi
		call	_PKCS12_SAFEBAG_free
		add	esp, 4

loc_121:				; CODE XREF: _PKCS12_add_key+12j
					; _PKCS12_add_key+28j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_126:				; CODE XREF: _PKCS12_add_key+72j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_PKCS12_add_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_add_safe
_PKCS12_add_safe proc near		; CODE XREF: _PKCS12_create+1DCp
					; _PKCS12_create+314p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		cmp	dword ptr [esi], 0
		jnz	short loc_14C
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_145
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_145:				; CODE XREF: _PKCS12_add_safe+14j
		mov	ebx, 1
		jmp	short loc_14E
; ---------------------------------------------------------------------------

loc_14C:				; CODE XREF: _PKCS12_add_safe+9j
		xor	ebx, ebx

loc_14E:				; CODE XREF: _PKCS12_add_safe+1Ej
		mov	eax, [esp+8+arg_8]
		push	edi
		test	eax, eax
		jnz	short loc_195
		mov	eax, 95h ; '•'

loc_15C:				; CODE XREF: _PKCS12_add_safe+6Cj
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_C]
		push	0
		push	0
		push	0FFFFFFFFh
		push	[esp+20h+arg_10]
		push	eax
		call	_PKCS12_pack_p7encdata
		add	esp, 1Ch

loc_177:				; CODE XREF: _PKCS12_add_safe+7Aj
		mov	edi, eax
		test	edi, edi
		jz	short $err$16
		push	edi
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$16
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_195:				; CODE XREF: _PKCS12_add_safe+29j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_15C
		push	[esp+0Ch+arg_4]
		call	_PKCS12_pack_p7data
		add	esp, 4
		jmp	short loc_177
; ---------------------------------------------------------------------------

$err$16:				; CODE XREF: _PKCS12_add_safe+4Fj
					; _PKCS12_add_safe+5Ej
		test	ebx, ebx
		jz	short loc_1BC
		push	dword ptr [esi]
		call	_sk_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_1BC:				; CODE XREF: _PKCS12_add_safe+7Ej
		test	edi, edi
		jz	short loc_1C9
		push	edi
		call	_PKCS7_free
		add	esp, 4

loc_1C9:				; CODE XREF: _PKCS12_add_safe+92j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_PKCS12_add_safe endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_add_safes
_PKCS12_add_safes proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, 15h
		test	eax, eax
		push	esi
		cmovle	eax, ecx
		push	eax
		call	_PKCS12_init
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_208
		push	[esp+4+arg_0]
		push	esi
		call	_PKCS12_pack_authsafes
		add	esp, 8
		test	eax, eax
		jnz	short loc_20C
		push	esi
		call	_PKCS12_free
		add	esp, 4

loc_208:				; CODE XREF: _PKCS12_add_safes+1Cj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: _PKCS12_add_safes+2Dj
		mov	eax, esi
		pop	esi
		retn
_PKCS12_add_safes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_create
_PKCS12_create	proc near

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		mov	eax, 68h ; 'h'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+68h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edx, [esp+78h+arg_24]
		mov	ecx, [esp+78h+arg_14]
		mov	eax, [esp+78h+arg_0]
		mov	[esp+78h+var_48], edx
		xor	ebx, ebx
		mov	edx, [esp+78h+arg_18]
		mov	ebp, [esp+78h+arg_10]
		xor	esi, esi
		mov	[esp+78h+var_5C], ecx
		mov	ecx, [esp+78h+arg_1C]
		test	edx, edx
		mov	[esp+78h+var_60], 95h ;	'•'
		cmovz	edx, [esp+78h+var_60]
		mov	[esp+78h+arg_18], edx
		mov	edx, [esp+78h+var_5C]
		test	edx, edx
		mov	[esp+78h+var_60], 92h ;	'’'
		cmovz	edx, [esp+78h+var_60]
		test	ecx, ecx
		mov	[esp+78h+var_5C], edx
		mov	edx, 800h
		cmovz	ecx, edx
		mov	[esp+78h+var_54], eax
		mov	eax, [esp+78h+arg_4]
		mov	edx, 1
		mov	[esp+78h+var_60], ecx
		mov	ecx, [esp+78h+arg_20]
		test	ecx, ecx
		mov	[esp+78h+var_50], eax
		mov	eax, [esp+78h+arg_8]
		cmovz	ecx, edx
		mov	[esp+78h+var_4C], eax
		mov	[esp+78h+var_64], ebx
		mov	[esp+78h+var_68], esi
		mov	[esp+78h+var_58], ebx
		mov	[esp+78h+arg_20], ecx
		mov	edi, [esp+78h+arg_C]
		test	eax, eax
		jnz	short loc_316
		test	edi, edi
		jnz	short loc_345
		test	ebp, ebp
		jnz	loc_394
		push	71h ; 'q'
		push	offset ??_C@_0BK@HMGJJHDH@?4?2crypto?2pkcs12?2p12_crt?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_crt.c"
		push	68h ; 'h'
		push	69h ; 'i'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+68h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
; ---------------------------------------------------------------------------

loc_316:				; CODE XREF: _PKCS12_create+CEj
		test	edi, edi
		jz	short loc_394
		push	eax
		push	edi
		call	_X509_check_private_key
		add	esp, 8
		test	eax, eax
		jz	loc_4C2
		lea	eax, [esp+78h+var_58]
		push	eax
		lea	eax, [esp+7Ch+var_44]
		push	eax
		call	_EVP_sha1
		push	eax
		push	edi
		call	_X509_digest
		add	esp, 10h

loc_345:				; CODE XREF: _PKCS12_create+D2j
		lea	eax, [esp+78h+var_68]
		push	edi
		push	eax
		call	_PKCS12_add_cert
		mov	esi, eax
		add	esp, 8
		mov	eax, [esp+78h+var_50]
		test	eax, eax
		jz	short loc_371
		push	0FFFFFFFFh
		push	eax
		push	esi
		call	_PKCS12_add_friendlyname_asc
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4D7

loc_371:				; CODE XREF: _PKCS12_create+14Bj
		mov	eax, [esp+78h+var_58]
		test	eax, eax
		jz	short loc_390
		push	eax
		lea	eax, [esp+7Ch+var_44]
		push	eax
		push	esi
		call	_PKCS12_add_localkeyid
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4D7

loc_390:				; CODE XREF: _PKCS12_create+167j
		mov	esi, [esp+78h+var_68]

loc_394:				; CODE XREF: _PKCS12_create+D6j
					; _PKCS12_create+108j
		push	ebp
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_3D2

loc_3A3:				; CODE XREF: _PKCS12_create+1BCj
		push	edi
		push	ebp
		call	_sk_value
		push	eax
		lea	eax, [esp+84h+var_68]
		push	eax
		call	_PKCS12_add_cert
		add	esp, 10h
		test	eax, eax
		jz	loc_4D7
		push	ebp
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_3A3
		mov	esi, [esp+78h+var_68]

loc_3D2:				; CODE XREF: _PKCS12_create+191j
		mov	edi, [esp+78h+var_54]
		test	esi, esi
		jz	short loc_400
		push	edi
		push	[esp+7Ch+var_60]
		lea	eax, [esp+80h+var_64]
		push	[esp+80h+arg_18]
		push	esi
		push	eax
		call	_PKCS12_add_safe
		mov	ebx, [esp+8Ch+var_64]
		add	esp, 14h
		test	eax, eax
		jz	loc_49E

loc_400:				; CODE XREF: _PKCS12_create+1C8j
		push	offset _PKCS12_SAFEBAG_free
		push	esi
		call	_sk_pop_free
		mov	ebp, [esp+80h+var_4C]
		xor	esi, esi
		add	esp, 8
		mov	[esp+78h+var_68], esi
		test	ebp, ebp
		jz	loc_538
		mov	ecx, [esp+78h+var_5C]
		lea	eax, [esp+78h+var_68]
		push	edi
		push	ecx
		push	[esp+80h+var_60]
		push	[esp+84h+var_48]
		push	ebp
		push	eax
		call	_PKCS12_add_key
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jz	short loc_49A
		push	0FFFFFFFFh
		push	1A1h
		push	ebp
		call	_EVP_PKEY_get_attr_by_NID
		add	esp, 0Ch
		test	eax, eax
		js	short loc_46E
		push	eax
		push	ebp
		call	_EVP_PKEY_get_attr
		push	eax
		lea	eax, [esi+8]
		push	eax
		call	_X509at_add1_attr
		add	esp, 10h
		test	eax, eax
		jz	short loc_49A

loc_46E:				; CODE XREF: _PKCS12_create+244j
		push	0FFFFFFFFh
		push	358h
		push	ebp
		call	_EVP_PKEY_get_attr_by_NID
		add	esp, 0Ch
		test	eax, eax
		js	short loc_4DD
		push	eax
		push	ebp
		call	_EVP_PKEY_get_attr
		push	eax
		lea	eax, [esi+8]
		push	eax
		call	_X509at_add1_attr
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4DD

loc_49A:				; CODE XREF: _PKCS12_create+230j
					; _PKCS12_create+25Cj ...
		mov	esi, [esp+78h+var_68]

loc_49E:				; CODE XREF: _PKCS12_create+1EAj
					; _PKCS12_create+322j ...
		test	ebx, ebx
		jz	short loc_4B0
		push	offset _PKCS7_free
		push	ebx
		call	_sk_pop_free
		add	esp, 8

loc_4B0:				; CODE XREF: _PKCS12_create+290j
					; _PKCS12_create+2CBj
		test	esi, esi
		jz	short loc_4C2
		push	offset _PKCS12_SAFEBAG_free
		push	esi
		call	_sk_pop_free
		add	esp, 8

loc_4C2:				; CODE XREF: _PKCS12_create+116j
					; _PKCS12_create+2A2j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+68h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
; ---------------------------------------------------------------------------

loc_4D7:				; CODE XREF: _PKCS12_create+15Bj
					; _PKCS12_create+17Aj ...
		mov	esi, [esp+78h+var_68]
		jmp	short loc_4B0
; ---------------------------------------------------------------------------

loc_4DD:				; CODE XREF: _PKCS12_create+270j
					; _PKCS12_create+288j
		mov	eax, [esp+78h+var_50]
		test	eax, eax
		jz	short loc_4F5
		push	0FFFFFFFFh
		push	eax
		push	esi
		call	_PKCS12_add_friendlyname_asc
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_49A

loc_4F5:				; CODE XREF: _PKCS12_create+2D3j
		mov	eax, [esp+78h+var_58]
		test	eax, eax
		jz	short loc_510
		push	eax
		lea	eax, [esp+7Ch+var_44]
		push	eax
		push	esi
		call	_PKCS12_add_localkeyid
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_49A

loc_510:				; CODE XREF: _PKCS12_create+2EBj
		mov	esi, [esp+78h+var_68]
		test	esi, esi
		jz	short loc_538
		push	0
		push	0
		push	0FFFFFFFFh
		lea	eax, [esp+84h+var_64]
		push	esi
		push	eax
		call	_PKCS12_add_safe
		mov	ebx, [esp+8Ch+var_64]
		add	esp, 14h
		test	eax, eax
		jz	loc_49E

loc_538:				; CODE XREF: _PKCS12_create+20Aj
					; _PKCS12_create+306j
		push	offset _PKCS12_SAFEBAG_free
		push	esi
		call	_sk_pop_free
		push	15h
		xor	esi, esi
		call	_PKCS12_init
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_49E
		push	ebx
		push	edi
		call	_PKCS12_pack_authsafes
		add	esp, 8
		test	eax, eax
		jnz	short loc_575
		push	edi
		call	_PKCS12_free
		add	esp, 4
		jmp	loc_49E
; ---------------------------------------------------------------------------

loc_575:				; CODE XREF: _PKCS12_create+355j
		push	offset _PKCS7_free
		push	ebx
		call	_sk_pop_free
		mov	eax, [esp+80h+arg_20]
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_5C7
		push	0
		push	eax
		push	0
		push	0
		push	0FFFFFFFFh
		push	[esp+8Ch+var_54]
		push	edi
		call	_PKCS12_set_mac
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_5C7

$err$60:
		push	edi
		call	_PKCS12_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+68h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
; ---------------------------------------------------------------------------

loc_5C7:				; CODE XREF: _PKCS12_create+37Dj
					; _PKCS12_create+397j
		mov	ecx, [esp+78h+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
_PKCS12_create	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_copy_bag_attr	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0FFFFFFFFh
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		call	_EVP_PKEY_get_attr_by_NID
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_5F8
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_5F8:				; CODE XREF: _copy_bag_attr+14j
		push	eax
		push	[esp+4+arg_4]
		call	_EVP_PKEY_get_attr
		push	eax
		mov	eax, [esp+0Ch+arg_0]
		add	eax, 8
		push	eax
		call	_X509at_add1_attr
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_copy_bag_attr	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 61Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkcs12_add_bag	proc near		; CODE XREF: _PKCS12_add_cert+7Cp
					; _PKCS12_add_key+68p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_62A
		lea	eax, [esi+1]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_62A:				; CODE XREF: _pkcs12_add_bag+7j
		cmp	dword ptr [esi], 0
		push	edi
		jnz	short loc_642
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jz	short loc_66A
		mov	edi, 1
		jmp	short loc_644
; ---------------------------------------------------------------------------

loc_642:				; CODE XREF: _pkcs12_add_bag+12j
		xor	edi, edi

loc_644:				; CODE XREF: _pkcs12_add_bag+24j
		push	[esp+8+arg_4]
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short loc_66F
		test	edi, edi
		jz	short loc_66A
		push	dword ptr [esi]
		call	_sk_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_66A:				; CODE XREF: _pkcs12_add_bag+1Dj
					; _pkcs12_add_bag+3Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_66F:				; CODE XREF: _pkcs12_add_bag+38j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_pkcs12_add_bag	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 678h
; COMDAT (pick any)
		public ??_C@_0BK@HMGJJHDH@?4?2crypto?2pkcs12?2p12_crt?4c?$AA@
; `string'
??_C@_0BK@HMGJJHDH@?4?2crypto?2pkcs12?2p12_crt?4c?$AA@ db '.\crypto\pkcs12\p12_crt.c',0
					; DATA XREF: _PKCS12_create+DEo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _PKCS12_create+187p
					; _PKCS12_create+1B2p
		extrn _sk_value:near	; CODE XREF: _PKCS12_create+195p
		extrn _sk_new_null:near	; CODE XREF: _PKCS12_add_safe+Bp
					; _pkcs12_add_bag+14p
		extrn _sk_free:near	; CODE XREF: _PKCS12_add_safe+82p
					; _pkcs12_add_bag+40p
		extrn _sk_pop_free:near	; CODE XREF: _PKCS12_create+1F6p
					; _PKCS12_create+298p ...
		extrn _sk_push:near	; CODE XREF: _PKCS12_add_safe+54p
					; _pkcs12_add_bag+2Ep
		extrn _ERR_put_error:near ; CODE XREF: _PKCS12_create+E9p
		extrn _EVP_sha1:near	; CODE XREF: _PKCS12_create+126p
		extrn _PKCS7_free:near	; CODE XREF: _PKCS12_add_safe+95p
					; DATA XREF: _PKCS12_create+292o ...
		extrn _X509_digest:near	; CODE XREF: _PKCS12_create+12Dp
		extrn _X509_alias_get0:near ; CODE XREF: _PKCS12_add_cert+35p
		extrn _X509_keyid_get0:near ; CODE XREF: _PKCS12_add_cert+59p
		extrn _X509_check_private_key:near ; CODE XREF:	_PKCS12_create+10Cp
		extrn _X509at_add1_attr:near ; CODE XREF: _PKCS12_create+252p
					; _PKCS12_create+27Ep ...
		extrn _EVP_PKEY_get_attr_by_NID:near ; CODE XREF: _PKCS12_create+23Ap
					; _PKCS12_create+266p ...
		extrn _EVP_PKEY_get_attr:near ;	CODE XREF: _PKCS12_create+248p
					; _PKCS12_create+274p ...
		extrn _PKCS8_PRIV_KEY_INFO_free:near ; CODE XREF: _PKCS12_add_key+4Bp
		extrn _EVP_PKEY2PKCS8:near ; CODE XREF:	_PKCS12_add_key+6p
		extrn _PKCS12_x5092certbag:near	; CODE XREF: _PKCS12_add_cert+21p
		extrn _PKCS12_MAKE_KEYBAG:near ; CODE XREF: _PKCS12_add_key:loc_F9p
		extrn _PKCS12_MAKE_SHKEYBAG:near ; CODE	XREF: _PKCS12_add_key+43p
		extrn _PKCS12_pack_p7data:near ; CODE XREF: _PKCS12_add_safe+72p
		extrn _PKCS12_pack_p7encdata:near ; CODE XREF: _PKCS12_add_safe+43p
		extrn _PKCS12_pack_authsafes:near ; CODE XREF: _PKCS12_add_safes+23p
					; _PKCS12_create+34Bp
		extrn _PKCS12_add_localkeyid:near ; CODE XREF: _PKCS12_add_cert+6Bp
					; _PKCS12_create+170p ...
		extrn _PKCS12_add_friendlyname_asc:near	; CODE XREF: _PKCS12_add_cert+47p
					; _PKCS12_create+151p ...
		extrn _PKCS8_add_keyusage:near ; CODE XREF: _PKCS12_add_key+1Ep
		extrn _PKCS12_init:near	; CODE XREF: _PKCS12_add_safes+10p
					; _PKCS12_create+337p
		extrn _PKCS12_set_mac:near ; CODE XREF:	_PKCS12_create+38Dp
		extrn _PKCS12_free:near	; CODE XREF: _PKCS12_add_safes+30p
					; _PKCS12_create+358p ...
		extrn _PKCS12_SAFEBAG_free:near	; CODE XREF: _PKCS12_add_cert+89p
					; _PKCS12_add_key+75p
					; DATA XREF: ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _PKCS12_create+FDp
					; _PKCS12_create+2BEp ...
		extrn __chkstk:near	; CODE XREF: _PKCS12_add_cert+5p
					; _PKCS12_create+5p
		extrn ___security_cookie:near ;	DATA XREF: _PKCS12_create+Ar


		end
