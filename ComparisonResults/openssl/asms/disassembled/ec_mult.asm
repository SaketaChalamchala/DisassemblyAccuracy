;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3448E6EDE42968F13C1F3DCCCCDED4D7
; Input	CRC32 :	EFC7F940

; File Name   :	C:\compspace\Diff\openssl\obj\ec_mult.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_compute_wNAF	proc near		; CODE XREF: _ec_wNAF_mul+344p
					; _ec_wNAF_mul+3E3p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 14h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		push	ebp
		xor	ebp, ebp
		push	esi
		push	edi
		lea	edx, [ebp+1]
		cmp	[ebx+4], ebp
		jnz	short loc_5E
		push	0C3h ; '√'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	edx
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_46
		push	0C5h ; '≈'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		jmp	loc_1BA
; ---------------------------------------------------------------------------

loc_46:					; CODE XREF: _compute_wNAF+33j
		mov	eax, [esp+24h+arg_8]
		pop	edi
		mov	byte ptr [ebp+0], 0
		pop	esi
		mov	dword ptr [eax], 1
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_5E:					; CODE XREF: _compute_wNAF+1Aj
		mov	ecx, [esp+24h+arg_4]
		lea	eax, [ecx-1]
		cmp	eax, 6
		ja	loc_1AE
		mov	esi, edx
		or	eax, 0FFFFFFFFh
		shl	esi, cl
		lea	edi, ds:0FFFFFFFFh[esi*2]
		cmp	[ebx+0Ch], ebp
		mov	[esp+24h+var_10], edi
		cmovnz	edx, eax
		mov	[esp+24h+var_C], edx
		cmp	[ebx], ebp
		jz	loc_1A7
		push	ebx
		call	_BN_num_bits
		push	0E0h ; '‡'
		mov	[esp+2Ch+var_14], eax
		inc	eax
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	eax
		mov	[esp+34h+var_4], eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jnz	short loc_CB
		push	0E5h ; 'Â'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		jmp	loc_1BA
; ---------------------------------------------------------------------------

loc_CB:					; CODE XREF: _compute_wNAF+B8j
		mov	eax, [ebx]
		mov	edx, [esp+24h+arg_4]
		mov	ebx, [eax]
		mov	eax, ebp
		and	ebx, edi
		xor	edi, edi
		sub	eax, edx
		mov	[esp+24h+var_8], eax
		nop

loc_E0:					; CODE XREF: _compute_wNAF+170j
		test	ebx, ebx
		jnz	short loc_F3
		lea	eax, [edx+1]
		add	eax, edi
		cmp	eax, [esp+24h+var_14]
		jnb	loc_175

loc_F3:					; CODE XREF: _compute_wNAF+E2j
		xor	eax, eax
		test	bl, 1
		jz	short loc_137
		mov	eax, ebx
		test	esi, ebx
		jz	short loc_118
		lea	ecx, [esi+esi]
		sub	eax, ecx
		lea	ecx, [edx+1]
		add	ecx, edi
		cmp	ecx, [esp+24h+var_14]
		jb	short loc_118
		mov	eax, [esp+24h+var_10]
		sar	eax, 1
		and	eax, ebx

loc_118:				; CODE XREF: _compute_wNAF+FEj
					; _compute_wNAF+10Ej
		mov	ecx, esi
		neg	ecx
		cmp	eax, ecx
		jle	short loc_199
		cmp	eax, esi
		jge	short loc_199
		test	al, 1
		jz	short loc_199
		sub	ebx, eax
		jz	short loc_137
		lea	ecx, [esi+esi]
		cmp	ebx, ecx
		jz	short loc_137
		cmp	ebx, esi
		jnz	short loc_192

loc_137:				; CODE XREF: _compute_wNAF+F8j
					; _compute_wNAF+12Aj ...
		mov	ecx, [esp+24h+var_C]
		movsx	eax, al
		movsx	ecx, cl
		imul	ecx, eax
		mov	eax, [esp+24h+var_8]
		add	eax, edi
		inc	edi
		mov	[eax+edx], cl
		lea	eax, [edi+edx]
		push	eax
		push	[esp+28h+arg_0]
		call	_BN_is_bit_set
		imul	eax, esi
		add	esp, 8
		sar	ebx, 1
		add	ebx, eax
		lea	eax, [esi+esi]
		cmp	ebx, eax
		jg	short loc_1A0
		mov	edx, [esp+24h+arg_4]
		jmp	loc_E0
; ---------------------------------------------------------------------------

loc_175:				; CODE XREF: _compute_wNAF+EDj
		cmp	edi, [esp+24h+var_4]
		jbe	short loc_182
		push	125h
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_182:				; CODE XREF: _compute_wNAF+179j
		mov	eax, [esp+24h+arg_8]
		mov	[eax], edi
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_192:				; CODE XREF: _compute_wNAF+135j
		push	114h
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_199:				; CODE XREF: _compute_wNAF+11Ej
					; _compute_wNAF+122j ...
		push	108h
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_1A0:				; CODE XREF: _compute_wNAF+16Aj
		push	11Fh
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_1A7:				; CODE XREF: _compute_wNAF+8Cj
		push	0DBh ; '€'
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_1AE:				; CODE XREF: _compute_wNAF+68j
		push	0CFh ; 'œ'

loc_1B3:				; CODE XREF: _compute_wNAF+180j
					; _compute_wNAF+197j ...
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	44h ; 'D'

loc_1BA:				; CODE XREF: _compute_wNAF+41j
					; _compute_wNAF+C6j
		push	8Fh ; 'è'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		push	ebp
		call	_CRYPTO_free
		add	esp, 4
		xor	ebp, ebp
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
_compute_wNAF	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_pre_comp_clear_free	proc near	; DATA XREF: _ec_wNAF_have_precompute_mult+4o
					; _ec_wNAF_mul:loc_49Fo ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_24D
		push	9Fh ; 'ü'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	24h ; '$'
		lea	eax, [edi+18h]
		push	0FFFFFFFFh
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		test	eax, eax
		jg	short loc_24D
		push	esi
		mov	esi, [edi+10h]
		test	esi, esi
		jz	short loc_23B
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_230

loc_215:				; CODE XREF: _ec_pre_comp_clear_free+4Ej
		push	eax
		call	_EC_POINT_clear_free
		push	4
		push	esi
		call	_OPENSSL_cleanse
		mov	eax, [esi+4]
		add	esi, 4
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_215

loc_230:				; CODE XREF: _ec_pre_comp_clear_free+33j
		push	dword ptr [edi+10h]
		call	_CRYPTO_free
		add	esp, 4

loc_23B:				; CODE XREF: _ec_pre_comp_clear_free+2Dj
		push	1Ch
		push	edi
		call	_OPENSSL_cleanse
		push	edi
		call	_CRYPTO_free
		add	esp, 0Ch
		pop	esi

loc_24D:				; CODE XREF: _ec_pre_comp_clear_free+7j
					; _ec_pre_comp_clear_free+25j
		pop	edi
		retn
_ec_pre_comp_clear_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 250h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_pre_comp_dup proc near		; DATA XREF: _ec_wNAF_have_precompute_mult+Eo
					; _ec_wNAF_mul+149o ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	7Ch ; '|'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	24h ; '$'
		lea	ecx, [esi+18h]
		push	1
		push	ecx
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	eax, esi
		pop	esi
		retn
_ec_pre_comp_dup endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 270h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_pre_comp_free proc near		; CODE XREF: _ec_wNAF_precompute_mult+3F8p
					; DATA XREF: _ec_wNAF_have_precompute_mult+9o ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_2CD
		push	89h ; 'â'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	24h ; '$'
		lea	eax, [edi+18h]
		push	0FFFFFFFFh
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		test	eax, eax
		jg	short loc_2CD
		push	esi
		mov	esi, [edi+10h]
		test	esi, esi
		jz	short loc_2C3
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_2B8

loc_2A5:				; CODE XREF: _ec_pre_comp_free+46j
		push	eax
		call	_EC_POINT_free
		mov	eax, [esi+4]
		lea	esi, [esi+4]
		add	esp, 4
		test	eax, eax
		jnz	short loc_2A5

loc_2B8:				; CODE XREF: _ec_pre_comp_free+33j
		push	dword ptr [edi+10h]
		call	_CRYPTO_free
		add	esp, 4

loc_2C3:				; CODE XREF: _ec_pre_comp_free+2Dj
		push	edi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi

loc_2CD:				; CODE XREF: _ec_pre_comp_free+7j
					; _ec_pre_comp_free+25j
		pop	edi
		retn
_ec_pre_comp_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_pre_comp_new proc near		; CODE XREF: _ec_wNAF_precompute_mult+42p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_306
		push	67h ; 'g'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	1Ch
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_30A
		push	69h ; 'i'
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		push	0C4h ; 'ƒ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_306:				; CODE XREF: _ec_pre_comp_new+7j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_30A:				; CODE XREF: _ec_pre_comp_new+1Cj
		mov	[eax], esi
		mov	dword ptr [eax+4], 8
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 4
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+18h], 1
		pop	esi
		retn
_ec_pre_comp_new endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 338h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_wNAF_have_precompute_mult
_ec_wNAF_have_precompute_mult proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	offset _ec_pre_comp_clear_free
		push	offset _ec_pre_comp_free
		push	offset _ec_pre_comp_dup
		push	dword ptr [eax+44h]
		call	_EC_EX_DATA_get_data
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_ec_wNAF_have_precompute_mult endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 360h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_wNAF_mul
_ec_wNAF_mul	proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
Src		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 4Ch ; 'L'
		call	__chkstk
		xor	eax, eax
		mov	[esp+4Ch+var_C], 0
		push	ebx
		mov	ebx, [esp+50h+arg_0]
		mov	[esp+50h+var_48], eax
		mov	[esp+50h+var_8], eax
		mov	eax, [esp+50h+arg_4]
		mov	edx, [ebx]
		push	ebp
		push	esi
		xor	esi, esi
		mov	[esp+58h+var_10], 0
		xor	ebp, ebp
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+Src], esi
		mov	[esp+58h+var_14], esi
		mov	[esp+58h+var_20], esi
		mov	[esp+58h+var_30], esi
		mov	[esp+58h+var_3C], esi
		mov	[esp+58h+var_38], esi
		mov	[esp+58h+var_40], esi
		mov	[esp+58h+var_18], ebp
		cmp	edx, [eax]
		jz	short loc_3E5
		push	168h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	65h ; 'e'
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_3E5:				; CODE XREF: _ec_wNAF_mul+5Fj
		push	edi
		mov	edi, [esp+5Ch+arg_8]
		test	edi, edi
		jnz	short loc_406
		cmp	[esp+5Ch+arg_C], esi
		jnz	short loc_406
		push	eax
		push	ebx
		call	_EC_POINT_set_to_infinity
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_406:				; CODE XREF: _ec_wNAF_mul+8Cj
					; _ec_wNAF_mul+92j
		xor	ecx, ecx
		cmp	[esp+5Ch+arg_C], ecx
		jbe	short loc_422
		xchg	ax, ax

loc_410:				; CODE XREF: _ec_wNAF_mul+C0j
		mov	eax, [esp+5Ch+arg_10]
		mov	eax, [eax+ecx*4]
		cmp	edx, [eax]
		jnz	short loc_47A
		inc	ecx
		cmp	ecx, [esp+5Ch+arg_C]
		jb	short loc_410

loc_422:				; CODE XREF: _ec_wNAF_mul+ACj
		cmp	[esp+5Ch+arg_18], esi
		jnz	short loc_43D
		call	_BN_CTX_new
		mov	[esp+5Ch+var_C], eax
		mov	[esp+5Ch+arg_18], eax
		test	eax, eax
		jz	loc_9CD

loc_43D:				; CODE XREF: _ec_wNAF_mul+C6j
		test	edi, edi
		jz	loc_544
		push	ebx
		call	_EC_GROUP_get0_generator
		mov	esi, eax
		add	esp, 4
		mov	[esp+5Ch+var_10], esi
		test	esi, esi
		jnz	short loc_49F
		push	180h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	71h ; 'q'

loc_464:				; CODE XREF: _ec_wNAF_mul+1C6j
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	ebx, ebx
		jmp	loc_924
; ---------------------------------------------------------------------------

loc_47A:				; CODE XREF: _ec_wNAF_mul+B9j
		push	172h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	65h ; 'e'
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_49F:				; CODE XREF: _ec_wNAF_mul+F6j
		push	offset _ec_pre_comp_clear_free
		push	offset _ec_pre_comp_free
		push	offset _ec_pre_comp_dup
		push	dword ptr [ebx+44h]
		call	_EC_EX_DATA_get_data
		mov	ebp, eax
		add	esp, 10h
		mov	[esp+5Ch+var_48], ebp
		test	ebp, ebp
		jz	short loc_52B
		cmp	dword ptr [ebp+8], 0
		jz	short loc_52B
		mov	ecx, [ebp+10h]
		push	[esp+5Ch+arg_18]
		push	dword ptr [ecx]
		push	esi
		push	ebx
		call	_EC_POINT_cmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_52B
		mov	ebx, [ebp+4]
		push	edi
		mov	[esp+60h+var_44], ebx
		call	_BN_num_bits
		xor	edx, edx
		mov	ecx, [ebp+0Ch]
		div	ebx
		mov	edx, [ebp+8]
		add	esp, 4
		lea	esi, [eax+1]
		mov	eax, 1
		cmp	esi, edx
		cmova	esi, edx
		dec	ecx
		shl	eax, cl
		imul	edx, eax
		mov	[esp+5Ch+Src], esi
		mov	[esp+5Ch+var_14], eax
		cmp	[ebp+14h], edx
		jz	short loc_542
		push	19Fh
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	44h ; 'D'
		jmp	loc_464
; ---------------------------------------------------------------------------

loc_52B:				; CODE XREF: _ec_wNAF_mul+161j
					; _ec_wNAF_mul+167j ...
		mov	esi, 1
		xor	eax, eax
		mov	ebp, esi
		mov	[esp+5Ch+var_48], eax
		mov	[esp+5Ch+Src], esi
		mov	[esp+5Ch+var_18], ebp
		jmp	short loc_544
; ---------------------------------------------------------------------------

loc_542:				; CODE XREF: _ec_wNAF_mul+1B8j
		xor	ebp, ebp

loc_544:				; CODE XREF: _ec_wNAF_mul+DFj
					; _ec_wNAF_mul+1E0j
		mov	eax, [esp+5Ch+arg_C]
		add	eax, esi
		push	1ADh
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		mov	[esp+64h+var_34], eax
		lea	esi, ds:0[eax*4]
		push	esi
		call	_CRYPTO_malloc
		push	1AEh
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	esi
		mov	[esp+74h+var_30], eax
		call	_CRYPTO_malloc
		push	1AFh
		lea	ecx, [esi+4]
		mov	[esp+78h+var_3C], eax
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	ecx
		call	_CRYPTO_malloc
		push	1B1h
		mov	ebx, eax
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	esi
		mov	[esp+8Ch+var_4C], ebx
		call	_CRYPTO_malloc
		add	esp, 30h
		mov	[esp+5Ch+var_40], eax
		test	ebx, ebx
		jz	short loc_5B7
		mov	dword ptr [ebx], 0

loc_5B7:				; CODE XREF: _ec_wNAF_mul+24Fj
		mov	esi, [esp+5Ch+var_30]
		test	esi, esi
		jz	loc_D1F
		mov	edx, [esp+5Ch+var_3C]
		test	edx, edx
		jz	loc_D1F
		test	ebx, ebx
		jz	loc_D1F
		test	eax, eax
		jz	loc_D1F
		mov	ecx, [esp+5Ch+arg_C]
		xor	ebx, ebx
		mov	[esp+5Ch+var_24], 0
		lea	eax, [ecx+ebp]
		mov	[esp+5Ch+var_28], eax
		test	eax, eax
		jz	loc_6E2
		mov	eax, [esp+5Ch+var_4C]
		mov	edi, esi
		mov	ebp, [esp+5Ch+arg_14]
		sub	eax, esi
		mov	[esp+5Ch+var_1C], eax
		sub	ebp, esi
		mov	eax, edx
		sub	eax, esi
		mov	[esp+5Ch+var_4], eax

loc_616:				; CODE XREF: _ec_wNAF_mul+374j
		cmp	ebx, ecx
		jnb	short loc_628
		push	dword ptr [edi+ebp]
		call	_BN_num_bits
		mov	esi, [esp+60h+arg_8]
		jmp	short loc_632
; ---------------------------------------------------------------------------

loc_628:				; CODE XREF: _ec_wNAF_mul+2B8j
		mov	esi, [esp+5Ch+arg_8]
		push	esi
		call	_BN_num_bits

loc_632:				; CODE XREF: _ec_wNAF_mul+2C6j
		add	esp, 4
		cmp	eax, 7D0h
		jb	short loc_643
		mov	ecx, 6
		jmp	short loc_673
; ---------------------------------------------------------------------------

loc_643:				; CODE XREF: _ec_wNAF_mul+2DAj
		cmp	eax, 320h
		jb	short loc_651
		mov	ecx, 5
		jmp	short loc_673
; ---------------------------------------------------------------------------

loc_651:				; CODE XREF: _ec_wNAF_mul+2E8j
		cmp	eax, 12Ch
		jb	short loc_65F
		mov	ecx, 4
		jmp	short loc_673
; ---------------------------------------------------------------------------

loc_65F:				; CODE XREF: _ec_wNAF_mul+2F6j
		cmp	eax, 46h ; 'F'
		jb	short loc_66B
		mov	ecx, 3
		jmp	short loc_673
; ---------------------------------------------------------------------------

loc_66B:				; CODE XREF: _ec_wNAF_mul+302j
		cmp	eax, 14h
		sbb	ecx, ecx
		add	ecx, 2

loc_673:				; CODE XREF: _ec_wNAF_mul+2E1j
					; _ec_wNAF_mul+2EFj ...
		mov	[edi], ecx
		mov	eax, 1
		dec	ecx
		shl	eax, cl
		add	[esp+5Ch+var_24], eax
		mov	eax, [esp+5Ch+var_1C]
		mov	dword ptr [eax+edi+4], 0
		cmp	ebx, [esp+5Ch+arg_C]
		jnb	short loc_698
		mov	eax, [edi+ebp]
		jmp	short loc_69A
; ---------------------------------------------------------------------------

loc_698:				; CODE XREF: _ec_wNAF_mul+331j
		mov	eax, esi

loc_69A:				; CODE XREF: _ec_wNAF_mul+336j
		mov	esi, [esp+5Ch+var_4]
		add	esi, edi
		push	esi
		push	dword ptr [edi]
		push	eax
		call	_compute_wNAF
		mov	ecx, [esp+68h+var_1C]
		add	esp, 0Ch
		mov	[ecx+edi], eax
		test	eax, eax
		jz	loc_920
		mov	ecx, [esp+5Ch+var_38]
		cmp	[esi], ecx
		cmova	ecx, [esi]
		inc	ebx
		add	edi, 4
		mov	[esp+5Ch+var_38], ecx
		mov	ecx, [esp+5Ch+arg_C]
		cmp	ebx, [esp+5Ch+var_28]
		jb	loc_616
		mov	edi, [esp+5Ch+arg_8]
		mov	ebp, [esp+5Ch+var_18]

loc_6E2:				; CODE XREF: _ec_wNAF_mul+296j
		mov	esi, [esp+5Ch+Src]
		test	esi, esi
		jz	loc_8AD
		mov	ebx, [esp+5Ch+var_48]
		test	ebx, ebx
		jnz	short loc_71F
		cmp	ebp, 1
		jz	loc_8AD
		push	1D6h

loc_704:				; CODE XREF: _ec_wNAF_mul+3D0j
					; _ec_wNAF_mul+451j ...
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	44h ; 'D'
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_920
; ---------------------------------------------------------------------------

loc_71F:				; CODE XREF: _ec_wNAF_mul+394j
		mov	[esp+5Ch+var_18], 0
		test	ebp, ebp
		jz	short loc_732
		push	1DFh
		jmp	short loc_704
; ---------------------------------------------------------------------------

loc_732:				; CODE XREF: _ec_wNAF_mul+3C9j
		mov	edx, [esp+5Ch+var_30]
		mov	eax, [ebx+0Ch]
		mov	[edx+ecx*4], eax
		lea	ecx, [esp+5Ch+var_18]
		push	ecx
		push	eax
		push	edi
		call	_compute_wNAF
		mov	ecx, eax
		add	esp, 0Ch
		mov	[esp+5Ch+var_48], ecx
		test	ecx, ecx
		jz	loc_920
		mov	edi, [esp+5Ch+var_18]
		cmp	edi, [esp+5Ch+var_38]
		ja	short loc_793
		mov	esi, [esp+5Ch+arg_C]
		lea	eax, [esi+1]
		mov	[esp+5Ch+var_34], eax
		mov	eax, [esp+5Ch+var_4C]
		mov	[eax+esi*4], ecx
		mov	ecx, [esp+5Ch+var_40]
		mov	dword ptr [eax+esi*4+4], 0
		mov	eax, [esp+5Ch+var_3C]
		mov	[eax+esi*4], edi
		mov	eax, [ebx+10h]
		mov	[ecx+esi*4], eax
		jmp	loc_8AD
; ---------------------------------------------------------------------------

loc_793:				; CODE XREF: _ec_wNAF_mul+401j
		mov	ebp, [esp+5Ch+var_44]
		imul	esi, ebp
		cmp	edi, esi
		jnb	short loc_7C2
		lea	eax, [ebp-1]
		xor	edx, edx
		add	eax, edi
		div	ebp
		cmp	eax, [ebx+8]
		jbe	short loc_7B6
		push	20Ch
		jmp	loc_704
; ---------------------------------------------------------------------------

loc_7B6:				; CODE XREF: _ec_wNAF_mul+44Aj
		mov	esi, [esp+5Ch+arg_C]
		add	eax, esi
		mov	[esp+5Ch+var_34], eax
		jmp	short loc_7CA
; ---------------------------------------------------------------------------

loc_7C2:				; CODE XREF: _ec_wNAF_mul+43Cj
		mov	esi, [esp+5Ch+arg_C]
		mov	eax, [esp+5Ch+var_34]

loc_7CA:				; CODE XREF: _ec_wNAF_mul+460j
		mov	ebp, [ebx+10h]
		mov	ebx, esi
		mov	[esp+5Ch+Src], ecx
		cmp	esi, eax
		jnb	loc_8A4
		mov	ecx, [esp+5Ch+var_4C]
		lea	edx, [eax-1]
		mov	eax, [esp+5Ch+var_3C]
		sub	ecx, eax
		mov	[esp+5Ch+var_1C], edx
		mov	[esp+5Ch+var_18], ecx
		lea	esi, [eax+esi*4]
		mov	eax, [esp+5Ch+var_40]
		sub	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_4], eax
		mov	eax, [esp+5Ch+var_44]

loc_803:				; CODE XREF: _ec_wNAF_mul+531j
		cmp	ebx, edx
		jnb	short loc_815
		mov	[esi], eax
		cmp	edi, eax
		jb	loc_896
		sub	edi, eax
		jmp	short loc_817
; ---------------------------------------------------------------------------

loc_815:				; CODE XREF: _ec_wNAF_mul+4A5j
		mov	[esi], edi

loc_817:				; CODE XREF: _ec_wNAF_mul+4B3j
		push	226h
		mov	dword ptr [ecx+esi+4], 0
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	dword ptr [esi]
		call	_CRYPTO_malloc
		mov	ecx, [esp+68h+var_18]
		add	esp, 0Ch
		mov	[ecx+esi], eax
		test	eax, eax
		jz	loc_9D9
		push	dword ptr [esi]	; Size
		push	[esp+60h+Src]	; Src
		push	eax		; Dst
		call	_memcpy
		mov	ecx, [esp+68h+var_38]
		add	esp, 0Ch
		cmp	[esi], ecx
		cmova	ecx, [esi]
		cmp	dword ptr [ebp+0], 0
		mov	[esp+5Ch+var_38], ecx
		jz	loc_8FC
		mov	eax, [esp+5Ch+var_4]
		inc	ebx
		mov	[eax+esi], ebp
		add	esi, 4
		mov	eax, [esp+5Ch+var_14]
		lea	ebp, [ebp+eax*4+0]
		mov	eax, [esp+5Ch+var_44]
		add	[esp+5Ch+Src], eax
		cmp	ebx, [esp+5Ch+var_34]
		jnb	short loc_8A0
		mov	ecx, [esp+5Ch+var_18]
		mov	edx, [esp+5Ch+var_1C]
		jmp	loc_803
; ---------------------------------------------------------------------------

loc_896:				; CODE XREF: _ec_wNAF_mul+4ABj
		push	21Ah
		jmp	loc_704
; ---------------------------------------------------------------------------

loc_8A0:				; CODE XREF: _ec_wNAF_mul+527j
		mov	ecx, [esp+5Ch+var_48]

loc_8A4:				; CODE XREF: _ec_wNAF_mul+475j
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_8AD:				; CODE XREF: _ec_wNAF_mul+388j
					; _ec_wNAF_mul+399j ...
		mov	ebx, [esp+5Ch+var_24]
		push	243h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		lea	eax, ds:4[ebx*4]
		push	eax
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		mov	[esp+5Ch+var_48], edi
		test	edi, edi
		jnz	loc_9EA
		push	245h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		mov	ebx, [esp+70h+var_4C]
		add	esp, 14h
		xor	esi, esi
		jmp	short $err$211
; ---------------------------------------------------------------------------

loc_8FC:				; CODE XREF: _ec_wNAF_mul+502j
		push	231h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	44h ; 'D'

loc_908:				; CODE XREF: _ec_wNAF_mul+685j
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		push	[esp+70h+var_48]
		call	_CRYPTO_free
		add	esp, 18h

loc_920:				; CODE XREF: _ec_wNAF_mul+355j
					; _ec_wNAF_mul+3BAj ...
		mov	ebx, [esp+5Ch+var_4C]

loc_924:				; CODE XREF: _ec_wNAF_mul+115j
					; _ec_wNAF_mul+9DAj
		xor	esi, esi
		xor	edi, edi

$err$211:				; CODE XREF: _ec_wNAF_mul+59Aj
					; _ec_wNAF_mul+729j ...
		mov	eax, [esp+5Ch+var_C]
		test	eax, eax
		jz	short loc_939
		push	eax
		call	_BN_CTX_free
		add	esp, 4

loc_939:				; CODE XREF: _ec_wNAF_mul+5CEj
		test	esi, esi
		jz	short loc_946
		push	esi
		call	_EC_POINT_free
		add	esp, 4

loc_946:				; CODE XREF: _ec_wNAF_mul+5DBj
		mov	eax, [esp+5Ch+var_30]
		test	eax, eax
		jz	short loc_957
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_957:				; CODE XREF: _ec_wNAF_mul+5ECj
		mov	eax, [esp+5Ch+var_3C]
		test	eax, eax
		jz	short loc_968
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_968:				; CODE XREF: _ec_wNAF_mul+5FDj
		test	ebx, ebx
		jz	short loc_990
		mov	eax, [ebx]
		mov	esi, ebx
		test	eax, eax
		jz	short loc_987

loc_974:				; CODE XREF: _ec_wNAF_mul+625j
		push	eax
		call	_CRYPTO_free
		mov	eax, [esi+4]
		lea	esi, [esi+4]
		add	esp, 4
		test	eax, eax
		jnz	short loc_974

loc_987:				; CODE XREF: _ec_wNAF_mul+612j
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_990:				; CODE XREF: _ec_wNAF_mul+60Aj
		test	edi, edi
		jz	short loc_9BC
		mov	eax, [edi]
		mov	esi, edi
		test	eax, eax
		jz	short loc_9B3
		nop	dword ptr [eax+00h]

loc_9A0:				; CODE XREF: _ec_wNAF_mul+651j
		push	eax
		call	_EC_POINT_clear_free
		mov	eax, [esi+4]
		lea	esi, [esi+4]
		add	esp, 4
		test	eax, eax
		jnz	short loc_9A0

loc_9B3:				; CODE XREF: _ec_wNAF_mul+63Aj
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_9BC:				; CODE XREF: _ec_wNAF_mul+632j
		mov	eax, [esp+5Ch+var_40]
		test	eax, eax
		jz	short loc_9CD
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_9CD:				; CODE XREF: _ec_wNAF_mul+D7j
					; _ec_wNAF_mul+662j
		mov	eax, [esp+5Ch+var_8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_9D9:				; CODE XREF: _ec_wNAF_mul+4DCj
		push	228h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		jmp	loc_908
; ---------------------------------------------------------------------------

loc_9EA:				; CODE XREF: _ec_wNAF_mul+573j
		lea	eax, [edi+ebx*4]
		mov	esi, edi
		xor	ebp, ebp
		mov	dword ptr [eax], 0
		mov	edi, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_14], eax
		test	edi, edi
		jz	short loc_A60
		mov	eax, [esp+5Ch+var_40]
		mov	ebx, [esp+5Ch+var_30]
		sub	eax, ebx
		mov	[esp+5Ch+var_4], eax

loc_A11:				; CODE XREF: _ec_wNAF_mul+6FAj
		mov	[eax+ebx], esi
		xor	edi, edi
		mov	ecx, [ebx]
		mov	eax, 1
		dec	ecx
		shl	eax, cl
		test	eax, eax
		jz	short loc_A4C

loc_A24:				; CODE XREF: _ec_wNAF_mul+6EAj
		push	[esp+5Ch+arg_0]
		call	_EC_POINT_new
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	loc_D4C
		mov	ecx, [ebx]
		mov	eax, 1
		dec	ecx
		inc	edi
		shl	eax, cl
		add	esi, 4
		cmp	edi, eax
		jb	short loc_A24

loc_A4C:				; CODE XREF: _ec_wNAF_mul+6C2j
		mov	edi, [esp+5Ch+var_28]
		inc	ebp
		mov	eax, [esp+5Ch+var_4]
		add	ebx, 4
		cmp	ebp, edi
		jb	short loc_A11
		mov	eax, [esp+5Ch+var_14]

loc_A60:				; CODE XREF: _ec_wNAF_mul+6A1j
		cmp	esi, eax
		jz	short loc_A8E
		push	256h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	44h ; 'D'
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		mov	ebx, [esp+70h+var_4C]
		add	esp, 14h
		mov	edi, [esp+5Ch+var_48]
		xor	esi, esi
		jmp	$err$211
; ---------------------------------------------------------------------------

loc_A8E:				; CODE XREF: _ec_wNAF_mul+702j
		mov	ebp, [esp+5Ch+arg_0]
		push	ebp
		call	_EC_POINT_new
		add	esp, 4
		mov	[esp+5Ch+var_44], eax
		test	eax, eax
		jz	loc_D5B
		xor	ebx, ebx
		test	edi, edi
		jz	loc_B7C
		mov	ecx, [esp+5Ch+var_40]
		mov	edi, ecx
		mov	eax, [esp+5Ch+arg_10]
		mov	esi, [esp+5Ch+var_30]
		sub	eax, ecx
		sub	esi, ecx
		mov	[esp+5Ch+arg_10], eax
		mov	[esp+5Ch+Src], esi
		nop	dword ptr [eax+eax+00h]

loc_AD0:				; CODE XREF: _ec_wNAF_mul+816j
		cmp	ebx, [esp+5Ch+arg_C]
		jnb	short loc_ADB
		push	dword ptr [eax+edi]
		jmp	short loc_ADF
; ---------------------------------------------------------------------------

loc_ADB:				; CODE XREF: _ec_wNAF_mul+774j
		push	[esp+5Ch+var_10]

loc_ADF:				; CODE XREF: _ec_wNAF_mul+779j
		mov	eax, [edi]
		push	dword ptr [eax]
		call	_EC_POINT_copy
		add	esp, 8
		test	eax, eax
		jz	loc_D0E
		cmp	dword ptr [esi+edi], 1
		jbe	short loc_B6A
		mov	eax, [edi]
		push	[esp+5Ch+arg_18]
		mov	esi, [esp+60h+var_44]
		push	dword ptr [eax]
		push	esi
		push	ebp
		call	_EC_POINT_dbl
		add	esp, 10h
		test	eax, eax
		jz	loc_D3F
		mov	ecx, [esp+5Ch+Src]
		mov	esi, 1
		mov	eax, esi
		mov	ecx, [ecx+edi]
		dec	ecx
		shl	eax, cl
		cmp	eax, esi
		jbe	short loc_B66
		nop	dword ptr [eax+00h]

loc_B30:				; CODE XREF: _ec_wNAF_mul+804j
		push	[esp+5Ch+arg_18]
		mov	eax, [edi]
		push	[esp+60h+var_44]
		push	dword ptr [eax+esi*4-4]
		push	dword ptr [eax+esi*4]
		push	ebp
		call	_EC_POINT_add
		add	esp, 14h
		test	eax, eax
		jz	loc_D0E
		mov	eax, [esp+5Ch+Src]
		inc	esi
		mov	ecx, [eax+edi]
		mov	eax, 1
		dec	ecx
		shl	eax, cl
		cmp	esi, eax
		jb	short loc_B30

loc_B66:				; CODE XREF: _ec_wNAF_mul+7CAj
		mov	esi, [esp+5Ch+Src]

loc_B6A:				; CODE XREF: _ec_wNAF_mul+797j
		mov	eax, [esp+5Ch+arg_10]
		inc	ebx
		add	edi, 4
		cmp	ebx, [esp+5Ch+var_28]
		jb	loc_AD0

loc_B7C:				; CODE XREF: _ec_wNAF_mul+74Bj
		mov	edi, [esp+5Ch+arg_18]
		mov	eax, [esp+5Ch+var_48]
		push	edi
		push	eax
		push	[esp+64h+var_24]
		push	ebp
		call	_EC_POINTs_make_affine
		add	esp, 10h
		test	eax, eax
		jz	loc_D0E
		mov	ecx, [esp+5Ch+var_38]
		mov	ebx, 1
		sub	ecx, ebx
		mov	[esp+5Ch+var_24], ecx
		js	loc_CF5
		jmp	short loc_BB6
; ---------------------------------------------------------------------------

loc_BB2:				; CODE XREF: _ec_wNAF_mul+971j
		mov	ebp, [esp+5Ch+arg_0]

loc_BB6:				; CODE XREF: _ec_wNAF_mul+850j
		mov	esi, [esp+5Ch+arg_4]
		test	ebx, ebx
		jnz	short loc_BD6
		push	edi
		push	esi
		push	esi
		push	ebp
		call	_EC_POINT_dbl
		add	esp, 10h
		test	eax, eax
		jz	loc_D0E
		mov	ecx, [esp+5Ch+var_24]

loc_BD6:				; CODE XREF: _ec_wNAF_mul+85Cj
		xor	ebp, ebp
		cmp	[esp+5Ch+var_34], ebp
		jbe	loc_CCA
		mov	edx, [esp+5Ch+var_3C]
		mov	eax, [esp+5Ch+var_4C]
		sub	edx, eax
		mov	edi, [esp+5Ch+var_40]
		sub	eax, edi
		mov	[esp+5Ch+var_10], edx
		mov	[esp+5Ch+var_4], eax
		nop	word ptr [eax+eax+00h]

loc_C00:				; CODE XREF: _ec_wNAF_mul+960j
		add	eax, edi
		cmp	[eax+edx], ecx
		jbe	loc_CB4
		mov	eax, [eax]
		movsx	esi, byte ptr [eax+ecx]
		test	esi, esi
		jz	loc_CB0
		xor	eax, eax
		test	esi, esi
		sets	al
		test	eax, eax
		jz	short loc_C26
		neg	esi

loc_C26:				; CODE XREF: _ec_wNAF_mul+8C2j
		mov	ecx, [esp+5Ch+var_20]
		cmp	eax, ecx
		jz	short loc_C5D
		test	ebx, ebx
		jnz	short loc_C52
		push	[esp+5Ch+arg_18]
		push	[esp+60h+arg_4]
		push	[esp+64h+arg_0]
		call	_EC_POINT_invert
		add	esp, 0Ch
		test	eax, eax
		jz	loc_D0E
		mov	ecx, [esp+5Ch+var_20]

loc_C52:				; CODE XREF: _ec_wNAF_mul+8D0j
		xor	eax, eax
		test	ecx, ecx
		setz	al
		mov	[esp+5Ch+var_20], eax

loc_C5D:				; CODE XREF: _ec_wNAF_mul+8CCj
		mov	eax, [edi]
		sar	esi, 1
		test	ebx, ebx
		jz	short loc_C89
		push	dword ptr [eax+esi*4]
		mov	esi, [esp+60h+arg_4]
		push	esi
		call	_EC_POINT_copy
		add	esp, 8
		test	eax, eax
		jz	loc_D0E
		mov	ecx, [esp+5Ch+var_24]
		xor	ebx, ebx
		mov	edx, [esp+5Ch+var_10]
		jmp	short loc_CB4
; ---------------------------------------------------------------------------

loc_C89:				; CODE XREF: _ec_wNAF_mul+903j
		push	[esp+5Ch+arg_18]
		push	dword ptr [eax+esi*4]
		mov	esi, [esp+64h+arg_4]
		push	esi
		push	esi
		push	[esp+6Ch+arg_0]
		call	_EC_POINT_add
		add	esp, 14h
		test	eax, eax
		jz	short loc_D0E
		mov	ecx, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+var_10]
		jmp	short loc_CB4
; ---------------------------------------------------------------------------

loc_CB0:				; CODE XREF: _ec_wNAF_mul+8B3j
		mov	esi, [esp+5Ch+arg_4]

loc_CB4:				; CODE XREF: _ec_wNAF_mul+8A5j
					; _ec_wNAF_mul+927j ...
		mov	eax, [esp+5Ch+var_4]
		inc	ebp
		add	edi, 4
		cmp	ebp, [esp+5Ch+var_34]
		jb	loc_C00
		mov	edi, [esp+5Ch+arg_18]

loc_CCA:				; CODE XREF: _ec_wNAF_mul+87Cj
		sub	ecx, 1
		mov	[esp+5Ch+var_24], ecx
		jns	loc_BB2
		test	ebx, ebx
		jnz	short loc_CF1
		cmp	[esp+5Ch+var_20], ebx
		jz	short loc_D06
		push	edi
		push	esi
		push	[esp+64h+arg_0]
		call	_EC_POINT_invert
		add	esp, 0Ch
		jmp	short loc_D02
; ---------------------------------------------------------------------------

loc_CF1:				; CODE XREF: _ec_wNAF_mul+979j
		mov	ebp, [esp+5Ch+arg_0]

loc_CF5:				; CODE XREF: _ec_wNAF_mul+84Aj
		push	[esp+5Ch+arg_4]
		push	ebp
		call	_EC_POINT_set_to_infinity
		add	esp, 8

loc_D02:				; CODE XREF: _ec_wNAF_mul+98Fj
		test	eax, eax
		jz	short loc_D0E

loc_D06:				; CODE XREF: _ec_wNAF_mul+97Fj
		mov	[esp+5Ch+var_8], 1

loc_D0E:				; CODE XREF: _ec_wNAF_mul+78Dj
					; _ec_wNAF_mul+7ECj ...
		mov	ebx, [esp+5Ch+var_4C]
		mov	esi, [esp+5Ch+var_44]
		mov	edi, [esp+5Ch+var_48]
		jmp	$err$211
; ---------------------------------------------------------------------------

loc_D1F:				; CODE XREF: _ec_wNAF_mul+25Dj
					; _ec_wNAF_mul+269j ...
		push	1B8h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		push	0BBh ; 'ª'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_924
; ---------------------------------------------------------------------------

loc_D3F:				; CODE XREF: _ec_wNAF_mul+7B1j
		mov	ebx, [esp+5Ch+var_4C]
		mov	edi, [esp+5Ch+var_48]
		jmp	$err$211
; ---------------------------------------------------------------------------

loc_D4C:				; CODE XREF: _ec_wNAF_mul+6D4j
		mov	edi, [esp+5Ch+var_48]
		xor	esi, esi
		mov	ebx, [esp+5Ch+var_4C]
		jmp	$err$211
; ---------------------------------------------------------------------------

loc_D5B:				; CODE XREF: _ec_wNAF_mul+741j
		mov	esi, [esp+5Ch+var_44]
		mov	edi, [esp+5Ch+var_48]
		mov	ebx, [esp+5Ch+var_4C]
		jmp	$err$211
_ec_wNAF_mul	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_wNAF_precompute_mult
_ec_wNAF_precompute_mult proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 2Ch ; ','
		call	__chkstk
		push	ebx
		mov	ebx, [esp+30h+arg_0]
		push	esi
		push	edi
		push	offset _ec_pre_comp_clear_free
		push	offset _ec_pre_comp_free
		lea	eax, [ebx+44h]
		mov	[esp+40h+var_20], 0
		xor	esi, esi
		xor	edi, edi
		push	offset _ec_pre_comp_dup
		push	eax
		mov	[esp+48h+var_C], edi
		mov	[esp+48h+var_2C], esi
		mov	[esp+48h+var_8], esi
		call	_EC_EX_DATA_free_data
		push	ebx
		call	_ec_pre_comp_new
		add	esp, 14h
		mov	[esp+38h+arg_0], eax
		test	eax, eax
		jnz	short loc_DC5
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_DC5:				; CODE XREF: _ec_wNAF_precompute_mult+50j
		push	ebp
		push	ebx
		call	_EC_GROUP_get0_generator
		add	esp, 4
		mov	[esp+3Ch+var_4], eax
		test	eax, eax
		jnz	short loc_DF8
		push	2F9h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	71h ; 'q'
		push	0BCh ; 'º'
		push	10h
		call	_ERR_put_error
		mov	ebp, [esp+50h+arg_4]
		add	esp, 14h
		jmp	short loc_E59
; ---------------------------------------------------------------------------

loc_DF8:				; CODE XREF: _ec_wNAF_precompute_mult+69j
		mov	ebp, [esp+3Ch+arg_4]
		test	ebp, ebp
		jnz	short loc_E13
		call	_BN_CTX_new
		mov	[esp+3Ch+var_C], eax
		mov	ebp, eax
		test	eax, eax
		jz	loc_115A

loc_E13:				; CODE XREF: _ec_wNAF_precompute_mult+92j
		push	ebp
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_E57
		push	ebp
		push	esi
		push	ebx
		call	_EC_GROUP_get_order
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_E57
		cmp	[esi+4], edi
		jnz	short loc_E84
		push	30Bh
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	72h ; 'r'
		push	0BCh ; 'º'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_E57:				; CODE XREF: _ec_wNAF_precompute_mult+BAj
					; _ec_wNAF_precompute_mult+C9j
		xor	esi, esi

loc_E59:				; CODE XREF: _ec_wNAF_precompute_mult+8Aj
					; _ec_wNAF_precompute_mult+1E9j ...
		mov	ebx, [esp+3Ch+arg_0]

$err$109:				; CODE XREF: _ec_wNAF_precompute_mult+3B1j
		test	ebp, ebp
		jz	short loc_E6A
		push	ebp
		call	_BN_CTX_end
		add	esp, 4

loc_E6A:				; CODE XREF: _ec_wNAF_precompute_mult+F3j
		mov	eax, [esp+3Ch+var_C]
		test	eax, eax
		jz	loc_115E
		push	eax
		call	_BN_CTX_free
		add	esp, 4
		jmp	loc_115E
; ---------------------------------------------------------------------------

loc_E84:				; CODE XREF: _ec_wNAF_precompute_mult+CEj
		push	esi
		call	_BN_num_bits
		mov	ecx, eax
		add	esp, 4
		mov	esi, 4
		mov	[esp+3Ch+var_28], esi
		cmp	ecx, 7D0h
		jnb	short loc_EEE
		cmp	ecx, 320h
		jnb	short loc_EC9
		cmp	ecx, 12Ch
		jnb	short loc_EF7
		cmp	ecx, 46h ; 'F'
		jnb	short loc_EF7
		cmp	ecx, 14h
		sbb	eax, eax
		add	eax, 2
		cmp	eax, esi
		jbe	short loc_EF7
		cmp	ecx, 320h
		jb	short loc_ED0

loc_EC9:				; CODE XREF: _ec_wNAF_precompute_mult+13Aj
		mov	esi, 5
		jmp	short loc_EF3
; ---------------------------------------------------------------------------

loc_ED0:				; CODE XREF: _ec_wNAF_precompute_mult+15Bj
		cmp	ecx, 12Ch
		jnb	short loc_EF3
		cmp	ecx, 46h ; 'F'
		jb	short loc_EE4
		mov	esi, 3
		jmp	short loc_EF3
; ---------------------------------------------------------------------------

loc_EE4:				; CODE XREF: _ec_wNAF_precompute_mult+16Fj
		cmp	ecx, 14h
		sbb	esi, esi
		add	esi, 2
		jmp	short loc_EF3
; ---------------------------------------------------------------------------

loc_EEE:				; CODE XREF: _ec_wNAF_precompute_mult+132j
		mov	esi, 6

loc_EF3:				; CODE XREF: _ec_wNAF_precompute_mult+162j
					; _ec_wNAF_precompute_mult+16Aj ...
		mov	[esp+3Ch+var_28], esi

loc_EF7:				; CODE XREF: _ec_wNAF_precompute_mult+142j
					; _ec_wNAF_precompute_mult+147j ...
		lea	edx, [ecx+7]
		mov	eax, 1
		lea	ecx, [esi-1]
		shr	edx, 3
		shl	eax, cl
		mov	[esp+3Ch+var_10], eax
		imul	eax, edx
		push	325h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		mov	[esp+44h+var_1C], edx
		mov	[esp+44h+var_18], eax
		lea	eax, ds:4[eax*4]
		push	eax
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		mov	[esp+3Ch+var_2C], esi
		test	esi, esi
		jnz	short loc_F5A
		push	327h
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		push	0BCh ; 'º'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_E59
; ---------------------------------------------------------------------------

loc_F5A:				; CODE XREF: _ec_wNAF_precompute_mult+1CCj
		mov	ecx, [esp+3Ch+var_18]
		mov	eax, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_14], edi
		mov	[eax+ecx*4], edi
		test	ecx, ecx
		jz	short loc_F94

loc_F6D:				; CODE XREF: _ec_wNAF_precompute_mult+226j
		push	ebx
		call	_EC_POINT_new
		mov	ecx, [esp+40h+var_14]
		add	esp, 4
		mov	edx, [esp+3Ch+var_2C]
		mov	[edx+ecx*4], eax
		test	eax, eax
		jz	loc_1122
		inc	ecx
		mov	[esp+3Ch+var_14], ecx
		cmp	ecx, [esp+3Ch+var_18]
		jb	short loc_F6D

loc_F94:				; CODE XREF: _ec_wNAF_precompute_mult+1FFj
		push	ebx
		call	_EC_POINT_new
		add	esp, 4
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jz	loc_1146
		push	ebx
		call	_EC_POINT_new
		mov	edi, eax
		add	esp, 4
		mov	[esp+3Ch+var_24], edi
		test	edi, edi
		jz	loc_1146
		push	[esp+3Ch+var_4]
		push	edi
		call	_EC_POINT_copy
		add	esp, 8
		test	eax, eax
		jz	loc_113D
		cmp	[esp+3Ch+var_1C], 0
		mov	[esp+3Ch+var_14], 0
		jbe	loc_10A9
		nop	dword ptr [eax+00h]

loc_FEC:				; CODE XREF: _ec_wNAF_precompute_mult+337j
		push	ebp
		push	edi
		push	[esp+44h+var_20]
		push	ebx
		call	_EC_POINT_dbl
		add	esp, 10h
		test	eax, eax
		jz	loc_113D
		push	edi
		push	dword ptr [esi]
		call	_EC_POINT_copy
		add	esp, 8
		add	esi, 4
		test	eax, eax
		jz	loc_113D
		mov	edi, 1
		cmp	[esp+3Ch+var_10], edi
		jbe	short loc_1049

loc_1024:				; CODE XREF: _ec_wNAF_precompute_mult+2DBj
		push	ebp
		push	dword ptr [esi-4]
		push	[esp+44h+var_20]
		push	dword ptr [esi]
		push	ebx
		call	_EC_POINT_add
		add	esp, 14h
		test	eax, eax
		jz	loc_114D
		inc	edi
		add	esi, 4
		cmp	edi, [esp+3Ch+var_10]
		jb	short loc_1024

loc_1049:				; CODE XREF: _ec_wNAF_precompute_mult+2B6j
		mov	eax, [esp+3Ch+var_1C]
		dec	eax
		cmp	[esp+3Ch+var_14], eax
		jnb	short loc_1092
		mov	edi, [esp+3Ch+var_24]
		push	ebp
		push	[esp+40h+var_20]
		push	edi
		push	ebx
		call	_EC_POINT_dbl
		add	esp, 10h
		test	eax, eax
		jz	loc_113D
		mov	edi, 2

loc_1074:				; CODE XREF: _ec_wNAF_precompute_mult+324j
		mov	eax, [esp+3Ch+var_24]
		push	ebp
		push	eax
		push	eax
		push	ebx
		call	_EC_POINT_dbl
		add	esp, 10h
		test	eax, eax
		jz	loc_114D
		inc	edi
		cmp	edi, 8
		jb	short loc_1074

loc_1092:				; CODE XREF: _ec_wNAF_precompute_mult+2E6j
		mov	eax, [esp+3Ch+var_14]
		mov	edi, [esp+3Ch+var_24]
		inc	eax
		mov	[esp+3Ch+var_14], eax
		cmp	eax, [esp+3Ch+var_1C]
		jb	loc_FEC

loc_10A9:				; CODE XREF: _ec_wNAF_precompute_mult+276j
		mov	esi, [esp+3Ch+var_2C]
		push	ebp
		push	esi
		push	[esp+44h+var_18]
		push	ebx
		call	_EC_POINTs_make_affine
		add	esp, 10h
		test	eax, eax
		jz	loc_E59
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [esp+3Ch+var_1C]
		push	offset _ec_pre_comp_clear_free
		push	offset _ec_pre_comp_free
		mov	[eax+8], ecx
		mov	ecx, [esp+44h+var_28]
		mov	[eax+0Ch], ecx
		mov	ecx, [esp+44h+var_18]
		push	offset _ec_pre_comp_dup
		mov	[eax+10h], esi
		xor	esi, esi
		push	eax
		mov	[eax], ebx
		mov	dword ptr [eax+4], 8
		mov	[eax+14h], ecx
		lea	eax, [ebx+44h]
		push	eax
		mov	[esp+50h+var_2C], esi
		call	_EC_EX_DATA_set_data
		add	esp, 14h
		test	eax, eax
		jz	loc_E59
		xor	ebx, ebx
		mov	[esp+3Ch+var_8], 1
		jmp	$err$109
; ---------------------------------------------------------------------------

loc_1122:				; CODE XREF: _ec_wNAF_precompute_mult+217j
		push	32Fh

loc_1127:				; CODE XREF: _ec_wNAF_precompute_mult+3DFj
		push	offset ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; ".\\crypto\\ec\\ec_mult.c"
		push	41h ; 'A'
		push	0BCh ; 'º'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_113D:				; CODE XREF: _ec_wNAF_precompute_mult+263j
					; _ec_wNAF_precompute_mult+291j ...
		mov	esi, [esp+3Ch+var_2C]
		jmp	loc_E59
; ---------------------------------------------------------------------------

loc_1146:				; CODE XREF: _ec_wNAF_precompute_mult+237j
					; _ec_wNAF_precompute_mult+24Ej
		push	335h
		jmp	short loc_1127
; ---------------------------------------------------------------------------

loc_114D:				; CODE XREF: _ec_wNAF_precompute_mult+2CDj
					; _ec_wNAF_precompute_mult+31Aj
		mov	edi, [esp+3Ch+var_24]
		mov	esi, [esp+3Ch+var_2C]
		jmp	loc_E59
; ---------------------------------------------------------------------------

loc_115A:				; CODE XREF: _ec_wNAF_precompute_mult+A1j
		mov	ebx, [esp+3Ch+arg_0]

loc_115E:				; CODE XREF: _ec_wNAF_precompute_mult+104j
					; _ec_wNAF_precompute_mult+113j
		pop	ebp
		test	ebx, ebx
		jz	short loc_116C
		push	ebx
		call	_ec_pre_comp_free
		add	esp, 4

loc_116C:				; CODE XREF: _ec_wNAF_precompute_mult+3F5j
		test	esi, esi
		jz	short loc_1198
		mov	ebx, [esp+38h+var_2C]
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_118F
		xchg	ax, ax

loc_117C:				; CODE XREF: _ec_wNAF_precompute_mult+421j
		push	eax
		call	_EC_POINT_free
		mov	eax, [esi+4]
		lea	esi, [esi+4]
		add	esp, 4
		test	eax, eax
		jnz	short loc_117C

loc_118F:				; CODE XREF: _ec_wNAF_precompute_mult+40Cj
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_1198:				; CODE XREF: _ec_wNAF_precompute_mult+402j
		mov	eax, [esp+38h+var_20]
		test	eax, eax
		jz	short loc_11A9
		push	eax
		call	_EC_POINT_free
		add	esp, 4

loc_11A9:				; CODE XREF: _ec_wNAF_precompute_mult+432j
		test	edi, edi
		jz	short loc_11B6
		push	edi
		call	_EC_POINT_free
		add	esp, 4

loc_11B6:				; CODE XREF: _ec_wNAF_precompute_mult+43Fj
		mov	eax, [esp+38h+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 2Ch
		retn
_ec_wNAF_precompute_mult endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11C4h
; COMDAT (pick any)
		public ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
; `string'
??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ db '.\crypto\ec\ec_mult.c',0
					; DATA XREF: _compute_wNAF+21o
					; _compute_wNAF+3Ao ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_add_lock:near ; CODE XREF: _ec_pre_comp_clear_free+1Bp
					; _ec_pre_comp_dup+14p	...
		extrn _CRYPTO_malloc:near ; CODE XREF: _compute_wNAF+27p
					; _compute_wNAF+ACp ...
		extrn _CRYPTO_free:near	; CODE XREF: _compute_wNAF+1CAp
					; _ec_pre_comp_clear_free+53p ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _ec_pre_comp_clear_free+3Ep
					; _ec_pre_comp_clear_free+5Ep
		extrn _ERR_put_error:near ; CODE XREF: _compute_wNAF+1C1p
					; _ec_pre_comp_new+2Ep	...
		extrn _BN_CTX_new:near	; CODE XREF: _ec_wNAF_mul+C8p
					; _ec_wNAF_precompute_mult+94p
		extrn _BN_CTX_free:near	; CODE XREF: _ec_wNAF_mul+5D1p
					; _ec_wNAF_precompute_mult+10Bp
		extrn _BN_CTX_start:near ; CODE	XREF: _ec_wNAF_precompute_mult+A8p
		extrn _BN_CTX_get:near	; CODE XREF: _ec_wNAF_precompute_mult+AEp
		extrn _BN_CTX_end:near	; CODE XREF: _ec_wNAF_precompute_mult+F6p
		extrn _BN_num_bits:near	; CODE XREF: _compute_wNAF+93p
					; _ec_wNAF_mul+188p ...
		extrn _BN_is_bit_set:near ; CODE XREF: _compute_wNAF+156p
		extrn _EC_GROUP_get0_generator:near ; CODE XREF: _ec_wNAF_mul+E6p
					; _ec_wNAF_precompute_mult+5Bp
		extrn _EC_GROUP_get_order:near ; CODE XREF: _ec_wNAF_precompute_mult+BFp
		extrn _EC_POINT_new:near ; CODE	XREF: _ec_wNAF_mul+6C8p
					; _ec_wNAF_mul+733p ...
		extrn _EC_POINT_free:near ; CODE XREF: _ec_pre_comp_free+36p
					; _ec_wNAF_mul+5DEp ...
		extrn _EC_POINT_clear_free:near	; CODE XREF: _ec_pre_comp_clear_free+36p
					; _ec_wNAF_mul+641p
		extrn _EC_POINT_copy:near ; CODE XREF: _ec_wNAF_mul+783p
					; _ec_wNAF_mul+90Dp ...
		extrn _EC_POINT_set_to_infinity:near ; CODE XREF: _ec_wNAF_mul+96p
					; _ec_wNAF_mul+99Ap
		extrn _EC_POINT_add:near ; CODE	XREF: _ec_wNAF_mul+7E2p
					; _ec_wNAF_mul+93Ap ...
		extrn _EC_POINT_dbl:near ; CODE	XREF: _ec_wNAF_mul+7A7p
					; _ec_wNAF_mul+862p ...
		extrn _EC_POINT_invert:near ; CODE XREF: _ec_wNAF_mul+8DEp
					; _ec_wNAF_mul+987p
		extrn _EC_POINT_cmp:near ; CODE	XREF: _ec_wNAF_mul+174p
		extrn _EC_POINTs_make_affine:near ; CODE XREF: _ec_wNAF_mul+82Bp
					; _ec_wNAF_precompute_mult+348p
		extrn _EC_EX_DATA_set_data:near	; CODE XREF: _ec_wNAF_precompute_mult+397p
		extrn _EC_EX_DATA_get_data:near
					; CODE XREF: _ec_wNAF_have_precompute_mult+16p
					; _ec_wNAF_mul+151p
		extrn _EC_EX_DATA_free_data:near ; CODE	XREF: _ec_wNAF_precompute_mult+3Cp
		extrn __chkstk:near	; CODE XREF: _compute_wNAF+5p
					; _ec_wNAF_mul+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _ec_wNAF_mul+4E9p


		end
