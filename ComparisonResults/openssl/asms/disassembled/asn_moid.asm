;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2C79BF1E1D87C5455778236B35E7E5DC
; Input	CRC32 :	15EFA1C1

; File Name   :	C:\compspace\Diff\openssl\obj\asn_moid.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_add_oid_module
_ASN1_add_oid_module proc near
		push	offset _oid_module_finish
		push	offset _oid_module_init
		push	offset ??_C@_0M@HCKPEIO@oid_section?$AA@ ; "oid_section"
		call	_CONF_module_add
		add	esp, 0Ch
		retn
_ASN1_add_oid_module endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl do_create(char *Str, int)
_do_create	proc near

var_4		= dword	ptr -4
Str		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+14h+Str]
		push	2Ch ; ','       ; Ch
		push	edi		; Str
		call	dword ptr ds:__imp__strrchr
		mov	ebx, dword ptr ds:__imp__isspace
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_4A
		mov	eax, [esp+14h+arg_4]
		mov	ebp, edi
		jmp	short loc_7A
; ---------------------------------------------------------------------------

loc_4A:					; CODE XREF: _do_create+28j
		mov	al, [esi+1]
		lea	ebp, [esi+1]
		test	al, al
		jnz	short loc_5C

loc_54:					; CODE XREF: _do_create+76j
					; _do_create+B2j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_5C:					; CODE XREF: _do_create+3Aj
		movzx	eax, al
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_78

loc_69:					; CODE XREF: _do_create+5Ej
		movzx	eax, byte ptr [ebp+1]
		inc	ebp
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_69

loc_78:					; CODE XREF: _do_create+4Fj
		xor	eax, eax

loc_7A:					; CODE XREF: _do_create+30j
		push	eax
		push	[esp+18h+arg_4]
		push	ebp
		call	_OBJ_create
		add	esp, 0Ch
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jz	short loc_54
		test	esi, esi
		jz	loc_120
		movzx	eax, byte ptr [edi]
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_B7
		nop	dword ptr [eax]

loc_A8:					; CODE XREF: _do_create+9Dj
		movzx	eax, byte ptr [edi+1]
		inc	edi
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_A8

loc_B7:					; CODE XREF: _do_create+8Bj
		movzx	eax, byte ptr [esi-1]
		dec	esi
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_DB
		xchg	ax, ax

loc_C8:					; CODE XREF: _do_create+C1j
		cmp	esi, edi
		jz	short loc_54
		movzx	eax, byte ptr [esi-1]
		dec	esi
		push	eax		; C
		call	ebx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_C8

loc_DB:					; CODE XREF: _do_create+ACj
		lea	ebx, [esi+1]
		sub	ebx, edi
		push	8Fh ; 'è'
		push	offset ??_C@_0BJ@EKABKJJL@?4?2crypto?2asn1?2asn_moid?4c?$AA@ ; ".\\crypto\\asn1\\asn_moid.c"
		lea	eax, [ebx+1]
		push	eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_54
		push	ebx		; Size
		push	edi		; Src
		push	ebp		; Dst
		call	_memcpy
		push	[esp+20h+var_4]
		mov	eax, ebp
		sub	eax, edi
		mov	byte ptr [eax+esi+1], 0
		call	_OBJ_nid2obj
		add	esp, 10h
		mov	[eax+4], ebp

loc_120:				; CODE XREF: _do_create+7Aj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
_do_create	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_oid_module_finish proc	near		; DATA XREF: _ASN1_add_oid_moduleo
		jmp	_OBJ_cleanup
_oid_module_finish endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 134h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_oid_module_init proc near		; DATA XREF: _ASN1_add_oid_module+5o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	esi
		push	[esp+14h+arg_0]
		call	_CONF_imodule_get_value
		push	eax
		push	[esp+1Ch+arg_4]
		call	_NCONF_get_section
		mov	esi, eax
		add	esp, 0Ch
		mov	[esp+14h+var_4], esi
		test	esi, esi
		jnz	short loc_181
		push	50h ; 'P'
		push	offset ??_C@_0BJ@EKABKJJL@?4?2crypto?2asn1?2asn_moid?4c?$AA@ ; ".\\crypto\\asn1\\asn_moid.c"
		push	0ACh ; '¨'
		push	0AEh ; 'Æ'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_181:				; CODE XREF: _oid_module_init+29j
		push	ebx
		push	ebp
		push	edi
		xor	ebx, ebx
		push	esi
		mov	[esp+24h+var_C], ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_2D0
		mov	ebp, dword ptr ds:__imp__isspace
		nop	dword ptr [eax]

loc_1A4:				; CODE XREF: _oid_module_init+196j
		push	ebx
		push	esi
		call	_sk_value
		push	2Ch ; ','       ; Ch
		mov	edi, [eax+8]
		mov	ebx, [eax+4]
		push	edi		; Str
		mov	[esp+30h+var_8], ebx
		call	dword ptr ds:__imp__strrchr
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1CD
		mov	eax, ebx
		mov	ebx, edi
		jmp	short loc_207
; ---------------------------------------------------------------------------

loc_1CD:				; CODE XREF: _oid_module_init+91j
		mov	al, [esi+1]
		lea	ebx, [esi+1]
		mov	[esp+20h+var_10], 0
		test	al, al
		jz	loc_2DD
		movzx	eax, al
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_203
		nop	dword ptr [eax+00h]

loc_1F4:				; CODE XREF: _oid_module_init+CDj
		movzx	eax, byte ptr [ebx+1]
		inc	ebx
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_1F4

loc_203:				; CODE XREF: _oid_module_init+BAj
		mov	eax, [esp+20h+var_10]

loc_207:				; CODE XREF: _oid_module_init+97j
		push	eax
		push	[esp+24h+var_8]
		push	ebx
		call	_OBJ_create
		add	esp, 0Ch
		mov	[esp+20h+var_10], eax
		test	eax, eax
		jz	loc_2DD
		test	esi, esi
		jz	loc_2B2
		movzx	ecx, byte ptr [edi]
		push	ecx		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_245

loc_236:				; CODE XREF: _oid_module_init+10Fj
		movzx	eax, byte ptr [edi+1]
		inc	edi
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_236

loc_245:				; CODE XREF: _oid_module_init+100j
		movzx	eax, byte ptr [esi-1]
		dec	esi
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_26B

loc_254:				; CODE XREF: _oid_module_init+135j
		cmp	esi, edi
		jz	loc_2DD
		movzx	eax, byte ptr [esi-1]
		dec	esi
		push	eax		; C
		call	ebp ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_254

loc_26B:				; CODE XREF: _oid_module_init+11Ej
		lea	ebx, [esi+1]
		sub	ebx, edi
		push	8Fh ; 'è'
		push	offset ??_C@_0BJ@EKABKJJL@?4?2crypto?2asn1?2asn_moid?4c?$AA@ ; ".\\crypto\\asn1\\asn_moid.c"
		lea	eax, [ebx+1]
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+20h+var_8], eax
		test	eax, eax
		jz	short loc_2DD
		push	ebx		; Size
		push	edi		; Src
		push	eax		; Dst
		call	_memcpy
		mov	ebx, [esp+2Ch+var_8]
		mov	ecx, ebx
		push	[esp+2Ch+var_10]
		sub	ecx, edi
		mov	byte ptr [ecx+esi+1], 0
		call	_OBJ_nid2obj
		add	esp, 10h
		mov	[eax+4], ebx

loc_2B2:				; CODE XREF: _oid_module_init+EFj
		mov	ebx, [esp+20h+var_C]
		mov	esi, [esp+20h+var_4]
		inc	ebx
		push	esi
		mov	[esp+24h+var_C], ebx
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	loc_1A4

loc_2D0:				; CODE XREF: _oid_module_init+61j
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, 1
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_2DD:				; CODE XREF: _oid_module_init+A9j
					; _oid_module_init+E7j	...
		push	56h ; 'V'
		push	offset ??_C@_0BJ@EKABKJJL@?4?2crypto?2asn1?2asn_moid?4c?$AA@ ; ".\\crypto\\asn1\\asn_moid.c"
		push	0ABh ; '´'
		push	0AEh ; 'Æ'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 10h
		retn
_oid_module_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 304h
; COMDAT (pick any)
		public ??_C@_0BJ@EKABKJJL@?4?2crypto?2asn1?2asn_moid?4c?$AA@
; `string'
??_C@_0BJ@EKABKJJL@?4?2crypto?2asn1?2asn_moid?4c?$AA@ db '.\crypto\asn1\asn_moid.c',0
					; DATA XREF: _do_create+CDo
					; _oid_module_init+2Do	...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 320h
; COMDAT (pick any)
		public ??_C@_0M@HCKPEIO@oid_section?$AA@
; `string'
??_C@_0M@HCKPEIO@oid_section?$AA@ db 'oid_section',0 ; DATA XREF: _ASN1_add_oid_module+Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _isspace(int C)
		extrn __imp__isspace:near ; CODE XREF: _do_create+48p
					; _do_create+57p ...
		extrn _sk_num:near	; CODE XREF: _oid_module_init+57p
					; _oid_module_init+18Cp
		extrn _sk_value:near	; CODE XREF: _oid_module_init+72p
		extrn _CRYPTO_malloc:near ; CODE XREF: _do_create+D6p
					; _oid_module_init+14Ap
; char *__cdecl	_strrchr(const char *Str, int Ch)
		extrn __imp__strrchr:near ; CODE XREF: _do_create+15p
					; _oid_module_init+84p
					; DATA XREF: ...
		extrn _ERR_put_error:near ; CODE XREF: _oid_module_init+3Ep
					; _oid_module_init+1BCp
		extrn _NCONF_get_section:near ;	CODE XREF: _oid_module_init+19p
		extrn _CONF_module_add:near ; CODE XREF: _ASN1_add_oid_module+Fp
		extrn _CONF_imodule_get_value:near ; CODE XREF:	_oid_module_init+Fp
		extrn _OBJ_nid2obj:near	; CODE XREF: _do_create+FDp
					; _oid_module_init+173p
		extrn _OBJ_create:near	; CODE XREF: _do_create+68p
					; _oid_module_init+D9p
		extrn _OBJ_cleanup:near	; CODE XREF: _oid_module_finishj
		extrn __chkstk:near	; CODE XREF: _do_create+5p
					; _oid_module_init+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _do_create+EBp
					; _oid_module_init+15Dp


		end
