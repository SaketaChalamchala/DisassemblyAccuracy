;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9EE704E9C2C23BAD78536F55A6FA1D64
; Input	CRC32 :	762EDFB3

; File Name   :	C:\compspace\Diff\openssl\obj\x_x509a.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_X509_CERT_AUX_seq_tt dd 5, 2 dup(0)	; DATA XREF: .rdata:0000006Co
		dd offset ??_C@_05BMJJJIHB@trust?$AA@ ;	"trust"
		dd offset _ASN1_OBJECT_it
		dd offset off_8C+1
		dd 0
		dd 4
		dd offset ??_C@_06JPOFNODM@reject?$AA@ ; "reject"
		dd offset _ASN1_OBJECT_it
		dd 1, 0
		dd 8
		dd offset ??_C@_05NKHOCLEE@alias?$AA@ ;	"alias"
		dd offset _ASN1_UTF8STRING_it
		dd 1, 0
		dd 0Ch
		dd offset ??_C@_05CNHMOIOC@keyid?$AA@ ;	"keyid"
		dd offset _ASN1_OCTET_STRING_it
		dd offset off_8C+1
		dd 1, 10h
		dd offset ??_C@_05BGEKGIIP@other?$AA@ ;	"other"
		dd offset _X509_ALGOR_it
; `X509_CERT_AUX_it'::`2'::local_it
?local_it@?1??X509_CERT_AUX_it@@9@9 dd 1, 10h ;	DATA XREF: _X509_CERT_AUX_freeo
					; _X509_CERT_AUX_ito ...
		dd offset _X509_CERT_AUX_seq_tt
		dd 5, 0
		dd 14h
		dd offset ??_C@_0O@LJIIOIG@X509_CERT_AUX?$AA@ ;	"X509_CERT_AUX"
_X509_CERT_PAIR_seq_tt dd offset off_90+1 ; DATA XREF: .rdata:000000B0o
		dd 2 dup(0)
off_8C		dd offset ??_C@_07CJMBKHEI@forward?$AA@	; DATA XREF: .rdata:00000014o
					; .rdata:00000050o
					; "forward"
off_90		dd offset _X509_it	; DATA XREF: .rdata:_X509_CERT_PAIR_seq_tto
					; .rdata:00000094o
		dd offset off_90+1
		dd 1, 4
		dd offset ??_C@_07KOIEOCCE@reverse?$AA@	; "reverse"
		dd offset _X509_it
; `X509_CERT_PAIR_it'::`2'::local_it
?local_it@?1??X509_CERT_PAIR_it@@9@9 dd	1, 10h ; DATA XREF: _X509_CERT_PAIR_freeo
					; _X509_CERT_PAIR_ito ...
		dd offset _X509_CERT_PAIR_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_0P@BDECDGPA@X509_CERT_PAIR?$AA@	; "X509_CERT_PAIR"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
; COMDAT (pick any)
		public ??_C@_05BMJJJIHB@trust?$AA@
; `string'
??_C@_05BMJJJIHB@trust?$AA@ db 'trust',0 ; DATA XREF: .rdata:0000000Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
; COMDAT (pick any)
		public ??_C@_06JPOFNODM@reject?$AA@
; `string'
??_C@_06JPOFNODM@reject?$AA@ db	'reject',0 ; DATA XREF: .rdata:00000020o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
; COMDAT (pick any)
		public ??_C@_05NKHOCLEE@alias?$AA@
; `string'
??_C@_05NKHOCLEE@alias?$AA@ db 'alias',0 ; DATA XREF: .rdata:00000034o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
; COMDAT (pick any)
		public ??_C@_05CNHMOIOC@keyid?$AA@
; `string'
??_C@_05CNHMOIOC@keyid?$AA@ db 'keyid',0 ; DATA XREF: .rdata:00000048o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
; COMDAT (pick any)
		public ??_C@_05BGEKGIIP@other?$AA@
; `string'
??_C@_05BGEKGIIP@other?$AA@ db 'other',0 ; DATA XREF: .rdata:0000005Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
; COMDAT (pick any)
		public ??_C@_0O@LJIIOIG@X509_CERT_AUX?$AA@
; `string'
??_C@_0O@LJIIOIG@X509_CERT_AUX?$AA@ db 'X509_CERT_AUX',0 ; DATA XREF: .rdata:0000007Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
; COMDAT (pick any)
		public ??_C@_07CJMBKHEI@forward?$AA@
; `string'
??_C@_07CJMBKHEI@forward?$AA@ db 'forward',0 ; DATA XREF: .rdata:off_8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 104h
; COMDAT (pick any)
		public ??_C@_07KOIEOCCE@reverse?$AA@
; `string'
??_C@_07KOIEOCCE@reverse?$AA@ db 'reverse',0 ; DATA XREF: .rdata:000000A0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10Ch
; COMDAT (pick any)
		public ??_C@_0P@BDECDGPA@X509_CERT_PAIR?$AA@
; `string'
??_C@_0P@BDECDGPA@X509_CERT_PAIR?$AA@ db 'X509_CERT_PAIR',0 ; DATA XREF: .rdata:000000C0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CERT_AUX_free
_X509_CERT_AUX_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_CERT_AUX_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 130h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CERT_AUX_it
_X509_CERT_AUX_it proc near
		mov	eax, offset ?local_it@?1??X509_CERT_AUX_it@@9@9	; `X509_CERT_AUX_it'::`2'::local_it
		retn
_X509_CERT_AUX_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CERT_AUX_new
_X509_CERT_AUX_new proc	near
		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_CERT_AUX_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CERT_PAIR_free
_X509_CERT_PAIR_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_CERT_PAIR_it@@9@9 ; `X509_CERT_PAIR_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_CERT_PAIR_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CERT_PAIR_it
_X509_CERT_PAIR_it proc	near
		mov	eax, offset ?local_it@?1??X509_CERT_PAIR_it@@9@9 ; `X509_CERT_PAIR_it'::`2'::local_it
		retn
_X509_CERT_PAIR_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 164h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CERT_PAIR_new
_X509_CERT_PAIR_new proc near
		push	offset ?local_it@?1??X509_CERT_PAIR_it@@9@9 ; `X509_CERT_PAIR_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_CERT_PAIR_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 174h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_add1_reject_object
_X509_add1_reject_object proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	[esp+4+arg_4]
		call	_OBJ_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_189
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_189:				; CODE XREF: _X509_add1_reject_object+11j
		push	esi
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jz	short $err$16
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_1AC
		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		mov	[esi+64h], eax
		test	eax, eax
		jz	short $err$16

loc_1AC:				; CODE XREF: _X509_add1_reject_object+22j
		mov	esi, [esi+64h]
		test	esi, esi
		jz	short $err$16
		cmp	dword ptr [esi+4], 0
		jnz	short loc_1C5
		call	_sk_new_null
		mov	[esi+4], eax
		test	eax, eax
		jz	short $err$16

loc_1C5:				; CODE XREF: _X509_add1_reject_object+43j
		push	edi
		push	dword ptr [esi+4]
		call	_sk_push
		add	esp, 8
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

$err$16:				; CODE XREF: _X509_add1_reject_object+1Cj
					; _X509_add1_reject_object+36j	...
		push	edi
		call	_ASN1_OBJECT_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		retn
_X509_add1_reject_object endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_add1_trust_object
_X509_add1_trust_object	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	[esp+4+arg_4]
		call	_OBJ_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1F9
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1F9:				; CODE XREF: _X509_add1_trust_object+11j
		push	esi
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jz	short loc_241
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_21C
		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		mov	[esi+64h], eax
		test	eax, eax
		jz	short loc_241

loc_21C:				; CODE XREF: _X509_add1_trust_object+22j
		mov	esi, [esi+64h]
		test	esi, esi
		jz	short loc_241
		cmp	dword ptr [esi], 0
		jnz	short loc_233
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jz	short loc_241

loc_233:				; CODE XREF: _X509_add1_trust_object+42j
		push	edi
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 8
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_241:				; CODE XREF: _X509_add1_trust_object+1Cj
					; _X509_add1_trust_object+36j ...
		pop	esi
		xor	eax, eax
		pop	edi
		retn
_X509_add1_trust_object	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 248h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_alias_get0
_X509_alias_get0 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	eax, [edx+64h]
		test	eax, eax
		jz	short loc_270
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_270
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_266
		mov	eax, [eax]
		mov	[ecx], eax

loc_266:				; CODE XREF: _X509_alias_get0+18j
		mov	eax, [edx+64h]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		retn
; ---------------------------------------------------------------------------

loc_270:				; CODE XREF: _X509_alias_get0+9j
					; _X509_alias_get0+10j
		xor	eax, eax
		retn
_X509_alias_get0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 274h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_alias_set1
_X509_alias_set1 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	[esp+arg_4], 0
		push	esi
		mov	esi, [esp+4+arg_0]
		jnz	short loc_2AC
		test	esi, esi
		jz	short loc_2A5
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_2A5
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_2A5
		push	eax
		call	_ASN1_UTF8STRING_free
		mov	eax, [esi+64h]
		add	esp, 4
		mov	dword ptr [eax+8], 0

loc_2A5:				; CODE XREF: _X509_alias_set1+Ej
					; _X509_alias_set1+15j	...
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2AC:				; CODE XREF: _X509_alias_set1+Aj
		test	esi, esi
		jz	short loc_2F8
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_2CA
		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		mov	[esi+64h], eax
		test	eax, eax
		jz	short loc_2F8

loc_2CA:				; CODE XREF: _X509_alias_set1+40j
		mov	esi, [esi+64h]
		test	esi, esi
		jz	short loc_2F8
		cmp	dword ptr [esi+8], 0
		jnz	short loc_2E3
		call	_ASN1_UTF8STRING_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short loc_2F8

loc_2E3:				; CODE XREF: _X509_alias_set1+61j
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	dword ptr [esi+8]
		call	_ASN1_STRING_set
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2F8:				; CODE XREF: _X509_alias_set1+3Aj
					; _X509_alias_set1+54j	...
		xor	eax, eax
		pop	esi
		retn
_X509_alias_set1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_keyid_get0
_X509_keyid_get0 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	eax, [edx+64h]
		test	eax, eax
		jz	short loc_324
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_324
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_31A
		mov	eax, [eax]
		mov	[ecx], eax

loc_31A:				; CODE XREF: _X509_keyid_get0+18j
		mov	eax, [edx+64h]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+8]
		retn
; ---------------------------------------------------------------------------

loc_324:				; CODE XREF: _X509_keyid_get0+9j
					; _X509_keyid_get0+10j
		xor	eax, eax
		retn
_X509_keyid_get0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 328h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_keyid_set1
_X509_keyid_set1 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	[esp+arg_4], 0
		push	esi
		mov	esi, [esp+4+arg_0]
		jnz	short loc_360
		test	esi, esi
		jz	short loc_359
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_359
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_359
		push	eax
		call	_ASN1_OCTET_STRING_free
		mov	eax, [esi+64h]
		add	esp, 4
		mov	dword ptr [eax+0Ch], 0

loc_359:				; CODE XREF: _X509_keyid_set1+Ej
					; _X509_keyid_set1+15j	...
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_360:				; CODE XREF: _X509_keyid_set1+Aj
		test	esi, esi
		jz	short loc_3AC
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_37E
		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		mov	[esi+64h], eax
		test	eax, eax
		jz	short loc_3AC

loc_37E:				; CODE XREF: _X509_keyid_set1+40j
		mov	esi, [esi+64h]
		test	esi, esi
		jz	short loc_3AC
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_397
		call	_ASN1_OCTET_STRING_new
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	short loc_3AC

loc_397:				; CODE XREF: _X509_keyid_set1+61j
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	dword ptr [esi+0Ch]
		call	_ASN1_STRING_set
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3AC:				; CODE XREF: _X509_keyid_set1+3Aj
					; _X509_keyid_set1+54j	...
		xor	eax, eax
		pop	esi
		retn
_X509_keyid_set1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_reject_clear
_X509_reject_clear proc	near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_3DB
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_3DB
		push	offset _ASN1_OBJECT_free
		push	eax
		call	_sk_pop_free
		mov	eax, [esi+64h]
		add	esp, 8
		mov	dword ptr [eax+4], 0

loc_3DB:				; CODE XREF: _X509_reject_clear+Aj
					; _X509_reject_clear+11j
		pop	esi
		retn
_X509_reject_clear endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_trust_clear
_X509_trust_clear proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_409
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_409
		push	offset _ASN1_OBJECT_free
		push	eax
		call	_sk_pop_free
		mov	eax, [esi+64h]
		add	esp, 8
		mov	dword ptr [eax], 0

loc_409:				; CODE XREF: _X509_trust_clear+Aj
					; _X509_trust_clear+10j
		pop	esi
		retn
_X509_trust_clear endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_aux_get	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_419

loc_415:				; CODE XREF: _aux_get+25j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_419:				; CODE XREF: _aux_get+7j
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_433
		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		mov	[esi+64h], eax
		test	eax, eax
		jz	short loc_415

loc_433:				; CODE XREF: _aux_get+11j
		mov	eax, [esi+64h]
		pop	esi
		retn
_aux_get	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 438h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_CERT_AUX
_d2i_X509_CERT_AUX proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_CERT_AUX endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 454h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_CERT_PAIR
_d2i_X509_CERT_PAIR proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_CERT_PAIR_it@@9@9 ; `X509_CERT_PAIR_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_CERT_PAIR endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 470h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_CERT_AUX
_i2d_X509_CERT_AUX proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_CERT_AUX_it@@9@9 ; `X509_CERT_AUX_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_CERT_AUX endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 488h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_CERT_PAIR
_i2d_X509_CERT_PAIR proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_CERT_PAIR_it@@9@9 ; `X509_CERT_PAIR_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_CERT_PAIR endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_OCTET_STRING_it:near ; DATA	XREF: .rdata:0000004Co
		extrn _ASN1_UTF8STRING_it:near ; DATA XREF: .rdata:00000038o
		extrn _X509_ALGOR_it:near ; DATA XREF: .rdata:00000060o
		extrn _X509_it:near	; DATA XREF: .rdata:off_90o
					; .rdata:000000A4o
		extrn _ASN1_OBJECT_it:near ; DATA XREF:	.rdata:00000010o
					; .rdata:00000024o
		extrn _sk_new_null:near	; CODE XREF: _X509_add1_reject_object+45p
					; _X509_add1_trust_object+44p
		extrn _sk_pop_free:near	; CODE XREF: _X509_reject_clear+19p
					; _X509_trust_clear+18p
		extrn _sk_push:near	; CODE XREF: _X509_add1_reject_object+55p
					; _X509_add1_trust_object+52p
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _X509_add1_reject_object+61p
					; DATA XREF: _X509_reject_clear+13o ...
		extrn _ASN1_STRING_set:near ; CODE XREF: _X509_alias_set1+7Ap
					; _X509_keyid_set1+7Ap
		extrn _ASN1_OCTET_STRING_new:near ; CODE XREF: _X509_keyid_set1+63p
		extrn _ASN1_OCTET_STRING_free:near ; CODE XREF:	_X509_keyid_set1+1Fp
		extrn _ASN1_UTF8STRING_new:near	; CODE XREF: _X509_alias_set1+63p
		extrn _ASN1_UTF8STRING_free:near ; CODE	XREF: _X509_alias_set1+1Fp
		extrn _ASN1_item_new:near ; CODE XREF: _X509_CERT_AUX_new+5p
					; _X509_CERT_PAIR_new+5p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_X509_CERT_AUX_free+9p
					; _X509_CERT_PAIR_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_X509_CERT_AUX+11p
					; _d2i_X509_CERT_PAIR+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_X509_CERT_AUX+Dp
					; _i2d_X509_CERT_PAIR+Dp
		extrn _OBJ_dup:near	; CODE XREF: _X509_add1_reject_object+5p
					; _X509_add1_trust_object+5p


		end
