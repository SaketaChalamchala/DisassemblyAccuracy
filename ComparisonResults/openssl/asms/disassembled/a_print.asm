;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8017A348F416B90B70C73725B0D4BD2F
; Input	CRC32 :	76BA2AE5

; File Name   :	C:\compspace\Diff\openssl\obj\a_print.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PRINTABLE_type
_ASN1_PRINTABLE_type proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		or	eax, 0FFFFFFFFh
		push	ebx
		push	esi
		xor	esi, esi
		xor	ebx, ebx
		test	edx, edx
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmovle	edx, eax
		test	edi, edi
		jz	loc_B8
		mov	cl, [edi]
		test	cl, cl
		jz	loc_B8
		push	ebp
		lea	ebp, [esi+1]
		nop	dword ptr [eax]

loc_30:					; CODE XREF: _ASN1_PRINTABLE_type+9Fj
		mov	eax, edx
		dec	edx
		test	eax, eax
		jz	short loc_A1
		movzx	eax, cl
		inc	edi
		cmp	eax, 61h ; 'a'
		jl	short loc_45
		cmp	eax, 7Ah ; 'z'
		jle	short loc_96

loc_45:					; CODE XREF: _ASN1_PRINTABLE_type+3Ej
		cmp	eax, 41h ; 'A'
		jl	short loc_4F
		cmp	eax, 5Ah ; 'Z'
		jle	short loc_96

loc_4F:					; CODE XREF: _ASN1_PRINTABLE_type+48j
		cmp	eax, 20h ; ' '
		jz	short loc_96
		cmp	eax, 30h ; '0'
		jl	short loc_5E
		cmp	eax, 39h ; '9'
		jle	short loc_96

loc_5E:					; CODE XREF: _ASN1_PRINTABLE_type+57j
		cmp	eax, 27h ; '''
		jz	short loc_96
		cmp	eax, 28h ; '('
		jz	short loc_96
		cmp	eax, 29h ; ')'
		jz	short loc_96
		cmp	eax, 2Bh ; '+'
		jz	short loc_96
		cmp	eax, 2Ch ; ','
		jz	short loc_96
		cmp	eax, 2Dh ; '-'
		jz	short loc_96
		cmp	eax, 2Eh ; '.'
		jz	short loc_96
		cmp	eax, 2Fh ; '/'
		jz	short loc_96
		cmp	eax, 3Ah ; ':'
		jz	short loc_96
		cmp	eax, 3Dh ; '='
		jz	short loc_96
		cmp	eax, 3Fh ; '?'
		cmovnz	esi, ebp

loc_96:					; CODE XREF: _ASN1_PRINTABLE_type+43j
					; _ASN1_PRINTABLE_type+4Dj ...
		mov	cl, [edi]
		test	al, 80h
		cmovnz	ebx, ebp
		test	cl, cl
		jnz	short loc_30

loc_A1:					; CODE XREF: _ASN1_PRINTABLE_type+35j
		pop	ebp
		test	ebx, ebx
		jz	short loc_AF
		pop	edi
		pop	esi
		mov	eax, 14h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_AF:					; CODE XREF: _ASN1_PRINTABLE_type+A4j
		mov	eax, 16h
		test	esi, esi
		jnz	short loc_BD

loc_B8:					; CODE XREF: _ASN1_PRINTABLE_type+19j
					; _ASN1_PRINTABLE_type+23j
		mov	eax, 13h

loc_BD:					; CODE XREF: _ASN1_PRINTABLE_type+B6j
		pop	edi
		pop	esi
		pop	ebx
		retn
_ASN1_PRINTABLE_type endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_UNIVERSALSTRING_to_string
_ASN1_UNIVERSALSTRING_to_string	proc near

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	dword ptr [edi+4], 1Ch
		jz	short loc_D3
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_D3:					; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+9j
		push	esi
		mov	esi, [edi]
		mov	eax, esi
		and	eax, 80000003h
		jns	short loc_E4
		dec	eax
		or	eax, 0FFFFFFFCh
		inc	eax

loc_E4:					; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+19j
		jnz	short loc_113
		mov	ecx, [edi+8]
		xor	eax, eax
		test	esi, esi
		jle	short loc_10F
		lea	edx, [ecx+2]
		xchg	ax, ax

loc_F4:					; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+49j
		cmp	byte ptr [ecx+eax], 0
		jnz	short loc_10F
		cmp	byte ptr [edx-1], 0
		jnz	short loc_10F
		cmp	byte ptr [edx],	0
		jnz	short loc_10F
		add	eax, 4
		add	edx, 4
		cmp	eax, esi
		jl	short loc_F4

loc_10F:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+29j
					; _ASN1_UNIVERSALSTRING_to_string+34j ...
		cmp	eax, esi
		jge	short loc_118

loc_113:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string:loc_E4j
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_118:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+4Dj
		mov	edx, 3
		cmp	esi, edx
		jle	short loc_134
		nop	dword ptr [eax]

loc_124:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+6Ej
		mov	eax, [edi+8]
		mov	al, [edx+eax]
		add	edx, 4
		mov	[ecx], al
		inc	ecx
		cmp	edx, [edi]
		jl	short loc_124

loc_134:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+5Bj
		mov	byte ptr [ecx],	0
		xor	esi, esi
		mov	eax, [edi]
		cdq
		and	edx, 3
		push	ebx
		push	ebp
		mov	ebp, [edi+8]
		lea	ebx, [edx+eax]
		or	eax, 0FFFFFFFFh
		sar	ebx, 2
		xor	edx, edx
		test	ebx, ebx
		mov	[edi], ebx
		cmovle	ebx, eax
		test	ebp, ebp
		jz	loc_201
		mov	cl, [ebp+0]
		test	cl, cl
		jz	loc_201
		lea	edi, [edx+1]

loc_16C:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+118j
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jz	short loc_1DE
		movzx	eax, cl
		inc	ebp
		cmp	eax, 61h ; 'a'
		jl	short loc_181
		cmp	eax, 7Ah ; 'z'
		jle	short loc_1D2

loc_181:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+B6j
		cmp	eax, 41h ; 'A'
		jl	short loc_18B
		cmp	eax, 5Ah ; 'Z'
		jle	short loc_1D2

loc_18B:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+C0j
		cmp	eax, 20h ; ' '
		jz	short loc_1D2
		cmp	eax, 30h ; '0'
		jl	short loc_19A
		cmp	eax, 39h ; '9'
		jle	short loc_1D2

loc_19A:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+CFj
		cmp	eax, 27h ; '''
		jz	short loc_1D2
		cmp	eax, 28h ; '('
		jz	short loc_1D2
		cmp	eax, 29h ; ')'
		jz	short loc_1D2
		cmp	eax, 2Bh ; '+'
		jz	short loc_1D2
		cmp	eax, 2Ch ; ','
		jz	short loc_1D2
		cmp	eax, 2Dh ; '-'
		jz	short loc_1D2
		cmp	eax, 2Eh ; '.'
		jz	short loc_1D2
		cmp	eax, 2Fh ; '/'
		jz	short loc_1D2
		cmp	eax, 3Ah ; ':'
		jz	short loc_1D2
		cmp	eax, 3Dh ; '='
		jz	short loc_1D2
		cmp	eax, 3Fh ; '?'
		cmovnz	edx, edi

loc_1D2:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+BBj
					; _ASN1_UNIVERSALSTRING_to_string+C5j ...
		mov	cl, [ebp+0]
		test	al, 80h
		cmovnz	esi, edi
		test	cl, cl
		jnz	short loc_16C

loc_1DE:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+ADj
		mov	edi, [esp+10h+arg_0]
		test	esi, esi
		jz	short loc_1F8
		pop	ebp
		pop	ebx
		mov	eax, 14h
		mov	[edi+4], eax
		mov	eax, 1
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1F8:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+120j
		mov	eax, 16h
		test	edx, edx
		jnz	short loc_206

loc_201:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+94j
					; _ASN1_UNIVERSALSTRING_to_string+9Fj
		mov	eax, 13h

loc_206:				; CODE XREF: _ASN1_UNIVERSALSTRING_to_string+13Bj
		pop	ebp
		pop	ebx
		mov	[edi+4], eax
		mov	eax, 1
		pop	esi
		pop	edi
		retn
_ASN1_UNIVERSALSTRING_to_string	endp

_text$mn	ends


		end
