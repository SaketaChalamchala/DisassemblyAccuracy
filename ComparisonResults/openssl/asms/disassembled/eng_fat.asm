;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A5CE86B5653E4321EF5946B633032520
; Input	CRC32 :	11D2CBC2

; File Name   :	C:\compspace\Diff\openssl\obj\eng_fat.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_all_complete
_ENGINE_register_all_complete proc near
		push	esi
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jz	short loc_5E
		nop	dword ptr [eax+00h]

loc_10:					; CODE XREF: _ENGINE_register_all_complete+5Cj
		test	byte ptr [esi+54h], 8
		jnz	short loc_4F
		push	esi
		call	_ENGINE_register_ciphers
		push	esi
		call	_ENGINE_register_digests
		push	esi
		call	_ENGINE_register_RSA
		push	esi
		call	_ENGINE_register_DSA
		push	esi
		call	_ENGINE_register_DH
		push	esi
		call	_ENGINE_register_ECDH
		push	esi
		call	_ENGINE_register_ECDSA
		push	esi
		call	_ENGINE_register_RAND
		push	esi
		call	_ENGINE_register_pkey_meths
		add	esp, 24h

loc_4F:					; CODE XREF: _ENGINE_register_all_complete+14j
		push	esi
		call	_ENGINE_get_next
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10

loc_5E:					; CODE XREF: _ENGINE_register_all_complete+Aj
		mov	eax, 1
		pop	esi
		retn
_ENGINE_register_all_complete endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_complete
_ENGINE_register_complete proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_ENGINE_register_ciphers
		push	esi
		call	_ENGINE_register_digests
		push	esi
		call	_ENGINE_register_RSA
		push	esi
		call	_ENGINE_register_DSA
		push	esi
		call	_ENGINE_register_DH
		push	esi
		call	_ENGINE_register_ECDH
		push	esi
		call	_ENGINE_register_ECDSA
		push	esi
		call	_ENGINE_register_RAND
		push	esi
		call	_ENGINE_register_pkey_meths
		add	esp, 24h
		mov	eax, 1
		pop	esi
		retn
_ENGINE_register_complete endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_default
_ENGINE_set_default proc near		; CODE XREF: _ENGINE_set_default_string+67p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_0]
		test	bl, 40h
		jz	short loc_D1
		push	esi
		call	_ENGINE_set_default_ciphers
		add	esp, 4
		test	eax, eax
		jnz	short loc_D1

loc_CC:					; CODE XREF: _ENGINE_set_default+30j
					; _ENGINE_set_default+42j ...
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_D1:					; CODE XREF: _ENGINE_set_default+Dj
					; _ENGINE_set_default+1Aj
		test	bl, bl
		jns	short loc_E2
		push	esi
		call	_ENGINE_set_default_digests
		add	esp, 4
		test	eax, eax
		jz	short loc_CC

loc_E2:					; CODE XREF: _ENGINE_set_default+23j
		test	bl, 1
		jz	short loc_F4
		push	esi
		call	_ENGINE_set_default_RSA
		add	esp, 4
		test	eax, eax
		jz	short loc_CC

loc_F4:					; CODE XREF: _ENGINE_set_default+35j
		test	bl, 2
		jz	short loc_106
		push	esi
		call	_ENGINE_set_default_DSA
		add	esp, 4
		test	eax, eax
		jz	short loc_CC

loc_106:				; CODE XREF: _ENGINE_set_default+47j
		test	bl, 4
		jz	short loc_118
		push	esi
		call	_ENGINE_set_default_DH
		add	esp, 4
		test	eax, eax
		jz	short loc_CC

loc_118:				; CODE XREF: _ENGINE_set_default+59j
		test	bl, 10h
		jz	short loc_12A
		push	esi
		call	_ENGINE_set_default_ECDH
		add	esp, 4
		test	eax, eax
		jz	short loc_CC

loc_12A:				; CODE XREF: _ENGINE_set_default+6Bj
		test	bl, 20h
		jz	short loc_13C
		push	esi
		call	_ENGINE_set_default_ECDSA
		add	esp, 4
		test	eax, eax
		jz	short loc_CC

loc_13C:				; CODE XREF: _ENGINE_set_default+7Dj
		test	bl, 8
		jz	short loc_152
		push	esi
		call	_ENGINE_set_default_RAND
		add	esp, 4
		test	eax, eax
		jz	loc_CC

loc_152:				; CODE XREF: _ENGINE_set_default+8Fj
		test	ebx, 200h
		jz	short loc_16B
		push	esi
		call	_ENGINE_set_default_pkey_meths
		add	esp, 4
		test	eax, eax
		jz	loc_CC

loc_16B:				; CODE XREF: _ENGINE_set_default+A8j
		test	ebx, 400h
		jz	short loc_184
		push	esi
		call	_ENGINE_set_default_pkey_asn1_meths
		add	esp, 4
		test	eax, eax
		jz	loc_CC

loc_184:				; CODE XREF: _ENGINE_set_default+C1j
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_ENGINE_set_default endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_default_string
_ENGINE_set_default_string proc	near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		lea	eax, [esp+4+var_4]
		mov	[esp+4+var_4], 0
		push	eax
		push	offset _int_def_cb
		push	1
		push	2Ch ; ','
		push	[esp+14h+arg_4]
		call	_CONF_parse_list
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1EC
		push	8Eh ; 'Ž'
		push	offset ??_C@_0BK@LLAIKIML@?4?2crypto?2engine?2eng_fat?4c?$AA@ ;	".\\crypto\\engine\\eng_fat.c"
		push	96h ; '–'
		push	0BDh ; '½'
		push	26h ; '&'
		call	_ERR_put_error
		push	[esp+18h+arg_4]
		push	offset ??_C@_04FOGPFBLG@str?$DN?$AA@ ; "str="
		push	2
		call	_ERR_add_error_data
		add	esp, 20h
		xor	eax, eax
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1EC:				; CODE XREF: _ENGINE_set_default_string+2Cj
		push	[esp+4+var_4]
		push	[esp+8+arg_0]
		call	_ENGINE_set_default
		add	esp, 8
		pop	ecx
		retn
_ENGINE_set_default_string endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 200h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl int_def_cb(char *Str1, size_t MaxCount, int)
_int_def_cb	proc near		; DATA XREF: _ENGINE_set_default_string+15o

Str1		= dword	ptr  4
MaxCount	= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Str1]
		test	esi, esi
		jnz	short loc_20D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_20D:				; CODE XREF: _int_def_cb+7j
		push	ebx
		mov	ebx, dword ptr ds:__imp__strncmp
		push	edi
		mov	edi, [esp+0Ch+MaxCount]
		push	edi		; MaxCount
		push	offset ??_C@_03NIFPGLBG@ALL?$AA@ ; "ALL"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_23C
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 0FFFFh
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_23C:				; CODE XREF: _int_def_cb+27j
		push	edi		; MaxCount
		push	offset ??_C@_03DICHAJGH@RSA?$AA@ ; "RSA"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_25C
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 1
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_25C:				; CODE XREF: _int_def_cb+4Aj
		push	edi		; MaxCount
		push	offset ??_C@_03ENFFABCE@DSA?$AA@ ; "DSA"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_27C
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 2
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_27C:				; CODE XREF: _int_def_cb+6Aj
		push	edi		; MaxCount
		push	offset ??_C@_04GPFMMIBJ@ECDH?$AA@ ; "ECDH"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_29C
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 10h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_29C:				; CODE XREF: _int_def_cb+8Aj
		push	edi		; MaxCount
		push	offset ??_C@_05JNBFMGNN@ECDSA?$AA@ ; "ECDSA"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2BC
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 20h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_2BC:				; CODE XREF: _int_def_cb+AAj
		push	edi		; MaxCount
		push	offset ??_C@_02EPINMGPM@DH?$AA@	; "DH"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2DC
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 4
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_2DC:				; CODE XREF: _int_def_cb+CAj
		push	edi		; MaxCount
		push	offset ??_C@_04LGLHIBNK@RAND?$AA@ ; "RAND"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2FC
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 8
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_2FC:				; CODE XREF: _int_def_cb+EAj
		push	edi		; MaxCount
		push	offset ??_C@_07NKDFJCAL@CIPHERS?$AA@ ; "CIPHERS"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_31C
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 40h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_31C:				; CODE XREF: _int_def_cb+10Aj
		push	edi		; MaxCount
		push	offset ??_C@_07EHEMBJHB@DIGESTS?$AA@ ; "DIGESTS"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_33F
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 80h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_33F:				; CODE XREF: _int_def_cb+12Aj
		push	edi		; MaxCount
		push	offset ??_C@_04FAPDLBCD@PKEY?$AA@ ; "PKEY"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_362
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 600h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_362:				; CODE XREF: _int_def_cb+14Dj
		push	edi		; MaxCount
		push	offset ??_C@_0M@LBKDJGDC@PKEY_CRYPTO?$AA@ ; "PKEY_CRYPTO"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_385
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 200h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_385:				; CODE XREF: _int_def_cb+170j
		push	edi		; MaxCount
		push	offset ??_C@_09NDDMCABJ@PKEY_ASN1?$AA@ ; "PKEY_ASN1"
		push	esi		; Str1
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_3A8
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	ebx
		pop	esi
		or	dword ptr [eax], 400h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_3A8:				; CODE XREF: _int_def_cb+193j
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
_int_def_cb	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B0h
; COMDAT (pick any)
		public ??_C@_03NIFPGLBG@ALL?$AA@
; char `string'[4]
??_C@_03NIFPGLBG@ALL?$AA@ db 'ALL',0    ; DATA XREF: _int_def_cb+1Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B4h
; COMDAT (pick any)
		public ??_C@_03DICHAJGH@RSA?$AA@
; char `string'[4]
??_C@_03DICHAJGH@RSA?$AA@ db 'RSA',0    ; DATA XREF: _int_def_cb+3Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B8h
; COMDAT (pick any)
		public ??_C@_03ENFFABCE@DSA?$AA@
; char `string'[4]
??_C@_03ENFFABCE@DSA?$AA@ db 'DSA',0    ; DATA XREF: _int_def_cb+5Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3BCh
; COMDAT (pick any)
		public ??_C@_04GPFMMIBJ@ECDH?$AA@
; char `string'[]
??_C@_04GPFMMIBJ@ECDH?$AA@ db 'ECDH',0  ; DATA XREF: _int_def_cb+7Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3C4h
; COMDAT (pick any)
		public ??_C@_05JNBFMGNN@ECDSA?$AA@
; char `string'[]
??_C@_05JNBFMGNN@ECDSA?$AA@ db 'ECDSA',0 ; DATA XREF: _int_def_cb+9Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3CCh
; COMDAT (pick any)
		public ??_C@_02EPINMGPM@DH?$AA@
; char `string'[3]
??_C@_02EPINMGPM@DH?$AA@ db 'DH',0      ; DATA XREF: _int_def_cb+BDo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D0h
; COMDAT (pick any)
		public ??_C@_04LGLHIBNK@RAND?$AA@
; char `string'[]
??_C@_04LGLHIBNK@RAND?$AA@ db 'RAND',0  ; DATA XREF: _int_def_cb+DDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D8h
; COMDAT (pick any)
		public ??_C@_07NKDFJCAL@CIPHERS?$AA@
; char `string'[]
??_C@_07NKDFJCAL@CIPHERS?$AA@ db 'CIPHERS',0 ; DATA XREF: _int_def_cb+FDo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3E0h
; COMDAT (pick any)
		public ??_C@_07EHEMBJHB@DIGESTS?$AA@
; char `string'[]
??_C@_07EHEMBJHB@DIGESTS?$AA@ db 'DIGESTS',0 ; DATA XREF: _int_def_cb+11Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3E8h
; COMDAT (pick any)
		public ??_C@_04FAPDLBCD@PKEY?$AA@
; char `string'[]
??_C@_04FAPDLBCD@PKEY?$AA@ db 'PKEY',0  ; DATA XREF: _int_def_cb+140o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F0h
; COMDAT (pick any)
		public ??_C@_0M@LBKDJGDC@PKEY_CRYPTO?$AA@
; char `string'[]
??_C@_0M@LBKDJGDC@PKEY_CRYPTO?$AA@ db 'PKEY_CRYPTO',0 ; DATA XREF: _int_def_cb+163o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3FCh
; COMDAT (pick any)
		public ??_C@_09NDDMCABJ@PKEY_ASN1?$AA@
; char `string'[]
??_C@_09NDDMCABJ@PKEY_ASN1?$AA@	db 'PKEY_ASN1',0 ; DATA XREF: _int_def_cb+186o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 408h
; COMDAT (pick any)
		public ??_C@_0BK@LLAIKIML@?4?2crypto?2engine?2eng_fat?4c?$AA@
; `string'
??_C@_0BK@LLAIKIML@?4?2crypto?2engine?2eng_fat?4c?$AA@ db '.\crypto\engine\eng_fat.c',0
					; DATA XREF: _ENGINE_set_default_string+33o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 424h
; COMDAT (pick any)
		public ??_C@_04FOGPFBLG@str?$DN?$AA@
; `string'
??_C@_04FOGPFBLG@str?$DN?$AA@ db 'str=',0 ; DATA XREF: _ENGINE_set_default_string+4Do
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _int_def_cb+20p
					; _int_def_cb+43p ...
		extrn _ERR_put_error:near ; CODE XREF: _ENGINE_set_default_string+44p
		extrn _ERR_add_error_data:near ; CODE XREF: _ENGINE_set_default_string+54p
		extrn _ENGINE_get_first:near ; CODE XREF: _ENGINE_register_all_complete+1p
		extrn _ENGINE_get_next:near ; CODE XREF: _ENGINE_register_all_complete+50p
		extrn _ENGINE_register_RSA:near
					; CODE XREF: _ENGINE_register_all_complete+23p
					; _ENGINE_register_complete+12p
		extrn _ENGINE_register_DSA:near
					; CODE XREF: _ENGINE_register_all_complete+29p
					; _ENGINE_register_complete+18p
		extrn _ENGINE_register_ECDH:near
					; CODE XREF: _ENGINE_register_all_complete+35p
					; _ENGINE_register_complete+24p
		extrn _ENGINE_register_ECDSA:near
					; CODE XREF: _ENGINE_register_all_complete+3Bp
					; _ENGINE_register_complete+2Ap
		extrn _ENGINE_register_DH:near
					; CODE XREF: _ENGINE_register_all_complete+2Fp
					; _ENGINE_register_complete+1Ep
		extrn _ENGINE_register_RAND:near
					; CODE XREF: _ENGINE_register_all_complete+41p
					; _ENGINE_register_complete+30p
		extrn _ENGINE_register_ciphers:near
					; CODE XREF: _ENGINE_register_all_complete+17p
					; _ENGINE_register_complete+6p
		extrn _ENGINE_register_digests:near
					; CODE XREF: _ENGINE_register_all_complete+1Dp
					; _ENGINE_register_complete+Cp
		extrn _ENGINE_register_pkey_meths:near
					; CODE XREF: _ENGINE_register_all_complete+47p
					; _ENGINE_register_complete+36p
		extrn _ENGINE_set_default_RSA:near ; CODE XREF:	_ENGINE_set_default+38p
		extrn _ENGINE_set_default_DSA:near ; CODE XREF:	_ENGINE_set_default+4Ap
		extrn _ENGINE_set_default_ECDH:near ; CODE XREF: _ENGINE_set_default+6Ep
		extrn _ENGINE_set_default_ECDSA:near ; CODE XREF: _ENGINE_set_default+80p
		extrn _ENGINE_set_default_DH:near ; CODE XREF: _ENGINE_set_default+5Cp
		extrn _ENGINE_set_default_RAND:near ; CODE XREF: _ENGINE_set_default+92p
		extrn _ENGINE_set_default_ciphers:near ; CODE XREF: _ENGINE_set_default+10p
		extrn _ENGINE_set_default_digests:near ; CODE XREF: _ENGINE_set_default+26p
		extrn _ENGINE_set_default_pkey_meths:near
					; CODE XREF: _ENGINE_set_default+ABp
		extrn _ENGINE_set_default_pkey_asn1_meths:near
					; CODE XREF: _ENGINE_set_default+C4p
		extrn _CONF_parse_list:near ; CODE XREF: _ENGINE_set_default_string+22p
		extrn __chkstk:near	; CODE XREF: _ENGINE_set_default_string+5p


		end
