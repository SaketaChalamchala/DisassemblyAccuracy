;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8184FF33A95F515C45F090DC6F17CB1F
; Input	CRC32 :	A5174AB0

; File Name   :	C:\compspace\Diff\openssl\obj\mdc2test.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_pad1		db 42h			; DATA XREF: _main+72o	_main:loc_13Cr
		db 0E5h, 0Ch, 0D2h
		dd 0BACEBA24h, 2BDD0B76h, 1A2809D4h
_pad2		db 2Eh			; DATA XREF: _main+155o _main:loc_21Cr
		db 46h,	79h, 0B5h
		dd 75CAD9ADh, 0FE7AD835h, 0E2BE33ABh
; `main'::`2'::text
?text@?1??main@@9@9 dd offset ??_C@_0BJ@NDCLICOI@Now?5is?5the?5time?5for?5all?5?$AA@
					; DATA XREF: _main+37r	_main+10Fr
_data		ends			; "Now is the time for all "

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
; COMDAT (pick any)
		public ??_C@_0BJ@NDCLICOI@Now?5is?5the?5time?5for?5all?5?$AA@
; `string'
??_C@_0BJ@NDCLICOI@Now?5is?5the?5time?5for?5all?5?$AA@ db 'Now is the time for all ',0
					; DATA XREF: .data:`main'::`2'::texto
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 2Ch ; ','
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+2Ch+var_4], eax
		push	esi
		push	edi
		lea	eax, [esp+34h+var_2C]
		xor	edi, edi
		push	eax
		call	_EVP_MD_CTX_init
		add	esp, 4
		push	edi
		call	_EVP_mdc2
		push	eax
		lea	eax, [esp+3Ch+var_2C]
		push	eax
		call	_EVP_DigestInit_ex
		mov	edx, ?text@?1??main@@9@9 ; `main'::`2'::text
		add	esp, 0Ch
		mov	ecx, edx
		lea	esi, [ecx+1]

loc_B1:					; CODE XREF: _main+4Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_B1
		sub	ecx, esi
		lea	eax, [esp+34h+var_2C]
		push	ecx
		push	edx
		push	eax
		call	_EVP_DigestUpdate
		push	0
		lea	eax, [esp+44h+var_14]
		push	eax
		lea	eax, [esp+48h+var_2C]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 18h
		lea	ecx, [esp+34h+var_14]
		mov	edx, offset _pad1
		mov	esi, 0Ch
		nop	dword ptr [eax+00h]

loc_EC:					; CODE XREF: _main+8Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_109
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_EC
		push	offset ??_C@_0L@HEPBNLIL@pad1?5?9?5ok?6?$AA@ ; "pad1 - ok\n"
		call	_printf
		jmp	short loc_166
; ---------------------------------------------------------------------------

loc_109:				; CODE XREF: _main+84j
		xor	esi, esi
		nop

loc_10C:				; CODE XREF: _main+B7j
		movzx	eax, [esp+esi+34h+var_14]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_10C
		push	offset ??_C@_0P@ICOGIILP@?5?$DM?9?5generated?6?$AA@ ; "	<- generated\n"
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	dword ptr [eax+eax+00000000h]

loc_13C:				; CODE XREF: _main+E9j
		movzx	eax, _pad1[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_13C
		push	offset ??_C@_0N@NAONKCGF@?5?$DM?9?5correct?6?$AA@ ; " <- correct\n"
		call	_printf
		mov	edi, 1

loc_166:				; CODE XREF: _main+9Bj
		add	esp, 4
		push	0
		call	_EVP_mdc2
		push	eax
		lea	eax, [esp+3Ch+var_2C]
		push	eax
		call	_EVP_DigestInit_ex
		mov	edx, ?text@?1??main@@9@9 ; `main'::`2'::text
		add	esp, 0Ch
		mov	eax, [esp+34h+var_20]
		mov	ecx, edx
		mov	dword ptr [eax+1Ch], 2
		lea	esi, [ecx+1]

loc_194:				; CODE XREF: _main+12Dj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_194
		sub	ecx, esi
		lea	eax, [esp+34h+var_2C]
		push	ecx
		push	edx
		push	eax
		call	_EVP_DigestUpdate
		push	0
		lea	eax, [esp+44h+var_14]
		push	eax
		lea	eax, [esp+48h+var_2C]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 18h
		lea	ecx, [esp+34h+var_14]
		mov	edx, offset _pad2
		mov	esi, 0Ch
		nop

loc_1CC:				; CODE XREF: _main+16Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1E9
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1CC
		push	offset ??_C@_0L@PKHONMGI@pad2?5?9?5ok?6?$AA@ ; "pad2 - ok\n"
		call	_printf
		jmp	short loc_246
; ---------------------------------------------------------------------------

loc_1E9:				; CODE XREF: _main+164j
		xor	esi, esi
		nop

loc_1EC:				; CODE XREF: _main+197j
		movzx	eax, [esp+esi+34h+var_14]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_1EC
		push	offset ??_C@_0P@ICOGIILP@?5?$DM?9?5generated?6?$AA@ ; "	<- generated\n"
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	dword ptr [eax+eax+00000000h]

loc_21C:				; CODE XREF: _main+1C9j
		movzx	eax, _pad2[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_21C
		push	offset ??_C@_0N@NAONKCGF@?5?$DM?9?5correct?6?$AA@ ; " <- correct\n"
		call	_printf
		mov	edi, 1

loc_246:				; CODE XREF: _main+17Bj
		add	esp, 4
		lea	eax, [esp+34h+var_2C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		push	edi		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		db 5Fh,	5Eh
$LN46:					; $LN43
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 260h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+96p	_main+ABp ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 290h
; COMDAT (pick any)
		public ??_C@_04JFFKLGJF@?$CF02X?$AA@
; char `string'[]
??_C@_04JFFKLGJF@?$CF02X?$AA@ db '%02X',0 ; DATA XREF: _main+A6o _main+D8o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 298h
; COMDAT (pick any)
		public ??_C@_0P@ICOGIILP@?5?$DM?9?5generated?6?$AA@
; char `string'[]
??_C@_0P@ICOGIILP@?5?$DM?9?5generated?6?$AA@ db	' <- generated',0Ah,0 ; DATA XREF: _main+B9o
					; _main+199o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A8h
; COMDAT (pick any)
		public ??_C@_0N@NAONKCGF@?5?$DM?9?5correct?6?$AA@
; char `string'[]
??_C@_0N@NAONKCGF@?5?$DM?9?5correct?6?$AA@ db ' <- correct',0Ah,0 ; DATA XREF: _main+EBo
					; _main+1CBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B8h
; COMDAT (pick any)
		public ??_C@_0L@HEPBNLIL@pad1?5?9?5ok?6?$AA@
; char `string'[]
??_C@_0L@HEPBNLIL@pad1?5?9?5ok?6?$AA@ db 'pad1 - ok',0Ah,0 ; DATA XREF: _main+91o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C4h
; COMDAT (pick any)
		public ??_C@_0L@PKHONMGI@pad2?5?9?5ok?6?$AA@
; char `string'[]
??_C@_0L@PKHONMGI@pad2?5?9?5ok?6?$AA@ db 'pad2 - ok',0Ah,0 ; DATA XREF: _main+171o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _printf+7p
					; DATA XREF: _printf+7r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+1EBp
					; DATA XREF: _main+1EBr
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _main+1Ep
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _main+1E2p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _main+32p
					; _main+10Ap
		extrn _EVP_DigestUpdate:near ; CODE XREF: _main+55p _main+138p
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _main+66p
					; _main+149p
		extrn _EVP_mdc2:near	; CODE XREF: _main+27p	_main+FFp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
