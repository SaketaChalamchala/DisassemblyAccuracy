;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8E6C395F33DF019804D58D107CD21B0B
; Input	CRC32 :	B70A889F

; File Name   :	C:\compspace\Diff\openssl\obj\tasn_prn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		public _default_pctx
_default_pctx	dd 1, 4	dup(0)		; DATA XREF: _ASN1_item_print+4o
; `asn1_print_fsname'::`2'::spaces
?spaces@?1??asn1_print_fsname@@9@9 db '                    ',0
					; DATA XREF: _asn1_print_fsname+12o
					; _asn1_print_fsname+2Co
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_free
_ASN1_PCTX_free	proc near
		jmp	_CRYPTO_free
_ASN1_PCTX_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_get_cert_flags
_ASN1_PCTX_get_cert_flags proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
_ASN1_PCTX_get_cert_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_get_flags
_ASN1_PCTX_get_flags proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
_ASN1_PCTX_get_flags endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_get_nm_flags
_ASN1_PCTX_get_nm_flags	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		retn
_ASN1_PCTX_get_nm_flags	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_get_oid_flags
_ASN1_PCTX_get_oid_flags proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		retn
_ASN1_PCTX_get_oid_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_get_str_flags
_ASN1_PCTX_get_str_flags proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+10h]
		retn
_ASN1_PCTX_get_str_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_new
_ASN1_PCTX_new	proc near
		push	57h ; 'W'
		push	offset ??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@ ; ".\\crypto\\asn1\\tasn_prn.c"
		push	14h
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_8C
		push	59h ; 'Y'
		push	offset ??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@ ; ".\\crypto\\asn1\\tasn_prn.c"
		push	41h ; 'A'
		push	0CDh ; 'Í'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_8C:					; CODE XREF: _ASN1_PCTX_new+13j
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		retn
_ASN1_PCTX_new	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_set_cert_flags
_ASN1_PCTX_set_cert_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+8], ecx
		retn
_ASN1_PCTX_set_cert_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_set_flags
_ASN1_PCTX_set_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax], ecx
		retn
_ASN1_PCTX_set_flags endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_set_nm_flags
_ASN1_PCTX_set_nm_flags	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+4], ecx
		retn
_ASN1_PCTX_set_nm_flags	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_set_oid_flags
_ASN1_PCTX_set_oid_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+0Ch], ecx
		retn
_ASN1_PCTX_set_oid_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_PCTX_set_str_flags
_ASN1_PCTX_set_str_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+10h], ecx
		retn
_ASN1_PCTX_set_str_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_print
_ASN1_item_print proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		mov	ecx, offset _default_pctx
		mov	edx, [esp+arg_C]
		test	eax, eax
		cmovnz	ecx, eax
		test	dword ptr [ecx], 100h
		jz	short loc_10A
		xor	eax, eax
		jmp	short loc_10D
; ---------------------------------------------------------------------------

loc_10A:				; CODE XREF: _ASN1_item_print+18j
		mov	eax, [edx+18h]

loc_10D:				; CODE XREF: _ASN1_item_print+1Cj
		push	ecx
		push	0
		push	eax
		push	0
		push	edx
		push	[esp+14h+arg_8]
		lea	eax, [esp+18h+arg_4]
		push	eax
		push	[esp+1Ch+arg_0]
		call	_asn1_item_print_ctx
		add	esp, 20h
		retn
_ASN1_item_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_item_print_ctx proc near		; CODE XREF: _ASN1_item_print+35p
					; _asn1_template_print_ctx+FAp	...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+18h+arg_1C]
		push	ebp
		push	esi
		mov	esi, [esp+20h+arg_C]
		push	edi
		mov	edi, [esp+24h+arg_0]
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jz	short loc_16C
		cmp	dword ptr [ecx+10h], 0
		jz	short loc_16C
		mov	eax, [esp+24h+arg_8]
		mov	[esp+24h+var_C], edi
		mov	[esp+24h+var_8], eax
		mov	[esp+24h+var_4], ebx
		mov	ecx, [ecx+10h]
		mov	[esp+24h+arg_C], ecx
		jmp	short loc_178
; ---------------------------------------------------------------------------

loc_16C:				; CODE XREF: _asn1_item_print_ctx+1Fj
					; _asn1_item_print_ctx+25j
		mov	eax, [esp+24h+arg_8]
		mov	[esp+24h+arg_C], 0

loc_178:				; CODE XREF: _asn1_item_print_ctx+3Ej
		mov	ebp, [esp+24h+arg_4]
		cmp	dword ptr [ebp+0], 0
		jnz	short loc_1CC
		test	byte ptr [ebx],	1
		jz	short loc_1BF
		cmp	[esp+24h+arg_18], 0
		jnz	short loc_1A9
		push	ebx
		push	[esp+28h+arg_14]
		push	[esp+2Ch+arg_10]
		push	eax
		push	edi
		call	_asn1_print_fsname
		add	esp, 14h
		test	eax, eax
		jz	loc_461

loc_1A9:				; CODE XREF: _asn1_item_print_ctx+60j
		push	offset ??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@ ;	"<ABSENT>\n"

loc_1AE:				; CODE XREF: _asn1_item_print_ctx+150j
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_461

loc_1BF:				; CODE XREF: _asn1_item_print_ctx+59j
					; _asn1_item_print_ctx+C9j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1CC:				; CODE XREF: _asn1_item_print_ctx+54j
		movsx	ecx, byte ptr [esi]
		cmp	ecx, 6		; switch 7 cases
		ja	$LN47		; jumptable 000001D8 default case
		jmp	ds:$LN60[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN13:					; CODE XREF: _asn1_item_print_ctx+ACj
					; DATA XREF: .text$mn:$LN60o
		mov	ecx, [esi+8]	; jumptable 000001D8 case 0
		test	ecx, ecx
		jz	short $LN14	; jumptable 000001D8 case 5
		push	ebx
		push	ecx
		push	eax
		push	ebp
		push	edi
		call	_asn1_template_print_ctx
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1BF
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _asn1_item_print_ctx+ACj
					; _asn1_item_print_ctx+B8j
					; DATA XREF: ...
		push	ebx		; jumptable 000001D8 case 5
		push	[esp+28h+arg_14]
		push	[esp+2Ch+arg_10]
		push	eax
		push	esi
		push	ebp
		push	edi
		call	_asn1_primitive_print
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1BF
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _asn1_item_print_ctx+ACj
					; DATA XREF: .text$mn:$LN60o
		cmp	[esp+24h+arg_18], 0 ; jumptable	000001D8 case 4
		mov	ecx, [esp+24h+arg_14]
		jnz	short loc_247
		push	ebx
		push	ecx
		push	[esp+2Ch+arg_10]
		push	eax
		push	edi
		call	_asn1_print_fsname
		add	esp, 14h
		test	eax, eax
		jz	loc_461
		mov	ecx, [esp+24h+arg_14]

loc_247:				; CODE XREF: _asn1_item_print_ctx+FDj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_281
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_281
		push	ebx
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+2Ch+arg_8]
		push	ebp
		push	edi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	loc_461
		cmp	eax, 2
		jnz	loc_1BF
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		jmp	loc_1AE
; ---------------------------------------------------------------------------

loc_281:				; CODE XREF: _asn1_item_print_ctx+120j
					; _asn1_item_print_ctx+127j
		test	ecx, ecx
		jz	loc_1BF
		push	ecx
		push	offset ??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@ ; ":EXTERNAL TYPE %s\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jg	loc_1BF
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

$LN25:					; CODE XREF: _asn1_item_print_ctx+ACj
					; DATA XREF: .text$mn:$LN60o
		push	esi		; jumptable 000001D8 case 2
		push	ebp
		call	_asn1_get_choice_selector
		add	esp, 8
		test	eax, eax
		js	short loc_2ED
		cmp	eax, [esi+0Ch]
		jge	short loc_2ED
		lea	ecx, [eax+eax*4]
		mov	eax, [esi+8]
		lea	esi, [eax+ecx*4]
		push	esi
		push	ebp
		call	_asn1_get_field_ptr
		push	ebx
		push	esi
		push	[esp+34h+arg_8]
		push	eax
		push	edi
		call	_asn1_template_print_ctx
		add	esp, 1Ch
		test	eax, eax
		jnz	loc_1BF
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_2ED:				; CODE XREF: _asn1_item_print_ctx+18Aj
					; _asn1_item_print_ctx+18Fj
		push	eax
		push	offset ??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@ ; "ERROR: selector [%d] invalid\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

$LN30:					; CODE XREF: _asn1_item_print_ctx+ACj
					; DATA XREF: .text$mn:$LN60o
		cmp	[esp+24h+arg_18], 0 ; jumptable	000001D8 cases 1,6
		mov	ecx, [esp+24h+arg_14]
		mov	edx, [esp+24h+arg_10]
		jnz	short loc_339
		push	ebx
		push	ecx
		push	edx
		push	eax
		push	edi
		call	_asn1_print_fsname
		add	esp, 14h
		test	eax, eax
		jz	loc_461
		mov	ecx, [esp+24h+arg_14]
		mov	edx, [esp+24h+arg_10]

loc_339:				; CODE XREF: _asn1_item_print_ctx+1EEj
		test	edx, edx
		jnz	short loc_341
		test	ecx, ecx
		jz	short loc_378

loc_341:				; CODE XREF: _asn1_item_print_ctx+20Fj
		test	byte ptr [ebx],	2
		jz	short loc_362
		push	offset ??_C@_03NMMCOAOG@?5?$HL?6?$AA@ ;	`string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jg	short loc_378
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_362:				; CODE XREF: _asn1_item_print_ctx+218j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_461

loc_378:				; CODE XREF: _asn1_item_print_ctx+213j
					; _asn1_item_print_ctx+22Aj
		mov	eax, [esp+24h+arg_C]
		test	eax, eax
		jz	short loc_39F
		lea	ecx, [esp+24h+var_C]
		push	ecx
		push	esi
		push	ebp
		push	8
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	loc_461
		cmp	eax, 2
		jz	loc_1BF

loc_39F:				; CODE XREF: _asn1_item_print_ctx+252j
		cmp	dword ptr [esi+0Ch], 0
		mov	ecx, [esi+8]
		mov	[esp+24h+arg_4], 0
		mov	[esp+24h+var_14], ecx
		jle	short loc_407

loc_3B4:				; CODE XREF: _asn1_item_print_ctx+2D9j
		push	1
		push	ecx
		push	ebp
		call	_asn1_do_adb
		add	esp, 0Ch
		mov	[esp+24h+var_10], eax
		test	eax, eax
		jz	loc_461
		push	eax
		push	ebp
		call	_asn1_get_field_ptr
		mov	ecx, [esp+2Ch+arg_8]
		push	ebx
		push	[esp+30h+var_10]
		add	ecx, 2
		push	ecx
		push	eax
		push	edi
		call	_asn1_template_print_ctx
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_461
		mov	eax, [esp+24h+arg_4]
		mov	ecx, [esp+24h+var_14]
		inc	eax
		add	ecx, 14h
		mov	[esp+24h+arg_4], eax
		mov	[esp+24h+var_14], ecx
		cmp	eax, [esi+0Ch]
		jl	short loc_3B4

loc_407:				; CODE XREF: _asn1_item_print_ctx+286j
		test	byte ptr [ebx],	2
		jz	short loc_427
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+28h+arg_8]
		push	offset ??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@ ; "%*s}\n"
		push	edi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		js	short loc_461

loc_427:				; CODE XREF: _asn1_item_print_ctx+2DEj
		mov	eax, [esp+24h+arg_C]
		test	eax, eax
		jz	loc_1BF
		lea	ecx, [esp+24h+var_C]
		push	ecx
		push	esi
		push	ebp
		push	9
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_461
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

$LN47:					; CODE XREF: _asn1_item_print_ctx+A6j
					; _asn1_item_print_ctx+ACj
					; DATA XREF: ...
		push	ecx		; jumptable 000001D8 default case
		push	offset ??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@ ; "Unprocessed type %d\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch

loc_461:				; CODE XREF: _asn1_item_print_ctx+77j
					; _asn1_item_print_ctx+8Dj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
_asn1_item_print_ctx endp

; ---------------------------------------------------------------------------
		align 4
$LN60		dd offset $LN13		; DATA XREF: _asn1_item_print_ctx+ACr
		dd offset $LN30		; jump table for switch	statement
		dd offset $LN25
		dd offset $LN47
		dd offset $LN18
		dd offset $LN14
		dd offset $LN30
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 488h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_primitive_print proc near		; CODE XREF: _asn1_item_print_ctx+E0p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_18]
		mov	ebx, 1
		push	esi
		mov	esi, [esp+14h+arg_8]
		push	edi
		mov	edi, [esp+18h+arg_0]
		push	ebp
		push	[esp+1Ch+arg_14]
		mov	eax, [esi+10h]
		push	[esp+20h+arg_10]
		mov	[esp+24h+var_4], eax
		push	[esp+24h+arg_C]
		push	edi
		call	_asn1_print_fsname
		add	esp, 14h
		test	eax, eax
		jnz	short loc_4D2

loc_4C8:				; CODE XREF: _asn1_primitive_print+10Ej
					; _asn1_primitive_print+124j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4D2:				; CODE XREF: _asn1_primitive_print+3Ej
		mov	eax, [esp+18h+var_4]
		test	eax, eax
		jz	short loc_4FA
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	short loc_4FA
		mov	ecx, [esp+18h+arg_C]
		push	ebp
		push	ecx
		push	esi
		push	[esp+24h+arg_4]
		push	edi
		call	eax
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4FA:				; CODE XREF: _asn1_primitive_print+50j
					; _asn1_primitive_print+57j
		mov	edx, [esp+18h+arg_4]
		mov	eax, [esp+18h+arg_8]
		mov	[esp+18h+var_4], edx
		mov	esi, [edx]
		cmp	byte ptr [eax],	5
		jnz	short loc_517
		mov	eax, [esi+4]
		and	eax, 0FFFFFEFFh
		jmp	short loc_51A
; ---------------------------------------------------------------------------

loc_517:				; CODE XREF: _asn1_primitive_print+83j
		mov	eax, [eax+4]

loc_51A:				; CODE XREF: _asn1_primitive_print+8Dj
		mov	[esp+18h+var_8], eax
		cmp	eax, 0FFFFFFFCh
		jnz	short loc_549
		test	byte ptr [ebp+0], 10h
		lea	ecx, [esi+4]
		mov	eax, [esi]
		mov	esi, [ecx]
		mov	[esp+18h+var_8], eax
		mov	[esp+18h+var_4], ecx
		jnz	short loc_560
		push	eax
		call	_ASN1_tag2str
		mov	ecx, eax
		add	esp, 4
		mov	eax, [esp+18h+var_8]
		jmp	short loc_562
; ---------------------------------------------------------------------------

loc_549:				; CODE XREF: _asn1_primitive_print+99j
		test	byte ptr [ebp+0], 8
		jz	short loc_560
		push	eax
		call	_ASN1_tag2str
		mov	ecx, eax
		add	esp, 4
		mov	eax, [esp+18h+var_8]
		jmp	short loc_562
; ---------------------------------------------------------------------------

loc_560:				; CODE XREF: _asn1_primitive_print+AEj
					; _asn1_primitive_print+C5j
		xor	ecx, ecx

loc_562:				; CODE XREF: _asn1_primitive_print+BFj
					; _asn1_primitive_print+D6j
		cmp	eax, 5
		jnz	short loc_586
		push	offset ??_C@_05NJDBAOFA@NULL?6?$AA@ ; "NULL\n"
		push	edi
		call	_BIO_puts
		add	esp, 8
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_586:				; CODE XREF: _asn1_primitive_print+DDj
		test	ecx, ecx
		jz	short loc_5B6
		push	ecx
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_4C8
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_4C8
		mov	eax, [esp+18h+var_8]

loc_5B6:				; CODE XREF: _asn1_primitive_print+100j
		add	eax, 3		; switch 28 cases
		cmp	eax, 1Bh
		ja	$LN29		; jumptable 000005C9 default case
		movzx	eax, ds:$LN36[eax]
		jmp	ds:$LN44[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN19:					; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		mov	eax, [esp+18h+var_4] ; jumptable 000005C9 case 1
		mov	eax, [eax]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_5E2
		mov	esi, [esp+18h+arg_8]
		mov	eax, [esi+14h]

loc_5E2:				; CODE XREF: _asn1_primitive_print+151j
		push	ebp
		push	eax
		push	edi
		call	_asn1_print_boolean_ctx
		jmp	loc_692
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		push	esi		; jumptable 000005C9 cases 2,10
		push	0
		call	_i2s_ASN1_INTEGER
		mov	esi, eax
		push	esi
		push	edi
		call	_BIO_puts
		xor	ecx, ecx
		test	eax, eax
		push	esi
		cmovle	ebx, ecx
		call	_CRYPTO_free
		add	esp, 14h
		jmp	loc_697
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		push	esi		; jumptable 000005C9 case 23
		push	edi
		call	_ASN1_UTCTIME_print
		add	esp, 8
		jmp	short loc_695
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		push	esi		; jumptable 000005C9 case 24
		push	edi
		call	_ASN1_GENERALIZEDTIME_print
		add	esp, 8
		jmp	short loc_695
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		mov	eax, [esp+18h+var_4] ; jumptable 000005C9 case 6
		push	ebp
		push	dword ptr [eax]
		push	edi
		call	_asn1_print_oid_ctx
		jmp	short loc_692
; ---------------------------------------------------------------------------

$LN25_0:				; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		mov	ecx, [esp+18h+arg_C] ; jumptable 000005C9 cases	3,4
		push	ebp
		push	ecx
		push	esi
		push	edi
		call	_asn1_print_obstring_ctx
		add	esp, 10h
		mov	ebx, eax
		xor	eax, eax
		jmp	short loc_69C
; ---------------------------------------------------------------------------

$LN26:					; CODE XREF: _asn1_primitive_print+141j
					; DATA XREF: .text$mn:$LN44o
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; jumptable 000005C9 cases -3,16,17
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_4C8
		mov	ecx, [esp+18h+arg_C]
		push	0
		push	ecx
		push	dword ptr [esi]
		push	dword ptr [esi+8]
		push	edi
		call	_ASN1_parse_dump
		xor	ecx, ecx
		add	esp, 14h
		test	eax, eax
		cmovle	ebx, ecx
		xor	eax, eax
		jmp	short loc_69C
; ---------------------------------------------------------------------------

$LN29:					; CODE XREF: _asn1_primitive_print+134j
					; _asn1_primitive_print+141j
					; DATA XREF: ...
		push	dword ptr [ebp+10h] ; jumptable	000005C9 default case
		push	esi
		push	edi
		call	_ASN1_STRING_print_ex

loc_692:				; CODE XREF: _asn1_primitive_print+162j
					; _asn1_primitive_print+1B2j
		add	esp, 0Ch

loc_695:				; CODE XREF: _asn1_primitive_print+197j
					; _asn1_primitive_print+1A3j
		mov	ebx, eax

loc_697:				; CODE XREF: _asn1_primitive_print+188j
		mov	eax, 1

loc_69C:				; CODE XREF: _asn1_primitive_print+1C8j
					; _asn1_primitive_print+1FEj
		test	ebx, ebx
		jz	loc_4C8
		test	eax, eax
		jz	short loc_6BE
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_4C8

loc_6BE:				; CODE XREF: _asn1_primitive_print+21Ej
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
_asn1_primitive_print endp

; ---------------------------------------------------------------------------
		align 4
$LN44		dd offset $LN26		; DATA XREF: _asn1_primitive_print+141r
		dd offset $LN19		; jump table for switch	statement
		dd offset $LN21
		dd offset $LN25_0
		dd offset $LN24
		dd offset $LN22
		dd offset $LN23
		dd offset $LN29
$LN36		db	0,     7,     7,     7 ; DATA XREF: _asn1_primitive_print+13Ar
		db	1,     2,     3,     3 ; indirect table	for switch statement
		db	7,     4,     7,     7
		db	7,     2,     7,     7
		db	7,     7,     7,     0
		db	0,     7,     7,     7
		db	7,     7,     5,     6
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 708h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_print_boolean_ctx	proc near	; CODE XREF: _asn1_primitive_print+15Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_722
		test	ecx, ecx
		mov	eax, offset ??_C@_04HCDDPBNL@TRUE?$AA@ ; "TRUE"
		mov	edx, offset ??_C@_05MAJJAKPI@FALSE?$AA@	; "FALSE"
		cmovz	eax, edx
		jmp	short loc_727
; ---------------------------------------------------------------------------

loc_722:				; CODE XREF: _asn1_print_boolean_ctx+7j
		mov	eax, offset ??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@	; "BOOL	ABSENT"

loc_727:				; CODE XREF: _asn1_print_boolean_ctx+18j
		push	eax
		push	[esp+4+arg_0]
		call	_BIO_puts
		xor	ecx, ecx
		add	esp, 8
		test	eax, eax
		setnle	cl
		mov	eax, ecx
		retn
_asn1_print_boolean_ctx	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 740h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_print_fsname proc	near		; CODE XREF: _asn1_item_print_ctx+6Dp
					; _asn1_item_print_ctx+107p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	esi, 14h
		jle	short loc_76B
		nop

loc_750:				; CODE XREF: _asn1_print_fsname+29j
		push	14h
		push	offset ?spaces@?1??asn1_print_fsname@@9@9 ; "			 "
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 14h
		jnz	short loc_7B0
		sub	esi, eax
		cmp	esi, eax
		jg	short loc_750

loc_76B:				; CODE XREF: _asn1_print_fsname+Dj
		push	esi
		push	offset ?spaces@?1??asn1_print_fsname@@9@9 ; "			 "
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	short loc_7B0
		mov	eax, [esp+8+arg_10]
		mov	ecx, 0
		mov	esi, [esp+8+arg_8]
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		mov	eax, [eax]
		test	eax, 100h
		cmovnz	ebx, ecx
		test	al, 40h
		mov	eax, ecx
		cmovnz	esi, eax
		test	ebx, ebx
		jnz	short loc_7B5
		test	esi, esi
		jnz	short loc_7B9
		pop	ebx
		pop	edi
		lea	eax, [ecx+1]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7B0:				; CODE XREF: _asn1_print_fsname+23j
					; _asn1_print_fsname+3Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7B5:				; CODE XREF: _asn1_print_fsname+63j
		test	esi, esi
		jz	short loc_7C7

loc_7B9:				; CODE XREF: _asn1_print_fsname+67j
		push	esi
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	short loc_7F5

loc_7C7:				; CODE XREF: _asn1_print_fsname+77j
		test	ebx, ebx
		jz	short loc_7FB
		push	ebx
		test	esi, esi
		jz	short loc_7E8
		push	offset ??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@ ; " (%s)"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_7FB
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7E8:				; CODE XREF: _asn1_print_fsname+8Ej
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jg	short loc_7FB

loc_7F5:				; CODE XREF: _asn1_print_fsname+85j
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7FB:				; CODE XREF: _asn1_print_fsname+89j
					; _asn1_print_fsname+A0j ...
		push	2
		push	offset ??_C@_02LMMGGCAJ@?3?5?$AA@ ; `string'
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		xor	ecx, ecx
		cmp	eax, 2
		setz	cl
		pop	ebx
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
_asn1_print_fsname endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 81Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_print_integer_ctx	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_4]
		mov	edi, 1
		push	0
		call	_i2s_ASN1_INTEGER
		mov	esi, eax
		push	esi
		push	[esp+14h+arg_0]
		call	_BIO_puts
		xor	ecx, ecx
		test	eax, eax
		push	esi
		cmovle	edi, ecx
		call	_CRYPTO_free
		add	esp, 14h
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_asn1_print_integer_ctx	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 850h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_print_obstring_ctx proc near	; CODE XREF: _asn1_primitive_print+1BCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	dword ptr [esi+4], 3
		jnz	short loc_87E
		mov	eax, [esi+0Ch]
		and	eax, 7
		push	eax
		push	offset ??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@	; " (%ld unused	bits)\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_895

loc_879:				; CODE XREF: _asn1_print_obstring_ctx+62j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_87E:				; CODE XREF: _asn1_print_obstring_ctx+Ej
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jg	short loc_895
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_895:				; CODE XREF: _asn1_print_obstring_ctx+27j
					; _asn1_print_obstring_ctx+3Ej
		mov	ecx, [esi]
		test	ecx, ecx
		jle	short loc_8B4
		mov	eax, [esp+8+arg_8]
		add	eax, 2
		push	eax
		push	ecx
		push	dword ptr [esi+8]
		push	edi
		call	_BIO_dump_indent
		add	esp, 10h
		test	eax, eax
		jle	short loc_879

loc_8B4:				; CODE XREF: _asn1_print_obstring_ctx+49j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_asn1_print_obstring_ctx endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_print_oid_ctx proc near		; CODE XREF: _asn1_primitive_print+1ADp

var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 54h ; 'T'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		push	ebx
		mov	ebx, [esp+58h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+60h+arg_4]
		push	edi
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2ln
		test	eax, eax
		mov	esi, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		push	1
		push	edi
		cmovnz	esi, eax
		lea	eax, [esp+70h+var_54]
		push	50h ; 'P'
		push	eax
		call	_OBJ_obj2txt
		lea	eax, [esp+78h+var_54]
		push	eax
		push	esi
		push	offset ??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@ ; "%s	(%s)"
		push	ebx
		call	_BIO_printf
		add	esp, 28h
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		mov	eax, ecx
		mov	ecx, [esp+5Ch+var_4]
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
_asn1_print_oid_ctx endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 930h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_template_print_ctx
_asn1_template_print_ctx proc near	; CODE XREF: _asn1_item_print_ctx+BFp
					; _asn1_item_print_ctx+1A9p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_10]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		test	byte ptr [ebx],	80h
		mov	eax, [ebp+0]
		mov	[esp+8+arg_C], eax
		jz	short loc_950
		mov	eax, [ebp+10h]
		call	eax
		mov	edx, [eax+18h]
		jmp	short loc_952
; ---------------------------------------------------------------------------

loc_950:				; CODE XREF: _asn1_template_print_ctx+14j
		xor	edx, edx

loc_952:				; CODE XREF: _asn1_template_print_ctx+1Ej
		mov	ecx, [ebx]
		test	cl, 40h
		jz	short loc_95D
		xor	eax, eax
		jmp	short loc_960
; ---------------------------------------------------------------------------

loc_95D:				; CODE XREF: _asn1_template_print_ctx+27j
		mov	eax, [ebp+0Ch]

loc_960:				; CODE XREF: _asn1_template_print_ctx+2Bj
		test	byte ptr [esp+8+arg_C],	6
		jz	loc_A9D
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_9D2
		test	cl, 4
		jz	short loc_9B0
		push	dword ptr [ebp+0Ch]
		test	byte ptr [esp+10h+arg_C], 2
		mov	ecx, offset ??_C@_08POLPFBMC@SEQUENCE?$AA@ ; "SEQUENCE"
		mov	eax, offset ??_C@_03KPIFFHNE@SET?$AA@ ;	`string'
		cmovz	eax, ecx
		push	eax
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+18h+arg_8]
		push	offset ??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@	; "%*s%s OF %s {\n"
		push	edi
		call	_BIO_printf
		add	esp, 18h
		test	eax, eax
		jg	short loc_9D2
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_9B0:				; CODE XREF: _asn1_template_print_ctx+47j
		push	eax
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+14h+arg_8]
		push	offset ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@	; "%*s%s:\n"
		push	edi
		call	_BIO_printf
		add	esp, 14h
		test	eax, eax
		jg	short loc_9D2
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_9D2:				; CODE XREF: _asn1_template_print_ctx+42j
					; _asn1_template_print_ctx+78j	...
		mov	eax, [esp+0Ch+arg_4]
		push	esi
		xor	esi, esi
		mov	ebx, [eax]
		push	ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_A48

loc_9E8:				; CODE XREF: _asn1_template_print_ctx+112j
		test	esi, esi
		jle	short loc_9FE
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	short loc_A67

loc_9FE:				; CODE XREF: _asn1_template_print_ctx+BAj
		push	esi
		push	ebx
		call	_sk_value
		add	esp, 8
		mov	[esp+10h+arg_C], eax
		mov	eax, [ebp+10h]
		push	[esp+10h+arg_10]
		push	1
		push	0
		push	0
		call	eax
		push	eax
		mov	eax, [esp+24h+arg_8]
		add	eax, 2
		push	eax
		lea	eax, [esp+28h+arg_C]
		push	eax
		push	edi
		call	_asn1_item_print_ctx
		add	esp, 20h
		test	eax, eax
		jz	short loc_A67
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_9E8
		test	esi, esi
		jnz	short loc_A6E

loc_A48:				; CODE XREF: _asn1_template_print_ctx+B6j
		mov	ebx, [esp+10h+arg_8]
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		lea	eax, [ebx+2]
		push	eax
		push	offset ??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@ ; "%*s<EMPTY>\n"
		push	edi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jg	short loc_A72

loc_A67:				; CODE XREF: _asn1_template_print_ctx+CCj
					; _asn1_template_print_ctx+104j ...
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A6E:				; CODE XREF: _asn1_template_print_ctx+116j
		mov	ebx, [esp+10h+arg_8]

loc_A72:				; CODE XREF: _asn1_template_print_ctx+135j
		mov	eax, [esp+10h+arg_10]
		test	byte ptr [eax],	2
		jz	short loc_A93
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebx
		push	offset ??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@ ; "%*s}\n"
		push	edi
		call	_BIO_printf
		add	esp, 10h
		test	eax, eax
		jle	short loc_A67

loc_A93:				; CODE XREF: _asn1_template_print_ctx+149j
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A9D:				; CODE XREF: _asn1_template_print_ctx+35j
		push	ebx
		push	0
		push	edx
		push	eax
		mov	eax, [ebp+10h]
		call	eax
		push	eax
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	[esp+24h+arg_0]
		call	_asn1_item_print_ctx
		add	esp, 20h
		pop	ebp
		pop	ebx
		retn
_asn1_template_print_ctx endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AC0h
; COMDAT (pick any)
		public ??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@
; `string'
??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@ db '.\crypto\asn1\tasn_prn.c',0
					; DATA XREF: _ASN1_PCTX_new+2o
					; _ASN1_PCTX_new+17o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ADCh
; COMDAT (pick any)
		public ??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@
; `string'
??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@ db '<ABSENT>',0Ah,0
					; DATA XREF: _asn1_item_print_ctx:loc_1A9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0AE8h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _asn1_item_print_ctx+12Ao
					; _asn1_item_print_ctx+2E0o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AECh
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _asn1_item_print_ctx+14Bo
					; _asn1_item_print_ctx:loc_362o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AF0h
; COMDAT (pick any)
		public ??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@
; `string'
??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@ db ':EXTERNAL TYPE %s',0Ah,0
					; DATA XREF: _asn1_item_print_ctx+15Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B04h
; COMDAT (pick any)
		public ??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@
; `string'
??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@ db 'ERROR: selector [%d] invalid',0Ah,0
					; DATA XREF: _asn1_item_print_ctx+1C2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B24h
; COMDAT (pick any)
		public ??_C@_03NMMCOAOG@?5?$HL?6?$AA@
; `string'
??_C@_03NMMCOAOG@?5?$HL?6?$AA@ dd 0A7B20h ; DATA XREF: _asn1_item_print_ctx+21Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B28h
; COMDAT (pick any)
		public ??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@
; `string'
??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@ db '%*s}',0Ah,0 ; DATA XREF: _asn1_item_print_ctx+2E9o
					; _asn1_template_print_ctx+151o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B30h
; COMDAT (pick any)
		public ??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@
; `string'
??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@ db 'Unprocessed type %d',0Ah,0
					; DATA XREF: _asn1_item_print_ctx+327o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B48h
; COMDAT (pick any)
		public ??_C@_03KPIFFHNE@SET?$AA@
; `string'
??_C@_03KPIFFHNE@SET?$AA@ dd 544553h	; DATA XREF: _asn1_template_print_ctx+56o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4Ch
; COMDAT (pick any)
		public ??_C@_08POLPFBMC@SEQUENCE?$AA@
; `string'
??_C@_08POLPFBMC@SEQUENCE?$AA@ db 'SEQUENCE',0 ; DATA XREF: _asn1_template_print_ctx+51o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B58h
; COMDAT (pick any)
		public ??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@
; `string'
??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@ db '%*s%s OF %s {',0Ah,0
					; DATA XREF: _asn1_template_print_ctx+68o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B68h
; COMDAT (pick any)
		public ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@
; `string'
??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@ db '%*s%s:',0Ah,0
					; DATA XREF: _asn1_template_print_ctx+8Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B70h
; COMDAT (pick any)
		public ??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@
; `string'
??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@	db '%*s<EMPTY>',0Ah,0
					; DATA XREF: _asn1_template_print_ctx+125o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B7Ch
; COMDAT (pick any)
		public ??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@
; `string'
??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@ db ' (%s)',0 ; DATA XREF: _asn1_print_fsname+90o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B84h
; COMDAT (pick any)
		public ??_C@_02LMMGGCAJ@?3?5?$AA@
; `string'
??_C@_02LMMGGCAJ@?3?5?$AA@ db 3Ah, 20h,	0 ; DATA XREF: _asn1_print_fsname+BDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B88h
; COMDAT (pick any)
		public ??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@
; `string'
??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@ db 'BOOL ABSENT',0
					; DATA XREF: _asn1_print_boolean_ctx:loc_722o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B94h
; COMDAT (pick any)
		public ??_C@_05MAJJAKPI@FALSE?$AA@
; `string'
??_C@_05MAJJAKPI@FALSE?$AA@ db 'FALSE',0 ; DATA XREF: _asn1_print_boolean_ctx+10o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B9Ch
; COMDAT (pick any)
		public ??_C@_04HCDDPBNL@TRUE?$AA@
; `string'
??_C@_04HCDDPBNL@TRUE?$AA@ db 'TRUE',0  ; DATA XREF: _asn1_print_boolean_ctx+Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BA4h
; COMDAT (pick any)
		public ??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@
; `string'
??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@ db '%s (%s)',0
					; DATA XREF: _asn1_print_oid_ctx+4Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BACh
; COMDAT (pick any)
		public ??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@
; `string'
??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@ db ' (%ld unused bits)',0Ah,0
					; DATA XREF: _asn1_print_obstring_ctx+17o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BC0h
; COMDAT (pick any)
		public ??_C@_05NJDBAOFA@NULL?6?$AA@
; `string'
??_C@_05NJDBAOFA@NULL?6?$AA@ db	'NULL',0Ah,0 ; DATA XREF: _asn1_primitive_print+DFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BC8h
; COMDAT (pick any)
		public ??_C@_01JLIPDDHJ@?3?$AA@
; `string'
??_C@_01JLIPDDHJ@?3?$AA@ db 3Ah, 0	; DATA XREF: _asn1_primitive_print+114o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _asn1_template_print_ctx+ACp
					; _asn1_template_print_ctx+108p
		extrn _sk_value:near	; CODE XREF: _asn1_template_print_ctx+D0p
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_PCTX_new+9p
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_PCTX_freej
					; _asn1_primitive_print+180p ...
		extrn _BIO_write:near	; CODE XREF: _asn1_print_fsname+18p
					; _asn1_print_fsname+32p ...
		extrn _BIO_puts:near	; CODE XREF: _asn1_item_print_ctx+83p
					; _asn1_item_print_ctx+220p ...
		extrn _BIO_dump_indent:near ; CODE XREF: _asn1_print_obstring_ctx+58p
		extrn _BIO_printf:near	; CODE XREF: _asn1_item_print_ctx+164p
					; _asn1_item_print_ctx+1C8p ...
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_PCTX_new+25p
		extrn _ASN1_UTCTIME_print:near ; CODE XREF: _asn1_primitive_print+18Fp
		extrn _ASN1_GENERALIZEDTIME_print:near
					; CODE XREF: _asn1_primitive_print+19Bp
		extrn _ASN1_STRING_print_ex:near ; CODE	XREF: _asn1_primitive_print+205p
		extrn _ASN1_parse_dump:near ; CODE XREF: _asn1_primitive_print+1EDp
		extrn _ASN1_tag2str:near ; CODE	XREF: _asn1_primitive_print+B1p
					; _asn1_primitive_print+C8p
		extrn _asn1_get_choice_selector:near ; CODE XREF: _asn1_item_print_ctx+180p
		extrn _asn1_get_field_ptr:near ; CODE XREF: _asn1_item_print_ctx+19Cp
					; _asn1_item_print_ctx+2A2p
		extrn _asn1_do_adb:near	; CODE XREF: _asn1_item_print_ctx+28Cp
		extrn _OBJ_nid2ln:near	; CODE XREF: _asn1_print_oid_ctx+27p
		extrn _OBJ_obj2nid:near	; CODE XREF: _asn1_print_oid_ctx+21p
		extrn _OBJ_obj2txt:near	; CODE XREF: _asn1_print_oid_ctx+40p
		extrn _i2s_ASN1_INTEGER:near ; CODE XREF: _asn1_primitive_print+16Ap
					; _asn1_print_integer_ctx+Dp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _asn1_print_oid_ctx+6Bp
		extrn __chkstk:near	; CODE XREF: _asn1_item_print_ctx+5p
					; _asn1_primitive_print+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _asn1_print_oid_ctx+Ar


		end
