;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CA858B0C492C287643A5E563C92461CE
; Input	CRC32 :	6750B767

; File Name   :	C:\compspace\Diff\openssl\obj\bio_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_callback_ctrl
_BIO_callback_ctrl proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D:					; CODE XREF: _BIO_callback_ctrl+7j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_68
		cmp	dword ptr [eax+24h], 0
		jz	short loc_68
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	edi
		mov	edi, [esi+4]
		test	edi, edi
		jz	short loc_3C
		push	1
		push	0
		push	ebx
		lea	eax, [esp+18h+arg_8]
		push	eax
		push	6
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_64

loc_3C:					; CODE XREF: _BIO_callback_ctrl+24j
		push	[esp+0Ch+arg_8]
		mov	eax, [esi]
		push	ebx
		push	esi
		mov	eax, [eax+24h]
		call	eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_64
		push	eax
		push	0
		push	ebx
		lea	eax, [esp+18h+arg_8]
		push	eax
		push	86h ; '†'
		push	esi
		call	edi
		add	esp, 18h

loc_64:					; CODE XREF: _BIO_callback_ctrl+3Aj
					; _BIO_callback_ctrl+4Ej
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68:					; CODE XREF: _BIO_callback_ctrl+11j
					; _BIO_callback_ctrl+17j
		push	179h
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	83h ; 'ƒ'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_BIO_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_clear_flags
_BIO_clear_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		not	eax
		and	[ecx+14h], eax
		retn
_BIO_clear_flags endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_copy_next_retry
_BIO_copy_next_retry proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	ecx, [edx+24h]
		mov	eax, [ecx+14h]
		and	eax, 0Fh
		or	[edx+14h], eax
		mov	eax, [ecx+18h]
		mov	[edx+18h], eax
		retn
_BIO_copy_next_retry endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_ctrl
_BIO_ctrl	proc near		; CODE XREF: _BIO_ctrl_pending+Ap
					; _BIO_ctrl_wpending+Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_C1
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C1:					; CODE XREF: _BIO_ctrl+7j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_11F
		cmp	dword ptr [eax+18h], 0
		jz	short loc_11F
		push	ebx
		mov	ebx, [esp+8+arg_C]
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	edi
		mov	edi, [esi+4]
		test	edi, edi
		jz	short loc_F3
		push	1
		push	ebp
		push	[esp+18h+arg_4]
		push	ebx
		push	6
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_11A

loc_F3:					; CODE XREF: _BIO_ctrl+29j
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	[esp+18h+arg_4]
		mov	eax, [eax+18h]
		push	esi
		call	eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_11A
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	ebx
		push	86h ; '†'
		push	esi
		call	edi
		add	esp, 18h

loc_11A:				; CODE XREF: _BIO_ctrl+3Dj
					; _BIO_ctrl+52j
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_11F:				; CODE XREF: _BIO_ctrl+11j
					; _BIO_ctrl+17j
		push	15Dh
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	67h ; 'g'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_BIO_ctrl	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 140h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_ctrl_pending
_BIO_ctrl_pending proc near

arg_0		= dword	ptr  4

		push	0
		push	0
		push	0Ah
		push	[esp+0Ch+arg_0]
		call	_BIO_ctrl
		add	esp, 10h
		retn
_BIO_ctrl_pending endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_ctrl_wpending
_BIO_ctrl_wpending proc	near

arg_0		= dword	ptr  4

		push	0
		push	0
		push	0Dh
		push	[esp+0Ch+arg_0]
		call	_BIO_ctrl
		add	esp, 10h
		retn
_BIO_ctrl_wpending endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dup_chain
_BIO_dup_chain	proc near

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		xor	ebp, ebp
		xor	ebx, ebx
		test	edi, edi
		jz	loc_21D

loc_17C:				; CODE XREF: _BIO_dup_chain+AFj
		mov	eax, [edi]
		push	46h ; 'F'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	40h ; '@'
		mov	[esp+1Ch+arg_0], eax
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_255
		push	[esp+10h+arg_0]
		push	esi
		call	_BIO_set
		add	esp, 8
		push	esi
		test	eax, eax
		jz	loc_23D
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		mov	[esi+8], eax
		mov	eax, [edi+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [edi+10h]
		mov	[esi+10h], eax
		mov	eax, [edi+14h]
		push	0
		mov	[esi+14h], eax
		mov	eax, [edi+1Ch]
		push	0Ch
		push	edi
		mov	[esi+1Ch], eax
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jz	short loc_224
		lea	eax, [edi+38h]
		push	eax
		lea	eax, [esi+38h]
		push	eax
		push	0
		call	_CRYPTO_dup_ex_data
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_224
		test	ebp, ebp
		jnz	short loc_206
		mov	ebp, esi
		jmp	short loc_210
; ---------------------------------------------------------------------------

loc_206:				; CODE XREF: _BIO_dup_chain+98j
		push	esi
		push	ebx
		call	_BIO_push
		add	esp, 8

loc_210:				; CODE XREF: _BIO_dup_chain+9Cj
		mov	edi, [edi+24h]
		mov	ebx, esi
		test	edi, edi
		jnz	loc_17C

loc_21D:				; CODE XREF: _BIO_dup_chain+Ej
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_224:				; CODE XREF: _BIO_dup_chain+7Ej
					; _BIO_dup_chain+94j
		push	esi
		call	_BIO_free
		add	esp, 4
		push	ebp
		call	_BIO_free_all
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _BIO_dup_chain+45j
		call	_CRYPTO_free
		add	esp, 4
		push	ebp
		call	_BIO_free_all
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_255:				; CODE XREF: _BIO_dup_chain+2Fj
		push	48h ; 'H'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	41h ; 'A'
		push	6Ch ; 'l'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h

$err$27:
		push	ebp
		call	_BIO_free_all
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_BIO_dup_chain	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_find_type
_BIO_find_type	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_285
		retn
; ---------------------------------------------------------------------------

loc_285:				; CODE XREF: _BIO_find_type+6j
		mov	edx, [esp+arg_4]
		push	esi
		xchg	ax, ax

loc_28C:				; CODE XREF: _BIO_find_type+2Bj
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_2A2
		mov	ecx, [ecx]
		test	dl, dl
		jnz	short loc_29E
		test	edx, ecx
		jnz	short loc_2A9
		jmp	short loc_2A2
; ---------------------------------------------------------------------------

loc_29E:				; CODE XREF: _BIO_find_type+1Aj
		cmp	ecx, edx
		jz	short loc_2A9

loc_2A2:				; CODE XREF: _BIO_find_type+14j
					; _BIO_find_type+20j
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_28C

loc_2A9:				; CODE XREF: _BIO_find_type+1Ej
					; _BIO_find_type+24j
		pop	esi
		retn
_BIO_find_type	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_free
_BIO_free	proc near		; CODE XREF: _BIO_dup_chain+BDp
					; _BIO_vfreej

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_2B9
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2B9:				; CODE XREF: _BIO_free+7j
		push	72h ; 'r'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	15h
		lea	eax, [esi+2Ch]
		push	0FFFFFFFFh
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		test	eax, eax
		jg	short loc_31A
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_2EF
		push	1
		push	0
		push	0
		push	0
		push	1
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jle	short loc_31F

loc_2EF:				; CODE XREF: _BIO_free+2Dj
		lea	eax, [esi+38h]
		push	eax
		push	esi
		push	0
		call	_CRYPTO_free_ex_data
		mov	eax, [esi]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_311
		mov	eax, [eax+20h]
		test	eax, eax
		jz	short loc_311
		push	esi
		call	eax
		add	esp, 4

loc_311:				; CODE XREF: _BIO_free+56j
					; _BIO_free+5Dj
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_31A:				; CODE XREF: _BIO_free+26j
		mov	eax, 1

loc_31F:				; CODE XREF: _BIO_free+41j
		pop	esi
		retn
_BIO_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_free_all
_BIO_free_all	proc near		; CODE XREF: _BIO_dup_chain+C6p
					; _BIO_dup_chain+DEp ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_3A8
		push	ebx
		push	esi
		nop	dword ptr [eax+eax+00h]

loc_334:				; CODE XREF: _BIO_free_all+80j
		mov	ebx, [edi+2Ch]
		lea	eax, [edi+2Ch]
		push	72h ; 'r'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	15h
		push	0FFFFFFFFh
		mov	esi, edi
		mov	edi, [edi+24h]
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		test	eax, eax
		jg	short loc_39D
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_372
		push	1
		push	0
		push	0
		push	0
		push	1
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jle	short loc_39D

loc_372:				; CODE XREF: _BIO_free_all+38j
		lea	eax, [esi+38h]
		push	eax
		push	esi
		push	0
		call	_CRYPTO_free_ex_data
		mov	eax, [esi]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_394
		mov	eax, [eax+20h]
		test	eax, eax
		jz	short loc_394
		push	esi
		call	eax
		add	esp, 4

loc_394:				; CODE XREF: _BIO_free_all+61j
					; _BIO_free_all+68j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_39D:				; CODE XREF: _BIO_free_all+31j
					; _BIO_free_all+4Cj
		cmp	ebx, 1
		jg	short loc_3A6
		test	edi, edi
		jnz	short loc_334

loc_3A6:				; CODE XREF: _BIO_free_all+7Cj
		pop	esi
		pop	ebx

loc_3A8:				; CODE XREF: _BIO_free_all+7j
		pop	edi
		retn
_BIO_free_all	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_get_callback
_BIO_get_callback proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		retn
_BIO_get_callback endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_get_callback_arg
_BIO_get_callback_arg proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
_BIO_get_callback_arg endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_get_ex_data
_BIO_get_ex_data proc near

arg_0		= dword	ptr  4

		add	[esp+arg_0], 38h ; '8'
		jmp	_CRYPTO_get_ex_data
_BIO_get_ex_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_get_ex_new_index
_BIO_get_ex_new_index proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		push	0
		call	_CRYPTO_get_ex_new_index
		add	esp, 18h
		retn
_BIO_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_get_retry_BIO
_BIO_get_retry_BIO proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	eax, edx
		test	byte ptr [edx+14h], 8
		jz	short loc_407
		nop	dword ptr [eax+00h]

loc_3F8:				; CODE XREF: _BIO_get_retry_BIO+1Dj
		mov	edx, eax
		mov	eax, [eax+24h]
		test	eax, eax
		jz	short loc_407
		test	byte ptr [eax+14h], 8
		jnz	short loc_3F8

loc_407:				; CODE XREF: _BIO_get_retry_BIO+Aj
					; _BIO_get_retry_BIO+17j
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_414
		mov	ecx, [edx+18h]
		mov	[eax], ecx

loc_414:				; CODE XREF: _BIO_get_retry_BIO+25j
		mov	eax, edx
		retn
_BIO_get_retry_BIO endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 418h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_get_retry_reason
_BIO_get_retry_reason proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+18h]
		retn
_BIO_get_retry_reason endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_gets
_BIO_gets	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_4A7
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_4A7
		cmp	dword ptr [eax+14h], 0
		jz	short loc_4A7
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		push	edi
		mov	edi, [esi+4]
		test	edi, edi
		jz	short loc_459
		push	1
		push	0
		push	ebx
		push	ebp
		push	5
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_47C

loc_459:				; CODE XREF: _BIO_gets+25j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_481
		push	12Bh
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	78h ; 'x'
		push	68h ; 'h'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh

loc_47C:				; CODE XREF: _BIO_gets+37j
					; _BIO_gets+70j
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_481:				; CODE XREF: _BIO_gets+3Dj
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	esi
		mov	eax, [eax+14h]
		call	eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_47C
		push	eax
		push	0
		push	ebx
		push	ebp
		push	85h ; '…'
		push	esi
		call	edi
		add	esp, 18h
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4A7:				; CODE XREF: _BIO_gets+7j _BIO_gets+Dj ...
		push	121h
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	68h ; 'h'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_BIO_gets	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_indent
_BIO_indent	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		xor	eax, eax
		test	ebx, ebx
		push	esi
		cmovs	ebx, eax
		cmp	ebx, [esp+8+arg_8]
		push	edi
		cmovg	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	short loc_562
		mov	esi, [esp+0Ch+arg_0]
		nop

loc_4E8:				; CODE XREF: _BIO_indent+98j
		dec	ebx
		test	esi, esi
		jz	loc_589
		mov	eax, [esi]
		test	eax, eax
		jz	loc_589
		cmp	dword ptr [eax+10h], 0
		jz	loc_589
		mov	edi, [esi+4]
		test	edi, edi
		jz	short loc_523
		push	1
		push	0
		push	0
		push	offset ??_C@_01CLKCMJKC@?5?$AA@	; `string'
		push	4
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_559

loc_523:				; CODE XREF: _BIO_indent+42j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_56B
		mov	eax, [esi]
		push	offset ??_C@_01CLKCMJKC@?5?$AA@	; `string'
		push	esi
		mov	eax, [eax+10h]
		call	eax
		add	esp, 8
		test	eax, eax
		jle	short loc_540
		add	[esi+34h], eax

loc_540:				; CODE XREF: _BIO_indent+73j
		test	edi, edi
		jz	short loc_559
		push	eax
		push	0
		push	0
		push	offset ??_C@_01CLKCMJKC@?5?$AA@	; `string'
		push	84h ; '„'
		push	esi
		call	edi
		add	esp, 18h

loc_559:				; CODE XREF: _BIO_indent+59j
					; _BIO_indent+7Aj
		cmp	eax, 1
		jnz	short loc_5A1
		test	ebx, ebx
		jnz	short loc_4E8

loc_562:				; CODE XREF: _BIO_indent+19j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_56B:				; CODE XREF: _BIO_indent+5Fj
		push	10Dh
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	78h ; 'x'
		push	6Eh ; 'n'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_589:				; CODE XREF: _BIO_indent+23j
					; _BIO_indent+2Dj ...
		push	103h
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	6Eh ; 'n'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h

loc_5A1:				; CODE XREF: _BIO_indent+94j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BIO_indent	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_int_ctrl
_BIO_int_ctrl	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	[esp+arg_C], eax
		lea	eax, [esp+arg_C]
		push	eax
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_BIO_ctrl
		add	esp, 10h
		retn
_BIO_int_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_method_name
_BIO_method_name proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+4]
		retn
_BIO_method_name endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_method_type
_BIO_method_type proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax]
		retn
_BIO_method_type endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_new
_BIO_new	proc near

arg_0		= dword	ptr  4

		push	esi
		push	46h ; 'F'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	40h ; '@'
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_615
		push	48h ; 'H'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	41h ; 'A'
		push	6Ch ; 'l'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_615:				; CODE XREF: _BIO_new+16j
		push	[esp+4+arg_0]
		push	esi
		call	_BIO_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_631
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	esi, esi

loc_631:				; CODE XREF: _BIO_new+40j
		mov	eax, esi
		pop	esi
		retn
_BIO_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 638h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_next
_BIO_next	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_641
		retn
; ---------------------------------------------------------------------------

loc_641:				; CODE XREF: _BIO_next+6j
		mov	eax, [eax+24h]
		retn
_BIO_next	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 648h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_number_read
_BIO_number_read proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_654
		mov	eax, [eax+30h]
		retn
; ---------------------------------------------------------------------------

loc_654:				; CODE XREF: _BIO_number_read+6j
		xor	eax, eax
		retn
_BIO_number_read endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 658h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_number_written
_BIO_number_written proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_664
		mov	eax, [eax+34h]
		retn
; ---------------------------------------------------------------------------

loc_664:				; CODE XREF: _BIO_number_written+6j
		xor	eax, eax
		retn
_BIO_number_written endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 668h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_pop
_BIO_pop	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_675
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_675:				; CODE XREF: _BIO_pop+7j
		push	edi
		mov	edi, [esi+24h]
		push	esi
		push	0
		push	7
		push	esi
		call	_BIO_ctrl
		mov	ecx, [esi+28h]
		add	esp, 10h
		test	ecx, ecx
		jz	short loc_694
		mov	eax, [esi+24h]
		mov	[ecx+24h], eax

loc_694:				; CODE XREF: _BIO_pop+24j
		mov	edx, [esi+24h]
		test	edx, edx
		jz	short loc_6A1
		mov	ecx, [esi+28h]
		mov	[edx+28h], ecx

loc_6A1:				; CODE XREF: _BIO_pop+31j
		mov	eax, edi
		mov	dword ptr [esi+24h], 0
		pop	edi
		mov	dword ptr [esi+28h], 0
		pop	esi
		retn
_BIO_pop	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_ptr_ctrl
_BIO_ptr_ctrl	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		lea	eax, [esp+4+var_4]
		mov	[esp+4+var_4], 0
		push	eax
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_BIO_ctrl
		mov	ecx, [esp+14h+var_4]
		xor	edx, edx
		test	eax, eax
		cmovle	ecx, edx
		mov	eax, ecx
		add	esp, 14h
		retn
_BIO_ptr_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_push
_BIO_push	proc near		; CODE XREF: _BIO_dup_chain+A0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_6FB
		mov	eax, [esp+4+arg_4]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FB:				; CODE XREF: _BIO_push+7j
		cmp	dword ptr [esi+24h], 0
		lea	eax, [esi+24h]
		mov	ecx, esi
		jz	short loc_717
		nop	word ptr [eax+eax+00h]

loc_70C:				; CODE XREF: _BIO_push+29j
		mov	ecx, [eax]
		cmp	dword ptr [ecx+24h], 0
		lea	eax, [ecx+24h]
		jnz	short loc_70C

loc_717:				; CODE XREF: _BIO_push+18j
		mov	eax, [esp+4+arg_4]
		mov	[ecx+24h], eax
		test	eax, eax
		jz	short loc_725
		mov	[eax+28h], ecx

loc_725:				; CODE XREF: _BIO_push+34j
		push	ecx
		push	0
		push	6
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn
_BIO_push	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 738h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_puts
_BIO_puts	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_7C0
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_7C0
		cmp	dword ptr [eax+10h], 0
		jz	short loc_7C0
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	edi
		mov	edi, [esi+4]
		test	edi, edi
		jz	short loc_76D
		push	1
		push	0
		push	0
		push	ebx
		push	4
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_790

loc_76D:				; CODE XREF: _BIO_puts+20j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_794
		push	10Dh
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	78h ; 'x'
		push	6Eh ; 'n'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh

loc_790:				; CODE XREF: _BIO_puts+33j
					; _BIO_puts+71j
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_794:				; CODE XREF: _BIO_puts+39j
		mov	eax, [esi]
		push	ebx
		push	esi
		mov	eax, [eax+10h]
		call	eax
		add	esp, 8
		test	eax, eax
		jle	short loc_7A7
		add	[esi+34h], eax

loc_7A7:				; CODE XREF: _BIO_puts+6Aj
		test	edi, edi
		jz	short loc_790
		push	eax
		push	0
		push	0
		push	ebx
		push	84h ; '„'
		push	esi
		call	edi
		add	esp, 18h
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7C0:				; CODE XREF: _BIO_puts+7j _BIO_puts+Dj ...
		push	103h
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	6Eh ; 'n'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_BIO_puts	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_read
_BIO_read	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	loc_872
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_872
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_872
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		push	edi
		mov	edi, [esi+4]
		test	edi, edi
		jz	short loc_81D
		push	1
		push	0
		push	ebx
		push	ebp
		push	2
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_840

loc_81D:				; CODE XREF: _BIO_read+29j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_845
		push	0CEh ; 'Î'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	78h ; 'x'
		push	6Fh ; 'o'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh

loc_840:				; CODE XREF: _BIO_read+3Bj
					; _BIO_read+7Bj
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_845:				; CODE XREF: _BIO_read+41j
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	esi
		mov	eax, [eax+0Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_859
		add	[esi+30h], eax

loc_859:				; CODE XREF: _BIO_read+74j
		test	edi, edi
		jz	short loc_840
		push	eax
		push	0
		push	ebx
		push	ebp
		push	82h ; '‚'
		push	esi
		call	edi
		add	esp, 18h
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_872:				; CODE XREF: _BIO_read+7j
					; _BIO_read+11j ...
		push	0C4h ; 'Ä'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	6Fh ; 'o'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_BIO_read	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 894h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_set
_BIO_set	proc near		; CODE XREF: _BIO_dup_chain+3Ap
					; _BIO_new+36p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		lea	ebx, [edi+38h]
		mov	[edi], esi
		push	ebx
		push	edi
		push	0
		mov	dword ptr [edi+4], 0
		mov	dword ptr [edi+8], 0
		mov	dword ptr [edi+0Ch], 0
		mov	dword ptr [edi+10h], 1
		mov	dword ptr [edi+14h], 0
		mov	dword ptr [edi+18h], 0
		mov	dword ptr [edi+1Ch], 0
		mov	dword ptr [edi+20h], 0
		mov	dword ptr [edi+28h], 0
		mov	dword ptr [edi+24h], 0
		mov	dword ptr [edi+2Ch], 1
		mov	dword ptr [edi+30h], 0
		mov	dword ptr [edi+34h], 0
		call	_CRYPTO_new_ex_data
		mov	eax, [esi+1Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_92D
		push	edi
		call	eax
		add	esp, 4
		test	eax, eax
		jnz	short loc_92D
		push	ebx
		push	edi
		push	eax
		call	_CRYPTO_free_ex_data
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_92D:				; CODE XREF: _BIO_set+7Cj _BIO_set+86j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_BIO_set	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 938h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_set_callback
_BIO_set_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+4], ecx
		retn
_BIO_set_callback endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 944h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_set_callback_arg
_BIO_set_callback_arg proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+8], ecx
		retn
_BIO_set_callback_arg endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 950h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_set_ex_data
_BIO_set_ex_data proc near

arg_0		= dword	ptr  4

		add	[esp+arg_0], 38h ; '8'
		jmp	_CRYPTO_set_ex_data
_BIO_set_ex_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 95Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_set_flags
_BIO_set_flags	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		or	[ecx+14h], eax
		retn
_BIO_set_flags	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 968h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_test_flags
_BIO_test_flags	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		and	eax, [esp+arg_4]
		retn
_BIO_test_flags	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 974h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_vfree
_BIO_vfree	proc near
		jmp	_BIO_free
_BIO_vfree	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 97Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_write
_BIO_write	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_989
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_989:				; CODE XREF: _BIO_write+7j
		mov	eax, [esi]
		push	edi
		mov	edi, [esi+4]
		test	eax, eax
		jz	short loc_A0E
		cmp	dword ptr [eax+8], 0
		jz	short loc_A0E
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		test	edi, edi
		jz	short loc_9B9
		push	1
		push	0
		push	ebx
		push	ebp
		push	3
		push	esi
		call	edi
		add	esp, 18h
		test	eax, eax
		jle	short loc_9DC

loc_9B9:				; CODE XREF: _BIO_write+29j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_9E1
		push	0EFh ; 'ï'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	78h ; 'x'
		push	71h ; 'q'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh

loc_9DC:				; CODE XREF: _BIO_write+3Bj
					; _BIO_write+7Bj
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_9E1:				; CODE XREF: _BIO_write+41j
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	esi
		mov	eax, [eax+8]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_9F5
		add	[esi+34h], eax

loc_9F5:				; CODE XREF: _BIO_write+74j
		test	edi, edi
		jz	short loc_9DC
		push	eax
		push	0
		push	ebx
		push	ebp
		push	83h ; 'ƒ'
		push	esi
		call	edi
		add	esp, 18h
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A0E:				; CODE XREF: _BIO_write+15j
					; _BIO_write+1Bj
		push	0E6h ; 'æ'
		push	offset ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ ; ".\\crypto\\bio\\bio_lib.c"
		push	79h ; 'y'
		push	71h ; 'q'
		push	20h ; ' '
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		pop	edi
		pop	esi
		retn
_BIO_write	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A30h
; COMDAT (pick any)
		public ??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@
; `string'
??_C@_0BH@MODMECLL@?4?2crypto?2bio?2bio_lib?4c?$AA@ db '.\crypto\bio\bio_lib.c',0
					; DATA XREF: _BIO_callback_ctrl+6Do
					; _BIO_ctrl+70o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A48h
; COMDAT (pick any)
		public ??_C@_01CLKCMJKC@?5?$AA@
; `string'
??_C@_01CLKCMJKC@?5?$AA@ db 20h, 0	; DATA XREF: _BIO_indent+4Ao
					; _BIO_indent+63o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_get_ex_new_index:near ; CODE XREF: _BIO_get_ex_new_index+16p
		extrn _CRYPTO_new_ex_data:near ; CODE XREF: _BIO_set+6Fp
		extrn _CRYPTO_dup_ex_data:near ; CODE XREF: _BIO_dup_chain+8Ap
		extrn _CRYPTO_free_ex_data:near	; CODE XREF: _BIO_free+4Ap
					; _BIO_free_all+55p ...
		extrn _CRYPTO_set_ex_data:near ; CODE XREF: _BIO_set_ex_data+5j
		extrn _CRYPTO_get_ex_data:near ; CODE XREF: _BIO_get_ex_data+5j
		extrn _CRYPTO_add_lock:near ; CODE XREF: _BIO_free+1Cp
					; _BIO_free_all+27p
		extrn _CRYPTO_malloc:near ; CODE XREF: _BIO_dup_chain+23p
					; _BIO_new+Ap
		extrn _CRYPTO_free:near	; CODE XREF: _BIO_dup_chain:loc_23Dp
					; _BIO_free+66p ...
		extrn _ERR_put_error:near ; CODE XREF: _BIO_callback_ctrl+7Bp
					; _BIO_ctrl+7Bp ...
		extrn __chkstk:near	; CODE XREF: _BIO_ptr_ctrl+5p


		end
