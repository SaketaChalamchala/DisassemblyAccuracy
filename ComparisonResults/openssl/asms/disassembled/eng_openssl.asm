;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CDDF410EF3600C669F810B943122A957
; Input	CRC32 :	376824DA

; File Name   :	C:\compspace\Diff\openssl\obj\eng_openssl.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_engine_openssl_id dd offset ??_C@_07OHDAOILP@openssl?$AA@ ; DATA XREF:	_bind_helper+1r
					; "openssl"
_engine_openssl_name dd	offset ??_C@_0BI@LOIJKCMB@Software?5engine?5support?$AA@
					; DATA XREF: _bind_helper+1Cr
					; "Software engine support"
_test_cipher_nids dd 5,	61h		; DATA XREF: _openssl_ciphers+Co
_test_cipher_nids_number dd 2		; DATA XREF: _openssl_ciphers+12r
_test_digest_nids dd offset loc_3D+3	; DATA XREF: _openssl_digests+Co
_test_digest_nids_number dd 1		; DATA XREF: _openssl_digests+12r
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
; COMDAT (pick any)
		public ??_C@_07OHDAOILP@openssl?$AA@
; `string'
??_C@_07OHDAOILP@openssl?$AA@ db 'openssl',0 ; DATA XREF: .data:_engine_openssl_ido
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
; COMDAT (pick any)
		public ??_C@_0BI@LOIJKCMB@Software?5engine?5support?$AA@
; `string'
??_C@_0BI@LOIJKCMB@Software?5engine?5support?$AA@ db 'Software engine support',0
					; DATA XREF: .data:_engine_openssl_nameo
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl test_rc4_init_key(int, void *Src)
_test_rc4_init_key proc	near		; DATA XREF: .rdata:000000CCo
					; .rdata:00000100o

arg_0		= dword	ptr  4
Src		= dword	ptr  8

		push	esi

loc_3D:					; DATA XREF: .data:_test_digest_nidso
					; .rdata:_test_sha_mdo	...
		push	offset ??_C@_0CP@LBNBGIPD@?$CITEST_ENG_OPENSSL_RC4?$CJ?5test_init@ ; "(TEST_ENG_OPENSSL_RC4) test_init_key() "...
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		mov	esi, [esp+0Ch+arg_0]
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		push	eax		; Size

loc_5E:					; DATA XREF: .rdata:_test_r4_40_ciphero
		push	[esp+14h+Src]	; Src

loc_62:					; DATA XREF: .rdata:00000164o
		push	dword ptr [esi+60h] ; Dst
		call	_memcpy
		add	esp, 18h
		push	dword ptr [esi+60h]
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		push	eax
		mov	eax, [esi+60h]
		add	eax, 10h
		push	eax
		call	_RC4_set_key
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		retn
_test_rc4_init_key endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test_rc4_cipher proc near		; DATA XREF: .rdata:000000D0o
					; .rdata:00000104o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_4]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_8]
		push	[esp+8+arg_C]
		mov	eax, [eax+60h]
		add	eax, 10h
		push	eax
		call	_RC4
		add	esp, 10h
		mov	eax, 1
		retn
_test_rc4_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
_test_r4_cipher	dd 5, 1, 10h, 0		; DATA XREF: _openssl_ciphers+21o
		dd 8
		dd offset _test_rc4_init_key
		dd offset _test_rc4_cipher
		align 8
		dd offset ??_C@_0CP@LBNBGIPD@?$CITEST_ENG_OPENSSL_RC4?$CJ?5test_init@ ;	"(TEST_ENG_OPENSSL_RC4)	test_init_key()	"...
		dd 4 dup(0)
_test_r4_40_cipher dd offset loc_5E+3	; DATA XREF: _openssl_ciphers+30o
		dd 1, 5, 0
		dd 8
		dd offset _test_rc4_init_key
		dd offset _test_rc4_cipher
		dd 0
		dd offset ??_C@_0CP@LBNBGIPD@?$CITEST_ENG_OPENSSL_RC4?$CJ?5test_init@ ;	"(TEST_ENG_OPENSSL_RC4)	test_init_key()	"...
		align 20h
_test_sha_md	dd offset loc_3D+3	; DATA XREF: _openssl_digests+1Fo
		dd offset loc_3D+4
		dd 14h,	0
		dd offset _test_sha1_init
		dd offset _test_sha1_update
		dd offset _test_sha1_final
		dd 2 dup(0)
		dd offset _RSA_sign
		dd offset _RSA_verify
		dd 6, 13h, 3 dup(0)
		dd offset loc_3D+3
		dd offset loc_62+2
		dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test_sha1_init	proc near		; DATA XREF: .rdata:00000130o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA1_Init
		add	esp, 4
		retn
_test_sha1_init	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test_sha1_update proc near		; DATA XREF: .rdata:00000134o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+0Ch]
		call	_SHA1_Update
		add	esp, 0Ch
		retn
_test_sha1_update endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 194h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_test_sha1_final proc near		; DATA XREF: .rdata:00000138o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		push	[esp+4+arg_4]
		call	_SHA1_Final
		add	esp, 8
		retn
_test_sha1_final endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_load_openssl
_ENGINE_load_openssl proc near
		push	esi
		call	_ENGINE_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_1CA
		push	esi
		call	_bind_helper
		add	esp, 4
		push	esi
		test	eax, eax
		jnz	short loc_1CC
		call	_ENGINE_free
		add	esp, 4

loc_1CA:				; CODE XREF: _ENGINE_load_openssl+Aj
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1CC:				; CODE XREF: _ENGINE_load_openssl+18j
		call	_ENGINE_add
		push	esi
		call	_ENGINE_free
		add	esp, 8
		pop	esi
		jmp	_ERR_clear_error
_ENGINE_load_openssl endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bind_helper	proc near		; CODE XREF: _ENGINE_load_openssl+Dp
					; _engine_openssl+Dp

arg_0		= dword	ptr  4

		push	esi
		push	_engine_openssl_id
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	loc_2F6
		push	_engine_openssl_name
		push	esi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	loc_2F6
		call	_RSA_get_default_method
		push	eax
		push	esi
		call	_ENGINE_set_RSA
		add	esp, 8
		test	eax, eax
		jz	loc_2F6
		call	_DSA_get_default_method
		push	eax
		push	esi
		call	_ENGINE_set_DSA
		add	esp, 8
		test	eax, eax
		jz	loc_2F6
		call	_ECDH_OpenSSL
		push	eax
		push	esi
		call	_ENGINE_set_ECDH
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		call	_ECDSA_OpenSSL
		push	eax
		push	esi
		call	_ENGINE_set_ECDSA
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		call	_DH_get_default_method
		push	eax
		push	esi
		call	_ENGINE_set_DH
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		call	_RAND_SSLeay
		push	eax
		push	esi
		call	_ENGINE_set_RAND
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		push	offset _openssl_ciphers
		push	esi
		call	_ENGINE_set_ciphers
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		push	offset _openssl_digests
		push	esi
		call	_ENGINE_set_digests
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		push	offset _openssl_load_privkey
		push	esi
		call	_ENGINE_set_load_privkey_function
		add	esp, 8
		test	eax, eax
		jz	short loc_2F6
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2F6:				; CODE XREF: _bind_helper+16j
					; _bind_helper+2Dj ...
		xor	eax, eax
		pop	esi
		retn
_bind_helper	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_openssl	proc near
		push	esi
		call	_ENGINE_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_31E
		push	esi
		call	_bind_helper
		add	esp, 4
		test	eax, eax
		jnz	short loc_322
		push	esi
		call	_ENGINE_free
		add	esp, 4

loc_31E:				; CODE XREF: _engine_openssl+Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_322:				; CODE XREF: _engine_openssl+17j
		mov	eax, esi
		pop	esi
		retn
_engine_openssl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 328h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _test_rc4_init_key+12p
					; _openssl_load_privkey+18p

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_openssl_ciphers proc near		; DATA XREF: _bind_helper+ADo

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_364
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_test_cipher_nids
		mov	eax, _test_cipher_nids_number
		retn
; ---------------------------------------------------------------------------

loc_364:				; CODE XREF: _openssl_ciphers+6j
		mov	ecx, [esp+arg_C]
		cmp	ecx, 5
		jnz	short loc_377
		mov	dword ptr [eax], offset	_test_r4_cipher
		lea	eax, [ecx-4]
		retn
; ---------------------------------------------------------------------------

loc_377:				; CODE XREF: _openssl_ciphers+1Fj
		cmp	ecx, 61h ; 'a'
		jnz	short loc_388
		mov	dword ptr [eax], offset	_test_r4_40_cipher
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_388:				; CODE XREF: _openssl_ciphers+2Ej
		mov	dword ptr [eax], 0
		xor	eax, eax
		retn
_openssl_ciphers endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 394h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_openssl_digests proc near		; DATA XREF: _bind_helper+BFo

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_3AC
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_test_digest_nids
		mov	eax, _test_digest_nids_number
		retn
; ---------------------------------------------------------------------------

loc_3AC:				; CODE XREF: _openssl_digests+6j
		cmp	[esp+arg_C], 40h ; '@'
		jnz	short loc_3BF
		mov	dword ptr [eax], offset	_test_sha_md
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_3BF:				; CODE XREF: _openssl_digests+1Dj
		mov	dword ptr [eax], 0
		xor	eax, eax
		retn
_openssl_digests endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_openssl_load_privkey proc near		; DATA XREF: _bind_helper+D1o

arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	esi
		push	offset ??_C@_0CP@HGIJOKNE@?$CITEST_ENG_OPENSSL_PKEY?$CJLoading?5P@ ; "(TEST_ENG_OPENSSL_PKEY)Loading Private "...
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	offset ??_C@_01KDCPPGHE@r?$AA@ ; `string'
		push	esi
		call	_BIO_new_file
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_3FC
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3FC:				; CODE XREF: _openssl_load_privkey+2Fj
		push	0
		push	0
		push	0
		push	edi
		call	_PEM_read_bio_PrivateKey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_openssl_load_privkey endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 418h
; COMDAT (pick any)
		public ??_C@_0CP@LBNBGIPD@?$CITEST_ENG_OPENSSL_RC4?$CJ?5test_init@
; char `string'[]
??_C@_0CP@LBNBGIPD@?$CITEST_ENG_OPENSSL_RC4?$CJ?5test_init@ db '(TEST_ENG_OPENSSL_RC4) test_init_key() called',0Ah,0
					; DATA XREF: _test_rc4_init_key:loc_3Do
					; .rdata:000000D8o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 448h
; COMDAT (pick any)
		public ??_C@_0CP@HGIJOKNE@?$CITEST_ENG_OPENSSL_PKEY?$CJLoading?5P@
; char `string'[]
??_C@_0CP@HGIJOKNE@?$CITEST_ENG_OPENSSL_PKEY?$CJLoading?5P@ db '(TEST_ENG_OPENSSL_PKEY)Loading Private key %s',0Ah,0
					; DATA XREF: _openssl_load_privkey+7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 478h
; COMDAT (pick any)
		public ??_C@_01KDCPPGHE@r?$AA@
; `string'
??_C@_01KDCPPGHE@r?$AA@	db 72h,	0	; DATA XREF: _openssl_load_privkey+1Do
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _RSA_sign:near	; DATA XREF: .rdata:00000144o
		extrn _RSA_verify:near	; DATA XREF: .rdata:00000148o
		extrn __imp____acrt_iob_func:near ; CODE XREF: _test_rc4_init_key+8p
					; _openssl_load_privkey+Ep
					; DATA XREF: ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
		extrn _BIO_new_file:near ; CODE	XREF: _openssl_load_privkey+23p
		extrn _BIO_free:near	; CODE XREF: _openssl_load_privkey+43p
		extrn _ERR_clear_error:near ; CODE XREF: _ENGINE_load_openssl+33j
		extrn _RSA_get_default_method:near ; CODE XREF:	_bind_helper+33p
		extrn _DH_get_default_method:near ; CODE XREF: _bind_helper+87p
		extrn _DSA_get_default_method:near ; CODE XREF:	_bind_helper+4Ap
		extrn _ECDH_OpenSSL:near ; CODE	XREF: _bind_helper+61p
		extrn _ECDSA_OpenSSL:near ; CODE XREF: _bind_helper+74p
		extrn _RAND_SSLeay:near	; CODE XREF: _bind_helper+9Ap
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _test_rc4_init_key+1Cp
					; _test_rc4_init_key+35p
		extrn _SHA1_Init:near	; CODE XREF: _test_sha1_init+7p
		extrn _SHA1_Update:near	; CODE XREF: _test_sha1_update+Fp
		extrn _SHA1_Final:near	; CODE XREF: _test_sha1_final+Bp
		extrn _ENGINE_add:near	; CODE XREF: _ENGINE_load_openssl:loc_1CCp
		extrn _ENGINE_new:near	; CODE XREF: _ENGINE_load_openssl+1p
					; _engine_openssl+1p
		extrn _ENGINE_free:near	; CODE XREF: _ENGINE_load_openssl+1Ap
					; _ENGINE_load_openssl+2Ap ...
		extrn _ENGINE_set_id:near ; CODE XREF: _bind_helper+Cp
		extrn _ENGINE_set_name:near ; CODE XREF: _bind_helper+23p
		extrn _ENGINE_set_RSA:near ; CODE XREF:	_bind_helper+3Ap
		extrn _ENGINE_set_DSA:near ; CODE XREF:	_bind_helper+51p
		extrn _ENGINE_set_ECDH:near ; CODE XREF: _bind_helper+68p
		extrn _ENGINE_set_ECDSA:near ; CODE XREF: _bind_helper+7Bp
		extrn _ENGINE_set_DH:near ; CODE XREF: _bind_helper+8Ep
		extrn _ENGINE_set_RAND:near ; CODE XREF: _bind_helper+A1p
		extrn _ENGINE_set_load_privkey_function:near ; CODE XREF: _bind_helper+D7p
		extrn _ENGINE_set_ciphers:near ; CODE XREF: _bind_helper+B3p
		extrn _ENGINE_set_digests:near ; CODE XREF: _bind_helper+C5p
		extrn _PEM_read_bio_PrivateKey:near ; CODE XREF: _openssl_load_privkey+3Bp
		extrn _RC4_set_key:near	; CODE XREF: _test_rc4_init_key+45p
		extrn _RC4:near		; CODE XREF: _test_rc4_cipher+17p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _test_rc4_init_key+29p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso


		end
