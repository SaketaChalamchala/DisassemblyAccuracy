;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AEB1B11D5665DF2FDBA4B2889115B41F
; Input	CRC32 :	D4755AAE

; File Name   :	C:\compspace\Diff\openssl\obj\enginetest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; __vsnprintf_l+14p ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsnprintf_l(char	*DstBuf, size_t	MaxCount, const	char *Format, _locale_t	Locale,	va_list	ArgList)
		public __vsnprintf_l
__vsnprintf_l	proc near

DstBuf		= dword	ptr  4
MaxCount	= dword	ptr  8
Format		= dword	ptr  0Ch
Locale		= dword	ptr  10h
ArgList		= dword	ptr  14h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+MaxCount]
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsnprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsprintf_l(char *DstBuf,	const char *Format, _locale_t, va_list ArgList)
		public __vsprintf_l
__vsprintf_l	proc near

DstBuf		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+arg_8]
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsprintf_l	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_display_engine_list proc near		; CODE XREF: _main+1E3p _main:loc_2FBp ...
		push	esi
		push	edi
		call	_ENGINE_get_first
		push	offset ??_C@_0CA@JFDFDMPA@listing?5available?5engine?5types?6?$AA@ ; "listing available	engine types\n"
		mov	esi, eax
		xor	edi, edi
		call	_printf
		add	esp, 4
		test	esi, esi
		jz	short loc_E3
		nop	dword ptr [eax+00h]

loc_B4:					; CODE XREF: _display_engine_list+4Dj
		push	esi
		call	_ENGINE_get_name
		add	esp, 4
		push	eax
		push	esi
		call	_ENGINE_get_id
		add	esp, 4
		push	eax
		push	edi
		push	offset ??_C@_0CD@EKMBKKCM@engine?5?$CFi?0?5id?5?$DN?5?$CC?$CFs?$CC?0?5name?5?$DN?5?$CC?$CFs@ ; "engine %i, id =	\"%s\",	name = \"%s\"\n"
		call	_printf
		push	esi
		inc	edi
		call	_ENGINE_get_next
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_B4

loc_E3:					; CODE XREF: _display_engine_list+1Aj
		push	offset ??_C@_0N@OMAOKKPA@end?5of?5list?6?$AA@ ;	"end of	list\n"
		call	_printf
		push	esi
		call	_ENGINE_free
		add	esp, 8
		pop	edi
		pop	esi
		retn
_display_engine_list endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_914		= dword	ptr -914h
var_910		= dword	ptr -910h
var_90C		= dword	ptr -90Ch
var_908		= dword	ptr -908h
Dst		= dword	ptr -904h
Dest		= byte ptr -104h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 914h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+914h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, dword ptr ds:__imp__getenv
		push	offset ??_C@_0BF@CKJKJIOH@OPENSSL_DEBUG_MEMORY?$AA@ ; "OPENSSL_DEBUG_MEMORY"
		mov	[esp+928h+var_910], 0
		mov	[esp+928h+var_90C], 0
		mov	[esp+928h+var_914], 0
		call	edi ; __imp__getenv
		add	esp, 4
		test	eax, eax
		jz	short loc_18B
		push	offset ??_C@_0BF@CKJKJIOH@OPENSSL_DEBUG_MEMORY?$AA@ ; "OPENSSL_DEBUG_MEMORY"
		mov	esi, offset ??_C@_03MCADLMAF@off?$AA@ ;	`string'
		call	edi ; __imp__getenv
		add	esp, 4

loc_153:				; CODE XREF: _main+71j
		mov	cl, [eax]
		cmp	cl, [esi]
		jnz	short loc_173
		test	cl, cl
		jz	short loc_16F
		mov	cl, [eax+1]
		cmp	cl, [esi+1]
		jnz	short loc_173
		add	eax, 2
		add	esi, 2
		test	cl, cl
		jnz	short loc_153

loc_16F:				; CODE XREF: _main+5Fj
		xor	eax, eax
		jmp	short loc_178
; ---------------------------------------------------------------------------

loc_173:				; CODE XREF: _main+5Bj	_main+67j
		sbb	eax, eax
		or	eax, 1

loc_178:				; CODE XREF: _main+75j
		test	eax, eax
		jnz	short loc_18B
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	_CRYPTO_set_mem_debug_functions
		add	esp, 14h
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_18B:				; CODE XREF: _main+46j	_main+7Ej
		push	offset _CRYPTO_dbg_get_options
		push	offset _CRYPTO_dbg_set_options
		push	offset _CRYPTO_dbg_free
		push	offset _CRYPTO_dbg_realloc
		push	offset _CRYPTO_dbg_malloc
		call	_CRYPTO_set_mem_debug_functions
		push	3
		call	_CRYPTO_set_mem_debug_options
		add	esp, 18h

loc_1B3:				; CODE XREF: _main+8Dj
		push	1
		call	_CRYPTO_mem_ctrl
		call	_ERR_load_crypto_strings
		push	800h		; Size
		lea	eax, [esp+92Ch+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 10h
		call	_ENGINE_new
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		mov	ebx, eax
		mov	[esp+924h+var_908], ebx
		test	ebx, ebx
		jz	loc_629
		push	offset ??_C@_08NHEOHKK@test_id0?$AA@ ; "test_id0"
		push	ebx
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	loc_629
		push	offset ??_C@_0BA@MNDKJDGE@First?5test?5item?$AA@ ; "First test item"
		push	ebx
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	loc_629
		call	_ENGINE_new
		mov	esi, eax
		mov	[esp+924h+var_910], esi
		test	esi, esi
		jz	loc_629
		push	offset ??_C@_08BEGPNGOL@test_id1?$AA@ ;	"test_id1"
		push	esi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	loc_629
		push	offset ??_C@_0BB@IGGAFLHH@Second?5test?5item?$AA@ ; "Second test item"
		push	esi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	loc_629
		call	_ENGINE_new
		mov	edi, eax
		mov	[esp+924h+var_90C], edi
		test	edi, edi
		jz	loc_629
		push	offset ??_C@_08DPECIFCI@test_id2?$AA@ ;	"test_id2"
		push	edi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	loc_629
		push	offset ??_C@_0BA@ONECGAIJ@Third?5test?5item?$AA@ ; "Third test item"
		push	edi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	loc_629
		call	_ENGINE_new
		mov	esi, eax
		mov	[esp+924h+var_914], esi
		test	esi, esi
		jz	loc_629
		push	offset ??_C@_08CGFJLEGJ@test_id3?$AA@ ;	"test_id3"
		push	esi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	loc_629
		push	offset ??_C@_0BB@KNKOBOFN@Fourth?5test?5item?$AA@ ; "Fourth test item"
		push	esi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	loc_629
		push	offset ??_C@_0BI@GMKOKB@?6enginetest?5beginning?6?6?$AA@ ; "\nenginetest beginning\n\n"
		call	_printf
		call	_display_engine_list
		push	ebx
		call	_ENGINE_add
		add	esp, 8
		test	eax, eax
		jnz	short loc_2FB

loc_2F1:				; CODE XREF: _main+23Fj _main+250j
		push	offset ??_C@_0N@GAECICGG@Add?5failed?$CB?6?$AA@	; "Add failed!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_2FB:				; CODE XREF: _main+1F3j
		call	_display_engine_list
		call	_ENGINE_get_first
		mov	esi, eax
		push	esi
		call	_ENGINE_remove
		add	esp, 4
		test	eax, eax
		jnz	short loc_31E
		push	offset ??_C@_0BA@OONPINEK@Remove?5failed?$CB?6?$AA@ ; "Remove failed!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_31E:				; CODE XREF: _main+216j
		test	esi, esi
		jz	short loc_32B
		push	esi
		call	_ENGINE_free
		add	esp, 4

loc_32B:				; CODE XREF: _main+224j
		call	_display_engine_list
		push	edi
		call	_ENGINE_add
		add	esp, 4
		test	eax, eax
		jz	short loc_2F1
		mov	esi, [esp+924h+var_910]
		push	esi
		call	_ENGINE_add
		add	esp, 4
		test	eax, eax
		jz	short loc_2F1
		call	_display_engine_list
		push	esi
		call	_ENGINE_remove
		add	esp, 4
		test	eax, eax
		jnz	short loc_36A
		push	offset ??_C@_0BA@OONPINEK@Remove?5failed?$CB?6?$AA@ ; "Remove failed!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_36A:				; CODE XREF: _main+262j
		call	_display_engine_list
		push	[esp+924h+var_914]
		call	_ENGINE_add
		add	esp, 4
		test	eax, eax
		jnz	short loc_389
		push	offset ??_C@_0N@GAECICGG@Add?5failed?$CB?6?$AA@	; "Add failed!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_389:				; CODE XREF: _main+281j
		call	_display_engine_list
		push	edi
		call	_ENGINE_add
		add	esp, 4
		test	eax, eax
		jz	short loc_3A5
		push	offset ??_C@_0CG@NDNKPKMI@Add?5?$CKshould?$CK?5have?5failed?5but?5did@ ; "Add *should* have failed but didn't!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_3A5:				; CODE XREF: _main+29Dj
		push	offset ??_C@_0BL@OBOICMLD@Add?5that?5should?5fail?5did?4?6?$AA@	; "Add that should fail	did.\n"
		call	_printf
		call	_ERR_clear_error
		push	esi
		call	_ENGINE_remove
		add	esp, 8
		test	eax, eax
		jz	short loc_3CB
		push	offset ??_C@_0CJ@ECHIOHJD@Remove?5?$CKshould?$CK?5have?5failed?5but?5@ ; "Remove *should* have failed but didn't!"...
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_3CB:				; CODE XREF: _main+2C3j
		push	offset ??_C@_0BO@PGOOINBI@Remove?5that?5should?5fail?5did?4?6?$AA@ ; "Remove that should fail did.\n"
		call	_printf
		call	_ERR_clear_error
		push	edi
		call	_ENGINE_remove
		add	esp, 8
		test	eax, eax
		jnz	short loc_3F1
		push	offset ??_C@_0BA@OONPINEK@Remove?5failed?$CB?6?$AA@ ; "Remove failed!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_3F1:				; CODE XREF: _main+2E9j
		call	_display_engine_list
		push	[esp+924h+var_914]
		call	_ENGINE_remove
		add	esp, 4
		test	eax, eax
		jnz	short loc_410
		push	offset ??_C@_0BA@OONPINEK@Remove?5failed?$CB?6?$AA@ ; "Remove failed!\n"
		jmp	loc_62E
; ---------------------------------------------------------------------------

loc_410:				; CODE XREF: _main+308j
		call	_display_engine_list
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jz	short loc_443
		push	esi
		call	_ENGINE_remove
		add	esp, 4
		test	eax, eax
		jnz	short loc_43A
		push	offset ??_C@_0DJ@CEDEPIOD@Remove?5failed?$CBi?5?9?5probably?5no?5ha@ ; "Remove failed!i	- probably no hardware "...
		call	_printf
		add	esp, 4

loc_43A:				; CODE XREF: _main+32Fj
		push	esi
		call	_ENGINE_free
		add	esp, 4

loc_443:				; CODE XREF: _main+322j
		call	_display_engine_list
		push	ebx
		call	_ENGINE_add
		add	esp, 4
		test	eax, eax
		jz	loc_622
		push	ebx
		call	_ENGINE_remove
		add	esp, 4
		test	eax, eax
		jz	loc_622
		push	offset ??_C@_0DC@NPOAAAFJ@Successfully?5added?5and?5removed?5t@	; "Successfully	added and removed to an	em"...
		call	_printf
		push	offset ??_C@_0CH@KGLGCADM@About?5to?5beef?5up?5the?5engine?9type@ ; "About to beef up the engine-type list\n"
		call	_printf
		add	esp, 8
		xor	esi, esi
		nop	word ptr [eax+eax+00000000h]

loc_48C:				; CODE XREF: _main+415j
		push	esi
		lea	eax, [esp+928h+Dest]
		push	offset ??_C@_04JDACCJGP@id?$CFi?$AA@ ; "id%i"
		push	eax		; Dest
		call	_sprintf
		lea	eax, [esp+930h+Dest]
		push	eax
		call	_BUF_strdup
		push	esi
		mov	ebx, eax
		lea	eax, [esp+938h+Dest]
		push	offset ??_C@_0BE@BBHPGHFG@Fake?5engine?5type?5?$CFi?$AA@ ; "Fake engine	type %i"
		push	eax		; Dest
		call	_sprintf
		lea	eax, [esp+940h+Dest]
		push	eax
		call	_BUF_strdup
		add	esp, 20h
		mov	ebp, eax
		call	_ENGINE_new
		mov	edi, eax
		mov	[esp+esi*4+924h+Dst], edi
		test	edi, edi
		jz	loc_610
		push	ebx
		push	edi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jz	loc_610
		push	ebp
		push	edi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	loc_610
		inc	esi
		cmp	esi, 200h
		jl	loc_48C
		mov	ebx, dword ptr ds:__imp__fflush
		xor	edi, edi
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		nop	dword ptr [eax+00000000h]

loc_52C:				; CODE XREF: _main+45Bj
		push	[esp+edi*4+924h+Dst]
		call	_ENGINE_add
		add	esp, 4
		test	eax, eax
		jz	short loc_55B
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		call	_printf
		push	1
		call	ebp ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		inc	edi
		add	esp, 0Ch
		cmp	edi, 200h
		jl	short loc_52C
		jmp	short $cleanup_loop$86
; ---------------------------------------------------------------------------

loc_55B:				; CODE XREF: _main+43Ej
		mov	esi, [esp+edi*4+924h+Dst]
		push	esi
		call	_ENGINE_get_name
		add	esp, 4
		push	eax
		push	esi
		call	_ENGINE_get_id
		add	esp, 4
		push	eax
		push	edi
		push	offset ??_C@_0CA@FGLOCELO@?6Adding?5stopped?5at?5?$CFi?0?5?$CI?$CFs?0?$CFs?$CJ?6?$AA@ ;	"\nAdding stopped at %i, (%s,%s)\n"
		call	_printf
		add	esp, 10h

$cleanup_loop$86:			; CODE XREF: _main+45Dj
		push	offset ??_C@_0CG@DCMKMODO@?6About?5to?5empty?5the?5engine?9type?5@ ; "\nAbout to empty the engine-type list\n"
		call	_printf
		add	esp, 4
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jz	short loc_5CE
		nop	dword ptr [eax]

loc_59C:				; CODE XREF: _main+4D0j
		push	esi
		call	_ENGINE_remove
		add	esp, 4
		test	eax, eax
		jz	short loc_609
		push	esi
		call	_ENGINE_free
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		call	_printf
		push	1
		call	ebp ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jnz	short loc_59C

loc_5CE:				; CODE XREF: _main+49Bj
		xor	edi, edi

loc_5D0:				; CODE XREF: _main+4FAj
		mov	esi, [esp+edi*4+924h+Dst]
		push	esi
		call	_ENGINE_get_id
		push	eax
		call	_CRYPTO_free
		push	esi
		call	_ENGINE_get_name
		push	eax
		call	_CRYPTO_free
		inc	edi
		add	esp, 10h
		cmp	edi, 200h
		jl	short loc_5D0
		push	offset ??_C@_0BK@ODGJCNFO@?6Tests?5completed?5happily?6?$AA@ ; "\nTests	completed happily\n"
		call	_printf
		add	esp, 4
		xor	ebx, ebx
		jmp	short loc_648
; ---------------------------------------------------------------------------

loc_609:				; CODE XREF: _main+4ABj
		push	offset ??_C@_0BB@PJKHOIPL@?6Remove?5failed?$CB?6?$AA@ ;	"\nRemove failed!\n"
		jmp	short loc_62E
; ---------------------------------------------------------------------------

loc_610:				; CODE XREF: _main+3E4j _main+3F6j ...
		push	offset ??_C@_0FF@JFPHBBJA@Couldn?8t?5create?5block?5of?5ENGINE?5@ ; "Couldn't create block of ENGINE structu"...
		call	_printf
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		jmp	short loc_633
; ---------------------------------------------------------------------------

loc_622:				; CODE XREF: _main+357j _main+368j
		push	offset ??_C@_0CL@PAONKDDK@Couldn?8t?5add?5and?5remove?5to?5an?5em@ ; "Couldn't add and remove to an empty lis"...
		jmp	short loc_62E
; ---------------------------------------------------------------------------

loc_629:				; CODE XREF: _main+EAj	_main+100j ...
		push	offset ??_C@_0CI@JANMNMAO@Couldn?8t?5set?5up?5test?5ENGINE?5stru@ ; "Couldn't set up test ENGINE structures\"...

loc_62E:				; CODE XREF: _main+1FAj _main+21Dj ...
		call	_printf

loc_633:				; CODE XREF: _main+524j
		add	esp, 4
		push	2
		call	ebp ; __imp____acrt_iob_func
		push	eax
		call	_ERR_print_errors_fp
		add	esp, 8
		mov	ebx, 1

loc_648:				; CODE XREF: _main+50Bj
		mov	eax, [esp+924h+var_908]
		test	eax, eax
		jz	short loc_659
		push	eax
		call	_ENGINE_free
		add	esp, 4

loc_659:				; CODE XREF: _main+552j
		mov	eax, [esp+924h+var_910]
		test	eax, eax
		jz	short loc_66A
		push	eax
		call	_ENGINE_free
		add	esp, 4

loc_66A:				; CODE XREF: _main+563j
		mov	eax, [esp+924h+var_90C]
		test	eax, eax
		jz	short loc_67B
		push	eax
		call	_ENGINE_free
		add	esp, 4

loc_67B:				; CODE XREF: _main+574j
		mov	eax, [esp+924h+var_914]
		test	eax, eax
		jz	short loc_68C
		push	eax
		call	_ENGINE_free
		add	esp, 4

loc_68C:				; CODE XREF: _main+585j
		xor	esi, esi

loc_68E:				; CODE XREF: _main+5AAj
		mov	eax, [esp+esi*4+924h+Dst]
		test	eax, eax
		jz	short loc_69F
		push	eax
		call	_ENGINE_free
		add	esp, 4

loc_69F:				; CODE XREF: _main+598j
		inc	esi
		cmp	esi, 200h
		jl	short loc_68E
		call	_ENGINE_cleanup
		call	_CRYPTO_cleanup_all_ex_data
		call	_ERR_free_strings
		push	0
		call	_ERR_remove_thread_state
		push	2
		call	ebp ; __imp____acrt_iob_func
		push	eax
		call	_CRYPTO_mem_leaks_fp
		mov	ecx, [esp+930h+var_4]
		add	esp, 0Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 914h
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _display_engine_list+10p
					; _display_engine_list+3Ap ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 718h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sprintf(char *Dest, const	char *Format, ...)
		public _sprintf
_sprintf	proc near		; CODE XREF: _main+39Ep _main+3C0p

Dest		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Dest]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
_sprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74Ch
; COMDAT (pick any)
		public ??_C@_0CA@JFDFDMPA@listing?5available?5engine?5types?6?$AA@
; char `string'[]
??_C@_0CA@JFDFDMPA@listing?5available?5engine?5types?6?$AA@ db 'listing available engine types',0Ah,0
					; DATA XREF: _display_engine_list+7o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 76Ch
; COMDAT (pick any)
		public ??_C@_0CD@EKMBKKCM@engine?5?$CFi?0?5id?5?$DN?5?$CC?$CFs?$CC?0?5name?5?$DN?5?$CC?$CFs@
; char `string'[]
??_C@_0CD@EKMBKKCM@engine?5?$CFi?0?5id?5?$DN?5?$CC?$CFs?$CC?0?5name?5?$DN?5?$CC?$CFs@ db 'engine %i, id = "%s", name = "%s"',0Ah,0
					; DATA XREF: _display_engine_list+35o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 790h
; COMDAT (pick any)
		public ??_C@_0N@OMAOKKPA@end?5of?5list?6?$AA@
; char `string'[]
??_C@_0N@OMAOKKPA@end?5of?5list?6?$AA@ db 'end of list',0Ah,0
					; DATA XREF: _display_engine_list:loc_E3o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A0h
; COMDAT (pick any)
		public ??_C@_0BF@CKJKJIOH@OPENSSL_DEBUG_MEMORY?$AA@
; char `string'[]
??_C@_0BF@CKJKJIOH@OPENSSL_DEBUG_MEMORY?$AA@ db	'OPENSSL_DEBUG_MEMORY',0
					; DATA XREF: _main+22o	_main+48o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B8h
; COMDAT (pick any)
		public ??_C@_03MCADLMAF@off?$AA@
; `string'
??_C@_03MCADLMAF@off?$AA@ dd 66666Fh	; DATA XREF: _main+4Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7BCh
; COMDAT (pick any)
		public ??_C@_08NHEOHKK@test_id0?$AA@
; `string'
??_C@_08NHEOHKK@test_id0?$AA@ db 'test_id0',0 ; DATA XREF: _main+F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7C8h
; COMDAT (pick any)
		public ??_C@_0BA@MNDKJDGE@First?5test?5item?$AA@
; `string'
??_C@_0BA@MNDKJDGE@First?5test?5item?$AA@ db 'First test item',0 ; DATA XREF: _main+106o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D8h
; COMDAT (pick any)
		public ??_C@_08BEGPNGOL@test_id1?$AA@
; `string'
??_C@_08BEGPNGOL@test_id1?$AA@ db 'test_id1',0 ; DATA XREF: _main+12Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7E4h
; COMDAT (pick any)
		public ??_C@_0BB@IGGAFLHH@Second?5test?5item?$AA@
; `string'
??_C@_0BB@IGGAFLHH@Second?5test?5item?$AA@ db 'Second test item',0 ; DATA XREF: _main+145o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7F8h
; COMDAT (pick any)
		public ??_C@_08DPECIFCI@test_id2?$AA@
; `string'
??_C@_08DPECIFCI@test_id2?$AA@ db 'test_id2',0 ; DATA XREF: _main+16Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 804h
; COMDAT (pick any)
		public ??_C@_0BA@ONECGAIJ@Third?5test?5item?$AA@
; `string'
??_C@_0BA@ONECGAIJ@Third?5test?5item?$AA@ db 'Third test item',0 ; DATA XREF: _main+184o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 814h
; COMDAT (pick any)
		public ??_C@_08CGFJLEGJ@test_id3?$AA@
; `string'
??_C@_08CGFJLEGJ@test_id3?$AA@ db 'test_id3',0 ; DATA XREF: _main+1ADo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 820h
; COMDAT (pick any)
		public ??_C@_0BB@KNKOBOFN@Fourth?5test?5item?$AA@
; `string'
??_C@_0BB@KNKOBOFN@Fourth?5test?5item?$AA@ db 'Fourth test item',0 ; DATA XREF: _main+1C3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 834h
; COMDAT (pick any)
		public ??_C@_0CI@JANMNMAO@Couldn?8t?5set?5up?5test?5ENGINE?5stru@
; char `string'[]
??_C@_0CI@JANMNMAO@Couldn?8t?5set?5up?5test?5ENGINE?5stru@ db 'Couldn',27h,'t set up test ENGINE structures',0Ah,0
					; DATA XREF: _main:loc_629o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 85Ch
; COMDAT (pick any)
		public ??_C@_0BI@GMKOKB@?6enginetest?5beginning?6?6?$AA@
; char `string'[]
??_C@_0BI@GMKOKB@?6enginetest?5beginning?6?6?$AA@ db 0Ah ; DATA	XREF: _main+1D9o
		db 'enginetest beginning',0Ah
		db 0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 874h
; COMDAT (pick any)
		public ??_C@_0N@GAECICGG@Add?5failed?$CB?6?$AA@
; `string'
??_C@_0N@GAECICGG@Add?5failed?$CB?6?$AA@ db 'Add failed!',0Ah,0 ; DATA XREF: _main:loc_2F1o
					; _main+283o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 884h
; COMDAT (pick any)
		public ??_C@_0BA@OONPINEK@Remove?5failed?$CB?6?$AA@
; `string'
??_C@_0BA@OONPINEK@Remove?5failed?$CB?6?$AA@ db	'Remove failed!',0Ah,0
					; DATA XREF: _main+218o _main+264o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 894h
; COMDAT (pick any)
		public ??_C@_0CG@NDNKPKMI@Add?5?$CKshould?$CK?5have?5failed?5but?5did@
; `string'
??_C@_0CG@NDNKPKMI@Add?5?$CKshould?$CK?5have?5failed?5but?5did@	db 'Add *should* have failed but didn',27h,'t!',0Ah,0
					; DATA XREF: _main+29Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8BCh
; COMDAT (pick any)
		public ??_C@_0BL@OBOICMLD@Add?5that?5should?5fail?5did?4?6?$AA@
; char `string'[]
??_C@_0BL@OBOICMLD@Add?5that?5should?5fail?5did?4?6?$AA@ db 'Add that should fail did.',0Ah,0
					; DATA XREF: _main:loc_3A5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8D8h
; COMDAT (pick any)
		public ??_C@_0CJ@ECHIOHJD@Remove?5?$CKshould?$CK?5have?5failed?5but?5@
; `string'
??_C@_0CJ@ECHIOHJD@Remove?5?$CKshould?$CK?5have?5failed?5but?5@	db 'Remove *should* have failed but didn',27h,'t!',0Ah,0
					; DATA XREF: _main+2C5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 904h
; COMDAT (pick any)
		public ??_C@_0BO@PGOOINBI@Remove?5that?5should?5fail?5did?4?6?$AA@
; char `string'[]
??_C@_0BO@PGOOINBI@Remove?5that?5should?5fail?5did?4?6?$AA@ db 'Remove that should fail did.',0Ah,0
					; DATA XREF: _main:loc_3CBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 924h
; COMDAT (pick any)
		public ??_C@_0DJ@CEDEPIOD@Remove?5failed?$CBi?5?9?5probably?5no?5ha@
; char `string'[]
??_C@_0DJ@CEDEPIOD@Remove?5failed?$CBi?5?9?5probably?5no?5ha@ db 'Remove failed!i - probably no hardware support present.',0Ah,0
					; DATA XREF: _main+331o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 960h
; COMDAT (pick any)
		public ??_C@_0CL@PAONKDDK@Couldn?8t?5add?5and?5remove?5to?5an?5em@
; `string'
??_C@_0CL@PAONKDDK@Couldn?8t?5add?5and?5remove?5to?5an?5em@ db 'Couldn',27h,'t add and remove to an empty list!',0Ah,0
					; DATA XREF: _main:loc_622o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98Ch
; COMDAT (pick any)
		public ??_C@_0DC@NPOAAAFJ@Successfully?5added?5and?5removed?5t@
; char `string'[]
??_C@_0DC@NPOAAAFJ@Successfully?5added?5and?5removed?5t@ db 'Successfully added and removed to an empty list!',0Ah,0
					; DATA XREF: _main+36Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9C0h
; COMDAT (pick any)
		public ??_C@_0CH@KGLGCADM@About?5to?5beef?5up?5the?5engine?9type@
; char `string'[]
??_C@_0CH@KGLGCADM@About?5to?5beef?5up?5the?5engine?9type@ db 'About to beef up the engine-type list',0Ah,0
					; DATA XREF: _main+378o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E8h
; COMDAT (pick any)
		public ??_C@_04JDACCJGP@id?$CFi?$AA@
; char `string'[]
??_C@_04JDACCJGP@id?$CFi?$AA@ db 'id%i',0 ; DATA XREF: _main+398o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F0h
; COMDAT (pick any)
		public ??_C@_0BE@BBHPGHFG@Fake?5engine?5type?5?$CFi?$AA@
; char `string'[]
??_C@_0BE@BBHPGHFG@Fake?5engine?5type?5?$CFi?$AA@ db 'Fake engine type %i',0
					; DATA XREF: _main+3BAo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0A04h
; COMDAT (pick any)
		public ??_C@_0FF@JFPHBBJA@Couldn?8t?5create?5block?5of?5ENGINE?5@
; char `string'[]
??_C@_0FF@JFPHBBJA@Couldn?8t?5create?5block?5of?5ENGINE?5@ db 'Couldn',27h,'t create block of ENGINE structures.',0Ah
					; DATA XREF: _main:loc_610o
		db 'I',27h,'ll probably also core-dump now, damn.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A5Ch
; COMDAT (pick any)
		public ??_C@_0CA@FGLOCELO@?6Adding?5stopped?5at?5?$CFi?0?5?$CI?$CFs?0?$CFs?$CJ?6?$AA@
; char `string'[]
??_C@_0CA@FGLOCELO@?6Adding?5stopped?5at?5?$CFi?0?5?$CI?$CFs?0?$CFs?$CJ?6?$AA@ db 0Ah
					; DATA XREF: _main+478o
		db 'Adding stopped at %i, (%s,%s)',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A7Ch
; COMDAT (pick any)
		public ??_C@_01LFCBOECM@?4?$AA@
; char `string'[]
??_C@_01LFCBOECM@?4?$AA@ db '.',0       ; DATA XREF: _main+440o _main+4B3o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A80h
; COMDAT (pick any)
		public ??_C@_0CG@DCMKMODO@?6About?5to?5empty?5the?5engine?9type?5@
; char `string'[]
??_C@_0CG@DCMKMODO@?6About?5to?5empty?5the?5engine?9type?5@ db 0Ah
					; DATA XREF: _main:$cleanup_loop$86o
		db 'About to empty the engine-type list',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AA8h
; COMDAT (pick any)
		public ??_C@_0BB@PJKHOIPL@?6Remove?5failed?$CB?6?$AA@
; `string'
??_C@_0BB@PJKHOIPL@?6Remove?5failed?$CB?6?$AA@ db 0Ah ;	DATA XREF: _main:loc_609o
		db 'Remove failed!',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ABCh
; COMDAT (pick any)
		public ??_C@_0BK@ODGJCNFO@?6Tests?5completed?5happily?6?$AA@
; char `string'[]
??_C@_0BK@ODGJCNFO@?6Tests?5completed?5happily?6?$AA@ db 0Ah ; DATA XREF: _main+4FCo
		db 'Tests completed happily',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+44Cp
					; _main+4BFp ...
; int __cdecl _fflush(FILE *File)
		extrn __imp__fflush:near ; CODE	XREF: _main+44Fp _main+4C2p
					; DATA XREF: ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
		extrn __imp____stdio_common_vsprintf:near ; CODE XREF: __vsnprintf_l+22p
					; __vsprintf_l+20p ...
		extrn _BUF_strdup:near	; CODE XREF: _main+3ABp _main+3CDp
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _main+3Fp _main+52p
					; DATA XREF: ...
		extrn _CRYPTO_mem_ctrl:near ; CODE XREF: _main+B9p
		extrn _CRYPTO_cleanup_all_ex_data:near ; CODE XREF: _main+5B1p
		extrn _CRYPTO_set_mem_debug_functions:near ; CODE XREF:	_main+85p
					; _main+A8p
		extrn _CRYPTO_free:near	; CODE XREF: _main+4DFp _main+4EBp
		extrn _CRYPTO_set_mem_debug_options:near ; CODE	XREF: _main+AFp
		extrn _CRYPTO_dbg_malloc:near ;	DATA XREF: _main+A3o
		extrn _CRYPTO_dbg_realloc:near ; DATA XREF: _main+9Eo
		extrn _CRYPTO_dbg_free:near ; DATA XREF: _main+99o
		extrn _CRYPTO_dbg_set_options:near ; DATA XREF:	_main+94o
		extrn _CRYPTO_dbg_get_options:near ; DATA XREF:	_main:loc_18Bo
		extrn _CRYPTO_mem_leaks_fp:near	; CODE XREF: _main+5C7p
		extrn _ERR_clear_error:near ; CODE XREF: _main+2B3p _main+2D9p
		extrn _ERR_print_errors_fp:near	; CODE XREF: _main+53Fp
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _main+BEp
		extrn _ERR_free_strings:near ; CODE XREF: _main+5B6p
		extrn _ERR_remove_thread_state:near ; CODE XREF: _main+5BDp
		extrn _ENGINE_get_first:near ; CODE XREF: _display_engine_list+2p
					; _main+204p ...
		extrn _ENGINE_get_next:near ; CODE XREF: _display_engine_list+41p
		extrn _ENGINE_add:near	; CODE XREF: _main+1E9p _main+235p ...
		extrn _ENGINE_remove:near ; CODE XREF: _main+20Cp _main+258p ...
		extrn _ENGINE_new:near	; CODE XREF: _main+D7p	_main+11Cp ...
		extrn _ENGINE_free:near	; CODE XREF: _display_engine_list+5Ap
					; _main+227p ...
		extrn _ENGINE_set_id:near ; CODE XREF: _main+F6p _main+135p ...
		extrn _ENGINE_set_name:near ; CODE XREF: _main+10Cp _main+14Bp ...
		extrn _ENGINE_cleanup:near ; CODE XREF:	_main+5ACp
		extrn _ENGINE_get_id:near ; CODE XREF: _display_engine_list+2Bp
					; _main+46Ep ...
		extrn _ENGINE_get_name:near ; CODE XREF: _display_engine_list+21p
					; _main+464p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _main+5DEp
		extrn __chkstk:near	; CODE XREF: _main+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _main+CFp
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
