;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	EDC414F386E78DD198B403C601A1C888
; Input	CRC32 :	9C28E6C1

; File Name   :	C:\compspace\Diff\openssl\obj\co-586.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_mul_comba8_begin
L$_bn_mul_comba8_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_8]
		push	ebp
		push	ebx
		xor	ebx, ebx
		mov	eax, [esi]
		xor	ecx, ecx
		mov	edx, [edi]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi]
		adc	ebp, 0
		mov	[eax], ebx
		mov	eax, [esi+4]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi]
		adc	ebp, edx
		mov	edx, [edi+4]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi]
		adc	ebx, 0
		mov	[eax+4], ecx
		mov	eax, [esi+8]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esi+4]
		adc	ebx, edx
		mov	edx, [edi+4]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi]
		adc	ebx, edx
		mov	edx, [edi+8]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		mov	edx, [edi]
		adc	ecx, 0
		mov	[eax+8], ebp
		mov	eax, [esi+0Ch]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esi+8]
		adc	ecx, edx
		mov	edx, [edi+4]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+4]
		adc	ecx, edx
		mov	edx, [edi+8]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi]
		adc	ecx, edx
		mov	edx, [edi+0Ch]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi]
		adc	ebp, 0
		mov	[eax+0Ch], ebx
		mov	eax, [esi+10h]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi+0Ch]
		adc	ebp, edx
		mov	edx, [edi+4]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+8]
		adc	ebp, edx
		mov	edx, [edi+8]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+4]
		adc	ebp, edx
		mov	edx, [edi+0Ch]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi]
		adc	ebp, edx
		mov	edx, [edi+10h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi]
		adc	ebx, 0
		mov	[eax+10h], ecx
		mov	eax, [esi+14h]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esi+10h]
		adc	ebx, edx
		mov	edx, [edi+4]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+0Ch]
		adc	ebx, edx
		mov	edx, [edi+8]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+8]
		adc	ebx, edx
		mov	edx, [edi+0Ch]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+4]
		adc	ebx, edx
		mov	edx, [edi+10h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi]
		adc	ebx, edx
		mov	edx, [edi+14h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		mov	edx, [edi]
		adc	ecx, 0
		mov	[eax+14h], ebp
		mov	eax, [esi+18h]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esi+14h]
		adc	ecx, edx
		mov	edx, [edi+4]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+10h]
		adc	ecx, edx
		mov	edx, [edi+8]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+0Ch]
		adc	ecx, edx
		mov	edx, [edi+0Ch]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+8]
		adc	ecx, edx
		mov	edx, [edi+10h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+4]
		adc	ecx, edx
		mov	edx, [edi+14h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi]
		adc	ecx, edx
		mov	edx, [edi+18h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi]
		adc	ebp, 0
		mov	[eax+18h], ebx
		mov	eax, [esi+1Ch]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi+18h]
		adc	ebp, edx
		mov	edx, [edi+4]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+14h]
		adc	ebp, edx
		mov	edx, [edi+8]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+10h]
		adc	ebp, edx
		mov	edx, [edi+0Ch]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+0Ch]
		adc	ebp, edx
		mov	edx, [edi+10h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+8]
		adc	ebp, edx
		mov	edx, [edi+14h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+4]
		adc	ebp, edx
		mov	edx, [edi+18h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi]
		adc	ebp, edx
		mov	edx, [edi+1Ch]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi+4]
		adc	ebx, 0
		mov	[eax+1Ch], ecx
		mov	eax, [esi+1Ch]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esi+18h]
		adc	ebx, edx
		mov	edx, [edi+8]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+14h]
		adc	ebx, edx
		mov	edx, [edi+0Ch]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+10h]
		adc	ebx, edx
		mov	edx, [edi+10h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+0Ch]
		adc	ebx, edx
		mov	edx, [edi+14h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+8]
		adc	ebx, edx
		mov	edx, [edi+18h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+4]
		adc	ebx, edx
		mov	edx, [edi+1Ch]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		mov	edx, [edi+8]
		adc	ecx, 0
		mov	[eax+20h], ebp
		mov	eax, [esi+1Ch]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esi+18h]
		adc	ecx, edx
		mov	edx, [edi+0Ch]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+14h]
		adc	ecx, edx
		mov	edx, [edi+10h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+10h]
		adc	ecx, edx
		mov	edx, [edi+14h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+0Ch]
		adc	ecx, edx
		mov	edx, [edi+18h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+8]
		adc	ecx, edx
		mov	edx, [edi+1Ch]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi+0Ch]
		adc	ebp, 0
		mov	[eax+24h], ebx
		mov	eax, [esi+1Ch]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi+18h]
		adc	ebp, edx
		mov	edx, [edi+10h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+14h]
		adc	ebp, edx
		mov	edx, [edi+14h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+10h]
		adc	ebp, edx
		mov	edx, [edi+18h]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+0Ch]
		adc	ebp, edx
		mov	edx, [edi+1Ch]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi+10h]
		adc	ebx, 0
		mov	[eax+28h], ecx
		mov	eax, [esi+1Ch]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esi+18h]
		adc	ebx, edx
		mov	edx, [edi+14h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+14h]
		adc	ebx, edx
		mov	edx, [edi+18h]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi+10h]
		adc	ebx, edx
		mov	edx, [edi+1Ch]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		mov	edx, [edi+14h]
		adc	ecx, 0
		mov	[eax+2Ch], ebp
		mov	eax, [esi+1Ch]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esi+18h]
		adc	ecx, edx
		mov	edx, [edi+18h]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+14h]
		adc	ecx, edx
		mov	edx, [edi+1Ch]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi+18h]
		adc	ebp, 0
		mov	[eax+30h], ebx
		mov	eax, [esi+1Ch]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi+18h]
		adc	ebp, edx
		mov	edx, [edi+1Ch]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi+1Ch]
		adc	ebx, 0
		mov	[eax+34h], ecx
		mov	eax, [esi+1Ch]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		adc	ecx, 0
		mov	[eax+38h], ebp
		mov	[eax+3Ch], ebx
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		retn
L$_bn_mul_comba8_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_mul_comba4_begin
L$_bn_mul_comba4_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_8]
		push	ebp
		push	ebx
		xor	ebx, ebx
		mov	eax, [esi]
		xor	ecx, ecx
		mov	edx, [edi]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi]
		adc	ebp, 0
		mov	[eax], ebx
		mov	eax, [esi+4]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi]
		adc	ebp, edx
		mov	edx, [edi+4]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi]
		adc	ebx, 0
		mov	[eax+4], ecx
		mov	eax, [esi+8]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esi+4]
		adc	ebx, edx
		mov	edx, [edi+4]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esi]
		adc	ebx, edx
		mov	edx, [edi+8]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		mov	edx, [edi]
		adc	ecx, 0
		mov	[eax+8], ebp
		mov	eax, [esi+0Ch]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esi+8]
		adc	ecx, edx
		mov	edx, [edi+4]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi+4]
		adc	ecx, edx
		mov	edx, [edi+8]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esi]
		adc	ecx, edx
		mov	edx, [edi+0Ch]
		adc	ebp, 0
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		mov	edx, [edi+4]
		adc	ebp, 0
		mov	[eax+0Ch], ebx
		mov	eax, [esi+0Ch]
		xor	ebx, ebx
		mul	edx
		add	ecx, eax
		mov	eax, [esi+8]
		adc	ebp, edx
		mov	edx, [edi+8]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esi+4]
		adc	ebp, edx
		mov	edx, [edi+0Ch]
		adc	ebx, 0
		mul	edx
		add	ecx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebp, edx
		mov	edx, [edi+8]
		adc	ebx, 0
		mov	[eax+10h], ecx
		mov	eax, [esi+0Ch]
		xor	ecx, ecx
		mul	edx
		add	ebp, eax
		mov	eax, [esi+8]
		adc	ebx, edx
		mov	edx, [edi+0Ch]
		adc	ecx, 0
		mul	edx
		add	ebp, eax
		mov	eax, [esp+10h+arg_0]
		adc	ebx, edx
		mov	edx, [edi+0Ch]
		adc	ecx, 0
		mov	[eax+14h], ebp
		mov	eax, [esi+0Ch]
		xor	ebp, ebp
		mul	edx
		add	ebx, eax
		mov	eax, [esp+10h+arg_0]
		adc	ecx, edx
		adc	ebp, 0
		mov	[eax+18h], ebx
		mov	[eax+1Ch], ecx
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		retn
L$_bn_mul_comba4_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_sqr_comba8_begin
L$_bn_sqr_comba8_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	ebp
		push	ebx
		mov	edi, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		xor	ebx, ebx
		xor	ecx, ecx
		mov	eax, [esi]
		xor	ebp, ebp
		mul	eax
		add	ebx, eax
		adc	ecx, edx
		mov	edx, [esi]
		adc	ebp, 0
		mov	[edi], ebx
		mov	eax, [esi+4]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+8]
		adc	ebx, 0
		mov	[edi+4], ecx
		mov	edx, [esi]
		xor	ecx, ecx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+4]
		adc	ecx, 0
		mul	eax
		add	ebp, eax
		adc	ebx, edx
		mov	edx, [esi]
		adc	ecx, 0
		mov	[edi+8], ebp
		mov	eax, [esi+0Ch]
		xor	ebp, ebp
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+8]
		adc	ebp, 0
		mov	edx, [esi+4]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+10h]
		adc	ebp, 0
		mov	[edi+0Ch], ebx
		mov	edx, [esi]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+0Ch]
		adc	ebx, 0
		mov	edx, [esi+4]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+8]
		adc	ebx, 0
		mul	eax
		add	ecx, eax
		adc	ebp, edx
		mov	edx, [esi]
		adc	ebx, 0
		mov	[edi+10h], ecx
		mov	eax, [esi+14h]
		xor	ecx, ecx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+10h]
		adc	ecx, 0
		mov	edx, [esi+4]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+0Ch]
		adc	ecx, 0
		mov	edx, [esi+8]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+18h]
		adc	ecx, 0
		mov	[edi+14h], ebp
		mov	edx, [esi]
		xor	ebp, ebp
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+14h]
		adc	ebp, 0
		mov	edx, [esi+4]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+10h]
		adc	ebp, 0
		mov	edx, [esi+8]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+0Ch]
		adc	ebp, 0
		mul	eax
		add	ebx, eax
		adc	ecx, edx
		mov	edx, [esi]
		adc	ebp, 0
		mov	[edi+18h], ebx
		mov	eax, [esi+1Ch]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+18h]
		adc	ebx, 0
		mov	edx, [esi+4]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+14h]
		adc	ebx, 0
		mov	edx, [esi+8]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+10h]
		adc	ebx, 0
		mov	edx, [esi+0Ch]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+1Ch]
		adc	ebx, 0
		mov	[edi+1Ch], ecx
		mov	edx, [esi+4]
		xor	ecx, ecx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+18h]
		adc	ecx, 0
		mov	edx, [esi+8]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+14h]
		adc	ecx, 0
		mov	edx, [esi+0Ch]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+10h]
		adc	ecx, 0
		mul	eax
		add	ebp, eax
		adc	ebx, edx
		mov	edx, [esi+8]
		adc	ecx, 0
		mov	[edi+20h], ebp
		mov	eax, [esi+1Ch]
		xor	ebp, ebp
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+18h]
		adc	ebp, 0
		mov	edx, [esi+0Ch]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+14h]
		adc	ebp, 0
		mov	edx, [esi+10h]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+1Ch]
		adc	ebp, 0
		mov	[edi+24h], ebx
		mov	edx, [esi+0Ch]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+18h]
		adc	ebx, 0
		mov	edx, [esi+10h]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+14h]
		adc	ebx, 0
		mul	eax
		add	ecx, eax
		adc	ebp, edx
		mov	edx, [esi+10h]
		adc	ebx, 0
		mov	[edi+28h], ecx
		mov	eax, [esi+1Ch]
		xor	ecx, ecx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+18h]
		adc	ecx, 0
		mov	edx, [esi+14h]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+1Ch]
		adc	ecx, 0
		mov	[edi+2Ch], ebp
		mov	edx, [esi+14h]
		xor	ebp, ebp
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+18h]
		adc	ebp, 0
		mul	eax
		add	ebx, eax
		adc	ecx, edx
		mov	edx, [esi+18h]
		adc	ebp, 0
		mov	[edi+30h], ebx
		mov	eax, [esi+1Ch]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+1Ch]
		adc	ebx, 0
		mov	[edi+34h], ecx
		xor	ecx, ecx
		mul	eax
		add	ebp, eax
		adc	ebx, edx
		adc	ecx, 0
		mov	[edi+38h], ebp
		mov	[edi+3Ch], ebx
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		retn
L$_bn_sqr_comba8_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_sqr_comba4_begin
L$_bn_sqr_comba4_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	ebp
		push	ebx
		mov	edi, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		xor	ebx, ebx
		xor	ecx, ecx
		mov	eax, [esi]
		xor	ebp, ebp
		mul	eax
		add	ebx, eax
		adc	ecx, edx
		mov	edx, [esi]
		adc	ebp, 0
		mov	[edi], ebx
		mov	eax, [esi+4]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+8]
		adc	ebx, 0
		mov	[edi+4], ecx
		mov	edx, [esi]
		xor	ecx, ecx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+4]
		adc	ecx, 0
		mul	eax
		add	ebp, eax
		adc	ebx, edx
		mov	edx, [esi]
		adc	ecx, 0
		mov	[edi+8], ebp
		mov	eax, [esi+0Ch]
		xor	ebp, ebp
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+8]
		adc	ebp, 0
		mov	edx, [esi+4]
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebp, 0
		add	ebx, eax
		adc	ecx, edx
		mov	eax, [esi+0Ch]
		adc	ebp, 0
		mov	[edi+0Ch], ebx
		mov	edx, [esi+4]
		xor	ebx, ebx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ebx, 0
		add	ecx, eax
		adc	ebp, edx
		mov	eax, [esi+8]
		adc	ebx, 0
		mul	eax
		add	ecx, eax
		adc	ebp, edx
		mov	edx, [esi+8]
		adc	ebx, 0
		mov	[edi+10h], ecx
		mov	eax, [esi+0Ch]
		xor	ecx, ecx
		mul	edx
		add	eax, eax
		adc	edx, edx
		adc	ecx, 0
		add	ebp, eax
		adc	ebx, edx
		mov	eax, [esi+0Ch]
		adc	ecx, 0
		mov	[edi+14h], ebp
		xor	ebp, ebp
		mul	eax
		add	ebx, eax
		adc	ecx, edx
		adc	ebp, 0
		mov	[edi+18h], ebx
		mov	[edi+1Ch], ecx
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		retn
L$_bn_sqr_comba4_begin endp

_text		ends


		end
