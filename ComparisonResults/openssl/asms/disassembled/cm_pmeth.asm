;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DF701887549DCB434EDB0EF22E833999
; Input	CRC32 :	90B5DBF8

; File Name   :	C:\compspace\Diff\openssl\obj\cm_pmeth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cmac_init	proc near		; DATA XREF: .rdata:000002E8o

arg_0		= dword	ptr  4

		call	_CMAC_CTX_new
		mov	ecx, [esp+arg_0]
		mov	[ecx+14h], eax
		test	eax, eax
		jnz	short loc_11
		retn
; ---------------------------------------------------------------------------

loc_11:					; CODE XREF: _pkey_cmac_init+Ej
		mov	dword ptr [ecx+24h], 0
		mov	eax, 1
		retn
_pkey_cmac_init	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cmac_copy	proc near		; DATA XREF: .rdata:000002ECo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		call	_CMAC_CTX_new
		mov	ecx, [esp+arg_0]
		mov	[ecx+14h], eax
		test	eax, eax
		jz	short loc_4E
		mov	dword ptr [ecx+24h], 0
		mov	ecx, [esp+arg_4]
		push	dword ptr [ecx+14h]
		push	eax
		call	_CMAC_CTX_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
; ---------------------------------------------------------------------------

loc_4E:					; CODE XREF: _pkey_cmac_copy+Ej
		xor	eax, eax
		retn
_pkey_cmac_copy	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cmac_cleanup proc	near		; DATA XREF: .rdata:000002F0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_CMAC_CTX_free
		pop	ecx
		retn
_pkey_cmac_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cmac_keygen proc near		; DATA XREF: .rdata:00000300o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_CMAC_CTX_new
		mov	ecx, [esp+4+arg_0]
		mov	esi, eax
		test	esi, esi
		jz	short loc_8D
		push	dword ptr [ecx+14h]
		push	esi
		call	_CMAC_CTX_copy
		add	esp, 8
		push	esi
		test	eax, eax
		jnz	short loc_91
		call	_CMAC_CTX_free
		add	esp, 4

loc_8D:					; CODE XREF: _pkey_cmac_keygen+Ej
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_91:					; CODE XREF: _pkey_cmac_keygen+1Fj
		push	37Eh
		push	[esp+0Ch+arg_4]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		retn
_pkey_cmac_keygen endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmac_signctx_init proc	near		; DATA XREF: .rdata:0000031Co

arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	100h
		push	esi
		call	_EVP_MD_CTX_set_flags
		add	esp, 8
		mov	dword ptr [esi+14h], offset _int_update
		mov	eax, 1
		pop	esi
		retn
_cmac_signctx_init endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmac_signctx	proc near		; DATA XREF: .rdata:00000320o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+14h]
		call	_CMAC_Final
		add	esp, 0Ch
		retn
_cmac_signctx	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cmac_ctrl	proc near		; DATA XREF: .rdata:00000344o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [ecx+14h]
		sub	eax, 1
		jz	short loc_13E
		sub	eax, 5
		jz	short loc_117
		sub	eax, 6
		jz	short loc_10A
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10A:				; CODE XREF: _pkey_cmac_ctrl+19j
		push	dword ptr [ecx+4]
		push	[esp+8+arg_C]
		push	0
		push	0
		jmp	short loc_12D
; ---------------------------------------------------------------------------

loc_117:				; CODE XREF: _pkey_cmac_ctrl+14j
		mov	eax, [esp+4+arg_C]
		test	eax, eax
		jz	short loc_13A
		mov	ecx, [esp+4+arg_8]
		test	ecx, ecx
		js	short loc_13A
		push	0
		push	0
		push	ecx
		push	eax

loc_12D:				; CODE XREF: _pkey_cmac_ctrl+2Dj
					; _pkey_cmac_ctrl+75j
		push	esi
		call	_CMAC_Init
		add	esp, 14h
		test	eax, eax
		jnz	short loc_15F

loc_13A:				; CODE XREF: _pkey_cmac_ctrl+35j
					; _pkey_cmac_ctrl+3Dj ...
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_13E:				; CODE XREF: _pkey_cmac_ctrl+Fj
		mov	eax, [ecx+8]
		test	eax, eax
		jz	short loc_155
		push	dword ptr [eax+14h]
		push	esi
		call	_CMAC_CTX_copy
		add	esp, 8
		test	eax, eax
		jz	short loc_13A

loc_155:				; CODE XREF: _pkey_cmac_ctrl+5Bj
		push	0
		push	0
		push	0
		push	0
		jmp	short loc_12D
; ---------------------------------------------------------------------------

loc_15F:				; CODE XREF: _pkey_cmac_ctrl+50j
		mov	eax, 1
		pop	esi
		retn
_pkey_cmac_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cmac_ctrl_str proc near		; DATA XREF: .rdata:00000348o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jnz	short loc_175
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_175:				; CODE XREF: _pkey_cmac_ctrl_str+7j
		mov	ecx, [esp+4+arg_4]
		mov	edx, offset ??_C@_03ICHNJLJF@key?$AA@ ;	`string'
		mov	eax, ecx
		push	ebx
		nop	dword ptr [eax+00000000h]

loc_188:				; CODE XREF: _pkey_cmac_ctrl_str+3Aj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_1A8
		test	bl, bl
		jz	short loc_1A4
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_1A8
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_188

loc_1A4:				; CODE XREF: _pkey_cmac_ctrl_str+28j
		xor	eax, eax
		jmp	short loc_1AD
; ---------------------------------------------------------------------------

loc_1A8:				; CODE XREF: _pkey_cmac_ctrl_str+24j
					; _pkey_cmac_ctrl_str+30j
		sbb	eax, eax
		or	eax, 1

loc_1AD:				; CODE XREF: _pkey_cmac_ctrl_str+3Ej
		test	eax, eax
		jnz	short loc_1E4
		mov	ecx, esi
		lea	edx, [ecx+1]
		xchg	ax, ax

loc_1B8:				; CODE XREF: _pkey_cmac_ctrl_str+55j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1B8
		sub	ecx, edx
		mov	eax, [esp+8+arg_0]
		js	short loc_223
		push	0
		push	0
		push	ecx
		push	esi
		push	dword ptr [eax+14h]
		call	_CMAC_Init
		add	esp, 14h
		test	eax, eax
		jz	short loc_223
		pop	ebx
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1E4:				; CODE XREF: _pkey_cmac_ctrl_str+47j
		mov	edx, offset ??_C@_06KDGDAFPH@cipher?$AA@ ; "cipher"
		mov	eax, ecx

loc_1EB:				; CODE XREF: _pkey_cmac_ctrl_str+9Dj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_20B
		test	bl, bl
		jz	short loc_207
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_20B
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_1EB

loc_207:				; CODE XREF: _pkey_cmac_ctrl_str+8Bj
		xor	eax, eax
		jmp	short loc_210
; ---------------------------------------------------------------------------

loc_20B:				; CODE XREF: _pkey_cmac_ctrl_str+87j
					; _pkey_cmac_ctrl_str+93j
		sbb	eax, eax
		or	eax, 1

loc_210:				; CODE XREF: _pkey_cmac_ctrl_str+A1j
		test	eax, eax
		jnz	short loc_248
		push	esi
		call	_EVP_get_cipherbyname
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_228

loc_223:				; CODE XREF: _pkey_cmac_ctrl_str+5Dj
					; _pkey_cmac_ctrl_str+72j
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_228:				; CODE XREF: _pkey_cmac_ctrl_str+B9j
		mov	eax, [esp+8+arg_0]
		push	dword ptr [eax+4]
		push	ecx
		push	0
		push	0
		push	dword ptr [eax+14h]
		call	_CMAC_Init
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_248:				; CODE XREF: _pkey_cmac_ctrl_str+AAj
		mov	eax, offset ??_C@_06BHJHKMJC@hexkey?$AA@ ; "hexkey"

loc_24D:				; CODE XREF: _pkey_cmac_ctrl_str+FFj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_26D
		test	dl, dl
		jz	short loc_269
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_26D
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_24D

loc_269:				; CODE XREF: _pkey_cmac_ctrl_str+EDj
		xor	eax, eax
		jmp	short loc_272
; ---------------------------------------------------------------------------

loc_26D:				; CODE XREF: _pkey_cmac_ctrl_str+E9j
					; _pkey_cmac_ctrl_str+F5j
		sbb	eax, eax
		or	eax, 1

loc_272:				; CODE XREF: _pkey_cmac_ctrl_str+103j
		test	eax, eax
		jnz	short loc_2D6
		push	edi
		lea	eax, [esp+0Ch+arg_8]
		push	eax
		push	esi
		call	_string_to_hex
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_28F
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_28F:				; CODE XREF: _pkey_cmac_ctrl_str+121j
		mov	eax, [esp+0Ch+arg_0]
		mov	ecx, [eax+14h]
		mov	eax, [esp+0Ch+arg_8]
		test	eax, eax
		js	short loc_2C5
		push	0
		push	0
		push	eax
		push	edi
		push	ecx
		call	_CMAC_Init
		add	esp, 14h
		test	eax, eax
		jz	short loc_2C5
		push	edi
		mov	esi, 1
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2C5:				; CODE XREF: _pkey_cmac_ctrl_str+134j
					; _pkey_cmac_ctrl_str+147j
		push	edi
		xor	esi, esi
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2D6:				; CODE XREF: _pkey_cmac_ctrl_str+10Cj
		pop	ebx
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_pkey_cmac_ctrl_str endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 2E0h
		public _cmac_pkey_meth
_cmac_pkey_meth	dd offset ??_C@_06BHJHKMJC@hexkey?$AA@+2 ; "xkey"
		dd 4
		dd offset _pkey_cmac_init
		dd offset _pkey_cmac_copy
		dd offset _pkey_cmac_cleanup
		align 10h
		dd offset _pkey_cmac_keygen
		dd 6 dup(0)
		dd offset _cmac_signctx_init
		dd offset _cmac_signctx
		dd 8 dup(0)
		dd offset _pkey_cmac_ctrl
		dd offset _pkey_cmac_ctrl_str
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_update	proc near		; DATA XREF: _cmac_signctx_init+13o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		mov	eax, [eax+10h]
		push	dword ptr [eax+14h]
		call	_CMAC_Update
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_int_update	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 370h
; COMDAT (pick any)
		public ??_C@_03ICHNJLJF@key?$AA@
; `string'
??_C@_03ICHNJLJF@key?$AA@ dd 79656Bh	; DATA XREF: _pkey_cmac_ctrl_str+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 374h
; COMDAT (pick any)
		public ??_C@_06KDGDAFPH@cipher?$AA@
; `string'
??_C@_06KDGDAFPH@cipher?$AA@ db	'cipher',0 ; DATA XREF: _pkey_cmac_ctrl_str:loc_1E4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 37Ch
; COMDAT (pick any)
		public ??_C@_06BHJHKMJC@hexkey?$AA@
; `string'
??_C@_06BHJHKMJC@hexkey?$AA@ db	'hexkey',0 ; DATA XREF: _pkey_cmac_ctrl_str:loc_248o
					; .rdata:_cmac_pkey_metho
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_free:near	; CODE XREF: _pkey_cmac_ctrl_str+14Fp
					; _pkey_cmac_ctrl_str+160p
		extrn _EVP_MD_CTX_set_flags:near ; CODE	XREF: _cmac_signctx_init+Bp
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _pkey_cmac_ctrl_str+ADp
		extrn _EVP_PKEY_assign:near ; CODE XREF: _pkey_cmac_keygen+36p
		extrn _string_to_hex:near ; CODE XREF: _pkey_cmac_ctrl_str+115p
		extrn _CMAC_CTX_new:near ; CODE	XREF: _pkey_cmac_initp
					; _pkey_cmac_copyp ...
		extrn _CMAC_CTX_free:near ; CODE XREF: _pkey_cmac_cleanup+7p
					; _pkey_cmac_keygen+21p
		extrn _CMAC_CTX_copy:near ; CODE XREF: _pkey_cmac_copy+1Fp
					; _pkey_cmac_keygen+14p ...
		extrn _CMAC_Init:near	; CODE XREF: _pkey_cmac_ctrl+46p
					; _pkey_cmac_ctrl_str+68p ...
		extrn _CMAC_Update:near	; CODE XREF: _int_update+12p
		extrn _CMAC_Final:near	; CODE XREF: _cmac_signctx+Fp


		end
