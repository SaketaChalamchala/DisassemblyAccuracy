;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6F010210E7054001F350AAB95362092B
; Input	CRC32 :	B05C1388

; File Name   :	C:\compspace\Diff\openssl\obj\bio_md.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_write	proc near		; DATA XREF: .data:00000364o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		xor	edi, edi
		test	ebx, ebx
		jz	short loc_7E
		mov	eax, [esp+8+arg_8]
		test	eax, eax
		jle	short loc_7E
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		mov	ebp, [esi+20h]
		test	ebp, ebp
		jz	short loc_35
		mov	ecx, [esi+24h]
		test	ecx, ecx
		jz	short loc_35
		push	eax
		push	ebx
		push	ecx
		call	_BIO_write
		add	esp, 0Ch
		mov	edi, eax

loc_35:					; CODE XREF: _md_write+1Fj
					; _md_write+26j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_60
		test	edi, edi
		jle	short loc_60
		push	edi
		push	ebx
		push	ebp
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_60
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		add	esp, 8
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_60:					; CODE XREF: _md_write+39j
					; _md_write+3Dj ...
		cmp	dword ptr [esi+24h], 0
		jz	short loc_77
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		push	esi
		call	_BIO_copy_next_retry
		add	esp, 0Ch

loc_77:					; CODE XREF: _md_write+64j
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_7E:					; CODE XREF: _md_write+Aj
					; _md_write+12j
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
_md_write	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_read	proc near		; DATA XREF: .data:00000368o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jnz	short loc_91
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_91:					; CODE XREF: _md_read+7j
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	ebp, [esi+20h]
		test	ebp, ebp
		jz	short loc_EF
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_EF
		push	ebx
		push	[esp+10h+arg_8]
		push	edi
		push	eax
		call	_BIO_read
		add	esp, 0Ch
		mov	ebx, eax
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_D7
		test	ebx, ebx
		jle	short loc_D7
		push	ebx
		push	edi
		push	ebp
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_D7
		pop	ebx
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_D7:					; CODE XREF: _md_read+36j _md_read+3Aj ...
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		push	esi
		call	_BIO_copy_next_retry
		add	esp, 0Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_EF:					; CODE XREF: _md_read+18j _md_read+1Fj
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	edi
		retn
_md_read	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_gets	proc near		; DATA XREF: .data:00000370o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [eax+20h]
		mov	eax, [esp+arg_8]
		mov	ecx, [edx]
		cmp	eax, [ecx+8]
		jge	short loc_10D
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10D:				; CODE XREF: _md_gets+10j
		lea	eax, [esp+arg_0]
		push	eax
		push	[esp+4+arg_4]
		push	edx
		call	_EVP_DigestFinal_ex
		mov	ecx, [esp+0Ch+arg_0]
		or	edx, 0FFFFFFFFh
		add	esp, 0Ch
		test	eax, eax
		cmovle	ecx, edx
		mov	eax, ecx
		retn
_md_gets	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 130h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_ctrl	proc near		; DATA XREF: .data:00000374o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		lea	eax, [ebx-1]	; switch 148 cases
		mov	edi, 1
		mov	ecx, [esi+20h]
		cmp	eax, 93h ; '“'
		ja	short $LN20	; jumptable 00000154 default case
		movzx	eax, ds:$LN22[eax]
		jmp	ds:$LN24[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		cmp	dword ptr [esi+0Ch], 0 ; jumptable 00000154 case 1
		jz	short loc_1A4
		push	0
		push	dword ptr [ecx]
		push	ecx
		call	_EVP_DigestInit_ex
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jle	short loc_18A

$LN20:					; CODE XREF: _md_ctrl+1Bj _md_ctrl+24j
					; DATA XREF: ...
		push	[esp+0Ch+arg_C]	; jumptable 00000154 default case
		push	[esp+10h+arg_8]
		push	ebx
		push	dword ptr [esi+24h]
		call	_BIO_ctrl
		mov	edi, eax
		add	esp, 10h

loc_18A:				; CODE XREF: _md_ctrl+42j _md_ctrl+DBj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN8:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		cmp	dword ptr [esi+0Ch], 0 ; jumptable 00000154 case 112
		jz	short loc_1A4
		mov	eax, [esp+0Ch+arg_C]
		mov	ecx, [ecx]
		mov	[eax], ecx
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1A4:				; CODE XREF: _md_ctrl+2Fj _md_ctrl+64j ...
		xor	edi, edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		mov	eax, [esp+0Ch+arg_C] ; jumptable 00000154 case 120
		mov	[eax], ecx

loc_1B2:				; CODE XREF: _md_ctrl+FEj
		mov	[esi+0Ch], edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		cmp	dword ptr [esi+0Ch], 0 ; jumptable 00000154 case 148
		jz	short loc_1A4
		mov	eax, [esp+0Ch+arg_C]
		mov	[esi+20h], eax
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		push	0Fh		; jumptable 00000154 case 101
		push	esi
		call	_BIO_clear_flags
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_8]
		push	ebx
		push	dword ptr [esi+24h]
		call	_BIO_ctrl
		push	esi
		mov	edi, eax
		call	_BIO_copy_next_retry
		add	esp, 1Ch
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		push	0		; jumptable 00000154 case 111
		push	[esp+10h+arg_C]
		push	ecx
		call	_EVP_DigestInit_ex
		mov	edi, eax

loc_206:				; DATA XREF: .data:_methods_mdo
		add	esp, 0Ch
		test	edi, edi
		jle	loc_18A
		pop	edi
		mov	dword ptr [esi+0Ch], 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _md_ctrl+24j
					; DATA XREF: .text$mn:$LN24o
		mov	eax, [esp+0Ch+arg_C] ; jumptable 00000154 case 12
		push	ecx
		push	dword ptr [eax+20h]
		call	_EVP_MD_CTX_copy_ex
		add	esp, 8
		test	eax, eax
		jnz	short loc_1B2
		pop	edi
		pop	esi
		pop	ebx
		retn
_md_ctrl	endp

; ---------------------------------------------------------------------------
$LN24		dd offset $LN4,	offset $LN18, offset $LN15, offset $LN16
					; DATA XREF: _md_ctrl+24r
		dd offset $LN8,	offset $LN11, offset $LN12, offset $LN20 ; jump	table for switch statement
$LN22		db	0,     7,     7,     7 ; DATA XREF: _md_ctrl+1Dr
		db	7,     7,     7,     7 ; indirect table	for switch statement
		db	7,     7,     7,     1
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	2,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     3,     4
		db	7,     7,     7,     7
		db	7,     7,     7,     5
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     7
		db	7,     7,     7,     6
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_new		proc near		; DATA XREF: .data:00000378o

arg_0		= dword	ptr  4

		call	_EVP_MD_CTX_create
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_2F4
		retn
; ---------------------------------------------------------------------------

loc_2F4:				; CODE XREF: _md_new+9j
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+0Ch], 0
		mov	[eax+20h], ecx
		mov	dword ptr [eax+14h], 0
		mov	eax, 1
		retn
_md_new		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 310h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_free	proc near		; DATA XREF: .data:0000037Co

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_31D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_31D:				; CODE XREF: _md_free+7j
		push	dword ptr [esi+20h]
		call	_EVP_MD_CTX_destroy
		add	esp, 4
		mov	dword ptr [esi+20h], 0
		mov	dword ptr [esi+0Ch], 0
		mov	eax, 1
		mov	dword ptr [esi+14h], 0
		pop	esi
		retn
_md_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 344h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_md_callback_ctrl proc near		; DATA XREF: .data:00000380o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_350
		retn
; ---------------------------------------------------------------------------

loc_350:				; CODE XREF: _md_callback_ctrl+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_callback_ctrl
_md_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 35Ch
_methods_md	dd offset loc_206+2	; DATA XREF: _BIO_f_mdo
		dd offset ??_C@_0P@ONGHGJEC@message?5digest?$AA@ ; "message digest"
		dd offset _md_write
		dd offset _md_read
		align 10h
		dd offset _md_gets
		dd offset _md_ctrl
		dd offset _md_new
		dd offset _md_free
		dd offset _md_callback_ctrl
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 384h
; COMDAT (pick any)
		public ??_C@_0P@ONGHGJEC@message?5digest?$AA@
; `string'
??_C@_0P@ONGHGJEC@message?5digest?$AA@ db 'message digest',0 ; DATA XREF: .data:00000360o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 394h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_f_md
_BIO_f_md	proc near
		mov	eax, offset _methods_md
		retn
_BIO_f_md	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_clear_flags:near ; CODE XREF: _md_write+51p
					; _md_write+69p ...
		extrn _BIO_read:near	; CODE XREF: _md_read+28p
		extrn _BIO_write:near	; CODE XREF: _md_write+2Bp
		extrn _BIO_ctrl:near	; CODE XREF: _md_ctrl+50p _md_ctrl+B2p
		extrn _BIO_callback_ctrl:near ;	CODE XREF: _md_callback_ctrl+10j
		extrn _BIO_copy_next_retry:near	; CODE XREF: _md_write+6Fp
					; _md_read+5Cp	...
		extrn _EVP_MD_CTX_create:near ;	CODE XREF: _md_newp
		extrn _EVP_MD_CTX_destroy:near ; CODE XREF: _md_free+10p
		extrn _EVP_MD_CTX_copy_ex:near ; CODE XREF: _md_ctrl+F4p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _md_ctrl+36p
					; _md_ctrl+CFp
		extrn _EVP_DigestUpdate:near ; CODE XREF: _md_write+42p
					; _md_read+3Fp
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _md_gets+1Fp


		end
