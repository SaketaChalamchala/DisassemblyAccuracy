;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	017D156346D25A82780368118EF4A20A
; Input	CRC32 :	AA62916E

; File Name   :	C:\compspace\Diff\openssl\obj\dsa_ossl.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dsa_do_sign	proc near		; DATA XREF: .data:0000074Co

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_14		= byte ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 34h ; '4'
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		lea	eax, [esp+44h+var_28]
		mov	[esp+44h+var_30], 0
		xor	ebx, ebx
		mov	[esp+44h+var_34], 0
		push	eax
		xor	edi, edi
		mov	[esp+48h+var_2C], ebx
		xor	ebp, ebp
		call	_BN_init
		lea	eax, [esp+48h+var_14]
		push	eax
		call	_BN_init
		mov	esi, [esp+4Ch+arg_8]
		add	esp, 8
		cmp	[esi+0Ch], ebx
		jz	loc_1C0
		cmp	[esi+10h], ebx
		jz	loc_1C0
		cmp	[esi+14h], ebx
		jz	loc_1C0
		call	_BN_new
		mov	edi, eax
		test	edi, edi
		jz	loc_1C9
		call	_BN_CTX_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_1C9
		mov	ebp, [esp+44h+arg_4]

$redo$47:				; CODE XREF: _dsa_do_sign+19Aj
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_AE
		mov	ecx, [esi+24h]
		test	ecx, ecx
		jz	short loc_AE
		mov	[esp+44h+var_30], eax
		mov	dword ptr [esi+20h], 0
		mov	[esp+44h+var_34], ecx
		mov	dword ptr [esi+24h], 0
		mov	[esp+44h+var_2C], 1
		jmp	short loc_CA
; ---------------------------------------------------------------------------

loc_AE:					; CODE XREF: _dsa_do_sign+85j
					; _dsa_do_sign+8Cj
		lea	eax, [esp+44h+var_34]
		push	eax
		lea	eax, [esp+48h+var_30]
		push	eax
		push	ebx
		push	esi
		call	_DSA_sign_setup
		add	esp, 10h
		test	eax, eax
		jz	loc_1C7

loc_CA:					; CODE XREF: _dsa_do_sign+ACj
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ebp, eax
		jle	short loc_FD
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	ebp, [edx+eax]
		sar	ebp, 3

loc_FD:					; CODE XREF: _dsa_do_sign+E3j
		lea	eax, [esp+44h+var_28]
		push	eax
		push	ebp
		push	[esp+4Ch+arg_0]
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1C7
		push	ebx
		push	dword ptr [esi+10h]
		lea	eax, [esp+4Ch+var_14]
		push	[esp+4Ch+var_34]
		push	dword ptr [esi+1Ch]
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	loc_1C7
		lea	eax, [esp+44h+var_28]
		push	eax
		lea	eax, [esp+48h+var_14]
		push	eax
		push	edi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1C7
		push	dword ptr [esi+10h]
		push	edi
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		jle	short loc_16F
		push	dword ptr [esi+10h]
		push	edi
		push	edi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1C7

loc_16F:				; CODE XREF: _dsa_do_sign+15Cj
		push	ebx
		push	dword ptr [esi+10h]
		push	[esp+4Ch+var_30]
		push	edi
		push	edi
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	short loc_1C7
		mov	eax, [esp+44h+var_34]
		cmp	dword ptr [eax+4], 0
		jz	short loc_195
		cmp	dword ptr [edi+4], 0
		jnz	short loc_1A9

loc_195:				; CODE XREF: _dsa_do_sign+18Dj
		cmp	[esp+44h+var_2C], 0
		jz	$redo$47
		mov	eax, 6Eh ; 'n'
		xor	ebp, ebp
		jmp	short loc_1CE
; ---------------------------------------------------------------------------

loc_1A9:				; CODE XREF: _dsa_do_sign+193j
		call	_DSA_SIG_new
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_1C9
		mov	ecx, [esp+44h+var_34]
		mov	[ebp+0], ecx
		mov	[ebp+4], edi
		jmp	short loc_1F4
; ---------------------------------------------------------------------------

loc_1C0:				; CODE XREF: _dsa_do_sign+46j
					; _dsa_do_sign+4Fj ...
		mov	eax, 65h ; 'e'
		jmp	short loc_1CE
; ---------------------------------------------------------------------------

loc_1C7:				; CODE XREF: _dsa_do_sign+C4j
					; _dsa_do_sign+111j ...
		xor	ebp, ebp

loc_1C9:				; CODE XREF: _dsa_do_sign+67j
					; _dsa_do_sign+76j ...
		mov	eax, 3

loc_1CE:				; CODE XREF: _dsa_do_sign+1A7j
					; _dsa_do_sign+1C5j
		push	0D1h ; 'Ñ'
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	eax
		push	70h ; 'p'
		push	0Ah
		call	_ERR_put_error
		push	[esp+58h+var_34]
		call	_BN_free
		push	edi
		call	_BN_free
		add	esp, 1Ch

loc_1F4:				; CODE XREF: _dsa_do_sign+1BEj
		test	ebx, ebx
		jz	short loc_201
		push	ebx
		call	_BN_CTX_free
		add	esp, 4

loc_201:				; CODE XREF: _dsa_do_sign+1F6j
		lea	eax, [esp+44h+var_28]
		push	eax
		call	_BN_clear_free
		lea	eax, [esp+48h+var_14]
		push	eax
		call	_BN_clear_free
		mov	eax, [esp+4Ch+var_30]
		add	esp, 8
		test	eax, eax
		jz	short loc_229
		push	eax
		call	_BN_clear_free
		add	esp, 4

loc_229:				; CODE XREF: _dsa_do_sign+21Ej
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 34h
		retn
_dsa_do_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 234h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dsa_sign_setup	proc near		; DATA XREF: .data:00000750o

var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 28h ; '('
		call	__chkstk
		push	ebx
		push	edi
		mov	edi, [esp+30h+arg_0]
		xor	ebx, ebx
		cmp	[edi+0Ch], ebx
		jz	loc_447
		cmp	[edi+10h], ebx
		jz	loc_447
		cmp	[edi+14h], ebx
		jz	loc_447
		push	ebp
		lea	eax, [esp+34h+var_28]
		push	esi
		push	eax
		call	_BN_init
		lea	eax, [esp+3Ch+var_14]
		push	eax
		call	_BN_init
		mov	eax, [esp+40h+arg_4]
		add	esp, 8
		test	eax, eax
		jnz	short loc_2E5
		call	_BN_CTX_new
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_2E7

loc_28D:				; CODE XREF: _dsa_sign_setup+BCj
					; _dsa_sign_setup+D2j ...
		push	130h
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	3
		push	6Bh ; 'k'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_2B2
		push	ebx
		call	_BN_clear_free
		add	esp, 4

loc_2B2:				; CODE XREF: _dsa_sign_setup+73j
		xor	ebx, ebx

loc_2B4:				; CODE XREF: _dsa_sign_setup+20Ej
		cmp	[esp+38h+arg_4], 0
		jnz	short loc_2C4
		push	ebp
		call	_BN_CTX_free
		add	esp, 4

loc_2C4:				; CODE XREF: _dsa_sign_setup+85j
		lea	eax, [esp+38h+var_28]
		push	eax
		call	_BN_clear_free
		lea	eax, [esp+3Ch+var_14]
		push	eax
		call	_BN_clear_free
		add	esp, 8
		mov	eax, ebx
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_2E5:				; CODE XREF: _dsa_sign_setup+4Cj
		mov	ebp, eax

loc_2E7:				; CODE XREF: _dsa_sign_setup+57j
		call	_BN_new
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_28D
		xchg	ax, ax

loc_2F4:				; CODE XREF: _dsa_sign_setup+D9j
		push	dword ptr [edi+10h]
		lea	eax, [esp+3Ch+var_28]
		push	eax
		call	_BN_rand_range
		add	esp, 8
		test	eax, eax
		jz	short loc_28D
		cmp	[esp+38h+var_24], 0
		jz	short loc_2F4
		mov	eax, [edi+28h]
		test	al, 2
		jnz	short loc_31B
		or	[esp+38h+var_18], 4

loc_31B:				; CODE XREF: _dsa_sign_setup+E0j
		test	al, 1
		jz	short loc_339
		push	ebp
		push	dword ptr [edi+0Ch]
		lea	eax, [edi+2Ch]
		push	8
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	loc_28D

loc_339:				; CODE XREF: _dsa_sign_setup+E9j
		test	byte ptr [edi+28h], 2
		jnz	short loc_3AC
		lea	eax, [esp+38h+var_28]
		push	eax
		lea	eax, [esp+3Ch+var_14]
		push	eax
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	loc_28D
		push	dword ptr [edi+10h]
		lea	eax, [esp+3Ch+var_14]
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_28D
		lea	eax, [esp+38h+var_14]
		push	eax
		call	_BN_num_bits
		push	dword ptr [edi+10h]
		mov	esi, eax
		call	_BN_num_bits
		add	esp, 8
		cmp	esi, eax
		jg	short loc_3A6
		push	dword ptr [edi+10h]
		lea	eax, [esp+3Ch+var_14]
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_28D

loc_3A6:				; CODE XREF: _dsa_sign_setup+157j
		lea	ecx, [esp+38h+var_14]
		jmp	short loc_3B0
; ---------------------------------------------------------------------------

loc_3AC:				; CODE XREF: _dsa_sign_setup+109j
		lea	ecx, [esp+38h+var_28]

loc_3B0:				; CODE XREF: _dsa_sign_setup+176j
		push	dword ptr [edi+2Ch]
		mov	eax, [edi+3Ch]
		push	ebp
		push	dword ptr [edi+0Ch]
		mov	eax, [eax+14h]
		push	ecx
		push	dword ptr [edi+14h]
		push	ebx
		test	eax, eax
		jz	short loc_3CE
		push	edi
		call	eax
		add	esp, 1Ch
		jmp	short loc_3D6
; ---------------------------------------------------------------------------

loc_3CE:				; CODE XREF: _dsa_sign_setup+190j
		call	_BN_mod_exp_mont
		add	esp, 18h

loc_3D6:				; CODE XREF: _dsa_sign_setup+198j
		test	eax, eax
		jz	loc_28D
		push	ebp
		push	dword ptr [edi+10h]
		push	ebx
		push	ebx
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	loc_28D
		push	ebp
		push	dword ptr [edi+10h]
		lea	eax, [esp+40h+var_28]
		push	eax
		push	0
		call	_BN_mod_inverse
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	loc_28D
		mov	esi, [esp+38h+arg_8]
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_426
		push	ecx
		call	_BN_clear_free
		add	esp, 4

loc_426:				; CODE XREF: _dsa_sign_setup+1E7j
		mov	[esi], edi
		mov	esi, [esp+38h+arg_C]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_43B
		push	eax
		call	_BN_clear_free
		add	esp, 4

loc_43B:				; CODE XREF: _dsa_sign_setup+1FCj
		mov	[esi], ebx
		mov	ebx, 1
		jmp	loc_2B4
; ---------------------------------------------------------------------------

loc_447:				; CODE XREF: _dsa_sign_setup+15j
					; _dsa_sign_setup+1Ej ...
		push	0E6h ; 'æ'
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	65h ; 'e'
		push	6Bh ; 'k'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		add	esp, 28h
		retn
_dsa_sign_setup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 468h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dsa_do_verify	proc near		; DATA XREF: .data:00000754o

var_3C		= byte ptr -3Ch
var_28		= byte ptr -28h
var_14		= byte ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 3Ch ; '<'
		call	__chkstk
		push	esi
		mov	esi, [esp+40h+arg_C]
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	dword ptr [esi+0Ch], 0
		jz	loc_6F9
		mov	eax, [esi+10h]
		test	eax, eax
		jz	loc_6F9
		cmp	dword ptr [esi+14h], 0
		jz	loc_6F9
		push	ebp
		push	eax
		call	_BN_num_bits
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, 0A0h ; ' '
		jz	short loc_4E0
		cmp	ebp, 0E0h ; 'à'
		jz	short loc_4E0
		cmp	ebp, 100h
		jz	short loc_4E0
		push	14Ah
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	66h ; 'f'

loc_4CA:				; CODE XREF: _dsa_do_verify+96j
		push	71h ; 'q'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_4E0:				; CODE XREF: _dsa_do_verify+44j
					; _dsa_do_verify+4Cj ...
		push	dword ptr [esi+0Ch]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 2710h
		jle	short loc_500
		push	14Fh
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	67h ; 'g'
		jmp	short loc_4CA
; ---------------------------------------------------------------------------

loc_500:				; CODE XREF: _dsa_do_verify+88j
		lea	eax, [esp+48h+var_3C]
		push	ebx
		push	eax
		call	_BN_init
		lea	eax, [esp+50h+var_28]
		push	eax
		call	_BN_init
		lea	eax, [esp+54h+var_14]
		push	eax
		call	_BN_init
		add	esp, 0Ch
		call	_BN_CTX_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_620
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		cmp	dword ptr [eax+4], 0
		jz	loc_6F2
		cmp	dword ptr [eax+0Ch], 0
		jnz	loc_6F2
		push	dword ptr [esi+10h]
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_6F2
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+4], 0
		jz	loc_6F2
		cmp	dword ptr [eax+0Ch], 0
		jnz	loc_6F2
		push	dword ptr [esi+10h]
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	loc_6F2
		mov	eax, [esp+4Ch+arg_8]
		push	ebx
		push	dword ptr [esi+10h]
		push	dword ptr [eax+4]
		lea	eax, [esp+58h+var_28]
		push	eax
		call	_BN_mod_inverse
		add	esp, 10h
		test	eax, eax
		jz	short loc_620
		mov	eax, [esp+4Ch+arg_4]
		lea	ecx, [esp+4Ch+var_3C]
		sar	ebp, 3
		cmp	eax, ebp
		push	ecx
		cmovg	eax, ebp
		push	eax
		push	[esp+54h+arg_0]
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_620
		push	ebx
		push	dword ptr [esi+10h]
		lea	eax, [esp+54h+var_28]
		push	eax
		lea	eax, [esp+58h+var_3C]
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	short loc_620
		mov	ebp, [esp+4Ch+arg_8]
		lea	eax, [esp+4Ch+var_28]
		push	ebx
		push	dword ptr [esi+10h]
		push	eax
		push	dword ptr [ebp+0]
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	short loc_620
		test	byte ptr [esi+28h], 1
		jz	short loc_670
		push	ebx
		push	dword ptr [esi+0Ch]
		lea	eax, [esi+2Ch]
		push	8
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jnz	short loc_672

loc_620:				; CODE XREF: _dsa_do_verify+C3j
					; _dsa_do_verify+140j ...
		push	192h
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	3
		push	71h ; 'q'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h

loc_638:				; CODE XREF: _dsa_do_verify+27Fj
					; _dsa_do_verify+28Cj
		test	ebx, ebx
		jz	short loc_645
		push	ebx
		call	_BN_CTX_free
		add	esp, 4

loc_645:				; CODE XREF: _dsa_do_verify+1D2j
		lea	eax, [esp+4Ch+var_3C]
		push	eax
		call	_BN_free
		lea	eax, [esp+50h+var_28]
		push	eax
		call	_BN_free
		lea	eax, [esp+54h+var_14]
		push	eax
		call	_BN_free
		add	esp, 0Ch
		mov	eax, edi
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_670:				; CODE XREF: _dsa_do_verify+1A0j
		xor	eax, eax

loc_672:				; CODE XREF: _dsa_do_verify+1B6j
		mov	ecx, [esi+3Ch]
		push	eax
		push	ebx
		push	dword ptr [esi+0Ch]
		mov	ecx, [ecx+10h]
		lea	eax, [esp+58h+var_28]
		push	eax
		lea	eax, [esp+5Ch+var_3C]
		push	dword ptr [esi+18h]
		push	eax
		lea	eax, [esp+64h+var_14]
		push	dword ptr [esi+14h]
		push	eax
		test	ecx, ecx
		jz	short loc_69E
		push	esi
		call	ecx
		add	esp, 24h
		jmp	short loc_6A6
; ---------------------------------------------------------------------------

loc_69E:				; CODE XREF: _dsa_do_verify+22Cj
		call	_BN_mod_exp2_mont
		add	esp, 20h

loc_6A6:				; CODE XREF: _dsa_do_verify+234j
		test	eax, eax
		jz	loc_620
		push	ebx
		push	dword ptr [esi+10h]
		lea	eax, [esp+54h+var_14]
		push	eax
		lea	eax, [esp+58h+var_3C]
		push	eax
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	loc_620
		push	dword ptr [ebp+0]
		lea	eax, [esp+50h+var_3C]
		push	eax
		call	_BN_ucmp
		add	esp, 8
		mov	edi, eax
		neg	edi

$err$33:
		sbb	edi, edi
		add	edi, 1
		jns	loc_638
		jmp	loc_620
; ---------------------------------------------------------------------------

loc_6F2:				; CODE XREF: _dsa_do_verify+D3j
					; _dsa_do_verify+DDj ...
		xor	edi, edi
		jmp	loc_638
; ---------------------------------------------------------------------------

loc_6F9:				; CODE XREF: _dsa_do_verify+17j
					; _dsa_do_verify+22j ...
		push	143h
		push	offset ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; ".\\crypto\\dsa\\dsa_ossl.c"
		push	65h ; 'e'
		push	71h ; 'q'
		push	0Ah
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 3Ch
		retn
_dsa_do_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 71Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dsa_init	proc near		; DATA XREF: .data:00000760o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		or	dword ptr [eax+28h], 1
		mov	eax, 1
		retn
_dsa_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 72Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dsa_finish	proc near		; DATA XREF: .data:00000764o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+2Ch]
		test	eax, eax
		jz	short loc_740
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_740:				; CODE XREF: _dsa_finish+9j
		mov	eax, 1
		retn
_dsa_finish	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 748h
_openssl_dsa_meth dd offset ??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@
					; DATA XREF: _DSA_OpenSSLo
					; "OpenSSL DSA method"
		dd offset _dsa_do_sign
		dd offset _dsa_sign_setup
		dd offset _dsa_do_verify
		align 10h
		dd offset _dsa_init
		dd offset _dsa_finish
		dd 4 dup(0)
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 778h
; COMDAT (pick any)
		public ??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@
; `string'
??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@ db	'OpenSSL DSA method',0
					; DATA XREF: .data:_openssl_dsa_metho
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 78Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DSA_OpenSSL
_DSA_OpenSSL	proc near
		mov	eax, offset _openssl_dsa_meth
		retn
_DSA_OpenSSL	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 794h
; COMDAT (pick any)
		public ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
; `string'
??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ db	'.\crypto\dsa\dsa_ossl.c',0
					; DATA XREF: _dsa_do_sign+1D3o
					; _dsa_sign_setup+5Eo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _dsa_do_sign+1DDp
					; _dsa_sign_setup+69p ...
		extrn _BN_CTX_new:near	; CODE XREF: _dsa_do_sign+6Dp
					; _dsa_sign_setup+4Ep ...
		extrn _BN_CTX_free:near	; CODE XREF: _dsa_do_sign+1F9p
					; _dsa_sign_setup+88p ...
		extrn _BN_rand_range:near ; CODE XREF: _dsa_sign_setup+C8p
		extrn _BN_num_bits:near	; CODE XREF: _dsa_do_sign+CDp
					; _dsa_do_sign+E8p ...
		extrn _BN_new:near	; CODE XREF: _dsa_do_sign+5Ep
					; _dsa_sign_setup:loc_2E7p
		extrn _BN_init:near	; CODE XREF: _dsa_do_sign+2Dp
					; _dsa_do_sign+37p ...
		extrn _BN_clear_free:near ; CODE XREF: _dsa_do_sign+206p
					; _dsa_do_sign+210p ...
		extrn _BN_copy:near	; CODE XREF: _dsa_sign_setup+115p
		extrn _BN_bin2bn:near	; CODE XREF: _dsa_do_sign+107p
					; _dsa_do_verify+158p
		extrn _BN_sub:near	; CODE XREF: _dsa_do_sign+163p
		extrn _BN_add:near	; CODE XREF: _dsa_do_sign+142p
					; _dsa_sign_setup+12Ep	...
		extrn _BN_div:near	; CODE XREF: _dsa_sign_setup+1B2p
					; _dsa_do_verify+256p
		extrn _BN_mod_mul:near	; CODE XREF: _dsa_do_sign+127p
					; _dsa_do_sign+179p ...
		extrn _BN_cmp:near	; CODE XREF: _dsa_do_sign+152p
		extrn _BN_free:near	; CODE XREF: _dsa_do_sign+1E6p
					; _dsa_do_sign+1ECp ...
		extrn _BN_mod_exp_mont:near ; CODE XREF: _dsa_sign_setup:loc_3CEp
		extrn _BN_mod_exp2_mont:near ; CODE XREF: _dsa_do_verify:loc_69Ep
		extrn _BN_ucmp:near	; CODE XREF: _dsa_do_verify+E7p
					; _dsa_do_verify+116p ...
		extrn _BN_mod_inverse:near ; CODE XREF:	_dsa_sign_setup+1CDp
					; _dsa_do_verify+136p
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _dsa_finish+Cp
		extrn _BN_MONT_CTX_set_locked:near ; CODE XREF:	_dsa_sign_setup+F5p
					; _dsa_do_verify+1ACp
		extrn _DSA_SIG_new:near	; CODE XREF: _dsa_do_sign:loc_1A9p
		extrn _DSA_sign_setup:near ; CODE XREF:	_dsa_do_sign+BAp
		extrn __chkstk:near	; CODE XREF: _dsa_do_sign+5p
					; _dsa_sign_setup+5p ...


		end
