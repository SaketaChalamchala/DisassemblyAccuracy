;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	46D92827F620D1F9435E9BCED712267D
; Input	CRC32 :	F8833FF5

; File Name   :	C:\compspace\Diff\openssl\obj\cpt_err.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_CRYPTO_str_functs dd 0F064000h		; DATA XREF: _ERR_load_CRYPTO_stringsr
					; _ERR_load_CRYPTO_strings+12o
		dd offset ??_C@_0BI@MHIJLMOF@CRYPTO_get_ex_new_index?$AA@ ; "CRYPTO_get_ex_new_index"
		dd 0F067000h
		dd offset ??_C@_0BJ@CCOEIIFC@CRYPTO_get_new_dynlockid?$AA@ ; "CRYPTO_get_new_dynlockid"
		dd 0F065000h
		dd offset ??_C@_0BG@MHMFFADP@CRYPTO_get_new_lockid?$AA@	; "CRYPTO_get_new_lockid"
		dd 0F066000h
		dd offset ??_C@_0BD@NOOFBIMD@CRYPTO_set_ex_data?$AA@ ; "CRYPTO_set_ex_data"
		dd 0F068000h
		dd offset ??_C@_0O@LHHGGGNF@DEF_ADD_INDEX?$AA@ ; "DEF_ADD_INDEX"
		dd 0F069000h
		dd offset ??_C@_0O@MGHCLFMH@DEF_GET_CLASS?$AA@ ; "DEF_GET_CLASS"
		dd 0F06D000h
		dd offset ??_C@_0O@HNLOFNHK@FIPS_mode_set?$AA@ ; "FIPS_mode_set"
		dd 0F06A000h
		dd offset ??_C@_0BA@HJHEJEMA@INT_DUP_EX_DATA?$AA@ ; "INT_DUP_EX_DATA"
		dd 0F06B000h
		dd offset ??_C@_0BB@EOLKIEIJ@INT_FREE_EX_DATA?$AA@ ; "INT_FREE_EX_DATA"
		dd 0F06C000h
		dd offset ??_C@_0BA@NPGJKDBD@INT_NEW_EX_DATA?$AA@ ; "INT_NEW_EX_DATA"
		dd 2 dup(0)
_CRYPTO_str_reasons dd 0F000065h	; DATA XREF: _ERR_load_CRYPTO_strings+1Do
		dd offset ??_C@_0BI@HFMBHDCA@fips?5mode?5not?5supported?$AA@ ; "fips mode not supported"
		dd 0F000064h
		dd offset ??_C@_0BL@GHFOLNLN@no?5dynlock?5create?5callback?$AA@	; "no dynlock create callback"
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
; COMDAT (pick any)
		public ??_C@_0BI@MHIJLMOF@CRYPTO_get_ex_new_index?$AA@
; `string'
??_C@_0BI@MHIJLMOF@CRYPTO_get_ex_new_index?$AA@	db 'CRYPTO_get_ex_new_index',0
					; DATA XREF: .data:00000004o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
; COMDAT (pick any)
		public ??_C@_0BJ@CCOEIIFC@CRYPTO_get_new_dynlockid?$AA@
; `string'
??_C@_0BJ@CCOEIIFC@CRYPTO_get_new_dynlockid?$AA@ db 'CRYPTO_get_new_dynlockid',0
					; DATA XREF: .data:0000000Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
; COMDAT (pick any)
		public ??_C@_0BG@MHMFFADP@CRYPTO_get_new_lockid?$AA@
; `string'
??_C@_0BG@MHMFFADP@CRYPTO_get_new_lockid?$AA@ db 'CRYPTO_get_new_lockid',0
					; DATA XREF: .data:00000014o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
; COMDAT (pick any)
		public ??_C@_0BD@NOOFBIMD@CRYPTO_set_ex_data?$AA@
; `string'
??_C@_0BD@NOOFBIMD@CRYPTO_set_ex_data?$AA@ db 'CRYPTO_set_ex_data',0
					; DATA XREF: .data:0000001Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
; COMDAT (pick any)
		public ??_C@_0O@LHHGGGNF@DEF_ADD_INDEX?$AA@
; `string'
??_C@_0O@LHHGGGNF@DEF_ADD_INDEX?$AA@ db	'DEF_ADD_INDEX',0 ; DATA XREF: .data:00000024o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
; COMDAT (pick any)
		public ??_C@_0O@MGHCLFMH@DEF_GET_CLASS?$AA@
; `string'
??_C@_0O@MGHCLFMH@DEF_GET_CLASS?$AA@ db	'DEF_GET_CLASS',0 ; DATA XREF: .data:0000002Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
; COMDAT (pick any)
		public ??_C@_0O@HNLOFNHK@FIPS_mode_set?$AA@
; `string'
??_C@_0O@HNLOFNHK@FIPS_mode_set?$AA@ db	'FIPS_mode_set',0 ; DATA XREF: .data:00000034o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 100h
; COMDAT (pick any)
		public ??_C@_0BA@HJHEJEMA@INT_DUP_EX_DATA?$AA@
; `string'
??_C@_0BA@HJHEJEMA@INT_DUP_EX_DATA?$AA@	db 'INT_DUP_EX_DATA',0 ; DATA XREF: .data:0000003Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 110h
; COMDAT (pick any)
		public ??_C@_0BB@EOLKIEIJ@INT_FREE_EX_DATA?$AA@
; `string'
??_C@_0BB@EOLKIEIJ@INT_FREE_EX_DATA?$AA@ db 'INT_FREE_EX_DATA',0
					; DATA XREF: .data:00000044o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 124h
; COMDAT (pick any)
		public ??_C@_0BA@NPGJKDBD@INT_NEW_EX_DATA?$AA@
; `string'
??_C@_0BA@NPGJKDBD@INT_NEW_EX_DATA?$AA@	db 'INT_NEW_EX_DATA',0 ; DATA XREF: .data:0000004Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 134h
; COMDAT (pick any)
		public ??_C@_0BI@HFMBHDCA@fips?5mode?5not?5supported?$AA@
; `string'
??_C@_0BI@HFMBHDCA@fips?5mode?5not?5supported?$AA@ db 'fips mode not supported',0
					; DATA XREF: .data:0000005Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14Ch
; COMDAT (pick any)
		public ??_C@_0BL@GHFOLNLN@no?5dynlock?5create?5callback?$AA@
; `string'
??_C@_0BL@GHFOLNLN@no?5dynlock?5create?5callback?$AA@ db 'no dynlock create callback',0
					; DATA XREF: .data:00000064o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ERR_load_CRYPTO_strings
_ERR_load_CRYPTO_strings proc near
		push	_CRYPTO_str_functs
		call	_ERR_func_error_string
		add	esp, 4
		test	eax, eax
		jnz	short locret_194
		push	offset _CRYPTO_str_functs
		push	eax
		call	_ERR_load_strings
		push	offset _CRYPTO_str_reasons
		push	0
		call	_ERR_load_strings
		add	esp, 10h

locret_194:				; CODE XREF: _ERR_load_CRYPTO_strings+10j
		retn
_ERR_load_CRYPTO_strings endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_func_error_string:near ; CODE XREF: _ERR_load_CRYPTO_strings+6p
		extrn _ERR_load_strings:near ; CODE XREF: _ERR_load_CRYPTO_strings+18p
					; _ERR_load_CRYPTO_strings+24p


		end
