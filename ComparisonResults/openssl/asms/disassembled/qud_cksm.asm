;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AD63A4398C37B4D6DA84A6ADB479F1A5
; Input	CRC32 :	69ADABD1

; File Name   :	C:\compspace\Diff\openssl\obj\qud_cksm.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_quad_cksum
_DES_quad_cksum	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		mov	ecx, [esp+4+arg_10]
		mov	eax, 1
		push	ebx
		push	ebp
		push	esi
		movzx	edx, byte ptr [ecx+3]
		movzx	ebp, byte ptr [ecx+7]
		mov	ebx, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_8]
		push	edi
		mov	edi, [esp+14h+arg_C]
		cmp	edi, eax
		cmovl	edi, eax
		movzx	eax, byte ptr [ecx+2]
		shl	edx, 8
		or	edx, eax
		shl	ebp, 8
		movzx	eax, byte ptr [ecx+1]
		shl	edx, 8
		or	edx, eax
		mov	[esp+14h+arg_C], edi
		movzx	eax, byte ptr [ecx]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+6]
		or	ebp, eax
		mov	[esp+14h+arg_10], edx
		movzx	eax, byte ptr [ecx+5]
		shl	ebp, 8
		or	ebp, eax
		movzx	eax, byte ptr [ecx+4]
		shl	ebp, 8
		or	ebp, eax
		xor	eax, eax
		mov	[esp+14h+var_4], eax

loc_73:					; CODE XREF: _DES_quad_cksum+10Aj
		cmp	eax, edi
		jge	loc_110
		mov	ecx, [esp+14h+arg_0]
		mov	edi, esi
		test	esi, esi
		jle	short loc_EE
		mov	ebx, [esp+14h+arg_10]
		nop	dword ptr [eax+00000000h]

loc_90:					; CODE XREF: _DES_quad_cksum+D8j
		movzx	esi, byte ptr [ecx]
		cmp	edi, 1
		jle	short loc_A7
		movzx	eax, byte ptr [ecx+1]
		add	ecx, 2
		shl	eax, 8
		or	esi, eax
		dec	edi
		jmp	short loc_A8
; ---------------------------------------------------------------------------

loc_A7:					; CODE XREF: _DES_quad_cksum+96j
		inc	ecx

loc_A8:					; CODE XREF: _DES_quad_cksum+A5j
		add	esi, ebx
		mov	edx, ebp
		imul	edx, ebp
		mov	eax, esi
		imul	eax, esi
		mov	ebx, 7FFFFFFFh
		dec	edi
		add	eax, edx
		xor	edx, edx
		div	ebx
		lea	eax, [ebp+4FC732Dh]
		imul	eax, esi
		mov	ebx, edx
		xor	edx, edx
		mov	esi, 7FFFFFFFh
		div	esi
		mov	ebp, edx
		test	edi, edi
		jg	short loc_90
		mov	eax, [esp+14h+var_4]
		mov	esi, [esp+14h+arg_8]
		mov	[esp+14h+arg_10], ebx
		mov	ebx, [esp+14h+arg_4]
		mov	edx, [esp+14h+arg_10]

loc_EE:					; CODE XREF: _DES_quad_cksum+83j
		test	ebx, ebx
		jz	short loc_FE
		mov	[ebx], edx
		mov	[ebx+4], ebp
		add	ebx, 8
		mov	[esp+14h+arg_4], ebx

loc_FE:					; CODE XREF: _DES_quad_cksum+F0j
		mov	edi, [esp+14h+arg_C]
		inc	eax
		mov	[esp+14h+var_4], eax
		cmp	eax, 4
		jl	loc_73

loc_110:				; CODE XREF: _DES_quad_cksum+75j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, edx
		pop	ebx
		pop	ecx
		retn
_DES_quad_cksum	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __chkstk:near	; CODE XREF: _DES_quad_cksum+5p


		end
