;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	789FC9E2F166EB376B0C4B380E177BCE
; Input	CRC32 :	14F3C4E9

; File Name   :	C:\compspace\Diff\openssl\obj\clienthellotest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 18h
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		call	_SSL_library_init
		call	_SSL_load_error_strings
		push	10h
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax
		call	_BIO_new_fp
		push	offset _CRYPTO_dbg_get_options
		push	offset _CRYPTO_dbg_set_options
		push	offset _CRYPTO_dbg_free
		push	offset _CRYPTO_dbg_realloc
		push	offset _CRYPTO_dbg_malloc
		mov	[esp+44h+var_4], eax
		call	_CRYPTO_set_mem_debug_functions
		push	3
		call	_CRYPTO_set_mem_debug_options
		push	1
		call	_CRYPTO_mem_ctrl
		add	esp, 24h

loc_8C:					; CODE XREF: _main+23Bj
		mov	[esp+28h+var_C], 0
		test	edi, edi
		jnz	short loc_9F
		call	_TLSv1_2_method
		jmp	short loc_A4
; ---------------------------------------------------------------------------

loc_9F:					; CODE XREF: _main+6Aj
		call	_SSLv23_method

loc_A4:					; CODE XREF: _main+71j
		push	eax
		call	_SSL_CTX_new
		add	esp, 4
		mov	[esp+28h+var_10], eax
		push	eax
		call	_SSL_new
		mov	ebp, eax
		mov	[esp+2Ch+var_14], ebp
		call	_BIO_s_mem
		push	eax
		call	_BIO_new
		mov	esi, eax
		call	_BIO_s_mem
		push	eax
		call	_BIO_new
		mov	ebx, eax
		push	ebx
		push	esi
		push	ebp
		call	_SSL_set_bio
		push	ebp
		call	_SSL_set_connect_state
		add	esp, 1Ch
		test	edi, edi
		jz	short loc_F1
		cmp	edi, 1
		jnz	short loc_109

loc_F1:					; CODE XREF: _main+BEj
		push	0Ch
		push	offset ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@ ; "Hello	World!"
		push	ebp
		call	_SSL_set_session_ticket_ext
		add	esp, 0Ch
		test	eax, eax
		jz	$end$44

loc_109:				; CODE XREF: _main+C3j
		push	ebp
		call	_SSL_connect
		add	esp, 4
		test	eax, eax
		jg	$end$44
		lea	eax, [esp+28h+var_18]
		push	eax
		push	0
		push	3
		push	ebx
		call	_BIO_ctrl
		mov	ecx, [esp+38h+var_18]
		add	esp, 10h
		lea	ebx, [ecx+eax]
		add	ecx, 2Bh ; '+'
		mov	[esp+28h+var_8], ebx
		mov	[esp+28h+var_18], ecx
		lea	eax, [ecx+1]
		cmp	eax, ebx
		ja	$end$44
		movzx	edx, byte ptr [ecx]
		inc	edx
		add	edx, ecx
		mov	[esp+28h+var_18], edx
		lea	eax, [edx+2]
		cmp	eax, ebx
		ja	$end$44
		movzx	ecx, byte ptr [edx]
		movzx	eax, byte ptr [edx+1]
		shl	ecx, 8
		or	ecx, eax
		add	ecx, 2
		add	ecx, edx
		mov	[esp+28h+var_18], ecx
		lea	eax, [ecx+1]
		cmp	eax, ebx
		ja	$end$44
		movzx	eax, byte ptr [ecx]
		inc	ecx
		add	eax, ecx
		mov	[esp+28h+var_18], eax
		lea	ecx, [eax+2]
		cmp	ecx, ebx
		ja	$end$44
		movzx	esi, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	esi, 8
		or	esi, eax
		mov	[esp+28h+var_18], ecx
		lea	eax, [esi+ecx]
		cmp	eax, ebx
		ja	$end$44
		cmp	esi, 4
		jbe	$end$44
		nop	dword ptr [eax+eax+00h]

loc_1BC:				; CODE XREF: _main+1DFj
		movzx	eax, byte ptr [ecx+1]
		movzx	ebx, byte ptr [ecx]
		add	ecx, 2
		mov	[esp+28h+var_18], ecx
		shl	ebx, 8
		or	ebx, eax
		movzx	edx, byte ptr [ecx]
		movzx	eax, byte ptr [ecx+1]
		add	ecx, 2
		shl	edx, 8
		or	edx, eax
		mov	[esp+28h+var_18], ecx
		lea	ebp, [edx+ecx]
		cmp	ebp, [esp+28h+var_8]
		ja	short loc_245
		cmp	ebx, 23h ; '#'
		jnz	short loc_1F9
		test	edi, edi
		jz	short loc_20F
		cmp	edi, 1
		jz	short loc_20F

loc_1F9:				; CODE XREF: _main+1C2j
		mov	eax, 0FFFFFFFCh
		mov	ecx, ebp
		sub	eax, edx
		mov	[esp+28h+var_18], ecx
		add	esi, eax
		cmp	esi, 4
		ja	short loc_1BC
		jmp	short loc_245
; ---------------------------------------------------------------------------

loc_20F:				; CODE XREF: _main+1C6j _main+1CBj
		cmp	edx, 0Ch
		jnz	short loc_238
		cmp	dword ptr [ecx], 6C6C6548h
		jnz	short loc_238
		cmp	dword ptr [ecx+4], 6F57206Fh
		jnz	short loc_238
		cmp	dword ptr [ecx+8], 21646C72h
		jnz	short loc_238
		mov	[esp+28h+var_C], 1
		jmp	short loc_245
; ---------------------------------------------------------------------------

loc_238:				; CODE XREF: _main+1E6j _main+1EEj ...
		push	offset ??_C@_0CM@CGAIEPCB@Received?5session?5ticket?5is?5not?5a@ ; "Received session ticket is not as expec"...
		call	_printf
		add	esp, 4

loc_245:				; CODE XREF: _main+1BDj _main+1E1j ...
		mov	ebp, [esp+28h+var_14]

$end$44:				; CODE XREF: _main+D7j	_main+E8j ...
		push	ebp
		call	_SSL_free
		push	[esp+2Ch+var_10]
		call	_SSL_CTX_free
		mov	esi, [esp+30h+var_C]
		add	esp, 8
		test	esi, esi
		jz	short loc_26F
		inc	edi
		cmp	edi, 2
		jl	loc_8C
		jmp	short loc_27D
; ---------------------------------------------------------------------------

loc_26F:				; CODE XREF: _main+235j
		push	edi
		push	offset ??_C@_0CE@OKIADNEM@ClientHello?5test?3?5FAILED?5?$CITest?5?$CF@ ; "ClientHello test: FAILED (Test %d)\n"
		call	_printf
		add	esp, 8

loc_27D:				; CODE XREF: _main+241j
		call	_ERR_free_strings
		push	0
		call	_ERR_remove_thread_state
		call	_EVP_cleanup
		call	_CRYPTO_cleanup_all_ex_data
		mov	edi, [esp+2Ch+var_4]
		push	edi
		call	_CRYPTO_mem_leaks
		push	edi
		call	_BIO_free
		add	esp, 0Ch
		xor	eax, eax
		test	esi, esi
		setz	al
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+211p _main+249p

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2E8h
; COMDAT (pick any)
		public ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@
; `string'
??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@	db 'Hello World!',0 ; DATA XREF: _main+C7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F8h
; COMDAT (pick any)
		public ??_C@_0CM@CGAIEPCB@Received?5session?5ticket?5is?5not?5a@
; char `string'[]
??_C@_0CM@CGAIEPCB@Received?5session?5ticket?5is?5not?5a@ db 'Received session ticket is not as expected',0Ah,0
					; DATA XREF: _main:loc_238o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 324h
; COMDAT (pick any)
		public ??_C@_0CE@OKIADNEM@ClientHello?5test?3?5FAILED?5?$CITest?5?$CF@
; char `string'[]
??_C@_0CE@OKIADNEM@ClientHello?5test?3?5FAILED?5?$CITest?5?$CF@	db 'ClientHello test: FAILED (Test %d)',0Ah,0
					; DATA XREF: _main+244o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+1Ep
					; _printf+7p
					; DATA XREF: ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
		extrn _CRYPTO_mem_ctrl:near ; CODE XREF: _main+58p
		extrn _CRYPTO_cleanup_all_ex_data:near ; CODE XREF: _main+262p
		extrn _CRYPTO_set_mem_debug_functions:near ; CODE XREF:	_main+4Ap
		extrn _CRYPTO_set_mem_debug_options:near ; CODE	XREF: _main+51p
		extrn _CRYPTO_dbg_malloc:near ;	DATA XREF: _main+41o
		extrn _CRYPTO_dbg_realloc:near ; DATA XREF: _main+3Co
		extrn _CRYPTO_dbg_free:near ; DATA XREF: _main+37o
		extrn _CRYPTO_dbg_set_options:near ; DATA XREF:	_main+32o
		extrn _CRYPTO_dbg_get_options:near ; DATA XREF:	_main+2Do
		extrn _CRYPTO_mem_leaks:near ; CODE XREF: _main+26Cp
		extrn _BIO_new_fp:near	; CODE XREF: _main+28p
		extrn _BIO_new:near	; CODE XREF: _main+97p	_main+A4p
		extrn _BIO_free:near	; CODE XREF: _main+272p
		extrn _BIO_ctrl:near	; CODE XREF: _main+F8p
		extrn _BIO_s_mem:near	; CODE XREF: _main+91p	_main+9Ep
		extrn _EVP_cleanup:near	; CODE XREF: _main+25Dp
		extrn _SSL_CTX_new:near	; CODE XREF: _main+79p
		extrn _SSL_CTX_free:near ; CODE	XREF: _main+227p
		extrn _SSL_set_bio:near	; CODE XREF: _main+AEp
		extrn _SSL_load_error_strings:near ; CODE XREF:	_main+15p
		extrn _SSL_new:near	; CODE XREF: _main+86p
		extrn _SSL_free:near	; CODE XREF: _main+21Ep
		extrn _SSL_connect:near	; CODE XREF: _main+DEp
		extrn _SSLv23_method:near ; CODE XREF: _main:loc_9Fp
		extrn _TLSv1_2_method:near ; CODE XREF:	_main+6Cp
		extrn _SSL_set_connect_state:near ; CODE XREF: _main+B4p
		extrn _SSL_library_init:near ; CODE XREF: _main+10p
		extrn _SSL_set_session_ticket_ext:near ; CODE XREF: _main+CDp
		extrn _ERR_free_strings:near ; CODE XREF: _main:loc_27Dp
		extrn _ERR_remove_thread_state:near ; CODE XREF: _main+258p
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso


		end
