;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	94381FD9ADAD6B81AD7153904D498C68
; Input	CRC32 :	CF60D2D1

; File Name   :	C:\compspace\Diff\openssl\obj\a_type.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_cmp
_ASN1_TYPE_cmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_47
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_47
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_47
		sub	eax, 1
		jz	short loc_40
		sub	eax, 4
		jz	short loc_3D
		push	dword ptr [edx+4]
		push	dword ptr [ecx+4]
		sub	eax, 1
		jz	short loc_34
		call	_ASN1_STRING_cmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_34:					; CODE XREF: _ASN1_TYPE_cmp+29j
		call	_OBJ_cmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_3D:					; CODE XREF: _ASN1_TYPE_cmp+1Ej
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_40:					; CODE XREF: _ASN1_TYPE_cmp+19j
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		retn
; ---------------------------------------------------------------------------

loc_47:					; CODE XREF: _ASN1_TYPE_cmp+6j
					; _ASN1_TYPE_cmp+Ej ...
		or	eax, 0FFFFFFFFh
		retn
_ASN1_TYPE_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_get
_ASN1_TYPE_get	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_5E
		cmp	dword ptr [eax], 5
		jz	short loc_5E
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_5E:					; CODE XREF: _ASN1_TYPE_get+8j
					; _ASN1_TYPE_get+Dj
		mov	eax, [eax]
		retn
_ASN1_TYPE_get	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_set
_ASN1_TYPE_set	proc near		; CODE XREF: _ASN1_TYPE_set1+31p
					; _ASN1_TYPE_set1+53p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		cmp	dword ptr [ecx+4], 0
		jz	short loc_81
		lea	eax, [esp+arg_0]
		push	0
		push	eax
		call	_ASN1_primitive_free
		mov	ecx, [esp+8+arg_0]
		add	esp, 8

loc_81:					; CODE XREF: _ASN1_TYPE_set+8j
		mov	eax, [esp+arg_4]
		cmp	eax, 1
		mov	[ecx], eax
		mov	ecx, [esp+arg_8]
		mov	eax, [esp+arg_0]
		jnz	short loc_9E
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFh

loc_9E:					; CODE XREF: _ASN1_TYPE_set+2Ej
		mov	[eax+4], ecx
		retn
_ASN1_TYPE_set	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_set1
_ASN1_TYPE_set1	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_107
		cmp	edi, 1
		jz	short loc_107
		push	esi
		cmp	edi, 6
		jnz	short loc_E5
		call	_OBJ_dup
		add	esp, 4
		test	eax, eax
		jnz	short loc_CE

loc_C9:					; CODE XREF: _ASN1_TYPE_set1+4Bj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_CE:					; CODE XREF: _ASN1_TYPE_set1+23j
		push	eax
		push	6
		push	[esp+10h+arg_0]
		call	_ASN1_TYPE_set
		add	esp, 0Ch
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E5:					; CODE XREF: _ASN1_TYPE_set1+17j
		call	_ASN1_STRING_dup
		add	esp, 4
		test	eax, eax
		jz	short loc_C9
		push	eax
		push	edi
		push	[esp+10h+arg_0]
		call	_ASN1_TYPE_set
		add	esp, 0Ch
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_107:				; CODE XREF: _ASN1_TYPE_set1+Cj
					; _ASN1_TYPE_set1+11j
		mov	eax, [esp+8+arg_0]
		mov	[esp+8+arg_8], eax
		cmp	dword ptr [eax+4], 0
		jz	short loc_128
		lea	eax, [esp+8+arg_8]
		push	0
		push	eax
		call	_ASN1_primitive_free
		mov	eax, [esp+10h+arg_8]
		add	esp, 8

loc_128:				; CODE XREF: _ASN1_TYPE_set1+6Fj
		mov	[eax], edi
		mov	eax, [esp+8+arg_8]
		cmp	edi, 1
		jnz	short loc_13D
		neg	esi
		sbb	esi, esi
		and	esi, 0FFh

loc_13D:				; CODE XREF: _ASN1_TYPE_set1+8Dj
		mov	[eax+4], esi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_ASN1_TYPE_set1	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_STRING_dup:near ; CODE XREF: _ASN1_TYPE_set1:loc_E5p
		extrn _ASN1_STRING_cmp:near ; CODE XREF: _ASN1_TYPE_cmp+2Bp
		extrn _ASN1_primitive_free:near	; CODE XREF: _ASN1_TYPE_set+11p
					; _ASN1_TYPE_set1+78p
		extrn _OBJ_dup:near	; CODE XREF: _ASN1_TYPE_set1+19p
		extrn _OBJ_cmp:near	; CODE XREF: _ASN1_TYPE_cmp:loc_34p


		end
