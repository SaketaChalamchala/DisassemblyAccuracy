;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E80370A088F5D0F1296544F7B6DF92E1
; Input	CRC32 :	FD9682C4

; File Name   :	C:\compspace\Diff\openssl\obj\p8_pkey.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_cb	proc near		; DATA XREF: .rdata:00000044o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 2
		jnz	short loc_2D
		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_2D
		cmp	dword ptr [eax], 4
		jnz	short loc_2D
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_2D
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		call	_OPENSSL_cleanse
		add	esp, 8

loc_2D:					; CODE XREF: _pkey_cb+5j _pkey_cb+12j	...
		mov	eax, 1
		retn
_pkey_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 34h
_PKCS8_PRIV_KEY_INFO_aux dd 4 dup(0)	; DATA XREF: .rdata:000000ACo
		dd offset _pkey_cb
		dd 0
_PKCS8_PRIV_KEY_INFO_seq_tt dd 2 dup(0)	; DATA XREF: .rdata:000000A4o
		dd 4
		dd offset ??_C@_07CPCPJPKL@version?$AA@	; "version"
		dd offset _ASN1_INTEGER_it
		dd 2 dup(0)
		dd 8
		dd offset ??_C@_07PLCMOKAM@pkeyalg?$AA@	; "pkeyalg"
		dd offset _X509_ALGOR_it
		dd 2 dup(0)
		dd 0Ch
		dd offset ??_C@_04JMMJFDFL@pkey?$AA@ ; "pkey"
		dd offset _ASN1_ANY_it
off_88		dd offset off_88+3	; DATA XREF: .rdata:off_88o
		align 10h
		dd 10h
		dd offset ??_C@_0L@HNMJPKNA@attributes?$AA@ ; "attributes"
		dd offset _X509_ATTRIBUTE_it
; `PKCS8_PRIV_KEY_INFO_it'::`2'::local_it
?local_it@?1??PKCS8_PRIV_KEY_INFO_it@@9@9 dd 1,	10h ; DATA XREF: _PKCS8_PRIV_KEY_INFO_freeo
					; _PKCS8_PRIV_KEY_INFO_ito ...
		dd offset _PKCS8_PRIV_KEY_INFO_seq_tt
		dd 4
		dd offset _PKCS8_PRIV_KEY_INFO_aux
		dd 14h
		dd offset ??_C@_0BE@LDIFBBLG@PKCS8_PRIV_KEY_INFO?$AA@ ;	"PKCS8_PRIV_KEY_INFO"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
; COMDAT (pick any)
		public ??_C@_07CPCPJPKL@version?$AA@
; `string'
??_C@_07CPCPJPKL@version?$AA@ db 'version',0 ; DATA XREF: .rdata:00000058o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
; COMDAT (pick any)
		public ??_C@_07PLCMOKAM@pkeyalg?$AA@
; `string'
??_C@_07PLCMOKAM@pkeyalg?$AA@ db 'pkeyalg',0 ; DATA XREF: .rdata:0000006Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
; COMDAT (pick any)
		public ??_C@_04JMMJFDFL@pkey?$AA@
; `string'
??_C@_04JMMJFDFL@pkey?$AA@ db 'pkey',0  ; DATA XREF: .rdata:00000080o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
; COMDAT (pick any)
		public ??_C@_0L@HNMJPKNA@attributes?$AA@
; `string'
??_C@_0L@HNMJPKNA@attributes?$AA@ db 'attributes',0 ; DATA XREF: .rdata:00000094o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
; COMDAT (pick any)
		public ??_C@_0BE@LDIFBBLG@PKCS8_PRIV_KEY_INFO?$AA@
; `string'
??_C@_0BE@LDIFBBLG@PKCS8_PRIV_KEY_INFO?$AA@ db 'PKCS8_PRIV_KEY_INFO',0
					; DATA XREF: .rdata:000000B4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_PRIV_KEY_INFO_free
_PKCS8_PRIV_KEY_INFO_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??PKCS8_PRIV_KEY_INFO_it@@9@9 ; `PKCS8_PRIV_KEY_INFO_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_PKCS8_PRIV_KEY_INFO_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 104h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_PRIV_KEY_INFO_it
_PKCS8_PRIV_KEY_INFO_it	proc near
		mov	eax, offset ?local_it@?1??PKCS8_PRIV_KEY_INFO_it@@9@9 ;	`PKCS8_PRIV_KEY_INFO_it'::`2'::local_it
		retn
_PKCS8_PRIV_KEY_INFO_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_PRIV_KEY_INFO_new
_PKCS8_PRIV_KEY_INFO_new proc near
		push	offset ?local_it@?1??PKCS8_PRIV_KEY_INFO_it@@9@9 ; `PKCS8_PRIV_KEY_INFO_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_PKCS8_PRIV_KEY_INFO_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_pkey_get0
_PKCS8_pkey_get0 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_10]
		test	ecx, ecx
		jz	short loc_12F
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[ecx], eax

loc_12F:				; CODE XREF: _PKCS8_pkey_get0+Aj
		mov	ecx, [edx+0Ch]
		push	esi
		mov	eax, [ecx]
		cmp	eax, 4
		jnz	short loc_142
		mov	dword ptr [edx], 0
		jmp	short loc_14D
; ---------------------------------------------------------------------------

loc_142:				; CODE XREF: _PKCS8_pkey_get0+1Cj
		cmp	eax, 10h
		jnz	short loc_17F
		mov	dword ptr [edx], 1

loc_14D:				; CODE XREF: _PKCS8_pkey_get0+24j
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_16B
		mov	eax, [ecx+4]
		mov	eax, [eax+8]
		mov	[esi], eax
		mov	eax, [edx+0Ch]
		mov	eax, [eax+4]
		mov	ecx, [eax]
		mov	eax, [esp+4+arg_8]
		mov	[eax], ecx

loc_16B:				; CODE XREF: _PKCS8_pkey_get0+37j
		mov	ecx, [esp+4+arg_C]
		test	ecx, ecx
		jz	short loc_178
		mov	eax, [edx+8]
		mov	[ecx], eax

loc_178:				; CODE XREF: _PKCS8_pkey_get0+55j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_17F:				; CODE XREF: _PKCS8_pkey_get0+29j
		xor	eax, eax
		pop	esi
		retn
_PKCS8_pkey_get0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 184h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS8_pkey_set0
_PKCS8_pkey_set0 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_8]
		push	esi
		xor	esi, esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	eax, eax
		js	short loc_1A7
		push	eax
		push	dword ptr [edi+4]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_1A7
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A7:				; CODE XREF: _PKCS8_pkey_set0+Ej
					; _PKCS8_pkey_set0+1Ej
		push	ebx
		mov	ebx, [esp+0Ch+arg_14]
		test	ebx, ebx
		jz	short loc_1E3
		call	_ASN1_OCTET_STRING_new
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_204
		mov	eax, [esp+0Ch+arg_18]
		lea	esi, [ecx+8]
		mov	[ecx], eax
		mov	edx, 10h
		mov	[esi], ebx
		mov	eax, 4
		cmp	dword ptr [edi], 1
		push	ecx
		cmovz	eax, edx
		push	eax
		push	dword ptr [edi+0Ch]
		call	_ASN1_TYPE_set
		add	esp, 0Ch

loc_1E3:				; CODE XREF: _PKCS8_pkey_set0+2Aj
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_4]
		push	dword ptr [edi+8]
		call	_X509_ALGOR_set0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_20A
		test	esi, esi
		jz	short loc_204
		mov	[esi], eax

loc_204:				; CODE XREF: _PKCS8_pkey_set0+35j
					; _PKCS8_pkey_set0+7Cj
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_20A:				; CODE XREF: _PKCS8_pkey_set0+78j
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_PKCS8_pkey_set0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 214h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8_PRIV_KEY_INFO
_d2i_PKCS8_PRIV_KEY_INFO proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??PKCS8_PRIV_KEY_INFO_it@@9@9 ; `PKCS8_PRIV_KEY_INFO_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_PKCS8_PRIV_KEY_INFO endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 230h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8_PRIV_KEY_INFO
_i2d_PKCS8_PRIV_KEY_INFO proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??PKCS8_PRIV_KEY_INFO_it@@9@9 ; `PKCS8_PRIV_KEY_INFO_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_PKCS8_PRIV_KEY_INFO endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:0000005Co
		extrn _X509_ALGOR_it:near ; DATA XREF: .rdata:00000070o
		extrn _X509_ATTRIBUTE_it:near ;	DATA XREF: .rdata:00000098o
		extrn _ASN1_ANY_it:near	; DATA XREF: .rdata:00000084o
		extrn _OPENSSL_cleanse:near ; CODE XREF: _pkey_cb+25p
		extrn _ASN1_TYPE_set:near ; CODE XREF: _PKCS8_pkey_set0+57p
		extrn _ASN1_OCTET_STRING_new:near ; CODE XREF: _PKCS8_pkey_set0+2Cp
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _PKCS8_pkey_set0+14p
		extrn _ASN1_item_new:near ; CODE XREF: _PKCS8_PRIV_KEY_INFO_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_PKCS8_PRIV_KEY_INFO_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_PKCS8_PRIV_KEY_INFO+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_PKCS8_PRIV_KEY_INFO+Dp
		extrn _X509_ALGOR_set0:near ; CODE XREF: _PKCS8_pkey_set0+6Ep


		end
