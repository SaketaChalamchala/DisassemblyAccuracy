;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C2526D3B146C80BF22371EDE8B1F6821
; Input	CRC32 :	1BBB3AA0

; File Name   :	C:\compspace\Diff\openssl\obj\cbc_cksm.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_cbc_cksum
_DES_cbc_cksum	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_10]
		lea	edx, [eax+1]
		movzx	ecx, byte ptr [edx+6]
		push	ebx
		movzx	ebx, byte ptr [edx+3]
		push	ebp
		movzx	ebp, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ebp, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ebp, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebp, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebx, eax
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		shl	ecx, 10h
		push	edi
		mov	edi, [esp+14h+arg_8]
		or	ebx, ecx
		mov	[esp+14h+arg_8], ebp
		test	edi, edi
		jle	loc_145
		push	esi
		mov	esi, [esp+18h+arg_0]
		jmp	short loc_6B
; ---------------------------------------------------------------------------

loc_67:					; CODE XREF: _DES_cbc_cksum+13Cj
		mov	ebp, [esp+18h+var_8]

loc_6B:					; CODE XREF: _DES_cbc_cksum+65j
		cmp	edi, 8
		jl	short loc_B2
		movzx	eax, byte ptr [esi+1]
		movzx	edx, byte ptr [esi]
		movzx	ecx, byte ptr [esi+4]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+2]
		shl	eax, 10h
		or	edx, eax
		movzx	eax, byte ptr [esi+3]
		shl	eax, 18h
		or	edx, eax
		movzx	eax, byte ptr [esi+5]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+6]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esi+7]
		shl	eax, 18h
		or	ecx, eax
		add	esi, 8
		jmp	short loc_110
; ---------------------------------------------------------------------------

loc_B2:					; CODE XREF: _DES_cbc_cksum+6Ej
		lea	eax, [edi-1]
		add	esi, edi
		xor	ecx, ecx
		xor	edx, edx
		cmp	eax, 7
		ja	short loc_110
		lea	eax, [edi-1]
		jmp	ds:$LN26[eax*4]
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001CCo
		movzx	ecx, byte ptr [esi-1]
		dec	esi
		shl	ecx, 18h

$LN10:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001C8o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 10h
		or	ecx, eax

$LN11:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001C4o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 8
		or	ecx, eax

$LN12:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001C0o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		or	ecx, eax

$LN13:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001BCo
		movzx	edx, byte ptr [esi-1]
		dec	esi
		shl	edx, 18h

$LN14:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001B8o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 10h
		or	edx, eax

$LN15:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:000001B4o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 8
		or	edx, eax

$LN16:					; CODE XREF: _DES_cbc_cksum+C3j
					; DATA XREF: .text$mn:$LN26o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		or	edx, eax

loc_110:				; CODE XREF: _DES_cbc_cksum+B0j
					; _DES_cbc_cksum+BEj
		push	1
		push	[esp+1Ch+arg_C]
		lea	eax, [esp+20h+var_8]
		xor	edx, ebp
		xor	ecx, ebx
		mov	[esp+20h+var_8], edx
		push	eax
		mov	[esp+24h+var_4], ecx
		call	_DES_encrypt1
		mov	edx, [esp+24h+var_8]
		sub	edi, 8
		mov	ebx, [esp+24h+var_4]
		add	esp, 0Ch
		test	edi, edi
		jg	loc_67
		pop	esi
		jmp	short loc_149
; ---------------------------------------------------------------------------

loc_145:				; CODE XREF: _DES_cbc_cksum+5Aj
		mov	edx, [esp+14h+arg_8]

loc_149:				; CODE XREF: _DES_cbc_cksum+143j
		mov	ecx, [esp+14h+arg_4]
		test	ecx, ecx
		jz	short loc_184
		mov	[ecx], dl
		mov	eax, edx
		shr	eax, 8
		mov	[ecx+1], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+2], al
		mov	eax, ebx
		shr	eax, 8
		shr	edx, 18h
		mov	[ecx+3], dl
		mov	[ecx+4], bl
		mov	[ecx+5], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx+6], al
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx+7], al

loc_184:				; CODE XREF: _DES_cbc_cksum+14Fj
		mov	eax, ebx
		mov	ecx, ebx
		shr	ecx, 10h
		and	eax, 0FF0000h
		or	eax, ecx
		mov	ecx, ebx
		and	ecx, 0FF00h
		shl	ebx, 10h
		or	ecx, ebx
		shr	eax, 8
		pop	edi
		shl	ecx, 8
		pop	ebp
		or	eax, ecx
		pop	ebx
		add	esp, 8
		retn
_DES_cbc_cksum	endp

; ---------------------------------------------------------------------------
		align 10h
$LN26		dd offset $LN16		; DATA XREF: _DES_cbc_cksum+C3r
		dd offset $LN15
		dd offset $LN14
		dd offset $LN13
		dd offset $LN12
		dd offset $LN11
		dd offset $LN10
		dd offset $LN9
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_cbc_cksum+127p
		extrn __chkstk:near	; CODE XREF: _DES_cbc_cksum+5p


		end
