;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1F78D2FCCA095C5A78CC090FF2338252
; Input	CRC32 :	5C3FC061

; File Name   :	C:\compspace\Diff\openssl\obj\by_file.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_by_file_ctrl	proc near		; DATA XREF: .data:000000B0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	[esp+arg_4], 1
		jnz	loc_96
		mov	eax, [esp+arg_C]
		cmp	eax, 3
		jnz	short loc_61
		push	esi
		call	_X509_get_default_cert_file_env
		push	eax		; VarName
		call	dword ptr ds:__imp__getenv
		add	esp, 4
		push	1
		test	eax, eax
		jnz	short loc_2F
		call	_X509_get_default_cert_file

loc_2F:					; CODE XREF: _by_file_ctrl+28j
		push	eax
		push	[esp+0Ch+arg_0]
		call	_X509_load_cert_crl_file
		add	esp, 0Ch
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		neg	esi
		test	esi, esi
		jnz	short loc_5D
		push	6Fh ; 'o'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	68h ; 'h'
		push	65h ; 'e'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_5D:					; CODE XREF: _by_file_ctrl+46j
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_61:					; CODE XREF: _by_file_ctrl+12j
		cmp	eax, 1
		jnz	short loc_7E
		push	eax
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		call	_X509_load_cert_crl_file
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
; ---------------------------------------------------------------------------

loc_7E:					; CODE XREF: _by_file_ctrl+64j
		push	eax
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		call	_X509_load_cert_file
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
; ---------------------------------------------------------------------------

loc_96:					; CODE XREF: _by_file_ctrl+5j
		xor	eax, eax
		retn
_by_file_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 9Ch
		public _x509_file_lookup
_x509_file_lookup dd offset ??_C@_0BF@HBBMCMFA@Load?5file?5into?5cache?$AA@
					; DATA XREF: _X509_LOOKUP_fileo
					; "Load	file into cache"
		dd 4 dup(0)
		dd offset _by_file_ctrl
		dd 4 dup(0)
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
; COMDAT (pick any)
		public ??_C@_0BF@HBBMCMFA@Load?5file?5into?5cache?$AA@
; `string'
??_C@_0BF@HBBMCMFA@Load?5file?5into?5cache?$AA@	db 'Load file into cache',0
					; DATA XREF: .data:_x509_file_lookupo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_LOOKUP_file
_X509_LOOKUP_file proc near
		mov	eax, offset _x509_file_lookup
		retn
_X509_LOOKUP_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_load_cert_crl_file
_X509_load_cert_crl_file proc near	; CODE XREF: _by_file_ctrl+34p
					; _by_file_ctrl+6Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		push	edi
		xor	edi, edi
		cmp	eax, 1
		jz	short loc_FA
		pop	edi
		mov	[esp+arg_8], eax
		jmp	_X509_load_cert_file
; ---------------------------------------------------------------------------

loc_FA:					; CODE XREF: _X509_load_cert_crl_file+Aj
		push	esi
		push	offset ??_C@_01KDCPPGHE@r?$AA@ ; "r"
		push	[esp+0Ch+arg_4]
		call	_BIO_new_file
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_132
		push	0FDh ; 'ý'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	2
		push	84h ; '„'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_132:				; CODE XREF: _X509_load_cert_crl_file+2Cj
		push	ebx
		push	0
		push	0
		push	0
		push	esi
		call	_PEM_X509_INFO_read_bio
		push	esi
		mov	ebx, eax
		call	_BIO_free
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_16F
		push	103h
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	9
		push	84h ; '„'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: _X509_load_cert_crl_file+68j
		push	ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_1CF
		push	ebp
		nop	dword ptr [eax+eax+00h]

loc_184:				; CODE XREF: _X509_load_cert_crl_file+E8j
		push	esi
		push	ebx
		call	_sk_value
		mov	ebp, eax
		add	esp, 8
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_1A8
		push	eax
		mov	eax, [esp+14h+arg_0]
		push	dword ptr [eax+10h]
		call	_X509_STORE_add_cert
		add	esp, 8
		inc	edi

loc_1A8:				; CODE XREF: _X509_load_cert_crl_file+B1j
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_1C0
		push	eax
		mov	eax, [esp+14h+arg_0]
		push	dword ptr [eax+10h]
		call	_X509_STORE_add_crl
		add	esp, 8
		inc	edi

loc_1C0:				; CODE XREF: _X509_load_cert_crl_file+C9j
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_184
		pop	ebp

loc_1CF:				; CODE XREF: _X509_load_cert_crl_file+98j
		push	offset _X509_INFO_free
		push	ebx
		call	_sk_pop_free
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
_X509_load_cert_crl_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_load_cert_file
_X509_load_cert_file proc near		; CODE XREF: _by_file_ctrl+87p
					; _X509_load_cert_crl_file+11j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebp, ebp
		xor	ebx, ebx
		test	esi, esi
		jnz	short loc_1FA
		pop	esi
		lea	eax, [ebp+1]
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1FA:				; CODE XREF: _X509_load_cert_file+Dj
		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_317
		push	esi
		push	3
		push	6Ch ; 'l'
		push	edi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jle	loc_317
		mov	eax, [esp+10h+arg_8]
		cmp	eax, 1
		jnz	loc_2BC
		push	0
		push	0
		push	0
		push	edi
		call	_PEM_read_bio_X509_AUX
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_286
		mov	ebp, [esp+10h+arg_0]
		nop	dword ptr [eax+eax+00h]

loc_254:				; CODE XREF: _X509_load_cert_file+9Ej
		push	esi
		push	dword ptr [ebp+10h]
		call	_X509_STORE_add_cert
		add	esp, 8
		test	eax, eax
		jz	loc_2F8
		push	esi
		inc	ebx
		call	_X509_free
		push	0
		push	0
		push	0
		push	edi
		call	_PEM_read_bio_X509_AUX
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_254
		xor	ebp, ebp

loc_286:				; CODE XREF: _X509_load_cert_file+65j
		call	_ERR_peek_last_error
		and	eax, 0FFFh
		cmp	eax, 6Ch ; 'l'
		jnz	short loc_2A2
		test	ebx, ebx
		jle	short loc_2A2
		call	_ERR_clear_error
		mov	ebp, ebx
		jmp	short $err$30
; ---------------------------------------------------------------------------

loc_2A2:				; CODE XREF: _X509_load_cert_file+AFj
					; _X509_load_cert_file+B3j
		push	96h ; '–'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	9
		push	6Fh ; 'o'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$30
; ---------------------------------------------------------------------------

loc_2BC:				; CODE XREF: _X509_load_cert_file+4Cj
		cmp	eax, 2
		jnz	short loc_309
		push	0
		push	edi
		call	_d2i_X509_bio
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_2E0
		push	0A5h ; '¥'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	0Dh
		jmp	short loc_323
; ---------------------------------------------------------------------------

loc_2E0:				; CODE XREF: _X509_load_cert_file+ECj
		mov	eax, [esp+10h+arg_0]
		push	esi
		push	dword ptr [eax+10h]
		call	_X509_STORE_add_cert
		add	esp, 8
		test	eax, eax
		jz	short $err$30
		mov	ebp, eax
		jmp	short $err$30
; ---------------------------------------------------------------------------

loc_2F8:				; CODE XREF: _X509_load_cert_file+7Ej
		xor	ebp, ebp

$err$30:				; CODE XREF: _X509_load_cert_file+BCj
					; _X509_load_cert_file+D6j ...
		test	esi, esi
		jz	short loc_32F
		push	esi
		call	_X509_free
		add	esp, 4
		jmp	short loc_32F
; ---------------------------------------------------------------------------

loc_309:				; CODE XREF: _X509_load_cert_file+DBj
		push	0ADh ; '­'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	64h ; 'd'
		jmp	short loc_323
; ---------------------------------------------------------------------------

loc_317:				; CODE XREF: _X509_load_cert_file+29j
					; _X509_load_cert_file+3Fj
		push	89h ; '‰'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	2

loc_323:				; CODE XREF: _X509_load_cert_file+FAj
					; _X509_load_cert_file+131j
		push	6Fh ; 'o'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_32F:				; CODE XREF: _X509_load_cert_file+118j
					; _X509_load_cert_file+123j
		test	edi, edi
		jz	short loc_33C
		push	edi
		call	_BIO_free
		add	esp, 4

loc_33C:				; CODE XREF: _X509_load_cert_file+14Dj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
_X509_load_cert_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 344h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_load_crl_file
_X509_load_crl_file proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebp, ebp
		xor	ebx, ebx
		test	esi, esi
		jnz	short loc_35A
		pop	esi
		lea	eax, [ebp+1]
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_35A:				; CODE XREF: _X509_load_crl_file+Dj
		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_477
		push	esi
		push	3
		push	6Ch ; 'l'
		push	edi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jle	loc_477
		mov	eax, [esp+10h+arg_8]
		cmp	eax, 1
		jnz	loc_41C
		push	0
		push	0
		push	0
		push	edi
		call	_PEM_read_bio_X509_CRL
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_3E6
		mov	ebp, [esp+10h+arg_0]
		nop	dword ptr [eax+eax+00h]

loc_3B4:				; CODE XREF: _X509_load_crl_file+9Ej
		push	esi
		push	dword ptr [ebp+10h]
		call	_X509_STORE_add_crl
		add	esp, 8
		test	eax, eax
		jz	loc_458
		push	esi
		inc	ebx
		call	_X509_CRL_free
		push	0
		push	0
		push	0
		push	edi
		call	_PEM_read_bio_X509_CRL
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_3B4
		xor	ebp, ebp

loc_3E6:				; CODE XREF: _X509_load_crl_file+65j
		call	_ERR_peek_last_error
		and	eax, 0FFFh
		cmp	eax, 6Ch ; 'l'
		jnz	short loc_402
		test	ebx, ebx
		jle	short loc_402
		call	_ERR_clear_error
		mov	ebp, ebx
		jmp	short $err$30_0
; ---------------------------------------------------------------------------

loc_402:				; CODE XREF: _X509_load_crl_file+AFj
					; _X509_load_crl_file+B3j
		push	0D1h ; 'Ñ'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	9
		push	70h ; 'p'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$30_0
; ---------------------------------------------------------------------------

loc_41C:				; CODE XREF: _X509_load_crl_file+4Cj
		cmp	eax, 2
		jnz	short loc_469
		push	0
		push	edi
		call	_d2i_X509_CRL_bio
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_440
		push	0E0h ; 'à'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	0Dh
		jmp	short loc_483
; ---------------------------------------------------------------------------

loc_440:				; CODE XREF: _X509_load_crl_file+ECj
		mov	eax, [esp+10h+arg_0]
		push	esi
		push	dword ptr [eax+10h]
		call	_X509_STORE_add_crl
		add	esp, 8
		test	eax, eax
		jz	short $err$30_0
		mov	ebp, eax
		jmp	short $err$30_0
; ---------------------------------------------------------------------------

loc_458:				; CODE XREF: _X509_load_crl_file+7Ej
		xor	ebp, ebp

$err$30_0:				; CODE XREF: _X509_load_crl_file+BCj
					; _X509_load_crl_file+D6j ...
		test	esi, esi
		jz	short loc_48F
		push	esi
		call	_X509_CRL_free
		add	esp, 4
		jmp	short loc_48F
; ---------------------------------------------------------------------------

loc_469:				; CODE XREF: _X509_load_crl_file+DBj
		push	0E8h ; 'è'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	64h ; 'd'
		jmp	short loc_483
; ---------------------------------------------------------------------------

loc_477:				; CODE XREF: _X509_load_crl_file+29j
					; _X509_load_crl_file+3Fj
		push	0C4h ; 'Ä'
		push	offset ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ ; ".\\crypto\\x509\\by_file.c"
		push	2

loc_483:				; CODE XREF: _X509_load_crl_file+FAj
					; _X509_load_crl_file+131j
		push	70h ; 'p'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_48F:				; CODE XREF: _X509_load_crl_file+118j
					; _X509_load_crl_file+123j
		test	edi, edi
		jz	short loc_49C
		push	edi
		call	_BIO_free
		add	esp, 4

loc_49C:				; CODE XREF: _X509_load_crl_file+14Dj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
_X509_load_crl_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A4h
; COMDAT (pick any)
		public ??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@
; `string'
??_C@_0BI@NAAEKPAB@?4?2crypto?2x509?2by_file?4c?$AA@ db	'.\crypto\x509\by_file.c',0
					; DATA XREF: _by_file_ctrl+4Ao
					; _X509_load_cert_crl_file+33o	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BCh
; COMDAT (pick any)
		public ??_C@_01KDCPPGHE@r?$AA@
; `string'
??_C@_01KDCPPGHE@r?$AA@	db 'r',0        ; DATA XREF: _X509_load_cert_crl_file+17o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _by_file_ctrl+1Bp
					; DATA XREF: _by_file_ctrl+1Br
		extrn _sk_num:near	; CODE XREF: _X509_load_cert_crl_file+8Ep
					; _X509_load_cert_crl_file+DEp
		extrn _sk_value:near	; CODE XREF: _X509_load_cert_crl_file+A2p
		extrn _sk_pop_free:near	; CODE XREF: _X509_load_cert_crl_file+F1p
		extrn _BIO_s_file:near	; CODE XREF: _X509_load_cert_file+17p
					; _X509_load_crl_file+17p
		extrn _BIO_new_file:near ; CODE	XREF: _X509_load_cert_crl_file+20p
		extrn _BIO_new:near	; CODE XREF: _X509_load_cert_file+1Dp
					; _X509_load_crl_file+1Dp
		extrn _BIO_free:near	; CODE XREF: _X509_load_cert_crl_file+5Ep
					; _X509_load_cert_file+150p ...
		extrn _BIO_ctrl:near	; CODE XREF: _X509_load_cert_file+35p
					; _X509_load_crl_file+35p
		extrn _ERR_put_error:near ; CODE XREF: _by_file_ctrl+55p
					; _X509_load_cert_crl_file+41p	...
		extrn _ERR_peek_last_error:near	; CODE XREF: _X509_load_cert_file:loc_286p
					; _X509_load_crl_file:loc_3E6p
		extrn _ERR_clear_error:near ; CODE XREF: _X509_load_cert_file+B5p
					; _X509_load_crl_file+B5p
		extrn _X509_STORE_add_cert:near	; CODE XREF: _X509_load_cert_crl_file+BBp
					; _X509_load_cert_file+74p ...
		extrn _X509_STORE_add_crl:near ; CODE XREF: _X509_load_cert_crl_file+D3p
					; _X509_load_crl_file+74p ...
		extrn _d2i_X509_bio:near ; CODE	XREF: _X509_load_cert_file+E0p
		extrn _d2i_X509_CRL_bio:near ; CODE XREF: _X509_load_crl_file+E0p
		extrn _X509_get_default_cert_file:near ; CODE XREF: _by_file_ctrl+2Ap
		extrn _X509_get_default_cert_file_env:near ; CODE XREF:	_by_file_ctrl+15p
		extrn _X509_free:near	; CODE XREF: _X509_load_cert_file+86p
					; _X509_load_cert_file+11Bp
		extrn _X509_CRL_free:near ; CODE XREF: _X509_load_crl_file+86p
					; _X509_load_crl_file+11Bp
		extrn _X509_INFO_free:near ; DATA XREF:	_X509_load_cert_crl_file:loc_1CFo
		extrn _PEM_X509_INFO_read_bio:near ; CODE XREF:	_X509_load_cert_crl_file+56p
		extrn _PEM_read_bio_X509_AUX:near ; CODE XREF: _X509_load_cert_file+59p
					; _X509_load_cert_file+92p
		extrn _PEM_read_bio_X509_CRL:near ; CODE XREF: _X509_load_crl_file+59p
					; _X509_load_crl_file+92p


		end
