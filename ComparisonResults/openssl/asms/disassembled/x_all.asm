;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D5969F5A96E7CCE53365CEBE00FDF1CA
; Input	CRC32 :	50ED8652

; File Name   :	C:\compspace\Diff\openssl\obj\x_all.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NETSCAPE_SPKI_sign
_NETSCAPE_SPKI_sign proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	0
		push	dword ptr [eax+4]
		call	_NETSCAPE_SPKAC_it
		push	eax
		call	_ASN1_item_sign
		add	esp, 1Ch
		retn
_NETSCAPE_SPKI_sign endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NETSCAPE_SPKI_verify
_NETSCAPE_SPKI_verify proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	_NETSCAPE_SPKAC_it
		push	eax
		call	_ASN1_item_verify
		add	esp, 14h
		retn
_NETSCAPE_SPKI_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS7_ISSUER_AND_SERIAL_digest
_PKCS7_ISSUER_AND_SERIAL_digest	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		push	[esp+0Ch+arg_4]
		call	_PKCS7_ISSUER_AND_SERIAL_it
		push	eax
		call	_ASN1_item_digest
		add	esp, 14h
		retn
_PKCS7_ISSUER_AND_SERIAL_digest	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CRL_digest
_X509_CRL_digest proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		push	[esp+0Ch+arg_4]
		call	_X509_CRL_it
		push	eax
		call	_ASN1_item_digest
		add	esp, 14h
		retn
_X509_CRL_digest endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 88h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CRL_http_nbio
_X509_CRL_http_nbio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		call	_X509_CRL_it
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_OCSP_REQ_CTX_nbio_d2i
		add	esp, 0Ch
		retn
_X509_CRL_http_nbio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CRL_sign
_X509_CRL_sign	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		mov	eax, [ecx]
		mov	dword ptr [eax+24h], 1
		mov	eax, [ecx]
		push	eax
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+4]
		push	dword ptr [eax+4]
		call	_X509_CRL_INFO_it
		push	eax
		call	_ASN1_item_sign
		add	esp, 1Ch
		retn
_X509_CRL_sign	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CRL_sign_ctx
_X509_CRL_sign_ctx proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	[esp+arg_4]
		mov	eax, [ecx]
		mov	dword ptr [eax+24h], 1
		mov	eax, [ecx]
		push	eax
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+4]
		push	dword ptr [eax+4]
		call	_X509_CRL_INFO_it
		push	eax
		call	_ASN1_item_sign_ctx
		add	esp, 18h
		retn
_X509_CRL_sign_ctx endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_digest
_X509_NAME_digest proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		push	[esp+0Ch+arg_4]
		call	_X509_NAME_it
		push	eax
		call	_ASN1_item_digest
		add	esp, 14h
		retn
_X509_NAME_digest endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_REQ_digest
_X509_REQ_digest proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		push	[esp+0Ch+arg_4]
		call	_X509_REQ_it
		push	eax
		call	_ASN1_item_digest
		add	esp, 14h
		retn
_X509_REQ_digest endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_REQ_sign
_X509_REQ_sign	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	0
		push	dword ptr [eax+4]
		call	_X509_REQ_INFO_it
		push	eax
		call	_ASN1_item_sign
		add	esp, 1Ch
		retn
_X509_REQ_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 164h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_REQ_sign_ctx
_X509_REQ_sign_ctx proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	0
		push	dword ptr [eax+4]
		call	_X509_REQ_INFO_it
		push	eax
		call	_ASN1_item_sign_ctx
		add	esp, 18h
		retn
_X509_REQ_sign_ctx endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 188h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_REQ_verify
_X509_REQ_verify proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	_X509_REQ_INFO_it
		push	eax
		call	_ASN1_item_verify
		add	esp, 14h
		retn
_X509_REQ_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_digest
_X509_digest	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		push	[esp+0Ch+arg_4]
		call	_X509_it
		push	eax
		call	_ASN1_item_digest
		add	esp, 14h
		retn
_X509_digest	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_http_nbio
_X509_http_nbio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		call	_X509_it
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_OCSP_REQ_CTX_nbio_d2i
		add	esp, 0Ch
		retn
_X509_http_nbio	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_pubkey_digest
_X509_pubkey_digest proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_0]
		call	_X509_get0_pubkey_bitstr
		add	esp, 4
		test	eax, eax
		jnz	short loc_1F1
		retn
; ---------------------------------------------------------------------------

loc_1F1:				; CODE XREF: _X509_pubkey_digest+Ej
		push	0
		push	[esp+4+arg_4]
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		call	_EVP_Digest
		add	esp, 18h
		retn
_X509_pubkey_digest endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_sign
_X509_sign	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		mov	eax, [ecx]
		mov	dword ptr [eax+30h], 1
		mov	eax, [ecx]
		push	eax
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+4]
		push	dword ptr [eax+8]
		call	_X509_CINF_it
		push	eax
		call	_ASN1_item_sign
		add	esp, 1Ch
		retn
_X509_sign	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_sign_ctx
_X509_sign_ctx	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	[esp+arg_4]
		mov	eax, [ecx]
		mov	dword ptr [eax+30h], 1
		mov	eax, [ecx]
		push	eax
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+4]
		push	dword ptr [eax+8]
		call	_X509_CINF_it
		push	eax
		call	_ASN1_item_sign_ctx
		add	esp, 18h
		retn
_X509_sign_ctx	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_verify
_X509_verify	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		push	dword ptr [eax+8]
		push	dword ptr [esi+4]
		call	_X509_ALGOR_cmp
		add	esp, 8
		test	eax, eax
		jz	short loc_289
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_289:				; CODE XREF: _X509_verify+17j
		push	[esp+4+arg_4]
		push	dword ptr [esi]
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		call	_X509_CINF_it
		push	eax
		call	_ASN1_item_verify
		add	esp, 14h
		pop	esi
		retn
_X509_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_DSAPrivateKey_bio
_d2i_DSAPrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_DSAPrivateKey
		push	offset _DSA_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_DSAPrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_DSAPrivateKey_fp
_d2i_DSAPrivateKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_DSAPrivateKey
		push	offset _DSA_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_DSAPrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_DSA_PUBKEY_bio
_d2i_DSA_PUBKEY_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_DSA_PUBKEY
		push	offset _DSA_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_DSA_PUBKEY_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_DSA_PUBKEY_fp
_d2i_DSA_PUBKEY_fp proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_DSA_PUBKEY
		push	offset _DSA_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_DSA_PUBKEY_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 318h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ECPrivateKey_bio
_d2i_ECPrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_ECPrivateKey
		push	offset _EC_KEY_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_ECPrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 334h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ECPrivateKey_fp
_d2i_ECPrivateKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_ECPrivateKey
		push	offset _EC_KEY_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_ECPrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_EC_PUBKEY_bio
_d2i_EC_PUBKEY_bio proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_EC_PUBKEY
		push	offset _EC_KEY_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_EC_PUBKEY_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_EC_PUBKEY_fp
_d2i_EC_PUBKEY_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_EC_PUBKEY
		push	offset _EC_KEY_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_EC_PUBKEY_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 388h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS7_bio
_d2i_PKCS7_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_PKCS7_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_PKCS7_bio	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS7_fp
_d2i_PKCS7_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_PKCS7_it
		push	eax
		call	_ASN1_item_d2i_fp
		add	esp, 0Ch
		retn
_d2i_PKCS7_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8_PRIV_KEY_INFO_bio
_d2i_PKCS8_PRIV_KEY_INFO_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_PKCS8_PRIV_KEY_INFO
		push	offset _PKCS8_PRIV_KEY_INFO_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_PKCS8_PRIV_KEY_INFO_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8_PRIV_KEY_INFO_fp
_d2i_PKCS8_PRIV_KEY_INFO_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_PKCS8_PRIV_KEY_INFO
		push	offset _PKCS8_PRIV_KEY_INFO_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_PKCS8_PRIV_KEY_INFO_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8_bio
_d2i_PKCS8_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_X509_SIG
		push	offset _X509_SIG_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_PKCS8_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8_fp
_d2i_PKCS8_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_X509_SIG
		push	offset _X509_SIG_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_PKCS8_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 428h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PUBKEY_bio
_d2i_PUBKEY_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_PUBKEY
		push	offset _EVP_PKEY_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_PUBKEY_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 444h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PUBKEY_fp
_d2i_PUBKEY_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_PUBKEY
		push	offset _EVP_PKEY_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_PUBKEY_fp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 460h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PrivateKey_bio
_d2i_PrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_AutoPrivateKey
		push	offset _EVP_PKEY_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_PrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 47Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PrivateKey_fp
_d2i_PrivateKey_fp proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_AutoPrivateKey
		push	offset _EVP_PKEY_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_PrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 498h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSAPrivateKey_bio
_d2i_RSAPrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPrivateKey_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_RSAPrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSAPrivateKey_fp
_d2i_RSAPrivateKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPrivateKey_it
		push	eax
		call	_ASN1_item_d2i_fp
		add	esp, 0Ch
		retn
_d2i_RSAPrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSAPublicKey_bio
_d2i_RSAPublicKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPublicKey_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_RSAPublicKey_bio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSAPublicKey_fp
_d2i_RSAPublicKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPublicKey_it
		push	eax
		call	_ASN1_item_d2i_fp
		add	esp, 0Ch
		retn
_d2i_RSAPublicKey_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSA_PUBKEY_bio
_d2i_RSA_PUBKEY_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_RSA_PUBKEY
		push	offset _RSA_new
		call	_ASN1_d2i_bio
		add	esp, 10h
		retn
_d2i_RSA_PUBKEY_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 514h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSA_PUBKEY_fp
_d2i_RSA_PUBKEY_fp proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _d2i_RSA_PUBKEY
		push	offset _RSA_new
		call	_ASN1_d2i_fp
		add	esp, 10h
		retn
_d2i_RSA_PUBKEY_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 530h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_CRL_bio
_d2i_X509_CRL_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_CRL_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_X509_CRL_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 548h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_CRL_fp
_d2i_X509_CRL_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_CRL_it
		push	eax
		call	_ASN1_item_d2i_fp
		add	esp, 0Ch
		retn
_d2i_X509_CRL_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 560h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_REQ_bio
_d2i_X509_REQ_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_REQ_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_X509_REQ_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 578h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_REQ_fp
_d2i_X509_REQ_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_REQ_it
		push	eax
		call	_ASN1_item_d2i_fp
		add	esp, 0Ch
		retn
_d2i_X509_REQ_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 590h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_bio
_d2i_X509_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_X509_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_fp
_d2i_X509_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_it
		push	eax
		call	_ASN1_item_d2i_fp
		add	esp, 0Ch
		retn
_d2i_X509_fp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_DSAPrivateKey_bio
_i2d_DSAPrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_DSAPrivateKey
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_DSAPrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_DSAPrivateKey_fp
_i2d_DSAPrivateKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_DSAPrivateKey
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_DSAPrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_DSA_PUBKEY_bio
_i2d_DSA_PUBKEY_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_DSA_PUBKEY
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_DSA_PUBKEY_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 608h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_DSA_PUBKEY_fp
_i2d_DSA_PUBKEY_fp proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_DSA_PUBKEY
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_DSA_PUBKEY_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 620h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ECPrivateKey_bio
_i2d_ECPrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_ECPrivateKey
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_ECPrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 638h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ECPrivateKey_fp
_i2d_ECPrivateKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_ECPrivateKey
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_ECPrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 650h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_EC_PUBKEY_bio
_i2d_EC_PUBKEY_bio proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_EC_PUBKEY
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_EC_PUBKEY_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 668h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_EC_PUBKEY_fp
_i2d_EC_PUBKEY_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_EC_PUBKEY
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_EC_PUBKEY_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 680h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS7_bio
_i2d_PKCS7_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_PKCS7_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_PKCS7_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 698h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS7_fp
_i2d_PKCS7_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_PKCS7_it
		push	eax
		call	_ASN1_item_i2d_fp
		add	esp, 0Ch
		retn
_i2d_PKCS7_fp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8PrivateKeyInfo_bio
_i2d_PKCS8PrivateKeyInfo_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	[esp+4+arg_4]
		call	_EVP_PKEY2PKCS8
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_6C5
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6C5:				; CODE XREF: _i2d_PKCS8PrivateKeyInfo_bio+11j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		push	offset _i2d_PKCS8_PRIV_KEY_INFO
		call	_ASN1_i2d_bio
		push	edi
		mov	esi, eax
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_i2d_PKCS8PrivateKeyInfo_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8PrivateKeyInfo_fp
_i2d_PKCS8PrivateKeyInfo_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	[esp+4+arg_4]
		call	_EVP_PKEY2PKCS8
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_6FD
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6FD:				; CODE XREF: _i2d_PKCS8PrivateKeyInfo_fp+11j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		push	offset _i2d_PKCS8_PRIV_KEY_INFO
		call	_ASN1_i2d_fp
		push	edi
		mov	esi, eax
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_i2d_PKCS8PrivateKeyInfo_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 720h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8_PRIV_KEY_INFO_bio
_i2d_PKCS8_PRIV_KEY_INFO_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_PKCS8_PRIV_KEY_INFO
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_PKCS8_PRIV_KEY_INFO_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 738h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8_PRIV_KEY_INFO_fp
_i2d_PKCS8_PRIV_KEY_INFO_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_PKCS8_PRIV_KEY_INFO
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_PKCS8_PRIV_KEY_INFO_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 750h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8_bio
_i2d_PKCS8_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_X509_SIG
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_PKCS8_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 768h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8_fp
_i2d_PKCS8_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_X509_SIG
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_PKCS8_fp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 780h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PUBKEY_bio
_i2d_PUBKEY_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_PUBKEY
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_PUBKEY_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 798h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PUBKEY_fp
_i2d_PUBKEY_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_PUBKEY
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_PUBKEY_fp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PrivateKey_bio
_i2d_PrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_PrivateKey
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_PrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PrivateKey_fp
_i2d_PrivateKey_fp proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_PrivateKey
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_PrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSAPrivateKey_bio
_i2d_RSAPrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPrivateKey_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_RSAPrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSAPrivateKey_fp
_i2d_RSAPrivateKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPrivateKey_it
		push	eax
		call	_ASN1_item_i2d_fp
		add	esp, 0Ch
		retn
_i2d_RSAPrivateKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 810h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSAPublicKey_bio
_i2d_RSAPublicKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPublicKey_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_RSAPublicKey_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 828h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSAPublicKey_fp
_i2d_RSAPublicKey_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_RSAPublicKey_it
		push	eax
		call	_ASN1_item_i2d_fp
		add	esp, 0Ch
		retn
_i2d_RSAPublicKey_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 840h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSA_PUBKEY_bio
_i2d_RSA_PUBKEY_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_RSA_PUBKEY
		call	_ASN1_i2d_bio
		add	esp, 0Ch
		retn
_i2d_RSA_PUBKEY_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 858h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSA_PUBKEY_fp
_i2d_RSA_PUBKEY_fp proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	offset _i2d_RSA_PUBKEY
		call	_ASN1_i2d_fp
		add	esp, 0Ch
		retn
_i2d_RSA_PUBKEY_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 870h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_CRL_bio
_i2d_X509_CRL_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_CRL_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_X509_CRL_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 888h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_CRL_fp
_i2d_X509_CRL_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_CRL_it
		push	eax
		call	_ASN1_item_i2d_fp
		add	esp, 0Ch
		retn
_i2d_X509_CRL_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_REQ_bio
_i2d_X509_REQ_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_REQ_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_X509_REQ_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_REQ_fp
_i2d_X509_REQ_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_REQ_it
		push	eax
		call	_ASN1_item_i2d_fp
		add	esp, 0Ch
		retn
_i2d_X509_REQ_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_bio
_i2d_X509_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_X509_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_fp
_i2d_X509_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_X509_it
		push	eax
		call	_ASN1_item_i2d_fp
		add	esp, 0Ch
		retn
_i2d_X509_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_d2i_fp:near	; CODE XREF: _d2i_DSAPrivateKey_fp+12p
					; _d2i_DSA_PUBKEY_fp+12p ...
		extrn _ASN1_item_d2i_fp:near ; CODE XREF: _d2i_PKCS7_fp+Ep
					; _d2i_RSAPrivateKey_fp+Ep ...
		extrn _ASN1_i2d_fp:near	; CODE XREF: _i2d_DSAPrivateKey_fp+Dp
					; _i2d_DSA_PUBKEY_fp+Dp ...
		extrn _ASN1_item_i2d_fp:near ; CODE XREF: _i2d_PKCS7_fp+Ep
					; _i2d_RSAPrivateKey_fp+Ep ...
		extrn _ASN1_d2i_bio:near ; CODE	XREF: _d2i_DSAPrivateKey_bio+12p
					; _d2i_DSA_PUBKEY_bio+12p ...
		extrn _ASN1_item_d2i_bio:near ;	CODE XREF: _d2i_PKCS7_bio+Ep
					; _d2i_RSAPrivateKey_bio+Ep ...
		extrn _ASN1_i2d_bio:near ; CODE	XREF: _i2d_DSAPrivateKey_bio+Dp
					; _i2d_DSA_PUBKEY_bio+Dp ...
		extrn _ASN1_item_i2d_bio:near ;	CODE XREF: _i2d_PKCS7_bio+Ep
					; _i2d_RSAPrivateKey_bio+Ep ...
		extrn _EVP_Digest:near	; CODE XREF: _X509_pubkey_digest+24p
		extrn _EVP_PKEY_new:near ; DATA	XREF: _d2i_PUBKEY_bio+Do
					; _d2i_PUBKEY_fp+Do ...
		extrn _d2i_AutoPrivateKey:near ; DATA XREF: _d2i_PrivateKey_bio+8o
					; _d2i_PrivateKey_fp+8o
		extrn _i2d_PrivateKey:near ; DATA XREF:	_i2d_PrivateKey_bio+8o
					; _i2d_PrivateKey_fp+8o
		extrn _EC_KEY_new:near	; DATA XREF: _d2i_ECPrivateKey_bio+Do
					; _d2i_ECPrivateKey_fp+Do ...
		extrn _d2i_ECPrivateKey:near ; DATA XREF: _d2i_ECPrivateKey_bio+8o
					; _d2i_ECPrivateKey_fp+8o
		extrn _i2d_ECPrivateKey:near ; DATA XREF: _i2d_ECPrivateKey_bio+8o
					; _i2d_ECPrivateKey_fp+8o
		extrn _RSA_new:near	; DATA XREF: _d2i_RSA_PUBKEY_bio+Do
					; _d2i_RSA_PUBKEY_fp+Do
		extrn _RSAPublicKey_it:near ; CODE XREF: _d2i_RSAPublicKey_bio+8p
					; _d2i_RSAPublicKey_fp+8p ...
		extrn _RSAPrivateKey_it:near ; CODE XREF: _d2i_RSAPrivateKey_bio+8p
					; _d2i_RSAPrivateKey_fp+8p ...
		extrn _DSA_new:near	; DATA XREF: _d2i_DSAPrivateKey_bio+Do
					; _d2i_DSAPrivateKey_fp+Do ...
		extrn _d2i_DSAPrivateKey:near ;	DATA XREF: _d2i_DSAPrivateKey_bio+8o
					; _d2i_DSAPrivateKey_fp+8o
		extrn _i2d_DSAPrivateKey:near ;	DATA XREF: _i2d_DSAPrivateKey_bio+8o
					; _i2d_DSAPrivateKey_fp+8o
		extrn _PKCS7_ISSUER_AND_SERIAL_it:near
					; CODE XREF: _PKCS7_ISSUER_AND_SERIAL_digest+10p
		extrn _PKCS7_it:near	; CODE XREF: _d2i_PKCS7_bio+8p
					; _d2i_PKCS7_fp+8p ...
		extrn _X509_ALGOR_cmp:near ; CODE XREF:	_X509_verify+Dp
		extrn _i2d_PUBKEY:near	; DATA XREF: _i2d_PUBKEY_bio+8o
					; _i2d_PUBKEY_fp+8o
		extrn _d2i_PUBKEY:near	; DATA XREF: _d2i_PUBKEY_bio+8o
					; _d2i_PUBKEY_fp+8o
		extrn _i2d_RSA_PUBKEY:near ; DATA XREF:	_i2d_RSA_PUBKEY_bio+8o
					; _i2d_RSA_PUBKEY_fp+8o
		extrn _d2i_RSA_PUBKEY:near ; DATA XREF:	_d2i_RSA_PUBKEY_bio+8o
					; _d2i_RSA_PUBKEY_fp+8o
		extrn _i2d_DSA_PUBKEY:near ; DATA XREF:	_i2d_DSA_PUBKEY_bio+8o
					; _i2d_DSA_PUBKEY_fp+8o
		extrn _d2i_DSA_PUBKEY:near ; DATA XREF:	_d2i_DSA_PUBKEY_bio+8o
					; _d2i_DSA_PUBKEY_fp+8o
		extrn _i2d_EC_PUBKEY:near ; DATA XREF: _i2d_EC_PUBKEY_bio+8o
					; _i2d_EC_PUBKEY_fp+8o
		extrn _d2i_EC_PUBKEY:near ; DATA XREF: _d2i_EC_PUBKEY_bio+8o
					; _d2i_EC_PUBKEY_fp+8o
		extrn _X509_SIG_new:near ; DATA	XREF: _d2i_PKCS8_bio+Do
					; _d2i_PKCS8_fp+Do
		extrn _d2i_X509_SIG:near ; DATA	XREF: _d2i_PKCS8_bio+8o
					; _d2i_PKCS8_fp+8o
		extrn _i2d_X509_SIG:near ; DATA	XREF: _i2d_PKCS8_bio+8o
					; _i2d_PKCS8_fp+8o
		extrn _X509_REQ_INFO_it:near ; CODE XREF: _X509_REQ_sign+16p
					; _X509_REQ_sign_ctx+12p ...
		extrn _X509_REQ_it:near	; CODE XREF: _X509_REQ_digest+10p
					; _d2i_X509_REQ_bio+8p	...
		extrn _X509_NAME_it:near ; CODE	XREF: _X509_NAME_digest+10p
		extrn _X509_CINF_it:near ; CODE	XREF: _X509_sign+21p
					; _X509_sign_ctx+1Dp ...
		extrn _X509_it:near	; CODE XREF: _X509_digest+10p
					; _X509_http_nbiop ...
		extrn _X509_CRL_INFO_it:near ; CODE XREF: _X509_CRL_sign+21p
					; _X509_CRL_sign_ctx+1Dp
		extrn _X509_CRL_it:near	; CODE XREF: _X509_CRL_digest+10p
					; _X509_CRL_http_nbiop	...
		extrn _NETSCAPE_SPKAC_it:near ;	CODE XREF: _NETSCAPE_SPKI_sign+16p
					; _NETSCAPE_SPKI_verify+10p
		extrn _ASN1_item_digest:near
					; CODE XREF: _PKCS7_ISSUER_AND_SERIAL_digest+16p
					; _X509_CRL_digest+16p	...
		extrn _ASN1_item_verify:near ; CODE XREF: _NETSCAPE_SPKI_verify+16p
					; _X509_REQ_verify+16p	...
		extrn _ASN1_item_sign:near ; CODE XREF:	_NETSCAPE_SPKI_sign+1Cp
					; _X509_CRL_sign+27p ...
		extrn _ASN1_item_sign_ctx:near ; CODE XREF: _X509_CRL_sign_ctx+23p
					; _X509_REQ_sign_ctx+18p ...
		extrn _X509_get0_pubkey_bitstr:near ; CODE XREF: _X509_pubkey_digest+4p
		extrn _PKCS8_PRIV_KEY_INFO_new:near
					; DATA XREF: _d2i_PKCS8_PRIV_KEY_INFO_bio+Do
					; _d2i_PKCS8_PRIV_KEY_INFO_fp+Do
		extrn _PKCS8_PRIV_KEY_INFO_free:near
					; CODE XREF: _i2d_PKCS8PrivateKeyInfo_bio+28p
					; _i2d_PKCS8PrivateKeyInfo_fp+28p
		extrn _d2i_PKCS8_PRIV_KEY_INFO:near
					; DATA XREF: _d2i_PKCS8_PRIV_KEY_INFO_bio+8o
					; _d2i_PKCS8_PRIV_KEY_INFO_fp+8o
		extrn _i2d_PKCS8_PRIV_KEY_INFO:near
					; DATA XREF: _i2d_PKCS8PrivateKeyInfo_bio+1Bo
					; _i2d_PKCS8PrivateKeyInfo_fp+1Bo ...
		extrn _EVP_PKEY2PKCS8:near ; CODE XREF:	_i2d_PKCS8PrivateKeyInfo_bio+5p
					; _i2d_PKCS8PrivateKeyInfo_fp+5p
		extrn _OCSP_REQ_CTX_nbio_d2i:near ; CODE XREF: _X509_CRL_http_nbio+Ep
					; _X509_http_nbio+Ep


		end
