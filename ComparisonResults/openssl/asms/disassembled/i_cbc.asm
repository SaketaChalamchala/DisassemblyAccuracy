;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C4A3772623DDD1F5FE84F3C66F7B89B4
; Input	CRC32 :	362F90C1

; File Name   :	C:\compspace\Diff\openssl\obj\i_cbc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _idea_cbc_encrypt
_idea_cbc_encrypt proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		cmp	[esp+14h+arg_14], 0
		push	ebx
		push	ebp
		push	esi
		push	edi
		jz	loc_24C
		mov	esi, [esp+24h+arg_10]
		mov	ebp, [esp+24h+arg_8]
		mov	edi, [esp+24h+arg_4]
		mov	ebx, [esp+24h+arg_0]
		movzx	edx, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		movzx	ecx, byte ptr [esi+4]
		shl	eax, 10h
		shl	edx, 18h
		or	edx, eax
		shl	ecx, 18h
		movzx	eax, byte ptr [esi+2]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+3]
		or	edx, eax
		movzx	eax, byte ptr [esi+5]
		shl	eax, 10h
		or	ecx, eax
		mov	[esp+24h+var_14], edx
		movzx	eax, byte ptr [esi+6]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+7]
		or	ecx, eax
		add	ebp, 0FFFFFFF8h
		mov	[esp+24h+arg_14], ecx
		mov	[esp+24h+arg_8], ebp
		js	loc_149
		lea	eax, [ebp+8]
		shr	eax, 3
		mov	[esp+24h+var_10], eax
		neg	eax
		lea	ebp, [ebp+eax*8+0]
		mov	[esp+24h+arg_8], ebp
		mov	ebp, [esp+24h+var_10]

loc_93:					; CODE XREF: _idea_cbc_encrypt+13Fj
		movzx	edx, byte ptr [ebx]
		movzx	eax, byte ptr [ebx+1]
		movzx	ecx, byte ptr [ebx+4]
		shl	eax, 10h
		push	[esp+24h+arg_C]
		shl	edx, 18h
		or	edx, eax
		shl	ecx, 18h
		movzx	eax, byte ptr [ebx+2]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [ebx+3]
		or	edx, eax
		movzx	eax, byte ptr [ebx+5]
		xor	edx, [esp+28h+var_14]
		shl	eax, 10h
		or	ecx, eax
		mov	[esp+28h+var_8], edx
		movzx	eax, byte ptr [ebx+6]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+7]
		or	ecx, eax
		add	ebx, 8
		xor	ecx, [esp+28h+arg_14]
		lea	eax, [esp+28h+var_8]
		push	eax
		mov	[esp+2Ch+var_4], ecx
		call	_idea_encrypt
		mov	edx, [esp+2Ch+var_8]
		add	esp, 8
		mov	ecx, [esp+24h+var_4]
		mov	eax, edx
		shr	eax, 18h
		mov	[edi], al
		mov	eax, edx
		shr	eax, 10h
		mov	[edi+1], al
		mov	eax, edx
		shr	eax, 8
		mov	[edi+2], al
		mov	eax, ecx
		shr	eax, 18h
		mov	[edi+3], dl
		mov	[edi+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edi+6], al
		mov	[edi+7], cl
		add	edi, 8
		mov	[esp+24h+var_14], edx
		mov	[esp+24h+arg_14], ecx
		sub	ebp, 1
		jnz	loc_93
		mov	ebp, [esp+24h+arg_8]

loc_149:				; CODE XREF: _idea_cbc_encrypt+75j
		cmp	ebp, 0FFFFFFF8h
		jz	loc_20F
		mov	eax, [esp+24h+arg_8]
		lea	ecx, [ebp+8]
		add	ecx, ebx
		add	eax, 7
		xor	ebx, ebx
		xor	ebp, ebp
		cmp	eax, 7		; switch 8 cases
		ja	short loc_1B3	; jumptable 00000167 default case
		jmp	ds:$LN44[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	ebx, byte ptr [ecx-1] ;	jumptable 00000167 case	7
		dec	ecx

$LN16:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000167 case	6
		dec	ecx
		shl	eax, 8
		or	ebx, eax

$LN17:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000167 case	5
		dec	ecx
		shl	eax, 10h
		or	ebx, eax

$LN18:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000167 case	4
		dec	ecx
		shl	eax, 18h
		or	ebx, eax

$LN19:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	ebp, byte ptr [ecx-1] ;	jumptable 00000167 case	3
		dec	ecx

$LN20:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000167 case	2
		dec	ecx
		shl	eax, 8
		or	ebp, eax

$LN21:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000167 case	1
		dec	ecx
		shl	eax, 10h
		or	ebp, eax

$LN22:					; CODE XREF: _idea_cbc_encrypt+167j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000167 case	0
		shl	eax, 18h
		or	ebp, eax

loc_1B3:				; CODE XREF: _idea_cbc_encrypt+165j
		push	[esp+24h+arg_C]	; jumptable 00000167 default case
		xor	ebx, [esp+28h+arg_14]
		lea	eax, [esp+28h+var_8]
		xor	ebp, edx
		mov	[esp+28h+var_4], ebx
		push	eax
		mov	[esp+2Ch+var_8], ebp
		call	_idea_encrypt
		mov	edx, [esp+2Ch+var_8]
		add	esp, 8
		mov	ecx, [esp+24h+var_4]
		mov	eax, edx
		shr	eax, 18h
		mov	[edi], al
		mov	eax, edx
		shr	eax, 10h
		mov	[edi+1], al
		mov	eax, edx
		shr	eax, 8
		mov	[edi+2], al
		mov	eax, ecx
		shr	eax, 18h
		mov	[edi+3], dl
		mov	[edi+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edi+6], al
		mov	[edi+7], cl

loc_20F:				; CODE XREF: _idea_cbc_encrypt+14Cj
		mov	eax, edx
		shr	eax, 18h
		mov	[esi], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+1], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+2], al
		mov	eax, ecx
		shr	eax, 18h
		mov	[esi+3], dl
		mov	[esi+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+5], al
		mov	eax, ecx
		shr	eax, 8
		pop	edi
		mov	[esi+6], al
		mov	[esi+7], cl
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_24C:				; CODE XREF: _idea_cbc_encrypt+13j
		mov	ebx, [esp+24h+arg_10]
		mov	edi, [esp+24h+arg_8]
		mov	ebp, [esp+24h+arg_0]
		mov	[esp+24h+var_10], ebx
		movzx	ecx, byte ptr [ebx]
		movzx	eax, byte ptr [ebx+1]
		movzx	edx, byte ptr [ebx+4]
		shl	eax, 10h
		shl	ecx, 18h
		or	ecx, eax
		shl	edx, 18h
		movzx	eax, byte ptr [ebx+2]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+3]
		or	ecx, eax
		movzx	eax, byte ptr [ebx+5]
		shl	eax, 10h
		or	edx, eax
		mov	[esp+24h+arg_14], ecx
		movzx	eax, byte ptr [ebx+6]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [ebx+7]
		or	edx, eax
		add	edi, 0FFFFFFF8h
		mov	[esp+24h+var_14], edx
		js	loc_38C
		mov	ebx, [esp+24h+arg_4]
		lea	eax, [edi+8]
		shr	eax, 3
		mov	[esp+24h+arg_8], eax
		neg	eax
		lea	edi, [edi+eax*8]
		mov	[esp+24h+var_C], edi

loc_2C1:				; CODE XREF: _idea_cbc_encrypt+374j
		movzx	edi, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebp+1]
		movzx	esi, byte ptr [ebp+4]
		shl	eax, 10h
		push	[esp+24h+arg_C]
		shl	edi, 18h
		or	edi, eax
		shl	esi, 18h
		movzx	eax, byte ptr [ebp+2]
		shl	eax, 8
		or	edi, eax
		movzx	eax, byte ptr [ebp+3]
		or	edi, eax
		movzx	eax, byte ptr [ebp+5]
		shl	eax, 10h
		or	esi, eax
		mov	[esp+28h+var_8], edi
		movzx	eax, byte ptr [ebp+6]
		shl	eax, 8
		or	esi, eax
		movzx	eax, byte ptr [ebp+7]
		or	esi, eax
		add	ebp, 8
		lea	eax, [esp+28h+var_8]
		mov	[esp+28h+var_4], esi
		push	eax
		call	_idea_encrypt
		mov	ecx, [esp+2Ch+var_8]
		add	esp, 8
		xor	ecx, [esp+24h+arg_14]
		mov	edx, [esp+24h+var_4]
		mov	eax, ecx
		xor	edx, [esp+24h+var_14]
		shr	eax, 18h
		mov	[ebx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+2], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ebx+3], cl
		mov	ecx, edi
		mov	[ebx+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ebx+5], al
		mov	eax, edx
		shr	eax, 8
		mov	[ebx+6], al
		mov	[ebx+7], dl
		add	ebx, 8
		sub	[esp+24h+arg_8], 1
		mov	edx, esi
		mov	[esp+24h+arg_14], ecx
		mov	[esp+24h+var_14], edx
		jnz	loc_2C1
		mov	edi, [esp+24h+var_C]
		mov	[esp+24h+arg_8], ebx
		mov	ebx, [esp+24h+var_10]
		mov	esi, [esp+24h+arg_8]
		jmp	short loc_390
; ---------------------------------------------------------------------------

loc_38C:				; CODE XREF: _idea_cbc_encrypt+2A4j
		mov	esi, [esp+24h+arg_4]

loc_390:				; CODE XREF: _idea_cbc_encrypt+38Aj
		cmp	edi, 0FFFFFFF8h
		jz	loc_45E
		movzx	ecx, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebp+1]
		movzx	edx, byte ptr [ebp+4]
		push	[esp+24h+arg_C]
		shl	eax, 10h
		shl	ecx, 18h
		or	ecx, eax
		shl	edx, 18h
		movzx	eax, byte ptr [ebp+2]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebp+3]
		or	ecx, eax
		movzx	eax, byte ptr [ebp+5]
		mov	[esp+28h+var_C], ecx
		mov	[esp+28h+var_8], ecx
		movzx	ecx, byte ptr [ebp+6]
		shl	eax, 10h
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [ebp+7]
		or	ecx, eax
		lea	eax, [esp+28h+var_8]
		or	edx, ecx
		push	eax
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_4], edx
		call	_idea_encrypt
		mov	edx, [esp+2Ch+var_8]
		lea	ecx, [edi+8]
		mov	eax, [esp+2Ch+var_4]
		add	edi, 7
		xor	eax, [esp+2Ch+var_14]
		add	esp, 8
		xor	edx, [esp+24h+arg_14]
		add	ecx, esi
		mov	[esp+24h+arg_8], eax
		cmp	edi, 7		; switch 8 cases
		ja	short loc_456	; jumptable 00000419 default case
		jmp	ds:$LN45[edi*4]	; switch jump
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 7
		mov	[ecx], al

$LN25:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 6
		shr	eax, 8
		mov	[ecx], al
		mov	eax, [esp+24h+arg_8]

$LN26:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 5
		shr	eax, 10h
		mov	[ecx], al
		mov	eax, [esp+24h+arg_8]

$LN27:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 4
		shr	eax, 18h
		mov	[ecx], al

$LN28:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 3
		mov	[ecx], dl

$LN29:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 2
		mov	eax, edx
		shr	eax, 8
		mov	[ecx], al

$LN30:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 00000419 case 1
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx], al

$LN31:					; CODE XREF: _idea_cbc_encrypt+419j
					; DATA XREF: .text$mn:$LN45o
		shr	edx, 18h	; jumptable 00000419 case 0
		mov	[ecx-1], dl

loc_456:				; CODE XREF: _idea_cbc_encrypt+417j
		mov	ecx, [esp+24h+var_C] ; jumptable 00000419 default case
		mov	edx, [esp+24h+var_10]

loc_45E:				; CODE XREF: _idea_cbc_encrypt+393j
		mov	eax, ecx
		shr	eax, 18h
		mov	[ebx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+2], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ebx+3], cl
		mov	[ebx+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ebx+5], al
		mov	eax, edx
		pop	edi
		pop	esi
		shr	eax, 8
		mov	[ebx+6], al
		pop	ebp
		mov	[ebx+7], dl
		pop	ebx
		add	esp, 14h
		retn
_idea_cbc_encrypt endp

; ---------------------------------------------------------------------------
		align 4
$LN44		dd offset $LN22		; DATA XREF: _idea_cbc_encrypt+167r
		dd offset $LN21		; jump table for switch	statement
		dd offset $LN20
		dd offset $LN19
		dd offset $LN18
		dd offset $LN17
		dd offset $LN16
		dd offset $LN15
$LN45		dd offset $LN31		; DATA XREF: _idea_cbc_encrypt+419r
		dd offset $LN30		; jump table for switch	statement
		dd offset $LN29
		dd offset $LN28
		dd offset $LN27
		dd offset $LN26
		dd offset $LN25
		dd offset $LN24
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _idea_encrypt
_idea_encrypt	proc near		; CODE XREF: _idea_cbc_encrypt+ECp
					; _idea_cbc_encrypt+1CAp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, 1
		push	ebx
		push	ebp
		push	esi
		mov	ebp, [eax+4]
		mov	esi, [eax]
		mov	eax, esi
		push	edi
		mov	edi, [esp+1Ch+arg_4]
		shr	eax, 10h
		shr	ebp, 10h
		mov	edi, [edi]
		mov	ecx, edi
		imul	ecx, eax
		test	ecx, ecx
		jz	short loc_520
		mov	eax, ecx
		movzx	ebx, cx
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_524
; ---------------------------------------------------------------------------

loc_520:				; CODE XREF: _idea_encrypt+31j
		mov	ebx, edx
		sub	ebx, edi

loc_524:				; CODE XREF: _idea_encrypt+42j
		mov	ecx, [esp+1Ch+arg_4]
		sub	ebx, eax
		add	esi, [ecx+4]
		add	ebp, [ecx+8]
		mov	[esp+1Ch+arg_4], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebp
		mov	eax, [esi+4]
		mov	esi, [ecx+0Ch]
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_55D
		mov	eax, esi
		movzx	edi, si
		shr	eax, 10h
		sub	edi, eax
		mov	eax, edi
		shr	eax, 10h
		jmp	short loc_562
; ---------------------------------------------------------------------------

loc_55D:				; CODE XREF: _idea_encrypt+6Ej
		mov	edi, edx
		sub	edi, [ecx+0Ch]

loc_562:				; CODE XREF: _idea_encrypt+7Fj
		sub	edi, eax
		mov	eax, ebp
		mov	ebp, [ecx+10h]
		xor	eax, ebx
		movzx	eax, ax
		mov	esi, ebp
		imul	esi, eax
		test	esi, esi
		jz	short loc_588
		mov	eax, esi
		movzx	esi, si
		shr	eax, 10h
		sub	esi, eax
		mov	eax, esi
		shr	eax, 10h
		jmp	short loc_58C
; ---------------------------------------------------------------------------

loc_588:				; CODE XREF: _idea_encrypt+99j
		mov	esi, edx
		sub	esi, ebp

loc_58C:				; CODE XREF: _idea_encrypt+AAj
		mov	ebp, [ecx+14h]
		sub	esi, eax
		mov	eax, edi
		xor	eax, [esp+1Ch+arg_4]
		add	eax, esi
		movzx	eax, ax
		imul	ebp, eax
		test	ebp, ebp
		jz	short loc_5B4
		mov	eax, ebp
		movzx	ebp, bp
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_5B9
; ---------------------------------------------------------------------------

loc_5B4:				; CODE XREF: _idea_encrypt+C5j
		mov	ebp, edx
		sub	ebp, [ecx+14h]

loc_5B9:				; CODE XREF: _idea_encrypt+D6j
		sub	ebp, eax
		add	esi, ebp
		mov	eax, ebp
		xor	eax, [esp+1Ch+var_C]
		xor	ebp, ebx
		mov	ebx, [ecx+18h]
		xor	edi, esi
		xor	esi, [esp+1Ch+arg_4]
		movzx	ebp, bp
		imul	ebx, ebp
		mov	[esp+1Ch+var_C], eax
		mov	[esp+1Ch+arg_4], ebp
		test	ebx, ebx
		jz	short loc_5F7
		mov	eax, ebx
		movzx	ebp, bx
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_600
; ---------------------------------------------------------------------------

loc_5F7:				; CODE XREF: _idea_encrypt+102j
		mov	ebp, edx
		sub	ebp, [ecx+18h]
		sub	ebp, [esp+1Ch+arg_4]

loc_600:				; CODE XREF: _idea_encrypt+119j
		add	eax, [ecx+1Ch]
		add	esi, [ecx+20h]
		mov	[esp+1Ch+var_C], eax
		movzx	eax, di
		mov	edi, [ecx+24h]
		imul	edi, eax
		mov	[esp+1Ch+var_4], esi
		test	edi, edi
		jz	short loc_62C
		mov	eax, edi
		movzx	ebx, di
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_631
; ---------------------------------------------------------------------------

loc_62C:				; CODE XREF: _idea_encrypt+13Dj
		mov	ebx, edx
		sub	ebx, [ecx+24h]

loc_631:				; CODE XREF: _idea_encrypt+14Ej
		mov	edi, [ecx+28h]
		sub	ebx, eax
		mov	eax, esi
		xor	eax, ebp
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_655
		mov	eax, edi
		movzx	edi, di
		shr	eax, 10h
		sub	edi, eax
		mov	eax, edi
		shr	eax, 10h
		jmp	short loc_65A
; ---------------------------------------------------------------------------

loc_655:				; CODE XREF: _idea_encrypt+166j
		mov	edi, edx
		sub	edi, [ecx+28h]

loc_65A:				; CODE XREF: _idea_encrypt+177j
		sub	edi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+var_C]
		add	eax, edi
		movzx	eax, ax
		mov	[esp+1Ch+arg_4], eax
		mov	eax, [ecx+2Ch]
		imul	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], eax
		test	eax, eax
		jz	short loc_69E
		mov	esi, [esp+1Ch+var_8]
		shr	eax, 10h
		movzx	esi, si
		sub	esi, eax
		mov	eax, esi
		mov	[esp+1Ch+arg_4], esi
		mov	esi, [esp+1Ch+var_4]
		shr	eax, 10h
		sub	[esp+1Ch+arg_4], eax
		mov	eax, [esp+1Ch+arg_4]
		jmp	short loc_6A7
; ---------------------------------------------------------------------------

loc_69E:				; CODE XREF: _idea_encrypt+19Dj
		mov	eax, edx
		sub	eax, [ecx+2Ch]
		sub	eax, [esp+1Ch+arg_4]

loc_6A7:				; CODE XREF: _idea_encrypt+1C0j
		add	edi, eax
		mov	[esp+1Ch+arg_4], eax
		xor	[esp+1Ch+arg_4], esi
		xor	eax, ebp
		mov	esi, [ecx+30h]
		xor	ebx, edi
		xor	edi, [esp+1Ch+var_C]
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_6D7
		mov	eax, esi
		movzx	ebp, si
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_6DC
; ---------------------------------------------------------------------------

loc_6D7:				; CODE XREF: _idea_encrypt+1E8j
		mov	ebp, edx
		sub	ebp, [ecx+30h]

loc_6DC:				; CODE XREF: _idea_encrypt+1F9j
		mov	esi, [ecx+3Ch]
		sub	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		add	eax, [ecx+34h]
		add	edi, [ecx+38h]
		mov	[esp+1Ch+arg_4], eax
		movzx	eax, bx
		imul	esi, eax
		mov	[esp+1Ch+var_8], edi
		test	esi, esi
		jz	short loc_70E
		mov	eax, esi
		movzx	ebx, si
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_713
; ---------------------------------------------------------------------------

loc_70E:				; CODE XREF: _idea_encrypt+21Fj
		mov	ebx, edx
		sub	ebx, [ecx+3Ch]

loc_713:				; CODE XREF: _idea_encrypt+230j
		mov	esi, [ecx+40h]
		sub	ebx, eax
		mov	eax, edi
		xor	eax, ebp
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_737
		mov	eax, esi
		movzx	esi, si
		shr	eax, 10h
		sub	esi, eax
		mov	eax, esi
		shr	eax, 10h
		jmp	short loc_73C
; ---------------------------------------------------------------------------

loc_737:				; CODE XREF: _idea_encrypt+248j
		mov	esi, edx
		sub	esi, [ecx+40h]

loc_73C:				; CODE XREF: _idea_encrypt+259j
		sub	esi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	eax, esi
		movzx	eax, ax
		mov	[esp+1Ch+var_C], eax
		mov	eax, [ecx+44h]
		imul	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_780
		mov	edi, [esp+1Ch+var_4]
		shr	eax, 10h
		movzx	edi, di
		sub	edi, eax
		mov	eax, edi
		mov	[esp+1Ch+var_C], edi
		mov	edi, [esp+1Ch+var_8]
		shr	eax, 10h
		sub	[esp+1Ch+var_C], eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_789
; ---------------------------------------------------------------------------

loc_780:				; CODE XREF: _idea_encrypt+27Fj
		mov	eax, edx
		sub	eax, [ecx+44h]
		sub	eax, [esp+1Ch+var_C]

loc_789:				; CODE XREF: _idea_encrypt+2A2j
		add	esi, eax
		xor	ebx, esi
		xor	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_4], eax
		xor	eax, ebp
		xor	[esp+1Ch+arg_4], edi
		mov	edi, [ecx+48h]
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_7B9
		mov	eax, edi
		movzx	ebp, di
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_7BE
; ---------------------------------------------------------------------------

loc_7B9:				; CODE XREF: _idea_encrypt+2CAj
		mov	ebp, edx
		sub	ebp, [ecx+48h]

loc_7BE:				; CODE XREF: _idea_encrypt+2DBj
		mov	edi, [ecx+54h]
		sub	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		add	eax, [ecx+4Ch]
		add	esi, [ecx+50h]
		mov	[esp+1Ch+arg_4], eax
		movzx	eax, bx
		imul	edi, eax
		mov	[esp+1Ch+var_8], esi
		test	edi, edi
		jz	short loc_7F0
		mov	eax, edi
		movzx	ebx, di
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_7F5
; ---------------------------------------------------------------------------

loc_7F0:				; CODE XREF: _idea_encrypt+301j
		mov	ebx, edx
		sub	ebx, [ecx+54h]

loc_7F5:				; CODE XREF: _idea_encrypt+312j
		mov	edi, [ecx+58h]
		sub	ebx, eax
		mov	eax, esi
		xor	eax, ebp
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_819
		mov	eax, edi
		movzx	edi, di
		shr	eax, 10h
		sub	edi, eax
		mov	eax, edi
		shr	eax, 10h
		jmp	short loc_81E
; ---------------------------------------------------------------------------

loc_819:				; CODE XREF: _idea_encrypt+32Aj
		mov	edi, edx
		sub	edi, [ecx+58h]

loc_81E:				; CODE XREF: _idea_encrypt+33Bj
		sub	edi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	eax, edi
		movzx	eax, ax
		mov	[esp+1Ch+var_C], eax
		mov	eax, [ecx+5Ch]
		imul	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_862
		mov	esi, [esp+1Ch+var_4]
		shr	eax, 10h
		movzx	esi, si
		sub	esi, eax
		mov	eax, esi
		mov	[esp+1Ch+var_C], esi
		mov	esi, [esp+1Ch+var_8]
		shr	eax, 10h
		sub	[esp+1Ch+var_C], eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_86B
; ---------------------------------------------------------------------------

loc_862:				; CODE XREF: _idea_encrypt+361j
		mov	eax, edx
		sub	eax, [ecx+5Ch]
		sub	eax, [esp+1Ch+var_C]

loc_86B:				; CODE XREF: _idea_encrypt+384j
		add	edi, eax
		xor	ebx, edi
		xor	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_4], eax
		xor	eax, ebp
		xor	[esp+1Ch+arg_4], esi
		mov	esi, [ecx+60h]
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_89B
		mov	eax, esi
		movzx	ebp, si
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_8A0
; ---------------------------------------------------------------------------

loc_89B:				; CODE XREF: _idea_encrypt+3ACj
		mov	ebp, edx
		sub	ebp, [ecx+60h]

loc_8A0:				; CODE XREF: _idea_encrypt+3BDj
		mov	esi, [ecx+6Ch]
		sub	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		add	eax, [ecx+64h]
		add	edi, [ecx+68h]
		mov	[esp+1Ch+arg_4], eax
		movzx	eax, bx
		imul	esi, eax
		mov	[esp+1Ch+var_8], edi
		test	esi, esi
		jz	short loc_8D2
		mov	eax, esi
		movzx	ebx, si
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_8D7
; ---------------------------------------------------------------------------

loc_8D2:				; CODE XREF: _idea_encrypt+3E3j
		mov	ebx, edx
		sub	ebx, [ecx+6Ch]

loc_8D7:				; CODE XREF: _idea_encrypt+3F4j
		mov	esi, [ecx+70h]
		sub	ebx, eax
		mov	eax, edi
		xor	eax, ebp
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_8FB
		mov	eax, esi
		movzx	esi, si
		shr	eax, 10h
		sub	esi, eax
		mov	eax, esi
		shr	eax, 10h
		jmp	short loc_900
; ---------------------------------------------------------------------------

loc_8FB:				; CODE XREF: _idea_encrypt+40Cj
		mov	esi, edx
		sub	esi, [ecx+70h]

loc_900:				; CODE XREF: _idea_encrypt+41Dj
		sub	esi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	eax, esi
		movzx	eax, ax
		mov	[esp+1Ch+var_C], eax
		mov	eax, [ecx+74h]
		imul	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_944
		mov	edi, [esp+1Ch+var_4]
		shr	eax, 10h
		movzx	edi, di
		sub	edi, eax
		mov	eax, edi
		mov	[esp+1Ch+var_C], edi
		mov	edi, [esp+1Ch+var_8]
		shr	eax, 10h
		sub	[esp+1Ch+var_C], eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_94D
; ---------------------------------------------------------------------------

loc_944:				; CODE XREF: _idea_encrypt+443j
		mov	eax, edx
		sub	eax, [ecx+74h]
		sub	eax, [esp+1Ch+var_C]

loc_94D:				; CODE XREF: _idea_encrypt+466j
		add	esi, eax
		xor	ebx, esi
		xor	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_4], eax
		xor	eax, ebp
		xor	[esp+1Ch+arg_4], edi
		mov	edi, [ecx+78h]
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_97D
		mov	eax, edi
		movzx	ebp, di
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_982
; ---------------------------------------------------------------------------

loc_97D:				; CODE XREF: _idea_encrypt+48Ej
		mov	ebp, edx
		sub	ebp, [ecx+78h]

loc_982:				; CODE XREF: _idea_encrypt+49Fj
		mov	edi, [ecx+84h]
		sub	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		add	eax, [ecx+7Ch]
		add	esi, [ecx+80h]
		mov	[esp+1Ch+arg_4], eax
		movzx	eax, bx
		imul	edi, eax
		mov	[esp+1Ch+var_8], esi
		test	edi, edi
		jz	short loc_9BA
		mov	eax, edi
		movzx	ebx, di
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_9C2
; ---------------------------------------------------------------------------

loc_9BA:				; CODE XREF: _idea_encrypt+4CBj
		mov	ebx, edx
		sub	ebx, [ecx+84h]

loc_9C2:				; CODE XREF: _idea_encrypt+4DCj
		mov	edi, [ecx+88h]
		sub	ebx, eax
		mov	eax, esi
		xor	eax, ebp
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_9E9
		mov	eax, edi
		movzx	edi, di
		shr	eax, 10h
		sub	edi, eax
		mov	eax, edi
		shr	eax, 10h
		jmp	short loc_9F1
; ---------------------------------------------------------------------------

loc_9E9:				; CODE XREF: _idea_encrypt+4FAj
		mov	edi, edx
		sub	edi, [ecx+88h]

loc_9F1:				; CODE XREF: _idea_encrypt+50Bj
		sub	edi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	eax, edi
		movzx	eax, ax
		mov	[esp+1Ch+var_C], eax
		mov	eax, [ecx+8Ch]
		imul	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_A38
		mov	esi, [esp+1Ch+var_4]
		shr	eax, 10h
		movzx	esi, si
		sub	esi, eax
		mov	eax, esi
		mov	[esp+1Ch+var_C], esi
		mov	esi, [esp+1Ch+var_8]
		shr	eax, 10h
		sub	[esp+1Ch+var_C], eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_A44
; ---------------------------------------------------------------------------

loc_A38:				; CODE XREF: _idea_encrypt+537j
		mov	eax, edx
		sub	eax, [ecx+8Ch]
		sub	eax, [esp+1Ch+var_C]

loc_A44:				; CODE XREF: _idea_encrypt+55Aj
		add	edi, eax
		xor	ebx, edi
		xor	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_4], eax
		xor	eax, ebp
		xor	[esp+1Ch+arg_4], esi
		mov	esi, [ecx+90h]
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_A77
		mov	eax, esi
		movzx	ebp, si
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_A7F
; ---------------------------------------------------------------------------

loc_A77:				; CODE XREF: _idea_encrypt+588j
		mov	ebp, edx
		sub	ebp, [ecx+90h]

loc_A7F:				; CODE XREF: _idea_encrypt+599j
		mov	esi, [ecx+9Ch]
		sub	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		add	eax, [ecx+94h]
		add	edi, [ecx+98h]
		mov	[esp+1Ch+arg_4], eax
		movzx	eax, bx
		imul	esi, eax
		mov	[esp+1Ch+var_8], edi
		test	esi, esi
		jz	short loc_ABA
		mov	eax, esi
		movzx	ebx, si
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_AC2
; ---------------------------------------------------------------------------

loc_ABA:				; CODE XREF: _idea_encrypt+5CBj
		mov	ebx, edx
		sub	ebx, [ecx+9Ch]

loc_AC2:				; CODE XREF: _idea_encrypt+5DCj
		mov	esi, [ecx+0A0h]
		sub	ebx, eax
		mov	eax, edi
		xor	eax, ebp
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_AE9
		mov	eax, esi
		movzx	esi, si
		shr	eax, 10h
		sub	esi, eax
		mov	eax, esi
		shr	eax, 10h
		jmp	short loc_AF1
; ---------------------------------------------------------------------------

loc_AE9:				; CODE XREF: _idea_encrypt+5FAj
		mov	esi, edx
		sub	esi, [ecx+0A0h]

loc_AF1:				; CODE XREF: _idea_encrypt+60Bj
		sub	esi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	eax, esi
		movzx	eax, ax
		mov	[esp+1Ch+var_C], eax
		mov	eax, [ecx+0A4h]
		imul	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_B38
		mov	edi, [esp+1Ch+var_4]
		shr	eax, 10h
		movzx	edi, di
		sub	edi, eax
		mov	eax, edi
		mov	[esp+1Ch+var_C], edi
		mov	edi, [esp+1Ch+var_8]
		shr	eax, 10h
		sub	[esp+1Ch+var_C], eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_B44
; ---------------------------------------------------------------------------

loc_B38:				; CODE XREF: _idea_encrypt+637j
		mov	eax, edx
		sub	eax, [ecx+0A4h]
		sub	eax, [esp+1Ch+var_C]

loc_B44:				; CODE XREF: _idea_encrypt+65Aj
		add	esi, eax
		xor	ebx, esi
		xor	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_4], eax
		xor	eax, ebp
		xor	[esp+1Ch+arg_4], edi
		mov	edi, [ecx+0A8h]
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_B77
		mov	eax, edi
		movzx	ebp, di
		shr	eax, 10h
		sub	ebp, eax
		mov	eax, ebp
		shr	eax, 10h
		jmp	short loc_B7F
; ---------------------------------------------------------------------------

loc_B77:				; CODE XREF: _idea_encrypt+688j
		mov	ebp, edx
		sub	ebp, [ecx+0A8h]

loc_B7F:				; CODE XREF: _idea_encrypt+699j
		mov	edi, [ecx+0B4h]
		sub	ebp, eax
		mov	eax, [esp+1Ch+arg_4]
		add	eax, [ecx+0ACh]
		add	esi, [ecx+0B0h]
		mov	[esp+1Ch+arg_4], eax
		movzx	eax, bx
		imul	edi, eax
		mov	[esp+1Ch+var_8], esi
		test	edi, edi
		jz	short loc_BBA
		mov	eax, edi
		movzx	ebx, di
		shr	eax, 10h
		sub	ebx, eax
		mov	eax, ebx
		shr	eax, 10h
		jmp	short loc_BC2
; ---------------------------------------------------------------------------

loc_BBA:				; CODE XREF: _idea_encrypt+6CBj
		mov	ebx, edx
		sub	ebx, [ecx+0B4h]

loc_BC2:				; CODE XREF: _idea_encrypt+6DCj
		mov	edi, [ecx+0B8h]
		sub	ebx, eax
		mov	eax, esi
		xor	eax, ebp
		movzx	eax, ax
		imul	edi, eax
		test	edi, edi
		jz	short loc_BE9
		mov	eax, edi
		movzx	edi, di
		shr	eax, 10h
		sub	edi, eax
		mov	eax, edi
		shr	eax, 10h
		jmp	short loc_BF1
; ---------------------------------------------------------------------------

loc_BE9:				; CODE XREF: _idea_encrypt+6FAj
		mov	edi, edx
		sub	edi, [ecx+0B8h]

loc_BF1:				; CODE XREF: _idea_encrypt+70Bj
		sub	edi, eax
		mov	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	eax, edi
		movzx	eax, ax
		mov	[esp+1Ch+var_C], eax
		mov	eax, [ecx+0BCh]
		imul	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_C38
		mov	esi, [esp+1Ch+var_4]
		shr	eax, 10h
		movzx	esi, si
		sub	esi, eax
		mov	eax, esi
		mov	[esp+1Ch+var_C], esi
		mov	esi, [esp+1Ch+var_8]
		shr	eax, 10h
		sub	[esp+1Ch+var_C], eax
		mov	eax, [esp+1Ch+var_C]
		jmp	short loc_C44
; ---------------------------------------------------------------------------

loc_C38:				; CODE XREF: _idea_encrypt+737j
		mov	eax, edx
		sub	eax, [ecx+0BCh]
		sub	eax, [esp+1Ch+var_C]

loc_C44:				; CODE XREF: _idea_encrypt+75Aj
		add	edi, eax
		xor	ebx, edi
		xor	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_4], eax
		xor	eax, ebp
		xor	[esp+1Ch+arg_4], esi
		mov	ebp, [ecx+0C0h]
		mov	esi, ebp
		movzx	eax, ax
		imul	esi, eax
		test	esi, esi
		jz	short loc_C79
		mov	eax, esi
		movzx	esi, si
		shr	eax, 10h
		sub	esi, eax
		mov	eax, esi
		shr	eax, 10h
		jmp	short loc_C7D
; ---------------------------------------------------------------------------

loc_C79:				; CODE XREF: _idea_encrypt+78Aj
		mov	esi, edx
		sub	esi, ebp

loc_C7D:				; CODE XREF: _idea_encrypt+79Bj
		mov	ebp, [ecx+0C4h]
		sub	esi, eax
		add	ebp, edi
		movzx	eax, bx
		mov	edi, [ecx+0C8h]
		mov	ebx, [ecx+0CCh]
		mov	ecx, ebx
		add	edi, [esp+1Ch+arg_4]
		imul	ecx, eax
		test	ecx, ecx
		jz	short loc_CB4
		mov	eax, ecx
		movzx	edx, cx
		shr	eax, 10h
		sub	edx, eax
		mov	eax, edx
		shr	eax, 10h
		jmp	short loc_CB6
; ---------------------------------------------------------------------------

loc_CB4:				; CODE XREF: _idea_encrypt+7C5j
		sub	edx, ebx

loc_CB6:				; CODE XREF: _idea_encrypt+7D6j
		mov	ecx, [esp+1Ch+arg_0]
		sub	edx, eax
		shl	esi, 10h
		movzx	eax, bp
		or	eax, esi
		shl	edi, 10h
		mov	[ecx], eax
		movzx	eax, dx
		or	edi, eax
		mov	[ecx+4], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_idea_encrypt	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __chkstk:near	; CODE XREF: _idea_cbc_encrypt+5p
					; _idea_encrypt+5p


		end
