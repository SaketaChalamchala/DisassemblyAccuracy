;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6B1D8FFA01D04878A4414BD67D471967
; Input	CRC32 :	82C8093E

; File Name   :	C:\compspace\Diff\openssl\obj\rmd_dgst.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _RMD160_version
_RMD160_version	db 'RIPE-MD160 part of OpenSSL 1.0.2h  3 May 2016',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RIPEMD160_Final
_RIPEMD160_Final proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		lea	edi, [ebx+1Ch]
		mov	esi, [ebx+5Ch]
		mov	byte ptr [esi+edi], 80h	; '€'
		inc	esi
		cmp	esi, 38h ; '8'
		jbe	short loc_68
		mov	eax, 40h ; '@'
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	1
		push	edi
		push	ebx
		xor	esi, esi
		call	_ripemd160_block_asm_data_order
		add	esp, 18h

loc_68:					; CODE XREF: _RIPEMD160_Final+15j
		mov	eax, 38h ; '8'
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		movzx	eax, byte ptr [ebx+14h]
		mov	[edi+38h], al
		movzx	eax, byte ptr [ebx+15h]
		mov	[edi+39h], al
		movzx	eax, byte ptr [ebx+16h]
		mov	[edi+3Ah], al
		movzx	eax, byte ptr [ebx+17h]
		mov	[edi+3Bh], al
		movzx	eax, byte ptr [ebx+18h]
		mov	[edi+3Ch], al
		movzx	eax, byte ptr [ebx+19h]
		mov	[edi+3Dh], al
		movzx	eax, byte ptr [ebx+1Ah]
		push	1
		mov	[edi+3Eh], al
		movzx	eax, byte ptr [ebx+1Bh]
		push	edi
		push	ebx
		mov	[edi+3Fh], al
		call	_ripemd160_block_asm_data_order
		push	40h ; '@'       ; Size
		push	0		; Val
		push	edi		; Dst
		mov	dword ptr [ebx+5Ch], 0
		call	_memset
		mov	ecx, [ebx]
		add	esp, 24h
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, ecx
		shr	eax, 8
		mov	[edx], cl
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+2], al
		shr	ecx, 18h
		mov	[edx+3], cl
		mov	ecx, [ebx+4]
		mov	eax, ecx
		mov	[edx+4], cl
		shr	eax, 8
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+6], al
		shr	ecx, 18h
		mov	[edx+7], cl
		mov	ecx, [ebx+8]
		mov	eax, ecx
		mov	[edx+8], cl
		shr	eax, 8
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Ah], al
		shr	ecx, 18h
		mov	[edx+0Bh], cl
		mov	ecx, [ebx+0Ch]
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ch], cl
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Eh], al
		shr	ecx, 18h
		mov	[edx+0Fh], cl
		mov	ecx, [ebx+10h]
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+10h], cl
		mov	[edx+11h], al
		mov	eax, ecx
		shr	eax, 10h
		pop	edi
		mov	[edx+12h], al
		mov	eax, 1
		shr	ecx, 18h
		pop	esi
		mov	[edx+13h], cl
		pop	ebx
		retn
_RIPEMD160_Final endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl RIPEMD160_Init(void *Dst)
		public _RIPEMD160_Init
_RIPEMD160_Init	proc near

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	60h ; '`'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi], 67452301h
		mov	dword ptr [esi+4], 0EFCDAB89h
		mov	eax, 1
		mov	dword ptr [esi+8], 98BADCFEh
		mov	dword ptr [esi+0Ch], 10325476h
		mov	dword ptr [esi+10h], 0C3D2E1F0h
		pop	esi
		retn
_RIPEMD160_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RIPEMD160_Transform
_RIPEMD160_Transform proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	1
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ripemd160_block_asm_data_order
		add	esp, 0Ch
		retn
_RIPEMD160_Transform endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl RIPEMD160_Update(int, void *Src, size_t Size)
		public _RIPEMD160_Update
_RIPEMD160_Update proc near

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Src]
		push	edi
		mov	edi, [esp+8+Size]
		test	edi, edi
		jz	loc_285
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [ebx+14h]
		lea	ecx, [eax+edi*8]
		cmp	ecx, eax
		jnb	short loc_1DC
		inc	dword ptr [ebx+18h]

loc_1DC:				; CODE XREF: _RIPEMD160_Update+1Fj
		mov	eax, edi
		mov	[ebx+14h], ecx
		mov	ecx, [ebx+5Ch]
		shr	eax, 1Dh
		add	[ebx+18h], eax
		push	esi
		test	ecx, ecx
		jz	short loc_253
		lea	edx, [ebx+1Ch]
		cmp	edi, 40h ; '@'
		jnb	short loc_21A
		lea	eax, [ecx+edi]
		cmp	eax, 40h ; '@'
		jnb	short loc_21A
		push	edi		; Size
		lea	eax, [edx+ecx]
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, 1
		add	[ebx+5Ch], edi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_21A:				; CODE XREF: _RIPEMD160_Update+3Dj
					; _RIPEMD160_Update+45j
		mov	esi, 40h ; '@'
		lea	eax, [edx+ecx]
		sub	esi, ecx
		push	esi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		push	1
		lea	eax, [ebx+1Ch]
		push	eax
		push	ebx
		call	_ripemd160_block_asm_data_order
		push	40h ; '@'       ; Size
		lea	eax, [ebx+1Ch]
		mov	dword ptr [ebx+5Ch], 0
		push	0		; Val
		push	eax		; Dst
		add	ebp, esi
		sub	edi, esi
		call	_memset
		add	esp, 24h

loc_253:				; CODE XREF: _RIPEMD160_Update+35j
		mov	esi, edi
		shr	esi, 6
		test	esi, esi
		jz	short loc_26E
		push	esi
		push	ebp
		push	ebx
		call	_ripemd160_block_asm_data_order
		shl	esi, 6
		add	esp, 0Ch
		add	ebp, esi
		sub	edi, esi

loc_26E:				; CODE XREF: _RIPEMD160_Update+A2j
		test	edi, edi
		jz	short loc_283
		push	edi		; Size
		lea	eax, [ebx+1Ch]
		mov	[ebx+5Ch], edi
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_283:				; CODE XREF: _RIPEMD160_Update+B8j
		pop	esi
		pop	ebx

loc_285:				; CODE XREF: _RIPEMD160_Update+Cj
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_RIPEMD160_Update endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ripemd160_block_asm_data_order:near ; CODE XREF:	_RIPEMD160_Final+30p
					; _RIPEMD160_Final+87p	...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _RIPEMD160_Update+4Dp
					; _RIPEMD160_Update+6Fp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _RIPEMD160_Final+25p
					; _RIPEMD160_Final+46p	...


		end
