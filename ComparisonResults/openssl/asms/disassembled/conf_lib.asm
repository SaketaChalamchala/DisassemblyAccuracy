;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0B63853B63816EFD11ED10AFD4A6DA76
; Input	CRC32 :	A1DCB729

; File Name   :	C:\compspace\Diff\openssl\obj\conf_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _CONF_version
_CONF_version	db 'CONF part of OpenSSL 1.0.2h  3 May 2016',0
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_default_CONF_method dd	?		; DATA XREF: _CONF_dump_bio+Ar
					; _CONF_dump_bio+18w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_dump_bio
_CONF_dump_bio	proc near

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_49
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_49:					; CODE XREF: _CONF_dump_bio+11j
		mov	eax, [eax+8]
		lea	ecx, [esp+0Ch+var_C]
		push	ecx
		call	eax
		mov	eax, [esp+10h+arg_0]
		push	[esp+10h+arg_4]
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h+var_C]
		push	eax
		mov	eax, [esp+18h+var_C]
		mov	eax, [eax+18h]
		call	eax
		add	esp, 18h
		retn
_CONF_dump_bio	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 70h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_dump_fp
_CONF_dump_fp	proc near

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		push	edi
		push	0
		push	[esp+14h+arg_4]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_AE
		push	0CCh ; 'Ì'
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	7
		push	68h ; 'h'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_AE:					; CODE XREF: _CONF_dump_fp+1Dj
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_C1
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_C1:					; CODE XREF: _CONF_dump_fp+45j
		mov	eax, [eax+8]
		lea	ecx, [esp+10h+var_C]
		push	esi
		push	ecx
		call	eax
		mov	eax, [esp+18h+arg_0]
		mov	[esp+18h+var_4], eax
		lea	eax, [esp+18h+var_C]
		push	edi
		push	eax
		mov	eax, [esp+20h+var_C]
		mov	eax, [eax+18h]
		call	eax
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 0Ch
		retn
_CONF_dump_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_free
_CONF_free	proc near

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_115
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_115:				; CODE XREF: _CONF_free+11j
		mov	eax, [eax+8]
		lea	ecx, [esp+0Ch+var_C]
		push	ecx
		call	eax
		mov	eax, [esp+10h+arg_0]
		mov	[esp+10h+var_4], eax
		lea	eax, [esp+10h+var_C]
		push	eax
		mov	eax, [esp+14h+var_C]
		mov	eax, [eax+10h]
		call	eax
		add	esp, 14h
		retn
_CONF_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_get_number
_CONF_get_number proc near

var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	[esp+14h+var_10], 0
		test	esi, esi
		jnz	short loc_16B
		lea	eax, [esp+14h+var_10]
		push	eax
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	esi
		call	_NCONF_get_number_e
		add	esp, 10h
		jmp	short loc_1A6
; ---------------------------------------------------------------------------

loc_16B:				; CODE XREF: _CONF_get_number+19j
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_17E
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_17E:				; CODE XREF: _CONF_get_number+3Aj
		mov	eax, [eax+8]
		lea	ecx, [esp+14h+var_C]
		push	ecx
		call	eax
		lea	eax, [esp+18h+var_10]
		mov	[esp+18h+var_4], esi
		push	eax
		push	[esp+1Ch+arg_8]
		lea	eax, [esp+20h+var_C]
		push	[esp+20h+arg_4]
		push	eax
		call	_NCONF_get_number_e
		add	esp, 14h

loc_1A6:				; CODE XREF: _CONF_get_number+31j
		pop	esi
		test	eax, eax
		jnz	short loc_1B0
		call	_ERR_clear_error

loc_1B0:				; CODE XREF: _CONF_get_number+71j
		mov	eax, [esp+10h+var_10]
		add	esp, 10h
		retn
_CONF_get_number endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_get_section
_CONF_get_section proc near

var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	esi, esi
		jz	short loc_20F
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_1DE
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_1DE:				; CODE XREF: _CONF_get_section+1Aj
		mov	eax, [eax+8]
		lea	ecx, [esp+10h+var_C]
		push	ecx
		call	eax
		mov	eax, [esp+14h+arg_4]
		add	esp, 4
		mov	[esp+10h+var_4], esi
		test	eax, eax
		jnz	short loc_216
		push	12Dh
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	6Bh ; 'k'
		push	6Ch ; 'l'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h

loc_20F:				; CODE XREF: _CONF_get_section+11j
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_216:				; CODE XREF: _CONF_get_section+3Dj
		push	eax
		lea	eax, [esp+14h+var_C]
		push	eax
		call	__CONF_get_section_values
		add	esp, 8
		pop	esi
		add	esp, 0Ch
		retn
_CONF_get_section endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_get_string
_CONF_get_string proc near

var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	esi, esi
		jnz	short loc_273
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	__CONF_get_string
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2A9
		push	141h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	6Ah ; 'j'
		push	6Dh ; 'm'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_273:				; CODE XREF: _CONF_get_string+11j
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_286
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_286:				; CODE XREF: _CONF_get_string+4Ej
		mov	eax, [eax+8]
		lea	ecx, [esp+10h+var_C]
		push	ecx
		call	eax
		push	[esp+14h+arg_8]
		lea	eax, [esp+18h+var_C]
		mov	[esp+18h+var_4], esi
		push	[esp+18h+arg_4]
		push	eax
		call	_NCONF_get_string
		add	esp, 10h

loc_2A9:				; CODE XREF: _CONF_get_string+26j
		pop	esi
		add	esp, 0Ch
		retn
_CONF_get_string endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_load
_CONF_load	proc near

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	edi
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	[esp+14h+arg_4]
		call	_BIO_new_file
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_2EE
		push	69h ; 'i'
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	2
		push	64h ; 'd'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_2EE:				; CODE XREF: _CONF_load+20j
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_301
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_301:				; CODE XREF: _CONF_load+45j
		mov	eax, [eax+8]
		lea	ecx, [esp+10h+var_C]
		push	esi
		push	ecx
		call	eax
		push	[esp+18h+arg_8]
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], eax
		lea	eax, [esp+1Ch+var_C]
		push	edi
		push	eax
		mov	eax, [esp+24h+var_C]
		mov	eax, [eax+14h]
		call	eax
		xor	esi, esi
		test	eax, eax
		push	edi
		cmovnz	esi, [esp+28h+var_4]
		call	_BIO_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 0Ch
		retn
_CONF_load	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 344h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_load_bio
_CONF_load_bio	proc near

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_361
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_361:				; CODE XREF: _CONF_load_bio+11j
		mov	eax, [eax+8]
		lea	ecx, [esp+0Ch+var_C]
		push	ecx
		call	eax
		push	[esp+10h+arg_8]
		mov	eax, [esp+14h+arg_0]
		push	[esp+14h+arg_4]
		mov	[esp+18h+var_4], eax
		lea	eax, [esp+18h+var_C]
		push	eax
		mov	eax, [esp+1Ch+var_C]
		mov	eax, [eax+14h]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		cmovnz	ecx, [esp+1Ch+var_4]
		mov	eax, ecx
		add	esp, 1Ch
		retn
_CONF_load_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 398h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_load_fp
_CONF_load_fp	proc near

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	edi
		push	0
		push	[esp+14h+arg_4]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_3D3
		push	7Ah ; 'z'
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	7
		push	67h ; 'g'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_3D3:				; CODE XREF: _CONF_load_fp+1Dj
		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_3E6
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_3E6:				; CODE XREF: _CONF_load_fp+42j
		mov	eax, [eax+8]
		lea	ecx, [esp+10h+var_C]
		push	esi
		push	ecx
		call	eax
		push	[esp+18h+arg_8]
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], eax
		lea	eax, [esp+1Ch+var_C]
		push	edi
		push	eax
		mov	eax, [esp+24h+var_C]
		mov	eax, [eax+14h]
		call	eax
		xor	esi, esi
		test	eax, eax
		push	edi
		cmovnz	esi, [esp+28h+var_4]
		call	_BIO_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 0Ch
		retn
_CONF_load_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 428h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_set_default_method
_CONF_set_default_method proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ds:_default_CONF_method, eax
		mov	eax, 1
		retn
_CONF_set_default_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 438h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CONF_set_nconf
_CONF_set_nconf	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, ds:_default_CONF_method
		test	eax, eax
		jnz	short loc_44B
		call	_NCONF_default
		mov	ds:_default_CONF_method, eax

loc_44B:				; CODE XREF: _CONF_set_nconf+7j
		mov	eax, [eax+8]
		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	eax
		mov	eax, [esp+8+arg_4]
		add	esp, 4
		mov	[esi+8], eax
		pop	esi
		retn
_CONF_set_nconf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 464h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_dump_bio
_NCONF_dump_bio	proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_487
		push	172h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	69h ; 'i'
		push	69h ; 'i'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_487:				; CODE XREF: _NCONF_dump_bio+6j
		mov	eax, [ecx]
		mov	[esp+arg_0], ecx
		mov	eax, [eax+18h]
		jmp	eax
_NCONF_dump_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 494h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_dump_fp
_NCONF_dump_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	0
		push	[esp+8+arg_4]
		call	_BIO_new_fp
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_4C5
		push	166h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	7
		push	6Ah ; 'j'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4C5:				; CODE XREF: _NCONF_dump_fp+13j
		mov	ecx, [esp+4+arg_0]
		push	edi
		test	ecx, ecx
		jnz	short loc_4F6
		push	172h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	69h ; 'i'
		push	69h ; 'i'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	edi, edi
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4F6:				; CODE XREF: _NCONF_dump_fp+38j
		mov	eax, [ecx]
		push	esi
		push	ecx
		mov	eax, [eax+18h]
		call	eax
		add	esp, 8
		mov	edi, eax
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_NCONF_dump_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 514h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_free
_NCONF_free	proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short locret_527
		mov	eax, [ecx]
		mov	[esp+arg_0], ecx
		mov	eax, [eax+0Ch]
		jmp	eax
; ---------------------------------------------------------------------------

locret_527:				; CODE XREF: _NCONF_free+6j
		retn
_NCONF_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 528h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_free_data
_NCONF_free_data proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short locret_53B
		mov	eax, [ecx]
		mov	[esp+arg_0], ecx
		mov	eax, [eax+10h]
		jmp	eax
; ---------------------------------------------------------------------------

locret_53B:				; CODE XREF: _NCONF_free_data+6j
		retn
_NCONF_free_data endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 53Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_get_number_e
_NCONF_get_number_e proc near		; CODE XREF: _CONF_get_number+29p
					; _CONF_get_number+66p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_C]
		test	ebx, ebx
		jnz	short loc_561
		push	14Fh
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	43h ; 'C'
		push	70h ; 'p'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_561:				; CODE XREF: _NCONF_get_number_e+7j
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	esi
		call	_NCONF_get_string
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_582
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_582:				; CODE XREF: _NCONF_get_number_e+40j
		mov	dword ptr [ebx], 0
		mov	ecx, [esi]
		movzx	eax, byte ptr [edi]
		push	eax
		push	esi
		mov	eax, [ecx+1Ch]
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_5C8
		nop

loc_59C:				; CODE XREF: _NCONF_get_number_e+8Aj
		mov	ecx, [esi]
		movzx	eax, byte ptr [edi]
		push	eax
		push	esi
		mov	eax, [ecx+20h]
		call	eax
		mov	ecx, [ebx]
		lea	edi, [edi+1]
		lea	ecx, [ecx+ecx*4]
		lea	eax, [eax+ecx*2]
		mov	[ebx], eax
		mov	ecx, [esi]
		movzx	eax, byte ptr [edi]
		push	eax
		push	esi
		mov	eax, [ecx+1Ch]
		call	eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_59C

loc_5C8:				; CODE XREF: _NCONF_get_number_e+5Dj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_NCONF_get_number_e endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_get_section
_NCONF_get_section proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_5F7
		push	128h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	69h ; 'i'
		push	6Ch ; 'l'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_5F7:				; CODE XREF: _NCONF_get_section+6j
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_61A
		push	12Dh
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	6Bh ; 'k'
		push	6Ch ; 'l'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_61A:				; CODE XREF: _NCONF_get_section+29j
		mov	[esp+arg_4], ecx
		mov	[esp+arg_0], eax
		jmp	__CONF_get_section_values
_NCONF_get_section endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 628h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_get_string
_NCONF_get_string proc near		; CODE XREF: _CONF_get_string+75p
					; _NCONF_get_number_e+34p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	__CONF_get_string
		add	esp, 0Ch
		test	eax, eax
		jnz	short locret_694
		cmp	[esp+arg_0], eax
		jnz	short loc_661
		push	141h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	6Ah ; 'j'
		push	6Dh ; 'm'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_661:				; CODE XREF: _NCONF_get_string+1Cj
		push	144h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	6Ch ; 'l'
		push	6Dh ; 'm'
		push	0Eh
		call	_ERR_put_error
		push	[esp+14h+arg_8]
		push	offset ??_C@_06NGDKEHGB@?5name?$DN?$AA@	; " name="
		push	[esp+1Ch+arg_4]
		push	offset ??_C@_06BDPCGOPM@group?$DN?$AA@ ; "group="
		push	4
		call	_ERR_add_error_data
		add	esp, 28h
		xor	eax, eax

locret_694:				; CODE XREF: _NCONF_get_string+16j
		retn
_NCONF_get_string endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 698h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_load
_NCONF_load	proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_6BB
		push	105h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	69h ; 'i'
		push	71h ; 'q'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6BB:				; CODE XREF: _NCONF_load+6j
		mov	eax, [ecx]
		mov	[esp+arg_0], ecx
		mov	eax, [eax+24h]
		jmp	eax
_NCONF_load	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_load_bio
_NCONF_load_bio	proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_6EB
		push	11Eh
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	69h ; 'i'
		push	6Eh ; 'n'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6EB:				; CODE XREF: _NCONF_load_bio+6j
		mov	eax, [ecx]
		mov	[esp+arg_0], ecx
		mov	eax, [eax+14h]
		jmp	eax
_NCONF_load_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_load_fp
_NCONF_load_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	0
		push	[esp+8+arg_4]
		call	_BIO_new_fp
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_729
		push	112h
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	7
		push	72h ; 'r'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_729:				; CODE XREF: _NCONF_load_fp+13j
		mov	ecx, [esp+4+arg_0]
		push	edi
		test	ecx, ecx
		jnz	short loc_75A
		push	11Eh
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	69h ; 'i'
		push	6Eh ; 'n'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	edi, edi
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_75A:				; CODE XREF: _NCONF_load_fp+38j
		mov	eax, [ecx]
		push	[esp+8+arg_8]
		push	esi
		mov	eax, [eax+14h]
		push	ecx
		call	eax
		add	esp, 0Ch
		mov	edi, eax
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_NCONF_load_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 77Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_new
_NCONF_new	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_789
		call	_NCONF_default

loc_789:				; CODE XREF: _NCONF_new+6j
		push	eax
		mov	eax, [eax+4]
		call	eax
		add	esp, 4
		test	eax, eax
		jnz	short locret_7B0
		push	0EDh ; 'í'
		push	offset ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ ; ".\\crypto\\conf\\conf_lib.c"
		push	41h ; 'A'
		push	6Fh ; 'o'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax

locret_7B0:				; CODE XREF: _NCONF_new+18j
		retn
_NCONF_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B4h
; COMDAT (pick any)
		public ??_C@_02JDPG@rb?$AA@
; `string'
??_C@_02JDPG@rb?$AA@ db	72h, 62h, 0	; DATA XREF: _CONF_load+Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B8h
; COMDAT (pick any)
		public ??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@
; `string'
??_C@_0BJ@NLLAICIC@?4?2crypto?2conf?2conf_lib?4c?$AA@ db '.\crypto\conf\conf_lib.c',0
					; DATA XREF: _CONF_dump_fp+24o
					; _CONF_get_section+44o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D4h
; COMDAT (pick any)
		public ??_C@_06NGDKEHGB@?5name?$DN?$AA@
; `string'
??_C@_06NGDKEHGB@?5name?$DN?$AA@ db ' name=',0 ; DATA XREF: _NCONF_get_string+52o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7DCh
; COMDAT (pick any)
		public ??_C@_06BDPCGOPM@group?$DN?$AA@
; `string'
??_C@_06BDPCGOPM@group?$DN?$AA@	db 'group=',0 ; DATA XREF: _NCONF_get_string+5Bo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_new_file:near ; CODE	XREF: _CONF_load+14p
		extrn _BIO_new_fp:near	; CODE XREF: _CONF_dump_fp+11p
					; _CONF_load_fp+11p ...
		extrn _BIO_free:near	; CODE XREF: _CONF_dump_fp+76p
					; _CONF_load+81p ...
		extrn _ERR_put_error:near ; CODE XREF: _CONF_dump_fp+2Fp
					; _CONF_get_section+4Fp ...
		extrn _ERR_clear_error:near ; CODE XREF: _CONF_get_number+73p
		extrn _ERR_add_error_data:near ; CODE XREF: _NCONF_get_string+62p
		extrn _NCONF_default:near ; CODE XREF: _CONF_dump_bio+13p
					; _CONF_dump_fp+47p ...
		extrn __CONF_get_section_values:near ; CODE XREF: _CONF_get_section+64p
					; _NCONF_get_section+4Ej
		extrn __CONF_get_string:near ; CODE XREF: _CONF_get_string+1Cp
					; _NCONF_get_string+Cp
		extrn __chkstk:near	; CODE XREF: _CONF_dump_bio+5p
					; _CONF_dump_fp+5p ...


		end
