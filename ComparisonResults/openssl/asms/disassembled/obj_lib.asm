;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C6149F04AD5DD3FFF52794FA2EF9AD8F
; Input	CRC32 :	880A0542

; File Name   :	C:\compspace\Diff\openssl\obj\obj_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OBJ_cmp
_OBJ_cmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, [edx+0Ch]
		mov	eax, ecx
		sub	eax, [esi+0Ch]
		jnz	short loc_6C
		mov	edx, [edx+10h]
		mov	esi, [esi+10h]
		sub	ecx, 4
		jb	short loc_31
		xchg	ax, ax

loc_20:					; CODE XREF: _OBJ_cmp+2Fj
		mov	eax, [edx]
		cmp	eax, [esi]
		jnz	short loc_36
		add	edx, 4
		add	esi, 4
		sub	ecx, 4
		jnb	short loc_20

loc_31:					; CODE XREF: _OBJ_cmp+1Cj
		cmp	ecx, 0FFFFFFFCh
		jz	short loc_6A

loc_36:					; CODE XREF: _OBJ_cmp+24j
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_63
		cmp	ecx, 0FFFFFFFDh
		jz	short loc_6A
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_63
		cmp	ecx, 0FFFFFFFEh
		jz	short loc_6A
		mov	al, [edx+2]
		cmp	al, [esi+2]
		jnz	short loc_63
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_6A
		mov	al, [edx+3]
		cmp	al, [esi+3]
		jz	short loc_6A

loc_63:					; CODE XREF: _OBJ_cmp+3Aj _OBJ_cmp+47j ...
		sbb	eax, eax
		or	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6A:					; CODE XREF: _OBJ_cmp+34j _OBJ_cmp+3Fj ...
		xor	eax, eax

loc_6C:					; CODE XREF: _OBJ_cmp+11j
		pop	esi
		retn
_OBJ_cmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 70h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OBJ_dup
_OBJ_dup	proc near

Size		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		xor	ebp, ebp
		xor	ebx, ebx
		test	esi, esi
		jnz	short loc_90
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_90:					; CODE XREF: _OBJ_dup+17j
		test	byte ptr [esi+14h], 1
		jnz	short loc_9D
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_9D:					; CODE XREF: _OBJ_dup+24j
		push	edi
		call	_ASN1_OBJECT_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_C6
		push	50h ; 'P'
		push	offset ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ ; ".\\crypto\\objects\\obj_lib.c"
		push	0Dh
		push	65h ; 'e'
		push	8
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_C6:					; CODE XREF: _OBJ_dup+37j
		push	53h ; 'S'
		push	offset ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ ; ".\\crypto\\objects\\obj_lib.c"
		push	dword ptr [esi+0Ch]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+14h+arg_0], eax
		test	eax, eax
		jz	$err$21
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jz	short loc_FC
		push	dword ptr [esi+0Ch] ; Size
		push	ecx		; Src
		push	eax		; Dst
		call	_memcpy
		mov	eax, [esp+20h+arg_0]
		add	esp, 0Ch

loc_FC:					; CODE XREF: _OBJ_dup+79j
		mov	[edi+10h], eax
		mov	eax, [esi+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [esi+8]
		mov	[edi+8], eax
		mov	[edi], ebx
		mov	[edi+4], ebx
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_159
		lea	edx, [ecx+1]
		nop	word ptr [eax+eax+00h]

loc_120:				; CODE XREF: _OBJ_dup+B5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_120
		sub	ecx, edx
		push	5Fh ; '_'
		push	offset ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ ; ".\\crypto\\objects\\obj_lib.c"
		lea	eax, [ecx+1]
		push	eax
		mov	[esp+20h+Size],	eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	short $err$21
		push	[esp+14h+Size]	; Size
		push	dword ptr [esi+4] ; Src
		push	ebp		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[edi+4], ebp

loc_159:				; CODE XREF: _OBJ_dup+A5j
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_199
		lea	edx, [ecx+1]

loc_162:				; CODE XREF: _OBJ_dup+F7j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_162
		sub	ecx, edx
		push	68h ; 'h'
		push	offset ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ ; ".\\crypto\\objects\\obj_lib.c"
		lea	eax, [ecx+1]
		push	eax
		mov	[esp+20h+Size],	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short $err$21
		push	[esp+14h+Size]	; Size
		push	dword ptr [esi]	; Src
		push	ebx		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[edi], ebx

loc_199:				; CODE XREF: _OBJ_dup+EDj
		mov	eax, [esi+14h]
		or	eax, 0Dh
		mov	[edi+14h], eax
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$err$21:				; CODE XREF: _OBJ_dup+6Ej _OBJ_dup+D4j ...
		push	73h ; 's'
		push	offset ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ ; ".\\crypto\\objects\\obj_lib.c"
		push	41h ; 'A'
		push	65h ; 'e'
		push	8
		call	_ERR_put_error
		add	esp, 14h
		test	ebp, ebp
		jz	short loc_1CC
		push	ebp
		call	_CRYPTO_free
		add	esp, 4

loc_1CC:				; CODE XREF: _OBJ_dup+151j
		test	ebx, ebx
		jz	short loc_1D9
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_1D9:				; CODE XREF: _OBJ_dup+15Ej
		mov	eax, [esp+14h+arg_0]
		test	eax, eax
		jz	short loc_1EA
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1EA:				; CODE XREF: _OBJ_dup+16Fj
		push	edi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_OBJ_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1FCh
; COMDAT (pick any)
		public ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
; `string'
??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@	db '.\crypto\objects\obj_lib.c',0
					; DATA XREF: _OBJ_dup+3Bo _OBJ_dup+58o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _OBJ_dup+60p
					; _OBJ_dup+C8p	...
		extrn _CRYPTO_free:near	; CODE XREF: _OBJ_dup+154p
					; _OBJ_dup+161p ...
		extrn _ERR_put_error:near ; CODE XREF: _OBJ_dup+46p
					; _OBJ_dup+147p
		extrn _ASN1_OBJECT_new:near ; CODE XREF: _OBJ_dup+2Ep
		extrn __chkstk:near	; CODE XREF: _OBJ_dup+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _OBJ_dup+80p _OBJ_dup+DEp ...


		end
