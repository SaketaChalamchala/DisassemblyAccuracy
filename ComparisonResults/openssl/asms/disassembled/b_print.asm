;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	EDB1392E0FFE671D5BA5C1B447F373ED
; Input	CRC32 :	940467E4

; File Name   :	C:\compspace\Diff\openssl\obj\b_print.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_printf
_BIO_printf	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_BIO_vprintf
		add	esp, 0Ch
		retn
_BIO_printf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_snprintf
_BIO_snprintf	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+arg_4], eax
		mov	eax, [esp+8+arg_0]
		mov	[esp+8+arg_0], eax
		lea	eax, [esp+8+arg_C]
		push	eax
		push	[esp+0Ch+arg_8]
		lea	eax, [esp+10h+var_8]
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		lea	eax, [esp+18h+arg_4]
		push	eax
		lea	eax, [esp+1Ch+arg_0]
		push	0
		push	eax
		call	__dopr
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_64
		or	eax, 0FFFFFFFFh
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_64:					; CODE XREF: _BIO_snprintf+43j
		or	eax, 0FFFFFFFFh
		cmp	[esp+8+var_8], 0
		jnz	short loc_7A
		cmp	[esp+8+var_4], 7FFFFFFFh
		cmovbe	eax, [esp+8+var_4]

loc_7A:					; CODE XREF: _BIO_snprintf+53j
		add	esp, 8
		retn
_BIO_snprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_vprintf
_BIO_vprintf	proc near		; CODE XREF: _BIO_printf+Dp

var_818		= dword	ptr -818h
var_814		= dword	ptr -814h
var_810		= dword	ptr -810h
var_80C		= dword	ptr -80Ch
var_808		= byte ptr -808h
var_804		= byte ptr -804h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 818h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+818h+var_4], eax
		push	ebx
		mov	ebx, [esp+81Ch+arg_0]
		lea	eax, [esp+81Ch+var_804]
		push	esi
		mov	esi, [esp+820h+arg_8]
		push	edi
		mov	edi, [esp+824h+arg_4]
		push	32Ah
		push	offset ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@ ; ".\\crypto\\bio\\b_print.c"
		push	offset ??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@ ; "doapr()"
		mov	[esp+830h+var_80C], eax
		mov	[esp+830h+var_810], 800h
		mov	[esp+830h+var_818], 0
		call	_CRYPTO_push_info_
		push	esi
		push	edi
		lea	eax, [esp+838h+var_808]
		push	eax
		lea	eax, [esp+83Ch+var_814]
		push	eax
		lea	eax, [esp+840h+var_810]
		push	eax
		lea	eax, [esp+844h+var_818]
		push	eax
		lea	eax, [esp+848h+var_80C]
		push	eax
		call	__dopr
		add	esp, 28h
		test	eax, eax
		jnz	short loc_12A
		push	[esp+824h+var_818]
		call	_CRYPTO_free
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+818h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 818h
		retn
; ---------------------------------------------------------------------------

loc_12A:				; CODE XREF: _BIO_vprintf+81j
		mov	esi, [esp+824h+var_818]
		push	[esp+824h+var_814]
		test	esi, esi
		jz	short loc_14A
		push	esi
		push	ebx
		call	_BIO_write
		push	esi
		mov	edi, eax
		call	_CRYPTO_free
		add	esp, 10h
		jmp	short loc_15A
; ---------------------------------------------------------------------------

loc_14A:				; CODE XREF: _BIO_vprintf+B4j
		lea	eax, [esp+828h+var_804]
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 0Ch
		mov	edi, eax

loc_15A:				; CODE XREF: _BIO_vprintf+C8j
		call	_CRYPTO_pop_info
		mov	ecx, [esp+824h+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 818h
		retn
_BIO_vprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_vsnprintf
_BIO_vsnprintf	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		push	[esp+8+arg_C]
		lea	eax, [esp+0Ch+var_8]
		push	[esp+0Ch+arg_8]
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		lea	eax, [esp+18h+arg_4]
		push	eax
		lea	eax, [esp+1Ch+arg_0]
		push	0
		push	eax
		call	__dopr
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1B7
		or	eax, 0FFFFFFFFh
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1B7:				; CODE XREF: _BIO_vsnprintf+32j
		or	eax, 0FFFFFFFFh
		cmp	[esp+8+var_8], 0
		jnz	short loc_1CD
		cmp	[esp+8+var_4], 7FFFFFFFh
		cmovbe	eax, [esp+8+var_4]

loc_1CD:				; CODE XREF: _BIO_vsnprintf+42j
		add	esp, 8
		retn
_BIO_vsnprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__dopr		proc near		; CODE XREF: _BIO_snprintf+39p
					; _BIO_vprintf+77p ...

var_54		= qword	ptr -54h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFC0h
		mov	eax, 34h ; '4'
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [ebp+arg_18]
		xor	edx, edx
		xor	ecx, ecx
		mov	[esp+3Ch+var_8], edx
		push	edi
		mov	edi, [ebp+arg_14]
		mov	[esp+40h+var_C], ecx
		mov	[esp+40h+var_14], ecx
		mov	[esp+40h+var_18], ecx
		mov	[esp+40h+var_4], 0FFFFFFFFh

loc_209:				; CODE XREF: __dopr+1B0j
		mov	[esp+40h+var_10], edx

loc_20D:				; CODE XREF: __dopr+116j __dopr+120j ...
		mov	bl, [edi]
		inc	edi
		nop	dword ptr [eax+00h]

loc_214:				; CODE XREF: __dopr+A6j __dopr+14Cj ...
		test	bl, bl
		jz	short loc_27C
		cmp	[ebp+arg_4], 0
		jnz	short loc_22D
		mov	edx, [ebp+arg_8]
		mov	eax, [esp+40h+var_14]
		cmp	eax, [edx]
		mov	edx, [esp+40h+var_10]
		jnb	short loc_27C

loc_22D:				; CODE XREF: __dopr+48j
		cmp	edx, 6		; switch 7 cases
		ja	short loc_277	; jumptable 00000232 default case
		jmp	ds:$LN132[edx*4] ; switch jump
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		cmp	bl, 25h	; '%'   ; jumptable 00000232 case 0
		jnz	short loc_249
		mov	edx, 1
		mov	[esp+40h+var_10], edx
		jmp	short loc_274
; ---------------------------------------------------------------------------

loc_249:				; CODE XREF: __dopr+68j
		mov	ecx, [ebp+arg_4]
		movsx	eax, bl
		push	eax
		push	[ebp+arg_8]
		lea	eax, [esp+48h+var_14]
		push	eax
		push	ecx
		push	[ebp+arg_0]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_50D
		mov	ecx, [esp+40h+var_C]
		mov	edx, [esp+40h+var_10]

loc_274:				; CODE XREF: __dopr+73j
		mov	bl, [edi]
		inc	edi

loc_277:				; CODE XREF: __dopr+5Cj
		cmp	edx, 7		; jumptable 00000232 default case
		jnz	short loc_214

loc_27C:				; CODE XREF: __dopr+42j __dopr+57j
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		dec	eax
		cmp	eax, [esp+40h+var_14]
		mov	eax, [ebp+arg_10]
		sbb	ecx, ecx
		neg	ecx
		mov	[eax], ecx
		jz	short loc_298
		mov	eax, [edx]
		dec	eax
		mov	[esp+40h+var_14], eax

loc_298:				; CODE XREF: __dopr+BBj
		push	0
		push	edx
		lea	eax, [esp+48h+var_14]
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_50D
		mov	eax, [ebp+arg_C]
		mov	ecx, [esp+40h+var_14]
		dec	ecx
		mov	[eax], ecx
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		movsx	eax, bl		; jumptable 00000232 case 1
		add	eax, 0FFFFFFE0h	; switch 17 cases
		cmp	eax, 10h
		ja	short $LN28	; jumptable 000002DE default case
		movzx	eax, ds:$LN117[eax]
		jmp	ds:$LN133[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: __dopr+10Aj
					; DATA XREF: .text$mn:$LN133o
		or	[esp+40h+var_18], 1 ; jumptable	000002DE case 45
		jmp	loc_20D
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: __dopr+10Aj
					; DATA XREF: .text$mn:$LN133o
		or	[esp+40h+var_18], 2 ; jumptable	000002DE case 43
		jmp	loc_20D
; ---------------------------------------------------------------------------

$LN25:					; CODE XREF: __dopr+10Aj
					; DATA XREF: .text$mn:$LN133o
		or	[esp+40h+var_18], 4 ; jumptable	000002DE case 32
		jmp	loc_20D
; ---------------------------------------------------------------------------

$LN26:					; CODE XREF: __dopr+10Aj
					; DATA XREF: .text$mn:$LN133o
		or	[esp+40h+var_18], 8 ; jumptable	000002DE case 35
		jmp	loc_20D
; ---------------------------------------------------------------------------

$LN27:					; CODE XREF: __dopr+10Aj
					; DATA XREF: .text$mn:$LN133o
		or	[esp+40h+var_18], 10h ;	jumptable 000002DE case	48
		jmp	loc_20D
; ---------------------------------------------------------------------------

$LN28:					; CODE XREF: __dopr+101j __dopr+10Aj
					; DATA XREF: ...
		mov	edx, 2		; jumptable 000002DE default case
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN29:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		movzx	eax, bl		; jumptable 00000232 case 2
		push	eax		; C
		call	dword ptr ds:__imp__isdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_357
		mov	eax, [esp+40h+var_8]
		mov	edx, [esp+40h+var_10]
		lea	ecx, [eax+eax*4]
		movsx	eax, bl
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+40h+var_C]
		add	eax, 0FFFFFFD0h
		mov	[esp+40h+var_8], eax
		jmp	loc_20D
; ---------------------------------------------------------------------------

loc_357:				; CODE XREF: __dopr+160j
		cmp	bl, 2Ah	; '*'
		jnz	short loc_368
		mov	eax, [esi]
		add	esi, 4
		mov	bl, [edi]
		inc	edi
		mov	[esp+40h+var_8], eax

loc_368:				; CODE XREF: __dopr+186j
		mov	ecx, [esp+40h+var_C]
		mov	edx, 3
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN34:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		cmp	bl, 2Eh	; '.'   ; jumptable 00000232 case 3
		jnz	short loc_389
		mov	edx, 4
		jmp	loc_209
; ---------------------------------------------------------------------------

loc_389:				; CODE XREF: __dopr+1A9j
		mov	edx, 5
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN37:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		movzx	eax, bl		; jumptable 00000232 case 4
		push	eax		; C
		call	dword ptr ds:__imp__isdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_3D0
		mov	eax, [esp+40h+var_4]
		xor	ecx, ecx
		mov	edx, [esp+40h+var_10]
		test	eax, eax
		cmovs	eax, ecx
		lea	ecx, [eax+eax*4]
		movsx	eax, bl
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+40h+var_C]
		add	eax, 0FFFFFFD0h
		mov	[esp+40h+var_4], eax
		jmp	loc_20D
; ---------------------------------------------------------------------------

loc_3D0:				; CODE XREF: __dopr+1D2j
		cmp	bl, 2Ah	; '*'
		jnz	short loc_3E1
		mov	eax, [esi]
		add	esi, 4
		mov	bl, [edi]
		inc	edi
		mov	[esp+40h+var_4], eax

loc_3E1:				; CODE XREF: __dopr+1FFj
		mov	ecx, [esp+40h+var_C]
		mov	edx, 5
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN43:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		movsx	eax, bl		; jumptable 00000232 case 5
		add	eax, 0FFFFFFB4h	; switch 38 cases
		cmp	eax, 25h ; '%'
		ja	$LN50		; jumptable 00000409 default case
		movzx	eax, ds:$LN118[eax]
		jmp	ds:$LN134[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN44:					; CODE XREF: __dopr+235j
					; DATA XREF: .text$mn:$LN134o
		mov	bl, [edi]	; jumptable 00000409 case 104
		mov	ecx, 1
		mov	edx, 6
		mov	[esp+40h+var_C], ecx
		inc	edi
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN45:					; CODE XREF: __dopr+235j
					; DATA XREF: .text$mn:$LN134o
		cmp	byte ptr [edi],	6Ch ; 'l' ; jumptable 00000409 case 108
		jnz	short loc_44B
		mov	bl, [edi+1]
		inc	edi
		mov	ecx, 4
		mov	edx, 6
		inc	edi
		mov	[esp+40h+var_C], ecx
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

loc_44B:				; CODE XREF: __dopr+259j
		mov	bl, [edi]
		mov	ecx, 2
		mov	edx, 6
		mov	[esp+40h+var_C], ecx
		inc	edi
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN48:					; CODE XREF: __dopr+235j
					; DATA XREF: .text$mn:$LN134o
		mov	bl, [edi]	; jumptable 00000409 case 113
		mov	ecx, 4
		mov	edx, 6
		mov	[esp+40h+var_C], ecx
		inc	edi
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN49:					; CODE XREF: __dopr+235j
					; DATA XREF: .text$mn:$LN134o
		mov	bl, [edi]	; jumptable 00000409 case 76
		mov	ecx, 3
		inc	edi
		mov	[esp+40h+var_C], ecx

$LN50:					; CODE XREF: __dopr+228j __dopr+235j
					; DATA XREF: ...
		mov	edx, 6		; jumptable 00000409 default case
		mov	[esp+40h+var_10], edx
		jmp	loc_214
; ---------------------------------------------------------------------------

$LN51:					; CODE XREF: __dopr+5Ej
					; DATA XREF: .text$mn:$LN132o
		movsx	edx, bl		; jumptable 00000232 case 6
		lea	eax, [edx-25h]	; switch 84 cases
		cmp	eax, 53h ; 'S'
		ja	$LN96		; jumptable 000004AF default case
		movzx	eax, ds:$LN119[eax]
		jmp	ds:$LN135[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN52:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		sub	ecx, 1		; jumptable 000004AF cases 100,105
		jz	short loc_4D6
		sub	ecx, 1
		jz	short loc_4C5
		sub	ecx, 2
		jz	short loc_4CC

loc_4C5:				; CODE XREF: __dopr+2EAj
		mov	eax, [esi]
		add	esi, 4
		jmp	short loc_4DC
; ---------------------------------------------------------------------------

loc_4CC:				; CODE XREF: __dopr+2EFj
		mov	eax, [esi]
		add	esi, 8
		mov	edx, [esi-4]
		jmp	short loc_4DD
; ---------------------------------------------------------------------------

loc_4D6:				; CODE XREF: __dopr+2E5j
		movsx	eax, word ptr [esi]
		add	esi, 4

loc_4DC:				; CODE XREF: __dopr+2F6j
		cdq

loc_4DD:				; CODE XREF: __dopr+300j
		push	[esp+40h+var_18]
		mov	ebx, [esp+44h+var_4]
		push	ebx
		push	[esp+48h+var_8]
		push	0Ah

loc_4EC:				; CODE XREF: __dopr+495j
		push	edx
		push	eax

loc_4EE:				; CODE XREF: __dopr+3A9j __dopr+3CEj
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		lea	eax, [esp+5Ch+var_14]
		push	eax
		push	ecx
		push	[ebp+arg_0]
		call	_fmtint
		add	esp, 28h

loc_505:				; CODE XREF: __dopr+40Ej __dopr+437j ...
		test	eax, eax
		jnz	$LN96		; jumptable 000004AF default case

loc_50D:				; CODE XREF: __dopr+92j __dopr+DCj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

$LN58:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		mov	eax, [esp+40h+var_18] ;	jumptable 000004AF case	88
		or	eax, 20h
		jmp	short loc_523
; ---------------------------------------------------------------------------

$LN120:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		mov	eax, [esp+40h+var_18] ;	jumptable 000004AF cases 111,117,120

loc_523:				; CODE XREF: __dopr+349j
		or	eax, 40h
		mov	[esp+40h+var_18], eax
		sub	ecx, 1
		jz	short loc_554
		sub	ecx, 1
		jz	short loc_539
		sub	ecx, 2
		jz	short loc_546

loc_539:				; CODE XREF: __dopr+35Ej
		mov	ecx, [esi]
		add	esi, 4
		mov	[esp+40h+var_C], ecx
		xor	edx, edx
		jmp	short loc_563
; ---------------------------------------------------------------------------

loc_546:				; CODE XREF: __dopr+363j
		mov	ecx, [esi]
		add	esi, 8
		mov	[esp+40h+var_C], ecx
		mov	edx, [esi-4]
		jmp	short loc_563
; ---------------------------------------------------------------------------

loc_554:				; CODE XREF: __dopr+359j
		movzx	eax, word ptr [esi]
		add	esi, 4
		cdq
		mov	[esp+40h+var_C], eax
		mov	eax, [esp+40h+var_18]

loc_563:				; CODE XREF: __dopr+370j __dopr+37Ej
		cmp	bl, 6Fh	; 'o'
		jnz	short loc_582
		mov	ebx, [esp+40h+var_4]
		mov	ecx, 8
		push	eax
		push	ebx
		push	[esp+48h+var_8]
		push	ecx
		push	edx
		push	[esp+54h+var_C]
		jmp	loc_4EE
; ---------------------------------------------------------------------------

loc_582:				; CODE XREF: __dopr+392j
		cmp	bl, 75h	; 'u'
		mov	ecx, 10h
		push	eax
		mov	ebx, 0Ah
		cmovz	ecx, ebx
		mov	ebx, [esp+44h+var_4]
		push	ebx
		push	[esp+48h+var_8]
		push	ecx
		push	edx
		push	[esp+54h+var_C]
		jmp	loc_4EE
; ---------------------------------------------------------------------------

$LN65:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		push	[esp+40h+var_18] ; jumptable 000004AF case 102
		mov	ebx, [esp+44h+var_4]
		add	esi, 8
		push	ebx
		push	[esp+48h+var_8]
		mov	eax, 8
		movsd	xmm0, qword ptr	[esi-8]
		call	__chkstk
		mov	ecx, [ebp+arg_4]
		lea	eax, [esp+54h+var_14]
		movsd	[esp+54h+var_54], xmm0
		push	[ebp+arg_8]
		push	eax
		push	ecx
		push	[ebp+arg_0]
		call	_fmtfp
		add	esp, 24h
		jmp	loc_505
; ---------------------------------------------------------------------------

$LN69:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		add	esi, 8		; jumptable 000004AF cases 69,71,101,103
		jmp	$LN96		; jumptable 000004AF default case
; ---------------------------------------------------------------------------

$LN77:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		push	dword ptr [esi]	; jumptable 000004AF case 99
		add	esi, 4

loc_5F4:				; CODE XREF: __dopr+4D3j
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		lea	eax, [esp+48h+var_14]
		push	eax
		push	ecx
		push	[ebp+arg_0]
		call	_doapr_outch
		add	esp, 14h
		jmp	loc_505
; ---------------------------------------------------------------------------

$LN79:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		mov	ebx, [esp+40h+var_4] ; jumptable 000004AF case 115
		add	esi, 4
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		test	ebx, ebx
		jns	short loc_62C
		mov	ebx, 7FFFFFFFh
		test	ecx, ecx
		jnz	short loc_62C
		mov	ebx, [eax]

loc_62C:				; CODE XREF: __dopr+44Bj __dopr+454j
		push	ebx
		push	[esp+44h+var_8]
		push	[esp+48h+var_18]
		push	dword ptr [esi-4]
		push	eax
		lea	eax, [esp+54h+var_14]
		push	eax
		push	ecx
		push	[ebp+arg_0]
		call	_fmtstr
		add	esp, 20h
		jmp	loc_505
; ---------------------------------------------------------------------------

$LN84:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		mov	ecx, [esp+40h+var_18] ;	jumptable 000004AF case	112
		add	esi, 4
		mov	ebx, [esp+40h+var_4]
		or	ecx, 8
		push	ecx
		push	ebx
		push	[esp+48h+var_8]
		mov	eax, [esi-4]
		cdq
		push	10h
		jmp	loc_4EC
; ---------------------------------------------------------------------------

$LN86:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		add	esi, 4		; jumptable 000004AF case 110
		cmp	ecx, 1
		jnz	short loc_683
		mov	ecx, [esi-4]
		mov	ax, word ptr [esp+40h+var_14]
		mov	[ecx], ax
		jmp	short $LN96	; jumptable 000004AF default case
; ---------------------------------------------------------------------------

loc_683:				; CODE XREF: __dopr+4A0j
		mov	eax, [esp+40h+var_14]
		cmp	ecx, 2
		jnz	short loc_693
		mov	ecx, [esi-4]
		mov	[ecx], eax
		jmp	short $LN96	; jumptable 000004AF default case
; ---------------------------------------------------------------------------

loc_693:				; CODE XREF: __dopr+4B6j
		cmp	ecx, 4
		mov	ecx, [esi-4]
		mov	[ecx], eax
		jnz	short $LN96	; jumptable 000004AF default case
		mov	dword ptr [ecx+4], 0
		jmp	short $LN96	; jumptable 000004AF default case
; ---------------------------------------------------------------------------

$LN93:					; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		push	edx		; jumptable 000004AF case 37
		jmp	loc_5F4
; ---------------------------------------------------------------------------

$LN95_0:				; CODE XREF: __dopr+2DBj
					; DATA XREF: .text$mn:$LN135o
		inc	edi		; jumptable 000004AF case 119

$LN96:					; CODE XREF: __dopr+2CEj __dopr+2DBj ...
		mov	bl, [edi]	; jumptable 000004AF default case
		xor	edx, edx
		inc	edi
		mov	[esp+40h+var_10], edx
		xor	ecx, ecx
		mov	[esp+40h+var_8], edx
		mov	[esp+40h+var_C], ecx
		mov	[esp+40h+var_18], ecx
		mov	[esp+40h+var_4], 0FFFFFFFFh
		jmp	loc_214
__dopr		endp

; ---------------------------------------------------------------------------
		align 4
$LN132		dd offset $LN18		; DATA XREF: __dopr+5Er
		dd offset $LN22		; jump table for switch	statement
		dd offset $LN29
		dd offset $LN34
		dd offset $LN37
		dd offset $LN43
		dd offset $LN51
$LN133		dd offset $LN25		; DATA XREF: __dopr+10Ar
		dd offset $LN26		; jump table for switch	statement
		dd offset $LN24
		dd offset $LN23
		dd offset $LN27
		dd offset $LN28
$LN117		db	0,     5,     5,     1 ; DATA XREF: __dopr+103r
		db	5,     5,     5,     5 ; indirect table	for switch statement
		db	5,     5,     5,     2
		db	5,     3,     5,     5
		db	4
		align 4
$LN134		dd offset $LN49		; DATA XREF: __dopr+235r
		dd offset $LN44		; jump table for switch	statement
		dd offset $LN45
		dd offset $LN48
		dd offset $LN50
$LN118		db	0,     4,     4,     4 ; DATA XREF: __dopr+22Er
		db	4,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	1,     4,     4,     4
		db	2,     4,     4,     4
		db	4,     3
		align 4
$LN135		dd offset $LN93, offset	$LN69, offset $LN58, offset $LN77
					; DATA XREF: __dopr+2DBr
		dd offset $LN52, offset	$LN65, offset $LN86, offset $LN120 ; jump table	for switch statement
		dd offset $LN84, offset	$LN79, offset $LN95_0, offset $LN96
$LN119		db	0,   0Bh,   0Bh,   0Bh ; DATA XREF: __dopr+2D4r
		db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table	for switch statement
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db	1,   0Bh,     1,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,     2
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,   0Bh,   0Bh
		db    0Bh,   0Bh,     3,     4
		db	1,     5,     1,   0Bh
		db	4,   0Bh,   0Bh,   0Bh
		db    0Bh,     6,     7,     8
		db    0Bh,   0Bh,     9,   0Bh
		db	7,   0Bh,   0Ah,     7
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_abs_val	proc near

arg_0		= qword	ptr  4

		movsd	xmm1, [esp+arg_0]
		xorps	xmm0, xmm0
		comisd	xmm0, xmm1
		movsd	[esp+arg_0], xmm1
		jbe	short loc_7FE
		xorps	xmm1, ds:__xmm@80000000000000008000000000000000
		movsd	[esp+arg_0], xmm1

loc_7FE:				; CODE XREF: _abs_val+13j
		fld	[esp+arg_0]
		retn
_abs_val	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 804h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_doapr_outch	proc near		; CODE XREF: __dopr+88p __dopr+D2p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		push	edi
		mov	edi, [esp+10h+arg_4]
		test	edi, edi
		jz	short loc_88C
		mov	eax, [ebp+0]
		cmp	[esi], eax
		jnz	short loc_88C
		cmp	eax, 7FFFFBFFh
		jbe	short loc_831

loc_82A:				; CODE XREF: _doapr_outch+52j
					; _doapr_outch+84j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_831:				; CODE XREF: _doapr_outch+24j
		add	eax, 400h
		mov	[ebp+0], eax
		mov	ecx, [edi]
		test	ecx, ecx
		jnz	short loc_872
		push	2F3h
		push	offset ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@ ; ".\\crypto\\bio\\b_print.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[edi], eax
		test	eax, eax
		jz	short loc_82A
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_86A
		push	ecx		; Size
		push	dword ptr [ebx]	; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_86A:				; CODE XREF: _doapr_outch+58j
		mov	dword ptr [ebx], 0
		jmp	short loc_88C
; ---------------------------------------------------------------------------

loc_872:				; CODE XREF: _doapr_outch+39j
		push	2FDh
		push	offset ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@ ; ".\\crypto\\bio\\b_print.c"
		push	eax
		push	ecx
		call	_CRYPTO_realloc
		add	esp, 10h
		test	eax, eax
		jz	short loc_82A
		mov	[edi], eax

loc_88C:				; CODE XREF: _doapr_outch+16j
					; _doapr_outch+1Dj ...
		mov	edx, [esi]
		cmp	edx, [ebp+0]
		jnb	short loc_8B3
		mov	ecx, [ebx]
		mov	al, [esp+10h+arg_10]
		test	ecx, ecx
		jz	short loc_8AC
		pop	edi
		mov	[ecx+edx], al
		mov	eax, 1
		inc	dword ptr [esi]
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8AC:				; CODE XREF: _doapr_outch+97j
		mov	ecx, [edi]
		mov	[edx+ecx], al
		inc	dword ptr [esi]

loc_8B3:				; CODE XREF: _doapr_outch+8Dj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_doapr_outch	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_fmtfp		proc near		; CODE XREF: __dopr+406p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_19		= byte ptr -19h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= qword	ptr  14h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_0]
		xor	edx, edx
		movsd	xmm3, [esp+48h+arg_10]
		mov	ecx, 6
		mov	[esp+48h+var_30], eax
		xorps	xmm0, xmm0
		mov	eax, [esp+48h+arg_4]
		mov	[esp+48h+var_3C], eax
		mov	eax, [esp+48h+arg_8]
		mov	[esp+48h+var_38], eax
		mov	eax, [esp+48h+arg_C]
		push	esi
		mov	[esp+4Ch+var_34], eax
		xor	esi, esi
		mov	eax, [esp+4Ch+arg_1C]
		push	edi
		xor	edi, edi
		test	eax, eax
		cmovs	eax, ecx
		mov	ecx, [esp+50h+arg_20]
		comisd	xmm0, xmm3
		jbe	short loc_92F
		xorps	xmm3, ds:__xmm@80000000000000008000000000000000
		mov	[esp+50h+var_48], 2Dh ;	'-'
		jmp	short loc_94D
; ---------------------------------------------------------------------------

loc_92F:				; CODE XREF: _fmtfp+5Cj
		test	cl, 2
		jz	short loc_93E
		mov	[esp+50h+var_48], 2Bh ;	'+'
		jmp	short loc_94D
; ---------------------------------------------------------------------------

loc_93E:				; CODE XREF: _fmtfp+72j
		test	cl, 4
		mov	ecx, 20h ; ' '
		cmovnz	edx, ecx
		mov	[esp+50h+var_48], edx

loc_94D:				; CODE XREF: _fmtfp+6Dj _fmtfp+7Cj
		movsd	xmm2, ds:__real@3ff0000000000000
		mov	edx, 9
		movsd	xmm4, ds:__real@4024000000000000
		cmp	eax, edx
		cvttsd2si ecx, xmm3
		cmovg	eax, edx
		mov	[esp+50h+arg_1C], eax
		movaps	xmm1, xmm2
		mov	[esp+50h+var_40], ecx
		cmp	eax, esi
		jz	short loc_989
		nop	word ptr [eax+eax+00h]

loc_980:				; CODE XREF: _fmtfp+C7j
		mulsd	xmm1, xmm4
		sub	eax, 1
		jnz	short loc_980

loc_989:				; CODE XREF: _fmtfp+B8j
		movsd	xmm5, ds:__real@3fe0000000000000
		cvttsd2si edx, xmm1
		movd	xmm0, edx
		cvtdq2pd xmm0, xmm0
		subsd	xmm1, xmm0
		comisd	xmm1, xmm5
		jb	short loc_9A8
		inc	edx

loc_9A8:				; CODE XREF: _fmtfp+E5j
		mov	eax, [esp+50h+arg_1C]
		cmp	eax, esi
		jz	short loc_9B9

loc_9B0:				; CODE XREF: _fmtfp+F7j
		mulsd	xmm2, xmm4
		sub	eax, 1
		jnz	short loc_9B0

loc_9B9:				; CODE XREF: _fmtfp+EEj
		movd	xmm0, ecx
		cvtdq2pd xmm0, xmm0
		subsd	xmm3, xmm0
		mulsd	xmm3, xmm2
		cvttsd2si eax, xmm3
		mov	[esp+50h+var_44], eax
		movd	xmm0, eax
		cvtdq2pd xmm0, xmm0
		subsd	xmm3, xmm0
		comisd	xmm3, xmm5
		jb	short loc_9E8
		inc	eax
		mov	[esp+50h+var_44], eax

loc_9E8:				; CODE XREF: _fmtfp+121j
		cmp	eax, edx
		jl	short loc_9F7
		inc	ecx
		sub	eax, edx
		mov	[esp+50h+var_40], ecx
		mov	[esp+50h+var_44], eax

loc_9F7:				; CODE XREF: _fmtfp+12Aj
		mov	esi, [esp+50h+var_40]
		nop	dword ptr [eax+eax+00h]

loc_A00:				; CODE XREF: _fmtfp+16Cj
		mov	eax, 66666667h
		imul	esi
		sar	edx, 2
		mov	ecx, edx
		shr	ecx, 1Fh
		add	ecx, edx
		lea	eax, [ecx+ecx*4]
		add	eax, eax
		sub	esi, eax
		mov	al, ds:??_C@_0L@FPFMPDDA@0123456789?$AA@[esi] ;	`string'
		mov	esi, ecx
		mov	[esp+edi+50h+var_18], al
		inc	edi
		test	esi, esi
		jz	short loc_A2E
		cmp	edi, 14h
		jl	short loc_A00

loc_A2E:				; CODE XREF: _fmtfp+167j
		mov	[esp+50h+var_40], edi
		mov	esi, 0
		cmp	edi, 14h
		jnz	short loc_A47
		mov	edi, 13h
		mov	[esp+50h+var_40], edi
		jmp	short loc_A4D
; ---------------------------------------------------------------------------

loc_A47:				; CODE XREF: _fmtfp+17Aj
		jnb	loc_CBA

loc_A4D:				; CODE XREF: _fmtfp+185j
		mov	[esp+edi+50h+var_18], 0
		mov	edi, [esp+50h+var_44]

loc_A56:				; CODE XREF: _fmtfp+1C1j
		mov	eax, 66666667h
		imul	edi
		sar	edx, 2
		mov	ecx, edx
		shr	ecx, 1Fh
		add	ecx, edx
		mov	edx, [esp+50h+arg_1C]
		lea	eax, [ecx+ecx*4]
		add	eax, eax
		sub	edi, eax
		mov	al, ds:??_C@_0L@FPFMPDDA@0123456789?$AA@[edi] ;	`string'
		mov	edi, ecx
		mov	[esp+esi+50h+var_2C], al
		inc	esi
		cmp	esi, edx
		jl	short loc_A56
		mov	edi, [esp+50h+var_40]
		mov	[esp+50h+var_44], esi
		cmp	esi, 14h
		jnz	short loc_A9B
		mov	esi, 13h
		mov	[esp+50h+var_44], esi
		jmp	short loc_AA1
; ---------------------------------------------------------------------------

loc_A9B:				; CODE XREF: _fmtfp+1CEj
		jnb	loc_CBA

loc_AA1:				; CODE XREF: _fmtfp+1D9j
		mov	ecx, [esp+50h+var_48]
		xor	eax, eax
		mov	[esp+esi+50h+var_2C], 0
		test	ecx, ecx
		mov	esi, [esp+50h+arg_18]
		setnz	al
		sub	esi, eax
		mov	eax, edx
		sub	esi, edi
		sub	esi, edx
		sub	eax, [esp+50h+var_44]
		mov	edx, 0
		cmovs	eax, edx
		mov	[esp+50h+var_40], eax
		xor	eax, eax
		sub	esi, 1
		cmovs	esi, eax
		mov	eax, [esp+50h+arg_20]
		test	al, 1
		jz	short loc_ADF
		neg	esi

loc_ADF:				; CODE XREF: _fmtfp+21Bj
		test	al, 10h
		jz	short loc_B55
		test	esi, esi
		jle	loc_B83
		test	ecx, ecx
		jz	short loc_B26
		push	ecx
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jnz	short loc_B1F

loc_B0C:				; CODE XREF: _fmtfp+28Cj _fmtfp+2BCj ...
		pop	edi
		xor	eax, eax
		pop	esi
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_B1F:				; CODE XREF: _fmtfp+24Aj
		dec	esi
		xor	eax, eax
		mov	[esp+50h+var_48], eax

loc_B26:				; CODE XREF: _fmtfp+22Dj
		test	esi, esi
		jle	short loc_B83
		nop	word ptr [eax+eax+00h]

loc_B30:				; CODE XREF: _fmtfp+291j
		push	30h ; '0'
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_B0C
		dec	esi
		test	esi, esi
		jg	short loc_B30
		jmp	short loc_B83
; ---------------------------------------------------------------------------

loc_B55:				; CODE XREF: _fmtfp+221j
		test	esi, esi
		jle	short loc_B83
		nop	dword ptr [eax+00000000h]

loc_B60:				; CODE XREF: _fmtfp+2C1j
		push	20h ; ' '
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_B0C
		dec	esi
		test	esi, esi
		jg	short loc_B60

loc_B83:				; CODE XREF: _fmtfp+225j _fmtfp+268j ...
		mov	eax, [esp+50h+var_48]
		test	eax, eax
		jz	short loc_BAC
		push	eax
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_B0C

loc_BAC:				; CODE XREF: _fmtfp+2C9j
		test	edi, edi
		jle	short loc_BDB

loc_BB0:				; CODE XREF: _fmtfp+319j
		movsx	eax, [esp+edi+50h+var_19]
		dec	edi
		push	eax
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_B0C
		test	edi, edi
		jg	short loc_BB0

loc_BDB:				; CODE XREF: _fmtfp+2EEj
		cmp	[esp+50h+arg_1C], 0
		jg	short loc_BE9
		test	byte ptr [esp+50h+arg_20], 8
		jz	short loc_C3E

loc_BE9:				; CODE XREF: _fmtfp+320j
		push	2Eh ; '.'
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_B0C
		mov	edi, [esp+50h+var_44]
		test	edi, edi
		jle	short loc_C3E

loc_C13:				; CODE XREF: _fmtfp+37Cj
		movsx	eax, byte ptr [esp+edi+50h+var_30+3]
		dec	edi
		push	eax
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	[esp+60h+var_30]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_B0C
		test	edi, edi
		jg	short loc_C13

loc_C3E:				; CODE XREF: _fmtfp+327j _fmtfp+351j
		cmp	[esp+50h+var_40], 0
		mov	edi, [esp+50h+var_30]
		jle	short loc_C7C
		nop	dword ptr [eax+00000000h]

loc_C50:				; CODE XREF: _fmtfp+3BAj
		push	30h ; '0'
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	edi
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_B0C
		mov	eax, [esp+50h+var_40]
		dec	eax
		mov	[esp+50h+var_40], eax
		test	eax, eax
		jg	short loc_C50

loc_C7C:				; CODE XREF: _fmtfp+387j
		test	esi, esi
		jns	short loc_CA4

loc_C80:				; CODE XREF: _fmtfp+3E2j
		push	20h ; ' '
		push	[esp+54h+var_34]
		push	[esp+58h+var_38]
		push	[esp+5Ch+var_3C]
		push	edi
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_B0C
		add	esi, 1
		js	short loc_C80

loc_CA4:				; CODE XREF: _fmtfp+3BEj
		mov	ecx, [esp+50h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_CBA:				; CODE XREF: _fmtfp:loc_A47j
					; _fmtfp:loc_A9Bj
		call	___report_rangecheckfailure

$LN183:					; $LN179
		int	3
_fmtfp		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CC0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_fmtint		proc near		; CODE XREF: __dopr+329p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		mov	eax, 3Ch ; '<'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		mov	eax, [esp+3Ch+arg_4]
		xor	edx, edx
		mov	ecx, [esp+3Ch+arg_20]
		push	ebx
		mov	ebx, [esp+40h+arg_10]
		push	ebp
		mov	ebp, [esp+44h+arg_0]
		mov	[esp+44h+var_34], eax
		mov	eax, [esp+44h+arg_8]
		push	esi
		mov	[esp+48h+var_2C], eax
		mov	esi, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		mov	eax, [esp+48h+arg_C]
		push	edi
		mov	[esp+4Ch+var_30], eax
		xor	edi, edi
		xor	eax, eax
		mov	[esp+4Ch+var_38], esi
		test	ecx, ecx
		mov	[esp+4Ch+var_3C], eax
		cmovs	ecx, edx
		mov	edx, [esp+4Ch+arg_14]
		mov	[esp+4Ch+arg_20], ecx
		mov	ecx, [esp+4Ch+arg_24]
		test	cl, 40h
		jnz	short loc_D63
		test	edx, edx
		jg	short loc_D40
		jl	short loc_D30
		test	ebx, ebx
		jnb	short loc_D40

loc_D30:				; CODE XREF: _fmtint+6Aj
		neg	ebx
		mov	[esp+4Ch+var_3C], 2Dh ;	'-'
		adc	edx, eax
		neg	edx
		jmp	short loc_D63
; ---------------------------------------------------------------------------

loc_D40:				; CODE XREF: _fmtint+68j _fmtint+6Ej
		test	cl, 2
		jz	short loc_D4F
		mov	[esp+4Ch+var_3C], 2Bh ;	'+'
		jmp	short loc_D63
; ---------------------------------------------------------------------------

loc_D4F:				; CODE XREF: _fmtint+83j
		test	cl, 4
		mov	[esp+4Ch+var_3C], 20h ;	' '
		cmovnz	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_3C], eax

loc_D63:				; CODE XREF: _fmtint+64j _fmtint+7Ej ...
		mov	eax, [esp+4Ch+arg_18]
		test	cl, 8
		jz	short loc_D91
		cmp	eax, 8
		jnz	short loc_D7C
		mov	esi, offset ??_C@_01GBGANLPD@0?$AA@ ; `string'
		mov	[esp+4Ch+var_38], esi
		jmp	short loc_D91
; ---------------------------------------------------------------------------

loc_D7C:				; CODE XREF: _fmtint+AFj
		cmp	[esp+4Ch+arg_18], 10h
		mov	eax, offset ??_C@_02MDDDDAID@0x?$AA@ ; `string'
		cmovnz	eax, esi
		mov	[esp+4Ch+var_38], eax
		mov	eax, [esp+4Ch+arg_18]

loc_D91:				; CODE XREF: _fmtint+AAj _fmtint+BAj
		test	cl, 20h
		mov	[esp+4Ch+var_28], offset ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@ ; "0123456789abcdef"
		mov	ecx, 1
		mov	esi, edi
		cmovnz	esi, ecx
		mov	ecx, offset ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ ; "0123456789ABCDEF"
		test	esi, esi
		cmovz	ecx, [esp+4Ch+var_28]
		mov	esi, ecx

loc_DB4:				; CODE XREF: _fmtint+119j
		push	0
		push	eax
		push	edx
		push	ebx
		call	__aulldvrm
		mov	[esp+4Ch+var_24], ebx
		mov	ebx, eax
		mov	cl, [ecx+esi]
		mov	[esp+edi+4Ch+var_20], cl
		mov	ecx, ebx
		inc	edi
		or	ecx, edx
		jz	short loc_DDB
		mov	eax, [esp+4Ch+arg_18]
		cmp	edi, 1Ah
		jl	short loc_DB4

loc_DDB:				; CODE XREF: _fmtint+110j
		mov	esi, [esp+4Ch+var_38]
		cmp	edi, 1Ah
		jnz	short loc_DEB
		mov	edi, 19h
		jmp	short loc_DF1
; ---------------------------------------------------------------------------

loc_DEB:				; CODE XREF: _fmtint+122j
		jnb	loc_F7A

loc_DF1:				; CODE XREF: _fmtint+129j
		mov	edx, [esp+4Ch+arg_20]
		mov	ecx, esi
		mov	ebx, edx
		mov	[esp+edi+4Ch+var_20], 0
		sub	ebx, edi
		lea	esi, [ecx+1]

loc_E03:				; CODE XREF: _fmtint+148j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_E03
		sub	ecx, esi
		mov	eax, edi
		mov	esi, [esp+4Ch+arg_1C]
		cmp	edx, edi
		cmovge	eax, edx
		sub	esi, eax
		xor	eax, eax
		cmp	[esp+4Ch+var_3C], eax
		setnz	al
		sub	esi, eax
		xor	eax, eax
		test	ebx, ebx
		cmovs	ebx, eax
		sub	esi, ecx
		cmovs	esi, eax
		mov	eax, [esp+4Ch+arg_24]
		test	al, 10h
		jz	short loc_E41
		cmp	ebx, esi
		cmovge	esi, ebx
		mov	ebx, esi
		xor	esi, esi

loc_E41:				; CODE XREF: _fmtint+176j
		test	al, 1
		jz	short loc_E47
		neg	esi

loc_E47:				; CODE XREF: _fmtint+183j
		test	esi, esi
		jle	short loc_E74
		nop	dword ptr [eax+eax+00h]

loc_E50:				; CODE XREF: _fmtint+1B2j
		push	20h ; ' '
		push	[esp+50h+var_30]
		push	[esp+54h+var_2C]
		push	[esp+58h+var_34]
		push	ebp
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_F65
		dec	esi
		test	esi, esi
		jg	short loc_E50

loc_E74:				; CODE XREF: _fmtint+189j
		mov	eax, [esp+4Ch+var_3C]
		test	eax, eax
		jz	short loc_E9A
		push	eax
		push	[esp+50h+var_30]
		push	[esp+54h+var_2C]
		push	[esp+58h+var_34]
		push	ebp
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_F65

loc_E9A:				; CODE XREF: _fmtint+1BAj
		mov	eax, [esp+4Ch+var_38]
		mov	al, [eax]
		test	al, al
		jz	short loc_ED4

loc_EA4:				; CODE XREF: _fmtint+212j
		movsx	eax, al
		push	eax
		push	[esp+50h+var_30]
		push	[esp+54h+var_2C]
		push	[esp+58h+var_34]
		push	ebp
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	loc_F65
		mov	eax, [esp+4Ch+var_38]
		inc	eax
		mov	[esp+4Ch+var_38], eax
		mov	al, [eax]
		test	al, al
		jnz	short loc_EA4

loc_ED4:				; CODE XREF: _fmtint+1E2j
		test	ebx, ebx
		jle	short loc_F00
		nop	dword ptr [eax+eax+00000000h]

loc_EE0:				; CODE XREF: _fmtint+23Ej
		push	30h ; '0'
		push	[esp+50h+var_30]
		push	[esp+54h+var_2C]
		push	[esp+58h+var_34]
		push	ebp
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_F65
		dec	ebx
		test	ebx, ebx
		jg	short loc_EE0

loc_F00:				; CODE XREF: _fmtint+216j
		mov	ebx, [esp+4Ch+var_34]
		test	edi, edi
		jle	short loc_F29

loc_F08:				; CODE XREF: _fmtint+267j
		movsx	eax, byte ptr [esp+edi+4Ch+var_24+3]
		dec	edi
		push	eax
		push	[esp+50h+var_30]
		push	[esp+54h+var_2C]
		push	ebx
		push	ebp
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_F65
		test	edi, edi
		jg	short loc_F08

loc_F29:				; CODE XREF: _fmtint+246j
		test	esi, esi
		jns	short loc_F4D
		nop	dword ptr [eax]

loc_F30:				; CODE XREF: _fmtint+28Bj
		push	20h ; ' '
		push	[esp+50h+var_30]
		push	[esp+54h+var_2C]
		push	ebx
		push	ebp
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_F65
		add	esi, 1
		js	short loc_F30

loc_F4D:				; CODE XREF: _fmtint+26Bj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_F65:				; CODE XREF: _fmtint+1A9j _fmtint+1D4j ...
		mov	ecx, [esp+4Ch+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_F7A:				; CODE XREF: _fmtint:loc_DEBj
		call	___report_rangecheckfailure

$LN95:					; $LN92
		int	3
_fmtint		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_fmtstr		proc near		; CODE XREF: __dopr+46Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= byte ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, [esp+arg_10]
		push	ebx
		push	ebp
		push	esi
		xor	esi, esi
		mov	ebx, offset ??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@ ; "<NULL>"
		test	eax, eax
		push	edi
		cmovnz	ebx, eax
		mov	ecx, ebx
		lea	edx, [ecx+1]
		nop	dword ptr [eax+00000000h]

loc_FA0:				; CODE XREF: _fmtstr+25j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_FA0
		sub	ecx, edx
		mov	eax, 7FFFFFFFh
		cmp	ecx, eax
		cmova	ecx, eax
		mov	eax, [esp+10h+arg_18]
		mov	edi, eax
		sub	edi, ecx
		test	eax, eax
		js	short loc_FC3
		test	edi, edi
		jns	short loc_FC5

loc_FC3:				; CODE XREF: _fmtstr+3Dj
		xor	edi, edi

loc_FC5:				; CODE XREF: _fmtstr+41j
		test	[esp+10h+arg_14], 1
		jz	short loc_FCE
		neg	edi

loc_FCE:				; CODE XREF: _fmtstr+4Aj
		mov	ebp, [esp+10h+arg_1C]
		mov	ecx, [esp+10h+arg_C]
		mov	edx, [esp+10h+arg_8]
		test	edi, edi
		jle	short loc_100A
		xchg	ax, ax

loc_FE0:				; CODE XREF: _fmtstr+88j
		cmp	esi, ebp
		jge	short loc_100A
		push	20h ; ' '
		push	ecx
		push	edx
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_1075
		mov	ecx, [esp+10h+arg_C]
		dec	edi
		mov	edx, [esp+10h+arg_8]
		inc	esi
		test	edi, edi
		jg	short loc_FE0

loc_100A:				; CODE XREF: _fmtstr+5Cj _fmtstr+62j
		mov	al, [ebx]
		test	al, al
		jz	short loc_103E

loc_1010:				; CODE XREF: _fmtstr+BCj
		cmp	esi, ebp
		jge	short loc_103E
		movsx	eax, al
		push	eax
		push	ecx
		push	edx
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_doapr_outch
		add	esp, 14h
		inc	ebx
		test	eax, eax
		jz	short loc_1075
		mov	al, [ebx]
		inc	esi
		mov	ecx, [esp+10h+arg_C]
		mov	edx, [esp+10h+arg_8]
		test	al, al
		jnz	short loc_1010

loc_103E:				; CODE XREF: _fmtstr+8Ej _fmtstr+92j
		test	edi, edi
		jns	short loc_106B
		mov	ebx, [esp+10h+arg_C]

loc_1046:				; CODE XREF: _fmtstr+E9j
		cmp	esi, ebp
		jge	short loc_106B
		push	20h ; ' '
		push	ebx
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_doapr_outch
		add	esp, 14h
		test	eax, eax
		jz	short loc_1075
		inc	esi
		add	edi, 1
		js	short loc_1046

loc_106B:				; CODE XREF: _fmtstr+C0j _fmtstr+C8j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1075:				; CODE XREF: _fmtstr+7Aj _fmtstr+ADj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
_fmtstr		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 107Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pow_10		proc near

var_8		= qword	ptr -8
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		movsd	xmm0, ds:__real@3ff0000000000000
		mov	eax, [esp+8+arg_0]
		movsd	[esp+8+var_8], xmm0
		test	eax, eax
		jz	short loc_10B1
		movsd	xmm1, ds:__real@4024000000000000

loc_10A3:				; CODE XREF: _pow_10+2Ej
		mulsd	xmm0, xmm1
		sub	eax, 1
		jnz	short loc_10A3
		movsd	[esp+8+var_8], xmm0

loc_10B1:				; CODE XREF: _pow_10+1Dj
		fld	[esp+8+var_8]
		add	esp, 8
		retn
_pow_10		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_roundv		proc near

arg_0		= qword	ptr  4

		movsd	xmm1, [esp+arg_0]
		cvttsd2si eax, xmm1
		movd	xmm0, eax
		cvtdq2pd xmm0, xmm0
		subsd	xmm1, xmm0
		comisd	xmm1, ds:__real@3fe0000000000000
		jb	short locret_10D9
		inc	eax

locret_10D9:				; CODE XREF: _roundv+1Ej
		retn
_roundv		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10DCh
; COMDAT (pick any)
		public ??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
; `string'
??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@ db '<NULL>',0 ; DATA XREF: _fmtstr+9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 10E4h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _fmtint+36o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10E8h
; COMDAT (pick any)
		public ??_C@_01GBGANLPD@0?$AA@
; `string'
??_C@_01GBGANLPD@0?$AA@	db 30h,	0	; DATA XREF: _fmtint+B1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10ECh
; COMDAT (pick any)
		public ??_C@_02MDDDDAID@0x?$AA@
; `string'
??_C@_02MDDDDAID@0x?$AA@ db 30h, 78h, 0	; DATA XREF: _fmtint+C1o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10F0h
; COMDAT (pick any)
		public ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; `string'
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ db '0123456789ABCDEF',0 ; DATA XREF: _fmtint+E6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1104h
; COMDAT (pick any)
		public ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@
; `string'
??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@ db '0123456789abcdef',0 ; DATA XREF: _fmtint+D4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1118h
; COMDAT (pick any)
		public ??_C@_0L@FPFMPDDA@0123456789?$AA@
; `string'
??_C@_0L@FPFMPDDA@0123456789?$AA@ db 30h ; DATA	XREF: _fmtfp+158r _fmtfp+1B2r
a123456789	db '123456789',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1124h
; COMDAT (pick any)
		public ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@
; `string'
??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@ db '.\crypto\bio\b_print.c',0
					; DATA XREF: _BIO_vprintf+39o
					; _doapr_outch+40o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 113Ch
; COMDAT (pick any)
		public ??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@
; `string'
??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@ db 'doapr()',0 ; DATA XREF: _BIO_vprintf+3Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1144h
; COMDAT (pick any)
		public __real@3fe0000000000000
__real@3fe0000000000000	dq 3FE0000000000000h ; DATA XREF: _fmtfp:loc_989r
					; _roundv+16r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 114Ch
; COMDAT (pick any)
		public __real@3ff0000000000000
__real@3ff0000000000000	dq 3FF0000000000000h ; DATA XREF: _fmtfp:loc_94Dr
					; _pow_10+Ar
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1154h
; COMDAT (pick any)
		public __real@4024000000000000
__real@4024000000000000	dq 4024000000000000h ; DATA XREF: _fmtfp+9Ar
					; _pow_10+1Fr
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 115Ch
; COMDAT (pick any)
		public __xmm@80000000000000008000000000000000
__xmm@80000000000000008000000000000000 xmmword 80000000000000008000000000000000h
					; DATA XREF: _abs_val+15r _fmtfp+5Er
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn ___report_rangecheckfailure:near ; CODE XREF: _fmtfp:loc_CBAp
					; _fmtint:loc_F7Ap
; int __cdecl _isdigit(int C)
		extrn __imp__isdigit:near ; CODE XREF: __dopr+155p __dopr+1C7p
					; DATA XREF: ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _doapr_outch+46p
		extrn _CRYPTO_free:near	; CODE XREF: _BIO_vprintf+87p
					; _BIO_vprintf+C0p
		extrn _CRYPTO_realloc:near ; CODE XREF:	_doapr_outch+7Ap
		extrn _CRYPTO_push_info_:near ;	CODE XREF: _BIO_vprintf+57p
		extrn _CRYPTO_pop_info:near ; CODE XREF: _BIO_vprintf:loc_15Ap
		extrn _BIO_write:near	; CODE XREF: _BIO_vprintf+B8p
					; _BIO_vprintf+D0p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BIO_vprintf+9Ep
					; _BIO_vprintf+EDp ...
		extrn __aulldvrm:near	; CODE XREF: _fmtint+F9p
		extrn __chkstk:near	; CODE XREF: _BIO_snprintf+5p
					; _BIO_vprintf+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _doapr_outch+5Ep
		extrn ___security_cookie:near ;	DATA XREF: _BIO_vprintf+Ar
					; _fmtfp+Ar ...
		extrn __fltused:near


		end
