;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AC78DB1A00A471217088C1334ED2146F
; Input	CRC32 :	1EDA80B3

; File Name   :	C:\compspace\Diff\openssl\obj\bn_blind.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_convert
_BN_BLINDING_convert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		cmp	dword ptr [esi], 0
		jz	short loc_50
		cmp	dword ptr [esi+4], 0
		jz	short loc_50
		cmp	dword ptr [esi+1Ch], 0FFFFFFFFh
		jnz	short loc_1F
		mov	dword ptr [esi+1Ch], 0
		jmp	short loc_30
; ---------------------------------------------------------------------------

loc_1F:					; CODE XREF: _BN_BLINDING_convert+14j
		push	[esp+4+arg_8]
		push	esi
		call	_BN_BLINDING_update
		add	esp, 8
		test	eax, eax
		jz	short loc_68

loc_30:					; CODE XREF: _BN_BLINDING_convert+1Dj
		push	[esp+4+arg_8]
		mov	eax, [esp+8+arg_0]
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi]
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		and	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_50:					; CODE XREF: _BN_BLINDING_convert+8j
					; _BN_BLINDING_convert+Ej
		push	0EAh ; 'Í'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	6Bh ; 'k'
		push	64h ; 'd'
		push	3
		call	_ERR_put_error
		add	esp, 14h

loc_68:					; CODE XREF: _BN_BLINDING_convert+2Ej
		xor	eax, eax
		pop	esi
		retn
_BN_BLINDING_convert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_convert_ex
_BN_BLINDING_convert_ex	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, 1
		cmp	dword ptr [esi], 0
		jz	short loc_DC
		cmp	dword ptr [esi+4], 0
		jz	short loc_DC
		cmp	dword ptr [esi+1Ch], 0FFFFFFFFh
		jnz	short loc_91
		mov	dword ptr [esi+1Ch], 0
		jmp	short loc_A2
; ---------------------------------------------------------------------------

loc_91:					; CODE XREF: _BN_BLINDING_convert_ex+1Aj
		push	[esp+8+arg_C]
		push	esi
		call	_BN_BLINDING_update
		add	esp, 8
		test	eax, eax
		jz	short loc_F4

loc_A2:					; CODE XREF: _BN_BLINDING_convert_ex+23j
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_BC
		push	dword ptr [esi+4]
		push	eax
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		and	edi, eax

loc_BC:					; CODE XREF: _BN_BLINDING_convert_ex+3Cj
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi]
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		and	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DC:					; CODE XREF: _BN_BLINDING_convert_ex+Ej
					; _BN_BLINDING_convert_ex+14j
		push	0EAh ; 'Í'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	6Bh ; 'k'
		push	64h ; 'd'
		push	3
		call	_ERR_put_error
		add	esp, 14h

loc_F4:					; CODE XREF: _BN_BLINDING_convert_ex+34j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_BN_BLINDING_convert_ex	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_create_param
_BN_BLINDING_create_param proc near	; CODE XREF: _BN_BLINDING_update+3Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		mov	edi, 20h ; ' '
		test	ebp, ebp
		jnz	short loc_187
		push	8Dh ; 'ç'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	2Ch ; ','
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_146
		push	8Eh ; 'é'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	41h ; 'A'
		push	66h ; 'f'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_146:				; CODE XREF: _BN_BLINDING_create_param+29j
		push	2Ch ; ','       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		mov	ebx, [esp+1Ch+arg_8]
		push	ebx
		call	_BN_dup
		add	esp, 10h
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	$err$49
		test	byte ptr [ebx+10h], 4
		jz	short loc_172
		or	dword ptr [eax+10h], 4

loc_172:				; CODE XREF: _BN_BLINDING_create_param+70j
		lea	eax, [esi+14h]
		mov	dword ptr [esi+1Ch], 0FFFFFFFFh
		push	eax
		call	_CRYPTO_THREADID_current
		add	esp, 4
		jmp	short loc_189
; ---------------------------------------------------------------------------

loc_187:				; CODE XREF: _BN_BLINDING_create_param+Fj
		mov	esi, ebp

loc_189:				; CODE XREF: _BN_BLINDING_create_param+89j
		test	esi, esi
		jz	$err$48
		cmp	dword ptr [esi], 0
		jnz	short loc_1A5
		call	_BN_new
		mov	[esi], eax
		test	eax, eax
		jz	$err$48

loc_1A5:				; CODE XREF: _BN_BLINDING_create_param+98j
		cmp	dword ptr [esi+4], 0
		jnz	short loc_1BB
		call	_BN_new
		mov	[esi+4], eax
		test	eax, eax
		jz	$err$48

loc_1BB:				; CODE XREF: _BN_BLINDING_create_param+ADj
		mov	ebx, [esp+10h+arg_4]
		test	ebx, ebx
		jz	short loc_1DF
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_1D3
		push	eax
		call	_BN_free
		add	esp, 4

loc_1D3:				; CODE XREF: _BN_BLINDING_create_param+CCj
		push	ebx
		call	_BN_dup
		add	esp, 4
		mov	[esi+8], eax

loc_1DF:				; CODE XREF: _BN_BLINDING_create_param+C5j
		cmp	dword ptr [esi+8], 0
		jz	$err$48
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1F4
		mov	[esi+28h], eax

loc_1F4:				; CODE XREF: _BN_BLINDING_create_param+F3j
		mov	eax, [esp+10h+arg_14]
		test	eax, eax
		jz	short loc_1FF
		mov	[esi+24h], eax

loc_1FF:				; CODE XREF: _BN_BLINDING_create_param+FEj
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi]
		call	_BN_rand_range
		add	esp, 8
		test	eax, eax
		jz	$err$48
		mov	ebx, [esp+10h+arg_C]
		nop	dword ptr [eax+00h]

loc_21C:				; CODE XREF: _BN_BLINDING_create_param+15Fj
		push	ebx
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi]
		push	dword ptr [esi+4]
		call	_BN_mod_inverse
		add	esp, 10h
		test	eax, eax
		jnz	short loc_27C
		call	_ERR_peek_last_error
		and	eax, 0FFFh
		cmp	eax, 6Ch ; 'l'
		jnz	short $err$48
		mov	eax, edi
		dec	edi
		test	eax, eax
		jz	short loc_25F
		call	_ERR_clear_error
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi]
		call	_BN_rand_range
		add	esp, 8
		test	eax, eax
		jnz	short loc_21C
		jmp	short $err$48
; ---------------------------------------------------------------------------

loc_25F:				; CODE XREF: _BN_BLINDING_create_param+149j
		push	166h
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	71h ; 'q'
		push	80h ; 'Ä'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$48
; ---------------------------------------------------------------------------

loc_27C:				; CODE XREF: _BN_BLINDING_create_param+133j
		mov	ecx, [esi+28h]
		test	ecx, ecx
		jz	short loc_29D
		mov	edx, [esi+24h]
		test	edx, edx
		jz	short loc_29D
		mov	eax, [esi]
		push	edx
		push	ebx
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi+8]
		push	eax
		push	eax
		call	ecx
		add	esp, 18h
		jmp	short loc_2B0
; ---------------------------------------------------------------------------

loc_29D:				; CODE XREF: _BN_BLINDING_create_param+185j
					; _BN_BLINDING_create_param+18Cj
		mov	ecx, [esi]
		push	ebx
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi+8]
		push	ecx
		push	ecx
		call	_BN_mod_exp
		add	esp, 14h

loc_2B0:				; CODE XREF: _BN_BLINDING_create_param+19Fj
		test	eax, eax
		jnz	short loc_2C7

$err$48:				; CODE XREF: _BN_BLINDING_create_param+8Fj
					; _BN_BLINDING_create_param+A3j ...
		test	ebp, ebp
		jnz	short loc_2C7
		test	esi, esi
		jz	short loc_2C7

$err$49:				; CODE XREF: _BN_BLINDING_create_param+66j
		push	esi
		call	_BN_BLINDING_free
		add	esp, 4
		xor	esi, esi

loc_2C7:				; CODE XREF: _BN_BLINDING_create_param+1B6j
					; _BN_BLINDING_create_param+1BAj ...
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_BN_BLINDING_create_param endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_free
_BN_BLINDING_free proc near		; CODE XREF: _BN_BLINDING_create_param+1C1p
					; _BN_BLINDING_new+89p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_321
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_2E8
		push	eax
		call	_BN_free
		add	esp, 4

loc_2E8:				; CODE XREF: _BN_BLINDING_free+Dj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_2F8
		push	eax
		call	_BN_free
		add	esp, 4

loc_2F8:				; CODE XREF: _BN_BLINDING_free+1Dj
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_308
		push	eax
		call	_BN_free
		add	esp, 4

loc_308:				; CODE XREF: _BN_BLINDING_free+2Dj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_318
		push	eax
		call	_BN_free
		add	esp, 4

loc_318:				; CODE XREF: _BN_BLINDING_free+3Dj
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_321:				; CODE XREF: _BN_BLINDING_free+7j
		pop	esi
		retn
_BN_BLINDING_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_get_flags
_BN_BLINDING_get_flags proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+20h]
		retn
_BN_BLINDING_get_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 32Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_get_thread_id
_BN_BLINDING_get_thread_id proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+10h]
		retn
_BN_BLINDING_get_thread_id endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 334h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_invert
_BN_BLINDING_invert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		mov	ecx, [eax+4]
		test	ecx, ecx
		jnz	short loc_35A
		push	10Fh
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	6Bh ; 'k'
		push	65h ; 'e'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_35A:				; CODE XREF: _BN_BLINDING_invert+9j
		push	[esp+arg_8]
		push	dword ptr [eax+0Ch]
		mov	eax, [esp+8+arg_0]
		push	ecx
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		retn
_BN_BLINDING_invert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 374h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_invert_ex
_BN_BLINDING_invert_ex proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_4]
		mov	eax, [esp+arg_8]
		test	ecx, ecx
		jnz	short loc_3A2
		mov	ecx, [eax+4]
		test	ecx, ecx
		jnz	short loc_3A2
		push	10Fh
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	6Bh ; 'k'
		push	65h ; 'e'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_3A2:				; CODE XREF: _BN_BLINDING_invert_ex+Aj
					; _BN_BLINDING_invert_ex+11j
		push	[esp+arg_C]
		push	dword ptr [eax+0Ch]
		mov	eax, [esp+8+arg_0]
		push	ecx
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		retn
_BN_BLINDING_invert_ex endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_new
_BN_BLINDING_new proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	8Dh ; 'ç'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	2Ch ; ','
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_3F3
		push	8Eh ; 'é'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	41h ; 'A'
		push	66h ; 'f'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3F3:				; CODE XREF: _BN_BLINDING_new+19j
		push	edi
		push	2Ch ; ','       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		mov	eax, [esp+14h+arg_0]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_418
		push	eax
		call	_BN_dup
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	short $err$13

loc_418:				; CODE XREF: _BN_BLINDING_new+4Bj
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_430
		push	eax
		call	_BN_dup
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	short $err$13

loc_430:				; CODE XREF: _BN_BLINDING_new+62j
		mov	edi, [esp+8+arg_8]
		push	edi
		call	_BN_dup
		add	esp, 4
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_452

$err$13:				; CODE XREF: _BN_BLINDING_new+5Aj
					; _BN_BLINDING_new+72j
		push	esi
		call	_BN_BLINDING_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_452:				; CODE XREF: _BN_BLINDING_new+86j
		test	byte ptr [edi+10h], 4
		jz	short loc_45C
		or	dword ptr [eax+10h], 4

loc_45C:				; CODE XREF: _BN_BLINDING_new+9Aj
		lea	eax, [esi+14h]
		mov	dword ptr [esi+1Ch], 0FFFFFFFFh
		push	eax
		call	_CRYPTO_THREADID_current
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_BN_BLINDING_new endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 474h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_set_flags
_BN_BLINDING_set_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+20h], ecx
		retn
_BN_BLINDING_set_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 480h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_set_thread_id
_BN_BLINDING_set_thread_id proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+10h], ecx
		retn
_BN_BLINDING_set_thread_id endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_thread_id
_BN_BLINDING_thread_id proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 14h
		retn
_BN_BLINDING_thread_id endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 494h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_BLINDING_update
_BN_BLINDING_update proc near		; CODE XREF: _BN_BLINDING_convert+24p
					; _BN_BLINDING_convert_ex+2Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_517
		cmp	[esi+4], edi
		jz	short loc_517
		cmp	dword ptr [esi+1Ch], 0FFFFFFFFh
		jnz	short loc_4B0
		mov	[esi+1Ch], edi

loc_4B0:				; CODE XREF: _BN_BLINDING_update+17j
		inc	dword ptr [esi+1Ch]
		cmp	dword ptr [esi+1Ch], 20h ; ' '
		jnz	short loc_4DB
		cmp	[esi+8], edi
		jz	short loc_4DB
		test	byte ptr [esi+20h], 2
		jnz	short loc_4DB
		push	0
		push	0
		push	[esp+10h+arg_4]
		push	0
		push	0
		push	esi
		call	_BN_BLINDING_create_param
		add	esp, 18h
		jmp	short loc_50C
; ---------------------------------------------------------------------------

loc_4DB:				; CODE XREF: _BN_BLINDING_update+23j
					; _BN_BLINDING_update+28j ...
		test	byte ptr [esi+20h], 1
		jnz	short loc_510
		push	[esp+8+arg_4]
		push	dword ptr [esi+0Ch]
		push	eax
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h
		test	eax, eax
		jz	short $err$17
		push	[esp+8+arg_4]
		mov	eax, [esi+4]
		push	dword ptr [esi+0Ch]
		push	eax
		push	eax
		push	eax
		call	_BN_mod_mul
		add	esp, 14h

loc_50C:				; CODE XREF: _BN_BLINDING_update+45j
		test	eax, eax
		jz	short $err$17

loc_510:				; CODE XREF: _BN_BLINDING_update+4Bj
		mov	edi, 1
		jmp	short $err$17
; ---------------------------------------------------------------------------

loc_517:				; CODE XREF: _BN_BLINDING_update+Cj
					; _BN_BLINDING_update+11j
		push	0C4h ; 'ƒ'
		push	offset ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; ".\\crypto\\bn\\bn_blind.c"
		push	6Bh ; 'k'
		push	67h ; 'g'
		push	3
		call	_ERR_put_error
		add	esp, 14h

$err$17:				; CODE XREF: _BN_BLINDING_update+61j
					; _BN_BLINDING_update+7Aj ...
		cmp	dword ptr [esi+1Ch], 20h ; ' '
		mov	eax, edi
		jnz	short loc_53E
		mov	dword ptr [esi+1Ch], 0

loc_53E:				; CODE XREF: _BN_BLINDING_update+A1j
		pop	edi
		pop	esi
		retn
_BN_BLINDING_update endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 544h
; COMDAT (pick any)
		public ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
; `string'
??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ db '.\crypto\bn\bn_blind.c',0
					; DATA XREF: _BN_BLINDING_convert+55o
					; _BN_BLINDING_convert_ex+75o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_THREADID_current:near
					; CODE XREF: _BN_BLINDING_create_param+81p
					; _BN_BLINDING_new+ABp
		extrn _CRYPTO_malloc:near ; CODE XREF: _BN_BLINDING_create_param+1Dp
					; _BN_BLINDING_new+Dp
		extrn _CRYPTO_free:near	; CODE XREF: _BN_BLINDING_free+49p
		extrn _ERR_put_error:near ; CODE XREF: _BN_BLINDING_convert+60p
					; _BN_BLINDING_convert_ex+80p ...
		extrn _ERR_peek_last_error:near	; CODE XREF: _BN_BLINDING_create_param+135p
		extrn _ERR_clear_error:near ; CODE XREF: _BN_BLINDING_create_param+14Bp
		extrn _BN_rand_range:near ; CODE XREF: _BN_BLINDING_create_param+108p
					; _BN_BLINDING_create_param+155p
		extrn _BN_new:near	; CODE XREF: _BN_BLINDING_create_param+9Ap
					; _BN_BLINDING_create_param+AFp
		extrn _BN_copy:near	; CODE XREF: _BN_BLINDING_convert_ex+42p
		extrn _BN_mod_mul:near	; CODE XREF: _BN_BLINDING_convert+3Fp
					; _BN_BLINDING_convert_ex+5Fp ...
		extrn _BN_free:near	; CODE XREF: _BN_BLINDING_create_param+CFp
					; _BN_BLINDING_free+10p ...
		extrn _BN_mod_exp:near	; CODE XREF: _BN_BLINDING_create_param+1ACp
		extrn _BN_dup:near	; CODE XREF: _BN_BLINDING_create_param+59p
					; _BN_BLINDING_create_param+D8p ...
		extrn _BN_mod_inverse:near ; CODE XREF:	_BN_BLINDING_create_param+129p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _BN_BLINDING_create_param+4Fp
					; _BN_BLINDING_new+3Dp


		end
