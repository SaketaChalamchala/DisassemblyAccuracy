;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A4FB9487FC79DF69BE7DEDD71D8AF963
; Input	CRC32 :	8BF01954

; File Name   :	C:\compspace\Diff\openssl\obj\a_sign.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_sign
_ASN1_item_sign	proc near

var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 18h
		call	__chkstk
		lea	eax, [esp+18h+var_18]
		push	eax
		call	_EVP_MD_CTX_init
		push	[esp+1Ch+arg_14]
		lea	eax, [esp+20h+var_18]
		push	0
		push	[esp+24h+arg_18]
		push	0
		push	eax
		call	_EVP_DigestSignInit
		add	esp, 18h
		test	eax, eax
		lea	eax, [esp+18h+var_18]
		push	eax
		jnz	short loc_42
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		xor	eax, eax
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_42:					; CODE XREF: _ASN1_item_sign+32j
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	_ASN1_item_sign_ctx
		add	esp, 18h
		add	esp, 18h
		retn
_ASN1_item_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_sign_ctx
_ASN1_item_sign_ctx proc near		; CODE XREF: _ASN1_item_sign+56p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+18h+arg_14]
		push	ebp
		push	esi
		xor	esi, esi
		mov	[esp+20h+var_10], 0
		push	ebx
		mov	[esp+24h+var_14], esi
		mov	[esp+24h+var_8], esi
		call	_EVP_MD_CTX_md
		push	dword ptr [ebx+10h]
		mov	ebp, eax
		call	_EVP_PKEY_CTX_get0_pkey
		add	esp, 8
		mov	ecx, eax
		mov	[esp+20h+var_C], ecx
		test	ebp, ebp
		jz	loc_313
		test	ecx, ecx
		jz	loc_313
		mov	eax, [ecx+0Ch]
		push	edi
		mov	edi, [esp+24h+arg_C]
		mov	eax, [eax+68h]
		test	eax, eax
		jz	loc_167
		push	edi
		push	[esp+28h+arg_8]
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_10]
		push	[esp+34h+arg_0]
		push	ebx
		call	eax
		add	esp, 18h
		mov	[esp+24h+var_4], eax
		cmp	eax, 1
		jnz	short loc_132
		mov	eax, [edi]
		mov	[esp+24h+var_14], eax

loc_E9:					; CODE XREF: _ASN1_item_sign_ctx+F4j
		xor	ebp, ebp

$err$32:				; CODE XREF: _ASN1_item_sign_ctx+256j
					; _ASN1_item_sign_ctx+27Ej ...
		push	ebx
		call	_EVP_MD_CTX_cleanup
		mov	eax, [esp+28h+var_10]
		add	esp, 4
		test	eax, eax
		jz	short loc_10F
		push	ebp
		push	eax
		call	_OPENSSL_cleanse
		push	[esp+2Ch+var_10]
		call	_CRYPTO_free
		add	esp, 0Ch

loc_10F:				; CODE XREF: _ASN1_item_sign_ctx+96j
		test	esi, esi
		jz	short loc_126
		push	[esp+24h+var_8]
		push	esi
		call	_OPENSSL_cleanse
		push	esi
		call	_CRYPTO_free
		add	esp, 0Ch

loc_126:				; CODE XREF: _ASN1_item_sign_ctx+ADj
		mov	eax, [esp+24h+var_14]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_132:				; CODE XREF: _ASN1_item_sign_ctx+7Dj
		test	eax, eax
		jg	short loc_155
		push	107h
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	6
		push	0DCh ; 'Ü'
		push	0Dh
		call	_ERR_put_error
		mov	eax, [esp+38h+var_4]
		add	esp, 14h

loc_155:				; CODE XREF: _ASN1_item_sign_ctx+D0j
		cmp	eax, 1
		jle	short loc_E9
		cmp	eax, 2
		jnz	loc_224
		mov	ecx, [esp+24h+var_C]

loc_167:				; CODE XREF: _ASN1_item_sign_ctx+59j
		test	byte ptr [ebp+0Ch], 4
		jz	short loc_1BF
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	short loc_197
		push	dword ptr [eax]
		push	ebp
		call	_EVP_MD_type
		add	esp, 4
		push	eax
		lea	eax, [esp+2Ch+arg_14]
		push	eax
		call	_OBJ_find_sigid_by_algs
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_197
		mov	ecx, [esp+24h+arg_14]
		jmp	short loc_1C6
; ---------------------------------------------------------------------------

loc_197:				; CODE XREF: _ASN1_item_sign_ctx+10Ej
					; _ASN1_item_sign_ctx+12Bj
		push	114h
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	0C6h ; 'Æ'
		push	0DCh ; 'Ü'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1BF:				; CODE XREF: _ASN1_item_sign_ctx+107j
		mov	ecx, [ebp+4]
		mov	[esp+24h+arg_14], ecx

loc_1C6:				; CODE XREF: _ASN1_item_sign_ctx+131j
		mov	ebp, [esp+24h+var_C]
		mov	esi, 0FFFFFFFFh
		mov	eax, [ebp+0Ch]
		test	byte ptr [eax+8], 4
		mov	eax, 5
		cmovnz	esi, eax
		cmp	[esp+24h+arg_4], 0
		jz	short loc_202
		push	0
		push	esi
		push	ecx
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+30h+arg_4]
		call	_X509_ALGOR_set0
		mov	ecx, [esp+34h+arg_14]
		add	esp, 10h

loc_202:				; CODE XREF: _ASN1_item_sign_ctx+17Fj
		cmp	[esp+24h+arg_8], 0
		jz	short loc_228
		push	0
		push	esi
		push	ecx
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+30h+arg_8]
		call	_X509_ALGOR_set0
		add	esp, 10h
		jmp	short loc_228
; ---------------------------------------------------------------------------

loc_224:				; CODE XREF: _ASN1_item_sign_ctx+F9j
		mov	ebp, [esp+24h+var_C]

loc_228:				; CODE XREF: _ASN1_item_sign_ctx+1A3j
					; _ASN1_item_sign_ctx+1BEj
		push	[esp+24h+arg_0]
		lea	eax, [esp+28h+var_10]
		push	eax
		push	[esp+2Ch+arg_10]
		call	_ASN1_item_i2d
		push	ebp
		mov	[esp+34h+var_C], eax
		call	_EVP_PKEY_size
		push	128h
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	eax
		mov	[esp+40h+var_8], eax
		mov	[esp+40h+var_14], eax
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 1Ch
		mov	eax, [esp+24h+var_10]
		test	eax, eax
		jz	short loc_2E7
		test	esi, esi
		jz	short loc_2E7
		mov	ebp, [esp+24h+var_C]
		push	ebp
		push	eax
		push	ebx
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_2BF
		lea	eax, [esp+24h+var_14]
		push	eax
		push	esi
		push	ebx
		call	_EVP_DigestSignFinal
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_2BF
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_2A3
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_2A3:				; CODE XREF: _ASN1_item_sign_ctx+234j
		mov	eax, [esp+24h+var_14]
		mov	[edi], eax
		mov	eax, [edi+0Ch]
		mov	[edi+8], esi
		and	eax, 0FFFFFFF8h
		xor	esi, esi
		or	eax, 8
		mov	[edi+0Ch], eax
		jmp	$err$32
; ---------------------------------------------------------------------------

loc_2BF:				; CODE XREF: _ASN1_item_sign_ctx+21Aj
					; _ASN1_item_sign_ctx+22Dj
		push	132h
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	6
		push	0DCh ; 'Ü'
		push	0Dh
		mov	[esp+38h+var_14], 0
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$32
; ---------------------------------------------------------------------------

loc_2E7:				; CODE XREF: _ASN1_item_sign_ctx+203j
					; _ASN1_item_sign_ctx+207j
		push	12Bh
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	41h ; 'A'
		push	0DCh ; 'Ü'
		push	0Dh
		mov	[esp+38h+var_14], 0
		call	_ERR_put_error
		mov	ebp, [esp+38h+var_C]
		add	esp, 14h
		jmp	$err$32
; ---------------------------------------------------------------------------

loc_313:				; CODE XREF: _ASN1_item_sign_ctx+3Ej
					; _ASN1_item_sign_ctx+46j
		push	0F7h ; '÷'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	0D9h ; 'Ù'
		push	0DCh ; 'Ü'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
_ASN1_item_sign_ctx endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 33Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_sign
_ASN1_sign	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 2Ch ; ','
		call	__chkstk
		xor	eax, eax
		push	ebx
		mov	[esp+30h+var_28], eax
		xor	ebx, ebx
		mov	[esp+30h+var_2C], eax
		mov	[esp+30h+var_20], eax
		lea	eax, [esp+30h+var_18]
		push	edi
		push	eax
		call	_EVP_MD_CTX_init
		add	esp, 4
		xor	edi, edi
		push	ebp
		push	esi
		nop	dword ptr [eax]

loc_36C:				; CODE XREF: _ASN1_sign+ADj
		mov	esi, [esp+3Ch+arg_8]
		test	edi, edi
		cmovz	esi, [esp+3Ch+arg_4]
		test	esi, esi
		jz	short loc_3E5
		mov	ebp, [esp+3Ch+arg_18]
		cmp	dword ptr [ebp+4], 71h ; 'q'
		jnz	short loc_395
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_free
		add	esp, 4
		mov	[esi+4], ebx
		jmp	short loc_3C0
; ---------------------------------------------------------------------------

loc_395:				; CODE XREF: _ASN1_sign+47j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_3A1
		cmp	dword ptr [eax], 5
		jz	short loc_3C0

loc_3A1:				; CODE XREF: _ASN1_sign+5Ej
		push	eax
		call	_ASN1_TYPE_free
		add	esp, 4
		call	_ASN1_TYPE_new
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_4F8
		mov	dword ptr [eax], 5

loc_3C0:				; CODE XREF: _ASN1_sign+57j
					; _ASN1_sign+63j
		push	dword ptr [esi]
		call	_ASN1_OBJECT_free
		push	dword ptr [ebp+4]
		call	_OBJ_nid2obj
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jz	loc_542
		cmp	[eax+0Ch], ebx
		jz	loc_4DA

loc_3E5:				; CODE XREF: _ASN1_sign+3Dj
		inc	edi
		cmp	edi, 2
		jl	short loc_36C
		mov	edi, [esp+3Ch+arg_10]
		mov	ebp, [esp+3Ch+arg_0]
		push	0
		push	edi
		call	ebp
		push	0AEh ; '®'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	eax
		mov	[esp+50h+var_24], eax
		call	_CRYPTO_malloc
		mov	esi, [esp+50h+arg_14]
		push	esi
		mov	[esp+54h+var_28], eax
		call	_EVP_PKEY_size
		push	0B0h ; '°'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	eax
		mov	[esp+60h+var_20], eax
		mov	[esp+60h+var_2C], eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 24h
		mov	eax, [esp+3Ch+var_28]
		test	eax, eax
		jz	loc_578
		test	ebx, ebx
		jz	loc_578
		mov	[esp+3Ch+var_1C], eax
		lea	eax, [esp+3Ch+var_1C]
		push	eax
		push	edi
		call	ebp
		push	0
		push	[esp+48h+arg_18]
		lea	eax, [esp+4Ch+var_18]
		push	eax
		call	_EVP_DigestInit_ex
		mov	edi, [esp+50h+var_24]
		add	esp, 14h
		test	eax, eax
		jz	loc_553
		mov	eax, [esp+3Ch+var_28]
		push	edi
		push	eax
		lea	eax, [esp+44h+var_18]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_553
		push	esi
		lea	eax, [esp+40h+var_2C]
		push	eax
		lea	eax, [esp+44h+var_18]
		push	ebx
		push	eax
		call	_EVP_SignFinal
		add	esp, 10h
		test	eax, eax
		jz	loc_553
		mov	esi, [esp+3Ch+arg_C]
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_4C1
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_4C1:				; CODE XREF: _ASN1_sign+17Aj
		mov	eax, [esp+3Ch+var_2C]
		mov	[esi], eax
		mov	eax, [esi+0Ch]
		mov	[esi+8], ebx
		and	eax, 0FFFFFFF8h
		xor	ebx, ebx
		or	eax, 8
		mov	[esi+0Ch], eax
		jmp	short $err$36
; ---------------------------------------------------------------------------

loc_4DA:				; CODE XREF: _ASN1_sign+A3j
		push	0A9h ; '©'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	9Ah ; ''

loc_4E9:				; CODE XREF: _ASN1_sign+215j
		push	80h ; ''
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_4F8:				; CODE XREF: _ASN1_sign+78j
		xor	edi, edi

$err$36:				; CODE XREF: _ASN1_sign+19Cj
					; _ASN1_sign+23Aj ...
		lea	eax, [esp+3Ch+var_18]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	ebp, [esp+40h+var_28]
		add	esp, 4
		test	ebp, ebp
		jz	short loc_51F
		push	edi
		push	ebp
		call	_OPENSSL_cleanse
		push	ebp
		call	_CRYPTO_free
		add	esp, 0Ch

loc_51F:				; CODE XREF: _ASN1_sign+1D1j
		pop	esi
		pop	ebp
		test	ebx, ebx
		jz	short loc_538
		push	[esp+34h+var_20]
		push	ebx
		call	_OPENSSL_cleanse
		push	ebx
		call	_CRYPTO_free
		add	esp, 0Ch

loc_538:				; CODE XREF: _ASN1_sign+1E7j
		mov	eax, [esp+34h+var_2C]
		pop	edi
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_542:				; CODE XREF: _ASN1_sign+9Aj
		push	0A4h ; '¤'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	0A2h ; '¢'
		jmp	short loc_4E9
; ---------------------------------------------------------------------------

loc_553:				; CODE XREF: _ASN1_sign+134j
					; _ASN1_sign+14Fj ...
		push	0BEh ; '¾'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	6
		push	80h ; ''
		push	0Dh
		mov	[esp+50h+var_2C], 0
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$36
; ---------------------------------------------------------------------------

loc_578:				; CODE XREF: _ASN1_sign+101j
					; _ASN1_sign+109j
		push	0B3h ; '³'
		push	offset ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ ; ".\\crypto\\asn1\\a_sign.c"
		push	41h ; 'A'
		push	80h ; ''
		push	0Dh
		mov	[esp+50h+var_2C], 0
		call	_ERR_put_error
		mov	edi, [esp+50h+var_24]
		add	esp, 14h
		jmp	$err$36
_ASN1_sign	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5A4h
; COMDAT (pick any)
		public ??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@
; `string'
??_C@_0BH@NJPJLAKA@?4?2crypto?2asn1?2a_sign?4c?$AA@ db '.\crypto\asn1\a_sign.c',0
					; DATA XREF: _ASN1_item_sign_ctx+D7o
					; _ASN1_item_sign_ctx+138o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_item_sign_ctx+1F3p
					; _ASN1_sign+CBp ...
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_item_sign_ctx+A3p
					; _ASN1_item_sign_ctx+BAp ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _ASN1_item_sign_ctx+9Ap
					; _ASN1_item_sign_ctx+B4p ...
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_item_sign_ctx+E5p
					; _ASN1_item_sign_ctx+149p ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _ASN1_sign+6Ep
		extrn _ASN1_TYPE_free:near ; CODE XREF:	_ASN1_sign+4Cp
					; _ASN1_sign+66p
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _ASN1_sign+86p
		extrn _ASN1_item_i2d:near ; CODE XREF: _ASN1_item_sign_ctx+1D1p
		extrn _OBJ_nid2obj:near	; CODE XREF: _ASN1_item_sign_ctx+185p
					; _ASN1_item_sign_ctx+1A9p ...
		extrn _OBJ_find_sigid_by_algs:near ; CODE XREF:	_ASN1_item_sign_ctx+121p
		extrn _EVP_MD_type:near	; CODE XREF: _ASN1_item_sign_ctx+113p
		extrn _EVP_MD_CTX_md:near ; CODE XREF: _ASN1_item_sign_ctx+24p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _ASN1_item_sign+Ep
					; _ASN1_sign+21p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _ASN1_item_sign+34p
					; _ASN1_item_sign_ctx+88p ...
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _ASN1_sign+126p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _ASN1_item_sign_ctx+210p
					; _ASN1_sign+145p
		extrn _EVP_SignFinal:near ; CODE XREF: _ASN1_sign+161p
		extrn _EVP_DigestSignInit:near ; CODE XREF: _ASN1_item_sign+24p
		extrn _EVP_DigestSignFinal:near	; CODE XREF: _ASN1_item_sign_ctx+223p
		extrn _EVP_PKEY_size:near ; CODE XREF: _ASN1_item_sign_ctx+1DBp
					; _ASN1_sign+D9p
		extrn _EVP_PKEY_CTX_get0_pkey:near ; CODE XREF:	_ASN1_item_sign_ctx+2Ep
		extrn _X509_ALGOR_set0:near ; CODE XREF: _ASN1_item_sign_ctx+192p
					; _ASN1_item_sign_ctx+1B6p
		extrn __chkstk:near	; CODE XREF: _ASN1_item_sign+5p
					; _ASN1_item_sign_ctx+5p ...


		end
