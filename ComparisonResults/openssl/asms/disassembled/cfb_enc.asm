;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E9C06363277E80507731F1E6282CBD99
; Input	CRC32 :	32E31C89

; File Name   :	C:\compspace\Diff\openssl\obj\cfb_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_cfb_encrypt
_DES_cfb_encrypt proc near

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Dst		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 40h ; '@'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+40h+var_4], eax
		mov	eax, [esp+40h+arg_10]
		mov	ecx, [esp+40h+arg_8]
		mov	[esp+40h+var_24], eax
		mov	eax, ecx
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	[esp+40h+var_34], eax
		lea	eax, [ecx+7]
		push	ebx
		mov	ebx, [esp+44h+arg_14]
		cdq
		push	ebp
		and	edx, 7
		mov	[esp+48h+var_18], ebx
		push	esi
		mov	esi, [esp+4Ch+arg_4]
		push	edi
		lea	ebp, [edx+eax]
		mov	edi, ecx
		sar	ebp, 3
		and	edi, 80000007h
		jns	short loc_5C
		dec	edi
		or	edi, 0FFFFFFF8h
		inc	edi

loc_5C:					; CODE XREF: _DES_cfb_encrypt+55j
		dec	ecx
		mov	[esp+50h+var_1C], edi
		cmp	ecx, 3Fh ; '?'
		ja	loc_5E8
		movzx	ecx, byte ptr [ebx]
		lea	edx, [ebx+1]
		movzx	eax, byte ptr [edx]
		movzx	ebx, byte ptr [edx+3]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [edx+4]
		mov	[esp+50h+var_40], ecx
		movzx	ecx, byte ptr [edx+6]
		shl	eax, 8
		or	ebx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		shl	ecx, 10h
		or	ebx, ecx
		cmp	[esp+50h+arg_18], 0
		mov	ecx, [esp+50h+arg_C]
		jz	loc_308
		cmp	ecx, ebp
		jb	loc_5AF
		mov	eax, 8
		sub	eax, edi
		mov	edi, [esp+50h+arg_0]
		mov	[esp+50h+var_3C], eax
		mov	eax, [esp+50h+var_40]
		nop	word ptr [eax+eax+00000000h]

loc_E0:					; CODE XREF: _DES_cfb_encrypt+2FDj
		push	1
		push	[esp+54h+var_24]
		mov	[esp+58h+var_2C], eax
		sub	ecx, ebp
		lea	eax, [esp+58h+var_2C]
		mov	[esp+58h+arg_C], ecx
		push	eax
		mov	[esp+5Ch+var_28], ebx
		call	_DES_encrypt1
		lea	eax, [ebp-1]
		add	esp, 0Ch
		add	edi, ebp
		xor	edx, edx
		xor	ecx, ecx
		cmp	eax, 7		; switch 8 cases
		ja	short loc_15F	; jumptable 0000010F default case
		jmp	ds:$LN106[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	edx, byte ptr [edi-1] ;	jumptable 0000010F case	7
		dec	edi
		shl	edx, 18h

$LN25:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	eax, byte ptr [edi-1] ;	jumptable 0000010F case	6
		dec	edi
		shl	eax, 10h
		or	edx, eax

$LN26:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	eax, byte ptr [edi-1] ;	jumptable 0000010F case	5
		dec	edi
		shl	eax, 8
		or	edx, eax

$LN27:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	eax, byte ptr [edi-1] ;	jumptable 0000010F case	4
		dec	edi
		or	edx, eax

$LN28:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	ecx, byte ptr [edi-1] ;	jumptable 0000010F case	3
		dec	edi
		shl	ecx, 18h

$LN29:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	eax, byte ptr [edi-1] ;	jumptable 0000010F case	2
		dec	edi
		shl	eax, 10h
		or	ecx, eax

$LN30:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	eax, byte ptr [edi-1] ;	jumptable 0000010F case	1
		dec	edi
		shl	eax, 8
		or	ecx, eax

$LN31:					; CODE XREF: _DES_cfb_encrypt+10Fj
					; DATA XREF: .text$mn:$LN106o
		movzx	eax, byte ptr [edi-1] ;	jumptable 0000010F case	0
		dec	edi
		or	ecx, eax
		lea	eax, [ebp-1]

loc_15F:				; CODE XREF: _DES_cfb_encrypt+10Dj
		xor	ecx, [esp+50h+var_2C] ;	jumptable 0000010F default case
		add	edi, ebp
		xor	edx, [esp+50h+var_28]
		add	esi, ebp
		mov	[esp+50h+var_30], edi
		cmp	eax, 7		; switch 8 cases
		ja	short loc_1B1	; jumptable 00000174 default case
		jmp	ds:$LN107[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN32:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 7
		mov	eax, edx
		shr	eax, 18h
		mov	[esi], al

$LN33:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 6
		mov	eax, edx
		shr	eax, 10h
		mov	[esi], al

$LN34:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 5
		mov	eax, edx
		shr	eax, 8
		mov	[esi], al

$LN35:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 4
		mov	[esi], dl

$LN36:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 3
		mov	eax, ecx
		shr	eax, 18h
		mov	[esi], al

$LN37:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 2
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi], al

$LN38:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 1
		mov	eax, ecx
		shr	eax, 8
		mov	[esi], al

$LN39:					; CODE XREF: _DES_cfb_encrypt+174j
					; DATA XREF: .text$mn:$LN107o
		dec	esi		; jumptable 00000174 case 0
		mov	[esi], cl

loc_1B1:				; CODE XREF: _DES_cfb_encrypt+172j
		mov	eax, [esp+50h+arg_8] ; jumptable 00000174 default case
		add	esi, ebp
		cmp	eax, 20h ; ' '
		jnz	short loc_1C5
		mov	eax, ebx
		mov	ebx, ecx
		jmp	loc_2F3
; ---------------------------------------------------------------------------

loc_1C5:				; CODE XREF: _DES_cfb_encrypt+1BAj
		cmp	eax, 40h ; '@'
		jnz	short loc_1D3
		mov	eax, ecx
		mov	ebx, edx
		jmp	loc_2F3
; ---------------------------------------------------------------------------

loc_1D3:				; CODE XREF: _DES_cfb_encrypt+1C8j
		mov	edi, [esp+50h+var_40]
		mov	[esp+50h+var_10], ebx
		mov	ebx, [esp+50h+var_1C]
		mov	[esp+50h+Dst], edi
		mov	[esp+50h+var_C], ecx
		mov	[esp+50h+var_8], edx
		test	ebx, ebx
		jnz	short loc_20D
		mov	eax, [esp+50h+var_34]
		lea	ecx, [esp+50h+Dst]
		add	eax, ecx
		push	8		; Size
		push	eax		; Src
		mov	eax, ecx
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		jmp	loc_2E7
; ---------------------------------------------------------------------------

loc_20D:				; CODE XREF: _DES_cfb_encrypt+1EDj
		mov	edi, [esp+50h+var_34]
		movzx	ecx, byte ptr [esp+50h+var_3C]
		movzx	edx, byte ptr [esp+edi+50h+Dst+1]
		movzx	eax, byte ptr [esp+edi+50h+Dst]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		or	dl, al
		mov	byte ptr [esp+50h+Dst],	dl
		movzx	edx, byte ptr [esp+edi+50h+Dst+1]
		movzx	eax, byte ptr [esp+edi+50h+Dst+2]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		mov	ecx, ebx
		or	dl, al
		mov	byte ptr [esp+50h+Dst+1], dl
		movzx	edx, byte ptr [esp+edi+50h+Dst+2]
		movzx	eax, byte ptr [esp+edi+50h+Dst+3]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		mov	ecx, ebx
		or	dl, al
		mov	byte ptr [esp+50h+Dst+2], dl
		movzx	edx, byte ptr [esp+edi+50h+Dst+3]
		movzx	eax, byte ptr [esp+edi+50h+var_10]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		mov	ecx, ebx
		or	dl, al
		mov	byte ptr [esp+50h+Dst+3], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10]
		movzx	eax, byte ptr [esp+edi+50h+var_10+1]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		mov	ecx, ebx
		or	dl, al
		mov	byte ptr [esp+50h+var_10], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10+1]
		movzx	eax, byte ptr [esp+edi+50h+var_10+2]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		mov	ecx, ebx
		or	dl, al
		mov	byte ptr [esp+50h+var_10+1], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10+2]
		movzx	eax, byte ptr [esp+edi+50h+var_10+3]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		mov	ecx, ebx
		or	dl, al
		mov	byte ptr [esp+50h+var_10+2], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10+3]
		movzx	eax, byte ptr [esp+edi+50h+var_C]
		shl	dl, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		shr	al, cl
		or	dl, al
		mov	byte ptr [esp+50h+var_10+3], dl

loc_2E7:				; CODE XREF: _DES_cfb_encrypt+208j
		mov	eax, [esp+50h+Dst]
		mov	ebx, [esp+50h+var_10]
		mov	edi, [esp+50h+var_30]

loc_2F3:				; CODE XREF: _DES_cfb_encrypt+1C0j
					; _DES_cfb_encrypt+1CEj
		mov	ecx, [esp+50h+arg_C]
		mov	[esp+50h+var_40], eax
		cmp	ecx, ebp
		jnb	loc_E0
		jmp	loc_5AF
; ---------------------------------------------------------------------------

loc_308:				; CODE XREF: _DES_cfb_encrypt+B6j
		cmp	ecx, ebp
		jb	loc_5AF
		mov	eax, 8
		sub	eax, edi
		mov	edi, [esp+50h+var_40]
		mov	[esp+50h+var_3C], eax
		mov	eax, [esp+50h+arg_0]
		mov	[esp+50h+var_20], eax
		nop	word ptr [eax+eax+00000000h]

loc_330:				; CODE XREF: _DES_cfb_encrypt+5A9j
		push	1
		push	[esp+54h+var_24]
		lea	eax, [esp+58h+var_2C]
		mov	[esp+58h+var_2C], edi
		sub	ecx, ebp
		mov	[esp+58h+var_28], ebx
		push	eax
		mov	[esp+5Ch+arg_C], ecx
		call	_DES_encrypt1
		mov	ecx, [esp+5Ch+var_20]
		lea	edi, [ebp-1]
		xor	eax, eax
		xor	edx, edx
		add	esp, 0Ch
		mov	[esp+50h+var_38], eax
		add	ecx, ebp
		mov	[esp+50h+var_30], edx
		cmp	edi, 7
		ja	loc_3F8
		lea	edi, [ebp-1]
		jmp	ds:$LN108[edi*4] ; jumptable 00000564 case 0
; ---------------------------------------------------------------------------

$LN46:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:00000658o
		movzx	edx, byte ptr [ecx-1]
		dec	ecx
		dec	ecx
		shl	edx, 18h
		movzx	eax, byte ptr [ecx]
		dec	ecx
		shl	eax, 10h
		or	edx, eax
		movzx	eax, byte ptr [ecx]
		shl	eax, 8
		or	edx, eax
		jmp	short loc_3C2
; ---------------------------------------------------------------------------

$LN102:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:00000654o
		movzx	eax, byte ptr [ecx-1]
		dec	ecx
		mov	edx, [esp+50h+var_38]
		dec	ecx
		shl	eax, 10h
		or	edx, eax
		movzx	eax, byte ptr [ecx]
		shl	eax, 8
		or	edx, eax
		jmp	short loc_3C2
; ---------------------------------------------------------------------------

$LN101:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:00000650o
		movzx	eax, byte ptr [ecx-1]
		dec	ecx
		mov	edx, [esp+50h+var_38]
		shl	eax, 8
		or	edx, eax
		jmp	short loc_3C2
; ---------------------------------------------------------------------------

$LN100:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:0000064Co
		mov	edx, [esp+50h+var_38]

loc_3C2:				; CODE XREF: _DES_cfb_encrypt+393j
					; _DES_cfb_encrypt+3ACj ...
		movzx	eax, byte ptr [ecx-1]
		dec	ecx
		or	edx, eax
		mov	[esp+50h+var_38], edx

$LN50:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:00000648o
		movzx	edx, byte ptr [ecx-1]
		dec	ecx
		shl	edx, 18h

$LN51:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:00000644o
		movzx	eax, byte ptr [ecx-1]
		dec	ecx
		shl	eax, 10h
		or	edx, eax

$LN52:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:00000640o
		movzx	eax, byte ptr [ecx-1]
		dec	ecx
		shl	eax, 8
		or	edx, eax

$LN53:					; CODE XREF: _DES_cfb_encrypt+372j
					; DATA XREF: .text$mn:$LN108o
		movzx	eax, byte ptr [ecx-1]
		dec	ecx
		or	edx, eax
		mov	eax, [esp+50h+var_38]
		mov	[esp+50h+var_30], edx

loc_3F8:				; CODE XREF: _DES_cfb_encrypt+369j
		mov	edi, [esp+50h+var_40]
		add	ecx, ebp
		mov	[esp+50h+var_20], ecx
		mov	ecx, [esp+50h+arg_8]
		cmp	ecx, 20h ; ' '
		jnz	short loc_41A
		mov	[esp+50h+var_40], ebx
		mov	ebx, edx
		mov	edi, [esp+50h+var_40]
		jmp	loc_54E
; ---------------------------------------------------------------------------

loc_41A:				; CODE XREF: _DES_cfb_encrypt+409j
		cmp	ecx, 40h ; '@'
		jnz	short loc_42C
		mov	[esp+50h+var_40], edx
		mov	ebx, eax
		mov	edi, edx
		jmp	loc_54E
; ---------------------------------------------------------------------------

loc_42C:				; CODE XREF: _DES_cfb_encrypt+41Dj
		mov	[esp+50h+var_10], ebx
		mov	ebx, [esp+50h+var_1C]
		mov	[esp+50h+Dst], edi
		mov	[esp+50h+var_C], edx
		mov	[esp+50h+var_8], eax
		test	ebx, ebx
		jnz	short loc_462
		mov	eax, [esp+50h+var_34]
		lea	ecx, [esp+50h+Dst]
		add	eax, ecx
		push	8		; Size
		push	eax		; Src
		mov	eax, ecx
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		jmp	loc_53E
; ---------------------------------------------------------------------------

loc_462:				; CODE XREF: _DES_cfb_encrypt+442j
		mov	edi, [esp+50h+var_34]
		movzx	ecx, byte ptr [esp+50h+var_3C]
		movzx	edx, byte ptr [esp+edi+50h+Dst+1]
		movzx	eax, byte ptr [esp+edi+50h+Dst]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		or	dl, al
		movzx	ecx, byte ptr [esp+50h+var_3C]
		mov	byte ptr [esp+50h+Dst],	dl
		movzx	edx, byte ptr [esp+edi+50h+Dst+2]
		movzx	eax, byte ptr [esp+edi+50h+Dst+1]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		or	dl, al
		movzx	ecx, byte ptr [esp+50h+var_3C]
		mov	byte ptr [esp+50h+Dst+1], dl
		movzx	edx, byte ptr [esp+edi+50h+Dst+3]
		movzx	eax, byte ptr [esp+edi+50h+Dst+2]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		or	dl, al
		mov	byte ptr [esp+50h+Dst+2], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10]
		movzx	eax, byte ptr [esp+edi+50h+Dst+3]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		or	dl, al
		mov	byte ptr [esp+50h+Dst+3], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10+1]
		movzx	eax, byte ptr [esp+edi+50h+var_10]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		or	dl, al
		mov	byte ptr [esp+50h+var_10], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10+2]
		movzx	eax, byte ptr [esp+edi+50h+var_10+1]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		or	dl, al
		mov	byte ptr [esp+50h+var_10+1], dl
		movzx	edx, byte ptr [esp+edi+50h+var_10+3]
		movzx	eax, byte ptr [esp+edi+50h+var_10+2]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		movzx	ecx, byte ptr [esp+50h+var_3C]
		or	dl, al
		mov	byte ptr [esp+50h+var_10+2], dl
		movzx	edx, byte ptr [esp+edi+50h+var_C]
		movzx	eax, byte ptr [esp+edi+50h+var_10+3]
		shr	dl, cl
		mov	ecx, ebx
		shl	al, cl
		or	dl, al
		mov	byte ptr [esp+50h+var_10+3], dl

loc_53E:				; CODE XREF: _DES_cfb_encrypt+45Dj
		mov	edi, [esp+50h+Dst]
		mov	ebx, [esp+50h+var_10]
		mov	edx, [esp+50h+var_30]
		mov	[esp+50h+var_40], edi

loc_54E:				; CODE XREF: _DES_cfb_encrypt+415j
					; _DES_cfb_encrypt+427j
		mov	ecx, [esp+50h+var_38]
		lea	eax, [ebp-1]
		xor	edx, [esp+50h+var_2C]
		add	esi, ebp
		xor	ecx, [esp+50h+var_28]
		cmp	eax, 7		; switch 8 cases
		ja	short loc_5A1	; jumptable 00000564 default case
		jmp	ds:$LN109[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN60:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 7
		mov	eax, ecx
		shr	eax, 18h
		mov	[esi], al

$LN61:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 6
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi], al

$LN62:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 5
		mov	eax, ecx
		shr	eax, 8
		mov	[esi], al

$LN63:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 4
		mov	[esi], cl

$LN64:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 3
		mov	eax, edx
		shr	eax, 18h
		mov	[esi], al

$LN65:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 2
		mov	eax, edx
		shr	eax, 10h
		mov	[esi], al

$LN66:					; CODE XREF: _DES_cfb_encrypt+564j
					; DATA XREF: .text$mn:$LN109o
		dec	esi		; jumptable 00000564 case 1
		mov	eax, edx
		shr	eax, 8
		mov	[esi], al

$LN67:					; CODE XREF: _DES_cfb_encrypt+372j
					; _DES_cfb_encrypt+564j
					; DATA XREF: ...
		dec	esi		; jumptable 00000564 case 0
		mov	[esi], dl

loc_5A1:				; CODE XREF: _DES_cfb_encrypt+562j
		mov	ecx, [esp+50h+arg_C] ; jumptable 00000564 default case
		add	esi, ebp
		cmp	ecx, ebp
		jnb	loc_330

loc_5AF:				; CODE XREF: _DES_cfb_encrypt+BEj
					; _DES_cfb_encrypt+303j ...
		mov	esi, [esp+50h+var_18]
		mov	ecx, [esp+50h+var_40]
		mov	eax, ecx
		shr	eax, 8
		mov	[esi], cl
		mov	[esi+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+2], al
		mov	eax, ebx
		shr	ecx, 18h
		mov	[esi+3], cl
		shr	eax, 8
		mov	[esi+4], bl
		mov	[esi+5], al
		mov	eax, ebx
		shr	eax, 10h
		shr	ebx, 18h
		mov	[esi+6], al
		mov	[esi+7], bl

loc_5E8:				; CODE XREF: _DES_cfb_encrypt+64j
		mov	ecx, [esp+50h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
_DES_cfb_encrypt endp

; ---------------------------------------------------------------------------
		align 4
$LN106		dd offset $LN31		; DATA XREF: _DES_cfb_encrypt+10Fr
		dd offset $LN30		; jump table for switch	statement
		dd offset $LN29
		dd offset $LN28
		dd offset $LN27
		dd offset $LN26
		dd offset $LN25
		dd offset $LN24
$LN107		dd offset $LN39		; DATA XREF: _DES_cfb_encrypt+174r
		dd offset $LN38		; jump table for switch	statement
		dd offset $LN37
		dd offset $LN36
		dd offset $LN35
		dd offset $LN34
		dd offset $LN33
		dd offset $LN32
$LN108		dd offset $LN53		; DATA XREF: _DES_cfb_encrypt+372r
		dd offset $LN52
		dd offset $LN51
		dd offset $LN50
		dd offset $LN100
		dd offset $LN101
		dd offset $LN102
		dd offset $LN46
$LN109		dd offset $LN67		; DATA XREF: _DES_cfb_encrypt+564r
		dd offset $LN66		; jump table for switch	statement
		dd offset $LN65
		dd offset $LN64
		dd offset $LN63
		dd offset $LN62
		dd offset $LN61
		dd offset $LN60
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near ; CODE XREF: _DES_cfb_encrypt+1FFp
					; _DES_cfb_encrypt+454p
					; DATA XREF: ...
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_cfb_encrypt+F9p
					; _DES_cfb_encrypt+349p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _DES_cfb_encrypt+5F2p
		extrn __chkstk:near	; CODE XREF: _DES_cfb_encrypt+5p
		extrn ___security_cookie:near ;	DATA XREF: _DES_cfb_encrypt+Ar


		end
