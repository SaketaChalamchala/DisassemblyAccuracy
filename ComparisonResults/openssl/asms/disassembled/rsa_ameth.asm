;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2C6BE3F40E6DC386ED38507081DFC4F2
; Input	CRC32 :	0510A21E

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_ameth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pub_encode	proc near		; DATA XREF: .rdata:000005C8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		lea	eax, [esp+4+var_4]
		mov	[esp+4+var_4], 0
		push	eax
		mov	eax, [esp+8+arg_4]
		push	dword ptr [eax+14h]
		call	_i2d_RSAPublicKey
		add	esp, 8
		test	eax, eax
		jle	short loc_5E
		push	eax
		push	[esp+8+var_4]
		push	0
		push	5
		push	6
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+18h+arg_0]
		call	_X509_PUBKEY_set0_param
		add	esp, 18h
		test	eax, eax
		jz	short loc_53
		mov	eax, 1
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_53:					; CODE XREF: _rsa_pub_encode+4Aj
		push	[esp+4+var_4]
		call	_CRYPTO_free
		add	esp, 4

loc_5E:					; CODE XREF: _rsa_pub_encode+26j
		xor	eax, eax
		pop	ecx
		retn
_rsa_pub_encode	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pub_decode	proc near		; DATA XREF: .rdata:000005C4o

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	[esp+8+arg_4]
		lea	eax, [esp+0Ch+var_8]
		push	0
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		push	0
		call	_X509_PUBKEY_get0_param
		add	esp, 14h
		test	eax, eax
		jz	short loc_BA
		push	[esp+8+var_8]
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	0
		call	_d2i_RSAPublicKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_C0
		push	63h ; 'c'
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	4
		push	8Bh ; 'ã'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_BA:					; CODE XREF: _rsa_pub_decode+26j
		xor	eax, eax
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_C0:					; CODE XREF: _rsa_pub_decode+3Cj
		push	eax
		push	6
		push	[esp+10h+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		add	esp, 8
		retn
_rsa_pub_decode	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pub_cmp	proc near		; DATA XREF: .rdata:000005CCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	eax, [esi+14h]
		push	dword ptr [eax+10h]
		mov	eax, [edi+14h]
		push	dword ptr [eax+10h]
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_11A
		mov	eax, [esi+14h]
		push	dword ptr [eax+14h]
		mov	eax, [edi+14h]
		push	dword ptr [eax+14h]
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_11A
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_11A:				; CODE XREF: _rsa_pub_cmp+20j
					; _rsa_pub_cmp+38j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_rsa_pub_cmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_old_rsa_priv_decode proc near		; DATA XREF: .rdata:0000060Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	0
		call	_d2i_RSAPrivateKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_151
		push	77h ; 'w'
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	4
		push	93h ; 'ì'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_151:				; CODE XREF: _old_rsa_priv_decode+14j
		push	eax
		push	6
		push	[esp+8+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		retn
_old_rsa_priv_decode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_old_rsa_priv_encode proc near		; DATA XREF: .rdata:00000610o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+14h]
		call	_i2d_RSAPrivateKey
		add	esp, 8
		retn
_old_rsa_priv_encode endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_priv_encode proc near		; DATA XREF: .rdata:000005D8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		lea	eax, [esp+4+var_4]
		mov	[esp+4+var_4], 0
		push	eax
		mov	eax, [esp+8+arg_4]
		push	dword ptr [eax+14h]
		call	_i2d_RSAPrivateKey
		add	esp, 8
		test	eax, eax
		jg	short loc_1C3
		push	8Ah ; 'ä'

loc_1A9:				; CODE XREF: _rsa_priv_encode+72j
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	41h ; 'A'
		push	8Ah ; 'ä'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1C3:				; CODE XREF: _rsa_priv_encode+26j
		push	eax
		push	[esp+8+var_4]
		push	0
		push	5
		push	0
		push	6
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+1Ch+arg_0]
		call	_PKCS8_pkey_set0
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1F0
		push	90h ; 'ê'
		jmp	short loc_1A9
; ---------------------------------------------------------------------------

loc_1F0:				; CODE XREF: _rsa_priv_encode+6Bj
		mov	eax, 1
		pop	ecx
		retn
_rsa_priv_encode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_priv_decode proc near		; DATA XREF: .rdata:000005D4o

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	[esp+8+arg_4]
		lea	eax, [esp+0Ch+var_8]
		push	0
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		push	0
		call	_PKCS8_pkey_get0
		add	esp, 14h
		test	eax, eax
		jz	short loc_24E
		push	[esp+8+var_8]
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	0
		call	_d2i_RSAPrivateKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_254
		push	77h ; 'w'
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	4
		push	93h ; 'ì'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_24E:				; CODE XREF: _rsa_priv_decode+26j
		xor	eax, eax
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_254:				; CODE XREF: _rsa_priv_decode+3Cj
		push	eax
		push	6
		push	[esp+10h+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		add	esp, 8
		retn
_rsa_priv_decode endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_rsa_size	proc near		; DATA XREF: .rdata:000005E0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_RSA_size
		add	esp, 4
		retn
_int_rsa_size	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_bits	proc near		; DATA XREF: .rdata:000005E4o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		push	dword ptr [eax+10h]
		call	_BN_num_bits
		add	esp, 4
		retn
_rsa_bits	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_rsa_free	proc near		; DATA XREF: .rdata:00000604o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_RSA_free
		pop	ecx
		retn
_int_rsa_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pub_print	proc near		; DATA XREF: .rdata:000005D0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	0
		push	[esp+4+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+0Ch+arg_0]
		call	_do_rsa_print
		add	esp, 10h
		retn
_rsa_pub_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_priv_print	proc near		; DATA XREF: .rdata:000005DCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	1
		push	[esp+4+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+0Ch+arg_0]
		call	_do_rsa_print
		add	esp, 10h
		retn
_rsa_priv_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_sig_print	proc near		; DATA XREF: .rdata:00000600o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 390h
		jnz	short loc_357
		push	edi
		lea	eax, [esp+8+arg_4]
		push	eax
		push	esi
		call	_rsa_pss_decode
		push	[esp+10h+arg_C]
		mov	esi, [esp+14h+arg_4]
		mov	edi, eax
		push	esi
		push	edi
		push	[esp+1Ch+arg_0]
		call	_rsa_pss_param_print
		add	esp, 18h
		mov	[esp+8+arg_4], eax
		test	edi, edi
		jz	short loc_323
		push	edi
		call	_RSA_PSS_PARAMS_free
		add	esp, 4

loc_323:				; CODE XREF: _rsa_sig_print+40j
		pop	edi
		test	esi, esi
		jz	short loc_331
		push	esi
		call	_X509_ALGOR_free
		add	esp, 4

loc_331:				; CODE XREF: _rsa_sig_print+4Ej
		cmp	[esp+4+arg_4], 0
		jnz	short loc_33C

loc_338:				; CODE XREF: _rsa_sig_print+9Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_33C:				; CODE XREF: _rsa_sig_print+5Ej
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jz	short loc_374

loc_344:				; CODE XREF: _rsa_sig_print+85j
		push	[esp+4+arg_C]
		push	eax
		push	[esp+0Ch+arg_0]
		call	_X509_signature_dump
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_357:				; CODE XREF: _rsa_sig_print+14j
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jnz	short loc_344
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	[esp+8+arg_0]
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	short loc_338

loc_374:				; CODE XREF: _rsa_sig_print+6Aj
		mov	eax, 1
		pop	esi
		retn
_rsa_sig_print	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 37Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pkey_ctrl	proc near		; DATA XREF: .rdata:00000608o

var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_4]
		dec	eax
		mov	[esp+4+var_4], 0
		cmp	eax, 7		; switch 8 cases
		ja	$LN18		; jumptable 0000039B default case
		jmp	ds:$LN22[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _rsa_pkey_ctrl+1Fj
					; DATA XREF: .text$mn:$LN22o
		cmp	[esp+4+arg_8], 0 ; jumptable 0000039B case 0
		jnz	loc_462
		lea	eax, [esp+4+var_4]
		push	eax
		push	0
		push	0
		push	[esp+10h+arg_C]
		call	_PKCS7_SIGNER_INFO_get0_algs
		add	esp, 10h
		jmp	short loc_3DE
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _rsa_pkey_ctrl+1Fj
					; DATA XREF: .text$mn:$LN22o
		cmp	[esp+4+arg_8], 0 ; jumptable 0000039B case 1
		jnz	loc_462
		lea	eax, [esp+4+var_4]
		push	eax
		push	[esp+8+arg_C]
		call	_PKCS7_RECIP_INFO_get0_alg
		add	esp, 8

loc_3DE:				; CODE XREF: _rsa_pkey_ctrl+45j
		cmp	[esp+4+var_4], 0
		jz	short loc_462
		push	0
		push	5
		push	6
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+10h+var_4]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	eax, 1
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$LN8:					; CODE XREF: _rsa_pkey_ctrl+1Fj
					; DATA XREF: .text$mn:$LN22o
		mov	eax, [esp+4+arg_8] ; jumptable 0000039B	case 4
		test	eax, eax
		jnz	short loc_41C
		push	[esp+4+arg_C]
		call	_rsa_cms_sign
		add	esp, 4
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_41C:				; CODE XREF: _rsa_pkey_ctrl+90j
		cmp	eax, 1
		jnz	short loc_462
		push	[esp+4+arg_C]
		call	_rsa_cms_verify
		add	esp, 4
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _rsa_pkey_ctrl+1Fj
					; DATA XREF: .text$mn:$LN22o
		mov	eax, [esp+4+arg_8] ; jumptable 0000039B	case 6
		test	eax, eax
		jnz	short loc_445
		push	[esp+4+arg_C]
		call	_rsa_cms_encrypt
		add	esp, 4
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_445:				; CODE XREF: _rsa_pkey_ctrl+B9j
		cmp	eax, 1
		jnz	short loc_462
		push	[esp+4+arg_C]
		call	_rsa_cms_decrypt
		add	esp, 4
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _rsa_pkey_ctrl+1Fj
					; DATA XREF: .text$mn:$LN22o
		mov	eax, [esp+4+arg_C] ; jumptable 0000039B	case 7
		mov	dword ptr [eax], 0

loc_462:				; CODE XREF: _rsa_pkey_ctrl+2Bj
					; _rsa_pkey_ctrl+4Cj ...
		mov	eax, 1
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$LN17:					; CODE XREF: _rsa_pkey_ctrl+1Fj
					; DATA XREF: .text$mn:$LN22o
		mov	eax, [esp+4+arg_C] ; jumptable 0000039B	case 2
		mov	dword ptr [eax], 2A0h
		mov	eax, 1
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _rsa_pkey_ctrl+19j
					; _rsa_pkey_ctrl+1Fj
					; DATA XREF: ...
		mov	eax, 0FFFFFFFEh	; jumptable 0000039B default case
		pop	ecx
		retn
_rsa_pkey_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
$LN22		dd offset $LN4		; DATA XREF: _rsa_pkey_ctrl+1Fr
		dd offset $LN6		; jump table for switch	statement
		dd offset $LN17
		dd offset $LN18
		dd offset $LN8
		dd offset $LN18
		dd offset $LN12
		dd offset $LN16
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_item_verify proc near		; DATA XREF: .rdata:00000614o

arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_C]
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 390h
		jz	short loc_4DD
		push	2BAh
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	9Bh ; 'õ'
		push	9Ch ; 'ú'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4DD:				; CODE XREF: _rsa_item_verify+14j
		push	[esp+4+arg_14]
		push	esi
		push	0
		push	[esp+10h+arg_0]
		call	_rsa_pss_to_ctx
		add	esp, 10h
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		mov	edx, 2
		cmovg	ecx, edx
		mov	eax, ecx
		pop	esi
		retn
_rsa_item_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 504h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_item_sign	proc near		; DATA XREF: .rdata:00000618o

arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+10h]
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0
		push	1006h
		push	0FFFFFFFFh
		push	6
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_563
		mov	eax, [esp+4+arg_0]
		cmp	eax, 1
		jz	short loc_5A8
		cmp	eax, 6
		jnz	short loc_5A8
		push	esi
		call	_rsa_ctx_to_pss
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_563
		cmp	[esp+4+arg_10],	0
		jz	short loc_584
		push	esi
		call	_ASN1_STRING_dup
		add	esp, 4
		test	eax, eax
		jnz	short loc_567
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_563:				; CODE XREF: _rsa_item_sign+23j
					; _rsa_item_sign+40j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_567:				; CODE XREF: _rsa_item_sign+54j
		push	eax
		push	10h
		push	390h
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+10h+arg_10]
		call	_X509_ALGOR_set0
		add	esp, 10h

loc_584:				; CODE XREF: _rsa_item_sign+47j
		push	esi
		push	10h
		push	390h
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+10h+arg_C]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	eax, 3
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5A8:				; CODE XREF: _rsa_item_sign+2Cj
					; _rsa_item_sign+31j
		mov	eax, 2
		pop	esi
		retn
_rsa_item_sign	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 5B0h
		public _rsa_asn1_meths
_rsa_asn1_meths	dd 2 dup(6), 4
		dd offset ??_C@_03DICHAJGH@RSA?$AA@ ; `string'
		dd offset ??_C@_0BD@MHOEKPBI@OpenSSL?5RSA?5method?$AA@ ; "OpenSSL RSA method"
		dd offset _rsa_pub_decode
		dd offset _rsa_pub_encode
		dd offset _rsa_pub_cmp
		dd offset _rsa_pub_print
		dd offset _rsa_priv_decode
		dd offset _rsa_priv_encode
		dd offset _rsa_priv_print
		dd offset _int_rsa_size
		dd offset _rsa_bits
		align 20h
		dd offset _rsa_sig_print
		dd offset _int_rsa_free
		dd offset _rsa_pkey_ctrl
		dd offset _old_rsa_priv_decode
		dd offset _old_rsa_priv_encode
		dd offset _rsa_item_verify
		dd offset _rsa_item_sign
		dd 13h,	6, 1, 18h dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 688h
; COMDAT (pick any)
		public ??_C@_03DICHAJGH@RSA?$AA@
; `string'
??_C@_03DICHAJGH@RSA?$AA@ dd 415352h	; DATA XREF: .rdata:000005BCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68Ch
; COMDAT (pick any)
		public ??_C@_0BD@MHOEKPBI@OpenSSL?5RSA?5method?$AA@
; `string'
??_C@_0BD@MHOEKPBI@OpenSSL?5RSA?5method?$AA@ db	'OpenSSL RSA method',0
					; DATA XREF: .rdata:000005C0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_rsa_print	proc near		; CODE XREF: _rsa_pub_print+11p
					; _rsa_priv_print+11p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		xor	edi, edi
		mov	[esp+10h+var_4], 0
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6DC
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		test	eax, eax
		cmovnz	edi, eax

loc_6DC:				; CODE XREF: _do_rsa_print+20j
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_6FD
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_6FD:				; CODE XREF: _do_rsa_print+41j
		cmp	[esp+10h+arg_C], 0
		jz	loc_7CE
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_729
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_729:				; CODE XREF: _do_rsa_print+6Dj
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_74A
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_74A:				; CODE XREF: _do_rsa_print+8Ej
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_76B
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_76B:				; CODE XREF: _do_rsa_print+AFj
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_78C
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_78C:				; CODE XREF: _do_rsa_print+D0j
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_7AD
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_7AD:				; CODE XREF: _do_rsa_print+F1j
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_7CE
		push	eax
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	edi, eax
		cmovb	edi, eax

loc_7CE:				; CODE XREF: _do_rsa_print+62j
					; _do_rsa_print+112j
		push	0CCh ; 'Ã'
		lea	eax, [edi+0Ah]
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_80C
		push	0CEh ; 'Œ'
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	41h ; 'A'
		push	92h ; 'í'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_80C:				; CODE XREF: _do_rsa_print+148j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_820
		push	eax
		call	_BN_num_bits
		add	esp, 4
		mov	[esp+10h+var_4], eax

loc_820:				; CODE XREF: _do_rsa_print+171j
		mov	edi, [esp+10h+arg_0]
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		push	80h ; 'Ä'
		push	ebp
		push	edi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_97D
		cmp	[esp+14h+arg_C], 0
		jz	short loc_876
		cmp	dword ptr [esi+18h], 0
		jz	short loc_876
		push	[esp+14h+var_4]
		push	offset ??_C@_0BH@JHLDJION@Private?9Key?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ ; "Private-Key: (%d	bit)\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	loc_97D
		mov	eax, offset ??_C@_08OKDKAJKD@modulus?3?$AA@ ; "modulus:"
		mov	[esp+14h+arg_4], offset	??_C@_0BA@FAAMOFHC@publicExponent?3?$AA@ ; "publicExponent:"
		jmp	short loc_89D
; ---------------------------------------------------------------------------

loc_876:				; CODE XREF: _do_rsa_print+1A5j
					; _do_rsa_print+1ABj
		push	[esp+14h+var_4]
		push	offset ??_C@_0BG@HAJOCCOP@Public?9Key?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ ; "Public-Key: (%d bit)\n"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		test	eax, eax
		jle	loc_97D
		mov	eax, offset ??_C@_08GIMLILAA@Modulus?3?$AA@ ; "Modulus:"
		mov	[esp+14h+arg_4], offset	??_C@_09DALHJPOO@Exponent?3?$AA@ ; "Exponent:"

loc_89D:				; CODE XREF: _do_rsa_print+1D4j
		push	ebp
		push	ebx
		push	dword ptr [esi+10h]
		push	eax
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_97D
		push	ebp
		push	ebx
		push	dword ptr [esi+14h]
		push	[esp+20h+arg_4]
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_97D
		cmp	[esp+14h+arg_C], 0
		jz	loc_967
		push	ebp
		push	ebx
		push	dword ptr [esi+18h]
		push	offset ??_C@_0BB@NFOLHHHJ@privateExponent?3?$AA@ ; "privateExponent:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	loc_97D
		push	ebp
		push	ebx
		push	dword ptr [esi+1Ch]
		push	offset ??_C@_07PNLMLIF@prime1?3?$AA@ ; "prime1:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_97D
		push	ebp
		push	ebx
		push	dword ptr [esi+20h]
		push	offset ??_C@_07NJNHFNM@prime2?3?$AA@ ; "prime2:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_97D
		push	ebp
		push	ebx
		push	dword ptr [esi+24h]
		push	offset ??_C@_0L@OIOCMGKP@exponent1?3?$AA@ ; "exponent1:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_97D
		push	ebp
		push	ebx
		push	dword ptr [esi+28h]
		push	offset ??_C@_0L@OKKEHIPG@exponent2?3?$AA@ ; "exponent2:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_97D
		push	ebp
		push	ebx
		push	dword ptr [esi+2Ch]
		push	offset ??_C@_0N@GNAMJPHF@coefficient?3?$AA@ ; "coefficient:"
		push	edi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_97D

loc_967:				; CODE XREF: _do_rsa_print+233j
		push	ebx
		mov	esi, 1
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_97D:				; CODE XREF: _do_rsa_print+19Aj
					; _do_rsa_print+1C1j ...
		xor	esi, esi

$err$66:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
_do_rsa_print	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 990h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_algor_to_md proc near		; CODE XREF: _rsa_cms_decrypt+EDp
					; _rsa_pss_to_ctx+A1p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	_EVP_sha1
		push	esi
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 0Ch
		mov	esi, eax
		test	esi, esi
		jnz	short loc_9D7
		push	1F3h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	0A3h ; '£'
		push	9Dh ; 'ù'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_9D7:				; CODE XREF: _rsa_algor_to_md+27j
		mov	eax, esi
		pop	esi
		retn
_rsa_algor_to_md endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_cms_decrypt proc near		; CODE XREF: _rsa_pkey_ctrl+D2p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 14h
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		or	ebx, 0FFFFFFFFh
		push	edi
		push	esi
		mov	[esp+24h+var_10], 0
		call	_CMS_RecipientInfo_get0_pkey_ctx
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_A0E
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_A0E:				; CODE XREF: _rsa_cms_decrypt+29j
		lea	eax, [esp+20h+var_14]
		push	eax
		push	0
		push	0
		push	esi
		call	_CMS_RecipientInfo_ktri_get0_algs
		add	esp, 10h
		test	eax, eax
		jz	short loc_A68
		mov	eax, [esp+20h+var_14]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 6
		jnz	short loc_A43
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_A43:				; CODE XREF: _rsa_cms_decrypt+59j
		cmp	eax, 397h
		jz	short loc_A72
		push	328h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	0A4h ; '§'
		push	9Eh ; 'û'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_A68:				; CODE XREF: _rsa_cms_decrypt+46j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_A72:				; CODE XREF: _rsa_cms_decrypt+6Cj
		lea	eax, [esp+20h+var_C]
		push	eax
		push	[esp+24h+var_14]
		call	_rsa_oaep_decode
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_AAC
		push	32Fh
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	0A2h ; '¢'
		push	9Eh ; 'û'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$22
; ---------------------------------------------------------------------------

loc_AAC:				; CODE XREF: _rsa_cms_decrypt+ABj
		push	[esp+20h+var_C]
		push	dword ptr [esi+4]
		call	_rsa_mgf1_to_md
		add	esp, 8
		mov	[esp+20h+var_4], eax
		test	eax, eax
		jz	$err$22
		push	dword ptr [esi]
		call	_rsa_algor_to_md
		add	esp, 4
		mov	[esp+20h+var_8], eax
		test	eax, eax
		jz	$err$22
		push	ebp
		mov	ebp, [esi+8]
		test	ebp, ebp
		jz	short loc_B60
		push	dword ptr [ebp+0]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 3A7h
		jz	short loc_B1A
		push	33Dh
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	0A5h ; '•'
		push	9Eh ; 'û'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_BDE
; ---------------------------------------------------------------------------

loc_B1A:				; CODE XREF: _rsa_cms_decrypt+119j
		mov	eax, [ebp+4]
		cmp	dword ptr [eax], 4
		jz	short loc_B45
		push	341h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	0A1h ; '°'
		push	9Eh ; 'û'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_BDE
; ---------------------------------------------------------------------------

loc_B45:				; CODE XREF: _rsa_cms_decrypt+144j
		mov	eax, [eax+4]
		mov	ecx, [eax+8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+4]
		mov	[esp+24h+var_10], ecx
		mov	eax, [eax+4]
		mov	ebp, [eax]
		jmp	short loc_B62
; ---------------------------------------------------------------------------

loc_B60:				; CODE XREF: _rsa_cms_decrypt+107j
		xor	ebp, ebp

loc_B62:				; CODE XREF: _rsa_cms_decrypt+182j
		push	0
		push	4
		push	1001h
		push	0FFFFFFFFh
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_BDE
		push	[esp+24h+var_8]
		push	0
		push	1009h
		push	300h
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_BDE
		push	[esp+24h+var_4]
		push	0
		push	1005h
		push	3F8h
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_BDE
		push	[esp+24h+var_10]
		push	ebp
		push	100Ah
		push	300h
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		mov	ecx, 1
		test	eax, eax
		cmovg	ebx, ecx

loc_BDE:				; CODE XREF: _rsa_cms_decrypt+139j
					; _rsa_cms_decrypt+164j ...
		pop	ebp

$err$22:				; CODE XREF: _rsa_cms_decrypt+CBj
					; _rsa_cms_decrypt+E5j	...
		push	esi
		call	_RSA_OAEP_PARAMS_free
		mov	eax, [esp+24h+var_C]
		add	esp, 4
		test	eax, eax
		jz	short loc_BF9
		push	eax
		call	_X509_ALGOR_free
		add	esp, 4

loc_BF9:				; CODE XREF: _rsa_cms_decrypt+212j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 14h
		retn
_rsa_cms_decrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C04h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_cms_encrypt proc near		; CODE XREF: _rsa_pkey_ctrl+BFp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 18h
		call	__chkstk
		push	ebp
		push	esi
		mov	esi, [esp+20h+arg_0]
		push	edi
		push	esi
		mov	[esp+28h+var_18], 0
		call	_CMS_RecipientInfo_get0_pkey_ctx
		mov	edi, eax
		mov	[esp+28h+var_14], 1
		lea	eax, [esp+28h+var_10]
		xor	ebp, ebp
		push	eax
		push	ebp
		push	ebp
		push	esi
		call	_CMS_RecipientInfo_ktri_get0_algs
		add	esp, 14h
		test	edi, edi
		jz	short loc_C68
		lea	eax, [esp+24h+var_14]
		push	eax
		push	ebp
		push	1006h
		push	0FFFFFFFFh
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jg	short loc_C68

loc_C5F:				; CODE XREF: _rsa_cms_encrypt+97j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_C68:				; CODE XREF: _rsa_cms_encrypt+3Dj
					; _rsa_cms_encrypt+59j
		mov	eax, [esp+24h+var_14]
		cmp	eax, 1
		jnz	short loc_C98
		push	0
		push	5
		push	6
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+30h+var_10]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_C98:				; CODE XREF: _rsa_cms_encrypt+6Bj
		cmp	eax, 4
		jnz	short loc_C5F
		lea	eax, [esp+24h+var_C]
		push	eax
		push	0
		push	100Bh
		push	300h
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_DE6
		lea	eax, [esp+24h+var_8]
		push	eax
		push	0
		push	1008h
		push	3F8h
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_DE6
		push	ebx
		lea	eax, [esp+28h+var_4]
		push	eax
		push	0
		push	100Ch
		push	300h
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		js	loc_DE5
		call	_RSA_OAEP_PARAMS_new
		mov	esi, eax
		test	esi, esi
		jz	loc_DE5
		push	[esp+28h+var_C]
		push	esi
		call	_rsa_md_to_algor
		add	esp, 8
		test	eax, eax
		jz	$err$23
		push	[esp+28h+var_8]
		lea	eax, [esi+4]
		push	eax
		call	_rsa_md_to_mgf1
		add	esp, 8
		test	eax, eax
		jz	$err$23
		test	ebx, ebx
		jle	short loc_D9B
		call	_ASN1_OCTET_STRING_new
		mov	edi, eax
		call	_X509_ALGOR_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $err$23
		test	edi, edi
		jz	short $err$23
		push	ebx
		push	[esp+2Ch+var_4]
		push	edi
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		push	edi
		test	eax, eax
		jnz	short loc_D80
		call	_ASN1_OCTET_STRING_free
		add	esp, 4
		jmp	short $err$23
; ---------------------------------------------------------------------------

loc_D80:				; CODE XREF: _rsa_cms_encrypt+170j
		push	4
		push	3A7h
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	dword ptr [esi+8]
		call	_X509_ALGOR_set0
		add	esp, 10h

loc_D9B:				; CODE XREF: _rsa_cms_encrypt+146j
		lea	eax, [esp+28h+var_18]
		push	eax
		call	_RSA_OAEP_PARAMS_it
		push	eax
		push	esi
		call	_ASN1_item_pack
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$23
		push	[esp+28h+var_18]
		push	10h
		push	397h
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+34h+var_10]
		call	_X509_ALGOR_set0
		mov	[esp+38h+var_18], ebp
		add	esp, 10h
		mov	ebp, 1

$err$23:				; CODE XREF: _rsa_cms_encrypt+126j
					; _rsa_cms_encrypt+13Ej ...
		push	esi
		call	_RSA_OAEP_PARAMS_free
		add	esp, 4

loc_DE5:				; CODE XREF: _rsa_cms_encrypt+102j
					; _rsa_cms_encrypt+111j
		pop	ebx

loc_DE6:				; CODE XREF: _rsa_cms_encrypt+B7j
					; _rsa_cms_encrypt+DBj
		mov	ecx, [esp+24h+var_18]
		test	ecx, ecx
		jz	short loc_DF7
		push	ecx
		call	_ASN1_STRING_free
		add	esp, 4

loc_DF7:				; CODE XREF: _rsa_cms_encrypt+1E8j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		add	esp, 18h
		retn
_rsa_cms_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E00h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_cms_sign	proc near		; CODE XREF: _rsa_pkey_ctrl+96p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	edi
		push	[esp+0Ch+arg_0]
		mov	[esp+10h+var_8], 1
		call	_CMS_SignerInfo_get0_pkey_ctx
		mov	edi, eax
		lea	eax, [esp+10h+var_4]
		push	eax
		push	0
		push	0
		push	0
		push	[esp+20h+arg_0]
		call	_CMS_SignerInfo_get0_algs
		add	esp, 18h
		test	edi, edi
		jz	short loc_E5D
		lea	eax, [esp+0Ch+var_8]
		push	eax
		push	0
		push	1006h
		push	0FFFFFFFFh
		push	6
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jg	short loc_E5D

loc_E56:				; CODE XREF: _rsa_cms_sign+71j
					; _rsa_cms_sign+7Ej
		xor	eax, eax
		pop	edi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_E5D:				; CODE XREF: _rsa_cms_sign+37j
					; _rsa_cms_sign+54j
		mov	eax, [esp+0Ch+var_8]
		cmp	eax, 1
		jnz	short loc_E6E
		push	0
		push	5
		push	6
		jmp	short loc_E88
; ---------------------------------------------------------------------------

loc_E6E:				; CODE XREF: _rsa_cms_sign+64j
		cmp	eax, 6
		jnz	short loc_E56
		push	edi
		call	_rsa_ctx_to_pss
		add	esp, 4
		test	eax, eax
		jz	short loc_E56
		push	eax
		push	10h
		push	390h

loc_E88:				; CODE XREF: _rsa_cms_sign+6Cj
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+18h+var_4]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	eax, 1
		pop	edi
		add	esp, 8
		retn
_rsa_cms_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0EA8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_cms_verify	proc near		; CODE XREF: _rsa_pkey_ctrl+A9p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	edi
		push	[esp+0Ch+arg_0]
		call	_CMS_SignerInfo_get0_pkey_ctx
		mov	edi, eax
		lea	eax, [esp+10h+var_8]
		push	eax
		push	0
		push	0
		push	0
		push	[esp+20h+arg_0]
		call	_CMS_SignerInfo_get0_algs
		mov	ecx, [esp+24h+var_8]
		push	dword ptr [ecx]
		call	_OBJ_obj2nid
		add	esp, 1Ch
		cmp	eax, 6
		jnz	short loc_EEF

loc_EE5:				; CODE XREF: _rsa_cms_verify+7Dj
		mov	eax, 1
		pop	edi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_EEF:				; CODE XREF: _rsa_cms_verify+3Bj
		cmp	eax, 390h
		jnz	short loc_F0C
		push	0
		push	[esp+10h+var_8]
		push	edi
		push	0
		call	_rsa_pss_to_ctx
		add	esp, 10h
		pop	edi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_F0C:				; CODE XREF: _rsa_cms_verify+4Cj
		lea	ecx, [esp+0Ch+var_4]
		push	ecx
		push	0
		push	eax
		call	_OBJ_find_sigid_algs
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_F27
		cmp	[esp+0Ch+var_4], 6
		jz	short loc_EE5

loc_F27:				; CODE XREF: _rsa_cms_verify+76j
		xor	eax, eax
		pop	edi
		add	esp, 8
		retn
_rsa_cms_verify	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_ctx_to_pss	proc near		; CODE XREF: _rsa_item_sign+34p
					; _rsa_cms_sign+74p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		push	esi
		mov	[esp+20h+var_8], 0
		call	_EVP_PKEY_CTX_get0_pkey
		mov	ebx, eax
		xor	edi, edi
		lea	eax, [esp+20h+var_C]
		push	eax
		push	edi
		push	0Dh
		push	0F8h ; '¯'
		push	0FFFFFFFFh
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 1Ch
		test	eax, eax
		jle	loc_108E
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	edi
		push	1008h
		push	3F8h
		push	6
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_108E
		lea	eax, [esp+1Ch+var_10]
		push	eax
		push	edi
		push	1007h
		push	18h
		push	6
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jz	loc_108E
		mov	eax, [esp+1Ch+var_10]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_FD1
		push	[esp+1Ch+var_C]
		call	_EVP_MD_size
		add	esp, 4
		mov	[esp+1Ch+var_10], eax
		jmp	short loc_1004
; ---------------------------------------------------------------------------

loc_FD1:				; CODE XREF: _rsa_ctx_to_pss+8Dj
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_1004
		push	[esp+1Ch+var_C]
		call	_EVP_MD_size
		mov	esi, 0FFFFFFFEh
		push	ebx
		sub	esi, eax
		call	_EVP_PKEY_size
		add	eax, esi
		push	ebx
		mov	[esp+28h+var_10], eax
		call	_EVP_PKEY_bits
		dec	eax
		add	esp, 0Ch
		test	al, 7
		jnz	short loc_1004
		dec	[esp+1Ch+var_10]

loc_1004:				; CODE XREF: _rsa_ctx_to_pss+9Fj
					; _rsa_ctx_to_pss+A4j ...
		call	_RSA_PSS_PARAMS_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_108E
		cmp	[esp+1Ch+var_10], 14h
		jz	short loc_1033
		call	_ASN1_INTEGER_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $err$21
		push	[esp+1Ch+var_10]
		push	eax
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short $err$21

loc_1033:				; CODE XREF: _rsa_ctx_to_pss+E4j
		push	[esp+1Ch+var_C]
		push	esi
		call	_rsa_md_to_algor
		add	esp, 8
		test	eax, eax
		jz	short $err$21
		push	[esp+1Ch+var_4]
		lea	eax, [esi+4]
		push	eax
		call	_rsa_md_to_mgf1
		add	esp, 8
		test	eax, eax
		jz	short $err$21
		lea	eax, [esp+1Ch+var_8]
		push	eax
		call	_RSA_PSS_PARAMS_it
		push	eax
		push	esi
		call	_ASN1_item_pack
		add	esp, 0Ch
		mov	ecx, 1
		test	eax, eax
		cmovnz	edi, ecx

$err$21:				; CODE XREF: _rsa_ctx_to_pss+F0j
					; _rsa_ctx_to_pss+101j	...
		push	esi
		call	_RSA_PSS_PARAMS_free
		add	esp, 4
		test	edi, edi
		jz	short loc_108E
		mov	eax, [esp+1Ch+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_108E:				; CODE XREF: _rsa_ctx_to_pss+3Dj
					; _rsa_ctx_to_pss+60j ...
		mov	eax, [esp+1Ch+var_8]
		test	eax, eax
		jz	short loc_109F
		push	eax
		call	_ASN1_STRING_free
		add	esp, 4

loc_109F:				; CODE XREF: _rsa_ctx_to_pss+164j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
_rsa_ctx_to_pss	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_md_to_algor proc near		; CODE XREF: _rsa_cms_encrypt+11Cp
					; _rsa_ctx_to_pss+108p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 40h ; '@'
		jz	short loc_10D6
		call	_X509_ALGOR_new
		mov	ecx, [esp+arg_0]
		mov	[ecx], eax
		test	eax, eax
		jnz	short loc_10C9
		retn
; ---------------------------------------------------------------------------

loc_10C9:				; CODE XREF: _rsa_md_to_algor+1Ej
		push	[esp+arg_4]
		push	eax
		call	_X509_ALGOR_set_md
		add	esp, 8

loc_10D6:				; CODE XREF: _rsa_md_to_algor+Fj
		mov	eax, 1
		retn
_rsa_md_to_algor endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_md_to_mgf1	proc near		; CODE XREF: _rsa_cms_encrypt+134p
					; _rsa_ctx_to_pss+11Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		xor	esi, esi
		push	ebx
		mov	[esp+14h+var_4], esi
		mov	[edi], esi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 40h ; '@'
		jnz	short loc_110F
		pop	edi
		lea	eax, [esi+1]
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_110F:				; CODE XREF: _rsa_md_to_mgf1+29j
		push	ebx
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 40h ; '@'
		jz	short loc_1132
		call	_X509_ALGOR_new
		mov	esi, eax
		test	esi, esi
		jz	short $err$16
		push	ebx
		push	esi
		call	_X509_ALGOR_set_md
		add	esp, 8

loc_1132:				; CODE XREF: _rsa_md_to_mgf1+3Fj
		lea	eax, [esp+10h+var_4]
		push	eax
		call	_X509_ALGOR_it
		push	eax
		push	esi
		call	_ASN1_item_pack
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$16
		call	_X509_ALGOR_new
		mov	[edi], eax
		test	eax, eax
		jz	short $err$16
		push	[esp+10h+var_4]
		push	10h
		push	38Fh
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	dword ptr [edi]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	[esp+10h+var_4], 0
		jmp	short loc_118E
; ---------------------------------------------------------------------------

$err$16:				; CODE XREF: _rsa_md_to_mgf1+4Aj
					; _rsa_md_to_mgf1+6Cj ...
		mov	eax, [esp+10h+var_4]
		test	eax, eax
		jz	short loc_118E
		push	eax
		call	_ASN1_STRING_free
		add	esp, 4

loc_118E:				; CODE XREF: _rsa_md_to_mgf1+9Fj
					; _rsa_md_to_mgf1+A7j
		test	esi, esi
		jz	short loc_119B
		push	esi
		call	_X509_ALGOR_free
		add	esp, 4

loc_119B:				; CODE XREF: _rsa_md_to_mgf1+B4j
		xor	eax, eax
		cmp	[edi], eax
		pop	edi
		pop	esi
		setnz	al
		pop	ebx
		pop	ecx
		retn
_rsa_md_to_mgf1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_mgf1_decode proc near		; CODE XREF: _rsa_oaep_decode+46p
					; _rsa_pss_decode+46p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_11F0
		cmp	dword ptr [esi+4], 0
		jz	short loc_11F0
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 38Fh
		jnz	short loc_11F0
		mov	ecx, [esi+4]
		cmp	dword ptr [ecx], 10h
		jnz	short loc_11F0
		mov	eax, [ecx+4]
		mov	eax, [eax+8]
		mov	[esp+4+arg_0], eax
		mov	eax, [ecx+4]
		push	dword ptr [eax]
		lea	eax, [esp+8+arg_0]
		push	eax
		push	0
		call	_d2i_X509_ALGOR
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_11F0:				; CODE XREF: _rsa_mgf1_decode+7j
					; _rsa_mgf1_decode+Dj ...
		xor	eax, eax
		pop	esi
		retn
_rsa_mgf1_decode endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_mgf1_to_md	proc near		; CODE XREF: _rsa_cms_decrypt+D7p
					; _rsa_pss_to_ctx+8Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	_EVP_sha1
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 38Fh
		jz	short loc_1232
		push	1FFh
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	99h ; 'ô'
		push	9Fh ; 'ü'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1232:				; CODE XREF: _rsa_mgf1_to_md+1Bj
		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_125B
		push	203h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	9Ah ; 'ö'
		push	9Fh ; 'ü'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_125B:				; CODE XREF: _rsa_mgf1_to_md+44j
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 0Ch
		test	eax, eax
		jnz	short locret_1295
		push	208h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	97h ; 'ó'
		push	9Fh ; 'ü'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax

locret_1295:				; CODE XREF: _rsa_mgf1_to_md+7Fj
		retn
_rsa_mgf1_to_md	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1298h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_oaep_decode proc near		; CODE XREF: _rsa_cms_decrypt+9Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	dword ptr [esi], 0
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_12ED
		cmp	dword ptr [ecx], 10h
		jnz	short loc_12ED
		mov	eax, [ecx+4]
		push	edi
		mov	eax, [eax+8]
		mov	[esp+8+arg_4], eax
		mov	eax, [ecx+4]
		push	dword ptr [eax]
		lea	eax, [esp+0Ch+arg_4]
		push	eax
		push	0
		call	_d2i_RSA_OAEP_PARAMS
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_12DB
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_12DB:				; CODE XREF: _rsa_oaep_decode+3Ej
		push	dword ptr [edi+4]
		call	_rsa_mgf1_decode
		add	esp, 4
		mov	[esi], eax
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_12ED:				; CODE XREF: _rsa_oaep_decode+14j
					; _rsa_oaep_decode+19j
		xor	eax, eax
		pop	esi
		retn
_rsa_oaep_decode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pss_decode	proc near		; CODE XREF: _rsa_sig_print+1Dp
					; _rsa_pss_to_ctx+52p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	dword ptr [esi], 0
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_1349
		cmp	dword ptr [ecx], 10h
		jnz	short loc_1349
		mov	eax, [ecx+4]
		push	edi
		mov	eax, [eax+8]
		mov	[esp+8+arg_4], eax
		mov	eax, [ecx+4]
		push	dword ptr [eax]
		lea	eax, [esp+0Ch+arg_4]
		push	eax
		push	0
		call	_d2i_RSA_PSS_PARAMS
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1337
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1337:				; CODE XREF: _rsa_pss_decode+3Ej
		push	dword ptr [edi+4]
		call	_rsa_mgf1_decode
		add	esp, 4
		mov	[esi], eax
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1349:				; CODE XREF: _rsa_pss_decode+14j
					; _rsa_pss_decode+19j
		xor	eax, eax
		pop	esi
		retn
_rsa_pss_decode	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pss_param_print proc near		; CODE XREF: _rsa_sig_print+32p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	ebp, ebp
		test	edi, edi
		jnz	short loc_1379
		push	offset ??_C@_0BL@KMBKPBGM@?5?$CIINVALID?5PSS?5PARAMETERS?$CJ?6?$AA@ ; "	(INVALID PSS PARAMETERS)\n"
		push	[esp+0Ch+arg_0]
		call	_BIO_puts
		add	esp, 8
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		mov	eax, ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1379:				; CODE XREF: _rsa_pss_param_print+Aj
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	$err$47
		push	ebx
		mov	ebx, [esp+10h+arg_C]
		push	80h ; 'Ä'
		push	ebx
		push	esi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_154D
		push	offset ??_C@_0BB@PMMDHLKH@Hash?5Algorithm?3?5?$AA@ ; "Hash Algorithm: "
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_13D6
		push	dword ptr [eax]
		push	esi
		call	_i2a_ASN1_OBJECT
		jmp	short loc_13E1
; ---------------------------------------------------------------------------

loc_13D6:				; CODE XREF: _rsa_pss_param_print+7Aj
		push	offset ??_C@_0P@ODEAMLKF@sha1?5?$CIdefault?$CJ?$AA@ ; "sha1 (default)"
		push	esi
		call	_BIO_puts

loc_13E1:				; CODE XREF: _rsa_pss_param_print+84j
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		push	80h ; 'Ä'
		push	ebx
		push	esi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_154D
		push	offset ??_C@_0BB@HEAMLCPA@Mask?5Algorithm?3?5?$AA@ ; "Mask Algorithm: "
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_1478
		push	dword ptr [eax]
		push	esi
		call	_i2a_ASN1_OBJECT
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		push	offset ??_C@_06BIDGLIKJ@?5with?5?$AA@ ;	" with "
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jz	short loc_1471
		push	dword ptr [eax]
		push	esi
		call	_i2a_ASN1_OBJECT
		jmp	short loc_1483
; ---------------------------------------------------------------------------

loc_1471:				; CODE XREF: _rsa_pss_param_print+115j
		push	offset ??_C@_07DNODLGKM@INVALID?$AA@ ; "INVALID"
		jmp	short loc_147D
; ---------------------------------------------------------------------------

loc_1478:				; CODE XREF: _rsa_pss_param_print+E4j
		push	offset ??_C@_0BJ@NNFOENLD@mgf1?5with?5sha1?5?$CIdefault?$CJ?$AA@ ; "mgf1 with sha1 (default)"

loc_147D:				; CODE XREF: _rsa_pss_param_print+126j
		push	esi
		call	_BIO_puts

loc_1483:				; CODE XREF: _rsa_pss_param_print+11Fj
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		push	80h ; 'Ä'
		push	ebx
		push	esi
		call	_BIO_indent
		add	esp, 14h
		test	eax, eax
		jz	loc_154D
		push	offset ??_C@_0BA@BMPJFCCJ@Salt?5Length?3?50x?$AA@ ; "Salt Length: 0x"
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	loc_154D
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_14D6
		push	eax
		push	esi
		call	_i2a_ASN1_INTEGER
		jmp	short loc_14E1
; ---------------------------------------------------------------------------

loc_14D6:				; CODE XREF: _rsa_pss_param_print+17Bj
		push	offset ??_C@_0N@CGLOPGL@14?5?$CIdefault?$CJ?$AA@ ; "14 (default)"
		push	esi
		call	_BIO_puts

loc_14E1:				; CODE XREF: _rsa_pss_param_print+184j
		add	esp, 8
		test	eax, eax
		jle	short loc_154D
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		push	80h ; 'Ä'
		push	ebx
		push	esi
		call	_BIO_indent
		add	esp, 14h
		test	eax, eax
		jz	short loc_154D
		push	offset ??_C@_0BC@EDKEKAHK@Trailer?5Field?3?50x?$AA@ ; "Trailer Field: 0x"
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	short loc_154D
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1528
		push	eax
		push	esi
		call	_i2a_ASN1_INTEGER
		jmp	short loc_1533
; ---------------------------------------------------------------------------

loc_1528:				; CODE XREF: _rsa_pss_param_print+1CDj
		push	offset ??_C@_0N@FFIHJHFK@BC?5?$CIdefault?$CJ?$AA@ ; "BC	(default)"
		push	esi
		call	_BIO_puts

loc_1533:				; CODE XREF: _rsa_pss_param_print+1D6j
		add	esp, 8
		test	eax, eax
		jle	short loc_154D
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8
		mov	ebp, 1

loc_154D:				; CODE XREF: _rsa_pss_param_print+5Aj
					; _rsa_pss_param_print+70j ...
		pop	ebx

$err$47:				; CODE XREF: _rsa_pss_param_print+3Ej
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		retn
_rsa_pss_param_print endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1554h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_pss_to_ctx	proc near		; CODE XREF: _rsa_item_verify+44p
					; _rsa_cms_verify+57p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+14h+arg_8]
		or	ebx, 0FFFFFFFFh
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 390h
		jz	short loc_159E
		push	253h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	9Bh ; 'õ'
		push	0A2h ; '¢'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, ebx
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_159E:				; CODE XREF: _rsa_pss_to_ctx+22j
		push	ebp
		push	edi
		lea	eax, [esp+1Ch+arg_8]
		push	eax
		push	esi
		call	_rsa_pss_decode
		mov	ebp, [esp+24h+arg_8]
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_15DB
		push	25Ah
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	95h ; 'ï'
		push	0A2h ; '¢'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$21_0
; ---------------------------------------------------------------------------

loc_15DB:				; CODE XREF: _rsa_pss_to_ctx+62j
		push	ebp
		push	dword ptr [edi+4]
		call	_rsa_mgf1_to_md
		add	esp, 8
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	$err$21_0
		push	dword ptr [edi]
		call	_rsa_algor_to_md
		mov	esi, eax
		add	esp, 4
		mov	[esp+1Ch+var_8], esi
		test	esi, esi
		jz	$err$21_0
		mov	ecx, [edi+8]
		test	ecx, ecx
		jz	short loc_1648
		push	ecx
		call	_ASN1_INTEGER_get
		mov	ecx, eax
		add	esp, 4
		mov	[esp+1Ch+arg_8], ecx
		test	ecx, ecx
		jns	short loc_1650
		push	26Ch
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	96h ; 'ñ'
		push	0A2h ; '¢'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$21_0
; ---------------------------------------------------------------------------

loc_1648:				; CODE XREF: _rsa_pss_to_ctx+BCj
		mov	[esp+1Ch+arg_8], 14h

loc_1650:				; CODE XREF: _rsa_pss_to_ctx+CFj
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1688
		push	eax
		call	_ASN1_INTEGER_get
		add	esp, 4
		cmp	eax, 1
		jz	short loc_1688
		push	277h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	8Bh ; 'ã'
		push	0A2h ; '¢'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$21_0
; ---------------------------------------------------------------------------

loc_1688:				; CODE XREF: _rsa_pss_to_ctx+101j
					; _rsa_pss_to_ctx+10Fj
		mov	eax, [esp+1Ch+arg_C]
		test	eax, eax
		jz	loc_1731
		push	eax
		push	0
		push	esi
		lea	eax, [esp+28h+arg_4]
		push	eax
		push	[esp+2Ch+arg_0]
		call	_EVP_DigestVerifyInit
		add	esp, 14h
		test	eax, eax
		jz	short $err$21_0

loc_16AD:				; CODE XREF: _rsa_pss_to_ctx+216j
		push	0
		push	6
		push	1001h
		push	0FFFFFFFFh
		push	6
		push	[esp+30h+arg_4]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short $err$21_0
		push	0
		push	[esp+20h+arg_8]
		push	1002h
		push	18h
		push	6
		push	[esp+30h+arg_4]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short $err$21_0
		push	[esp+1Ch+var_4]
		push	0
		push	1005h
		push	3F8h
		push	6
		push	[esp+30h+arg_4]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		mov	ecx, 1
		test	eax, eax
		cmovg	ebx, ecx

$err$21_0:				; CODE XREF: _rsa_pss_to_ctx+82j
					; _rsa_pss_to_ctx+99j ...
		push	edi
		call	_RSA_PSS_PARAMS_free
		add	esp, 4
		test	ebp, ebp
		jz	short loc_1727
		push	ebp
		call	_X509_ALGOR_free
		add	esp, 4

loc_1727:				; CODE XREF: _rsa_pss_to_ctx+1C8j
		pop	edi
		pop	ebp
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1731:				; CODE XREF: _rsa_pss_to_ctx+13Aj
		lea	eax, [esp+1Ch+var_C]
		push	eax
		push	0
		push	0Dh
		push	0F8h ; '¯'
		push	0FFFFFFFFh
		push	[esp+30h+arg_4]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short $err$21_0
		push	[esp+1Ch+var_C]
		call	_EVP_MD_type
		push	[esp+20h+var_8]
		mov	esi, eax
		call	_EVP_MD_type
		add	esp, 8
		cmp	eax, esi
		jz	loc_16AD
		push	285h
		push	offset ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_ameth.c"
		push	0A6h ; '¶'
		push	0A2h ; '¢'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$21_0
_rsa_pss_to_ctx	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1790h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_update_buflen	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_17B7
		push	eax
		call	_BN_num_bits
		mov	ecx, [esp+4+arg_4]
		add	eax, 7
		cdq
		add	esp, 4
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	[ecx], eax
		jnb	short locret_17B7
		mov	[ecx], eax

locret_17B7:				; CODE XREF: _update_buflen+6j
					; _update_buflen+23j
		retn
_update_buflen	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17B8h
; COMDAT (pick any)
		public ??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@
; `string'
??_C@_0BJ@GEFEFDCL@?4?2crypto?2rsa?2rsa_ameth?4c?$AA@ db '.\crypto\rsa\rsa_ameth.c',0
					; DATA XREF: _rsa_pub_decode+40o
					; _old_rsa_priv_decode+18o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17D4h
; COMDAT (pick any)
		public ??_C@_0BH@JHLDJION@Private?9Key?3?5?$CI?$CFd?5bit?$CJ?6?$AA@
; `string'
??_C@_0BH@JHLDJION@Private?9Key?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ db	'Private-Key: (%d bit)',0Ah,0
					; DATA XREF: _do_rsa_print+1B1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17ECh
; COMDAT (pick any)
		public ??_C@_08OKDKAJKD@modulus?3?$AA@
; `string'
??_C@_08OKDKAJKD@modulus?3?$AA@	db 'modulus:',0 ; DATA XREF: _do_rsa_print+1C7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17F8h
; COMDAT (pick any)
		public ??_C@_0BA@FAAMOFHC@publicExponent?3?$AA@
; `string'
??_C@_0BA@FAAMOFHC@publicExponent?3?$AA@ db 'publicExponent:',0
					; DATA XREF: _do_rsa_print+1CCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1808h
; COMDAT (pick any)
		public ??_C@_0BG@HAJOCCOP@Public?9Key?3?5?$CI?$CFd?5bit?$CJ?6?$AA@
; `string'
??_C@_0BG@HAJOCCOP@Public?9Key?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ db 'Public-Key: (%d bit)',0Ah,0
					; DATA XREF: _do_rsa_print+1DAo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1820h
; COMDAT (pick any)
		public ??_C@_08GIMLILAA@Modulus?3?$AA@
; `string'
??_C@_08GIMLILAA@Modulus?3?$AA@	db 'Modulus:',0 ; DATA XREF: _do_rsa_print+1F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 182Ch
; COMDAT (pick any)
		public ??_C@_09DALHJPOO@Exponent?3?$AA@
; `string'
??_C@_09DALHJPOO@Exponent?3?$AA@ db 'Exponent:',0 ; DATA XREF: _do_rsa_print+1F5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1838h
; COMDAT (pick any)
		public ??_C@_0BB@NFOLHHHJ@privateExponent?3?$AA@
; `string'
??_C@_0BB@NFOLHHHJ@privateExponent?3?$AA@ db 'privateExponent:',0
					; DATA XREF: _do_rsa_print+23Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 184Ch
; COMDAT (pick any)
		public ??_C@_07PNLMLIF@prime1?3?$AA@
; `string'
??_C@_07PNLMLIF@prime1?3?$AA@ db 'prime1:',0 ; DATA XREF: _do_rsa_print+259o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1854h
; COMDAT (pick any)
		public ??_C@_07NJNHFNM@prime2?3?$AA@
; `string'
??_C@_07NJNHFNM@prime2?3?$AA@ db 'prime2:',0 ; DATA XREF: _do_rsa_print+270o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 185Ch
; COMDAT (pick any)
		public ??_C@_0L@OIOCMGKP@exponent1?3?$AA@
; `string'
??_C@_0L@OIOCMGKP@exponent1?3?$AA@ db 'exponent1:',0 ; DATA XREF: _do_rsa_print+287o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1868h
; COMDAT (pick any)
		public ??_C@_0L@OKKEHIPG@exponent2?3?$AA@
; `string'
??_C@_0L@OKKEHIPG@exponent2?3?$AA@ db 'exponent2:',0 ; DATA XREF: _do_rsa_print+29Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1874h
; COMDAT (pick any)
		public ??_C@_0N@GNAMJPHF@coefficient?3?$AA@
; `string'
??_C@_0N@GNAMJPHF@coefficient?3?$AA@ db	'coefficient:',0 ; DATA XREF: _do_rsa_print+2B5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1884h
; COMDAT (pick any)
		public ??_C@_0BL@KMBKPBGM@?5?$CIINVALID?5PSS?5PARAMETERS?$CJ?6?$AA@
; `string'
??_C@_0BL@KMBKPBGM@?5?$CIINVALID?5PSS?5PARAMETERS?$CJ?6?$AA@ db	' (INVALID PSS PARAMETERS)',0Ah,0
					; DATA XREF: _rsa_pss_param_print+Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18A0h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _rsa_sig_print+87o
					; _rsa_pss_param_print+2Eo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18A4h
; COMDAT (pick any)
		public ??_C@_0BB@PMMDHLKH@Hash?5Algorithm?3?5?$AA@
; `string'
??_C@_0BB@PMMDHLKH@Hash?5Algorithm?3?5?$AA@ db 'Hash Algorithm: ',0
					; DATA XREF: _rsa_pss_param_print+60o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18B8h
; COMDAT (pick any)
		public ??_C@_0P@ODEAMLKF@sha1?5?$CIdefault?$CJ?$AA@
; `string'
??_C@_0P@ODEAMLKF@sha1?5?$CIdefault?$CJ?$AA@ db	'sha1 (default)',0
					; DATA XREF: _rsa_pss_param_print:loc_13D6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18C8h
; COMDAT (pick any)
		public ??_C@_0BB@HEAMLCPA@Mask?5Algorithm?3?5?$AA@
; `string'
??_C@_0BB@HEAMLCPA@Mask?5Algorithm?3?5?$AA@ db 'Mask Algorithm: ',0
					; DATA XREF: _rsa_pss_param_print+C9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18DCh
; COMDAT (pick any)
		public ??_C@_06BIDGLIKJ@?5with?5?$AA@
; `string'
??_C@_06BIDGLIKJ@?5with?5?$AA@ db ' with ',0 ; DATA XREF: _rsa_pss_param_print+F9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18E4h
; COMDAT (pick any)
		public ??_C@_07DNODLGKM@INVALID?$AA@
; `string'
??_C@_07DNODLGKM@INVALID?$AA@ db 'INVALID',0 ; DATA XREF: _rsa_pss_param_print:loc_1471o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18ECh
; COMDAT (pick any)
		public ??_C@_0BJ@NNFOENLD@mgf1?5with?5sha1?5?$CIdefault?$CJ?$AA@
; `string'
??_C@_0BJ@NNFOENLD@mgf1?5with?5sha1?5?$CIdefault?$CJ?$AA@ db 'mgf1 with sha1 (default)',0
					; DATA XREF: _rsa_pss_param_print:loc_1478o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1908h
; COMDAT (pick any)
		public ??_C@_0BA@BMPJFCCJ@Salt?5Length?3?50x?$AA@
; `string'
??_C@_0BA@BMPJFCCJ@Salt?5Length?3?50x?$AA@ db 'Salt Length: 0x',0
					; DATA XREF: _rsa_pss_param_print+160o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1918h
; COMDAT (pick any)
		public ??_C@_0N@CGLOPGL@14?5?$CIdefault?$CJ?$AA@
; `string'
??_C@_0N@CGLOPGL@14?5?$CIdefault?$CJ?$AA@ db '14 (default)',0
					; DATA XREF: _rsa_pss_param_print:loc_14D6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1928h
; COMDAT (pick any)
		public ??_C@_0BC@EDKEKAHK@Trailer?5Field?3?50x?$AA@
; `string'
??_C@_0BC@EDKEKAHK@Trailer?5Field?3?50x?$AA@ db	'Trailer Field: 0x',0
					; DATA XREF: _rsa_pss_param_print+1B6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 193Ch
; COMDAT (pick any)
		public ??_C@_0N@FFIHJHFK@BC?5?$CIdefault?$CJ?$AA@
; `string'
??_C@_0N@FFIHJHFK@BC?5?$CIdefault?$CJ?$AA@ db 'BC (default)',0
					; DATA XREF: _rsa_pss_param_print:loc_1528o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _do_rsa_print+13Cp
		extrn _CRYPTO_free:near	; CODE XREF: _rsa_pub_encode+56p
					; _do_rsa_print+2CDp ...
		extrn _BIO_puts:near	; CODE XREF: _rsa_sig_print+90p
					; _rsa_pss_param_print+15p ...
		extrn _BIO_indent:near	; CODE XREF: _do_rsa_print+190p
					; _rsa_pss_param_print+50p ...
		extrn _BIO_printf:near	; CODE XREF: _do_rsa_print+1B7p
					; _do_rsa_print+1E0p
		extrn _ERR_put_error:near ; CODE XREF: _rsa_pub_decode+4Ep
					; _old_rsa_priv_decode+26p ...
		extrn _BN_num_bits:near	; CODE XREF: _rsa_bits+Ap
					; _do_rsa_print+23p ...
		extrn _BN_cmp:near	; CODE XREF: _rsa_pub_cmp+16p
					; _rsa_pub_cmp+2Ep
		extrn _ASN1_STRING_free:near ; CODE XREF: _rsa_item_sign+57p
					; _rsa_cms_encrypt+1EBp ...
		extrn _ASN1_STRING_dup:near ; CODE XREF: _rsa_item_sign+4Ap
		extrn _ASN1_INTEGER_new:near ; CODE XREF: _rsa_ctx_to_pss+E6p
		extrn _ASN1_OCTET_STRING_new:near ; CODE XREF: _rsa_cms_encrypt+148p
		extrn _ASN1_OCTET_STRING_free:near ; CODE XREF:	_rsa_cms_encrypt+172p
		extrn _ASN1_OCTET_STRING_set:near ; CODE XREF: _rsa_cms_encrypt+165p
		extrn _i2a_ASN1_INTEGER:near ; CODE XREF: _rsa_pss_param_print+17Fp
					; _rsa_pss_param_print+1D1p
		extrn _i2a_ASN1_OBJECT:near ; CODE XREF: _rsa_pss_param_print+7Fp
					; _rsa_pss_param_print+E9p ...
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _rsa_ctx_to_pss+F7p
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _rsa_pss_to_ctx+BFp
					; _rsa_pss_to_ctx+104p
		extrn _ASN1_bn_print:near ; CODE XREF: _do_rsa_print+204p
					; _do_rsa_print+21Ep ...
		extrn _ASN1_item_pack:near ; CODE XREF:	_rsa_cms_encrypt+1A3p
					; _rsa_ctx_to_pss+134p	...
		extrn _OBJ_nid2obj:near	; CODE XREF: _rsa_pub_encode+33p
					; _rsa_priv_encode+54p	...
		extrn _OBJ_nid2sn:near	; CODE XREF: _rsa_algor_to_md+15p
					; _rsa_mgf1_to_md+6Fp
		extrn _OBJ_obj2nid:near	; CODE XREF: _rsa_sig_print+7p
					; _rsa_item_verify+7p ...
		extrn _OBJ_find_sigid_algs:near	; CODE XREF: _rsa_cms_verify+6Cp
		extrn _EVP_MD_type:near	; CODE XREF: _rsa_md_to_algor+4p
					; _rsa_md_to_mgf1+1Ep ...
		extrn _EVP_MD_size:near	; CODE XREF: _rsa_ctx_to_pss+93p
					; _rsa_ctx_to_pss+AAp
		extrn _EVP_DigestVerifyInit:near ; CODE	XREF: _rsa_pss_to_ctx+14Dp
		extrn _EVP_sha1:near	; CODE XREF: _rsa_algor_to_md+6j
					; _rsa_mgf1_to_md+6j
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _rsa_algor_to_md+1Bp
					; _rsa_mgf1_to_md+75p
		extrn _EVP_PKEY_bits:near ; CODE XREF: _rsa_ctx_to_pss+C3p
		extrn _EVP_PKEY_size:near ; CODE XREF: _rsa_ctx_to_pss+B7p
		extrn _EVP_PKEY_assign:near ; CODE XREF: _rsa_pub_decode+63p
					; _old_rsa_priv_decode+38p ...
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _rsa_item_sign+19p
					; _rsa_cms_decrypt+194p ...
		extrn _EVP_PKEY_CTX_get0_pkey:near ; CODE XREF:	_rsa_ctx_to_pss+1Ap
		extrn _RSA_size:near	; CODE XREF: _int_rsa_size+7p
		extrn _RSA_free:near	; CODE XREF: _int_rsa_free+7p
		extrn _d2i_RSAPublicKey:near ; CODE XREF: _rsa_pub_decode+32p
		extrn _i2d_RSAPublicKey:near ; CODE XREF: _rsa_pub_encode+1Cp
		extrn _d2i_RSAPrivateKey:near ;	CODE XREF: _old_rsa_priv_decode+Ap
					; _rsa_priv_decode+32p
		extrn _i2d_RSAPrivateKey:near ;	CODE XREF: _old_rsa_priv_encode+Bp
					; _rsa_priv_encode+1Cp
		extrn _RSA_PSS_PARAMS_new:near ; CODE XREF: _rsa_ctx_to_pss:loc_1004p
		extrn _RSA_PSS_PARAMS_free:near	; CODE XREF: _rsa_sig_print+43p
					; _rsa_ctx_to_pss+147p	...
		extrn _d2i_RSA_PSS_PARAMS:near ; CODE XREF: _rsa_pss_decode+32p
		extrn _RSA_PSS_PARAMS_it:near ;	CODE XREF: _rsa_ctx_to_pss+12Dp
		extrn _RSA_OAEP_PARAMS_new:near	; CODE XREF: _rsa_cms_encrypt+108p
		extrn _RSA_OAEP_PARAMS_free:near ; CODE	XREF: _rsa_cms_decrypt+204p
					; _rsa_cms_encrypt+1D9p
		extrn _d2i_RSA_OAEP_PARAMS:near	; CODE XREF: _rsa_oaep_decode+32p
		extrn _RSA_OAEP_PARAMS_it:near ; CODE XREF: _rsa_cms_encrypt+19Cp
		extrn _PKCS7_SIGNER_INFO_get0_algs:near	; CODE XREF: _rsa_pkey_ctrl+3Dp
		extrn _PKCS7_RECIP_INFO_get0_alg:near ;	CODE XREF: _rsa_pkey_ctrl+5Ap
		extrn _X509_signature_dump:near	; CODE XREF: _rsa_sig_print+75p
		extrn _X509_ALGOR_set0:near ; CODE XREF: _rsa_pkey_ctrl+7Bp
					; _rsa_item_sign+78p ...
		extrn _X509_ALGOR_set_md:near ;	CODE XREF: _rsa_md_to_algor+26p
					; _rsa_md_to_mgf1+4Ep
		extrn _X509_ALGOR_new:near ; CODE XREF:	_rsa_cms_encrypt+14Fp
					; _rsa_md_to_algor+11p	...
		extrn _X509_ALGOR_free:near ; CODE XREF: _rsa_sig_print+51p
					; _rsa_cms_decrypt+215p ...
		extrn _d2i_X509_ALGOR:near ; CODE XREF:	_rsa_mgf1_decode+3Ep
		extrn _X509_ALGOR_it:near ; CODE XREF: _rsa_md_to_mgf1+5Bp
		extrn _PKCS8_pkey_set0:near ; CODE XREF: _rsa_priv_encode+61p
		extrn _PKCS8_pkey_get0:near ; CODE XREF: _rsa_priv_decode+1Cp
		extrn _X509_PUBKEY_set0_param:near ; CODE XREF:	_rsa_pub_encode+40p
		extrn _X509_PUBKEY_get0_param:near ; CODE XREF:	_rsa_pub_decode+1Cp
		extrn _CMS_RecipientInfo_get0_pkey_ctx:near
					; CODE XREF: _rsa_cms_decrypt+1Dp
					; _rsa_cms_encrypt+1Ap
		extrn _CMS_RecipientInfo_ktri_get0_algs:near
					; CODE XREF: _rsa_cms_decrypt+3Cp
					; _rsa_cms_encrypt+33p
		extrn _CMS_SignerInfo_get0_pkey_ctx:near ; CODE	XREF: _rsa_cms_sign+17p
					; _rsa_cms_verify+Fp
		extrn _CMS_SignerInfo_get0_algs:near ; CODE XREF: _rsa_cms_sign+2Dp
					; _rsa_cms_verify+25p
		extrn __chkstk:near	; CODE XREF: _rsa_pub_encode+5p
					; _rsa_pub_decode+5p ...


		end
