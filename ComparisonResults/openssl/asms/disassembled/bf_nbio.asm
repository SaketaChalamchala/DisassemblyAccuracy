;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9A9369EB7CAEC72273B2082A65D14534
; Input	CRC32 :	6B50A93A

; File Name   :	C:\compspace\Diff\openssl\obj\bf_nbio.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_write	proc near		; DATA XREF: .data:00000274o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		test	ebx, ebx
		jz	loc_B1
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jle	loc_B1
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		cmp	dword ptr [esi+24h], 0
		jnz	short loc_2B
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2B:					; CODE XREF: _nbiof_write+23j
		push	ebp
		mov	ebp, [esi+20h]
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		mov	eax, [ebp+4]
		add	esp, 8
		test	eax, eax
		jle	short loc_4A
		mov	dword ptr [ebp+4], 0
		jmp	short loc_6D
; ---------------------------------------------------------------------------

loc_4A:					; CODE XREF: _nbiof_write+3Fj
		lea	eax, [esp+10h+arg_4]
		push	1
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		jns	short loc_65
		pop	ebp
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_65:					; CODE XREF: _nbiof_write+5Bj
		movzx	eax, byte ptr [esp+10h+arg_4]
		and	eax, 7

loc_6D:					; CODE XREF: _nbiof_write+48j
		cmp	edi, eax
		cmovg	edi, eax
		test	eax, eax
		jnz	short loc_8B
		push	0Ah
		push	esi
		or	ebx, 0FFFFFFFFh
		call	_BIO_set_flags
		add	esp, 8
		mov	eax, ebx
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8B:					; CODE XREF: _nbiof_write+74j
		push	edi
		push	ebx
		push	dword ptr [esi+24h]
		call	_BIO_write
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jns	short loc_AA
		push	esi
		call	_BIO_copy_next_retry
		add	esp, 4
		mov	[ebp+4], edi

loc_AA:					; CODE XREF: _nbiof_write+9Cj
		pop	ebp
		pop	esi
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_B1:					; CODE XREF: _nbiof_write+8j
					; _nbiof_write+14j
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
_nbiof_write	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_read	proc near		; DATA XREF: .data:00000278o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jnz	short loc_C5
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_C5:					; CODE XREF: _nbiof_read+7j
		push	esi
		mov	esi, [esp+8+arg_0]
		cmp	dword ptr [esi+24h], 0
		jnz	short loc_D5
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_D5:					; CODE XREF: _nbiof_read+16j
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		lea	eax, [esp+10h+arg_4]
		push	1
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 10h
		test	eax, eax
		jns	short loc_F6
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_F6:					; CODE XREF: _nbiof_read+36j
		movzx	eax, byte ptr [esp+8+arg_4]
		mov	ecx, [esp+8+arg_8]
		and	eax, 7
		cmp	ecx, eax
		cmovg	ecx, eax
		test	eax, eax
		jnz	short loc_11E
		push	9
		push	esi
		or	edi, 0FFFFFFFFh
		call	_BIO_set_flags
		add	esp, 8
		mov	eax, edi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_11E:				; CODE XREF: _nbiof_read+51j
		push	ecx
		push	edi
		push	dword ptr [esi+24h]
		call	_BIO_read
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jns	short loc_13A
		push	esi
		call	_BIO_copy_next_retry
		add	esp, 4

loc_13A:				; CODE XREF: _nbiof_read+77j
		pop	esi
		mov	eax, edi
		pop	edi
		retn
_nbiof_read	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 140h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_puts	proc near		; DATA XREF: .data:0000027Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_14C
		retn
; ---------------------------------------------------------------------------

loc_14C:				; CODE XREF: _nbiof_puts+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_puts
_nbiof_puts	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 158h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_gets	proc near		; DATA XREF: .data:00000280o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_164
		retn
; ---------------------------------------------------------------------------

loc_164:				; CODE XREF: _nbiof_gets+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_gets
_nbiof_gets	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 170h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_ctrl	proc near		; DATA XREF: .data:00000284o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_0]
		mov	ecx, [edi+24h]
		test	ecx, ecx
		jnz	short loc_180
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_180:				; CODE XREF: _nbiof_ctrl+Aj
		mov	eax, [esp+4+arg_4]
		push	esi
		cmp	eax, 0Ch
		jz	short loc_1D0
		cmp	eax, 65h ; 'e'
		jz	short loc_1A6
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	eax
		push	ecx
		call	_BIO_ctrl
		add	esp, 10h
		mov	esi, eax
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1A6:				; CODE XREF: _nbiof_ctrl+1Dj
		push	0Fh
		push	edi
		call	_BIO_clear_flags
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_8]
		push	65h ; 'e'
		push	dword ptr [edi+24h]
		call	_BIO_ctrl
		push	edi
		mov	esi, eax
		call	_BIO_copy_next_retry
		add	esp, 1Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1D0:				; CODE XREF: _nbiof_ctrl+18j
		xor	esi, esi
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_nbiof_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_new	proc near		; DATA XREF: .data:00000288o

arg_0		= dword	ptr  4

		push	69h ; 'i'
		push	offset ??_C@_0BH@FCDMMJFM@?4?2crypto?2bio?2bf_nbio?4c?$AA@ ; ".\\crypto\\bio\\bf_nbio.c"
		push	8
		call	_CRYPTO_malloc
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_1F0
		retn
; ---------------------------------------------------------------------------

loc_1F0:				; CODE XREF: _nbiof_new+15j
		mov	eax, [esp+arg_0]
		mov	dword ptr [ecx], 0FFFFFFFFh
		mov	dword ptr [ecx+4], 0FFFFFFFFh
		mov	[eax+20h], ecx
		mov	dword ptr [eax+0Ch], 1

loc_20B:				; DATA XREF: .data:_methods_nbiofo
		mov	dword ptr [eax+14h], 0
		mov	eax, 1
		retn
_nbiof_new	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 218h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_free	proc near		; DATA XREF: .data:0000028Co

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_225
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_225:				; CODE XREF: _nbiof_free+7j
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_235
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_235:				; CODE XREF: _nbiof_free+12j
		mov	dword ptr [esi+20h], 0
		mov	eax, 1
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+14h], 0
		pop	esi
		retn
_nbiof_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 254h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nbiof_callback_ctrl proc near		; DATA XREF: .data:00000290o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_260
		retn
; ---------------------------------------------------------------------------

loc_260:				; CODE XREF: _nbiof_callback_ctrl+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_callback_ctrl
_nbiof_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 26Ch
_methods_nbiof	dd offset loc_20B+5	; DATA XREF: _BIO_f_nbio_testo
		dd offset ??_C@_0BM@CIHPOPKE@non?9blocking?5IO?5test?5filter?$AA@ ; "non-blocking IO test filter"
		dd offset _nbiof_write
		dd offset _nbiof_read
		dd offset _nbiof_puts
		dd offset _nbiof_gets
		dd offset _nbiof_ctrl
		dd offset _nbiof_new
		dd offset _nbiof_free
		dd offset _nbiof_callback_ctrl
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 294h
; COMDAT (pick any)
		public ??_C@_0BM@CIHPOPKE@non?9blocking?5IO?5test?5filter?$AA@
; `string'
??_C@_0BM@CIHPOPKE@non?9blocking?5IO?5test?5filter?$AA@	db 'non-blocking IO test filter',0
					; DATA XREF: .data:00000270o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_f_nbio_test
_BIO_f_nbio_test proc near
		mov	eax, offset _methods_nbiof
		retn
_BIO_f_nbio_test endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B8h
; COMDAT (pick any)
		public ??_C@_0BH@FCDMMJFM@?4?2crypto?2bio?2bf_nbio?4c?$AA@
; `string'
??_C@_0BH@FCDMMJFM@?4?2crypto?2bio?2bf_nbio?4c?$AA@ db '.\crypto\bio\bf_nbio.c',0
					; DATA XREF: _nbiof_new+2o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _nbiof_new+9p
		extrn _CRYPTO_free:near	; CODE XREF: _nbiof_free+15p
		extrn _BIO_set_flags:near ; CODE XREF: _nbiof_write+7Cp
					; _nbiof_read+59p
		extrn _BIO_clear_flags:near ; CODE XREF: _nbiof_write+32p
					; _nbiof_read+20p ...
		extrn _BIO_read:near	; CODE XREF: _nbiof_read+6Bp
		extrn _BIO_gets:near	; CODE XREF: _nbiof_gets+10j
		extrn _BIO_write:near	; CODE XREF: _nbiof_write+90p
		extrn _BIO_puts:near	; CODE XREF: _nbiof_puts+10j
		extrn _BIO_ctrl:near	; CODE XREF: _nbiof_ctrl+29p
					; _nbiof_ctrl+4Bp
		extrn _BIO_callback_ctrl:near ;	CODE XREF: _nbiof_callback_ctrl+10j
		extrn _BIO_copy_next_retry:near	; CODE XREF: _nbiof_write+9Fp
					; _nbiof_read+7Ap ...
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _nbiof_write+51p
					; _nbiof_read+2Cp


		end
