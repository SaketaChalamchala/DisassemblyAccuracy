;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	04CF90D50841BDFA7BDBCAF67F18C0A3
; Input	CRC32 :	CC5AFA80

; File Name   :	C:\compspace\Diff\openssl\obj\rand_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
_funct_ref	dd ?			; DATA XREF: _RAND_add:loc_71w
					; _RAND_bytes:loc_C4w ...
_default_RAND_meth dd ?			; DATA XREF: _RAND_addr _RAND_add+1Ew	...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_add
_RAND_add	proc near

var_8		= qword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= qword	ptr  0Ch

		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short loc_47
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_38
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_71
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_38:					; CODE XREF: _RAND_add+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax

loc_42:					; CODE XREF: _RAND_add+6Fj
		pop	esi
		test	eax, eax
		jz	short locret_70

loc_47:					; CODE XREF: _RAND_add+7j
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jz	short locret_70
		mov	eax, 8
		call	__chkstk
		movsd	xmm0, [esp+8+arg_8]
		movsd	[esp+8+var_8], xmm0
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	ecx
		add	esp, 10h

locret_70:				; CODE XREF: _RAND_add+3Dj
					; _RAND_add+44j
		retn
; ---------------------------------------------------------------------------

loc_71:					; CODE XREF: _RAND_add+25j
		mov	ds:_funct_ref, esi
		jmp	short loc_42
_RAND_add	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_bytes
_RAND_bytes	proc near
		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short loc_BB
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_AC
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_C4
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_AC:					; CODE XREF: _RAND_bytes+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax

loc_B6:					; CODE XREF: _RAND_bytes+4Ej
		pop	esi
		test	eax, eax
		jz	short loc_CC

loc_BB:					; CODE XREF: _RAND_bytes+7j
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_CC
		jmp	eax
; ---------------------------------------------------------------------------

loc_C4:					; CODE XREF: _RAND_bytes+25j
		mov	ds:_funct_ref, esi
		jmp	short loc_B6
; ---------------------------------------------------------------------------

loc_CC:					; CODE XREF: _RAND_bytes+3Dj
					; _RAND_bytes+44j
		or	eax, 0FFFFFFFFh
		retn
_RAND_bytes	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_cleanup
_RAND_cleanup	proc near
		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short loc_10F
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_100
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_13F
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_100:				; CODE XREF: _RAND_cleanup+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax

loc_10A:				; CODE XREF: _RAND_cleanup+75j
		pop	esi
		test	eax, eax
		jz	short loc_118

loc_10F:				; CODE XREF: _RAND_cleanup+7j
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_118
		call	eax

loc_118:				; CODE XREF: _RAND_cleanup+3Dj
					; _RAND_cleanup+44j
		mov	eax, ds:_funct_ref
		test	eax, eax
		jz	short loc_134
		push	eax
		call	_ENGINE_finish
		add	esp, 4
		mov	ds:_funct_ref, 0

loc_134:				; CODE XREF: _RAND_cleanup+4Fj
		mov	ds:_default_RAND_meth, 0
		retn
; ---------------------------------------------------------------------------

loc_13F:				; CODE XREF: _RAND_cleanup+25j
		mov	ds:_funct_ref, esi
		jmp	short loc_10A
_RAND_cleanup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_get_rand_method
_RAND_get_rand_method proc near
		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short locret_183
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_178
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_184
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_178:				; CODE XREF: _RAND_get_rand_method+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax
		pop	esi

locret_183:				; CODE XREF: _RAND_get_rand_method+7j
		retn
; ---------------------------------------------------------------------------

loc_184:				; CODE XREF: _RAND_get_rand_method+25j
		mov	ds:_funct_ref, esi
		pop	esi
		retn
_RAND_get_rand_method endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_pseudo_bytes
_RAND_pseudo_bytes proc	near
		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short loc_1CB
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_1BC
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_1D4
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_1BC:				; CODE XREF: _RAND_pseudo_bytes+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax

loc_1C6:				; CODE XREF: _RAND_pseudo_bytes+4Ej
		pop	esi
		test	eax, eax
		jz	short loc_1DC

loc_1CB:				; CODE XREF: _RAND_pseudo_bytes+7j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_1DC
		jmp	eax
; ---------------------------------------------------------------------------

loc_1D4:				; CODE XREF: _RAND_pseudo_bytes+25j
		mov	ds:_funct_ref, esi
		jmp	short loc_1C6
; ---------------------------------------------------------------------------

loc_1DC:				; CODE XREF: _RAND_pseudo_bytes+3Dj
					; _RAND_pseudo_bytes+44j
		or	eax, 0FFFFFFFFh
		retn
_RAND_pseudo_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_seed
_RAND_seed	proc near
		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short loc_21F
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_210
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_227
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_210:				; CODE XREF: _RAND_seed+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax

loc_21A:				; CODE XREF: _RAND_seed+4Dj
		pop	esi
		test	eax, eax
		jz	short locret_22F

loc_21F:				; CODE XREF: _RAND_seed+7j
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_22F
		jmp	eax
; ---------------------------------------------------------------------------

loc_227:				; CODE XREF: _RAND_seed+25j
		mov	ds:_funct_ref, esi
		jmp	short loc_21A
; ---------------------------------------------------------------------------

locret_22F:				; CODE XREF: _RAND_seed+3Dj
					; _RAND_seed+43j
		retn
_RAND_seed	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 230h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_set_rand_engine
_RAND_set_rand_engine proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		test	esi, esi
		jz	short loc_266
		push	esi
		call	_ENGINE_init
		add	esp, 4
		test	eax, eax
		jz	short loc_261
		push	esi
		call	_ENGINE_get_RAND
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_266
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_261:				; CODE XREF: _RAND_set_rand_engine+17j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_266:				; CODE XREF: _RAND_set_rand_engine+Aj
					; _RAND_set_rand_engine+26j
		mov	eax, ds:_funct_ref
		test	eax, eax
		jz	short loc_278
		push	eax
		call	_ENGINE_finish
		add	esp, 4

loc_278:				; CODE XREF: _RAND_set_rand_engine+3Dj
		mov	ds:_default_RAND_meth, edi
		mov	eax, 1
		pop	edi
		mov	ds:_funct_ref, esi
		pop	esi
		retn
_RAND_set_rand_engine endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_set_rand_method
_RAND_set_rand_method proc near

arg_0		= dword	ptr  4

		mov	eax, ds:_funct_ref
		test	eax, eax
		jz	short loc_2A8
		push	eax
		call	_ENGINE_finish
		add	esp, 4
		mov	ds:_funct_ref, 0

loc_2A8:				; CODE XREF: _RAND_set_rand_method+7j
		mov	eax, [esp+arg_0]
		mov	ds:_default_RAND_meth, eax
		mov	eax, 1
		retn
_RAND_set_rand_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_status
_RAND_status	proc near
		mov	eax, ds:_default_RAND_meth
		test	eax, eax
		jnz	short loc_2F7
		push	esi
		call	_ENGINE_get_default_RAND
		mov	esi, eax
		test	esi, esi
		jz	short loc_2E8
		push	esi
		call	_ENGINE_get_RAND
		add	esp, 4
		mov	ds:_default_RAND_meth, eax
		test	eax, eax
		jnz	short loc_300
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_2E8:				; CODE XREF: _RAND_status+13j
		call	_RAND_SSLeay
		mov	ds:_default_RAND_meth, eax

loc_2F2:				; CODE XREF: _RAND_status+4Ej
		pop	esi
		test	eax, eax
		jz	short loc_308

loc_2F7:				; CODE XREF: _RAND_status+7j
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_308
		jmp	eax
; ---------------------------------------------------------------------------

loc_300:				; CODE XREF: _RAND_status+25j
		mov	ds:_funct_ref, esi
		jmp	short loc_2F2
; ---------------------------------------------------------------------------

loc_308:				; CODE XREF: _RAND_status+3Dj
					; _RAND_status+44j
		xor	eax, eax
		retn
_RAND_status	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _RAND_SSLeay:near	; CODE XREF: _RAND_add:loc_38p
					; _RAND_bytes:loc_ACp ...
		extrn _ENGINE_get_RAND:near ; CODE XREF: _RAND_add+16p
					; _RAND_bytes+16p ...
		extrn _ENGINE_init:near	; CODE XREF: _RAND_set_rand_engine+Dp
		extrn _ENGINE_finish:near ; CODE XREF: _RAND_add+28p
					; _RAND_bytes+28p ...
		extrn _ENGINE_get_default_RAND:near ; CODE XREF: _RAND_add+Ap
					; _RAND_bytes+Ap ...
		extrn __chkstk:near	; CODE XREF: _RAND_add+4Bp
		extrn __fltused:near


		end
