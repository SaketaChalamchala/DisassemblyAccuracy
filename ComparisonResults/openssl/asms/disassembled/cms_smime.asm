;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BD815B8799A4697CC1D713225481415A
; Input	CRC32 :	5D4B943F

; File Name   :	C:\compspace\Diff\openssl\obj\cms_smime.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_EncryptedData_decrypt
_CMS_EncryptedData_decrypt proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_CMS_get0_type
		push	eax
		call	_OBJ_obj2nid
		add	esp, 8
		cmp	eax, 1Ah
		jz	short loc_38
		push	0DEh ; 'ﬁ'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	91h ; 'ë'
		push	79h ; 'y'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_38:					; CODE XREF: _CMS_EncryptedData_decrypt+17j
		push	edi
		mov	edi, [esp+8+arg_C]
		test	edi, edi
		jnz	short loc_6C
		push	esi
		call	_CMS_get0_content
		add	esp, 4
		test	eax, eax
		jz	short loc_52
		cmp	[eax], edi
		jnz	short loc_6C

loc_52:					; CODE XREF: _CMS_EncryptedData_decrypt+4Cj
		push	78h ; 'x'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Fh ; ''
		push	63h ; 'c'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

loc_67:					; CODE XREF: _CMS_EncryptedData_decrypt+81j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6C:					; CODE XREF: _CMS_EncryptedData_decrypt+3Fj
					; _CMS_EncryptedData_decrypt+50j
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	0
		push	esi
		call	_CMS_EncryptedData_set1_key
		add	esp, 10h
		test	eax, eax
		jle	short loc_67
		push	ebx
		push	edi
		push	esi
		call	_CMS_dataInit
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_98
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_98:					; CODE XREF: _CMS_EncryptedData_decrypt+92j
		push	[esp+0Ch+arg_14]
		push	ebx
		push	[esp+14h+arg_10]
		call	_cms_copy_content
		push	edi
		push	ebx
		mov	esi, eax
		call	_do_free_upto
		add	esp, 14h
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		retn
_CMS_EncryptedData_decrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_EncryptedData_encrypt
_CMS_EncryptedData_encrypt proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	[esp+arg_4], 0
		jnz	short loc_DA
		push	0F5h ; 'ı'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Eh ; '~'
		push	7Ah ; 'z'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_DA:					; CODE XREF: _CMS_EncryptedData_encrypt+5j
		push	esi
		call	_CMS_ContentInfo_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_FF
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	esi
		call	_CMS_EncryptedData_set1_key
		add	esp, 10h
		test	eax, eax
		jnz	short loc_103

loc_FF:					; CODE XREF: _CMS_EncryptedData_encrypt+2Cj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_103:				; CODE XREF: _CMS_EncryptedData_encrypt+45j
		push	ebx
		mov	ebx, [esp+8+arg_10]
		test	bl, 40h
		jnz	short loc_118
		push	0
		push	esi
		call	_CMS_set_detached
		add	esp, 8

loc_118:				; CODE XREF: _CMS_EncryptedData_encrypt+53j
		test	ebx, 5000h
		jnz	short loc_142
		push	ebx
		push	0
		push	[esp+10h+arg_0]
		push	esi
		call	_CMS_final
		add	esp, 10h
		test	eax, eax
		jnz	short loc_142
		push	esi
		call	_CMS_ContentInfo_free
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_142:				; CODE XREF: _CMS_EncryptedData_encrypt+66j
					; _CMS_EncryptedData_encrypt+7Aj
		pop	ebx
		mov	eax, esi
		pop	esi
		retn
_CMS_EncryptedData_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_compress
_CMS_compress	proc near
		push	340h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	97h ; 'ó'
		push	68h ; 'h'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
_CMS_compress	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_data
_CMS_data	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_CMS_get0_type
		push	eax
		call	_OBJ_obj2nid
		add	esp, 8
		cmp	eax, 15h
		jz	short loc_1A0
		push	91h ; 'ë'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	8Fh ; 'è'
		push	6Dh ; 'm'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A0:				; CODE XREF: _CMS_data+17j
		push	edi
		push	0
		push	esi
		call	_CMS_dataInit
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1B5
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1B5:				; CODE XREF: _CMS_data+48j
		push	[esp+8+arg_8]
		push	edi
		push	[esp+10h+arg_4]
		call	_cms_copy_content
		push	edi
		mov	esi, eax
		call	_BIO_free_all
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_CMS_data	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_data_create
_CMS_data_create proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		call	_cms_Data_create
		mov	esi, eax
		test	esi, esi
		jz	short loc_208
		mov	eax, [esp+4+arg_4]
		test	eax, 1000h
		jnz	short loc_20C
		push	eax
		push	0
		push	[esp+0Ch+arg_0]
		push	esi
		call	_CMS_final
		add	esp, 10h
		test	eax, eax
		jnz	short loc_20C
		push	esi
		call	_CMS_ContentInfo_free
		add	esp, 4

loc_208:				; CODE XREF: _CMS_data_create+Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: _CMS_data_create+15j
					; _CMS_data_create+29j
		mov	eax, esi
		pop	esi
		retn
_CMS_data_create endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_decrypt
_CMS_decrypt	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_CMS_get0_type
		push	eax
		call	_OBJ_obj2nid
		add	esp, 8
		cmp	eax, 17h
		jz	short loc_248
		push	2DBh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	92h ; 'í'
		push	70h ; 'p'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_248:				; CODE XREF: _CMS_decrypt+17j
		push	edi
		mov	edi, [esp+8+arg_C]
		test	edi, edi
		jnz	short loc_27C
		push	esi
		call	_CMS_get0_content
		add	esp, 4
		test	eax, eax
		jz	short loc_262
		cmp	[eax], edi
		jnz	short loc_27C

loc_262:				; CODE XREF: _CMS_decrypt+4Cj
		push	78h ; 'x'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Fh ; ''
		push	63h ; 'c'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

loc_277:				; CODE XREF: _CMS_decrypt+BAj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_27C:				; CODE XREF: _CMS_decrypt+3Fj
					; _CMS_decrypt+50j
		test	[esp+8+arg_14],	20000h
		mov	eax, [esi+4]
		mov	eax, [eax+0Ch]
		jz	short loc_295
		mov	dword ptr [eax+18h], 1
		jmp	short loc_29C
; ---------------------------------------------------------------------------

loc_295:				; CODE XREF: _CMS_decrypt+7Aj
		mov	dword ptr [eax+18h], 0

loc_29C:				; CODE XREF: _CMS_decrypt+83j
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jnz	short loc_2BA
		cmp	[esp+8+arg_8], eax
		jnz	short loc_2CC
		test	edi, edi
		jnz	short loc_2CC
		cmp	[esp+8+arg_10],	edi
		jnz	short loc_2CC
		lea	eax, [edi+1]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2BA:				; CODE XREF: _CMS_decrypt+92j
		push	[esp+8+arg_8]
		push	eax
		push	esi
		call	_CMS_decrypt_set1_pkey
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_277

loc_2CC:				; CODE XREF: _CMS_decrypt+98j
					; _CMS_decrypt+9Cj ...
		push	ebx
		push	edi
		push	esi
		call	_CMS_dataInit
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_2E1
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2E1:				; CODE XREF: _CMS_decrypt+CBj
		push	[esp+0Ch+arg_14]
		push	ebx
		push	[esp+14h+arg_10]
		call	_cms_copy_content
		push	edi
		push	ebx
		mov	esi, eax
		call	_do_free_upto
		add	esp, 14h
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		retn
_CMS_decrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 304h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_decrypt_set1_key
_CMS_decrypt_set1_key proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	[esp+14h+arg_0]
		call	_CMS_get0_RecipientInfos
		mov	esi, eax
		xor	ebx, ebx
		push	esi
		mov	[esp+1Ch+var_4], esi
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	short loc_3A7
		mov	ebp, [esp+14h+arg_C]

loc_334:				; CODE XREF: _CMS_decrypt_set1_key+A1j
		push	ebx
		push	esi
		call	_sk_value
		mov	edi, eax
		push	edi
		call	_CMS_RecipientInfo_type
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short loc_399
		test	ebp, ebp
		jz	short loc_361
		push	[esp+14h+arg_10]
		push	ebp
		push	edi
		call	_CMS_RecipientInfo_kekri_id_cmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_399

loc_361:				; CODE XREF: _CMS_decrypt_set1_key+49j
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	edi
		call	_CMS_RecipientInfo_set0_key
		push	edi
		push	[esp+24h+arg_0]
		call	_CMS_RecipientInfo_decrypt
		push	0
		push	0
		push	edi
		mov	esi, eax
		call	_CMS_RecipientInfo_set0_key
		add	esp, 20h
		test	esi, esi
		jg	short loc_3EA
		test	ebp, ebp
		jnz	short loc_3CA
		call	_ERR_clear_error
		mov	esi, [esp+14h+var_4]

loc_399:				; CODE XREF: _CMS_decrypt_set1_key+45j
					; _CMS_decrypt_set1_key+5Bj
		push	esi
		inc	ebx
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	short loc_334

loc_3A7:				; CODE XREF: _CMS_decrypt_set1_key+2Aj
		push	2B9h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	84h ; 'Ñ'
		push	71h ; 'q'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3CA:				; CODE XREF: _CMS_decrypt_set1_key+8Aj
		push	2B2h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	70h ; 'p'
		push	71h ; 'q'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3EA:				; CODE XREF: _CMS_decrypt_set1_key+86j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
_CMS_decrypt_set1_key endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_decrypt_set1_password
_CMS_decrypt_set1_password proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		push	esi
		call	_CMS_get0_RecipientInfos
		mov	ebp, eax
		xor	edi, edi
		push	ebp
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	short loc_469
		nop

loc_418:				; CODE XREF: _CMS_decrypt_set1_password+6Fj
		push	edi
		push	ebp
		call	_sk_value
		mov	ebx, eax
		push	ebx
		call	_CMS_RecipientInfo_type
		add	esp, 0Ch
		cmp	eax, 3
		jnz	short loc_45B
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	ebx
		call	_CMS_RecipientInfo_set0_password
		push	ebx
		push	esi
		call	_CMS_RecipientInfo_decrypt
		push	0
		push	0
		push	ebx
		mov	esi, eax
		call	_CMS_RecipientInfo_set0_password
		add	esp, 20h
		test	esi, esi
		jg	short loc_48E
		mov	esi, [esp+10h+arg_0]

loc_45B:				; CODE XREF: _CMS_decrypt_set1_password+35j
		push	ebp
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_418

loc_469:				; CODE XREF: _CMS_decrypt_set1_password+1Dj
		push	2D0h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	84h ; 'Ñ'
		push	0A6h ; '¶'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_48E:				; CODE XREF: _CMS_decrypt_set1_password+5Dj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_CMS_decrypt_set1_password endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 498h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_decrypt_set1_pkey
_CMS_decrypt_set1_pkey proc near	; CODE XREF: _CMS_decrypt+B0p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		xor	eax, eax
		push	esi
		xor	ebx, ebx
		mov	[esp+1Ch+var_C], eax
		push	ebp
		mov	[esp+20h+var_10], ebx
		call	_CMS_get0_RecipientInfos
		mov	esi, eax
		add	esp, 4
		mov	[esp+1Ch+var_4], esi
		test	esi, esi
		jz	short loc_4D5
		mov	ecx, [ebp+4]
		mov	ecx, [ecx+0Ch]
		mov	ebx, [ecx+18h]
		mov	[esp+1Ch+var_10], ebx

loc_4D5:				; CODE XREF: _CMS_decrypt_set1_pkey+2Ej
		push	[esp+1Ch+arg_4]
		call	_cms_pkey_get_ri_type
		add	esp, 4
		mov	[esp+1Ch+var_8], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_50B
		push	260h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Dh ; '}'
		push	72h ; 'r'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_50B:				; CODE XREF: _CMS_decrypt_set1_pkey+50j
		push	edi
		push	esi
		xor	ebp, ebp
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_601
		mov	edi, [esp+20h+arg_8]
		nop	dword ptr [eax+eax+00h]

loc_528:				; CODE XREF: _CMS_decrypt_set1_pkey+128j
		push	ebp
		push	esi
		call	_sk_value
		mov	esi, eax
		push	esi
		call	_CMS_RecipientInfo_type
		mov	ecx, [esp+2Ch+var_8]
		add	esp, 0Ch
		cmp	eax, ecx
		jnz	short loc_5B0
		mov	[esp+20h+var_C], 1
		cmp	ecx, 1
		jnz	short loc_56D
		push	edi
		push	[esp+24h+arg_4]
		push	esi
		push	[esp+2Ch+arg_0]
		call	_cms_kari_set1_pkey
		add	esp, 10h
		test	eax, eax
		jg	short loc_5DB
		js	loc_61C
		jmp	short loc_5B0
; ---------------------------------------------------------------------------

loc_56D:				; CODE XREF: _CMS_decrypt_set1_pkey+B5j
		test	edi, edi
		jz	short loc_57F
		push	edi
		push	esi
		call	_CMS_RecipientInfo_ktri_cert_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_5B0

loc_57F:				; CODE XREF: _CMS_decrypt_set1_pkey+D7j
		push	[esp+20h+arg_4]
		push	esi
		call	_CMS_RecipientInfo_set0_pkey
		push	esi
		push	[esp+2Ch+arg_0]
		call	_CMS_RecipientInfo_decrypt
		push	0
		push	esi
		mov	ebx, eax
		call	_CMS_RecipientInfo_set0_pkey
		add	esp, 18h
		test	edi, edi
		jnz	short loc_5E8
		test	ebx, ebx
		mov	ebx, [esp+20h+var_10]
		jle	short loc_5B0
		test	ebx, ebx
		jnz	short loc_5DB

loc_5B0:				; CODE XREF: _CMS_decrypt_set1_pkey+A8j
					; _CMS_decrypt_set1_pkey+D3j ...
		mov	esi, [esp+20h+var_4]
		inc	ebp
		push	esi
		call	_sk_num
		add	esp, 4
		cmp	ebp, eax
		jl	loc_528
		mov	eax, [esp+20h+var_C]
		test	eax, eax
		jz	short loc_601
		test	edi, edi
		jnz	short loc_601
		test	ebx, ebx
		jnz	short loc_601

loc_5D6:				; CODE XREF: _CMS_decrypt_set1_pkey+155j
		call	_ERR_clear_error

loc_5DB:				; CODE XREF: _CMS_decrypt_set1_pkey+CBj
					; _CMS_decrypt_set1_pkey+116j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_5E8:				; CODE XREF: _CMS_decrypt_set1_pkey+10Aj
		cmp	[esp+20h+var_10], 0
		jz	short loc_5D6
		test	ebx, ebx
		jg	short loc_5DB
		push	283h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	70h ; 'p'
		jmp	short loc_610
; ---------------------------------------------------------------------------

loc_601:				; CODE XREF: _CMS_decrypt_set1_pkey+81j
					; _CMS_decrypt_set1_pkey+134j ...
		push	295h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	84h ; 'Ñ'

loc_610:				; CODE XREF: _CMS_decrypt_set1_pkey+167j
		push	72h ; 'r'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

loc_61C:				; CODE XREF: _CMS_decrypt_set1_pkey+CDj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
_CMS_decrypt_set1_pkey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 628h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_digest_create
_CMS_digest_create proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_635
		call	_EVP_sha1

loc_635:				; CODE XREF: _CMS_digest_create+6j
		push	esi
		push	eax
		call	_cms_DigestedData_create
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_647
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_647:				; CODE XREF: _CMS_digest_create+1Bj
		push	ebx
		mov	ebx, [esp+8+arg_8]
		test	bl, 40h
		jnz	short loc_65C
		push	0
		push	esi
		call	_CMS_set_detached
		add	esp, 8

loc_65C:				; CODE XREF: _CMS_digest_create+27j
		test	ebx, 1000h
		jnz	short loc_686
		push	ebx
		push	0
		push	[esp+10h+arg_0]
		push	esi
		call	_CMS_final
		add	esp, 10h
		test	eax, eax
		jnz	short loc_686
		push	esi
		call	_CMS_ContentInfo_free
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_686:				; CODE XREF: _CMS_digest_create+3Aj
					; _CMS_digest_create+4Ej
		pop	ebx
		mov	eax, esi
		pop	esi
		retn
_CMS_digest_create endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_digest_verify
_CMS_digest_verify proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_CMS_get0_type
		push	eax
		call	_OBJ_obj2nid
		add	esp, 8
		cmp	eax, 19h
		jz	short loc_6C4
		push	0B1h ; '±'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	90h ; 'ê'
		push	76h ; 'v'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6C4:				; CODE XREF: _CMS_digest_verify+17j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jnz	short loc_6F8
		push	esi
		call	_CMS_get0_content
		add	esp, 4
		test	eax, eax
		jz	short loc_6DE
		cmp	[eax], ebx
		jnz	short loc_6F8

loc_6DE:				; CODE XREF: _CMS_digest_verify+4Cj
		push	78h ; 'x'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Fh ; ''
		push	63h ; 'c'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F8:				; CODE XREF: _CMS_digest_verify+3Fj
					; _CMS_digest_verify+50j
		push	edi
		push	ebx
		push	esi
		call	_CMS_dataInit
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_70D
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_70D:				; CODE XREF: _CMS_digest_verify+7Bj
		push	ebp
		push	[esp+10h+arg_C]
		push	edi
		push	[esp+18h+arg_8]
		call	_cms_copy_content
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_733
		push	1
		push	edi
		push	esi
		call	_cms_DigestedData_do_final
		add	esp, 0Ch
		mov	ebp, eax

loc_733:				; CODE XREF: _CMS_digest_verify+97j
		push	ebx
		push	edi
		call	_do_free_upto
		add	esp, 8
		mov	eax, ebp
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		retn
_CMS_digest_verify endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 744h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_encrypt
_CMS_encrypt	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	[esp+10h+arg_8]
		call	_CMS_EnvelopedData_create
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_779

$merr$31:
		push	235h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	41h ; 'A'
		push	77h ; 'w'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_779:				; CODE XREF: _CMS_encrypt+14j
		mov	ebx, [esp+10h+arg_0]
		xor	esi, esi
		push	ebx
		call	_sk_num
		mov	ebp, [esp+14h+arg_C]
		add	esp, 4
		test	eax, eax
		jle	short loc_7B8
		nop	dword ptr [eax+00h]

loc_794:				; CODE XREF: _CMS_encrypt+72j
		push	esi
		push	ebx
		call	_sk_value
		push	ebp
		push	eax
		push	edi
		call	_CMS_add1_recipient_cert
		add	esp, 14h
		test	eax, eax
		jz	short loc_812
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_794

loc_7B8:				; CODE XREF: _CMS_encrypt+4Aj
		mov	ebx, [esp+10h+arg_C]
		test	bl, 40h
		jnz	short loc_7CC
		push	0
		push	edi
		call	_CMS_set_detached
		add	esp, 8

loc_7CC:				; CODE XREF: _CMS_encrypt+7Bj
		test	ebx, 5000h
		jnz	loc_89E
		xor	ebp, ebp
		push	ebp
		push	edi
		call	_CMS_dataInit
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_83D
		push	2F5h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	68h ; 'h'
		push	7Fh ; ''
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		push	edi
		call	_CMS_ContentInfo_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_812:				; CODE XREF: _CMS_encrypt+64j
		push	226h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	89h ; 'â'
		push	77h ; 'w'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		push	edi
		call	_CMS_ContentInfo_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_83D:				; CODE XREF: _CMS_encrypt+A4j
		push	ebx
		push	esi
		push	[esp+18h+arg_4]
		call	_SMIME_crlf_copy
		push	0
		push	0
		push	0Bh
		push	esi
		call	_BIO_ctrl
		push	esi
		push	edi
		call	_CMS_dataFinal
		add	esp, 24h
		test	eax, eax
		jnz	short loc_87C
		push	2FEh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	67h ; 'g'
		push	7Fh ; ''
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$32
; ---------------------------------------------------------------------------

loc_87C:				; CODE XREF: _CMS_encrypt+11Cj
		mov	ebp, 1

$err$32:				; CODE XREF: _CMS_encrypt+136j
		push	esi
		call	_BIO_free_all
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_89E

$err$33:
		push	edi
		call	_CMS_ContentInfo_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_89E:				; CODE XREF: _CMS_encrypt+8Ej
					; _CMS_encrypt+148j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_CMS_encrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_final
_CMS_final	proc near		; CODE XREF: _CMS_EncryptedData_encrypt+70p
					; _CMS_data_create+1Fp	...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	edi, edi
		push	[esp+0Ch+arg_0]
		call	_CMS_dataInit
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_8DF
		push	2F5h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	68h ; 'h'
		push	7Fh ; ''
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_8DF:				; CODE XREF: _CMS_final+18j
		push	[esp+8+arg_C]
		push	esi
		push	[esp+10h+arg_4]
		call	_SMIME_crlf_copy
		push	0
		push	0
		push	0Bh
		push	esi
		call	_BIO_ctrl
		push	esi
		push	[esp+28h+arg_0]
		call	_CMS_dataFinal
		add	esp, 24h
		test	eax, eax
		jnz	short loc_934
		push	2FEh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	67h ; 'g'
		push	7Fh ; ''
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		push	[esp+8+arg_8]
		push	esi
		call	_do_free_upto
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_934:				; CODE XREF: _CMS_final+60j
		mov	edi, 1

$err$6:
		push	[esp+8+arg_8]
		push	esi
		call	_do_free_upto
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_CMS_final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_sign
_CMS_sign	proc near		; CODE XREF: _CMS_sign_receipt+49p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		push	edi
		call	_CMS_ContentInfo_new
		mov	edi, eax
		test	edi, edi
		jz	$merr$22
		push	edi
		call	_CMS_SignedData_init
		add	esp, 4
		test	eax, eax
		jz	$merr$22
		mov	eax, [esp+0Ch+arg_4]
		test	eax, eax
		jz	short loc_99D
		push	[esp+0Ch+arg_10]
		push	0
		push	eax
		push	[esp+18h+arg_0]
		push	edi
		call	_CMS_add1_signer
		add	esp, 14h
		test	eax, eax
		jnz	short loc_99D
		push	1B9h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	63h ; 'c'
		jmp	short loc_A15
; ---------------------------------------------------------------------------

loc_99D:				; CODE XREF: _CMS_sign+29j
					; _CMS_sign+41j
		mov	ebx, [esp+0Ch+arg_8]
		xor	esi, esi
		push	ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_9D3

loc_9B0:				; CODE XREF: _CMS_sign+85j
		push	esi
		push	ebx
		call	_sk_value
		push	eax
		push	edi
		call	_CMS_add1_cert
		add	esp, 10h
		test	eax, eax
		jz	short $merr$22
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_9B0

loc_9D3:				; CODE XREF: _CMS_sign+62j
		mov	ebx, [esp+0Ch+arg_10]
		test	bl, 40h
		jnz	short loc_9E7
		push	0
		push	edi
		call	_CMS_set_detached
		add	esp, 8

loc_9E7:				; CODE XREF: _CMS_sign+8Ej
		test	ebx, 5000h
		jnz	short loc_A03
		push	ebx
		push	0
		push	[esp+14h+arg_C]
		push	edi
		call	_CMS_final
		add	esp, 10h
		test	eax, eax
		jz	short $err$23

loc_A03:				; CODE XREF: _CMS_sign+A1j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$merr$22:				; CODE XREF: _CMS_sign+Cj
					; _CMS_sign+1Dj ...
		push	1CDh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	41h ; 'A'

loc_A15:				; CODE XREF: _CMS_sign+4Fj
		push	94h ; 'î'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

$err$23:				; CODE XREF: _CMS_sign+B5j
		test	edi, edi
		jz	short loc_A31
		push	edi
		call	_CMS_ContentInfo_free
		add	esp, 4

loc_A31:				; CODE XREF: _CMS_sign+DAj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_CMS_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A38h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_sign_receipt
_CMS_sign_receipt proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	esi
		mov	esi, [esp+10h+arg_10]
		and	esi, 0FFFFEFFEh
		mov	[esp+10h+var_4], 0
		or	esi, 40C0h
		test	ebp, ebp
		jz	loc_B5E
		mov	ebx, [esp+10h+arg_4]
		test	ebx, ebx
		jz	loc_B5E
		push	edi
		push	esi
		push	0
		push	[esp+1Ch+arg_C]
		push	0
		push	0
		call	_CMS_sign
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_AD8
		push	0CCh ; 'Ã'
		call	_OBJ_nid2obj
		push	eax
		push	edi
		call	_CMS_set1_eContentType
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_AD8
		push	esi
		push	0
		push	ebp
		push	ebx
		push	edi
		call	_CMS_add1_signer
		add	esp, 14h
		mov	[esp+14h+arg_10], eax
		test	eax, eax
		jnz	short loc_AE9
		push	1F3h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	63h ; 'c'
		push	0A3h ; '£'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

loc_AD8:				; CODE XREF: _CMS_sign_receipt+55j
					; _CMS_sign_receipt+6Dj ...
		push	edi
		call	_CMS_ContentInfo_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_AE9:				; CODE XREF: _CMS_sign_receipt+83j
		push	[esp+14h+arg_0]
		call	_cms_encode_Receipt
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_AD8
		push	dword ptr [ebx]
		push	dword ptr [ebx+8]
		call	_BIO_new_mem_buf
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short loc_AD8
		push	[esp+14h+arg_0]
		push	[esp+18h+arg_10]
		call	_cms_msgSigDigest_add1
		add	esp, 8
		test	eax, eax
		jz	short $err$16
		push	esi
		push	0
		push	ebp
		push	edi
		call	_CMS_final
		add	esp, 10h
		test	eax, eax
		jz	short $err$16
		push	edi
		call	_CMS_get0_content
		add	esp, 4
		mov	[esp+14h+var_4], 1
		mov	[eax], ebx

$err$16:				; CODE XREF: _CMS_sign_receipt+E8j
					; _CMS_sign_receipt+F9j
		push	ebp
		call	_BIO_free
		add	esp, 4
		cmp	[esp+14h+var_4], 0
		jz	short loc_AD8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_B5E:				; CODE XREF: _CMS_sign_receipt+2Bj
					; _CMS_sign_receipt+37j
		push	1E3h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	0AEh ; 'Æ'
		push	0A3h ; '£'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_CMS_sign_receipt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_uncompress
_CMS_uncompress	proc near
		push	33Ah
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	97h ; 'ó'
		push	9Ch ; 'ú'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
_CMS_uncompress	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BA8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_verify
_CMS_verify	proc near		; CODE XREF: _CMS_verify_receipt+18p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+20h+arg_0]
		xor	ebp, ebp
		push	edi
		xor	ebx, ebx
		mov	[esp+24h+var_14], 0
		xor	edi, edi
		mov	[esp+24h+var_10], 0
		mov	[esp+24h+var_C], ebp
		cmp	[esp+24h+arg_C], ebx
		jnz	short loc_C0A
		push	esi
		call	_CMS_get0_content
		add	esp, 4
		test	eax, eax
		jz	short loc_BEB
		cmp	[eax], ebx
		jnz	short loc_C0A

loc_BEB:				; CODE XREF: _CMS_verify+3Dj
		push	78h ; 'x'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Fh ; ''
		push	63h ; 'c'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_C0A:				; CODE XREF: _CMS_verify+30j
					; _CMS_verify+41j
		push	esi
		call	_CMS_get0_SignerInfos
		mov	esi, eax
		push	esi
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jg	short loc_C42
		push	13Eh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	87h ; 'á'
		push	9Dh ; 'ù'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_CD9
; ---------------------------------------------------------------------------

loc_C42:				; CODE XREF: _CMS_verify+75j
		push	esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_C88
		nop	dword ptr [eax+00000000h]

loc_C58:				; CODE XREF: _CMS_verify+DEj
		push	edi
		push	esi
		call	_sk_value
		push	0
		push	0
		lea	ecx, [esp+34h+var_8]
		push	ecx
		push	0
		push	eax
		call	_CMS_SignerInfo_get0_algs
		add	esp, 1Ch
		cmp	[esp+24h+var_8], ebx
		jz	short loc_C7A
		inc	ebp

loc_C7A:				; CODE XREF: _CMS_verify+CFj
		push	esi
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_C58

loc_C88:				; CODE XREF: _CMS_verify+A7j
		push	esi
		call	_sk_num
		mov	edi, [esp+28h+arg_0]
		add	esp, 4
		cmp	ebp, eax
		jz	short loc_CAC
		push	[esp+24h+arg_14]
		push	[esp+28h+arg_4]
		push	edi
		call	_CMS_set1_signers_certs
		add	esp, 0Ch
		add	ebp, eax

loc_CAC:				; CODE XREF: _CMS_verify+EFj
		push	esi
		call	_sk_num
		add	esp, 4
		cmp	ebp, eax
		jz	short loc_D11
		push	14Dh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	8Ah ; 'ä'
		push	9Dh ; 'ù'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

loc_CD7:				; CODE XREF: _CMS_verify+1C7j
					; _CMS_verify+213j
		xor	edi, edi

loc_CD9:				; CODE XREF: _CMS_verify+95j
		mov	ebp, [esp+24h+arg_C]

$err$79:				; CODE XREF: _CMS_verify+29Cj
					; _CMS_verify+2B5j ...
		test	ebp, ebp
		jz	loc_ED1
		cmp	edi, ebp
		jnz	loc_ED1

loc_CED:				; CODE XREF: _CMS_verify+162j
		push	ebx
		call	_BIO_pop
		push	ebx
		mov	esi, eax
		call	_BIO_free
		add	esp, 8
		mov	ebx, esi
		test	esi, esi
		jz	$err2$80
		cmp	esi, ebp
		jnz	short loc_CED
		jmp	$err2$80
; ---------------------------------------------------------------------------

loc_D11:				; CODE XREF: _CMS_verify+10Fj
		mov	eax, [esp+24h+arg_14]
		test	al, 20h
		jnz	short loc_D87
		push	edi
		call	_CMS_get1_certs
		add	esp, 4
		mov	[esp+24h+var_14], eax
		test	[esp+24h+arg_14], 2000h
		jnz	short loc_D3D
		push	edi
		call	_CMS_get1_crls
		add	esp, 4
		mov	[esp+24h+var_10], eax

loc_D3D:				; CODE XREF: _CMS_verify+186j
		push	esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_D83
		mov	ebp, [esp+24h+arg_8]

loc_D50:				; CODE XREF: _CMS_verify+1D9j
		push	edi
		push	esi
		call	_sk_value
		push	[esp+2Ch+arg_14]
		push	[esp+30h+var_10]
		push	[esp+34h+var_14]
		push	ebp
		push	eax
		call	_cms_signerinfo_verify_cert
		add	esp, 1Ch
		test	eax, eax
		jz	loc_CD7
		push	esi
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_D50

loc_D83:				; CODE XREF: _CMS_verify+1A2j
		mov	eax, [esp+24h+arg_14]

loc_D87:				; CODE XREF: _CMS_verify+16Fj
		test	al, 8
		jnz	short loc_DCF
		push	esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_DCF

loc_D9A:				; CODE XREF: _CMS_verify+225j
		push	edi
		push	esi
		call	_sk_value
		mov	ebp, eax
		push	ebp
		call	_CMS_signed_get_attr_count
		add	esp, 0Ch
		test	eax, eax
		js	short loc_DC1
		push	ebp
		call	_CMS_SignerInfo_verify
		add	esp, 4
		test	eax, eax
		jle	loc_CD7

loc_DC1:				; CODE XREF: _CMS_verify+206j
		push	esi
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_D9A

loc_DCF:				; CODE XREF: _CMS_verify+1E1j
					; _CMS_verify+1F0j
		mov	ebp, [esp+24h+arg_C]
		test	ebp, ebp
		jz	short loc_E2D
		push	ebp
		call	_BIO_method_type
		add	esp, 4
		cmp	eax, 401h
		jnz	short loc_E2D
		lea	eax, [esp+24h+var_4]
		push	eax
		push	0
		push	3
		push	ebp
		call	_BIO_ctrl
		push	eax
		push	[esp+38h+var_4]
		call	_BIO_new_mem_buf
		mov	edi, eax
		add	esp, 18h
		mov	[esp+24h+arg_C], edi
		test	edi, edi
		jnz	short loc_E33
		push	178h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	41h ; 'A'
		push	9Dh ; 'ù'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err2$80
; ---------------------------------------------------------------------------

loc_E2D:				; CODE XREF: _CMS_verify+22Dj
					; _CMS_verify+23Dj
		mov	edi, ebp
		mov	[esp+24h+arg_C], ebp

loc_E33:				; CODE XREF: _CMS_verify+263j
		push	edi
		push	[esp+28h+arg_0]
		call	_CMS_dataInit
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	$err$79
		push	[esp+24h+arg_14]
		push	ebx
		push	[esp+2Ch+arg_10]
		call	_cms_copy_content
		add	esp, 0Ch
		test	eax, eax
		jz	$err$79
		test	byte ptr [esp+24h+arg_14], 4
		jnz	short loc_EA0
		push	esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_E9C

loc_E79:				; CODE XREF: _CMS_verify+2F2j
		push	edi
		push	esi
		call	_sk_value
		push	ebx
		push	eax
		call	_CMS_SignerInfo_verify_content
		add	esp, 10h
		test	eax, eax
		jle	short loc_EAD
		push	esi
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_E79

loc_E9C:				; CODE XREF: _CMS_verify+2CFj
		mov	edi, [esp+24h+arg_C]

loc_EA0:				; CODE XREF: _CMS_verify+2C0j
		mov	[esp+24h+var_C], 1
		jmp	$err$79
; ---------------------------------------------------------------------------

loc_EAD:				; CODE XREF: _CMS_verify+2E4j
		push	189h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	6Dh ; 'm'
		push	9Dh ; 'ù'
		push	2Eh ; '.'
		call	_ERR_put_error
		mov	edi, [esp+38h+arg_C]
		add	esp, 14h
		jmp	$err$79
; ---------------------------------------------------------------------------

loc_ED1:				; CODE XREF: _CMS_verify+137j
					; _CMS_verify+13Fj
		push	ebx
		call	_BIO_free_all
		add	esp, 4

$err2$80:				; CODE XREF: _CMS_verify+15Aj
					; _CMS_verify+164j ...
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_EF0
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_EF0:				; CODE XREF: _CMS_verify+338j
		mov	eax, [esp+24h+var_10]
		test	eax, eax
		jz	short loc_F06
		push	offset _X509_CRL_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_F06:				; CODE XREF: _CMS_verify+34Ej
		mov	eax, [esp+24h+var_C]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
_CMS_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_verify_receipt
_CMS_verify_receipt proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		and	eax, 0FFFFFFBEh
		push	eax
		push	0
		push	0
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_0]
		call	_CMS_verify
		add	esp, 18h
		test	eax, eax
		jle	short locret_F48
		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_cms_Receipt_verify
		add	esp, 8

locret_F48:				; CODE XREF: _CMS_verify_receipt+22j
		retn
_CMS_verify_receipt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_content	proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	_CMS_get0_content
		add	esp, 4
		test	eax, eax
		jz	short loc_F67
		cmp	dword ptr [eax], 0
		jz	short loc_F67
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_F67:				; CODE XREF: _check_content+Ej
					; _check_content+13j
		push	78h ; 'x'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	7Fh ; ''
		push	63h ; 'c'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
_check_content	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cms_copy_content proc near		; CODE XREF: _CMS_EncryptedData_decrypt+A1p
					; _CMS_data+56p ...

var_1008	= dword	ptr -1008h
var_1004	= byte ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		mov	eax, 1008h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1008h+var_4], eax
		mov	eax, [esp+1008h+arg_0]
		push	ebx
		mov	ebx, [esp+100Ch+arg_4]
		push	ebp
		xor	ebp, ebp
		mov	[esp+1010h+var_1008], eax
		push	edi
		test	eax, eax
		jnz	short loc_FE1
		call	_BIO_s_null
		push	eax
		call	_BIO_new
		add	esp, 4

loc_FC1:				; CODE XREF: _cms_copy_content+69j
		mov	edi, eax

loc_FC3:				; CODE XREF: _cms_copy_content+8Aj
		test	edi, edi
		jnz	short loc_100C
		push	4Fh ; 'O'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	41h ; 'A'
		push	6Bh ; 'k'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_10C8
; ---------------------------------------------------------------------------

loc_FE1:				; CODE XREF: _cms_copy_content+31j
		test	[esp+1014h+arg_8], 1
		jz	short loc_FC1
		call	_BIO_s_mem
		push	eax
		call	_BIO_new
		push	0
		push	0
		mov	edi, eax
		push	82h ; 'Ç'
		push	edi
		call	_BIO_ctrl
		add	esp, 14h
		jmp	short loc_FC3
; ---------------------------------------------------------------------------

loc_100C:				; CODE XREF: _cms_copy_content+45j
		push	esi
		push	1000h
		lea	eax, [esp+101Ch+var_1004]
		push	eax
		push	ebx
		call	_BIO_read
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jle	short loc_1052

loc_1026:				; CODE XREF: _cms_copy_content+D0j
		push	esi
		lea	eax, [esp+101Ch+var_1004]
		push	eax
		push	edi
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	short loc_10B6
		push	1000h
		lea	eax, [esp+101Ch+var_1004]
		push	eax
		push	ebx
		call	_BIO_read
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jg	short loc_1026

loc_1052:				; CODE XREF: _cms_copy_content+A4j
		push	ebx
		call	_BIO_method_type
		add	esp, 4
		cmp	eax, 20Ah
		jnz	short loc_1075
		push	0
		push	0
		push	71h ; 'q'
		push	ebx
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jz	short loc_10B6

loc_1075:				; CODE XREF: _cms_copy_content+E0j
		test	esi, esi
		mov	esi, [esp+1018h+var_1008]
		js	short $err$31
		test	[esp+1018h+arg_8], 1
		jz	short loc_10AF
		push	esi
		push	edi
		call	_SMIME_text
		add	esp, 8
		test	eax, eax
		jnz	short loc_10AF
		push	66h ; 'f'
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	8Ch ; 'å'
		push	6Bh ; 'k'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$31
; ---------------------------------------------------------------------------

loc_10AF:				; CODE XREF: _cms_copy_content+105j
					; _cms_copy_content+113j
		mov	ebp, 1
		jmp	short $err$31
; ---------------------------------------------------------------------------

loc_10B6:				; CODE XREF: _cms_copy_content+B7j
					; _cms_copy_content+F3j
		mov	esi, [esp+1018h+var_1008]

$err$31:				; CODE XREF: _cms_copy_content+FBj
					; _cms_copy_content+12Dj ...
		cmp	edi, esi
		pop	esi
		jz	short loc_10C8
		push	edi
		call	_BIO_free
		add	esp, 4

loc_10C8:				; CODE XREF: _cms_copy_content+5Cj
					; _cms_copy_content+13Dj
		mov	ecx, [esp+1014h+var_4]
		mov	eax, ebp
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1008h
		retn
_cms_copy_content endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cms_kari_set1_pkey proc near		; CODE XREF: _CMS_decrypt_set1_pkey+C1p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	[esp+8+arg_4]
		call	_CMS_RecipientInfo_kari_get0_reks
		mov	ebp, [esp+0Ch+arg_C]
		add	esp, 4
		mov	edi, eax
		test	ebp, ebp
		jnz	short loc_1101
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1101:				; CODE XREF: _cms_kari_set1_pkey+16j
		push	ebx
		push	esi
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_1139
		xchg	ax, ax

loc_1114:				; CODE XREF: _cms_kari_set1_pkey+53j
		push	esi
		push	edi
		call	_sk_value
		mov	ebx, eax
		push	ebp
		push	ebx
		call	_CMS_RecipientEncryptedKey_cert_cmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_1140
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_1114

loc_1139:				; CODE XREF: _cms_kari_set1_pkey+2Cj
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1140:				; CODE XREF: _cms_kari_set1_pkey+45j
		push	[esp+10h+arg_8]
		mov	edi, [esp+14h+arg_4]
		push	edi
		call	_CMS_RecipientInfo_kari_set0_pkey
		push	ebx
		push	edi
		push	[esp+20h+arg_0]
		call	_CMS_RecipientInfo_kari_decrypt
		push	0
		push	edi
		mov	esi, eax
		call	_CMS_RecipientInfo_kari_set0_pkey
		add	esp, 1Ch
		xor	eax, eax
		test	esi, esi
		setnle	al
		pop	esi
		pop	ebx
		pop	edi
		lea	eax, ds:0FFFFFFFFh[eax*2]
		pop	ebp
		retn
_cms_kari_set1_pkey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 117Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cms_signerinfo_verify_cert proc near	; CODE XREF: _CMS_verify+1BDp

var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8Ch ; 'å'
		call	__chkstk
		push	edi
		xor	edi, edi
		lea	eax, [esp+90h+var_8C]
		push	edi
		push	edi
		push	eax
		push	edi
		push	[esp+0A0h+arg_0]
		call	_CMS_SignerInfo_get0_algs
		push	[esp+0A4h+arg_8]
		lea	eax, [esp+0A8h+var_88]
		push	[esp+0A8h+var_8C]
		push	[esp+0ACh+arg_4]
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 24h
		test	eax, eax
		jnz	short loc_11E0
		push	114h
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	8Dh ; 'ç'
		push	99h ; 'ô'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$7
; ---------------------------------------------------------------------------

loc_11E0:				; CODE XREF: _cms_signerinfo_verify_cert+42j
		lea	eax, [esp+90h+var_88]
		push	offset ??_C@_0L@GGDBHMO@smime_sign?$AA@	; "smime_sign"
		push	eax
		call	_X509_STORE_CTX_set_default
		mov	eax, [esp+98h+arg_C]
		add	esp, 8
		test	eax, eax
		jz	short loc_120B
		push	eax
		lea	eax, [esp+94h+var_88]
		push	eax
		call	_X509_STORE_CTX_set0_crls
		add	esp, 8

loc_120B:				; CODE XREF: _cms_signerinfo_verify_cert+7Fj
		lea	eax, [esp+90h+var_88]
		push	eax
		call	_X509_verify_cert
		add	esp, 4
		test	eax, eax
		jg	short loc_125A
		lea	eax, [esp+90h+var_88]
		push	esi
		push	eax
		call	_X509_STORE_CTX_get_error
		push	11Fh
		push	offset ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ ; ".\\crypto\\cms\\cms_smime.c"
		push	64h ; 'd'
		push	99h ; 'ô'
		push	2Eh ; '.'
		mov	esi, eax
		call	_ERR_put_error
		push	esi
		call	_X509_verify_cert_error_string
		push	eax
		push	offset ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ ;	"Verify	error:"
		push	2
		call	_ERR_add_error_data
		add	esp, 28h
		pop	esi
		jmp	short $err$7
; ---------------------------------------------------------------------------

loc_125A:				; CODE XREF: _cms_signerinfo_verify_cert+9Ej
		mov	edi, 1

$err$7:					; CODE XREF: _cms_signerinfo_verify_cert+62j
					; _cms_signerinfo_verify_cert+DCj
		lea	eax, [esp+90h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 4
		mov	eax, edi
		pop	edi
		add	esp, 8Ch
		retn
_cms_signerinfo_verify_cert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1278h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_free_upto	proc near		; CODE XREF: _CMS_EncryptedData_decrypt+AAp
					; _CMS_decrypt+E3p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jz	short loc_12A7
		push	edi
		mov	edi, [esp+8+arg_0]
		push	esi
		nop

loc_1288:				; CODE XREF: _do_free_upto+29j
		push	edi
		call	_BIO_pop
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 8
		mov	edi, esi
		test	esi, esi
		jz	short loc_12A3
		cmp	esi, ebx
		jnz	short loc_1288

loc_12A3:				; CODE XREF: _do_free_upto+25j
		pop	esi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_12A7:				; CODE XREF: _do_free_upto+7j
		push	[esp+4+arg_0]
		call	_BIO_free_all
		add	esp, 4
		pop	ebx
		retn
_do_free_upto	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12B8h
; COMDAT (pick any)
		public ??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@
; `string'
??_C@_0BJ@JMHGEHFH@?4?2crypto?2cms?2cms_smime?4c?$AA@ db '.\crypto\cms\cms_smime.c',0
					; DATA XREF: _CMS_EncryptedData_decrypt+1Eo
					; _CMS_EncryptedData_decrypt+54o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12D4h
; COMDAT (pick any)
		public ??_C@_0L@GGDBHMO@smime_sign?$AA@
; `string'
??_C@_0L@GGDBHMO@smime_sign?$AA@ db 'smime_sign',0
					; DATA XREF: _cms_signerinfo_verify_cert+68o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12E0h
; COMDAT (pick any)
		public ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@
; `string'
??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ db 'Verify error:',0
					; DATA XREF: _cms_signerinfo_verify_cert+CCo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _CMS_decrypt_set1_key+20p
					; _CMS_decrypt_set1_key+97p ...
		extrn _sk_value:near	; CODE XREF: _CMS_decrypt_set1_key+32p
					; _CMS_decrypt_set1_password+22p ...
		extrn _sk_pop_free:near	; CODE XREF: _CMS_verify+340p
					; _CMS_verify+356p
		extrn _BIO_method_type:near ; CODE XREF: _CMS_verify+230p
					; _cms_copy_content+D3p
		extrn _BIO_new:near	; CODE XREF: _cms_copy_content+39p
					; _cms_copy_content+71p
		extrn _BIO_free:near	; CODE XREF: _CMS_sign_receipt+10Fp
					; _CMS_verify+14Ep ...
		extrn _BIO_read:near	; CODE XREF: _cms_copy_content+98p
					; _cms_copy_content+C4p
		extrn _BIO_write:near	; CODE XREF: _cms_copy_content+ADp
		extrn _BIO_ctrl:near	; CODE XREF: _CMS_encrypt+10Bp
					; _CMS_final+4Cp ...
		extrn _BIO_pop:near	; CODE XREF: _CMS_verify+146p
					; _do_free_upto+11p
		extrn _BIO_free_all:near ; CODE	XREF: _CMS_data+5Ep
					; _CMS_encrypt+13Ep ...
		extrn _BIO_s_mem:near	; CODE XREF: _cms_copy_content+6Bp
		extrn _BIO_new_mem_buf:near ; CODE XREF: _CMS_sign_receipt+C8p
					; _CMS_verify+253p
		extrn _BIO_s_null:near	; CODE XREF: _cms_copy_content+33p
		extrn _ERR_put_error:near ; CODE XREF: _CMS_EncryptedData_decrypt+2Cp
					; _CMS_EncryptedData_decrypt+5Fp ...
		extrn _ERR_clear_error:near ; CODE XREF: _CMS_decrypt_set1_key+8Cp
					; _CMS_decrypt_set1_pkey:loc_5D6p
		extrn _ERR_add_error_data:near ; CODE XREF: _cms_signerinfo_verify_cert+D3p
		extrn _SMIME_crlf_copy:near ; CODE XREF: _CMS_encrypt+FFp
					; _CMS_final+40p
		extrn _SMIME_text:near	; CODE XREF: _cms_copy_content+109p
		extrn _OBJ_nid2obj:near	; CODE XREF: _CMS_sign_receipt+5Cp
		extrn _OBJ_obj2nid:near	; CODE XREF: _CMS_EncryptedData_decrypt+Cp
					; _CMS_data+Cp	...
		extrn _EVP_sha1:near	; CODE XREF: _CMS_digest_create+8p
		extrn _X509_STORE_CTX_init:near	; CODE XREF: _cms_signerinfo_verify_cert+38p
		extrn _X509_STORE_CTX_cleanup:near
					; CODE XREF: _cms_signerinfo_verify_cert+E8p
		extrn _X509_STORE_CTX_get_error:near
					; CODE XREF: _cms_signerinfo_verify_cert+A6p
		extrn _X509_STORE_CTX_set0_crls:near
					; CODE XREF: _cms_signerinfo_verify_cert+87p
		extrn _X509_STORE_CTX_set_default:near
					; CODE XREF: _cms_signerinfo_verify_cert+6Ep
		extrn _X509_verify_cert_error_string:near
					; CODE XREF: _cms_signerinfo_verify_cert+C6p
		extrn _X509_free:near	; DATA XREF: _CMS_verify+33Ao
		extrn _X509_CRL_free:near ; DATA XREF: _CMS_verify+350o
		extrn _X509_verify_cert:near ; CODE XREF: _cms_signerinfo_verify_cert+94p
		extrn _CMS_ContentInfo_new:near	; CODE XREF: _CMS_EncryptedData_encrypt+23p
					; _CMS_sign+3p
		extrn _CMS_ContentInfo_free:near ; CODE	XREF: _CMS_EncryptedData_encrypt+7Dp
					; _CMS_data_create+2Cp	...
		extrn _CMS_get0_type:near ; CODE XREF: _CMS_EncryptedData_decrypt+6p
					; _CMS_data+6p	...
		extrn _CMS_dataInit:near ; CODE	XREF: _CMS_EncryptedData_decrypt+86p
					; _CMS_data+3Cp ...
		extrn _CMS_dataFinal:near ; CODE XREF: _CMS_encrypt+112p
					; _CMS_final+56p
		extrn _CMS_get0_content:near ; CODE XREF: _CMS_EncryptedData_decrypt+42p
					; _CMS_decrypt+42p ...
		extrn _CMS_set_detached:near ; CODE XREF: _CMS_EncryptedData_encrypt+58p
					; _CMS_digest_create+2Cp ...
		extrn _CMS_EncryptedData_set1_key:near
					; CODE XREF: _CMS_EncryptedData_decrypt+77p
					; _CMS_EncryptedData_encrypt+3Bp
		extrn _CMS_get0_RecipientInfos:near ; CODE XREF: _CMS_decrypt_set1_key+12p
					; _CMS_decrypt_set1_password+9p ...
		extrn _CMS_RecipientInfo_type:near ; CODE XREF:	_CMS_decrypt_set1_key+3Ap
					; _CMS_decrypt_set1_password+2Ap ...
		extrn _CMS_EnvelopedData_create:near ; CODE XREF: _CMS_encrypt+8p
		extrn _CMS_add1_recipient_cert:near ; CODE XREF: _CMS_encrypt+5Ap
		extrn _CMS_RecipientInfo_set0_pkey:near
					; CODE XREF: _CMS_decrypt_set1_pkey+ECp
					; _CMS_decrypt_set1_pkey+100p
		extrn _CMS_RecipientInfo_ktri_cert_cmp:near
					; CODE XREF: _CMS_decrypt_set1_pkey+DBp
		extrn _CMS_RecipientInfo_set0_key:near
					; CODE XREF: _CMS_decrypt_set1_key+66p
					; _CMS_decrypt_set1_key+7Cp
		extrn _CMS_RecipientInfo_kekri_id_cmp:near
					; CODE XREF: _CMS_decrypt_set1_key+51p
		extrn _CMS_RecipientInfo_set0_password:near
					; CODE XREF: _CMS_decrypt_set1_password+40p
					; _CMS_decrypt_set1_password+53p
		extrn _CMS_RecipientInfo_decrypt:near ;	CODE XREF: _CMS_decrypt_set1_key+70p
					; _CMS_decrypt_set1_password+47p ...
		extrn _CMS_set1_eContentType:near ; CODE XREF: _CMS_sign_receipt+63p
		extrn _CMS_add1_cert:near ; CODE XREF: _CMS_sign+6Dp
		extrn _CMS_get1_certs:near ; CODE XREF:	_CMS_verify+172p
		extrn _CMS_get1_crls:near ; CODE XREF: _CMS_verify+189p
		extrn _CMS_SignedData_init:near	; CODE XREF: _CMS_sign+13p
		extrn _CMS_add1_signer:near ; CODE XREF: _CMS_sign+37p
					; _CMS_sign_receipt+75p
		extrn _CMS_get0_SignerInfos:near ; CODE	XREF: _CMS_verify+63p
		extrn _CMS_set1_signers_certs:near ; CODE XREF:	_CMS_verify+FAp
		extrn _CMS_SignerInfo_get0_algs:near ; CODE XREF: _CMS_verify+C3p
					; _cms_signerinfo_verify_cert+1Cp
		extrn _CMS_SignerInfo_verify:near ; CODE XREF: _CMS_verify+209p
		extrn _CMS_SignerInfo_verify_content:near ; CODE XREF: _CMS_verify+2DAp
		extrn _CMS_signed_get_attr_count:near ;	CODE XREF: _CMS_verify+1FCp
		extrn _CMS_RecipientInfo_kari_get0_reks:near
					; CODE XREF: _cms_kari_set1_pkey+6p
		extrn _CMS_RecipientEncryptedKey_cert_cmp:near
					; CODE XREF: _cms_kari_set1_pkey+3Bp
		extrn _CMS_RecipientInfo_kari_set0_pkey:near
					; CODE XREF: _cms_kari_set1_pkey+65p
					; _cms_kari_set1_pkey+7Ap
		extrn _CMS_RecipientInfo_kari_decrypt:near
					; CODE XREF: _cms_kari_set1_pkey+70p
		extrn _cms_Data_create:near ; CODE XREF: _CMS_data_create+1p
		extrn _cms_DigestedData_create:near ; CODE XREF: _CMS_digest_create+Fp
		extrn _cms_DigestedData_do_final:near ;	CODE XREF: _CMS_digest_verify+9Dp
		extrn _cms_Receipt_verify:near ; CODE XREF: _CMS_verify_receipt+2Cp
		extrn _cms_msgSigDigest_add1:near ; CODE XREF: _CMS_sign_receipt+DEp
		extrn _cms_encode_Receipt:near ; CODE XREF: _CMS_sign_receipt+B5p
		extrn _cms_pkey_get_ri_type:near ; CODE	XREF: _CMS_decrypt_set1_pkey+41p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _cms_copy_content+156p
		extrn __chkstk:near	; CODE XREF: _CMS_decrypt_set1_key+5p
					; _CMS_decrypt_set1_pkey+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _cms_copy_content+Ar


		end
