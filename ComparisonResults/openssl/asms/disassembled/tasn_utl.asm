;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8FFDA9AF1C81E77ED6ADDE92E9CA6D61
; Input	CRC32 :	D96C026A

; File Name   :	C:\compspace\Diff\openssl\obj\tasn_utl.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_do_adb
_asn1_do_adb	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		test	dword ptr [esi], 300h
		jnz	short loc_11
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_11:					; CODE XREF: _asn1_do_adb+Bj
		mov	eax, [esi+10h]
		push	edi
		call	eax
		mov	ecx, [esp+8+arg_0]
		mov	edi, eax
		mov	eax, [edi+4]
		add	eax, [ecx]
		jnz	short loc_2E
		mov	eax, [edi+18h]
		test	eax, eax
		jz	short $err$22
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2E:					; CODE XREF: _asn1_do_adb+22j
		test	dword ptr [esi], 100h
		push	dword ptr [eax]
		jz	short loc_3F
		call	_OBJ_obj2nid
		jmp	short loc_44
; ---------------------------------------------------------------------------

loc_3F:					; CODE XREF: _asn1_do_adb+36j
		call	_ASN1_INTEGER_get

loc_44:					; CODE XREF: _asn1_do_adb+3Dj
		mov	edx, [edi+10h]
		add	esp, 4
		xor	ecx, ecx
		mov	esi, eax
		mov	eax, [edi+0Ch]
		test	edx, edx
		jle	short loc_61

loc_55:					; CODE XREF: _asn1_do_adb+5Fj
		cmp	[eax], esi
		jz	short loc_8F
		inc	ecx
		add	eax, 18h
		cmp	ecx, edx
		jl	short loc_55

loc_61:					; CODE XREF: _asn1_do_adb+53j
		mov	eax, [edi+14h]
		test	eax, eax
		jnz	short loc_8C

$err$22:				; CODE XREF: _asn1_do_adb+29j
		cmp	[esp+8+arg_8], 0
		jz	short loc_8A
		push	111h
		push	offset ??_C@_0BJ@GCGGIIFI@?4?2crypto?2asn1?2tasn_utl?4c?$AA@ ; ".\\crypto\\asn1\\tasn_utl.c"
		push	0A4h ; '¤'
		push	6Eh ; 'n'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_8A:					; CODE XREF: _asn1_do_adb+6Dj
		xor	eax, eax

loc_8C:					; CODE XREF: _asn1_do_adb+66j
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_8F:					; CODE XREF: _asn1_do_adb+57j
		pop	edi
		add	eax, 4
		pop	esi
		retn
_asn1_do_adb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_do_lock
_asn1_do_lock	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_8]
		mov	al, [ecx]
		cmp	al, 1
		jz	short loc_A6
		cmp	al, 6
		jnz	short loc_E5

loc_A6:					; CODE XREF: _asn1_do_lock+8j
		mov	ecx, [ecx+10h]
		test	ecx, ecx
		jz	short loc_E5
		test	byte ptr [ecx+4], 1
		jz	short loc_E5
		mov	eax, [esp+arg_0]
		mov	edx, [ecx+8]
		add	edx, [eax]
		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_D0
		mov	dword ptr [edx], 1
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_D0:					; CODE XREF: _asn1_do_lock+2Aj
		push	76h ; 'v'
		push	offset ??_C@_0BJ@GCGGIIFI@?4?2crypto?2asn1?2tasn_utl?4c?$AA@ ; ".\\crypto\\asn1\\tasn_utl.c"
		push	dword ptr [ecx+0Ch]
		push	eax
		push	edx
		call	_CRYPTO_add_lock
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_E5:					; CODE XREF: _asn1_do_lock+Cj
					; _asn1_do_lock+13j ...
		xor	eax, eax
		retn
_asn1_do_lock	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_enc_free
_asn1_enc_free	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_133
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short locret_133
		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [eax+10h]
		test	esi, esi
		jz	short loc_132
		test	byte ptr [esi+4], 2
		jz	short loc_132
		mov	esi, [esi+14h]
		add	esi, ecx
		jz	short loc_132
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_11E
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_11E:				; CODE XREF: _asn1_enc_free+2Bj
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 1

loc_132:				; CODE XREF: _asn1_enc_free+18j
					; _asn1_enc_free+1Ej ...
		pop	esi

locret_133:				; CODE XREF: _asn1_enc_free+6j
					; _asn1_enc_free+Cj
		retn
_asn1_enc_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 134h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_enc_init
_asn1_enc_init	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_16E
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short locret_16E
		mov	eax, [esp+arg_4]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short locret_16E
		test	byte ptr [eax+4], 2
		jz	short locret_16E
		mov	eax, [eax+14h]
		add	eax, ecx
		jz	short locret_16E
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 1

locret_16E:				; CODE XREF: _asn1_enc_init+6j
					; _asn1_enc_init+Cj ...
		retn
_asn1_enc_init	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 170h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_enc_restore
_asn1_enc_restore proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	esi
		test	eax, eax
		jz	short loc_1CF
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_1CF
		mov	eax, [esp+4+arg_C]
		mov	esi, [eax+10h]
		test	esi, esi
		jz	short loc_1CF
		test	byte ptr [esi+4], 2
		jz	short loc_1CF
		mov	esi, [esi+14h]
		add	esi, ecx
		jz	short loc_1CF
		cmp	dword ptr [esi+8], 0
		jnz	short loc_1CF
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_1BA
		push	dword ptr [esi+4] ; Size
		push	dword ptr [esi]	; Src
		push	dword ptr [edi]	; Dst
		call	_memcpy
		mov	eax, [esi+4]
		add	esp, 0Ch
		add	[edi], eax

loc_1BA:				; CODE XREF: _asn1_enc_restore+34j
		mov	ecx, [esp+8+arg_0]
		pop	edi
		test	ecx, ecx
		jz	short loc_1C8
		mov	eax, [esi+4]
		mov	[ecx], eax

loc_1C8:				; CODE XREF: _asn1_enc_restore+51j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1CF:				; CODE XREF: _asn1_enc_restore+7j
					; _asn1_enc_restore+Dj	...
		xor	eax, eax
		pop	esi
		retn
_asn1_enc_restore endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl asn1_enc_save(int, void *Src, size_t Size, int)
		public _asn1_enc_save
_asn1_enc_save	proc near

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_24B
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_24B
		mov	eax, [esp+4+arg_C]
		mov	esi, [eax+10h]
		test	esi, esi
		jz	short loc_24B
		test	byte ptr [esi+4], 2
		jz	short loc_24B
		mov	esi, [esi+14h]
		add	esi, ecx
		jz	short loc_24B
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_20A
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_20A:				; CODE XREF: _asn1_enc_save+2Bj
		push	edi
		mov	edi, [esp+8+Size]
		push	0AEh ; '®'
		push	offset ??_C@_0BJ@GCGGIIFI@?4?2crypto?2asn1?2tasn_utl?4c?$AA@ ; ".\\crypto\\asn1\\tasn_utl.c"
		push	edi
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_22B
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_22B:				; CODE XREF: _asn1_enc_save+52j
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[esi+4], edi
		mov	dword ptr [esi+8], 0
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_24B:				; CODE XREF: _asn1_enc_save+7j
					; _asn1_enc_save+Dj ...
		mov	eax, 1
		pop	esi
		retn
_asn1_enc_save	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 254h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_get_choice_selector
_asn1_get_choice_selector proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		mov	edx, [eax+4]
		mov	eax, [ecx]
		mov	eax, [edx+eax]
		retn
_asn1_get_choice_selector endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_get_enc_ptr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_28D
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_28D
		mov	eax, [esp+arg_4]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_28D
		test	byte ptr [eax+4], 2
		jz	short loc_28D
		mov	eax, [eax+14h]
		add	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_28D:				; CODE XREF: _asn1_get_enc_ptr+6j
					; _asn1_get_enc_ptr+Cj	...
		xor	eax, eax
		retn
_asn1_get_enc_ptr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_get_field_ptr
_asn1_get_field_ptr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	dword ptr [eax], 400h
		jz	short loc_2A1
		mov	eax, [esp+arg_0]
		retn
; ---------------------------------------------------------------------------

loc_2A1:				; CODE XREF: _asn1_get_field_ptr+Aj
		mov	ecx, [esp+arg_0]
		mov	eax, [eax+8]
		add	eax, [ecx]
		retn
_asn1_get_field_ptr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _asn1_set_choice_selector
_asn1_set_choice_selector proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [eax+4]
		mov	eax, [esp+arg_0]
		add	edx, [eax]
		mov	eax, [edx]
		mov	[edx], ecx
		retn
_asn1_set_choice_selector endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C4h
; COMDAT (pick any)
		public ??_C@_0BJ@GCGGIIFI@?4?2crypto?2asn1?2tasn_utl?4c?$AA@
; `string'
??_C@_0BJ@GCGGIIFI@?4?2crypto?2asn1?2tasn_utl?4c?$AA@ db '.\crypto\asn1\tasn_utl.c',0
					; DATA XREF: _asn1_do_adb+74o
					; _asn1_do_lock+3Ao ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_add_lock:near ; CODE XREF: _asn1_do_lock+44p
		extrn _CRYPTO_malloc:near ; CODE XREF: _asn1_enc_save+46p
		extrn _CRYPTO_free:near	; CODE XREF: _asn1_enc_free+2Ep
					; _asn1_enc_save+2Ep
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _asn1_do_adb:loc_3Fp
		extrn _OBJ_obj2nid:near	; CODE XREF: _asn1_do_adb+38p
		extrn _ERR_put_error:near ; CODE XREF: _asn1_do_adb+82p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _asn1_enc_restore+3Dp
					; _asn1_enc_save+5Dp


		end
