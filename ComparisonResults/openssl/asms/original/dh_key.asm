; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@	; `string'
;	COMDAT ??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@
CONST	SEGMENT
??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@ DB 'OpenSSL DH Method', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_dh_ossl DD	FLAT:??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@
	DD	FLAT:_generate_key
	DD	FLAT:_compute_key
	DD	FLAT:_dh_bn_mod_exp
	DD	FLAT:_dh_init
	DD	FLAT:_dh_finish
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	_DH_OpenSSL
PUBLIC	_DH_generate_key
PUBLIC	_DH_compute_key
PUBLIC	_DH_compute_key_padded
PUBLIC	??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@ ; `string'
EXTRN	__imp__memmove:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_rand:PROC
EXTRN	_BN_rand_range:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_init:PROC
EXTRN	_BN_bn2bin:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_mod_exp_mont:PROC
EXTRN	_BN_mod_exp_mont_word:PROC
EXTRN	_BN_MONT_CTX_free:PROC
EXTRN	_BN_MONT_CTX_set_locked:PROC
EXTRN	_DH_check_pub_key:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
CONST	SEGMENT
??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@ DB '.\crypto\dh\dh_key.c'
	DB	00H						; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dh_finish
_TEXT	SEGMENT
_dh$ = 8						; size = 4
_dh_finish PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 286
	mov	eax, DWORD PTR _dh$[esp-4]
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	je	SHORT $LN4@dh_finish
; Line 287
	push	eax
	call	_BN_MONT_CTX_free
	add	esp, 4
$LN4@dh_finish:
; Line 288
	mov	eax, 1
; Line 289
	ret	0
_dh_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dh_init
_TEXT	SEGMENT
_dh$ = 8						; size = 4
_dh_init PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 280
	mov	eax, DWORD PTR _dh$[esp-4]
	or	DWORD PTR [eax+28], 1
; Line 281
	mov	eax, 1
; Line 282
	ret	0
_dh_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dh_bn_mod_exp
_TEXT	SEGMENT
_dh$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_p$ = 20						; size = 4
_m$ = 24						; size = 4
_ctx$ = 28						; size = 4
_m_ctx$ = 32						; size = 4
_dh_bn_mod_exp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 271
	mov	ecx, DWORD PTR _a$[esp-4]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN2@dh_bn_mod_
	mov	eax, DWORD PTR _dh$[esp-4]
	test	BYTE PTR [eax+28], 2
	je	SHORT $LN2@dh_bn_mod_
; Line 273
	push	DWORD PTR _m_ctx$[esp-4]
	mov	eax, DWORD PTR [ecx]
	push	DWORD PTR _ctx$[esp]
	push	DWORD PTR _m$[esp+4]
	push	DWORD PTR _p$[esp+8]
	push	DWORD PTR [eax]
	push	DWORD PTR _r$[esp+16]
	call	_BN_mod_exp_mont_word
; Line 275
	add	esp, 24					; 00000018H
; Line 276
	ret	0
$LN2@dh_bn_mod_:
; Line 275
	push	DWORD PTR _m_ctx$[esp-4]
	push	DWORD PTR _ctx$[esp]
	push	DWORD PTR _m$[esp+4]
	push	DWORD PTR _p$[esp+8]
	push	ecx
	push	DWORD PTR _r$[esp+16]
	call	_BN_mod_exp_mont
	add	esp, 24					; 00000018H
; Line 276
	ret	0
_dh_bn_mod_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _compute_key
_TEXT	SEGMENT
_tmp$1$ = -4						; size = 4
_key$ = 8						; size = 4
_pub_key$ = 12						; size = 4
_check_result$ = 16					; size = 4
_dh$ = 16						; size = 4
_compute_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 209
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 216
	mov	esi, DWORD PTR _dh$[esp+12]
	xor	ebp, ebp
	or	ebx, -1
	push	DWORD PTR [esi+8]
	call	_BN_num_bits
	add	esp, 4
	cmp	eax, 10000				; 00002710H
	jle	SHORT $LN2@compute_ke
; Line 217
	push	217					; 000000d9H
	push	OFFSET ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
	push	103					; 00000067H
	push	102					; 00000066H
	push	5
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 260
	mov	eax, ebx
	pop	esi
	pop	ebp
	pop	ebx
; Line 261
	pop	ecx
	ret	0
$LN2@compute_ke:
	push	edi
; Line 221
	call	_BN_CTX_new
	mov	edi, eax
; Line 222
	test	edi, edi
	je	$LN13@compute_ke
; Line 224
	push	edi
	call	_BN_CTX_start
; Line 225
	push	edi
	call	_BN_CTX_get
	add	esp, 8
	mov	DWORD PTR _tmp$1$[esp+20], eax
; Line 227
	cmp	DWORD PTR [esi+24], ebp
	jne	SHORT $LN4@compute_ke
; Line 228
	push	228					; 000000e4H
	push	OFFSET ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
	push	100					; 00000064H
; Line 229
	jmp	$LN15@compute_ke
$LN4@compute_ke:
; Line 232
	test	BYTE PTR [esi+28], 1
	je	SHORT $LN7@compute_ke
; Line 233
	push	edi
	push	DWORD PTR [esi+8]
	lea	eax, DWORD PTR [esi+32]
	push	26					; 0000001aH
	push	eax
	call	_BN_MONT_CTX_set_locked
	add	esp, 16					; 00000010H
	mov	ebp, eax
; Line 235
	test	BYTE PTR [esi+28], 2
	jne	SHORT $LN6@compute_ke
; Line 237
	mov	ecx, DWORD PTR [esi+24]
	or	DWORD PTR [ecx+16], 4
$LN6@compute_ke:
; Line 239
	test	ebp, ebp
	je	SHORT $err$18
$LN7@compute_ke:
; Line 243
	lea	eax, DWORD PTR _check_result$[esp+16]
	push	eax
	push	DWORD PTR _pub_key$[esp+20]
	push	esi
	call	_DH_check_pub_key
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN9@compute_ke
	cmp	DWORD PTR _check_result$[esp+16], 0
	jne	SHORT $LN9@compute_ke
; Line 248
	mov	eax, DWORD PTR [esi+68]
	push	ebp
	mov	ebp, DWORD PTR _tmp$1$[esp+24]
	push	edi
	push	DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+12]
	push	DWORD PTR [esi+24]
	push	DWORD PTR _pub_key$[esp+32]
	push	ebp
	push	esi
	call	eax
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN10@compute_ke
; Line 250
	push	250					; 000000faH
	push	OFFSET ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
	push	3
; Line 251
	jmp	SHORT $LN15@compute_ke
$LN10@compute_ke:
; Line 254
	push	DWORD PTR _key$[esp+16]
	push	ebp
	call	_BN_bn2bin
	add	esp, 8
	mov	ebx, eax
	jmp	SHORT $err$18
$LN9@compute_ke:
; Line 244
	push	244					; 000000f4H
	push	OFFSET ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
	push	102					; 00000066H
$LN15@compute_ke:
	push	102					; 00000066H
	push	5
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$18:
; Line 257
	push	edi
	call	_BN_CTX_end
; Line 258
	push	edi
	call	_BN_CTX_free
	add	esp, 8
$LN13@compute_ke:
; Line 260
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 261
	pop	ecx
	ret	0
_compute_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _generate_key
_TEXT	SEGMENT
_ctx$1$ = -32						; size = 4
_mont$1$ = -28						; size = 4
_ok$1$ = -24						; size = 4
_local_prk$1 = -20					; size = 20
_dh$ = 8						; size = 4
_generate_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 129
	mov	eax, 32					; 00000020H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 131
	xor	ebp, ebp
	mov	DWORD PTR _ok$1$[esp+44], 0
	push	edi
; Line 134
	mov	DWORD PTR _mont$1$[esp+48], ebp
; Line 135
	xor	ebx, ebx
	xor	esi, esi
; Line 137
	call	_BN_CTX_new
; Line 138
	mov	edi, DWORD PTR _dh$[esp+44]
	mov	DWORD PTR _ctx$1$[esp+48], eax
	test	eax, eax
	je	$LN44@generate_k
; Line 141
	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	jne	SHORT $LN6@generate_k
; Line 142
	call	_BN_new
	mov	esi, eax
; Line 143
	test	esi, esi
	je	$LN39@generate_k
; Line 145
	lea	ebp, DWORD PTR [ebx+1]
$LN6@generate_k:
; Line 149
	mov	ebx, DWORD PTR [edi+20]
	test	ebx, ebx
	jne	SHORT $LN9@generate_k
; Line 150
	call	_BN_new
	mov	ebx, eax
; Line 151
	test	ebx, ebx
	je	$LN39@generate_k
$LN9@generate_k:
; Line 156
	test	BYTE PTR [edi+28], 1
	je	SHORT $LN13@generate_k
; Line 157
	push	DWORD PTR _ctx$1$[esp+48]
	lea	eax, DWORD PTR [edi+32]
	push	DWORD PTR [edi+8]
	push	26					; 0000001aH
	push	eax
	call	_BN_MONT_CTX_set_locked
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mont$1$[esp+48], eax
; Line 159
	test	eax, eax
	je	$LN39@generate_k
$LN13@generate_k:
; Line 163
	test	ebp, ebp
	je	SHORT $LN21@generate_k
; Line 164
	cmp	DWORD PTR [edi+36], 0
	je	SHORT $LN15@generate_k
$LL4@generate_k:
; Line 166
	push	DWORD PTR [edi+36]
	push	esi
	call	_BN_rand_range
	add	esp, 8
	test	eax, eax
	je	$LN39@generate_k
; Line 169
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LL4@generate_k
	cmp	eax, 1
	jne	SHORT $LN21@generate_k
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN21@generate_k
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LL4@generate_k
; Line 170
	jmp	SHORT $LN21@generate_k
$LN15@generate_k:
; Line 172
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	jne	SHORT $LN30@generate_k
	push	DWORD PTR [edi+8]
	call	_BN_num_bits
	add	esp, 4
	dec	eax
$LN30@generate_k:
; Line 173
	push	0
	push	0
	push	eax
	push	esi
	call	_BN_rand
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN39@generate_k
$LN21@generate_k:
; Line 182
	test	BYTE PTR [edi+28], 2
	jne	SHORT $LN22@generate_k
; Line 183
	lea	eax, DWORD PTR _local_prk$1[esp+48]
	push	eax
	call	_BN_init
; Line 185
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _local_prk$1[esp+52]
	mov	ecx, DWORD PTR [esi+16]
	add	esp, 4
	mov	DWORD PTR _local_prk$1[esp+48], eax
	and	ecx, -2					; fffffffeH
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _local_prk$1[esp+52], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _local_prk$1[esp+56], eax
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _local_prk$1[esp+60], eax
	mov	eax, DWORD PTR _local_prk$1[esp+64]
	and	eax, 1
	or	ecx, eax
	or	ecx, 6
	mov	DWORD PTR _local_prk$1[esp+64], ecx
; Line 186
	jmp	SHORT $LN23@generate_k
$LN22@generate_k:
; Line 187
	mov	edx, esi
$LN23@generate_k:
; Line 189
	push	DWORD PTR _mont$1$[esp+48]
	mov	ebp, DWORD PTR _ctx$1$[esp+52]
	mov	eax, DWORD PTR [edi+68]
	push	ebp
	push	DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+12]
	push	edx
	push	DWORD PTR [edi+12]
	push	ebx
	push	edi
	call	eax
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN38@generate_k
; Line 193
	mov	DWORD PTR [edi+20], ebx
; Line 194
	mov	DWORD PTR [edi+24], esi
; Line 195
	mov	DWORD PTR _ok$1$[esp+48], 1
; Line 197
	jmp	SHORT $LN25@generate_k
$LN39@generate_k:
	mov	ebp, DWORD PTR _ctx$1$[esp+48]
	jmp	SHORT $LN38@generate_k
$LN44@generate_k:
	mov	ebp, eax
$LN38@generate_k:
; Line 198
	push	198					; 000000c6H
	push	OFFSET ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
	push	3
	push	103					; 00000067H
	push	5
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN25@generate_k:
; Line 200
	test	ebx, ebx
	je	SHORT $LN26@generate_k
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN26@generate_k
; Line 201
	push	ebx
	call	_BN_free
	add	esp, 4
$LN26@generate_k:
; Line 202
	test	esi, esi
	je	SHORT $LN27@generate_k
	cmp	DWORD PTR [edi+24], 0
	jne	SHORT $LN27@generate_k
; Line 203
	push	esi
	call	_BN_free
	add	esp, 4
$LN27@generate_k:
; Line 204
	push	ebp
	call	_BN_CTX_free
; Line 205
	mov	eax, DWORD PTR _ok$1$[esp+52]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 206
	add	esp, 32					; 00000020H
	ret	0
_generate_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _DH_compute_key_padded
_TEXT	SEGMENT
_key$ = 8						; size = 4
_pub_key$ = 12						; size = 4
_dh$ = 16						; size = 4
_DH_compute_key_padded PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 98
	push	ebx
; Line 100
	mov	ebx, DWORD PTR _key$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _dh$[esp+8]
	push	edi
	push	DWORD PTR _pub_key$[esp+12]
	mov	eax, DWORD PTR [edi+68]
	push	ebx
	mov	eax, DWORD PTR [eax+8]
	call	eax
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 101
	test	esi, esi
	jle	SHORT $LN1@DH_compute
; Line 103
	push	DWORD PTR [edi+8]
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	lea	edi, DWORD PTR [edx+eax]
	sar	edi, 3
	sub	edi, esi
; Line 104
	test	edi, edi
	jle	SHORT $LN3@DH_compute
; Line 105
	push	esi
	lea	ecx, DWORD PTR [edi+ebx]
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
; Line 106
	push	edi
	push	0
	push	ebx
	call	_memset
	add	esp, 24					; 00000018H
$LN3@DH_compute:
; Line 108
	lea	eax, DWORD PTR [edi+esi]
$LN1@DH_compute:
	pop	edi
	pop	esi
	pop	ebx
; Line 109
	ret	0
_DH_compute_key_padded ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _DH_compute_key
_TEXT	SEGMENT
_key$ = 8						; size = 4
_pub_key$ = 12						; size = 4
_dh$ = 16						; size = 4
_DH_compute_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 94
	mov	eax, DWORD PTR _dh$[esp-4]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _dh$[esp-4], eax
	mov	eax, DWORD PTR [ecx+8]
	jmp	eax
_DH_compute_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _DH_generate_key
_TEXT	SEGMENT
_dh$ = 8						; size = 4
_DH_generate_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 82
	mov	eax, DWORD PTR _dh$[esp-4]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _dh$[esp-4], eax
	mov	eax, DWORD PTR [ecx+4]
	jmp	eax
_DH_generate_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _DH_OpenSSL
_TEXT	SEGMENT
_DH_OpenSSL PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dh\dh_key.c
; Line 125
	mov	eax, OFFSET _dh_ossl
; Line 126
	ret	0
_DH_OpenSSL ENDP
_TEXT	ENDS
END
