; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\idea\i_cfb64.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_idea_cfb64_encrypt
EXTRN	_idea_encrypt:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _idea_cfb64_encrypt
_TEXT	SEGMENT
_ti$ = -8						; size = 8
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_in$1$ = 16						; size = 4
_out$1$ = 16						; size = 4
_length$ = 16						; size = 4
_schedule$ = 20						; size = 4
_ivec$ = 24						; size = 4
_num$ = 28						; size = 4
tv486 = 32						; size = 4
_out$2$ = 32						; size = 4
_encrypt$ = 32						; size = 4
_idea_cfb64_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\idea\i_cfb64.c
; Line 71
	mov	eax, 8
	call	__chkstk
; Line 79
	cmp	DWORD PTR _encrypt$[esp+4], 0
	mov	eax, DWORD PTR _num$[esp+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _length$[esp+12]
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	je	$LN12@idea_cfb64
; Line 80
	test	ebp, ebp
	je	$LN21@idea_cfb64
	mov	eax, DWORD PTR _in$[esp+20]
	mov	ecx, DWORD PTR _out$[esp+20]
	sub	eax, ecx
	mov	edx, DWORD PTR _ivec$[esp+20]
	mov	DWORD PTR _out$1$[esp+20], ecx
	mov	DWORD PTR tv486[esp+20], eax
$LL2@idea_cfb64:
	dec	ebp
; Line 81
	test	esi, esi
	jne	$LN8@idea_cfb64
; Line 82
	movzx	ecx, BYTE PTR [edx]
	lea	ebx, DWORD PTR [edx+1]
	movzx	eax, BYTE PTR [ebx]
; Line 84
	movzx	edx, BYTE PTR [ebx+3]
; Line 86
	push	DWORD PTR _schedule$[esp+20]
	shl	eax, 16					; 00000010H
	shl	ecx, 24					; 00000018H
	or	ecx, eax
	shl	edx, 24					; 00000018H
	movzx	eax, BYTE PTR [ebx+1]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+2]
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+4]
	mov	DWORD PTR _ti$[esp+28], ecx
	movzx	ecx, BYTE PTR [ebx+5]
	shl	eax, 16					; 00000010H
	or	edx, eax
	shl	ecx, 8
	movzx	eax, BYTE PTR [ebx+6]
	or	ecx, eax
	lea	eax, DWORD PTR _ti$[esp+28]
	or	ecx, edx
	push	eax
	mov	DWORD PTR _ti$[esp+36], ecx
	call	_idea_encrypt
; Line 89
	mov	ecx, DWORD PTR _ti$[esp+32]
	add	esp, 8
	mov	edx, DWORD PTR _ivec$[esp+20]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edx], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebx], al
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [ebx+1], al
	mov	BYTE PTR [ebx+2], cl
; Line 91
	mov	ecx, DWORD PTR _ti$[esp+28]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ebx+3], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebx+4], al
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [ebx+5], al
	mov	eax, DWORD PTR tv486[esp+20]
	mov	BYTE PTR [ebx+6], cl
	mov	ecx, DWORD PTR _out$1$[esp+20]
$LN8@idea_cfb64:
; Line 94
	mov	al, BYTE PTR [eax+ecx]
	xor	al, BYTE PTR [esi+edx]
; Line 95
	mov	BYTE PTR [ecx], al
	inc	ecx
; Line 96
	mov	BYTE PTR [esi+edx], al
; Line 97
	inc	esi
	mov	eax, DWORD PTR tv486[esp+20]
	and	esi, 7
	mov	DWORD PTR _out$1$[esp+20], ecx
	test	ebp, ebp
	jne	$LL2@idea_cfb64
; Line 122
	mov	eax, DWORD PTR _num$[esp+20]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 123
	add	esp, 8
	ret	0
$LN12@idea_cfb64:
; Line 100
	test	ebp, ebp
	je	$LN21@idea_cfb64
	mov	eax, DWORD PTR _out$[esp+20]
	mov	edx, DWORD PTR _ivec$[esp+20]
	mov	DWORD PTR _out$2$[esp+20], eax
	mov	eax, DWORD PTR _in$[esp+20]
	mov	DWORD PTR _in$1$[esp+20], eax
$LL4@idea_cfb64:
	dec	ebp
; Line 101
	test	esi, esi
	jne	$LN9@idea_cfb64
; Line 102
	movzx	ecx, BYTE PTR [edx]
	lea	ebx, DWORD PTR [edx+1]
	movzx	eax, BYTE PTR [ebx]
; Line 104
	movzx	edx, BYTE PTR [ebx+3]
; Line 106
	push	DWORD PTR _schedule$[esp+20]
	shl	eax, 16					; 00000010H
	shl	ecx, 24					; 00000018H
	or	ecx, eax
	shl	edx, 24					; 00000018H
	movzx	eax, BYTE PTR [ebx+1]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+2]
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+4]
	mov	DWORD PTR _ti$[esp+28], ecx
	movzx	ecx, BYTE PTR [ebx+5]
	shl	eax, 16					; 00000010H
	or	edx, eax
	shl	ecx, 8
	movzx	eax, BYTE PTR [ebx+6]
	or	ecx, eax
	lea	eax, DWORD PTR _ti$[esp+28]
	or	ecx, edx
	push	eax
	mov	DWORD PTR _ti$[esp+36], ecx
	call	_idea_encrypt
; Line 109
	mov	ecx, DWORD PTR _ti$[esp+32]
	add	esp, 8
	mov	edx, DWORD PTR _ivec$[esp+20]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edx], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebx], al
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [ebx+1], al
	mov	BYTE PTR [ebx+2], cl
; Line 111
	mov	ecx, DWORD PTR _ti$[esp+28]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ebx+3], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebx+4], al
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [ebx+5], al
	mov	eax, DWORD PTR _in$1$[esp+20]
	mov	BYTE PTR [ebx+6], cl
$LN9@idea_cfb64:
; Line 114
	mov	cl, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _in$1$[esp+20], eax
; Line 115
	mov	al, BYTE PTR [esi+edx]
; Line 116
	mov	BYTE PTR [esi+edx], cl
; Line 117
	xor	cl, al
	mov	eax, DWORD PTR _out$2$[esp+20]
; Line 118
	inc	esi
	and	esi, 7
	mov	BYTE PTR [eax], cl
	inc	eax
	mov	DWORD PTR _out$2$[esp+20], eax
	mov	eax, DWORD PTR _in$1$[esp+20]
	test	ebp, ebp
	jne	$LL4@idea_cfb64
; Line 122
	mov	eax, DWORD PTR _num$[esp+20]
$LN21@idea_cfb64:
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 123
	add	esp, 8
	ret	0
_idea_cfb64_encrypt ENDP
_TEXT	ENDS
END
