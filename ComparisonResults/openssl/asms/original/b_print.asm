; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BIO_printf
PUBLIC	_BIO_vprintf
PUBLIC	_BIO_snprintf
PUBLIC	_BIO_vsnprintf
PUBLIC	??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_02MDDDDAID@0x?$AA@			; `string'
PUBLIC	??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@	; `string'
PUBLIC	??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@	; `string'
PUBLIC	??_C@_0L@FPFMPDDA@0123456789?$AA@		; `string'
PUBLIC	??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@ ; `string'
PUBLIC	??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@		; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_CRYPTO_realloc:PROC
EXTRN	_CRYPTO_push_info_:PROC
EXTRN	_CRYPTO_pop_info:PROC
EXTRN	_BIO_write:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldvrm:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@ DB 'doapr()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@
CONST	SEGMENT
??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@ DB '.\crypto\bio\b_pri'
	DB	'nt.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FPFMPDDA@0123456789?$AA@
CONST	SEGMENT
??_C@_0L@FPFMPDDA@0123456789?$AA@ DB '0123456789', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@
CONST	SEGMENT
??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@ DB '0123456789abcdef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
CONST	SEGMENT
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ DB '0123456789ABCDEF', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDDDDAID@0x?$AA@
CONST	SEGMENT
??_C@_02MDDDDAID@0x?$AA@ DB '0x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
CONST	SEGMENT
??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@ DB '<NULL>', 00H	; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _roundv
_TEXT	SEGMENT
_value$ = 8						; size = 8
_roundv	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 599
	movsd	xmm1, QWORD PTR _value$[esp-4]
	cvttsd2si eax, xmm1
	movd	xmm0, eax
; Line 600
	cvtdq2pd xmm0, xmm0
	subsd	xmm1, xmm0
; Line 601
	comisd	xmm1, QWORD PTR __real@3fe0000000000000
	jb	SHORT $LN2@roundv
; Line 602
	inc	eax
$LN2@roundv:
; Line 604
	ret	0
_roundv	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pow_10
_TEXT	SEGMENT
_result$ = -8						; size = 8
_in_exp$ = 8						; size = 4
_pow_10	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 587
	mov	eax, 8
	call	__chkstk
; Line 588
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
; Line 589
	mov	eax, DWORD PTR _in_exp$[esp+4]
	movsd	QWORD PTR _result$[esp+8], xmm0
	test	eax, eax
	je	SHORT $LN9@pow_10
	movsd	xmm1, QWORD PTR __real@4024000000000000
$LL2@pow_10:
; Line 590
	mulsd	xmm0, xmm1
; Line 591
	sub	eax, 1
	jne	SHORT $LL2@pow_10
; Line 590
	movsd	QWORD PTR _result$[esp+8], xmm0
$LN9@pow_10:
; Line 593
	fld	QWORD PTR _result$[esp+8]
; Line 594
	add	esp, 8
	ret	0
_pow_10	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _abs_val
_TEXT	SEGMENT
_result$ = 8						; size = 8
_value$ = 8						; size = 8
_abs_val PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 580
	movsd	xmm1, QWORD PTR _value$[esp-4]
	xorps	xmm0, xmm0
; Line 581
	comisd	xmm0, xmm1
	movsd	QWORD PTR _result$[esp-4], xmm1
	jbe	SHORT $LN4@abs_val
; Line 582
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _result$[esp-4], xmm1
$LN4@abs_val:
; Line 583
	fld	QWORD PTR _result$[esp-4]
; Line 584
	ret	0
_abs_val ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __dopr
_TEXT	SEGMENT
_flags$1$ = -24						; size = 4
_currlen$ = -20						; size = 4
_state$1$ = -16						; size = 4
_value$2$ = -12						; size = 4
_cflags$1$ = -12					; size = 4
_min$1$ = -8						; size = 4
_max$1$ = -4						; size = 4
_sbuffer$ = 8						; size = 4
_buffer$ = 12						; size = 4
_maxlen$ = 16						; size = 4
_retlen$ = 20						; size = 4
_truncated$ = 24					; size = 4
_format$ = 28						; size = 4
_args$ = 32						; size = 4
__dopr	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 173
	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	mov	eax, 52					; 00000034H
	call	__chkstk
	push	ebx
	push	esi
; Line 188
	mov	esi, DWORD PTR _args$[ebp]
	xor	edx, edx
	xor	ecx, ecx
	mov	DWORD PTR _min$1$[esp+60], edx
	push	edi
	mov	edi, DWORD PTR _format$[ebp]
	mov	DWORD PTR _cflags$1$[esp+64], ecx
	mov	DWORD PTR _currlen$[esp+64], ecx
	mov	DWORD PTR _flags$1$[esp+64], ecx
	mov	DWORD PTR _max$1$[esp+64], -1
$LN123@dopr:
; Line 185
	mov	DWORD PTR _state$1$[esp+64], edx
$LN122@dopr:
; Line 188
	mov	bl, BYTE PTR [edi]
	inc	edi
	npad	4
$LL2@dopr:
; Line 191
	test	bl, bl
	je	SHORT $LN116@dopr
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN16@dopr
	mov	edx, DWORD PTR _maxlen$[ebp]
	mov	eax, DWORD PTR _currlen$[esp+64]
	cmp	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _state$1$[esp+64]
	jae	SHORT $LN116@dopr
$LN16@dopr:
; Line 194
	cmp	edx, 6
	ja	SHORT $LN98@dopr
	jmp	DWORD PTR $LN132@dopr[edx*4]
$LN18@dopr:
; Line 196
	cmp	bl, 37					; 00000025H
	jne	SHORT $LN19@dopr
; Line 197
	mov	edx, 1
	mov	DWORD PTR _state$1$[esp+64], edx
	jmp	SHORT $LN21@dopr
$LN19@dopr:
; Line 199
	mov	ecx, DWORD PTR _buffer$[ebp]
	movsx	eax, bl
	push	eax
	push	DWORD PTR _maxlen$[ebp]
	lea	eax, DWORD PTR _currlen$[esp+72]
	push	eax
	push	ecx
	push	DWORD PTR _sbuffer$[ebp]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN105@dopr
	mov	ecx, DWORD PTR _cflags$1$[esp+64]
	mov	edx, DWORD PTR _state$1$[esp+64]
$LN21@dopr:
; Line 201
	mov	bl, BYTE PTR [edi]
	inc	edi
$LN98@dopr:
; Line 190
	cmp	edx, 7
	jne	SHORT $LL2@dopr
$LN116@dopr:
; Line 426
	mov	edx, DWORD PTR _maxlen$[ebp]
	mov	eax, DWORD PTR [edx]
	dec	eax
	cmp	eax, DWORD PTR _currlen$[esp+64]
	mov	eax, DWORD PTR _truncated$[ebp]
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR [eax], ecx
; Line 427
	je	SHORT $LN99@dopr
; Line 428
	mov	eax, DWORD PTR [edx]
	dec	eax
	mov	DWORD PTR _currlen$[esp+64], eax
$LN99@dopr:
; Line 429
	push	0
	push	edx
	lea	eax, DWORD PTR _currlen$[esp+72]
	push	eax
	push	DWORD PTR _buffer$[ebp]
	push	DWORD PTR _sbuffer$[ebp]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN105@dopr
; Line 431
	mov	eax, DWORD PTR _retlen$[ebp]
	mov	ecx, DWORD PTR _currlen$[esp+64]
	dec	ecx
	mov	DWORD PTR [eax], ecx
; Line 432
	mov	eax, 1
; Line 433
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@dopr:
; Line 204
	movsx	eax, bl
	add	eax, -32				; ffffffe0H
	cmp	eax, 16					; 00000010H
	ja	SHORT $LN28@dopr
	movzx	eax, BYTE PTR $LN117@dopr[eax]
	jmp	DWORD PTR $LN133@dopr[eax*4]
$LN23@dopr:
; Line 206
	or	DWORD PTR _flags$1$[esp+64], 1
; Line 208
	jmp	$LN122@dopr
$LN24@dopr:
; Line 210
	or	DWORD PTR _flags$1$[esp+64], 2
; Line 212
	jmp	$LN122@dopr
$LN25@dopr:
; Line 214
	or	DWORD PTR _flags$1$[esp+64], 4
; Line 216
	jmp	$LN122@dopr
$LN26@dopr:
; Line 218
	or	DWORD PTR _flags$1$[esp+64], 8
; Line 220
	jmp	$LN122@dopr
$LN27@dopr:
; Line 222
	or	DWORD PTR _flags$1$[esp+64], 16		; 00000010H
; Line 224
	jmp	$LN122@dopr
$LN28@dopr:
; Line 226
	mov	edx, 2
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 229
	jmp	$LL2@dopr
$LN29@dopr:
; Line 231
	movzx	eax, bl
	push	eax
	call	DWORD PTR __imp__isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN30@dopr
; Line 232
	mov	eax, DWORD PTR _min$1$[esp+64]
; Line 233
	mov	edx, DWORD PTR _state$1$[esp+64]
	lea	ecx, DWORD PTR [eax+eax*4]
	movsx	eax, bl
	lea	eax, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _cflags$1$[esp+64]
	add	eax, -48				; ffffffd0H
	mov	DWORD PTR _min$1$[esp+64], eax
	jmp	$LN122@dopr
$LN30@dopr:
; Line 234
	cmp	bl, 42					; 0000002aH
	jne	SHORT $LN32@dopr
; Line 235
	mov	eax, DWORD PTR [esi]
	add	esi, 4
; Line 236
	mov	bl, BYTE PTR [edi]
	inc	edi
	mov	DWORD PTR _min$1$[esp+64], eax
$LN32@dopr:
; Line 238
	mov	ecx, DWORD PTR _cflags$1$[esp+64]
	mov	edx, 3
	mov	DWORD PTR _state$1$[esp+64], edx
	jmp	$LL2@dopr
$LN34@dopr:
; Line 242
	cmp	bl, 46					; 0000002eH
	jne	SHORT $LN35@dopr
; Line 243
	mov	edx, 4
; Line 245
	jmp	$LN123@dopr
$LN35@dopr:
; Line 246
	mov	edx, 5
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 247
	jmp	$LL2@dopr
$LN37@dopr:
; Line 249
	movzx	eax, bl
	push	eax
	call	DWORD PTR __imp__isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN38@dopr
; Line 250
	mov	eax, DWORD PTR _max$1$[esp+64]
	xor	ecx, ecx
; Line 253
	mov	edx, DWORD PTR _state$1$[esp+64]
	test	eax, eax
	cmovs	eax, ecx
	lea	ecx, DWORD PTR [eax+eax*4]
	movsx	eax, bl
	lea	eax, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _cflags$1$[esp+64]
	add	eax, -48				; ffffffd0H
	mov	DWORD PTR _max$1$[esp+64], eax
	jmp	$LN122@dopr
$LN38@dopr:
; Line 254
	cmp	bl, 42					; 0000002aH
	jne	SHORT $LN41@dopr
; Line 255
	mov	eax, DWORD PTR [esi]
	add	esi, 4
; Line 256
	mov	bl, BYTE PTR [edi]
	inc	edi
	mov	DWORD PTR _max$1$[esp+64], eax
$LN41@dopr:
; Line 258
	mov	ecx, DWORD PTR _cflags$1$[esp+64]
	mov	edx, 5
	mov	DWORD PTR _state$1$[esp+64], edx
	jmp	$LL2@dopr
$LN43@dopr:
; Line 262
	movsx	eax, bl
	add	eax, -76				; ffffffb4H
	cmp	eax, 37					; 00000025H
	ja	$LN50@dopr
	movzx	eax, BYTE PTR $LN118@dopr[eax]
	jmp	DWORD PTR $LN134@dopr[eax*4]
$LN44@dopr:
; Line 281
	mov	bl, BYTE PTR [edi]
	mov	ecx, 1
; Line 286
	mov	edx, 6
	mov	DWORD PTR _cflags$1$[esp+64], ecx
	inc	edi
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 287
	jmp	$LL2@dopr
$LN45@dopr:
; Line 268
	cmp	BYTE PTR [edi], 108			; 0000006cH
	jne	SHORT $LN46@dopr
; Line 281
	mov	bl, BYTE PTR [edi+1]
	inc	edi
	mov	ecx, 4
; Line 286
	mov	edx, 6
	inc	edi
	mov	DWORD PTR _cflags$1$[esp+64], ecx
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 287
	jmp	$LL2@dopr
$LN46@dopr:
; Line 281
	mov	bl, BYTE PTR [edi]
	mov	ecx, 2
; Line 286
	mov	edx, 6
	mov	DWORD PTR _cflags$1$[esp+64], ecx
	inc	edi
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 287
	jmp	$LL2@dopr
$LN48@dopr:
; Line 281
	mov	bl, BYTE PTR [edi]
	mov	ecx, 4
; Line 286
	mov	edx, 6
	mov	DWORD PTR _cflags$1$[esp+64], ecx
	inc	edi
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 287
	jmp	$LL2@dopr
$LN49@dopr:
; Line 281
	mov	bl, BYTE PTR [edi]
	mov	ecx, 3
	inc	edi
	mov	DWORD PTR _cflags$1$[esp+64], ecx
$LN50@dopr:
; Line 286
	mov	edx, 6
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 287
	jmp	$LL2@dopr
$LN51@dopr:
; Line 289
	movsx	edx, bl
	lea	eax, DWORD PTR [edx-37]
	cmp	eax, 83					; 00000053H
	ja	$LN96@dopr
	movzx	eax, BYTE PTR $LN119@dopr[eax]
	jmp	DWORD PTR $LN135@dopr[eax*4]
$LN52@dopr:
; Line 292
	sub	ecx, 1
	je	SHORT $LN53@dopr
	sub	ecx, 1
	je	SHORT $LN54@dopr
	sub	ecx, 2
	je	SHORT $LN55@dopr
$LN54@dopr:
; Line 303
	mov	eax, DWORD PTR [esi]
	add	esi, 4
	jmp	SHORT $LN126@dopr
$LN55@dopr:
; Line 300
	mov	eax, DWORD PTR [esi]
	add	esi, 8
	mov	edx, DWORD PTR [esi-4]
; Line 301
	jmp	SHORT $LN12@dopr
$LN53@dopr:
; Line 294
	movsx	eax, WORD PTR [esi]
	add	esi, 4
$LN126@dopr:
	cdq
$LN12@dopr:
; Line 306
	push	DWORD PTR _flags$1$[esp+64]
	mov	ebx, DWORD PTR _max$1$[esp+68]
	push	ebx
	push	DWORD PTR _min$1$[esp+72]
	push	10					; 0000000aH
$LN129@dopr:
	push	edx
	push	eax
$LN127@dopr:
	push	DWORD PTR _maxlen$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR _currlen$[esp+92]
	push	eax
	push	ecx
	push	DWORD PTR _sbuffer$[ebp]
	call	_fmtint
	add	esp, 40					; 00000028H
$LN128@dopr:
	test	eax, eax
	jne	$LN96@dopr
$LN105@dopr:
; Line 433
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN58@dopr:
; Line 311
	mov	eax, DWORD PTR _flags$1$[esp+64]
	or	eax, 32					; 00000020H
	jmp	SHORT $LN59@dopr
$LN120@dopr:
	mov	eax, DWORD PTR _flags$1$[esp+64]
$LN59@dopr:
; Line 316
	or	eax, 64					; 00000040H
	mov	DWORD PTR _flags$1$[esp+64], eax
; Line 317
	sub	ecx, 1
	je	SHORT $LN60@dopr
	sub	ecx, 1
	je	SHORT $LN61@dopr
	sub	ecx, 2
	je	SHORT $LN62@dopr
$LN61@dopr:
; Line 328
	mov	ecx, DWORD PTR [esi]
	add	esi, 4
	mov	DWORD PTR _value$2$[esp+64], ecx
	xor	edx, edx
	jmp	SHORT $LN14@dopr
$LN62@dopr:
; Line 325
	mov	ecx, DWORD PTR [esi]
	add	esi, 8
	mov	DWORD PTR _value$2$[esp+64], ecx
	mov	edx, DWORD PTR [esi-4]
; Line 326
	jmp	SHORT $LN14@dopr
$LN60@dopr:
; Line 319
	movzx	eax, WORD PTR [esi]
	add	esi, 4
	cdq
	mov	DWORD PTR _value$2$[esp+64], eax
	mov	eax, DWORD PTR _flags$1$[esp+64]
$LN14@dopr:
; Line 331
	cmp	bl, 111					; 0000006fH
	jne	SHORT $LN102@dopr
	mov	ebx, DWORD PTR _max$1$[esp+64]
	mov	ecx, 8
	push	eax
	push	ebx
	push	DWORD PTR _min$1$[esp+72]
	push	ecx
	push	edx
	push	DWORD PTR _value$2$[esp+84]
; Line 335
	jmp	$LN127@dopr
$LN102@dopr:
; Line 331
	cmp	bl, 117					; 00000075H
	mov	ecx, 16					; 00000010H
	push	eax
	mov	ebx, 10					; 0000000aH
	cmove	ecx, ebx
	mov	ebx, DWORD PTR _max$1$[esp+68]
	push	ebx
	push	DWORD PTR _min$1$[esp+72]
	push	ecx
	push	edx
	push	DWORD PTR _value$2$[esp+84]
; Line 335
	jmp	$LN127@dopr
$LN65@dopr:
; Line 341
	push	DWORD PTR _flags$1$[esp+64]
	mov	ebx, DWORD PTR _max$1$[esp+68]
	add	esi, 8
	push	ebx
	push	DWORD PTR _min$1$[esp+72]
	mov	eax, 8
	movsd	xmm0, QWORD PTR [esi-8]
	call	__chkstk
	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR _currlen$[esp+84]
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _maxlen$[ebp]
	push	eax
	push	ecx
	push	DWORD PTR _sbuffer$[ebp]
	call	_fmtfp
	add	esp, 36					; 00000024H
; Line 344
	jmp	$LN128@dopr
$LN69@dopr:
; Line 349
	add	esi, 8
	jmp	$LN96@dopr
$LN77@dopr:
; Line 362
	push	DWORD PTR [esi]
	add	esi, 4
$LN130@dopr:
	push	DWORD PTR _maxlen$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR _currlen$[esp+72]
	push	eax
	push	ecx
	push	DWORD PTR _sbuffer$[ebp]
	call	_doapr_outch
	add	esp, 20					; 00000014H
; Line 365
	jmp	$LN128@dopr
$LN79@dopr:
; Line 368
	mov	ebx, DWORD PTR _max$1$[esp+64]
	add	esi, 4
; Line 369
	mov	ecx, DWORD PTR _buffer$[ebp]
; Line 370
	mov	eax, DWORD PTR _maxlen$[ebp]
	test	ebx, ebx
	jns	SHORT $LN82@dopr
	mov	ebx, 2147483647				; 7fffffffH
	test	ecx, ecx
	jne	SHORT $LN82@dopr
; Line 372
	mov	ebx, DWORD PTR [eax]
$LN82@dopr:
; Line 374
	push	ebx
	push	DWORD PTR _min$1$[esp+68]
	push	DWORD PTR _flags$1$[esp+72]
	push	DWORD PTR [esi-4]
	push	eax
	lea	eax, DWORD PTR _currlen$[esp+84]
	push	eax
	push	ecx
	push	DWORD PTR _sbuffer$[ebp]
	call	_fmtstr
	add	esp, 32					; 00000020H
; Line 377
	jmp	$LN128@dopr
$LN84@dopr:
; Line 380
	mov	ecx, DWORD PTR _flags$1$[esp+64]
	add	esi, 4
	mov	ebx, DWORD PTR _max$1$[esp+64]
	or	ecx, 8
	push	ecx
	push	ebx
	push	DWORD PTR _min$1$[esp+72]
	mov	eax, DWORD PTR [esi-4]
	cdq
	push	16					; 00000010H
; Line 383
	jmp	$LN129@dopr
$LN86@dopr:
; Line 387
	add	esi, 4
	cmp	ecx, 1
	jne	SHORT $LN87@dopr
	mov	ecx, DWORD PTR [esi-4]
; Line 388
	mov	ax, WORD PTR _currlen$[esp+64]
	mov	WORD PTR [ecx], ax
	jmp	SHORT $LN96@dopr
$LN87@dopr:
; Line 392
	mov	eax, DWORD PTR _currlen$[esp+64]
	cmp	ecx, 2
	jne	SHORT $LN89@dopr
	mov	ecx, DWORD PTR [esi-4]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN96@dopr
$LN89@dopr:
; Line 393
	cmp	ecx, 4
; Line 396
	mov	ecx, DWORD PTR [esi-4]
	mov	DWORD PTR [ecx], eax
	jne	SHORT $LN96@dopr
	mov	DWORD PTR [ecx+4], 0
; Line 397
	jmp	SHORT $LN96@dopr
$LN93@dopr:
; Line 404
	push	edx
; Line 406
	jmp	$LN130@dopr
$LN95@dopr:
; Line 409
	inc	edi
$LN96@dopr:
; Line 415
	mov	bl, BYTE PTR [edi]
; Line 416
	xor	edx, edx
	inc	edi
	mov	DWORD PTR _state$1$[esp+64], edx
; Line 417
	xor	ecx, ecx
	mov	DWORD PTR _min$1$[esp+64], edx
	mov	DWORD PTR _cflags$1$[esp+64], ecx
	mov	DWORD PTR _flags$1$[esp+64], ecx
; Line 418
	mov	DWORD PTR _max$1$[esp+64], -1
	jmp	$LL2@dopr
	npad	3
$LN132@dopr:
; Line 433
	DD	$LN18@dopr
	DD	$LN22@dopr
	DD	$LN29@dopr
	DD	$LN34@dopr
	DD	$LN37@dopr
	DD	$LN43@dopr
	DD	$LN51@dopr
$LN133@dopr:
	DD	$LN25@dopr
	DD	$LN26@dopr
	DD	$LN24@dopr
	DD	$LN23@dopr
	DD	$LN27@dopr
	DD	$LN28@dopr
$LN117@dopr:
	DB	0
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	4
	npad	3
$LN134@dopr:
	DD	$LN49@dopr
	DD	$LN44@dopr
	DD	$LN45@dopr
	DD	$LN48@dopr
	DD	$LN50@dopr
$LN118@dopr:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN135@dopr:
	DD	$LN93@dopr
	DD	$LN69@dopr
	DD	$LN58@dopr
	DD	$LN77@dopr
	DD	$LN52@dopr
	DD	$LN65@dopr
	DD	$LN86@dopr
	DD	$LN120@dopr
	DD	$LN84@dopr
	DD	$LN79@dopr
	DD	$LN95@dopr
	DD	$LN96@dopr
$LN119@dopr:
	DB	0
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	1
	DB	11					; 0000000bH
	DB	1
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	2
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	3
	DB	4
	DB	1
	DB	5
	DB	1
	DB	11					; 0000000bH
	DB	4
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	6
	DB	7
	DB	8
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	9
	DB	11					; 0000000bH
	DB	7
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	7
__dopr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _doapr_outch
_TEXT	SEGMENT
_sbuffer$ = 8						; size = 4
_buffer$ = 12						; size = 4
_currlen$ = 16						; size = 4
_maxlen$ = 20						; size = 4
_c$ = 24						; size = 4
_doapr_outch PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 742
	push	ebx
; Line 749
	mov	ebx, DWORD PTR _sbuffer$[esp]
	push	ebp
	mov	ebp, DWORD PTR _maxlen$[esp+4]
	push	esi
	mov	esi, DWORD PTR _currlen$[esp+8]
	push	edi
	mov	edi, DWORD PTR _buffer$[esp+12]
	test	edi, edi
	je	SHORT $LN5@doapr_outc
	mov	eax, DWORD PTR [ebp]
	cmp	DWORD PTR [esi], eax
	jne	SHORT $LN5@doapr_outc
; Line 750
	cmp	eax, 2147482623				; 7ffffbffH
	jbe	SHORT $LN3@doapr_outc
$LN14@doapr_outc:
	pop	edi
	pop	esi
	pop	ebp
; Line 751
	xor	eax, eax
	pop	ebx
; Line 780
	ret	0
$LN3@doapr_outc:
; Line 753
	add	eax, 1024				; 00000400H
	mov	DWORD PTR [ebp], eax
; Line 754
	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	jne	SHORT $LN4@doapr_outc
; Line 755
	push	755					; 000002f3H
	push	OFFSET ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi], eax
; Line 756
	test	eax, eax
	je	SHORT $LN14@doapr_outc
; Line 758
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN7@doapr_outc
; Line 760
	push	ecx
	push	DWORD PTR [ebx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@doapr_outc:
; Line 762
	mov	DWORD PTR [ebx], 0
; Line 763
	jmp	SHORT $LN5@doapr_outc
$LN4@doapr_outc:
; Line 765
	push	765					; 000002fdH
	push	OFFSET ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@
	push	eax
	push	ecx
	call	_CRYPTO_realloc
	add	esp, 16					; 00000010H
; Line 766
	test	eax, eax
	je	SHORT $LN14@doapr_outc
; Line 768
	mov	DWORD PTR [edi], eax
$LN5@doapr_outc:
; Line 772
	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [ebp]
	jae	SHORT $LN11@doapr_outc
; Line 773
	mov	ecx, DWORD PTR [ebx]
; Line 774
	mov	al, BYTE PTR _c$[esp+12]
	test	ecx, ecx
	je	SHORT $LN10@doapr_outc
	pop	edi
	mov	BYTE PTR [ecx+edx], al
; Line 779
	mov	eax, 1
	inc	DWORD PTR [esi]
	pop	esi
	pop	ebp
	pop	ebx
; Line 780
	ret	0
$LN10@doapr_outc:
; Line 776
	mov	ecx, DWORD PTR [edi]
	mov	BYTE PTR [edx+ecx], al
	inc	DWORD PTR [esi]
$LN11@doapr_outc:
; Line 779
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 780
	ret	0
_doapr_outch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fmtfp
_TEXT	SEGMENT
_signvalue$2$ = -72					; size = 4
_fracpart$1$ = -68					; size = 4
_fplace$1$ = -68					; size = 4
_intpart$1$ = -64					; size = 4
_zpadlen$2$ = -64					; size = 4
_iplace$1$ = -64					; size = 4
_buffer$GSCopy$1$ = -60					; size = 4
_currlen$GSCopy$1$ = -56				; size = 4
_maxlen$GSCopy$1$ = -52					; size = 4
_sbuffer$GSCopy$1$ = -48				; size = 4
_fconvert$ = -44					; size = 20
_iconvert$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_sbuffer$ = 8						; size = 4
_buffer$ = 12						; size = 4
_currlen$ = 16						; size = 4
_maxlen$ = 20						; size = 4
_fvalue$ = 24						; size = 8
_min$ = 32						; size = 4
_max$ = 36						; size = 4
_flags$ = 40						; size = 4
_fmtfp	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 611
	mov	eax, 72					; 00000048H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+72], eax
	mov	eax, DWORD PTR _sbuffer$[esp+68]
; Line 612
	xor	edx, edx
; Line 580
	movsd	xmm3, QWORD PTR _fvalue$[esp+68]
; Line 624
	mov	ecx, 6
	mov	DWORD PTR _sbuffer$GSCopy$1$[esp+72], eax
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR _buffer$[esp+68]
	mov	DWORD PTR _buffer$GSCopy$1$[esp+72], eax
	mov	eax, DWORD PTR _currlen$[esp+68]
	mov	DWORD PTR _currlen$GSCopy$1$[esp+72], eax
	mov	eax, DWORD PTR _maxlen$[esp+68]
	push	esi
	mov	DWORD PTR _maxlen$GSCopy$1$[esp+76], eax
	xor	esi, esi
	mov	eax, DWORD PTR _max$[esp+72]
	push	edi
	xor	edi, edi
	test	eax, eax
	cmovs	eax, ecx
; Line 581
	mov	ecx, DWORD PTR _flags$[esp+76]
	comisd	xmm0, xmm3
	jbe	SHORT $LN21@fmtfp
; Line 582
	xorps	xmm3, QWORD PTR __xmm@80000000000000008000000000000000
; Line 628
	mov	DWORD PTR _signvalue$2$[esp+80], 45	; 0000002dH
	jmp	SHORT $LN25@fmtfp
$LN21@fmtfp:
; Line 629
	test	cl, 2
	je	SHORT $LN23@fmtfp
; Line 630
	mov	DWORD PTR _signvalue$2$[esp+80], 43	; 0000002bH
	jmp	SHORT $LN25@fmtfp
$LN23@fmtfp:
; Line 631
	test	cl, 4
	mov	ecx, 32					; 00000020H
	cmovne	edx, ecx
	mov	DWORD PTR _signvalue$2$[esp+80], edx
$LN25@fmtfp:
; Line 588
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
; Line 640
	mov	edx, 9
; Line 589
	movsd	xmm4, QWORD PTR __real@4024000000000000
; Line 640
	cmp	eax, edx
	cvttsd2si ecx, xmm3
	cmovg	eax, edx
	mov	DWORD PTR _max$[esp+76], eax
; Line 588
	movaps	xmm1, xmm2
; Line 634
	mov	DWORD PTR _intpart$1$[esp+80], ecx
; Line 589
	cmp	eax, esi
	je	SHORT $LN57@fmtfp
	npad	6
$LL56@fmtfp:
; Line 590
	mulsd	xmm1, xmm4
; Line 591
	sub	eax, 1
	jne	SHORT $LL56@fmtfp
$LN57@fmtfp:
; Line 601
	movsd	xmm5, QWORD PTR __real@3fe0000000000000
	cvttsd2si edx, xmm1
	movd	xmm0, edx
; Line 600
	cvtdq2pd xmm0, xmm0
	subsd	xmm1, xmm0
; Line 601
	comisd	xmm1, xmm5
	jb	SHORT $LN60@fmtfp
; Line 602
	inc	edx
$LN60@fmtfp:
; Line 648
	mov	eax, DWORD PTR _max$[esp+76]
; Line 589
	cmp	eax, esi
	je	SHORT $LN64@fmtfp
$LL63@fmtfp:
; Line 590
	mulsd	xmm2, xmm4
; Line 591
	sub	eax, 1
	jne	SHORT $LL63@fmtfp
$LN64@fmtfp:
	movd	xmm0, ecx
; Line 648
	cvtdq2pd xmm0, xmm0
	subsd	xmm3, xmm0
	mulsd	xmm3, xmm2
; Line 599
	cvttsd2si eax, xmm3
	mov	DWORD PTR _fracpart$1$[esp+80], eax
	movd	xmm0, eax
; Line 600
	cvtdq2pd xmm0, xmm0
	subsd	xmm3, xmm0
; Line 601
	comisd	xmm3, xmm5
	jb	SHORT $LN67@fmtfp
; Line 602
	inc	eax
	mov	DWORD PTR _fracpart$1$[esp+80], eax
$LN67@fmtfp:
; Line 650
	cmp	eax, edx
	jl	SHORT $LN170@fmtfp
; Line 651
	inc	ecx
; Line 652
	sub	eax, edx
	mov	DWORD PTR _intpart$1$[esp+80], ecx
	mov	DWORD PTR _fracpart$1$[esp+80], eax
$LN170@fmtfp:
	mov	esi, DWORD PTR _intpart$1$[esp+80]
	npad	5
$LL4@fmtfp:
; Line 657
	mov	eax, 1717986919				; 66666667H
	imul	esi
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	lea	eax, DWORD PTR [ecx+ecx*4]
	add	eax, eax
	sub	esi, eax
	mov	al, BYTE PTR ??_C@_0L@FPFMPDDA@0123456789?$AA@[esi]
; Line 658
	mov	esi, ecx
	mov	BYTE PTR _iconvert$[esp+edi+80], al
	inc	edi
; Line 659
	test	esi, esi
	je	SHORT $LN28@fmtfp
	cmp	edi, 20					; 00000014H
	jl	SHORT $LL4@fmtfp
$LN28@fmtfp:
	mov	DWORD PTR _iplace$1$[esp+80], edi
; Line 660
	mov	esi, 0
	cmp	edi, 20					; 00000014H
	jne	SHORT $LN180@fmtfp
; Line 661
	mov	edi, 19					; 00000013H
	mov	DWORD PTR _iplace$1$[esp+80], edi
; Line 662
	jmp	SHORT $LN144@fmtfp
$LN180@fmtfp:
	jae	$LN182@fmtfp
$LN144@fmtfp:
	mov	BYTE PTR _iconvert$[esp+edi+80], 0
	mov	edi, DWORD PTR _fracpart$1$[esp+80]
$LL7@fmtfp:
; Line 666
	mov	eax, 1717986919				; 66666667H
	imul	edi
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
; Line 668
	mov	edx, DWORD PTR _max$[esp+76]
	lea	eax, DWORD PTR [ecx+ecx*4]
	add	eax, eax
	sub	edi, eax
	mov	al, BYTE PTR ??_C@_0L@FPFMPDDA@0123456789?$AA@[edi]
	mov	edi, ecx
	mov	BYTE PTR _fconvert$[esp+esi+80], al
	inc	esi
	cmp	esi, edx
	jl	SHORT $LL7@fmtfp
; Line 669
	mov	edi, DWORD PTR _iplace$1$[esp+80]
	mov	DWORD PTR _fplace$1$[esp+80], esi
	cmp	esi, 20					; 00000014H
	jne	SHORT $LN181@fmtfp
; Line 670
	mov	esi, 19					; 00000013H
	mov	DWORD PTR _fplace$1$[esp+80], esi
; Line 671
	jmp	SHORT $LN145@fmtfp
$LN181@fmtfp:
	jae	$LN182@fmtfp
$LN145@fmtfp:
; Line 674
	mov	ecx, DWORD PTR _signvalue$2$[esp+80]
	xor	eax, eax
	mov	BYTE PTR _fconvert$[esp+esi+80], 0
	test	ecx, ecx
	mov	esi, DWORD PTR _min$[esp+76]
	setne	al
	sub	esi, eax
; Line 675
	mov	eax, edx
	sub	esi, edi
	sub	esi, edx
	sub	eax, DWORD PTR _fplace$1$[esp+80]
; Line 676
	mov	edx, 0
	cmovs	eax, edx
	mov	DWORD PTR _zpadlen$2$[esp+80], eax
; Line 678
	xor	eax, eax
	sub	esi, 1
	cmovs	esi, eax
; Line 680
	mov	eax, DWORD PTR _flags$[esp+76]
	test	al, 1
	je	SHORT $LN33@fmtfp
; Line 681
	neg	esi
$LN33@fmtfp:
; Line 683
	test	al, 16					; 00000010H
	je	SHORT $LN74@fmtfp
	test	esi, esi
	jle	$LN11@fmtfp
; Line 684
	test	ecx, ecx
	je	SHORT $LN73@fmtfp
; Line 685
	push	ecx
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN36@fmtfp
$LN79@fmtfp:
	pop	edi
; Line 686
	xor	eax, eax
	pop	esi
; Line 735
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN36@fmtfp:
; Line 687
	dec	esi
; Line 688
	xor	eax, eax
	mov	DWORD PTR _signvalue$2$[esp+80], eax
$LN73@fmtfp:
; Line 690
	test	esi, esi
	jle	SHORT $LN11@fmtfp
	npad	6
$LL8@fmtfp:
; Line 691
	push	48					; 00000030H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN79@fmtfp
; Line 693
	dec	esi
	test	esi, esi
	jg	SHORT $LL8@fmtfp
; Line 730
	jmp	SHORT $LN11@fmtfp
$LN74@fmtfp:
; Line 696
	test	esi, esi
	jle	SHORT $LN11@fmtfp
	npad	7
$LL10@fmtfp:
; Line 697
	push	32					; 00000020H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN79@fmtfp
; Line 699
	dec	esi
	test	esi, esi
	jg	SHORT $LL10@fmtfp
$LN11@fmtfp:
; Line 701
	mov	eax, DWORD PTR _signvalue$2$[esp+80]
	test	eax, eax
	je	SHORT $LN75@fmtfp
	push	eax
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN79@fmtfp
$LN75@fmtfp:
; Line 704
	test	edi, edi
	jle	SHORT $LN13@fmtfp
$LL12@fmtfp:
; Line 705
	movsx	eax, BYTE PTR _iconvert$[esp+edi+79]
	dec	edi
	push	eax
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN79@fmtfp
; Line 704
	test	edi, edi
	jg	SHORT $LL12@fmtfp
$LN13@fmtfp:
; Line 713
	cmp	DWORD PTR _max$[esp+76], 0
	jg	SHORT $LN42@fmtfp
	test	BYTE PTR _flags$[esp+76], 8
	je	SHORT $LN77@fmtfp
$LN42@fmtfp:
; Line 714
	push	46					; 0000002eH
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN79@fmtfp
; Line 717
	mov	edi, DWORD PTR _fplace$1$[esp+80]
	test	edi, edi
	jle	SHORT $LN77@fmtfp
$LL14@fmtfp:
; Line 718
	movsx	eax, BYTE PTR _fconvert$[esp+edi+79]
	dec	edi
	push	eax
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	DWORD PTR _sbuffer$GSCopy$1$[esp+96]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN79@fmtfp
; Line 717
	test	edi, edi
	jg	SHORT $LL14@fmtfp
$LN77@fmtfp:
; Line 723
	cmp	DWORD PTR _zpadlen$2$[esp+80], 0
	mov	edi, DWORD PTR _sbuffer$GSCopy$1$[esp+80]
	jle	SHORT $LN78@fmtfp
	npad	7
$LL16@fmtfp:
; Line 724
	push	48					; 00000030H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	edi
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN79@fmtfp
; Line 726
	mov	eax, DWORD PTR _zpadlen$2$[esp+80]
	dec	eax
	mov	DWORD PTR _zpadlen$2$[esp+80], eax
	test	eax, eax
	jg	SHORT $LL16@fmtfp
$LN78@fmtfp:
; Line 729
	test	esi, esi
	jns	SHORT $LN19@fmtfp
$LL18@fmtfp:
; Line 730
	push	32					; 00000020H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+84]
	push	DWORD PTR _currlen$GSCopy$1$[esp+88]
	push	DWORD PTR _buffer$GSCopy$1$[esp+92]
	push	edi
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN79@fmtfp
; Line 732
	add	esi, 1
; Line 729
	js	SHORT $LL18@fmtfp
$LN19@fmtfp:
; Line 735
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	mov	eax, 1
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN182@fmtfp:
; Line 671
	call	___report_rangecheckfailure
$LN183@fmtfp:
$LN179@fmtfp:
	int	3
_fmtfp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fmtint
_TEXT	SEGMENT
_signvalue$1$ = -60					; size = 4
tv262 = -60						; size = 4
_prefix$1$ = -56					; size = 4
_buffer$GSCopy$1$ = -52					; size = 4
_maxlen$GSCopy$1$ = -48					; size = 4
_currlen$GSCopy$1$ = -44				; size = 4
tv506 = -40						; size = 8
tv315 = -40						; size = 4
tv267 = -40						; size = 4
_convert$ = -32						; size = 26
__$ArrayPad$ = -4					; size = 4
_sbuffer$ = 8						; size = 4
_buffer$ = 12						; size = 4
_currlen$ = 16						; size = 4
_maxlen$ = 20						; size = 4
_value$ = 24						; size = 8
_base$ = 32						; size = 4
_min$ = 36						; size = 4
_max$ = 40						; size = 4
_flags$ = 44						; size = 4
_fmtint	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 483
	mov	eax, 60					; 0000003cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+60], eax
	mov	eax, DWORD PTR _buffer$[esp+56]
; Line 493
	xor	edx, edx
	mov	ecx, DWORD PTR _max$[esp+56]
	push	ebx
; Line 495
	mov	ebx, DWORD PTR _value$[esp+60]
	push	ebp
	mov	ebp, DWORD PTR _sbuffer$[esp+64]
	mov	DWORD PTR _buffer$GSCopy$1$[esp+68], eax
	mov	eax, DWORD PTR _currlen$[esp+64]
	push	esi
	mov	DWORD PTR _currlen$GSCopy$1$[esp+72], eax
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _maxlen$[esp+68]
	push	edi
	mov	DWORD PTR _maxlen$GSCopy$1$[esp+76], eax
	xor	edi, edi
	xor	eax, eax
	mov	DWORD PTR _prefix$1$[esp+76], esi
	test	ecx, ecx
	mov	DWORD PTR _signvalue$1$[esp+76], eax
	cmovs	ecx, edx
	mov	edx, DWORD PTR _value$[esp+76]
	mov	DWORD PTR _max$[esp+72], ecx
; Line 496
	mov	ecx, DWORD PTR _flags$[esp+72]
	test	cl, 64					; 00000040H
	jne	SHORT $LN21@fmtint
; Line 497
	test	edx, edx
	jg	SHORT $LN17@fmtint
	jl	SHORT $LN89@fmtint
	test	ebx, ebx
	jae	SHORT $LN17@fmtint
$LN89@fmtint:
; Line 499
	neg	ebx
	mov	DWORD PTR _signvalue$1$[esp+76], 45	; 0000002dH
	adc	edx, eax
	neg	edx
	jmp	SHORT $LN21@fmtint
$LN17@fmtint:
; Line 500
	test	cl, 2
	je	SHORT $LN19@fmtint
; Line 501
	mov	DWORD PTR _signvalue$1$[esp+76], 43	; 0000002bH
	jmp	SHORT $LN21@fmtint
$LN19@fmtint:
; Line 502
	test	cl, 4
	mov	DWORD PTR tv262[esp+76], 32		; 00000020H
	cmovne	eax, DWORD PTR tv262[esp+76]
	mov	DWORD PTR _signvalue$1$[esp+76], eax
$LN21@fmtint:
; Line 505
	mov	eax, DWORD PTR _base$[esp+72]
	test	cl, 8
	je	SHORT $LN24@fmtint
; Line 506
	cmp	eax, 8
	jne	SHORT $LN23@fmtint
; Line 507
	mov	esi, OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	DWORD PTR _prefix$1$[esp+76], esi
; Line 508
	jmp	SHORT $LN24@fmtint
$LN23@fmtint:
	cmp	DWORD PTR _base$[esp+72], 16		; 00000010H
	mov	eax, OFFSET ??_C@_02MDDDDAID@0x?$AA@
	cmovne	eax, esi
	mov	DWORD PTR _prefix$1$[esp+76], eax
	mov	eax, DWORD PTR _base$[esp+72]
$LN24@fmtint:
; Line 511
	test	cl, 32					; 00000020H
	mov	DWORD PTR tv267[esp+76], OFFSET ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@
	mov	ecx, 1
	mov	esi, edi
	cmovne	esi, ecx
	mov	ecx, OFFSET ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; Line 514
	test	esi, esi
	cmove	ecx, DWORD PTR tv267[esp+76]
	mov	esi, ecx
$LL4@fmtint:
	push	0
	push	eax
	push	edx
	push	ebx
	call	__aulldvrm
	mov	DWORD PTR tv506[esp+80], ebx
	mov	ebx, eax
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR _convert$[esp+edi+76], cl
; Line 517
	mov	ecx, ebx
	inc	edi
	or	ecx, edx
	je	SHORT $LN26@fmtint
	mov	eax, DWORD PTR _base$[esp+72]
	cmp	edi, 26					; 0000001aH
	jl	SHORT $LL4@fmtint
$LN26@fmtint:
; Line 518
	mov	esi, DWORD PTR _prefix$1$[esp+76]
	cmp	edi, 26					; 0000001aH
	jne	SHORT $LN93@fmtint
; Line 519
	mov	edi, 25					; 00000019H
; Line 520
	jmp	SHORT $LN88@fmtint
$LN93@fmtint:
	jae	$LN94@fmtint
$LN88@fmtint:
; Line 522
	mov	edx, DWORD PTR _max$[esp+72]
; Line 523
	mov	ecx, esi
	mov	ebx, edx
	mov	BYTE PTR _convert$[esp+edi+76], 0
	sub	ebx, edi
	lea	esi, DWORD PTR [ecx+1]
$LL90@fmtint:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL90@fmtint
	sub	ecx, esi
	mov	eax, edi
	mov	esi, DWORD PTR _min$[esp+72]
	cmp	edx, edi
	cmovge	eax, edx
	sub	esi, eax
	xor	eax, eax
	cmp	DWORD PTR _signvalue$1$[esp+76], eax
	setne	al
	sub	esi, eax
; Line 525
	xor	eax, eax
	test	ebx, ebx
	cmovs	ebx, eax
	sub	esi, ecx
; Line 527
	cmovs	esi, eax
; Line 529
	mov	eax, DWORD PTR _flags$[esp+72]
	test	al, 16					; 00000010H
	je	SHORT $LN30@fmtint
; Line 530
	cmp	ebx, esi
	cmovge	esi, ebx
	mov	ebx, esi
; Line 531
	xor	esi, esi
$LN30@fmtint:
; Line 533
	test	al, 1
	je	SHORT $LN44@fmtint
; Line 534
	neg	esi
$LN44@fmtint:
; Line 537
	test	esi, esi
	jle	SHORT $LN6@fmtint
	npad	5
$LL5@fmtint:
; Line 538
	push	32					; 00000020H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+80]
	push	DWORD PTR _currlen$GSCopy$1$[esp+84]
	push	DWORD PTR _buffer$GSCopy$1$[esp+88]
	push	ebp
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN49@fmtint
; Line 540
	dec	esi
	test	esi, esi
	jg	SHORT $LL5@fmtint
$LN6@fmtint:
; Line 544
	mov	eax, DWORD PTR _signvalue$1$[esp+76]
	test	eax, eax
	je	SHORT $LN45@fmtint
; Line 545
	push	eax
	push	DWORD PTR _maxlen$GSCopy$1$[esp+80]
	push	DWORD PTR _currlen$GSCopy$1$[esp+84]
	push	DWORD PTR _buffer$GSCopy$1$[esp+88]
	push	ebp
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN49@fmtint
$LN45@fmtint:
; Line 549
	mov	eax, DWORD PTR _prefix$1$[esp+76]
	mov	al, BYTE PTR [eax]
	test	al, al
	je	SHORT $LN8@fmtint
$LL7@fmtint:
; Line 550
	movsx	eax, al
	push	eax
	push	DWORD PTR _maxlen$GSCopy$1$[esp+80]
	push	DWORD PTR _currlen$GSCopy$1$[esp+84]
	push	DWORD PTR _buffer$GSCopy$1$[esp+88]
	push	ebp
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN49@fmtint
; Line 552
	mov	eax, DWORD PTR _prefix$1$[esp+76]
	inc	eax
	mov	DWORD PTR _prefix$1$[esp+76], eax
	mov	al, BYTE PTR [eax]
	test	al, al
	jne	SHORT $LL7@fmtint
$LN8@fmtint:
; Line 556
	test	ebx, ebx
	jle	SHORT $LN47@fmtint
	npad	8
$LL9@fmtint:
; Line 558
	push	48					; 00000030H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+80]
	push	DWORD PTR _currlen$GSCopy$1$[esp+84]
	push	DWORD PTR _buffer$GSCopy$1$[esp+88]
	push	ebp
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN49@fmtint
; Line 560
	dec	ebx
	test	ebx, ebx
	jg	SHORT $LL9@fmtint
$LN47@fmtint:
	mov	ebx, DWORD PTR _buffer$GSCopy$1$[esp+76]
; Line 564
	test	edi, edi
	jle	SHORT $LN48@fmtint
$LL11@fmtint:
; Line 565
	movsx	eax, BYTE PTR _convert$[esp+edi+75]
	dec	edi
	push	eax
	push	DWORD PTR _maxlen$GSCopy$1$[esp+80]
	push	DWORD PTR _currlen$GSCopy$1$[esp+84]
	push	ebx
	push	ebp
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN49@fmtint
; Line 564
	test	edi, edi
	jg	SHORT $LL11@fmtint
$LN48@fmtint:
; Line 570
	test	esi, esi
	jns	SHORT $LN14@fmtint
	npad	3
$LL13@fmtint:
; Line 571
	push	32					; 00000020H
	push	DWORD PTR _maxlen$GSCopy$1$[esp+80]
	push	DWORD PTR _currlen$GSCopy$1$[esp+84]
	push	ebx
	push	ebp
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN49@fmtint
; Line 573
	add	esi, 1
; Line 570
	js	SHORT $LL13@fmtint
$LN14@fmtint:
	pop	edi
	pop	esi
	pop	ebp
; Line 575
	mov	eax, 1
	pop	ebx
; Line 576
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN49@fmtint:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN94@fmtint:
; Line 520
	call	___report_rangecheckfailure
$LN95@fmtint:
$LN92@fmtint:
	int	3
_fmtint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fmtstr
_TEXT	SEGMENT
_sbuffer$ = 8						; size = 4
_buffer$ = 12						; size = 4
_currlen$ = 16						; size = 4
_maxlen$ = 20						; size = 4
_value$ = 24						; size = 4
_flags$ = 28						; size = 4
_min$ = 32						; size = 4
_max$ = 36						; size = 4
_fmtstr	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 445
	mov	eax, DWORD PTR _value$[esp-4]
	push	ebx
	push	ebp
	push	esi
	xor	esi, esi
	mov	ebx, OFFSET ??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
	test	eax, eax
	push	edi
	cmovne	ebx, eax
; Line 448
	mov	ecx, ebx
	lea	edx, DWORD PTR [ecx+1]
	npad	7
$LL32@fmtstr:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL32@fmtstr
	sub	ecx, edx
; Line 449
	mov	eax, 2147483647				; 7fffffffH
	cmp	ecx, eax
	cmova	ecx, eax
; Line 452
	mov	eax, DWORD PTR _min$[esp+12]
	mov	edi, eax
	sub	edi, ecx
; Line 453
	test	eax, eax
	js	SHORT $LN11@fmtstr
	test	edi, edi
	jns	SHORT $LN10@fmtstr
$LN11@fmtstr:
; Line 454
	xor	edi, edi
$LN10@fmtstr:
; Line 455
	test	BYTE PTR _flags$[esp+12], 1
	je	SHORT $LN17@fmtstr
; Line 456
	neg	edi
$LN17@fmtstr:
; Line 458
	mov	ebp, DWORD PTR _max$[esp+12]
	mov	ecx, DWORD PTR _maxlen$[esp+12]
	mov	edx, DWORD PTR _currlen$[esp+12]
	test	edi, edi
	jle	SHORT $LN18@fmtstr
	npad	2
$LL2@fmtstr:
	cmp	esi, ebp
	jge	SHORT $LN18@fmtstr
; Line 459
	push	32					; 00000020H
	push	ecx
	push	edx
	push	DWORD PTR _buffer$[esp+24]
	push	DWORD PTR _sbuffer$[esp+28]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN20@fmtstr
; Line 461
	mov	ecx, DWORD PTR _maxlen$[esp+12]
	dec	edi
	mov	edx, DWORD PTR _currlen$[esp+12]
; Line 462
	inc	esi
	test	edi, edi
	jg	SHORT $LL2@fmtstr
$LN18@fmtstr:
; Line 464
	mov	al, BYTE PTR [ebx]
	test	al, al
	je	SHORT $LN19@fmtstr
$LL4@fmtstr:
	cmp	esi, ebp
	jge	SHORT $LN19@fmtstr
; Line 465
	movsx	eax, al
	push	eax
	push	ecx
	push	edx
	push	DWORD PTR _buffer$[esp+24]
	push	DWORD PTR _sbuffer$[esp+28]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	inc	ebx
	test	eax, eax
	je	SHORT $LN20@fmtstr
; Line 467
	mov	al, BYTE PTR [ebx]
	inc	esi
	mov	ecx, DWORD PTR _maxlen$[esp+12]
	mov	edx, DWORD PTR _currlen$[esp+12]
	test	al, al
	jne	SHORT $LL4@fmtstr
$LN19@fmtstr:
; Line 469
	test	edi, edi
	jns	SHORT $LN7@fmtstr
	mov	ebx, DWORD PTR _maxlen$[esp+12]
$LL6@fmtstr:
	cmp	esi, ebp
	jge	SHORT $LN7@fmtstr
; Line 470
	push	32					; 00000020H
	push	ebx
	push	DWORD PTR _currlen$[esp+20]
	push	DWORD PTR _buffer$[esp+24]
	push	DWORD PTR _sbuffer$[esp+28]
	call	_doapr_outch
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN20@fmtstr
; Line 473
	inc	esi
	add	edi, 1
	js	SHORT $LL6@fmtstr
$LN7@fmtstr:
	pop	edi
	pop	esi
	pop	ebp
; Line 475
	mov	eax, 1
	pop	ebx
; Line 476
	ret	0
$LN20@fmtstr:
	pop	edi
	pop	esi
	pop	ebp
; Line 460
	xor	eax, eax
	pop	ebx
; Line 476
	ret	0
_fmtstr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_vsnprintf
_TEXT	SEGMENT
_truncated$ = -8					; size = 4
_retlen$ = -4						; size = 4
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
_format$ = 16						; size = 4
_args$ = 20						; size = 4
_BIO_vsnprintf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 846
	mov	eax, 8
	call	__chkstk
; Line 850
	push	DWORD PTR _args$[esp+4]
	lea	eax, DWORD PTR _truncated$[esp+12]
	push	DWORD PTR _format$[esp+8]
	push	eax
	lea	eax, DWORD PTR _retlen$[esp+20]
	push	eax
	lea	eax, DWORD PTR _n$[esp+20]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+24]
	push	0
	push	eax
	call	__dopr
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN2@BIO_vsnpri
; Line 851
	or	eax, -1
; Line 863
	add	esp, 8
	ret	0
$LN2@BIO_vsnpri:
; Line 860
	or	eax, -1
	cmp	DWORD PTR _truncated$[esp+8], 0
	jne	SHORT $LN4@BIO_vsnpri
; Line 862
	cmp	DWORD PTR _retlen$[esp+8], 2147483647	; 7fffffffH
	cmovbe	eax, DWORD PTR _retlen$[esp+8]
$LN4@BIO_vsnpri:
; Line 863
	add	esp, 8
	ret	0
_BIO_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_snprintf
_TEXT	SEGMENT
_truncated$1 = -8					; size = 4
_retlen$2 = -4						; size = 4
_buf$ = 8						; size = 4
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
_n$ = 12						; size = 4
_format$ = 16						; size = 4
_BIO_snprintf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 833
	mov	eax, 8
	call	__chkstk
; Line 839
	mov	eax, DWORD PTR _n$[esp+4]
	mov	DWORD PTR _n$[esp+4], eax
	mov	eax, DWORD PTR _buf$[esp+4]
	mov	DWORD PTR _buf$[esp+4], eax
; Line 850
	lea	eax, DWORD PTR _format$[esp+8]
	push	eax
	push	DWORD PTR _format$[esp+8]
	lea	eax, DWORD PTR _truncated$1[esp+16]
	push	eax
	lea	eax, DWORD PTR _retlen$2[esp+20]
	push	eax
	lea	eax, DWORD PTR _n$[esp+20]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+24]
	push	0
	push	eax
	call	__dopr
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN4@BIO_snprin
; Line 842
	or	eax, -1
; Line 843
	add	esp, 8
	ret	0
$LN4@BIO_snprin:
; Line 842
	or	eax, -1
; Line 853
	cmp	DWORD PTR _truncated$1[esp+8], 0
	jne	SHORT $LN6@BIO_snprin
; Line 862
	cmp	DWORD PTR _retlen$2[esp+8], 2147483647	; 7fffffffH
	cmovbe	eax, DWORD PTR _retlen$2[esp+8]
$LN6@BIO_snprin:
; Line 843
	add	esp, 8
	ret	0
_BIO_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_vprintf
_TEXT	SEGMENT
_dynbuf$ = -2072					; size = 4
_retlen$ = -2068					; size = 4
_hugebufsize$ = -2064					; size = 4
_hugebufp$ = -2060					; size = 4
_ignored$ = -2056					; size = 4
_hugebuf$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_bio$ = 8						; size = 4
_format$ = 12						; size = 4
_args$ = 16						; size = 4
_BIO_vprintf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 798
	mov	eax, 2072				; 00000818H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+2072], eax
	push	ebx
	mov	ebx, DWORD PTR _bio$[esp+2072]
; Line 804
	lea	eax, DWORD PTR _hugebuf$[esp+2076]
	push	esi
	mov	esi, DWORD PTR _args$[esp+2076]
	push	edi
	mov	edi, DWORD PTR _format$[esp+2080]
; Line 810
	push	810					; 0000032aH
	push	OFFSET ??_C@_0BH@PHJMFNI@?4?2crypto?2bio?2b_print?4c?$AA@
	push	OFFSET ??_C@_07DKNGGOEP@doapr?$CI?$CJ?$AA@
	mov	DWORD PTR _hugebufp$[esp+2096], eax
	mov	DWORD PTR _hugebufsize$[esp+2096], 2048	; 00000800H
	mov	DWORD PTR _dynbuf$[esp+2096], 0
	call	_CRYPTO_push_info_
; Line 811
	push	esi
	push	edi
	lea	eax, DWORD PTR _ignored$[esp+2104]
	push	eax
	lea	eax, DWORD PTR _retlen$[esp+2108]
	push	eax
	lea	eax, DWORD PTR _hugebufsize$[esp+2112]
	push	eax
	lea	eax, DWORD PTR _dynbuf$[esp+2116]
	push	eax
	lea	eax, DWORD PTR _hugebufp$[esp+2120]
	push	eax
	call	__dopr
	add	esp, 40					; 00000028H
	test	eax, eax
	jne	SHORT $LN2@BIO_vprint
; Line 813
	push	DWORD PTR _dynbuf$[esp+2084]
	call	_CRYPTO_free
	add	esp, 4
; Line 814
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
; Line 824
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2072]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2072				; 00000818H
	ret	0
$LN2@BIO_vprint:
; Line 816
	mov	esi, DWORD PTR _dynbuf$[esp+2084]
; Line 817
	push	DWORD PTR _retlen$[esp+2084]
	test	esi, esi
	je	SHORT $LN3@BIO_vprint
	push	esi
	push	ebx
	call	_BIO_write
; Line 818
	push	esi
	mov	edi, eax
	call	_CRYPTO_free
	add	esp, 16					; 00000010H
; Line 819
	jmp	SHORT $LN4@BIO_vprint
$LN3@BIO_vprint:
; Line 820
	lea	eax, DWORD PTR _hugebuf$[esp+2088]
	push	eax
	push	ebx
	call	_BIO_write
	add	esp, 12					; 0000000cH
	mov	edi, eax
$LN4@BIO_vprint:
; Line 822
	call	_CRYPTO_pop_info
; Line 824
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2084]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2072				; 00000818H
	ret	0
_BIO_vprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_printf
_TEXT	SEGMENT
_bio$ = 8						; size = 4
_format$ = 12						; size = 4
_BIO_printf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\b_print.c
; Line 791
	lea	eax, DWORD PTR _format$[esp]
	push	eax
	push	DWORD PTR _format$[esp]
	push	DWORD PTR _bio$[esp+4]
	call	_BIO_vprintf
	add	esp, 12					; 0000000cH
; Line 795
	ret	0
_BIO_printf ENDP
_TEXT	ENDS
END
