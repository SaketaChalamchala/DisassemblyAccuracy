; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_rsa_pkey_meth
CONST	SEGMENT
_rsa_pkey_meth DD 06H
	DD	02H
	DD	FLAT:_pkey_rsa_init
	DD	FLAT:_pkey_rsa_copy
	DD	FLAT:_pkey_rsa_cleanup
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_pkey_rsa_keygen
	DD	00H
	DD	FLAT:_pkey_rsa_sign
	DD	00H
	DD	FLAT:_pkey_rsa_verify
	DD	00H
	DD	FLAT:_pkey_rsa_verifyrecover
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_pkey_rsa_encrypt
	DD	00H
	DD	FLAT:_pkey_rsa_decrypt
	DD	00H
	DD	00H
	DD	FLAT:_pkey_rsa_ctrl
	DD	FLAT:_pkey_rsa_ctrl_str
CONST	ENDS
PUBLIC	??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; `string'
PUBLIC	??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@	; `string'
PUBLIC	??_C@_05BCIEJMJH@pkcs1?$AA@			; `string'
PUBLIC	??_C@_06PDLHKEJK@sslv23?$AA@			; `string'
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
PUBLIC	??_C@_04EIGNDHKO@oeap?$AA@			; `string'
PUBLIC	??_C@_04MAAGAICF@oaep?$AA@			; `string'
PUBLIC	??_C@_04JNCMEILM@x931?$AA@			; `string'
PUBLIC	??_C@_03OHCBHMED@pss?$AA@			; `string'
PUBLIC	??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@		; `string'
PUBLIC	??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@		; `string'
PUBLIC	??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@	; `string'
PUBLIC	??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@		; `string'
PUBLIC	??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@		; `string'
PUBLIC	??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@		; `string'
EXTRN	__imp__atoi:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BUF_memdup:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_dup:PROC
EXTRN	_BN_asc2bn:PROC
EXTRN	_EVP_MD_type:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_sha1:PROC
EXTRN	_EVP_get_digestbyname:PROC
EXTRN	_EVP_PKEY_size:PROC
EXTRN	_EVP_PKEY_assign:PROC
EXTRN	_EVP_PKEY_CTX_ctrl:PROC
EXTRN	_RSA_new:PROC
EXTRN	_RSA_size:PROC
EXTRN	_RSA_generate_key_ex:PROC
EXTRN	_RSA_public_encrypt:PROC
EXTRN	_RSA_private_encrypt:PROC
EXTRN	_RSA_public_decrypt:PROC
EXTRN	_RSA_private_decrypt:PROC
EXTRN	_RSA_free:PROC
EXTRN	_RSA_sign:PROC
EXTRN	_RSA_verify:PROC
EXTRN	_RSA_sign_ASN1_OCTET_STRING:PROC
EXTRN	_RSA_padding_add_PKCS1_OAEP_mgf1:PROC
EXTRN	_RSA_padding_check_PKCS1_OAEP_mgf1:PROC
EXTRN	_RSA_X931_hash_id:PROC
EXTRN	_RSA_verify_PKCS1_PSS_mgf1:PROC
EXTRN	_RSA_padding_add_PKCS1_PSS_mgf1:PROC
EXTRN	_string_to_hex:PROC
EXTRN	_evp_pkey_set_cb_translate:PROC
EXTRN	_int_rsa_verify:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@
CONST	SEGMENT
??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@ DB 'rsa_oaep_label', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@
CONST	SEGMENT
??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@ DB 'rsa_oaep_md', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@
CONST	SEGMENT
??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@ DB 'rsa_mgf1_md', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@
CONST	SEGMENT
??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@ DB 'rsa_keygen_pubexp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@
CONST	SEGMENT
??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@ DB 'rsa_keygen_bits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@
CONST	SEGMENT
??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@ DB 'rsa_pss_saltlen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHCBHMED@pss?$AA@
CONST	SEGMENT
??_C@_03OHCBHMED@pss?$AA@ DB 'pss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNCMEILM@x931?$AA@
CONST	SEGMENT
??_C@_04JNCMEILM@x931?$AA@ DB 'x931', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MAAGAICF@oaep?$AA@
CONST	SEGMENT
??_C@_04MAAGAICF@oaep?$AA@ DB 'oaep', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIGNDHKO@oeap?$AA@
CONST	SEGMENT
??_C@_04EIGNDHKO@oeap?$AA@ DB 'oeap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDLHKEJK@sslv23?$AA@
CONST	SEGMENT
??_C@_06PDLHKEJK@sslv23?$AA@ DB 'sslv23', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BCIEJMJH@pkcs1?$AA@
CONST	SEGMENT
??_C@_05BCIEJMJH@pkcs1?$AA@ DB 'pkcs1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@
CONST	SEGMENT
??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@ DB 'rsa_padding_mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ DB '.\crypto\rsa\rs'
	DB	'a_pmeth.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_keygen
_TEXT	SEGMENT
_cb$ = -12						; size = 12
_ctx$ = 8						; size = 4
_pkey$ = 12						; size = 4
_pkey_rsa_keygen PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 725
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebx
	push	edi
; Line 727
	mov	edi, DWORD PTR _ctx$[esp+16]
	mov	ebx, DWORD PTR [edi+20]
; Line 730
	cmp	DWORD PTR [ebx+4], 0
	jne	SHORT $LN3@pkey_rsa_k
; Line 731
	call	_BN_new
	mov	DWORD PTR [ebx+4], eax
; Line 732
	test	eax, eax
	je	SHORT $LN4@pkey_rsa_k
	push	65537					; 00010001H
	push	eax
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@pkey_rsa_k
$LN4@pkey_rsa_k:
	pop	edi
; Line 733
	xor	eax, eax
	pop	ebx
; Line 749
	add	esp, 12					; 0000000cH
	ret	0
$LN3@pkey_rsa_k:
	push	esi
; Line 735
	call	_RSA_new
	mov	esi, eax
; Line 736
	test	esi, esi
	jne	SHORT $LN5@pkey_rsa_k
	pop	esi
	pop	edi
	pop	ebx
; Line 749
	add	esp, 12					; 0000000cH
	ret	0
$LN5@pkey_rsa_k:
; Line 738
	cmp	DWORD PTR [edi+28], 0
	push	ebp
	je	SHORT $LN6@pkey_rsa_k
; Line 739
	lea	ebp, DWORD PTR _cb$[esp+28]
; Line 740
	mov	eax, ebp
	push	edi
	push	eax
	call	_evp_pkey_set_cb_translate
	add	esp, 8
; Line 741
	jmp	SHORT $LN7@pkey_rsa_k
$LN6@pkey_rsa_k:
; Line 742
	xor	ebp, ebp
$LN7@pkey_rsa_k:
; Line 743
	push	ebp
	push	DWORD PTR [ebx+4]
	push	DWORD PTR [ebx]
	push	esi
	call	_RSA_generate_key_ex
	add	esp, 16					; 00000010H
	mov	edi, eax
	pop	ebp
; Line 745
	push	esi
	test	edi, edi
	jle	SHORT $LN8@pkey_rsa_k
	push	6
	push	DWORD PTR _pkey$[esp+28]
	call	_EVP_PKEY_assign
	add	esp, 12					; 0000000cH
; Line 748
	mov	eax, edi
	pop	esi
	pop	edi
	pop	ebx
; Line 749
	add	esp, 12					; 0000000cH
	ret	0
$LN8@pkey_rsa_k:
; Line 747
	call	_RSA_free
	add	esp, 4
; Line 748
	mov	eax, edi
	pop	esi
	pop	edi
	pop	ebx
; Line 749
	add	esp, 12					; 0000000cH
	ret	0
_pkey_rsa_keygen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_ctrl_str
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_lablen$1 = 16						; size = 4
_pubexp$2 = 16						; size = 4
_value$ = 16						; size = 4
_pkey_rsa_ctrl_str PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 640
	push	esi
; Line 641
	mov	esi, DWORD PTR _value$[esp]
	test	esi, esi
	jne	SHORT $LN2@pkey_rsa_c
; Line 642
	push	642					; 00000282H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	147					; 00000093H
	push	144					; 00000090H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 643
	xor	eax, eax
	pop	esi
; Line 722
	ret	0
$LN2@pkey_rsa_c:
; Line 645
	mov	edx, DWORD PTR _type$[esp]
	mov	ecx, OFFSET ??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@
	mov	eax, edx
	push	ebx
$LL31@pkey_rsa_c:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN32@pkey_rsa_c
	test	bl, bl
	je	SHORT $LN33@pkey_rsa_c
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	SHORT $LN32@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	bl, bl
	jne	SHORT $LL31@pkey_rsa_c
$LN33@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN34@pkey_rsa_c
$LN32@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN34@pkey_rsa_c:
	test	eax, eax
	jne	$LN3@pkey_rsa_c
; Line 647
	mov	ecx, OFFSET ??_C@_05BCIEJMJH@pkcs1?$AA@
	mov	eax, esi
	npad	5
$LL35@pkey_rsa_c:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN36@pkey_rsa_c
	test	dl, dl
	je	SHORT $LN37@pkey_rsa_c
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN36@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL35@pkey_rsa_c
$LN37@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN38@pkey_rsa_c
$LN36@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN38@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN4@pkey_rsa_c
; Line 648
	mov	eax, 1
	jmp	$LN17@pkey_rsa_c
$LN4@pkey_rsa_c:
; Line 649
	mov	ecx, OFFSET ??_C@_06PDLHKEJK@sslv23?$AA@
	mov	eax, esi
	npad	6
$LL39@pkey_rsa_c:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN40@pkey_rsa_c
	test	dl, dl
	je	SHORT $LN41@pkey_rsa_c
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN40@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL39@pkey_rsa_c
$LN41@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN42@pkey_rsa_c
$LN40@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN42@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN6@pkey_rsa_c
; Line 650
	mov	eax, 2
	jmp	$LN17@pkey_rsa_c
$LN6@pkey_rsa_c:
; Line 651
	mov	ecx, OFFSET ??_C@_04CGFJFPFD@none?$AA@
	mov	eax, esi
	npad	6
$LL43@pkey_rsa_c:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN44@pkey_rsa_c
	test	dl, dl
	je	SHORT $LN45@pkey_rsa_c
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN44@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL43@pkey_rsa_c
$LN45@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN46@pkey_rsa_c
$LN44@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN46@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN8@pkey_rsa_c
; Line 652
	mov	eax, 3
	jmp	$LN17@pkey_rsa_c
$LN8@pkey_rsa_c:
; Line 653
	mov	ecx, OFFSET ??_C@_04EIGNDHKO@oeap?$AA@
	mov	eax, esi
	npad	6
$LL47@pkey_rsa_c:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN48@pkey_rsa_c
	test	dl, dl
	je	SHORT $LN49@pkey_rsa_c
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN48@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL47@pkey_rsa_c
$LN49@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN50@pkey_rsa_c
$LN48@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN50@pkey_rsa_c:
	test	eax, eax
	je	SHORT $LN88@pkey_rsa_c
; Line 655
	mov	ecx, OFFSET ??_C@_04MAAGAICF@oaep?$AA@
	mov	eax, esi
$LL51@pkey_rsa_c:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN52@pkey_rsa_c
	test	dl, dl
	je	SHORT $LN53@pkey_rsa_c
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN52@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL51@pkey_rsa_c
$LN53@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN54@pkey_rsa_c
$LN52@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN54@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN12@pkey_rsa_c
$LN88@pkey_rsa_c:
; Line 656
	mov	eax, 4
	jmp	SHORT $LN17@pkey_rsa_c
$LN12@pkey_rsa_c:
; Line 657
	mov	ecx, OFFSET ??_C@_04JNCMEILM@x931?$AA@
	mov	eax, esi
$LL55@pkey_rsa_c:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN56@pkey_rsa_c
	test	dl, dl
	je	SHORT $LN57@pkey_rsa_c
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN56@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL55@pkey_rsa_c
$LN57@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN58@pkey_rsa_c
$LN56@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN58@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN14@pkey_rsa_c
; Line 658
	mov	eax, 5
	jmp	SHORT $LN17@pkey_rsa_c
$LN14@pkey_rsa_c:
; Line 659
	mov	eax, OFFSET ??_C@_03OHCBHMED@pss?$AA@
	npad	4
$LL59@pkey_rsa_c:
	mov	cl, BYTE PTR [esi]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN60@pkey_rsa_c
	test	cl, cl
	je	SHORT $LN61@pkey_rsa_c
	mov	cl, BYTE PTR [esi+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN60@pkey_rsa_c
	add	esi, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL59@pkey_rsa_c
$LN61@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN62@pkey_rsa_c
$LN60@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN62@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN16@pkey_rsa_c
; Line 660
	mov	eax, 6
$LN17@pkey_rsa_c:
; Line 665
	push	0
	push	eax
	push	4097					; 00001001H
	push	-1
	push	6
	push	DWORD PTR _ctx$[esp+24]
	call	_EVP_PKEY_CTX_ctrl
	add	esp, 24					; 00000018H
	pop	ebx
	pop	esi
; Line 722
	ret	0
$LN16@pkey_rsa_c:
; Line 662
	push	662					; 00000296H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	118					; 00000076H
	push	144					; 00000090H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN27@pkey_rsa_c:
; Line 721
	pop	ebx
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 722
	ret	0
$LN3@pkey_rsa_c:
; Line 668
	mov	ecx, OFFSET ??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@
	mov	eax, edx
$LL63@pkey_rsa_c:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN64@pkey_rsa_c
	test	bl, bl
	je	SHORT $LN65@pkey_rsa_c
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	SHORT $LN64@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	bl, bl
	jne	SHORT $LL63@pkey_rsa_c
$LN65@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN66@pkey_rsa_c
$LN64@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN66@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN18@pkey_rsa_c
; Line 670
	push	esi
	call	DWORD PTR __imp__atoi
; Line 671
	push	0
	push	eax
	push	4098					; 00001002H
	push	24					; 00000018H
	push	6
	push	DWORD PTR _ctx$[esp+28]
	call	_EVP_PKEY_CTX_ctrl
	add	esp, 28					; 0000001cH
	pop	ebx
	pop	esi
; Line 722
	ret	0
$LN18@pkey_rsa_c:
; Line 674
	mov	ecx, OFFSET ??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@
	mov	eax, edx
$LL67@pkey_rsa_c:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN68@pkey_rsa_c
	test	bl, bl
	je	SHORT $LN69@pkey_rsa_c
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	SHORT $LN68@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	bl, bl
	jne	SHORT $LL67@pkey_rsa_c
$LN69@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN70@pkey_rsa_c
$LN68@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN70@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN19@pkey_rsa_c
; Line 676
	push	esi
	call	DWORD PTR __imp__atoi
; Line 677
	push	0
	push	eax
	push	4099					; 00001003H
	push	4
	push	6
	push	DWORD PTR _ctx$[esp+28]
	call	_EVP_PKEY_CTX_ctrl
	add	esp, 28					; 0000001cH
	pop	ebx
	pop	esi
; Line 722
	ret	0
$LN19@pkey_rsa_c:
; Line 680
	mov	ecx, OFFSET ??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@
	mov	eax, edx
$LL71@pkey_rsa_c:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN72@pkey_rsa_c
	test	bl, bl
	je	SHORT $LN73@pkey_rsa_c
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	SHORT $LN72@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	bl, bl
	jne	SHORT $LL71@pkey_rsa_c
$LN73@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN74@pkey_rsa_c
$LN72@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN74@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN20@pkey_rsa_c
; Line 682
	mov	DWORD PTR _pubexp$2[esp+4], eax
; Line 683
	lea	eax, DWORD PTR _pubexp$2[esp+4]
	push	esi
	push	eax
	call	_BN_asc2bn
	add	esp, 8
	test	eax, eax
	je	$LN89@pkey_rsa_c
; Line 685
	push	DWORD PTR _pubexp$2[esp+4]
	push	0
	push	4100					; 00001004H
	push	4
	push	6
	push	DWORD PTR _ctx$[esp+24]
	call	_EVP_PKEY_CTX_ctrl
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 686
	test	esi, esi
	jg	SHORT $LN22@pkey_rsa_c
; Line 687
	push	DWORD PTR _pubexp$2[esp+4]
	call	_BN_free
	add	esp, 4
$LN22@pkey_rsa_c:
; Line 688
	pop	ebx
	mov	eax, esi
	pop	esi
; Line 722
	ret	0
$LN20@pkey_rsa_c:
; Line 691
	mov	ecx, OFFSET ??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@
	mov	eax, edx
$LL75@pkey_rsa_c:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN76@pkey_rsa_c
	test	bl, bl
	je	SHORT $LN77@pkey_rsa_c
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	SHORT $LN76@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	bl, bl
	jne	SHORT $LL75@pkey_rsa_c
$LN77@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN78@pkey_rsa_c
$LN76@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN78@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN23@pkey_rsa_c
; Line 693
	push	esi
	call	_EVP_get_digestbyname
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN24@pkey_rsa_c
; Line 694
	push	694					; 000002b6H
; Line 695
	jmp	SHORT $LN90@pkey_rsa_c
$LN24@pkey_rsa_c:
; Line 697
	push	eax
	push	0
	push	4101					; 00001005H
	push	1016					; 000003f8H
	push	6
	push	DWORD PTR _ctx$[esp+24]
	call	_EVP_PKEY_CTX_ctrl
	add	esp, 24					; 00000018H
	pop	ebx
	pop	esi
; Line 722
	ret	0
$LN23@pkey_rsa_c:
; Line 700
	mov	ecx, OFFSET ??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@
	mov	eax, edx
$LL79@pkey_rsa_c:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN80@pkey_rsa_c
	test	bl, bl
	je	SHORT $LN81@pkey_rsa_c
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	SHORT $LN80@pkey_rsa_c
	add	eax, 2
	add	ecx, 2
	test	bl, bl
	jne	SHORT $LL79@pkey_rsa_c
$LN81@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN82@pkey_rsa_c
$LN80@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN82@pkey_rsa_c:
	test	eax, eax
	jne	SHORT $LN25@pkey_rsa_c
; Line 702
	push	esi
	call	_EVP_get_digestbyname
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN26@pkey_rsa_c
; Line 703
	push	703					; 000002bfH
$LN90@pkey_rsa_c:
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	160					; 000000a0H
	push	144					; 00000090H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN89@pkey_rsa_c:
; Line 704
	pop	ebx
	xor	eax, eax
	pop	esi
; Line 722
	ret	0
$LN26@pkey_rsa_c:
; Line 706
	push	eax
	push	0
	push	4105					; 00001009H
	push	768					; 00000300H
	push	6
	push	DWORD PTR _ctx$[esp+24]
	call	_EVP_PKEY_CTX_ctrl
	add	esp, 24					; 00000018H
	pop	ebx
	pop	esi
; Line 722
	ret	0
$LN25@pkey_rsa_c:
; Line 708
	mov	eax, OFFSET ??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@
$LL83@pkey_rsa_c:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN84@pkey_rsa_c
	test	cl, cl
	je	SHORT $LN85@pkey_rsa_c
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN84@pkey_rsa_c
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL83@pkey_rsa_c
$LN85@pkey_rsa_c:
	xor	eax, eax
	jmp	SHORT $LN86@pkey_rsa_c
$LN84@pkey_rsa_c:
	sbb	eax, eax
	or	eax, 1
$LN86@pkey_rsa_c:
	test	eax, eax
	jne	$LN27@pkey_rsa_c
; Line 712
	lea	eax, DWORD PTR _lablen$1[esp+4]
	push	eax
	push	esi
	call	_string_to_hex
	mov	esi, eax
	add	esp, 8
; Line 713
	test	esi, esi
	je	SHORT $LN89@pkey_rsa_c
; Line 715
	push	edi
	push	esi
	push	DWORD PTR _lablen$1[esp+12]
	push	4106					; 0000100aH
	push	768					; 00000300H
	push	6
	push	DWORD PTR _ctx$[esp+28]
	call	_EVP_PKEY_CTX_ctrl
	mov	edi, eax
	add	esp, 24					; 00000018H
; Line 716
	test	edi, edi
	jg	SHORT $LN29@pkey_rsa_c
; Line 717
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN29@pkey_rsa_c:
; Line 718
	mov	eax, edi
	pop	edi
	pop	ebx
	pop	esi
; Line 722
	ret	0
_pkey_rsa_ctrl_str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_ctrl
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_p1$ = 16						; size = 4
_p2$ = 20						; size = 4
_pkey_rsa_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 494
	mov	eax, DWORD PTR _type$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _ctx$[esp]
	push	esi
	push	edi
	mov	esi, DWORD PTR [ebx+20]
	cmp	eax, 13					; 0000000dH
	jg	SHORT $LN48@pkey_rsa_c
	je	SHORT $LN29@pkey_rsa_c
	dec	eax
	cmp	eax, 10					; 0000000aH
	ja	SHORT $LN46@pkey_rsa_c
	movzx	eax, BYTE PTR $LN49@pkey_rsa_c[eax]
	jmp	DWORD PTR $LN57@pkey_rsa_c[eax*4]
$LN27@pkey_rsa_c:
; Line 567
	push	DWORD PTR [esi+16]
	mov	edi, DWORD PTR _p2$[esp+12]
	push	edi
	call	_check_padding_md
	add	esp, 8
	test	eax, eax
	je	SHORT $LN55@pkey_rsa_c
; Line 569
	mov	DWORD PTR [esi+20], edi
; Line 570
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN45@pkey_rsa_c:
; Line 628
	push	629					; 00000275H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	148					; 00000094H
$LN54@pkey_rsa_c:
; Line 516
	push	143					; 0000008fH
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN46@pkey_rsa_c:
; Line 633
	pop	edi
	pop	esi
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 636
	ret	0
$LN29@pkey_rsa_c:
; Line 573
	mov	eax, DWORD PTR _p2$[esp+8]
	mov	ecx, DWORD PTR [esi+20]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 574
	mov	eax, 1
	pop	ebx
; Line 636
	ret	0
$LN48@pkey_rsa_c:
; Line 494
	lea	ecx, DWORD PTR [eax-4097]
	cmp	ecx, 11					; 0000000bH
	ja	SHORT $LN46@pkey_rsa_c
	jmp	DWORD PTR $LN58@pkey_rsa_c[ecx*4]
$LN4@pkey_rsa_c:
; Line 496
	mov	edi, DWORD PTR _p1$[esp+8]
	lea	eax, DWORD PTR [edi-1]
	cmp	eax, 5
	ja	SHORT $bad_pad$59
; Line 497
	push	edi
	push	DWORD PTR [esi+20]
	call	_check_padding_md
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@pkey_rsa_c
$LN55@pkey_rsa_c:
	pop	edi
	pop	esi
; Line 498
	xor	eax, eax
	pop	ebx
; Line 636
	ret	0
$LN6@pkey_rsa_c:
; Line 499
	cmp	edi, 6
	jne	SHORT $LN9@pkey_rsa_c
; Line 500
	test	BYTE PTR [ebx+16], 24			; 00000018H
; Line 506
	jmp	SHORT $LN51@pkey_rsa_c
$LN9@pkey_rsa_c:
	cmp	edi, 4
	jne	SHORT $LN12@pkey_rsa_c
; Line 507
	test	DWORD PTR [ebx+16], 768			; 00000300H
$LN51@pkey_rsa_c:
	je	SHORT $bad_pad$59
; Line 509
	cmp	DWORD PTR [esi+20], 0
	jne	SHORT $LN12@pkey_rsa_c
; Line 510
	call	_EVP_sha1
	mov	DWORD PTR [esi+20], eax
$LN12@pkey_rsa_c:
; Line 512
	mov	DWORD PTR [esi+16], edi
$LN43@pkey_rsa_c:
	pop	edi
	pop	esi
; Line 513
	mov	eax, 1
	pop	ebx
; Line 636
	ret	0
$bad_pad$59:
; Line 516
	push	517					; 00000205H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	144					; 00000090H
; Line 518
	jmp	$LN54@pkey_rsa_c
$LN13@pkey_rsa_c:
; Line 521
	mov	eax, DWORD PTR _p2$[esp+8]
	mov	ecx, DWORD PTR [esi+16]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 522
	mov	eax, 1
	pop	ebx
; Line 636
	ret	0
$LN14@pkey_rsa_c:
; Line 526
	cmp	DWORD PTR [esi+16], 6
	je	SHORT $LN15@pkey_rsa_c
; Line 527
	push	527					; 0000020fH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	146					; 00000092H
; Line 528
	jmp	$LN54@pkey_rsa_c
$LN15@pkey_rsa_c:
; Line 530
	cmp	eax, 4103				; 00001007H
	jne	SHORT $LN16@pkey_rsa_c
; Line 531
	mov	eax, DWORD PTR _p2$[esp+8]
	mov	ecx, DWORD PTR [esi+28]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 537
	mov	eax, 1
	pop	ebx
; Line 636
	ret	0
$LN16@pkey_rsa_c:
; Line 533
	mov	eax, DWORD PTR _p1$[esp+8]
	cmp	eax, -2					; fffffffeH
	jl	$LN46@pkey_rsa_c
; Line 535
	pop	edi
	mov	DWORD PTR [esi+28], eax
; Line 537
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN19@pkey_rsa_c:
; Line 540
	mov	eax, DWORD PTR _p1$[esp+8]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN20@pkey_rsa_c
; Line 541
	push	541					; 0000021dH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	145					; 00000091H
; Line 542
	jmp	$LN54@pkey_rsa_c
$LN20@pkey_rsa_c:
	pop	edi
; Line 544
	mov	DWORD PTR [esi], eax
; Line 545
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN21@pkey_rsa_c:
; Line 548
	mov	edi, DWORD PTR _p2$[esp+8]
	test	edi, edi
	je	$LN46@pkey_rsa_c
; Line 550
	push	DWORD PTR [esi+4]
	call	_BN_free
	add	esp, 4
; Line 551
	mov	DWORD PTR [esi+4], edi
; Line 552
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN23@pkey_rsa_c:
; Line 556
	cmp	DWORD PTR [esi+16], 4
	je	SHORT $LN24@pkey_rsa_c
; Line 557
	push	557					; 0000022dH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	141					; 0000008dH
; Line 558
	jmp	$LN54@pkey_rsa_c
$LN24@pkey_rsa_c:
; Line 560
	cmp	eax, 4107				; 0000100bH
; Line 561
	mov	eax, DWORD PTR _p2$[esp+8]
	jne	SHORT $LN25@pkey_rsa_c
	mov	ecx, DWORD PTR [esi+20]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 564
	mov	eax, 1
	pop	ebx
; Line 636
	ret	0
$LN25@pkey_rsa_c:
	pop	edi
; Line 563
	mov	DWORD PTR [esi+20], eax
; Line 564
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN30@pkey_rsa_c:
; Line 579
	mov	ecx, DWORD PTR [esi+16]
	cmp	ecx, 6
	je	SHORT $LN31@pkey_rsa_c
	cmp	ecx, 4
	je	SHORT $LN31@pkey_rsa_c
; Line 580
	push	580					; 00000244H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	156					; 0000009cH
; Line 581
	jmp	$LN54@pkey_rsa_c
$LN31@pkey_rsa_c:
; Line 583
	cmp	eax, 4104				; 00001008H
; Line 585
	mov	eax, DWORD PTR _p2$[esp+8]
	jne	SHORT $LN32@pkey_rsa_c
; Line 584
	mov	ecx, DWORD PTR [esi+24]
	test	ecx, ecx
	jne	SHORT $LN52@pkey_rsa_c
; Line 587
	mov	ecx, DWORD PTR [esi+20]
$LN52@pkey_rsa_c:
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 590
	mov	eax, 1
	pop	ebx
; Line 636
	ret	0
$LN32@pkey_rsa_c:
	pop	edi
; Line 589
	mov	DWORD PTR [esi+24], eax
; Line 590
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN36@pkey_rsa_c:
; Line 593
	cmp	DWORD PTR [esi+16], 4
	je	SHORT $LN37@pkey_rsa_c
; Line 594
	push	594					; 00000252H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	141					; 0000008dH
	jmp	$LN54@pkey_rsa_c
$LN37@pkey_rsa_c:
; Line 597
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN38@pkey_rsa_c
; Line 598
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN38@pkey_rsa_c:
; Line 599
	mov	eax, DWORD PTR _p2$[esp+8]
	test	eax, eax
	je	SHORT $LN39@pkey_rsa_c
	mov	ecx, DWORD PTR _p1$[esp+8]
	test	ecx, ecx
	jle	SHORT $LN39@pkey_rsa_c
; Line 600
	pop	edi
	mov	DWORD PTR [esi+36], eax
; Line 606
	mov	eax, 1
	mov	DWORD PTR [esi+40], ecx
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN39@pkey_rsa_c:
	pop	edi
; Line 603
	mov	DWORD PTR [esi+36], 0
; Line 606
	mov	eax, 1
	mov	DWORD PTR [esi+40], 0
	pop	esi
	pop	ebx
; Line 636
	ret	0
$LN41@pkey_rsa_c:
; Line 609
	cmp	DWORD PTR [esi+16], 4
	je	SHORT $LN42@pkey_rsa_c
; Line 610
	push	610					; 00000262H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	141					; 0000008dH
	jmp	$LN54@pkey_rsa_c
$LN42@pkey_rsa_c:
; Line 613
	mov	ecx, DWORD PTR _p2$[esp+8]
	mov	edx, DWORD PTR [esi+36]
	pop	edi
	mov	DWORD PTR [ecx], edx
; Line 614
	mov	eax, DWORD PTR [esi+40]
	pop	esi
	pop	ebx
; Line 636
	ret	0
	npad	2
$LN57@pkey_rsa_c:
	DD	$LN27@pkey_rsa_c
	DD	$LN45@pkey_rsa_c
	DD	$LN43@pkey_rsa_c
	DD	$LN46@pkey_rsa_c
$LN49@pkey_rsa_c:
	DB	0
	DB	1
	DB	2
	DB	2
	DB	2
	DB	3
	DB	2
	DB	3
	DB	2
	DB	2
	DB	2
	npad	1
$LN58@pkey_rsa_c:
	DD	$LN4@pkey_rsa_c
	DD	$LN14@pkey_rsa_c
	DD	$LN19@pkey_rsa_c
	DD	$LN21@pkey_rsa_c
	DD	$LN30@pkey_rsa_c
	DD	$LN13@pkey_rsa_c
	DD	$LN14@pkey_rsa_c
	DD	$LN30@pkey_rsa_c
	DD	$LN23@pkey_rsa_c
	DD	$LN36@pkey_rsa_c
	DD	$LN23@pkey_rsa_c
	DD	$LN41@pkey_rsa_c
_pkey_rsa_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_padding_md
_TEXT	SEGMENT
_md$ = 8						; size = 4
_padding$ = 12						; size = 4
_check_padding_md PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 472
	mov	eax, DWORD PTR _md$[esp-4]
	test	eax, eax
	je	SHORT $LN4@check_padd
; Line 475
	mov	ecx, DWORD PTR _padding$[esp-4]
	cmp	ecx, 3
	jne	SHORT $LN3@check_padd
; Line 476
	push	476					; 000001dcH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	141					; 0000008dH
	push	140					; 0000008cH
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 477
	xor	eax, eax
; Line 489
	ret	0
$LN3@check_padd:
; Line 480
	cmp	ecx, 5
	jne	SHORT $LN4@check_padd
; Line 481
	push	eax
	call	_EVP_MD_type
	push	eax
	call	_RSA_X931_hash_id
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN4@check_padd
; Line 482
	push	482					; 000001e2H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	142					; 0000008eH
	push	140					; 0000008cH
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
; Line 489
	ret	0
$LN4@check_padd:
; Line 488
	mov	eax, 1
; Line 489
	ret	0
_check_padding_md ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_decrypt
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outlen$ = 16						; size = 4
_in$ = 20						; size = 4
_inlen$ = 24						; size = 4
_pkey_rsa_decrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 441
	push	esi
	push	edi
; Line 443
	mov	edi, DWORD PTR _ctx$[esp+4]
	mov	esi, DWORD PTR [edi+20]
; Line 444
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, 4
	jne	$LN5@pkey_rsa_d
; Line 154
	cmp	DWORD PTR [esi+32], 0
	jne	SHORT $LN7@pkey_rsa_d
; Line 156
	push	156					; 0000009cH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	DWORD PTR [edi+8]
	call	_EVP_PKEY_size
	add	esp, 4
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+32], eax
; Line 157
	test	eax, eax
	jne	SHORT $LN7@pkey_rsa_d
; Line 447
	pop	edi
	or	eax, -1
	pop	esi
; Line 468
	ret	0
$LN7@pkey_rsa_d:
; Line 448
	mov	eax, DWORD PTR [edi+8]
	push	3
	push	DWORD PTR [eax+20]
	push	DWORD PTR [esi+32]
	push	DWORD PTR _in$[esp+16]
	push	DWORD PTR _inlen$[esp+20]
	call	_RSA_private_decrypt
	mov	edx, eax
	add	esp, 20					; 00000014H
; Line 450
	test	edx, edx
	jg	SHORT $LN8@pkey_rsa_d
	pop	edi
	pop	esi
; Line 468
	ret	0
$LN8@pkey_rsa_d:
; Line 452
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN22@pkey_rsa_d
; Line 453
	mov	eax, DWORD PTR [esi+32]
$LL4@pkey_rsa_d:
	cmp	BYTE PTR [eax+ecx], 0
	jne	SHORT $LN22@pkey_rsa_d
; Line 452
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LL4@pkey_rsa_d
$LN22@pkey_rsa_d:
; Line 456
	push	DWORD PTR [esi+24]
	mov	eax, edx
	push	DWORD PTR [esi+20]
	sub	eax, ecx
	push	DWORD PTR [esi+40]
	push	DWORD PTR [esi+36]
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+32]
	add	eax, ecx
	push	eax
	push	edx
	push	DWORD PTR _out$[esp+36]
	call	_RSA_padding_check_PKCS1_OAEP_mgf1
	add	esp, 36					; 00000024H
; Line 461
	jmp	SHORT $LN23@pkey_rsa_d
$LN5@pkey_rsa_d:
; Line 462
	push	eax
	mov	eax, DWORD PTR [edi+8]
	push	DWORD PTR [eax+20]
	push	DWORD PTR _out$[esp+12]
	push	DWORD PTR _in$[esp+16]
	push	DWORD PTR _inlen$[esp+20]
	call	_RSA_private_decrypt
	add	esp, 20					; 00000014H
$LN23@pkey_rsa_d:
	mov	ecx, eax
; Line 464
	test	ecx, ecx
	jns	SHORT $LN10@pkey_rsa_d
	pop	edi
	pop	esi
; Line 468
	ret	0
$LN10@pkey_rsa_d:
; Line 466
	mov	eax, DWORD PTR _outlen$[esp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 467
	mov	eax, 1
; Line 468
	ret	0
_pkey_rsa_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_encrypt
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outlen$ = 16						; size = 4
_in$ = 20						; size = 4
_inlen$ = 24						; size = 4
_pkey_rsa_encrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 414
	push	ebx
	push	esi
	push	edi
; Line 416
	mov	edi, DWORD PTR _ctx$[esp+8]
	mov	esi, DWORD PTR [edi+20]
; Line 417
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, 4
	jne	SHORT $LN2@pkey_rsa_e
; Line 418
	mov	eax, DWORD PTR [edi+8]
	push	DWORD PTR [eax+20]
	call	_RSA_size
	add	esp, 4
	mov	ebx, eax
; Line 154
	cmp	DWORD PTR [esi+32], 0
	jne	SHORT $LN4@pkey_rsa_e
; Line 156
	push	156					; 0000009cH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	DWORD PTR [edi+8]
	call	_EVP_PKEY_size
	add	esp, 4
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+32], eax
; Line 157
	test	eax, eax
	jne	SHORT $LN4@pkey_rsa_e
$LN14@pkey_rsa_e:
	pop	edi
	pop	esi
; Line 420
	or	eax, -1
	pop	ebx
; Line 436
	ret	0
$LN4@pkey_rsa_e:
; Line 421
	push	DWORD PTR [esi+24]
	push	DWORD PTR [esi+20]
	push	DWORD PTR [esi+40]
	push	DWORD PTR [esi+36]
	push	DWORD PTR _inlen$[esp+24]
	push	DWORD PTR _in$[esp+28]
	push	ebx
	push	DWORD PTR [esi+32]
	call	_RSA_padding_add_PKCS1_OAEP_mgf1
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN14@pkey_rsa_e
; Line 427
	mov	eax, DWORD PTR [edi+8]
	push	3
	push	DWORD PTR [eax+20]
	push	DWORD PTR _out$[esp+16]
	push	DWORD PTR [esi+32]
	push	ebx
; Line 429
	jmp	SHORT $LN13@pkey_rsa_e
$LN2@pkey_rsa_e:
; Line 430
	push	eax
	mov	eax, DWORD PTR [edi+8]
	push	DWORD PTR [eax+20]
	push	DWORD PTR _out$[esp+16]
	push	DWORD PTR _in$[esp+20]
	push	DWORD PTR _inlen$[esp+24]
$LN13@pkey_rsa_e:
	call	_RSA_public_encrypt
	mov	ecx, eax
	add	esp, 20					; 00000014H
; Line 432
	test	ecx, ecx
	jns	SHORT $LN6@pkey_rsa_e
	pop	edi
	pop	esi
	pop	ebx
; Line 436
	ret	0
$LN6@pkey_rsa_e:
; Line 434
	mov	eax, DWORD PTR _outlen$[esp+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], ecx
; Line 435
	mov	eax, 1
; Line 436
	ret	0
_pkey_rsa_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_verify
_TEXT	SEGMENT
_rslen$ = 8						; size = 4
_ctx$ = 8						; size = 4
_sig$ = 12						; size = 4
_siglen$ = 16						; size = 4
_tbs$ = 20						; size = 4
_tbslen$ = 24						; size = 4
_pkey_rsa_verify PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 349
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	esi
	push	edi
	mov	esi, DWORD PTR [eax+20]
; Line 350
	mov	ecx, DWORD PTR [eax+8]
; Line 361
	mov	edx, DWORD PTR [esi+20]
	mov	edi, DWORD PTR [ecx+20]
	test	edx, edx
	je	$LN2@pkey_rsa_v
; Line 373
	mov	ecx, DWORD PTR [esi+16]
	cmp	ecx, 1
	jne	SHORT $LN4@pkey_rsa_v
; Line 374
	push	edi
	push	DWORD PTR _siglen$[esp+8]
	push	DWORD PTR _sig$[esp+12]
	push	DWORD PTR _tbslen$[esp+16]
	push	DWORD PTR _tbs$[esp+20]
	push	edx
	call	_EVP_MD_type
	add	esp, 4
	push	eax
	call	_RSA_verify
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
; Line 409
	ret	0
$LN4@pkey_rsa_v:
; Line 376
	cmp	ecx, 5
	jne	SHORT $LN5@pkey_rsa_v
; Line 377
	push	DWORD PTR _siglen$[esp+4]
	lea	ecx, DWORD PTR _rslen$[esp+8]
	push	DWORD PTR _sig$[esp+8]
	push	ecx
	push	0
	push	eax
	call	_pkey_rsa_verifyrecover
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$LN16@pkey_rsa_v
; Line 401
	mov	ecx, DWORD PTR _rslen$[esp+4]
	jmp	$LN14@pkey_rsa_v
$LN5@pkey_rsa_v:
; Line 379
	cmp	ecx, 6
	jne	SHORT $LN8@pkey_rsa_v
; Line 381
	push	eax
	push	esi
	call	_setup_tbuf
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@pkey_rsa_v
$LN8@pkey_rsa_v:
	pop	edi
; Line 382
	or	eax, -1
	pop	esi
; Line 409
	ret	0
$LN10@pkey_rsa_v:
; Line 383
	push	3
	push	edi
	push	DWORD PTR [esi+32]
	push	DWORD PTR _sig$[esp+16]
	push	DWORD PTR _siglen$[esp+20]
	call	_RSA_public_decrypt
	add	esp, 20					; 00000014H
; Line 385
	test	eax, eax
	jle	$LN16@pkey_rsa_v
; Line 387
	push	DWORD PTR [esi+28]
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	push	DWORD PTR [esi+20]
	push	DWORD PTR _tbs$[esp+20]
	push	edi
	call	_RSA_verify_PKCS1_PSS_mgf1
	add	esp, 24					; 00000018H
; Line 390
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	pop	edi
	mov	eax, ecx
	pop	esi
; Line 409
	ret	0
$LN2@pkey_rsa_v:
; Line 154
	cmp	DWORD PTR [esi+32], 0
	jne	SHORT $LN13@pkey_rsa_v
; Line 156
	push	156					; 0000009cH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	ecx
	call	_EVP_PKEY_size
	add	esp, 4
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+32], eax
; Line 157
	test	eax, eax
	je	SHORT $LN8@pkey_rsa_v
$LN13@pkey_rsa_v:
; Line 398
	push	DWORD PTR [esi+16]
	push	edi
	push	DWORD PTR [esi+32]
	push	DWORD PTR _sig$[esp+16]
	push	DWORD PTR _siglen$[esp+20]
	call	_RSA_public_decrypt
	mov	ecx, eax
	add	esp, 20					; 00000014H
; Line 400
	test	ecx, ecx
	je	SHORT $LN16@pkey_rsa_v
$LN14@pkey_rsa_v:
; Line 404
	cmp	ecx, DWORD PTR _tbslen$[esp+4]
	jne	SHORT $LN16@pkey_rsa_v
	mov	edx, DWORD PTR _tbs$[esp+4]
	mov	esi, DWORD PTR [esi+32]
	sub	ecx, 4
	jb	SHORT $LN25@pkey_rsa_v
	npad	6
$LL26@pkey_rsa_v:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN24@pkey_rsa_v
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL26@pkey_rsa_v
$LN25@pkey_rsa_v:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN23@pkey_rsa_v
$LN24@pkey_rsa_v:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN16@pkey_rsa_v
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN23@pkey_rsa_v
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN16@pkey_rsa_v
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN23@pkey_rsa_v
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN16@pkey_rsa_v
	cmp	ecx, -1
	je	SHORT $LN23@pkey_rsa_v
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	jne	SHORT $LN16@pkey_rsa_v
$LN23@pkey_rsa_v:
	pop	edi
; Line 407
	mov	eax, 1
	pop	esi
; Line 409
	ret	0
$LN16@pkey_rsa_v:
	pop	edi
; Line 405
	xor	eax, eax
	pop	esi
; Line 409
	ret	0
_pkey_rsa_verify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_verifyrecover
_TEXT	SEGMENT
_sltmp$1 = 8						; size = 4
_ctx$ = 8						; size = 4
_rout$ = 12						; size = 4
_routlen$ = 16						; size = 4
_sig$ = 20						; size = 4
_siglen$ = 24						; size = 4
_pkey_rsa_verifyrecover PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 300
	push	esi
; Line 302
	mov	esi, DWORD PTR _ctx$[esp]
	push	edi
	mov	edi, DWORD PTR [esi+20]
; Line 304
	mov	ecx, DWORD PTR [edi+20]
	test	ecx, ecx
	je	$LN2@pkey_rsa_v
; Line 305
	mov	eax, DWORD PTR [edi+16]
	cmp	eax, 5
	jne	$LN4@pkey_rsa_v
; Line 306
	push	esi
	push	edi
	call	_setup_tbuf
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@pkey_rsa_v
$LN11@pkey_rsa_v:
	pop	edi
; Line 307
	or	eax, -1
	pop	esi
; Line 343
	ret	0
$LN6@pkey_rsa_v:
; Line 308
	mov	eax, DWORD PTR [esi+8]
	push	5
	push	DWORD PTR [eax+20]
	push	DWORD PTR [edi+32]
	push	DWORD PTR _sig$[esp+16]
	push	DWORD PTR _siglen$[esp+20]
	call	_RSA_public_decrypt
	mov	esi, eax
	add	esp, 20					; 00000014H
; Line 311
	cmp	esi, 1
	jl	SHORT $LN16@pkey_rsa_v
; Line 314
	push	DWORD PTR [edi+20]
	dec	esi
	call	_EVP_MD_type
	push	eax
	call	_RSA_X931_hash_id
	mov	ecx, DWORD PTR [edi+32]
	add	esp, 8
	movzx	ecx, BYTE PTR [ecx+esi]
	cmp	ecx, eax
	je	SHORT $LN8@pkey_rsa_v
; Line 315
	push	316					; 0000013cH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	100					; 00000064H
	push	141					; 0000008dH
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN16@pkey_rsa_v:
; Line 317
	pop	edi
	xor	eax, eax
	pop	esi
; Line 343
	ret	0
$LN8@pkey_rsa_v:
; Line 319
	push	DWORD PTR [edi+20]
	call	_EVP_MD_size
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN9@pkey_rsa_v
; Line 320
	push	321					; 00000141H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	143					; 0000008fH
	push	141					; 0000008dH
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 343
	ret	0
$LN9@pkey_rsa_v:
; Line 324
	mov	eax, DWORD PTR _rout$[esp+4]
	test	eax, eax
	je	SHORT $LN3@pkey_rsa_v
; Line 325
	push	esi
	push	DWORD PTR [edi+32]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 326
	jmp	SHORT $LN3@pkey_rsa_v
$LN4@pkey_rsa_v:
	cmp	eax, 1
	jne	$LN11@pkey_rsa_v
; Line 328
	mov	eax, DWORD PTR [esi+8]
	push	DWORD PTR [eax+20]
	lea	eax, DWORD PTR _sltmp$1[esp+8]
	push	DWORD PTR _siglen$[esp+8]
	push	DWORD PTR _sig$[esp+12]
	push	eax
	push	DWORD PTR _rout$[esp+20]
	push	0
	push	0
	push	ecx
	call	_EVP_MD_type
	add	esp, 4
	push	eax
	call	_int_rsa_verify
	add	esp, 32					; 00000020H
; Line 331
	test	eax, eax
	jle	$LN16@pkey_rsa_v
; Line 333
	mov	esi, DWORD PTR _sltmp$1[esp+4]
; Line 336
	jmp	SHORT $LN3@pkey_rsa_v
$LN2@pkey_rsa_v:
; Line 337
	push	DWORD PTR [edi+16]
	mov	eax, DWORD PTR [esi+8]
	push	DWORD PTR [eax+20]
	push	DWORD PTR _rout$[esp+12]
	push	DWORD PTR _sig$[esp+16]
	push	DWORD PTR _siglen$[esp+20]
	call	_RSA_public_decrypt
	add	esp, 20					; 00000014H
	mov	esi, eax
$LN3@pkey_rsa_v:
; Line 339
	test	esi, esi
	jns	SHORT $LN14@pkey_rsa_v
; Line 340
	pop	edi
	mov	eax, esi
	pop	esi
; Line 343
	ret	0
$LN14@pkey_rsa_v:
; Line 341
	mov	eax, DWORD PTR _routlen$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], esi
; Line 342
	mov	eax, 1
	pop	esi
; Line 343
	ret	0
_pkey_rsa_verifyrecover ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_sign
_TEXT	SEGMENT
_sltmp$1 = 8						; size = 4
_sltmp$2 = 8						; size = 4
_ctx$ = 8						; size = 4
_sig$ = 12						; size = 4
_siglen$ = 16						; size = 4
_tbs$ = 20						; size = 4
_tbslen$ = 24						; size = 4
_pkey_rsa_sign PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 213
	push	ebx
; Line 215
	mov	ebx, DWORD PTR _ctx$[esp]
	push	ebp
	push	esi
	push	edi
; Line 216
	mov	eax, DWORD PTR [ebx+8]
	mov	esi, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [eax+20]
; Line 226
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	$LN2@pkey_rsa_s
; Line 227
	push	eax
	call	_EVP_MD_size
	mov	ebp, DWORD PTR _tbslen$[esp+16]
	add	esp, 4
	cmp	ebp, eax
	je	SHORT $LN4@pkey_rsa_s
; Line 228
	push	228					; 000000e4H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	143					; 0000008fH
$LN25@pkey_rsa_s:
	push	142					; 0000008eH
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN24@pkey_rsa_s:
; Line 229
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 295
	ret	0
$LN4@pkey_rsa_s:
; Line 246
	push	DWORD PTR [esi+20]
	call	_EVP_MD_type
	add	esp, 4
	cmp	eax, 95					; 0000005fH
	jne	SHORT $LN5@pkey_rsa_s
; Line 248
	cmp	DWORD PTR [esi+16], 1
	jne	SHORT $LN24@pkey_rsa_s
; Line 250
	push	edi
	lea	eax, DWORD PTR _sltmp$2[esp+16]
	push	eax
	push	DWORD PTR _sig$[esp+20]
	push	ebp
	push	DWORD PTR _tbs$[esp+28]
	push	95					; 0000005fH
	call	_RSA_sign_ASN1_OCTET_STRING
	add	esp, 24					; 00000018H
; Line 253
	test	eax, eax
	jle	$LN1@pkey_rsa_s
; Line 255
	mov	ecx, DWORD PTR _sltmp$2[esp+12]
	jmp	$LN3@pkey_rsa_s
$LN5@pkey_rsa_s:
; Line 256
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, 5
	jne	SHORT $LN9@pkey_rsa_s
; Line 257
	push	DWORD PTR [ebx+8]
	call	_EVP_PKEY_size
	lea	ecx, DWORD PTR [ebp+1]
	add	esp, 4
	cmp	eax, ecx
	jae	SHORT $LN11@pkey_rsa_s
; Line 258
	push	258					; 00000102H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	120					; 00000078H
; Line 259
	jmp	SHORT $LN25@pkey_rsa_s
$LN11@pkey_rsa_s:
; Line 261
	push	ebx
	push	esi
	call	_setup_tbuf
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@pkey_rsa_s
; Line 262
	push	262					; 00000106H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	65					; 00000041H
; Line 263
	jmp	$LN25@pkey_rsa_s
$LN12@pkey_rsa_s:
; Line 265
	push	ebp
	push	DWORD PTR _tbs$[esp+16]
	push	DWORD PTR [esi+32]
	call	_memcpy
; Line 266
	push	DWORD PTR [esi+20]
	call	_EVP_MD_type
	push	eax
	call	_RSA_X931_hash_id
	mov	ecx, DWORD PTR [esi+32]
; Line 267
	push	5
	push	edi
	push	DWORD PTR _sig$[esp+40]
	mov	BYTE PTR [ecx+ebp], al
	lea	eax, DWORD PTR [ebp+1]
	push	DWORD PTR [esi+32]
	push	eax
	call	_RSA_private_encrypt
	add	esp, 40					; 00000028H
	jmp	$LN22@pkey_rsa_s
$LN9@pkey_rsa_s:
; Line 269
	cmp	eax, 1
	jne	SHORT $LN13@pkey_rsa_s
; Line 271
	push	edi
	lea	eax, DWORD PTR _sltmp$1[esp+16]
	push	eax
	push	DWORD PTR _sig$[esp+20]
	push	ebp
	push	DWORD PTR _tbs$[esp+28]
	push	DWORD PTR [esi+20]
	call	_EVP_MD_type
	add	esp, 4
	push	eax
	call	_RSA_sign
	add	esp, 24					; 00000018H
; Line 273
	test	eax, eax
	jle	$LN1@pkey_rsa_s
; Line 275
	mov	ecx, DWORD PTR _sltmp$1[esp+12]
	jmp	SHORT $LN3@pkey_rsa_s
$LN13@pkey_rsa_s:
; Line 276
	cmp	eax, 6
	jne	$LN24@pkey_rsa_s
; Line 277
	push	ebx
	push	esi
	call	_setup_tbuf
	add	esp, 8
	test	eax, eax
	je	$LN24@pkey_rsa_s
; Line 279
	push	DWORD PTR [esi+28]
	push	DWORD PTR [esi+24]
	push	DWORD PTR [esi+20]
	push	DWORD PTR _tbs$[esp+24]
	push	DWORD PTR [esi+32]
	push	edi
	call	_RSA_padding_add_PKCS1_PSS_mgf1
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN24@pkey_rsa_s
; Line 284
	push	3
	push	edi
	push	DWORD PTR _sig$[esp+20]
	push	DWORD PTR [esi+32]
	push	edi
	call	_RSA_size
	add	esp, 4
	push	eax
; Line 288
	jmp	SHORT $LN23@pkey_rsa_s
$LN2@pkey_rsa_s:
; Line 289
	push	DWORD PTR [esi+16]
	push	edi
	push	DWORD PTR _sig$[esp+20]
	push	DWORD PTR _tbs$[esp+24]
	push	DWORD PTR _tbslen$[esp+28]
$LN23@pkey_rsa_s:
	call	_RSA_private_encrypt
	add	esp, 20					; 00000014H
$LN22@pkey_rsa_s:
	mov	ecx, eax
$LN3@pkey_rsa_s:
; Line 291
	test	ecx, ecx
	jns	SHORT $LN20@pkey_rsa_s
; Line 292
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ecx
	pop	ebx
; Line 295
	ret	0
$LN20@pkey_rsa_s:
; Line 293
	mov	eax, DWORD PTR _siglen$[esp+12]
	mov	DWORD PTR [eax], ecx
; Line 294
	mov	eax, 1
$LN1@pkey_rsa_s:
; Line 295
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_pkey_rsa_sign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_cleanup
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pkey_rsa_cleanup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 164
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+20]
; Line 165
	test	esi, esi
	je	SHORT $LN2@pkey_rsa_c
; Line 166
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN3@pkey_rsa_c
; Line 167
	push	eax
	call	_BN_free
	add	esp, 4
$LN3@pkey_rsa_c:
; Line 168
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN4@pkey_rsa_c
; Line 169
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@pkey_rsa_c:
; Line 170
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN5@pkey_rsa_c
; Line 171
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN5@pkey_rsa_c:
; Line 172
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN2@pkey_rsa_c:
	pop	esi
; Line 174
	ret	0
_pkey_rsa_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _setup_tbuf
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pk$ = 12						; size = 4
_setup_tbuf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 153
	push	esi
; Line 154
	mov	esi, DWORD PTR _ctx$[esp]
	cmp	DWORD PTR [esi+32], 0
	je	SHORT $LN2@setup_tbuf
; Line 155
	mov	eax, 1
	pop	esi
; Line 160
	ret	0
$LN2@setup_tbuf:
; Line 156
	mov	eax, DWORD PTR _pk$[esp]
	push	156					; 0000009cH
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	DWORD PTR [eax+8]
	call	_EVP_PKEY_size
	add	esp, 4
	push	eax
	call	_CRYPTO_malloc
; Line 157
	xor	ecx, ecx
	mov	DWORD PTR [esi+32], eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	eax, ecx
	pop	esi
; Line 160
	ret	0
_setup_tbuf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_copy
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_pkey_rsa_copy PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 126
	push	edi
; Line 128
	mov	edi, DWORD PTR _dst$[esp]
	push	edi
	call	_pkey_rsa_init
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@pkey_rsa_c
	pop	edi
; Line 150
	ret	0
$LN2@pkey_rsa_c:
; Line 130
	mov	eax, DWORD PTR _src$[esp]
; Line 131
	mov	edi, DWORD PTR [edi+20]
	push	esi
	mov	esi, DWORD PTR [eax+20]
; Line 132
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax
; Line 133
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@pkey_rsa_c
; Line 134
	push	eax
	call	_BN_dup
	add	esp, 4
	mov	DWORD PTR [edi+4], eax
; Line 135
	test	eax, eax
	je	SHORT $LN10@pkey_rsa_c
$LN4@pkey_rsa_c:
; Line 138
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; Line 139
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; Line 140
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; Line 141
	cmp	DWORD PTR [esi+36], 0
	je	SHORT $LN5@pkey_rsa_c
; Line 142
	mov	eax, DWORD PTR [edi+36]
	test	eax, eax
	je	SHORT $LN6@pkey_rsa_c
; Line 143
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN6@pkey_rsa_c:
; Line 144
	push	DWORD PTR [esi+40]
	push	DWORD PTR [esi+36]
	call	_BUF_memdup
	add	esp, 8
	mov	DWORD PTR [edi+36], eax
; Line 145
	test	eax, eax
	jne	SHORT $LN7@pkey_rsa_c
$LN10@pkey_rsa_c:
	pop	esi
; Line 146
	xor	eax, eax
	pop	edi
; Line 150
	ret	0
$LN7@pkey_rsa_c:
; Line 147
	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
$LN5@pkey_rsa_c:
; Line 149
	pop	esi
	mov	eax, 1
	pop	edi
; Line 150
	ret	0
_pkey_rsa_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_rsa_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pkey_rsa_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pmeth.c
; Line 103
	push	103					; 00000067H
	push	OFFSET ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
	push	44					; 0000002cH
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
; Line 104
	test	eax, eax
	jne	SHORT $LN2@pkey_rsa_i
; Line 123
	ret	0
$LN2@pkey_rsa_i:
; Line 118
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	DWORD PTR [eax], 1024			; 00000400H
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+16], 1
	mov	DWORD PTR [eax+20], 0
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+28], -2			; fffffffeH
	mov	DWORD PTR [eax+36], 0
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [ecx+20], eax
; Line 119
	add	eax, 8
	mov	DWORD PTR [ecx+32], eax
; Line 122
	mov	eax, 1
	mov	DWORD PTR [ecx+36], 2
; Line 123
	ret	0
_pkey_rsa_init ENDP
_TEXT	ENDS
END
