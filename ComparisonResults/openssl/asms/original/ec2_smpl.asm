; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ec_GF2m_simple_is_on_curve
PUBLIC	_ec_GF2m_simple_cmp
PUBLIC	_ec_GF2m_simple_make_affine
PUBLIC	_ec_GF2m_simple_points_make_affine
PUBLIC	_ec_GF2m_simple_field_mul
PUBLIC	_ec_GF2m_simple_field_sqr
PUBLIC	_ec_GF2m_simple_field_div
PUBLIC	_ec_GF2m_simple_group_init
PUBLIC	_ec_GF2m_simple_group_finish
PUBLIC	_ec_GF2m_simple_group_clear_finish
PUBLIC	_ec_GF2m_simple_group_copy
PUBLIC	_ec_GF2m_simple_group_set_curve
PUBLIC	_ec_GF2m_simple_group_get_curve
PUBLIC	_ec_GF2m_simple_group_get_degree
PUBLIC	_ec_GF2m_simple_group_check_discriminant
PUBLIC	_ec_GF2m_simple_point_init
PUBLIC	_ec_GF2m_simple_point_finish
PUBLIC	_ec_GF2m_simple_point_clear_finish
PUBLIC	_ec_GF2m_simple_point_copy
PUBLIC	_ec_GF2m_simple_point_set_to_infinity
PUBLIC	_ec_GF2m_simple_point_set_affine_coordinates
PUBLIC	_ec_GF2m_simple_point_get_affine_coordinates
PUBLIC	_ec_GF2m_simple_add
PUBLIC	_ec_GF2m_simple_dbl
PUBLIC	_ec_GF2m_simple_invert
PUBLIC	_ec_GF2m_simple_is_at_infinity
EXTRN	_ec_GF2m_simple_mul:PROC
EXTRN	_ec_GF2m_precompute_mult:PROC
EXTRN	_ec_GF2m_have_precompute_mult:PROC
CONST	SEGMENT
?ret@?1??EC_GF2m_simple_method@@9@9 DD 01H		; `EC_GF2m_simple_method'::`2'::ret
	DD	0197H
	DD	FLAT:_ec_GF2m_simple_group_init
	DD	FLAT:_ec_GF2m_simple_group_finish
	DD	FLAT:_ec_GF2m_simple_group_clear_finish
	DD	FLAT:_ec_GF2m_simple_group_copy
	DD	FLAT:_ec_GF2m_simple_group_set_curve
	DD	FLAT:_ec_GF2m_simple_group_get_curve
	DD	FLAT:_ec_GF2m_simple_group_get_degree
	DD	FLAT:_ec_GF2m_simple_group_check_discriminant
	DD	FLAT:_ec_GF2m_simple_point_init
	DD	FLAT:_ec_GF2m_simple_point_finish
	DD	FLAT:_ec_GF2m_simple_point_clear_finish
	DD	FLAT:_ec_GF2m_simple_point_copy
	DD	FLAT:_ec_GF2m_simple_point_set_to_infinity
	DD	00H
	DD	00H
	DD	FLAT:_ec_GF2m_simple_point_set_affine_coordinates
	DD	FLAT:_ec_GF2m_simple_point_get_affine_coordinates
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ec_GF2m_simple_add
	DD	FLAT:_ec_GF2m_simple_dbl
	DD	FLAT:_ec_GF2m_simple_invert
	DD	FLAT:_ec_GF2m_simple_is_at_infinity
	DD	FLAT:_ec_GF2m_simple_is_on_curve
	DD	FLAT:_ec_GF2m_simple_cmp
	DD	FLAT:_ec_GF2m_simple_make_affine
	DD	FLAT:_ec_GF2m_simple_points_make_affine
	DD	FLAT:_ec_GF2m_simple_mul
	DD	FLAT:_ec_GF2m_precompute_mult
	DD	FLAT:_ec_GF2m_have_precompute_mult
	DD	FLAT:_ec_GF2m_simple_field_mul
	DD	FLAT:_ec_GF2m_simple_field_sqr
	DD	FLAT:_ec_GF2m_simple_field_div
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_EC_GF2m_simple_method
PUBLIC	??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@ ; `string'
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_value_one:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_init:PROC
EXTRN	_BN_clear_free:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_set_negative:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_cmp:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_BN_GF2m_add:PROC
EXTRN	_BN_GF2m_mod_div:PROC
EXTRN	_BN_GF2m_mod_arr:PROC
EXTRN	_BN_GF2m_mod_mul_arr:PROC
EXTRN	_BN_GF2m_mod_sqr_arr:PROC
EXTRN	_BN_GF2m_poly2arr:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_EC_POINT_copy:PROC
EXTRN	_EC_POINT_set_to_infinity:PROC
EXTRN	_EC_POINT_set_affine_coordinates_GF2m:PROC
EXTRN	_EC_POINT_get_affine_coordinates_GF2m:PROC
EXTRN	_EC_POINT_is_at_infinity:PROC
EXTRN	_EC_POINT_make_affine:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@
CONST	SEGMENT
??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@ DB '.\crypto\ec\ec2_s'
	DB	'mpl.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_field_div
_TEXT	SEGMENT
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_field_div PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 795
	push	DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR _group$[esp]
	add	eax, 72					; 00000048H
	push	eax
	push	DWORD PTR _b$[esp+4]
	push	DWORD PTR _a$[esp+8]
	push	DWORD PTR _r$[esp+12]
	call	_BN_GF2m_mod_div
	add	esp, 20					; 00000014H
; Line 796
	ret	0
_ec_GF2m_simple_field_div ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_field_sqr
_TEXT	SEGMENT
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_ctx$ = 20						; size = 4
_ec_GF2m_simple_field_sqr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 788
	push	DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR _group$[esp]
	add	eax, 92					; 0000005cH
	push	eax
	push	DWORD PTR _a$[esp+4]
	push	DWORD PTR _r$[esp+8]
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
; Line 789
	ret	0
_ec_GF2m_simple_field_sqr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_field_mul
_TEXT	SEGMENT
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_field_mul PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 781
	push	DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR _group$[esp]
	add	eax, 92					; 0000005cH
	push	eax
	push	DWORD PTR _b$[esp+4]
	push	DWORD PTR _a$[esp+8]
	push	DWORD PTR _r$[esp+12]
	call	_BN_GF2m_mod_mul_arr
	add	esp, 20					; 00000014H
; Line 782
	ret	0
_ec_GF2m_simple_field_mul ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_points_make_affine
_TEXT	SEGMENT
_group$ = 8						; size = 4
_num$ = 12						; size = 4
_points$ = 16						; size = 4
_ctx$ = 20						; size = 4
_ec_GF2m_simple_points_make_affine PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 766
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 769
	mov	edi, DWORD PTR _num$[esp+12]
	xor	esi, esi
	test	edi, edi
	je	SHORT $LN3@ec_GF2m_si
	mov	ebp, DWORD PTR _ctx$[esp+12]
	mov	ebx, DWORD PTR _group$[esp+12]
$LL4@ec_GF2m_si:
; Line 770
	mov	ecx, DWORD PTR _points$[esp+12]
	mov	eax, DWORD PTR [ebx]
	push	ebp
	push	DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+112]
	push	ebx
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@ec_GF2m_si
; Line 769
	inc	esi
	cmp	esi, edi
	jb	SHORT $LL4@ec_GF2m_si
$LN3@ec_GF2m_si:
	pop	edi
	pop	esi
	pop	ebp
; Line 774
	mov	eax, 1
	pop	ebx
; Line 775
	ret	0
$LN8@ec_GF2m_si:
	pop	edi
	pop	esi
	pop	ebp
; Line 771
	xor	eax, eax
	pop	ebx
; Line 775
	ret	0
_ec_GF2m_simple_points_make_affine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_make_affine
_TEXT	SEGMENT
_y$1$ = -4						; size = 4
_group$ = 8						; size = 4
_x$1$ = 12						; size = 4
_point$ = 12						; size = 4
_ctx$ = 16						; size = 4
_ec_GF2m_simple_make_affine PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 721
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
	push	edi
; Line 726
	mov	edi, DWORD PTR _point$[esp+12]
	xor	ebx, ebx
	xor	ebp, ebp
	cmp	DWORD PTR [edi+64], ebx
	jne	$LN3@ec_GF2m_si
	push	edi
	push	DWORD PTR _group$[esp+16]
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	jne	$LN3@ec_GF2m_si
; Line 729
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+16]
	test	esi, esi
	jne	SHORT $LN5@ec_GF2m_si
; Line 730
	call	_BN_CTX_new
	mov	ebx, eax
	mov	esi, ebx
; Line 731
	test	ebx, ebx
	jne	SHORT $LN5@ec_GF2m_si
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 759
	pop	ecx
	ret	0
$LN5@ec_GF2m_si:
; Line 735
	push	esi
	call	_BN_CTX_start
; Line 736
	push	esi
	call	_BN_CTX_get
; Line 737
	push	esi
	mov	DWORD PTR _x$1$[esp+28], eax
	call	_BN_CTX_get
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y$1$[esp+20], eax
; Line 738
	test	eax, eax
	je	SHORT $err$16
; Line 741
	push	esi
	push	eax
	push	DWORD PTR _x$1$[esp+24]
	push	edi
	push	DWORD PTR _group$[esp+32]
	call	_EC_POINT_get_affine_coordinates_GF2m
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$16
; Line 743
	push	DWORD PTR _x$1$[esp+16]
	lea	eax, DWORD PTR [edi+4]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$16
; Line 745
	push	DWORD PTR _y$1$[esp+20]
	lea	eax, DWORD PTR [edi+24]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$16
; Line 747
	lea	eax, DWORD PTR [edi+44]
	push	1
	push	eax
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	SHORT $err$16
; Line 749
	mov	DWORD PTR [edi+64], 1
; Line 751
	mov	ebp, 1
$err$16:
; Line 754
	test	esi, esi
	je	SHORT $LN11@ec_GF2m_si
; Line 755
	push	esi
	call	_BN_CTX_end
	add	esp, 4
$LN11@ec_GF2m_si:
; Line 756
	test	ebx, ebx
	je	SHORT $LN12@ec_GF2m_si
; Line 757
	push	ebx
	call	_BN_CTX_free
	add	esp, 4
$LN12@ec_GF2m_si:
; Line 758
	pop	esi
	pop	edi
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 759
	pop	ecx
	ret	0
$LN3@ec_GF2m_si:
	pop	edi
	pop	ebp
; Line 727
	mov	eax, 1
	pop	ebx
; Line 759
	pop	ecx
	ret	0
_ec_GF2m_simple_make_affine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_cmp
_TEXT	SEGMENT
_bX$1$ = -16						; size = 4
_aX$1$ = -12						; size = 4
_bY$1$ = -8						; size = 4
_aY$1$ = -4						; size = 4
_group$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_ctx$ = 20						; size = 4
_ec_GF2m_simple_cmp PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 673
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
; Line 678
	mov	ebx, DWORD PTR _a$[esp+16]
	push	esi
	mov	esi, DWORD PTR _group$[esp+20]
	push	edi
	push	ebx
	push	esi
	xor	edi, edi
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ec_GF2m_si
; Line 679
	push	DWORD PTR _b$[esp+24]
	push	esi
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 716
	add	esp, 16					; 00000010H
	ret	0
$LN2@ec_GF2m_si:
	push	ebp
; Line 682
	mov	ebp, DWORD PTR _b$[esp+28]
	push	ebp
	push	esi
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ec_GF2m_si
; Line 685
	cmp	DWORD PTR [ebx+64], edi
	je	SHORT $LN4@ec_GF2m_si
	cmp	DWORD PTR [ebp+64], edi
	je	SHORT $LN4@ec_GF2m_si
; Line 686
	lea	eax, DWORD PTR [ebp+4]
	push	eax
	lea	eax, DWORD PTR [ebx+4]
	push	eax
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ec_GF2m_si
	lea	eax, DWORD PTR [ebp+24]
	push	eax
	lea	eax, DWORD PTR [ebx+24]
	push	eax
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ec_GF2m_si
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 716
	add	esp, 16					; 00000010H
	ret	0
$LN13@ec_GF2m_si:
	pop	ebp
	pop	edi
	pop	esi
; Line 686
	mov	eax, 1
	pop	ebx
; Line 716
	add	esp, 16					; 00000010H
	ret	0
$LN4@ec_GF2m_si:
; Line 690
	mov	esi, DWORD PTR _ctx$[esp+28]
	test	esi, esi
	jne	SHORT $LN6@ec_GF2m_si
; Line 691
	call	_BN_CTX_new
	mov	edi, eax
	mov	esi, edi
; Line 692
	test	edi, edi
	jne	SHORT $LN6@ec_GF2m_si
; Line 693
	pop	ebp
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 716
	add	esp, 16					; 00000010H
	ret	0
$LN6@ec_GF2m_si:
; Line 696
	push	esi
	call	_BN_CTX_start
; Line 697
	push	esi
	call	_BN_CTX_get
; Line 698
	push	esi
	mov	DWORD PTR _aX$1$[esp+44], eax
	call	_BN_CTX_get
; Line 699
	push	esi
	mov	DWORD PTR _aY$1$[esp+48], eax
	call	_BN_CTX_get
; Line 700
	push	esi
	mov	DWORD PTR _bX$1$[esp+52], eax
	call	_BN_CTX_get
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bY$1$[esp+32], eax
; Line 701
	test	eax, eax
	je	SHORT $LN19@ec_GF2m_si
; Line 704
	push	esi
	push	DWORD PTR _aY$1$[esp+36]
	push	DWORD PTR _aX$1$[esp+40]
	push	ebx
	mov	ebx, DWORD PTR _group$[esp+44]
	push	ebx
	call	_EC_POINT_get_affine_coordinates_GF2m
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN19@ec_GF2m_si
; Line 706
	push	esi
	push	DWORD PTR _bY$1$[esp+36]
	push	DWORD PTR _bX$1$[esp+40]
	push	ebp
	push	ebx
	call	_EC_POINT_get_affine_coordinates_GF2m
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN19@ec_GF2m_si
; Line 708
	push	DWORD PTR _bX$1$[esp+32]
	push	DWORD PTR _aX$1$[esp+36]
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@ec_GF2m_si
	push	DWORD PTR _bY$1$[esp+32]
	push	DWORD PTR _aY$1$[esp+36]
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@ec_GF2m_si
	xor	ebx, ebx
	jmp	SHORT $err$23
$LN15@ec_GF2m_si:
	mov	ebx, 1
	jmp	SHORT $err$23
$LN19@ec_GF2m_si:
	or	ebx, -1
$err$23:
; Line 711
	test	esi, esi
	je	SHORT $LN10@ec_GF2m_si
; Line 712
	push	esi
	call	_BN_CTX_end
	add	esp, 4
$LN10@ec_GF2m_si:
; Line 713
	test	edi, edi
	je	SHORT $LN11@ec_GF2m_si
; Line 714
	push	edi
	call	_BN_CTX_free
	add	esp, 4
$LN11@ec_GF2m_si:
; Line 715
	pop	ebp
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 716
	add	esp, 16					; 00000010H
	ret	0
_ec_GF2m_simple_cmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_is_on_curve
_TEXT	SEGMENT
tv223 = -20						; size = 4
_field_mul$1$ = -16					; size = 4
_y2$1$ = -12						; size = 4
tv222 = -8						; size = 4
_field_sqr$1$ = -4					; size = 4
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_ctx$ = 16						; size = 4
_ec_GF2m_simple_is_on_curve PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 605
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
; Line 613
	mov	ebx, DWORD PTR _group$[esp+20]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _point$[esp+28]
	xor	ebp, ebp
	push	esi
	push	ebx
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ec_GF2m_si
; Line 614
	pop	esi
	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	ebx
; Line 662
	add	esp, 20					; 00000014H
	ret	0
$LN2@ec_GF2m_si:
; Line 616
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax+132]
; Line 617
	mov	eax, DWORD PTR [eax+136]
	mov	DWORD PTR _field_mul$1$[esp+32], ecx
	mov	DWORD PTR _field_sqr$1$[esp+32], eax
; Line 620
	cmp	DWORD PTR [esi+64], ebp
	jne	SHORT $LN3@ec_GF2m_si
; Line 621
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 662
	add	esp, 20					; 00000014H
	ret	0
$LN3@ec_GF2m_si:
	push	edi
; Line 623
	mov	edi, DWORD PTR _ctx$[esp+32]
	test	edi, edi
	jne	SHORT $LN5@ec_GF2m_si
; Line 624
	call	_BN_CTX_new
	mov	ebp, eax
	mov	edi, ebp
; Line 625
	test	ebp, ebp
	jne	SHORT $LN5@ec_GF2m_si
; Line 626
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 662
	add	esp, 20					; 00000014H
	ret	0
$LN5@ec_GF2m_si:
; Line 629
	push	edi
	call	_BN_CTX_start
; Line 630
	push	edi
	call	_BN_CTX_get
; Line 631
	push	edi
	mov	DWORD PTR _y2$1$[esp+48], eax
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 632
	test	esi, esi
	je	$LN24@ec_GF2m_si
; Line 641
	mov	ecx, DWORD PTR _point$[esp+32]
	lea	eax, DWORD PTR [ebx+116]
	add	ecx, 4
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR tv223[esp+48], ecx
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN24@ec_GF2m_si
; Line 643
	push	edi
	push	DWORD PTR tv223[esp+40]
	push	esi
	push	esi
	push	ebx
	call	DWORD PTR _field_mul$1$[esp+56]
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN24@ec_GF2m_si
; Line 645
	mov	eax, DWORD PTR _point$[esp+32]
	add	eax, 24					; 00000018H
	push	eax
	push	esi
	push	esi
	mov	DWORD PTR tv222[esp+48], eax
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN24@ec_GF2m_si
; Line 647
	push	edi
	push	DWORD PTR tv223[esp+40]
	push	esi
	push	esi
	push	ebx
	call	DWORD PTR _field_mul$1$[esp+56]
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN24@ec_GF2m_si
; Line 649
	lea	eax, DWORD PTR [ebx+136]
	push	eax
	push	esi
	push	esi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN24@ec_GF2m_si
; Line 651
	push	edi
	push	DWORD PTR tv222[esp+40]
	push	DWORD PTR _y2$1$[esp+44]
	push	ebx
	call	DWORD PTR _field_sqr$1$[esp+52]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN24@ec_GF2m_si
; Line 653
	push	DWORD PTR _y2$1$[esp+36]
	push	esi
	push	esi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN24@ec_GF2m_si
; Line 655
	xor	ebx, ebx
	cmp	DWORD PTR [esi+4], ebx
	sete	bl
	jmp	SHORT $err$28
$LN24@ec_GF2m_si:
	or	ebx, -1
$err$28:
; Line 657
	test	edi, edi
	je	SHORT $LN14@ec_GF2m_si
; Line 658
	push	edi
	call	_BN_CTX_end
	add	esp, 4
$LN14@ec_GF2m_si:
; Line 659
	test	ebp, ebp
	je	SHORT $LN15@ec_GF2m_si
; Line 660
	push	ebp
	call	_BN_CTX_free
	add	esp, 4
$LN15@ec_GF2m_si:
; Line 661
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 662
	add	esp, 20					; 00000014H
	ret	0
_ec_GF2m_simple_is_on_curve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_is_at_infinity
_TEXT	SEGMENT
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_ec_GF2m_simple_is_at_infinity PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 595
	mov	ecx, DWORD PTR _point$[esp-4]
	xor	eax, eax
	cmp	DWORD PTR [ecx+48], eax
	sete	al
; Line 596
	ret	0
_ec_GF2m_simple_is_at_infinity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_invert
_TEXT	SEGMENT
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_ctx$ = 16						; size = 4
_ec_GF2m_simple_invert PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 581
	push	esi
; Line 582
	mov	esi, DWORD PTR _point$[esp]
	push	esi
	push	DWORD PTR _group$[esp+4]
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@ec_GF2m_si
	cmp	DWORD PTR [esi+28], eax
	je	SHORT $LN3@ec_GF2m_si
; Line 586
	push	DWORD PTR _ctx$[esp]
	push	esi
	push	DWORD PTR _group$[esp+8]
	call	_EC_POINT_make_affine
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@ec_GF2m_si
	pop	esi
; Line 589
	ret	0
$LN4@ec_GF2m_si:
; Line 588
	lea	ecx, DWORD PTR [esi+24]
	push	ecx
	lea	eax, DWORD PTR [esi+4]
	push	eax
	push	ecx
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	pop	esi
; Line 589
	ret	0
$LN3@ec_GF2m_si:
; Line 584
	mov	eax, 1
	pop	esi
; Line 589
	ret	0
_ec_GF2m_simple_invert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_dbl
_TEXT	SEGMENT
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_ctx$ = 20						; size = 4
_ec_GF2m_simple_dbl PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 577
	push	DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR _a$[esp]
	push	eax
	push	eax
	push	DWORD PTR _r$[esp+8]
	push	DWORD PTR _group$[esp+12]
	call	_ec_GF2m_simple_add
	add	esp, 20					; 00000014H
; Line 578
	ret	0
_ec_GF2m_simple_dbl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_add
_TEXT	SEGMENT
_x1$1$ = -28						; size = 4
_y1$1$ = -24						; size = 4
_x0$1$ = -20						; size = 4
_y0$1$ = -16						; size = 4
_t$1$ = -12						; size = 4
_y2$1$ = -8						; size = 4
_new_ctx$1$ = -4					; size = 4
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_add PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 460
	mov	eax, 28					; 0000001cH
	call	__chkstk
	push	ebx
; Line 465
	mov	ebx, DWORD PTR _a$[esp+28]
	push	esi
	mov	esi, DWORD PTR _group$[esp+32]
	push	ebx
	push	esi
	mov	DWORD PTR _new_ctx$1$[esp+44], 0
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ec_GF2m_si
; Line 466
	push	DWORD PTR _b$[esp+32]
$LN68@ec_GF2m_si:
	push	DWORD PTR _r$[esp+36]
	call	_EC_POINT_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	esi
	pop	ebx
; Line 568
	add	esp, 28					; 0000001cH
	ret	0
$LN2@ec_GF2m_si:
; Line 471
	mov	eax, DWORD PTR _b$[esp+32]
	push	eax
	push	esi
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@ec_GF2m_si
; Line 472
	push	ebx
; Line 474
	jmp	SHORT $LN68@ec_GF2m_si
$LN4@ec_GF2m_si:
; Line 477
	mov	ebx, DWORD PTR _ctx$[esp+32]
	test	ebx, ebx
	jne	SHORT $LN7@ec_GF2m_si
; Line 478
	call	_BN_CTX_new
	mov	DWORD PTR _new_ctx$1$[esp+36], eax
	mov	ebx, eax
; Line 479
	test	eax, eax
	jne	SHORT $LN7@ec_GF2m_si
	pop	esi
	pop	ebx
; Line 568
	add	esp, 28					; 0000001cH
	ret	0
$LN7@ec_GF2m_si:
	push	ebp
	push	edi
; Line 483
	push	ebx
	call	_BN_CTX_start
; Line 484
	push	ebx
	call	_BN_CTX_get
; Line 485
	push	ebx
	mov	DWORD PTR _x0$1$[esp+56], eax
	call	_BN_CTX_get
; Line 486
	push	ebx
	mov	DWORD PTR _y0$1$[esp+60], eax
	call	_BN_CTX_get
; Line 487
	push	ebx
	mov	DWORD PTR _x1$1$[esp+64], eax
	call	_BN_CTX_get
; Line 488
	push	ebx
	mov	DWORD PTR _y1$1$[esp+68], eax
	call	_BN_CTX_get
; Line 489
	push	ebx
	mov	edi, eax
	call	_BN_CTX_get
; Line 490
	push	ebx
	mov	DWORD PTR _y2$1$[esp+76], eax
	call	_BN_CTX_get
; Line 491
	push	ebx
	mov	ebp, eax
	call	_BN_CTX_get
	add	esp, 36					; 00000024H
	mov	DWORD PTR _t$1$[esp+44], eax
; Line 492
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 495
	mov	eax, DWORD PTR _a$[esp+40]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN9@ec_GF2m_si
; Line 496
	lea	ecx, DWORD PTR [eax+4]
	push	ecx
	push	DWORD PTR _x0$1$[esp+48]
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 498
	mov	eax, DWORD PTR _a$[esp+40]
	add	eax, 24					; 00000018H
	push	eax
	push	DWORD PTR _y0$1$[esp+48]
	call	_BN_copy
	add	esp, 8
; Line 500
	jmp	SHORT $LN70@ec_GF2m_si
$LN9@ec_GF2m_si:
; Line 501
	push	ebx
	push	DWORD PTR _y0$1$[esp+48]
	push	DWORD PTR _x0$1$[esp+52]
	push	eax
	push	esi
	call	_EC_POINT_get_affine_coordinates_GF2m
	add	esp, 20					; 00000014H
$LN70@ec_GF2m_si:
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 504
	mov	eax, DWORD PTR _b$[esp+40]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN14@ec_GF2m_si
; Line 505
	add	eax, 4
	push	eax
	push	DWORD PTR _x1$1$[esp+48]
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 507
	mov	eax, DWORD PTR _b$[esp+40]
	add	eax, 24					; 00000018H
	push	eax
	push	DWORD PTR _y1$1$[esp+48]
	call	_BN_copy
	add	esp, 8
; Line 509
	jmp	SHORT $LN72@ec_GF2m_si
$LN14@ec_GF2m_si:
; Line 510
	push	ebx
	push	DWORD PTR _y1$1$[esp+48]
	push	DWORD PTR _x1$1$[esp+52]
	push	eax
	push	esi
	call	_EC_POINT_get_affine_coordinates_GF2m
	add	esp, 20					; 00000014H
$LN72@ec_GF2m_si:
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 514
	push	DWORD PTR _x1$1$[esp+44]
	push	DWORD PTR _x0$1$[esp+48]
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	je	$LN19@ec_GF2m_si
; Line 515
	push	DWORD PTR _x1$1$[esp+44]
	push	DWORD PTR _x0$1$[esp+48]
	push	DWORD PTR _t$1$[esp+52]
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 517
	push	DWORD PTR _y1$1$[esp+44]
	push	DWORD PTR _y0$1$[esp+48]
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 519
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR _t$1$[esp+48]
	mov	eax, DWORD PTR [eax+140]
	push	ebp
	push	ebp
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 521
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+136]
	push	esi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 523
	lea	eax, DWORD PTR [esi+116]
	push	eax
	push	edi
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 525
	push	ebp
	push	edi
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 527
	push	DWORD PTR _t$1$[esp+44]
; Line 529
	jmp	$LN74@ec_GF2m_si
$LN19@ec_GF2m_si:
; Line 530
	push	DWORD PTR _y1$1$[esp+44]
	push	DWORD PTR _y0$1$[esp+48]
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jne	$LN29@ec_GF2m_si
	mov	ecx, DWORD PTR _x1$1$[esp+44]
	cmp	DWORD PTR [ecx+4], eax
	je	$LN29@ec_GF2m_si
; Line 536
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ecx
	push	DWORD PTR _y1$1$[esp+52]
	mov	eax, DWORD PTR [eax+140]
	push	ebp
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 538
	push	DWORD PTR _x1$1$[esp+44]
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 541
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+136]
	push	esi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 543
	push	ebp
	push	edi
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 545
	lea	eax, DWORD PTR [esi+116]
	push	eax
$LN74@ec_GF2m_si:
	push	edi
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN66@ec_GF2m_si
; Line 549
	push	edi
	push	DWORD PTR _x1$1$[esp+48]
	push	DWORD PTR _y2$1$[esp+52]
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN66@ec_GF2m_si
; Line 551
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _y2$1$[esp+52]
	mov	eax, DWORD PTR [eax+132]
	push	ebp
	push	ebp
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN66@ec_GF2m_si
; Line 553
	push	edi
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN66@ec_GF2m_si
; Line 555
	push	DWORD PTR _y1$1$[esp+44]
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN66@ec_GF2m_si
; Line 558
	push	ebx
	push	ebp
	push	edi
	push	DWORD PTR _r$[esp+52]
	push	esi
	call	_EC_POINT_set_affine_coordinates_GF2m
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN66@ec_GF2m_si
; Line 561
	mov	ebp, 1
	jmp	SHORT $err$76
$LN29@ec_GF2m_si:
; Line 531
	push	DWORD PTR _r$[esp+40]
	push	esi
	call	_EC_POINT_set_to_infinity
	xor	ebp, ebp
	add	esp, 8
	test	eax, eax
	mov	ecx, 1
	cmovne	ebp, ecx
	jmp	SHORT $err$76
$LN66@ec_GF2m_si:
	xor	ebp, ebp
$err$76:
; Line 564
	push	ebx
	call	_BN_CTX_end
; Line 565
	mov	eax, DWORD PTR _new_ctx$1$[esp+48]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN41@ec_GF2m_si
; Line 566
	push	eax
	call	_BN_CTX_free
	add	esp, 4
$LN41@ec_GF2m_si:
; Line 567
	pop	edi
	mov	eax, ebp
	pop	ebp
	pop	esi
	pop	ebx
; Line 568
	add	esp, 28					; 0000001cH
	ret	0
_ec_GF2m_simple_add ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_get_affine_coordinates
_TEXT	SEGMENT
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_point_get_affine_coordinates PROC	; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 424
	push	ebx
	push	edi
; Line 427
	mov	edi, DWORD PTR _point$[esp+4]
	xor	ebx, ebx
	push	edi
	push	DWORD PTR _group$[esp+8]
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ec_GF2m_si
; Line 428
	push	429					; 000001adH
	push	OFFSET ??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@
	push	106					; 0000006aH
	push	162					; 000000a2H
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 430
	xor	eax, eax
	pop	edi
	pop	ebx
; Line 452
	ret	0
$LN2@ec_GF2m_si:
; Line 433
	call	_BN_value_one
	push	eax
	lea	eax, DWORD PTR [edi+44]
	push	eax
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@ec_GF2m_si
; Line 434
	push	435					; 000001b3H
	push	OFFSET ??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@
	push	66					; 00000042H
	push	162					; 000000a2H
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	ebx
; Line 452
	ret	0
$LN3@ec_GF2m_si:
	push	esi
; Line 438
	mov	esi, DWORD PTR _x$[esp+8]
	test	esi, esi
	je	SHORT $LN4@ec_GF2m_si
; Line 439
	lea	eax, DWORD PTR [edi+4]
	push	eax
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$11
; Line 441
	push	0
	push	esi
	call	_BN_set_negative
	add	esp, 8
$LN4@ec_GF2m_si:
; Line 443
	mov	esi, DWORD PTR _y$[esp+8]
	test	esi, esi
	je	SHORT $LN6@ec_GF2m_si
; Line 444
	lea	eax, DWORD PTR [edi+24]
	push	eax
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$11
; Line 446
	push	0
	push	esi
	call	_BN_set_negative
	add	esp, 8
$LN6@ec_GF2m_si:
; Line 448
	mov	ebx, 1
$err$11:
	pop	esi
	pop	edi
; Line 451
	mov	eax, ebx
	pop	ebx
; Line 452
	ret	0
_ec_GF2m_simple_point_get_affine_coordinates ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_set_affine_coordinates
_TEXT	SEGMENT
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_point_set_affine_coordinates PROC	; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 394
	mov	eax, DWORD PTR _x$[esp-4]
	push	ebx
	push	edi
	xor	edi, edi
	test	eax, eax
	je	SHORT $LN3@ec_GF2m_si
	mov	ebx, DWORD PTR _y$[esp+4]
	test	ebx, ebx
	je	SHORT $LN3@ec_GF2m_si
; Line 400
	push	ebp
	push	esi
	mov	esi, DWORD PTR _point$[esp+12]
	push	eax
	lea	ebp, DWORD PTR [esi+4]
	push	ebp
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$9
; Line 402
	push	edi
	push	ebp
	call	_BN_set_negative
; Line 403
	lea	ebp, DWORD PTR [esi+24]
	push	ebx
	push	ebp
	call	_BN_copy
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$9
; Line 405
	push	edi
	push	ebp
	call	_BN_set_negative
; Line 406
	lea	ebx, DWORD PTR [esi+44]
	call	_BN_value_one
	push	eax
	push	ebx
	call	_BN_copy
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$9
; Line 408
	push	edi
	push	ebx
	call	_BN_set_negative
	add	esp, 8
; Line 409
	mov	DWORD PTR [esi+64], 1
; Line 410
	mov	edi, 1
$err$9:
; Line 413
	pop	esi
	pop	ebp
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 414
	ret	0
$LN3@ec_GF2m_si:
; Line 395
	push	396					; 0000018cH
	push	OFFSET ??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@
	push	67					; 00000043H
	push	163					; 000000a3H
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 397
	xor	eax, eax
	pop	edi
	pop	ebx
; Line 414
	ret	0
_ec_GF2m_simple_point_set_affine_coordinates ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_set_to_infinity
_TEXT	SEGMENT
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_ec_GF2m_simple_point_set_to_infinity PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 379
	mov	eax, DWORD PTR _point$[esp-4]
; Line 380
	push	0
	mov	DWORD PTR [eax+64], 0
	add	eax, 44					; 0000002cH
	push	eax
	call	_BN_set_word
	add	esp, 8
; Line 381
	mov	eax, 1
; Line 382
	ret	0
_ec_GF2m_simple_point_set_to_infinity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_copy
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_ec_GF2m_simple_point_copy PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 360
	push	esi
; Line 361
	mov	esi, DWORD PTR _src$[esp]
	push	edi
	mov	edi, DWORD PTR _dest$[esp+4]
	lea	eax, DWORD PTR [esi+4]
	push	eax
	lea	eax, DWORD PTR [edi+4]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ec_GF2m_si
$LN6@ec_GF2m_si:
	pop	edi
; Line 362
	xor	eax, eax
	pop	esi
; Line 370
	ret	0
$LN2@ec_GF2m_si:
; Line 363
	lea	eax, DWORD PTR [esi+24]
	push	eax
	lea	eax, DWORD PTR [edi+24]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ec_GF2m_si
; Line 365
	lea	eax, DWORD PTR [esi+44]
	push	eax
	lea	eax, DWORD PTR [edi+44]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ec_GF2m_si
; Line 367
	mov	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; Line 369
	mov	eax, 1
	pop	edi
	pop	esi
; Line 370
	ret	0
_ec_GF2m_simple_point_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_clear_finish
_TEXT	SEGMENT
_point$ = 8						; size = 4
_ec_GF2m_simple_point_clear_finish PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 348
	push	esi
; Line 349
	mov	esi, DWORD PTR _point$[esp]
	lea	eax, DWORD PTR [esi+4]
	push	eax
	call	_BN_clear_free
; Line 350
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_clear_free
; Line 351
	lea	eax, DWORD PTR [esi+44]
	push	eax
	call	_BN_clear_free
	add	esp, 12					; 0000000cH
; Line 352
	mov	DWORD PTR [esi+64], 0
	pop	esi
; Line 353
	ret	0
_ec_GF2m_simple_point_clear_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_finish
_TEXT	SEGMENT
_point$ = 8						; size = 4
_ec_GF2m_simple_point_finish PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 340
	push	esi
; Line 341
	mov	esi, DWORD PTR _point$[esp]
	lea	eax, DWORD PTR [esi+4]
	push	eax
	call	_BN_free
; Line 342
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_free
	add	esp, 8
; Line 343
	lea	eax, DWORD PTR [esi+44]
	pop	esi
	mov	DWORD PTR _point$[esp-4], eax
	jmp	_BN_free
_ec_GF2m_simple_point_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_point_init
_TEXT	SEGMENT
_point$ = 8						; size = 4
_ec_GF2m_simple_point_init PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 331
	push	esi
; Line 332
	mov	esi, DWORD PTR _point$[esp]
	lea	eax, DWORD PTR [esi+4]
	push	eax
	call	_BN_init
; Line 333
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_init
; Line 334
	lea	eax, DWORD PTR [esi+44]
	push	eax
	call	_BN_init
	add	esp, 12					; 0000000cH
; Line 335
	mov	eax, 1
	pop	esi
; Line 336
	ret	0
_ec_GF2m_simple_point_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_check_discriminant
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ctx$ = 12						; size = 4
_ec_GF2m_simple_group_check_discriminant PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 291
	push	ebx
	push	esi
; Line 296
	mov	esi, DWORD PTR _ctx$[esp+4]
	xor	ebx, ebx
	push	edi
	xor	edi, edi
	test	esi, esi
	jne	SHORT $LN3@ec_GF2m_si
; Line 297
	call	_BN_CTX_new
	mov	ebx, eax
	mov	esi, ebx
; Line 298
	test	ebx, ebx
	jne	SHORT $LN3@ec_GF2m_si
; Line 299
	push	300					; 0000012cH
	push	OFFSET ??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@
	push	65					; 00000041H
	push	159					; 0000009fH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 326
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 327
	ret	0
$LN3@ec_GF2m_si:
	push	ebp
; Line 304
	push	esi
	call	_BN_CTX_start
; Line 305
	push	esi
	call	_BN_CTX_get
	mov	ebp, eax
	add	esp, 8
; Line 306
	test	ebp, ebp
	je	SHORT $err$12
; Line 309
	mov	edx, DWORD PTR _group$[esp+12]
	lea	ecx, DWORD PTR [edx+92]
	push	ecx
	lea	ecx, DWORD PTR [edx+136]
	push	ecx
	push	ebp
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$12
; Line 316
	cmp	DWORD PTR [ebp+4], edi
	mov	eax, 1
	cmovne	edi, eax
$err$12:
; Line 322
	pop	ebp
	test	esi, esi
	je	SHORT $LN7@ec_GF2m_si
; Line 323
	push	esi
	call	_BN_CTX_end
	add	esp, 4
$LN7@ec_GF2m_si:
; Line 324
	test	ebx, ebx
	je	SHORT $LN10@ec_GF2m_si
; Line 325
	push	ebx
	call	_BN_CTX_free
	add	esp, 4
$LN10@ec_GF2m_si:
; Line 326
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 327
	ret	0
_ec_GF2m_simple_group_check_discriminant ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_get_degree
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_GF2m_simple_group_get_degree PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 282
	mov	eax, DWORD PTR _group$[esp-4]
	add	eax, 72					; 00000048H
	push	eax
	call	_BN_num_bits
	add	esp, 4
	dec	eax
; Line 283
	ret	0
_ec_GF2m_simple_group_get_degree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_get_curve
_TEXT	SEGMENT
_group$ = 8						; size = 4
_p$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_group_get_curve PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 255
	mov	ecx, DWORD PTR _p$[esp-4]
	push	esi
	xor	esi, esi
	push	edi
	mov	edi, DWORD PTR _group$[esp+4]
	test	ecx, ecx
	je	SHORT $LN3@ec_GF2m_si
; Line 256
	lea	eax, DWORD PTR [edi+72]
	push	eax
	push	ecx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@ec_GF2m_si
	pop	edi
	pop	esi
; Line 274
	ret	0
$LN3@ec_GF2m_si:
; Line 260
	mov	ecx, DWORD PTR _a$[esp+4]
	test	ecx, ecx
	je	SHORT $LN5@ec_GF2m_si
; Line 261
	lea	eax, DWORD PTR [edi+116]
	push	eax
	push	ecx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$10
$LN5@ec_GF2m_si:
; Line 265
	mov	ecx, DWORD PTR _b$[esp+4]
	test	ecx, ecx
	je	SHORT $LN7@ec_GF2m_si
; Line 266
	lea	eax, DWORD PTR [edi+136]
	push	eax
	push	ecx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$10
$LN7@ec_GF2m_si:
; Line 270
	mov	esi, 1
$err$10:
	pop	edi
; Line 273
	mov	eax, esi
	pop	esi
; Line 274
	ret	0
_ec_GF2m_simple_group_get_curve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_set_curve
_TEXT	SEGMENT
_group$ = 8						; size = 4
_p$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_simple_group_set_curve PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 211
	push	esi
; Line 215
	mov	esi, DWORD PTR _group$[esp]
	push	edi
	push	DWORD PTR _p$[esp+4]
	lea	edi, DWORD PTR [esi+72]
	push	edi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN27@ec_GF2m_si
; Line 217
	push	ebx
	push	6
	lea	ebx, DWORD PTR [esi+92]
	push	ebx
	push	edi
	call	_BN_GF2m_poly2arr
	dec	eax
	add	esp, 12					; 0000000cH
; Line 218
	cmp	eax, 5
	je	SHORT $LN9@ec_GF2m_si
	cmp	eax, 3
	je	SHORT $LN9@ec_GF2m_si
; Line 219
	push	219					; 000000dbH
	push	OFFSET ??_C@_0BH@HFFIPKFF@?4?2crypto?2ec?2ec2_smpl?4c?$AA@
	push	131					; 00000083H
	push	195					; 000000c3H
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN28@ec_GF2m_si:
; Line 243
	xor	eax, eax
	pop	ebx
$err$34:
	pop	edi
	pop	esi
; Line 244
	ret	0
$LN9@ec_GF2m_si:
; Line 224
	push	ebx
	push	DWORD PTR _a$[esp+12]
	lea	edi, DWORD PTR [esi+116]
	push	edi
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN28@ec_GF2m_si
; Line 227
	mov	eax, DWORD PTR [ebx]
	add	eax, 31					; 0000001fH
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	cmp	eax, DWORD PTR [esi+124]
	jg	SHORT $LN15@ec_GF2m_si
	mov	eax, edi
	jmp	SHORT $LN16@ec_GF2m_si
$LN15@ec_GF2m_si:
	push	eax
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN16@ec_GF2m_si:
	test	eax, eax
	je	SHORT $LN28@ec_GF2m_si
; Line 229
	mov	ecx, DWORD PTR [esi+120]
	cmp	ecx, DWORD PTR [esi+124]
	jge	SHORT $LN3@ec_GF2m_si
	npad	1
$LL4@ec_GF2m_si:
; Line 230
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+ecx*4], 0
	inc	ecx
	cmp	ecx, DWORD PTR [esi+124]
	jl	SHORT $LL4@ec_GF2m_si
$LN3@ec_GF2m_si:
; Line 233
	push	ebx
	push	DWORD PTR _b$[esp+12]
	lea	edi, DWORD PTR [esi+136]
	push	edi
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN28@ec_GF2m_si
; Line 236
	mov	eax, DWORD PTR [ebx]
	add	eax, 31					; 0000001fH
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	cmp	eax, DWORD PTR [esi+144]
	jg	SHORT $LN17@ec_GF2m_si
	mov	eax, edi
	jmp	SHORT $LN18@ec_GF2m_si
$LN17@ec_GF2m_si:
	push	eax
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN18@ec_GF2m_si:
	test	eax, eax
	je	$LN28@ec_GF2m_si
; Line 238
	mov	ecx, DWORD PTR [esi+140]
	cmp	ecx, DWORD PTR [esi+144]
	jge	SHORT $LN6@ec_GF2m_si
$LL7@ec_GF2m_si:
; Line 239
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+ecx*4], 0
	inc	ecx
	cmp	ecx, DWORD PTR [esi+144]
	jl	SHORT $LL7@ec_GF2m_si
$LN6@ec_GF2m_si:
	pop	ebx
	pop	edi
; Line 243
	mov	eax, 1
	pop	esi
; Line 244
	ret	0
$LN27@ec_GF2m_si:
	pop	edi
; Line 243
	xor	eax, eax
	pop	esi
; Line 244
	ret	0
_ec_GF2m_simple_group_set_curve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_copy
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_ec_GF2m_simple_group_copy PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 180
	push	ebp
; Line 182
	mov	ebp, DWORD PTR _src$[esp]
	push	esi
	mov	esi, DWORD PTR _dest$[esp+4]
	lea	eax, DWORD PTR [ebp+72]
	push	eax
	lea	eax, DWORD PTR [esi+72]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@ec_GF2m_si
	pop	esi
	pop	ebp
; Line 205
	ret	0
$LN8@ec_GF2m_si:
	push	ebx
; Line 184
	lea	eax, DWORD PTR [ebp+116]
	push	eax
	lea	ebx, DWORD PTR [esi+116]
	push	ebx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@ec_GF2m_si
	pop	ebx
	pop	esi
	pop	ebp
; Line 205
	ret	0
$LN9@ec_GF2m_si:
	push	edi
; Line 186
	lea	eax, DWORD PTR [ebp+136]
	push	eax
	lea	edi, DWORD PTR [esi+136]
	push	edi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@ec_GF2m_si
; Line 188
	mov	eax, DWORD PTR [ebp+92]
	mov	DWORD PTR [esi+92], eax
; Line 189
	mov	eax, DWORD PTR [ebp+96]
	mov	DWORD PTR [esi+96], eax
; Line 190
	mov	eax, DWORD PTR [ebp+100]
	mov	DWORD PTR [esi+100], eax
; Line 191
	mov	eax, DWORD PTR [ebp+104]
	mov	DWORD PTR [esi+104], eax
; Line 192
	mov	eax, DWORD PTR [ebp+108]
	mov	DWORD PTR [esi+108], eax
; Line 193
	mov	eax, DWORD PTR [ebp+112]
	mov	DWORD PTR [esi+112], eax
; Line 195
	mov	eax, DWORD PTR [esi+92]
	add	eax, 31					; 0000001fH
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	cmp	eax, DWORD PTR [esi+124]
	jg	SHORT $LN14@ec_GF2m_si
	mov	eax, ebx
	jmp	SHORT $LN15@ec_GF2m_si
$LN14@ec_GF2m_si:
	push	eax
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN15@ec_GF2m_si:
	test	eax, eax
	je	SHORT $LN28@ec_GF2m_si
; Line 198
	mov	eax, DWORD PTR [esi+92]
	add	eax, 31					; 0000001fH
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	cmp	eax, DWORD PTR [esi+144]
	jg	SHORT $LN16@ec_GF2m_si
	mov	eax, edi
	jmp	SHORT $LN17@ec_GF2m_si
$LN16@ec_GF2m_si:
	push	eax
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN17@ec_GF2m_si:
	test	eax, eax
	jne	SHORT $LN12@ec_GF2m_si
$LN28@ec_GF2m_si:
	pop	edi
	pop	ebx
	pop	esi
; Line 199
	xor	eax, eax
	pop	ebp
; Line 205
	ret	0
$LN12@ec_GF2m_si:
; Line 200
	mov	ecx, DWORD PTR [esi+120]
	cmp	ecx, DWORD PTR [esi+124]
	jge	SHORT $LN3@ec_GF2m_si
	npad	9
$LL4@ec_GF2m_si:
; Line 201
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [eax+ecx*4], 0
	inc	ecx
	cmp	ecx, DWORD PTR [esi+124]
	jl	SHORT $LL4@ec_GF2m_si
$LN3@ec_GF2m_si:
; Line 202
	mov	eax, DWORD PTR [esi+140]
	cmp	eax, DWORD PTR [esi+144]
	jge	SHORT $LN6@ec_GF2m_si
	npad	3
$LL7@ec_GF2m_si:
; Line 203
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [ecx+eax*4], 0
	inc	eax
	cmp	eax, DWORD PTR [esi+144]
	jl	SHORT $LL7@ec_GF2m_si
$LN6@ec_GF2m_si:
	pop	edi
	pop	ebx
	pop	esi
; Line 204
	mov	eax, 1
	pop	ebp
; Line 205
	ret	0
_ec_GF2m_simple_group_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_clear_finish
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_GF2m_simple_group_clear_finish PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 163
	push	esi
; Line 164
	mov	esi, DWORD PTR _group$[esp]
	lea	eax, DWORD PTR [esi+72]
	push	eax
	call	_BN_clear_free
; Line 165
	lea	eax, DWORD PTR [esi+116]
	push	eax
	call	_BN_clear_free
; Line 166
	lea	eax, DWORD PTR [esi+136]
	push	eax
	call	_BN_clear_free
	add	esp, 12					; 0000000cH
; Line 167
	mov	DWORD PTR [esi+92], 0
; Line 168
	mov	DWORD PTR [esi+96], 0
; Line 169
	mov	DWORD PTR [esi+100], 0
; Line 170
	mov	DWORD PTR [esi+104], 0
; Line 171
	mov	DWORD PTR [esi+108], 0
; Line 172
	mov	DWORD PTR [esi+112], -1
	pop	esi
; Line 173
	ret	0
_ec_GF2m_simple_group_clear_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_finish
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_GF2m_simple_group_finish PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 152
	push	esi
; Line 153
	mov	esi, DWORD PTR _group$[esp]
	lea	eax, DWORD PTR [esi+72]
	push	eax
	call	_BN_free
; Line 154
	lea	eax, DWORD PTR [esi+116]
	push	eax
	call	_BN_free
	add	esp, 8
; Line 155
	lea	eax, DWORD PTR [esi+136]
	pop	esi
	mov	DWORD PTR _group$[esp-4], eax
	jmp	_BN_free
_ec_GF2m_simple_group_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_group_init
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_GF2m_simple_group_init PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 140
	push	esi
; Line 141
	mov	esi, DWORD PTR _group$[esp]
	lea	eax, DWORD PTR [esi+72]
	push	eax
	call	_BN_init
; Line 142
	lea	eax, DWORD PTR [esi+116]
	push	eax
	call	_BN_init
; Line 143
	lea	eax, DWORD PTR [esi+136]
	push	eax
	call	_BN_init
	add	esp, 12					; 0000000cH
; Line 144
	mov	eax, 1
	pop	esi
; Line 145
	ret	0
_ec_GF2m_simple_group_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EC_GF2m_simple_method
_TEXT	SEGMENT
_EC_GF2m_simple_method PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_smpl.c
; Line 132
	mov	eax, OFFSET ?ret@?1??EC_GF2m_simple_method@@9@9
; Line 133
	ret	0
_EC_GF2m_simple_method ENDP
_TEXT	ENDS
END
