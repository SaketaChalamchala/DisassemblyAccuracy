; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rand\rand_win.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?have_perfc@?1??readtimer@@9@9 DD 01H			; `readtimer'::`2'::have_perfc
_DATA	ENDS
PUBLIC	_RAND_poll
PUBLIC	_RAND_screen
PUBLIC	_RAND_event
PUBLIC	??_C@_0N@JJPEKNFO@ADVAPI32?4DLL?$AA@		; `string'
PUBLIC	??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@		; `string'
PUBLIC	??_C@_0N@HNENINMF@NETAPI32?4DLL?$AA@		; `string'
PUBLIC	??_C@_0BB@NIBHPBJM@NetStatisticsGet?$AA@	; `string'
PUBLIC	??_C@_0BB@EODNGDFL@NetApiBufferFree?$AA@	; `string'
PUBLIC	??_C@_1CE@MINGJEKI@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAW?$AAo?$AAr?$AAk?$AAs?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@FJCAAMNP@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@JHHBLAOM@CryptAcquireContextW?$AA@	; `string'
PUBLIC	??_C@_0P@HGPEDCEI@CryptGenRandom?$AA@		; `string'
PUBLIC	??_C@_0BE@FBIJLPPP@CryptReleaseContext?$AA@	; `string'
PUBLIC	??_C@_1FM@ELACHIDN@?$AAI?$AAn?$AAt?$AAe?$AAl?$AA?5?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAC?$AAr?$AAy?$AAp?$AAt?$AAo?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AA?5?$AAS?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0L@NDEGIDAG@USER32?4DLL?$AA@		; `string'
PUBLIC	??_C@_0BE@IIKKNMMA@GetForegroundWindow?$AA@	; `string'
PUBLIC	??_C@_0O@IGNBKOOJ@GetCursorInfo?$AA@		; `string'
PUBLIC	??_C@_0P@KCBGCFMP@GetQueueStatus?$AA@		; `string'
PUBLIC	??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@ ; `string'
PUBLIC	??_C@_0BI@GJJDGJIM@CloseToolhelp32Snapshot?$AA@	; `string'
PUBLIC	??_C@_0M@PIAPHADL@Heap32First?$AA@		; `string'
PUBLIC	??_C@_0L@CMGAAJA@Heap32Next?$AA@		; `string'
PUBLIC	??_C@_0BA@FIEIGOLO@Heap32ListFirst?$AA@		; `string'
PUBLIC	??_C@_0P@EPDKPNHA@Heap32ListNext?$AA@		; `string'
PUBLIC	??_C@_0P@ILGHDLOE@Process32First?$AA@		; `string'
PUBLIC	??_C@_0O@LGJLFMBH@Process32Next?$AA@		; `string'
PUBLIC	??_C@_0O@DHAEEPDO@Thread32First?$AA@		; `string'
PUBLIC	??_C@_0N@LDGMJMKG@Thread32Next?$AA@		; `string'
PUBLIC	??_C@_0O@CNMFJJGO@Module32First?$AA@		; `string'
PUBLIC	??_C@_0N@KIGOLBLC@Module32Next?$AA@		; `string'
PUBLIC	??_C@_0BJ@OIDOBJG@?4?2crypto?2rand?2rand_win?4c?$AA@ ; `string'
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@4022000000000000
PUBLIC	__real@4031000000000000
PUBLIC	__real@4046800000000000
PUBLIC	__real@4050000000000000
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__QueryPerformanceCounter@4:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__GlobalMemoryStatus@4:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__GetDIBits@28:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_isservice:PROC
EXTRN	_RAND_add:PROC
EXTRN	_RAND_status:PROC
EXTRN	_EVP_Digest:PROC
EXTRN	_EVP_sha1:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	__except_handler4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?key@?3??RAND_event@@9@9 DD 01H DUP (?)			; `RAND_event'::`4'::key
?lastx@?4??RAND_event@@9@9 DD 01H DUP (?)		; `RAND_event'::`5'::lastx
?lasty@?4??RAND_event@@9@9 DD 01H DUP (?)		; `RAND_event'::`5'::lasty
?lastdx@?4??RAND_event@@9@9 DD 01H DUP (?)		; `RAND_event'::`5'::lastdx
?lastdy@?4??RAND_event@@9@9 DD 01H DUP (?)		; `RAND_event'::`5'::lastdy
_BSS	ENDS
;	COMDAT __real@4050000000000000
CONST	SEGMENT
__real@4050000000000000 DQ 04050000000000000r	; 64
CONST	ENDS
;	COMDAT __real@4046800000000000
CONST	SEGMENT
__real@4046800000000000 DQ 04046800000000000r	; 45
CONST	ENDS
;	COMDAT __real@4031000000000000
CONST	SEGMENT
__real@4031000000000000 DQ 04031000000000000r	; 17
CONST	ENDS
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT ??_C@_0BJ@OIDOBJG@?4?2crypto?2rand?2rand_win?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@OIDOBJG@?4?2crypto?2rand?2rand_win?4c?$AA@ DB '.\crypto\rand\ra'
	DB	'nd_win.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIGOLBLC@Module32Next?$AA@
CONST	SEGMENT
??_C@_0N@KIGOLBLC@Module32Next?$AA@ DB 'Module32Next', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CNMFJJGO@Module32First?$AA@
CONST	SEGMENT
??_C@_0O@CNMFJJGO@Module32First?$AA@ DB 'Module32First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDGMJMKG@Thread32Next?$AA@
CONST	SEGMENT
??_C@_0N@LDGMJMKG@Thread32Next?$AA@ DB 'Thread32Next', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DHAEEPDO@Thread32First?$AA@
CONST	SEGMENT
??_C@_0O@DHAEEPDO@Thread32First?$AA@ DB 'Thread32First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LGJLFMBH@Process32Next?$AA@
CONST	SEGMENT
??_C@_0O@LGJLFMBH@Process32Next?$AA@ DB 'Process32Next', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ILGHDLOE@Process32First?$AA@
CONST	SEGMENT
??_C@_0P@ILGHDLOE@Process32First?$AA@ DB 'Process32First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EPDKPNHA@Heap32ListNext?$AA@
CONST	SEGMENT
??_C@_0P@EPDKPNHA@Heap32ListNext?$AA@ DB 'Heap32ListNext', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FIEIGOLO@Heap32ListFirst?$AA@
CONST	SEGMENT
??_C@_0BA@FIEIGOLO@Heap32ListFirst?$AA@ DB 'Heap32ListFirst', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMGAAJA@Heap32Next?$AA@
CONST	SEGMENT
??_C@_0L@CMGAAJA@Heap32Next?$AA@ DB 'Heap32Next', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PIAPHADL@Heap32First?$AA@
CONST	SEGMENT
??_C@_0M@PIAPHADL@Heap32First?$AA@ DB 'Heap32First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GJJDGJIM@CloseToolhelp32Snapshot?$AA@
CONST	SEGMENT
??_C@_0BI@GJJDGJIM@CloseToolhelp32Snapshot?$AA@ DB 'CloseToolhelp32Snapsh'
	DB	'ot', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@
CONST	SEGMENT
??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@ DB 'CreateToolhelp32Snap'
	DB	'shot', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KCBGCFMP@GetQueueStatus?$AA@
CONST	SEGMENT
??_C@_0P@KCBGCFMP@GetQueueStatus?$AA@ DB 'GetQueueStatus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IGNBKOOJ@GetCursorInfo?$AA@
CONST	SEGMENT
??_C@_0O@IGNBKOOJ@GetCursorInfo?$AA@ DB 'GetCursorInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IIKKNMMA@GetForegroundWindow?$AA@
CONST	SEGMENT
??_C@_0BE@IIKKNMMA@GetForegroundWindow?$AA@ DB 'GetForegroundWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NDEGIDAG@USER32?4DLL?$AA@
CONST	SEGMENT
??_C@_0L@NDEGIDAG@USER32?4DLL?$AA@ DB 'USER32.DLL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@ELACHIDN@?$AAI?$AAn?$AAt?$AAe?$AAl?$AA?5?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAC?$AAr?$AAy?$AAp?$AAt?$AAo?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AA?5?$AAS?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FM@ELACHIDN@?$AAI?$AAn?$AAt?$AAe?$AAl?$AA?5?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAC?$AAr?$AAy?$AAp?$AAt?$AAo?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AA?5?$AAS?$AAe?$AAr@ DB 'I'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 'H', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'C', 00H, 'r', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'o', 00H, 'g', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 'h', 00H, 'i'
	DB	00H, 'c', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'r', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FBIJLPPP@CryptReleaseContext?$AA@
CONST	SEGMENT
??_C@_0BE@FBIJLPPP@CryptReleaseContext?$AA@ DB 'CryptReleaseContext', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HGPEDCEI@CryptGenRandom?$AA@
CONST	SEGMENT
??_C@_0P@HGPEDCEI@CryptGenRandom?$AA@ DB 'CryptGenRandom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JHHBLAOM@CryptAcquireContextW?$AA@
CONST	SEGMENT
??_C@_0BF@JHHBLAOM@CryptAcquireContextW?$AA@ DB 'CryptAcquireContextW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@FJCAAMNP@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FJCAAMNP@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AA?$AA@ DB 'L'
	DB	00H, 'a', 00H, 'n', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'S', 00H
	DB	'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@MINGJEKI@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAW?$AAo?$AAr?$AAk?$AAs?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@MINGJEKI@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAW?$AAo?$AAr?$AAk?$AAs?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'L'
	DB	00H, 'a', 00H, 'n', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'W', 00H
	DB	'o', 00H, 'r', 00H, 'k', 00H, 's', 00H, 't', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EODNGDFL@NetApiBufferFree?$AA@
CONST	SEGMENT
??_C@_0BB@EODNGDFL@NetApiBufferFree?$AA@ DB 'NetApiBufferFree', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NIBHPBJM@NetStatisticsGet?$AA@
CONST	SEGMENT
??_C@_0BB@NIBHPBJM@NetStatisticsGet?$AA@ DB 'NetStatisticsGet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HNENINMF@NETAPI32?4DLL?$AA@
CONST	SEGMENT
??_C@_0N@HNENINMF@NETAPI32?4DLL?$AA@ DB 'NETAPI32.DLL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@
CONST	SEGMENT
??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@ DB 'KERNEL32.DLL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JJPEKNFO@ADVAPI32?4DLL?$AA@
CONST	SEGMENT
??_C@_0N@JJPEKNFO@ADVAPI32?4DLL?$AA@ DB 'ADVAPI32.DLL', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_RAND_poll DD 0ffffffe4H
	DD	00H
	DD	0fffffb84H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN91@RAND_poll
	DD	FLAT:$LN61@RAND_poll
xdata$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _readscreen
_TEXT	SEGMENT
_h$1$ = -100						; size = 4
_hBitmap$1$ = -96					; size = 4
_size$1$ = -92						; size = 4
_bm$ = -88						; size = 24
_bi$ = -64						; size = 40
_md$1 = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_readscreen PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rand\rand_win.c
; Line 684
	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	mov	eax, 116				; 00000074H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+116], eax
	push	ebx
	push	esi
	push	edi
; Line 697
	call	_OPENSSL_isservice
	test	eax, eax
	jg	$LN1@readscreen
; Line 701
	push	0
	call	DWORD PTR __imp__GetDC@4
; Line 704
	mov	esi, DWORD PTR __imp__GetDeviceCaps@8
	mov	ebx, eax
	push	8
	push	ebx
	call	esi
; Line 705
	push	10					; 0000000aH
	push	ebx
	mov	edi, eax
	call	esi
; Line 708
	push	16					; 00000010H
	push	edi
	push	ebx
	mov	DWORD PTR _h$1$[esp+140], eax
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
; Line 711
	lea	ecx, DWORD PTR _bm$[esp+128]
	mov	DWORD PTR _hBitmap$1$[esp+128], eax
	push	ecx
	push	24					; 00000018H
	push	eax
	call	DWORD PTR __imp__GetObjectA@12
; Line 712
	mov	dx, WORD PTR _bm$[esp+144]
	mov	ecx, DWORD PTR _bm$[esp+136]
; Line 715
	mov	eax, DWORD PTR _bm$[esp+132]
	movzx	esi, dx
	imul	esi, ecx
; Line 726
	push	726					; 000002d6H
	mov	DWORD PTR _bi$[esp+136], eax
	mov	ax, WORD PTR _bm$[esp+150]
	push	OFFSET ??_C@_0BJ@OIDOBJG@?4?2crypto?2rand?2rand_win?4c?$AA@
	imul	esi, DWORD PTR _bm$[esp+148]
	mov	DWORD PTR _bi$[esp+136], 40		; 00000028H
	mov	DWORD PTR _bi$[esp+144], ecx
	mov	WORD PTR _bi$[esp+148], dx
	mov	WORD PTR _bi$[esp+150], ax
	push	esi
	mov	DWORD PTR _size$1$[esp+140], esi
	mov	DWORD PTR _bi$[esp+156], 0
	mov	DWORD PTR _bi$[esp+160], 0
	mov	DWORD PTR _bi$[esp+164], 0
	mov	DWORD PTR _bi$[esp+168], 0
	mov	DWORD PTR _bi$[esp+172], 0
	mov	DWORD PTR _bi$[esp+176], 0
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 727
	test	edi, edi
	je	SHORT $LN6@readscreen
; Line 729
	mov	eax, DWORD PTR _h$1$[esp+128]
	xor	esi, esi
	add	eax, -16				; fffffff0H
	test	eax, eax
	jle	SHORT $LN3@readscreen
$LL4@readscreen:
; Line 733
	push	0
	lea	eax, DWORD PTR _bi$[esp+132]
	push	eax
	push	edi
	push	16					; 00000010H
	push	esi
	push	DWORD PTR _hBitmap$1$[esp+148]
	push	ebx
	call	DWORD PTR __imp__GetDIBits@28
; Line 737
	push	0
	call	_EVP_sha1
	push	eax
	push	0
	lea	eax, DWORD PTR _md$1[esp+140]
	push	eax
	push	DWORD PTR _size$1$[esp+144]
	push	edi
	call	_EVP_Digest
	add	esp, 24					; 00000018H
; Line 740
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _md$1[esp+136]
	movsd	QWORD PTR [esp], xmm0
	push	20					; 00000014H
	push	eax
	call	_RAND_add
	mov	eax, DWORD PTR _h$1$[esp+144]
	add	esi, 16					; 00000010H
	add	eax, -16				; fffffff0H
	add	esp, 16					; 00000010H
	cmp	esi, eax
	jl	SHORT $LL4@readscreen
$LN3@readscreen:
; Line 743
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN6@readscreen:
; Line 747
	push	DWORD PTR _hBitmap$1$[esp+128]
	call	DWORD PTR __imp__DeleteObject@4
; Line 748
	push	ebx
	push	0
	call	DWORD PTR __imp__ReleaseDC@8
$LN1@readscreen:
; Line 750
	mov	ecx, DWORD PTR __$ArrayPad$[esp+128]
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_readscreen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _readtimer
_TEXT	SEGMENT
_w$ = -12						; size = 4
_l$ = -8						; size = 8
_readtimer PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rand\rand_win.c
; Line 630
	mov	eax, 12					; 0000000cH
	call	__chkstk
; Line 652
	cmp	DWORD PTR ?have_perfc@?1??readtimer@@9@9, 0
	je	SHORT $LN7@readtimer
; Line 653
	lea	eax, DWORD PTR _l$[esp+12]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	test	eax, eax
	jne	SHORT $LN3@readtimer
; Line 654
	mov	DWORD PTR ?have_perfc@?1??readtimer@@9@9, eax
	jmp	SHORT $LN7@readtimer
$LN3@readtimer:
; Line 656
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _l$[esp+20]
	movsd	QWORD PTR [esp], xmm0
	push	8
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 659
	cmp	DWORD PTR ?have_perfc@?1??readtimer@@9@9, 0
	jne	SHORT $LN5@readtimer
$LN7@readtimer:
; Line 660
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _w$[esp+12], eax
; Line 661
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _w$[esp+20]
	movsd	QWORD PTR [esp], xmm0
	push	4
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
$LN5@readtimer:
; Line 663
	add	esp, 12					; 0000000cH
	ret	0
_readtimer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RAND_event
_TEXT	SEGMENT
_add_entropy$1$ = -8					; size = 8
_iMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
_RAND_event PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rand\rand_win.c
; Line 584
	mov	eax, 8
	call	__chkstk
; Line 587
	mov	eax, DWORD PTR _iMsg$[esp+4]
	xorps	xmm0, xmm0
	movsd	QWORD PTR _add_entropy$1$[esp+8], xmm0
	cmp	eax, 256				; 00000100H
	je	SHORT $LN4@RAND_event
	cmp	eax, 512				; 00000200H
	jne	SHORT $LN2@RAND_event
; Line 604
	mov	ecx, DWORD PTR ?lasty@?4??RAND_event@@9@9
	mov	edx, DWORD PTR ?lastx@?4??RAND_event@@9@9
	push	esi
	mov	esi, DWORD PTR _lParam$[esp+8]
	push	edi
	movzx	edi, si
	shr	esi, 16					; 00000010H
	sub	ecx, esi
	sub	edx, edi
; Line 605
	je	SHORT $LN7@RAND_event
	test	ecx, ecx
	je	SHORT $LN7@RAND_event
	mov	eax, edx
	sub	eax, DWORD PTR ?lastdx@?4??RAND_event@@9@9
	je	SHORT $LN7@RAND_event
	mov	eax, ecx
	sub	eax, DWORD PTR ?lastdy@?4??RAND_event@@9@9
	je	SHORT $LN7@RAND_event
; Line 606
	movsd	xmm0, QWORD PTR __real@3fc999999999999a
	movsd	QWORD PTR _add_entropy$1$[esp+16], xmm0
$LN7@RAND_event:
; Line 607
	mov	DWORD PTR ?lastx@?4??RAND_event@@9@9, edi
	pop	edi
	mov	DWORD PTR ?lasty@?4??RAND_event@@9@9, esi
; Line 608
	mov	DWORD PTR ?lastdx@?4??RAND_event@@9@9, edx
	mov	DWORD PTR ?lastdy@?4??RAND_event@@9@9, ecx
	pop	esi
	jmp	SHORT $LN2@RAND_event
$LN4@RAND_event:
; Line 591
	mov	eax, DWORD PTR _wParam$[esp+4]
	cmp	DWORD PTR ?key@?3??RAND_event@@9@9, eax
	je	SHORT $LN5@RAND_event
; Line 592
	movsd	xmm0, QWORD PTR __real@3fa999999999999a
	movsd	QWORD PTR _add_entropy$1$[esp+8], xmm0
$LN5@RAND_event:
; Line 593
	mov	DWORD PTR ?key@?3??RAND_event@@9@9, eax
$LN2@RAND_event:
; Line 613
	call	_readtimer
; Line 614
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR _add_entropy$1$[esp+16]
	lea	eax, DWORD PTR _iMsg$[esp+12]
	movsd	QWORD PTR [esp], xmm0
	push	4
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 615
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _wParam$[esp+12]
	movsd	QWORD PTR [esp], xmm0
	push	4
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 616
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _lParam$[esp+12]
	movsd	QWORD PTR [esp], xmm0
	push	4
	push	eax
	call	_RAND_add
; Line 619
	add	esp, 24					; 00000018H
; Line 618
	jmp	_RAND_status
_RAND_event ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RAND_screen
_TEXT	SEGMENT
_RAND_screen PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rand\rand_win.c
; Line 624
	call	_RAND_poll
; Line 625
	jmp	_readscreen
_RAND_screen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RAND_poll
_TEXT	SEGMENT
_hentry$2 = -1132					; size = 36
_close_snap$3 = -1096					; size = 4
_module_next$4 = -1092					; size = 4
_entrycnt$5 = -1088					; size = 4
_thread_first$6 = -1084					; size = 4
_process_next$7 = -1080					; size = 4
_process_first$8 = -1076				; size = 4
_w$ = -1072						; size = 4
_good$ = -1068						; size = 4
_cursor$1$ = -1064					; size = 4
_thread_next$9 = -1064					; size = 4
_heaplist_first$1$ = -1060				; size = 4
_netapi$1$ = -1060					; size = 4
_win$1$ = -1056						; size = 4
_module_first$10 = -1056				; size = 4
_h$11 = -1056						; size = 4
_acquire$1$ = -1052					; size = 4
_heap_first$12 = -1052					; size = 4
_netfree$1$ = -1048					; size = 4
_heap_next$13 = -1048					; size = 4
_netstatget$1$ = -1044					; size = 4
_starttime$14 = -1044					; size = 4
_hProvider$ = -1040					; size = 4
_advapi$1$ = -1036					; size = 4
_heaplist_next$15 = -1036				; size = 4
_snap$1$ = -1032					; size = 4
_release$1$ = -1032					; size = 4
_user$1$ = -1032					; size = 4
_ex_cnt_limit$16 = -1032				; size = 4
_kernel$17 = -1028					; size = 4
_handle$18 = -1024					; size = 4
_outbuf$19 = -1024					; size = 4
_starttime$1$ = -1020					; size = 4
_gen$1$ = -1020						; size = 4
_m$20 = -1016						; size = 548
_p$21 = -468						; size = 296
_m$ = -172						; size = 32
_t$22 = -140						; size = 28
_ci$23 = -112						; size = 20
_hlist$24 = -108					; size = 16
_buf$25 = -92						; size = 64
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_RAND_poll PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rand\rand_win.c
; Line 200
	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_RAND_poll
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, 1108				; 00000454H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
; Line 202
	mov	DWORD PTR _hProvider$[ebp], 0
; Line 204
	xor	edi, edi
	mov	DWORD PTR _good$[ebp], edi
; Line 240
	push	OFFSET ??_C@_0N@JJPEKNFO@ADVAPI32?4DLL?$AA@
	mov	esi, DWORD PTR __imp__LoadLibraryA@4
	call	esi
	mov	DWORD PTR _advapi$1$[ebp], eax
; Line 241
	push	OFFSET ??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@
	call	esi
	mov	DWORD PTR _kernel$17[ebp], eax
; Line 243
	push	OFFSET ??_C@_0N@HNENINMF@NETAPI32?4DLL?$AA@
	call	esi
	mov	DWORD PTR _netapi$1$[ebp], eax
; Line 244
	xor	ecx, ecx
	mov	DWORD PTR _acquire$1$[ebp], ecx
; Line 245
	mov	DWORD PTR _gen$1$[ebp], ecx
; Line 246
	mov	DWORD PTR _release$1$[ebp], ecx
; Line 247
	mov	DWORD PTR _netstatget$1$[ebp], ecx
; Line 248
	xor	edx, edx
	mov	DWORD PTR _netfree$1$[ebp], edx
; Line 252
	mov	esi, DWORD PTR __imp__GetProcAddress@8
; Line 251
	test	eax, eax
	je	SHORT $LN17@RAND_poll
; Line 252
	push	OFFSET ??_C@_0BB@NIBHPBJM@NetStatisticsGet?$AA@
	push	eax
	call	esi
	mov	DWORD PTR _netstatget$1$[ebp], eax
; Line 254
	push	OFFSET ??_C@_0BB@EODNGDFL@NetApiBufferFree?$AA@
	push	DWORD PTR _netapi$1$[ebp]
	call	esi
	mov	edx, eax
	mov	DWORD PTR _netfree$1$[ebp], edx
	mov	ecx, DWORD PTR _netstatget$1$[ebp]
$LN17@RAND_poll:
; Line 257
	test	ecx, ecx
	je	$LN20@RAND_poll
	test	edx, edx
	je	$LN20@RAND_poll
; Line 266
	lea	eax, DWORD PTR _outbuf$19[ebp]
	push	eax
	push	0
	push	0
	push	OFFSET ??_C@_1CE@MINGJEKI@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAW?$AAo?$AAr?$AAk?$AAs?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	push	0
	call	ecx
	test	eax, eax
	jne	SHORT $LN19@RAND_poll
; Line 267
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4046800000000000
	movsd	QWORD PTR [esp], xmm0
	push	216					; 000000d8H
	push	DWORD PTR _outbuf$19[ebp]
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 268
	push	DWORD PTR _outbuf$19[ebp]
	call	DWORD PTR _netfree$1$[ebp]
$LN19@RAND_poll:
; Line 270
	lea	eax, DWORD PTR _outbuf$19[ebp]
	push	eax
	push	0
	push	0
	push	OFFSET ??_C@_1BK@FJCAAMNP@?$AAL?$AAa?$AAn?$AAm?$AAa?$AAn?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AA?$AA@
	push	0
	mov	eax, DWORD PTR _netstatget$1$[ebp]
	call	eax
	test	eax, eax
	jne	SHORT $LN20@RAND_poll
; Line 271
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4031000000000000
	movsd	QWORD PTR [esp], xmm0
	push	68					; 00000044H
	push	DWORD PTR _outbuf$19[ebp]
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 272
	push	DWORD PTR _outbuf$19[ebp]
	call	DWORD PTR _netfree$1$[ebp]
$LN20@RAND_poll:
; Line 276
	mov	eax, DWORD PTR _netapi$1$[ebp]
	test	eax, eax
	je	SHORT $LN80@RAND_poll
; Line 277
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
$LN80@RAND_poll:
; Line 285
	mov	eax, DWORD PTR _advapi$1$[ebp]
	test	eax, eax
	je	SHORT $LN89@RAND_poll
; Line 291
	push	OFFSET ??_C@_0BF@JHHBLAOM@CryptAcquireContextW?$AA@
	push	eax
	call	esi
	mov	DWORD PTR _acquire$1$[ebp], eax
; Line 293
	push	OFFSET ??_C@_0P@HGPEDCEI@CryptGenRandom?$AA@
	push	DWORD PTR _advapi$1$[ebp]
	call	esi
	mov	DWORD PTR _gen$1$[ebp], eax
; Line 294
	push	OFFSET ??_C@_0BE@FBIJLPPP@CryptReleaseContext?$AA@
	push	DWORD PTR _advapi$1$[ebp]
	call	esi
	mov	ecx, eax
	mov	DWORD PTR _release$1$[ebp], ecx
	jmp	SHORT $LN22@RAND_poll
$LN89@RAND_poll:
	xor	ecx, ecx
$LN22@RAND_poll:
; Line 298
	mov	eax, DWORD PTR _acquire$1$[ebp]
	test	eax, eax
	je	$LN83@RAND_poll
	cmp	DWORD PTR _gen$1$[ebp], edi
	je	$LN83@RAND_poll
	test	ecx, ecx
	je	$LN83@RAND_poll
; Line 301
	push	-268435456				; f0000000H
	push	1
	push	0
	push	0
	lea	ecx, DWORD PTR _hProvider$[ebp]
	push	ecx
	call	eax
	test	eax, eax
	je	SHORT $LN82@RAND_poll
; Line 303
	lea	eax, DWORD PTR _buf$25[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _hProvider$[ebp]
	call	DWORD PTR _gen$1$[ebp]
	test	eax, eax
	je	SHORT $LN81@RAND_poll
; Line 304
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	push	64					; 00000040H
	lea	eax, DWORD PTR _buf$25[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 305
	mov	edi, 1
	mov	DWORD PTR _good$[ebp], edi
$LN81@RAND_poll:
; Line 310
	push	0
	push	DWORD PTR _hProvider$[ebp]
	call	DWORD PTR _release$1$[ebp]
$LN82@RAND_poll:
; Line 314
	push	0
	push	22					; 00000016H
	push	OFFSET ??_C@_1FM@ELACHIDN@?$AAI?$AAn?$AAt?$AAe?$AAl?$AA?5?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAC?$AAr?$AAy?$AAp?$AAt?$AAo?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AA?5?$AAS?$AAe?$AAr@
	push	0
	lea	eax, DWORD PTR _hProvider$[ebp]
	push	eax
	mov	ecx, DWORD PTR _acquire$1$[ebp]
	call	ecx
	test	eax, eax
	je	SHORT $LN83@RAND_poll
; Line 315
	lea	eax, DWORD PTR _buf$25[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _hProvider$[ebp]
	call	DWORD PTR _gen$1$[ebp]
	test	eax, eax
	je	SHORT $LN27@RAND_poll
; Line 316
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4050000000000000
	movsd	QWORD PTR [esp], xmm0
	push	64					; 00000040H
	lea	eax, DWORD PTR _buf$25[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 317
	mov	edi, 1
	mov	DWORD PTR _good$[ebp], edi
$LN27@RAND_poll:
; Line 322
	push	0
	push	DWORD PTR _hProvider$[ebp]
	call	DWORD PTR _release$1$[ebp]
$LN83@RAND_poll:
; Line 326
	mov	eax, DWORD PTR _advapi$1$[ebp]
	test	eax, eax
	je	SHORT $LN28@RAND_poll
; Line 327
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
$LN28@RAND_poll:
; Line 330
	call	_OPENSSL_isservice
	test	eax, eax
	jne	$LN85@RAND_poll
	push	OFFSET ??_C@_0L@NDEGIDAG@USER32?4DLL?$AA@
	call	DWORD PTR __imp__LoadLibraryA@4
	mov	DWORD PTR _user$1$[ebp], eax
	test	eax, eax
	je	$LN85@RAND_poll
; Line 336
	push	OFFSET ??_C@_0BE@IIKKNMMA@GetForegroundWindow?$AA@
	push	eax
	call	esi
	mov	DWORD PTR _win$1$[ebp], eax
; Line 339
	push	OFFSET ??_C@_0O@IGNBKOOJ@GetCursorInfo?$AA@
	push	DWORD PTR _user$1$[ebp]
	call	esi
	mov	DWORD PTR _cursor$1$[ebp], eax
; Line 340
	push	OFFSET ??_C@_0P@KCBGCFMP@GetQueueStatus?$AA@
	push	DWORD PTR _user$1$[ebp]
	call	esi
	mov	esi, eax
; Line 342
	mov	eax, DWORD PTR _win$1$[ebp]
	test	eax, eax
	je	SHORT $LN31@RAND_poll
; Line 344
	call	eax
	mov	DWORD PTR _h$11[ebp], eax
; Line 345
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	push	4
	lea	eax, DWORD PTR _h$11[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
$LN31@RAND_poll:
; Line 355
	mov	eax, DWORD PTR _cursor$1$[ebp]
	test	eax, eax
	je	SHORT $LN35@RAND_poll
; Line 359
	mov	DWORD PTR _ci$23[ebp], 20		; 00000014H
; Line 360
	lea	ecx, DWORD PTR _ci$23[ebp]
	push	ecx
	call	eax
	test	eax, eax
	je	SHORT $LN35@RAND_poll
; Line 361
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _ci$23[ebp]
	lea	eax, DWORD PTR _ci$23[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
$LN35@RAND_poll:
; Line 364
	test	esi, esi
	je	SHORT $LN84@RAND_poll
; Line 367
	push	191					; 000000bfH
	call	esi
	mov	DWORD PTR _w$[ebp], eax
; Line 368
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	push	4
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
$LN84@RAND_poll:
; Line 371
	push	DWORD PTR _user$1$[ebp]
	call	DWORD PTR __imp__FreeLibrary@4
$LN85@RAND_poll:
; Line 388
	mov	eax, DWORD PTR _kernel$17[ebp]
	test	eax, eax
	je	$LN37@RAND_poll
; Line 405
	xor	esi, esi
	mov	DWORD PTR _starttime$1$[ebp], esi
	mov	DWORD PTR _starttime$14[ebp], esi
; Line 407
	push	OFFSET ??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@
	push	eax
	mov	esi, DWORD PTR __imp__GetProcAddress@8
	call	esi
	mov	DWORD PTR _snap$1$[ebp], eax
; Line 409
	push	OFFSET ??_C@_0BI@GJJDGJIM@CloseToolhelp32Snapshot?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _close_snap$3[ebp], eax
; Line 411
	push	OFFSET ??_C@_0M@PIAPHADL@Heap32First?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _heap_first$12[ebp], eax
; Line 412
	push	OFFSET ??_C@_0L@CMGAAJA@Heap32Next?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _heap_next$13[ebp], eax
; Line 413
	push	OFFSET ??_C@_0BA@FIEIGOLO@Heap32ListFirst?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _heaplist_first$1$[ebp], eax
; Line 415
	push	OFFSET ??_C@_0P@EPDKPNHA@Heap32ListNext?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _heaplist_next$15[ebp], eax
; Line 417
	push	OFFSET ??_C@_0P@ILGHDLOE@Process32First?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _process_first$8[ebp], eax
; Line 419
	push	OFFSET ??_C@_0O@LGJLFMBH@Process32Next?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _process_next$7[ebp], eax
; Line 421
	push	OFFSET ??_C@_0O@DHAEEPDO@Thread32First?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _thread_first$6[ebp], eax
; Line 422
	push	OFFSET ??_C@_0N@LDGMJMKG@Thread32Next?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _thread_next$9[ebp], eax
; Line 423
	push	OFFSET ??_C@_0O@CNMFJJGO@Module32First?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	DWORD PTR _module_first$10[ebp], eax
; Line 424
	push	OFFSET ??_C@_0N@KIGOLBLC@Module32Next?$AA@
	push	DWORD PTR _kernel$17[ebp]
	call	esi
	mov	ecx, eax
	mov	DWORD PTR _module_next$4[ebp], ecx
; Line 429
	mov	eax, DWORD PTR _snap$1$[ebp]
	test	eax, eax
	je	$LN57@RAND_poll
	cmp	DWORD PTR _heap_first$12[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _heap_next$13[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _heaplist_first$1$[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _heaplist_next$15[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _process_first$8[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _process_next$7[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _thread_first$6[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _thread_next$9[ebp], 0
	je	$LN57@RAND_poll
	cmp	DWORD PTR _module_first$10[ebp], 0
	je	$LN57@RAND_poll
	test	ecx, ecx
	je	$LN57@RAND_poll
	push	0
	push	15					; 0000000fH
	call	eax
	mov	esi, eax
	mov	DWORD PTR _handle$18[ebp], esi
	cmp	esi, -1
	je	$LN57@RAND_poll
	xorps	xmm0, xmm0
; Line 438
	movups	XMMWORD PTR _hlist$24[ebp], xmm0
; Line 439
	mov	DWORD PTR _hlist$24[ebp], 16		; 00000010H
; Line 440
	test	edi, edi
	je	SHORT $LN86@RAND_poll
; Line 441
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _starttime$1$[ebp], eax
	mov	DWORD PTR _starttime$14[ebp], eax
$LN86@RAND_poll:
; Line 443
	lea	eax, DWORD PTR _hlist$24[ebp]
	push	eax
	push	esi
	call	DWORD PTR _heaplist_first$1$[ebp]
	test	eax, eax
	je	$LN3@RAND_poll
; Line 456
	mov	esi, 42					; 0000002aH
	mov	DWORD PTR _ex_cnt_limit$16[ebp], esi
	npad	4
$LL4@RAND_poll:
; Line 458
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _hlist$24[ebp]
	lea	eax, DWORD PTR _hlist$24[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 459
	fwait
	mov	DWORD PTR __$SEHRec$[ebp+20], 0
	xorps	xmm0, xmm0
; Line 460
	movups	XMMWORD PTR _hentry$2[ebp], xmm0
	movups	XMMWORD PTR _hentry$2[ebp+16], xmm0
	mov	DWORD PTR _hentry$2[ebp+32], 0
; Line 461
	mov	DWORD PTR _hentry$2[ebp], 36		; 00000024H
; Line 462
	push	DWORD PTR _hlist$24[ebp+8]
	push	DWORD PTR _hlist$24[ebp+4]
	lea	eax, DWORD PTR _hentry$2[ebp]
	push	eax
	call	DWORD PTR _heap_first$12[ebp]
	test	eax, eax
	je	SHORT $LN6@RAND_poll
; Line 465
	mov	esi, 80					; 00000050H
	mov	DWORD PTR _entrycnt$5[ebp], esi
$LL7@RAND_poll:
; Line 467
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4014000000000000
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _hentry$2[ebp]
	lea	eax, DWORD PTR _hentry$2[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 472
	lea	eax, DWORD PTR _hentry$2[ebp]
	push	eax
	call	DWORD PTR _heap_next$13[ebp]
	test	eax, eax
	je	SHORT $LN43@RAND_poll
	test	edi, edi
	je	SHORT $LN44@RAND_poll
	call	DWORD PTR __imp__GetTickCount@0
	sub	eax, DWORD PTR _starttime$1$[ebp]
	cmp	eax, 1000				; 000003e8H
	jae	SHORT $LN43@RAND_poll
$LN44@RAND_poll:
	dec	esi
	mov	DWORD PTR _entrycnt$5[ebp], esi
	test	esi, esi
	jg	SHORT $LL7@RAND_poll
$LN43@RAND_poll:
	mov	esi, DWORD PTR _ex_cnt_limit$16[ebp]
$LN6@RAND_poll:
; Line 474
	fwait
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	jmp	SHORT $LN2@RAND_poll
$LN60@RAND_poll:
$LN91@RAND_poll:
; Line 475
	mov	eax, 1
$LN90@RAND_poll:
$LN62@RAND_poll:
	ret	0
$LN61@RAND_poll:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
; Line 480
	mov	esi, DWORD PTR _ex_cnt_limit$16[ebp]
	dec	esi
	mov	DWORD PTR _ex_cnt_limit$16[ebp], esi
; Line 474
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	edi, DWORD PTR _good$[ebp]
	mov	eax, DWORD PTR _starttime$14[ebp]
	mov	DWORD PTR _starttime$1$[ebp], eax
$LN2@RAND_poll:
; Line 485
	lea	eax, DWORD PTR _hlist$24[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _heaplist_next$15[ebp]
	test	eax, eax
	je	SHORT $LN3@RAND_poll
	test	edi, edi
	je	SHORT $LN46@RAND_poll
	call	DWORD PTR __imp__GetTickCount@0
	sub	eax, DWORD PTR _starttime$1$[ebp]
	cmp	eax, 1000				; 000003e8H
	jae	SHORT $LN3@RAND_poll
$LN46@RAND_poll:
	test	esi, esi
	jg	$LL4@RAND_poll
$LN3@RAND_poll:
; Line 513
	mov	DWORD PTR _p$21[ebp], 296		; 00000128H
; Line 516
	mov	esi, DWORD PTR __imp__GetTickCount@0
; Line 515
	test	edi, edi
	je	SHORT $LN47@RAND_poll
; Line 516
	call	esi
	mov	DWORD PTR _starttime$1$[ebp], eax
$LN47@RAND_poll:
; Line 517
	lea	eax, DWORD PTR _p$21[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _process_first$8[ebp]
	test	eax, eax
	je	SHORT $LN9@RAND_poll
	npad	7
$LL10@RAND_poll:
; Line 519
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4022000000000000
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _p$21[ebp]
	lea	eax, DWORD PTR _p$21[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 521
	lea	eax, DWORD PTR _p$21[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _process_next$7[ebp]
	test	eax, eax
	je	SHORT $LN9@RAND_poll
	test	edi, edi
	je	SHORT $LL10@RAND_poll
	call	esi
	sub	eax, DWORD PTR _starttime$1$[ebp]
	cmp	eax, 1000				; 000003e8H
	jb	SHORT $LL10@RAND_poll
$LN9@RAND_poll:
; Line 529
	mov	DWORD PTR _t$22[ebp], 28		; 0000001cH
; Line 530
	test	edi, edi
	je	SHORT $LN50@RAND_poll
; Line 531
	call	esi
	mov	DWORD PTR _starttime$1$[ebp], eax
$LN50@RAND_poll:
; Line 532
	lea	eax, DWORD PTR _t$22[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _thread_first$6[ebp]
	test	eax, eax
	je	SHORT $LN12@RAND_poll
$LL13@RAND_poll:
; Line 534
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4018000000000000
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _t$22[ebp]
	lea	eax, DWORD PTR _t$22[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 536
	lea	eax, DWORD PTR _t$22[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _thread_next$9[ebp]
	test	eax, eax
	je	SHORT $LN12@RAND_poll
	test	edi, edi
	je	SHORT $LL13@RAND_poll
	call	esi
	sub	eax, DWORD PTR _starttime$1$[ebp]
	cmp	eax, 1000				; 000003e8H
	jb	SHORT $LL13@RAND_poll
$LN12@RAND_poll:
; Line 544
	mov	DWORD PTR _m$20[ebp], 548		; 00000224H
; Line 545
	test	edi, edi
	je	SHORT $LN53@RAND_poll
; Line 546
	call	esi
	mov	DWORD PTR _starttime$1$[ebp], eax
$LN53@RAND_poll:
; Line 547
	lea	eax, DWORD PTR _m$20[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _module_first$10[ebp]
	test	eax, eax
	je	SHORT $LN15@RAND_poll
$LL16@RAND_poll:
; Line 549
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@4022000000000000
	movsd	QWORD PTR [esp], xmm0
	push	DWORD PTR _m$20[ebp]
	lea	eax, DWORD PTR _m$20[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 551
	lea	eax, DWORD PTR _m$20[ebp]
	push	eax
	push	DWORD PTR _handle$18[ebp]
	call	DWORD PTR _module_next$4[ebp]
	test	eax, eax
	je	SHORT $LN15@RAND_poll
	test	edi, edi
	je	SHORT $LL16@RAND_poll
	call	esi
	sub	eax, DWORD PTR _starttime$1$[ebp]
	cmp	eax, 1000				; 000003e8H
	jb	SHORT $LL16@RAND_poll
$LN15@RAND_poll:
; Line 553
	mov	eax, DWORD PTR _close_snap$3[ebp]
; Line 554
	push	DWORD PTR _handle$18[ebp]
; Line 553
	test	eax, eax
	je	SHORT $LN56@RAND_poll
; Line 554
	call	eax
	jmp	SHORT $LN57@RAND_poll
$LN56@RAND_poll:
; Line 556
	call	DWORD PTR __imp__CloseHandle@4
$LN57@RAND_poll:
; Line 560
	push	DWORD PTR _kernel$17[ebp]
	call	DWORD PTR __imp__FreeLibrary@4
$LN37@RAND_poll:
; Line 566
	call	_readtimer
; Line 569
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalMemoryStatus@4
; Line 570
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	push	32					; 00000020H
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 573
	call	DWORD PTR __imp__GetCurrentProcessId@0
	mov	DWORD PTR _w$[ebp], eax
; Line 574
	mov	eax, 8
	call	__chkstk
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	push	4
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 580
	mov	eax, 1
; Line 581
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_RAND_poll ENDP
_TEXT	ENDS
END
