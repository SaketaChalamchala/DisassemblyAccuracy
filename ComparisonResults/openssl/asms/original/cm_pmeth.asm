; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_cmac_pkey_meth
CONST	SEGMENT
_cmac_pkey_meth DD 037eH
	DD	04H
	DD	FLAT:_pkey_cmac_init
	DD	FLAT:_pkey_cmac_copy
	DD	FLAT:_pkey_cmac_cleanup
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_pkey_cmac_keygen
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_cmac_signctx_init
	DD	FLAT:_cmac_signctx
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_pkey_cmac_ctrl
	DD	FLAT:_pkey_cmac_ctrl_str
CONST	ENDS
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_06KDGDAFPH@cipher?$AA@			; `string'
PUBLIC	??_C@_06BHJHKMJC@hexkey?$AA@			; `string'
EXTRN	_CRYPTO_free:PROC
EXTRN	_EVP_MD_CTX_set_flags:PROC
EXTRN	_EVP_get_cipherbyname:PROC
EXTRN	_EVP_PKEY_assign:PROC
EXTRN	_string_to_hex:PROC
EXTRN	_CMAC_CTX_new:PROC
EXTRN	_CMAC_CTX_free:PROC
EXTRN	_CMAC_CTX_copy:PROC
EXTRN	_CMAC_Init:PROC
EXTRN	_CMAC_Update:PROC
EXTRN	_CMAC_Final:PROC
;	COMDAT ??_C@_06BHJHKMJC@hexkey?$AA@
CONST	SEGMENT
??_C@_06BHJHKMJC@hexkey?$AA@ DB 'hexkey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDGDAFPH@cipher?$AA@
CONST	SEGMENT
??_C@_06KDGDAFPH@cipher?$AA@ DB 'cipher', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_cmac_ctrl_str
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_keylen$1 = 16						; size = 4
_value$ = 16						; size = 4
_pkey_cmac_ctrl_str PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 156
	push	esi
; Line 157
	mov	esi, DWORD PTR _value$[esp]
	test	esi, esi
	jne	SHORT $LN2@pkey_cmac_
; Line 158
	xor	eax, eax
	pop	esi
; Line 183
	ret	0
$LN2@pkey_cmac_:
; Line 160
	mov	ecx, DWORD PTR _type$[esp]
	mov	edx, OFFSET ??_C@_03ICHNJLJF@key?$AA@
	mov	eax, ecx
	push	ebx
	npad	7
$LL51@pkey_cmac_:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN52@pkey_cmac_
	test	bl, bl
	je	SHORT $LN53@pkey_cmac_
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN52@pkey_cmac_
	add	eax, 2
	add	edx, 2
	test	bl, bl
	jne	SHORT $LL51@pkey_cmac_
$LN53@pkey_cmac_:
	xor	eax, eax
	jmp	SHORT $LN54@pkey_cmac_
$LN52@pkey_cmac_:
	sbb	eax, eax
	or	eax, 1
$LN54@pkey_cmac_:
	test	eax, eax
	jne	SHORT $LN3@pkey_cmac_
; Line 162
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
	npad	2
$LL55@pkey_cmac_:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL55@pkey_cmac_
	sub	ecx, edx
; Line 124
	mov	eax, DWORD PTR _ctx$[esp+4]
; Line 128
	js	SHORT $LN14@pkey_cmac_
; Line 130
	push	0
	push	0
	push	ecx
	push	esi
	push	DWORD PTR [eax+20]
	call	_CMAC_Init
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN14@pkey_cmac_
	pop	ebx
; Line 151
	mov	eax, 1
	pop	esi
; Line 183
	ret	0
$LN3@pkey_cmac_:
; Line 164
	mov	edx, OFFSET ??_C@_06KDGDAFPH@cipher?$AA@
	mov	eax, ecx
$LL56@pkey_cmac_:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN57@pkey_cmac_
	test	bl, bl
	je	SHORT $LN58@pkey_cmac_
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN57@pkey_cmac_
	add	eax, 2
	add	edx, 2
	test	bl, bl
	jne	SHORT $LL56@pkey_cmac_
$LN58@pkey_cmac_:
	xor	eax, eax
	jmp	SHORT $LN59@pkey_cmac_
$LN57@pkey_cmac_:
	sbb	eax, eax
	or	eax, 1
$LN59@pkey_cmac_:
	test	eax, eax
	jne	SHORT $LN4@pkey_cmac_
; Line 166
	push	esi
	call	_EVP_get_cipherbyname
	mov	ecx, eax
	add	esp, 4
; Line 167
	test	ecx, ecx
	jne	SHORT $LN5@pkey_cmac_
$LN14@pkey_cmac_:
	pop	ebx
; Line 168
	xor	eax, eax
	pop	esi
; Line 183
	ret	0
$LN5@pkey_cmac_:
; Line 124
	mov	eax, DWORD PTR _ctx$[esp+4]
; Line 135
	push	DWORD PTR [eax+4]
	push	ecx
	push	0
	push	0
	push	DWORD PTR [eax+20]
	call	_CMAC_Init
	add	esp, 20					; 00000014H
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebx
	pop	esi
; Line 183
	ret	0
$LN4@pkey_cmac_:
; Line 171
	mov	eax, OFFSET ??_C@_06BHJHKMJC@hexkey?$AA@
$LL60@pkey_cmac_:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN61@pkey_cmac_
	test	dl, dl
	je	SHORT $LN62@pkey_cmac_
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN61@pkey_cmac_
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL60@pkey_cmac_
$LN62@pkey_cmac_:
	xor	eax, eax
	jmp	SHORT $LN63@pkey_cmac_
$LN61@pkey_cmac_:
	sbb	eax, eax
	or	eax, 1
$LN63@pkey_cmac_:
	test	eax, eax
	jne	SHORT $LN6@pkey_cmac_
; Line 175
	push	edi
	lea	eax, DWORD PTR _keylen$1[esp+8]
	push	eax
	push	esi
	call	_string_to_hex
	mov	edi, eax
	add	esp, 8
; Line 176
	test	edi, edi
	jne	SHORT $LN7@pkey_cmac_
	pop	edi
	pop	ebx
	pop	esi
; Line 183
	ret	0
$LN7@pkey_cmac_:
; Line 124
	mov	eax, DWORD PTR _ctx$[esp+8]
	mov	ecx, DWORD PTR [eax+20]
; Line 128
	mov	eax, DWORD PTR _keylen$1[esp+8]
	test	eax, eax
	js	SHORT $LN42@pkey_cmac_
; Line 130
	push	0
	push	0
	push	eax
	push	edi
	push	ecx
	call	_CMAC_Init
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN42@pkey_cmac_
; Line 179
	push	edi
; Line 151
	mov	esi, 1
; Line 179
	call	_CRYPTO_free
	add	esp, 4
; Line 180
	mov	eax, esi
	pop	edi
	pop	ebx
	pop	esi
; Line 183
	ret	0
$LN42@pkey_cmac_:
; Line 179
	push	edi
; Line 129
	xor	esi, esi
; Line 179
	call	_CRYPTO_free
	add	esp, 4
; Line 180
	mov	eax, esi
	pop	edi
	pop	ebx
	pop	esi
; Line 183
	ret	0
$LN6@pkey_cmac_:
	pop	ebx
; Line 182
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 183
	ret	0
_pkey_cmac_ctrl_str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_cmac_ctrl
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_p1$ = 16						; size = 4
_p2$ = 20						; size = 4
_pkey_cmac_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 124
	mov	ecx, DWORD PTR _ctx$[esp-4]
; Line 125
	mov	eax, DWORD PTR _type$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx+20]
	sub	eax, 1
	je	SHORT $LN10@pkey_cmac_
	sub	eax, 5
	je	SHORT $LN4@pkey_cmac_
	sub	eax, 6
	je	SHORT $LN8@pkey_cmac_
; Line 148
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 152
	ret	0
$LN8@pkey_cmac_:
; Line 135
	push	DWORD PTR [ecx+4]
	push	DWORD PTR _p2$[esp+4]
	push	0
	push	0
; Line 136
	jmp	SHORT $LN15@pkey_cmac_
$LN4@pkey_cmac_:
; Line 128
	mov	eax, DWORD PTR _p2$[esp]
	test	eax, eax
	je	SHORT $LN6@pkey_cmac_
	mov	ecx, DWORD PTR _p1$[esp]
	test	ecx, ecx
	js	SHORT $LN6@pkey_cmac_
; Line 130
	push	0
	push	0
	push	ecx
	push	eax
$LN15@pkey_cmac_:
	push	esi
	call	_CMAC_Init
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN12@pkey_cmac_
$LN6@pkey_cmac_:
; Line 131
	xor	eax, eax
	pop	esi
; Line 152
	ret	0
$LN10@pkey_cmac_:
; Line 140
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	je	SHORT $LN11@pkey_cmac_
	push	DWORD PTR [eax+20]
	push	esi
	call	_CMAC_CTX_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@pkey_cmac_
$LN11@pkey_cmac_:
; Line 143
	push	0
	push	0
	push	0
	push	0
; Line 144
	jmp	SHORT $LN15@pkey_cmac_
$LN12@pkey_cmac_:
; Line 151
	mov	eax, 1
	pop	esi
; Line 152
	ret	0
_pkey_cmac_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _cmac_signctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sig$ = 12						; size = 4
_siglen$ = 16						; size = 4
_mctx$ = 20						; size = 4
_cmac_signctx PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 119
	push	DWORD PTR _siglen$[esp-4]
	mov	eax, DWORD PTR _ctx$[esp]
	push	DWORD PTR _sig$[esp]
	push	DWORD PTR [eax+20]
	call	_CMAC_Final
	add	esp, 12					; 0000000cH
; Line 120
	ret	0
_cmac_signctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _cmac_signctx_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_mctx$ = 12						; size = 4
_cmac_signctx_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 110
	push	esi
; Line 111
	mov	esi, DWORD PTR _mctx$[esp]
	push	256					; 00000100H
	push	esi
	call	_EVP_MD_CTX_set_flags
	add	esp, 8
; Line 112
	mov	DWORD PTR [esi+20], OFFSET _int_update
; Line 113
	mov	eax, 1
	pop	esi
; Line 114
	ret	0
_cmac_signctx_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_update
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_data$ = 12						; size = 4
_count$ = 16						; size = 4
_int_update PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 104
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR _count$[esp-4]
	push	DWORD PTR _data$[esp]
	mov	eax, DWORD PTR [eax+16]
	push	DWORD PTR [eax+20]
	call	_CMAC_Update
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 107
	ret	0
_int_update ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_cmac_keygen
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pkey$ = 12						; size = 4
_pkey_cmac_keygen PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 88
	push	esi
; Line 89
	call	_CMAC_CTX_new
; Line 90
	mov	ecx, DWORD PTR _ctx$[esp]
	mov	esi, eax
; Line 91
	test	esi, esi
	je	SHORT $LN5@pkey_cmac_
; Line 93
	push	DWORD PTR [ecx+20]
	push	esi
	call	_CMAC_CTX_copy
	add	esp, 8
; Line 94
	push	esi
	test	eax, eax
	jne	SHORT $LN3@pkey_cmac_
	call	_CMAC_CTX_free
	add	esp, 4
$LN5@pkey_cmac_:
; Line 95
	xor	eax, eax
	pop	esi
; Line 100
	ret	0
$LN3@pkey_cmac_:
; Line 97
	push	894					; 0000037eH
	push	DWORD PTR _pkey$[esp+8]
	call	_EVP_PKEY_assign
	add	esp, 12					; 0000000cH
; Line 99
	mov	eax, 1
	pop	esi
; Line 100
	ret	0
_pkey_cmac_keygen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_cmac_cleanup
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pkey_cmac_cleanup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 84
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR [eax+20]
	call	_CMAC_CTX_free
	pop	ecx
; Line 85
	ret	0
_pkey_cmac_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_cmac_copy
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_pkey_cmac_copy PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 66
	call	_CMAC_CTX_new
	mov	ecx, DWORD PTR _dst$[esp-4]
	mov	DWORD PTR [ecx+20], eax
; Line 67
	test	eax, eax
	je	SHORT $LN8@pkey_cmac_
; Line 69
	mov	DWORD PTR [ecx+36], 0
; Line 77
	mov	ecx, DWORD PTR _src$[esp-4]
	push	DWORD PTR [ecx+20]
	push	eax
	call	_CMAC_CTX_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 80
	ret	0
$LN8@pkey_cmac_:
; Line 76
	xor	eax, eax
; Line 80
	ret	0
_pkey_cmac_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pkey_cmac_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pkey_cmac_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cm_pmeth.c
; Line 66
	call	_CMAC_CTX_new
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	DWORD PTR [ecx+20], eax
; Line 67
	test	eax, eax
	jne	SHORT $LN2@pkey_cmac_
; Line 71
	ret	0
$LN2@pkey_cmac_:
; Line 69
	mov	DWORD PTR [ecx+36], 0
; Line 70
	mov	eax, 1
; Line 71
	ret	0
_pkey_cmac_init ENDP
_TEXT	ENDS
END
