; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\xts128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CRYPTO_xts128_encrypt
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_xts128_encrypt
_TEXT	SEGMENT
_tweak1$3$ = -72					; size = 4
_tweak$5$ = -72						; size = 4
_out$GSCopy$1$ = -68					; size = 4
_tweak$3$ = -64						; size = 4
_tweak$2$ = -64						; size = 4
tv1274 = -64						; size = 4
_ctx$GSCopy$1$ = -60					; size = 4
_inp$1$ = -56						; size = 4
_scratch$ = -52						; size = 16
_tweak$ = -36						; size = 16
_tweak1$1 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_iv$ = 12						; size = 4
_inp$ = 16						; size = 4
_out$ = 20						; size = 4
_len$ = 24						; size = 4
_enc$ = 28						; size = 4
_CRYPTO_xts128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\xts128.c
; Line 65
	mov	eax, 72					; 00000048H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+72], eax
	mov	ecx, DWORD PTR _ctx$[esp+68]
	mov	eax, DWORD PTR _out$[esp+68]
	mov	edx, DWORD PTR _iv$[esp+68]
	push	ebx
; Line 79
	mov	ebx, DWORD PTR _len$[esp+72]
	mov	DWORD PTR _ctx$GSCopy$1$[esp+76], ecx
	mov	DWORD PTR _out$GSCopy$1$[esp+76], eax
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN16@CRYPTO_xts
; Line 80
	or	eax, -1
	pop	ebx
; Line 204
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN16@CRYPTO_xts:
; Line 84
	push	DWORD PTR [ecx+4]
	movups	xmm0, XMMWORD PTR [edx]
	lea	eax, DWORD PTR _tweak$[esp+80]
	push	eax
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	movups	XMMWORD PTR _tweak$[esp+88], xmm0
	call	eax
; Line 86
	mov	eax, DWORD PTR _enc$[esp+84]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN26@CRYPTO_xts
	test	bl, 15					; 0000000fH
	je	SHORT $LN26@CRYPTO_xts
; Line 87
	sub	ebx, 16					; 00000010H
$LN26@CRYPTO_xts:
; Line 89
	mov	edx, DWORD PTR _tweak$[esp+76]
	push	ebp
	mov	ebp, DWORD PTR _tweak$[esp+88]
	push	esi
	mov	esi, DWORD PTR _tweak$[esp+96]
	push	edi
	mov	edi, DWORD PTR _inp$[esp+84]
	cmp	ebx, 16					; 00000010H
	jb	$LN122@CRYPTO_xts
	mov	eax, DWORD PTR _tweak$[esp+92]
	mov	DWORD PTR _tweak1$3$[esp+88], eax
$LL2@CRYPTO_xts:
; Line 95
	mov	eax, DWORD PTR [edi+4]
	xor	eax, DWORD PTR _tweak1$3$[esp+88]
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR _scratch$[esp+92], eax
	xor	ecx, edx
	mov	eax, DWORD PTR [edi+12]
	xor	eax, esi
	mov	DWORD PTR _scratch$[esp+88], ecx
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR _scratch$[esp+100], eax
	xor	ecx, ebp
; Line 98
	mov	eax, DWORD PTR _ctx$GSCopy$1$[esp+88]
	mov	DWORD PTR _scratch$[esp+96], ecx
	lea	ecx, DWORD PTR _scratch$[esp+88]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	push	ecx
	push	ecx
	call	eax
; Line 104
	mov	eax, DWORD PTR _tweak$[esp+100]
; Line 107
	add	edi, 16					; 00000010H
	mov	ecx, DWORD PTR _scratch$[esp+100]
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _tweak$[esp+92]
	xor	ecx, eax
	mov	ebp, DWORD PTR _tweak$[esp+96]
	mov	esi, DWORD PTR _tweak$[esp+100]
	mov	DWORD PTR _tweak$3$[esp+88], eax
	mov	eax, DWORD PTR _scratch$[esp+92]
	xor	eax, edx
	mov	DWORD PTR _tweak$5$[esp+88], edx
	mov	edx, DWORD PTR _out$GSCopy$1$[esp+88]
	mov	DWORD PTR _scratch$[esp+88], ecx
	mov	DWORD PTR _scratch$[esp+92], eax
	mov	DWORD PTR _inp$1$[esp+88], edi
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _scratch$[esp+96]
	mov	DWORD PTR [edx+4], eax
	xor	ecx, ebp
	mov	eax, DWORD PTR _scratch$[esp+100]
	xor	eax, esi
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], eax
; Line 108
	add	edx, 16					; 00000010H
	mov	DWORD PTR _scratch$[esp+96], ecx
	mov	DWORD PTR _scratch$[esp+100], eax
	mov	DWORD PTR _out$GSCopy$1$[esp+88], edx
; Line 109
	sub	ebx, 16					; 00000010H
; Line 111
	je	$LN100@CRYPTO_xts
; Line 118
	mov	eax, DWORD PTR _tweak$5$[esp+88]
	mov	edx, esi
; Line 119
	mov	edi, DWORD PTR _tweak$3$[esp+88]
	xor	ecx, ecx
	shld	DWORD PTR _tweak$5$[esp+88], edi, 1
	xor	ecx, DWORD PTR _tweak$5$[esp+88]
; Line 120
	shld	esi, ebp, 1
	sar	edx, 31					; 0000001fH
	add	edi, edi
	shr	eax, 31					; 0000001fH
	and	edx, 135				; 00000087H
	add	ebp, ebp
	mov	DWORD PTR _tweak1$3$[esp+88], ecx
	xor	edx, edi
	mov	DWORD PTR _tweak$[esp+92], ecx
	mov	edi, DWORD PTR _inp$1$[esp+88]
	or	ebp, eax
	mov	DWORD PTR _tweak$[esp+88], edx
	mov	DWORD PTR _tweak$2$[esp+88], esi
	mov	DWORD PTR _tweak$[esp+96], ebp
	mov	DWORD PTR _tweak$[esp+100], esi
	cmp	ebx, 16					; 00000010H
	jae	$LL2@CRYPTO_xts
; Line 111
	mov	eax, DWORD PTR _enc$[esp+84]
	jmp	SHORT $LN3@CRYPTO_xts
$LN122@CRYPTO_xts:
; Line 112
	mov	ecx, DWORD PTR _tweak$[esp+92]
	mov	DWORD PTR _inp$1$[esp+88], edi
	mov	DWORD PTR _tweak$2$[esp+88], esi
$LN3@CRYPTO_xts:
; Line 135
	test	eax, eax
	je	$LN117@CRYPTO_xts
; Line 136
	xor	ebp, ebp
	test	ebx, ebx
	je	SHORT $LN8@CRYPTO_xts
; Line 138
	mov	eax, DWORD PTR _out$GSCopy$1$[esp+88]
	lea	ecx, DWORD PTR _scratch$[esp+88]
	sub	edi, eax
	sub	eax, ecx
	mov	DWORD PTR tv1274[esp+88], eax
$LL64@CRYPTO_xts:
; Line 137
	lea	esi, DWORD PTR _scratch$[esp+88]
	add	esi, ebp
	inc	ebp
	lea	ecx, DWORD PTR [esi+eax]
	mov	dl, BYTE PTR [ecx+edi]
; Line 138
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR tv1274[esp+88]
; Line 139
	mov	BYTE PTR [esi], dl
	cmp	ebp, ebx
	jb	SHORT $LL64@CRYPTO_xts
$LN8@CRYPTO_xts:
; Line 143
	mov	eax, DWORD PTR _ctx$GSCopy$1$[esp+88]
	lea	ecx, DWORD PTR _scratch$[esp+88]
	movups	xmm1, XMMWORD PTR _scratch$[esp+88]
	movups	xmm0, XMMWORD PTR _tweak$[esp+88]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	pxor	xmm1, xmm0
	push	ecx
	push	ecx
	movups	XMMWORD PTR _scratch$[esp+100], xmm1
	call	eax
; Line 144
	movups	xmm1, XMMWORD PTR _scratch$[esp+100]
; Line 146
	mov	eax, DWORD PTR _out$GSCopy$1$[esp+100]
	add	esp, 12					; 0000000cH
	movups	xmm0, XMMWORD PTR _tweak$[esp+88]
	pop	edi
	pop	esi
	pxor	xmm1, xmm0
	pop	ebp
	movups	XMMWORD PTR [eax-16], xmm1
; Line 203
	xor	eax, eax
	pop	ebx
; Line 204
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN117@CRYPTO_xts:
; Line 158
	mov	eax, ecx
	mov	edi, esi
	shld	eax, edx, 1
	xor	esi, esi
	shr	ecx, 31					; 0000001fH
	xor	esi, eax
	sar	edi, 31					; 0000001fH
; Line 159
	mov	eax, DWORD PTR _tweak$2$[esp+88]
	add	edx, edx
	shld	eax, ebp, 1
	and	edi, 135				; 00000087H
	mov	DWORD PTR _tweak1$1[esp+92], esi
	add	ebp, ebp
	xor	edi, edx
	or	ecx, ebp
	mov	DWORD PTR _tweak1$1[esp+88], edi
; Line 178
	mov	ebp, DWORD PTR _inp$1$[esp+88]
	xor	edx, edx
	or	edx, eax
	mov	DWORD PTR _tweak1$3$[esp+88], ecx
	mov	DWORD PTR _tweak1$1[esp+96], ecx
	mov	DWORD PTR _tweak1$1[esp+100], edx
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [ebp]
	xor	eax, esi
; Line 181
	mov	esi, DWORD PTR _ctx$GSCopy$1$[esp+88]
	xor	ecx, edi
	mov	DWORD PTR _scratch$[esp+92], eax
	mov	eax, DWORD PTR [ebp+12]
	xor	eax, edx
	mov	DWORD PTR _scratch$[esp+88], ecx
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebp+8]
	xor	ecx, DWORD PTR _tweak1$3$[esp+92]
	mov	DWORD PTR _scratch$[esp+104], eax
	lea	eax, DWORD PTR _scratch$[esp+92]
	push	eax
	push	eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _scratch$[esp+108], ecx
	call	eax
; Line 182
	movups	xmm0, XMMWORD PTR _scratch$[esp+100]
; Line 185
	mov	edi, DWORD PTR _out$GSCopy$1$[esp+100]
	add	esp, 12					; 0000000cH
	movups	xmm1, XMMWORD PTR _tweak1$1[esp+88]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR _scratch$[esp+88], xmm1
	test	ebx, ebx
	je	SHORT $LN14@CRYPTO_xts
	lea	edx, DWORD PTR _scratch$[esp+88]
; Line 187
	sub	ebp, edi
	lea	esi, DWORD PTR [edi+16]
$LL74@CRYPTO_xts:
; Line 185
	mov	cl, BYTE PTR [esi+ebp]
	lea	esi, DWORD PTR [esi+1]
; Line 187
	mov	al, BYTE PTR [edx]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [esi-1], al
; Line 188
	mov	BYTE PTR [edx-1], cl
	sub	ebx, 1
	jne	SHORT $LL74@CRYPTO_xts
; Line 185
	movups	xmm1, XMMWORD PTR _scratch$[esp+88]
	mov	esi, DWORD PTR _ctx$GSCopy$1$[esp+88]
$LN14@CRYPTO_xts:
; Line 192
	push	DWORD PTR [esi]
	movups	xmm0, XMMWORD PTR _tweak$[esp+92]
	lea	eax, DWORD PTR _scratch$[esp+92]
	push	eax
	pxor	xmm1, xmm0
	push	eax
	mov	eax, DWORD PTR [esi+8]
	movups	XMMWORD PTR _scratch$[esp+100], xmm1
	call	eax
; Line 198
	mov	ecx, DWORD PTR _tweak$[esp+100]
	add	esp, 12					; 0000000cH
	xor	ecx, DWORD PTR _scratch$[esp+88]
	mov	eax, DWORD PTR _tweak$[esp+92]
	xor	eax, DWORD PTR _scratch$[esp+92]
	mov	DWORD PTR [edi], ecx
	mov	ecx, DWORD PTR _tweak$[esp+96]
	xor	ecx, DWORD PTR _scratch$[esp+96]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR _tweak$[esp+100]
	xor	eax, DWORD PTR _scratch$[esp+100]
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+12], eax
$LN100@CRYPTO_xts:
; Line 204
	mov	ecx, DWORD PTR __$ArrayPad$[esp+88]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
_CRYPTO_xts128_encrypt ENDP
_TEXT	ENDS
END
