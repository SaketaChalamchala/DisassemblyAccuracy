; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_g_probable_mtu DD 05dcH
	DD	0200H
	DD	0100H
CONST	ENDS
_DATA	SEGMENT
_bitmask_start_values DB 0ffH
	DB	0feH
	DB	0fcH
	DB	0f8H
	DB	0f0H
	DB	0e0H
	DB	0c0H
	DB	080H
_bitmask_end_values DB 0ffH
	DB	01H
	DB	03H
	DB	07H
	DB	0fH
	DB	01fH
	DB	03fH
	DB	07fH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_dtls1_do_write
PUBLIC	_dtls1_set_message_header
PUBLIC	_dtls1_send_change_cipher_spec
PUBLIC	_dtls1_read_failed
PUBLIC	_dtls1_buffer_message
PUBLIC	_dtls1_retransmit_message
PUBLIC	_dtls1_get_queue_priority
PUBLIC	_dtls1_retransmit_buffered_messages
PUBLIC	_dtls1_clear_record_buffer
PUBLIC	_dtls1_get_message_header
PUBLIC	_dtls1_get_ccs_header
PUBLIC	_dtls1_min_mtu
PUBLIC	_dtls1_link_min_mtu
PUBLIC	_dtls1_hm_fragment_free
PUBLIC	_dtls1_shutdown
PUBLIC	_dtls1_get_message
PUBLIC	_dtls1_heartbeat
PUBLIC	_dtls1_process_heartbeat
PUBLIC	??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@	; `string'
PUBLIC	??_C@_0BP@ICKAAGNH@s?9?$DOd1?9?$DOmtu?5?$DO?$DN?5dtls1_min_mtu?$CIs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0EG@CCIHJLOA@s?9?$DOinit_num?5?$DN?$DN?5?$CIint?$CJs?9?$DOd1?9?$DOw_msg@ ; `string'
PUBLIC	??_C@_0BJ@DFLCCFFN@len?5?$DN?$DN?5?$CIunsigned?5int?$CJret?$AA@ ; `string'
PUBLIC	??_C@_0BN@LINMFPNB@?$CI?$CIlong?$CJmsg_hdr?9?$DOmsg_len?$CJ?5?$DO?50?$AA@ ; `string'
PUBLIC	??_C@_0N@BMFCCKCA@item?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0BM@PPAKALD@invalid?5state?5reached?5?$CFs?3?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CD@FMODJFBI@dtls1_retransmit_message?$CI?$CJ?5faile@ ; `string'
PUBLIC	??_C@_0BB@JNHBKAGH@s?9?$DOinit_off?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0HA@GEKIBMBM@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5?$CI?$CIs?9?$DO@ ; `string'
PUBLIC	??_C@_0EP@GFDKHMFP@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5DTLS1@ ; `string'
PUBLIC	??_C@_0CG@JAOANJGB@retransmit?3?5?5message?5?$CFd?5non?9exis@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_BUF_MEM_grow_clean:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OpenSSLDie:PROC
EXTRN	_BIO_set_flags:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_MD_CTX_md:PROC
EXTRN	_EVP_CIPHER_block_size:PROC
EXTRN	_EVP_CIPHER_CTX_flags:PROC
EXTRN	_EVP_MD_CTX_destroy:PROC
EXTRN	_EVP_CIPHER_CTX_free:PROC
EXTRN	_pitem_new:PROC
EXTRN	_pitem_free:PROC
EXTRN	_pqueue_insert:PROC
EXTRN	_pqueue_peek:PROC
EXTRN	_pqueue_pop:PROC
EXTRN	_pqueue_find:PROC
EXTRN	_pqueue_iterator:PROC
EXTRN	_pqueue_next:PROC
EXTRN	_SSL_get_rbio:PROC
EXTRN	_SSL_get_wbio:PROC
EXTRN	_SSL_ctrl:PROC
EXTRN	_SSL_state:PROC
EXTRN	_ssl3_send_alert:PROC
EXTRN	_ssl3_finish_mac:PROC
EXTRN	_ssl3_shutdown:PROC
EXTRN	_dtls1_write_bytes:PROC
EXTRN	_dtls1_handle_timeout:PROC
EXTRN	_dtls1_start_timer:PROC
EXTRN	_dtls1_stop_timer:PROC
EXTRN	_dtls1_is_timer_expired:PROC
EXTRN	_RAND_pseudo_bytes:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0CG@JAOANJGB@retransmit?3?5?5message?5?$CFd?5non?9exis@
CONST	SEGMENT
??_C@_0CG@JAOANJGB@retransmit?3?5?5message?5?$CFd?5non?9exis@ DB 'retrans'
	DB	'mit:  message %d non-existant', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@GFDKHMFP@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5DTLS1@
CONST	SEGMENT
??_C@_0EP@GFDKHMFP@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5DTLS1@ DB 's-'
	DB	'>d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER_LENGTH == (unsigned '
	DB	'int)s->init_num', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@GEKIBMBM@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5?$CI?$CIs?9?$DO@
CONST	SEGMENT
??_C@_0HA@GEKIBMBM@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5?$CI?$CIs?9?$DO@ DB 's'
	DB	'->d1->w_msg_hdr.msg_len + ((s->version==DTLS1_BAD_VER)?3:DTLS'
	DB	'1_CCS_HEADER_LENGTH) == (unsigned int)s->init_num', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNHBKAGH@s?9?$DOinit_off?5?$DN?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BB@JNHBKAGH@s?9?$DOinit_off?5?$DN?$DN?50?$AA@ DB 's->init_off == 0'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FMODJFBI@dtls1_retransmit_message?$CI?$CJ?5faile@
CONST	SEGMENT
??_C@_0CD@FMODJFBI@dtls1_retransmit_message?$CI?$CJ?5faile@ DB 'dtls1_ret'
	DB	'ransmit_message() failed', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PPAKALD@invalid?5state?5reached?5?$CFs?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@PPAKALD@invalid?5state?5reached?5?$CFs?3?$CFd?$AA@ DB 'invalid '
	DB	'state reached %s:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BMFCCKCA@item?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0N@BMFCCKCA@item?5?$CB?$DN?5NULL?$AA@ DB 'item != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LINMFPNB@?$CI?$CIlong?$CJmsg_hdr?9?$DOmsg_len?$CJ?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0BN@LINMFPNB@?$CI?$CIlong?$CJmsg_hdr?9?$DOmsg_len?$CJ?5?$DO?50?$AA@ DB '('
	DB	'(long)msg_hdr->msg_len) > 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DFLCCFFN@len?5?$DN?$DN?5?$CIunsigned?5int?$CJret?$AA@
CONST	SEGMENT
??_C@_0BJ@DFLCCFFN@len?5?$DN?$DN?5?$CIunsigned?5int?$CJret?$AA@ DB 'len ='
	DB	'= (unsigned int)ret', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@CCIHJLOA@s?9?$DOinit_num?5?$DN?$DN?5?$CIint?$CJs?9?$DOd1?9?$DOw_msg@
CONST	SEGMENT
??_C@_0EG@CCIHJLOA@s?9?$DOinit_num?5?$DN?$DN?5?$CIint?$CJs?9?$DOd1?9?$DOw_msg@ DB 's'
	DB	'->init_num == (int)s->d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER'
	DB	'_LENGTH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ICKAAGNH@s?9?$DOd1?9?$DOmtu?5?$DO?$DN?5dtls1_min_mtu?$CIs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@ICKAAGNH@s?9?$DOd1?9?$DOmtu?5?$DO?$DN?5dtls1_min_mtu?$CIs?$CJ?$AA@ DB 's'
	DB	'->d1->mtu >= dtls1_min_mtu(s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
CONST	SEGMENT
??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@ DB '.\ssl\d1_both.c', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_process_out_of_seq_message
_TEXT	SEGMENT
tv295 = -276						; size = 4
_frag$1$ = -276						; size = 4
_ok$GSCopy$1$ = -272					; size = 4
_seq64be$ = -268					; size = 8
_devnull$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_msg_hdr$ = 12						; size = 4
_ok$ = 16						; size = 4
_dtls1_process_out_of_seq_message PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 782
	mov	eax, 276				; 00000114H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+276], eax
	mov	eax, DWORD PTR _ok$[esp+272]
	push	ebx
	mov	ebx, DWORD PTR _msg_hdr$[esp+276]
	push	ebp
	mov	ebp, DWORD PTR _s$[esp+280]
	mov	DWORD PTR _ok$GSCopy$1$[esp+284], eax
; Line 789
	mov	eax, DWORD PTR [ebx+12]
	push	esi
	mov	esi, DWORD PTR [ebx+16]
	add	eax, esi
	push	edi
	or	edi, -1
	cmp	eax, DWORD PTR [ebx+4]
	ja	$LN17@dtls1_proc
; Line 794
	movzx	eax, BYTE PTR [ebx+9]
	xorps	xmm0, xmm0
	movq	QWORD PTR _seq64be$[esp+292], xmm0
	mov	BYTE PTR _seq64be$[esp+298], al
; Line 795
	movzx	eax, BYTE PTR [ebx+8]
	mov	BYTE PTR _seq64be$[esp+299], al
; Line 796
	lea	eax, DWORD PTR _seq64be$[esp+292]
	push	eax
	mov	eax, DWORD PTR [ebp+92]
	push	DWORD PTR [eax+580]
	call	_pqueue_find
	mov	edx, eax
	add	esp, 8
; Line 802
	test	edx, edx
	je	SHORT $LN5@dtls1_proc
	xor	eax, eax
	cmp	esi, DWORD PTR [ebx+4]
	cmovne	edx, eax
$LN5@dtls1_proc:
; Line 811
	mov	eax, DWORD PTR [ebp+92]
	movzx	ecx, WORD PTR [ebx+8]
	movzx	eax, WORD PTR [eax+552]
	mov	DWORD PTR tv295[esp+292], eax
	cmp	cx, ax
	jbe	$LN24@dtls1_proc
	movzx	ecx, ax
	movzx	eax, WORD PTR [ebx+8]
	add	ecx, 10					; 0000000aH
	cmp	eax, ecx
	jg	$LN24@dtls1_proc
	test	edx, edx
	jne	$LN24@dtls1_proc
	cmp	WORD PTR tv295[esp+292], dx
	jne	SHORT $LN6@dtls1_proc
	cmp	BYTE PTR [ebx], 20			; 00000014H
	je	$LN24@dtls1_proc
$LN6@dtls1_proc:
; Line 827
	cmp	esi, DWORD PTR [ebx+4]
	je	SHORT $LN10@dtls1_proc
; Line 828
	mov	eax, DWORD PTR _ok$GSCopy$1$[esp+292]
	push	eax
	push	ebx
	push	ebp
	call	_dtls1_reassemble_fragment
	add	esp, 12					; 0000000cH
	jmp	$LN1@dtls1_proc
$LN10@dtls1_proc:
; Line 669
	mov	eax, DWORD PTR [ebp+264]
	mov	ecx, 17740				; 0000454cH
	cmp	eax, ecx
	cmova	ecx, eax
; Line 830
	cmp	esi, ecx
	ja	SHORT $LN17@dtls1_proc
; Line 833
	push	0
	push	esi
	call	_dtls1_hm_fragment_new
	mov	ecx, eax
	add	esp, 8
	mov	DWORD PTR _frag$1$[esp+292], ecx
; Line 834
	test	ecx, ecx
	je	SHORT $LN17@dtls1_proc
; Line 837
	movups	xmm0, XMMWORD PTR [ebx]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ebx+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movq	xmm0, QWORD PTR [ebx+32]
	movq	QWORD PTR [ecx+32], xmm0
	mov	eax, DWORD PTR [ebx+40]
	mov	DWORD PTR [ecx+40], eax
; Line 839
	test	esi, esi
	je	SHORT $LN15@dtls1_proc
; Line 843
	mov	eax, DWORD PTR [ebp+8]
	push	0
	push	esi
	push	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [eax+52]
	push	22					; 00000016H
	push	ebp
	call	eax
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 845
	cmp	edi, esi
	je	SHORT $LN14@dtls1_proc
; Line 846
	or	edi, -1
$LN29@dtls1_proc:
; Line 871
	push	DWORD PTR _frag$1$[esp+292]
	call	_dtls1_hm_fragment_free
	add	esp, 4
$LN17@dtls1_proc:
; Line 872
	mov	eax, DWORD PTR _ok$GSCopy$1$[esp+292]
	mov	DWORD PTR [eax], 0
; Line 873
	mov	eax, edi
$LN1@dtls1_proc:
; Line 874
	mov	ecx, DWORD PTR __$ArrayPad$[esp+292]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	ret	0
$LN14@dtls1_proc:
; Line 847
	test	edi, edi
	jle	SHORT $LN29@dtls1_proc
	mov	ecx, DWORD PTR _frag$1$[esp+292]
$LN15@dtls1_proc:
; Line 851
	push	ecx
	lea	eax, DWORD PTR _seq64be$[esp+296]
	push	eax
	call	_pitem_new
	add	esp, 8
; Line 852
	test	eax, eax
	je	SHORT $LN29@dtls1_proc
; Line 855
	push	eax
	mov	eax, DWORD PTR [ebp+92]
	push	DWORD PTR [eax+580]
	call	_pqueue_insert
	add	esp, 8
; Line 864
	test	eax, eax
	jne	SHORT $LN3@dtls1_proc
	push	OFFSET ??_C@_0N@BMFCCKCA@item?5?$CB?$DN?5NULL?$AA@
	push	864					; 00000360H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
; Line 867
	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN1@dtls1_proc
$LN24@dtls1_proc:
; Line 816
	test	esi, esi
	je	SHORT $LN3@dtls1_proc
	mov	ebx, 256				; 00000100H
$LL2@dtls1_proc:
; Line 817
	mov	ecx, DWORD PTR [ebp+8]
	cmp	esi, ebx
	push	0
	mov	eax, esi
	cmova	eax, ebx
	push	eax
	lea	eax, DWORD PTR _devnull$1[esp+300]
	push	eax
	mov	eax, DWORD PTR [ecx+52]
	push	22					; 00000016H
	push	ebp
	call	eax
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 822
	test	edi, edi
	jle	$LN17@dtls1_proc
; Line 824
	sub	esi, edi
; Line 816
	jne	SHORT $LL2@dtls1_proc
$LN3@dtls1_proc:
; Line 867
	mov	eax, -3					; fffffffdH
	jmp	$LN1@dtls1_proc
_dtls1_process_out_of_seq_message ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_reassemble_fragment
_TEXT	SEGMENT
_s$GSCopy$1$ = -280					; size = 4
_item$2$ = -276						; size = 4
_ok$GSCopy$1$ = -272					; size = 4
_seq64be$ = -268					; size = 8
_devnull$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_msg_hdr$ = 12						; size = 4
_ok$ = 16						; size = 4
_dtls1_reassemble_fragment PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 676
	mov	eax, 280				; 00000118H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+280], eax
	mov	eax, DWORD PTR _ok$[esp+276]
	mov	edx, DWORD PTR _s$[esp+276]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _msg_hdr$[esp+292]
; Line 679
	or	ebp, -1
	mov	DWORD PTR _ok$GSCopy$1$[esp+296], eax
	mov	DWORD PTR _s$GSCopy$1$[esp+296], edx
; Line 683
	mov	eax, DWORD PTR [edi+12]
	mov	esi, DWORD PTR [edi+16]
	add	eax, esi
	mov	ebx, DWORD PTR [edi+4]
	cmp	eax, ebx
	ja	$LN32@dtls1_reas
; Line 669
	mov	eax, DWORD PTR [edx+264]
	mov	ecx, 17740				; 0000454cH
	cmp	eax, ecx
	cmova	ecx, eax
; Line 683
	cmp	ebx, ecx
	ja	$LN32@dtls1_reas
; Line 687
	test	esi, esi
	je	$LN62@dtls1_reas
; Line 692
	movzx	eax, BYTE PTR [edi+9]
	xorps	xmm0, xmm0
	movq	QWORD PTR _seq64be$[esp+296], xmm0
	mov	BYTE PTR _seq64be$[esp+302], al
; Line 693
	movzx	eax, BYTE PTR [edi+8]
	mov	BYTE PTR _seq64be$[esp+303], al
; Line 694
	lea	eax, DWORD PTR _seq64be$[esp+296]
	push	eax
	mov	eax, DWORD PTR [edx+92]
	push	DWORD PTR [eax+580]
	call	_pqueue_find
	add	esp, 8
	mov	DWORD PTR _item$2$[esp+296], eax
; Line 696
	test	eax, eax
	jne	SHORT $LN16@dtls1_reas
; Line 697
	push	1
	push	DWORD PTR [edi+4]
	call	_dtls1_hm_fragment_new
	mov	ebx, eax
	add	esp, 8
; Line 698
	test	ebx, ebx
	je	$LN32@dtls1_reas
; Line 700
	movups	xmm0, XMMWORD PTR [edi]
	movups	XMMWORD PTR [ebx], xmm0
	movups	xmm0, XMMWORD PTR [edi+16]
	movups	XMMWORD PTR [ebx+16], xmm0
	movq	xmm0, QWORD PTR [edi+32]
	movq	QWORD PTR [ebx+32], xmm0
	mov	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [ebx+40], eax
; Line 701
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx+16], eax
; Line 702
	mov	DWORD PTR [ebx+12], 0
; Line 703
	jmp	SHORT $LN19@dtls1_reas
$LN16@dtls1_reas:
; Line 704
	mov	ebx, DWORD PTR [eax+8]
; Line 705
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [edi+4]
	jne	SHORT $LN32@dtls1_reas
$LN19@dtls1_reas:
; Line 717
	cmp	DWORD PTR [ebx+48], 0
	jne	SHORT $LN20@dtls1_reas
	mov	edi, 256				; 00000100H
$LL2@dtls1_reas:
; Line 721
	mov	edx, DWORD PTR _s$GSCopy$1$[esp+296]
	cmp	esi, edi
	push	0
	mov	eax, esi
	cmova	eax, edi
	mov	ecx, DWORD PTR [edx+8]
	push	eax
	lea	eax, DWORD PTR _devnull$1[esp+304]
	push	eax
	mov	eax, DWORD PTR [ecx+52]
	push	22					; 00000016H
	push	edx
	call	eax
	mov	ebp, eax
	add	esp, 20					; 00000014H
; Line 726
	test	ebp, ebp
	jle	SHORT $err$64
; Line 728
	sub	esi, ebp
; Line 720
	jne	SHORT $LL2@dtls1_reas
$LN62@dtls1_reas:
; Line 730
	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN1@dtls1_reas
$LN20@dtls1_reas:
; Line 734
	mov	edx, DWORD PTR _s$GSCopy$1$[esp+296]
	mov	eax, DWORD PTR [ebx+44]
	add	eax, DWORD PTR [edi+12]
	push	0
	mov	ecx, DWORD PTR [edx+8]
	push	esi
	push	eax
	push	22					; 00000016H
	mov	eax, DWORD PTR [ecx+52]
	push	edx
	call	eax
	mov	ebp, eax
	add	esp, 20					; 00000014H
; Line 737
	cmp	ebp, esi
	je	SHORT $LN22@dtls1_reas
; Line 738
	or	ebp, -1
$err$64:
; Line 773
	cmp	DWORD PTR _item$2$[esp+296], 0
	jne	SHORT $LN32@dtls1_reas
$LN61@dtls1_reas:
; Line 774
	push	ebx
	call	_dtls1_hm_fragment_free
	add	esp, 4
$LN32@dtls1_reas:
; Line 775
	mov	eax, DWORD PTR _ok$GSCopy$1$[esp+296]
	mov	DWORD PTR [eax], 0
; Line 776
	mov	eax, ebp
$LN1@dtls1_reas:
; Line 777
	mov	ecx, DWORD PTR __$ArrayPad$[esp+296]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	ret	0
$LN22@dtls1_reas:
; Line 739
	test	ebp, ebp
	jle	SHORT $err$64
; Line 742
	cmp	esi, 8
	jg	SHORT $LN24@dtls1_reas
	mov	ebp, DWORD PTR [edi+12]
	lea	eax, DWORD PTR [esi+ebp]
	cmp	ebp, eax
	jge	SHORT $LN25@dtls1_reas
	npad	1
$LL6@dtls1_reas:
	mov	edx, ebp
	mov	eax, ebp
	sar	edx, 3
	and	eax, 7
	add	edx, DWORD PTR [ebx+48]
	inc	ebp
	movzx	ecx, BYTE PTR [edx]
	bts	ecx, eax
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR [edi+12]
	add	eax, esi
	cmp	ebp, eax
	jl	SHORT $LL6@dtls1_reas
; Line 743
	jmp	SHORT $LN25@dtls1_reas
$LN24@dtls1_reas:
; Line 742
	mov	edx, DWORD PTR [edi+12]
	mov	ecx, edx
	sar	ecx, 3
	and	edx, 7
	add	ecx, DWORD PTR [ebx+48]
	mov	al, BYTE PTR _bitmask_start_values[edx]
	or	BYTE PTR [ecx], al
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, eax
	dec	eax
	sar	ecx, 3
	add	eax, esi
	inc	ecx
	sar	eax, 3
	cmp	ecx, eax
	jge	SHORT $LN8@dtls1_reas
	npad	6
$LL9@dtls1_reas:
	mov	eax, DWORD PTR [ebx+48]
	mov	BYTE PTR [ecx+eax], 255			; 000000ffH
	inc	ecx
	mov	eax, DWORD PTR [edi+12]
	dec	eax
	add	eax, esi
	sar	eax, 3
	cmp	ecx, eax
	jl	SHORT $LL9@dtls1_reas
$LN8@dtls1_reas:
	mov	edx, DWORD PTR [edi+12]
	add	edx, esi
	lea	ecx, DWORD PTR [edx-1]
	and	edx, 7
	sar	ecx, 3
	add	ecx, DWORD PTR [ebx+48]
	mov	al, BYTE PTR _bitmask_end_values[edx]
	or	BYTE PTR [ecx], al
$LN25@dtls1_reas:
; Line 745
	cmp	DWORD PTR [edi+4], 0
	jg	SHORT $LN35@dtls1_reas
	push	OFFSET ??_C@_0BN@LINMFPNB@?$CI?$CIlong?$CJmsg_hdr?9?$DOmsg_len?$CJ?5?$DO?50?$AA@
	push	746					; 000002eaH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN35@dtls1_reas:
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ebx+48]
	lea	esi, DWORD PTR [ecx-1]
	and	ecx, 7
	sar	esi, 3
	mov	al, BYTE PTR [esi+edx]
	cmp	al, BYTE PTR _bitmask_end_values[ecx]
	jne	SHORT $LN29@dtls1_reas
	lea	eax, DWORD PTR [esi-1]
	test	eax, eax
	js	SHORT $LN60@dtls1_reas
	npad	4
$LL12@dtls1_reas:
	cmp	BYTE PTR [edx+eax], 255			; 000000ffH
	jne	SHORT $LN29@dtls1_reas
	sub	eax, 1
	jns	SHORT $LL12@dtls1_reas
$LN60@dtls1_reas:
; Line 749
	push	edx
	call	_CRYPTO_free
	add	esp, 4
; Line 750
	mov	DWORD PTR [ebx+48], 0
$LN29@dtls1_reas:
; Line 753
	cmp	DWORD PTR _item$2$[esp+296], 0
	jne	SHORT $LN37@dtls1_reas
; Line 754
	lea	eax, DWORD PTR _seq64be$[esp+296]
	push	ebx
	push	eax
	call	_pitem_new
	add	esp, 8
; Line 755
	test	eax, eax
	jne	SHORT $LN31@dtls1_reas
; Line 756
	or	ebp, -1
; Line 757
	jmp	$LN61@dtls1_reas
$LN31@dtls1_reas:
; Line 760
	push	eax
	mov	eax, DWORD PTR _s$GSCopy$1$[esp+300]
	mov	eax, DWORD PTR [eax+92]
	push	DWORD PTR [eax+580]
	call	_pqueue_insert
	add	esp, 8
; Line 767
	test	eax, eax
	jne	SHORT $LN37@dtls1_reas
	push	OFFSET ??_C@_0N@BMFCCKCA@item?5?$CB?$DN?5NULL?$AA@
	push	767					; 000002ffH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN37@dtls1_reas:
; Line 770
	mov	eax, -3					; fffffffdH
	jmp	$LN1@dtls1_reas
_dtls1_reassemble_fragment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_max_handshake_message_len
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_max_handshake_message_len PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 669
	mov	eax, DWORD PTR _s$[esp-4]
	mov	ecx, DWORD PTR [eax+264]
	mov	eax, 17740				; 0000454cH
	cmp	ecx, eax
	cmova	eax, ecx
; Line 672
	ret	0
_dtls1_max_handshake_message_len ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_retrieve_buffered_fragment
_TEXT	SEGMENT
_frag_len$1$ = 8					; size = 4
_s$ = 8							; size = 4
_max$ = 12						; size = 4
_al$1$ = 16						; size = 4
_ok$ = 16						; size = 4
_dtls1_retrieve_buffered_fragment PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 609
	push	ebx
; Line 620
	mov	ebx, DWORD PTR _ok$[esp]
	push	ebp
	push	edi
; Line 621
	mov	edi, DWORD PTR _s$[esp+8]
	mov	DWORD PTR [ebx], 0
	mov	eax, DWORD PTR [edi+92]
	push	DWORD PTR [eax+580]
	call	_pqueue_peek
	mov	ebp, eax
	add	esp, 4
; Line 622
	test	ebp, ebp
	jne	SHORT $LN2@dtls1_retr
	pop	edi
	pop	ebp
	pop	ebx
; Line 658
	ret	0
$LN2@dtls1_retr:
	push	esi
; Line 625
	mov	esi, DWORD PTR [ebp+8]
; Line 628
	cmp	DWORD PTR [esi+48], 0
	jne	$LN4@dtls1_retr
; Line 631
	mov	ecx, DWORD PTR [edi+92]
	mov	ax, WORD PTR [ecx+552]
	cmp	ax, WORD PTR [esi+8]
	jne	$LN4@dtls1_retr
; Line 632
	mov	eax, DWORD PTR [esi+16]
; Line 633
	push	DWORD PTR [ecx+580]
	mov	DWORD PTR _frag_len$1$[esp+16], eax
	call	_pqueue_pop
; Line 635
	push	DWORD PTR _max$[esp+16]
	push	esi
	push	edi
	call	_dtls1_preprocess_fragment
	add	esp, 16					; 00000010H
	mov	DWORD PTR _al$1$[esp+12], eax
; Line 637
	test	eax, eax
	jne	SHORT $LN6@dtls1_retr
; Line 640
	mov	ecx, DWORD PTR [edi+60]
	push	DWORD PTR [esi+16]
	mov	eax, DWORD PTR [esi+12]
	push	DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 12					; 0000000cH
	add	eax, ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@dtls1_retr:
; Line 644
	push	esi
	call	_dtls1_hm_fragment_free
; Line 645
	push	ebp
	call	_pitem_free
; Line 647
	mov	eax, DWORD PTR _al$1$[esp+20]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@dtls1_retr
; Line 649
	mov	eax, DWORD PTR _frag_len$1$[esp+12]
	pop	esi
	pop	edi
	pop	ebp
	mov	DWORD PTR [ebx], 1
	pop	ebx
; Line 658
	ret	0
$LN7@dtls1_retr:
; Line 652
	push	eax
	push	2
	push	edi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 653
	mov	DWORD PTR [edi+68], 0
; Line 654
	mov	DWORD PTR [ebx], 0
; Line 655
	or	eax, -1
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 658
	ret	0
$LN4@dtls1_retr:
	pop	esi
	pop	edi
	pop	ebp
; Line 657
	xor	eax, eax
	pop	ebx
; Line 658
	ret	0
_dtls1_retrieve_buffered_fragment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_preprocess_fragment
_TEXT	SEGMENT
_s$ = 8							; size = 4
_msg_hdr$ = 12						; size = 4
_max$ = 16						; size = 4
_dtls1_preprocess_fragment PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 562
	push	esi
; Line 565
	mov	esi, DWORD PTR _msg_hdr$[esp]
	push	edi
; Line 567
	mov	eax, DWORD PTR [esi+16]
; Line 570
	add	eax, DWORD PTR [esi+12]
	mov	edi, DWORD PTR [esi+4]
	cmp	eax, edi
	jbe	SHORT $LN2@dtls1_prep
; Line 571
	push	571					; 0000023bH
$LN10@dtls1_prep:
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	152					; 00000098H
	push	288					; 00000120H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 572
	mov	eax, 47					; 0000002fH
	pop	edi
	pop	esi
; Line 606
	ret	0
$LN2@dtls1_prep:
; Line 575
	cmp	eax, DWORD PTR _max$[esp+4]
	jbe	SHORT $LN3@dtls1_prep
; Line 576
	push	576					; 00000240H
; Line 577
	jmp	SHORT $LN10@dtls1_prep
$LN3@dtls1_prep:
	push	ebx
; Line 580
	mov	ebx, DWORD PTR _s$[esp+8]
	mov	eax, DWORD PTR [ebx+92]
	cmp	DWORD PTR [eax+664], 0
	jne	SHORT $LN4@dtls1_prep
; Line 585
	lea	eax, DWORD PTR [edi+12]
	push	eax
	push	DWORD PTR [ebx+60]
	call	_BUF_MEM_grow_clean
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@dtls1_prep
; Line 587
	push	587					; 0000024bH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	7
	push	288					; 00000120H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 588
	mov	eax, 80					; 00000050H
	pop	ebx
	pop	edi
	pop	esi
; Line 606
	ret	0
$LN6@dtls1_prep:
; Line 591
	mov	eax, DWORD PTR [ebx+88]
	mov	DWORD PTR [eax+828], edi
; Line 592
	mov	eax, DWORD PTR [ebx+92]
	mov	DWORD PTR [eax+656], edi
; Line 593
	mov	eax, DWORD PTR [ebx+88]
	movzx	ecx, BYTE PTR [esi]
	mov	DWORD PTR [eax+832], ecx
; Line 594
	mov	ecx, DWORD PTR [ebx+92]
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [ecx+652], al
; Line 595
	mov	ecx, DWORD PTR [ebx+92]
	mov	ax, WORD PTR [esi+8]
	mov	WORD PTR [ecx+660], ax
$LN7@dtls1_prep:
; Line 605
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 606
	ret	0
$LN4@dtls1_prep:
; Line 596
	cmp	edi, DWORD PTR [eax+656]
	je	SHORT $LN7@dtls1_prep
; Line 601
	push	601					; 00000259H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	152					; 00000098H
	push	288					; 00000120H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 602
	mov	eax, 47					; 0000002fH
	pop	ebx
	pop	edi
	pop	esi
; Line 606
	ret	0
_dtls1_preprocess_fragment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_query_mtu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_query_mtu PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 231
	push	edi
; Line 232
	mov	edi, DWORD PTR _s$[esp]
	mov	eax, DWORD PTR [edi+92]
	cmp	DWORD PTR [eax+600], 0
	je	SHORT $LN2@dtls1_quer
; Line 233
	push	esi
	push	0
	push	0
	push	49					; 00000031H
	push	edi
	mov	esi, eax
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, DWORD PTR [esi+600]
	add	esp, 16					; 00000010H
	sub	ecx, eax
	mov	DWORD PTR [esi+604], ecx
; Line 235
	mov	eax, DWORD PTR [edi+92]
	pop	esi
	mov	DWORD PTR [eax+600], 0
$LN2@dtls1_quer:
; Line 1375
	push	0
	push	0
	push	49					; 00000031H
	push	edi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, 256				; 00000100H
	add	esp, 16					; 00000010H
	sub	ecx, eax
; Line 239
	mov	eax, DWORD PTR [edi+92]
	cmp	DWORD PTR [eax+604], ecx
	jae	$LN5@dtls1_quer
; Line 240
	push	0
	push	0
	push	32					; 00000020H
	push	edi
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, 4096				; 00001000H
	jne	$LN4@dtls1_quer
; Line 241
	push	0
	push	0
	push	40					; 00000028H
	push	edi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, DWORD PTR [edi+92]
	add	esp, 16					; 00000010H
; Line 1375
	push	0
	push	0
	push	49					; 00000031H
	push	edi
; Line 241
	mov	DWORD PTR [ecx+604], eax
; Line 1375
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, 256				; 00000100H
	add	esp, 16					; 00000010H
	sub	ecx, eax
; Line 248
	mov	eax, DWORD PTR [edi+92]
	cmp	DWORD PTR [eax+604], ecx
	jae	SHORT $LN5@dtls1_quer
; Line 1375
	push	0
	push	0
	push	49					; 00000031H
	push	edi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, 256				; 00000100H
	add	esp, 16					; 00000010H
	sub	ecx, eax
; Line 250
	mov	eax, DWORD PTR [edi+92]
; Line 251
	push	0
	mov	DWORD PTR [eax+604], ecx
	mov	eax, DWORD PTR [edi+92]
	push	DWORD PTR [eax+604]
	push	42					; 0000002aH
	push	edi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
$LN5@dtls1_quer:
; Line 257
	mov	eax, 1
	pop	edi
; Line 258
	ret	0
$LN4@dtls1_quer:
; Line 255
	xor	eax, eax
	pop	edi
; Line 258
	ret	0
_dtls1_query_mtu ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_hm_fragment_new
_TEXT	SEGMENT
_frag_len$ = 8						; size = 4
_reassembly$ = 12					; size = 4
_dtls1_hm_fragment_new PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 176
	push	ebx
	push	esi
	push	edi
; Line 181
	push	181					; 000000b5H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	52					; 00000034H
	xor	edi, edi
	xor	ebx, ebx
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 182
	test	esi, esi
	jne	SHORT $LN2@dtls1_hm_f
	pop	edi
	pop	esi
	pop	ebx
; Line 212
	ret	0
$LN2@dtls1_hm_f:
	push	ebp
; Line 185
	mov	ebp, DWORD PTR _frag_len$[esp+12]
	test	ebp, ebp
	je	SHORT $LN4@dtls1_hm_f
; Line 186
	push	186					; 000000baH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 187
	test	edi, edi
	je	SHORT $LN7@dtls1_hm_f
$LN4@dtls1_hm_f:
; Line 194
	mov	DWORD PTR [esi+44], edi
; Line 197
	cmp	DWORD PTR _reassembly$[esp+12], ebx
	je	SHORT $LN5@dtls1_hm_f
; Line 198
	push	199					; 000000c7H
	add	ebp, 7
	shr	ebp, 3
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 200
	test	ebx, ebx
	jne	SHORT $LN6@dtls1_hm_f
; Line 201
	test	edi, edi
	je	SHORT $LN7@dtls1_hm_f
; Line 202
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN7@dtls1_hm_f:
; Line 203
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 204
	xor	eax, eax
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 212
	ret	0
$LN6@dtls1_hm_f:
; Line 206
	push	ebp
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN5@dtls1_hm_f:
; Line 209
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+48], ebx
; Line 211
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 212
	ret	0
_dtls1_hm_fragment_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_message_fragment
_TEXT	SEGMENT
_msg_hdr$2$ = -64					; size = 4
_msg_hdr$ = -60						; size = 44
_wire$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_st1$ = 12						; size = 4
_stn$ = 16						; size = 4
_max$ = 20						; size = 4
_ok$ = 24						; size = 4
_dtls1_get_message_fragment PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 878
	mov	eax, 64					; 00000040H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+64], eax
	push	ebx
	mov	ebx, DWORD PTR _ok$[esp+64]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+72]
	push	edi
; Line 886
	push	ebx
	push	DWORD PTR _max$[esp+80]
	push	esi
	call	_dtls1_retrieve_buffered_fragment
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN3@dtls1_get_
$redo$37:
	cmp	DWORD PTR [ebx], 0
	jne	$LN32@dtls1_get_
; Line 893
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR _wire$[esp+80]
	push	0
	push	12					; 0000000cH
	push	ecx
	mov	eax, DWORD PTR [eax+52]
	push	22					; 00000016H
	push	esi
	call	eax
	add	esp, 20					; 00000014H
; Line 895
	test	eax, eax
	jle	$LN25@dtls1_get_
; Line 901
	cmp	eax, 12					; 0000000cH
	jne	$LN26@dtls1_get_
; Line 1381
	push	44					; 0000002cH
	lea	eax, DWORD PTR _msg_hdr$[esp+84]
	push	0
	push	eax
	call	_memset
; Line 1382
	mov	al, BYTE PTR _wire$[esp+92]
	add	esp, 12					; 0000000cH
; Line 1383
	movzx	edx, BYTE PTR _wire$[esp+81]
; Line 1385
	movzx	ecx, BYTE PTR _wire$[esp+84]
; Line 1386
	movzx	ebp, BYTE PTR _wire$[esp+86]
; Line 1387
	movzx	edi, BYTE PTR _wire$[esp+89]
	mov	BYTE PTR _msg_hdr$[esp+80], al
	movzx	eax, BYTE PTR _wire$[esp+82]
	shl	edx, 8
	or	edx, eax
	shl	cx, 8
	movzx	eax, BYTE PTR _wire$[esp+83]
	shl	edx, 8
	or	edx, eax
	shl	ebp, 8
	movzx	eax, BYTE PTR _wire$[esp+85]
	or	cx, ax
	shl	edi, 8
	movzx	eax, BYTE PTR _wire$[esp+87]
	or	ebp, eax
	mov	DWORD PTR _msg_hdr$[esp+84], edx
	movzx	eax, BYTE PTR _wire$[esp+88]
	shl	ebp, 8
	or	ebp, eax
	mov	WORD PTR _msg_hdr$[esp+88], cx
	movzx	eax, BYTE PTR _wire$[esp+90]
	or	edi, eax
	mov	DWORD PTR _msg_hdr$2$[esp+80], ebp
	movzx	eax, BYTE PTR _wire$[esp+91]
	shl	edi, 8
	or	edi, eax
	mov	DWORD PTR _msg_hdr$[esp+92], ebp
; Line 918
	mov	eax, DWORD PTR [esi+88]
; Line 1387
	mov	DWORD PTR _msg_hdr$[esp+96], edi
; Line 918
	cmp	edi, DWORD PTR [eax+272]
	ja	$LN27@dtls1_get_
; Line 931
	mov	eax, DWORD PTR [esi+92]
	cmp	cx, WORD PTR [eax+552]
	je	SHORT $LN8@dtls1_get_
	cmp	DWORD PTR [eax+596], 0
	je	$LN9@dtls1_get_
	cmp	cx, 1
	jne	$LN9@dtls1_get_
$LN8@dtls1_get_:
; Line 934
	test	edi, edi
	je	SHORT $LN10@dtls1_get_
	cmp	edi, edx
	jb	$LN28@dtls1_get_
$LN10@dtls1_get_:
; Line 937
	cmp	DWORD PTR [esi+36], 0
	jne	$LN13@dtls1_get_
	cmp	DWORD PTR [eax+664], 0
	jne	$LN13@dtls1_get_
	cmp	BYTE PTR _wire$[esp+80], 0
	jne	$LN13@dtls1_get_
; Line 944
	cmp	BYTE PTR _wire$[esp+81], 0
	jne	$LN12@dtls1_get_
	cmp	BYTE PTR _wire$[esp+82], 0
	jne	$LN12@dtls1_get_
	cmp	BYTE PTR _wire$[esp+83], 0
	jne	$LN12@dtls1_get_
; Line 945
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	je	SHORT $LN14@dtls1_get_
; Line 946
	push	DWORD PTR [esi+104]
	lea	ecx, DWORD PTR _wire$[esp+84]
	push	esi
	push	12					; 0000000cH
	push	ecx
	push	22					; 00000016H
	push	DWORD PTR [esi]
	push	0
	call	eax
	add	esp, 28					; 0000001cH
$LN14@dtls1_get_:
; Line 886
	push	ebx
	push	DWORD PTR _max$[esp+80]
; Line 950
	mov	DWORD PTR [esi+68], 0
	push	esi
	call	_dtls1_retrieve_buffered_fragment
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$redo$37
$LN3@dtls1_get_:
; Line 887
	cmp	DWORD PTR [ebx], 0
	je	SHORT $LN1@dtls1_get_
$LN32@dtls1_get_:
; Line 888
	mov	DWORD PTR [esi+68], eax
$LN1@dtls1_get_:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN9@dtls1_get_:
; Line 932
	push	ebx
	lea	eax, DWORD PTR _msg_hdr$[esp+84]
	push	eax
	push	esi
	call	_dtls1_process_out_of_seq_message
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN28@dtls1_get_:
; Line 935
	push	ebx
	lea	eax, DWORD PTR _msg_hdr$[esp+84]
	push	eax
	push	esi
	call	_dtls1_reassemble_fragment
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN12@dtls1_get_:
; Line 955
	push	956					; 000003bcH
; Line 957
	jmp	$LN34@dtls1_get_
$LN13@dtls1_get_:
; Line 961
	push	DWORD PTR _max$[esp+76]
	lea	eax, DWORD PTR _msg_hdr$[esp+84]
	push	eax
	push	esi
	call	_dtls1_preprocess_fragment
	mov	ebp, eax
	add	esp, 12					; 0000000cH
	test	ebp, ebp
	jne	$f_err$38
; Line 964
	test	edi, edi
	je	SHORT $LN16@dtls1_get_
; Line 965
	mov	eax, DWORD PTR [esi+60]
; Line 968
	mov	ecx, DWORD PTR [esi+8]
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+4]
	add	eax, 12					; 0000000cH
	add	eax, DWORD PTR _msg_hdr$2$[esp+88]
	push	eax
	mov	eax, DWORD PTR [ecx+52]
	push	22					; 00000016H
	push	esi
	call	eax
	add	esp, 20					; 00000014H
; Line 975
	test	eax, eax
	jg	SHORT $LN17@dtls1_get_
$LN25@dtls1_get_:
	pop	edi
; Line 976
	mov	DWORD PTR [esi+24], 3
	pop	esi
	pop	ebp
; Line 977
	mov	DWORD PTR [ebx], 0
	pop	ebx
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN16@dtls1_get_:
; Line 981
	xor	eax, eax
$LN17@dtls1_get_:
; Line 987
	cmp	eax, edi
	je	SHORT $LN19@dtls1_get_
; Line 989
	push	989					; 000003ddH
	mov	ebp, 47					; 0000002fH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	ebp
	jmp	SHORT $LN35@dtls1_get_
$LN19@dtls1_get_:
; Line 994
	mov	ecx, DWORD PTR _stn$[esp+76]
; Line 1003
	mov	eax, edi
	mov	DWORD PTR [ebx], 1
	mov	DWORD PTR [esi+68], edi
	pop	edi
	mov	DWORD PTR [esi+52], ecx
	pop	esi
	pop	ebp
	pop	ebx
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN27@dtls1_get_:
; Line 920
	push	920					; 00000398H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	mov	ebp, 47					; 0000002fH
	push	271					; 0000010fH
; Line 921
	jmp	SHORT $LN35@dtls1_get_
$LN26@dtls1_get_:
; Line 903
	push	903					; 00000387H
$LN34@dtls1_get_:
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	244					; 000000f4H
	mov	ebp, 10					; 0000000aH
$LN35@dtls1_get_:
	push	253					; 000000fdH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$f_err$38:
; Line 1006
	push	ebp
	push	2
	push	esi
	call	_ssl3_send_alert
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+68], 0
	or	eax, -1
	mov	DWORD PTR [ebx], 0
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
_dtls1_get_message_fragment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_set_message_header_int
_TEXT	SEGMENT
_s$ = 8							; size = 4
_mt$ = 12						; size = 1
_len$ = 16						; size = 4
_seq_num$ = 20						; size = 2
_frag_off$ = 24						; size = 4
_frag_len$ = 28						; size = 4
_dtls1_set_message_header_int PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1334
	mov	eax, DWORD PTR _s$[esp-4]
	mov	ecx, DWORD PTR [eax+92]
; Line 1336
	mov	al, BYTE PTR _mt$[esp-4]
	mov	BYTE PTR [ecx+608], al
; Line 1337
	mov	eax, DWORD PTR _len$[esp-4]
	mov	DWORD PTR [ecx+612], eax
; Line 1338
	mov	ax, WORD PTR _seq_num$[esp-4]
	mov	WORD PTR [ecx+616], ax
; Line 1339
	mov	eax, DWORD PTR _frag_off$[esp-4]
	mov	DWORD PTR [ecx+620], eax
; Line 1340
	mov	eax, DWORD PTR _frag_len$[esp-4]
	mov	DWORD PTR [ecx+624], eax
; Line 1341
	ret	0
_dtls1_set_message_header_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_write_message_header
_TEXT	SEGMENT
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_dtls1_write_message_header PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1357
	mov	ecx, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR _s$[esp-4]
	mov	edx, DWORD PTR [eax+92]
	movzx	eax, BYTE PTR [edx+608]
	add	edx, 608				; 00000260H
	mov	BYTE PTR [ecx], al
; Line 1358
	movzx	eax, BYTE PTR [edx+6]
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [edx+5]
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+3], al
; Line 1360
	movzx	eax, BYTE PTR [edx+9]
	mov	BYTE PTR [ecx+4], al
	movzx	eax, BYTE PTR [edx+8]
	mov	BYTE PTR [ecx+5], al
; Line 1361
	movzx	eax, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+6], al
	movzx	eax, BYTE PTR [edx+13]
	mov	BYTE PTR [ecx+7], al
	movzx	eax, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+8], al
; Line 1362
	movzx	eax, BYTE PTR [edx+18]
	mov	BYTE PTR [ecx+9], al
	movzx	eax, BYTE PTR [edx+17]
	mov	BYTE PTR [ecx+10], al
	movzx	eax, BYTE PTR [edx+16]
	mov	BYTE PTR [ecx+11], al
	lea	eax, DWORD PTR [ecx+12]
; Line 1365
	ret	0
_dtls1_write_message_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_fix_message_header
_TEXT	SEGMENT
_s$ = 8							; size = 4
_frag_off$ = 12						; size = 4
_frag_len$ = 16						; size = 4
_dtls1_fix_message_header PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1347
	mov	eax, DWORD PTR _s$[esp-4]
	mov	ecx, DWORD PTR [eax+92]
; Line 1349
	mov	eax, DWORD PTR _frag_off$[esp-4]
	mov	DWORD PTR [ecx+620], eax
; Line 1350
	mov	eax, DWORD PTR _frag_len$[esp-4]
	mov	DWORD PTR [ecx+624], eax
; Line 1351
	ret	0
_dtls1_fix_message_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_process_heartbeat
_TEXT	SEGMENT
_pl$1$ = -4						; size = 4
_payload$1$ = 8						; size = 4
_s$ = 8							; size = 4
_dtls1_process_heartbeat PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1424
	mov	eax, 4
	call	__chkstk
	push	esi
	push	edi
; Line 1425
	mov	edi, DWORD PTR _s$[esp+8]
	mov	eax, DWORD PTR [edi+88]
; Line 1430
	mov	ecx, DWORD PTR [edi+100]
	mov	esi, DWORD PTR [eax+280]
	test	ecx, ecx
	je	SHORT $LN2@dtls1_proc
; Line 1431
	push	DWORD PTR [edi+104]
	push	edi
	push	DWORD PTR [eax+272]
	push	esi
	push	24					; 00000018H
	push	DWORD PTR [edi]
	push	0
	call	ecx
	add	esp, 28					; 0000001cH
$LN2@dtls1_proc:
; Line 1436
	mov	eax, DWORD PTR [edi+88]
	mov	edx, DWORD PTR [eax+272]
	cmp	edx, 19					; 00000013H
	jae	SHORT $LN3@dtls1_proc
$LN19@dtls1_proc:
	pop	edi
; Line 1437
	xor	eax, eax
	pop	esi
; Line 1504
	pop	ecx
	ret	0
$LN3@dtls1_proc:
; Line 1438
	cmp	edx, 16384				; 00004000H
	ja	SHORT $LN19@dtls1_proc
; Line 1442
	movzx	ecx, BYTE PTR [esi+1]
	movzx	eax, BYTE PTR [esi+2]
	shl	ecx, 8
	or	ecx, eax
	push	ebx
	movzx	ebx, BYTE PTR [esi]
	mov	DWORD PTR _payload$1$[esp+12], ecx
; Line 1443
	lea	eax, DWORD PTR [ecx+19]
	cmp	eax, edx
	jbe	SHORT $LN5@dtls1_proc
; Line 1444
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 1504
	pop	ecx
	ret	0
$LN5@dtls1_proc:
; Line 1442
	lea	eax, DWORD PTR [esi+3]
	mov	DWORD PTR _pl$1$[esp+16], eax
	push	ebp
; Line 1447
	cmp	ebx, 1
	jne	$LN6@dtls1_proc
; Line 1449
	lea	ebp, DWORD PTR [ecx+19]
; Line 1454
	cmp	ebp, 16384				; 00004000H
	ja	$LN14@dtls1_proc
; Line 1461
	push	1461					; 000005b5H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 1462
	test	ebx, ebx
	je	SHORT $LN18@dtls1_proc
; Line 1468
	mov	ecx, DWORD PTR _payload$1$[esp+16]
	lea	esi, DWORD PTR [ebx+1]
	mov	eax, ecx
	mov	BYTE PTR [ebx], 2
; Line 1469
	push	ecx
	push	DWORD PTR _pl$1$[esp+24]
	shr	eax, 8
	mov	BYTE PTR [esi], al
	mov	BYTE PTR [esi+1], cl
	add	esi, 2
	push	esi
	call	_memcpy
; Line 1470
	mov	eax, DWORD PTR _payload$1$[esp+28]
	add	eax, esi
; Line 1472
	push	16					; 00000010H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 20					; 00000014H
	test	eax, eax
	jns	SHORT $LN10@dtls1_proc
; Line 1473
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN18@dtls1_proc:
; Line 1474
	pop	ebp
	pop	ebx
	pop	edi
	or	eax, -1
	pop	esi
; Line 1504
	pop	ecx
	ret	0
$LN10@dtls1_proc:
; Line 1477
	push	ebp
	push	ebx
	push	24					; 00000018H
	push	edi
	call	_dtls1_write_bytes
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 1479
	test	esi, esi
	js	SHORT $LN11@dtls1_proc
	mov	eax, DWORD PTR [edi+100]
	test	eax, eax
	je	SHORT $LN11@dtls1_proc
; Line 1480
	push	DWORD PTR [edi+104]
	push	edi
	push	ebp
	push	ebx
	push	24					; 00000018H
	push	DWORD PTR [edi]
	push	1
	call	eax
	add	esp, 28					; 0000001cH
$LN11@dtls1_proc:
; Line 1483
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1485
	test	esi, esi
	jns	SHORT $LN14@dtls1_proc
; Line 1486
	pop	ebp
	pop	ebx
	pop	edi
	mov	eax, esi
	pop	esi
; Line 1504
	pop	ecx
	ret	0
$LN6@dtls1_proc:
; Line 1487
	cmp	ebx, 2
	jne	SHORT $LN14@dtls1_proc
; Line 1496
	cmp	ecx, 18					; 00000012H
	jne	SHORT $LN14@dtls1_proc
; Line 1494
	movzx	ecx, BYTE PTR [eax]
	movzx	eax, BYTE PTR [eax+1]
	shl	ecx, 8
	or	ecx, eax
; Line 1496
	cmp	ecx, DWORD PTR [edi+396]
	jne	SHORT $LN14@dtls1_proc
; Line 1497
	push	edi
	call	_dtls1_stop_timer
	add	esp, 4
; Line 1499
	mov	DWORD PTR [edi+392], 0
	inc	DWORD PTR [edi+396]
$LN14@dtls1_proc:
; Line 1503
	pop	ebp
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 1504
	pop	ecx
	ret	0
_dtls1_process_heartbeat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_heartbeat
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_heartbeat PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1507
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+4]
; Line 1509
	or	ebp, -1
	mov	eax, DWORD PTR [esi+388]
	and	al, 3
	cmp	al, 1
; Line 1514
	jne	$LN3@dtls1_hear
; Line 1521
	cmp	DWORD PTR [esi+392], 0
	je	SHORT $LN4@dtls1_hear
; Line 1522
	push	1522					; 000005f2H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	366					; 0000016eH
; Line 1523
	jmp	$LN14@dtls1_hear
$LN4@dtls1_hear:
; Line 1527
	push	esi
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	jne	$LN6@dtls1_hear
	cmp	DWORD PTR [esi+28], 0
	jne	$LN6@dtls1_hear
; Line 1548
	push	ebx
	push	edi
	push	1548					; 0000060cH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	37					; 00000025H
	call	_CRYPTO_malloc
	mov	ebx, eax
; Line 1551
	lea	edi, DWORD PTR [ebx+1]
; Line 1557
	push	16					; 00000010H
	mov	BYTE PTR [ebx], 1
	mov	WORD PTR [edi], 4608			; 00001200H
	movzx	eax, BYTE PTR [esi+397]
	mov	BYTE PTR [edi+2], al
	movzx	eax, BYTE PTR [esi+396]
	mov	BYTE PTR [edi+3], al
	add	edi, 4
	push	edi
	call	_RAND_pseudo_bytes
	add	esp, 20					; 00000014H
	test	eax, eax
	js	SHORT $err$16
; Line 1559
	lea	eax, DWORD PTR [edi+16]
; Line 1561
	push	16					; 00000010H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	js	SHORT $err$16
; Line 1564
	push	37					; 00000025H
	push	ebx
	push	24					; 00000018H
	push	esi
	call	_dtls1_write_bytes
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 1565
	test	ebp, ebp
	js	SHORT $err$16
; Line 1566
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	je	SHORT $LN10@dtls1_hear
; Line 1567
	push	DWORD PTR [esi+104]
	push	esi
	push	37					; 00000025H
	push	ebx
	push	24					; 00000018H
	push	DWORD PTR [esi]
	push	1
	call	eax
	add	esp, 28					; 0000001cH
$LN10@dtls1_hear:
; Line 1571
	push	esi
	call	_dtls1_start_timer
	add	esp, 4
; Line 1572
	mov	DWORD PTR [esi+392], 1
$err$16:
; Line 1576
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1578
	mov	eax, ebp
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 1579
	ret	0
$LN6@dtls1_hear:
; Line 1528
	push	1528					; 000005f8H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	244					; 000000f4H
; Line 1529
	jmp	SHORT $LN14@dtls1_hear
$LN3@dtls1_hear:
; Line 1516
	push	1516					; 000005ecH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	365					; 0000016dH
$LN14@dtls1_hear:
	push	305					; 00000131H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1517
	or	eax, -1
	pop	esi
	pop	ebp
; Line 1579
	ret	0
_dtls1_heartbeat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_message
_TEXT	SEGMENT
_s$ = 8							; size = 4
_st1$ = 12						; size = 4
_stn$ = 16						; size = 4
_mt$ = 20						; size = 4
_max$ = 24						; size = 4
_ok$ = 28						; size = 4
_dtls1_get_message PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 485
	push	ebx
	push	ebp
	push	esi
; Line 495
	mov	esi, DWORD PTR _s$[esp+8]
	push	edi
	mov	edi, DWORD PTR _ok$[esp+12]
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+852], 0
	je	SHORT $LN2@dtls1_get_
; Line 497
	mov	ecx, DWORD PTR _mt$[esp+12]
	mov	DWORD PTR [eax+852], 0
	test	ecx, ecx
	js	SHORT $LN3@dtls1_get_
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+832], ecx
	je	SHORT $LN3@dtls1_get_
; Line 499
	push	499					; 000001f3H
; Line 500
	jmp	$LN17@dtls1_get_
$LN3@dtls1_get_:
; Line 502
	mov	eax, edi
	pop	edi
	mov	DWORD PTR [eax], 1
; Line 503
	mov	eax, DWORD PTR [esi+60]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR [esi+64], eax
; Line 504
	mov	eax, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+828]
	mov	DWORD PTR [esi+68], eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 558
	ret	0
$LN2@dtls1_get_:
; Line 508
	mov	ebp, DWORD PTR [esi+92]
; Line 509
	push	44					; 0000002cH
	add	ebp, 652				; 0000028cH
	push	0
	push	ebp
	call	_memset
	mov	ebx, DWORD PTR _max$[esp+24]
	add	esp, 12					; 0000000cH
	npad	2
$again$19:
; Line 512
	push	edi
	push	ebx
	push	DWORD PTR _stn$[esp+20]
	push	DWORD PTR _st1$[esp+24]
	push	esi
	call	_dtls1_get_message_fragment
	add	esp, 20					; 00000014H
; Line 513
	cmp	eax, -2					; fffffffeH
	je	SHORT $again$19
	cmp	eax, -3					; fffffffdH
	je	SHORT $again$19
; Line 516
	test	eax, eax
	jg	SHORT $LN7@dtls1_get_
	cmp	DWORD PTR [edi], 0
	je	$LN1@dtls1_get_
$LN7@dtls1_get_:
; Line 520
	mov	ecx, DWORD PTR _mt$[esp+12]
	test	ecx, ecx
	js	SHORT $LN8@dtls1_get_
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+832], ecx
	je	SHORT $LN8@dtls1_get_
; Line 522
	push	522					; 0000020aH
$LN17@dtls1_get_:
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	244					; 000000f4H
	push	252					; 000000fcH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$f_err$20:
; Line 555
	push	10					; 0000000aH
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 556
	mov	DWORD PTR [edi], 0
; Line 557
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 558
	ret	0
$LN8@dtls1_get_:
; Line 526
	mov	eax, DWORD PTR [esi+60]
; Line 527
	mov	ebx, DWORD PTR [ebp+4]
; Line 531
	mov	edx, ebx
	shr	edx, 16					; 00000010H
	mov	ecx, ebx
	shr	ecx, 8
	mov	edi, DWORD PTR [eax+4]
	movzx	eax, BYTE PTR [ebp]
	mov	BYTE PTR [edi], al
	mov	BYTE PTR [edi+1], dl
	mov	BYTE PTR [edi+2], cl
	mov	BYTE PTR [edi+3], bl
; Line 532
	movzx	eax, BYTE PTR [ebp+9]
	mov	BYTE PTR [edi+4], al
	movzx	eax, BYTE PTR [ebp+8]
	mov	BYTE PTR [edi+5], al
; Line 533
	mov	WORD PTR [edi+6], 0
	mov	BYTE PTR [edi+8], 0
; Line 534
	mov	BYTE PTR [edi+9], dl
	mov	BYTE PTR [edi+10], cl
	mov	BYTE PTR [edi+11], bl
	add	edi, 12					; 0000000cH
; Line 535
	cmp	DWORD PTR [esi], 256			; 00000100H
	je	SHORT $LN9@dtls1_get_
; Line 536
	sub	edi, 12					; 0000000cH
; Line 537
	add	ebx, 12					; 0000000cH
$LN9@dtls1_get_:
; Line 540
	push	ebx
	push	edi
	push	esi
	call	_ssl3_finish_mac
; Line 541
	mov	eax, DWORD PTR [esi+100]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN10@dtls1_get_
; Line 542
	push	DWORD PTR [esi+104]
	push	esi
	push	ebx
	push	edi
	push	22					; 00000016H
	push	DWORD PTR [esi]
	push	0
	call	eax
	add	esp, 28					; 0000001cH
$LN10@dtls1_get_:
; Line 545
	push	44					; 0000002cH
	push	0
	push	ebp
	call	_memset
; Line 548
	mov	eax, DWORD PTR [esi+92]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [eax+596], 0
	jne	SHORT $LN11@dtls1_get_
; Line 549
	inc	WORD PTR [eax+552]
$LN11@dtls1_get_:
; Line 551
	mov	ecx, DWORD PTR [esi+60]
; Line 552
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR [esi+64], ecx
$LN1@dtls1_get_:
; Line 558
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_dtls1_get_message ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_shutdown
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_shutdown PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1415
	jmp	_ssl3_shutdown
_dtls1_shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_hm_fragment_free
_TEXT	SEGMENT
_frag$ = 8						; size = 4
_dtls1_hm_fragment_free PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 215
	push	esi
; Line 217
	mov	esi, DWORD PTR _frag$[esp]
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN2@dtls1_hm_f
; Line 218
	push	DWORD PTR [esi+24]
	call	_EVP_CIPHER_CTX_free
; Line 220
	push	DWORD PTR [esi+28]
	call	_EVP_MD_CTX_destroy
	add	esp, 8
$LN2@dtls1_hm_f:
; Line 223
	mov	eax, DWORD PTR [esi+44]
	test	eax, eax
	je	SHORT $LN3@dtls1_hm_f
; Line 224
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN3@dtls1_hm_f:
; Line 225
	mov	eax, DWORD PTR [esi+48]
	test	eax, eax
	je	SHORT $LN4@dtls1_hm_f
; Line 226
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@dtls1_hm_f:
; Line 227
	push	esi
	call	_CRYPTO_free
	add	esp, 4
	pop	esi
; Line 228
	ret	0
_dtls1_hm_fragment_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_link_min_mtu
_TEXT	SEGMENT
_dtls1_link_min_mtu PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1369
	mov	eax, 256				; 00000100H
; Line 1371
	ret	0
_dtls1_link_min_mtu ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_min_mtu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_min_mtu PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1375
	push	0
	push	0
	push	49					; 00000031H
	push	DWORD PTR _s$[esp+8]
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, 256				; 00000100H
	add	esp, 16					; 00000010H
	sub	ecx, eax
	mov	eax, ecx
; Line 1376
	ret	0
_dtls1_min_mtu ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_ccs_header
_TEXT	SEGMENT
_data$ = 8						; size = 4
_ccs_hdr$ = 12						; size = 4
_dtls1_get_ccs_header PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1392
	mov	ecx, DWORD PTR _ccs_hdr$[esp-4]
; Line 1394
	mov	eax, DWORD PTR _data$[esp-4]
	mov	DWORD PTR [ecx], 0
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
; Line 1395
	ret	0
_dtls1_get_ccs_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_message_header
_TEXT	SEGMENT
_data$ = 8						; size = 4
_msg_hdr$ = 12						; size = 4
_dtls1_get_message_header PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1380
	push	esi
; Line 1381
	mov	esi, DWORD PTR _msg_hdr$[esp]
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
; Line 1382
	mov	edx, DWORD PTR _data$[esp+12]
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [esi], al
; Line 1383
	movzx	ecx, BYTE PTR [edx+1]
	movzx	eax, BYTE PTR [edx+2]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+3]
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR [esi+4], ecx
; Line 1385
	movzx	ecx, BYTE PTR [edx+4]
	movzx	eax, BYTE PTR [edx+5]
	shl	cx, 8
	or	cx, ax
	mov	WORD PTR [esi+8], cx
; Line 1386
	movzx	ecx, BYTE PTR [edx+6]
	movzx	eax, BYTE PTR [edx+7]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+8]
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR [esi+12], ecx
; Line 1387
	movzx	ecx, BYTE PTR [edx+9]
	movzx	eax, BYTE PTR [edx+10]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+11]
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR [esi+16], ecx
	pop	esi
; Line 1388
	ret	0
_dtls1_get_message_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_clear_record_buffer
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_clear_record_buffer PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1301
	push	ebx
; Line 1304
	mov	ebx, DWORD PTR _s$[esp]
	push	edi
	mov	eax, DWORD PTR [ebx+92]
	push	DWORD PTR [eax+584]
	call	_pqueue_pop
	mov	edi, eax
	add	esp, 4
; Line 1305
	test	edi, edi
	je	SHORT $LN3@dtls1_clea
	push	esi
	npad	2
$LL4@dtls1_clea:
; Line 1306
	mov	esi, DWORD PTR [edi+8]
; Line 217
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN7@dtls1_clea
; Line 218
	push	DWORD PTR [esi+24]
	call	_EVP_CIPHER_CTX_free
; Line 220
	push	DWORD PTR [esi+28]
	call	_EVP_MD_CTX_destroy
	add	esp, 8
$LN7@dtls1_clea:
; Line 223
	mov	eax, DWORD PTR [esi+44]
	test	eax, eax
	je	SHORT $LN8@dtls1_clea
; Line 224
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN8@dtls1_clea:
; Line 225
	mov	eax, DWORD PTR [esi+48]
	test	eax, eax
	je	SHORT $LN9@dtls1_clea
; Line 226
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN9@dtls1_clea:
; Line 227
	push	esi
	call	_CRYPTO_free
; Line 1307
	push	edi
	call	_pitem_free
	mov	eax, DWORD PTR [ebx+92]
	push	DWORD PTR [eax+584]
	call	_pqueue_pop
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	jne	SHORT $LL4@dtls1_clea
	pop	esi
$LN3@dtls1_clea:
	pop	edi
	pop	ebx
; Line 1309
	ret	0
_dtls1_clear_record_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_retransmit_buffered_messages
_TEXT	SEGMENT
_saved_state$5$ = -46					; size = 2
_save_write_sequence$2$ = -44				; size = 4
_save_write_sequence$1$ = -40				; size = 4
_iter$ = -36						; size = 4
_saved_state$1$ = -32					; size = 4
_saved_state$2$ = -28					; size = 4
_saved_state$3$ = -24					; size = 4
_saved_state$4$ = -20					; size = 4
tv410 = -16						; size = 4
_save_write_sequence$1 = -12				; size = 8
_seq64be$2 = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_dtls1_retransmit_buffered_messages PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1112
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+56]
	push	edi
; Line 1113
	mov	eax, DWORD PTR [esi+92]
; Line 1119
	push	DWORD PTR [eax+584]
	call	_pqueue_iterator
	mov	DWORD PTR _iter$[esp+68], eax
; Line 1121
	lea	eax, DWORD PTR _iter$[esp+68]
	push	eax
	call	_pqueue_next
	add	esp, 8
	mov	ebp, 1
	test	eax, eax
	je	$LN3@dtls1_retr
	mov	ecx, DWORD PTR _save_write_sequence$1[esp+68]
	mov	DWORD PTR _save_write_sequence$2$[esp+64], ecx
	mov	ecx, DWORD PTR _save_write_sequence$1[esp+64]
	mov	DWORD PTR _save_write_sequence$1$[esp+64], ecx
	npad	7
$LL4@dtls1_retr:
; Line 1122
	mov	eax, DWORD PTR [eax+8]
	xorps	xmm0, xmm0
; Line 1222
	movq	QWORD PTR _seq64be$2[esp+64], xmm0
; Line 1108
	movzx	ebx, WORD PTR [eax+8]
	add	ebx, ebx
	sub	ebx, DWORD PTR [eax+20]
; Line 1223
	mov	eax, ebx
; Line 1224
	mov	BYTE PTR _seq64be$2[esp+71], bl
	shr	eax, 8
	mov	BYTE PTR _seq64be$2[esp+70], al
; Line 1226
	lea	eax, DWORD PTR _seq64be$2[esp+64]
	push	eax
	mov	eax, DWORD PTR [esi+92]
	push	DWORD PTR [eax+584]
	call	_pqueue_find
	add	esp, 8
; Line 1227
	test	eax, eax
	jne	SHORT $LN10@dtls1_retr
; Line 1228
	movzx	eax, bx
	push	eax
	push	OFFSET ??_C@_0CG@JAOANJGB@retransmit?3?5?5message?5?$CFd?5non?9exis@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1230
	jmp	$LN2@dtls1_retr
$LN10@dtls1_retr:
; Line 1234
	mov	ebp, DWORD PTR [eax+8]
; Line 1236
	mov	edi, 12					; 0000000cH
	mov	eax, 1
	cmp	DWORD PTR [ebp+20], 0
	cmovne	edi, eax
; Line 1241
	mov	eax, DWORD PTR [ebp+4]
	add	eax, edi
	push	eax
	mov	eax, DWORD PTR [esi+60]
	push	DWORD PTR [ebp+44]
	push	DWORD PTR [eax+4]
	call	_memcpy
; Line 1243
	mov	eax, DWORD PTR [ebp+4]
	add	esp, 12					; 0000000cH
	add	eax, edi
; Line 1334
	mov	edi, DWORD PTR [esi+92]
; Line 1243
	mov	DWORD PTR [esi+68], eax
; Line 1245
	movzx	edx, WORD PTR [ebp+8]
; Line 1336
	mov	al, BYTE PTR [ebp]
; Line 1245
	mov	ecx, DWORD PTR [ebp+4]
	mov	ebx, DWORD PTR [ebp+16]
; Line 1337
	mov	DWORD PTR [edi+612], ecx
	mov	BYTE PTR [edi+608], al
; Line 1338
	mov	WORD PTR [edi+616], dx
; Line 1339
	mov	DWORD PTR [edi+620], 0
; Line 1340
	mov	DWORD PTR [edi+624], ebx
; Line 1251
	mov	eax, DWORD PTR [esi+140]
	mov	DWORD PTR _saved_state$1$[esp+64], eax
; Line 1252
	mov	eax, DWORD PTR [esi+144]
	mov	DWORD PTR _saved_state$2$[esp+64], eax
; Line 1253
	mov	eax, DWORD PTR [esi+148]
	mov	DWORD PTR _saved_state$3$[esp+64], eax
; Line 1254
	mov	eax, DWORD PTR [esi+192]
	mov	DWORD PTR _saved_state$4$[esp+64], eax
; Line 1256
	mov	eax, DWORD PTR [esi+92]
	mov	dx, WORD PTR [eax+522]
; Line 1258
	mov	DWORD PTR [eax+740], 1
; Line 1261
	mov	eax, DWORD PTR [ebp+24]
; Line 1265
	mov	ecx, DWORD PTR [esi+92]
	mov	DWORD PTR [esi+140], eax
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR [esi+144], eax
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR [esi+148], eax
	mov	eax, DWORD PTR [ebp+36]
	mov	DWORD PTR [esi+192], eax
	mov	ax, WORD PTR [ebp+40]
	mov	WORD PTR [ecx+522], ax
; Line 1267
	movzx	eax, WORD PTR [ebp+40]
	movzx	ecx, dx
	dec	ecx
	mov	WORD PTR _saved_state$5$[esp+64], dx
	mov	DWORD PTR tv410[esp+64], ecx
	cmp	eax, ecx
	jne	SHORT $LN26@dtls1_retr
; Line 1269
	mov	edx, DWORD PTR [esi+88]
; Line 1271
	mov	ecx, DWORD PTR [esi+92]
	mov	eax, DWORD PTR [edx+84]
	mov	ebx, DWORD PTR [edx+88]
	mov	DWORD PTR _save_write_sequence$1$[esp+64], eax
	mov	eax, DWORD PTR [ecx+554]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR [ecx+558]
	mov	DWORD PTR _save_write_sequence$2$[esp+64], ebx
	mov	DWORD PTR [edx+88], eax
	jmp	SHORT $LN13@dtls1_retr
$LN26@dtls1_retr:
	mov	ebx, DWORD PTR _save_write_sequence$2$[esp+64]
$LN13@dtls1_retr:
; Line 1275
	xor	eax, eax
	cmp	DWORD PTR [ebp+20], eax
	sete	al
	lea	eax, DWORD PTR [eax*2+20]
	push	eax
	push	esi
	call	_dtls1_do_write
; Line 1283
	mov	ecx, DWORD PTR [esi+92]
	mov	edi, eax
	mov	eax, DWORD PTR _saved_state$1$[esp+72]
	add	esp, 8
	mov	DWORD PTR [esi+140], eax
	mov	eax, DWORD PTR _saved_state$2$[esp+64]
	mov	DWORD PTR [esi+144], eax
	mov	eax, DWORD PTR _saved_state$3$[esp+64]
	mov	DWORD PTR [esi+148], eax
	mov	eax, DWORD PTR _saved_state$4$[esp+64]
	mov	DWORD PTR [esi+192], eax
	mov	ax, WORD PTR _saved_state$5$[esp+64]
	mov	WORD PTR [ecx+522], ax
; Line 1285
	movzx	ecx, WORD PTR [ebp+40]
	cmp	ecx, DWORD PTR tv410[esp+64]
	jne	SHORT $LN14@dtls1_retr
; Line 1287
	mov	ecx, DWORD PTR [esi+88]
	mov	edx, DWORD PTR [esi+92]
	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [edx+554], eax
	mov	eax, DWORD PTR [ecx+88]
; Line 1289
	mov	ecx, DWORD PTR _save_write_sequence$1$[esp+64]
	mov	DWORD PTR [edx+558], eax
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+84], ecx
	mov	DWORD PTR [eax+88], ebx
$LN14@dtls1_retr:
; Line 1293
	mov	eax, DWORD PTR [esi+92]
; Line 1295
	push	0
	push	0
	push	11					; 0000000bH
	push	esi
	mov	DWORD PTR [eax+740], 0
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
; Line 1127
	test	edi, edi
	jle	SHORT $LN19@dtls1_retr
$LN2@dtls1_retr:
; Line 1121
	lea	eax, DWORD PTR _iter$[esp+64]
	push	eax
	call	_pqueue_next
	add	esp, 4
	test	eax, eax
	jne	$LL4@dtls1_retr
	mov	ebp, 1
$LN3@dtls1_retr:
	pop	edi
	pop	esi
; Line 1133
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 1134
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN19@dtls1_retr:
; Line 1128
	push	OFFSET ??_C@_0CD@FMODJFBI@dtls1_retransmit_message?$CI?$CJ?5faile@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	_fprintf
; Line 1134
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	add	esp, 8
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_dtls1_retransmit_buffered_messages ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_queue_priority
_TEXT	SEGMENT
_seq$ = 8						; size = 2
_is_ccs$ = 12						; size = 4
_dtls1_get_queue_priority PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1108
	movzx	eax, WORD PTR _seq$[esp-4]
	add	eax, eax
	sub	eax, DWORD PTR _is_ccs$[esp-4]
; Line 1109
	ret	0
_dtls1_get_queue_priority ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_retransmit_message
_TEXT	SEGMENT
_saved_state$5$ = -38					; size = 2
_saved_state$1$ = -36					; size = 4
_saved_state$2$ = -32					; size = 4
_saved_state$3$ = -28					; size = 4
_saved_state$4$ = -24					; size = 4
tv363 = -20						; size = 4
_ret$1$ = -16						; size = 4
_save_write_sequence$ = -12				; size = 8
_seq64be$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_seq$ = 12						; size = 2
_frag_off$ = 16						; size = 4
_found$ = 20						; size = 4
_dtls1_retransmit_message PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1206
	mov	eax, 40					; 00000028H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+40], eax
; Line 1223
	mov	ecx, DWORD PTR _seq$[esp+36]
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, DWORD PTR _s$[esp+40]
	mov	eax, ecx
	shr	eax, 8
	movq	QWORD PTR _seq64be$[esp+44], xmm0
	mov	BYTE PTR _seq64be$[esp+50], al
; Line 1226
	lea	eax, DWORD PTR _seq64be$[esp+44]
	push	esi
	mov	esi, DWORD PTR _found$[esp+44]
	push	eax
	mov	eax, DWORD PTR [ebx+92]
	mov	BYTE PTR _seq64be$[esp+59], cl
	push	DWORD PTR [eax+584]
	call	_pqueue_find
	add	esp, 8
; Line 1227
	test	eax, eax
	jne	SHORT $LN2@dtls1_retr
; Line 1228
	mov	eax, DWORD PTR _seq$[esp+44]
	movzx	eax, ax
	push	eax
	push	OFFSET ??_C@_0CG@JAOANJGB@retransmit?3?5?5message?5?$CFd?5non?9exis@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1229
	mov	DWORD PTR [esi], 0
; Line 1230
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 1297
	mov	ecx, DWORD PTR __$ArrayPad$[esp+40]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	ret	0
$LN2@dtls1_retr:
; Line 1233
	mov	DWORD PTR [esi], 1
; Line 1236
	mov	esi, 12					; 0000000cH
	push	ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	eax, 1
	push	edi
	cmp	DWORD PTR [ebp+20], 0
	cmovne	esi, eax
; Line 1241
	mov	eax, DWORD PTR [ebp+4]
	add	eax, esi
	push	eax
	mov	eax, DWORD PTR [ebx+60]
	push	DWORD PTR [ebp+44]
	push	DWORD PTR [eax+4]
	call	_memcpy
; Line 1243
	mov	eax, DWORD PTR [ebp+4]
	add	esp, 12					; 0000000cH
	add	eax, esi
; Line 1334
	mov	esi, DWORD PTR [ebx+92]
; Line 1243
	mov	DWORD PTR [ebx+68], eax
; Line 1245
	movzx	edx, WORD PTR [ebp+8]
; Line 1336
	mov	al, BYTE PTR [ebp]
; Line 1245
	mov	ecx, DWORD PTR [ebp+4]
	mov	edi, DWORD PTR [ebp+16]
; Line 1337
	mov	DWORD PTR [esi+612], ecx
	mov	BYTE PTR [esi+608], al
; Line 1338
	mov	WORD PTR [esi+616], dx
; Line 1339
	mov	DWORD PTR [esi+620], 0
; Line 1340
	mov	DWORD PTR [esi+624], edi
; Line 1251
	mov	eax, DWORD PTR [ebx+140]
	mov	DWORD PTR _saved_state$1$[esp+56], eax
; Line 1252
	mov	eax, DWORD PTR [ebx+144]
	mov	DWORD PTR _saved_state$2$[esp+56], eax
; Line 1253
	mov	eax, DWORD PTR [ebx+148]
	mov	DWORD PTR _saved_state$3$[esp+56], eax
; Line 1254
	mov	eax, DWORD PTR [ebx+192]
	mov	DWORD PTR _saved_state$4$[esp+56], eax
; Line 1256
	mov	eax, DWORD PTR [ebx+92]
	mov	dx, WORD PTR [eax+522]
; Line 1258
	mov	DWORD PTR [eax+740], 1
; Line 1261
	mov	eax, DWORD PTR [ebp+24]
; Line 1265
	mov	ecx, DWORD PTR [ebx+92]
	mov	DWORD PTR [ebx+140], eax
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR [ebx+144], eax
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR [ebx+148], eax
	mov	eax, DWORD PTR [ebp+36]
	mov	DWORD PTR [ebx+192], eax
	mov	ax, WORD PTR [ebp+40]
	mov	WORD PTR [ecx+522], ax
; Line 1267
	movzx	eax, WORD PTR [ebp+40]
	movzx	ecx, dx
	dec	ecx
	mov	WORD PTR _saved_state$5$[esp+56], dx
	mov	DWORD PTR tv363[esp+56], ecx
	cmp	eax, ecx
	jne	SHORT $LN10@dtls1_retr
; Line 1269
	mov	edx, DWORD PTR [ebx+88]
; Line 1271
	mov	ecx, DWORD PTR [ebx+92]
	mov	esi, DWORD PTR [edx+84]
	mov	eax, DWORD PTR [ecx+554]
	mov	edi, DWORD PTR [edx+88]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR [ecx+558]
	mov	DWORD PTR [edx+88], eax
	jmp	SHORT $LN5@dtls1_retr
$LN10@dtls1_retr:
	mov	edi, DWORD PTR _save_write_sequence$[esp+60]
	mov	esi, DWORD PTR _save_write_sequence$[esp+56]
$LN5@dtls1_retr:
; Line 1275
	xor	eax, eax
	cmp	DWORD PTR [ebp+20], eax
	sete	al
	lea	eax, DWORD PTR [eax*2+20]
	push	eax
	push	ebx
	call	_dtls1_do_write
; Line 1283
	mov	ecx, DWORD PTR [ebx+92]
	add	esp, 8
	mov	DWORD PTR _ret$1$[esp+56], eax
	mov	eax, DWORD PTR _saved_state$1$[esp+56]
	mov	DWORD PTR [ebx+140], eax
	mov	eax, DWORD PTR _saved_state$2$[esp+56]
	mov	DWORD PTR [ebx+144], eax
	mov	eax, DWORD PTR _saved_state$3$[esp+56]
	mov	DWORD PTR [ebx+148], eax
	mov	eax, DWORD PTR _saved_state$4$[esp+56]
	mov	DWORD PTR [ebx+192], eax
	mov	ax, WORD PTR _saved_state$5$[esp+56]
	mov	WORD PTR [ecx+522], ax
; Line 1285
	movzx	ecx, WORD PTR [ebp+40]
	cmp	ecx, DWORD PTR tv363[esp+56]
	jne	SHORT $LN6@dtls1_retr
; Line 1287
	mov	ecx, DWORD PTR [ebx+88]
	mov	edx, DWORD PTR [ebx+92]
	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [edx+554], eax
	mov	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+558], eax
; Line 1289
	mov	eax, DWORD PTR [ebx+88]
	mov	DWORD PTR [eax+84], esi
	mov	DWORD PTR [eax+88], edi
$LN6@dtls1_retr:
; Line 1293
	mov	eax, DWORD PTR [ebx+92]
; Line 1295
	push	0
	push	0
	push	11					; 0000000bH
	push	ebx
	mov	DWORD PTR [eax+740], 0
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
; Line 1297
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _ret$1$[esp+56]
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	ret	0
_dtls1_retransmit_message ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_buffer_message
_TEXT	SEGMENT
_seq64be$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_is_ccs$ = 12						; size = 4
_dtls1_buffer_message PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1137
	mov	eax, 12					; 0000000cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+12], eax
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+20]
	push	edi
; Line 1146
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN8@dtls1_buff
	push	OFFSET ??_C@_0BB@JNHBKAGH@s?9?$DOinit_off?5?$DN?$DN?50?$AA@
	push	1146					; 0000047aH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN8@dtls1_buff:
; Line 1148
	mov	ebp, DWORD PTR [esi+68]
; Line 178
	xor	ebx, ebx
; Line 181
	push	181					; 000000b5H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	52					; 00000034H
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 182
	test	edi, edi
	je	SHORT $LN25@dtls1_buff
; Line 185
	test	ebp, ebp
	je	SHORT $LN16@dtls1_buff
; Line 186
	push	186					; 000000baH
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 187
	test	ebx, ebx
	jne	SHORT $LN16@dtls1_buff
; Line 188
	push	edi
	call	_CRYPTO_free
$LN27@dtls1_buff:
; Line 1190
	add	esp, 4
$LN25@dtls1_buff:
	pop	edi
	pop	esi
	pop	ebp
; Line 1150
	xor	eax, eax
	pop	ebx
; Line 1201
	mov	ecx, DWORD PTR __$ArrayPad$[esp+12]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 12					; 0000000cH
	ret	0
$LN16@dtls1_buff:
; Line 194
	mov	DWORD PTR [edi+44], ebx
; Line 209
	mov	DWORD PTR [edi+48], 0
; Line 1152
	mov	eax, DWORD PTR [esi+60]
	push	DWORD PTR [esi+68]
	push	DWORD PTR [eax+4]
	push	ebx
	call	_memcpy
; Line 1154
	mov	ebx, DWORD PTR _is_ccs$[esp+36]
	add	esp, 12					; 0000000cH
; Line 1156
	mov	eax, DWORD PTR [esi+92]
	test	ebx, ebx
	je	SHORT $LN3@dtls1_buff
	xor	ecx, ecx
	cmp	DWORD PTR [esi], 256			; 00000100H
	sete	cl
	lea	ecx, DWORD PTR [ecx*2+1]
	add	ecx, DWORD PTR [eax+612]
	cmp	ecx, DWORD PTR [esi+68]
	je	SHORT $LN12@dtls1_buff
	push	OFFSET ??_C@_0HA@GEKIBMBM@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5?$CI?$CIs?9?$DO@
	push	1158					; 00000486H
; Line 1159
	jmp	SHORT $LN26@dtls1_buff
$LN3@dtls1_buff:
; Line 1160
	mov	eax, DWORD PTR [eax+612]
	add	eax, 12					; 0000000cH
	cmp	eax, DWORD PTR [esi+68]
	je	SHORT $LN12@dtls1_buff
	push	OFFSET ??_C@_0EP@GFDKHMFP@s?9?$DOd1?9?$DOw_msg_hdr?4msg_len?5?$CL?5DTLS1@
	push	1161					; 00000489H
$LN26@dtls1_buff:
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN12@dtls1_buff:
; Line 1164
	mov	eax, DWORD PTR [esi+92]
	xorps	xmm0, xmm0
; Line 1188
	push	edi
	mov	eax, DWORD PTR [eax+612]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [esi+92]
	movzx	eax, WORD PTR [eax+616]
	mov	WORD PTR [edi+8], ax
	mov	eax, DWORD PTR [esi+92]
	movzx	eax, BYTE PTR [eax+608]
	mov	BYTE PTR [edi], al
	mov	DWORD PTR [edi+12], 0
	mov	eax, DWORD PTR [esi+92]
	mov	eax, DWORD PTR [eax+612]
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [edi+20], ebx
	mov	eax, DWORD PTR [esi+140]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+144]
	mov	DWORD PTR [edi+28], eax
	mov	eax, DWORD PTR [esi+148]
	mov	DWORD PTR [edi+32], eax
	mov	eax, DWORD PTR [esi+192]
	mov	DWORD PTR [edi+36], eax
	mov	eax, DWORD PTR [esi+92]
	movzx	eax, WORD PTR [eax+522]
	mov	WORD PTR [edi+40], ax
	movq	QWORD PTR _seq64be$[esp+32], xmm0
; Line 1108
	movzx	eax, WORD PTR [edi+8]
	add	eax, eax
	sub	eax, DWORD PTR [edi+20]
; Line 1179
	sar	eax, 8
	mov	BYTE PTR _seq64be$[esp+38], al
; Line 1108
	movzx	eax, BYTE PTR [edi+8]
	add	al, al
	sub	al, BYTE PTR [edi+20]
; Line 1183
	mov	BYTE PTR _seq64be$[esp+39], al
; Line 1188
	lea	eax, DWORD PTR _seq64be$[esp+32]
	push	eax
	call	_pitem_new
	add	esp, 8
; Line 1189
	test	eax, eax
	jne	SHORT $LN5@dtls1_buff
; Line 1190
	push	edi
	call	_dtls1_hm_fragment_free
; Line 1191
	jmp	$LN27@dtls1_buff
$LN5@dtls1_buff:
; Line 1199
	push	eax
	mov	eax, DWORD PTR [esi+92]
	push	DWORD PTR [eax+584]
	call	_pqueue_insert
; Line 1201
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	add	esp, 8
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 12					; 0000000cH
	ret	0
_dtls1_buffer_message ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_read_failed
_TEXT	SEGMENT
_s$ = 8							; size = 4
_code$ = 12						; size = 4
_dtls1_read_failed PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1054
	push	edi
; Line 1055
	mov	edi, DWORD PTR _code$[esp]
	test	edi, edi
	jle	SHORT $LN2@dtls1_read
; Line 1056
	push	1056					; 00000420H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	push	OFFSET ??_C@_0BM@PPAKALD@invalid?5state?5reached?5?$CFs?3?$CFd?$AA@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
; Line 1057
	mov	eax, 1
	pop	edi
; Line 1094
	ret	0
$LN2@dtls1_read:
	push	esi
; Line 1060
	mov	esi, DWORD PTR _s$[esp+4]
	push	esi
	call	_dtls1_is_timer_expired
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@dtls1_read
; Line 1069
	push	esi
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	jne	SHORT $LN4@dtls1_read
	cmp	DWORD PTR [esi+392], 0
	jne	SHORT $LN4@dtls1_read
; Line 1075
	push	1
	push	esi
	call	_SSL_get_rbio
	add	esp, 4
	push	eax
	call	_BIO_set_flags
	add	esp, 8
$LN7@dtls1_read:
; Line 1076
	pop	esi
	mov	eax, edi
	pop	edi
; Line 1094
	ret	0
$LN4@dtls1_read:
; Line 1093
	push	esi
	call	_dtls1_handle_timeout
	add	esp, 4
	pop	esi
	pop	edi
; Line 1094
	ret	0
_dtls1_read_failed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_send_change_cipher_spec
_TEXT	SEGMENT
_s$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_dtls1_send_change_cipher_spec PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1023
	push	esi
; Line 1026
	mov	esi, DWORD PTR _s$[esp]
	mov	eax, DWORD PTR [esi+52]
	cmp	eax, DWORD PTR _a$[esp]
	jne	$LN2@dtls1_send
; Line 1027
	mov	eax, DWORD PTR [esi+60]
	mov	edx, DWORD PTR [eax+4]
; Line 1028
	mov	BYTE PTR [edx], 1
; Line 1029
	mov	ecx, DWORD PTR [esi+92]
	mov	ax, WORD PTR [ecx+550]
	mov	WORD PTR [ecx+548], ax
; Line 1032
	cmp	DWORD PTR [esi], 256			; 00000100H
	mov	DWORD PTR [esi+68], 1
	jne	SHORT $LN3@dtls1_send
; Line 1033
	mov	eax, DWORD PTR [esi+92]
	inc	WORD PTR [eax+550]
; Line 1034
	mov	eax, DWORD PTR [esi+92]
	movzx	eax, BYTE PTR [eax+549]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR [esi+92]
	movzx	eax, BYTE PTR [eax+548]
	mov	BYTE PTR [edx+2], al
; Line 1035
	add	DWORD PTR [esi+68], 2
$LN3@dtls1_send:
; Line 1040
	mov	ecx, DWORD PTR [esi+92]
	mov	DWORD PTR [esi+72], 0
; Line 1044
	push	1
	push	esi
	movzx	eax, WORD PTR [ecx+548]
; Line 1336
	mov	BYTE PTR [ecx+608], 1
; Line 1337
	mov	DWORD PTR [ecx+612], 0
; Line 1338
	mov	WORD PTR [ecx+616], ax
; Line 1339
	mov	DWORD PTR [ecx+620], 0
; Line 1340
	mov	DWORD PTR [ecx+624], 0
; Line 1044
	call	_dtls1_buffer_message
; Line 1046
	mov	eax, DWORD PTR _b$[esp+8]
	add	esp, 8
	mov	DWORD PTR [esi+52], eax
$LN2@dtls1_send:
; Line 1050
	push	20					; 00000014H
	push	esi
	call	_dtls1_do_write
	add	esp, 8
	pop	esi
; Line 1051
	ret	0
_dtls1_send_change_cipher_spec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_set_message_header
_TEXT	SEGMENT
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_mt$ = 16						; size = 1
_len$ = 20						; size = 4
_frag_off$ = 24						; size = 4
_frag_len$ = 28						; size = 4
_dtls1_set_message_header PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 1317
	mov	edx, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, DWORD PTR _frag_off$[esp]
	test	esi, esi
	jne	SHORT $LN2@dtls1_set_
	mov	ecx, DWORD PTR [edx+92]
	cmp	DWORD PTR [ecx+596], 0
	jne	SHORT $LN2@dtls1_set_
; Line 1318
	mov	ax, WORD PTR [ecx+550]
	mov	WORD PTR [ecx+548], ax
; Line 1319
	mov	eax, DWORD PTR [edx+92]
	inc	WORD PTR [eax+550]
$LN2@dtls1_set_:
; Line 1322
	mov	edx, DWORD PTR [edx+92]
; Line 1336
	mov	al, BYTE PTR _mt$[esp]
; Line 1322
	movzx	ecx, WORD PTR [edx+548]
; Line 1336
	mov	BYTE PTR [edx+608], al
; Line 1337
	mov	eax, DWORD PTR _len$[esp]
	mov	DWORD PTR [edx+612], eax
; Line 1340
	mov	eax, DWORD PTR _frag_len$[esp]
	mov	DWORD PTR [edx+624], eax
; Line 1325
	mov	eax, DWORD PTR _p$[esp]
; Line 1339
	mov	DWORD PTR [edx+620], esi
; Line 1325
	add	eax, 12					; 0000000cH
; Line 1338
	mov	WORD PTR [edx+616], cx
	pop	esi
; Line 1326
	ret	0
_dtls1_set_message_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_do_write
_TEXT	SEGMENT
_mac_size$1$ = -12					; size = 4
_retry$1$ = -8						; size = 4
_blocksize$1$ = -4					; size = 4
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_dtls1_do_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_both.c
; Line 265
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	esi
; Line 271
	mov	esi, DWORD PTR _s$[esp+12]
	push	esi
	mov	DWORD PTR _retry$1$[esp+20], 1
	call	_dtls1_query_mtu
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@dtls1_do_w
; Line 272
	or	eax, -1
	pop	esi
; Line 477
	add	esp, 12					; 0000000cH
	ret	0
$LN4@dtls1_do_w:
; Line 1375
	push	0
	push	0
	push	49					; 00000031H
	push	esi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, 256				; 00000100H
	add	esp, 16					; 00000010H
	sub	ecx, eax
; Line 274
	mov	eax, DWORD PTR [esi+92]
	cmp	DWORD PTR [eax+604], ecx
	jae	SHORT $LN41@dtls1_do_w
	push	OFFSET ??_C@_0BP@ICKAAGNH@s?9?$DOd1?9?$DOmtu?5?$DO?$DN?5dtls1_min_mtu?$CIs?$CJ?$AA@
	push	274					; 00000112H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN41@dtls1_do_w:
; Line 277
	cmp	DWORD PTR [esi+72], 0
	push	ebx
	mov	ebx, DWORD PTR _type$[esp+16]
	jne	SHORT $LN43@dtls1_do_w
	cmp	ebx, 22					; 00000016H
	jne	SHORT $LN43@dtls1_do_w
; Line 278
	mov	eax, DWORD PTR [esi+92]
	mov	eax, DWORD PTR [eax+612]
	add	eax, 12					; 0000000cH
	cmp	DWORD PTR [esi+68], eax
	je	SHORT $LN43@dtls1_do_w
	push	OFFSET ??_C@_0EG@CCIHJLOA@s?9?$DOinit_num?5?$DN?$DN?5?$CIint?$CJs?9?$DOd1?9?$DOw_msg@
	push	280					; 00000118H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN43@dtls1_do_w:
; Line 282
	cmp	DWORD PTR [esi+144], 0
	je	SHORT $LN6@dtls1_do_w
; Line 284
	mov	eax, DWORD PTR [esi+140]
	test	eax, eax
	je	SHORT $LN8@dtls1_do_w
	push	eax
	call	_EVP_CIPHER_CTX_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 6
	je	SHORT $LN6@dtls1_do_w
$LN8@dtls1_do_w:
; Line 287
	push	DWORD PTR [esi+144]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	add	esp, 8
	mov	DWORD PTR _mac_size$1$[esp+20], eax
; Line 288
	jmp	SHORT $LN7@dtls1_do_w
$LN6@dtls1_do_w:
; Line 289
	mov	DWORD PTR _mac_size$1$[esp+20], 0
$LN7@dtls1_do_w:
; Line 291
	mov	eax, DWORD PTR [esi+140]
	push	edi
	test	eax, eax
	je	SHORT $LN10@dtls1_do_w
	push	eax
	call	_EVP_CIPHER_CTX_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN10@dtls1_do_w
; Line 293
	mov	eax, DWORD PTR [esi+140]
	push	DWORD PTR [eax]
	call	_EVP_CIPHER_block_size
	mov	edi, eax
	add	esp, 4
	add	edi, edi
	jmp	SHORT $LN69@dtls1_do_w
$LN10@dtls1_do_w:
; Line 295
	xor	edi, edi
$LN69@dtls1_do_w:
	push	ebp
; Line 297
	xor	ebp, ebp
	mov	DWORD PTR _blocksize$1$[esp+28], edi
; Line 298
	mov	DWORD PTR [esi+24], 1
; Line 301
	cmp	DWORD PTR [esi+68], ebp
	jle	$LN3@dtls1_do_w
	npad	6
$LL2@dtls1_do_w:
; Line 302
	cmp	ebx, 22					; 00000016H
	jne	SHORT $LN14@dtls1_do_w
	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN14@dtls1_do_w
; Line 305
	test	ebp, ebp
	je	SHORT $LN13@dtls1_do_w
; Line 308
	cmp	eax, 12					; 0000000cH
	jle	$LN20@dtls1_do_w
; Line 323
	add	eax, -12				; fffffff4H
; Line 324
	add	DWORD PTR [esi+68], 12			; 0000000cH
	mov	DWORD PTR [esi+72], eax
; Line 325
	jmp	SHORT $LN14@dtls1_do_w
$LN13@dtls1_do_w:
; Line 332
	mov	eax, DWORD PTR [esi+92]
	mov	ebp, DWORD PTR [eax+620]
$LN14@dtls1_do_w:
; Line 336
	push	0
	push	0
	push	13					; 0000000dH
	push	esi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	mov	ecx, DWORD PTR _mac_size$1$[esp+44]
	add	eax, edi
; Line 338
	mov	edx, DWORD PTR [esi+92]
	add	ecx, 13					; 0000000dH
	add	eax, ecx
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [edx+604]
	cmp	ecx, eax
	jbe	SHORT $LN64@dtls1_do_w
; Line 339
	sub	ecx, eax
; Line 343
	cmp	ecx, 12					; 0000000cH
	ja	SHORT $LN21@dtls1_do_w
$LN64@dtls1_do_w:
; Line 347
	push	0
	push	0
	push	11					; 0000000bH
	push	esi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
; Line 348
	test	eax, eax
	jle	$LN58@dtls1_do_w
; Line 352
	mov	eax, DWORD PTR _mac_size$1$[esp+28]
; Line 353
	mov	edx, DWORD PTR [esi+92]
	add	eax, 13					; 0000000dH
	add	edi, eax
	mov	ecx, DWORD PTR [edx+604]
	lea	eax, DWORD PTR [edi+12]
	cmp	ecx, eax
	jbe	$LN20@dtls1_do_w
; Line 354
	sub	ecx, edi
$LN21@dtls1_do_w:
; Line 364
	mov	edi, DWORD PTR [esi+68]
; Line 370
	mov	eax, 2147483647				; 7fffffffH
	cmp	edi, ecx
	cmova	edi, ecx
	cmp	edi, 2147483647				; 7fffffffH
	cmova	edi, eax
; Line 376
	cmp	ebx, 22					; 00000016H
	jne	SHORT $LN25@dtls1_do_w
; Line 377
	cmp	edi, 12					; 0000000cH
	jb	$LN20@dtls1_do_w
; Line 1349
	mov	DWORD PTR [edx+620], ebp
; Line 384
	lea	eax, DWORD PTR [edi-12]
; Line 1350
	mov	DWORD PTR [edx+624], eax
; Line 387
	mov	eax, DWORD PTR [esi+60]
; Line 1355
	mov	ecx, DWORD PTR [esi+92]
; Line 387
	mov	edx, DWORD PTR [eax+4]
	add	edx, DWORD PTR [esi+72]
; Line 1355
	add	ecx, 608				; 00000260H
; Line 1357
	movzx	eax, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
; Line 1358
	movzx	eax, BYTE PTR [ecx+6]
	mov	BYTE PTR [edx+1], al
	movzx	eax, BYTE PTR [ecx+5]
	mov	BYTE PTR [edx+2], al
	movzx	eax, BYTE PTR [ecx+4]
	mov	BYTE PTR [edx+3], al
; Line 1360
	movzx	eax, BYTE PTR [ecx+9]
	mov	BYTE PTR [edx+4], al
	movzx	eax, BYTE PTR [ecx+8]
	mov	BYTE PTR [edx+5], al
; Line 1361
	movzx	eax, BYTE PTR [ecx+14]
	mov	BYTE PTR [edx+6], al
	movzx	eax, BYTE PTR [ecx+13]
	mov	BYTE PTR [edx+7], al
	movzx	eax, BYTE PTR [ecx+12]
	mov	BYTE PTR [edx+8], al
; Line 1362
	movzx	eax, BYTE PTR [ecx+18]
	mov	BYTE PTR [edx+9], al
	movzx	eax, BYTE PTR [ecx+17]
	mov	BYTE PTR [edx+10], al
	movzx	eax, BYTE PTR [ecx+16]
	mov	BYTE PTR [edx+11], al
$LN25@dtls1_do_w:
; Line 392
	mov	eax, DWORD PTR [esi+60]
	push	edi
	mov	eax, DWORD PTR [eax+4]
	add	eax, DWORD PTR [esi+72]
	push	eax
	push	ebx
	push	esi
	call	_dtls1_write_bytes
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 394
	test	ebx, ebx
	jns	SHORT $LN27@dtls1_do_w
; Line 401
	cmp	DWORD PTR _retry$1$[esp+28], 0
	je	$LN20@dtls1_do_w
	push	0
	push	0
	push	43					; 0000002bH
	push	esi
	call	_SSL_get_wbio
	add	esp, 4
	push	eax
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	$LN20@dtls1_do_w
; Line 403
	push	0
	push	0
	push	32					; 00000020H
	push	esi
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, 4096				; 00001000H
	jne	$LN20@dtls1_do_w
; Line 404
	push	esi
	call	_dtls1_query_mtu
	add	esp, 4
	test	eax, eax
	je	$LN20@dtls1_do_w
; Line 407
	mov	DWORD PTR _retry$1$[esp+28], 0
; Line 413
	jmp	$LN54@dtls1_do_w
$LN27@dtls1_do_w:
; Line 419
	cmp	edi, ebx
	je	SHORT $LN45@dtls1_do_w
	push	OFFSET ??_C@_0BJ@DFLCCFFN@len?5?$DN?$DN?5?$CIunsigned?5int?$CJret?$AA@
	push	419					; 000001a3H
	push	OFFSET ??_C@_0BA@CHFBCHML@?4?2ssl?2d1_both?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN45@dtls1_do_w:
; Line 421
	mov	edi, DWORD PTR _type$[esp+24]
	cmp	edi, 22					; 00000016H
	jne	$LN34@dtls1_do_w
	mov	edx, DWORD PTR [esi+92]
	cmp	DWORD PTR [edx+740], 0
	jne	$LN34@dtls1_do_w
; Line 426
	mov	eax, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR [esi+72]
; Line 431
	test	ebp, ebp
	jne	SHORT $LN35@dtls1_do_w
	cmp	DWORD PTR [esi], 256			; 00000100H
	je	SHORT $LN35@dtls1_do_w
; Line 436
	movzx	eax, BYTE PTR [edx+608]
	mov	BYTE PTR [ecx], al
; Line 437
	movzx	eax, BYTE PTR [edx+614]
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [edx+613]
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [edx+612]
	mov	BYTE PTR [ecx+3], al
; Line 438
	movzx	eax, BYTE PTR [edx+617]
	mov	BYTE PTR [ecx+4], al
	movzx	eax, BYTE PTR [edx+616]
	mov	BYTE PTR [ecx+5], al
; Line 439
	mov	WORD PTR [ecx+6], bp
	mov	BYTE PTR [ecx+8], 0
; Line 440
	movzx	eax, BYTE PTR [edx+614]
	mov	BYTE PTR [ecx+9], al
	movzx	eax, BYTE PTR [edx+613]
	mov	BYTE PTR [ecx+10], al
	movzx	eax, BYTE PTR [edx+612]
	mov	BYTE PTR [ecx+11], al
; Line 442
	mov	eax, ebx
; Line 443
	jmp	SHORT $LN36@dtls1_do_w
$LN35@dtls1_do_w:
; Line 444
	add	ecx, 12					; 0000000cH
; Line 445
	lea	eax, DWORD PTR [ebx-12]
$LN36@dtls1_do_w:
; Line 448
	push	eax
	push	ecx
	push	esi
	call	_ssl3_finish_mac
	add	esp, 12					; 0000000cH
$LN34@dtls1_do_w:
; Line 451
	mov	eax, DWORD PTR [esi+68]
	cmp	ebx, eax
	je	SHORT $LN61@dtls1_do_w
; Line 462
	add	DWORD PTR [esi+72], ebx
; Line 463
	sub	eax, ebx
	mov	DWORD PTR [esi+68], eax
; Line 465
	add	ebp, -12				; fffffff4H
; Line 1347
	mov	eax, DWORD PTR [esi+92]
; Line 465
	add	ebp, ebx
; Line 1349
	mov	DWORD PTR [eax+620], ebp
; Line 1350
	mov	DWORD PTR [eax+624], 0
$LN54@dtls1_do_w:
; Line 301
	cmp	DWORD PTR [esi+68], 0
	jle	SHORT $LN3@dtls1_do_w
	mov	ebx, DWORD PTR _type$[esp+24]
	mov	edi, DWORD PTR _blocksize$1$[esp+28]
	jmp	$LL2@dtls1_do_w
$LN61@dtls1_do_w:
; Line 452
	mov	ecx, DWORD PTR [esi+100]
	test	ecx, ecx
	je	SHORT $LN38@dtls1_do_w
; Line 453
	push	DWORD PTR [esi+104]
	add	eax, DWORD PTR [esi+72]
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+60]
	push	DWORD PTR [eax+4]
	push	edi
	push	DWORD PTR [esi]
	push	1
	call	ecx
	add	esp, 28					; 0000001cH
$LN38@dtls1_do_w:
; Line 457
	pop	ebp
	pop	edi
	pop	ebx
	mov	DWORD PTR [esi+72], 0
; Line 460
	mov	eax, 1
	mov	DWORD PTR [esi+68], 0
	pop	esi
; Line 477
	add	esp, 12					; 0000000cH
	ret	0
$LN20@dtls1_do_w:
	pop	ebp
	pop	edi
	pop	ebx
; Line 357
	or	eax, -1
	pop	esi
; Line 477
	add	esp, 12					; 0000000cH
	ret	0
$LN58@dtls1_do_w:
	pop	ebp
	pop	edi
	pop	ebx
; Line 349
	mov	DWORD PTR [esi+24], 2
	pop	esi
; Line 477
	add	esp, 12					; 0000000cH
	ret	0
$LN3@dtls1_do_w:
	pop	ebp
	pop	edi
	pop	ebx
; Line 476
	xor	eax, eax
	pop	esi
; Line 477
	add	esp, 12					; 0000000cH
	ret	0
_dtls1_do_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 838
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
