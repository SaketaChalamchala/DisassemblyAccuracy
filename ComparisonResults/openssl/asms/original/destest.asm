; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\des\destest.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@	; `string'
_BSS	SEGMENT
?bnum@?1??pt@@9@9 DD 01H DUP (?)			; `pt'::`2'::bnum
_BSS	ENDS
;	COMDAT ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
CONST	SEGMENT
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ DB '0123456789ABCDEF', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_key_data DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	030H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	07cH
	DB	0a1H
	DB	010H
	DB	045H
	DB	04aH
	DB	01aH
	DB	06eH
	DB	057H
	DB	01H
	DB	031H
	DB	0d9H
	DB	061H
	DB	09dH
	DB	0c1H
	DB	037H
	DB	06eH
	DB	07H
	DB	0a1H
	DB	013H
	DB	03eH
	DB	04aH
	DB	0bH
	DB	026H
	DB	086H
	DB	038H
	DB	049H
	DB	067H
	DB	04cH
	DB	026H
	DB	02H
	DB	031H
	DB	09eH
	DB	04H
	DB	0b9H
	DB	015H
	DB	0baH
	DB	043H
	DB	0feH
	DB	0b5H
	DB	0b6H
	DB	01H
	DB	013H
	DB	0b9H
	DB	070H
	DB	0fdH
	DB	034H
	DB	0f2H
	DB	0ceH
	DB	01H
	DB	070H
	DB	0f1H
	DB	075H
	DB	046H
	DB	08fH
	DB	0b5H
	DB	0e6H
	DB	043H
	DB	029H
	DB	07fH
	DB	0adH
	DB	038H
	DB	0e3H
	DB	073H
	DB	0feH
	DB	07H
	DB	0a7H
	DB	013H
	DB	070H
	DB	045H
	DB	0daH
	DB	02aH
	DB	016H
	DB	04H
	DB	068H
	DB	091H
	DB	04H
	DB	0c2H
	DB	0fdH
	DB	03bH
	DB	02fH
	DB	037H
	DB	0d0H
	DB	06bH
	DB	0b5H
	DB	016H
	DB	0cbH
	DB	075H
	DB	046H
	DB	01fH
	DB	08H
	DB	026H
	DB	0dH
	DB	01aH
	DB	0c2H
	DB	046H
	DB	05eH
	DB	058H
	DB	040H
	DB	023H
	DB	064H
	DB	01aH
	DB	0baH
	DB	061H
	DB	076H
	DB	02H
	DB	058H
	DB	016H
	DB	016H
	DB	046H
	DB	029H
	DB	0b0H
	DB	07H
	DB	049H
	DB	079H
	DB	03eH
	DB	0bcH
	DB	079H
	DB	0b3H
	DB	025H
	DB	08fH
	DB	04fH
	DB	0b0H
	DB	05eH
	DB	015H
	DB	015H
	DB	0abH
	DB	073H
	DB	0a7H
	DB	049H
	DB	0e9H
	DB	05dH
	DB	06dH
	DB	04cH
	DB	0a2H
	DB	029H
	DB	0bfH
	DB	01H
	DB	083H
	DB	010H
	DB	0dcH
	DB	040H
	DB	09bH
	DB	026H
	DB	0d6H
	DB	01cH
	DB	058H
	DB	07fH
	DB	01cH
	DB	013H
	DB	092H
	DB	04fH
	DB	0efH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01fH
	DB	01fH
	DB	01fH
	DB	01fH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0e0H
	DB	0feH
	DB	0e0H
	DB	0feH
	DB	0f1H
	DB	0feH
	DB	0f1H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_plain_data DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	0a1H
	DB	0d6H
	DB	0d0H
	DB	039H
	DB	077H
	DB	067H
	DB	042H
	DB	05cH
	DB	0d5H
	DB	04cH
	DB	0a8H
	DB	03dH
	DB	0efH
	DB	057H
	DB	0daH
	DB	02H
	DB	048H
	DB	0d4H
	DB	038H
	DB	06H
	DB	0f6H
	DB	071H
	DB	072H
	DB	051H
	DB	045H
	DB	04bH
	DB	058H
	DB	02dH
	DB	0dfH
	DB	044H
	DB	0aH
	DB	042H
	DB	0fdH
	DB	044H
	DB	030H
	DB	059H
	DB	057H
	DB	07fH
	DB	0a2H
	DB	05H
	DB	09bH
	DB	05eH
	DB	08H
	DB	051H
	DB	0cfH
	DB	014H
	DB	03aH
	DB	07H
	DB	056H
	DB	0d8H
	DB	0e0H
	DB	077H
	DB	047H
	DB	061H
	DB	0d2H
	DB	076H
	DB	025H
	DB	014H
	DB	0b8H
	DB	029H
	DB	0bfH
	DB	048H
	DB	06aH
	DB	03bH
	DB	0ddH
	DB	011H
	DB	090H
	DB	049H
	DB	037H
	DB	028H
	DB	02H
	DB	026H
	DB	095H
	DB	05fH
	DB	068H
	DB	035H
	DB	0afH
	DB	060H
	DB	09aH
	DB	016H
	DB	04dH
	DB	05eH
	DB	040H
	DB	04fH
	DB	027H
	DB	052H
	DB	032H
	DB	06bH
	DB	05H
	DB	06eH
	DB	018H
	DB	075H
	DB	09fH
	DB	05cH
	DB	0caH
	DB	00H
	DB	04bH
	DB	0d6H
	DB	0efH
	DB	09H
	DB	017H
	DB	060H
	DB	062H
	DB	048H
	DB	0dH
	DB	039H
	DB	00H
	DB	06eH
	DB	0e7H
	DB	062H
	DB	0f2H
	DB	043H
	DB	075H
	DB	040H
	DB	0c8H
	DB	069H
	DB	08fH
	DB	03cH
	DB	0faH
	DB	07H
	DB	02dH
	DB	043H
	DB	0a0H
	DB	077H
	DB	07H
	DB	052H
	DB	092H
	DB	02H
	DB	0feH
	DB	055H
	DB	077H
	DB	081H
	DB	017H
	DB	0f1H
	DB	02aH
	DB	01dH
	DB	09dH
	DB	05cH
	DB	050H
	DB	018H
	DB	0f7H
	DB	028H
	DB	0c2H
	DB	030H
	DB	055H
	DB	032H
	DB	028H
	DB	06dH
	DB	06fH
	DB	029H
	DB	05aH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_cipher_data DB	08cH
	DB	0a6H
	DB	04dH
	DB	0e9H
	DB	0c1H
	DB	0b1H
	DB	023H
	DB	0a7H
	DB	073H
	DB	059H
	DB	0b2H
	DB	016H
	DB	03eH
	DB	04eH
	DB	0dcH
	DB	058H
	DB	095H
	DB	08eH
	DB	06eH
	DB	062H
	DB	07aH
	DB	05H
	DB	055H
	DB	07bH
	DB	0f4H
	DB	03H
	DB	079H
	DB	0abH
	DB	09eH
	DB	0eH
	DB	0c5H
	DB	033H
	DB	017H
	DB	066H
	DB	08dH
	DB	0fcH
	DB	072H
	DB	092H
	DB	053H
	DB	02dH
	DB	08aH
	DB	05aH
	DB	0e1H
	DB	0f8H
	DB	01aH
	DB	0b8H
	DB	0f2H
	DB	0ddH
	DB	08cH
	DB	0a6H
	DB	04dH
	DB	0e9H
	DB	0c1H
	DB	0b1H
	DB	023H
	DB	0a7H
	DB	0edH
	DB	039H
	DB	0d9H
	DB	050H
	DB	0faH
	DB	074H
	DB	0bcH
	DB	0c4H
	DB	069H
	DB	0fH
	DB	05bH
	DB	0dH
	DB	09aH
	DB	026H
	DB	093H
	DB	09bH
	DB	07aH
	DB	038H
	DB	09dH
	DB	010H
	DB	035H
	DB	04bH
	DB	0d2H
	DB	071H
	DB	086H
	DB	08eH
	DB	0bbH
	DB	051H
	DB	0caH
	DB	0b4H
	DB	059H
	DB	09aH
	DB	071H
	DB	078H
	DB	087H
	DB	06eH
	DB	01H
	DB	0f1H
	DB	09bH
	DB	02aH
	DB	0afH
	DB	037H
	DB	0fbH
	DB	042H
	DB	01fH
	DB	08cH
	DB	040H
	DB	095H
	DB	086H
	DB	0a5H
	DB	060H
	DB	0f1H
	DB	0eH
	DB	0c6H
	DB	0d8H
	DB	05bH
	DB	0cH
	DB	0d3H
	DB	0daH
	DB	02H
	DB	00H
	DB	021H
	DB	0dcH
	DB	09H
	DB	0eaH
	DB	067H
	DB	06bH
	DB	02cH
	DB	0b7H
	DB	0dbH
	DB	02bH
	DB	07aH
	DB	0dfH
	DB	0d6H
	DB	04aH
	DB	081H
	DB	05cH
	DB	0afH
	DB	01aH
	DB	0fH
	DB	05cH
	DB	051H
	DB	03cH
	DB	09cH
	DB	048H
	DB	086H
	DB	0c0H
	DB	088H
	DB	0aH
	DB	02aH
	DB	0eeH
	DB	0aeH
	DB	03fH
	DB	0f4H
	DB	0abH
	DB	077H
	DB	0efH
	DB	01bH
	DB	0f0H
	DB	03eH
	DB	05dH
	DB	0faH
	DB	057H
	DB	05aH
	DB	088H
	DB	0bfH
	DB	0dH
	DB	0b6H
	DB	0d7H
	DB	0dH
	DB	0eeH
	DB	056H
	DB	0a1H
	DB	0f9H
	DB	091H
	DB	055H
	DB	041H
	DB	02H
	DB	0bH
	DB	056H
	DB	06fH
	DB	0bfH
	DB	01cH
	DB	0afH
	DB	0cfH
	DB	0fdH
	DB	05H
	DB	056H
	DB	02fH
	DB	022H
	DB	0e4H
	DB	09bH
	DB	0abH
	DB	07cH
	DB	0a1H
	DB	0acH
	DB	05aH
	DB	06bH
	DB	061H
	DB	02cH
	DB	0c2H
	DB	06cH
	DB	0ceH
	DB	04aH
	DB	05fH
	DB	04cH
	DB	03H
	DB	08eH
	DB	0d1H
	DB	02bH
	DB	02eH
	DB	041H
	DB	063H
	DB	0faH
	DB	0c0H
	DB	0d0H
	DB	034H
	DB	0d9H
	DB	0f7H
	DB	093H
	DB	061H
	DB	07bH
	DB	03aH
	DB	0cH
	DB	0e8H
	DB	0f0H
	DB	071H
	DB	00H
	DB	0dbH
	DB	095H
	DB	086H
	DB	05H
	DB	0f8H
	DB	0c8H
	DB	0c6H
	DB	06H
	DB	0edH
	DB	0bfH
	DB	0d1H
	DB	0c6H
	DB	06cH
	DB	029H
	DB	0ccH
	DB	0c7H
	DB	035H
	DB	055H
	DB	050H
	DB	0b2H
	DB	015H
	DB	0eH
	DB	024H
	DB	051H
	DB	0caH
	DB	0aaH
	DB	0afH
	DB	04dH
	DB	0eaH
	DB	0f1H
	DB	0dbH
	DB	0aeH
	DB	0d5H
	DB	0d4H
	DB	04fH
	DB	0f7H
	DB	020H
	DB	068H
	DB	03dH
	DB	0dH
	DB	02aH
	DB	02bH
	DB	0b0H
	DB	08H
	DB	0dfH
	DB	097H
	DB	0c2H
	DB	0f2H
_cipher_ecb2 DB	092H
	DB	095H
	DB	0b5H
	DB	09bH
	DB	0b3H
	DB	084H
	DB	073H
	DB	06eH
	DB	019H
	DB	09eH
	DB	09dH
	DB	06dH
	DB	0f3H
	DB	09aH
	DB	0a8H
	DB	016H
	DB	02aH
	DB	04bH
	DB	04dH
	DB	024H
	DB	052H
	DB	043H
	DB	084H
	DB	027H
	DB	035H
	DB	084H
	DB	03cH
	DB	01H
	DB	09dH
	DB	018H
	DB	0c5H
	DB	0b6H
	DB	04aH
	DB	05bH
	DB	02fH
	DB	042H
	DB	0aaH
	DB	077H
	DB	019H
	DB	025H
	DB	0a0H
	DB	06bH
	DB	0a9H
	DB	0b8H
	DB	0caH
	DB	05bH
	DB	017H
	DB	08aH
	DB	0abH
	DB	09dH
	DB	0b7H
	DB	0fbH
	DB	0edH
	DB	095H
	DB	0f2H
	DB	074H
	DB	03dH
	DB	025H
	DB	06cH
	DB	023H
	DB	0a7H
	DB	025H
	DB	02fH
	DB	0d6H
	DB	0b7H
	DB	06fH
	DB	0abH
	DB	04fH
	DB	0bdH
	DB	0bdH
	DB	0b7H
	DB	067H
	DB	08fH
	DB	068H
	DB	027H
	DB	0d6H
	DB	09cH
	DB	0f4H
	DB	01aH
	DB	010H
	DB	082H
	DB	057H
	DB	0a1H
	DB	0d6H
	DB	050H
	DB	05eH
	DB	081H
	DB	085H
	DB	0a2H
	DB	0fH
	DB	0aH
	DB	0cdH
	DB	080H
	DB	089H
	DB	07dH
	DB	0faH
	DB	0cdH
	DB	02aH
	DB	053H
	DB	03aH
	DB	0dbH
	DB	0dH
	DB	07eH
	DB	0f3H
	DB	0d2H
	DB	0c2H
	DB	0beH
	DB	027H
	DB	0e8H
	DB	01bH
	DB	068H
	DB	0e3H
	DB	0e9H
	DB	024H
	DB	0cfH
	DB	04fH
	DB	089H
	DB	03cH
	DB	05bH
	DB	0aH
	DB	0a7H
	DB	018H
	DB	0c3H
	DB	09fH
	DB	0faH
	DB	09fH
	DB	0d7H
	DB	069H
	DB	077H
	DB	02cH
	DB	079H
	DB	0b1H
	DB	0d2H
	DB	031H
	DB	07eH
	DB	0b1H
	DB	049H
	DB	0abH
	DB	092H
	DB	07fH
	DB	0d0H
	DB	022H
	DB	00H
	DB	0b7H
	DB	0ceH
	DB	01cH
	DB	06cH
	DB	07dH
	DB	085H
	DB	0e3H
	DB	04aH
	DB	06fH
	DB	0beH
	DB	091H
	DB	0d6H
	DB	0e1H
	DB	027H
	DB	0b2H
	DB	0e9H
	DB	087H
	DB	070H
	DB	028H
	DB	0aeH
	DB	08fH
	DB	0d1H
	DB	0f5H
	DB	074H
	DB	01aH
	DB	0aaH
	DB	037H
	DB	080H
	DB	0bbH
	DB	0f3H
	DB	022H
	DB	01dH
	DB	0deH
	DB	0a6H
	DB	0c4H
	DB	0d2H
	DB	05eH
	DB	028H
	DB	093H
	DB	0acH
	DB	0b3H
	DB	022H
	DB	07H
	DB	081H
	DB	05aH
	DB	0e4H
	DB	0b7H
	DB	01aH
	DB	0adH
	DB	0dcH
	DB	0ceH
	DB	05H
	DB	0e7H
	DB	07H
	DB	0bdH
	DB	0f5H
	DB	084H
	DB	026H
	DB	01dH
	DB	039H
	DB	02cH
	DB	0b3H
	DB	0baH
	DB	0a5H
	DB	085H
	DB	0b4H
	DB	0f7H
	DB	0fH
	DB	072H
	DB	0fbH
	DB	04H
	DB	0f0H
	DB	0dcH
	DB	095H
	DB	0baH
	DB	0a9H
	DB	04eH
	DB	087H
	DB	036H
	DB	0f2H
	DB	089H
	DB	0d4H
	DB	07H
	DB	03aH
	DB	0f1H
	DB	05aH
	DB	017H
	DB	082H
	DB	0eH
	DB	0efH
	DB	06fH
	DB	0afH
	DB	0a7H
	DB	066H
	DB	01aH
	DB	07eH
	DB	089H
	DB	0c1H
	DB	097H
	DB	0f5H
	DB	058H
	DB	074H
	DB	08aH
	DB	020H
	DB	0e7H
	DB	043H
	DB	034H
	DB	0cfH
	DB	0daH
	DB	022H
	DB	0c4H
	DB	086H
	DB	0c8H
	DB	08H
	DB	0d7H
	DB	0b4H
	DB	0fbH
	DB	062H
	DB	09dH
	DB	08H
	DB	085H
_cbc_key DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
_cbc2_key DB	0f1H
	DB	0e0H
	DB	0d3H
	DB	0c2H
	DB	0b5H
	DB	0a4H
	DB	097H
	DB	086H
_cbc3_key DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_cbc_iv	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_cbc_data DB	037H
	DB	036H
	DB	035H
	DB	034H
	DB	033H
	DB	032H
	DB	031H
	DB	020H
	DB	04eH
	DB	06fH
	DB	077H
	DB	020H
	DB	069H
	DB	073H
	DB	020H
	DB	074H
	DB	068H
	DB	065H
	DB	020H
	DB	074H
	DB	069H
	DB	06dH
	DB	065H
	DB	020H
	DB	066H
	DB	06fH
	DB	072H
	DB	020H
	DB	00H
	DB	031H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_cbc_ok	DB	0ccH
	DB	0d1H
	DB	073H
	DB	0ffH
	DB	0abH
	DB	020H
	DB	039H
	DB	0f4H
	DB	0acH
	DB	0d8H
	DB	0aeH
	DB	0fdH
	DB	0dfH
	DB	0d8H
	DB	0a1H
	DB	0ebH
	DB	046H
	DB	08eH
	DB	091H
	DB	015H
	DB	078H
	DB	088H
	DB	0baH
	DB	068H
	DB	01dH
	DB	026H
	DB	093H
	DB	097H
	DB	0f7H
	DB	0feH
	DB	062H
	DB	0b4H
_xcbc_ok DB	084H
	DB	06bH
	DB	029H
	DB	014H
	DB	085H
	DB	01eH
	DB	09aH
	DB	029H
	DB	054H
	DB	073H
	DB	02fH
	DB	08aH
	DB	0a0H
	DB	0a6H
	DB	011H
	DB	0c1H
	DB	015H
	DB	0cdH
	DB	0c2H
	DB	0d7H
	DB	095H
	DB	01bH
	DB	010H
	DB	053H
	DB	0a6H
	DB	03cH
	DB	05eH
	DB	03H
	DB	0b2H
	DB	01aH
	DB	0a3H
	DB	0c4H
_cbc3_ok DB	03fH
	DB	0e3H
	DB	01H
	DB	0c9H
	DB	062H
	DB	0acH
	DB	01H
	DB	0d0H
	DB	022H
	DB	013H
	DB	076H
	DB	03cH
	DB	01cH
	DB	0bdH
	DB	04cH
	DB	0dcH
	DB	079H
	DB	096H
	DB	057H
	DB	0c0H
	DB	064H
	DB	0ecH
	DB	0f5H
	DB	0d4H
	DB	01cH
	DB	067H
	DB	038H
	DB	012H
	DB	0cfH
	DB	0deH
	DB	096H
	DB	075H
_pcbc_ok DB	0ccH
	DB	0d1H
	DB	073H
	DB	0ffH
	DB	0abH
	DB	020H
	DB	039H
	DB	0f4H
	DB	06dH
	DB	0ecH
	DB	0b4H
	DB	070H
	DB	0a0H
	DB	0e5H
	DB	06bH
	DB	015H
	DB	0aeH
	DB	0a6H
	DB	0bfH
	DB	061H
	DB	0edH
	DB	07dH
	DB	09cH
	DB	09fH
	DB	0f7H
	DB	017H
	DB	046H
	DB	03bH
	DB	08aH
	DB	0b3H
	DB	0ccH
	DB	088H
_cfb_key DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
_cfb_iv	DB	012H
	DB	034H
	DB	056H
	DB	078H
	DB	090H
	DB	0abH
	DB	0cdH
	DB	0efH
_plain	DB	04eH
	DB	06fH
	DB	077H
	DB	020H
	DB	069H
	DB	073H
	DB	020H
	DB	074H
	DB	068H
	DB	065H
	DB	020H
	DB	074H
	DB	069H
	DB	06dH
	DB	065H
	DB	020H
	DB	066H
	DB	06fH
	DB	072H
	DB	020H
	DB	061H
	DB	06cH
	DB	06cH
	DB	020H
_cfb_cipher8 DB	0f3H
	DB	01fH
	DB	0daH
	DB	07H
	DB	01H
	DB	014H
	DB	062H
	DB	0eeH
	DB	018H
	DB	07fH
	DB	043H
	DB	0d8H
	DB	0aH
	DB	07cH
	DB	0d9H
	DB	0b5H
	DB	0b0H
	DB	0d2H
	DB	090H
	DB	0daH
	DB	06eH
	DB	05bH
	DB	09aH
	DB	087H
_cfb_cipher16 DB 0f3H
	DB	09H
	DB	087H
	DB	087H
	DB	07fH
	DB	057H
	DB	0f7H
	DB	03cH
	DB	036H
	DB	0b6H
	DB	0dbH
	DB	070H
	DB	0d8H
	DB	0d5H
	DB	034H
	DB	019H
	DB	0d3H
	DB	086H
	DB	0b2H
	DB	023H
	DB	0b7H
	DB	0b2H
	DB	0adH
	DB	01bH
_cfb_cipher32 DB 0f3H
	DB	09H
	DB	062H
	DB	049H
	DB	0a4H
	DB	0dfH
	DB	0a4H
	DB	09fH
	DB	033H
	DB	0dcH
	DB	07bH
	DB	0adH
	DB	04cH
	DB	0c8H
	DB	09fH
	DB	064H
	DB	0e4H
	DB	053H
	DB	0e5H
	DB	0ecH
	DB	067H
	DB	020H
	DB	0daH
	DB	0b6H
_cfb_cipher48 DB 0f3H
	DB	09H
	DB	062H
	DB	049H
	DB	0c7H
	DB	0f4H
	DB	030H
	DB	0b5H
	DB	015H
	DB	0ecH
	DB	0bbH
	DB	085H
	DB	097H
	DB	05aH
	DB	013H
	DB	08cH
	DB	068H
	DB	060H
	DB	0e2H
	DB	038H
	DB	034H
	DB	03cH
	DB	0dcH
	DB	01fH
_cfb_cipher64 DB 0f3H
	DB	09H
	DB	062H
	DB	049H
	DB	0c7H
	DB	0f4H
	DB	06eH
	DB	051H
	DB	0a6H
	DB	09eH
	DB	083H
	DB	09bH
	DB	01aH
	DB	092H
	DB	0f7H
	DB	084H
	DB	03H
	DB	046H
	DB	071H
	DB	033H
	DB	089H
	DB	08eH
	DB	0a6H
	DB	022H
_ofb_key DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
_ofb_iv	DB	012H
	DB	034H
	DB	056H
	DB	078H
	DB	090H
	DB	0abH
	DB	0cdH
	DB	0efH
_ofb_cipher DB	0f3H
	DB	09H
	DB	062H
	DB	049H
	DB	0c7H
	DB	0f4H
	DB	06eH
	DB	051H
	DB	035H
	DB	0f2H
	DB	04aH
	DB	024H
	DB	02eH
	DB	0ebH
	DB	03dH
	DB	03fH
	DB	03dH
	DB	06dH
	DB	05bH
	DB	0e3H
	DB	025H
	DB	05aH
	DB	0f8H
	DB	0c3H
_cbc_cksum_ret DD 0f7fe62b4H
_cbc_cksum_data DB 01dH
	DB	026H
	DB	093H
	DB	097H
	DB	0f7H
	DB	0feH
	DB	062H
	DB	0b4H
?f@?1??pt@@9@9 DD FLAT:??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ ; `pt'::`2'::f
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	??_C@_0M@CGECIDJO@Doing?5cbcm?6?$AA@		; `string'
PUBLIC	??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_0CF@EOPEHPKH@des_ede3_cbcm_encrypt?5decrypt?5er@ ; `string'
PUBLIC	??_C@_05HAJCMBLP@?5?$CF02x?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0L@GHOENOLM@Doing?5ecb?6?$AA@		; `string'
PUBLIC	??_C@_0CM@PNADKCIK@Encryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@ ; `string'
PUBLIC	??_C@_0CM@ELBDDMPO@Decryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@ ; `string'
PUBLIC	??_C@_0P@JJNPGNNI@Doing?5ede?5ecb?6?$AA@	; `string'
PUBLIC	??_C@_0L@FBNKCGEO@Doing?5cbc?6?$AA@		; `string'
PUBLIC	??_C@_0BL@ENGNDMBA@cbc_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@LLKONMBF@cbc_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@DILKOGHA@Doing?5desx?5cbc?6?$AA@	; `string'
PUBLIC	??_C@_0CA@GBALBNCG@des_xcbc_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@JHMIPNCD@des_xcbc_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0P@KPOBJFCK@Doing?5ede?5cbc?6?$AA@	; `string'
PUBLIC	??_C@_0CE@CAOELNMN@des_ede3_cbc_encrypt?5encrypt?5err@ ; `string'
PUBLIC	??_C@_0CE@NGCHFNMI@des_ede3_cbc_encrypt?5decrypt?5err@ ; `string'
PUBLIC	??_C@_0M@CMECJAHE@Doing?5pcbc?6?$AA@		; `string'
PUBLIC	??_C@_0BM@JHPICMHK@pcbc_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@GBDLMMHP@pcbc_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_06LMLCKAGP@Doing?5?$AA@			; `string'
PUBLIC	??_C@_05PIPMAOEH@cfb8?5?$AA@			; `string'
PUBLIC	??_C@_06BIGHJMNH@cfb16?5?$AA@			; `string'
PUBLIC	??_C@_06LFGHPMIA@cfb32?5?$AA@			; `string'
PUBLIC	??_C@_06CFCHEBOP@cfb48?5?$AA@			; `string'
PUBLIC	??_C@_06IGDEHAAA@cfb64?5?$AA@			; `string'
PUBLIC	??_C@_08DHKJIGCK@cfb64?$CI?$CJ?5?$AA@		; `string'
PUBLIC	??_C@_0CB@DIFHJHEH@cfb_encrypt?5small?5encrypt?5error?6@ ; `string'
PUBLIC	??_C@_0CB@MOJEHHEC@cfb_encrypt?5small?5decrypt?5error?6@ ; `string'
PUBLIC	??_C@_0N@IPMAANID@ede_cfb64?$CI?$CJ?5?$AA@	; `string'
PUBLIC	??_C@_05KJDAJCPN@done?6?$AA@			; `string'
PUBLIC	??_C@_0L@BKIKDGCP@Doing?5ofb?6?$AA@		; `string'
PUBLIC	??_C@_0BL@GBLBIHAP@ofb_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@ ; `string'
PUBLIC	??_C@_0BL@JHHCGHAK@ofb_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0N@LONGFFKB@Doing?5ofb64?6?$AA@		; `string'
PUBLIC	??_C@_0BN@PJCOFOFD@ofb64_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@PONLOFG@ofb64_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@JIFPGEDD@Doing?5ede_ofb64?6?$AA@	; `string'
PUBLIC	??_C@_0CB@DKNPBPLA@ede_ofb64_encrypt?5encrypt?5error?6@ ; `string'
PUBLIC	??_C@_0CB@MMBMPPLF@ede_ofb64_encrypt?5decrypt?5error?6@ ; `string'
PUBLIC	??_C@_0BB@MCJMICMJ@Doing?5cbc_cksum?6?$AA@	; `string'
PUBLIC	??_C@_0CL@CFELGHMP@bad?5return?5value?5?$CI?$CF08lX?$CJ?0?5should@ ; `string'
PUBLIC	??_C@_0BO@HCLPHCCD@bad?5cbc_cksum?5block?5returned?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@IOJHPNND@Doing?5quad_cksum?6?$AA@	; `string'
PUBLIC	??_C@_0DA@EEKLLMOF@quad_cksum?5error?0?5ret?5?$CF08lx?5shou@ ; `string'
PUBLIC	??_C@_0CN@EIGFGFGM@quad_cksum?5error?0?5out?$FL0?$FN?5?$CF08lx?5i@ ; `string'
PUBLIC	??_C@_0CN@NDBGIPLI@quad_cksum?5error?0?5out?$FL1?$FN?5?$CF08lx?5i@ ; `string'
PUBLIC	??_C@_0CN@KFPDLGIF@quad_cksum?5error?0?5out?$FL2?$FN?5?$CF08lx?5i@ ; `string'
PUBLIC	??_C@_0CN@DOIAFMFB@quad_cksum?5error?0?5out?$FL3?$FN?5?$CF08lx?5i@ ; `string'
PUBLIC	??_C@_0BK@FNPGJHML@input?5word?5alignment?5test?$AA@ ; `string'
PUBLIC	??_C@_03EBJOKFHF@?5?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BM@EDCGFDOP@?6output?5word?5alignment?5test?$AA@ ; `string'
PUBLIC	??_C@_0BB@LIDJPHCB@fast?5crypt?5test?5?$AA@	; `string'
PUBLIC	??_C@_02HNAFODAH@ef?$AA@			; `string'
PUBLIC	??_C@_07MEHGEGBN@testing?$AA@			; `string'
PUBLIC	??_C@_0O@FKJDIODP@efGnQx2725bI2?$AA@		; `string'
PUBLIC	??_C@_0CO@OLOJAAKD@fast?5crypt?5error?0?5?$CFs?5should?5be?5e@ ; `string'
PUBLIC	??_C@_02LCPMALHG@yA?$AA@			; `string'
PUBLIC	??_C@_08NLHGPDCH@bca76?$DL23?$AA@		; `string'
PUBLIC	??_C@_0O@EHGJAHEA@yA1Rp?11hZXIJk?$AA@		; `string'
PUBLIC	??_C@_0CO@CLEOJGIH@fast?5crypt?5error?0?5?$CFs?5should?5be?5y@ ; `string'
PUBLIC	??_C@_0BL@MCHCDKMA@cfb_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BL@DELBNKMF@cfb_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@GPMJLNNK@ede_cfb_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@JJAKFNNP@ede_cfb_encrypt?5decrypt?5error?6?$AA@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_DES_ecb3_encrypt:PROC
EXTRN	_DES_cbc_cksum:PROC
EXTRN	_DES_ncbc_encrypt:PROC
EXTRN	_DES_xcbc_encrypt:PROC
EXTRN	_DES_cfb_encrypt:PROC
EXTRN	_DES_ecb_encrypt:PROC
EXTRN	_DES_ede3_cbc_encrypt:PROC
EXTRN	_DES_ede3_cbcm_encrypt:PROC
EXTRN	_DES_ede3_cfb64_encrypt:PROC
EXTRN	_DES_ede3_ofb64_encrypt:PROC
EXTRN	_DES_crypt:PROC
EXTRN	_DES_ofb_encrypt:PROC
EXTRN	_DES_pcbc_encrypt:PROC
EXTRN	_DES_quad_cksum:PROC
EXTRN	_DES_set_key_checked:PROC
EXTRN	_DES_set_key_unchecked:PROC
EXTRN	_DES_cfb64_encrypt:PROC
EXTRN	_DES_ofb64_encrypt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_cfb_buf1 DB	028H DUP (?)
_cfb_buf2 DB	028H DUP (?)
_cfb_tmp DB	08H DUP (?)
_ofb_buf1 DB	018H DUP (?)
_ofb_buf2 DB	018H DUP (?)
_ofb_tmp DB	08H DUP (?)
?bufs@?1??pt@@9@9 DB 0c8H DUP (?)			; `pt'::`2'::bufs
_BSS	ENDS
;	COMDAT ??_C@_0BP@JJAKFNNP@ede_cfb_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BP@JJAKFNNP@ede_cfb_encrypt?5decrypt?5error?6?$AA@ DB 'ede_cfb_enc'
	DB	'rypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GPMJLNNK@ede_cfb_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BP@GPMJLNNK@ede_cfb_encrypt?5encrypt?5error?6?$AA@ DB 'ede_cfb_enc'
	DB	'rypt encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DELBNKMF@cfb_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BL@DELBNKMF@cfb_encrypt?5decrypt?5error?6?$AA@ DB 'cfb_encrypt dec'
	DB	'rypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MCHCDKMA@cfb_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BL@MCHCDKMA@cfb_encrypt?5encrypt?5error?6?$AA@ DB 'cfb_encrypt enc'
	DB	'rypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CLEOJGIH@fast?5crypt?5error?0?5?$CFs?5should?5be?5y@
CONST	SEGMENT
??_C@_0CO@CLEOJGIH@fast?5crypt?5error?0?5?$CFs?5should?5be?5y@ DB 'fast c'
	DB	'rypt error, %s should be yA1Rp/1hZXIJk', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHGJAHEA@yA1Rp?11hZXIJk?$AA@
CONST	SEGMENT
??_C@_0O@EHGJAHEA@yA1Rp?11hZXIJk?$AA@ DB 'yA1Rp/1hZXIJk', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHGPDCH@bca76?$DL23?$AA@
CONST	SEGMENT
??_C@_08NLHGPDCH@bca76?$DL23?$AA@ DB 'bca76;23', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCPMALHG@yA?$AA@
CONST	SEGMENT
??_C@_02LCPMALHG@yA?$AA@ DB 'yA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@OLOJAAKD@fast?5crypt?5error?0?5?$CFs?5should?5be?5e@
CONST	SEGMENT
??_C@_0CO@OLOJAAKD@fast?5crypt?5error?0?5?$CFs?5should?5be?5e@ DB 'fast c'
	DB	'rypt error, %s should be efGnQx2725bI2', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FKJDIODP@efGnQx2725bI2?$AA@
CONST	SEGMENT
??_C@_0O@FKJDIODP@efGnQx2725bI2?$AA@ DB 'efGnQx2725bI2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEHGEGBN@testing?$AA@
CONST	SEGMENT
??_C@_07MEHGEGBN@testing?$AA@ DB 'testing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HNAFODAH@ef?$AA@
CONST	SEGMENT
??_C@_02HNAFODAH@ef?$AA@ DB 'ef', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LIDJPHCB@fast?5crypt?5test?5?$AA@
CONST	SEGMENT
??_C@_0BB@LIDJPHCB@fast?5crypt?5test?5?$AA@ DB 'fast crypt test ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EDCGFDOP@?6output?5word?5alignment?5test?$AA@
CONST	SEGMENT
??_C@_0BM@EDCGFDOP@?6output?5word?5alignment?5test?$AA@ DB 0aH, 'output w'
	DB	'ord alignment test', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EBJOKFHF@?5?$CFd?$AA@
CONST	SEGMENT
??_C@_03EBJOKFHF@?5?$CFd?$AA@ DB ' %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FNPGJHML@input?5word?5alignment?5test?$AA@
CONST	SEGMENT
??_C@_0BK@FNPGJHML@input?5word?5alignment?5test?$AA@ DB 'input word align'
	DB	'ment test', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DOIAFMFB@quad_cksum?5error?0?5out?$FL3?$FN?5?$CF08lx?5i@
CONST	SEGMENT
??_C@_0CN@DOIAFMFB@quad_cksum?5error?0?5out?$FL3?$FN?5?$CF08lx?5i@ DB 'qu'
	DB	'ad_cksum error, out[3] %08lx is not %08lx', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KFPDLGIF@quad_cksum?5error?0?5out?$FL2?$FN?5?$CF08lx?5i@
CONST	SEGMENT
??_C@_0CN@KFPDLGIF@quad_cksum?5error?0?5out?$FL2?$FN?5?$CF08lx?5i@ DB 'qu'
	DB	'ad_cksum error, out[2] %08lx is not %08lx', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NDBGIPLI@quad_cksum?5error?0?5out?$FL1?$FN?5?$CF08lx?5i@
CONST	SEGMENT
??_C@_0CN@NDBGIPLI@quad_cksum?5error?0?5out?$FL1?$FN?5?$CF08lx?5i@ DB 'qu'
	DB	'ad_cksum error, out[1] %08lx is not %08lx', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EIGFGFGM@quad_cksum?5error?0?5out?$FL0?$FN?5?$CF08lx?5i@
CONST	SEGMENT
??_C@_0CN@EIGFGFGM@quad_cksum?5error?0?5out?$FL0?$FN?5?$CF08lx?5i@ DB 'qu'
	DB	'ad_cksum error, out[0] %08lx is not %08lx', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EEKLLMOF@quad_cksum?5error?0?5ret?5?$CF08lx?5shou@
CONST	SEGMENT
??_C@_0DA@EEKLLMOF@quad_cksum?5error?0?5ret?5?$CF08lx?5shou@ DB 'quad_cks'
	DB	'um error, ret %08lx should be 70d7a63a', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IOJHPNND@Doing?5quad_cksum?6?$AA@
CONST	SEGMENT
??_C@_0BC@IOJHPNND@Doing?5quad_cksum?6?$AA@ DB 'Doing quad_cksum', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HCLPHCCD@bad?5cbc_cksum?5block?5returned?6?$AA@
CONST	SEGMENT
??_C@_0BO@HCLPHCCD@bad?5cbc_cksum?5block?5returned?6?$AA@ DB 'bad cbc_cks'
	DB	'um block returned', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CFELGHMP@bad?5return?5value?5?$CI?$CF08lX?$CJ?0?5should@
CONST	SEGMENT
??_C@_0CL@CFELGHMP@bad?5return?5value?5?$CI?$CF08lX?$CJ?0?5should@ DB 'ba'
	DB	'd return value (%08lX), should be %08lX', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MCJMICMJ@Doing?5cbc_cksum?6?$AA@
CONST	SEGMENT
??_C@_0BB@MCJMICMJ@Doing?5cbc_cksum?6?$AA@ DB 'Doing cbc_cksum', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MMBMPPLF@ede_ofb64_encrypt?5decrypt?5error?6@
CONST	SEGMENT
??_C@_0CB@MMBMPPLF@ede_ofb64_encrypt?5decrypt?5error?6@ DB 'ede_ofb64_enc'
	DB	'rypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DKNPBPLA@ede_ofb64_encrypt?5encrypt?5error?6@
CONST	SEGMENT
??_C@_0CB@DKNPBPLA@ede_ofb64_encrypt?5encrypt?5error?6@ DB 'ede_ofb64_enc'
	DB	'rypt encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JIFPGEDD@Doing?5ede_ofb64?6?$AA@
CONST	SEGMENT
??_C@_0BB@JIFPGEDD@Doing?5ede_ofb64?6?$AA@ DB 'Doing ede_ofb64', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PONLOFG@ofb64_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BN@PONLOFG@ofb64_encrypt?5decrypt?5error?6?$AA@ DB 'ofb64_encrypt '
	DB	'decrypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PJCOFOFD@ofb64_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BN@PJCOFOFD@ofb64_encrypt?5encrypt?5error?6?$AA@ DB 'ofb64_encrypt'
	DB	' encrypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LONGFFKB@Doing?5ofb64?6?$AA@
CONST	SEGMENT
??_C@_0N@LONGFFKB@Doing?5ofb64?6?$AA@ DB 'Doing ofb64', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JHHCGHAK@ofb_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BL@JHHCGHAK@ofb_encrypt?5decrypt?5error?6?$AA@ DB 'ofb_encrypt dec'
	DB	'rypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@
CONST	SEGMENT
??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@ DB '%'
	DB	'02X %02X %02X %02X %02X %02X %02X %02X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GBLBIHAP@ofb_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BL@GBLBIHAP@ofb_encrypt?5encrypt?5error?6?$AA@ DB 'ofb_encrypt enc'
	DB	'rypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BKIKDGCP@Doing?5ofb?6?$AA@
CONST	SEGMENT
??_C@_0L@BKIKDGCP@Doing?5ofb?6?$AA@ DB 'Doing ofb', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJDAJCPN@done?6?$AA@
CONST	SEGMENT
??_C@_05KJDAJCPN@done?6?$AA@ DB 'done', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IPMAANID@ede_cfb64?$CI?$CJ?5?$AA@
CONST	SEGMENT
??_C@_0N@IPMAANID@ede_cfb64?$CI?$CJ?5?$AA@ DB 'ede_cfb64() ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MOJEHHEC@cfb_encrypt?5small?5decrypt?5error?6@
CONST	SEGMENT
??_C@_0CB@MOJEHHEC@cfb_encrypt?5small?5decrypt?5error?6@ DB 'cfb_encrypt '
	DB	'small decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DIFHJHEH@cfb_encrypt?5small?5encrypt?5error?6@
CONST	SEGMENT
??_C@_0CB@DIFHJHEH@cfb_encrypt?5small?5encrypt?5error?6@ DB 'cfb_encrypt '
	DB	'small encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHKJIGCK@cfb64?$CI?$CJ?5?$AA@
CONST	SEGMENT
??_C@_08DHKJIGCK@cfb64?$CI?$CJ?5?$AA@ DB 'cfb64() ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGDEHAAA@cfb64?5?$AA@
CONST	SEGMENT
??_C@_06IGDEHAAA@cfb64?5?$AA@ DB 'cfb64 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFCHEBOP@cfb48?5?$AA@
CONST	SEGMENT
??_C@_06CFCHEBOP@cfb48?5?$AA@ DB 'cfb48 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFGHPMIA@cfb32?5?$AA@
CONST	SEGMENT
??_C@_06LFGHPMIA@cfb32?5?$AA@ DB 'cfb32 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIGHJMNH@cfb16?5?$AA@
CONST	SEGMENT
??_C@_06BIGHJMNH@cfb16?5?$AA@ DB 'cfb16 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PIPMAOEH@cfb8?5?$AA@
CONST	SEGMENT
??_C@_05PIPMAOEH@cfb8?5?$AA@ DB 'cfb8 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMLCKAGP@Doing?5?$AA@
CONST	SEGMENT
??_C@_06LMLCKAGP@Doing?5?$AA@ DB 'Doing ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GBDLMMHP@pcbc_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BM@GBDLMMHP@pcbc_encrypt?5decrypt?5error?6?$AA@ DB 'pcbc_encrypt d'
	DB	'ecrypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JHPICMHK@pcbc_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BM@JHPICMHK@pcbc_encrypt?5encrypt?5error?6?$AA@ DB 'pcbc_encrypt e'
	DB	'ncrypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CMECJAHE@Doing?5pcbc?6?$AA@
CONST	SEGMENT
??_C@_0M@CMECJAHE@Doing?5pcbc?6?$AA@ DB 'Doing pcbc', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NGCHFNMI@des_ede3_cbc_encrypt?5decrypt?5err@
CONST	SEGMENT
??_C@_0CE@NGCHFNMI@des_ede3_cbc_encrypt?5decrypt?5err@ DB 'des_ede3_cbc_e'
	DB	'ncrypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CAOELNMN@des_ede3_cbc_encrypt?5encrypt?5err@
CONST	SEGMENT
??_C@_0CE@CAOELNMN@des_ede3_cbc_encrypt?5encrypt?5err@ DB 'des_ede3_cbc_e'
	DB	'ncrypt encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPOBJFCK@Doing?5ede?5cbc?6?$AA@
CONST	SEGMENT
??_C@_0P@KPOBJFCK@Doing?5ede?5cbc?6?$AA@ DB 'Doing ede cbc', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JHMIPNCD@des_xcbc_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0CA@JHMIPNCD@des_xcbc_encrypt?5decrypt?5error?6?$AA@ DB 'des_xcbc_e'
	DB	'ncrypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GBALBNCG@des_xcbc_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0CA@GBALBNCG@des_xcbc_encrypt?5encrypt?5error?6?$AA@ DB 'des_xcbc_e'
	DB	'ncrypt encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DILKOGHA@Doing?5desx?5cbc?6?$AA@
CONST	SEGMENT
??_C@_0BA@DILKOGHA@Doing?5desx?5cbc?6?$AA@ DB 'Doing desx cbc', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LLKONMBF@cbc_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BL@LLKONMBF@cbc_encrypt?5decrypt?5error?6?$AA@ DB 'cbc_encrypt dec'
	DB	'rypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ENGNDMBA@cbc_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BL@ENGNDMBA@cbc_encrypt?5encrypt?5error?6?$AA@ DB 'cbc_encrypt enc'
	DB	'rypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBNKCGEO@Doing?5cbc?6?$AA@
CONST	SEGMENT
??_C@_0L@FBNKCGEO@Doing?5cbc?6?$AA@ DB 'Doing cbc', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJNPGNNI@Doing?5ede?5ecb?6?$AA@
CONST	SEGMENT
??_C@_0P@JJNPGNNI@Doing?5ede?5ecb?6?$AA@ DB 'Doing ede ecb', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ELBDDMPO@Decryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@
CONST	SEGMENT
??_C@_0CM@ELBDDMPO@Decryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@ DB 'D'
	DB	'ecryption error %2d', 0aH, 'k=%s p=%s o=%s act=%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PNADKCIK@Encryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@
CONST	SEGMENT
??_C@_0CM@PNADKCIK@Encryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@ DB 'E'
	DB	'ncryption error %2d', 0aH, 'k=%s p=%s o=%s act=%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHOENOLM@Doing?5ecb?6?$AA@
CONST	SEGMENT
??_C@_0L@GHOENOLM@Doing?5ecb?6?$AA@ DB 'Doing ecb', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
CONST	SEGMENT
??_C@_05HAJCMBLP@?5?$CF02x?$AA@ DB ' %02x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EOPEHPKH@des_ede3_cbcm_encrypt?5decrypt?5er@
CONST	SEGMENT
??_C@_0CF@EOPEHPKH@des_ede3_cbcm_encrypt?5decrypt?5er@ DB 'des_ede3_cbcm_'
	DB	'encrypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@ DB 'Key error %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CGECIDJO@Doing?5cbcm?6?$AA@
CONST	SEGMENT
??_C@_0M@CGECIDJO@Doing?5cbcm?6?$AA@ DB 'Doing cbcm', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
_num$ = -540						; size = 4
tv656 = -536						; size = 4
tv550 = -536						; size = 4
_ks$ = -532						; size = 128
_ks2$ = -404						; size = 128
_ks3$ = -276						; size = 128
_lqret$ = -148						; size = 16
_iv3$ = -132						; size = 8
_in$ = -124						; size = 8
_out$ = -116						; size = 8
_outin$ = -108						; size = 8
_cbc_out$ = -100					; size = 40
_cbc_in$ = -60						; size = 40
_iv2$ = -20						; size = 8
_cret$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\destest.c
; Line 362
	mov	eax, 540				; 0000021cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+540], eax
	push	ebx
	push	esi
	push	edi
; Line 383
	push	OFFSET ??_C@_0M@CGECIDJO@Doing?5cbcm?6?$AA@
	xor	edi, edi
	call	_printf
; Line 384
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _cbc_key
	call	_DES_set_key_checked
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN44@main
; Line 385
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 386
	mov	edi, 1
$LN44@main:
; Line 388
	lea	eax, DWORD PTR _ks2$[esp+552]
	push	eax
	push	OFFSET _cbc2_key
	call	_DES_set_key_checked
	add	esp, 8
	test	eax, eax
	je	SHORT $LN45@main
; Line 389
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 390
	mov	edi, 1
$LN45@main:
; Line 392
	lea	eax, DWORD PTR _ks3$[esp+552]
	push	eax
	push	OFFSET _cbc3_key
	call	_DES_set_key_checked
	add	esp, 8
	test	eax, eax
	je	SHORT $LN46@main
; Line 393
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 394
	mov	edi, 1
$LN46@main:
; Line 398
	xorps	xmm0, xmm0
	mov	ecx, OFFSET _cbc_data
	movups	XMMWORD PTR _cbc_out$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_out$[esp+568], xmm0
	lea	edx, DWORD PTR [ecx+1]
	movq	QWORD PTR _cbc_out$[esp+584], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+568], xmm0
	movq	QWORD PTR _cbc_in$[esp+584], xmm0
$LL140@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL140@main
; Line 400
	mov	eax, DWORD PTR _cbc_iv
	sub	ecx, edx
	mov	DWORD PTR _iv3$[esp+552], eax
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv3$[esp+556], eax
; Line 403
	lea	eax, DWORD PTR _iv2$[esp+552]
	push	1
	push	eax
	lea	eax, DWORD PTR _iv3$[esp+560]
	movq	QWORD PTR _iv2$[esp+560], xmm0
	push	eax
	lea	eax, DWORD PTR _ks3$[esp+564]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+568]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+572]
	push	eax
	push	16					; 00000010H
	lea	eax, DWORD PTR _cbc_out$[esp+580]
	push	eax
	push	OFFSET _cbc_data
	lea	ebx, DWORD PTR [ecx+1]
	call	_DES_ede3_cbcm_encrypt
; Line 405
	push	1
	lea	eax, DWORD PTR _iv2$[esp+592]
	push	eax
	lea	eax, DWORD PTR _iv3$[esp+596]
	push	eax
	lea	eax, DWORD PTR _ks3$[esp+600]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+604]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+608]
	push	eax
	lea	eax, DWORD PTR [ebx-16]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+632]
	push	eax
	push	OFFSET _cbc_data+16
	call	_DES_ede3_cbcm_encrypt
; Line 414
	mov	eax, DWORD PTR _cbc_iv
	add	esp, 72					; 00000048H
	mov	DWORD PTR _iv3$[esp+552], eax
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv3$[esp+556], eax
; Line 416
	lea	eax, DWORD PTR _iv2$[esp+552]
	push	0
	push	eax
	lea	eax, DWORD PTR _iv3$[esp+560]
	movq	QWORD PTR _iv2$[esp+560], xmm0
	push	eax
	lea	eax, DWORD PTR _ks3$[esp+564]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+568]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+572]
	push	eax
	push	ebx
	lea	eax, DWORD PTR _cbc_in$[esp+580]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+584]
	push	eax
	call	_DES_ede3_cbcm_encrypt
; Line 418
	mov	esi, OFFSET _cbc_data
	add	esp, 36					; 00000024H
	lea	ecx, DWORD PTR [esi+1]
	npad	4
$LL141@main:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL141@main
	sub	esi, ecx
	mov	edx, OFFSET _cbc_data
	inc	esi
	lea	ecx, DWORD PTR _cbc_in$[esp+552]
	sub	esi, 4
	jb	SHORT $LN144@main
	npad	5
$LL145@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN143@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL145@main
$LN144@main:
	cmp	esi, -4					; fffffffcH
	je	SHORT $LN142@main
$LN143@main:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN146@main
	cmp	esi, -3					; fffffffdH
	je	SHORT $LN142@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN146@main
	cmp	esi, -2					; fffffffeH
	je	SHORT $LN142@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN146@main
	cmp	esi, -1
	je	SHORT $LN142@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN142@main
$LN146@main:
	sbb	eax, eax
	or	eax, 1
	jmp	SHORT $LN147@main
$LN142@main:
	xor	eax, eax
$LN147@main:
	test	eax, eax
	je	SHORT $LN47@main
; Line 421
	push	OFFSET ??_C@_0CF@EOPEHPKH@des_ede3_cbcm_encrypt?5decrypt?5er@
	call	_printf
	add	esp, 4
; Line 422
	xor	esi, esi
	test	ebx, ebx
	je	SHORT $LN3@main
$LL4@main:
; Line 423
	movzx	eax, BYTE PTR _cbc_data[esi]
	push	eax
	push	OFFSET ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, ebx
	jb	SHORT $LL4@main
$LN3@main:
; Line 424
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 425
	xor	esi, esi
	test	ebx, ebx
	je	SHORT $LN6@main
$LL7@main:
; Line 426
	movzx	eax, BYTE PTR _cbc_in$[esp+esi+552]
	push	eax
	push	OFFSET ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, ebx
	jb	SHORT $LL7@main
$LN6@main:
; Line 427
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 428
	mov	edi, 1
$LN47@main:
; Line 432
	push	ebp
	push	OFFSET ??_C@_0L@GHOENOLM@Doing?5ecb?6?$AA@
	call	_printf
	add	esp, 4
	mov	DWORD PTR tv656[esp+556], 34		; 00000022H
	mov	ebp, 1
; Line 433
	xor	ebx, ebx
	npad	6
$LL10@main:
; Line 434
	lea	ecx, DWORD PTR _ks$[esp+556]
	lea	eax, DWORD PTR _key_data[ebx]
	push	ecx
	push	eax
	call	_DES_set_key_unchecked
; Line 435
	mov	eax, DWORD PTR _plain_data[ebx]
	xorps	xmm0, xmm0
	mov	DWORD PTR _in$[esp+564], eax
	mov	eax, DWORD PTR _plain_data[ebx+4]
	mov	DWORD PTR _in$[esp+568], eax
; Line 438
	lea	eax, DWORD PTR _ks$[esp+564]
	push	1
	push	eax
	lea	eax, DWORD PTR _out$[esp+572]
	movq	QWORD PTR _out$[esp+572], xmm0
	push	eax
	lea	eax, DWORD PTR _in$[esp+576]
	movq	QWORD PTR _outin$[esp+576], xmm0
	push	eax
	call	_DES_ecb_encrypt
; Line 439
	push	0
	lea	eax, DWORD PTR _ks$[esp+584]
	push	eax
	lea	eax, DWORD PTR _outin$[esp+588]
	push	eax
	lea	eax, DWORD PTR _out$[esp+592]
	push	eax
	call	_DES_ecb_encrypt
; Line 441
	lea	ecx, DWORD PTR _out$[esp+596]
	add	esp, 40					; 00000028H
	mov	eax, DWORD PTR [ecx]
	lea	esi, DWORD PTR _cipher_data[ebx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN148@main
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN48@main
$LN148@main:
; Line 442
	lea	eax, DWORD PTR _out$[esp+556]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	push	esi
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _in$[esp+564]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _key_data[ebx]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	push	ebp
	push	OFFSET ??_C@_0CM@PNADKCIK@Encryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@
	call	_printf
	add	esp, 24					; 00000018H
; Line 445
	mov	edi, 1
$LN48@main:
; Line 447
	lea	ecx, DWORD PTR _in$[esp+556]
	mov	esi, 4
	lea	edx, DWORD PTR _outin$[esp+556]
$LL151@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN150@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL151@main
	xor	eax, eax
	jmp	SHORT $LN153@main
$LN150@main:
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN152@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN152@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN152@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN152@main
	xor	eax, eax
	jmp	SHORT $LN153@main
$LN152@main:
	sbb	eax, eax
	or	eax, 1
$LN153@main:
	test	eax, eax
	je	SHORT $LN8@main
; Line 448
	lea	eax, DWORD PTR _outin$[esp+556]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _in$[esp+560]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _out$[esp+564]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _key_data[ebx]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	push	ebp
	push	OFFSET ??_C@_0CM@ELBDDMPO@Decryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@
	call	_printf
	add	esp, 24					; 00000018H
; Line 450
	mov	edi, 1
$LN8@main:
; Line 433
	add	ebx, 8
	inc	ebp
	sub	DWORD PTR tv656[esp+556], 1
	jne	$LL10@main
; Line 455
	push	OFFSET ??_C@_0P@JJNPGNNI@Doing?5ede?5ecb?6?$AA@
	call	_printf
	add	esp, 4
	mov	DWORD PTR tv550[esp+556], 32		; 00000020H
	mov	ebx, 1
; Line 456
	xor	ebp, ebp
	npad	9
$LL13@main:
; Line 457
	lea	ecx, DWORD PTR _ks$[esp+556]
	lea	eax, DWORD PTR _key_data[ebp]
	push	ecx
	push	eax
	call	_DES_set_key_unchecked
; Line 458
	lea	eax, DWORD PTR _ks2$[esp+564]
	push	eax
	lea	esi, DWORD PTR _key_data[ebp+16]
	lea	eax, DWORD PTR [esi-8]
	push	eax
	call	_DES_set_key_unchecked
; Line 459
	lea	eax, DWORD PTR _ks3$[esp+572]
	push	eax
	push	esi
	call	_DES_set_key_unchecked
; Line 460
	mov	eax, DWORD PTR _plain_data[ebp]
	xorps	xmm0, xmm0
	mov	DWORD PTR _in$[esp+580], eax
	mov	eax, DWORD PTR _plain_data[ebp+4]
	mov	DWORD PTR _in$[esp+584], eax
; Line 463
	lea	eax, DWORD PTR _ks$[esp+580]
	push	1
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+588]
	movq	QWORD PTR _out$[esp+588], xmm0
	push	eax
	lea	eax, DWORD PTR _ks$[esp+592]
	movq	QWORD PTR _outin$[esp+592], xmm0
	push	eax
	lea	eax, DWORD PTR _out$[esp+596]
	push	eax
	lea	eax, DWORD PTR _in$[esp+600]
	push	eax
	call	_DES_ecb3_encrypt
; Line 464
	push	0
	lea	eax, DWORD PTR _ks$[esp+608]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+612]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+616]
	push	eax
	lea	eax, DWORD PTR _outin$[esp+620]
	push	eax
	lea	eax, DWORD PTR _out$[esp+624]
	push	eax
	call	_DES_ecb3_encrypt
; Line 466
	lea	ecx, DWORD PTR _out$[esp+628]
	add	esp, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	lea	esi, DWORD PTR _cipher_ecb2[ebp]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN154@main
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN249@main
$LN154@main:
; Line 467
	lea	eax, DWORD PTR _out$[esp+556]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	push	esi
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _in$[esp+564]
	push	eax
	call	_pt
	add	esp, 4
	lea	esi, DWORD PTR _key_data[ebp]
	push	eax
	push	esi
	call	_pt
	add	esp, 4
	push	eax
	push	ebx
	push	OFFSET ??_C@_0CM@PNADKCIK@Encryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@
	call	_printf
	add	esp, 24					; 00000018H
; Line 470
	mov	edi, 1
	jmp	SHORT $LN50@main
$LN249@main:
	lea	esi, DWORD PTR _key_data[ebp]
$LN50@main:
; Line 472
	lea	ecx, DWORD PTR _in$[esp+556]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _outin$[esp+556]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN155@main
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN11@main
$LN155@main:
; Line 473
	lea	eax, DWORD PTR _outin$[esp+556]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _in$[esp+560]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _out$[esp+564]
	push	eax
	call	_pt
	add	esp, 4
	push	eax
	push	esi
	call	_pt
	add	esp, 4
	push	eax
	push	ebx
	push	OFFSET ??_C@_0CM@ELBDDMPO@Decryption?5error?5?$CF2d?6k?$DN?$CFs?5p?$DN?$CFs?5o@
	call	_printf
	add	esp, 24					; 00000018H
; Line 475
	mov	edi, 1
$LN11@main:
; Line 456
	add	ebp, 8
	inc	ebx
	sub	DWORD PTR tv550[esp+556], 1
	jne	$LL13@main
; Line 480
	push	OFFSET ??_C@_0L@FBNKCGEO@Doing?5cbc?6?$AA@
	call	_printf
; Line 481
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	push	OFFSET _cbc_key
	call	_DES_set_key_checked
	add	esp, 12					; 0000000cH
	pop	ebp
	test	eax, eax
	je	SHORT $LN52@main
; Line 482
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 483
	mov	edi, 1
$LN52@main:
; Line 487
	mov	eax, DWORD PTR _cbc_iv
	xorps	xmm0, xmm0
; Line 488
	mov	ecx, OFFSET _cbc_data
	mov	DWORD PTR _iv3$[esp+552], eax
	mov	eax, DWORD PTR _cbc_iv+4
	movups	XMMWORD PTR _cbc_out$[esp+552], xmm0
	mov	DWORD PTR _iv3$[esp+556], eax
	movups	XMMWORD PTR _cbc_out$[esp+568], xmm0
	lea	edx, DWORD PTR [ecx+1]
	movq	QWORD PTR _cbc_out$[esp+584], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+568], xmm0
	movq	QWORD PTR _cbc_in$[esp+584], xmm0
$LL156@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL156@main
	push	1
	lea	eax, DWORD PTR _iv3$[esp+556]
	sub	ecx, edx
	push	eax
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+568]
	push	eax
	push	OFFSET _cbc_data
	call	_DES_ncbc_encrypt
	add	esp, 24					; 00000018H
; Line 490
	lea	ecx, DWORD PTR _cbc_out$[esp+552]
	mov	edx, OFFSET _cbc_ok
	mov	esi, 28					; 0000001cH
$LL159@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN158@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL159@main
	jmp	SHORT $LN53@main
$LN158@main:
; Line 491
	push	OFFSET ??_C@_0BL@ENGNDMBA@cbc_encrypt?5encrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 492
	mov	edi, 1
$LN53@main:
; Line 495
	mov	eax, DWORD PTR _cbc_iv
; Line 496
	mov	ecx, OFFSET _cbc_data
	mov	DWORD PTR _iv3$[esp+552], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv3$[esp+556], eax
	lea	edx, DWORD PTR [ecx+1]
$LL160@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL160@main
	push	0
	lea	eax, DWORD PTR _iv3$[esp+556]
	sub	ecx, edx
	push	eax
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+568]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+572]
	push	eax
	call	_DES_ncbc_encrypt
; Line 498
	mov	ecx, OFFSET _cbc_data
	add	esp, 24					; 00000018H
	lea	edx, DWORD PTR [ecx+1]
$LL161@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL161@main
	sub	ecx, edx
	mov	esi, OFFSET _cbc_data
	lea	edx, DWORD PTR _cbc_in$[esp+552]
	sub	ecx, 4
	jb	SHORT $LN164@main
	npad	3
$LL165@main:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN163@main
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL165@main
$LN164@main:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN162@main
$LN163@main:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN166@main
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN162@main
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN166@main
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN162@main
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN166@main
	cmp	ecx, -1
	je	SHORT $LN162@main
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	je	SHORT $LN162@main
$LN166@main:
; Line 499
	push	OFFSET ??_C@_0BL@LLKONMBF@cbc_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 500
	mov	edi, 1
$LN162@main:
; Line 503
	push	OFFSET ??_C@_0BA@DILKOGHA@Doing?5desx?5cbc?6?$AA@
	call	_printf
; Line 504
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _cbc_key
	call	_DES_set_key_checked
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN55@main
; Line 505
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 506
	mov	edi, 1
$LN55@main:
; Line 510
	mov	eax, DWORD PTR _cbc_iv
	xorps	xmm0, xmm0
; Line 511
	mov	ecx, OFFSET _cbc_data
	mov	DWORD PTR _iv3$[esp+552], eax
	mov	eax, DWORD PTR _cbc_iv+4
	movups	XMMWORD PTR _cbc_out$[esp+552], xmm0
	mov	DWORD PTR _iv3$[esp+556], eax
	movups	XMMWORD PTR _cbc_out$[esp+568], xmm0
	lea	edx, DWORD PTR [ecx+1]
	movq	QWORD PTR _cbc_out$[esp+584], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+568], xmm0
	movq	QWORD PTR _cbc_in$[esp+584], xmm0
	npad	3
$LL167@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL167@main
	push	1
	push	OFFSET _cbc3_key
	push	OFFSET _cbc2_key
	lea	eax, DWORD PTR _iv3$[esp+564]
	sub	ecx, edx
	push	eax
	lea	eax, DWORD PTR _ks$[esp+568]
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+576]
	push	eax
	push	OFFSET _cbc_data
	call	_DES_xcbc_encrypt
	add	esp, 32					; 00000020H
; Line 513
	lea	ecx, DWORD PTR _cbc_out$[esp+552]
	mov	edx, OFFSET _xcbc_ok
	mov	esi, 28					; 0000001cH
	npad	4
$LL170@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN169@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL170@main
	jmp	SHORT $LN56@main
$LN169@main:
; Line 514
	push	OFFSET ??_C@_0CA@GBALBNCG@des_xcbc_encrypt?5encrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 515
	mov	edi, 1
$LN56@main:
; Line 517
	mov	eax, DWORD PTR _cbc_iv
; Line 518
	mov	ecx, OFFSET _cbc_data
	mov	DWORD PTR _iv3$[esp+552], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv3$[esp+556], eax
	lea	edx, DWORD PTR [ecx+1]
$LL171@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL171@main
	push	0
	push	OFFSET _cbc3_key
	push	OFFSET _cbc2_key
	lea	eax, DWORD PTR _iv3$[esp+564]
	sub	ecx, edx
	push	eax
	lea	eax, DWORD PTR _ks$[esp+568]
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+576]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+580]
	push	eax
	call	_DES_xcbc_encrypt
; Line 520
	mov	ecx, OFFSET _cbc_data
	add	esp, 32					; 00000020H
	lea	edx, DWORD PTR [ecx+1]
	npad	5
$LL172@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL172@main
	sub	ecx, edx
	mov	edx, OFFSET _cbc_data
	lea	esi, DWORD PTR [ecx+1]
	lea	ecx, DWORD PTR _cbc_in$[esp+552]
	sub	esi, 4
	jb	SHORT $LN175@main
	npad	3
$LL176@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN174@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL176@main
$LN175@main:
	cmp	esi, -4					; fffffffcH
	je	SHORT $LN173@main
$LN174@main:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN177@main
	cmp	esi, -3					; fffffffdH
	je	SHORT $LN173@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN177@main
	cmp	esi, -2					; fffffffeH
	je	SHORT $LN173@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN177@main
	cmp	esi, -1
	je	SHORT $LN173@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN173@main
$LN177@main:
	sbb	eax, eax
	or	eax, 1
	jmp	SHORT $LN178@main
$LN173@main:
	xor	eax, eax
$LN178@main:
	test	eax, eax
	je	SHORT $LN57@main
; Line 521
	push	OFFSET ??_C@_0CA@JHMIPNCD@des_xcbc_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 522
	mov	edi, 1
$LN57@main:
; Line 526
	push	OFFSET ??_C@_0P@KPOBJFCK@Doing?5ede?5cbc?6?$AA@
	call	_printf
; Line 527
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _cbc_key
	call	_DES_set_key_checked
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN58@main
; Line 528
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 529
	mov	edi, 1
$LN58@main:
; Line 531
	lea	eax, DWORD PTR _ks2$[esp+552]
	push	eax
	push	OFFSET _cbc2_key
	call	_DES_set_key_checked
	add	esp, 8
	test	eax, eax
	je	SHORT $LN59@main
; Line 532
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 533
	mov	edi, 1
$LN59@main:
; Line 535
	lea	eax, DWORD PTR _ks3$[esp+552]
	push	eax
	push	OFFSET _cbc3_key
	call	_DES_set_key_checked
	add	esp, 8
	test	eax, eax
	je	SHORT $LN60@main
; Line 536
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 537
	mov	edi, 1
$LN60@main:
; Line 541
	xorps	xmm0, xmm0
	mov	esi, OFFSET _cbc_data
	movups	XMMWORD PTR _cbc_out$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_out$[esp+568], xmm0
	lea	ecx, DWORD PTR [esi+1]
	movq	QWORD PTR _cbc_out$[esp+584], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+568], xmm0
	movq	QWORD PTR _cbc_in$[esp+584], xmm0
	npad	6
$LL179@main:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL179@main
; Line 543
	mov	eax, DWORD PTR _cbc_iv
	sub	esi, ecx
	mov	DWORD PTR _iv3$[esp+552], eax
	inc	esi
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv3$[esp+556], eax
; Line 545
	lea	eax, DWORD PTR _iv3$[esp+552]
	push	1
	push	eax
	lea	eax, DWORD PTR _ks3$[esp+560]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+564]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+568]
	push	eax
	push	16					; 00000010H
	lea	eax, DWORD PTR _cbc_out$[esp+576]
	push	eax
	push	OFFSET _cbc_data
	call	_DES_ede3_cbc_encrypt
; Line 547
	push	1
	lea	eax, DWORD PTR _iv3$[esp+588]
	push	eax
	lea	eax, DWORD PTR _ks3$[esp+592]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+596]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+600]
	push	eax
	lea	eax, DWORD PTR [esi-16]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+624]
	push	eax
	push	OFFSET _cbc_data+16
	call	_DES_ede3_cbc_encrypt
; Line 551
	mov	ecx, OFFSET _cbc_data
	add	esp, 64					; 00000040H
	lea	edx, DWORD PTR [ecx+1]
$LL180@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL180@main
	sub	ecx, edx
	mov	ebx, OFFSET _cbc3_ok
	add	ecx, 8
	lea	edx, DWORD PTR _cbc_out$[esp+552]
	and	ecx, -8					; fffffff8H
	sub	ecx, 4
	jb	SHORT $LN183@main
$LL184@main:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ebx]
	jne	SHORT $LN182@main
	add	edx, 4
	add	ebx, 4
	sub	ecx, 4
	jae	SHORT $LL184@main
$LN183@main:
	cmp	ecx, -4					; fffffffcH
	je	$LN181@main
$LN182@main:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [ebx]
	jne	SHORT $LN185@main
	cmp	ecx, -3					; fffffffdH
	je	$LN181@main
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [ebx+1]
	jne	SHORT $LN185@main
	cmp	ecx, -2					; fffffffeH
	je	$LN181@main
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [ebx+2]
	jne	SHORT $LN185@main
	cmp	ecx, -1
	je	$LN181@main
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [ebx+3]
	je	SHORT $LN181@main
$LN185@main:
; Line 554
	push	OFFSET ??_C@_0CE@CAOELNMN@des_ede3_cbc_encrypt?5encrypt?5err@
	call	_printf
	add	esp, 4
; Line 555
	xor	edi, edi
	test	esi, esi
	je	SHORT $LN15@main
	npad	5
$LL16@main:
; Line 556
	movzx	eax, BYTE PTR _cbc_out$[esp+edi+552]
	push	eax
	push	OFFSET ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
	call	_printf
	inc	edi
	add	esp, 8
	cmp	edi, esi
	jb	SHORT $LL16@main
$LN15@main:
; Line 557
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 558
	xor	edi, edi
	test	esi, esi
	je	SHORT $LN18@main
	npad	2
$LL19@main:
; Line 559
	movzx	eax, BYTE PTR _cbc3_ok[edi]
	push	eax
	push	OFFSET ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
	call	_printf
	inc	edi
	add	esp, 8
	cmp	edi, esi
	jb	SHORT $LL19@main
$LN18@main:
; Line 560
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 561
	mov	edi, 1
$LN181@main:
; Line 564
	mov	eax, DWORD PTR _cbc_iv
	mov	DWORD PTR _iv3$[esp+552], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv3$[esp+556], eax
; Line 565
	lea	eax, DWORD PTR _iv3$[esp+552]
	push	0
	push	eax
	lea	eax, DWORD PTR _ks3$[esp+560]
	push	eax
	lea	eax, DWORD PTR _ks2$[esp+564]
	push	eax
	lea	eax, DWORD PTR _ks$[esp+568]
	push	eax
	push	esi
	lea	eax, DWORD PTR _cbc_in$[esp+576]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+580]
	push	eax
	call	_DES_ede3_cbc_encrypt
; Line 566
	mov	ecx, OFFSET _cbc_data
	add	esp, 32					; 00000020H
	lea	edx, DWORD PTR [ecx+1]
$LL186@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL186@main
	sub	ecx, edx
	mov	edx, OFFSET _cbc_data
	lea	ebx, DWORD PTR [ecx+1]
	lea	ecx, DWORD PTR _cbc_in$[esp+552]
	sub	ebx, 4
	jb	SHORT $LN189@main
$LL190@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN188@main
	add	ecx, 4
	add	edx, 4
	sub	ebx, 4
	jae	SHORT $LL190@main
$LN189@main:
	cmp	ebx, -4					; fffffffcH
	je	SHORT $LN187@main
$LN188@main:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN191@main
	cmp	ebx, -3					; fffffffdH
	je	SHORT $LN187@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN191@main
	cmp	ebx, -2					; fffffffeH
	je	SHORT $LN187@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN191@main
	cmp	ebx, -1
	je	SHORT $LN187@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN187@main
$LN191@main:
	sbb	eax, eax
	or	eax, 1
	jmp	SHORT $LN192@main
$LN187@main:
	xor	eax, eax
$LN192@main:
	test	eax, eax
	je	$LN62@main
; Line 569
	push	OFFSET ??_C@_0CE@NGCHFNMI@des_ede3_cbc_encrypt?5decrypt?5err@
	call	_printf
	add	esp, 4
; Line 570
	xor	edi, edi
	test	esi, esi
	je	SHORT $LN21@main
	npad	8
$LL22@main:
; Line 571
	movzx	eax, BYTE PTR _cbc_data[edi]
	push	eax
	push	OFFSET ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
	call	_printf
	inc	edi
	add	esp, 8
	cmp	edi, esi
	jb	SHORT $LL22@main
$LN21@main:
; Line 572
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 573
	xor	edi, edi
	test	esi, esi
	je	SHORT $LN24@main
	npad	3
$LL25@main:
; Line 574
	movzx	eax, BYTE PTR _cbc_in$[esp+edi+552]
	push	eax
	push	OFFSET ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
	call	_printf
	inc	edi
	add	esp, 8
	cmp	edi, esi
	jb	SHORT $LL25@main
$LN24@main:
; Line 575
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 576
	mov	edi, 1
$LN62@main:
; Line 579
	push	OFFSET ??_C@_0M@CMECJAHE@Doing?5pcbc?6?$AA@
	call	_printf
; Line 580
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _cbc_key
	call	_DES_set_key_checked
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN63@main
; Line 581
	push	eax
	push	OFFSET ??_C@_0O@NDIAMOOJ@Key?5error?5?$CFd?6?$AA@
	call	_printf
	add	esp, 8
; Line 582
	mov	edi, 1
$LN63@main:
; Line 586
	xorps	xmm0, xmm0
	mov	ecx, OFFSET _cbc_data
	movups	XMMWORD PTR _cbc_out$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_out$[esp+568], xmm0
	lea	edx, DWORD PTR [ecx+1]
	movq	QWORD PTR _cbc_out$[esp+584], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+552], xmm0
	movups	XMMWORD PTR _cbc_in$[esp+568], xmm0
	movq	QWORD PTR _cbc_in$[esp+584], xmm0
	npad	3
$LL193@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL193@main
	push	1
	sub	ecx, edx
	lea	eax, DWORD PTR _ks$[esp+556]
	push	OFFSET _cbc_iv
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+568]
	push	eax
	push	OFFSET _cbc_data
	call	_DES_pcbc_encrypt
	add	esp, 24					; 00000018H
; Line 588
	lea	ecx, DWORD PTR _cbc_out$[esp+552]
	mov	edx, OFFSET _pcbc_ok
	mov	esi, 28					; 0000001cH
	npad	1
$LL196@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN195@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL196@main
	jmp	SHORT $LN64@main
$LN195@main:
; Line 589
	push	OFFSET ??_C@_0BM@JHPICMHK@pcbc_encrypt?5encrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 590
	mov	edi, 1
$LN64@main:
; Line 592
	mov	ecx, OFFSET _cbc_data
	lea	edx, DWORD PTR [ecx+1]
	npad	3
$LL197@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL197@main
	push	0
	sub	ecx, edx
	lea	eax, DWORD PTR _ks$[esp+556]
	push	OFFSET _cbc_iv
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+568]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+572]
	push	eax
	call	_DES_pcbc_encrypt
; Line 594
	mov	ecx, OFFSET _cbc_data
	add	esp, 24					; 00000018H
	lea	edx, DWORD PTR [ecx+1]
	npad	7
$LL198@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL198@main
	sub	ecx, edx
	mov	edx, OFFSET _cbc_data
	lea	esi, DWORD PTR [ecx+1]
	lea	ecx, DWORD PTR _cbc_in$[esp+552]
	sub	esi, 4
	jb	SHORT $LN201@main
	npad	3
$LL202@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN200@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL202@main
$LN201@main:
	cmp	esi, -4					; fffffffcH
	je	SHORT $LN199@main
$LN200@main:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN203@main
	cmp	esi, -3					; fffffffdH
	je	SHORT $LN199@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN203@main
	cmp	esi, -2					; fffffffeH
	je	SHORT $LN199@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN203@main
	cmp	esi, -1
	je	SHORT $LN199@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN199@main
$LN203@main:
; Line 595
	push	OFFSET ??_C@_0BM@GBDLMMHP@pcbc_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 596
	mov	edi, 1
$LN199@main:
; Line 599
	push	OFFSET ??_C@_06LMLCKAGP@Doing?5?$AA@
	call	_printf
; Line 600
	push	OFFSET ??_C@_05PIPMAOEH@cfb8?5?$AA@
	call	_printf
; Line 601
	push	OFFSET _cfb_cipher8
	push	8
	call	_cfb_test
; Line 602
	push	OFFSET ??_C@_06BIGHJMNH@cfb16?5?$AA@
	add	edi, eax
	call	_printf
; Line 603
	push	OFFSET _cfb_cipher16
	push	16					; 00000010H
	call	_cfb_test
; Line 604
	push	OFFSET ??_C@_06LFGHPMIA@cfb32?5?$AA@
	add	edi, eax
	call	_printf
; Line 605
	push	OFFSET _cfb_cipher32
	push	32					; 00000020H
	call	_cfb_test
; Line 606
	push	OFFSET ??_C@_06CFCHEBOP@cfb48?5?$AA@
	add	edi, eax
	call	_printf
; Line 607
	push	OFFSET _cfb_cipher48
	push	48					; 00000030H
	call	_cfb_test
; Line 608
	push	OFFSET ??_C@_06IGDEHAAA@cfb64?5?$AA@
	add	edi, eax
	call	_printf
; Line 609
	push	OFFSET _cfb_cipher64
	push	64					; 00000040H
	call	_cfb_test
	add	esp, 64					; 00000040H
	add	edi, eax
; Line 611
	push	OFFSET ??_C@_08DHKJIGCK@cfb64?$CI?$CJ?5?$AA@
	call	_printf
; Line 612
	push	OFFSET _cfb_cipher64
	call	_cfb64_test
	add	edi, eax
	add	esp, 8
; Line 614
	mov	eax, DWORD PTR _cfb_iv
; Line 615
	xor	esi, esi
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
	mov	DWORD PTR _cfb_tmp+4, eax
	npad	7
$LL28@main:
; Line 616
	push	1
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	push	1
	push	8
	lea	eax, DWORD PTR _cfb_buf1[esi]
	push	eax
	lea	eax, DWORD PTR _plain[esi]
	push	eax
	call	_DES_cfb_encrypt
	inc	esi
	add	esp, 28					; 0000001cH
	cmp	esi, 24					; 00000018H
	jb	SHORT $LL28@main
; Line 618
	mov	ecx, OFFSET _cfb_cipher8
	mov	edx, OFFSET _cfb_buf1
	mov	esi, 20					; 00000014H
	npad	5
$LL206@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN205@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL206@main
	jmp	SHORT $LN66@main
$LN205@main:
; Line 619
	push	OFFSET ??_C@_0CB@DIFHJHEH@cfb_encrypt?5small?5encrypt?5error?6@
	call	_printf
	add	esp, 4
; Line 620
	mov	edi, 1
$LN66@main:
; Line 623
	mov	eax, DWORD PTR _cfb_iv
; Line 624
	xor	esi, esi
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
	mov	DWORD PTR _cfb_tmp+4, eax
	npad	5
$LL31@main:
; Line 625
	push	0
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	push	1
	push	8
	lea	eax, DWORD PTR _cfb_buf2[esi]
	push	eax
	lea	eax, DWORD PTR _cfb_buf1[esi]
	push	eax
	call	_DES_cfb_encrypt
	inc	esi
	add	esp, 28					; 0000001cH
	cmp	esi, 24					; 00000018H
	jb	SHORT $LL31@main
; Line 627
	mov	ecx, OFFSET _plain
	mov	edx, OFFSET _cfb_buf2
	mov	esi, 20					; 00000014H
	npad	5
$LL209@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN208@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL209@main
	jmp	SHORT $LN67@main
$LN208@main:
; Line 628
	push	OFFSET ??_C@_0CB@MOJEHHEC@cfb_encrypt?5small?5decrypt?5error?6@
	call	_printf
	add	esp, 4
; Line 629
	mov	edi, 1
$LN67@main:
; Line 632
	push	OFFSET ??_C@_0N@IPMAANID@ede_cfb64?$CI?$CJ?5?$AA@
	call	_printf
; Line 633
	push	OFFSET _cfb_cipher64
	call	_ede_cfb64_test
; Line 635
	push	OFFSET ??_C@_05KJDAJCPN@done?6?$AA@
	add	edi, eax
	call	_printf
; Line 637
	push	OFFSET ??_C@_0L@BKIKDGCP@Doing?5ofb?6?$AA@
	call	_printf
; Line 638
	lea	eax, DWORD PTR _ks$[esp+568]
	push	eax
	push	OFFSET _ofb_key
	call	_DES_set_key_checked
; Line 639
	mov	eax, DWORD PTR _ofb_iv
	mov	DWORD PTR _ofb_tmp, eax
	mov	eax, DWORD PTR _ofb_iv+4
; Line 640
	push	OFFSET _ofb_tmp
	mov	DWORD PTR _ofb_tmp+4, eax
	lea	eax, DWORD PTR _ks$[esp+580]
	push	eax
	push	3
	push	64					; 00000040H
	push	OFFSET _ofb_buf1
	push	OFFSET _plain
	call	_DES_ofb_encrypt
	add	esp, 48					; 00000030H
; Line 641
	mov	ecx, OFFSET _ofb_cipher
	mov	edx, OFFSET _ofb_buf1
	mov	esi, 20					; 00000014H
$LL212@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN211@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL212@main
	xor	eax, eax
	jmp	SHORT $LN214@main
$LN211@main:
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN213@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN213@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN213@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN213@main
	xor	eax, eax
	jmp	SHORT $LN214@main
$LN213@main:
	sbb	eax, eax
	or	eax, 1
$LN214@main:
	test	eax, eax
	je	$LN68@main
; Line 642
	push	OFFSET ??_C@_0BL@GBLBIHAP@ofb_encrypt?5encrypt?5error?6?$AA@
	call	_printf
; Line 643
	movzx	eax, BYTE PTR _ofb_buf1+15
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+14
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+13
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+12
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+11
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+10
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+9
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+8
	push	eax
	push	OFFSET ??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@
	call	_printf
; Line 647
	movzx	eax, BYTE PTR _ofb_cipher+15
	push	eax
	movzx	eax, BYTE PTR _ofb_cipher+14
	push	eax
	movzx	eax, BYTE PTR _ofb_cipher+13
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+12
	push	eax
	movzx	eax, BYTE PTR _ofb_cipher+11
	push	eax
	movzx	eax, BYTE PTR _ofb_cipher+10
	push	eax
	movzx	eax, BYTE PTR _ofb_cipher+9
	push	eax
	movzx	eax, BYTE PTR _ofb_buf1+8
	push	eax
	push	OFFSET ??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@
	call	_printf
	add	esp, 76					; 0000004cH
; Line 651
	mov	edi, 1
$LN68@main:
; Line 653
	mov	eax, DWORD PTR _ofb_iv
	mov	DWORD PTR _ofb_tmp, eax
	mov	eax, DWORD PTR _ofb_iv+4
; Line 654
	push	OFFSET _ofb_tmp
	mov	DWORD PTR _ofb_tmp+4, eax
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	3
	push	64					; 00000040H
	push	OFFSET _ofb_buf2
	push	OFFSET _ofb_buf1
	call	_DES_ofb_encrypt
	add	esp, 24					; 00000018H
; Line 656
	mov	ecx, OFFSET _plain
	mov	edx, OFFSET _ofb_buf2
	mov	esi, 20					; 00000014H
	npad	4
$LL217@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN216@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL217@main
	xor	eax, eax
	jmp	SHORT $LN219@main
$LN216@main:
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN218@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN218@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN218@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN218@main
	xor	eax, eax
	jmp	SHORT $LN219@main
$LN218@main:
	sbb	eax, eax
	or	eax, 1
$LN219@main:
	test	eax, eax
	je	$LN69@main
; Line 657
	push	OFFSET ??_C@_0BL@JHHCGHAK@ofb_encrypt?5decrypt?5error?6?$AA@
	call	_printf
; Line 658
	movzx	eax, BYTE PTR _ofb_buf2+15
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+14
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+13
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+12
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+11
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+10
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+9
	push	eax
	movzx	eax, BYTE PTR _ofb_buf2+8
	push	eax
	push	OFFSET ??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@
	call	_printf
; Line 662
	movzx	eax, BYTE PTR _plain+15
	push	eax
	movzx	eax, BYTE PTR _plain+14
	push	eax
	movzx	eax, BYTE PTR _plain+13
	push	eax
	movzx	eax, BYTE PTR _plain+12
	push	eax
	movzx	eax, BYTE PTR _plain+11
	push	eax
	movzx	eax, BYTE PTR _plain+10
	push	eax
	movzx	eax, BYTE PTR _plain+9
	push	eax
	movzx	eax, BYTE PTR _plain+8
	push	eax
	push	OFFSET ??_C@_0CJ@HHOJOOLG@?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF0@
	call	_printf
	add	esp, 76					; 0000004cH
; Line 665
	mov	edi, 1
$LN69@main:
; Line 668
	push	OFFSET ??_C@_0N@LONGFFKB@Doing?5ofb64?6?$AA@
	call	_printf
; Line 669
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _ofb_key
	call	_DES_set_key_checked
; Line 670
	mov	eax, DWORD PTR _ofb_iv
	xorps	xmm0, xmm0
	mov	DWORD PTR _ofb_tmp, eax
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ofb_iv+4
; Line 674
	xor	esi, esi
	mov	DWORD PTR _ofb_tmp+4, eax
	movups	XMMWORD PTR _ofb_buf1, xmm0
	mov	DWORD PTR _num$[esp+552], 0
	movq	QWORD PTR _ofb_buf1+16, xmm0
	movups	XMMWORD PTR _ofb_buf2, xmm0
	movq	QWORD PTR _ofb_buf2+16, xmm0
$LL34@main:
; Line 675
	lea	eax, DWORD PTR _num$[esp+552]
	push	eax
	push	OFFSET _ofb_tmp
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	push	1
	lea	eax, DWORD PTR _ofb_buf1[esi]
	push	eax
	lea	eax, DWORD PTR _plain[esi]
	push	eax
	call	_DES_ofb64_encrypt
	inc	esi
	add	esp, 24					; 00000018H
	cmp	esi, 24					; 00000018H
	jb	SHORT $LL34@main
; Line 677
	mov	ecx, OFFSET _ofb_cipher
	mov	edx, OFFSET _ofb_buf1
	mov	esi, 20					; 00000014H
	npad	1
$LL222@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN221@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL222@main
	xor	eax, eax
	jmp	SHORT $LN224@main
$LN221@main:
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN223@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN223@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN223@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN223@main
	xor	eax, eax
	jmp	SHORT $LN224@main
$LN223@main:
	sbb	eax, eax
	or	eax, 1
$LN224@main:
	test	eax, eax
	je	SHORT $LN70@main
; Line 678
	push	OFFSET ??_C@_0BN@PJCOFOFD@ofb64_encrypt?5encrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 679
	mov	edi, 1
$LN70@main:
; Line 681
	mov	eax, DWORD PTR _ofb_iv
	mov	DWORD PTR _ofb_tmp, eax
	mov	eax, DWORD PTR _ofb_iv+4
	mov	DWORD PTR _ofb_tmp+4, eax
; Line 683
	lea	eax, DWORD PTR _num$[esp+552]
	push	eax
	push	OFFSET _ofb_tmp
	lea	eax, DWORD PTR _ks$[esp+560]
	mov	DWORD PTR _num$[esp+560], 0
	push	eax
	push	24					; 00000018H
	push	OFFSET _ofb_buf2
	push	OFFSET _ofb_buf1
	call	_DES_ofb64_encrypt
	add	esp, 24					; 00000018H
; Line 685
	mov	ecx, OFFSET _plain
	mov	edx, OFFSET _ofb_buf2
	mov	esi, 20					; 00000014H
	npad	2
$LL227@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN226@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL227@main
	xor	eax, eax
	jmp	SHORT $LN229@main
$LN226@main:
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN228@main
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN228@main
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN228@main
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN228@main
	xor	eax, eax
	jmp	SHORT $LN229@main
$LN228@main:
	sbb	eax, eax
	or	eax, 1
$LN229@main:
	test	eax, eax
	je	SHORT $LN71@main
; Line 686
	push	OFFSET ??_C@_0BN@PONLOFG@ofb64_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 687
	mov	edi, 1
$LN71@main:
; Line 690
	push	OFFSET ??_C@_0BB@JIFPGEDD@Doing?5ede_ofb64?6?$AA@
	call	_printf
; Line 691
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _ofb_key
	call	_DES_set_key_checked
; Line 692
	mov	eax, DWORD PTR _ofb_iv
	xorps	xmm0, xmm0
	mov	DWORD PTR _ofb_tmp, eax
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _ofb_iv+4
; Line 696
	xor	esi, esi
	mov	DWORD PTR _ofb_tmp+4, eax
	movups	XMMWORD PTR _ofb_buf1, xmm0
	mov	DWORD PTR _num$[esp+552], 0
	movq	QWORD PTR _ofb_buf1+16, xmm0
	movups	XMMWORD PTR _ofb_buf2, xmm0
	movq	QWORD PTR _ofb_buf2+16, xmm0
	npad	5
$LL37@main:
; Line 697
	lea	eax, DWORD PTR _num$[esp+552]
	push	eax
	push	OFFSET _ofb_tmp
	lea	eax, DWORD PTR _ks$[esp+560]
	push	eax
	push	eax
	push	eax
	push	1
	lea	eax, DWORD PTR _ofb_buf1[esi]
	push	eax
	lea	eax, DWORD PTR _plain[esi]
	push	eax
	call	_DES_ede3_ofb64_encrypt
	inc	esi
	add	esp, 32					; 00000020H
	cmp	esi, 24					; 00000018H
	jb	SHORT $LL37@main
; Line 700
	mov	ecx, OFFSET _ofb_cipher
	mov	edx, OFFSET _ofb_buf1
	mov	esi, 20					; 00000014H
	npad	2
$LL232@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN231@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL232@main
	jmp	SHORT $LN72@main
$LN231@main:
; Line 701
	push	OFFSET ??_C@_0CB@DKNPBPLA@ede_ofb64_encrypt?5encrypt?5error?6@
	call	_printf
	add	esp, 4
; Line 702
	mov	edi, 1
$LN72@main:
; Line 704
	mov	eax, DWORD PTR _ofb_iv
	mov	DWORD PTR _ofb_tmp, eax
	mov	eax, DWORD PTR _ofb_iv+4
	mov	DWORD PTR _ofb_tmp+4, eax
; Line 706
	lea	eax, DWORD PTR _num$[esp+552]
	push	eax
	push	OFFSET _ofb_tmp
	lea	eax, DWORD PTR _ks$[esp+560]
	mov	DWORD PTR _num$[esp+560], 0
	push	eax
	push	eax
	push	eax
	push	24					; 00000018H
	push	OFFSET _ofb_buf2
	push	OFFSET _ofb_buf1
	call	_DES_ede3_ofb64_encrypt
	add	esp, 32					; 00000020H
; Line 708
	mov	ecx, OFFSET _plain
	mov	edx, OFFSET _ofb_buf2
	mov	esi, 20					; 00000014H
$LL235@main:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN234@main
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL235@main
	jmp	SHORT $LN73@main
$LN234@main:
; Line 709
	push	OFFSET ??_C@_0CB@MMBMPPLF@ede_ofb64_encrypt?5decrypt?5error?6@
	call	_printf
	add	esp, 4
; Line 710
	mov	edi, 1
$LN73@main:
; Line 713
	push	OFFSET ??_C@_0BB@MCJMICMJ@Doing?5cbc_cksum?6?$AA@
	call	_printf
; Line 714
	lea	eax, DWORD PTR _ks$[esp+556]
	push	eax
	push	OFFSET _cbc_key
	call	_DES_set_key_checked
; Line 715
	mov	ecx, OFFSET _cbc_data
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [ecx+1]
	npad	2
$LL236@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL236@main
	push	OFFSET _cbc_iv
	lea	eax, DWORD PTR _ks$[esp+556]
	sub	ecx, edx
	push	eax
	push	ecx
	lea	eax, DWORD PTR _cret$[esp+564]
	push	eax
	push	OFFSET _cbc_data
	call	_DES_cbc_cksum
; Line 717
	mov	ecx, DWORD PTR _cbc_cksum_ret
	add	esp, 20					; 00000014H
	cmp	eax, ecx
	je	SHORT $LN74@main
; Line 718
	push	ecx
	push	eax
	push	OFFSET ??_C@_0CL@CFELGHMP@bad?5return?5value?5?$CI?$CF08lX?$CJ?0?5should@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 720
	mov	edi, 1
$LN74@main:
; Line 722
	lea	ecx, DWORD PTR _cret$[esp+552]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _cbc_cksum_data
	jne	SHORT $LN237@main
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR _cbc_cksum_data+4
	je	SHORT $LN75@main
$LN237@main:
; Line 723
	push	OFFSET ??_C@_0BO@HCLPHCCD@bad?5cbc_cksum?5block?5returned?6?$AA@
	call	_printf
	add	esp, 4
; Line 724
	mov	edi, 1
$LN75@main:
; Line 727
	push	OFFSET ??_C@_0BC@IOJHPNND@Doing?5quad_cksum?6?$AA@
	call	_printf
; Line 728
	mov	ecx, OFFSET _cbc_data
	add	esp, 4
	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL238@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL238@main
	push	OFFSET _cbc_iv
	push	2
	sub	ecx, edx
	lea	eax, DWORD PTR _lqret$[esp+560]
	push	ecx
	push	eax
	push	OFFSET _cbc_data
	call	_DES_quad_cksum
	add	esp, 20					; 00000014H
; Line 731
	cmp	eax, 1893180986				; 70d7a63aH
	je	SHORT $LN76@main
; Line 732
	push	eax
	push	OFFSET ??_C@_0DA@EEKLLMOF@quad_cksum?5error?0?5ret?5?$CF08lx?5shou@
	call	_printf
	add	esp, 8
; Line 734
	mov	edi, 1
$LN76@main:
; Line 758
	mov	eax, DWORD PTR _lqret$[esp+552]
	cmp	eax, 847166093				; 327eba8dH
	je	SHORT $LN77@main
; Line 759
	push	847166093				; 327eba8dH
	push	eax
	push	OFFSET ??_C@_0CN@EIGFGFGM@quad_cksum?5error?0?5out?$FL0?$FN?5?$CF08lx?5i@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 761
	mov	edi, 1
$LN77@main:
; Line 763
	mov	eax, DWORD PTR _lqret$[esp+556]
	cmp	eax, 538593740				; 201a49ccH
	je	SHORT $LN78@main
; Line 764
	push	538593740				; 201a49ccH
	push	eax
	push	OFFSET ??_C@_0CN@NDBGIPLI@quad_cksum?5error?0?5out?$FL1?$FN?5?$CF08lx?5i@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 766
	mov	edi, 1
$LN78@main:
; Line 768
	mov	eax, DWORD PTR _lqret$[esp+560]
	cmp	eax, 1893180986				; 70d7a63aH
	je	SHORT $LN79@main
; Line 769
	push	1893180986				; 70d7a63aH
	push	eax
	push	OFFSET ??_C@_0CN@KFPDLGIF@quad_cksum?5error?0?5out?$FL2?$FN?5?$CF08lx?5i@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 771
	mov	edi, 1
$LN79@main:
; Line 773
	mov	eax, DWORD PTR _lqret$[esp+564]
	cmp	eax, 1344023590				; 501c2c26H
	je	SHORT $LN80@main
; Line 774
	push	1344023590				; 501c2c26H
	push	eax
	push	OFFSET ??_C@_0CN@DOIAFMFB@quad_cksum?5error?0?5out?$FL3?$FN?5?$CF08lx?5i@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 776
	mov	edi, 1
$LN80@main:
; Line 781
	push	OFFSET ??_C@_0BK@FNPGJHML@input?5word?5alignment?5test?$AA@
	call	_printf
	add	esp, 4
; Line 782
	xor	esi, esi
	npad	9
$LL40@main:
; Line 783
	push	esi
	push	OFFSET ??_C@_03EBJOKFHF@?5?$CFd?$AA@
	call	_printf
; Line 784
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	lea	edx, DWORD PTR [ecx+1]
$LL239@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL239@main
	push	1
	sub	ecx, edx
	lea	eax, DWORD PTR _ks$[esp+556]
	push	OFFSET _cbc_iv
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+568]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+572]
	add	eax, esi
	push	eax
	call	_DES_ncbc_encrypt
	inc	esi
	add	esp, 24					; 00000018H
	cmp	esi, 4
	jb	SHORT $LL40@main
; Line 788
	push	OFFSET ??_C@_0BM@EDCGFDOP@?6output?5word?5alignment?5test?$AA@
	call	_printf
	add	esp, 4
; Line 789
	xor	esi, esi
	npad	2
$LL43@main:
; Line 790
	push	esi
	push	OFFSET ??_C@_03EBJOKFHF@?5?$CFd?$AA@
	call	_printf
; Line 791
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	lea	edx, DWORD PTR [ecx+1]
$LL240@main:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL240@main
	push	1
	sub	ecx, edx
	lea	eax, DWORD PTR _ks$[esp+556]
	push	OFFSET _cbc_iv
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+568]
	add	eax, esi
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+572]
	push	eax
	call	_DES_ncbc_encrypt
	inc	esi
	add	esp, 24					; 00000018H
	cmp	esi, 4
	jb	SHORT $LL43@main
; Line 795
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 796
	push	OFFSET ??_C@_0BB@LIDJPHCB@fast?5crypt?5test?5?$AA@
	call	_printf
; Line 797
	push	OFFSET ??_C@_02HNAFODAH@ef?$AA@
	push	OFFSET ??_C@_07MEHGEGBN@testing?$AA@
	call	_DES_crypt
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 798
	mov	ecx, esi
	mov	eax, OFFSET ??_C@_0O@FKJDIODP@efGnQx2725bI2?$AA@
	npad	2
$LL241@main:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN242@main
	test	dl, dl
	je	SHORT $LN243@main
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN242@main
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL241@main
$LN243@main:
	xor	eax, eax
	jmp	SHORT $LN244@main
$LN242@main:
	sbb	eax, eax
	or	eax, 1
$LN244@main:
	test	eax, eax
	je	SHORT $LN81@main
; Line 799
	push	esi
	push	OFFSET ??_C@_0CO@OLOJAAKD@fast?5crypt?5error?0?5?$CFs?5should?5be?5e@
	call	_printf
	add	esp, 8
; Line 800
	mov	edi, 1
$LN81@main:
; Line 802
	push	OFFSET ??_C@_02LCPMALHG@yA?$AA@
	push	OFFSET ??_C@_08NLHGPDCH@bca76?$DL23?$AA@
	call	_DES_crypt
	mov	esi, eax
	add	esp, 8
; Line 803
	mov	ecx, esi
	mov	eax, OFFSET ??_C@_0O@EHGJAHEA@yA1Rp?11hZXIJk?$AA@
$LL245@main:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN246@main
	test	dl, dl
	je	SHORT $LN247@main
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN246@main
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL245@main
$LN247@main:
	xor	eax, eax
	jmp	SHORT $LN248@main
$LN246@main:
	sbb	eax, eax
	or	eax, 1
$LN248@main:
	test	eax, eax
	je	SHORT $LN82@main
; Line 804
	push	esi
	push	OFFSET ??_C@_0CO@CLEOJGIH@fast?5crypt?5error?0?5?$CFs?5should?5be?5y@
	call	_printf
	add	esp, 8
; Line 805
	mov	edi, 1
$LN82@main:
; Line 811
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 813
	mov	ecx, DWORD PTR __$ArrayPad$[esp+556]
	add	esp, 4
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ede_cfb64_test
_TEXT	SEGMENT
_n$ = -136						; size = 4
_ks$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_cfb_cipher$ = 8					; size = 4
_ede_cfb64_test PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\destest.c
; Line 894
	mov	eax, 136				; 00000088H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+136], eax
	push	ebx
	push	esi
	push	edi
; Line 898
	lea	eax, DWORD PTR _ks$[esp+148]
	xor	ebx, ebx
	push	eax
	push	OFFSET _cfb_key
	call	_DES_set_key_checked
; Line 899
	mov	eax, DWORD PTR _cfb_iv
; Line 901
	push	1
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
	mov	DWORD PTR _cfb_tmp+4, eax
	lea	eax, DWORD PTR _n$[esp+160]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+168]
	mov	DWORD PTR _n$[esp+168], ebx
	push	eax
	push	eax
	push	eax
	push	12					; 0000000cH
	push	OFFSET _cfb_buf1
	push	OFFSET _plain
	call	_DES_ede3_cfb64_encrypt
; Line 903
	push	1
	lea	eax, DWORD PTR _n$[esp+196]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+204]
	push	eax
	push	eax
	push	eax
	push	12					; 0000000cH
	push	OFFSET _cfb_buf1+12
	push	OFFSET _plain+12
	call	_DES_ede3_cfb64_encrypt
; Line 906
	mov	ecx, DWORD PTR _cfb_cipher$[esp+224]
	lea	esi, DWORD PTR [ebx+20]
	add	esp, 80					; 00000050H
	mov	edx, OFFSET _cfb_buf1
	npad	2
$LL21@ede_cfb64_:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN20@ede_cfb64_
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL21@ede_cfb64_
	jmp	SHORT $LN3@ede_cfb64_
$LN20@ede_cfb64_:
; Line 908
	push	OFFSET ??_C@_0BP@GPMJLNNK@ede_cfb_encrypt?5encrypt?5error?6?$AA@
	mov	ebx, 1
	call	_printf
	add	esp, 4
; Line 909
	xor	esi, esi
	npad	9
$LL4@ede_cfb64_:
; Line 910
	lea	eax, DWORD PTR _cfb_buf1[esi]
	push	eax
	call	_pt
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	call	_printf
	add	esi, 8
	add	esp, 12					; 0000000cH
	cmp	esi, 24					; 00000018H
	jl	SHORT $LL4@ede_cfb64_
$LN3@ede_cfb64_:
; Line 912
	mov	eax, DWORD PTR _cfb_iv
; Line 914
	push	0
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
	mov	DWORD PTR _cfb_tmp+4, eax
	lea	eax, DWORD PTR _n$[esp+152]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+160]
	mov	DWORD PTR _n$[esp+160], 0
	push	eax
	push	eax
	push	eax
	push	17					; 00000011H
	push	OFFSET _cfb_buf2
	push	OFFSET _cfb_buf1
	call	_DES_ede3_cfb64_encrypt
; Line 916
	push	0
	lea	eax, DWORD PTR _n$[esp+188]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+196]
	push	eax
	push	eax
	push	eax
	push	7
	push	OFFSET _cfb_buf2+17
	push	OFFSET _cfb_buf1+17
	call	_DES_ede3_cfb64_encrypt
	add	esp, 72					; 00000048H
; Line 919
	mov	edx, OFFSET _plain
	mov	esi, OFFSET _cfb_buf2
	mov	edi, 20					; 00000014H
$LL24@ede_cfb64_:
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $LN23@ede_cfb64_
	add	edx, 4
	add	esi, 4
	sub	edi, 4
	jae	SHORT $LL24@ede_cfb64_
; Line 925
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 926
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 136				; 00000088H
	ret	0
$LN23@ede_cfb64_:
; Line 921
	push	OFFSET ??_C@_0BP@JJAKFNNP@ede_cfb_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 922
	xor	esi, esi
$LL7@ede_cfb64_:
; Line 923
	lea	eax, DWORD PTR _cfb_buf2[esi]
	push	eax
	call	_pt
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	call	_printf
	add	esi, 8
	add	esp, 12					; 0000000cH
	cmp	esi, 24					; 00000018H
	jl	SHORT $LL7@ede_cfb64_
; Line 926
	mov	ecx, DWORD PTR __$ArrayPad$[esp+148]
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 136				; 00000088H
	ret	0
_ede_cfb64_test ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _cfb64_test
_TEXT	SEGMENT
_n$ = -136						; size = 4
_ks$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_cfb_cipher$ = 8					; size = 4
_cfb64_test PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\destest.c
; Line 863
	mov	eax, 136				; 00000088H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+136], eax
	push	ebx
	push	esi
	push	edi
; Line 867
	lea	eax, DWORD PTR _ks$[esp+148]
	xor	ebx, ebx
	push	eax
	push	OFFSET _cfb_key
	call	_DES_set_key_checked
; Line 868
	mov	eax, DWORD PTR _cfb_iv
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
; Line 870
	push	1
	mov	DWORD PTR _cfb_tmp+4, eax
	lea	eax, DWORD PTR _n$[esp+160]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+168]
	mov	DWORD PTR _n$[esp+168], ebx
	push	eax
	push	12					; 0000000cH
	push	OFFSET _cfb_buf1
	push	OFFSET _plain
	call	_DES_cfb64_encrypt
; Line 871
	push	1
	lea	eax, DWORD PTR _n$[esp+188]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+196]
	push	eax
	push	12					; 0000000cH
	push	OFFSET _cfb_buf1+12
	push	OFFSET _plain+12
	call	_DES_cfb64_encrypt
; Line 873
	mov	ecx, DWORD PTR _cfb_cipher$[esp+208]
	lea	esi, DWORD PTR [ebx+20]
	add	esp, 64					; 00000040H
	mov	edx, OFFSET _cfb_buf1
	npad	6
$LL21@cfb64_test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN20@cfb64_test
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL21@cfb64_test
	jmp	SHORT $LN3@cfb64_test
$LN20@cfb64_test:
; Line 875
	push	OFFSET ??_C@_0BL@MCHCDKMA@cfb_encrypt?5encrypt?5error?6?$AA@
	mov	ebx, 1
	call	_printf
	add	esp, 4
; Line 876
	xor	esi, esi
	npad	9
$LL4@cfb64_test:
; Line 877
	lea	eax, DWORD PTR _cfb_buf1[esi]
	push	eax
	call	_pt
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	call	_printf
	add	esi, 8
	add	esp, 12					; 0000000cH
	cmp	esi, 24					; 00000018H
	jl	SHORT $LL4@cfb64_test
$LN3@cfb64_test:
; Line 879
	mov	eax, DWORD PTR _cfb_iv
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
; Line 881
	push	0
	mov	DWORD PTR _cfb_tmp+4, eax
	lea	eax, DWORD PTR _n$[esp+152]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+160]
	mov	DWORD PTR _n$[esp+160], 0
	push	eax
	push	17					; 00000011H
	push	OFFSET _cfb_buf2
	push	OFFSET _cfb_buf1
	call	_DES_cfb64_encrypt
; Line 882
	push	0
	lea	eax, DWORD PTR _n$[esp+180]
	push	eax
	push	OFFSET _cfb_tmp
	lea	eax, DWORD PTR _ks$[esp+188]
	push	eax
	push	7
	push	OFFSET _cfb_buf2+17
	push	OFFSET _cfb_buf1+17
	call	_DES_cfb64_encrypt
	add	esp, 56					; 00000038H
; Line 884
	mov	edx, OFFSET _plain
	mov	esi, OFFSET _cfb_buf2
	mov	edi, 20					; 00000014H
$LL24@cfb64_test:
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $LN23@cfb64_test
	add	edx, 4
	add	esi, 4
	sub	edi, 4
	jae	SHORT $LL24@cfb64_test
; Line 890
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 891
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 136				; 00000088H
	ret	0
$LN23@cfb64_test:
; Line 886
	push	OFFSET ??_C@_0BL@DELBNKMF@cfb_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 887
	xor	esi, esi
	npad	2
$LL7@cfb64_test:
; Line 888
	lea	eax, DWORD PTR _cfb_buf2[esi]
	push	eax
	call	_pt
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	call	_printf
	add	esi, 8
	add	esp, 12					; 0000000cH
	cmp	esi, 24					; 00000018H
	jl	SHORT $LL7@cfb64_test
; Line 891
	mov	ecx, DWORD PTR __$ArrayPad$[esp+148]
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 136				; 00000088H
	ret	0
_cfb64_test ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _cfb_test
_TEXT	SEGMENT
_ks$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_bits$ = 8						; size = 4
_cfb_cipher$ = 12					; size = 4
_cfb_test PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\destest.c
; Line 836
	mov	eax, 132				; 00000084H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+132], eax
	push	ebx
	push	esi
	push	edi
; Line 840
	lea	eax, DWORD PTR _ks$[esp+144]
	xor	ebx, ebx
	push	eax
	push	OFFSET _cfb_key
	call	_DES_set_key_checked
; Line 841
	mov	eax, DWORD PTR _cfb_iv
; Line 842
	push	1
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
	push	OFFSET _cfb_tmp
	mov	DWORD PTR _cfb_tmp+4, eax
	lea	eax, DWORD PTR _ks$[esp+160]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _bits$[esp+164]
	push	OFFSET _cfb_buf1
	push	OFFSET _plain
	call	_DES_cfb_encrypt
; Line 844
	mov	ecx, DWORD PTR _cfb_cipher$[esp+176]
	lea	esi, DWORD PTR [ebx+20]
	add	esp, 36					; 00000024H
	mov	edx, OFFSET _cfb_buf1
$LL38@cfb_test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN37@cfb_test
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL38@cfb_test
	jmp	$LN3@cfb_test
$LN37@cfb_test:
; Line 846
	push	OFFSET ??_C@_0BL@MCHCDKMA@cfb_encrypt?5encrypt?5error?6?$AA@
	mov	ebx, 1
	call	_printf
	add	esp, 4
; Line 847
	xor	edi, edi
$LL4@cfb_test:
; Line 823
	mov	ecx, DWORD PTR ?bnum@?1??pt@@9@9
	lea	eax, DWORD PTR [ecx+ecx*4]
	inc	ecx
	lea	esi, DWORD PTR ?bufs@?1??pt@@9@9[eax*4]
; Line 824
	mov	eax, -1717986919			; 99999999H
	imul	ecx
; Line 848
	push	esi
; Line 824
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 826
	mov	edx, DWORD PTR ?f@?1??pt@@9@9
; Line 848
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
; Line 824
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*2]
; Line 826
	movzx	ecx, BYTE PTR _cfb_buf1[edi]
	mov	DWORD PTR ?bnum@?1??pt@@9@9, eax
	mov	eax, ecx
	shr	eax, 4
; Line 827
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+1]
	mov	BYTE PTR [esi+1], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+2], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+2]
	mov	BYTE PTR [esi+3], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+4], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+3]
	mov	BYTE PTR [esi+5], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+6], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+4]
	mov	BYTE PTR [esi+7], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+8], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+5]
	mov	BYTE PTR [esi+9], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+10], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+6]
	mov	BYTE PTR [esi+11], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+12], al
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _cfb_buf1[edi+7]
	mov	BYTE PTR [esi+13], al
	mov	eax, ecx
	shr	eax, 4
	and	ecx, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+14], al
	movzx	eax, BYTE PTR [ecx+edx]
	mov	BYTE PTR [esi+15], al
; Line 829
	mov	BYTE PTR [esi+16], 0
; Line 847
	call	_printf
	add	edi, 8
; Line 848
	add	esp, 8
	cmp	edi, 24					; 00000018H
	jl	$LL4@cfb_test
$LN3@cfb_test:
; Line 850
	mov	eax, DWORD PTR _cfb_iv
; Line 851
	push	0
	mov	DWORD PTR _cfb_tmp, eax
	mov	eax, DWORD PTR _cfb_iv+4
	push	OFFSET _cfb_tmp
	mov	DWORD PTR _cfb_tmp+4, eax
	lea	eax, DWORD PTR _ks$[esp+152]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _bits$[esp+156]
	push	OFFSET _cfb_buf2
	push	OFFSET _cfb_buf1
	call	_DES_cfb_encrypt
	add	esp, 28					; 0000001cH
; Line 853
	mov	edx, OFFSET _plain
	mov	esi, OFFSET _cfb_buf2
	mov	edi, 20					; 00000014H
$LL41@cfb_test:
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $LN40@cfb_test
	add	edx, 4
	add	esi, 4
	sub	edi, 4
	jae	SHORT $LL41@cfb_test
; Line 859
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 860
	mov	ecx, DWORD PTR __$ArrayPad$[esp+132]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 132				; 00000084H
	ret	0
$LN40@cfb_test:
; Line 855
	push	OFFSET ??_C@_0BL@DELBNKMF@cfb_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 856
	xor	esi, esi
	npad	4
$LL7@cfb_test:
; Line 857
	lea	eax, DWORD PTR _cfb_buf1[esi]
	push	eax
	call	_pt
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	call	_printf
	add	esi, 8
	add	esp, 12					; 0000000cH
	cmp	esi, 24					; 00000018H
	jl	SHORT $LL7@cfb_test
; Line 860
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 132				; 00000084H
	ret	0
_cfb_test ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pt
_TEXT	SEGMENT
_p$ = 8							; size = 4
_pt	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\destest.c
; Line 823
	mov	ecx, DWORD PTR ?bnum@?1??pt@@9@9
	push	esi
; Line 826
	mov	esi, DWORD PTR _p$[esp]
	push	edi
	lea	eax, DWORD PTR [ecx+ecx*4]
	inc	ecx
	lea	edi, DWORD PTR ?bufs@?1??pt@@9@9[eax*4]
	mov	eax, -1717986919			; 99999999H
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	edx, DWORD PTR ?f@?1??pt@@9@9
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR ?bnum@?1??pt@@9@9, eax
	movzx	eax, BYTE PTR [esi]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi], al
; Line 827
	movzx	eax, BYTE PTR [esi]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+1], al
	movzx	eax, BYTE PTR [esi+1]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+2], al
	movzx	eax, BYTE PTR [esi+1]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+3], al
	movzx	eax, BYTE PTR [esi+2]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+4], al
	movzx	eax, BYTE PTR [esi+2]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+5], al
	movzx	eax, BYTE PTR [esi+3]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+6], al
	movzx	eax, BYTE PTR [esi+3]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+7], al
	movzx	eax, BYTE PTR [esi+4]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+8], al
	movzx	eax, BYTE PTR [esi+4]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+9], al
	movzx	eax, BYTE PTR [esi+5]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+10], al
	movzx	eax, BYTE PTR [esi+5]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+11], al
	movzx	eax, BYTE PTR [esi+6]
	shr	eax, 4
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+12], al
	movzx	eax, BYTE PTR [esi+6]
	and	eax, 15					; 0000000fH
	movzx	eax, BYTE PTR [eax+edx]
	mov	BYTE PTR [edi+13], al
	movzx	ecx, BYTE PTR [esi+7]
	shr	ecx, 4
	movzx	ecx, BYTE PTR [ecx+edx]
	mov	BYTE PTR [edi+14], cl
	movzx	ecx, BYTE PTR [esi+7]
	and	ecx, 15					; 0000000fH
	movzx	ecx, BYTE PTR [ecx+edx]
	mov	BYTE PTR [edi+15], cl
; Line 829
	mov	BYTE PTR [edi+16], 0
; Line 830
	mov	eax, edi
	pop	edi
	pop	esi
; Line 831
	ret	0
_pt	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 950
	push	esi
; Line 954
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
; Line 639
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	pop	esi
; Line 957
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
