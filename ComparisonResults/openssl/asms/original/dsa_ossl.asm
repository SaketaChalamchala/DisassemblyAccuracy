; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@	; `string'
;	COMDAT ??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@
CONST	SEGMENT
??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@ DB 'OpenSSL DSA method', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_openssl_dsa_meth DD FLAT:??_C@_0BD@IBKHKBJA@OpenSSL?5DSA?5method?$AA@
	DD	FLAT:_dsa_do_sign
	DD	FLAT:_dsa_sign_setup
	DD	FLAT:_dsa_do_verify
	DD	00H
	DD	00H
	DD	FLAT:_dsa_init
	DD	FLAT:_dsa_finish
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	_DSA_OpenSSL
PUBLIC	??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ ; `string'
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_rand_range:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_init:PROC
EXTRN	_BN_clear_free:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_bin2bn:PROC
EXTRN	_BN_sub:PROC
EXTRN	_BN_add:PROC
EXTRN	_BN_div:PROC
EXTRN	_BN_mod_mul:PROC
EXTRN	_BN_cmp:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_mod_exp_mont:PROC
EXTRN	_BN_mod_exp2_mont:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_BN_mod_inverse:PROC
EXTRN	_BN_MONT_CTX_free:PROC
EXTRN	_BN_MONT_CTX_set_locked:PROC
EXTRN	_DSA_SIG_new:PROC
EXTRN	_DSA_sign_setup:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
CONST	SEGMENT
??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@ DB '.\crypto\dsa\dsa'
	DB	'_ossl.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dsa_finish
_TEXT	SEGMENT
_dsa$ = 8						; size = 4
_dsa_finish PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
; Line 419
	mov	eax, DWORD PTR _dsa$[esp-4]
	mov	eax, DWORD PTR [eax+44]
	test	eax, eax
	je	SHORT $LN4@dsa_finish
; Line 420
	push	eax
	call	_BN_MONT_CTX_free
	add	esp, 4
$LN4@dsa_finish:
; Line 421
	mov	eax, 1
; Line 422
	ret	0
_dsa_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dsa_init
_TEXT	SEGMENT
_dsa$ = 8						; size = 4
_dsa_init PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
; Line 413
	mov	eax, DWORD PTR _dsa$[esp-4]
	or	DWORD PTR [eax+40], 1
; Line 414
	mov	eax, 1
; Line 415
	ret	0
_dsa_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dsa_do_verify
_TEXT	SEGMENT
_u1$ = -60						; size = 20
_u2$ = -40						; size = 20
_t1$ = -20						; size = 20
_dgst$ = 8						; size = 4
_dgst_len$ = 12						; size = 4
_sig$ = 16						; size = 4
_dsa$ = 20						; size = 4
_dsa_do_verify PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
; Line 317
	mov	eax, 60					; 0000003cH
	call	__chkstk
	push	esi
; Line 322
	mov	esi, DWORD PTR _dsa$[esp+60]
	push	edi
	or	edi, -1
	cmp	DWORD PTR [esi+12], 0
	je	$LN6@dsa_do_ver
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	$LN6@dsa_do_ver
	cmp	DWORD PTR [esi+20], 0
	je	$LN6@dsa_do_ver
; Line 327
	push	ebp
	push	eax
	call	_BN_num_bits
	mov	ebp, eax
	add	esp, 4
; Line 329
	cmp	ebp, 160				; 000000a0H
	je	SHORT $LN7@dsa_do_ver
	cmp	ebp, 224				; 000000e0H
	je	SHORT $LN7@dsa_do_ver
	cmp	ebp, 256				; 00000100H
	je	SHORT $LN7@dsa_do_ver
; Line 330
	push	330					; 0000014aH
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	102					; 00000066H
$LN31@dsa_do_ver:
	push	113					; 00000071H
	push	10					; 0000000aH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 331
	or	eax, -1
	pop	ebp
	pop	edi
	pop	esi
; Line 409
	add	esp, 60					; 0000003cH
	ret	0
$LN7@dsa_do_ver:
; Line 334
	push	DWORD PTR [esi+12]
	call	_BN_num_bits
	add	esp, 4
	cmp	eax, 10000				; 00002710H
	jle	SHORT $LN8@dsa_do_ver
; Line 335
	push	335					; 0000014fH
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	103					; 00000067H
; Line 336
	jmp	SHORT $LN31@dsa_do_ver
$LN8@dsa_do_ver:
; Line 338
	lea	eax, DWORD PTR _u1$[esp+72]
	push	ebx
	push	eax
	call	_BN_init
; Line 339
	lea	eax, DWORD PTR _u2$[esp+80]
	push	eax
	call	_BN_init
; Line 340
	lea	eax, DWORD PTR _t1$[esp+84]
	push	eax
	call	_BN_init
	add	esp, 12					; 0000000cH
; Line 342
	call	_BN_CTX_new
	mov	ebx, eax
	test	ebx, ebx
	je	$LN28@dsa_do_ver
; Line 345
	mov	eax, DWORD PTR _sig$[esp+72]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+4], 0
	je	$LN13@dsa_do_ver
	cmp	DWORD PTR [eax+12], 0
	jne	$LN13@dsa_do_ver
	push	DWORD PTR [esi+16]
	push	eax
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN13@dsa_do_ver
; Line 350
	mov	eax, DWORD PTR _sig$[esp+72]
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+4], 0
	je	$LN13@dsa_do_ver
	cmp	DWORD PTR [eax+12], 0
	jne	$LN13@dsa_do_ver
	push	DWORD PTR [esi+16]
	push	eax
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN13@dsa_do_ver
; Line 359
	mov	eax, DWORD PTR _sig$[esp+72]
	push	ebx
	push	DWORD PTR [esi+16]
	push	DWORD PTR [eax+4]
	lea	eax, DWORD PTR _u2$[esp+88]
	push	eax
	call	_BN_mod_inverse
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN28@dsa_do_ver
; Line 363
	mov	eax, DWORD PTR _dgst_len$[esp+72]
; Line 370
	lea	ecx, DWORD PTR _u1$[esp+76]
	sar	ebp, 3
	cmp	eax, ebp
	push	ecx
	cmovg	eax, ebp
	push	eax
	push	DWORD PTR _dgst$[esp+80]
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN28@dsa_do_ver
; Line 374
	push	ebx
	push	DWORD PTR [esi+16]
	lea	eax, DWORD PTR _u2$[esp+84]
	push	eax
	lea	eax, DWORD PTR _u1$[esp+88]
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN28@dsa_do_ver
; Line 378
	mov	ebp, DWORD PTR _sig$[esp+72]
	lea	eax, DWORD PTR _u2$[esp+76]
	push	ebx
	push	DWORD PTR [esi+16]
	push	eax
	push	DWORD PTR [ebp]
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN28@dsa_do_ver
; Line 381
	test	BYTE PTR [esi+40], 1
	je	SHORT $LN29@dsa_do_ver
; Line 382
	push	ebx
	push	DWORD PTR [esi+12]
	lea	eax, DWORD PTR [esi+44]
	push	8
	push	eax
	call	_BN_MONT_CTX_set_locked
	add	esp, 16					; 00000010H
; Line 384
	test	eax, eax
	jne	SHORT $LN4@dsa_do_ver
$LN28@dsa_do_ver:
; Line 402
	push	402					; 00000192H
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	3
	push	113					; 00000071H
	push	10					; 0000000aH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN25@dsa_do_ver:
; Line 403
	test	ebx, ebx
	je	SHORT $LN26@dsa_do_ver
; Line 404
	push	ebx
	call	_BN_CTX_free
	add	esp, 4
$LN26@dsa_do_ver:
; Line 405
	lea	eax, DWORD PTR _u1$[esp+76]
	push	eax
	call	_BN_free
; Line 406
	lea	eax, DWORD PTR _u2$[esp+80]
	push	eax
	call	_BN_free
; Line 407
	lea	eax, DWORD PTR _t1$[esp+84]
	push	eax
	call	_BN_free
	add	esp, 12					; 0000000cH
; Line 408
	mov	eax, edi
	pop	ebx
	pop	ebp
	pop	edi
	pop	esi
; Line 409
	add	esp, 60					; 0000003cH
	ret	0
$LN29@dsa_do_ver:
	xor	eax, eax
$LN4@dsa_do_ver:
; Line 388
	mov	ecx, DWORD PTR [esi+60]
	push	eax
	push	ebx
	push	DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR _u2$[esp+88]
	push	eax
	lea	eax, DWORD PTR _u1$[esp+92]
	push	DWORD PTR [esi+24]
	push	eax
	lea	eax, DWORD PTR _t1$[esp+100]
	push	DWORD PTR [esi+20]
	push	eax
	test	ecx, ecx
	je	SHORT $LN21@dsa_do_ver
	push	esi
	call	ecx
	add	esp, 36					; 00000024H
	jmp	SHORT $LN22@dsa_do_ver
$LN21@dsa_do_ver:
	call	_BN_mod_exp2_mont
	add	esp, 32					; 00000020H
$LN22@dsa_do_ver:
	test	eax, eax
	je	$LN28@dsa_do_ver
; Line 392
	push	ebx
	push	DWORD PTR [esi+16]
	lea	eax, DWORD PTR _t1$[esp+84]
	push	eax
	lea	eax, DWORD PTR _u1$[esp+88]
	push	eax
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN28@dsa_do_ver
; Line 398
	push	DWORD PTR [ebp]
	lea	eax, DWORD PTR _u1$[esp+80]
	push	eax
	call	_BN_ucmp
	add	esp, 8
	mov	edi, eax
	neg	edi
$err$33:
	sbb	edi, edi
	add	edi, 1
; Line 401
	jns	$LN25@dsa_do_ver
	jmp	$LN28@dsa_do_ver
$LN13@dsa_do_ver:
; Line 352
	xor	edi, edi
; Line 353
	jmp	$LN25@dsa_do_ver
$LN6@dsa_do_ver:
; Line 323
	push	323					; 00000143H
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	101					; 00000065H
	push	113					; 00000071H
	push	10					; 0000000aH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 324
	or	eax, -1
	pop	edi
	pop	esi
; Line 409
	add	esp, 60					; 0000003cH
	ret	0
_dsa_do_verify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dsa_sign_setup
_TEXT	SEGMENT
_k$ = -40						; size = 20
_kq$ = -20						; size = 20
_dsa$ = 8						; size = 4
_ctx_in$ = 12						; size = 4
_kinvp$ = 16						; size = 4
_rp$ = 20						; size = 4
_dsa_sign_setup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
; Line 224
	mov	eax, 40					; 00000028H
	call	__chkstk
	push	ebx
	push	edi
; Line 229
	mov	edi, DWORD PTR _dsa$[esp+44]
	xor	ebx, ebx
	cmp	DWORD PTR [edi+12], ebx
	je	$LN9@dsa_sign_s
	cmp	DWORD PTR [edi+16], ebx
	je	$LN9@dsa_sign_s
	cmp	DWORD PTR [edi+20], ebx
	je	$LN9@dsa_sign_s
; Line 234
	push	ebp
	lea	eax, DWORD PTR _k$[esp+52]
	push	esi
	push	eax
	call	_BN_init
; Line 235
	lea	eax, DWORD PTR _kq$[esp+60]
	push	eax
	call	_BN_init
; Line 237
	mov	eax, DWORD PTR _ctx_in$[esp+60]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@dsa_sign_s
; Line 238
	call	_BN_CTX_new
	mov	ebp, eax
	test	ebp, ebp
	jne	SHORT $LN11@dsa_sign_s
$LN40@dsa_sign_s:
; Line 304
	push	304					; 00000130H
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	3
	push	107					; 0000006bH
	push	10					; 0000000aH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 305
	test	ebx, ebx
	je	SHORT $LN41@dsa_sign_s
; Line 306
	push	ebx
	call	_BN_clear_free
	add	esp, 4
$LN41@dsa_sign_s:
	xor	ebx, ebx
$LN32@dsa_sign_s:
; Line 308
	cmp	DWORD PTR _ctx_in$[esp+52], 0
	jne	SHORT $LN33@dsa_sign_s
; Line 309
	push	ebp
	call	_BN_CTX_free
	add	esp, 4
$LN33@dsa_sign_s:
; Line 310
	lea	eax, DWORD PTR _k$[esp+56]
	push	eax
	call	_BN_clear_free
; Line 311
	lea	eax, DWORD PTR _kq$[esp+60]
	push	eax
	call	_BN_clear_free
	add	esp, 8
; Line 312
	mov	eax, ebx
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 313
	add	esp, 40					; 00000028H
	ret	0
$LN10@dsa_sign_s:
; Line 241
	mov	ebp, eax
$LN11@dsa_sign_s:
; Line 243
	call	_BN_new
	mov	ebx, eax
	test	ebx, ebx
	je	SHORT $LN40@dsa_sign_s
	npad	2
$LL4@dsa_sign_s:
; Line 248
	push	DWORD PTR [edi+16]
	lea	eax, DWORD PTR _k$[esp+60]
	push	eax
	call	_BN_rand_range
	add	esp, 8
	test	eax, eax
	je	SHORT $LN40@dsa_sign_s
; Line 250
	cmp	DWORD PTR _k$[esp+60], 0
	je	SHORT $LL4@dsa_sign_s
; Line 251
	mov	eax, DWORD PTR [edi+40]
	test	al, 2
	jne	SHORT $LN15@dsa_sign_s
; Line 252
	or	DWORD PTR _k$[esp+72], 4
$LN15@dsa_sign_s:
; Line 255
	test	al, 1
	je	SHORT $LN17@dsa_sign_s
; Line 256
	push	ebp
	push	DWORD PTR [edi+12]
	lea	eax, DWORD PTR [edi+44]
	push	8
	push	eax
	call	_BN_MONT_CTX_set_locked
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN40@dsa_sign_s
$LN17@dsa_sign_s:
; Line 263
	test	BYTE PTR [edi+40], 2
	jne	SHORT $LN18@dsa_sign_s
; Line 264
	lea	eax, DWORD PTR _k$[esp+56]
	push	eax
	lea	eax, DWORD PTR _kq$[esp+60]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN40@dsa_sign_s
; Line 274
	push	DWORD PTR [edi+16]
	lea	eax, DWORD PTR _kq$[esp+60]
	push	eax
	push	eax
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN40@dsa_sign_s
; Line 276
	lea	eax, DWORD PTR _kq$[esp+56]
	push	eax
	call	_BN_num_bits
	push	DWORD PTR [edi+16]
	mov	esi, eax
	call	_BN_num_bits
	add	esp, 8
	cmp	esi, eax
	jg	SHORT $LN23@dsa_sign_s
; Line 277
	push	DWORD PTR [edi+16]
	lea	eax, DWORD PTR _kq$[esp+60]
	push	eax
	push	eax
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN40@dsa_sign_s
$LN23@dsa_sign_s:
; Line 281
	lea	ecx, DWORD PTR _kq$[esp+56]
; Line 282
	jmp	SHORT $LN7@dsa_sign_s
$LN18@dsa_sign_s:
; Line 283
	lea	ecx, DWORD PTR _k$[esp+56]
$LN7@dsa_sign_s:
; Line 285
	push	DWORD PTR [edi+44]
	mov	eax, DWORD PTR [edi+60]
	push	ebp
	push	DWORD PTR [edi+12]
	mov	eax, DWORD PTR [eax+20]
	push	ecx
	push	DWORD PTR [edi+20]
	push	ebx
	test	eax, eax
	je	SHORT $LN24@dsa_sign_s
	push	edi
	call	eax
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN25@dsa_sign_s
$LN24@dsa_sign_s:
	call	_BN_mod_exp_mont
	add	esp, 24					; 00000018H
$LN25@dsa_sign_s:
	test	eax, eax
	je	$LN40@dsa_sign_s
; Line 287
	push	ebp
	push	DWORD PTR [edi+16]
	push	ebx
	push	ebx
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN40@dsa_sign_s
; Line 291
	push	ebp
	push	DWORD PTR [edi+16]
	lea	eax, DWORD PTR _k$[esp+64]
	push	eax
	push	0
	call	_BN_mod_inverse
	mov	edi, eax
	add	esp, 16					; 00000010H
	test	edi, edi
	je	$LN40@dsa_sign_s
; Line 294
	mov	esi, DWORD PTR _kinvp$[esp+52]
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN29@dsa_sign_s
; Line 295
	push	ecx
	call	_BN_clear_free
	add	esp, 4
$LN29@dsa_sign_s:
; Line 296
	mov	DWORD PTR [esi], edi
; Line 298
	mov	esi, DWORD PTR _rp$[esp+52]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN30@dsa_sign_s
; Line 299
	push	eax
	call	_BN_clear_free
	add	esp, 4
$LN30@dsa_sign_s:
; Line 300
	mov	DWORD PTR [esi], ebx
; Line 301
	mov	ebx, 1
; Line 303
	jmp	$LN32@dsa_sign_s
$LN9@dsa_sign_s:
; Line 230
	push	230					; 000000e6H
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	101					; 00000065H
	push	107					; 0000006bH
	push	10					; 0000000aH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 231
	xor	eax, eax
	pop	edi
	pop	ebx
; Line 313
	add	esp, 40					; 00000028H
	ret	0
_dsa_sign_setup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dsa_do_sign
_TEXT	SEGMENT
_r$ = -52						; size = 4
_kinv$ = -48						; size = 4
_noredo$1$ = -44					; size = 4
_m$ = -40						; size = 20
_xr$ = -20						; size = 20
_dgst$ = 8						; size = 4
_dlen$ = 12						; size = 4
_dsa$ = 16						; size = 4
_dsa_do_sign PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
; Line 134
	mov	eax, 52					; 00000034H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 143
	lea	eax, DWORD PTR _m$[esp+68]
	mov	DWORD PTR _kinv$[esp+68], 0
	xor	ebx, ebx
	mov	DWORD PTR _r$[esp+68], 0
	push	eax
	xor	edi, edi
	mov	DWORD PTR _noredo$1$[esp+72], ebx
	xor	ebp, ebp
	call	_BN_init
; Line 144
	lea	eax, DWORD PTR _xr$[esp+72]
	push	eax
	call	_BN_init
; Line 146
	mov	esi, DWORD PTR _dsa$[esp+72]
	add	esp, 8
	cmp	DWORD PTR [esi+12], ebx
	je	$LN3@dsa_do_sig
	cmp	DWORD PTR [esi+16], ebx
	je	$LN3@dsa_do_sig
	cmp	DWORD PTR [esi+20], ebx
	je	$LN3@dsa_do_sig
; Line 151
	call	_BN_new
	mov	edi, eax
; Line 152
	test	edi, edi
	je	$LN45@dsa_do_sig
; Line 154
	call	_BN_CTX_new
	mov	ebx, eax
; Line 155
	test	ebx, ebx
	je	$LN45@dsa_do_sig
	mov	ebp, DWORD PTR _dlen$[esp+64]
$redo$47:
; Line 158
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN8@dsa_do_sig
	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	SHORT $LN8@dsa_do_sig
; Line 162
	mov	DWORD PTR _kinv$[esp+68], eax
; Line 163
	mov	DWORD PTR [esi+32], 0
; Line 164
	mov	DWORD PTR _r$[esp+68], ecx
; Line 165
	mov	DWORD PTR [esi+36], 0
; Line 166
	mov	DWORD PTR _noredo$1$[esp+68], 1
	jmp	SHORT $LN9@dsa_do_sig
$LN8@dsa_do_sig:
; Line 159
	lea	eax, DWORD PTR _r$[esp+68]
	push	eax
	lea	eax, DWORD PTR _kinv$[esp+72]
	push	eax
	push	ebx
	push	esi
	call	_DSA_sign_setup
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN42@dsa_do_sig
$LN9@dsa_do_sig:
; Line 169
	push	DWORD PTR [esi+16]
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	cmp	ebp, eax
	jle	SHORT $LN10@dsa_do_sig
; Line 175
	push	DWORD PTR [esi+16]
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	lea	ebp, DWORD PTR [edx+eax]
	sar	ebp, 3
$LN10@dsa_do_sig:
; Line 176
	lea	eax, DWORD PTR _m$[esp+68]
	push	eax
	push	ebp
	push	DWORD PTR _dgst$[esp+72]
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN42@dsa_do_sig
; Line 180
	push	ebx
	push	DWORD PTR [esi+16]
	lea	eax, DWORD PTR _xr$[esp+76]
	push	DWORD PTR _r$[esp+76]
	push	DWORD PTR [esi+28]
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN42@dsa_do_sig
; Line 182
	lea	eax, DWORD PTR _m$[esp+68]
	push	eax
	lea	eax, DWORD PTR _xr$[esp+72]
	push	eax
	push	edi
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN42@dsa_do_sig
; Line 184
	push	DWORD PTR [esi+16]
	push	edi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN15@dsa_do_sig
; Line 185
	push	DWORD PTR [esi+16]
	push	edi
	push	edi
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN42@dsa_do_sig
$LN15@dsa_do_sig:
; Line 187
	push	ebx
	push	DWORD PTR [esi+16]
	push	DWORD PTR _kinv$[esp+76]
	push	edi
	push	edi
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN42@dsa_do_sig
; Line 194
	mov	eax, DWORD PTR _r$[esp+68]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN18@dsa_do_sig
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN17@dsa_do_sig
$LN18@dsa_do_sig:
; Line 195
	cmp	DWORD PTR _noredo$1$[esp+68], 0
	je	$redo$47
; Line 196
	mov	eax, 110				; 0000006eH
; Line 197
	xor	ebp, ebp
	jmp	SHORT $LN35@dsa_do_sig
$LN17@dsa_do_sig:
; Line 201
	call	_DSA_SIG_new
	mov	ebp, eax
; Line 202
	test	ebp, ebp
	je	SHORT $LN45@dsa_do_sig
; Line 204
	mov	ecx, DWORD PTR _r$[esp+68]
	mov	DWORD PTR [ebp], ecx
; Line 205
	mov	DWORD PTR [ebp+4], edi
	jmp	SHORT $LN21@dsa_do_sig
$LN3@dsa_do_sig:
; Line 147
	mov	eax, 101				; 00000065H
	jmp	SHORT $LN35@dsa_do_sig
$LN42@dsa_do_sig:
	xor	ebp, ebp
$LN45@dsa_do_sig:
	mov	eax, 3
$LN35@dsa_do_sig:
; Line 209
	push	209					; 000000d1H
	push	OFFSET ??_C@_0BI@OJLFFLBA@?4?2crypto?2dsa?2dsa_ossl?4c?$AA@
	push	eax
	push	112					; 00000070H
	push	10					; 0000000aH
	call	_ERR_put_error
; Line 210
	push	DWORD PTR _r$[esp+88]
	call	_BN_free
; Line 211
	push	edi
	call	_BN_free
	add	esp, 28					; 0000001cH
$LN21@dsa_do_sig:
; Line 213
	test	ebx, ebx
	je	SHORT $LN22@dsa_do_sig
; Line 214
	push	ebx
	call	_BN_CTX_free
	add	esp, 4
$LN22@dsa_do_sig:
; Line 215
	lea	eax, DWORD PTR _m$[esp+68]
	push	eax
	call	_BN_clear_free
; Line 216
	lea	eax, DWORD PTR _xr$[esp+72]
	push	eax
	call	_BN_clear_free
; Line 217
	mov	eax, DWORD PTR _kinv$[esp+76]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN36@dsa_do_sig
; Line 218
	push	eax
	call	_BN_clear_free
	add	esp, 4
$LN36@dsa_do_sig:
; Line 219
	pop	edi
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 220
	add	esp, 52					; 00000034H
	ret	0
_dsa_do_sign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _DSA_OpenSSL
_TEXT	SEGMENT
_DSA_OpenSSL PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dsa\dsa_ossl.c
; Line 130
	mov	eax, OFFSET _openssl_dsa_meth
; Line 131
	ret	0
_DSA_OpenSSL ENDP
_TEXT	ENDS
END
