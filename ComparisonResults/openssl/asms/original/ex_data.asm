; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_impl	DD	01H DUP (?)
_ex_data DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_impl_default DD FLAT:_int_new_class
	DD	FLAT:_int_cleanup
	DD	FLAT:_int_get_new_index
	DD	FLAT:_int_new_ex_data
	DD	FLAT:_int_dup_ex_data
	DD	FLAT:_int_free_ex_data
_ex_class DD	064H
_DATA	ENDS
PUBLIC	_CRYPTO_get_ex_data_implementation
PUBLIC	_CRYPTO_set_ex_data_implementation
PUBLIC	_CRYPTO_ex_data_new_class
PUBLIC	_CRYPTO_get_ex_new_index
PUBLIC	_CRYPTO_new_ex_data
PUBLIC	_CRYPTO_dup_ex_data
PUBLIC	_CRYPTO_free_ex_data
PUBLIC	_CRYPTO_set_ex_data
PUBLIC	_CRYPTO_get_ex_data
PUBLIC	_CRYPTO_cleanup_all_ex_data
PUBLIC	??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@	; `string'
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_set:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_free:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_push:PROC
EXTRN	_CRYPTO_lock:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_lh_new:PROC
EXTRN	_lh_free:PROC
EXTRN	_lh_insert:PROC
EXTRN	_lh_retrieve:PROC
EXTRN	_lh_doall:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
CONST	SEGMENT
??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@ DB '.\crypto\ex_data.c', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_add_index
_TEXT	SEGMENT
_item$ = 8						; size = 4
_argl$ = 12						; size = 4
_argp$ = 16						; size = 4
_new_func$ = 20						; size = 4
_dup_func$ = 24						; size = 4
_free_func$ = 28					; size = 4
_def_add_index PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 351
	push	ebx
	push	edi
; Line 353
	push	354					; 00000162H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	20					; 00000014H
	or	ebx, -1
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 355
	test	edi, edi
	jne	SHORT $LN4@def_add_in
; Line 356
	push	356					; 00000164H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	104					; 00000068H
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 357
	or	eax, ebx
	pop	edi
	pop	ebx
; Line 377
	ret	0
$LN4@def_add_in:
; Line 359
	mov	eax, DWORD PTR _argl$[esp+4]
	push	esi
	mov	DWORD PTR [edi], eax
; Line 360
	mov	eax, DWORD PTR _argp$[esp+8]
	mov	DWORD PTR [edi+4], eax
; Line 361
	mov	eax, DWORD PTR _new_func$[esp+8]
; Line 364
	push	364					; 0000016cH
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR _dup_func$[esp+12]
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR _free_func$[esp+16]
	push	2
	push	9
	mov	DWORD PTR [edi+12], eax
	call	_CRYPTO_lock
; Line 365
	mov	esi, DWORD PTR _item$[esp+24]
	push	DWORD PTR [esi+4]
	call	_sk_num
	add	esp, 20					; 00000014H
	cmp	eax, DWORD PTR [esi+8]
	jg	SHORT $LN3@def_add_in
$LL2@def_add_in:
; Line 366
	push	0
	push	DWORD PTR [esi+4]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@def_add_in
; Line 365
	push	DWORD PTR [esi+4]
	call	_sk_num
	add	esp, 4
	cmp	eax, DWORD PTR [esi+8]
	jle	SHORT $LL2@def_add_in
$LN3@def_add_in:
; Line 372
	mov	ebx, DWORD PTR [esi+8]
; Line 373
	push	edi
	push	ebx
	push	DWORD PTR [esi+4]
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR [esi+8], eax
	call	_sk_set
	add	esp, 12					; 0000000cH
$err$12:
; Line 375
	push	375					; 00000177H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	10					; 0000000aH
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 376
	mov	eax, ebx
	pop	esi
	pop	edi
	pop	ebx
; Line 377
	ret	0
$LN8@def_add_in:
; Line 367
	push	367					; 0000016fH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	104					; 00000068H
	push	15					; 0000000fH
	call	_ERR_put_error
; Line 368
	push	edi
	call	_CRYPTO_free
	add	esp, 24					; 00000018H
; Line 369
	jmp	SHORT $err$12
_def_add_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_get_class
_TEXT	SEGMENT
_d$ = -12						; size = 12
_class_index$ = 8					; size = 4
_def_get_class PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 314
	mov	eax, 12					; 0000000cH
	call	__chkstk
; Line 316
	cmp	DWORD PTR _ex_data, 0
	jne	SHORT $LN2@def_get_cl
	call	_ex_data_check
	test	eax, eax
	jne	SHORT $LN2@def_get_cl
; Line 342
	add	esp, 12					; 0000000cH
	ret	0
$LN2@def_get_cl:
	push	ebx
; Line 317
	mov	ebx, DWORD PTR _class_index$[esp+12]
	push	edi
; Line 318
	push	318					; 0000013eH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	mov	DWORD PTR _d$[esp+36], ebx
	call	_CRYPTO_lock
; Line 319
	lea	eax, DWORD PTR _d$[esp+36]
	push	eax
	push	DWORD PTR _ex_data
	call	_lh_retrieve
	mov	edi, eax
	add	esp, 24					; 00000018H
; Line 320
	test	edi, edi
	jne	SHORT $LN6@def_get_cl
; Line 321
	push	esi
	push	321					; 00000141H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	12					; 0000000cH
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 322
	test	esi, esi
	je	SHORT $LN9@def_get_cl
; Line 323
	mov	DWORD PTR [esi], ebx
; Line 324
	mov	DWORD PTR [esi+8], edi
; Line 325
	call	_sk_new_null
	mov	DWORD PTR [esi+4], eax
; Line 327
	push	esi
	test	eax, eax
	jne	SHORT $LN5@def_get_cl
	call	_CRYPTO_free
	add	esp, 4
	jmp	SHORT $LN9@def_get_cl
$LN5@def_get_cl:
; Line 333
	push	DWORD PTR _ex_data
	call	_lh_insert
	add	esp, 8
; Line 334
	mov	edi, esi
$LN9@def_get_cl:
	pop	esi
$LN6@def_get_cl:
; Line 338
	push	338					; 00000152H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	10					; 0000000aH
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 339
	test	edi, edi
	jne	SHORT $LN7@def_get_cl
; Line 340
	push	340					; 00000154H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	105					; 00000069H
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN7@def_get_cl:
; Line 341
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 342
	add	esp, 12					; 0000000cH
	ret	0
_def_get_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_cleanup_cb
_TEXT	SEGMENT
_a_void$ = 8						; size = 4
_def_cleanup_cb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 303
	push	esi
; Line 305
	mov	esi, DWORD PTR _a_void$[esp]
	push	OFFSET _def_cleanup_util_cb
	push	DWORD PTR [esi+4]
	call	_sk_pop_free
; Line 306
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
	pop	esi
; Line 307
	ret	0
_def_cleanup_cb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_cleanup_util_cb
_TEXT	SEGMENT
_funcs$ = 8						; size = 4
_def_cleanup_util_cb PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 294
	jmp	_CRYPTO_free
_def_cleanup_util_cb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ex_data_check
_TEXT	SEGMENT
_ex_data_check PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 276
	push	esi
; Line 278
	push	278					; 00000116H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	mov	esi, 1
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 279
	cmp	DWORD PTR _ex_data, 0
	jne	SHORT $LN2@ex_data_ch
	push	OFFSET _ex_class_item_LHASH_COMP
	push	OFFSET _ex_class_item_LHASH_HASH
	call	_lh_new
	xor	ecx, ecx
	mov	DWORD PTR _ex_data, eax
	add	esp, 8
	test	eax, eax
	cmove	esi, ecx
$LN2@ex_data_ch:
; Line 281
	push	281					; 00000119H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	10					; 0000000aH
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 282
	mov	eax, esi
	pop	esi
; Line 283
	ret	0
_ex_data_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ex_class_item_LHASH_COMP
_TEXT	SEGMENT
_arg1$ = 8						; size = 4
_arg2$ = 12						; size = 4
_ex_class_item_LHASH_COMP PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 266
	mov	eax, DWORD PTR _arg1$[esp-4]
	mov	ecx, DWORD PTR _arg2$[esp-4]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
; Line 269
	ret	0
_ex_class_item_LHASH_COMP ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ex_class_item_cmp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_ex_class_item_cmp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 266
	mov	eax, DWORD PTR _a$[esp-4]
	mov	ecx, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
; Line 267
	ret	0
_ex_class_item_cmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ex_class_item_LHASH_HASH
_TEXT	SEGMENT
_arg$ = 8						; size = 4
_ex_class_item_LHASH_HASH PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 262
	mov	eax, DWORD PTR _arg$[esp-4]
	mov	eax, DWORD PTR [eax]
	ret	0
_ex_class_item_LHASH_HASH ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ex_class_item_hash
_TEXT	SEGMENT
_a$ = 8							; size = 4
_ex_class_item_hash PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 259
	mov	eax, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR [eax]
; Line 260
	ret	0
_ex_class_item_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _impl_check
_TEXT	SEGMENT
_impl_check PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	add	esp, 32					; 00000020H
; Line 205
	ret	0
_impl_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_free_ex_data
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_obj$ = 12						; size = 4
_ad$ = 16						; size = 4
_int_free_ex_data PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 498
	push	edi
; Line 502
	xor	edi, edi
; Line 503
	cmp	DWORD PTR _ex_data, edi
	je	$LN15@int_free_e
; Line 505
	push	ebp
	push	DWORD PTR _class_index$[esp+4]
	call	_def_get_class
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	je	$LN31@int_free_e
; Line 507
	push	ebx
	push	esi
	push	507					; 000001fbH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	5
	call	_CRYPTO_lock
; Line 508
	push	DWORD PTR [ebp+4]
	call	_sk_num
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 509
	test	ebx, ebx
	jle	SHORT $skip$35
; Line 510
	push	510					; 000001feH
	lea	eax, DWORD PTR [ebx*4]
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 511
	test	edi, edi
	je	SHORT $skip$35
; Line 513
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $skip$35
$LL4@int_free_e:
; Line 514
	push	esi
	push	DWORD PTR [ebp+4]
	call	_sk_value
	mov	DWORD PTR [edi+esi*4], eax
	add	esp, 8
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL4@int_free_e
$skip$35:
; Line 517
	push	517					; 00000205H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	6
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 518
	test	ebx, ebx
	jle	SHORT $LN12@int_free_e
	test	edi, edi
	jne	SHORT $LN12@int_free_e
; Line 519
	push	519					; 00000207H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	107					; 0000006bH
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	pop	esi
	pop	ebx
	pop	ebp
	pop	edi
; Line 535
	ret	0
$LN12@int_free_e:
; Line 522
	mov	ebp, DWORD PTR _ad$[esp+12]
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN6@int_free_e
	npad	5
$LL7@int_free_e:
; Line 523
	mov	eax, DWORD PTR [edi+esi*4]
	test	eax, eax
	je	SHORT $LN5@int_free_e
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN5@int_free_e
; Line 638
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	jne	SHORT $LN18@int_free_e
; Line 639
	xor	ecx, ecx
	jmp	SHORT $LN21@int_free_e
$LN18@int_free_e:
; Line 640
	push	eax
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LN20@int_free_e
; Line 641
	xor	ecx, ecx
	jmp	SHORT $LN21@int_free_e
$LN20@int_free_e:
; Line 643
	push	esi
	push	DWORD PTR [ebp]
	call	_sk_value
	add	esp, 8
	mov	ecx, eax
$LN21@int_free_e:
; Line 525
	mov	eax, DWORD PTR [edi+esi*4]
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+12]
	push	esi
	push	ebp
	push	ecx
	push	DWORD PTR _obj$[esp+32]
	call	eax
	add	esp, 24					; 00000018H
$LN5@int_free_e:
; Line 522
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL7@int_free_e
$LN6@int_free_e:
; Line 529
	test	edi, edi
	je	SHORT $LN14@int_free_e
; Line 530
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN14@int_free_e:
; Line 531
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN32@int_free_e
; Line 532
	push	eax
	call	_sk_free
	add	esp, 4
; Line 533
	mov	DWORD PTR [ebp], 0
$LN32@int_free_e:
	pop	esi
	pop	ebx
$LN31@int_free_e:
	pop	ebp
$LN15@int_free_e:
	pop	edi
; Line 535
	ret	0
_int_free_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_dup_ex_data
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_item$1$ = -4						; size = 4
_class_index$ = 8					; size = 4
_to$ = 12						; size = 4
_from$ = 16						; size = 4
_int_dup_ex_data PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 456
	mov	eax, 8
	call	__chkstk
	push	ebp
; Line 461
	mov	ebp, DWORD PTR _from$[esp+8]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [ebp], edi
	jne	SHORT $LN8@int_dup_ex
; Line 463
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	ebp
; Line 494
	add	esp, 8
	ret	0
$LN8@int_dup_ex:
	push	ebx
; Line 464
	push	DWORD PTR _class_index$[esp+16]
	call	_def_get_class
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _item$1$[esp+20], ebx
	test	ebx, ebx
	jne	SHORT $LN9@int_dup_ex
	pop	ebx
	pop	edi
	pop	ebp
; Line 494
	add	esp, 8
	ret	0
$LN9@int_dup_ex:
	push	esi
; Line 466
	push	466					; 000001d2H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	5
	call	_CRYPTO_lock
; Line 467
	push	DWORD PTR [ebx+4]
	call	_sk_num
; Line 468
	push	DWORD PTR [ebp]
	mov	ebx, eax
	call	_sk_num
	add	esp, 24					; 00000018H
; Line 469
	cmp	eax, ebx
	cmovl	ebx, eax
; Line 471
	test	ebx, ebx
	jle	SHORT $skip$34
; Line 472
	push	472					; 000001d8H
	lea	eax, DWORD PTR [ebx*4]
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 473
	test	edi, edi
	je	SHORT $skip$34
; Line 475
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $skip$34
	mov	ebp, DWORD PTR _item$1$[esp+24]
	npad	6
$LL4@int_dup_ex:
; Line 476
	push	esi
	push	DWORD PTR [ebp+4]
	call	_sk_value
	mov	DWORD PTR [edi+esi*4], eax
	add	esp, 8
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL4@int_dup_ex
	mov	ebp, DWORD PTR _from$[esp+20]
$skip$34:
; Line 479
	push	479					; 000001dfH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	6
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 480
	test	ebx, ebx
	jle	SHORT $LN13@int_dup_ex
	test	edi, edi
	jne	SHORT $LN13@int_dup_ex
; Line 481
	push	481					; 000001e1H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	106					; 0000006aH
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 482
	xor	eax, eax
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 494
	add	esp, 8
	ret	0
$LN13@int_dup_ex:
; Line 484
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN6@int_dup_ex
	npad	2
$LL7@int_dup_ex:
; Line 638
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN21@int_dup_ex
$LN18@int_dup_ex:
; Line 640
	push	eax
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LN20@int_dup_ex
; Line 641
	xor	eax, eax
	jmp	SHORT $LN21@int_dup_ex
$LN20@int_dup_ex:
; Line 643
	push	esi
	push	DWORD PTR [ebp]
	call	_sk_value
	add	esp, 8
$LN21@int_dup_ex:
; Line 485
	mov	DWORD PTR _ptr$[esp+24], eax
; Line 486
	mov	ecx, DWORD PTR [edi+esi*4]
	test	ecx, ecx
	je	SHORT $LN14@int_dup_ex
	mov	edx, DWORD PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN14@int_dup_ex
; Line 487
	push	DWORD PTR [ecx+4]
	lea	eax, DWORD PTR _ptr$[esp+28]
	push	DWORD PTR [ecx]
	push	esi
	push	eax
	push	ebp
	push	DWORD PTR _to$[esp+40]
	call	edx
	mov	eax, DWORD PTR _ptr$[esp+48]
	add	esp, 24					; 00000018H
$LN14@int_dup_ex:
; Line 489
	push	eax
	push	esi
	push	DWORD PTR _to$[esp+28]
	call	_CRYPTO_set_ex_data
	inc	esi
	add	esp, 12					; 0000000cH
	cmp	esi, ebx
	jl	SHORT $LL7@int_dup_ex
$LN6@int_dup_ex:
; Line 491
	test	edi, edi
	je	SHORT $LN15@int_dup_ex
; Line 492
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN15@int_dup_ex:
; Line 493
	pop	esi
	pop	ebx
	pop	edi
	mov	eax, 1
	pop	ebp
; Line 494
	add	esp, 8
	ret	0
_int_dup_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_new_ex_data
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_obj$ = 12						; size = 4
_ad$ = 16						; size = 4
_int_new_ex_data PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 417
	push	ebp
	push	edi
; Line 421
	push	DWORD PTR _class_index$[esp+4]
	xor	edi, edi
	call	_def_get_class
	mov	ebp, eax
	add	esp, 4
; Line 422
	test	ebp, ebp
	jne	SHORT $LN8@int_new_ex
	pop	edi
	pop	ebp
; Line 451
	ret	0
$LN8@int_new_ex:
; Line 425
	mov	eax, DWORD PTR _ad$[esp+4]
	push	ebx
	push	esi
; Line 426
	push	426					; 000001aaH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	5
	mov	DWORD PTR [eax], edi
	call	_CRYPTO_lock
; Line 427
	push	DWORD PTR [ebp+4]
	call	_sk_num
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 428
	test	ebx, ebx
	jle	SHORT $skip$32
; Line 429
	push	429					; 000001adH
	lea	eax, DWORD PTR [ebx*4]
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 430
	test	edi, edi
	je	SHORT $skip$32
; Line 432
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $skip$32
	npad	5
$LL4@int_new_ex:
; Line 433
	push	esi
	push	DWORD PTR [ebp+4]
	call	_sk_value
	mov	DWORD PTR [edi+esi*4], eax
	add	esp, 8
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL4@int_new_ex
$skip$32:
; Line 436
	push	436					; 000001b4H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	6
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 437
	test	ebx, ebx
	jle	SHORT $LN11@int_new_ex
	test	edi, edi
	jne	SHORT $LN11@int_new_ex
; Line 438
	push	438					; 000001b6H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	108					; 0000006cH
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 439
	xor	eax, eax
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 451
	ret	0
$LN11@int_new_ex:
; Line 441
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN6@int_new_ex
$LL7@int_new_ex:
; Line 442
	mov	eax, DWORD PTR [edi+esi*4]
	test	eax, eax
	je	SHORT $LN5@int_new_ex
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@int_new_ex
; Line 638
	mov	ebp, DWORD PTR _ad$[esp+12]
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	jne	SHORT $LN16@int_new_ex
; Line 639
	xor	ecx, ecx
	jmp	SHORT $LN19@int_new_ex
$LN16@int_new_ex:
; Line 640
	push	eax
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LN18@int_new_ex
; Line 641
	xor	ecx, ecx
	jmp	SHORT $LN19@int_new_ex
$LN18@int_new_ex:
; Line 643
	push	esi
	push	DWORD PTR [ebp]
	call	_sk_value
	add	esp, 8
	mov	ecx, eax
$LN19@int_new_ex:
; Line 444
	mov	eax, DWORD PTR [edi+esi*4]
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	push	esi
	push	ebp
	push	ecx
	push	DWORD PTR _obj$[esp+32]
	call	eax
	add	esp, 24					; 00000018H
$LN5@int_new_ex:
; Line 441
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL7@int_new_ex
$LN6@int_new_ex:
; Line 448
	test	edi, edi
	je	SHORT $LN13@int_new_ex
; Line 449
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN13@int_new_ex:
; Line 450
	pop	esi
	pop	ebx
	pop	edi
	mov	eax, 1
	pop	ebp
; Line 451
	ret	0
_int_new_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_get_new_index
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_argl$ = 12						; size = 4
_argp$ = 16						; size = 4
_new_func$ = 20						; size = 4
_dup_func$ = 24						; size = 4
_free_func$ = 28					; size = 4
_int_get_new_index PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 404
	push	DWORD PTR _class_index$[esp-4]
	call	_def_get_class
	add	esp, 4
; Line 405
	test	eax, eax
	jne	SHORT $LN2@int_get_ne
; Line 406
	or	eax, -1
; Line 408
	ret	0
$LN2@int_get_ne:
; Line 407
	mov	DWORD PTR _class_index$[esp-4], eax
	jmp	_def_add_index
_int_get_new_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_cleanup
_TEXT	SEGMENT
_int_cleanup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 393
	mov	eax, DWORD PTR _ex_data
	test	eax, eax
	jne	SHORT $LN2@int_cleanu
	call	_ex_data_check
	test	eax, eax
	je	SHORT $LN1@int_cleanu
	mov	eax, DWORD PTR _ex_data
$LN2@int_cleanu:
; Line 394
	push	OFFSET _def_cleanup_cb
	push	eax
	call	_lh_doall
; Line 395
	push	DWORD PTR _ex_data
	call	_lh_free
	add	esp, 12					; 0000000cH
; Line 396
	mov	DWORD PTR _ex_data, 0
; Line 397
	mov	DWORD PTR _impl, 0
$LN1@int_cleanu:
; Line 398
	ret	0
_int_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_new_class
_TEXT	SEGMENT
_int_new_class PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 383
	push	esi
; Line 385
	push	385					; 00000181H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 386
	mov	ecx, DWORD PTR _ex_class
	mov	esi, ecx
; Line 387
	push	387					; 00000183H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	inc	ecx
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _ex_class, ecx
	call	_CRYPTO_lock
	add	esp, 32					; 00000020H
; Line 388
	mov	eax, esi
	pop	esi
; Line 389
	ret	0
_int_new_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cleanup_all_ex_data
_TEXT	SEGMENT
_CRYPTO_cleanup_all_ex_data PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 560
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_cle
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _impl
	add	esp, 32					; 00000020H
$LN4@CRYPTO_cle:
; Line 560
	mov	eax, DWORD PTR [eax+4]
	jmp	eax
_CRYPTO_cleanup_all_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_get_ex_data
_TEXT	SEGMENT
_ad$ = 8						; size = 4
_idx$ = 12						; size = 4
_CRYPTO_get_ex_data PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 637
	push	esi
; Line 638
	mov	esi, DWORD PTR _ad$[esp]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN2@CRYPTO_get
$LN7@CRYPTO_get:
; Line 639
	xor	eax, eax
	pop	esi
; Line 644
	ret	0
$LN2@CRYPTO_get:
; Line 640
	push	eax
	call	_sk_num
	mov	ecx, DWORD PTR _idx$[esp+4]
	add	esp, 4
	cmp	ecx, eax
	jge	SHORT $LN7@CRYPTO_get
; Line 643
	push	ecx
	push	DWORD PTR [esi]
	call	_sk_value
	add	esp, 8
	pop	esi
; Line 644
	ret	0
_CRYPTO_get_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_set_ex_data
_TEXT	SEGMENT
_ad$ = 8						; size = 4
_idx$ = 12						; size = 4
_val$ = 16						; size = 4
_CRYPTO_set_ex_data PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 610
	push	edi
; Line 613
	mov	edi, DWORD PTR _ad$[esp]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN5@CRYPTO_set
; Line 614
	call	_sk_new_null
	mov	DWORD PTR [edi], eax
	test	eax, eax
	jne	SHORT $LN5@CRYPTO_set
; Line 615
	push	615					; 00000267H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	102					; 00000066H
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 616
	xor	eax, eax
	pop	edi
; Line 630
	ret	0
$LN5@CRYPTO_set:
	push	ebx
	push	esi
; Line 619
	push	DWORD PTR [edi]
	call	_sk_num
; Line 621
	mov	ebx, DWORD PTR _idx$[esp+12]
	mov	esi, eax
	add	esp, 4
	cmp	esi, ebx
	jg	SHORT $LN3@CRYPTO_set
$LL2@CRYPTO_set:
; Line 622
	push	0
	push	DWORD PTR [edi]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@CRYPTO_set
; Line 626
	inc	esi
	cmp	esi, ebx
	jle	SHORT $LL2@CRYPTO_set
$LN3@CRYPTO_set:
; Line 628
	push	DWORD PTR _val$[esp+8]
	push	ebx
	push	DWORD PTR [edi]
	call	_sk_set
	add	esp, 12					; 0000000cH
; Line 629
	mov	eax, 1
	pop	esi
	pop	ebx
	pop	edi
; Line 630
	ret	0
$LN9@CRYPTO_set:
; Line 623
	push	623					; 0000026fH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	65					; 00000041H
	push	102					; 00000066H
	push	15					; 0000000fH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 624
	xor	eax, eax
	pop	esi
	pop	ebx
	pop	edi
; Line 630
	ret	0
_CRYPTO_set_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_free_ex_data
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_obj$ = 12						; size = 4
_ad$ = 16						; size = 4
_CRYPTO_free_ex_data PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 602
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_fre
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _impl
	add	esp, 32					; 00000020H
$LN4@CRYPTO_fre:
; Line 602
	mov	eax, DWORD PTR [eax+20]
	jmp	eax
_CRYPTO_free_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_dup_ex_data
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_to$ = 12						; size = 4
_from$ = 16						; size = 4
_CRYPTO_dup_ex_data PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 593
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_dup
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _impl
	add	esp, 32					; 00000020H
$LN4@CRYPTO_dup:
; Line 593
	mov	eax, DWORD PTR [eax+16]
	jmp	eax
_CRYPTO_dup_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_new_ex_data
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_obj$ = 12						; size = 4
_ad$ = 16						; size = 4
_CRYPTO_new_ex_data PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 583
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_new
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _impl
	add	esp, 32					; 00000020H
$LN4@CRYPTO_new:
; Line 583
	mov	eax, DWORD PTR [eax+12]
	jmp	eax
_CRYPTO_new_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_get_ex_new_index
_TEXT	SEGMENT
_class_index$ = 8					; size = 4
_argl$ = 12						; size = 4
_argp$ = 16						; size = 4
_new_func$ = 20						; size = 4
_dup_func$ = 24						; size = 4
_free_func$ = 28					; size = 4
_CRYPTO_get_ex_new_index PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 570
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_get
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _impl
	add	esp, 32					; 00000020H
$LN4@CRYPTO_get:
; Line 571
	mov	eax, DWORD PTR [eax+8]
	jmp	eax
_CRYPTO_get_ex_new_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ex_data_new_class
_TEXT	SEGMENT
_CRYPTO_ex_data_new_class PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 549
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_ex_
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _impl
	add	esp, 32					; 00000020H
$LN4@CRYPTO_ex_:
; Line 549
	mov	eax, DWORD PTR [eax]
	jmp	eax
_CRYPTO_ex_data_new_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_set_ex_data_implementation
_TEXT	SEGMENT
_i$ = 8							; size = 4
_CRYPTO_set_ex_data_implementation PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 220
	push	esi
; Line 222
	push	222					; 000000deH
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	xor	esi, esi
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 223
	cmp	DWORD PTR _impl, esi
	jne	SHORT $LN2@CRYPTO_set
; Line 224
	mov	eax, DWORD PTR _i$[esp]
; Line 225
	mov	esi, 1
	mov	DWORD PTR _impl, eax
$LN2@CRYPTO_set:
; Line 227
	push	227					; 000000e3H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	10					; 0000000aH
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 228
	mov	eax, esi
	pop	esi
; Line 229
	ret	0
_CRYPTO_set_ex_data_implementation ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_get_ex_data_implementation
_TEXT	SEGMENT
_CRYPTO_get_ex_data_implementation PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ex_data.c
; Line 216
	mov	eax, DWORD PTR _impl
	test	eax, eax
	jne	SHORT $LN4@CRYPTO_get
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	push	2
	push	9
	call	_CRYPTO_lock
; Line 202
	mov	eax, DWORD PTR _impl
	mov	ecx, OFFSET _impl_default
; Line 204
	push	204					; 000000ccH
	test	eax, eax
	push	OFFSET ??_C@_0BD@BACHDDOD@?4?2crypto?2ex_data?4c?$AA@
	cmovne	ecx, eax
	push	2
	push	10					; 0000000aH
	mov	DWORD PTR _impl, ecx
	call	_CRYPTO_lock
; Line 216
	mov	eax, DWORD PTR _impl
; Line 204
	add	esp, 32					; 00000020H
$LN4@CRYPTO_get:
; Line 217
	ret	0
_CRYPTO_get_ex_data_implementation ENDP
_TEXT	ENDS
END
