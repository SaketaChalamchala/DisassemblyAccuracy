; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\pkcs12\p12_key.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_PKCS12_key_gen_asc
PUBLIC	_PKCS12_key_gen_uni
PUBLIC	??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_bin2bn:PROC
EXTRN	_BN_bn2bin:PROC
EXTRN	_BN_add:PROC
EXTRN	_BN_add_word:PROC
EXTRN	_BN_free:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_MD_block_size:PROC
EXTRN	_EVP_MD_CTX_init:PROC
EXTRN	_EVP_MD_CTX_cleanup:PROC
EXTRN	_EVP_DigestInit_ex:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal_ex:PROC
EXTRN	_OPENSSL_asc2uni:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
CONST	SEGMENT
??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@ DB '.\crypto\pkcs1'
	DB	'2\p12_key.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PKCS12_key_gen_uni
_TEXT	SEGMENT
_B$1$ = -68						; size = 4
_Ai$1$ = -64						; size = 4
_I$1$ = -60						; size = 4
_u$1$ = -56						; size = 4
_Bpl1$1$ = -52						; size = 4
_j$3$ = -48						; size = 4
_Plen$1$ = -48						; size = 4
_Ilen$1$ = -44						; size = 4
_D$1$ = -40						; size = 4
_Slen$1$ = -36						; size = 4
_Ij$1$ = -32						; size = 4
_ret$1$ = -28						; size = 4
_ctx$ = -24						; size = 24
_pass$ = 8						; size = 4
_passlen$ = 12						; size = 4
_salt$ = 16						; size = 4
_saltlen$ = 20						; size = 4
_id$ = 24						; size = 4
_iter$ = 28						; size = 4
_n$ = 32						; size = 4
_out$ = 36						; size = 4
_md_type$ = 40						; size = 4
_PKCS12_key_gen_uni PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pkcs12\p12_key.c
; Line 109
	mov	eax, 68					; 00000044H
	call	__chkstk
	push	ebx
; Line 128
	lea	eax, DWORD PTR _ctx$[esp+72]
	mov	DWORD PTR _ret$1$[esp+72], 0
	push	esi
	push	eax
	call	_EVP_MD_CTX_init
; Line 137
	mov	ebx, DWORD PTR _md_type$[esp+76]
	push	ebx
	call	_EVP_MD_block_size
; Line 138
	push	ebx
	mov	esi, eax
	call	_EVP_MD_size
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u$1$[esp+76], ebx
; Line 139
	test	ebx, ebx
	jns	SHORT $LN23@PKCS12_key
; Line 140
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 229
	add	esp, 68					; 00000044H
	ret	0
$LN23@PKCS12_key:
	push	ebp
	push	edi
; Line 141
	push	141					; 0000008dH
	push	OFFSET ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
	push	esi
	call	_CRYPTO_malloc
; Line 142
	push	142					; 0000008eH
	push	OFFSET ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
	push	ebx
	mov	DWORD PTR _D$1$[esp+108], eax
	call	_CRYPTO_malloc
; Line 143
	push	143					; 0000008fH
	lea	ecx, DWORD PTR [esi+1]
	mov	edi, eax
	push	OFFSET ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
	push	ecx
	mov	DWORD PTR _Ai$1$[esp+120], edi
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 36					; 00000024H
; Line 144
	mov	eax, DWORD PTR _saltlen$[esp+80]
	dec	eax
	mov	DWORD PTR _B$1$[esp+84], ebx
	add	eax, esi
	cdq
	idiv	esi
	mov	ecx, eax
; Line 145
	mov	eax, DWORD PTR _passlen$[esp+80]
	imul	ecx, esi
	mov	DWORD PTR _Slen$1$[esp+84], ecx
	test	eax, eax
	je	SHORT $LN24@PKCS12_key
; Line 146
	dec	eax
	add	eax, esi
	cdq
	idiv	esi
	imul	eax, esi
	jmp	SHORT $LN104@PKCS12_key
$LN24@PKCS12_key:
; Line 148
	xor	eax, eax
$LN104@PKCS12_key:
; Line 150
	push	150					; 00000096H
	mov	DWORD PTR _Plen$1$[esp+88], eax
	add	eax, ecx
	push	OFFSET ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
	push	eax
	mov	DWORD PTR _Ilen$1$[esp+96], eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _I$1$[esp+84], eax
; Line 151
	call	_BN_new
	mov	ebp, eax
	mov	DWORD PTR _Ij$1$[esp+84], ebp
; Line 152
	call	_BN_new
; Line 153
	mov	edx, DWORD PTR _D$1$[esp+84]
	mov	DWORD PTR _Bpl1$1$[esp+84], eax
	test	edx, edx
	je	$err$109
	test	edi, edi
	je	$err$109
	test	ebx, ebx
	je	$err$109
	cmp	DWORD PTR _I$1$[esp+84], 0
	je	$err$109
	test	ebp, ebp
	je	$err$109
	test	eax, eax
	je	$err$109
; Line 155
	test	esi, esi
	jle	SHORT $LN3@PKCS12_key
; Line 156
	movzx	eax, BYTE PTR _id$[esp+80]
	mov	ecx, esi
	mov	ebx, ecx
	imul	eax, 16843009				; 01010101H
	shr	ecx, 2
	mov	edi, edx
	rep stosd
	mov	ecx, ebx
	mov	ebx, DWORD PTR _B$1$[esp+84]
	and	ecx, 3
	rep stosb
	mov	edi, DWORD PTR _Ai$1$[esp+84]
$LN3@PKCS12_key:
; Line 158
	cmp	DWORD PTR _Slen$1$[esp+84], 0
	mov	ecx, DWORD PTR _I$1$[esp+84]
	jle	SHORT $LN6@PKCS12_key
	mov	ebp, DWORD PTR _salt$[esp+80]
	xor	edi, edi
	mov	ebx, DWORD PTR _Slen$1$[esp+84]
	npad	1
$LL7@PKCS12_key:
; Line 159
	mov	eax, edi
	inc	edi
	cdq
	idiv	DWORD PTR _saltlen$[esp+80]
	mov	al, BYTE PTR [edx+ebp]
	mov	BYTE PTR [ecx], al
	inc	ecx
	cmp	edi, ebx
	jl	SHORT $LL7@PKCS12_key
	mov	ebp, DWORD PTR _Ij$1$[esp+84]
	mov	ebx, DWORD PTR _B$1$[esp+84]
	mov	edi, DWORD PTR _Ai$1$[esp+84]
$LN6@PKCS12_key:
; Line 160
	cmp	DWORD PTR _Plen$1$[esp+84], 0
	jle	SHORT $LN9@PKCS12_key
	mov	ebp, DWORD PTR _pass$[esp+80]
	xor	ebx, ebx
	mov	edi, DWORD PTR _Plen$1$[esp+84]
	npad	1
$LL10@PKCS12_key:
; Line 161
	mov	eax, ebx
	lea	ecx, DWORD PTR [ecx+1]
	cdq
	inc	ebx
	idiv	DWORD PTR _passlen$[esp+80]
	mov	al, BYTE PTR [edx+ebp]
	mov	BYTE PTR [ecx-1], al
	cmp	ebx, edi
	jl	SHORT $LL10@PKCS12_key
	mov	ebp, DWORD PTR _Ij$1$[esp+84]
	mov	ebx, DWORD PTR _B$1$[esp+84]
	mov	edi, DWORD PTR _Ai$1$[esp+84]
$LN9@PKCS12_key:
; Line 166
	push	0
	push	DWORD PTR _md_type$[esp+84]
	lea	eax, DWORD PTR _ctx$[esp+92]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
	npad	4
$LL11@PKCS12_key:
	push	esi
	push	DWORD PTR _D$1$[esp+88]
	lea	eax, DWORD PTR _ctx$[esp+92]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
	push	DWORD PTR _Ilen$1$[esp+84]
	lea	eax, DWORD PTR _ctx$[esp+88]
	push	DWORD PTR _I$1$[esp+88]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
	push	0
	lea	eax, DWORD PTR _ctx$[esp+88]
	push	edi
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 168
	mov	edi, 1
	cmp	DWORD PTR _iter$[esp+80], edi
	jle	SHORT $LN15@PKCS12_key
	npad	6
$LL16@PKCS12_key:
; Line 171
	push	0
	push	DWORD PTR _md_type$[esp+84]
	lea	eax, DWORD PTR _ctx$[esp+92]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
	push	DWORD PTR _u$1$[esp+84]
	lea	eax, DWORD PTR _ctx$[esp+88]
	push	DWORD PTR _Ai$1$[esp+88]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
	push	0
	push	DWORD PTR _Ai$1$[esp+88]
	lea	eax, DWORD PTR _ctx$[esp+92]
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 168
	inc	edi
	cmp	edi, DWORD PTR _iter$[esp+80]
	jl	SHORT $LL16@PKCS12_key
$LN15@PKCS12_key:
; Line 174
	mov	ecx, DWORD PTR _u$1$[esp+84]
	mov	eax, ecx
	cmp	DWORD PTR _n$[esp+80], ecx
	mov	edi, DWORD PTR _Ai$1$[esp+84]
	cmovl	eax, DWORD PTR _n$[esp+80]
	push	eax
	push	edi
	push	DWORD PTR _out$[esp+88]
	call	_memcpy
; Line 175
	mov	eax, DWORD PTR _u$1$[esp+96]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _n$[esp+80]
	cmp	eax, ecx
	jge	$LN61@PKCS12_key
; Line 184
	add	DWORD PTR _out$[esp+80], eax
	sub	ecx, eax
	mov	DWORD PTR _n$[esp+80], ecx
; Line 185
	xor	ecx, ecx
	test	esi, esi
	jle	SHORT $LN18@PKCS12_key
	npad	5
$LL19@PKCS12_key:
; Line 186
	mov	eax, ecx
	cdq
	idiv	DWORD PTR _u$1$[esp+84]
	mov	al, BYTE PTR [edx+edi]
	mov	BYTE PTR [ecx+ebx], al
	inc	ecx
	cmp	ecx, esi
	jl	SHORT $LL19@PKCS12_key
$LN18@PKCS12_key:
; Line 188
	push	DWORD PTR _Bpl1$1$[esp+84]
	push	esi
	push	ebx
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 190
	push	1
	push	DWORD PTR _Bpl1$1$[esp+88]
	call	_BN_add_word
	add	esp, 8
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 192
	cmp	DWORD PTR _Ilen$1$[esp+84], 0
	mov	DWORD PTR _j$3$[esp+84], 0
	jle	$LN21@PKCS12_key
	mov	edi, DWORD PTR _I$1$[esp+84]
$LL22@PKCS12_key:
; Line 193
	push	ebp
	push	esi
	push	edi
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 195
	push	DWORD PTR _Bpl1$1$[esp+84]
	push	ebp
	push	ebp
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 197
	push	ebx
	push	ebp
	call	_BN_bn2bin
	add	esp, 8
	test	eax, eax
	je	$LN97@PKCS12_key
; Line 199
	push	ebp
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	lea	ebx, DWORD PTR [edx+eax]
	sar	ebx, 3
; Line 201
	cmp	ebx, esi
	jle	SHORT $LN105@PKCS12_key
; Line 202
	mov	ebx, DWORD PTR _B$1$[esp+84]
	push	ebx
	push	ebp
	call	_BN_bn2bin
	add	esp, 8
	test	eax, eax
	je	$err$109
; Line 204
	push	esi
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN20@PKCS12_key
$LN105@PKCS12_key:
; Line 207
	jge	SHORT $LN41@PKCS12_key
; Line 208
	mov	eax, esi
	sub	eax, ebx
	push	eax
	push	0
	push	edi
	call	_memset
; Line 209
	mov	eax, DWORD PTR _j$3$[esp+96]
	sub	eax, ebx
	add	eax, DWORD PTR _I$1$[esp+96]
	add	eax, esi
	push	eax
	push	ebp
	call	_BN_bn2bin
	add	esp, 20					; 00000014H
; Line 212
	jmp	SHORT $LN107@PKCS12_key
$LN41@PKCS12_key:
	push	edi
	push	ebp
	call	_BN_bn2bin
	add	esp, 8
$LN107@PKCS12_key:
	test	eax, eax
	je	SHORT $LN97@PKCS12_key
$LN20@PKCS12_key:
; Line 192
	mov	ebx, DWORD PTR _j$3$[esp+84]
	add	edi, esi
	add	ebx, esi
	cmp	ebx, DWORD PTR _Ilen$1$[esp+84]
	mov	DWORD PTR _j$3$[esp+84], ebx
	mov	ebx, DWORD PTR _B$1$[esp+84]
	jl	$LL22@PKCS12_key
	mov	edi, DWORD PTR _Ai$1$[esp+84]
$LN21@PKCS12_key:
; Line 166
	push	0
	push	DWORD PTR _md_type$[esp+84]
	lea	eax, DWORD PTR _ctx$[esp+92]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL11@PKCS12_key
$LN97@PKCS12_key:
	mov	ebx, DWORD PTR _B$1$[esp+84]
$err$109:
; Line 218
	push	218					; 000000daH
	push	OFFSET ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
	push	65					; 00000041H
	push	111					; 0000006fH
	push	35					; 00000023H
	call	_ERR_put_error
	mov	edi, DWORD PTR _Ai$1$[esp+104]
	add	esp, 20					; 00000014H
$end$110:
; Line 221
	push	edi
	call	_CRYPTO_free
; Line 222
	push	ebx
	call	_CRYPTO_free
; Line 223
	push	DWORD PTR _D$1$[esp+92]
	call	_CRYPTO_free
; Line 224
	push	DWORD PTR _I$1$[esp+96]
	call	_CRYPTO_free
; Line 225
	push	ebp
	call	_BN_free
; Line 226
	push	DWORD PTR _Bpl1$1$[esp+104]
	call	_BN_free
; Line 227
	lea	eax, DWORD PTR _ctx$[esp+108]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 228
	mov	eax, DWORD PTR _ret$1$[esp+112]
	add	esp, 28					; 0000001cH
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 229
	add	esp, 68					; 00000044H
	ret	0
$LN61@PKCS12_key:
; Line 181
	mov	ebx, DWORD PTR _B$1$[esp+84]
	mov	DWORD PTR _ret$1$[esp+84], 1
	jmp	SHORT $end$110
_PKCS12_key_gen_uni ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PKCS12_key_gen_asc
_TEXT	SEGMENT
_uniplen$ = -4						; size = 4
_unipass$ = 8						; size = 4
_pass$ = 8						; size = 4
_passlen$ = 12						; size = 4
_salt$ = 16						; size = 4
_saltlen$ = 20						; size = 4
_id$ = 24						; size = 4
_iter$ = 28						; size = 4
_n$ = 32						; size = 4
_out$ = 36						; size = 4
_md_type$ = 40						; size = 4
_PKCS12_key_gen_asc PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pkcs12\p12_key.c
; Line 83
	mov	eax, 4
	call	__chkstk
; Line 88
	mov	eax, DWORD PTR _pass$[esp]
	test	eax, eax
	jne	SHORT $LN2@PKCS12_key
; Line 90
	xor	ecx, ecx
	mov	DWORD PTR _unipass$[esp], eax
	mov	DWORD PTR _uniplen$[esp+4], ecx
	jmp	SHORT $LN4@PKCS12_key
$LN2@PKCS12_key:
; Line 91
	lea	ecx, DWORD PTR _uniplen$[esp+4]
	push	ecx
	lea	ecx, DWORD PTR _unipass$[esp+4]
	push	ecx
	push	DWORD PTR _passlen$[esp+8]
	push	eax
	call	_OPENSSL_asc2uni
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN8@PKCS12_key
; Line 92
	push	92					; 0000005cH
	push	OFFSET ??_C@_0BK@LAJAIGBF@?4?2crypto?2pkcs12?2p12_key?4c?$AA@
	push	65					; 00000041H
	push	110					; 0000006eH
	push	35					; 00000023H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 93
	xor	eax, eax
; Line 104
	pop	ecx
	ret	0
$LN8@PKCS12_key:
; Line 93
	mov	eax, DWORD PTR _unipass$[esp]
	mov	ecx, DWORD PTR _uniplen$[esp+4]
$LN4@PKCS12_key:
; Line 95
	push	esi
	push	DWORD PTR _md_type$[esp+4]
	push	DWORD PTR _out$[esp+8]
	push	DWORD PTR _n$[esp+12]
	push	DWORD PTR _iter$[esp+16]
	push	DWORD PTR _id$[esp+20]
	push	DWORD PTR _saltlen$[esp+24]
	push	DWORD PTR _salt$[esp+28]
	push	ecx
	push	eax
	call	_PKCS12_key_gen_uni
	mov	esi, eax
	add	esp, 36					; 00000024H
; Line 97
	test	esi, esi
	jg	SHORT $LN5@PKCS12_key
; Line 98
	xor	eax, eax
	pop	esi
; Line 104
	pop	ecx
	ret	0
$LN5@PKCS12_key:
; Line 99
	mov	eax, DWORD PTR _unipass$[esp+4]
	test	eax, eax
	je	SHORT $LN6@PKCS12_key
; Line 100
	push	DWORD PTR _uniplen$[esp+8]
	push	eax
	call	_OPENSSL_cleanse
; Line 101
	push	DWORD PTR _unipass$[esp+12]
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN6@PKCS12_key:
; Line 103
	mov	eax, esi
	pop	esi
; Line 104
	pop	ecx
	ret	0
_PKCS12_key_gen_asc ENDP
_TEXT	ENDS
END
