; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_X509_version
CONST	SEGMENT
_X509_version DB 'X.509 part of OpenSSL 1.0.2h  3 May 2016', 00H
CONST	ENDS
PUBLIC	_X509_STORE_CTX_set_depth
PUBLIC	_X509_STORE_CTX_new
PUBLIC	_X509_STORE_CTX_free
PUBLIC	_X509_STORE_CTX_init
PUBLIC	_X509_STORE_CTX_trusted_stack
PUBLIC	_X509_STORE_CTX_cleanup
PUBLIC	_X509_STORE_CTX_get_ex_new_index
PUBLIC	_X509_STORE_CTX_set_ex_data
PUBLIC	_X509_STORE_CTX_get_ex_data
PUBLIC	_X509_STORE_CTX_get_error
PUBLIC	_X509_STORE_CTX_set_error
PUBLIC	_X509_STORE_CTX_get_error_depth
PUBLIC	_X509_STORE_CTX_get_current_cert
PUBLIC	_X509_STORE_CTX_get0_current_issuer
PUBLIC	_X509_STORE_CTX_get0_current_crl
PUBLIC	_X509_STORE_CTX_get0_parent_ctx
PUBLIC	_X509_STORE_CTX_get_chain
PUBLIC	_X509_STORE_CTX_get1_chain
PUBLIC	_X509_STORE_CTX_set_cert
PUBLIC	_X509_STORE_CTX_set_chain
PUBLIC	_X509_STORE_CTX_set0_crls
PUBLIC	_X509_STORE_CTX_set_purpose
PUBLIC	_X509_STORE_CTX_set_trust
PUBLIC	_X509_STORE_CTX_purpose_inherit
PUBLIC	_X509_STORE_CTX_set_flags
PUBLIC	_X509_STORE_CTX_set_time
PUBLIC	_X509_STORE_CTX_set_verify_cb
PUBLIC	_X509_STORE_CTX_get0_policy_tree
PUBLIC	_X509_STORE_CTX_get_explicit_policy
PUBLIC	_X509_STORE_CTX_get0_param
PUBLIC	_X509_STORE_CTX_set0_param
PUBLIC	_X509_STORE_CTX_set_default
PUBLIC	_X509_cmp_time
PUBLIC	_X509_cmp_current_time
PUBLIC	_X509_time_adj
PUBLIC	_X509_time_adj_ex
PUBLIC	_X509_gmtime_adj
PUBLIC	_X509_get_pubkey_parameters
PUBLIC	_X509_CRL_diff
PUBLIC	_X509_verify_cert
PUBLIC	??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ ; `string'
PUBLIC	??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@ ; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
EXTRN	__imp___time64:PROC
EXTRN	__imp__getenv:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_set:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_free:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_delete_ptr:PROC
EXTRN	_sk_push:PROC
EXTRN	_sk_pop:PROC
EXTRN	_sk_dup:PROC
EXTRN	_CRYPTO_get_ex_new_index:PROC
EXTRN	_CRYPTO_new_ex_data:PROC
EXTRN	_CRYPTO_free_ex_data:PROC
EXTRN	_CRYPTO_set_ex_data:PROC
EXTRN	_CRYPTO_get_ex_data:PROC
EXTRN	_CRYPTO_add_lock:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ASN1_INTEGER_cmp:PROC
EXTRN	_ASN1_UTCTIME_adj:PROC
EXTRN	_ASN1_GENERALIZEDTIME_adj:PROC
EXTRN	_ASN1_OCTET_STRING_cmp:PROC
EXTRN	_ASN1_TIME_adj:PROC
EXTRN	_EVP_PKEY_free:PROC
EXTRN	_EVP_PKEY_copy_parameters:PROC
EXTRN	_EVP_PKEY_missing_parameters:PROC
EXTRN	_X509_STORE_get1_certs:PROC
EXTRN	_X509_STORE_get1_crls:PROC
EXTRN	_X509_STORE_CTX_get1_issuer:PROC
EXTRN	_X509_VERIFY_PARAM_new:PROC
EXTRN	_X509_VERIFY_PARAM_free:PROC
EXTRN	_X509_VERIFY_PARAM_inherit:PROC
EXTRN	_X509_VERIFY_PARAM_set_flags:PROC
EXTRN	_X509_VERIFY_PARAM_set_depth:PROC
EXTRN	_X509_VERIFY_PARAM_set_time:PROC
EXTRN	_X509_VERIFY_PARAM_lookup:PROC
EXTRN	_X509_policy_check:PROC
EXTRN	_X509_policy_tree_free:PROC
EXTRN	_X509_verify:PROC
EXTRN	_X509_CRL_verify:PROC
EXTRN	_X509_CRL_sign:PROC
EXTRN	_X509_REVOKED_dup:PROC
EXTRN	_X509_free:PROC
EXTRN	_X509_REVOKED_free:PROC
EXTRN	_X509_CRL_new:PROC
EXTRN	_X509_CRL_free:PROC
EXTRN	_X509_CRL_add0_revoked:PROC
EXTRN	_X509_CRL_get0_by_serial:PROC
EXTRN	_X509_CRL_get0_by_cert:PROC
EXTRN	_X509_get_issuer_name:PROC
EXTRN	_X509_get_subject_name:PROC
EXTRN	_X509_get_pubkey:PROC
EXTRN	_X509_CRL_set_version:PROC
EXTRN	_X509_CRL_set_issuer_name:PROC
EXTRN	_X509_CRL_set_lastUpdate:PROC
EXTRN	_X509_CRL_set_nextUpdate:PROC
EXTRN	_X509_chain_check_suiteb:PROC
EXTRN	_X509_CRL_check_suiteb:PROC
EXTRN	_X509_chain_up_ref:PROC
EXTRN	_X509_cmp:PROC
EXTRN	_X509_NAME_cmp:PROC
EXTRN	_X509_CRL_get_ext_count:PROC
EXTRN	_X509_CRL_get_ext_by_NID:PROC
EXTRN	_X509_CRL_get_ext:PROC
EXTRN	_X509_CRL_add_ext:PROC
EXTRN	_X509_CRL_add1_ext_i2d:PROC
EXTRN	_X509_EXTENSION_get_data:PROC
EXTRN	_X509_check_trust:PROC
EXTRN	_X509_TRUST_get_by_id:PROC
EXTRN	_GENERAL_NAME_cmp:PROC
EXTRN	_NAME_CONSTRAINTS_check:PROC
EXTRN	_X509_check_ca:PROC
EXTRN	_X509_check_purpose:PROC
EXTRN	_X509_check_issued:PROC
EXTRN	_X509_check_akid:PROC
EXTRN	_X509_PURPOSE_get0:PROC
EXTRN	_X509_PURPOSE_get_by_id:PROC
EXTRN	_X509_check_host:PROC
EXTRN	_X509_check_email:PROC
EXTRN	_X509_check_ip:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@
CONST	SEGMENT
??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@ DB 'OPENSSL_ALLOW_PROXY'
	DB	'_CERTS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@ DB '.\crypto\x509\x'
	DB	'509_vfy.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_cert_time
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_check_cert_time PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1670
	push	ebx
	push	esi
; Line 1674
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	mov	eax, DWORD PTR [esi+20]
	test	BYTE PTR [eax+20], 2
	je	SHORT $LN2@check_cert
; Line 1675
	lea	ebx, DWORD PTR [eax+8]
	jmp	SHORT $LN3@check_cert
$LN2@check_cert:
; Line 1677
	xor	ebx, ebx
$LN3@check_cert:
; Line 1679
	mov	edi, DWORD PTR _x$[esp+8]
	push	ebx
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+16]
	push	DWORD PTR [eax]
	call	_X509_cmp_time
	add	esp, 8
; Line 1680
	test	eax, eax
	jne	SHORT $LN13@check_cert
; Line 1681
	mov	DWORD PTR [esi+100], 13			; 0000000dH
$LN15@check_cert:
; Line 1683
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+104], edi
	call	eax
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@check_cert
$LN16@check_cert:
	pop	edi
	pop	esi
; Line 1684
	xor	eax, eax
	pop	ebx
; Line 1710
	ret	0
$LN13@check_cert:
; Line 1687
	jle	SHORT $LN7@check_cert
; Line 1688
	mov	DWORD PTR [esi+100], 9
; Line 1691
	jmp	SHORT $LN15@check_cert
$LN7@check_cert:
; Line 1694
	mov	eax, DWORD PTR [edi]
	push	ebx
	mov	eax, DWORD PTR [eax+16]
	push	DWORD PTR [eax+4]
	call	_X509_cmp_time
	add	esp, 8
; Line 1695
	test	eax, eax
	jne	SHORT $LN14@check_cert
; Line 1696
	mov	DWORD PTR [esi+100], 14			; 0000000eH
$LN17@check_cert:
; Line 1698
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+104], edi
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@check_cert
$LN11@check_cert:
	pop	edi
	pop	esi
; Line 1709
	mov	eax, 1
	pop	ebx
; Line 1710
	ret	0
$LN14@check_cert:
; Line 1702
	jns	SHORT $LN11@check_cert
; Line 1703
	mov	DWORD PTR [esi+100], 10			; 0000000aH
; Line 1706
	jmp	SHORT $LN17@check_cert
_check_cert_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _cert_crl
_TEXT	SEGMENT
_rev$ = 8						; size = 4
_ctx$ = 8						; size = 4
_crl$ = 12						; size = 4
_x$ = 16						; size = 4
_cert_crl PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1592
	push	esi
; Line 1602
	mov	esi, DWORD PTR _ctx$[esp]
	push	edi
	mov	edi, DWORD PTR _crl$[esp+4]
	mov	eax, DWORD PTR [esi+20]
	test	BYTE PTR [eax+20], 16			; 00000010H
	jne	SHORT $LN3@cert_crl
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN3@cert_crl
; Line 1604
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 36			; 00000024H
	call	eax
	add	esp, 8
; Line 1605
	test	eax, eax
	jne	SHORT $LN3@cert_crl
$LN8@cert_crl:
	pop	edi
; Line 1606
	xor	eax, eax
	pop	esi
; Line 1622
	ret	0
$LN3@cert_crl:
; Line 1612
	push	DWORD PTR _x$[esp+4]
	lea	eax, DWORD PTR _rev$[esp+8]
	push	eax
	push	edi
	call	_X509_CRL_get0_by_cert
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@cert_crl
; Line 1613
	mov	eax, DWORD PTR _rev$[esp+4]
	cmp	DWORD PTR [eax+16], 8
	jne	SHORT $LN5@cert_crl
; Line 1614
	pop	edi
	mov	eax, 2
	pop	esi
; Line 1622
	ret	0
$LN5@cert_crl:
; Line 1616
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 23			; 00000017H
	call	eax
	add	esp, 8
; Line 1617
	test	eax, eax
	je	SHORT $LN8@cert_crl
$LN6@cert_crl:
	pop	edi
; Line 1621
	mov	eax, 1
	pop	esi
; Line 1622
	ret	0
_cert_crl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_crl
_TEXT	SEGMENT
_ikey$1$ = -4						; size = 4
_ctx$ = 8						; size = 4
_crl$ = 12						; size = 4
_check_crl PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1484
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	esi
; Line 1488
	mov	esi, DWORD PTR _ctx$[esp+8]
	push	edi
	mov	DWORD PTR _ikey$1$[esp+16], 0
; Line 1489
	push	DWORD PTR [esi+84]
	mov	edi, DWORD PTR [esi+96]
	call	_sk_num
; Line 1491
	mov	ebx, DWORD PTR [esi+108]
	add	esp, 4
	dec	eax
	test	ebx, ebx
	jne	SHORT $LN7@check_crl
; Line 1498
	cmp	edi, eax
	jge	SHORT $LN4@check_crl
; Line 1499
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	DWORD PTR [esi+84]
	call	_sk_value
	add	esp, 8
	mov	ebx, eax
	jmp	SHORT $LN7@check_crl
$LN4@check_crl:
; Line 1501
	push	eax
	push	DWORD PTR [esi+84]
	call	_sk_value
	mov	ebx, eax
; Line 1503
	mov	eax, DWORD PTR [esi+40]
	push	ebx
	push	ebx
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN7@check_crl
; Line 1505
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [esi+100], 33			; 00000021H
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1506
	test	edi, edi
	je	$err$74
$LN7@check_crl:
	push	ebp
; Line 1511
	test	ebx, ebx
	je	$LN27@check_crl
; Line 1515
	mov	ebp, DWORD PTR _crl$[esp+16]
	cmp	DWORD PTR [ebp+40], 0
	jne	$LN18@check_crl
; Line 1517
	test	BYTE PTR [ebx+40], 2
	je	SHORT $LN11@check_crl
	test	BYTE PTR [ebx+44], 2
	jne	SHORT $LN11@check_crl
; Line 1520
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 35			; 00000023H
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1521
	test	edi, edi
	je	$LN66@check_crl
$LN11@check_crl:
; Line 1525
	test	BYTE PTR [esi+116], -128		; ffffff80H
	jne	SHORT $LN13@check_crl
; Line 1527
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 44			; 0000002cH
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1528
	test	edi, edi
	je	$LN66@check_crl
$LN13@check_crl:
; Line 1532
	test	BYTE PTR [esi+116], 8
	jne	SHORT $LN16@check_crl
; Line 1533
	push	DWORD PTR [esi+108]
	push	esi
	call	_check_crl_path
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN16@check_crl
; Line 1535
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 54			; 00000036H
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1536
	test	edi, edi
	je	$LN66@check_crl
$LN16@check_crl:
; Line 1541
	test	BYTE PTR [ebp+28], 2
	je	SHORT $LN18@check_crl
; Line 1543
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 41			; 00000029H
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1544
	test	edi, edi
	je	$LN66@check_crl
$LN18@check_crl:
; Line 1550
	test	BYTE PTR [esi+116], 64			; 00000040H
	jne	$LN20@check_crl
; Line 951
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+112], ebp
	test	BYTE PTR [eax+20], 2
	je	SHORT $LN49@check_crl
; Line 952
	lea	edi, DWORD PTR [eax+8]
	jmp	SHORT $LN50@check_crl
$LN49@check_crl:
; Line 954
	xor	edi, edi
$LN50@check_crl:
; Line 956
	mov	eax, DWORD PTR [ebp]
	push	edi
	push	DWORD PTR [eax+12]
	call	_X509_cmp_time
	add	esp, 8
; Line 957
	test	eax, eax
	jne	SHORT $LN67@check_crl
; Line 961
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [esi+100], 15			; 0000000fH
	call	eax
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN56@check_crl
$LN72@check_crl:
	pop	ebp
; Line 1586
	push	DWORD PTR _ikey$1$[esp+16]
; Line 962
	xor	edi, edi
; Line 1586
	call	_EVP_PKEY_free
	add	esp, 4
; Line 1587
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 1588
	pop	ecx
	ret	0
$LN67@check_crl:
; Line 965
	jle	SHORT $LN56@check_crl
; Line 969
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 11			; 0000000bH
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN72@check_crl
$LN56@check_crl:
; Line 973
	mov	eax, DWORD PTR [ebp]
	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	je	SHORT $LN63@check_crl
; Line 974
	push	edi
	push	eax
	call	_X509_cmp_time
	add	esp, 8
; Line 976
	test	eax, eax
	jne	SHORT $LN68@check_crl
; Line 979
	mov	DWORD PTR [esi+100], 16			; 00000010H
; Line 981
	jmp	SHORT $LN71@check_crl
$LN68@check_crl:
; Line 984
	jns	SHORT $LN63@check_crl
	test	BYTE PTR [esi+116], 2
	jne	SHORT $LN63@check_crl
; Line 987
	mov	DWORD PTR [esi+100], 12			; 0000000cH
$LN71@check_crl:
; Line 988
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN72@check_crl
$LN63@check_crl:
; Line 994
	mov	DWORD PTR [esi+112], 0
$LN20@check_crl:
; Line 1557
	push	ebx
	call	_X509_get_pubkey
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _ikey$1$[esp+20], ebx
; Line 1559
	test	ebx, ebx
	jne	SHORT $LN21@check_crl
; Line 1561
	mov	ecx, DWORD PTR [esi+32]
	push	esi
	push	eax
	mov	DWORD PTR [esi+100], 6
	call	ecx
; Line 1564
	jmp	SHORT $LN70@check_crl
$LN21@check_crl:
; Line 1566
	mov	eax, DWORD PTR [esi+20]
	push	DWORD PTR [eax+20]
	push	ebx
	push	ebp
	call	_X509_CRL_check_suiteb
	add	esp, 12					; 0000000cH
; Line 1567
	test	eax, eax
	je	SHORT $LN25@check_crl
; Line 1568
	mov	DWORD PTR [esi+100], eax
; Line 1569
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1570
	test	edi, edi
	je	SHORT $LN66@check_crl
$LN25@check_crl:
; Line 1574
	push	ebx
	push	ebp
	call	_X509_CRL_verify
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN27@check_crl
; Line 1576
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 8
	call	eax
$LN70@check_crl:
	mov	edi, eax
	add	esp, 8
; Line 1577
	test	edi, edi
	je	SHORT $LN66@check_crl
$LN27@check_crl:
; Line 1583
	mov	edi, 1
$LN66@check_crl:
	pop	ebp
$err$74:
; Line 1586
	push	DWORD PTR _ikey$1$[esp+16]
	call	_EVP_PKEY_free
	add	esp, 4
; Line 1587
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 1588
	pop	ecx
	ret	0
_check_crl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _crldp_check_crlissuer
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_crl$ = 12						; size = 4
_crl_score$ = 16					; size = 4
_crldp_check_crlissuer PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1388
	mov	eax, DWORD PTR _crl$[esp-4]
	push	ebx
	push	edi
; Line 1390
	mov	edi, DWORD PTR _dp$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $LN5@crldp_chec
; Line 1391
	mov	eax, DWORD PTR _crl_score$[esp+4]
	shr	eax, 5
	pop	edi
	and	eax, 1
	pop	ebx
; Line 1400
	ret	0
$LN5@crldp_chec:
	push	esi
; Line 1392
	push	eax
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN14@crldp_chec
$LL4@crldp_chec:
; Line 1393
	push	esi
	push	DWORD PTR [edi+8]
	call	_sk_value
	add	esp, 8
; Line 1394
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN2@crldp_chec
; Line 1396
	push	ebx
	push	DWORD PTR [eax+4]
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@crldp_chec
$LN2@crldp_chec:
; Line 1392
	push	DWORD PTR [edi+8]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@crldp_chec
$LN14@crldp_chec:
	pop	esi
	pop	edi
; Line 1399
	xor	eax, eax
	pop	ebx
; Line 1400
	ret	0
$LN10@crldp_chec:
	pop	esi
	pop	edi
; Line 1397
	mov	eax, 1
	pop	ebx
; Line 1400
	ret	0
_crldp_check_crlissuer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _idp_check_dp
_TEXT	SEGMENT
_gena$2$ = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_idp_check_dp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1328
	push	ebp
; Line 1333
	mov	ebp, DWORD PTR _a$[esp]
	push	edi
	test	ebp, ebp
	je	$LN12@idp_check_
	mov	edi, DWORD PTR _b$[esp+4]
	test	edi, edi
	je	$LN12@idp_check_
; Line 1335
	cmp	DWORD PTR [ebp], 1
	push	ebx
	push	esi
	jne	SHORT $LN13@idp_check_
; Line 1336
	mov	ebp, DWORD PTR [ebp+8]
	test	ebp, ebp
	je	SHORT $LN42@idp_check_
; Line 1339
	cmp	DWORD PTR [edi], 1
	jne	SHORT $LN19@idp_check_
; Line 1340
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN42@idp_check_
; Line 1342
	push	eax
	push	ebp
	call	_X509_NAME_cmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 1383
	ret	0
$LN19@idp_check_:
; Line 1349
	mov	ebx, DWORD PTR [edi+4]
	jmp	SHORT $LN20@idp_check_
$LN13@idp_check_:
; Line 1350
	cmp	DWORD PTR [edi], 1
	jne	SHORT $LN22@idp_check_
; Line 1351
	mov	ebp, DWORD PTR [edi+8]
	test	ebp, ebp
	je	SHORT $LN42@idp_check_
; Line 1354
	mov	ebx, DWORD PTR _a$[esp+12]
	mov	ebx, DWORD PTR [ebx+4]
$LN20@idp_check_:
; Line 1359
	test	ebp, ebp
	je	SHORT $LN43@idp_check_
; Line 1360
	push	ebx
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN42@idp_check_
$LL4@idp_check_:
; Line 1361
	push	esi
	push	ebx
	call	_sk_value
	add	esp, 8
; Line 1362
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN2@idp_check_
; Line 1364
	push	DWORD PTR [eax+4]
	push	ebp
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	je	$LN31@idp_check_
$LN2@idp_check_:
; Line 1360
	push	ebx
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@idp_check_
$LN42@idp_check_:
	pop	esi
	pop	ebx
	pop	edi
; Line 1381
	xor	eax, eax
	pop	ebp
; Line 1383
	ret	0
$LN43@idp_check_:
	mov	ebp, DWORD PTR _a$[esp+12]
$LN22@idp_check_:
; Line 1372
	push	DWORD PTR [ebp+4]
	xor	ebx, ebx
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN42@idp_check_
$LL7@idp_check_:
; Line 1373
	push	ebx
	push	DWORD PTR [ebp+4]
	call	_sk_value
; Line 1374
	push	DWORD PTR [edi+4]
	mov	DWORD PTR _gena$2$[esp+24], eax
	xor	esi, esi
	call	_sk_num
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN5@idp_check_
	npad	1
$LL10@idp_check_:
; Line 1375
	push	esi
	push	DWORD PTR [edi+4]
	call	_sk_value
; Line 1376
	push	eax
	push	DWORD PTR _gena$2$[esp+24]
	call	_GENERAL_NAME_cmp
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN31@idp_check_
; Line 1374
	push	DWORD PTR [edi+4]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL10@idp_check_
$LN5@idp_check_:
; Line 1372
	push	DWORD PTR [ebp+4]
	inc	ebx
	call	_sk_num
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL7@idp_check_
; Line 1381
	pop	esi
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	ebp
; Line 1383
	ret	0
$LN31@idp_check_:
	pop	esi
	pop	ebx
	pop	edi
; Line 1377
	mov	eax, 1
	pop	ebp
; Line 1383
	ret	0
$LN12@idp_check_:
	pop	edi
; Line 1334
	mov	eax, 1
	pop	ebp
; Line 1383
	ret	0
_idp_check_dp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_delta_base
_TEXT	SEGMENT
_delta$ = 8						; size = 4
_base$ = 12						; size = 4
_check_delta_base PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1086
	push	esi
; Line 1088
	mov	esi, DWORD PTR _delta$[esp]
	cmp	DWORD PTR [esi+40], 0
	jne	SHORT $LN2@check_delt
; Line 1089
	xor	eax, eax
	pop	esi
; Line 1108
	ret	0
$LN2@check_delt:
	push	edi
; Line 1091
	mov	edi, DWORD PTR _base$[esp+4]
	cmp	DWORD PTR [edi+36], 0
	je	SHORT $LN11@check_delt
; Line 1094
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edi]
	push	DWORD PTR [eax+8]
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@check_delt
; Line 1097
	push	90					; 0000005aH
	push	edi
	push	esi
	call	_crl_extension_match
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@check_delt
; Line 1099
	push	770					; 00000302H
	push	edi
	push	esi
	call	_crl_extension_match
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@check_delt
; Line 1102
	push	DWORD PTR [edi+36]
	push	DWORD PTR [esi+40]
	call	_ASN1_INTEGER_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN7@check_delt
$LN11@check_delt:
	pop	edi
; Line 1103
	xor	eax, eax
	pop	esi
; Line 1108
	ret	0
$LN7@check_delt:
; Line 1105
	push	DWORD PTR [edi+36]
	push	DWORD PTR [esi+36]
	call	_ASN1_INTEGER_cmp
	add	esp, 8
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	pop	edi
	mov	eax, ecx
	pop	esi
; Line 1108
	ret	0
_check_delta_base ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _crl_extension_match
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_nid$ = 16						; size = 4
_crl_extension_match PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1049
	push	ebx
	push	esi
; Line 1052
	mov	esi, DWORD PTR _nid$[esp+4]
	push	edi
	mov	edi, DWORD PTR _a$[esp+8]
	push	-1
	push	esi
	push	edi
	call	_X509_CRL_get_ext_by_NID
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 1053
	test	ebx, ebx
	js	SHORT $LN2@crl_extens
; Line 1055
	push	ebx
	push	esi
	push	edi
	call	_X509_CRL_get_ext_by_NID
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	je	SHORT $LN4@crl_extens
; Line 1056
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1081
	ret	0
$LN4@crl_extens:
; Line 1057
	push	ebx
	push	edi
	call	_X509_CRL_get_ext
	push	eax
	call	_X509_EXTENSION_get_data
	add	esp, 12					; 0000000cH
	mov	edi, eax
; Line 1058
	jmp	SHORT $LN3@crl_extens
$LN2@crl_extens:
; Line 1059
	xor	edi, edi
$LN3@crl_extens:
; Line 1061
	mov	ebx, DWORD PTR _b$[esp+8]
	push	ebp
	push	-1
	push	esi
	push	ebx
	call	_X509_CRL_get_ext_by_NID
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 1063
	test	ebp, ebp
	js	SHORT $LN5@crl_extens
; Line 1065
	push	ebp
	push	esi
	push	ebx
	call	_X509_CRL_get_ext_by_NID
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	jne	SHORT $LN10@crl_extens
; Line 1067
	push	ebp
	push	ebx
	call	_X509_CRL_get_ext
	push	eax
	call	_X509_EXTENSION_get_data
	add	esp, 12					; 0000000cH
; Line 1068
	jmp	SHORT $LN6@crl_extens
$LN5@crl_extens:
; Line 1069
	xor	eax, eax
$LN6@crl_extens:
; Line 1071
	test	edi, edi
	jne	SHORT $LN13@crl_extens
	test	eax, eax
	jne	SHORT $LN10@crl_extens
; Line 1072
	pop	ebp
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
	pop	ebx
; Line 1081
	ret	0
$LN13@crl_extens:
; Line 1074
	test	eax, eax
	je	SHORT $LN10@crl_extens
; Line 1077
	push	eax
	push	edi
	call	_ASN1_OCTET_STRING_cmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 1081
	ret	0
$LN10@crl_extens:
	pop	ebp
	pop	edi
	pop	esi
; Line 1075
	xor	eax, eax
	pop	ebx
; Line 1081
	ret	0
_crl_extension_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_crl_sk
_TEXT	SEGMENT
_crl_issuer$ = -24					; size = 4
_reasons$ = -20						; size = 4
_best_crl_issuer$1$ = -16				; size = 4
_best_reasons$1$ = -12					; size = 4
_x$1$ = -8						; size = 4
_crl$1$ = -4						; size = 4
_ctx$ = 8						; size = 4
_pcrl$ = 12						; size = 4
_pdcrl$ = 16						; size = 4
_pissuer$ = 20						; size = 4
_pscore$ = 24						; size = 4
_preasons$ = 28						; size = 4
_crls$ = 32						; size = 4
_get_crl_sk PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1002
	mov	eax, 24					; 00000018H
	call	__chkstk
	push	ebx
; Line 1003
	mov	ebx, DWORD PTR _pscore$[esp+24]
; Line 1004
	xor	eax, eax
	push	ebp
	mov	DWORD PTR _best_reasons$1$[esp+32], eax
; Line 1007
	xor	ecx, ecx
	mov	eax, DWORD PTR _ctx$[esp+28]
	xor	ebp, ebp
	mov	ebx, DWORD PTR [ebx]
	push	esi
	push	edi
	mov	eax, DWORD PTR [eax+104]
; Line 1009
	xor	esi, esi
	mov	edi, DWORD PTR _crls$[esp+36]
	push	edi
	mov	DWORD PTR _x$1$[esp+44], eax
	mov	DWORD PTR _crl_issuer$[esp+44], ebp
	mov	DWORD PTR _best_crl_issuer$1$[esp+44], ecx
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	$LN6@get_crl_sk
$LL4@get_crl_sk:
; Line 1010
	push	esi
	push	edi
	call	_sk_value
; Line 1012
	push	DWORD PTR _x$1$[esp+48]
	mov	ecx, DWORD PTR _preasons$[esp+48]
	push	eax
	mov	DWORD PTR _crl$1$[esp+56], eax
	lea	eax, DWORD PTR _reasons$[esp+56]
	push	eax
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _crl_issuer$[esp+60]
	push	eax
	push	DWORD PTR _ctx$[esp+60]
	mov	DWORD PTR _reasons$[esp+68], ecx
	call	_get_crl_score
	add	esp, 28					; 0000001cH
; Line 1014
	cmp	eax, ebx
	jle	SHORT $LN2@get_crl_sk
; Line 1016
	mov	ecx, DWORD PTR _crl_issuer$[esp+40]
; Line 1017
	mov	ebx, eax
; Line 1018
	mov	eax, DWORD PTR _reasons$[esp+40]
	mov	ebp, DWORD PTR _crl$1$[esp+40]
	mov	DWORD PTR _best_crl_issuer$1$[esp+40], ecx
	mov	DWORD PTR _best_reasons$1$[esp+40], eax
$LN2@get_crl_sk:
; Line 1009
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@get_crl_sk
; Line 1022
	test	ebp, ebp
	je	SHORT $LN6@get_crl_sk
; Line 1023
	mov	esi, DWORD PTR _pcrl$[esp+36]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@get_crl_sk
; Line 1024
	push	eax
	call	_X509_CRL_free
	add	esp, 4
$LN7@get_crl_sk:
; Line 1026
	mov	eax, DWORD PTR _pissuer$[esp+36]
	mov	ecx, DWORD PTR _best_crl_issuer$1$[esp+40]
	mov	DWORD PTR [esi], ebp
; Line 1029
	push	1029					; 00000405H
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _pscore$[esp+40]
	mov	ecx, DWORD PTR _preasons$[esp+40]
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	6
	mov	DWORD PTR [eax], ebx
	mov	eax, DWORD PTR _best_reasons$1$[esp+52]
	mov	DWORD PTR [ecx], eax
	lea	eax, DWORD PTR [ebp+12]
	push	1
	push	eax
	call	_CRYPTO_add_lock
; Line 1030
	mov	esi, DWORD PTR _pdcrl$[esp+56]
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@get_crl_sk
; Line 1031
	push	eax
	call	_X509_CRL_free
	add	esp, 4
; Line 1032
	mov	DWORD PTR [esi], 0
$LN8@get_crl_sk:
; Line 1034
	push	edi
	push	ebp
	push	DWORD PTR _pscore$[esp+44]
	push	esi
	push	DWORD PTR _ctx$[esp+52]
	call	_get_delta_sk
	add	esp, 20					; 00000014H
$LN6@get_crl_sk:
; Line 1037
	pop	edi
	xor	eax, eax
	cmp	ebx, 448				; 000001c0H
	pop	esi
	pop	ebp
	setge	al
	pop	ebx
; Line 1041
	add	esp, 24					; 00000018H
	ret	0
_get_crl_sk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_crl_time
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_crl$ = 12						; size = 4
_notify$ = 16						; size = 4
_check_crl_time PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 946
	push	ebx
; Line 949
	mov	ebx, DWORD PTR _crl$[esp]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+8]
	push	edi
	mov	edi, DWORD PTR _notify$[esp+12]
	test	edi, edi
	je	SHORT $LN2@check_crl_
; Line 950
	mov	DWORD PTR [esi+112], ebx
$LN2@check_crl_:
; Line 951
	mov	eax, DWORD PTR [esi+20]
	test	BYTE PTR [eax+20], 2
	je	SHORT $LN3@check_crl_
; Line 952
	lea	ebp, DWORD PTR [eax+8]
	jmp	SHORT $LN4@check_crl_
$LN3@check_crl_:
; Line 954
	xor	ebp, ebp
$LN4@check_crl_:
; Line 956
	mov	eax, DWORD PTR [ebx]
	push	ebp
	push	DWORD PTR [eax+12]
	call	_X509_cmp_time
	add	esp, 8
; Line 957
	test	eax, eax
	jne	SHORT $LN20@check_crl_
; Line 958
	test	edi, edi
	je	SHORT $LN22@check_crl_
; Line 960
	mov	DWORD PTR [esi+100], 15			; 0000000fH
$LN23@check_crl_:
; Line 961
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	call	eax
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@check_crl_
$LN22@check_crl_:
	pop	edi
	pop	esi
	pop	ebp
; Line 962
	xor	eax, eax
	pop	ebx
; Line 997
	ret	0
$LN20@check_crl_:
; Line 965
	jle	SHORT $LN10@check_crl_
; Line 966
	test	edi, edi
	je	SHORT $LN22@check_crl_
; Line 968
	mov	DWORD PTR [esi+100], 11			; 0000000bH
; Line 970
	jmp	SHORT $LN23@check_crl_
$LN10@check_crl_:
; Line 973
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	je	SHORT $LN17@check_crl_
; Line 974
	push	ebp
	push	eax
	call	_X509_cmp_time
	add	esp, 8
; Line 976
	test	eax, eax
	jne	SHORT $LN21@check_crl_
; Line 977
	test	edi, edi
	je	SHORT $LN22@check_crl_
; Line 979
	mov	DWORD PTR [esi+100], 16			; 00000010H
$LN24@check_crl_:
; Line 980
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@check_crl_
$LN17@check_crl_:
; Line 993
	test	edi, edi
	je	SHORT $LN18@check_crl_
; Line 994
	mov	DWORD PTR [esi+112], 0
$LN18@check_crl_:
	pop	edi
	pop	esi
	pop	ebp
; Line 996
	mov	eax, 1
	pop	ebx
; Line 997
	ret	0
$LN21@check_crl_:
; Line 984
	jns	SHORT $LN17@check_crl_
	test	BYTE PTR [esi+116], 2
	jne	SHORT $LN17@check_crl_
; Line 985
	test	edi, edi
	je	SHORT $LN22@check_crl_
; Line 987
	mov	DWORD PTR [esi+100], 12			; 0000000cH
; Line 989
	jmp	SHORT $LN24@check_crl_
_check_crl_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_hosts
_TEXT	SEGMENT
_x$ = 8							; size = 4
_id$ = 12						; size = 4
_check_hosts PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 761
	push	ebx
; Line 763
	mov	ebx, DWORD PTR _id$[esp]
	push	ebp
	push	esi
	push	edi
	push	DWORD PTR [ebx]
	call	_sk_num
; Line 766
	lea	ebp, DWORD PTR [ebx+8]
	mov	edi, eax
	mov	eax, DWORD PTR [ebp]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@check_host
; Line 767
	push	eax
	call	_CRYPTO_free
	add	esp, 4
; Line 768
	mov	DWORD PTR [ebp], 0
$LN5@check_host:
; Line 770
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN3@check_host
$LL4@check_host:
; Line 771
	push	esi
	push	DWORD PTR [ebx]
	call	_sk_value
; Line 772
	push	ebp
	push	DWORD PTR [ebx+4]
	push	0
	push	eax
	push	DWORD PTR _x$[esp+36]
	call	_X509_check_host
	add	esp, 28					; 0000001cH
	test	eax, eax
	jg	SHORT $LN9@check_host
; Line 770
	inc	esi
	cmp	esi, edi
	jl	SHORT $LL4@check_host
$LN3@check_host:
; Line 775
	xor	eax, eax
	test	edi, edi
	pop	edi
	pop	esi
	pop	ebp
	sete	al
	pop	ebx
; Line 776
	ret	0
$LN9@check_host:
	pop	edi
	pop	esi
	pop	ebp
; Line 773
	mov	eax, 1
	pop	ebx
; Line 776
	ret	0
_check_hosts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_id_error
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_errcode$ = 12						; size = 4
_check_id_error PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 754
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR _errcode$[esp-4]
	mov	DWORD PTR [ecx+100], eax
; Line 755
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+104], eax
; Line 756
	mov	DWORD PTR [ecx+96], 0
; Line 757
	mov	DWORD PTR _errcode$[esp-4], ecx
	mov	DWORD PTR _ctx$[esp-4], 0
	mov	eax, DWORD PTR [ecx+32]
	jmp	eax
_check_id_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_issuer_sk
_TEXT	SEGMENT
_issuer$ = 8						; size = 4
_ctx$ = 12						; size = 4
_x$ = 16						; size = 4
_get_issuer_sk PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 559
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR _x$[esp-4]
	push	DWORD PTR [eax+24]
	push	eax
	call	_find_issuer
	mov	ecx, DWORD PTR _issuer$[esp+8]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx], eax
; Line 560
	test	eax, eax
	je	SHORT $LN2@get_issuer
; Line 561
	push	561					; 00000231H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	3
	add	eax, 16					; 00000010H
	push	1
	push	eax
	call	_CRYPTO_add_lock
	add	esp, 20					; 00000014H
; Line 562
	mov	eax, 1
; Line 565
	ret	0
$LN2@get_issuer:
; Line 564
	xor	eax, eax
; Line 565
	ret	0
_get_issuer_sk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lookup_cert_match
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_lookup_cert_match PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 166
	push	ebx
	push	ebp
; Line 171
	mov	ebp, DWORD PTR _x$[esp+4]
	xor	ebx, ebx
	push	edi
	push	ebp
	call	_X509_get_subject_name
	push	eax
	mov	eax, DWORD PTR _ctx$[esp+16]
	push	eax
	mov	eax, DWORD PTR [eax+64]
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 172
	test	edi, edi
	jne	SHORT $LN5@lookup_cer
	pop	edi
	pop	ebp
	pop	ebx
; Line 186
	ret	0
$LN5@lookup_cer:
	push	esi
; Line 175
	push	edi
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN15@lookup_cer
$LL4@lookup_cer:
; Line 176
	push	esi
	push	edi
	call	_sk_value
	mov	ebx, eax
; Line 177
	push	ebp
	push	ebx
	call	_X509_cmp
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN15@lookup_cer
; Line 175
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@lookup_cer
$LN15@lookup_cer:
; Line 180
	push	edi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	pop	esi
	jge	SHORT $LN7@lookup_cer
; Line 181
	push	181					; 000000b5H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	3
	lea	eax, DWORD PTR [ebx+16]
	push	1
	push	eax
	call	_CRYPTO_add_lock
	add	esp, 20					; 00000014H
; Line 184
	push	OFFSET _X509_free
	push	edi
	call	_sk_pop_free
	add	esp, 8
; Line 185
	mov	eax, ebx
	pop	edi
	pop	ebp
	pop	ebx
; Line 186
	ret	0
$LN7@lookup_cer:
; Line 184
	push	OFFSET _X509_free
	push	edi
	xor	ebx, ebx
	call	_sk_pop_free
	add	esp, 8
; Line 185
	mov	eax, ebx
	pop	edi
	pop	ebp
	pop	ebx
; Line 186
	ret	0
_lookup_cert_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _cert_self_signed
_TEXT	SEGMENT
_x$ = 8							; size = 4
_cert_self_signed PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 155
	push	esi
; Line 156
	mov	esi, DWORD PTR _x$[esp]
	push	0
	push	-1
	push	esi
	call	_X509_check_purpose
; Line 157
	mov	eax, DWORD PTR [esi+40]
	add	esp, 12					; 0000000cH
	shr	eax, 13					; 0000000dH
	and	eax, 1
	pop	esi
; Line 161
	ret	0
_cert_self_signed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _internal_verify
_TEXT	SEGMENT
_pkey$1$ = -8						; size = 4
_ok$2$ = -4						; size = 4
_cb$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_internal_verify PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1713
	mov	eax, 8
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 1719
	mov	esi, DWORD PTR _ctx$[esp+16]
	push	edi
	mov	edi, DWORD PTR [esi+32]
; Line 1721
	push	DWORD PTR [esi+84]
	mov	DWORD PTR _cb$1$[esp+24], edi
	call	_sk_num
; Line 1722
	lea	ebx, DWORD PTR [eax-1]
; Line 1724
	push	ebx
	push	DWORD PTR [esi+84]
	mov	DWORD PTR [esi+96], ebx
	call	_sk_value
; Line 1726
	mov	ecx, DWORD PTR [esi+40]
	mov	ebp, eax
	push	ebp
	push	ebp
	push	esi
	call	ecx
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN4@internal_v
; Line 1727
	mov	edi, ebp
	jmp	SHORT $LN2@internal_v
$LN4@internal_v:
; Line 1729
	mov	eax, DWORD PTR [esi+20]
	test	DWORD PTR [eax+20], 524288		; 00080000H
	je	SHORT $LN6@internal_v
; Line 1730
	mov	edi, ebp
; Line 1731
	jmp	$check_cert$29
$LN6@internal_v:
; Line 1733
	test	ebx, ebx
	jg	SHORT $LN7@internal_v
; Line 1736
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 21			; 00000015H
	mov	DWORD PTR [esi+104], ebp
	call	edi
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1799
	add	esp, 8
	ret	0
$LN7@internal_v:
; Line 1739
	dec	ebx
; Line 1740
	mov	DWORD PTR [esi+96], ebx
$LN27@internal_v:
; Line 1741
	push	ebx
	push	DWORD PTR [esi+84]
	call	_sk_value
	mov	edi, eax
	add	esp, 8
$LN2@internal_v:
; Line 1746
	test	ebx, ebx
	js	$LN3@internal_v
; Line 1747
	mov	DWORD PTR [esi+96], ebx
; Line 1755
	cmp	DWORD PTR [edi+12], 0
	jne	SHORT $LN9@internal_v
	cmp	edi, ebp
	jne	SHORT $LN10@internal_v
	mov	eax, DWORD PTR [esi+20]
	test	DWORD PTR [eax+20], 16384		; 00004000H
	je	SHORT $LN9@internal_v
$LN10@internal_v:
; Line 1757
	push	ebp
	call	_X509_get_pubkey
	add	esp, 4
	mov	DWORD PTR _pkey$1$[esp+24], eax
	test	eax, eax
	jne	SHORT $LN11@internal_v
; Line 1760
	push	esi
	push	eax
	mov	DWORD PTR [esi+100], 6
	mov	DWORD PTR [esi+104], ebp
	call	DWORD PTR _cb$1$[esp+28]
	add	esp, 8
; Line 1761
	test	eax, eax
	je	$end$30
; Line 1763
	jmp	SHORT $LN15@internal_v
$LN11@internal_v:
	push	eax
	push	edi
	call	_X509_verify
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN15@internal_v
; Line 1766
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 7
	mov	DWORD PTR [esi+104], edi
	call	DWORD PTR _cb$1$[esp+28]
	add	esp, 8
	mov	DWORD PTR _ok$2$[esp+24], eax
; Line 1767
	test	eax, eax
	je	SHORT $LN21@internal_v
$LN15@internal_v:
; Line 1772
	push	DWORD PTR _pkey$1$[esp+24]
	call	_EVP_PKEY_free
	add	esp, 4
$LN9@internal_v:
; Line 1776
	mov	DWORD PTR [edi+12], 1
$check_cert$29:
; Line 1779
	push	edi
	push	esi
	call	_check_cert_time
	add	esp, 8
; Line 1780
	test	eax, eax
	je	SHORT $end$30
; Line 1786
	push	esi
	push	1
	mov	DWORD PTR [esi+108], ebp
	mov	DWORD PTR [esi+104], edi
	call	DWORD PTR _cb$1$[esp+28]
	add	esp, 8
; Line 1787
	test	eax, eax
	je	SHORT $end$30
; Line 1790
	sub	ebx, 1
; Line 1791
	js	$LN2@internal_v
; Line 1792
	mov	ebp, edi
; Line 1795
	jmp	$LN27@internal_v
$LN21@internal_v:
; Line 1768
	push	DWORD PTR _pkey$1$[esp+24]
	call	_EVP_PKEY_free
; Line 1798
	mov	eax, DWORD PTR _ok$2$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1799
	add	esp, 8
	ret	0
$LN3@internal_v:
; Line 1798
	mov	eax, 1
$end$30:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1799
	add	esp, 8
	ret	0
_internal_verify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_crl_chain
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_cert_path$ = 12					; size = 4
_crl_path$ = 16						; size = 4
_check_crl_chain PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1310
	push	esi
; Line 1312
	mov	esi, DWORD PTR _cert_path$[esp]
	push	edi
	push	esi
	call	_sk_num
	dec	eax
	push	eax
	push	esi
	call	_sk_value
; Line 1313
	mov	esi, DWORD PTR _crl_path$[esp+16]
	mov	edi, eax
	push	esi
	call	_sk_num
	dec	eax
	push	eax
	push	esi
	call	_sk_value
; Line 1314
	push	eax
	push	edi
	call	_X509_cmp
	add	esp, 32					; 00000020H
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
; Line 1317
	ret	0
_check_crl_chain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_crl_path
_TEXT	SEGMENT
_crl_ctx$ = -136					; size = 136
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_check_crl_path PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1268
	mov	eax, 136				; 00000088H
	call	__chkstk
	push	esi
; Line 1272
	mov	esi, DWORD PTR _ctx$[esp+136]
	cmp	DWORD PTR [esi+124], 0
	je	SHORT $LN2@check_crl_
; Line 1273
	xor	eax, eax
	pop	esi
; Line 1296
	add	esp, 136				; 00000088H
	ret	0
$LN2@check_crl_:
; Line 1274
	push	DWORD PTR [esi+12]
	lea	eax, DWORD PTR _crl_ctx$[esp+144]
	push	DWORD PTR _x$[esp+140]
	push	DWORD PTR [esi]
	push	eax
	call	_X509_STORE_CTX_init
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@check_crl_
; Line 1275
	or	eax, -1
	pop	esi
; Line 1296
	add	esp, 136				; 00000088H
	ret	0
$LN3@check_crl_:
; Line 1277
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR _crl_ctx$[esp+156], eax
; Line 2484
	mov	eax, DWORD PTR _crl_ctx$[esp+160]
	push	edi
; Line 1279
	mov	edi, DWORD PTR [esi+20]
; Line 2484
	test	eax, eax
	je	SHORT $LN7@check_crl_
; Line 2485
	push	eax
	call	_X509_VERIFY_PARAM_free
	add	esp, 4
$LN7@check_crl_:
; Line 1282
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR _crl_ctx$[esp+176], eax
; Line 1285
	lea	eax, DWORD PTR _crl_ctx$[esp+144]
	push	eax
; Line 2486
	mov	DWORD PTR _crl_ctx$[esp+168], edi
; Line 1281
	mov	DWORD PTR _crl_ctx$[esp+272], esi
; Line 1285
	call	_X509_verify_cert
	mov	edi, eax
	add	esp, 4
; Line 1287
	test	edi, edi
	jle	SHORT $err$10
; Line 1292
	push	DWORD PTR _crl_ctx$[esp+228]
	push	DWORD PTR [esi+84]
	push	esi
	call	_check_crl_chain
	add	esp, 12					; 0000000cH
	mov	edi, eax
$err$10:
; Line 1294
	lea	eax, DWORD PTR _crl_ctx$[esp+144]
	push	eax
	call	_X509_STORE_CTX_cleanup
	add	esp, 4
; Line 1295
	mov	eax, edi
	pop	edi
	pop	esi
; Line 1296
	add	esp, 136				; 00000088H
	ret	0
_check_crl_path ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _crl_crldp_check
_TEXT	SEGMENT
_x$ = 8							; size = 4
_crl$ = 12						; size = 4
_crl_score$ = 16					; size = 4
_preasons$ = 20						; size = 4
_crl_crldp_check PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1406
	push	edi
; Line 1408
	mov	edi, DWORD PTR _crl$[esp]
	mov	eax, DWORD PTR [edi+28]
	test	al, 16					; 00000010H
	je	SHORT $LN5@crl_crldp_
; Line 1409
	xor	eax, eax
	pop	edi
; Line 1431
	ret	0
$LN5@crl_crldp_:
	push	ebx
; Line 1410
	mov	ebx, DWORD PTR _x$[esp+4]
	test	BYTE PTR [ebx+40], 16			; 00000010H
	je	SHORT $LN6@crl_crldp_
; Line 1411
	test	al, 4
	je	SHORT $LN9@crl_crldp_
; Line 1412
	pop	ebx
	xor	eax, eax
	pop	edi
; Line 1431
	ret	0
$LN6@crl_crldp_:
; Line 1414
	test	al, 8
	je	SHORT $LN9@crl_crldp_
; Line 1415
	pop	ebx
	xor	eax, eax
	pop	edi
; Line 1431
	ret	0
$LN9@crl_crldp_:
; Line 1417
	mov	ecx, DWORD PTR _preasons$[esp+4]
	mov	eax, DWORD PTR [edi+32]
	push	ebp
	push	esi
	mov	DWORD PTR [ecx], eax
; Line 1418
	xor	esi, esi
	push	DWORD PTR [ebx+68]
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN20@crl_crldp_
	npad	7
$LL4@crl_crldp_:
; Line 1419
	push	esi
	push	DWORD PTR [ebx+68]
	call	_sk_value
; Line 1420
	push	DWORD PTR _crl_score$[esp+20]
	mov	ebp, eax
	push	edi
	push	ebp
	call	_crldp_check_crlissuer
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@crl_crldp_
; Line 1421
	mov	ecx, DWORD PTR [edi+24]
	test	ecx, ecx
	je	SHORT $LN12@crl_crldp_
	push	DWORD PTR [ecx]
	push	DWORD PTR [ebp]
	call	_idp_check_dp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@crl_crldp_
$LN2@crl_crldp_:
; Line 1418
	push	DWORD PTR [ebx+68]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@crl_crldp_
$LN20@crl_crldp_:
; Line 1428
	mov	eax, DWORD PTR [edi+24]
	test	eax, eax
	je	SHORT $LN14@crl_crldp_
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN13@crl_crldp_
$LN14@crl_crldp_:
	test	BYTE PTR _crl_score$[esp+12], 32	; 00000020H
	jne	SHORT $LN24@crl_crldp_
$LN13@crl_crldp_:
	pop	esi
	pop	ebp
	pop	ebx
; Line 1430
	xor	eax, eax
	pop	edi
; Line 1431
	ret	0
$LN12@crl_crldp_:
; Line 1422
	mov	ecx, DWORD PTR _preasons$[esp+12]
	mov	eax, DWORD PTR [ebp+12]
	and	DWORD PTR [ecx], eax
$LN24@crl_crldp_:
; Line 1423
	pop	esi
	pop	ebp
	pop	ebx
	mov	eax, 1
	pop	edi
; Line 1431
	ret	0
_crl_crldp_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _crl_akid_check
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_cnm$1$ = 12						; size = 4
_crl$ = 12						; size = 4
_pissuer$ = 16						; size = 4
_pcrl_score$ = 20					; size = 4
_crl_akid_check PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1209
	push	ebx
	push	ebp
; Line 1211
	mov	ebp, DWORD PTR _crl$[esp+4]
	push	esi
	push	edi
; Line 1212
	mov	edi, DWORD PTR _ctx$[esp+12]
	mov	eax, DWORD PTR [ebp]
; Line 1215
	push	DWORD PTR [edi+84]
	mov	eax, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [edi+96]
	mov	DWORD PTR _cnm$1$[esp+16], eax
	call	_sk_num
	dec	eax
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN8@crl_akid_c
; Line 1216
	inc	esi
$LN8@crl_akid_c:
; Line 1218
	push	esi
	push	DWORD PTR [edi+84]
	call	_sk_value
; Line 1220
	push	DWORD PTR [ebp+20]
	mov	ebx, eax
	push	ebx
	call	_X509_check_akid
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN10@crl_akid_c
; Line 1221
	mov	ecx, DWORD PTR _pcrl_score$[esp+12]
	mov	eax, DWORD PTR [ecx]
	test	al, 32					; 00000020H
	je	SHORT $LN10@crl_akid_c
; Line 1222
	or	eax, 28					; 0000001cH
	mov	DWORD PTR [ecx], eax
; Line 1223
	mov	eax, DWORD PTR _pissuer$[esp+12]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ebx
	pop	ebx
; Line 1258
	ret	0
$LN10@crl_akid_c:
; Line 1228
	push	DWORD PTR [edi+84]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jge	SHORT $LN27@crl_akid_c
	npad	1
$LL4@crl_akid_c:
; Line 1229
	push	esi
	push	DWORD PTR [edi+84]
	call	_sk_value
	add	esp, 8
	mov	ebx, eax
; Line 1230
	push	DWORD PTR _cnm$1$[esp+12]
	push	ebx
	call	_X509_get_subject_name
	add	esp, 4
	push	eax
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@crl_akid_c
; Line 1232
	push	DWORD PTR [ebp+20]
	push	ebx
	call	_X509_check_akid
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@crl_akid_c
$LN2@crl_akid_c:
; Line 1228
	push	DWORD PTR [edi+84]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@crl_akid_c
$LN27@crl_akid_c:
; Line 1241
	mov	eax, DWORD PTR [edi+20]
	test	DWORD PTR [eax+20], 4096		; 00001000H
	je	SHORT $LN28@crl_akid_c
; Line 1248
	push	DWORD PTR [edi+12]
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN28@crl_akid_c
$LL7@crl_akid_c:
; Line 1249
	push	esi
	push	DWORD PTR [edi+12]
	call	_sk_value
	add	esp, 8
	mov	ebx, eax
; Line 1250
	push	DWORD PTR _cnm$1$[esp+12]
	push	ebx
	call	_X509_get_subject_name
	add	esp, 4
	push	eax
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@crl_akid_c
; Line 1252
	push	DWORD PTR [ebp+20]
	push	ebx
	call	_X509_check_akid
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@crl_akid_c
$LN5@crl_akid_c:
; Line 1248
	push	DWORD PTR [edi+12]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL7@crl_akid_c
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1258
	ret	0
$LN19@crl_akid_c:
; Line 1233
	mov	eax, DWORD PTR _pcrl_score$[esp+12]
	pop	edi
	pop	esi
	pop	ebp
	or	DWORD PTR [eax], 12			; 0000000cH
; Line 1234
	mov	eax, DWORD PTR _pissuer$[esp]
	mov	DWORD PTR [eax], ebx
	pop	ebx
; Line 1258
	ret	0
$LN20@crl_akid_c:
; Line 1253
	mov	eax, DWORD PTR _pissuer$[esp+12]
	mov	DWORD PTR [eax], ebx
; Line 1254
	mov	eax, DWORD PTR _pcrl_score$[esp+12]
	or	DWORD PTR [eax], 4
$LN28@crl_akid_c:
; Line 1258
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_crl_akid_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_delta_sk
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_dcrl$ = 12						; size = 4
_pscore$ = 16						; size = 4
_base$ = 20						; size = 4
_crls$ = 24						; size = 4
_get_delta_sk PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1117
	push	ebp
; Line 1120
	mov	ebp, DWORD PTR _ctx$[esp]
	mov	eax, DWORD PTR [ebp+20]
	test	DWORD PTR [eax+20], 8192		; 00002000H
	je	SHORT $LN1@get_delta_
; Line 1122
	mov	eax, DWORD PTR [ebp+104]
	mov	ecx, DWORD PTR _base$[esp]
	mov	eax, DWORD PTR [eax+40]
	or	eax, DWORD PTR [ecx+16]
	test	eax, 4096				; 00001000H
	je	SHORT $LN1@get_delta_
; Line 1124
	push	ebx
	mov	ebx, DWORD PTR _crls$[esp+4]
	push	esi
	push	edi
	push	ebx
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@get_delta_
	npad	5
$LL4@get_delta_:
; Line 1125
	push	esi
	push	ebx
	call	_sk_value
; Line 1126
	push	DWORD PTR _base$[esp+20]
	mov	edi, eax
	push	edi
	call	_check_delta_base
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN30@get_delta_
; Line 1124
	push	ebx
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@get_delta_
$LN3@get_delta_:
; Line 1134
	mov	eax, DWORD PTR _dcrl$[esp+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], 0
$LN1@get_delta_:
	pop	ebp
; Line 1135
	ret	0
$LN30@get_delta_:
; Line 951
	mov	esi, DWORD PTR [ebp+20]
	test	BYTE PTR [esi+20], 2
	je	SHORT $LN12@get_delta_
; Line 952
	add	esi, 8
	jmp	SHORT $LN13@get_delta_
$LN12@get_delta_:
; Line 954
	xor	esi, esi
$LN13@get_delta_:
; Line 956
	mov	eax, DWORD PTR [edi]
	push	esi
	push	DWORD PTR [eax+12]
	call	_X509_cmp_time
	add	esp, 8
; Line 957
	test	eax, eax
	je	SHORT $LN8@get_delta_
; Line 965
	jg	SHORT $LN8@get_delta_
; Line 973
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	je	SHORT $LN26@get_delta_
; Line 974
	push	esi
	push	eax
	call	_X509_cmp_time
	add	esp, 8
; Line 976
	test	eax, eax
	je	SHORT $LN8@get_delta_
; Line 984
	jns	SHORT $LN26@get_delta_
	test	BYTE PTR [ebp+116], 2
	je	SHORT $LN8@get_delta_
$LN26@get_delta_:
; Line 1128
	mov	eax, DWORD PTR _pscore$[esp+12]
	or	DWORD PTR [eax], 2
$LN8@get_delta_:
; Line 1129
	push	1129					; 00000469H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	6
	lea	eax, DWORD PTR [edi+12]
	push	1
	push	eax
	call	_CRYPTO_add_lock
; Line 1130
	mov	eax, DWORD PTR _dcrl$[esp+32]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 1135
	ret	0
_get_delta_sk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_crl_delta
_TEXT	SEGMENT
_crl$ = -16						; size = 4
_issuer$ = -12						; size = 4
_crl_score$ = -8					; size = 4
_dcrl$ = -4						; size = 4
_reasons$ = 8						; size = 4
_ctx$ = 8						; size = 4
_pcrl$ = 12						; size = 4
_pdcrl$ = 16						; size = 4
_x$ = 20						; size = 4
_get_crl_delta PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1440
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	esi
	push	edi
; Line 1447
	push	DWORD PTR _x$[esp+20]
	mov	DWORD PTR _issuer$[esp+28], 0
	mov	DWORD PTR _crl_score$[esp+28], 0
	mov	DWORD PTR _crl$[esp+28], 0
	mov	DWORD PTR _dcrl$[esp+28], 0
	call	_X509_get_issuer_name
; Line 1448
	mov	esi, DWORD PTR _ctx$[esp+24]
	mov	edi, eax
; Line 1449
	lea	eax, DWORD PTR _reasons$[esp+24]
	push	DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+120]
	push	eax
	lea	eax, DWORD PTR _crl_score$[esp+36]
	mov	DWORD PTR _reasons$[esp+32], ecx
	push	eax
	lea	eax, DWORD PTR _issuer$[esp+40]
	push	eax
	lea	eax, DWORD PTR _dcrl$[esp+44]
	push	eax
	lea	eax, DWORD PTR _crl$[esp+48]
	push	eax
	push	esi
	call	_get_crl_sk
	add	esp, 32					; 00000020H
; Line 1452
	test	eax, eax
	jne	SHORT $done$8
; Line 1457
	mov	eax, DWORD PTR [esi+68]
	push	edi
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 1460
	test	edi, edi
	jne	SHORT $LN3@get_crl_de
	mov	ecx, DWORD PTR _crl$[esp+24]
	test	ecx, ecx
	jne	SHORT $LN6@get_crl_de
$LN3@get_crl_de:
; Line 1463
	push	edi
	lea	eax, DWORD PTR _reasons$[esp+24]
	push	eax
	lea	eax, DWORD PTR _crl_score$[esp+32]
	push	eax
	lea	eax, DWORD PTR _issuer$[esp+36]
	push	eax
	lea	eax, DWORD PTR _dcrl$[esp+40]
	push	eax
	lea	eax, DWORD PTR _crl$[esp+44]
	push	eax
	push	esi
	call	_get_crl_sk
; Line 1465
	push	OFFSET _X509_CRL_free
	push	edi
	call	_sk_pop_free
	add	esp, 36					; 00000024H
$done$8:
; Line 1470
	mov	ecx, DWORD PTR _crl$[esp+24]
	test	ecx, ecx
	je	SHORT $LN4@get_crl_de
$LN6@get_crl_de:
; Line 1471
	mov	eax, DWORD PTR _issuer$[esp+24]
	mov	DWORD PTR [esi+108], eax
; Line 1472
	mov	eax, DWORD PTR _crl_score$[esp+24]
	mov	DWORD PTR [esi+116], eax
; Line 1473
	mov	eax, DWORD PTR _reasons$[esp+20]
	mov	DWORD PTR [esi+120], eax
; Line 1474
	mov	eax, DWORD PTR _pcrl$[esp+20]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 1475
	mov	ecx, DWORD PTR _pdcrl$[esp+12]
	mov	eax, DWORD PTR _dcrl$[esp+16]
	mov	DWORD PTR [ecx], eax
; Line 1476
	mov	eax, 1
; Line 1480
	add	esp, 16					; 00000010H
	ret	0
$LN4@get_crl_de:
	pop	edi
; Line 1479
	xor	eax, eax
	pop	esi
; Line 1480
	add	esp, 16					; 00000010H
	ret	0
_get_crl_delta ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_crl_score
_TEXT	SEGMENT
_crl_score$ = -4					; size = 4
_ctx$ = 8						; size = 4
_pissuer$ = 12						; size = 4
_preasons$ = 16						; size = 4
_crl_reasons$ = 20					; size = 4
_crl$ = 20						; size = 4
_x$ = 24						; size = 4
_get_crl_score PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1147
	mov	eax, 4
	call	__chkstk
	push	ebp
; Line 1150
	mov	ebp, DWORD PTR _preasons$[esp+4]
	push	esi
	push	edi
; Line 1155
	mov	edi, DWORD PTR _crl$[esp+12]
	xor	esi, esi
	mov	ebp, DWORD PTR [ebp]
	mov	DWORD PTR _crl_score$[esp+16], esi
	mov	ecx, DWORD PTR [edi+28]
	test	cl, 2
	je	SHORT $LN2@get_crl_sc
; Line 1156
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 1205
	pop	ecx
	ret	0
$LN2@get_crl_sc:
	push	ebx
; Line 1158
	mov	ebx, DWORD PTR _ctx$[esp+16]
	mov	eax, DWORD PTR [ebx+20]
	test	DWORD PTR [eax+20], 4096		; 00001000H
	jne	SHORT $LN3@get_crl_sc
; Line 1159
	test	cl, 96					; 00000060H
	je	SHORT $LN9@get_crl_sc
; Line 1160
	pop	ebx
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 1205
	pop	ecx
	ret	0
$LN3@get_crl_sc:
; Line 1161
	test	cl, 64					; 00000040H
	je	SHORT $LN6@get_crl_sc
; Line 1163
	mov	eax, ebp
	not	eax
	test	DWORD PTR [edi+32], eax
	jne	SHORT $LN9@get_crl_sc
; Line 1164
	pop	ebx
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 1205
	pop	ecx
	ret	0
$LN6@get_crl_sc:
; Line 1167
	cmp	DWORD PTR [edi+40], esi
	jne	SHORT $LN45@get_crl_sc
$LN9@get_crl_sc:
; Line 1170
	mov	eax, DWORD PTR [edi]
	push	DWORD PTR [eax+8]
	push	DWORD PTR _x$[esp+20]
	call	_X509_get_issuer_name
	add	esp, 4
	push	eax
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@get_crl_sc
; Line 1171
	test	BYTE PTR [edi+28], 32			; 00000020H
	jne	SHORT $LN11@get_crl_sc
$LN45@get_crl_sc:
	pop	ebx
	pop	edi
	pop	esi
; Line 1172
	xor	eax, eax
	pop	ebp
; Line 1205
	pop	ecx
	ret	0
$LN10@get_crl_sc:
; Line 1174
	mov	esi, 32					; 00000020H
	mov	DWORD PTR _crl_score$[esp+20], esi
$LN11@get_crl_sc:
; Line 1176
	test	DWORD PTR [edi+16], 512			; 00000200H
	jne	SHORT $LN13@get_crl_sc
; Line 1177
	or	esi, 256				; 00000100H
	mov	DWORD PTR _crl_score$[esp+20], esi
$LN13@get_crl_sc:
; Line 951
	mov	ebx, DWORD PTR [ebx+20]
	test	BYTE PTR [ebx+20], 2
	je	SHORT $LN21@get_crl_sc
; Line 952
	add	ebx, 8
	jmp	SHORT $LN22@get_crl_sc
$LN21@get_crl_sc:
; Line 954
	xor	ebx, ebx
$LN22@get_crl_sc:
; Line 956
	mov	eax, DWORD PTR [edi]
	push	ebx
	push	DWORD PTR [eax+12]
	call	_X509_cmp_time
	add	esp, 8
; Line 957
	test	eax, eax
	je	SHORT $LN41@get_crl_sc
; Line 965
	jg	SHORT $LN41@get_crl_sc
; Line 973
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	je	SHORT $LN42@get_crl_sc
; Line 974
	push	ebx
	push	eax
	call	_X509_cmp_time
	add	esp, 8
; Line 976
	test	eax, eax
; Line 984
	mov	eax, DWORD PTR _ctx$[esp+16]
	je	SHORT $LN14@get_crl_sc
	jns	SHORT $LN35@get_crl_sc
	test	BYTE PTR [eax+116], 2
	je	SHORT $LN14@get_crl_sc
; Line 1181
	or	esi, 64					; 00000040H
	mov	DWORD PTR _crl_score$[esp+20], esi
	jmp	SHORT $LN14@get_crl_sc
$LN42@get_crl_sc:
	mov	eax, DWORD PTR _ctx$[esp+16]
$LN35@get_crl_sc:
	or	esi, 64					; 00000040H
	mov	DWORD PTR _crl_score$[esp+20], esi
	jmp	SHORT $LN14@get_crl_sc
$LN41@get_crl_sc:
	mov	eax, DWORD PTR _ctx$[esp+16]
$LN14@get_crl_sc:
; Line 1184
	lea	ecx, DWORD PTR _crl_score$[esp+20]
	push	ecx
	push	DWORD PTR _pissuer$[esp+20]
	push	edi
	push	eax
	call	_crl_akid_check
; Line 1188
	mov	ebx, DWORD PTR _crl_score$[esp+36]
	add	esp, 16					; 00000010H
	test	bl, 4
	je	$LN45@get_crl_sc
; Line 1193
	lea	eax, DWORD PTR _crl_reasons$[esp+16]
	push	eax
	push	ebx
	push	edi
	push	DWORD PTR _x$[esp+28]
	call	_crl_crldp_check
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@get_crl_sc
; Line 1195
	mov	ecx, DWORD PTR _crl_reasons$[esp+16]
	mov	eax, ebp
	not	eax
	test	eax, ecx
	je	$LN45@get_crl_sc
; Line 1197
	or	ebp, ecx
; Line 1198
	or	ebx, 128				; 00000080H
$LN16@get_crl_sc:
; Line 1201
	mov	eax, DWORD PTR _preasons$[esp+16]
	mov	DWORD PTR [eax], ebp
; Line 1203
	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1205
	pop	ecx
	ret	0
_get_crl_score ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_policy
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_check_policy PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1625
	push	esi
; Line 1627
	mov	esi, DWORD PTR _ctx$[esp]
	cmp	DWORD PTR [esi+124], 0
	je	SHORT $LN5@check_poli
$LN12@check_poli:
; Line 1628
	mov	eax, 1
	pop	esi
; Line 1667
	ret	0
$LN5@check_poli:
; Line 1629
	mov	eax, DWORD PTR [esi+20]
	push	DWORD PTR [eax+20]
	push	DWORD PTR [eax+36]
	lea	eax, DWORD PTR [esi+92]
	push	DWORD PTR [esi+84]
	push	eax
	lea	eax, DWORD PTR [esi+88]
	push	eax
	call	_X509_policy_check
	add	esp, 20					; 00000014H
; Line 1631
	test	eax, eax
	jne	SHORT $LN6@check_poli
; Line 1632
	push	1632					; 00000660H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	145					; 00000091H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1633
	xor	eax, eax
	pop	esi
; Line 1667
	ret	0
$LN6@check_poli:
; Line 1636
	cmp	eax, -1
	jne	SHORT $LN7@check_poli
; Line 1642
	push	edi
	push	DWORD PTR [esi+84]
	lea	edi, DWORD PTR [eax+2]
	call	_sk_num
	add	esp, 4
	cmp	eax, edi
	jle	SHORT $LN19@check_poli
	npad	7
$LL4@check_poli:
; Line 1643
	push	edi
	push	DWORD PTR [esi+84]
	call	_sk_value
	add	esp, 8
; Line 1644
	test	DWORD PTR [eax+40], 2048		; 00000800H
	je	SHORT $LN2@check_poli
; Line 1646
	mov	DWORD PTR [esi+104], eax
; Line 1648
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 42			; 0000002aH
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@check_poli
$LN2@check_poli:
; Line 1642
	push	DWORD PTR [esi+84]
	inc	edi
	call	_sk_num
	add	esp, 4
	cmp	edi, eax
	jl	SHORT $LL4@check_poli
$LN19@check_poli:
	pop	edi
; Line 1651
	mov	eax, 1
	pop	esi
; Line 1667
	ret	0
$LN15@check_poli:
	pop	edi
; Line 1649
	xor	eax, eax
	pop	esi
; Line 1667
	ret	0
$LN7@check_poli:
; Line 1653
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN10@check_poli
; Line 1656
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+104], 0
	mov	DWORD PTR [esi+100], 43			; 0000002bH
	call	eax
	add	esp, 8
	pop	esi
; Line 1667
	ret	0
$LN10@check_poli:
; Line 1659
	mov	eax, DWORD PTR [esi+20]
	test	DWORD PTR [eax+20], 2048		; 00000800H
	je	$LN12@check_poli
; Line 1662
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	2
	mov	DWORD PTR [esi+104], 0
	mov	DWORD PTR [esi+100], 0
	call	eax
	add	esp, 8
	test	eax, eax
	jne	$LN12@check_poli
	pop	esi
; Line 1667
	ret	0
_check_policy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_cert
_TEXT	SEGMENT
_crl$ = -8						; size = 4
_dcrl$ = -4						; size = 4
_last_reasons$1$ = 8					; size = 4
_ctx$ = 8						; size = 4
_check_cert PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 872
	mov	eax, 8
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 877
	mov	esi, DWORD PTR _ctx$[esp+16]
	xor	ebx, ebx
	push	edi
	mov	DWORD PTR _crl$[esp+24], 0
	mov	DWORD PTR _dcrl$[esp+24], ebx
; Line 878
	push	DWORD PTR [esi+96]
	push	DWORD PTR [esi+84]
	call	_sk_value
	mov	ebp, eax
; Line 880
	mov	DWORD PTR [esi+108], ebx
	add	esp, 8
	mov	DWORD PTR [esi+104], ebp
; Line 881
	mov	DWORD PTR [esi+116], ebx
; Line 882
	mov	DWORD PTR [esi+120], ebx
	npad	4
$LL2@check_cert:
; Line 884
	mov	eax, DWORD PTR [esi+120]
	mov	DWORD PTR _last_reasons$1$[esp+20], eax
; Line 886
	mov	eax, DWORD PTR [esi+48]
; Line 887
	push	ebp
	test	eax, eax
	je	SHORT $LN4@check_cert
	lea	ecx, DWORD PTR _crl$[esp+28]
	push	ecx
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@check_cert
$LN4@check_cert:
; Line 889
	lea	eax, DWORD PTR _dcrl$[esp+28]
	push	eax
	lea	eax, DWORD PTR _crl$[esp+32]
	push	eax
	push	esi
	call	_get_crl_delta
	mov	ebx, DWORD PTR _dcrl$[esp+40]
	add	esp, 16					; 00000010H
$LN5@check_cert:
; Line 893
	test	eax, eax
	je	$LN17@check_cert
; Line 898
	mov	eax, DWORD PTR _crl$[esp+24]
; Line 899
	push	eax
	mov	DWORD PTR [esi+112], eax
	mov	eax, DWORD PTR [esi+52]
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 900
	test	edi, edi
	je	$err$28
; Line 903
	test	ebx, ebx
	je	SHORT $LN25@check_cert
; Line 904
	mov	eax, DWORD PTR [esi+52]
	push	ebx
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 905
	test	edi, edi
	je	SHORT $err$28
; Line 907
	mov	eax, DWORD PTR [esi+56]
	push	ebp
	push	ebx
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 908
	test	edi, edi
	je	SHORT $err$28
; Line 914
	cmp	edi, 2
	je	SHORT $LN13@check_cert
$LN25@check_cert:
; Line 915
	mov	eax, DWORD PTR [esi+56]
	push	ebp
	push	DWORD PTR _crl$[esp+28]
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 916
	test	edi, edi
	je	SHORT $err$28
$LN13@check_cert:
; Line 920
	push	DWORD PTR _crl$[esp+24]
	call	_X509_CRL_free
; Line 921
	push	ebx
	call	_X509_CRL_free
; Line 928
	mov	eax, DWORD PTR [esi+120]
	xor	ebx, ebx
	add	esp, 8
	mov	DWORD PTR _crl$[esp+24], 0
	mov	DWORD PTR _dcrl$[esp+24], ebx
	cmp	DWORD PTR _last_reasons$1$[esp+20], eax
	je	SHORT $LN17@check_cert
; Line 883
	cmp	eax, 32895				; 0000807fH
	jne	$LL2@check_cert
; Line 928
	jmp	SHORT $err$28
$LN17@check_cert:
; Line 895
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 3
	call	eax
	mov	edi, eax
	add	esp, 8
$err$28:
; Line 935
	push	DWORD PTR _crl$[esp+24]
	call	_X509_CRL_free
; Line 936
	push	ebx
	call	_X509_CRL_free
	add	esp, 8
; Line 938
	mov	DWORD PTR [esi+112], 0
; Line 939
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 941
	add	esp, 8
	ret	0
_check_cert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_revocation
_TEXT	SEGMENT
_dcrl$1 = -16						; size = 4
_i$1$ = -12						; size = 4
_last$1$ = -8						; size = 4
_last_reasons$1$ = -4					; size = 4
_crl$2 = 8						; size = 4
_ctx$ = 8						; size = 4
_check_revocation PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 850
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	esi
; Line 852
	mov	esi, DWORD PTR _ctx$[esp+16]
	mov	eax, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [eax+20]
	test	al, 4
	jne	SHORT $LN5@check_revo
$LN46@check_revo:
; Line 853
	mov	eax, 1
	pop	esi
; Line 869
	add	esp, 16					; 00000010H
	ret	0
$LN5@check_revo:
; Line 854
	test	al, 8
	je	SHORT $LN6@check_revo
; Line 855
	push	DWORD PTR [esi+84]
	call	_sk_num
	add	esp, 4
	lea	ecx, DWORD PTR [eax-1]
	jmp	SHORT $LN45@check_revo
$LN6@check_revo:
; Line 858
	cmp	DWORD PTR [esi+124], 0
	jne	SHORT $LN46@check_revo
; Line 860
	xor	ecx, ecx
$LN45@check_revo:
	push	ebx
; Line 862
	xor	eax, eax
	mov	DWORD PTR _last$1$[esp+24], ecx
	mov	DWORD PTR _i$1$[esp+24], eax
	push	ebp
	push	edi
	test	ecx, ecx
	js	$LN3@check_revo
$LL4@check_revo:
; Line 878
	push	eax
	push	DWORD PTR [esi+84]
	xor	ebx, ebx
; Line 863
	mov	DWORD PTR [esi+96], eax
; Line 873
	mov	DWORD PTR _crl$2[esp+36], 0
	mov	DWORD PTR _dcrl$1[esp+40], ebx
; Line 878
	call	_sk_value
	mov	ebp, eax
; Line 880
	mov	DWORD PTR [esi+108], ebx
	add	esp, 8
	mov	DWORD PTR [esi+104], ebp
; Line 881
	mov	DWORD PTR [esi+116], ebx
; Line 882
	mov	DWORD PTR [esi+120], ebx
	npad	1
$LL12@check_revo:
; Line 886
	mov	ecx, DWORD PTR [esi+48]
	mov	eax, DWORD PTR [esi+120]
	mov	DWORD PTR _last_reasons$1$[esp+32], eax
; Line 887
	push	ebp
	test	ecx, ecx
	je	SHORT $LN14@check_revo
	lea	eax, DWORD PTR _crl$2[esp+32]
	push	eax
	push	esi
	call	ecx
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN15@check_revo
$LN14@check_revo:
; Line 889
	lea	eax, DWORD PTR _dcrl$1[esp+36]
	push	eax
	lea	eax, DWORD PTR _crl$2[esp+36]
	push	eax
	push	esi
	call	_get_crl_delta
	mov	ebx, DWORD PTR _dcrl$1[esp+48]
	add	esp, 16					; 00000010H
$LN15@check_revo:
; Line 893
	test	eax, eax
	je	$LN28@check_revo
; Line 898
	mov	eax, DWORD PTR _crl$2[esp+28]
; Line 899
	push	eax
	mov	DWORD PTR [esi+112], eax
	mov	eax, DWORD PTR [esi+52]
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 900
	test	edi, edi
	je	$err$48
; Line 903
	test	ebx, ebx
	je	SHORT $LN40@check_revo
; Line 904
	mov	eax, DWORD PTR [esi+52]
	push	ebx
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 905
	test	edi, edi
	je	SHORT $err$48
; Line 907
	mov	eax, DWORD PTR [esi+56]
	push	ebp
	push	ebx
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 908
	test	edi, edi
	je	SHORT $err$48
; Line 914
	cmp	edi, 2
	je	SHORT $LN23@check_revo
$LN40@check_revo:
; Line 915
	mov	eax, DWORD PTR [esi+56]
	push	ebp
	push	DWORD PTR _crl$2[esp+32]
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 916
	test	edi, edi
	je	SHORT $err$48
$LN23@check_revo:
; Line 920
	push	DWORD PTR _crl$2[esp+28]
	call	_X509_CRL_free
; Line 921
	push	ebx
	call	_X509_CRL_free
; Line 928
	mov	eax, DWORD PTR [esi+120]
	xor	ebx, ebx
	add	esp, 8
	mov	DWORD PTR _crl$2[esp+28], 0
	mov	DWORD PTR _dcrl$1[esp+32], ebx
	cmp	DWORD PTR _last_reasons$1$[esp+32], eax
	je	SHORT $LN28@check_revo
; Line 883
	cmp	eax, 32895				; 0000807fH
	jne	$LL12@check_revo
; Line 865
	jmp	SHORT $err$48
$LN28@check_revo:
; Line 895
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 3
	call	eax
	mov	edi, eax
	add	esp, 8
$err$48:
; Line 935
	push	DWORD PTR _crl$2[esp+28]
	call	_X509_CRL_free
; Line 936
	push	ebx
	call	_X509_CRL_free
	add	esp, 8
; Line 938
	mov	DWORD PTR [esi+112], 0
; Line 865
	test	edi, edi
	je	SHORT $LN34@check_revo
; Line 862
	mov	eax, DWORD PTR _i$1$[esp+32]
	inc	eax
	mov	DWORD PTR _i$1$[esp+32], eax
	cmp	eax, DWORD PTR _last$1$[esp+32]
	jle	$LL4@check_revo
$LN3@check_revo:
	pop	edi
	pop	ebp
	pop	ebx
; Line 868
	mov	eax, 1
	pop	esi
; Line 869
	add	esp, 16					; 00000010H
	ret	0
$LN34@check_revo:
	pop	edi
	pop	ebp
	pop	ebx
; Line 866
	xor	eax, eax
	pop	esi
; Line 869
	add	esp, 16					; 00000010H
	ret	0
_check_revocation ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_trust
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_check_trust PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 799
	push	ebx
	push	ebp
	push	esi
; Line 803
	mov	esi, DWORD PTR _ctx$[esp+8]
	push	edi
; Line 805
	push	DWORD PTR [esi+84]
	mov	ebp, DWORD PTR [esi+32]
	mov	edi, DWORD PTR [esi+80]
	call	_sk_num
	add	esp, 4
	cmp	edi, eax
	jge	SHORT $LN3@check_trus
	npad	3
$LL4@check_trus:
; Line 806
	push	edi
	push	DWORD PTR [esi+84]
	call	_sk_value
; Line 807
	mov	ecx, DWORD PTR [esi+20]
	mov	ebx, eax
	push	0
	push	DWORD PTR [ecx+28]
	push	ebx
	call	_X509_check_trust
	add	esp, 20					; 00000014H
; Line 809
	cmp	eax, 1
	je	SHORT $LN13@check_trus
; Line 815
	cmp	eax, 2
	jne	SHORT $LN2@check_trus
; Line 819
	push	esi
	push	0
	mov	DWORD PTR [esi+96], edi
	mov	DWORD PTR [esi+104], ebx
	mov	DWORD PTR [esi+100], 28			; 0000001cH
	call	ebp
	add	esp, 8
; Line 820
	test	eax, eax
	je	SHORT $LN14@check_trus
$LN2@check_trus:
; Line 805
	push	DWORD PTR [esi+84]
	inc	edi
	call	_sk_num
	add	esp, 4
	cmp	edi, eax
	jl	SHORT $LL4@check_trus
$LN3@check_trus:
; Line 828
	mov	eax, DWORD PTR [esi+20]
	test	DWORD PTR [eax+20], 524288		; 00080000H
	je	SHORT $LN10@check_trus
; Line 830
	push	DWORD PTR [esi+84]
	call	_sk_num
	add	esp, 4
	cmp	DWORD PTR [esi+80], eax
	jl	SHORT $LN13@check_trus
; Line 832
	push	0
	push	DWORD PTR [esi+84]
	call	_sk_value
	mov	edi, eax
; Line 833
	push	edi
	push	esi
	call	_lookup_cert_match
	add	esp, 16					; 00000010H
; Line 834
	test	eax, eax
	je	SHORT $LN10@check_trus
; Line 835
	push	eax
	push	0
	push	DWORD PTR [esi+84]
	call	_sk_set
; Line 836
	push	edi
	call	_X509_free
	add	esp, 16					; 00000010H
; Line 837
	mov	DWORD PTR [esi+80], 0
$LN13@check_trus:
; Line 838
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 847
	ret	0
$LN14@check_trus:
	pop	edi
	pop	esi
	pop	ebp
; Line 821
	mov	eax, 2
	pop	ebx
; Line 847
	ret	0
$LN10@check_trus:
	pop	edi
	pop	esi
	pop	ebp
; Line 846
	mov	eax, 3
	pop	ebx
; Line 847
	ret	0
_check_trust ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_id
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_check_id PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 779
	push	ebx
	push	esi
; Line 781
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	mov	eax, DWORD PTR [esi+20]
; Line 782
	mov	ebx, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [eax+40]
; Line 783
	cmp	DWORD PTR [edi], 0
	je	SHORT $LN3@check_id
	push	edi
	push	ebx
	call	_check_hosts
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN3@check_id
; Line 755
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+104], eax
; Line 757
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 62			; 0000003eH
	mov	DWORD PTR [esi+96], 0
	call	eax
	add	esp, 8
; Line 784
	test	eax, eax
	jne	SHORT $LN3@check_id
$LN15@check_id:
	pop	edi
	pop	esi
; Line 785
	xor	eax, eax
	pop	ebx
; Line 796
	ret	0
$LN3@check_id:
; Line 787
	mov	eax, DWORD PTR [edi+12]
	test	eax, eax
	je	SHORT $LN5@check_id
	push	0
	push	DWORD PTR [edi+16]
	push	eax
	push	ebx
	call	_X509_check_email
	add	esp, 16					; 00000010H
	test	eax, eax
	jg	SHORT $LN5@check_id
; Line 755
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+104], eax
; Line 757
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 63			; 0000003fH
	mov	DWORD PTR [esi+96], 0
	call	eax
	add	esp, 8
; Line 788
	test	eax, eax
	je	SHORT $LN15@check_id
$LN5@check_id:
; Line 791
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN7@check_id
	push	0
	push	DWORD PTR [edi+24]
	push	eax
	push	ebx
	call	_X509_check_ip
	add	esp, 16					; 00000010H
	test	eax, eax
	jg	SHORT $LN7@check_id
; Line 755
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+104], eax
; Line 757
	mov	eax, DWORD PTR [esi+32]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 64			; 00000040H
	mov	DWORD PTR [esi+96], 0
	call	eax
	add	esp, 8
; Line 792
	test	eax, eax
	je	SHORT $LN15@check_id
$LN7@check_id:
	pop	edi
	pop	esi
; Line 795
	mov	eax, 1
	pop	ebx
; Line 796
	ret	0
_check_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_name_constraints
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_check_name_constraints PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 720
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 724
	mov	edi, DWORD PTR _ctx$[esp+12]
	push	DWORD PTR [edi+84]
	call	_sk_num
	mov	ebx, eax
	add	esp, 4
	sub	ebx, 1
	js	SHORT $LN22@check_name
	npad	6
$LL4@check_name:
; Line 725
	push	ebx
	push	DWORD PTR [edi+84]
	call	_sk_value
	add	esp, 8
	mov	ebp, eax
; Line 727
	test	ebx, ebx
	je	SHORT $LN8@check_name
	test	BYTE PTR [ebp+40], 32			; 00000020H
	jne	SHORT $LN2@check_name
$LN8@check_name:
; Line 735
	push	DWORD PTR [edi+84]
	call	_sk_num
	add	esp, 4
	lea	esi, DWORD PTR [eax-1]
	cmp	esi, ebx
	jle	SHORT $LN2@check_name
	npad	6
$LL7@check_name:
; Line 736
	push	esi
	push	DWORD PTR [edi+84]
	call	_sk_value
	add	esp, 8
	mov	eax, DWORD PTR [eax+76]
; Line 737
	test	eax, eax
	je	SHORT $LN5@check_name
; Line 738
	push	eax
	push	ebp
	call	_NAME_CONSTRAINTS_check
	add	esp, 8
; Line 739
	test	eax, eax
	je	SHORT $LN5@check_name
; Line 740
	mov	DWORD PTR [edi+100], eax
; Line 743
	mov	eax, DWORD PTR [edi+32]
	push	edi
	push	0
	mov	DWORD PTR [edi+96], ebx
	mov	DWORD PTR [edi+104], ebp
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@check_name
$LN5@check_name:
; Line 735
	dec	esi
	cmp	esi, ebx
	jg	SHORT $LL7@check_name
$LN2@check_name:
; Line 724
	sub	ebx, 1
	jns	SHORT $LL4@check_name
$LN22@check_name:
	pop	edi
	pop	esi
	pop	ebp
; Line 749
	mov	eax, 1
	pop	ebx
; Line 750
	ret	0
$LN15@check_name:
	pop	edi
	pop	esi
	pop	ebp
; Line 744
	xor	eax, eax
	pop	ebx
; Line 750
	ret	0
_check_name_constraints ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_chain_extensions
_TEXT	SEGMENT
_plen$1$ = -16						; size = 4
_proxy_path_length$1$ = -12				; size = 4
_allow_proxy_certs$2$ = -8				; size = 4
_purpose$1$ = -4					; size = 4
_cb$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_check_chain_extensions PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 573
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 583
	mov	esi, DWORD PTR _ctx$[esp+24]
; Line 594
	or	ebp, -1
	push	edi
	mov	DWORD PTR _plen$1$[esp+32], 0
	mov	DWORD PTR _proxy_path_length$1$[esp+32], 0
; Line 597
	cmp	DWORD PTR [esi+124], 0
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR _cb$1$[esp+28], eax
	je	SHORT $LN7@check_chai
; Line 598
	mov	DWORD PTR _allow_proxy_certs$2$[esp+32], 0
; Line 599
	mov	DWORD PTR _purpose$1$[esp+32], 6
; Line 600
	jmp	SHORT $LN8@check_chai
$LN7@check_chai:
; Line 601
	mov	eax, DWORD PTR [esi+20]
; Line 607
	push	OFFSET ??_C@_0BK@PIJCOFLE@OPENSSL_ALLOW_PROXY_CERTS?$AA@
	mov	edi, DWORD PTR [eax+20]
	shr	edi, 6
	and	edi, 1
	call	DWORD PTR __imp__getenv
	add	esp, 4
	mov	ecx, 1
	test	eax, eax
; Line 609
	mov	eax, DWORD PTR [esi+20]
	cmovne	edi, ecx
	mov	DWORD PTR _allow_proxy_certs$2$[esp+32], edi
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR _purpose$1$[esp+32], eax
$LN8@check_chai:
; Line 613
	xor	ebx, ebx
	cmp	DWORD PTR [esi+80], ebx
	jle	$LN3@check_chai
$LL4@check_chai:
; Line 615
	push	ebx
	push	DWORD PTR [esi+84]
	call	_sk_value
; Line 617
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 8
	mov	edi, eax
	test	BYTE PTR [ecx+20], 16			; 00000010H
	jne	SHORT $LN11@check_chai
	test	DWORD PTR [edi+40], 512			; 00000200H
	je	SHORT $LN11@check_chai
; Line 621
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 34			; 00000022H
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+104], edi
	call	DWORD PTR _cb$1$[esp+36]
	add	esp, 8
; Line 622
	test	eax, eax
	je	$end$65
$LN11@check_chai:
; Line 625
	cmp	DWORD PTR _allow_proxy_certs$2$[esp+32], 0
	jne	SHORT $LN13@check_chai
	test	DWORD PTR [edi+40], 1024		; 00000400H
	je	SHORT $LN13@check_chai
; Line 629
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 40			; 00000028H
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+104], edi
	call	DWORD PTR _cb$1$[esp+36]
	add	esp, 8
; Line 630
	test	eax, eax
	je	$end$65
$LN13@check_chai:
; Line 633
	push	edi
	call	_X509_check_ca
	add	esp, 4
	mov	ecx, eax
; Line 634
	cmp	ebp, -1
	je	SHORT $LN14@check_chai
	test	ebp, ebp
	je	SHORT $LN17@check_chai
; Line 652
	test	ecx, ecx
	je	SHORT $LN23@check_chai
	mov	eax, DWORD PTR [esi+20]
	test	BYTE PTR [eax+20], 32			; 00000020H
	je	SHORT $LN25@check_chai
	cmp	ecx, 1
; Line 656
	jmp	SHORT $LN62@check_chai
$LN17@check_chai:
; Line 644
	test	ecx, ecx
	je	SHORT $LN25@check_chai
; Line 646
	mov	DWORD PTR [esi+100], 37			; 00000025H
; Line 647
	jmp	SHORT $LN48@check_chai
$LN14@check_chai:
; Line 637
	mov	eax, DWORD PTR [esi+20]
	test	BYTE PTR [eax+20], 32			; 00000020H
	je	SHORT $LN25@check_chai
	cmp	ecx, 1
	je	SHORT $LN25@check_chai
	test	ecx, ecx
$LN62@check_chai:
	je	SHORT $LN25@check_chai
$LN23@check_chai:
; Line 639
	mov	DWORD PTR [esi+100], 24			; 00000018H
$LN48@check_chai:
; Line 663
	push	esi
	push	0
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+104], edi
	call	DWORD PTR _cb$1$[esp+36]
	add	esp, 8
; Line 664
	test	eax, eax
	je	$end$65
$LN25@check_chai:
; Line 667
	mov	eax, DWORD PTR [esi+20]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $LN57@check_chai
; Line 668
	xor	eax, eax
	test	ebp, ebp
	setg	al
	push	eax
	push	DWORD PTR _purpose$1$[esp+36]
	push	edi
	call	_X509_check_purpose
	add	esp, 12					; 0000000cH
; Line 670
	test	eax, eax
	je	SHORT $LN28@check_chai
	mov	ecx, DWORD PTR [esi+20]
	test	BYTE PTR [ecx+20], 32			; 00000020H
	je	SHORT $LN57@check_chai
	cmp	eax, 1
	je	SHORT $LN57@check_chai
$LN28@check_chai:
; Line 675
	mov	ebp, DWORD PTR _cb$1$[esp+28]
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 26			; 0000001aH
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+104], edi
	call	ebp
	add	esp, 8
; Line 676
	test	eax, eax
	je	$end$65
	jmp	SHORT $LN29@check_chai
$LN57@check_chai:
	mov	ebp, DWORD PTR _cb$1$[esp+28]
$LN29@check_chai:
; Line 683
	cmp	ebx, 1
	jle	SHORT $LN61@check_chai
	test	BYTE PTR [edi+40], 32			; 00000020H
	jne	SHORT $LN61@check_chai
	mov	eax, DWORD PTR [edi+32]
	cmp	eax, -1
	je	SHORT $LN61@check_chai
	mov	ecx, DWORD PTR _proxy_path_length$1$[esp+32]
	inc	ecx
	add	eax, ecx
	mov	ecx, DWORD PTR _plen$1$[esp+32]
	cmp	ecx, eax
	jle	SHORT $LN31@check_chai
; Line 687
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 25			; 00000019H
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+104], edi
	call	ebp
	add	esp, 8
; Line 688
	test	eax, eax
	je	SHORT $end$65
$LN61@check_chai:
	mov	ecx, DWORD PTR _plen$1$[esp+32]
$LN31@check_chai:
; Line 692
	mov	eax, DWORD PTR [edi+40]
	test	al, 32					; 00000020H
	jne	SHORT $LN32@check_chai
; Line 693
	inc	ecx
	mov	DWORD PTR _plen$1$[esp+32], ecx
$LN32@check_chai:
; Line 699
	test	eax, 1024				; 00000400H
	je	SHORT $LN33@check_chai
; Line 700
	mov	eax, DWORD PTR [edi+36]
	cmp	eax, -1
	je	SHORT $LN36@check_chai
	cmp	ebx, eax
	jle	SHORT $LN36@check_chai
; Line 704
	push	esi
	push	0
	mov	DWORD PTR [esi+100], 38			; 00000026H
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+104], edi
	call	ebp
	add	esp, 8
; Line 705
	test	eax, eax
	je	SHORT $end$65
$LN36@check_chai:
; Line 708
	inc	DWORD PTR _proxy_path_length$1$[esp+32]
; Line 709
	xor	ebp, ebp
; Line 710
	jmp	SHORT $LN2@check_chai
$LN33@check_chai:
; Line 711
	mov	ebp, 1
$LN2@check_chai:
; Line 613
	inc	ebx
	cmp	ebx, DWORD PTR [esi+80]
	jl	$LL4@check_chai
$LN3@check_chai:
; Line 715
	mov	eax, 1
$end$65:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 717
	add	esp, 16					; 00000010H
	ret	0
_check_chain_extensions ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _find_issuer
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sk$ = 12						; size = 4
_x$ = 16						; size = 4
_find_issuer PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 526
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 529
	mov	edi, DWORD PTR _sk$[esp+12]
	xor	esi, esi
	push	edi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@find_issue
	mov	ebp, DWORD PTR _ctx$[esp+12]
	npad	5
$LL4@find_issue:
; Line 530
	push	esi
	push	edi
	call	_sk_value
; Line 531
	mov	ecx, DWORD PTR [ebp+40]
	mov	ebx, eax
	push	ebx
	push	DWORD PTR _x$[esp+24]
	push	ebp
	call	ecx
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN8@find_issue
; Line 529
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@find_issue
$LN3@find_issue:
	pop	edi
	pop	esi
	pop	ebp
; Line 534
	xor	eax, eax
	pop	ebx
; Line 535
	ret	0
$LN8@find_issue:
	pop	edi
	pop	esi
	pop	ebp
; Line 532
	mov	eax, ebx
	pop	ebx
; Line 535
	ret	0
_find_issuer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_issued
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_issuer$ = 16						; size = 4
_check_issued PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 540
	push	esi
; Line 542
	mov	esi, DWORD PTR _x$[esp]
	push	edi
	mov	edi, DWORD PTR _issuer$[esp+4]
	push	esi
	push	edi
	call	_X509_check_issued
	mov	edx, eax
	add	esp, 8
; Line 543
	test	edx, edx
	jne	SHORT $LN2@check_issu
; Line 544
	pop	edi
	lea	eax, DWORD PTR [edx+1]
	pop	esi
; Line 553
	ret	0
$LN2@check_issu:
; Line 546
	mov	ecx, DWORD PTR _ctx$[esp+4]
	mov	eax, DWORD PTR [ecx+20]
	test	BYTE PTR [eax+20], 1
	jne	SHORT $LN3@check_issu
; Line 547
	pop	edi
	xor	eax, eax
	pop	esi
; Line 553
	ret	0
$LN3@check_issu:
; Line 552
	mov	eax, DWORD PTR [ecx+32]
	push	ecx
	push	0
	mov	DWORD PTR [ecx+100], edx
	mov	DWORD PTR [ecx+104], esi
	mov	DWORD PTR [ecx+108], edi
	call	eax
	add	esp, 8
	pop	edi
	pop	esi
; Line 553
	ret	0
_check_issued ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _null_callback
_TEXT	SEGMENT
_ok$ = 8						; size = 4
_e$ = 12						; size = 4
_null_callback PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 144
	mov	eax, DWORD PTR _ok$[esp-4]
; Line 145
	ret	0
_null_callback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_verify_cert
_TEXT	SEGMENT
_j$1$ = -28						; size = 4
_bad_chain$1$ = -24					; size = 4
_cb$1$ = -20						; size = 4
_chain_ss$1$ = -16					; size = 4
_depth$1$ = -12						; size = 4
_sktmp$1$ = -8						; size = 4
tv650 = -4						; size = 4
_xtmp$ = 8						; size = 4
_ctx$ = 8						; size = 4
_X509_verify_cert PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 189
	mov	eax, 28					; 0000001cH
	call	__chkstk
	push	esi
; Line 192
	mov	esi, DWORD PTR _ctx$[esp+28]
	xor	eax, eax
	push	edi
	mov	DWORD PTR _chain_ss$1$[esp+36], eax
	mov	DWORD PTR _bad_chain$1$[esp+36], eax
	mov	edi, DWORD PTR [esi+20]
; Line 196
	mov	DWORD PTR _sktmp$1$[esp+36], eax
; Line 200
	cmp	DWORD PTR [esi+8], eax
	jne	SHORT $LN15@X509_verif
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	105					; 00000069H
	push	127					; 0000007fH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 202
	or	eax, -1
	pop	edi
	pop	esi
; Line 519
	add	esp, 28					; 0000001cH
	ret	0
$LN15@X509_verif:
; Line 204
	cmp	DWORD PTR [esi+84], eax
	je	SHORT $LN16@X509_verif
; Line 209
	push	209					; 000000d1H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	66					; 00000042H
	push	127					; 0000007fH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 210
	or	eax, -1
	pop	edi
	pop	esi
; Line 519
	add	esp, 28					; 0000001cH
	ret	0
$LN16@X509_verif:
; Line 213
	mov	eax, DWORD PTR [esi+32]
	push	ebx
	push	ebp
	mov	DWORD PTR _cb$1$[esp+44], eax
; Line 219
	call	_sk_new_null
	mov	DWORD PTR [esi+84], eax
	test	eax, eax
	je	$LN18@X509_verif
	push	DWORD PTR [esi+8]
	push	eax
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	$LN18@X509_verif
; Line 225
	mov	eax, DWORD PTR [esi+8]
	push	225					; 000000e1H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	3
	add	eax, 16					; 00000010H
	push	1
	push	eax
	call	_CRYPTO_add_lock
; Line 230
	mov	eax, DWORD PTR [esi+12]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+80], 1
	test	eax, eax
	je	SHORT $LN19@X509_verif
	push	eax
	call	_sk_dup
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _sktmp$1$[esp+44], ebx
	test	ebx, ebx
	jne	SHORT $LN19@X509_verif
; Line 231
	push	231					; 000000e7H
; Line 233
	jmp	$LN124@X509_verif
$LN19@X509_verif:
; Line 236
	push	DWORD PTR [esi+84]
	call	_sk_num
	mov	ebp, eax
; Line 237
	lea	eax, DWORD PTR [ebp-1]
	push	eax
	push	DWORD PTR [esi+84]
	call	_sk_value
; Line 238
	mov	edi, DWORD PTR [edi+32]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _depth$1$[esp+44], edi
	mov	ebx, eax
; Line 242
	cmp	edi, ebp
	jl	$LN26@X509_verif
	npad	4
$LL2@X509_verif:
; Line 156
	push	0
	push	-1
	push	ebx
	call	_X509_check_purpose
	add	esp, 12					; 0000000cH
; Line 157
	test	DWORD PTR [ebx+40], 8192		; 00002000H
	jne	$LN26@X509_verif
; Line 254
	mov	eax, DWORD PTR [esi+20]
	test	DWORD PTR [eax+20], 32768		; 00008000H
	je	SHORT $LN24@X509_verif
; Line 255
	push	ebx
	lea	eax, DWORD PTR _xtmp$[esp+44]
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+36]
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 256
	test	edi, edi
	js	$err$128
; Line 262
	jg	$LN89@X509_verif
	mov	edi, DWORD PTR _depth$1$[esp+44]
$LN24@X509_verif:
; Line 269
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN26@X509_verif
; Line 270
	push	ebx
	mov	ebx, DWORD PTR _sktmp$1$[esp+48]
	push	ebx
	push	esi
	call	_find_issuer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _xtmp$[esp+40], eax
; Line 271
	test	eax, eax
	je	SHORT $LN26@X509_verif
; Line 272
	push	eax
	push	DWORD PTR [esi+84]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	$LN90@X509_verif
; Line 277
	mov	eax, DWORD PTR _xtmp$[esp+40]
	push	277					; 00000115H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	3
	add	eax, 16					; 00000010H
	push	1
	push	eax
	call	_CRYPTO_add_lock
; Line 278
	push	DWORD PTR _xtmp$[esp+60]
	push	ebx
	call	_sk_delete_ptr
; Line 279
	inc	DWORD PTR [esi+80]
; Line 281
	inc	ebp
	mov	ebx, DWORD PTR _xtmp$[esp+68]
	add	esp, 28					; 0000001cH
	cmp	edi, ebp
	jge	$LL2@X509_verif
$LN26@X509_verif:
; Line 292
	mov	edi, ebp
	mov	DWORD PTR _j$1$[esp+44], edi
$LL7@X509_verif:
; Line 303
	push	DWORD PTR [esi+84]
	call	_sk_num
; Line 304
	dec	eax
	push	eax
	push	DWORD PTR [esi+84]
	mov	DWORD PTR tv650[esp+56], eax
	call	_sk_value
; Line 156
	push	0
; Line 304
	mov	ebx, eax
; Line 156
	push	-1
	push	ebx
	call	_X509_check_purpose
	add	esp, 24					; 00000018H
; Line 157
	test	DWORD PTR [ebx+40], 8192		; 00002000H
	je	$LN30@X509_verif
; Line 307
	push	DWORD PTR [esi+84]
	call	_sk_num
	add	esp, 4
	cmp	eax, 1
	jne	$LN29@X509_verif
; Line 313
	push	ebx
	lea	eax, DWORD PTR _xtmp$[esp+44]
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+36]
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 314
	test	edi, edi
	jle	SHORT $LN33@X509_verif
	push	DWORD PTR _xtmp$[esp+40]
	push	ebx
	call	_X509_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@X509_verif
; Line 329
	push	ebx
	call	_X509_free
; Line 330
	mov	ebx, DWORD PTR _xtmp$[esp+44]
; Line 331
	mov	eax, DWORD PTR tv650[esp+48]
	push	ebx
	push	eax
	push	DWORD PTR [esi+84]
	call	_sk_set
	add	esp, 16					; 00000010H
; Line 332
	mov	DWORD PTR [esi+80], 0
	jmp	$LN30@X509_verif
$LN89@X509_verif:
; Line 263
	push	DWORD PTR _xtmp$[esp+40]
	call	_X509_free
	add	esp, 4
; Line 264
	jmp	$LN26@X509_verif
$LN90@X509_verif:
; Line 273
	push	273					; 00000111H
; Line 275
	jmp	$LN124@X509_verif
$LN33@X509_verif:
; Line 317
	mov	eax, DWORD PTR tv650[esp+44]
	mov	DWORD PTR [esi+100], 18			; 00000012H
	mov	DWORD PTR [esi+104], ebx
	mov	DWORD PTR [esi+96], eax
; Line 318
	cmp	edi, 1
	jne	SHORT $LN34@X509_verif
; Line 319
	push	DWORD PTR _xtmp$[esp+40]
	call	_X509_free
	add	esp, 4
$LN34@X509_verif:
; Line 321
	push	esi
	push	0
	mov	DWORD PTR _bad_chain$1$[esp+52], 1
	call	DWORD PTR _cb$1$[esp+52]
	mov	edi, eax
	add	esp, 8
; Line 322
	test	edi, edi
	je	$LN64@X509_verif
; Line 334
	jmp	SHORT $LN30@X509_verif
$LN29@X509_verif:
; Line 338
	push	DWORD PTR [esi+84]
	call	_sk_pop
; Line 339
	dec	DWORD PTR [esi+80]
; Line 340
	dec	ebp
; Line 341
	dec	edi
	mov	DWORD PTR _chain_ss$1$[esp+48], eax
	mov	DWORD PTR _j$1$[esp+48], edi
; Line 342
	lea	ecx, DWORD PTR [ebp-1]
	push	ecx
	push	DWORD PTR [esi+84]
	call	_sk_value
	add	esp, 12					; 0000000cH
	mov	ebx, eax
$LN30@X509_verif:
; Line 348
	cmp	DWORD PTR _depth$1$[esp+44], ebp
	jl	SHORT $LN120@X509_verif
$LL8@X509_verif:
; Line 156
	push	0
	push	-1
	push	ebx
	call	_X509_check_purpose
	add	esp, 12					; 0000000cH
; Line 157
	test	DWORD PTR [ebx+40], 8192		; 00002000H
	jne	SHORT $LN120@X509_verif
; Line 353
	push	ebx
	lea	eax, DWORD PTR _xtmp$[esp+44]
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+36]
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 355
	test	edi, edi
	js	$err$128
; Line 357
	je	SHORT $LN120@X509_verif
; Line 359
	mov	ebx, DWORD PTR _xtmp$[esp+40]
; Line 360
	push	ebx
	push	DWORD PTR [esi+84]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	$LN95@X509_verif
; Line 366
	inc	ebp
	cmp	DWORD PTR _depth$1$[esp+44], ebp
	jge	SHORT $LL8@X509_verif
$LN120@X509_verif:
; Line 370
	push	esi
	call	_check_trust
	add	esp, 4
	cmp	eax, 2
	je	$LN99@X509_verif
; Line 385
	cmp	eax, 1
	je	$LN123@X509_verif
	mov	eax, DWORD PTR [esi+20]
	test	DWORD PTR [eax+20], 1081344		; 00108000H
	jne	SHORT $LN100@X509_verif
; Line 386
	mov	eax, DWORD PTR _j$1$[esp+44]
	cmp	eax, 1
	jle	SHORT $LN100@X509_verif
$LL11@X509_verif:
	dec	eax
	mov	DWORD PTR _j$1$[esp+44], eax
; Line 387
	dec	eax
	push	eax
	push	DWORD PTR [esi+84]
	call	_sk_value
; Line 388
	push	eax
	lea	eax, DWORD PTR _xtmp$[esp+52]
	push	esi
	push	eax
	mov	eax, DWORD PTR [esi+36]
	call	eax
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 389
	test	edi, edi
	js	$err$128
; Line 392
	jg	SHORT $LN97@X509_verif
; Line 386
	mov	eax, DWORD PTR _j$1$[esp+44]
	cmp	eax, 1
	jg	SHORT $LL11@X509_verif
$LN100@X509_verif:
; Line 420
	mov	eax, DWORD PTR _bad_chain$1$[esp+44]
	test	eax, eax
	jne	$LN123@X509_verif
; Line 421
	mov	edi, DWORD PTR _chain_ss$1$[esp+44]
	test	edi, edi
	je	$LN48@X509_verif
	mov	eax, DWORD PTR [esi+40]
	push	edi
	push	ebx
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN48@X509_verif
; Line 429
	push	edi
	push	DWORD PTR [esi+84]
	call	_sk_push
; Line 430
	inc	ebp
; Line 432
	mov	DWORD PTR [esi+104], edi
	add	esp, 8
	mov	DWORD PTR [esi+80], ebp
; Line 434
	xor	eax, eax
	mov	DWORD PTR [esi+100], 19			; 00000013H
	mov	DWORD PTR _chain_ss$1$[esp+44], eax
	jmp	$LN47@X509_verif
$LN97@X509_verif:
; Line 396
	push	DWORD PTR _xtmp$[esp+40]
	call	_X509_free
; Line 402
	mov	edi, DWORD PTR _j$1$[esp+48]
	add	esp, 4
	cmp	ebp, edi
	jle	SHORT $LN14@X509_verif
; Line 396
	mov	edi, ebp
	sub	edi, DWORD PTR _j$1$[esp+44]
; Line 402
	sub	ebp, edi
$LL13@X509_verif:
; Line 403
	push	DWORD PTR [esi+84]
	call	_sk_pop
; Line 404
	push	eax
	mov	DWORD PTR _xtmp$[esp+48], eax
	call	_X509_free
	add	esp, 8
	sub	edi, 1
	jne	SHORT $LL13@X509_verif
	mov	edi, DWORD PTR _j$1$[esp+44]
$LN14@X509_verif:
; Line 407
	push	DWORD PTR [esi+84]
	call	_sk_num
	add	esp, 4
	mov	DWORD PTR [esi+80], eax
	jmp	$LL7@X509_verif
$LN95@X509_verif:
; Line 361
	push	DWORD PTR _xtmp$[esp+40]
	call	_X509_free
; Line 362
	push	362					; 0000016aH
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	127					; 0000007fH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 24					; 00000018H
; Line 364
	jmp	$LN125@X509_verif
$LN48@X509_verif:
; Line 422
	cmp	DWORD PTR [esi+80], ebp
	mov	eax, 2
	mov	ecx, 20					; 00000014H
; Line 426
	mov	DWORD PTR [esi+104], ebx
	cmovge	eax, ecx
	mov	DWORD PTR [esi+100], eax
$LN47@X509_verif:
; Line 437
	lea	eax, DWORD PTR [ebp-1]
; Line 438
	mov	ebx, 1
; Line 439
	mov	ebp, DWORD PTR _cb$1$[esp+44]
	push	esi
	push	0
	mov	DWORD PTR [esi+96], eax
	call	ebp
	mov	edi, eax
	add	esp, 8
; Line 440
	test	edi, edi
	je	$err$128
	jmp	SHORT $LN51@X509_verif
$LN123@X509_verif:
	mov	ebp, DWORD PTR _cb$1$[esp+44]
	mov	ebx, DWORD PTR _bad_chain$1$[esp+44]
$LN51@X509_verif:
; Line 445
	push	esi
	call	_check_chain_extensions
	mov	edi, eax
	add	esp, 4
; Line 447
	test	edi, edi
	je	$err$128
; Line 452
	push	esi
	call	_check_name_constraints
	mov	edi, eax
	add	esp, 4
; Line 454
	test	edi, edi
	je	$err$128
; Line 457
	push	esi
	call	_check_id
	mov	edi, eax
	add	esp, 4
; Line 459
	test	edi, edi
	je	$err$128
; Line 463
	push	DWORD PTR [esi+84]
	push	0
	call	_X509_get_pubkey_parameters
; Line 470
	mov	eax, DWORD PTR [esi+44]
	push	esi
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 471
	test	edi, edi
	je	SHORT $err$128
; Line 474
	mov	eax, DWORD PTR [esi+20]
	lea	edi, DWORD PTR [esi+96]
	push	DWORD PTR [eax+20]
	push	DWORD PTR [esi+84]
	push	0
	push	edi
	call	_X509_chain_check_suiteb
	add	esp, 16					; 00000010H
; Line 476
	test	eax, eax
	je	SHORT $LN57@X509_verif
; Line 478
	push	DWORD PTR [edi]
	mov	DWORD PTR [esi+100], eax
	push	DWORD PTR [esi+84]
	call	_sk_value
; Line 479
	push	esi
	push	0
	mov	DWORD PTR [esi+104], eax
	call	ebp
	mov	edi, eax
	add	esp, 16					; 00000010H
; Line 480
	test	edi, edi
	je	SHORT $err$128
$LN57@X509_verif:
; Line 485
	mov	eax, DWORD PTR [esi+28]
; Line 486
	push	esi
	test	eax, eax
	je	SHORT $LN58@X509_verif
	call	eax
	jmp	SHORT $LN126@X509_verif
$LN58@X509_verif:
; Line 488
	call	_internal_verify
$LN126@X509_verif:
	mov	edi, eax
	add	esp, 4
; Line 489
	test	edi, edi
	je	SHORT $err$128
; Line 503
	test	ebx, ebx
	jne	SHORT $LN61@X509_verif
	mov	eax, DWORD PTR [esi+20]
	test	BYTE PTR [eax+20], 128			; 00000080H
	je	SHORT $LN61@X509_verif
; Line 504
	mov	eax, DWORD PTR [esi+60]
	push	esi
	call	eax
	add	esp, 4
	mov	edi, eax
$LN61@X509_verif:
; Line 505
	test	edi, edi
	jne	SHORT $LN63@X509_verif
$err$128:
; Line 510
	xor	eax, eax
	test	edi, edi
	cmovg	edi, eax
	jmp	SHORT $LN64@X509_verif
$LN99@X509_verif:
; Line 372
	xor	edi, edi
; Line 373
	jmp	SHORT $LN64@X509_verif
$LN18@X509_verif:
; Line 221
	push	221					; 000000ddH
$LN124@X509_verif:
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	127					; 0000007fH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN125@X509_verif:
; Line 222
	or	edi, -1
$LN64@X509_verif:
; Line 512
	push	DWORD PTR [esi+84]
	push	0
	call	_X509_get_pubkey_parameters
	add	esp, 8
$LN63@X509_verif:
; Line 514
	mov	eax, DWORD PTR _sktmp$1$[esp+44]
	pop	ebp
	pop	ebx
	test	eax, eax
	je	SHORT $LN65@X509_verif
; Line 515
	push	eax
	call	_sk_free
	add	esp, 4
$LN65@X509_verif:
; Line 516
	mov	eax, DWORD PTR _chain_ss$1$[esp+36]
	test	eax, eax
	je	SHORT $LN66@X509_verif
; Line 517
	push	eax
	call	_X509_free
	add	esp, 4
$LN66@X509_verif:
; Line 518
	mov	eax, edi
	pop	edi
	pop	esi
; Line 519
	add	esp, 28					; 0000001cH
	ret	0
_X509_verify_cert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_CRL_diff
_TEXT	SEGMENT
_revs$1$ = -4						; size = 4
_rvtmp$1 = 8						; size = 4
_base$ = 8						; size = 4
_newer$ = 12						; size = 4
_skey$ = 16						; size = 4
_md$ = 20						; size = 4
_flags$ = 24						; size = 4
_X509_CRL_diff PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1997
	mov	eax, 4
	call	__chkstk
	push	ebp
; Line 2002
	mov	ebp, DWORD PTR _base$[esp+4]
	push	esi
	cmp	DWORD PTR [ebp+40], 0
	jne	$LN9@X509_CRL_d
	mov	esi, DWORD PTR _newer$[esp+8]
	cmp	DWORD PTR [esi+40], 0
	jne	$LN9@X509_CRL_d
; Line 2007
	cmp	DWORD PTR [ebp+36], 0
	je	$LN11@X509_CRL_d
	cmp	DWORD PTR [esi+36], 0
	je	$LN11@X509_CRL_d
; Line 2012
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebp]
	push	DWORD PTR [eax+8]
	call	_X509_NAME_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@X509_CRL_d
; Line 2013
	push	2013					; 000007ddH
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	129					; 00000081H
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2014
	xor	eax, eax
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN12@X509_CRL_d:
; Line 2017
	push	90					; 0000005aH
	push	esi
	push	ebp
	call	_crl_extension_match
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@X509_CRL_d
; Line 2018
	push	2018					; 000007e2H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	110					; 0000006eH
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2019
	xor	eax, eax
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN13@X509_CRL_d:
; Line 2021
	push	770					; 00000302H
	push	esi
	push	ebp
	call	_crl_extension_match
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@X509_CRL_d
; Line 2022
	push	2022					; 000007e6H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	128					; 00000080H
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2023
	xor	eax, eax
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN14@X509_CRL_d:
; Line 2026
	push	DWORD PTR [ebp+36]
	push	DWORD PTR [esi+36]
	call	_ASN1_INTEGER_cmp
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN15@X509_CRL_d
; Line 2027
	push	2027					; 000007ebH
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	132					; 00000084H
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2028
	xor	eax, eax
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN15@X509_CRL_d:
	push	ebx
; Line 2031
	mov	ebx, DWORD PTR _skey$[esp+12]
	test	ebx, ebx
	je	SHORT $LN16@X509_CRL_d
	push	ebx
	push	ebp
	call	_X509_CRL_verify
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN17@X509_CRL_d
	push	ebx
	push	esi
	call	_X509_CRL_verify
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN16@X509_CRL_d
$LN17@X509_CRL_d:
; Line 2033
	push	2033					; 000007f1H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	131					; 00000083H
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2034
	xor	eax, eax
	pop	ebx
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN16@X509_CRL_d:
	push	edi
; Line 2037
	call	_X509_CRL_new
	mov	edi, eax
; Line 2038
	test	edi, edi
	je	$memerr$46
	push	1
	push	edi
	call	_X509_CRL_set_version
	add	esp, 8
	test	eax, eax
	je	$memerr$46
; Line 2041
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+8]
	push	edi
	call	_X509_CRL_set_issuer_name
	add	esp, 8
	test	eax, eax
	je	$memerr$46
; Line 2044
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+12]
	push	edi
	call	_X509_CRL_set_lastUpdate
	add	esp, 8
	test	eax, eax
	je	$memerr$46
; Line 2046
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+16]
	push	edi
	call	_X509_CRL_set_nextUpdate
	add	esp, 8
	test	eax, eax
	je	$memerr$46
; Line 2051
	push	0
	push	1
	push	DWORD PTR [ebp+36]
	push	140					; 0000008cH
	push	edi
	call	_X509_CRL_add1_ext_i2d
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$memerr$46
; Line 2059
	push	esi
	xor	ebx, ebx
	call	_X509_CRL_get_ext_count
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@X509_CRL_d
$LL4@X509_CRL_d:
; Line 2061
	push	ebx
	push	esi
	call	_X509_CRL_get_ext
; Line 2062
	push	-1
	push	eax
	push	edi
	call	_X509_CRL_add_ext
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$memerr$46
; Line 2059
	push	esi
	inc	ebx
	call	_X509_CRL_get_ext_count
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL4@X509_CRL_d
$LN3@X509_CRL_d:
; Line 2068
	mov	eax, DWORD PTR [esi]
; Line 2070
	xor	esi, esi
	mov	ebx, DWORD PTR [eax+20]
	push	ebx
	mov	DWORD PTR _revs$1$[esp+24], ebx
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN42@X509_CRL_d
$LL7@X509_CRL_d:
; Line 2072
	push	esi
	push	ebx
	call	_sk_value
	mov	ebx, eax
; Line 2077
	lea	eax, DWORD PTR _rvtmp$1[esp+24]
	push	DWORD PTR [ebx]
	push	eax
	push	ebp
	call	_X509_CRL_get0_by_serial
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN5@X509_CRL_d
; Line 2078
	push	ebx
	call	_X509_REVOKED_dup
	add	esp, 4
	mov	DWORD PTR _rvtmp$1[esp+16], eax
; Line 2079
	test	eax, eax
	je	SHORT $memerr$46
; Line 2081
	push	eax
	push	edi
	call	_X509_CRL_add0_revoked
	add	esp, 8
	test	eax, eax
	je	SHORT $LN35@X509_CRL_d
$LN5@X509_CRL_d:
; Line 2070
	mov	ebx, DWORD PTR _revs$1$[esp+20]
	inc	esi
	push	ebx
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL7@X509_CRL_d
$LN42@X509_CRL_d:
; Line 2089
	mov	ecx, DWORD PTR _skey$[esp+16]
	test	ecx, ecx
	je	SHORT $LN28@X509_CRL_d
	mov	eax, DWORD PTR _md$[esp+16]
	test	eax, eax
	je	SHORT $LN28@X509_CRL_d
	push	eax
	push	ecx
	push	edi
	call	_X509_CRL_sign
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $memerr$46
$LN28@X509_CRL_d:
; Line 2092
	mov	eax, edi
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN35@X509_CRL_d:
; Line 2082
	push	DWORD PTR _rvtmp$1[esp+16]
	call	_X509_REVOKED_free
	add	esp, 4
$memerr$46:
; Line 2095
	push	2095					; 0000082fH
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2096
	test	edi, edi
	je	SHORT $LN29@X509_CRL_d
; Line 2097
	push	edi
	call	_X509_CRL_free
	add	esp, 4
$LN29@X509_CRL_d:
; Line 2098
	pop	edi
	pop	ebx
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN11@X509_CRL_d:
; Line 2008
	push	2008					; 000007d8H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	130					; 00000082H
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2009
	xor	eax, eax
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
$LN9@X509_CRL_d:
; Line 2003
	push	2003					; 000007d3H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	127					; 0000007fH
	push	105					; 00000069H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2004
	xor	eax, eax
	pop	esi
	pop	ebp
; Line 2099
	pop	ecx
	ret	0
_X509_CRL_diff ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_get_pubkey_parameters
_TEXT	SEGMENT
_pkey$ = 8						; size = 4
_chain$ = 12						; size = 4
_X509_get_pubkey_parameters PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1957
	mov	eax, DWORD PTR _pkey$[esp-4]
	test	eax, eax
	je	SHORT $LN8@X509_get_p
	push	eax
	call	_EVP_PKEY_missing_parameters
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@X509_get_p
; Line 1958
	mov	eax, 1
; Line 1991
	ret	0
$LN8@X509_get_p:
	push	ebx
; Line 1960
	mov	ebx, DWORD PTR _chain$[esp]
	push	esi
	push	edi
	push	ebx
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN25@X509_get_p
$LL4@X509_get_p:
; Line 1961
	push	esi
	push	ebx
	call	_sk_value
	push	eax
	call	_X509_get_pubkey
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 1962
	test	edi, edi
	je	$LN17@X509_get_p
; Line 1967
	push	edi
	call	_EVP_PKEY_missing_parameters
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@X509_get_p
; Line 1970
	push	edi
	call	_EVP_PKEY_free
	push	ebx
	inc	esi
	call	_sk_num
	add	esp, 8
	cmp	esi, eax
	jl	SHORT $LL4@X509_get_p
$LN25@X509_get_p:
; Line 1975
	push	1976					; 000007b8H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	107					; 0000006bH
	push	110					; 0000006eH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1977
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1991
	ret	0
$LN12@X509_get_p:
	push	ebp
; Line 1981
	lea	ebp, DWORD PTR [esi-1]
	test	ebp, ebp
	js	SHORT $LN6@X509_get_p
$LL7@X509_get_p:
; Line 1982
	push	ebp
	push	ebx
	call	_sk_value
	push	eax
	call	_X509_get_pubkey
	mov	esi, eax
; Line 1983
	push	edi
	push	esi
	call	_EVP_PKEY_copy_parameters
; Line 1984
	push	esi
	call	_EVP_PKEY_free
	add	esp, 24					; 00000018H
	sub	ebp, 1
	jns	SHORT $LL7@X509_get_p
$LN6@X509_get_p:
; Line 1987
	mov	eax, DWORD PTR _pkey$[esp+12]
	pop	ebp
	test	eax, eax
	je	SHORT $LN13@X509_get_p
; Line 1988
	push	edi
	push	eax
	call	_EVP_PKEY_copy_parameters
	add	esp, 8
$LN13@X509_get_p:
; Line 1989
	push	edi
	call	_EVP_PKEY_free
	add	esp, 4
; Line 1990
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1991
	ret	0
$LN17@X509_get_p:
; Line 1963
	push	1964					; 000007acH
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	108					; 0000006cH
; Line 1975
	push	110					; 0000006eH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1977
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1991
	ret	0
_X509_get_pubkey_parameters ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_gmtime_adj
_TEXT	SEGMENT
_t$1 = -8						; size = 8
_s$ = 8							; size = 4
_adj$ = 12						; size = 4
_X509_gmtime_adj PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1924
	mov	eax, 8
	call	__chkstk
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\time.h
; Line 535
	lea	eax, DWORD PTR _t$1[esp+8]
	push	eax
	call	DWORD PTR __imp___time64
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1943
	mov	eax, DWORD PTR _s$[esp+8]
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\time.h
; Line 535
	add	esp, 4
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1943
	test	eax, eax
	je	SHORT $LN10@X509_gmtim
	test	BYTE PTR [eax+12], 64			; 00000040H
	jne	SHORT $LN10@X509_gmtim
; Line 1944
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, 23					; 00000017H
	jne	SHORT $LN9@X509_gmtim
; Line 1945
	push	DWORD PTR _adj$[esp+4]
	push	0
	push	DWORD PTR _t$1[esp+20]
	push	DWORD PTR _t$1[esp+20]
	push	eax
	call	_ASN1_UTCTIME_adj
; Line 1949
	add	esp, 20					; 00000014H
; Line 1926
	add	esp, 8
	ret	0
$LN9@X509_gmtim:
; Line 1946
	cmp	ecx, 24					; 00000018H
	jne	SHORT $LN10@X509_gmtim
; Line 1947
	push	DWORD PTR _adj$[esp+4]
	push	0
	push	DWORD PTR _t$1[esp+20]
	push	DWORD PTR _t$1[esp+20]
	push	eax
	call	_ASN1_GENERALIZEDTIME_adj
; Line 1949
	add	esp, 20					; 00000014H
; Line 1926
	add	esp, 8
	ret	0
$LN10@X509_gmtim:
; Line 1949
	push	DWORD PTR _adj$[esp+4]
	push	0
	push	DWORD PTR _t$1[esp+20]
	push	DWORD PTR _t$1[esp+20]
	push	eax
	call	_ASN1_TIME_adj
	add	esp, 20					; 00000014H
; Line 1926
	add	esp, 8
	ret	0
_X509_gmtime_adj ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_time_adj_ex
_TEXT	SEGMENT
_t$ = -8						; size = 8
_s$ = 8							; size = 4
_offset_day$ = 12					; size = 4
_offset_sec$ = 16					; size = 4
_in_tm$ = 20						; size = 4
_X509_time_adj_ex PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1935
	mov	eax, 8
	call	__chkstk
; Line 1938
	mov	eax, DWORD PTR _in_tm$[esp+4]
	test	eax, eax
	je	SHORT $LN2@X509_time_
; Line 1939
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$[esp+8], ecx
	mov	DWORD PTR _t$[esp+12], edx
	jmp	SHORT $LN3@X509_time_
$LN2@X509_time_:
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\time.h
; Line 535
	lea	eax, DWORD PTR _t$[esp+8]
	push	eax
	call	DWORD PTR __imp___time64
	mov	edx, DWORD PTR _t$[esp+16]
	add	esp, 4
	mov	ecx, DWORD PTR _t$[esp+8]
$LN3@X509_time_:
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1943
	mov	eax, DWORD PTR _s$[esp+4]
	test	eax, eax
	je	SHORT $LN6@X509_time_
	test	BYTE PTR [eax+12], 64			; 00000040H
	jne	SHORT $LN6@X509_time_
; Line 1944
	cmp	DWORD PTR [eax+4], 23			; 00000017H
	jne	SHORT $LN5@X509_time_
; Line 1945
	push	DWORD PTR _offset_sec$[esp+4]
	push	DWORD PTR _offset_day$[esp+8]
	push	edx
	push	ecx
	push	eax
	call	_ASN1_UTCTIME_adj
; Line 1949
	add	esp, 20					; 00000014H
; Line 1950
	add	esp, 8
	ret	0
$LN5@X509_time_:
; Line 1946
	cmp	DWORD PTR [eax+4], 24			; 00000018H
	jne	SHORT $LN6@X509_time_
; Line 1947
	push	DWORD PTR _offset_sec$[esp+4]
	push	DWORD PTR _offset_day$[esp+8]
	push	edx
	push	ecx
	push	eax
	call	_ASN1_GENERALIZEDTIME_adj
; Line 1949
	add	esp, 20					; 00000014H
; Line 1950
	add	esp, 8
	ret	0
$LN6@X509_time_:
; Line 1949
	push	DWORD PTR _offset_sec$[esp+4]
	push	DWORD PTR _offset_day$[esp+8]
	push	edx
	push	ecx
	push	eax
	call	_ASN1_TIME_adj
	add	esp, 20					; 00000014H
; Line 1950
	add	esp, 8
	ret	0
_X509_time_adj_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_time_adj
_TEXT	SEGMENT
_s$ = 8							; size = 4
_offset_sec$ = 12					; size = 4
_in_tm$ = 16						; size = 4
_X509_time_adj PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1930
	push	DWORD PTR _in_tm$[esp-4]
	push	DWORD PTR _offset_sec$[esp]
	push	0
	push	DWORD PTR _s$[esp+8]
	call	_X509_time_adj_ex
	add	esp, 16					; 00000010H
; Line 1931
	ret	0
_X509_time_adj ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_cmp_current_time
_TEXT	SEGMENT
_ctm$ = 8						; size = 4
_X509_cmp_current_time PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1803
	push	0
	push	DWORD PTR _ctm$[esp]
	call	_X509_cmp_time
	add	esp, 8
; Line 1804
	ret	0
_X509_cmp_current_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_cmp_time
_TEXT	SEGMENT
_cmp_time$GSCopy$1$ = -72				; size = 4
_atm$ = -68						; size = 16
_buff1$ = -52						; size = 24
_buff2$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ctm$ = 8						; size = 4
_cmp_time$ = 12						; size = 4
_X509_cmp_time PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 1807
	mov	eax, 72					; 00000048H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+72], eax
	mov	eax, DWORD PTR _cmp_time$[esp+68]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctm$[esp+80]
	mov	DWORD PTR _cmp_time$GSCopy$1$[esp+84], eax
; Line 1823
	mov	ebp, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+8]
	cmp	ebp, 23					; 00000017H
	jne	SHORT $LN5@X509_cmp_t
; Line 1827
	lea	eax, DWORD PTR [edx-11]
	cmp	eax, 6
	ja	SHORT $LN8@X509_cmp_t
; Line 1829
	mov	ax, WORD PTR [ecx+8]
; Line 1830
	lea	esi, DWORD PTR _buff1$[esp+94]
	movq	xmm0, QWORD PTR [ecx]
; Line 1831
	add	ecx, 10					; 0000000aH
	mov	WORD PTR _buff1$[esp+92], ax
; Line 1832
	sub	edx, 10					; 0000000aH
; Line 1833
	jmp	SHORT $LN48@X509_cmp_t
$LN8@X509_cmp_t:
	pop	edi
	pop	esi
; Line 1828
	xor	eax, eax
	pop	ebp
; Line 1921
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN5@X509_cmp_t:
; Line 1837
	lea	eax, DWORD PTR [edx-13]
	cmp	eax, 10					; 0000000aH
	ja	SHORT $LN8@X509_cmp_t
; Line 1839
	mov	eax, DWORD PTR [ecx+8]
; Line 1840
	lea	esi, DWORD PTR _buff1$[esp+96]
	movq	xmm0, QWORD PTR [ecx]
; Line 1841
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _buff1$[esp+92], eax
; Line 1842
	sub	edx, 12					; 0000000cH
$LN48@X509_cmp_t:
; Line 1845
	mov	al, BYTE PTR [ecx]
	movq	QWORD PTR _buff1$[esp+84], xmm0
	push	ebx
	cmp	al, 90					; 0000005aH
	je	SHORT $LN13@X509_cmp_t
	cmp	al, 45					; 0000002dH
	je	SHORT $LN13@X509_cmp_t
	cmp	al, 43					; 0000002bH
	je	SHORT $LN13@X509_cmp_t
; Line 1850
	cmp	edx, 2
	jl	$LN25@X509_cmp_t
; Line 1852
	mov	BYTE PTR [esi], al
; Line 1853
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 2
	mov	BYTE PTR [esi+1], al
	add	esi, 2
; Line 1854
	sub	edx, 2
; Line 1860
	je	SHORT $LN3@X509_cmp_t
	cmp	BYTE PTR [ecx], 46			; 0000002eH
	jne	SHORT $LN3@X509_cmp_t
; Line 1861
	inc	ecx
; Line 1862
	dec	edx
; Line 1863
	xor	eax, eax
	npad	3
$LL4@X509_cmp_t:
	test	edx, edx
	je	SHORT $LN3@X509_cmp_t
; Line 1864
	mov	bl, BYTE PTR [ecx]
	cmp	bl, 48					; 00000030H
	jl	SHORT $LN3@X509_cmp_t
	cmp	bl, 57					; 00000039H
	jg	SHORT $LN3@X509_cmp_t
; Line 1863
	inc	eax
	inc	ecx
	dec	edx
	cmp	eax, 3
	jl	SHORT $LL4@X509_cmp_t
; Line 1864
	jmp	SHORT $LN3@X509_cmp_t
$LN13@X509_cmp_t:
; Line 1846
	mov	WORD PTR [esi], 12336			; 00003030H
; Line 1847
	add	esi, 2
$LN3@X509_cmp_t:
; Line 1870
	mov	WORD PTR [esi], 90			; 0000005aH
; Line 1874
	test	edx, edx
	je	$LN25@X509_cmp_t
; Line 1876
	mov	bl, BYTE PTR [ecx]
	cmp	bl, 90					; 0000005aH
	jne	SHORT $LN19@X509_cmp_t
; Line 1877
	cmp	edx, 1
	jne	$LN25@X509_cmp_t
; Line 1879
	xor	ecx, ecx
; Line 1880
	jmp	$LN26@X509_cmp_t
$LN19@X509_cmp_t:
; Line 1882
	cmp	bl, 43					; 0000002bH
	je	SHORT $LN22@X509_cmp_t
	cmp	bl, 45					; 0000002dH
	jne	$LN25@X509_cmp_t
$LN22@X509_cmp_t:
; Line 1885
	cmp	edx, 5
	jne	$LN25@X509_cmp_t
; Line 1888
	mov	al, BYTE PTR [ecx+1]
	cmp	al, 48					; 00000030H
	jl	$LN25@X509_cmp_t
	cmp	al, 57					; 00000039H
	jg	$LN25@X509_cmp_t
	mov	dl, BYTE PTR [ecx+2]
	cmp	dl, 48					; 00000030H
	jl	$LN25@X509_cmp_t
	cmp	dl, 57					; 00000039H
	jg	$LN25@X509_cmp_t
	mov	bh, BYTE PTR [ecx+3]
	cmp	bh, 48					; 00000030H
	jl	$LN25@X509_cmp_t
	cmp	bh, 57					; 00000039H
	jg	$LN25@X509_cmp_t
	mov	dh, BYTE PTR [ecx+4]
	cmp	dh, 48					; 00000030H
	jl	$LN25@X509_cmp_t
	cmp	dh, 57					; 00000039H
	jg	$LN25@X509_cmp_t
; Line 1890
	movsx	eax, al
; Line 1891
	lea	ecx, DWORD PTR [eax+eax*4]
	movsx	eax, dl
	lea	eax, DWORD PTR [eax+ecx*2]
	lea	ecx, DWORD PTR [eax+eax*2]
	movsx	eax, bh
	lea	eax, DWORD PTR [eax+ecx*2]
	lea	ecx, DWORD PTR [eax+eax*4]
	movsx	eax, dh
	lea	ecx, DWORD PTR [ecx-16104]
	lea	ecx, DWORD PTR [eax+ecx*2]
; Line 1892
	cmp	bl, 45					; 0000002dH
	jne	SHORT $LN26@X509_cmp_t
; Line 1893
	neg	ecx
$LN26@X509_cmp_t:
; Line 1930
	push	DWORD PTR _cmp_time$GSCopy$1$[esp+88]
; Line 1898
	lea	eax, DWORD PTR _buff2$[esp+92]
	mov	DWORD PTR _atm$[esp+96], ebp
	mov	DWORD PTR _atm$[esp+100], eax
; Line 1900
	mov	eax, ecx
	shl	eax, 4
	sub	eax, ecx
	mov	DWORD PTR _atm$[esp+104], 0
	shl	eax, 2
; Line 1930
	push	eax
	lea	eax, DWORD PTR _atm$[esp+96]
; Line 1897
	mov	DWORD PTR _atm$[esp+96], 24		; 00000018H
; Line 1930
	push	0
	push	eax
	call	_X509_time_adj_ex
	add	esp, 16					; 00000010H
; Line 1900
	test	eax, eax
	je	$LN25@X509_cmp_t
; Line 1903
	cmp	DWORD PTR [edi+4], 23			; 00000017H
	jne	SHORT $LN32@X509_cmp_t
; Line 1904
	movsx	eax, BYTE PTR _buff1$[esp+88]
	lea	edx, DWORD PTR [eax+eax*4]
	movsx	eax, BYTE PTR _buff1$[esp+89]
	lea	edx, DWORD PTR [edx-264]
	lea	edx, DWORD PTR [eax+edx*2]
; Line 1905
	cmp	edx, 50					; 00000032H
	jge	SHORT $LN29@X509_cmp_t
; Line 1906
	add	edx, 100				; 00000064H
$LN29@X509_cmp_t:
; Line 1907
	movsx	eax, BYTE PTR _buff2$[esp+88]
	lea	ecx, DWORD PTR [eax+eax*4]
	movsx	eax, BYTE PTR _buff2$[esp+89]
	lea	eax, DWORD PTR [eax+ecx*2]
	add	eax, -528				; fffffdf0H
; Line 1908
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN30@X509_cmp_t
; Line 1909
	add	eax, 100				; 00000064H
$LN30@X509_cmp_t:
; Line 1911
	cmp	edx, eax
	jge	SHORT $LN49@X509_cmp_t
; Line 1912
	pop	ebx
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebp
; Line 1921
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN49@X509_cmp_t:
; Line 1913
	jle	SHORT $LN32@X509_cmp_t
; Line 1914
	pop	ebx
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebp
; Line 1921
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN32@X509_cmp_t:
; Line 1916
	lea	ecx, DWORD PTR _buff2$[esp+88]
	lea	eax, DWORD PTR _buff1$[esp+88]
	npad	7
$LL43@X509_cmp_t:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN44@X509_cmp_t
	test	dl, dl
	je	SHORT $LN45@X509_cmp_t
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN44@X509_cmp_t
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL43@X509_cmp_t
$LN45@X509_cmp_t:
	pop	ebx
	xor	eax, eax
; Line 1917
	or	ecx, -1
	pop	edi
	test	eax, eax
	pop	esi
	cmove	eax, ecx
	pop	ebp
; Line 1921
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN44@X509_cmp_t:
; Line 1916
	sbb	eax, eax
; Line 1917
	or	ecx, -1
	pop	ebx
	or	eax, 1
	pop	edi
	test	eax, eax
	pop	esi
	cmove	eax, ecx
	pop	ebp
; Line 1921
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN25@X509_cmp_t:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+88]
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
_X509_cmp_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_default
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_X509_STORE_CTX_set_default PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2471
	push	DWORD PTR _name$[esp-4]
	call	_X509_VERIFY_PARAM_lookup
	add	esp, 4
; Line 2472
	test	eax, eax
	jne	SHORT $LN2@X509_STORE
; Line 2475
	ret	0
$LN2@X509_STORE:
; Line 2474
	push	eax
	mov	eax, DWORD PTR _ctx$[esp]
	push	DWORD PTR [eax+20]
	call	_X509_VERIFY_PARAM_inherit
	add	esp, 8
; Line 2475
	ret	0
_X509_STORE_CTX_set_default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set0_param
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_param$ = 12						; size = 4
_X509_STORE_CTX_set0_param PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2483
	push	esi
; Line 2484
	mov	esi, DWORD PTR _ctx$[esp]
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN4@X509_STORE
; Line 2485
	push	eax
	call	_X509_VERIFY_PARAM_free
	add	esp, 4
$LN4@X509_STORE:
; Line 2486
	mov	eax, DWORD PTR _param$[esp]
	mov	DWORD PTR [esi+20], eax
	pop	esi
; Line 2487
	ret	0
_X509_STORE_CTX_set0_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get0_param
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get0_param PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2479
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+20]
; Line 2480
	ret	0
_X509_STORE_CTX_get0_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_explicit_policy
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get_explicit_policy PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2465
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+92]
; Line 2466
	ret	0
_X509_STORE_CTX_get_explicit_policy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get0_policy_tree
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get0_policy_tree PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2460
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+88]
; Line 2461
	ret	0
_X509_STORE_CTX_get0_policy_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_verify_cb
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_verify_cb$ = 12					; size = 4
_X509_STORE_CTX_set_verify_cb PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2455
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _verify_cb$[esp-4]
	mov	DWORD PTR [eax+32], ecx
; Line 2456
	ret	0
_X509_STORE_CTX_set_verify_cb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_time
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_t$ = 16						; size = 8
_X509_STORE_CTX_set_time PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2449
	push	DWORD PTR _t$[esp]
	mov	eax, DWORD PTR _ctx$[esp]
	push	DWORD PTR _t$[esp]
	push	DWORD PTR [eax+20]
	call	_X509_VERIFY_PARAM_set_time
	add	esp, 12					; 0000000cH
; Line 2450
	ret	0
_X509_STORE_CTX_set_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_flags
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_X509_STORE_CTX_set_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2443
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR _flags$[esp-4]
	push	DWORD PTR [eax+20]
	call	_X509_VERIFY_PARAM_set_flags
	add	esp, 8
; Line 2444
	ret	0
_X509_STORE_CTX_set_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_purpose_inherit
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_def_purpose$ = 12					; size = 4
_purpose$ = 16						; size = 4
_trust$ = 20						; size = 4
_X509_STORE_CTX_purpose_inherit PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2209
	push	esi
; Line 2212
	mov	esi, DWORD PTR _def_purpose$[esp]
	push	edi
	mov	edi, DWORD PTR _purpose$[esp+4]
	test	edi, edi
	jne	SHORT $LN14@X509_STORE
; Line 2213
	mov	edi, esi
; Line 2215
	test	esi, esi
	jne	SHORT $LN14@X509_STORE
; Line 2235
	mov	esi, DWORD PTR _trust$[esp+4]
	jmp	SHORT $LN7@X509_STORE
$LN14@X509_STORE:
; Line 2217
	push	edi
	call	_X509_PURPOSE_get_by_id
	add	esp, 4
; Line 2218
	cmp	eax, -1
	jne	SHORT $LN4@X509_STORE
; Line 2219
	push	2220					; 000008acH
$LN16@X509_STORE:
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	121					; 00000079H
	push	134					; 00000086H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2221
	xor	eax, eax
	pop	edi
	pop	esi
; Line 2251
	ret	0
$LN4@X509_STORE:
; Line 2223
	push	eax
	call	_X509_PURPOSE_get0
	add	esp, 4
; Line 2224
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN5@X509_STORE
; Line 2225
	push	esi
	call	_X509_PURPOSE_get_by_id
	add	esp, 4
; Line 2226
	cmp	eax, -1
	jne	SHORT $LN6@X509_STORE
; Line 2227
	push	2228					; 000008b4H
; Line 2229
	jmp	SHORT $LN16@X509_STORE
$LN6@X509_STORE:
; Line 2231
	push	eax
	call	_X509_PURPOSE_get0
	add	esp, 4
$LN5@X509_STORE:
; Line 2234
	mov	esi, DWORD PTR _trust$[esp+4]
	test	esi, esi
	jne	SHORT $LN13@X509_STORE
; Line 2235
	mov	esi, DWORD PTR [eax+4]
$LN7@X509_STORE:
; Line 2237
	test	esi, esi
	je	SHORT $LN9@X509_STORE
$LN13@X509_STORE:
; Line 2238
	push	esi
	call	_X509_TRUST_get_by_id
	add	esp, 4
; Line 2239
	cmp	eax, -1
	jne	SHORT $LN9@X509_STORE
; Line 2240
	push	2241					; 000008c1H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	120					; 00000078H
	push	134					; 00000086H
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 2251
	ret	0
$LN9@X509_STORE:
; Line 2246
	mov	eax, DWORD PTR _ctx$[esp+4]
	test	edi, edi
	je	SHORT $LN10@X509_STORE
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN10@X509_STORE
; Line 2247
	mov	DWORD PTR [ecx+24], edi
$LN10@X509_STORE:
; Line 2248
	test	esi, esi
	je	SHORT $LN11@X509_STORE
	mov	eax, DWORD PTR [eax+20]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN11@X509_STORE
; Line 2249
	mov	DWORD PTR [eax+28], esi
$LN11@X509_STORE:
	pop	edi
; Line 2250
	mov	eax, 1
	pop	esi
; Line 2251
	ret	0
_X509_STORE_CTX_purpose_inherit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_trust
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_trust$ = 12						; size = 4
_X509_STORE_CTX_set_trust PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2193
	push	DWORD PTR _trust$[esp-4]
	push	0
	push	0
	push	DWORD PTR _ctx$[esp+8]
	call	_X509_STORE_CTX_purpose_inherit
	add	esp, 16					; 00000010H
; Line 2194
	ret	0
_X509_STORE_CTX_set_trust ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_purpose
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_purpose$ = 12						; size = 4
_X509_STORE_CTX_set_purpose PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2188
	push	0
	push	DWORD PTR _purpose$[esp]
	push	0
	push	DWORD PTR _ctx$[esp+8]
	call	_X509_STORE_CTX_purpose_inherit
	add	esp, 16					; 00000010H
; Line 2189
	ret	0
_X509_STORE_CTX_set_purpose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set0_crls
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sk$ = 12						; size = 4
_X509_STORE_CTX_set0_crls PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2183
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _sk$[esp-4]
	mov	DWORD PTR [eax+16], ecx
; Line 2184
	ret	0
_X509_STORE_CTX_set0_crls ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_chain
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sk$ = 12						; size = 4
_X509_STORE_CTX_set_chain PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2178
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _sk$[esp-4]
	mov	DWORD PTR [eax+12], ecx
; Line 2179
	ret	0
_X509_STORE_CTX_set_chain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_cert
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_X509_STORE_CTX_set_cert PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2173
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _x$[esp-4]
	mov	DWORD PTR [eax+8], ecx
; Line 2174
	ret	0
_X509_STORE_CTX_set_cert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get1_chain
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get1_chain PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2151
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+84]
	test	eax, eax
	jne	SHORT $LN2@X509_STORE
; Line 2154
	ret	0
$LN2@X509_STORE:
; Line 2153
	mov	DWORD PTR _ctx$[esp-4], eax
	jmp	_X509_chain_up_ref
_X509_STORE_CTX_get1_chain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_chain
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get_chain PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2146
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+84]
; Line 2147
	ret	0
_X509_STORE_CTX_get_chain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get0_parent_ctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get0_parent_ctx PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2168
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+124]
; Line 2169
	ret	0
_X509_STORE_CTX_get0_parent_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get0_current_crl
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get0_current_crl PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2163
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+112]
; Line 2164
	ret	0
_X509_STORE_CTX_get0_current_crl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get0_current_issuer
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get0_current_issuer PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2158
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+108]
; Line 2159
	ret	0
_X509_STORE_CTX_get0_current_issuer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_current_cert
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get_current_cert PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2141
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+104]
; Line 2142
	ret	0
_X509_STORE_CTX_get_current_cert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_error_depth
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get_error_depth PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2136
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+96]
; Line 2137
	ret	0
_X509_STORE_CTX_get_error_depth ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_error
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_err$ = 12						; size = 4
_X509_STORE_CTX_set_error PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2131
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _err$[esp-4]
	mov	DWORD PTR [eax+100], ecx
; Line 2132
	ret	0
_X509_STORE_CTX_set_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_error
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_get_error PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2126
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR [eax+100]
; Line 2127
	ret	0
_X509_STORE_CTX_get_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_ex_data
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_idx$ = 12						; size = 4
_X509_STORE_CTX_get_ex_data PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2121
	sub	DWORD PTR _ctx$[esp-4], -128		; ffffff80H
	jmp	_CRYPTO_get_ex_data
_X509_STORE_CTX_get_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_ex_data
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_idx$ = 12						; size = 4
_data$ = 16						; size = 4
_X509_STORE_CTX_set_ex_data PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2116
	sub	DWORD PTR _ctx$[esp-4], -128		; ffffff80H
	jmp	_CRYPTO_set_ex_data
_X509_STORE_CTX_set_ex_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_get_ex_new_index
_TEXT	SEGMENT
_argl$ = 8						; size = 4
_argp$ = 12						; size = 4
_new_func$ = 16						; size = 4
_dup_func$ = 20						; size = 4
_free_func$ = 24					; size = 4
_X509_STORE_CTX_get_ex_new_index PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2110
	push	DWORD PTR _free_func$[esp-4]
	push	DWORD PTR _dup_func$[esp]
	push	DWORD PTR _new_func$[esp+4]
	push	DWORD PTR _argp$[esp+8]
	push	DWORD PTR _argl$[esp+12]
	push	5
	call	_CRYPTO_get_ex_new_index
	add	esp, 24					; 00000018H
; Line 2112
	ret	0
_X509_STORE_CTX_get_ex_new_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_cleanup
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_cleanup PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2407
	push	esi
	push	edi
; Line 2415
	mov	edi, DWORD PTR _ctx$[esp+4]
	mov	eax, DWORD PTR [edi+72]
	test	eax, eax
	je	SHORT $LN2@X509_STORE
; Line 2416
	push	edi
	call	eax
	add	esp, 4
; Line 2417
	mov	DWORD PTR [edi+72], 0
$LN2@X509_STORE:
; Line 2419
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN3@X509_STORE
; Line 2420
	cmp	DWORD PTR [edi+124], 0
	jne	SHORT $LN4@X509_STORE
; Line 2421
	push	eax
	call	_X509_VERIFY_PARAM_free
	add	esp, 4
$LN4@X509_STORE:
; Line 2422
	mov	DWORD PTR [edi+20], 0
$LN3@X509_STORE:
; Line 2424
	mov	eax, DWORD PTR [edi+88]
	test	eax, eax
	je	SHORT $LN5@X509_STORE
; Line 2425
	push	eax
	call	_X509_policy_tree_free
	add	esp, 4
; Line 2426
	mov	DWORD PTR [edi+88], 0
$LN5@X509_STORE:
; Line 2428
	mov	eax, DWORD PTR [edi+84]
	test	eax, eax
	je	SHORT $LN6@X509_STORE
; Line 2429
	push	OFFSET _X509_free
	push	eax
	call	_sk_pop_free
	add	esp, 8
; Line 2430
	mov	DWORD PTR [edi+84], 0
$LN6@X509_STORE:
; Line 2432
	lea	esi, DWORD PTR [edi+128]
	push	esi
	push	edi
	push	5
	call	_CRYPTO_free_ex_data
	add	esp, 12					; 0000000cH
	xorps	xmm0, xmm0
; Line 2433
	movq	QWORD PTR [esi], xmm0
	pop	edi
	pop	esi
; Line 2434
	ret	0
_X509_STORE_CTX_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_trusted_stack
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sk$ = 12						; size = 4
_X509_STORE_CTX_trusted_stack PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2402
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	eax, DWORD PTR _sk$[esp-4]
	mov	DWORD PTR [ecx+24], eax
; Line 2403
	mov	DWORD PTR [ecx+36], OFFSET _get_issuer_sk
; Line 2404
	ret	0
_X509_STORE_CTX_trusted_stack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_store$ = 12						; size = 4
_x509$ = 16						; size = 4
_chain$ = 20						; size = 4
_X509_STORE_CTX_init PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2279
	mov	eax, DWORD PTR _x509$[esp-4]
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	mov	edi, DWORD PTR _store$[esp+8]
; Line 2297
	lea	ebx, DWORD PTR [esi+128]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR _chain$[esp+8]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+80], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR [esi+84], 0
	mov	DWORD PTR [esi+100], 0
	mov	DWORD PTR [esi+92], 0
	mov	DWORD PTR [esi+96], 0
	mov	DWORD PTR [esi+104], 0
	mov	DWORD PTR [esi+108], 0
	mov	DWORD PTR [esi+112], 0
	mov	DWORD PTR [esi+116], 0
	mov	DWORD PTR [esi+120], 0
	mov	DWORD PTR [esi+88], 0
	mov	DWORD PTR [esi+124], 0
	movq	QWORD PTR [ebx], xmm0
; Line 2299
	call	_X509_VERIFY_PARAM_new
	mov	DWORD PTR [esi+20], eax
; Line 2300
	test	eax, eax
	jne	SHORT $LN2@X509_STORE
; Line 2301
	push	2301					; 000008fdH
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	143					; 0000008fH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2392
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2393
	ret	0
$LN2@X509_STORE:
; Line 2308
	test	edi, edi
	je	SHORT $LN3@X509_STORE
; Line 2309
	push	DWORD PTR [edi+12]
	push	eax
	call	_X509_VERIFY_PARAM_inherit
; Line 2314
	mov	ecx, DWORD PTR [edi+20]
	add	esp, 8
	mov	DWORD PTR [esi+32], ecx
; Line 2316
	mov	ecx, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+72], ecx
; Line 2320
	test	eax, eax
	je	SHORT $LN31@X509_STORE
	jmp	SHORT $LN32@X509_STORE
$LN3@X509_STORE:
; Line 2311
	or	DWORD PTR [eax+16], 17			; 00000011H
; Line 2318
	mov	DWORD PTR [esi+72], 0
$LN32@X509_STORE:
; Line 2321
	push	OFFSET ??_C@_07DLHCIBDH@default?$AA@
	call	_X509_VERIFY_PARAM_lookup
	push	eax
	push	DWORD PTR [esi+20]
	call	_X509_VERIFY_PARAM_inherit
	add	esp, 12					; 0000000cH
; Line 2324
	test	eax, eax
	jne	SHORT $LN8@X509_STORE
$LN31@X509_STORE:
; Line 2325
	push	2325					; 00000915H
; Line 2326
	jmp	$LN34@X509_STORE
$LN8@X509_STORE:
; Line 2329
	test	edi, edi
	je	SHORT $LN9@X509_STORE
	mov	eax, DWORD PTR [edi+28]
	test	eax, eax
	je	SHORT $LN9@X509_STORE
; Line 2330
	mov	DWORD PTR [esi+40], eax
	jmp	SHORT $LN10@X509_STORE
$LN9@X509_STORE:
; Line 2332
	mov	DWORD PTR [esi+40], OFFSET _check_issued
$LN10@X509_STORE:
; Line 2334
	test	edi, edi
	je	SHORT $LN11@X509_STORE
	mov	eax, DWORD PTR [edi+24]
	test	eax, eax
	je	SHORT $LN11@X509_STORE
; Line 2335
	mov	DWORD PTR [esi+36], eax
	jmp	SHORT $LN12@X509_STORE
$LN11@X509_STORE:
; Line 2337
	mov	DWORD PTR [esi+36], OFFSET _X509_STORE_CTX_get1_issuer
$LN12@X509_STORE:
; Line 2339
	test	edi, edi
	je	SHORT $LN13@X509_STORE
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN13@X509_STORE
; Line 2340
	mov	DWORD PTR [esi+32], eax
	jmp	SHORT $LN14@X509_STORE
$LN13@X509_STORE:
; Line 2342
	mov	DWORD PTR [esi+32], OFFSET _null_callback
$LN14@X509_STORE:
; Line 2344
	test	edi, edi
	je	SHORT $LN15@X509_STORE
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	je	SHORT $LN15@X509_STORE
; Line 2345
	mov	DWORD PTR [esi+28], eax
	jmp	SHORT $LN16@X509_STORE
$LN15@X509_STORE:
; Line 2347
	mov	DWORD PTR [esi+28], OFFSET _internal_verify
$LN16@X509_STORE:
; Line 2349
	test	edi, edi
	je	SHORT $LN17@X509_STORE
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN17@X509_STORE
; Line 2350
	mov	DWORD PTR [esi+44], eax
	jmp	SHORT $LN18@X509_STORE
$LN17@X509_STORE:
; Line 2352
	mov	DWORD PTR [esi+44], OFFSET _check_revocation
$LN18@X509_STORE:
; Line 2354
	test	edi, edi
	je	SHORT $LN19@X509_STORE
	mov	eax, DWORD PTR [edi+36]
	test	eax, eax
	je	SHORT $LN19@X509_STORE
; Line 2355
	mov	DWORD PTR [esi+48], eax
	jmp	SHORT $LN20@X509_STORE
$LN19@X509_STORE:
; Line 2357
	mov	DWORD PTR [esi+48], 0
$LN20@X509_STORE:
; Line 2359
	test	edi, edi
	je	SHORT $LN21@X509_STORE
	mov	eax, DWORD PTR [edi+40]
	test	eax, eax
	je	SHORT $LN21@X509_STORE
; Line 2360
	mov	DWORD PTR [esi+52], eax
	jmp	SHORT $LN22@X509_STORE
$LN21@X509_STORE:
; Line 2362
	mov	DWORD PTR [esi+52], OFFSET _check_crl
$LN22@X509_STORE:
; Line 2364
	test	edi, edi
	je	SHORT $LN23@X509_STORE
	mov	eax, DWORD PTR [edi+44]
	test	eax, eax
	je	SHORT $LN23@X509_STORE
; Line 2365
	mov	DWORD PTR [esi+56], eax
	jmp	SHORT $LN24@X509_STORE
$LN23@X509_STORE:
; Line 2367
	mov	DWORD PTR [esi+56], OFFSET _cert_crl
$LN24@X509_STORE:
; Line 2369
	test	edi, edi
	je	SHORT $LN25@X509_STORE
	mov	eax, DWORD PTR [edi+48]
	test	eax, eax
	je	SHORT $LN25@X509_STORE
; Line 2370
	mov	DWORD PTR [esi+64], eax
	jmp	SHORT $LN26@X509_STORE
$LN25@X509_STORE:
; Line 2372
	mov	DWORD PTR [esi+64], OFFSET _X509_STORE_get1_certs
$LN26@X509_STORE:
; Line 2374
	test	edi, edi
	je	SHORT $LN27@X509_STORE
	mov	eax, DWORD PTR [edi+52]
	test	eax, eax
	je	SHORT $LN27@X509_STORE
; Line 2375
	mov	DWORD PTR [esi+68], eax
	jmp	SHORT $LN28@X509_STORE
$LN27@X509_STORE:
; Line 2377
	mov	DWORD PTR [esi+68], OFFSET _X509_STORE_get1_crls
$LN28@X509_STORE:
; Line 2381
	push	ebx
	push	esi
	push	5
	mov	DWORD PTR [esi+60], OFFSET _check_policy
	call	_CRYPTO_new_ex_data
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN29@X509_STORE
; Line 2383
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 2393
	ret	0
$LN29@X509_STORE:
; Line 2384
	push	2384					; 00000950H
$LN34@X509_STORE:
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	143					; 0000008fH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$36:
; Line 2391
	push	esi
	call	_X509_STORE_CTX_cleanup
	add	esp, 4
; Line 2392
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2393
	ret	0
_X509_STORE_CTX_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_free
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_X509_STORE_CTX_free PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2266
	push	esi
; Line 2267
	mov	esi, DWORD PTR _ctx$[esp]
	test	esi, esi
	je	SHORT $LN1@X509_STORE
; Line 2269
	push	esi
	call	_X509_STORE_CTX_cleanup
; Line 2270
	push	esi
	call	_CRYPTO_free
	add	esp, 8
$LN1@X509_STORE:
	pop	esi
; Line 2271
	ret	0
_X509_STORE_CTX_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_new
_TEXT	SEGMENT
_X509_STORE_CTX_new PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2254
	push	esi
; Line 2256
	push	2256					; 000008d0H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	136					; 00000088H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 2257
	test	esi, esi
	jne	SHORT $LN2@X509_STORE
; Line 2258
	push	2258					; 000008d2H
	push	OFFSET ??_C@_0BJ@POMCDKOO@?4?2crypto?2x509?2x509_vfy?4c?$AA@
	push	65					; 00000041H
	push	142					; 0000008eH
	push	11					; 0000000bH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2259
	xor	eax, eax
	pop	esi
; Line 2263
	ret	0
$LN2@X509_STORE:
; Line 2261
	push	136					; 00000088H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2262
	mov	eax, esi
	pop	esi
; Line 2263
	ret	0
_X509_STORE_CTX_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_STORE_CTX_set_depth
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_depth$ = 12						; size = 4
_X509_STORE_CTX_set_depth PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509\x509_vfy.c
; Line 2438
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR _depth$[esp-4]
	push	DWORD PTR [eax+20]
	call	_X509_VERIFY_PARAM_set_depth
	add	esp, 8
; Line 2439
	ret	0
_X509_STORE_CTX_set_depth ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\time.h
; Line 535
	jmp	DWORD PTR __imp___time64
_time	ENDP
_TEXT	ENDS
END
