; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_shift.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_lshift
PUBLIC	_BN_lshift1
PUBLIC	_BN_rshift
PUBLIC	_BN_rshift1
PUBLIC	??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@ ; `string'
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_bn_expand2:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@
CONST	SEGMENT
??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@ DB '.\crypto\bn\bn_shi'
	DB	'ft.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_rshift1
_TEXT	SEGMENT
_r$ = 8							; size = 4
_j$1$ = 12						; size = 4
_a$ = 12						; size = 4
_BN_rshift1 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_shift.c
; Line 97
	push	esi
	push	edi
; Line 104
	mov	edi, DWORD PTR _a$[esp+4]
	mov	esi, DWORD PTR [edi+4]
	test	esi, esi
	jne	SHORT $LN4@BN_rshift1
; Line 105
	push	esi
	push	DWORD PTR _r$[esp+8]
	call	_BN_set_word
	add	esp, 8
; Line 106
	lea	eax, DWORD PTR [esi+1]
	pop	edi
	pop	esi
; Line 129
	ret	0
$LN4@BN_rshift1:
	push	ebx
; Line 111
	mov	ebx, DWORD PTR _r$[esp+8]
	xor	eax, eax
	push	ebp
	mov	ebp, DWORD PTR [edi]
	mov	ecx, esi
	cmp	DWORD PTR [ebp+esi*4-4], 1
	sete	al
	sub	ecx, eax
	mov	DWORD PTR _j$1$[esp+12], ecx
	cmp	edi, ebx
	je	SHORT $LN5@BN_rshift1
; Line 112
	cmp	ecx, DWORD PTR [ebx+8]
	jg	SHORT $LN9@BN_rshift1
	mov	eax, ebx
	jmp	SHORT $LN10@BN_rshift1
$LN9@BN_rshift1:
	push	ecx
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN10@BN_rshift1:
	test	eax, eax
	jne	SHORT $LN6@BN_rshift1
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 129
	ret	0
$LN6@BN_rshift1:
; Line 114
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [ebx+12], eax
$LN5@BN_rshift1:
; Line 117
	mov	eax, DWORD PTR [ebp+esi*4-4]
	dec	esi
	mov	ecx, DWORD PTR [ebx]
; Line 118
	mov	edi, eax
	shl	edi, 31					; 0000001fH
; Line 119
	shr	eax, 1
	je	SHORT $LN11@BN_rshift1
; Line 120
	mov	DWORD PTR [ecx+esi*4], eax
$LN11@BN_rshift1:
; Line 121
	test	esi, esi
	jle	SHORT $LN3@BN_rshift1
	lea	edx, DWORD PTR [ecx+esi*4]
	sub	ebp, ecx
	npad	4
$LL2@BN_rshift1:
; Line 122
	mov	ecx, DWORD PTR [edx+ebp-4]
	lea	edx, DWORD PTR [edx-4]
; Line 123
	mov	eax, ecx
	dec	esi
	shr	eax, 1
	or	eax, edi
; Line 124
	mov	edi, ecx
	shl	edi, 31					; 0000001fH
	mov	DWORD PTR [edx], eax
	test	esi, esi
	jg	SHORT $LL2@BN_rshift1
$LN3@BN_rshift1:
; Line 126
	mov	eax, DWORD PTR _j$1$[esp+12]
	pop	ebp
	mov	DWORD PTR [ebx+4], eax
; Line 128
	mov	eax, 1
	pop	ebx
	pop	edi
	pop	esi
; Line 129
	ret	0
_BN_rshift1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_rshift
_TEXT	SEGMENT
_nw$1$ = -12						; size = 4
_i$1$ = -8						; size = 4
_lb$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_rb$1$ = 16						; size = 4
_n$ = 16						; size = 4
_BN_rshift PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_shift.c
; Line 174
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	edi
; Line 182
	mov	edi, DWORD PTR _n$[esp+12]
	test	edi, edi
	jns	SHORT $LN8@BN_rshift
; Line 183
	push	183					; 000000b7H
	push	OFFSET ??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@
	push	119					; 00000077H
	push	146					; 00000092H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 184
	xor	eax, eax
	pop	edi
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN8@BN_rshift:
; Line 187
	mov	eax, edi
	cdq
	and	edx, 31					; 0000001fH
	push	ebp
	push	esi
; Line 188
	mov	esi, edi
	lea	ecx, DWORD PTR [edx+eax]
	sar	ecx, 5
	mov	DWORD PTR _nw$1$[esp+24], ecx
	and	esi, -2147483617			; 8000001fH
	jns	SHORT $LN32@BN_rshift
	dec	esi
	or	esi, -32				; ffffffe0H
	inc	esi
$LN32@BN_rshift:
; Line 190
	mov	ebp, DWORD PTR _a$[esp+20]
	mov	eax, 32					; 00000020H
	sub	eax, esi
	mov	DWORD PTR _rb$1$[esp+20], esi
	mov	DWORD PTR _lb$1$[esp+24], eax
	mov	eax, DWORD PTR [ebp+4]
	cmp	ecx, eax
	jge	$LN10@BN_rshift
	test	eax, eax
	je	$LN10@BN_rshift
; Line 194
	push	ebx
	push	ebp
	call	_BN_num_bits
; Line 195
	mov	ebx, DWORD PTR _r$[esp+28]
	mov	ecx, 31					; 0000001fH
	sub	ecx, edi
	add	esp, 4
	add	eax, ecx
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	mov	DWORD PTR _i$1$[esp+28], eax
	cmp	ebx, ebp
	je	SHORT $LN11@BN_rshift
; Line 196
	mov	ecx, DWORD PTR [ebp+12]
	mov	DWORD PTR [ebx+12], ecx
; Line 197
	cmp	eax, DWORD PTR [ebx+8]
	jg	SHORT $LN19@BN_rshift
	mov	eax, ebx
	jmp	SHORT $LN20@BN_rshift
$LN19@BN_rshift:
	push	eax
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN20@BN_rshift:
	test	eax, eax
	jne	SHORT $LN14@BN_rshift
	pop	ebx
	pop	esi
	pop	ebp
	pop	edi
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN11@BN_rshift:
; Line 200
	test	edi, edi
	je	SHORT $LN17@BN_rshift
$LN14@BN_rshift:
; Line 204
	mov	ecx, DWORD PTR _nw$1$[esp+28]
	mov	eax, DWORD PTR [ebp]
; Line 206
	mov	edx, DWORD PTR [ebp+4]
	mov	edi, DWORD PTR [ebx]
	sub	edx, ecx
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 207
	mov	ecx, DWORD PTR _i$1$[esp+28]
	mov	DWORD PTR [ebx+4], ecx
; Line 209
	test	esi, esi
	jne	SHORT $LN15@BN_rshift
; Line 210
	test	edx, edx
	je	SHORT $LN17@BN_rshift
	npad	3
$LL4@BN_rshift:
; Line 211
	mov	ecx, DWORD PTR [eax]
	lea	edi, DWORD PTR [edi+4]
	mov	DWORD PTR [edi-4], ecx
	lea	eax, DWORD PTR [eax+4]
	sub	edx, 1
	jne	SHORT $LL4@BN_rshift
; Line 223
	pop	ebx
	pop	esi
	pop	ebp
	lea	eax, DWORD PTR [edx+1]
	pop	edi
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN15@BN_rshift:
; Line 213
	mov	ebx, DWORD PTR [eax]
; Line 214
	lea	ebp, DWORD PTR [edx-1]
	add	eax, 4
	test	ebp, ebp
	je	SHORT $LN6@BN_rshift
$LL7@BN_rshift:
; Line 215
	mov	ecx, esi
; Line 216
	lea	eax, DWORD PTR [eax+4]
	shr	ebx, cl
; Line 217
	mov	ecx, DWORD PTR _lb$1$[esp+28]
	mov	esi, ebx
	mov	ebx, DWORD PTR [eax-4]
	mov	edx, ebx
	shl	edx, cl
	or	edx, esi
	mov	esi, DWORD PTR _rb$1$[esp+24]
	mov	DWORD PTR [edi], edx
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL7@BN_rshift
$LN6@BN_rshift:
; Line 219
	mov	ecx, esi
	shr	ebx, cl
	test	ebx, ebx
	je	SHORT $LN17@BN_rshift
; Line 220
	mov	DWORD PTR [edi], ebx
$LN17@BN_rshift:
	pop	ebx
	pop	esi
	pop	ebp
; Line 223
	mov	eax, 1
	pop	edi
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN10@BN_rshift:
; Line 191
	push	0
	push	DWORD PTR _r$[esp+24]
	call	_BN_set_word
	add	esp, 8
; Line 192
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	edi
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
_BN_rshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_lshift1
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_BN_lshift1 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_shift.c
; Line 64
	push	esi
; Line 71
	mov	esi, DWORD PTR _r$[esp]
	push	edi
	mov	edi, DWORD PTR _a$[esp+4]
	cmp	esi, edi
	je	SHORT $LN5@BN_lshift1
; Line 72
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; Line 73
	mov	eax, DWORD PTR [edi+4]
	inc	eax
	cmp	eax, DWORD PTR [esi+8]
	jg	SHORT $LN11@BN_lshift1
	mov	eax, esi
	jmp	SHORT $LN12@BN_lshift1
$LN11@BN_lshift1:
	push	eax
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN12@BN_lshift1:
	test	eax, eax
	jne	SHORT $LN7@BN_lshift1
$LN19@BN_lshift1:
	pop	edi
; Line 74
	xor	eax, eax
	pop	esi
; Line 94
	ret	0
$LN7@BN_lshift1:
; Line 75
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; Line 76
	jmp	SHORT $LN8@BN_lshift1
$LN5@BN_lshift1:
; Line 77
	mov	eax, DWORD PTR [edi+4]
	inc	eax
	cmp	eax, DWORD PTR [esi+8]
	jg	SHORT $LN13@BN_lshift1
	mov	eax, esi
	jmp	SHORT $LN14@BN_lshift1
$LN13@BN_lshift1:
	push	eax
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN14@BN_lshift1:
	test	eax, eax
	je	SHORT $LN19@BN_lshift1
$LN8@BN_lshift1:
	push	ebx
; Line 81
	mov	ebx, DWORD PTR [esi]
; Line 82
	xor	edx, edx
	push	ebp
	mov	ebp, DWORD PTR [edi]
; Line 83
	cmp	DWORD PTR [edi+4], edx
	jle	SHORT $LN9@BN_lshift1
	xor	esi, esi
$LL4@BN_lshift1:
; Line 84
	mov	ecx, DWORD PTR [ebp]
	lea	ebp, DWORD PTR [ebp+4]
	inc	esi
; Line 85
	lea	ebx, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR [ecx+ecx]
	or	eax, edx
; Line 86
	mov	edx, ecx
	mov	DWORD PTR [ebx-4], eax
	shr	edx, 31					; 0000001fH
	cmp	esi, DWORD PTR [edi+4]
	jl	SHORT $LL4@BN_lshift1
; Line 88
	mov	esi, DWORD PTR _r$[esp+12]
	test	edx, edx
	je	SHORT $LN9@BN_lshift1
; Line 89
	mov	DWORD PTR [ebx], 1
; Line 90
	inc	DWORD PTR [esi+4]
$LN9@BN_lshift1:
; Line 93
	pop	ebp
	pop	ebx
	pop	edi
	mov	eax, 1
	pop	esi
; Line 94
	ret	0
_BN_lshift1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_lshift
_TEXT	SEGMENT
_nw$1$ = -8						; size = 4
_rb$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_t$1$ = 16						; size = 4
_n$ = 16						; size = 4
_BN_lshift PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_shift.c
; Line 132
	mov	eax, 8
	call	__chkstk
	push	ebx
; Line 140
	mov	ebx, DWORD PTR _n$[esp+8]
	test	ebx, ebx
	jns	SHORT $LN11@BN_lshift
; Line 141
	push	141					; 0000008dH
	push	OFFSET ??_C@_0BH@MMMCIEC@?4?2crypto?2bn?2bn_shift?4c?$AA@
	push	119					; 00000077H
	push	145					; 00000091H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 142
	xor	eax, eax
	pop	ebx
; Line 171
	add	esp, 8
	ret	0
$LN11@BN_lshift:
	push	esi
; Line 145
	mov	esi, DWORD PTR _a$[esp+12]
	push	edi
	mov	edi, DWORD PTR _r$[esp+16]
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; Line 146
	mov	eax, ebx
	cdq
	and	edx, 31					; 0000001fH
	add	edx, eax
; Line 147
	mov	eax, DWORD PTR [esi+4]
	sar	edx, 5
	inc	eax
	add	eax, edx
	mov	DWORD PTR _nw$1$[esp+20], edx
	cmp	eax, DWORD PTR [edi+8]
	jg	SHORT $LN18@BN_lshift
	mov	eax, edi
	jmp	SHORT $LN19@BN_lshift
$LN18@BN_lshift:
	push	eax
	push	edi
	call	_bn_expand2
	mov	edx, DWORD PTR _nw$1$[esp+28]
	add	esp, 8
$LN19@BN_lshift:
	test	eax, eax
	jne	SHORT $LN12@BN_lshift
	pop	edi
	pop	esi
	pop	ebx
; Line 171
	add	esp, 8
	ret	0
$LN12@BN_lshift:
	push	ebp
; Line 149
	and	ebx, -2147483617			; 8000001fH
	jns	SHORT $LN36@BN_lshift
	dec	ebx
	or	ebx, -32				; ffffffe0H
	inc	ebx
$LN36@BN_lshift:
; Line 152
	mov	eax, DWORD PTR [edi]
	mov	ecx, 32					; 00000020H
	mov	ebp, DWORD PTR [esi]
	sub	ecx, ebx
	mov	DWORD PTR _t$1$[esp+20], eax
; Line 153
	mov	eax, DWORD PTR [esi+4]
	mov	edi, DWORD PTR _t$1$[esp+20]
	add	eax, edx
	mov	DWORD PTR _rb$1$[esp+24], ecx
	mov	DWORD PTR [edi+eax*4], 0
; Line 154
	mov	edi, DWORD PTR _r$[esp+20]
	test	ebx, ebx
	jne	SHORT $LN13@BN_lshift
; Line 155
	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, 1
	js	SHORT $LN6@BN_lshift
	lea	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _t$1$[esp+20]
	lea	edx, DWORD PTR [edx+eax*4]
	npad	9
$LL4@BN_lshift:
; Line 156
	mov	eax, DWORD PTR [ebp+ecx*4]
	lea	edx, DWORD PTR [edx-4]
	sub	ecx, 1
	mov	DWORD PTR [edx+4], eax
	jns	SHORT $LL4@BN_lshift
	mov	edx, DWORD PTR _nw$1$[esp+24]
	jmp	SHORT $LN6@BN_lshift
$LN13@BN_lshift:
; Line 158
	mov	esi, DWORD PTR [esi+4]
	sub	esi, 1
	js	SHORT $LN33@BN_lshift
	lea	edi, DWORD PTR [edx+1]
	mov	edx, DWORD PTR _t$1$[esp+20]
	add	edi, esi
	lea	edi, DWORD PTR [edx+edi*4]
	npad	7
$LL7@BN_lshift:
; Line 159
	mov	edx, DWORD PTR [ebp+esi*4]
	lea	edi, DWORD PTR [edi-4]
; Line 160
	mov	eax, edx
	shr	eax, cl
; Line 161
	mov	ecx, ebx
	or	DWORD PTR [edi+4], eax
	shl	edx, cl
	sub	esi, 1
	mov	ecx, DWORD PTR _rb$1$[esp+24]
	mov	DWORD PTR [edi], edx
	jns	SHORT $LL7@BN_lshift
	mov	edi, DWORD PTR _r$[esp+20]
	mov	edx, DWORD PTR _nw$1$[esp+24]
$LN33@BN_lshift:
	mov	esi, DWORD PTR _a$[esp+20]
$LN6@BN_lshift:
; Line 163
	lea	eax, DWORD PTR [edx*4]
	push	eax
	push	0
	push	DWORD PTR _t$1$[esp+28]
	call	_memset
; Line 167
	mov	ecx, DWORD PTR _nw$1$[esp+36]
	add	esp, 12					; 0000000cH
	inc	ecx
	add	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
	pop	ebp
; Line 168
	test	ecx, ecx
	jle	SHORT $LN15@BN_lshift
	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL10@BN_lshift:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN23@BN_lshift
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL10@BN_lshift
$LN23@BN_lshift:
	mov	DWORD PTR [edi+4], ecx
$LN15@BN_lshift:
	pop	edi
	pop	esi
; Line 170
	mov	eax, 1
	pop	ebx
; Line 171
	add	esp, 8
	ret	0
_BN_lshift ENDP
_TEXT	ENDS
END
