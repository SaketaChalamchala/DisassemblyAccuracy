; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@ONGHGJEC@message?5digest?$AA@		; `string'
;	COMDAT ??_C@_0P@ONGHGJEC@message?5digest?$AA@
CONST	SEGMENT
??_C@_0P@ONGHGJEC@message?5digest?$AA@ DB 'message digest', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_methods_md DD	0208H
	DD	FLAT:??_C@_0P@ONGHGJEC@message?5digest?$AA@
	DD	FLAT:_md_write
	DD	FLAT:_md_read
	DD	00H
	DD	FLAT:_md_gets
	DD	FLAT:_md_ctrl
	DD	FLAT:_md_new
	DD	FLAT:_md_free
	DD	FLAT:_md_callback_ctrl
_DATA	ENDS
PUBLIC	_BIO_f_md
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_read:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_callback_ctrl:PROC
EXTRN	_BIO_copy_next_retry:PROC
EXTRN	_EVP_MD_CTX_create:PROC
EXTRN	_EVP_MD_CTX_destroy:PROC
EXTRN	_EVP_MD_CTX_copy_ex:PROC
EXTRN	_EVP_DigestInit_ex:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal_ex:PROC
; Function compile flags: /Ogtpy
;	COMDAT _md_callback_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_fp$ = 16						; size = 4
_md_callback_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 241
	mov	eax, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	jne	SHORT $LN4@md_callbac
; Line 249
	ret	0
$LN4@md_callbac:
; Line 245
	mov	DWORD PTR _b$[esp-4], eax
	jmp	_BIO_callback_ctrl
_md_callback_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _md_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_md_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 112
	push	esi
; Line 113
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@md_free
; Line 114
	xor	eax, eax
	pop	esi
; Line 120
	ret	0
$LN2@md_free:
; Line 115
	push	DWORD PTR [esi+32]
	call	_EVP_MD_CTX_destroy
	add	esp, 4
; Line 116
	mov	DWORD PTR [esi+32], 0
; Line 117
	mov	DWORD PTR [esi+12], 0
; Line 119
	mov	eax, 1
	mov	DWORD PTR [esi+20], 0
	pop	esi
; Line 120
	ret	0
_md_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _md_new
_TEXT	SEGMENT
_bi$ = 8						; size = 4
_md_new	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 101
	call	_EVP_MD_CTX_create
	mov	ecx, eax
; Line 102
	test	ecx, ecx
	jne	SHORT $LN2@md_new
; Line 109
	ret	0
$LN2@md_new:
; Line 105
	mov	eax, DWORD PTR _bi$[esp-4]
	mov	DWORD PTR [eax+12], 0
; Line 106
	mov	DWORD PTR [eax+32], ecx
; Line 107
	mov	DWORD PTR [eax+20], 0
; Line 108
	mov	eax, 1
; Line 109
	ret	0
_md_new	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _md_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_num$ = 16						; size = 4
_ptr$ = 20						; size = 4
_md_ctrl PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 175
	push	ebx
; Line 184
	mov	ebx, DWORD PTR _cmd$[esp]
	push	esi
	mov	esi, DWORD PTR _b$[esp+4]
	push	edi
	lea	eax, DWORD PTR [ebx-1]
	mov	edi, 1
	mov	ecx, DWORD PTR [esi+32]
	cmp	eax, 147				; 00000093H
	ja	SHORT $LN20@md_ctrl
	movzx	eax, BYTE PTR $LN22@md_ctrl[eax]
	jmp	DWORD PTR $LN24@md_ctrl[eax*4]
$LN4@md_ctrl:
; Line 186
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN9@md_ctrl
; Line 187
	push	0
	push	DWORD PTR [ecx]
	push	ecx
	call	_EVP_DigestInit_ex
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 190
	test	edi, edi
	jle	SHORT $LN2@md_ctrl
$LN20@md_ctrl:
; Line 231
	push	DWORD PTR _ptr$[esp+8]
	push	DWORD PTR _num$[esp+12]
	push	ebx
	push	DWORD PTR [esi+36]
	call	_BIO_ctrl
	mov	edi, eax
	add	esp, 16					; 00000010H
$LN2@md_ctrl:
; Line 234
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN8@md_ctrl:
; Line 194
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN9@md_ctrl
; Line 196
	mov	eax, DWORD PTR _ptr$[esp+8]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx
; Line 234
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN9@md_ctrl:
; Line 198
	xor	edi, edi
; Line 234
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN11@md_ctrl:
; Line 202
	mov	eax, DWORD PTR _ptr$[esp+8]
	mov	DWORD PTR [eax], ecx
$LN19@md_ctrl:
; Line 203
	mov	DWORD PTR [esi+12], edi
; Line 234
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN12@md_ctrl:
; Line 206
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN9@md_ctrl
; Line 207
	mov	eax, DWORD PTR _ptr$[esp+8]
	mov	DWORD PTR [esi+32], eax
; Line 234
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN15@md_ctrl:
; Line 212
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
; Line 213
	push	DWORD PTR _ptr$[esp+16]
	push	DWORD PTR _num$[esp+20]
	push	ebx
	push	DWORD PTR [esi+36]
	call	_BIO_ctrl
; Line 214
	push	esi
	mov	edi, eax
	call	_BIO_copy_next_retry
	add	esp, 28					; 0000001cH
; Line 234
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN16@md_ctrl:
; Line 219
	push	0
	push	DWORD PTR _ptr$[esp+12]
	push	ecx
	call	_EVP_DigestInit_ex
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 220
	test	edi, edi
	jle	$LN2@md_ctrl
; Line 221
	pop	edi
	mov	DWORD PTR [esi+12], 1
	pop	esi
	pop	ebx
; Line 235
	ret	0
$LN18@md_ctrl:
; Line 225
	mov	eax, DWORD PTR _ptr$[esp+8]
; Line 226
	push	ecx
	push	DWORD PTR [eax+32]
	call	_EVP_MD_CTX_copy_ex
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@md_ctrl
; Line 235
	pop	edi
	pop	esi
	pop	ebx
	ret	0
$LN24@md_ctrl:
	DD	$LN4@md_ctrl
	DD	$LN18@md_ctrl
	DD	$LN15@md_ctrl
	DD	$LN16@md_ctrl
	DD	$LN8@md_ctrl
	DD	$LN11@md_ctrl
	DD	$LN12@md_ctrl
	DD	$LN20@md_ctrl
$LN22@md_ctrl:
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	1
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	4
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	5
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	6
_md_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _md_gets
_TEXT	SEGMENT
_ret$ = 8						; size = 4
_bp$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_md_gets PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 256
	mov	eax, DWORD PTR _bp$[esp-4]
	mov	edx, DWORD PTR [eax+32]
; Line 257
	mov	eax, DWORD PTR _size$[esp-4]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN2@md_gets
; Line 258
	xor	eax, eax
; Line 263
	ret	0
$LN2@md_gets:
; Line 259
	lea	eax, DWORD PTR _ret$[esp-4]
	push	eax
	push	DWORD PTR _buf$[esp]
	push	edx
	call	_EVP_DigestFinal_ex
	mov	ecx, DWORD PTR _ret$[esp+8]
	or	edx, -1
	add	esp, 12					; 0000000cH
	test	eax, eax
	cmovle	ecx, edx
	mov	eax, ecx
; Line 263
	ret	0
_md_gets ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _md_read
_TEXT	SEGMENT
_b$ = 8							; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_md_read PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 123
	push	edi
; Line 127
	mov	edi, DWORD PTR _out$[esp]
	test	edi, edi
	jne	SHORT $LN2@md_read
; Line 128
	xor	eax, eax
	pop	edi
; Line 145
	ret	0
$LN2@md_read:
	push	ebp
	push	esi
; Line 129
	mov	esi, DWORD PTR _b$[esp+8]
	mov	ebp, DWORD PTR [esi+32]
; Line 131
	test	ebp, ebp
	je	SHORT $LN4@md_read
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN4@md_read
; Line 134
	push	ebx
	push	DWORD PTR _outl$[esp+12]
	push	edi
	push	eax
	call	_BIO_read
	add	esp, 12					; 0000000cH
	mov	ebx, eax
; Line 135
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN7@md_read
; Line 136
	test	ebx, ebx
	jle	SHORT $LN7@md_read
; Line 138
	push	ebx
	push	edi
	push	ebp
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	SHORT $LN7@md_read
; Line 139
	pop	ebx
	pop	esi
	pop	ebp
	or	eax, -1
	pop	edi
; Line 145
	ret	0
$LN7@md_read:
; Line 142
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
; Line 143
	push	esi
	call	_BIO_copy_next_retry
	add	esp, 12					; 0000000cH
; Line 144
	mov	eax, ebx
	pop	ebx
	pop	esi
	pop	ebp
	pop	edi
; Line 145
	ret	0
$LN4@md_read:
	pop	esi
	pop	ebp
; Line 132
	xor	eax, eax
	pop	edi
; Line 145
	ret	0
_md_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _md_write
_TEXT	SEGMENT
_b$ = 8							; size = 4
_in$ = 12						; size = 4
_inl$ = 16						; size = 4
_md_write PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 148
	push	ebx
; Line 152
	mov	ebx, DWORD PTR _in$[esp]
	push	edi
	xor	edi, edi
	test	ebx, ebx
	je	SHORT $LN3@md_write
	mov	eax, DWORD PTR _inl$[esp+4]
	test	eax, eax
	jle	SHORT $LN3@md_write
; Line 154
	push	ebp
	push	esi
	mov	esi, DWORD PTR _b$[esp+12]
	mov	ebp, DWORD PTR [esi+32]
; Line 156
	test	ebp, ebp
	je	SHORT $LN4@md_write
	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	SHORT $LN4@md_write
; Line 157
	push	eax
	push	ebx
	push	ecx
	call	_BIO_write
	add	esp, 12					; 0000000cH
	mov	edi, eax
$LN4@md_write:
; Line 158
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN7@md_write
; Line 159
	test	edi, edi
	jle	SHORT $LN7@md_write
; Line 160
	push	edi
	push	ebx
	push	ebp
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@md_write
; Line 162
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
	add	esp, 8
; Line 163
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 172
	ret	0
$LN7@md_write:
; Line 167
	cmp	DWORD PTR [esi+36], 0
	je	SHORT $LN8@md_write
; Line 168
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
; Line 169
	push	esi
	call	_BIO_copy_next_retry
	add	esp, 12					; 0000000cH
$LN8@md_write:
; Line 171
	pop	esi
	pop	ebp
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 172
	ret	0
$LN3@md_write:
	pop	edi
; Line 153
	xor	eax, eax
	pop	ebx
; Line 172
	ret	0
_md_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_f_md
_TEXT	SEGMENT
_BIO_f_md PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_md.c
; Line 94
	mov	eax, OFFSET _methods_md
; Line 95
	ret	0
_BIO_f_md ENDP
_TEXT	ENDS
END
