; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_saos.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_RSA_sign_ASN1_OCTET_STRING
PUBLIC	_RSA_verify_ASN1_OCTET_STRING
PUBLIC	??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ASN1_STRING_free:PROC
EXTRN	_d2i_ASN1_OCTET_STRING:PROC
EXTRN	_i2d_ASN1_OCTET_STRING:PROC
EXTRN	_RSA_size:PROC
EXTRN	_RSA_private_encrypt:PROC
EXTRN	_RSA_public_decrypt:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
CONST	SEGMENT
??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ DB '.\crypto\rsa\rsa'
	DB	'_saos.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_verify_ASN1_OCTET_STRING
_TEXT	SEGMENT
_ret$1$ = -8						; size = 4
_p$ = -4						; size = 4
_dtype$ = 8						; size = 4
_m$ = 12						; size = 4
_m_len$ = 16						; size = 4
_sigbuf$ = 20						; size = 4
_siglen$ = 24						; size = 4
_rsa$ = 28						; size = 4
_RSA_verify_ASN1_OCTET_STRING PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_saos.c
; Line 108
	mov	eax, 8
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 114
	mov	esi, DWORD PTR _rsa$[esp+16]
	xor	ebp, ebp
	push	esi
	mov	DWORD PTR _ret$1$[esp+24], ebp
	call	_RSA_size
	mov	ebx, DWORD PTR _siglen$[esp+20]
	add	esp, 4
	cmp	ebx, eax
	je	SHORT $LN2@RSA_verify
; Line 115
	push	116					; 00000074H
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	119					; 00000077H
	push	120					; 00000078H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 117
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 148
	add	esp, 8
	ret	0
$LN2@RSA_verify:
	push	edi
; Line 120
	push	120					; 00000078H
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 121
	test	edi, edi
	jne	SHORT $LN3@RSA_verify
; Line 122
	push	122					; 0000007aH
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	65					; 00000041H
	push	120					; 00000078H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 147
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 148
	add	esp, 8
	ret	0
$LN3@RSA_verify:
; Line 125
	push	1
	push	esi
	push	edi
	push	DWORD PTR _sigbuf$[esp+32]
	push	ebx
	call	_RSA_public_decrypt
	add	esp, 20					; 00000014H
; Line 127
	test	eax, eax
	jle	$LN9@RSA_verify
; Line 131
	push	eax
	lea	eax, DWORD PTR _p$[esp+28]
	mov	DWORD PTR _p$[esp+28], edi
	push	eax
	push	0
	call	_d2i_ASN1_OCTET_STRING
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 132
	test	ebp, ebp
	je	$LN16@RSA_verify
; Line 135
	mov	ecx, DWORD PTR _m_len$[esp+20]
	cmp	DWORD PTR [ebp], ecx
	jne	SHORT $LN8@RSA_verify
	mov	edx, DWORD PTR _m$[esp+20]
	mov	esi, DWORD PTR [ebp+8]
	sub	ecx, 4
	jb	SHORT $LN14@RSA_verify
$LL15@RSA_verify:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN13@RSA_verify
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL15@RSA_verify
$LN14@RSA_verify:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN12@RSA_verify
$LN13@RSA_verify:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN8@RSA_verify
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN12@RSA_verify
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN8@RSA_verify
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN12@RSA_verify
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN8@RSA_verify
	cmp	ecx, -1
	je	SHORT $LN12@RSA_verify
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	jne	SHORT $LN8@RSA_verify
$LN12@RSA_verify:
; Line 142
	push	ebp
	mov	DWORD PTR _ret$1$[esp+28], 1
	call	_ASN1_STRING_free
	mov	ebp, DWORD PTR _ret$1$[esp+28]
	add	esp, 4
	jmp	SHORT $LN9@RSA_verify
$LN8@RSA_verify:
; Line 137
	push	137					; 00000089H
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	104					; 00000068H
	push	120					; 00000078H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$18:
; Line 142
	push	ebp
	call	_ASN1_STRING_free
	mov	ebp, DWORD PTR _ret$1$[esp+28]
	add	esp, 4
	jmp	SHORT $LN9@RSA_verify
$LN16@RSA_verify:
	xor	ebp, ebp
$LN9@RSA_verify:
; Line 144
	push	ebx
	push	edi
	call	_OPENSSL_cleanse
; Line 145
	push	edi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 147
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 148
	add	esp, 8
	ret	0
_RSA_verify_ASN1_OCTET_STRING ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_sign_ASN1_OCTET_STRING
_TEXT	SEGMENT
_sig$ = -16						; size = 16
_type$ = 8						; size = 4
_m$ = 12						; size = 4
_p$ = 16						; size = 4
_m_len$ = 16						; size = 4
_sigret$ = 20						; size = 4
_siglen$ = 24						; size = 4
_rsa$ = 28						; size = 4
_RSA_sign_ASN1_OCTET_STRING PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_saos.c
; Line 70
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 76
	mov	eax, DWORD PTR _m_len$[esp+12]
	push	ebx
	push	ebp
	mov	DWORD PTR _sig$[esp+24], eax
; Line 77
	mov	eax, DWORD PTR _m$[esp+20]
	push	edi
	mov	DWORD PTR _sig$[esp+36], eax
	mov	edi, 1
; Line 79
	lea	eax, DWORD PTR _sig$[esp+28]
	mov	DWORD PTR _sig$[esp+32], 4
	push	0
	push	eax
	call	_i2d_ASN1_OCTET_STRING
; Line 80
	push	DWORD PTR _rsa$[esp+32]
	mov	ebp, eax
	call	_RSA_size
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 81
	lea	eax, DWORD PTR [ebx-11]
	cmp	ebp, eax
	jle	SHORT $LN2@RSA_sign_A
; Line 82
	push	83					; 00000053H
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	112					; 00000070H
	push	118					; 00000076H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 84
	xor	eax, eax
	pop	edi
	pop	ebp
	pop	ebx
; Line 102
	add	esp, 16					; 00000010H
	ret	0
$LN2@RSA_sign_A:
	push	esi
; Line 86
	push	86					; 00000056H
	inc	ebx
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 87
	test	esi, esi
	jne	SHORT $LN3@RSA_sign_A
; Line 88
	push	88					; 00000058H
	push	OFFSET ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
	push	65					; 00000041H
	push	118					; 00000076H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 89
	xor	eax, eax
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 102
	add	esp, 16					; 00000010H
	ret	0
$LN3@RSA_sign_A:
; Line 92
	lea	eax, DWORD PTR _p$[esp+28]
	mov	DWORD PTR _p$[esp+28], esi
	push	eax
	lea	eax, DWORD PTR _sig$[esp+36]
	push	eax
	call	_i2d_ASN1_OCTET_STRING
; Line 93
	push	1
	push	DWORD PTR _rsa$[esp+40]
	push	DWORD PTR _sigret$[esp+44]
	push	esi
	push	ebp
	call	_RSA_private_encrypt
	mov	ecx, eax
	add	esp, 28					; 0000001cH
; Line 94
	test	ecx, ecx
	jg	SHORT $LN4@RSA_sign_A
; Line 95
	xor	edi, edi
	jmp	SHORT $LN5@RSA_sign_A
$LN4@RSA_sign_A:
; Line 97
	mov	eax, DWORD PTR _siglen$[esp+28]
	mov	DWORD PTR [eax], ecx
$LN5@RSA_sign_A:
; Line 99
	push	ebx
	push	esi
	call	_OPENSSL_cleanse
; Line 100
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 101
	mov	eax, edi
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 102
	add	esp, 16					; 00000010H
	ret	0
_RSA_sign_ASN1_OCTET_STRING ENDP
_TEXT	ENDS
END
