; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06KDGDAFPH@cipher?$AA@			; `string'
;	COMDAT ??_C@_06KDGDAFPH@cipher?$AA@
CONST	SEGMENT
??_C@_06KDGDAFPH@cipher?$AA@ DB 'cipher', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_methods_enc DD	020aH
	DD	FLAT:??_C@_06KDGDAFPH@cipher?$AA@
	DD	FLAT:_enc_write
	DD	FLAT:_enc_read
	DD	00H
	DD	00H
	DD	FLAT:_enc_ctrl
	DD	FLAT:_enc_new
	DD	FLAT:_enc_free
	DD	FLAT:_enc_callback_ctrl
_DATA	ENDS
PUBLIC	_BIO_f_cipher
PUBLIC	_BIO_set_cipher
PUBLIC	??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_BIO_test_flags:PROC
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_read:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_callback_ctrl:PROC
EXTRN	_BIO_copy_next_retry:PROC
EXTRN	_EVP_CIPHER_CTX_copy:PROC
EXTRN	_EVP_CipherInit_ex:PROC
EXTRN	_EVP_CipherUpdate:PROC
EXTRN	_EVP_CipherFinal_ex:PROC
EXTRN	_EVP_CIPHER_CTX_init:PROC
EXTRN	_EVP_CIPHER_CTX_cleanup:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@
CONST	SEGMENT
??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@ DB '.\crypto\evp\bio_'
	DB	'enc.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _enc_callback_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_fp$ = 16						; size = 4
_enc_callback_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 379
	mov	eax, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	jne	SHORT $LN4@enc_callba
; Line 387
	ret	0
$LN4@enc_callba:
; Line 383
	mov	DWORD PTR _b$[esp-4], eax
	jmp	_BIO_callback_ctrl
_enc_callback_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _enc_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_enc_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 133
	push	esi
; Line 136
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@enc_free
; Line 137
	xor	eax, eax
	pop	esi
; Line 146
	ret	0
$LN2@enc_free:
; Line 139
	mov	eax, DWORD PTR [esi+32]
	add	eax, 20					; 00000014H
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
; Line 140
	push	4324					; 000010e4H
	push	DWORD PTR [esi+32]
	call	_OPENSSL_cleanse
; Line 141
	push	DWORD PTR [esi+32]
	call	_CRYPTO_free
	add	esp, 16					; 00000010H
; Line 142
	mov	DWORD PTR [esi+32], 0
; Line 143
	mov	DWORD PTR [esi+12], 0
; Line 145
	mov	eax, 1
	mov	DWORD PTR [esi+20], 0
	pop	esi
; Line 146
	ret	0
_enc_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _enc_new
_TEXT	SEGMENT
_bi$ = 8						; size = 4
_enc_new PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 112
	push	esi
; Line 115
	push	115					; 00000073H
	push	OFFSET ??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@
	push	4324					; 000010e4H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 116
	test	esi, esi
	jne	SHORT $LN2@enc_new
	pop	esi
; Line 130
	ret	0
$LN2@enc_new:
; Line 118
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_EVP_CIPHER_CTX_init
; Line 126
	mov	eax, DWORD PTR _bi$[esp+4]
	add	esp, 4
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 1
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 1
; Line 127
	mov	DWORD PTR [eax+32], esi
	mov	DWORD PTR [eax+12], 0
; Line 128
	mov	DWORD PTR [eax+20], 0
; Line 129
	mov	eax, 1
	pop	esi
; Line 130
	ret	0
_enc_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _enc_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_num$ = 16						; size = 4
_ptr$ = 20						; size = 4
_enc_ctrl PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 288
	push	ebx
; Line 295
	mov	ebx, DWORD PTR _b$[esp]
	push	ebp
; Line 297
	mov	ebp, DWORD PTR _cmd$[esp+4]
	push	esi
	mov	esi, DWORD PTR [ebx+32]
	push	edi
	lea	eax, DWORD PTR [ebp-1]
	mov	edi, 1
	cmp	eax, 128				; 00000080H
	ja	SHORT $LN23@enc_ctrl
	movzx	eax, BYTE PTR $LN37@enc_ctrl[eax]
	jmp	DWORD PTR $LN43@enc_ctrl[eax*4]
$LN6@enc_ctrl:
; Line 301
	push	DWORD PTR [esi+28]
	mov	DWORD PTR [esi+16], edi
	push	0
	push	0
	push	0
	mov	DWORD PTR [esi+12], 0
	add	esi, 20					; 00000014H
	push	0
	push	esi
	call	_EVP_CipherInit_ex
; Line 303
	push	DWORD PTR _ptr$[esp+36]
	push	DWORD PTR _num$[esp+40]
	push	ebp
	push	DWORD PTR [ebx+36]
	call	_BIO_ctrl
	add	esp, 40					; 00000028H
; Line 369
	mov	edi, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 373
	ret	0
$LN7@enc_ctrl:
; Line 306
	cmp	DWORD PTR [esi+8], 0
	jle	SHORT $LN2@enc_ctrl
$LN23@enc_ctrl:
; Line 369
	push	DWORD PTR _ptr$[esp+12]
	push	DWORD PTR _num$[esp+16]
	push	ebp
	push	DWORD PTR [ebx+36]
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
	mov	edi, eax
$LN2@enc_ctrl:
; Line 372
	mov	eax, edi
$LN1@enc_ctrl:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 373
	ret	0
$LN10@enc_ctrl:
; Line 312
	mov	edi, DWORD PTR [esi]
	sub	edi, DWORD PTR [esi+4]
; Line 313
	test	edi, edi
	jg	SHORT $LN2@enc_ctrl
; Line 315
	jmp	SHORT $LN23@enc_ctrl
$again$44:
; Line 324
	mov	eax, DWORD PTR [esi]
	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN5@enc_ctrl
	npad	6
$LL4@enc_ctrl:
; Line 325
	push	0
	push	0
	push	ebx
	call	_enc_write
	add	esp, 12					; 0000000cH
; Line 326
	test	eax, eax
	js	SHORT $LN1@enc_ctrl
; Line 324
	mov	eax, DWORD PTR [esi]
	cmp	eax, DWORD PTR [esi+4]
	jne	SHORT $LL4@enc_ctrl
$LN5@enc_ctrl:
; Line 330
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN23@enc_ctrl
; Line 333
	push	esi
	lea	eax, DWORD PTR [esi+160]
	mov	DWORD PTR [esi+12], 1
	push	eax
	lea	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+4], 0
	push	eax
	call	_EVP_CipherFinal_ex
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 336
	mov	DWORD PTR [esi+16], edi
; Line 337
	test	edi, edi
	jg	SHORT $again$44
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 373
	ret	0
$LN18@enc_ctrl:
; Line 348
	mov	edi, DWORD PTR [esi+16]
; Line 372
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 373
	ret	0
$LN19@enc_ctrl:
; Line 351
	push	15					; 0000000fH
	push	ebx
	call	_BIO_clear_flags
; Line 352
	push	DWORD PTR _ptr$[esp+20]
	push	DWORD PTR _num$[esp+24]
	push	ebp
	push	DWORD PTR [ebx+36]
	call	_BIO_ctrl
; Line 353
	push	ebx
	mov	edi, eax
	call	_BIO_copy_next_retry
	add	esp, 28					; 0000001cH
; Line 372
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 373
	ret	0
$LN20@enc_ctrl:
; Line 357
	mov	eax, DWORD PTR _ptr$[esp+12]
	add	esi, 20					; 00000014H
	mov	DWORD PTR [eax], esi
; Line 372
	mov	eax, edi
	mov	DWORD PTR [ebx+12], edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 373
	ret	0
$LN21@enc_ctrl:
; Line 362
	mov	ebx, DWORD PTR _ptr$[esp+12]
	mov	edi, DWORD PTR [ebx+32]
; Line 363
	add	edi, 20					; 00000014H
	push	edi
	call	_EVP_CIPHER_CTX_init
; Line 364
	add	esi, 20					; 00000014H
	push	esi
	push	edi
	call	_EVP_CIPHER_CTX_copy
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 365
	test	edi, edi
	je	$LN2@enc_ctrl
; Line 366
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+12], 1
	pop	ebx
; Line 373
	ret	0
	npad	3
$LN43@enc_ctrl:
	DD	$LN6@enc_ctrl
	DD	$LN7@enc_ctrl
	DD	$LN10@enc_ctrl
	DD	$again$44
	DD	$LN21@enc_ctrl
	DD	$LN19@enc_ctrl
	DD	$LN18@enc_ctrl
	DD	$LN20@enc_ctrl
	DD	$LN23@enc_ctrl
$LN37@enc_ctrl:
	DB	0
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	3
	DB	4
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
_enc_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _enc_read
_TEXT	SEGMENT
_b$ = 8							; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_enc_read PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 153
	mov	ecx, DWORD PTR _out$[esp-4]
	push	ebx
	xor	ebx, ebx
	test	ecx, ecx
	jne	SHORT $LN4@enc_read
; Line 154
	xor	eax, eax
	pop	ebx
; Line 234
	ret	0
$LN4@enc_read:
; Line 155
	mov	eax, DWORD PTR _b$[esp]
	push	esi
	mov	esi, DWORD PTR [eax+32]
; Line 157
	test	esi, esi
	je	$LN6@enc_read
	cmp	DWORD PTR [eax+36], ebx
	je	$LN6@enc_read
; Line 161
	mov	edx, DWORD PTR [esi]
	push	ebp
; Line 163
	mov	ebp, DWORD PTR _outl$[esp+8]
	test	edx, edx
	jle	SHORT $LN23@enc_read
; Line 165
	mov	eax, DWORD PTR [esi+4]
	mov	ebx, edx
	sub	ebx, DWORD PTR [esi+4]
	cmp	ebx, ebp
	cmovg	ebx, ebp
	add	eax, 160				; 000000a0H
	push	ebx
	add	eax, esi
	push	eax
	push	ecx
	call	_memcpy
; Line 169
	add	DWORD PTR [esi+4], ebx
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR [esi+4]
	sub	ebp, ebx
	add	DWORD PTR _out$[esp+8], ebx
; Line 170
	cmp	DWORD PTR [esi], eax
; Line 172
	mov	eax, DWORD PTR _b$[esp+8]
	jne	SHORT $LN23@enc_read
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN23@enc_read:
; Line 181
	test	ebp, ebp
	jle	$LN29@enc_read
	push	edi
	npad	4
$LL2@enc_read:
; Line 182
	cmp	DWORD PTR [esi+8], 0
	jle	$LN33@enc_read
; Line 188
	lea	ecx, DWORD PTR [esi+224]
	push	4096					; 00001000H
	push	ecx
	push	DWORD PTR [eax+36]
	call	_BIO_read
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 190
	test	edi, edi
	jg	SHORT $LN11@enc_read
; Line 192
	mov	eax, DWORD PTR _b$[esp+12]
	push	8
	push	DWORD PTR [eax+36]
	call	_BIO_test_flags
	add	esp, 8
	test	eax, eax
	jne	$LN13@enc_read
; Line 194
	lea	eax, DWORD PTR [esi+160]
	mov	DWORD PTR [esi+8], edi
	push	esi
	push	eax
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_EVP_CipherFinal_ex
	add	esp, 12					; 0000000cH
; Line 197
	mov	DWORD PTR [esi+16], eax
; Line 198
	mov	DWORD PTR [esi+4], 0
; Line 203
	jmp	SHORT $LN15@enc_read
$LN11@enc_read:
; Line 204
	push	edi
	lea	ecx, DWORD PTR [esi+224]
	push	ecx
	lea	eax, DWORD PTR [esi+160]
	push	esi
	push	eax
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_EVP_CipherUpdate
	add	esp, 20					; 00000014H
; Line 207
	mov	DWORD PTR [esi+8], 1
; Line 214
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN26@enc_read
$LN15@enc_read:
; Line 218
	cmp	DWORD PTR [esi], ebp
	mov	edi, ebp
	cmovle	edi, DWORD PTR [esi]
; Line 222
	test	edi, edi
	jle	SHORT $LN33@enc_read
; Line 224
	push	edi
	lea	eax, DWORD PTR [esi+160]
	push	eax
	push	DWORD PTR _out$[esp+20]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 226
	mov	DWORD PTR [esi+4], edi
	add	ebx, edi
; Line 227
	sub	ebp, edi
; Line 228
	add	DWORD PTR _out$[esp+12], edi
$LN26@enc_read:
; Line 181
	test	ebp, ebp
	jle	SHORT $LN33@enc_read
	mov	eax, DWORD PTR _b$[esp+12]
	jmp	$LL2@enc_read
$LN13@enc_read:
; Line 200
	test	ebx, ebx
	cmove	ebx, edi
$LN33@enc_read:
	pop	edi
$LN29@enc_read:
; Line 231
	mov	ebp, DWORD PTR _b$[esp+8]
	push	15					; 0000000fH
	push	ebp
	call	_BIO_clear_flags
; Line 232
	push	ebp
	call	_BIO_copy_next_retry
	add	esp, 12					; 0000000cH
	pop	ebp
; Line 233
	test	ebx, ebx
	jne	SHORT $LN20@enc_read
	mov	ebx, DWORD PTR [esi+8]
$LN20@enc_read:
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 234
	ret	0
$LN6@enc_read:
	pop	esi
; Line 158
	xor	eax, eax
	pop	ebx
; Line 234
	ret	0
_enc_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _enc_write
_TEXT	SEGMENT
tv208 = -4						; size = 4
_b$ = 8							; size = 4
_in$ = 12						; size = 4
_ret$1$ = 16						; size = 4
_inl$ = 16						; size = 4
_enc_write PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 237
	mov	eax, 4
	call	__chkstk
	push	ebx
; Line 241
	mov	ebx, DWORD PTR _b$[esp+4]
	push	ebp
; Line 242
	mov	ebp, DWORD PTR _inl$[esp+8]
	push	esi
	mov	esi, DWORD PTR [ebx+32]
	push	edi
; Line 244
	push	15					; 0000000fH
	push	ebx
	mov	DWORD PTR _ret$1$[esp+24], ebp
	call	_BIO_clear_flags
; Line 245
	mov	edi, DWORD PTR [esi]
	add	esp, 8
	sub	edi, DWORD PTR [esi+4]
; Line 246
	test	edi, edi
	jle	SHORT $LN3@enc_write
$LL2@enc_write:
; Line 247
	mov	eax, DWORD PTR [esi+4]
	add	eax, 160				; 000000a0H
	push	edi
	add	eax, esi
	push	eax
	push	DWORD PTR [ebx+36]
	call	_BIO_write
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 248
	test	ebx, ebx
	jle	$LN18@enc_write
; Line 252
	add	DWORD PTR [esi+4], ebx
; Line 253
	sub	edi, ebx
	mov	ebx, DWORD PTR _b$[esp+16]
	test	edi, edi
	jg	SHORT $LL2@enc_write
$LN3@enc_write:
; Line 257
	mov	eax, DWORD PTR _in$[esp+16]
	test	eax, eax
	je	$LN10@enc_write
	test	ebp, ebp
	jle	$LN10@enc_write
; Line 260
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR tv208[esp+20], 4096		; 00001000H
$LN30@enc_write:
; Line 262
	cmp	ebp, 4096				; 00001000H
	lea	ecx, DWORD PTR [esi+160]
	mov	edi, ebp
	lea	edx, DWORD PTR [esi+20]
	cmovg	edi, DWORD PTR tv208[esp+20]
; Line 263
	push	edi
	push	eax
	push	esi
	push	ecx
	push	edx
	call	_EVP_CipherUpdate
; Line 267
	mov	eax, DWORD PTR _in$[esp+36]
	sub	ebp, edi
	add	eax, edi
; Line 269
	mov	DWORD PTR [esi+4], 0
; Line 270
	mov	edi, DWORD PTR [esi]
	add	esp, 20					; 00000014H
	mov	DWORD PTR _in$[esp+16], eax
; Line 271
	test	edi, edi
	jle	SHORT $LN7@enc_write
	npad	2
$LL6@enc_write:
; Line 272
	mov	eax, DWORD PTR [esi+4]
	add	eax, 160				; 000000a0H
	push	edi
	add	eax, esi
	push	eax
	push	DWORD PTR [ebx+36]
	call	_BIO_write
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 273
	test	ebx, ebx
	jle	SHORT $LN19@enc_write
; Line 278
	add	DWORD PTR [esi+4], ebx
	sub	edi, ebx
	mov	ebx, DWORD PTR _b$[esp+16]
	test	edi, edi
	jg	SHORT $LL6@enc_write
	mov	eax, DWORD PTR _in$[esp+16]
$LN7@enc_write:
; Line 280
	mov	DWORD PTR [esi], 0
; Line 281
	mov	DWORD PTR [esi+4], 0
	test	ebp, ebp
	jle	SHORT $LN29@enc_write
; Line 261
	mov	ebx, DWORD PTR _b$[esp+16]
	jmp	$LN30@enc_write
$LN18@enc_write:
; Line 249
	push	DWORD PTR _b$[esp+16]
	call	_BIO_copy_next_retry
	add	esp, 4
; Line 250
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 285
	pop	ecx
	ret	0
$LN19@enc_write:
; Line 274
	push	DWORD PTR _b$[esp+16]
	call	_BIO_copy_next_retry
; Line 275
	mov	eax, DWORD PTR _ret$1$[esp+20]
	add	esp, 4
	cmp	eax, ebp
	je	SHORT $LN14@enc_write
	sub	eax, ebp
	mov	ebx, eax
$LN14@enc_write:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 285
	pop	ecx
	ret	0
$LN29@enc_write:
; Line 283
	push	DWORD PTR _b$[esp+16]
	call	_BIO_copy_next_retry
; Line 284
	mov	eax, DWORD PTR _ret$1$[esp+20]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 285
	pop	ecx
	ret	0
$LN10@enc_write:
	pop	edi
	pop	esi
	pop	ebp
; Line 258
	xor	eax, eax
	pop	ebx
; Line 285
	pop	ecx
	ret	0
_enc_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_set_cipher
_TEXT	SEGMENT
_b$ = 8							; size = 4
_c$ = 12						; size = 4
_k$ = 16						; size = 4
_i$ = 20						; size = 4
_e$ = 24						; size = 4
_BIO_set_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 411
	push	esi
; Line 414
	mov	esi, DWORD PTR _b$[esp]
	test	esi, esi
	je	SHORT $LN4@BIO_set_ci
; Line 417
	mov	eax, DWORD PTR [esi+4]
	push	ebx
	mov	ebx, DWORD PTR _c$[esp+4]
	push	edi
	mov	edi, DWORD PTR _e$[esp+8]
	test	eax, eax
	je	SHORT $LN3@BIO_set_ci
	push	0
	push	edi
	push	4
	push	ebx
	push	6
	push	esi
	call	eax
	add	esp, 24					; 00000018H
	test	eax, eax
	jle	SHORT $LN6@BIO_set_ci
$LN3@BIO_set_ci:
; Line 424
	mov	eax, DWORD PTR [esi+32]
	push	edi
	push	DWORD PTR _i$[esp+12]
	add	eax, 20					; 00000014H
	mov	DWORD PTR [esi+12], 1
	push	DWORD PTR _k$[esp+16]
	push	0
	push	ebx
	push	eax
	call	_EVP_CipherInit_ex
; Line 426
	mov	eax, DWORD PTR [esi+4]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN6@BIO_set_ci
; Line 427
	push	1
	push	edi
	push	4
	push	ebx
	push	6
	push	esi
	call	eax
	add	esp, 24					; 00000018H
$LN6@BIO_set_ci:
	pop	edi
	pop	ebx
$LN4@BIO_set_ci:
	pop	esi
; Line 428
	ret	0
_BIO_set_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_f_cipher
_TEXT	SEGMENT
_BIO_f_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\bio_enc.c
; Line 108
	mov	eax, OFFSET _methods_enc
; Line 109
	ret	0
_BIO_f_cipher ENDP
_TEXT	ENDS
END
