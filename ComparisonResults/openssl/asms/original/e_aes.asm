; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_aesni_128_xts DD 0391H
	DD	01H
	DD	020H
	DD	010H
	DD	011471H
	DD	FLAT:_aesni_xts_init_key
	DD	FLAT:_aes_xts_cipher
	DD	00H
	DD	0208H
	DD	00H
	DD	00H
	DD	FLAT:_aes_xts_ctrl
	DD	00H
_aes_128_xts DD	0391H
	DD	01H
	DD	020H
	DD	010H
	DD	011471H
	DD	FLAT:_aes_xts_init_key
	DD	FLAT:_aes_xts_cipher
	DD	00H
	DD	0208H
	DD	00H
	DD	00H
	DD	FLAT:_aes_xts_ctrl
	DD	00H
_aesni_256_xts DD 0392H
	DD	01H
	DD	040H
	DD	010H
	DD	011471H
	DD	FLAT:_aesni_xts_init_key
	DD	FLAT:_aes_xts_cipher
	DD	00H
	DD	0208H
	DD	00H
	DD	00H
	DD	FLAT:_aes_xts_ctrl
	DD	00H
_aes_256_xts DD	0392H
	DD	01H
	DD	040H
	DD	010H
	DD	011471H
	DD	FLAT:_aes_xts_init_key
	DD	FLAT:_aes_xts_cipher
	DD	00H
	DD	0208H
	DD	00H
	DD	00H
	DD	FLAT:_aes_xts_ctrl
	DD	00H
_aesni_128_ccm DD 0380H
	DD	01H
	DD	010H
	DD	0cH
	DD	0101477H
	DD	FLAT:_aesni_ccm_init_key
	DD	FLAT:_aes_ccm_cipher
	DD	00H
	DD	0148H
	DD	00H
	DD	00H
	DD	FLAT:_aes_ccm_ctrl
	DD	00H
_aes_128_ccm DD	0380H
	DD	01H
	DD	010H
	DD	0cH
	DD	0101477H
	DD	FLAT:_aes_ccm_init_key
	DD	FLAT:_aes_ccm_cipher
	DD	00H
	DD	0148H
	DD	00H
	DD	00H
	DD	FLAT:_aes_ccm_ctrl
	DD	00H
_aesni_192_ccm DD 0383H
	DD	01H
	DD	018H
	DD	0cH
	DD	0101477H
	DD	FLAT:_aesni_ccm_init_key
	DD	FLAT:_aes_ccm_cipher
	DD	00H
	DD	0148H
	DD	00H
	DD	00H
	DD	FLAT:_aes_ccm_ctrl
	DD	00H
_aes_192_ccm DD	0383H
	DD	01H
	DD	018H
	DD	0cH
	DD	0101477H
	DD	FLAT:_aes_ccm_init_key
	DD	FLAT:_aes_ccm_cipher
	DD	00H
	DD	0148H
	DD	00H
	DD	00H
	DD	FLAT:_aes_ccm_ctrl
	DD	00H
_aesni_256_ccm DD 0386H
	DD	01H
	DD	020H
	DD	0cH
	DD	0101477H
	DD	FLAT:_aesni_ccm_init_key
	DD	FLAT:_aes_ccm_cipher
	DD	00H
	DD	0148H
	DD	00H
	DD	00H
	DD	FLAT:_aes_ccm_ctrl
	DD	00H
_aes_256_ccm DD	0386H
	DD	01H
	DD	020H
	DD	0cH
	DD	0101477H
	DD	FLAT:_aes_ccm_init_key
	DD	FLAT:_aes_ccm_cipher
	DD	00H
	DD	0148H
	DD	00H
	DD	00H
	DD	FLAT:_aes_ccm_ctrl
	DD	00H
_aes_128_wrap DD 0314H
	DD	08H
	DD	010H
	DD	08H
	DD	0111032H
	DD	FLAT:_aes_wrap_init_key
	DD	FLAT:_aes_wrap_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_wrap DD 0315H
	DD	08H
	DD	018H
	DD	08H
	DD	0111032H
	DD	FLAT:_aes_wrap_init_key
	DD	FLAT:_aes_wrap_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_wrap DD 0316H
	DD	08H
	DD	020H
	DD	08H
	DD	0111032H
	DD	FLAT:_aes_wrap_init_key
	DD	FLAT:_aes_wrap_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_cbc DD 01a3H
	DD	010H
	DD	010H
	DD	010H
	DD	01002H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aesni_cbc_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_cbc DD	01a3H
	DD	010H
	DD	010H
	DD	010H
	DD	01002H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cbc_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_ecb DD 01a2H
	DD	010H
	DD	010H
	DD	00H
	DD	01001H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aesni_ecb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_ecb DD	01a2H
	DD	010H
	DD	010H
	DD	00H
	DD	01001H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ecb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_ofb DD 01a4H
	DD	01H
	DD	010H
	DD	010H
	DD	01004H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_ofb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_ofb DD	01a4H
	DD	01H
	DD	010H
	DD	010H
	DD	01004H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ofb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_cfb DD 01a5H
	DD	01H
	DD	010H
	DD	010H
	DD	01003H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_cfb DD	01a5H
	DD	01H
	DD	010H
	DD	010H
	DD	01003H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_cfb1 DD 028aH
	DD	01H
	DD	010H
	DD	010H
	DD	03H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb1_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_cfb1 DD 028aH
	DD	01H
	DD	010H
	DD	010H
	DD	03H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb1_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_cfb8 DD 028dH
	DD	01H
	DD	010H
	DD	010H
	DD	03H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb8_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_cfb8 DD 028dH
	DD	01H
	DD	010H
	DD	010H
	DD	03H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb8_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_ctr DD 0388H
	DD	01H
	DD	010H
	DD	010H
	DD	05H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_ctr_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_128_ctr DD	0388H
	DD	01H
	DD	010H
	DD	010H
	DD	05H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ctr_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_cbc DD 01a7H
	DD	010H
	DD	018H
	DD	010H
	DD	01002H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aesni_cbc_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_cbc DD	01a7H
	DD	010H
	DD	018H
	DD	010H
	DD	01002H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cbc_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_ecb DD 01a6H
	DD	010H
	DD	018H
	DD	00H
	DD	01001H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aesni_ecb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_ecb DD	01a6H
	DD	010H
	DD	018H
	DD	00H
	DD	01001H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ecb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_ofb DD 01a8H
	DD	01H
	DD	018H
	DD	010H
	DD	01004H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_ofb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_ofb DD	01a8H
	DD	01H
	DD	018H
	DD	010H
	DD	01004H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ofb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_cfb DD 01a9H
	DD	01H
	DD	018H
	DD	010H
	DD	01003H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_cfb DD	01a9H
	DD	01H
	DD	018H
	DD	010H
	DD	01003H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_cfb1 DD 028bH
	DD	01H
	DD	018H
	DD	010H
	DD	03H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb1_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_cfb1 DD 028bH
	DD	01H
	DD	018H
	DD	010H
	DD	03H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb1_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_cfb8 DD 028eH
	DD	01H
	DD	018H
	DD	010H
	DD	03H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb8_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_cfb8 DD 028eH
	DD	01H
	DD	018H
	DD	010H
	DD	03H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb8_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_192_ctr DD 0389H
	DD	01H
	DD	018H
	DD	010H
	DD	05H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_ctr_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_192_ctr DD	0389H
	DD	01H
	DD	018H
	DD	010H
	DD	05H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ctr_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_cbc DD 01abH
	DD	010H
	DD	020H
	DD	010H
	DD	01002H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aesni_cbc_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_cbc DD	01abH
	DD	010H
	DD	020H
	DD	010H
	DD	01002H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cbc_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_ecb DD 01aaH
	DD	010H
	DD	020H
	DD	00H
	DD	01001H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aesni_ecb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_ecb DD	01aaH
	DD	010H
	DD	020H
	DD	00H
	DD	01001H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ecb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_ofb DD 01acH
	DD	01H
	DD	020H
	DD	010H
	DD	01004H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_ofb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_ofb DD	01acH
	DD	01H
	DD	020H
	DD	010H
	DD	01004H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ofb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_cfb DD 01adH
	DD	01H
	DD	020H
	DD	010H
	DD	01003H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_cfb DD	01adH
	DD	01H
	DD	020H
	DD	010H
	DD	01003H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_cfb1 DD 028cH
	DD	01H
	DD	020H
	DD	010H
	DD	03H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb1_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_cfb1 DD 028cH
	DD	01H
	DD	020H
	DD	010H
	DD	03H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb1_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_cfb8 DD 028fH
	DD	01H
	DD	020H
	DD	010H
	DD	03H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_cfb8_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_cfb8 DD 028fH
	DD	01H
	DD	020H
	DD	010H
	DD	03H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_cfb8_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_256_ctr DD 038aH
	DD	01H
	DD	020H
	DD	010H
	DD	05H
	DD	FLAT:_aesni_init_key
	DD	FLAT:_aes_ctr_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aes_256_ctr DD	038aH
	DD	01H
	DD	020H
	DD	010H
	DD	05H
	DD	FLAT:_aes_init_key
	DD	FLAT:_aes_ctr_cipher
	DD	00H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_aesni_128_gcm DD 037fH
	DD	01H
	DD	010H
	DD	0cH
	DD	0301476H
	DD	FLAT:_aesni_gcm_init_key
	DD	FLAT:_aes_gcm_cipher
	DD	FLAT:_aes_gcm_cleanup
	DD	0290H
	DD	00H
	DD	00H
	DD	FLAT:_aes_gcm_ctrl
	DD	00H
_aes_128_gcm DD	037fH
	DD	01H
	DD	010H
	DD	0cH
	DD	0301476H
	DD	FLAT:_aes_gcm_init_key
	DD	FLAT:_aes_gcm_cipher
	DD	FLAT:_aes_gcm_cleanup
	DD	0290H
	DD	00H
	DD	00H
	DD	FLAT:_aes_gcm_ctrl
	DD	00H
_aesni_192_gcm DD 0382H
	DD	01H
	DD	018H
	DD	0cH
	DD	0301476H
	DD	FLAT:_aesni_gcm_init_key
	DD	FLAT:_aes_gcm_cipher
	DD	FLAT:_aes_gcm_cleanup
	DD	0290H
	DD	00H
	DD	00H
	DD	FLAT:_aes_gcm_ctrl
	DD	00H
_aes_192_gcm DD	0382H
	DD	01H
	DD	018H
	DD	0cH
	DD	0301476H
	DD	FLAT:_aes_gcm_init_key
	DD	FLAT:_aes_gcm_cipher
	DD	FLAT:_aes_gcm_cleanup
	DD	0290H
	DD	00H
	DD	00H
	DD	FLAT:_aes_gcm_ctrl
	DD	00H
_aesni_256_gcm DD 0385H
	DD	01H
	DD	020H
	DD	0cH
	DD	0301476H
	DD	FLAT:_aesni_gcm_init_key
	DD	FLAT:_aes_gcm_cipher
	DD	FLAT:_aes_gcm_cleanup
	DD	0290H
	DD	00H
	DD	00H
	DD	FLAT:_aes_gcm_ctrl
	DD	00H
_aes_256_gcm DD	0385H
	DD	01H
	DD	020H
	DD	0cH
	DD	0301476H
	DD	FLAT:_aes_gcm_init_key
	DD	FLAT:_aes_gcm_cipher
	DD	FLAT:_aes_gcm_cleanup
	DD	0290H
	DD	00H
	DD	00H
	DD	FLAT:_aes_gcm_ctrl
	DD	00H
CONST	ENDS
PUBLIC	_EVP_aes_128_ecb
PUBLIC	_EVP_aes_128_cbc
PUBLIC	_EVP_aes_128_cfb1
PUBLIC	_EVP_aes_128_cfb8
PUBLIC	_EVP_aes_128_cfb128
PUBLIC	_EVP_aes_128_ofb
PUBLIC	_EVP_aes_128_ctr
PUBLIC	_EVP_aes_128_ccm
PUBLIC	_EVP_aes_128_gcm
PUBLIC	_EVP_aes_128_xts
PUBLIC	_EVP_aes_128_wrap
PUBLIC	_EVP_aes_192_ecb
PUBLIC	_EVP_aes_192_cbc
PUBLIC	_EVP_aes_192_cfb1
PUBLIC	_EVP_aes_192_cfb8
PUBLIC	_EVP_aes_192_cfb128
PUBLIC	_EVP_aes_192_ofb
PUBLIC	_EVP_aes_192_ctr
PUBLIC	_EVP_aes_192_ccm
PUBLIC	_EVP_aes_192_gcm
PUBLIC	_EVP_aes_192_wrap
PUBLIC	_EVP_aes_256_ecb
PUBLIC	_EVP_aes_256_cbc
PUBLIC	_EVP_aes_256_cfb1
PUBLIC	_EVP_aes_256_cfb8
PUBLIC	_EVP_aes_256_cfb128
PUBLIC	_EVP_aes_256_ofb
PUBLIC	_EVP_aes_256_ctr
PUBLIC	_EVP_aes_256_ccm
PUBLIC	_EVP_aes_256_gcm
PUBLIC	_EVP_aes_256_xts
PUBLIC	_EVP_aes_256_wrap
PUBLIC	??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_CRYPTO_memcmp:PROC
EXTRN	_EVP_CIPHER_CTX_ctrl:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_AES_set_encrypt_key:PROC
EXTRN	_AES_set_decrypt_key:PROC
EXTRN	_AES_encrypt:PROC
EXTRN	_AES_decrypt:PROC
EXTRN	_AES_cbc_encrypt:PROC
EXTRN	_CRYPTO_cbc128_encrypt:PROC
EXTRN	_CRYPTO_cbc128_decrypt:PROC
EXTRN	_CRYPTO_ctr128_encrypt:PROC
EXTRN	_CRYPTO_ctr128_encrypt_ctr32:PROC
EXTRN	_CRYPTO_ofb128_encrypt:PROC
EXTRN	_CRYPTO_cfb128_encrypt:PROC
EXTRN	_CRYPTO_cfb128_8_encrypt:PROC
EXTRN	_CRYPTO_cfb128_1_encrypt:PROC
EXTRN	_CRYPTO_gcm128_init:PROC
EXTRN	_CRYPTO_gcm128_setiv:PROC
EXTRN	_CRYPTO_gcm128_aad:PROC
EXTRN	_CRYPTO_gcm128_encrypt:PROC
EXTRN	_CRYPTO_gcm128_decrypt:PROC
EXTRN	_CRYPTO_gcm128_encrypt_ctr32:PROC
EXTRN	_CRYPTO_gcm128_decrypt_ctr32:PROC
EXTRN	_CRYPTO_gcm128_finish:PROC
EXTRN	_CRYPTO_gcm128_tag:PROC
EXTRN	_CRYPTO_ccm128_init:PROC
EXTRN	_CRYPTO_ccm128_setiv:PROC
EXTRN	_CRYPTO_ccm128_aad:PROC
EXTRN	_CRYPTO_ccm128_encrypt:PROC
EXTRN	_CRYPTO_ccm128_decrypt:PROC
EXTRN	_CRYPTO_ccm128_encrypt_ccm64:PROC
EXTRN	_CRYPTO_ccm128_decrypt_ccm64:PROC
EXTRN	_CRYPTO_ccm128_tag:PROC
EXTRN	_CRYPTO_xts128_encrypt:PROC
EXTRN	_CRYPTO_128_wrap:PROC
EXTRN	_CRYPTO_128_unwrap:PROC
EXTRN	_RAND_bytes:PROC
EXTRN	_vpaes_set_encrypt_key:PROC
EXTRN	_vpaes_set_decrypt_key:PROC
EXTRN	_vpaes_encrypt:PROC
EXTRN	_vpaes_decrypt:PROC
EXTRN	_vpaes_cbc_encrypt:PROC
EXTRN	_aesni_set_encrypt_key:PROC
EXTRN	_aesni_set_decrypt_key:PROC
EXTRN	_aesni_encrypt:PROC
EXTRN	_aesni_decrypt:PROC
EXTRN	_aesni_ecb_encrypt:PROC
EXTRN	_aesni_cbc_encrypt:PROC
EXTRN	_aesni_ctr32_encrypt_blocks:PROC
EXTRN	_aesni_xts_encrypt:PROC
EXTRN	_aesni_xts_decrypt:PROC
EXTRN	_aesni_ccm64_encrypt_blocks:PROC
EXTRN	_aesni_ccm64_decrypt_blocks:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_OPENSSL_ia32cap_P:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@
CONST	SEGMENT
??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@ DB '.\crypto\evp\e_aes.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_wrap_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_inlen$ = 20						; size = 4
_aes_wrap_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1955
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	esi
; Line 1957
	mov	esi, DWORD PTR _in$[esp]
	mov	edx, DWORD PTR [ecx+96]
	test	esi, esi
	jne	SHORT $LN2@aes_wrap_c
; Line 1958
	xor	eax, eax
	pop	esi
; Line 1978
	ret	0
$LN2@aes_wrap_c:
; Line 1959
	mov	eax, DWORD PTR _inlen$[esp]
	test	al, 7
	je	SHORT $LN3@aes_wrap_c
$LN16@aes_wrap_c:
; Line 1960
	or	eax, -1
	pop	esi
; Line 1978
	ret	0
$LN3@aes_wrap_c:
; Line 1961
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	SHORT $LN14@aes_wrap_c
	cmp	eax, 8
	jb	SHORT $LN16@aes_wrap_c
; Line 1963
	test	ecx, ecx
	jne	SHORT $LN5@aes_wrap_c
$LN14@aes_wrap_c:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN16@aes_wrap_c
$LN5@aes_wrap_c:
	push	edi
; Line 1965
	mov	edi, DWORD PTR _out$[esp+4]
	test	edi, edi
	jne	SHORT $LN8@aes_wrap_c
; Line 1966
	test	ecx, ecx
	je	SHORT $LN7@aes_wrap_c
; Line 1967
	pop	edi
	add	eax, 8
	pop	esi
; Line 1978
	ret	0
$LN7@aes_wrap_c:
	pop	edi
; Line 1969
	add	eax, -8					; fffffff8H
	pop	esi
; Line 1978
	ret	0
$LN8@aes_wrap_c:
; Line 1971
	test	ecx, ecx
	je	SHORT $LN9@aes_wrap_c
; Line 1972
	push	OFFSET _AES_encrypt
	push	eax
	push	esi
	push	edi
	push	DWORD PTR [edx+248]
	push	edx
	call	_CRYPTO_128_wrap
; Line 1975
	add	esp, 24					; 00000018H
	mov	ecx, eax
; Line 1977
	or	eax, -1
	test	ecx, ecx
	cmovne	eax, ecx
	pop	edi
	pop	esi
; Line 1978
	ret	0
$LN9@aes_wrap_c:
; Line 1975
	push	OFFSET _AES_decrypt
	push	eax
	push	esi
	push	edi
	push	DWORD PTR [edx+248]
	push	edx
	call	_CRYPTO_128_unwrap
	add	esp, 24					; 00000018H
	mov	ecx, eax
; Line 1977
	or	eax, -1
	test	ecx, ecx
	cmovne	eax, ecx
	pop	edi
	pop	esi
; Line 1978
	ret	0
_aes_wrap_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_wrap_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aes_wrap_init_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1935
	mov	ecx, DWORD PTR _key$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _iv$[esp]
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	mov	edi, DWORD PTR [esi+96]
	test	ebx, ebx
	jne	SHORT $LN2@aes_wrap_i
	test	ecx, ecx
	jne	SHORT $LN10@aes_wrap_i
; Line 1949
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebx+1]
	pop	ebx
; Line 1950
	ret	0
$LN2@aes_wrap_i:
; Line 1937
	test	ecx, ecx
	je	SHORT $LN6@aes_wrap_i
$LN10@aes_wrap_i:
; Line 1939
	mov	eax, DWORD PTR [esi+88]
	push	edi
	shl	eax, 3
	cmp	DWORD PTR [esi+8], 0
	push	eax
	push	ecx
	je	SHORT $LN4@aes_wrap_i
	call	_AES_set_encrypt_key
	jmp	SHORT $LN11@aes_wrap_i
$LN4@aes_wrap_i:
; Line 1941
	call	_AES_set_decrypt_key
$LN11@aes_wrap_i:
	add	esp, 12					; 0000000cH
; Line 1942
	test	ebx, ebx
	jne	SHORT $LN6@aes_wrap_i
; Line 1943
	mov	DWORD PTR [edi+248], ebx
; Line 1949
	lea	eax, DWORD PTR [ebx+1]
	pop	edi
	pop	esi
	pop	ebx
; Line 1950
	ret	0
$LN6@aes_wrap_i:
; Line 1946
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [esi+32]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 1949
	mov	eax, 1
	mov	DWORD PTR [edi+248], ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 1950
	ret	0
_aes_wrap_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_ccm_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aes_ccm_init_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1815
	mov	ecx, DWORD PTR _key$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _iv$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+8]
	mov	esi, DWORD PTR [edi+96]
	test	ebx, ebx
	jne	SHORT $LN5@aes_ccm_in
	test	ecx, ecx
	jne	SHORT $LN10@aes_ccm_in
; Line 1850
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebx+1]
	pop	ebx
; Line 1851
	ret	0
$LN5@aes_ccm_in:
; Line 1817
	test	ecx, ecx
	je	SHORT $LN3@aes_ccm_in
$LN10@aes_ccm_in:
; Line 1832
	mov	eax, DWORD PTR [edi+88]
	push	esi
	shl	eax, 3
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 512	; 00000200H
	push	eax
	push	ecx
	je	SHORT $LN7@aes_ccm_in
	call	_vpaes_set_encrypt_key
; Line 1833
	push	OFFSET _vpaes_encrypt
; Line 1837
	jmp	SHORT $LN11@aes_ccm_in
$LN7@aes_ccm_in:
; Line 1840
	call	_AES_set_encrypt_key
; Line 1841
	push	OFFSET _AES_encrypt
$LN11@aes_ccm_in:
	push	esi
	push	DWORD PTR [esi+264]
	lea	eax, DWORD PTR [esi+272]
	push	DWORD PTR [esi+268]
	push	eax
	call	_CRYPTO_ccm128_init
; Line 1844
	mov	DWORD PTR [esi+248], 1
	add	esp, 32					; 00000020H
	mov	DWORD PTR [esi+320], 0
$LN3@aes_ccm_in:
; Line 1846
	test	ebx, ebx
	je	SHORT $LN8@aes_ccm_in
; Line 1847
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR [esi+264]
	push	eax
	lea	eax, DWORD PTR [edi+32]
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1848
	mov	DWORD PTR [esi+252], 1
$LN8@aes_ccm_in:
; Line 1850
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 1851
	ret	0
_aes_ccm_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_ccm_ctrl
_TEXT	SEGMENT
_c$ = 8							; size = 4
_type$ = 12						; size = 4
_arg$ = 16						; size = 4
_ptr$ = 20						; size = 4
_aes_ccm_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1752
	mov	ecx, DWORD PTR _c$[esp-4]
; Line 1753
	mov	eax, DWORD PTR _type$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx+96]
	cmp	eax, 20					; 00000014H
	ja	$LN21@aes_ccm_ct
	movzx	eax, BYTE PTR $LN23@aes_ccm_ct[eax]
	jmp	DWORD PTR $LN27@aes_ccm_ct[eax*4]
$LN4@aes_ccm_ct:
; Line 1755
	mov	DWORD PTR [esi+248], 0
; Line 1761
	mov	eax, 1
	mov	DWORD PTR [esi+252], 0
	mov	DWORD PTR [esi+264], 8
	mov	DWORD PTR [esi+268], 12			; 0000000cH
	mov	DWORD PTR [esi+256], 0
	mov	DWORD PTR [esi+260], 0
	pop	esi
; Line 1809
	ret	0
$LN5@aes_ccm_ct:
; Line 1764
	mov	ecx, 15					; 0000000fH
	sub	ecx, DWORD PTR _arg$[esp]
	jmp	SHORT $LN6@aes_ccm_ct
$LN24@aes_ccm_ct:
	mov	ecx, DWORD PTR _arg$[esp]
$LN6@aes_ccm_ct:
; Line 1766
	lea	eax, DWORD PTR [ecx-2]
	cmp	eax, 6
	ja	SHORT $LN8@aes_ccm_ct
; Line 1768
	mov	DWORD PTR [esi+264], ecx
; Line 1769
	mov	eax, 1
	pop	esi
; Line 1809
	ret	0
$LN8@aes_ccm_ct:
; Line 1767
	xor	eax, eax
	pop	esi
; Line 1809
	ret	0
$LN9@aes_ccm_ct:
	push	ebx
; Line 1772
	mov	ebx, DWORD PTR _arg$[esp+4]
	test	bl, 1
	jne	SHORT $LN11@aes_ccm_ct
	lea	eax, DWORD PTR [ebx-4]
	cmp	eax, 12					; 0000000cH
	ja	SHORT $LN11@aes_ccm_ct
; Line 1774
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN12@aes_ccm_ct
	cmp	DWORD PTR _ptr$[esp+4], 0
	je	SHORT $LN13@aes_ccm_ct
$LN11@aes_ccm_ct:
	pop	ebx
; Line 1775
	xor	eax, eax
	pop	esi
; Line 1809
	ret	0
$LN12@aes_ccm_ct:
; Line 1776
	mov	eax, DWORD PTR _ptr$[esp+4]
	test	eax, eax
	je	SHORT $LN13@aes_ccm_ct
; Line 1778
	push	ebx
	push	eax
	lea	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR [esi+256], 1
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN13@aes_ccm_ct:
; Line 1780
	mov	DWORD PTR [esi+268], ebx
; Line 1781
	mov	eax, 1
	pop	ebx
	pop	esi
; Line 1809
	ret	0
$LN14@aes_ccm_ct:
; Line 1784
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN8@aes_ccm_ct
	cmp	DWORD PTR [esi+256], 0
	je	SHORT $LN8@aes_ccm_ct
; Line 1786
	push	DWORD PTR _arg$[esp]
	lea	eax, DWORD PTR [esi+272]
	push	DWORD PTR _ptr$[esp+4]
	push	eax
	call	_CRYPTO_ccm128_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@aes_ccm_ct
; Line 1788
	mov	DWORD PTR [esi+256], 0
; Line 1791
	mov	eax, 1
	mov	DWORD PTR [esi+252], 0
	mov	DWORD PTR [esi+260], 0
	pop	esi
; Line 1809
	ret	0
$LN18@aes_ccm_ct:
; Line 1796
	mov	eax, DWORD PTR _ptr$[esp]
; Line 1797
	mov	ecx, DWORD PTR [esi+316]
	mov	eax, DWORD PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN19@aes_ccm_ct
; Line 1798
	cmp	ecx, esi
	jne	$LN8@aes_ccm_ct
; Line 1800
	mov	DWORD PTR [eax+316], eax
$LN19@aes_ccm_ct:
; Line 1802
	mov	eax, 1
	pop	esi
; Line 1809
	ret	0
$LN21@aes_ccm_ct:
; Line 1806
	or	eax, -1
	pop	esi
; Line 1809
	ret	0
	npad	2
$LN27@aes_ccm_ct:
	DD	$LN4@aes_ccm_ct
	DD	$LN18@aes_ccm_ct
	DD	$LN5@aes_ccm_ct
	DD	$LN14@aes_ccm_ct
	DD	$LN9@aes_ccm_ct
	DD	$LN24@aes_ccm_ct
	DD	$LN21@aes_ccm_ct
$LN23@aes_ccm_ct:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	4
	DB	6
	DB	6
	DB	5
_aes_ccm_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_xts_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aes_xts_init_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1639
	push	ebx
; Line 1640
	mov	ebx, DWORD PTR _ctx$[esp]
	push	ebp
; Line 1641
	mov	ebp, DWORD PTR _iv$[esp+4]
	push	esi
	mov	esi, DWORD PTR [ebx+96]
	push	edi
	mov	edi, DWORD PTR _key$[esp+12]
	test	ebp, ebp
	jne	SHORT $LN5@aes_xts_in
	test	edi, edi
	jne	SHORT $LN15@aes_xts_in
; Line 1719
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	ebx
; Line 1720
	ret	0
$LN5@aes_xts_in:
; Line 1644
	test	edi, edi
	je	$LN3@aes_xts_in
$LN15@aes_xts_in:
; Line 1649
	mov	DWORD PTR [esi+512], 0
; Line 1680
	mov	eax, DWORD PTR [ebx+88]
	push	esi
	shl	eax, 2
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 512	; 00000200H
	push	eax
	push	edi
	je	SHORT $LN7@aes_xts_in
; Line 1679
	cmp	DWORD PTR _enc$[esp+24], 0
	je	SHORT $LN9@aes_xts_in
; Line 1680
	call	_vpaes_set_encrypt_key
; Line 1682
	mov	DWORD PTR [esi+504], OFFSET _vpaes_encrypt
; Line 1683
	jmp	SHORT $LN16@aes_xts_in
$LN9@aes_xts_in:
; Line 1684
	call	_vpaes_set_decrypt_key
; Line 1686
	mov	DWORD PTR [esi+504], OFFSET _vpaes_decrypt
$LN16@aes_xts_in:
; Line 1689
	mov	eax, DWORD PTR [ebx+88]
	lea	ecx, DWORD PTR [esi+248]
	add	esp, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR [eax*4]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	ecx
	add	eax, edi
	push	eax
	call	_vpaes_set_encrypt_key
; Line 1691
	mov	DWORD PTR [esi+508], OFFSET _vpaes_encrypt
; Line 1694
	jmp	SHORT $LN17@aes_xts_in
$LN7@aes_xts_in:
; Line 1699
	cmp	DWORD PTR _enc$[esp+24], 0
	je	SHORT $LN11@aes_xts_in
; Line 1700
	call	_AES_set_encrypt_key
; Line 1701
	mov	DWORD PTR [esi+504], OFFSET _AES_encrypt
; Line 1702
	jmp	SHORT $LN18@aes_xts_in
$LN11@aes_xts_in:
; Line 1703
	call	_AES_set_decrypt_key
; Line 1704
	mov	DWORD PTR [esi+504], OFFSET _AES_decrypt
$LN18@aes_xts_in:
; Line 1707
	mov	eax, DWORD PTR [ebx+88]
	lea	ecx, DWORD PTR [esi+248]
	add	esp, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR [eax*4]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	ecx
	add	eax, edi
	push	eax
	call	_AES_set_encrypt_key
; Line 1709
	mov	DWORD PTR [esi+508], OFFSET _AES_encrypt
$LN17@aes_xts_in:
; Line 1711
	mov	DWORD PTR [esi+496], esi
	add	esp, 12					; 0000000cH
$LN3@aes_xts_in:
; Line 1714
	test	ebp, ebp
	je	SHORT $LN13@aes_xts_in
; Line 1715
	lea	eax, DWORD PTR [esi+248]
	mov	DWORD PTR [esi+500], eax
; Line 1716
	movups	xmm0, XMMWORD PTR [ebp]
	movups	XMMWORD PTR [ebx+32], xmm0
$LN13@aes_xts_in:
; Line 1719
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 1720
	ret	0
_aes_xts_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_xts_ctrl
_TEXT	SEGMENT
_c$ = 8							; size = 4
_type$ = 12						; size = 4
_arg$ = 16						; size = 4
_ptr$ = 20						; size = 4
_aes_xts_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1614
	mov	eax, DWORD PTR _c$[esp-4]
	mov	ecx, DWORD PTR [eax+96]
; Line 1615
	mov	eax, DWORD PTR _type$[esp-4]
	cmp	eax, 8
	jne	SHORT $LN2@aes_xts_ct
; Line 1617
	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [eax+96]
; Line 1618
	mov	eax, DWORD PTR [ecx+496]
	test	eax, eax
	je	SHORT $LN4@aes_xts_ct
; Line 1619
	cmp	eax, ecx
	je	SHORT $LN5@aes_xts_ct
$LN10@aes_xts_ct:
; Line 1620
	xor	eax, eax
; Line 1635
	ret	0
$LN5@aes_xts_ct:
; Line 1621
	mov	DWORD PTR [edx+496], edx
$LN4@aes_xts_ct:
; Line 1623
	cmp	DWORD PTR [ecx+500], 0
	je	SHORT $LN6@aes_xts_ct
; Line 1624
	lea	eax, DWORD PTR [ecx+248]
	cmp	DWORD PTR [ecx+500], eax
	jne	SHORT $LN10@aes_xts_ct
; Line 1626
	lea	eax, DWORD PTR [edx+248]
	mov	DWORD PTR [edx+500], eax
; Line 1634
	mov	eax, 1
; Line 1635
	ret	0
$LN2@aes_xts_ct:
; Line 1629
	test	eax, eax
	je	SHORT $LN8@aes_xts_ct
; Line 1630
	or	eax, -1
; Line 1635
	ret	0
$LN8@aes_xts_ct:
; Line 1632
	mov	DWORD PTR [ecx+496], 0
; Line 1633
	mov	DWORD PTR [ecx+500], 0
$LN6@aes_xts_ct:
; Line 1634
	mov	eax, 1
; Line 1635
	ret	0
_aes_xts_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_gcm_tls_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
tv291 = 12						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_gcm_tls_cipher PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1357
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	ebx
; Line 1361
	mov	ebx, DWORD PTR _in$[esp]
	push	ebp
	mov	ebp, DWORD PTR [ecx+96]
	push	esi
	push	edi
	mov	edi, DWORD PTR _out$[esp+12]
	cmp	edi, ebx
	jne	$LN3@aes_gcm_tl
	mov	esi, DWORD PTR _len$[esp+12]
	cmp	esi, 24					; 00000018H
	jb	$LN3@aes_gcm_tl
; Line 1369
	cmp	DWORD PTR [ecx+8], 0
	mov	edx, 19					; 00000013H
	push	edi
	mov	eax, 24					; 00000018H
	push	8
	cmovne	eax, edx
	push	eax
	push	ecx
	call	_EVP_CIPHER_CTX_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	$LN23@aes_gcm_tl
; Line 1372
	push	DWORD PTR [ebp+648]
	mov	ecx, DWORD PTR _ctx$[esp+16]
	lea	eax, DWORD PTR [ebp+256]
	add	ecx, 48					; 00000030H
	push	ecx
	push	eax
	mov	DWORD PTR tv291[esp+24], ecx
	call	_CRYPTO_gcm128_aad
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN23@aes_gcm_tl
; Line 1378
	mov	eax, DWORD PTR _ctx$[esp+12]
	add	ebx, 8
	add	edi, 8
	sub	esi, 24					; 00000018H
	cmp	DWORD PTR [eax+8], 0
; Line 1380
	mov	eax, DWORD PTR [ebp+652]
	je	SHORT $LN6@aes_gcm_tl
	test	eax, eax
	je	SHORT $LN8@aes_gcm_tl
; Line 1393
	push	eax
	push	esi
	push	edi
	push	ebx
	lea	ebx, DWORD PTR [ebp+256]
	push	ebx
	call	_CRYPTO_gcm128_encrypt_ctr32
	add	esp, 20					; 00000014H
; Line 1398
	jmp	SHORT $LN26@aes_gcm_tl
$LN8@aes_gcm_tl:
; Line 1411
	push	esi
	push	edi
	push	ebx
	lea	ebx, DWORD PTR [ebp+256]
	push	ebx
	call	_CRYPTO_gcm128_encrypt
	add	esp, 16					; 00000010H
$LN26@aes_gcm_tl:
	test	eax, eax
	jne	SHORT $LN23@aes_gcm_tl
; Line 1417
	push	16					; 00000010H
	lea	eax, DWORD PTR [edi+esi]
	push	eax
	push	ebx
	call	_CRYPTO_gcm128_tag
	add	esp, 12					; 0000000cH
; Line 1418
	lea	eax, DWORD PTR [esi+24]
; Line 1419
	jmp	SHORT $err$30
$LN6@aes_gcm_tl:
; Line 1421
	test	eax, eax
	je	SHORT $LN12@aes_gcm_tl
; Line 1434
	push	eax
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebp+256]
	push	ebx
	push	eax
	call	_CRYPTO_gcm128_decrypt_ctr32
	add	esp, 20					; 00000014H
; Line 1439
	jmp	SHORT $LN28@aes_gcm_tl
$LN12@aes_gcm_tl:
; Line 1452
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebp+256]
	push	ebx
	push	eax
	call	_CRYPTO_gcm128_decrypt
	add	esp, 16					; 00000010H
$LN28@aes_gcm_tl:
	test	eax, eax
	jne	SHORT $LN23@aes_gcm_tl
; Line 1457
	push	16					; 00000010H
	push	DWORD PTR tv291[esp+16]
	lea	eax, DWORD PTR [ebp+256]
	push	eax
	call	_CRYPTO_gcm128_tag
; Line 1459
	push	16					; 00000010H
	lea	eax, DWORD PTR [ebx+esi]
	push	eax
	push	DWORD PTR tv291[esp+32]
	call	_CRYPTO_memcmp
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN16@aes_gcm_tl
; Line 1460
	push	esi
	push	edi
	call	_OPENSSL_cleanse
	add	esp, 8
$LN23@aes_gcm_tl:
	or	eax, -1
$err$30:
	pop	edi
	pop	esi
; Line 1467
	mov	DWORD PTR [ebp+252], 0
; Line 1468
	mov	DWORD PTR [ebp+648], -1
	pop	ebp
	pop	ebx
; Line 1470
	ret	0
$LN16@aes_gcm_tl:
; Line 1463
	mov	eax, esi
	jmp	SHORT $err$30
$LN3@aes_gcm_tl:
	pop	edi
	pop	esi
	pop	ebp
; Line 1362
	or	eax, -1
	pop	ebx
; Line 1470
	ret	0
_aes_gcm_tls_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_gcm_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aes_gcm_init_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1277
	mov	eax, DWORD PTR _ctx$[esp-4]
; Line 1278
	mov	ecx, DWORD PTR _key$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _iv$[esp+4]
	mov	esi, DWORD PTR [eax+96]
	test	edi, edi
	jne	SHORT $LN5@aes_gcm_in
	test	ecx, ecx
	jne	SHORT $LN16@aes_gcm_in
; Line 1344
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
; Line 1345
	ret	0
$LN5@aes_gcm_in:
; Line 1280
	test	ecx, ecx
	je	$LN6@aes_gcm_in
$LN16@aes_gcm_in:
; Line 1306
	mov	eax, DWORD PTR [eax+88]
	push	ebx
	push	esi
	shl	eax, 3
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 512	; 00000200H
	push	eax
	push	ecx
	je	SHORT $LN8@aes_gcm_in
	call	_vpaes_set_encrypt_key
; Line 1307
	push	OFFSET _vpaes_encrypt
; Line 1310
	jmp	SHORT $LN17@aes_gcm_in
$LN8@aes_gcm_in:
; Line 1315
	call	_AES_set_encrypt_key
; Line 1316
	push	OFFSET _AES_encrypt
$LN17@aes_gcm_in:
	push	esi
	lea	ebx, DWORD PTR [esi+256]
	push	ebx
	call	_CRYPTO_gcm128_init
	add	esp, 24					; 00000018H
; Line 1321
	mov	DWORD PTR [esi+652], 0
; Line 1328
	test	edi, edi
	jne	SHORT $LN15@aes_gcm_in
	cmp	DWORD PTR [esi+252], edi
	je	SHORT $LN11@aes_gcm_in
; Line 1329
	mov	edi, DWORD PTR [esi+632]
; Line 1330
	test	edi, edi
	je	SHORT $LN11@aes_gcm_in
$LN15@aes_gcm_in:
; Line 1331
	push	DWORD PTR [esi+636]
	push	edi
	push	ebx
	call	_CRYPTO_gcm128_setiv
	add	esp, 12					; 0000000cH
; Line 1332
	mov	DWORD PTR [esi+252], 1
$LN11@aes_gcm_in:
; Line 1334
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+248], 1
; Line 1344
	mov	eax, 1
	pop	esi
; Line 1345
	ret	0
$LN6@aes_gcm_in:
; Line 1337
	cmp	DWORD PTR [esi+248], 0
; Line 1338
	push	DWORD PTR [esi+636]
	push	edi
	je	SHORT $LN12@aes_gcm_in
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_setiv
	jmp	SHORT $LN18@aes_gcm_in
$LN12@aes_gcm_in:
; Line 1340
	push	DWORD PTR [esi+632]
	call	_memcpy
$LN18@aes_gcm_in:
	add	esp, 12					; 0000000cH
; Line 1341
	mov	DWORD PTR [esi+252], 1
; Line 1342
	mov	DWORD PTR [esi+644], 0
; Line 1344
	mov	eax, 1
	pop	edi
	pop	esi
; Line 1345
	ret	0
_aes_gcm_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_gcm_ctrl
_TEXT	SEGMENT
_c$ = 8							; size = 4
_type$ = 12						; size = 4
_arg$ = 16						; size = 4
_ptr$ = 20						; size = 4
_aes_gcm_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1148
	mov	eax, DWORD PTR _type$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _c$[esp+8]
	mov	esi, DWORD PTR [edi+96]
	cmp	eax, 24					; 00000018H
	ja	$LN39@aes_gcm_ct
	movzx	eax, BYTE PTR $LN51@aes_gcm_ct[eax]
	jmp	DWORD PTR $LN54@aes_gcm_ct[eax*4]
$LN4@aes_gcm_ct:
; Line 1150
	mov	DWORD PTR [esi+248], 0
; Line 1151
	mov	DWORD PTR [esi+252], 0
; Line 1152
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [esi+636], eax
; Line 1153
	lea	eax, DWORD PTR [edi+32]
	pop	edi
	mov	DWORD PTR [esi+632], eax
; Line 1157
	mov	eax, 1
	mov	DWORD PTR [esi+640], -1
	mov	DWORD PTR [esi+644], 0
	mov	DWORD PTR [esi+648], -1
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN5@aes_gcm_ct:
; Line 1160
	mov	ebx, DWORD PTR _arg$[esp+8]
	test	ebx, ebx
	jg	SHORT $LN6@aes_gcm_ct
$LN52@aes_gcm_ct:
	pop	edi
	pop	esi
; Line 1161
	xor	eax, eax
	pop	ebx
; Line 1272
	ret	0
$LN6@aes_gcm_ct:
; Line 1163
	cmp	ebx, 16					; 00000010H
	jle	SHORT $LN9@aes_gcm_ct
	cmp	ebx, DWORD PTR [esi+636]
	jle	SHORT $LN9@aes_gcm_ct
; Line 1164
	mov	ecx, DWORD PTR [esi+632]
	lea	eax, DWORD PTR [edi+32]
	cmp	ecx, eax
	je	SHORT $LN8@aes_gcm_ct
; Line 1165
	push	ecx
	call	_CRYPTO_free
	add	esp, 4
$LN8@aes_gcm_ct:
; Line 1166
	push	1166					; 0000048eH
	push	OFFSET ??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+632], eax
; Line 1167
	test	eax, eax
	je	SHORT $LN52@aes_gcm_ct
$LN9@aes_gcm_ct:
	pop	edi
; Line 1170
	mov	DWORD PTR [esi+636], ebx
; Line 1171
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN10@aes_gcm_ct:
; Line 1174
	mov	ebx, DWORD PTR _arg$[esp+8]
	lea	eax, DWORD PTR [ebx-1]
	cmp	eax, 15					; 0000000fH
	ja	SHORT $LN52@aes_gcm_ct
	cmp	DWORD PTR [edi+8], 0
	jne	SHORT $LN52@aes_gcm_ct
; Line 1176
	push	ebx
	push	DWORD PTR _ptr$[esp+12]
	lea	eax, DWORD PTR [edi+48]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1177
	mov	DWORD PTR [esi+640], ebx
; Line 1178
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN13@aes_gcm_ct:
; Line 1181
	mov	ecx, DWORD PTR _arg$[esp+8]
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 15					; 0000000fH
	ja	$LN52@aes_gcm_ct
	cmp	DWORD PTR [edi+8], 0
	je	$LN52@aes_gcm_ct
	cmp	DWORD PTR [esi+640], 0
	jl	$LN52@aes_gcm_ct
; Line 1183
	push	ecx
	lea	eax, DWORD PTR [edi+48]
	push	eax
	push	DWORD PTR _ptr$[esp+16]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1184
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN16@aes_gcm_ct:
; Line 1188
	mov	ebx, DWORD PTR _arg$[esp+8]
	cmp	ebx, -1
	jne	SHORT $LN17@aes_gcm_ct
; Line 1189
	push	DWORD PTR [esi+636]
	push	DWORD PTR _ptr$[esp+12]
	push	DWORD PTR [esi+632]
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN21@aes_gcm_ct:
; Line 1190
	pop	edi
	mov	DWORD PTR [esi+644], 1
; Line 1191
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN17@aes_gcm_ct:
; Line 1197
	cmp	ebx, 4
	jl	$LN52@aes_gcm_ct
	mov	eax, DWORD PTR [esi+636]
	sub	eax, ebx
	cmp	eax, 8
	jl	$LN52@aes_gcm_ct
; Line 1200
	push	ebx
	push	DWORD PTR _ptr$[esp+12]
	push	DWORD PTR [esi+632]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1201
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN21@aes_gcm_ct
	mov	eax, DWORD PTR [esi+636]
	sub	eax, ebx
	push	eax
	mov	eax, DWORD PTR [esi+632]
	add	eax, ebx
	push	eax
	call	_RAND_bytes
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN21@aes_gcm_ct
; Line 1161
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1272
	ret	0
$LN22@aes_gcm_ct:
; Line 1207
	cmp	DWORD PTR [esi+644], 0
	je	$LN52@aes_gcm_ct
	cmp	DWORD PTR [esi+248], 0
	je	$LN52@aes_gcm_ct
; Line 1209
	push	DWORD PTR [esi+636]
	lea	eax, DWORD PTR [esi+256]
	push	DWORD PTR [esi+632]
	push	eax
	call	_CRYPTO_gcm128_setiv
; Line 1210
	mov	ecx, DWORD PTR _arg$[esp+20]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	jle	SHORT $LN26@aes_gcm_ct
	mov	eax, DWORD PTR [esi+636]
	cmp	ecx, eax
	jle	SHORT $LN25@aes_gcm_ct
$LN26@aes_gcm_ct:
; Line 1211
	mov	eax, DWORD PTR [esi+636]
	mov	ecx, eax
$LN25@aes_gcm_ct:
; Line 1212
	sub	eax, ecx
	add	eax, DWORD PTR [esi+632]
	push	ecx
	push	eax
	push	DWORD PTR _ptr$[esp+16]
	call	_memcpy
; Line 1217
	mov	edx, DWORD PTR [esi+636]
	add	esp, 12					; 0000000cH
	add	edx, DWORD PTR [esi+632]
; Line 1132
	mov	ecx, 8
$LL44@aes_gcm_ct:
; Line 1136
	dec	ecx
; Line 1138
	add	BYTE PTR [ecx+edx-8], 1
; Line 1140
	jne	SHORT $LN43@aes_gcm_ct
; Line 1142
	test	ecx, ecx
	jne	SHORT $LL44@aes_gcm_ct
$LN43@aes_gcm_ct:
	pop	edi
; Line 1218
	mov	DWORD PTR [esi+252], 1
; Line 1219
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN27@aes_gcm_ct:
; Line 1222
	cmp	DWORD PTR [esi+644], 0
	je	$LN52@aes_gcm_ct
	cmp	DWORD PTR [esi+248], 0
	je	$LN52@aes_gcm_ct
	cmp	DWORD PTR [edi+8], 0
	jne	$LN52@aes_gcm_ct
; Line 1224
	mov	ecx, DWORD PTR _arg$[esp+8]
	mov	eax, DWORD PTR [esi+636]
	push	ecx
	push	DWORD PTR _ptr$[esp+12]
	sub	eax, ecx
	add	eax, DWORD PTR [esi+632]
	push	eax
	call	_memcpy
; Line 1225
	push	DWORD PTR [esi+636]
	lea	eax, DWORD PTR [esi+256]
	push	DWORD PTR [esi+632]
	push	eax
	call	_CRYPTO_gcm128_setiv
	add	esp, 24					; 00000018H
; Line 1226
	mov	DWORD PTR [esi+252], 1
; Line 1227
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN30@aes_gcm_ct:
; Line 1231
	cmp	DWORD PTR _arg$[esp+8], 13		; 0000000dH
	jne	$LN52@aes_gcm_ct
; Line 1233
	mov	ecx, DWORD PTR _ptr$[esp+8]
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edi+48], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+56], eax
	mov	al, BYTE PTR [ecx+12]
	mov	BYTE PTR [edi+60], al
; Line 1234
	mov	DWORD PTR [esi+648], 13			; 0000000dH
; Line 1236
	movzx	ecx, BYTE PTR [edi+59]
	movzx	eax, BYTE PTR [edi+60]
	shl	ecx, 8
	or	ecx, eax
; Line 1238
	sub	ecx, 8
; Line 1240
	cmp	DWORD PTR [edi+8], 0
	jne	SHORT $LN32@aes_gcm_ct
; Line 1241
	sub	ecx, 16					; 00000010H
$LN32@aes_gcm_ct:
; Line 1242
	mov	eax, ecx
; Line 1243
	mov	BYTE PTR [edi+60], cl
	shr	eax, 8
	mov	BYTE PTR [edi+59], al
; Line 1246
	mov	eax, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN33@aes_gcm_ct:
; Line 1251
	mov	ecx, DWORD PTR _ptr$[esp+8]
; Line 1252
	mov	eax, DWORD PTR [esi+628]
	mov	ebx, DWORD PTR [ecx+96]
	test	eax, eax
	je	SHORT $LN34@aes_gcm_ct
; Line 1253
	cmp	eax, esi
	jne	$LN52@aes_gcm_ct
; Line 1255
	mov	DWORD PTR [ebx+628], ebx
$LN34@aes_gcm_ct:
; Line 1257
	lea	eax, DWORD PTR [edi+32]
	cmp	DWORD PTR [esi+632], eax
	jne	SHORT $LN36@aes_gcm_ct
; Line 1258
	pop	edi
	lea	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [ebx+632], eax
; Line 1265
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN36@aes_gcm_ct:
; Line 1260
	push	1260					; 000004ecH
	push	OFFSET ??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@
	push	DWORD PTR [esi+636]
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ebx+632], eax
; Line 1261
	test	eax, eax
	je	$LN52@aes_gcm_ct
; Line 1263
	push	DWORD PTR [esi+636]
	push	DWORD PTR [esi+632]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1265
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1272
	ret	0
$LN39@aes_gcm_ct:
	pop	edi
	pop	esi
; Line 1269
	or	eax, -1
	pop	ebx
; Line 1272
	ret	0
	npad	3
$LN54@aes_gcm_ct:
	DD	$LN4@aes_gcm_ct
	DD	$LN33@aes_gcm_ct
	DD	$LN5@aes_gcm_ct
	DD	$LN13@aes_gcm_ct
	DD	$LN10@aes_gcm_ct
	DD	$LN16@aes_gcm_ct
	DD	$LN22@aes_gcm_ct
	DD	$LN30@aes_gcm_ct
	DD	$LN27@aes_gcm_ct
	DD	$LN39@aes_gcm_ct
$LN51@aes_gcm_ct:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	4
	DB	5
	DB	6
	DB	9
	DB	9
	DB	7
	DB	9
	DB	8
_aes_gcm_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ctr64_inc
_TEXT	SEGMENT
_counter$ = 8						; size = 4
_ctr64_inc PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1132
	mov	edx, DWORD PTR _counter$[esp-4]
	mov	eax, 8
	npad	7
$LL4@ctr64_inc:
; Line 1136
	dec	eax
; Line 1138
	add	BYTE PTR [eax+edx], 1
; Line 1140
	jne	SHORT $LN3@ctr64_inc
; Line 1142
	test	eax, eax
	jne	SHORT $LL4@ctr64_inc
$LN3@ctr64_inc:
; Line 1143
	ret	0
_ctr64_inc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_gcm_cleanup
_TEXT	SEGMENT
_c$ = 8							; size = 4
_aes_gcm_cleanup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1121
	push	esi
	push	edi
; Line 1122
	mov	edi, DWORD PTR _c$[esp+4]
; Line 1123
	push	376					; 00000178H
	mov	esi, DWORD PTR [edi+96]
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_OPENSSL_cleanse
; Line 1124
	mov	ecx, DWORD PTR [esi+632]
	lea	eax, DWORD PTR [edi+32]
	add	esp, 8
	pop	edi
	pop	esi
	cmp	ecx, eax
	je	SHORT $LN4@aes_gcm_cl
; Line 1125
	push	ecx
	call	_CRYPTO_free
	add	esp, 4
$LN4@aes_gcm_cl:
; Line 1126
	mov	eax, 1
; Line 1127
	ret	0
_aes_gcm_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_ecb_cipher
_TEXT	SEGMENT
_dat$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_ecb_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1034
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	ebp
; Line 1038
	mov	ebp, DWORD PTR _len$[esp]
	push	edi
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+96]
	mov	DWORD PTR _dat$1$[esp+4], ecx
	mov	edi, DWORD PTR [eax+4]
	cmp	ebp, edi
	jb	SHORT $LN11@aes_ecb_ci
; Line 1041
	mov	eax, DWORD PTR _out$[esp+4]
	sub	ebp, edi
	push	ebx
	push	esi
	mov	esi, DWORD PTR _in$[esp+12]
	xor	ebx, ebx
	sub	eax, esi
	mov	DWORD PTR _out$[esp+12], eax
	npad	2
$LL4@aes_ecb_ci:
; Line 1042
	push	ecx
	add	eax, esi
	push	eax
	mov	eax, DWORD PTR [ecx+248]
	push	esi
	call	eax
	mov	ecx, DWORD PTR _dat$1$[esp+24]
	add	ebx, edi
	mov	eax, DWORD PTR _out$[esp+24]
	add	esp, 12					; 0000000cH
	add	esi, edi
	cmp	ebx, ebp
	jbe	SHORT $LL4@aes_ecb_ci
	pop	esi
	pop	ebx
$LN11@aes_ecb_ci:
	pop	edi
; Line 1044
	mov	eax, 1
	pop	ebp
; Line 1045
	ret	0
_aes_ecb_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_cbc_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_cbc_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1019
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR [eax+96]
; Line 1021
	mov	edx, DWORD PTR [ecx+252]
	test	edx, edx
	je	SHORT $LN2@aes_cbc_ci
; Line 1022
	push	DWORD PTR [eax+8]
	add	eax, 32					; 00000020H
	push	eax
	push	ecx
	push	DWORD PTR _len$[esp+8]
	push	DWORD PTR _out$[esp+12]
	push	DWORD PTR _in$[esp+16]
	call	edx
; Line 1026
	add	esp, 24					; 00000018H
; Line 1028
	mov	eax, 1
; Line 1029
	ret	0
$LN2@aes_cbc_ci:
; Line 1023
	cmp	DWORD PTR [eax+8], 0
; Line 1024
	push	DWORD PTR [ecx+248]
	je	SHORT $LN4@aes_cbc_ci
	add	eax, 32					; 00000020H
	push	eax
	push	ecx
	push	DWORD PTR _len$[esp+8]
	push	DWORD PTR _out$[esp+12]
	push	DWORD PTR _in$[esp+16]
	call	_CRYPTO_cbc128_encrypt
; Line 1026
	add	esp, 24					; 00000018H
; Line 1028
	mov	eax, 1
; Line 1029
	ret	0
$LN4@aes_cbc_ci:
; Line 1026
	add	eax, 32					; 00000020H
	push	eax
	push	ecx
	push	DWORD PTR _len$[esp+8]
	push	DWORD PTR _out$[esp+12]
	push	DWORD PTR _in$[esp+16]
	call	_CRYPTO_cbc128_decrypt
	add	esp, 24					; 00000018H
; Line 1028
	mov	eax, 1
; Line 1029
	ret	0
_aes_cbc_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aes_init_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 927
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	esi
	push	edi
; Line 929
	mov	eax, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+96]
	mov	esi, DWORD PTR [eax+16]
	and	esi, 983047				; 000f0007H
; Line 931
	cmp	esi, 1
	je	SHORT $LN4@aes_init_k
	cmp	esi, 2
	jne	SHORT $LN2@aes_init_k
$LN4@aes_init_k:
	cmp	DWORD PTR _enc$[esp+4], 0
	jne	SHORT $LN2@aes_init_k
; Line 952
	mov	eax, DWORD PTR [ecx+88]
	push	edi
	shl	eax, 3
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 512	; 00000200H
	push	eax
	push	DWORD PTR _key$[esp+12]
	je	SHORT $LN5@aes_init_k
	call	_vpaes_set_decrypt_key
; Line 954
	xor	ecx, ecx
	mov	DWORD PTR [edi+248], OFFSET _vpaes_decrypt
	add	esp, 12					; 0000000cH
	mov	edx, eax
	cmp	esi, 2
	mov	eax, OFFSET _vpaes_cbc_encrypt
	cmove	ecx, eax
	mov	DWORD PTR [edi+252], ecx
; Line 956
	jmp	SHORT $LN8@aes_init_k
$LN5@aes_init_k:
; Line 959
	call	_AES_set_decrypt_key
; Line 960
	mov	DWORD PTR [edi+248], OFFSET _AES_decrypt
; Line 963
	jmp	SHORT $LN11@aes_init_k
$LN2@aes_init_k:
; Line 991
	mov	eax, DWORD PTR [ecx+88]
	push	edi
	shl	eax, 3
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 512	; 00000200H
	push	eax
	push	DWORD PTR _key$[esp+12]
	je	SHORT $LN7@aes_init_k
	call	_vpaes_set_encrypt_key
; Line 992
	mov	DWORD PTR [edi+248], OFFSET _vpaes_encrypt
; Line 993
	mov	ecx, OFFSET _vpaes_cbc_encrypt
; Line 995
	jmp	SHORT $LN12@aes_init_k
$LN7@aes_init_k:
; Line 998
	call	_AES_set_encrypt_key
; Line 999
	mov	DWORD PTR [edi+248], OFFSET _AES_encrypt
$LN11@aes_init_k:
; Line 1000
	mov	ecx, OFFSET _AES_cbc_encrypt
$LN12@aes_init_k:
; Line 998
	mov	edx, eax
	add	esp, 12					; 0000000cH
; Line 1000
	xor	eax, eax
	cmp	esi, 2
	cmove	eax, ecx
	mov	DWORD PTR [edi+252], eax
$LN8@aes_init_k:
; Line 1008
	pop	edi
	pop	esi
	test	edx, edx
	jns	SHORT $LN9@aes_init_k
; Line 1009
	push	1009					; 000003f1H
	push	OFFSET ??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@
	push	143					; 0000008fH
	push	133					; 00000085H
	push	6
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1010
	xor	eax, eax
; Line 1014
	ret	0
$LN9@aes_init_k:
; Line 1013
	mov	eax, 1
; Line 1014
	ret	0
_aes_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_ccm_cipher
_TEXT	SEGMENT
_ctx$GSCopy$1$ = -28					; size = 4
_out$GSCopy$1$ = -24					; size = 4
_tag$1 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_ccm_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1855
	mov	eax, 28					; 0000001cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+28], eax
	mov	ecx, DWORD PTR _ctx$[esp+24]
	mov	eax, DWORD PTR _out$[esp+24]
	push	ebx
	mov	ebx, DWORD PTR _in$[esp+28]
	push	ebp
	push	esi
; Line 1856
	mov	esi, DWORD PTR [ecx+96]
	mov	DWORD PTR _ctx$GSCopy$1$[esp+40], ecx
	mov	DWORD PTR _out$GSCopy$1$[esp+40], eax
; Line 1859
	cmp	DWORD PTR [esi+252], 0
	lea	ebp, DWORD PTR [esi+272]
	jne	SHORT $LN2@aes_ccm_ci
	cmp	DWORD PTR [esi+248], 0
	jne	SHORT $LN2@aes_ccm_ci
$LN31@aes_ccm_ci:
	pop	esi
	pop	ebp
; Line 1860
	or	eax, -1
	pop	ebx
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN2@aes_ccm_ci:
; Line 1861
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN3@aes_ccm_ci
	cmp	DWORD PTR [esi+256], 0
	je	SHORT $LN31@aes_ccm_ci
$LN3@aes_ccm_ci:
	push	edi
; Line 1863
	test	eax, eax
	jne	SHORT $LN4@aes_ccm_ci
; Line 1864
	test	ebx, ebx
	jne	SHORT $LN5@aes_ccm_ci
; Line 1865
	mov	edi, DWORD PTR _len$[esp+40]
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR [esi+264]
	push	edi
	push	eax
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	push	ebp
	call	_CRYPTO_ccm128_setiv
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN30@aes_ccm_ci
; Line 1868
	mov	eax, edi
	mov	DWORD PTR [esi+260], 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN5@aes_ccm_ci:
; Line 1871
	cmp	DWORD PTR [esi+260], 0
	mov	esi, DWORD PTR _len$[esp+40]
	jne	SHORT $LN7@aes_ccm_ci
	test	esi, esi
	jne	$LN30@aes_ccm_ci
$LN7@aes_ccm_ci:
; Line 1873
	push	esi
	push	ebx
	push	ebp
	call	_CRYPTO_ccm128_aad
	add	esp, 12					; 0000000cH
; Line 1874
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN4@aes_ccm_ci:
; Line 1877
	test	ebx, ebx
	jne	SHORT $LN8@aes_ccm_ci
; Line 1878
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN8@aes_ccm_ci:
; Line 1880
	cmp	DWORD PTR [esi+260], 0
	mov	edi, DWORD PTR _len$[esp+40]
	jne	SHORT $LN9@aes_ccm_ci
; Line 1881
	push	edi
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR [esi+264]
	push	eax
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	push	ebp
	call	_CRYPTO_ccm128_setiv
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN30@aes_ccm_ci
; Line 1883
	mov	ecx, DWORD PTR _ctx$GSCopy$1$[esp+44]
	mov	eax, DWORD PTR _out$GSCopy$1$[esp+44]
	mov	DWORD PTR [esi+260], 1
$LN9@aes_ccm_ci:
; Line 1885
	cmp	DWORD PTR [ecx+8], 0
; Line 1886
	mov	ecx, DWORD PTR [esi+320]
	je	SHORT $LN11@aes_ccm_ci
	test	ecx, ecx
	je	SHORT $LN19@aes_ccm_ci
	push	ecx
	push	edi
	push	eax
	push	ebx
	push	ebp
	call	_CRYPTO_ccm128_encrypt_ccm64
	add	esp, 20					; 00000014H
	jmp	SHORT $LN20@aes_ccm_ci
$LN19@aes_ccm_ci:
	push	edi
	push	eax
	push	ebx
	push	ebp
	call	_CRYPTO_ccm128_encrypt
	add	esp, 16					; 00000010H
$LN20@aes_ccm_ci:
	test	eax, eax
	je	SHORT $LN13@aes_ccm_ci
$LN30@aes_ccm_ci:
	pop	edi
	pop	esi
	pop	ebp
; Line 1889
	or	eax, -1
	pop	ebx
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN13@aes_ccm_ci:
; Line 1891
	mov	eax, edi
	mov	DWORD PTR [esi+256], 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN11@aes_ccm_ci:
; Line 1894
	test	ecx, ecx
	je	SHORT $LN21@aes_ccm_ci
	push	ecx
	push	edi
	push	eax
	push	ebx
	push	ebp
	call	_CRYPTO_ccm128_decrypt_ccm64
	add	esp, 20					; 00000014H
	jmp	SHORT $LN28@aes_ccm_ci
$LN21@aes_ccm_ci:
	push	edi
	push	eax
	push	ebx
	push	ebp
	call	_CRYPTO_ccm128_decrypt
	add	esp, 16					; 00000010H
$LN28@aes_ccm_ci:
	neg	eax
	sbb	eax, eax
	inc	eax
	test	eax, eax
	je	SHORT $LN26@aes_ccm_ci
; Line 1898
	push	DWORD PTR [esi+268]
	lea	eax, DWORD PTR _tag$1[esp+48]
	push	eax
	push	ebp
	call	_CRYPTO_ccm128_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN26@aes_ccm_ci
; Line 1899
	push	DWORD PTR [esi+268]
	mov	eax, DWORD PTR _ctx$GSCopy$1$[esp+48]
	add	eax, 48					; 00000030H
	push	eax
	lea	eax, DWORD PTR _tag$1[esp+52]
	push	eax
	call	_CRYPTO_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN26@aes_ccm_ci
; Line 1900
	mov	ebx, edi
; Line 1903
	cmp	edi, -1
	jne	SHORT $LN17@aes_ccm_ci
	jmp	SHORT $LN23@aes_ccm_ci
$LN26@aes_ccm_ci:
	or	ebx, -1
$LN23@aes_ccm_ci:
; Line 1904
	push	edi
	push	DWORD PTR _out$GSCopy$1$[esp+48]
	call	_OPENSSL_cleanse
	add	esp, 8
$LN17@aes_ccm_ci:
; Line 1911
	mov	ecx, DWORD PTR __$ArrayPad$[esp+44]
	mov	eax, ebx
	pop	edi
	mov	DWORD PTR [esi+252], 0
	mov	DWORD PTR [esi+256], 0
	mov	DWORD PTR [esi+260], 0
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
_aes_ccm_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aesni_ccm_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aesni_ccm_init_key PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 420
	mov	ecx, DWORD PTR _key$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _ctx$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _iv$[esp+8]
	mov	esi, DWORD PTR [ebx+96]
	test	edi, edi
	jne	SHORT $LN2@aesni_ccm_
	test	ecx, ecx
	jne	SHORT $LN6@aesni_ccm_
; Line 434
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
	pop	ebx
; Line 435
	ret	0
$LN2@aesni_ccm_:
; Line 422
	test	ecx, ecx
	je	SHORT $LN3@aesni_ccm_
$LN6@aesni_ccm_:
; Line 423
	mov	eax, DWORD PTR [ebx+88]
	push	esi
	shl	eax, 3
	push	eax
	push	ecx
	call	_aesni_set_encrypt_key
; Line 424
	push	OFFSET _aesni_encrypt
	push	esi
	push	DWORD PTR [esi+264]
	lea	eax, DWORD PTR [esi+272]
	push	DWORD PTR [esi+268]
	push	eax
	call	_CRYPTO_ccm128_init
	add	esp, 32					; 00000020H
; Line 428
	mov	DWORD PTR [esi+248], 1
	cmp	DWORD PTR _enc$[esp+8], 0
	mov	eax, OFFSET _aesni_ccm64_decrypt_blocks
	mov	ecx, OFFSET _aesni_ccm64_encrypt_blocks
	cmovne	eax, ecx
	mov	DWORD PTR [esi+320], eax
$LN3@aesni_ccm_:
; Line 430
	test	edi, edi
	je	SHORT $LN4@aesni_ccm_
; Line 431
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR [esi+264]
	push	eax
	lea	eax, DWORD PTR [ebx+32]
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 432
	mov	DWORD PTR [esi+252], 1
$LN4@aesni_ccm_:
; Line 434
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 435
	ret	0
_aesni_ccm_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_xts_cipher
_TEXT	SEGMENT
tv183 = -4						; size = 4
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_xts_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1724
	mov	eax, 4
	call	__chkstk
; Line 1725
	mov	eax, DWORD PTR _ctx$[esp]
	push	ebx
	push	ebp
	mov	ecx, DWORD PTR [eax+96]
; Line 1726
	mov	ebp, DWORD PTR [ecx+496]
	lea	ebx, DWORD PTR [ecx+496]
	test	ebp, ebp
	je	$LN3@aes_xts_ci
	cmp	DWORD PTR [ecx+500], 0
	je	SHORT $LN3@aes_xts_ci
; Line 1728
	mov	edx, DWORD PTR _out$[esp+8]
	push	esi
	push	edi
	test	edx, edx
	je	SHORT $LN5@aes_xts_ci
	mov	esi, DWORD PTR _in$[esp+16]
	test	esi, esi
	je	SHORT $LN5@aes_xts_ci
	mov	edi, DWORD PTR _len$[esp+16]
	cmp	edi, 16					; 00000010H
	jb	SHORT $LN5@aes_xts_ci
; Line 1730
	mov	eax, DWORD PTR [ecx+512]
	test	eax, eax
	mov	DWORD PTR tv183[esp+20], eax
	mov	eax, DWORD PTR _ctx$[esp+16]
	je	SHORT $LN6@aes_xts_ci
; Line 1731
	add	eax, 32					; 00000020H
	push	eax
	push	DWORD PTR [ecx+500]
	push	ebp
	push	edi
	push	edx
	push	esi
	call	DWORD PTR tv183[esp+44]
	add	esp, 24					; 00000018H
; Line 1736
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1737
	pop	ecx
	ret	0
$LN6@aes_xts_ci:
; Line 1733
	push	DWORD PTR [eax+8]
	add	eax, 32					; 00000020H
	push	edi
	push	edx
	push	esi
	push	eax
	push	ebx
	call	_CRYPTO_xts128_encrypt
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN5@aes_xts_ci
; Line 1736
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 1737
	pop	ecx
	ret	0
$LN5@aes_xts_ci:
	pop	edi
	pop	esi
	pop	ebp
; Line 1729
	xor	eax, eax
	pop	ebx
; Line 1737
	pop	ecx
	ret	0
$LN3@aes_xts_ci:
	pop	ebp
; Line 1727
	xor	eax, eax
	pop	ebx
; Line 1737
	pop	ecx
	ret	0
_aes_xts_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aesni_xts_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aesni_xts_init_key PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 380
	push	ebx
; Line 381
	mov	ebx, DWORD PTR _ctx$[esp]
	push	ebp
; Line 382
	mov	ebp, DWORD PTR _iv$[esp+4]
	push	esi
	mov	esi, DWORD PTR [ebx+96]
	push	edi
	mov	edi, DWORD PTR _key$[esp+12]
	test	ebp, ebp
	jne	SHORT $LN2@aesni_xts_
	test	edi, edi
	jne	SHORT $LN8@aesni_xts_
; Line 409
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	ebx
; Line 410
	ret	0
$LN2@aesni_xts_:
; Line 385
	test	edi, edi
	je	SHORT $LN3@aesni_xts_
$LN8@aesni_xts_:
; Line 388
	mov	eax, DWORD PTR [ebx+88]
	push	esi
	shl	eax, 2
	cmp	DWORD PTR _enc$[esp+16], 0
	push	eax
	push	edi
	je	SHORT $LN4@aesni_xts_
	call	_aesni_set_encrypt_key
; Line 389
	mov	DWORD PTR [esi+504], OFFSET _aesni_encrypt
; Line 390
	mov	DWORD PTR [esi+512], OFFSET _aesni_xts_encrypt
; Line 391
	jmp	SHORT $LN9@aesni_xts_
$LN4@aesni_xts_:
; Line 392
	call	_aesni_set_decrypt_key
; Line 393
	mov	DWORD PTR [esi+504], OFFSET _aesni_decrypt
; Line 394
	mov	DWORD PTR [esi+512], OFFSET _aesni_xts_decrypt
$LN9@aesni_xts_:
; Line 397
	mov	eax, DWORD PTR [ebx+88]
	lea	ecx, DWORD PTR [esi+248]
	add	esp, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR [eax*4]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	ecx
	add	eax, edi
	push	eax
	call	_aesni_set_encrypt_key
	add	esp, 12					; 0000000cH
; Line 399
	mov	DWORD PTR [esi+508], OFFSET _aesni_encrypt
; Line 401
	mov	DWORD PTR [esi+496], esi
$LN3@aesni_xts_:
; Line 404
	test	ebp, ebp
	je	SHORT $LN6@aesni_xts_
; Line 405
	lea	eax, DWORD PTR [esi+248]
	mov	DWORD PTR [esi+500], eax
; Line 406
	movups	xmm0, XMMWORD PTR [ebp]
	movups	XMMWORD PTR [ebx+32], xmm0
$LN6@aesni_xts_:
; Line 409
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 410
	ret	0
_aesni_xts_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_gcm_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_gcm_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1475
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+96]
; Line 1477
	cmp	DWORD PTR [esi+248], 0
	jne	SHORT $LN2@aes_gcm_ci
$LN28@aes_gcm_ci:
; Line 1478
	or	eax, -1
	pop	esi
; Line 1595
	ret	0
$LN2@aes_gcm_ci:
; Line 1480
	cmp	DWORD PTR [esi+648], 0
	jl	SHORT $LN3@aes_gcm_ci
	pop	esi
; Line 1481
	mov	DWORD PTR _ctx$[esp-4], eax
	jmp	_aes_gcm_tls_cipher
$LN3@aes_gcm_ci:
; Line 1483
	cmp	DWORD PTR [esi+252], 0
	je	SHORT $LN28@aes_gcm_ci
; Line 1485
	mov	ecx, DWORD PTR _in$[esp]
	test	ecx, ecx
	je	$LN5@aes_gcm_ci
; Line 1486
	mov	edx, DWORD PTR _out$[esp]
	push	edi
; Line 1487
	mov	edi, DWORD PTR _len$[esp+4]
	test	edx, edx
	jne	SHORT $LN7@aes_gcm_ci
	push	edi
	push	ecx
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_aad
	add	esp, 12					; 0000000cH
; Line 1488
	jmp	SHORT $LN27@aes_gcm_ci
$LN7@aes_gcm_ci:
; Line 1489
	cmp	DWORD PTR [eax+8], 0
; Line 1490
	mov	eax, DWORD PTR [esi+652]
	je	SHORT $LN10@aes_gcm_ci
	test	eax, eax
	je	SHORT $LN12@aes_gcm_ci
; Line 1507
	push	eax
	push	edi
	push	edx
	push	ecx
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_encrypt_ctr32
	add	esp, 20					; 00000014H
; Line 1511
	jmp	SHORT $LN27@aes_gcm_ci
$LN12@aes_gcm_ci:
; Line 1529
	push	edi
	push	edx
	push	ecx
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_encrypt
$LN30@aes_gcm_ci:
	add	esp, 16					; 00000010H
$LN27@aes_gcm_ci:
; Line 1551
	test	eax, eax
	je	SHORT $LN19@aes_gcm_ci
; Line 1555
	pop	edi
	or	eax, -1
	pop	esi
; Line 1595
	ret	0
$LN10@aes_gcm_ci:
; Line 1534
	test	eax, eax
	je	SHORT $LN16@aes_gcm_ci
; Line 1551
	push	eax
	push	edi
	push	edx
	push	ecx
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_decrypt_ctr32
	add	esp, 20					; 00000014H
; Line 1555
	jmp	SHORT $LN27@aes_gcm_ci
$LN16@aes_gcm_ci:
; Line 1573
	push	edi
	push	edx
	push	ecx
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_decrypt
; Line 1575
	jmp	SHORT $LN30@aes_gcm_ci
$LN19@aes_gcm_ci:
; Line 1578
	mov	eax, edi
	pop	edi
	pop	esi
; Line 1595
	ret	0
$LN5@aes_gcm_ci:
; Line 1580
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN20@aes_gcm_ci
; Line 1581
	mov	ecx, DWORD PTR [esi+640]
	test	ecx, ecx
	js	$LN28@aes_gcm_ci
; Line 1583
	push	ecx
	add	eax, 48					; 00000030H
	push	eax
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_finish
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN22@aes_gcm_ci
; Line 1478
	or	eax, -1
	pop	esi
; Line 1595
	ret	0
$LN20@aes_gcm_ci:
; Line 1588
	add	eax, 48					; 00000030H
	push	16					; 00000010H
	push	eax
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_tag
	add	esp, 12					; 0000000cH
; Line 1589
	mov	DWORD PTR [esi+640], 16			; 00000010H
$LN22@aes_gcm_ci:
; Line 1591
	mov	DWORD PTR [esi+252], 0
; Line 1592
	xor	eax, eax
	pop	esi
; Line 1595
	ret	0
_aes_gcm_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aesni_gcm_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aesni_gcm_init_key PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 345
	mov	eax, DWORD PTR _ctx$[esp-4]
; Line 346
	mov	ecx, DWORD PTR _key$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _iv$[esp+4]
	mov	esi, DWORD PTR [eax+96]
	test	edi, edi
	jne	SHORT $LN2@aesni_gcm_
	test	ecx, ecx
	jne	SHORT $LN11@aesni_gcm_
; Line 371
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
; Line 372
	ret	0
$LN2@aesni_gcm_:
; Line 348
	test	ecx, ecx
	je	SHORT $LN3@aesni_gcm_
$LN11@aesni_gcm_:
; Line 349
	mov	eax, DWORD PTR [eax+88]
	push	ebx
	push	esi
	shl	eax, 3
	push	eax
	push	ecx
	call	_aesni_set_encrypt_key
; Line 350
	push	OFFSET _aesni_encrypt
	lea	ebx, DWORD PTR [esi+256]
	push	esi
	push	ebx
	call	_CRYPTO_gcm128_init
	add	esp, 24					; 00000018H
; Line 351
	mov	DWORD PTR [esi+652], OFFSET _aesni_ctr32_encrypt_blocks
; Line 355
	test	edi, edi
	jne	SHORT $LN10@aesni_gcm_
	cmp	DWORD PTR [esi+252], edi
	je	SHORT $LN6@aesni_gcm_
; Line 356
	mov	edi, DWORD PTR [esi+632]
; Line 357
	test	edi, edi
	je	SHORT $LN6@aesni_gcm_
$LN10@aesni_gcm_:
; Line 358
	push	DWORD PTR [esi+636]
	push	edi
	push	ebx
	call	_CRYPTO_gcm128_setiv
	add	esp, 12					; 0000000cH
; Line 359
	mov	DWORD PTR [esi+252], 1
$LN6@aesni_gcm_:
; Line 361
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+248], 1
; Line 371
	mov	eax, 1
	pop	esi
; Line 372
	ret	0
$LN3@aesni_gcm_:
; Line 364
	cmp	DWORD PTR [esi+248], 0
; Line 365
	push	DWORD PTR [esi+636]
	push	edi
	je	SHORT $LN7@aesni_gcm_
	lea	eax, DWORD PTR [esi+256]
	push	eax
	call	_CRYPTO_gcm128_setiv
	jmp	SHORT $LN12@aesni_gcm_
$LN7@aesni_gcm_:
; Line 367
	push	DWORD PTR [esi+632]
	call	_memcpy
$LN12@aesni_gcm_:
	add	esp, 12					; 0000000cH
; Line 368
	mov	DWORD PTR [esi+252], 1
; Line 369
	mov	DWORD PTR [esi+644], 0
; Line 371
	mov	eax, 1
	pop	edi
	pop	esi
; Line 372
	ret	0
_aesni_gcm_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_ctr_cipher
_TEXT	SEGMENT
_num$ = 8						; size = 4
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_ctr_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1102
	push	esi
; Line 1103
	mov	esi, DWORD PTR _ctx$[esp]
; Line 1104
	mov	ecx, DWORD PTR [esi+96]
	mov	eax, DWORD PTR [esi+80]
	mov	DWORD PTR _num$[esp], eax
; Line 1106
	mov	eax, DWORD PTR [ecx+252]
	test	eax, eax
	je	SHORT $LN2@aes_ctr_ci
; Line 1107
	push	eax
	lea	eax, DWORD PTR _num$[esp+4]
	push	eax
	lea	eax, DWORD PTR [esi+48]
	push	eax
	lea	eax, DWORD PTR [esi+32]
	push	eax
	push	ecx
	push	DWORD PTR _len$[esp+20]
	push	DWORD PTR _out$[esp+24]
	push	DWORD PTR _in$[esp+28]
	call	_CRYPTO_ctr128_encrypt_ctr32
; Line 1112
	mov	eax, DWORD PTR _num$[esp+32]
	add	esp, 32					; 00000020H
	mov	DWORD PTR [esi+80], eax
; Line 1113
	mov	eax, 1
	pop	esi
; Line 1114
	ret	0
$LN2@aes_ctr_ci:
; Line 1110
	push	DWORD PTR [ecx+248]
	lea	eax, DWORD PTR _num$[esp+4]
	push	eax
	lea	eax, DWORD PTR [esi+48]
	push	eax
	lea	eax, DWORD PTR [esi+32]
	push	eax
	push	ecx
	push	DWORD PTR _len$[esp+20]
	push	DWORD PTR _out$[esp+24]
	push	DWORD PTR _in$[esp+28]
	call	_CRYPTO_ctr128_encrypt
; Line 1112
	mov	eax, DWORD PTR _num$[esp+32]
	add	esp, 32					; 00000020H
	mov	DWORD PTR [esi+80], eax
; Line 1113
	mov	eax, 1
	pop	esi
; Line 1114
	ret	0
_aes_ctr_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_cfb1_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_cfb1_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1079
	push	ebx
	push	esi
; Line 1080
	mov	esi, DWORD PTR _ctx$[esp+4]
; Line 1082
	test	DWORD PTR [esi+92], 8192		; 00002000H
	mov	ebx, DWORD PTR [esi+96]
	je	SHORT $LN7@aes_cfb1_c
; Line 1083
	push	DWORD PTR [ebx+248]
	lea	eax, DWORD PTR [esi+80]
	push	DWORD PTR [esi+8]
	push	eax
	lea	eax, DWORD PTR [esi+32]
	push	eax
	push	ebx
	push	DWORD PTR _len$[esp+24]
	push	DWORD PTR _out$[esp+28]
	push	DWORD PTR _in$[esp+32]
	call	_CRYPTO_cfb128_1_encrypt
	add	esp, 32					; 00000020H
; Line 1097
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 1098
	ret	0
$LN7@aes_cfb1_c:
; Line 1088
	mov	ecx, DWORD PTR _in$[esp+4]
	mov	edx, DWORD PTR _out$[esp+4]
	push	edi
	mov	edi, DWORD PTR _len$[esp+8]
	cmp	edi, 268435456				; 10000000H
	jb	SHORT $LN3@aes_cfb1_c
	push	ebp
	mov	ebp, edi
	lea	eax, DWORD PTR [esi+80]
	shr	ebp, 28					; 0000001cH
	npad	2
$LL2@aes_cfb1_c:
; Line 1089
	push	DWORD PTR [ebx+248]
	push	DWORD PTR [esi+8]
	push	eax
	lea	eax, DWORD PTR [esi+32]
	push	eax
	push	ebx
	push	-2147483648				; 80000000H
	push	edx
	push	ecx
	call	_CRYPTO_cfb128_1_encrypt
	mov	ecx, DWORD PTR _in$[esp+44]
	lea	eax, DWORD PTR [esi+80]
	mov	edx, DWORD PTR _out$[esp+44]
	add	esp, 32					; 00000020H
; Line 1091
	sub	edi, 268435456				; 10000000H
	sub	ebp, 1
	jne	SHORT $LL2@aes_cfb1_c
	pop	ebp
$LN3@aes_cfb1_c:
; Line 1093
	test	edi, edi
	je	SHORT $LN5@aes_cfb1_c
; Line 1094
	push	DWORD PTR [ebx+248]
	lea	eax, DWORD PTR [esi+80]
	push	DWORD PTR [esi+8]
	push	eax
	lea	eax, DWORD PTR [esi+32]
	push	eax
	push	ebx
	lea	eax, DWORD PTR [edi*8]
	push	eax
	push	edx
	push	ecx
	call	_CRYPTO_cfb128_1_encrypt
	add	esp, 32					; 00000020H
$LN5@aes_cfb1_c:
; Line 1097
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 1098
	ret	0
_aes_cfb1_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_cfb8_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_cfb8_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1070
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	edx, DWORD PTR [ecx+96]
; Line 1072
	lea	eax, DWORD PTR [ecx+80]
	push	DWORD PTR [edx+248]
	push	DWORD PTR [ecx+8]
	push	eax
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	push	edx
	push	DWORD PTR _len$[esp+16]
	push	DWORD PTR _out$[esp+20]
	push	DWORD PTR _in$[esp+24]
	call	_CRYPTO_cfb128_8_encrypt
	add	esp, 32					; 00000020H
; Line 1074
	mov	eax, 1
; Line 1075
	ret	0
_aes_cfb8_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_cfb_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_cfb_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1060
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	edx, DWORD PTR [ecx+96]
; Line 1062
	lea	eax, DWORD PTR [ecx+80]
	push	DWORD PTR [edx+248]
	push	DWORD PTR [ecx+8]
	push	eax
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	push	edx
	push	DWORD PTR _len$[esp+16]
	push	DWORD PTR _out$[esp+20]
	push	DWORD PTR _in$[esp+24]
	call	_CRYPTO_cfb128_encrypt
	add	esp, 32					; 00000020H
; Line 1064
	mov	eax, 1
; Line 1065
	ret	0
_aes_cfb_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aes_ofb_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aes_ofb_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1050
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	edx, DWORD PTR [ecx+96]
; Line 1052
	lea	eax, DWORD PTR [ecx+80]
	push	DWORD PTR [edx+248]
	push	eax
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	push	edx
	push	DWORD PTR _len$[esp+12]
	push	DWORD PTR _out$[esp+16]
	push	DWORD PTR _in$[esp+20]
	call	_CRYPTO_ofb128_encrypt
	add	esp, 28					; 0000001cH
; Line 1054
	mov	eax, 1
; Line 1055
	ret	0
_aes_ofb_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aesni_ecb_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aesni_ecb_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 314
	mov	ecx, DWORD PTR _ctx$[esp-4]
	mov	edx, DWORD PTR _len$[esp-4]
	mov	eax, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax+4]
	jb	SHORT $LN4@aesni_ecb_
; Line 317
	push	DWORD PTR [ecx+8]
	push	DWORD PTR [ecx+96]
	push	edx
	push	DWORD PTR _out$[esp+8]
	push	DWORD PTR _in$[esp+12]
	call	_aesni_ecb_encrypt
	add	esp, 20					; 00000014H
$LN4@aesni_ecb_:
; Line 319
	mov	eax, 1
; Line 320
	ret	0
_aesni_ecb_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aesni_cbc_cipher
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_aesni_cbc_cipher PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 304
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [ecx+32]
	push	eax
	push	DWORD PTR [ecx+96]
	push	DWORD PTR _len$[esp+8]
	push	DWORD PTR _out$[esp+12]
	push	DWORD PTR _in$[esp+16]
	call	_aesni_cbc_encrypt
	add	esp, 24					; 00000018H
; Line 306
	mov	eax, 1
; Line 307
	ret	0
_aesni_cbc_cipher ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _aesni_init_key
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_iv$ = 16						; size = 4
_enc$ = 20						; size = 4
_aesni_init_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 273
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	esi
	push	edi
; Line 275
	mov	eax, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+96]
	mov	esi, DWORD PTR [eax+16]
	and	esi, 983047				; 000f0007H
; Line 277
	cmp	esi, 1
	je	SHORT $LN4@aesni_init
	cmp	esi, 2
	jne	SHORT $LN2@aesni_init
$LN4@aesni_init:
	cmp	DWORD PTR _enc$[esp+4], 0
	jne	SHORT $LN2@aesni_init
; Line 278
	mov	eax, DWORD PTR [ecx+88]
	push	edi
	shl	eax, 3
	push	eax
	push	DWORD PTR _key$[esp+12]
	call	_aesni_set_decrypt_key
; Line 280
	xor	ecx, ecx
	mov	DWORD PTR [edi+248], OFFSET _aesni_decrypt
	add	esp, 12					; 0000000cH
	mov	edx, eax
	cmp	esi, 2
	mov	eax, OFFSET _aesni_cbc_encrypt
	cmove	ecx, eax
	mov	DWORD PTR [edi+252], ecx
; Line 282
	jmp	SHORT $LN7@aesni_init
$LN2@aesni_init:
; Line 283
	mov	eax, DWORD PTR [ecx+88]
	push	edi
	shl	eax, 3
	push	eax
	push	DWORD PTR _key$[esp+12]
	call	_aesni_set_encrypt_key
	add	esp, 12					; 0000000cH
; Line 284
	mov	DWORD PTR [edi+248], OFFSET _aesni_encrypt
	mov	edx, eax
; Line 285
	cmp	esi, 2
	jne	SHORT $LN5@aesni_init
; Line 286
	mov	DWORD PTR [edi+252], OFFSET _aesni_cbc_encrypt
	jmp	SHORT $LN7@aesni_init
$LN5@aesni_init:
; Line 287
	xor	eax, eax
	mov	ecx, OFFSET _aesni_ctr32_encrypt_blocks
	cmp	esi, 5
	cmove	eax, ecx
	mov	DWORD PTR [edi+252], eax
$LN7@aesni_init:
; Line 293
	pop	edi
	pop	esi
	test	edx, edx
	jns	SHORT $LN9@aesni_init
; Line 294
	push	294					; 00000126H
	push	OFFSET ??_C@_0BF@PJIDMOFK@?4?2crypto?2evp?2e_aes?4c?$AA@
	push	143					; 0000008fH
	push	165					; 000000a5H
	push	6
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 295
	xor	eax, eax
; Line 299
	ret	0
$LN9@aesni_init:
; Line 298
	mov	eax, 1
; Line 299
	ret	0
_aesni_init_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_wrap
_TEXT	SEGMENT
_EVP_aes_256_wrap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 2023
	mov	eax, OFFSET _aes_256_wrap
; Line 2024
	ret	0
_EVP_aes_256_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_xts
_TEXT	SEGMENT
_EVP_aes_256_xts PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1747
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_xts
	mov	ecx, OFFSET _aes_256_xts
	cmove	eax, ecx
; Line 1748
	ret	0
_EVP_aes_256_xts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_gcm
_TEXT	SEGMENT
_EVP_aes_256_gcm PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1608
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_gcm
	mov	ecx, OFFSET _aes_256_gcm
	cmove	eax, ecx
; Line 1610
	ret	0
_EVP_aes_256_gcm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_ccm
_TEXT	SEGMENT
_EVP_aes_256_ccm PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1919
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_ccm
	mov	ecx, OFFSET _aes_256_ccm
	cmove	eax, ecx
; Line 1920
	ret	0
_EVP_aes_256_ccm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_ctr
_TEXT	SEGMENT
_EVP_aes_256_ctr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_ctr
	mov	ecx, OFFSET _aes_256_ctr
	cmove	eax, ecx
	ret	0
_EVP_aes_256_ctr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_ofb
_TEXT	SEGMENT
_EVP_aes_256_ofb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_ofb
	mov	ecx, OFFSET _aes_256_ofb
	cmove	eax, ecx
	ret	0
_EVP_aes_256_ofb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_cfb128
_TEXT	SEGMENT
_EVP_aes_256_cfb128 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_cfb
	mov	ecx, OFFSET _aes_256_cfb
	cmove	eax, ecx
	ret	0
_EVP_aes_256_cfb128 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_cfb8
_TEXT	SEGMENT
_EVP_aes_256_cfb8 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_cfb8
	mov	ecx, OFFSET _aes_256_cfb8
	cmove	eax, ecx
	ret	0
_EVP_aes_256_cfb8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_cfb1
_TEXT	SEGMENT
_EVP_aes_256_cfb1 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_cfb1
	mov	ecx, OFFSET _aes_256_cfb1
	cmove	eax, ecx
	ret	0
_EVP_aes_256_cfb1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_cbc
_TEXT	SEGMENT
_EVP_aes_256_cbc PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_cbc
	mov	ecx, OFFSET _aes_256_cbc
	cmove	eax, ecx
	ret	0
_EVP_aes_256_cbc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_256_ecb
_TEXT	SEGMENT
_EVP_aes_256_ecb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1118
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_256_ecb
	mov	ecx, OFFSET _aes_256_ecb
	cmove	eax, ecx
	ret	0
_EVP_aes_256_ecb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_wrap
_TEXT	SEGMENT
_EVP_aes_192_wrap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 2009
	mov	eax, OFFSET _aes_192_wrap
; Line 2010
	ret	0
_EVP_aes_192_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_gcm
_TEXT	SEGMENT
_EVP_aes_192_gcm PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1605
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_gcm
	mov	ecx, OFFSET _aes_192_gcm
	cmove	eax, ecx
; Line 1607
	ret	0
_EVP_aes_192_gcm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_ccm
_TEXT	SEGMENT
_EVP_aes_192_ccm PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1917
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_ccm
	mov	ecx, OFFSET _aes_192_ccm
	cmove	eax, ecx
; Line 1918
	ret	0
_EVP_aes_192_ccm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_ctr
_TEXT	SEGMENT
_EVP_aes_192_ctr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_ctr
	mov	ecx, OFFSET _aes_192_ctr
	cmove	eax, ecx
	ret	0
_EVP_aes_192_ctr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_ofb
_TEXT	SEGMENT
_EVP_aes_192_ofb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_ofb
	mov	ecx, OFFSET _aes_192_ofb
	cmove	eax, ecx
	ret	0
_EVP_aes_192_ofb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_cfb128
_TEXT	SEGMENT
_EVP_aes_192_cfb128 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_cfb
	mov	ecx, OFFSET _aes_192_cfb
	cmove	eax, ecx
	ret	0
_EVP_aes_192_cfb128 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_cfb8
_TEXT	SEGMENT
_EVP_aes_192_cfb8 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_cfb8
	mov	ecx, OFFSET _aes_192_cfb8
	cmove	eax, ecx
	ret	0
_EVP_aes_192_cfb8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_cfb1
_TEXT	SEGMENT
_EVP_aes_192_cfb1 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_cfb1
	mov	ecx, OFFSET _aes_192_cfb1
	cmove	eax, ecx
	ret	0
_EVP_aes_192_cfb1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_cbc
_TEXT	SEGMENT
_EVP_aes_192_cbc PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_cbc
	mov	ecx, OFFSET _aes_192_cbc
	cmove	eax, ecx
	ret	0
_EVP_aes_192_cbc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_192_ecb
_TEXT	SEGMENT
_EVP_aes_192_ecb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1117
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_192_ecb
	mov	ecx, OFFSET _aes_192_ecb
	cmove	eax, ecx
	ret	0
_EVP_aes_192_ecb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_wrap
_TEXT	SEGMENT
_EVP_aes_128_wrap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1995
	mov	eax, OFFSET _aes_128_wrap
; Line 1996
	ret	0
_EVP_aes_128_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_xts
_TEXT	SEGMENT
_EVP_aes_128_xts PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1745
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_xts
	mov	ecx, OFFSET _aes_128_xts
	cmove	eax, ecx
; Line 1746
	ret	0
_EVP_aes_128_xts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_gcm
_TEXT	SEGMENT
_EVP_aes_128_gcm PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1602
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_gcm
	mov	ecx, OFFSET _aes_128_gcm
	cmove	eax, ecx
; Line 1604
	ret	0
_EVP_aes_128_gcm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_ccm
_TEXT	SEGMENT
_EVP_aes_128_ccm PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1915
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_ccm
	mov	ecx, OFFSET _aes_128_ccm
	cmove	eax, ecx
; Line 1916
	ret	0
_EVP_aes_128_ccm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_ctr
_TEXT	SEGMENT
_EVP_aes_128_ctr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_ctr
	mov	ecx, OFFSET _aes_128_ctr
	cmove	eax, ecx
	ret	0
_EVP_aes_128_ctr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_ofb
_TEXT	SEGMENT
_EVP_aes_128_ofb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_ofb
	mov	ecx, OFFSET _aes_128_ofb
	cmove	eax, ecx
	ret	0
_EVP_aes_128_ofb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_cfb128
_TEXT	SEGMENT
_EVP_aes_128_cfb128 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_cfb
	mov	ecx, OFFSET _aes_128_cfb
	cmove	eax, ecx
	ret	0
_EVP_aes_128_cfb128 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_cfb8
_TEXT	SEGMENT
_EVP_aes_128_cfb8 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_cfb8
	mov	ecx, OFFSET _aes_128_cfb8
	cmove	eax, ecx
	ret	0
_EVP_aes_128_cfb8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_cfb1
_TEXT	SEGMENT
_EVP_aes_128_cfb1 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_cfb1
	mov	ecx, OFFSET _aes_128_cfb1
	cmove	eax, ecx
	ret	0
_EVP_aes_128_cfb1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_cbc
_TEXT	SEGMENT
_EVP_aes_128_cbc PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_cbc
	mov	ecx, OFFSET _aes_128_cbc
	cmove	eax, ecx
	ret	0
_EVP_aes_128_cbc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_aes_128_ecb
_TEXT	SEGMENT
_EVP_aes_128_ecb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\e_aes.c
; Line 1116
	test	DWORD PTR _OPENSSL_ia32cap_P+4, 33554432 ; 02000000H
	mov	eax, OFFSET _aesni_128_ecb
	mov	ecx, OFFSET _aes_128_ecb
	cmove	eax, ecx
	ret	0
_EVP_aes_128_ecb ENDP
_TEXT	ENDS
END
