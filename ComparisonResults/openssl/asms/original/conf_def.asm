; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CONF_def_version
PUBLIC	??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@	; `string'
PUBLIC	??_C@_05LKMDHMJN@WIN32?$AA@			; `string'
;	COMDAT ??_C@_05LKMDHMJN@WIN32?$AA@
CONST	SEGMENT
??_C@_05LKMDHMJN@WIN32?$AA@ DB 'WIN32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@
CONST	SEGMENT
??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@ DB 'OpenSSL default', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_CONF_def_version DB 'CONF_def part of OpenSSL 1.0.2h  3 May 2016', 00H
CONST	ENDS
_DATA	SEGMENT
_CONF_type_default DW 08H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	010H
	DW	010H
	DW	00H
	DW	00H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	010H
	DW	0200H
	DW	040H
	DW	080H
	DW	00H
	DW	0200H
	DW	0200H
	DW	040H
	DW	00H
	DW	00H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	00H
	DW	0200H
	DW	00H
	DW	00H
	DW	00H
	DW	0200H
	DW	0200H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	00H
	DW	020H
	DW	00H
	DW	0200H
	DW	0100H
	DW	040H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	00H
	DW	0200H
	DW	00H
	DW	0200H
	DW	00H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
_CONF_type_win32 DW 08H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	010H
	DW	010H
	DW	00H
	DW	00H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	010H
	DW	0200H
	DW	0400H
	DW	00H
	DW	00H
	DW	0200H
	DW	0200H
	DW	00H
	DW	00H
	DW	00H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	0200H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	00H
	DW	0a00H
	DW	00H
	DW	00H
	DW	00H
	DW	0200H
	DW	0200H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	00H
	DW	00H
	DW	00H
	DW	0200H
	DW	0100H
	DW	00H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	04H
	DW	00H
	DW	0200H
	DW	00H
	DW	0200H
	DW	00H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
	DW	01000H
_default_method DD FLAT:??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@
	DD	FLAT:_def_create
	DD	FLAT:_def_init_default
	DD	FLAT:_def_destroy
	DD	FLAT:_def_destroy_data
	DD	FLAT:_def_load_bio
	DD	FLAT:_def_dump
	DD	FLAT:_def_is_number
	DD	FLAT:_def_to_int
	DD	FLAT:_def_load
_WIN32_method DD FLAT:??_C@_05LKMDHMJN@WIN32?$AA@
	DD	FLAT:_def_create
	DD	FLAT:_def_init_WIN32
	DD	FLAT:_def_destroy
	DD	FLAT:_def_destroy_data
	DD	FLAT:_def_load_bio
	DD	FLAT:_def_dump
	DD	FLAT:_def_is_number
	DD	FLAT:_def_to_int
	DD	FLAT:_def_load
_DATA	ENDS
PUBLIC	_NCONF_default
PUBLIC	_NCONF_WIN32
PUBLIC	??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	??_C@_05KFEICJBI@line?5?$AA@			; `string'
PUBLIC	??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@	; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BUF_MEM_new:PROC
EXTRN	_BUF_MEM_free:PROC
EXTRN	_BUF_MEM_grow:PROC
EXTRN	_BUF_MEM_grow_clean:PROC
EXTRN	_BUF_strdup:PROC
EXTRN	_BUF_strlcpy:PROC
EXTRN	_BIO_new_file:PROC
EXTRN	_BIO_free:PROC
EXTRN	_BIO_gets:PROC
EXTRN	_BIO_printf:PROC
EXTRN	_BIO_snprintf:PROC
EXTRN	_lh_doall_arg:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_peek_last_error:PROC
EXTRN	_ERR_add_error_data:PROC
EXTRN	_CONF_free:PROC
EXTRN	__CONF_new_section:PROC
EXTRN	__CONF_get_section:PROC
EXTRN	__CONF_add_string:PROC
EXTRN	__CONF_get_string:PROC
EXTRN	__CONF_new_data:PROC
EXTRN	__CONF_free_data:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@
CONST	SEGMENT
??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@ DB '[[%s]]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@ DB '[%s] %s=%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05KFEICJBI@line?5?$AA@
CONST	SEGMENT
??_C@_05KFEICJBI@line?5?$AA@ DB 'line ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ DB '.\crypto\conf\c'
	DB	'onf_def.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dump_value_LHASH_DOALL_ARG
_TEXT	SEGMENT
_arg1$ = 8						; size = 4
_arg2$ = 12						; size = 4
_dump_value_LHASH_DOALL_ARG PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 683
	mov	eax, DWORD PTR _arg1$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN4@dump_value
; Line 684
	push	DWORD PTR [eax+8]
	push	ecx
	push	DWORD PTR [eax]
	push	OFFSET ??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@
	push	DWORD PTR _arg2$[esp+12]
	call	_BIO_printf
	add	esp, 20					; 00000014H
; Line 689
	ret	0
$LN4@dump_value:
; Line 686
	push	DWORD PTR [eax]
	push	OFFSET ??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@
	push	DWORD PTR _arg2$[esp+4]
	call	_BIO_printf
	add	esp, 12					; 0000000cH
; Line 689
	ret	0
_dump_value_LHASH_DOALL_ARG ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dump_value_doall_arg
_TEXT	SEGMENT
_a$ = 8							; size = 4
_out$ = 12						; size = 4
_dump_value_doall_arg PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 683
	mov	eax, DWORD PTR _a$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN2@dump_value
; Line 684
	push	DWORD PTR [eax+8]
	push	ecx
	push	DWORD PTR [eax]
	push	OFFSET ??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@
	push	DWORD PTR _out$[esp+12]
	call	_BIO_printf
	add	esp, 20					; 00000014H
; Line 687
	ret	0
$LN2@dump_value:
; Line 686
	push	DWORD PTR [eax]
	push	OFFSET ??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@
	push	DWORD PTR _out$[esp+4]
	call	_BIO_printf
	add	esp, 12					; 0000000cH
; Line 687
	ret	0
_dump_value_doall_arg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_to_int
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_c$ = 12						; size = 1
_def_to_int PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 705
	movsx	eax, BYTE PTR _c$[esp-4]
	sub	eax, 48					; 00000030H
; Line 706
	ret	0
_def_to_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_is_number
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_c$ = 12						; size = 1
_def_is_number PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 700
	mov	eax, DWORD PTR _conf$[esp-4]
	movzx	ecx, BYTE PTR _c$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [eax+ecx*2]
	and	eax, 1
; Line 701
	ret	0
_def_is_number ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_dump
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_out$ = 12						; size = 4
_def_dump PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 693
	push	DWORD PTR _out$[esp-4]
	mov	eax, DWORD PTR _conf$[esp]
	push	OFFSET _dump_value_LHASH_DOALL_ARG
	push	DWORD PTR [eax+8]
	call	_lh_doall_arg
	add	esp, 12					; 0000000cH
; Line 695
	mov	eax, 1
; Line 696
	ret	0
_def_dump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_load_bio
_TEXT	SEGMENT
_v$1$ = -68						; size = 4
_line$GSCopy$1$ = -64					; size = 4
_buff$1$ = -60						; size = 4
_section$ = -56						; size = 4
_again$1$ = -52						; size = 4
_psection$2$ = -48					; size = 4
_eline$1$ = -44						; size = 4
_pname$1$ = -40						; size = 4
_sv$1$ = -36						; size = 4
_in$GSCopy$1$ = -28					; size = 4
_h$1$ = -24						; size = 4
_btmp$ = -20						; size = 13
__$ArrayPad$ = -4					; size = 4
_conf$ = 8						; size = 4
_in$ = 12						; size = 4
_line$ = 16						; size = 4
_def_load_bio PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 208
	mov	eax, 68					; 00000044H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+68], eax
	mov	eax, DWORD PTR _in$[esp+64]
	push	ebx
	mov	ebx, DWORD PTR _conf$[esp+68]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _line$[esp+80]
; Line 215
	xor	ebp, ebp
	mov	DWORD PTR _in$GSCopy$1$[esp+84], eax
; Line 217
	xor	esi, esi
; Line 221
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR _line$GSCopy$1$[esp+84], edi
	mov	DWORD PTR _eline$1$[esp+84], ebp
	mov	DWORD PTR _h$1$[esp+84], eax
; Line 223
	call	_BUF_MEM_new
	mov	DWORD PTR _buff$1$[esp+84], eax
	test	eax, eax
	jne	SHORT $LN11@def_load_b
; Line 224
	push	224					; 000000e0H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	7
	push	121					; 00000079H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 225
	jmp	$LN47@def_load_b
$LN11@def_load_b:
; Line 228
	push	OFFSET ??_C@_07DLHCIBDH@default?$AA@
	call	_BUF_strdup
	mov	ebp, eax
	add	esp, 4
	mov	DWORD PTR _section$[esp+84], ebp
; Line 229
	test	ebp, ebp
	jne	SHORT $LN12@def_load_b
; Line 230
	push	230					; 000000e6H
$LN107@def_load_b:
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	65					; 00000041H
	push	121					; 00000079H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 231
	jmp	$err$110
$LN12@def_load_b:
; Line 234
	push	ebx
	call	__CONF_new_data
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN13@def_load_b
; Line 235
	push	235					; 000000ebH
; Line 236
	jmp	SHORT $LN107@def_load_b
$LN13@def_load_b:
; Line 239
	push	ebp
	push	ebx
	call	__CONF_new_section
	add	esp, 8
	mov	DWORD PTR _sv$1$[esp+84], eax
; Line 240
	test	eax, eax
	jne	SHORT $LN14@def_load_b
; Line 241
	push	241					; 000000f1H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	103					; 00000067H
	push	121					; 00000079H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	jmp	$err$110
$LN14@def_load_b:
; Line 248
	push	512					; 00000200H
	push	DWORD PTR _buff$1$[esp+88]
	xor	edi, edi
	xor	ebp, ebp
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	je	$LN62@def_load_b
	npad	6
$LL2@def_load_b:
; Line 252
	mov	eax, DWORD PTR _buff$1$[esp+84]
; Line 254
	push	511					; 000001ffH
	mov	esi, DWORD PTR [eax+4]
	add	esi, edi
	push	esi
	push	DWORD PTR _in$GSCopy$1$[esp+92]
	mov	BYTE PTR [esi], 0
	call	_BIO_gets
; Line 256
	mov	eax, esi
	mov	BYTE PTR [esi+511], 0
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL87@def_load_b:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL87@def_load_b
	sub	eax, edx
	mov	edx, eax
; Line 257
	jne	SHORT $LN16@def_load_b
	test	ebp, ebp
	je	$LN63@def_load_b
$LN16@def_load_b:
; Line 259
	xor	ebp, ebp
	mov	DWORD PTR _again$1$[esp+84], ebp
; Line 260
	test	eax, eax
	jle	SHORT $LN95@def_load_b
	npad	1
$LL5@def_load_b:
; Line 261
	mov	cl, BYTE PTR [esi+eax-1]
	cmp	cl, 13					; 0000000dH
	je	SHORT $LN17@def_load_b
	cmp	cl, 10					; 0000000aH
	jne	SHORT $LN95@def_load_b
$LN17@def_load_b:
; Line 264
	dec	eax
	test	eax, eax
	jg	SHORT $LL5@def_load_b
$LN95@def_load_b:
; Line 269
	test	edx, edx
	je	SHORT $LN19@def_load_b
	cmp	eax, edx
	jne	SHORT $LN19@def_load_b
; Line 270
	mov	ebp, 1
	mov	DWORD PTR _again$1$[esp+84], ebp
	jmp	SHORT $LN20@def_load_b
$LN19@def_load_b:
; Line 273
	inc	DWORD PTR _eline$1$[esp+84]
	mov	BYTE PTR [eax+esi], 0
$LN20@def_load_b:
; Line 279
	add	edi, eax
; Line 281
	xor	esi, esi
	mov	DWORD PTR _v$1$[esp+84], esi
; Line 283
	cmp	edi, 1
	jl	SHORT $LN22@def_load_b
; Line 288
	mov	eax, DWORD PTR _buff$1$[esp+84]
; Line 289
	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [eax+4]
	dec	ecx
	add	ecx, edi
	movzx	eax, BYTE PTR [ecx]
	test	BYTE PTR [edx+eax*2], 32		; 00000020H
	je	SHORT $LN22@def_load_b
	cmp	edi, 1
	jle	SHORT $LN23@def_load_b
	movzx	eax, BYTE PTR [ecx-1]
	test	BYTE PTR [edx+eax*2], 32		; 00000020H
	jne	SHORT $LN22@def_load_b
$LN23@def_load_b:
; Line 290
	dec	edi
; Line 291
	mov	ebp, 1
; Line 294
	jmp	$LN27@def_load_b
$LN22@def_load_b:
	test	ebp, ebp
	jne	$LN27@def_load_b
; Line 297
	mov	eax, DWORD PTR _buff$1$[esp+84]
	xor	edi, edi
	mov	esi, DWORD PTR [eax+4]
; Line 299
	push	esi
	push	ebx
	call	_clear_comments
; Line 300
	push	esi
	push	ebx
	call	_eat_ws
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 301
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR _pname$1$[esp+84], ebp
	mov	dl, BYTE PTR [ebp]
	movzx	ecx, dl
	test	BYTE PTR [eax+ecx*2], 8
	jne	$LN99@def_load_b
; Line 303
	cmp	dl, 91					; 0000005bH
	jne	$LN26@def_load_b
; Line 306
	lea	eax, DWORD PTR [ebp+1]
; Line 307
	push	eax
	push	ebx
	call	_eat_ws
	mov	ebp, eax
; Line 310
	push	ebp
	push	ebx
	mov	edi, ebp
	call	_eat_alpha_numeric
	mov	esi, eax
; Line 311
	push	esi
	push	ebx
	call	_eat_ws
	add	esp, 24					; 00000018H
; Line 312
	mov	cl, BYTE PTR [eax]
	cmp	cl, 93					; 0000005dH
	je	SHORT $LN28@def_load_b
$again$111:
; Line 313
	test	cl, cl
	je	$LN29@def_load_b
	cmp	edi, eax
	je	$LN29@def_load_b
; Line 310
	push	eax
	push	ebx
; Line 314
	mov	edi, eax
	call	_eat_alpha_numeric
	mov	esi, eax
	push	esi
	push	ebx
	call	_eat_ws
	add	esp, 16					; 00000010H
	mov	cl, BYTE PTR [eax]
	cmp	cl, 93					; 0000005dH
	jne	SHORT $again$111
$LN28@def_load_b:
; Line 322
	push	ebp
	lea	eax, DWORD PTR _section$[esp+88]
	mov	BYTE PTR [esi], 0
	push	eax
	push	0
	push	ebx
	call	_str_copy
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN97@def_load_b
; Line 324
	mov	esi, DWORD PTR _section$[esp+84]
	push	esi
	push	ebx
	call	__CONF_get_section
	mov	ebp, eax
	add	esp, 8
	mov	DWORD PTR _sv$1$[esp+84], ebp
	test	ebp, ebp
	jne	SHORT $LN98@def_load_b
; Line 325
	push	esi
	push	ebx
	call	__CONF_new_section
	mov	ebp, eax
	add	esp, 8
	mov	DWORD PTR _sv$1$[esp+84], ebp
; Line 326
	test	ebp, ebp
	je	$LN65@def_load_b
$LN98@def_load_b:
; Line 331
	mov	esi, DWORD PTR _v$1$[esp+84]
	mov	edi, esi
	jmp	$LN101@def_load_b
$LN26@def_load_b:
; Line 334
	xor	eax, eax
; Line 335
	push	ebp
	push	ebx
	mov	DWORD PTR _psection$2$[esp+92], eax
	call	_eat_alpha_numeric
	mov	edi, eax
	add	esp, 8
; Line 336
	cmp	BYTE PTR [edi], 58			; 0000003aH
	jne	SHORT $LN33@def_load_b
	cmp	BYTE PTR [edi+1], 58			; 0000003aH
	jne	SHORT $LN33@def_load_b
; Line 337
	mov	BYTE PTR [edi], 0
; Line 338
	add	edi, 2
; Line 339
	mov	DWORD PTR _psection$2$[esp+84], ebp
; Line 340
	mov	ebp, edi
; Line 341
	push	edi
	push	ebx
	mov	DWORD PTR _pname$1$[esp+92], ebp
	call	_eat_alpha_numeric
	add	esp, 8
	mov	edi, eax
$LN33@def_load_b:
; Line 343
	push	edi
	push	ebx
	call	_eat_ws
	mov	esi, eax
	add	esp, 8
; Line 344
	cmp	BYTE PTR [esi], 61			; 0000003dH
	jne	$LN66@def_load_b
; Line 349
	inc	esi
	mov	BYTE PTR [edi], 0
; Line 350
	push	esi
	push	ebx
	call	_eat_ws
; Line 351
	mov	ecx, DWORD PTR [ebx+4]
	mov	edi, eax
	movzx	eax, BYTE PTR [esi]
	add	esp, 8
	test	BYTE PTR [ecx+eax*2], 8
	jne	SHORT $LN8@def_load_b
$LL7@def_load_b:
	movzx	eax, BYTE PTR [esi+1]
; Line 352
	inc	esi
	test	BYTE PTR [ecx+eax*2], 8
	je	SHORT $LL7@def_load_b
$LN8@def_load_b:
; Line 353
	dec	esi
; Line 354
	cmp	esi, edi
	je	SHORT $LN96@def_load_b
$LL9@def_load_b:
	movzx	eax, BYTE PTR [esi]
	test	BYTE PTR [ecx+eax*2], 16		; 00000010H
	je	SHORT $LN96@def_load_b
; Line 355
	dec	esi
	cmp	esi, edi
	jne	SHORT $LL9@def_load_b
$LN96@def_load_b:
; Line 359
	push	359					; 00000167H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	12					; 0000000cH
	mov	BYTE PTR [esi+1], 0
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v$1$[esp+84], esi
	test	esi, esi
	je	$LN67@def_load_b
; Line 363
	mov	eax, DWORD PTR _psection$2$[esp+84]
; Line 365
	mov	ecx, ebp
	test	eax, eax
	cmove	eax, DWORD PTR _section$[esp+84]
	mov	DWORD PTR _psection$2$[esp+84], eax
	lea	edx, DWORD PTR [ecx+1]
	npad	4
$LL88@def_load_b:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL88@def_load_b
	sub	ecx, edx
	push	365					; 0000016dH
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	call	_CRYPTO_malloc
	mov	edx, eax
; Line 366
	mov	DWORD PTR [esi+8], 0
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+4], edx
	lea	ebp, DWORD PTR [esi+8]
; Line 367
	test	edx, edx
	je	$LN68@def_load_b
; Line 371
	mov	ecx, DWORD PTR _pname$1$[esp+84]
	lea	esi, DWORD PTR [ecx+1]
	npad	3
$LL89@def_load_b:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL89@def_load_b
	sub	ecx, esi
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	push	DWORD PTR _pname$1$[esp+88]
	push	edx
	call	_BUF_strlcpy
; Line 372
	push	edi
	push	ebp
	mov	ebp, DWORD PTR _psection$2$[esp+104]
	push	ebp
	push	ebx
	call	_str_copy
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN97@def_load_b
; Line 375
	mov	ecx, DWORD PTR _section$[esp+84]
	mov	eax, ebp
$LL90@def_load_b:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN91@def_load_b
	test	dl, dl
	je	SHORT $LN92@def_load_b
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN91@def_load_b
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL90@def_load_b
$LN92@def_load_b:
	xor	eax, eax
	jmp	SHORT $LN93@def_load_b
$LN91@def_load_b:
	sbb	eax, eax
	or	eax, 1
$LN93@def_load_b:
	test	eax, eax
	je	SHORT $LN39@def_load_b
; Line 377
	push	ebp
	push	ebx
	call	__CONF_get_section
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN40@def_load_b
; Line 378
	push	ebp
	push	ebx
	call	__CONF_new_section
	add	esp, 8
; Line 379
	test	eax, eax
	jne	SHORT $LN40@def_load_b
; Line 380
	push	381					; 0000017dH
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	103					; 00000067H
	jmp	$LN104@def_load_b
$LN39@def_load_b:
; Line 385
	mov	eax, DWORD PTR _sv$1$[esp+84]
$LN40@def_load_b:
; Line 387
	mov	esi, DWORD PTR _v$1$[esp+84]
	push	esi
	push	eax
	push	ebx
	call	__CONF_add_string
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN71@def_load_b
; Line 405
	xor	esi, esi
	mov	edi, esi
	jmp	SHORT $LN101@def_load_b
$LN99@def_load_b:
	mov	esi, edi
$LN101@def_load_b:
	mov	ebp, DWORD PTR _again$1$[esp+84]
$LN27@def_load_b:
; Line 248
	lea	eax, DWORD PTR [edi+512]
	push	eax
	push	DWORD PTR _buff$1$[esp+88]
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	jne	$LL2@def_load_b
$LN62@def_load_b:
; Line 249
	push	249					; 000000f9H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	7
; Line 388
	push	121					; 00000079H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	jmp	SHORT $LN102@def_load_b
$LN63@def_load_b:
; Line 409
	push	DWORD PTR _buff$1$[esp+84]
	call	_BUF_MEM_free
; Line 410
	mov	ebp, DWORD PTR _section$[esp+88]
	add	esp, 4
	test	ebp, ebp
	je	SHORT $LN45@def_load_b
; Line 411
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$LN45@def_load_b:
; Line 412
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 435
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN29@def_load_b:
; Line 317
	push	318					; 0000013eH
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	100					; 00000064H
$LN104@def_load_b:
; Line 327
	push	121					; 00000079H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN97@def_load_b:
	mov	esi, DWORD PTR _v$1$[esp+84]
$LN102@def_load_b:
	mov	edi, DWORD PTR _line$GSCopy$1$[esp+84]
$err$110:
; Line 415
	push	DWORD PTR _buff$1$[esp+84]
	call	_BUF_MEM_free
; Line 416
	mov	eax, DWORD PTR _section$[esp+88]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN100@def_load_b
; Line 417
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN100@def_load_b:
	mov	ebp, DWORD PTR _eline$1$[esp+84]
$LN47@def_load_b:
; Line 418
	test	edi, edi
	je	SHORT $LN48@def_load_b
; Line 419
	mov	DWORD PTR [edi], ebp
$LN48@def_load_b:
; Line 420
	push	ebp
	push	OFFSET ??_C@_03JALODAI@?$CFld?$AA@
	lea	eax, DWORD PTR _btmp$[esp+92]
	push	13					; 0000000dH
	push	eax
	call	_BIO_snprintf
; Line 421
	lea	eax, DWORD PTR _btmp$[esp+100]
	push	eax
	push	OFFSET ??_C@_05KFEICJBI@line?5?$AA@
	push	2
	call	_ERR_add_error_data
; Line 422
	mov	eax, DWORD PTR [ebx+8]
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _h$1$[esp+84], eax
	je	SHORT $LN49@def_load_b
	test	eax, eax
	je	SHORT $LN49@def_load_b
; Line 423
	push	eax
	call	_CONF_free
	add	esp, 4
; Line 424
	mov	DWORD PTR [ebx+8], 0
$LN49@def_load_b:
; Line 426
	test	esi, esi
	je	SHORT $LN53@def_load_b
; Line 427
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN51@def_load_b
; Line 428
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN51@def_load_b:
; Line 429
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN52@def_load_b
; Line 430
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN52@def_load_b:
; Line 432
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN53@def_load_b:
; Line 435
	mov	ecx, DWORD PTR __$ArrayPad$[esp+84]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN65@def_load_b:
; Line 327
	push	328					; 00000148H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	103					; 00000067H
; Line 329
	jmp	$LN104@def_load_b
$LN71@def_load_b:
; Line 388
	push	388					; 00000184H
$LN105@def_load_b:
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	65					; 00000041H
	push	121					; 00000079H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	jmp	$LN102@def_load_b
$LN68@def_load_b:
; Line 368
	push	368					; 00000170H
; Line 369
	jmp	SHORT $LN105@def_load_b
$LN67@def_load_b:
; Line 360
	push	360					; 00000168H
; Line 361
	jmp	SHORT $LN105@def_load_b
$LN66@def_load_b:
; Line 345
	push	345					; 00000159H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	101					; 00000065H
; Line 346
	jmp	$LN104@def_load_b
_def_load_bio ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_load
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_name$ = 12						; size = 4
_line$ = 16						; size = 4
_def_load PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 184
	push	edi
; Line 191
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	DWORD PTR _name$[esp+4]
	call	_BIO_new_file
	mov	edi, eax
	add	esp, 8
; Line 193
	test	edi, edi
	jne	SHORT $LN2@def_load
; Line 194
	call	_ERR_peek_last_error
	and	eax, 4095				; 00000fffH
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN3@def_load
; Line 195
	push	195					; 000000c3H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	114					; 00000072H
; Line 197
	push	120					; 00000078H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 198
	xor	eax, eax
	pop	edi
; Line 205
	ret	0
$LN3@def_load:
; Line 197
	push	197					; 000000c5H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	2
	push	120					; 00000078H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 198
	xor	eax, eax
	pop	edi
; Line 205
	ret	0
$LN2@def_load:
	push	esi
; Line 201
	push	DWORD PTR _line$[esp+4]
	push	edi
	push	DWORD PTR _conf$[esp+12]
	call	_def_load_bio
; Line 202
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 16					; 00000010H
; Line 204
	mov	eax, esi
	pop	esi
	pop	edi
; Line 205
	ret	0
_def_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_destroy_data
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_def_destroy_data PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 177
	mov	eax, DWORD PTR _conf$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@def_destro
; Line 181
	ret	0
$LN2@def_destro:
; Line 179
	push	eax
	call	__CONF_free_data
	add	esp, 4
; Line 180
	mov	eax, 1
; Line 181
	ret	0
_def_destroy_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_destroy
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_def_destroy PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 167
	push	esi
; Line 177
	mov	esi, DWORD PTR _conf$[esp]
	test	esi, esi
	je	SHORT $LN2@def_destro
; Line 179
	push	esi
	call	__CONF_free_data
; Line 169
	push	esi
	call	_CRYPTO_free
	add	esp, 8
; Line 170
	mov	eax, 1
	pop	esi
; Line 173
	ret	0
$LN2@def_destro:
; Line 172
	xor	eax, eax
	pop	esi
; Line 173
	ret	0
_def_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_init_WIN32
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_def_init_WIN32 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 156
	mov	eax, DWORD PTR _conf$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@def_init_W
; Line 164
	ret	0
$LN2@def_init_W:
; Line 159
	mov	DWORD PTR [eax], OFFSET _WIN32_method
; Line 160
	mov	DWORD PTR [eax+4], OFFSET _CONF_type_win32
; Line 161
	mov	DWORD PTR [eax+8], 0
; Line 163
	mov	eax, 1
; Line 164
	ret	0
_def_init_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_init_default
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_def_init_default PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 144
	mov	eax, DWORD PTR _conf$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@def_init_d
; Line 152
	ret	0
$LN2@def_init_d:
; Line 147
	mov	DWORD PTR [eax], OFFSET _default_method
; Line 148
	mov	DWORD PTR [eax+4], OFFSET _CONF_type_default
; Line 149
	mov	DWORD PTR [eax+8], 0
; Line 151
	mov	eax, 1
; Line 152
	ret	0
_def_init_default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _def_create
_TEXT	SEGMENT
_meth$ = 8						; size = 4
_def_create PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 130
	push	esi
; Line 133
	push	133					; 00000085H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	16					; 00000010H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 134
	test	esi, esi
	je	SHORT $LN3@def_create
; Line 135
	mov	ecx, DWORD PTR _meth$[esp]
	push	esi
	mov	ecx, DWORD PTR [ecx+8]
	call	ecx
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@def_create
; Line 136
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 139
	xor	eax, eax
	pop	esi
; Line 140
	ret	0
$LN5@def_create:
; Line 139
	mov	eax, esi
$LN3@def_create:
	pop	esi
; Line 140
	ret	0
_def_create ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _scan_dquote
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_p$ = 12						; size = 4
_scan_dquote PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 663
	mov	eax, DWORD PTR _p$[esp-4]
; Line 666
	mov	ecx, DWORD PTR _conf$[esp-4]
	push	esi
	push	edi
	movsx	esi, BYTE PTR [eax]
	inc	eax
	mov	edi, DWORD PTR [ecx+4]
	mov	dl, BYTE PTR [eax]
	movzx	ecx, dl
	test	BYTE PTR [edi+ecx*2], 8
	jne	SHORT $LN14@scan_dquot
	npad	4
$LL2@scan_dquot:
; Line 667
	movsx	ecx, dl
	cmp	ecx, esi
	jne	SHORT $LN6@scan_dquot
; Line 668
	movsx	ecx, BYTE PTR [eax+1]
	lea	edx, DWORD PTR [eax+1]
	cmp	ecx, esi
	jne	SHORT $LN14@scan_dquot
; Line 669
	mov	eax, edx
$LN6@scan_dquot:
; Line 666
	mov	dl, BYTE PTR [eax+1]
; Line 674
	inc	eax
	movzx	ecx, dl
	test	BYTE PTR [edi+ecx*2], 8
	je	SHORT $LL2@scan_dquot
$LN14@scan_dquot:
; Line 676
	movsx	ecx, BYTE PTR [eax]
	pop	edi
	cmp	ecx, esi
	pop	esi
	jne	SHORT $LN7@scan_dquot
; Line 677
	inc	eax
$LN7@scan_dquot:
; Line 679
	ret	0
_scan_dquote ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _scan_quote
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_p$ = 12						; size = 4
_scan_quote PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 645
	mov	eax, DWORD PTR _p$[esp-4]
; Line 648
	mov	ecx, DWORD PTR _conf$[esp-4]
	push	ebx
	push	esi
	mov	bl, BYTE PTR [eax+1]
	mov	esi, DWORD PTR [ecx+4]
	push	edi
	movsx	edi, BYTE PTR [eax]
	inc	eax
	movzx	ecx, bl
	test	BYTE PTR [esi+ecx*2], 8
	lea	edx, DWORD PTR [esi+ecx*2]
	jne	SHORT $LN13@scan_quote
$LL2@scan_quote:
	movsx	ecx, bl
	cmp	ecx, edi
	je	SHORT $LN13@scan_quote
; Line 649
	test	BYTE PTR [edx], 32			; 00000020H
	je	SHORT $LN5@scan_quote
; Line 651
	movzx	ecx, BYTE PTR [eax+1]
	inc	eax
	test	BYTE PTR [esi+ecx*2], 8
	jne	SHORT $LN1@scan_quote
$LN5@scan_quote:
; Line 648
	mov	bl, BYTE PTR [eax+1]
; Line 654
	inc	eax
	movzx	ecx, bl
	test	BYTE PTR [esi+ecx*2], 8
	lea	edx, DWORD PTR [esi+ecx*2]
	je	SHORT $LL2@scan_quote
$LN13@scan_quote:
; Line 656
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, edi
	jne	SHORT $LN1@scan_quote
; Line 657
	inc	eax
$LN1@scan_quote:
	pop	edi
	pop	esi
	pop	ebx
; Line 659
	ret	0
_scan_quote ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _str_copy
_TEXT	SEGMENT
_buf$1$ = -20						; size = 4
_rp$1$ = -16						; size = 4
_q$3$ = -16						; size = 4
_r$1$ = -12						; size = 4
_cp$1$ = -12						; size = 4
_rrp$1$ = -8						; size = 4
_rr$1$ = -4						; size = 4
_conf$ = 8						; size = 4
_section$ = 12						; size = 4
_pto$ = 16						; size = 4
_from$ = 20						; size = 4
_str_copy PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 475
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
	push	edi
; Line 476
	mov	DWORD PTR _rr$1$[esp+28], 0
	xor	edi, edi
; Line 480
	call	_BUF_MEM_new
	mov	ebx, eax
	mov	DWORD PTR _buf$1$[esp+28], ebx
	test	ebx, ebx
	jne	SHORT $LN15@str_copy
	pop	edi
	pop	ebx
; Line 621
	add	esp, 20					; 00000014H
	ret	0
$LN15@str_copy:
	push	esi
; Line 483
	mov	esi, DWORD PTR _from$[esp+28]
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
$LL88@str_copy:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL88@str_copy
	sub	ecx, edx
	push	ebp
	lea	eax, DWORD PTR [ecx+1]
; Line 484
	push	eax
	push	ebx
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	je	$LN93@str_copy
$LN98@str_copy:
	mov	ebp, 9
	npad	7
$LL2@str_copy:
; Line 488
	mov	eax, DWORD PTR _conf$[esp+32]
	mov	cl, BYTE PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	movzx	eax, cl
	movzx	eax, WORD PTR [edx+eax*2]
	test	al, 64					; 00000040H
	je	SHORT $LN17@str_copy
; Line 490
	inc	esi
	movsx	ebp, cl
; Line 491
	mov	cl, BYTE PTR [esi]
	movzx	eax, cl
	movzx	ebx, WORD PTR [edx+eax*2]
	test	bl, 8
	jne	SHORT $LN90@str_copy
$LL5@str_copy:
	movsx	eax, cl
	cmp	eax, ebp
	je	SHORT $LN90@str_copy
; Line 492
	test	bl, 32					; 00000020H
	je	SHORT $LN20@str_copy
; Line 494
	mov	cl, BYTE PTR [esi+1]
	inc	esi
	movzx	eax, cl
	test	BYTE PTR [edx+eax*2], 8
	jne	SHORT $LN90@str_copy
$LN20@str_copy:
; Line 497
	mov	eax, DWORD PTR _buf$1$[esp+36]
	inc	esi
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [edi+eax], cl
	inc	edi
	mov	eax, DWORD PTR _conf$[esp+32]
	mov	cl, BYTE PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	movzx	eax, cl
	movzx	ebx, WORD PTR [edx+eax*2]
	test	bl, 8
	je	SHORT $LL5@str_copy
$LN90@str_copy:
; Line 499
	movsx	eax, BYTE PTR [esi]
	mov	ebx, DWORD PTR _buf$1$[esp+36]
	cmp	eax, ebp
	mov	ebp, 9
	jne	SHORT $LL2@str_copy
; Line 500
	inc	esi
; Line 501
	jmp	SHORT $LL2@str_copy
$LN17@str_copy:
	test	eax, 1024				; 00000400H
	je	SHORT $LN22@str_copy
; Line 504
	mov	bl, BYTE PTR [esi+1]
	inc	esi
	movzx	eax, bl
	movsx	ebp, cl
	test	BYTE PTR [edx+eax*2], 8
	jne	SHORT $LN91@str_copy
	npad	6
$LL7@str_copy:
; Line 505
	movsx	eax, bl
	cmp	eax, ebp
	jne	SHORT $LN26@str_copy
; Line 506
	movsx	eax, BYTE PTR [esi+1]
	lea	ecx, DWORD PTR [esi+1]
	cmp	eax, ebp
	jne	SHORT $LN91@str_copy
; Line 507
	mov	esi, ecx
$LN26@str_copy:
; Line 512
	mov	eax, DWORD PTR _buf$1$[esp+36]
	mov	ecx, DWORD PTR [eax+4]
	mov	al, BYTE PTR [esi]
	inc	esi
	mov	BYTE PTR [edi+ecx], al
	inc	edi
	mov	eax, DWORD PTR _conf$[esp+32]
	mov	bl, BYTE PTR [esi]
	movzx	ecx, bl
	mov	eax, DWORD PTR [eax+4]
	test	BYTE PTR [eax+ecx*2], 8
	je	SHORT $LL7@str_copy
$LN91@str_copy:
; Line 514
	movsx	eax, BYTE PTR [esi]
	mov	ebx, DWORD PTR _buf$1$[esp+36]
	cmp	eax, ebp
	mov	ebp, 9
	jne	$LL2@str_copy
; Line 515
	inc	esi
; Line 516
	jmp	$LL2@str_copy
$LN22@str_copy:
	test	al, 32					; 00000020H
	je	SHORT $LN28@str_copy
; Line 518
	mov	cl, BYTE PTR [esi+1]
	add	esi, 2
; Line 519
	movzx	eax, cl
	test	BYTE PTR [edx+eax*2], 8
	jne	$LN65@str_copy
; Line 521
	cmp	cl, 114					; 00000072H
	jne	SHORT $LN32@str_copy
; Line 529
	mov	eax, DWORD PTR [ebx+4]
	mov	dl, 13					; 0000000dH
	mov	BYTE PTR [edi+eax], dl
	inc	edi
	jmp	$LL2@str_copy
$LN32@str_copy:
; Line 523
	cmp	cl, 110					; 0000006eH
	jne	SHORT $LN34@str_copy
; Line 529
	mov	eax, DWORD PTR [ebx+4]
	mov	dl, 10					; 0000000aH
	mov	BYTE PTR [edi+eax], dl
	inc	edi
	jmp	$LL2@str_copy
$LN34@str_copy:
; Line 525
	cmp	cl, 98					; 00000062H
	jne	SHORT $LN36@str_copy
; Line 529
	mov	eax, DWORD PTR [ebx+4]
	mov	dl, 8
	mov	BYTE PTR [edi+eax], dl
	inc	edi
	jmp	$LL2@str_copy
$LN36@str_copy:
	mov	eax, DWORD PTR [ebx+4]
	cmp	cl, 116					; 00000074H
	movzx	edx, cl
	cmove	edx, ebp
	mov	BYTE PTR [edi+eax], dl
	inc	edi
	jmp	$LL2@str_copy
$LN28@str_copy:
; Line 530
	test	al, 8
	jne	$LN65@str_copy
; Line 532
	cmp	cl, 36					; 00000024H
	jne	$LN41@str_copy
; Line 534
	xor	eax, eax
; Line 535
	lea	ebp, DWORD PTR [esi+1]
	mov	DWORD PTR _rrp$1$[esp+36], eax
; Line 536
	mov	al, BYTE PTR [ebp]
	cmp	al, 123					; 0000007bH
	jne	SHORT $LN43@str_copy
; Line 537
	mov	DWORD PTR _q$3$[esp+36], 125		; 0000007dH
; Line 544
	inc	ebp
	jmp	SHORT $LN47@str_copy
$LN43@str_copy:
; Line 538
	cmp	al, 40					; 00000028H
	jne	SHORT $LN45@str_copy
; Line 539
	mov	DWORD PTR _q$3$[esp+36], 41		; 00000029H
; Line 544
	inc	ebp
	jmp	SHORT $LN47@str_copy
$LN45@str_copy:
; Line 541
	xor	ecx, ecx
	mov	DWORD PTR _q$3$[esp+36], ecx
$LN47@str_copy:
; Line 545
	mov	eax, DWORD PTR _section$[esp+32]
; Line 547
	mov	ecx, 263				; 00000107H
	mov	DWORD PTR _cp$1$[esp+36], eax
	mov	ebx, ebp
	movzx	eax, BYTE PTR [ebp]
	test	WORD PTR [edx+eax*2], cx
	mov	ecx, DWORD PTR _q$3$[esp+36]
	je	SHORT $LN10@str_copy
	mov	ecx, 263				; 00000107H
$LL9@str_copy:
	movzx	eax, BYTE PTR [ebx+1]
; Line 548
	inc	ebx
	test	WORD PTR [edx+eax*2], cx
	jne	SHORT $LL9@str_copy
	mov	ecx, DWORD PTR _q$3$[esp+36]
$LN10@str_copy:
; Line 549
	cmp	BYTE PTR [ebx], 58			; 0000003aH
	jne	SHORT $LN95@str_copy
	cmp	BYTE PTR [ebx+1], 58			; 0000003aH
	jne	SHORT $LN95@str_copy
; Line 556
	mov	eax, DWORD PTR _conf$[esp+32]
	mov	edx, 263				; 00000107H
	mov	BYTE PTR [ebx], 0
	mov	DWORD PTR _rrp$1$[esp+36], ebx
	add	ebx, 2
	mov	DWORD PTR _cp$1$[esp+36], ebp
	mov	ebp, ebx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _rr$1$[esp+36], 58		; 0000003aH
	movzx	eax, BYTE PTR [ebx]
	test	WORD PTR [ecx+eax*2], dx
	mov	edx, DWORD PTR _cp$1$[esp+36]
	je	$LN92@str_copy
	mov	edx, 263				; 00000107H
	npad	6
$LL11@str_copy:
	movzx	eax, BYTE PTR [ebx+1]
; Line 557
	inc	ebx
	test	WORD PTR [ecx+eax*2], dx
	jne	SHORT $LL11@str_copy
	mov	ecx, DWORD PTR _q$3$[esp+36]
$LN95@str_copy:
	mov	edx, DWORD PTR _cp$1$[esp+36]
$LN12@str_copy:
; Line 559
	movsx	eax, BYTE PTR [ebx]
	mov	DWORD PTR _r$1$[esp+36], eax
; Line 560
	mov	BYTE PTR [ebx], 0
; Line 561
	mov	DWORD PTR _rp$1$[esp+36], ebx
; Line 562
	test	ecx, ecx
	je	SHORT $LN49@str_copy
; Line 563
	cmp	eax, ecx
	jne	$LN67@str_copy
; Line 567
	inc	ebx
$LN49@str_copy:
; Line 579
	push	ebp
	push	edx
	push	DWORD PTR _conf$[esp+40]
	call	__CONF_get_string
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 580
	mov	eax, DWORD PTR _rrp$1$[esp+36]
	test	eax, eax
	je	SHORT $LN51@str_copy
; Line 581
	mov	ecx, DWORD PTR _rr$1$[esp+36]
	mov	BYTE PTR [eax], cl
$LN51@str_copy:
; Line 582
	mov	ecx, DWORD PTR _rp$1$[esp+36]
	mov	eax, DWORD PTR _r$1$[esp+36]
	mov	BYTE PTR [ecx], al
; Line 583
	test	ebp, ebp
	je	$LN68@str_copy
; Line 587
	mov	ecx, ebp
	lea	edx, DWORD PTR [ecx+1]
$LL89@str_copy:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL89@str_copy
	sub	ecx, edx
	sub	ecx, ebx
	add	ecx, esi
	mov	esi, DWORD PTR _buf$1$[esp+36]
	add	ecx, DWORD PTR [esi]
	push	ecx
	push	esi
	call	_BUF_MEM_grow_clean
	add	esp, 8
	test	eax, eax
	je	SHORT $LN69@str_copy
; Line 592
	mov	cl, BYTE PTR [ebp]
	test	cl, cl
	je	SHORT $LN14@str_copy
	sub	ebp, edi
	npad	3
$LL13@str_copy:
; Line 593
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [edi+eax], cl
	inc	edi
	mov	cl, BYTE PTR [edi+ebp]
	test	cl, cl
	jne	SHORT $LL13@str_copy
$LN14@str_copy:
; Line 607
	mov	ecx, DWORD PTR _rp$1$[esp+36]
	mov	esi, ebx
	mov	eax, DWORD PTR _r$1$[esp+36]
; Line 608
	mov	ebx, DWORD PTR _buf$1$[esp+36]
	mov	BYTE PTR [ecx], al
	jmp	$LN98@str_copy
$LN92@str_copy:
	mov	ecx, DWORD PTR _q$3$[esp+36]
	jmp	$LN12@str_copy
$LN41@str_copy:
; Line 609
	mov	eax, DWORD PTR [ebx+4]
	mov	BYTE PTR [edi+eax], cl
	inc	edi
	inc	esi
; Line 610
	jmp	$LL2@str_copy
$LN67@str_copy:
; Line 564
	push	564					; 00000234H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	102					; 00000066H
	push	101					; 00000065H
	push	14					; 0000000eH
	call	_ERR_put_error
; Line 565
	mov	esi, DWORD PTR _buf$1$[esp+56]
	add	esp, 20					; 00000014H
; Line 619
	push	esi
	call	_BUF_MEM_free
	add	esp, 4
; Line 620
	xor	eax, eax
	pop	ebp
	pop	esi
	pop	edi
	pop	ebx
; Line 621
	add	esp, 20					; 00000014H
	ret	0
$LN69@str_copy:
; Line 589
	push	589					; 0000024dH
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	65					; 00000041H
	push	101					; 00000065H
	push	14					; 0000000eH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 619
	push	esi
	call	_BUF_MEM_free
	add	esp, 4
; Line 620
	xor	eax, eax
	pop	ebp
	pop	esi
	pop	edi
	pop	ebx
; Line 621
	add	esp, 20					; 00000014H
	ret	0
$LN68@str_copy:
; Line 584
	push	584					; 00000248H
	push	OFFSET ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
	push	104					; 00000068H
	push	101					; 00000065H
	push	14					; 0000000eH
	call	_ERR_put_error
; Line 585
	mov	esi, DWORD PTR _buf$1$[esp+56]
	add	esp, 20					; 00000014H
; Line 619
	push	esi
	call	_BUF_MEM_free
	add	esp, 4
; Line 620
	xor	eax, eax
	pop	ebp
	pop	esi
	pop	edi
	pop	ebx
; Line 621
	add	esp, 20					; 00000014H
	ret	0
$LN65@str_copy:
; Line 611
	mov	eax, DWORD PTR [ebx+4]
; Line 612
	mov	esi, DWORD PTR _pto$[esp+32]
	mov	BYTE PTR [edi+eax], 0
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN54@str_copy
; Line 613
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN54@str_copy:
; Line 614
	mov	eax, DWORD PTR [ebx+4]
; Line 615
	push	ebx
	mov	DWORD PTR [esi], eax
	call	_CRYPTO_free
	add	esp, 4
; Line 616
	mov	eax, 1
	pop	ebp
	pop	esi
	pop	edi
	pop	ebx
; Line 621
	add	esp, 20					; 00000014H
	ret	0
$LN93@str_copy:
	mov	esi, ebx
$err$100:
; Line 619
	push	esi
	call	_BUF_MEM_free
	add	esp, 4
; Line 620
	xor	eax, eax
	pop	ebp
	pop	esi
	pop	edi
	pop	ebx
; Line 621
	add	esp, 20					; 00000014H
	ret	0
_str_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _clear_comments
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_p$ = 12						; size = 4
_clear_comments PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 440
	mov	eax, DWORD PTR _conf$[esp-4]
	push	esi
	mov	esi, 2048				; 00000800H
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$[esp]
	movzx	ecx, BYTE PTR [eax]
	test	WORD PTR [edx+ecx*2], si
	jne	SHORT $LN39@clear_comm
	npad	6
$LL2@clear_comm:
; Line 444
	movzx	ecx, BYTE PTR [eax]
	test	BYTE PTR [edx+ecx*2], 16		; 00000010H
	je	SHORT $LN40@clear_comm
; Line 447
	movzx	ecx, BYTE PTR [eax+1]
	inc	eax
	test	WORD PTR [edx+ecx*2], si
	je	SHORT $LL2@clear_comm
$LN39@clear_comm:
; Line 441
	mov	BYTE PTR [eax], 0
	pop	esi
; Line 472
	ret	0
$LN40@clear_comm:
; Line 451
	movzx	ecx, BYTE PTR [eax]
	push	ebx
	push	edi
	test	BYTE PTR [edx+ecx*2], 128		; 00000080H
	jne	$LN42@clear_comm
	npad	8
$LL5@clear_comm:
; Line 455
	mov	bl, BYTE PTR [eax]
	movzx	ecx, bl
	movzx	ecx, WORD PTR [edx+ecx*2]
	test	ecx, 1024				; 00000400H
	je	SHORT $LN11@clear_comm
; Line 665
	inc	eax
	movsx	edi, bl
; Line 666
	mov	bl, BYTE PTR [eax]
	movzx	ecx, bl
	test	BYTE PTR [edx+ecx*2], 8
	jne	SHORT $LN56@clear_comm
$LL20@clear_comm:
; Line 667
	movsx	ecx, bl
	cmp	ecx, edi
	jne	SHORT $LN24@clear_comm
; Line 668
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, edi
	jne	SHORT $LN56@clear_comm
; Line 669
	inc	eax
$LN24@clear_comm:
; Line 666
	mov	bl, BYTE PTR [eax+1]
; Line 674
	inc	eax
	movzx	ecx, bl
	test	BYTE PTR [edx+ecx*2], 8
	je	SHORT $LL20@clear_comm
$LN56@clear_comm:
; Line 676
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, edi
	jne	SHORT $LN15@clear_comm
; Line 457
	jmp	SHORT $LN59@clear_comm
$LN11@clear_comm:
; Line 459
	test	cl, 64					; 00000040H
	je	SHORT $LN12@clear_comm
; Line 647
	inc	eax
	movsx	edi, bl
; Line 648
	mov	bl, BYTE PTR [eax]
	movzx	ecx, bl
	test	BYTE PTR [edx+ecx*2], 8
	lea	esi, DWORD PTR [edx+ecx*2]
	jne	SHORT $LN55@clear_comm
	npad	3
$LL28@clear_comm:
	movsx	ecx, bl
	cmp	ecx, edi
	je	SHORT $LN55@clear_comm
; Line 649
	test	BYTE PTR [esi], 32			; 00000020H
	je	SHORT $LN31@clear_comm
; Line 651
	movzx	ecx, BYTE PTR [eax+1]
	inc	eax
	test	BYTE PTR [edx+ecx*2], 8
	jne	SHORT $LN15@clear_comm
$LN31@clear_comm:
; Line 648
	mov	bl, BYTE PTR [eax+1]
; Line 654
	inc	eax
	movzx	ecx, bl
	test	BYTE PTR [edx+ecx*2], 8
	lea	esi, DWORD PTR [edx+ecx*2]
	je	SHORT $LL28@clear_comm
$LN55@clear_comm:
; Line 656
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, edi
	jne	SHORT $LN15@clear_comm
; Line 461
	jmp	SHORT $LN59@clear_comm
$LN12@clear_comm:
; Line 463
	test	cl, 32					; 00000020H
	je	SHORT $LN13@clear_comm
; Line 464
	movzx	ecx, BYTE PTR [eax+1]
	test	BYTE PTR [edx+ecx*2], 8
	jne	SHORT $LN59@clear_comm
	add	eax, 2
; Line 465
	jmp	SHORT $LN15@clear_comm
$LN13@clear_comm:
; Line 467
	test	cl, 8
	jne	SHORT $LN57@clear_comm
$LN59@clear_comm:
; Line 470
	inc	eax
$LN15@clear_comm:
; Line 451
	movzx	ecx, BYTE PTR [eax]
	test	BYTE PTR [edx+ecx*2], 128		; 00000080H
	je	$LL5@clear_comm
$LN42@clear_comm:
; Line 452
	mov	BYTE PTR [eax], 0
$LN57@clear_comm:
	pop	edi
	pop	ebx
	pop	esi
; Line 472
	ret	0
_clear_comments ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _eat_alpha_numeric
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_p$ = 12						; size = 4
_eat_alpha_numeric PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 633
	mov	eax, DWORD PTR _conf$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$[esp]
	npad	4
$LL2@eat_alpha_:
	movzx	ecx, BYTE PTR [eax]
	movzx	ecx, WORD PTR [esi+ecx*2]
	test	cl, 32					; 00000020H
	je	SHORT $LN5@eat_alpha_
; Line 634
	movzx	ecx, BYTE PTR [eax+1]
	test	BYTE PTR [esi+ecx*2], 8
	je	SHORT $LN8@eat_alpha_
	inc	eax
	jmp	SHORT $LL2@eat_alpha_
$LN8@eat_alpha_:
	add	eax, 2
; Line 635
	jmp	SHORT $LL2@eat_alpha_
$LN5@eat_alpha_:
; Line 637
	test	ecx, 775				; 00000307H
	je	SHORT $LN15@eat_alpha_
; Line 639
	inc	eax
; Line 640
	jmp	SHORT $LL2@eat_alpha_
$LN15@eat_alpha_:
	pop	esi
; Line 641
	ret	0
_eat_alpha_numeric ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _eat_ws
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_p$ = 12						; size = 4
_eat_ws	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 625
	mov	eax, DWORD PTR _conf$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$[esp-4]
	movzx	ecx, BYTE PTR [eax]
	test	BYTE PTR [edx+ecx*2], 16		; 00000010H
	lea	ecx, DWORD PTR [edx+ecx*2]
	je	SHORT $LN3@eat_ws
$LL2@eat_ws:
	test	BYTE PTR [ecx], 8
	jne	SHORT $LN3@eat_ws
	movzx	ecx, BYTE PTR [eax+1]
; Line 626
	inc	eax
	test	BYTE PTR [edx+ecx*2], 16		; 00000010H
	lea	ecx, DWORD PTR [edx+ecx*2]
	jne	SHORT $LL2@eat_ws
$LN3@eat_ws:
; Line 628
	ret	0
_eat_ws	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _NCONF_WIN32
_TEXT	SEGMENT
_NCONF_WIN32 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 126
	mov	eax, OFFSET _WIN32_method
; Line 127
	ret	0
_NCONF_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _NCONF_default
_TEXT	SEGMENT
_NCONF_default PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\conf\conf_def.c
; Line 121
	mov	eax, OFFSET _default_method
; Line 122
	ret	0
_NCONF_default ENDP
_TEXT	ENDS
END
