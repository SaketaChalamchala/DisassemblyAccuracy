; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\ofb128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CRYPTO_ofb128_encrypt
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ofb128_encrypt
_TEXT	SEGMENT
tv522 = -16						; size = 4
tv521 = -12						; size = 4
_out$1$ = -8						; size = 4
_in$1$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
tv519 = 16						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_num$ = 28						; size = 4
_block$ = 32						; size = 4
_CRYPTO_ofb128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ofb128.c
; Line 70
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
; Line 81
	mov	ebx, DWORD PTR _out$[esp+16]
	push	ebp
	mov	ebp, DWORD PTR _in$[esp+20]
	push	esi
	mov	esi, DWORD PTR _num$[esp+24]
	push	edi
	mov	edi, DWORD PTR _len$[esp+28]
	mov	esi, DWORD PTR [esi]
	test	esi, esi
	je	SHORT $LN21@CRYPTO_ofb
	mov	ecx, DWORD PTR _ivec$[esp+28]
$LL5@CRYPTO_ofb:
	test	edi, edi
	je	SHORT $LN21@CRYPTO_ofb
; Line 82
	mov	al, BYTE PTR [esi+ecx]
; Line 83
	dec	edi
	xor	al, BYTE PTR [ebp]
; Line 84
	inc	esi
	mov	BYTE PTR [ebx], al
	inc	ebp
	inc	ebx
	and	esi, 15					; 0000000fH
	jne	SHORT $LL5@CRYPTO_ofb
$LN21@CRYPTO_ofb:
; Line 91
	mov	edx, DWORD PTR _block$[esp+28]
	cmp	edi, 16					; 00000010H
	jb	$LN8@CRYPTO_ofb
	mov	ecx, DWORD PTR _ivec$[esp+28]
	mov	eax, ebx
	sub	eax, ecx
	mov	DWORD PTR tv522[esp+32], eax
	mov	eax, ebp
	sub	eax, ecx
	mov	DWORD PTR tv521[esp+32], eax
	mov	eax, edi
	shr	eax, 4
	mov	DWORD PTR tv519[esp+28], eax
	shl	eax, 4
	add	ebx, eax
	add	ebp, eax
	mov	DWORD PTR _out$1$[esp+32], ebx
	mov	ebx, DWORD PTR tv522[esp+32]
	mov	DWORD PTR _in$1$[esp+32], ebp
	mov	ebp, DWORD PTR tv521[esp+32]
	jmp	SHORT $LN7@CRYPTO_ofb
$LL39@CRYPTO_ofb:
	mov	ecx, DWORD PTR _ivec$[esp+28]
$LN7@CRYPTO_ofb:
; Line 92
	push	DWORD PTR _key$[esp+28]
	push	ecx
	push	ecx
	call	edx
	add	esp, 12					; 0000000cH
; Line 93
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN10@CRYPTO_ofb
; Line 92
	mov	eax, DWORD PTR _ivec$[esp+28]
	mov	edx, 15					; 0000000fH
	sub	edx, esi
	add	eax, esi
	shr	edx, 2
	inc	edx
$LL11@CRYPTO_ofb:
; Line 94
	mov	ecx, DWORD PTR [eax+ebp]
	lea	eax, DWORD PTR [eax+4]
	xor	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [ebx+eax-4], ecx
	sub	edx, 1
	jne	SHORT $LL11@CRYPTO_ofb
$LN10@CRYPTO_ofb:
; Line 91
	mov	edx, DWORD PTR _block$[esp+28]
; Line 96
	sub	edi, 16					; 00000010H
; Line 97
	add	ebx, 16					; 00000010H
; Line 98
	add	ebp, 16					; 00000010H
; Line 99
	xor	esi, esi
	sub	DWORD PTR tv519[esp+28], 1
	jne	SHORT $LL39@CRYPTO_ofb
	mov	ebx, DWORD PTR _out$1$[esp+32]
	mov	ebp, DWORD PTR _in$1$[esp+32]
$LN8@CRYPTO_ofb:
; Line 101
	test	edi, edi
	je	SHORT $LN37@CRYPTO_ofb
; Line 102
	push	DWORD PTR _key$[esp+28]
	mov	eax, DWORD PTR _ivec$[esp+32]
	push	eax
	push	eax
	call	edx
	mov	eax, DWORD PTR _ivec$[esp+40]
	add	esp, 12					; 0000000cH
; Line 103
	sub	ebp, eax
	sub	ebx, eax
	lea	ecx, DWORD PTR [esi+eax]
	add	esi, edi
$LL12@CRYPTO_ofb:
; Line 104
	mov	al, BYTE PTR [ecx+ebp]
; Line 105
	lea	ecx, DWORD PTR [ecx+1]
	xor	al, BYTE PTR [ecx-1]
	mov	BYTE PTR [ecx+ebx-1], al
	sub	edi, 1
	jne	SHORT $LL12@CRYPTO_ofb
$LN37@CRYPTO_ofb:
; Line 108
	mov	eax, DWORD PTR _num$[esp+28]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 124
	add	esp, 16					; 00000010H
	ret	0
_CRYPTO_ofb128_encrypt ENDP
_TEXT	ENDS
END
