; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_add.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_sub
PUBLIC	_BN_usub
PUBLIC	_BN_uadd
PUBLIC	_BN_add
PUBLIC	??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@ ; `string'
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_bn_add_words:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@
CONST	SEGMENT
??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@ DB '.\crypto\bn\bn_add.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_add
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_BN_add	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_add.c
; Line 65
	push	ebx
	push	esi
; Line 67
	mov	esi, DWORD PTR _a$[esp+4]
	push	edi
; Line 78
	mov	edi, DWORD PTR _b$[esp+8]
	mov	ebx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [edi+12]
	xor	eax, ebx
	je	SHORT $LN2@BN_add
; Line 80
	test	ebx, ebx
	je	SHORT $LN3@BN_add
; Line 81
	mov	eax, esi
; Line 82
	mov	esi, edi
; Line 83
	mov	edi, eax
$LN3@BN_add:
; Line 88
	push	edi
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN4@BN_add
; Line 89
	push	esi
	mov	esi, DWORD PTR _r$[esp+12]
	push	edi
	push	esi
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@BN_add
$LN9@BN_add:
	pop	edi
	pop	esi
; Line 90
	xor	eax, eax
	pop	ebx
; Line 104
	ret	0
$LN6@BN_add:
	pop	edi
; Line 91
	mov	DWORD PTR [esi+12], 1
; Line 97
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 104
	ret	0
$LN4@BN_add:
; Line 93
	push	edi
	push	esi
	mov	esi, DWORD PTR _r$[esp+16]
	push	esi
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN9@BN_add
; Line 95
	pop	edi
	mov	DWORD PTR [esi+12], 0
; Line 97
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 104
	ret	0
$LN2@BN_add:
; Line 100
	push	edi
	push	esi
	mov	esi, DWORD PTR _r$[esp+16]
	push	esi
	call	_BN_uadd
	add	esp, 12					; 0000000cH
; Line 101
	mov	DWORD PTR [esi+12], ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 104
	ret	0
_BN_add	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_uadd
_TEXT	SEGMENT
_r$ = 8							; size = 4
_min$1$ = 12						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_BN_uadd PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_add.c
; Line 116
	mov	ecx, DWORD PTR _b$[esp-4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _a$[esp+8]
	push	edi
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN6@BN_uadd
; Line 117
	mov	eax, esi
; Line 118
	mov	esi, ecx
; Line 119
	mov	ecx, eax
	mov	DWORD PTR _b$[esp+12], ecx
$LN6@BN_uadd:
; Line 121
	mov	ebx, DWORD PTR [esi+4]
; Line 123
	mov	edi, ebx
; Line 125
	mov	ebp, DWORD PTR _r$[esp+12]
	mov	edx, DWORD PTR [ecx+4]
	sub	edi, edx
	mov	DWORD PTR _min$1$[esp+12], edx
	lea	eax, DWORD PTR [ebx+1]
	cmp	eax, DWORD PTR [ebp+8]
	jg	SHORT $LN13@BN_uadd
	mov	eax, ebp
	jmp	SHORT $LN14@BN_uadd
$LN13@BN_uadd:
	push	eax
	push	ebp
	call	_bn_expand2
	mov	ecx, DWORD PTR _b$[esp+20]
	add	esp, 8
	mov	edx, DWORD PTR _min$1$[esp+12]
$LN14@BN_uadd:
	test	eax, eax
	jne	SHORT $LN7@BN_uadd
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 163
	ret	0
$LN7@BN_uadd:
; Line 134
	push	edx
	mov	DWORD PTR [ebp+4], ebx
	push	DWORD PTR [ecx]
	mov	esi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [ebp]
	push	esi
	push	ebx
	call	_bn_add_words
; Line 135
	mov	ecx, DWORD PTR _min$1$[esp+28]
	add	esp, 16					; 00000010H
	shl	ecx, 2
	add	ebx, ecx
; Line 136
	add	esi, ecx
; Line 139
	test	eax, eax
	je	SHORT $LN10@BN_uadd
; Line 140
	test	edi, edi
	je	SHORT $LN3@BN_uadd
	npad	1
$LL2@BN_uadd:
; Line 142
	mov	eax, DWORD PTR [esi]
	dec	edi
; Line 143
	inc	eax
	add	esi, 4
; Line 144
	mov	DWORD PTR [ebx], eax
	add	ebx, 4
; Line 145
	test	eax, eax
	jne	SHORT $LN10@BN_uadd
; Line 140
	test	edi, edi
	jne	SHORT $LL2@BN_uadd
$LN3@BN_uadd:
; Line 152
	mov	DWORD PTR [ebx], 1
; Line 153
	inc	DWORD PTR [ebp+4]
$LN10@BN_uadd:
; Line 156
	test	edi, edi
	je	SHORT $LN18@BN_uadd
	cmp	ebx, esi
	je	SHORT $LN18@BN_uadd
; Line 157
	sub	ebx, esi
$LL4@BN_uadd:
; Line 159
	mov	eax, DWORD PTR [esi]
	lea	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [ebx+esi-4], eax
	sub	edi, 1
	jne	SHORT $LL4@BN_uadd
$LN18@BN_uadd:
	pop	edi
	pop	esi
; Line 160
	mov	DWORD PTR [ebp+12], 0
; Line 162
	mov	eax, 1
	pop	ebp
	pop	ebx
; Line 163
	ret	0
_BN_uadd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_usub
_TEXT	SEGMENT
_dif$1$ = -8						; size = 4
_tmp_top$1$ = -4					; size = 4
_r$ = 8							; size = 4
_i$1$ = 12						; size = 4
_a$ = 12						; size = 4
_t2$1$ = 16						; size = 4
_b$ = 16						; size = 4
_BN_usub PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_add.c
; Line 167
	mov	eax, 8
	call	__chkstk
; Line 179
	mov	eax, DWORD PTR _b$[esp+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+12]
	mov	eax, DWORD PTR [eax+4]
	push	esi
	mov	DWORD PTR _i$1$[esp+16], eax
	mov	ebx, DWORD PTR [ebp+4]
; Line 180
	mov	esi, ebx
	sub	esi, eax
	mov	DWORD PTR _tmp_top$1$[esp+20], ebx
	mov	DWORD PTR _dif$1$[esp+20], esi
; Line 182
	jns	SHORT $LN13@BN_usub
; Line 183
	push	183					; 000000b7H
	push	OFFSET ??_C@_0BF@IHHIKAIF@?4?2crypto?2bn?2bn_add?4c?$AA@
	push	100					; 00000064H
	push	115					; 00000073H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 184
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 257
	add	esp, 8
	ret	0
$LN13@BN_usub:
	push	edi
; Line 187
	mov	edi, DWORD PTR _r$[esp+20]
	cmp	ebx, DWORD PTR [edi+8]
	jg	SHORT $LN28@BN_usub
	mov	ecx, edi
	jmp	SHORT $LN29@BN_usub
$LN28@BN_usub:
	push	ebx
	push	edi
	call	_bn_expand2
	mov	ecx, eax
	add	esp, 8
	mov	eax, DWORD PTR _i$1$[esp+20]
$LN29@BN_usub:
	test	ecx, ecx
	je	SHORT $LN73@BN_usub
; Line 191
	mov	ecx, DWORD PTR _b$[esp+20]
	mov	edx, DWORD PTR [ebp]
; Line 195
	xor	ebp, ebp
	mov	edi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ecx]
; Line 196
	test	eax, eax
	je	SHORT $LN67@BN_usub
	mov	ebx, DWORD PTR _i$1$[esp+20]
	mov	esi, ecx
$LL4@BN_usub:
; Line 197
	mov	ecx, DWORD PTR [edx]
; Line 198
	lea	esi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi-4]
	add	edx, 4
	mov	DWORD PTR _t2$1$[esp+20], eax
; Line 199
	test	ebp, ebp
	je	SHORT $LN15@BN_usub
; Line 200
	cmp	eax, ecx
	sbb	ebp, ebp
; Line 201
	or	eax, -1
	sub	eax, DWORD PTR _t2$1$[esp+20]
	inc	ebp
	add	ecx, eax
; Line 202
	jmp	SHORT $LN16@BN_usub
$LN15@BN_usub:
; Line 203
	cmp	ecx, eax
	sbb	ebp, ebp
	neg	ebp
; Line 204
	sub	ecx, eax
$LN16@BN_usub:
; Line 209
	mov	DWORD PTR [edi], ecx
	add	edi, 4
	sub	ebx, 1
	jne	SHORT $LL4@BN_usub
; Line 217
	mov	esi, DWORD PTR _dif$1$[esp+24]
	mov	ebx, DWORD PTR _tmp_top$1$[esp+24]
	test	ebp, ebp
	je	SHORT $LN67@BN_usub
; Line 218
	test	esi, esi
	jne	SHORT $LL5@BN_usub
$LN73@BN_usub:
	pop	edi
	pop	esi
	pop	ebp
; Line 220
	xor	eax, eax
	pop	ebx
; Line 257
	add	esp, 8
	ret	0
$LL5@BN_usub:
; Line 223
	mov	ecx, DWORD PTR [edx]
	dec	esi
	add	edx, 4
; Line 224
	lea	eax, DWORD PTR [ecx-1]
; Line 225
	mov	DWORD PTR [edi], eax
	add	edi, 4
; Line 226
	test	ecx, ecx
	jne	SHORT $LN67@BN_usub
; Line 221
	test	esi, esi
	jne	SHORT $LL5@BN_usub
$LN67@BN_usub:
; Line 233
	cmp	edi, edx
	je	SHORT $LN68@BN_usub
; Line 235
	test	esi, esi
	je	SHORT $LN68@BN_usub
	lea	ebp, DWORD PTR [edx+8]
	sub	edx, edi
	lea	ecx, DWORD PTR [edi+8]
	npad	4
$LL7@BN_usub:
; Line 237
	mov	eax, DWORD PTR [edx+ecx-8]
	mov	DWORD PTR [ecx-8], eax
; Line 238
	lea	eax, DWORD PTR [esi-1]
	test	eax, eax
	je	SHORT $LN68@BN_usub
; Line 240
	mov	eax, DWORD PTR [ebp-4]
	mov	DWORD PTR [ecx-4], eax
; Line 241
	lea	eax, DWORD PTR [esi-2]
	test	eax, eax
	je	SHORT $LN68@BN_usub
; Line 243
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [ecx], eax
; Line 244
	lea	eax, DWORD PTR [esi-3]
	sub	esi, 4
	test	eax, eax
	je	SHORT $LN68@BN_usub
; Line 246
	mov	eax, DWORD PTR [ebp+4]
; Line 248
	add	ebp, 16					; 00000010H
	mov	DWORD PTR [ecx+4], eax
	add	ecx, 16					; 00000010H
	test	esi, esi
	jne	SHORT $LL7@BN_usub
$LN68@BN_usub:
; Line 253
	mov	edx, DWORD PTR _r$[esp+20]
	mov	DWORD PTR [edx+4], ebx
; Line 254
	mov	DWORD PTR [edx+12], 0
; Line 255
	test	ebx, ebx
	jle	SHORT $LN25@BN_usub
	mov	ecx, DWORD PTR [edx]
	add	ecx, -4					; fffffffcH
	lea	ecx, DWORD PTR [ecx+ebx*4]
$LL12@BN_usub:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN39@BN_usub
	dec	ebx
	test	ebx, ebx
	jg	SHORT $LL12@BN_usub
$LN39@BN_usub:
	mov	DWORD PTR [edx+4], ebx
$LN25@BN_usub:
	pop	edi
	pop	esi
	pop	ebp
; Line 256
	mov	eax, 1
	pop	ebx
; Line 257
	add	esp, 8
	ret	0
_BN_usub ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_sub
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_BN_sub	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_add.c
; Line 260
	push	ebx
	push	esi
; Line 275
	mov	esi, DWORD PTR _b$[esp+4]
	push	edi
	mov	edi, DWORD PTR _a$[esp+8]
	cmp	DWORD PTR [edi+12], 0
	je	SHORT $LN2@BN_sub
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN4@BN_sub
; Line 276
	mov	eax, edi
; Line 277
	mov	edi, esi
; Line 278
	mov	esi, eax
$LN7@BN_sub:
; Line 299
	mov	ecx, DWORD PTR [esi+4]
	cmp	DWORD PTR [edi+4], ecx
; Line 300
	mov	ebx, DWORD PTR _r$[esp+8]
	cmovg	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [ebx+8]
	jg	SHORT $LN17@BN_sub
	mov	eax, ebx
	jmp	SHORT $LN18@BN_sub
$LN4@BN_sub:
; Line 281
	mov	ebx, 1
; Line 283
	jmp	SHORT $LN19@BN_sub
$LN2@BN_sub:
; Line 284
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN7@BN_sub
; Line 286
	xor	ebx, ebx
$LN19@BN_sub:
; Line 291
	push	esi
	mov	esi, DWORD PTR _r$[esp+12]
	push	edi
	push	esi
	call	_BN_uadd
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@BN_sub
$LN20@BN_sub:
	pop	edi
	pop	esi
; Line 292
	xor	eax, eax
	pop	ebx
; Line 313
	ret	0
$LN8@BN_sub:
	pop	edi
; Line 293
	mov	DWORD PTR [esi+12], ebx
; Line 312
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 313
	ret	0
$LN17@BN_sub:
; Line 300
	push	ecx
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN18@BN_sub:
	test	eax, eax
	je	SHORT $LN20@BN_sub
; Line 302
	push	esi
	push	edi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN10@BN_sub
; Line 303
	push	edi
	push	esi
	push	ebx
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN20@BN_sub
; Line 305
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+12], 1
; Line 312
	mov	eax, 1
	pop	ebx
; Line 313
	ret	0
$LN10@BN_sub:
; Line 307
	push	esi
	push	edi
	push	ebx
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN20@BN_sub
; Line 309
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+12], 0
; Line 312
	mov	eax, 1
	pop	ebx
; Line 313
	ret	0
_BN_sub	ENDP
_TEXT	ENDS
END
