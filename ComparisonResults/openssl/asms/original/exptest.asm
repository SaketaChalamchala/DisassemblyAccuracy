; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\exptest.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_rnd_seed DB	'string to make the random number generator think it has '
	DB	'entropy', 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_printf
PUBLIC	_main
PUBLIC	??_C@_0M@EIIACMOD@?$CFs?5failed?3?6?$AA@	; `string'
PUBLIC	??_C@_0CA@KMKOFGEM@a?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_04IEIKKLEA@a?5?$DN?5?$AA@			; `string'
PUBLIC	??_C@_05HFLBDDMK@?6r?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0L@FBNHIMJG@BN_mod_exp?$AA@		; `string'
PUBLIC	??_C@_0BA@MFDDJGKA@BN_mod_exp_recp?$AA@		; `string'
PUBLIC	??_C@_0BC@IAKJJHKD@BN_mod_exp_simple?$AA@	; `string'
PUBLIC	??_C@_0BA@CEIKCAMA@BN_mod_exp_mont?$AA@		; `string'
PUBLIC	??_C@_0BK@MLKANOIE@BN_mod_exp_mont_consttime?$AA@ ; `string'
PUBLIC	??_C@_0BO@LCLFGOML@BN_mod_exp_mont_word?5failed?3?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@MEJCIDAB@1?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_04KDMKEGBC@r?5?$DN?5?$AA@			; `string'
PUBLIC	??_C@_0BM@GEHFEMNH@BN_mod_exp_mont?$CI?$CJ?5problems?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@KELHKBEE@BN_mod_exp_recp?$CI?$CJ?5problems?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@FACLPCBM@BN_mod_exp_simple?$CI?$CJ?5problems?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@DBFFFBBB@BN_mod_exp_mont_consttime?$CI?$CJ?5prob@ ; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0CB@FNLKPKDF@?6simple?5and?5mont?5results?5differ?6@ ; `string'
PUBLIC	??_C@_0CM@OIINGDJK@?6simple?5and?5mont?5const?5time?5resu@ ; `string'
PUBLIC	??_C@_0CB@DBNNIAPA@?6simple?5and?5recp?5results?5differ?6@ ; `string'
PUBLIC	??_C@_0L@BNPKAKBL@a?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0M@HOHNPDPI@?6b?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0M@ONIFAHDO@?6m?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0M@CCKALMG@?6simple?5?5?5?$DN?$AA@	; `string'
PUBLIC	??_C@_0M@MNGEGLMI@?6recp?5?5?5?5?5?$DN?$AA@	; `string'
PUBLIC	??_C@_0M@JCENCCKB@?6mont?5?5?5?5?5?$DN?$AA@	; `string'
PUBLIC	??_C@_0M@MMDCJDKK@?6mont_ct?5?5?$DN?$AA@	; `string'
PUBLIC	??_C@_05KJDAJCPN@done?6?$AA@			; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__exit:PROC
EXTRN	_CRYPTO_mem_leaks:PROC
EXTRN	_BIO_s_file:PROC
EXTRN	_BIO_new:PROC
EXTRN	_BIO_free:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_rand:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_init:PROC
EXTRN	_BN_div:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_cmp:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_mod_exp:PROC
EXTRN	_BN_mod_exp_mont:PROC
EXTRN	_BN_mod_exp_mont_consttime:PROC
EXTRN	_BN_mod_exp_mont_word:PROC
EXTRN	_BN_mod_exp_simple:PROC
EXTRN	_BN_print_fp:PROC
EXTRN	_BN_print:PROC
EXTRN	_BN_mod_exp_recp:PROC
EXTRN	_ERR_load_BN_strings:PROC
EXTRN	_RAND_bytes:PROC
EXTRN	_RAND_seed:PROC
EXTRN	_ERR_print_errors:PROC
EXTRN	_ERR_load_crypto_strings:PROC
EXTRN	_ERR_remove_thread_state:PROC
EXTRN	__chkstk:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_05KJDAJCPN@done?6?$AA@
CONST	SEGMENT
??_C@_05KJDAJCPN@done?6?$AA@ DB 'done', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMDCJDKK@?6mont_ct?5?5?$DN?$AA@
CONST	SEGMENT
??_C@_0M@MMDCJDKK@?6mont_ct?5?5?$DN?$AA@ DB 0aH, 'mont_ct  =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCENCCKB@?6mont?5?5?5?5?5?$DN?$AA@
CONST	SEGMENT
??_C@_0M@JCENCCKB@?6mont?5?5?5?5?5?$DN?$AA@ DB 0aH, 'mont     =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MNGEGLMI@?6recp?5?5?5?5?5?$DN?$AA@
CONST	SEGMENT
??_C@_0M@MNGEGLMI@?6recp?5?5?5?5?5?$DN?$AA@ DB 0aH, 'recp     =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCKALMG@?6simple?5?5?5?$DN?$AA@
CONST	SEGMENT
??_C@_0M@CCKALMG@?6simple?5?5?5?$DN?$AA@ DB 0aH, 'simple   =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ONIFAHDO@?6m?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@ONIFAHDO@?6m?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@ DB 0aH, 'm (%3d) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HOHNPDPI@?6b?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@HOHNPDPI@?6b?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@ DB 0aH, 'b (%3d) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNPKAKBL@a?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0L@BNPKAKBL@a?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@ DB 'a (%3d) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DBNNIAPA@?6simple?5and?5recp?5results?5differ?6@
CONST	SEGMENT
??_C@_0CB@DBNNIAPA@?6simple?5and?5recp?5results?5differ?6@ DB 0aH, 'simpl'
	DB	'e and recp results differ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OIINGDJK@?6simple?5and?5mont?5const?5time?5resu@
CONST	SEGMENT
??_C@_0CM@OIINGDJK@?6simple?5and?5mont?5const?5time?5resu@ DB 0aH, 'simpl'
	DB	'e and mont const time results differ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FNLKPKDF@?6simple?5and?5mont?5results?5differ?6@
CONST	SEGMENT
??_C@_0CB@FNLKPKDF@?6simple?5and?5mont?5results?5differ?6@ DB 0aH, 'simpl'
	DB	'e and mont results differ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DBFFFBBB@BN_mod_exp_mont_consttime?$CI?$CJ?5prob@
CONST	SEGMENT
??_C@_0CG@DBFFFBBB@BN_mod_exp_mont_consttime?$CI?$CJ?5prob@ DB 'BN_mod_ex'
	DB	'p_mont_consttime() problems', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FACLPCBM@BN_mod_exp_simple?$CI?$CJ?5problems?6?$AA@
CONST	SEGMENT
??_C@_0BO@FACLPCBM@BN_mod_exp_simple?$CI?$CJ?5problems?6?$AA@ DB 'BN_mod_'
	DB	'exp_simple() problems', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KELHKBEE@BN_mod_exp_recp?$CI?$CJ?5problems?6?$AA@
CONST	SEGMENT
??_C@_0BM@KELHKBEE@BN_mod_exp_recp?$CI?$CJ?5problems?6?$AA@ DB 'BN_mod_ex'
	DB	'p_recp() problems', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GEHFEMNH@BN_mod_exp_mont?$CI?$CJ?5problems?6?$AA@
CONST	SEGMENT
??_C@_0BM@GEHFEMNH@BN_mod_exp_mont?$CI?$CJ?5problems?6?$AA@ DB 'BN_mod_ex'
	DB	'p_mont() problems', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDMKEGBC@r?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_04KDMKEGBC@r?5?$DN?5?$AA@ DB 'r = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MEJCIDAB@1?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@MEJCIDAB@1?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@ DB '1'
	DB	' ** 0 mod 1 = r (should be 0)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LCLFGOML@BN_mod_exp_mont_word?5failed?3?6?$AA@
CONST	SEGMENT
??_C@_0BO@LCLFGOML@BN_mod_exp_mont_word?5failed?3?6?$AA@ DB 'BN_mod_exp_m'
	DB	'ont_word failed:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MLKANOIE@BN_mod_exp_mont_consttime?$AA@
CONST	SEGMENT
??_C@_0BK@MLKANOIE@BN_mod_exp_mont_consttime?$AA@ DB 'BN_mod_exp_mont_con'
	DB	'sttime', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CEIKCAMA@BN_mod_exp_mont?$AA@
CONST	SEGMENT
??_C@_0BA@CEIKCAMA@BN_mod_exp_mont?$AA@ DB 'BN_mod_exp_mont', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IAKJJHKD@BN_mod_exp_simple?$AA@
CONST	SEGMENT
??_C@_0BC@IAKJJHKD@BN_mod_exp_simple?$AA@ DB 'BN_mod_exp_simple', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MFDDJGKA@BN_mod_exp_recp?$AA@
CONST	SEGMENT
??_C@_0BA@MFDDJGKA@BN_mod_exp_recp?$AA@ DB 'BN_mod_exp_recp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBNHIMJG@BN_mod_exp?$AA@
CONST	SEGMENT
??_C@_0L@FBNHIMJG@BN_mod_exp?$AA@ DB 'BN_mod_exp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFLBDDMK@?6r?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05HFLBDDMK@?6r?5?$DN?5?$AA@ DB 0aH, 'r = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEIKKLEA@a?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_04IEIKKLEA@a?5?$DN?5?$AA@ DB 'a = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KMKOFGEM@a?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@KMKOFGEM@a?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@ DB 'a'
	DB	' ** 0 mod 1 = r (should be 0)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EIIACMOD@?$CFs?5failed?3?6?$AA@
CONST	SEGMENT
??_C@_0M@EIIACMOD@?$CFs?5failed?3?6?$AA@ DB '%s failed:', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
_c$ = -25						; size = 1
_m$1$ = -24						; size = 4
_ctx$1$ = -20						; size = 4
_r_recp$1$ = -16					; size = 4
_r_mont$1$ = -12					; size = 4
_r_mont_const$1$ = -8					; size = 4
_i$1$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\exptest.c
; Line 179
	mov	eax, 28					; 0000001cH
	call	__chkstk
	push	edi
; Line 186
	push	64					; 00000040H
	push	OFFSET _rnd_seed
	xor	edi, edi
	call	_RAND_seed
	add	esp, 8
; Line 190
	call	_ERR_load_BN_strings
; Line 192
	call	_BN_CTX_new
	mov	DWORD PTR _ctx$1$[esp+32], eax
; Line 193
	test	eax, eax
	jne	SHORT $LN5@main
; Line 194
	push	1
	call	DWORD PTR __imp__exit
$LN37@main:
$LN5@main:
	push	ebx
	push	ebp
	push	esi
; Line 195
	call	_BN_new
	mov	DWORD PTR _r_mont$1$[esp+44], eax
; Line 196
	call	_BN_new
	mov	DWORD PTR _r_mont_const$1$[esp+44], eax
; Line 197
	call	_BN_new
	mov	DWORD PTR _r_recp$1$[esp+44], eax
; Line 198
	call	_BN_new
	mov	esi, eax
; Line 199
	call	_BN_new
	mov	ebx, eax
; Line 200
	call	_BN_new
	mov	ebp, eax
; Line 201
	call	_BN_new
	mov	DWORD PTR _m$1$[esp+44], eax
; Line 202
	cmp	DWORD PTR _r_mont$1$[esp+44], edi
	je	$err$42
	cmp	DWORD PTR _r_recp$1$[esp+44], edi
	je	$err$42
	test	ebx, ebx
	je	$err$42
	test	ebp, ebp
	je	$err$42
; Line 205
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	add	esp, 4
	mov	edi, eax
; Line 208
	push	1
	test	edi, edi
	jne	SHORT $LN8@main
	call	DWORD PTR __imp__exit
$LN38@main:
$LN8@main:
; Line 209
	call	DWORD PTR __imp____acrt_iob_func
	push	eax
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
	add	esp, 20					; 00000014H
; Line 211
	mov	DWORD PTR _i$1$[esp+44], 0
	npad	2
$LL4@main:
; Line 212
	lea	eax, DWORD PTR _c$[esp+44]
	push	1
	push	eax
	call	_RAND_bytes
; Line 213
	movzx	eax, BYTE PTR _c$[esp+52]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN31@main
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN31@main:
	sub	al, 32					; 00000020H
	mov	BYTE PTR _c$[esp+52], al
; Line 214
	push	0
	movzx	eax, al
	push	0
	sub	eax, -128				; ffffff80H
	push	eax
	push	ebx
	call	_BN_rand
; Line 216
	lea	eax, DWORD PTR _c$[esp+68]
	push	1
	push	eax
	call	_RAND_bytes
; Line 217
	movzx	eax, BYTE PTR _c$[esp+76]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN32@main
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN32@main:
	sub	al, 32					; 00000020H
	mov	BYTE PTR _c$[esp+76], al
; Line 218
	push	0
	movzx	eax, al
	push	0
	sub	eax, -128				; ffffff80H
	push	eax
	push	ebp
	call	_BN_rand
; Line 220
	lea	eax, DWORD PTR _c$[esp+92]
	push	1
	push	eax
	call	_RAND_bytes
; Line 221
	movzx	eax, BYTE PTR _c$[esp+100]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN33@main
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN33@main:
	sub	al, 32					; 00000020H
	mov	BYTE PTR _c$[esp+100], al
; Line 222
	push	1
	movzx	eax, al
	push	0
	sub	eax, -128				; ffffff80H
	push	eax
	push	DWORD PTR _m$1$[esp+112]
	call	_BN_rand
	add	esp, 72					; 00000048H
; Line 224
	push	DWORD PTR _ctx$1$[esp+44]
	push	DWORD PTR _m$1$[esp+48]
	push	ebx
	push	ebx
	push	0
	call	_BN_div
; Line 225
	push	DWORD PTR _ctx$1$[esp+64]
	push	DWORD PTR _m$1$[esp+68]
	push	ebp
	push	ebp
	push	0
	call	_BN_div
; Line 227
	push	0
	push	DWORD PTR _ctx$1$[esp+88]
	push	DWORD PTR _m$1$[esp+92]
	push	ebp
	push	ebx
	push	DWORD PTR _r_mont$1$[esp+104]
	call	_BN_mod_exp_mont
	add	esp, 64					; 00000040H
; Line 228
	test	eax, eax
	jle	$LN21@main
; Line 234
	push	DWORD PTR _ctx$1$[esp+44]
	push	DWORD PTR _m$1$[esp+48]
	push	ebp
	push	ebx
	push	DWORD PTR _r_recp$1$[esp+60]
	call	_BN_mod_exp_recp
	add	esp, 20					; 00000014H
; Line 235
	test	eax, eax
	jle	$LN22@main
; Line 241
	push	DWORD PTR _ctx$1$[esp+44]
	push	DWORD PTR _m$1$[esp+48]
	push	ebp
	push	ebx
	push	esi
	call	_BN_mod_exp_simple
	add	esp, 20					; 00000014H
; Line 242
	test	eax, eax
	jle	$LN23@main
; Line 248
	push	0
	push	DWORD PTR _ctx$1$[esp+48]
	push	DWORD PTR _m$1$[esp+52]
	push	ebp
	push	ebx
	push	DWORD PTR _r_mont_const$1$[esp+64]
	call	_BN_mod_exp_mont_consttime
	add	esp, 24					; 00000018H
; Line 249
	test	eax, eax
	jle	$LN24@main
; Line 257
	push	DWORD PTR _r_mont$1$[esp+44]
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	$LN13@main
	push	DWORD PTR _r_recp$1$[esp+44]
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	$LN13@main
	push	DWORD PTR _r_mont_const$1$[esp+44]
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jne	$LN13@main
; Line 258
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	call	_printf
; Line 259
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	push	eax
	call	DWORD PTR __imp__fflush
	mov	eax, DWORD PTR _i$1$[esp+56]
	add	esp, 12					; 0000000cH
	inc	eax
	mov	DWORD PTR _i$1$[esp+44], eax
	cmp	eax, 200				; 000000c8H
	jl	$LL4@main
; Line 286
	push	DWORD PTR _r_mont$1$[esp+44]
	call	_BN_free
; Line 287
	push	DWORD PTR _r_mont_const$1$[esp+48]
	call	_BN_free
; Line 288
	push	DWORD PTR _r_recp$1$[esp+52]
	call	_BN_free
; Line 289
	push	esi
	call	_BN_free
; Line 290
	push	ebx
	call	_BN_free
; Line 291
	push	ebp
	call	_BN_free
; Line 292
	push	DWORD PTR _m$1$[esp+68]
	call	_BN_free
; Line 293
	push	DWORD PTR _ctx$1$[esp+72]
	call	_BN_CTX_free
; Line 294
	push	0
	call	_ERR_remove_thread_state
; Line 295
	push	edi
	call	_CRYPTO_mem_leaks
; Line 296
	push	edi
	call	_BIO_free
; Line 297
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 48					; 00000030H
; Line 299
	call	_test_exp_mod_zero
	test	eax, eax
	jne	$err$42
; Line 302
	push	OFFSET ??_C@_05KJDAJCPN@done?6?$AA@
	call	_printf
	add	esp, 4
; Line 304
	push	0
	call	DWORD PTR __imp__exit
$LN39@main:
$LN13@main:
; Line 261
	push	DWORD PTR _r_mont$1$[esp+44]
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@main
; Line 262
	push	OFFSET ??_C@_0CB@FNLKPKDF@?6simple?5and?5mont?5results?5differ?6@
	call	_printf
	add	esp, 4
$LN15@main:
; Line 263
	push	DWORD PTR _r_mont_const$1$[esp+44]
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@main
; Line 264
	push	OFFSET ??_C@_0CM@OIINGDJK@?6simple?5and?5mont?5const?5time?5resu@
	call	_printf
	add	esp, 4
$LN16@main:
; Line 265
	push	DWORD PTR _r_recp$1$[esp+44]
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@main
; Line 266
	push	OFFSET ??_C@_0CB@DBNNIAPA@?6simple?5and?5recp?5results?5differ?6@
	call	_printf
	add	esp, 4
$LN17@main:
; Line 268
	push	ebx
	call	_BN_num_bits
	push	eax
	push	OFFSET ??_C@_0L@BNPKAKBL@a?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@
	call	_printf
; Line 269
	push	ebx
	push	edi
	call	_BN_print
; Line 270
	push	ebp
	call	_BN_num_bits
	push	eax
	push	OFFSET ??_C@_0M@HOHNPDPI@?6b?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@
	call	_printf
; Line 271
	push	ebp
	push	edi
	call	_BN_print
; Line 272
	mov	ebx, DWORD PTR _m$1$[esp+84]
	push	ebx
	call	_BN_num_bits
	push	eax
	push	OFFSET ??_C@_0M@ONIFAHDO@?6m?5?$CI?$CF3d?$CJ?5?$DN?5?$AA@
	call	_printf
; Line 273
	push	ebx
	push	edi
	call	_BN_print
; Line 274
	push	OFFSET ??_C@_0M@CCKALMG@?6simple?5?5?5?$DN?$AA@
	call	_printf
	add	esp, 64					; 00000040H
; Line 275
	push	esi
	push	edi
	call	_BN_print
; Line 276
	push	OFFSET ??_C@_0M@MNGEGLMI@?6recp?5?5?5?5?5?$DN?$AA@
	call	_printf
; Line 277
	push	DWORD PTR _r_recp$1$[esp+56]
	push	edi
	call	_BN_print
; Line 278
	push	OFFSET ??_C@_0M@JCENCCKB@?6mont?5?5?5?5?5?$DN?$AA@
	call	_printf
; Line 279
	push	DWORD PTR _r_mont$1$[esp+68]
	push	edi
	call	_BN_print
; Line 280
	push	OFFSET ??_C@_0M@MMDCJDKK@?6mont_ct?5?5?$DN?$AA@
	call	_printf
; Line 281
	push	DWORD PTR _r_mont_const$1$[esp+80]
	push	edi
	call	_BN_print
; Line 282
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 48					; 00000030H
; Line 283
	push	1
	call	DWORD PTR __imp__exit
$LN40@main:
$LN24@main:
; Line 250
	push	OFFSET ??_C@_0CG@DBFFFBBB@BN_mod_exp_mont_consttime?$CI?$CJ?5prob@
$LN35@main:
	call	_printf
; Line 251
	push	edi
	call	_ERR_print_errors
	add	esp, 8
$LN36@main:
; Line 252
	push	1
	call	DWORD PTR __imp__exit
$LN41@main:
$LN23@main:
; Line 243
	push	OFFSET ??_C@_0BO@FACLPCBM@BN_mod_exp_simple?$CI?$CJ?5problems?6?$AA@
; Line 245
	jmp	SHORT $LN35@main
$LN22@main:
; Line 236
	push	OFFSET ??_C@_0BM@KELHKBEE@BN_mod_exp_recp?$CI?$CJ?5problems?6?$AA@
; Line 238
	jmp	SHORT $LN35@main
$LN21@main:
; Line 229
	push	OFFSET ??_C@_0BM@GEHFEMNH@BN_mod_exp_mont?$CI?$CJ?5problems?6?$AA@
; Line 231
	jmp	SHORT $LN35@main
$err$42:
; Line 306
	call	_ERR_load_crypto_strings
; Line 307
	push	edi
	call	_ERR_print_errors
	add	esp, 4
; Line 311
	jmp	SHORT $LN36@main
$LN34@main:
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _test_exp_mod_zero
_TEXT	SEGMENT
_r$ = -80						; size = 20
_a$ = -60						; size = 20
_p$ = -40						; size = 20
_m$ = -20						; size = 20
_test_exp_mod_zero PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\exptest.c
; Line 98
	mov	eax, 80					; 00000050H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 102
	call	_BN_CTX_new
	mov	edi, eax
; Line 103
	mov	ebx, 1
; Line 105
	lea	eax, DWORD PTR _m$[esp+96]
	xor	esi, esi
	push	eax
	call	_BN_init
; Line 106
	lea	eax, DWORD PTR _m$[esp+100]
	push	ebx
	push	eax
	call	_BN_set_word
; Line 108
	lea	eax, DWORD PTR _a$[esp+108]
	push	eax
	call	_BN_init
; Line 109
	lea	eax, DWORD PTR _a$[esp+112]
	push	ebx
	push	eax
	call	_BN_set_word
; Line 111
	lea	eax, DWORD PTR _p$[esp+120]
	push	eax
	call	_BN_init
; Line 112
	lea	eax, DWORD PTR _p$[esp+124]
	push	esi
	push	eax
	call	_BN_set_word
; Line 114
	lea	eax, DWORD PTR _r$[esp+132]
	push	eax
	call	_BN_init
; Line 116
	push	esi
	push	esi
	lea	eax, DWORD PTR _a$[esp+144]
	push	1024					; 00000400H
	push	eax
	call	_BN_rand
	add	esp, 56					; 00000038H
	test	eax, eax
	je	$err$17
; Line 119
	push	edi
	lea	eax, DWORD PTR _m$[esp+100]
	push	eax
	lea	eax, DWORD PTR _p$[esp+104]
	push	eax
	lea	eax, DWORD PTR _a$[esp+108]
	push	eax
	lea	eax, DWORD PTR _r$[esp+112]
	push	eax
	call	_BN_mod_exp
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$17
; Line 122
	lea	eax, DWORD PTR _a$[esp+96]
	push	eax
	lea	eax, DWORD PTR _r$[esp+100]
	push	eax
	push	OFFSET ??_C@_0L@FBNHIMJG@BN_mod_exp?$AA@
	call	_a_is_zero_mod_one
	test	eax, eax
	mov	ebp, ebx
; Line 125
	push	edi
	lea	eax, DWORD PTR _m$[esp+112]
	cmove	esi, ebp
	push	eax
	lea	eax, DWORD PTR _p$[esp+116]
	push	eax
	lea	eax, DWORD PTR _a$[esp+120]
	push	eax
	lea	eax, DWORD PTR _r$[esp+124]
	push	eax
	call	_BN_mod_exp_recp
	add	esp, 32					; 00000020H
	test	eax, eax
	je	$err$17
; Line 128
	lea	eax, DWORD PTR _a$[esp+96]
	push	eax
	lea	eax, DWORD PTR _r$[esp+100]
	push	eax
	push	OFFSET ??_C@_0BA@MFDDJGKA@BN_mod_exp_recp?$AA@
	call	_a_is_zero_mod_one
	test	eax, eax
; Line 131
	lea	eax, DWORD PTR _m$[esp+108]
	push	edi
	push	eax
	lea	eax, DWORD PTR _p$[esp+116]
	cmove	esi, ebp
	push	eax
	lea	eax, DWORD PTR _a$[esp+120]
	push	eax
	lea	eax, DWORD PTR _r$[esp+124]
	push	eax
	call	_BN_mod_exp_simple
	add	esp, 32					; 00000020H
	test	eax, eax
	je	$err$17
; Line 134
	lea	eax, DWORD PTR _a$[esp+96]
	push	eax
	lea	eax, DWORD PTR _r$[esp+100]
	push	eax
	push	OFFSET ??_C@_0BC@IAKJJHKD@BN_mod_exp_simple?$AA@
	call	_a_is_zero_mod_one
	test	eax, eax
; Line 137
	lea	eax, DWORD PTR _m$[esp+108]
	push	0
	push	edi
	push	eax
	lea	eax, DWORD PTR _p$[esp+120]
	cmove	esi, ebp
	push	eax
	lea	eax, DWORD PTR _a$[esp+124]
	push	eax
	lea	eax, DWORD PTR _r$[esp+128]
	push	eax
	call	_BN_mod_exp_mont
	add	esp, 36					; 00000024H
	test	eax, eax
	je	$err$17
; Line 140
	lea	eax, DWORD PTR _a$[esp+96]
	push	eax
	lea	eax, DWORD PTR _r$[esp+100]
	push	eax
	push	OFFSET ??_C@_0BA@CEIKCAMA@BN_mod_exp_mont?$AA@
	call	_a_is_zero_mod_one
	test	eax, eax
; Line 143
	lea	eax, DWORD PTR _m$[esp+108]
	push	0
	push	edi
	push	eax
	lea	eax, DWORD PTR _p$[esp+120]
	cmove	esi, ebp
	push	eax
	lea	eax, DWORD PTR _a$[esp+124]
	push	eax
	lea	eax, DWORD PTR _r$[esp+128]
	push	eax
	call	_BN_mod_exp_mont_consttime
	add	esp, 36					; 00000024H
	test	eax, eax
	je	$err$17
; Line 147
	lea	eax, DWORD PTR _a$[esp+96]
	push	eax
	lea	eax, DWORD PTR _r$[esp+100]
	push	eax
	push	OFFSET ??_C@_0BK@MLKANOIE@BN_mod_exp_mont_consttime?$AA@
	call	_a_is_zero_mod_one
; Line 154
	push	0
	test	eax, eax
	lea	eax, DWORD PTR _m$[esp+112]
	push	edi
	push	eax
	lea	eax, DWORD PTR _p$[esp+120]
	cmove	esi, ebp
	push	eax
	lea	eax, DWORD PTR _r$[esp+124]
	push	ebx
	push	eax
	call	_BN_mod_exp_mont_word
	add	esp, 36					; 00000024H
	test	eax, eax
	je	$err$17
; Line 157
	cmp	DWORD PTR _r$[esp+100], 0
	je	SHORT $LN14@test_exp_m
; Line 158
	mov	esi, DWORD PTR __imp____acrt_iob_func
	push	OFFSET ??_C@_0BO@LCLFGOML@BN_mod_exp_mont_word?5failed?3?6?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 159
	push	OFFSET ??_C@_0CA@MEJCIDAB@1?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 160
	push	OFFSET ??_C@_04KDMKEGBC@r?5?$DN?5?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 161
	lea	eax, DWORD PTR _r$[esp+96]
	push	eax
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_BN_print_fp
	add	esp, 8
; Line 162
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 163
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 176
	add	esp, 80					; 00000050H
	ret	0
$LN14@test_exp_m:
; Line 166
	mov	ebx, esi
$err$17:
; Line 169
	lea	eax, DWORD PTR _r$[esp+96]
	push	eax
	call	_BN_free
; Line 170
	lea	eax, DWORD PTR _a$[esp+100]
	push	eax
	call	_BN_free
; Line 171
	lea	eax, DWORD PTR _p$[esp+104]
	push	eax
	call	_BN_free
; Line 172
	lea	eax, DWORD PTR _m$[esp+108]
	push	eax
	call	_BN_free
; Line 173
	push	edi
	call	_BN_CTX_free
	add	esp, 20					; 00000014H
; Line 175
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 176
	add	esp, 80					; 00000050H
	ret	0
_test_exp_mod_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _a_is_zero_mod_one
_TEXT	SEGMENT
_method$ = 8						; size = 4
_r$ = 12						; size = 4
_a$ = 16						; size = 4
_a_is_zero_mod_one PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\exptest.c
; Line 80
	push	edi
; Line 81
	mov	edi, DWORD PTR _r$[esp]
	cmp	DWORD PTR [edi+4], 0
	je	$LN2@a_is_zero_
; Line 82
	push	esi
	push	DWORD PTR _method$[esp+4]
	mov	esi, DWORD PTR __imp____acrt_iob_func
	push	OFFSET ??_C@_0M@EIIACMOD@?$CFs?5failed?3?6?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 83
	push	OFFSET ??_C@_0CA@KMKOFGEM@a?5?$CK?$CK?50?5mod?51?5?$DN?5r?5?$CIshould?5be?50?$CJ?6?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 84
	push	OFFSET ??_C@_04IEIKKLEA@a?5?$DN?5?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 85
	push	DWORD PTR _a$[esp+4]
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_BN_print_fp
	add	esp, 8
; Line 86
	push	OFFSET ??_C@_05HFLBDDMK@?6r?5?$DN?5?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 87
	push	edi
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_BN_print_fp
	add	esp, 8
; Line 88
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	2
	call	esi
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 89
	xor	eax, eax
	pop	esi
	pop	edi
; Line 92
	ret	0
$LN2@a_is_zero_:
; Line 91
	mov	eax, 1
	pop	edi
; Line 92
	ret	0
_a_is_zero_mod_one ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 950
	push	esi
; Line 954
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
; Line 639
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	pop	esi
; Line 957
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 838
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
