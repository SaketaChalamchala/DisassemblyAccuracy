; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_version
_BSS	SEGMENT
_bn_limit_bits DD 01H DUP (?)
_bn_limit_bits_low DD 01H DUP (?)
_bn_limit_bits_high DD 01H DUP (?)
_bn_limit_bits_mont DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_bn_limit_num DD 08H
_bn_limit_num_low DD 08H
_bn_limit_num_high DD 08H
_bn_limit_num_mont DD 08H
_DATA	ENDS
CONST	SEGMENT
_BN_version DB	'Big Number part of OpenSSL 1.0.2h  3 May 2016', 00H
	ORG $+2
?data_one@?1??BN_value_one@@9@9 DD 01H			; `BN_value_one'::`2'::data_one
?const_one@?1??BN_value_one@@9@9 DD FLAT:?data_one@?1??BN_value_one@@9@9 ; `BN_value_one'::`2'::const_one
	DD	01H
	DD	01H
	DD	00H
	DD	02H
?bits@?1??BN_num_bits_word@@9@9 DB 00H			; `BN_num_bits_word'::`2'::bits
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
CONST	ENDS
PUBLIC	_BN_value_one
PUBLIC	_BN_num_bits
PUBLIC	_BN_num_bits_word
PUBLIC	_BN_new
PUBLIC	_BN_init
PUBLIC	_BN_clear_free
PUBLIC	_BN_copy
PUBLIC	_BN_swap
PUBLIC	_BN_bin2bn
PUBLIC	_BN_bn2bin
PUBLIC	_BN_set_negative
PUBLIC	_BN_set_word
PUBLIC	_BN_get_word
PUBLIC	_BN_cmp
PUBLIC	_BN_free
PUBLIC	_BN_is_bit_set
PUBLIC	_BN_mask_bits
PUBLIC	_BN_clear
PUBLIC	_BN_dup
PUBLIC	_BN_ucmp
PUBLIC	_BN_set_bit
PUBLIC	_BN_clear_bit
PUBLIC	_BN_consttime_swap
PUBLIC	_BN_set_params
PUBLIC	_BN_get_params
PUBLIC	_bn_expand2
PUBLIC	_bn_dup_expand
PUBLIC	_bn_cmp_words
PUBLIC	_bn_cmp_part_words
PUBLIC	??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
CONST	SEGMENT
??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@ DB '.\crypto\bn\bn_lib.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_expand_internal
_TEXT	SEGMENT
_b$ = 8							; size = 4
_a$1$ = 12						; size = 4
_words$ = 12						; size = 4
_bn_expand_internal PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 295
	mov	eax, DWORD PTR _words$[esp-4]
	cmp	eax, 16777215				; 00ffffffH
	jle	SHORT $LN7@bn_expand_
; Line 296
	push	296					; 00000128H
	push	OFFSET ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
	push	114					; 00000072H
	push	120					; 00000078H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 297
	xor	eax, eax
; Line 364
	ret	0
$LN7@bn_expand_:
	push	esi
; Line 299
	mov	esi, DWORD PTR _b$[esp]
	test	BYTE PTR [esi+16], 2
	je	SHORT $LN8@bn_expand_
; Line 300
	push	300					; 0000012cH
	push	OFFSET ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
	push	105					; 00000069H
	push	120					; 00000078H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 301
	xor	eax, eax
	pop	esi
; Line 364
	ret	0
$LN8@bn_expand_:
	push	edi
; Line 303
	push	303					; 0000012fH
	shl	eax, 2
	push	OFFSET ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	edx, edi
	mov	DWORD PTR _a$1$[esp+4], edx
; Line 304
	test	edi, edi
	jne	SHORT $LN9@bn_expand_
; Line 305
	push	305					; 00000131H
	push	OFFSET ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
	push	65					; 00000041H
	push	120					; 00000078H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 306
	xor	eax, eax
	pop	edi
	pop	esi
; Line 364
	ret	0
$LN9@bn_expand_:
	push	ebx
; Line 319
	mov	ebx, DWORD PTR [esi]
; Line 321
	test	ebx, ebx
	je	SHORT $LN14@bn_expand_
; Line 322
	push	ebp
	mov	ebp, DWORD PTR [esi+4]
	sar	ebp, 2
	test	ebp, ebp
	jle	SHORT $LN3@bn_expand_
	npad	1
$LL4@bn_expand_:
; Line 334
	mov	ecx, DWORD PTR [ebx+4]
	dec	ebp
; Line 335
	mov	edx, DWORD PTR [ebx+8]
; Line 336
	mov	esi, DWORD PTR [ebx+12]
; Line 337
	mov	eax, DWORD PTR [ebx]
	add	ebx, 16					; 00000010H
	mov	DWORD PTR [edi], eax
; Line 338
	mov	DWORD PTR [edi+4], ecx
; Line 339
	mov	DWORD PTR [edi+8], edx
; Line 340
	mov	DWORD PTR [edi+12], esi
	add	edi, 16					; 00000010H
	test	ebp, ebp
	jg	SHORT $LL4@bn_expand_
	mov	esi, DWORD PTR _b$[esp+12]
	mov	edx, DWORD PTR _a$1$[esp+12]
$LN3@bn_expand_:
; Line 347
	mov	eax, DWORD PTR [esi+4]
	and	eax, 3
	pop	ebp
	sub	eax, 1
	je	SHORT $LN13@bn_expand_
	sub	eax, 1
	je	SHORT $LN12@bn_expand_
	sub	eax, 1
	jne	SHORT $LN14@bn_expand_
; Line 349
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], eax
$LN12@bn_expand_:
; Line 351
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], ecx
$LN13@bn_expand_:
; Line 353
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [edi], ecx
$LN14@bn_expand_:
; Line 363
	pop	ebx
	pop	edi
	mov	eax, edx
	pop	esi
; Line 364
	ret	0
_bn_expand_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_cmp_part_words
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_cl$ = 16						; size = 4
_dl$ = 20						; size = 4
_bn_cmp_part_words PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 842
	mov	ecx, DWORD PTR _dl$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _cl$[esp]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _b$[esp+8]
	lea	ebp, DWORD PTR [ebx-1]
	test	ecx, ecx
	jns	SHORT $LN3@bn_cmp_par
; Line 843
	mov	eax, ebp
	mov	edx, ecx
	sub	eax, ecx
	lea	eax, DWORD PTR [esi+eax*4]
	npad	1
$LL4@bn_cmp_par:
; Line 844
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN23@bn_cmp_par
; Line 843
	sub	eax, 4
	add	edx, 1
	js	SHORT $LL4@bn_cmp_par
$LN3@bn_cmp_par:
	push	edi
; Line 848
	mov	edi, DWORD PTR _a$[esp+12]
	test	ecx, ecx
	jle	SHORT $LN6@bn_cmp_par
; Line 849
	lea	eax, DWORD PTR [ecx+ebp]
	lea	eax, DWORD PTR [edi+eax*4]
	npad	4
$LL7@bn_cmp_par:
; Line 850
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN24@bn_cmp_par
; Line 849
	dec	ecx
	sub	eax, 4
	test	ecx, ecx
	jg	SHORT $LL7@bn_cmp_par
$LN6@bn_cmp_par:
; Line 815
	mov	eax, DWORD PTR [edi+ebx*4-4]
; Line 816
	mov	ecx, DWORD PTR [esi+ebx*4-4]
; Line 817
	cmp	eax, ecx
	je	SHORT $LN17@bn_cmp_par
; Line 818
	cmp	ecx, eax
$LN36@bn_cmp_par:
	pop	edi
	sbb	eax, eax
	pop	esi
	and	eax, 2
	pop	ebp
	dec	eax
	pop	ebx
; Line 855
	ret	0
$LN23@bn_cmp_par:
	pop	esi
	pop	ebp
; Line 845
	or	eax, -1
	pop	ebx
; Line 855
	ret	0
$LN24@bn_cmp_par:
	pop	edi
	pop	esi
	pop	ebp
; Line 851
	mov	eax, 1
	pop	ebx
; Line 855
	ret	0
$LN17@bn_cmp_par:
; Line 819
	lea	ecx, DWORD PTR [ebx-2]
	test	ecx, ecx
	js	SHORT $LN15@bn_cmp_par
	lea	eax, DWORD PTR [esi+ecx*4]
	sub	edi, esi
$LL16@bn_cmp_par:
; Line 820
	mov	edx, DWORD PTR [edi+eax]
; Line 821
	mov	esi, DWORD PTR [eax]
; Line 822
	cmp	esi, edx
	jne	SHORT $LN36@bn_cmp_par
; Line 819
	sub	eax, 4
	sub	ecx, 1
	jns	SHORT $LL16@bn_cmp_par
$LN15@bn_cmp_par:
	pop	edi
	pop	esi
	pop	ebp
; Line 825
	xor	eax, eax
	pop	ebx
; Line 855
	ret	0
_bn_cmp_part_words ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_cmp_words
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_n$ = 16						; size = 4
_bn_cmp_words PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 816
	mov	edx, DWORD PTR _b$[esp-4]
	push	esi
	mov	esi, DWORD PTR _n$[esp]
	push	edi
	mov	edi, DWORD PTR _a$[esp+4]
	mov	ecx, DWORD PTR [edx+esi*4-4]
	mov	eax, DWORD PTR [edi+esi*4-4]
; Line 817
	cmp	eax, ecx
	je	SHORT $LN5@bn_cmp_wor
; Line 818
	cmp	ecx, eax
$LN13@bn_cmp_wor:
	sbb	eax, eax
	and	eax, 2
	pop	edi
	dec	eax
	pop	esi
; Line 826
	ret	0
$LN5@bn_cmp_wor:
; Line 819
	lea	ecx, DWORD PTR [esi-2]
	test	ecx, ecx
	js	SHORT $LN3@bn_cmp_wor
	lea	eax, DWORD PTR [edx+ecx*4]
	sub	edi, edx
$LL4@bn_cmp_wor:
; Line 820
	mov	edx, DWORD PTR [edi+eax]
; Line 821
	mov	esi, DWORD PTR [eax]
; Line 822
	cmp	esi, edx
	jne	SHORT $LN13@bn_cmp_wor
; Line 819
	sub	eax, 4
	sub	ecx, 1
	jns	SHORT $LL4@bn_cmp_wor
$LN3@bn_cmp_wor:
	pop	edi
; Line 825
	xor	eax, eax
	pop	esi
; Line 826
	ret	0
_bn_cmp_words ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_dup_expand
_TEXT	SEGMENT
_b$ = 8							; size = 4
_words$ = 12						; size = 4
_bn_dup_expand PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 379
	push	ebx
; Line 390
	mov	ebx, DWORD PTR _words$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _b$[esp+8]
	cmp	ebx, DWORD PTR [edi+8]
	jle	SHORT $LN2@bn_dup_exp
; Line 391
	push	ebp
	push	ebx
	push	edi
	call	_bn_expand_internal
	mov	ebp, eax
	add	esp, 8
; Line 393
	test	ebp, ebp
	je	SHORT $LN13@bn_dup_exp
; Line 394
	call	_BN_new
	mov	esi, eax
; Line 395
	test	esi, esi
	je	SHORT $LN5@bn_dup_exp
; Line 396
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; Line 397
	mov	DWORD PTR [esi+8], ebx
; Line 398
	mov	eax, DWORD PTR [edi+12]
; Line 399
	mov	DWORD PTR [esi], ebp
	pop	ebp
	mov	DWORD PTR [esi+12], eax
; Line 414
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 415
	ret	0
$LN5@bn_dup_exp:
; Line 402
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
; Line 414
	mov	eax, esi
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 415
	ret	0
$LN13@bn_dup_exp:
	pop	ebp
	pop	edi
	pop	esi
; Line 414
	xor	eax, eax
	pop	ebx
; Line 415
	ret	0
$LN2@bn_dup_exp:
; Line 475
	call	_BN_new
	mov	esi, eax
; Line 476
	test	esi, esi
	je	SHORT $LN16@bn_dup_exp
; Line 478
	push	edi
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@bn_dup_exp
; Line 479
	push	esi
	call	_BN_free
	add	esp, 4
$LN16@bn_dup_exp:
	pop	edi
	pop	esi
; Line 414
	xor	eax, eax
	pop	ebx
; Line 415
	ret	0
$LN11@bn_dup_exp:
	pop	edi
; Line 414
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 415
	ret	0
_bn_dup_expand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_expand2
_TEXT	SEGMENT
_b$ = 8							; size = 4
_words$ = 12						; size = 4
_bn_expand2 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 427
	push	ebx
	push	esi
; Line 430
	mov	esi, DWORD PTR _b$[esp+4]
	push	edi
	mov	edi, DWORD PTR _words$[esp+8]
	cmp	edi, DWORD PTR [esi+8]
	jle	SHORT $LN2@bn_expand2
; Line 431
	push	edi
	push	esi
	call	_bn_expand_internal
	mov	ebx, eax
	add	esp, 8
; Line 432
	test	ebx, ebx
	jne	SHORT $LN3@bn_expand2
	pop	edi
	pop	esi
	pop	ebx
; Line 465
	ret	0
$LN3@bn_expand2:
; Line 434
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@bn_expand2
; Line 435
	push	ecx
	call	_CRYPTO_free
	add	esp, 4
$LN4@bn_expand2:
; Line 436
	mov	DWORD PTR [esi], ebx
; Line 437
	mov	DWORD PTR [esi+8], edi
$LN2@bn_expand2:
; Line 464
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 465
	ret	0
_bn_expand2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get_params
_TEXT	SEGMENT
_which$ = 8						; size = 4
_BN_get_params PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 123
	mov	ecx, DWORD PTR _which$[esp-4]
	test	ecx, ecx
	jne	SHORT $LN2@BN_get_par
; Line 124
	mov	eax, DWORD PTR _bn_limit_bits
; Line 133
	ret	0
$LN2@BN_get_par:
; Line 125
	cmp	ecx, 1
	jne	SHORT $LN4@BN_get_par
; Line 126
	mov	eax, DWORD PTR _bn_limit_bits_high
; Line 133
	ret	0
$LN4@BN_get_par:
; Line 127
	cmp	ecx, 2
	jne	SHORT $LN6@BN_get_par
; Line 128
	mov	eax, DWORD PTR _bn_limit_bits_low
; Line 133
	ret	0
$LN6@BN_get_par:
; Line 129
	xor	eax, eax
	cmp	ecx, 3
	cmove	eax, DWORD PTR _bn_limit_bits_mont
; Line 133
	ret	0
_BN_get_params ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_set_params
_TEXT	SEGMENT
_mult$ = 8						; size = 4
_high$ = 12						; size = 4
_low$ = 16						; size = 4
_mont$ = 20						; size = 4
_BN_set_params PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 95
	mov	ecx, DWORD PTR _mult$[esp-4]
	push	esi
	mov	esi, 31					; 0000001fH
	lea	edx, DWORD PTR [esi-30]
	test	ecx, ecx
	js	SHORT $LN2@BN_set_par
; Line 96
	cmp	ecx, esi
; Line 99
	mov	eax, edx
	cmovg	ecx, esi
	shl	eax, cl
	mov	DWORD PTR _bn_limit_bits, ecx
	mov	DWORD PTR _bn_limit_num, eax
$LN2@BN_set_par:
; Line 101
	mov	ecx, DWORD PTR _high$[esp]
	test	ecx, ecx
	js	SHORT $LN4@BN_set_par
; Line 102
	cmp	ecx, esi
; Line 105
	mov	eax, edx
	cmovg	ecx, esi
	shl	eax, cl
	mov	DWORD PTR _bn_limit_bits_high, ecx
	mov	DWORD PTR _bn_limit_num_high, eax
$LN4@BN_set_par:
; Line 107
	mov	ecx, DWORD PTR _low$[esp]
	test	ecx, ecx
	js	SHORT $LN6@BN_set_par
; Line 108
	cmp	ecx, esi
; Line 111
	mov	eax, edx
	cmovg	ecx, esi
	shl	eax, cl
	mov	DWORD PTR _bn_limit_bits_low, ecx
	mov	DWORD PTR _bn_limit_num_low, eax
$LN6@BN_set_par:
; Line 113
	mov	ecx, DWORD PTR _mont$[esp]
	test	ecx, ecx
	js	SHORT $LN8@BN_set_par
; Line 114
	cmp	ecx, esi
	cmovg	ecx, esi
; Line 117
	shl	edx, cl
	mov	DWORD PTR _bn_limit_bits_mont, ecx
	mov	DWORD PTR _bn_limit_num_mont, edx
$LN8@BN_set_par:
	pop	esi
; Line 119
	ret	0
_BN_set_params ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_consttime_swap
_TEXT	SEGMENT
tv957 = -16						; size = 4
tv947 = -12						; size = 4
tv944 = -8						; size = 4
tv958 = -4						; size = 4
_condition$1$ = 8					; size = 4
_condition$ = 8						; size = 4
_a$ = 12						; size = 4
tv948 = 16						; size = 4
_b$ = 16						; size = 4
_nwords$ = 20						; size = 4
_BN_consttime_swap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 865
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
; Line 878
	mov	ebx, DWORD PTR _a$[esp+16]
	push	ebp
	mov	ebp, DWORD PTR _condition$[esp+20]
	push	esi
	mov	ecx, DWORD PTR [ebx+4]
	push	edi
	mov	edi, DWORD PTR _b$[esp+28]
	lea	ebp, DWORD PTR [ebp-1]
	shr	ebp, 31					; 0000001fH
	dec	ebp
	mov	DWORD PTR _condition$1$[esp+28], ebp
	mov	eax, DWORD PTR [edi+4]
	xor	eax, ecx
	and	eax, ebp
	movd	xmm0, ebp
; Line 879
	xor	ecx, eax
	pshufd	xmm3, xmm0, 0
	mov	DWORD PTR [ebx+4], ecx
; Line 880
	xor	DWORD PTR [edi+4], eax
; Line 889
	mov	eax, DWORD PTR _nwords$[esp+28]
	lea	edx, DWORD PTR [eax-1]
	cmp	edx, 9
	ja	SHORT $LN40@BN_constti
	jmp	DWORD PTR $LN71@BN_constti[edx*4]
$LN40@BN_constti:
; Line 891
	mov	ebp, 10					; 0000000aH
	lea	ecx, DWORD PTR [eax-10]
	cmp	eax, ebp
	jle	$LN66@BN_constti
	cmp	ecx, 4
	jb	$LN55@BN_constti
; Line 892
	mov	esi, DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR tv957[esp+32], eax
	mov	ebx, eax
	lea	eax, DWORD PTR [esi+40]
	mov	DWORD PTR tv948[esp+28], eax
	lea	esi, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR tv957[esp+32]
	add	eax, 40					; 00000028H
	mov	DWORD PTR tv947[esp+32], eax
	lea	eax, DWORD PTR [ebx+edx*4]
	cmp	DWORD PTR tv948[esp+28], eax
	mov	ebx, DWORD PTR _a$[esp+28]
	mov	edx, DWORD PTR tv947[esp+32]
	mov	DWORD PTR tv944[esp+32], eax
	mov	eax, DWORD PTR _nwords$[esp+28]
	ja	SHORT $LN56@BN_constti
	cmp	esi, edx
	jae	SHORT $LN55@BN_constti
$LN56@BN_constti:
	cmp	DWORD PTR tv948[esp+28], edi
	ja	SHORT $LN57@BN_constti
	cmp	esi, edi
	jae	SHORT $LN55@BN_constti
$LN57@BN_constti:
	cmp	DWORD PTR tv948[esp+28], ebx
	ja	SHORT $LN58@BN_constti
	cmp	esi, ebx
	jae	SHORT $LN55@BN_constti
$LN58@BN_constti:
	mov	esi, DWORD PTR tv944[esp+32]
	cmp	edx, edi
	ja	SHORT $LN59@BN_constti
	cmp	esi, edi
	jae	SHORT $LN55@BN_constti
$LN59@BN_constti:
	cmp	edx, ebx
	ja	SHORT $LN60@BN_constti
	cmp	esi, ebx
	jae	SHORT $LN55@BN_constti
$LN60@BN_constti:
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN69@BN_constti
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN69@BN_constti:
	mov	esi, DWORD PTR tv957[esp+32]
	mov	edx, eax
	sub	edx, ecx
	mov	ecx, DWORD PTR [edi]
	npad	9
$LL6@BN_constti:
	movups	xmm1, XMMWORD PTR [esi+ebp*4]
	movups	xmm2, XMMWORD PTR [ecx+ebp*4]
	pxor	xmm2, xmm1
	pand	xmm2, xmm3
	movaps	xmm0, xmm2
	pxor	xmm0, xmm1
	movups	XMMWORD PTR [esi+ebp*4], xmm0
	movups	xmm0, XMMWORD PTR [ecx+ebp*4]
	pxor	xmm0, xmm2
	movups	XMMWORD PTR [ecx+ebp*4], xmm0
	add	ebp, 4
	cmp	ebp, edx
	jl	SHORT $LL6@BN_constti
$LN55@BN_constti:
; Line 891
	cmp	ebp, eax
	jge	SHORT $LN66@BN_constti
$LL54@BN_constti:
	mov	eax, DWORD PTR [ebx]
; Line 892
	mov	ecx, DWORD PTR [eax+ebp*4]
	lea	edx, DWORD PTR [eax+ebp*4]
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [eax+ebp*4]
	xor	esi, ecx
	and	esi, DWORD PTR _condition$1$[esp+28]
	xor	ecx, esi
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+ebp*4], esi
	inc	ebp
	cmp	ebp, DWORD PTR _nwords$[esp+28]
	jl	SHORT $LL54@BN_constti
$LN66@BN_constti:
	mov	ebp, DWORD PTR _condition$1$[esp+28]
$LN12@BN_constti:
; Line 895
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [esi+36]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+36], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+36], edx
$LN11@BN_constti:
; Line 897
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [esi+32]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+32], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+32], edx
$LN14@BN_constti:
; Line 899
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR [esi+28]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+28], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+28], edx
$LN17@BN_constti:
; Line 901
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [esi+24]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+24], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+24], edx
$LN20@BN_constti:
; Line 903
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [esi+20]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+20], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+20], edx
$LN23@BN_constti:
; Line 905
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR [esi+16]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+16], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+16], edx
$LN26@BN_constti:
; Line 907
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [esi+12]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+12], edx
$LN29@BN_constti:
; Line 909
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+8]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+8], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+8], edx
$LN32@BN_constti:
; Line 911
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [esi+4]
	xor	edx, ecx
	and	edx, ebp
	xor	ecx, edx
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [eax+4], edx
$LN35@BN_constti:
; Line 913
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [esi]
	xor	ecx, edx
	and	ecx, ebp
	xor	edx, ecx
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR [edi]
	pop	edi
	pop	esi
	pop	ebp
	xor	DWORD PTR [eax], ecx
	pop	ebx
; Line 916
	add	esp, 16					; 00000010H
	ret	0
	npad	3
$LN71@BN_constti:
	DD	$LN35@BN_constti
	DD	$LN32@BN_constti
	DD	$LN29@BN_constti
	DD	$LN26@BN_constti
	DD	$LN23@BN_constti
	DD	$LN20@BN_constti
	DD	$LN17@BN_constti
	DD	$LN14@BN_constti
	DD	$LN11@BN_constti
	DD	$LN12@BN_constti
_BN_consttime_swap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_clear_bit
_TEXT	SEGMENT
_a$ = 8							; size = 4
_n$ = 12						; size = 4
_BN_clear_bit PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 749
	push	esi
; Line 753
	mov	esi, DWORD PTR _n$[esp]
	test	esi, esi
	jns	SHORT $LN5@BN_clear_b
; Line 754
	xor	eax, eax
	pop	esi
; Line 764
	ret	0
$LN5@BN_clear_b:
; Line 756
	mov	eax, esi
	cdq
	and	edx, 31					; 0000001fH
	push	edi
; Line 758
	mov	edi, DWORD PTR _a$[esp+4]
	lea	ecx, DWORD PTR [edx+eax]
	sar	ecx, 5
	cmp	DWORD PTR [edi+4], ecx
	jg	SHORT $LN6@BN_clear_b
; Line 759
	pop	edi
	xor	eax, eax
	pop	esi
; Line 764
	ret	0
$LN6@BN_clear_b:
; Line 761
	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR [eax+ecx*4]
	and	esi, -2147483617			; 8000001fH
	jns	SHORT $LN16@BN_clear_b
; Line 757
	dec	esi
	or	esi, -32				; ffffffe0H
	inc	esi
$LN16@BN_clear_b:
; Line 761
	mov	eax, DWORD PTR [ecx]
	btr	eax, esi
	mov	DWORD PTR [ecx], eax
; Line 762
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jle	SHORT $LN7@BN_clear_b
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR [eax-1]
	lea	edx, DWORD PTR [ecx+edx*4]
$LL4@BN_clear_b:
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	ecx, ecx
	jne	SHORT $LN11@BN_clear_b
	dec	eax
	test	eax, eax
	jg	SHORT $LL4@BN_clear_b
$LN11@BN_clear_b:
	mov	DWORD PTR [edi+4], eax
$LN7@BN_clear_b:
	pop	edi
; Line 763
	mov	eax, 1
	pop	esi
; Line 764
	ret	0
_BN_clear_bit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_set_bit
_TEXT	SEGMENT
_a$ = 8							; size = 4
_n$ = 12						; size = 4
_BN_set_bit PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 727
	push	ebx
; Line 730
	mov	ebx, DWORD PTR _n$[esp]
	test	ebx, ebx
	jns	SHORT $LN5@BN_set_bit
; Line 731
	xor	eax, eax
	pop	ebx
; Line 746
	ret	0
$LN5@BN_set_bit:
; Line 733
	mov	eax, ebx
	cdq
	and	edx, 31					; 0000001fH
	push	ebp
	push	esi
	push	edi
	lea	ebp, DWORD PTR [edx+eax]
	sar	ebp, 5
; Line 734
	and	ebx, -2147483617			; 8000001fH
	jns	SHORT $LN18@BN_set_bit
	dec	ebx
	or	ebx, -32				; ffffffe0H
	inc	ebx
$LN18@BN_set_bit:
; Line 735
	mov	esi, DWORD PTR _a$[esp+12]
	cmp	DWORD PTR [esi+4], ebp
	jg	SHORT $LN6@BN_set_bit
; Line 736
	lea	edi, DWORD PTR [ebp+1]
	cmp	edi, DWORD PTR [esi+8]
	jg	SHORT $LN9@BN_set_bit
	mov	eax, esi
	jmp	SHORT $LN10@BN_set_bit
$LN9@BN_set_bit:
	push	edi
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN10@BN_set_bit:
	test	eax, eax
	jne	SHORT $LN7@BN_set_bit
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 746
	ret	0
$LN7@BN_set_bit:
; Line 738
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, edi
	jge	SHORT $LN3@BN_set_bit
	npad	8
$LL4@BN_set_bit:
; Line 739
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [ecx+eax*4], 0
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL4@BN_set_bit
$LN3@BN_set_bit:
; Line 740
	mov	DWORD PTR [esi+4], edi
$LN6@BN_set_bit:
; Line 743
	mov	eax, DWORD PTR [esi]
	pop	edi
	pop	esi
	lea	ecx, DWORD PTR [eax+ebp*4]
	mov	eax, DWORD PTR [ecx]
	bts	eax, ebx
	pop	ebp
	mov	DWORD PTR [ecx], eax
; Line 745
	mov	eax, 1
	pop	ebx
; Line 746
	ret	0
_BN_set_bit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_ucmp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_BN_ucmp PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 665
	mov	edx, DWORD PTR _b$[esp-4]
	push	edi
	mov	edi, DWORD PTR _a$[esp]
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, ecx
	sub	eax, DWORD PTR [edx+4]
; Line 666
	jne	SHORT $LN1@BN_ucmp
; Line 670
	add	ecx, -1
	mov	edi, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx]
	push	esi
	js	SHORT $LN3@BN_ucmp
	lea	eax, DWORD PTR [edx+ecx*4]
	sub	edi, edx
$LL4@BN_ucmp:
; Line 671
	mov	edx, DWORD PTR [edi+eax]
; Line 672
	mov	esi, DWORD PTR [eax]
; Line 673
	cmp	esi, edx
	jne	SHORT $LN14@BN_ucmp
; Line 670
	sub	eax, 4
	sub	ecx, 1
	jns	SHORT $LL4@BN_ucmp
$LN3@BN_ucmp:
; Line 676
	xor	eax, eax
	pop	esi
$LN1@BN_ucmp:
	pop	edi
; Line 677
	ret	0
$LN14@BN_ucmp:
; Line 674
	sbb	eax, eax
	and	eax, 2
	pop	esi
	dec	eax
	pop	edi
; Line 677
	ret	0
_BN_ucmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_dup
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_dup	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 471
	cmp	DWORD PTR _a$[esp-4], 0
	jne	SHORT $LN2@BN_dup
; Line 472
	xor	eax, eax
; Line 484
	ret	0
$LN2@BN_dup:
	push	esi
; Line 475
	call	_BN_new
	mov	esi, eax
; Line 476
	test	esi, esi
	je	SHORT $LN7@BN_dup
; Line 478
	push	DWORD PTR _a$[esp]
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@BN_dup
; Line 479
	push	esi
	call	_BN_free
	add	esp, 4
$LN7@BN_dup:
; Line 480
	xor	eax, eax
	pop	esi
; Line 484
	ret	0
$LN4@BN_dup:
; Line 483
	mov	eax, esi
	pop	esi
; Line 484
	ret	0
_BN_dup	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_clear
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_clear PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 569
	push	esi
; Line 571
	mov	esi, DWORD PTR _a$[esp]
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@BN_clear
; Line 572
	mov	eax, DWORD PTR [esi+8]
	shl	eax, 2
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@BN_clear:
; Line 574
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
; Line 575
	ret	0
_BN_clear ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mask_bits
_TEXT	SEGMENT
_a$ = 8							; size = 4
_n$ = 12						; size = 4
_BN_mask_bits PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 785
	mov	ecx, DWORD PTR _n$[esp-4]
	test	ecx, ecx
	jns	SHORT $LN5@BN_mask_bi
; Line 786
	xor	eax, eax
; Line 800
	ret	0
$LN5@BN_mask_bi:
; Line 788
	mov	eax, ecx
	cdq
	and	edx, 31					; 0000001fH
	add	edx, eax
	sar	edx, 5
	push	esi
; Line 789
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN18@BN_mask_bi
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN18@BN_mask_bi:
; Line 790
	mov	esi, DWORD PTR _a$[esp]
	cmp	edx, DWORD PTR [esi+4]
	jl	SHORT $LN6@BN_mask_bi
; Line 791
	xor	eax, eax
	pop	esi
; Line 800
	ret	0
$LN6@BN_mask_bi:
; Line 792
	test	ecx, ecx
	jne	SHORT $LN7@BN_mask_bi
; Line 793
	mov	DWORD PTR [esi+4], edx
	jmp	SHORT $LN8@BN_mask_bi
$LN7@BN_mask_bi:
; Line 795
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [esi+4], eax
; Line 796
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax+edx*4]
	or	eax, -1
	shl	eax, cl
	not	eax
	and	DWORD PTR [edx], eax
$LN8@BN_mask_bi:
; Line 798
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jle	SHORT $LN9@BN_mask_bi
	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax-1]
	lea	edx, DWORD PTR [ecx+edx*4]
	npad	3
$LL4@BN_mask_bi:
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	ecx, ecx
	jne	SHORT $LN13@BN_mask_bi
	dec	eax
	test	eax, eax
	jg	SHORT $LL4@BN_mask_bi
$LN13@BN_mask_bi:
	mov	DWORD PTR [esi+4], eax
$LN9@BN_mask_bi:
; Line 799
	mov	eax, 1
	pop	esi
; Line 800
	ret	0
_BN_mask_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_is_bit_set
_TEXT	SEGMENT
_a$ = 8							; size = 4
_n$ = 12						; size = 4
_BN_is_bit_set PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 771
	mov	ecx, DWORD PTR _n$[esp-4]
	test	ecx, ecx
	jns	SHORT $LN2@BN_is_bit_
$LN6@BN_is_bit_:
; Line 772
	xor	eax, eax
; Line 778
	ret	0
$LN2@BN_is_bit_:
; Line 773
	mov	eax, ecx
	cdq
	and	edx, 31					; 0000001fH
	add	edx, eax
; Line 775
	mov	eax, DWORD PTR _a$[esp-4]
	sar	edx, 5
	cmp	DWORD PTR [eax+4], edx
	jle	SHORT $LN6@BN_is_bit_
; Line 777
	mov	eax, DWORD PTR [eax]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN5@BN_is_bit_
; Line 774
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN5@BN_is_bit_:
; Line 777
	mov	eax, DWORD PTR [eax+edx*4]
	shr	eax, cl
	and	eax, 1
; Line 778
	ret	0
_BN_is_bit_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 246
	push	esi
; Line 247
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	je	SHORT $LN5@BN_free
; Line 250
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@BN_free
	test	BYTE PTR [esi+16], 2
	jne	SHORT $LN3@BN_free
; Line 251
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN3@BN_free:
; Line 252
	mov	eax, DWORD PTR [esi+16]
	test	al, 1
	je	SHORT $LN4@BN_free
; Line 253
	push	esi
	call	_CRYPTO_free
	add	esp, 4
	pop	esi
; Line 260
	ret	0
$LN4@BN_free:
; Line 256
	or	eax, 32768				; 00008000H
; Line 258
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+16], eax
$LN5@BN_free:
	pop	esi
; Line 260
	ret	0
_BN_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_cmp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_BN_cmp	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 685
	mov	eax, DWORD PTR _a$[esp-4]
	test	eax, eax
	je	$LN7@BN_cmp
	mov	ecx, DWORD PTR _b$[esp-4]
	test	ecx, ecx
	je	SHORT $LN6@BN_cmp
; Line 697
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN13@BN_cmp
; Line 698
	xor	eax, eax
	test	edx, edx
	sete	al
	lea	eax, DWORD PTR [eax*2-1]
; Line 724
	ret	0
$LN13@BN_cmp:
	push	ebx
	push	ebp
; Line 703
	test	edx, edx
	jne	SHORT $LN14@BN_cmp
; Line 704
	lea	ebx, DWORD PTR [edx+1]
; Line 705
	or	ebp, -1
; Line 706
	jmp	SHORT $LN15@BN_cmp
$LN14@BN_cmp:
; Line 707
	or	ebx, -1
; Line 708
	lea	ebp, DWORD PTR [ebx+2]
$LN15@BN_cmp:
; Line 711
	mov	edx, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR [ecx+4]
	cmp	edx, esi
	jle	SHORT $LN31@BN_cmp
; Line 712
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 724
	ret	0
$LN31@BN_cmp:
; Line 713
	jge	SHORT $LN17@BN_cmp
; Line 714
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 724
	ret	0
$LN17@BN_cmp:
; Line 715
	add	edx, -1
	push	edi
	js	SHORT $LN3@BN_cmp
; Line 716
	mov	edi, DWORD PTR [eax]
; Line 717
	mov	eax, DWORD PTR [ecx]
	sub	edi, eax
	lea	ecx, DWORD PTR [eax+edx*4]
$LL4@BN_cmp:
	mov	eax, DWORD PTR [edi+ecx]
	mov	esi, DWORD PTR [ecx]
; Line 718
	cmp	eax, esi
	ja	SHORT $LN22@BN_cmp
; Line 720
	jb	SHORT $LN23@BN_cmp
; Line 715
	sub	ecx, 4
	sub	edx, 1
	jns	SHORT $LL4@BN_cmp
$LN3@BN_cmp:
	pop	edi
	pop	esi
	pop	ebp
; Line 723
	xor	eax, eax
	pop	ebx
; Line 724
	ret	0
$LN23@BN_cmp:
	pop	edi
	pop	esi
; Line 721
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 724
	ret	0
$LN22@BN_cmp:
	pop	edi
	pop	esi
	pop	ebp
; Line 719
	mov	eax, ebx
	pop	ebx
; Line 724
	ret	0
$LN6@BN_cmp:
; Line 687
	or	eax, -1
; Line 724
	ret	0
$LN7@BN_cmp:
; Line 688
	xor	eax, eax
	cmp	DWORD PTR _b$[esp-4], eax
	setne	al
; Line 724
	ret	0
_BN_cmp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get_word
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_get_word PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 579
	mov	ecx, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, 1
	jle	SHORT $LN6@BN_get_wor
; Line 580
	or	eax, -1
; Line 585
	ret	0
$LN6@BN_get_wor:
; Line 581
	jne	SHORT $LN4@BN_get_wor
; Line 582
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
; Line 585
	ret	0
$LN4@BN_get_wor:
; Line 584
	xor	eax, eax
; Line 585
	ret	0
_BN_get_word ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_set_word
_TEXT	SEGMENT
_a$ = 8							; size = 4
_w$ = 12						; size = 4
_BN_set_word PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 588
	push	esi
; Line 590
	mov	esi, DWORD PTR _a$[esp]
	push	edi
	cmp	DWORD PTR [esi+8], 1
	jge	SHORT $LN2@BN_set_wor
; Line 431
	push	1
	push	esi
	call	_bn_expand_internal
	mov	edi, eax
	add	esp, 8
; Line 432
	test	edi, edi
	je	SHORT $LN11@BN_set_wor
; Line 434
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN9@BN_set_wor
; Line 435
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN9@BN_set_wor:
; Line 436
	mov	DWORD PTR [esi], edi
; Line 437
	mov	DWORD PTR [esi+8], 1
$LN2@BN_set_wor:
; Line 593
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _w$[esp+4]
	mov	DWORD PTR [esi+12], 0
	pop	edi
	mov	DWORD PTR [eax], ecx
; Line 594
	xor	eax, eax
	test	ecx, ecx
	setne	al
	mov	DWORD PTR [esi+4], eax
; Line 596
	mov	eax, 1
	pop	esi
; Line 597
	ret	0
$LN11@BN_set_wor:
	pop	edi
; Line 591
	xor	eax, eax
	pop	esi
; Line 597
	ret	0
_BN_set_word ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_set_negative
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_BN_set_negative PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 804
	cmp	DWORD PTR _b$[esp-4], 0
	mov	eax, DWORD PTR _a$[esp-4]
	je	SHORT $LN2@BN_set_neg
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@BN_set_neg
; Line 805
	mov	DWORD PTR [eax+12], 1
; Line 808
	ret	0
$LN2@BN_set_neg:
; Line 807
	mov	DWORD PTR [eax+12], 0
; Line 808
	ret	0
_BN_set_negative ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_bn2bin
_TEXT	SEGMENT
_a$ = 8							; size = 4
_to$ = 12						; size = 4
_BN_bn2bin PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 644
	push	ebx
; Line 649
	mov	ebx, DWORD PTR _a$[esp]
	push	ebp
	push	ebx
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ebp, eax
; Line 650
	test	eax, eax
	je	SHORT $LN6@BN_bn2bin
	push	esi
	push	edi
	mov	edi, DWORD PTR _to$[esp+12]
$LL2@BN_bn2bin:
	dec	eax
; Line 651
	mov	esi, eax
	test	esi, esi
	jns	SHORT $LN13@BN_bn2bin
	add	esi, 3
$LN13@BN_bn2bin:
	sar	esi, 2
; Line 652
	mov	edx, DWORD PTR [ebx]
	mov	ecx, eax
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN11@BN_bn2bin
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN11@BN_bn2bin:
	mov	edx, DWORD PTR [edx+esi*4]
	shl	ecx, 3
	shr	edx, cl
	mov	BYTE PTR [edi], dl
	inc	edi
	test	eax, eax
	jne	SHORT $LL2@BN_bn2bin
; Line 654
	pop	edi
	mov	eax, ebp
	pop	esi
$LN6@BN_bn2bin:
; Line 655
	pop	ebp
	pop	ebx
	ret	0
_BN_bn2bin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_bin2bn
_TEXT	SEGMENT
_bn$1$ = -4						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_i$1$ = 16						; size = 4
_ret$ = 16						; size = 4
_BN_bin2bn PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 600
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 606
	mov	esi, DWORD PTR _ret$[esp+4]
	mov	DWORD PTR _bn$1$[esp+8], 0
	test	esi, esi
	jne	SHORT $LN8@BN_bin2bn
; Line 607
	call	_BN_new
	mov	DWORD PTR _bn$1$[esp+8], eax
	mov	esi, eax
; Line 608
	test	eax, eax
	jne	SHORT $LN8@BN_bin2bn
	pop	esi
; Line 640
	pop	ecx
	ret	0
$LN8@BN_bin2bn:
	push	ebp
; Line 612
	mov	ebp, DWORD PTR _len$[esp+8]
	push	edi
	xor	edi, edi
; Line 613
	test	ebp, ebp
	jne	SHORT $LN9@BN_bin2bn
; Line 614
	mov	DWORD PTR [esi+4], edi
; Line 615
	mov	eax, esi
	pop	edi
	pop	ebp
	pop	esi
; Line 640
	pop	ecx
	ret	0
$LN9@BN_bin2bn:
	push	ebx
; Line 617
	lea	ebx, DWORD PTR [ebp-1]
	mov	eax, ebx
; Line 618
	and	ebx, 3
	shr	eax, 2
	inc	eax
	mov	DWORD PTR _i$1$[esp+16], eax
; Line 619
	cmp	eax, DWORD PTR [esi+8]
	jg	SHORT $LN16@BN_bin2bn
	mov	ecx, esi
	jmp	SHORT $LN17@BN_bin2bn
$LN16@BN_bin2bn:
	push	eax
	push	esi
	call	_bn_expand2
	mov	ecx, eax
	add	esp, 8
	mov	eax, DWORD PTR _i$1$[esp+16]
$LN17@BN_bin2bn:
	test	ecx, ecx
	jne	SHORT $LN10@BN_bin2bn
; Line 620
	mov	eax, DWORD PTR _bn$1$[esp+20]
	test	eax, eax
	je	SHORT $LN11@BN_bin2bn
; Line 621
	push	eax
	call	_BN_free
	add	esp, 4
$LN11@BN_bin2bn:
; Line 622
	pop	ebx
	pop	edi
	pop	ebp
	xor	eax, eax
	pop	esi
; Line 640
	pop	ecx
	ret	0
$LN10@BN_bin2bn:
; Line 624
	mov	edx, DWORD PTR _s$[esp+16]
	lea	ecx, DWORD PTR [eax*4]
	mov	DWORD PTR [esi+4], eax
; Line 625
	mov	DWORD PTR [esi+12], edi
	npad	5
$LL2@BN_bin2bn:
; Line 627
	movzx	eax, BYTE PTR [edx]
	lea	edx, DWORD PTR [edx+1]
	shl	edi, 8
	dec	ebp
	or	edi, eax
; Line 628
	mov	eax, ebx
	dec	ebx
	test	eax, eax
	jne	SHORT $LN12@BN_bin2bn
; Line 629
	mov	eax, DWORD PTR [esi]
	sub	ecx, 4
	mov	DWORD PTR [ecx+eax], edi
; Line 630
	xor	edi, edi
; Line 631
	lea	ebx, DWORD PTR [edi+3]
$LN12@BN_bin2bn:
; Line 626
	test	ebp, ebp
	jne	SHORT $LL2@BN_bin2bn
; Line 638
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	jle	SHORT $LN13@BN_bin2bn
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL6@BN_bin2bn:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN20@BN_bin2bn
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL6@BN_bin2bn
$LN20@BN_bin2bn:
	mov	DWORD PTR [esi+4], ecx
$LN13@BN_bin2bn:
	pop	ebx
	pop	edi
	pop	ebp
; Line 639
	mov	eax, esi
	pop	esi
; Line 640
	pop	ecx
	ret	0
_BN_bin2bn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_swap
_TEXT	SEGMENT
_flags_old_a$1$ = 8					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_BN_swap PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 534
	push	ebx
; Line 542
	mov	ebx, DWORD PTR _a$[esp]
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR [ebx+16]
; Line 545
	mov	edi, DWORD PTR [ebx]
; Line 546
	mov	esi, DWORD PTR [ebx+4]
; Line 547
	mov	edx, DWORD PTR [ebx+8]
	mov	DWORD PTR _flags_old_a$1$[esp+12], eax
	mov	eax, DWORD PTR _b$[esp+12]
; Line 548
	mov	ecx, DWORD PTR [ebx+12]
	mov	ebp, DWORD PTR [eax+16]
; Line 550
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx], eax
; Line 551
	mov	eax, DWORD PTR _b$[esp+12]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ebx+4], eax
; Line 552
	mov	eax, DWORD PTR _b$[esp+12]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ebx+8], eax
; Line 553
	mov	eax, DWORD PTR _b$[esp+12]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ebx+12], eax
; Line 555
	mov	eax, DWORD PTR _b$[esp+12]
; Line 557
	mov	DWORD PTR [eax+8], edx
; Line 560
	mov	edx, DWORD PTR _flags_old_a$1$[esp+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, ebp
	mov	DWORD PTR [eax], edi
	and	ecx, 2
	mov	DWORD PTR [eax+4], esi
; Line 562
	and	ebp, 1
	mov	eax, edx
	and	edx, 2
	and	eax, 1
	or	ebp, edx
	or	ecx, eax
	mov	eax, DWORD PTR _b$[esp+12]
	pop	edi
	mov	DWORD PTR [ebx+16], ecx
	pop	esi
	mov	DWORD PTR [eax+16], ebp
	pop	ebp
	pop	ebx
; Line 566
	ret	0
_BN_swap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_copy
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_BN_copy PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 487
	mov	eax, 4
	call	__chkstk
	push	ebp
; Line 494
	mov	ebp, DWORD PTR _a$[esp+4]
	push	esi
	mov	esi, DWORD PTR _b$[esp+8]
	cmp	ebp, esi
	jne	SHORT $LN7@BN_copy
; Line 495
	pop	esi
	mov	eax, ebp
	pop	ebp
; Line 531
	pop	ecx
	ret	0
$LN7@BN_copy:
	push	ebx
	push	edi
; Line 496
	mov	edi, DWORD PTR [esi+4]
	cmp	edi, DWORD PTR [ebp+8]
	jle	SHORT $LN8@BN_copy
; Line 431
	push	edi
	push	ebp
	call	_bn_expand_internal
	mov	ebx, eax
	add	esp, 8
; Line 432
	test	ebx, ebx
	je	$LN25@BN_copy
; Line 434
	mov	ecx, DWORD PTR [ebp]
	test	ecx, ecx
	je	SHORT $LN19@BN_copy
; Line 435
	push	ecx
	call	_CRYPTO_free
	add	esp, 4
$LN19@BN_copy:
; Line 436
	mov	DWORD PTR [ebp], ebx
; Line 437
	mov	DWORD PTR [ebp+8], edi
$LN8@BN_copy:
; Line 502
	mov	eax, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [ebp]
	mov	ebx, DWORD PTR [esi]
	sar	eax, 2
	test	eax, eax
	jle	SHORT $LN3@BN_copy
	mov	ebp, eax
$LL4@BN_copy:
; Line 505
	mov	ecx, DWORD PTR [ebx+4]
	dec	ebp
; Line 506
	mov	edx, DWORD PTR [ebx+8]
; Line 507
	mov	esi, DWORD PTR [ebx+12]
; Line 508
	mov	eax, DWORD PTR [ebx]
	add	ebx, 16					; 00000010H
	mov	DWORD PTR [edi], eax
; Line 509
	mov	DWORD PTR [edi+4], ecx
; Line 510
	mov	DWORD PTR [edi+8], edx
; Line 511
	mov	DWORD PTR [edi+12], esi
	add	edi, 16					; 00000010H
	test	ebp, ebp
	jg	SHORT $LL4@BN_copy
	mov	ebp, DWORD PTR _a$[esp+16]
	mov	esi, DWORD PTR _b$[esp+16]
$LN3@BN_copy:
; Line 514
	mov	eax, DWORD PTR [esi+4]
	and	eax, 3
	sub	eax, 1
	je	SHORT $LN11@BN_copy
	sub	eax, 1
	je	SHORT $LN10@BN_copy
	sub	eax, 1
	jne	SHORT $LN12@BN_copy
; Line 516
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], eax
$LN10@BN_copy:
; Line 518
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], eax
$LN11@BN_copy:
; Line 520
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edi], eax
$LN12@BN_copy:
; Line 527
	mov	eax, DWORD PTR [esi+4]
	pop	edi
	mov	DWORD PTR [ebp+4], eax
; Line 528
	mov	eax, DWORD PTR [esi+12]
	pop	ebx
	mov	DWORD PTR [ebp+12], eax
; Line 530
	mov	eax, ebp
	pop	esi
	pop	ebp
; Line 531
	pop	ecx
	ret	0
$LN25@BN_copy:
	pop	edi
	pop	ebx
	pop	esi
; Line 497
	xor	eax, eax
	pop	ebp
; Line 531
	pop	ecx
	ret	0
_BN_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_clear_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_clear_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 228
	push	edi
; Line 231
	mov	edi, DWORD PTR _a$[esp]
	test	edi, edi
	je	SHORT $LN5@BN_clear_f
; Line 234
	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN4@BN_clear_f
; Line 235
	mov	eax, DWORD PTR [edi+8]
	shl	eax, 2
	push	eax
	push	ecx
	call	_OPENSSL_cleanse
	add	esp, 8
; Line 236
	test	BYTE PTR [edi+16], 2
	jne	SHORT $LN4@BN_clear_f
; Line 237
	push	DWORD PTR [edi]
	call	_CRYPTO_free
	add	esp, 4
$LN4@BN_clear_f:
; Line 239
	push	esi
	mov	esi, DWORD PTR [edi+16]
; Line 240
	push	20					; 00000014H
	push	edi
	call	_OPENSSL_cleanse
	add	esp, 8
	and	esi, 1
	pop	esi
; Line 241
	je	SHORT $LN5@BN_clear_f
; Line 242
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN5@BN_clear_f:
	pop	edi
; Line 243
	ret	0
_BN_clear_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_init
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_init PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 264
	mov	eax, DWORD PTR _a$[esp-4]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], 0
; Line 266
	ret	0
_BN_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_new
_TEXT	SEGMENT
_BN_new	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 272
	push	272					; 00000110H
	push	OFFSET ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
	push	20					; 00000014H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@BN_new
; Line 273
	push	273					; 00000111H
	push	OFFSET ??_C@_0BF@OGBNCIDG@?4?2crypto?2bn?2bn_lib?4c?$AA@
	push	65					; 00000041H
	push	113					; 00000071H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 274
	xor	eax, eax
; Line 283
	ret	0
$LN2@BN_new:
; Line 276
	mov	DWORD PTR [eax+16], 1
; Line 277
	mov	DWORD PTR [eax+4], 0
; Line 278
	mov	DWORD PTR [eax+12], 0
; Line 279
	mov	DWORD PTR [eax+8], 0
; Line 280
	mov	DWORD PTR [eax], 0
; Line 283
	ret	0
_BN_new	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_num_bits_word
_TEXT	SEGMENT
_l$ = 8							; size = 4
_BN_num_bits_word PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 199
	mov	eax, DWORD PTR _l$[esp-4]
	test	eax, -65536				; ffff0000H
	je	SHORT $LN2@BN_num_bit
; Line 200
	test	eax, -16777216				; ff000000H
	je	SHORT $LN4@BN_num_bit
; Line 201
	shr	eax, 24					; 00000018H
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
	add	eax, 24					; 00000018H
; Line 215
	ret	0
$LN4@BN_num_bit:
; Line 203
	shr	eax, 16					; 00000010H
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
	add	eax, 16					; 00000010H
; Line 215
	ret	0
$LN2@BN_num_bit:
; Line 208
	test	eax, 65280				; 0000ff00H
	je	SHORT $LN6@BN_num_bit
; Line 209
	shr	eax, 8
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
	add	eax, 8
; Line 215
	ret	0
$LN6@BN_num_bit:
; Line 212
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
; Line 215
	ret	0
_BN_num_bits_word ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_num_bits
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BN_num_bits PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 219
	mov	edx, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax-1]
; Line 222
	test	eax, eax
	jne	SHORT $LN2@BN_num_bit
; Line 225
	ret	0
$LN2@BN_num_bit:
; Line 224
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 199
	test	eax, -65536				; ffff0000H
	je	SHORT $LN5@BN_num_bit
; Line 200
	test	eax, -16777216				; ff000000H
	je	SHORT $LN7@BN_num_bit
; Line 201
	shr	eax, 24					; 00000018H
; Line 224
	shl	ecx, 5
; Line 201
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
	add	eax, 24					; 00000018H
; Line 224
	add	eax, ecx
; Line 225
	ret	0
$LN7@BN_num_bit:
; Line 203
	shr	eax, 16					; 00000010H
; Line 224
	shl	ecx, 5
; Line 203
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
	add	eax, 16					; 00000010H
; Line 224
	add	eax, ecx
; Line 225
	ret	0
$LN5@BN_num_bit:
; Line 208
	test	eax, 65280				; 0000ff00H
	je	SHORT $LN9@BN_num_bit
; Line 209
	shr	eax, 8
; Line 224
	shl	ecx, 5
; Line 209
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
	add	eax, 8
; Line 224
	add	eax, ecx
; Line 225
	ret	0
$LN9@BN_num_bit:
; Line 212
	movzx	eax, BYTE PTR ?bits@?1??BN_num_bits_word@@9@9[eax]
; Line 224
	shl	ecx, 5
	add	eax, ecx
; Line 225
	ret	0
_BN_num_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_value_one
_TEXT	SEGMENT
_BN_value_one PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_lib.c
; Line 142
	mov	eax, OFFSET ?const_one@?1??BN_value_one@@9@9
; Line 143
	ret	0
_BN_value_one ENDP
_TEXT	ENDS
END
