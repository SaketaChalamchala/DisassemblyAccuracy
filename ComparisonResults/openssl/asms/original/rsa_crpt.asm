; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_RSA_size
PUBLIC	_RSA_public_encrypt
PUBLIC	_RSA_private_encrypt
PUBLIC	_RSA_public_decrypt
PUBLIC	_RSA_private_decrypt
PUBLIC	_RSA_flags
PUBLIC	_RSA_blinding_on
PUBLIC	_RSA_blinding_off
PUBLIC	_RSA_setup_blinding
PUBLIC	??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@ ; `string'
EXTRN	_CRYPTO_THREADID_current:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_value_one:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_sub:PROC
EXTRN	_BN_mul:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_mod_inverse:PROC
EXTRN	_BN_BLINDING_free:PROC
EXTRN	_BN_BLINDING_thread_id:PROC
EXTRN	_BN_BLINDING_create_param:PROC
EXTRN	_RAND_add:PROC
EXTRN	_RAND_status:PROC
EXTRN	__chkstk:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@
CONST	SEGMENT
??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@ DB '.\crypto\rsa\rsa'
	DB	'_crpt.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _rsa_get_public_exp
_TEXT	SEGMENT
_r1$1$ = -12						; size = 4
_r2$1$ = -8						; size = 4
_r0$1$ = -4						; size = 4
_d$ = 8							; size = 4
_p$ = 12						; size = 4
_q$ = 16						; size = 4
_ctx$ = 20						; size = 4
_rsa_get_public_exp PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 162
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebx
; Line 163
	xor	ebx, ebx
	push	ebp
; Line 165
	cmp	DWORD PTR _d$[esp+16], ebx
	je	$LN3@rsa_get_pu
	mov	ebp, DWORD PTR _p$[esp+16]
	test	ebp, ebp
	je	$LN3@rsa_get_pu
	cmp	DWORD PTR _q$[esp+16], ebx
	je	$LN3@rsa_get_pu
; Line 168
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+20]
	push	esi
	call	_BN_CTX_start
; Line 169
	push	esi
	call	_BN_CTX_get
; Line 170
	push	esi
	mov	DWORD PTR _r0$1$[esp+36], eax
	call	_BN_CTX_get
; Line 171
	push	esi
	mov	DWORD PTR _r1$1$[esp+40], eax
	call	_BN_CTX_get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r2$1$[esp+24], eax
; Line 172
	test	eax, eax
	je	SHORT $err$10
; Line 175
	call	_BN_value_one
	push	eax
	push	ebp
	push	DWORD PTR _r1$1$[esp+32]
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$10
; Line 177
	call	_BN_value_one
	mov	ebp, DWORD PTR _r2$1$[esp+24]
	push	eax
	push	DWORD PTR _q$[esp+24]
	push	ebp
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$10
; Line 179
	push	esi
	push	ebp
	push	DWORD PTR _r1$1$[esp+32]
	mov	ebp, DWORD PTR _r0$1$[esp+36]
	push	ebp
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$10
; Line 182
	push	esi
	push	ebp
	push	DWORD PTR _d$[esp+28]
	push	ebx
	call	_BN_mod_inverse
	add	esp, 16					; 00000010H
	mov	ebx, eax
$err$10:
; Line 184
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 185
	mov	eax, ebx
	pop	esi
	pop	ebp
	pop	ebx
; Line 186
	add	esp, 12					; 0000000cH
	ret	0
$LN3@rsa_get_pu:
	pop	ebp
; Line 166
	xor	eax, eax
	pop	ebx
; Line 186
	add	esp, 12					; 0000000cH
	ret	0
_rsa_get_public_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_setup_blinding
_TEXT	SEGMENT
_local_n$ = -20						; size = 20
_rsa$ = 8						; size = 4
_in_ctx$ = 12						; size = 4
_RSA_setup_blinding PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 189
	mov	eax, 20					; 00000014H
	call	__chkstk
; Line 195
	mov	eax, DWORD PTR _in_ctx$[esp+16]
	push	ebp
	xor	ebp, ebp
	push	edi
	test	eax, eax
	jne	SHORT $LN2@RSA_setup_
; Line 196
	call	_BN_CTX_new
	mov	edi, eax
	test	edi, edi
	jne	SHORT $LN3@RSA_setup_
	pop	edi
	pop	ebp
; Line 247
	add	esp, 20					; 00000014H
	ret	0
$LN2@RSA_setup_:
; Line 199
	mov	edi, eax
$LN3@RSA_setup_:
	push	ebx
	push	esi
; Line 201
	push	edi
	call	_BN_CTX_start
; Line 202
	push	edi
	call	_BN_CTX_get
; Line 203
	mov	esi, DWORD PTR _rsa$[esp+40]
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	jne	SHORT $LN5@RSA_setup_
; Line 204
	push	204					; 000000ccH
	push	OFFSET ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@
	push	65					; 00000041H
	push	136					; 00000088H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 205
	jmp	$err$17
$LN5@RSA_setup_:
; Line 208
	mov	ebx, DWORD PTR [esi+20]
	test	ebx, ebx
	jne	SHORT $LN6@RSA_setup_
; Line 209
	push	edi
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+28]
	push	DWORD PTR [esi+24]
	call	_rsa_get_public_exp
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 210
	test	ebx, ebx
	jne	SHORT $LN6@RSA_setup_
; Line 211
	push	211					; 000000d3H
	push	OFFSET ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@
	push	140					; 0000008cH
	push	136					; 00000088H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 212
	jmp	$err$17
$LN6@RSA_setup_:
; Line 217
	call	_RAND_status
	test	eax, eax
	jne	SHORT $LN9@RSA_setup_
	mov	ecx, DWORD PTR [esi+24]
	test	ecx, ecx
	je	SHORT $LN9@RSA_setup_
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN9@RSA_setup_
; Line 222
	mov	eax, 8
	call	__chkstk
	mov	eax, DWORD PTR [ecx+8]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	shl	eax, 2
	push	eax
	push	edx
	call	_RAND_add
	add	esp, 16					; 00000010H
$LN9@RSA_setup_:
; Line 225
	test	DWORD PTR [esi+60], 256			; 00000100H
	jne	SHORT $LN10@RSA_setup_
; Line 228
	mov	ecx, DWORD PTR [esi+16]
	lea	edx, DWORD PTR _local_n$[esp+36]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _local_n$[esp+36], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _local_n$[esp+40], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _local_n$[esp+44], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _local_n$[esp+48], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _local_n$[esp+52]
	and	ecx, -2					; fffffffeH
	and	eax, 1
	or	ecx, eax
	or	ecx, 6
	mov	DWORD PTR _local_n$[esp+52], ecx
; Line 229
	jmp	SHORT $LN11@RSA_setup_
$LN10@RSA_setup_:
; Line 230
	mov	edx, DWORD PTR [esi+16]
$LN11@RSA_setup_:
; Line 232
	push	DWORD PTR [esi+64]
	mov	eax, DWORD PTR [esi+8]
	push	DWORD PTR [eax+24]
	push	edi
	push	edx
	push	ebx
	push	0
	call	_BN_BLINDING_create_param
	mov	ebp, eax
	add	esp, 24					; 00000018H
; Line 234
	test	ebp, ebp
	jne	SHORT $LN12@RSA_setup_
; Line 235
	push	235					; 000000ebH
	push	OFFSET ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@
	push	3
	push	136					; 00000088H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 236
	jmp	SHORT $err$17
$LN12@RSA_setup_:
; Line 238
	push	ebp
	call	_BN_BLINDING_thread_id
	push	eax
	call	_CRYPTO_THREADID_current
	add	esp, 8
$err$17:
; Line 240
	push	edi
	call	_BN_CTX_end
	add	esp, 4
; Line 241
	cmp	DWORD PTR _in_ctx$[esp+32], 0
	jne	SHORT $LN13@RSA_setup_
; Line 242
	push	edi
	call	_BN_CTX_free
	add	esp, 4
$LN13@RSA_setup_:
; Line 243
	cmp	DWORD PTR [esi+20], 0
	jne	SHORT $LN14@RSA_setup_
; Line 244
	push	ebx
	call	_BN_free
	add	esp, 4
$LN14@RSA_setup_:
; Line 246
	pop	esi
	pop	ebx
	pop	edi
	mov	eax, ebp
	pop	ebp
; Line 247
	add	esp, 20					; 00000014H
	ret	0
_RSA_setup_blinding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_blinding_off
_TEXT	SEGMENT
_rsa$ = 8						; size = 4
_RSA_blinding_off PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 133
	push	esi
; Line 134
	mov	esi, DWORD PTR _rsa$[esp]
	mov	eax, DWORD PTR [esi+80]
	test	eax, eax
	je	SHORT $LN2@RSA_blindi
; Line 135
	push	eax
	call	_BN_BLINDING_free
	add	esp, 4
; Line 136
	mov	DWORD PTR [esi+80], 0
$LN2@RSA_blindi:
; Line 138
	mov	eax, DWORD PTR [esi+60]
	and	eax, -9					; fffffff7H
; Line 139
	or	eax, 128				; 00000080H
	mov	DWORD PTR [esi+60], eax
	pop	esi
; Line 140
	ret	0
_RSA_blinding_off ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_blinding_on
_TEXT	SEGMENT
_rsa$ = 8						; size = 4
_ctx$ = 12						; size = 4
_RSA_blinding_on PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 143
	push	esi
; Line 146
	mov	esi, DWORD PTR _rsa$[esp]
	mov	eax, DWORD PTR [esi+80]
	test	eax, eax
	je	SHORT $LN5@RSA_blindi
; Line 135
	push	eax
	call	_BN_BLINDING_free
; Line 138
	mov	eax, DWORD PTR [esi+60]
	add	esp, 4
	and	eax, -9					; fffffff7H
	mov	DWORD PTR [esi+80], 0
; Line 139
	or	eax, 128				; 00000080H
	mov	DWORD PTR [esi+60], eax
$LN5@RSA_blindi:
; Line 149
	push	DWORD PTR _ctx$[esp]
	push	esi
	call	_RSA_setup_blinding
	add	esp, 8
	mov	DWORD PTR [esi+80], eax
; Line 150
	test	eax, eax
	je	SHORT $LN8@RSA_blindi
; Line 154
	mov	eax, DWORD PTR [esi+60]
	and	eax, -129				; ffffff7fH
	or	eax, 8
	mov	DWORD PTR [esi+60], eax
; Line 157
	mov	eax, 1
	pop	esi
; Line 158
	ret	0
$LN8@RSA_blindi:
; Line 157
	xor	eax, eax
$err$10:
	pop	esi
; Line 158
	ret	0
_RSA_blinding_on ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_flags
_TEXT	SEGMENT
_r$ = 8							; size = 4
_RSA_flags PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 129
	mov	eax, DWORD PTR _r$[esp-4]
	test	eax, eax
	jne	SHORT $LN3@RSA_flags
; Line 130
	ret	0
$LN3@RSA_flags:
; Line 129
	mov	eax, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+36]
; Line 130
	ret	0
_RSA_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_private_decrypt
_TEXT	SEGMENT
_flen$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_rsa$ = 20						; size = 4
_padding$ = 24						; size = 4
_RSA_private_decrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 111
	mov	eax, DWORD PTR _rsa$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rsa$[esp-4], eax
	mov	eax, DWORD PTR [ecx+16]
	jmp	eax
_RSA_private_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_public_decrypt
_TEXT	SEGMENT
_flen$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_rsa$ = 20						; size = 4
_padding$ = 24						; size = 4
_RSA_public_decrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 124
	mov	eax, DWORD PTR _rsa$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rsa$[esp-4], eax
	mov	eax, DWORD PTR [ecx+8]
	jmp	eax
_RSA_public_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_private_encrypt
_TEXT	SEGMENT
_flen$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_rsa$ = 20						; size = 4
_padding$ = 24						; size = 4
_RSA_private_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 98
	mov	eax, DWORD PTR _rsa$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rsa$[esp-4], eax
	mov	eax, DWORD PTR [ecx+12]
	jmp	eax
_RSA_private_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_public_encrypt
_TEXT	SEGMENT
_flen$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_rsa$ = 20						; size = 4
_padding$ = 24						; size = 4
_RSA_public_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 85
	mov	eax, DWORD PTR _rsa$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rsa$[esp-4], eax
	mov	eax, DWORD PTR [ecx+4]
	jmp	eax
_RSA_public_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_size
_TEXT	SEGMENT
_r$ = 8							; size = 4
_RSA_size PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_crpt.c
; Line 72
	mov	eax, DWORD PTR _r$[esp-4]
	push	DWORD PTR [eax+16]
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
; Line 73
	ret	0
_RSA_size ENDP
_TEXT	ENDS
END
