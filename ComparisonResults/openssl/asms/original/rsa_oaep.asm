; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_PKCS1_MGF1
PUBLIC	_RSA_padding_add_PKCS1_OAEP
PUBLIC	_RSA_padding_check_PKCS1_OAEP
PUBLIC	_RSA_padding_add_PKCS1_OAEP_mgf1
PUBLIC	_RSA_padding_check_PKCS1_OAEP_mgf1
PUBLIC	??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_CRYPTO_memcmp:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_MD_CTX_init:PROC
EXTRN	_EVP_MD_CTX_cleanup:PROC
EXTRN	_EVP_DigestInit_ex:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal_ex:PROC
EXTRN	_EVP_Digest:PROC
EXTRN	_EVP_sha1:PROC
EXTRN	_RAND_bytes:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
CONST	SEGMENT
??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@ DB '.\crypto\rsa\rsa'
	DB	'_oaep.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_padding_check_PKCS1_OAEP_mgf1
_TEXT	SEGMENT
_from$GSCopy$1$ = -176					; size = 4
_good$1$ = -176						; size = 4
tv1044 = -172						; size = 4
_dblen$1$ = -172					; size = 4
_md$GSCopy$1$ = -168					; size = 4
_found_one_byte$1$ = -168				; size = 4
_em$1$ = -164						; size = 4
_flen$GSCopy$1$ = -160					; size = 4
_maskeddb$1$ = -160					; size = 4
_i$3$ = -156						; size = 4
_one_index$1$ = -152					; size = 4
tv1055 = -148						; size = 4
tv1048 = -148						; size = 4
_mgf1md$GSCopy$2$ = -144				; size = 4
_param$GSCopy$1$ = -140					; size = 4
_to$GSCopy$1$ = -136					; size = 4
_seed$ = -132						; size = 64
_phash$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_to$ = 8						; size = 4
_tlen$ = 12						; size = 4
_from$ = 16						; size = 4
_flen$ = 20						; size = 4
_num$ = 24						; size = 4
_param$ = 28						; size = 4
_plen$ = 32						; size = 4
_md$ = 36						; size = 4
_mgf1md$ = 40						; size = 4
_RSA_padding_check_PKCS1_OAEP_mgf1 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 118
	mov	eax, 176				; 000000b0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+176], eax
	mov	eax, DWORD PTR _to$[esp+172]
	mov	ecx, DWORD PTR _md$[esp+172]
	push	ebx
	mov	ebx, DWORD PTR _flen$[esp+176]
	mov	DWORD PTR _to$GSCopy$1$[esp+180], eax
	mov	eax, DWORD PTR _from$[esp+176]
	push	ebp
	mov	DWORD PTR _from$GSCopy$1$[esp+184], eax
; Line 126
	xor	ebp, ebp
	mov	eax, DWORD PTR _param$[esp+180]
	push	esi
	mov	esi, DWORD PTR _num$[esp+184]
	mov	DWORD PTR _param$GSCopy$1$[esp+188], eax
	xor	eax, eax
	mov	DWORD PTR _flen$GSCopy$1$[esp+188], ebx
	mov	DWORD PTR _md$GSCopy$1$[esp+188], ecx
	mov	DWORD PTR _one_index$1$[esp+188], 0
	mov	DWORD PTR _em$1$[esp+188], eax
	push	edi
	mov	edi, DWORD PTR _mgf1md$[esp+188]
; Line 130
	test	ecx, ecx
	jne	SHORT $LN11@RSA_paddin
; Line 131
	call	_EVP_sha1
	mov	ecx, eax
	mov	DWORD PTR _md$GSCopy$1$[esp+192], eax
$LN11@RSA_paddin:
; Line 132
	test	edi, edi
; Line 135
	push	ecx
	cmove	edi, ecx
	mov	DWORD PTR _mgf1md$GSCopy$2$[esp+196], edi
	call	_EVP_MD_size
	add	esp, 4
	mov	edi, eax
	mov	DWORD PTR _i$3$[esp+192], edi
; Line 137
	cmp	DWORD PTR _tlen$[esp+188], ebp
	jle	$LN14@RSA_paddin
	test	ebx, ebx
	jle	$LN14@RSA_paddin
; Line 147
	cmp	esi, ebx
	jl	$LN81@RSA_paddin
	lea	eax, DWORD PTR [edi*2+2]
	cmp	esi, eax
	jl	$LN81@RSA_paddin
; Line 150
	mov	ebx, esi
; Line 151
	push	151					; 00000097H
	sub	ebx, edi
	dec	ebx
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	ebx
	mov	DWORD PTR _dblen$1$[esp+204], ebx
	call	_CRYPTO_malloc
; Line 152
	push	152					; 00000098H
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	esi
	mov	ebp, eax
	call	_CRYPTO_malloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _em$1$[esp+192], eax
; Line 153
	test	ebp, ebp
	je	$LN18@RSA_paddin
	test	eax, eax
	je	$LN18@RSA_paddin
; Line 166
	push	esi
	push	0
	push	eax
	call	_memset
; Line 167
	mov	eax, DWORD PTR _flen$GSCopy$1$[esp+204]
	sub	esi, eax
	add	esi, DWORD PTR _em$1$[esp+204]
	push	eax
	push	DWORD PTR _from$GSCopy$1$[esp+208]
	push	esi
	call	_memcpy
; Line 174
	mov	edx, DWORD PTR _em$1$[esp+216]
; Line 179
	push	DWORD PTR _mgf1md$GSCopy$2$[esp+216]
	push	ebx
	movzx	eax, BYTE PTR [edx]
	lea	esi, DWORD PTR [edx+1]
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 174
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	ecx, eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 177
	lea	eax, DWORD PTR [edx+1]
	add	eax, edi
	neg	ecx
; Line 179
	push	eax
	mov	DWORD PTR _maskeddb$1$[esp+228], eax
	lea	eax, DWORD PTR _seed$[esp+228]
	push	edi
	push	eax
	mov	DWORD PTR _good$1$[esp+236], ecx
	call	_PKCS1_MGF1
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	$LN78@RSA_paddin
; Line 181
	xor	edx, edx
	test	edi, edi
	jle	$LN3@RSA_paddin
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN57@RSA_paddin
; Line 182
	lea	eax, DWORD PTR [esi-1]
	lea	ebx, DWORD PTR _seed$[esp+192]
	add	eax, edi
	cmp	ebx, eax
	lea	ecx, DWORD PTR _seed$[esp+edi+191]
	mov	ebx, DWORD PTR _dblen$1$[esp+192]
	ja	SHORT $LN58@RSA_paddin
	cmp	ecx, esi
	jae	SHORT $LN57@RSA_paddin
$LN58@RSA_paddin:
	mov	eax, edi
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN82@RSA_paddin
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN82@RSA_paddin:
	mov	ecx, edi
; Line 181
	mov	edi, esi
	sub	ecx, eax
	lea	eax, DWORD PTR _seed$[esp+192]
	mov	ebx, eax
	sub	edi, ebx
	mov	DWORD PTR tv1048[esp+192], edi
	mov	edi, DWORD PTR _i$3$[esp+192]
	mov	ebx, DWORD PTR tv1048[esp+192]
	npad	10
$LL4@RSA_paddin:
; Line 182
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [ebx+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [esi+edx+16]
	add	edx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	edx, ecx
	jl	SHORT $LL4@RSA_paddin
	mov	ebx, DWORD PTR _dblen$1$[esp+192]
$LN57@RSA_paddin:
; Line 181
	cmp	edx, edi
	jge	SHORT $LN3@RSA_paddin
	lea	eax, DWORD PTR _seed$[esp+192]
	sub	esi, eax
	npad	7
$LL56@RSA_paddin:
; Line 182
	lea	ecx, DWORD PTR _seed$[esp+192]
	add	ecx, edx
	inc	edx
	mov	al, BYTE PTR [esi+ecx]
	xor	BYTE PTR [ecx], al
	cmp	edx, edi
	jl	SHORT $LL56@RSA_paddin
$LN3@RSA_paddin:
; Line 184
	push	DWORD PTR _mgf1md$GSCopy$2$[esp+192]
	lea	eax, DWORD PTR _seed$[esp+196]
	push	edi
	push	eax
	push	ebx
	push	ebp
	call	_PKCS1_MGF1
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN78@RSA_paddin
; Line 186
	xor	esi, esi
	test	ebx, ebx
	jle	$LN6@RSA_paddin
	cmp	ebx, 32					; 00000020H
	jb	SHORT $LN60@RSA_paddin
; Line 187
	mov	ecx, DWORD PTR _maskeddb$1$[esp+192]
	lea	edx, DWORD PTR [ebp-1]
	add	edx, ebx
	lea	eax, DWORD PTR [ecx-1]
	add	eax, ebx
	cmp	ebp, eax
	ja	SHORT $LN61@RSA_paddin
	cmp	edx, ecx
	jae	SHORT $LN60@RSA_paddin
$LN61@RSA_paddin:
	mov	eax, ebx
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN83@RSA_paddin
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN83@RSA_paddin:
; Line 186
	mov	DWORD PTR tv1044[esp+192], ecx
	mov	edx, ebx
	sub	DWORD PTR tv1044[esp+192], ebp
	sub	edx, eax
	add	ecx, 16					; 00000010H
	mov	eax, ebp
	mov	DWORD PTR tv1055[esp+192], ecx
	mov	ecx, DWORD PTR tv1044[esp+192]
	mov	edi, DWORD PTR tv1055[esp+192]
	npad	4
$LL7@RSA_paddin:
; Line 187
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [ecx+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [edi+esi]
	add	esi, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	esi, edx
	jl	SHORT $LL7@RSA_paddin
	mov	edi, DWORD PTR _i$3$[esp+192]
$LN60@RSA_paddin:
; Line 186
	cmp	esi, ebx
	jge	SHORT $LN6@RSA_paddin
	mov	edi, DWORD PTR _maskeddb$1$[esp+192]
	lea	ecx, DWORD PTR [esi+ebp]
	mov	edx, ebx
	sub	edi, ebp
	sub	edx, esi
	npad	1
$LL59@RSA_paddin:
; Line 187
	mov	al, BYTE PTR [ecx+edi]
	lea	ecx, DWORD PTR [ecx+1]
	xor	BYTE PTR [ecx-1], al
	sub	edx, 1
	jne	SHORT $LL59@RSA_paddin
	mov	edi, DWORD PTR _i$3$[esp+192]
$LN6@RSA_paddin:
; Line 189
	push	0
	push	DWORD PTR _md$GSCopy$1$[esp+196]
	lea	eax, DWORD PTR _phash$[esp+200]
	push	0
	push	eax
	push	DWORD PTR _plen$[esp+204]
	push	DWORD PTR _param$GSCopy$1$[esp+212]
	call	_EVP_Digest
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN78@RSA_paddin
; Line 192
	push	edi
	lea	eax, DWORD PTR _phash$[esp+196]
	push	eax
	push	ebp
	call	_CRYPTO_memcmp
	mov	edx, DWORD PTR _good$1$[esp+204]
	add	esp, 12					; 0000000cH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 192
	shr	ecx, 31					; 0000001fH
	shr	eax, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	ecx, eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 192
	neg	ecx
	and	edx, ecx
; Line 194
	xor	ecx, ecx
	mov	DWORD PTR _good$1$[esp+192], edx
	mov	DWORD PTR _found_one_byte$1$[esp+192], ecx
; Line 195
	cmp	edi, ebx
	jge	SHORT $LN9@RSA_paddin
$LL62@RSA_paddin:
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	movzx	esi, BYTE PTR [edi+ebp]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 201
	not	ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	mov	eax, esi
	xor	eax, 1
; Line 160
	lea	edx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 199
	shr	eax, 31					; 0000001fH
	shr	edx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	edx, eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 199
	neg	edx
; Line 201
	and	ecx, edx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 192
	mov	eax, ecx
	and	ecx, edi
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 195
	inc	edi
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 192
	and	eax, DWORD PTR _one_index$1$[esp+192]
	or	eax, ecx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 203
	mov	ecx, DWORD PTR _found_one_byte$1$[esp+192]
	mov	DWORD PTR _one_index$1$[esp+192], eax
	or	ecx, edx
; Line 204
	mov	edx, DWORD PTR _good$1$[esp+192]
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	eax, DWORD PTR [esi-1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 204
	shr	eax, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	not	esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 204
	shr	esi, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	eax, esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 203
	mov	DWORD PTR _found_one_byte$1$[esp+192], ecx
	neg	eax
; Line 204
	or	eax, ecx
	and	edx, eax
	mov	DWORD PTR _good$1$[esp+192], edx
	cmp	edi, ebx
	jl	SHORT $LL62@RSA_paddin
$LN9@RSA_paddin:
; Line 207
	test	ecx, edx
; Line 214
	je	SHORT $LN81@RSA_paddin
; Line 217
	mov	eax, DWORD PTR _one_index$1$[esp+192]
; Line 218
	mov	esi, ebx
	inc	eax
	sub	esi, eax
; Line 220
	cmp	DWORD PTR _tlen$[esp+188], esi
	jge	SHORT $LN23@RSA_paddin
; Line 221
	push	221					; 000000ddH
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	109					; 0000006dH
	push	161					; 000000a1H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN81@RSA_paddin:
	or	esi, -1
$decoding_err$86:
; Line 233
	push	234					; 000000eaH
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	121					; 00000079H
	push	161					; 000000a1H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	jmp	SHORT $cleanup$87
$LN23@RSA_paddin:
; Line 224
	push	esi
	add	eax, ebp
	push	eax
	push	DWORD PTR _to$GSCopy$1$[esp+200]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 225
	jmp	SHORT $cleanup$87
$LN18@RSA_paddin:
; Line 154
	push	154					; 0000009aH
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	65					; 00000041H
	push	161					; 000000a1H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN78@RSA_paddin:
	or	esi, -1
$cleanup$87:
; Line 236
	test	ebp, ebp
	je	SHORT $LN25@RSA_paddin
; Line 237
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$LN25@RSA_paddin:
; Line 238
	mov	eax, DWORD PTR _em$1$[esp+192]
	test	eax, eax
	je	SHORT $LN26@RSA_paddin
; Line 239
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN26@RSA_paddin:
; Line 240
	mov	eax, esi
	jmp	SHORT $LN1@RSA_paddin
$LN14@RSA_paddin:
; Line 138
	or	eax, -1
$LN1@RSA_paddin:
; Line 241
	mov	ecx, DWORD PTR __$ArrayPad$[esp+192]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 176				; 000000b0H
	ret	0
_RSA_padding_check_PKCS1_OAEP_mgf1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_padding_add_PKCS1_OAEP_mgf1
_TEXT	SEGMENT
_md$GSCopy$1$ = -104					; size = 4
_dbmask$1$ = -104					; size = 4
_to$GSCopy$1$ = -100					; size = 4
_seed$1$ = -100						; size = 4
tv836 = -96						; size = 4
tv785 = -96						; size = 4
_from$GSCopy$1$ = -92					; size = 4
tv828 = -92						; size = 4
_flen$GSCopy$1$ = -88					; size = 4
_mdlen$1$ = -84						; size = 4
_mgf1md$GSCopy$2$ = -80					; size = 4
_param$GSCopy$1$ = -76					; size = 4
_db$1$ = -72						; size = 4
_seedmask$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_to$ = 8						; size = 4
_tlen$ = 12						; size = 4
_from$ = 16						; size = 4
_flen$ = 20						; size = 4
_param$ = 24						; size = 4
_plen$ = 28						; size = 4
_md$ = 32						; size = 4
_mgf1md$ = 36						; size = 4
_RSA_padding_add_PKCS1_OAEP_mgf1 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 43
	mov	eax, 104				; 00000068H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+104], eax
	mov	eax, DWORD PTR _to$[esp+100]
	mov	ecx, DWORD PTR _md$[esp+100]
	push	ebx
	mov	ebx, DWORD PTR _flen$[esp+104]
	push	ebp
	mov	ebp, DWORD PTR _mgf1md$[esp+108]
	push	esi
	push	edi
; Line 44
	mov	edi, DWORD PTR _tlen$[esp+116]
	mov	DWORD PTR _to$GSCopy$1$[esp+120], eax
	dec	edi
	mov	eax, DWORD PTR _from$[esp+116]
	mov	DWORD PTR _from$GSCopy$1$[esp+120], eax
	mov	eax, DWORD PTR _param$[esp+116]
	mov	DWORD PTR _flen$GSCopy$1$[esp+120], ebx
	mov	DWORD PTR _param$GSCopy$1$[esp+120], eax
	mov	DWORD PTR _md$GSCopy$1$[esp+120], ecx
; Line 49
	test	ecx, ecx
	jne	SHORT $LN8@RSA_paddin
; Line 50
	call	_EVP_sha1
	mov	ecx, eax
	mov	DWORD PTR _md$GSCopy$1$[esp+120], eax
$LN8@RSA_paddin:
; Line 51
	test	ebp, ebp
; Line 54
	push	ecx
	cmove	ebp, ecx
	mov	DWORD PTR _mgf1md$GSCopy$2$[esp+124], ebp
	call	_EVP_MD_size
	mov	esi, eax
; Line 56
	mov	ecx, edi
	add	esp, 4
	mov	DWORD PTR _mdlen$1$[esp+120], esi
	lea	eax, DWORD PTR [esi+esi]
	sub	ecx, eax
	mov	DWORD PTR tv785[esp+120], ecx
	dec	ecx
	cmp	ebx, ecx
	jle	SHORT $LN10@RSA_paddin
; Line 57
	push	58					; 0000003aH
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	110					; 0000006eH
$LN42@RSA_paddin:
	push	160					; 000000a0H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN43@RSA_paddin:
; Line 59
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 103
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	ret	0
$LN10@RSA_paddin:
; Line 62
	inc	eax
	cmp	edi, eax
	jge	SHORT $LN11@RSA_paddin
; Line 63
	push	64					; 00000040H
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	120					; 00000078H
; Line 65
	jmp	SHORT $LN42@RSA_paddin
$LN11@RSA_paddin:
; Line 68
	mov	eax, DWORD PTR _to$GSCopy$1$[esp+120]
; Line 72
	push	0
	push	DWORD PTR _md$GSCopy$1$[esp+124]
	lea	ebp, DWORD PTR [eax+1]
	mov	BYTE PTR [eax], 0
	push	0
	add	ebp, esi
	lea	ebx, DWORD PTR [eax+1]
	push	ebp
	push	DWORD PTR _plen$[esp+132]
	mov	DWORD PTR _seed$1$[esp+140], ebx
	push	DWORD PTR _param$GSCopy$1$[esp+140]
	mov	DWORD PTR _db$1$[esp+144], ebp
	call	_EVP_Digest
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN43@RSA_paddin
; Line 74
	mov	eax, DWORD PTR tv785[esp+120]
	sub	eax, DWORD PTR _flen$GSCopy$1$[esp+120]
	dec	eax
	push	eax
	lea	eax, DWORD PTR [esi+ebp]
	push	0
	push	eax
	call	_memset
; Line 75
	mov	ecx, DWORD PTR _flen$GSCopy$1$[esp+132]
	mov	eax, ebp
	sub	eax, ecx
	sub	eax, esi
; Line 76
	push	ecx
	push	DWORD PTR _from$GSCopy$1$[esp+136]
	add	eax, edi
	push	eax
	mov	BYTE PTR [eax-1], 1
	call	_memcpy
; Line 77
	push	esi
	push	ebx
	call	_RAND_bytes
	add	esp, 32					; 00000020H
	test	eax, eax
	jle	$LN43@RSA_paddin
; Line 85
	push	85					; 00000055H
	sub	edi, esi
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	edi
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dbmask$1$[esp+120], eax
; Line 86
	test	eax, eax
	jne	SHORT $LN14@RSA_paddin
; Line 87
	push	87					; 00000057H
	push	OFFSET ??_C@_0BI@HCBPDHLA@?4?2crypto?2rsa?2rsa_oaep?4c?$AA@
	push	65					; 00000041H
; Line 88
	jmp	$LN42@RSA_paddin
$LN14@RSA_paddin:
; Line 91
	push	DWORD PTR _mgf1md$GSCopy$2$[esp+120]
	push	esi
	push	ebx
	push	edi
	push	eax
	call	_PKCS1_MGF1
	add	esp, 20					; 00000014H
	test	eax, eax
	js	$LN43@RSA_paddin
; Line 93
	xor	ebx, ebx
	test	edi, edi
	jle	$LN3@RSA_paddin
; Line 94
	mov	edx, DWORD PTR _dbmask$1$[esp+120]
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN23@RSA_paddin
	lea	eax, DWORD PTR [edx-1]
	lea	ecx, DWORD PTR [ebp-1]
	add	eax, edi
	add	ecx, edi
	cmp	ebp, eax
	ja	SHORT $LN24@RSA_paddin
	cmp	ecx, edx
	jae	SHORT $LN23@RSA_paddin
$LN24@RSA_paddin:
	mov	eax, edi
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN40@RSA_paddin
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN40@RSA_paddin:
	mov	ecx, edi
; Line 93
	mov	esi, edx
	sub	ecx, eax
	sub	esi, ebp
	mov	DWORD PTR tv828[esp+120], esi
	mov	eax, ebp
	lea	esi, DWORD PTR [edx+16]
	mov	edx, DWORD PTR tv828[esp+120]
	mov	DWORD PTR tv836[esp+120], esi
	mov	esi, DWORD PTR _mdlen$1$[esp+120]
	mov	ebp, DWORD PTR tv836[esp+120]
	npad	6
$LL4@RSA_paddin:
; Line 94
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [edx+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [ebx+ebp]
	add	ebx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	ebx, ecx
	jl	SHORT $LL4@RSA_paddin
	mov	ebp, DWORD PTR _db$1$[esp+120]
	mov	edx, DWORD PTR _dbmask$1$[esp+120]
$LN23@RSA_paddin:
; Line 93
	cmp	ebx, edi
	jge	SHORT $LN3@RSA_paddin
	mov	esi, edx
	lea	ecx, DWORD PTR [ebx+ebp]
	mov	edx, edi
	sub	esi, ebp
	sub	edx, ebx
$LL22@RSA_paddin:
; Line 94
	mov	al, BYTE PTR [ecx+esi]
	lea	ecx, DWORD PTR [ecx+1]
	xor	BYTE PTR [ecx-1], al
	sub	edx, 1
	jne	SHORT $LL22@RSA_paddin
	mov	esi, DWORD PTR _mdlen$1$[esp+120]
$LN3@RSA_paddin:
; Line 96
	push	DWORD PTR _mgf1md$GSCopy$2$[esp+120]
	lea	eax, DWORD PTR _seedmask$[esp+124]
	push	edi
	push	ebp
	push	esi
	push	eax
	call	_PKCS1_MGF1
	add	esp, 20					; 00000014H
	test	eax, eax
	js	$LN43@RSA_paddin
; Line 98
	xor	edx, edx
	test	esi, esi
	jle	$LN6@RSA_paddin
; Line 99
	mov	ebx, DWORD PTR _seed$1$[esp+120]
	cmp	esi, 32					; 00000020H
	jb	SHORT $LN26@RSA_paddin
	lea	ecx, DWORD PTR [ebx-1]
	lea	eax, DWORD PTR _seedmask$[esp+esi+119]
	add	ecx, esi
	cmp	ebx, eax
	ja	SHORT $LN27@RSA_paddin
	lea	eax, DWORD PTR _seedmask$[esp+120]
	cmp	ecx, eax
	jae	SHORT $LN26@RSA_paddin
$LN27@RSA_paddin:
	mov	eax, esi
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN41@RSA_paddin
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN41@RSA_paddin:
	mov	ecx, esi
; Line 98
	lea	edi, DWORD PTR _seedmask$[esp+120]
	sub	ecx, eax
	lea	ebp, DWORD PTR _seedmask$[esp+136]
	sub	edi, ebx
	mov	eax, ebx
	sub	ebp, ebx
$LL7@RSA_paddin:
; Line 99
	movups	xmm0, XMMWORD PTR [eax]
	add	edx, 32					; 00000020H
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [edi+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm0, XMMWORD PTR [eax-16]
	movups	xmm1, XMMWORD PTR [eax+ebp-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	edx, ecx
	jl	SHORT $LL7@RSA_paddin
$LN26@RSA_paddin:
; Line 98
	cmp	edx, esi
	jge	SHORT $LN6@RSA_paddin
	lea	edi, DWORD PTR _seedmask$[esp+120]
	sub	edi, ebx
	lea	ecx, DWORD PTR [edx+ebx]
	sub	esi, edx
$LL25@RSA_paddin:
; Line 99
	mov	al, BYTE PTR [ecx+edi]
	lea	ecx, DWORD PTR [ecx+1]
	xor	BYTE PTR [ecx-1], al
	sub	esi, 1
	jne	SHORT $LL25@RSA_paddin
$LN6@RSA_paddin:
; Line 101
	push	DWORD PTR _dbmask$1$[esp+120]
	call	_CRYPTO_free
; Line 103
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	add	esp, 4
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	ret	0
_RSA_padding_add_PKCS1_OAEP_mgf1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_padding_check_PKCS1_OAEP
_TEXT	SEGMENT
_to$ = 8						; size = 4
_tlen$ = 12						; size = 4
_from$ = 16						; size = 4
_flen$ = 20						; size = 4
_num$ = 24						; size = 4
_param$ = 28						; size = 4
_plen$ = 32						; size = 4
_RSA_padding_check_PKCS1_OAEP PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 109
	push	0
	push	0
	push	DWORD PTR _plen$[esp+4]
	push	DWORD PTR _param$[esp+8]
	push	DWORD PTR _num$[esp+12]
	push	DWORD PTR _flen$[esp+16]
	push	DWORD PTR _from$[esp+20]
	push	DWORD PTR _tlen$[esp+24]
	push	DWORD PTR _to$[esp+28]
	call	_RSA_padding_check_PKCS1_OAEP_mgf1
	add	esp, 36					; 00000024H
; Line 111
	ret	0
_RSA_padding_check_PKCS1_OAEP ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_padding_add_PKCS1_OAEP
_TEXT	SEGMENT
_to$ = 8						; size = 4
_tlen$ = 12						; size = 4
_from$ = 16						; size = 4
_flen$ = 20						; size = 4
_param$ = 24						; size = 4
_plen$ = 28						; size = 4
_RSA_padding_add_PKCS1_OAEP PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 35
	push	0
	push	0
	push	DWORD PTR _plen$[esp+4]
	push	DWORD PTR _param$[esp+8]
	push	DWORD PTR _flen$[esp+12]
	push	DWORD PTR _from$[esp+16]
	push	DWORD PTR _tlen$[esp+20]
	push	DWORD PTR _to$[esp+24]
	call	_RSA_padding_add_PKCS1_OAEP_mgf1
	add	esp, 32					; 00000020H
; Line 37
	ret	0
_RSA_padding_add_PKCS1_OAEP ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PKCS1_MGF1
_TEXT	SEGMENT
_cnt$ = -116						; size = 4
_mask$GSCopy$1$ = -112					; size = 4
_rv$1$ = -108						; size = 4
_dgst$GSCopy$1$ = -104					; size = 4
_seed$GSCopy$1$ = -100					; size = 4
_mdlen$1$ = -96						; size = 4
_c$ = -92						; size = 24
_md$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_mask$ = 8						; size = 4
_len$ = 12						; size = 4
_seed$ = 16						; size = 4
_seedlen$ = 20						; size = 4
_dgst$ = 24						; size = 4
_PKCS1_MGF1 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_oaep.c
; Line 245
	mov	eax, 116				; 00000074H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+116], eax
	mov	eax, DWORD PTR _mask$[esp+112]
	push	ebx
	mov	ebx, DWORD PTR _dgst$[esp+116]
	mov	DWORD PTR _mask$GSCopy$1$[esp+120], eax
	mov	eax, DWORD PTR _seed$[esp+116]
	push	ebp
	mov	DWORD PTR _seed$GSCopy$1$[esp+124], eax
; Line 253
	lea	eax, DWORD PTR _c$[esp+124]
	push	esi
	push	eax
	mov	DWORD PTR _dgst$GSCopy$1$[esp+132], ebx
	xor	esi, esi
	mov	DWORD PTR _rv$1$[esp+132], -1
	call	_EVP_MD_CTX_init
; Line 254
	push	ebx
	call	_EVP_MD_size
	mov	ebp, eax
	add	esp, 8
	mov	DWORD PTR _mdlen$1$[esp+128], ebp
; Line 255
	test	ebp, ebp
	js	$err$22
; Line 257
	push	edi
	mov	edi, DWORD PTR _len$[esp+128]
	xor	ebx, ebx
	test	edi, edi
	jle	$LN3@PKCS1_MGF1
$LL4@PKCS1_MGF1:
; Line 258
	mov	eax, ebx
; Line 261
	mov	BYTE PTR _cnt$[esp+135], bl
	sar	eax, 24					; 00000018H
	mov	BYTE PTR _cnt$[esp+132], al
	mov	eax, ebx
	sar	eax, 16					; 00000010H
	mov	BYTE PTR _cnt$[esp+133], al
	mov	eax, ebx
	sar	eax, 8
; Line 264
	push	0
	push	DWORD PTR _dgst$GSCopy$1$[esp+136]
	mov	BYTE PTR _cnt$[esp+142], al
	lea	eax, DWORD PTR _c$[esp+140]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN20@PKCS1_MGF1
	push	DWORD PTR _seedlen$[esp+128]
	lea	eax, DWORD PTR _c$[esp+136]
	push	DWORD PTR _seed$GSCopy$1$[esp+136]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN20@PKCS1_MGF1
	push	4
	lea	eax, DWORD PTR _cnt$[esp+136]
	push	eax
	lea	eax, DWORD PTR _c$[esp+140]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN20@PKCS1_MGF1
; Line 266
	add	ebp, esi
; Line 267
	push	0
	cmp	ebp, edi
	jg	SHORT $LN8@PKCS1_MGF1
	mov	eax, DWORD PTR _mask$GSCopy$1$[esp+136]
	add	eax, esi
	push	eax
	lea	eax, DWORD PTR _c$[esp+140]
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN20@PKCS1_MGF1
; Line 269
	mov	esi, ebp
; Line 270
	jmp	SHORT $LN2@PKCS1_MGF1
$LN8@PKCS1_MGF1:
; Line 271
	lea	eax, DWORD PTR _md$[esp+136]
	push	eax
	lea	eax, DWORD PTR _c$[esp+140]
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN20@PKCS1_MGF1
; Line 273
	mov	eax, edi
	sub	eax, esi
	push	eax
	lea	eax, DWORD PTR _md$[esp+136]
	push	eax
	mov	eax, DWORD PTR _mask$GSCopy$1$[esp+140]
	add	eax, esi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 274
	mov	esi, edi
$LN2@PKCS1_MGF1:
; Line 257
	mov	ebp, DWORD PTR _mdlen$1$[esp+132]
	inc	ebx
	cmp	esi, edi
	jl	$LL4@PKCS1_MGF1
$LN3@PKCS1_MGF1:
; Line 277
	mov	DWORD PTR _rv$1$[esp+132], 0
$LN20@PKCS1_MGF1:
	pop	edi
$err$22:
; Line 279
	lea	eax, DWORD PTR _c$[esp+128]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 281
	mov	ecx, DWORD PTR __$ArrayPad$[esp+132]
	add	esp, 4
	mov	eax, DWORD PTR _rv$1$[esp+128]
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	ret	0
_PKCS1_MGF1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_select_int
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_constant_time_select_int PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 192
	mov	ecx, DWORD PTR _mask$[esp-4]
	mov	eax, ecx
	and	ecx, DWORD PTR _a$[esp-4]
	not	eax
	and	eax, DWORD PTR _b$[esp-4]
	or	eax, ecx
; Line 205
	ret	0
_constant_time_select_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_select
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_constant_time_select PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 192
	mov	ecx, DWORD PTR _mask$[esp-4]
	mov	eax, ecx
	and	ecx, DWORD PTR _a$[esp-4]
	not	eax
	and	eax, DWORD PTR _b$[esp-4]
	or	eax, ecx
; Line 193
	ret	0
_constant_time_select ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_eq
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_eq PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	mov	ecx, DWORD PTR _a$[esp-4]
	xor	ecx, DWORD PTR _b$[esp-4]
; Line 160
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
; Line 170
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 170
	neg	eax
; Line 171
	ret	0
_constant_time_eq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_is_zero
_TEXT	SEGMENT
_a$ = 8							; size = 4
_constant_time_is_zero PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	mov	ecx, DWORD PTR _a$[esp-4]
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 160
	neg	eax
; Line 161
	ret	0
_constant_time_is_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_msb
_TEXT	SEGMENT
_a$ = 8							; size = 4
_constant_time_msb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	mov	eax, DWORD PTR _a$[esp-4]
	shr	eax, 31					; 0000001fH
	neg	eax
; Line 136
	ret	0
_constant_time_msb ENDP
_TEXT	ENDS
END
