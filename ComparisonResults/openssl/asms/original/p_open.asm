; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\evp\p_open.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_EVP_OpenInit
PUBLIC	_EVP_OpenFinal
PUBLIC	??_C@_0BG@CMBCMIIH@?4?2crypto?2evp?2p_open?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_EVP_DecryptInit_ex:PROC
EXTRN	_EVP_DecryptFinal_ex:PROC
EXTRN	_EVP_CIPHER_CTX_init:PROC
EXTRN	_EVP_CIPHER_CTX_set_key_length:PROC
EXTRN	_EVP_PKEY_decrypt_old:PROC
EXTRN	_RSA_size:PROC
;	COMDAT ??_C@_0BG@CMBCMIIH@?4?2crypto?2evp?2p_open?4c?$AA@
CONST	SEGMENT
??_C@_0BG@CMBCMIIH@?4?2crypto?2evp?2p_open?4c?$AA@ DB '.\crypto\evp\p_ope'
	DB	'n.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_OpenFinal
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_EVP_OpenFinal PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\p_open.c
; Line 118
	push	DWORD PTR _outl$[esp-4]
	push	DWORD PTR _out$[esp]
	push	DWORD PTR _ctx$[esp+4]
	call	_EVP_DecryptFinal_ex
	add	esp, 12					; 0000000cH
; Line 119
	test	eax, eax
	je	SHORT $LN2@EVP_OpenFi
; Line 120
	push	0
	push	0
	push	0
	push	0
	push	DWORD PTR _ctx$[esp+12]
	call	_EVP_DecryptInit_ex
	add	esp, 20					; 00000014H
$LN2@EVP_OpenFi:
; Line 122
	ret	0
_EVP_OpenFinal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_OpenInit
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_size$1$ = 12						; size = 4
_type$ = 12						; size = 4
_ek$ = 16						; size = 4
_ekl$ = 20						; size = 4
_iv$ = 24						; size = 4
_priv$ = 28						; size = 4
_EVP_OpenInit PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\p_open.c
; Line 72
	push	ebx
; Line 76
	mov	ebx, DWORD PTR _ctx$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _type$[esp+12]
	xor	esi, esi
	xor	ebp, ebp
	test	edi, edi
	je	SHORT $LN3@EVP_OpenIn
; Line 77
	push	ebx
	call	_EVP_CIPHER_CTX_init
; Line 78
	push	ebp
	push	ebp
	push	ebp
	push	edi
	push	ebx
	call	_EVP_DecryptInit_ex
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN3@EVP_OpenIn
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 112
	ret	0
$LN3@EVP_OpenIn:
; Line 82
	mov	edi, DWORD PTR _priv$[esp+12]
	test	edi, edi
	jne	SHORT $LN4@EVP_OpenIn
; Line 83
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 112
	ret	0
$LN4@EVP_OpenIn:
; Line 85
	cmp	DWORD PTR [edi], 6
	je	SHORT $LN5@EVP_OpenIn
; Line 86
	push	86					; 00000056H
	push	OFFSET ??_C@_0BG@CMBCMIIH@?4?2crypto?2evp?2p_open?4c?$AA@
	push	106					; 0000006aH
	push	102					; 00000066H
	push	6
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 110
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 111
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 112
	ret	0
$LN5@EVP_OpenIn:
; Line 90
	push	DWORD PTR [edi+20]
	call	_RSA_size
; Line 91
	push	91					; 0000005bH
	mov	DWORD PTR _size$1$[esp+20], eax
	add	eax, 2
	push	OFFSET ??_C@_0BG@CMBCMIIH@?4?2crypto?2evp?2p_open?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 92
	test	esi, esi
	jne	SHORT $LN6@EVP_OpenIn
; Line 94
	push	94					; 0000005eH
	push	OFFSET ??_C@_0BG@CMBCMIIH@?4?2crypto?2evp?2p_open?4c?$AA@
	push	65					; 00000041H
	push	102					; 00000066H
	push	6
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 110
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 111
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 112
	ret	0
$LN6@EVP_OpenIn:
; Line 98
	push	edi
	push	DWORD PTR _ekl$[esp+16]
	push	DWORD PTR _ek$[esp+20]
	push	esi
	call	_EVP_PKEY_decrypt_old
	add	esp, 16					; 00000010H
; Line 99
	test	eax, eax
	jle	SHORT $err$13
	push	eax
	push	ebx
	call	_EVP_CIPHER_CTX_set_key_length
	add	esp, 8
	test	eax, eax
	je	SHORT $err$13
; Line 103
	push	DWORD PTR _iv$[esp+12]
	push	esi
	push	0
	push	0
	push	ebx
	call	_EVP_DecryptInit_ex
	add	esp, 20					; 00000014H
	mov	ecx, 1
	test	eax, eax
	cmovne	ebp, ecx
$err$13:
; Line 109
	push	DWORD PTR _size$1$[esp+12]
	push	esi
	call	_OPENSSL_cleanse
	add	esp, 8
; Line 110
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 111
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 112
	ret	0
_EVP_OpenInit ENDP
_TEXT	ENDS
END
