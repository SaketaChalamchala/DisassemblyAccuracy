; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_dtls1_read_bytes
PUBLIC	_dtls1_write_app_data_bytes
PUBLIC	_dtls1_write_bytes
PUBLIC	_dtls1_reset_seq_numbers
PUBLIC	_dtls1_get_record
PUBLIC	_do_dtls1_write
PUBLIC	_dtls1_dispatch_alert
PUBLIC	??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@	; `string'
PUBLIC	??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@	; `string'
PUBLIC	??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OpenSSLDie:PROC
EXTRN	_CRYPTO_memcmp:PROC
EXTRN	_BIO_set_flags:PROC
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_snprintf:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_add_error_data:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_MD_CTX_md:PROC
EXTRN	_EVP_CIPHER_CTX_iv_length:PROC
EXTRN	_EVP_CIPHER_CTX_flags:PROC
EXTRN	_pitem_new:PROC
EXTRN	_pitem_free:PROC
EXTRN	_pqueue_insert:PROC
EXTRN	_pqueue_peek:PROC
EXTRN	_pqueue_pop:PROC
EXTRN	_pqueue_size:PROC
EXTRN	_SSL_get_rbio:PROC
EXTRN	_SSL_CTX_remove_session:PROC
EXTRN	_SSL_state:PROC
EXTRN	_ssl3_send_alert:PROC
EXTRN	_ssl3_renegotiate:PROC
EXTRN	_ssl3_renegotiate_check:PROC
EXTRN	_ssl3_setup_buffers:PROC
EXTRN	_ssl3_record_sequence_update:PROC
EXTRN	_ssl3_do_change_cipher_spec:PROC
EXTRN	_ssl3_read_n:PROC
EXTRN	_ssl3_do_compress:PROC
EXTRN	_ssl3_do_uncompress:PROC
EXTRN	_ssl3_write_pending:PROC
EXTRN	_dtls1_read_failed:PROC
EXTRN	_dtls1_retransmit_buffered_messages:PROC
EXTRN	_dtls1_get_message_header:PROC
EXTRN	_dtls1_get_ccs_header:PROC
EXTRN	_dtls1_check_timeout_num:PROC
EXTRN	_dtls1_handle_timeout:PROC
EXTRN	_dtls1_process_heartbeat:PROC
EXTRN	_ssl3_cbc_copy_mac:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@
CONST	SEGMENT
??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@ DB 'len <'
	DB	'= SSL3_RT_MAX_PLAIN_LENGTH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@
CONST	SEGMENT
??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@ DB 'SSL alert number ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@
CONST	SEGMENT
??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ DB 'mac_size '
	DB	'<= EVP_MAX_MD_SIZE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
CONST	SEGMENT
??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@ DB '.\ssl\d1_pkt.c', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_process_buffered_records
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_process_buffered_records PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 320
	push	esi
; Line 323
	mov	esi, DWORD PTR _s$[esp]
	push	edi
	mov	eax, DWORD PTR [esi+92]
	push	DWORD PTR [eax+568]
	call	_pqueue_peek
	add	esp, 4
; Line 324
	test	eax, eax
	je	$LN3@dtls1_proc
; Line 326
	mov	ecx, DWORD PTR [esi+92]
	mov	ax, WORD PTR [ecx+564]
	cmp	ax, WORD PTR [ecx+520]
	jne	$LN17@dtls1_proc
; Line 330
	push	DWORD PTR [ecx+568]
	call	_pqueue_peek
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@dtls1_proc
	npad	8
$LL2@dtls1_proc:
; Line 331
	mov	eax, DWORD PTR [esi+92]
; Line 290
	push	DWORD PTR [eax+568]
	call	_pqueue_pop
	mov	edi, eax
	add	esp, 4
; Line 291
	test	edi, edi
	je	SHORT $LN10@dtls1_proc
; Line 292
	push	edi
	push	esi
	call	_dtls1_copy_record
; Line 294
	push	DWORD PTR [edi+8]
	call	_CRYPTO_free
; Line 295
	push	edi
	call	_pitem_free
	add	esp, 16					; 00000010H
$LN10@dtls1_proc:
; Line 332
	push	esi
	call	_dtls1_process_record
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@dtls1_proc
; Line 335
	mov	eax, DWORD PTR [esi+88]
	add	eax, 296				; 00000128H
	push	eax
	mov	eax, DWORD PTR [esi+92]
	add	eax, 572				; 0000023cH
	push	eax
	push	esi
	call	_dtls1_buffer_record
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	SHORT $LN14@dtls1_proc
; Line 330
	mov	eax, DWORD PTR [esi+92]
	push	DWORD PTR [eax+568]
	call	_pqueue_peek
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL2@dtls1_proc
$LN3@dtls1_proc:
; Line 344
	mov	ecx, DWORD PTR [esi+92]
	movzx	eax, WORD PTR [ecx+520]
	mov	WORD PTR [ecx+572], ax
; Line 345
	mov	ecx, DWORD PTR [esi+92]
	movzx	eax, WORD PTR [ecx+520]
	inc	ax
	mov	WORD PTR [ecx+564], ax
$LN17@dtls1_proc:
; Line 347
	pop	edi
	mov	eax, 1
	pop	esi
; Line 348
	ret	0
$LN14@dtls1_proc:
	pop	edi
; Line 336
	or	eax, -1
	pop	esi
; Line 348
	ret	0
$LN13@dtls1_proc:
	pop	edi
; Line 333
	xor	eax, eax
	pop	esi
; Line 348
	ret	0
_dtls1_process_buffered_records ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_retrieve_buffered_record
_TEXT	SEGMENT
_s$ = 8							; size = 4
_queue$ = 12						; size = 4
_dtls1_retrieve_buffered_record PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 290
	mov	eax, DWORD PTR _queue$[esp-4]
	push	esi
	push	DWORD PTR [eax+4]
	call	_pqueue_pop
	mov	esi, eax
	add	esp, 4
; Line 291
	test	esi, esi
	je	SHORT $LN2@dtls1_retr
; Line 292
	push	esi
	push	DWORD PTR _s$[esp+4]
	call	_dtls1_copy_record
; Line 294
	push	DWORD PTR [esi+8]
	call	_CRYPTO_free
; Line 295
	push	esi
	call	_pitem_free
	add	esp, 16					; 00000010H
; Line 297
	mov	eax, 1
	pop	esi
; Line 301
	ret	0
$LN2@dtls1_retr:
; Line 300
	xor	eax, eax
	pop	esi
; Line 301
	ret	0
_dtls1_retrieve_buffered_record ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_copy_record
_TEXT	SEGMENT
_s$ = 8							; size = 4
_item$ = 12						; size = 4
_dtls1_copy_record PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 204
	mov	eax, DWORD PTR _item$[esp-4]
	push	esi
; Line 206
	mov	esi, DWORD PTR _s$[esp]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+236]
	test	eax, eax
	je	SHORT $LN2@dtls1_copy
; Line 207
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN2@dtls1_copy:
; Line 209
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi+76], eax
; Line 210
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+80], eax
; Line 211
	mov	eax, DWORD PTR [esi+88]
	movups	xmm0, XMMWORD PTR [edi+8]
	movups	XMMWORD PTR [eax+236], xmm0
; Line 212
	mov	ecx, DWORD PTR [esi+88]
	movups	xmm0, XMMWORD PTR [edi+24]
	movups	XMMWORD PTR [ecx+268], xmm0
	movups	xmm0, XMMWORD PTR [edi+40]
	movups	XMMWORD PTR [ecx+284], xmm0
	mov	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [ecx+300], eax
; Line 215
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi+88]
	pop	edi
	pop	esi
	mov	eax, DWORD PTR [edx+5]
	mov	DWORD PTR [ecx+10], eax
	mov	ax, WORD PTR [edx+9]
	mov	WORD PTR [ecx+14], ax
; Line 217
	mov	eax, 1
; Line 218
	ret	0
_dtls1_copy_record ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_process_record
_TEXT	SEGMENT
_enc_err$1$ = -136					; size = 4
_mac_tmp$1 = -132					; size = 64
_md$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_dtls1_process_record PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 395
	mov	eax, 136				; 00000088H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+136], eax
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _s$[esp+148]
; Line 403
	mov	esi, DWORD PTR [edi+88]
; Line 410
	mov	eax, DWORD PTR [edi+76]
	add	esi, 268				; 0000010cH
	mov	ebx, DWORD PTR [edi+192]
	add	eax, 13					; 0000000dH
; Line 425
	cmp	DWORD PTR [esi+4], 17728		; 00004540H
	mov	DWORD PTR [esi+16], eax
	jbe	SHORT $LN2@dtls1_proc
; Line 427
	push	427					; 000001abH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	150					; 00000096H
; Line 428
	jmp	$LN22@dtls1_proc
$LN2@dtls1_proc:
; Line 432
	mov	DWORD PTR [esi+12], eax
; Line 434
	mov	eax, DWORD PTR [edi+8]
	push	0
	push	edi
	mov	eax, DWORD PTR [eax+100]
	mov	eax, DWORD PTR [eax]
	call	eax
	mov	ebp, eax
	add	esp, 8
	mov	DWORD PTR _enc_err$1$[esp+152], ebp
; Line 441
	test	ebp, ebp
	jne	SHORT $LN3@dtls1_proc
$LN20@dtls1_proc:
; Line 443
	mov	DWORD PTR [esi+4], 0
; Line 559
	xor	eax, eax
	mov	DWORD PTR [edi+80], 0
	jmp	$LN1@dtls1_proc
$LN3@dtls1_proc:
; Line 459
	test	ebx, ebx
	je	$LN11@dtls1_proc
	cmp	DWORD PTR [edi+128], 0
	je	$LN11@dtls1_proc
	push	DWORD PTR [edi+132]
	call	_EVP_MD_CTX_md
	add	esp, 4
	test	eax, eax
	je	$LN11@dtls1_proc
; Line 463
	push	DWORD PTR [edi+132]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	mov	ebx, eax
	add	esp, 8
; Line 464
	cmp	ebx, 64					; 00000040H
	jbe	SHORT $LN19@dtls1_proc
	push	OFFSET ??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@
	push	464					; 000001d0H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN19@dtls1_proc:
; Line 469
	mov	ebp, DWORD PTR [esi]
	shr	ebp, 8
	add	ebp, DWORD PTR [esi+4]
; Line 477
	cmp	ebp, ebx
	jb	$LN6@dtls1_proc
	push	DWORD PTR [edi+128]
	call	_EVP_CIPHER_CTX_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN5@dtls1_proc
	lea	eax, DWORD PTR [ebx+1]
	cmp	ebp, eax
	jb	$LN6@dtls1_proc
$LN5@dtls1_proc:
; Line 486
	push	DWORD PTR [edi+128]
	call	_EVP_CIPHER_CTX_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN7@dtls1_proc
; Line 494
	push	ebp
	push	ebx
	lea	eax, DWORD PTR _mac_tmp$1[esp+160]
	push	esi
	push	eax
	call	_ssl3_cbc_copy_mac
	add	esp, 16					; 00000010H
; Line 496
	lea	ebp, DWORD PTR _mac_tmp$1[esp+152]
	sub	DWORD PTR [esi+4], ebx
	jmp	SHORT $LN8@dtls1_proc
$LN7@dtls1_proc:
; Line 503
	mov	ebp, DWORD PTR [esi+12]
	sub	DWORD PTR [esi+4], ebx
	add	ebp, DWORD PTR [esi+4]
$LN8@dtls1_proc:
; Line 506
	mov	eax, DWORD PTR [edi+8]
	lea	ecx, DWORD PTR _md$[esp+152]
	push	0
	push	ecx
	push	edi
	mov	eax, DWORD PTR [eax+100]
	mov	eax, DWORD PTR [eax+4]
	call	eax
	add	esp, 12					; 0000000cH
; Line 508
	test	eax, eax
	js	SHORT $LN10@dtls1_proc
	test	ebp, ebp
	je	SHORT $LN10@dtls1_proc
	push	ebx
	lea	eax, DWORD PTR _md$[esp+156]
	push	ebp
	push	eax
	call	_CRYPTO_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN21@dtls1_proc
$LN10@dtls1_proc:
; Line 509
	or	ebp, -1
	jmp	SHORT $LN9@dtls1_proc
$LN21@dtls1_proc:
	mov	ebp, DWORD PTR _enc_err$1$[esp+152]
$LN9@dtls1_proc:
; Line 510
	lea	eax, DWORD PTR [ebx+17408]
	cmp	DWORD PTR [esi+4], eax
	ja	$LN20@dtls1_proc
$LN11@dtls1_proc:
; Line 514
	test	ebp, ebp
	js	$LN20@dtls1_proc
; Line 522
	cmp	DWORD PTR [edi+136], 0
	je	SHORT $LN15@dtls1_proc
; Line 523
	cmp	DWORD PTR [esi+4], 17408		; 00004400H
	jbe	SHORT $LN14@dtls1_proc
; Line 525
	push	526					; 0000020eH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	140					; 0000008cH
; Line 527
	jmp	SHORT $LN22@dtls1_proc
$LN6@dtls1_proc:
; Line 482
	push	482					; 000001e2H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	mov	esi, 50					; 00000032H
	push	160					; 000000a0H
; Line 483
	jmp	SHORT $LN23@dtls1_proc
$LN14@dtls1_proc:
; Line 529
	push	edi
	call	_ssl3_do_uncompress
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@dtls1_proc
; Line 531
	push	531					; 00000213H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	lea	esi, DWORD PTR [eax+30]
	push	107					; 0000006bH
; Line 532
	jmp	SHORT $LN23@dtls1_proc
$LN15@dtls1_proc:
; Line 536
	cmp	DWORD PTR [esi+4], 16384		; 00004000H
	jbe	SHORT $LN16@dtls1_proc
; Line 538
	push	538					; 0000021aH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	146					; 00000092H
$LN22@dtls1_proc:
; Line 537
	mov	esi, 22					; 00000016H
$LN23@dtls1_proc:
; Line 538
	push	257					; 00000101H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$f_err$25:
; Line 557
	push	esi
	push	2
	push	edi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
$err$26:
; Line 559
	xor	eax, eax
	jmp	SHORT $LN1@dtls1_proc
$LN16@dtls1_proc:
; Line 542
	mov	DWORD PTR [esi+8], 0
; Line 554
	mov	eax, 1
	mov	DWORD PTR [edi+80], 0
$LN1@dtls1_proc:
; Line 560
	mov	ecx, DWORD PTR __$ArrayPad$[esp+152]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 136				; 00000088H
	ret	0
_dtls1_process_record ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_buffer_record
_TEXT	SEGMENT
_s$ = 8							; size = 4
_queue$ = 12						; size = 4
_priority$ = 16						; size = 4
_dtls1_buffer_record PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 222
	push	ebx
; Line 227
	mov	ebx, DWORD PTR _queue$[esp]
	push	DWORD PTR [ebx+4]
	call	_pqueue_size
	add	esp, 4
	cmp	eax, 100				; 00000064H
	jl	SHORT $LN2@dtls1_buff
; Line 228
	xor	eax, eax
	pop	ebx
; Line 284
	ret	0
$LN2@dtls1_buff:
	push	esi
	push	edi
; Line 230
	push	230					; 000000e6H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	60					; 0000003cH
	call	_CRYPTO_malloc
	mov	esi, eax
; Line 231
	push	esi
	push	DWORD PTR _priority$[esp+24]
	call	_pitem_new
	add	esp, 20					; 00000014H
	mov	edi, eax
; Line 232
	test	esi, esi
	je	$LN5@dtls1_buff
	test	edi, edi
	je	$LN4@dtls1_buff
; Line 242
	mov	edx, DWORD PTR _s$[esp+8]
; Line 264
	push	edx
	mov	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR [esi], ecx
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [edx+88]
	movups	xmm0, XMMWORD PTR [eax+236]
	movups	XMMWORD PTR [esi+8], xmm0
	mov	eax, DWORD PTR [edx+88]
	movups	xmm0, XMMWORD PTR [eax+268]
	movups	XMMWORD PTR [esi+24], xmm0
	movups	xmm0, XMMWORD PTR [eax+284]
	movups	XMMWORD PTR [esi+40], xmm0
	mov	eax, DWORD PTR [eax+300]
	mov	DWORD PTR [esi+56], eax
	xorps	xmm0, xmm0
	mov	DWORD PTR [edi+8], esi
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [edx+76], 0
	mov	DWORD PTR [edx+80], 0
	movups	XMMWORD PTR [eax+236], xmm0
	mov	eax, DWORD PTR [edx+88]
	movups	XMMWORD PTR [eax+268], xmm0
	movups	XMMWORD PTR [eax+284], xmm0
	mov	DWORD PTR [eax+300], 0
	call	_ssl3_setup_buffers
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN7@dtls1_buff
; Line 265
	push	265					; 00000109H
$LN18@dtls1_buff:
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	68					; 00000044H
	push	247					; 000000f7H
	push	20					; 00000014H
	call	_ERR_put_error
; Line 266
	mov	eax, DWORD PTR [esi+8]
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN8@dtls1_buff
; Line 267
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN8@dtls1_buff:
; Line 268
	push	esi
	call	_CRYPTO_free
; Line 269
	push	edi
	call	_pitem_free
	add	esp, 8
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
; Line 284
	ret	0
$LN7@dtls1_buff:
; Line 274
	push	edi
	push	DWORD PTR [ebx+4]
	call	_pqueue_insert
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@dtls1_buff
; Line 275
	push	275					; 00000113H
; Line 280
	jmp	SHORT $LN18@dtls1_buff
$LN9@dtls1_buff:
	pop	edi
	pop	esi
; Line 283
	mov	eax, 1
	pop	ebx
; Line 284
	ret	0
$LN4@dtls1_buff:
; Line 234
	push	esi
	call	_CRYPTO_free
; Line 235
	jmp	SHORT $LN15@dtls1_buff
$LN5@dtls1_buff:
	test	edi, edi
	je	SHORT $LN6@dtls1_buff
; Line 236
	push	edi
	call	_pitem_free
$LN15@dtls1_buff:
	add	esp, 4
$LN6@dtls1_buff:
; Line 238
	push	238					; 000000eeH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	68					; 00000044H
	push	247					; 000000f7H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 239
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
; Line 284
	ret	0
_dtls1_buffer_record ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_bitmap
_TEXT	SEGMENT
_s$ = 8							; size = 4
_rr$ = 12						; size = 4
_is_next_epoch$ = 16					; size = 4
_dtls1_get_bitmap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1827
	mov	edx, DWORD PTR _is_next_epoch$[esp-4]
; Line 1830
	mov	ecx, DWORD PTR _rr$[esp-4]
	push	esi
	mov	esi, DWORD PTR _s$[esp]
	mov	DWORD PTR [edx], 0
	push	edi
	mov	eax, DWORD PTR [esi+92]
	movzx	edi, WORD PTR [eax+520]
	cmp	DWORD PTR [ecx+24], edi
	jne	SHORT $LN2@dtls1_get_
; Line 1831
	pop	edi
	add	eax, 524				; 0000020cH
	pop	esi
; Line 1841
	ret	0
$LN2@dtls1_get_:
; Line 1834
	lea	eax, DWORD PTR [edi+1]
	cmp	DWORD PTR [ecx+24], eax
	jne	SHORT $LN4@dtls1_get_
	mov	eax, DWORD PTR [ecx]
	cmp	eax, 22					; 00000016H
	je	SHORT $LN5@dtls1_get_
	cmp	eax, 21					; 00000015H
	jne	SHORT $LN4@dtls1_get_
$LN5@dtls1_get_:
; Line 1836
	mov	DWORD PTR [edx], 1
; Line 1837
	mov	eax, DWORD PTR [esi+92]
	pop	edi
	add	eax, 536				; 00000218H
	pop	esi
; Line 1841
	ret	0
$LN4@dtls1_get_:
	pop	edi
; Line 1840
	xor	eax, eax
	pop	esi
; Line 1841
	ret	0
_dtls1_get_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_record_bitmap_update
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bitmap$ = 12						; size = 4
_dtls1_record_bitmap_update PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1743
	mov	eax, DWORD PTR _s$[esp-4]
	push	ebx
	push	esi
; Line 1745
	mov	esi, DWORD PTR _bitmap$[esp+4]
	push	edi
	mov	edi, DWORD PTR [eax+88]
	add	edi, 8
	lea	ebx, DWORD PTR [esi+4]
	push	ebx
	push	edi
	call	_satsub64be
	mov	ecx, eax
	add	esp, 8
; Line 1746
	test	ecx, ecx
	jle	SHORT $LN2@dtls1_reco
; Line 1748
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN4@dtls1_reco
; Line 1749
	mov	edx, DWORD PTR [esi]
	shl	edx, cl
	or	edx, 1
	mov	DWORD PTR [esi], edx
; Line 1752
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+4], eax
	pop	ebx
; Line 1758
	ret	0
$LN4@dtls1_reco:
; Line 1751
	mov	DWORD PTR [esi], 1
; Line 1752
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+4], eax
	pop	ebx
; Line 1758
	ret	0
$LN2@dtls1_reco:
; Line 1754
	neg	ecx
; Line 1755
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN6@dtls1_reco
; Line 1756
	mov	eax, DWORD PTR [esi]
	bts	eax, ecx
	mov	DWORD PTR [esi], eax
$LN6@dtls1_reco:
; Line 1758
	pop	edi
	pop	esi
	pop	ebx
	ret	0
_dtls1_record_bitmap_update ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_record_replay_check
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bitmap$ = 12						; size = 4
_dtls1_record_replay_check PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1722
	mov	eax, DWORD PTR _s$[esp-4]
	push	ebx
; Line 1724
	mov	ebx, DWORD PTR _bitmap$[esp]
	push	esi
	mov	esi, DWORD PTR [eax+88]
	push	edi
	lea	eax, DWORD PTR [ebx+4]
	push	eax
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	_satsub64be
	mov	ecx, eax
	add	esp, 8
; Line 1725
	test	ecx, ecx
	jle	SHORT $LN2@dtls1_reco
; Line 1726
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi+296], eax
	mov	eax, DWORD PTR [edi+4]
	pop	edi
	mov	DWORD PTR [esi+300], eax
; Line 1736
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 1737
	ret	0
$LN2@dtls1_reco:
; Line 1729
	neg	ecx
; Line 1730
	cmp	ecx, 32					; 00000020H
	jb	SHORT $LN3@dtls1_reco
$LN8@dtls1_reco:
	pop	edi
	pop	esi
; Line 1731
	xor	eax, eax
	pop	ebx
; Line 1737
	ret	0
$LN3@dtls1_reco:
; Line 1732
	mov	eax, 1
	shl	eax, cl
	test	eax, DWORD PTR [ebx]
	jne	SHORT $LN8@dtls1_reco
; Line 1735
	mov	ecx, DWORD PTR [edi]
; Line 1736
	mov	eax, 1
	mov	DWORD PTR [esi+296], ecx
	mov	ecx, DWORD PTR [edi+4]
	pop	edi
	mov	DWORD PTR [esi+300], ecx
	pop	esi
	pop	ebx
; Line 1737
	ret	0
_dtls1_record_replay_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _have_handshake_fragment
_TEXT	SEGMENT
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_peek$ = 24						; size = 4
_have_handshake_fragment PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1451
	cmp	DWORD PTR _type$[esp-4], 22		; 00000016H
	push	edi
	jne	SHORT $LN7@have_hands
	mov	edi, DWORD PTR _s$[esp]
	mov	edx, DWORD PTR [edi+92]
	cmp	DWORD PTR [edx+736], 0
	jbe	SHORT $LN7@have_hands
; Line 1460
	mov	ecx, DWORD PTR _len$[esp]
	add	edx, 724				; 000002d4H
	push	ebx
	xor	ebx, ebx
	push	esi
	test	ecx, ecx
	jle	SHORT $LN17@have_hands
	mov	esi, DWORD PTR _buf$[esp+8]
	npad	2
$LL2@have_hands:
	mov	eax, DWORD PTR [edi+92]
	cmp	DWORD PTR [eax+736], 0
	jbe	SHORT $LN17@have_hands
; Line 1461
	mov	al, BYTE PTR [edx]
; Line 1462
	dec	ecx
	mov	BYTE PTR [ebx+esi], al
	inc	edx
; Line 1463
	mov	eax, DWORD PTR [edi+92]
; Line 1464
	inc	ebx
	dec	DWORD PTR [eax+736]
	test	ecx, ecx
	jg	SHORT $LL2@have_hands
$LN17@have_hands:
; Line 1467
	mov	eax, DWORD PTR [edi+92]
	xor	esi, esi
	cmp	DWORD PTR [eax+736], esi
	jbe	SHORT $LN5@have_hands
	npad	2
$LL6@have_hands:
; Line 1468
	mov	cl, BYTE PTR [edx]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [eax+esi+724], cl
	inc	esi
	mov	eax, DWORD PTR [edi+92]
	cmp	esi, DWORD PTR [eax+736]
	jb	SHORT $LL6@have_hands
$LN5@have_hands:
	pop	esi
; Line 1469
	mov	eax, ebx
	pop	ebx
	pop	edi
; Line 1473
	ret	0
$LN7@have_hands:
; Line 1472
	xor	eax, eax
	pop	edi
; Line 1473
	ret	0
_have_handshake_fragment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _satsub64be
_TEXT	SEGMENT
_ret$1$ = 8						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_satsub64be PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 127
	push	ebx
	push	esi
; Line 160
	mov	esi, DWORD PTR _v1$[esp+4]
	push	edi
	mov	edi, DWORD PTR _v2$[esp+8]
	movzx	ecx, BYTE PTR [esi+7]
	movzx	eax, BYTE PTR [edi+7]
	sub	ecx, eax
; Line 165
	movzx	eax, BYTE PTR [edi+6]
	mov	edx, ecx
	mov	DWORD PTR _ret$1$[esp+8], ecx
	sar	edx, 8
	test	cl, cl
	movzx	ecx, BYTE PTR [esi+6]
	jns	$LN18@satsub64be
	sub	ecx, eax
	movzx	eax, BYTE PTR [edi+5]
	add	edx, ecx
	movzx	ecx, BYTE PTR [esi+5]
	sub	ecx, eax
; Line 166
	mov	ebx, edx
; Line 167
	sar	edx, 8
	not	ebx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+4]
	mov	eax, ecx
	sar	ecx, 8
	not	eax
	or	ebx, eax
	movzx	eax, BYTE PTR [edi+4]
	sub	edx, eax
	add	edx, ecx
	movzx	ecx, BYTE PTR [esi+3]
	mov	eax, edx
	sar	edx, 8
	not	eax
	or	ebx, eax
	movzx	eax, BYTE PTR [edi+3]
	sub	ecx, eax
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+2]
	mov	eax, ecx
	sar	ecx, 8
	not	eax
	or	ebx, eax
	movzx	eax, BYTE PTR [edi+2]
	sub	edx, eax
	add	edx, ecx
	movzx	ecx, BYTE PTR [esi+1]
	mov	eax, edx
	sar	edx, 8
	not	eax
	or	ebx, eax
	movzx	eax, BYTE PTR [edi+1]
	sub	ecx, eax
	add	ecx, edx
	movzx	edx, BYTE PTR [esi]
	mov	eax, ecx
	sar	ecx, 8
	not	eax
	or	ebx, eax
	movzx	eax, BYTE PTR [edi]
	sub	edx, eax
	add	edx, ecx
	mov	eax, edx
	not	eax
	or	ebx, eax
; Line 169
	jmp	SHORT $LN45@satsub64be
$LN18@satsub64be:
; Line 171
	sub	ecx, eax
	movzx	eax, BYTE PTR [edi+5]
	add	edx, ecx
	movzx	ecx, BYTE PTR [esi+5]
	sub	ecx, eax
; Line 172
	mov	ebx, edx
	movzx	eax, BYTE PTR [edi+4]
; Line 173
	sar	edx, 8
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+4]
	or	ebx, ecx
	sub	edx, eax
	movzx	eax, BYTE PTR [edi+3]
	sar	ecx, 8
	add	edx, ecx
	movzx	ecx, BYTE PTR [esi+3]
	or	ebx, edx
	sub	ecx, eax
	movzx	eax, BYTE PTR [edi+2]
	sar	edx, 8
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+2]
	or	ebx, ecx
	sub	edx, eax
	movzx	eax, BYTE PTR [edi+1]
	sar	ecx, 8
	add	edx, ecx
	movzx	ecx, BYTE PTR [esi+1]
	or	ebx, edx
	sub	ecx, eax
	movzx	eax, BYTE PTR [edi]
	sar	edx, 8
	add	ecx, edx
	movzx	edx, BYTE PTR [esi]
	or	ebx, ecx
	sub	edx, eax
	sar	ecx, 8
	add	edx, ecx
	or	ebx, edx
$LN45@satsub64be:
	sar	edx, 8
	pop	edi
; Line 176
	shl	edx, 8
; Line 178
	test	bl, bl
	pop	esi
	pop	ebx
	je	SHORT $LN20@satsub64be
; Line 179
	or	edx, 128				; 00000080H
	mov	eax, edx
; Line 182
	ret	0
$LN20@satsub64be:
; Line 181
	mov	eax, DWORD PTR _ret$1$[esp-4]
	movzx	eax, al
	add	eax, edx
; Line 182
	ret	0
_satsub64be ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_dispatch_alert
_TEXT	SEGMENT
_buf$ = 8						; size = 2
_s$ = 8							; size = 4
_dtls1_dispatch_alert PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1761
	push	esi
; Line 1767
	mov	esi, DWORD PTR _s$[esp]
	push	edi
; Line 1794
	push	0
	push	2
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+396], 0
	xor	eax, eax
	mov	ecx, DWORD PTR [esi+88]
	mov	WORD PTR _buf$[esp+12], ax
	movzx	eax, BYTE PTR [ecx+400]
	mov	BYTE PTR _buf$[esp+12], al
	movzx	eax, BYTE PTR [ecx+401]
	mov	BYTE PTR _buf$[esp+13], al
	lea	eax, DWORD PTR _buf$[esp+12]
	push	eax
	push	21					; 00000015H
	push	esi
	call	_do_dtls1_write
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 1795
	test	edi, edi
	jg	SHORT $LN2@dtls1_disp
; Line 1796
	mov	ecx, DWORD PTR [esi+88]
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx+396], 1
; Line 1821
	ret	0
$LN2@dtls1_disp:
; Line 1799
	mov	eax, DWORD PTR [esi+88]
	cmp	BYTE PTR [eax+400], 2
	jne	SHORT $LN4@dtls1_disp
; Line 1804
	push	0
	push	0
	push	11					; 0000000bH
	push	DWORD PTR [esi+16]
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
$LN4@dtls1_disp:
; Line 1806
	mov	ecx, DWORD PTR [esi+100]
	test	ecx, ecx
	je	SHORT $LN5@dtls1_disp
; Line 1807
	push	DWORD PTR [esi+104]
	mov	eax, DWORD PTR [esi+88]
	push	esi
	push	2
	add	eax, 400				; 00000190H
	push	eax
	push	21					; 00000015H
	push	DWORD PTR [esi]
	push	1
	call	ecx
	add	esp, 28					; 0000001cH
$LN5@dtls1_disp:
; Line 1810
	mov	edx, DWORD PTR [esi+208]
	test	edx, edx
	jne	SHORT $LN14@dtls1_disp
; Line 1812
	mov	eax, DWORD PTR [esi+228]
	mov	edx, DWORD PTR [eax+156]
	test	edx, edx
	je	SHORT $LN12@dtls1_disp
$LN14@dtls1_disp:
; Line 1816
	mov	eax, DWORD PTR [esi+88]
	movzx	ecx, BYTE PTR [eax+400]
	movzx	eax, BYTE PTR [eax+401]
	shl	ecx, 8
	or	ecx, eax
; Line 1817
	push	ecx
	push	16392					; 00004008H
	push	esi
	call	edx
	add	esp, 12					; 0000000cH
$LN12@dtls1_disp:
; Line 1820
	mov	eax, edi
	pop	edi
	pop	esi
; Line 1821
	ret	0
_dtls1_dispatch_alert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_dtls1_write
_TEXT	SEGMENT
_pseq$1$ = -4						; size = 4
_mac_size$1$ = 8					; size = 4
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_create_empty_fragment$ = 24				; size = 4
_do_dtls1_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1491
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 1504
	mov	esi, DWORD PTR _s$[esp+4]
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN2@do_dtls1_w
; Line 1505
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	1505					; 000005e1H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	call	_OpenSSLDie
; Line 1506
	push	DWORD PTR _len$[esp+16]
	push	DWORD PTR _buf$[esp+20]
	push	DWORD PTR _type$[esp+24]
	push	esi
	call	_ssl3_write_pending
	add	esp, 28					; 0000001cH
	pop	esi
; Line 1716
	pop	ecx
	ret	0
$LN2@do_dtls1_w:
; Line 1510
	cmp	DWORD PTR [eax+396], 0
	je	SHORT $LN4@do_dtls1_w
; Line 1511
	mov	eax, DWORD PTR [esi+8]
	push	esi
	mov	eax, DWORD PTR [eax+60]
	call	eax
	add	esp, 4
; Line 1512
	test	eax, eax
	jle	$LN1@do_dtls1_w
$LN4@do_dtls1_w:
; Line 1517
	cmp	DWORD PTR _len$[esp+4], 0
	jne	SHORT $LN5@do_dtls1_w
	cmp	DWORD PTR _create_empty_fragment$[esp+4], 0
	jne	SHORT $LN5@do_dtls1_w
; Line 1518
	xor	eax, eax
	pop	esi
; Line 1716
	pop	ecx
	ret	0
$LN5@do_dtls1_w:
; Line 1525
	cmp	DWORD PTR [esi+192], 0
	push	ebx
	mov	ebx, DWORD PTR [esi+88]
	push	ebp
	push	edi
	je	SHORT $LN7@do_dtls1_w
	cmp	DWORD PTR [esi+140], 0
	je	SHORT $LN7@do_dtls1_w
	push	DWORD PTR [esi+144]
	call	_EVP_MD_CTX_md
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@do_dtls1_w
; Line 1531
	push	DWORD PTR [esi+144]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	mov	ecx, eax
	add	esp, 8
	mov	DWORD PTR _mac_size$1$[esp+16], ecx
; Line 1532
	test	ecx, ecx
	js	$err$36
	jmp	SHORT $LN10@do_dtls1_w
$LN7@do_dtls1_w:
; Line 1529
	mov	DWORD PTR _mac_size$1$[esp+16], 0
$LN10@do_dtls1_w:
; Line 1571
	mov	edi, DWORD PTR [ebx+252]
; Line 1575
	mov	eax, DWORD PTR _type$[esp+16]
	mov	BYTE PTR [edi], al
; Line 1576
	mov	DWORD PTR [ebx+304], eax
; Line 1582
	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax], 131071			; 0001ffffH
	jne	SHORT $LN11@do_dtls1_w
; Line 1583
	mov	WORD PTR [edi+1], 65534			; 0000fffeH
; Line 1585
	jmp	SHORT $LN34@do_dtls1_w
$LN11@do_dtls1_w:
; Line 1586
	mov	eax, DWORD PTR [esi]
	sar	eax, 8
	mov	BYTE PTR [edi+1], al
; Line 1587
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [edi+2], al
$LN34@do_dtls1_w:
; Line 1595
	mov	eax, DWORD PTR [esi+140]
	add	edi, 3
	mov	DWORD PTR _pseq$1$[esp+20], edi
	add	edi, 10					; 0000000aH
	test	eax, eax
	je	SHORT $LN13@do_dtls1_w
; Line 1596
	push	eax
	call	_EVP_CIPHER_CTX_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
; Line 1597
	cmp	eax, 2
	jne	SHORT $LN15@do_dtls1_w
; Line 1598
	push	DWORD PTR [esi+140]
	call	_EVP_CIPHER_CTX_iv_length
	mov	ebp, eax
	add	esp, 4
; Line 1599
	cmp	ebp, 1
	jg	SHORT $LN14@do_dtls1_w
$LN13@do_dtls1_w:
; Line 1608
	xor	ebp, ebp
$LN14@do_dtls1_w:
	mov	eax, DWORD PTR _len$[esp+16]
; Line 1611
	lea	edx, DWORD PTR [edi+ebp]
	mov	ecx, DWORD PTR _buf$[esp+16]
	mov	DWORD PTR [ebx+316], edx
	mov	DWORD PTR [ebx+308], eax
	mov	DWORD PTR [ebx+320], ecx
; Line 1620
	cmp	DWORD PTR [esi+148], 0
	je	SHORT $LN20@do_dtls1_w
; Line 1621
	push	esi
	call	_ssl3_do_compress
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN21@do_dtls1_w
; Line 1622
	push	1622					; 00000656H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	141					; 0000008dH
	push	245					; 000000f5H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1715
	or	eax, -1
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi
; Line 1716
	pop	ecx
	ret	0
$LN15@do_dtls1_w:
; Line 1603
	xor	ebp, ebp
	mov	ecx, 8
	cmp	eax, 6
	cmove	ebp, ecx
; Line 1607
	jmp	SHORT $LN14@do_dtls1_w
$LN20@do_dtls1_w:
; Line 1626
	push	eax
	push	ecx
	push	edx
	call	_memcpy
; Line 1627
	mov	eax, DWORD PTR [ebx+316]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ebx+320], eax
$LN21@do_dtls1_w:
; Line 1636
	cmp	DWORD PTR _mac_size$1$[esp+16], 0
	je	SHORT $LN23@do_dtls1_w
; Line 1637
	mov	eax, DWORD PTR [esi+8]
	push	1
	mov	ecx, DWORD PTR [eax+100]
	mov	eax, DWORD PTR [ebx+308]
	add	eax, ebp
	add	eax, edi
	push	eax
	mov	eax, DWORD PTR [ecx+4]
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	SHORT $err$36
; Line 1639
	mov	eax, DWORD PTR _mac_size$1$[esp+16]
	add	DWORD PTR [ebx+308], eax
$LN23@do_dtls1_w:
; Line 1643
	mov	DWORD PTR [ebx+320], edi
; Line 1644
	mov	DWORD PTR [ebx+316], edi
; Line 1646
	test	ebp, ebp
	je	SHORT $LN25@do_dtls1_w
; Line 1647
	add	DWORD PTR [ebx+308], ebp
$LN25@do_dtls1_w:
; Line 1649
	mov	eax, DWORD PTR [esi+8]
	push	1
	push	esi
	mov	eax, DWORD PTR [eax+100]
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 8
	cmp	eax, 1
	jge	SHORT $LN26@do_dtls1_w
$err$36:
	pop	edi
	pop	ebp
	pop	ebx
; Line 1715
	or	eax, -1
	pop	esi
; Line 1716
	pop	ecx
	ret	0
$LN26@do_dtls1_w:
; Line 1660
	mov	eax, DWORD PTR [esi+92]
	mov	edx, DWORD PTR _pseq$1$[esp+20]
	movzx	eax, BYTE PTR [eax+523]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR [esi+92]
	movzx	eax, BYTE PTR [eax+522]
	mov	BYTE PTR [edx+1], al
; Line 1667
	mov	ecx, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [ecx+86]
	mov	DWORD PTR [edx+2], eax
	mov	ax, WORD PTR [ecx+90]
	mov	WORD PTR [edx+6], ax
; Line 1669
	movzx	eax, BYTE PTR [ebx+309]
	mov	BYTE PTR [edx+8], al
	movzx	eax, BYTE PTR [ebx+308]
	mov	BYTE PTR [edx+9], al
; Line 1671
	mov	ecx, DWORD PTR [esi+100]
	test	ecx, ecx
	je	SHORT $LN27@do_dtls1_w
; Line 1672
	push	DWORD PTR [esi+104]
	lea	eax, DWORD PTR [edx-3]
	push	esi
	push	13					; 0000000dH
	push	eax
	push	256					; 00000100H
	push	0
	push	1
	call	ecx
	add	esp, 28					; 0000001cH
$LN27@do_dtls1_w:
; Line 1679
	mov	edi, DWORD PTR _type$[esp+16]
; Line 1680
	add	DWORD PTR [ebx+308], 13			; 0000000dH
	mov	DWORD PTR [ebx+304], edi
; Line 1689
	mov	eax, DWORD PTR [esi+88]
	add	eax, 84					; 00000054H
	push	eax
	call	_ssl3_record_sequence_update
; Line 1696
	mov	eax, DWORD PTR [ebx+308]
	add	esp, 4
	cmp	DWORD PTR _create_empty_fragment$[esp+16], 0
	jne	SHORT $LN31@do_dtls1_w
; Line 1707
	mov	ecx, DWORD PTR _len$[esp+16]
; Line 1708
	mov	edx, DWORD PTR _buf$[esp+16]
	mov	DWORD PTR [ebx+264], eax
	mov	DWORD PTR [ebx+260], 0
	mov	eax, DWORD PTR [esi+88]
; Line 1713
	push	ecx
	push	edx
	push	edi
	mov	DWORD PTR [eax+360], ecx
	mov	eax, DWORD PTR [esi+88]
	push	esi
	mov	DWORD PTR [eax+372], edx
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+364], edi
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+368], ecx
	call	_ssl3_write_pending
	add	esp, 16					; 00000010H
$LN31@do_dtls1_w:
	pop	edi
	pop	ebp
	pop	ebx
$LN1@do_dtls1_w:
	pop	esi
; Line 1716
	pop	ecx
	ret	0
_do_dtls1_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_get_record
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dtls1_get_record PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 573
	push	esi
; Line 582
	mov	esi, DWORD PTR _s$[esp]
	push	edi
; Line 588
	push	esi
	mov	edi, DWORD PTR [esi+88]
	add	edi, 268				; 0000010cH
	call	_dtls1_process_buffered_records
	add	esp, 4
	test	eax, eax
	jns	SHORT $LN2@dtls1_get_
; Line 589
	pop	edi
	or	eax, -1
	pop	esi
; Line 741
	ret	0
$LN2@dtls1_get_:
; Line 592
	mov	eax, DWORD PTR [esi+92]
	push	ebx
; Line 290
	push	DWORD PTR [eax+576]
	call	_pqueue_pop
	mov	ebx, eax
	add	esp, 4
; Line 291
	test	ebx, ebx
	je	SHORT $LN53@dtls1_get_
; Line 292
	push	ebx
	push	esi
	call	_dtls1_copy_record
; Line 294
	push	DWORD PTR [ebx+8]
	call	_CRYPTO_free
; Line 295
	push	ebx
	call	_pitem_free
	add	esp, 16					; 00000010H
; Line 593
	mov	eax, 1
	pop	ebx
	pop	edi
	pop	esi
; Line 741
	ret	0
$LN53@dtls1_get_:
	push	ebp
	npad	4
$again$57:
; Line 598
	cmp	DWORD PTR [esi+56], 241			; 000000f1H
	jne	SHORT $LN5@dtls1_get_
	cmp	DWORD PTR [esi+80], 13			; 0000000dH
	jae	$LN12@dtls1_get_
$LN5@dtls1_get_:
; Line 600
	mov	eax, DWORD PTR [esi+88]
	push	0
	push	DWORD PTR [eax+240]
	push	13					; 0000000dH
	push	esi
	call	_ssl3_read_n
	add	esp, 16					; 00000010H
; Line 602
	test	eax, eax
	jle	$LN55@dtls1_get_
; Line 606
	cmp	DWORD PTR [esi+80], 13			; 0000000dH
	je	SHORT $LN7@dtls1_get_
; Line 607
	mov	DWORD PTR [esi+80], 0
; Line 608
	jmp	SHORT $again$57
$LN7@dtls1_get_:
; Line 615
	mov	eax, DWORD PTR [esi+100]
	mov	ebx, DWORD PTR [esi+76]
	mov	DWORD PTR [esi+56], 241			; 000000f1H
	test	eax, eax
	je	SHORT $LN8@dtls1_get_
; Line 616
	push	DWORD PTR [esi+104]
	push	esi
	push	13					; 0000000dH
	push	ebx
	push	256					; 00000100H
	push	0
	push	0
	call	eax
	add	esp, 28					; 0000001cH
$LN8@dtls1_get_:
; Line 620
	movzx	eax, BYTE PTR [ebx]
	mov	DWORD PTR [edi], eax
; Line 621
	movzx	ecx, BYTE PTR [ebx+1]
; Line 622
	movzx	eax, BYTE PTR [ebx+2]
; Line 623
	shl	ecx, 8
	or	ecx, eax
; Line 626
	movzx	eax, BYTE PTR [ebx+4]
	movzx	edx, cx
	movzx	ecx, BYTE PTR [ebx+3]
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR [edi+24], ecx
; Line 628
	mov	ecx, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [ebx+5]
	mov	DWORD PTR [ecx+10], eax
	mov	ax, WORD PTR [ebx+9]
	mov	WORD PTR [ecx+14], ax
; Line 631
	movzx	ecx, BYTE PTR [ebx+11]
	movzx	eax, BYTE PTR [ebx+12]
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR [edi+4], ecx
; Line 634
	cmp	DWORD PTR [esi+268], 0
	jne	SHORT $LN10@dtls1_get_
; Line 635
	cmp	edx, DWORD PTR [esi]
	je	SHORT $LN10@dtls1_get_
; Line 637
	mov	DWORD PTR [edi+4], 0
; Line 638
	mov	DWORD PTR [esi+80], 0
; Line 639
	jmp	$again$57
$LN10@dtls1_get_:
; Line 643
	xor	edx, DWORD PTR [esi]
	test	edx, 65280				; 0000ff00H
	je	SHORT $LN11@dtls1_get_
; Line 645
	mov	DWORD PTR [edi+4], 0
; Line 646
	mov	DWORD PTR [esi+80], 0
; Line 647
	jmp	$again$57
$LN11@dtls1_get_:
; Line 650
	cmp	ecx, 17728				; 00004540H
	jbe	SHORT $LN12@dtls1_get_
; Line 652
	mov	DWORD PTR [edi+4], 0
; Line 653
	mov	DWORD PTR [esi+80], 0
; Line 654
	jmp	$again$57
$LN12@dtls1_get_:
; Line 662
	mov	eax, DWORD PTR [esi+80]
	mov	ebx, DWORD PTR [edi+4]
	sub	eax, 13					; 0000000dH
	cmp	ebx, eax
	jbe	SHORT $LN14@dtls1_get_
; Line 665
	push	1
	push	ebx
	push	ebx
	push	esi
	call	_ssl3_read_n
	add	esp, 16					; 00000010H
; Line 667
	cmp	eax, ebx
	je	SHORT $LN14@dtls1_get_
; Line 668
	mov	DWORD PTR [edi+4], 0
; Line 669
	mov	DWORD PTR [esi+80], 0
; Line 670
	jmp	$again$57
$LN14@dtls1_get_:
; Line 1830
	mov	ecx, DWORD PTR [esi+92]
	xor	ebp, ebp
; Line 678
	mov	DWORD PTR [esi+56], 240			; 000000f0H
; Line 1830
	mov	edx, DWORD PTR [edi+24]
	movzx	eax, WORD PTR [ecx+520]
	cmp	edx, eax
	jne	SHORT $LN29@dtls1_get_
; Line 1831
	lea	ebx, DWORD PTR [ecx+524]
	jmp	SHORT $LN28@dtls1_get_
$LN29@dtls1_get_:
; Line 1834
	inc	eax
	cmp	edx, eax
	jne	$LN51@dtls1_get_
	mov	eax, DWORD PTR [edi]
	cmp	eax, 22					; 00000016H
	je	SHORT $LN32@dtls1_get_
	cmp	eax, 21					; 00000015H
	jne	$LN51@dtls1_get_
$LN32@dtls1_get_:
; Line 1836
	mov	ebp, 1
; Line 1837
	lea	ebx, DWORD PTR [ecx+536]
$LN28@dtls1_get_:
; Line 682
	test	ebx, ebx
	je	$LN51@dtls1_get_
; Line 699
	cmp	DWORD PTR [ecx+596], 0
	je	SHORT $LN17@dtls1_get_
	cmp	DWORD PTR [edi], 22			; 00000016H
	jne	SHORT $LN17@dtls1_get_
	cmp	DWORD PTR [esi+80], 13			; 0000000dH
	jbe	SHORT $LN17@dtls1_get_
	mov	eax, DWORD PTR [esi+76]
	cmp	BYTE PTR [eax+13], 1
	je	SHORT $LN16@dtls1_get_
$LN17@dtls1_get_:
	push	ebx
	push	esi
	call	_dtls1_record_replay_check
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@dtls1_get_
; Line 701
	mov	DWORD PTR [edi+4], eax
; Line 702
	mov	DWORD PTR [esi+80], eax
; Line 703
	jmp	$again$57
$LN16@dtls1_get_:
; Line 710
	cmp	DWORD PTR [edi+4], 0
	je	$again$57
; Line 720
	push	esi
	test	ebp, ebp
	je	SHORT $LN19@dtls1_get_
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	jne	SHORT $LN21@dtls1_get_
	cmp	DWORD PTR [esi+28], 0
	je	SHORT $LN20@dtls1_get_
$LN21@dtls1_get_:
	mov	ecx, DWORD PTR [esi+92]
	cmp	DWORD PTR [ecx+596], 0
	jne	SHORT $LN20@dtls1_get_
; Line 722
	lea	eax, DWORD PTR [edi+28]
	push	eax
	lea	eax, DWORD PTR [ecx+564]
	push	eax
	push	esi
	call	_dtls1_buffer_record
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	SHORT $LN45@dtls1_get_
; Line 725
	push	ebx
	push	esi
	call	_dtls1_record_bitmap_update
	add	esp, 8
$LN20@dtls1_get_:
; Line 727
	mov	DWORD PTR [edi+4], 0
; Line 728
	mov	DWORD PTR [esi+80], 0
; Line 729
	jmp	$again$57
$LN19@dtls1_get_:
; Line 732
	call	_dtls1_process_record
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN23@dtls1_get_
$LN51@dtls1_get_:
; Line 733
	mov	DWORD PTR [edi+4], 0
; Line 734
	mov	DWORD PTR [esi+80], 0
; Line 735
	jmp	$again$57
$LN45@dtls1_get_:
	pop	ebp
	pop	ebx
	pop	edi
; Line 723
	or	eax, -1
	pop	esi
; Line 741
	ret	0
$LN23@dtls1_get_:
; Line 737
	push	ebx
	push	esi
	call	_dtls1_record_bitmap_update
	add	esp, 8
; Line 739
	mov	eax, 1
$LN55@dtls1_get_:
; Line 741
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
	ret	0
_dtls1_get_record ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_reset_seq_numbers
_TEXT	SEGMENT
_s$ = 8							; size = 4
_rw$ = 12						; size = 4
_dtls1_reset_seq_numbers PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1908
	test	BYTE PTR _rw$[esp-4], 1
; Line 1909
	mov	edx, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx+88]
	je	SHORT $LN2@dtls1_rese
; Line 1910
	mov	eax, DWORD PTR [edx+92]
	add	esi, 8
	inc	WORD PTR [eax+520]
; Line 1911
	mov	ecx, DWORD PTR [edx+92]
	movq	xmm0, QWORD PTR [ecx+536]
	movq	QWORD PTR [ecx+524], xmm0
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [ecx+544]
	mov	DWORD PTR [ecx+532], eax
; Line 1912
	mov	eax, DWORD PTR [edx+92]
	movq	QWORD PTR [eax+536], xmm0
	xorps	xmm0, xmm0
	mov	DWORD PTR [eax+544], 0
; Line 1920
	movq	QWORD PTR [esi], xmm0
	pop	esi
; Line 1921
	ret	0
$LN2@dtls1_rese:
; Line 1915
	mov	ecx, DWORD PTR [edx+92]
	add	esi, 84					; 00000054H
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx+554], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+558], eax
; Line 1917
	mov	eax, DWORD PTR [edx+92]
	inc	WORD PTR [eax+522]
; Line 1920
	movq	QWORD PTR [esi], xmm0
	pop	esi
; Line 1921
	ret	0
_dtls1_reset_seq_numbers ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_write_bytes
_TEXT	SEGMENT
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_dtls1_write_bytes PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1483
	cmp	DWORD PTR _len$[esp-4], 16384		; 00004000H
	jle	SHORT $LN4@dtls1_writ
	push	OFFSET ??_C@_0CA@KPEGDAPO@len?5?$DM?$DN?5SSL3_RT_MAX_PLAIN_LENGTH?$AA@
	push	1483					; 000005cbH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN4@dtls1_writ:
; Line 1484
	mov	eax, DWORD PTR _s$[esp-4]
; Line 1485
	push	0
	push	DWORD PTR _len$[esp]
	push	DWORD PTR _buf$[esp+4]
	mov	DWORD PTR [eax+24], 1
	push	DWORD PTR _type$[esp+8]
	push	eax
	call	_do_dtls1_write
	add	esp, 20					; 00000014H
; Line 1487
	ret	0
_dtls1_write_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_write_app_data_bytes
_TEXT	SEGMENT
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_buf_$ = 16						; size = 4
_len$ = 20						; size = 4
_dtls1_write_app_data_bytes PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 1407
	push	esi
; Line 1420
	mov	esi, DWORD PTR _s$[esp]
	push	esi
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	je	SHORT $LN4@dtls1_writ
	cmp	DWORD PTR [esi+28], 0
	jne	SHORT $LN4@dtls1_writ
; Line 1423
	mov	eax, DWORD PTR [esi+32]
	push	esi
	call	eax
	add	esp, 4
; Line 1424
	test	eax, eax
	js	SHORT $LN1@dtls1_writ
; Line 1426
	jne	SHORT $LN4@dtls1_writ
; Line 1427
	push	1428					; 00000594H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	229					; 000000e5H
	push	268					; 0000010cH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1429
	or	eax, -1
	pop	esi
; Line 1440
	ret	0
$LN4@dtls1_writ:
; Line 1433
	mov	eax, DWORD PTR _len$[esp]
	cmp	eax, 16384				; 00004000H
	jle	SHORT $LN5@dtls1_writ
; Line 1434
	push	1434					; 0000059aH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	334					; 0000014eH
	push	268					; 0000010cH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	or	eax, -1
	pop	esi
; Line 1440
	ret	0
$LN5@dtls1_writ:
; Line 1485
	push	0
	push	eax
	push	DWORD PTR _buf_$[esp+8]
	mov	DWORD PTR [esi+24], 1
	push	DWORD PTR _type$[esp+12]
	push	esi
	call	_do_dtls1_write
	add	esp, 20					; 00000014H
$LN1@dtls1_writ:
	pop	esi
; Line 1440
	ret	0
_dtls1_write_app_data_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dtls1_read_bytes
_TEXT	SEGMENT
_cb$1$ = -80						; size = 4
_dest_len$1$ = -76					; size = 4
_buf$GSCopy$1$ = -72					; size = 4
_ccs_hdr$1 = -68					; size = 4
_msg_hdr$2 = -64					; size = 44
_tmp$3 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_peek$ = 24						; size = 4
_dtls1_read_bytes PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\d1_pkt.c
; Line 772
	mov	eax, 80					; 00000050H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+80], eax
	mov	ecx, DWORD PTR _buf$[esp+76]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+84]
; Line 776
	xor	ebp, ebp
	mov	DWORD PTR _buf$GSCopy$1$[esp+88], ecx
	mov	DWORD PTR _cb$1$[esp+88], ebp
; Line 778
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+236], ebp
	jne	SHORT $LN8@dtls1_read
; Line 779
	push	esi
	call	_ssl3_setup_buffers
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN140@dtls1_read
; Line 780
	pop	esi
	or	eax, -1
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN140@dtls1_read:
	mov	ecx, DWORD PTR _buf$GSCopy$1$[esp+88]
$LN8@dtls1_read:
	push	edi
; Line 784
	mov	edi, DWORD PTR _type$[esp+88]
	test	edi, edi
	je	SHORT $LN11@dtls1_read
	cmp	edi, 23					; 00000017H
	je	SHORT $LN11@dtls1_read
	cmp	edi, 22					; 00000016H
	jne	SHORT $LN10@dtls1_read
$LN11@dtls1_read:
	mov	eax, DWORD PTR _peek$[esp+88]
	test	eax, eax
	je	SHORT $LN9@dtls1_read
	cmp	edi, 23					; 00000017H
	je	SHORT $LN9@dtls1_read
$LN10@dtls1_read:
; Line 786
	push	786					; 00000312H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	68					; 00000044H
; Line 787
	jmp	SHORT $LN152@dtls1_read
$LN9@dtls1_read:
; Line 793
	push	eax
	push	DWORD PTR _len$[esp+92]
	push	ecx
	push	edi
	push	esi
	call	_have_handshake_fragment
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN143@dtls1_read
; Line 811
	cmp	DWORD PTR [esi+28], ebp
	jne	SHORT $LN141@dtls1_read
	push	esi
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	je	SHORT $LN141@dtls1_read
; Line 815
	mov	eax, DWORD PTR [esi+32]
	push	esi
	call	eax
	add	esp, 4
; Line 816
	test	eax, eax
	js	$LN143@dtls1_read
; Line 818
	jne	SHORT $LN141@dtls1_read
; Line 819
	push	819					; 00000333H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	229					; 000000e5H
$LN152@dtls1_read:
	push	258					; 00000102H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 820
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN141@dtls1_read:
	push	ebx
	npad	5
$start$154:
; Line 833
	mov	ebx, DWORD PTR [esi+88]
	add	ebx, 268				; 0000010cH
	mov	DWORD PTR [esi+24], 1
; Line 839
	cmp	DWORD PTR [esi+52], 3
	jne	SHORT $LN17@dtls1_read
	cmp	DWORD PTR [ebx+4], 0
	jne	SHORT $LN17@dtls1_read
; Line 841
	mov	eax, DWORD PTR [esi+92]
	push	DWORD PTR [eax+592]
	call	_pqueue_pop
	mov	edi, eax
	add	esp, 4
; Line 842
	test	edi, edi
	je	SHORT $LN139@dtls1_read
; Line 852
	push	edi
	push	esi
	call	_dtls1_copy_record
; Line 854
	push	DWORD PTR [edi+8]
	call	_CRYPTO_free
; Line 855
	push	edi
	call	_pitem_free
	add	esp, 16					; 00000010H
$LN139@dtls1_read:
	mov	edi, DWORD PTR _type$[esp+92]
$LN17@dtls1_read:
; Line 860
	push	esi
	call	_dtls1_handle_timeout
	add	esp, 4
	test	eax, eax
	jg	SHORT $start$154
; Line 864
	cmp	DWORD PTR [ebx+4], 0
	je	SHORT $LN20@dtls1_read
	cmp	DWORD PTR [esi+56], 241			; 000000f1H
	jne	SHORT $LN23@dtls1_read
$LN20@dtls1_read:
; Line 865
	push	esi
	call	_dtls1_get_record
	add	esp, 4
; Line 866
	test	eax, eax
	jg	SHORT $LN23@dtls1_read
; Line 867
	push	eax
	push	esi
	call	_dtls1_read_failed
	add	esp, 8
; Line 869
	test	eax, eax
	jg	$start$154
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN23@dtls1_read:
; Line 876
	mov	ecx, DWORD PTR [esi+92]
	cmp	DWORD PTR [ecx+596], 0
	je	SHORT $LN24@dtls1_read
	cmp	DWORD PTR [ebx], 22			; 00000016H
	je	SHORT $LN24@dtls1_read
; Line 877
	mov	DWORD PTR [ebx+4], 0
; Line 878
	jmp	$start$154
$LN24@dtls1_read:
; Line 885
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+384], 0
	je	SHORT $LN25@dtls1_read
	cmp	DWORD PTR [ebx], 22			; 00000016H
	je	SHORT $LN25@dtls1_read
; Line 891
	lea	eax, DWORD PTR [ebx+28]
	push	eax
	lea	eax, DWORD PTR [ecx+588]
	push	eax
	push	esi
	call	_dtls1_buffer_record
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	$LN108@dtls1_read
; Line 896
	mov	DWORD PTR [ebx+4], 0
; Line 897
	jmp	$start$154
$LN25@dtls1_read:
; Line 904
	test	BYTE PTR [esi+48], 2
	jne	$LN109@dtls1_read
; Line 910
	mov	eax, DWORD PTR [ebx]
	cmp	edi, eax
	je	$LN110@dtls1_read
; Line 983
	cmp	eax, 22					; 00000016H
	jne	SHORT $LN35@dtls1_read
; Line 984
	lea	edi, DWORD PTR [eax-10]
; Line 985
	lea	ebp, DWORD PTR [ecx+724]
; Line 986
	lea	eax, DWORD PTR [ecx+736]
	jmp	SHORT $LN145@dtls1_read
$LN35@dtls1_read:
; Line 987
	cmp	eax, 21					; 00000015H
	jne	SHORT $LN37@dtls1_read
; Line 988
	mov	edi, 2
; Line 989
	lea	ebp, DWORD PTR [ecx+718]
; Line 990
	lea	eax, DWORD PTR [ecx+720]
$LN145@dtls1_read:
	mov	DWORD PTR _dest_len$1$[esp+96], eax
; Line 1031
	cmp	DWORD PTR [ebx+4], edi
	jae	SHORT $LN44@dtls1_read
; Line 1042
	mov	ebp, DWORD PTR _cb$1$[esp+96]
	mov	edi, DWORD PTR _type$[esp+92]
	mov	DWORD PTR [esi+56], 240			; 000000f0H
	mov	DWORD PTR [ebx+4], 0
	jmp	$start$154
$LN44@dtls1_read:
; Line 1046
	xor	edx, edx
	test	edi, edi
	je	SHORT $LN3@dtls1_read
	npad	3
$LL4@dtls1_read:
; Line 1047
	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [ebx+12]
	mov	al, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx+ebp], al
	inc	edx
	inc	DWORD PTR [ebx+8]
; Line 1048
	dec	DWORD PTR [ebx+4]
	cmp	edx, edi
	jb	SHORT $LL4@dtls1_read
$LN3@dtls1_read:
; Line 1050
	mov	eax, DWORD PTR _dest_len$1$[esp+96]
	mov	ebp, DWORD PTR _cb$1$[esp+96]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR _type$[esp+92]
	jmp	SHORT $LN43@dtls1_read
$LN37@dtls1_read:
; Line 993
	cmp	eax, 24					; 00000018H
	je	$LN111@dtls1_read
; Line 1005
	cmp	eax, 20					; 00000014H
	jne	$LN112@dtls1_read
$LN43@dtls1_read:
; Line 1064
	cmp	DWORD PTR [esi+36], 0
	jne	$LN45@dtls1_read
	mov	eax, DWORD PTR [esi+92]
	cmp	DWORD PTR [eax+736], 12			; 0000000cH
	jb	$LN45@dtls1_read
	cmp	BYTE PTR [eax+724], 0
	jne	$LN45@dtls1_read
	mov	ecx, DWORD PTR [esi+192]
	test	ecx, ecx
	je	$LN45@dtls1_read
	cmp	DWORD PTR [ecx+180], 0
	je	$LN45@dtls1_read
; Line 1065
	mov	DWORD PTR [eax+736], 0
; Line 1068
	mov	eax, DWORD PTR [esi+92]
	cmp	BYTE PTR [eax+725], 0
	jne	$LN47@dtls1_read
	cmp	BYTE PTR [eax+726], 0
	jne	$LN47@dtls1_read
	cmp	BYTE PTR [eax+727], 0
	jne	$LN47@dtls1_read
; Line 1079
	mov	ecx, DWORD PTR [esi+100]
	test	ecx, ecx
	je	SHORT $LN48@dtls1_read
; Line 1080
	push	DWORD PTR [esi+104]
	add	eax, 724				; 000002d4H
	push	esi
	push	4
	push	eax
	push	22					; 00000016H
	push	DWORD PTR [esi]
	push	0
	call	ecx
	add	esp, 28					; 0000001cH
$LN48@dtls1_read:
; Line 1085
	push	esi
	call	_SSL_state
	add	esp, 4
	cmp	eax, 3
	jne	$start$154
	mov	eax, DWORD PTR [esi+88]
	test	BYTE PTR [eax], 1
	jne	$start$154
	cmp	DWORD PTR [eax+404], 0
	jne	$start$154
; Line 1087
	mov	eax, DWORD PTR [esi+92]
; Line 1089
	push	esi
	inc	WORD PTR [eax+552]
	mov	DWORD PTR [esi+40], 1
	call	_ssl3_renegotiate
; Line 1090
	push	esi
	call	_ssl3_renegotiate_check
	add	esp, 8
	test	eax, eax
	je	$start$154
; Line 1091
	mov	eax, DWORD PTR [esi+32]
	push	esi
	call	eax
	add	esp, 4
; Line 1092
	test	eax, eax
	js	$LN144@dtls1_read
; Line 1094
	je	$LN115@dtls1_read
; Line 1100
	test	BYTE PTR [esi+260], 4
	jne	$start$154
; Line 1101
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+248], 0
	jne	$start$154
; Line 1110
	push	esi
	mov	DWORD PTR [esi+24], 3
	call	_SSL_get_rbio
	mov	esi, eax
; Line 1111
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
; Line 1112
	push	9
	push	esi
	call	_BIO_set_flags
; Line 1326
	add	esp, 20					; 00000014H
; Line 1327
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN45@dtls1_read:
; Line 1125
	mov	ecx, DWORD PTR [esi+92]
	cmp	DWORD PTR [ecx+720], 2
	jb	$LN55@dtls1_read
; Line 1126
	movzx	ebx, BYTE PTR [ecx+718]
; Line 1127
	movzx	edi, BYTE PTR [ecx+719]
; Line 1129
	mov	DWORD PTR [ecx+720], 0
; Line 1131
	mov	ecx, DWORD PTR [esi+100]
	test	ecx, ecx
	je	SHORT $LN56@dtls1_read
; Line 1132
	push	DWORD PTR [esi+104]
	mov	eax, DWORD PTR [esi+92]
	push	esi
	push	2
	add	eax, 718				; 000002ceH
	push	eax
	push	21					; 00000015H
	push	DWORD PTR [esi]
	push	0
	call	ecx
	add	esp, 28					; 0000001cH
$LN56@dtls1_read:
; Line 1135
	mov	eax, DWORD PTR [esi+208]
	test	eax, eax
	je	SHORT $LN57@dtls1_read
; Line 1136
	mov	ebp, eax
	mov	DWORD PTR _cb$1$[esp+96], eax
	jmp	SHORT $LN59@dtls1_read
$LN57@dtls1_read:
; Line 1137
	mov	eax, DWORD PTR [esi+228]
	mov	eax, DWORD PTR [eax+156]
	test	eax, eax
	cmovne	ebp, eax
	mov	DWORD PTR _cb$1$[esp+96], ebp
$LN59@dtls1_read:
; Line 1140
	test	ebp, ebp
	je	SHORT $LN60@dtls1_read
; Line 1141
	mov	eax, ebx
	shl	eax, 8
	or	eax, edi
; Line 1142
	push	eax
	push	16388					; 00004004H
	push	esi
	call	ebp
	add	esp, 12					; 0000000cH
$LN60@dtls1_read:
; Line 1145
	cmp	ebx, 1
	jne	$LN61@dtls1_read
; Line 1146
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+388], edi
; Line 1147
	test	edi, edi
	je	$LN117@dtls1_read
; Line 1212
	mov	edi, DWORD PTR _type$[esp+92]
	jmp	$start$154
$LN55@dtls1_read:
; Line 1215
	test	BYTE PTR [esi+48], 1
	jne	$LN118@dtls1_read
; Line 1222
	mov	eax, DWORD PTR [ebx]
	cmp	eax, 20					; 00000014H
	jne	$LN67@dtls1_read
; Line 1224
	lea	edi, DWORD PTR [eax-19]
; Line 1226
	lea	eax, DWORD PTR _ccs_hdr$1[esp+96]
	push	eax
	push	DWORD PTR [ebx+12]
	call	_dtls1_get_ccs_header
	add	esp, 8
; Line 1228
	mov	eax, 3
	cmp	DWORD PTR [esi], 256			; 00000100H
	cmove	edi, eax
; Line 1237
	cmp	DWORD PTR [ebx+4], edi
	jne	$LN70@dtls1_read
	cmp	DWORD PTR [ebx+8], 0
	jne	$LN70@dtls1_read
	mov	ecx, DWORD PTR [ebx+12]
	cmp	BYTE PTR [ecx], 1
	jne	$LN70@dtls1_read
; Line 1243
	mov	DWORD PTR [ebx+4], 0
; Line 1245
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	je	SHORT $LN71@dtls1_read
; Line 1246
	push	DWORD PTR [esi+104]
	push	esi
	push	1
	push	ecx
	push	20					; 00000014H
	push	DWORD PTR [esi]
	push	0
	call	eax
	add	esp, 28					; 0000001cH
$LN71@dtls1_read:
; Line 1253
	mov	eax, DWORD PTR [esi+92]
	mov	edi, DWORD PTR _type$[esp+92]
	cmp	DWORD PTR [eax+744], 0
	je	$start$154
; Line 1257
	mov	DWORD PTR [eax+744], 0
; Line 1259
	mov	eax, DWORD PTR [esi+88]
; Line 1260
	push	esi
	mov	DWORD PTR [eax+384], 1
	call	_ssl3_do_change_cipher_spec
	add	esp, 4
	test	eax, eax
	je	$err$155
; Line 1264
	push	1
	push	esi
	call	_dtls1_reset_seq_numbers
	add	esp, 8
; Line 1266
	cmp	DWORD PTR [esi], 256			; 00000100H
	jne	$start$154
; Line 1267
	mov	eax, DWORD PTR [esi+92]
	inc	WORD PTR [eax+552]
; Line 1278
	jmp	$start$154
$LN67@dtls1_read:
; Line 1284
	cmp	DWORD PTR [ecx+736], 12			; 0000000cH
	jb	$LN75@dtls1_read
	cmp	DWORD PTR [esi+28], 0
	jne	$LN75@dtls1_read
; Line 1289
	lea	eax, DWORD PTR _msg_hdr$2[esp+96]
	push	eax
	push	DWORD PTR [ebx+12]
	call	_dtls1_get_message_header
; Line 1290
	mov	eax, DWORD PTR [esi+92]
	add	esp, 8
	movzx	eax, WORD PTR [eax+520]
	cmp	DWORD PTR [ebx+24], eax
	je	SHORT $LN76@dtls1_read
; Line 1291
	mov	DWORD PTR [ebx+4], 0
; Line 1292
	jmp	$start$154
$LN76@dtls1_read:
; Line 1299
	cmp	BYTE PTR _msg_hdr$2[esp+96], 20		; 00000014H
	jne	SHORT $LN77@dtls1_read
; Line 1300
	push	esi
	call	_dtls1_check_timeout_num
	add	esp, 4
	test	eax, eax
	js	$err$155
; Line 1303
	push	esi
	call	_dtls1_retransmit_buffered_messages
	add	esp, 4
; Line 1304
	mov	DWORD PTR [ebx+4], 0
; Line 1305
	jmp	$start$154
$LN77@dtls1_read:
; Line 1308
	mov	eax, DWORD PTR [esi+52]
	and	eax, 4095				; 00000fffH
	cmp	eax, 3
	jne	SHORT $LN79@dtls1_read
	mov	eax, DWORD PTR [esi+88]
	test	BYTE PTR [eax], 1
	jne	SHORT $LN79@dtls1_read
; Line 1317
	cmp	DWORD PTR [esi+36], 0
	mov	eax, 4096				; 00001000H
	mov	ecx, 8192				; 00002000H
; Line 1319
	mov	DWORD PTR [esi+400], 1
	cmovne	eax, ecx
; Line 1320
	mov	DWORD PTR [esi+40], 1
	mov	DWORD PTR [esi+52], eax
$LN79@dtls1_read:
; Line 1322
	mov	eax, DWORD PTR [esi+32]
	push	esi
	call	eax
	add	esp, 4
; Line 1323
	test	eax, eax
	js	$LN144@dtls1_read
; Line 1325
	je	$LN123@dtls1_read
; Line 1330
	test	BYTE PTR [esi+260], 4
	jne	$start$154
; Line 1331
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+248], 0
	jne	$start$154
; Line 1340
	push	esi
	mov	DWORD PTR [esi+24], 3
	call	_SSL_get_rbio
	mov	esi, eax
; Line 1341
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
; Line 1342
	push	9
	push	esi
	call	_BIO_set_flags
	add	esp, 20					; 00000014H
; Line 1343
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN75@dtls1_read:
; Line 1349
	cmp	eax, 20					; 00000014H
	jl	SHORT $LN84@dtls1_read
	cmp	eax, 22					; 00000016H
	jle	$LN86@dtls1_read
	cmp	eax, 23					; 00000017H
	je	$LN87@dtls1_read
$LN84@dtls1_read:
; Line 1353
	cmp	DWORD PTR [esi], 769			; 00000301H
	jne	$LN85@dtls1_read
; Line 1354
	mov	DWORD PTR [ebx+4], 0
; Line 1355
	jmp	$start$154
$LN108@dtls1_read:
; Line 893
	push	893					; 0000037dH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	68					; 00000044H
; Line 894
	jmp	$LN151@dtls1_read
$LN115@dtls1_read:
; Line 1095
	push	1096					; 00000448H
; Line 1097
	jmp	$LN149@dtls1_read
$LN47@dtls1_read:
; Line 1071
	push	1071					; 0000042fH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	mov	edi, 50					; 00000032H
	push	105					; 00000069H
; Line 1072
	jmp	$LN146@dtls1_read
$LN117@dtls1_read:
; Line 1163
	or	DWORD PTR [esi+48], 2
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN61@dtls1_read:
; Line 1194
	cmp	ebx, 2
	jne	$LN64@dtls1_read
; Line 1198
	mov	eax, DWORD PTR [esi+88]
; Line 1199
	push	1200					; 000004b0H
	mov	DWORD PTR [esi+24], 1
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	mov	DWORD PTR [eax+392], edi
	lea	eax, DWORD PTR [edi+1000]
	push	eax
	push	258					; 00000102H
	push	20					; 00000014H
	call	_ERR_put_error
; Line 1201
	push	edi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmp$3[esp+124]
	push	16					; 00000010H
	push	eax
	call	_BIO_snprintf
; Line 1202
	lea	eax, DWORD PTR _tmp$3[esp+132]
	push	eax
	push	OFFSET ??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@
	push	ebx
	call	_ERR_add_error_data
; Line 1204
	push	DWORD PTR [esi+192]
	or	DWORD PTR [esi+48], ebx
	push	DWORD PTR [esi+228]
	call	_SSL_CTX_remove_session
	add	esp, 56					; 00000038H
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN64@dtls1_read:
; Line 1208
	push	1208					; 000004b8H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	mov	edi, 47					; 0000002fH
	push	246					; 000000f6H
; Line 1209
	jmp	$LN146@dtls1_read
$LN70@dtls1_read:
; Line 1239
	push	1239					; 000004d7H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	103					; 00000067H
	push	258					; 00000102H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1403
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN123@dtls1_read:
; Line 1326
	push	1326					; 0000052eH
$LN149@dtls1_read:
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	229					; 000000e5H
$LN151@dtls1_read:
	push	258					; 00000102H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1327
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN87@dtls1_read:
; Line 1381
	mov	ecx, DWORD PTR [esi+88]
	cmp	DWORD PTR [ecx+416], 0
	je	SHORT $LN88@dtls1_read
	cmp	DWORD PTR [ecx+408], 0
	je	SHORT $LN88@dtls1_read
	mov	eax, DWORD PTR [esi+52]
	test	eax, 4096				; 00001000H
	je	SHORT $LN91@dtls1_read
	cmp	eax, 4368				; 00001110H
	jl	SHORT $LN91@dtls1_read
	cmp	eax, 4384				; 00001120H
	jle	SHORT $LN90@dtls1_read
$LN91@dtls1_read:
	test	eax, 8192				; 00002000H
	je	SHORT $LN88@dtls1_read
	cmp	eax, 8480				; 00002120H
	jg	SHORT $LN88@dtls1_read
	cmp	eax, 8464				; 00002110H
	jl	SHORT $LN88@dtls1_read
$LN90@dtls1_read:
	pop	ebx
	pop	edi
	pop	esi
; Line 1390
	mov	DWORD PTR [ecx+416], 2
; Line 1391
	or	eax, -1
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN88@dtls1_read:
; Line 1394
	push	1394					; 00000572H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	245					; 000000f5H
; Line 1395
	jmp	$LN148@dtls1_read
$LN86@dtls1_read:
; Line 1370
	push	1370					; 0000055aH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	68					; 00000044H
; Line 1371
	jmp	$LN148@dtls1_read
$LN85@dtls1_read:
; Line 1359
	push	1359					; 0000054fH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	245					; 000000f5H
	jmp	$LN148@dtls1_read
$LN118@dtls1_read:
; Line 1217
	mov	DWORD PTR [esi+24], 1
	xor	eax, eax
; Line 1218
	mov	DWORD PTR [ebx+4], 0
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN112@dtls1_read:
; Line 1010
	cmp	eax, 23					; 00000017H
	jne	SHORT $LN42@dtls1_read
; Line 1012
	mov	eax, DWORD PTR [esi+88]
; Line 1013
	push	esi
	mov	DWORD PTR [eax+416], 2
	call	_SSL_get_rbio
	mov	edi, eax
; Line 1014
	mov	DWORD PTR [esi+24], 3
; Line 1015
	push	15					; 0000000fH
	push	edi
	call	_BIO_clear_flags
; Line 1016
	push	9
	push	edi
	call	_BIO_set_flags
	add	esp, 20					; 00000014H
; Line 1017
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN42@dtls1_read:
; Line 1022
	push	1022					; 000003feH
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	245					; 000000f5H
; Line 1023
	jmp	$LN148@dtls1_read
$LN111@dtls1_read:
; Line 994
	push	esi
	call	_dtls1_process_heartbeat
	add	esp, 4
; Line 997
	mov	DWORD PTR [ebx+4], 0
; Line 998
	mov	DWORD PTR [esi+24], 3
; Line 999
	push	15					; 0000000fH
	push	esi
	call	_SSL_get_rbio
	add	esp, 4
	push	eax
	call	_BIO_clear_flags
	add	esp, 8
; Line 1000
	push	9
	push	esi
	call	_SSL_get_rbio
	add	esp, 4
	push	eax
	call	_BIO_set_flags
	add	esp, 8
; Line 1001
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN110@dtls1_read:
; Line 916
	push	esi
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	je	SHORT $LN29@dtls1_read
	cmp	edi, 23					; 00000017H
	jne	SHORT $LN29@dtls1_read
	cmp	DWORD PTR [esi+128], 0
	jne	SHORT $LN29@dtls1_read
; Line 919
	push	919					; 00000397H
	push	OFFSET ??_C@_0P@NIDJEPJ@?4?2ssl?2d1_pkt?4c?$AA@
	push	100					; 00000064H
$LN148@dtls1_read:
; Line 918
	mov	edi, 10					; 0000000aH
$LN146@dtls1_read:
; Line 919
	push	258					; 00000102H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$f_err$156:
; Line 1401
	push	edi
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
$err$155:
; Line 1403
	pop	ebx
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN29@dtls1_read:
; Line 923
	mov	ebp, DWORD PTR _len$[esp+92]
	test	ebp, ebp
	jle	SHORT $LN34@dtls1_read
; Line 926
	cmp	ebp, DWORD PTR [ebx+4]
; Line 931
	mov	eax, DWORD PTR [ebx+12]
	cmova	ebp, DWORD PTR [ebx+4]
	add	eax, DWORD PTR [ebx+8]
	push	ebp
	push	eax
	push	DWORD PTR _buf$GSCopy$1$[esp+104]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 932
	cmp	DWORD PTR _peek$[esp+92], 0
	jne	SHORT $LN34@dtls1_read
; Line 934
	sub	DWORD PTR [ebx+4], ebp
	add	DWORD PTR [ebx+8], ebp
; Line 935
	cmp	DWORD PTR [ebx+4], 0
	jne	SHORT $LN34@dtls1_read
; Line 936
	mov	DWORD PTR [esi+56], 240			; 000000f0H
; Line 937
	mov	DWORD PTR [ebx+8], 0
$LN34@dtls1_read:
; Line 966
	pop	ebx
	pop	edi
	pop	esi
	mov	eax, ebp
	pop	ebp
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN109@dtls1_read:
; Line 905
	mov	DWORD PTR [ebx+4], 0
; Line 907
	xor	eax, eax
	mov	DWORD PTR [esi+24], 1
$LN144@dtls1_read:
	pop	ebx
$LN143@dtls1_read:
; Line 1404
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
_dtls1_read_bytes ENDP
_TEXT	ENDS
END
