; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CG@ELPNGFCJ@OpenSSL?5?8win32?8?5shared?5library?5m@ ; `string'
;	COMDAT ??_C@_0CG@ELPNGFCJ@OpenSSL?5?8win32?8?5shared?5library?5m@
CONST	SEGMENT
??_C@_0CG@ELPNGFCJ@OpenSSL?5?8win32?8?5shared?5library?5m@ DB 'OpenSSL '''
	DB	'win32'' shared library method', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_dso_meth_win32 DD FLAT:??_C@_0CG@ELPNGFCJ@OpenSSL?5?8win32?8?5shared?5library?5m@
	DD	FLAT:_win32_load
	DD	FLAT:_win32_unload
	DD	FLAT:_win32_bind_var
	DD	FLAT:_win32_bind_func
	DD	00H
	DD	FLAT:_win32_name_converter
	DD	FLAT:_win32_merger
	DD	00H
	DD	00H
	DD	FLAT:_win32_pathbyaddr
	DD	FLAT:_win32_globallookup
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_DSO_METHOD_win32
PUBLIC	??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@ ; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_09CCCHLKJP@filename?$CI?$AA@		; `string'
PUBLIC	??_C@_08MFAHALLH@symname?$CI?$AA@		; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_06DAJAKOAL@?$CFs?4dll?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@		; `string'
PUBLIC	??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@ ; `string'
PUBLIC	??_C@_0O@CNMFJJGO@Module32First?$AA@		; `string'
PUBLIC	??_C@_0N@KIGOLBLC@Module32Next?$AA@		; `string'
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__strstr:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_push:PROC
EXTRN	_sk_pop:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_add_error_data:PROC
EXTRN	_DSO_convert_filename:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0N@KIGOLBLC@Module32Next?$AA@
CONST	SEGMENT
??_C@_0N@KIGOLBLC@Module32Next?$AA@ DB 'Module32Next', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CNMFJJGO@Module32First?$AA@
CONST	SEGMENT
??_C@_0O@CNMFJJGO@Module32First?$AA@ DB 'Module32First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@
CONST	SEGMENT
??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@ DB 'CreateToolhelp32Snap'
	DB	'shot', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@
CONST	SEGMENT
??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@ DB 'KERNEL32.DLL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DAJAKOAL@?$CFs?4dll?$AA@
CONST	SEGMENT
??_C@_06DAJAKOAL@?$CFs?4dll?$AA@ DB '%s.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MFAHALLH@symname?$CI?$AA@
CONST	SEGMENT
??_C@_08MFAHALLH@symname?$CI?$AA@ DB 'symname(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CCCHLKJP@filename?$CI?$AA@
CONST	SEGMENT
??_C@_09CCCHLKJP@filename?$CI?$AA@ DB 'filename(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@ DB '.\crypto\dso\ds'
	DB	'o_win32.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_joiner
_TEXT	SEGMENT
_start$2$ = -8						; size = 4
_start$1$ = -8						; size = 4
tv522 = -4						; size = 4
tv519 = -4						; size = 4
_dso$ = 8						; size = 4
_result$1$ = 12						; size = 4
_file_split$ = 12					; size = 4
_win32_joiner PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 413
	mov	eax, 8
	call	__chkstk
	push	ebx
; Line 418
	mov	ebx, DWORD PTR _file_split$[esp+8]
	xor	eax, eax
	push	ebp
	xor	ebp, ebp
	test	ebx, ebx
	jne	SHORT $LN6@win32_join
; Line 419
	push	419					; 000001a3H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	67					; 00000043H
$LN59@win32_join:
	push	135					; 00000087H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 420
	xor	eax, eax
	pop	ebp
	pop	ebx
; Line 510
	add	esp, 8
	ret	0
$LN6@win32_join:
; Line 422
	cmp	DWORD PTR [ebx], eax
	je	SHORT $LN7@win32_join
; Line 423
	mov	eax, DWORD PTR [ebx+4]
	add	eax, 2
; Line 424
	cmp	DWORD PTR [ebx+16], ebp
	jne	SHORT $LN10@win32_join
	cmp	DWORD PTR [ebx+24], ebp
	jne	SHORT $LN10@win32_join
	cmp	DWORD PTR [ebx+32], ebp
	je	SHORT $LN11@win32_join
; Line 426
	jmp	SHORT $LN10@win32_join
$LN7@win32_join:
	cmp	DWORD PTR [ebx+8], eax
	je	SHORT $LN11@win32_join
; Line 427
	mov	eax, DWORD PTR [ebx+12]
$LN10@win32_join:
	inc	eax
$LN11@win32_join:
; Line 429
	add	eax, DWORD PTR [ebx+20]
; Line 430
	cmp	DWORD PTR [ebx+16], ebp
	je	SHORT $LN12@win32_join
	cmp	DWORD PTR [ebx+24], ebp
	jne	SHORT $LN13@win32_join
	cmp	DWORD PTR [ebx+32], ebp
	je	SHORT $LN12@win32_join
$LN13@win32_join:
; Line 431
	inc	eax
$LN12@win32_join:
; Line 433
	add	eax, DWORD PTR [ebx+28]
; Line 434
	cmp	DWORD PTR [ebx+24], ebp
	je	SHORT $LN14@win32_join
	cmp	DWORD PTR [ebx+32], ebp
	je	SHORT $LN14@win32_join
; Line 435
	inc	eax
$LN14@win32_join:
; Line 437
	add	eax, DWORD PTR [ebx+36]
; Line 439
	jne	SHORT $LN15@win32_join
; Line 440
	push	440					; 000001b8H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	113					; 00000071H
; Line 441
	jmp	SHORT $LN59@win32_join
$LN15@win32_join:
	push	esi
; Line 444
	push	444					; 000001bcH
	inc	eax
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$1$[esp+16], esi
; Line 445
	test	esi, esi
	jne	SHORT $LN16@win32_join
; Line 446
	push	446					; 000001beH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
	push	135					; 00000087H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 447
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 510
	add	esp, 8
	ret	0
$LN16@win32_join:
; Line 450
	mov	ecx, DWORD PTR __imp__strncpy
	cmp	DWORD PTR [ebx], ebp
	je	SHORT $LN17@win32_join
; Line 451
	mov	ax, WORD PTR ??_C@_02HDBGODGB@?2?2?$AA@
	mov	WORD PTR [esi], ax
	mov	al, BYTE PTR ??_C@_02HDBGODGB@?2?2?$AA@+2
	mov	BYTE PTR [esi+2], al
; Line 453
	lea	eax, DWORD PTR [esi+2]
	push	DWORD PTR [ebx+4]
	push	DWORD PTR [ebx]
	push	eax
	call	ecx
; Line 454
	mov	ebp, DWORD PTR [ebx+4]
	add	esp, 12					; 0000000cH
	add	ebp, 2
; Line 455
	cmp	DWORD PTR [ebx+16], 0
	jne	SHORT $LN20@win32_join
	cmp	DWORD PTR [ebx+24], 0
	jne	SHORT $LN20@win32_join
	cmp	DWORD PTR [ebx+32], 0
	je	SHORT $LN21@win32_join
$LN20@win32_join:
; Line 456
	mov	BYTE PTR [esi+ebp], 92			; 0000005cH
; Line 458
	jmp	SHORT $LN58@win32_join
$LN17@win32_join:
; Line 459
	mov	eax, DWORD PTR [ebx+8]
	test	eax, eax
	je	SHORT $LN21@win32_join
; Line 460
	push	DWORD PTR [ebx+12]
	push	eax
	push	esi
	call	ecx
; Line 461
	mov	ebp, DWORD PTR [ebx+12]
	add	esp, 12					; 0000000cH
; Line 462
	mov	BYTE PTR [esi+ebp], 58			; 0000003aH
$LN58@win32_join:
; Line 463
	inc	ebp
$LN21@win32_join:
; Line 465
	mov	ecx, DWORD PTR [ebx+16]
	mov	esi, ecx
; Line 466
	mov	edx, DWORD PTR [ebx+20]
	mov	eax, esi
	sub	eax, ecx
	mov	DWORD PTR _start$1$[esp+20], ecx
	push	edi
	cmp	edx, eax
	jle	SHORT $LN3@win32_join
	npad	5
$LL2@win32_join:
	add	edx, ecx
; Line 607
	xor	eax, eax
	mov	DWORD PTR tv522[esp+24], edx
	mov	edi, esi
	sub	edx, esi
	je	SHORT $LN55@win32_join
	npad	2
$LL28@win32_join:
	mov	cl, BYTE PTR [edi]
	test	cl, cl
	je	SHORT $LN55@win32_join
; Line 608
	cmp	cl, 47					; 0000002fH
	je	SHORT $LN22@win32_join
; Line 607
	inc	eax
	inc	edi
	cmp	eax, edx
	jb	SHORT $LL28@win32_join
$LN55@win32_join:
; Line 471
	mov	edi, DWORD PTR tv522[esp+24]
$LN22@win32_join:
; Line 473
	mov	eax, DWORD PTR _start$1$[esp+24]
	mov	esi, edi
	sub	esi, eax
	push	esi
	push	eax
	mov	eax, DWORD PTR _result$1$[esp+28]
	add	eax, ebp
	push	eax
	call	DWORD PTR __imp__strncpy
; Line 475
	mov	eax, DWORD PTR _result$1$[esp+32]
	add	ebp, esi
; Line 477
	lea	esi, DWORD PTR [edi+1]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start$1$[esp+24], esi
	mov	BYTE PTR [eax+ebp], 92			; 0000005cH
	mov	eax, esi
	mov	ecx, DWORD PTR [ebx+16]
	inc	ebp
	mov	edx, DWORD PTR [ebx+20]
	sub	eax, ecx
	cmp	edx, eax
	jg	SHORT $LL2@win32_join
$LN3@win32_join:
; Line 486
	mov	ecx, DWORD PTR [ebx+24]
	mov	esi, ecx
; Line 487
	mov	edx, DWORD PTR [ebx+28]
	mov	eax, esi
	sub	eax, ecx
	mov	DWORD PTR _start$2$[esp+24], ecx
	cmp	edx, eax
	jle	SHORT $LN5@win32_join
$LL4@win32_join:
	add	edx, ecx
; Line 607
	xor	eax, eax
	mov	DWORD PTR tv519[esp+24], edx
	mov	edi, esi
	sub	edx, esi
	je	SHORT $LN56@win32_join
$LL34@win32_join:
	mov	cl, BYTE PTR [edi]
	test	cl, cl
	je	SHORT $LN56@win32_join
; Line 608
	cmp	cl, 47					; 0000002fH
	je	SHORT $LN23@win32_join
; Line 607
	inc	eax
	inc	edi
	cmp	eax, edx
	jb	SHORT $LL34@win32_join
$LN56@win32_join:
; Line 492
	mov	edi, DWORD PTR tv519[esp+24]
$LN23@win32_join:
; Line 493
	mov	eax, DWORD PTR _start$2$[esp+24]
	mov	esi, edi
	sub	esi, eax
	push	esi
	push	eax
	mov	eax, DWORD PTR _result$1$[esp+28]
	add	eax, ebp
	push	eax
	call	DWORD PTR __imp__strncpy
; Line 495
	mov	eax, DWORD PTR _result$1$[esp+32]
	add	ebp, esi
; Line 497
	lea	esi, DWORD PTR [edi+1]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start$2$[esp+24], esi
	mov	BYTE PTR [eax+ebp], 92			; 0000005cH
	mov	eax, esi
	mov	ecx, DWORD PTR [ebx+24]
	inc	ebp
	mov	edx, DWORD PTR [ebx+28]
	sub	eax, ecx
	cmp	edx, eax
	jg	SHORT $LL4@win32_join
$LN5@win32_join:
; Line 506
	push	DWORD PTR [ebx+36]
	mov	esi, DWORD PTR _result$1$[esp+24]
	push	DWORD PTR [ebx+32]
	lea	eax, DWORD PTR [esi+ebp]
	push	eax
	call	DWORD PTR __imp__strncpy
; Line 508
	mov	eax, DWORD PTR [ebx+36]
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	edi
	mov	BYTE PTR [eax+ebp], 0
; Line 509
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 510
	add	esp, 8
	ret	0
_win32_joiner ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_splitter
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_filename$ = 12						; size = 4
_assume_last_is_dir$ = 16				; size = 4
_win32_splitter PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 307
	push	ebx
	push	esi
; Line 310
	mov	esi, DWORD PTR _filename$[esp+4]
	mov	ebx, esi
; Line 313
	test	esi, esi
	jne	SHORT $LN7@win32_spli
; Line 314
	push	314					; 0000013aH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	111					; 0000006fH
	push	136					; 00000088H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 318
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 410
	ret	0
$LN7@win32_spli:
	push	edi
; Line 321
	push	321					; 00000141H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	40					; 00000028H
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 322
	test	edi, edi
	jne	SHORT $LN8@win32_spli
; Line 323
	push	323					; 00000143H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
	push	136					; 00000088H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 324
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 410
	ret	0
$LN8@win32_spli:
	xorps	xmm0, xmm0
; Line 328
	mov	edx, 1
	movups	XMMWORD PTR [edi], xmm0
	movups	XMMWORD PTR [edi+16], xmm0
	movq	QWORD PTR [edi+32], xmm0
; Line 331
	mov	al, BYTE PTR [esi]
	cmp	al, 92					; 0000005cH
	jne	SHORT $LN11@win32_spli
	cmp	BYTE PTR [esi+1], al
	je	SHORT $LN10@win32_spli
$LN11@win32_spli:
	cmp	al, 47					; 0000002fH
	jne	SHORT $LL4@win32_spli
	cmp	BYTE PTR [esi+1], al
	jne	SHORT $LL4@win32_spli
$LN10@win32_spli:
; Line 332
	xor	edx, edx
; Line 333
	add	esi, 2
; Line 334
	mov	ebx, esi
; Line 335
	mov	DWORD PTR [edi], esi
	npad	7
$LL4@win32_spli:
; Line 339
	mov	cl, BYTE PTR [esi]
; Line 340
	movsx	eax, cl
	cmp	eax, 92					; 0000005cH
	ja	$LN26@win32_spli
	movzx	eax, BYTE PTR $LN40@win32_spli[eax]
	jmp	DWORD PTR $LN46@win32_spli[eax*4]
$LN12@win32_spli:
; Line 342
	cmp	edx, 1
	jne	$LN33@win32_spli
; Line 351
	mov	eax, esi
	mov	DWORD PTR [edi+8], ebx
	sub	eax, ebx
; Line 352
	mov	edx, 2
; Line 353
	inc	esi
	mov	DWORD PTR [edi+12], eax
	mov	ebx, esi
; Line 354
	mov	DWORD PTR [edi+24], esi
; Line 355
	jmp	SHORT $LN2@win32_spli
$LN14@win32_spli:
; Line 358
	test	edx, edx
	jne	SHORT $LN15@win32_spli
; Line 359
	mov	eax, esi
; Line 360
	mov	edx, 2
	sub	eax, ebx
; Line 361
	inc	esi
	mov	DWORD PTR [edi+4], eax
	mov	ebx, esi
; Line 362
	mov	DWORD PTR [edi+24], esi
	jmp	SHORT $LN2@win32_spli
$LN15@win32_spli:
; Line 365
	inc	esi
; Line 367
	mov	eax, esi
	sub	eax, ebx
	cmp	edx, 1
	jne	SHORT $LN17@win32_spli
; Line 364
	mov	DWORD PTR [edi+24], ebx
	mov	edx, 2
; Line 367
	mov	DWORD PTR [edi+28], eax
; Line 368
	mov	ebx, esi
; Line 369
	jmp	SHORT $LN2@win32_spli
$LN17@win32_spli:
; Line 371
	add	DWORD PTR [edi+28], eax
; Line 372
	mov	ebx, esi
; Line 374
	jmp	SHORT $LN2@win32_spli
$LN19@win32_spli:
; Line 377
	mov	eax, esi
	sub	eax, ebx
	test	edx, edx
	jne	SHORT $LN20@win32_spli
	mov	DWORD PTR [edi+4], eax
; Line 378
	jmp	SHORT $LN2@win32_spli
$LN20@win32_spli:
; Line 379
	test	eax, eax
	jle	SHORT $LN2@win32_spli
; Line 380
	cmp	DWORD PTR _assume_last_is_dir$[esp+8], 0
	je	SHORT $LN23@win32_spli
; Line 381
	cmp	edx, 1
	jne	SHORT $LN25@win32_spli
; Line 382
	mov	DWORD PTR [edi+24], ebx
; Line 383
	mov	DWORD PTR [edi+28], 0
$LN25@win32_spli:
; Line 385
	mov	eax, esi
	sub	eax, ebx
	add	DWORD PTR [edi+28], eax
; Line 386
	jmp	SHORT $LN2@win32_spli
$LN23@win32_spli:
; Line 387
	mov	DWORD PTR [edi+32], ebx
; Line 388
	mov	DWORD PTR [edi+36], eax
; Line 392
	jmp	SHORT $LN2@win32_spli
$LN26@win32_spli:
; Line 394
	inc	esi
$LN2@win32_spli:
; Line 398
	test	cl, cl
	jne	$LL4@win32_spli
; Line 400
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN27@win32_spli
; Line 401
	mov	DWORD PTR [edi], 0
$LN27@win32_spli:
; Line 402
	cmp	DWORD PTR [edi+12], 0
	jne	SHORT $LN28@win32_spli
; Line 403
	mov	DWORD PTR [edi+8], 0
$LN28@win32_spli:
; Line 404
	cmp	DWORD PTR [edi+28], 0
	jne	SHORT $LN29@win32_spli
; Line 405
	mov	DWORD PTR [edi+24], 0
$LN29@win32_spli:
; Line 406
	cmp	DWORD PTR [edi+36], 0
	jne	SHORT $LN30@win32_spli
; Line 407
	mov	DWORD PTR [edi+32], 0
$LN30@win32_spli:
; Line 409
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 410
	ret	0
$LN33@win32_spli:
; Line 343
	push	343					; 00000157H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	115					; 00000073H
	push	136					; 00000088H
	push	37					; 00000025H
	call	_ERR_put_error
; Line 347
	push	edi
	call	_CRYPTO_free
	add	esp, 24					; 00000018H
; Line 348
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 410
	ret	0
	npad	3
$LN46@win32_spli:
	DD	$LN19@win32_spli
	DD	$LN14@win32_spli
	DD	$LN12@win32_spli
	DD	$LN26@win32_spli
$LN40@win32_spli:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
_win32_splitter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _openssl_strnchr
_TEXT	SEGMENT
_string$ = 8						; size = 4
_c$ = 12						; size = 4
_len$ = 16						; size = 4
_openssl_strnchr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 607
	mov	ecx, DWORD PTR _string$[esp-4]
	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _len$[esp]
	push	edi
	test	esi, esi
	je	SHORT $LN3@openssl_st
	mov	edi, DWORD PTR _c$[esp+4]
$LL4@openssl_st:
	mov	al, BYTE PTR [ecx]
	test	al, al
	je	SHORT $LN3@openssl_st
; Line 608
	movsx	eax, al
	cmp	eax, edi
	je	SHORT $LN8@openssl_st
; Line 607
	inc	edx
	inc	ecx
	cmp	edx, esi
	jb	SHORT $LL4@openssl_st
$LN3@openssl_st:
	pop	edi
; Line 611
	xor	eax, eax
	pop	esi
; Line 612
	ret	0
$LN8@openssl_st:
	pop	edi
; Line 609
	mov	eax, ecx
	pop	esi
; Line 612
	ret	0
_openssl_strnchr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_globallookup
_TEXT	SEGMENT
_module_first$1$ = -564					; size = 4
_module_next$1$ = -560					; size = 4
_name$GSCopy$1$ = -556					; size = 4
_me32$ = -552						; size = 548
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_win32_globallookup PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 729
	mov	eax, 564				; 00000234H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+564], eax
	push	ebx
	mov	ebx, DWORD PTR _name$[esp+564]
	push	esi
; Line 738
	push	OFFSET ??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@
	mov	DWORD PTR _name$GSCopy$1$[esp+576], ebx
	call	DWORD PTR __imp__LoadLibraryA@4
	mov	esi, eax
; Line 739
	test	esi, esi
	jne	SHORT $LN5@win32_glob
; Line 740
	push	740					; 000002e4H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	108					; 0000006cH
	push	142					; 0000008eH
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 741
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 787
	mov	ecx, DWORD PTR __$ArrayPad$[esp+564]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	ret	0
$LN5@win32_glob:
	push	ebp
; Line 744
	mov	ebp, DWORD PTR __imp__GetProcAddress@8
	push	edi
	push	OFFSET ??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@
	push	esi
	call	ebp
	mov	edi, eax
; Line 746
	test	edi, edi
	jne	SHORT $LN6@win32_glob
; Line 747
	push	esi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 748
	push	748					; 000002ecH
; Line 749
	jmp	SHORT $LN25@win32_glob
$LN6@win32_glob:
; Line 758
	push	OFFSET ??_C@_0O@CNMFJJGO@Module32First?$AA@
	push	esi
	call	ebp
; Line 759
	push	OFFSET ??_C@_0N@KIGOLBLC@Module32Next?$AA@
	push	esi
	mov	DWORD PTR _module_first$1$[esp+588], eax
	call	ebp
; Line 761
	push	0
	push	8
	mov	DWORD PTR _module_next$1$[esp+588], eax
	call	edi
	mov	edi, eax
; Line 762
	cmp	edi, -1
	jne	SHORT $LN7@win32_glob
; Line 763
	push	esi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 764
	push	764					; 000002fcH
$LN25@win32_glob:
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	108					; 0000006cH
	push	142					; 0000008eH
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 765
	xor	eax, eax
	jmp	SHORT $LN23@win32_glob
$LN7@win32_glob:
; Line 770
	lea	eax, DWORD PTR _me32$[esp+580]
	mov	DWORD PTR _me32$[esp+580], 548		; 00000224H
	push	eax
	push	edi
	call	DWORD PTR _module_first$1$[esp+588]
	test	eax, eax
	jne	SHORT $LL4@win32_glob
; Line 771
	push	edi
	call	DWORD PTR __imp__CloseHandle@4
; Line 772
	push	esi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 773
	xor	eax, eax
	jmp	SHORT $LN23@win32_glob
$LL4@win32_glob:
; Line 777
	push	ebx
	push	DWORD PTR _me32$[esp+612]
	call	ebp
	mov	ebx, eax
	test	ebx, ebx
	jne	SHORT $LN12@win32_glob
; Line 782
	lea	eax, DWORD PTR _me32$[esp+580]
	push	eax
	push	edi
	call	DWORD PTR _module_next$1$[esp+588]
	mov	ebx, DWORD PTR _name$GSCopy$1$[esp+580]
	test	eax, eax
	jne	SHORT $LL4@win32_glob
; Line 784
	push	edi
	call	DWORD PTR __imp__CloseHandle@4
; Line 785
	push	esi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 786
	xor	eax, eax
	jmp	SHORT $LN23@win32_glob
$LN12@win32_glob:
; Line 778
	push	edi
	call	DWORD PTR __imp__CloseHandle@4
; Line 779
	push	esi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 780
	mov	eax, ebx
$LN23@win32_glob:
; Line 787
	mov	ecx, DWORD PTR __$ArrayPad$[esp+580]
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	ret	0
_win32_globallookup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_pathbyaddr
_TEXT	SEGMENT
_create_snap$1$ = -564					; size = 4
_module_first$1$ = -560					; size = 4
_path$GSCopy$1$ = -556					; size = 4
_me32$ = -552						; size = 548
__$ArrayPad$ = -4					; size = 4
_addr$ = 8						; size = 4
_path$ = 12						; size = 4
_sz$ = 16						; size = 4
_win32_pathbyaddr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 629
	mov	eax, 564				; 00000234H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+564], eax
	mov	eax, DWORD PTR _path$[esp+560]
	push	esi
; Line 637
	mov	esi, DWORD PTR _addr$[esp+564]
	test	esi, esi
	push	edi
	mov	DWORD PTR _path$GSCopy$1$[esp+572], eax
	mov	eax, OFFSET _win32_pathbyaddr
; Line 647
	push	OFFSET ??_C@_0N@NHGLKGEC@KERNEL32?4DLL?$AA@
	cmove	esi, eax
	call	DWORD PTR __imp__LoadLibraryA@4
	mov	edi, eax
; Line 648
	test	edi, edi
	jne	SHORT $LN6@win32_path
; Line 649
	push	649					; 00000289H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	108					; 0000006cH
	push	141					; 0000008dH
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 650
	or	eax, -1
	pop	edi
	pop	esi
; Line 726
	mov	ecx, DWORD PTR __$ArrayPad$[esp+564]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	ret	0
$LN6@win32_path:
	push	ebx
; Line 653
	mov	ebx, DWORD PTR __imp__GetProcAddress@8
	push	OFFSET ??_C@_0BJ@JEFKDHMD@CreateToolhelp32Snapshot?$AA@
	push	edi
	call	ebx
	mov	DWORD PTR _create_snap$1$[esp+576], eax
; Line 655
	test	eax, eax
	jne	SHORT $LN7@win32_path
; Line 656
	push	edi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 657
	push	657					; 00000291H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	108					; 0000006cH
	push	141					; 0000008dH
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 658
	or	eax, -1
	pop	ebx
	pop	edi
	pop	esi
; Line 726
	mov	ecx, DWORD PTR __$ArrayPad$[esp+564]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	ret	0
$LN7@win32_path:
	push	ebp
; Line 667
	push	OFFSET ??_C@_0O@CNMFJJGO@Module32First?$AA@
	push	edi
	call	ebx
; Line 668
	push	OFFSET ??_C@_0N@KIGOLBLC@Module32Next?$AA@
	push	edi
	mov	DWORD PTR _module_first$1$[esp+588], eax
	call	ebx
; Line 670
	push	0
	push	8
	mov	ebp, eax
	call	DWORD PTR _create_snap$1$[esp+588]
	mov	ebx, eax
; Line 671
	cmp	ebx, -1
	jne	SHORT $LN8@win32_path
; Line 672
	push	edi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 673
	push	673					; 000002a1H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	108					; 0000006cH
; Line 674
	jmp	SHORT $LN34@win32_path
$LN8@win32_path:
; Line 679
	lea	eax, DWORD PTR _me32$[esp+580]
	mov	DWORD PTR _me32$[esp+580], 548		; 00000224H
	push	eax
	push	ebx
	call	DWORD PTR _module_first$1$[esp+588]
	test	eax, eax
	jne	SHORT $LL4@win32_path
; Line 680
	push	ebx
	call	DWORD PTR __imp__CloseHandle@4
; Line 681
	push	edi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 682
	push	682					; 000002aaH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	114					; 00000072H
$LN34@win32_path:
	push	141					; 0000008dH
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 683
	or	eax, -1
	jmp	SHORT $LN32@win32_path
	npad	1
$LL4@win32_path:
; Line 687
	mov	ecx, DWORD PTR _me32$[esp+600]
	cmp	esi, ecx
	jb	SHORT $LN2@win32_path
	mov	eax, DWORD PTR _me32$[esp+604]
	add	eax, ecx
	cmp	esi, eax
	jb	SHORT $LN15@win32_path
$LN2@win32_path:
; Line 721
	lea	eax, DWORD PTR _me32$[esp+580]
	push	eax
	push	ebx
	call	ebp
	test	eax, eax
	jne	SHORT $LL4@win32_path
; Line 723
	push	ebx
	call	DWORD PTR __imp__CloseHandle@4
; Line 724
	push	edi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 725
	xor	eax, eax
$LN32@win32_path:
; Line 726
	mov	ecx, DWORD PTR __$ArrayPad$[esp+580]
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	ret	0
$LN15@win32_path:
; Line 689
	push	ebx
	call	DWORD PTR __imp__CloseHandle@4
; Line 690
	push	edi
	call	DWORD PTR __imp__FreeLibrary@4
; Line 710
	lea	esi, DWORD PTR _me32$[esp+868]
	lea	ecx, DWORD PTR [esi+1]
	npad	1
$LL22@win32_path:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL22@win32_path
; Line 711
	mov	eax, DWORD PTR _sz$[esp+576]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN33@win32_path
; Line 713
	cmp	esi, eax
	jl	SHORT $LN12@win32_path
; Line 714
	lea	esi, DWORD PTR [eax-1]
$LN12@win32_path:
; Line 715
	mov	edi, DWORD PTR _path$GSCopy$1$[esp+580]
	lea	eax, DWORD PTR _me32$[esp+868]
	push	esi
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 716
	mov	BYTE PTR [edi+esi], 0
$LN33@win32_path:
	lea	eax, DWORD PTR [esi+1]
; Line 717
	jmp	SHORT $LN32@win32_path
_win32_pathbyaddr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_merger
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_filespec1$ = 12					; size = 4
_filespec2$ = 16					; size = 4
_win32_merger PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 514
	push	ebx
	push	ebp
	push	esi
; Line 519
	mov	esi, DWORD PTR _filespec1$[esp+8]
	xor	ebx, ebx
	push	edi
	xor	edi, edi
	test	esi, esi
	jne	SHORT $LN2@win32_merg
	mov	esi, DWORD PTR _filespec2$[esp+12]
	test	esi, esi
	jne	SHORT $LN25@win32_merg
; Line 520
	push	520					; 00000208H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	67					; 00000043H
$LN28@win32_merg:
	push	134					; 00000086H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 521
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 575
	ret	0
$LN25@win32_merg:
; Line 531
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
	npad	1
$LL26@win32_merg:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL26@win32_merg
	sub	ecx, edx
	push	531					; 00000213H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 532
	test	ebp, ebp
	jne	SHORT $LN8@win32_merg
; Line 533
	push	533					; 00000215H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
; Line 534
	jmp	SHORT $LN28@win32_merg
$LN8@win32_merg:
; Line 536
	mov	ecx, ebp
	sub	ecx, esi
$LL18@win32_merg:
	mov	al, BYTE PTR [esi]
	lea	esi, DWORD PTR [esi+1]
	mov	BYTE PTR [ecx+esi-1], al
	test	al, al
	jne	SHORT $LL18@win32_merg
; Line 537
	jmp	$LN7@win32_merg
$LN2@win32_merg:
; Line 523
	mov	ebp, DWORD PTR _filespec2$[esp+12]
	test	ebp, ebp
	jne	SHORT $LN6@win32_merg
; Line 524
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
$LL27@win32_merg:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL27@win32_merg
	sub	ecx, edx
	push	524					; 0000020cH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 525
	test	ebp, ebp
	jne	SHORT $LN5@win32_merg
; Line 526
	push	526					; 0000020eH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
; Line 527
	jmp	$LN28@win32_merg
$LN5@win32_merg:
; Line 529
	mov	ecx, ebp
	sub	ecx, esi
$LL17@win32_merg:
	mov	al, BYTE PTR [esi]
	lea	esi, DWORD PTR [esi+1]
	mov	BYTE PTR [ecx+esi-1], al
	test	al, al
	jne	SHORT $LL17@win32_merg
	jmp	$LN7@win32_merg
$LN6@win32_merg:
; Line 538
	push	0
	push	esi
	mov	esi, DWORD PTR _dso$[esp+20]
	push	esi
	call	_win32_splitter
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 539
	test	edi, edi
	jne	SHORT $LN9@win32_merg
; Line 540
	push	540					; 0000021cH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
; Line 541
	jmp	$LN28@win32_merg
$LN9@win32_merg:
; Line 543
	push	1
	push	ebp
	push	esi
	call	_win32_splitter
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 544
	test	ebx, ebx
	jne	SHORT $LN10@win32_merg
; Line 545
	push	545					; 00000221H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
	push	134					; 00000086H
	push	37					; 00000025H
	call	_ERR_put_error
; Line 546
	push	edi
	call	_CRYPTO_free
	add	esp, 24					; 00000018H
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 575
	ret	0
$LN10@win32_merg:
; Line 551
	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN11@win32_merg
	cmp	DWORD PTR [edi+8], 0
	jne	SHORT $LN11@win32_merg
; Line 552
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edi], eax
; Line 553
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], eax
; Line 554
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], eax
; Line 555
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR [edi+12], eax
$LN11@win32_merg:
; Line 557
	mov	eax, DWORD PTR [edi+24]
	test	eax, eax
	jne	SHORT $LN12@win32_merg
; Line 558
	mov	eax, DWORD PTR [ebx+24]
	mov	DWORD PTR [edi+24], eax
; Line 559
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [edi+28], eax
; Line 560
	jmp	SHORT $LN14@win32_merg
$LN12@win32_merg:
; Line 561
	mov	al, BYTE PTR [eax]
	cmp	al, 92					; 0000005cH
	je	SHORT $LN14@win32_merg
	cmp	al, 47					; 0000002fH
	je	SHORT $LN14@win32_merg
; Line 562
	mov	eax, DWORD PTR [ebx+24]
	mov	DWORD PTR [edi+16], eax
; Line 563
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [edi+20], eax
$LN14@win32_merg:
; Line 565
	cmp	DWORD PTR [edi+32], 0
	jne	SHORT $LN15@win32_merg
; Line 566
	mov	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR [edi+32], eax
; Line 567
	mov	eax, DWORD PTR [ebx+36]
	mov	DWORD PTR [edi+36], eax
$LN15@win32_merg:
; Line 570
	push	edi
	push	esi
	call	_win32_joiner
	add	esp, 8
	mov	ebp, eax
$LN7@win32_merg:
; Line 572
	push	edi
	call	_CRYPTO_free
; Line 573
	push	ebx
	call	_CRYPTO_free
	add	esp, 8
; Line 574
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 575
	ret	0
_win32_merger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_name_converter
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_filename$ = 12						; size = 4
_win32_name_converter PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 578
	push	ebx
	push	esi
	push	edi
; Line 582
	mov	edi, DWORD PTR _filename$[esp+8]
	mov	esi, edi
	lea	ecx, DWORD PTR [esi+1]
	npad	4
$LL11@win32_name:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL11@win32_name
; Line 583
	mov	ebx, DWORD PTR __imp__strstr
	sub	esi, ecx
	push	OFFSET ??_C@_01KMDKNFGN@?1?$AA@
	push	edi
	call	ebx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@win32_name
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	edi
	call	ebx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@win32_name
	push	OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	push	edi
	call	ebx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@win32_name
	lea	ebx, DWORD PTR [eax+1]
; Line 588
	push	588					; 0000024cH
	lea	eax, DWORD PTR [esi+5]
	jmp	SHORT $LN12@win32_name
$LN8@win32_name:
; Line 583
	xor	ebx, ebx
; Line 591
	lea	eax, DWORD PTR [esi+1]
	push	591					; 0000024fH
$LN12@win32_name:
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 592
	test	esi, esi
	jne	SHORT $LN4@win32_name
; Line 593
	push	593					; 00000251H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	109					; 0000006dH
	push	125					; 0000007dH
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 594
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 601
	ret	0
$LN4@win32_name:
; Line 597
	push	edi
	test	ebx, ebx
	je	SHORT $LN5@win32_name
	push	OFFSET ??_C@_06DAJAKOAL@?$CFs?4dll?$AA@
; Line 599
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 600
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 601
	ret	0
$LN5@win32_name:
; Line 599
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 600
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 601
	ret	0
_win32_name_converter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_bind_func
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_symname$ = 12						; size = 4
_win32_bind_func PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 266
	push	esi
; Line 270
	mov	esi, DWORD PTR _dso$[esp]
	push	edi
	test	esi, esi
	je	$LN3@win32_bind
	mov	edi, DWORD PTR _symname$[esp+4]
	test	edi, edi
	je	$LN3@win32_bind
; Line 274
	push	DWORD PTR [esi+4]
	call	_sk_num
	add	esp, 4
	cmp	eax, 1
	jge	SHORT $LN4@win32_bind
; Line 275
	push	275					; 00000113H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	105					; 00000069H
	push	118					; 00000076H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 290
	ret	0
$LN4@win32_bind:
; Line 278
	push	DWORD PTR [esi+4]
	call	_sk_num
	dec	eax
	push	eax
	push	DWORD PTR [esi+4]
	call	_sk_value
	add	esp, 12					; 0000000cH
; Line 279
	test	eax, eax
	jne	SHORT $LN5@win32_bind
; Line 280
	push	280					; 00000118H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	104					; 00000068H
	push	118					; 00000076H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 290
	ret	0
$LN5@win32_bind:
; Line 283
	push	edi
	push	DWORD PTR [eax]
	call	DWORD PTR __imp__GetProcAddress@8
; Line 284
	test	eax, eax
	jne	SHORT $LN1@win32_bind
; Line 285
	push	285					; 0000011dH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	106					; 0000006aH
	push	118					; 00000076H
	push	37					; 00000025H
	call	_ERR_put_error
; Line 286
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edi
	push	OFFSET ??_C@_08MFAHALLH@symname?$CI?$AA@
	push	3
	call	_ERR_add_error_data
	add	esp, 36					; 00000024H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 290
	ret	0
$LN3@win32_bind:
; Line 271
	push	271					; 0000010fH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	67					; 00000043H
	push	118					; 00000076H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 272
	xor	eax, eax
$LN1@win32_bind:
; Line 290
	pop	edi
	pop	esi
	ret	0
_win32_bind_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_bind_var
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_symname$ = 12						; size = 4
_win32_bind_var PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 239
	push	esi
; Line 243
	mov	esi, DWORD PTR _dso$[esp]
	push	edi
	test	esi, esi
	je	$LN3@win32_bind
	mov	edi, DWORD PTR _symname$[esp+4]
	test	edi, edi
	je	$LN3@win32_bind
; Line 247
	push	DWORD PTR [esi+4]
	call	_sk_num
	add	esp, 4
	cmp	eax, 1
	jge	SHORT $LN4@win32_bind
; Line 248
	push	248					; 000000f8H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	105					; 00000069H
	push	119					; 00000077H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 263
	ret	0
$LN4@win32_bind:
; Line 251
	push	DWORD PTR [esi+4]
	call	_sk_num
	dec	eax
	push	eax
	push	DWORD PTR [esi+4]
	call	_sk_value
	add	esp, 12					; 0000000cH
; Line 252
	test	eax, eax
	jne	SHORT $LN5@win32_bind
; Line 253
	push	253					; 000000fdH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	104					; 00000068H
	push	119					; 00000077H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 263
	ret	0
$LN5@win32_bind:
; Line 256
	push	edi
	push	DWORD PTR [eax]
	call	DWORD PTR __imp__GetProcAddress@8
; Line 257
	test	eax, eax
	jne	SHORT $LN1@win32_bind
; Line 258
	push	258					; 00000102H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	106					; 0000006aH
	push	119					; 00000077H
	push	37					; 00000025H
	call	_ERR_put_error
; Line 259
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edi
	push	OFFSET ??_C@_08MFAHALLH@symname?$CI?$AA@
	push	3
	call	_ERR_add_error_data
	add	esp, 36					; 00000024H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 263
	ret	0
$LN3@win32_bind:
; Line 244
	push	244					; 000000f4H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	67					; 00000043H
	push	119					; 00000077H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 245
	xor	eax, eax
$LN1@win32_bind:
; Line 263
	pop	edi
	pop	esi
	ret	0
_win32_bind_var ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_unload
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_win32_unload PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 208
	push	esi
; Line 210
	mov	esi, DWORD PTR _dso$[esp]
	test	esi, esi
	jne	SHORT $LN2@win32_unlo
; Line 211
	push	211					; 000000d3H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	67					; 00000043H
	push	121					; 00000079H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 212
	xor	eax, eax
	pop	esi
; Line 232
	ret	0
$LN2@win32_unlo:
; Line 214
	push	DWORD PTR [esi+4]
	call	_sk_num
	add	esp, 4
	cmp	eax, 1
	jge	SHORT $LN3@win32_unlo
; Line 215
	mov	eax, 1
	pop	esi
; Line 232
	ret	0
$LN3@win32_unlo:
	push	edi
; Line 216
	push	DWORD PTR [esi+4]
	call	_sk_pop
	mov	edi, eax
	add	esp, 4
; Line 217
	test	edi, edi
	jne	SHORT $LN4@win32_unlo
; Line 218
	push	218					; 000000daH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	104					; 00000068H
	push	121					; 00000079H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 219
	xor	eax, eax
	pop	edi
	pop	esi
; Line 232
	ret	0
$LN4@win32_unlo:
; Line 221
	push	DWORD PTR [edi]
	call	DWORD PTR __imp__FreeLibrary@4
	test	eax, eax
	jne	SHORT $LN5@win32_unlo
; Line 222
	push	222					; 000000deH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	107					; 0000006bH
	push	121					; 00000079H
	push	37					; 00000025H
	call	_ERR_put_error
; Line 226
	push	edi
	push	DWORD PTR [esi+4]
	call	_sk_push
	add	esp, 28					; 0000001cH
; Line 227
	xor	eax, eax
	pop	edi
	pop	esi
; Line 232
	ret	0
$LN5@win32_unlo:
; Line 230
	push	edi
	call	_CRYPTO_free
	add	esp, 4
; Line 231
	mov	eax, 1
	pop	edi
	pop	esi
; Line 232
	ret	0
_win32_unload ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _win32_load
_TEXT	SEGMENT
_dso$ = 8						; size = 4
_win32_load PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 168
	push	ebx
	push	ebp
; Line 171
	mov	ebp, DWORD PTR _dso$[esp+4]
	push	esi
	push	edi
	xor	esi, esi
	push	esi
	push	ebp
	call	_DSO_convert_filename
	mov	edi, eax
	add	esp, 8
; Line 173
	test	edi, edi
	jne	SHORT $LN2@win32_load
; Line 174
	push	174					; 000000aeH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	111					; 0000006fH
	push	120					; 00000078H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 204
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 205
	ret	0
$LN2@win32_load:
; Line 177
	push	edi
	call	DWORD PTR __imp__LoadLibraryA@4
	mov	ebx, eax
; Line 178
	test	ebx, ebx
	jne	SHORT $LN3@win32_load
; Line 179
	push	179					; 000000b3H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	103					; 00000067H
	push	120					; 00000078H
	push	37					; 00000025H
	call	_ERR_put_error
; Line 180
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edi
	push	OFFSET ??_C@_09CCCHLKJP@filename?$CI?$AA@
	push	3
	call	_ERR_add_error_data
	add	esp, 36					; 00000024H
; Line 181
	jmp	SHORT $err$12
$LN3@win32_load:
; Line 183
	push	183					; 000000b7H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	4
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 184
	test	esi, esi
	jne	SHORT $LN4@win32_load
; Line 185
	push	185					; 000000b9H
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	65					; 00000041H
; Line 186
	jmp	SHORT $LN10@win32_load
$LN4@win32_load:
; Line 188
	mov	DWORD PTR [esi], ebx
; Line 189
	push	esi
	push	DWORD PTR [ebp+4]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@win32_load
; Line 190
	push	190					; 000000beH
	push	OFFSET ??_C@_0BJ@INKKKOJN@?4?2crypto?2dso?2dso_win32?4c?$AA@
	push	105					; 00000069H
$LN10@win32_load:
	push	120					; 00000078H
	push	37					; 00000025H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$12:
; Line 199
	push	edi
	call	_CRYPTO_free
	add	esp, 4
; Line 200
	test	esi, esi
	je	SHORT $LN7@win32_load
; Line 201
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN7@win32_load:
; Line 202
	test	ebx, ebx
	je	SHORT $LN8@win32_load
; Line 203
	push	ebx
	call	DWORD PTR __imp__FreeLibrary@4
$LN8@win32_load:
; Line 204
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 205
	ret	0
$LN5@win32_load:
; Line 194
	mov	DWORD PTR [ebp+36], edi
; Line 195
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 205
	ret	0
_win32_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _DSO_METHOD_win32
_TEXT	SEGMENT
_DSO_METHOD_win32 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\dso\dso_win32.c
; Line 159
	mov	eax, OFFSET _dso_meth_win32
; Line 160
	ret	0
_DSO_METHOD_win32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 1386
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	-1
	push	DWORD PTR __Buffer$[esp+12]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
; Line 1390
	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx
; Line 1788
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 1386
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	-1
	push	DWORD PTR __Buffer$[esp+12]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
; Line 1390
	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx
; Line 1460
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 1386
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __BufferCount$[esp+8]
	push	DWORD PTR __Buffer$[esp+12]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
; Line 1390
	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx
; Line 1391
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
