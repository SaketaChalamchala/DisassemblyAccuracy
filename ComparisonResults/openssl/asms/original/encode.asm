; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_data_bin2ascii DB 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0'
	DB	'123456789+/', 00H
	ORG $+7
_data_ascii2bin DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0e0H
	DB	0f0H
	DB	0ffH
	DB	0ffH
	DB	0f1H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0e0H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	03eH
	DB	0ffH
	DB	0f2H
	DB	0ffH
	DB	03fH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	_EVP_EncodeInit
PUBLIC	_EVP_EncodeUpdate
PUBLIC	_EVP_EncodeFinal
PUBLIC	_EVP_EncodeBlock
PUBLIC	_EVP_DecodeInit
PUBLIC	_EVP_DecodeUpdate
PUBLIC	_EVP_DecodeFinal
PUBLIC	_EVP_DecodeBlock
PUBLIC	??_C@_0CK@NJACHFBA@ctx?9?$DOlength?5?$DM?$DN?5?$CIint?$CJsizeof?$CIctx?9?$DO@ ; `string'
PUBLIC	??_C@_0BG@FMGDOINB@?4?2crypto?2evp?2encode?4c?$AA@ ; `string'
EXTRN	_OpenSSLDie:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BG@FMGDOINB@?4?2crypto?2evp?2encode?4c?$AA@
CONST	SEGMENT
??_C@_0BG@FMGDOINB@?4?2crypto?2evp?2encode?4c?$AA@ DB '.\crypto\evp\encod'
	DB	'e.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NJACHFBA@ctx?9?$DOlength?5?$DM?$DN?5?$CIint?$CJsizeof?$CIctx?9?$DO@
CONST	SEGMENT
??_C@_0CK@NJACHFBA@ctx?9?$DOlength?5?$DM?$DN?5?$CIint?$CJsizeof?$CIctx?9?$DO@ DB 'c'
	DB	'tx->length <= (int)sizeof(ctx->enc_data)', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _conv_ascii2bin
_TEXT	SEGMENT
_a$ = 8							; size = 1
_conv_ascii2bin PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 130
	mov	al, BYTE PTR _a$[esp-4]
	test	al, al
	jns	SHORT $LN2@conv_ascii
; Line 131
	or	al, 255					; 000000ffH
; Line 133
	ret	0
$LN2@conv_ascii:
; Line 132
	movzx	eax, al
	mov	al, BYTE PTR _data_ascii2bin[eax]
; Line 133
	ret	0
_conv_ascii2bin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_DecodeBlock
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_t$ = 8							; size = 4
_i$1$ = 12						; size = 4
_f$ = 12						; size = 4
_b$1$ = 16						; size = 4
_n$ = 16						; size = 4
_EVP_DecodeBlock PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 376
	mov	eax, 4
	call	__chkstk
; Line 377
	mov	edx, DWORD PTR _n$[esp]
	mov	eax, DWORD PTR _f$[esp]
	push	ebp
	xor	ebp, ebp
	mov	DWORD PTR _ret$1$[esp+8], ebp
	npad	7
$LL2@EVP_Decode:
; Line 381
	mov	cl, BYTE PTR [eax]
; Line 130
	test	cl, cl
	js	SHORT $LN43@EVP_Decode
; Line 132
	movzx	ecx, cl
	mov	cl, BYTE PTR _data_ascii2bin[ecx]
; Line 381
	cmp	cl, 224					; 000000e0H
	jne	SHORT $LN43@EVP_Decode
	test	edx, edx
	jle	SHORT $LN43@EVP_Decode
; Line 382
	inc	eax
; Line 383
	dec	edx
; Line 384
	jmp	SHORT $LL2@EVP_Decode
$LN43@EVP_Decode:
; Line 390
	cmp	edx, 3
	jle	SHORT $LN44@EVP_Decode
$LL4@EVP_Decode:
	mov	cl, BYTE PTR [eax+edx-1]
; Line 130
	test	cl, cl
	jns	SHORT $LN17@EVP_Decode
; Line 131
	or	cl, 255					; 000000ffH
	jmp	SHORT $LN16@EVP_Decode
$LN17@EVP_Decode:
; Line 132
	movzx	ecx, cl
	mov	cl, BYTE PTR _data_ascii2bin[ecx]
$LN16@EVP_Decode:
; Line 390
	or	cl, 19					; 00000013H
	cmp	cl, 243					; 000000f3H
	jne	SHORT $LN44@EVP_Decode
; Line 391
	dec	edx
	cmp	edx, 3
	jg	SHORT $LL4@EVP_Decode
$LN44@EVP_Decode:
; Line 393
	mov	ecx, edx
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN48@EVP_Decode
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN48@EVP_Decode:
	je	SHORT $LN9@EVP_Decode
; Line 394
	or	eax, -1
	pop	ebp
; Line 412
	pop	ecx
	ret	0
$LN9@EVP_Decode:
; Line 396
	mov	DWORD PTR _i$1$[esp+4], ebp
	push	ebx
	push	esi
	push	edi
	test	edx, edx
	jle	$LN7@EVP_Decode
	mov	esi, DWORD PTR _t$[esp+16]
	npad	1
$LL8@EVP_Decode:
; Line 397
	mov	cl, BYTE PTR [eax]
; Line 130
	test	cl, cl
	jns	SHORT $LN20@EVP_Decode
; Line 131
	or	cl, 255					; 000000ffH
	jmp	SHORT $LN19@EVP_Decode
$LN20@EVP_Decode:
; Line 132
	movzx	ecx, cl
	mov	cl, BYTE PTR _data_ascii2bin[ecx]
$LN19@EVP_Decode:
; Line 397
	movzx	ebx, cl
; Line 398
	mov	cl, BYTE PTR [eax+1]
; Line 130
	test	cl, cl
	jns	SHORT $LN23@EVP_Decode
; Line 131
	or	cl, 255					; 000000ffH
	jmp	SHORT $LN22@EVP_Decode
$LN23@EVP_Decode:
; Line 132
	movzx	ecx, cl
	mov	cl, BYTE PTR _data_ascii2bin[ecx]
$LN22@EVP_Decode:
; Line 398
	movzx	ecx, cl
	mov	DWORD PTR _b$1$[esp+16], ecx
; Line 399
	mov	cl, BYTE PTR [eax+2]
; Line 130
	test	cl, cl
	jns	SHORT $LN26@EVP_Decode
; Line 131
	or	cl, 255					; 000000ffH
	jmp	SHORT $LN25@EVP_Decode
$LN26@EVP_Decode:
; Line 132
	movzx	ecx, cl
	mov	cl, BYTE PTR _data_ascii2bin[ecx]
$LN25@EVP_Decode:
; Line 399
	movzx	ebp, cl
; Line 400
	mov	cl, BYTE PTR [eax+3]
; Line 130
	test	cl, cl
	jns	SHORT $LN29@EVP_Decode
; Line 131
	or	cl, 255					; 000000ffH
	jmp	SHORT $LN28@EVP_Decode
$LN29@EVP_Decode:
; Line 132
	movzx	ecx, cl
	mov	cl, BYTE PTR _data_ascii2bin[ecx]
$LN28@EVP_Decode:
; Line 400
	movzx	edi, cl
	add	eax, 4
	mov	ecx, DWORD PTR _b$1$[esp+16]
	or	ecx, ebx
	test	cl, cl
; Line 401
	js	SHORT $LN34@EVP_Decode
	mov	ecx, edi
	or	ecx, ebp
	test	cl, cl
	js	SHORT $LN34@EVP_Decode
; Line 403
	shl	ebx, 6
	or	ebx, DWORD PTR _b$1$[esp+16]
	shl	ebx, 6
	or	ebx, ebp
; Line 409
	mov	ebp, DWORD PTR _ret$1$[esp+20]
	shl	ebx, 6
	add	ebp, 3
	or	ebx, edi
	mov	DWORD PTR _ret$1$[esp+20], ebp
	mov	ecx, ebx
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR [esi], cl
	mov	ecx, ebx
	shr	ecx, 8
	mov	BYTE PTR [esi+1], cl
	mov	BYTE PTR [esi+2], bl
	add	esi, 3
	mov	ebx, DWORD PTR _i$1$[esp+16]
	add	ebx, 4
	mov	DWORD PTR _i$1$[esp+16], ebx
	cmp	ebx, edx
	jl	$LL8@EVP_Decode
$LN7@EVP_Decode:
	pop	edi
	pop	esi
	pop	ebx
; Line 411
	mov	eax, ebp
	pop	ebp
; Line 412
	pop	ecx
	ret	0
$LN34@EVP_Decode:
	pop	edi
	pop	esi
	pop	ebx
; Line 402
	or	eax, -1
	pop	ebp
; Line 412
	pop	ecx
	ret	0
_EVP_DecodeBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_DecodeFinal
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_EVP_DecodeFinal PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 415
	push	esi
; Line 419
	mov	esi, DWORD PTR _ctx$[esp]
	push	edi
	mov	edi, DWORD PTR _outl$[esp+4]
	mov	DWORD PTR [edi], 0
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@EVP_Decode
; Line 420
	push	eax
	lea	eax, DWORD PTR [esi+8]
	push	eax
	push	DWORD PTR _out$[esp+12]
	call	_EVP_DecodeBlock
	add	esp, 12					; 0000000cH
; Line 421
	test	eax, eax
	jns	SHORT $LN4@EVP_Decode
; Line 422
	pop	edi
	or	eax, -1
	pop	esi
; Line 428
	ret	0
$LN4@EVP_Decode:
; Line 423
	mov	DWORD PTR [esi], 0
; Line 424
	mov	DWORD PTR [edi], eax
$LN2@EVP_Decode:
; Line 427
	pop	edi
	mov	eax, 1
	pop	esi
; Line 428
	ret	0
_EVP_DecodeFinal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_DecodeUpdate
_TEXT	SEGMENT
_ret$1$ = -8						; size = 4
_d$1$ = -4						; size = 4
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_in$ = 20						; size = 4
_inl$ = 24						; size = 4
_EVP_DecodeUpdate PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 273
	mov	eax, 8
	call	__chkstk
; Line 277
	mov	eax, DWORD PTR _ctx$[esp+4]
	push	ebx
	push	esi
	xor	ebx, ebx
	xor	esi, esi
	mov	edx, DWORD PTR [eax]
; Line 278
	add	eax, 8
	mov	DWORD PTR _ret$1$[esp+16], ebx
	mov	DWORD PTR _d$1$[esp+16], eax
; Line 280
	test	edx, edx
	jle	SHORT $LN6@EVP_Decode
	cmp	BYTE PTR [eax+edx-1], 61		; 0000003dH
	jne	SHORT $LN6@EVP_Decode
; Line 281
	lea	esi, DWORD PTR [ebx+1]
; Line 282
	cmp	edx, esi
	jle	SHORT $LN6@EVP_Decode
	cmp	BYTE PTR [eax+edx-2], 61		; 0000003dH
	mov	ecx, 2
	cmove	esi, ecx
$LN6@EVP_Decode:
; Line 287
	mov	ecx, DWORD PTR _inl$[esp+12]
	test	ecx, ecx
	jne	SHORT $LN7@EVP_Decode
; Line 370
	mov	ecx, DWORD PTR _outl$[esp+12]
	xor	eax, eax
	mov	esi, DWORD PTR _ret$1$[esp+16]
	mov	DWORD PTR [ecx], esi
; Line 371
	mov	ecx, DWORD PTR _ctx$[esp+12]
	pop	esi
	pop	ebx
	mov	DWORD PTR [ecx], edx
; Line 373
	add	esp, 8
	ret	0
$LN7@EVP_Decode:
	push	ebp
; Line 292
	mov	ebp, DWORD PTR _out$[esp+16]
	push	edi
	xor	edi, edi
	test	ecx, ecx
	jle	$LN46@EVP_Decode
$LL4@EVP_Decode:
; Line 293
	mov	eax, DWORD PTR _in$[esp+20]
	movzx	ebx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _in$[esp+20], eax
; Line 130
	test	bl, bl
	jns	SHORT $LN32@EVP_Decode
; Line 131
	or	al, 255					; 000000ffH
	jmp	SHORT $LN31@EVP_Decode
$LN32@EVP_Decode:
; Line 132
	mov	eax, ebx
	mov	al, BYTE PTR _data_ascii2bin[eax]
$LN31@EVP_Decode:
; Line 294
	movzx	ecx, al
; Line 295
	cmp	ecx, 255				; 000000ffH
	je	$LN23@EVP_Decode
; Line 300
	cmp	ebx, 61					; 0000003dH
	jne	SHORT $LN9@EVP_Decode
; Line 301
	inc	esi
	jmp	SHORT $LN11@EVP_Decode
$LN9@EVP_Decode:
; Line 302
	test	esi, esi
	jle	SHORT $LN11@EVP_Decode
	mov	eax, ecx
	or	eax, 19					; 00000013H
	cmp	eax, 243				; 000000f3H
	jne	$LN23@EVP_Decode
$LN11@EVP_Decode:
; Line 308
	cmp	esi, 2
	jg	$LN23@EVP_Decode
; Line 313
	cmp	ecx, 242				; 000000f2H
	je	$LN38@EVP_Decode
; Line 319
	or	ecx, 19					; 00000013H
	cmp	ecx, 243				; 000000f3H
	je	SHORT $LN47@EVP_Decode
; Line 320
	cmp	edx, 64					; 00000040H
	jge	$LN23@EVP_Decode
; Line 330
	mov	eax, DWORD PTR _d$1$[esp+24]
	mov	BYTE PTR [eax+edx], bl
	inc	edx
	jmp	SHORT $LN14@EVP_Decode
$LN47@EVP_Decode:
	mov	eax, DWORD PTR _d$1$[esp+24]
$LN14@EVP_Decode:
; Line 333
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN48@EVP_Decode
; Line 334
	push	edx
	push	eax
	push	ebp
	call	_EVP_DecodeBlock
	add	esp, 12					; 0000000cH
; Line 335
	xor	edx, edx
; Line 336
	test	eax, eax
	js	SHORT $LN23@EVP_Decode
	cmp	esi, eax
	jg	SHORT $LN23@EVP_Decode
; Line 340
	mov	ebx, DWORD PTR _ret$1$[esp+24]
	sub	eax, esi
	add	ebx, eax
; Line 341
	add	ebp, eax
	mov	DWORD PTR _ret$1$[esp+24], ebx
	jmp	SHORT $LN2@EVP_Decode
$LN48@EVP_Decode:
	mov	ebx, DWORD PTR _ret$1$[esp+24]
$LN2@EVP_Decode:
; Line 292
	inc	edi
	cmp	edi, DWORD PTR _inl$[esp+20]
	jl	$LL4@EVP_Decode
; Line 336
	mov	eax, DWORD PTR _d$1$[esp+24]
$LN46@EVP_Decode:
	xor	edi, edi
$tail$52:
; Line 351
	test	edx, edx
	jle	SHORT $LN24@EVP_Decode
; Line 352
	test	dl, 3
	jne	SHORT $LN20@EVP_Decode
; Line 353
	push	edx
	push	eax
	push	ebp
	call	_EVP_DecodeBlock
	add	esp, 12					; 0000000cH
; Line 354
	xor	edx, edx
; Line 355
	test	eax, eax
	js	SHORT $LN23@EVP_Decode
	cmp	esi, eax
	jg	SHORT $LN23@EVP_Decode
; Line 359
	sub	eax, esi
	add	ebx, eax
	mov	DWORD PTR _ret$1$[esp+24], ebx
$LN24@EVP_Decode:
; Line 367
	test	edi, edi
	jne	SHORT $LN29@EVP_Decode
$LN44@EVP_Decode:
	test	edx, edx
	jne	SHORT $LN28@EVP_Decode
	test	esi, esi
	jne	SHORT $LN29@EVP_Decode
$LN28@EVP_Decode:
	mov	eax, 1
	jmp	SHORT $LN49@EVP_Decode
$LN38@EVP_Decode:
; Line 315
	mov	eax, DWORD PTR _d$1$[esp+24]
	mov	edi, 1
	mov	ebx, DWORD PTR _ret$1$[esp+24]
	jmp	SHORT $tail$52
$LN20@EVP_Decode:
; Line 360
	test	edi, edi
	je	SHORT $LN44@EVP_Decode
$LN23@EVP_Decode:
; Line 362
	or	eax, -1
; Line 363
	jmp	SHORT $LN49@EVP_Decode
$LN29@EVP_Decode:
; Line 367
	xor	eax, eax
$LN49@EVP_Decode:
	pop	edi
	pop	ebp
$end$53:
; Line 370
	mov	ecx, DWORD PTR _outl$[esp+12]
	mov	esi, DWORD PTR _ret$1$[esp+16]
	mov	DWORD PTR [ecx], esi
; Line 371
	mov	ecx, DWORD PTR _ctx$[esp+12]
	pop	esi
	pop	ebx
	mov	DWORD PTR [ecx], edx
; Line 373
	add	esp, 8
	ret	0
_EVP_DecodeUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_DecodeInit
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_EVP_DecodeInit PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 245
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	DWORD PTR [eax], 0
; Line 246
	mov	DWORD PTR [eax+4], 0
; Line 247
	mov	DWORD PTR [eax+88], 0
; Line 248
	mov	DWORD PTR [eax+92], 0
; Line 249
	ret	0
_EVP_DecodeInit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_EncodeBlock
_TEXT	SEGMENT
_t$ = 8							; size = 4
_f$ = 12						; size = 4
_dlen$ = 16						; size = 4
_EVP_EncodeBlock PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 213
	mov	eax, DWORD PTR _t$[esp-4]
	push	ebx
	push	esi
; Line 216
	mov	esi, DWORD PTR _dlen$[esp+4]
	xor	ebx, ebx
	test	esi, esi
	jle	$LN15@EVP_Encode
; Line 213
	push	edi
	mov	edi, DWORD PTR _f$[esp+8]
	inc	edi
	npad	6
$LL4@EVP_Encode:
; Line 218
	movzx	edx, BYTE PTR [edi-1]
	cmp	esi, 3
	jl	SHORT $LN5@EVP_Encode
	movzx	ecx, BYTE PTR [edi]
	shl	edx, 8
	or	edx, ecx
	movzx	ecx, BYTE PTR [edi+1]
	shl	edx, 8
	or	edx, ecx
; Line 220
	mov	ecx, edx
	shr	ecx, 18					; 00000012H
	and	ecx, 63					; 0000003fH
	movzx	ecx, BYTE PTR _data_bin2ascii[ecx]
	mov	BYTE PTR [eax], cl
; Line 221
	mov	ecx, edx
	shr	ecx, 12					; 0000000cH
	and	ecx, 63					; 0000003fH
	movzx	ecx, BYTE PTR _data_bin2ascii[ecx]
	mov	BYTE PTR [eax+1], cl
; Line 222
	mov	ecx, edx
	shr	ecx, 6
	and	ecx, 63					; 0000003fH
; Line 223
	and	edx, 63					; 0000003fH
	movzx	ecx, BYTE PTR _data_bin2ascii[ecx]
	mov	BYTE PTR [eax+2], cl
	movzx	ecx, BYTE PTR _data_bin2ascii[edx]
	mov	BYTE PTR [eax+3], cl
; Line 224
	jmp	SHORT $LN16@EVP_Encode
$LN5@EVP_Encode:
; Line 225
	shl	edx, 16					; 00000010H
; Line 226
	cmp	esi, 2
	jne	SHORT $LN7@EVP_Encode
; Line 227
	movzx	ecx, BYTE PTR [edi]
	shl	ecx, 8
	or	edx, ecx
$LN7@EVP_Encode:
; Line 229
	mov	ecx, edx
	shr	ecx, 18					; 00000012H
	and	ecx, 63					; 0000003fH
	movzx	ecx, BYTE PTR _data_bin2ascii[ecx]
	mov	BYTE PTR [eax], cl
; Line 230
	mov	ecx, edx
	shr	ecx, 12					; 0000000cH
	and	ecx, 63					; 0000003fH
	movzx	ecx, BYTE PTR _data_bin2ascii[ecx]
	mov	BYTE PTR [eax+1], cl
; Line 231
	cmp	esi, 1
	jne	SHORT $LN9@EVP_Encode
	lea	ecx, DWORD PTR [esi+60]
	jmp	SHORT $LN10@EVP_Encode
$LN9@EVP_Encode:
	shr	edx, 6
	and	edx, 63					; 0000003fH
	movzx	ecx, BYTE PTR _data_bin2ascii[edx]
$LN10@EVP_Encode:
	mov	BYTE PTR [eax+2], cl
; Line 232
	mov	BYTE PTR [eax+3], 61			; 0000003dH
$LN16@EVP_Encode:
	sub	esi, 3
	add	eax, 4
; Line 234
	add	ebx, 4
; Line 235
	add	edi, 3
	test	esi, esi
	jg	$LL4@EVP_Encode
; Line 238
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 239
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 240
	ret	0
$LN15@EVP_Encode:
; Line 238
	mov	BYTE PTR [eax], bl
; Line 239
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 240
	ret	0
_EVP_EncodeBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_EncodeFinal
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_EVP_EncodeFinal PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 199
	push	edi
; Line 202
	mov	edi, DWORD PTR _ctx$[esp]
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN4@EVP_Encode
; Line 203
	push	esi
	mov	esi, DWORD PTR _out$[esp+4]
	push	eax
	lea	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_EVP_EncodeBlock
; Line 208
	mov	ecx, DWORD PTR _outl$[esp+16]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [eax+esi], 10			; 0000000aH
	inc	eax
	mov	BYTE PTR [eax+esi], 0
	mov	DWORD PTR [edi], 0
	pop	esi
	mov	DWORD PTR [ecx], eax
	pop	edi
; Line 209
	ret	0
$LN4@EVP_Encode:
; Line 208
	mov	eax, DWORD PTR _outl$[esp]
	pop	edi
	mov	DWORD PTR [eax], 0
; Line 209
	ret	0
_EVP_EncodeFinal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_EncodeUpdate
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_in$ = 20						; size = 4
_i$1$ = 24						; size = 4
_in$1$ = 24						; size = 4
_inl$ = 24						; size = 4
_EVP_EncodeUpdate PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 157
	mov	eax, DWORD PTR _outl$[esp-4]
	push	ebx
; Line 158
	mov	ebx, DWORD PTR _inl$[esp]
	push	ebp
	xor	ebp, ebp
	mov	DWORD PTR [eax], ebp
	test	ebx, ebx
	jle	$LN1@EVP_Encode
; Line 160
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+8]
	cmp	DWORD PTR [edi+4], 80			; 00000050H
	jle	SHORT $LN11@EVP_Encode
	push	OFFSET ??_C@_0CK@NJACHFBA@ctx?9?$DOlength?5?$DM?$DN?5?$CIint?$CJsizeof?$CIctx?9?$DO@
	push	160					; 000000a0H
	push	OFFSET ??_C@_0BG@FMGDOINB@?4?2crypto?2evp?2encode?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN11@EVP_Encode:
; Line 161
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	sub	eax, ecx
	mov	DWORD PTR _i$1$[esp+8], eax
	cmp	eax, ebx
	jle	SHORT $LN5@EVP_Encode
; Line 162
	push	ebx
	push	DWORD PTR _in$[esp+12]
	lea	eax, DWORD PTR [edi+8]
	add	eax, ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 163
	add	DWORD PTR [edi], ebx
	pop	edi
	pop	ebp
	pop	ebx
; Line 196
	ret	0
$LN5@EVP_Encode:
	push	esi
; Line 166
	test	ecx, ecx
	je	SHORT $LN17@EVP_Encode
; Line 168
	mov	esi, DWORD PTR _in$[esp+12]
	push	eax
	lea	eax, DWORD PTR [edi+8]
	add	eax, ecx
	push	esi
	push	eax
	call	_memcpy
; Line 169
	mov	eax, DWORD PTR _i$1$[esp+24]
	add	esi, eax
; Line 171
	push	DWORD PTR [edi+4]
	sub	ebx, eax
	mov	DWORD PTR _in$1$[esp+28], esi
	mov	esi, DWORD PTR _out$[esp+28]
	lea	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_EVP_EncodeBlock
; Line 176
	mov	edx, DWORD PTR _in$1$[esp+36]
	add	esi, eax
	mov	DWORD PTR [edi], ebp
	add	esp, 24					; 00000018H
	lea	ebp, DWORD PTR [eax+1]
	mov	BYTE PTR [esi], 10			; 0000000aH
	inc	esi
	mov	BYTE PTR [esi], 0
	jmp	SHORT $LN12@EVP_Encode
$LN17@EVP_Encode:
	mov	edx, DWORD PTR _in$[esp+12]
	mov	esi, DWORD PTR _out$[esp+12]
	mov	DWORD PTR _in$1$[esp+12], edx
$LN12@EVP_Encode:
; Line 178
	cmp	ebx, DWORD PTR [edi+4]
	jl	SHORT $LN3@EVP_Encode
	npad	5
$LL2@EVP_Encode:
	cmp	ebp, 2147483647				; 7fffffffH
	ja	SHORT $LN16@EVP_Encode
; Line 179
	push	DWORD PTR [edi+4]
	push	edx
	push	esi
	call	_EVP_EncodeBlock
; Line 180
	mov	edx, DWORD PTR _in$1$[esp+24]
; Line 182
	add	esi, eax
	add	edx, DWORD PTR [edi+4]
; Line 185
	inc	ebp
	sub	ebx, DWORD PTR [edi+4]
	add	esp, 12					; 0000000cH
	add	ebp, eax
	mov	DWORD PTR _in$1$[esp+12], edx
	mov	BYTE PTR [esi], 10			; 0000000aH
	inc	esi
	mov	BYTE PTR [esi], 0
	cmp	ebx, DWORD PTR [edi+4]
	jge	SHORT $LL2@EVP_Encode
$LN3@EVP_Encode:
; Line 187
	cmp	ebp, 2147483647				; 7fffffffH
	jbe	SHORT $LN7@EVP_Encode
$LN16@EVP_Encode:
; Line 189
	mov	eax, DWORD PTR _outl$[esp+12]
	pop	esi
	pop	edi
	pop	ebp
	mov	DWORD PTR [eax], 0
	pop	ebx
; Line 196
	ret	0
$LN7@EVP_Encode:
; Line 192
	test	ebx, ebx
	je	SHORT $LN8@EVP_Encode
; Line 193
	push	ebx
	push	edx
	lea	eax, DWORD PTR [edi+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@EVP_Encode:
; Line 195
	mov	eax, DWORD PTR _outl$[esp+12]
	mov	DWORD PTR [edi], ebx
	pop	esi
	pop	edi
	mov	DWORD PTR [eax], ebp
$LN1@EVP_Encode:
; Line 196
	pop	ebp
	pop	ebx
	ret	0
_EVP_EncodeUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EVP_EncodeInit
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_EVP_EncodeInit PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\evp\encode.c
; Line 146
	mov	eax, DWORD PTR _ctx$[esp-4]
	mov	DWORD PTR [eax+4], 48			; 00000030H
; Line 147
	mov	DWORD PTR [eax], 0
; Line 148
	mov	DWORD PTR [eax+88], 0
; Line 149
	ret	0
_EVP_EncodeInit ENDP
_TEXT	ENDS
END
