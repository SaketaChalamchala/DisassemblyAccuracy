; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_PEM_read_bio_DHparams
PUBLIC	_PEM_read_DHparams
PUBLIC	_PEM_read_bio_PrivateKey
PUBLIC	_PEM_read_PrivateKey
PUBLIC	_PEM_write_bio_PrivateKey
PUBLIC	_PEM_write_PrivateKey
PUBLIC	_PEM_read_bio_Parameters
PUBLIC	_PEM_write_bio_Parameters
PUBLIC	??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@	; `string'
PUBLIC	??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@		; `string'
PUBLIC	??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@	; `string'
PUBLIC	??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; `string'
PUBLIC	??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@	; `string'
PUBLIC	??_C@_0L@MBJDOOAB@PARAMETERS?$AA@		; `string'
PUBLIC	??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@	; `string'
PUBLIC	??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@		; `string'
PUBLIC	??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@	; `string'
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_BIO_s_file:PROC
EXTRN	_BIO_new_fp:PROC
EXTRN	_BIO_new:PROC
EXTRN	_BIO_free:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_snprintf:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_EVP_PKEY_set_type_str:PROC
EXTRN	_EVP_PKEY_new:PROC
EXTRN	_EVP_PKEY_free:PROC
EXTRN	_d2i_PrivateKey:PROC
EXTRN	_i2d_PrivateKey:PROC
EXTRN	_EVP_PKEY_asn1_find_str:PROC
EXTRN	_d2i_DHparams:PROC
EXTRN	_d2i_DHxparams:PROC
EXTRN	_X509_SIG_free:PROC
EXTRN	_d2i_X509_SIG:PROC
EXTRN	_PKCS8_PRIV_KEY_INFO_free:PROC
EXTRN	_d2i_PKCS8_PRIV_KEY_INFO:PROC
EXTRN	_EVP_PKCS82PKEY:PROC
EXTRN	_PKCS8_decrypt:PROC
EXTRN	_PEM_bytes_read_bio:PROC
EXTRN	_PEM_ASN1_write_bio:PROC
EXTRN	_PEM_def_callback:PROC
EXTRN	_PEM_write_bio_PKCS8PrivateKey:PROC
EXTRN	_pem_check_suffix:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ DB 'X9.42 DH PARAMETERS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ DB 'DH PARAMETERS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@ DB '%s PARAMETERS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ DB 'PARAMETERS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@ DB '%s PRIVATE KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
CONST	SEGMENT
??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ DB '.\crypto\pem\pem_'
	DB	'pkey.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ DB 'ENCRYPTED PRIVATE KEY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ DB 'PRIVATE KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@ DB 'ANY PRIVATE KEY', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_write_bio_Parameters
_TEXT	SEGMENT
_pem_str$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_bp$ = 8						; size = 4
_x$ = 12						; size = 4
_PEM_write_bio_Parameters PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 203
	mov	eax, 84					; 00000054H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+84], eax
	push	esi
	mov	esi, DWORD PTR _x$[esp+84]
	push	edi
	mov	edi, DWORD PTR _bp$[esp+88]
; Line 205
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN3@PEM_write_
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN3@PEM_write_
; Line 208
	push	DWORD PTR [eax+12]
	lea	eax, DWORD PTR _pem_str$[esp+96]
	push	OFFSET ??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@
	push	80					; 00000050H
	push	eax
	call	_BIO_snprintf
; Line 209
	push	0
	push	0
	push	0
	push	0
	push	0
	push	esi
	push	edi
	lea	eax, DWORD PTR _pem_str$[esp+136]
	push	eax
	mov	eax, DWORD PTR [esi+12]
	push	DWORD PTR [eax+60]
	call	_PEM_ASN1_write_bio
	add	esp, 52					; 00000034H
	pop	edi
	pop	esi
; Line 211
	mov	ecx, DWORD PTR __$ArrayPad$[esp+84]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	ret	0
$LN3@PEM_write_:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	eax, eax
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	ret	0
_PEM_write_bio_Parameters ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read_bio_Parameters
_TEXT	SEGMENT
_nm$ = -16						; size = 4
_data$ = -12						; size = 4
_p$ = -8						; size = 4
_len$ = -4						; size = 4
_bp$ = 8						; size = 4
_x$ = 12						; size = 4
_PEM_read_bio_Parameters PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 164
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	esi
; Line 170
	xor	esi, esi
	mov	DWORD PTR _nm$[esp+20], 0
; Line 172
	push	esi
	push	esi
	push	DWORD PTR _bp$[esp+24]
	lea	eax, DWORD PTR _nm$[esp+32]
	mov	DWORD PTR _p$[esp+32], 0
	push	OFFSET ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
	push	eax
	lea	eax, DWORD PTR _len$[esp+40]
	mov	DWORD PTR _data$[esp+40], 0
	push	eax
	lea	eax, DWORD PTR _data$[esp+44]
	push	eax
	call	_PEM_bytes_read_bio
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN2@PEM_read_b
	pop	esi
; Line 200
	add	esp, 16					; 00000010H
	ret	0
$LN2@PEM_read_b:
; Line 175
	mov	eax, DWORD PTR _data$[esp+20]
	push	edi
; Line 177
	push	OFFSET ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
	push	DWORD PTR _nm$[esp+28]
	mov	DWORD PTR _p$[esp+32], eax
	call	_pem_check_suffix
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	jle	SHORT $LN11@PEM_read_b
; Line 178
	call	_EVP_PKEY_new
	mov	esi, eax
; Line 179
	test	esi, esi
	je	SHORT $LN11@PEM_read_b
; Line 183
	push	edi
	push	DWORD PTR _nm$[esp+28]
	push	esi
	call	_EVP_PKEY_set_type_str
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@PEM_read_b
	mov	eax, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [eax+56]
	test	eax, eax
	je	SHORT $LN6@PEM_read_b
	push	DWORD PTR _len$[esp+24]
	lea	ecx, DWORD PTR _p$[esp+28]
	push	ecx
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@PEM_read_b
; Line 188
	mov	edi, DWORD PTR _x$[esp+20]
	test	edi, edi
	je	SHORT $LN9@PEM_read_b
; Line 189
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN8@PEM_read_b
; Line 190
	push	eax
	call	_EVP_PKEY_free
	add	esp, 4
$LN8@PEM_read_b:
; Line 191
	mov	DWORD PTR [edi], esi
	jmp	SHORT $LN9@PEM_read_b
$LN6@PEM_read_b:
; Line 184
	push	esi
	call	_EVP_PKEY_free
	add	esp, 4
; Line 185
	xor	esi, esi
$LN11@PEM_read_b:
; Line 196
	push	196					; 000000c4H
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	13					; 0000000dH
	push	140					; 0000008cH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN9@PEM_read_b:
; Line 197
	push	DWORD PTR _nm$[esp+24]
	call	_CRYPTO_free
; Line 198
	push	DWORD PTR _data$[esp+28]
	call	_CRYPTO_free
	add	esp, 8
; Line 199
	mov	eax, esi
	pop	edi
	pop	esi
; Line 200
	add	esp, 16					; 00000010H
	ret	0
_PEM_read_bio_Parameters ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_write_PrivateKey
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_x$ = 12						; size = 4
_enc$ = 16						; size = 4
_kstr$ = 20						; size = 4
_klen$ = 24						; size = 4
_cb$ = 28						; size = 4
_u$ = 32						; size = 4
_PEM_write_PrivateKey PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 233
	push	edi
; Line 237
	push	0
	push	DWORD PTR _fp$[esp+4]
	call	_BIO_new_fp
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	jne	SHORT $LN2@PEM_write_
; Line 238
	push	238					; 000000eeH
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	7
	push	139					; 0000008bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 239
	xor	eax, eax
	pop	edi
; Line 244
	ret	0
$LN2@PEM_write_:
	push	esi
; Line 241
	push	DWORD PTR _u$[esp+4]
	push	DWORD PTR _cb$[esp+8]
	push	DWORD PTR _klen$[esp+12]
	push	DWORD PTR _kstr$[esp+16]
	push	DWORD PTR _enc$[esp+20]
	push	DWORD PTR _x$[esp+24]
	push	edi
	call	_PEM_write_bio_PrivateKey
; Line 242
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 32					; 00000020H
; Line 243
	mov	eax, esi
	pop	esi
	pop	edi
; Line 244
	ret	0
_PEM_write_PrivateKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_write_bio_PrivateKey
_TEXT	SEGMENT
_u$GSCopy$1$ = -92					; size = 4
_cb$GSCopy$1$ = -88					; size = 4
_pem_str$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_bp$ = 8						; size = 4
_x$ = 12						; size = 4
_enc$ = 16						; size = 4
_kstr$ = 20						; size = 4
_klen$ = 24						; size = 4
_cb$ = 28						; size = 4
_u$ = 32						; size = 4
_PEM_write_bio_PrivateKey PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 152
	mov	eax, 92					; 0000005cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+92], eax
	mov	ecx, DWORD PTR _cb$[esp+88]
	mov	edx, DWORD PTR _u$[esp+88]
	push	ebx
	mov	ebx, DWORD PTR _enc$[esp+92]
	push	ebp
	mov	ebp, DWORD PTR _kstr$[esp+96]
	push	esi
	mov	esi, DWORD PTR _x$[esp+100]
	push	edi
	mov	edi, DWORD PTR _bp$[esp+104]
	mov	DWORD PTR _cb$GSCopy$1$[esp+108], ecx
; Line 154
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _u$GSCopy$1$[esp+108], edx
	test	eax, eax
	je	SHORT $LN3@PEM_write_
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN3@PEM_write_
; Line 158
	push	DWORD PTR [eax+12]
	lea	eax, DWORD PTR _pem_str$[esp+112]
	push	OFFSET ??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@
	push	80					; 00000050H
	push	eax
	call	_BIO_snprintf
; Line 159
	push	DWORD PTR _u$GSCopy$1$[esp+124]
	lea	eax, DWORD PTR _pem_str$[esp+128]
	push	DWORD PTR _cb$GSCopy$1$[esp+128]
	push	DWORD PTR _klen$[esp+128]
	push	ebp
	push	ebx
	push	esi
	push	edi
	push	eax
	push	OFFSET _i2d_PrivateKey
	call	_PEM_ASN1_write_bio
	add	esp, 52					; 00000034H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 161
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
$LN3@PEM_write_:
; Line 155
	push	edx
	push	ecx
	push	DWORD PTR _klen$[esp+112]
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	_PEM_write_bio_PKCS8PrivateKey
; Line 161
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
_PEM_write_bio_PrivateKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read_PrivateKey
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_x$ = 12						; size = 4
_cb$ = 16						; size = 4
_u$ = 20						; size = 4
_PEM_read_PrivateKey PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 216
	push	edi
; Line 220
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@PEM_read_P
; Line 221
	push	221					; 000000ddH
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	7
	push	124					; 0000007cH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 222
	xor	eax, eax
	pop	edi
; Line 228
	ret	0
$LN2@PEM_read_P:
	push	esi
; Line 224
	push	DWORD PTR _fp$[esp+4]
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
; Line 225
	push	DWORD PTR _u$[esp+20]
	push	DWORD PTR _cb$[esp+24]
	push	DWORD PTR _x$[esp+28]
	push	edi
	call	_PEM_read_bio_PrivateKey
; Line 226
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 36					; 00000024H
; Line 227
	mov	eax, esi
	pop	esi
	pop	edi
; Line 228
	ret	0
_PEM_read_PrivateKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read_bio_PrivateKey
_TEXT	SEGMENT
_p$ = -1048						; size = 4
_nm$ = -1044						; size = 4
_len$ = -1040						; size = 4
_data$ = -1036						; size = 4
_u$GSCopy$1$ = -1032					; size = 4
_psbuf$1 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_bp$ = 8						; size = 4
_x$ = 12						; size = 4
_cb$ = 16						; size = 4
_u$ = 20						; size = 4
_PEM_read_bio_PrivateKey PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 80
	mov	eax, 1048				; 00000418H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+1048], eax
	mov	ecx, DWORD PTR _u$[esp+1044]
	mov	eax, DWORD PTR _bp$[esp+1044]
	push	ebx
	mov	ebx, DWORD PTR _x$[esp+1048]
	push	ebp
	push	edi
	mov	edi, DWORD PTR _cb$[esp+1056]
; Line 86
	xor	ebp, ebp
; Line 88
	push	ecx
	push	edi
	push	eax
	push	OFFSET ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@
	lea	eax, DWORD PTR _nm$[esp+1076]
	mov	DWORD PTR _u$GSCopy$1$[esp+1076], ecx
	push	eax
	lea	eax, DWORD PTR _len$[esp+1080]
	mov	DWORD PTR _nm$[esp+1080], 0
	push	eax
	lea	eax, DWORD PTR _data$[esp+1084]
	mov	DWORD PTR _p$[esp+1084], 0
	push	eax
	mov	DWORD PTR _data$[esp+1088], 0
	call	_PEM_bytes_read_bio
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN2@PEM_read_b
	pop	edi
	pop	ebp
	pop	ebx
; Line 147
	mov	ecx, DWORD PTR __$ArrayPad$[esp+1048]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 1048				; 00000418H
	ret	0
$LN2@PEM_read_b:
; Line 90
	mov	eax, DWORD PTR _data$[esp+1060]
; Line 92
	mov	ecx, OFFSET ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
	push	esi
	mov	esi, DWORD PTR _nm$[esp+1064]
	mov	DWORD PTR _p$[esp+1064], eax
	mov	eax, esi
$LL23@PEM_read_b:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN24@PEM_read_b
	test	dl, dl
	je	SHORT $LN25@PEM_read_b
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN24@PEM_read_b
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL23@PEM_read_b
$LN25@PEM_read_b:
	xor	eax, eax
	jmp	SHORT $LN26@PEM_read_b
$LN24@PEM_read_b:
	sbb	eax, eax
	or	eax, 1
$LN26@PEM_read_b:
	test	eax, eax
	jne	SHORT $LN3@PEM_read_b
; Line 94
	push	DWORD PTR _len$[esp+1064]
	lea	eax, DWORD PTR _p$[esp+1068]
	push	eax
	push	0
	call	_d2i_PKCS8_PRIV_KEY_INFO
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 95
	test	esi, esi
	je	$LN22@PEM_read_b
; Line 97
	push	esi
	call	_EVP_PKCS82PKEY
	add	esp, 4
	mov	ebp, eax
; Line 98
	test	ebx, ebx
	je	SHORT $LN6@PEM_read_b
; Line 99
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN7@PEM_read_b
; Line 100
	push	ecx
	call	_EVP_PKEY_free
	add	esp, 4
$LN7@PEM_read_b:
; Line 101
	mov	DWORD PTR [ebx], ebp
$LN6@PEM_read_b:
; Line 103
	push	esi
	call	_PKCS8_PRIV_KEY_INFO_free
	add	esp, 4
	jmp	$p8err$33
$LN3@PEM_read_b:
; Line 104
	mov	ecx, OFFSET ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
	mov	eax, esi
	npad	1
$LL27@PEM_read_b:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN28@PEM_read_b
	test	dl, dl
	je	SHORT $LN29@PEM_read_b
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN28@PEM_read_b
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL27@PEM_read_b
$LN29@PEM_read_b:
	xor	eax, eax
	jmp	SHORT $LN30@PEM_read_b
$LN28@PEM_read_b:
	sbb	eax, eax
	or	eax, 1
$LN30@PEM_read_b:
	test	eax, eax
	jne	$LN8@PEM_read_b
; Line 109
	push	DWORD PTR _len$[esp+1064]
	lea	eax, DWORD PTR _p$[esp+1068]
	push	eax
	push	0
	call	_d2i_X509_SIG
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 110
	test	esi, esi
	je	$LN22@PEM_read_b
; Line 113
	lea	eax, DWORD PTR _psbuf$1[esp+1064]
	push	DWORD PTR _u$GSCopy$1$[esp+1064]
	push	0
	push	1024					; 00000400H
	push	eax
	test	edi, edi
	je	SHORT $LN11@PEM_read_b
	call	edi
	jmp	SHORT $LN31@PEM_read_b
$LN11@PEM_read_b:
; Line 115
	call	_PEM_def_callback
$LN31@PEM_read_b:
	add	esp, 16					; 00000010H
; Line 116
	test	eax, eax
	jg	SHORT $LN13@PEM_read_b
; Line 117
	push	117					; 00000075H
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	104					; 00000068H
	push	123					; 0000007bH
	push	9
	call	_ERR_put_error
; Line 118
	push	esi
	call	_X509_SIG_free
	add	esp, 24					; 00000018H
; Line 119
	jmp	$err$34
$LN13@PEM_read_b:
; Line 121
	push	eax
	lea	eax, DWORD PTR _psbuf$1[esp+1068]
	push	eax
	push	esi
	call	_PKCS8_decrypt
; Line 122
	push	esi
	mov	edi, eax
	call	_X509_SIG_free
	add	esp, 16					; 00000010H
; Line 123
	test	edi, edi
	je	SHORT $LN22@PEM_read_b
; Line 125
	push	edi
	call	_EVP_PKCS82PKEY
	add	esp, 4
	mov	ebp, eax
; Line 126
	test	ebx, ebx
	je	SHORT $LN15@PEM_read_b
; Line 127
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN16@PEM_read_b
; Line 128
	push	eax
	call	_EVP_PKEY_free
	add	esp, 4
$LN16@PEM_read_b:
; Line 129
	mov	DWORD PTR [ebx], ebp
$LN15@PEM_read_b:
; Line 131
	push	edi
	call	_PKCS8_PRIV_KEY_INFO_free
	add	esp, 4
	jmp	SHORT $p8err$33
$LN8@PEM_read_b:
; Line 132
	push	OFFSET ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
	push	esi
	call	_pem_check_suffix
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN22@PEM_read_b
; Line 134
	push	eax
	push	DWORD PTR _nm$[esp+1068]
	push	0
	call	_EVP_PKEY_asn1_find_str
	add	esp, 12					; 0000000cH
; Line 135
	test	eax, eax
	je	SHORT $LN22@PEM_read_b
	cmp	DWORD PTR [eax+92], ebp
	je	SHORT $LN22@PEM_read_b
; Line 137
	push	DWORD PTR _len$[esp+1064]
	lea	ecx, DWORD PTR _p$[esp+1068]
	push	ecx
	push	ebx
	push	DWORD PTR [eax]
	call	_d2i_PrivateKey
	add	esp, 16					; 00000010H
	mov	ebp, eax
$p8err$33:
; Line 140
	test	ebp, ebp
	jne	SHORT $err$34
$LN22@PEM_read_b:
; Line 141
	push	141					; 0000008dH
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	13					; 0000000dH
	push	123					; 0000007bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$34:
; Line 143
	push	DWORD PTR _nm$[esp+1064]
	call	_CRYPTO_free
; Line 144
	push	DWORD PTR _len$[esp+1068]
	push	DWORD PTR _data$[esp+1072]
	call	_OPENSSL_cleanse
; Line 145
	push	DWORD PTR _data$[esp+1076]
	call	_CRYPTO_free
; Line 147
	mov	ecx, DWORD PTR __$ArrayPad$[esp+1080]
	add	esp, 16					; 00000010H
	mov	eax, ebp
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 1048				; 00000418H
	ret	0
_PEM_read_bio_PrivateKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read_DHparams
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_x$ = 12						; size = 4
_cb$ = 16						; size = 4
_u$ = 20						; size = 4
_PEM_read_DHparams PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 278
	push	edi
; Line 282
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@PEM_read_D
; Line 283
	push	283					; 0000011bH
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	7
	push	142					; 0000008eH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 284
	xor	eax, eax
	pop	edi
; Line 290
	ret	0
$LN2@PEM_read_D:
	push	esi
; Line 286
	push	DWORD PTR _fp$[esp+4]
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
; Line 287
	push	DWORD PTR _u$[esp+20]
	push	DWORD PTR _cb$[esp+24]
	push	DWORD PTR _x$[esp+28]
	push	edi
	call	_PEM_read_bio_DHparams
; Line 288
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 36					; 00000024H
; Line 289
	mov	eax, esi
	pop	esi
	pop	edi
; Line 290
	ret	0
_PEM_read_DHparams ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read_bio_DHparams
_TEXT	SEGMENT
_p$ = -16						; size = 4
_nm$ = -12						; size = 4
_data$ = -8						; size = 4
_len$ = -4						; size = 4
_bp$ = 8						; size = 4
_x$ = 12						; size = 4
_cb$ = 16						; size = 4
_u$ = 20						; size = 4
_PEM_read_bio_DHparams PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_pkey.c
; Line 253
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 260
	push	DWORD PTR _u$[esp+12]
	lea	eax, DWORD PTR _nm$[esp+20]
	mov	DWORD PTR _nm$[esp+20], 0
	push	DWORD PTR _cb$[esp+16]
	mov	DWORD PTR _p$[esp+24], 0
	push	DWORD PTR _bp$[esp+20]
	mov	DWORD PTR _data$[esp+28], 0
	push	OFFSET ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
	push	eax
	lea	eax, DWORD PTR _len$[esp+36]
	push	eax
	lea	eax, DWORD PTR _data$[esp+40]
	push	eax
	call	_PEM_bytes_read_bio
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN2@PEM_read_b
; Line 274
	add	esp, 16					; 00000010H
	ret	0
$LN2@PEM_read_b:
; Line 262
	mov	eax, DWORD PTR _data$[esp+16]
; Line 264
	mov	ecx, OFFSET ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
	mov	DWORD PTR _p$[esp+16], eax
	mov	eax, DWORD PTR _nm$[esp+16]
$LL7@PEM_read_b:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN8@PEM_read_b
	test	dl, dl
	je	SHORT $LN9@PEM_read_b
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN8@PEM_read_b
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL7@PEM_read_b
$LN9@PEM_read_b:
	xor	eax, eax
	jmp	SHORT $LN10@PEM_read_b
$LN8@PEM_read_b:
	sbb	eax, eax
	or	eax, 1
$LN10@PEM_read_b:
; Line 265
	push	esi
	push	DWORD PTR _len$[esp+20]
	test	eax, eax
	lea	eax, DWORD PTR _p$[esp+24]
	push	eax
	push	DWORD PTR _x$[esp+24]
	jne	SHORT $LN3@PEM_read_b
	call	_d2i_DHxparams
	jmp	SHORT $LN11@PEM_read_b
$LN3@PEM_read_b:
; Line 267
	call	_d2i_DHparams
$LN11@PEM_read_b:
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 269
	test	esi, esi
	jne	SHORT $LN5@PEM_read_b
; Line 270
	push	270					; 0000010eH
	push	OFFSET ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
	push	13					; 0000000dH
	push	141					; 0000008dH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN5@PEM_read_b:
; Line 271
	push	DWORD PTR _nm$[esp+20]
	call	_CRYPTO_free
; Line 272
	push	DWORD PTR _data$[esp+24]
	call	_CRYPTO_free
	add	esp, 8
; Line 273
	mov	eax, esi
	pop	esi
; Line 274
	add	esp, 16					; 00000010H
	ret	0
_PEM_read_bio_DHparams ENDP
_TEXT	ENDS
END
