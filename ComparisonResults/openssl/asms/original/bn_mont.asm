; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_MONT_CTX_new
PUBLIC	_BN_MONT_CTX_init
PUBLIC	_BN_mod_mul_montgomery
PUBLIC	_BN_from_montgomery
PUBLIC	_BN_MONT_CTX_free
PUBLIC	_BN_MONT_CTX_set
PUBLIC	_BN_MONT_CTX_copy
PUBLIC	_BN_MONT_CTX_set_locked
PUBLIC	??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@ ; `string'
EXTRN	_CRYPTO_lock:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_init:PROC
EXTRN	_BN_clear_free:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_mul:PROC
EXTRN	_BN_sqr:PROC
EXTRN	_BN_div:PROC
EXTRN	_BN_sub_word:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_lshift:PROC
EXTRN	_BN_set_bit:PROC
EXTRN	_BN_mod_inverse:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_bn_mul_add_words:PROC
EXTRN	_bn_sub_words:PROC
EXTRN	_bn_mul_mont:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@
CONST	SEGMENT
??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@ DB '.\crypto\bn\bn_mon'
	DB	't.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_from_montgomery_word
_TEXT	SEGMENT
_m$1$ = -32						; size = 4
_i$2$ = -32						; size = 4
tv1107 = -28						; size = 4
_np$1$ = -28						; size = 4
_n0$1$ = -24						; size = 4
_rp$2$ = -24						; size = 4
tv1103 = -20						; size = 4
tv1105 = -16						; size = 4
tv1104 = -12						; size = 4
_nl$1$ = -8						; size = 4
_nrp$1$ = -4						; size = 4
_ret$ = 8						; size = 4
_r$ = 12						; size = 4
_ap$1$ = 16						; size = 4
tv1117 = 16						; size = 4
_rp$1$ = 16						; size = 4
_mont$ = 16						; size = 4
_BN_from_montgomery_word PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 179
	mov	eax, 32					; 00000020H
	call	__chkstk
; Line 185
	mov	edx, DWORD PTR _mont$[esp+28]
	push	ebx
	mov	ebx, DWORD PTR [edx+28]
; Line 186
	test	ebx, ebx
	jne	SHORT $LN20@BN_from_mo
; Line 187
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	DWORD PTR [eax+4], ebx
; Line 188
	lea	eax, DWORD PTR [ebx+1]
	pop	ebx
; Line 287
	add	esp, 32					; 00000020H
	ret	0
$LN20@BN_from_mo:
	push	ebp
; Line 192
	mov	ebp, DWORD PTR _r$[esp+36]
	push	esi
	lea	esi, DWORD PTR [ebx+ebx]
	cmp	esi, DWORD PTR [ebp+8]
	jg	SHORT $LN28@BN_from_mo
	mov	eax, ebp
	jmp	SHORT $LN29@BN_from_mo
$LN28@BN_from_mo:
	push	esi
	push	ebp
	call	_bn_expand2
	mov	edx, DWORD PTR _mont$[esp+48]
	add	esp, 8
$LN29@BN_from_mo:
	test	eax, eax
	jne	SHORT $LN21@BN_from_mo
	pop	esi
	pop	ebp
	pop	ebx
; Line 287
	add	esp, 32					; 00000020H
	ret	0
$LN21@BN_from_mo:
; Line 195
	mov	eax, DWORD PTR [edx+36]
	xor	DWORD PTR [ebp+12], eax
; Line 196
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _np$1$[esp+44], eax
; Line 201
	mov	eax, DWORD PTR [ebp+4]
	push	edi
	mov	edi, DWORD PTR [ebp]
	mov	DWORD PTR _rp$1$[esp+44], edi
	cmp	eax, esi
	jge	SHORT $LN4@BN_from_mo
; Line 195
	lea	edi, DWORD PTR [edi+eax*4]
	mov	ecx, esi
	sub	ecx, eax
	xor	eax, eax
	rep stosd
	mov	edi, DWORD PTR _rp$1$[esp+44]
$LN4@BN_from_mo:
; Line 207
	mov	DWORD PTR [ebp+4], esi
; Line 208
	mov	ecx, DWORD PTR [edx+64]
	mov	DWORD PTR _n0$1$[esp+48], ecx
; Line 213
	mov	DWORD PTR _m$1$[esp+48], 0
	test	ebx, ebx
	jle	SHORT $LN6@BN_from_mo
; Line 207
	mov	DWORD PTR tv1117[esp+44], ebx
	xor	ebp, ebp
$LL7@BN_from_mo:
; Line 228
	mov	eax, DWORD PTR [edi]
	imul	eax, ecx
	push	eax
	push	ebx
	push	DWORD PTR _np$1$[esp+56]
	push	edi
	call	_bn_mul_add_words
; Line 230
	mov	edx, DWORD PTR [edi+ebx*4]
; Line 231
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	lea	esi, DWORD PTR [edx+ebp]
	add	esi, eax
	cmp	esi, edx
; Line 233
	mov	DWORD PTR [edi+ebx*4], esi
	setne	cl
	or	ebp, ecx
	mov	ecx, DWORD PTR _n0$1$[esp+48]
	cmp	edx, esi
	sbb	eax, eax
	add	edi, 4
	inc	eax
	and	ebp, eax
	sub	DWORD PTR tv1117[esp+44], 1
	jne	SHORT $LL7@BN_from_mo
	mov	DWORD PTR _m$1$[esp+48], ebp
	mov	ebp, DWORD PTR _r$[esp+44]
$LN6@BN_from_mo:
; Line 236
	mov	edi, DWORD PTR _ret$[esp+44]
	cmp	ebx, DWORD PTR [edi+8]
	jg	SHORT $LN30@BN_from_mo
	mov	eax, edi
	jmp	SHORT $LN31@BN_from_mo
$LN30@BN_from_mo:
	push	ebx
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN31@BN_from_mo:
	test	eax, eax
	jne	SHORT $LN22@BN_from_mo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 287
	add	esp, 32					; 00000020H
	ret	0
$LN22@BN_from_mo:
; Line 241
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [edi+4], ebx
	mov	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR [edi+12], eax
; Line 242
	mov	eax, DWORD PTR [ebp]
; Line 250
	push	ebx
	push	DWORD PTR _np$1$[esp+52]
	mov	DWORD PTR _rp$2$[esp+56], ecx
	lea	esi, DWORD PTR [eax+ebx*4]
	push	esi
	push	ecx
	mov	DWORD PTR _ap$1$[esp+60], esi
	call	_bn_sub_words
	mov	ecx, DWORD PTR _m$1$[esp+64]
; Line 259
	sub	ebx, 4
	sub	ecx, eax
	mov	DWORD PTR _nl$1$[esp+64], ebx
	mov	eax, ecx
	xor	edx, edx
	not	eax
	mov	DWORD PTR _i$2$[esp+64], edx
	and	eax, DWORD PTR _rp$2$[esp+64]
	and	ecx, esi
	or	eax, ecx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _nrp$1$[esp+48], eax
	test	ebx, ebx
	jle	$LN9@BN_from_mo
; Line 238
	mov	edx, DWORD PTR _rp$2$[esp+48]
	lea	edi, DWORD PTR [eax+8]
	mov	ebp, esi
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv1107[esp+48], ecx
; Line 265
	mov	ecx, esi
	sub	ecx, eax
	mov	DWORD PTR tv1105[esp+48], ecx
	mov	ecx, edx
	sub	ecx, eax
	mov	eax, esi
	sub	eax, edx
	mov	DWORD PTR tv1104[esp+48], ecx
	mov	DWORD PTR tv1103[esp+48], eax
	npad	6
$LL10@BN_from_mo:
; Line 259
	mov	ecx, DWORD PTR [edi-8]
	lea	edi, DWORD PTR [edi+16]
; Line 263
	mov	edx, DWORD PTR [edi-20]
; Line 264
	mov	esi, DWORD PTR [edi-16]
; Line 265
	mov	eax, DWORD PTR _i$2$[esp+48]
; Line 267
	mov	ebx, DWORD PTR tv1103[esp+48]
	mov	DWORD PTR [ebp+eax*4], 0
	mov	ebp, DWORD PTR tv1107[esp+48]
	mov	eax, DWORD PTR [edi-12]
	mov	DWORD PTR [ebx+ebp], 0
	mov	ebx, DWORD PTR _nl$1$[esp+48]
; Line 268
	mov	DWORD PTR [ebp-4], ecx
; Line 269
	mov	ecx, DWORD PTR tv1105[esp+48]
	mov	DWORD PTR [ecx+edi-16], 0
; Line 270
	mov	ecx, ebp
; Line 271
	mov	ebp, DWORD PTR _ap$1$[esp+44]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _i$2$[esp+48]
	mov	DWORD PTR [ebp+edx*4+12], 0
	add	edx, 4
; Line 272
	mov	ebp, DWORD PTR tv1104[esp+48]
; Line 273
	mov	DWORD PTR [ecx+8], eax
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _i$2$[esp+48], edx
	mov	DWORD PTR tv1107[esp+48], ecx
	mov	DWORD PTR [edi+ebp-16], esi
	mov	ebp, DWORD PTR _ap$1$[esp+44]
	cmp	edx, ebx
	jl	SHORT $LL10@BN_from_mo
	mov	ebp, DWORD PTR _r$[esp+44]
	mov	esi, DWORD PTR _ap$1$[esp+44]
	mov	edi, DWORD PTR _ret$[esp+44]
$LN9@BN_from_mo:
; Line 275
	add	ebx, 4
	cmp	edx, ebx
	jge	SHORT $LN12@BN_from_mo
	mov	eax, DWORD PTR _rp$2$[esp+48]
; Line 276
	sub	esi, eax
	mov	ebp, DWORD PTR _nrp$1$[esp+48]
	sub	ebp, eax
	sub	ebx, edx
	lea	ecx, DWORD PTR [eax+edx*4]
$LL46@BN_from_mo:
	mov	eax, DWORD PTR [ecx+ebp]
	lea	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx-4], eax
	mov	DWORD PTR [esi+ecx-4], 0
	sub	ebx, 1
	jne	SHORT $LL46@BN_from_mo
	mov	ebp, DWORD PTR _r$[esp+44]
$LN12@BN_from_mo:
; Line 282
	mov	ecx, DWORD PTR [ebp+4]
	test	ecx, ecx
	jle	SHORT $LN23@BN_from_mo
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL16@BN_from_mo:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN38@BN_from_mo
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL16@BN_from_mo
$LN38@BN_from_mo:
	mov	DWORD PTR [ebp+4], ecx
$LN23@BN_from_mo:
; Line 283
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	jle	SHORT $LN25@BN_from_mo
	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL19@BN_from_mo:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN39@BN_from_mo
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL19@BN_from_mo
$LN39@BN_from_mo:
	mov	DWORD PTR [edi+4], ecx
$LN25@BN_from_mo:
	pop	edi
	pop	esi
	pop	ebp
; Line 286
	mov	eax, 1
	pop	ebx
; Line 287
	add	esp, 32					; 00000020H
	ret	0
_BN_from_montgomery_word ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_MONT_CTX_set_locked
_TEXT	SEGMENT
_pmont$ = 8						; size = 4
_lock$ = 12						; size = 4
_mod$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_MONT_CTX_set_locked PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 524
	push	ebx
	push	esi
	push	edi
; Line 527
	mov	edi, DWORD PTR _lock$[esp+8]
	push	527					; 0000020fH
	push	OFFSET ??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@
	push	edi
	push	5
	call	_CRYPTO_lock
; Line 528
	mov	ebx, DWORD PTR _pmont$[esp+24]
; Line 529
	push	529					; 00000211H
	push	OFFSET ??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@
	push	edi
	mov	esi, DWORD PTR [ebx]
	push	6
	call	_CRYPTO_lock
	add	esp, 32					; 00000020H
; Line 530
	test	esi, esi
	jne	SHORT $LN8@BN_MONT_CT
; Line 541
	call	_BN_MONT_CTX_new
	mov	esi, eax
; Line 542
	test	esi, esi
	je	SHORT $LN9@BN_MONT_CT
; Line 544
	push	DWORD PTR _ctx$[esp+8]
	push	DWORD PTR _mod$[esp+12]
	push	esi
	call	_BN_MONT_CTX_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@BN_MONT_CT
; Line 545
	push	esi
	call	_BN_MONT_CTX_free
	add	esp, 4
$LN9@BN_MONT_CT:
; Line 546
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 558
	ret	0
$LN4@BN_MONT_CT:
; Line 550
	push	550					; 00000226H
	push	OFFSET ??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@
	push	edi
	push	9
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
; Line 551
	cmp	DWORD PTR [ebx], 0
	je	SHORT $LN5@BN_MONT_CT
; Line 552
	push	esi
	call	_BN_MONT_CTX_free
; Line 553
	mov	esi, DWORD PTR [ebx]
	add	esp, 4
; Line 554
	jmp	SHORT $LN6@BN_MONT_CT
$LN5@BN_MONT_CT:
; Line 555
	mov	DWORD PTR [ebx], esi
$LN6@BN_MONT_CT:
; Line 556
	push	556					; 0000022cH
	push	OFFSET ??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@
	push	edi
	push	10					; 0000000aH
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
$LN8@BN_MONT_CT:
; Line 557
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 558
	ret	0
_BN_MONT_CTX_set_locked ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_MONT_CTX_copy
_TEXT	SEGMENT
_to$ = 8						; size = 4
_from$ = 12						; size = 4
_BN_MONT_CTX_copy PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 506
	push	esi
; Line 507
	mov	esi, DWORD PTR _to$[esp]
	push	edi
	mov	edi, DWORD PTR _from$[esp+4]
	cmp	esi, edi
	je	SHORT $LN7@BN_MONT_CT
; Line 510
	lea	eax, DWORD PTR [edi+4]
	push	eax
	lea	eax, DWORD PTR [esi+4]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@BN_MONT_CT
$LN8@BN_MONT_CT:
	pop	edi
; Line 511
	xor	eax, eax
	pop	esi
; Line 520
	ret	0
$LN3@BN_MONT_CT:
; Line 512
	lea	eax, DWORD PTR [edi+24]
	push	eax
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@BN_MONT_CT
; Line 514
	lea	eax, DWORD PTR [edi+44]
	push	eax
	lea	eax, DWORD PTR [esi+44]
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@BN_MONT_CT
; Line 516
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; Line 517
	mov	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; Line 518
	mov	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
$LN7@BN_MONT_CT:
; Line 519
	pop	edi
	mov	eax, esi
	pop	esi
; Line 520
	ret	0
_BN_MONT_CTX_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_MONT_CTX_set
_TEXT	SEGMENT
tv310 = -32						; size = 4
_buf$1 = -28						; size = 8
_tmod$2 = -20						; size = 20
_mont$ = 8						; size = 4
_R$1$ = 12						; size = 4
_mod$ = 12						; size = 4
_ctx$ = 16						; size = 4
_BN_MONT_CTX_set PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 372
	mov	eax, 32					; 00000020H
	call	__chkstk
	push	ebx
; Line 376
	mov	ebx, DWORD PTR _mod$[esp+32]
	push	ebp
	xor	ebp, ebp
	cmp	DWORD PTR [ebx+4], ebp
	jne	SHORT $LN2@BN_MONT_CT
; Line 377
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 503
	add	esp, 32					; 00000020H
	ret	0
$LN2@BN_MONT_CT:
	push	esi
	push	edi
; Line 379
	mov	edi, DWORD PTR _ctx$[esp+44]
	push	edi
	call	_BN_CTX_start
; Line 380
	push	edi
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	je	$err$27
; Line 382
	mov	eax, DWORD PTR _mont$[esp+44]
; Line 383
	push	ebx
	lea	ecx, DWORD PTR [eax+4]
	add	eax, 24					; 00000018H
	push	eax
	mov	DWORD PTR _R$1$[esp+52], ecx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$err$27
; Line 385
	mov	eax, DWORD PTR _mont$[esp+44]
	mov	DWORD PTR [eax+36], ebp
; Line 392
	lea	eax, DWORD PTR _tmod$2[esp+48]
	push	eax
	call	_BN_init
; Line 393
	lea	eax, DWORD PTR _buf$1[esp+52]
; Line 394
	mov	DWORD PTR _tmod$2[esp+60], 2
; Line 397
	push	ebx
	mov	DWORD PTR _tmod$2[esp+56], eax
	mov	DWORD PTR _tmod$2[esp+68], ebp
	call	_BN_num_bits
	mov	ecx, DWORD PTR _mont$[esp+52]
	add	eax, 31					; 0000001fH
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR [ecx], eax
; Line 407
	lea	eax, DWORD PTR [ecx+4]
	push	0
	push	eax
	call	_BN_set_word
; Line 408
	push	64					; 00000040H
	push	DWORD PTR _R$1$[esp+64]
	call	_BN_set_bit
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$err$27
; Line 412
	mov	edx, DWORD PTR [ebx]
	xor	ecx, ecx
	mov	DWORD PTR _tmod$2[esp+52], ecx
	mov	DWORD PTR tv310[esp+48], 1
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR _buf$1[esp+48], eax
	cmovne	ecx, DWORD PTR tv310[esp+48]
; Line 414
	cmp	DWORD PTR [ebx+4], 1
	mov	DWORD PTR _tmod$2[esp+52], ecx
	jle	SHORT $LN18@BN_MONT_CT
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN19@BN_MONT_CT
$LN18@BN_MONT_CT:
	xor	eax, eax
$LN19@BN_MONT_CT:
	test	eax, eax
	mov	DWORD PTR _buf$1[esp+52], eax
; Line 417
	push	edi
	lea	eax, DWORD PTR _tmod$2[esp+52]
	mov	edx, 2
	push	eax
	push	DWORD PTR _R$1$[esp+52]
	cmovne	ecx, edx
	push	esi
	mov	DWORD PTR _tmod$2[esp+68], ecx
	call	_BN_mod_inverse
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$27
; Line 419
	push	64					; 00000040H
	push	esi
	push	esi
	call	_BN_lshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$27
; Line 421
	cmp	DWORD PTR [esi+4], ebp
	je	SHORT $LN10@BN_MONT_CT
; Line 422
	push	1
	push	esi
	call	_BN_sub_word
	add	esp, 8
	test	eax, eax
	je	$err$27
; Line 424
	jmp	SHORT $LN11@BN_MONT_CT
$LN10@BN_MONT_CT:
; Line 426
	cmp	DWORD PTR [esi+8], 1
	jl	SHORT $LN20@BN_MONT_CT
	mov	eax, esi
	jmp	SHORT $LN21@BN_MONT_CT
$LN20@BN_MONT_CT:
	push	1
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN21@BN_MONT_CT:
	test	eax, eax
	je	$err$27
; Line 430
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+12], ebp
	mov	DWORD PTR [eax], -1
; Line 431
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], -1
; Line 432
	mov	DWORD PTR [esi+4], 2
$LN11@BN_MONT_CT:
; Line 434
	push	edi
	lea	eax, DWORD PTR _tmod$2[esp+52]
	push	eax
	push	esi
	push	0
	push	esi
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$27
; Line 439
	cmp	DWORD PTR [esi+4], ebp
	jle	SHORT $LN22@BN_MONT_CT
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN23@BN_MONT_CT
$LN22@BN_MONT_CT:
	xor	eax, eax
$LN23@BN_MONT_CT:
	mov	ebx, DWORD PTR _mont$[esp+44]
	mov	DWORD PTR [ebx+64], eax
; Line 440
	cmp	DWORD PTR [esi+4], 1
	jle	SHORT $LN24@BN_MONT_CT
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $LN25@BN_MONT_CT
$LN24@BN_MONT_CT:
	xor	eax, eax
$LN25@BN_MONT_CT:
; Line 493
	push	0
	lea	esi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx+68], eax
	push	esi
	call	_BN_set_word
; Line 494
	mov	eax, DWORD PTR [ebx]
	add	eax, eax
	push	eax
	push	esi
	call	_BN_set_bit
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$27
; Line 496
	push	edi
	lea	eax, DWORD PTR [ebx+24]
	push	eax
	push	esi
	push	esi
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	cmovne	ebp, DWORD PTR tv310[esp+48]
$err$27:
; Line 501
	push	edi
	call	_BN_CTX_end
	add	esp, 4
; Line 502
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 503
	add	esp, 32					; 00000020H
	ret	0
_BN_MONT_CTX_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_MONT_CTX_free
_TEXT	SEGMENT
_mont$ = 8						; size = 4
_BN_MONT_CTX_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 360
	push	esi
; Line 361
	mov	esi, DWORD PTR _mont$[esp]
	test	esi, esi
	je	SHORT $LN3@BN_MONT_CT
; Line 364
	lea	eax, DWORD PTR [esi+4]
	push	eax
	call	_BN_clear_free
; Line 365
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_clear_free
; Line 366
	lea	eax, DWORD PTR [esi+44]
	push	eax
	call	_BN_clear_free
	add	esp, 12					; 0000000cH
; Line 367
	test	BYTE PTR [esi+72], 1
	je	SHORT $LN3@BN_MONT_CT
; Line 368
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN3@BN_MONT_CT:
	pop	esi
; Line 369
	ret	0
_BN_MONT_CTX_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_from_montgomery
_TEXT	SEGMENT
_ret$ = 8						; size = 4
_a$ = 12						; size = 4
_mont$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_from_montgomery PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 292
	push	ebx
	push	esi
; Line 297
	mov	esi, DWORD PTR _ctx$[esp+4]
	xor	ebx, ebx
	push	edi
	push	esi
	call	_BN_CTX_start
; Line 298
	push	esi
	call	_BN_CTX_get
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN2@BN_from_mo
	push	DWORD PTR _a$[esp+8]
	push	edi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@BN_from_mo
; Line 299
	push	DWORD PTR _mont$[esp+8]
	push	edi
	push	DWORD PTR _ret$[esp+16]
	call	_BN_from_montgomery_word
	add	esp, 12					; 0000000cH
	mov	ebx, eax
$LN2@BN_from_mo:
; Line 300
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 334
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 335
	ret	0
_BN_from_montgomery ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_mul_montgomery
_TEXT	SEGMENT
_ret$1$ = -8						; size = 4
_tmp$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_mont$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_mod_mul_montgomery PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 131
	mov	eax, 8
	call	__chkstk
; Line 135
	mov	ecx, DWORD PTR _mont$[esp+4]
	push	ebx
; Line 137
	mov	ebx, DWORD PTR _a$[esp+8]
	push	ebp
	mov	ebp, DWORD PTR _b$[esp+12]
	push	esi
	mov	esi, DWORD PTR [ecx+28]
	mov	DWORD PTR _ret$1$[esp+20], 0
	push	edi
	mov	edi, DWORD PTR _r$[esp+20]
	cmp	esi, 1
	jle	$LN7@BN_mod_mul
	cmp	DWORD PTR [ebx+4], esi
	jne	SHORT $LN7@BN_mod_mul
	cmp	DWORD PTR [ebp+4], esi
	jne	SHORT $LN7@BN_mod_mul
; Line 138
	cmp	esi, DWORD PTR [edi+8]
	jg	SHORT $LN17@BN_mod_mul
	mov	eax, edi
	jmp	SHORT $LN18@BN_mod_mul
$LN17@BN_mod_mul:
	push	esi
	push	edi
	call	_bn_expand2
	mov	ecx, DWORD PTR _mont$[esp+28]
	add	esp, 8
$LN18@BN_mod_mul:
	test	eax, eax
	jne	SHORT $LN6@BN_mod_mul
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 175
	add	esp, 8
	ret	0
$LN6@BN_mod_mul:
; Line 140
	push	esi
	lea	eax, DWORD PTR [ecx+64]
	push	eax
	push	DWORD PTR [ecx+24]
	push	DWORD PTR [ebp]
	push	DWORD PTR [ebx]
	push	DWORD PTR [edi]
	call	_bn_mul_mont
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN7@BN_mod_mul
; Line 141
	mov	eax, DWORD PTR [ebx+12]
	xor	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR [edi+12], eax
; Line 142
	mov	DWORD PTR [edi+4], esi
; Line 143
	test	esi, esi
	jle	SHORT $LN8@BN_mod_mul
	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR [esi-1]
	lea	ecx, DWORD PTR [eax+ecx*4]
$LL4@BN_mod_mul:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN20@BN_mod_mul
	dec	esi
	test	esi, esi
	jg	SHORT $LL4@BN_mod_mul
$LN20@BN_mod_mul:
	mov	DWORD PTR [edi+4], esi
$LN8@BN_mod_mul:
	pop	edi
	pop	esi
	pop	ebp
; Line 144
	mov	eax, 1
	pop	ebx
; Line 175
	add	esp, 8
	ret	0
$LN7@BN_mod_mul:
; Line 149
	mov	esi, DWORD PTR _ctx$[esp+20]
	push	esi
	call	_BN_CTX_start
; Line 150
	push	esi
	call	_BN_CTX_get
	add	esp, 8
	mov	DWORD PTR _tmp$1$[esp+24], eax
; Line 151
	test	eax, eax
	je	SHORT $err$27
; Line 156
	push	esi
	cmp	ebx, ebp
	jne	SHORT $LN11@BN_mod_mul
	push	ebx
	push	eax
	call	_BN_sqr
	add	esp, 12					; 0000000cH
; Line 158
	jmp	SHORT $LN25@BN_mod_mul
$LN11@BN_mod_mul:
; Line 159
	push	ebp
	push	ebx
	push	eax
	call	_BN_mul
	add	esp, 16					; 00000010H
$LN25@BN_mod_mul:
	test	eax, eax
	je	SHORT $err$27
; Line 164
	push	DWORD PTR _mont$[esp+20]
	push	DWORD PTR _tmp$1$[esp+28]
	push	edi
	call	_BN_from_montgomery_word
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+24], ecx
$err$27:
; Line 173
	push	esi
	call	_BN_CTX_end
; Line 174
	mov	eax, DWORD PTR _ret$1$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 175
	add	esp, 8
	ret	0
_BN_mod_mul_montgomery ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_MONT_CTX_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_BN_MONT_CTX_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 350
	push	esi
; Line 351
	mov	esi, DWORD PTR _ctx$[esp]
; Line 352
	lea	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], 0
	push	eax
	call	_BN_init
; Line 353
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_init
; Line 354
	lea	eax, DWORD PTR [esi+44]
	push	eax
	call	_BN_init
	add	esp, 12					; 0000000cH
; Line 355
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+64], 0
; Line 356
	mov	DWORD PTR [esi+72], 0
	pop	esi
; Line 357
	ret	0
_BN_MONT_CTX_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_MONT_CTX_new
_TEXT	SEGMENT
_BN_MONT_CTX_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mont.c
; Line 338
	push	esi
; Line 341
	push	341					; 00000155H
	push	OFFSET ??_C@_0BG@OIKAEECI@?4?2crypto?2bn?2bn_mont?4c?$AA@
	push	76					; 0000004cH
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN2@BN_MONT_CT
	pop	esi
; Line 347
	ret	0
$LN2@BN_MONT_CT:
; Line 352
	lea	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], 0
	push	eax
	call	_BN_init
; Line 353
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_BN_init
; Line 354
	lea	eax, DWORD PTR [esi+44]
	push	eax
	call	_BN_init
	add	esp, 12					; 0000000cH
; Line 355
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+64], 0
; Line 346
	mov	eax, esi
	mov	DWORD PTR [esi+72], 1
	pop	esi
; Line 347
	ret	0
_BN_MONT_CTX_new ENDP
_TEXT	ENDS
END
