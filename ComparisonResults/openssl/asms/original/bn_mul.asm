; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_mul
PUBLIC	_bn_mul_normal
PUBLIC	_bn_mul_recursive
PUBLIC	_bn_mul_part_recursive
PUBLIC	_bn_mul_low_normal
PUBLIC	_bn_mul_low_recursive
PUBLIC	_bn_mul_high
PUBLIC	_bn_add_part_words
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits_word:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_bn_mul_add_words:PROC
EXTRN	_bn_mul_words:PROC
EXTRN	_bn_add_words:PROC
EXTRN	_bn_sub_words:PROC
EXTRN	_bn_mul_comba8:PROC
EXTRN	_bn_mul_comba4:PROC
EXTRN	_bn_cmp_words:PROC
EXTRN	_bn_cmp_part_words:PROC
EXTRN	_bn_sub_part_words:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_add_part_words
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_cl$ = 20						; size = 4
_dl$ = 24						; size = 4
_bn_add_part_words PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 229
	push	ebx
; Line 233
	mov	ebx, DWORD PTR _b$[esp]
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+4]
	push	esi
	mov	esi, DWORD PTR _r$[esp+8]
	push	edi
	mov	edi, DWORD PTR _cl$[esp+12]
	push	edi
	push	ebx
	push	ebp
	push	esi
	call	_bn_add_words
; Line 235
	mov	ecx, DWORD PTR _dl$[esp+28]
	add	esp, 16					; 00000010H
	mov	edx, eax
	test	ecx, ecx
	je	$LN1@bn_add_par
; Line 238
	lea	eax, DWORD PTR [edi*4]
	add	esi, eax
; Line 239
	add	ebp, eax
; Line 240
	add	ebx, eax
; Line 242
	test	ecx, ecx
	jns	$LN17@bn_add_par
; Line 248
	test	edx, edx
	je	SHORT $LN58@bn_add_par
$LL2@bn_add_par:
; Line 249
	mov	eax, DWORD PTR [ebx]
	add	eax, edx
; Line 250
	cmp	eax, edx
; Line 251
	mov	DWORD PTR [esi], eax
	sbb	edx, edx
	neg	edx
; Line 252
	add	ecx, 1
	jns	$LN87@bn_add_par
; Line 255
	mov	eax, DWORD PTR [ebx+4]
	add	eax, edx
; Line 256
	cmp	eax, edx
; Line 257
	mov	DWORD PTR [esi+4], eax
	sbb	edx, edx
	neg	edx
; Line 258
	add	ecx, 1
	jns	$LN87@bn_add_par
; Line 261
	mov	eax, DWORD PTR [ebx+8]
	add	eax, edx
; Line 262
	cmp	eax, edx
; Line 263
	mov	DWORD PTR [esi+8], eax
	sbb	edx, edx
	neg	edx
; Line 264
	add	ecx, 1
	jns	$LN87@bn_add_par
; Line 267
	mov	eax, DWORD PTR [ebx+12]
	add	eax, edx
; Line 268
	cmp	eax, edx
; Line 269
	mov	DWORD PTR [esi+12], eax
	sbb	edx, edx
	neg	edx
; Line 270
	add	ecx, 1
	jns	$LN87@bn_add_par
; Line 274
	add	ebx, 16					; 00000010H
; Line 275
	add	esi, 16					; 00000010H
	test	edx, edx
	jne	SHORT $LL2@bn_add_par
$LN58@bn_add_par:
; Line 308
	add	ecx, 1
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
	jns	$LN87@bn_add_par
	lea	ebp, DWORD PTR [ebx+8]
	sub	ebx, esi
	lea	edi, DWORD PTR [esi+8]
$LL6@bn_add_par:
; Line 311
	add	ecx, 1
	mov	eax, DWORD PTR [ebp-4]
	mov	DWORD PTR [edi-4], eax
	jns	$LN87@bn_add_par
; Line 314
	add	ecx, 1
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
	jns	$LN87@bn_add_par
; Line 317
	add	ecx, 1
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [edi+4], eax
	jns	$LN87@bn_add_par
; Line 320
	mov	eax, DWORD PTR [ebx+edi+8]
	add	edi, 16					; 00000010H
	add	ebp, 16					; 00000010H
	add	ecx, 1
	mov	DWORD PTR [edi-8], eax
	js	SHORT $LL6@bn_add_par
; Line 406
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx
; Line 407
	ret	0
$LN17@bn_add_par:
; Line 329
	test	edx, edx
	je	SHORT $LN66@bn_add_par
	npad	7
$LL9@bn_add_par:
; Line 330
	mov	eax, DWORD PTR [ebp]
	add	eax, edx
; Line 331
	cmp	eax, edx
; Line 332
	mov	DWORD PTR [esi], eax
	sbb	edx, edx
; Line 333
	dec	ecx
	neg	edx
	test	ecx, ecx
	jle	$LN87@bn_add_par
; Line 336
	mov	eax, DWORD PTR [ebp+4]
	add	eax, edx
; Line 337
	cmp	eax, edx
; Line 338
	mov	DWORD PTR [esi+4], eax
	sbb	edx, edx
; Line 339
	dec	ecx
	neg	edx
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 342
	mov	eax, DWORD PTR [ebp+8]
	add	eax, edx
; Line 343
	cmp	eax, edx
; Line 344
	mov	DWORD PTR [esi+8], eax
	sbb	edx, edx
; Line 345
	dec	ecx
	neg	edx
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 348
	mov	eax, DWORD PTR [ebp+12]
	add	eax, edx
; Line 349
	cmp	eax, edx
; Line 350
	mov	DWORD PTR [esi+12], eax
	sbb	edx, edx
; Line 351
	dec	ecx
	neg	edx
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 355
	add	ebp, 16					; 00000010H
; Line 356
	add	esi, 16					; 00000010H
	test	edx, edx
	jne	SHORT $LL9@bn_add_par
$LN66@bn_add_par:
; Line 362
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 388
	mov	eax, DWORD PTR [ebp]
; Line 389
	dec	ecx
	mov	DWORD PTR [esi], eax
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
	lea	ebx, DWORD PTR [ebp+8]
	sub	ebp, esi
	lea	edi, DWORD PTR [esi+8]
	npad	1
$LL13@bn_add_par:
; Line 391
	mov	eax, DWORD PTR [ebx-4]
; Line 392
	dec	ecx
	mov	DWORD PTR [edi-4], eax
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 394
	mov	eax, DWORD PTR [ebx]
; Line 395
	dec	ecx
	mov	DWORD PTR [edi], eax
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 397
	mov	eax, DWORD PTR [ebx+4]
; Line 398
	dec	ecx
	mov	DWORD PTR [edi+4], eax
	test	ecx, ecx
	jle	SHORT $LN87@bn_add_par
; Line 401
	mov	eax, DWORD PTR [edi+ebp+8]
	add	edi, 16					; 00000010H
	dec	ecx
	add	ebx, 16					; 00000010H
	mov	DWORD PTR [edi-8], eax
	test	ecx, ecx
	jg	SHORT $LL13@bn_add_par
$LN87@bn_add_par:
; Line 406
	mov	eax, edx
$LN1@bn_add_par:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 407
	ret	0
_bn_add_part_words ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_mul_high
_TEXT	SEGMENT
tv862 = -20						; size = 4
tv863 = -16						; size = 4
_neg$1$ = -12						; size = 4
_n$1$ = -8						; size = 4
tv864 = -4						; size = 4
_r$ = 8							; size = 4
_i$1$ = 12						; size = 4
tv850 = 12						; size = 4
_lp$3$ = 12						; size = 4
_a$ = 12						; size = 4
_lp$2$ = 16						; size = 4
_lp$1$ = 16						; size = 4
_b$ = 16						; size = 4
tv853 = 20						; size = 4
_l$ = 20						; size = 4
_n2$ = 24						; size = 4
_t$ = 28						; size = 4
_bn_mul_high PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 770
	mov	eax, 20					; 00000014H
	call	__chkstk
; Line 779
	mov	eax, DWORD PTR _n2$[esp+16]
	push	ebx
	push	ebp
	cdq
	sub	eax, edx
; Line 782
	mov	DWORD PTR _neg$1$[esp+28], 0
	mov	ebp, eax
; Line 783
	mov	eax, DWORD PTR _a$[esp+24]
	sar	ebp, 1
	push	esi
	push	edi
	push	ebp
	lea	ebx, DWORD PTR [ebp*4]
	mov	DWORD PTR _n$1$[esp+40], ebp
	lea	ecx, DWORD PTR [ebx+eax]
	mov	DWORD PTR tv864[esp+40], ebx
	push	ecx
	push	eax
	mov	DWORD PTR tv863[esp+48], ecx
	call	_bn_cmp_words
	mov	esi, eax
; Line 784
	mov	eax, DWORD PTR _b$[esp+44]
	push	ebp
	push	eax
	lea	ecx, DWORD PTR [ebx+eax]
	push	ecx
	mov	DWORD PTR tv862[esp+60], ecx
	call	_bn_cmp_words
; Line 785
	mov	edi, DWORD PTR _r$[esp+56]
	lea	ecx, DWORD PTR [esi+esi*2]
	add	eax, 4
	add	esp, 24					; 00000018H
	add	eax, ecx
	cmp	eax, 8
	ja	$LN2@bn_mul_hig
	jmp	DWORD PTR $LN75@bn_mul_hig[eax*4]
$LN19@bn_mul_hig:
; Line 787
	push	ebp
	push	DWORD PTR _a$[esp+36]
	push	DWORD PTR tv863[esp+44]
	push	edi
	call	_bn_sub_words
; Line 788
	push	ebp
	push	DWORD PTR tv862[esp+56]
	push	DWORD PTR _b$[esp+56]
; Line 789
	jmp	SHORT $LN70@bn_mul_hig
$LN21@bn_mul_hig:
; Line 794
	push	ebp
	push	DWORD PTR _a$[esp+36]
	push	DWORD PTR tv863[esp+44]
	push	edi
	call	_bn_sub_words
; Line 795
	push	ebp
	push	DWORD PTR _b$[esp+52]
	push	DWORD PTR tv862[esp+60]
$LN72@bn_mul_hig:
	lea	eax, DWORD PTR [ebx+edi]
	push	eax
	call	_bn_sub_words
; Line 796
	mov	DWORD PTR _neg$1$[esp+68], 1
; Line 797
	jmp	SHORT $LN71@bn_mul_hig
$LN23@bn_mul_hig:
; Line 804
	push	ebp
	push	DWORD PTR tv863[esp+40]
	push	DWORD PTR _a$[esp+40]
	push	edi
	call	_bn_sub_words
; Line 805
	push	ebp
	push	DWORD PTR tv862[esp+56]
	push	DWORD PTR _b$[esp+56]
; Line 807
	jmp	SHORT $LN72@bn_mul_hig
$LN25@bn_mul_hig:
; Line 812
	push	ebp
	push	DWORD PTR tv863[esp+40]
	push	DWORD PTR _a$[esp+40]
	push	edi
	call	_bn_sub_words
; Line 813
	push	ebp
	push	DWORD PTR _b$[esp+52]
	push	DWORD PTR tv862[esp+60]
$LN70@bn_mul_hig:
	lea	eax, DWORD PTR [ebx+edi]
	push	eax
	call	_bn_sub_words
$LN71@bn_mul_hig:
	add	esp, 32					; 00000020H
$LN2@bn_mul_hig:
; Line 821
	cmp	ebp, 8
	jne	SHORT $LN26@bn_mul_hig
; Line 822
	mov	esi, DWORD PTR _t$[esp+32]
	lea	eax, DWORD PTR [edi+32]
	push	eax
	push	edi
	push	esi
	call	_bn_mul_comba8
; Line 823
	mov	eax, DWORD PTR _b$[esp+44]
	add	eax, 32					; 00000020H
	push	eax
	mov	eax, DWORD PTR _a$[esp+48]
	add	eax, 32					; 00000020H
	push	eax
	push	edi
	call	_bn_mul_comba8
	add	esp, 24					; 00000018H
; Line 824
	jmp	SHORT $LN27@bn_mul_hig
$LN26@bn_mul_hig:
; Line 827
	mov	ecx, DWORD PTR _t$[esp+32]
	mov	eax, DWORD PTR _n2$[esp+32]
	lea	esi, DWORD PTR [ecx+eax*4]
	push	esi
	push	0
	push	0
	push	ebp
	lea	eax, DWORD PTR [ebx+edi]
	push	eax
	push	edi
	push	ecx
	call	_bn_mul_recursive
; Line 828
	push	esi
	push	0
	push	0
	push	ebp
	push	DWORD PTR tv862[esp+80]
	push	DWORD PTR tv863[esp+84]
	push	edi
	call	_bn_mul_recursive
	mov	esi, DWORD PTR _t$[esp+88]
	add	esp, 56					; 00000038H
$LN27@bn_mul_hig:
; Line 838
	mov	ecx, DWORD PTR _l$[esp+32]
; Line 839
	mov	ebx, DWORD PTR _n2$[esp+32]
	test	ecx, ecx
	je	SHORT $LN28@bn_mul_hig
; Line 840
	push	ebp
	push	ecx
	lea	eax, DWORD PTR [ebx+ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	push	edi
	push	eax
	mov	DWORD PTR _lp$1$[esp+48], eax
	call	_bn_add_words
; Line 841
	mov	eax, DWORD PTR _lp$1$[esp+48]
	add	esp, 16					; 00000010H
	jmp	SHORT $LN29@bn_mul_hig
$LN28@bn_mul_hig:
; Line 843
	mov	eax, edi
$LN29@bn_mul_hig:
; Line 846
	cmp	DWORD PTR _neg$1$[esp+36], 0
; Line 847
	lea	ebx, DWORD PTR [esi+ebx*4]
	push	ebp
	push	esi
	push	eax
	push	ebx
	je	SHORT $LN30@bn_mul_hig
	call	_bn_sub_words
	jmp	SHORT $LN73@bn_mul_hig
$LN30@bn_mul_hig:
; Line 849
	call	_bn_add_words
$LN73@bn_mul_hig:
; Line 854
	mov	eax, DWORD PTR _n2$[esp+48]
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _l$[esp+32]
	add	eax, ebp
	test	edx, edx
	je	SHORT $LN32@bn_mul_hig
	lea	ecx, DWORD PTR [esi+eax*4]
	push	ebp
	push	ebx
	lea	eax, DWORD PTR [edx+ebp*4]
	mov	DWORD PTR _lp$2$[esp+40], ecx
	push	eax
	push	ecx
	call	_bn_sub_words
; Line 880
	push	ebp
	push	DWORD PTR _l$[esp+52]
	mov	eax, ebx
	push	DWORD PTR _lp$2$[esp+56]
	mov	DWORD PTR _lp$3$[esp+60], eax
	push	eax
	call	_bn_add_words
; Line 881
	mov	edx, DWORD PTR _lp$3$[esp+64]
	add	esp, 32					; 00000020H
	mov	ebx, eax
	jmp	$LN35@bn_mul_hig
$LN32@bn_mul_hig:
; Line 858
	xor	ecx, ecx
	lea	edx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR _lp$2$[esp+32], edx
	mov	DWORD PTR _i$1$[esp+32], ecx
	test	ebp, ebp
	jle	$LN34@bn_mul_hig
	cmp	ebp, 8
	jb	$LN54@bn_mul_hig
; Line 859
	lea	eax, DWORD PTR [ebp-1]
	mov	DWORD PTR _i$1$[esp+32], ecx
	lea	eax, DWORD PTR [ebx+eax*4]
	cmp	edx, eax
	ja	SHORT $LN55@bn_mul_hig
	lea	eax, DWORD PTR [ebp-1]
	lea	eax, DWORD PTR [edx+eax*4]
	cmp	eax, ebx
	jae	SHORT $LN54@bn_mul_hig
$LN55@bn_mul_hig:
	mov	eax, ebp
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN69@bn_mul_hig
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN69@bn_mul_hig:
	movaps	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	mov	edi, ebp
; Line 858
	movups	xmm2, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	sub	edi, eax
	lea	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR tv853[esp+32], edi
	mov	edi, edx
	sub	edi, ebx
	mov	DWORD PTR tv850[esp+32], edi
	mov	edi, edx
	mov	esi, DWORD PTR tv850[esp+32]
$LL6@bn_mul_hig:
; Line 859
	movups	xmm0, XMMWORD PTR [eax-16]
	add	ecx, 8
	lea	edi, DWORD PTR [edi+32]
	lea	eax, DWORD PTR [eax+32]
	pandn	xmm0, xmm2
	paddd	xmm0, xmm1
	movups	XMMWORD PTR [edi-32], xmm0
	movups	xmm0, XMMWORD PTR [eax-32]
	pandn	xmm0, xmm2
	paddd	xmm0, xmm1
	movups	XMMWORD PTR [esi+eax-32], xmm0
	cmp	ecx, DWORD PTR tv853[esp+32]
	jl	SHORT $LL6@bn_mul_hig
	mov	edi, DWORD PTR _r$[esp+32]
	mov	esi, DWORD PTR _t$[esp+32]
	mov	DWORD PTR _i$1$[esp+32], ecx
$LN54@bn_mul_hig:
; Line 858
	cmp	ecx, ebp
	jge	SHORT $LN34@bn_mul_hig
	lea	ecx, DWORD PTR [edx+ecx*4]
	sub	ebx, edx
	mov	edx, ebp
	sub	edx, DWORD PTR _i$1$[esp+32]
$LL53@bn_mul_hig:
; Line 859
	mov	eax, DWORD PTR [ebx+ecx]
	lea	ecx, DWORD PTR [ecx+4]
	not	eax
	inc	eax
	mov	DWORD PTR [ecx-4], eax
	sub	edx, 1
	jne	SHORT $LL53@bn_mul_hig
	mov	edx, DWORD PTR _lp$2$[esp+32]
$LN34@bn_mul_hig:
; Line 883
	xor	ebx, ebx
$LN35@bn_mul_hig:
; Line 885
	mov	ecx, DWORD PTR _n2$[esp+32]
	push	ebp
	push	edi
	push	edx
	lea	eax, DWORD PTR [esi+ecx*4]
	push	eax
	call	_bn_add_words
; Line 887
	mov	ecx, DWORD PTR _n2$[esp+48]
	add	esp, 16					; 00000010H
	add	ebx, eax
	cmp	DWORD PTR _neg$1$[esp+36], 0
	push	ebp
	push	esi
	lea	eax, DWORD PTR [esi+ecx*4]
	push	eax
	push	eax
	je	SHORT $LN36@bn_mul_hig
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	sub	ebx, eax
	jmp	SHORT $LN37@bn_mul_hig
$LN36@bn_mul_hig:
; Line 889
	call	_bn_add_words
	add	esp, 16					; 00000010H
	add	ebx, eax
$LN37@bn_mul_hig:
; Line 891
	push	ebp
	push	DWORD PTR _lp$2$[esp+36]
	push	edi
	push	edi
	call	_bn_add_words
; Line 892
	push	DWORD PTR _n$1$[esp+52]
	lea	ebp, DWORD PTR [edi+ebp*4]
	mov	esi, eax
	push	ebp
	push	edi
	push	edi
	call	_bn_add_words
	add	esp, 32					; 00000020H
	add	esi, eax
; Line 894
	mov	eax, DWORD PTR tv864[esp+36]
	add	eax, DWORD PTR _t$[esp+32]
	cmp	DWORD PTR _neg$1$[esp+36], 0
	push	DWORD PTR _n$1$[esp+36]
	push	eax
	push	edi
	push	edi
	je	SHORT $LN38@bn_mul_hig
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	sub	esi, eax
	jmp	SHORT $LN39@bn_mul_hig
$LN38@bn_mul_hig:
; Line 896
	call	_bn_add_words
	add	esp, 16					; 00000010H
	add	esi, eax
$LN39@bn_mul_hig:
; Line 898
	test	ebx, ebx
	je	SHORT $LN11@bn_mul_hig
; Line 900
	jle	SHORT $LN41@bn_mul_hig
	npad	7
$LL9@bn_mul_hig:
; Line 903
	mov	eax, DWORD PTR [edi]
; Line 904
	lea	edi, DWORD PTR [edi+4]
	add	eax, ebx
; Line 905
	cmp	eax, ebx
	mov	DWORD PTR [edi-4], eax
	sbb	ebx, ebx
	neg	ebx
; Line 906
	jne	SHORT $LL9@bn_mul_hig
; Line 907
	jmp	SHORT $LN11@bn_mul_hig
$LN41@bn_mul_hig:
; Line 908
	neg	ebx
$LL12@bn_mul_hig:
; Line 910
	mov	ecx, DWORD PTR [edi]
; Line 911
	lea	edi, DWORD PTR [edi+4]
	mov	eax, ecx
	sub	eax, ebx
; Line 912
	cmp	ecx, ebx
	mov	DWORD PTR [edi-4], eax
	sbb	ebx, ebx
	neg	ebx
; Line 913
	jne	SHORT $LL12@bn_mul_hig
$LN11@bn_mul_hig:
; Line 916
	test	esi, esi
	je	SHORT $LN17@bn_mul_hig
; Line 918
	jle	SHORT $LN44@bn_mul_hig
$LL15@bn_mul_hig:
; Line 921
	mov	eax, DWORD PTR [ebp]
; Line 922
	lea	ebp, DWORD PTR [ebp+4]
	add	eax, esi
; Line 923
	cmp	eax, esi
	mov	DWORD PTR [ebp-4], eax
	sbb	esi, esi
	neg	esi
; Line 924
	jne	SHORT $LL15@bn_mul_hig
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 934
	add	esp, 20					; 00000014H
	ret	0
$LN44@bn_mul_hig:
; Line 926
	neg	esi
	npad	3
$LL18@bn_mul_hig:
; Line 928
	mov	ecx, DWORD PTR [ebp]
; Line 929
	lea	ebp, DWORD PTR [ebp+4]
	mov	eax, ecx
	sub	eax, esi
; Line 930
	cmp	ecx, esi
	mov	DWORD PTR [ebp-4], eax
	sbb	esi, esi
	neg	esi
; Line 931
	jne	SHORT $LL18@bn_mul_hig
$LN17@bn_mul_hig:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 934
	add	esp, 20					; 00000014H
	ret	0
	npad	3
$LN75@bn_mul_hig:
	DD	$LN19@bn_mul_hig
	DD	$LN2@bn_mul_hig
	DD	$LN21@bn_mul_hig
	DD	$LN2@bn_mul_hig
	DD	$LN2@bn_mul_hig
	DD	$LN2@bn_mul_hig
	DD	$LN23@bn_mul_hig
	DD	$LN2@bn_mul_hig
	DD	$LN25@bn_mul_hig
_bn_mul_high ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_mul_low_recursive
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_n2$ = 20						; size = 4
_t$ = 24						; size = 4
_bn_mul_low_recursive PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 742
	mov	eax, DWORD PTR _n2$[esp-4]
	push	ebx
	push	ebp
; Line 748
	mov	ebp, DWORD PTR _t$[esp+4]
	push	esi
	mov	esi, DWORD PTR _b$[esp+8]
	push	edi
	mov	edi, DWORD PTR _a$[esp+12]
	push	ebp
	cdq
	push	0
	sub	eax, edx
	mov	ebx, eax
	push	0
	sar	ebx, 1
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _r$[esp+36]
	call	_bn_mul_recursive
	add	esp, 28					; 0000001cH
; Line 749
	cmp	ebx, 32					; 00000020H
	jl	SHORT $LN2@bn_mul_low
; Line 750
	mov	eax, DWORD PTR _n2$[esp+12]
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR _b$[esp+12]
	add	esi, ebp
	push	esi
	push	ebx
	lea	eax, DWORD PTR [eax+ebx*4]
	push	eax
	push	edi
	push	ebp
	call	_bn_mul_low_recursive
; Line 751
	mov	eax, DWORD PTR _r$[esp+32]
	push	ebx
	push	ebp
	lea	edi, DWORD PTR [eax+ebx*4]
	push	edi
	push	edi
	call	_bn_add_words
; Line 752
	mov	eax, DWORD PTR _a$[esp+48]
	push	esi
	push	ebx
	push	DWORD PTR _b$[esp+56]
	lea	eax, DWORD PTR [eax+ebx*4]
	push	eax
	push	ebp
	call	_bn_mul_low_recursive
; Line 753
	push	ebx
	push	ebp
	push	edi
	push	edi
	call	_bn_add_words
	add	esp, 72					; 00000048H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 760
	ret	0
$LN2@bn_mul_low:
; Line 755
	push	ebx
	lea	eax, DWORD PTR [esi+ebx*4]
	push	eax
	push	edi
	push	ebp
	call	_bn_mul_low_normal
; Line 756
	mov	eax, DWORD PTR _a$[esp+28]
	lea	edi, DWORD PTR [ebx*4]
	push	ebx
	push	esi
	add	edi, ebp
	lea	eax, DWORD PTR [eax+ebx*4]
	push	eax
	push	edi
	call	_bn_mul_low_normal
; Line 757
	mov	eax, DWORD PTR _r$[esp+44]
	push	ebx
	push	ebp
	lea	esi, DWORD PTR [eax+ebx*4]
	push	esi
	push	esi
	call	_bn_add_words
; Line 758
	push	ebx
	push	edi
	push	esi
	push	esi
	call	_bn_add_words
	add	esp, 64					; 00000040H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 760
	ret	0
_bn_mul_low_recursive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_mul_low_normal
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_n$ = 20						; size = 4
_bn_mul_low_normal PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 1142
	push	ebx
; Line 1146
	mov	ebx, DWORD PTR _r$[esp]
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+4]
	push	esi
	mov	esi, DWORD PTR _n$[esp+8]
	push	edi
	mov	edi, DWORD PTR _b$[esp+12]
	push	DWORD PTR [edi]
	push	esi
	push	ebp
	push	ebx
	call	_bn_mul_words
; Line 1149
	dec	esi
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN19@bn_mul_low
; Line 1146
	add	edi, 8
	add	ebx, 8
	npad	4
$LL2@bn_mul_low:
; Line 1151
	push	DWORD PTR [edi-4]
	lea	eax, DWORD PTR [ebx-4]
	push	esi
	push	ebp
	push	eax
	call	_bn_mul_add_words
; Line 1152
	dec	esi
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN19@bn_mul_low
; Line 1154
	push	DWORD PTR [edi]
	push	esi
	push	ebp
	push	ebx
	call	_bn_mul_add_words
; Line 1155
	dec	esi
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN19@bn_mul_low
; Line 1157
	push	DWORD PTR [edi+4]
	lea	eax, DWORD PTR [ebx+4]
	push	esi
	push	ebp
	push	eax
	call	_bn_mul_add_words
; Line 1158
	dec	esi
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN19@bn_mul_low
; Line 1160
	push	DWORD PTR [edi+8]
	lea	eax, DWORD PTR [ebx+8]
	push	esi
	push	ebp
	push	eax
	call	_bn_mul_add_words
	dec	esi
	add	esp, 16					; 00000010H
; Line 1162
	add	edi, 16					; 00000010H
	add	ebx, 16					; 00000010H
	test	esi, esi
	jg	SHORT $LL2@bn_mul_low
$LN19@bn_mul_low:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1164
	ret	0
_bn_mul_low_normal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_mul_part_recursive
_TEXT	SEGMENT
tv496 = -24						; size = 4
tv487 = -20						; size = 4
tv481 = -20						; size = 4
tv495 = -16						; size = 4
_p$1$ = -16						; size = 4
tv498 = -12						; size = 4
tv484 = -12						; size = 4
_neg$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
tv493 = 20						; size = 4
_n$ = 20						; size = 4
_tna$ = 24						; size = 4
_tnb$ = 28						; size = 4
_t$ = 32						; size = 4
_bn_mul_part_recursive PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 579
	mov	eax, 24					; 00000018H
	call	__chkstk
	push	ebp
; Line 580
	mov	ebp, DWORD PTR _n$[esp+24]
; Line 588
	cmp	ebp, 8
	jge	SHORT $LN10@bn_mul_par
; Line 589
	mov	eax, DWORD PTR _tnb$[esp+24]
	add	eax, ebp
	push	eax
	push	DWORD PTR _b$[esp+28]
	mov	eax, DWORD PTR _tna$[esp+32]
	add	eax, ebp
	push	eax
	push	DWORD PTR _a$[esp+36]
	push	DWORD PTR _r$[esp+40]
	call	_bn_mul_normal
	add	esp, 20					; 00000014H
	pop	ebp
; Line 733
	add	esp, 24					; 00000018H
	ret	0
$LN10@bn_mul_par:
; Line 594
	mov	eax, DWORD PTR _a$[esp+24]
	mov	edx, ebp
	push	ebx
	mov	ebx, DWORD PTR _tna$[esp+28]
	sub	edx, ebx
	push	esi
	push	edi
	push	edx
	lea	ecx, DWORD PTR [eax+ebp*4]
	mov	DWORD PTR tv498[esp+44], edx
	push	ebx
	push	ecx
	push	eax
	mov	DWORD PTR tv496[esp+56], ecx
	call	_bn_cmp_part_words
; Line 595
	mov	edi, DWORD PTR _tnb$[esp+52]
	mov	esi, eax
	mov	eax, DWORD PTR _b$[esp+52]
	mov	edx, edi
	sub	edx, ebp
; Line 596
	mov	DWORD PTR _neg$1$[esp+56], 0
	push	edx
	push	edi
	lea	ecx, DWORD PTR [eax+ebp*4]
	mov	DWORD PTR tv495[esp+64], edx
	push	eax
	push	ecx
	mov	DWORD PTR tv493[esp+68], ecx
	call	_bn_cmp_part_words
; Line 597
	lea	ecx, DWORD PTR [esi+esi*2]
	add	eax, 4
	mov	esi, DWORD PTR _t$[esp+68]
	add	eax, ecx
	add	esp, 32					; 00000020H
	cmp	eax, 8
	ja	$LN2@bn_mul_par
	jmp	DWORD PTR $LN55@bn_mul_par[eax*4]
$LN11@bn_mul_par:
; Line 599
	mov	eax, ebx
	sub	eax, ebp
	push	eax
	push	ebx
	push	DWORD PTR _a$[esp+44]
	push	DWORD PTR tv496[esp+52]
	push	esi
	call	_bn_sub_part_words
; Line 600
	mov	eax, ebp
	sub	eax, edi
	push	eax
	push	edi
	push	DWORD PTR tv493[esp+64]
	push	DWORD PTR _b$[esp+68]
; Line 601
	jmp	SHORT $LN46@bn_mul_par
$LN12@bn_mul_par:
; Line 605
	mov	eax, ebx
	sub	eax, ebp
	push	eax
	push	ebx
	push	DWORD PTR _a$[esp+44]
	push	DWORD PTR tv496[esp+52]
	push	esi
	call	_bn_sub_part_words
; Line 606
	push	DWORD PTR tv495[esp+60]
	push	edi
	push	DWORD PTR _b$[esp+64]
	push	DWORD PTR tv493[esp+68]
$LN48@bn_mul_par:
	lea	eax, DWORD PTR [esi+ebp*4]
	push	eax
	call	_bn_sub_part_words
; Line 607
	mov	DWORD PTR _neg$1$[esp+80], 1
; Line 608
	jmp	SHORT $LN47@bn_mul_par
$LN13@bn_mul_par:
; Line 614
	push	DWORD PTR tv498[esp+40]
	push	ebx
	push	DWORD PTR tv496[esp+48]
	push	DWORD PTR _a$[esp+48]
	push	esi
	call	_bn_sub_part_words
; Line 615
	mov	eax, ebp
	sub	eax, edi
	push	eax
	push	edi
	push	DWORD PTR tv493[esp+64]
	push	DWORD PTR _b$[esp+68]
; Line 617
	jmp	SHORT $LN48@bn_mul_par
$LN14@bn_mul_par:
; Line 621
	push	DWORD PTR tv498[esp+40]
	push	ebx
	push	DWORD PTR tv496[esp+48]
	push	DWORD PTR _a$[esp+48]
	push	esi
	call	_bn_sub_part_words
; Line 622
	push	DWORD PTR tv495[esp+60]
	push	edi
	push	DWORD PTR _b$[esp+64]
	push	DWORD PTR tv493[esp+68]
$LN46@bn_mul_par:
	lea	eax, DWORD PTR [esi+ebp*4]
	push	eax
	call	_bn_sub_part_words
$LN47@bn_mul_par:
	add	esp, 40					; 00000028H
$LN2@bn_mul_par:
; Line 638
	lea	eax, DWORD PTR [ebp*2]
	cmp	ebp, 8
	jne	SHORT $LN15@bn_mul_par
	lea	ecx, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [esi+32]
	mov	DWORD PTR tv484[esp+40], ecx
	push	eax
	push	esi
	push	ecx
	call	_bn_mul_comba8
; Line 639
	push	DWORD PTR _b$[esp+48]
	push	DWORD PTR _a$[esp+52]
	push	DWORD PTR _r$[esp+56]
	call	_bn_mul_comba8
; Line 640
	mov	ecx, DWORD PTR _r$[esp+60]
	lea	eax, DWORD PTR [ebp*2]
	push	edi
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _b$[esp+64]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv481[esp+68], ecx
	push	eax
	mov	eax, DWORD PTR _a$[esp+68]
	push	ebx
	add	eax, 32					; 00000020H
	push	eax
	push	ecx
	call	_bn_mul_normal
; Line 641
	lea	ecx, DWORD PTR [ebp*2]
	mov	eax, ecx
	sub	eax, ebx
	sub	eax, edi
	shl	eax, 2
	push	eax
	lea	eax, DWORD PTR [ecx+ebx]
	mov	ecx, DWORD PTR _r$[esp+84]
	add	eax, edi
	push	0
	lea	eax, DWORD PTR [ecx+eax*4]
	push	eax
	call	_memset
; Line 663
	mov	edi, DWORD PTR tv481[esp+96]
	add	esp, 56					; 00000038H
	jmp	$LN5@bn_mul_par
$LN15@bn_mul_par:
; Line 643
	lea	edx, DWORD PTR [esi+eax*8]
; Line 644
	shl	eax, 2
	push	edx
	push	0
	push	0
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR tv487[esp+52], eax
	push	ebp
	lea	eax, DWORD PTR [esi+ebp*4]
	mov	DWORD PTR _p$1$[esp+56], edx
	push	eax
	push	esi
	push	ecx
	mov	DWORD PTR tv484[esp+68], ecx
	call	_bn_mul_recursive
; Line 645
	push	DWORD PTR _p$1$[esp+68]
	push	0
	push	0
	push	ebp
	push	DWORD PTR _b$[esp+80]
	push	DWORD PTR _a$[esp+84]
	push	DWORD PTR _r$[esp+88]
	call	_bn_mul_recursive
; Line 646
	mov	eax, ebp
; Line 653
	mov	ecx, edi
	cdq
	add	esp, 56					; 00000038H
	sub	eax, edx
	mov	edx, eax
	mov	eax, ebx
	sar	edx, 1
	sub	eax, edx
	mov	DWORD PTR _i$1$[esp+40], edx
	sub	ecx, edx
	cmp	ebx, edi
	cmovg	ecx, eax
; Line 654
	test	ecx, ecx
	jne	SHORT $LN49@bn_mul_par
; Line 655
	push	DWORD PTR _p$1$[esp+40]
	mov	eax, DWORD PTR _r$[esp+40]
	sub	edi, edx
	add	eax, DWORD PTR tv487[esp+44]
	sub	ebx, edx
	push	edi
	push	ebx
	push	edx
	push	DWORD PTR tv493[esp+52]
	mov	DWORD PTR tv481[esp+60], eax
	push	DWORD PTR tv496[esp+60]
	push	eax
	call	_bn_mul_recursive
; Line 657
	mov	eax, DWORD PTR _i$1$[esp+68]
	lea	edx, DWORD PTR [ebp*2]
	lea	ecx, DWORD PTR [eax+eax]
	mov	eax, edx
	sub	eax, ecx
	shl	eax, 2
	push	eax
	lea	eax, DWORD PTR [ecx+edx]
	jmp	SHORT $LN53@bn_mul_par
$LN49@bn_mul_par:
; Line 659
	mov	ecx, DWORD PTR tv487[esp+40]
; Line 658
	jle	SHORT $LN21@bn_mul_par
; Line 659
	push	DWORD PTR _p$1$[esp+40]
	add	ecx, DWORD PTR _r$[esp+40]
	mov	eax, edi
	sub	eax, edx
	mov	DWORD PTR tv481[esp+44], ecx
	push	eax
	mov	eax, ebx
	sub	eax, edx
	push	eax
	push	edx
	push	DWORD PTR tv493[esp+52]
	push	DWORD PTR tv496[esp+60]
	push	ecx
	call	_bn_mul_part_recursive
; Line 661
	lea	ecx, DWORD PTR [ebp*2]
	mov	eax, ecx
	sub	eax, ebx
	sub	eax, edi
	shl	eax, 2
	push	eax
	lea	eax, DWORD PTR [ecx+ebx]
	add	eax, edi
$LN53@bn_mul_par:
	mov	ecx, DWORD PTR _r$[esp+68]
	push	0
	lea	eax, DWORD PTR [ecx+eax*4]
	push	eax
	call	_memset
; Line 663
	mov	edi, DWORD PTR tv481[esp+80]
	add	esp, 40					; 00000028H
	jmp	SHORT $LN5@bn_mul_par
$LN21@bn_mul_par:
; Line 665
	mov	eax, DWORD PTR _r$[esp+36]
	push	ecx
	add	eax, ecx
	push	0
	push	eax
	mov	DWORD PTR tv481[esp+52], eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 667
	cmp	ebx, 16					; 00000010H
	jge	SHORT $LN23@bn_mul_par
	cmp	edi, 16					; 00000010H
	jge	SHORT $LN23@bn_mul_par
; Line 668
	push	edi
	push	DWORD PTR tv493[esp+40]
	mov	edi, DWORD PTR tv481[esp+48]
	push	ebx
	push	DWORD PTR tv496[esp+52]
	push	edi
	call	_bn_mul_normal
	add	esp, 20					; 00000014H
; Line 669
	jmp	SHORT $LN5@bn_mul_par
$LN23@bn_mul_par:
; Line 671
	mov	eax, DWORD PTR _i$1$[esp+40]
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 676
	cmp	eax, ebx
	jl	SHORT $LN27@bn_mul_par
$LL4@bn_mul_par:
	cmp	eax, edi
	jl	SHORT $LN27@bn_mul_par
; Line 681
	cmp	eax, ebx
	je	SHORT $LN38@bn_mul_par
	cmp	eax, edi
	je	SHORT $LN38@bn_mul_par
; Line 671
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 676
	cmp	eax, ebx
	jge	SHORT $LL4@bn_mul_par
$LN27@bn_mul_par:
; Line 677
	push	DWORD PTR _p$1$[esp+40]
	sub	edi, eax
	sub	ebx, eax
	push	edi
	mov	edi, DWORD PTR tv481[esp+48]
	push	ebx
	push	eax
	push	DWORD PTR tv493[esp+52]
	push	DWORD PTR tv496[esp+60]
	push	edi
	call	_bn_mul_part_recursive
$LN50@bn_mul_par:
	add	esp, 28					; 0000001cH
$LN5@bn_mul_par:
; Line 698
	lea	ebx, DWORD PTR [ebp*2]
	push	ebx
	push	edi
	push	DWORD PTR _r$[esp+44]
	push	esi
	call	_bn_add_words
	add	esp, 16					; 00000010H
	mov	edi, eax
; Line 700
	cmp	DWORD PTR _neg$1$[esp+40], 0
; Line 701
	mov	eax, DWORD PTR tv484[esp+40]
	push	ebx
	je	SHORT $LN30@bn_mul_par
	push	eax
	push	esi
	push	eax
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	sub	edi, eax
; Line 702
	jmp	SHORT $LN31@bn_mul_par
$LN38@bn_mul_par:
; Line 682
	push	DWORD PTR _p$1$[esp+40]
	sub	edi, eax
	sub	ebx, eax
	push	edi
	mov	edi, DWORD PTR tv481[esp+48]
	push	ebx
	push	eax
	push	DWORD PTR tv493[esp+52]
	push	DWORD PTR tv496[esp+60]
	push	edi
	call	_bn_mul_recursive
; Line 685
	jmp	SHORT $LN50@bn_mul_par
$LN30@bn_mul_par:
; Line 704
	push	esi
	push	eax
	push	eax
	call	_bn_add_words
	add	esp, 16					; 00000010H
	add	edi, eax
$LN31@bn_mul_par:
; Line 713
	mov	esi, DWORD PTR _r$[esp+36]
	push	ebx
	push	DWORD PTR tv484[esp+44]
	lea	eax, DWORD PTR [esi+ebp*4]
	push	eax
	push	eax
	call	_bn_add_words
	add	esp, 16					; 00000010H
	add	edi, eax
; Line 714
	je	SHORT $LN43@bn_mul_par
; Line 715
	lea	eax, DWORD PTR [ebx+ebp]
	lea	ecx, DWORD PTR [esi+eax*4]
; Line 717
	mov	eax, DWORD PTR [ecx]
	add	eax, edi
; Line 718
	mov	DWORD PTR [ecx], eax
; Line 724
	cmp	eax, edi
	jae	SHORT $LN43@bn_mul_par
$LL9@bn_mul_par:
; Line 728
	add	DWORD PTR [ecx+4], 1
	lea	ecx, DWORD PTR [ecx+4]
; Line 730
	je	SHORT $LL9@bn_mul_par
$LN43@bn_mul_par:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 733
	add	esp, 24					; 00000018H
	ret	0
	npad	1
$LN55@bn_mul_par:
	DD	$LN11@bn_mul_par
	DD	$LN12@bn_mul_par
	DD	$LN12@bn_mul_par
	DD	$LN13@bn_mul_par
	DD	$LN13@bn_mul_par
	DD	$LN13@bn_mul_par
	DD	$LN13@bn_mul_par
	DD	$LN14@bn_mul_par
	DD	$LN14@bn_mul_par
_bn_mul_part_recursive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_mul_recursive
_TEXT	SEGMENT
tv502 = -28						; size = 4
tv504 = -24						; size = 4
tv503 = -20						; size = 4
_neg$1$ = -16						; size = 4
tv506 = -12						; size = 4
_n$1$ = -8						; size = 4
tv505 = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
tv496 = 20						; size = 4
_tnb$1$ = 20						; size = 4
_n2$ = 20						; size = 4
_dna$ = 24						; size = 4
_c1$2$ = 28						; size = 4
_dnb$ = 28						; size = 4
_t$ = 32						; size = 4
_bn_mul_recursive PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 429
	mov	eax, 28					; 0000001cH
	call	__chkstk
	push	ebx
; Line 430
	mov	ebx, DWORD PTR _n2$[esp+28]
	mov	eax, ebx
	cdq
	push	ebp
	sub	eax, edx
	mov	ebp, eax
	sar	ebp, 1
	mov	DWORD PTR _n$1$[esp+36], ebp
	push	esi
; Line 431
	mov	esi, DWORD PTR _dnb$[esp+36]
	push	edi
	mov	edi, DWORD PTR _dna$[esp+40]
	lea	eax, DWORD PTR [esi+ebp]
	mov	DWORD PTR _tnb$1$[esp+40], eax
	lea	ecx, DWORD PTR [edi+ebp]
; Line 449
	cmp	ebx, 8
	jne	SHORT $LN7@bn_mul_rec
	test	edi, edi
	jne	SHORT $LN35@bn_mul_rec
	test	esi, esi
	jne	SHORT $LN35@bn_mul_rec
; Line 450
	push	DWORD PTR _b$[esp+40]
	push	DWORD PTR _a$[esp+44]
	push	DWORD PTR _r$[esp+48]
	call	_bn_mul_comba8
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 571
	add	esp, 28					; 0000001cH
	ret	0
$LN7@bn_mul_rec:
; Line 455
	cmp	ebx, 16					; 00000010H
	jge	SHORT $LN8@bn_mul_rec
$LN35@bn_mul_rec:
; Line 456
	mov	ebp, DWORD PTR _r$[esp+40]
	lea	eax, DWORD PTR [ebx+esi]
	push	eax
	push	DWORD PTR _b$[esp+44]
	lea	eax, DWORD PTR [ebx+edi]
	push	eax
	push	DWORD PTR _a$[esp+52]
	push	ebp
	call	_bn_mul_normal
; Line 457
	lea	eax, DWORD PTR [edi+esi]
	add	esp, 20					; 00000014H
	test	eax, eax
	jns	$LN5@bn_mul_rec
; Line 458
	imul	eax, eax, -4
	push	eax
	lea	eax, DWORD PTR [edi+ebx*2]
	add	eax, esi
	push	0
	lea	eax, DWORD PTR [eax*4]
	add	eax, ebp
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 571
	add	esp, 28					; 0000001cH
	ret	0
$LN8@bn_mul_rec:
; Line 463
	mov	eax, DWORD PTR _a$[esp+40]
	lea	edx, DWORD PTR [ebp*4]
	mov	esi, ebp
	mov	DWORD PTR tv505[esp+44], edx
	sub	esi, ecx
	add	edx, eax
	push	esi
	push	ecx
	push	edx
	push	eax
	mov	DWORD PTR tv506[esp+60], esi
	mov	DWORD PTR tv504[esp+60], edx
	call	_bn_cmp_part_words
; Line 464
	mov	ecx, DWORD PTR _tnb$1$[esp+56]
	mov	esi, eax
	mov	eax, ecx
; Line 465
	mov	DWORD PTR _neg$1$[esp+60], 0
	sub	eax, ebp
	mov	DWORD PTR tv503[esp+60], eax
	mov	eax, DWORD PTR _b$[esp+56]
	push	DWORD PTR tv503[esp+60]
	push	ecx
	lea	edx, DWORD PTR [eax+ebp*4]
	push	eax
	push	edx
	mov	DWORD PTR tv502[esp+76], edx
	call	_bn_cmp_part_words
; Line 466
	lea	ecx, DWORD PTR [esi+esi*2]
	add	eax, 4
	mov	esi, DWORD PTR _t$[esp+72]
	add	eax, ecx
	add	esp, 32					; 00000020H
	cmp	eax, 8
	ja	$LN37@bn_mul_rec
	jmp	DWORD PTR $LN43@bn_mul_rec[eax*4]
$LN10@bn_mul_rec:
; Line 468
	lea	ecx, DWORD PTR [edi+ebp]
	mov	eax, ecx
	sub	eax, ebp
	push	eax
	push	ecx
	push	DWORD PTR _a$[esp+48]
	push	DWORD PTR tv504[esp+56]
	push	esi
	call	_bn_sub_part_words
; Line 469
	mov	ecx, DWORD PTR _tnb$1$[esp+60]
	mov	eax, ebp
	sub	eax, ecx
	push	eax
	push	ecx
	push	DWORD PTR tv502[esp+72]
	push	DWORD PTR _b$[esp+72]
; Line 470
	jmp	$LN40@bn_mul_rec
$LN11@bn_mul_rec:
; Line 472
	mov	eax, 1
; Line 473
	jmp	$LN2@bn_mul_rec
$LN12@bn_mul_rec:
; Line 475
	lea	ecx, DWORD PTR [edi+ebp]
	mov	eax, ecx
	sub	eax, ebp
	push	eax
	push	ecx
	push	DWORD PTR _a$[esp+48]
	push	DWORD PTR tv504[esp+56]
	push	esi
	call	_bn_sub_part_words
; Line 476
	push	DWORD PTR tv503[esp+64]
	push	DWORD PTR _tnb$1$[esp+64]
	push	DWORD PTR _b$[esp+68]
	push	DWORD PTR tv502[esp+76]
$LN38@bn_mul_rec:
	lea	eax, DWORD PTR [esi+ebp*4]
	push	eax
	call	_bn_sub_part_words
; Line 477
	mov	DWORD PTR _neg$1$[esp+84], 1
; Line 478
	jmp	SHORT $LN41@bn_mul_rec
$LN14@bn_mul_rec:
; Line 485
	push	DWORD PTR tv506[esp+44]
	lea	ecx, DWORD PTR [edi+ebp]
	push	ecx
	push	DWORD PTR tv504[esp+52]
	push	DWORD PTR _a$[esp+52]
	push	esi
	call	_bn_sub_part_words
; Line 486
	mov	ecx, DWORD PTR _tnb$1$[esp+60]
	mov	eax, ebp
	sub	eax, ecx
	push	eax
	push	ecx
	push	DWORD PTR tv502[esp+72]
	push	DWORD PTR _b$[esp+72]
; Line 488
	jmp	SHORT $LN38@bn_mul_rec
$LN16@bn_mul_rec:
; Line 493
	push	DWORD PTR tv506[esp+44]
	lea	ecx, DWORD PTR [edi+ebp]
	push	ecx
	push	DWORD PTR tv504[esp+52]
	push	DWORD PTR _a$[esp+52]
	push	esi
	call	_bn_sub_part_words
; Line 494
	push	DWORD PTR tv503[esp+64]
	push	DWORD PTR _tnb$1$[esp+64]
	push	DWORD PTR _b$[esp+68]
	push	DWORD PTR tv502[esp+76]
$LN40@bn_mul_rec:
	lea	eax, DWORD PTR [esi+ebp*4]
	push	eax
	call	_bn_sub_part_words
$LN41@bn_mul_rec:
	add	esp, 40					; 00000028H
$LN37@bn_mul_rec:
	xor	eax, eax
$LN2@bn_mul_rec:
; Line 499
	cmp	ebp, 4
	jne	SHORT $LN17@bn_mul_rec
	test	edi, edi
	jne	$LN21@bn_mul_rec
	cmp	DWORD PTR _dnb$[esp+40], edi
	jne	$LN21@bn_mul_rec
; Line 502
	lea	edi, DWORD PTR [esi+ebx*4]
	test	eax, eax
	jne	SHORT $LN19@bn_mul_rec
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	push	edi
	call	_bn_mul_comba4
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN20@bn_mul_rec
$LN19@bn_mul_rec:
	xorps	xmm0, xmm0
; Line 504
	movups	XMMWORD PTR [edi], xmm0
	movups	XMMWORD PTR [edi+16], xmm0
$LN20@bn_mul_rec:
; Line 506
	push	DWORD PTR _b$[esp+40]
	mov	ebp, DWORD PTR _r$[esp+44]
	push	DWORD PTR _a$[esp+44]
	push	ebp
	call	_bn_mul_comba4
; Line 507
	mov	eax, DWORD PTR _b$[esp+52]
	lea	ecx, DWORD PTR [ebx*4]
	add	eax, 16					; 00000010H
	add	ecx, ebp
	push	eax
	mov	eax, DWORD PTR _a$[esp+56]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv496[esp+56], ecx
	push	eax
	push	ecx
	call	_bn_mul_comba4
	add	esp, 24					; 00000018H
	jmp	$LN22@bn_mul_rec
$LN17@bn_mul_rec:
; Line 508
	cmp	ebp, 8
	jne	SHORT $LN21@bn_mul_rec
	test	edi, edi
	jne	SHORT $LN21@bn_mul_rec
	cmp	DWORD PTR _dnb$[esp+40], edi
	jne	SHORT $LN21@bn_mul_rec
; Line 512
	lea	edi, DWORD PTR [esi+ebx*4]
	test	eax, eax
	jne	SHORT $LN23@bn_mul_rec
	lea	eax, DWORD PTR [esi+32]
	push	eax
	push	esi
	push	edi
	call	_bn_mul_comba8
	jmp	SHORT $LN39@bn_mul_rec
$LN23@bn_mul_rec:
; Line 514
	push	64					; 00000040H
	push	0
	push	edi
	call	_memset
$LN39@bn_mul_rec:
; Line 516
	mov	ebp, DWORD PTR _r$[esp+52]
	add	esp, 12					; 0000000cH
	push	DWORD PTR _b$[esp+40]
	push	DWORD PTR _a$[esp+44]
	push	ebp
	call	_bn_mul_comba8
; Line 517
	mov	eax, DWORD PTR _b$[esp+52]
	lea	ecx, DWORD PTR [ebx*4]
	add	eax, 32					; 00000020H
	add	ecx, ebp
	push	eax
	mov	eax, DWORD PTR _a$[esp+56]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv496[esp+56], ecx
	push	eax
	push	ecx
	call	_bn_mul_comba8
	add	esp, 24					; 00000018H
; Line 518
	jmp	SHORT $LN22@bn_mul_rec
$LN21@bn_mul_rec:
; Line 521
	lea	ecx, DWORD PTR [esi+ebx*8]
; Line 522
	test	eax, eax
	jne	SHORT $LN25@bn_mul_rec
; Line 523
	push	ecx
	push	eax
	push	eax
	push	ebp
	lea	eax, DWORD PTR [esi+ebp*4]
	push	eax
	lea	edi, DWORD PTR [esi+ebx*4]
	push	esi
	push	edi
	call	_bn_mul_recursive
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN26@bn_mul_rec
$LN25@bn_mul_rec:
; Line 525
	lea	eax, DWORD PTR [ebx*4]
	push	eax
	lea	edi, DWORD PTR [eax+esi]
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
$LN26@bn_mul_rec:
; Line 526
	lea	eax, DWORD PTR [esi+ebx*8]
	push	eax
	push	0
	push	0
	push	ebp
	push	DWORD PTR _b$[esp+56]
	mov	ebp, DWORD PTR _r$[esp+60]
	push	DWORD PTR _a$[esp+60]
	push	ebp
	call	_bn_mul_recursive
; Line 527
	lea	ecx, DWORD PTR [esi+ebx*8]
	push	ecx
	push	DWORD PTR _dnb$[esp+72]
	lea	eax, DWORD PTR [ebx*4]
	push	DWORD PTR _dna$[esp+76]
	add	eax, ebp
	push	DWORD PTR _n$1$[esp+84]
	mov	DWORD PTR tv496[esp+84], eax
	push	DWORD PTR tv502[esp+88]
	push	DWORD PTR tv504[esp+92]
	push	eax
	call	_bn_mul_recursive
	add	esp, 56					; 00000038H
$LN22@bn_mul_rec:
; Line 536
	push	ebx
	push	DWORD PTR tv496[esp+44]
	push	ebp
	push	esi
	call	_bn_add_words
	add	esp, 16					; 00000010H
	mov	DWORD PTR _c1$2$[esp+40], eax
; Line 538
	cmp	DWORD PTR _neg$1$[esp+44], 0
; Line 539
	push	ebx
	je	SHORT $LN27@bn_mul_rec
	push	edi
	push	esi
	push	edi
	call	_bn_sub_words
	mov	esi, DWORD PTR _c1$2$[esp+56]
	add	esp, 16					; 00000010H
	sub	esi, eax
; Line 540
	jmp	SHORT $LN28@bn_mul_rec
$LN27@bn_mul_rec:
; Line 542
	push	esi
	push	edi
	push	edi
	call	_bn_add_words
	mov	esi, DWORD PTR _c1$2$[esp+56]
	add	esp, 16					; 00000010H
	add	esi, eax
$LN28@bn_mul_rec:
; Line 551
	mov	eax, DWORD PTR tv505[esp+44]
	push	ebx
	add	eax, ebp
	push	edi
	push	eax
	push	eax
	call	_bn_add_words
	add	esp, 16					; 00000010H
	add	esi, eax
; Line 552
	je	SHORT $LN5@bn_mul_rec
; Line 553
	mov	eax, DWORD PTR _n$1$[esp+44]
	add	eax, ebx
	lea	ecx, DWORD PTR [eax*4]
; Line 555
	mov	eax, DWORD PTR [ecx+ebp]
	add	ecx, ebp
	add	eax, esi
; Line 556
	mov	DWORD PTR [ecx], eax
; Line 562
	cmp	eax, esi
	jae	SHORT $LN5@bn_mul_rec
	npad	7
$LL6@bn_mul_rec:
; Line 566
	add	DWORD PTR [ecx+4], 1
	lea	ecx, DWORD PTR [ecx+4]
; Line 568
	je	SHORT $LL6@bn_mul_rec
$LN5@bn_mul_rec:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 571
	add	esp, 28					; 0000001cH
	ret	0
	npad	3
$LN43@bn_mul_rec:
	DD	$LN10@bn_mul_rec
	DD	$LN11@bn_mul_rec
	DD	$LN12@bn_mul_rec
	DD	$LN11@bn_mul_rec
	DD	$LN11@bn_mul_rec
	DD	$LN11@bn_mul_rec
	DD	$LN14@bn_mul_rec
	DD	$LN11@bn_mul_rec
	DD	$LN16@bn_mul_rec
_bn_mul_recursive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_mul_normal
_TEXT	SEGMENT
tv686 = 8						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_a$1$ = 16						; size = 4
_na$ = 16						; size = 4
_b$ = 20						; size = 4
_nb$ = 24						; size = 4
_bn_mul_normal PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 1096
	push	ebx
	push	ebp
	push	esi
; Line 1103
	mov	esi, DWORD PTR _nb$[esp+8]
	push	edi
	mov	edi, DWORD PTR _na$[esp+12]
	cmp	edi, esi
	jge	SHORT $LN22@bn_mul_nor
; Line 1110
	mov	ebp, DWORD PTR _a$[esp+12]
	mov	eax, edi
	mov	edi, esi
	mov	esi, eax
; Line 1111
	mov	eax, DWORD PTR _b$[esp+12]
; Line 1112
	jmp	SHORT $LN24@bn_mul_nor
$LN22@bn_mul_nor:
	mov	ebp, DWORD PTR _b$[esp+12]
	mov	eax, DWORD PTR _a$[esp+12]
$LN24@bn_mul_nor:
; Line 1115
	mov	ecx, DWORD PTR _r$[esp+12]
	mov	DWORD PTR _a$1$[esp+12], eax
	lea	ebx, DWORD PTR [ecx+edi*4]
; Line 1116
	test	esi, esi
	jg	SHORT $LN6@bn_mul_nor
; Line 1117
	push	0
	push	edi
	push	eax
	push	ecx
	call	_bn_mul_words
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1139
	ret	0
$LN6@bn_mul_nor:
; Line 1120
	push	DWORD PTR [ebp]
	push	edi
	push	eax
	push	ecx
	call	_bn_mul_words
; Line 1123
	dec	esi
	mov	DWORD PTR [ebx], eax
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	$LN23@bn_mul_nor
; Line 1120
	mov	eax, DWORD PTR _r$[esp+12]
	add	ebx, 8
	add	ebp, 8
	add	eax, 8
	mov	DWORD PTR tv686[esp+12], eax
$LL2@bn_mul_nor:
; Line 1125
	push	DWORD PTR [ebp-4]
	add	eax, -4					; fffffffcH
	push	edi
	push	DWORD PTR _a$1$[esp+20]
	push	eax
	call	_bn_mul_add_words
; Line 1126
	dec	esi
	mov	DWORD PTR [ebx-4], eax
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN23@bn_mul_nor
; Line 1128
	push	DWORD PTR [ebp]
	push	edi
	push	DWORD PTR _a$1$[esp+20]
	push	DWORD PTR tv686[esp+24]
	call	_bn_mul_add_words
; Line 1129
	dec	esi
	mov	DWORD PTR [ebx], eax
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN23@bn_mul_nor
; Line 1131
	push	DWORD PTR [ebp+4]
	mov	eax, DWORD PTR tv686[esp+16]
	push	edi
	push	DWORD PTR _a$1$[esp+20]
	add	eax, 4
	push	eax
	call	_bn_mul_add_words
; Line 1132
	dec	esi
	mov	DWORD PTR [ebx+4], eax
	add	esp, 16					; 00000010H
	test	esi, esi
	jle	SHORT $LN23@bn_mul_nor
; Line 1134
	push	DWORD PTR [ebp+8]
	mov	eax, DWORD PTR tv686[esp+16]
	push	edi
	push	DWORD PTR _a$1$[esp+20]
	add	eax, 8
	push	eax
	call	_bn_mul_add_words
	mov	DWORD PTR [ebx+8], eax
	dec	esi
; Line 1137
	mov	eax, DWORD PTR tv686[esp+28]
	add	esp, 16					; 00000010H
	add	eax, 16					; 00000010H
	add	ebx, 16					; 00000010H
	add	ebp, 16					; 00000010H
	mov	DWORD PTR tv686[esp+12], eax
	test	esi, esi
	jg	$LL2@bn_mul_nor
$LN23@bn_mul_nor:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1139
	ret	0
_bn_mul_normal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mul
_TEXT	SEGMENT
_j$2$ = -16						; size = 4
tv442 = -12						; size = 4
tv441 = -12						; size = 4
_k$1$ = -12						; size = 4
_top$1$ = -8						; size = 4
_ret$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_mul	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_mul.c
; Line 938
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 958
	mov	eax, DWORD PTR _a$[esp+12]
	push	ebx
	push	edi
	mov	DWORD PTR _ret$1$[esp+24], 0
	mov	edi, DWORD PTR [eax+4]
; Line 959
	mov	eax, DWORD PTR _b$[esp+20]
	mov	ebx, DWORD PTR [eax+4]
; Line 961
	test	edi, edi
	je	$LN6@BN_mul
	test	ebx, ebx
	je	$LN6@BN_mul
; Line 967
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+24]
	lea	eax, DWORD PTR [ebx+edi]
	push	esi
	mov	DWORD PTR _top$1$[esp+32], eax
	call	_BN_CTX_start
; Line 968
	mov	eax, DWORD PTR _r$[esp+28]
	add	esp, 4
	mov	edx, DWORD PTR _a$[esp+24]
	cmp	eax, edx
	je	SHORT $LN9@BN_mul
	mov	ecx, DWORD PTR _b$[esp+24]
	cmp	eax, ecx
	je	SHORT $LN9@BN_mul
; Line 972
	mov	esi, eax
	jmp	SHORT $LN10@BN_mul
$LN9@BN_mul:
; Line 969
	push	esi
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	$err$52
	mov	ecx, DWORD PTR _b$[esp+24]
	mov	edx, DWORD PTR _a$[esp+24]
$LN10@BN_mul:
; Line 973
	mov	eax, DWORD PTR [edx+12]
	xor	eax, DWORD PTR [ecx+12]
	push	ebp
; Line 976
	mov	ebp, edi
	mov	DWORD PTR [esi+12], eax
	sub	ebp, ebx
; Line 979
	jne	SHORT $LN12@BN_mul
; Line 989
	cmp	edi, 8
	jne	SHORT $LN12@BN_mul
; Line 990
	cmp	DWORD PTR [esi+8], 16			; 00000010H
	jl	SHORT $LN31@BN_mul
	mov	eax, esi
	jmp	SHORT $LN32@BN_mul
$LN31@BN_mul:
	push	16					; 00000010H
	push	esi
	call	_bn_expand2
	mov	ecx, DWORD PTR _b$[esp+36]
	add	esp, 8
	mov	edx, DWORD PTR _a$[esp+28]
$LN32@BN_mul:
	test	eax, eax
	je	$LN49@BN_mul
; Line 992
	mov	DWORD PTR [esi+4], 16			; 00000010H
; Line 993
	push	DWORD PTR [ecx]
	push	DWORD PTR [edx]
	push	DWORD PTR [esi]
	call	_bn_mul_comba8
	add	esp, 12					; 0000000cH
; Line 994
	jmp	$end$53
$LN12@BN_mul:
; Line 999
	cmp	edi, 16					; 00000010H
	jl	$LN15@BN_mul
	cmp	ebx, 16					; 00000010H
	jl	$LN15@BN_mul
; Line 1000
	lea	eax, DWORD PTR [ebp+1]
	cmp	eax, 2
	ja	$LN15@BN_mul
; Line 1005
	test	ebp, ebp
	js	SHORT $LN48@BN_mul
; Line 1006
	push	edi
	call	_BN_num_bits_word
	add	esp, 4
	jmp	SHORT $LN16@BN_mul
$LN48@BN_mul:
	xor	eax, eax
$LN16@BN_mul:
; Line 1008
	cmp	ebp, -1
	jne	SHORT $LN17@BN_mul
; Line 1009
	push	ebx
	call	_BN_num_bits_word
	add	esp, 4
$LN17@BN_mul:
; Line 1014
	push	DWORD PTR _ctx$[esp+28]
	lea	ecx, DWORD PTR [eax-1]
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _j$2$[esp+36], eax
	add	eax, eax
	mov	DWORD PTR _k$1$[esp+36], eax
	call	_BN_CTX_get
	mov	ebp, eax
	add	esp, 4
; Line 1015
	test	ebp, ebp
	je	$LN49@BN_mul
; Line 1017
	mov	eax, DWORD PTR _j$2$[esp+32]
	cmp	edi, eax
	jg	SHORT $LN21@BN_mul
	cmp	ebx, eax
	jg	SHORT $LN21@BN_mul
; Line 1026
	mov	eax, DWORD PTR _k$1$[esp+32]
	add	eax, eax
	mov	DWORD PTR tv442[esp+32], eax
	cmp	eax, DWORD PTR [ebp+8]
	jg	SHORT $LN37@BN_mul
	mov	ecx, ebp
	jmp	SHORT $LN38@BN_mul
$LN37@BN_mul:
	push	eax
	push	ebp
	call	_bn_expand2
	mov	ecx, eax
	add	esp, 8
	mov	eax, DWORD PTR tv442[esp+32]
$LN38@BN_mul:
	test	ecx, ecx
	je	$LN49@BN_mul
; Line 1028
	cmp	eax, DWORD PTR [esi+8]
	jg	SHORT $LN39@BN_mul
	mov	eax, esi
	jmp	SHORT $LN40@BN_mul
$LN39@BN_mul:
	push	eax
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN40@BN_mul:
	test	eax, eax
	je	$LN49@BN_mul
; Line 1030
	push	DWORD PTR [ebp]
	mov	eax, DWORD PTR _j$2$[esp+36]
	sub	ebx, eax
	push	ebx
	sub	edi, eax
	push	edi
	push	eax
	mov	eax, DWORD PTR _b$[esp+44]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR _a$[esp+48]
	push	DWORD PTR [eax]
	push	DWORD PTR [esi]
	call	_bn_mul_recursive
; Line 1032
	mov	eax, DWORD PTR _top$1$[esp+60]
	add	esp, 28					; 0000001cH
	mov	DWORD PTR [esi+4], eax
; Line 1033
	jmp	$end$53
$LN21@BN_mul:
; Line 1018
	mov	eax, DWORD PTR _k$1$[esp+32]
	shl	eax, 2
	mov	DWORD PTR tv441[esp+32], eax
	cmp	eax, DWORD PTR [ebp+8]
	jg	SHORT $LN33@BN_mul
	mov	ecx, ebp
	jmp	SHORT $LN34@BN_mul
$LN33@BN_mul:
	push	eax
	push	ebp
	call	_bn_expand2
	mov	ecx, eax
	add	esp, 8
	mov	eax, DWORD PTR tv441[esp+32]
$LN34@BN_mul:
	test	ecx, ecx
	je	$LN49@BN_mul
; Line 1020
	cmp	eax, DWORD PTR [esi+8]
	jg	SHORT $LN35@BN_mul
	mov	eax, esi
	jmp	SHORT $LN36@BN_mul
$LN35@BN_mul:
	push	eax
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN36@BN_mul:
	test	eax, eax
	je	$LN49@BN_mul
; Line 1022
	push	DWORD PTR [ebp]
	mov	eax, DWORD PTR _j$2$[esp+36]
	sub	ebx, eax
	push	ebx
	sub	edi, eax
	push	edi
	push	eax
	mov	eax, DWORD PTR _b$[esp+44]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR _a$[esp+48]
	push	DWORD PTR [eax]
	push	DWORD PTR [esi]
	call	_bn_mul_part_recursive
; Line 1032
	mov	eax, DWORD PTR _top$1$[esp+60]
	add	esp, 28					; 0000001cH
	mov	DWORD PTR [esi+4], eax
; Line 1033
	jmp	SHORT $end$53
$LN15@BN_mul:
; Line 1077
	mov	ebp, DWORD PTR _top$1$[esp+32]
	cmp	ebp, DWORD PTR [esi+8]
	jg	SHORT $LN41@BN_mul
	mov	eax, esi
	jmp	SHORT $LN42@BN_mul
$LN41@BN_mul:
	push	ebp
	push	esi
	call	_bn_expand2
	mov	ecx, DWORD PTR _b$[esp+36]
	add	esp, 8
	mov	edx, DWORD PTR _a$[esp+28]
$LN42@BN_mul:
	test	eax, eax
	je	SHORT $LN49@BN_mul
; Line 1080
	push	ebx
	mov	DWORD PTR [esi+4], ebp
	push	DWORD PTR [ecx]
	push	edi
	push	DWORD PTR [edx]
	push	DWORD PTR [esi]
	call	_bn_mul_normal
	add	esp, 20					; 00000014H
$end$53:
; Line 1085
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	jle	SHORT $LN27@BN_mul
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL4@BN_mul:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN44@BN_mul
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL4@BN_mul
$LN44@BN_mul:
	mov	DWORD PTR [esi+4], ecx
$LN27@BN_mul:
; Line 1086
	mov	eax, DWORD PTR _r$[esp+28]
	cmp	eax, esi
	je	SHORT $LN29@BN_mul
; Line 1087
	push	esi
	push	eax
	call	_BN_copy
	add	esp, 8
$LN29@BN_mul:
; Line 1088
	mov	DWORD PTR _ret$1$[esp+32], 1
$LN49@BN_mul:
	pop	ebp
$err$52:
; Line 1091
	push	DWORD PTR _ctx$[esp+24]
	call	_BN_CTX_end
; Line 1092
	mov	eax, DWORD PTR _ret$1$[esp+32]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
; Line 1093
	add	esp, 16					; 00000010H
	ret	0
$LN6@BN_mul:
; Line 962
	push	0
	push	DWORD PTR _r$[esp+24]
	call	_BN_set_word
	add	esp, 8
; Line 963
	mov	eax, 1
	pop	edi
	pop	ebx
; Line 1093
	add	esp, 16					; 00000010H
	ret	0
_BN_mul	ENDP
_TEXT	ENDS
END
