; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?empty@?1??tls1_change_cipher_state@@9@9 DB 00H		; `tls1_change_cipher_state'::`2'::empty
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_tls1_change_cipher_state
PUBLIC	_tls1_setup_key_block
PUBLIC	_tls1_enc
PUBLIC	_tls1_final_finish_mac
PUBLIC	_tls1_cert_verify_mac
PUBLIC	_tls1_mac
PUBLIC	_tls1_generate_master_secret
PUBLIC	_tls1_export_keying_material
PUBLIC	_tls1_alert_code
PUBLIC	??_C@_0L@JFGNIFBM@chunk?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@	; `string'
PUBLIC	??_C@_0O@EOHBJBLD@key?5expansion?$AA@		; `string'
PUBLIC	??_C@_0BB@DJIGDMHM@client?5write?5key?$AA@	; `string'
PUBLIC	??_C@_0BB@HLBNJBJK@server?5write?5key?$AA@	; `string'
PUBLIC	??_C@_08IBBAIJIN@IV?5block?$AA@			; `string'
PUBLIC	??_C@_06EFONEEIH@n?5?$DO?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0CA@DAEFHPJI@?$CFs?3?$CFd?3?5rec?9?$DOdata?5?$CB?$DN?5rec?9?$DOinput?6?$AA@ ; `string'
PUBLIC	??_C@_06IGEDIHAH@t?5?$DO?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0O@FEJGMKDJ@master?5secret?$AA@		; `string'
PUBLIC	??_C@_0BA@OOFGCNEE@client?5finished?$AA@	; `string'
PUBLIC	??_C@_0BA@MHGDKHGN@server?5finished?$AA@	; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__memmove:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_OpenSSLDie:PROC
EXTRN	_COMP_CTX_new:PROC
EXTRN	_COMP_CTX_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_EVP_MD_type:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_MD_CTX_md:PROC
EXTRN	_EVP_CIPHER_block_size:PROC
EXTRN	_EVP_CIPHER_key_length:PROC
EXTRN	_EVP_CIPHER_iv_length:PROC
EXTRN	_EVP_CIPHER_flags:PROC
EXTRN	_EVP_CIPHER_CTX_cipher:PROC
EXTRN	_EVP_CIPHER_CTX_flags:PROC
EXTRN	_EVP_Cipher:PROC
EXTRN	_EVP_MD_CTX_init:PROC
EXTRN	_EVP_MD_CTX_cleanup:PROC
EXTRN	_EVP_MD_CTX_create:PROC
EXTRN	_EVP_MD_CTX_copy_ex:PROC
EXTRN	_EVP_MD_CTX_set_flags:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal_ex:PROC
EXTRN	_EVP_MD_CTX_copy:PROC
EXTRN	_EVP_CipherInit_ex:PROC
EXTRN	_EVP_DigestSignInit:PROC
EXTRN	_EVP_DigestSignFinal:PROC
EXTRN	_EVP_CIPHER_CTX_init:PROC
EXTRN	_EVP_CIPHER_CTX_cleanup:PROC
EXTRN	_EVP_CIPHER_CTX_new:PROC
EXTRN	_EVP_CIPHER_CTX_ctrl:PROC
EXTRN	_EVP_PKEY_free:PROC
EXTRN	_EVP_PKEY_new_mac_key:PROC
EXTRN	_ssl_cipher_get_evp:PROC
EXTRN	_ssl_get_handshake_digest:PROC
EXTRN	_ssl3_cleanup_key_block:PROC
EXTRN	_ssl3_digest_cached_records:PROC
EXTRN	_ssl_replace_hash:PROC
EXTRN	_ssl_get_algorithm2:PROC
EXTRN	_tls1_cbc_remove_padding:PROC
EXTRN	_ssl3_cbc_record_digest_supported:PROC
EXTRN	_ssl3_cbc_digest_record:PROC
EXTRN	_RAND_bytes:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0BA@MHGDKHGN@server?5finished?$AA@
CONST	SEGMENT
??_C@_0BA@MHGDKHGN@server?5finished?$AA@ DB 'server finished', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OOFGCNEE@client?5finished?$AA@
CONST	SEGMENT
??_C@_0BA@OOFGCNEE@client?5finished?$AA@ DB 'client finished', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FEJGMKDJ@master?5secret?$AA@
CONST	SEGMENT
??_C@_0O@FEJGMKDJ@master?5secret?$AA@ DB 'master secret', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGEDIHAH@t?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_06IGEDIHAH@t?5?$DO?$DN?50?$AA@ DB 't >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAEFHPJI@?$CFs?3?$CFd?3?5rec?9?$DOdata?5?$CB?$DN?5rec?9?$DOinput?6?$AA@
CONST	SEGMENT
??_C@_0CA@DAEFHPJI@?$CFs?3?$CFd?3?5rec?9?$DOdata?5?$CB?$DN?5rec?9?$DOinput?6?$AA@ DB '%'
	DB	's:%d: rec->data != rec->input', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFONEEIH@n?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_06EFONEEIH@n?5?$DO?$DN?50?$AA@ DB 'n >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBBAIJIN@IV?5block?$AA@
CONST	SEGMENT
??_C@_08IBBAIJIN@IV?5block?$AA@ DB 'IV block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLBNJBJK@server?5write?5key?$AA@
CONST	SEGMENT
??_C@_0BB@HLBNJBJK@server?5write?5key?$AA@ DB 'server write key', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DJIGDMHM@client?5write?5key?$AA@
CONST	SEGMENT
??_C@_0BB@DJIGDMHM@client?5write?5key?$AA@ DB 'client write key', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EOHBJBLD@key?5expansion?$AA@
CONST	SEGMENT
??_C@_0O@EOHBJBLD@key?5expansion?$AA@ DB 'key expansion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
CONST	SEGMENT
??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@ DB '.\ssl\t1_enc.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFGNIFBM@chunk?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0L@JFGNIFBM@chunk?5?$DO?$DN?50?$AA@ DB 'chunk >= 0', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_generate_key_block
_TEXT	SEGMENT
_s$ = 8							; size = 4
_km$ = 12						; size = 4
_tmp$ = 16						; size = 4
_num$ = 20						; size = 4
_tls1_generate_key_block PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 299
	push	DWORD PTR _num$[esp-4]
	mov	edx, DWORD PTR _s$[esp]
	push	DWORD PTR _tmp$[esp]
	push	DWORD PTR _km$[esp+4]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [edx+88]
	push	DWORD PTR [eax+16]
	add	eax, 20					; 00000014H
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	32					; 00000020H
	lea	eax, DWORD PTR [ecx+192]
	push	eax
	push	32					; 00000020H
	lea	eax, DWORD PTR [ecx+160]
	push	eax
	push	13					; 0000000dH
	push	OFFSET ??_C@_0O@EOHBJBLD@key?5expansion?$AA@
	push	edx
	call	_ssl_get_algorithm2
	add	esp, 4
	push	eax
	call	_tls1_PRF
	add	esp, 64					; 00000040H
; Line 317
	ret	0
_tls1_generate_key_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_PRF
_TEXT	SEGMENT
_m$ = -16						; size = 4
_len$1$ = -12						; size = 4
_md$ = -8						; size = 4
_idx$2$ = -4						; size = 4
_digest_mask$ = 8					; size = 4
_seed1$ = 12						; size = 4
_seed1_len$ = 16					; size = 4
_seed2$ = 20						; size = 4
_seed2_len$ = 24					; size = 4
_seed3$ = 28						; size = 4
_seed3_len$ = 32					; size = 4
_seed4$ = 36						; size = 4
_seed4_len$ = 40					; size = 4
_seed5$ = 44						; size = 4
_seed5_len$ = 48					; size = 4
_sec$ = 52						; size = 4
_slen$ = 56						; size = 4
_out1$ = 60						; size = 4
_out2$ = 64						; size = 4
_olen$ = 68						; size = 4
_tls1_PRF PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 250
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
; Line 259
	lea	eax, DWORD PTR _md$[esp+28]
	xor	esi, esi
	push	eax
	lea	eax, DWORD PTR _m$[esp+32]
	xor	edi, edi
	push	eax
	push	esi
	call	_ssl_get_handshake_digest
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN38@tls1_PRF
	mov	ebx, DWORD PTR _digest_mask$[esp+24]
$LL4@tls1_PRF:
; Line 260
	mov	eax, DWORD PTR _m$[esp+28]
	shl	eax, 10					; 0000000aH
	test	eax, ebx
	je	SHORT $LN2@tls1_PRF
; Line 261
	inc	edi
$LN2@tls1_PRF:
; Line 259
	lea	eax, DWORD PTR _md$[esp+28]
	inc	esi
	push	eax
	lea	eax, DWORD PTR _m$[esp+32]
	push	eax
	push	esi
	call	_ssl_get_handshake_digest
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LL4@tls1_PRF
; Line 263
	test	edi, edi
	je	$LN38@tls1_PRF
; Line 268
	mov	ecx, DWORD PTR _slen$[esp+24]
	mov	eax, ecx
	cdq
	idiv	edi
	push	ebp
; Line 272
	mov	ebp, DWORD PTR _out1$[esp+28]
	mov	esi, eax
	xor	eax, eax
	mov	DWORD PTR _len$1$[esp+32], esi
	cmp	edi, 1
	mov	edi, DWORD PTR _olen$[esp+28]
	push	edi
	push	eax
	cmove	ecx, eax
	push	ebp
	mov	DWORD PTR _slen$[esp+40], ecx
	call	_memset
; Line 273
	lea	eax, DWORD PTR _md$[esp+44]
	mov	DWORD PTR _idx$2$[esp+44], 0
	push	eax
	lea	eax, DWORD PTR _m$[esp+48]
	push	eax
	push	0
	call	_ssl_get_handshake_digest
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN39@tls1_PRF
	mov	ebx, DWORD PTR _out2$[esp+28]
$LL7@tls1_PRF:
; Line 274
	mov	eax, DWORD PTR _m$[esp+32]
	shl	eax, 10					; 0000000aH
	test	eax, DWORD PTR _digest_mask$[esp+28]
	je	$LN5@tls1_PRF
; Line 275
	mov	ecx, DWORD PTR _md$[esp+32]
	test	ecx, ecx
	je	$LN21@tls1_PRF
; Line 279
	push	edi
	push	ebx
	push	DWORD PTR _seed5_len$[esp+36]
	mov	eax, DWORD PTR _slen$[esp+40]
	push	DWORD PTR _seed5$[esp+40]
	and	eax, 1
	push	DWORD PTR _seed4_len$[esp+44]
	add	eax, esi
	mov	esi, DWORD PTR _sec$[esp+48]
	push	DWORD PTR _seed4$[esp+48]
	push	DWORD PTR _seed3_len$[esp+52]
	push	DWORD PTR _seed3$[esp+56]
	push	DWORD PTR _seed2_len$[esp+60]
	push	DWORD PTR _seed2$[esp+64]
	push	DWORD PTR _seed1_len$[esp+68]
	push	DWORD PTR _seed1$[esp+72]
	push	eax
	push	esi
	push	ecx
	call	_tls1_P_hash
	add	esp, 60					; 0000003cH
	test	eax, eax
	je	$LN40@tls1_PRF
; Line 284
	add	esi, DWORD PTR _len$1$[esp+32]
; Line 285
	xor	ecx, ecx
	mov	DWORD PTR _sec$[esp+28], esi
	test	edi, edi
	jle	$LN42@tls1_PRF
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN27@tls1_PRF
; Line 286
	lea	eax, DWORD PTR [ebx-1]
	lea	edx, DWORD PTR [ebp-1]
	add	eax, edi
	add	edx, edi
	cmp	ebp, eax
	ja	SHORT $LN28@tls1_PRF
	cmp	edx, ebx
	jae	SHORT $LN27@tls1_PRF
$LN28@tls1_PRF:
	mov	eax, edi
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN44@tls1_PRF
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN44@tls1_PRF:
	mov	edx, edi
; Line 285
	mov	esi, ebx
	sub	edx, eax
	mov	eax, ebp
	sub	esi, ebp
	npad	8
$LL10@tls1_PRF:
; Line 286
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [esi+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [ebx+ecx+16]
	add	ecx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	ecx, edx
	jl	SHORT $LL10@tls1_PRF
$LN27@tls1_PRF:
; Line 285
	cmp	ecx, edi
	jge	SHORT $LN42@tls1_PRF
	mov	esi, ebx
	lea	eax, DWORD PTR [ecx+ebp]
	mov	edx, edi
	sub	esi, ebp
	sub	edx, ecx
	npad	6
$LL26@tls1_PRF:
; Line 286
	mov	cl, BYTE PTR [eax+esi]
	lea	eax, DWORD PTR [eax+1]
	xor	BYTE PTR [eax-1], cl
	sub	edx, 1
	jne	SHORT $LL26@tls1_PRF
$LN42@tls1_PRF:
	mov	esi, DWORD PTR _len$1$[esp+32]
$LN5@tls1_PRF:
; Line 273
	mov	eax, DWORD PTR _idx$2$[esp+32]
	lea	ecx, DWORD PTR _md$[esp+32]
	push	ecx
	lea	ecx, DWORD PTR _m$[esp+36]
	inc	eax
	push	ecx
	push	eax
	mov	DWORD PTR _idx$2$[esp+44], eax
	call	_ssl_get_handshake_digest
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL7@tls1_PRF
$LN39@tls1_PRF:
; Line 292
	mov	eax, 1
	pop	ebp
$err$46:
	pop	edi
	pop	esi
	pop	ebx
; Line 293
	add	esp, 16					; 00000010H
	ret	0
$LN21@tls1_PRF:
; Line 276
	push	276					; 00000114H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	326					; 00000146H
	push	284					; 0000011cH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN40@tls1_PRF:
; Line 292
	pop	ebp
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 293
	add	esp, 16					; 00000010H
	ret	0
$LN38@tls1_PRF:
; Line 265
	push	265					; 00000109H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	68					; 00000044H
	push	284					; 0000011cH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 292
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 293
	add	esp, 16					; 00000010H
	ret	0
_tls1_PRF ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_P_hash
_TEXT	SEGMENT
_out$GSCopy$1$ = -180					; size = 4
_A1_len$ = -176						; size = 4
_ctx$ = -172						; size = 24
_seed4$GSCopy$1$ = -148					; size = 4
_seed5$GSCopy$1$ = -144					; size = 4
_chunk$1$ = -140					; size = 4
_ret$1$ = -136						; size = 4
_seed2$GSCopy$1$ = -132					; size = 4
_seed3$GSCopy$1$ = -128					; size = 4
_j$ = -124						; size = 4
_mac_key$1$ = -120					; size = 4
_ctx_init$ = -116					; size = 24
_ctx_tmp$ = -92						; size = 24
_A1$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_md$ = 8						; size = 4
_sec$ = 12						; size = 4
_sec_len$ = 16						; size = 4
_seed1$ = 20						; size = 4
_seed1_len$ = 24					; size = 4
_seed2$ = 28						; size = 4
_seed2_len$ = 32					; size = 4
_seed3$ = 36						; size = 4
_seed3_len$ = 40					; size = 4
_seed4$ = 44						; size = 4
_seed4_len$ = 48					; size = 4
_seed5$ = 52						; size = 4
_seed5_len$ = 56					; size = 4
_out$ = 60						; size = 4
_olen$ = 64						; size = 4
_tls1_P_hash PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 160
	mov	eax, 180				; 000000b4H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+180], eax
	mov	eax, DWORD PTR _seed2$[esp+176]
	push	ebx
	mov	ebx, DWORD PTR _sec_len$[esp+180]
	mov	DWORD PTR _seed2$GSCopy$1$[esp+184], eax
	mov	eax, DWORD PTR _seed3$[esp+180]
	push	ebp
	mov	ebp, DWORD PTR _seed1$[esp+184]
	mov	DWORD PTR _seed3$GSCopy$1$[esp+188], eax
	mov	eax, DWORD PTR _seed4$[esp+184]
	push	esi
	mov	esi, DWORD PTR _md$[esp+188]
	mov	DWORD PTR _seed4$GSCopy$1$[esp+192], eax
	mov	eax, DWORD PTR _seed5$[esp+188]
	push	edi
	mov	edi, DWORD PTR _sec$[esp+192]
	mov	DWORD PTR _seed5$GSCopy$1$[esp+196], eax
	mov	eax, DWORD PTR _out$[esp+192]
; Line 169
	push	esi
	mov	DWORD PTR _out$GSCopy$1$[esp+200], eax
	mov	DWORD PTR _ret$1$[esp+200], 0
	call	_EVP_MD_size
	add	esp, 4
	mov	DWORD PTR _chunk$1$[esp+196], eax
; Line 170
	test	eax, eax
	jns	SHORT $LN29@tls1_P_has
	push	OFFSET ??_C@_0L@JFGNIFBM@chunk?5?$DO?$DN?50?$AA@
	push	170					; 000000aaH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN29@tls1_P_has:
; Line 172
	lea	eax, DWORD PTR _ctx$[esp+196]
	push	eax
	call	_EVP_MD_CTX_init
; Line 173
	lea	eax, DWORD PTR _ctx_tmp$[esp+200]
	push	eax
	call	_EVP_MD_CTX_init
; Line 174
	lea	eax, DWORD PTR _ctx_init$[esp+204]
	push	eax
	call	_EVP_MD_CTX_init
; Line 175
	lea	eax, DWORD PTR _ctx_init$[esp+208]
	push	8
	push	eax
	call	_EVP_MD_CTX_set_flags
; Line 176
	push	ebx
	push	edi
	push	0
	push	855					; 00000357H
	call	_EVP_PKEY_new_mac_key
	add	esp, 36					; 00000024H
	mov	DWORD PTR _mac_key$1$[esp+196], eax
; Line 177
	test	eax, eax
	je	$err$44
; Line 179
	push	eax
	push	0
	push	esi
	lea	eax, DWORD PTR _ctx_init$[esp+208]
	push	0
	push	eax
	call	_EVP_DigestSignInit
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$44
; Line 181
	lea	eax, DWORD PTR _ctx_init$[esp+196]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	eax
	call	_EVP_MD_CTX_copy_ex
	add	esp, 8
	test	eax, eax
	je	$err$44
; Line 183
	test	ebp, ebp
	je	SHORT $LN8@tls1_P_has
	push	DWORD PTR _seed1_len$[esp+192]
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	ebp
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN8@tls1_P_has:
; Line 185
	mov	ebx, DWORD PTR _seed2$GSCopy$1$[esp+196]
	test	ebx, ebx
	je	SHORT $LN9@tls1_P_has
	push	DWORD PTR _seed2_len$[esp+192]
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	ebx
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN9@tls1_P_has:
; Line 187
	mov	edi, DWORD PTR _seed3$GSCopy$1$[esp+196]
	test	edi, edi
	je	SHORT $LN10@tls1_P_has
	push	DWORD PTR _seed3_len$[esp+192]
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	edi
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN10@tls1_P_has:
; Line 189
	mov	eax, DWORD PTR _seed4$GSCopy$1$[esp+196]
	test	eax, eax
	je	SHORT $LN11@tls1_P_has
	push	DWORD PTR _seed4_len$[esp+192]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN11@tls1_P_has:
; Line 191
	mov	eax, DWORD PTR _seed5$GSCopy$1$[esp+196]
	test	eax, eax
	je	SHORT $LN12@tls1_P_has
	push	DWORD PTR _seed5_len$[esp+192]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN12@tls1_P_has:
; Line 193
	lea	eax, DWORD PTR _A1_len$[esp+196]
	push	eax
	lea	eax, DWORD PTR _A1$[esp+200]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestSignFinal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
; Line 198
	lea	eax, DWORD PTR _ctx_init$[esp+196]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	eax
	call	_EVP_MD_CTX_copy_ex
	add	esp, 8
	test	eax, eax
	je	$err$44
	mov	esi, DWORD PTR _olen$[esp+192]
$LL2@tls1_P_has:
; Line 200
	push	DWORD PTR _A1_len$[esp+196]
	lea	eax, DWORD PTR _A1$[esp+200]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
; Line 202
	cmp	esi, DWORD PTR _chunk$1$[esp+196]
	jle	SHORT $LN16@tls1_P_has
	lea	eax, DWORD PTR _ctx$[esp+196]
	push	eax
	lea	eax, DWORD PTR _ctx_tmp$[esp+200]
	push	eax
	call	_EVP_MD_CTX_copy_ex
	add	esp, 8
	test	eax, eax
	je	$err$44
$LN16@tls1_P_has:
; Line 204
	test	ebp, ebp
	je	SHORT $LN17@tls1_P_has
	push	DWORD PTR _seed1_len$[esp+192]
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	ebp
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN17@tls1_P_has:
; Line 206
	test	ebx, ebx
	je	SHORT $LN18@tls1_P_has
	push	DWORD PTR _seed2_len$[esp+192]
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	ebx
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN18@tls1_P_has:
; Line 208
	test	edi, edi
	je	SHORT $LN19@tls1_P_has
	push	DWORD PTR _seed3_len$[esp+192]
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	edi
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN19@tls1_P_has:
; Line 210
	mov	eax, DWORD PTR _seed4$GSCopy$1$[esp+196]
	test	eax, eax
	je	SHORT $LN20@tls1_P_has
	push	DWORD PTR _seed4_len$[esp+192]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN20@tls1_P_has:
; Line 212
	mov	eax, DWORD PTR _seed5$GSCopy$1$[esp+196]
	test	eax, eax
	je	SHORT $LN21@tls1_P_has
	push	DWORD PTR _seed5_len$[esp+192]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
$LN21@tls1_P_has:
; Line 215
	cmp	esi, DWORD PTR _chunk$1$[esp+196]
	jle	SHORT $LN22@tls1_P_has
; Line 216
	lea	eax, DWORD PTR _j$[esp+196]
	push	eax
	push	DWORD PTR _out$GSCopy$1$[esp+200]
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestSignFinal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$44
; Line 218
	mov	eax, DWORD PTR _j$[esp+196]
; Line 219
	sub	esi, eax
	add	DWORD PTR _out$GSCopy$1$[esp+196], eax
; Line 221
	lea	eax, DWORD PTR _A1_len$[esp+196]
	push	eax
	lea	eax, DWORD PTR _A1$[esp+200]
	push	eax
	lea	eax, DWORD PTR _ctx_tmp$[esp+204]
	push	eax
	call	_EVP_DigestSignFinal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$44
; Line 198
	lea	eax, DWORD PTR _ctx_init$[esp+196]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	eax
	call	_EVP_MD_CTX_copy_ex
	add	esp, 8
	test	eax, eax
	jne	$LL2@tls1_P_has
; Line 199
	jmp	SHORT $err$44
$LN22@tls1_P_has:
; Line 225
	lea	eax, DWORD PTR _A1_len$[esp+196]
	push	eax
	lea	eax, DWORD PTR _A1$[esp+200]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	eax
	call	_EVP_DigestSignFinal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$44
; Line 227
	push	esi
	lea	eax, DWORD PTR _A1$[esp+200]
	push	eax
	push	DWORD PTR _out$GSCopy$1$[esp+204]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 231
	mov	DWORD PTR _ret$1$[esp+196], 1
$err$44:
; Line 233
	push	DWORD PTR _mac_key$1$[esp+196]
	call	_EVP_PKEY_free
; Line 234
	lea	eax, DWORD PTR _ctx$[esp+200]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 235
	lea	eax, DWORD PTR _ctx_tmp$[esp+204]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 236
	lea	eax, DWORD PTR _ctx_init$[esp+208]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 237
	lea	eax, DWORD PTR _A1$[esp+212]
	push	64					; 00000040H
	push	eax
	call	_OPENSSL_cleanse
; Line 239
	mov	ecx, DWORD PTR __$ArrayPad$[esp+220]
	add	esp, 24					; 00000018H
	mov	eax, DWORD PTR _ret$1$[esp+196]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 180				; 000000b4H
	ret	0
_tls1_P_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_alert_code
_TEXT	SEGMENT
_code$ = 8						; size = 4
_tls1_alert_code PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 1306
	mov	eax, DWORD PTR _code$[esp-4]
	cmp	eax, 115				; 00000073H
	ja	$LN35@tls1_alert
	movzx	eax, BYTE PTR $LN37@tls1_alert[eax]
	jmp	DWORD PTR $LN40@tls1_alert[eax*4]
$LN4@tls1_alert:
; Line 1308
	xor	eax, eax
; Line 1377
	ret	0
$LN5@tls1_alert:
; Line 1310
	mov	eax, 10					; 0000000aH
; Line 1377
	ret	0
$LN6@tls1_alert:
; Line 1312
	mov	eax, 20					; 00000014H
; Line 1377
	ret	0
$LN7@tls1_alert:
; Line 1314
	mov	eax, 21					; 00000015H
; Line 1377
	ret	0
$LN8@tls1_alert:
; Line 1316
	mov	eax, 22					; 00000016H
; Line 1377
	ret	0
$LN9@tls1_alert:
; Line 1318
	mov	eax, 30					; 0000001eH
; Line 1377
	ret	0
$LN10@tls1_alert:
; Line 1320
	mov	eax, 40					; 00000028H
; Line 1377
	ret	0
$LN12@tls1_alert:
; Line 1324
	mov	eax, 42					; 0000002aH
; Line 1377
	ret	0
$LN13@tls1_alert:
; Line 1326
	mov	eax, 43					; 0000002bH
; Line 1377
	ret	0
$LN14@tls1_alert:
; Line 1328
	mov	eax, 44					; 0000002cH
; Line 1377
	ret	0
$LN15@tls1_alert:
; Line 1330
	mov	eax, 45					; 0000002dH
; Line 1377
	ret	0
$LN16@tls1_alert:
; Line 1332
	mov	eax, 46					; 0000002eH
; Line 1377
	ret	0
$LN17@tls1_alert:
; Line 1334
	mov	eax, 47					; 0000002fH
; Line 1377
	ret	0
$LN18@tls1_alert:
; Line 1336
	mov	eax, 48					; 00000030H
; Line 1377
	ret	0
$LN19@tls1_alert:
; Line 1338
	mov	eax, 49					; 00000031H
; Line 1377
	ret	0
$LN20@tls1_alert:
; Line 1340
	mov	eax, 50					; 00000032H
; Line 1377
	ret	0
$LN21@tls1_alert:
; Line 1342
	mov	eax, 51					; 00000033H
; Line 1377
	ret	0
$LN22@tls1_alert:
; Line 1344
	mov	eax, 60					; 0000003cH
; Line 1377
	ret	0
$LN23@tls1_alert:
; Line 1346
	mov	eax, 70					; 00000046H
; Line 1377
	ret	0
$LN24@tls1_alert:
; Line 1348
	mov	eax, 71					; 00000047H
; Line 1377
	ret	0
$LN25@tls1_alert:
; Line 1350
	mov	eax, 80					; 00000050H
; Line 1377
	ret	0
$LN26@tls1_alert:
; Line 1352
	mov	eax, 90					; 0000005aH
; Line 1377
	ret	0
$LN27@tls1_alert:
; Line 1354
	mov	eax, 100				; 00000064H
; Line 1377
	ret	0
$LN28@tls1_alert:
; Line 1356
	mov	eax, 110				; 0000006eH
; Line 1377
	ret	0
$LN29@tls1_alert:
; Line 1358
	mov	eax, 111				; 0000006fH
; Line 1377
	ret	0
$LN30@tls1_alert:
; Line 1360
	mov	eax, 112				; 00000070H
; Line 1377
	ret	0
$LN31@tls1_alert:
; Line 1362
	mov	eax, 113				; 00000071H
; Line 1377
	ret	0
$LN32@tls1_alert:
; Line 1364
	mov	eax, 114				; 00000072H
; Line 1377
	ret	0
$LN33@tls1_alert:
; Line 1366
	mov	eax, 115				; 00000073H
; Line 1377
	ret	0
$LN34@tls1_alert:
; Line 1368
	mov	eax, 86					; 00000056H
; Line 1377
	ret	0
$LN35@tls1_alert:
; Line 1375
	or	eax, -1
; Line 1377
	ret	0
$LN40@tls1_alert:
	DD	$LN4@tls1_alert
	DD	$LN5@tls1_alert
	DD	$LN6@tls1_alert
	DD	$LN7@tls1_alert
	DD	$LN8@tls1_alert
	DD	$LN9@tls1_alert
	DD	$LN10@tls1_alert
	DD	$LN35@tls1_alert
	DD	$LN12@tls1_alert
	DD	$LN13@tls1_alert
	DD	$LN14@tls1_alert
	DD	$LN15@tls1_alert
	DD	$LN16@tls1_alert
	DD	$LN17@tls1_alert
	DD	$LN18@tls1_alert
	DD	$LN19@tls1_alert
	DD	$LN20@tls1_alert
	DD	$LN21@tls1_alert
	DD	$LN22@tls1_alert
	DD	$LN23@tls1_alert
	DD	$LN24@tls1_alert
	DD	$LN25@tls1_alert
	DD	$LN34@tls1_alert
	DD	$LN26@tls1_alert
	DD	$LN27@tls1_alert
	DD	$LN28@tls1_alert
	DD	$LN29@tls1_alert
	DD	$LN30@tls1_alert
	DD	$LN31@tls1_alert
	DD	$LN32@tls1_alert
	DD	$LN33@tls1_alert
	DD	$LN35@tls1_alert
$LN37@tls1_alert:
	DB	0
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	1
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	2
	DB	3
	DB	4
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	5
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	18					; 00000012H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	21					; 00000015H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	22					; 00000016H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	23					; 00000017H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	24					; 00000018H
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
_tls1_alert_code ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_export_keying_material
_TEXT	SEGMENT
_vallen$1$ = -4						; size = 4
_s$ = 8							; size = 4
_out$ = 12						; size = 4
_olen$ = 16						; size = 4
_label$ = 20						; size = 4
_llen$ = 24						; size = 4
_context$ = 28						; size = 4
_contextlen$ = 32					; size = 4
_use_context$ = 36					; size = 4
_tls1_export_keying_material PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 1209
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1220
	push	1220					; 000004c4H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	DWORD PTR _olen$[esp+24]
	xor	esi, esi
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 1221
	test	ebp, ebp
	je	$err2$30
; Line 1229
	mov	edi, DWORD PTR _llen$[esp+16]
; Line 1230
	mov	ebx, DWORD PTR _contextlen$[esp+16]
	lea	eax, DWORD PTR [edi+64]
	mov	DWORD PTR _vallen$1$[esp+20], eax
	cmp	DWORD PTR _use_context$[esp+16], esi
	je	SHORT $LN3@tls1_expor
; Line 1231
	add	eax, 2
	add	eax, ebx
	mov	DWORD PTR _vallen$1$[esp+20], eax
$LN3@tls1_expor:
; Line 1234
	push	1234					; 000004d2H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 1235
	test	esi, esi
	je	$err2$30
; Line 1238
	push	edi
	push	DWORD PTR _label$[esp+20]
	push	esi
	call	_memcpy
; Line 1240
	mov	edx, DWORD PTR _s$[esp+28]
; Line 1241
	lea	ecx, DWORD PTR [edi+32]
	add	esp, 12					; 0000000cH
; Line 1245
	cmp	DWORD PTR _use_context$[esp+16], 0
	mov	eax, DWORD PTR [edx+88]
	movups	xmm0, XMMWORD PTR [eax+192]
	movups	XMMWORD PTR [esi+edi], xmm0
	movups	xmm0, XMMWORD PTR [eax+208]
	movups	XMMWORD PTR [esi+edi+16], xmm0
	mov	eax, DWORD PTR [edx+88]
	movups	xmm0, XMMWORD PTR [eax+160]
	movups	XMMWORD PTR [ecx+esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+176]
	movups	XMMWORD PTR [ecx+esi+16], xmm0
	je	SHORT $LN6@tls1_expor
; Line 1246
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR [ecx+esi+32], al
; Line 1250
	mov	eax, DWORD PTR _context$[esp+16]
	mov	BYTE PTR [ecx+esi+33], bl
	add	ecx, 34					; 00000022H
	test	ebx, ebx
	jne	SHORT $LN7@tls1_expor
	test	eax, eax
	je	SHORT $LN6@tls1_expor
$LN7@tls1_expor:
; Line 1251
	push	ebx
	push	eax
	lea	eax, DWORD PTR [ecx+esi]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@tls1_expor:
; Line 1261
	mov	ecx, esi
	mov	edx, OFFSET ??_C@_0BA@OOFGCNEE@client?5finished?$AA@
	mov	edi, 11					; 0000000bH
$LL17@tls1_expor:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN16@tls1_expor
	add	ecx, 4
	add	edx, 4
	sub	edi, 4
	jae	SHORT $LL17@tls1_expor
	mov	ax, WORD PTR [ecx]
	cmp	ax, WORD PTR [edx]
	jne	SHORT $LN16@tls1_expor
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	je	$err1$31
$LN16@tls1_expor:
; Line 1264
	mov	ecx, esi
	mov	edx, OFFSET ??_C@_0BA@MHGDKHGN@server?5finished?$AA@
	mov	edi, 11					; 0000000bH
$LL20@tls1_expor:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN19@tls1_expor
	add	ecx, 4
	add	edx, 4
	sub	edi, 4
	jae	SHORT $LL20@tls1_expor
	mov	ax, WORD PTR [ecx]
	cmp	ax, WORD PTR [edx]
	jne	SHORT $LN19@tls1_expor
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	je	SHORT $err1$31
$LN19@tls1_expor:
; Line 1267
	mov	ecx, esi
	mov	edx, OFFSET ??_C@_0O@FEJGMKDJ@master?5secret?$AA@
	mov	edi, 9
	npad	1
$LL23@tls1_expor:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN22@tls1_expor
	add	ecx, 4
	add	edx, 4
	sub	edi, 4
	jae	SHORT $LL23@tls1_expor
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	je	SHORT $err1$31
$LN22@tls1_expor:
; Line 1270
	mov	ecx, esi
	mov	edx, OFFSET ??_C@_0O@EOHBJBLD@key?5expansion?$AA@
	mov	edi, 9
$LL26@tls1_expor:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN25@tls1_expor
	add	ecx, 4
	add	edx, 4
	sub	edi, 4
	jae	SHORT $LL26@tls1_expor
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN25@tls1_expor
$err1$31:
; Line 1289
	push	1290					; 0000050aH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	367					; 0000016fH
; Line 1292
	jmp	SHORT $LN28@tls1_expor
$LN25@tls1_expor:
; Line 1273
	push	DWORD PTR _olen$[esp+16]
	mov	ecx, DWORD PTR _s$[esp+20]
	push	ebp
	push	DWORD PTR _out$[esp+24]
	mov	ebx, DWORD PTR _vallen$1$[esp+32]
	mov	eax, DWORD PTR [ecx+192]
	push	DWORD PTR [eax+16]
	add	eax, 20					; 00000014H
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	ebx
	push	esi
	push	ecx
	call	_ssl_get_algorithm2
	add	esp, 4
	push	eax
	call	_tls1_PRF
; Line 1281
	push	ebx
	push	esi
	mov	edi, eax
	call	_OPENSSL_cleanse
	add	esp, 72					; 00000048H
; Line 1282
	push	DWORD PTR _olen$[esp+16]
	push	ebp
	call	_OPENSSL_cleanse
	add	esp, 8
	jmp	SHORT $ret$32
$err2$30:
; Line 1294
	push	1294					; 0000050eH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	65					; 00000041H
$LN28@tls1_expor:
	push	314					; 0000013aH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1295
	xor	edi, edi
$ret$32:
; Line 1297
	test	ebp, ebp
	je	SHORT $LN12@tls1_expor
; Line 1298
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$LN12@tls1_expor:
; Line 1299
	test	esi, esi
	je	SHORT $LN27@tls1_expor
; Line 1300
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN27@tls1_expor:
; Line 1301
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1302
	pop	ecx
	ret	0
_tls1_export_keying_material ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_generate_master_secret
_TEXT	SEGMENT
_buff$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_out$ = 12						; size = 4
_p$ = 16						; size = 4
_len$ = 20						; size = 4
_tls1_generate_master_secret PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 1137
	mov	eax, 52					; 00000034H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+52], eax
	mov	ecx, DWORD PTR _p$[esp+48]
; Line 1164
	lea	eax, DWORD PTR _buff$[esp+52]
	push	esi
	mov	esi, DWORD PTR _s$[esp+52]
	push	48					; 00000030H
	push	eax
	mov	eax, DWORD PTR [esi+192]
	mov	edx, DWORD PTR [esi+88]
	add	eax, 20					; 00000014H
	push	eax
	push	DWORD PTR _len$[esp+64]
	push	ecx
	push	0
	push	0
	push	32					; 00000020H
	lea	eax, DWORD PTR [edx+160]
	push	eax
	push	0
	push	0
	push	32					; 00000020H
	lea	eax, DWORD PTR [edx+192]
	push	eax
	push	13					; 0000000dH
	push	OFFSET ??_C@_0O@FEJGMKDJ@master?5secret?$AA@
	push	esi
	call	_ssl_get_algorithm2
	add	esp, 4
	push	eax
	call	_tls1_PRF
; Line 1170
	lea	eax, DWORD PTR _buff$[esp+120]
	push	48					; 00000030H
	push	eax
	call	_OPENSSL_cleanse
; Line 1203
	mov	ecx, DWORD PTR __$ArrayPad$[esp+128]
	add	esp, 72					; 00000048H
	mov	eax, 48					; 00000030H
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	ret	0
_tls1_generate_master_secret ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_mac
_TEXT	SEGMENT
_md_size$ = -72						; size = 4
_orig_len$1$ = -68					; size = 4
_md_size$1$ = -68					; size = 4
_rec$1$ = -64						; size = 4
_md$GSCopy$1$ = -60					; size = 4
_ssl$GSCopy$1$ = -56					; size = 4
_hmac$ = -52						; size = 24
_header$ = -28						; size = 13
_dtlsseq$1 = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_ssl$ = 8						; size = 4
_md$ = 12						; size = 4
_send$ = 16						; size = 4
_tls1_mac PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 1007
	mov	eax, 72					; 00000048H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+72], eax
; Line 1015
	cmp	DWORD PTR _send$[esp+68], 0
	mov	eax, DWORD PTR _md$[esp+68]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _ssl$[esp+80]
	push	edi
	mov	DWORD PTR _md$GSCopy$1$[esp+88], eax
	mov	DWORD PTR _ssl$GSCopy$1$[esp+88], esi
	mov	edi, DWORD PTR [esi+124]
; Line 1020
	mov	eax, DWORD PTR [esi+88]
	je	SHORT $LN23@tls1_mac
; Line 1022
	mov	ebp, DWORD PTR [esi+144]
	lea	ecx, DWORD PTR [eax+304]
	and	edi, 2
	lea	ebx, DWORD PTR [eax+84]
; Line 1023
	jmp	SHORT $LN37@tls1_mac
$LN23@tls1_mac:
; Line 1026
	mov	ebp, DWORD PTR [esi+132]
	lea	ecx, DWORD PTR [eax+268]
	and	edi, 1
	lea	ebx, DWORD PTR [eax+8]
$LN37@tls1_mac:
; Line 1029
	push	ebp
	mov	DWORD PTR _rec$1$[esp+92], ecx
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	mov	ecx, eax
	add	esp, 8
	mov	DWORD PTR _md_size$1$[esp+88], ecx
; Line 1030
	test	ecx, ecx
	jns	SHORT $LN26@tls1_mac
	push	OFFSET ??_C@_06IGEDIHAH@t?5?$DO?$DN?50?$AA@
	push	1030					; 00000406H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	call	_OpenSSLDie
	mov	ecx, DWORD PTR _md_size$1$[esp+100]
	add	esp, 12					; 0000000cH
$LN26@tls1_mac:
; Line 1031
	mov	DWORD PTR _md_size$[esp+88], ecx
; Line 1034
	test	edi, edi
	jne	SHORT $LN8@tls1_mac
; Line 1037
	lea	eax, DWORD PTR _hmac$[esp+88]
	push	ebp
	push	eax
	call	_EVP_MD_CTX_copy
	add	esp, 8
	test	eax, eax
	je	$LN18@tls1_mac
; Line 1039
	mov	eax, DWORD PTR _md_size$[esp+88]
	lea	ebp, DWORD PTR _hmac$[esp+88]
	mov	DWORD PTR _md_size$1$[esp+88], eax
$LN8@tls1_mac:
; Line 1042
	mov	eax, DWORD PTR [esi+8]
; Line 1045
	mov	edx, DWORD PTR _send$[esp+84]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN10@tls1_mac
	mov	eax, DWORD PTR [esi+92]
	test	edx, edx
	je	SHORT $LN27@tls1_mac
	movzx	ecx, WORD PTR [eax+522]
	jmp	SHORT $LN28@tls1_mac
$LN27@tls1_mac:
	movzx	ecx, WORD PTR [eax+520]
$LN28@tls1_mac:
	sar	ecx, 8
	mov	BYTE PTR _dtlsseq$1[esp+88], cl
	test	edx, edx
	je	SHORT $LN29@tls1_mac
	movzx	eax, WORD PTR [eax+522]
	jmp	SHORT $LN30@tls1_mac
$LN29@tls1_mac:
	movzx	eax, WORD PTR [eax+520]
$LN30@tls1_mac:
	mov	BYTE PTR _dtlsseq$1[esp+89], al
; Line 1046
	mov	eax, DWORD PTR [ebx+2]
	mov	DWORD PTR _dtlsseq$1[esp+90], eax
	mov	ax, WORD PTR [ebx+6]
	mov	WORD PTR _dtlsseq$1[esp+94], ax
; Line 1048
	mov	eax, DWORD PTR _dtlsseq$1[esp+88]
	mov	DWORD PTR _header$[esp+88], eax
	mov	eax, DWORD PTR _dtlsseq$1[esp+92]
; Line 1049
	jmp	SHORT $LN38@tls1_mac
$LN10@tls1_mac:
; Line 1050
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _header$[esp+88], eax
	mov	eax, DWORD PTR [ebx+4]
$LN38@tls1_mac:
; Line 1055
	mov	ecx, DWORD PTR _rec$1$[esp+88]
	mov	DWORD PTR _header$[esp+92], eax
	mov	eax, DWORD PTR [ecx]
	mov	esi, eax
	shr	esi, 8
	add	esi, DWORD PTR [ecx+4]
	add	DWORD PTR _md_size$1$[esp+88], esi
; Line 1059
	mov	esi, DWORD PTR _ssl$GSCopy$1$[esp+88]
	movzx	eax, al
	mov	DWORD PTR [ecx], eax
	mov	BYTE PTR _header$[esp+96], al
	mov	eax, DWORD PTR [esi]
	sar	eax, 8
	mov	BYTE PTR _header$[esp+97], al
; Line 1060
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR _header$[esp+98], al
; Line 1061
	mov	eax, DWORD PTR [ecx+4]
	shr	eax, 8
	mov	BYTE PTR _header$[esp+99], al
; Line 1062
	mov	al, BYTE PTR [ecx+4]
	mov	BYTE PTR _header$[esp+100], al
; Line 1065
	test	edx, edx
	jne	$LN12@tls1_mac
	push	DWORD PTR [esi+128]
	call	_EVP_CIPHER_CTX_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN12@tls1_mac
	push	ebp
	call	_ssl3_cbc_record_digest_supported
	add	esp, 4
	test	al, al
	je	SHORT $LN12@tls1_mac
; Line 1078
	mov	eax, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR _rec$1$[esp+88]
	push	0
	push	DWORD PTR [eax+16]
	add	eax, 20					; 00000014H
	push	eax
	push	DWORD PTR _orig_len$1$[esp+100]
	mov	eax, DWORD PTR [ecx+4]
	add	eax, DWORD PTR _md_size$[esp+104]
	push	eax
	push	DWORD PTR [ecx+16]
	lea	eax, DWORD PTR _header$[esp+112]
	push	eax
	lea	eax, DWORD PTR _md_size$[esp+116]
	push	eax
	push	DWORD PTR _md$GSCopy$1$[esp+120]
	push	ebp
	call	_ssl3_cbc_digest_record
	add	esp, 40					; 00000028H
	test	eax, eax
	jg	SHORT $LN16@tls1_mac
$LN17@tls1_mac:
; Line 1087
	test	edi, edi
	jne	SHORT $LN18@tls1_mac
; Line 1088
	lea	eax, DWORD PTR _hmac$[esp+88]
	push	eax
	call	_EVP_MD_CTX_cleanup
	add	esp, 4
$LN18@tls1_mac:
; Line 1089
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 1133
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN12@tls1_mac:
; Line 1086
	push	13					; 0000000dH
	lea	eax, DWORD PTR _header$[esp+92]
	push	eax
	push	ebp
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN17@tls1_mac
	mov	ecx, DWORD PTR _rec$1$[esp+88]
	push	DWORD PTR [ecx+4]
	push	DWORD PTR [ecx+16]
	push	ebp
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN17@tls1_mac
	lea	eax, DWORD PTR _md_size$[esp+88]
	push	eax
	push	DWORD PTR _md$GSCopy$1$[esp+92]
	push	ebp
	call	_EVP_DigestSignFinal
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN17@tls1_mac
$LN16@tls1_mac:
; Line 1098
	test	edi, edi
	jne	SHORT $LN19@tls1_mac
; Line 1099
	lea	eax, DWORD PTR _hmac$[esp+88]
	push	eax
	call	_EVP_MD_CTX_cleanup
	add	esp, 4
$LN19@tls1_mac:
; Line 1117
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	jne	SHORT $LN36@tls1_mac
; Line 1118
	mov	eax, 7
	npad	1
$LL4@tls1_mac:
; Line 1119
	add	BYTE PTR [eax+ebx], 1
; Line 1120
	jne	SHORT $LN36@tls1_mac
; Line 1118
	sub	eax, 1
	jns	SHORT $LL4@tls1_mac
$LN36@tls1_mac:
; Line 1133
	mov	ecx, DWORD PTR __$ArrayPad$[esp+88]
	mov	eax, DWORD PTR _md_size$[esp+88]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
_tls1_mac ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_cert_verify_mac
_TEXT	SEGMENT
_ctx$ = -24						; size = 24
_ret$ = 8						; size = 4
_s$ = 8							; size = 4
_md_nid$ = 12						; size = 4
_out$ = 16						; size = 4
_tls1_cert_verify_mac PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 922
	mov	eax, 24					; 00000018H
	call	__chkstk
	push	edi
; Line 927
	mov	edi, DWORD PTR _s$[esp+24]
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+376], 0
	je	SHORT $LN6@tls1_cert_
; Line 928
	push	edi
	call	_ssl3_digest_cached_records
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@tls1_cert_
	pop	edi
; Line 949
	add	esp, 24					; 00000018H
	ret	0
$LN6@tls1_cert_:
	push	ebx
; Line 931
	mov	ebx, DWORD PTR _md_nid$[esp+28]
	push	esi
	xor	esi, esi
	npad	11
$LL4@tls1_cert_:
; Line 933
	mov	eax, DWORD PTR [edi+88]
	mov	eax, DWORD PTR [eax+380]
	mov	eax, DWORD PTR [eax+esi*4]
	test	eax, eax
	je	SHORT $LN2@tls1_cert_
	push	eax
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_type
	add	esp, 8
	cmp	eax, ebx
	je	SHORT $LN13@tls1_cert_
$LN2@tls1_cert_:
; Line 931
	inc	esi
	cmp	esi, 6
	jl	SHORT $LL4@tls1_cert_
$LN18@tls1_cert_:
; Line 939
	push	939					; 000003abH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	324					; 00000144H
	push	286					; 0000011eH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 940
	xor	eax, eax
	pop	esi
	pop	ebx
	pop	edi
; Line 949
	add	esp, 24					; 00000018H
	ret	0
$LN13@tls1_cert_:
; Line 934
	mov	eax, DWORD PTR [edi+88]
	mov	eax, DWORD PTR [eax+380]
	mov	esi, DWORD PTR [eax+esi*4]
; Line 938
	test	esi, esi
	je	SHORT $LN18@tls1_cert_
; Line 943
	lea	eax, DWORD PTR _ctx$[esp+36]
	push	eax
	call	_EVP_MD_CTX_init
; Line 945
	lea	eax, DWORD PTR _ctx$[esp+40]
	push	esi
	push	eax
	call	_EVP_MD_CTX_copy_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN10@tls1_cert_
	lea	eax, DWORD PTR _ret$[esp+32]
	push	eax
	push	DWORD PTR _out$[esp+36]
	lea	eax, DWORD PTR _ctx$[esp+44]
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	SHORT $LN9@tls1_cert_
$LN10@tls1_cert_:
; Line 946
	mov	DWORD PTR _ret$[esp+32], 0
$LN9@tls1_cert_:
; Line 947
	lea	eax, DWORD PTR _ctx$[esp+36]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 948
	mov	eax, DWORD PTR _ret$[esp+36]
	add	esp, 4
	pop	esi
	pop	ebx
	pop	edi
; Line 949
	add	esp, 24					; 00000018H
	ret	0
_tls1_cert_verify_mac ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_final_finish_mac
_TEXT	SEGMENT
_err$1$ = -192						; size = 4
_md$ = -188						; size = 4
_mask$ = -184						; size = 4
_i$ = -180						; size = 4
_out$GSCopy$1$ = -176					; size = 4
_str$GSCopy$1$ = -172					; size = 4
_ctx$ = -168						; size = 24
_buf2$ = -144						; size = 12
_buf$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_str$ = 12						; size = 4
_slen$ = 16						; size = 4
_out$ = 20						; size = 4
_tls1_final_finish_mac PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 953
	mov	eax, 192				; 000000c0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+192], eax
	mov	eax, DWORD PTR _str$[esp+188]
	push	ebp
	mov	ebp, DWORD PTR _s$[esp+192]
	mov	DWORD PTR _str$GSCopy$1$[esp+196], eax
	mov	eax, DWORD PTR _out$[esp+192]
	mov	DWORD PTR _out$GSCopy$1$[esp+196], eax
; Line 965
	mov	eax, DWORD PTR [ebp+88]
	push	esi
	xor	esi, esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+204]
	mov	DWORD PTR _err$1$[esp+204], esi
	cmp	DWORD PTR [eax+376], esi
	je	SHORT $LN6@tls1_final
; Line 966
	push	ebp
	call	_ssl3_digest_cached_records
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@tls1_final
	pop	edi
	pop	esi
	pop	ebp
; Line 1004
	mov	ecx, DWORD PTR __$ArrayPad$[esp+192]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 192				; 000000c0H
	ret	0
$LN6@tls1_final:
; Line 969
	lea	eax, DWORD PTR _ctx$[esp+204]
	push	ebx
	push	eax
	call	_EVP_MD_CTX_init
; Line 971
	lea	eax, DWORD PTR _md$[esp+212]
	xor	ebx, ebx
	push	eax
	lea	eax, DWORD PTR _mask$[esp+216]
	push	eax
	push	ebx
	call	_ssl_get_handshake_digest
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN3@tls1_final
	npad	6
$LL4@tls1_final:
; Line 972
	push	ebp
	call	_ssl_get_algorithm2
	add	esp, 4
	test	DWORD PTR _mask$[esp+208], eax
	je	SHORT $LN2@tls1_final
; Line 973
	push	DWORD PTR _md$[esp+208]
	call	_EVP_MD_size
	mov	esi, eax
	add	esp, 4
; Line 974
	mov	eax, DWORD PTR [ebp+88]
	mov	eax, DWORD PTR [eax+380]
	mov	ecx, DWORD PTR [eax+ebx*4]
; Line 976
	test	ecx, ecx
	je	SHORT $LN10@tls1_final
	test	esi, esi
	js	SHORT $LN10@tls1_final
	lea	eax, DWORD PTR _buf$[esp+336]
	sub	eax, edi
	cmp	esi, eax
	jg	SHORT $LN10@tls1_final
; Line 983
	push	ecx
	lea	eax, DWORD PTR _ctx$[esp+212]
	push	eax
	call	_EVP_MD_CTX_copy_ex
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@tls1_final
	lea	eax, DWORD PTR _i$[esp+208]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+212]
	push	edi
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN12@tls1_final
	cmp	DWORD PTR _i$[esp+208], esi
	je	SHORT $LN11@tls1_final
$LN12@tls1_final:
; Line 985
	mov	DWORD PTR _err$1$[esp+208], 1
$LN11@tls1_final:
; Line 986
	add	edi, esi
	mov	esi, DWORD PTR _err$1$[esp+208]
	jmp	SHORT $LN2@tls1_final
$LN10@tls1_final:
; Line 980
	mov	esi, 1
	mov	DWORD PTR _err$1$[esp+208], esi
$LN2@tls1_final:
; Line 971
	lea	eax, DWORD PTR _md$[esp+208]
	inc	ebx
	push	eax
	lea	eax, DWORD PTR _mask$[esp+212]
	push	eax
	push	ebx
	call	_ssl_get_handshake_digest
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL4@tls1_final
$LN3@tls1_final:
; Line 991
	mov	eax, DWORD PTR [ebp+192]
	lea	ecx, DWORD PTR _buf$[esp+208]
	push	12					; 0000000cH
	sub	edi, ecx
	lea	ecx, DWORD PTR _buf2$[esp+212]
	push	ecx
	push	DWORD PTR _out$GSCopy$1$[esp+216]
	push	DWORD PTR [eax+16]
	add	eax, 20					; 00000014H
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	edi
	lea	eax, DWORD PTR _buf$[esp+256]
	push	eax
	push	DWORD PTR _slen$[esp+256]
	push	DWORD PTR _str$GSCopy$1$[esp+264]
	push	ebp
	call	_ssl_get_algorithm2
	add	esp, 4
	push	eax
	call	_tls1_PRF
	test	eax, eax
	mov	ecx, 1
; Line 996
	lea	eax, DWORD PTR _ctx$[esp+272]
	push	eax
	cmove	esi, ecx
	call	_EVP_MD_CTX_cleanup
	add	esp, 68					; 00000044H
; Line 998
	lea	eax, DWORD PTR _buf$[esp+208]
	push	edi
	push	eax
	call	_OPENSSL_cleanse
; Line 999
	lea	eax, DWORD PTR _buf2$[esp+216]
	push	12					; 0000000cH
	push	eax
	call	_OPENSSL_cleanse
	add	esp, 16					; 00000010H
; Line 1000
	xor	ecx, ecx
	test	esi, esi
	mov	eax, 12					; 0000000cH
	cmovne	eax, ecx
; Line 1004
	mov	ecx, DWORD PTR __$ArrayPad$[esp+208]
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 192				; 000000c0H
	ret	0
_tls1_final_finish_mac ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_enc
_TEXT	SEGMENT
_j$1$ = -72						; size = 4
_rec$1$ = -72						; size = 4
tv686 = -68						; size = 4
_s$GSCopy$1$ = -68					; size = 4
_enc$1$ = -64						; size = 4
_bs$1$ = -60						; size = 4
_i$2$ = -56						; size = 4
_ds$1$ = -52						; size = 4
_pad$1$ = -48						; size = 4
tv732 = -44						; size = 4
tv733 = -40						; size = 4
tv735 = -36						; size = 4
_buf$1 = -32						; size = 13
_dtlsseq$2 = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_send$ = 12						; size = 4
_tls1_enc PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 752
	mov	eax, 72					; 00000048H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+72], eax
; Line 759
	cmp	DWORD PTR _send$[esp+68], 0
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+80]
	push	edi
	mov	DWORD PTR _s$GSCopy$1$[esp+88], esi
	mov	DWORD PTR _pad$1$[esp+88], 0
	je	$LN8@tls1_enc
; Line 760
	push	DWORD PTR [esi+144]
	call	_EVP_MD_CTX_md
	add	esp, 4
	test	eax, eax
	je	SHORT $LN45@tls1_enc
; Line 761
	push	DWORD PTR [esi+144]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	add	esp, 8
; Line 762
	test	eax, eax
	jns	SHORT $LN45@tls1_enc
	push	OFFSET ??_C@_06EFONEEIH@n?5?$DO?$DN?50?$AA@
	push	762					; 000002faH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN45@tls1_enc:
; Line 765
	mov	ebx, DWORD PTR [esi+88]
	mov	ebp, DWORD PTR [esi+140]
	add	ebx, 304				; 00000130H
	mov	DWORD PTR _ds$1$[esp+88], ebp
	mov	DWORD PTR _rec$1$[esp+88], ebx
; Line 766
	test	ebp, ebp
	jne	SHORT $LN11@tls1_enc
; Line 767
	xor	edi, edi
	mov	DWORD PTR _enc$1$[esp+88], edi
	jmp	$LN21@tls1_enc
$LN11@tls1_enc:
; Line 770
	push	ebp
	call	_EVP_CIPHER_CTX_cipher
	mov	edi, eax
	add	esp, 4
; Line 773
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _enc$1$[esp+88], edi
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 1
	je	$LN21@tls1_enc
	push	edi
	call	_EVP_CIPHER_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 2
	jne	$LN21@tls1_enc
; Line 774
	push	edi
	call	_EVP_CIPHER_iv_length
	add	esp, 4
; Line 777
	cmp	eax, 1
	jle	$LN21@tls1_enc
; Line 778
	mov	ecx, DWORD PTR [ebx+16]
	cmp	DWORD PTR [ebx+12], ecx
	je	SHORT $LN16@tls1_enc
; Line 783
	push	785					; 00000311H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	OFFSET ??_C@_0CA@DAEFHPJI@?$CFs?3?$CFd?3?5rec?9?$DOdata?5?$CB?$DN?5rec?9?$DOinput?6?$AA@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
	jmp	$LN21@tls1_enc
$LN16@tls1_enc:
; Line 786
	push	eax
	push	ecx
	call	_RAND_bytes
	add	esp, 8
	test	eax, eax
	jg	$LN21@tls1_enc
$LN77@tls1_enc:
	pop	edi
	pop	esi
	pop	ebp
; Line 787
	or	eax, -1
	pop	ebx
; Line 919
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN8@tls1_enc:
; Line 791
	push	DWORD PTR [esi+132]
	call	_EVP_MD_CTX_md
	add	esp, 4
	test	eax, eax
	je	SHORT $LN47@tls1_enc
; Line 792
	push	DWORD PTR [esi+132]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	add	esp, 8
; Line 793
	test	eax, eax
	jns	SHORT $LN47@tls1_enc
	push	OFFSET ??_C@_06EFONEEIH@n?5?$DO?$DN?50?$AA@
	push	793					; 00000319H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN47@tls1_enc:
; Line 796
	mov	ebx, DWORD PTR [esi+88]
	mov	ebp, DWORD PTR [esi+128]
	add	ebx, 268				; 0000010cH
	mov	DWORD PTR _ds$1$[esp+88], ebp
	mov	DWORD PTR _rec$1$[esp+88], ebx
; Line 797
	test	ebp, ebp
	jne	SHORT $LN20@tls1_enc
; Line 798
	xor	edi, edi
	mov	DWORD PTR _enc$1$[esp+88], edi
	jmp	SHORT $LN21@tls1_enc
$LN20@tls1_enc:
; Line 800
	push	ebp
	call	_EVP_CIPHER_CTX_cipher
	add	esp, 4
	mov	DWORD PTR _enc$1$[esp+88], eax
	mov	edi, eax
$LN21@tls1_enc:
; Line 807
	cmp	DWORD PTR [esi+192], 0
	je	$LN24@tls1_enc
	test	ebp, ebp
	je	$LN24@tls1_enc
	test	edi, edi
	je	$LN24@tls1_enc
; Line 813
	push	DWORD PTR [ebp]
	mov	edi, DWORD PTR [ebx+4]
	call	_EVP_CIPHER_block_size
; Line 815
	push	DWORD PTR [ebp]
	mov	DWORD PTR _bs$1$[esp+96], eax
	call	_EVP_CIPHER_flags
	add	esp, 8
	test	eax, 2097152				; 00200000H
	je	$LN25@tls1_enc
; Line 818
	mov	edx, DWORD PTR _send$[esp+84]
	mov	ecx, DWORD PTR [esi+88]
	test	edx, edx
	je	SHORT $LN48@tls1_enc
	add	ecx, 84					; 00000054H
	jmp	SHORT $LN49@tls1_enc
$LN48@tls1_enc:
	add	ecx, 8
$LN49@tls1_enc:
; Line 820
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN27@tls1_enc
; Line 823
	mov	eax, DWORD PTR [esi+92]
	test	edx, edx
	je	SHORT $LN50@tls1_enc
	movzx	ebx, WORD PTR [eax+522]
	jmp	SHORT $LN76@tls1_enc
$LN50@tls1_enc:
	movzx	ebx, WORD PTR [eax+520]
$LN76@tls1_enc:
	mov	DWORD PTR tv686[esp+88], ebx
	sar	ebx, 8
	mov	BYTE PTR _dtlsseq$2[esp+88], bl
	test	edx, edx
	je	SHORT $LN52@tls1_enc
	movzx	eax, WORD PTR [eax+522]
	jmp	SHORT $LN53@tls1_enc
$LN52@tls1_enc:
	movzx	eax, WORD PTR [eax+520]
$LN53@tls1_enc:
; Line 826
	mov	ebx, DWORD PTR _rec$1$[esp+88]
	mov	BYTE PTR _dtlsseq$2[esp+89], al
	mov	eax, DWORD PTR [ecx+2]
	mov	DWORD PTR _dtlsseq$2[esp+90], eax
	mov	ax, WORD PTR [ecx+6]
	mov	WORD PTR _dtlsseq$2[esp+94], ax
	mov	eax, DWORD PTR _dtlsseq$2[esp+88]
	mov	DWORD PTR _buf$1[esp+88], eax
	mov	eax, DWORD PTR _dtlsseq$2[esp+92]
	mov	DWORD PTR _buf$1[esp+92], eax
	jmp	SHORT $LN71@tls1_enc
$LN27@tls1_enc:
; Line 827
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _buf$1[esp+88], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _buf$1[esp+92], eax
; Line 828
	mov	eax, 7
$LL4@tls1_enc:
; Line 829
	add	BYTE PTR [eax+ecx], 1
; Line 830
	jne	SHORT $LN71@tls1_enc
; Line 828
	sub	eax, 1
	jns	SHORT $LL4@tls1_enc
$LN71@tls1_enc:
; Line 835
	movzx	eax, BYTE PTR [ebx]
	mov	BYTE PTR _buf$1[esp+96], al
; Line 836
	mov	eax, DWORD PTR [esi]
	sar	eax, 8
	mov	BYTE PTR _buf$1[esp+97], al
; Line 837
	movzx	eax, BYTE PTR [esi]
	mov	BYTE PTR _buf$1[esp+98], al
; Line 838
	mov	eax, DWORD PTR [ebx+4]
	shr	eax, 8
	mov	BYTE PTR _buf$1[esp+99], al
; Line 839
	movzx	eax, BYTE PTR [ebx+4]
	mov	BYTE PTR _buf$1[esp+100], al
; Line 840
	lea	eax, DWORD PTR _buf$1[esp+88]
	push	eax
	push	13					; 0000000dH
	push	22					; 00000016H
	push	ebp
	call	_EVP_CIPHER_CTX_ctrl
	mov	ecx, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pad$1$[esp+88], ecx
; Line 842
	test	ecx, ecx
	jle	$LN77@tls1_enc
; Line 844
	mov	eax, DWORD PTR _send$[esp+84]
	test	eax, eax
	je	$LN70@tls1_enc
; Line 845
	add	edi, ecx
; Line 846
	add	DWORD PTR [ebx+4], ecx
; Line 847
	jmp	$LN32@tls1_enc
$LN25@tls1_enc:
; Line 848
	mov	ecx, DWORD PTR _bs$1$[esp+88]
	cmp	ecx, 1
	je	$LN72@tls1_enc
	cmp	DWORD PTR _send$[esp+84], 0
	je	$LN70@tls1_enc
; Line 849
	mov	eax, edi
	cdq
	idiv	ecx
	sub	ecx, edx
	mov	DWORD PTR _i$2$[esp+88], ecx
; Line 854
	dec	ecx
; Line 855
	test	DWORD PTR [esi+256], 512		; 00000200H
	mov	DWORD PTR _j$1$[esp+88], ecx
	je	SHORT $LN34@tls1_enc
; Line 856
	mov	eax, DWORD PTR [esi+88]
	test	BYTE PTR [eax], 8
	je	SHORT $LN34@tls1_enc
; Line 857
	inc	ecx
	mov	DWORD PTR _j$1$[esp+88], ecx
$LN34@tls1_enc:
; Line 859
	mov	ecx, DWORD PTR _i$2$[esp+88]
	mov	ebp, edi
	add	ecx, edi
	mov	edx, ecx
	mov	DWORD PTR tv735[esp+88], ecx
	sub	edx, edi
	cmp	edi, ecx
	jge	$LN6@tls1_enc
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN62@tls1_enc
; Line 860
	mov	eax, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [eax+edi]
	dec	eax
	add	eax, ecx
	mov	DWORD PTR tv733[esp+88], esi
	mov	DWORD PTR tv732[esp+88], eax
	lea	eax, DWORD PTR [ebx+16]
	cmp	esi, eax
	mov	esi, DWORD PTR _s$GSCopy$1$[esp+88]
	ja	SHORT $LN63@tls1_enc
	cmp	DWORD PTR tv732[esp+88], eax
	jae	SHORT $LN62@tls1_enc
$LN63@tls1_enc:
	and	edx, -2147483633			; 8000000fH
	jns	SHORT $LN75@tls1_enc
	dec	edx
	or	edx, -16				; fffffff0H
	inc	edx
$LN75@tls1_enc:
	sub	ecx, edx
	npad	6
$LL7@tls1_enc:
; Line 859
	add	ebp, 16					; 00000010H
	cmp	ebp, ecx
	jl	SHORT $LL7@tls1_enc
; Line 860
	sub	ecx, edi
	mov	edi, DWORD PTR tv733[esp+88]
	lea	eax, DWORD PTR [ecx+15]
	cdq
	and	edx, 15					; 0000000fH
	lea	ecx, DWORD PTR [edx+eax]
	movzx	eax, BYTE PTR _j$1$[esp+88]
	and	ecx, -16				; fffffff0H
	imul	eax, 16843009				; 01010101H
	mov	esi, ecx
	shr	ecx, 2
	rep stosd
	mov	ecx, esi
	mov	esi, DWORD PTR _s$GSCopy$1$[esp+88]
	and	ecx, 3
	rep stosb
	mov	ecx, DWORD PTR tv735[esp+88]
$LN62@tls1_enc:
; Line 859
	cmp	ebp, ecx
	jge	SHORT $LN6@tls1_enc
	mov	edx, DWORD PTR _j$1$[esp+88]
$LL61@tls1_enc:
; Line 860
	mov	eax, DWORD PTR [ebx+16]
	mov	BYTE PTR [eax+ebp], dl
	inc	ebp
	cmp	ebp, ecx
	jl	SHORT $LL61@tls1_enc
$LN6@tls1_enc:
; Line 862
	mov	eax, DWORD PTR _i$2$[esp+88]
	mov	edi, ecx
	add	DWORD PTR [ebx+4], eax
	mov	ebp, DWORD PTR _ds$1$[esp+88]
$LN72@tls1_enc:
	mov	eax, DWORD PTR _send$[esp+84]
$LN32@tls1_enc:
; Line 885
	test	eax, eax
	jne	SHORT $LN36@tls1_enc
$LN70@tls1_enc:
; Line 886
	test	edi, edi
	je	SHORT $LN37@tls1_enc
	xor	edx, edx
	mov	eax, edi
	div	DWORD PTR _bs$1$[esp+88]
	test	edx, edx
	je	SHORT $LN36@tls1_enc
$LN37@tls1_enc:
	pop	edi
	pop	esi
	pop	ebp
; Line 887
	xor	eax, eax
	pop	ebx
; Line 919
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN36@tls1_enc:
; Line 890
	push	edi
	push	DWORD PTR [ebx+16]
	push	DWORD PTR [ebx+12]
	push	ebp
	call	_EVP_Cipher
; Line 892
	push	DWORD PTR [ebp]
	mov	edi, eax
	call	_EVP_CIPHER_flags
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	test	eax, 1048576				; 00100000H
	je	SHORT $LN54@tls1_enc
	test	edi, edi
	sets	cl
	jmp	SHORT $LN55@tls1_enc
$LN54@tls1_enc:
	test	edi, edi
	sete	cl
$LN55@tls1_enc:
	test	ecx, ecx
	jne	$LN77@tls1_enc
; Line 895
	push	DWORD PTR _enc$1$[esp+88]
	call	_EVP_CIPHER_flags
	mov	ebp, DWORD PTR _send$[esp+88]
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 6
	jne	SHORT $LN39@tls1_enc
	test	ebp, ebp
	jne	SHORT $LN39@tls1_enc
; Line 896
	add	DWORD PTR [ebx+12], 8
; Line 897
	add	DWORD PTR [ebx+16], 8
; Line 898
	add	DWORD PTR [ebx+4], -8			; fffffff8H
$LN39@tls1_enc:
; Line 911
	push	DWORD PTR [esi+132]
	mov	edi, 1
	call	_EVP_MD_CTX_md
	add	esp, 4
	test	eax, eax
	je	SHORT $LN74@tls1_enc
; Line 912
	push	DWORD PTR [esi+132]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_size
	add	esp, 8
	mov	ecx, eax
	jmp	SHORT $LN40@tls1_enc
$LN74@tls1_enc:
	xor	ecx, ecx
$LN40@tls1_enc:
; Line 913
	mov	eax, DWORD PTR _bs$1$[esp+88]
	cmp	eax, 1
	je	SHORT $LN41@tls1_enc
	test	ebp, ebp
	jne	SHORT $LN41@tls1_enc
; Line 914
	push	ecx
	push	eax
	push	ebx
	push	esi
	call	_tls1_cbc_remove_padding
	add	esp, 16					; 00000010H
	mov	edi, eax
$LN41@tls1_enc:
; Line 915
	mov	eax, DWORD PTR _pad$1$[esp+88]
	test	eax, eax
	je	SHORT $LN42@tls1_enc
	test	ebp, ebp
	jne	SHORT $LN42@tls1_enc
; Line 916
	sub	DWORD PTR [ebx+4], eax
; Line 918
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 919
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN24@tls1_enc:
; Line 808
	push	DWORD PTR [ebx+4]
	push	DWORD PTR [ebx+16]
	push	DWORD PTR [ebx+12]
	call	DWORD PTR __imp__memmove
; Line 809
	mov	eax, DWORD PTR [ebx+12]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ebx+16], eax
; Line 810
	mov	edi, 1
$LN42@tls1_enc:
; Line 919
	mov	ecx, DWORD PTR __$ArrayPad$[esp+88]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
_tls1_enc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_setup_key_block
_TEXT	SEGMENT
_mac_secret_size$ = -20					; size = 4
_mac_type$ = -16					; size = 4
_ret$1$ = -12						; size = 4
_hash$ = -8						; size = 4
_comp$ = -4						; size = 4
_c$ = 8							; size = 4
_s$ = 8							; size = 4
_tls1_setup_key_block PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 634
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	edi
; Line 647
	mov	edi, DWORD PTR _s$[esp+20]
	mov	DWORD PTR _mac_type$[esp+24], 0
	mov	DWORD PTR _mac_secret_size$[esp+24], 0
	mov	DWORD PTR _ret$1$[esp+24], 0
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+884], 0
	je	SHORT $LN2@tls1_setup
; Line 648
	mov	eax, 1
	pop	edi
; Line 739
	add	esp, 20					; 00000014H
	ret	0
$LN2@tls1_setup:
; Line 650
	lea	eax, DWORD PTR _comp$[esp+24]
	push	eax
	lea	eax, DWORD PTR _mac_secret_size$[esp+28]
	push	eax
	lea	eax, DWORD PTR _mac_type$[esp+32]
	push	eax
	lea	eax, DWORD PTR _hash$[esp+36]
	push	eax
	lea	eax, DWORD PTR _c$[esp+36]
	push	eax
	push	DWORD PTR [edi+192]
	call	_ssl_cipher_get_evp
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN3@tls1_setup
; Line 652
	push	652					; 0000028cH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	138					; 0000008aH
	push	211					; 000000d3H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 653
	xor	eax, eax
	pop	edi
; Line 739
	add	esp, 20					; 00000014H
	ret	0
$LN3@tls1_setup:
; Line 656
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, DWORD PTR _c$[esp+20]
	push	ebx
	push	ebp
	mov	DWORD PTR [ecx+892], eax
; Line 657
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, DWORD PTR _hash$[esp+32]
	push	esi
	mov	DWORD PTR [ecx+896], eax
; Line 658
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, DWORD PTR _mac_type$[esp+36]
	mov	DWORD PTR [ecx+900], eax
; Line 659
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, DWORD PTR _mac_secret_size$[esp+36]
	mov	DWORD PTR [ecx+904], eax
; Line 660
	push	DWORD PTR _c$[esp+32]
	call	_EVP_CIPHER_iv_length
	push	DWORD PTR _c$[esp+36]
	mov	ebx, eax
	call	_EVP_CIPHER_key_length
; Line 662
	add	ebx, DWORD PTR _mac_secret_size$[esp+44]
; Line 664
	push	edi
	lea	ebx, DWORD PTR [ebx+eax]
	add	ebx, ebx
	call	_ssl3_cleanup_key_block
; Line 666
	push	666					; 0000029aH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 24					; 00000018H
	test	ebp, ebp
	jne	SHORT $LN4@tls1_setup
; Line 667
	push	667					; 0000029bH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	65					; 00000041H
	push	211					; 000000d3H
	push	20					; 00000014H
	call	_ERR_put_error
; Line 738
	mov	eax, DWORD PTR _ret$1$[esp+56]
	add	esp, 20					; 00000014H
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 739
	add	esp, 20					; 00000014H
	ret	0
$LN4@tls1_setup:
; Line 671
	mov	eax, DWORD PTR [edi+88]
; Line 674
	push	674					; 000002a2H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	ebx
	mov	DWORD PTR [eax+884], ebx
	mov	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [eax+888], ebp
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN5@tls1_setup
; Line 675
	push	675					; 000002a3H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	65					; 00000041H
	push	211					; 000000d3H
	push	20					; 00000014H
	call	_ERR_put_error
; Line 676
	push	ebp
	call	_CRYPTO_free
; Line 738
	mov	eax, DWORD PTR _ret$1$[esp+60]
	add	esp, 24					; 00000018H
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 739
	add	esp, 20					; 00000014H
	ret	0
$LN5@tls1_setup:
; Line 702
	push	ebx
	push	esi
	push	ebp
	push	edi
	call	_tls1_generate_key_block
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$14
; Line 714
	test	DWORD PTR [edi+256], 2048		; 00000800H
	jne	SHORT $LN10@tls1_setup
	mov	eax, DWORD PTR [edi+8]
	cmp	DWORD PTR [eax], 769			; 00000301H
	jg	SHORT $LN10@tls1_setup
; Line 719
	mov	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [eax+224], 1
; Line 721
	mov	eax, DWORD PTR [edi+192]
	mov	eax, DWORD PTR [eax+180]
	test	eax, eax
	je	SHORT $LN10@tls1_setup
; Line 722
	cmp	DWORD PTR [eax+20], 32			; 00000020H
	jne	SHORT $LN9@tls1_setup
; Line 723
	mov	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [eax+224], 0
$LN9@tls1_setup:
; Line 726
	mov	eax, DWORD PTR [edi+192]
	mov	eax, DWORD PTR [eax+180]
	cmp	DWORD PTR [eax+20], 4
	jne	SHORT $LN10@tls1_setup
; Line 727
	mov	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [eax+224], 0
$LN10@tls1_setup:
; Line 732
	mov	DWORD PTR _ret$1$[esp+36], 1
$err$14:
; Line 735
	push	ebx
	push	esi
	call	_OPENSSL_cleanse
; Line 736
	push	esi
	call	_CRYPTO_free
; Line 738
	mov	eax, DWORD PTR _ret$1$[esp+48]
	add	esp, 12					; 0000000cH
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 739
	add	esp, 20					; 00000014H
	ret	0
_tls1_setup_key_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_change_cipher_state
_TEXT	SEGMENT
_iv$1$ = -252						; size = 4
_p$1$ = -252						; size = 4
_reuse_dd$1$ = -252					; size = 4
_dd$1$ = -248						; size = 4
_mac_secret$1$ = -244					; size = 4
_client_write$1$ = -240					; size = 4
_n$3$ = -240						; size = 4
_i$1$ = -236						; size = 4
_mac_ctx$1$ = -232					; size = 4
_key$1$ = -228						; size = 4
_mac_secret_size$1$ = -224				; size = 4
_ms$1$ = -220						; size = 4
_is_export$1$ = -216					; size = 4
_exp_label$1$ = -212					; size = 4
_c$1$ = -208						; size = 4
_mac_type$1$ = -204					; size = 4
_m$1$ = -200						; size = 4
_iv1$ = -196						; size = 32
_iv2$ = -164						; size = 32
_tmp1$ = -132						; size = 64
_tmp2$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_which$ = 12						; size = 4
_tls1_change_cipher_state PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_enc.c
; Line 320
	mov	eax, 252				; 000000fcH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+252], eax
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _s$[esp+264]
; Line 341
	mov	DWORD PTR _reuse_dd$1$[esp+268], 0
; Line 343
	mov	eax, DWORD PTR [edi+88]
	mov	ecx, DWORD PTR [eax+836]
; Line 344
	mov	esi, DWORD PTR [eax+892]
; Line 348
	mov	ebp, DWORD PTR [eax+908]
	mov	DWORD PTR _c$1$[esp+268], esi
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 2
; Line 369
	test	BYTE PTR _which$[esp+264], 1
	mov	DWORD PTR _is_export$1$[esp+268], edx
	mov	edx, DWORD PTR [eax+896]
	mov	DWORD PTR _m$1$[esp+268], edx
	mov	edx, DWORD PTR [eax+900]
	mov	DWORD PTR _mac_type$1$[esp+268], edx
	je	$LN2@tls1_chang
; Line 370
	test	BYTE PTR [ecx+36], 4
	je	SHORT $LN4@tls1_chang
; Line 371
	or	DWORD PTR [edi+124], 1
	jmp	SHORT $LN5@tls1_chang
$LN4@tls1_chang:
; Line 373
	and	DWORD PTR [edi+124], -2			; fffffffeH
$LN5@tls1_chang:
; Line 375
	cmp	DWORD PTR [edi+128], 0
	je	SHORT $LN6@tls1_chang
; Line 376
	mov	DWORD PTR _reuse_dd$1$[esp+268], 1
	jmp	SHORT $LN9@tls1_chang
$LN6@tls1_chang:
; Line 378
	push	378					; 0000017aH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	140					; 0000008cH
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+128], eax
	test	eax, eax
	je	$err$66
; Line 384
	push	eax
	call	_EVP_CIPHER_CTX_init
	add	esp, 4
$LN9@tls1_chang:
; Line 385
	mov	eax, DWORD PTR [edi+128]
	mov	DWORD PTR _dd$1$[esp+268], eax
; Line 386
	lea	eax, DWORD PTR [edi+132]
	push	0
	push	eax
	call	_ssl_replace_hash
	mov	ebx, eax
	add	esp, 8
	mov	DWORD PTR _mac_ctx$1$[esp+268], ebx
; Line 387
	test	ebx, ebx
	je	$err$66
; Line 390
	mov	eax, DWORD PTR [edi+136]
	test	eax, eax
	je	SHORT $LN11@tls1_chang
; Line 391
	push	eax
	call	_COMP_CTX_free
	add	esp, 4
; Line 392
	mov	DWORD PTR [edi+136], 0
$LN11@tls1_chang:
; Line 394
	test	ebp, ebp
	je	SHORT $LN15@tls1_chang
; Line 395
	push	DWORD PTR [ebp+8]
	call	_COMP_CTX_new
	add	esp, 4
	mov	DWORD PTR [edi+136], eax
; Line 396
	test	eax, eax
	jne	SHORT $LN13@tls1_chang
; Line 397
	push	398					; 0000018eH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	142					; 0000008eH
; Line 399
	jmp	$LN63@tls1_chang
$LN13@tls1_chang:
; Line 401
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+288], 0
	jne	SHORT $LN14@tls1_chang
; Line 402
	push	403					; 00000193H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	17728					; 00004540H
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [edi+88]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+288], eax
$LN14@tls1_chang:
; Line 404
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+288], 0
	je	$err$66
$LN15@tls1_chang:
; Line 411
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	jne	SHORT $LN16@tls1_chang
; Line 412
	mov	eax, DWORD PTR [edi+88]
	xorps	xmm0, xmm0
	movq	QWORD PTR [eax+8], xmm0
$LN16@tls1_chang:
; Line 413
	mov	eax, DWORD PTR [edi+88]
	lea	ecx, DWORD PTR [eax+20]
; Line 414
	lea	ebx, DWORD PTR [eax+16]
; Line 415
	jmp	$LN64@tls1_chang
$LN2@tls1_chang:
; Line 416
	test	BYTE PTR [ecx+36], 4
	je	SHORT $LN17@tls1_chang
; Line 417
	or	DWORD PTR [edi+124], 2
	jmp	SHORT $LN18@tls1_chang
$LN17@tls1_chang:
; Line 419
	and	DWORD PTR [edi+124], -3			; fffffffdH
$LN18@tls1_chang:
; Line 420
	cmp	DWORD PTR [edi+140], 0
	je	SHORT $LN19@tls1_chang
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	jne	SHORT $LN19@tls1_chang
; Line 421
	mov	DWORD PTR _reuse_dd$1$[esp+268], 1
	jmp	SHORT $LN21@tls1_chang
$LN19@tls1_chang:
; Line 422
	call	_EVP_CIPHER_CTX_new
	mov	DWORD PTR [edi+140], eax
	test	eax, eax
	je	$err$66
$LN21@tls1_chang:
; Line 424
	mov	eax, DWORD PTR [edi+140]
	mov	DWORD PTR _dd$1$[esp+268], eax
; Line 425
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN22@tls1_chang
; Line 426
	call	_EVP_MD_CTX_create
	mov	ebx, eax
	mov	DWORD PTR _mac_ctx$1$[esp+268], ebx
; Line 427
	test	ebx, ebx
	je	$err$66
; Line 429
	mov	DWORD PTR [edi+144], ebx
; Line 430
	jmp	SHORT $LN25@tls1_chang
$LN22@tls1_chang:
; Line 431
	lea	eax, DWORD PTR [edi+144]
	push	0
	push	eax
	call	_ssl_replace_hash
	add	esp, 8
	mov	DWORD PTR _mac_ctx$1$[esp+268], eax
; Line 432
	test	eax, eax
	je	$err$66
$LN25@tls1_chang:
; Line 436
	mov	eax, DWORD PTR [edi+148]
	test	eax, eax
	je	SHORT $LN26@tls1_chang
; Line 437
	push	eax
	call	_COMP_CTX_free
	add	esp, 4
; Line 438
	mov	DWORD PTR [edi+148], 0
$LN26@tls1_chang:
; Line 440
	test	ebp, ebp
	je	SHORT $LN28@tls1_chang
; Line 441
	push	DWORD PTR [ebp+8]
	call	_COMP_CTX_new
	add	esp, 4
	mov	DWORD PTR [edi+148], eax
; Line 442
	test	eax, eax
	jne	SHORT $LN28@tls1_chang
; Line 443
	push	444					; 000001bcH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	142					; 0000008eH
; Line 445
	jmp	$LN63@tls1_chang
$LN28@tls1_chang:
; Line 452
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	jne	SHORT $LN29@tls1_chang
; Line 453
	mov	eax, DWORD PTR [edi+88]
	xorps	xmm0, xmm0
	movq	QWORD PTR [eax+84], xmm0
$LN29@tls1_chang:
; Line 454
	mov	eax, DWORD PTR [edi+88]
	lea	ecx, DWORD PTR [eax+96]
; Line 455
	lea	ebx, DWORD PTR [eax+92]
$LN64@tls1_chang:
; Line 458
	cmp	DWORD PTR _reuse_dd$1$[esp+268], 0
	mov	DWORD PTR _mac_secret_size$1$[esp+268], ebx
	mov	DWORD PTR _mac_secret$1$[esp+268], ecx
	je	SHORT $LN30@tls1_chang
; Line 459
	push	DWORD PTR _dd$1$[esp+268]
	call	_EVP_CIPHER_CTX_cleanup
	add	esp, 4
$LN30@tls1_chang:
; Line 461
	mov	eax, DWORD PTR [edi+88]
; Line 464
	push	esi
	mov	ecx, DWORD PTR [eax+888]
	mov	eax, DWORD PTR [eax+904]
	mov	DWORD PTR _p$1$[esp+272], ecx
	mov	DWORD PTR _i$1$[esp+272], eax
	mov	DWORD PTR [ebx], eax
	call	_EVP_CIPHER_key_length
	add	esp, 4
	mov	ebx, eax
; Line 465
	cmp	DWORD PTR _is_export$1$[esp+268], 0
	je	SHORT $LN59@tls1_chang
	mov	ecx, DWORD PTR [edi+88]
	mov	edx, DWORD PTR [ecx+836]
	mov	ecx, DWORD PTR [edx+32]
	and	ecx, 8
	je	SHORT $LN53@tls1_chang
	mov	eax, 5
	jmp	SHORT $LN54@tls1_chang
$LN53@tls1_chang:
	mov	eax, DWORD PTR [edx+20]
	dec	eax
	neg	eax
	sbb	eax, eax
	add	eax, 8
$LN54@tls1_chang:
	cmp	ebx, eax
	jl	SHORT $LN59@tls1_chang
	test	ecx, ecx
	je	SHORT $LN55@tls1_chang
	mov	ebx, 5
	jmp	SHORT $LN59@tls1_chang
$LN55@tls1_chang:
	mov	ebx, DWORD PTR [edx+20]
	dec	ebx
	neg	ebx
	sbb	ebx, ebx
	add	ebx, 8
$LN59@tls1_chang:
; Line 469
	push	esi
	call	_EVP_CIPHER_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 6
	jne	SHORT $LN31@tls1_chang
; Line 470
	lea	ebp, DWORD PTR [eax-2]
	jmp	SHORT $LN32@tls1_chang
$LN31@tls1_chang:
; Line 472
	push	esi
	call	_EVP_CIPHER_iv_length
	add	esp, 4
	mov	ebp, eax
$LN32@tls1_chang:
; Line 473
	mov	eax, DWORD PTR _which$[esp+264]
	cmp	eax, 18					; 00000012H
	je	SHORT $LN35@tls1_chang
	cmp	eax, 33					; 00000021H
	je	SHORT $LN35@tls1_chang
; Line 486
	mov	eax, DWORD PTR _i$1$[esp+268]
	mov	edx, DWORD PTR _p$1$[esp+268]
; Line 492
	mov	DWORD PTR _exp_label$1$[esp+268], OFFSET ??_C@_0BB@HLBNJBJK@server?5write?5key?$AA@
	lea	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _ms$1$[esp+268], ecx
	lea	ecx, DWORD PTR [ebx+eax*2]
	add	edx, ecx
	lea	eax, DWORD PTR [ebx+ebp]
	add	ecx, eax
	mov	DWORD PTR _key$1$[esp+268], edx
	add	DWORD PTR _p$1$[esp+268], ecx
; Line 494
	mov	edx, DWORD PTR _i$1$[esp+268]
	mov	DWORD PTR _n$3$[esp+268], ecx
	add	ecx, ebp
	mov	DWORD PTR _client_write$1$[esp+268], 0
	jmp	SHORT $LN34@tls1_chang
$LN35@tls1_chang:
; Line 476
	mov	edx, DWORD PTR _i$1$[esp+268]
	mov	ecx, DWORD PTR _p$1$[esp+268]
	mov	DWORD PTR _ms$1$[esp+268], ecx
; Line 481
	mov	DWORD PTR _exp_label$1$[esp+268], OFFSET ??_C@_0BB@DJIGDMHM@client?5write?5key?$AA@
	lea	eax, DWORD PTR [edx+edx]
; Line 483
	mov	DWORD PTR _client_write$1$[esp+268], 1
	add	ecx, eax
	lea	eax, DWORD PTR [eax+ebx*2]
	add	DWORD PTR _p$1$[esp+268], eax
	mov	DWORD PTR _key$1$[esp+268], ecx
	lea	ecx, DWORD PTR [eax+ebp*2]
$LN34@tls1_chang:
; Line 497
	mov	eax, DWORD PTR [edi+88]
	cmp	ecx, DWORD PTR [eax+884]
	jle	SHORT $LN36@tls1_chang
; Line 498
	push	498					; 000001f2H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	68					; 00000044H
; Line 499
	jmp	$LN63@tls1_chang
$LN36@tls1_chang:
; Line 502
	push	edx
	push	DWORD PTR _ms$1$[esp+272]
	push	DWORD PTR _mac_secret$1$[esp+276]
	call	_memcpy
; Line 504
	push	esi
	call	_EVP_CIPHER_flags
	add	esp, 16					; 00000010H
	test	eax, 2097152				; 00200000H
	jne	SHORT $LN37@tls1_chang
; Line 505
	mov	eax, DWORD PTR _mac_secret_size$1$[esp+268]
	push	DWORD PTR [eax]
	push	DWORD PTR _mac_secret$1$[esp+272]
	push	0
	push	DWORD PTR _mac_type$1$[esp+280]
	call	_EVP_PKEY_new_mac_key
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 508
	test	esi, esi
	je	$LN39@tls1_chang
	push	esi
	push	0
	push	DWORD PTR _m$1$[esp+276]
	push	0
	push	DWORD PTR _mac_ctx$1$[esp+284]
	call	_EVP_DigestSignInit
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$LN39@tls1_chang
; Line 513
	push	esi
	call	_EVP_PKEY_free
	add	esp, 4
$LN37@tls1_chang:
; Line 523
	cmp	DWORD PTR _is_export$1$[esp+268], 0
	je	$LN61@tls1_chang
; Line 528
	push	DWORD PTR _c$1$[esp+268]
	mov	esi, DWORD PTR [edi+88]
	call	_EVP_CIPHER_key_length
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _tmp2$[esp+272]
	push	eax
	lea	eax, DWORD PTR _tmp1$[esp+276]
	push	eax
	push	ebx
	push	DWORD PTR _key$1$[esp+284]
	lea	eax, DWORD PTR [esi+160]
	push	0
	push	0
	push	0
	push	0
	push	32					; 00000020H
	push	eax
	push	32					; 00000020H
	lea	eax, DWORD PTR [esi+192]
	push	eax
	push	16					; 00000010H
	push	DWORD PTR _exp_label$1$[esp+324]
	push	edi
	call	_ssl_get_algorithm2
	add	esp, 4
	push	eax
	call	_tls1_PRF
	add	esp, 64					; 00000040H
	test	eax, eax
	je	$err2$67
; Line 535
	lea	esi, DWORD PTR _tmp1$[esp+268]
; Line 537
	test	ebp, ebp
	jle	$LN62@tls1_chang
; Line 538
	mov	ecx, DWORD PTR [edi+88]
	lea	eax, DWORD PTR [ebp*2]
	push	eax
	lea	eax, DWORD PTR _iv2$[esp+272]
	push	eax
	lea	eax, DWORD PTR _iv1$[esp+276]
	push	eax
	push	0
	push	OFFSET ?empty@?1??tls1_change_cipher_state@@9@9
	push	0
	push	0
	push	0
	push	0
	push	32					; 00000020H
	lea	eax, DWORD PTR [ecx+160]
	push	eax
	push	32					; 00000020H
	lea	eax, DWORD PTR [ecx+192]
	push	eax
	push	8
	push	OFFSET ??_C@_08IBBAIJIN@IV?5block?$AA@
	push	edi
	call	_ssl_get_algorithm2
	add	esp, 4
	push	eax
	call	_tls1_PRF
	add	esp, 64					; 00000040H
	test	eax, eax
	je	$err2$67
; Line 544
	cmp	DWORD PTR _client_write$1$[esp+268], 0
; Line 545
	lea	ebx, DWORD PTR _iv1$[esp+268]
	jne	SHORT $LN45@tls1_chang
; Line 547
	add	ebx, ebp
	jmp	SHORT $LN45@tls1_chang
$LN39@tls1_chang:
; Line 509
	push	esi
	call	_EVP_PKEY_free
; Line 510
	push	510					; 000001feH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	68					; 00000044H
	push	209					; 000000d1H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 24					; 00000018H
; Line 511
	jmp	$err2$67
$LN61@tls1_chang:
	mov	esi, DWORD PTR _key$1$[esp+268]
$LN62@tls1_chang:
	mov	ebx, DWORD PTR _iv$1$[esp+268]
$LN45@tls1_chang:
; Line 551
	mov	eax, DWORD PTR [edi+192]
; Line 567
	mov	edi, DWORD PTR _c$1$[esp+268]
	push	edi
	mov	DWORD PTR [eax+4], 0
	call	_EVP_CIPHER_flags
	and	eax, 983047				; 000f0007H
	add	esp, 4
	cmp	eax, 6
; Line 569
	mov	eax, DWORD PTR _which$[esp+264]
	jne	SHORT $LN46@tls1_chang
	and	eax, 2
	push	eax
	push	0
	push	esi
	mov	esi, DWORD PTR _dd$1$[esp+280]
	push	0
	push	edi
	push	esi
	call	_EVP_CipherInit_ex
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN49@tls1_chang
	push	ebx
	push	ebp
	push	18					; 00000012H
	push	esi
	call	_EVP_CIPHER_CTX_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN50@tls1_chang
$LN49@tls1_chang:
; Line 570
	push	570					; 0000023aH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	68					; 00000044H
; Line 571
	jmp	$LN63@tls1_chang
$LN46@tls1_chang:
; Line 574
	and	eax, 2
	push	eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _dd$1$[esp+280]
	push	0
	push	edi
	push	esi
	call	_EVP_CipherInit_ex
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN50@tls1_chang
; Line 575
	push	575					; 0000023fH
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	68					; 00000044H
; Line 576
	jmp	$LN63@tls1_chang
$LN50@tls1_chang:
; Line 581
	push	edi
	call	_EVP_CIPHER_flags
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $LN51@tls1_chang
	mov	eax, DWORD PTR _mac_secret_size$1$[esp+268]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN51@tls1_chang
	push	DWORD PTR _mac_secret$1$[esp+268]
	push	eax
	push	23					; 00000017H
	push	esi
	call	_EVP_CIPHER_CTX_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN51@tls1_chang
; Line 583
	push	583					; 00000247H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	68					; 00000044H
	jmp	SHORT $LN63@tls1_chang
$LN51@tls1_chang:
; Line 622
	lea	eax, DWORD PTR _tmp1$[esp+268]
	push	64					; 00000040H
	push	eax
	call	_OPENSSL_cleanse
; Line 623
	lea	eax, DWORD PTR _tmp2$[esp+276]
	push	64					; 00000040H
	push	eax
	call	_OPENSSL_cleanse
; Line 624
	lea	eax, DWORD PTR _iv1$[esp+284]
	push	32					; 00000020H
	push	eax
	call	_OPENSSL_cleanse
; Line 625
	lea	eax, DWORD PTR _iv2$[esp+292]
	push	32					; 00000020H
	push	eax
	call	_OPENSSL_cleanse
	add	esp, 32					; 00000020H
; Line 626
	mov	eax, 1
	jmp	SHORT $LN1@tls1_chang
$err$66:
; Line 628
	push	628					; 00000274H
	push	OFFSET ??_C@_0P@PHHGKFPG@?4?2ssl?2t1_enc?4c?$AA@
	push	65					; 00000041H
$LN63@tls1_chang:
	push	209					; 000000d1H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err2$67:
; Line 630
	xor	eax, eax
$LN1@tls1_chang:
; Line 631
	mov	ecx, DWORD PTR __$ArrayPad$[esp+268]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	ret	0
_tls1_change_cipher_state ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 838
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
