; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CRYPTO_cts128_encrypt_block
PUBLIC	_CRYPTO_cts128_encrypt
PUBLIC	_CRYPTO_cts128_decrypt_block
PUBLIC	_CRYPTO_cts128_decrypt
PUBLIC	_CRYPTO_nistcts128_encrypt_block
PUBLIC	_CRYPTO_nistcts128_encrypt
PUBLIC	_CRYPTO_nistcts128_decrypt_block
PUBLIC	_CRYPTO_nistcts128_decrypt
EXTRN	_CRYPTO_cbc128_encrypt:PROC
EXTRN	_CRYPTO_cbc128_decrypt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_nistcts128_decrypt
_TEXT	SEGMENT
_ivec$GSCopy$1$ = -48					; size = 4
_key$GSCopy$1$ = -44					; size = 4
_cbc$GSCopy$1$ = -40					; size = 4
_tmp$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_cbc$ = 28						; size = 4
_CRYPTO_nistcts128_decrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 310
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	mov	ecx, DWORD PTR _key$[esp+44]
	mov	eax, DWORD PTR _ivec$[esp+44]
	mov	edx, DWORD PTR _cbc$[esp+44]
	push	ebx
	mov	ebx, DWORD PTR _out$[esp+48]
	push	esi
	mov	esi, DWORD PTR _len$[esp+52]
	mov	DWORD PTR _key$GSCopy$1$[esp+56], ecx
	mov	DWORD PTR _ivec$GSCopy$1$[esp+56], eax
	mov	DWORD PTR _cbc$GSCopy$1$[esp+56], edx
	push	edi
	mov	edi, DWORD PTR _in$[esp+56]
; Line 319
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN2@CRYPTO_nis
; Line 320
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 351
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN2@CRYPTO_nis:
	push	ebp
; Line 322
	mov	ebp, esi
	and	ebp, 15					; 0000000fH
; Line 324
	jne	SHORT $LN3@CRYPTO_nis
; Line 325
	push	ebp
	push	eax
	push	ecx
	push	esi
	push	ebx
	push	edi
	call	edx
	add	esp, 24					; 00000018H
; Line 326
	mov	eax, esi
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 351
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN3@CRYPTO_nis:
; Line 329
	mov	eax, -16				; fffffff0H
	sub	eax, ebp
	add	esi, eax
; Line 331
	je	SHORT $LN4@CRYPTO_nis
; Line 332
	push	0
	push	DWORD PTR _ivec$GSCopy$1$[esp+68]
	push	ecx
	push	esi
	push	ebx
	push	edi
	call	edx
	mov	ecx, DWORD PTR _key$GSCopy$1$[esp+88]
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _cbc$GSCopy$1$[esp+64]
; Line 333
	add	edi, esi
; Line 334
	add	ebx, esi
$LN4@CRYPTO_nis:
; Line 341
	push	0
	lea	eax, DWORD PTR _tmp$[esp+84]
	xorps	xmm0, xmm0
	push	eax
	push	ecx
	push	16					; 00000010H
	lea	eax, DWORD PTR _tmp$[esp+80]
	push	eax
	lea	eax, DWORD PTR [edi+ebp]
	push	eax
	movups	XMMWORD PTR _tmp$[esp+88], xmm0
	movups	XMMWORD PTR _tmp$[esp+104], xmm0
	call	edx
; Line 343
	push	ebp
	lea	eax, DWORD PTR _tmp$[esp+92]
	push	edi
	push	eax
	call	_memcpy
; Line 347
	push	0
	push	DWORD PTR _ivec$GSCopy$1$[esp+104]
	lea	eax, DWORD PTR _tmp$[esp+108]
	push	DWORD PTR _key$GSCopy$1$[esp+108]
	push	32					; 00000020H
	push	eax
	push	eax
	call	DWORD PTR _cbc$GSCopy$1$[esp+124]
; Line 348
	lea	eax, DWORD PTR [ebp+16]
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+128]
	push	eax
	push	ebx
	call	_memcpy
; Line 351
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	lea	eax, DWORD PTR [ebp+16]
	add	esp, 72					; 00000048H
	add	eax, esi
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_CRYPTO_nistcts128_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_nistcts128_decrypt_block
_TEXT	SEGMENT
tv1707 = -92						; size = 4
_in$GSCopy$1$ = -92					; size = 4
_block$GSCopy$1$ = -88					; size = 4
tv1700 = -88						; size = 4
_key$GSCopy$1$ = -84					; size = 4
tv1703 = -84						; size = 4
_out$GSCopy$1$ = -80					; size = 4
tv1709 = -76						; size = 4
tv1692 = -72						; size = 4
tv1697 = -68						; size = 4
tv1715 = -64						; size = 4
tv1691 = -60						; size = 4
tv1694 = -56						; size = 4
tv1690 = -52						; size = 4
_residue$1$ = -48					; size = 4
tv1706 = -44						; size = 4
_len$GSCopy$1$ = -40					; size = 4
_tmp$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_block$ = 28						; size = 4
_CRYPTO_nistcts128_decrypt_block PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 220
	mov	eax, 92					; 0000005cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+92], eax
	mov	ecx, DWORD PTR _in$[esp+88]
	mov	edx, DWORD PTR _key$[esp+88]
	mov	eax, DWORD PTR _block$[esp+88]
	push	ebx
	mov	ebx, DWORD PTR _len$[esp+92]
	mov	DWORD PTR _in$GSCopy$1$[esp+96], ecx
	mov	DWORD PTR _key$GSCopy$1$[esp+96], edx
	mov	DWORD PTR _block$GSCopy$1$[esp+96], eax
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+96]
	mov	DWORD PTR _out$GSCopy$1$[esp+100], ebp
	push	esi
	mov	esi, DWORD PTR _ivec$[esp+100]
; Line 229
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN8@CRYPTO_nis
; Line 230
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 263
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
$LN8@CRYPTO_nis:
	push	edi
; Line 232
	mov	edi, ebx
	and	edi, 15					; 0000000fH
	mov	DWORD PTR _residue$1$[esp+108], edi
; Line 234
	jne	SHORT $LN9@CRYPTO_nis
; Line 235
	push	eax
	push	esi
	push	edx
	push	ebx
	push	ebp
	push	ecx
	call	_CRYPTO_cbc128_decrypt
	add	esp, 24					; 00000018H
; Line 236
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 263
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
$LN9@CRYPTO_nis:
; Line 239
	mov	eax, -16				; fffffff0H
	sub	eax, edi
	add	ebx, eax
	mov	DWORD PTR _len$GSCopy$1$[esp+108], ebx
; Line 241
	je	SHORT $LN10@CRYPTO_nis
; Line 242
	push	DWORD PTR _block$GSCopy$1$[esp+108]
	push	esi
	push	edx
	push	ebx
	push	ebp
	push	ecx
	call	_CRYPTO_cbc128_decrypt
; Line 243
	mov	ecx, DWORD PTR _in$GSCopy$1$[esp+132]
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _key$GSCopy$1$[esp+108]
	add	ecx, ebx
; Line 244
	add	ebp, ebx
	mov	DWORD PTR _in$GSCopy$1$[esp+108], ecx
	mov	DWORD PTR _out$GSCopy$1$[esp+108], ebp
$LN10@CRYPTO_nis:
; Line 247
	push	edx
	lea	eax, DWORD PTR _tmp$[esp+128]
	push	eax
	lea	eax, DWORD PTR [ecx+edi]
	push	eax
	call	DWORD PTR _block$GSCopy$1$[esp+120]
; Line 249
	movups	xmm0, XMMWORD PTR _tmp$[esp+136]
; Line 250
	mov	ebx, DWORD PTR _in$GSCopy$1$[esp+120]
	lea	eax, DWORD PTR _tmp$[esp+120]
	push	edi
	push	ebx
	push	eax
	movups	XMMWORD PTR _tmp$[esp+132], xmm0
	call	_memcpy
; Line 251
	push	DWORD PTR _key$GSCopy$1$[esp+132]
	lea	eax, DWORD PTR _tmp$[esp+136]
	push	eax
	push	eax
	call	DWORD PTR _block$GSCopy$1$[esp+144]
	lea	ecx, DWORD PTR [ebx+1]
; Line 253
	mov	edx, ebp
	mov	DWORD PTR tv1709[esp+144], ecx
	sub	edx, esi
	mov	ecx, ebx
	mov	DWORD PTR tv1706[esp+144], edx
	sub	ecx, ebp
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv1707[esp+108], ecx
	xor	eax, eax
	lea	ecx, DWORD PTR _tmp$[esp+108]
	sub	ecx, esi
	mov	DWORD PTR tv1703[esp+108], ecx
	lea	ecx, DWORD PTR _tmp$[esp+109]
	sub	ecx, esi
	mov	DWORD PTR tv1700[esp+108], ecx
	lea	ecx, DWORD PTR _tmp$[esp+110]
	sub	ecx, esi
	mov	DWORD PTR tv1697[esp+108], ecx
	lea	ecx, DWORD PTR _tmp$[esp+111]
	sub	ecx, esi
	mov	DWORD PTR tv1694[esp+108], ecx
	mov	ecx, ebp
	sub	ecx, ebx
	mov	DWORD PTR tv1692[esp+108], ecx
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR tv1691[esp+108], ecx
	lea	ecx, DWORD PTR [edi+2]
	mov	DWORD PTR tv1690[esp+108], ecx
	lea	ecx, DWORD PTR [ebp+3]
	mov	ebp, DWORD PTR tv1709[esp+108]
	mov	DWORD PTR tv1715[esp+108], ecx
	mov	ecx, DWORD PTR tv1707[esp+108]
	npad	5
$LL4@CRYPTO_nis:
; Line 254
	add	edx, esi
; Line 257
	lea	ebp, DWORD PTR [ebp+4]
	mov	bl, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR tv1703[esp+108]
	movzx	ecx, BYTE PTR [ecx+esi]
	xor	cl, BYTE PTR [esi]
	mov	BYTE PTR [edx], cl
	movzx	ecx, BYTE PTR [edi+ebp-5]
	mov	BYTE PTR [esi], cl
	mov	ecx, DWORD PTR tv1703[esp+108]
	mov	dl, BYTE PTR [ebp-4]
	mov	BYTE PTR [ecx+esi], bl
	mov	ebx, DWORD PTR tv1700[esp+108]
	movzx	ecx, BYTE PTR [ebx+esi]
	xor	cl, BYTE PTR [esi+1]
	mov	ebx, DWORD PTR tv1692[esp+108]
	mov	BYTE PTR [ebx+ebp-4], cl
	movzx	ecx, BYTE PTR [edi+ebp-4]
	mov	ebx, DWORD PTR tv1700[esp+108]
	mov	edi, DWORD PTR tv1715[esp+108]
	mov	BYTE PTR [esi+1], cl
	movzx	ecx, BYTE PTR [esi+2]
	mov	BYTE PTR [ebx+esi], dl
	mov	ebx, DWORD PTR tv1697[esp+108]
	mov	dl, BYTE PTR [ebp-3]
	xor	cl, BYTE PTR [ebx+esi]
	mov	BYTE PTR [edi+eax-1], cl
	mov	ecx, DWORD PTR tv1691[esp+108]
	mov	BYTE PTR [ebx+esi], dl
	mov	ebx, DWORD PTR tv1694[esp+108]
	movzx	ecx, BYTE PTR [ecx+ebp-4]
	mov	BYTE PTR [esi+2], cl
	movzx	ecx, BYTE PTR [esi+3]
	xor	cl, BYTE PTR [esi+ebx]
	mov	dl, BYTE PTR [ebp-2]
	mov	BYTE PTR [edi+eax], cl
	add	eax, 4
	mov	ecx, DWORD PTR tv1690[esp+108]
	mov	edi, DWORD PTR _residue$1$[esp+108]
	mov	BYTE PTR [esi+ebx], dl
	mov	edx, DWORD PTR tv1706[esp+108]
	movzx	ecx, BYTE PTR [ecx+ebp-4]
	mov	BYTE PTR [esi+3], cl
	add	esi, 4
	mov	ecx, DWORD PTR tv1707[esp+108]
	cmp	eax, 16					; 00000010H
	jb	$LL4@CRYPTO_nis
; Line 259
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+108]
	add	edi, 16					; 00000010H
	mov	ebx, edi
	sub	ebx, eax
	cmp	eax, edi
	jae	SHORT $LN6@CRYPTO_nis
	cmp	ebx, 32					; 00000020H
	jb	SHORT $LN17@CRYPTO_nis
; Line 260
	lea	esi, DWORD PTR _tmp$[esp+108]
	lea	edx, DWORD PTR _tmp$[esp+edi+107]
	add	esi, eax
	lea	ecx, DWORD PTR [eax+ebp]
	cmp	ecx, edx
	ja	SHORT $LN18@CRYPTO_nis
	lea	ecx, DWORD PTR [ebp-1]
	add	ecx, edi
	lea	edx, DWORD PTR [esi-16]
	cmp	ecx, edx
	jae	SHORT $LN17@CRYPTO_nis
$LN18@CRYPTO_nis:
	and	ebx, 31					; 0000001fH
	mov	ecx, edi
	sub	ecx, ebx
	npad	1
$LL7@CRYPTO_nis:
	movups	xmm0, XMMWORD PTR [esi]
	lea	esi, DWORD PTR [esi+32]
	movups	xmm1, XMMWORD PTR [esi-48]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [esi-32]
	movups	XMMWORD PTR [eax+ebp], xmm1
	movups	xmm1, XMMWORD PTR [esi-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax+ebp+16], xmm1
	add	eax, 32					; 00000020H
	cmp	eax, ecx
	jb	SHORT $LL7@CRYPTO_nis
$LN17@CRYPTO_nis:
; Line 259
	cmp	eax, edi
	jae	SHORT $LN6@CRYPTO_nis
	lea	ecx, DWORD PTR _tmp$[esp+108]
	sub	ebp, ecx
$LL16@CRYPTO_nis:
; Line 260
	lea	edx, DWORD PTR _tmp$[esp+108]
	add	edx, eax
	inc	eax
	mov	cl, BYTE PTR [edx-16]
	xor	cl, BYTE PTR [edx]
	mov	BYTE PTR [edx+ebp], cl
	cmp	eax, edi
	jb	SHORT $LL16@CRYPTO_nis
$LN6@CRYPTO_nis:
; Line 262
	mov	eax, DWORD PTR _len$GSCopy$1$[esp+108]
; Line 263
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	add	eax, 16					; 00000010H
	add	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
_CRYPTO_nistcts128_decrypt_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_nistcts128_encrypt
_TEXT	SEGMENT
_ivec$GSCopy$1$ = -32					; size = 4
_key$GSCopy$1$ = -28					; size = 4
_cbc$GSCopy$1$ = -24					; size = 4
_tmp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_cbc$ = 28						; size = 4
_CRYPTO_nistcts128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 137
	mov	eax, 32					; 00000020H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+32], eax
	mov	eax, DWORD PTR _key$[esp+28]
	mov	ecx, DWORD PTR _ivec$[esp+28]
	mov	edx, DWORD PTR _cbc$[esp+28]
	push	ebx
	mov	ebx, DWORD PTR _in$[esp+32]
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+36]
	push	esi
	mov	esi, DWORD PTR _len$[esp+40]
	mov	DWORD PTR _key$GSCopy$1$[esp+44], eax
	mov	DWORD PTR _ivec$GSCopy$1$[esp+44], ecx
	mov	DWORD PTR _cbc$GSCopy$1$[esp+44], edx
; Line 146
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN2@CRYPTO_nis
; Line 147
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 169
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN2@CRYPTO_nis:
	push	edi
; Line 153
	push	1
	push	ecx
	mov	edi, esi
	push	eax
	and	edi, 15					; 0000000fH
	sub	esi, edi
	push	esi
	push	ebp
	push	ebx
	call	edx
	add	esp, 24					; 00000018H
; Line 155
	test	edi, edi
	jne	SHORT $LN3@CRYPTO_nis
; Line 156
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 169
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN3@CRYPTO_nis:
; Line 165
	push	edi
	lea	eax, DWORD PTR [esi+ebx]
	xorps	xmm0, xmm0
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+56]
	push	eax
	movups	XMMWORD PTR _tmp$[esp+60], xmm0
	call	_memcpy
; Line 166
	push	1
	push	DWORD PTR _ivec$GSCopy$1$[esp+64]
	lea	eax, DWORD PTR [ebp-16]
	push	DWORD PTR _key$GSCopy$1$[esp+68]
	add	eax, esi
	add	eax, edi
	push	16					; 00000010H
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+80]
	push	eax
	call	DWORD PTR _cbc$GSCopy$1$[esp+84]
; Line 169
	mov	ecx, DWORD PTR __$ArrayPad$[esp+84]
	lea	eax, DWORD PTR [esi+edi]
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
_CRYPTO_nistcts128_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_nistcts128_encrypt_block
_TEXT	SEGMENT
tv438 = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_block$ = 28						; size = 4
_CRYPTO_nistcts128_encrypt_block PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 68
	mov	eax, 4
	call	__chkstk
	push	ebx
; Line 73
	mov	ebx, DWORD PTR _len$[esp+4]
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN5@CRYPTO_nis
; Line 74
	xor	eax, eax
	pop	ebx
; Line 94
	pop	ecx
	ret	0
$LN5@CRYPTO_nis:
; Line 80
	mov	eax, DWORD PTR _out$[esp+4]
	push	ebp
	mov	ebp, DWORD PTR _ivec$[esp+8]
	push	esi
	push	edi
	push	DWORD PTR _block$[esp+16]
	mov	edi, DWORD PTR _in$[esp+20]
	mov	esi, ebx
	push	ebp
	push	DWORD PTR _key$[esp+24]
	and	esi, 15					; 0000000fH
	sub	ebx, esi
	push	ebx
	push	eax
	push	edi
	mov	DWORD PTR _len$[esp+40], ebx
	call	_CRYPTO_cbc128_encrypt
	add	esp, 24					; 00000018H
; Line 82
	test	esi, esi
	jne	SHORT $LN6@CRYPTO_nis
; Line 83
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 94
	pop	ecx
	ret	0
$LN6@CRYPTO_nis:
; Line 86
	add	DWORD PTR _out$[esp+16], ebx
	add	edi, ebx
; Line 88
	xor	ecx, ecx
	test	esi, esi
	je	SHORT $LN3@CRYPTO_nis
	cmp	esi, 32					; 00000020H
	jb	SHORT $LN11@CRYPTO_nis
; Line 89
	lea	eax, DWORD PTR [esi-1]
	lea	edx, DWORD PTR [ebp-1]
	add	eax, edi
	add	edx, esi
	cmp	ebp, eax
	ja	SHORT $LN12@CRYPTO_nis
	cmp	edx, edi
	jae	SHORT $LN11@CRYPTO_nis
$LN12@CRYPTO_nis:
	mov	eax, esi
	mov	edx, esi
	and	eax, 31					; 0000001fH
; Line 88
	mov	ebx, edi
	sub	edx, eax
	sub	ebx, ebp
	mov	DWORD PTR tv438[esp+20], ebx
	mov	eax, ebp
	mov	ebx, DWORD PTR _len$[esp+16]
	mov	ebp, DWORD PTR tv438[esp+20]
$LL4@CRYPTO_nis:
; Line 89
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+ebp-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [edi+ecx+16]
	add	ecx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	ecx, edx
	jb	SHORT $LL4@CRYPTO_nis
	mov	ebp, DWORD PTR _ivec$[esp+16]
$LN11@CRYPTO_nis:
; Line 88
	cmp	ecx, esi
	jae	SHORT $LN3@CRYPTO_nis
	mov	edx, esi
	lea	eax, DWORD PTR [ecx+ebp]
	sub	edi, ebp
	sub	edx, ecx
	npad	3
$LL10@CRYPTO_nis:
; Line 89
	mov	cl, BYTE PTR [eax+edi]
	lea	eax, DWORD PTR [eax+1]
	xor	BYTE PTR [eax-1], cl
	sub	edx, 1
	jne	SHORT $LL10@CRYPTO_nis
$LN3@CRYPTO_nis:
; Line 90
	push	DWORD PTR _key$[esp+16]
	push	ebp
	push	ebp
	call	DWORD PTR _block$[esp+28]
; Line 91
	mov	eax, DWORD PTR _out$[esp+28]
	add	esp, 12					; 0000000cH
	movups	xmm0, XMMWORD PTR [ebp]
	pop	edi
	movups	XMMWORD PTR [esi+eax-16], xmm0
; Line 93
	lea	eax, DWORD PTR [esi+ebx]
	pop	esi
	pop	ebp
	pop	ebx
; Line 94
	pop	ecx
	ret	0
_CRYPTO_nistcts128_encrypt_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cts128_decrypt
_TEXT	SEGMENT
_ivec$GSCopy$1$ = -48					; size = 4
_key$GSCopy$1$ = -44					; size = 4
_cbc$GSCopy$1$ = -40					; size = 4
_tmp$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_cbc$ = 28						; size = 4
_CRYPTO_cts128_decrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 268
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	mov	ecx, DWORD PTR _key$[esp+44]
	mov	eax, DWORD PTR _ivec$[esp+44]
	mov	edx, DWORD PTR _cbc$[esp+44]
	push	ebx
	mov	ebx, DWORD PTR _in$[esp+48]
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+52]
	push	esi
	mov	esi, DWORD PTR _len$[esp+56]
	mov	DWORD PTR _key$GSCopy$1$[esp+60], ecx
	mov	DWORD PTR _ivec$GSCopy$1$[esp+60], eax
	mov	DWORD PTR _cbc$GSCopy$1$[esp+60], edx
; Line 277
	cmp	esi, 16					; 00000010H
	ja	SHORT $LN2@CRYPTO_cts
; Line 278
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 305
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN2@CRYPTO_cts:
	push	edi
; Line 280
	mov	edi, esi
	mov	eax, 16					; 00000010H
	and	edi, 15					; 0000000fH
	cmove	edi, eax
; Line 283
	mov	eax, -16				; fffffff0H
	sub	eax, edi
	add	esi, eax
; Line 285
	je	SHORT $LN4@CRYPTO_cts
; Line 286
	push	0
	push	DWORD PTR _ivec$GSCopy$1$[esp+68]
	push	ecx
	push	esi
	push	ebp
	push	ebx
	call	edx
	mov	ecx, DWORD PTR _key$GSCopy$1$[esp+88]
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _cbc$GSCopy$1$[esp+64]
; Line 287
	add	ebx, esi
; Line 288
	add	ebp, esi
$LN4@CRYPTO_cts:
; Line 295
	push	0
	lea	eax, DWORD PTR _tmp$[esp+84]
	xorps	xmm0, xmm0
	push	eax
	push	ecx
	push	16					; 00000010H
	lea	eax, DWORD PTR _tmp$[esp+80]
	push	eax
	push	ebx
	movups	XMMWORD PTR _tmp$[esp+88], xmm0
	movups	XMMWORD PTR _tmp$[esp+104], xmm0
	call	edx
; Line 297
	push	edi
	lea	eax, DWORD PTR [ebx+16]
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+96]
	push	eax
	call	_memcpy
; Line 301
	push	0
	push	DWORD PTR _ivec$GSCopy$1$[esp+104]
	lea	eax, DWORD PTR _tmp$[esp+108]
	push	DWORD PTR _key$GSCopy$1$[esp+108]
	push	32					; 00000020H
	push	eax
	push	eax
	call	DWORD PTR _cbc$GSCopy$1$[esp+124]
; Line 302
	lea	eax, DWORD PTR [edi+16]
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+128]
	push	eax
	push	ebp
	call	_memcpy
; Line 305
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	lea	eax, DWORD PTR [edi+16]
	add	esp, 72					; 00000048H
	add	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_CRYPTO_cts128_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cts128_decrypt_block
_TEXT	SEGMENT
tv959 = -68						; size = 4
tv957 = -68						; size = 4
tv951 = -68						; size = 4
_key$GSCopy$1$ = -68					; size = 4
_block$GSCopy$1$ = -64					; size = 4
tv950 = -64						; size = 4
tv968 = -60						; size = 4
tv960 = -60						; size = 4
_residue$1$ = -56					; size = 4
_in$GSCopy$1$ = -52					; size = 4
_out$GSCopy$1$ = -48					; size = 4
_len$GSCopy$1$ = -44					; size = 4
tv949 = -40						; size = 4
_tmp$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_block$ = 28						; size = 4
_CRYPTO_cts128_decrypt_block PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 175
	mov	eax, 68					; 00000044H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+68], eax
	mov	ecx, DWORD PTR _len$[esp+64]
	mov	edx, DWORD PTR _key$[esp+64]
	mov	eax, DWORD PTR _block$[esp+64]
	mov	DWORD PTR _key$GSCopy$1$[esp+68], edx
	mov	DWORD PTR _block$GSCopy$1$[esp+68], eax
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+68]
	mov	DWORD PTR _out$GSCopy$1$[esp+72], ebp
	push	esi
	mov	esi, DWORD PTR _ivec$[esp+72]
	push	edi
	mov	edi, DWORD PTR _in$[esp+76]
	mov	DWORD PTR _in$GSCopy$1$[esp+80], edi
; Line 184
	cmp	ecx, 16					; 00000010H
	ja	SHORT $LN8@CRYPTO_cts
; Line 185
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 213
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN8@CRYPTO_cts:
	push	ebx
; Line 187
	mov	ebx, ecx
	mov	eax, 16					; 00000010H
	and	ebx, 15					; 0000000fH
	cmove	ebx, eax
; Line 190
	mov	eax, -16				; fffffff0H
	sub	eax, ebx
	mov	DWORD PTR _residue$1$[esp+84], ebx
	add	ecx, eax
	mov	DWORD PTR _len$GSCopy$1$[esp+84], ecx
; Line 192
	je	SHORT $LN10@CRYPTO_cts
; Line 193
	push	DWORD PTR _block$GSCopy$1$[esp+84]
	push	esi
	push	edx
	push	ecx
	push	ebp
	push	edi
	call	_CRYPTO_cbc128_decrypt
; Line 194
	add	edi, DWORD PTR _len$GSCopy$1$[esp+108]
	add	esp, 24					; 00000018H
; Line 195
	add	ebp, DWORD PTR _len$GSCopy$1$[esp+84]
	mov	edx, DWORD PTR _key$GSCopy$1$[esp+84]
	mov	DWORD PTR _in$GSCopy$1$[esp+84], edi
	mov	DWORD PTR _out$GSCopy$1$[esp+84], ebp
$LN10@CRYPTO_cts:
; Line 198
	push	edx
	lea	eax, DWORD PTR _tmp$[esp+104]
	push	eax
	push	edi
	call	DWORD PTR _block$GSCopy$1$[esp+96]
; Line 200
	movups	xmm0, XMMWORD PTR _tmp$[esp+112]
; Line 201
	push	ebx
	lea	eax, DWORD PTR [edi+16]
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+104]
	push	eax
	movups	XMMWORD PTR _tmp$[esp+108], xmm0
	call	_memcpy
; Line 202
	push	DWORD PTR _key$GSCopy$1$[esp+108]
	lea	eax, DWORD PTR _tmp$[esp+112]
	push	eax
	push	eax
	call	DWORD PTR _block$GSCopy$1$[esp+120]
; Line 207
	lea	ecx, DWORD PTR _tmp$[esp+135]
	add	esp, 36					; 00000024H
	xor	eax, eax
	lea	edx, DWORD PTR [esi+15]
	cmp	esi, ecx
	ja	SHORT $LN18@CRYPTO_cts
	lea	ecx, DWORD PTR _tmp$[esp+84]
	cmp	edx, ecx
	jae	SHORT $LN38@CRYPTO_cts
$LN18@CRYPTO_cts:
	lea	ecx, DWORD PTR [ebp+15]
	cmp	esi, ecx
	ja	SHORT $LN19@CRYPTO_cts
	cmp	edx, ebp
	jae	SHORT $LN38@CRYPTO_cts
$LN19@CRYPTO_cts:
	lea	ebx, DWORD PTR [edi+15]
	cmp	esi, ebx
	mov	ebx, DWORD PTR _residue$1$[esp+84]
	ja	SHORT $LN20@CRYPTO_cts
	cmp	edx, edi
	jae	SHORT $LN38@CRYPTO_cts
$LN20@CRYPTO_cts:
	lea	edx, DWORD PTR _tmp$[esp+99]
	cmp	ebp, edx
	ja	SHORT $LN21@CRYPTO_cts
	lea	edx, DWORD PTR _tmp$[esp+84]
	cmp	ecx, edx
	jae	SHORT $LN38@CRYPTO_cts
$LN21@CRYPTO_cts:
	lea	edx, DWORD PTR [edi+15]
	cmp	ebp, edx
	ja	SHORT $LL22@CRYPTO_cts
	cmp	ecx, edi
	jb	SHORT $LL22@CRYPTO_cts
$LN38@CRYPTO_cts:
; Line 204
	lea	ecx, DWORD PTR _tmp$[esp+84]
	mov	DWORD PTR tv959[esp+84], edi
	sub	edi, ecx
	lea	edx, DWORD PTR _tmp$[esp+84]
	mov	ecx, ebp
	mov	ebp, esi
	sub	ecx, edx
	mov	DWORD PTR tv957[esp+84], ecx
	mov	ecx, edx
	sub	ebp, ecx
	npad	7
$LL37@CRYPTO_cts:
; Line 206
	mov	dl, BYTE PTR _tmp$[esp+eax+84]
	lea	ecx, DWORD PTR [edi+eax]
	mov	bl, BYTE PTR _tmp$[esp+ecx+84]
	lea	esi, DWORD PTR _tmp$[esp+84]
	lea	ecx, DWORD PTR [eax+ebp]
	add	esi, ecx
	mov	ecx, DWORD PTR tv957[esp+84]
	add	ecx, eax
	inc	eax
	xor	dl, BYTE PTR [esi]
	mov	BYTE PTR _tmp$[esp+ecx+84], dl
; Line 207
	mov	BYTE PTR [esi], bl
	cmp	eax, 16					; 00000010H
	jb	SHORT $LL37@CRYPTO_cts
; Line 204
	mov	edi, DWORD PTR _in$GSCopy$1$[esp+84]
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+84]
	mov	ebx, DWORD PTR _residue$1$[esp+84]
	jmp	SHORT $LN3@CRYPTO_cts
	npad	10
$LL22@CRYPTO_cts:
; Line 206
	movups	xmm1, XMMWORD PTR [esi]
	mov	eax, 16					; 00000010H
	movups	xmm0, XMMWORD PTR _tmp$[esp+84]
	movups	xmm2, XMMWORD PTR [edi]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [ebp], xmm1
; Line 207
	movups	XMMWORD PTR [esi], xmm2
$LN3@CRYPTO_cts:
; Line 209
	add	ebx, 16					; 00000010H
	mov	esi, ebx
	mov	DWORD PTR _residue$1$[esp+84], ebx
	sub	esi, eax
	cmp	eax, ebx
	jae	$LN6@CRYPTO_cts
	cmp	esi, 32					; 00000020H
	jb	$LN24@CRYPTO_cts
; Line 210
	lea	edx, DWORD PTR [eax+ebp]
	lea	ecx, DWORD PTR _tmp$[esp+ebx+83]
	mov	DWORD PTR tv968[esp+84], edx
	cmp	edx, ecx
	ja	SHORT $LN25@CRYPTO_cts
	lea	ecx, DWORD PTR [ebp-1]
	lea	edx, DWORD PTR _tmp$[esp+84]
	add	ecx, ebx
	add	edx, eax
	cmp	ecx, edx
	jae	$LN24@CRYPTO_cts
$LN25@CRYPTO_cts:
	lea	ecx, DWORD PTR [edi-1]
	add	ecx, ebx
	lea	edx, DWORD PTR [edi+eax]
	cmp	DWORD PTR tv968[esp+84], ecx
	ja	SHORT $LN26@CRYPTO_cts
	lea	ecx, DWORD PTR [ebp-1]
	add	ecx, ebx
	cmp	ecx, edx
	jae	SHORT $LN24@CRYPTO_cts
$LN26@CRYPTO_cts:
	and	esi, 31					; 0000001fH
	mov	ecx, ebx
	sub	ecx, esi
; Line 209
	mov	esi, ebp
	mov	DWORD PTR tv960[esp+84], ecx
	sub	esi, edi
	lea	ecx, DWORD PTR [ebp+16]
	mov	DWORD PTR tv951[esp+84], esi
	mov	esi, DWORD PTR tv960[esp+84]
	lea	ebp, DWORD PTR _tmp$[esp+84]
	sub	ebp, edi
	add	ecx, eax
	mov	DWORD PTR tv950[esp+84], ebp
	lea	ebp, DWORD PTR _tmp$[esp+100]
	sub	ebp, edi
	mov	edi, DWORD PTR tv950[esp+84]
	mov	DWORD PTR tv949[esp+84], ebp
	mov	ebp, DWORD PTR tv951[esp+84]
	mov	ebx, DWORD PTR tv949[esp+84]
	npad	4
$LL7@CRYPTO_cts:
; Line 210
	movups	xmm0, XMMWORD PTR [edx]
	add	eax, 32					; 00000020H
	lea	edx, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [ecx+32]
	movups	xmm1, XMMWORD PTR [edi+edx-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [edx+ebp-32], xmm1
	movups	xmm1, XMMWORD PTR [ebx+edx-32]
	movups	xmm0, XMMWORD PTR [edx-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [ecx-32], xmm1
	cmp	eax, esi
	jb	SHORT $LL7@CRYPTO_cts
	mov	edi, DWORD PTR _in$GSCopy$1$[esp+84]
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+84]
	mov	ebx, DWORD PTR _residue$1$[esp+84]
$LN24@CRYPTO_cts:
; Line 209
	cmp	eax, ebx
	jae	SHORT $LN6@CRYPTO_cts
	lea	ecx, DWORD PTR _tmp$[esp+84]
	sub	edi, ecx
	sub	ebp, ecx
$LL23@CRYPTO_cts:
; Line 210
	lea	edx, DWORD PTR _tmp$[esp+84]
	add	edx, eax
	inc	eax
	mov	cl, BYTE PTR [edi+edx]
	xor	cl, BYTE PTR [edx]
	mov	BYTE PTR [edx+ebp], cl
	cmp	eax, ebx
	jb	SHORT $LL23@CRYPTO_cts
$LN6@CRYPTO_cts:
; Line 212
	mov	eax, DWORD PTR _len$GSCopy$1$[esp+84]
; Line 213
	mov	ecx, DWORD PTR __$ArrayPad$[esp+84]
	add	eax, 16					; 00000010H
	add	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
_CRYPTO_cts128_decrypt_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cts128_encrypt
_TEXT	SEGMENT
tv94 = -36						; size = 4
_ivec$GSCopy$1$ = -32					; size = 4
_key$GSCopy$1$ = -28					; size = 4
_cbc$GSCopy$1$ = -24					; size = 4
_tmp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_cbc$ = 28						; size = 4
_CRYPTO_cts128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 99
	mov	eax, 36					; 00000024H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+36], eax
	mov	eax, DWORD PTR _key$[esp+32]
	mov	ecx, DWORD PTR _ivec$[esp+32]
	mov	edx, DWORD PTR _cbc$[esp+32]
	push	ebx
	mov	ebx, DWORD PTR _len$[esp+36]
	mov	DWORD PTR _key$GSCopy$1$[esp+40], eax
	mov	DWORD PTR _ivec$GSCopy$1$[esp+40], ecx
	mov	DWORD PTR _cbc$GSCopy$1$[esp+40], edx
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+40]
	push	esi
	mov	esi, DWORD PTR _in$[esp+44]
; Line 108
	cmp	ebx, 16					; 00000010H
	ja	SHORT $LN2@CRYPTO_cts
; Line 109
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 132
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
$LN2@CRYPTO_cts:
	push	edi
; Line 111
	mov	edi, ebx
	mov	DWORD PTR tv94[esp+52], 16		; 00000010H
; Line 116
	push	1
	push	ecx
	and	edi, 15					; 0000000fH
	push	eax
	cmove	edi, DWORD PTR tv94[esp+64]
	sub	ebx, edi
	push	ebx
	push	ebp
	push	esi
	call	edx
; Line 127
	push	edi
	lea	eax, DWORD PTR [ebx+esi]
	xorps	xmm0, xmm0
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+84]
	add	ebp, ebx
	push	eax
	movups	XMMWORD PTR _tmp$[esp+88], xmm0
	call	_memcpy
; Line 128
	push	edi
	lea	esi, DWORD PTR [ebp-16]
	push	esi
	push	ebp
	call	_memcpy
; Line 129
	push	1
	push	DWORD PTR _ivec$GSCopy$1$[esp+104]
	lea	eax, DWORD PTR _tmp$[esp+108]
	push	DWORD PTR _key$GSCopy$1$[esp+108]
	push	16					; 00000010H
	push	esi
	push	eax
	call	DWORD PTR _cbc$GSCopy$1$[esp+124]
; Line 132
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	lea	eax, DWORD PTR [ebx+edi]
	add	esp, 72					; 00000048H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
_CRYPTO_cts128_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cts128_encrypt_block
_TEXT	SEGMENT
tv440 = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_block$ = 28						; size = 4
_CRYPTO_cts128_encrypt_block PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cts128.c
; Line 36
	mov	eax, 4
	call	__chkstk
	push	ebp
; Line 41
	mov	ebp, DWORD PTR _len$[esp+4]
	cmp	ebp, 16					; 00000010H
	ja	SHORT $LN5@CRYPTO_cts
; Line 42
	xor	eax, eax
	pop	ebp
; Line 61
	pop	ecx
	ret	0
$LN5@CRYPTO_cts:
	push	ebx
; Line 49
	mov	ebx, DWORD PTR _ivec$[esp+8]
	mov	eax, 16					; 00000010H
	push	esi
	mov	esi, DWORD PTR _in$[esp+12]
	push	edi
	push	DWORD PTR _block$[esp+16]
	mov	edi, ebp
	push	ebx
	push	DWORD PTR _key$[esp+24]
	and	edi, 15					; 0000000fH
	cmove	edi, eax
	sub	ebp, edi
	push	ebp
	push	DWORD PTR _out$[esp+32]
	mov	DWORD PTR _len$[esp+36], ebp
	push	esi
	call	_CRYPTO_cbc128_encrypt
; Line 52
	add	DWORD PTR _out$[esp+40], ebp
	add	esp, 24					; 00000018H
	add	esi, ebp
; Line 54
	xor	ecx, ecx
	test	edi, edi
	je	$LN3@CRYPTO_cts
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN11@CRYPTO_cts
; Line 55
	lea	eax, DWORD PTR [edi-1]
	lea	edx, DWORD PTR [ebx-1]
	add	eax, esi
	add	edx, edi
	cmp	ebx, eax
	ja	SHORT $LN12@CRYPTO_cts
	cmp	edx, esi
	jae	SHORT $LN11@CRYPTO_cts
$LN12@CRYPTO_cts:
	mov	eax, edi
	mov	edx, edi
	and	eax, 31					; 0000001fH
; Line 54
	mov	ebp, esi
	sub	edx, eax
	sub	ebp, ebx
	mov	DWORD PTR tv440[esp+20], ebp
	mov	eax, ebx
	mov	ebp, DWORD PTR _len$[esp+16]
	mov	ebx, DWORD PTR tv440[esp+20]
$LL4@CRYPTO_cts:
; Line 55
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [ebx+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [esi+ecx+16]
	add	ecx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	ecx, edx
	jb	SHORT $LL4@CRYPTO_cts
	mov	ebx, DWORD PTR _ivec$[esp+16]
$LN11@CRYPTO_cts:
; Line 54
	cmp	ecx, edi
	jae	SHORT $LN3@CRYPTO_cts
	mov	edx, edi
	lea	eax, DWORD PTR [ecx+ebx]
	sub	esi, ebx
	sub	edx, ecx
	npad	4
$LL10@CRYPTO_cts:
; Line 55
	mov	cl, BYTE PTR [eax+esi]
	lea	eax, DWORD PTR [eax+1]
	xor	BYTE PTR [eax-1], cl
	sub	edx, 1
	jne	SHORT $LL10@CRYPTO_cts
$LN3@CRYPTO_cts:
; Line 56
	push	DWORD PTR _key$[esp+16]
	push	ebx
	push	ebx
	call	DWORD PTR _block$[esp+28]
; Line 57
	mov	eax, DWORD PTR _out$[esp+28]
	push	edi
	lea	esi, DWORD PTR [eax-16]
	push	esi
	push	eax
	call	_memcpy
; Line 58
	movups	xmm0, XMMWORD PTR [ebx]
	add	esp, 24					; 00000018H
; Line 60
	lea	eax, DWORD PTR [edi+ebp]
	movups	XMMWORD PTR [esi], xmm0
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 61
	pop	ecx
	ret	0
_CRYPTO_cts128_encrypt_block ENDP
_TEXT	ENDS
END
