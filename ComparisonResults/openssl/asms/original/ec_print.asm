; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_print.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@	; `string'
;	COMDAT ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
CONST	SEGMENT
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ DB '0123456789ABCDEF', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_HEX_DIGITS DD	FLAT:??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
_DATA	ENDS
PUBLIC	_EC_POINT_point2bn
PUBLIC	_EC_POINT_bn2point
PUBLIC	_EC_POINT_point2hex
PUBLIC	_EC_POINT_hex2point
PUBLIC	??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_clear_free:PROC
EXTRN	_BN_bin2bn:PROC
EXTRN	_BN_bn2bin:PROC
EXTRN	_BN_hex2bn:PROC
EXTRN	_EC_POINT_new:PROC
EXTRN	_EC_POINT_clear_free:PROC
EXTRN	_EC_POINT_point2oct:PROC
EXTRN	_EC_POINT_oct2point:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@
CONST	SEGMENT
??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@ DB '.\crypto\ec\ec_pr'
	DB	'int.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EC_POINT_hex2point
_TEXT	SEGMENT
_tmp_bn$ = -4						; size = 4
_group$ = 8						; size = 4
_buf$ = 12						; size = 4
_point$ = 16						; size = 4
_ctx$ = 20						; size = 4
_EC_POINT_hex2point PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_print.c
; Line 167
	mov	eax, 4
	call	__chkstk
; Line 171
	push	DWORD PTR _buf$[esp]
	lea	eax, DWORD PTR _tmp_bn$[esp+8]
	mov	DWORD PTR _tmp_bn$[esp+8], 0
	push	eax
	call	_BN_hex2bn
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@EC_POINT_h
; Line 179
	pop	ecx
	ret	0
$LN2@EC_POINT_h:
	push	esi
; Line 174
	push	DWORD PTR _ctx$[esp+4]
	push	DWORD PTR _point$[esp+8]
	push	DWORD PTR _tmp_bn$[esp+16]
	push	DWORD PTR _group$[esp+16]
	call	_EC_POINT_bn2point
; Line 176
	push	DWORD PTR _tmp_bn$[esp+24]
	mov	esi, eax
	call	_BN_clear_free
	add	esp, 20					; 00000014H
; Line 178
	mov	eax, esi
	pop	esi
; Line 179
	pop	ecx
	ret	0
_EC_POINT_hex2point ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EC_POINT_point2hex
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_form$ = 16						; size = 4
_ctx$ = 20						; size = 4
_EC_POINT_point2hex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_print.c
; Line 129
	mov	eax, 4
	call	__chkstk
	push	ebx
; Line 134
	mov	ebx, DWORD PTR _ctx$[esp+4]
	push	ebp
	mov	ebp, DWORD PTR _form$[esp+8]
	push	esi
	push	ebx
	push	0
	push	0
	push	ebp
	push	DWORD PTR _point$[esp+28]
	push	DWORD PTR _group$[esp+32]
	call	_EC_POINT_point2oct
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 135
	test	esi, esi
	jne	SHORT $LN5@EC_POINT_p
	pop	esi
	pop	ebp
	pop	ebx
; Line 163
	pop	ecx
	ret	0
$LN5@EC_POINT_p:
	push	edi
; Line 138
	push	138					; 0000008aH
	push	OFFSET ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@
	push	esi
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN16@EC_POINT_p
; Line 141
	push	ebx
	push	esi
	push	edi
	push	ebp
	push	DWORD PTR _point$[esp+32]
	push	DWORD PTR _group$[esp+36]
	call	_EC_POINT_point2oct
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN15@EC_POINT_p
; Line 146
	push	146					; 00000092H
	lea	eax, DWORD PTR [esi*2+2]
	push	OFFSET ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1$[esp+20], eax
; Line 147
	test	eax, eax
	jne	SHORT $LN8@EC_POINT_p
$LN15@EC_POINT_p:
; Line 148
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN16@EC_POINT_p:
; Line 149
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 163
	pop	ecx
	ret	0
$LN8@EC_POINT_p:
; Line 151
	mov	edx, eax
; Line 152
	mov	ebx, edi
; Line 153
	test	esi, esi
	je	SHORT $LN3@EC_POINT_p
	mov	ebp, DWORD PTR _HEX_DIGITS
	npad	7
$LL4@EC_POINT_p:
; Line 154
	movzx	ecx, BYTE PTR [ebx]
	lea	ebx, DWORD PTR [ebx+1]
; Line 155
	mov	eax, ecx
; Line 156
	and	ecx, 15					; 0000000fH
	sar	eax, 4
	movzx	eax, BYTE PTR [eax+ebp]
	mov	BYTE PTR [edx], al
	movzx	eax, BYTE PTR [ecx+ebp]
	mov	BYTE PTR [edx+1], al
	add	edx, 2
	sub	esi, 1
	jne	SHORT $LL4@EC_POINT_p
$LN3@EC_POINT_p:
; Line 160
	push	edi
	mov	BYTE PTR [edx], 0
	call	_CRYPTO_free
; Line 162
	mov	eax, DWORD PTR _ret$1$[esp+24]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 163
	pop	ecx
	ret	0
_EC_POINT_point2hex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EC_POINT_bn2point
_TEXT	SEGMENT
_group$ = 8						; size = 4
_bn$ = 12						; size = 4
_point$ = 16						; size = 4
_ctx$ = 20						; size = 4
_EC_POINT_bn2point PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_print.c
; Line 88
	push	ebp
	push	edi
; Line 93
	mov	edi, DWORD PTR _bn$[esp+4]
	push	edi
	call	_BN_num_bits
	add	eax, 7
	add	esp, 4
	cdq
	and	edx, 7
	lea	ebp, DWORD PTR [edx+eax]
	sar	ebp, 3
	test	ebp, ebp
	jne	SHORT $LN2@EC_POINT_b
; Line 94
	pop	edi
	xor	eax, eax
	pop	ebp
; Line 121
	ret	0
$LN2@EC_POINT_b:
	push	esi
; Line 95
	push	95					; 0000005fH
	push	OFFSET ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 96
	test	esi, esi
	je	SHORT $LN14@EC_POINT_b
; Line 99
	push	esi
	push	edi
	call	_BN_bn2bin
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@EC_POINT_b
; Line 100
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN14@EC_POINT_b:
; Line 101
	pop	esi
	pop	edi
	xor	eax, eax
	pop	ebp
; Line 121
	ret	0
$LN4@EC_POINT_b:
; Line 104
	mov	eax, DWORD PTR _group$[esp+8]
	push	ebx
	mov	ebx, DWORD PTR _point$[esp+12]
	test	ebx, ebx
	jne	SHORT $LN5@EC_POINT_b
; Line 105
	push	eax
	call	_EC_POINT_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN11@EC_POINT_b
; Line 106
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 107
	xor	eax, eax
	pop	ebx
	pop	esi
	pop	edi
	pop	ebp
; Line 121
	ret	0
$LN5@EC_POINT_b:
; Line 110
	mov	edi, ebx
	jmp	SHORT $LN6@EC_POINT_b
$LN11@EC_POINT_b:
	mov	eax, DWORD PTR _group$[esp+12]
$LN6@EC_POINT_b:
; Line 112
	push	DWORD PTR _ctx$[esp+12]
	push	ebp
	push	esi
	push	edi
	push	eax
	call	_EC_POINT_oct2point
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN8@EC_POINT_b
; Line 113
	test	ebx, ebx
	jne	SHORT $LN9@EC_POINT_b
; Line 114
	push	edi
	call	_EC_POINT_clear_free
	add	esp, 4
$LN9@EC_POINT_b:
; Line 115
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 116
	xor	eax, eax
	pop	ebx
	pop	esi
	pop	edi
	pop	ebp
; Line 121
	ret	0
$LN8@EC_POINT_b:
; Line 119
	push	esi
	call	_CRYPTO_free
	add	esp, 4
; Line 120
	mov	eax, edi
	pop	ebx
	pop	esi
	pop	edi
	pop	ebp
; Line 121
	ret	0
_EC_POINT_bn2point ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _EC_POINT_point2bn
_TEXT	SEGMENT
_group$ = 8						; size = 4
_point$ = 12						; size = 4
_form$ = 16						; size = 4
_ret$ = 20						; size = 4
_ctx$ = 24						; size = 4
_EC_POINT_point2bn PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_print.c
; Line 63
	push	esi
; Line 67
	push	DWORD PTR _ctx$[esp]
	push	0
	push	0
	push	DWORD PTR _form$[esp+12]
	push	DWORD PTR _point$[esp+16]
	push	DWORD PTR _group$[esp+20]
	call	_EC_POINT_point2oct
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 68
	test	esi, esi
	jne	SHORT $LN2@EC_POINT_p
	pop	esi
; Line 84
	ret	0
$LN2@EC_POINT_p:
	push	edi
; Line 71
	push	71					; 00000047H
	push	OFFSET ??_C@_0BH@IPLJPDGN@?4?2crypto?2ec?2ec_print?4c?$AA@
	push	esi
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN7@EC_POINT_p
; Line 74
	push	DWORD PTR _ctx$[esp+4]
	push	esi
	push	edi
	push	DWORD PTR _form$[esp+16]
	push	DWORD PTR _point$[esp+20]
	push	DWORD PTR _group$[esp+24]
	call	_EC_POINT_point2oct
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN4@EC_POINT_p
; Line 75
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN7@EC_POINT_p:
; Line 76
	pop	edi
	xor	eax, eax
	pop	esi
; Line 84
	ret	0
$LN4@EC_POINT_p:
; Line 79
	push	DWORD PTR _ret$[esp+4]
	push	esi
	push	edi
	call	_BN_bin2bn
; Line 81
	push	edi
	mov	esi, eax
	call	_CRYPTO_free
	add	esp, 16					; 00000010H
; Line 83
	mov	eax, esi
	pop	edi
	pop	esi
; Line 84
	ret	0
_EC_POINT_point2bn ENDP
_TEXT	ENDS
END
