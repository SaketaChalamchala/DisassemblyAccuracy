; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07OBLKMMON@dynamic?$AA@			; `string'
PUBLIC	??_C@_0BP@FKLJFHIG@Dynamic?5engine?5loading?5support?$AA@ ; `string'
PUBLIC	??_C@_07EGEBNIPD@SO_PATH?$AA@			; `string'
PUBLIC	??_C@_0DE@MKENDFJ@Specifies?5the?5path?5to?5the?5new?5EN@ ; `string'
PUBLIC	??_C@_09HNPKDHLJ@NO_VCHECK?$AA@			; `string'
PUBLIC	??_C@_0DP@MGLBEDAI@Specifies?5to?5continue?5even?5if?5ve@ ; `string'
PUBLIC	??_C@_02OLOABKKD@ID?$AA@			; `string'
PUBLIC	??_C@_0CI@KHBNIFND@Specifies?5an?5ENGINE?5id?5name?5for?5@ ; `string'
PUBLIC	??_C@_08OIMNLDBA@LIST_ADD?$AA@			; `string'
PUBLIC	??_C@_0EN@MAIEEKAJ@Whether?5to?5add?5a?5loaded?5ENGINE?5t@ ; `string'
PUBLIC	??_C@_08FOPBLCPF@DIR_LOAD?$AA@			; `string'
PUBLIC	??_C@_0EO@IFHAKFHN@Specifies?5whether?5to?5load?5from?5?8@ ; `string'
PUBLIC	??_C@_07NNLCLNII@DIR_ADD?$AA@			; `string'
PUBLIC	??_C@_0DC@PCHIPABO@Adds?5a?5directory?5from?5which?5ENGI@ ; `string'
PUBLIC	??_C@_04ICOEJIDH@LOAD?$AA@			; `string'
PUBLIC	??_C@_0CP@CHCFAACF@Load?5up?5the?5ENGINE?5specified?5by?5@ ; `string'
;	COMDAT ??_C@_0CP@CHCFAACF@Load?5up?5the?5ENGINE?5specified?5by?5@
CONST	SEGMENT
??_C@_0CP@CHCFAACF@Load?5up?5the?5ENGINE?5specified?5by?5@ DB 'Load up th'
	DB	'e ENGINE specified by other settings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ICOEJIDH@LOAD?$AA@
CONST	SEGMENT
??_C@_04ICOEJIDH@LOAD?$AA@ DB 'LOAD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PCHIPABO@Adds?5a?5directory?5from?5which?5ENGI@
CONST	SEGMENT
??_C@_0DC@PCHIPABO@Adds?5a?5directory?5from?5which?5ENGI@ DB 'Adds a dire'
	DB	'ctory from which ENGINEs can be loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NNLCLNII@DIR_ADD?$AA@
CONST	SEGMENT
??_C@_07NNLCLNII@DIR_ADD?$AA@ DB 'DIR_ADD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@IFHAKFHN@Specifies?5whether?5to?5load?5from?5?8@
CONST	SEGMENT
??_C@_0EO@IFHAKFHN@Specifies?5whether?5to?5load?5from?5?8@ DB 'Specifies '
	DB	'whether to load from ''DIR_ADD'' directories (0=no,1=yes,2=ma'
	DB	'ndatory)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08FOPBLCPF@DIR_LOAD?$AA@
CONST	SEGMENT
??_C@_08FOPBLCPF@DIR_LOAD?$AA@ DB 'DIR_LOAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@MAIEEKAJ@Whether?5to?5add?5a?5loaded?5ENGINE?5t@
CONST	SEGMENT
??_C@_0EN@MAIEEKAJ@Whether?5to?5add?5a?5loaded?5ENGINE?5t@ DB 'Whether to'
	DB	' add a loaded ENGINE to the internal list (0=no,1=yes,2=manda'
	DB	'tory)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIMNLDBA@LIST_ADD?$AA@
CONST	SEGMENT
??_C@_08OIMNLDBA@LIST_ADD?$AA@ DB 'LIST_ADD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KHBNIFND@Specifies?5an?5ENGINE?5id?5name?5for?5@
CONST	SEGMENT
??_C@_0CI@KHBNIFND@Specifies?5an?5ENGINE?5id?5name?5for?5@ DB 'Specifies '
	DB	'an ENGINE id name for loading', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OLOABKKD@ID?$AA@
CONST	SEGMENT
??_C@_02OLOABKKD@ID?$AA@ DB 'ID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MGLBEDAI@Specifies?5to?5continue?5even?5if?5ve@
CONST	SEGMENT
??_C@_0DP@MGLBEDAI@Specifies?5to?5continue?5even?5if?5ve@ DB 'Specifies t'
	DB	'o continue even if version checking fails (boolean)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HNPKDHLJ@NO_VCHECK?$AA@
CONST	SEGMENT
??_C@_09HNPKDHLJ@NO_VCHECK?$AA@ DB 'NO_VCHECK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MKENDFJ@Specifies?5the?5path?5to?5the?5new?5EN@
CONST	SEGMENT
??_C@_0DE@MKENDFJ@Specifies?5the?5path?5to?5the?5new?5EN@ DB 'Specifies t'
	DB	'he path to the new ENGINE shared library', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGEBNIPD@SO_PATH?$AA@
CONST	SEGMENT
??_C@_07EGEBNIPD@SO_PATH?$AA@ DB 'SO_PATH', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_dynamic_cmd_defns DD 0c8H
	DD	FLAT:??_C@_07EGEBNIPD@SO_PATH?$AA@
	DD	FLAT:??_C@_0DE@MKENDFJ@Specifies?5the?5path?5to?5the?5new?5EN@
	DD	02H
	DD	0c9H
	DD	FLAT:??_C@_09HNPKDHLJ@NO_VCHECK?$AA@
	DD	FLAT:??_C@_0DP@MGLBEDAI@Specifies?5to?5continue?5even?5if?5ve@
	DD	01H
	DD	0caH
	DD	FLAT:??_C@_02OLOABKKD@ID?$AA@
	DD	FLAT:??_C@_0CI@KHBNIFND@Specifies?5an?5ENGINE?5id?5name?5for?5@
	DD	02H
	DD	0cbH
	DD	FLAT:??_C@_08OIMNLDBA@LIST_ADD?$AA@
	DD	FLAT:??_C@_0EN@MAIEEKAJ@Whether?5to?5add?5a?5loaded?5ENGINE?5t@
	DD	01H
	DD	0ccH
	DD	FLAT:??_C@_08FOPBLCPF@DIR_LOAD?$AA@
	DD	FLAT:??_C@_0EO@IFHAKFHN@Specifies?5whether?5to?5load?5from?5?8@
	DD	01H
	DD	0cdH
	DD	FLAT:??_C@_07NNLCLNII@DIR_ADD?$AA@
	DD	FLAT:??_C@_0DC@PCHIPABO@Adds?5a?5directory?5from?5which?5ENGI@
	DD	02H
	DD	0ceH
	DD	FLAT:??_C@_04ICOEJIDH@LOAD?$AA@
	DD	FLAT:??_C@_0CP@CHCFAACF@Load?5up?5the?5ENGINE?5specified?5by?5@
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_0BP@FKLJFHIG@Dynamic?5engine?5loading?5support?$AA@
CONST	SEGMENT
??_C@_0BP@FKLJFHIG@Dynamic?5engine?5loading?5support?$AA@ DB 'Dynamic eng'
	DB	'ine loading support', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OBLKMMON@dynamic?$AA@
CONST	SEGMENT
??_C@_07OBLKMMON@dynamic?$AA@ DB 'dynamic', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_engine_dynamic_id DD FLAT:??_C@_07OBLKMMON@dynamic?$AA@
_engine_dynamic_name DD FLAT:??_C@_0BP@FKLJFHIG@Dynamic?5engine?5loading?5support?$AA@
_dynamic_ex_data_idx DD 0ffffffffH
_DATA	ENDS
PUBLIC	_ENGINE_load_dynamic
PUBLIC	??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@ ; `string'
PUBLIC	??_C@_07MCDNKAID@v_check?$AA@			; `string'
PUBLIC	??_C@_0M@PFPCABMP@bind_engine?$AA@		; `string'
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_free:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_insert:PROC
EXTRN	_CRYPTO_get_ex_data_implementation:PROC
EXTRN	_CRYPTO_lock:PROC
EXTRN	_CRYPTO_get_locking_callback:PROC
EXTRN	_CRYPTO_get_add_lock_callback:PROC
EXTRN	_CRYPTO_get_dynlock_create_callback:PROC
EXTRN	_CRYPTO_get_dynlock_lock_callback:PROC
EXTRN	_CRYPTO_get_dynlock_destroy_callback:PROC
EXTRN	_CRYPTO_get_mem_functions:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BUF_strdup:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_clear_error:PROC
EXTRN	_ERR_get_implementation:PROC
EXTRN	_ENGINE_add:PROC
EXTRN	_ENGINE_new:PROC
EXTRN	_ENGINE_free:PROC
EXTRN	_ENGINE_set_id:PROC
EXTRN	_ENGINE_set_name:PROC
EXTRN	_ENGINE_set_init_function:PROC
EXTRN	_ENGINE_set_finish_function:PROC
EXTRN	_ENGINE_set_ctrl_function:PROC
EXTRN	_ENGINE_set_flags:PROC
EXTRN	_ENGINE_set_cmd_defns:PROC
EXTRN	_ENGINE_get_ex_new_index:PROC
EXTRN	_ENGINE_set_ex_data:PROC
EXTRN	_ENGINE_get_ex_data:PROC
EXTRN	_ENGINE_get_static_state:PROC
EXTRN	_engine_set_all_null:PROC
EXTRN	_DSO_new:PROC
EXTRN	_DSO_free:PROC
EXTRN	_DSO_convert_filename:PROC
EXTRN	_DSO_merge:PROC
EXTRN	_DSO_load:PROC
EXTRN	_DSO_bind_func:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0M@PFPCABMP@bind_engine?$AA@
CONST	SEGMENT
??_C@_0M@PFPCABMP@bind_engine?$AA@ DB 'bind_engine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCDNKAID@v_check?$AA@
CONST	SEGMENT
??_C@_07MCDNKAID@v_check?$AA@ DB 'v_check', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
CONST	SEGMENT
??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@ DB '.\crypto\engin'
	DB	'e\eng_dyn.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_load
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_int_load PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 428
	push	esi
; Line 431
	mov	esi, DWORD PTR _ctx$[esp]
	cmp	DWORD PTR [esi+36], 2
	je	SHORT $LN5@int_load
	push	0
	push	0
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	call	_DSO_load
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@int_load
; Line 434
	mov	eax, 1
	pop	esi
; Line 451
	ret	0
$LN5@int_load:
; Line 436
	cmp	DWORD PTR [esi+36], 0
	push	ebp
	je	SHORT $LN7@int_load
	push	DWORD PTR [esi+40]
	call	_sk_num
	mov	ebp, eax
	add	esp, 4
	cmp	ebp, 1
	jl	SHORT $LN7@int_load
; Line 438
	push	ebx
	push	edi
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN3@int_load
	npad	8
$LL4@int_load:
; Line 439
	push	edi
	push	DWORD PTR [esi+40]
	call	_sk_value
; Line 440
	push	eax
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	call	_DSO_merge
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 441
	test	ebx, ebx
	je	SHORT $LN3@int_load
; Line 443
	push	0
	push	0
	push	ebx
	push	DWORD PTR [esi]
	call	_DSO_load
	add	esp, 16					; 00000010H
; Line 448
	push	ebx
	test	eax, eax
	jne	SHORT $LN13@int_load
	call	_CRYPTO_free
	inc	edi
	add	esp, 4
	cmp	edi, ebp
	jl	SHORT $LL4@int_load
$LN3@int_load:
	pop	edi
	pop	ebx
	pop	ebp
; Line 450
	xor	eax, eax
	pop	esi
; Line 451
	ret	0
$LN13@int_load:
; Line 445
	call	_CRYPTO_free
	add	esp, 4
; Line 446
	mov	eax, 1
	pop	edi
	pop	ebx
	pop	ebp
	pop	esi
; Line 451
	ret	0
$LN7@int_load:
	pop	ebp
; Line 437
	xor	eax, eax
	pop	esi
; Line 451
	ret	0
_int_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _engine_dynamic
_TEXT	SEGMENT
_engine_dynamic PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 294
	push	esi
; Line 295
	call	_ENGINE_new
	mov	esi, eax
; Line 296
	test	esi, esi
	je	$LN6@engine_dyn
; Line 303
	push	DWORD PTR _engine_dynamic_id
	push	esi
	call	_ENGINE_set_id
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
	push	DWORD PTR _engine_dynamic_name
	push	esi
	call	_ENGINE_set_name
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
	push	OFFSET _dynamic_init
	push	esi
	call	_ENGINE_set_init_function
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
	push	OFFSET _dynamic_finish
	push	esi
	call	_ENGINE_set_finish_function
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
	push	OFFSET _dynamic_ctrl
	push	esi
	call	_ENGINE_set_ctrl_function
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
	push	4
	push	esi
	call	_ENGINE_set_flags
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
	push	OFFSET _dynamic_cmd_defns
	push	esi
	call	_ENGINE_set_cmd_defns
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@engine_dyn
; Line 308
	mov	eax, esi
	pop	esi
; Line 309
	ret	0
$LN4@engine_dyn:
; Line 305
	push	esi
	call	_ENGINE_free
	add	esp, 4
$LN6@engine_dyn:
; Line 306
	xor	eax, eax
	pop	esi
; Line 309
	ret	0
_engine_dynamic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_get_data_ctx
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_e$ = 8							; size = 4
_dynamic_get_data_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 258
	mov	eax, 4
	call	__chkstk
; Line 260
	mov	eax, DWORD PTR _dynamic_ex_data_idx
	push	esi
	test	eax, eax
	jns	SHORT $LN2@dynamic_ge
; Line 266
	push	OFFSET _dynamic_data_ctx_free_func
	push	0
	push	0
	push	0
	push	0
	call	_ENGINE_get_ex_new_index
	mov	esi, eax
	add	esp, 20					; 00000014H
; Line 268
	cmp	esi, -1
	jne	SHORT $LN3@dynamic_ge
; Line 269
	push	269					; 0000010dH
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	144					; 00000090H
	push	181					; 000000b5H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN8@dynamic_ge:
; Line 270
	xor	eax, eax
	pop	esi
; Line 291
	pop	ecx
	ret	0
$LN3@dynamic_ge:
; Line 272
	push	272					; 00000110H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	30					; 0000001eH
	push	9
	call	_CRYPTO_lock
; Line 274
	mov	eax, DWORD PTR _dynamic_ex_data_idx
	test	eax, eax
; Line 279
	push	279					; 00000117H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	cmovs	eax, esi
	push	30					; 0000001eH
	push	10					; 0000000aH
	mov	DWORD PTR _dynamic_ex_data_idx, eax
	call	_CRYPTO_lock
	mov	eax, DWORD PTR _dynamic_ex_data_idx
	add	esp, 32					; 00000020H
$LN2@dynamic_ge:
; Line 285
	mov	esi, DWORD PTR _e$[esp+4]
	push	eax
	push	esi
	call	_ENGINE_get_ex_data
	add	esp, 8
	mov	DWORD PTR _ctx$[esp+8], eax
; Line 287
	test	eax, eax
	jne	SHORT $LN1@dynamic_ge
	lea	eax, DWORD PTR _ctx$[esp+8]
	push	eax
	push	esi
	call	_dynamic_set_data_ctx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@dynamic_ge
; Line 289
	mov	eax, DWORD PTR _ctx$[esp+8]
$LN1@dynamic_ge:
	pop	esi
; Line 291
	pop	ecx
	ret	0
_dynamic_get_data_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_set_data_ctx
_TEXT	SEGMENT
_e$ = 8							; size = 4
_ctx$ = 12						; size = 4
_dynamic_set_data_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 208
	push	esi
; Line 210
	push	210					; 000000d2H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	44					; 0000002cH
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 211
	test	esi, esi
	jne	SHORT $LN2@dynamic_se
; Line 212
	push	212					; 000000d4H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	65					; 00000041H
	push	183					; 000000b7H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 213
	xor	eax, eax
	pop	esi
; Line 251
	ret	0
$LN2@dynamic_se:
; Line 215
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 216
	mov	DWORD PTR [esi], 0
; Line 217
	mov	DWORD PTR [esi+4], 0
; Line 218
	mov	DWORD PTR [esi+8], 0
; Line 219
	mov	DWORD PTR [esi+12], 0
; Line 220
	mov	DWORD PTR [esi+16], 0
; Line 221
	mov	DWORD PTR [esi+20], 0
; Line 222
	mov	DWORD PTR [esi+24], 0
; Line 223
	mov	DWORD PTR [esi+28], OFFSET ??_C@_07MCDNKAID@v_check?$AA@
; Line 224
	mov	DWORD PTR [esi+32], OFFSET ??_C@_0M@PFPCABMP@bind_engine?$AA@
; Line 225
	mov	DWORD PTR [esi+36], 1
; Line 226
	call	_sk_new_null
	mov	DWORD PTR [esi+40], eax
; Line 227
	test	eax, eax
	jne	SHORT $LN3@dynamic_se
; Line 228
	push	228					; 000000e4H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	65					; 00000041H
	push	183					; 000000b7H
	push	38					; 00000026H
	call	_ERR_put_error
; Line 229
	push	esi
	call	_CRYPTO_free
	add	esp, 24					; 00000018H
; Line 230
	xor	eax, eax
	pop	esi
; Line 251
	ret	0
$LN3@dynamic_se:
	push	ebx
; Line 232
	push	232					; 000000e8H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	30					; 0000001eH
	push	9
	call	_CRYPTO_lock
; Line 235
	push	DWORD PTR _dynamic_ex_data_idx
	push	DWORD PTR _e$[esp+24]
	call	_ENGINE_get_ex_data
	mov	ebx, DWORD PTR _ctx$[esp+28]
	add	esp, 24					; 00000018H
	mov	DWORD PTR [ebx], eax
	test	eax, eax
	jne	SHORT $LN4@dynamic_se
; Line 237
	push	esi
	push	DWORD PTR _dynamic_ex_data_idx
	push	DWORD PTR _e$[esp+12]
	call	_ENGINE_set_ex_data
	add	esp, 12					; 0000000cH
; Line 238
	mov	DWORD PTR [ebx], esi
; Line 239
	xor	esi, esi
$LN4@dynamic_se:
; Line 241
	push	241					; 000000f1H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	30					; 0000001eH
	push	10					; 0000000aH
	call	_CRYPTO_lock
	add	esp, 16					; 00000010H
	pop	ebx
; Line 246
	test	esi, esi
	je	SHORT $LN5@dynamic_se
; Line 247
	push	DWORD PTR [esi+40]
	call	_sk_free
; Line 248
	push	esi
	call	_CRYPTO_free
	add	esp, 8
$LN5@dynamic_se:
; Line 250
	mov	eax, 1
	pop	esi
; Line 251
	ret	0
_dynamic_set_data_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_data_ctx_free_func
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_ptr$ = 12						; size = 4
_ad$ = 16						; size = 4
_idx$ = 20						; size = 4
_argl$ = 24						; size = 4
_argp$ = 28						; size = 4
_dynamic_data_ctx_free_func PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 186
	push	esi
; Line 187
	mov	esi, DWORD PTR _ptr$[esp]
	test	esi, esi
	je	SHORT $LN2@dynamic_da
; Line 189
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@dynamic_da
; Line 190
	push	eax
	call	_DSO_free
	add	esp, 4
$LN3@dynamic_da:
; Line 191
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN4@dynamic_da
; Line 192
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@dynamic_da:
; Line 193
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN5@dynamic_da
; Line 194
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN5@dynamic_da:
; Line 195
	mov	eax, DWORD PTR [esi+40]
	test	eax, eax
	je	SHORT $LN6@dynamic_da
; Line 196
	push	OFFSET _int_free_str
	push	eax
	call	_sk_pop_free
	add	esp, 8
$LN6@dynamic_da:
; Line 197
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN2@dynamic_da:
	pop	esi
; Line 199
	ret	0
_dynamic_data_ctx_free_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_free_str
_TEXT	SEGMENT
_s$ = 8							; size = 4
_int_free_str PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 171
	jmp	_CRYPTO_free
_int_free_str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_load
_TEXT	SEGMENT
_fns$ = -156						; size = 44
_cpy$ = -112						; size = 112
_e$ = 8							; size = 4
_ctx$ = 12						; size = 4
_dynamic_load PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 454
	mov	eax, 156				; 0000009cH
	call	__chkstk
	push	ebx
; Line 458
	mov	ebx, DWORD PTR _ctx$[esp+156]
	cmp	DWORD PTR [ebx], 0
	jne	SHORT $LN2@dynamic_lo
; Line 459
	call	_DSO_new
	mov	DWORD PTR [ebx], eax
$LN2@dynamic_lo:
; Line 460
	cmp	DWORD PTR [ebx+12], 0
	jne	SHORT $LN3@dynamic_lo
; Line 461
	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	je	SHORT $LN19@dynamic_lo
; Line 463
	push	eax
	push	DWORD PTR [ebx]
	call	_DSO_convert_filename
	add	esp, 8
	mov	DWORD PTR [ebx+12], eax
$LN3@dynamic_lo:
; Line 466
	push	ebx
	call	_int_load
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@dynamic_lo
; Line 467
	push	467					; 000001d3H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	132					; 00000084H
	push	182					; 000000b6H
	push	38					; 00000026H
	call	_ERR_put_error
; Line 468
	push	DWORD PTR [ebx]
	call	_DSO_free
	add	esp, 24					; 00000018H
; Line 469
	mov	DWORD PTR [ebx], 0
$LN19@dynamic_lo:
; Line 470
	xor	eax, eax
	pop	ebx
; Line 570
	add	esp, 156				; 0000009cH
	ret	0
$LN5@dynamic_lo:
; Line 473
	push	DWORD PTR [ebx+32]
	push	DWORD PTR [ebx]
	call	_DSO_bind_func
	add	esp, 8
	mov	DWORD PTR [ebx+8], eax
	test	eax, eax
	jne	SHORT $LN6@dynamic_lo
; Line 478
	push	DWORD PTR [ebx]
	mov	DWORD PTR [ebx+8], eax
	call	_DSO_free
; Line 480
	push	480					; 000001e0H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	104					; 00000068H
$LN21@dynamic_lo:
	push	182					; 000000b6H
	push	38					; 00000026H
	mov	DWORD PTR [ebx], 0
	call	_ERR_put_error
	add	esp, 24					; 00000018H
; Line 481
	xor	eax, eax
	pop	ebx
; Line 570
	add	esp, 156				; 0000009cH
	ret	0
$LN6@dynamic_lo:
; Line 484
	cmp	DWORD PTR [ebx+16], 0
	jne	SHORT $LN9@dynamic_lo
; Line 490
	push	DWORD PTR [ebx+28]
	push	DWORD PTR [ebx]
	call	_DSO_bind_func
	add	esp, 8
	mov	DWORD PTR [ebx+4], eax
; Line 493
	test	eax, eax
	je	SHORT $LN15@dynamic_lo
; Line 494
	push	131072					; 00020000H
	call	eax
	add	esp, 4
; Line 500
	cmp	eax, 131072				; 00020000H
	jae	SHORT $LN9@dynamic_lo
$LN15@dynamic_lo:
; Line 504
	push	DWORD PTR [ebx]
	mov	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+4], 0
	call	_DSO_free
; Line 506
	push	507					; 000001fbH
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	145					; 00000091H
; Line 508
	jmp	SHORT $LN21@dynamic_lo
$LN9@dynamic_lo:
	push	ebp
; Line 515
	mov	ebp, DWORD PTR _e$[esp+160]
	mov	ecx, 28					; 0000001cH
	push	esi
	push	edi
	mov	esi, ebp
	lea	edi, DWORD PTR _cpy$[esp+172]
	rep movsd
; Line 523
	call	_ENGINE_get_static_state
	mov	DWORD PTR _fns$[esp+172], eax
; Line 524
	call	_ERR_get_implementation
	mov	DWORD PTR _fns$[esp+176], eax
; Line 525
	call	_CRYPTO_get_ex_data_implementation
	mov	DWORD PTR _fns$[esp+180], eax
; Line 526
	lea	eax, DWORD PTR _fns$[esp+192]
	push	eax
	lea	eax, DWORD PTR _fns$[esp+192]
	push	eax
	lea	eax, DWORD PTR _fns$[esp+192]
	push	eax
	call	_CRYPTO_get_mem_functions
; Line 528
	call	_CRYPTO_get_locking_callback
	mov	DWORD PTR _fns$[esp+208], eax
; Line 529
	call	_CRYPTO_get_add_lock_callback
	mov	DWORD PTR _fns$[esp+212], eax
; Line 530
	call	_CRYPTO_get_dynlock_create_callback
	mov	DWORD PTR _fns$[esp+216], eax
; Line 531
	call	_CRYPTO_get_dynlock_lock_callback
	mov	DWORD PTR _fns$[esp+220], eax
; Line 532
	call	_CRYPTO_get_dynlock_destroy_callback
; Line 537
	push	ebp
	mov	DWORD PTR _fns$[esp+228], eax
	call	_engine_set_all_null
; Line 540
	lea	eax, DWORD PTR _fns$[esp+188]
	push	eax
	push	DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [ebx+8]
	push	ebp
	call	eax
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN10@dynamic_lo
; Line 543
	push	DWORD PTR [ebx]
	mov	DWORD PTR [ebx+8], eax
	mov	DWORD PTR [ebx+4], eax
	call	_DSO_free
; Line 545
	push	545					; 00000221H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	109					; 0000006dH
	push	182					; 000000b6H
	push	38					; 00000026H
	mov	DWORD PTR [ebx], 0
	call	_ERR_put_error
	add	esp, 24					; 00000018H
; Line 547
	lea	esi, DWORD PTR _cpy$[esp+172]
	mov	edi, ebp
	mov	ecx, 28					; 0000001cH
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
; Line 548
	xor	eax, eax
	pop	ebx
; Line 570
	add	esp, 156				; 0000009cH
	ret	0
$LN10@dynamic_lo:
; Line 551
	cmp	DWORD PTR [ebx+24], 0
	jle	SHORT $LN12@dynamic_lo
; Line 552
	push	ebp
	call	_ENGINE_add
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@dynamic_lo
; Line 554
	cmp	DWORD PTR [ebx+24], 1
	jle	SHORT $LN13@dynamic_lo
; Line 561
	push	562					; 00000232H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	103					; 00000067H
	push	182					; 000000b6H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 563
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 570
	add	esp, 156				; 0000009cH
	ret	0
$LN13@dynamic_lo:
; Line 566
	call	_ERR_clear_error
$LN12@dynamic_lo:
	pop	edi
	pop	esi
	pop	ebp
; Line 569
	mov	eax, 1
	pop	ebx
; Line 570
	add	esp, 156				; 0000009cH
	ret	0
_dynamic_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_ctrl
_TEXT	SEGMENT
_e$ = 8							; size = 4
_cmd$ = 12						; size = 4
_i$ = 16						; size = 4
_p$ = 20						; size = 4
_f$ = 24						; size = 4
_dynamic_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 349
	push	esi
	push	edi
; Line 350
	mov	edi, DWORD PTR _e$[esp+4]
	push	edi
	call	_dynamic_get_data_ctx
	mov	esi, eax
	add	esp, 4
; Line 353
	test	esi, esi
	jne	SHORT $LN4@dynamic_ct
; Line 354
	push	354					; 00000162H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	112					; 00000070H
; Line 423
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN4@dynamic_ct:
; Line 357
	cmp	DWORD PTR [esi], 0
; Line 359
	je	SHORT $LN5@dynamic_ct
; Line 360
	push	360					; 00000168H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	100					; 00000064H
; Line 423
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN5@dynamic_ct:
; Line 363
	mov	eax, DWORD PTR _cmd$[esp+4]
	add	eax, -200				; ffffff38H
	cmp	eax, 6
	ja	$LN28@dynamic_ct
	jmp	DWORD PTR $LN35@dynamic_ct[eax*4]
$LN6@dynamic_ct:
; Line 366
	mov	edi, DWORD PTR _p$[esp+4]
	test	edi, edi
	je	SHORT $LN7@dynamic_ct
	mov	ecx, edi
	lea	edx, DWORD PTR [ecx+1]
$LL30@dynamic_ct:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL30@dynamic_ct
	sub	ecx, edx
	xor	eax, eax
	cmp	ecx, 1
	cmovb	edi, eax
$LN7@dynamic_ct:
; Line 368
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN8@dynamic_ct
; Line 369
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN8@dynamic_ct:
; Line 370
	test	edi, edi
	je	SHORT $LN9@dynamic_ct
; Line 371
	push	edi
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi+12], eax
; Line 374
	xor	eax, eax
	cmp	DWORD PTR [esi+12], eax
	pop	edi
	setne	al
	pop	esi
; Line 425
	ret	0
$LN9@dynamic_ct:
; Line 374
	xor	eax, eax
	mov	DWORD PTR [esi+12], 0
	cmp	DWORD PTR [esi+12], eax
	pop	edi
	setne	al
	pop	esi
; Line 425
	ret	0
$LN11@dynamic_ct:
; Line 376
	xor	eax, eax
	cmp	DWORD PTR _i$[esp+4], eax
	pop	edi
	setne	al
	mov	DWORD PTR [esi+16], eax
; Line 377
	mov	eax, 1
	pop	esi
; Line 425
	ret	0
$LN12@dynamic_ct:
; Line 380
	mov	edi, DWORD PTR _p$[esp+4]
	test	edi, edi
	je	SHORT $LN13@dynamic_ct
	mov	ecx, edi
	lea	edx, DWORD PTR [ecx+1]
	npad	1
$LL31@dynamic_ct:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL31@dynamic_ct
	sub	ecx, edx
	xor	eax, eax
	cmp	ecx, 1
	cmovb	edi, eax
$LN13@dynamic_ct:
; Line 382
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN14@dynamic_ct
; Line 383
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN14@dynamic_ct:
; Line 384
	test	edi, edi
	je	SHORT $LN15@dynamic_ct
; Line 385
	push	edi
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi+20], eax
; Line 388
	xor	eax, eax
	cmp	DWORD PTR [esi+20], eax
	pop	edi
	setne	al
	pop	esi
; Line 425
	ret	0
$LN15@dynamic_ct:
; Line 388
	xor	eax, eax
	mov	DWORD PTR [esi+20], 0
	cmp	DWORD PTR [esi+20], eax
	pop	edi
	setne	al
	pop	esi
; Line 425
	ret	0
$LN17@dynamic_ct:
; Line 390
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, 2
	ja	SHORT $LN19@dynamic_ct
; Line 394
	mov	DWORD PTR [esi+24], eax
; Line 395
	mov	eax, 1
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN19@dynamic_ct:
; Line 391
	push	391					; 00000187H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	143					; 0000008fH
; Line 423
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN20@dynamic_ct:
; Line 397
	push	esi
	push	edi
	call	_dynamic_load
	add	esp, 8
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN21@dynamic_ct:
; Line 399
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, 2
	ja	SHORT $LN23@dynamic_ct
; Line 403
	mov	DWORD PTR [esi+36], eax
; Line 404
	mov	eax, 1
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN23@dynamic_ct:
; Line 400
	push	400					; 00000190H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	143					; 0000008fH
; Line 423
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN24@dynamic_ct:
; Line 407
	mov	edx, DWORD PTR _p$[esp+4]
	test	edx, edx
	je	SHORT $LN26@dynamic_ct
	mov	ecx, edx
	lea	edi, DWORD PTR [ecx+1]
$LL32@dynamic_ct:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL32@dynamic_ct
	sub	ecx, edi
	cmp	ecx, 1
	jb	SHORT $LN26@dynamic_ct
; Line 412
	push	edx
	call	_BUF_strdup
	add	esp, 4
; Line 413
	test	eax, eax
	jne	SHORT $LN27@dynamic_ct
; Line 414
	push	414					; 0000019eH
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	65					; 00000041H
; Line 423
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN27@dynamic_ct:
; Line 417
	push	-1
	push	eax
	push	DWORD PTR [esi+40]
	call	_sk_insert
	add	esp, 12					; 0000000cH
; Line 419
	mov	eax, 1
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN26@dynamic_ct:
; Line 408
	push	408					; 00000198H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	143					; 0000008fH
; Line 423
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
$LN28@dynamic_ct:
; Line 423
	push	423					; 000001a7H
	push	OFFSET ??_C@_0BK@JJPEGCHI@?4?2crypto?2engine?2eng_dyn?4c?$AA@
	push	119					; 00000077H
	push	180					; 000000b4H
	push	38					; 00000026H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 424
	xor	eax, eax
	pop	edi
	pop	esi
; Line 425
	ret	0
	npad	2
$LN35@dynamic_ct:
	DD	$LN6@dynamic_ct
	DD	$LN11@dynamic_ct
	DD	$LN12@dynamic_ct
	DD	$LN17@dynamic_ct
	DD	$LN21@dynamic_ct
	DD	$LN24@dynamic_ct
	DD	$LN20@dynamic_ct
_dynamic_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_finish
_TEXT	SEGMENT
_e$ = 8							; size = 4
_dynamic_finish PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 345
	xor	eax, eax
; Line 346
	ret	0
_dynamic_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dynamic_init
_TEXT	SEGMENT
_e$ = 8							; size = 4
_dynamic_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 336
	xor	eax, eax
; Line 337
	ret	0
_dynamic_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ENGINE_load_dynamic
_TEXT	SEGMENT
_ENGINE_load_dynamic PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\engine\eng_dyn.c
; Line 312
	push	esi
; Line 313
	call	_engine_dynamic
	mov	esi, eax
; Line 314
	test	esi, esi
	je	SHORT $LN1@ENGINE_loa
; Line 316
	push	esi
	call	_ENGINE_add
; Line 321
	push	esi
	call	_ENGINE_free
	add	esp, 8
	pop	esi
; Line 327
	jmp	_ERR_clear_error
$LN1@ENGINE_loa:
	pop	esi
; Line 328
	ret	0
_ENGINE_load_dynamic ENDP
_TEXT	ENDS
END
