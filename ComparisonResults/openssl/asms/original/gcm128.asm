; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CRYPTO_gcm128_new
PUBLIC	_CRYPTO_gcm128_init
PUBLIC	_CRYPTO_gcm128_setiv
PUBLIC	_CRYPTO_gcm128_aad
PUBLIC	_CRYPTO_gcm128_encrypt
PUBLIC	_CRYPTO_gcm128_decrypt
PUBLIC	_CRYPTO_gcm128_encrypt_ctr32
PUBLIC	_CRYPTO_gcm128_decrypt_ctr32
PUBLIC	_CRYPTO_gcm128_finish
PUBLIC	_CRYPTO_gcm128_tag
PUBLIC	_CRYPTO_gcm128_release
PUBLIC	??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_CRYPTO_memcmp:PROC
EXTRN	_gcm_init_clmul:PROC
EXTRN	_gcm_gmult_clmul:PROC
EXTRN	_gcm_ghash_clmul:PROC
EXTRN	_gcm_gmult_4bit_mmx:PROC
EXTRN	_gcm_ghash_4bit_mmx:PROC
EXTRN	_gcm_gmult_4bit_x86:PROC
EXTRN	_gcm_ghash_4bit_x86:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_OPENSSL_ia32cap_P:BYTE
;	COMDAT ??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@
CONST	SEGMENT
??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@ DB '.\crypto\modes\g'
	DB	'cm128.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcm_init_4bit
_TEXT	SEGMENT
tv159 = -32						; size = 4
_V$12$ = -28						; size = 4
_V$18$ = -24						; size = 4
tv156 = -20						; size = 4
_V$ = -16						; size = 16
_Htable$ = 8						; size = 4
_V$15$ = 12						; size = 4
tv161 = 12						; size = 4
_H$ = 12						; size = 4
_gcm_init_4bit PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 268
	mov	eax, 32					; 00000020H
	call	__chkstk
; Line 276
	mov	eax, DWORD PTR _H$[esp+28]
	push	ebx
	mov	ebx, DWORD PTR _Htable$[esp+32]
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR [ebx], 0
; Line 295
	xor	edi, edi
	mov	DWORD PTR [ebx+4], 0
	mov	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 0
	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	ebp, ecx
	mov	eax, DWORD PTR [eax+12]
	and	ebp, 1
	mov	DWORD PTR _V$[esp+56], ecx
	neg	ebp
	mov	DWORD PTR _V$[esp+60], eax
	and	ebp, -520093696				; e1000000H
	shrd	ecx, eax, 1
	mov	DWORD PTR _V$[esp+48], esi
	mov	DWORD PTR _V$[esp+52], edx
	or	edi, ecx
	movups	xmm0, XMMWORD PTR _V$[esp+48]
; Line 296
	mov	ecx, DWORD PTR _Htable$[esp+44]
	shr	eax, 1
	movups	XMMWORD PTR [ebx+128], xmm0
	mov	ebx, esi
	mov	DWORD PTR _V$[esp+56], edi
	shrd	esi, edx, 1
	shl	ebx, 31					; 0000001fH
	or	ebx, eax
	shr	edx, 1
	xor	eax, eax
	mov	DWORD PTR _V$[esp+60], ebx
	xor	eax, esi
	xor	ebp, edx
	mov	DWORD PTR _V$[esp+48], eax
; Line 297
	mov	esi, eax
	mov	DWORD PTR _V$[esp+52], ebp
	xor	edx, edx
	movups	xmm0, XMMWORD PTR _V$[esp+48]
	shl	esi, 31					; 0000001fH
	shrd	eax, ebp, 1
	movups	XMMWORD PTR [ecx+64], xmm0
	mov	ecx, edi
	shr	ebp, 1
	and	ecx, 1
	xor	edx, eax
	neg	ecx
	mov	DWORD PTR _V$[esp+48], edx
	shrd	edi, ebx, 1
	and	ecx, -520093696				; e1000000H
	mov	DWORD PTR _V$15$[esp+44], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR _V$15$[esp+44]
	or	ecx, edi
	xor	eax, ebp
	shr	ebx, 1
	or	esi, ebx
	mov	DWORD PTR _V$[esp+52], eax
; Line 299
	mov	edi, ecx
	mov	DWORD PTR _V$[esp+60], esi
	and	edi, 1
	mov	DWORD PTR _V$[esp+56], ecx
	movups	xmm0, XMMWORD PTR _V$[esp+48]
	mov	DWORD PTR _V$15$[esp+44], eax
	neg	edi
	mov	eax, DWORD PTR _Htable$[esp+44]
	mov	ebp, edx
	shrd	ecx, esi, 1
	xor	ebx, ebx
	shl	ebp, 31					; 0000001fH
	and	edi, -520093696				; e1000000H
	shr	esi, 1
	movups	XMMWORD PTR [eax+32], xmm0
	or	ebx, ecx
	mov	ecx, DWORD PTR _V$15$[esp+44]
	xor	eax, eax
	shrd	edx, ecx, 1
	or	ebp, esi
	mov	DWORD PTR _V$[esp+56], ebx
	xor	eax, edx
	shr	ecx, 1
; Line 300
	mov	edx, DWORD PTR _Htable$[esp+44]
	xor	edi, ecx
	mov	DWORD PTR _V$[esp+48], eax
	mov	DWORD PTR _V$[esp+60], ebp
	mov	DWORD PTR _V$[esp+52], edi
; Line 301
	mov	ecx, DWORD PTR [edx+32]
	movups	xmm0, XMMWORD PTR _V$[esp+48]
	mov	DWORD PTR tv161[esp+44], ecx
	xor	ecx, eax
	mov	eax, DWORD PTR [edx+36]
	xor	eax, edi
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, eax
	mov	DWORD PTR tv159[esp+48], eax
	xor	ecx, ebx
	mov	eax, DWORD PTR [edx+44]
	xor	eax, ebp
	mov	ebp, edx
	movups	XMMWORD PTR [edx+16], xmm0
; Line 302
	movups	xmm1, XMMWORD PTR [ebp+64]
	mov	DWORD PTR [ebp+60], eax
; Line 303
	mov	eax, DWORD PTR [ebp+20]
	mov	DWORD PTR [ebp+56], ecx
	movaps	xmm0, xmm1
	mov	ecx, DWORD PTR [ebp+16]
	psrldq	xmm0, 4
	movd	edi, xmm0
	movaps	xmm0, xmm1
	movd	ebx, xmm1
	psrldq	xmm1, 12				; 0000000cH
	xor	eax, edi
	movd	edx, xmm1
	mov	DWORD PTR [ebp+84], eax
	xor	ecx, ebx
	mov	eax, DWORD PTR [ebp+28]
	xor	eax, edx
	mov	DWORD PTR [ebp+80], ecx
	mov	ecx, DWORD PTR [ebp+24]
	mov	DWORD PTR [ebp+92], eax
; Line 304
	mov	eax, DWORD PTR [ebp+36]
	xor	eax, edi
	psrldq	xmm0, 8
	movd	esi, xmm0
	mov	DWORD PTR [ebp+100], eax
	mov	eax, DWORD PTR [ebp+44]
	xor	ecx, esi
	xor	eax, edx
	mov	DWORD PTR [ebp+88], ecx
	mov	ecx, DWORD PTR tv161[esp+44]
	xor	ecx, ebx
	mov	DWORD PTR [ebp+108], eax
; Line 305
	mov	eax, DWORD PTR _Htable$[esp+44]
	mov	DWORD PTR [ebp+96], ecx
	mov	ecx, DWORD PTR tv159[esp+48]
	xor	ecx, esi
	mov	DWORD PTR [ebp+104], ecx
	mov	ecx, DWORD PTR [eax+48]
	mov	ebp, DWORD PTR [ebp+52]
	xor	ecx, ebx
	mov	eax, ebp
	mov	DWORD PTR tv156[esp+48], ebp
	xor	eax, edi
	mov	edi, DWORD PTR _Htable$[esp+44]
	mov	ebx, DWORD PTR [edi+56]
	mov	DWORD PTR [edi+112], ecx
	mov	ecx, ebx
	mov	DWORD PTR [edi+116], eax
	xor	ecx, esi
	mov	edi, DWORD PTR [edi+60]
	mov	eax, edi
	mov	esi, DWORD PTR _Htable$[esp+44]
	xor	eax, edx
; Line 306
	movups	xmm1, XMMWORD PTR [esi+128]
	mov	DWORD PTR [esi+124], eax
	mov	DWORD PTR [esi+120], ecx
; Line 307
	mov	ecx, DWORD PTR [esi+16]
	movaps	xmm0, xmm1
	movd	eax, xmm1
	psrldq	xmm0, 4
	movd	edx, xmm0
	movaps	xmm0, xmm1
	xor	ecx, eax
	mov	DWORD PTR _V$12$[esp+48], eax
	mov	eax, DWORD PTR [esi+20]
	xor	eax, edx
	mov	DWORD PTR [esi+144], ecx
	mov	DWORD PTR [esi+148], eax
	mov	eax, DWORD PTR _Htable$[esp+44]
	mov	ebp, eax
	psrldq	xmm0, 8
	movd	esi, xmm0
	mov	DWORD PTR _V$18$[esp+48], edx
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ebp+28]
	xor	ecx, esi
	mov	DWORD PTR [ebp+152], ecx
; Line 309
	xor	ebx, esi
	xor	DWORD PTR tv159[esp+48], esi
	mov	ecx, ebp
	psrldq	xmm1, 12				; 0000000cH
	movd	edx, xmm1
	xor	eax, edx
	xor	edi, edx
	mov	DWORD PTR [ecx+156], eax
	mov	eax, DWORD PTR tv161[esp+44]
	xor	eax, DWORD PTR _V$12$[esp+48]
	mov	DWORD PTR tv161[esp+44], eax
	mov	ecx, eax
	mov	eax, DWORD PTR [ebp+36]
	xor	eax, DWORD PTR _V$18$[esp+48]
	mov	DWORD PTR [ebp+160], ecx
	mov	ecx, ebp
	mov	DWORD PTR [ecx+164], eax
	mov	eax, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR tv159[esp+48]
	xor	eax, edx
	mov	DWORD PTR [ebp+168], ecx
	mov	ecx, ebp
	mov	ebp, DWORD PTR tv156[esp+48]
	xor	ebp, DWORD PTR _V$18$[esp+48]
	mov	DWORD PTR [ecx+172], eax
	mov	eax, DWORD PTR [ecx+48]
	xor	eax, DWORD PTR _V$12$[esp+48]
	mov	DWORD PTR [ecx+176], eax
	mov	DWORD PTR [ecx+188], edi
; Line 310
	mov	edi, DWORD PTR _Htable$[esp+44]
	mov	DWORD PTR [ecx+180], ebp
	mov	ebp, DWORD PTR _V$12$[esp+48]
	mov	DWORD PTR [ecx+184], ebx
	mov	ecx, ebp
	xor	ecx, DWORD PTR [edi+64]
	mov	ebx, DWORD PTR _V$18$[esp+48]
	mov	eax, ebx
	xor	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [edi+192], ecx
	mov	ecx, DWORD PTR [edi+72]
	mov	DWORD PTR [edi+196], eax
	xor	ecx, esi
	mov	eax, DWORD PTR [edi+76]
	xor	eax, edx
	mov	DWORD PTR [edi+200], ecx
; Line 311
	mov	ecx, DWORD PTR [edi+80]
	mov	DWORD PTR [edi+204], eax
	xor	ecx, ebp
	mov	eax, DWORD PTR [edi+84]
	xor	eax, ebx
	mov	DWORD PTR [edi+208], ecx
	mov	DWORD PTR [edi+212], eax
	mov	ecx, esi
	xor	ecx, DWORD PTR [edi+88]
	mov	eax, edx
	xor	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [edi+216], ecx
; Line 312
	mov	ecx, DWORD PTR [edi+96]
	mov	DWORD PTR [edi+220], eax
	xor	ecx, ebp
	mov	eax, DWORD PTR [edi+100]
; Line 313
	xor	ebp, DWORD PTR [edi+112]
	xor	eax, ebx
	xor	ebx, DWORD PTR [edi+116]
	mov	DWORD PTR [edi+224], ecx
	mov	ecx, esi
	xor	esi, DWORD PTR [edi+120]
	xor	ecx, DWORD PTR [edi+104]
	mov	DWORD PTR [edi+228], eax
	mov	eax, edx
	xor	eax, DWORD PTR [edi+108]
	xor	edx, DWORD PTR [edi+124]
	mov	DWORD PTR [edi+240], ebp
	mov	DWORD PTR [edi+244], ebx
	mov	DWORD PTR [edi+248], esi
	mov	DWORD PTR [edi+232], ecx
	mov	DWORD PTR [edi+236], eax
	mov	DWORD PTR [edi+252], edx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 341
	add	esp, 32					; 00000020H
	ret	0
_gcm_init_4bit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_release
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_CRYPTO_gcm128_release PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1730
	push	esi
; Line 1731
	mov	esi, DWORD PTR _ctx$[esp]
	test	esi, esi
	je	SHORT $LN2@CRYPTO_gcm
; Line 1732
	push	376					; 00000178H
	push	esi
	call	_OPENSSL_cleanse
; Line 1733
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN2@CRYPTO_gcm:
	pop	esi
; Line 1735
	ret	0
_CRYPTO_gcm128_release ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_tag
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_tag$ = 12						; size = 4
_len$ = 16						; size = 4
_CRYPTO_gcm128_tag PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1713
	push	esi
; Line 1714
	mov	esi, DWORD PTR _ctx$[esp]
	push	0
	push	0
	push	esi
	call	_CRYPTO_gcm128_finish
; Line 1715
	mov	ecx, 16					; 00000010H
	lea	eax, DWORD PTR [esi+64]
	cmp	DWORD PTR _len$[esp+12], ecx
	cmovbe	ecx, DWORD PTR _len$[esp+12]
	push	ecx
	push	eax
	push	DWORD PTR _tag$[esp+20]
	call	_memcpy
	add	esp, 24					; 00000018H
	pop	esi
; Line 1717
	ret	0
_CRYPTO_gcm128_tag ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_finish
_TEXT	SEGMENT
_gcm_gmult_p$1$ = -4					; size = 4
_clen$4$ = 8						; size = 4
_ctx$ = 8						; size = 4
_tag$ = 12						; size = 4
_len$ = 16						; size = 4
_CRYPTO_gcm128_finish PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1668
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 1675
	mov	esi, DWORD PTR _ctx$[esp+12]
	push	edi
	mov	edi, DWORD PTR [esi+48]
	mov	ebp, DWORD PTR [esi+52]
; Line 1676
	mov	ebx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [esi+60]
; Line 1678
	mov	ecx, DWORD PTR [esi+352]
	shld	eax, ebx, 3
	shld	ebp, edi, 3
	shl	ebx, 3
	shl	edi, 3
; Line 1681
	cmp	DWORD PTR [esi+360], 0
	mov	DWORD PTR _clen$4$[esp+16], eax
	mov	DWORD PTR _gcm_gmult_p$1$[esp+20], ecx
	jne	SHORT $LN3@CRYPTO_gcm
	cmp	DWORD PTR [esi+364], 0
	je	SHORT $LN15@CRYPTO_gcm
$LN3@CRYPTO_gcm:
; Line 1682
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	ecx
	mov	eax, DWORD PTR _clen$4$[esp+24]
	add	esp, 8
	mov	ecx, DWORD PTR _gcm_gmult_p$1$[esp+20]
$LN15@CRYPTO_gcm:
; Line 1687
	bswap	eax
; Line 1700
	xor	DWORD PTR [esi+72], eax
; Line 1701
	lea	eax, DWORD PTR [esi+96]
	bswap	ebp
	xor	DWORD PTR [esi+64], ebp
	lea	ebp, DWORD PTR [esi+64]
	push	eax
	bswap	edi
	xor	DWORD PTR [ebp+4], edi
	bswap	ebx
	xor	DWORD PTR [esi+76], ebx
	push	ebp
	call	ecx
; Line 1703
	mov	eax, DWORD PTR [esi+32]
	add	esp, 8
	xor	DWORD PTR [ebp], eax
	mov	eax, DWORD PTR [esi+36]
	xor	DWORD PTR [ebp+4], eax
	mov	eax, DWORD PTR [esi+40]
	xor	DWORD PTR [esi+72], eax
	mov	eax, DWORD PTR [esi+44]
	xor	DWORD PTR [esi+76], eax
; Line 1706
	mov	ecx, DWORD PTR _tag$[esp+16]
	test	ecx, ecx
	je	SHORT $LN5@CRYPTO_gcm
	mov	eax, DWORD PTR _len$[esp+16]
	cmp	eax, 16					; 00000010H
	ja	SHORT $LN5@CRYPTO_gcm
; Line 1707
	push	eax
	push	ecx
	push	ebp
	call	_CRYPTO_memcmp
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1710
	pop	ecx
	ret	0
$LN5@CRYPTO_gcm:
	pop	edi
	pop	esi
	pop	ebp
; Line 1709
	or	eax, -1
	pop	ebx
; Line 1710
	pop	ecx
	ret	0
_CRYPTO_gcm128_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_decrypt_ctr32
_TEXT	SEGMENT
_ctr$1$ = -20						; size = 4
_key$1$ = -16						; size = 4
_n$1$ = -12						; size = 4
_gcm_ghash_p$1$ = -8					; size = 4
_i$1$ = -4						; size = 4
_gcm_gmult_p$1$ = -4					; size = 4
_out$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
tv527 = 20						; size = 4
_in$1$ = 20						; size = 4
_len$ = 20						; size = 4
_stream$ = 24						; size = 4
_CRYPTO_gcm128_decrypt_ctr32 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1540
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
; Line 1550
	mov	ebx, DWORD PTR _ctx$[esp+20]
; Line 1559
	xor	ecx, ecx
	push	ebp
	mov	ebp, DWORD PTR _len$[esp+24]
	mov	eax, DWORD PTR [ebx+372]
	mov	edx, DWORD PTR [ebx+352]
	mov	DWORD PTR _key$1$[esp+28], eax
	mov	eax, DWORD PTR [ebx+356]
	mov	DWORD PTR _gcm_ghash_p$1$[esp+28], eax
	mov	eax, ebp
	add	eax, DWORD PTR [ebx+56]
	mov	DWORD PTR _gcm_gmult_p$1$[esp+28], edx
	adc	ecx, DWORD PTR [ebx+60]
; Line 1560
	cmp	ecx, 15					; 0000000fH
	ja	$LN9@CRYPTO_gcm
	jb	SHORT $LN41@CRYPTO_gcm
	cmp	eax, -32				; ffffffe0H
	ja	$LN9@CRYPTO_gcm
$LN41@CRYPTO_gcm:
; Line 1564
	cmp	DWORD PTR [ebx+364], 0
	mov	DWORD PTR [ebx+56], eax
	mov	DWORD PTR [ebx+60], ecx
	je	SHORT $LN39@CRYPTO_gcm
; Line 1566
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	edx
	add	esp, 8
; Line 1567
	mov	DWORD PTR [ebx+364], 0
$LN39@CRYPTO_gcm:
; Line 1572
	mov	eax, DWORD PTR [ebx+12]
	push	esi
; Line 1580
	mov	esi, DWORD PTR _in$[esp+28]
	push	edi
	mov	edi, DWORD PTR [ebx+360]
	mov	DWORD PTR _n$1$[esp+36], edi
	mov	DWORD PTR _in$1$[esp+32], esi
	bswap	eax
	mov	DWORD PTR _ctr$1$[esp+36], eax
	test	edi, edi
	je	SHORT $LN42@CRYPTO_gcm
	mov	edx, DWORD PTR _out$[esp+32]
	mov	DWORD PTR _out$1$[esp+32], edx
	npad	1
$LL2@CRYPTO_gcm:
; Line 1581
	test	ebp, ebp
	je	SHORT $LN3@CRYPTO_gcm
; Line 1583
	mov	al, BYTE PTR [edi+ebx+16]
; Line 1585
	dec	ebp
	mov	cl, BYTE PTR [esi]
	inc	esi
	xor	al, cl
	mov	DWORD PTR _in$1$[esp+32], esi
	mov	BYTE PTR [edx], al
	lea	eax, DWORD PTR [edi+ebx]
	xor	BYTE PTR [eax+64], cl
	inc	edx
; Line 1586
	inc	edi
	mov	DWORD PTR _out$1$[esp+32], edx
	and	edi, 15					; 0000000fH
	mov	DWORD PTR _n$1$[esp+36], edi
	jne	SHORT $LL2@CRYPTO_gcm
; Line 1589
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_gmult_p$1$[esp+44]
	add	esp, 8
	jmp	SHORT $LN26@CRYPTO_gcm
$LN3@CRYPTO_gcm:
; Line 1588
	test	edi, edi
	jne	$LN30@CRYPTO_gcm
; Line 1589
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_gmult_p$1$[esp+44]
	add	esp, 8
	jmp	SHORT $LN26@CRYPTO_gcm
$LN42@CRYPTO_gcm:
; Line 1592
	mov	eax, DWORD PTR _out$[esp+32]
	mov	DWORD PTR _out$1$[esp+32], eax
$LN26@CRYPTO_gcm:
; Line 1596
	cmp	ebp, 3072				; 00000c00H
	jb	SHORT $LN5@CRYPTO_gcm
	mov	edi, DWORD PTR _out$1$[esp+32]
	lea	ecx, DWORD PTR [ebx+96]
	mov	eax, -1431655765			; aaaaaaabH
	mul	ebp
	shr	edx, 11					; 0000000bH
	mov	DWORD PTR tv527[esp+32], edx
$LL4@CRYPTO_gcm:
; Line 1597
	push	3072					; 00000c00H
	push	esi
	push	ecx
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+52]
; Line 1598
	push	ebx
	push	DWORD PTR _key$1$[esp+56]
	push	192					; 000000c0H
	push	edi
	push	esi
	call	DWORD PTR _stream$[esp+68]
; Line 1599
	mov	ecx, DWORD PTR _ctr$1$[esp+72]
	add	esp, 36					; 00000024H
	add	ecx, 192				; 000000c0H
; Line 1608
	add	edi, 3072				; 00000c00H
	mov	DWORD PTR _ctr$1$[esp+36], ecx
; Line 1609
	add	esi, 3072				; 00000c00H
	bswap	ecx
; Line 1610
	sub	ebp, 3072				; 00000c00H
	mov	DWORD PTR [ebx+12], ecx
	sub	DWORD PTR tv527[esp+32], 1
	lea	ecx, DWORD PTR [ebx+96]
	jne	SHORT $LL4@CRYPTO_gcm
	mov	DWORD PTR _out$1$[esp+32], edi
	mov	edi, DWORD PTR _n$1$[esp+36]
	mov	DWORD PTR _in$1$[esp+32], esi
$LN5@CRYPTO_gcm:
; Line 1613
	mov	eax, ebp
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _i$1$[esp+36], eax
	je	SHORT $LN18@CRYPTO_gcm
; Line 1617
	push	eax
	push	DWORD PTR _in$1$[esp+36]
	mov	esi, eax
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	shr	esi, 4
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+52]
; Line 1629
	push	ebx
	push	DWORD PTR _key$1$[esp+56]
	push	esi
	push	DWORD PTR _out$1$[esp+60]
	push	DWORD PTR _in$1$[esp+64]
	call	DWORD PTR _stream$[esp+68]
; Line 1630
	mov	eax, DWORD PTR _ctr$1$[esp+72]
	add	esp, 36					; 00000024H
	add	eax, esi
; Line 1640
	mov	esi, DWORD PTR _in$1$[esp+32]
	mov	DWORD PTR _ctr$1$[esp+36], eax
	bswap	eax
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _i$1$[esp+36]
	add	esi, eax
	add	DWORD PTR _out$1$[esp+32], eax
; Line 1641
	sub	ebp, eax
$LN18@CRYPTO_gcm:
; Line 1643
	test	ebp, ebp
	je	SHORT $LN30@CRYPTO_gcm
; Line 1644
	push	DWORD PTR _key$1$[esp+36]
	lea	eax, DWORD PTR [ebx+16]
	push	eax
	mov	eax, DWORD PTR [ebx+368]
	push	ebx
	call	eax
; Line 1645
	mov	eax, DWORD PTR _ctr$1$[esp+48]
	add	esp, 12					; 0000000cH
	inc	eax
; Line 1648
	bswap	eax
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _out$1$[esp+32]
; Line 1654
	sub	esi, eax
	lea	edx, DWORD PTR [edi+eax]
$LL6@CRYPTO_gcm:
; Line 1655
	mov	cl, BYTE PTR [esi+edx]
	lea	eax, DWORD PTR [ebx+edi]
; Line 1656
	xor	BYTE PTR [eax+64], cl
; Line 1658
	lea	edx, DWORD PTR [edx+1]
	mov	al, BYTE PTR [ebx+edi+16]
	inc	edi
	xor	al, cl
	mov	BYTE PTR [edx-1], al
	sub	ebp, 1
	jne	SHORT $LL6@CRYPTO_gcm
$LN30@CRYPTO_gcm:
; Line 1662
	mov	DWORD PTR [ebx+360], edi
; Line 1663
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1664
	add	esp, 20					; 00000014H
	ret	0
$LN9@CRYPTO_gcm:
	pop	ebp
; Line 1561
	or	eax, -1
	pop	ebx
; Line 1664
	add	esp, 20					; 00000014H
	ret	0
_CRYPTO_gcm128_decrypt_ctr32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_encrypt_ctr32
_TEXT	SEGMENT
_ctr$1$ = -20						; size = 4
_key$1$ = -16						; size = 4
_i$1$ = -12						; size = 4
_n$1$ = -12						; size = 4
_gcm_ghash_p$1$ = -8					; size = 4
_gcm_gmult_p$1$ = -4					; size = 4
_out$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
tv560 = 20						; size = 4
_in$1$ = 20						; size = 4
_len$ = 20						; size = 4
_stream$ = 24						; size = 4
_CRYPTO_gcm128_encrypt_ctr32 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1418
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
; Line 1428
	mov	ebx, DWORD PTR _ctx$[esp+20]
; Line 1437
	xor	ecx, ecx
	push	ebp
	mov	ebp, DWORD PTR _len$[esp+24]
	mov	eax, DWORD PTR [ebx+372]
	mov	edx, DWORD PTR [ebx+352]
	mov	DWORD PTR _key$1$[esp+28], eax
	mov	eax, DWORD PTR [ebx+356]
	mov	DWORD PTR _gcm_ghash_p$1$[esp+28], eax
	mov	eax, ebp
	add	eax, DWORD PTR [ebx+56]
	mov	DWORD PTR _gcm_gmult_p$1$[esp+28], edx
	adc	ecx, DWORD PTR [ebx+60]
; Line 1438
	cmp	ecx, 15					; 0000000fH
	ja	$LN9@CRYPTO_gcm
	jb	SHORT $LN41@CRYPTO_gcm
	cmp	eax, -32				; ffffffe0H
	ja	$LN9@CRYPTO_gcm
$LN41@CRYPTO_gcm:
; Line 1442
	cmp	DWORD PTR [ebx+364], 0
	mov	DWORD PTR [ebx+56], eax
	mov	DWORD PTR [ebx+60], ecx
	je	SHORT $LN39@CRYPTO_gcm
; Line 1444
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	edx
	add	esp, 8
; Line 1445
	mov	DWORD PTR [ebx+364], 0
$LN39@CRYPTO_gcm:
; Line 1450
	mov	eax, DWORD PTR [ebx+12]
	push	esi
; Line 1458
	mov	esi, DWORD PTR _in$[esp+28]
	push	edi
	mov	edi, DWORD PTR [ebx+360]
	mov	DWORD PTR _n$1$[esp+36], edi
	mov	DWORD PTR _in$1$[esp+32], esi
	bswap	eax
	mov	DWORD PTR _ctr$1$[esp+36], eax
	test	edi, edi
	je	SHORT $LN42@CRYPTO_gcm
	mov	edx, DWORD PTR _out$[esp+32]
	mov	DWORD PTR _out$1$[esp+32], edx
	npad	1
$LL2@CRYPTO_gcm:
; Line 1459
	test	ebp, ebp
	je	SHORT $LN3@CRYPTO_gcm
; Line 1460
	mov	cl, BYTE PTR [edi+ebx+16]
	lea	eax, DWORD PTR [edi+ebx]
	xor	cl, BYTE PTR [esi]
; Line 1462
	inc	edi
	mov	BYTE PTR [edx], cl
	inc	esi
	xor	BYTE PTR [eax+64], cl
	inc	edx
	dec	ebp
	mov	DWORD PTR _out$1$[esp+32], edx
	and	edi, 15					; 0000000fH
	mov	DWORD PTR _in$1$[esp+32], esi
	mov	DWORD PTR _n$1$[esp+36], edi
	jne	SHORT $LL2@CRYPTO_gcm
; Line 1465
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_gmult_p$1$[esp+44]
	add	esp, 8
	jmp	SHORT $LN26@CRYPTO_gcm
$LN3@CRYPTO_gcm:
; Line 1464
	test	edi, edi
	jne	$LN30@CRYPTO_gcm
; Line 1465
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_gmult_p$1$[esp+44]
	add	esp, 8
	jmp	SHORT $LN26@CRYPTO_gcm
$LN42@CRYPTO_gcm:
; Line 1468
	mov	eax, DWORD PTR _out$[esp+32]
	mov	DWORD PTR _out$1$[esp+32], eax
$LN26@CRYPTO_gcm:
; Line 1472
	mov	ecx, DWORD PTR _stream$[esp+32]
	cmp	ebp, 3072				; 00000c00H
	jb	SHORT $LN5@CRYPTO_gcm
	mov	edi, DWORD PTR _out$1$[esp+32]
	mov	eax, -1431655765			; aaaaaaabH
	mul	ebp
	shr	edx, 11					; 0000000bH
	mov	DWORD PTR tv560[esp+32], edx
	npad	9
$LL4@CRYPTO_gcm:
; Line 1473
	push	ebx
	push	DWORD PTR _key$1$[esp+40]
	push	192					; 000000c0H
	push	edi
	push	esi
	call	ecx
; Line 1474
	mov	eax, DWORD PTR _ctr$1$[esp+56]
	add	eax, 192				; 000000c0H
	mov	DWORD PTR _ctr$1$[esp+56], eax
; Line 1477
	bswap	eax
; Line 1483
	push	3072					; 00000c00H
	mov	DWORD PTR [ebx+12], eax
	lea	eax, DWORD PTR [ebx+96]
	push	edi
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+72]
	mov	ecx, DWORD PTR _stream$[esp+68]
	add	esp, 36					; 00000024H
; Line 1484
	add	edi, 3072				; 00000c00H
; Line 1485
	add	esi, 3072				; 00000c00H
; Line 1486
	sub	ebp, 3072				; 00000c00H
	sub	DWORD PTR tv560[esp+32], 1
	jne	SHORT $LL4@CRYPTO_gcm
	mov	DWORD PTR _out$1$[esp+32], edi
	mov	edi, DWORD PTR _n$1$[esp+36]
	mov	DWORD PTR _in$1$[esp+32], esi
$LN5@CRYPTO_gcm:
; Line 1489
	mov	eax, ebp
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _i$1$[esp+36], eax
	je	SHORT $LN18@CRYPTO_gcm
; Line 1492
	push	ebx
	push	DWORD PTR _key$1$[esp+40]
	mov	esi, eax
	shr	esi, 4
	push	esi
	push	DWORD PTR _out$1$[esp+44]
	push	DWORD PTR _in$1$[esp+48]
	call	ecx
; Line 1493
	mov	eax, DWORD PTR _ctr$1$[esp+56]
	add	eax, esi
; Line 1502
	mov	esi, DWORD PTR _in$1$[esp+52]
	mov	DWORD PTR _ctr$1$[esp+56], eax
	bswap	eax
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _i$1$[esp+56]
	add	esi, eax
; Line 1505
	push	eax
	push	DWORD PTR _out$1$[esp+56]
	sub	ebp, eax
	lea	eax, DWORD PTR [ebx+96]
	push	eax
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+72]
; Line 1506
	mov	eax, DWORD PTR _i$1$[esp+72]
	add	esp, 36					; 00000024H
	add	DWORD PTR _out$1$[esp+32], eax
$LN18@CRYPTO_gcm:
; Line 1516
	test	ebp, ebp
	je	SHORT $LN30@CRYPTO_gcm
; Line 1517
	push	DWORD PTR _key$1$[esp+36]
	lea	eax, DWORD PTR [ebx+16]
	push	eax
	mov	eax, DWORD PTR [ebx+368]
	push	ebx
	call	eax
; Line 1518
	mov	eax, DWORD PTR _ctr$1$[esp+48]
	add	esp, 12					; 0000000cH
	inc	eax
; Line 1521
	bswap	eax
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _out$1$[esp+32]
; Line 1527
	sub	esi, eax
	lea	edx, DWORD PTR [edi+eax]
$LL6@CRYPTO_gcm:
; Line 1528
	movzx	eax, BYTE PTR [esi+edx]
; Line 1529
	lea	edx, DWORD PTR [edx+1]
	movzx	ecx, BYTE PTR [ebx+edi+16]
	xor	ecx, eax
	lea	eax, DWORD PTR [ebx+edi]
	mov	BYTE PTR [edx-1], cl
	inc	edi
	xor	BYTE PTR [eax+64], cl
	sub	ebp, 1
	jne	SHORT $LL6@CRYPTO_gcm
$LN30@CRYPTO_gcm:
; Line 1533
	mov	DWORD PTR [ebx+360], edi
; Line 1534
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1535
	add	esp, 20					; 00000014H
	ret	0
$LN9@CRYPTO_gcm:
	pop	ebp
; Line 1439
	or	eax, -1
	pop	ebx
; Line 1535
	add	esp, 20					; 00000014H
	ret	0
_CRYPTO_gcm128_encrypt_ctr32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_decrypt
_TEXT	SEGMENT
_ctr$1$ = -28						; size = 4
_n$1$ = -24						; size = 4
_key$1$ = -20						; size = 4
_block$1$ = -16						; size = 4
tv1481 = -12						; size = 4
tv1463 = -8						; size = 4
_gcm_gmult_p$1$ = -8					; size = 4
_gcm_ghash_p$1$ = -4					; size = 4
tv1461 = -4						; size = 4
_ctx$ = 8						; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
tv1462 = 20						; size = 4
_len$ = 20						; size = 4
_CRYPTO_gcm128_decrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1226
	mov	eax, 28					; 0000001cH
	call	__chkstk
; Line 1246
	mov	edx, DWORD PTR _len$[esp+24]
	xor	ecx, ecx
	push	ebx
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+32]
	mov	eax, DWORD PTR [esi+368]
	mov	ebx, DWORD PTR [esi+352]
	mov	DWORD PTR _block$1$[esp+36], eax
	mov	eax, DWORD PTR [esi+372]
	mov	DWORD PTR _key$1$[esp+36], eax
	mov	eax, DWORD PTR [esi+356]
	mov	DWORD PTR _gcm_ghash_p$1$[esp+36], eax
	mov	eax, edx
	add	eax, DWORD PTR [esi+56]
	mov	DWORD PTR _gcm_gmult_p$1$[esp+36], ebx
	adc	ecx, DWORD PTR [esi+60]
; Line 1247
	cmp	ecx, 15					; 0000000fH
	ja	$LN25@CRYPTO_gcm
	jb	SHORT $LN86@CRYPTO_gcm
	cmp	eax, -32				; ffffffe0H
	ja	$LN25@CRYPTO_gcm
$LN86@CRYPTO_gcm:
; Line 1251
	cmp	DWORD PTR [esi+364], 0
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+60], ecx
	je	SHORT $LN84@CRYPTO_gcm
; Line 1253
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	ebx
	mov	edx, DWORD PTR _len$[esp+40]
	add	esp, 8
; Line 1254
	mov	DWORD PTR [esi+364], 0
$LN84@CRYPTO_gcm:
; Line 1259
	mov	eax, DWORD PTR [esi+12]
; Line 1270
	mov	ebx, DWORD PTR _out$[esp+32]
	push	ebp
	mov	ebp, DWORD PTR [esi+360]
	mov	DWORD PTR _n$1$[esp+40], ebp
	bswap	eax
	mov	DWORD PTR _ctr$1$[esp+40], eax
	push	edi
	mov	edi, DWORD PTR _in$[esp+40]
	test	ebp, ebp
	je	SHORT $LN47@CRYPTO_gcm
$LL5@CRYPTO_gcm:
; Line 1271
	test	edx, edx
	je	SHORT $LN6@CRYPTO_gcm
; Line 1272
	mov	cl, BYTE PTR [edi]
; Line 1275
	dec	edx
	mov	al, BYTE PTR [esi+ebp+16]
	inc	edi
	xor	al, cl
	mov	DWORD PTR _len$[esp+40], edx
	mov	BYTE PTR [ebx], al
	inc	ebx
	xor	BYTE PTR [esi+ebp+64], cl
; Line 1276
	inc	ebp
	and	ebp, 15					; 0000000fH
	mov	DWORD PTR _n$1$[esp+44], ebp
	jne	SHORT $LL5@CRYPTO_gcm
; Line 1278
	jmp	SHORT $LN83@CRYPTO_gcm
$LN6@CRYPTO_gcm:
	test	ebp, ebp
	jne	$LN59@CRYPTO_gcm
$LN83@CRYPTO_gcm:
; Line 1279
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR _gcm_gmult_p$1$[esp+52]
	add	esp, 8
$LN47@CRYPTO_gcm:
; Line 1290
	mov	eax, DWORD PTR _len$[esp+40]
	cmp	eax, 3072				; 00000c00H
	jb	$LN8@CRYPTO_gcm
	mov	eax, -1431655765			; aaaaaaabH
	lea	ecx, DWORD PTR [esi+96]
	mul	DWORD PTR _len$[esp+40]
	shr	edx, 11					; 0000000bH
	mov	DWORD PTR tv1463[esp+44], edx
$LL7@CRYPTO_gcm:
; Line 1293
	push	3072					; 00000c00H
	push	edi
	push	ecx
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+60]
	mov	ebp, DWORD PTR _ctr$1$[esp+60]
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1481[esp+44], 192		; 000000c0H
$LL9@CRYPTO_gcm:
; Line 1298
	push	DWORD PTR _key$1$[esp+44]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+56]
; Line 1299
	inc	ebp
	add	esp, 12					; 0000000cH
; Line 1302
	mov	eax, ebp
	bswap	eax
	mov	DWORD PTR [esi+12], eax
; Line 1309
	mov	eax, DWORD PTR [esi+16]
	xor	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi+4]
	xor	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR [edi+8]
	xor	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR [edi+12]
; Line 1311
	add	edi, 16					; 00000010H
	xor	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [ebx+12], eax
	add	ebx, 16					; 00000010H
	sub	DWORD PTR tv1481[esp+44], 1
	jne	SHORT $LL9@CRYPTO_gcm
; Line 1314
	sub	DWORD PTR _len$[esp+40], 3072		; 00000c00H
	lea	ecx, DWORD PTR [esi+96]
	sub	DWORD PTR tv1463[esp+44], 1
	mov	DWORD PTR _ctr$1$[esp+44], ebp
	jne	SHORT $LL7@CRYPTO_gcm
	mov	ebp, DWORD PTR _n$1$[esp+44]
	mov	eax, DWORD PTR _len$[esp+40]
$LN8@CRYPTO_gcm:
; Line 1316
	mov	ecx, eax
	and	ecx, -16				; fffffff0H
	je	$LN15@CRYPTO_gcm
; Line 1317
	push	ecx
	push	edi
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+60]
; Line 1318
	mov	eax, DWORD PTR _len$[esp+56]
	add	esp, 16					; 00000010H
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN15@CRYPTO_gcm
; Line 1317
	mov	ebp, eax
	lea	ecx, DWORD PTR [esi+16]
	shr	eax, 4
	mov	DWORD PTR tv1462[esp+40], eax
$LL14@CRYPTO_gcm:
; Line 1322
	push	DWORD PTR _key$1$[esp+44]
	push	ecx
	push	esi
	call	DWORD PTR _block$1$[esp+56]
; Line 1323
	mov	eax, DWORD PTR _ctr$1$[esp+56]
; Line 1333
	lea	ecx, DWORD PTR [esi+16]
	inc	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ctr$1$[esp+44], eax
; Line 1336
	sub	ebp, 16					; 00000010H
	bswap	eax
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR [ecx]
	xor	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi+4]
	xor	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR [edi+8]
	xor	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR [edi+12]
	add	edi, 16					; 00000010H
	xor	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [ebx+12], eax
	add	ebx, 16					; 00000010H
	sub	DWORD PTR tv1462[esp+40], 1
	jne	SHORT $LL14@CRYPTO_gcm
	mov	DWORD PTR _len$[esp+40], ebp
	mov	ebp, DWORD PTR _n$1$[esp+44]
	mov	eax, DWORD PTR _len$[esp+40]
$LN15@CRYPTO_gcm:
; Line 1365
	test	eax, eax
	je	SHORT $LN59@CRYPTO_gcm
; Line 1366
	push	DWORD PTR _key$1$[esp+44]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+56]
; Line 1367
	mov	eax, DWORD PTR _ctr$1$[esp+56]
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _len$[esp+40]
	inc	eax
; Line 1370
	bswap	eax
	mov	DWORD PTR [esi+12], eax
; Line 1376
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+ebp]
	lea	ebx, DWORD PTR [esi+64]
	mov	DWORD PTR tv1461[esp+44], eax
	mov	esi, eax
$LL19@CRYPTO_gcm:
; Line 1377
	mov	cl, BYTE PTR [edi+esi]
	lea	eax, DWORD PTR [ebx+ebp]
; Line 1378
	xor	BYTE PTR [eax], cl
; Line 1380
	lea	esi, DWORD PTR [esi+1]
	mov	al, BYTE PTR [ebx+ebp-48]
	inc	ebp
	xor	al, cl
	mov	BYTE PTR [esi-1], al
	sub	edx, 1
	jne	SHORT $LL19@CRYPTO_gcm
	mov	esi, DWORD PTR _ctx$[esp+40]
$LN59@CRYPTO_gcm:
	pop	edi
; Line 1384
	mov	DWORD PTR [esi+360], ebp
; Line 1385
	xor	eax, eax
	pop	ebp
	pop	esi
	pop	ebx
; Line 1413
	add	esp, 28					; 0000001cH
	ret	0
$LN25@CRYPTO_gcm:
	pop	esi
; Line 1248
	or	eax, -1
	pop	ebx
; Line 1413
	add	esp, 28					; 0000001cH
	ret	0
_CRYPTO_gcm128_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_encrypt
_TEXT	SEGMENT
_n$1$ = -24						; size = 4
_key$1$ = -20						; size = 4
_block$1$ = -16						; size = 4
tv1512 = -12						; size = 4
tv1511 = -12						; size = 4
_gcm_gmult_p$1$ = -12					; size = 4
_gcm_ghash_p$1$ = -8					; size = 4
_i$1$ = -4						; size = 4
tv1531 = 8						; size = 4
tv1510 = 8						; size = 4
_ctr$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
_len$ = 20						; size = 4
_CRYPTO_gcm128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1039
	mov	eax, 24					; 00000018H
	call	__chkstk
; Line 1062
	mov	ecx, DWORD PTR _len$[esp+20]
	xor	edx, edx
	push	ebx
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+28]
	mov	eax, DWORD PTR [esi+368]
	mov	ebx, DWORD PTR [esi+352]
	mov	DWORD PTR _block$1$[esp+32], eax
	mov	eax, DWORD PTR [esi+372]
	mov	DWORD PTR _key$1$[esp+32], eax
	mov	eax, DWORD PTR [esi+356]
	mov	DWORD PTR _gcm_ghash_p$1$[esp+32], eax
	mov	eax, ecx
	add	eax, DWORD PTR [esi+56]
	mov	DWORD PTR _gcm_gmult_p$1$[esp+32], ebx
	adc	edx, DWORD PTR [esi+60]
; Line 1063
	cmp	edx, 15					; 0000000fH
	ja	$LN25@CRYPTO_gcm
	jb	SHORT $LN86@CRYPTO_gcm
	cmp	eax, -32				; ffffffe0H
	ja	$LN25@CRYPTO_gcm
$LN86@CRYPTO_gcm:
; Line 1067
	cmp	DWORD PTR [esi+364], 0
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+60], edx
	je	SHORT $LN84@CRYPTO_gcm
; Line 1069
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	ebx
	mov	ecx, DWORD PTR _len$[esp+36]
	add	esp, 8
; Line 1070
	mov	DWORD PTR [esi+364], 0
$LN84@CRYPTO_gcm:
; Line 1075
	mov	eax, DWORD PTR [esi+12]
; Line 1086
	mov	ebx, DWORD PTR _out$[esp+28]
	push	ebp
	mov	ebp, DWORD PTR [esi+360]
	mov	DWORD PTR _n$1$[esp+36], ebp
	bswap	eax
	mov	DWORD PTR _ctr$1$[esp+32], eax
	push	edi
	mov	edi, DWORD PTR _in$[esp+36]
	test	ebp, ebp
	je	SHORT $LN47@CRYPTO_gcm
$LL5@CRYPTO_gcm:
; Line 1087
	test	ecx, ecx
	je	SHORT $LN6@CRYPTO_gcm
; Line 1088
	mov	al, BYTE PTR [esi+ebp+16]
; Line 1089
	dec	ecx
	xor	al, BYTE PTR [edi]
	inc	edi
	mov	BYTE PTR [ebx], al
	inc	ebx
	xor	BYTE PTR [esi+ebp+64], al
; Line 1090
	inc	ebp
	and	ebp, 15					; 0000000fH
	mov	DWORD PTR _len$[esp+36], ecx
	mov	DWORD PTR _n$1$[esp+40], ebp
	jne	SHORT $LL5@CRYPTO_gcm
; Line 1092
	jmp	SHORT $LN83@CRYPTO_gcm
$LN6@CRYPTO_gcm:
	test	ebp, ebp
	jne	$LN59@CRYPTO_gcm
$LN83@CRYPTO_gcm:
; Line 1093
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR _gcm_gmult_p$1$[esp+48]
	add	esp, 8
$LN47@CRYPTO_gcm:
; Line 1104
	mov	ecx, DWORD PTR _len$[esp+36]
	cmp	ecx, 3072				; 00000c00H
	jb	$LN8@CRYPTO_gcm
	mov	ebp, DWORD PTR _ctr$1$[esp+36]
	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	shr	edx, 11					; 0000000bH
	mov	DWORD PTR tv1512[esp+40], edx
$LL7@CRYPTO_gcm:
; Line 1107
	mov	DWORD PTR tv1531[esp+36], 192		; 000000c0H
	npad	7
$LL9@CRYPTO_gcm:
; Line 1111
	push	DWORD PTR _key$1$[esp+40]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+52]
; Line 1112
	inc	ebp
	add	esp, 12					; 0000000cH
; Line 1115
	mov	eax, ebp
	bswap	eax
	mov	DWORD PTR [esi+12], eax
; Line 1122
	mov	eax, DWORD PTR [esi+16]
	xor	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi+4]
	xor	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR [edi+8]
	xor	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR [edi+12]
; Line 1124
	add	edi, 16					; 00000010H
	xor	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [ebx+12], eax
	add	ebx, 16					; 00000010H
	sub	DWORD PTR tv1531[esp+36], 1
	jne	SHORT $LL9@CRYPTO_gcm
; Line 1127
	push	3072					; 00000c00H
	lea	eax, DWORD PTR [ebx-3072]
	mov	DWORD PTR _ctr$1$[esp+40], ebp
	push	eax
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+56]
; Line 1128
	mov	ecx, DWORD PTR _len$[esp+52]
	add	esp, 16					; 00000010H
	sub	ecx, 3072				; 00000c00H
	sub	DWORD PTR tv1512[esp+40], 1
	mov	DWORD PTR _len$[esp+36], ecx
	jne	$LL7@CRYPTO_gcm
	mov	ebp, DWORD PTR _n$1$[esp+40]
$LN8@CRYPTO_gcm:
; Line 1130
	mov	edx, ecx
	and	edx, -16				; fffffff0H
	mov	DWORD PTR _i$1$[esp+40], edx
	je	$LN35@CRYPTO_gcm
; Line 1133
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN15@CRYPTO_gcm
; Line 1131
	mov	ebp, DWORD PTR _len$[esp+36]
	lea	eax, DWORD PTR [esi+16]
	shr	ecx, 4
	mov	DWORD PTR tv1511[esp+40], ecx
$LL14@CRYPTO_gcm:
; Line 1137
	push	DWORD PTR _key$1$[esp+40]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+52]
; Line 1138
	mov	eax, DWORD PTR _ctr$1$[esp+48]
	add	esp, 12					; 0000000cH
	inc	eax
; Line 1151
	sub	ebp, 16					; 00000010H
	mov	DWORD PTR _ctr$1$[esp+36], eax
	bswap	eax
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR [esi+16]
	xor	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi+4]
	xor	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR [edi+8]
	xor	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR [edi+12]
	add	edi, 16					; 00000010H
	xor	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [ebx+12], eax
	add	ebx, 16					; 00000010H
	sub	DWORD PTR tv1511[esp+40], 1
	lea	eax, DWORD PTR [esi+16]
	jne	SHORT $LL14@CRYPTO_gcm
	mov	edx, DWORD PTR _i$1$[esp+40]
	mov	DWORD PTR _len$[esp+36], ebp
	mov	ebp, DWORD PTR _n$1$[esp+40]
$LN15@CRYPTO_gcm:
; Line 1153
	push	edx
	mov	eax, ebx
	sub	eax, edx
	push	eax
	lea	eax, DWORD PTR [esi+96]
	push	eax
	lea	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+56]
	mov	ecx, DWORD PTR _len$[esp+52]
	add	esp, 16					; 00000010H
$LN35@CRYPTO_gcm:
; Line 1178
	test	ecx, ecx
	je	SHORT $LN59@CRYPTO_gcm
; Line 1179
	push	DWORD PTR _key$1$[esp+40]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+52]
; Line 1180
	mov	eax, DWORD PTR _ctr$1$[esp+48]
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _len$[esp+36]
	inc	eax
; Line 1183
	bswap	eax
	mov	DWORD PTR [esi+12], eax
; Line 1189
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+ebp]
	mov	DWORD PTR tv1510[esp+36], eax
	mov	ebx, eax
	npad	9
$LL19@CRYPTO_gcm:
; Line 1190
	movzx	eax, BYTE PTR [edi+ebx]
; Line 1191
	lea	ebx, DWORD PTR [ebx+1]
	movzx	ecx, BYTE PTR [esi+ebp+16]
	xor	ecx, eax
	lea	eax, DWORD PTR [esi+ebp]
	mov	BYTE PTR [ebx-1], cl
	inc	ebp
	xor	BYTE PTR [eax+64], cl
	sub	edx, 1
	jne	SHORT $LL19@CRYPTO_gcm
$LN59@CRYPTO_gcm:
	pop	edi
; Line 1195
	mov	DWORD PTR [esi+360], ebp
; Line 1196
	xor	eax, eax
	pop	ebp
	pop	esi
	pop	ebx
; Line 1221
	add	esp, 24					; 00000018H
	ret	0
$LN25@CRYPTO_gcm:
	pop	esi
; Line 1064
	or	eax, -1
	pop	ebx
; Line 1221
	add	esp, 24					; 00000018H
	ret	0
_CRYPTO_gcm128_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_aad
_TEXT	SEGMENT
_i$1$ = -4						; size = 4
_gcm_ghash_p$1$ = 8					; size = 4
_ctx$ = 8						; size = 4
_aad$ = 12						; size = 4
_len$ = 16						; size = 4
_CRYPTO_gcm128_aad PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 977
	mov	eax, 4
	call	__chkstk
	push	edi
; Line 982
	mov	edi, DWORD PTR _ctx$[esp+4]
; Line 984
	mov	eax, DWORD PTR [edi+356]
	mov	edx, DWORD PTR [edi+352]
	mov	DWORD PTR _gcm_ghash_p$1$[esp+4], eax
; Line 989
	mov	eax, DWORD PTR [edi+56]
	or	eax, DWORD PTR [edi+60]
	je	SHORT $LN7@CRYPTO_gcm
; Line 990
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 1034
	pop	ecx
	ret	0
$LN7@CRYPTO_gcm:
	push	esi
; Line 992
	mov	esi, DWORD PTR _len$[esp+8]
	xor	ecx, ecx
	mov	eax, esi
	add	eax, DWORD PTR [edi+48]
	adc	ecx, DWORD PTR [edi+52]
; Line 993
	cmp	ecx, 536870912				; 20000000H
	ja	$LN9@CRYPTO_gcm
	jb	SHORT $LN25@CRYPTO_gcm
	test	eax, eax
	jne	$LN9@CRYPTO_gcm
$LN25@CRYPTO_gcm:
	push	ebx
; Line 997
	mov	ebx, DWORD PTR [edi+364]
	mov	DWORD PTR [edi+48], eax
	mov	DWORD PTR [edi+52], ecx
	push	ebp
; Line 998
	mov	ebp, DWORD PTR _aad$[esp+16]
	test	ebx, ebx
	je	SHORT $LN12@CRYPTO_gcm
	npad	6
$LL2@CRYPTO_gcm:
; Line 999
	test	esi, esi
	je	SHORT $LN3@CRYPTO_gcm
; Line 1000
	mov	al, BYTE PTR [ebp]
; Line 1001
	dec	esi
	xor	BYTE PTR [ebx+edi+64], al
	inc	ebp
; Line 1002
	inc	ebx
	and	ebx, 15					; 0000000fH
	jne	SHORT $LL2@CRYPTO_gcm
; Line 1004
	jmp	SHORT $LN24@CRYPTO_gcm
$LN3@CRYPTO_gcm:
	test	ebx, ebx
	jne	SHORT $LN5@CRYPTO_gcm
$LN24@CRYPTO_gcm:
; Line 1005
	lea	eax, DWORD PTR [edi+96]
	push	eax
	lea	eax, DWORD PTR [edi+64]
	push	eax
	call	edx
	add	esp, 8
$LN12@CRYPTO_gcm:
; Line 1012
	mov	eax, esi
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _i$1$[esp+20], eax
	je	SHORT $LN13@CRYPTO_gcm
; Line 1013
	push	eax
	push	ebp
	lea	eax, DWORD PTR [edi+96]
	push	eax
	lea	eax, DWORD PTR [edi+64]
	push	eax
	call	DWORD PTR _gcm_ghash_p$1$[esp+32]
; Line 1014
	add	ebp, DWORD PTR _i$1$[esp+36]
	add	esp, 16					; 00000010H
; Line 1015
	sub	esi, DWORD PTR _i$1$[esp+20]
$LN13@CRYPTO_gcm:
; Line 1026
	test	esi, esi
	je	SHORT $LN5@CRYPTO_gcm
; Line 1028
	xor	ecx, ecx
	mov	ebx, esi
	test	esi, esi
	je	SHORT $LN5@CRYPTO_gcm
$LL6@CRYPTO_gcm:
; Line 1029
	mov	al, BYTE PTR [ecx+ebp]
	xor	BYTE PTR [edi+ecx+64], al
	inc	ecx
	cmp	ecx, esi
	jb	SHORT $LL6@CRYPTO_gcm
$LN5@CRYPTO_gcm:
	pop	ebp
; Line 1032
	mov	DWORD PTR [edi+364], ebx
; Line 1033
	xor	eax, eax
	pop	ebx
	pop	esi
	pop	edi
; Line 1034
	pop	ecx
	ret	0
$LN9@CRYPTO_gcm:
	pop	esi
; Line 994
	or	eax, -1
	pop	edi
; Line 1034
	pop	ecx
	ret	0
_CRYPTO_gcm128_aad ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_setiv
_TEXT	SEGMENT
_len0$4$ = -4						; size = 4
_gcm_gmult_p$1$ = 8					; size = 4
_ctx$ = 8						; size = 4
_iv$ = 12						; size = 4
tv931 = 16						; size = 4
_len$ = 16						; size = 4
_CRYPTO_gcm128_setiv PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 893
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	esi
; Line 902
	mov	esi, DWORD PTR _ctx$[esp+8]
	push	edi
; Line 914
	mov	edi, DWORD PTR _len$[esp+12]
	mov	ebx, DWORD PTR [esi+352]
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+64], 0
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+72], 0
	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR [esi+48], 0
	mov	DWORD PTR [esi+52], 0
	mov	DWORD PTR [esi+56], 0
	mov	DWORD PTR [esi+60], 0
	mov	DWORD PTR _gcm_gmult_p$1$[esp+12], ebx
	mov	DWORD PTR [esi+364], 0
	mov	DWORD PTR [esi+360], 0
	cmp	edi, 12					; 0000000cH
	jne	SHORT $LN10@CRYPTO_gcm
; Line 915
	mov	eax, DWORD PTR _iv$[esp+12]
; Line 917
	mov	edi, 1
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [esi], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+8], eax
	mov	BYTE PTR [esi+15], 1
; Line 918
	jmp	$LN16@CRYPTO_gcm
$LN10@CRYPTO_gcm:
; Line 920
	mov	DWORD PTR _len0$4$[esp+16], edi
	push	ebp
	mov	ebp, DWORD PTR _iv$[esp+16]
; Line 922
	cmp	edi, 16					; 00000010H
	jb	SHORT $LN3@CRYPTO_gcm
	mov	ebx, ebp
	lea	ecx, DWORD PTR [esi+15]
	mov	eax, edi
	sub	ebx, esi
	shr	eax, 4
	mov	DWORD PTR tv931[esp+16], eax
	npad	7
$LL2@CRYPTO_gcm:
; Line 924
	lea	eax, DWORD PTR [ebx+ecx]
	cmp	esi, eax
	ja	SHORT $LL42@CRYPTO_gcm
	cmp	ecx, ebp
	jb	SHORT $LL42@CRYPTO_gcm
	mov	eax, esi
	mov	edx, 16					; 00000010H
$LL70@CRYPTO_gcm:
	mov	cl, BYTE PTR [ebx+eax]
	lea	eax, DWORD PTR [eax+1]
	xor	BYTE PTR [eax-1], cl
	sub	edx, 1
	jne	SHORT $LL70@CRYPTO_gcm
; Line 923
	jmp	SHORT $LN5@CRYPTO_gcm
$LL42@CRYPTO_gcm:
; Line 924
	movups	xmm1, XMMWORD PTR [esi]
	movups	xmm0, XMMWORD PTR [ebp]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
$LN5@CRYPTO_gcm:
; Line 925
	lea	eax, DWORD PTR [esi+96]
	push	eax
	push	esi
	call	DWORD PTR _gcm_gmult_p$1$[esp+24]
	add	esp, 8
	lea	ecx, DWORD PTR [esi+15]
; Line 926
	add	ebp, 16					; 00000010H
	add	ebx, 16					; 00000010H
; Line 927
	sub	edi, 16					; 00000010H
	sub	DWORD PTR tv931[esp+16], 1
	jne	SHORT $LL2@CRYPTO_gcm
	mov	ebx, DWORD PTR _gcm_gmult_p$1$[esp+16]
$LN3@CRYPTO_gcm:
; Line 929
	test	edi, edi
	je	$LN12@CRYPTO_gcm
; Line 930
	xor	edx, edx
	test	edi, edi
	je	SHORT $LN8@CRYPTO_gcm
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN44@CRYPTO_gcm
; Line 931
	lea	eax, DWORD PTR [ebp-1]
	lea	ecx, DWORD PTR [esi-1]
	add	eax, edi
	add	ecx, edi
	cmp	esi, eax
	ja	SHORT $LN45@CRYPTO_gcm
	cmp	ecx, ebp
	jae	SHORT $LN44@CRYPTO_gcm
$LN45@CRYPTO_gcm:
	mov	eax, edi
	mov	ecx, edi
	and	eax, 31					; 0000001fH
; Line 930
	mov	ebx, ebp
	sub	ecx, eax
	mov	eax, esi
	sub	ebx, esi
	npad	9
$LL9@CRYPTO_gcm:
; Line 931
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+ebx-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [edx+ebp+16]
	add	edx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	edx, ecx
	jb	SHORT $LL9@CRYPTO_gcm
$LN44@CRYPTO_gcm:
; Line 930
	cmp	edx, edi
	jae	SHORT $LN75@CRYPTO_gcm
	sub	ebp, esi
	lea	ecx, DWORD PTR [edx+esi]
	sub	edi, edx
$LL43@CRYPTO_gcm:
; Line 931
	mov	al, BYTE PTR [ecx+ebp]
	lea	ecx, DWORD PTR [ecx+1]
	xor	BYTE PTR [ecx-1], al
	sub	edi, 1
	jne	SHORT $LL43@CRYPTO_gcm
$LN75@CRYPTO_gcm:
	mov	ebx, DWORD PTR _gcm_gmult_p$1$[esp+16]
$LN8@CRYPTO_gcm:
; Line 932
	lea	eax, DWORD PTR [esi+96]
	push	eax
	push	esi
	call	ebx
	add	esp, 8
$LN12@CRYPTO_gcm:
; Line 934
	mov	eax, DWORD PTR _len0$4$[esp+20]
	xor	ecx, ecx
	shld	ecx, eax, 3
	shl	eax, 3
; Line 937
	bswap	eax
	xor	DWORD PTR [esi+12], eax
; Line 951
	lea	eax, DWORD PTR [esi+96]
	push	eax
	bswap	ecx
	xor	DWORD PTR [esi+8], ecx
	push	esi
	call	ebx
; Line 955
	mov	edi, DWORD PTR [esi+12]
	add	esp, 8
	bswap	edi
	pop	ebp
$LN16@CRYPTO_gcm:
; Line 963
	push	DWORD PTR [esi+372]
	lea	eax, DWORD PTR [esi+32]
	push	eax
	mov	eax, DWORD PTR [esi+368]
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
; Line 964
	inc	edi
; Line 967
	bswap	edi
	mov	DWORD PTR [esi+12], edi
	pop	edi
	pop	esi
	pop	ebx
; Line 973
	pop	ecx
	ret	0
_CRYPTO_gcm128_setiv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_block$ = 16						; size = 4
_CRYPTO_gcm128_init PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 773
	push	ebx
	push	esi
; Line 781
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	push	376					; 00000178H
	push	0
	push	esi
	call	_memset
; Line 783
	mov	eax, DWORD PTR _key$[esp+20]
; Line 785
	lea	ebx, DWORD PTR [esi+80]
	mov	ecx, DWORD PTR _block$[esp+20]
	push	eax
	push	ebx
	push	ebx
	mov	DWORD PTR [esi+368], ecx
	mov	DWORD PTR [esi+372], eax
	call	ecx
	add	esp, 24					; 00000018H
	mov	edx, ebx
	mov	edi, 2
	npad	6
$LL9@CRYPTO_gcm:
; Line 790
	mov	eax, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx-8]
	bswap	eax
	mov	DWORD PTR [edx-8], eax
	bswap	ecx
	mov	DWORD PTR [edx-4], ecx
	sub	edi, 1
	jne	SHORT $LL9@CRYPTO_gcm
; Line 806
	test	DWORD PTR _OPENSSL_ia32cap_P, 16777216	; 01000000H
	je	SHORT $LN3@CRYPTO_gcm
	mov	eax, DWORD PTR _OPENSSL_ia32cap_P+4
	test	al, 2
	je	SHORT $LN3@CRYPTO_gcm
; Line 808
	and	eax, 272629760				; 10400000H
	cmp	eax, 272629760				; 10400000H
; Line 809
	lea	eax, DWORD PTR [esi+96]
	push	ebx
	push	eax
; Line 813
	call	_gcm_init_clmul
	add	esp, 8
; Line 814
	mov	DWORD PTR [esi+352], OFFSET _gcm_gmult_clmul
; Line 815
	mov	DWORD PTR [esi+356], OFFSET _gcm_ghash_clmul
	pop	edi
	pop	esi
	pop	ebx
; Line 889
	ret	0
$LN3@CRYPTO_gcm:
; Line 820
	lea	eax, DWORD PTR [esi+96]
	push	ebx
	push	eax
	call	_gcm_init_4bit
	add	esp, 8
; Line 823
	test	DWORD PTR _OPENSSL_ia32cap_P, 33554432	; 02000000H
	je	SHORT $LN6@CRYPTO_gcm
; Line 827
	pop	edi
	mov	DWORD PTR [esi+352], OFFSET _gcm_gmult_4bit_mmx
; Line 828
	mov	DWORD PTR [esi+356], OFFSET _gcm_ghash_4bit_mmx
	pop	esi
	pop	ebx
; Line 889
	ret	0
$LN6@CRYPTO_gcm:
	pop	edi
; Line 830
	mov	DWORD PTR [esi+352], OFFSET _gcm_gmult_4bit_x86
; Line 831
	mov	DWORD PTR [esi+356], OFFSET _gcm_ghash_4bit_x86
	pop	esi
	pop	ebx
; Line 889
	ret	0
_CRYPTO_gcm128_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_gcm128_new
_TEXT	SEGMENT
_key$ = 8						; size = 4
_block$ = 12						; size = 4
_CRYPTO_gcm128_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\gcm128.c
; Line 1720
	push	esi
; Line 1723
	push	1723					; 000006bbH
	push	OFFSET ??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@
	push	376					; 00000178H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN2@CRYPTO_gcm
; Line 1724
	push	DWORD PTR _block$[esp]
	push	DWORD PTR _key$[esp+4]
	push	esi
	call	_CRYPTO_gcm128_init
	add	esp, 12					; 0000000cH
; Line 1726
	mov	eax, esi
$LN2@CRYPTO_gcm:
	pop	esi
; Line 1727
	ret	0
_CRYPTO_gcm128_new ENDP
_TEXT	ENDS
END
