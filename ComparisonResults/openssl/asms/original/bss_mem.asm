; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@DIEIKEFB@memory?5buffer?$AA@		; `string'
;	COMDAT ??_C@_0O@DIEIKEFB@memory?5buffer?$AA@
CONST	SEGMENT
??_C@_0O@DIEIKEFB@memory?5buffer?$AA@ DB 'memory buffer', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_mem_method DD	0401H
	DD	FLAT:??_C@_0O@DIEIKEFB@memory?5buffer?$AA@
	DD	FLAT:_mem_write
	DD	FLAT:_mem_read
	DD	FLAT:_mem_puts
	DD	FLAT:_mem_gets
	DD	FLAT:_mem_ctrl
	DD	FLAT:_mem_new
	DD	FLAT:_mem_free
	DD	00H
_DATA	ENDS
PUBLIC	_BIO_s_mem
PUBLIC	_BIO_new_mem_buf
PUBLIC	??_C@_0BH@IKAJIAMC@?4?2crypto?2bio?2bss_mem?4c?$AA@ ; `string'
EXTRN	__imp__memmove:PROC
EXTRN	_BUF_MEM_new:PROC
EXTRN	_BUF_MEM_free:PROC
EXTRN	_BUF_MEM_grow_clean:PROC
EXTRN	_BIO_set_flags:PROC
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_new:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BH@IKAJIAMC@?4?2crypto?2bio?2bss_mem?4c?$AA@
CONST	SEGMENT
??_C@_0BH@IKAJIAMC@?4?2crypto?2bio?2bss_mem?4c?$AA@ DB '.\crypto\bio\bss_'
	DB	'mem.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_mem_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 133
	push	esi
; Line 134
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@mem_free
; Line 135
	xor	eax, eax
	pop	esi
; Line 147
	ret	0
$LN2@mem_free:
; Line 136
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN4@mem_free
; Line 137
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN4@mem_free
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN4@mem_free
; Line 140
	test	DWORD PTR [esi+20], 512			; 00000200H
	je	SHORT $LN5@mem_free
; Line 141
	mov	DWORD PTR [eax+4], 0
$LN5@mem_free:
; Line 142
	push	eax
	call	_BUF_MEM_free
	add	esp, 4
; Line 143
	mov	DWORD PTR [esi+32], 0
$LN4@mem_free:
; Line 146
	mov	eax, 1
	pop	esi
; Line 147
	ret	0
_mem_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_new
_TEXT	SEGMENT
_bi$ = 8						; size = 4
_mem_new PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 123
	call	_BUF_MEM_new
	mov	ecx, eax
	test	ecx, ecx
	jne	SHORT $LN2@mem_new
; Line 130
	ret	0
$LN2@mem_new:
; Line 125
	mov	eax, DWORD PTR _bi$[esp-4]
	mov	DWORD PTR [eax+16], 1
; Line 126
	mov	DWORD PTR [eax+12], 1
; Line 127
	mov	DWORD PTR [eax+28], -1
; Line 128
	mov	DWORD PTR [eax+32], ecx
; Line 129
	mov	eax, 1
; Line 130
	ret	0
_mem_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_num$ = 16						; size = 4
_ptr$ = 20						; size = 4
_mem_ctrl PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 207
	mov	eax, DWORD PTR _cmd$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _b$[esp+8]
	dec	eax
	mov	ebx, 1
	mov	esi, DWORD PTR [edi+32]
	cmp	eax, 129				; 00000081H
	ja	$LN20@mem_ctrl
	movzx	eax, BYTE PTR $LN22@mem_ctrl[eax]
	jmp	DWORD PTR $LN24@mem_ctrl[eax*4]
$LN4@mem_ctrl:
; Line 209
	mov	edx, DWORD PTR [esi+4]
	test	edx, edx
	je	$LN2@mem_ctrl
; Line 211
	test	DWORD PTR [edi+20], 512			; 00000200H
	je	SHORT $LN6@mem_ctrl
; Line 212
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+8]
	sub	eax, ecx
	add	eax, edx
; Line 213
	mov	DWORD PTR [esi], ecx
	pop	edi
	mov	DWORD PTR [esi+4], eax
; Line 267
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN6@mem_ctrl:
; Line 215
	push	DWORD PTR [esi+8]
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 216
	mov	DWORD PTR [esi], 0
; Line 267
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN8@mem_ctrl:
; Line 221
	xor	ebx, ebx
	cmp	DWORD PTR [esi], ebx
	pop	edi
	sete	bl
	pop	esi
; Line 267
	mov	eax, ebx
	pop	ebx
; Line 268
	ret	0
$LN9@mem_ctrl:
; Line 224
	mov	eax, DWORD PTR _num$[esp+8]
	mov	DWORD PTR [edi+28], eax
; Line 267
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN10@mem_ctrl:
; Line 228
	mov	ecx, DWORD PTR _ptr$[esp+8]
	mov	ebx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@mem_ctrl
; Line 230
	mov	eax, DWORD PTR [esi+4]
	pop	edi
	mov	DWORD PTR [ecx], eax
; Line 267
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN12@mem_ctrl:
; Line 234
	push	edi
	call	_mem_free
; Line 235
	mov	eax, DWORD PTR _num$[esp+12]
	add	esp, 4
	mov	DWORD PTR [edi+16], eax
; Line 236
	mov	eax, DWORD PTR _ptr$[esp+8]
	mov	DWORD PTR [edi+32], eax
; Line 267
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN13@mem_ctrl:
; Line 239
	mov	eax, DWORD PTR _ptr$[esp+8]
	test	eax, eax
	je	SHORT $LN2@mem_ctrl
; Line 241
	pop	edi
	mov	DWORD PTR [eax], esi
; Line 267
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN15@mem_ctrl:
; Line 245
	mov	ebx, DWORD PTR [edi+16]
; Line 267
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN16@mem_ctrl:
; Line 248
	mov	eax, DWORD PTR _num$[esp+8]
	mov	DWORD PTR [edi+16], eax
; Line 267
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN18@mem_ctrl:
; Line 255
	mov	ebx, DWORD PTR [esi]
; Line 267
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
$LN20@mem_ctrl:
; Line 264
	xor	ebx, ebx
$LN2@mem_ctrl:
	pop	edi
	pop	esi
; Line 267
	mov	eax, ebx
	pop	ebx
; Line 268
	ret	0
	npad	3
$LN24@mem_ctrl:
	DD	$LN4@mem_ctrl
	DD	$LN8@mem_ctrl
	DD	$LN10@mem_ctrl
	DD	$LN15@mem_ctrl
	DD	$LN16@mem_ctrl
	DD	$LN18@mem_ctrl
	DD	$LN2@mem_ctrl
	DD	$LN20@mem_ctrl
	DD	$LN12@mem_ctrl
	DD	$LN13@mem_ctrl
	DD	$LN9@mem_ctrl
	DD	$LN20@mem_ctrl
$LN22@mem_ctrl:
	DB	0
	DB	1
	DB	2
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	3
	DB	4
	DB	5
	DB	6
	DB	6
	DB	7
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	8
	DB	9
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
_mem_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_gets
_TEXT	SEGMENT
_bp$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_mem_gets PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 271
	push	ebp
; Line 275
	mov	ebp, DWORD PTR _bp$[esp]
	push	esi
; Line 277
	push	15					; 0000000fH
	push	ebp
	mov	esi, DWORD PTR [ebp+32]
	call	_BIO_clear_flags
; Line 279
	mov	eax, DWORD PTR _size$[esp+12]
	add	esp, 8
	mov	ecx, DWORD PTR [esi]
	dec	eax
	cmp	eax, ecx
	cmovl	ecx, eax
; Line 281
	test	ecx, ecx
	jg	SHORT $LN6@mem_gets
; Line 282
	mov	eax, DWORD PTR _buf$[esp+4]
	pop	esi
	pop	ebp
	mov	BYTE PTR [eax], 0
; Line 283
	xor	eax, eax
; Line 303
	ret	0
$LN6@mem_gets:
; Line 285
	mov	eax, DWORD PTR [esi+4]
; Line 286
	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN3@mem_gets
	npad	7
$LL4@mem_gets:
; Line 287
	cmp	BYTE PTR [esi+eax], 10			; 0000000aH
	je	SHORT $LN21@mem_gets
; Line 286
	inc	esi
	cmp	esi, ecx
	jl	SHORT $LL4@mem_gets
; Line 287
	jmp	SHORT $LN3@mem_gets
$LN21@mem_gets:
; Line 288
	inc	esi
$LN3@mem_gets:
	push	ebx
; Line 154
	mov	ebx, DWORD PTR [ebp+32]
	push	edi
; Line 155
	push	15					; 0000000fH
	push	ebp
	call	_BIO_clear_flags
	add	esp, 8
; Line 156
	test	esi, esi
	js	SHORT $LN18@mem_gets
	mov	edi, DWORD PTR [ebx]
	cmp	esi, edi
	ja	SHORT $LN19@mem_gets
$LN18@mem_gets:
	mov	edi, esi
$LN19@mem_gets:
; Line 157
	mov	esi, DWORD PTR _buf$[esp+12]
	test	esi, esi
	je	SHORT $LN11@mem_gets
	test	edi, edi
	jle	SHORT $LN11@mem_gets
; Line 158
	push	edi
	push	DWORD PTR [ebx+4]
	push	esi
	call	_memcpy
; Line 159
	sub	DWORD PTR [ebx], edi
	add	esp, 12					; 0000000cH
; Line 160
	test	DWORD PTR [ebp+20], 512			; 00000200H
	je	SHORT $LN13@mem_gets
; Line 161
	add	DWORD PTR [ebx+4], edi
	jmp	SHORT $LN16@mem_gets
$LN13@mem_gets:
; Line 163
	mov	ecx, DWORD PTR [ebx+4]
	push	DWORD PTR [ebx]
	lea	eax, DWORD PTR [ecx+edi]
	push	eax
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 165
	jmp	SHORT $LN16@mem_gets
$LN11@mem_gets:
	cmp	DWORD PTR [ebx], 0
	jne	SHORT $LN16@mem_gets
; Line 166
	mov	edi, DWORD PTR [ebp+28]
; Line 167
	test	edi, edi
	je	SHORT $LN8@mem_gets
; Line 168
	push	9
	push	ebp
	call	_BIO_set_flags
	add	esp, 8
$LN16@mem_gets:
; Line 299
	test	edi, edi
	jle	SHORT $LN8@mem_gets
; Line 300
	mov	BYTE PTR [edi+esi], 0
$LN8@mem_gets:
; Line 302
	mov	eax, edi
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 303
	ret	0
_mem_gets ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_puts
_TEXT	SEGMENT
_bp$ = 8						; size = 4
_str$ = 12						; size = 4
_mem_puts PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 309
	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, edx
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL3@mem_puts:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@mem_puts
	sub	eax, esi
; Line 310
	push	eax
	push	edx
	push	DWORD PTR _bp$[esp+8]
	call	_mem_write
	add	esp, 12					; 0000000cH
	pop	esi
; Line 313
	ret	0
_mem_puts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_read
_TEXT	SEGMENT
_b$ = 8							; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_mem_read PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 150
	push	ebx
; Line 154
	mov	ebx, DWORD PTR _b$[esp]
	push	esi
	push	edi
; Line 155
	push	15					; 0000000fH
	mov	edi, DWORD PTR [ebx+32]
	push	ebx
	call	_BIO_clear_flags
; Line 156
	mov	eax, DWORD PTR _outl$[esp+16]
	add	esp, 8
	test	eax, eax
	js	SHORT $LN9@mem_read
	mov	esi, DWORD PTR [edi]
	cmp	eax, esi
	ja	SHORT $LN10@mem_read
$LN9@mem_read:
	mov	esi, eax
$LN10@mem_read:
; Line 157
	mov	eax, DWORD PTR _out$[esp+8]
	test	eax, eax
	je	SHORT $LN2@mem_read
	test	esi, esi
	jle	SHORT $LN2@mem_read
; Line 158
	push	esi
	push	DWORD PTR [edi+4]
	push	eax
	call	_memcpy
; Line 159
	sub	DWORD PTR [edi], esi
	add	esp, 12					; 0000000cH
; Line 160
	test	DWORD PTR [ebx+20], 512			; 00000200H
	je	SHORT $LN4@mem_read
; Line 161
	add	DWORD PTR [edi+4], esi
; Line 170
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 171
	ret	0
$LN4@mem_read:
; Line 163
	mov	ecx, DWORD PTR [edi+4]
	push	DWORD PTR [edi]
	lea	eax, DWORD PTR [ecx+esi]
	push	eax
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 170
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 171
	ret	0
$LN2@mem_read:
; Line 165
	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN12@mem_read
; Line 166
	mov	esi, DWORD PTR [ebx+28]
; Line 167
	test	esi, esi
	je	SHORT $LN12@mem_read
; Line 168
	push	9
	push	ebx
	call	_BIO_set_flags
	add	esp, 8
$LN12@mem_read:
; Line 170
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 171
	ret	0
_mem_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _mem_write
_TEXT	SEGMENT
_blen$1$ = 8						; size = 4
_b$ = 8							; size = 4
_in$ = 12						; size = 4
_inl$ = 16						; size = 4
_mem_write PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 180
	cmp	DWORD PTR _in$[esp-4], 0
	mov	ecx, DWORD PTR _b$[esp-4]
	push	edi
	mov	edi, DWORD PTR [ecx+32]
	jne	SHORT $LN2@mem_write
; Line 181
	push	181					; 000000b5H
	push	OFFSET ??_C@_0BH@IKAJIAMC@?4?2crypto?2bio?2bss_mem?4c?$AA@
	push	115					; 00000073H
	push	117					; 00000075H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 197
	or	eax, -1
	pop	edi
; Line 198
	ret	0
$LN2@mem_write:
; Line 185
	test	DWORD PTR [ecx+20], 512			; 00000200H
	je	SHORT $LN3@mem_write
; Line 186
	push	186					; 000000baH
	push	OFFSET ??_C@_0BH@IKAJIAMC@?4?2crypto?2bio?2bss_mem?4c?$AA@
	push	126					; 0000007eH
	push	117					; 00000075H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 197
	or	eax, -1
	pop	edi
; Line 198
	ret	0
$LN3@mem_write:
	push	ebp
	push	esi
; Line 190
	push	15					; 0000000fH
	push	ecx
	call	_BIO_clear_flags
; Line 191
	mov	eax, DWORD PTR [edi]
; Line 192
	mov	ebp, DWORD PTR _inl$[esp+16]
	mov	DWORD PTR _blen$1$[esp+16], eax
	lea	esi, DWORD PTR [eax+ebp]
	push	esi
	push	edi
	call	_BUF_MEM_grow_clean
	add	esp, 16					; 00000010H
	cmp	eax, esi
	jne	SHORT $LN6@mem_write
; Line 194
	mov	ecx, DWORD PTR [edi+4]
	add	ecx, DWORD PTR _blen$1$[esp+8]
	push	ebp
	push	DWORD PTR _in$[esp+12]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 197
	mov	eax, ebp
	pop	esi
	pop	ebp
	pop	edi
; Line 198
	ret	0
$LN6@mem_write:
	pop	esi
; Line 197
	or	eax, -1
	pop	ebp
$end$9:
	pop	edi
; Line 198
	ret	0
_mem_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_new_mem_buf
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
_BIO_new_mem_buf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 96
	push	edi
; Line 101
	mov	edi, DWORD PTR _buf$[esp]
	test	edi, edi
	jne	SHORT $LN2@BIO_new_me
; Line 102
	push	102					; 00000066H
	push	OFFSET ??_C@_0BH@IKAJIAMC@?4?2crypto?2bio?2bss_mem?4c?$AA@
	push	115					; 00000073H
	push	126					; 0000007eH
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 103
	xor	eax, eax
	pop	edi
; Line 117
	ret	0
$LN2@BIO_new_me:
	push	esi
; Line 105
	mov	esi, DWORD PTR _len$[esp+4]
	test	esi, esi
	jns	SHORT $LN5@BIO_new_me
	mov	esi, edi
	lea	ecx, DWORD PTR [esi+1]
$LL9@BIO_new_me:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL9@BIO_new_me
	sub	esi, ecx
$LN5@BIO_new_me:
; Line 106
	push	OFFSET _mem_method
	call	_BIO_new
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN3@BIO_new_me
	pop	esi
	pop	edi
; Line 117
	ret	0
$LN3@BIO_new_me:
; Line 108
	mov	eax, DWORD PTR [ecx+32]
; Line 111
	mov	DWORD PTR [eax], esi
; Line 112
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+4], edi
; Line 116
	mov	eax, ecx
	or	DWORD PTR [ecx+20], 512			; 00000200H
	pop	esi
	mov	DWORD PTR [ecx+28], 0
	pop	edi
; Line 117
	ret	0
_BIO_new_mem_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_s_mem
_TEXT	SEGMENT
_BIO_s_mem PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_mem.c
; Line 91
	mov	eax, OFFSET _mem_method
; Line 92
	ret	0
_BIO_s_mem ENDP
_TEXT	ENDS
END
