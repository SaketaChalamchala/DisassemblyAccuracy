; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06HOHPNJLC@buffer?$AA@			; `string'
;	COMDAT ??_C@_06HOHPNJLC@buffer?$AA@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer?$AA@ DB 'buffer', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_methods_buffer DD 0209H
	DD	FLAT:??_C@_06HOHPNJLC@buffer?$AA@
	DD	FLAT:_buffer_write
	DD	FLAT:_buffer_read
	DD	FLAT:_buffer_puts
	DD	FLAT:_buffer_gets
	DD	FLAT:_buffer_ctrl
	DD	FLAT:_buffer_new
	DD	FLAT:_buffer_free
	DD	FLAT:_buffer_callback_ctrl
_DATA	ENDS
PUBLIC	_BIO_f_buffer
PUBLIC	??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_read:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_callback_ctrl:PROC
EXTRN	_BIO_int_ctrl:PROC
EXTRN	_BIO_copy_next_retry:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
CONST	SEGMENT
??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@ DB '.\crypto\bio\bf_b'
	DB	'uff.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_callback_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_fp$ = 16						; size = 4
_buffer_callback_ctrl PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 457
	mov	eax, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	jne	SHORT $LN4@buffer_cal
; Line 465
	ret	0
$LN4@buffer_cal:
; Line 461
	mov	DWORD PTR _b$[esp-4], eax
	jmp	_BIO_callback_ctrl
_buffer_callback_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_buffer_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 124
	push	esi
; Line 127
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@buffer_fre
; Line 128
	xor	eax, eax
	pop	esi
; Line 139
	ret	0
$LN2@buffer_fre:
	push	edi
; Line 129
	mov	edi, DWORD PTR [esi+32]
; Line 130
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN3@buffer_fre
; Line 131
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN3@buffer_fre:
; Line 132
	mov	eax, DWORD PTR [edi+20]
	pop	edi
	test	eax, eax
	je	SHORT $LN4@buffer_fre
; Line 133
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@buffer_fre:
; Line 134
	push	DWORD PTR [esi+32]
	call	_CRYPTO_free
	add	esp, 4
; Line 135
	mov	DWORD PTR [esi+32], 0
; Line 136
	mov	DWORD PTR [esi+12], 0
; Line 138
	mov	eax, 1
	mov	DWORD PTR [esi+20], 0
	pop	esi
; Line 139
	ret	0
_buffer_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_new
_TEXT	SEGMENT
_bi$ = 8						; size = 4
_buffer_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 93
	push	esi
; Line 96
	push	96					; 00000060H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	32					; 00000020H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 97
	test	esi, esi
	je	SHORT $LN6@buffer_new
; Line 99
	push	99					; 00000063H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	4096					; 00001000H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+8], eax
; Line 100
	test	eax, eax
	jne	SHORT $LN3@buffer_new
; Line 101
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN6@buffer_new:
; Line 102
	xor	eax, eax
	pop	esi
; Line 121
	ret	0
$LN3@buffer_new:
; Line 104
	push	104					; 00000068H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	4096					; 00001000H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+20], eax
; Line 105
	test	eax, eax
	jne	SHORT $LN4@buffer_new
; Line 106
	push	DWORD PTR [esi+8]
	call	_CRYPTO_free
; Line 107
	push	esi
	call	_CRYPTO_free
	add	esp, 8
; Line 108
	xor	eax, eax
	pop	esi
; Line 121
	ret	0
$LN4@buffer_new:
; Line 117
	mov	eax, DWORD PTR _bi$[esp]
	mov	DWORD PTR [esi], 4096			; 00001000H
	mov	DWORD PTR [esi+4], 4096			; 00001000H
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
; Line 118
	mov	DWORD PTR [eax+32], esi
	mov	DWORD PTR [eax+12], 1
; Line 119
	mov	DWORD PTR [eax+20], 0
; Line 120
	mov	eax, 1
	pop	esi
; Line 121
	ret	0
_buffer_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_ctrl
_TEXT	SEGMENT
_p2$1$ = -4						; size = 4
_obs$1$ = 8						; size = 4
_b$ = 8							; size = 4
_ibs$1$ = 12						; size = 4
_cmd$ = 12						; size = 4
_num$ = 16						; size = 4
_ptr$ = 20						; size = 4
_buffer_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 290
	mov	eax, 4
	call	__chkstk
	push	ebx
; Line 298
	mov	ebx, DWORD PTR _b$[esp+4]
	push	ebp
; Line 300
	mov	ebp, DWORD PTR _cmd$[esp+8]
	push	esi
	mov	esi, DWORD PTR [ebx+32]
	push	edi
	lea	eax, DWORD PTR [ebp-1]
	mov	edi, 1
	cmp	eax, 121				; 00000079H
	ja	SHORT $LN48@buffer_ctr
	movzx	eax, BYTE PTR $LN59@buffer_ctr[eax]
	jmp	DWORD PTR $LN69@buffer_ctr[eax*4]
$LN10@buffer_ctr:
; Line 302
	mov	DWORD PTR [esi+16], 0
; Line 303
	mov	DWORD PTR [esi+12], 0
; Line 304
	mov	DWORD PTR [esi+28], 0
; Line 305
	mov	DWORD PTR [esi+24], 0
; Line 309
	jmp	SHORT $LN48@buffer_ctr
$LN12@buffer_ctr:
; Line 311
	mov	edi, DWORD PTR [esi+24]
; Line 447
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN13@buffer_ctr:
; Line 316
	mov	edx, DWORD PTR [esi+12]
	xor	edi, edi
	mov	ebx, DWORD PTR [esi+8]
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN2@buffer_ctr
; Line 317
	mov	eax, DWORD PTR [esi+16]
	add	eax, ebx
$LL6@buffer_ctr:
	cmp	BYTE PTR [eax+ecx], 10			; 0000000aH
	jne	SHORT $LN4@buffer_ctr
; Line 318
	inc	edi
$LN4@buffer_ctr:
; Line 316
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LL6@buffer_ctr
; Line 447
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN15@buffer_ctr:
; Line 322
	mov	edi, DWORD PTR [esi+24]
$LN66@buffer_ctr:
; Line 331
	test	edi, edi
	jne	SHORT $LN2@buffer_ctr
$LN48@buffer_ctr:
; Line 442
	mov	eax, DWORD PTR [ebx+36]
	test	eax, eax
	je	$LN67@buffer_ctr
$LN49@buffer_ctr:
; Line 444
	push	DWORD PTR _ptr$[esp+16]
	push	DWORD PTR _num$[esp+20]
	push	ebp
	push	eax
	call	_BIO_ctrl
	mov	edi, eax
	add	esp, 16					; 00000010H
$LN2@buffer_ctr:
; Line 447
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN18@buffer_ctr:
; Line 330
	mov	edi, DWORD PTR [esi+12]
; Line 336
	jmp	SHORT $LN66@buffer_ctr
$LN21@buffer_ctr:
; Line 338
	mov	edi, DWORD PTR _num$[esp+16]
	cmp	edi, DWORD PTR [esi]
	jle	SHORT $LN22@buffer_ctr
; Line 339
	push	339					; 00000153H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	edi
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 340
	test	ebx, ebx
	je	$malloc_error$70
; Line 342
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN24@buffer_ctr
; Line 343
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN24@buffer_ctr:
; Line 344
	mov	DWORD PTR [esi+8], ebx
$LN22@buffer_ctr:
; Line 348
	push	edi
	push	DWORD PTR _ptr$[esp+20]
	mov	DWORD PTR [esi+16], 0
	push	DWORD PTR [esi+8]
	mov	DWORD PTR [esi+12], edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 349
	mov	edi, 1
; Line 447
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN25@buffer_ctr:
; Line 352
	mov	eax, DWORD PTR _ptr$[esp+16]
; Line 355
	mov	ebx, DWORD PTR _num$[esp+16]
	test	eax, eax
	je	SHORT $LN26@buffer_ctr
; Line 354
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN28@buffer_ctr
; Line 356
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, ebx
	mov	DWORD PTR _ibs$1$[esp+16], ecx
	mov	DWORD PTR _obs$1$[esp+16], eax
; Line 357
	jmp	SHORT $LN27@buffer_ctr
$LN28@buffer_ctr:
; Line 359
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _ibs$1$[esp+16], ecx
; Line 362
	jmp	SHORT $LN64@buffer_ctr
$LN26@buffer_ctr:
; Line 363
	mov	ecx, ebx
	mov	DWORD PTR _ibs$1$[esp+16], ebx
$LN64@buffer_ctr:
; Line 364
	mov	DWORD PTR _obs$1$[esp+16], ebx
$LN27@buffer_ctr:
; Line 367
	mov	eax, DWORD PTR [esi+20]
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR _p2$1$[esp+20], eax
; Line 368
	cmp	ecx, 4096				; 00001000H
	jle	SHORT $LN31@buffer_ctr
	cmp	ecx, DWORD PTR [esi]
	je	SHORT $LN31@buffer_ctr
; Line 369
	push	369					; 00000171H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 370
	test	ebp, ebp
	je	SHORT $malloc_error$70
$LN31@buffer_ctr:
; Line 373
	mov	eax, DWORD PTR _obs$1$[esp+16]
	cmp	eax, 4096				; 00001000H
	jle	SHORT $LN61@buffer_ctr
	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN61@buffer_ctr
; Line 374
	push	374					; 00000176H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 375
	test	ebx, ebx
	jne	SHORT $LN33@buffer_ctr
; Line 376
	cmp	ebp, DWORD PTR [esi+8]
	je	SHORT $malloc_error$70
; Line 377
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$malloc_error$70:
; Line 449
	push	449					; 000001c1H
	push	OFFSET ??_C@_0BH@HEBHEJFA@?4?2crypto?2bio?2bf_buff?4c?$AA@
	push	65					; 00000041H
	push	114					; 00000072H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN67@buffer_ctr:
; Line 450
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN61@buffer_ctr:
	mov	ebx, DWORD PTR _p2$1$[esp+20]
$LN33@buffer_ctr:
; Line 381
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebp
	je	SHORT $LN35@buffer_ctr
; Line 382
	push	eax
	call	_CRYPTO_free
; Line 386
	mov	eax, DWORD PTR _ibs$1$[esp+20]
	add	esp, 4
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi], eax
$LN35@buffer_ctr:
; Line 388
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	je	$LN2@buffer_ctr
; Line 389
	push	eax
	call	_CRYPTO_free
; Line 393
	mov	eax, DWORD PTR _obs$1$[esp+20]
	add	esp, 4
	mov	DWORD PTR [esi+4], eax
; Line 447
	mov	eax, edi
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+28], 0
	pop	edi
	mov	DWORD PTR [esi+24], 0
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN37@buffer_ctr:
; Line 397
	cmp	DWORD PTR [ebx+36], 0
	je	SHORT $LN67@buffer_ctr
; Line 399
	push	15					; 0000000fH
	push	ebx
	call	_BIO_clear_flags
; Line 400
	push	DWORD PTR _ptr$[esp+24]
	push	DWORD PTR _num$[esp+28]
	push	ebp
	push	DWORD PTR [ebx+36]
	call	_BIO_ctrl
; Line 401
	push	ebx
	mov	edi, eax
	call	_BIO_copy_next_retry
	add	esp, 28					; 0000001cH
; Line 447
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN39@buffer_ctr:
; Line 405
	mov	eax, DWORD PTR [ebx+36]
	test	eax, eax
	je	$LN67@buffer_ctr
; Line 407
	cmp	DWORD PTR [esi+24], 0
	jle	$LN49@buffer_ctr
; Line 413
	push	15					; 0000000fH
	push	ebx
	call	_BIO_clear_flags
	add	esp, 8
; Line 414
	cmp	DWORD PTR [esi+24], 0
	jle	SHORT $LN42@buffer_ctr
$LL7@buffer_ctr:
; Line 415
	push	DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+20]
	add	eax, DWORD PTR [esi+28]
	push	eax
	push	DWORD PTR [ebx+36]
	call	_BIO_write
; Line 421
	push	ebx
	mov	edi, eax
	call	_BIO_copy_next_retry
	add	esp, 16					; 00000010H
; Line 422
	test	edi, edi
	jle	$LN2@buffer_ctr
; Line 424
	add	DWORD PTR [esi+28], edi
; Line 425
	sub	DWORD PTR [esi+24], edi
	push	15					; 0000000fH
	push	ebx
	call	_BIO_clear_flags
	add	esp, 8
	cmp	DWORD PTR [esi+24], 0
	jg	SHORT $LL7@buffer_ctr
$LN42@buffer_ctr:
; Line 433
	push	DWORD PTR _ptr$[esp+16]
	mov	DWORD PTR [esi+24], 0
	push	DWORD PTR _num$[esp+20]
	mov	DWORD PTR [esi+28], 0
	push	ebp
	push	DWORD PTR [ebx+36]
; Line 444
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
	mov	edi, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN45@buffer_ctr:
; Line 437
	mov	ebx, DWORD PTR _ptr$[esp+16]
	push	0
	push	DWORD PTR [esi]
	push	117					; 00000075H
	push	ebx
	call	_BIO_int_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN47@buffer_ctr
	push	1
	push	DWORD PTR [esi+4]
	push	117					; 00000075H
	push	ebx
	call	_BIO_int_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN2@buffer_ctr
$LN47@buffer_ctr:
; Line 439
	xor	edi, edi
; Line 447
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	pop	ecx
	ret	0
$LN69@buffer_ctr:
	DD	$LN10@buffer_ctr
	DD	$LN12@buffer_ctr
	DD	$LN18@buffer_ctr
	DD	$LN39@buffer_ctr
	DD	$LN45@buffer_ctr
	DD	$LN15@buffer_ctr
	DD	$LN37@buffer_ctr
	DD	$LN13@buffer_ctr
	DD	$LN25@buffer_ctr
	DD	$LN21@buffer_ctr
	DD	$LN48@buffer_ctr
$LN59@buffer_ctr:
	DB	0
	DB	10					; 0000000aH
	DB	1
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	2
	DB	3
	DB	4
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	7
	DB	8
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	9
_buffer_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_gets
_TEXT	SEGMENT
_num$1$ = -4						; size = 4
_b$ = 8							; size = 4
_buf$ = 12						; size = 4
_flag$1$ = 16						; size = 4
_size$ = 16						; size = 4
_buffer_gets PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 468
	mov	eax, 4
	call	__chkstk
; Line 473
	mov	eax, DWORD PTR _b$[esp]
	push	ebx
	push	ebp
; Line 474
	mov	ebp, DWORD PTR _size$[esp+8]
	push	esi
	mov	esi, DWORD PTR [eax+32]
	dec	ebp
	push	edi
; Line 475
	push	15					; 0000000fH
	xor	edi, edi
	push	eax
	mov	DWORD PTR _num$1$[esp+28], edi
	call	_BIO_clear_flags
	mov	ebx, DWORD PTR _buf$[esp+24]
	add	esp, 8
	npad	1
$LL2@buffer_get:
; Line 478
	mov	ecx, DWORD PTR [esi+12]
	test	ecx, ecx
	jle	SHORT $LN8@buffer_get
; Line 479
	mov	edx, DWORD PTR [esi+8]
; Line 481
	xor	eax, eax
	add	edx, DWORD PTR [esi+16]
	mov	DWORD PTR _flag$1$[esp+16], 0
	test	ecx, ecx
	jle	SHORT $LN32@buffer_get
	npad	5
$LL7@buffer_get:
	cmp	eax, ebp
	jge	SHORT $LN31@buffer_get
; Line 482
	mov	cl, BYTE PTR [eax+edx]
	mov	BYTE PTR [ebx], cl
	inc	ebx
; Line 483
	cmp	BYTE PTR [eax+edx], 10			; 0000000aH
	je	SHORT $LN20@buffer_get
; Line 481
	inc	eax
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LL7@buffer_get
$LN31@buffer_get:
; Line 505
	mov	ecx, DWORD PTR _flag$1$[esp+16]
	jmp	SHORT $LN6@buffer_get
$LN20@buffer_get:
; Line 484
	mov	ecx, 1
; Line 485
	inc	eax
	jmp	SHORT $LN6@buffer_get
$LN32@buffer_get:
	xor	ecx, ecx
$LN6@buffer_get:
; Line 491
	sub	DWORD PTR [esi+12], eax
	add	edi, eax
; Line 492
	add	DWORD PTR [esi+16], eax
	sub	ebp, eax
	mov	DWORD PTR _num$1$[esp+20], edi
; Line 493
	test	ecx, ecx
	jne	SHORT $LN21@buffer_get
	test	ebp, ebp
	jne	SHORT $LL2@buffer_get
$LN21@buffer_get:
; Line 504
	mov	eax, edi
	mov	BYTE PTR [ebx], 0
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 512
	pop	ecx
	ret	0
$LN8@buffer_get:
; Line 499
	push	DWORD PTR [esi]
	mov	eax, DWORD PTR _b$[esp+20]
	push	DWORD PTR [esi+8]
	push	DWORD PTR [eax+36]
	call	_BIO_read
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 500
	test	edi, edi
	jg	SHORT $LN15@buffer_get
; Line 501
	push	DWORD PTR _b$[esp+16]
	call	_BIO_copy_next_retry
	add	esp, 4
; Line 502
	mov	BYTE PTR [ebx], 0
; Line 503
	test	edi, edi
	js	SHORT $LN22@buffer_get
; Line 505
	je	SHORT $LN23@buffer_get
$LN15@buffer_get:
; Line 508
	mov	DWORD PTR [esi+12], edi
; Line 511
	mov	edi, DWORD PTR _num$1$[esp+20]
	mov	DWORD PTR [esi+16], 0
	jmp	$LL2@buffer_get
$LN23@buffer_get:
; Line 506
	mov	eax, DWORD PTR _num$1$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 512
	pop	ecx
	ret	0
$LN22@buffer_get:
; Line 504
	mov	eax, DWORD PTR _num$1$[esp+20]
	test	eax, eax
	cmovg	edi, eax
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 512
	pop	ecx
	ret	0
_buffer_gets ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_puts
_TEXT	SEGMENT
_b$ = 8							; size = 4
_str$ = 12						; size = 4
_buffer_puts PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 516
	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, edx
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL3@buffer_put:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@buffer_put
	sub	eax, esi
	push	eax
	push	edx
	push	DWORD PTR _b$[esp+8]
	call	_buffer_write
	add	esp, 12					; 0000000cH
	pop	esi
; Line 517
	ret	0
_buffer_puts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_read
_TEXT	SEGMENT
_b$ = 8							; size = 4
_num$1$ = 12						; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_buffer_read PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 142
	push	ebp
; Line 146
	mov	ebp, DWORD PTR _out$[esp]
	test	ebp, ebp
	jne	SHORT $LN5@buffer_rea
; Line 147
	xor	eax, eax
	pop	ebp
; Line 210
	ret	0
$LN5@buffer_rea:
; Line 148
	mov	ecx, DWORD PTR _b$[esp]
	push	esi
	mov	esi, DWORD PTR [ecx+32]
; Line 150
	test	esi, esi
	je	$LN7@buffer_rea
	cmp	DWORD PTR [ecx+36], 0
	je	$LN7@buffer_rea
; Line 152
	push	edi
	xor	eax, eax
; Line 153
	push	15					; 0000000fH
	push	ecx
	mov	DWORD PTR _num$1$[esp+16], eax
	call	_BIO_clear_flags
	mov	edi, DWORD PTR _outl$[esp+16]
	add	esp, 8
	push	ebx
	npad	2
$start$43:
; Line 156
	mov	ebx, DWORD PTR [esi+12]
; Line 158
	test	ebx, ebx
	je	SHORT $LN8@buffer_rea
; Line 161
	mov	eax, DWORD PTR [esi+8]
	cmp	ebx, edi
	cmovg	ebx, edi
	add	eax, DWORD PTR [esi+16]
	push	ebx
	push	eax
	push	ebp
	call	_memcpy
; Line 164
	mov	eax, DWORD PTR _num$1$[esp+24]
	add	esp, 12					; 0000000cH
	add	DWORD PTR [esi+16], ebx
	add	eax, ebx
	sub	DWORD PTR [esi+12], ebx
	mov	DWORD PTR _num$1$[esp+12], eax
; Line 165
	cmp	edi, ebx
	je	SHORT $LN41@buffer_rea
; Line 167
	sub	edi, ebx
; Line 168
	add	ebp, ebx
$LN8@buffer_rea:
; Line 177
	mov	eax, DWORD PTR [esi]
	cmp	edi, eax
	jg	SHORT $LN38@buffer_rea
; Line 197
	push	eax
	mov	eax, DWORD PTR _b$[esp+16]
	push	DWORD PTR [esi+8]
	push	DWORD PTR [eax+36]
	call	_BIO_read
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 198
	test	ebx, ebx
	jg	SHORT $LN18@buffer_rea
; Line 199
	push	DWORD PTR _b$[esp+12]
	call	_BIO_copy_next_retry
	add	esp, 4
; Line 200
	test	ebx, ebx
	js	SHORT $LN24@buffer_rea
; Line 202
	je	SHORT $LN25@buffer_rea
$LN18@buffer_rea:
; Line 205
	mov	DWORD PTR [esi+16], 0
; Line 206
	mov	DWORD PTR [esi+12], ebx
; Line 209
	jmp	SHORT $start$43
$LN25@buffer_rea:
; Line 203
	mov	eax, DWORD PTR _num$1$[esp+12]
$LN41@buffer_rea:
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 210
	ret	0
$LN24@buffer_rea:
; Line 201
	mov	eax, DWORD PTR _num$1$[esp+12]
	test	eax, eax
	cmovg	ebx, eax
$LN28@buffer_rea:
	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 210
	ret	0
$LN38@buffer_rea:
	mov	ebx, DWORD PTR _num$1$[esp+12]
	npad	1
$LL2@buffer_rea:
; Line 179
	mov	eax, DWORD PTR _b$[esp+12]
	push	edi
	push	ebp
	push	DWORD PTR [eax+36]
	call	_BIO_read
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 180
	test	esi, esi
	jg	SHORT $LN14@buffer_rea
; Line 181
	push	DWORD PTR _b$[esp+12]
	call	_BIO_copy_next_retry
	add	esp, 4
; Line 182
	test	esi, esi
	js	SHORT $LN26@buffer_rea
; Line 184
	je	SHORT $LN28@buffer_rea
$LN14@buffer_rea:
; Line 187
	add	ebx, esi
; Line 188
	cmp	edi, esi
	je	SHORT $LN28@buffer_rea
; Line 190
	add	ebp, esi
; Line 191
	sub	edi, esi
; Line 192
	jmp	SHORT $LL2@buffer_rea
$LN26@buffer_rea:
; Line 183
	test	ebx, ebx
	cmovg	esi, ebx
	pop	ebx
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 210
	ret	0
$LN7@buffer_rea:
	pop	esi
; Line 151
	xor	eax, eax
	pop	ebp
; Line 210
	ret	0
_buffer_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _buffer_write
_TEXT	SEGMENT
_num$1$ = -4						; size = 4
_b$ = 8							; size = 4
_in$ = 12						; size = 4
_inl$ = 16						; size = 4
_buffer_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 213
	mov	eax, 4
	call	__chkstk
; Line 217
	cmp	DWORD PTR _in$[esp], 0
	push	ebx
	mov	DWORD PTR _num$1$[esp+8], 0
	je	$LN8@buffer_wri
	mov	ebx, DWORD PTR _inl$[esp+4]
	test	ebx, ebx
	jle	$LN8@buffer_wri
; Line 219
	push	ebp
	mov	ebp, DWORD PTR _b$[esp+8]
	push	esi
	mov	esi, DWORD PTR [ebp+32]
; Line 220
	test	esi, esi
	je	$LN10@buffer_wri
	cmp	DWORD PTR [ebp+36], 0
	je	$LN10@buffer_wri
; Line 223
	push	edi
	push	15					; 0000000fH
	push	ebp
	call	_BIO_clear_flags
; Line 225
	mov	edi, DWORD PTR [esi+4]
	add	esp, 8
	sub	edi, DWORD PTR [esi+28]
	sub	edi, DWORD PTR [esi+24]
; Line 227
	cmp	edi, ebx
	jge	$LN32@buffer_wri
$start$52:
; Line 234
	mov	ecx, DWORD PTR [esi+24]
	test	ecx, ecx
	je	SHORT $LN28@buffer_wri
; Line 235
	test	edi, edi
	jle	SHORT $LL2@buffer_wri
; Line 236
	mov	eax, DWORD PTR [esi+20]
	add	eax, DWORD PTR [esi+28]
	push	edi
	push	DWORD PTR _in$[esp+20]
	add	eax, ecx
	push	eax
	call	_memcpy
; Line 237
	add	DWORD PTR _in$[esp+28], edi
	add	esp, 12					; 0000000cH
; Line 239
	add	DWORD PTR _num$1$[esp+20], edi
	sub	ebx, edi
; Line 240
	add	DWORD PTR [esi+24], edi
$LL2@buffer_wri:
; Line 244
	push	DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+28]
	add	eax, DWORD PTR [esi+20]
	push	eax
	push	DWORD PTR [ebp+36]
	call	_BIO_write
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 246
	test	edi, edi
	jg	SHORT $LN16@buffer_wri
; Line 247
	push	ebp
	call	_BIO_copy_next_retry
	add	esp, 4
; Line 249
	test	edi, edi
	js	$LN29@buffer_wri
; Line 251
	je	$LN30@buffer_wri
$LN16@buffer_wri:
; Line 254
	add	DWORD PTR [esi+28], edi
; Line 255
	sub	DWORD PTR [esi+24], edi
; Line 256
	jne	SHORT $LL2@buffer_wri
$LN28@buffer_wri:
; Line 264
	mov	DWORD PTR [esi+28], 0
; Line 267
	cmp	ebx, DWORD PTR [esi+4]
	jl	SHORT $LN45@buffer_wri
	mov	eax, DWORD PTR _in$[esp+16]
	npad	6
$LL5@buffer_wri:
; Line 268
	push	ebx
	push	eax
	push	DWORD PTR [ebp+36]
	call	_BIO_write
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 269
	test	edi, edi
	jg	SHORT $LN20@buffer_wri
; Line 270
	push	ebp
	call	_BIO_copy_next_retry
	add	esp, 4
; Line 271
	test	edi, edi
	js	SHORT $LN29@buffer_wri
; Line 273
	je	SHORT $LN30@buffer_wri
$LN20@buffer_wri:
; Line 276
	mov	ecx, DWORD PTR _num$1$[esp+20]
; Line 277
	mov	eax, DWORD PTR _in$[esp+16]
	add	ecx, edi
	add	eax, edi
	mov	DWORD PTR _num$1$[esp+20], ecx
	mov	DWORD PTR _in$[esp+16], eax
; Line 278
	sub	ebx, edi
; Line 279
	je	SHORT $LN31@buffer_wri
; Line 267
	cmp	ebx, DWORD PTR [esi+4]
	jge	SHORT $LL5@buffer_wri
$LN45@buffer_wri:
; Line 225
	mov	edi, DWORD PTR [esi+4]
	sub	edi, DWORD PTR [esi+28]
	sub	edi, DWORD PTR [esi+24]
; Line 227
	cmp	edi, ebx
	jl	$start$52
$LN32@buffer_wri:
; Line 228
	mov	eax, DWORD PTR [esi+20]
	add	eax, DWORD PTR [esi+28]
	add	eax, DWORD PTR [esi+24]
	push	ebx
	push	DWORD PTR _in$[esp+20]
	push	eax
	call	_memcpy
; Line 229
	add	DWORD PTR [esi+24], ebx
	add	esp, 12					; 0000000cH
; Line 230
	mov	eax, DWORD PTR _num$1$[esp+20]
	add	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 287
	pop	ecx
	ret	0
$LN30@buffer_wri:
; Line 274
	mov	eax, DWORD PTR _num$1$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 287
	pop	ecx
	ret	0
$LN29@buffer_wri:
; Line 272
	mov	eax, DWORD PTR _num$1$[esp+20]
	test	eax, eax
	cmovg	edi, eax
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 287
	pop	ecx
	ret	0
$LN31@buffer_wri:
	pop	edi
	pop	esi
	pop	ebp
; Line 280
	mov	eax, ecx
	pop	ebx
; Line 287
	pop	ecx
	ret	0
$LN10@buffer_wri:
	pop	esi
	pop	ebp
; Line 221
	xor	eax, eax
	pop	ebx
; Line 287
	pop	ecx
	ret	0
$LN8@buffer_wri:
; Line 218
	xor	eax, eax
	pop	ebx
; Line 287
	pop	ecx
	ret	0
_buffer_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_f_buffer
_TEXT	SEGMENT
_BIO_f_buffer PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bf_buff.c
; Line 89
	mov	eax, OFFSET _methods_buffer
; Line 90
	ret	0
_BIO_f_buffer ENDP
_TEXT	ENDS
END
