; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__nist_p_192 DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0ffffffffH
	DD	0fffffffcH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
__nist_p_192_sqr DD 01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	00H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
__nist_p_224 DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	02H
	DD	00H
	DD	00H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
__nist_p_224_sqr DD 01H
	DD	00H
	DD	00H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
__nist_p_256 DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	00H
	DD	00H
	DD	02H
	DD	0fffffffeH
	DD	0fffffffdH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	02H
	DD	00H
	DD	00H
	DD	03H
	DD	0fffffffdH
	DD	0fffffffcH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	03H
	DD	00H
	DD	00H
	DD	04H
	DD	0fffffffcH
	DD	0fffffffbH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	04H
	DD	00H
	DD	00H
	DD	05H
	DD	0fffffffbH
__nist_p_256_sqr DD 01H
	DD	00H
	DD	00H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffeH
	DD	01H
	DD	0fffffffeH
	DD	01H
	DD	0fffffffeH
	DD	01H
	DD	01H
	DD	0fffffffeH
	DD	02H
	DD	0fffffffeH
__nist_p_384 DD	0ffffffffH
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffeH
	DD	01H
	DD	00H
	DD	0fffffffeH
	DD	0fffffffdH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffdH
	DD	02H
	DD	00H
	DD	0fffffffdH
	DD	0fffffffcH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffcH
	DD	03H
	DD	00H
	DD	0fffffffcH
	DD	0fffffffbH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fffffffbH
	DD	04H
	DD	00H
	DD	0fffffffbH
	DD	0fffffffaH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
__nist_p_384_sqr DD 01H
	DD	0fffffffeH
	DD	00H
	DD	02H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	0fffffffeH
	DD	01H
	DD	00H
	DD	0fffffffeH
	DD	0fffffffdH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
__nist_p_521 DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01ffH
__bignum_nist_p_192 DD FLAT:__nist_p_192
	DD	06H
	DD	06H
	DD	00H
	DD	02H
__nist_p_521_sqr DD 01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0fffffc00H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	03ffffH
__bignum_nist_p_224 DD FLAT:__nist_p_224
	DD	07H
	DD	07H
	DD	00H
	DD	02H
__bignum_nist_p_256 DD FLAT:__nist_p_256
	DD	08H
	DD	08H
	DD	00H
	DD	02H
__bignum_nist_p_384 DD FLAT:__nist_p_384
	DD	0cH
	DD	0cH
	DD	00H
	DD	02H
__bignum_nist_p_521 DD FLAT:__nist_p_521
	DD	011H
	DD	011H
	DD	00H
	DD	02H
?_bignum_nist_p_192_sqr@?1??BN_nist_mod_192@@9@9 DD FLAT:__nist_p_192_sqr ; `BN_nist_mod_192'::`2'::_bignum_nist_p_192_sqr
	DD	0cH
	DD	0cH
	DD	00H
	DD	02H
?_bignum_nist_p_224_sqr@?1??BN_nist_mod_224@@9@9 DD FLAT:__nist_p_224_sqr ; `BN_nist_mod_224'::`2'::_bignum_nist_p_224_sqr
	DD	0eH
	DD	0eH
	DD	00H
	DD	02H
?_bignum_nist_p_256_sqr@?1??BN_nist_mod_256@@9@9 DD FLAT:__nist_p_256_sqr ; `BN_nist_mod_256'::`2'::_bignum_nist_p_256_sqr
	DD	010H
	DD	010H
	DD	00H
	DD	02H
?_bignum_nist_p_384_sqr@?1??BN_nist_mod_384@@9@9 DD FLAT:__nist_p_384_sqr ; `BN_nist_mod_384'::`2'::_bignum_nist_p_384_sqr
	DD	018H
	DD	018H
	DD	00H
	DD	02H
?_bignum_nist_p_521_sqr@?1??BN_nist_mod_521@@9@9 DD FLAT:__nist_p_521_sqr ; `BN_nist_mod_521'::`2'::_bignum_nist_p_521_sqr
	DD	021H
	DD	021H
	DD	00H
	DD	02H
CONST	ENDS
PUBLIC	_BN_nist_mod_192
PUBLIC	_BN_nist_mod_224
PUBLIC	_BN_nist_mod_256
PUBLIC	_BN_nist_mod_384
PUBLIC	_BN_nist_mod_521
PUBLIC	_BN_get0_nist_prime_192
PUBLIC	_BN_get0_nist_prime_224
PUBLIC	_BN_get0_nist_prime_256
PUBLIC	_BN_get0_nist_prime_384
PUBLIC	_BN_get0_nist_prime_521
EXTRN	_BN_copy:PROC
EXTRN	_BN_nnmod:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_bn_add_words:PROC
EXTRN	_bn_sub_words:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _nist_cp_bn
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_top$ = 16						; size = 4
_nist_cp_bn PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 318
	mov	edx, DWORD PTR _top$[esp-4]
	test	edx, edx
	jle	SHORT $LN3@nist_cp_bn
	mov	eax, DWORD PTR _dst$[esp-4]
	push	esi
	mov	esi, DWORD PTR _src$[esp]
	sub	esi, eax
$LL8@nist_cp_bn:
; Line 319
	mov	ecx, DWORD PTR [esi+eax]
	lea	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax-4], ecx
	sub	edx, 1
	jne	SHORT $LL8@nist_cp_bn
	pop	esi
$LN3@nist_cp_bn:
; Line 320
	ret	0
_nist_cp_bn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _nist_cp_bn_0
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_top$ = 16						; size = 4
_max$ = 20						; size = 4
_nist_cp_bn_0 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 308
	mov	edx, DWORD PTR _top$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _dst$[esp]
	push	edi
	xor	edi, edi
	test	edx, edx
	jle	SHORT $LN3@nist_cp_bn
	push	esi
	mov	esi, DWORD PTR _src$[esp+8]
	mov	eax, ebx
	sub	esi, ebx
	mov	edi, edx
	npad	5
$LL13@nist_cp_bn:
; Line 309
	mov	ecx, DWORD PTR [esi+eax]
	lea	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax-4], ecx
	sub	edx, 1
	jne	SHORT $LL13@nist_cp_bn
	pop	esi
$LN3@nist_cp_bn:
; Line 310
	mov	ecx, DWORD PTR _max$[esp+4]
	cmp	edi, ecx
	jge	SHORT $LN6@nist_cp_bn
; Line 311
	sub	ecx, edi
	xor	eax, eax
	lea	edi, DWORD PTR [ebx+edi*4]
	rep stosd
$LN6@nist_cp_bn:
; Line 312
	pop	edi
	pop	ebx
	ret	0
_nist_cp_bn_0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get0_nist_prime_521
_TEXT	SEGMENT
_BN_get0_nist_prime_521 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 298
	mov	eax, OFFSET __bignum_nist_p_521
; Line 299
	ret	0
_BN_get0_nist_prime_521 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get0_nist_prime_384
_TEXT	SEGMENT
_BN_get0_nist_prime_384 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 293
	mov	eax, OFFSET __bignum_nist_p_384
; Line 294
	ret	0
_BN_get0_nist_prime_384 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get0_nist_prime_256
_TEXT	SEGMENT
_BN_get0_nist_prime_256 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 288
	mov	eax, OFFSET __bignum_nist_p_256
; Line 289
	ret	0
_BN_get0_nist_prime_256 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get0_nist_prime_224
_TEXT	SEGMENT
_BN_get0_nist_prime_224 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 283
	mov	eax, OFFSET __bignum_nist_p_224
; Line 284
	ret	0
_BN_get0_nist_prime_224 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_get0_nist_prime_192
_TEXT	SEGMENT
_BN_get0_nist_prime_192 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 278
	mov	eax, OFFSET __bignum_nist_p_192
; Line 279
	ret	0
_BN_get0_nist_prime_192 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_nist_mod_521
_TEXT	SEGMENT
_top$1$ = -76						; size = 4
_t_d$ = -72						; size = 68
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_field$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_nist_mod_521 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 1206
	mov	eax, 76					; 0000004cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+76], eax
	push	ebx
	mov	ebx, DWORD PTR _ctx$[esp+76]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _a$[esp+84]
	push	edi
	mov	edi, DWORD PTR _r$[esp+88]
; Line 1219
	cmp	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR _top$1$[esp+92], eax
	jne	$LN9@BN_nist_mo
	push	OFFSET ?_bignum_nist_p_521_sqr@?1??BN_nist_mod_521@@9@9
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN9@BN_nist_mo
; Line 1222
	push	esi
	push	OFFSET __bignum_nist_p_521
	call	_BN_ucmp
	add	esp, 8
; Line 1223
	test	eax, eax
	jne	SHORT $LN56@BN_nist_mo
; Line 1224
	push	eax
	push	edi
	call	_BN_set_word
	add	esp, 8
$LN57@BN_nist_mo:
; Line 1225
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 1262
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN56@BN_nist_mo:
; Line 1226
	jle	SHORT $LN12@BN_nist_mo
; Line 1227
	cmp	edi, esi
	je	SHORT $LN57@BN_nist_mo
	push	esi
	push	edi
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1262
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN12@BN_nist_mo:
; Line 1229
	cmp	edi, esi
	je	SHORT $LN13@BN_nist_mo
; Line 1230
	cmp	DWORD PTR [edi+8], 17			; 00000011H
	jl	SHORT $LN21@BN_nist_mo
	mov	eax, edi
	jmp	SHORT $LN22@BN_nist_mo
$LN21@BN_nist_mo:
	push	17					; 00000011H
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN22@BN_nist_mo:
	test	eax, eax
	jne	SHORT $LN15@BN_nist_mo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1262
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN15@BN_nist_mo:
; Line 1232
	mov	esi, DWORD PTR [edi]
; Line 318
	mov	ebx, ebp
; Line 1232
	mov	ecx, esi
; Line 318
	sub	ebx, esi
; Line 1232
	mov	edx, 17					; 00000011H
	npad	8
$LL42@BN_nist_mo:
; Line 319
	mov	eax, DWORD PTR [ebx+ecx]
	lea	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx-4], eax
	sub	edx, 1
	jne	SHORT $LL42@BN_nist_mo
; Line 1234
	jmp	SHORT $LN14@BN_nist_mo
$LN13@BN_nist_mo:
; Line 1235
	mov	esi, ebp
$LN14@BN_nist_mo:
; Line 1238
	mov	eax, DWORD PTR _top$1$[esp+92]
	add	eax, -16				; fffffff0H
	push	17					; 00000011H
	push	eax
	lea	eax, DWORD PTR [ebp+64]
	push	eax
	lea	eax, DWORD PTR _t_d$[esp+104]
	push	eax
	call	_nist_cp_bn_0
; Line 1241
	mov	edx, DWORD PTR _t_d$[esp+108]
	add	esp, 16					; 00000010H
	xor	ecx, ecx
$LL44@BN_nist_mo:
; Line 1242
	mov	ebx, DWORD PTR _t_d$[esp+ecx*4+96]
	mov	eax, ebx
	shr	edx, 9
	shl	eax, 23					; 00000017H
	or	eax, edx
; Line 1244
	mov	edx, ebx
	mov	DWORD PTR _t_d$[esp+ecx*4+92], eax
	inc	ecx
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL44@BN_nist_mo
; Line 1250
	push	17					; 00000011H
	lea	eax, DWORD PTR _t_d$[esp+96]
	shr	ebx, 9
	push	eax
	push	esi
	mov	DWORD PTR _t_d$[esp+ecx*4+104], ebx
	and	DWORD PTR [esi+ecx*4], 511		; 000001ffH
	push	esi
	call	_bn_add_words
; Line 1251
	push	17					; 00000011H
	push	OFFSET __nist_p_521
	lea	eax, DWORD PTR _t_d$[esp+116]
	push	esi
	push	eax
	call	_bn_sub_words
	neg	eax
; Line 1255
	lea	ecx, DWORD PTR _t_d$[esp+124]
	mov	edx, eax
	add	esp, 32					; 00000020H
	not	edx
	and	eax, esi
	and	edx, ecx
	mov	ecx, 17					; 00000011H
	or	edx, eax
; Line 318
	sub	edx, esi
$LL46@BN_nist_mo:
; Line 319
	mov	eax, DWORD PTR [edx+esi]
	lea	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi-4], eax
	sub	ecx, 1
	jne	SHORT $LL46@BN_nist_mo
; Line 1258
	lea	edx, DWORD PTR [ecx+17]
	mov	DWORD PTR [edi+4], 17			; 00000011H
; Line 1259
	mov	ecx, DWORD PTR [edi]
	add	ecx, 64					; 00000040H
$LL7@BN_nist_mo:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN37@BN_nist_mo
	dec	edx
	test	edx, edx
	jg	SHORT $LL7@BN_nist_mo
$LN37@BN_nist_mo:
	mov	DWORD PTR [edi+4], edx
; Line 1261
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1262
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN9@BN_nist_mo:
; Line 1220
	push	ebx
	push	OFFSET __bignum_nist_p_521
	push	esi
	push	edi
	call	_BN_nnmod
; Line 1262
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
_BN_nist_mod_521 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_nist_mod_384
_TEXT	SEGMENT
_acc$17$ = -108						; size = 4
_top$1$ = -108						; size = 4
_r$GSCopy$1$ = -104					; size = 4
_buf$ = -100						; size = 48
_c_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_field$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_nist_mod_384 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 937
	mov	eax, 108				; 0000006cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+108], eax
	push	ebx
	mov	ebx, DWORD PTR _r$[esp+108]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _a$[esp+116]
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+120]
	mov	DWORD PTR _r$GSCopy$1$[esp+124], ebx
; Line 961
	cmp	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR _top$1$[esp+124], eax
	jne	$LN6@BN_nist_mo
	push	OFFSET ?_bignum_nist_p_384_sqr@?1??BN_nist_mod_384@@9@9
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN6@BN_nist_mo
; Line 964
	push	esi
	push	OFFSET __bignum_nist_p_384
	call	_BN_ucmp
	add	esp, 8
; Line 965
	test	eax, eax
	jne	SHORT $LN51@BN_nist_mo
; Line 966
	push	eax
	push	ebx
	call	_BN_set_word
	add	esp, 8
$LN53@BN_nist_mo:
; Line 967
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 1198
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	ret	0
$LN51@BN_nist_mo:
; Line 968
	jle	SHORT $LN9@BN_nist_mo
; Line 969
	cmp	ebx, esi
	je	SHORT $LN53@BN_nist_mo
	push	esi
	push	ebx
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1198
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	ret	0
$LN9@BN_nist_mo:
; Line 971
	cmp	ebx, esi
	je	SHORT $LN10@BN_nist_mo
; Line 972
	cmp	DWORD PTR [ebx+8], 12			; 0000000cH
	jl	SHORT $LN22@BN_nist_mo
	mov	eax, ebx
	jmp	SHORT $LN23@BN_nist_mo
$LN22@BN_nist_mo:
	push	12					; 0000000cH
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN23@BN_nist_mo:
	test	eax, eax
	jne	SHORT $LN12@BN_nist_mo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1198
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	ret	0
$LN12@BN_nist_mo:
; Line 974
	mov	edi, DWORD PTR [ebx]
; Line 318
	mov	esi, ebp
; Line 974
	mov	ecx, edi
; Line 318
	sub	esi, edi
; Line 974
	mov	edx, 12					; 0000000cH
$LL41@BN_nist_mo:
; Line 319
	mov	eax, DWORD PTR [esi+ecx]
	lea	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx-4], eax
	sub	edx, 1
	jne	SHORT $LL41@BN_nist_mo
; Line 976
	jmp	SHORT $LN11@BN_nist_mo
$LN10@BN_nist_mo:
; Line 977
	mov	edi, ebp
$LN11@BN_nist_mo:
; Line 979
	mov	eax, DWORD PTR _top$1$[esp+124]
	add	eax, -12				; fffffff4H
	push	12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR [ebp+48]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+136]
	push	eax
	call	_nist_cp_bn_0
; Line 992
	mov	ebp, DWORD PTR _buf$[esp+176]
	add	esp, 16					; 00000010H
	sub	ebp, DWORD PTR _buf$[esp+168]
	mov	edx, 0
	mov	esi, DWORD PTR _buf$[esp+124]
	sbb	edx, edx
	mov	eax, DWORD PTR [edi]
	xor	ecx, ecx
; Line 997
	mov	ebx, DWORD PTR _buf$[esp+128]
	add	eax, esi
	mov	DWORD PTR _acc$17$[esp+124], edx
	adc	ecx, ecx
	add	eax, DWORD PTR _buf$[esp+156]
	adc	ecx, 0
	add	eax, ebp
	mov	DWORD PTR [edi], eax
	adc	ecx, edx
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 1001
	add	ecx, DWORD PTR [edi+4]
	adc	eax, 0
	sub	ecx, esi
	sbb	eax, 0
	sub	ecx, DWORD PTR _buf$[esp+156]
	sbb	eax, 0
	add	ecx, ebx
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+164]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+168]
; Line 1002
	mov	DWORD PTR [edi+4], ecx
	adc	eax, 0
; Line 1003
	mov	edx, eax
	sar	edx, 31					; 0000001fH
; Line 1009
	sub	eax, ebx
	sbb	edx, 0
	sub	eax, DWORD PTR _buf$[esp+160]
	sbb	edx, 0
	add	eax, DWORD PTR [edi+8]
	adc	edx, 0
	add	eax, DWORD PTR _buf$[esp+132]
	adc	edx, 0
	add	eax, DWORD PTR _buf$[esp+168]
; Line 1010
	mov	DWORD PTR [edi+8], eax
	adc	edx, 0
; Line 1011
	mov	ecx, edx
	sar	ecx, 31					; 0000001fH
; Line 1020
	sub	edx, DWORD PTR _buf$[esp+132]
	sbb	ecx, 0
	sub	edx, DWORD PTR _buf$[esp+164]
	sbb	ecx, 0
	add	edx, DWORD PTR [edi+12]
	adc	ecx, 0
	add	edx, DWORD PTR _buf$[esp+136]
	adc	ecx, 0
	add	edx, esi
	adc	ecx, 0
	add	edx, DWORD PTR _buf$[esp+156]
	adc	ecx, 0
	add	edx, ebp
; Line 1021
	mov	DWORD PTR [edi+12], edx
	adc	ecx, DWORD PTR _acc$17$[esp+124]
; Line 1034
	mov	edx, DWORD PTR _acc$17$[esp+124]
	mov	eax, ecx
	shld	edx, ebp, 1
	sar	eax, 31					; 0000001fH
	add	ebp, ebp
	add	ebp, ecx
	adc	edx, eax
	sub	ebp, DWORD PTR _buf$[esp+136]
	sbb	edx, 0
	add	ebp, DWORD PTR [edi+16]
	adc	edx, 0
; Line 1046
	mov	ecx, DWORD PTR _buf$[esp+164]
	add	ebp, DWORD PTR _buf$[esp+140]
	adc	edx, 0
	add	ebp, ebx
	adc	edx, 0
	add	ebp, DWORD PTR _buf$[esp+164]
	adc	edx, 0
	add	ebp, esi
	adc	edx, 0
	add	ebp, DWORD PTR _buf$[esp+156]
	mov	DWORD PTR [edi+16], ebp
	adc	edx, 0
	mov	ebp, DWORD PTR _buf$[esp+144]
	mov	DWORD PTR _acc$17$[esp+124], edx
	xor	edx, edx
	shld	edx, ecx, 1
	mov	eax, DWORD PTR _acc$17$[esp+124]
	add	ecx, ecx
	sar	eax, 31					; 0000001fH
	add	ecx, DWORD PTR _acc$17$[esp+124]
	adc	edx, eax
	sub	ecx, DWORD PTR _buf$[esp+140]
	sbb	edx, 0
	add	ecx, DWORD PTR [edi+20]
	adc	edx, 0
	add	ecx, ebp
	adc	edx, 0
	add	ecx, DWORD PTR _buf$[esp+132]
	adc	edx, 0
	add	ecx, ebx
; Line 1053
	mov	ebx, DWORD PTR _buf$[esp+148]
	adc	edx, 0
	add	ecx, DWORD PTR _buf$[esp+160]
	adc	edx, 0
	add	ecx, DWORD PTR _buf$[esp+168]
	mov	DWORD PTR [edi+20], ecx
	adc	edx, 0
; Line 1057
	mov	ecx, DWORD PTR _buf$[esp+168]
	xor	esi, esi
	mov	eax, edx
	shld	esi, ecx, 1
	sar	eax, 31					; 0000001fH
	add	ecx, ecx
	add	ecx, edx
; Line 1062
	mov	edx, DWORD PTR _buf$[esp+152]
	adc	esi, eax
	sub	ecx, ebp
	sbb	esi, 0
	add	ecx, DWORD PTR [edi+24]
	adc	esi, 0
	add	ecx, ebx
	adc	esi, 0
	add	ecx, DWORD PTR _buf$[esp+136]
	adc	esi, 0
	add	ecx, DWORD PTR _buf$[esp+132]
	adc	esi, 0
	add	ecx, DWORD PTR _buf$[esp+164]
	mov	DWORD PTR [edi+24], ecx
	adc	esi, 0
	mov	ecx, esi
	sar	ecx, 31					; 0000001fH
; Line 1066
	add	esi, DWORD PTR [edi+28]
	adc	ecx, 0
	sub	esi, ebx
	sbb	ecx, 0
	add	esi, edx
	adc	ecx, 0
	add	esi, DWORD PTR _buf$[esp+140]
	adc	ecx, 0
	add	esi, DWORD PTR _buf$[esp+136]
	adc	ecx, 0
	add	esi, DWORD PTR _buf$[esp+168]
; Line 1067
	mov	DWORD PTR [edi+28], esi
	adc	ecx, 0
; Line 1068
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 1074
	sub	ecx, edx
	sbb	eax, 0
	add	ecx, DWORD PTR [edi+32]
	adc	eax, 0
	add	ecx, ebp
	mov	esi, DWORD PTR _buf$[esp+156]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+140]
	adc	eax, 0
	add	ecx, esi
; Line 1075
	mov	DWORD PTR [edi+32], ecx
	adc	eax, 0
; Line 1076
	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
; Line 1082
	sub	eax, esi
	sbb	ecx, 0
	add	eax, DWORD PTR [edi+36]
	adc	ecx, 0
	add	eax, ebx
	adc	ecx, 0
	add	eax, ebp
	adc	ecx, 0
	add	eax, DWORD PTR _buf$[esp+160]
; Line 1083
	mov	DWORD PTR [edi+36], eax
	adc	ecx, 0
; Line 1084
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 1090
	sub	ecx, DWORD PTR _buf$[esp+160]
	sbb	eax, 0
	add	ecx, DWORD PTR [edi+40]
	adc	eax, 0
	add	ecx, edx
	adc	eax, 0
	add	ecx, ebx
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+164]
; Line 1091
	mov	DWORD PTR [edi+40], ecx
	adc	eax, 0
; Line 1092
	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
; Line 1098
	add	eax, DWORD PTR [edi+44]
	adc	ecx, 0
	sub	eax, DWORD PTR _buf$[esp+164]
	sbb	ecx, 0
	add	eax, edx
	adc	ecx, 0
	add	eax, esi
; Line 1172
	mov	esi, OFFSET _bn_sub_words
	adc	ecx, 0
	add	eax, DWORD PTR _buf$[esp+168]
	mov	DWORD PTR [edi+44], eax
	adc	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 1173
	test	ecx, ecx
	jle	SHORT $LN52@BN_nist_mo
; Line 1174
	lea	eax, DWORD PTR [ecx+ecx*2]
	shl	eax, 4
	push	12					; 0000000cH
	lea	eax, DWORD PTR __nist_p_384[eax-48]
	push	eax
	push	edi
	push	edi
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	mov	ebx, eax
	jmp	SHORT $LN16@BN_nist_mo
$LN52@BN_nist_mo:
; Line 1177
	jns	SHORT $LN15@BN_nist_mo
; Line 1178
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	eax, OFFSET __nist_p_384
	add	ecx, 3
	shl	ecx, 4
	push	12					; 0000000cH
	sub	eax, ecx
	push	eax
	push	edi
	push	edi
	call	_bn_add_words
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 1181
	neg	eax
; Line 1182
	mov	esi, eax
	and	eax, OFFSET _bn_sub_words
	not	esi
	and	esi, OFFSET _bn_add_words
	or	esi, eax
; Line 1184
	jmp	SHORT $LN16@BN_nist_mo
$LN15@BN_nist_mo:
; Line 1185
	mov	ebx, 1
$LN16@BN_nist_mo:
; Line 1187
	push	12					; 0000000cH
	push	OFFSET __nist_p_384
	lea	eax, DWORD PTR _c_d$[esp+132]
	push	edi
	push	eax
	call	esi
	neg	eax
; Line 1191
	lea	edx, DWORD PTR _c_d$[esp+140]
	neg	ebx
	add	esp, 16					; 00000010H
	and	eax, ebx
	mov	ecx, eax
	and	eax, edi
	not	ecx
	and	ecx, edx
	mov	edx, 12					; 0000000cH
	or	ecx, eax
; Line 318
	sub	ecx, edi
	npad	8
$LL43@BN_nist_mo:
; Line 319
	mov	eax, DWORD PTR [ecx+edi]
	lea	edi, DWORD PTR [edi+4]
	mov	DWORD PTR [edi-4], eax
	sub	edx, 1
	jne	SHORT $LL43@BN_nist_mo
; Line 1195
	mov	esi, DWORD PTR _r$GSCopy$1$[esp+124]
	mov	edx, 12					; 0000000cH
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi+4], 12			; 0000000cH
	add	ecx, 44					; 0000002cH
$LL4@BN_nist_mo:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN37@BN_nist_mo
	dec	edx
	test	edx, edx
	jg	SHORT $LL4@BN_nist_mo
$LN37@BN_nist_mo:
	pop	edi
	mov	DWORD PTR [esi+4], edx
; Line 1197
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	ebx
; Line 1198
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	ret	0
$LN6@BN_nist_mo:
; Line 962
	push	edi
	push	OFFSET __bignum_nist_p_384
	push	esi
	push	ebx
	call	_BN_nnmod
; Line 1198
	mov	ecx, DWORD PTR __$ArrayPad$[esp+140]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	ret	0
_BN_nist_mod_384 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_nist_mod_256
_TEXT	SEGMENT
_top$1$ = -76						; size = 4
_carry$1$ = -76						; size = 4
_r$GSCopy$1$ = -72					; size = 4
_buf$ = -68						; size = 32
_c_d$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_field$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_nist_mod_256 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 691
	mov	eax, 76					; 0000004cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+76], eax
	push	ebx
	mov	ebx, DWORD PTR _r$[esp+76]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _a$[esp+84]
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+88]
	mov	DWORD PTR _r$GSCopy$1$[esp+92], ebx
; Line 715
	cmp	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR _top$1$[esp+92], eax
	jne	$LN6@BN_nist_mo
	push	OFFSET ?_bignum_nist_p_256_sqr@?1??BN_nist_mod_256@@9@9
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN6@BN_nist_mo
; Line 718
	push	esi
	push	OFFSET __bignum_nist_p_256
	call	_BN_ucmp
	add	esp, 8
; Line 719
	test	eax, eax
	jne	SHORT $LN63@BN_nist_mo
; Line 720
	push	eax
	push	ebx
	call	_BN_set_word
	add	esp, 8
$LN65@BN_nist_mo:
; Line 721
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 917
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN63@BN_nist_mo:
; Line 722
	jle	SHORT $LN9@BN_nist_mo
; Line 723
	cmp	ebx, esi
	je	SHORT $LN65@BN_nist_mo
	push	esi
	push	ebx
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 917
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN9@BN_nist_mo:
; Line 725
	cmp	ebx, esi
	je	SHORT $LN10@BN_nist_mo
; Line 726
	cmp	DWORD PTR [ebx+8], 8
	jl	SHORT $LN22@BN_nist_mo
	mov	eax, ebx
	jmp	SHORT $LN23@BN_nist_mo
$LN22@BN_nist_mo:
	push	8
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN23@BN_nist_mo:
	test	eax, eax
	jne	SHORT $LN12@BN_nist_mo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 917
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN12@BN_nist_mo:
; Line 728
	mov	edi, DWORD PTR [ebx]
; Line 319
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [ebp+16]
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR [ebp+20]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [ebp+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR [edi+28], eax
; Line 730
	jmp	SHORT $LN11@BN_nist_mo
$LN10@BN_nist_mo:
; Line 731
	mov	edi, ebp
$LN11@BN_nist_mo:
; Line 733
	mov	eax, DWORD PTR _top$1$[esp+92]
	add	eax, -8					; fffffff8H
	push	8
	push	eax
	lea	eax, DWORD PTR [ebp+32]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+104]
	push	eax
	call	_nist_cp_bn_0
; Line 748
	xor	ebx, ebx
	mov	eax, DWORD PTR [edi]
	xor	ecx, ecx
	mov	ebp, DWORD PTR _buf$[esp+132]
	add	esp, 16					; 00000010H
; Line 779
	mov	esi, ebx
	sub	eax, DWORD PTR _buf$[esp+104]
	sbb	ecx, ecx
	sub	eax, DWORD PTR _buf$[esp+108]
	sbb	ecx, ebx
	sub	eax, DWORD PTR _buf$[esp+112]
	sbb	ecx, ebx
	sub	eax, ebp
	sbb	ecx, ebx
	add	eax, DWORD PTR _buf$[esp+92]
	adc	ecx, ebx
	add	eax, DWORD PTR _buf$[esp+96]
	mov	DWORD PTR [edi], eax
	adc	ecx, ebx
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
	add	ecx, DWORD PTR [edi+4]
	adc	eax, ebx
	sub	ecx, DWORD PTR _buf$[esp+120]
	sbb	eax, ebx
	sub	ecx, DWORD PTR _buf$[esp+108]
	sbb	eax, ebx
	sub	ecx, DWORD PTR _buf$[esp+112]
	sbb	eax, ebx
	sub	ecx, ebp
	sbb	eax, ebx
	add	ecx, DWORD PTR _buf$[esp+100]
	adc	eax, ebx
	add	ecx, DWORD PTR _buf$[esp+96]
	mov	DWORD PTR [edi+4], ecx
	adc	eax, ebx
	mov	ecx, DWORD PTR _buf$[esp+104]
	mov	edx, eax
	sar	edx, 31					; 0000001fH
	sub	eax, DWORD PTR _buf$[esp+120]
	sbb	edx, ebx
	sub	eax, DWORD PTR _buf$[esp+112]
	sbb	edx, ebx
	sub	eax, ebp
	sbb	edx, ebx
	add	eax, DWORD PTR [edi+8]
	adc	edx, ebx
	add	eax, DWORD PTR _buf$[esp+100]
	adc	edx, ebx
	add	eax, ecx
	mov	DWORD PTR [edi+8], eax
	adc	edx, ebx
	add	ecx, DWORD PTR _buf$[esp+108]
	mov	eax, edx
	adc	esi, ebx
	sar	eax, 31					; 0000001fH
	shld	esi, ecx, 1
	add	ecx, ecx
	add	ecx, edx
	adc	esi, eax
	sub	ecx, DWORD PTR _buf$[esp+120]
	sbb	esi, ebx
	sub	ecx, DWORD PTR _buf$[esp+92]
	sbb	esi, ebx
	sub	ecx, DWORD PTR _buf$[esp+96]
	sbb	esi, ebx
	add	ecx, DWORD PTR [edi+12]
	adc	esi, ebx
	add	ecx, DWORD PTR _buf$[esp+112]
; Line 780
	mov	DWORD PTR [edi+12], ecx
; Line 790
	mov	ecx, DWORD PTR _buf$[esp+108]
	adc	esi, ebx
	add	ecx, DWORD PTR _buf$[esp+112]
	mov	edx, ebx
	mov	eax, esi
	adc	edx, edx
	sar	eax, 31					; 0000001fH
	shld	edx, ecx, 1
	add	ecx, ecx
	add	ecx, esi
; Line 801
	mov	esi, ebx
	adc	edx, eax
	sub	ecx, DWORD PTR _buf$[esp+100]
	sbb	edx, ebx
	sub	ecx, DWORD PTR _buf$[esp+96]
	sbb	edx, ebx
	add	ecx, DWORD PTR [edi+16]
	adc	edx, ebx
	add	ecx, ebp
	mov	DWORD PTR [edi+16], ecx
	adc	edx, ebx
	mov	ecx, DWORD PTR _buf$[esp+112]
	add	ecx, ebp
	mov	eax, edx
	adc	esi, ebx
	sar	eax, 31					; 0000001fH
	shld	esi, ecx, 1
	add	ecx, ecx
	add	ecx, edx
; Line 813
	mov	edx, DWORD PTR _buf$[esp+120]
	adc	esi, eax
	add	ecx, DWORD PTR [edi+20]
	mov	eax, ebp
	adc	esi, ebx
	sub	ecx, DWORD PTR _buf$[esp+100]
	sbb	esi, ebx
	sub	ecx, DWORD PTR _buf$[esp+104]
	sbb	esi, ebx
	add	ecx, DWORD PTR _buf$[esp+120]
	mov	DWORD PTR [edi+20], ecx
	adc	esi, ebx
	xor	ecx, ecx
	shld	ecx, eax, 1
	shld	ebx, edx, 1
	add	eax, eax
	add	edx, edx
	add	ebp, eax
	mov	eax, 0
	adc	eax, ecx
	add	edx, ebp
	adc	ebx, eax
	mov	eax, esi
	sar	eax, 31					; 0000001fH
	add	edx, esi
	adc	ebx, eax
	sub	edx, DWORD PTR _buf$[esp+92]
	sbb	ebx, 0
	sub	edx, DWORD PTR _buf$[esp+96]
	sbb	ebx, 0
	add	edx, DWORD PTR [edi+24]
	adc	ebx, 0
	add	edx, DWORD PTR _buf$[esp+112]
; Line 814
	mov	DWORD PTR [edi+24], edx
; Line 825
	mov	edx, DWORD PTR _buf$[esp+120]
	adc	ebx, 0
	xor	ecx, ecx
	mov	eax, edx
	shld	ecx, eax, 1
	add	eax, eax
	add	edx, eax
	mov	eax, 0
	adc	eax, ecx
	mov	DWORD PTR _carry$1$[esp+92], eax
	mov	eax, ebx
	mov	ecx, DWORD PTR _carry$1$[esp+92]
	sar	eax, 31					; 0000001fH
	add	edx, ebx
	adc	ecx, eax
	sub	edx, DWORD PTR _buf$[esp+100]
	sbb	ecx, 0
	sub	edx, DWORD PTR _buf$[esp+104]
	sbb	ecx, 0
	sub	edx, DWORD PTR _buf$[esp+108]
	sbb	ecx, 0
; Line 891
	mov	esi, OFFSET _bn_sub_words
	sub	edx, DWORD PTR _buf$[esp+112]
	sbb	ecx, 0
	add	edx, DWORD PTR [edi+28]
	adc	ecx, 0
	add	edx, DWORD PTR _buf$[esp+92]
	mov	DWORD PTR [edi+28], edx
	adc	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 892
	test	ecx, ecx
	jle	SHORT $LN64@BN_nist_mo
; Line 893
	shl	ecx, 5
	push	8
	lea	eax, DWORD PTR __nist_p_256[ecx-32]
	push	eax
	push	edi
	push	edi
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	mov	ebx, eax
	jmp	SHORT $LN16@BN_nist_mo
$LN64@BN_nist_mo:
; Line 896
	jns	SHORT $LN15@BN_nist_mo
; Line 897
	inc	ecx
	mov	eax, OFFSET __nist_p_256
	shl	ecx, 5
	push	8
	sub	eax, ecx
	push	eax
	push	edi
	push	edi
	call	_bn_add_words
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 900
	neg	eax
; Line 901
	mov	esi, eax
	and	eax, OFFSET _bn_sub_words
	not	esi
	and	esi, OFFSET _bn_add_words
	or	esi, eax
; Line 903
	jmp	SHORT $LN16@BN_nist_mo
$LN15@BN_nist_mo:
; Line 904
	mov	ebx, 1
$LN16@BN_nist_mo:
; Line 906
	push	8
	push	OFFSET __nist_p_256
	lea	eax, DWORD PTR _c_d$[esp+100]
	push	edi
	push	eax
	call	esi
	neg	eax
; Line 913
	mov	esi, DWORD PTR _r$GSCopy$1$[esp+108]
	neg	ebx
	lea	edx, DWORD PTR _c_d$[esp+108]
	and	eax, ebx
	add	esp, 16					; 00000010H
	mov	ecx, eax
	and	eax, edi
	not	ecx
	and	ecx, edx
; Line 914
	mov	edx, 8
	or	ecx, eax
; Line 319
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edi+28], eax
; Line 914
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi+4], 8
	add	ecx, 28					; 0000001cH
$LL4@BN_nist_mo:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN37@BN_nist_mo
	dec	edx
	test	edx, edx
	jg	SHORT $LL4@BN_nist_mo
$LN37@BN_nist_mo:
	pop	edi
	mov	DWORD PTR [esi+4], edx
; Line 916
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	ebx
; Line 917
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
$LN6@BN_nist_mo:
; Line 716
	push	edi
	push	OFFSET __bignum_nist_p_256
	push	esi
	push	ebx
	call	_BN_nnmod
; Line 917
	mov	ecx, DWORD PTR __$ArrayPad$[esp+108]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
_BN_nist_mod_256 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_nist_mod_224
_TEXT	SEGMENT
_top$1$ = -68						; size = 4
_r$GSCopy$1$ = -64					; size = 4
_buf$ = -60						; size = 28
_c_d$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_field$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_nist_mod_224 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 510
	mov	eax, 68					; 00000044H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+68], eax
	push	ebx
	mov	ebx, DWORD PTR _r$[esp+68]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _a$[esp+76]
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+80]
	mov	DWORD PTR _r$GSCopy$1$[esp+84], ebx
; Line 534
	cmp	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR _top$1$[esp+84], eax
	jne	$LN6@BN_nist_mo
	push	OFFSET ?_bignum_nist_p_224_sqr@?1??BN_nist_mod_224@@9@9
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN6@BN_nist_mo
; Line 537
	push	esi
	push	OFFSET __bignum_nist_p_224
	call	_BN_ucmp
	add	esp, 8
; Line 538
	test	eax, eax
	jne	SHORT $LN61@BN_nist_mo
; Line 539
	push	eax
	push	ebx
	call	_BN_set_word
	add	esp, 8
$LN63@BN_nist_mo:
; Line 540
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 675
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN61@BN_nist_mo:
; Line 541
	jle	SHORT $LN9@BN_nist_mo
; Line 542
	cmp	ebx, esi
	je	SHORT $LN63@BN_nist_mo
	push	esi
	push	ebx
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 675
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN9@BN_nist_mo:
; Line 544
	cmp	ebx, esi
	je	SHORT $LN10@BN_nist_mo
; Line 545
	cmp	DWORD PTR [ebx+8], 7
	jl	SHORT $LN22@BN_nist_mo
	mov	eax, ebx
	jmp	SHORT $LN23@BN_nist_mo
$LN22@BN_nist_mo:
	push	7
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN23@BN_nist_mo:
	test	eax, eax
	jne	SHORT $LN12@BN_nist_mo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 675
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN12@BN_nist_mo:
; Line 547
	mov	edi, DWORD PTR [ebx]
; Line 319
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [ebp+16]
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR [ebp+20]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [ebp+24]
	mov	DWORD PTR [edi+24], eax
; Line 549
	jmp	SHORT $LN11@BN_nist_mo
$LN10@BN_nist_mo:
; Line 550
	mov	edi, ebp
$LN11@BN_nist_mo:
; Line 561
	mov	eax, DWORD PTR _top$1$[esp+84]
	add	eax, -7					; fffffff9H
	push	7
	push	eax
	lea	eax, DWORD PTR [ebp+28]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+96]
	push	eax
	call	_nist_cp_bn_0
; Line 571
	xor	ecx, ecx
	mov	eax, DWORD PTR [edi]
	add	esp, 16					; 00000010H
; Line 638
	mov	esi, OFFSET _bn_sub_words
	sub	eax, DWORD PTR _buf$[esp+84]
	sbb	ecx, ecx
	sub	eax, DWORD PTR _buf$[esp+100]
	mov	DWORD PTR [edi], eax
	sbb	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
	add	ecx, DWORD PTR [edi+4]
	adc	eax, 0
	sub	ecx, DWORD PTR _buf$[esp+88]
	sbb	eax, 0
	sub	ecx, DWORD PTR _buf$[esp+104]
	mov	DWORD PTR [edi+4], ecx
	sbb	eax, 0
	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
	add	eax, DWORD PTR [edi+8]
	adc	ecx, 0
	sub	eax, DWORD PTR _buf$[esp+92]
	sbb	ecx, 0
	sub	eax, DWORD PTR _buf$[esp+108]
	mov	DWORD PTR [edi+8], eax
	sbb	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
	add	ecx, DWORD PTR [edi+12]
	adc	eax, 0
	sub	ecx, DWORD PTR _buf$[esp+96]
	sbb	eax, 0
	add	ecx, DWORD PTR _buf$[esp+84]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+100]
	mov	DWORD PTR [edi+12], ecx
	adc	eax, 0
	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
	sub	eax, DWORD PTR _buf$[esp+100]
	sbb	ecx, 0
	add	eax, DWORD PTR [edi+16]
	adc	ecx, 0
	add	eax, DWORD PTR _buf$[esp+88]
	adc	ecx, 0
	add	eax, DWORD PTR _buf$[esp+104]
	mov	DWORD PTR [edi+16], eax
	adc	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
	add	ecx, DWORD PTR [edi+20]
	adc	eax, 0
	sub	ecx, DWORD PTR _buf$[esp+104]
	sbb	eax, 0
	add	ecx, DWORD PTR _buf$[esp+92]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+108]
	mov	DWORD PTR [edi+20], ecx
	adc	eax, 0
	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
	add	eax, DWORD PTR [edi+24]
	adc	ecx, 0
	sub	eax, DWORD PTR _buf$[esp+108]
	sbb	ecx, 0
	add	eax, DWORD PTR _buf$[esp+96]
	mov	DWORD PTR [edi+24], eax
	adc	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 639
	test	ecx, ecx
	jle	SHORT $LN62@BN_nist_mo
; Line 640
	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	push	7
	lea	eax, DWORD PTR __nist_p_224[eax*4-28]
	push	eax
	push	edi
	push	edi
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	mov	ebx, eax
	jmp	SHORT $LN16@BN_nist_mo
$LN62@BN_nist_mo:
; Line 646
	jns	SHORT $LN15@BN_nist_mo
; Line 654
	lea	eax, DWORD PTR [ecx+1]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	mov	eax, OFFSET __nist_p_224
	shl	ecx, 2
	push	7
	sub	eax, ecx
	push	eax
	push	edi
	push	edi
	call	_bn_add_words
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 657
	neg	eax
; Line 658
	mov	esi, eax
	and	eax, OFFSET _bn_sub_words
	not	esi
	and	esi, OFFSET _bn_add_words
	or	esi, eax
; Line 660
	jmp	SHORT $LN16@BN_nist_mo
$LN15@BN_nist_mo:
; Line 661
	mov	ebx, 1
$LN16@BN_nist_mo:
; Line 664
	push	7
	push	OFFSET __nist_p_224
	lea	eax, DWORD PTR _c_d$[esp+92]
	push	edi
	push	eax
	call	esi
	neg	eax
; Line 671
	mov	esi, DWORD PTR _r$GSCopy$1$[esp+100]
	neg	ebx
	lea	edx, DWORD PTR _c_d$[esp+100]
	and	eax, ebx
	add	esp, 16					; 00000010H
	mov	ecx, eax
	and	eax, edi
	not	ecx
	and	ecx, edx
; Line 672
	mov	edx, 7
	or	ecx, eax
; Line 319
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edi+24], eax
; Line 672
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi+4], 7
	add	ecx, 24					; 00000018H
	npad	4
$LL4@BN_nist_mo:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN37@BN_nist_mo
	dec	edx
	test	edx, edx
	jg	SHORT $LL4@BN_nist_mo
$LN37@BN_nist_mo:
	pop	edi
	mov	DWORD PTR [esi+4], edx
; Line 674
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	ebx
; Line 675
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN6@BN_nist_mo:
; Line 535
	push	edi
	push	OFFSET __bignum_nist_p_224
	push	esi
	push	ebx
	call	_BN_nnmod
; Line 675
	mov	ecx, DWORD PTR __$ArrayPad$[esp+100]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
_BN_nist_mod_224 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_nist_mod_192
_TEXT	SEGMENT
_top$1$ = -60						; size = 4
tv908 = -60						; size = 4
_r$GSCopy$1$ = -56					; size = 4
_buf$ = -52						; size = 24
_c_d$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_field$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_nist_mod_192 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_nist.c
; Line 369
	mov	eax, 60					; 0000003cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+60], eax
	push	ebx
	mov	ebx, DWORD PTR _r$[esp+60]
	push	ebp
	mov	ebp, DWORD PTR _ctx$[esp+64]
	push	esi
	mov	esi, DWORD PTR _a$[esp+68]
	push	edi
	mov	DWORD PTR _r$GSCopy$1$[esp+76], ebx
; Line 389
	cmp	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR _top$1$[esp+76], eax
	jne	$LN6@BN_nist_mo
	push	OFFSET ?_bignum_nist_p_192_sqr@?1??BN_nist_mod_192@@9@9
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	$LN6@BN_nist_mo
; Line 392
	push	esi
	push	OFFSET __bignum_nist_p_192
	call	_BN_ucmp
	add	esp, 8
; Line 393
	test	eax, eax
	jne	SHORT $LN57@BN_nist_mo
; Line 394
	push	eax
	push	ebx
	call	_BN_set_word
	add	esp, 8
$LN58@BN_nist_mo:
; Line 395
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 492
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN57@BN_nist_mo:
; Line 396
	jle	SHORT $LN9@BN_nist_mo
; Line 397
	cmp	ebx, esi
	je	SHORT $LN58@BN_nist_mo
	push	esi
	push	ebx
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 492
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN9@BN_nist_mo:
; Line 399
	cmp	ebx, esi
	je	SHORT $LN10@BN_nist_mo
; Line 400
	cmp	DWORD PTR [ebx+8], 6
	jl	SHORT $LN20@BN_nist_mo
	mov	eax, ebx
	jmp	SHORT $LN21@BN_nist_mo
$LN20@BN_nist_mo:
	push	6
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN21@BN_nist_mo:
	test	eax, eax
	jne	SHORT $LN12@BN_nist_mo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 492
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN12@BN_nist_mo:
; Line 402
	mov	esi, DWORD PTR [ebx]
; Line 319
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; Line 404
	jmp	SHORT $LN11@BN_nist_mo
$LN10@BN_nist_mo:
; Line 405
	mov	esi, edi
$LN11@BN_nist_mo:
; Line 407
	mov	eax, DWORD PTR _top$1$[esp+76]
	add	eax, -6					; fffffffaH
	push	6
	push	eax
	lea	eax, DWORD PTR [edi+24]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+88]
	push	eax
	call	_nist_cp_bn_0
; Line 416
	mov	eax, DWORD PTR [esi]
	xor	ecx, ecx
	add	esp, 16					; 00000010H
; Line 438
	mov	ebx, DWORD PTR _buf$[esp+88]
	add	eax, DWORD PTR _buf$[esp+76]
	mov	ebp, 0
	mov	edi, 0
	adc	ecx, ecx
	add	eax, DWORD PTR _buf$[esp+92]
	mov	DWORD PTR [esi], eax
	adc	ecx, 0
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
	add	ecx, DWORD PTR [esi+4]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+80]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+96]
	mov	DWORD PTR [esi+4], ecx
	mov	ecx, DWORD PTR _buf$[esp+84]
	adc	eax, 0
	add	ecx, DWORD PTR _buf$[esp+92]
	mov	edx, eax
	mov	DWORD PTR tv908[esp+76], ecx
	adc	ebp, ebp
	sar	edx, 31					; 0000001fH
	add	eax, DWORD PTR [esi+8]
	adc	edx, 0
	add	eax, ecx
	adc	edx, ebp
	add	eax, DWORD PTR _buf$[esp+76]
	mov	DWORD PTR [esi+8], eax
	adc	edx, 0
	add	ebx, DWORD PTR _buf$[esp+96]
	mov	ecx, edx
	adc	edi, edi
	sar	ecx, 31					; 0000001fH
	add	edx, DWORD PTR [esi+12]
	adc	ecx, 0
	add	edx, DWORD PTR _buf$[esp+80]
	adc	ecx, 0
	add	edx, ebx
; Line 439
	mov	DWORD PTR [esi+12], edx
	adc	ecx, edi
; Line 440
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 444
	add	ecx, DWORD PTR [esi+16]
	adc	eax, 0
	add	ecx, DWORD PTR tv908[esp+76]
; Line 445
	mov	DWORD PTR [esi+16], ecx
	adc	eax, ebp
; Line 446
	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
; Line 450
	add	eax, DWORD PTR [esi+20]
	adc	ecx, 0
	add	eax, ebx
; Line 451
	mov	DWORD PTR [esi+20], eax
	adc	ecx, edi
; Line 453
	mov	eax, ecx
	sar	eax, 31					; 0000001fH
; Line 467
	test	ecx, ecx
	jle	SHORT $LN13@BN_nist_mo
; Line 468
	lea	eax, DWORD PTR [ecx+ecx*2]
	push	6
	lea	eax, DWORD PTR __nist_p_192[eax*8-24]
	push	eax
	push	esi
	push	esi
	call	_bn_sub_words
	add	esp, 16					; 00000010H
	mov	edi, eax
	jmp	SHORT $LN14@BN_nist_mo
$LN13@BN_nist_mo:
; Line 472
	mov	edi, 1
$LN14@BN_nist_mo:
; Line 480
	push	6
	push	OFFSET __nist_p_192
	lea	eax, DWORD PTR _c_d$[esp+84]
	push	esi
	push	eax
	call	_bn_sub_words
	neg	eax
; Line 485
	lea	edx, DWORD PTR _c_d$[esp+92]
	neg	edi
	add	esp, 16					; 00000010H
	and	eax, edi
	mov	ecx, eax
	and	eax, esi
	not	ecx
	and	ecx, edx
; Line 489
	mov	edx, 6
	or	ecx, eax
; Line 319
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [esi+20], eax
; Line 488
	mov	esi, DWORD PTR _r$GSCopy$1$[esp+76]
; Line 489
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi+4], 6
	add	ecx, 20					; 00000014H
$LL4@BN_nist_mo:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN35@BN_nist_mo
	dec	edx
	test	edx, edx
	jg	SHORT $LL4@BN_nist_mo
$LN35@BN_nist_mo:
	pop	edi
	mov	DWORD PTR [esi+4], edx
; Line 491
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	ebx
; Line 492
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN6@BN_nist_mo:
; Line 390
	push	ebp
	push	OFFSET __bignum_nist_p_192
	push	esi
	push	ebx
	call	_BN_nnmod
; Line 492
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
_BN_nist_mod_192 ENDP
_TEXT	ENDS
END
