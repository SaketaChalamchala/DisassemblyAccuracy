; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_b64table DB	'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrst'
	DB	'uvwxyz./', 00H
_DATA	ENDS
PUBLIC	_SRP_user_pwd_free
PUBLIC	_SRP_VBASE_new
PUBLIC	_SRP_VBASE_free
PUBLIC	_SRP_VBASE_init
PUBLIC	_SRP_VBASE_get_by_user
PUBLIC	_SRP_VBASE_get1_by_user
PUBLIC	_SRP_create_verifier
PUBLIC	_SRP_create_verifier_BN
PUBLIC	??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@ ; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
EXTRN	__imp__strchr:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_free:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_insert:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_BUF_strdup:PROC
EXTRN	_BIO_s_file:PROC
EXTRN	_BIO_new:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_free_all:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_clear_free:PROC
EXTRN	_BN_bin2bn:PROC
EXTRN	_BN_bn2bin:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_mod_exp:PROC
EXTRN	_BN_dup:PROC
EXTRN	_SRP_get_default_gN:PROC
EXTRN	_SRP_Calc_x:PROC
EXTRN	_EVP_MD_CTX_init:PROC
EXTRN	_EVP_MD_CTX_cleanup:PROC
EXTRN	_EVP_DigestInit_ex:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal_ex:PROC
EXTRN	_EVP_sha1:PROC
EXTRN	_RAND_pseudo_bytes:PROC
EXTRN	_TXT_DB_read:PROC
EXTRN	_TXT_DB_free:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
CONST	SEGMENT
??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@ DB '.\crypto\srp\srp_'
	DB	'vfy.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _find_user
_TEXT	SEGMENT
_vb$ = 8						; size = 4
_username$ = 12						; size = 4
_find_user PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 490
	push	edi
; Line 494
	mov	edi, DWORD PTR _vb$[esp]
	test	edi, edi
	jne	SHORT $LN5@find_user
; Line 495
	xor	eax, eax
	pop	edi
; Line 504
	ret	0
$LN5@find_user:
	push	ebx
	push	ebp
	push	esi
; Line 497
	push	DWORD PTR [edi]
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@find_user
$LL4@find_user:
; Line 498
	push	esi
	push	DWORD PTR [edi]
	call	_sk_value
; Line 499
	mov	ecx, DWORD PTR _username$[esp+20]
	mov	ebp, eax
	add	esp, 8
	mov	edx, DWORD PTR [ebp]
$LL13@find_user:
	mov	bl, BYTE PTR [edx]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN14@find_user
	test	bl, bl
	je	SHORT $LN15@find_user
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN14@find_user
	add	edx, 2
	add	ecx, 2
	test	al, al
	jne	SHORT $LL13@find_user
$LN15@find_user:
	xor	eax, eax
	jmp	SHORT $LN16@find_user
$LN14@find_user:
	sbb	eax, eax
	or	eax, 1
$LN16@find_user:
	test	eax, eax
	je	SHORT $LN9@find_user
; Line 497
	push	DWORD PTR [edi]
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@find_user
$LN3@find_user:
	pop	esi
	pop	ebp
	pop	ebx
; Line 503
	xor	eax, eax
	pop	edi
; Line 504
	ret	0
$LN9@find_user:
	pop	esi
; Line 500
	mov	eax, ebp
	pop	ebp
	pop	ebx
	pop	edi
; Line 504
	ret	0
_find_user ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_gN_place_bn
_TEXT	SEGMENT
_gN_cache$ = 8						; size = 4
_ch$ = 12						; size = 4
_SRP_gN_place_bn PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 348
	push	edi
; Line 350
	mov	edi, DWORD PTR _gN_cache$[esp]
	test	edi, edi
	jne	SHORT $LN5@SRP_gN_pla
; Line 351
	xor	eax, eax
	pop	edi
; Line 368
	ret	0
$LN5@SRP_gN_pla:
	push	ebx
	push	ebp
	push	esi
; Line 354
	push	edi
	xor	esi, esi
	call	_sk_num
	mov	ebx, DWORD PTR _ch$[esp+16]
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@SRP_gN_pla
$LL4@SRP_gN_pla:
; Line 355
	push	esi
	push	edi
	call	_sk_value
	mov	ebp, eax
	add	esp, 8
; Line 356
	mov	ecx, ebx
	mov	edx, DWORD PTR [ebp]
$LL18@SRP_gN_pla:
	mov	bl, BYTE PTR [edx]
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN19@SRP_gN_pla
	test	bl, bl
	je	SHORT $LN20@SRP_gN_pla
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN19@SRP_gN_pla
	add	edx, 2
	add	ecx, 2
	test	al, al
	jne	SHORT $LL18@SRP_gN_pla
$LN20@SRP_gN_pla:
	xor	eax, eax
	jmp	SHORT $LN21@SRP_gN_pla
$LN19@SRP_gN_pla:
	sbb	eax, eax
	or	eax, 1
$LN21@SRP_gN_pla:
	test	eax, eax
	je	SHORT $LN14@SRP_gN_pla
; Line 354
	push	edi
	inc	esi
	call	_sk_num
	mov	ebx, DWORD PTR _ch$[esp+16]
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@SRP_gN_pla
$LN3@SRP_gN_pla:
; Line 360
	push	ebx
	call	_SRP_gN_new_init
	mov	esi, eax
	add	esp, 4
; Line 361
	test	esi, esi
	je	SHORT $LN10@SRP_gN_pla
; Line 362
	push	0
	push	esi
	push	edi
	call	_sk_insert
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN8@SRP_gN_pla
; Line 363
	mov	eax, DWORD PTR [esi+4]
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 368
	ret	0
$LN14@SRP_gN_pla:
; Line 357
	mov	eax, DWORD PTR [ebp+4]
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 368
	ret	0
$LN8@SRP_gN_pla:
; Line 327
	push	DWORD PTR [esi]
	call	_CRYPTO_free
; Line 328
	push	DWORD PTR [esi+4]
	call	_BN_free
; Line 329
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN10@SRP_gN_pla:
	pop	esi
	pop	ebp
	pop	ebx
; Line 367
	xor	eax, eax
	pop	edi
; Line 368
	ret	0
_SRP_gN_place_bn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_get_gN_by_id
_TEXT	SEGMENT
_id$ = 8						; size = 4
_gN_tab$ = 12						; size = 4
_SRP_get_gN_by_id PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 333
	push	ebx
; Line 337
	mov	ebx, DWORD PTR _gN_tab$[esp]
	push	ebp
	mov	ebp, DWORD PTR _id$[esp+4]
	push	esi
	push	edi
	test	ebx, ebx
	je	SHORT $LN13@SRP_get_gN
; Line 338
	push	ebx
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN13@SRP_get_gN
	npad	1
$LL4@SRP_get_gN:
; Line 339
	push	esi
	push	ebx
	call	_sk_value
	mov	edi, eax
	add	esp, 8
; Line 340
	test	edi, edi
	je	SHORT $LN2@SRP_get_gN
	test	ebp, ebp
	je	SHORT $LN7@SRP_get_gN
	mov	edx, DWORD PTR [edi]
	mov	ecx, ebp
$LL14@SRP_get_gN:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN15@SRP_get_gN
	test	al, al
	je	SHORT $LN16@SRP_get_gN
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN15@SRP_get_gN
	add	edx, 2
	add	ecx, 2
	test	al, al
	jne	SHORT $LL14@SRP_get_gN
$LN16@SRP_get_gN:
	xor	eax, eax
	jmp	SHORT $LN17@SRP_get_gN
$LN15@SRP_get_gN:
	sbb	eax, eax
	or	eax, 1
$LN17@SRP_get_gN:
	test	eax, eax
	je	SHORT $LN7@SRP_get_gN
$LN2@SRP_get_gN:
; Line 338
	push	ebx
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@SRP_get_gN
$LN13@SRP_get_gN:
; Line 344
	push	ebp
	call	_SRP_get_default_gN
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 345
	ret	0
$LN7@SRP_get_gN:
; Line 341
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 345
	ret	0
_SRP_get_gN_by_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_gN_free
_TEXT	SEGMENT
_gN_cache$ = 8						; size = 4
_SRP_gN_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 324
	push	esi
; Line 325
	mov	esi, DWORD PTR _gN_cache$[esp]
	test	esi, esi
	je	SHORT $LN1@SRP_gN_fre
; Line 327
	push	DWORD PTR [esi]
	call	_CRYPTO_free
; Line 328
	push	DWORD PTR [esi+4]
	call	_BN_free
; Line 329
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN1@SRP_gN_fre:
	pop	esi
; Line 330
	ret	0
_SRP_gN_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_gN_new_init
_TEXT	SEGMENT
_tmp$ = -2504						; size = 2500
__$ArrayPad$ = -4					; size = 4
_ch$ = 8						; size = 4
_SRP_gN_new_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 301
	mov	eax, 2504				; 000009c8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+2504], eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _ch$[esp+2508]
; Line 305
	push	306					; 00000132H
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	8
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 307
	test	esi, esi
	je	SHORT $LN6@SRP_gN_new
; Line 310
	push	edi
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	SHORT $err$8
; Line 313
	lea	eax, DWORD PTR _tmp$[esp+2512]
	push	edi
	push	eax
	call	_t_fromb64
; Line 314
	push	0
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+2528]
	push	eax
	call	_BN_bin2bn
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+4], eax
	test	eax, eax
	je	SHORT $LN4@SRP_gN_new
; Line 315
	pop	edi
	mov	eax, esi
	pop	esi
; Line 321
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2504]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2504				; 000009c8H
	ret	0
$LN4@SRP_gN_new:
; Line 317
	push	DWORD PTR [esi]
	call	_CRYPTO_free
	add	esp, 4
$err$8:
; Line 319
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN6@SRP_gN_new:
; Line 321
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2512]
	xor	eax, eax
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2504				; 000009c8H
	ret	0
_SRP_gN_new_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _srp_user_pwd_dup
_TEXT	SEGMENT
_src$ = 8						; size = 4
_srp_user_pwd_dup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 251
	push	edi
; Line 254
	mov	edi, DWORD PTR _src$[esp]
	test	edi, edi
	jne	SHORT $LN2@srp_user_p
; Line 255
	xor	eax, eax
	pop	edi
; Line 266
	ret	0
$LN2@srp_user_p:
	push	esi
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	24					; 00000018H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 202
	test	esi, esi
	je	$LN24@srp_user_p
; Line 204
	mov	DWORD PTR [esi+16], 0
; Line 205
	mov	DWORD PTR [esi+12], 0
; Line 206
	mov	DWORD PTR [esi+4], 0
; Line 207
	mov	DWORD PTR [esi+8], 0
; Line 208
	mov	DWORD PTR [esi], 0
; Line 209
	mov	DWORD PTR [esi+20], 0
; Line 216
	mov	eax, DWORD PTR [edi+16]
; Line 259
	mov	ecx, DWORD PTR [edi+12]
; Line 216
	mov	DWORD PTR [esi+16], eax
; Line 217
	mov	DWORD PTR [esi+12], ecx
; Line 261
	mov	eax, DWORD PTR [edi]
	push	ebx
	mov	ebx, DWORD PTR [edi+20]
; Line 223
	test	eax, eax
	je	SHORT $LN13@srp_user_p
	push	eax
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	SHORT $LN5@srp_user_p
$LN13@srp_user_p:
; Line 225
	test	ebx, ebx
	je	SHORT $LN15@srp_user_p
	push	ebx
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi+20], eax
	test	eax, eax
	je	SHORT $LN5@srp_user_p
$LN15@srp_user_p:
; Line 261
	push	DWORD PTR [edi+8]
	call	_BN_dup
	push	DWORD PTR [edi+4]
	mov	ebx, eax
	call	_BN_dup
	add	esp, 8
; Line 245
	mov	DWORD PTR [esi+8], ebx
; Line 246
	mov	DWORD PTR [esi+4], eax
; Line 247
	test	eax, eax
	je	SHORT $LN5@srp_user_p
	test	ebx, ebx
	je	SHORT $LN5@srp_user_p
; Line 265
	pop	ebx
	mov	eax, esi
	pop	esi
	pop	edi
; Line 266
	ret	0
$LN5@srp_user_p:
; Line 192
	push	DWORD PTR [esi+4]
	call	_BN_free
; Line 193
	push	DWORD PTR [esi+8]
	call	_BN_clear_free
; Line 194
	push	DWORD PTR [esi]
	call	_CRYPTO_free
; Line 195
	push	DWORD PTR [esi+20]
	call	_CRYPTO_free
; Line 196
	push	esi
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
; Line 263
	xor	eax, eax
	pop	ebx
	pop	esi
	pop	edi
; Line 266
	ret	0
$LN24@srp_user_p:
	pop	esi
; Line 257
	xor	eax, eax
	pop	edi
; Line 266
	ret	0
_srp_user_pwd_dup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_user_pwd_set_sv_BN
_TEXT	SEGMENT
_vinfo$ = 8						; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_SRP_user_pwd_set_sv_BN PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 245
	mov	ecx, DWORD PTR _vinfo$[esp-4]
; Line 246
	mov	eax, DWORD PTR _s$[esp-4]
	mov	edx, DWORD PTR _v$[esp-4]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+4], eax
; Line 247
	test	eax, eax
	je	SHORT $LN3@SRP_user_p
	test	edx, edx
	je	SHORT $LN3@SRP_user_p
	mov	eax, 1
; Line 248
	ret	0
$LN3@SRP_user_p:
; Line 247
	xor	eax, eax
; Line 248
	ret	0
_SRP_user_pwd_set_sv_BN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_user_pwd_set_sv
_TEXT	SEGMENT
_tmp$ = -2504						; size = 2500
__$ArrayPad$ = -4					; size = 4
_vinfo$ = 8						; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_SRP_user_pwd_set_sv PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 230
	mov	eax, 2504				; 000009c8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+2504], eax
	push	ebx
	mov	ebx, DWORD PTR _vinfo$[esp+2504]
	push	esi
	mov	esi, DWORD PTR _v$[esp+2508]
	push	edi
	mov	edi, DWORD PTR _s$[esp+2512]
; Line 234
	mov	ecx, edi
	lea	edx, DWORD PTR [ecx+1]
$LL6@SRP_user_p:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL6@SRP_user_p
	sub	ecx, edx
	cmp	ecx, 2500				; 000009c4H
	ja	SHORT $LN3@SRP_user_p
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
	npad	5
$LL7@SRP_user_p:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL7@SRP_user_p
	sub	ecx, edx
	cmp	ecx, 2500				; 000009c4H
	ja	SHORT $LN3@SRP_user_p
; Line 236
	lea	eax, DWORD PTR _tmp$[esp+2516]
	push	esi
	push	eax
	call	_t_fromb64
; Line 237
	push	0
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+2532]
	push	eax
	call	_BN_bin2bn
	add	esp, 20					; 00000014H
	mov	DWORD PTR [ebx+8], eax
	test	eax, eax
	je	SHORT $LN3@SRP_user_p
; Line 239
	lea	eax, DWORD PTR _tmp$[esp+2516]
	push	edi
	push	eax
	call	_t_fromb64
; Line 240
	push	0
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+2532]
	push	eax
	call	_BN_bin2bn
	add	esp, 20					; 00000014H
	mov	DWORD PTR [ebx+4], eax
	xor	ecx, ecx
	test	eax, eax
	setne	cl
	pop	edi
	pop	esi
	mov	eax, ecx
	pop	ebx
; Line 241
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2504]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2504				; 000009c8H
	ret	0
$LN3@SRP_user_p:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2516]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2504				; 000009c8H
	ret	0
_SRP_user_pwd_set_sv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_user_pwd_set_ids
_TEXT	SEGMENT
_vinfo$ = 8						; size = 4
_id$ = 12						; size = 4
_info$ = 16						; size = 4
_SRP_user_pwd_set_ids PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 223
	mov	eax, DWORD PTR _id$[esp-4]
	push	esi
	mov	esi, DWORD PTR _vinfo$[esp]
	test	eax, eax
	je	SHORT $LN2@SRP_user_p
	push	eax
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi], eax
	test	eax, eax
	jne	SHORT $LN2@SRP_user_p
$LN6@SRP_user_p:
; Line 224
	xor	eax, eax
	pop	esi
; Line 226
	ret	0
$LN2@SRP_user_p:
; Line 225
	mov	eax, DWORD PTR _info$[esp]
	test	eax, eax
	je	SHORT $LN4@SRP_user_p
	push	eax
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi+20], eax
	test	eax, eax
	je	SHORT $LN6@SRP_user_p
$LN4@SRP_user_p:
	mov	eax, 1
	pop	esi
; Line 226
	ret	0
_SRP_user_pwd_set_ids ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_user_pwd_set_gN
_TEXT	SEGMENT
_vinfo$ = 8						; size = 4
_g$ = 12						; size = 4
_N$ = 16						; size = 4
_SRP_user_pwd_set_gN PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 216
	mov	ecx, DWORD PTR _vinfo$[esp-4]
	mov	eax, DWORD PTR _N$[esp-4]
	mov	DWORD PTR [ecx+16], eax
; Line 217
	mov	eax, DWORD PTR _g$[esp-4]
	mov	DWORD PTR [ecx+12], eax
; Line 218
	ret	0
_SRP_user_pwd_set_gN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_user_pwd_new
_TEXT	SEGMENT
_SRP_user_pwd_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	24					; 00000018H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
; Line 202
	test	eax, eax
	jne	SHORT $LN2@SRP_user_p
; Line 211
	ret	0
$LN2@SRP_user_p:
; Line 204
	mov	DWORD PTR [eax+16], 0
; Line 205
	mov	DWORD PTR [eax+12], 0
; Line 206
	mov	DWORD PTR [eax+4], 0
; Line 207
	mov	DWORD PTR [eax+8], 0
; Line 208
	mov	DWORD PTR [eax], 0
; Line 209
	mov	DWORD PTR [eax+20], 0
; Line 211
	ret	0
_SRP_user_pwd_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _t_tob64
_TEXT	SEGMENT
_olddst$1$ = 8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_t_tob64 PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 140
	mov	ecx, DWORD PTR _size$[esp-4]
	mov	eax, 1431655766				; 55555556H
	imul	ecx
	push	ebx
	mov	eax, edx
; Line 141
	xor	bl, bl
	shr	eax, 31					; 0000001fH
	xor	bh, bh
	add	eax, edx
	mov	edx, ecx
	push	ebp
; Line 144
	mov	ebp, DWORD PTR _src$[esp+4]
	xor	ch, ch
	push	esi
	lea	eax, DWORD PTR [eax+eax*2]
	xor	cl, cl
	sub	edx, eax
	mov	eax, DWORD PTR _dst$[esp+8]
	mov	esi, edx
	mov	DWORD PTR _olddst$1$[esp+8], eax
	push	edi
	sub	esi, 1
	je	SHORT $LN6@t_tob64
	sub	esi, 1
	jne	SHORT $LL4@t_tob64
; Line 149
	mov	bh, BYTE PTR [ebp]
; Line 150
	mov	ch, BYTE PTR [ebp+1]
	jmp	SHORT $LL4@t_tob64
$LN6@t_tob64:
; Line 146
	mov	ch, BYTE PTR [ebp]
$LL4@t_tob64:
; Line 155
	movzx	edi, bl
	mov	esi, edi
	shr	esi, 2
; Line 156
	test	cl, cl
	jne	SHORT $LN9@t_tob64
	test	esi, esi
	je	SHORT $LN8@t_tob64
$LN9@t_tob64:
; Line 157
	mov	cl, BYTE PTR _b64table[esi]
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 158
	mov	cl, 1
$LN8@t_tob64:
; Line 160
	movzx	ebx, bh
	and	edi, 3
	mov	esi, ebx
	shl	edi, 4
	shr	esi, 4
	or	esi, edi
; Line 161
	test	cl, cl
	jne	SHORT $LN11@t_tob64
	test	esi, esi
	je	SHORT $LN10@t_tob64
$LN11@t_tob64:
; Line 162
	mov	cl, BYTE PTR _b64table[esi]
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 163
	mov	cl, 1
$LN10@t_tob64:
; Line 165
	movzx	edi, ch
	and	ebx, 15					; 0000000fH
	mov	esi, edi
	shl	ebx, 2
	shr	esi, 6
	or	esi, ebx
; Line 166
	test	cl, cl
	jne	SHORT $LN13@t_tob64
	test	esi, esi
	je	SHORT $LN12@t_tob64
$LN13@t_tob64:
; Line 167
	mov	cl, BYTE PTR _b64table[esi]
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 168
	mov	cl, 1
$LN12@t_tob64:
; Line 170
	and	edi, 63					; 0000003fH
; Line 171
	test	cl, cl
	jne	SHORT $LN15@t_tob64
	test	edi, edi
	je	SHORT $LN14@t_tob64
$LN15@t_tob64:
; Line 172
	mov	cl, BYTE PTR _b64table[edi]
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 173
	mov	cl, 1
$LN14@t_tob64:
; Line 175
	cmp	edx, DWORD PTR _size$[esp+12]
	jge	SHORT $LN29@t_tob64
; Line 178
	mov	bl, BYTE PTR [edx+ebp]
; Line 179
	mov	bh, BYTE PTR [edx+ebp+1]
; Line 180
	mov	ch, BYTE PTR [edx+ebp+2]
	add	edx, 3
; Line 182
	jmp	$LL4@t_tob64
$LN29@t_tob64:
	pop	edi
	pop	esi
	pop	ebp
; Line 184
	mov	BYTE PTR [eax], 0
; Line 185
	mov	eax, DWORD PTR _olddst$1$[esp]
	pop	ebx
; Line 186
	ret	0
_t_tob64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _t_fromb64
_TEXT	SEGMENT
_a$ = 8							; size = 4
tv425 = 12						; size = 4
_src$ = 12						; size = 4
_t_fromb64 PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 84
	push	ebx
; Line 89
	mov	ebx, DWORD PTR _src$[esp]
	push	ebp
	push	esi
	push	edi
	mov	al, BYTE PTR [ebx]
	test	al, al
	je	SHORT $LN48@t_fromb64
	npad	2
$LL2@t_fromb64:
	cmp	al, 32					; 00000020H
	je	SHORT $LN12@t_fromb64
	cmp	al, 9
	je	SHORT $LN12@t_fromb64
	cmp	al, 10					; 0000000aH
	jne	SHORT $LN48@t_fromb64
$LN12@t_fromb64:
	mov	al, BYTE PTR [ebx+1]
; Line 90
	inc	ebx
	test	al, al
	jne	SHORT $LL2@t_fromb64
$LN48@t_fromb64:
; Line 91
	mov	ebp, ebx
	lea	ecx, DWORD PTR [ebp+1]
	npad	7
$LL47@t_fromb64:
	mov	al, BYTE PTR [ebp]
	inc	ebp
	test	al, al
	jne	SHORT $LL47@t_fromb64
	sub	ebp, ecx
; Line 92
	xor	esi, esi
; Line 93
	test	ebp, ebp
	jle	$LN46@t_fromb64
	sub	ebx, DWORD PTR _a$[esp+12]
	mov	edi, DWORD PTR _a$[esp+12]
	npad	4
$LL4@t_fromb64:
; Line 94
	movsx	eax, BYTE PTR [ebx+edi]
	push	eax
	push	OFFSET _b64table
	call	DWORD PTR __imp__strchr
	add	esp, 8
; Line 95
	test	eax, eax
	je	SHORT $LN27@t_fromb64
; Line 98
	mov	ecx, OFFSET _b64table
; Line 99
	inc	esi
	sub	al, cl
	mov	BYTE PTR [edi], al
	inc	edi
	cmp	esi, ebp
	jl	SHORT $LL4@t_fromb64
$LN27@t_fromb64:
; Line 102
	mov	edi, DWORD PTR _a$[esp+12]
	test	esi, esi
	je	$LN46@t_fromb64
; Line 108
	mov	al, BYTE PTR [esi+edi-1]
	mov	ebx, esi
	dec	esi
	mov	BYTE PTR [ebx+edi], al
; Line 109
	sub	esi, 1
	lea	edx, DWORD PTR [ebx+edi]
	mov	ecx, ebx
	js	SHORT $LN49@t_fromb64
$LL6@t_fromb64:
; Line 111
	movzx	eax, BYTE PTR [esi+edi]
; Line 112
	dec	ecx
	shl	al, 6
	or	BYTE PTR [edx], al
; Line 113
	movzx	eax, BYTE PTR [esi+edi]
	shr	al, 2
	and	al, 15					; 0000000fH
; Line 114
	sub	esi, 1
	mov	BYTE PTR [ecx+edi], al
	js	SHORT $LN49@t_fromb64
; Line 116
	movzx	eax, BYTE PTR [esi+edi]
	shl	al, 4
	or	BYTE PTR [ecx+edi], al
; Line 117
	dec	ecx
; Line 118
	movzx	eax, BYTE PTR [esi+edi]
	shr	al, 4
	and	al, 3
; Line 119
	sub	esi, 1
	mov	BYTE PTR [ecx+edi], al
	js	SHORT $LN49@t_fromb64
; Line 121
	mov	al, BYTE PTR [esi+edi]
	shl	al, 2
	or	BYTE PTR [ecx+edi], al
; Line 123
	dec	ecx
; Line 124
	sub	esi, 1
	mov	BYTE PTR [ecx+edi], 0
	lea	edx, DWORD PTR [ecx+edi]
	js	SHORT $LN49@t_fromb64
; Line 109
	mov	al, BYTE PTR [esi+edi]
	sub	esi, 1
	mov	BYTE PTR [edx], al
	jns	SHORT $LL6@t_fromb64
$LN49@t_fromb64:
; Line 127
	cmp	BYTE PTR [ecx+edi], 0
	jne	SHORT $LN50@t_fromb64
$LL8@t_fromb64:
	cmp	ecx, ebx
	jg	SHORT $LN50@t_fromb64
; Line 128
	inc	ecx
	cmp	BYTE PTR [ecx+edi], 0
	je	SHORT $LL8@t_fromb64
$LN50@t_fromb64:
; Line 129
	xor	eax, eax
; Line 130
	cmp	ecx, ebx
	jg	SHORT $LN1@t_fromb64
	mov	eax, ebx
	mov	esi, edi
	sub	eax, ecx
	sub	esi, ecx
	inc	eax
	npad	3
$LL10@t_fromb64:
; Line 131
	mov	dl, BYTE PTR [ecx+edi]
	mov	BYTE PTR [esi+ecx], dl
	inc	ecx
	cmp	ecx, ebx
	jle	SHORT $LL10@t_fromb64
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 133
	ret	0
$LN46@t_fromb64:
; Line 103
	xor	eax, eax
$LN1@t_fromb64:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 133
	ret	0
_t_fromb64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_create_verifier_BN
_TEXT	SEGMENT
_verifier$GSCopy$1$ = -2528				; size = 4
_pass$GSCopy$1$ = -2524					; size = 4
_user$GSCopy$1$ = -2520					; size = 4
_N$GSCopy$1$ = -2516					; size = 4
_g$GSCopy$1$ = -2512					; size = 4
_result$1$ = -2508					; size = 4
_tmp2$ = -2504						; size = 2500
__$ArrayPad$ = -4					; size = 4
_user$ = 8						; size = 4
_pass$ = 12						; size = 4
_salt$ = 16						; size = 4
_verifier$ = 20						; size = 4
_N$ = 24						; size = 4
_g$ = 28						; size = 4
_SRP_create_verifier_BN PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 656
	mov	eax, 2528				; 000009e0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+2528], eax
	mov	eax, DWORD PTR _user$[esp+2524]
	mov	DWORD PTR _user$GSCopy$1$[esp+2528], eax
	mov	eax, DWORD PTR _pass$[esp+2524]
	push	ebx
	mov	DWORD PTR _pass$GSCopy$1$[esp+2532], eax
; Line 658
	xor	ebx, ebx
	mov	eax, DWORD PTR _verifier$[esp+2528]
	push	ebp
	mov	DWORD PTR _verifier$GSCopy$1$[esp+2536], eax
	mov	eax, DWORD PTR _N$[esp+2532]
	push	esi
	mov	DWORD PTR _N$GSCopy$1$[esp+2540], eax
	mov	eax, DWORD PTR _g$[esp+2536]
	push	edi
	mov	edi, DWORD PTR _salt$[esp+2540]
	mov	DWORD PTR _g$GSCopy$1$[esp+2544], eax
	mov	DWORD PTR _result$1$[esp+2544], 0
; Line 659
	call	_BN_CTX_new
; Line 661
	xor	esi, esi
	mov	ebp, eax
; Line 666
	cmp	DWORD PTR _user$GSCopy$1$[esp+2544], ebx
	je	$err$12
	cmp	DWORD PTR _pass$GSCopy$1$[esp+2544], ebx
	je	$err$12
	test	edi, edi
	je	$err$12
	cmp	DWORD PTR _verifier$GSCopy$1$[esp+2544], ebx
	je	$err$12
	cmp	DWORD PTR _N$GSCopy$1$[esp+2544], ebx
	je	SHORT $err$12
	cmp	DWORD PTR _g$GSCopy$1$[esp+2544], ebx
	je	SHORT $err$12
	test	ebp, ebp
	je	SHORT $err$12
; Line 672
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	jne	SHORT $LN4@SRP_create
; Line 673
	lea	eax, DWORD PTR _tmp2$[esp+2544]
	push	20					; 00000014H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	js	SHORT $err$12
; Line 676
	push	esi
	lea	eax, DWORD PTR _tmp2$[esp+2548]
	push	20					; 00000014H
	push	eax
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
$LN4@SRP_create:
; Line 681
	push	DWORD PTR _pass$GSCopy$1$[esp+2544]
	mov	esi, eax
	push	DWORD PTR _user$GSCopy$1$[esp+2548]
	push	esi
	call	_SRP_Calc_x
	add	esp, 12					; 0000000cH
	mov	ebx, eax
; Line 683
	call	_BN_new
	mov	ecx, DWORD PTR _verifier$GSCopy$1$[esp+2544]
	mov	DWORD PTR [ecx], eax
; Line 684
	test	eax, eax
	je	SHORT $err$12
; Line 687
	push	ebp
	push	DWORD PTR _N$GSCopy$1$[esp+2548]
	push	ebx
	push	DWORD PTR _g$GSCopy$1$[esp+2556]
	push	eax
	call	_BN_mod_exp
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN8@SRP_create
; Line 688
	mov	eax, DWORD PTR _verifier$GSCopy$1$[esp+2544]
	push	DWORD PTR [eax]
	call	_BN_clear_free
	add	esp, 4
$err$12:
; Line 698
	cmp	DWORD PTR [edi], esi
	je	SHORT $LN9@SRP_create
; Line 699
	push	esi
	call	_BN_clear_free
	add	esp, 4
$LN9@SRP_create:
; Line 700
	push	ebx
	call	_BN_clear_free
; Line 701
	push	ebp
	call	_BN_CTX_free
; Line 703
	mov	ecx, DWORD PTR __$ArrayPad$[esp+2552]
	add	esp, 8
	mov	eax, DWORD PTR _result$1$[esp+2544]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 2528				; 000009e0H
	ret	0
$LN8@SRP_create:
; Line 694
	mov	DWORD PTR _result$1$[esp+2544], 1
; Line 695
	mov	DWORD PTR [edi], esi
; Line 698
	jmp	SHORT $LN9@SRP_create
_SRP_create_verifier_BN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_create_verifier
_TEXT	SEGMENT
_N$GSCopy$1$ = -5048					; size = 4
_s$ = -5044						; size = 4
_g$GSCopy$1$ = -5040					; size = 4
_defgNid$1$ = -5040					; size = 4
_salt$GSCopy$1$ = -5036					; size = 4
_N_bn$1$ = -5032					; size = 4
_v$ = -5028						; size = 4
_pass$GSCopy$1$ = -5024					; size = 4
_user$GSCopy$1$ = -5020					; size = 4
_verifier$GSCopy$1$ = -5016				; size = 4
_vfsize$1$ = -5012					; size = 4
_result$1$ = -5008					; size = 4
_tmp$ = -5004						; size = 2500
_tmp2$ = -2504						; size = 2500
__$ArrayPad$ = -4					; size = 4
_user$ = 8						; size = 4
_pass$ = 12						; size = 4
_salt$ = 16						; size = 4
_verifier$ = 20						; size = 4
_N$ = 24						; size = 4
_g$ = 28						; size = 4
_SRP_create_verifier PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 569
	mov	eax, 5048				; 000013b8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+5048], eax
	mov	eax, DWORD PTR _user$[esp+5044]
	mov	ecx, DWORD PTR _verifier$[esp+5044]
	mov	edx, DWORD PTR _N$[esp+5044]
	push	ebx
	push	ebp
	push	esi
	mov	DWORD PTR _user$GSCopy$1$[esp+5060], eax
; Line 572
	xor	ebx, ebx
	mov	eax, DWORD PTR _pass$[esp+5056]
	xor	esi, esi
	push	edi
	mov	DWORD PTR _pass$GSCopy$1$[esp+5064], eax
	xor	edi, edi
	mov	eax, DWORD PTR _salt$[esp+5060]
	xor	ebp, ebp
	mov	DWORD PTR _verifier$GSCopy$1$[esp+5064], ecx
	mov	ecx, DWORD PTR _g$[esp+5060]
	mov	DWORD PTR _salt$GSCopy$1$[esp+5064], eax
	mov	DWORD PTR _N$GSCopy$1$[esp+5064], edx
	mov	DWORD PTR _g$GSCopy$1$[esp+5064], ecx
	mov	DWORD PTR _result$1$[esp+5064], 0
	mov	DWORD PTR _s$[esp+5064], esi
	mov	DWORD PTR _v$[esp+5064], ebx
; Line 576
	mov	DWORD PTR _vfsize$1$[esp+5064], ebx
; Line 579
	cmp	DWORD PTR _user$GSCopy$1$[esp+5064], ebx
	je	$err$36
	cmp	DWORD PTR _pass$GSCopy$1$[esp+5064], ebx
	je	$err$36
	test	eax, eax
	je	$err$36
	cmp	DWORD PTR _verifier$GSCopy$1$[esp+5064], ebx
	je	$err$36
; Line 582
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN4@SRP_create
; Line 583
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+5068]
	push	eax
	call	_t_fromb64
	add	esp, 8
	test	eax, eax
	je	$LN33@SRP_create
; Line 585
	push	ebx
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+5072]
	push	eax
	call	_BN_bin2bn
; Line 586
	push	DWORD PTR _g$GSCopy$1$[esp+5076]
	mov	edi, eax
	lea	eax, DWORD PTR _tmp$[esp+5080]
	push	eax
	mov	DWORD PTR _N_bn$1$[esp+5084], edi
	call	_t_fromb64
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN33@SRP_create
; Line 588
	push	ebx
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+5072]
	push	eax
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
; Line 589
	mov	DWORD PTR _defgNid$1$[esp+5064], OFFSET ??_C@_01NBENCBCI@?$CK?$AA@
	mov	ebp, eax
; Line 590
	jmp	SHORT $LN5@SRP_create
$LN4@SRP_create:
; Line 344
	push	ecx
	call	_SRP_get_default_gN
	add	esp, 4
; Line 592
	test	eax, eax
	je	$LN17@SRP_create
; Line 594
	mov	edi, DWORD PTR [eax+8]
; Line 595
	mov	ebp, DWORD PTR [eax+4]
; Line 596
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _N_bn$1$[esp+5064], edi
	mov	DWORD PTR _defgNid$1$[esp+5064], eax
$LN5@SRP_create:
; Line 599
	mov	eax, DWORD PTR _salt$GSCopy$1$[esp+5064]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN9@SRP_create
; Line 600
	lea	eax, DWORD PTR _tmp2$[esp+5064]
	push	20					; 00000014H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	js	$LN33@SRP_create
; Line 603
	push	0
	push	20					; 00000014H
; Line 604
	jmp	SHORT $LN34@SRP_create
$LN9@SRP_create:
; Line 605
	push	eax
	lea	eax, DWORD PTR _tmp2$[esp+5068]
	push	eax
	call	_t_fromb64
	add	esp, 8
	test	eax, eax
	je	$LN33@SRP_create
; Line 607
	push	0
	push	eax
$LN34@SRP_create:
	lea	eax, DWORD PTR _tmp2$[esp+5072]
	push	eax
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[esp+5064], eax
; Line 610
	lea	eax, DWORD PTR _v$[esp+5064]
	push	ebp
	push	edi
	push	eax
	lea	eax, DWORD PTR _s$[esp+5076]
	push	eax
	push	DWORD PTR _pass$GSCopy$1$[esp+5080]
	push	DWORD PTR _user$GSCopy$1$[esp+5084]
	call	_SRP_create_verifier_BN
; Line 613
	mov	ebx, DWORD PTR _v$[esp+5088]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN33@SRP_create
	lea	eax, DWORD PTR _tmp$[esp+5064]
	push	eax
	push	ebx
	call	_BN_bn2bin
; Line 614
	push	ebx
	call	_BN_num_bits
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
; Line 615
	push	615					; 00000267H
	add	eax, eax
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	eax
	mov	DWORD PTR _vfsize$1$[esp+5088], eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 24					; 00000018H
	test	esi, esi
	je	SHORT $LN33@SRP_create
; Line 617
	push	ebx
	call	_BN_num_bits
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+5072]
	push	eax
	push	esi
	call	_t_tob64
; Line 619
	mov	eax, DWORD PTR _salt$GSCopy$1$[esp+5080]
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@SRP_create
; Line 622
	push	622					; 0000026eH
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	40					; 00000028H
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN29@SRP_create
; Line 625
	push	20					; 00000014H
	lea	eax, DWORD PTR _tmp2$[esp+5068]
	push	eax
	push	edi
	call	_t_tob64
; Line 626
	mov	eax, DWORD PTR _salt$GSCopy$1$[esp+5076]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR _N_bn$1$[esp+5064]
$LN15@SRP_create:
; Line 629
	mov	eax, DWORD PTR _verifier$GSCopy$1$[esp+5064]
	mov	DWORD PTR [eax], esi
; Line 630
	xor	esi, esi
; Line 631
	mov	eax, DWORD PTR _defgNid$1$[esp+5064]
	mov	DWORD PTR _result$1$[esp+5064], eax
	jmp	SHORT $LN33@SRP_create
$LN29@SRP_create:
	mov	edi, DWORD PTR _N_bn$1$[esp+5064]
$LN33@SRP_create:
	mov	edx, DWORD PTR _N$GSCopy$1$[esp+5064]
$err$36:
; Line 634
	test	edx, edx
	je	SHORT $LN17@SRP_create
; Line 635
	push	edi
	call	_BN_free
; Line 636
	push	ebp
	call	_BN_free
	add	esp, 8
$LN17@SRP_create:
; Line 638
	push	DWORD PTR _vfsize$1$[esp+5064]
	push	esi
	call	_OPENSSL_cleanse
; Line 639
	push	esi
	call	_CRYPTO_free
; Line 640
	push	DWORD PTR _s$[esp+5076]
	call	_BN_clear_free
; Line 641
	push	ebx
	call	_BN_clear_free
; Line 643
	mov	ecx, DWORD PTR __$ArrayPad$[esp+5084]
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _result$1$[esp+5064]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 5048				; 000013b8H
	ret	0
_SRP_create_verifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_VBASE_get1_by_user
_TEXT	SEGMENT
_ctxt$ = -68						; size = 24
_digv$ = -44						; size = 20
_digs$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_vb$ = 8						; size = 4
_username$ = 12						; size = 4
_SRP_VBASE_get1_by_user PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 521
	mov	eax, 68					; 00000044H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+68], eax
	push	ebx
	mov	ebx, DWORD PTR _username$[esp+68]
	push	esi
	mov	esi, DWORD PTR _vb$[esp+72]
; Line 527
	test	esi, esi
	jne	SHORT $LN2@SRP_VBASE_
$LN5@SRP_VBASE_:
	pop	esi
; Line 528
	xor	eax, eax
	pop	ebx
; Line 562
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN2@SRP_VBASE_:
; Line 530
	push	ebx
	push	esi
	call	_find_user
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@SRP_VBASE_
; Line 531
	push	eax
	call	_srp_user_pwd_dup
	add	esp, 4
	pop	esi
	pop	ebx
; Line 562
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$LN3@SRP_VBASE_:
; Line 534
	cmp	DWORD PTR [esi+8], 0
	je	SHORT $LN5@SRP_VBASE_
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN5@SRP_VBASE_
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN5@SRP_VBASE_
; Line 539
	push	edi
	call	_SRP_user_pwd_new
	mov	edi, eax
	test	edi, edi
	je	$LN22@SRP_VBASE_
; Line 542
	mov	ecx, DWORD PTR [esi+12]
; Line 216
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; Line 217
	mov	DWORD PTR [edi+12], ecx
; Line 223
	test	ebx, ebx
	je	SHORT $LN14@SRP_VBASE_
	push	ebx
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [edi], eax
	test	eax, eax
	je	$err$24
$LN14@SRP_VBASE_:
; Line 547
	lea	eax, DWORD PTR _digv$[esp+80]
	push	20					; 00000014H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	js	$err$24
; Line 549
	lea	eax, DWORD PTR _ctxt$[esp+80]
	push	eax
	call	_EVP_MD_CTX_init
	add	esp, 4
; Line 550
	push	0
	call	_EVP_sha1
	push	eax
	lea	eax, DWORD PTR _ctxt$[esp+88]
	push	eax
	call	_EVP_DigestInit_ex
; Line 551
	mov	edx, DWORD PTR [esi+8]
	add	esp, 12					; 0000000cH
	mov	ecx, edx
	lea	esi, DWORD PTR [ecx+1]
$LL19@SRP_VBASE_:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL19@SRP_VBASE_
	sub	ecx, esi
	lea	eax, DWORD PTR _ctxt$[esp+80]
	push	ecx
	push	edx
	push	eax
	call	_EVP_DigestUpdate
; Line 552
	mov	ecx, ebx
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [ecx+1]
$LL20@SRP_VBASE_:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL20@SRP_VBASE_
	sub	ecx, edx
	lea	eax, DWORD PTR _ctxt$[esp+80]
	push	ecx
	push	ebx
	push	eax
	call	_EVP_DigestUpdate
; Line 553
	push	0
	lea	eax, DWORD PTR _digs$[esp+96]
	push	eax
	lea	eax, DWORD PTR _ctxt$[esp+100]
	push	eax
	call	_EVP_DigestFinal_ex
; Line 554
	lea	eax, DWORD PTR _ctxt$[esp+104]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 556
	push	0
	lea	eax, DWORD PTR _digv$[esp+112]
	push	20					; 00000014H
	push	eax
	call	_BN_bin2bn
	add	esp, 40					; 00000028H
	push	eax
	push	0
	lea	eax, DWORD PTR _digs$[esp+88]
	push	20					; 00000014H
	push	eax
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_SRP_user_pwd_set_sv_BN
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$24
; Line 558
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 562
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
$err$24:
; Line 560
	push	edi
	call	_SRP_user_pwd_free
	add	esp, 4
$LN22@SRP_VBASE_:
; Line 562
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
_SRP_VBASE_get1_by_user ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_VBASE_get_by_user
_TEXT	SEGMENT
_vb$ = 8						; size = 4
_username$ = 12						; size = 4
_SRP_VBASE_get_by_user PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 513
	jmp	_find_user
_SRP_VBASE_get_by_user ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_VBASE_init
_TEXT	SEGMENT
_SRP_gN_tab$1$ = -24					; size = 4
_error_code$1$ = -20					; size = 4
_tmpdb$1$ = -16						; size = 4
_last_index$1$ = -12					; size = 4
_i$1$ = -8						; size = 4
_in$1$ = -4						; size = 4
_vb$ = 8						; size = 4
_verifier_file$ = 12					; size = 4
_SRP_VBASE_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 377
	mov	eax, 24					; 00000018H
	call	__chkstk
	push	ebx
	push	ebp
	push	edi
; Line 379
	call	_sk_new_null
	mov	edi, eax
; Line 380
	xor	eax, eax
	mov	DWORD PTR _SRP_gN_tab$1$[esp+36], edi
	mov	DWORD PTR _last_index$1$[esp+36], eax
; Line 388
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	ebp, eax
	add	esp, 4
	mov	DWORD PTR _in$1$[esp+36], ebp
; Line 390
	mov	ebx, 3
; Line 392
	test	ebp, ebp
	je	$LN25@SRP_VBASE_
	push	DWORD PTR _verifier_file$[esp+32]
	push	ebx
	push	108					; 0000006cH
	push	ebp
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	$LN24@SRP_VBASE_
; Line 397
	push	6
	push	ebp
	mov	ebx, 1
	call	_TXT_DB_read
	add	esp, 8
	mov	DWORD PTR _tmpdb$1$[esp+36], eax
	test	eax, eax
	je	$LN24@SRP_VBASE_
; Line 402
	mov	ebp, DWORD PTR _vb$[esp+32]
	mov	ebx, 4
	mov	DWORD PTR _error_code$1$[esp+36], ebx
	cmp	DWORD PTR [ebp+8], 0
	je	SHORT $LN8@SRP_VBASE_
; Line 403
	push	0
	call	_SRP_get_default_gN
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _last_index$1$[esp+36], eax
	mov	eax, DWORD PTR _tmpdb$1$[esp+36]
$LN8@SRP_VBASE_:
; Line 405
	push	esi
	push	DWORD PTR [eax+4]
	xor	esi, esi
	mov	DWORD PTR _i$1$[esp+44], esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	$LN3@SRP_VBASE_
$LL4@SRP_VBASE_:
; Line 406
	mov	eax, DWORD PTR _tmpdb$1$[esp+40]
	push	esi
	push	DWORD PTR [eax+4]
	call	_sk_value
	mov	esi, eax
	add	esp, 8
; Line 407
	mov	ecx, DWORD PTR [esi]
	mov	al, BYTE PTR [ecx]
	cmp	al, 73					; 00000049H
	jne	$LN9@SRP_VBASE_
; Line 412
	push	412					; 0000019cH
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	12					; 0000000cH
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	$LN29@SRP_VBASE_
; Line 419
	push	DWORD PTR [esi+12]
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [edi], eax
	test	eax, eax
	je	$err$48
	push	DWORD PTR [esi+4]
	push	DWORD PTR [ebp+4]
	call	_SRP_gN_place_bn
	add	esp, 8
	mov	DWORD PTR [edi+8], eax
	test	eax, eax
	je	$err$48
	push	DWORD PTR [esi+8]
	push	DWORD PTR [ebp+4]
	call	_SRP_gN_place_bn
	add	esp, 8
	mov	DWORD PTR [edi+4], eax
	test	eax, eax
	je	$err$48
	push	0
	push	edi
	push	DWORD PTR _SRP_gN_tab$1$[esp+48]
	call	_sk_insert
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$48
; Line 424
	cmp	DWORD PTR [ebp+8], 0
; Line 426
	mov	edi, DWORD PTR _SRP_gN_tab$1$[esp+40]
	je	$LN2@SRP_VBASE_
; Line 425
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _last_index$1$[esp+40], eax
; Line 426
	jmp	$LN2@SRP_VBASE_
$LN9@SRP_VBASE_:
; Line 427
	cmp	al, 86					; 00000056H
	jne	$LN2@SRP_VBASE_
; Line 430
	push	edi
	push	DWORD PTR [esi+16]
	call	_SRP_get_gN_by_id
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	je	$LN44@SRP_VBASE_
; Line 431
	mov	DWORD PTR _error_code$1$[esp+40], 4
; Line 432
	call	_SRP_user_pwd_new
	mov	edi, eax
	test	edi, edi
	je	$LN42@SRP_VBASE_
; Line 435
	mov	edx, DWORD PTR [ebx+4]
; Line 216
	mov	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+16], ecx
; Line 217
	mov	DWORD PTR [edi+12], edx
; Line 436
	push	DWORD PTR [esi+20]
	push	DWORD PTR [esi+12]
	push	edi
	call	_SRP_user_pwd_set_ids
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN43@SRP_VBASE_
; Line 441
	push	DWORD PTR [esi+4]
	mov	ebx, 2
	push	DWORD PTR [esi+8]
	mov	DWORD PTR _error_code$1$[esp+48], ebx
	push	edi
	call	_SRP_user_pwd_set_sv
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@SRP_VBASE_
; Line 445
	push	0
	push	edi
	push	DWORD PTR [ebp]
	call	_sk_insert
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@SRP_VBASE_
	mov	edi, DWORD PTR _SRP_gN_tab$1$[esp+40]
$LN2@SRP_VBASE_:
; Line 405
	mov	eax, DWORD PTR _tmpdb$1$[esp+40]
	mov	esi, DWORD PTR _i$1$[esp+40]
	inc	esi
	mov	DWORD PTR _i$1$[esp+40], esi
	push	DWORD PTR [eax+4]
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	$LL4@SRP_VBASE_
$LN3@SRP_VBASE_:
; Line 452
	mov	eax, DWORD PTR _last_index$1$[esp+40]
	test	eax, eax
	je	SHORT $LN21@SRP_VBASE_
; Line 455
	push	edi
	push	eax
	call	_SRP_get_gN_by_id
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN22@SRP_VBASE_
; Line 456
	lea	ebx, DWORD PTR [eax+2]
; Line 457
	jmp	SHORT $LN29@SRP_VBASE_
$LN44@SRP_VBASE_:
	mov	ebx, DWORD PTR _error_code$1$[esp+40]
	jmp	SHORT $LN2@SRP_VBASE_
$err$48:
; Line 472
	push	DWORD PTR [edi]
	call	_CRYPTO_free
; Line 473
	push	edi
	call	_CRYPTO_free
	add	esp, 8
; Line 190
	jmp	SHORT $LN29@SRP_VBASE_
$LN43@SRP_VBASE_:
	mov	ebx, DWORD PTR _error_code$1$[esp+40]
$LN23@SRP_VBASE_:
; Line 192
	push	DWORD PTR [edi+4]
	call	_BN_free
; Line 193
	push	DWORD PTR [edi+8]
	call	_BN_clear_free
; Line 194
	push	DWORD PTR [edi]
	call	_CRYPTO_free
; Line 195
	push	DWORD PTR [edi+20]
	call	_CRYPTO_free
; Line 196
	push	edi
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
	jmp	SHORT $LN29@SRP_VBASE_
$LN22@SRP_VBASE_:
; Line 459
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebp+12], eax
; Line 460
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [ebp+16], eax
$LN21@SRP_VBASE_:
; Line 463
	xor	ebx, ebx
	jmp	SHORT $LN29@SRP_VBASE_
$LN42@SRP_VBASE_:
	mov	ebx, 4
$LN29@SRP_VBASE_:
; Line 479
	push	DWORD PTR _tmpdb$1$[esp+40]
	call	_TXT_DB_free
	mov	edi, DWORD PTR _SRP_gN_tab$1$[esp+44]
	add	esp, 4
	mov	ebp, DWORD PTR _in$1$[esp+40]
	pop	esi
$LN24@SRP_VBASE_:
; Line 481
	push	ebp
	call	_BIO_free_all
	add	esp, 4
$LN25@SRP_VBASE_:
; Line 483
	push	edi
	call	_sk_free
	add	esp, 4
; Line 485
	mov	eax, ebx
	pop	edi
	pop	ebp
	pop	ebx
; Line 487
	add	esp, 24					; 00000018H
	ret	0
_SRP_VBASE_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_VBASE_free
_TEXT	SEGMENT
_vb$ = 8						; size = 4
_SRP_VBASE_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 292
	push	esi
; Line 293
	mov	esi, DWORD PTR _vb$[esp]
	push	OFFSET _SRP_user_pwd_free
	push	DWORD PTR [esi]
	call	_sk_pop_free
; Line 294
	push	DWORD PTR [esi+4]
	call	_sk_free
; Line 295
	push	DWORD PTR [esi+8]
	call	_CRYPTO_free
; Line 296
	push	esi
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
; Line 297
	xor	eax, eax
	pop	esi
; Line 298
	ret	0
_SRP_VBASE_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_VBASE_new
_TEXT	SEGMENT
_seed_key$ = 8						; size = 4
_SRP_VBASE_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 269
	push	esi
; Line 270
	push	270					; 0000010eH
	push	OFFSET ??_C@_0BH@PMKEIHBK@?4?2crypto?2srp?2srp_vfy?4c?$AA@
	push	20					; 00000014H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 272
	test	esi, esi
	je	SHORT $LN7@SRP_VBASE_
; Line 274
	call	_sk_new_null
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	SHORT $LN4@SRP_VBASE_
	call	_sk_new_null
	mov	DWORD PTR [esi+4], eax
	test	eax, eax
	je	SHORT $LN4@SRP_VBASE_
; Line 282
	mov	eax, DWORD PTR _seed_key$[esp]
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+8], 0
	test	eax, eax
	je	SHORT $LN5@SRP_VBASE_
	push	eax
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi+8], eax
	test	eax, eax
	jne	SHORT $LN5@SRP_VBASE_
; Line 283
	push	DWORD PTR [esi]
	call	_sk_free
; Line 284
	push	DWORD PTR [esi+4]
	call	_sk_free
; Line 285
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
	xor	eax, eax
	pop	esi
; Line 289
	ret	0
$LN5@SRP_VBASE_:
; Line 288
	mov	eax, esi
	pop	esi
; Line 289
	ret	0
$LN4@SRP_VBASE_:
; Line 276
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN7@SRP_VBASE_:
; Line 277
	xor	eax, eax
	pop	esi
; Line 289
	ret	0
_SRP_VBASE_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SRP_user_pwd_free
_TEXT	SEGMENT
_user_pwd$ = 8						; size = 4
_SRP_user_pwd_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\srp\srp_vfy.c
; Line 189
	push	esi
; Line 190
	mov	esi, DWORD PTR _user_pwd$[esp]
	test	esi, esi
	je	SHORT $LN1@SRP_user_p
; Line 192
	push	DWORD PTR [esi+4]
	call	_BN_free
; Line 193
	push	DWORD PTR [esi+8]
	call	_BN_clear_free
; Line 194
	push	DWORD PTR [esi]
	call	_CRYPTO_free
; Line 195
	push	DWORD PTR [esi+20]
	call	_CRYPTO_free
; Line 196
	push	esi
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
$LN1@SRP_user_p:
	pop	esi
; Line 197
	ret	0
_SRP_user_pwd_free ENDP
_TEXT	ENDS
END
