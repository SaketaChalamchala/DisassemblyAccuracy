; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_fre.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ASN1_item_free
PUBLIC	_ASN1_item_ex_free
PUBLIC	_ASN1_template_free
PUBLIC	_ASN1_primitive_free
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_free:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ASN1_OBJECT_free:PROC
EXTRN	_ASN1_STRING_free:PROC
EXTRN	_asn1_get_choice_selector:PROC
EXTRN	_asn1_get_field_ptr:PROC
EXTRN	_asn1_do_adb:PROC
EXTRN	_asn1_do_lock:PROC
EXTRN	_asn1_enc_free:PROC
; Function compile flags: /Ogtpy
;	COMDAT _asn1_item_combine_free
_TEXT	SEGMENT
_asn1_cb$1$ = 8						; size = 4
_pval$ = 8						; size = 4
_tt$2$ = 12						; size = 4
_it$ = 12						; size = 4
_combine$ = 16						; size = 4
_asn1_item_combine_free PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_fre.c
; Line 82
	push	ebx
; Line 86
	mov	ebx, DWORD PTR _it$[esp]
	push	edi
; Line 89
	mov	edi, DWORD PTR _pval$[esp+4]
	mov	eax, DWORD PTR [ebx+16]
	test	edi, edi
	je	$LN31@asn1_item_
; Line 91
	mov	cl, BYTE PTR [ebx]
	test	cl, cl
	je	SHORT $LN8@asn1_item_
	cmp	DWORD PTR [edi], 0
	je	$LN31@asn1_item_
$LN8@asn1_item_:
	push	ebp
; Line 93
	test	eax, eax
	je	SHORT $LN9@asn1_item_
	mov	ebp, DWORD PTR [eax+16]
	mov	DWORD PTR _asn1_cb$1$[esp+8], ebp
	test	ebp, ebp
	jne	SHORT $LN10@asn1_item_
$LN9@asn1_item_:
; Line 96
	xor	ebp, ebp
	mov	DWORD PTR _asn1_cb$1$[esp+8], ebp
$LN10@asn1_item_:
; Line 98
	movsx	ecx, cl
	cmp	ecx, 6
	ja	$LN37@asn1_item_
	push	esi
	jmp	DWORD PTR $LN43@asn1_item_[ecx*4]
$LN11@asn1_item_:
; Line 101
	mov	eax, DWORD PTR [ebx+8]
	test	eax, eax
	je	SHORT $LN14@asn1_item_
; Line 102
	push	eax
	push	edi
	call	_ASN1_template_free
	add	esp, 8
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 176
	ret	0
$LN14@asn1_item_:
; Line 108
	push	ebx
	push	edi
	call	_ASN1_primitive_free
	add	esp, 8
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 176
	ret	0
$LN15@asn1_item_:
; Line 112
	test	ebp, ebp
	je	SHORT $LN17@asn1_item_
; Line 113
	push	0
	push	ebx
	push	edi
	push	2
	call	ebp
	add	esp, 16					; 00000010H
; Line 114
	cmp	eax, 2
	je	$LN38@asn1_item_
$LN17@asn1_item_:
; Line 117
	push	ebx
	push	edi
	call	_asn1_get_choice_selector
	add	esp, 8
; Line 118
	test	eax, eax
	js	SHORT $LN18@asn1_item_
	cmp	eax, DWORD PTR [ebx+12]
	jge	SHORT $LN18@asn1_item_
; Line 120
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ebx+8]
	lea	esi, DWORD PTR [eax+ecx*4]
; Line 121
	push	esi
	push	edi
	call	_asn1_get_field_ptr
; Line 122
	push	esi
	push	eax
	call	_ASN1_template_free
	add	esp, 16					; 00000010H
$LN18@asn1_item_:
; Line 124
	test	ebp, ebp
	je	$LN30@asn1_item_
; Line 125
	push	0
	push	ebx
	push	edi
	push	3
	call	ebp
; Line 130
	jmp	$LN40@asn1_item_
$LN21@asn1_item_:
; Line 134
	test	eax, eax
	je	$LN38@asn1_item_
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	je	$LN38@asn1_item_
; Line 135
	push	DWORD PTR [edi]
	call	eax
; Line 171
	add	esp, 4
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 176
	ret	0
$LN23@asn1_item_:
; Line 140
	test	eax, eax
	je	$LN38@asn1_item_
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	je	$LN38@asn1_item_
; Line 141
	push	ebx
	push	edi
	call	eax
	add	esp, 8
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 176
	ret	0
$LN25@asn1_item_:
; Line 146
	push	ebx
	push	-1
	push	edi
	call	_asn1_do_lock
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	$LN38@asn1_item_
; Line 148
	test	ebp, ebp
	je	SHORT $LN28@asn1_item_
; Line 149
	push	0
	push	ebx
	push	edi
	push	2
	call	ebp
	add	esp, 16					; 00000010H
; Line 150
	cmp	eax, 2
	je	$LN38@asn1_item_
$LN28@asn1_item_:
; Line 153
	push	ebx
	push	edi
	call	_asn1_enc_free
; Line 159
	mov	edx, DWORD PTR [ebx+12]
	add	esp, 8
	mov	eax, DWORD PTR [ebx+8]
; Line 160
	xor	ebp, ebp
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	eax, DWORD PTR [eax+ecx*4]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR _tt$2$[esp+12], eax
	test	edx, edx
	jle	SHORT $LN5@asn1_item_
	npad	6
$LL6@asn1_item_:
; Line 162
	push	0
	push	eax
	push	edi
	call	_asn1_do_adb
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 163
	test	esi, esi
	je	SHORT $LN4@asn1_item_
; Line 165
	push	esi
	push	edi
	call	_asn1_get_field_ptr
; Line 166
	push	esi
	push	eax
	call	_ASN1_template_free
	add	esp, 16					; 00000010H
$LN4@asn1_item_:
; Line 160
	mov	eax, DWORD PTR _tt$2$[esp+12]
	inc	ebp
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _tt$2$[esp+12], eax
	cmp	ebp, DWORD PTR [ebx+12]
	jl	SHORT $LL6@asn1_item_
$LN5@asn1_item_:
; Line 168
	mov	eax, DWORD PTR _asn1_cb$1$[esp+12]
	test	eax, eax
	je	SHORT $LN30@asn1_item_
; Line 169
	push	0
	push	ebx
	push	edi
	push	3
	call	eax
$LN40@asn1_item_:
	add	esp, 16					; 00000010H
$LN30@asn1_item_:
; Line 170
	cmp	DWORD PTR _combine$[esp+12], 0
	jne	SHORT $LN38@asn1_item_
; Line 171
	push	DWORD PTR [edi]
	call	_CRYPTO_free
; Line 172
	mov	DWORD PTR [edi], 0
	add	esp, 4
$LN38@asn1_item_:
	pop	esi
$LN37@asn1_item_:
	pop	ebp
$LN31@asn1_item_:
	pop	edi
	pop	ebx
; Line 176
	ret	0
	npad	1
$LN43@asn1_item_:
	DD	$LN11@asn1_item_
	DD	$LN25@asn1_item_
	DD	$LN15@asn1_item_
	DD	$LN21@asn1_item_
	DD	$LN23@asn1_item_
	DD	$LN14@asn1_item_
	DD	$LN25@asn1_item_
_asn1_item_combine_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_primitive_free
_TEXT	SEGMENT
_pval$ = 8						; size = 4
_it$ = 12						; size = 4
_ASN1_primitive_free PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_fre.c
; Line 198
	mov	ecx, DWORD PTR _it$[esp-4]
	push	esi
	test	ecx, ecx
	je	SHORT $LN21@ASN1_primi
; Line 200
	mov	eax, DWORD PTR [ecx+16]
; Line 201
	test	eax, eax
	je	SHORT $LN6@ASN1_primi
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	je	SHORT $LN6@ASN1_primi
	pop	esi
; Line 202
	mov	DWORD PTR _it$[esp-4], ecx
	jmp	eax
$LN6@ASN1_primi:
; Line 213
	cmp	BYTE PTR [ecx], 5
; Line 215
	mov	esi, DWORD PTR _pval$[esp]
	jne	SHORT $LN9@ASN1_primi
; Line 214
	or	edx, -1
; Line 217
	jmp	SHORT $LN26@ASN1_primi
$LN9@ASN1_primi:
; Line 218
	mov	edx, DWORD PTR [ecx+4]
; Line 219
	cmp	edx, 1
	jne	SHORT $LN26@ASN1_primi
	jmp	SHORT $LN12@ASN1_primi
$LN21@ASN1_primi:
; Line 208
	mov	eax, DWORD PTR _pval$[esp]
	mov	eax, DWORD PTR [eax]
; Line 209
	mov	edx, DWORD PTR [eax]
; Line 210
	lea	esi, DWORD PTR [eax+4]
$LN26@ASN1_primi:
; Line 211
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN1@ASN1_primi
$LN12@ASN1_primi:
; Line 223
	add	edx, 4
	cmp	edx, 10					; 0000000aH
	ja	SHORT $LN19@ASN1_primi
	movzx	eax, BYTE PTR $LN22@ASN1_primi[edx]
	jmp	DWORD PTR $LN29@ASN1_primi[eax*4]
$LN13@ASN1_primi:
; Line 225
	push	DWORD PTR [esi]
	call	_ASN1_OBJECT_free
; Line 244
	add	esp, 4
; Line 248
	mov	DWORD PTR [esi], 0
	pop	esi
; Line 249
	ret	0
$LN14@ASN1_primi:
; Line 229
	test	ecx, ecx
	je	SHORT $LN15@ASN1_primi
; Line 230
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [esi], eax
	pop	esi
; Line 249
	ret	0
$LN15@ASN1_primi:
; Line 232
	mov	DWORD PTR [esi], -1
	pop	esi
; Line 249
	ret	0
$LN18@ASN1_primi:
; Line 239
	push	0
	push	esi
	call	_ASN1_primitive_free
; Line 240
	push	DWORD PTR [esi]
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 248
	mov	DWORD PTR [esi], 0
	pop	esi
; Line 249
	ret	0
$LN19@ASN1_primi:
; Line 244
	push	DWORD PTR [esi]
	call	_ASN1_STRING_free
; Line 245
	mov	DWORD PTR [esi], 0
	add	esp, 4
$LN2@ASN1_primi:
; Line 248
	mov	DWORD PTR [esi], 0
$LN1@ASN1_primi:
	pop	esi
; Line 249
	ret	0
	npad	1
$LN29@ASN1_primi:
	DD	$LN18@ASN1_primi
	DD	$LN14@ASN1_primi
	DD	$LN2@ASN1_primi
	DD	$LN13@ASN1_primi
	DD	$LN19@ASN1_primi
$LN22@ASN1_primi:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
_ASN1_primitive_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_template_free
_TEXT	SEGMENT
_pval$ = 8						; size = 4
_vtmp$1 = 12						; size = 4
_tt$ = 12						; size = 4
_ASN1_template_free PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_fre.c
; Line 179
	push	ebx
; Line 181
	mov	ebx, DWORD PTR _tt$[esp]
	mov	eax, DWORD PTR [ebx]
	test	al, 6
	je	SHORT $LN5@ASN1_templ
; Line 182
	push	ebp
	mov	ebp, DWORD PTR _pval$[esp+4]
	push	esi
	push	edi
; Line 183
	xor	esi, esi
	mov	edi, DWORD PTR [ebp]
	push	edi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@ASN1_templ
$LL4@ASN1_templ:
; Line 185
	push	esi
	push	edi
	call	_sk_value
	add	esp, 8
	mov	DWORD PTR _vtmp$1[esp+12], eax
; Line 186
	mov	eax, DWORD PTR [ebx+16]
	push	0
	call	eax
	push	eax
	lea	eax, DWORD PTR _vtmp$1[esp+20]
	push	eax
	call	_asn1_item_combine_free
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 16					; 00000010H
	cmp	esi, eax
	jl	SHORT $LL4@ASN1_templ
$LN3@ASN1_templ:
; Line 188
	push	edi
	call	_sk_free
	add	esp, 4
; Line 189
	mov	DWORD PTR [ebp], 0
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 193
	ret	0
$LN5@ASN1_templ:
; Line 191
	and	eax, 1024				; 00000400H
	push	eax
	mov	eax, DWORD PTR [ebx+16]
	call	eax
	push	eax
	push	DWORD PTR _pval$[esp+8]
	call	_asn1_item_combine_free
	add	esp, 12					; 0000000cH
	pop	ebx
; Line 193
	ret	0
_ASN1_template_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_item_ex_free
_TEXT	SEGMENT
_pval$ = 8						; size = 4
_it$ = 12						; size = 4
_ASN1_item_ex_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_fre.c
; Line 77
	push	0
	push	DWORD PTR _it$[esp]
	push	DWORD PTR _pval$[esp+4]
	call	_asn1_item_combine_free
	add	esp, 12					; 0000000cH
; Line 78
	ret	0
_ASN1_item_ex_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_item_free
_TEXT	SEGMENT
_val$ = 8						; size = 4
_it$ = 12						; size = 4
_ASN1_item_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_fre.c
; Line 72
	push	0
	push	DWORD PTR _it$[esp]
	lea	eax, DWORD PTR _val$[esp+4]
	push	eax
	call	_asn1_item_combine_free
	add	esp, 12					; 0000000cH
; Line 73
	ret	0
_ASN1_item_free ENDP
_TEXT	ENDS
END
