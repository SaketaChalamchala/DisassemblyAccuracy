; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_rand
PUBLIC	_BN_pseudo_rand
PUBLIC	_BN_rand_range
PUBLIC	_BN_pseudo_rand_range
PUBLIC	_BN_bntest_rand
PUBLIC	??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@ ; `string'
EXTRN	__imp___time64:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_bin2bn:PROC
EXTRN	_BN_sub:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_cmp:PROC
EXTRN	_BN_is_bit_set:PROC
EXTRN	_RAND_bytes:PROC
EXTRN	_RAND_pseudo_bytes:PROC
EXTRN	_RAND_add:PROC
EXTRN	__chkstk:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@
CONST	SEGMENT
??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@ DB '.\crypto\bn\bn_ran'
	DB	'd.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bn_rand_range
_TEXT	SEGMENT
_bn_rand$1$ = 8						; size = 4
_pseudo$ = 8						; size = 4
_r$ = 12						; size = 4
tv203 = 16						; size = 4
_range$ = 16						; size = 4
_bn_rand_range PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 224
	cmp	DWORD PTR _pseudo$[esp-4], 0
	mov	eax, OFFSET _BN_rand
	push	ebx
	push	edi
; Line 229
	mov	edi, DWORD PTR _range$[esp+4]
	mov	ecx, OFFSET _BN_pseudo_rand
	cmovne	eax, ecx
	mov	ebx, 100				; 00000064H
	mov	DWORD PTR _bn_rand$1$[esp+4], eax
	cmp	DWORD PTR [edi+12], 0
	jne	$LN9@bn_rand_ra
	cmp	DWORD PTR [edi+4], 0
	je	$LN9@bn_rand_ra
; Line 234
	push	ebp
	push	esi
	push	edi
	call	_BN_num_bits
	mov	ebp, eax
	add	esp, 4
; Line 238
	cmp	ebp, 1
	jne	SHORT $LN10@bn_rand_ra
; Line 239
	push	0
	push	DWORD PTR _r$[esp+16]
	call	_BN_set_word
	add	esp, 8
; Line 284
	mov	eax, ebp
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 285
	ret	0
$LN10@bn_rand_ra:
; Line 240
	lea	eax, DWORD PTR [ebp-2]
	push	eax
	push	edi
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	$LN40@bn_rand_ra
	lea	eax, DWORD PTR [ebp-3]
	push	eax
	push	edi
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	$LN40@bn_rand_ra
	mov	esi, DWORD PTR _r$[esp+12]
	lea	eax, DWORD PTR [ebp+1]
	mov	ebp, DWORD PTR _bn_rand$1$[esp+12]
	mov	DWORD PTR tv203[esp+12], eax
$LL4@bn_rand_ra:
; Line 246
	push	0
	push	-1
	push	eax
	push	esi
	call	ebp
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN30@bn_rand_ra
; Line 254
	push	edi
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN18@bn_rand_ra
; Line 255
	push	edi
	push	esi
	push	esi
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN30@bn_rand_ra
; Line 257
	push	edi
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN18@bn_rand_ra
; Line 258
	push	edi
	push	esi
	push	esi
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN30@bn_rand_ra
$LN18@bn_rand_ra:
; Line 262
	sub	ebx, 1
	je	SHORT $LN29@bn_rand_ra
; Line 268
	push	edi
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN6@bn_rand_ra
	mov	eax, DWORD PTR tv203[esp+12]
	jmp	SHORT $LL4@bn_rand_ra
$LN29@bn_rand_ra:
; Line 263
	push	263					; 00000107H
; Line 264
	jmp	SHORT $LN43@bn_rand_ra
$LN40@bn_rand_ra:
; Line 247
	mov	esi, DWORD PTR _r$[esp+12]
	npad	6
$LL7@bn_rand_ra:
; Line 272
	push	0
	push	-1
	push	ebp
	push	esi
	call	DWORD PTR _bn_rand$1$[esp+28]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN30@bn_rand_ra
; Line 275
	sub	ebx, 1
	je	SHORT $LN31@bn_rand_ra
; Line 280
	push	edi
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LL7@bn_rand_ra
$LN6@bn_rand_ra:
	pop	esi
	pop	ebp
	pop	edi
; Line 284
	mov	eax, 1
	pop	ebx
; Line 285
	ret	0
$LN31@bn_rand_ra:
; Line 276
	push	276					; 00000114H
$LN43@bn_rand_ra:
	push	OFFSET ??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@
	push	113					; 00000071H
	push	122					; 0000007aH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN30@bn_rand_ra:
; Line 277
	pop	esi
	pop	ebp
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 285
	ret	0
$LN9@bn_rand_ra:
; Line 230
	push	230					; 000000e6H
	push	OFFSET ??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@
	push	115					; 00000073H
	push	122					; 0000007aH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 231
	xor	eax, eax
	pop	edi
	pop	ebx
; Line 285
	ret	0
_bn_rand_range ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _bnrand
_TEXT	SEGMENT
_bit$1$ = -16						; size = 4
_mask$1$ = -12						; size = 4
_tim$ = -8						; size = 8
_pseudorand$ = 8					; size = 4
_rnd$ = 12						; size = 4
_c$1 = 16						; size = 1
_bits$ = 16						; size = 4
_top$ = 20						; size = 4
_bottom$ = 24						; size = 4
_bnrand	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 119
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 124
	mov	ecx, DWORD PTR _bits$[esp+12]
	push	ebp
	xor	ebp, ebp
	test	ecx, ecx
	js	$LN6@bnrand
	cmp	ecx, 1
	jne	SHORT $LN5@bnrand
	cmp	DWORD PTR _top$[esp+16], ebp
	jg	$LN6@bnrand
$LN7@bnrand:
; Line 134
	lea	eax, DWORD PTR [ecx+7]
	cdq
	and	edx, 7
	push	ebx
	push	esi
	lea	ebx, DWORD PTR [edx+eax]
; Line 135
	lea	eax, DWORD PTR [ecx-1]
	sar	ebx, 3
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN36@bnrand
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN36@bnrand:
	mov	DWORD PTR _bit$1$[esp+28], eax
; Line 136
	lea	ecx, DWORD PTR [eax+1]
; Line 138
	push	138					; 0000008aH
	mov	eax, 255				; 000000ffH
	shl	eax, cl
	push	OFFSET ??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@
	push	ebx
	mov	DWORD PTR _mask$1$[esp+40], eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 139
	test	esi, esi
	jne	SHORT $LN8@bnrand
; Line 140
	push	140					; 0000008cH
	push	OFFSET ??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@
	push	65					; 00000041H
	push	127					; 0000007fH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 201
	mov	eax, ebp
	pop	esi
	pop	ebx
	pop	ebp
; Line 202
	add	esp, 16					; 00000010H
	ret	0
$LN5@bnrand:
; Line 129
	test	ecx, ecx
	jne	SHORT $LN7@bnrand
; Line 130
	push	ecx
	push	DWORD PTR _rnd$[esp+20]
	call	_BN_set_word
	add	esp, 8
; Line 131
	mov	eax, 1
	pop	ebp
; Line 202
	add	esp, 16					; 00000010H
	ret	0
$LN8@bnrand:
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\time.h
; Line 535
	lea	eax, DWORD PTR _tim$[esp+28]
	push	edi
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 146
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _tim$[esp+40]
	movsd	QWORD PTR [esp], xmm0
	push	8
	push	eax
	call	_RAND_add
; Line 148
	mov	edi, DWORD PTR _pseudorand$[esp+44]
	add	esp, 16					; 00000010H
; Line 149
	push	ebx
	push	esi
	test	edi, edi
	je	SHORT $LN9@bnrand
	call	_RAND_pseudo_bytes
	add	esp, 8
	cmp	eax, -1
	je	$err$38
; Line 157
	cmp	edi, 2
	jne	SHORT $LN3@bnrand
; Line 164
	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN3@bnrand
$LL4@bnrand:
; Line 165
	lea	eax, DWORD PTR _c$1[esp+28]
	push	1
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	js	$err$38
; Line 167
	mov	al, BYTE PTR _c$1[esp+28]
	cmp	al, 128					; 00000080H
	jb	SHORT $LN15@bnrand
	test	edi, edi
	jle	SHORT $LN15@bnrand
; Line 168
	mov	al, BYTE PTR [edi+esi-1]
	mov	BYTE PTR [edi+esi], al
	jmp	SHORT $LN2@bnrand
$LN15@bnrand:
; Line 169
	cmp	al, 42					; 0000002aH
	jae	SHORT $LN17@bnrand
; Line 170
	mov	BYTE PTR [edi+esi], 0
	jmp	SHORT $LN2@bnrand
$LN17@bnrand:
; Line 171
	cmp	al, 84					; 00000054H
	jae	SHORT $LN2@bnrand
; Line 172
	mov	BYTE PTR [edi+esi], 255			; 000000ffH
$LN2@bnrand:
; Line 164
	inc	edi
	cmp	edi, ebx
	jl	SHORT $LL4@bnrand
	jmp	SHORT $LN3@bnrand
$LN9@bnrand:
; Line 152
	call	_RAND_bytes
	add	esp, 8
	test	eax, eax
	jle	SHORT $err$38
$LN3@bnrand:
; Line 177
	mov	eax, DWORD PTR _top$[esp+28]
	test	eax, eax
	js	SHORT $LN22@bnrand
; Line 179
	mov	ecx, DWORD PTR _bit$1$[esp+32]
; Line 178
	je	SHORT $LN21@bnrand
; Line 179
	test	ecx, ecx
	jne	SHORT $LN23@bnrand
; Line 181
	or	BYTE PTR [esi+1], 128			; 00000080H
	mov	BYTE PTR [esi], 1
; Line 182
	jmp	SHORT $LN22@bnrand
$LN23@bnrand:
; Line 183
	dec	ecx
	mov	al, 3
	shl	al, cl
	or	BYTE PTR [esi], al
; Line 185
	jmp	SHORT $LN22@bnrand
$LN21@bnrand:
; Line 186
	movzx	eax, BYTE PTR [esi]
	bts	eax, ecx
	mov	BYTE PTR [esi], al
$LN22@bnrand:
; Line 189
	mov	eax, DWORD PTR _mask$1$[esp+32]
	not	al
	and	BYTE PTR [esi], al
; Line 190
	cmp	DWORD PTR _bottom$[esp+28], ebp
	je	SHORT $LN25@bnrand
; Line 191
	or	BYTE PTR [ebx+esi-1], 1
$LN25@bnrand:
; Line 192
	push	DWORD PTR _rnd$[esp+28]
	push	ebx
	push	esi
	call	_BN_bin2bn
	add	esp, 12					; 0000000cH
	mov	ecx, 1
	test	eax, eax
	cmovne	ebp, ecx
$err$38:
; Line 197
	push	ebx
	push	esi
	call	_OPENSSL_cleanse
; Line 198
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 201
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 202
	add	esp, 16					; 00000010H
	ret	0
$LN6@bnrand:
; Line 125
	push	125					; 0000007dH
	push	OFFSET ??_C@_0BG@BDCFJOOA@?4?2crypto?2bn?2bn_rand?4c?$AA@
	push	118					; 00000076H
	push	127					; 0000007fH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 126
	xor	eax, eax
	pop	ebp
; Line 202
	add	esp, 16					; 00000010H
	ret	0
_bnrand	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_bntest_rand
_TEXT	SEGMENT
_rnd$ = 8						; size = 4
_bits$ = 12						; size = 4
_top$ = 16						; size = 4
_bottom$ = 20						; size = 4
_BN_bntest_rand PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 217
	push	DWORD PTR _bottom$[esp-4]
	push	DWORD PTR _top$[esp]
	push	DWORD PTR _bits$[esp+4]
	push	DWORD PTR _rnd$[esp+8]
	push	2
	call	_bnrand
	add	esp, 20					; 00000014H
; Line 218
	ret	0
_BN_bntest_rand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_pseudo_rand_range
_TEXT	SEGMENT
_r$ = 8							; size = 4
_range$ = 12						; size = 4
_BN_pseudo_rand_range PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 294
	push	DWORD PTR _range$[esp-4]
	push	DWORD PTR _r$[esp]
	push	1
	call	_bn_rand_range
	add	esp, 12					; 0000000cH
; Line 295
	ret	0
_BN_pseudo_rand_range ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_rand_range
_TEXT	SEGMENT
_r$ = 8							; size = 4
_range$ = 12						; size = 4
_BN_rand_range PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 289
	push	DWORD PTR _range$[esp-4]
	push	DWORD PTR _r$[esp]
	push	0
	call	_bn_rand_range
	add	esp, 12					; 0000000cH
; Line 290
	ret	0
_BN_rand_range ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_pseudo_rand
_TEXT	SEGMENT
_rnd$ = 8						; size = 4
_bits$ = 12						; size = 4
_top$ = 16						; size = 4
_bottom$ = 20						; size = 4
_BN_pseudo_rand PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 211
	push	DWORD PTR _bottom$[esp-4]
	push	DWORD PTR _top$[esp]
	push	DWORD PTR _bits$[esp+4]
	push	DWORD PTR _rnd$[esp+8]
	push	1
	call	_bnrand
	add	esp, 20					; 00000014H
; Line 212
	ret	0
_BN_pseudo_rand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_rand
_TEXT	SEGMENT
_rnd$ = 8						; size = 4
_bits$ = 12						; size = 4
_top$ = 16						; size = 4
_bottom$ = 20						; size = 4
_BN_rand PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_rand.c
; Line 206
	push	DWORD PTR _bottom$[esp-4]
	push	DWORD PTR _top$[esp]
	push	DWORD PTR _bits$[esp+4]
	push	DWORD PTR _rnd$[esp+8]
	push	0
	call	_bnrand
	add	esp, 20					; 00000014H
; Line 207
	ret	0
_BN_rand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\time.h
; Line 535
	jmp	DWORD PTR __imp___time64
_time	ENDP
_TEXT	ENDS
END
