; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CRYPTO_ccm128_init
PUBLIC	_CRYPTO_ccm128_setiv
PUBLIC	_CRYPTO_ccm128_aad
PUBLIC	_CRYPTO_ccm128_encrypt
PUBLIC	_CRYPTO_ccm128_decrypt
PUBLIC	_CRYPTO_ccm128_encrypt_ccm64
PUBLIC	_CRYPTO_ccm128_decrypt_ccm64
PUBLIC	_CRYPTO_ccm128_tag
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _ctr64_add
_TEXT	SEGMENT
_counter$ = 8						; size = 4
_inc$ = 12						; size = 4
_ctr64_add PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 334
	push	ebx
; Line 337
	mov	ebx, DWORD PTR _inc$[esp]
	xor	eax, eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _counter$[esp+8]
	mov	esi, 8
$LL4@ctr64_add:
; Line 340
	movzx	ecx, BYTE PTR [esi+edi+7]
	dec	esi
	add	eax, ecx
	movzx	edx, bl
	add	eax, edx
; Line 343
	shr	ebx, 8
	mov	BYTE PTR [esi+edi+8], al
	shr	eax, 8
; Line 344
	test	esi, esi
	je	SHORT $LN5@ctr64_add
	test	ebx, ebx
	jne	SHORT $LL4@ctr64_add
	test	eax, eax
	jne	SHORT $LL4@ctr64_add
$LN5@ctr64_add:
	pop	edi
	pop	esi
	pop	ebx
; Line 345
	ret	0
_ctr64_add ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ctr64_inc
_TEXT	SEGMENT
_counter$ = 8						; size = 4
_ctr64_inc PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 165
	mov	edx, DWORD PTR _counter$[esp-4]
	mov	eax, 8
	npad	7
$LL4@ctr64_inc:
; Line 167
	dec	eax
; Line 169
	add	BYTE PTR [eax+edx+8], 1
; Line 171
	jne	SHORT $LN3@ctr64_inc
; Line 173
	test	eax, eax
	jne	SHORT $LL4@ctr64_inc
$LN3@ctr64_inc:
; Line 174
	ret	0
_ctr64_inc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_tag
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_tag$ = 12						; size = 4
_len$ = 16						; size = 4
_CRYPTO_ccm128_tag PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 474
	mov	ecx, DWORD PTR _ctx$[esp-4]
	push	esi
	movzx	eax, BYTE PTR [ecx]
	shr	eax, 3
	and	eax, 7
	lea	esi, DWORD PTR [eax*2+2]
; Line 475
	cmp	DWORD PTR _len$[esp], esi
	jae	SHORT $LN2@CRYPTO_ccm
; Line 476
	xor	eax, eax
	pop	esi
; Line 479
	ret	0
$LN2@CRYPTO_ccm:
; Line 477
	push	esi
	add	ecx, 16					; 00000010H
	push	ecx
	push	DWORD PTR _tag$[esp+8]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 478
	mov	eax, esi
	pop	esi
; Line 479
	ret	0
_CRYPTO_ccm128_tag ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_decrypt_ccm64
_TEXT	SEGMENT
_flags0$1$ = -45					; size = 1
_out$GSCopy$1$ = -44					; size = 4
_key$1$ = -40						; size = 4
_block$1$ = -36						; size = 4
_stream$GSCopy$1$ = -32					; size = 4
tv545 = -32						; size = 4
_ctx$GSCopy$1$ = -28					; size = 4
_i$3$ = -24						; size = 4
_scratch$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_inp$ = 12						; size = 4
_out$ = 16						; size = 4
_len$ = 20						; size = 4
_stream$ = 24						; size = 4
_CRYPTO_ccm128_decrypt_ccm64 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 414
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	mov	eax, DWORD PTR _out$[esp+44]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _inp$[esp+52]
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+56]
	mov	DWORD PTR _out$GSCopy$1$[esp+60], eax
	mov	eax, DWORD PTR _stream$[esp+56]
	mov	DWORD PTR _stream$GSCopy$1$[esp+60], eax
; Line 417
	mov	bl, BYTE PTR [esi]
; Line 418
	mov	ecx, DWORD PTR [esi+40]
; Line 419
	mov	eax, DWORD PTR [esi+44]
	mov	DWORD PTR _ctx$GSCopy$1$[esp+60], esi
	mov	BYTE PTR _flags0$1$[esp+60], bl
	mov	DWORD PTR _block$1$[esp+60], ecx
	mov	DWORD PTR _key$1$[esp+60], eax
; Line 425
	test	bl, 64					; 00000040H
	jne	SHORT $LN11@CRYPTO_ccm
; Line 426
	push	eax
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	ecx
	add	esp, 12					; 0000000cH
$LN11@CRYPTO_ccm:
; Line 428
	movzx	eax, bl
; Line 429
	mov	edx, 15					; 0000000fH
	and	eax, 7
	xor	ecx, ecx
	sub	edx, eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR _i$3$[esp+60], edx
	cmp	edx, 15					; 0000000fH
	jae	SHORT $LN3@CRYPTO_ccm
$LL4@CRYPTO_ccm:
; Line 430
	movzx	eax, BYTE PTR [esi+edx]
	or	ecx, eax
; Line 431
	mov	BYTE PTR [esi+edx], 0
	inc	edx
; Line 432
	shl	ecx, 8
	cmp	edx, 15					; 0000000fH
	jb	SHORT $LL4@CRYPTO_ccm
$LN3@CRYPTO_ccm:
; Line 434
	movzx	eax, BYTE PTR [esi+15]
; Line 437
	mov	ebx, DWORD PTR _len$[esp+56]
	or	ecx, eax
	mov	BYTE PTR [esi+15], 1
	cmp	ecx, ebx
	je	SHORT $LN12@CRYPTO_ccm
; Line 438
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 467
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN12@CRYPTO_ccm:
	push	edi
; Line 440
	mov	edi, ebx
	shr	edi, 4
	test	edi, edi
	je	SHORT $LN14@CRYPTO_ccm
; Line 441
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	push	DWORD PTR _key$1$[esp+72]
	push	edi
	push	DWORD PTR _out$GSCopy$1$[esp+80]
	push	ebp
	call	DWORD PTR _stream$GSCopy$1$[esp+88]
; Line 442
	shl	edi, 4
	add	esp, 24					; 00000018H
; Line 444
	add	DWORD PTR _out$GSCopy$1$[esp+64], edi
	add	ebp, edi
; Line 445
	sub	ebx, edi
; Line 446
	je	SHORT $LN40@CRYPTO_ccm
; Line 447
	shr	edi, 4
	push	edi
	push	esi
	call	_ctr64_add
	add	esp, 8
$LN14@CRYPTO_ccm:
; Line 450
	test	ebx, ebx
	je	SHORT $LN40@CRYPTO_ccm
; Line 451
	push	DWORD PTR _key$1$[esp+64]
	lea	eax, DWORD PTR _scratch$[esp+68]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+76]
	add	esp, 12					; 0000000cH
; Line 452
	xor	edi, edi
	test	ebx, ebx
	je	SHORT $LN6@CRYPTO_ccm
	lea	eax, DWORD PTR _scratch$[esp+64]
	sub	ebp, eax
	sub	DWORD PTR _out$GSCopy$1$[esp+64], eax
	lea	eax, DWORD PTR [esi+16]
	mov	esi, DWORD PTR _out$GSCopy$1$[esp+64]
	mov	DWORD PTR tv545[esp+64], eax
$LL7@CRYPTO_ccm:
; Line 453
	lea	ecx, DWORD PTR _scratch$[esp+64]
	add	ecx, edi
	movzx	edx, BYTE PTR [ecx+ebp]
	movzx	eax, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR tv545[esp+64]
	mov	BYTE PTR [esi+ecx], dl
	xor	BYTE PTR [eax+edi], dl
	inc	edi
	cmp	edi, ebx
	jb	SHORT $LL7@CRYPTO_ccm
	mov	esi, DWORD PTR _ctx$GSCopy$1$[esp+64]
$LN6@CRYPTO_ccm:
; Line 454
	mov	ebx, DWORD PTR _key$1$[esp+64]
	lea	eax, DWORD PTR [esi+16]
	mov	ebp, DWORD PTR _block$1$[esp+64]
	push	ebx
	push	eax
	push	eax
	call	ebp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN15@CRYPTO_ccm
$LN40@CRYPTO_ccm:
	mov	ebp, DWORD PTR _block$1$[esp+64]
	mov	ebx, DWORD PTR _key$1$[esp+64]
$LN15@CRYPTO_ccm:
; Line 457
	mov	edx, DWORD PTR _i$3$[esp+64]
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN9@CRYPTO_ccm
; Line 458
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR [edx+esi]
	sub	ecx, edx
	xor	eax, eax
	mov	edx, ecx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
$LN9@CRYPTO_ccm:
; Line 460
	push	ebx
	lea	eax, DWORD PTR _scratch$[esp+68]
	push	eax
	push	esi
	call	ebp
; Line 461
	mov	eax, DWORD PTR _scratch$[esp+76]
	add	esp, 12					; 0000000cH
	xor	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _scratch$[esp+68]
	xor	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR _scratch$[esp+72]
	xor	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR _scratch$[esp+76]
	xor	DWORD PTR [esi+28], eax
; Line 464
	mov	al, BYTE PTR _flags0$1$[esp+64]
; Line 467
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	pop	edi
	mov	BYTE PTR [esi], al
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_CRYPTO_ccm128_decrypt_ccm64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_encrypt_ccm64
_TEXT	SEGMENT
_flags0$1$ = -61					; size = 1
_out$GSCopy$1$ = -60					; size = 4
_key$1$ = -56						; size = 4
_block$1$ = -52						; size = 4
_stream$GSCopy$1$ = -48					; size = 4
tv854 = -48						; size = 4
_inp$GSCopy$1$ = -44					; size = 4
tv853 = -40						; size = 4
tv852 = -36						; size = 4
tv859 = -32						; size = 4
_ctx$GSCopy$1$ = -28					; size = 4
_i$4$ = -24						; size = 4
_scratch$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_inp$ = 12						; size = 4
_out$ = 16						; size = 4
_len$ = 20						; size = 4
_stream$ = 24						; size = 4
_CRYPTO_ccm128_encrypt_ccm64 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 350
	mov	eax, 64					; 00000040H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+64], eax
	mov	eax, DWORD PTR _out$[esp+60]
	push	ebx
	mov	ebx, DWORD PTR _inp$[esp+64]
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+68]
	mov	DWORD PTR _out$GSCopy$1$[esp+72], eax
	mov	eax, DWORD PTR _stream$[esp+68]
	mov	DWORD PTR _stream$GSCopy$1$[esp+72], eax
; Line 353
	mov	dl, BYTE PTR [esi]
; Line 354
	mov	ecx, DWORD PTR [esi+40]
; Line 355
	mov	eax, DWORD PTR [esi+44]
	mov	DWORD PTR _ctx$GSCopy$1$[esp+72], esi
	mov	DWORD PTR _inp$GSCopy$1$[esp+72], ebx
	mov	BYTE PTR _flags0$1$[esp+72], dl
	mov	DWORD PTR _block$1$[esp+72], ecx
	mov	DWORD PTR _key$1$[esp+72], eax
	push	edi
; Line 361
	test	dl, 64					; 00000040H
	jne	SHORT $LN14@CRYPTO_ccm
; Line 362
	push	eax
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	ecx
	mov	dl, BYTE PTR _flags0$1$[esp+88]
	add	esp, 12					; 0000000cH
	add	DWORD PTR [esi+32], 1
	adc	DWORD PTR [esi+36], 0
$LN14@CRYPTO_ccm:
; Line 364
	movzx	eax, dl
; Line 365
	xor	ecx, ecx
	and	eax, 7
	mov	edx, 15					; 0000000fH
	sub	edx, eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR _i$4$[esp+76], edx
	cmp	edx, 15					; 0000000fH
	jae	SHORT $LN3@CRYPTO_ccm
$LL4@CRYPTO_ccm:
; Line 366
	movzx	eax, BYTE PTR [esi+edx]
	or	ecx, eax
; Line 367
	mov	BYTE PTR [esi+edx], 0
	inc	edx
; Line 368
	shl	ecx, 8
	cmp	edx, 15					; 0000000fH
	jb	SHORT $LL4@CRYPTO_ccm
$LN3@CRYPTO_ccm:
; Line 370
	movzx	eax, BYTE PTR [esi+15]
; Line 373
	mov	edi, DWORD PTR _len$[esp+72]
	or	ecx, eax
	mov	BYTE PTR [esi+15], 1
	cmp	ecx, edi
	je	SHORT $LN15@CRYPTO_ccm
; Line 374
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 409
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN15@CRYPTO_ccm:
; Line 376
	lea	eax, DWORD PTR [edi+15]
	or	eax, 8
	shr	eax, 3
	add	DWORD PTR [esi+32], eax
	adc	DWORD PTR [esi+36], 0
; Line 377
	cmp	DWORD PTR [esi+36], 536870912		; 20000000H
	jb	SHORT $LN16@CRYPTO_ccm
	ja	SHORT $LN55@CRYPTO_ccm
	cmp	DWORD PTR [esi+32], 0
	jbe	SHORT $LN16@CRYPTO_ccm
$LN55@CRYPTO_ccm:
	pop	edi
	pop	esi
; Line 378
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 409
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN16@CRYPTO_ccm:
	push	ebp
; Line 380
	mov	ebp, edi
	shr	ebp, 4
	test	ebp, ebp
	je	SHORT $LN18@CRYPTO_ccm
; Line 381
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	push	DWORD PTR _key$1$[esp+88]
	push	ebp
	push	DWORD PTR _out$GSCopy$1$[esp+96]
	push	ebx
	call	DWORD PTR _stream$GSCopy$1$[esp+104]
; Line 382
	shl	ebp, 4
	add	esp, 24					; 00000018H
; Line 384
	add	DWORD PTR _out$GSCopy$1$[esp+80], ebp
	add	ebx, ebp
; Line 385
	sub	edi, ebp
	mov	DWORD PTR _inp$GSCopy$1$[esp+80], ebx
	mov	DWORD PTR _len$[esp+76], edi
; Line 386
	je	$LN59@CRYPTO_ccm
; Line 387
	shr	ebp, 4
	push	ebp
	push	esi
	call	_ctr64_add
	add	esp, 8
$LN18@CRYPTO_ccm:
; Line 390
	test	edi, edi
	je	$LN59@CRYPTO_ccm
; Line 391
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN6@CRYPTO_ccm
$LL7@CRYPTO_ccm:
; Line 392
	mov	al, BYTE PTR [ebx+ecx]
	xor	BYTE PTR [esi+ecx+16], al
	inc	ecx
	cmp	ecx, edi
	jb	SHORT $LL7@CRYPTO_ccm
$LN6@CRYPTO_ccm:
; Line 393
	mov	ebp, DWORD PTR _key$1$[esp+80]
	lea	eax, DWORD PTR [esi+16]
	push	ebp
	push	eax
	push	eax
	call	DWORD PTR _block$1$[esp+92]
; Line 394
	push	ebp
	lea	eax, DWORD PTR _scratch$[esp+96]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+104]
	add	esp, 24					; 00000018H
; Line 395
	xor	edx, edx
	test	edi, edi
	je	$LN9@CRYPTO_ccm
; Line 396
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+80]
	cmp	edi, 32					; 00000020H
	jb	$LN37@CRYPTO_ccm
	lea	ecx, DWORD PTR [ebp-1]
	lea	eax, DWORD PTR _scratch$[esp+edi+79]
	add	ecx, edi
	cmp	ebp, eax
	ja	SHORT $LN38@CRYPTO_ccm
	lea	eax, DWORD PTR _scratch$[esp+80]
	cmp	ecx, eax
	jae	$LN37@CRYPTO_ccm
$LN38@CRYPTO_ccm:
	lea	eax, DWORD PTR [ebx-1]
	add	eax, edi
	cmp	ebp, eax
	ja	SHORT $LN39@CRYPTO_ccm
	cmp	ecx, ebx
	jae	SHORT $LN37@CRYPTO_ccm
$LN39@CRYPTO_ccm:
; Line 395
	mov	esi, ebp
	mov	eax, edi
	sub	esi, ebx
	and	eax, 31					; 0000001fH
	mov	DWORD PTR tv854[esp+80], esi
	mov	ecx, edi
	lea	esi, DWORD PTR _scratch$[esp+80]
	sub	ecx, eax
	sub	esi, ebx
	mov	eax, ebx
	mov	DWORD PTR tv853[esp+80], esi
	lea	esi, DWORD PTR _scratch$[esp+96]
	mov	edi, DWORD PTR tv853[esp+80]
	sub	esi, ebx
	lea	ebx, DWORD PTR [ebp+16]
	mov	DWORD PTR tv852[esp+80], esi
	mov	ebp, DWORD PTR tv854[esp+80]
	mov	DWORD PTR tv859[esp+80], ebx
	mov	ebx, esi
$LL10@CRYPTO_ccm:
; Line 396
	movups	xmm0, XMMWORD PTR [eax]
	mov	esi, DWORD PTR tv859[esp+80]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [edi+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax+ebp-32], xmm1
	movups	xmm0, XMMWORD PTR [eax-16]
	movups	xmm1, XMMWORD PTR [ebx+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [esi+edx], xmm1
	mov	esi, DWORD PTR _ctx$GSCopy$1$[esp+80]
	add	edx, 32					; 00000020H
	cmp	edx, ecx
	jb	SHORT $LL10@CRYPTO_ccm
	mov	edi, DWORD PTR _len$[esp+76]
	mov	ebx, DWORD PTR _inp$GSCopy$1$[esp+80]
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+80]
$LN37@CRYPTO_ccm:
; Line 395
	cmp	edx, edi
	jae	SHORT $LN59@CRYPTO_ccm
	lea	eax, DWORD PTR _scratch$[esp+80]
	sub	ebx, eax
	sub	ebp, eax
$LL36@CRYPTO_ccm:
; Line 396
	lea	ecx, DWORD PTR _scratch$[esp+80]
	add	ecx, edx
	inc	edx
	mov	al, BYTE PTR [ebx+ecx]
	xor	al, BYTE PTR [ecx]
	mov	BYTE PTR [ecx+ebp], al
	cmp	edx, edi
	jb	SHORT $LL36@CRYPTO_ccm
$LN59@CRYPTO_ccm:
	mov	ebp, DWORD PTR _key$1$[esp+80]
$LN9@CRYPTO_ccm:
; Line 399
	mov	edx, DWORD PTR _i$4$[esp+80]
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN12@CRYPTO_ccm
; Line 400
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR [edx+esi]
	sub	ecx, edx
	xor	eax, eax
	mov	edx, ecx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
$LN12@CRYPTO_ccm:
; Line 402
	push	ebp
	lea	eax, DWORD PTR _scratch$[esp+84]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+92]
; Line 403
	mov	eax, DWORD PTR _scratch$[esp+92]
	add	esp, 12					; 0000000cH
	xor	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _scratch$[esp+84]
	xor	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR _scratch$[esp+88]
	xor	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR _scratch$[esp+92]
	xor	DWORD PTR [esi+28], eax
; Line 406
	mov	al, BYTE PTR _flags0$1$[esp+80]
; Line 409
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	pop	ebp
	pop	edi
	mov	BYTE PTR [esi], al
	xor	eax, eax
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
_CRYPTO_ccm128_encrypt_ccm64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_decrypt
_TEXT	SEGMENT
_flags0$1$ = -45					; size = 1
_out$GSCopy$1$ = -44					; size = 4
_key$1$ = -40						; size = 4
_block$1$ = -36						; size = 4
tv706 = -32						; size = 4
tv692 = -32						; size = 4
_ctx$GSCopy$1$ = -28					; size = 4
_i$3$ = -24						; size = 4
_scratch$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_inp$ = 12						; size = 4
_out$ = 16						; size = 4
_len$ = 20						; size = 4
_CRYPTO_ccm128_decrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 263
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	mov	eax, DWORD PTR _out$[esp+44]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+56]
	push	edi
	mov	DWORD PTR _out$GSCopy$1$[esp+64], eax
	mov	DWORD PTR _ctx$GSCopy$1$[esp+64], esi
; Line 266
	mov	bl, BYTE PTR [esi]
; Line 267
	mov	edi, DWORD PTR [esi+40]
; Line 268
	mov	eax, DWORD PTR [esi+44]
	mov	BYTE PTR _flags0$1$[esp+64], bl
	mov	DWORD PTR _block$1$[esp+64], edi
	mov	DWORD PTR _key$1$[esp+64], eax
; Line 274
	test	bl, 64					; 00000040H
	jne	SHORT $LN13@CRYPTO_ccm
; Line 275
	push	eax
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	edi
	add	esp, 12					; 0000000cH
$LN13@CRYPTO_ccm:
; Line 277
	movzx	eax, bl
; Line 278
	mov	edx, 15					; 0000000fH
	and	eax, 7
	xor	ecx, ecx
	sub	edx, eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR _i$3$[esp+64], edx
	cmp	edx, 15					; 0000000fH
	jae	SHORT $LN3@CRYPTO_ccm
	npad	9
$LL4@CRYPTO_ccm:
; Line 279
	movzx	eax, BYTE PTR [esi+edx]
	or	ecx, eax
; Line 280
	mov	BYTE PTR [esi+edx], 0
	inc	edx
; Line 281
	shl	ecx, 8
	cmp	edx, 15					; 0000000fH
	jb	SHORT $LL4@CRYPTO_ccm
$LN3@CRYPTO_ccm:
; Line 283
	movzx	eax, BYTE PTR [esi+15]
; Line 286
	mov	ebp, DWORD PTR _len$[esp+60]
	or	ecx, eax
	mov	BYTE PTR [esi+15], 1
	cmp	ecx, ebp
	je	SHORT $LN24@CRYPTO_ccm
; Line 287
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 331
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN24@CRYPTO_ccm:
; Line 289
	mov	ebx, DWORD PTR _inp$[esp+60]
	cmp	ebp, 16					; 00000010H
	jb	$LN6@CRYPTO_ccm
	mov	edi, -8					; fffffff8H
	mov	eax, ebp
	sub	edi, esi
	shr	eax, 4
	mov	DWORD PTR tv692[esp+64], eax
	npad	8
$LL5@CRYPTO_ccm:
; Line 296
	push	DWORD PTR _key$1$[esp+64]
	lea	eax, DWORD PTR _scratch$[esp+68]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+76]
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+16]
$LL20@CRYPTO_ccm:
; Line 169
	add	BYTE PTR [eax-1], 1
	lea	eax, DWORD PTR [eax-1]
; Line 171
	jne	SHORT $LN19@CRYPTO_ccm
; Line 173
	lea	ecx, DWORD PTR [edi+eax]
	test	ecx, ecx
	jne	SHORT $LL20@CRYPTO_ccm
$LN19@CRYPTO_ccm:
; Line 304
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _out$GSCopy$1$[esp+64]
	xor	eax, DWORD PTR _scratch$[esp+68]
	xor	ecx, DWORD PTR _scratch$[esp+64]
; Line 307
	push	DWORD PTR _key$1$[esp+64]
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx], ecx
	xor	DWORD PTR [esi+20], eax
	xor	DWORD PTR [esi+16], ecx
	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ebx+12]
	xor	eax, DWORD PTR _scratch$[esp+80]
	xor	ecx, DWORD PTR _scratch$[esp+76]
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+8], ecx
	xor	DWORD PTR [esi+28], eax
	lea	eax, DWORD PTR [esi+16]
	xor	DWORD PTR [esi+24], ecx
	push	eax
	push	eax
	call	DWORD PTR _block$1$[esp+76]
; Line 310
	add	DWORD PTR _out$GSCopy$1$[esp+76], 16	; 00000010H
	add	esp, 12					; 0000000cH
	add	ebx, 16					; 00000010H
; Line 311
	sub	ebp, 16					; 00000010H
	sub	DWORD PTR tv692[esp+64], 1
	jne	SHORT $LL5@CRYPTO_ccm
	mov	edi, DWORD PTR _block$1$[esp+64]
$LN6@CRYPTO_ccm:
; Line 314
	test	ebp, ebp
	je	SHORT $LN56@CRYPTO_ccm
; Line 315
	push	DWORD PTR _key$1$[esp+64]
	lea	eax, DWORD PTR _scratch$[esp+68]
	push	eax
	push	esi
	call	edi
	add	esp, 12					; 0000000cH
; Line 316
	xor	edi, edi
	test	ebp, ebp
	je	SHORT $LN8@CRYPTO_ccm
	lea	eax, DWORD PTR _scratch$[esp+64]
	sub	ebx, eax
	sub	DWORD PTR _out$GSCopy$1$[esp+64], eax
	lea	eax, DWORD PTR [esi+16]
	mov	esi, DWORD PTR _out$GSCopy$1$[esp+64]
	mov	DWORD PTR tv706[esp+64], eax
	npad	2
$LL9@CRYPTO_ccm:
; Line 317
	lea	ecx, DWORD PTR _scratch$[esp+64]
	add	ecx, edi
	movzx	edx, BYTE PTR [ebx+ecx]
	movzx	eax, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR tv706[esp+64]
	mov	BYTE PTR [esi+ecx], dl
	xor	BYTE PTR [eax+edi], dl
	inc	edi
	cmp	edi, ebp
	jb	SHORT $LL9@CRYPTO_ccm
	mov	esi, DWORD PTR _ctx$GSCopy$1$[esp+64]
$LN8@CRYPTO_ccm:
; Line 318
	mov	ebx, DWORD PTR _key$1$[esp+64]
	lea	eax, DWORD PTR [esi+16]
	mov	edi, DWORD PTR _block$1$[esp+64]
	push	ebx
	push	eax
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN15@CRYPTO_ccm
$LN56@CRYPTO_ccm:
	mov	ebx, DWORD PTR _key$1$[esp+64]
$LN15@CRYPTO_ccm:
; Line 321
	mov	edx, DWORD PTR _i$3$[esp+64]
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN11@CRYPTO_ccm
; Line 322
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR [edx+esi]
	sub	ecx, edx
	xor	eax, eax
	mov	edx, ecx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
	mov	edi, DWORD PTR _block$1$[esp+64]
$LN11@CRYPTO_ccm:
; Line 324
	push	ebx
	lea	eax, DWORD PTR _scratch$[esp+68]
	push	eax
	push	esi
	call	edi
; Line 325
	mov	eax, DWORD PTR _scratch$[esp+76]
	add	esp, 12					; 0000000cH
	xor	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _scratch$[esp+68]
	xor	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR _scratch$[esp+72]
	xor	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR _scratch$[esp+76]
	xor	DWORD PTR [esi+28], eax
; Line 328
	mov	al, BYTE PTR _flags0$1$[esp+64]
; Line 331
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	pop	edi
	mov	BYTE PTR [esi], al
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_CRYPTO_ccm128_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_encrypt
_TEXT	SEGMENT
_flags0$1$ = -61					; size = 1
_key$1$ = -60						; size = 4
_block$1$ = -56						; size = 4
tv1168 = -52						; size = 4
_inp$1$ = -52						; size = 4
_out$GSCopy$1$ = -48					; size = 4
tv1147 = -44						; size = 4
tv1146 = -40						; size = 4
tv1145 = -36						; size = 4
tv1157 = -32						; size = 4
_ctx$GSCopy$1$ = -28					; size = 4
_i$4$ = -24						; size = 4
_scratch$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_inp$ = 12						; size = 4
_out$ = 16						; size = 4
_len$ = 20						; size = 4
_CRYPTO_ccm128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 179
	mov	eax, 64					; 00000040H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+64], eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+68]
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+72]
	mov	DWORD PTR _ctx$GSCopy$1$[esp+76], esi
	mov	DWORD PTR _out$GSCopy$1$[esp+76], ebp
; Line 182
	mov	bl, BYTE PTR [esi]
; Line 183
	mov	ecx, DWORD PTR [esi+40]
; Line 184
	mov	eax, DWORD PTR [esi+44]
	mov	BYTE PTR _flags0$1$[esp+76], bl
	mov	DWORD PTR _block$1$[esp+76], ecx
	mov	DWORD PTR _key$1$[esp+76], eax
; Line 190
	test	bl, 64					; 00000040H
	jne	SHORT $LN16@CRYPTO_ccm
; Line 191
	push	eax
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	esi
	call	ecx
	add	esp, 12					; 0000000cH
	add	DWORD PTR [esi+32], 1
	adc	DWORD PTR [esi+36], 0
$LN16@CRYPTO_ccm:
; Line 193
	movzx	eax, bl
; Line 194
	mov	edx, 15					; 0000000fH
	and	eax, 7
	xor	ecx, ecx
	sub	edx, eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR _i$4$[esp+76], edx
	cmp	edx, 15					; 0000000fH
	jae	SHORT $LN3@CRYPTO_ccm
	npad	2
$LL4@CRYPTO_ccm:
; Line 195
	movzx	eax, BYTE PTR [esi+edx]
	or	ecx, eax
; Line 196
	mov	BYTE PTR [esi+edx], 0
	inc	edx
; Line 197
	shl	ecx, 8
	cmp	edx, 15					; 0000000fH
	jb	SHORT $LL4@CRYPTO_ccm
$LN3@CRYPTO_ccm:
; Line 199
	movzx	eax, BYTE PTR [esi+15]
; Line 202
	mov	ebx, DWORD PTR _len$[esp+72]
	or	ecx, eax
	mov	BYTE PTR [esi+15], 1
	cmp	ecx, ebx
	je	SHORT $LN17@CRYPTO_ccm
; Line 203
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 258
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN17@CRYPTO_ccm:
; Line 205
	lea	eax, DWORD PTR [ebx+15]
	or	eax, 8
	shr	eax, 3
	add	DWORD PTR [esi+32], eax
	adc	DWORD PTR [esi+36], 0
; Line 206
	cmp	DWORD PTR [esi+36], 536870912		; 20000000H
	jb	SHORT $LN28@CRYPTO_ccm
	ja	SHORT $LN85@CRYPTO_ccm
	cmp	DWORD PTR [esi+32], 0
	jbe	SHORT $LN28@CRYPTO_ccm
$LN85@CRYPTO_ccm:
	pop	esi
	pop	ebp
; Line 207
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 258
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN28@CRYPTO_ccm:
	push	edi
; Line 209
	mov	edi, DWORD PTR _inp$[esp+76]
	cmp	ebx, 16					; 00000010H
	jb	$LN86@CRYPTO_ccm
	mov	eax, ebx
	lea	ecx, DWORD PTR [esi+16]
	shr	eax, 4
	mov	DWORD PTR tv1168[esp+80], eax
	npad	4
$LL5@CRYPTO_ccm:
; Line 220
	mov	eax, DWORD PTR [edi]
	xor	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edi+4]
	xor	DWORD PTR [ecx+4], eax
; Line 223
	push	DWORD PTR _key$1$[esp+80]
	mov	eax, DWORD PTR [edi+8]
	xor	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR [edi+12]
	xor	DWORD PTR [esi+28], eax
	push	ecx
	push	ecx
	call	DWORD PTR _block$1$[esp+92]
; Line 224
	push	DWORD PTR _key$1$[esp+92]
	lea	eax, DWORD PTR _scratch$[esp+96]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+104]
	add	esp, 24					; 00000018H
; Line 162
	mov	ecx, 8
$LL24@CRYPTO_ccm:
; Line 167
	dec	ecx
; Line 169
	add	BYTE PTR [ecx+esi+8], 1
; Line 171
	jne	SHORT $LN23@CRYPTO_ccm
; Line 173
	test	ecx, ecx
	jne	SHORT $LL24@CRYPTO_ccm
$LN23@CRYPTO_ccm:
; Line 231
	mov	ecx, DWORD PTR [edi]
; Line 236
	sub	ebx, 16					; 00000010H
	mov	eax, DWORD PTR [edi+4]
	xor	ecx, DWORD PTR _scratch$[esp+80]
	xor	eax, DWORD PTR _scratch$[esp+84]
	mov	DWORD PTR [ebp], ecx
	mov	DWORD PTR [ebp+4], eax
	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edi+12]
	add	edi, 16					; 00000010H
	xor	ecx, DWORD PTR _scratch$[esp+88]
	xor	eax, DWORD PTR _scratch$[esp+92]
	mov	DWORD PTR [ebp+8], ecx
	lea	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [ebp+12], eax
	add	ebp, 16					; 00000010H
	sub	DWORD PTR tv1168[esp+80], 1
	jne	SHORT $LL5@CRYPTO_ccm
	mov	DWORD PTR _out$GSCopy$1$[esp+80], ebp
	mov	DWORD PTR _len$[esp+76], ebx
$LN86@CRYPTO_ccm:
; Line 209
	mov	DWORD PTR _inp$1$[esp+80], edi
; Line 239
	test	ebx, ebx
	je	$LN11@CRYPTO_ccm
; Line 240
	xor	ecx, ecx
	test	ebx, ebx
	je	SHORT $LN8@CRYPTO_ccm
$LL9@CRYPTO_ccm:
; Line 241
	mov	al, BYTE PTR [ecx+edi]
	xor	BYTE PTR [esi+ecx+16], al
	inc	ecx
	cmp	ecx, ebx
	jb	SHORT $LL9@CRYPTO_ccm
$LN8@CRYPTO_ccm:
; Line 242
	push	DWORD PTR _key$1$[esp+80]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	push	eax
	call	DWORD PTR _block$1$[esp+92]
; Line 243
	push	DWORD PTR _key$1$[esp+92]
	lea	eax, DWORD PTR _scratch$[esp+96]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+104]
	add	esp, 24					; 00000018H
; Line 244
	xor	edx, edx
	test	ebx, ebx
	je	$LN11@CRYPTO_ccm
	cmp	ebx, 32					; 00000020H
	jb	$LN55@CRYPTO_ccm
; Line 245
	lea	ecx, DWORD PTR [ebp-1]
	lea	eax, DWORD PTR _scratch$[esp+ebx+79]
	add	ecx, ebx
	cmp	ebp, eax
	ja	SHORT $LN56@CRYPTO_ccm
	lea	eax, DWORD PTR _scratch$[esp+80]
	cmp	ecx, eax
	jae	$LN55@CRYPTO_ccm
$LN56@CRYPTO_ccm:
	lea	eax, DWORD PTR [edi-1]
	add	eax, ebx
	cmp	ebp, eax
	ja	SHORT $LN57@CRYPTO_ccm
	cmp	ecx, edi
	jae	SHORT $LN55@CRYPTO_ccm
$LN57@CRYPTO_ccm:
	mov	eax, ebx
	mov	ecx, ebx
; Line 244
	lea	ebx, DWORD PTR _scratch$[esp+80]
	and	eax, 31					; 0000001fH
	sub	ebx, edi
	mov	esi, ebp
	mov	DWORD PTR tv1146[esp+80], ebx
	sub	esi, edi
	sub	ecx, eax
	mov	DWORD PTR tv1147[esp+80], esi
	lea	ebx, DWORD PTR _scratch$[esp+96]
	mov	eax, edi
	sub	ebx, edi
	mov	DWORD PTR tv1145[esp+80], ebx
	lea	ebx, DWORD PTR [ebp+16]
	mov	ebp, DWORD PTR tv1146[esp+80]
	mov	edi, DWORD PTR tv1145[esp+80]
	mov	DWORD PTR tv1157[esp+80], ebx
	mov	ebx, esi
$LL12@CRYPTO_ccm:
; Line 245
	movups	xmm0, XMMWORD PTR [eax]
	mov	esi, DWORD PTR tv1157[esp+80]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+ebp-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [ebx+eax-32], xmm1
	movups	xmm0, XMMWORD PTR [eax-16]
	movups	xmm1, XMMWORD PTR [edi+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [esi+edx], xmm1
	mov	esi, DWORD PTR _ctx$GSCopy$1$[esp+80]
	add	edx, 32					; 00000020H
	cmp	edx, ecx
	jb	SHORT $LL12@CRYPTO_ccm
	mov	edi, DWORD PTR _inp$1$[esp+80]
	mov	ebx, DWORD PTR _len$[esp+76]
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+80]
$LN55@CRYPTO_ccm:
; Line 244
	cmp	edx, ebx
	jae	SHORT $LN11@CRYPTO_ccm
	lea	eax, DWORD PTR _scratch$[esp+80]
	sub	edi, eax
	sub	ebp, eax
	npad	3
$LL54@CRYPTO_ccm:
; Line 245
	lea	ecx, DWORD PTR _scratch$[esp+80]
	add	ecx, edx
	inc	edx
	mov	al, BYTE PTR [ecx+edi]
	xor	al, BYTE PTR [ecx]
	mov	BYTE PTR [ecx+ebp], al
	cmp	edx, ebx
	jb	SHORT $LL54@CRYPTO_ccm
$LN11@CRYPTO_ccm:
; Line 248
	mov	edx, DWORD PTR _i$4$[esp+80]
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN14@CRYPTO_ccm
; Line 249
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR [edx+esi]
	sub	ecx, edx
	xor	eax, eax
	mov	edx, ecx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
$LN14@CRYPTO_ccm:
; Line 251
	push	DWORD PTR _key$1$[esp+80]
	lea	eax, DWORD PTR _scratch$[esp+84]
	push	eax
	push	esi
	call	DWORD PTR _block$1$[esp+92]
; Line 252
	mov	eax, DWORD PTR _scratch$[esp+92]
	add	esp, 12					; 0000000cH
	xor	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _scratch$[esp+84]
	xor	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR _scratch$[esp+88]
	xor	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR _scratch$[esp+92]
	xor	DWORD PTR [esi+28], eax
; Line 255
	mov	al, BYTE PTR _flags0$1$[esp+80]
; Line 258
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	pop	edi
	mov	BYTE PTR [esi], al
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
_CRYPTO_ccm128_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_aad
_TEXT	SEGMENT
_block$1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_aad$ = 12						; size = 4
_alen$ = 16						; size = 4
_CRYPTO_ccm128_aad PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 109
	push	ebx
; Line 113
	mov	ebx, DWORD PTR _alen$[esp]
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+4]
	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR _block$1$[esp+4], eax
	test	ebx, ebx
	je	$LN3@CRYPTO_ccm
; Line 116
	or	BYTE PTR [esi], 64			; 00000040H
	push	ebp
	push	edi
; Line 117
	push	DWORD PTR [esi+44]
	lea	ebp, DWORD PTR [esi+16]
	push	ebp
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
; Line 120
	mov	eax, ebx
	add	DWORD PTR [esi+32], 1
	adc	DWORD PTR [esi+36], 0
	cmp	ebx, 65280				; 0000ff00H
	jae	SHORT $LN9@CRYPTO_ccm
	shr	eax, 8
	xor	BYTE PTR [ebp], al
; Line 122
	mov	eax, 2
	xor	BYTE PTR [esi+17], bl
; Line 123
	jmp	SHORT $LN33@CRYPTO_ccm
$LN9@CRYPTO_ccm:
; Line 138
	xor	BYTE PTR [esi+17], 254			; 000000feH
	not	BYTE PTR [ebp]
; Line 139
	shr	eax, 24					; 00000018H
	xor	BYTE PTR [esi+18], al
; Line 140
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	xor	BYTE PTR [esi+19], al
; Line 141
	mov	eax, ebx
	shr	eax, 8
	xor	BYTE PTR [esi+20], al
; Line 143
	mov	eax, 6
	xor	BYTE PTR [esi+21], bl
$LN33@CRYPTO_ccm:
	mov	edi, DWORD PTR _aad$[esp+12]
$LL4@CRYPTO_ccm:
; Line 147
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN35@CRYPTO_ccm
	add	eax, 16					; 00000010H
	mov	edx, -16				; fffffff0H
	add	eax, esi
	sub	edx, esi
$LL7@CRYPTO_ccm:
	test	ebx, ebx
	je	SHORT $LN35@CRYPTO_ccm
; Line 148
	mov	cl, BYTE PTR [edi]
	dec	ebx
	xor	BYTE PTR [eax], cl
	inc	edi
	inc	eax
	lea	ecx, DWORD PTR [edx+eax]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LL7@CRYPTO_ccm
$LN35@CRYPTO_ccm:
; Line 149
	push	DWORD PTR [esi+44]
	push	ebp
	push	ebp
	call	DWORD PTR _block$1$[esp+24]
	add	esp, 12					; 0000000cH
	add	DWORD PTR [esi+32], 1
	adc	DWORD PTR [esi+36], 0
; Line 150
	xor	eax, eax
; Line 151
	test	ebx, ebx
	jne	SHORT $LL4@CRYPTO_ccm
	pop	edi
	pop	ebp
$LN3@CRYPTO_ccm:
	pop	esi
	pop	ebx
; Line 152
	ret	0
_CRYPTO_ccm128_aad ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_setiv
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nonce$ = 12						; size = 4
_nlen$ = 16						; size = 4
_mlen$ = 20						; size = 4
_CRYPTO_ccm128_setiv PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 82
	mov	edx, DWORD PTR _ctx$[esp-4]
	push	ebx
	push	esi
; Line 84
	mov	esi, 14					; 0000000eH
	mov	bl, BYTE PTR [edx]
	movzx	eax, bl
	and	eax, 7
	sub	esi, eax
	cmp	DWORD PTR _nlen$[esp+4], esi
	jae	SHORT $LN2@CRYPTO_ccm
; Line 85
	pop	esi
	or	eax, -1
	pop	ebx
; Line 104
	ret	0
$LN2@CRYPTO_ccm:
; Line 95
	mov	ecx, DWORD PTR _mlen$[esp+4]
; Line 100
	and	bl, 191					; 000000bfH
	mov	DWORD PTR [edx+12], 0
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edx+12], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edx+13], al
	mov	eax, ecx
	shr	eax, 8
; Line 101
	push	esi
	push	DWORD PTR _nonce$[esp+8]
	mov	BYTE PTR [edx+14], al
	lea	eax, DWORD PTR [edx+1]
	push	eax
	mov	DWORD PTR [edx+8], 0
	mov	BYTE PTR [edx+15], cl
	mov	BYTE PTR [edx], bl
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 103
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 104
	ret	0
_CRYPTO_ccm128_setiv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_ccm128_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_M$ = 12						; size = 4
_L$ = 16						; size = 4
_key$ = 20						; size = 4
_block$ = 24						; size = 4
_CRYPTO_ccm128_init PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\ccm128.c
; Line 70
	mov	ecx, DWORD PTR _M$[esp-4]
	xorps	xmm0, xmm0
	mov	edx, DWORD PTR _ctx$[esp-4]
	mov	al, BYTE PTR _L$[esp-4]
	dec	al
	lea	ecx, DWORD PTR [ecx-2]
	and	al, 7
	shr	ecx, 1
	and	cl, 7
	movups	XMMWORD PTR [edx], xmm0
	shl	cl, 3
	or	cl, al
; Line 71
	mov	DWORD PTR [edx+32], 0
; Line 72
	mov	eax, DWORD PTR _block$[esp-4]
	mov	DWORD PTR [edx+40], eax
; Line 73
	mov	eax, DWORD PTR _key$[esp-4]
	mov	BYTE PTR [edx], cl
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+44], eax
; Line 74
	ret	0
_CRYPTO_ccm128_init ENDP
_TEXT	ENDS
END
