; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_init_gost_hash_ctx
PUBLIC	_done_gost_hash_ctx
PUBLIC	_start_hash
PUBLIC	_hash_block
PUBLIC	_finish_hash
EXTRN	__imp__memmove:PROC
EXTRN	_gost_init:PROC
EXTRN	_gost_enc_with_key:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _hash_step
_TEXT	SEGMENT
_M$GSCopy$1$ = -168					; size = 4
_S$ = -164						; size = 32
_U$ = -132						; size = 32
_V$ = -100						; size = 32
_W$ = -68						; size = 32
_Key$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 4
_H$ = 12						; size = 4
_M$ = 16						; size = 4
_hash_step PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 91
	mov	eax, 168				; 000000a8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+168], eax
	push	ebx
	mov	ebx, DWORD PTR _M$[esp+168]
; Line 95
	lea	eax, DWORD PTR _W$[esp+172]
	push	ebp
	mov	ebp, DWORD PTR _H$[esp+172]
	push	esi
	mov	esi, DWORD PTR _c$[esp+176]
	push	edi
	push	32					; 00000020H
	push	ebx
	push	ebp
	push	eax
	mov	DWORD PTR _M$GSCopy$1$[esp+200], ebx
	call	_xor_blocks
; Line 96
	lea	eax, DWORD PTR _Key$[esp+200]
	push	eax
	lea	eax, DWORD PTR _W$[esp+204]
	push	eax
	call	_swap_bytes
; Line 98
	lea	eax, DWORD PTR _S$[esp+208]
	push	eax
	push	ebp
	lea	eax, DWORD PTR _Key$[esp+216]
	push	eax
	push	esi
	call	_gost_enc_with_key
; Line 100
	lea	eax, DWORD PTR _U$[esp+224]
	push	eax
	push	ebp
	call	_circle_xor8
; Line 101
	lea	eax, DWORD PTR _V$[esp+232]
	push	eax
	push	ebx
	call	_circle_xor8
; Line 102
	lea	eax, DWORD PTR _V$[esp+240]
	push	eax
	push	eax
	call	_circle_xor8
	add	esp, 64					; 00000040H
; Line 103
	lea	eax, DWORD PTR _V$[esp+184]
	push	32					; 00000020H
	push	eax
	lea	eax, DWORD PTR _U$[esp+192]
	push	eax
	lea	eax, DWORD PTR _W$[esp+196]
	push	eax
	call	_xor_blocks
; Line 104
	lea	eax, DWORD PTR _Key$[esp+200]
	push	eax
	lea	eax, DWORD PTR _W$[esp+204]
	push	eax
	call	_swap_bytes
; Line 106
	lea	eax, DWORD PTR _S$[esp+216]
	push	eax
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	lea	eax, DWORD PTR _Key$[esp+216]
	push	eax
	push	esi
	call	_gost_enc_with_key
; Line 108
	lea	eax, DWORD PTR _U$[esp+224]
	push	eax
	push	eax
	call	_circle_xor8
; Line 109
	not	BYTE PTR _U$[esp+263]
; Line 125
	lea	eax, DWORD PTR _V$[esp+232]
	not	BYTE PTR _U$[esp+261]
	not	BYTE PTR _U$[esp+260]
	not	BYTE PTR _U$[esp+256]
	not	BYTE PTR _U$[esp+255]
	not	BYTE PTR _U$[esp+252]
	not	BYTE PTR _U$[esp+250]
	not	BYTE PTR _U$[esp+249]
	not	BYTE PTR _U$[esp+246]
	not	BYTE PTR _U$[esp+244]
	not	BYTE PTR _U$[esp+242]
	not	BYTE PTR _U$[esp+240]
	not	BYTE PTR _U$[esp+239]
	not	BYTE PTR _U$[esp+237]
	not	BYTE PTR _U$[esp+235]
	not	BYTE PTR _U$[esp+233]
	push	eax
	push	eax
	call	_circle_xor8
; Line 126
	lea	eax, DWORD PTR _V$[esp+240]
	push	eax
	push	eax
	call	_circle_xor8
	add	esp, 64					; 00000040H
; Line 127
	lea	eax, DWORD PTR _V$[esp+184]
	push	32					; 00000020H
	push	eax
	lea	eax, DWORD PTR _U$[esp+192]
	push	eax
	lea	eax, DWORD PTR _W$[esp+196]
	push	eax
	call	_xor_blocks
; Line 128
	lea	eax, DWORD PTR _Key$[esp+200]
	push	eax
	lea	eax, DWORD PTR _W$[esp+204]
	push	eax
	call	_swap_bytes
; Line 130
	lea	eax, DWORD PTR _S$[esp+224]
	push	eax
	lea	eax, DWORD PTR [ebp+16]
	push	eax
	lea	eax, DWORD PTR _Key$[esp+216]
	push	eax
	push	esi
	call	_gost_enc_with_key
; Line 132
	lea	eax, DWORD PTR _U$[esp+224]
	push	eax
	push	eax
	call	_circle_xor8
; Line 133
	lea	eax, DWORD PTR _V$[esp+232]
	push	eax
	push	eax
	call	_circle_xor8
; Line 134
	lea	eax, DWORD PTR _V$[esp+240]
	push	eax
	push	eax
	call	_circle_xor8
	add	esp, 64					; 00000040H
; Line 135
	lea	eax, DWORD PTR _V$[esp+184]
	push	32					; 00000020H
	push	eax
	lea	eax, DWORD PTR _U$[esp+192]
	push	eax
	lea	eax, DWORD PTR _W$[esp+196]
	push	eax
	call	_xor_blocks
; Line 136
	lea	eax, DWORD PTR _Key$[esp+200]
	push	eax
	lea	eax, DWORD PTR _W$[esp+204]
	push	eax
	call	_swap_bytes
; Line 138
	lea	eax, DWORD PTR _S$[esp+232]
	push	eax
	lea	eax, DWORD PTR [ebp+24]
	push	eax
	lea	eax, DWORD PTR _Key$[esp+216]
	push	eax
	push	esi
	call	_gost_enc_with_key
	mov	edi, DWORD PTR __imp__memmove
	add	esp, 40					; 00000028H
	mov	cl, BYTE PTR _S$[esp+215]
	mov	esi, 12					; 0000000cH
	mov	bl, BYTE PTR _S$[esp+214]
	npad	8
$LL4@hash_step:
; Line 56
	movzx	eax, BYTE PTR _S$[esp+185]
	xor	al, BYTE PTR _S$[esp+187]
	xor	al, BYTE PTR _S$[esp+189]
	xor	al, BYTE PTR _S$[esp+191]
	xor	al, BYTE PTR _S$[esp+209]
	xor	al, cl
	movzx	ecx, al
	movzx	eax, BYTE PTR _S$[esp+184]
	xor	al, BYTE PTR _S$[esp+186]
	xor	al, BYTE PTR _S$[esp+188]
	xor	al, BYTE PTR _S$[esp+190]
	xor	al, BYTE PTR _S$[esp+208]
	xor	al, bl
	shl	cx, 8
	movzx	eax, al
	or	cx, ax
; Line 58
	lea	eax, DWORD PTR _S$[esp+186]
	push	30					; 0000001eH
	push	eax
	lea	eax, DWORD PTR _S$[esp+192]
	movzx	ebx, cx
	push	eax
	call	edi
; Line 60
	mov	ecx, ebx
	mov	BYTE PTR _S$[esp+226], bl
	shr	ecx, 8
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _S$[esp+215], cl
; Line 139
	sub	esi, 1
	jne	SHORT $LL4@hash_step
; Line 141
	push	32					; 00000020H
	push	DWORD PTR _M$GSCopy$1$[esp+188]
	lea	eax, DWORD PTR _S$[esp+192]
	push	eax
	push	eax
	call	_xor_blocks
; Line 56
	movzx	eax, BYTE PTR _S$[esp+201]
	xor	al, BYTE PTR _S$[esp+203]
	xor	al, BYTE PTR _S$[esp+205]
	xor	al, BYTE PTR _S$[esp+207]
	xor	al, BYTE PTR _S$[esp+225]
	xor	al, BYTE PTR _S$[esp+231]
	movzx	ecx, al
	movzx	eax, BYTE PTR _S$[esp+200]
	xor	al, BYTE PTR _S$[esp+202]
	xor	al, BYTE PTR _S$[esp+204]
	xor	al, BYTE PTR _S$[esp+206]
	xor	al, BYTE PTR _S$[esp+224]
	xor	al, BYTE PTR _S$[esp+230]
	movzx	eax, al
	shl	cx, 8
	or	cx, ax
; Line 58
	lea	eax, DWORD PTR _S$[esp+202]
	push	30					; 0000001eH
	push	eax
	lea	eax, DWORD PTR _S$[esp+208]
	movzx	ebx, cx
	push	eax
	call	edi
; Line 143
	push	32					; 00000020H
	lea	eax, DWORD PTR _S$[esp+216]
; Line 59
	mov	BYTE PTR _S$[esp+246], bl
; Line 143
	push	ebp
	push	eax
; Line 60
	shr	ebx, 8
; Line 143
	push	eax
; Line 60
	mov	BYTE PTR _S$[esp+259], bl
; Line 143
	call	_xor_blocks
	mov	al, BYTE PTR _S$[esp+259]
	add	esp, 44					; 0000002cH
	mov	bl, BYTE PTR _S$[esp+214]
	mov	esi, 61					; 0000003dH
	npad	5
$LL7@hash_step:
; Line 56
	mov	cl, BYTE PTR _S$[esp+185]
	xor	cl, BYTE PTR _S$[esp+187]
	xor	cl, BYTE PTR _S$[esp+189]
	xor	cl, BYTE PTR _S$[esp+191]
	xor	cl, BYTE PTR _S$[esp+209]
	xor	cl, al
	mov	al, BYTE PTR _S$[esp+184]
	xor	al, BYTE PTR _S$[esp+186]
	xor	al, BYTE PTR _S$[esp+188]
	xor	al, BYTE PTR _S$[esp+190]
	xor	al, BYTE PTR _S$[esp+208]
	xor	al, bl
	movzx	ecx, cl
	movzx	eax, al
	shl	cx, 8
	or	cx, ax
; Line 58
	lea	eax, DWORD PTR _S$[esp+186]
	push	30					; 0000001eH
	push	eax
	lea	eax, DWORD PTR _S$[esp+192]
	movzx	ebx, cx
	push	eax
	call	edi
; Line 60
	mov	eax, ebx
	mov	BYTE PTR _S$[esp+226], bl
	shr	eax, 8
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _S$[esp+215], al
; Line 144
	sub	esi, 1
	jne	SHORT $LL7@hash_step
; Line 146
	movups	xmm0, XMMWORD PTR _S$[esp+184]
; Line 148
	mov	ecx, DWORD PTR __$ArrayPad$[esp+184]
	lea	eax, DWORD PTR [esi+1]
	pop	edi
	movups	XMMWORD PTR [ebp], xmm0
	pop	esi
	movups	xmm0, XMMWORD PTR _S$[esp+192]
	movups	XMMWORD PTR [ebp+16], xmm0
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	ret	0
_hash_step ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _xor_blocks
_TEXT	SEGMENT
tv517 = -16						; size = 4
tv516 = -12						; size = 4
tv515 = -8						; size = 4
tv520 = -4						; size = 4
_result$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_len$ = 20						; size = 4
_xor_blocks PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 80
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 82
	mov	edx, DWORD PTR _len$[esp+12]
	xor	ecx, ecx
	test	edx, edx
	je	$LN3@xor_blocks
	push	ebx
	mov	ebx, DWORD PTR _b$[esp+16]
	push	esi
	mov	esi, DWORD PTR _result$[esp+20]
	push	edi
	mov	edi, DWORD PTR _a$[esp+24]
	cmp	edx, 32					; 00000020H
	jb	$LN9@xor_blocks
; Line 83
	push	ebp
	lea	eax, DWORD PTR [ebx-1]
	lea	ebp, DWORD PTR [esi-1]
	add	eax, edx
	add	ebp, edx
	cmp	esi, eax
	ja	SHORT $LN10@xor_blocks
	cmp	ebp, ebx
	jae	$LN20@xor_blocks
$LN10@xor_blocks:
	lea	eax, DWORD PTR [edi-1]
	add	eax, edx
	cmp	esi, eax
	ja	SHORT $LN11@xor_blocks
	cmp	ebp, edi
	jae	SHORT $LN20@xor_blocks
$LN11@xor_blocks:
	mov	eax, edx
	mov	ebp, edx
; Line 82
	mov	edx, esi
	and	eax, 31					; 0000001fH
	sub	edx, edi
	sub	ebp, eax
	mov	DWORD PTR tv517[esp+32], edx
	mov	eax, edi
	mov	edx, ebx
	mov	DWORD PTR tv520[esp+32], ebp
	sub	edx, edi
	lea	ebp, DWORD PTR [ebx+16]
	mov	DWORD PTR tv516[esp+32], edx
	mov	edx, esi
	mov	esi, DWORD PTR tv517[esp+32]
	sub	edx, ebx
	mov	edi, DWORD PTR tv516[esp+32]
	mov	DWORD PTR tv515[esp+32], edx
	mov	edx, DWORD PTR _len$[esp+28]
	mov	ebx, DWORD PTR tv515[esp+32]
	npad	2
$LL4@xor_blocks:
; Line 83
	movups	xmm0, XMMWORD PTR [eax]
	add	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [eax+32]
	lea	ebp, DWORD PTR [ebp+32]
	movups	xmm1, XMMWORD PTR [edi+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [esi+eax-32], xmm1
	movups	xmm1, XMMWORD PTR [eax-16]
	movups	xmm0, XMMWORD PTR [ebp-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [ebx+ebp-32], xmm1
	cmp	ecx, DWORD PTR tv520[esp+32]
	jb	SHORT $LL4@xor_blocks
	mov	esi, DWORD PTR _result$[esp+28]
	mov	edi, DWORD PTR _a$[esp+28]
	mov	ebx, DWORD PTR _b$[esp+28]
$LN20@xor_blocks:
	pop	ebp
$LN9@xor_blocks:
; Line 82
	cmp	ecx, edx
	jae	SHORT $LN17@xor_blocks
	sub	edi, ebx
	lea	eax, DWORD PTR [ecx+ebx]
	sub	esi, ebx
	sub	edx, ecx
	npad	5
$LL8@xor_blocks:
; Line 83
	mov	cl, BYTE PTR [edi+eax]
	lea	eax, DWORD PTR [eax+1]
	xor	cl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax+esi-1], cl
	sub	edx, 1
	jne	SHORT $LL8@xor_blocks
$LN17@xor_blocks:
	pop	edi
	pop	esi
	pop	ebx
$LN3@xor_blocks:
; Line 84
	add	esp, 16					; 00000010H
	ret	0
_xor_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _add_blocks
_TEXT	SEGMENT
_n$ = 8							; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_add_blocks PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 65
	push	edi
; Line 69
	mov	edi, DWORD PTR _n$[esp]
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN3@add_blocks
	push	ebx
	mov	ebx, DWORD PTR _right$[esp+4]
	push	esi
	mov	esi, DWORD PTR _left$[esp+8]
	sub	ebx, esi
	npad	9
$LL4@add_blocks:
; Line 70
	movzx	ecx, BYTE PTR [ebx+esi]
	lea	esi, DWORD PTR [esi+1]
	movzx	edx, BYTE PTR [esi-1]
	add	eax, ecx
	add	eax, edx
; Line 71
	mov	BYTE PTR [esi-1], al
; Line 72
	sar	eax, 8
	sub	edi, 1
	jne	SHORT $LL4@add_blocks
	pop	esi
	pop	ebx
$LN3@add_blocks:
	pop	edi
; Line 75
	ret	0
_add_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _transform_3
_TEXT	SEGMENT
_data$ = 8						; size = 4
_transform_3 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 54
	push	ebx
	push	esi
; Line 56
	mov	esi, DWORD PTR _data$[esp+4]
	lea	edx, DWORD PTR [esi+2]
; Line 58
	push	30					; 0000001eH
	push	edx
	movzx	eax, BYTE PTR [esi+25]
	xor	al, BYTE PTR [esi+7]
	xor	al, BYTE PTR [esi+5]
	xor	al, BYTE PTR [esi+3]
	xor	al, BYTE PTR [esi+1]
	xor	al, BYTE PTR [esi+31]
	movzx	ecx, al
	movzx	eax, BYTE PTR [esi+24]
	xor	al, BYTE PTR [esi+6]
	xor	al, BYTE PTR [esi+4]
	xor	al, BYTE PTR [esi+30]
	xor	al, BYTE PTR [esi]
	xor	al, BYTE PTR [edx]
	shl	cx, 8
	movzx	eax, al
	or	cx, ax
	push	esi
	movzx	ebx, cx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 59
	mov	BYTE PTR [esi+30], bl
; Line 60
	shr	ebx, 8
	mov	BYTE PTR [esi+31], bl
	pop	esi
	pop	ebx
; Line 61
	ret	0
_transform_3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _circle_xor8
_TEXT	SEGMENT
_buf$2$ = -16						; size = 4
_buf$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_w$ = 8							; size = 4
_k$ = 12						; size = 4
_circle_xor8 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 43
	mov	eax, 16					; 00000010H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+16], eax
	mov	eax, DWORD PTR _w$[esp+12]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _k$[esp+20]
; Line 46
	mov	ecx, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
; Line 47
	add	eax, 8
	push	24					; 00000018H
	push	eax
	push	esi
	mov	DWORD PTR _buf$[esp+36], ebx
	mov	DWORD PTR _buf$2$[esp+36], ecx
	mov	DWORD PTR _buf$[esp+40], ecx
	call	DWORD PTR __imp__memmove
; Line 49
	movzx	eax, BYTE PTR [esi]
	add	esp, 12					; 0000000cH
	xor	al, bl
	mov	ecx, DWORD PTR _buf$2$[esp+24]
	mov	BYTE PTR [esi+24], al
	movzx	eax, BYTE PTR [esi+1]
	xor	al, bh
	mov	BYTE PTR [esi+25], al
	movzx	eax, BYTE PTR [esi+2]
	xor	al, BYTE PTR _buf$[esp+26]
	mov	BYTE PTR [esi+26], al
	movzx	eax, BYTE PTR [esi+3]
	xor	al, BYTE PTR _buf$[esp+27]
	mov	BYTE PTR [esi+27], al
	movzx	eax, BYTE PTR [esi+4]
	xor	al, cl
	mov	BYTE PTR [esi+28], al
	movzx	eax, BYTE PTR [esi+5]
	xor	al, ch
; Line 50
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	mov	BYTE PTR [esi+29], al
	movzx	eax, BYTE PTR [esi+6]
	xor	al, BYTE PTR _buf$[esp+30]
	mov	BYTE PTR [esi+30], al
	movzx	eax, BYTE PTR [esi+7]
	xor	al, BYTE PTR _buf$[esp+31]
	mov	BYTE PTR [esi+31], al
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 16					; 00000010H
	ret	0
_circle_xor8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _swap_bytes
_TEXT	SEGMENT
_w$ = 8							; size = 4
_k$ = 12						; size = 4
_swap_bytes PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 35
	mov	edx, DWORD PTR _k$[esp-4]
	mov	eax, DWORD PTR _w$[esp-4]
	add	edx, 4
	push	esi
	add	eax, 2
	mov	esi, 4
$LL4@swap_bytes:
; Line 37
	movzx	ecx, BYTE PTR [eax-2]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [edx-5], cl
	lea	eax, DWORD PTR [eax+8]
	movzx	ecx, BYTE PTR [eax-9]
	mov	BYTE PTR [edx-1], cl
	movzx	ecx, BYTE PTR [eax-8]
	mov	BYTE PTR [edx+3], cl
	movzx	ecx, BYTE PTR [eax-7]
	mov	BYTE PTR [edx+7], cl
	movzx	ecx, BYTE PTR [eax-6]
	mov	BYTE PTR [edx+11], cl
	movzx	ecx, BYTE PTR [eax-5]
	mov	BYTE PTR [edx+15], cl
	movzx	ecx, BYTE PTR [eax-4]
	mov	BYTE PTR [edx+19], cl
	movzx	ecx, BYTE PTR [eax-3]
	mov	BYTE PTR [edx+23], cl
	sub	esi, 1
	jne	SHORT $LL4@swap_bytes
	pop	esi
; Line 39
	ret	0
_swap_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _finish_hash
_TEXT	SEGMENT
_hashval$GSCopy$1$ = -104				; size = 4
_buf$ = -100						; size = 32
_S$ = -68						; size = 32
_H$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_hashval$ = 12						; size = 4
_finish_hash PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 242
	mov	eax, 104				; 00000068H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+104], eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _hashval$[esp+108]
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+116]
	mov	DWORD PTR _hashval$GSCopy$1$[esp+120], ebp
; Line 248
	movups	xmm0, XMMWORD PTR [edi+16]
; Line 250
	mov	eax, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [edi]
	mov	esi, DWORD PTR [edi+4]
	movups	XMMWORD PTR _H$[esp+120], xmm0
	movups	xmm0, XMMWORD PTR [edi+32]
	movups	XMMWORD PTR _H$[esp+136], xmm0
	movups	xmm0, XMMWORD PTR [edi+48]
	movups	XMMWORD PTR _S$[esp+120], xmm0
	movups	xmm0, XMMWORD PTR [edi+64]
	movups	XMMWORD PTR _S$[esp+136], xmm0
	test	eax, eax
	je	$LN4@finish_has
; Line 252
	push	eax
	lea	eax, DWORD PTR [edi+80]
	xorps	xmm0, xmm0
	push	eax
	lea	eax, DWORD PTR _buf$[esp+128]
	push	eax
	movups	XMMWORD PTR _buf$[esp+132], xmm0
	movups	XMMWORD PTR _buf$[esp+148], xmm0
	call	_memcpy
; Line 253
	lea	eax, DWORD PTR _buf$[esp+132]
	push	eax
	lea	eax, DWORD PTR _H$[esp+136]
	push	eax
	push	DWORD PTR [edi+8]
	call	_hash_step
	add	esp, 24					; 00000018H
; Line 67
	xor	edx, edx
; Line 69
	xor	ebp, ebp
	npad	2
$LL9@finish_has:
; Line 70
	movzx	eax, BYTE PTR _buf$[esp+ebp+120]
	movzx	ecx, BYTE PTR _S$[esp+ebp+120]
	add	eax, edx
	movzx	edx, BYTE PTR _buf$[esp+ebp+121]
	add	ecx, eax
	movzx	eax, BYTE PTR _S$[esp+ebp+121]
; Line 71
	mov	BYTE PTR _S$[esp+ebp+120], cl
; Line 72
	sar	ecx, 8
	add	edx, ecx
	movzx	ecx, BYTE PTR _buf$[esp+ebp+122]
	add	edx, eax
	movzx	eax, BYTE PTR _S$[esp+ebp+122]
	mov	BYTE PTR _S$[esp+ebp+121], dl
	sar	edx, 8
	add	ecx, edx
	movzx	edx, BYTE PTR _buf$[esp+ebp+123]
	add	ecx, eax
	movzx	eax, BYTE PTR _S$[esp+ebp+123]
	mov	BYTE PTR _S$[esp+ebp+122], cl
	sar	ecx, 8
	add	edx, ecx
	add	edx, eax
	mov	BYTE PTR _S$[esp+ebp+123], dl
	add	ebp, 4
	sar	edx, 8
	cmp	ebp, 32					; 00000020H
	jl	SHORT $LL9@finish_has
; Line 255
	mov	eax, DWORD PTR [edi+12]
	mov	ebp, DWORD PTR _hashval$GSCopy$1$[esp+120]
	cdq
	add	ebx, eax
	adc	esi, edx
$LN4@finish_has:
; Line 259
	shld	esi, ebx, 3
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR _buf$[esp+120]
	shl	ebx, 3
	movups	XMMWORD PTR _buf$[esp+120], xmm0
	movups	XMMWORD PTR _buf$[esp+136], xmm0
; Line 260
	test	esi, esi
	jl	SHORT $LN25@finish_has
	jg	SHORT $LL2@finish_has
	test	ebx, ebx
	je	SHORT $LN25@finish_has
	npad	6
$LL2@finish_has:
; Line 261
	mov	BYTE PTR [eax], bl
	lea	eax, DWORD PTR [eax+1]
; Line 262
	shrd	ebx, esi, 8
	sar	esi, 8
	test	esi, esi
	jg	SHORT $LL2@finish_has
; Line 260
	jl	SHORT $LN25@finish_has
	test	ebx, ebx
	jne	SHORT $LL2@finish_has
$LN25@finish_has:
; Line 264
	lea	eax, DWORD PTR _buf$[esp+120]
	push	eax
	lea	eax, DWORD PTR _H$[esp+124]
	push	eax
	push	DWORD PTR [edi+8]
	call	_hash_step
; Line 265
	lea	eax, DWORD PTR _S$[esp+132]
	push	eax
	lea	eax, DWORD PTR _H$[esp+136]
	push	eax
	push	DWORD PTR [edi+8]
	call	_hash_step
; Line 266
	movups	xmm0, XMMWORD PTR _H$[esp+144]
; Line 268
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	add	esp, 24					; 00000018H
	mov	eax, 1
	movups	XMMWORD PTR [ebp], xmm0
	movups	xmm0, XMMWORD PTR _H$[esp+136]
	pop	edi
	pop	esi
	movups	XMMWORD PTR [ebp+16], xmm0
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	ret	0
_finish_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _hash_block
_TEXT	SEGMENT
_block$1$ = -20						; size = 4
_length$1$ = -16					; size = 4
tv1173 = -12						; size = 4
tv1169 = -12						; size = 4
tv1181 = -8						; size = 4
tv1168 = -8						; size = 4
_left$1$ = -4						; size = 4
_ctx$ = 8						; size = 4
_block$ = 12						; size = 4
_length$ = 16						; size = 4
_hash_block PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 201
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
; Line 207
	mov	ebx, DWORD PTR _length$[esp+20]
	push	ebp
; Line 210
	mov	ebp, DWORD PTR _block$[esp+24]
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+28]
	push	edi
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	$LN33@hash_block
; Line 206
	mov	edi, 32					; 00000020H
	sub	edi, eax
; Line 207
	cmp	edi, ebx
	cmova	edi, ebx
; Line 210
	add	eax, 80					; 00000050H
	push	edi
	add	eax, esi
	push	ebp
	push	eax
	call	_memcpy
; Line 211
	add	DWORD PTR [esi+12], edi
	add	esp, 12					; 0000000cH
; Line 212
	cmp	DWORD PTR [esi+12], 32			; 00000020H
	jl	$LN7@hash_block
; Line 217
	lea	eax, DWORD PTR [esi+80]
	add	ebp, edi
	push	eax
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR _block$1$[esp+40], ebp
	push	eax
	push	DWORD PTR [esi+8]
	sub	ebx, edi
	mov	DWORD PTR _length$1$[esp+48], ebx
	call	_hash_step
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+81]
; Line 67
	xor	ebx, ebx
; Line 215
	lea	edi, DWORD PTR [esi+49]
	mov	esi, eax
	lea	ebp, DWORD PTR [ebx+8]
	npad	6
$LL12@hash_block:
; Line 70
	movzx	eax, BYTE PTR [esi-1]
; Line 72
	lea	esi, DWORD PTR [esi+4]
	movzx	edx, BYTE PTR [edi-1]
	lea	edi, DWORD PTR [edi+4]
	add	eax, ebx
	add	edx, eax
	mov	BYTE PTR [edi-5], dl
	movzx	eax, BYTE PTR [esi-4]
	sar	edx, 8
	add	edx, eax
	movzx	eax, BYTE PTR [edi-4]
	add	edx, eax
	movzx	eax, BYTE PTR [edi-3]
	mov	BYTE PTR [edi-4], dl
	movzx	ecx, BYTE PTR [esi-3]
	sar	edx, 8
	add	ecx, edx
	add	ecx, eax
	movzx	eax, BYTE PTR [edi-2]
	mov	BYTE PTR [edi-3], cl
	movzx	ebx, BYTE PTR [esi-2]
	sar	ecx, 8
	add	ebx, ecx
	add	ebx, eax
	mov	BYTE PTR [edi-2], bl
	sar	ebx, 8
	sub	ebp, 1
	jne	SHORT $LL12@hash_block
; Line 220
	mov	esi, DWORD PTR _ctx$[esp+32]
	mov	ebx, DWORD PTR _length$1$[esp+36]
	add	DWORD PTR [esi], 32			; 00000020H
	mov	DWORD PTR [esi+12], ebp
	adc	DWORD PTR [esi+4], ebp
	mov	ebp, DWORD PTR _block$1$[esp+36]
	jmp	SHORT $LN20@hash_block
$LN33@hash_block:
	mov	DWORD PTR _length$1$[esp+36], ebx
	mov	DWORD PTR _block$1$[esp+36], ebp
$LN20@hash_block:
; Line 222
	cmp	ebx, 32					; 00000020H
	jb	$LN3@hash_block
	lea	edi, DWORD PTR [esi+48]
	shr	ebx, 5
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR _left$1$[esp+36], edi
	mov	DWORD PTR tv1168[esp+36], ebx
	npad	4
$LL2@hash_block:
; Line 223
	push	ebp
	push	eax
	push	DWORD PTR [esi+8]
	call	_hash_step
; Line 69
	mov	DWORD PTR tv1173[esp+48], ebp
; Line 223
	lea	esi, DWORD PTR [ebp+2]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1169[esp+36], 8
; Line 67
	xor	ebx, ebx
; Line 69
	sub	ebp, DWORD PTR _left$1$[esp+36]
$LL17@hash_block:
; Line 70
	movzx	eax, BYTE PTR [edi+ebp]
; Line 72
	lea	edi, DWORD PTR [edi+4]
	movzx	ecx, BYTE PTR [edi-4]
	lea	esi, DWORD PTR [esi+4]
	add	eax, ebx
	add	ecx, eax
	movzx	eax, BYTE PTR [edi-3]
	mov	BYTE PTR [edi-4], cl
	movzx	edx, BYTE PTR [esi-5]
	sar	ecx, 8
	add	edx, ecx
	add	edx, eax
	movzx	eax, BYTE PTR [edi-2]
	mov	BYTE PTR [edi-3], dl
	sar	edx, 8
	add	edx, eax
	movzx	eax, BYTE PTR [esi-4]
	add	edx, eax
	movzx	eax, BYTE PTR [edi-1]
	mov	BYTE PTR [edi-2], dl
	movzx	ebx, BYTE PTR [esi-3]
	sar	edx, 8
	add	ebx, edx
	add	ebx, eax
	mov	BYTE PTR [edi-1], bl
	sar	ebx, 8
	sub	DWORD PTR tv1169[esp+36], 1
	jne	SHORT $LL17@hash_block
; Line 227
	mov	esi, DWORD PTR _ctx$[esp+32]
	mov	ebp, DWORD PTR _block$1$[esp+36]
; Line 228
	mov	ebx, DWORD PTR _length$1$[esp+36]
	add	DWORD PTR [esi], 32			; 00000020H
	lea	edi, DWORD PTR [esi+48]
	lea	eax, DWORD PTR [esi+16]
	adc	DWORD PTR [esi+4], 0
	add	ebp, 32					; 00000020H
	sub	ebx, 32					; 00000020H
	mov	DWORD PTR _block$1$[esp+36], ebp
	sub	DWORD PTR tv1168[esp+36], 1
	mov	DWORD PTR _length$1$[esp+36], ebx
	jne	$LL2@hash_block
$LN3@hash_block:
; Line 230
	test	ebx, ebx
	je	SHORT $LN7@hash_block
; Line 231
	push	ebx
	mov	DWORD PTR [esi+12], ebx
	add	esi, 80					; 00000050H
	push	ebp
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@hash_block:
; Line 233
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 234
	add	esp, 20					; 00000014H
	ret	0
_hash_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _start_hash
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_start_hash PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 185
	push	esi
; Line 186
	mov	esi, DWORD PTR _ctx$[esp]
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN2@start_hash
; Line 187
	xor	eax, eax
	pop	esi
; Line 193
	ret	0
$LN2@start_hash:
	push	64					; 00000040H
	lea	eax, DWORD PTR [esi+16]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 190
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; Line 192
	mov	eax, 1
	mov	DWORD PTR [esi+12], 0
	pop	esi
; Line 193
	ret	0
_start_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _done_gost_hash_ctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_done_gost_hash_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 178
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	DWORD PTR [eax+8]
	call	DWORD PTR __imp__free
	pop	ecx
; Line 179
	ret	0
_done_gost_hash_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _init_gost_hash_ctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_subst_block$ = 12					; size = 4
_init_gost_hash_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\engines\ccgost\gosthash.c
; Line 156
	push	esi
; Line 157
	mov	esi, DWORD PTR _ctx$[esp]
	push	112					; 00000070H
	push	0
	push	esi
	call	_memset
; Line 158
	push	4128					; 00001020H
	call	DWORD PTR __imp__malloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+8], eax
	pop	esi
; Line 159
	test	eax, eax
	jne	SHORT $LN2@init_gost_
; Line 164
	ret	0
$LN2@init_gost_:
; Line 162
	push	DWORD PTR _subst_block$[esp-4]
	push	eax
	call	_gost_init
	add	esp, 8
; Line 163
	mov	eax, 1
; Line 164
	ret	0
_init_gost_hash_ctx ENDP
_TEXT	ENDS
END
