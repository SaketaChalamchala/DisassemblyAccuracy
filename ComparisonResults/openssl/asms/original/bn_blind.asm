; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_BLINDING_new
PUBLIC	_BN_BLINDING_free
PUBLIC	_BN_BLINDING_update
PUBLIC	_BN_BLINDING_convert
PUBLIC	_BN_BLINDING_invert
PUBLIC	_BN_BLINDING_convert_ex
PUBLIC	_BN_BLINDING_invert_ex
PUBLIC	_BN_BLINDING_get_thread_id
PUBLIC	_BN_BLINDING_set_thread_id
PUBLIC	_BN_BLINDING_thread_id
PUBLIC	_BN_BLINDING_get_flags
PUBLIC	_BN_BLINDING_set_flags
PUBLIC	_BN_BLINDING_create_param
PUBLIC	??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ ; `string'
EXTRN	_CRYPTO_THREADID_current:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_peek_last_error:PROC
EXTRN	_ERR_clear_error:PROC
EXTRN	_BN_rand_range:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_mod_mul:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_mod_exp:PROC
EXTRN	_BN_dup:PROC
EXTRN	_BN_mod_inverse:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
CONST	SEGMENT
??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@ DB '.\crypto\bn\bn_bl'
	DB	'ind.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_create_param
_TEXT	SEGMENT
_b$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_ctx$ = 20						; size = 4
_bn_mod_exp$ = 24					; size = 4
_m_ctx$ = 28						; size = 4
_BN_BLINDING_create_param PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 317
	push	ebx
	push	ebp
; Line 321
	mov	ebp, DWORD PTR _b$[esp+4]
	push	esi
	push	edi
	mov	edi, 32					; 00000020H
	test	ebp, ebp
	jne	SHORT $LN5@BN_BLINDIN
; Line 141
	push	141					; 0000008dH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	44					; 0000002cH
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN28@BN_BLINDIN
; Line 142
	push	142					; 0000008eH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	65					; 00000041H
	push	102					; 00000066H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 384
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 385
	ret	0
$LN28@BN_BLINDIN:
; Line 145
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
; Line 156
	mov	ebx, DWORD PTR _m$[esp+24]
	push	ebx
	call	_BN_dup
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+12], eax
	test	eax, eax
	je	$LN44@BN_BLINDIN
; Line 158
	test	BYTE PTR [ebx+16], 4
	je	SHORT $LN34@BN_BLINDIN
; Line 159
	or	DWORD PTR [eax+16], 4
$LN34@BN_BLINDIN:
; Line 167
	lea	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+28], -1
	push	eax
	call	_CRYPTO_THREADID_current
	add	esp, 4
; Line 322
	jmp	SHORT $LN6@BN_BLINDIN
$LN5@BN_BLINDIN:
; Line 324
	mov	esi, ebp
$LN6@BN_BLINDIN:
; Line 326
	test	esi, esi
	je	$err$48
; Line 329
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN8@BN_BLINDIN
	call	_BN_new
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	$err$48
$LN8@BN_BLINDIN:
; Line 331
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN9@BN_BLINDIN
	call	_BN_new
	mov	DWORD PTR [esi+4], eax
	test	eax, eax
	je	$err$48
$LN9@BN_BLINDIN:
; Line 334
	mov	ebx, DWORD PTR _e$[esp+12]
	test	ebx, ebx
	je	SHORT $LN10@BN_BLINDIN
; Line 335
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN11@BN_BLINDIN
; Line 336
	push	eax
	call	_BN_free
	add	esp, 4
$LN11@BN_BLINDIN:
; Line 337
	push	ebx
	call	_BN_dup
	add	esp, 4
	mov	DWORD PTR [esi+8], eax
$LN10@BN_BLINDIN:
; Line 339
	cmp	DWORD PTR [esi+8], 0
	je	$err$48
; Line 342
	mov	eax, DWORD PTR _bn_mod_exp$[esp+12]
	test	eax, eax
	je	SHORT $LN13@BN_BLINDIN
; Line 343
	mov	DWORD PTR [esi+40], eax
$LN13@BN_BLINDIN:
; Line 344
	mov	eax, DWORD PTR _m_ctx$[esp+12]
	test	eax, eax
	je	SHORT $LN37@BN_BLINDIN
; Line 345
	mov	DWORD PTR [esi+36], eax
$LN37@BN_BLINDIN:
; Line 348
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	call	_BN_rand_range
	add	esp, 8
	test	eax, eax
	je	$err$48
	mov	ebx, DWORD PTR _ctx$[esp+12]
	npad	4
$LL4@BN_BLINDIN:
; Line 350
	push	ebx
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [esi+4]
	call	_BN_mod_inverse
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@BN_BLINDIN
; Line 354
	call	_ERR_peek_last_error
; Line 355
	and	eax, 4095				; 00000fffH
	cmp	eax, 108				; 0000006cH
	jne	SHORT $err$48
; Line 356
	mov	eax, edi
	dec	edi
	test	eax, eax
	je	SHORT $LN39@BN_BLINDIN
; Line 361
	call	_ERR_clear_error
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	call	_BN_rand_range
	add	esp, 8
	test	eax, eax
	jne	SHORT $LL4@BN_BLINDIN
; Line 349
	jmp	SHORT $err$48
$LN39@BN_BLINDIN:
; Line 357
	push	358					; 00000166H
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	113					; 00000071H
	push	128					; 00000080H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 359
	jmp	SHORT $err$48
$LN3@BN_BLINDIN:
; Line 368
	mov	ecx, DWORD PTR [esi+40]
	test	ecx, ecx
	je	SHORT $LN21@BN_BLINDIN
	mov	edx, DWORD PTR [esi+36]
	test	edx, edx
	je	SHORT $LN21@BN_BLINDIN
; Line 369
	mov	eax, DWORD PTR [esi]
	push	edx
	push	ebx
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi+8]
	push	eax
	push	eax
	call	ecx
	add	esp, 24					; 00000018H
; Line 372
	jmp	SHORT $LN46@BN_BLINDIN
$LN21@BN_BLINDIN:
; Line 373
	mov	ecx, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi+8]
	push	ecx
	push	ecx
	call	_BN_mod_exp
	add	esp, 20					; 00000014H
$LN46@BN_BLINDIN:
	test	eax, eax
	jne	SHORT $LN25@BN_BLINDIN
$err$48:
; Line 379
	test	ebp, ebp
	jne	SHORT $LN25@BN_BLINDIN
	test	esi, esi
	je	SHORT $LN25@BN_BLINDIN
$LN44@BN_BLINDIN:
$err$49:
; Line 380
	push	esi
	call	_BN_BLINDING_free
	add	esp, 4
; Line 381
	xor	esi, esi
$LN25@BN_BLINDIN:
; Line 384
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 385
	ret	0
_BN_BLINDING_create_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_set_flags
_TEXT	SEGMENT
_b$ = 8							; size = 4
_flags$ = 12						; size = 4
_BN_BLINDING_set_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 305
	mov	eax, DWORD PTR _b$[esp-4]
	mov	ecx, DWORD PTR _flags$[esp-4]
	mov	DWORD PTR [eax+32], ecx
; Line 306
	ret	0
_BN_BLINDING_set_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_get_flags
_TEXT	SEGMENT
_b$ = 8							; size = 4
_BN_BLINDING_get_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 300
	mov	eax, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [eax+32]
; Line 301
	ret	0
_BN_BLINDING_get_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_thread_id
_TEXT	SEGMENT
_b$ = 8							; size = 4
_BN_BLINDING_thread_id PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 295
	mov	eax, DWORD PTR _b$[esp-4]
	add	eax, 20					; 00000014H
; Line 296
	ret	0
_BN_BLINDING_thread_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_set_thread_id
_TEXT	SEGMENT
_b$ = 8							; size = 4
_n$ = 12						; size = 4
_BN_BLINDING_set_thread_id PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 289
	mov	eax, DWORD PTR _b$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	DWORD PTR [eax+16], ecx
; Line 290
	ret	0
_BN_BLINDING_set_thread_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_get_thread_id
_TEXT	SEGMENT
_b$ = 8							; size = 4
_BN_BLINDING_get_thread_id PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 284
	mov	eax, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [eax+16]
; Line 285
	ret	0
_BN_BLINDING_get_thread_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_invert_ex
_TEXT	SEGMENT
_n$ = 8							; size = 4
_r$ = 12						; size = 4
_b$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_BLINDING_invert_ex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 267
	mov	ecx, DWORD PTR _r$[esp-4]
; Line 268
	mov	eax, DWORD PTR _b$[esp-4]
	test	ecx, ecx
	jne	SHORT $LN4@BN_BLINDIN
; Line 270
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN4@BN_BLINDIN
; Line 271
	push	271					; 0000010fH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	107					; 0000006bH
	push	101					; 00000065H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 272
	xor	eax, eax
; Line 279
	ret	0
$LN4@BN_BLINDIN:
; Line 274
	push	DWORD PTR _ctx$[esp-4]
	push	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _n$[esp+4]
	push	ecx
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
; Line 279
	ret	0
_BN_BLINDING_invert_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_convert_ex
_TEXT	SEGMENT
_n$ = 8							; size = 4
_r$ = 12						; size = 4
_b$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_BLINDING_convert_ex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 228
	push	esi
; Line 233
	mov	esi, DWORD PTR _b$[esp]
	push	edi
	mov	edi, 1
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN3@BN_BLINDIN
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN3@BN_BLINDIN
; Line 238
	cmp	DWORD PTR [esi+28], -1
	jne	SHORT $LN4@BN_BLINDIN
; Line 240
	mov	DWORD PTR [esi+28], 0
	jmp	SHORT $LN6@BN_BLINDIN
$LN4@BN_BLINDIN:
; Line 241
	push	DWORD PTR _ctx$[esp+4]
	push	esi
	call	_BN_BLINDING_update
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@BN_BLINDIN
$LN6@BN_BLINDIN:
; Line 244
	mov	eax, DWORD PTR _r$[esp+4]
	test	eax, eax
	je	SHORT $LN8@BN_BLINDIN
; Line 245
	push	DWORD PTR [esi+4]
	push	eax
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	edi, eax
$LN8@BN_BLINDIN:
; Line 249
	push	DWORD PTR _ctx$[esp+4]
	mov	eax, DWORD PTR _n$[esp+8]
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	neg	eax
	sbb	eax, eax
	and	eax, edi
	pop	edi
	pop	esi
; Line 253
	ret	0
$LN3@BN_BLINDIN:
; Line 234
	push	234					; 000000eaH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	107					; 0000006bH
	push	100					; 00000064H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN11@BN_BLINDIN:
; Line 235
	pop	edi
	xor	eax, eax
	pop	esi
; Line 253
	ret	0
_BN_BLINDING_convert_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_invert
_TEXT	SEGMENT
_n$ = 8							; size = 4
_b$ = 12						; size = 4
_ctx$ = 16						; size = 4
_BN_BLINDING_invert PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 270
	mov	eax, DWORD PTR _b$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN6@BN_BLINDIN
; Line 271
	push	271					; 0000010fH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	107					; 0000006bH
	push	101					; 00000065H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 257
	xor	eax, eax
; Line 258
	ret	0
$LN6@BN_BLINDIN:
; Line 274
	push	DWORD PTR _ctx$[esp-4]
	push	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _n$[esp+4]
	push	ecx
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
; Line 258
	ret	0
_BN_BLINDING_invert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_convert
_TEXT	SEGMENT
_n$ = 8							; size = 4
_b$ = 12						; size = 4
_ctx$ = 16						; size = 4
_BN_BLINDING_convert PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 223
	push	esi
; Line 233
	mov	esi, DWORD PTR _b$[esp]
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN5@BN_BLINDIN
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN5@BN_BLINDIN
; Line 238
	cmp	DWORD PTR [esi+28], -1
	jne	SHORT $LN6@BN_BLINDIN
; Line 240
	mov	DWORD PTR [esi+28], 0
	jmp	SHORT $LN8@BN_BLINDIN
$LN6@BN_BLINDIN:
; Line 241
	push	DWORD PTR _ctx$[esp]
	push	esi
	call	_BN_BLINDING_update
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@BN_BLINDIN
$LN8@BN_BLINDIN:
; Line 249
	push	DWORD PTR _ctx$[esp]
	mov	eax, DWORD PTR _n$[esp+4]
	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi]
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	neg	eax
	sbb	eax, eax
	and	eax, 1
	pop	esi
; Line 225
	ret	0
$LN5@BN_BLINDIN:
; Line 234
	push	234					; 000000eaH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	107					; 0000006bH
	push	100					; 00000064H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN13@BN_BLINDIN:
; Line 224
	xor	eax, eax
	pop	esi
; Line 225
	ret	0
_BN_BLINDING_convert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_update
_TEXT	SEGMENT
_b$ = 8							; size = 4
_ctx$ = 12						; size = 4
_BN_BLINDING_update PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 192
	push	esi
; Line 195
	mov	esi, DWORD PTR _b$[esp]
	push	edi
	xor	edi, edi
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@BN_BLINDIN
	cmp	DWORD PTR [esi+4], edi
	je	SHORT $LN3@BN_BLINDIN
; Line 200
	cmp	DWORD PTR [esi+28], -1
	jne	SHORT $LN4@BN_BLINDIN
; Line 201
	mov	DWORD PTR [esi+28], edi
$LN4@BN_BLINDIN:
; Line 203
	inc	DWORD PTR [esi+28]
	cmp	DWORD PTR [esi+28], 32			; 00000020H
	jne	SHORT $LN5@BN_BLINDIN
	cmp	DWORD PTR [esi+8], edi
	je	SHORT $LN5@BN_BLINDIN
	test	BYTE PTR [esi+32], 2
	jne	SHORT $LN5@BN_BLINDIN
; Line 206
	push	0
	push	0
	push	DWORD PTR _ctx$[esp+12]
	push	0
	push	0
	push	esi
	call	_BN_BLINDING_create_param
	add	esp, 24					; 00000018H
; Line 208
	jmp	SHORT $LN15@BN_BLINDIN
$LN5@BN_BLINDIN:
	test	BYTE PTR [esi+32], 1
	jne	SHORT $LN10@BN_BLINDIN
; Line 209
	push	DWORD PTR _ctx$[esp+4]
	push	DWORD PTR [esi+12]
	push	eax
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$17
; Line 211
	push	DWORD PTR _ctx$[esp+4]
	mov	eax, DWORD PTR [esi+4]
	push	DWORD PTR [esi+12]
	push	eax
	push	eax
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
$LN15@BN_BLINDIN:
	test	eax, eax
	je	SHORT $err$17
$LN10@BN_BLINDIN:
; Line 215
	mov	edi, 1
	jmp	SHORT $err$17
$LN3@BN_BLINDIN:
; Line 196
	push	196					; 000000c4H
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	107					; 0000006bH
	push	103					; 00000067H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$17:
; Line 217
	cmp	DWORD PTR [esi+28], 32			; 00000020H
; Line 219
	mov	eax, edi
	jne	SHORT $LN11@BN_BLINDIN
; Line 218
	mov	DWORD PTR [esi+28], 0
$LN11@BN_BLINDIN:
	pop	edi
	pop	esi
; Line 220
	ret	0
_BN_BLINDING_update ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_free
_TEXT	SEGMENT
_r$ = 8							; size = 4
_BN_BLINDING_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 176
	push	esi
; Line 177
	mov	esi, DWORD PTR _r$[esp]
	test	esi, esi
	je	SHORT $LN1@BN_BLINDIN
; Line 180
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@BN_BLINDIN
; Line 181
	push	eax
	call	_BN_free
	add	esp, 4
$LN3@BN_BLINDIN:
; Line 182
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@BN_BLINDIN
; Line 183
	push	eax
	call	_BN_free
	add	esp, 4
$LN4@BN_BLINDIN:
; Line 184
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN5@BN_BLINDIN
; Line 185
	push	eax
	call	_BN_free
	add	esp, 4
$LN5@BN_BLINDIN:
; Line 186
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN6@BN_BLINDIN
; Line 187
	push	eax
	call	_BN_free
	add	esp, 4
$LN6@BN_BLINDIN:
; Line 188
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN1@BN_BLINDIN:
	pop	esi
; Line 189
	ret	0
_BN_BLINDING_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_BLINDING_new
_TEXT	SEGMENT
_A$ = 8							; size = 4
_Ai$ = 12						; size = 4
_mod$ = 16						; size = 4
_BN_BLINDING_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_blind.c
; Line 136
	push	esi
; Line 141
	push	141					; 0000008dH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	44					; 0000002cH
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN2@BN_BLINDIN
; Line 142
	push	142					; 0000008eH
	push	OFFSET ??_C@_0BH@CIPLCBLK@?4?2crypto?2bn?2bn_blind?4c?$AA@
	push	65					; 00000041H
	push	102					; 00000066H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 143
	xor	eax, eax
	pop	esi
; Line 173
	ret	0
$LN2@BN_BLINDIN:
	push	edi
; Line 145
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
; Line 146
	mov	eax, DWORD PTR _A$[esp+16]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@BN_BLINDIN
; Line 147
	push	eax
	call	_BN_dup
	add	esp, 4
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	SHORT $err$13
$LN4@BN_BLINDIN:
; Line 150
	mov	eax, DWORD PTR _Ai$[esp+4]
	test	eax, eax
	je	SHORT $LN6@BN_BLINDIN
; Line 151
	push	eax
	call	_BN_dup
	add	esp, 4
	mov	DWORD PTR [esi+4], eax
	test	eax, eax
	je	SHORT $err$13
$LN6@BN_BLINDIN:
; Line 156
	mov	edi, DWORD PTR _mod$[esp+4]
	push	edi
	call	_BN_dup
	add	esp, 4
	mov	DWORD PTR [esi+12], eax
	test	eax, eax
	jne	SHORT $LN7@BN_BLINDIN
$err$13:
; Line 171
	push	esi
	call	_BN_BLINDING_free
	add	esp, 4
; Line 172
	xor	eax, eax
	pop	edi
	pop	esi
; Line 173
	ret	0
$LN7@BN_BLINDIN:
; Line 158
	test	BYTE PTR [edi+16], 4
	je	SHORT $LN8@BN_BLINDIN
; Line 159
	or	DWORD PTR [eax+16], 4
$LN8@BN_BLINDIN:
; Line 167
	lea	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+28], -1
	push	eax
	call	_CRYPTO_THREADID_current
	add	esp, 4
; Line 168
	mov	eax, esi
	pop	edi
	pop	esi
; Line 173
	ret	0
_BN_BLINDING_new ENDP
_TEXT	ENDS
END
