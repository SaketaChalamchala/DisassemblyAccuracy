; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_sign.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_RSA_sign
PUBLIC	_RSA_verify
PUBLIC	_int_rsa_verify
PUBLIC	??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ASN1_TYPE_get:PROC
EXTRN	_RSA_size:PROC
EXTRN	_RSA_private_encrypt:PROC
EXTRN	_RSA_public_decrypt:PROC
EXTRN	_OBJ_nid2obj:PROC
EXTRN	_OBJ_nid2sn:PROC
EXTRN	_OBJ_obj2nid:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_get_digestbyname:PROC
EXTRN	_X509_SIG_free:PROC
EXTRN	_d2i_X509_SIG:PROC
EXTRN	_i2d_X509_SIG:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
CONST	SEGMENT
??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@ DB '.\crypto\rsa\rsa'
	DB	'_sign.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _rsa_check_digestinfo
_TEXT	SEGMENT
_der$ = -4						; size = 4
_sig$ = 8						; size = 4
_dinfo$ = 12						; size = 4
_dinfolen$ = 16						; size = 4
_rsa_check_digestinfo PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_sign.c
; Line 154
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	edi
; Line 158
	lea	eax, DWORD PTR _der$[esp+12]
	mov	DWORD PTR _der$[esp+12], 0
	push	eax
	push	DWORD PTR _sig$[esp+12]
	xor	edi, edi
	call	_i2d_X509_SIG
	mov	ebx, eax
	add	esp, 8
; Line 159
	test	ebx, ebx
	jg	SHORT $LN2@rsa_check_
; Line 160
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 166
	pop	ecx
	ret	0
$LN2@rsa_check_:
; Line 161
	cmp	ebx, DWORD PTR _dinfolen$[esp+8]
	jne	SHORT $LN10@rsa_check_
	mov	edx, DWORD PTR _dinfo$[esp+8]
	mov	ecx, ebx
	push	esi
	mov	esi, DWORD PTR _der$[esp+16]
	sub	ecx, 4
	jb	SHORT $LN7@rsa_check_
	npad	7
$LL8@rsa_check_:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN6@rsa_check_
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL8@rsa_check_
$LN7@rsa_check_:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN5@rsa_check_
$LN6@rsa_check_:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN11@rsa_check_
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN5@rsa_check_
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN11@rsa_check_
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN5@rsa_check_
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN11@rsa_check_
	cmp	ecx, -1
	je	SHORT $LN5@rsa_check_
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	jne	SHORT $LN11@rsa_check_
$LN5@rsa_check_:
	mov	edi, 1
$LN11@rsa_check_:
	pop	esi
$LN10@rsa_check_:
; Line 163
	push	ebx
	push	DWORD PTR _der$[esp+16]
	call	_OPENSSL_cleanse
; Line 164
	push	DWORD PTR _der$[esp+20]
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 165
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 166
	pop	ecx
	ret	0
_rsa_check_digestinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _int_rsa_verify
_TEXT	SEGMENT
_sig$1$ = -8						; size = 4
_p$1 = -4						; size = 4
_dtype$ = 8						; size = 4
_m$ = 12						; size = 4
_m_len$ = 16						; size = 4
_rm$ = 20						; size = 4
_prm_len$ = 24						; size = 4
_sigbuf$ = 28						; size = 4
_siglen$ = 32						; size = 4
_rsa$ = 36						; size = 4
_int_rsa_verify PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_sign.c
; Line 172
	mov	eax, 8
	call	__chkstk
	push	ebx
; Line 185
	mov	ebx, DWORD PTR _rsa$[esp+8]
	push	esi
	push	ebx
	xor	esi, esi
	call	_RSA_size
	mov	ecx, DWORD PTR _siglen$[esp+16]
	add	esp, 4
	cmp	ecx, eax
	je	SHORT $LN2@int_rsa_ve
; Line 186
	push	186					; 000000baH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	119					; 00000077H
	push	145					; 00000091H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 187
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 290
	add	esp, 8
	ret	0
$LN2@int_rsa_ve:
	push	ebp
; Line 190
	mov	ebp, DWORD PTR _dtype$[esp+16]
	cmp	ebp, 114				; 00000072H
	jne	SHORT $LN3@int_rsa_ve
	mov	eax, DWORD PTR _rm$[esp+16]
	test	eax, eax
	je	SHORT $LN3@int_rsa_ve
; Line 191
	push	1
	push	ebx
	push	eax
	push	DWORD PTR _sigbuf$[esp+28]
	push	ecx
	call	_RSA_public_decrypt
	mov	ecx, eax
	add	esp, 20					; 00000014H
; Line 193
	test	ecx, ecx
	jg	SHORT $LN4@int_rsa_ve
; Line 194
	pop	ebp
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 290
	add	esp, 8
	ret	0
$LN4@int_rsa_ve:
; Line 195
	mov	eax, DWORD PTR _prm_len$[esp+16]
	pop	ebp
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], ecx
; Line 196
	mov	eax, 1
; Line 290
	add	esp, 8
	ret	0
$LN3@int_rsa_ve:
	push	edi
; Line 199
	push	199					; 000000c7H
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	ecx
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 200
	test	edi, edi
	jne	SHORT $LN5@int_rsa_ve
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	65					; 00000041H
	push	145					; 00000091H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 289
	mov	eax, esi
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 290
	add	esp, 8
	ret	0
$LN5@int_rsa_ve:
; Line 204
	mov	esi, DWORD PTR _m_len$[esp+20]
	cmp	ebp, 114				; 00000072H
	jne	SHORT $LN6@int_rsa_ve
	cmp	esi, 36					; 00000024H
	je	SHORT $LN6@int_rsa_ve
; Line 205
	push	205					; 000000cdH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	131					; 00000083H
$LN50@int_rsa_ve:
; Line 222
	push	145					; 00000091H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN45@int_rsa_ve:
	xor	esi, esi
$LN31@int_rsa_ve:
; Line 286
	push	DWORD PTR _siglen$[esp+20]
	push	edi
	call	_OPENSSL_cleanse
; Line 287
	push	edi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 289
	mov	eax, esi
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 290
	add	esp, 8
	ret	0
$LN6@int_rsa_ve:
; Line 208
	push	1
	push	ebx
	push	edi
	push	DWORD PTR _sigbuf$[esp+32]
	push	DWORD PTR _siglen$[esp+36]
	call	_RSA_public_decrypt
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 210
	test	ebx, ebx
	jle	SHORT $LN45@int_rsa_ve
; Line 216
	cmp	ebp, 95					; 0000005fH
	jne	SHORT $LN8@int_rsa_ve
	cmp	ebx, 18					; 00000012H
	jne	$LN14@int_rsa_ve
	cmp	BYTE PTR [edi], 4
	jne	$LN14@int_rsa_ve
	cmp	BYTE PTR [edi+1], 16			; 00000010H
	jne	$LN14@int_rsa_ve
; Line 217
	mov	eax, DWORD PTR _rm$[esp+20]
	test	eax, eax
	je	SHORT $LN10@int_rsa_ve
; Line 218
	movups	xmm0, XMMWORD PTR [edi+2]
; Line 220
	lea	esi, DWORD PTR [ebx-17]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _prm_len$[esp+20]
	mov	DWORD PTR [eax], 16			; 00000010H
	jmp	SHORT $LN31@int_rsa_ve
$LN10@int_rsa_ve:
; Line 221
	mov	ecx, DWORD PTR _m$[esp+20]
	lea	edx, DWORD PTR [edi+2]
	mov	esi, 12					; 0000000cH
	npad	7
$LL36@int_rsa_ve:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN35@int_rsa_ve
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL36@int_rsa_ve
; Line 224
	mov	esi, 1
; Line 225
	jmp	$LN31@int_rsa_ve
$LN35@int_rsa_ve:
; Line 222
	push	222					; 000000deH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	104					; 00000068H
; Line 223
	jmp	$LN50@int_rsa_ve
$LN8@int_rsa_ve:
; Line 226
	cmp	ebp, 114				; 00000072H
	jne	SHORT $LN14@int_rsa_ve
; Line 228
	cmp	ebx, 36					; 00000024H
	jne	SHORT $LN18@int_rsa_ve
	mov	edx, DWORD PTR _m$[esp+20]
	lea	esi, DWORD PTR [ebp-82]
	mov	ecx, edi
	npad	1
$LL38@int_rsa_ve:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN18@int_rsa_ve
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL38@int_rsa_ve
; Line 231
	mov	esi, 1
	jmp	$LN31@int_rsa_ve
$LN18@int_rsa_ve:
; Line 229
	push	229					; 000000e5H
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	104					; 00000068H
	jmp	$LN50@int_rsa_ve
$LN14@int_rsa_ve:
; Line 234
	push	ebx
	lea	eax, DWORD PTR _p$1[esp+28]
	mov	DWORD PTR _p$1[esp+28], edi
	push	eax
	push	0
	call	_d2i_X509_SIG
	mov	ecx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sig$1$[esp+24], ecx
; Line 236
	test	ecx, ecx
	je	$LN45@int_rsa_ve
; Line 240
	lea	eax, DWORD PTR [edi+ebx]
	cmp	DWORD PTR _p$1[esp+24], eax
	jne	$LN21@int_rsa_ve
	push	ebx
	push	edi
	push	ecx
	call	_rsa_check_digestinfo
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN21@int_rsa_ve
; Line 250
	mov	ebx, DWORD PTR _sig$1$[esp+24]
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	je	SHORT $LN22@int_rsa_ve
	push	eax
	call	_ASN1_TYPE_get
	add	esp, 4
	cmp	eax, 5
	je	SHORT $LN22@int_rsa_ve
; Line 251
	push	251					; 000000fbH
; Line 252
	jmp	$LN47@int_rsa_ve
$LN22@int_rsa_ve:
; Line 255
	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax]
	call	_OBJ_obj2nid
	add	esp, 4
; Line 262
	cmp	eax, ebp
	je	SHORT $LN23@int_rsa_ve
; Line 263
	push	263					; 00000107H
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	100					; 00000064H
; Line 264
	jmp	$LN48@int_rsa_ve
$LN23@int_rsa_ve:
; Line 266
	mov	ebx, DWORD PTR _rm$[esp+20]
	test	ebx, ebx
	je	SHORT $LN24@int_rsa_ve
; Line 268
	push	ebp
	call	_OBJ_nid2sn
	push	eax
	call	_EVP_get_digestbyname
	add	esp, 8
; Line 269
	test	eax, eax
	je	SHORT $LN43@int_rsa_ve
	push	eax
	call	_EVP_MD_size
	mov	ebp, DWORD PTR _sig$1$[esp+28]
	add	esp, 4
	mov	ecx, DWORD PTR [ebp+4]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN26@int_rsa_ve
; Line 270
	push	270					; 0000010eH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	143					; 0000008fH
	jmp	$LN48@int_rsa_ve
$LN43@int_rsa_ve:
	mov	ebp, DWORD PTR _sig$1$[esp+24]
$LN26@int_rsa_ve:
; Line 272
	mov	eax, DWORD PTR [ebp+4]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+8]
	push	ebx
	call	_memcpy
; Line 273
	mov	eax, DWORD PTR [ebp+4]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _prm_len$[esp+20]
	mov	DWORD PTR [eax], ecx
$LN39@int_rsa_ve:
; Line 284
	push	DWORD PTR _sig$1$[esp+24]
	mov	esi, 1
	call	_X509_SIG_free
	add	esp, 4
	jmp	$LN31@int_rsa_ve
$LN24@int_rsa_ve:
; Line 276
	mov	ebp, DWORD PTR _sig$1$[esp+24]
	mov	edx, DWORD PTR [ebp+4]
	cmp	DWORD PTR [edx], esi
	jne	SHORT $LN30@int_rsa_ve
	mov	ecx, DWORD PTR _m$[esp+20]
	mov	edx, DWORD PTR [edx+8]
	sub	esi, 4
	jb	SHORT $LN41@int_rsa_ve
$LL42@int_rsa_ve:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN40@int_rsa_ve
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL42@int_rsa_ve
$LN41@int_rsa_ve:
	cmp	esi, -4					; fffffffcH
	je	SHORT $LN39@int_rsa_ve
$LN40@int_rsa_ve:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN30@int_rsa_ve
	cmp	esi, -3					; fffffffdH
	je	SHORT $LN39@int_rsa_ve
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN30@int_rsa_ve
	cmp	esi, -2					; fffffffeH
	je	SHORT $LN39@int_rsa_ve
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN30@int_rsa_ve
	cmp	esi, -1
	je	SHORT $LN39@int_rsa_ve
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN39@int_rsa_ve
$LN30@int_rsa_ve:
; Line 278
	push	278					; 00000116H
; Line 279
	jmp	SHORT $LN47@int_rsa_ve
$LN21@int_rsa_ve:
; Line 241
	push	241					; 000000f1H
$LN47@int_rsa_ve:
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	104					; 00000068H
$LN48@int_rsa_ve:
	push	145					; 00000091H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	esi, esi
$err$52:
; Line 284
	push	DWORD PTR _sig$1$[esp+24]
	call	_X509_SIG_free
	add	esp, 4
	jmp	$LN31@int_rsa_ve
_int_rsa_verify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_verify
_TEXT	SEGMENT
_dtype$ = 8						; size = 4
_m$ = 12						; size = 4
_m_len$ = 16						; size = 4
_sigbuf$ = 20						; size = 4
_siglen$ = 24						; size = 4
_rsa$ = 28						; size = 4
_RSA_verify PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_sign.c
; Line 296
	mov	ecx, DWORD PTR _rsa$[esp-4]
	test	BYTE PTR [ecx+60], 64			; 00000040H
	je	SHORT $LN2@RSA_verify
	mov	eax, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+48]
	test	eax, eax
	je	SHORT $LN2@RSA_verify
; Line 297
	mov	DWORD PTR _rsa$[esp-4], ecx
	jmp	eax
$LN2@RSA_verify:
; Line 300
	push	ecx
	push	DWORD PTR _siglen$[esp]
	push	DWORD PTR _sigbuf$[esp+4]
	push	0
	push	0
	push	DWORD PTR _m_len$[esp+16]
	push	DWORD PTR _m$[esp+20]
	push	DWORD PTR _dtype$[esp+24]
	call	_int_rsa_verify
	add	esp, 32					; 00000020H
; Line 301
	ret	0
_RSA_verify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_sign
_TEXT	SEGMENT
_s$1$ = -48						; size = 4
_p$ = -44						; size = 4
_sig$ = -40						; size = 8
_parameter$ = -32					; size = 8
_algor$ = -24						; size = 8
_digest$ = -16						; size = 16
_type$ = 8						; size = 4
_m$ = 12						; size = 4
_m_len$ = 16						; size = 4
_sigret$ = 20						; size = 4
_siglen$ = 24						; size = 4
_i$1$ = 28						; size = 4
_rsa$ = 28						; size = 4
_RSA_sign PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_sign.c
; Line 72
	mov	eax, 48					; 00000030H
	call	__chkstk
	push	esi
	push	edi
; Line 87
	mov	edi, DWORD PTR _rsa$[esp+52]
	xor	eax, eax
	xor	esi, esi
	mov	DWORD PTR _s$1$[esp+56], eax
	test	BYTE PTR [edi+60], 64			; 00000040H
	je	SHORT $LN2@RSA_sign
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+44]
	test	eax, eax
	je	SHORT $LN2@RSA_sign
; Line 88
	push	edi
	push	DWORD PTR _siglen$[esp+56]
	push	DWORD PTR _sigret$[esp+60]
	push	DWORD PTR _m_len$[esp+64]
	push	DWORD PTR _m$[esp+68]
	push	DWORD PTR _type$[esp+72]
	call	eax
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
$LN2@RSA_sign:
	push	ebx
; Line 91
	mov	ebx, DWORD PTR _type$[esp+56]
	cmp	ebx, 114				; 00000072H
	jne	SHORT $LN3@RSA_sign
; Line 92
	cmp	DWORD PTR _m_len$[esp+56], 36		; 00000024H
	je	SHORT $LN5@RSA_sign
; Line 93
	push	93					; 0000005dH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	131					; 00000083H
	push	117					; 00000075H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 94
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
$LN5@RSA_sign:
; Line 97
	mov	eax, DWORD PTR _m$[esp+56]
	mov	DWORD PTR _i$1$[esp+56], 36		; 00000024H
	mov	DWORD PTR _s$1$[esp+60], eax
; Line 98
	jmp	$LN4@RSA_sign
$LN3@RSA_sign:
; Line 99
	lea	eax, DWORD PTR _algor$[esp+60]
; Line 100
	push	ebx
	mov	DWORD PTR _sig$[esp+64], eax
	call	_OBJ_nid2obj
	mov	ecx, DWORD PTR _sig$[esp+64]
	add	esp, 4
	mov	DWORD PTR [ecx], eax
; Line 101
	mov	ecx, DWORD PTR _sig$[esp+60]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $LN6@RSA_sign
; Line 102
	push	102					; 00000066H
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	117					; 00000075H
	push	117					; 00000075H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 103
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
$LN6@RSA_sign:
; Line 105
	cmp	DWORD PTR [eax+12], esi
	jne	SHORT $LN7@RSA_sign
; Line 106
	push	107					; 0000006bH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	116					; 00000074H
	push	117					; 00000075H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 108
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
$LN7@RSA_sign:
; Line 112
	lea	eax, DWORD PTR _parameter$[esp+60]
	mov	DWORD PTR _parameter$[esp+60], 5
	mov	DWORD PTR _parameter$[esp+64], esi
	mov	DWORD PTR [ecx+4], eax
; Line 114
	lea	eax, DWORD PTR _digest$[esp+60]
	mov	DWORD PTR _sig$[esp+64], eax
; Line 115
	mov	eax, DWORD PTR _m$[esp+56]
	mov	DWORD PTR _digest$[esp+68], eax
; Line 116
	mov	eax, DWORD PTR _m_len$[esp+56]
	mov	DWORD PTR _digest$[esp+60], eax
; Line 118
	lea	eax, DWORD PTR _sig$[esp+60]
	push	0
	push	eax
	call	_i2d_X509_SIG
	add	esp, 8
	mov	DWORD PTR _i$1$[esp+56], eax
$LN4@RSA_sign:
; Line 120
	push	ebp
	push	edi
	call	_RSA_size
	mov	ebp, eax
	add	esp, 4
; Line 121
	lea	eax, DWORD PTR [ebp-11]
	cmp	DWORD PTR _i$1$[esp+60], eax
	jle	SHORT $LN8@RSA_sign
; Line 122
	push	122					; 0000007aH
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	112					; 00000070H
	push	117					; 00000075H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 123
	xor	eax, eax
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
$LN8@RSA_sign:
; Line 125
	cmp	ebx, 114				; 00000072H
	je	SHORT $LN15@RSA_sign
; Line 126
	push	126					; 0000007eH
	lea	eax, DWORD PTR [ebp+1]
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 127
	test	esi, esi
	jne	SHORT $LN10@RSA_sign
; Line 128
	push	128					; 00000080H
	push	OFFSET ??_C@_0BI@PEDEDAKL@?4?2crypto?2rsa?2rsa_sign?4c?$AA@
	push	65					; 00000041H
	push	117					; 00000075H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 129
	xor	eax, eax
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
$LN10@RSA_sign:
; Line 132
	lea	eax, DWORD PTR _p$[esp+64]
	mov	DWORD PTR _p$[esp+64], esi
	push	eax
	lea	eax, DWORD PTR _sig$[esp+68]
	push	eax
	call	_i2d_X509_SIG
	add	esp, 8
; Line 133
	mov	eax, esi
	jmp	SHORT $LN9@RSA_sign
$LN15@RSA_sign:
	mov	eax, DWORD PTR _s$1$[esp+64]
$LN9@RSA_sign:
; Line 135
	push	1
	push	edi
	push	DWORD PTR _sigret$[esp+68]
	push	eax
	push	DWORD PTR _i$1$[esp+76]
	call	_RSA_private_encrypt
	mov	ecx, eax
	add	esp, 20					; 00000014H
; Line 136
	test	ecx, ecx
	jg	SHORT $LN11@RSA_sign
; Line 137
	xor	edi, edi
	jmp	SHORT $LN12@RSA_sign
$LN11@RSA_sign:
; Line 139
	mov	eax, DWORD PTR _siglen$[esp+60]
	mov	edi, 1
	mov	DWORD PTR [eax], ecx
$LN12@RSA_sign:
; Line 141
	cmp	ebx, 114				; 00000072H
	je	SHORT $LN13@RSA_sign
; Line 142
	lea	ecx, DWORD PTR [ebp+1]
	push	ecx
	push	esi
	call	_OPENSSL_cleanse
; Line 143
	push	esi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN13@RSA_sign:
; Line 145
	pop	ebp
	pop	ebx
	mov	eax, edi
	pop	edi
	pop	esi
; Line 146
	add	esp, 48					; 00000030H
	ret	0
_RSA_sign ENDP
_TEXT	ENDS
END
