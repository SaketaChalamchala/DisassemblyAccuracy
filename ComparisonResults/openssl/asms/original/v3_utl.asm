; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?hexdig@?1??hex_to_string@@9@9 DB '0123456789ABCDEF', 00H ; `hex_to_string'::`2'::hexdig
CONST	ENDS
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	_X509V3_conf_free
PUBLIC	_X509V3_add_value_bool_nf
PUBLIC	_X509V3_get_value_bool
PUBLIC	_X509V3_get_value_int
PUBLIC	_X509V3_add_value
PUBLIC	_X509V3_add_value_uchar
PUBLIC	_X509V3_add_value_bool
PUBLIC	_X509V3_add_value_int
PUBLIC	_i2s_ASN1_INTEGER
PUBLIC	_s2i_ASN1_INTEGER
PUBLIC	_i2s_ASN1_ENUMERATED
PUBLIC	_X509V3_parse_list
PUBLIC	_hex_to_string
PUBLIC	_string_to_hex
PUBLIC	_name_cmp
PUBLIC	_X509_get1_email
PUBLIC	_X509_REQ_get1_email
PUBLIC	_X509_email_free
PUBLIC	_X509_get1_ocsp
PUBLIC	_X509_check_host
PUBLIC	_X509_check_email
PUBLIC	_X509_check_ip
PUBLIC	_X509_check_ip_asc
PUBLIC	_a2i_IPADDRESS
PUBLIC	_a2i_IPADDRESS_NC
PUBLIC	_a2i_ipadd
PUBLIC	_X509V3_NAME_from_section
PUBLIC	??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@ ; `string'
PUBLIC	??_C@_04HCDDPBNL@TRUE?$AA@			; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01EANLCPLP@y?$AA@				; `string'
PUBLIC	??_C@_03IPHJCBHH@YES?$AA@			; `string'
PUBLIC	??_C@_03ICICOMAL@yes?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_01NANMIPIL@N?$AA@				; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_02NFLNFON@NO?$AA@				; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	??_C@_07BDICHDDB@?0value?3?$AA@			; `string'
PUBLIC	??_C@_06FONLLLNC@?0name?3?$AA@			; `string'
PUBLIC	??_C@_08PCLJGJAL@section?3?$AA@			; `string'
PUBLIC	??_C@_04DLDJKMIA@xn?9?9?$AA@			; `string'
PUBLIC	??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ ; `string'
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	__imp__isupper:PROC
EXTRN	__imp__isspace:PROC
EXTRN	__imp__tolower:PROC
EXTRN	__imp__memchr:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp___strnicmp:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_new:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_find:PROC
EXTRN	_sk_push:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BUF_strdup:PROC
EXTRN	_BUF_strndup:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_add_error_data:PROC
EXTRN	_CONF_parse_list:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_bn2dec:PROC
EXTRN	_BN_hex2bn:PROC
EXTRN	_BN_dec2bn:PROC
EXTRN	_ASN1_OCTET_STRING_new:PROC
EXTRN	_ASN1_OCTET_STRING_free:PROC
EXTRN	_ASN1_OCTET_STRING_set:PROC
EXTRN	_BN_to_ASN1_INTEGER:PROC
EXTRN	_ASN1_INTEGER_to_BN:PROC
EXTRN	_ASN1_ENUMERATED_to_BN:PROC
EXTRN	_ASN1_STRING_to_UTF8:PROC
EXTRN	_OBJ_obj2nid:PROC
EXTRN	_X509_EXTENSION_free:PROC
EXTRN	_X509_get_subject_name:PROC
EXTRN	_X509_REQ_get_extensions:PROC
EXTRN	_X509_NAME_get_index_by_NID:PROC
EXTRN	_X509_NAME_get_entry:PROC
EXTRN	_X509_NAME_add_entry_by_txt:PROC
EXTRN	_X509_NAME_ENTRY_get_data:PROC
EXTRN	_X509_get_ext_d2i:PROC
EXTRN	_GENERAL_NAME_free:PROC
EXTRN	_GENERAL_NAMES_free:PROC
EXTRN	_AUTHORITY_INFO_ACCESS_free:PROC
EXTRN	_X509V3_get_d2i:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ DB '%d.%d.%d.%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLDJKMIA@xn?9?9?$AA@
CONST	SEGMENT
??_C@_04DLDJKMIA@xn?9?9?$AA@ DB 'xn--', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PCLJGJAL@section?3?$AA@
CONST	SEGMENT
??_C@_08PCLJGJAL@section?3?$AA@ DB 'section:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FONLLLNC@?0name?3?$AA@
CONST	SEGMENT
??_C@_06FONLLLNC@?0name?3?$AA@ DB ',name:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDICHDDB@?0value?3?$AA@
CONST	SEGMENT
??_C@_07BDICHDDB@?0value?3?$AA@ DB ',value:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NFLNFON@NO?$AA@
CONST	SEGMENT
??_C@_02NFLNFON@NO?$AA@ DB 'NO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NANMIPIL@N?$AA@
CONST	SEGMENT
??_C@_01NANMIPIL@N?$AA@ DB 'N', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICICOMAL@yes?$AA@
CONST	SEGMENT
??_C@_03ICICOMAL@yes?$AA@ DB 'yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IPHJCBHH@YES?$AA@
CONST	SEGMENT
??_C@_03IPHJCBHH@YES?$AA@ DB 'YES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EANLCPLP@y?$AA@
CONST	SEGMENT
??_C@_01EANLCPLP@y?$AA@ DB 'y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE?$AA@ DB 'FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCDDPBNL@TRUE?$AA@
CONST	SEGMENT
??_C@_04HCDDPBNL@TRUE?$AA@ DB 'TRUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@ DB '.\crypto\x509v3'
	DB	'\v3_utl.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_x509_check
_TEXT	SEGMENT
_cnid$1$ = -16						; size = 4
_gens$1$ = -12						; size = 4
_rv$1$ = -8						; size = 4
_san_present$1$ = -4					; size = 4
_x$ = 8							; size = 4
_chk$ = 12						; size = 4
_alt_type$1$ = 16					; size = 4
_chklen$ = 16						; size = 4
_flags$ = 20						; size = 4
_equal$1$ = 24						; size = 4
_check_type$ = 24					; size = 4
_peername$ = 28						; size = 4
_do_x509_check PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 926
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 937
	mov	eax, DWORD PTR _flags$[esp+12]
	push	ebx
	push	ebp
	xor	ebx, ebx
	and	eax, -32769				; ffff7fffH
	push	esi
; Line 938
	mov	esi, DWORD PTR _check_type$[esp+24]
	mov	DWORD PTR _cnid$1$[esp+28], ebx
	mov	DWORD PTR _san_present$1$[esp+28], ebx
	mov	DWORD PTR _rv$1$[esp+28], ebx
	mov	DWORD PTR _flags$[esp+24], eax
	push	edi
	mov	edi, DWORD PTR _chklen$[esp+28]
	cmp	esi, 1
	jne	SHORT $LN7@do_x509_ch
; Line 939
	mov	ebx, 48					; 00000030H
; Line 940
	mov	DWORD PTR _alt_type$1$[esp+28], 22	; 00000016H
	mov	DWORD PTR _cnid$1$[esp+32], ebx
; Line 941
	mov	DWORD PTR _equal$1$[esp+28], OFFSET _equal_email
	jmp	SHORT $LN10@do_x509_ch
$LN7@do_x509_ch:
; Line 942
	cmp	esi, 2
	jne	SHORT $LN9@do_x509_ch
; Line 943
	mov	ebx, 13					; 0000000dH
	mov	DWORD PTR _cnid$1$[esp+32], ebx
; Line 945
	cmp	edi, 1
	jbe	SHORT $LN11@do_x509_ch
	mov	ecx, DWORD PTR _chk$[esp+28]
	cmp	BYTE PTR [ecx], 46			; 0000002eH
	jne	SHORT $LN11@do_x509_ch
; Line 946
	or	eax, 32768				; 00008000H
	mov	DWORD PTR _flags$[esp+28], eax
$LN11@do_x509_ch:
; Line 948
	test	al, 2
	mov	DWORD PTR _alt_type$1$[esp+28], 22	; 00000016H
	mov	eax, OFFSET _equal_wildcard
	mov	ecx, OFFSET _equal_nocase
	cmovne	eax, ecx
	mov	DWORD PTR _equal$1$[esp+28], eax
; Line 952
	jmp	SHORT $LN10@do_x509_ch
$LN9@do_x509_ch:
; Line 953
	mov	DWORD PTR _alt_type$1$[esp+28], 4
; Line 954
	mov	DWORD PTR _equal$1$[esp+28], OFFSET _equal_case
$LN10@do_x509_ch:
; Line 957
	test	edi, edi
	jne	SHORT $LN14@do_x509_ch
; Line 958
	mov	edi, DWORD PTR _chk$[esp+28]
	lea	ecx, DWORD PTR [edi+1]
	npad	2
$LL37@do_x509_ch:
	mov	al, BYTE PTR [edi]
	inc	edi
	test	al, al
	jne	SHORT $LL37@do_x509_ch
	sub	edi, ecx
$LN14@do_x509_ch:
; Line 960
	push	0
	push	0
	push	85					; 00000055H
	push	DWORD PTR _x$[esp+40]
	call	_X509_get_ext_d2i
	add	esp, 16					; 00000010H
	mov	DWORD PTR _gens$1$[esp+32], eax
; Line 961
	test	eax, eax
	je	$LN40@do_x509_ch
; Line 962
	push	eax
	xor	ebx, ebx
	call	_sk_num
	mov	ebp, DWORD PTR _flags$[esp+32]
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN30@do_x509_ch
	npad	6
$LL4@do_x509_ch:
; Line 965
	push	ebx
	push	DWORD PTR _gens$1$[esp+36]
	call	_sk_value
	add	esp, 8
; Line 966
	cmp	DWORD PTR [eax], esi
	jne	SHORT $LN2@do_x509_ch
; Line 977
	push	DWORD PTR _peername$[esp+28]
	mov	eax, DWORD PTR [eax+4]
	push	edi
	push	DWORD PTR _chk$[esp+36]
	mov	DWORD PTR _san_present$1$[esp+44], 1
	push	ebp
	push	DWORD PTR _equal$1$[esp+44]
	push	DWORD PTR _alt_type$1$[esp+48]
	push	eax
	call	_do_check_string
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _rv$1$[esp+32], eax
	test	eax, eax
	jne	SHORT $LN30@do_x509_ch
$LN2@do_x509_ch:
; Line 962
	push	DWORD PTR _gens$1$[esp+32]
	inc	ebx
	call	_sk_num
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL4@do_x509_ch
$LN30@do_x509_ch:
; Line 980
	push	DWORD PTR _gens$1$[esp+32]
	call	_GENERAL_NAMES_free
; Line 981
	mov	eax, DWORD PTR _rv$1$[esp+36]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@do_x509_ch
; Line 984
	mov	ebx, DWORD PTR _cnid$1$[esp+32]
	test	ebx, ebx
	je	SHORT $LN6@do_x509_ch
	cmp	DWORD PTR _san_present$1$[esp+32], eax
	je	SHORT $LN23@do_x509_ch
	test	BYTE PTR _flags$[esp+28], 1
	je	SHORT $LN6@do_x509_ch
$LN40@do_x509_ch:
	mov	ebp, DWORD PTR _flags$[esp+28]
$LN23@do_x509_ch:
; Line 990
	test	ebx, ebx
	je	SHORT $LN6@do_x509_ch
; Line 994
	push	DWORD PTR _x$[esp+28]
	call	_X509_get_subject_name
; Line 995
	push	-1
	push	DWORD PTR _cnid$1$[esp+40]
	mov	ebx, eax
	push	ebx
	call	_X509_NAME_get_index_by_NID
	mov	esi, eax
	add	esp, 16					; 00000010H
	test	esi, esi
	js	SHORT $LN6@do_x509_ch
$LL5@do_x509_ch:
; Line 998
	push	esi
	push	ebx
	call	_X509_NAME_get_entry
; Line 999
	push	eax
	call	_X509_NAME_ENTRY_get_data
; Line 1002
	push	DWORD PTR _peername$[esp+40]
	push	edi
	push	DWORD PTR _chk$[esp+48]
	push	ebp
	push	DWORD PTR _equal$1$[esp+56]
	push	-1
	push	eax
	call	_do_check_string
	add	esp, 40					; 00000028H
	test	eax, eax
	jne	SHORT $LN1@do_x509_ch
; Line 995
	push	esi
	push	DWORD PTR _cnid$1$[esp+36]
	push	ebx
	call	_X509_NAME_get_index_by_NID
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jns	SHORT $LL5@do_x509_ch
$LN6@do_x509_ch:
; Line 1005
	xor	eax, eax
$LN1@do_x509_ch:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1006
	add	esp, 16					; 00000010H
	ret	0
_do_x509_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_check_string
_TEXT	SEGMENT
_astr$1 = 8						; size = 4
_a$ = 8							; size = 4
_cmp_type$ = 12						; size = 4
_equal$ = 16						; size = 4
_flags$ = 20						; size = 4
_b$ = 24						; size = 4
_blen$ = 28						; size = 4
_peername$ = 32						; size = 4
_do_check_string PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 891
	push	ebx
	push	esi
	push	edi
; Line 894
	mov	edi, DWORD PTR _a$[esp+8]
	xor	ebx, ebx
	mov	ecx, DWORD PTR [edi+8]
	test	ecx, ecx
	je	$LN3@do_check_s
	mov	esi, DWORD PTR [edi]
	test	esi, esi
	je	$LN3@do_check_s
; Line 896
	mov	eax, DWORD PTR _cmp_type$[esp+8]
	test	eax, eax
	jle	$LN4@do_check_s
; Line 897
	cmp	eax, DWORD PTR [edi+4]
	jne	$LN3@do_check_s
; Line 899
	cmp	eax, 22					; 00000016H
	jne	SHORT $LN7@do_check_s
; Line 900
	push	DWORD PTR _flags$[esp+8]
	push	DWORD PTR _blen$[esp+12]
	push	DWORD PTR _b$[esp+16]
	push	esi
	push	ecx
	call	DWORD PTR _equal$[esp+28]
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 903
	test	ebx, ebx
	jle	$LN5@do_check_s
	jmp	SHORT $LN14@do_check_s
$LN7@do_check_s:
; Line 901
	mov	edx, DWORD PTR _blen$[esp+8]
	cmp	esi, edx
	jne	$LN5@do_check_s
	mov	esi, DWORD PTR _b$[esp+8]
	sub	edx, 4
	jb	SHORT $LN17@do_check_s
	npad	2
$LL18@do_check_s:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN16@do_check_s
	add	ecx, 4
	add	esi, 4
	sub	edx, 4
	jae	SHORT $LL18@do_check_s
$LN17@do_check_s:
	cmp	edx, -4					; fffffffcH
	je	SHORT $LN15@do_check_s
$LN16@do_check_s:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [esi]
	jne	$LN5@do_check_s
	cmp	edx, -3					; fffffffdH
	je	SHORT $LN15@do_check_s
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	$LN5@do_check_s
	cmp	edx, -2					; fffffffeH
	je	SHORT $LN15@do_check_s
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	$LN5@do_check_s
	cmp	edx, -1
	je	SHORT $LN15@do_check_s
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [esi+3]
	jne	SHORT $LN5@do_check_s
$LN15@do_check_s:
; Line 902
	mov	ebx, 1
$LN14@do_check_s:
; Line 903
	mov	esi, DWORD PTR _peername$[esp+8]
	test	esi, esi
	je	SHORT $LN5@do_check_s
; Line 904
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+8]
	call	_BUF_strndup
	add	esp, 8
	mov	DWORD PTR [esi], eax
; Line 921
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 922
	ret	0
$LN4@do_check_s:
; Line 908
	lea	eax, DWORD PTR _astr$1[esp+8]
	push	edi
	push	eax
	call	_ASN1_STRING_to_UTF8
	mov	esi, eax
	add	esp, 8
; Line 909
	test	esi, esi
	jns	SHORT $LN11@do_check_s
; Line 914
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 922
	ret	0
$LN11@do_check_s:
; Line 916
	push	DWORD PTR _flags$[esp+8]
	push	DWORD PTR _blen$[esp+12]
	push	DWORD PTR _b$[esp+16]
	push	esi
	push	DWORD PTR _astr$1[esp+24]
	call	DWORD PTR _equal$[esp+28]
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 917
	test	ebx, ebx
	jle	SHORT $LN12@do_check_s
	mov	edi, DWORD PTR _peername$[esp+8]
	test	edi, edi
	je	SHORT $LN12@do_check_s
; Line 918
	push	esi
	push	DWORD PTR _astr$1[esp+12]
	call	_BUF_strndup
	add	esp, 8
	mov	DWORD PTR [edi], eax
$LN12@do_check_s:
; Line 919
	push	DWORD PTR _astr$1[esp+8]
	call	_CRYPTO_free
	add	esp, 4
$LN5@do_check_s:
; Line 921
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 922
	ret	0
$LN3@do_check_s:
	pop	edi
	pop	esi
; Line 895
	xor	eax, eax
	pop	ebx
; Line 922
	ret	0
_do_check_string ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _equal_wildcard
_TEXT	SEGMENT
_pattern$ = 8						; size = 4
_pattern_len$ = 12					; size = 4
_subject$ = 16						; size = 4
_subject_len$ = 20					; size = 4
_flags$ = 24						; size = 4
_equal_wildcard PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 865
	push	ebx
; Line 872
	mov	ebx, DWORD PTR _subject_len$[esp]
	push	ebp
	mov	ebp, DWORD PTR _flags$[esp+4]
	push	esi
	mov	esi, DWORD PTR _pattern$[esp+8]
	push	edi
	mov	edi, DWORD PTR _subject$[esp+12]
	cmp	ebx, 1
	jbe	SHORT $LN3@equal_wild
	cmp	BYTE PTR [edi], 46			; 0000002eH
	je	SHORT $LN6@equal_wild
$LN3@equal_wild:
; Line 873
	push	ebp
	push	DWORD PTR _pattern_len$[esp+16]
	push	esi
	call	_valid_star
	mov	ecx, eax
	add	esp, 12					; 0000000cH
; Line 874
	test	ecx, ecx
	jne	SHORT $LN4@equal_wild
$LN6@equal_wild:
; Line 875
	push	ebp
	push	ebx
	push	edi
	push	DWORD PTR _pattern_len$[esp+24]
	push	esi
	call	_equal_nocase
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 880
	ret	0
$LN4@equal_wild:
; Line 877
	mov	edx, DWORD PTR _pattern_len$[esp+12]
	mov	eax, esi
	push	ebp
	push	ebx
	sub	eax, ecx
	dec	edx
	push	edi
	add	eax, edx
	push	eax
	lea	eax, DWORD PTR [ecx+1]
	sub	ecx, esi
	push	eax
	push	ecx
	push	esi
	call	_wildcard_match
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 880
	ret	0
_equal_wildcard ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _valid_star
_TEXT	SEGMENT
_dots$1$ = -4						; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
_flags$ = 16						; size = 4
_valid_star PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 802
	mov	eax, 4
	call	__chkstk
; Line 807
	mov	ecx, DWORD PTR _len$[esp]
	xor	edx, edx
	push	ebx
	push	ebp
	xor	ebp, ebp
	mov	DWORD PTR _dots$1$[esp+12], edx
	push	esi
	xor	esi, esi
	push	edi
	lea	ebx, DWORD PTR [ebp+1]
	test	ecx, ecx
	je	$LN3@valid_star
; Line 803
	mov	edi, DWORD PTR _p$[esp+16]
	npad	5
$LL4@valid_star:
; Line 812
	mov	al, BYTE PTR [edi]
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN5@valid_star
; Line 814
	mov	eax, DWORD PTR _len$[esp+16]
	mov	ecx, ebx
	dec	eax
	and	ecx, 1
	cmp	esi, eax
	je	SHORT $LN27@valid_star
	mov	eax, DWORD PTR _p$[esp+16]
	cmp	BYTE PTR [esi+eax+1], 46		; 0000002eH
	je	SHORT $LN27@valid_star
	xor	eax, eax
	jmp	SHORT $LN28@valid_star
$LN27@valid_star:
	mov	eax, 1
$LN28@valid_star:
; Line 820
	test	ebp, ebp
	jne	$LN25@valid_star
	test	bl, 8
	jne	$LN25@valid_star
	test	edx, edx
	jne	$LN25@valid_star
; Line 824
	test	BYTE PTR _flags$[esp+16], 4
	je	SHORT $LN9@valid_star
	test	ecx, ecx
	je	$LN25@valid_star
	test	eax, eax
	je	$LN25@valid_star
$LN9@valid_star:
; Line 827
	test	ecx, ecx
	jne	SHORT $LN11@valid_star
	test	eax, eax
	je	$LN25@valid_star
$LN11@valid_star:
; Line 831
	mov	ecx, DWORD PTR _len$[esp+16]
	mov	ebp, edi
	and	ebx, -2					; fffffffeH
	jmp	SHORT $LN2@valid_star
$LN5@valid_star:
; Line 833
	cmp	al, 97					; 00000061H
	jb	SHORT $LN15@valid_star
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN14@valid_star
$LN15@valid_star:
	cmp	al, 65					; 00000041H
	jb	SHORT $LN16@valid_star
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN14@valid_star
$LN16@valid_star:
	cmp	al, 48					; 00000030H
	jb	SHORT $LN12@valid_star
	cmp	al, 57					; 00000039H
	ja	SHORT $LN12@valid_star
$LN14@valid_star:
; Line 835
	test	bl, 1
	je	SHORT $LN17@valid_star
	mov	eax, ecx
	sub	eax, esi
	cmp	eax, 4
	jb	SHORT $LN17@valid_star
	push	4
	push	OFFSET ??_C@_04DLDJKMIA@xn?9?9?$AA@
	push	edi
	call	DWORD PTR __imp___strnicmp
	mov	edx, DWORD PTR _dots$1$[esp+32]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _len$[esp+16]
	test	eax, eax
	jne	SHORT $LN17@valid_star
; Line 836
	or	ebx, 8
$LN17@valid_star:
; Line 837
	and	ebx, -6					; fffffffaH
	jmp	SHORT $LN2@valid_star
$LN12@valid_star:
; Line 838
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN18@valid_star
; Line 839
	test	bl, 5
	jne	SHORT $LN25@valid_star
; Line 842
	inc	edx
	mov	ebx, 1
	mov	DWORD PTR _dots$1$[esp+20], edx
	jmp	SHORT $LN2@valid_star
$LN18@valid_star:
; Line 843
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN25@valid_star
; Line 845
	test	bl, 1
	jne	SHORT $LN25@valid_star
; Line 847
	or	ebx, 4
$LN2@valid_star:
; Line 807
	inc	esi
	inc	edi
	cmp	esi, ecx
	jb	$LL4@valid_star
$LN3@valid_star:
; Line 856
	test	bl, 5
	jne	SHORT $LN25@valid_star
	cmp	edx, 2
	jl	SHORT $LN25@valid_star
; Line 858
	pop	edi
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 859
	pop	ecx
	ret	0
$LN25@valid_star:
	pop	edi
	pop	esi
	pop	ebp
; Line 857
	xor	eax, eax
	pop	ebx
; Line 859
	pop	ecx
	ret	0
_valid_star ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _wildcard_match
_TEXT	SEGMENT
_prefix$ = 8						; size = 4
_prefix_len$ = 12					; size = 4
_suffix$ = 16						; size = 4
_suffix_len$ = 20					; size = 4
_subject$ = 24						; size = 4
_subject_len$ = 28					; size = 4
_flags$ = 32						; size = 4
_wildcard_match PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 755
	mov	eax, DWORD PTR _suffix_len$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _prefix_len$[esp]
	add	eax, ebx
	push	ebp
	xor	ebp, ebp
	cmp	DWORD PTR _subject_len$[esp+4], eax
	jae	SHORT $LN5@wildcard_m
; Line 756
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 793
	ret	0
$LN5@wildcard_m:
	push	edi
; Line 757
	push	DWORD PTR _flags$[esp+8]
	mov	edi, DWORD PTR _subject$[esp+12]
	push	ebx
	push	edi
	push	ebx
	push	DWORD PTR _prefix$[esp+24]
	call	_equal_nocase
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN6@wildcard_m
	pop	edi
	pop	ebp
	pop	ebx
; Line 793
	ret	0
$LN6@wildcard_m:
; Line 760
	mov	eax, DWORD PTR _suffix_len$[esp+8]
	push	esi
; Line 761
	push	DWORD PTR _flags$[esp+12]
	lea	esi, DWORD PTR [ebx+edi]
	sub	edi, eax
	add	edi, DWORD PTR _subject_len$[esp+16]
	push	eax
	push	DWORD PTR _suffix$[esp+20]
	push	eax
	push	edi
	call	_equal_nocase
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN17@wildcard_m
; Line 767
	test	ebx, ebx
	jne	SHORT $LN23@wildcard_m
	mov	eax, DWORD PTR _suffix$[esp+12]
	cmp	BYTE PTR [eax], 46			; 0000002eH
	jne	SHORT $LN23@wildcard_m
; Line 768
	cmp	esi, edi
	je	SHORT $LN17@wildcard_m
; Line 771
	test	BYTE PTR _flags$[esp+12], 8
	je	SHORT $LN11@wildcard_m
; Line 772
	lea	ebp, DWORD PTR [ebx+1]
; Line 776
	jmp	SHORT $LN11@wildcard_m
$LN23@wildcard_m:
	cmp	DWORD PTR _subject_len$[esp+12], 4
	jb	SHORT $LN11@wildcard_m
	push	4
	push	OFFSET ??_C@_04DLDJKMIA@xn?9?9?$AA@
	push	DWORD PTR _subject$[esp+20]
	call	DWORD PTR __imp___strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN17@wildcard_m
$LN11@wildcard_m:
; Line 779
	lea	eax, DWORD PTR [esi+1]
	cmp	edi, eax
	jne	SHORT $LN12@wildcard_m
	cmp	BYTE PTR [esi], 42			; 0000002aH
	je	SHORT $LN24@wildcard_m
$LN12@wildcard_m:
; Line 786
	cmp	esi, edi
	je	SHORT $LN24@wildcard_m
	npad	2
$LL4@wildcard_m:
; Line 787
	mov	al, BYTE PTR [esi]
	cmp	al, 48					; 00000030H
	jb	SHORT $LN14@wildcard_m
	cmp	al, 57					; 00000039H
	jbe	SHORT $LN2@wildcard_m
$LN14@wildcard_m:
	cmp	al, 65					; 00000041H
	jb	SHORT $LN15@wildcard_m
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN2@wildcard_m
$LN15@wildcard_m:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN16@wildcard_m
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN2@wildcard_m
$LN16@wildcard_m:
	cmp	al, 45					; 0000002dH
	je	SHORT $LN2@wildcard_m
	test	ebp, ebp
	je	SHORT $LN17@wildcard_m
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN17@wildcard_m
$LN2@wildcard_m:
; Line 786
	inc	esi
	cmp	esi, edi
	jne	SHORT $LL4@wildcard_m
$LN24@wildcard_m:
	pop	esi
	pop	edi
	pop	ebp
; Line 792
	mov	eax, 1
	pop	ebx
; Line 793
	ret	0
$LN17@wildcard_m:
	pop	esi
	pop	edi
	pop	ebp
; Line 791
	xor	eax, eax
	pop	ebx
; Line 793
	ret	0
_wildcard_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _equal_email
_TEXT	SEGMENT
_a$ = 8							; size = 4
_a_len$ = 12						; size = 4
_b$ = 16						; size = 4
_b_len$ = 20						; size = 4
_unused_flags$ = 24					; size = 4
_equal_email PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 718
	push	esi
	push	edi
; Line 719
	mov	edi, DWORD PTR _a_len$[esp+4]
	mov	esi, edi
; Line 720
	cmp	edi, DWORD PTR _b_len$[esp+4]
	je	SHORT $LN10@equal_emai
; Line 721
	pop	edi
	xor	eax, eax
	pop	esi
; Line 738
	ret	0
$LN10@equal_emai:
	push	ebx
; Line 727
	mov	ebx, DWORD PTR _b$[esp+8]
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+12]
	test	edi, edi
	je	SHORT $LN7@equal_emai
	mov	ecx, ebp
	lea	eax, DWORD PTR [edi+ebx]
	sub	ecx, ebx
$LL2@equal_emai:
; Line 728
	lea	eax, DWORD PTR [eax-1]
	dec	esi
; Line 729
	cmp	BYTE PTR [ecx+eax], 64			; 00000040H
	je	SHORT $LN11@equal_emai
	cmp	BYTE PTR [eax], 64			; 00000040H
	je	SHORT $LN11@equal_emai
; Line 727
	test	esi, esi
	jne	SHORT $LL2@equal_emai
$LN7@equal_emai:
; Line 735
	test	esi, esi
; Line 737
	push	0
	cmove	esi, edi
	push	esi
	push	ebx
	push	esi
	push	ebp
	call	_equal_case
	add	esp, 20					; 00000014H
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 738
	ret	0
$LN11@equal_emai:
; Line 730
	push	0
	mov	ecx, edi
	lea	eax, DWORD PTR [esi+ebx]
	sub	ecx, esi
	push	ecx
	push	eax
	push	ecx
	lea	eax, DWORD PTR [esi+ebp]
	push	eax
	call	_equal_nocase
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN7@equal_emai
; Line 738
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
	ret	0
_equal_email ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _equal_case
_TEXT	SEGMENT
_pattern$ = 8						; size = 4
_pattern_len$ = 12					; size = 4
_subject$ = 16						; size = 4
_subject_len$ = 20					; size = 4
_flags$ = 24						; size = 4
_equal_case PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 653
	test	DWORD PTR _flags$[esp-4], 32768		; 00008000H
	mov	ecx, DWORD PTR _pattern_len$[esp-4]
	mov	eax, ecx
	push	esi
; Line 644
	mov	esi, DWORD PTR _pattern$[esp]
	mov	edx, esi
	push	edi
; Line 653
	mov	edi, DWORD PTR _subject_len$[esp+4]
	je	SHORT $LN9@equal_case
; Line 656
	cmp	ecx, edi
	jbe	SHORT $LN22@equal_case
	push	ebx
$LL5@equal_case:
	mov	bl, BYTE PTR [edx]
	test	bl, bl
	je	SHORT $LN23@equal_case
; Line 657
	test	BYTE PTR _flags$[esp+8], 16		; 00000010H
	je	SHORT $LN8@equal_case
	cmp	bl, 46					; 0000002eH
	je	SHORT $LN23@equal_case
$LN8@equal_case:
; Line 661
	dec	eax
	inc	edx
	cmp	eax, edi
	ja	SHORT $LL5@equal_case
$LN23@equal_case:
	pop	ebx
$LN22@equal_case:
; Line 665
	cmp	eax, edi
	jne	SHORT $LN9@equal_case
; Line 666
	mov	esi, edx
; Line 667
	mov	ecx, eax
$LN9@equal_case:
; Line 706
	cmp	ecx, edi
	je	SHORT $LN2@equal_case
$LN20@equal_case:
	pop	edi
; Line 707
	xor	eax, eax
	pop	esi
; Line 709
	ret	0
$LN2@equal_case:
; Line 708
	mov	edx, DWORD PTR _subject$[esp+4]
	sub	ecx, 4
	jb	SHORT $LN18@equal_case
$LL19@equal_case:
	mov	eax, DWORD PTR [esi]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN17@equal_case
	add	esi, 4
	add	edx, 4
	sub	ecx, 4
	jae	SHORT $LL19@equal_case
$LN18@equal_case:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN16@equal_case
$LN17@equal_case:
	mov	al, BYTE PTR [esi]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN20@equal_case
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN16@equal_case
	mov	al, BYTE PTR [esi+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN20@equal_case
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN16@equal_case
	mov	al, BYTE PTR [esi+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN20@equal_case
	cmp	ecx, -1
	je	SHORT $LN16@equal_case
	mov	al, BYTE PTR [esi+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN20@equal_case
$LN16@equal_case:
	pop	edi
	mov	eax, 1
	pop	esi
; Line 709
	ret	0
_equal_case ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _equal_nocase
_TEXT	SEGMENT
_pattern$ = 8						; size = 4
_pattern_len$ = 12					; size = 4
_subject$ = 16						; size = 4
_subject_len$ = 20					; size = 4
_flags$ = 24						; size = 4
_equal_nocase PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 653
	test	DWORD PTR _flags$[esp-4], 32768		; 00008000H
	push	ebx
; Line 644
	mov	ebx, DWORD PTR _pattern$[esp]
	mov	ecx, ebx
	push	esi
; Line 653
	mov	esi, DWORD PTR _subject_len$[esp+4]
	push	edi
; Line 645
	mov	edi, DWORD PTR _pattern_len$[esp+8]
	mov	eax, edi
; Line 653
	je	SHORT $LN16@equal_noca
; Line 656
	cmp	edi, esi
	jbe	SHORT $LN30@equal_noca
$LL12@equal_noca:
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $LN30@equal_noca
; Line 657
	test	BYTE PTR _flags$[esp+8], 16		; 00000010H
	je	SHORT $LN15@equal_noca
	cmp	dl, 46					; 0000002eH
	je	SHORT $LN30@equal_noca
$LN15@equal_noca:
; Line 661
	dec	eax
	inc	ecx
	cmp	eax, esi
	ja	SHORT $LL12@equal_noca
$LN30@equal_noca:
; Line 665
	cmp	eax, esi
	jne	SHORT $LN16@equal_noca
; Line 666
	mov	ebx, ecx
; Line 667
	mov	edi, eax
$LN16@equal_noca:
; Line 677
	cmp	edi, esi
	je	SHORT $LN19@equal_noca
$LN21@equal_noca:
	pop	edi
	pop	esi
; Line 678
	xor	eax, eax
	pop	ebx
; Line 698
	ret	0
$LN19@equal_noca:
; Line 679
	test	edi, edi
	je	SHORT $LN3@equal_noca
	mov	esi, DWORD PTR _subject$[esp+8]
	sub	ebx, esi
$LL2@equal_noca:
; Line 680
	mov	cl, BYTE PTR [ebx+esi]
; Line 681
	mov	dl, BYTE PTR [esi]
; Line 683
	test	cl, cl
	je	SHORT $LN21@equal_noca
; Line 685
	cmp	cl, dl
	je	SHORT $LN9@equal_noca
; Line 686
	lea	eax, DWORD PTR [ecx-65]
	cmp	al, 25					; 00000019H
	ja	SHORT $LN7@equal_noca
; Line 687
	add	cl, 32					; 00000020H
$LN7@equal_noca:
; Line 688
	lea	eax, DWORD PTR [edx-65]
	cmp	al, 25					; 00000019H
	ja	SHORT $LN8@equal_noca
; Line 689
	add	dl, 32					; 00000020H
$LN8@equal_noca:
; Line 690
	cmp	cl, dl
	jne	SHORT $LN21@equal_noca
$LN9@equal_noca:
; Line 694
	inc	esi
; Line 695
	sub	edi, 1
	jne	SHORT $LL2@equal_noca
$LN3@equal_noca:
	pop	edi
	pop	esi
; Line 697
	mov	eax, 1
	pop	ebx
; Line 698
	ret	0
_equal_nocase ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _skip_prefix
_TEXT	SEGMENT
_p$ = 8							; size = 4
_plen$ = 12						; size = 4
_subject$ = 16						; size = 4
_subject_len$ = 20					; size = 4
_flags$ = 24						; size = 4
_skip_prefix PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 643
	push	ebx
; Line 653
	mov	ebx, DWORD PTR _flags$[esp]
	push	ebp
	mov	ebp, DWORD PTR _plen$[esp+4]
	push	edi
	mov	edi, DWORD PTR _p$[esp+8]
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [edi]
	test	ebx, 32768				; 00008000H
	je	SHORT $LN6@skip_prefi
; Line 656
	push	esi
	mov	esi, DWORD PTR _subject_len$[esp+12]
	cmp	eax, esi
	jbe	SHORT $LN14@skip_prefi
$LL2@skip_prefi:
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $LN13@skip_prefi
; Line 657
	test	bl, 16					; 00000010H
	je	SHORT $LN5@skip_prefi
	cmp	dl, 46					; 0000002eH
	je	SHORT $LN13@skip_prefi
$LN5@skip_prefi:
; Line 661
	dec	eax
	inc	ecx
	cmp	eax, esi
	ja	SHORT $LL2@skip_prefi
$LN13@skip_prefi:
; Line 665
	cmp	eax, esi
$LN14@skip_prefi:
	pop	esi
	jne	SHORT $LN6@skip_prefi
; Line 666
	mov	DWORD PTR [edi], ecx
; Line 667
	mov	DWORD PTR [ebp], eax
$LN6@skip_prefi:
; Line 669
	pop	edi
	pop	ebp
	pop	ebx
	ret	0
_skip_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ipv6_hex
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_inlen$ = 16						; size = 4
_ipv6_hex PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1284
	push	esi
; Line 1287
	mov	esi, DWORD PTR _inlen$[esp]
	xor	edx, edx
	cmp	esi, 4
	jle	SHORT $LN12@ipv6_hex
; Line 1288
	xor	eax, eax
	pop	esi
; Line 1304
	ret	0
$LN12@ipv6_hex:
	push	edi
; Line 1289
	test	esi, esi
	je	SHORT $LN13@ipv6_hex
	mov	edi, DWORD PTR _in$[esp+4]
	npad	7
$LL2@ipv6_hex:
; Line 1290
	mov	cl, BYTE PTR [edi]
	lea	edi, DWORD PTR [edi+1]
	dec	esi
; Line 1291
	shl	edx, 4
; Line 1292
	lea	eax, DWORD PTR [ecx-48]
	cmp	al, 9
	ja	SHORT $LN5@ipv6_hex
; Line 1293
	movzx	eax, cl
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN17@ipv6_hex
$LN5@ipv6_hex:
; Line 1294
	lea	eax, DWORD PTR [ecx-65]
	cmp	al, 5
	ja	SHORT $LN7@ipv6_hex
; Line 1295
	movzx	eax, cl
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN17@ipv6_hex
$LN7@ipv6_hex:
; Line 1296
	lea	eax, DWORD PTR [ecx-97]
	cmp	al, 5
	ja	SHORT $LN9@ipv6_hex
; Line 1297
	movzx	eax, cl
	sub	eax, 87					; 00000057H
$LN17@ipv6_hex:
	or	edx, eax
	test	esi, esi
	jne	SHORT $LL2@ipv6_hex
$LN13@ipv6_hex:
; Line 1301
	mov	eax, DWORD PTR _out$[esp+4]
	mov	ecx, edx
	shr	ecx, 8
	pop	edi
	pop	esi
	mov	BYTE PTR [eax], cl
; Line 1302
	mov	BYTE PTR [eax+1], dl
; Line 1303
	mov	eax, 1
; Line 1304
	ret	0
$LN9@ipv6_hex:
	pop	edi
; Line 1299
	xor	eax, eax
	pop	esi
; Line 1304
	ret	0
_ipv6_hex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ipv6_cb
_TEXT	SEGMENT
_elem$ = 8						; size = 4
_len$ = 12						; size = 4
_usr$ = 16						; size = 4
_ipv6_cb PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1245
	push	esi
; Line 1248
	mov	esi, DWORD PTR _usr$[esp]
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN2@ipv6_cb
$LN15@ipv6_cb:
; Line 1249
	xor	eax, eax
	pop	esi
; Line 1277
	ret	0
$LN2@ipv6_cb:
; Line 1250
	mov	ecx, DWORD PTR _len$[esp]
	test	ecx, ecx
	jne	SHORT $LN3@ipv6_cb
; Line 1252
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, -1
	jne	SHORT $LN5@ipv6_cb
; Line 1257
	inc	DWORD PTR [esi+24]
	mov	DWORD PTR [esi+20], eax
; Line 1276
	mov	eax, 1
	pop	esi
; Line 1277
	ret	0
$LN5@ipv6_cb:
; Line 1255
	cmp	ecx, eax
	jne	SHORT $LN15@ipv6_cb
; Line 1257
	inc	DWORD PTR [esi+24]
; Line 1276
	mov	eax, 1
	pop	esi
; Line 1277
	ret	0
$LN3@ipv6_cb:
; Line 1260
	cmp	ecx, 4
	jle	SHORT $LN8@ipv6_cb
; Line 1262
	cmp	eax, 12					; 0000000cH
	jg	SHORT $LN15@ipv6_cb
; Line 1265
	mov	edx, DWORD PTR _elem$[esp]
	cmp	BYTE PTR [edx+ecx], 0
	jne	SHORT $LN15@ipv6_cb
; Line 1267
	push	edx
	add	eax, esi
	push	eax
	call	_ipv4_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@ipv6_cb
; Line 1269
	add	DWORD PTR [esi+16], 4
; Line 1276
	mov	eax, 1
	pop	esi
; Line 1277
	ret	0
$LN8@ipv6_cb:
; Line 1271
	push	ecx
	push	DWORD PTR _elem$[esp+4]
	add	eax, esi
	push	eax
	call	_ipv6_hex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN15@ipv6_cb
; Line 1273
	add	DWORD PTR [esi+16], 2
; Line 1276
	mov	eax, 1
	pop	esi
; Line 1277
	ret	0
_ipv6_cb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ipv6_from_asc
_TEXT	SEGMENT
_v6stat$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_v6$ = 8						; size = 4
_in$ = 12						; size = 4
_ipv6_from_asc PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1181
	mov	eax, 32					; 00000020H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+32], eax
	mov	eax, DWORD PTR _in$[esp+28]
; Line 1191
	lea	ecx, DWORD PTR _v6stat$[esp+32]
	push	ebx
	mov	ebx, DWORD PTR _v6$[esp+32]
	push	ecx
	push	OFFSET _ipv6_cb
	push	0
	push	58					; 0000003aH
	push	eax
	mov	DWORD PTR _v6stat$[esp+72], 0
	mov	DWORD PTR _v6stat$[esp+76], -1
	mov	DWORD PTR _v6stat$[esp+80], 0
	call	_CONF_parse_list
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN2@ipv6_from_
	pop	ebx
; Line 1242
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN2@ipv6_from_:
	push	esi
; Line 1196
	mov	esi, DWORD PTR _v6stat$[esp+60]
	push	edi
	cmp	esi, -1
	jne	SHORT $LN3@ipv6_from_
; Line 1198
	cmp	DWORD PTR _v6stat$[esp+60], 16		; 00000010H
	je	$LN17@ipv6_from_
$LN16@ipv6_from_:
	pop	edi
	pop	esi
; Line 1222
	xor	eax, eax
	pop	ebx
; Line 1242
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN3@ipv6_from_:
; Line 1202
	mov	edi, DWORD PTR _v6stat$[esp+60]
	cmp	edi, 16					; 00000010H
	je	SHORT $LN16@ipv6_from_
; Line 1205
	mov	eax, DWORD PTR _v6stat$[esp+68]
	cmp	eax, 3
	jg	SHORT $LN16@ipv6_from_
; Line 1208
	jne	SHORT $LN9@ipv6_from_
; Line 1209
	test	edi, edi
	jle	SHORT $LN15@ipv6_from_
; Line 1222
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1242
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN9@ipv6_from_:
; Line 1213
	cmp	eax, 2
	jne	SHORT $LN12@ipv6_from_
; Line 1215
	test	esi, esi
	je	SHORT $LN24@ipv6_from_
	cmp	esi, edi
	je	SHORT $LN15@ipv6_from_
; Line 1222
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1242
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN12@ipv6_from_:
; Line 1221
	test	esi, esi
	je	SHORT $LN16@ipv6_from_
	cmp	esi, edi
	je	SHORT $LN16@ipv6_from_
$LN15@ipv6_from_:
; Line 1228
	test	esi, esi
$LN24@ipv6_from_:
	js	SHORT $LN17@ipv6_from_
; Line 1230
	push	esi
	lea	eax, DWORD PTR _v6stat$[esp+48]
	push	eax
	push	ebx
	call	_memcpy
; Line 1232
	mov	eax, 16					; 00000010H
	sub	eax, edi
	push	eax
	lea	eax, DWORD PTR [ebx+esi]
	push	0
	push	eax
	call	_memset
; Line 1234
	mov	edx, DWORD PTR _v6stat$[esp+84]
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _v6stat$[esp+64]
	cmp	edx, ecx
	je	SHORT $LN18@ipv6_from_
; Line 1235
	mov	eax, edx
	sub	ebx, edx
	sub	eax, ecx
	push	eax
	lea	eax, DWORD PTR _v6stat$[esp+48]
	add	eax, ecx
	push	eax
	lea	eax, DWORD PTR [ecx+16]
	add	eax, ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1241
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1242
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN17@ipv6_from_:
; Line 1239
	movups	xmm0, XMMWORD PTR _v6stat$[esp+44]
	movups	XMMWORD PTR [ebx], xmm0
$LN18@ipv6_from_:
; Line 1242
	mov	ecx, DWORD PTR __$ArrayPad$[esp+44]
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
_ipv6_from_asc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ipv4_from_asc
_TEXT	SEGMENT
_a3$ = -16						; size = 4
_a0$ = -12						; size = 4
_a1$ = -8						; size = 4
_a2$ = -4						; size = 4
_v4$ = 8						; size = 4
_in$ = 12						; size = 4
_ipv4_from_asc PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1155
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 1157
	lea	eax, DWORD PTR _a3$[esp+16]
	push	eax
	lea	eax, DWORD PTR _a2$[esp+20]
	push	eax
	lea	eax, DWORD PTR _a1$[esp+24]
	push	eax
	lea	eax, DWORD PTR _a0$[esp+28]
	push	eax
	push	OFFSET ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
	push	DWORD PTR _in$[esp+32]
	call	_sscanf
	add	esp, 24					; 00000018H
	cmp	eax, 4
	je	SHORT $LN2@ipv4_from_
; Line 1158
	xor	eax, eax
; Line 1167
	add	esp, 16					; 00000010H
	ret	0
$LN2@ipv4_from_:
; Line 1160
	mov	ecx, DWORD PTR _a0$[esp+16]
	push	ebx
	cmp	ecx, 255				; 000000ffH
	ja	SHORT $LN4@ipv4_from_
	mov	edx, DWORD PTR _a1$[esp+20]
	cmp	edx, 255				; 000000ffH
	ja	SHORT $LN4@ipv4_from_
	mov	ebx, DWORD PTR _a2$[esp+20]
	cmp	ebx, 255				; 000000ffH
	ja	SHORT $LN4@ipv4_from_
	cmp	DWORD PTR _a3$[esp+20], 255		; 000000ffH
	ja	SHORT $LN4@ipv4_from_
; Line 1162
	mov	eax, DWORD PTR _v4$[esp+16]
	mov	BYTE PTR [eax], cl
; Line 1165
	mov	ecx, DWORD PTR _a3$[esp+20]
	mov	BYTE PTR [eax+2], bl
	mov	BYTE PTR [eax+1], dl
	mov	BYTE PTR [eax+3], cl
; Line 1166
	mov	eax, 1
	pop	ebx
; Line 1167
	add	esp, 16					; 00000010H
	ret	0
$LN4@ipv4_from_:
; Line 1161
	xor	eax, eax
	pop	ebx
; Line 1167
	add	esp, 16					; 00000010H
	ret	0
_ipv4_from_asc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _append_ia5
_TEXT	SEGMENT
_sk$ = 8						; size = 4
_email$ = 12						; size = 4
_append_ia5 PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 607
	push	edi
; Line 610
	mov	edi, DWORD PTR _email$[esp]
	cmp	DWORD PTR [edi+4], 22			; 00000016H
	je	SHORT $LN2@append_ia5
$LN4@append_ia5:
; Line 611
	mov	eax, 1
	pop	edi
; Line 628
	ret	0
$LN2@append_ia5:
; Line 612
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN4@append_ia5
	cmp	DWORD PTR [edi], 0
	je	SHORT $LN4@append_ia5
; Line 614
	push	esi
	mov	esi, DWORD PTR _sk$[esp+4]
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN6@append_ia5
; Line 615
	push	OFFSET _sk_strcmp
	call	_sk_new
	add	esp, 4
	mov	DWORD PTR [esi], eax
; Line 616
	test	eax, eax
	je	SHORT $LN12@append_ia5
$LN6@append_ia5:
; Line 619
	push	DWORD PTR [edi+8]
	push	DWORD PTR [esi]
	call	_sk_find
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN13@append_ia5
; Line 621
	push	DWORD PTR [edi+8]
	call	_BUF_strdup
	add	esp, 4
; Line 622
	test	eax, eax
	je	SHORT $LN9@append_ia5
	push	eax
	push	DWORD PTR [esi]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@append_ia5
$LN13@append_ia5:
	pop	esi
; Line 627
	mov	eax, 1
	pop	edi
; Line 628
	ret	0
$LN9@append_ia5:
; Line 623
	push	DWORD PTR [esi]
	call	_X509_email_free
	add	esp, 4
; Line 624
	mov	DWORD PTR [esi], 0
$LN12@append_ia5:
; Line 625
	pop	esi
	xor	eax, eax
	pop	edi
; Line 628
	ret	0
_append_ia5 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _str_free
_TEXT	SEGMENT
_str$ = 8						; size = 4
_str_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 603
	jmp	_CRYPTO_free
_str_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_email
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_name$ = 8						; size = 4
_gens$ = 12						; size = 4
_get_email PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 575
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
; Line 585
	mov	ebp, DWORD PTR _name$[esp+8]
	push	esi
	push	edi
	push	-1
	push	48					; 00000030H
	xor	esi, esi
	push	ebp
	mov	DWORD PTR _ret$[esp+32], esi
	call	_X509_NAME_get_index_by_NID
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	js	$LN3@get_email
	npad	1
$LL2@get_email:
; Line 586
	push	ebx
	push	ebp
	call	_X509_NAME_get_entry
; Line 587
	push	eax
	call	_X509_NAME_ENTRY_get_data
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 610
	cmp	DWORD PTR [edi+4], 22			; 00000016H
	jne	SHORT $LN14@get_email
; Line 612
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN14@get_email
	cmp	DWORD PTR [edi], 0
	je	SHORT $LN14@get_email
; Line 614
	test	esi, esi
	jne	SHORT $LN16@get_email
; Line 615
	push	OFFSET _sk_strcmp
	call	_sk_new
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR _ret$[esp+20], esi
; Line 616
	test	esi, esi
	je	$LN25@get_email
$LN16@get_email:
; Line 619
	push	DWORD PTR [edi+8]
	push	esi
	call	_sk_find
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN14@get_email
; Line 621
	push	DWORD PTR [edi+8]
	call	_BUF_strdup
	add	esp, 4
; Line 622
	test	eax, eax
	je	SHORT $LN19@get_email
	push	eax
	push	esi
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@get_email
$LN14@get_email:
; Line 585
	push	ebx
	push	48					; 00000030H
	push	ebp
	call	_X509_NAME_get_index_by_NID
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	jns	$LL2@get_email
$LN3@get_email:
; Line 591
	mov	ebx, DWORD PTR _gens$[esp+16]
	xor	edi, edi
	push	ebx
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN35@get_email
	npad	7
$LL6@get_email:
; Line 592
	push	edi
	push	ebx
	call	_sk_value
	add	esp, 8
; Line 593
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN4@get_email
; Line 595
	push	DWORD PTR [eax+4]
	lea	eax, DWORD PTR _ret$[esp+24]
	push	eax
	call	_append_ia5
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@get_email
$LN4@get_email:
; Line 591
	push	ebx
	inc	edi
	call	_sk_num
	add	esp, 4
	cmp	edi, eax
	jl	SHORT $LL6@get_email
; Line 596
	mov	esi, DWORD PTR _ret$[esp+20]
$LN35@get_email:
	pop	edi
; Line 598
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 599
	pop	ecx
	ret	0
$LN19@get_email:
; Line 632
	push	OFFSET _str_free
	push	esi
	call	_sk_pop_free
	add	esp, 8
$LN25@get_email:
	pop	edi
	pop	esi
	pop	ebp
; Line 589
	xor	eax, eax
	pop	ebx
; Line 599
	pop	ecx
	ret	0
_get_email ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _sk_strcmp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_sk_strcmp PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 522
	mov	eax, DWORD PTR _b$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR [eax]
	npad	4
$LL3@sk_strcmp:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN4@sk_strcmp
	test	dl, dl
	je	SHORT $LN5@sk_strcmp
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN4@sk_strcmp
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL3@sk_strcmp
$LN5@sk_strcmp:
	xor	eax, eax
; Line 523
	ret	0
$LN4@sk_strcmp:
; Line 522
	sbb	eax, eax
	or	eax, 1
; Line 523
	ret	0
_sk_strcmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _strip_spaces
_TEXT	SEGMENT
_name$ = 8						; size = 4
_strip_spaces PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 381
	push	ebx
; Line 385
	mov	ebx, DWORD PTR __imp__isspace
	push	esi
	mov	esi, DWORD PTR _name$[esp+4]
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN18@strip_spac
$LL2@strip_spac:
	movzx	eax, BYTE PTR [esi]
	push	eax
	call	ebx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@strip_spac
; Line 386
	inc	esi
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LL2@strip_spac
; Line 388
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 397
	ret	0
$LN3@strip_spac:
; Line 387
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LN6@strip_spac
$LN18@strip_spac:
	pop	esi
; Line 388
	xor	eax, eax
	pop	ebx
; Line 397
	ret	0
$LN6@strip_spac:
; Line 389
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
$LL19@strip_spac:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL19@strip_spac
	push	edi
	sub	ecx, edx
	lea	edi, DWORD PTR [esi-1]
	add	edi, ecx
; Line 390
	cmp	edi, esi
	je	SHORT $LN7@strip_spac
	npad	5
$LL4@strip_spac:
	movzx	eax, BYTE PTR [edi]
	push	eax
	call	ebx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@strip_spac
; Line 391
	dec	edi
	cmp	edi, esi
	jne	SHORT $LL4@strip_spac
; Line 394
	xor	eax, eax
	cmp	BYTE PTR [esi], al
	pop	edi
	cmove	esi, eax
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 397
	ret	0
$LN5@strip_spac:
; Line 392
	cmp	esi, edi
	je	SHORT $LN7@strip_spac
; Line 393
	mov	BYTE PTR [edi+1], 0
$LN7@strip_spac:
; Line 394
	xor	eax, eax
	cmp	BYTE PTR [esi], al
	pop	edi
	cmove	esi, eax
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 397
	ret	0
_strip_spaces ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_NAME_from_section
_TEXT	SEGMENT
_nm$ = 8						; size = 4
_dn_sk$ = 12						; size = 4
_chtype$ = 16						; size = 4
_X509V3_NAME_from_section PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1312
	cmp	DWORD PTR _nm$[esp-4], 0
	jne	SHORT $LN8@X509V3_NAM
; Line 1313
	xor	eax, eax
; Line 1351
	ret	0
$LN8@X509V3_NAM:
	push	ebx
; Line 1315
	mov	ebx, DWORD PTR _dn_sk$[esp]
	push	ebp
	push	esi
	push	edi
	push	ebx
	xor	edi, edi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@X509V3_NAM
$LL4@X509V3_NAM:
; Line 1316
	push	edi
	push	ebx
	call	_sk_value
	mov	ebp, eax
	add	esp, 8
; Line 1317
	mov	esi, DWORD PTR [ebp+4]
; Line 1321
	mov	edx, esi
	mov	cl, BYTE PTR [esi]
	test	cl, cl
	je	SHORT $LN11@X509V3_NAM
$LL7@X509V3_NAM:
; Line 1323
	cmp	cl, 58					; 0000003aH
	je	SHORT $LN18@X509V3_NAM
	cmp	cl, 44					; 0000002cH
	je	SHORT $LN18@X509V3_NAM
	cmp	cl, 46					; 0000002eH
	je	SHORT $LN18@X509V3_NAM
; Line 1321
	mov	cl, BYTE PTR [edx+1]
	inc	edx
	test	cl, cl
	jne	SHORT $LL7@X509V3_NAM
; Line 1344
	jmp	SHORT $LN11@X509V3_NAM
$LN18@X509V3_NAM:
; Line 1329
	inc	edx
; Line 1330
	cmp	BYTE PTR [edx], 0
	cmovne	esi, edx
$LN11@X509V3_NAM:
; Line 1335
	cmp	BYTE PTR [esi], 43			; 0000002bH
	jne	SHORT $LN12@X509V3_NAM
; Line 1340
	or	eax, -1
; Line 1341
	inc	esi
; Line 1342
	jmp	SHORT $LN13@X509V3_NAM
$LN12@X509V3_NAM:
; Line 1343
	xor	eax, eax
$LN13@X509V3_NAM:
; Line 1344
	push	eax
	push	-1
	push	-1
	push	DWORD PTR [ebp+8]
	push	DWORD PTR _chtype$[esp+28]
	push	esi
	push	DWORD PTR _nm$[esp+36]
	call	_X509_NAME_add_entry_by_txt
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN19@X509V3_NAM
; Line 1315
	push	ebx
	inc	edi
	call	_sk_num
	add	esp, 4
	cmp	edi, eax
	jl	SHORT $LL4@X509V3_NAM
$LN3@X509V3_NAM:
	pop	edi
	pop	esi
	pop	ebp
; Line 1350
	mov	eax, 1
	pop	ebx
; Line 1351
	ret	0
$LN19@X509V3_NAM:
	pop	edi
	pop	esi
	pop	ebp
; Line 1347
	xor	eax, eax
	pop	ebx
; Line 1351
	ret	0
_X509V3_NAME_from_section ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _a2i_ipadd
_TEXT	SEGMENT
_ipout$ = 8						; size = 4
_ipasc$ = 12						; size = 4
_a2i_ipadd PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1140
	push	esi
; Line 1143
	mov	esi, DWORD PTR _ipasc$[esp]
	push	58					; 0000003aH
	push	esi
	call	DWORD PTR __imp__strchr
	add	esp, 8
; Line 1144
	push	esi
	push	DWORD PTR _ipout$[esp+4]
	test	eax, eax
	je	SHORT $LN2@a2i_ipadd
	call	_ipv6_from_asc
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	eax, 16					; 00000010H
	pop	esi
; Line 1152
	ret	0
$LN2@a2i_ipadd:
; Line 1148
	call	_ipv4_from_asc
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	eax, 4
	pop	esi
; Line 1152
	ret	0
_a2i_ipadd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _a2i_IPADDRESS_NC
_TEXT	SEGMENT
_ipout$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_ipasc$ = 8						; size = 4
_a2i_IPADDRESS_NC PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1096
	mov	eax, 36					; 00000024H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+36], eax
	push	ebx
	mov	ebx, DWORD PTR _ipasc$[esp+36]
	push	edi
; Line 1101
	push	47					; 0000002fH
	push	ebx
	call	DWORD PTR __imp__strchr
	mov	edi, eax
	add	esp, 8
; Line 1102
	test	edi, edi
	jne	SHORT $LN2@a2i_IPADDR
	pop	edi
	pop	ebx
; Line 1137
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
$LN2@a2i_IPADDR:
	push	esi
; Line 1104
	push	ebx
	call	_BUF_strdup
	mov	esi, eax
	add	esp, 4
; Line 1105
	test	esi, esi
	je	$LN10@a2i_IPADDR
; Line 1107
	sub	eax, ebx
	add	edi, eax
; Line 1143
	push	58					; 0000003aH
	push	esi
; Line 1108
	mov	BYTE PTR [edi], 0
	inc	edi
; Line 1143
	call	DWORD PTR __imp__strchr
	add	esp, 8
	test	eax, eax
; Line 1144
	lea	eax, DWORD PTR _ipout$[esp+48]
	push	esi
	push	eax
	je	SHORT $LN13@a2i_IPADDR
	call	_ipv6_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $err$22
; Line 1146
	mov	ebx, 16					; 00000010H
	jmp	SHORT $LN18@a2i_IPADDR
$LN13@a2i_IPADDR:
; Line 1148
	call	_ipv4_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $err$22
; Line 1150
	mov	ebx, 4
$LN18@a2i_IPADDR:
; Line 1115
	lea	eax, DWORD PTR _ipout$[esp+48]
	add	eax, ebx
	push	edi
	push	eax
	call	_a2i_ipadd
; Line 1117
	push	esi
	mov	edi, eax
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 1120
	test	edi, edi
	je	SHORT $LN10@a2i_IPADDR
	cmp	ebx, edi
	jne	SHORT $LN10@a2i_IPADDR
; Line 1123
	call	_ASN1_OCTET_STRING_new
	mov	esi, eax
; Line 1124
	test	esi, esi
	je	SHORT $LN10@a2i_IPADDR
; Line 1126
	lea	ecx, DWORD PTR [edi+ebx]
	push	ecx
	lea	eax, DWORD PTR _ipout$[esp+52]
	push	eax
	push	esi
	call	_ASN1_OCTET_STRING_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN9@a2i_IPADDR
; Line 1129
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
; Line 1137
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
$LN9@a2i_IPADDR:
; Line 1135
	push	esi
	call	_ASN1_OCTET_STRING_free
	jmp	SHORT $LN20@a2i_IPADDR
$err$22:
; Line 1133
	push	esi
	call	_CRYPTO_free
$LN20@a2i_IPADDR:
	add	esp, 4
$LN10@a2i_IPADDR:
; Line 1137
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	eax, eax
	pop	esi
	pop	edi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
_a2i_IPADDRESS_NC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _a2i_IPADDRESS
_TEXT	SEGMENT
_ipout$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ipasc$ = 8						; size = 4
_a2i_IPADDRESS PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1073
	mov	eax, 20					; 00000014H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+20], eax
	push	esi
	mov	esi, DWORD PTR _ipasc$[esp+20]
	push	edi
; Line 1143
	push	58					; 0000003aH
	push	esi
	call	DWORD PTR __imp__strchr
	add	esp, 8
	test	eax, eax
; Line 1144
	lea	eax, DWORD PTR _ipout$[esp+28]
	push	esi
	push	eax
	je	SHORT $LN7@a2i_IPADDR
	call	_ipv6_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@a2i_IPADDR
; Line 1146
	mov	edi, 16					; 00000010H
	jmp	SHORT $LN2@a2i_IPADDR
$LN7@a2i_IPADDR:
; Line 1148
	call	_ipv4_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@a2i_IPADDR
; Line 1150
	mov	edi, 4
$LN2@a2i_IPADDR:
; Line 1085
	call	_ASN1_OCTET_STRING_new
	mov	esi, eax
; Line 1086
	test	esi, esi
	je	SHORT $LN12@a2i_IPADDR
; Line 1088
	push	edi
	lea	eax, DWORD PTR _ipout$[esp+32]
	push	eax
	push	esi
	call	_ASN1_OCTET_STRING_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@a2i_IPADDR
; Line 1089
	push	esi
	call	_ASN1_OCTET_STRING_free
	add	esp, 4
$LN12@a2i_IPADDR:
; Line 1083
	pop	edi
	xor	eax, eax
	pop	esi
; Line 1093
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN4@a2i_IPADDR:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	mov	eax, esi
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
_a2i_IPADDRESS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_check_ip_asc
_TEXT	SEGMENT
_ipout$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_ipasc$ = 12						; size = 4
_flags$ = 16						; size = 4
_X509_check_ip_asc PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1055
	mov	eax, 20					; 00000014H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+20], eax
	push	esi
	mov	esi, DWORD PTR _ipasc$[esp+20]
	push	edi
	mov	edi, DWORD PTR _x$[esp+24]
; Line 1059
	test	esi, esi
	je	SHORT $LN11@X509_check
; Line 1143
	push	58					; 0000003aH
	push	esi
	call	DWORD PTR __imp__strchr
	add	esp, 8
	test	eax, eax
; Line 1144
	lea	eax, DWORD PTR _ipout$[esp+28]
	push	esi
	push	eax
	je	SHORT $LN6@X509_check
	call	_ipv6_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@X509_check
; Line 1146
	mov	eax, 16					; 00000010H
	jmp	SHORT $LN3@X509_check
$LN6@X509_check:
; Line 1148
	call	_ipv4_from_asc
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@X509_check
; Line 1150
	mov	eax, 4
$LN3@X509_check:
; Line 1064
	push	0
	push	7
	push	DWORD PTR _flags$[esp+32]
	push	eax
	lea	eax, DWORD PTR _ipout$[esp+44]
	push	eax
	push	edi
	call	_do_x509_check
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
; Line 1065
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN11@X509_check:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	mov	eax, -2					; fffffffeH
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
_X509_check_ip_asc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_check_ip
_TEXT	SEGMENT
_x$ = 8							; size = 4
_chk$ = 12						; size = 4
_chklen$ = 16						; size = 4
_flags$ = 20						; size = 4
_X509_check_ip PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1049
	mov	eax, DWORD PTR _chk$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@X509_check
; Line 1050
	mov	eax, -2					; fffffffeH
; Line 1052
	ret	0
$LN2@X509_check:
; Line 1051
	push	0
	push	7
	push	DWORD PTR _flags$[esp+4]
	push	DWORD PTR _chklen$[esp+8]
	push	eax
	push	DWORD PTR _x$[esp+16]
	call	_do_x509_check
	add	esp, 24					; 00000018H
; Line 1052
	ret	0
_X509_check_ip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_check_email
_TEXT	SEGMENT
_x$ = 8							; size = 4
_chk$ = 12						; size = 4
_chklen$ = 16						; size = 4
_flags$ = 20						; size = 4
_X509_check_email PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1029
	push	edi
; Line 1030
	mov	edi, DWORD PTR _chk$[esp]
	test	edi, edi
	jne	SHORT $LN2@X509_check
; Line 1031
	lea	eax, DWORD PTR [edi-2]
	pop	edi
; Line 1044
	ret	0
$LN2@X509_check:
	push	esi
; Line 1037
	mov	esi, DWORD PTR _chklen$[esp+4]
	test	esi, esi
	jne	SHORT $LN3@X509_check
; Line 1038
	mov	esi, edi
	lea	ecx, DWORD PTR [esi+1]
	npad	4
$LL10@X509_check:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL10@X509_check
	sub	esi, ecx
$LN5@X509_check:
; Line 1041
	cmp	esi, 1
	jbe	SHORT $LN6@X509_check
	cmp	BYTE PTR [edi+esi-1], 0
	jne	SHORT $LN6@X509_check
; Line 1042
	dec	esi
$LN6@X509_check:
; Line 1043
	push	0
	push	1
	push	DWORD PTR _flags$[esp+12]
	push	esi
	push	edi
	push	DWORD PTR _x$[esp+24]
	call	_do_x509_check
	add	esp, 24					; 00000018H
	pop	esi
	pop	edi
; Line 1044
	ret	0
$LN3@X509_check:
; Line 1039
	lea	eax, DWORD PTR [esi-1]
	cmp	esi, 1
	ja	SHORT $LN9@X509_check
	mov	eax, esi
$LN9@X509_check:
	push	eax
	push	0
	push	edi
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@X509_check
; Line 1040
	pop	esi
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 1044
	ret	0
_X509_check_email ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_check_host
_TEXT	SEGMENT
_x$ = 8							; size = 4
_chk$ = 12						; size = 4
_chklen$ = 16						; size = 4
_flags$ = 20						; size = 4
_peername$ = 24						; size = 4
_X509_check_host PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 1010
	push	edi
; Line 1011
	mov	edi, DWORD PTR _chk$[esp]
	test	edi, edi
	jne	SHORT $LN2@X509_check
; Line 1012
	lea	eax, DWORD PTR [edi-2]
	pop	edi
; Line 1025
	ret	0
$LN2@X509_check:
	push	esi
; Line 1018
	mov	esi, DWORD PTR _chklen$[esp+4]
	test	esi, esi
	jne	SHORT $LN3@X509_check
; Line 1019
	mov	esi, edi
	lea	ecx, DWORD PTR [esi+1]
	npad	4
$LL10@X509_check:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL10@X509_check
	sub	esi, ecx
$LN5@X509_check:
; Line 1022
	cmp	esi, 1
	jbe	SHORT $LN6@X509_check
	cmp	BYTE PTR [edi+esi-1], 0
	jne	SHORT $LN6@X509_check
; Line 1023
	dec	esi
$LN6@X509_check:
; Line 1024
	push	DWORD PTR _peername$[esp+4]
	push	2
	push	DWORD PTR _flags$[esp+12]
	push	esi
	push	edi
	push	DWORD PTR _x$[esp+24]
	call	_do_x509_check
	add	esp, 24					; 00000018H
	pop	esi
	pop	edi
; Line 1025
	ret	0
$LN3@X509_check:
; Line 1020
	lea	eax, DWORD PTR [esi-1]
	cmp	esi, 1
	ja	SHORT $LN9@X509_check
	mov	eax, esi
$LN9@X509_check:
	push	eax
	push	0
	push	edi
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@X509_check
; Line 1021
	pop	esi
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 1025
	ret	0
_X509_check_host ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_get1_ocsp
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_x$ = 8							; size = 4
_X509_get1_ocsp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 537
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	edi
; Line 539
	xor	ebx, ebx
; Line 542
	push	ebx
	push	ebx
	push	177					; 000000b1H
	push	DWORD PTR _x$[esp+20]
	mov	DWORD PTR _ret$[esp+28], ebx
	call	_X509_get_ext_d2i
	mov	edi, eax
	add	esp, 16					; 00000010H
; Line 543
	test	edi, edi
	jne	SHORT $LN5@X509_get1_
	pop	edi
	pop	ebx
; Line 557
	pop	ecx
	ret	0
$LN5@X509_get1_:
	push	esi
; Line 545
	push	edi
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN11@X509_get1_
	npad	1
$LL4@X509_get1_:
; Line 546
	push	esi
	push	edi
	call	_sk_value
	mov	ebx, eax
; Line 547
	push	DWORD PTR [ebx]
	call	_OBJ_obj2nid
	add	esp, 12					; 0000000cH
	cmp	eax, 178				; 000000b2H
	jne	SHORT $LN2@X509_get1_
; Line 548
	mov	eax, DWORD PTR [ebx+4]
	cmp	DWORD PTR [eax], 6
	jne	SHORT $LN2@X509_get1_
; Line 549
	push	DWORD PTR [eax+4]
	lea	eax, DWORD PTR _ret$[esp+20]
	push	eax
	call	_append_ia5
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@X509_get1_
$LN2@X509_get1_:
; Line 545
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@X509_get1_
$LN15@X509_get1_:
	mov	ebx, DWORD PTR _ret$[esp+16]
$LN11@X509_get1_:
; Line 555
	push	edi
	call	_AUTHORITY_INFO_ACCESS_free
	add	esp, 4
; Line 556
	mov	eax, ebx
	pop	esi
	pop	edi
	pop	ebx
; Line 557
	pop	ecx
	ret	0
_X509_get1_ocsp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_email_free
_TEXT	SEGMENT
_sk$ = 8						; size = 4
_X509_email_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 632
	push	OFFSET _str_free
	push	DWORD PTR _sk$[esp]
	call	_sk_pop_free
	add	esp, 8
; Line 633
	ret	0
_X509_email_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_REQ_get1_email
_TEXT	SEGMENT
_x$ = 8							; size = 4
_X509_REQ_get1_email PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 560
	push	ebx
	push	esi
	push	edi
; Line 565
	mov	edi, DWORD PTR _x$[esp+8]
	push	edi
	call	_X509_REQ_get_extensions
; Line 566
	push	0
	push	0
	mov	ebx, eax
	push	85					; 00000055H
	push	ebx
	call	_X509V3_get_d2i
; Line 567
	mov	ecx, DWORD PTR [edi]
	mov	esi, eax
	push	esi
	push	DWORD PTR [ecx+16]
	call	_get_email
; Line 568
	push	OFFSET _GENERAL_NAME_free
	push	esi
	mov	edi, eax
	call	_sk_pop_free
; Line 569
	push	OFFSET _X509_EXTENSION_free
	push	ebx
	call	_sk_pop_free
	add	esp, 44					; 0000002cH
; Line 570
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 571
	ret	0
_X509_REQ_get1_email ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_get1_email
_TEXT	SEGMENT
_x$ = 8							; size = 4
_X509_get1_email PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 526
	push	esi
; Line 530
	mov	esi, DWORD PTR _x$[esp]
	push	edi
	push	0
	push	0
	push	85					; 00000055H
	push	esi
	call	_X509_get_ext_d2i
	add	esp, 16					; 00000010H
	mov	edi, eax
; Line 531
	push	edi
	push	esi
	call	_X509_get_subject_name
	add	esp, 4
	push	eax
	call	_get_email
; Line 532
	push	OFFSET _GENERAL_NAME_free
	push	edi
	mov	esi, eax
	call	_sk_pop_free
	add	esp, 16					; 00000010H
; Line 533
	mov	eax, esi
	pop	edi
	pop	esi
; Line 534
	ret	0
_X509_get1_email ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _name_cmp
_TEXT	SEGMENT
_name$ = 8						; size = 4
_cmp$ = 12						; size = 4
_name_cmp PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 511
	mov	ecx, DWORD PTR _cmp$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	lea	edx, DWORD PTR [esi+1]
	npad	5
$LL6@name_cmp:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL6@name_cmp
; Line 512
	mov	edi, DWORD PTR _name$[esp+4]
	sub	esi, edx
	push	esi
	push	ecx
	push	edi
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@name_cmp
; Line 514
	mov	al, BYTE PTR [esi+edi]
; Line 515
	test	al, al
	je	SHORT $LN4@name_cmp
	cmp	al, 46					; 0000002eH
	je	SHORT $LN4@name_cmp
; Line 517
	pop	edi
	mov	eax, 1
	pop	esi
; Line 518
	ret	0
$LN4@name_cmp:
; Line 516
	xor	eax, eax
$LN1@name_cmp:
	pop	edi
	pop	esi
; Line 518
	ret	0
_name_cmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _string_to_hex
_TEXT	SEGMENT
_hexbuf$1$ = 8						; size = 4
_str$ = 8						; size = 4
_len$ = 12						; size = 4
_string_to_hex PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 438
	push	esi
; Line 441
	mov	esi, DWORD PTR _str$[esp]
	test	esi, esi
	jne	SHORT $LN5@string_to_
; Line 442
	push	442					; 000001baH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	107					; 0000006bH
	push	113					; 00000071H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 443
	xor	eax, eax
	pop	esi
; Line 501
	ret	0
$LN5@string_to_:
; Line 445
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL28@string_to_:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL28@string_to_
	push	edi
	sub	ecx, edx
	push	445					; 000001bdH
	sar	ecx, 1
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	ecx
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hexbuf$1$[esp+4], edi
	test	edi, edi
	jne	SHORT $LN6@string_to_
$err$34:
; Line 493
	push	493					; 000001edH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
	push	113					; 00000071H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 494
	xor	eax, eax
	pop	edi
	pop	esi
; Line 501
	ret	0
$LN6@string_to_:
; Line 447
	cmp	BYTE PTR [esi], 0
	push	ebx
	push	ebp
	mov	ebp, edi
	je	$LN27@string_to_
$LL2@string_to_:
; Line 448
	mov	bl, BYTE PTR [esi]
	inc	esi
; Line 452
	cmp	bl, 58					; 0000003aH
	je	SHORT $LN24@string_to_
; Line 454
	mov	bh, BYTE PTR [esi]
	inc	esi
; Line 458
	test	bh, bh
	je	$LN23@string_to_
; Line 463
	movzx	edi, bl
	push	edi
	call	DWORD PTR __imp__isupper
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@string_to_
; Line 464
	push	edi
	call	DWORD PTR __imp__tolower
	add	esp, 4
	mov	bl, al
$LN9@string_to_:
; Line 465
	movzx	edi, bh
	push	edi
	call	DWORD PTR __imp__isupper
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@string_to_
; Line 466
	push	edi
	call	DWORD PTR __imp__tolower
	add	esp, 4
	mov	bh, al
$LN10@string_to_:
; Line 468
	lea	eax, DWORD PTR [ebx-48]
	cmp	al, 9
	ja	SHORT $LN11@string_to_
; Line 469
	mov	bl, al
	jmp	SHORT $LN14@string_to_
$LN11@string_to_:
; Line 470
	lea	eax, DWORD PTR [ebx-97]
	cmp	al, 5
	ja	SHORT $badhex$35
; Line 471
	add	bl, 169					; 000000a9H
$LN14@string_to_:
; Line 475
	mov	al, bh
	sub	al, 48					; 00000030H
	cmp	al, 9
	ja	SHORT $LN15@string_to_
; Line 476
	mov	bh, al
	jmp	SHORT $LN18@string_to_
$LN15@string_to_:
; Line 477
	mov	al, bh
	sub	al, 97					; 00000061H
	cmp	al, 5
	ja	SHORT $badhex$35
; Line 478
	add	bh, 169					; 000000a9H
$LN18@string_to_:
; Line 482
	shl	bl, 4
	or	bl, bh
	mov	BYTE PTR [ebp], bl
	inc	ebp
$LN24@string_to_:
; Line 447
	cmp	BYTE PTR [esi], 0
	jne	$LL2@string_to_
	mov	edi, DWORD PTR _hexbuf$1$[esp+12]
$LN27@string_to_:
; Line 485
	mov	eax, DWORD PTR _len$[esp+12]
	test	eax, eax
	je	SHORT $LN19@string_to_
; Line 486
	sub	ebp, edi
	mov	DWORD PTR [eax], ebp
$LN19@string_to_:
; Line 488
	pop	ebp
	pop	ebx
	mov	eax, edi
	pop	edi
	pop	esi
; Line 501
	ret	0
$badhex$35:
; Line 497
	push	DWORD PTR _hexbuf$1$[esp+12]
	call	_CRYPTO_free
; Line 498
	push	498					; 000001f2H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	113					; 00000071H
	push	113					; 00000071H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 24					; 00000018H
; Line 499
	xor	eax, eax
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 501
	ret	0
$LN23@string_to_:
; Line 459
	push	459					; 000001cbH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	112					; 00000070H
	push	113					; 00000071H
	push	34					; 00000022H
	call	_ERR_put_error
; Line 460
	push	DWORD PTR _hexbuf$1$[esp+32]
	call	_CRYPTO_free
	add	esp, 24					; 00000018H
; Line 461
	xor	eax, eax
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 501
	ret	0
_string_to_hex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _hex_to_string
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_hex_to_string PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 408
	push	esi
; Line 413
	mov	esi, DWORD PTR _buffer$[esp]
	push	edi
	test	esi, esi
	je	SHORT $LN6@hex_to_str
	mov	edi, DWORD PTR _len$[esp+4]
	test	edi, edi
	je	SHORT $LN6@hex_to_str
; Line 415
	push	415					; 0000019fH
	lea	eax, DWORD PTR [edi*2+1]
	add	eax, edi
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edx, eax
	add	esp, 12					; 0000000cH
	test	edx, edx
	jne	SHORT $LN7@hex_to_str
; Line 416
	push	416					; 000001a0H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
	push	111					; 0000006fH
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN6@hex_to_str:
; Line 414
	pop	edi
	xor	eax, eax
	pop	esi
; Line 431
	ret	0
$LN7@hex_to_str:
; Line 420
	test	edi, edi
	jle	SHORT $LN3@hex_to_str
$LL4@hex_to_str:
; Line 421
	movzx	ecx, BYTE PTR [esi]
	lea	esi, DWORD PTR [esi+1]
	shr	ecx, 4
	movzx	ecx, BYTE PTR ?hexdig@?1??hex_to_string@@9@9[ecx]
	mov	BYTE PTR [eax], cl
; Line 422
	movzx	ecx, BYTE PTR [esi-1]
	and	ecx, 15					; 0000000fH
	movzx	ecx, BYTE PTR ?hexdig@?1??hex_to_string@@9@9[ecx]
	mov	BYTE PTR [eax+1], cl
; Line 423
	mov	BYTE PTR [eax+2], 58			; 0000003aH
	add	eax, 3
	sub	edi, 1
	jne	SHORT $LL4@hex_to_str
$LN3@hex_to_str:
	pop	edi
; Line 425
	mov	BYTE PTR [eax-1], 0
; Line 430
	mov	eax, edx
	pop	esi
; Line 431
	ret	0
_hex_to_string ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_parse_list
_TEXT	SEGMENT
_values$ = -8						; size = 4
_linebuf$1$ = -4					; size = 4
_line$ = 8						; size = 4
_X509V3_parse_list PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 280
	mov	eax, 8
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 287
	push	DWORD PTR _line$[esp+20]
	mov	DWORD PTR _values$[esp+28], 0
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR _linebuf$1$[esp+24], eax
; Line 288
	test	eax, eax
	jne	SHORT $LN7@X509V3_par
; Line 289
	push	289					; 00000121H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
; Line 290
	jmp	$LN31@X509V3_par
$LN7@X509V3_par:
; Line 295
	mov	esi, eax
	mov	ebx, eax
	mov	al, BYTE PTR [eax]
	xor	edi, edi
	mov	ebp, 1
	test	al, al
	je	$LN30@X509V3_par
$LL4@X509V3_par:
	cmp	al, 13					; 0000000dH
	je	$LN29@X509V3_par
	cmp	al, 10					; 0000000aH
	je	$LN29@X509V3_par
; Line 298
	mov	ecx, ebp
	sub	ecx, 1
	je	SHORT $LN8@X509V3_par
	sub	ecx, 1
	jne	SHORT $LN2@X509V3_par
; Line 327
	cmp	al, 44					; 0000002cH
	jne	SHORT $LN2@X509V3_par
; Line 330
	push	ebx
	lea	ebp, DWORD PTR [ecx+1]
	mov	BYTE PTR [esi], cl
	call	_strip_spaces
	add	esp, 4
; Line 334
	test	eax, eax
	je	$LN23@X509V3_par
; Line 339
	lea	ecx, DWORD PTR _values$[esp+24]
	push	ecx
	push	eax
	push	edi
	call	_X509V3_add_value
	add	esp, 12					; 0000000cH
; Line 341
	lea	ebx, DWORD PTR [esi+1]
	xor	edi, edi
	jmp	SHORT $LN2@X509V3_par
$LN8@X509V3_par:
; Line 300
	cmp	al, 58					; 0000003aH
	jne	SHORT $LN9@X509V3_par
; Line 303
	push	ebx
	mov	ebp, 2
	mov	BYTE PTR [esi], 0
	call	_strip_spaces
	mov	edi, eax
	add	esp, 4
; Line 304
	test	edi, edi
	je	SHORT $LN24@X509V3_par
; Line 309
	lea	ebx, DWORD PTR [esi+1]
	jmp	SHORT $LN2@X509V3_par
$LN9@X509V3_par:
; Line 310
	cmp	al, 44					; 0000002cH
	jne	SHORT $LN2@X509V3_par
; Line 312
	push	ebx
	mov	BYTE PTR [esi], 0
	call	_strip_spaces
	mov	edi, eax
; Line 313
	lea	ebx, DWORD PTR [esi+1]
	add	esp, 4
; Line 317
	test	edi, edi
	je	SHORT $LN25@X509V3_par
; Line 322
	lea	eax, DWORD PTR _values$[esp+24]
	push	eax
	push	0
	push	edi
	call	_X509V3_add_value
	add	esp, 12					; 0000000cH
$LN2@X509V3_par:
; Line 296
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	$LL4@X509V3_par
$LN29@X509V3_par:
; Line 347
	cmp	ebp, 2
	jne	SHORT $LN30@X509V3_par
; Line 348
	push	ebx
	call	_strip_spaces
	add	esp, 4
; Line 352
	test	eax, eax
	jne	SHORT $LN19@X509V3_par
; Line 353
	push	354					; 00000162H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	109					; 0000006dH
; Line 355
	jmp	SHORT $LN31@X509V3_par
$LN23@X509V3_par:
; Line 335
	push	336					; 00000150H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	109					; 0000006dH
; Line 337
	jmp	SHORT $LN31@X509V3_par
$LN24@X509V3_par:
; Line 305
	push	306					; 00000132H
; Line 307
	jmp	SHORT $LN32@X509V3_par
$LN25@X509V3_par:
; Line 318
	push	319					; 0000013fH
; Line 320
	jmp	SHORT $LN32@X509V3_par
$LN19@X509V3_par:
; Line 357
	lea	ecx, DWORD PTR _values$[esp+24]
	push	ecx
	push	eax
	push	edi
; Line 358
	jmp	SHORT $LN33@X509V3_par
$LN30@X509V3_par:
; Line 359
	push	ebx
	call	_strip_spaces
	add	esp, 4
; Line 363
	test	eax, eax
	jne	SHORT $LN20@X509V3_par
; Line 364
	push	364					; 0000016cH
$LN32@X509V3_par:
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	108					; 0000006cH
$LN31@X509V3_par:
	push	109					; 0000006dH
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$35:
; Line 373
	push	DWORD PTR _linebuf$1$[esp+24]
	call	_CRYPTO_free
; Line 374
	push	OFFSET _X509V3_conf_free
	push	DWORD PTR _values$[esp+32]
	call	_sk_pop_free
	add	esp, 12					; 0000000cH
; Line 375
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 377
	add	esp, 8
	ret	0
$LN20@X509V3_par:
; Line 367
	lea	ecx, DWORD PTR _values$[esp+24]
	push	ecx
	push	0
	push	eax
$LN33@X509V3_par:
	call	_X509V3_add_value
	add	esp, 12					; 0000000cH
; Line 369
	push	DWORD PTR _linebuf$1$[esp+24]
	call	_CRYPTO_free
; Line 370
	mov	eax, DWORD PTR _values$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 377
	add	esp, 8
	ret	0
_X509V3_parse_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _i2s_ASN1_ENUMERATED
_TEXT	SEGMENT
_method$ = 8						; size = 4
_a$ = 12						; size = 4
_i2s_ASN1_ENUMERATED PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 153
	mov	eax, DWORD PTR _a$[esp-4]
	push	esi
	xor	esi, esi
	test	eax, eax
	jne	SHORT $LN2@i2s_ASN1_E
	pop	esi
; Line 160
	ret	0
$LN2@i2s_ASN1_E:
	push	edi
; Line 155
	push	0
	push	eax
	call	_ASN1_ENUMERATED_to_BN
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN4@i2s_ASN1_E
	push	edi
	call	_BN_bn2dec
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN3@i2s_ASN1_E
$LN4@i2s_ASN1_E:
; Line 157
	push	157					; 0000009dH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
	push	121					; 00000079H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN3@i2s_ASN1_E:
; Line 158
	push	edi
	call	_BN_free
	add	esp, 4
; Line 159
	mov	eax, esi
	pop	edi
	pop	esi
; Line 160
	ret	0
_i2s_ASN1_ENUMERATED ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _s2i_ASN1_INTEGER
_TEXT	SEGMENT
_bn$ = -4						; size = 4
_method$ = 8						; size = 4
_value$ = 12						; size = 4
_s2i_ASN1_INTEGER PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 176
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 181
	mov	esi, DWORD PTR _value$[esp+4]
	mov	DWORD PTR _bn$[esp+8], 0
	test	esi, esi
	jne	SHORT $LN2@s2i_ASN1_I
; Line 182
	push	182					; 000000b6H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	109					; 0000006dH
	push	108					; 0000006cH
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 183
	xor	eax, eax
	pop	esi
; Line 222
	pop	ecx
	ret	0
$LN2@s2i_ASN1_I:
	push	edi
; Line 185
	call	_BN_new
; Line 186
	cmp	BYTE PTR [esi], 45			; 0000002dH
	mov	DWORD PTR _bn$[esp+12], eax
	jne	SHORT $LN3@s2i_ASN1_I
; Line 187
	inc	esi
; Line 188
	mov	edi, 1
; Line 189
	jmp	SHORT $LN4@s2i_ASN1_I
$LN3@s2i_ASN1_I:
; Line 190
	xor	edi, edi
$LN4@s2i_ASN1_I:
; Line 192
	cmp	BYTE PTR [esi], 48			; 00000030H
	jne	SHORT $LN8@s2i_ASN1_I
	mov	al, BYTE PTR [esi+1]
	cmp	al, 120					; 00000078H
	je	SHORT $LN7@s2i_ASN1_I
	cmp	al, 88					; 00000058H
	jne	SHORT $LN8@s2i_ASN1_I
$LN7@s2i_ASN1_I:
; Line 193
	add	esi, 2
; Line 199
	lea	eax, DWORD PTR _bn$[esp+12]
	push	esi
	push	eax
	call	_BN_hex2bn
	jmp	SHORT $LN18@s2i_ASN1_I
$LN8@s2i_ASN1_I:
; Line 201
	lea	eax, DWORD PTR _bn$[esp+12]
	push	esi
	push	eax
	call	_BN_dec2bn
$LN18@s2i_ASN1_I:
	add	esp, 8
; Line 203
	test	eax, eax
	je	SHORT $LN11@s2i_ASN1_I
	cmp	BYTE PTR [eax+esi], 0
	jne	SHORT $LN11@s2i_ASN1_I
; Line 209
	mov	eax, DWORD PTR _bn$[esp+12]
	test	edi, edi
	je	SHORT $LN12@s2i_ASN1_I
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], ecx
	cmove	edi, ecx
$LN12@s2i_ASN1_I:
; Line 212
	push	0
	push	eax
	call	_BN_to_ASN1_INTEGER
; Line 213
	push	DWORD PTR _bn$[esp+20]
	mov	esi, eax
	call	_BN_free
	add	esp, 12					; 0000000cH
; Line 214
	test	esi, esi
	jne	SHORT $LN13@s2i_ASN1_I
; Line 215
	push	216					; 000000d8H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	101					; 00000065H
	push	108					; 0000006cH
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
; Line 222
	pop	ecx
	ret	0
$LN13@s2i_ASN1_I:
; Line 219
	test	edi, edi
	je	SHORT $LN14@s2i_ASN1_I
; Line 220
	or	DWORD PTR [esi+4], 256			; 00000100H
$LN14@s2i_ASN1_I:
	pop	edi
; Line 221
	mov	eax, esi
	pop	esi
; Line 222
	pop	ecx
	ret	0
$LN11@s2i_ASN1_I:
; Line 204
	push	DWORD PTR _bn$[esp+12]
	call	_BN_free
; Line 205
	push	205					; 000000cdH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	100					; 00000064H
	push	108					; 0000006cH
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 24					; 00000018H
; Line 206
	xor	eax, eax
	pop	edi
	pop	esi
; Line 222
	pop	ecx
	ret	0
_s2i_ASN1_INTEGER ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _i2s_ASN1_INTEGER
_TEXT	SEGMENT
_method$ = 8						; size = 4
_a$ = 12						; size = 4
_i2s_ASN1_INTEGER PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 166
	mov	eax, DWORD PTR _a$[esp-4]
	push	esi
	xor	esi, esi
	test	eax, eax
	jne	SHORT $LN2@i2s_ASN1_I
	pop	esi
; Line 173
	ret	0
$LN2@i2s_ASN1_I:
	push	edi
; Line 168
	push	0
	push	eax
	call	_ASN1_INTEGER_to_BN
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN4@i2s_ASN1_I
	push	edi
	call	_BN_bn2dec
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN3@i2s_ASN1_I
$LN4@i2s_ASN1_I:
; Line 170
	push	170					; 000000aaH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
	push	120					; 00000078H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN3@i2s_ASN1_I:
; Line 171
	push	edi
	call	_BN_free
	add	esp, 4
; Line 172
	mov	eax, esi
	pop	edi
	pop	esi
; Line 173
	ret	0
_i2s_ASN1_INTEGER ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_add_value_int
_TEXT	SEGMENT
_name$ = 8						; size = 4
_aint$ = 12						; size = 4
_extlist$ = 16						; size = 4
_X509V3_add_value_int PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 229
	mov	eax, DWORD PTR _aint$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@X509V3_add
; Line 230
	mov	eax, 1
; Line 236
	ret	0
$LN2@X509V3_add:
	push	esi
	push	edi
; Line 165
	xor	edi, edi
; Line 168
	push	edi
	push	eax
	call	_ASN1_INTEGER_to_BN
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	je	SHORT $LN8@X509V3_add
	push	esi
	call	_BN_bn2dec
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN7@X509V3_add
$LN8@X509V3_add:
; Line 170
	push	170					; 000000aaH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
	push	120					; 00000078H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN7@X509V3_add:
; Line 171
	push	esi
	call	_BN_free
	add	esp, 4
; Line 231
	test	edi, edi
	jne	SHORT $LN3@X509V3_add
; Line 232
	pop	edi
	xor	eax, eax
	pop	esi
; Line 236
	ret	0
$LN3@X509V3_add:
; Line 233
	push	DWORD PTR _extlist$[esp+4]
	push	edi
	push	DWORD PTR _name$[esp+12]
	call	_X509V3_add_value
; Line 234
	push	edi
	mov	esi, eax
	call	_CRYPTO_free
	add	esp, 16					; 00000010H
; Line 235
	mov	eax, esi
	pop	edi
	pop	esi
; Line 236
	ret	0
_X509V3_add_value_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_add_value_bool
_TEXT	SEGMENT
_name$ = 8						; size = 4
_asn1_bool$ = 12					; size = 4
_extlist$ = 16						; size = 4
_X509V3_add_value_bool PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 136
	cmp	DWORD PTR _asn1_bool$[esp-4], 0
	je	SHORT $LN2@X509V3_add
; Line 137
	mov	DWORD PTR _asn1_bool$[esp-4], OFFSET ??_C@_04HCDDPBNL@TRUE?$AA@
	jmp	_X509V3_add_value
$LN2@X509V3_add:
; Line 138
	mov	DWORD PTR _asn1_bool$[esp-4], OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
	jmp	_X509V3_add_value
_X509V3_add_value_bool ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_add_value_uchar
_TEXT	SEGMENT
_name$ = 8						; size = 4
_value$ = 12						; size = 4
_extlist$ = 16						; size = 4
_X509V3_add_value_uchar PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 115
	jmp	_X509V3_add_value
_X509V3_add_value_uchar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_add_value
_TEXT	SEGMENT
_name$ = 8						; size = 4
_value$ = 12						; size = 4
_extlist$ = 16						; size = 4
_X509V3_add_value PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 87
	mov	eax, DWORD PTR _name$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	xor	esi, esi
	xor	ebx, ebx
	xor	edi, edi
	test	eax, eax
	je	SHORT $LN2@X509V3_add
	push	eax
	call	_BUF_strdup
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	je	SHORT $err$12
$LN2@X509V3_add:
; Line 89
	mov	eax, DWORD PTR _value$[esp+12]
	test	eax, eax
	je	SHORT $LN3@X509V3_add
	push	eax
	call	_BUF_strdup
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $err$12
$LN3@X509V3_add:
; Line 91
	push	91					; 0000005bH
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	12					; 0000000cH
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $err$12
; Line 93
	mov	ebp, DWORD PTR _extlist$[esp+12]
	cmp	DWORD PTR [ebp], 0
	jne	SHORT $LN5@X509V3_add
	call	_sk_new_null
	mov	DWORD PTR [ebp], eax
	test	eax, eax
	je	SHORT $err$12
$LN5@X509V3_add:
; Line 95
	mov	DWORD PTR [esi], 0
; Line 96
	mov	DWORD PTR [esi+4], ebx
; Line 97
	mov	DWORD PTR [esi+8], edi
; Line 98
	push	esi
	push	DWORD PTR [ebp]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	SHORT $err$12
; Line 100
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 110
	ret	0
$err$12:
; Line 102
	push	102					; 00000066H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	65					; 00000041H
	push	105					; 00000069H
	push	34					; 00000022H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 103
	test	esi, esi
	je	SHORT $LN7@X509V3_add
; Line 104
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN7@X509V3_add:
; Line 105
	test	ebx, ebx
	je	SHORT $LN8@X509V3_add
; Line 106
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN8@X509V3_add:
; Line 107
	test	edi, edi
	je	SHORT $LN9@X509V3_add
; Line 108
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN9@X509V3_add:
; Line 109
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 110
	ret	0
_X509V3_add_value ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_get_value_int
_TEXT	SEGMENT
_value$ = 8						; size = 4
_aint$ = 12						; size = 4
_X509V3_get_value_int PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 262
	push	esi
; Line 264
	mov	esi, DWORD PTR _value$[esp]
	push	DWORD PTR [esi+8]
	push	0
	call	_s2i_ASN1_INTEGER
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN2@X509V3_get
; Line 265
	push	DWORD PTR [esi+8]
	push	OFFSET ??_C@_07BDICHDDB@?0value?3?$AA@
	push	DWORD PTR [esi+4]
	push	OFFSET ??_C@_06FONLLLNC@?0name?3?$AA@
	push	DWORD PTR [esi]
	push	OFFSET ??_C@_08PCLJGJAL@section?3?$AA@
	push	6
	call	_ERR_add_error_data
	add	esp, 28					; 0000001cH
; Line 266
	xor	eax, eax
	pop	esi
; Line 270
	ret	0
$LN2@X509V3_get:
; Line 268
	mov	eax, DWORD PTR _aint$[esp]
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 269
	mov	eax, 1
; Line 270
	ret	0
_X509V3_get_value_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_get_value_bool
_TEXT	SEGMENT
_value$ = 8						; size = 4
_asn1_bool$ = 12					; size = 4
_X509V3_get_value_bool PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 239
	push	esi
	push	edi
; Line 241
	mov	edi, DWORD PTR _value$[esp+4]
	mov	esi, DWORD PTR [edi+8]
	test	esi, esi
	je	$err$58
; Line 245
	mov	ecx, OFFSET ??_C@_04HCDDPBNL@TRUE?$AA@
	mov	eax, esi
$LL9@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN10@X509V3_get
	test	dl, dl
	je	SHORT $LN11@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN10@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL9@X509V3_get
$LN11@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN12@X509V3_get
$LN10@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN12@X509V3_get:
	test	eax, eax
	je	$LN5@X509V3_get
	mov	ecx, OFFSET ??_C@_04LOAJBDKD@true?$AA@
	mov	eax, esi
	npad	4
$LL13@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN14@X509V3_get
	test	dl, dl
	je	SHORT $LN15@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN14@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL13@X509V3_get
$LN15@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN16@X509V3_get
$LN14@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN16@X509V3_get:
	test	eax, eax
	je	$LN5@X509V3_get
	mov	ecx, OFFSET ??_C@_01NFFPALBN@Y?$AA@
	mov	eax, esi
$LL17@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN18@X509V3_get
	test	dl, dl
	je	SHORT $LN19@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN18@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL17@X509V3_get
$LN19@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN20@X509V3_get
$LN18@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN20@X509V3_get:
	test	eax, eax
	je	$LN5@X509V3_get
	mov	ecx, OFFSET ??_C@_01EANLCPLP@y?$AA@
	mov	eax, esi
$LL21@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN22@X509V3_get
	test	dl, dl
	je	SHORT $LN23@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN22@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL21@X509V3_get
$LN23@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN24@X509V3_get
$LN22@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN24@X509V3_get:
	test	eax, eax
	je	$LN5@X509V3_get
	mov	ecx, OFFSET ??_C@_03IPHJCBHH@YES?$AA@
	mov	eax, esi
	npad	4
$LL25@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN26@X509V3_get
	test	dl, dl
	je	SHORT $LN27@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN26@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL25@X509V3_get
$LN27@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN28@X509V3_get
$LN26@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN28@X509V3_get:
	test	eax, eax
	je	$LN5@X509V3_get
	mov	ecx, OFFSET ??_C@_03ICICOMAL@yes?$AA@
	mov	eax, esi
$LL29@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN30@X509V3_get
	test	dl, dl
	je	SHORT $LN31@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN30@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL29@X509V3_get
$LN31@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN32@X509V3_get
$LN30@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN32@X509V3_get:
	test	eax, eax
	je	$LN5@X509V3_get
; Line 250
	mov	ecx, OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
	mov	eax, esi
$LL33@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN34@X509V3_get
	test	dl, dl
	je	SHORT $LN35@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN34@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL33@X509V3_get
$LN35@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN36@X509V3_get
$LN34@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN36@X509V3_get:
	test	eax, eax
	je	$LN7@X509V3_get
	mov	ecx, OFFSET ??_C@_05LAPONLG@false?$AA@
	mov	eax, esi
	npad	4
$LL37@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN38@X509V3_get
	test	dl, dl
	je	SHORT $LN39@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN38@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL37@X509V3_get
$LN39@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN40@X509V3_get
$LN38@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN40@X509V3_get:
	test	eax, eax
	je	$LN7@X509V3_get
	mov	ecx, OFFSET ??_C@_01NANMIPIL@N?$AA@
	mov	eax, esi
$LL41@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN42@X509V3_get
	test	dl, dl
	je	SHORT $LN43@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN42@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL41@X509V3_get
$LN43@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN44@X509V3_get
$LN42@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN44@X509V3_get:
	test	eax, eax
	je	$LN7@X509V3_get
	mov	ecx, OFFSET ??_C@_01EFFIKLCJ@n?$AA@
	mov	eax, esi
$LL45@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN46@X509V3_get
	test	dl, dl
	je	SHORT $LN47@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN46@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL45@X509V3_get
$LN47@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN48@X509V3_get
$LN46@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN48@X509V3_get:
	test	eax, eax
	je	SHORT $LN7@X509V3_get
	mov	ecx, OFFSET ??_C@_02NFLNFON@NO?$AA@
	mov	eax, esi
$LL49@X509V3_get:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN50@X509V3_get
	test	dl, dl
	je	SHORT $LN51@X509V3_get
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN50@X509V3_get
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL49@X509V3_get
$LN51@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN52@X509V3_get
$LN50@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN52@X509V3_get:
	test	eax, eax
	je	SHORT $LN7@X509V3_get
	mov	eax, OFFSET ??_C@_02KAJCLHKP@no?$AA@
$LL53@X509V3_get:
	mov	cl, BYTE PTR [esi]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN54@X509V3_get
	test	cl, cl
	je	SHORT $LN55@X509V3_get
	mov	cl, BYTE PTR [esi+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN54@X509V3_get
	add	esi, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL53@X509V3_get
$LN55@X509V3_get:
	xor	eax, eax
	jmp	SHORT $LN56@X509V3_get
$LN54@X509V3_get:
	sbb	eax, eax
	or	eax, 1
$LN56@X509V3_get:
	test	eax, eax
	jne	SHORT $err$58
$LN7@X509V3_get:
; Line 251
	mov	eax, DWORD PTR _asn1_bool$[esp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], 0
; Line 252
	mov	eax, 1
; Line 259
	ret	0
$LN5@X509V3_get:
; Line 246
	mov	eax, DWORD PTR _asn1_bool$[esp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], 255			; 000000ffH
; Line 247
	mov	eax, 1
; Line 259
	ret	0
$err$58:
; Line 255
	push	256					; 00000100H
	push	OFFSET ??_C@_0BJ@BDGEMPMC@?4?2crypto?2x509v3?2v3_utl?4c?$AA@
	push	104					; 00000068H
	push	110					; 0000006eH
	push	34					; 00000022H
	call	_ERR_put_error
; Line 257
	push	DWORD PTR [edi+8]
	push	OFFSET ??_C@_07BDICHDDB@?0value?3?$AA@
	push	DWORD PTR [edi+4]
	push	OFFSET ??_C@_06FONLLLNC@?0name?3?$AA@
	push	DWORD PTR [edi]
	push	OFFSET ??_C@_08PCLJGJAL@section?3?$AA@
	push	6
	call	_ERR_add_error_data
	add	esp, 48					; 00000030H
; Line 258
	xor	eax, eax
	pop	edi
	pop	esi
; Line 259
	ret	0
_X509V3_get_value_bool ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_add_value_bool_nf
_TEXT	SEGMENT
_name$ = 8						; size = 4
_asn1_bool$ = 12					; size = 4
_extlist$ = 16						; size = 4
_X509V3_add_value_bool_nf PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 144
	cmp	DWORD PTR _asn1_bool$[esp-4], 0
	je	SHORT $LN2@X509V3_add
; Line 145
	mov	DWORD PTR _asn1_bool$[esp-4], OFFSET ??_C@_04HCDDPBNL@TRUE?$AA@
	jmp	_X509V3_add_value
$LN2@X509V3_add:
; Line 146
	mov	eax, 1
; Line 147
	ret	0
_X509V3_add_value_bool_nf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509V3_conf_free
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_X509V3_conf_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\x509v3\v3_utl.c
; Line 121
	push	esi
; Line 122
	mov	esi, DWORD PTR _conf$[esp]
	test	esi, esi
	je	SHORT $LN1@X509V3_con
; Line 124
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN3@X509V3_con
; Line 125
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN3@X509V3_con:
; Line 126
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN4@X509V3_con
; Line 127
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@X509V3_con:
; Line 128
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN5@X509V3_con
; Line 129
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN5@X509V3_con:
; Line 130
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN1@X509V3_con:
	pop	esi
; Line 131
	ret	0
_X509V3_conf_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _sscanf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 2167
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	-1
	push	DWORD PTR __Buffer$[esp+12]
	call	___local_stdio_scanf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vsscanf
	add	esp, 28					; 0000001cH
; Line 2268
	ret	0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 2167
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	-1
	push	DWORD PTR __Buffer$[esp+12]
	call	___local_stdio_scanf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vsscanf
	add	esp, 28					; 0000001cH
; Line 2170
	ret	0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 91
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 92
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
END
