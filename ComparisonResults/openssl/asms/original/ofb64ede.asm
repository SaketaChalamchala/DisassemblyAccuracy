; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\des\ofb64ede.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_DES_ede3_ofb64_encrypt
EXTRN	_DES_encrypt3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _DES_ede3_ofb64_encrypt
_TEXT	SEGMENT
_out$GSCopy$1$ = -48					; size = 4
_num$GSCopy$1$ = -44					; size = 4
_ti$ = -40						; size = 8
_k3$GSCopy$1$ = -32					; size = 4
_k2$GSCopy$1$ = -28					; size = 4
_k1$GSCopy$1$ = -24					; size = 4
_iv$2$ = -20						; size = 4
_ivec$GSCopy$1$ = -16					; size = 4
_v1$1$ = -12						; size = 4
_d$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_length$ = 16						; size = 4
_k1$ = 20						; size = 4
_k2$ = 24						; size = 4
_k3$ = 28						; size = 4
_ivec$ = 32						; size = 4
_num$ = 36						; size = 4
_DES_ede3_ofb64_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\ofb64ede.c
; Line 70
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	mov	eax, DWORD PTR _out$[esp+44]
	mov	DWORD PTR _out$GSCopy$1$[esp+48], eax
	mov	eax, DWORD PTR _k1$[esp+44]
	mov	DWORD PTR _k1$GSCopy$1$[esp+48], eax
	mov	eax, DWORD PTR _k2$[esp+44]
	mov	DWORD PTR _k2$GSCopy$1$[esp+48], eax
	mov	eax, DWORD PTR _k3$[esp+44]
	mov	DWORD PTR _k3$GSCopy$1$[esp+48], eax
	mov	eax, DWORD PTR _ivec$[esp+44]
	mov	DWORD PTR _ivec$GSCopy$1$[esp+48], eax
	push	ebx
	push	ebp
; Line 81
	movzx	ebx, BYTE PTR [eax]
	push	esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	mov	ebp, DWORD PTR _num$[esp+60]
	mov	edx, edi
	mov	DWORD PTR _num$GSCopy$1$[esp+64], ebp
	mov	DWORD PTR _iv$2$[esp+64], edi
	mov	esi, DWORD PTR [ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 8
	or	ebx, eax
; Line 82
	movzx	ecx, BYTE PTR [edx+3]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ebx, eax
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 24					; 00000018H
	or	ebx, eax
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 8
	or	ecx, eax
; Line 83
	mov	DWORD PTR _ti$[esp+64], ebx
	movzx	eax, BYTE PTR [edx+5]
	mov	DWORD PTR _v1$1$[esp+64], ecx
	movzx	ecx, BYTE PTR [edx+6]
	mov	edx, DWORD PTR _v1$1$[esp+64]
	shl	ecx, 8
	or	ecx, eax
; Line 86
	mov	BYTE PTR _d$[esp+64], bl
	mov	eax, ebx
	shl	ecx, 16					; 00000010H
	shr	eax, 8
	or	edx, ecx
	mov	BYTE PTR _d$[esp+65], al
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _d$[esp+66], al
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _d$[esp+67], al
; Line 87
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR _d$[esp+69], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _d$[esp+70], al
	mov	eax, edx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _d$[esp+71], al
; Line 88
	mov	eax, DWORD PTR _length$[esp+60]
	mov	DWORD PTR _ti$[esp+68], edx
	mov	BYTE PTR _d$[esp+68], dl
	test	eax, eax
	je	$LN13@DES_ede3_o
	mov	ecx, DWORD PTR _out$GSCopy$1$[esp+64]
	mov	ebp, DWORD PTR _in$[esp+60]
	sub	ecx, ebp
	mov	DWORD PTR _out$GSCopy$1$[esp+64], ecx
	xor	edi, edi
	npad	6
$LL2@DES_ede3_o:
	dec	eax
	mov	DWORD PTR _length$[esp+60], eax
; Line 89
	test	esi, esi
	jne	SHORT $LN4@DES_ede3_o
; Line 92
	push	DWORD PTR _k3$GSCopy$1$[esp+64]
	lea	eax, DWORD PTR _ti$[esp+68]
	push	DWORD PTR _k2$GSCopy$1$[esp+68]
	push	DWORD PTR _k1$GSCopy$1$[esp+72]
	push	eax
	call	_DES_encrypt3
; Line 93
	mov	ebx, DWORD PTR _ti$[esp+80]
	add	esp, 16					; 00000010H
; Line 94
	mov	edx, DWORD PTR _ti$[esp+68]
; Line 97
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR _d$[esp+65], al
	mov	eax, ebx
	mov	ecx, DWORD PTR _out$GSCopy$1$[esp+64]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _d$[esp+66], al
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _d$[esp+67], al
; Line 98
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR _d$[esp+69], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _d$[esp+70], al
	mov	eax, edx
	shr	eax, 24					; 00000018H
; Line 99
	inc	edi
	mov	BYTE PTR _d$[esp+64], bl
	mov	BYTE PTR _d$[esp+68], dl
	mov	BYTE PTR _d$[esp+71], al
$LN4@DES_ede3_o:
; Line 101
	mov	al, BYTE PTR _d$[esp+esi+64]
; Line 102
	inc	esi
	xor	al, BYTE PTR [ebp]
	and	esi, 7
	mov	BYTE PTR [ecx+ebp], al
	inc	ebp
	mov	eax, DWORD PTR _length$[esp+60]
	test	eax, eax
	jne	$LL2@DES_ede3_o
; Line 104
	test	edi, edi
	mov	edi, DWORD PTR _iv$2$[esp+64]
	je	SHORT $LN12@DES_ede3_o
; Line 108
	mov	eax, DWORD PTR _ivec$GSCopy$1$[esp+64]
	mov	BYTE PTR [eax], bl
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR [edi], al
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+1], al
; Line 109
	mov	eax, edx
	shr	ebx, 24					; 00000018H
	mov	BYTE PTR [edi+2], bl
	shr	eax, 8
	mov	BYTE PTR [edi+3], dl
	mov	BYTE PTR [edi+4], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [edi+5], al
	mov	BYTE PTR [edi+6], dl
$LN12@DES_ede3_o:
; Line 112
	mov	eax, DWORD PTR _num$GSCopy$1$[esp+64]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 113
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
$LN13@DES_ede3_o:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	pop	edi
	mov	DWORD PTR [ebp], esi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_DES_ede3_ofb64_encrypt ENDP
_TEXT	ENDS
END
