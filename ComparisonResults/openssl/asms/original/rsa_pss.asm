; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pss.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_zeroes	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	_RSA_verify_PKCS1_PSS
PUBLIC	_RSA_padding_add_PKCS1_PSS
PUBLIC	_RSA_verify_PKCS1_PSS_mgf1
PUBLIC	_RSA_padding_add_PKCS1_PSS_mgf1
PUBLIC	??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_RSA_size:PROC
EXTRN	_PKCS1_MGF1:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_MD_CTX_init:PROC
EXTRN	_EVP_MD_CTX_cleanup:PROC
EXTRN	_EVP_DigestInit_ex:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal_ex:PROC
EXTRN	_RAND_bytes:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
CONST	SEGMENT
??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ DB '.\crypto\rsa\rsa_'
	DB	'pss.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_padding_add_PKCS1_PSS_mgf1
_TEXT	SEGMENT
_hLen$1$ = -44						; size = 4
_emLen$1$ = -40						; size = 4
_maskedDBLen$1$ = -36					; size = 4
_MSBits$1$ = -32					; size = 4
tv567 = -28						; size = 4
_ctx$ = -24						; size = 24
_rsa$ = 8						; size = 4
_EM$ = 12						; size = 4
_mHash$ = 16						; size = 4
_Hash$ = 20						; size = 4
_mgf1Hash$ = 24						; size = 4
_sLen$ = 28						; size = 4
_RSA_padding_add_PKCS1_PSS_mgf1 PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pss.c
; Line 191
	mov	eax, 44					; 0000002cH
	call	__chkstk
; Line 198
	mov	eax, DWORD PTR _mgf1Hash$[esp+40]
	mov	ecx, DWORD PTR _Hash$[esp+40]
	push	ebx
	push	ebp
	xor	ebp, ebp
	xor	ebx, ebx
	test	eax, eax
; Line 201
	push	ecx
	cmove	eax, ecx
	mov	DWORD PTR _mgf1Hash$[esp+52], eax
	call	_EVP_MD_size
	add	esp, 4
	mov	DWORD PTR _hLen$1$[esp+52], eax
; Line 202
	test	eax, eax
	js	$LN39@RSA_paddin
; Line 210
	push	edi
	mov	edi, DWORD PTR _sLen$[esp+52]
	cmp	edi, -1
	jne	$LN7@RSA_paddin
; Line 211
	mov	edi, eax
$LN11@RSA_paddin:
	push	esi
; Line 219
	mov	esi, DWORD PTR _rsa$[esp+56]
	push	DWORD PTR [esi+16]
	call	_BN_num_bits
	dec	eax
	and	eax, 7
; Line 220
	push	esi
	mov	DWORD PTR _MSBits$1$[esp+68], eax
	call	_RSA_size
; Line 222
	mov	esi, DWORD PTR _EM$[esp+64]
	add	esp, 8
	mov	ecx, eax
	mov	DWORD PTR _emLen$1$[esp+60], ecx
	cmp	DWORD PTR _MSBits$1$[esp+60], ebx
	jne	SHORT $LN12@RSA_paddin
	mov	BYTE PTR [esi], bl
	inc	esi
; Line 223
	dec	ecx
	mov	DWORD PTR _emLen$1$[esp+60], ecx
$LN12@RSA_paddin:
; Line 225
	cmp	edi, -2					; fffffffeH
	jne	$LN13@RSA_paddin
; Line 226
	mov	edi, ecx
	sub	edi, DWORD PTR _hLen$1$[esp+60]
	sub	edi, 2
$LN15@RSA_paddin:
; Line 232
	test	edi, edi
	jle	$LN18@RSA_paddin
; Line 233
	push	233					; 000000e9H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	edi
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 234
	test	ebx, ebx
	jne	SHORT $LN17@RSA_paddin
; Line 235
	push	236					; 000000ecH
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	65					; 00000041H
$LN45@RSA_paddin:
	push	148					; 00000094H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 284
	mov	eax, ebp
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 286
	add	esp, 44					; 0000002cH
	ret	0
$LN7@RSA_paddin:
; Line 212
	cmp	edi, -2					; fffffffeH
	jne	SHORT $LN44@RSA_paddin
; Line 213
	jmp	$LN11@RSA_paddin
$LN44@RSA_paddin:
; Line 214
	jge	$LN11@RSA_paddin
; Line 215
	push	215					; 000000d7H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	136					; 00000088H
	push	148					; 00000094H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 284
	mov	eax, ebp
	pop	edi
	pop	ebp
	pop	ebx
; Line 286
	add	esp, 44					; 0000002cH
	ret	0
$LN13@RSA_paddin:
; Line 227
	mov	eax, DWORD PTR _hLen$1$[esp+60]
	add	eax, 2
	add	eax, edi
	cmp	ecx, eax
	jge	$LN15@RSA_paddin
; Line 228
	push	229					; 000000e5H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	110					; 0000006eH
; Line 230
	jmp	SHORT $LN45@RSA_paddin
$LN17@RSA_paddin:
; Line 239
	push	edi
	push	ebx
	call	_RAND_bytes
	add	esp, 8
	test	eax, eax
	jle	$err$48
	mov	ecx, DWORD PTR _emLen$1$[esp+60]
$LN18@RSA_paddin:
; Line 242
	sub	ecx, DWORD PTR _hLen$1$[esp+60]
; Line 244
	lea	eax, DWORD PTR _ctx$[esp+60]
	mov	DWORD PTR tv567[esp+60], ecx
	dec	ecx
	push	eax
	mov	DWORD PTR _maskedDBLen$1$[esp+64], ecx
	call	_EVP_MD_CTX_init
; Line 247
	push	0
	push	DWORD PTR _Hash$[esp+64]
	lea	eax, DWORD PTR _ctx$[esp+72]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$48
	push	8
	lea	eax, DWORD PTR _ctx$[esp+64]
	push	OFFSET _zeroes
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$48
	push	DWORD PTR _hLen$1$[esp+60]
	lea	eax, DWORD PTR _ctx$[esp+64]
	push	DWORD PTR _mHash$[esp+60]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$48
; Line 249
	test	edi, edi
	je	SHORT $LN21@RSA_paddin
	push	edi
	lea	eax, DWORD PTR _ctx$[esp+64]
	push	ebx
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$48
$LN21@RSA_paddin:
; Line 251
	mov	eax, DWORD PTR _maskedDBLen$1$[esp+60]
	add	eax, esi
	push	0
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+68]
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$48
; Line 253
	lea	eax, DWORD PTR _ctx$[esp+60]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 256
	push	DWORD PTR _mgf1Hash$[esp+60]
	mov	ecx, DWORD PTR _maskedDBLen$1$[esp+68]
	push	DWORD PTR _hLen$1$[esp+68]
	lea	eax, DWORD PTR [ecx+esi]
	push	eax
	push	ecx
	push	esi
	call	_PKCS1_MGF1
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$err$48
; Line 265
	mov	ecx, DWORD PTR tv567[esp+60]
	sub	ecx, edi
	add	ecx, esi
; Line 266
	xor	BYTE PTR [ecx-2], 1
	dec	ecx
; Line 267
	test	edi, edi
	jle	SHORT $LN3@RSA_paddin
; Line 268
	xor	edx, edx
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN31@RSA_paddin
; Line 269
	lea	eax, DWORD PTR [ebx-1]
	lea	ebp, DWORD PTR [ecx-1]
	add	eax, edi
	add	ebp, edi
	cmp	ecx, eax
	ja	SHORT $LN32@RSA_paddin
	cmp	ebp, ebx
	jae	SHORT $LN31@RSA_paddin
$LN32@RSA_paddin:
	mov	eax, edi
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN43@RSA_paddin
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN43@RSA_paddin:
	mov	ebp, edi
	sub	ebp, eax
	lea	eax, DWORD PTR [ebx+16]
	npad	1
$LL4@RSA_paddin:
	movups	xmm0, XMMWORD PTR [ecx]
	add	edx, 32					; 00000020H
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax-48]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movups	xmm1, XMMWORD PTR [eax-32]
	movups	xmm0, XMMWORD PTR [ecx+16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	add	ecx, 32					; 00000020H
	cmp	edx, ebp
	jl	SHORT $LL4@RSA_paddin
$LN31@RSA_paddin:
; Line 268
	cmp	edx, edi
	jge	SHORT $LN3@RSA_paddin
	npad	1
$LL30@RSA_paddin:
; Line 269
	mov	al, BYTE PTR [edx+ebx]
	lea	ecx, DWORD PTR [ecx+1]
	xor	BYTE PTR [ecx-1], al
	inc	edx
	cmp	edx, edi
	jl	SHORT $LL30@RSA_paddin
$LN3@RSA_paddin:
; Line 271
	mov	eax, DWORD PTR _MSBits$1$[esp+60]
	test	eax, eax
	je	SHORT $LN25@RSA_paddin
; Line 272
	mov	ecx, 8
	sub	ecx, eax
	mov	eax, 255				; 000000ffH
	sar	eax, cl
	and	BYTE PTR [esi], al
$LN25@RSA_paddin:
; Line 276
	mov	eax, DWORD PTR _emLen$1$[esp+60]
; Line 278
	mov	ebp, 1
	mov	BYTE PTR [eax+esi-1], 188		; 000000bcH
$err$48:
; Line 281
	test	ebx, ebx
	je	SHORT $LN38@RSA_paddin
; Line 282
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN38@RSA_paddin:
	pop	esi
	pop	edi
$LN39@RSA_paddin:
; Line 284
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 286
	add	esp, 44					; 0000002cH
	ret	0
_RSA_padding_add_PKCS1_PSS_mgf1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_verify_PKCS1_PSS_mgf1
_TEXT	SEGMENT
_DB$1$ = -124						; size = 4
_mgf1Hash$GSCopy$2$ = -120				; size = 4
tv624 = -120						; size = 4
_i$1$ = -116						; size = 4
_ret$1$ = -112						; size = 4
_MSBits$1$ = -108					; size = 4
tv622 = -104						; size = 4
_Hash$GSCopy$1$ = -100					; size = 4
_mHash$GSCopy$1$ = -96					; size = 4
_ctx$ = -92						; size = 24
_H_$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_rsa$ = 8						; size = 4
_mHash$ = 12						; size = 4
_Hash$ = 16						; size = 4
_mgf1Hash$ = 20						; size = 4
_EM$ = 24						; size = 4
_sLen$ = 28						; size = 4
_RSA_verify_PKCS1_PSS_mgf1 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pss.c
; Line 84
	mov	eax, 124				; 0000007cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
	mov	eax, DWORD PTR _mHash$[esp+120]
	push	ebx
	mov	ebx, DWORD PTR _mgf1Hash$[esp+124]
	push	ebp
	mov	ebp, DWORD PTR _rsa$[esp+128]
	push	esi
	mov	esi, DWORD PTR _EM$[esp+132]
	mov	DWORD PTR _mHash$GSCopy$1$[esp+136], eax
; Line 92
	lea	eax, DWORD PTR _ctx$[esp+136]
	push	edi
	mov	edi, DWORD PTR _Hash$[esp+136]
	push	eax
	mov	DWORD PTR _Hash$GSCopy$1$[esp+144], edi
	mov	DWORD PTR _ret$1$[esp+144], 0
	call	_EVP_MD_CTX_init
; Line 94
	test	ebx, ebx
; Line 97
	push	edi
	cmove	ebx, edi
	mov	DWORD PTR _mgf1Hash$GSCopy$2$[esp+148], ebx
	call	_EVP_MD_size
	mov	edi, eax
	add	esp, 8
; Line 98
	test	edi, edi
	js	$LN31@RSA_verify
; Line 106
	mov	ebx, DWORD PTR _sLen$[esp+136]
	cmp	ebx, -1
	jne	SHORT $LN10@RSA_verify
; Line 107
	mov	ebx, edi
$LN62@RSA_verify:
	mov	DWORD PTR _sLen$[esp+136], ebx
$LN14@RSA_verify:
; Line 115
	push	DWORD PTR [ebp+16]
	call	_BN_num_bits
	dec	eax
	and	eax, 7
; Line 116
	push	ebp
	mov	DWORD PTR _MSBits$1$[esp+148], eax
	call	_RSA_size
; Line 117
	mov	ecx, DWORD PTR _MSBits$1$[esp+148]
	mov	ebp, eax
	mov	eax, 255				; 000000ffH
	add	esp, 8
	shl	eax, cl
	test	al, BYTE PTR [esi]
	je	SHORT $LN15@RSA_verify
; Line 118
	push	118					; 00000076H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	133					; 00000085H
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 119
	jmp	$LN31@RSA_verify
$LN10@RSA_verify:
; Line 108
	cmp	ebx, -2					; fffffffeH
	jne	SHORT $LN61@RSA_verify
; Line 109
	jmp	SHORT $LN62@RSA_verify
$LN61@RSA_verify:
; Line 110
	jge	SHORT $LN14@RSA_verify
; Line 111
	push	111					; 0000006fH
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	136					; 00000088H
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 112
	jmp	$LN31@RSA_verify
$LN15@RSA_verify:
; Line 121
	test	ecx, ecx
	jne	SHORT $LN16@RSA_verify
; Line 122
	inc	esi
; Line 123
	dec	ebp
$LN16@RSA_verify:
; Line 125
	lea	eax, DWORD PTR [edi+2]
	add	eax, ebx
	cmp	ebp, eax
	jge	SHORT $LN17@RSA_verify
; Line 126
	push	126					; 0000007eH
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	109					; 0000006dH
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 127
	jmp	$LN31@RSA_verify
$LN17@RSA_verify:
; Line 129
	cmp	BYTE PTR [esi+ebp-1], 188		; 000000bcH
	je	SHORT $LN18@RSA_verify
; Line 130
	push	130					; 00000082H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	134					; 00000086H
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 131
	jmp	$LN31@RSA_verify
$LN18@RSA_verify:
; Line 133
	sub	ebp, edi
	dec	ebp
; Line 135
	push	135					; 00000087H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	ebp
	lea	ebx, DWORD PTR [esi+ebp]
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _DB$1$[esp+140], eax
; Line 136
	test	eax, eax
	jne	SHORT $LN19@RSA_verify
; Line 137
	push	137					; 00000089H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	65					; 00000041H
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 138
	jmp	$LN31@RSA_verify
$LN19@RSA_verify:
; Line 140
	push	DWORD PTR _mgf1Hash$GSCopy$2$[esp+140]
	push	edi
	push	ebx
	push	ebp
	push	eax
	call	_PKCS1_MGF1
	add	esp, 20					; 00000014H
	test	eax, eax
	js	$LN56@RSA_verify
; Line 142
	xor	ecx, ecx
	mov	DWORD PTR _i$1$[esp+140], ecx
	test	ebp, ebp
	jle	$LN3@RSA_verify
; Line 143
	mov	edx, DWORD PTR _DB$1$[esp+140]
	cmp	ebp, 32					; 00000020H
	jb	SHORT $LN38@RSA_verify
	lea	eax, DWORD PTR [ebp-1]
	mov	DWORD PTR _i$1$[esp+140], ecx
	add	eax, esi
	cmp	edx, eax
	ja	SHORT $LN39@RSA_verify
	lea	eax, DWORD PTR [edx-1]
	add	eax, ebp
	cmp	eax, esi
	jae	SHORT $LN38@RSA_verify
$LN39@RSA_verify:
	mov	eax, ebp
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN60@RSA_verify
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN60@RSA_verify:
	mov	DWORD PTR tv624[esp+140], ebp
; Line 142
	mov	ecx, esi
	sub	DWORD PTR tv624[esp+140], eax
	sub	ecx, edx
	mov	DWORD PTR tv622[esp+140], ecx
	mov	eax, edx
	mov	ecx, DWORD PTR _i$1$[esp+140]
	mov	edx, DWORD PTR tv622[esp+140]
	npad	2
$LL4@RSA_verify:
; Line 143
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [edx+eax-32]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-32], xmm1
	movups	xmm1, XMMWORD PTR [esi+ecx+16]
	add	ecx, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	ecx, DWORD PTR tv624[esp+140]
	jl	SHORT $LL4@RSA_verify
	mov	edx, DWORD PTR _DB$1$[esp+140]
	mov	DWORD PTR _i$1$[esp+140], ecx
$LN38@RSA_verify:
; Line 142
	cmp	ecx, ebp
	jge	SHORT $LN3@RSA_verify
	add	ecx, edx
	sub	esi, edx
	mov	edx, ebp
	sub	edx, DWORD PTR _i$1$[esp+140]
$LL37@RSA_verify:
; Line 143
	mov	al, BYTE PTR [ecx+esi]
	lea	ecx, DWORD PTR [ecx+1]
	xor	BYTE PTR [ecx-1], al
	sub	edx, 1
	jne	SHORT $LL37@RSA_verify
$LN3@RSA_verify:
; Line 144
	mov	eax, DWORD PTR _MSBits$1$[esp+140]
	test	eax, eax
	je	SHORT $LN59@RSA_verify
; Line 145
	mov	ecx, 8
	mov	edx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, DWORD PTR _DB$1$[esp+140]
	sar	edx, cl
	and	BYTE PTR [eax], dl
	jmp	SHORT $LN21@RSA_verify
$LN59@RSA_verify:
	mov	eax, DWORD PTR _DB$1$[esp+140]
$LN21@RSA_verify:
; Line 146
	xor	esi, esi
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN52@RSA_verify
	lea	ecx, DWORD PTR [ebp-1]
	npad	3
$LL7@RSA_verify:
	cmp	esi, ecx
	jge	SHORT $LN52@RSA_verify
	inc	esi
	cmp	BYTE PTR [esi+eax], 0
	je	SHORT $LL7@RSA_verify
$LN52@RSA_verify:
; Line 147
	mov	al, BYTE PTR [esi+eax]
	inc	esi
	cmp	al, 1
	je	SHORT $LN22@RSA_verify
; Line 148
	push	148					; 00000094H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	135					; 00000087H
$LN64@RSA_verify:
; Line 152
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN56@RSA_verify:
	mov	ebp, DWORD PTR _DB$1$[esp+140]
$err$66:
; Line 173
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$LN31@RSA_verify:
; Line 174
	lea	eax, DWORD PTR _ctx$[esp+140]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 178
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	add	esp, 4
	mov	eax, DWORD PTR _ret$1$[esp+140]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
$LN22@RSA_verify:
; Line 151
	mov	ecx, DWORD PTR _sLen$[esp+136]
	test	ecx, ecx
	js	SHORT $LN23@RSA_verify
	mov	eax, ebp
	sub	eax, esi
	cmp	eax, ecx
	je	SHORT $LN23@RSA_verify
; Line 152
	push	152					; 00000098H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	136					; 00000088H
; Line 153
	jmp	SHORT $LN64@RSA_verify
$LN23@RSA_verify:
; Line 157
	push	0
	push	DWORD PTR _Hash$GSCopy$1$[esp+144]
	lea	eax, DWORD PTR _ctx$[esp+148]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN56@RSA_verify
	push	8
	lea	eax, DWORD PTR _ctx$[esp+144]
	push	OFFSET _zeroes
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN56@RSA_verify
	push	edi
	push	DWORD PTR _mHash$GSCopy$1$[esp+144]
	lea	eax, DWORD PTR _ctx$[esp+148]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN56@RSA_verify
; Line 159
	sub	ebp, esi
	je	SHORT $LN57@RSA_verify
; Line 160
	push	ebp
	mov	ebp, DWORD PTR _DB$1$[esp+144]
	lea	eax, DWORD PTR [esi+ebp]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+148]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$66
	jmp	SHORT $LN27@RSA_verify
$LN57@RSA_verify:
	mov	ebp, DWORD PTR _DB$1$[esp+140]
$LN27@RSA_verify:
; Line 163
	push	0
	lea	eax, DWORD PTR _H_$[esp+144]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+148]
	push	eax
	call	_EVP_DigestFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$66
; Line 165
	lea	ecx, DWORD PTR _H_$[esp+140]
	sub	edi, 4
	jb	SHORT $LN49@RSA_verify
$LL50@RSA_verify:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [ebx]
	jne	SHORT $LN48@RSA_verify
	add	ecx, 4
	add	ebx, 4
	sub	edi, 4
	jae	SHORT $LL50@RSA_verify
$LN49@RSA_verify:
	cmp	edi, -4					; fffffffcH
	je	SHORT $LN47@RSA_verify
$LN48@RSA_verify:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [ebx]
	jne	SHORT $LN51@RSA_verify
	cmp	edi, -3					; fffffffdH
	je	SHORT $LN47@RSA_verify
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [ebx+1]
	jne	SHORT $LN51@RSA_verify
	cmp	edi, -2					; fffffffeH
	je	SHORT $LN47@RSA_verify
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [ebx+2]
	jne	SHORT $LN51@RSA_verify
	cmp	edi, -1
	je	SHORT $LN47@RSA_verify
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [ebx+3]
	je	SHORT $LN47@RSA_verify
$LN51@RSA_verify:
; Line 166
	push	166					; 000000a6H
	push	OFFSET ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
	push	104					; 00000068H
	push	149					; 00000095H
	push	4
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 167
	mov	DWORD PTR _ret$1$[esp+140], 0
; Line 168
	jmp	$err$66
$LN47@RSA_verify:
; Line 169
	mov	DWORD PTR _ret$1$[esp+140], 1
	jmp	$err$66
_RSA_verify_PKCS1_PSS_mgf1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_padding_add_PKCS1_PSS
_TEXT	SEGMENT
_rsa$ = 8						; size = 4
_EM$ = 12						; size = 4
_mHash$ = 16						; size = 4
_Hash$ = 20						; size = 4
_sLen$ = 24						; size = 4
_RSA_padding_add_PKCS1_PSS PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pss.c
; Line 184
	push	DWORD PTR _sLen$[esp-4]
	push	0
	push	DWORD PTR _Hash$[esp+4]
	push	DWORD PTR _mHash$[esp+8]
	push	DWORD PTR _EM$[esp+12]
	push	DWORD PTR _rsa$[esp+16]
	call	_RSA_padding_add_PKCS1_PSS_mgf1
	add	esp, 24					; 00000018H
; Line 185
	ret	0
_RSA_padding_add_PKCS1_PSS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RSA_verify_PKCS1_PSS
_TEXT	SEGMENT
_rsa$ = 8						; size = 4
_mHash$ = 12						; size = 4
_Hash$ = 16						; size = 4
_EM$ = 20						; size = 4
_sLen$ = 24						; size = 4
_RSA_verify_PKCS1_PSS PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rsa\rsa_pss.c
; Line 78
	push	DWORD PTR _sLen$[esp-4]
	push	DWORD PTR _EM$[esp]
	push	0
	push	DWORD PTR _Hash$[esp+8]
	push	DWORD PTR _mHash$[esp+12]
	push	DWORD PTR _rsa$[esp+16]
	call	_RSA_verify_PKCS1_PSS_mgf1
	add	esp, 24					; 00000018H
; Line 79
	ret	0
_RSA_verify_PKCS1_PSS ENDP
_TEXT	ENDS
END
