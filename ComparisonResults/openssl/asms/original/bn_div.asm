; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_div.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_div
PUBLIC	??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@ ; `string'
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_lshift:PROC
EXTRN	_BN_rshift:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_bn_mul_words:PROC
EXTRN	_bn_add_words:PROC
EXTRN	_bn_sub_words:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	__aulldiv:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@
CONST	SEGMENT
??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@ DB '.\crypto\bn\bn_div.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_div
_TEXT	SEGMENT
_div_n$1$ = -80						; size = 4
_resp$1$ = -76						; size = 4
_no_branch$1$ = -72					; size = 4
_wnump$1$ = -68						; size = 4
tv828 = -64						; size = 4
_loop$1$ = -64						; size = 4
_d1$1$ = -60						; size = 4
_tmp$1$ = -56						; size = 4
_res$1$ = -52						; size = 4
tv851 = -48						; size = 4
tv826 = -44						; size = 4
_sdiv$1$ = -40						; size = 4
tv840 = -36						; size = 4
tv834 = -32						; size = 4
_snum$1$ = -28						; size = 4
_norm_shift$1$ = -24					; size = 4
_wnum$ = -20						; size = 20
_dv$ = 8						; size = 4
_rm$ = 12						; size = 4
_num$ = 16						; size = 4
_divisor$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_div	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_div.c
; Line 192
	mov	eax, 80					; 00000050H
	call	__chkstk
	push	ebx
; Line 205
	mov	ebx, DWORD PTR _num$[esp+80]
	xor	edx, edx
	push	edi
	mov	DWORD PTR _no_branch$1$[esp+88], edx
	mov	ecx, DWORD PTR [ebx+4]
	test	ecx, ecx
	jle	SHORT $LN19@BN_div
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+ecx*4-4], edx
	je	SHORT $LN18@BN_div
$LN19@BN_div:
	mov	edi, DWORD PTR _divisor$[esp+84]
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	jle	SHORT $LN17@BN_div
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax+ecx*4-4], edx
	jne	SHORT $LN17@BN_div
$LN18@BN_div:
; Line 207
	push	207					; 000000cfH
	push	OFFSET ??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@
	push	107					; 0000006bH
	push	107					; 0000006bH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN112@BN_div:
; Line 208
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 476
	add	esp, 80					; 00000050H
	ret	0
$LN17@BN_div:
; Line 215
	test	BYTE PTR [ebx+16], 4
	jne	SHORT $LN21@BN_div
	test	BYTE PTR [edi+16], 4
	je	SHORT $LN20@BN_div
$LN21@BN_div:
; Line 216
	mov	edx, 1
	mov	DWORD PTR _no_branch$1$[esp+88], edx
$LN20@BN_div:
; Line 228
	test	ecx, ecx
	jne	SHORT $LN22@BN_div
; Line 229
	push	229					; 000000e5H
	push	OFFSET ??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@
	push	103					; 00000067H
	push	107					; 0000006bH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 230
	xor	eax, eax
	pop	edi
	pop	ebx
; Line 476
	add	esp, 80					; 00000050H
	ret	0
$LN22@BN_div:
; Line 233
	test	edx, edx
	jne	SHORT $LN23@BN_div
	push	edi
	push	ebx
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN23@BN_div
; Line 234
	mov	eax, DWORD PTR _rm$[esp+84]
	test	eax, eax
	je	SHORT $LN25@BN_div
; Line 235
	push	ebx
	push	eax
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $LN112@BN_div
$LN25@BN_div:
; Line 238
	mov	eax, DWORD PTR _dv$[esp+84]
	test	eax, eax
	je	SHORT $LN26@BN_div
; Line 239
	push	0
	push	eax
	call	_BN_set_word
	add	esp, 8
$LN26@BN_div:
; Line 240
	pop	edi
	mov	eax, 1
	pop	ebx
; Line 476
	add	esp, 80					; 00000050H
	ret	0
$LN23@BN_div:
	push	ebp
	push	esi
; Line 243
	mov	esi, DWORD PTR _ctx$[esp+92]
	push	esi
	call	_BN_CTX_start
; Line 244
	push	esi
	call	_BN_CTX_get
	mov	ebp, eax
; Line 245
	push	esi
	mov	DWORD PTR _tmp$1$[esp+108], ebp
	call	_BN_CTX_get
	mov	ebx, eax
; Line 246
	push	esi
	mov	DWORD PTR _snum$1$[esp+112], ebx
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 247
	mov	eax, DWORD PTR _dv$[esp+92]
	mov	DWORD PTR _sdiv$1$[esp+96], esi
	mov	DWORD PTR _res$1$[esp+96], eax
	test	eax, eax
	jne	SHORT $LN27@BN_div
; Line 248
	push	DWORD PTR _ctx$[esp+92]
	call	_BN_CTX_get
	add	esp, 4
	mov	DWORD PTR _res$1$[esp+96], eax
$LN27@BN_div:
; Line 251
	test	esi, esi
	je	$err$114
	test	eax, eax
	je	$err$114
	test	ebp, ebp
	je	$err$114
	test	ebx, ebx
	je	$err$114
; Line 255
	push	edi
	call	_BN_num_bits
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN111@BN_div
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN111@BN_div:
	mov	ebp, 32					; 00000020H
	sub	ebp, eax
; Line 256
	push	ebp
	push	edi
	push	esi
	call	_BN_lshift
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$114
; Line 259
	add	ebp, 32					; 00000020H
	mov	DWORD PTR [esi+12], 0
; Line 260
	push	ebp
	push	DWORD PTR _num$[esp+96]
	mov	DWORD PTR _norm_shift$1$[esp+104], ebp
	push	ebx
	call	_BN_lshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$114
; Line 264
	cmp	DWORD PTR _no_branch$1$[esp+96], 0
	mov	DWORD PTR [ebx+12], 0
	je	$LN35@BN_div
; Line 269
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR [edx+1]
	cmp	ecx, eax
	jg	SHORT $LN34@BN_div
; Line 270
	lea	eax, DWORD PTR [edx+2]
	cmp	eax, DWORD PTR [ebx+8]
	jg	SHORT $LN59@BN_div
	mov	eax, ebx
	jmp	SHORT $LN60@BN_div
$LN59@BN_div:
	push	eax
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN60@BN_div:
	test	eax, eax
	je	$err$114
; Line 272
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ebx+4]
	add	eax, 2
	cmp	ecx, eax
	jge	SHORT $LN3@BN_div
$LL4@BN_div:
; Line 273
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [eax+ecx*4], 0
	inc	ecx
	mov	eax, DWORD PTR [esi+4]
	add	eax, 2
	cmp	ecx, eax
	jl	SHORT $LL4@BN_div
$LN3@BN_div:
; Line 274
	mov	eax, DWORD PTR [esi+4]
	add	eax, 2
	mov	DWORD PTR [ebx+4], eax
; Line 275
	jmp	SHORT $LN35@BN_div
$LN34@BN_div:
; Line 276
	lea	eax, DWORD PTR [ecx+1]
	cmp	eax, DWORD PTR [ebx+8]
	jg	SHORT $LN61@BN_div
	mov	eax, ebx
	jmp	SHORT $LN62@BN_div
$LN61@BN_div:
	push	eax
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN62@BN_div:
	test	eax, eax
	je	$err$114
; Line 278
	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [eax+ecx*4], 0
; Line 279
	inc	DWORD PTR [ebx+4]
$LN35@BN_div:
; Line 283
	mov	eax, DWORD PTR [esi+4]
; Line 284
	mov	edx, DWORD PTR [ebx+4]
; Line 285
	mov	ecx, edx
	sub	ecx, eax
	mov	DWORD PTR _div_n$1$[esp+96], eax
; Line 290
	mov	DWORD PTR _wnum$[esp+108], 0
; Line 291
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _loop$1$[esp+96], ecx
	lea	ebp, DWORD PTR [ecx*4]
	add	eax, ebp
; Line 292
	mov	ebp, DWORD PTR _div_n$1$[esp+96]
	mov	DWORD PTR _wnum$[esp+96], eax
	mov	DWORD PTR _wnum$[esp+100], ebp
; Line 296
	mov	eax, DWORD PTR [ebx+8]
	sub	eax, ecx
; Line 300
	lea	edi, DWORD PTR [ebp*4]
	mov	DWORD PTR _wnum$[esp+104], eax
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR tv840[esp+96], edi
	mov	ebp, DWORD PTR [eax+edi-4]
; Line 301
	mov	edi, DWORD PTR _div_n$1$[esp+96]
	cmp	edi, 1
	jne	SHORT $LN63@BN_div
	mov	DWORD PTR _d1$1$[esp+96], 0
	jmp	SHORT $LN64@BN_div
$LN63@BN_div:
	mov	eax, DWORD PTR [eax+edi*4-8]
	mov	DWORD PTR _d1$1$[esp+96], eax
$LN64@BN_div:
; Line 304
	mov	eax, DWORD PTR [ebx]
; Line 307
	mov	edi, DWORD PTR _divisor$[esp+92]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _num$[esp+92]
	add	eax, -4					; fffffffcH
	mov	DWORD PTR _wnump$1$[esp+96], eax
	mov	eax, DWORD PTR [edi+12]
	mov	edi, DWORD PTR _res$1$[esp+96]
	xor	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [edi+12], eax
; Line 308
	lea	eax, DWORD PTR [ecx+1]
	cmp	eax, DWORD PTR [edi+8]
	jg	SHORT $LN65@BN_div
	mov	eax, edi
	jmp	SHORT $LN66@BN_div
$LN65@BN_div:
	push	eax
	push	edi
	call	_bn_expand2
	mov	ecx, DWORD PTR _loop$1$[esp+104]
	add	esp, 8
$LN66@BN_div:
	test	eax, eax
	je	$err$114
; Line 310
	mov	edx, DWORD PTR _no_branch$1$[esp+96]
	mov	eax, ecx
	sub	eax, edx
	mov	DWORD PTR [edi+4], eax
; Line 311
	mov	eax, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 314
	mov	ecx, DWORD PTR _div_n$1$[esp+96]
	add	eax, -4					; fffffffcH
	inc	ecx
	mov	DWORD PTR _resp$1$[esp+96], eax
	mov	eax, DWORD PTR _tmp$1$[esp+96]
	mov	DWORD PTR tv834[esp+96], ecx
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN68@BN_div
	push	ecx
	push	eax
	call	_bn_expand2
	mov	edx, DWORD PTR _no_branch$1$[esp+104]
	add	esp, 8
$LN68@BN_div:
	test	eax, eax
	je	$err$114
; Line 317
	test	edx, edx
	jne	SHORT $LN105@BN_div
; Line 318
	lea	eax, DWORD PTR _wnum$[esp+96]
	push	esi
	push	eax
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN41@BN_div
; Line 325
	push	DWORD PTR _div_n$1$[esp+96]
	mov	eax, DWORD PTR _wnum$[esp+100]
	push	DWORD PTR [esi]
	push	eax
	push	eax
	call	_bn_sub_words
; Line 326
	mov	ecx, DWORD PTR _resp$1$[esp+112]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [ecx], 1
; Line 327
	jmp	SHORT $LN42@BN_div
$LN41@BN_div:
; Line 328
	dec	DWORD PTR [edi+4]
$LN105@BN_div:
	mov	ecx, DWORD PTR _resp$1$[esp+96]
$LN42@BN_div:
; Line 335
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN43@BN_div
; Line 336
	mov	DWORD PTR [edi+12], 0
	jmp	SHORT $LN44@BN_div
$LN43@BN_div:
; Line 338
	sub	ecx, 4
$LN44@BN_div:
; Line 340
	mov	eax, DWORD PTR _loop$1$[esp+96]
	dec	eax
	mov	DWORD PTR tv851[esp+96], eax
	test	eax, eax
	jle	$LN6@BN_div
	mov	ebx, DWORD PTR _wnump$1$[esp+96]
	sub	ecx, ebx
	mov	DWORD PTR _resp$1$[esp+96], ecx
	npad	2
$LL7@BN_div:
; Line 352
	mov	ecx, DWORD PTR [ebx]
; Line 353
	mov	esi, DWORD PTR [ebx-4]
; Line 354
	cmp	ecx, ebp
	jne	SHORT $LN45@BN_div
; Line 355
	or	edi, -1
	jmp	SHORT $LN104@BN_div
$LN45@BN_div:
; Line 362
	push	0
	push	ebp
	xor	eax, eax
	or	eax, esi
	push	ecx
	push	eax
	call	__aulldiv
	mov	edi, eax
; Line 381
	mov	DWORD PTR tv828[esp+96], 0
	mul	DWORD PTR _d1$1$[esp+96]
	mov	ecx, edi
	imul	ecx, ebp
	mov	ebx, eax
	mov	eax, DWORD PTR _wnump$1$[esp+96]
	mov	eax, DWORD PTR [eax-8]
	sub	esi, ecx
	or	DWORD PTR tv828[esp+96], eax
	mov	ecx, esi
	mov	DWORD PTR tv826[esp+96], eax
	cmp	edx, ecx
	jb	SHORT $LN104@BN_div
	ja	SHORT $LL8@BN_div
	cmp	ebx, DWORD PTR tv828[esp+96]
	jbe	SHORT $LN104@BN_div
$LL8@BN_div:
; Line 384
	add	esi, ebp
	dec	edi
; Line 385
	cmp	esi, ebp
	jb	SHORT $LN104@BN_div
; Line 387
	sub	ebx, DWORD PTR _d1$1$[esp+96]
	mov	eax, esi
	sbb	edx, 0
	xor	ecx, ecx
	or	ecx, DWORD PTR tv826[esp+96]
	cmp	edx, eax
	ja	SHORT $LL8@BN_div
; Line 381
	jb	SHORT $LN104@BN_div
	cmp	ebx, ecx
	ja	SHORT $LL8@BN_div
$LN104@BN_div:
; Line 432
	mov	esi, DWORD PTR _sdiv$1$[esp+96]
	mov	eax, DWORD PTR _tmp$1$[esp+96]
	push	edi
	push	DWORD PTR _div_n$1$[esp+100]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax]
	call	_bn_mul_words
; Line 433
	mov	edx, DWORD PTR _tmp$1$[esp+112]
	mov	ebx, DWORD PTR tv840[esp+112]
; Line 439
	push	DWORD PTR tv834[esp+112]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ebx+ecx], eax
	mov	eax, DWORD PTR _wnum$[esp+116]
	sub	eax, 4
	mov	DWORD PTR _wnum$[esp+116], eax
	push	DWORD PTR [edx]
	push	eax
	push	eax
	call	_bn_sub_words
	mov	ebx, DWORD PTR _wnump$1$[esp+128]
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN50@BN_div
; Line 446
	push	DWORD PTR _div_n$1$[esp+96]
	mov	eax, DWORD PTR _wnum$[esp+100]
	dec	edi
	push	DWORD PTR [esi]
	push	eax
	push	eax
	call	_bn_add_words
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN50@BN_div
; Line 451
	inc	DWORD PTR [ebx]
$LN50@BN_div:
; Line 454
	mov	eax, DWORD PTR _resp$1$[esp+96]
	mov	DWORD PTR [eax+ebx], edi
	sub	ebx, 4
	sub	DWORD PTR tv851[esp+96], 1
	mov	DWORD PTR _wnump$1$[esp+96], ebx
	jne	$LL7@BN_div
	mov	ebx, DWORD PTR _snum$1$[esp+96]
	mov	edi, DWORD PTR _res$1$[esp+96]
$LN6@BN_div:
; Line 456
	mov	ecx, DWORD PTR [ebx+4]
	test	ecx, ecx
	jle	SHORT $LN51@BN_div
	mov	eax, DWORD PTR [ebx]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL13@BN_div:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN77@BN_div
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL13@BN_div
$LN77@BN_div:
	mov	DWORD PTR [ebx+4], ecx
$LN51@BN_div:
; Line 457
	mov	esi, DWORD PTR _rm$[esp+92]
	test	esi, esi
	je	SHORT $LN54@BN_div
; Line 463
	push	DWORD PTR _norm_shift$1$[esp+96]
	mov	eax, DWORD PTR _num$[esp+96]
	push	ebx
	push	esi
	mov	ebp, DWORD PTR [eax+12]
	call	_BN_rshift
	add	esp, 12					; 0000000cH
; Line 464
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN54@BN_div
; Line 465
	mov	DWORD PTR [esi+12], ebp
$LN54@BN_div:
; Line 468
	cmp	DWORD PTR _no_branch$1$[esp+96], 0
	je	SHORT $LN56@BN_div
; Line 469
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	jle	SHORT $LN56@BN_div
	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
	npad	2
$LL16@BN_div:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN78@BN_div
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL16@BN_div
$LN78@BN_div:
	mov	DWORD PTR [edi+4], ecx
$LN56@BN_div:
; Line 470
	push	DWORD PTR _ctx$[esp+92]
	call	_BN_CTX_end
	add	esp, 4
; Line 471
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 476
	add	esp, 80					; 00000050H
	ret	0
$err$114:
; Line 474
	push	DWORD PTR _ctx$[esp+92]
	call	_BN_CTX_end
	add	esp, 4
; Line 475
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 476
	add	esp, 80					; 00000050H
	ret	0
_BN_div	ENDP
_TEXT	ENDS
END
