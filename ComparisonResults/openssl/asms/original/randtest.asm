; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rand\randtest.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	??_C@_0DI@OJDJKLBG@init?5failed?0?5the?5rand?5method?5is?5@ ; `string'
PUBLIC	??_C@_0BG@MCHFEKEE@test?51?5failed?0?5X?$DN?$CFlu?6?$AA@ ; `string'
PUBLIC	??_C@_0N@EBHDIBBK@test?51?5done?6?$AA@		; `string'
PUBLIC	??_C@_0BM@HOPNCAAM@test?52?5failed?0?5X?$DN?$CFld?4?$CF02ld?6?$AA@ ; `string'
PUBLIC	??_C@_0N@MPPMIGPJ@test?52?5done?6?$AA@		; `string'
PUBLIC	??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@ ; `string'
PUBLIC	??_C@_0N@DFGIGGH@test?53?5done?6?$AA@		; `string'
PUBLIC	??_C@_0CG@NBIBDJNB@test?54?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@ ; `string'
PUBLIC	??_C@_0N@JJDIPHO@test?54?5done?6?$AA@		; `string'
PUBLIC	___isa_available_default
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__exit:PROC
EXTRN	_RAND_pseudo_bytes:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___isa_available:DWORD
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ___isa_available_default
_BSS	SEGMENT
___isa_available_default DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0N@JJDIPHO@test?54?5done?6?$AA@
CONST	SEGMENT
??_C@_0N@JJDIPHO@test?54?5done?6?$AA@ DB 'test 4 done', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NBIBDJNB@test?54?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
CONST	SEGMENT
??_C@_0CG@NBIBDJNB@test?54?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@ DB 't'
	DB	'est 4 failed, bit=%d run=%d num=%lu', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFGIGGH@test?53?5done?6?$AA@
CONST	SEGMENT
??_C@_0N@DFGIGGH@test?53?5done?6?$AA@ DB 'test 3 done', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
CONST	SEGMENT
??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@ DB 't'
	DB	'est 3 failed, bit=%d run=%d num=%lu', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MPPMIGPJ@test?52?5done?6?$AA@
CONST	SEGMENT
??_C@_0N@MPPMIGPJ@test?52?5done?6?$AA@ DB 'test 2 done', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HOPNCAAM@test?52?5failed?0?5X?$DN?$CFld?4?$CF02ld?6?$AA@
CONST	SEGMENT
??_C@_0BM@HOPNCAAM@test?52?5failed?0?5X?$DN?$CFld?4?$CF02ld?6?$AA@ DB 'te'
	DB	'st 2 failed, X=%ld.%02ld', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBHDIBBK@test?51?5done?6?$AA@
CONST	SEGMENT
??_C@_0N@EBHDIBBK@test?51?5done?6?$AA@ DB 'test 1 done', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCHFEKEE@test?51?5failed?0?5X?$DN?$CFlu?6?$AA@
CONST	SEGMENT
??_C@_0BG@MCHFEKEE@test?51?5failed?0?5X?$DN?$CFlu?6?$AA@ DB 'test 1 faile'
	DB	'd, X=%lu', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OJDJKLBG@init?5failed?0?5the?5rand?5method?5is?5@
CONST	SEGMENT
??_C@_0DI@OJDJKLBG@init?5failed?0?5the?5rand?5method?5is?5@ DB 'init fail'
	DB	'ed, the rand method is not properly installed', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
tv1107 = -2844						; size = 4
_n2$ = -2840						; size = 64
_runs$ = -2776						; size = 272
_buf$ = -2504						; size = 2500
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rand\randtest.c
; Line 69
	mov	eax, 2844				; 00000b1cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+2844], eax
	push	edi
; Line 80
	lea	eax, DWORD PTR _buf$[esp+2848]
	xor	edi, edi
	push	2500					; 000009c4H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
; Line 81
	test	eax, eax
	jns	SHORT $LN20@main
; Line 82
	push	OFFSET ??_C@_0DI@OJDJKLBG@init?5failed?0?5the?5rand?5method?5is?5@
	call	_printf
; Line 83
	mov	edi, 1
; Line 84
	jmp	$LN90@main
$LN20@main:
	push	ebx
	xorps	xmm0, xmm0
	push	ebp
; Line 87
	xor	ebp, ebp
; Line 90
	xor	eax, eax
	push	esi
	movups	XMMWORD PTR _n2$[esp+2860], xmm0
	movups	XMMWORD PTR _n2$[esp+2876], xmm0
	movups	XMMWORD PTR _n2$[esp+2892], xmm0
	movups	XMMWORD PTR _n2$[esp+2908], xmm0
	npad	10
$LL62@main:
; Line 91
	mov	DWORD PTR _runs$[esp+eax*4+2996], edi
	mov	DWORD PTR _runs$[esp+eax*4+2860], edi
	inc	eax
	cmp	eax, 34					; 00000022H
	jl	SHORT $LL62@main
; Line 94
	xor	esi, esi
; Line 95
	xor	eax, eax
; Line 96
	xor	edi, edi
	npad	9
$LL10@main:
; Line 97
	movzx	ebx, BYTE PTR _buf$[esp+edi+2860]
; Line 99
	mov	ecx, ebx
	and	ecx, 15					; 0000000fH
	inc	DWORD PTR _n2$[esp+ecx*4+2860]
; Line 100
	mov	ecx, ebx
	sar	ecx, 4
	and	ecx, 15					; 0000000fH
	inc	DWORD PTR _n2$[esp+ecx*4+2860]
	mov	ecx, 8
	mov	DWORD PTR tv1107[esp+2860], ecx
$LL13@main:
; Line 103
	mov	edx, ebx
	and	edx, 1
; Line 104
	cmp	edx, esi
	jne	SHORT $LN21@main
; Line 105
	inc	eax
	jmp	SHORT $LN22@main
$LN21@main:
; Line 107
	cmp	eax, 34					; 00000022H
	jle	SHORT $LN23@main
; Line 108
	mov	eax, 34					; 00000022H
; Line 109
	jmp	SHORT $LN85@main
$LN23@main:
	test	eax, eax
	je	SHORT $LN25@main
$LN85@main:
; Line 110
	mov	ecx, esi
	shl	ecx, 4
	add	ecx, esi
	lea	ecx, DWORD PTR [eax+ecx*2]
	inc	DWORD PTR _runs$[esp+ecx*4+2856]
	mov	ecx, DWORD PTR tv1107[esp+2860]
; Line 111
	cmp	eax, 6
	jle	SHORT $LN25@main
; Line 112
	mov	eax, esi
	shl	eax, 4
	add	eax, esi
	inc	DWORD PTR _runs$[esp+eax*8+2880]
$LN25@main:
; Line 114
	mov	esi, edx
; Line 115
	mov	eax, 1
$LN22@main:
; Line 118
	test	edx, edx
	je	SHORT $LN26@main
; Line 119
	inc	ebp
$LN26@main:
; Line 120
	sar	ebx, 1
	sub	ecx, 1
	mov	DWORD PTR tv1107[esp+2860], ecx
	jne	SHORT $LL13@main
; Line 96
	inc	edi
	cmp	edi, 2500				; 000009c4H
	jl	$LL10@main
; Line 123
	cmp	eax, 34					; 00000022H
	jle	SHORT $LN27@main
; Line 124
	mov	eax, 34					; 00000022H
; Line 125
	jmp	SHORT $LN86@main
$LN27@main:
	test	eax, eax
	je	SHORT $LN28@main
$LN86@main:
; Line 126
	mov	ecx, esi
	shl	ecx, 4
	add	ecx, esi
	lea	eax, DWORD PTR [eax+ecx*2]
	inc	DWORD PTR _runs$[esp+eax*4+2856]
$LN28@main:
; Line 129
	mov	edi, 0
	cmp	ebp, 9654				; 000025b6H
	jbe	SHORT $LN30@main
	cmp	ebp, 10346				; 0000286aH
	jb	SHORT $LN29@main
$LN30@main:
; Line 130
	push	ebp
	push	OFFSET ??_C@_0BG@MCHFEKEE@test?51?5failed?0?5X?$DN?$CFlu?6?$AA@
	call	_printf
	add	esp, 8
; Line 131
	mov	edi, 1
$LN29@main:
; Line 133
	push	OFFSET ??_C@_0N@EBHDIBBK@test?51?5done?6?$AA@
	call	_printf
	add	esp, 4
; Line 146
	xor	ebx, ebx
; Line 147
	xor	ecx, ecx
	cmp	DWORD PTR ___isa_available, 2
	jl	SHORT $LN65@main
	xorps	xmm2, xmm2
	lea	eax, DWORD PTR _n2$[esp+2876]
	movaps	xmm1, xmm2
	lea	edx, DWORD PTR [ebx+2]
	lea	ecx, DWORD PTR [ebx+16]
	npad	8
$LL16@main:
	lea	eax, DWORD PTR [eax+32]
; Line 148
	movups	xmm0, XMMWORD PTR [eax-48]
	pmulld	xmm0, xmm0
	paddd	xmm2, xmm0
	movups	xmm0, XMMWORD PTR [eax-32]
	pmulld	xmm0, xmm0
	paddd	xmm1, xmm0
	sub	edx, 1
	jne	SHORT $LL16@main
	paddd	xmm1, xmm2
	movaps	xmm0, xmm1
	psrldq	xmm0, 8
	paddd	xmm1, xmm0
	movaps	xmm0, xmm1
	psrldq	xmm0, 4
	paddd	xmm1, xmm0
	movd	ebx, xmm1
$LN65@main:
	xor	edx, edx
	xor	esi, esi
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN74@main
	mov	eax, 16					; 00000010H
	sub	eax, ecx
; Line 147
	cmp	eax, 2
	jl	SHORT $LC75@main
$LL77@main:
; Line 148
	mov	eax, DWORD PTR _n2$[esp+ecx*4+2860]
	imul	eax, eax
	add	edx, eax
	mov	eax, DWORD PTR _n2$[esp+ecx*4+2864]
	imul	eax, eax
	add	ecx, 2
	add	esi, eax
	cmp	ecx, 15					; 0000000fH
	jl	SHORT $LL77@main
$LC75@main:
; Line 147
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN76@main
; Line 148
	mov	eax, DWORD PTR _n2$[esp+ecx*4+2860]
	imul	eax, eax
	add	ebx, eax
$LN76@main:
	lea	eax, DWORD PTR [esi+edx]
	add	ebx, eax
$LN74@main:
; Line 149
	lea	ecx, DWORD PTR [ebx*8]
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 3
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, -500000				; fff85ee0H
	add	esi, edx
; Line 150
	cmp	esi, 103				; 00000067H
	jle	SHORT $LN32@main
	cmp	esi, 5740				; 0000166cH
	jl	SHORT $LN31@main
$LN32@main:
; Line 151
	mov	eax, 1374389535				; 51eb851fH
	imul	esi
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	imul	eax, ecx, 100
	sub	esi, eax
	push	esi
	push	ecx
	push	OFFSET ??_C@_0BM@HOPNCAAM@test?52?5failed?0?5X?$DN?$CFld?4?$CF02ld?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 152
	inc	edi
$LN31@main:
; Line 154
	push	OFFSET ??_C@_0N@MPPMIGPJ@test?52?5done?6?$AA@
	call	_printf
	add	esp, 4
	lea	ebx, DWORD PTR _runs$[esp+2864]
; Line 157
	xor	esi, esi
	npad	8
$LL19@main:
; Line 158
	mov	eax, DWORD PTR [ebx-4]
	cmp	eax, 2267				; 000008dbH
	jbe	SHORT $LN34@main
	cmp	eax, 2733				; 00000aadH
	jb	SHORT $LN33@main
$LN34@main:
; Line 159
	push	eax
	push	1
	push	esi
	push	OFFSET ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 161
	inc	edi
$LN33@main:
; Line 163
	mov	eax, DWORD PTR [ebx]
	cmp	eax, 1079				; 00000437H
	jbe	SHORT $LN36@main
	cmp	eax, 1421				; 0000058dH
	jb	SHORT $LN35@main
$LN36@main:
; Line 164
	push	eax
	push	2
	push	esi
	push	OFFSET ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 166
	inc	edi
$LN35@main:
; Line 168
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, 502				; 000001f6H
	jbe	SHORT $LN38@main
	cmp	eax, 748				; 000002ecH
	jb	SHORT $LN37@main
$LN38@main:
; Line 169
	push	eax
	push	3
	push	esi
	push	OFFSET ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 171
	inc	edi
$LN37@main:
; Line 173
	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, 223				; 000000dfH
	jbe	SHORT $LN40@main
	cmp	eax, 402				; 00000192H
	jb	SHORT $LN39@main
$LN40@main:
; Line 174
	push	eax
	push	4
	push	esi
	push	OFFSET ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 176
	inc	edi
$LN39@main:
; Line 178
	mov	eax, DWORD PTR [ebx+12]
	cmp	eax, 90					; 0000005aH
	jbe	SHORT $LN42@main
	cmp	eax, 223				; 000000dfH
	jb	SHORT $LN41@main
$LN42@main:
; Line 179
	push	eax
	push	5
	push	esi
	push	OFFSET ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 181
	inc	edi
$LN41@main:
; Line 183
	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, 90					; 0000005aH
	jbe	SHORT $LN44@main
	cmp	eax, 223				; 000000dfH
	jb	SHORT $LN17@main
$LN44@main:
; Line 184
	push	eax
	push	6
	push	esi
	push	OFFSET ??_C@_0CG@FBFMMLAI@test?53?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 186
	inc	edi
$LN17@main:
; Line 157
	inc	esi
	add	ebx, 136				; 00000088H
	cmp	esi, 2
	jl	$LL19@main
; Line 189
	push	OFFSET ??_C@_0N@DFGIGGH@test?53?5done?6?$AA@
	call	_printf
; Line 192
	mov	eax, DWORD PTR _runs$[esp+2996]
	add	esp, 4
	pop	esi
	pop	ebp
	pop	ebx
	test	eax, eax
	je	SHORT $LN45@main
; Line 193
	push	eax
	push	34					; 00000022H
	push	0
	push	OFFSET ??_C@_0CG@NBIBDJNB@test?54?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 194
	inc	edi
$LN45@main:
; Line 196
	mov	eax, DWORD PTR _runs$[esp+3116]
	test	eax, eax
	je	SHORT $LN46@main
; Line 197
	push	eax
	push	34					; 00000022H
	push	1
	push	OFFSET ??_C@_0CG@NBIBDJNB@test?54?5failed?0?5bit?$DN?$CFd?5run?$DN?$CFd?5num@
	call	_printf
	add	esp, 16					; 00000010H
; Line 198
	inc	edi
$LN46@main:
; Line 200
	push	OFFSET ??_C@_0N@JJDIPHO@test?54?5done?6?$AA@
	call	_printf
$LN90@main:
	add	esp, 4
$err$92:
; Line 202
	xor	eax, eax
	test	edi, edi
	setne	al
; Line 207
	push	eax
	call	DWORD PTR __imp__exit
	pop	edi
$LN91@main:
$LN89@main:
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 950
	push	esi
; Line 954
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
; Line 639
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	pop	esi
; Line 957
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
