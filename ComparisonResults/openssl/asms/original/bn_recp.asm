; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_reciprocal
PUBLIC	_BN_RECP_CTX_init
PUBLIC	_BN_RECP_CTX_new
PUBLIC	_BN_RECP_CTX_free
PUBLIC	_BN_RECP_CTX_set
PUBLIC	_BN_mod_mul_reciprocal
PUBLIC	_BN_div_recp
PUBLIC	??_C@_0BG@KPFPNIIP@?4?2crypto?2bn?2bn_recp?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_init:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_usub:PROC
EXTRN	_BN_mul:PROC
EXTRN	_BN_sqr:PROC
EXTRN	_BN_div:PROC
EXTRN	_BN_add_word:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_rshift:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_BN_set_bit:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BG@KPFPNIIP@?4?2crypto?2bn?2bn_recp?4c?$AA@
CONST	SEGMENT
??_C@_0BG@KPFPNIIP@?4?2crypto?2bn?2bn_recp?4c?$AA@ DB '.\crypto\bn\bn_rec'
	DB	'p.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_div_recp
_TEXT	SEGMENT
_b$1$ = -12						; size = 4
_a$1$ = -8						; size = 4
_ret$1$ = -4						; size = 4
_j$2$ = 8						; size = 4
_i$2$ = 8						; size = 4
_dv$ = 8						; size = 4
_rem$ = 12						; size = 4
_m$ = 16						; size = 4
_recp$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_div_recp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 136
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebx
; Line 140
	mov	ebx, DWORD PTR _ctx$[esp+12]
	push	ebp
	push	esi
	push	edi
	push	ebx
	mov	DWORD PTR _ret$1$[esp+32], 0
	call	_BN_CTX_start
; Line 141
	push	ebx
	call	_BN_CTX_get
; Line 142
	push	ebx
	mov	DWORD PTR _a$1$[esp+40], eax
	call	_BN_CTX_get
; Line 143
	mov	ebp, DWORD PTR _dv$[esp+36]
	add	esp, 12					; 0000000cH
	mov	edi, eax
	mov	DWORD PTR _b$1$[esp+28], edi
	test	ebp, ebp
	jne	SHORT $LN5@BN_div_rec
; Line 146
	push	ebx
	call	_BN_CTX_get
	add	esp, 4
	mov	ebp, eax
$LN5@BN_div_rec:
; Line 147
	mov	esi, DWORD PTR _rem$[esp+24]
	test	esi, esi
	jne	SHORT $LN7@BN_div_rec
; Line 150
	push	ebx
	call	_BN_CTX_get
	add	esp, 4
	mov	esi, eax
$LN7@BN_div_rec:
; Line 151
	cmp	DWORD PTR _a$1$[esp+28], 0
	je	$err$34
	test	edi, edi
	je	$err$34
	test	ebp, ebp
	je	$err$34
	test	esi, esi
	je	$err$34
; Line 154
	mov	edi, DWORD PTR _recp$[esp+24]
	push	edi
	push	DWORD PTR _m$[esp+28]
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN10@BN_div_rec
; Line 155
	push	0
	push	ebp
	call	_BN_set_word
; Line 156
	push	DWORD PTR _m$[esp+32]
	push	esi
	call	_BN_copy
	add	esp, 16					; 00000010H
; Line 157
	push	ebx
	test	eax, eax
	jne	SHORT $LN11@BN_div_rec
	call	_BN_CTX_end
	add	esp, 4
; Line 158
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN11@BN_div_rec:
; Line 160
	call	_BN_CTX_end
; Line 220
	add	esp, 4
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN10@BN_div_rec:
; Line 170
	push	DWORD PTR _m$[esp+24]
	call	_BN_num_bits
	mov	ecx, eax
	add	esp, 4
; Line 171
	mov	eax, DWORD PTR [edi+40]
	add	eax, eax
; Line 172
	cmp	eax, ecx
	cmovg	ecx, eax
	mov	DWORD PTR _i$2$[esp+24], ecx
; Line 176
	cmp	ecx, DWORD PTR [edi+44]
	je	SHORT $LN13@BN_div_rec
; Line 177
	push	ebx
	push	ecx
	lea	eax, DWORD PTR [edi+20]
	push	edi
	push	eax
	call	_BN_reciprocal
	add	esp, 16					; 00000010H
	mov	DWORD PTR [edi+44], eax
$LN13@BN_div_rec:
; Line 179
	cmp	DWORD PTR [edi+44], -1
	je	$err$34
; Line 188
	push	DWORD PTR [edi+40]
	push	DWORD PTR _m$[esp+28]
	push	DWORD PTR _a$1$[esp+36]
	call	_BN_rshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$34
; Line 190
	push	ebx
	lea	eax, DWORD PTR [edi+20]
	push	eax
	push	DWORD PTR _a$1$[esp+36]
	push	DWORD PTR _b$1$[esp+40]
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$34
; Line 192
	mov	eax, DWORD PTR _i$2$[esp+24]
	sub	eax, DWORD PTR [edi+40]
	push	eax
	push	DWORD PTR _b$1$[esp+32]
	push	ebp
	call	_BN_rshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$34
; Line 196
	push	ebx
	push	ebp
	push	edi
	push	DWORD PTR _b$1$[esp+40]
	mov	DWORD PTR [ebp+12], 0
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$34
; Line 198
	push	DWORD PTR _b$1$[esp+28]
	push	DWORD PTR _m$[esp+28]
	push	esi
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$34
; Line 204
	push	edi
	push	esi
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR _j$2$[esp+32], 0
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN3@BN_div_rec
	npad	2
$LL2@BN_div_rec:
; Line 205
	mov	ecx, DWORD PTR _j$2$[esp+24]
	mov	eax, ecx
	inc	ecx
	mov	DWORD PTR _j$2$[esp+24], ecx
	cmp	eax, 2
	jg	SHORT $LN27@BN_div_rec
; Line 209
	push	edi
	push	esi
	push	esi
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$34
; Line 211
	push	1
	push	ebp
	call	_BN_add_word
	add	esp, 8
	test	eax, eax
	je	SHORT $err$34
; Line 204
	push	edi
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LL2@BN_div_rec
$LN3@BN_div_rec:
; Line 216
	cmp	DWORD PTR [esi+4], 0
	mov	eax, DWORD PTR _m$[esp+24]
	jne	SHORT $LN24@BN_div_rec
	xor	ecx, ecx
	jmp	SHORT $LN25@BN_div_rec
$LN27@BN_div_rec:
; Line 206
	push	206					; 000000ceH
	push	OFFSET ??_C@_0BG@KPFPNIIP@?4?2crypto?2bn?2bn_recp?4c?$AA@
	push	101					; 00000065H
	push	130					; 00000082H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 220
	push	ebx
	call	_BN_CTX_end
; Line 223
	mov	eax, DWORD PTR _ret$1$[esp+32]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
$LN24@BN_div_rec:
; Line 216
	mov	ecx, DWORD PTR [eax+12]
$LN25@BN_div_rec:
	mov	DWORD PTR [esi+12], ecx
; Line 217
	mov	eax, DWORD PTR [eax+12]
	xor	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [ebp+12], eax
; Line 218
	mov	DWORD PTR _ret$1$[esp+28], 1
$err$34:
; Line 220
	push	ebx
	call	_BN_CTX_end
; Line 223
	mov	eax, DWORD PTR _ret$1$[esp+32]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 224
	add	esp, 12					; 0000000cH
	ret	0
_BN_div_recp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_mul_reciprocal
_TEXT	SEGMENT
_r$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_recp$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_mod_mul_reciprocal PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 107
	push	ebx
	push	esi
; Line 112
	mov	esi, DWORD PTR _ctx$[esp+4]
	xor	ebx, ebx
	push	edi
	push	esi
	call	_BN_CTX_start
; Line 113
	push	esi
	call	_BN_CTX_get
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $err$11
; Line 115
	mov	eax, DWORD PTR _y$[esp+8]
	test	eax, eax
	je	SHORT $LN3@BN_mod_mul
; Line 116
	mov	ecx, DWORD PTR _x$[esp+8]
; Line 117
	push	esi
	cmp	ecx, eax
	jne	SHORT $LN5@BN_mod_mul
	push	ecx
	push	edi
	call	_BN_sqr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$11
; Line 119
	jmp	SHORT $LN4@BN_mod_mul
$LN5@BN_mod_mul:
; Line 120
	push	eax
	push	ecx
	push	edi
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$11
; Line 124
	jmp	SHORT $LN4@BN_mod_mul
$LN3@BN_mod_mul:
; Line 125
	mov	edi, DWORD PTR _x$[esp+8]
$LN4@BN_mod_mul:
; Line 127
	push	esi
	push	DWORD PTR _recp$[esp+12]
	push	edi
	push	DWORD PTR _r$[esp+20]
	push	0
	call	_BN_div_recp
	add	esp, 20					; 00000014H
	mov	ebx, eax
$err$11:
; Line 129
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 131
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 132
	ret	0
_BN_mod_mul_reciprocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_RECP_CTX_set
_TEXT	SEGMENT
_recp$ = 8						; size = 4
_d$ = 12						; size = 4
_ctx$ = 16						; size = 4
_BN_RECP_CTX_set PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 96
	push	esi
; Line 97
	push	DWORD PTR _d$[esp]
	mov	esi, DWORD PTR _recp$[esp+4]
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@BN_RECP_CT
	pop	esi
; Line 103
	ret	0
$LN2@BN_RECP_CT:
; Line 99
	lea	eax, DWORD PTR [esi+20]
	push	0
	push	eax
	call	_BN_set_word
; Line 100
	push	DWORD PTR _d$[esp+8]
	call	_BN_num_bits
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+40], eax
; Line 101
	mov	DWORD PTR [esi+44], 0
; Line 102
	mov	eax, 1
	pop	esi
; Line 103
	ret	0
_BN_RECP_CTX_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_RECP_CTX_free
_TEXT	SEGMENT
_recp$ = 8						; size = 4
_BN_RECP_CTX_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 85
	push	esi
; Line 86
	mov	esi, DWORD PTR _recp$[esp]
	test	esi, esi
	je	SHORT $LN3@BN_RECP_CT
; Line 89
	push	esi
	call	_BN_free
; Line 90
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_BN_free
	add	esp, 8
; Line 91
	test	BYTE PTR [esi+48], 1
	je	SHORT $LN3@BN_RECP_CT
; Line 92
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN3@BN_RECP_CT:
	pop	esi
; Line 93
	ret	0
_BN_RECP_CTX_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_RECP_CTX_new
_TEXT	SEGMENT
_BN_RECP_CTX_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 73
	push	esi
; Line 76
	push	76					; 0000004cH
	push	OFFSET ??_C@_0BG@KPFPNIIP@?4?2crypto?2bn?2bn_recp?4c?$AA@
	push	52					; 00000034H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN2@BN_RECP_CT
	pop	esi
; Line 82
	ret	0
$LN2@BN_RECP_CT:
; Line 65
	push	esi
	call	_BN_init
; Line 66
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_BN_init
	add	esp, 8
; Line 67
	mov	DWORD PTR [esi+40], 0
; Line 68
	mov	DWORD PTR [esi+44], 0
; Line 81
	mov	eax, esi
	mov	DWORD PTR [esi+48], 1
	pop	esi
; Line 82
	ret	0
_BN_RECP_CTX_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_RECP_CTX_init
_TEXT	SEGMENT
_recp$ = 8						; size = 4
_BN_RECP_CTX_init PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 64
	push	esi
; Line 65
	mov	esi, DWORD PTR _recp$[esp]
	push	esi
	call	_BN_init
; Line 66
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_BN_init
	add	esp, 8
; Line 67
	mov	DWORD PTR [esi+40], 0
; Line 68
	mov	DWORD PTR [esi+44], 0
; Line 69
	mov	DWORD PTR [esi+48], 0
	pop	esi
; Line 70
	ret	0
_BN_RECP_CTX_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_reciprocal
_TEXT	SEGMENT
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_len$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_reciprocal PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_recp.c
; Line 233
	push	ebx
	push	esi
; Line 237
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	push	esi
	or	edi, -1
	call	_BN_CTX_start
; Line 238
	push	esi
	call	_BN_CTX_get
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	je	SHORT $err$7
; Line 241
	push	DWORD PTR _len$[esp+8]
	push	ebx
	call	_BN_set_bit
	add	esp, 8
	test	eax, eax
	je	SHORT $err$7
; Line 244
	push	esi
	push	DWORD PTR _m$[esp+12]
	push	ebx
	push	0
	push	DWORD PTR _r$[esp+24]
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	cmovne	edi, DWORD PTR _len$[esp+8]
$err$7:
; Line 250
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 251
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 252
	ret	0
_BN_reciprocal ENDP
_TEXT	ENDS
END
