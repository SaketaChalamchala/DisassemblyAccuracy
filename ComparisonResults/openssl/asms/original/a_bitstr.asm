; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_i2c_ASN1_BIT_STRING
PUBLIC	_c2i_ASN1_BIT_STRING
PUBLIC	_ASN1_BIT_STRING_set
PUBLIC	_ASN1_BIT_STRING_set_bit
PUBLIC	_ASN1_BIT_STRING_get_bit
PUBLIC	_ASN1_BIT_STRING_check
PUBLIC	??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_CRYPTO_realloc_clean:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ASN1_STRING_free:PROC
EXTRN	_ASN1_STRING_type_new:PROC
EXTRN	_ASN1_STRING_set:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@ DB '.\crypto\asn1\a'
	DB	'_bitstr.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_check
_TEXT	SEGMENT
_a$ = 8							; size = 4
_flags$ = 12						; size = 4
_flags_len$ = 16					; size = 4
_ASN1_BIT_STRING_check PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
; Line 249
	mov	edx, DWORD PTR _a$[esp-4]
	push	esi
	test	edx, edx
	je	SHORT $LN6@ASN1_BIT_S
	mov	esi, DWORD PTR [edx+8]
	test	esi, esi
	je	SHORT $LN6@ASN1_BIT_S
; Line 256
	push	edi
	mov	edi, DWORD PTR [edx]
	xor	eax, eax
	mov	ecx, 1
	test	edi, edi
	jle	SHORT $LN14@ASN1_BIT_S
	mov	edx, DWORD PTR _flags_len$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR _flags$[esp+8]
$LL4@ASN1_BIT_S:
	test	ecx, ecx
	je	SHORT $LN15@ASN1_BIT_S
; Line 257
	cmp	eax, edx
	jge	SHORT $LN8@ASN1_BIT_S
	mov	cl, BYTE PTR [eax+ebx]
	not	cl
	jmp	SHORT $LN9@ASN1_BIT_S
$LN8@ASN1_BIT_S:
	or	cl, 255					; 000000ffH
$LN9@ASN1_BIT_S:
; Line 259
	test	BYTE PTR [esi+eax], cl
	mov	ecx, 0
	sete	cl
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL4@ASN1_BIT_S
$LN15@ASN1_BIT_S:
	pop	ebx
$LN14@ASN1_BIT_S:
	pop	edi
; Line 261
	mov	eax, ecx
	pop	esi
; Line 262
	ret	0
$LN6@ASN1_BIT_S:
; Line 250
	mov	eax, 1
	pop	esi
; Line 262
	ret	0
_ASN1_BIT_STRING_check ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_get_bit
_TEXT	SEGMENT
_a$ = 8							; size = 4
_n$ = 12						; size = 4
_ASN1_BIT_STRING_get_bit PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
; Line 228
	push	esi
	push	edi
; Line 231
	mov	edi, DWORD PTR _n$[esp+4]
	mov	eax, edi
	cdq
	and	edx, 7
	lea	esi, DWORD PTR [edx+eax]
; Line 233
	mov	edx, DWORD PTR _a$[esp+4]
	sar	esi, 3
	test	edx, edx
	je	SHORT $LN3@ASN1_BIT_S
	lea	ecx, DWORD PTR [esi+1]
	cmp	DWORD PTR [edx], ecx
	jl	SHORT $LN3@ASN1_BIT_S
	mov	edx, DWORD PTR [edx+8]
	test	edx, edx
	je	SHORT $LN3@ASN1_BIT_S
; Line 232
	and	edi, 7
	mov	ecx, 7
	sub	ecx, edi
	mov	eax, 1
	shl	eax, cl
; Line 235
	test	al, BYTE PTR [edx+esi]
	mov	eax, 0
	pop	edi
	setne	al
	pop	esi
; Line 236
	ret	0
$LN3@ASN1_BIT_S:
	pop	edi
; Line 234
	xor	eax, eax
	pop	esi
; Line 236
	ret	0
_ASN1_BIT_STRING_get_bit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_set_bit
_TEXT	SEGMENT
_a$ = 8							; size = 4
_w$1$ = 12						; size = 4
_n$ = 12						; size = 4
_v$2$ = 16						; size = 4
_value$ = 16						; size = 4
_ASN1_BIT_STRING_set_bit PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
; Line 189
	push	ebx
	push	esi
; Line 193
	mov	esi, DWORD PTR _n$[esp+4]
; Line 194
	mov	ecx, 7
	mov	eax, esi
	and	esi, 7
	cdq
	sub	ecx, esi
; Line 199
	mov	esi, DWORD PTR _a$[esp+4]
	and	edx, 7
	add	edx, eax
	mov	eax, 1
	shl	eax, cl
	xor	ecx, ecx
	sar	edx, 3
	mov	ebx, eax
	push	edi
	mov	edi, DWORD PTR _value$[esp+8]
	not	ebx
	test	edi, edi
	mov	DWORD PTR _w$1$[esp+8], edx
	cmove	eax, ecx
	mov	DWORD PTR _v$2$[esp+8], eax
	test	esi, esi
	jne	SHORT $LN5@ASN1_BIT_S
; Line 200
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 225
	ret	0
$LN5@ASN1_BIT_S:
; Line 202
	and	DWORD PTR [esi+12], -16			; fffffff0H
; Line 204
	mov	ecx, DWORD PTR [esi]
	push	ebp
	lea	ebp, DWORD PTR [edx+1]
	cmp	ecx, ebp
	jl	SHORT $LN7@ASN1_BIT_S
	cmp	DWORD PTR [esi+8], 0
	jne	$LN6@ASN1_BIT_S
$LN7@ASN1_BIT_S:
; Line 205
	test	edi, edi
	je	$LN18@ASN1_BIT_S
; Line 207
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $LN9@ASN1_BIT_S
; Line 208
	push	208					; 000000d0H
	push	OFFSET ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN20@ASN1_BIT_S
$LN9@ASN1_BIT_S:
; Line 210
	push	211					; 000000d3H
	push	OFFSET ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
	push	ebp
	push	ecx
	push	eax
	call	_CRYPTO_realloc_clean
	add	esp, 20					; 00000014H
$LN20@ASN1_BIT_S:
	mov	edi, eax
; Line 212
	test	edi, edi
	jne	SHORT $LN11@ASN1_BIT_S
; Line 213
	push	213					; 000000d5H
	push	OFFSET ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
	push	65					; 00000041H
	push	183					; 000000b7H
	push	13					; 0000000dH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 214
	xor	eax, eax
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 225
	ret	0
$LN11@ASN1_BIT_S:
; Line 216
	mov	edx, DWORD PTR _w$1$[esp+12]
	mov	eax, edx
	mov	ecx, DWORD PTR [esi]
	sub	eax, ecx
	inc	eax
	test	eax, eax
	jle	SHORT $LN12@ASN1_BIT_S
; Line 217
	push	eax
	lea	eax, DWORD PTR [ecx+edi]
	push	0
	push	eax
	call	_memset
	mov	edx, DWORD PTR _w$1$[esp+24]
	add	esp, 12					; 0000000cH
$LN12@ASN1_BIT_S:
; Line 218
	mov	DWORD PTR [esi+8], edi
; Line 219
	mov	DWORD PTR [esi], ebp
$LN6@ASN1_BIT_S:
; Line 221
	mov	eax, DWORD PTR [esi+8]
	and	bl, BYTE PTR [eax+edx]
	or	bl, BYTE PTR _v$2$[esp+12]
	mov	BYTE PTR [eax+edx], bl
; Line 222
	cmp	DWORD PTR [esi], 0
	jle	SHORT $LN18@ASN1_BIT_S
	mov	ecx, DWORD PTR [esi+8]
	npad	3
$LL2@ASN1_BIT_S:
	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [ecx+eax-1], 0
	jne	SHORT $LN18@ASN1_BIT_S
; Line 223
	dec	eax
	mov	DWORD PTR [esi], eax
	test	eax, eax
	jg	SHORT $LL2@ASN1_BIT_S
$LN18@ASN1_BIT_S:
	pop	ebp
	pop	edi
	pop	esi
; Line 224
	mov	eax, 1
	pop	ebx
; Line 225
	ret	0
_ASN1_BIT_STRING_set_bit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_set
_TEXT	SEGMENT
_x$ = 8							; size = 4
_d$ = 12						; size = 4
_len$ = 16						; size = 4
_ASN1_BIT_STRING_set PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
; Line 65
	jmp	_ASN1_STRING_set
_ASN1_BIT_STRING_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _c2i_ASN1_BIT_STRING
_TEXT	SEGMENT
_i$2$ = -4						; size = 4
_a$ = 8							; size = 4
_pp$ = 12						; size = 4
_s$1$ = 16						; size = 4
_len$ = 16						; size = 4
_c2i_ASN1_BIT_STRING PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
; Line 127
	mov	eax, 4
	call	__chkstk
	push	ebx
; Line 133
	mov	ebx, DWORD PTR _len$[esp+4]
	push	ebp
	push	esi
	xor	esi, esi
	push	edi
	mov	edi, DWORD PTR _a$[esp+16]
	cmp	ebx, 1
	jge	SHORT $LN2@c2i_ASN1_B
; Line 134
	mov	eax, 152				; 00000098H
; Line 135
	jmp	SHORT $err$17
$LN2@c2i_ASN1_B:
; Line 138
	test	edi, edi
	je	SHORT $LN5@c2i_ASN1_B
	mov	esi, DWORD PTR [edi]
	test	esi, esi
	jne	SHORT $LN6@c2i_ASN1_B
$LN5@c2i_ASN1_B:
; Line 139
	push	3
	call	_ASN1_STRING_type_new
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	$LN13@c2i_ASN1_B
$LN6@c2i_ASN1_B:
; Line 144
	mov	ebp, DWORD PTR _pp$[esp+16]
	mov	ebp, DWORD PTR [ebp]
; Line 145
	movzx	ecx, BYTE PTR [ebp]
	inc	ebp
	mov	DWORD PTR _i$2$[esp+20], ecx
; Line 146
	cmp	ecx, 7
	jle	SHORT $LN7@c2i_ASN1_B
; Line 147
	mov	eax, 220				; 000000dcH
; Line 148
	jmp	SHORT $err$17
$LN7@c2i_ASN1_B:
; Line 154
	mov	eax, DWORD PTR [esi+12]
	and	eax, -8					; fffffff8H
; Line 155
	or	eax, ecx
	or	eax, 8
	mov	DWORD PTR [esi+12], eax
; Line 157
	mov	eax, ebx
	dec	ebx
	cmp	eax, 1
	jle	SHORT $LN8@c2i_ASN1_B
; Line 158
	push	158					; 0000009eH
	push	OFFSET ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$1$[esp+16], eax
; Line 159
	test	eax, eax
	jne	SHORT $LN10@c2i_ASN1_B
; Line 160
	mov	eax, 65					; 00000041H
$err$17:
; Line 179
	push	179					; 000000b3H
	push	OFFSET ??_C@_0BJ@NBKGKDKG@?4?2crypto?2asn1?2a_bitstr?4c?$AA@
	push	eax
	push	189					; 000000bdH
	push	13					; 0000000dH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 180
	test	esi, esi
	je	SHORT $LN13@c2i_ASN1_B
	test	edi, edi
	je	SHORT $LN14@c2i_ASN1_B
	cmp	DWORD PTR [edi], esi
	je	SHORT $LN13@c2i_ASN1_B
$LN14@c2i_ASN1_B:
; Line 181
	push	esi
	call	_ASN1_STRING_free
	add	esp, 4
$LN13@c2i_ASN1_B:
; Line 182
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 183
	pop	ecx
	ret	0
$LN10@c2i_ASN1_B:
; Line 163
	push	ebx
	push	ebp
	push	eax
	call	_memcpy
; Line 164
	mov	ecx, DWORD PTR _i$2$[esp+32]
	or	al, 255					; 000000ffH
	shl	al, cl
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$1$[esp+16]
	and	BYTE PTR [ecx+ebx-1], al
; Line 165
	add	ebp, ebx
; Line 166
	jmp	SHORT $LN9@c2i_ASN1_B
$LN8@c2i_ASN1_B:
; Line 167
	mov	DWORD PTR _s$1$[esp+16], 0
$LN9@c2i_ASN1_B:
; Line 170
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi], ebx
	test	eax, eax
	je	SHORT $LN11@c2i_ASN1_B
; Line 171
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN11@c2i_ASN1_B:
; Line 172
	mov	eax, DWORD PTR _s$1$[esp+16]
	mov	DWORD PTR [esi+8], eax
; Line 173
	mov	DWORD PTR [esi+4], 3
; Line 174
	test	edi, edi
	je	SHORT $LN12@c2i_ASN1_B
; Line 175
	mov	DWORD PTR [edi], esi
$LN12@c2i_ASN1_B:
; Line 176
	mov	eax, DWORD PTR _pp$[esp+16]
	pop	edi
	mov	DWORD PTR [eax], ebp
; Line 177
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 183
	pop	ecx
	ret	0
_c2i_ASN1_BIT_STRING ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _i2c_ASN1_BIT_STRING
_TEXT	SEGMENT
_a$ = 8							; size = 4
_pp$ = 12						; size = 4
_i2c_ASN1_BIT_STRING PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_bitstr.c
; Line 73
	mov	ecx, DWORD PTR _a$[esp-4]
	test	ecx, ecx
	jne	SHORT $LN5@i2c_ASN1_B
; Line 74
	xor	eax, eax
; Line 123
	ret	0
$LN5@i2c_ASN1_B:
	push	ebx
	push	esi
; Line 76
	mov	esi, DWORD PTR [ecx]
; Line 78
	test	esi, esi
	jle	SHORT $LN6@i2c_ASN1_B
; Line 79
	mov	ebx, DWORD PTR [ecx+12]
	test	bl, 8
	je	SHORT $LN8@i2c_ASN1_B
; Line 80
	and	ebx, 7
; Line 81
	jmp	SHORT $LN7@i2c_ASN1_B
$LN8@i2c_ASN1_B:
; Line 83
	mov	eax, DWORD PTR [ecx+8]
$LL4@i2c_ASN1_B:
	cmp	BYTE PTR [eax+esi-1], 0
	jne	SHORT $LN31@i2c_ASN1_B
; Line 82
	dec	esi
	test	esi, esi
	jg	SHORT $LL4@i2c_ASN1_B
$LN31@i2c_ASN1_B:
; Line 86
	movzx	eax, BYTE PTR [eax+esi-1]
; Line 87
	test	al, 1
	jne	SHORT $LN6@i2c_ASN1_B
; Line 89
	test	al, 2
	je	SHORT $LN13@i2c_ASN1_B
; Line 90
	mov	ebx, 1
	jmp	SHORT $LN7@i2c_ASN1_B
$LN13@i2c_ASN1_B:
; Line 91
	test	al, 4
	je	SHORT $LN15@i2c_ASN1_B
; Line 92
	mov	ebx, 2
	jmp	SHORT $LN7@i2c_ASN1_B
$LN15@i2c_ASN1_B:
; Line 93
	test	al, 8
	je	SHORT $LN17@i2c_ASN1_B
; Line 94
	mov	ebx, 3
	jmp	SHORT $LN7@i2c_ASN1_B
$LN17@i2c_ASN1_B:
; Line 95
	test	al, 16					; 00000010H
	je	SHORT $LN19@i2c_ASN1_B
; Line 96
	mov	ebx, 4
	jmp	SHORT $LN7@i2c_ASN1_B
$LN19@i2c_ASN1_B:
; Line 97
	test	al, 32					; 00000020H
	je	SHORT $LN21@i2c_ASN1_B
; Line 98
	mov	ebx, 5
	jmp	SHORT $LN7@i2c_ASN1_B
$LN21@i2c_ASN1_B:
; Line 99
	test	al, 64					; 00000040H
	je	SHORT $LN23@i2c_ASN1_B
; Line 100
	mov	ebx, 6
	jmp	SHORT $LN7@i2c_ASN1_B
$LN23@i2c_ASN1_B:
; Line 101
	and	al, -128				; ffffff80H
	movsx	ebx, al
	neg	ebx
	sbb	ebx, ebx
	and	ebx, 7
; Line 106
	jmp	SHORT $LN7@i2c_ASN1_B
$LN6@i2c_ASN1_B:
; Line 107
	xor	ebx, ebx
$LN7@i2c_ASN1_B:
	push	ebp
; Line 110
	mov	ebp, DWORD PTR _pp$[esp+8]
	lea	eax, DWORD PTR [esi+1]
	test	ebp, ebp
	je	SHORT $LN37@i2c_ASN1_B
; Line 113
	push	edi
	mov	edi, DWORD PTR [ebp]
; Line 117
	push	esi
	mov	BYTE PTR [edi], bl
	inc	edi
	push	DWORD PTR [ecx+8]
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 118
	add	edi, esi
; Line 119
	test	esi, esi
	jle	SHORT $LN28@i2c_ASN1_B
; Line 120
	or	al, 255					; 000000ffH
	mov	ecx, ebx
	shl	al, cl
	and	BYTE PTR [edi-1], al
$LN28@i2c_ASN1_B:
; Line 121
	mov	DWORD PTR [ebp], edi
; Line 122
	lea	eax, DWORD PTR [esi+1]
	pop	edi
$LN37@i2c_ASN1_B:
; Line 123
	pop	ebp
	pop	esi
	pop	ebx
	ret	0
_i2c_ASN1_BIT_STRING ENDP
_TEXT	ENDS
END
