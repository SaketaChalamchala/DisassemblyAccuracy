; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CMAC_CTX_new
PUBLIC	_CMAC_CTX_cleanup
PUBLIC	_CMAC_CTX_free
PUBLIC	_CMAC_CTX_get0_cipher_ctx
PUBLIC	_CMAC_CTX_copy
PUBLIC	_CMAC_Init
PUBLIC	_CMAC_Update
PUBLIC	_CMAC_Final
PUBLIC	_CMAC_resume
PUBLIC	??_C@_0BF@IFJHHLLE@?4?2crypto?2cmac?2cmac?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_EVP_CIPHER_CTX_cipher:PROC
EXTRN	_EVP_CIPHER_CTX_block_size:PROC
EXTRN	_EVP_CIPHER_CTX_copy:PROC
EXTRN	_EVP_Cipher:PROC
EXTRN	_EVP_EncryptInit_ex:PROC
EXTRN	_EVP_CIPHER_CTX_init:PROC
EXTRN	_EVP_CIPHER_CTX_cleanup:PROC
EXTRN	_EVP_CIPHER_CTX_set_key_length:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
_BSS	SEGMENT
?zero_iv@?1??CMAC_Init@@9@9 DB 020H DUP (?)		; `CMAC_Init'::`2'::zero_iv
_BSS	ENDS
;	COMDAT ??_C@_0BF@IFJHHLLE@?4?2crypto?2cmac?2cmac?4c?$AA@
CONST	SEGMENT
??_C@_0BF@IFJHHLLE@?4?2crypto?2cmac?2cmac?4c?$AA@ DB '.\crypto\cmac\cmac.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _make_kn
_TEXT	SEGMENT
_k1$ = 8						; size = 4
_l$ = 12						; size = 4
tv255 = 16						; size = 4
_bl$ = 16						; size = 4
_make_kn PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 82
	push	ebx
; Line 85
	mov	ebx, DWORD PTR _k1$[esp]
	xor	eax, eax
	push	esi
	mov	esi, DWORD PTR _bl$[esp+4]
	push	edi
	mov	edi, DWORD PTR _l$[esp+8]
	test	esi, esi
	jle	SHORT $LN3@make_kn
	push	ebp
	lea	ecx, DWORD PTR [esi-1]
	mov	ebp, edi
	mov	DWORD PTR tv255[esp+12], ecx
	sub	ebp, ebx
$LL10@make_kn:
; Line 86
	lea	edx, DWORD PTR [eax+ebx]
	mov	cl, BYTE PTR [edx+ebp]
	add	cl, cl
	mov	BYTE PTR [edx], cl
; Line 87
	cmp	eax, DWORD PTR tv255[esp+12]
	jge	SHORT $LN11@make_kn
	test	BYTE PTR [eax+edi+1], 128		; 00000080H
	je	SHORT $LN11@make_kn
; Line 88
	or	cl, 1
	mov	BYTE PTR [edx], cl
$LN11@make_kn:
; Line 85
	inc	eax
	cmp	eax, esi
	jl	SHORT $LL10@make_kn
	pop	ebp
$LN3@make_kn:
; Line 91
	test	BYTE PTR [edi], 128			; 00000080H
	je	SHORT $LN6@make_kn
; Line 92
	cmp	esi, 16					; 00000010H
	mov	eax, 27					; 0000001bH
	mov	ecx, 135				; 00000087H
	cmove	eax, ecx
	xor	BYTE PTR [ebx+esi-1], al
$LN6@make_kn:
; Line 93
	pop	edi
	pop	esi
	pop	ebx
	ret	0
_make_kn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_resume
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_CMAC_resume PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 296
	mov	ecx, DWORD PTR _ctx$[esp-4]
	cmp	DWORD PTR [ecx+268], -1
	jne	SHORT $LN2@CMAC_resum
; Line 297
	xor	eax, eax
; Line 306
	ret	0
$LN2@CMAC_resum:
; Line 305
	lea	eax, DWORD PTR [ecx+204]
	push	eax
	push	0
	push	0
	push	0
	push	ecx
	call	_EVP_EncryptInit_ex
	add	esp, 20					; 00000014H
; Line 306
	ret	0
_CMAC_resume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_Final
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_poutlen$ = 16						; size = 4
_CMAC_Final PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 263
	push	edi
; Line 269
	mov	edi, DWORD PTR _ctx$[esp]
	cmp	DWORD PTR [edi+268], -1
	jne	SHORT $LN8@CMAC_Final
; Line 270
	xor	eax, eax
	pop	edi
; Line 292
	ret	0
$LN8@CMAC_Final:
	push	ebp
	push	esi
; Line 271
	push	edi
	call	_EVP_CIPHER_CTX_block_size
; Line 272
	mov	ecx, DWORD PTR _poutlen$[esp+12]
	add	esp, 4
; Line 273
	mov	ebp, DWORD PTR _out$[esp+8]
	mov	esi, eax
	mov	DWORD PTR [ecx], esi
	test	ebp, ebp
	je	$LN13@CMAC_Final
; Line 275
	mov	ecx, DWORD PTR [edi+268]
	push	ebx
; Line 277
	cmp	ecx, esi
	jne	SHORT $LN10@CMAC_Final
; Line 278
	test	esi, esi
	jle	SHORT $LN6@CMAC_Final
	mov	edx, ebp
	lea	ecx, DWORD PTR [edi+140]
	mov	ebx, esi
	npad	6
$LL4@CMAC_Final:
; Line 279
	mov	al, BYTE PTR [ecx+96]
	lea	ecx, DWORD PTR [ecx+1]
	xor	al, BYTE PTR [ecx-1]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [edx-1], al
	sub	ebx, 1
	jne	SHORT $LL4@CMAC_Final
; Line 280
	jmp	SHORT $LN6@CMAC_Final
$LN10@CMAC_Final:
; Line 282
	sub	eax, ecx
	mov	BYTE PTR [ecx+edi+236], 128		; 00000080H
	cmp	eax, 1
	jle	SHORT $LN12@CMAC_Final
; Line 283
	dec	eax
	push	eax
	lea	eax, DWORD PTR [edi+237]
	add	eax, ecx
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN12@CMAC_Final:
; Line 284
	test	esi, esi
	jle	SHORT $LN6@CMAC_Final
	mov	edx, ebp
	lea	ecx, DWORD PTR [edi+172]
	mov	ebx, esi
	npad	8
$LL7@CMAC_Final:
; Line 285
	mov	al, BYTE PTR [ecx+64]
	lea	ecx, DWORD PTR [ecx+1]
	xor	al, BYTE PTR [ecx-1]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [edx-1], al
	sub	ebx, 1
	jne	SHORT $LL7@CMAC_Final
$LN6@CMAC_Final:
; Line 287
	push	esi
	push	ebp
	push	ebp
	push	edi
	call	_EVP_Cipher
	add	esp, 16					; 00000010H
	pop	ebx
	test	eax, eax
	jne	SHORT $LN13@CMAC_Final
; Line 288
	push	esi
	push	ebp
	call	_OPENSSL_cleanse
	add	esp, 8
; Line 289
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	edi
; Line 292
	ret	0
$LN13@CMAC_Final:
	pop	esi
	pop	ebp
; Line 291
	mov	eax, 1
	pop	edi
; Line 292
	ret	0
_CMAC_Final ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_Update
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nleft$2$ = 12						; size = 4
_in$ = 12						; size = 4
_dlen$ = 16						; size = 4
_CMAC_Update PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 219
	push	ebx
; Line 220
	mov	ebx, DWORD PTR _in$[esp]
	push	ebp
; Line 226
	mov	ebp, DWORD PTR _ctx$[esp+4]
	cmp	DWORD PTR [ebp+268], -1
	jne	SHORT $LN4@CMAC_Updat
; Line 227
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 260
	ret	0
$LN4@CMAC_Updat:
	push	esi
; Line 228
	mov	esi, DWORD PTR _dlen$[esp+8]
	test	esi, esi
	jne	SHORT $LN5@CMAC_Updat
; Line 229
	lea	eax, DWORD PTR [esi+1]
	pop	esi
	pop	ebp
	pop	ebx
; Line 260
	ret	0
$LN5@CMAC_Updat:
	push	edi
; Line 230
	push	ebp
	call	_EVP_CIPHER_CTX_block_size
; Line 232
	mov	ecx, DWORD PTR [ebp+268]
	add	esp, 4
	mov	edi, eax
	test	ecx, ecx
	jle	SHORT $LN12@CMAC_Updat
; Line 234
	sub	eax, ecx
; Line 235
	cmp	esi, eax
	cmovb	eax, esi
; Line 237
	push	eax
	mov	DWORD PTR _nleft$2$[esp+16], eax
	lea	eax, DWORD PTR [ebp+236]
	add	eax, ecx
	push	ebx
	push	eax
	call	_memcpy
; Line 238
	mov	eax, DWORD PTR _nleft$2$[esp+24]
	add	esp, 12					; 0000000cH
; Line 239
	add	DWORD PTR [ebp+268], eax
	sub	esi, eax
; Line 241
	je	SHORT $LN19@CMAC_Updat
; Line 243
	add	ebx, eax
; Line 245
	lea	eax, DWORD PTR [ebp+236]
	push	edi
	push	eax
	lea	eax, DWORD PTR [ebp+204]
	push	eax
	push	ebp
	call	_EVP_Cipher
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN13@CMAC_Updat
$LN12@CMAC_Updat:
; Line 249
	cmp	esi, edi
	jbe	SHORT $LN3@CMAC_Updat
	lea	eax, DWORD PTR [ebp+204]
$LL2@CMAC_Updat:
; Line 250
	push	edi
	push	ebx
	push	eax
	push	ebp
	call	_EVP_Cipher
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN13@CMAC_Updat
; Line 252
	sub	esi, edi
	lea	eax, DWORD PTR [ebp+204]
; Line 253
	add	ebx, edi
	cmp	esi, edi
	ja	SHORT $LL2@CMAC_Updat
$LN3@CMAC_Updat:
; Line 256
	push	esi
	lea	eax, DWORD PTR [ebp+236]
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 257
	mov	DWORD PTR [ebp+268], esi
$LN19@CMAC_Updat:
; Line 258
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 260
	ret	0
$LN13@CMAC_Updat:
	pop	edi
	pop	esi
	pop	ebp
; Line 251
	xor	eax, eax
	pop	ebx
; Line 260
	ret	0
_CMAC_Update ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_Init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_keylen$ = 16						; size = 4
_cipher$ = 20						; size = 4
_impl$ = 24						; size = 4
_CMAC_Init PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 180
	mov	eax, DWORD PTR _cipher$[esp-4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _key$[esp+8]
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+12]
	test	esi, esi
	jne	SHORT $LN2@CMAC_Init
	test	eax, eax
	jne	SHORT $LN13@CMAC_Init
	cmp	DWORD PTR _impl$[esp+12], eax
	jne	$LN6@CMAC_Init
	cmp	DWORD PTR _keylen$[esp+12], eax
	jne	$LN6@CMAC_Init
; Line 182
	mov	esi, edi
	cmp	DWORD PTR [esi+268], -1
	jne	SHORT $LN3@CMAC_Init
$LN14@CMAC_Init:
	pop	edi
	pop	esi
	pop	ebp
; Line 183
	xor	eax, eax
	pop	ebx
; Line 216
	ret	0
$LN3@CMAC_Init:
; Line 184
	push	OFFSET ?zero_iv@?1??CMAC_Init@@9@9
	push	0
	push	0
	push	0
	push	esi
	call	_EVP_EncryptInit_ex
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN14@CMAC_Init
; Line 186
	push	esi
	call	_EVP_CIPHER_CTX_block_size
	push	eax
	lea	eax, DWORD PTR [esi+204]
	push	0
	push	eax
	call	_memset
	add	esp, 16					; 00000010H
; Line 187
	mov	DWORD PTR [esi+268], 0
; Line 215
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 216
	ret	0
$LN2@CMAC_Init:
; Line 191
	test	eax, eax
	je	SHORT $LN5@CMAC_Init
$LN13@CMAC_Init:
	push	0
	push	0
	push	DWORD PTR _impl$[esp+20]
	push	eax
	push	edi
	call	_EVP_EncryptInit_ex
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN14@CMAC_Init
$LN5@CMAC_Init:
; Line 194
	test	esi, esi
	je	$LN6@CMAC_Init
; Line 196
	push	edi
	call	_EVP_CIPHER_CTX_cipher
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@CMAC_Init
; Line 198
	push	DWORD PTR _keylen$[esp+12]
	push	edi
	call	_EVP_CIPHER_CTX_set_key_length
	add	esp, 8
	test	eax, eax
	je	$LN14@CMAC_Init
; Line 200
	push	OFFSET ?zero_iv@?1??CMAC_Init@@9@9
	push	esi
	push	0
	push	0
	push	edi
	call	_EVP_EncryptInit_ex
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN14@CMAC_Init
; Line 202
	push	edi
	call	_EVP_CIPHER_CTX_block_size
	mov	ebx, eax
; Line 203
	lea	ebp, DWORD PTR [edi+204]
	push	ebx
	push	OFFSET ?zero_iv@?1??CMAC_Init@@9@9
	push	ebp
	push	edi
	call	_EVP_Cipher
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN14@CMAC_Init
; Line 205
	push	ebx
	lea	esi, DWORD PTR [edi+140]
	push	ebp
	push	esi
	call	_make_kn
; Line 206
	push	ebx
	lea	eax, DWORD PTR [edi+172]
	push	esi
	push	eax
	call	_make_kn
; Line 207
	push	ebx
	push	ebp
	call	_OPENSSL_cleanse
; Line 209
	push	OFFSET ?zero_iv@?1??CMAC_Init@@9@9
	push	0
	push	0
	push	0
	push	edi
	call	_EVP_EncryptInit_ex
	add	esp, 52					; 00000034H
	test	eax, eax
	je	$LN14@CMAC_Init
; Line 212
	push	ebx
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH
; Line 213
	mov	DWORD PTR [edi+268], 0
$LN6@CMAC_Init:
; Line 215
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 216
	ret	0
_CMAC_Init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_CTX_copy
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_CMAC_CTX_copy PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 136
	push	edi
; Line 138
	mov	edi, DWORD PTR _in$[esp]
	cmp	DWORD PTR [edi+268], -1
	jne	SHORT $LN2@CMAC_CTX_c
; Line 139
	xor	eax, eax
	pop	edi
; Line 149
	ret	0
$LN2@CMAC_CTX_c:
	push	ebx
; Line 140
	mov	ebx, DWORD PTR _out$[esp+4]
	push	edi
	push	ebx
	call	_EVP_CIPHER_CTX_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@CMAC_CTX_c
	pop	ebx
	pop	edi
; Line 149
	ret	0
$LN3@CMAC_CTX_c:
	push	esi
; Line 142
	push	edi
	call	_EVP_CIPHER_CTX_block_size
	mov	esi, eax
; Line 143
	lea	ecx, DWORD PTR [edi+140]
	push	esi
	push	ecx
	lea	ecx, DWORD PTR [ebx+140]
	push	ecx
	call	_memcpy
; Line 144
	push	esi
	lea	ecx, DWORD PTR [edi+172]
	push	ecx
	lea	eax, DWORD PTR [ebx+172]
	push	eax
	call	_memcpy
; Line 145
	push	esi
	lea	eax, DWORD PTR [edi+204]
	push	eax
	lea	eax, DWORD PTR [ebx+204]
	push	eax
	call	_memcpy
; Line 146
	push	esi
	lea	eax, DWORD PTR [edi+236]
	push	eax
	lea	eax, DWORD PTR [ebx+236]
	push	eax
	call	_memcpy
; Line 147
	mov	eax, DWORD PTR [edi+268]
	add	esp, 52					; 00000034H
	mov	DWORD PTR [ebx+268], eax
; Line 148
	mov	eax, 1
	pop	esi
	pop	ebx
	pop	edi
; Line 149
	ret	0
_CMAC_CTX_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_CTX_get0_cipher_ctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_CMAC_CTX_get0_cipher_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 124
	mov	eax, DWORD PTR _ctx$[esp-4]
; Line 125
	ret	0
_CMAC_CTX_get0_cipher_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_CTX_free
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_CMAC_CTX_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 128
	push	esi
; Line 129
	mov	esi, DWORD PTR _ctx$[esp]
	test	esi, esi
	je	SHORT $LN1@CMAC_CTX_f
; Line 131
	push	esi
	call	_CMAC_CTX_cleanup
; Line 132
	push	esi
	call	_CRYPTO_free
	add	esp, 8
$LN1@CMAC_CTX_f:
	pop	esi
; Line 133
	ret	0
_CMAC_CTX_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_CTX_cleanup
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_CMAC_CTX_cleanup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 107
	push	esi
; Line 114
	mov	esi, DWORD PTR _ctx$[esp]
	push	esi
	call	_EVP_CIPHER_CTX_cleanup
; Line 115
	lea	eax, DWORD PTR [esi+204]
	push	32					; 00000020H
	push	eax
	call	_OPENSSL_cleanse
; Line 116
	lea	eax, DWORD PTR [esi+140]
	push	32					; 00000020H
	push	eax
	call	_OPENSSL_cleanse
; Line 117
	lea	eax, DWORD PTR [esi+172]
	push	32					; 00000020H
	push	eax
	call	_OPENSSL_cleanse
; Line 118
	lea	eax, DWORD PTR [esi+236]
	push	32					; 00000020H
	push	eax
	call	_OPENSSL_cleanse
	add	esp, 36					; 00000024H
; Line 119
	mov	DWORD PTR [esi+268], -1
	pop	esi
; Line 120
	ret	0
_CMAC_CTX_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CMAC_CTX_new
_TEXT	SEGMENT
_CMAC_CTX_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\cmac\cmac.c
; Line 96
	push	esi
; Line 98
	push	98					; 00000062H
	push	OFFSET ??_C@_0BF@IFJHHLLE@?4?2crypto?2cmac?2cmac?4c?$AA@
	push	272					; 00000110H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 99
	test	esi, esi
	jne	SHORT $LN2@CMAC_CTX_n
	pop	esi
; Line 104
	ret	0
$LN2@CMAC_CTX_n:
; Line 101
	push	esi
	call	_EVP_CIPHER_CTX_init
	add	esp, 4
; Line 102
	mov	DWORD PTR [esi+268], -1
; Line 103
	mov	eax, esi
	pop	esi
; Line 104
	ret	0
_CMAC_CTX_new ENDP
_TEXT	ENDS
END
