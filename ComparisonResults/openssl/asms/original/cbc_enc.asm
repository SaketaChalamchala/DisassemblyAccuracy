; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\des\cbc_enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_DES_cbc_encrypt
EXTRN	_DES_encrypt1:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DES_cbc_encrypt
_TEXT	SEGMENT
_l$2$ = -12						; size = 4
_tin$ = -8						; size = 8
_in$ = 8						; size = 4
_out$ = 12						; size = 4
tv745 = 16						; size = 4
tv744 = 16						; size = 4
_length$ = 16						; size = 4
__schedule$ = 20					; size = 4
_xor1$1$ = 24						; size = 4
_l$1$ = 24						; size = 4
_ivec$ = 24						; size = 4
_xor0$1$ = 28						; size = 4
_tout1$1$ = 28						; size = 4
_enc$ = 28						; size = 4
_DES_cbc_encrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\ncbc_enc.c
; Line 74
	mov	eax, 12					; 0000000cH
	call	__chkstk
; Line 83
	cmp	DWORD PTR _enc$[esp+8], 0
; Line 84
	mov	eax, DWORD PTR _ivec$[esp+8]
	push	ebx
	push	ebp
	push	esi
	push	edi
	lea	edx, DWORD PTR [eax+1]
	je	$LN12@DES_cbc_en
	movzx	ebx, BYTE PTR [eax]
	movzx	eax, BYTE PTR [edx]
; Line 85
	movzx	ebp, BYTE PTR [edx+3]
	movzx	ecx, BYTE PTR [edx+6]
	shl	eax, 8
	or	ebx, eax
; Line 86
	mov	esi, DWORD PTR _out$[esp+24]
	movzx	eax, BYTE PTR [edx+1]
	mov	edi, DWORD PTR _in$[esp+24]
	shl	eax, 16					; 00000010H
	or	ebx, eax
	shl	ecx, 8
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 24					; 00000018H
	or	ebx, eax
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 8
	or	ebp, eax
	movzx	eax, BYTE PTR [edx+5]
	or	ecx, eax
	shl	ecx, 16					; 00000010H
	or	ebp, ecx
	mov	ecx, DWORD PTR _length$[esp+24]
	add	ecx, -8					; fffffff8H
	mov	DWORD PTR _l$1$[esp+24], ecx
	js	$LN3@DES_cbc_en
; Line 84
	lea	eax, DWORD PTR [ecx+8]
	shr	eax, 3
	mov	DWORD PTR tv744[esp+24], eax
; Line 86
	neg	eax
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _l$1$[esp+24], ecx
	npad	8
$LL4@DES_cbc_en:
; Line 87
	movzx	eax, BYTE PTR [edi+1]
	movzx	edx, BYTE PTR [edi]
; Line 88
	movzx	ecx, BYTE PTR [edi+4]
	shl	eax, 8
	or	edx, eax
	movzx	eax, BYTE PTR [edi+2]
	shl	eax, 16					; 00000010H
	or	edx, eax
	movzx	eax, BYTE PTR [edi+3]
	shl	eax, 24					; 00000018H
	or	edx, eax
	movzx	eax, BYTE PTR [edi+5]
	shl	eax, 8
; Line 89
	xor	edx, ebx
	or	ecx, eax
; Line 90
	mov	DWORD PTR _tin$[esp+28], edx
	movzx	eax, BYTE PTR [edi+6]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [edi+7]
	shl	eax, 24					; 00000018H
	add	edi, 8
; Line 93
	push	1
	push	DWORD PTR __schedule$[esp+28]
	or	ecx, eax
	lea	eax, DWORD PTR _tin$[esp+36]
	xor	ecx, ebp
	push	eax
	mov	DWORD PTR _tin$[esp+44], ecx
	call	_DES_encrypt1
; Line 94
	mov	ebx, DWORD PTR _tin$[esp+40]
	add	esp, 12					; 0000000cH
; Line 96
	mov	edx, DWORD PTR _tin$[esp+32]
	mov	eax, ebx
	shr	eax, 8
	mov	ebp, edx
	mov	BYTE PTR [esi], bl
	mov	BYTE PTR [esi+1], al
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [esi+2], al
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [esi+3], al
; Line 97
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR [esi+4], dl
	mov	BYTE PTR [esi+5], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [esi+6], al
	mov	eax, edx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [esi+7], al
	add	esi, 8
	sub	DWORD PTR tv744[esp+24], 1
	mov	DWORD PTR _tout1$1$[esp+24], edx
	jne	$LL4@DES_cbc_en
	mov	ecx, DWORD PTR _l$1$[esp+24]
$LN3@DES_cbc_en:
; Line 99
	cmp	ecx, -8					; fffffff8H
	je	$LN10@DES_cbc_en
; Line 100
	mov	eax, DWORD PTR _l$1$[esp+24]
	add	edi, 8
	add	ecx, edi
	add	eax, 7
	xor	edx, edx
	xor	edi, edi
	cmp	eax, 7
	ja	SHORT $LN5@DES_cbc_en
	jmp	DWORD PTR $LN44@DES_cbc_en[eax*4]
$LN15@DES_cbc_en:
	movzx	edx, BYTE PTR [ecx-1]
	dec	ecx
	shl	edx, 24					; 00000018H
$LN16@DES_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 16					; 00000010H
	or	edx, eax
$LN17@DES_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 8
	or	edx, eax
$LN18@DES_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	or	edx, eax
$LN19@DES_cbc_en:
	movzx	edi, BYTE PTR [ecx-1]
	dec	ecx
	shl	edi, 24					; 00000018H
$LN20@DES_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 16					; 00000010H
	or	edi, eax
$LN21@DES_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 8
	or	edi, eax
$LN22@DES_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	or	edi, eax
$LN5@DES_cbc_en:
; Line 105
	push	1
	push	DWORD PTR __schedule$[esp+28]
	lea	eax, DWORD PTR _tin$[esp+36]
	xor	edx, ebp
	xor	edi, ebx
	mov	DWORD PTR _tin$[esp+40], edx
	push	eax
	mov	DWORD PTR _tin$[esp+40], edi
	call	_DES_encrypt1
; Line 107
	mov	ecx, DWORD PTR _tin$[esp+40]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi], cl
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [esi+1], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [esi+2], al
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [esi+3], cl
; Line 109
	mov	ecx, DWORD PTR _tin$[esp+32]
	mov	eax, ecx
	mov	BYTE PTR [esi+4], cl
	shr	eax, 8
	mov	BYTE PTR [esi+5], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	pop	edi
	mov	BYTE PTR [esi+6], al
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [esi+7], cl
	pop	esi
	pop	ebp
	pop	ebx
; Line 154
	add	esp, 12					; 0000000cH
	ret	0
$LN12@DES_cbc_en:
; Line 117
	movzx	edi, BYTE PTR [eax]
	movzx	eax, BYTE PTR [edx]
; Line 118
	movzx	ecx, BYTE PTR [edx+3]
	shl	eax, 8
	or	edi, eax
; Line 119
	mov	esi, DWORD PTR _length$[esp+24]
	movzx	eax, BYTE PTR [edx+1]
	mov	ebp, DWORD PTR _out$[esp+24]
	mov	ebx, DWORD PTR _in$[esp+24]
	shl	eax, 16					; 00000010H
	or	edi, eax
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 24					; 00000018H
	or	edi, eax
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR _xor0$1$[esp+24], edi
	movzx	eax, BYTE PTR [edx+5]
	mov	DWORD PTR _xor1$1$[esp+24], ecx
	movzx	ecx, BYTE PTR [edx+6]
	shl	ecx, 8
	or	ecx, eax
	shl	ecx, 16					; 00000010H
	or	DWORD PTR _xor1$1$[esp+24], ecx
	add	esi, -8					; fffffff8H
	js	$LN8@DES_cbc_en
; Line 117
	lea	eax, DWORD PTR [esi+8]
	shr	eax, 3
	mov	DWORD PTR tv745[esp+24], eax
; Line 119
	neg	eax
	lea	esi, DWORD PTR [esi+eax*8]
	mov	DWORD PTR _l$2$[esp+28], esi
	npad	4
$LL9@DES_cbc_en:
; Line 120
	movzx	eax, BYTE PTR [ebx+1]
	movzx	edi, BYTE PTR [ebx]
; Line 122
	movzx	esi, BYTE PTR [ebx+4]
	shl	eax, 8
	or	edi, eax
	movzx	eax, BYTE PTR [ebx+2]
	shl	eax, 16					; 00000010H
	or	edi, eax
	movzx	eax, BYTE PTR [ebx+3]
	shl	eax, 24					; 00000018H
	or	edi, eax
	movzx	eax, BYTE PTR [ebx+5]
	shl	eax, 8
	or	esi, eax
	mov	DWORD PTR _tin$[esp+28], edi
	movzx	eax, BYTE PTR [ebx+6]
	shl	eax, 16					; 00000010H
	or	esi, eax
	movzx	eax, BYTE PTR [ebx+7]
	shl	eax, 24					; 00000018H
	add	ebx, 8
; Line 124
	push	0
	push	DWORD PTR __schedule$[esp+28]
	or	esi, eax
	lea	eax, DWORD PTR _tin$[esp+36]
	push	eax
	mov	DWORD PTR _tin$[esp+44], esi
	call	_DES_encrypt1
; Line 125
	mov	ecx, DWORD PTR _tin$[esp+40]
	add	esp, 12					; 0000000cH
	xor	ecx, DWORD PTR _xor0$1$[esp+24]
; Line 126
	mov	edx, DWORD PTR _tin$[esp+32]
; Line 127
	mov	eax, ecx
	xor	edx, DWORD PTR _xor1$1$[esp+24]
	mov	BYTE PTR [ebp], cl
	shr	eax, 8
	mov	BYTE PTR [ebp+1], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebp+2], al
; Line 128
	mov	eax, edx
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [ebp+3], cl
	mov	BYTE PTR [ebp+4], dl
	shr	eax, 8
	mov	BYTE PTR [ebp+5], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ebp+6], al
	mov	BYTE PTR [ebp+7], dl
	add	ebp, 8
	sub	DWORD PTR tv745[esp+24], 1
; Line 129
	mov	DWORD PTR _xor0$1$[esp+24], edi
; Line 130
	mov	DWORD PTR _xor1$1$[esp+24], esi
	jne	$LL9@DES_cbc_en
	mov	esi, DWORD PTR _l$2$[esp+28]
$LN8@DES_cbc_en:
; Line 132
	cmp	esi, -8					; fffffff8H
	je	$LN10@DES_cbc_en
; Line 133
	movzx	eax, BYTE PTR [ebx+1]
	movzx	ecx, BYTE PTR [ebx]
; Line 135
	movzx	edx, BYTE PTR [ebx+4]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+2]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+3]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+5]
	mov	DWORD PTR _tin$[esp+28], ecx
	movzx	ecx, BYTE PTR [ebx+7]
	shl	eax, 8
	or	edx, eax
; Line 136
	shl	ecx, 8
	movzx	eax, BYTE PTR [ebx+6]
	or	ecx, eax
; Line 137
	lea	eax, DWORD PTR _tin$[esp+28]
	push	0
	push	DWORD PTR __schedule$[esp+28]
	shl	ecx, 16					; 00000010H
	or	ecx, edx
	push	eax
	mov	DWORD PTR _tin$[esp+44], ecx
	call	_DES_encrypt1
; Line 138
	mov	edx, DWORD PTR _tin$[esp+40]
; Line 140
	lea	ecx, DWORD PTR [ebp+8]
	mov	ebx, DWORD PTR _tin$[esp+44]
	add	ecx, esi
	xor	ebx, DWORD PTR _xor1$1$[esp+36]
	add	esi, 7
	add	esp, 12					; 0000000cH
	xor	edx, edi
	cmp	esi, 7
	ja	SHORT $LN10@DES_cbc_en
	jmp	DWORD PTR $LN45@DES_cbc_en[esi*4]
$LN24@DES_cbc_en:
	dec	ecx
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx], al
$LN25@DES_cbc_en:
	dec	ecx
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ecx], al
$LN26@DES_cbc_en:
	dec	ecx
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR [ecx], al
$LN27@DES_cbc_en:
	dec	ecx
	mov	BYTE PTR [ecx], bl
$LN28@DES_cbc_en:
	dec	ecx
	mov	eax, edx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx], al
$LN29@DES_cbc_en:
	dec	ecx
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ecx], al
$LN30@DES_cbc_en:
	dec	ecx
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR [ecx], al
$LN31@DES_cbc_en:
	mov	BYTE PTR [ecx-1], dl
$LN10@DES_cbc_en:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 154
	add	esp, 12					; 0000000cH
	ret	0
$LN44@DES_cbc_en:
	DD	$LN22@DES_cbc_en
	DD	$LN21@DES_cbc_en
	DD	$LN20@DES_cbc_en
	DD	$LN19@DES_cbc_en
	DD	$LN18@DES_cbc_en
	DD	$LN17@DES_cbc_en
	DD	$LN16@DES_cbc_en
	DD	$LN15@DES_cbc_en
$LN45@DES_cbc_en:
	DD	$LN31@DES_cbc_en
	DD	$LN30@DES_cbc_en
	DD	$LN29@DES_cbc_en
	DD	$LN28@DES_cbc_en
	DD	$LN27@DES_cbc_en
	DD	$LN26@DES_cbc_en
	DD	$LN25@DES_cbc_en
	DD	$LN24@DES_cbc_en
_DES_cbc_encrypt ENDP
_TEXT	ENDS
END
