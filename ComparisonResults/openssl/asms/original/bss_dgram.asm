; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@KGHEGOOF@datagram?5socket?$AA@	; `string'
;	COMDAT ??_C@_0BA@KGHEGOOF@datagram?5socket?$AA@
CONST	SEGMENT
??_C@_0BA@KGHEGOOF@datagram?5socket?$AA@ DB 'datagram socket', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_methods_dgramp DD 0515H
	DD	FLAT:??_C@_0BA@KGHEGOOF@datagram?5socket?$AA@
	DD	FLAT:_dgram_write
	DD	FLAT:_dgram_read
	DD	FLAT:_dgram_puts
	DD	00H
	DD	FLAT:_dgram_ctrl
	DD	FLAT:_dgram_new
	DD	FLAT:_dgram_free
	DD	00H
_DATA	ENDS
PUBLIC	_BIO_s_datagram
PUBLIC	_BIO_dgram_non_fatal_error
PUBLIC	_BIO_new_dgram
PUBLIC	??_C@_0BJ@CIFLONIM@?4?2crypto?2bio?2bss_dgram?4c?$AA@ ; `string'
PUBLIC	??_C@_0L@DEFCDCGF@getsockopt?$AA@		; `string'
PUBLIC	??_C@_0L@CKHNIFCM@setsockopt?$AA@		; `string'
EXTRN	__imp__perror:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__SystemTimeToFileTime@8:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__getsockopt@20:PROC
EXTRN	__imp__recvfrom@24:PROC
EXTRN	__imp__send@16:PROC
EXTRN	__imp__sendto@24:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	__imp__shutdown@8:PROC
EXTRN	__imp__WSASetLastError@4:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BIO_set_flags:PROC
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_new:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_int_ctrl:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldiv:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0L@CKHNIFCM@setsockopt?$AA@
CONST	SEGMENT
??_C@_0L@CKHNIFCM@setsockopt?$AA@ DB 'setsockopt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEFCDCGF@getsockopt?$AA@
CONST	SEGMENT
??_C@_0L@DEFCDCGF@getsockopt?$AA@ DB 'getsockopt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CIFLONIM@?4?2crypto?2bio?2bss_dgram?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@CIFLONIM@?4?2crypto?2bio?2bss_dgram?4c?$AA@ DB '.\crypto\bio\bs'
	DB	's_dgram.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_get_mtu_overhead
_TEXT	SEGMENT
_data$ = 8						; size = 4
_dgram_get_mtu_overhead PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 466
	mov	eax, DWORD PTR _data$[esp-4]
	movzx	eax, WORD PTR [eax]
	sub	eax, 2
	je	SHORT $LN4@dgram_get_
	sub	eax, 21					; 00000015H
; Line 494
	mov	eax, 48					; 00000030H
	je	SHORT $LN2@dgram_get_
$LN4@dgram_get_:
	mov	eax, 28					; 0000001cH
$LN2@dgram_get_:
; Line 495
	ret	0
_dgram_get_mtu_overhead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_reset_rcv_timeout
_TEXT	SEGMENT
_timeout$1 = 8						; size = 4
_b$ = 8							; size = 4
_dgram_reset_rcv_timeout PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 346
	push	esi
	push	edi
; Line 348
	mov	edi, DWORD PTR _b$[esp+4]
	mov	esi, DWORD PTR [edi+32]
; Line 351
	cmp	DWORD PTR [esi+40], 0
	jg	SHORT $LN3@dgram_rese
	cmp	DWORD PTR [esi+44], 0
	jle	SHORT $LN4@dgram_rese
$LN3@dgram_rese:
; Line 353
	mov	eax, 274877907				; 10624dd3H
	imul	DWORD PTR [esi+52]
	imul	eax, DWORD PTR [esi+48], 1000
; Line 356
	push	4
	sar	edx, 6
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	add	ecx, eax
	lea	eax, DWORD PTR _timeout$1[esp+8]
	push	eax
	push	4102					; 00001006H
	push	65535					; 0000ffffH
	push	DWORD PTR [edi+28]
	mov	DWORD PTR _timeout$1[esp+24], ecx
	call	DWORD PTR __imp__setsockopt@20
	test	eax, eax
	jns	SHORT $LN4@dgram_rese
; Line 357
	push	OFFSET ??_C@_0L@CKHNIFCM@setsockopt?$AA@
	call	DWORD PTR __imp__perror
	add	esp, 4
$LN4@dgram_rese:
; Line 368
	pop	edi
	pop	esi
	ret	0
_dgram_reset_rcv_timeout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_adjust_rcv_timeout
_TEXT	SEGMENT
_timenow$2$ = -36					; size = 4
_timeout$1 = -36					; size = 4
_sz$ = -32						; size = 4
_now$2 = -28						; size = 8
_st$3 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_b$ = 8							; size = 4
_dgram_adjust_rcv_timeout PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 266
	mov	eax, 36					; 00000024H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+36], eax
	push	ebx
	mov	ebx, DWORD PTR _b$[esp+36]
	push	edi
; Line 272
	mov	DWORD PTR _sz$[esp+44], 0
	mov	edi, DWORD PTR [ebx+32]
; Line 277
	cmp	DWORD PTR [edi+40], 0
	jg	SHORT $LN3@dgram_adju
	cmp	DWORD PTR [edi+44], 0
	jle	$LN13@dgram_adju
$LN3@dgram_adju:
; Line 286
	lea	eax, DWORD PTR _sz$[esp+44]
	mov	DWORD PTR _sz$[esp+44], 4
	push	eax
	lea	eax, DWORD PTR _timeout$1[esp+48]
	push	eax
	push	4102					; 00001006H
	push	65535					; 0000ffffH
	push	DWORD PTR [ebx+28]
	call	DWORD PTR __imp__getsockopt@20
	test	eax, eax
	jns	SHORT $LN4@dgram_adju
; Line 287
	push	OFFSET ??_C@_0L@DEFCDCGF@getsockopt?$AA@
	call	DWORD PTR __imp__perror
	add	esp, 4
; Line 288
	jmp	SHORT $LN5@dgram_adju
$LN4@dgram_adju:
; Line 289
	mov	ecx, DWORD PTR _timeout$1[esp+44]
	mov	eax, 274877907				; 10624dd3H
	imul	ecx
	sar	edx, 6
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR [edi+48], eax
; Line 290
	imul	eax, eax, 1000
	sub	ecx, eax
	imul	eax, ecx, 1000
	mov	DWORD PTR [edi+52], eax
$LN5@dgram_adju:
	push	esi
; Line 2062
	lea	eax, DWORD PTR _st$3[esp+48]
	push	eax
	call	DWORD PTR __imp__GetSystemTime@4
; Line 2063
	lea	eax, DWORD PTR _now$2[esp+48]
	push	eax
	lea	eax, DWORD PTR _st$3[esp+52]
	push	eax
	call	DWORD PTR __imp__SystemTimeToFileTime@8
; Line 2067
	mov	esi, DWORD PTR _now$2[esp+48]
	mov	eax, DWORD PTR _now$2[esp+52]
	add	esi, 717324288				; 2ac18000H
; Line 2069
	push	0
	push	10000000				; 00989680H
	adc	eax, -27111903				; fe624e21H
	push	eax
	push	esi
	call	__aulldiv
; Line 305
	mov	ecx, DWORD PTR [edi+40]
; Line 2069
	mov	DWORD PTR _timenow$2$[esp+48], eax
; Line 2070
	imul	eax, eax, 10000000
	sub	esi, eax
	mov	eax, 1717986919				; 66666667H
	imul	esi
	sar	edx, 2
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
; Line 305
	mov	edx, DWORD PTR [edi+44]
; Line 306
	cmp	edx, esi
	jge	SHORT $LN6@dgram_adju
; Line 307
	mov	eax, 1000000				; 000f4240H
	sub	eax, esi
	add	edx, eax
; Line 308
	dec	ecx
; Line 309
	jmp	SHORT $LN7@dgram_adju
$LN6@dgram_adju:
; Line 310
	sub	edx, esi
$LN7@dgram_adju:
; Line 312
	mov	eax, DWORD PTR _timenow$2$[esp+48]
	cmp	ecx, eax
	jge	SHORT $LN8@dgram_adju
; Line 313
	xor	ecx, ecx
; Line 314
	lea	edx, DWORD PTR [ecx+1]
; Line 315
	jmp	SHORT $LN9@dgram_adju
$LN8@dgram_adju:
; Line 316
	sub	ecx, eax
$LN9@dgram_adju:
; Line 326
	mov	esi, DWORD PTR [edi+48]
	test	esi, esi
	jne	SHORT $LN12@dgram_adju
	cmp	DWORD PTR [edi+52], esi
	je	SHORT $LN11@dgram_adju
$LN12@dgram_adju:
	cmp	esi, ecx
	jg	SHORT $LN11@dgram_adju
	jne	SHORT $LN17@dgram_adju
	cmp	DWORD PTR [edi+52], edx
	jl	SHORT $LN17@dgram_adju
$LN11@dgram_adju:
; Line 329
	mov	eax, 274877907				; 10624dd3H
	imul	ecx, ecx, 1000
	imul	edx
; Line 331
	push	4
	sar	edx, 6
	mov	eax, edx
	add	ecx, edx
	shr	eax, 31					; 0000001fH
	add	eax, ecx
	mov	DWORD PTR _timeout$1[esp+52], eax
	lea	eax, DWORD PTR _timeout$1[esp+52]
	push	eax
	push	4102					; 00001006H
	push	65535					; 0000ffffH
	push	DWORD PTR [ebx+28]
	call	DWORD PTR __imp__setsockopt@20
	test	eax, eax
	jns	SHORT $LN17@dgram_adju
; Line 332
	push	OFFSET ??_C@_0L@CKHNIFCM@setsockopt?$AA@
	call	DWORD PTR __imp__perror
	add	esp, 4
$LN17@dgram_adju:
	pop	esi
$LN13@dgram_adju:
; Line 343
	mov	ecx, DWORD PTR __$ArrayPad$[esp+44]
	pop	edi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
_dgram_adjust_rcv_timeout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _get_current_time
_TEXT	SEGMENT
_now$ = -28						; size = 8
_st$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_get_current_time PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 2054
	mov	eax, 28					; 0000001cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+28], eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _t$[esp+32]
; Line 2062
	lea	eax, DWORD PTR _st$[esp+36]
	push	eax
	call	DWORD PTR __imp__GetSystemTime@4
; Line 2063
	lea	eax, DWORD PTR _now$[esp+36]
	push	eax
	lea	eax, DWORD PTR _st$[esp+40]
	push	eax
	call	DWORD PTR __imp__SystemTimeToFileTime@8
; Line 2067
	mov	esi, DWORD PTR _now$[esp+36]
	mov	eax, DWORD PTR _now$[esp+40]
	add	esi, 717324288				; 2ac18000H
; Line 2069
	push	0
	push	10000000				; 00989680H
	adc	eax, -27111903				; fe624e21H
	push	eax
	push	esi
	call	__aulldiv
	mov	DWORD PTR [edi], eax
; Line 2070
	imul	eax, eax, 10000000
; Line 2079
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	sub	esi, eax
	mov	eax, 1717986919				; 66666667H
	imul	esi
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
_get_current_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_dgram_should_retry
_TEXT	SEGMENT
_i$ = 8							; size = 4
_BIO_dgram_should_retry PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 1982
	mov	eax, DWORD PTR _i$[esp-4]
	test	eax, eax
	je	SHORT $LN3@BIO_dgram_
	cmp	eax, -1
	je	SHORT $LN3@BIO_dgram_
$LN13@BIO_dgram_:
; Line 1995
	xor	eax, eax
; Line 1996
	ret	0
$LN3@BIO_dgram_:
; Line 1983
	call	DWORD PTR __imp__WSAGetLastError@0
; Line 2000
	cmp	eax, 112				; 00000070H
	jg	SHORT $LN11@BIO_dgram_
	je	SHORT $LN8@BIO_dgram_
	cmp	eax, 4
	je	SHORT $LN8@BIO_dgram_
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN8@BIO_dgram_
	cmp	eax, 103				; 00000067H
	jmp	SHORT $LN12@BIO_dgram_
$LN11@BIO_dgram_:
	sub	eax, 134				; 00000086H
	je	SHORT $LN8@BIO_dgram_
	sub	eax, 6
	je	SHORT $LN8@BIO_dgram_
	sub	eax, 9895				; 000026a7H
$LN12@BIO_dgram_:
	jne	SHORT $LN13@BIO_dgram_
$LN8@BIO_dgram_:
; Line 2045
	mov	eax, 1
; Line 1996
	ret	0
_BIO_dgram_should_retry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_clear
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dgram_clear PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 252
	push	esi
; Line 253
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@dgram_clea
; Line 254
	xor	eax, eax
	pop	esi
; Line 263
	ret	0
$LN2@dgram_clea:
; Line 255
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN3@dgram_clea
; Line 256
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN4@dgram_clea
; Line 257
	push	2
	push	DWORD PTR [esi+28]
	call	DWORD PTR __imp__shutdown@8
	push	DWORD PTR [esi+28]
	call	DWORD PTR __imp__closesocket@4
$LN4@dgram_clea:
; Line 259
	mov	DWORD PTR [esi+12], 0
; Line 260
	mov	DWORD PTR [esi+20], 0
$LN3@dgram_clea:
; Line 262
	mov	eax, 1
	pop	esi
; Line 263
	ret	0
_dgram_clear ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dgram_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 236
	push	esi
; Line 239
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@dgram_free
; Line 240
	xor	eax, eax
	pop	esi
; Line 249
	ret	0
$LN2@dgram_free:
; Line 255
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN8@dgram_free
; Line 256
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN9@dgram_free
; Line 257
	push	2
	push	DWORD PTR [esi+28]
	call	DWORD PTR __imp__shutdown@8
	push	DWORD PTR [esi+28]
	call	DWORD PTR __imp__closesocket@4
$LN9@dgram_free:
; Line 259
	mov	DWORD PTR [esi+12], 0
; Line 260
	mov	DWORD PTR [esi+20], 0
$LN8@dgram_free:
; Line 244
	mov	eax, DWORD PTR [esi+32]
; Line 245
	test	eax, eax
	je	SHORT $LN4@dgram_free
; Line 246
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@dgram_free:
; Line 248
	mov	eax, 1
	pop	esi
; Line 249
	ret	0
_dgram_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_new
_TEXT	SEGMENT
_bi$ = 8						; size = 4
_dgram_new PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 220
	push	esi
; Line 223
	mov	esi, DWORD PTR _bi$[esp]
	push	edi
; Line 225
	push	225					; 000000e1H
	push	OFFSET ??_C@_0BJ@CIFLONIM@?4?2crypto?2bio?2bss_dgram?4c?$AA@
	push	56					; 00000038H
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+28], 0
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 226
	test	edi, edi
	jne	SHORT $LN2@dgram_new
	pop	edi
	pop	esi
; Line 233
	ret	0
$LN2@dgram_new:
; Line 228
	push	56					; 00000038H
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 229
	mov	DWORD PTR [esi+32], edi
; Line 231
	mov	DWORD PTR [esi+20], 0
; Line 232
	mov	eax, 1
	pop	edi
	pop	esi
; Line 233
	ret	0
_dgram_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_ctrl
_TEXT	SEGMENT
_sockopt_val$ = -4					; size = 4
_sz$1 = 8						; size = 4
_timeout$2 = 8						; size = 4
_sz$3 = 8						; size = 4
_timeout$4 = 8						; size = 4
_b$ = 8							; size = 4
_timeout$5 = 12						; size = 4
_timeout$6 = 12						; size = 4
_cmd$ = 12						; size = 4
_num$ = 16						; size = 4
_ptr$ = 20						; size = 4
_dgram_ctrl PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 498
	mov	eax, 4
	call	__chkstk
; Line 519
	mov	eax, DWORD PTR _cmd$[esp]
	push	ebx
	mov	ebx, DWORD PTR _b$[esp+4]
	dec	eax
	mov	DWORD PTR _sockopt_val$[esp+8], 0
	push	esi
	push	edi
	mov	edx, DWORD PTR [ebx+32]
	mov	edi, 1
	cmp	eax, 104				; 00000068H
	ja	$LN79@dgram_ctrl
	movzx	eax, BYTE PTR $LN81@dgram_ctrl[eax]
	jmp	DWORD PTR $LN91@dgram_ctrl[eax*4]
$LN18@dgram_ctrl:
; Line 528
	push	ebx
	call	_dgram_clear
; Line 529
	mov	eax, DWORD PTR _ptr$[esp+16]
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+28], eax
; Line 530
	mov	eax, DWORD PTR _num$[esp+12]
	mov	DWORD PTR [ebx+16], eax
; Line 949
	mov	eax, edi
	mov	DWORD PTR [ebx+12], edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN19@dgram_ctrl:
; Line 534
	cmp	DWORD PTR [ebx+12], 0
	je	$LN20@dgram_ctrl
; Line 536
	mov	ecx, DWORD PTR _ptr$[esp+12]
	test	ecx, ecx
	je	SHORT $LN22@dgram_ctrl
; Line 537
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [ecx], eax
$LN22@dgram_ctrl:
; Line 538
	mov	edi, DWORD PTR [ebx+28]
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN23@dgram_ctrl:
; Line 543
	mov	edi, DWORD PTR [ebx+16]
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN24@dgram_ctrl:
; Line 546
	mov	eax, DWORD PTR _num$[esp+12]
	mov	DWORD PTR [ebx+16], eax
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN33@dgram_ctrl:
; Line 663
	push	edx
	call	_dgram_get_mtu_overhead
	mov	edi, eax
	add	esp, 4
; Line 664
	movzx	eax, WORD PTR [edx]
	neg	edi
	sub	eax, 2
	je	SHORT $LN34@dgram_ctrl
	sub	eax, 21					; 00000015H
	jne	SHORT $LN34@dgram_ctrl
; Line 675
	add	edi, 1280				; 00000500H
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN34@dgram_ctrl:
; Line 666
	add	edi, 576				; 00000240H
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN37@dgram_ctrl:
; Line 684
	mov	eax, DWORD PTR [edx+36]
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN38@dgram_ctrl:
; Line 687
	mov	edi, DWORD PTR _num$[esp+12]
; Line 949
	mov	eax, edi
	mov	DWORD PTR [edx+36], edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN39@dgram_ctrl:
; Line 693
	mov	eax, DWORD PTR _ptr$[esp+12]
	test	eax, eax
	je	SHORT $LN40@dgram_ctrl
; Line 694
	mov	DWORD PTR [edx+28], edi
$LN86@dgram_ctrl:
; Line 695
	movzx	ecx, WORD PTR [eax]
; Line 705
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edx], xmm0
	sub	ecx, 2
	je	$LN2@dgram_ctrl
; Line 695
	sub	ecx, 21					; 00000015H
	jne	$LN2@dgram_ctrl
; Line 701
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [edx+16], xmm0
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], eax
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN40@dgram_ctrl:
; Line 709
	mov	DWORD PTR [edx+28], 0
	xorps	xmm0, xmm0
; Line 949
	mov	eax, edi
	pop	edi
	movups	XMMWORD PTR [edx], xmm0
	pop	esi
	movq	QWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+24], 0
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN45@dgram_ctrl:
; Line 714
	movzx	eax, WORD PTR [edx]
	sub	eax, 2
	je	SHORT $LN46@dgram_ctrl
	sub	eax, 21					; 00000015H
; Line 720
	mov	eax, 28					; 0000001cH
	je	SHORT $LN10@dgram_ctrl
$LN46@dgram_ctrl:
; Line 716
	mov	eax, 16					; 00000010H
$LN10@dgram_ctrl:
; Line 727
	mov	edi, DWORD PTR _num$[esp+12]
	test	edi, edi
	je	SHORT $LN50@dgram_ctrl
	cmp	edi, eax
	jle	SHORT $LN49@dgram_ctrl
$LN50@dgram_ctrl:
; Line 728
	mov	edi, eax
$LN49@dgram_ctrl:
; Line 729
	push	edi
	push	edx
	push	DWORD PTR _ptr$[esp+20]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN51@dgram_ctrl:
; Line 733
	mov	eax, DWORD PTR _ptr$[esp+12]
; Line 740
	jmp	$LN86@dgram_ctrl
$LN55@dgram_ctrl:
; Line 748
	mov	ecx, DWORD PTR _ptr$[esp+12]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+40], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], eax
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN56@dgram_ctrl:
; Line 755
	mov	esi, DWORD PTR _ptr$[esp+12]
	mov	eax, 274877907				; 10624dd3H
; Line 757
	push	4
	imul	DWORD PTR [esi+4]
	imul	eax, DWORD PTR [esi], 1000
	sar	edx, 6
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	add	ecx, eax
	lea	eax, DWORD PTR _timeout$4[esp+16]
	push	eax
	push	4102					; 00001006H
$LN88@dgram_ctrl:
	push	65535					; 0000ffffH
	push	DWORD PTR [ebx+28]
	mov	DWORD PTR _timeout$4[esp+32], ecx
	call	DWORD PTR __imp__setsockopt@20
	test	eax, eax
$LN84@dgram_ctrl:
	jns	$LN2@dgram_ctrl
; Line 758
	push	OFFSET ??_C@_0L@CKHNIFCM@setsockopt?$AA@
	call	DWORD PTR __imp__perror
	add	esp, 4
$LN20@dgram_ctrl:
; Line 759
	or	edi, -1
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN58@dgram_ctrl:
; Line 784
	lea	eax, DWORD PTR _sz$3[esp+12]
	push	eax
	lea	eax, DWORD PTR _timeout$6[esp+16]
	push	eax
	push	4102					; 00001006H
$LN89@dgram_ctrl:
	push	65535					; 0000ffffH
	push	DWORD PTR [ebx+28]
	mov	DWORD PTR _sz$3[esp+32], 4
	call	DWORD PTR __imp__getsockopt@20
	test	eax, eax
	jns	SHORT $LN59@dgram_ctrl
; Line 785
	push	OFFSET ??_C@_0L@DEFCDCGF@getsockopt?$AA@
	call	DWORD PTR __imp__perror
	add	esp, 4
	or	edi, -1
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN59@dgram_ctrl:
; Line 788
	mov	esi, DWORD PTR _timeout$6[esp+12]
	mov	eax, 274877907				; 10624dd3H
	mov	ecx, DWORD PTR _ptr$[esp+12]
; Line 790
	mov	edi, 8
	imul	esi
	sar	edx, 6
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR [ecx], eax
	imul	eax, eax, 1000
	sub	esi, eax
	imul	eax, esi, 1000
	mov	DWORD PTR [ecx+4], eax
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN61@dgram_ctrl:
; Line 812
	mov	esi, DWORD PTR _ptr$[esp+12]
	mov	eax, 274877907				; 10624dd3H
; Line 814
	push	4
	imul	DWORD PTR [esi+4]
	imul	eax, DWORD PTR [esi], 1000
	sar	edx, 6
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	add	ecx, eax
	lea	eax, DWORD PTR _timeout$2[esp+16]
	push	eax
	push	4101					; 00001005H
; Line 826
	jmp	$LN88@dgram_ctrl
$LN63@dgram_ctrl:
; Line 841
	lea	eax, DWORD PTR _sz$1[esp+12]
	push	eax
	lea	eax, DWORD PTR _timeout$5[esp+16]
	push	eax
	push	4101					; 00001005H
; Line 844
	jmp	$LN89@dgram_ctrl
$LN66@dgram_ctrl:
; Line 868
	cmp	DWORD PTR [edx+32], 10060		; 0000274cH
	jne	$LN79@dgram_ctrl
; Line 949
	mov	eax, edi
	mov	DWORD PTR [edx+32], 0
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN69@dgram_ctrl:
; Line 880
	cmp	DWORD PTR [edx+32], 115			; 00000073H
	jne	SHORT $LN79@dgram_ctrl
; Line 949
	mov	eax, edi
	mov	DWORD PTR [edx+32], 0
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN72@dgram_ctrl:
; Line 888
	xor	eax, eax
	cmp	DWORD PTR _num$[esp+12], eax
	setne	al
	mov	DWORD PTR _sockopt_val$[esp+16], eax
; Line 890
	movzx	eax, WORD PTR [edx]
	sub	eax, 2
	je	SHORT $LN73@dgram_ctrl
	sub	eax, 21					; 00000015H
	jne	$LN20@dgram_ctrl
; Line 921
	push	4
	lea	eax, DWORD PTR _sockopt_val$[esp+20]
	push	eax
	push	14					; 0000000eH
	push	41					; 00000029H
	push	DWORD PTR [ebx+28]
	call	DWORD PTR __imp__setsockopt@20
	mov	edi, eax
	test	edi, edi
; Line 935
	jmp	$LN84@dgram_ctrl
$LN73@dgram_ctrl:
; Line 908
	push	4
	lea	eax, DWORD PTR _sockopt_val$[esp+20]
	push	eax
	push	14					; 0000000eH
	push	0
	push	DWORD PTR [ebx+28]
	call	DWORD PTR __imp__setsockopt@20
	mov	edi, eax
	test	edi, edi
; Line 941
	jmp	$LN84@dgram_ctrl
$LN78@dgram_ctrl:
; Line 943
	push	edx
	call	_dgram_get_mtu_overhead
	add	esp, 4
	mov	edi, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
$LN79@dgram_ctrl:
; Line 946
	xor	edi, edi
$LN2@dgram_ctrl:
; Line 949
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 950
	pop	ecx
	ret	0
	npad	3
$LN91@dgram_ctrl:
	DD	$LN79@dgram_ctrl
	DD	$LN23@dgram_ctrl
	DD	$LN24@dgram_ctrl
	DD	$LN2@dgram_ctrl
	DD	$LN51@dgram_ctrl
	DD	$LN39@dgram_ctrl
	DD	$LN56@dgram_ctrl
	DD	$LN58@dgram_ctrl
	DD	$LN61@dgram_ctrl
	DD	$LN63@dgram_ctrl
	DD	$LN66@dgram_ctrl
	DD	$LN37@dgram_ctrl
	DD	$LN38@dgram_ctrl
	DD	$LN69@dgram_ctrl
	DD	$LN55@dgram_ctrl
	DD	$LN45@dgram_ctrl
	DD	$LN33@dgram_ctrl
	DD	$LN72@dgram_ctrl
	DD	$LN78@dgram_ctrl
	DD	$LN18@dgram_ctrl
	DD	$LN19@dgram_ctrl
	DD	$LN79@dgram_ctrl
$LN81@dgram_ctrl:
	DB	0
	DB	21					; 00000015H
	DB	0
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	1
	DB	2
	DB	0
	DB	3
	DB	3
	DB	0
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	3
	DB	0
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	4
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	19					; 00000013H
	DB	20					; 00000014H
_dgram_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_puts
_TEXT	SEGMENT
_bp$ = 8						; size = 4
_str$ = 12						; size = 4
_dgram_puts PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 956
	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, edx
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL3@dgram_puts:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@dgram_puts
	sub	eax, esi
; Line 957
	push	eax
	push	edx
	push	DWORD PTR _bp$[esp+8]
	call	_dgram_write
	add	esp, 12					; 0000000cH
	pop	esi
; Line 959
	ret	0
_dgram_puts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_read
_TEXT	SEGMENT
_sa$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_b$ = 8							; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_dgram_read PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 371
	mov	eax, 36					; 00000024H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+36], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _b$[esp+40]
	push	edi
	mov	edi, DWORD PTR _out$[esp+44]
; Line 393
	mov	DWORD PTR _sa$[esp+48], 28		; 0000001cH
	mov	ebx, DWORD PTR [esi+32]
; Line 395
	test	edi, edi
	je	$LN10@dgram_read
; Line 396
	push	0
	call	DWORD PTR __imp__WSASetLastError@4
	xorps	xmm0, xmm0
; Line 397
	mov	DWORD PTR _sa$[esp+76], 0
; Line 398
	push	esi
	movups	XMMWORD PTR _sa$[esp+56], xmm0
	movq	QWORD PTR _sa$[esp+72], xmm0
	call	_dgram_adjust_rcv_timeout
	add	esp, 4
; Line 399
	lea	eax, DWORD PTR _sa$[esp+48]
	push	eax
	lea	eax, DWORD PTR _sa$[esp+56]
	push	eax
	push	0
	push	DWORD PTR _outl$[esp+56]
	push	edi
	push	DWORD PTR [esi+28]
	call	DWORD PTR __imp__recvfrom@24
; Line 405
	cmp	DWORD PTR [ebx+28], 0
	mov	edi, eax
	jne	SHORT $LN4@dgram_read
	test	edi, edi
	js	SHORT $LN4@dgram_read
; Line 406
	lea	eax, DWORD PTR _sa$[esp+52]
	push	eax
	push	0
	push	44					; 0000002cH
	push	esi
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
$LN4@dgram_read:
; Line 408
	push	15					; 0000000fH
	push	esi
	call	_BIO_clear_flags
	add	esp, 8
; Line 409
	test	edi, edi
	jns	SHORT $LN6@dgram_read
; Line 410
	push	edi
	call	_BIO_dgram_should_retry
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@dgram_read
; Line 411
	push	9
	push	esi
	call	_BIO_set_flags
	add	esp, 8
; Line 412
	call	DWORD PTR __imp__WSAGetLastError@0
	mov	DWORD PTR [ebx+32], eax
$LN6@dgram_read:
; Line 416
	push	esi
	call	_dgram_reset_rcv_timeout
	add	esp, 4
; Line 418
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 419
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
$LN10@dgram_read:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
_dgram_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _dgram_write
_TEXT	SEGMENT
_b$ = 8							; size = 4
_in$ = 12						; size = 4
_inl$ = 16						; size = 4
_dgram_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 422
	push	ebx
	push	esi
	push	edi
; Line 424
	mov	edi, DWORD PTR _b$[esp+8]
; Line 425
	push	0
	mov	ebx, DWORD PTR [edi+32]
	call	DWORD PTR __imp__WSASetLastError@4
; Line 427
	cmp	DWORD PTR [ebx+28], 0
	je	SHORT $LN2@dgram_writ
; Line 428
	push	0
	push	DWORD PTR _inl$[esp+12]
	push	DWORD PTR _in$[esp+16]
	push	DWORD PTR [edi+28]
	call	DWORD PTR __imp__send@16
	jmp	SHORT $LN25@dgram_writ
$LN2@dgram_writ:
; Line 432
	movzx	ecx, WORD PTR [ebx]
	mov	eax, 28					; 0000001cH
	cmp	ecx, 2
	jne	SHORT $LN4@dgram_writ
; Line 433
	lea	eax, DWORD PTR [ecx+14]
	jmp	SHORT $LN6@dgram_writ
$LN4@dgram_writ:
; Line 435
	cmp	ecx, 23					; 00000017H
	mov	edx, eax
	cmove	eax, edx
$LN6@dgram_writ:
; Line 441
	push	eax
	push	ebx
	push	0
	push	DWORD PTR _inl$[esp+20]
	push	DWORD PTR _in$[esp+24]
	push	DWORD PTR [edi+28]
	call	DWORD PTR __imp__sendto@24
$LN25@dgram_writ:
; Line 445
	push	15					; 0000000fH
	push	edi
	mov	esi, eax
	call	_BIO_clear_flags
	add	esp, 8
; Line 446
	test	esi, esi
	jg	SHORT $LN22@dgram_writ
; Line 1982
	je	SHORT $LN12@dgram_writ
	cmp	esi, -1
	jne	SHORT $LN22@dgram_writ
$LN12@dgram_writ:
; Line 1983
	call	DWORD PTR __imp__WSAGetLastError@0
; Line 2000
	cmp	eax, 112				; 00000070H
	jg	SHORT $LN20@dgram_writ
	je	SHORT $LN17@dgram_writ
	cmp	eax, 4
	je	SHORT $LN17@dgram_writ
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN17@dgram_writ
	cmp	eax, 103				; 00000067H
	je	SHORT $LN17@dgram_writ
; Line 459
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 460
	ret	0
$LN20@dgram_writ:
; Line 2000
	sub	eax, 134				; 00000086H
	je	SHORT $LN17@dgram_writ
	sub	eax, 6
	je	SHORT $LN17@dgram_writ
	sub	eax, 9895				; 000026a7H
	jne	SHORT $LN22@dgram_writ
$LN17@dgram_writ:
; Line 448
	push	10					; 0000000aH
	push	edi
	call	_BIO_set_flags
	add	esp, 8
; Line 449
	call	DWORD PTR __imp__WSAGetLastError@0
	mov	DWORD PTR [ebx+32], eax
$LN22@dgram_writ:
; Line 459
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 460
	ret	0
_dgram_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_new_dgram
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_close_flag$ = 12					; size = 4
_BIO_new_dgram PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 209
	push	esi
; Line 212
	push	OFFSET _methods_dgramp
	call	_BIO_new
	mov	esi, eax
	add	esp, 4
; Line 213
	test	esi, esi
	jne	SHORT $LN2@BIO_new_dg
	pop	esi
; Line 217
	ret	0
$LN2@BIO_new_dg:
; Line 215
	push	DWORD PTR _fd$[esp]
	push	DWORD PTR _close_flag$[esp+4]
	push	104					; 00000068H
	push	esi
	call	_BIO_int_ctrl
	add	esp, 16					; 00000010H
; Line 216
	mov	eax, esi
	pop	esi
; Line 217
	ret	0
_BIO_new_dgram ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_dgram_non_fatal_error
_TEXT	SEGMENT
_err$ = 8						; size = 4
_BIO_dgram_non_fatal_error PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 2000
	mov	eax, DWORD PTR _err$[esp-4]
	cmp	eax, 112				; 00000070H
	jg	SHORT $LN7@BIO_dgram_
	je	SHORT $LN4@BIO_dgram_
	cmp	eax, 4
	je	SHORT $LN4@BIO_dgram_
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN4@BIO_dgram_
	cmp	eax, 103				; 00000067H
	jmp	SHORT $LN8@BIO_dgram_
$LN7@BIO_dgram_:
	sub	eax, 134				; 00000086H
	je	SHORT $LN4@BIO_dgram_
	sub	eax, 6
	je	SHORT $LN4@BIO_dgram_
	sub	eax, 9895				; 000026a7H
$LN8@BIO_dgram_:
	je	SHORT $LN4@BIO_dgram_
; Line 2050
	xor	eax, eax
; Line 2051
	ret	0
$LN4@BIO_dgram_:
; Line 2045
	mov	eax, 1
; Line 2051
	ret	0
_BIO_dgram_non_fatal_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_s_datagram
_TEXT	SEGMENT
_BIO_s_datagram PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_dgram.c
; Line 205
	mov	eax, OFFSET _methods_dgramp
; Line 206
	ret	0
_BIO_s_datagram ENDP
_TEXT	ENDS
END
