; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\apps\engine.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CB@CIFJBFDD@usage?3?5engine?5opts?5?$FLengine?5?4?4?4?$FN?6@ ; `string'
PUBLIC	??_C@_0EL@HNILKGAK@?5?9v?$FLv?$FLv?$FLv?$FN?$FN?$FN?5?9?5verbose?5mode?0?5for@ ; `string'
PUBLIC	??_C@_0EJ@ENDAEJDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vv?5will?5addition@ ; `string'
PUBLIC	??_C@_0EE@HDMNLMNH@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvv?5will?5also?5ad@ ; `string'
PUBLIC	??_C@_0DK@EIMIKGBM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvvv?5will?5also?5s@ ; `string'
PUBLIC	??_C@_0DM@HHPDALF@?5?9c?5?5?5?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@ ; `string'
PUBLIC	??_C@_0EG@KCIGLAOK@?5?9t?$FLt?$FN?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@ ; `string'
PUBLIC	??_C@_0EF@MIKDKENC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9tt?5will?5display?5@ ; `string'
PUBLIC	??_C@_0EK@PLLCEOFA@?5?9pre?5?$DMcmd?$DO?5?5?9?5runs?5command?5?8cmd@ ; `string'
PUBLIC	??_C@_0CL@GJBLAHLL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5to?5load?5it?5?$CIif?5?9t@ ; `string'
PUBLIC	??_C@_0EH@PBCIGEHG@?5?9post?5?$DMcmd?$DO?5?9?5runs?5command?5?8cmd@ ; `string'
PUBLIC	??_C@_0DD@FMINHHIC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CIonly?5used?5if?5?9t?5@ ; `string'
PUBLIC	??_C@_0EM@OEFBFBJF@?5NB?3?5?9pre?5and?5?9post?5will?5be?5appl@ ; `string'
PUBLIC	??_C@_0DI@HIOHJPKP@?5line?0?5or?5all?5supported?5ENGINEs?5@ ; `string'
PUBLIC	??_C@_0EG@PIDNHCOE@?5Eg?4?5?8?9pre?5?$CCSO_PATH?3?1lib?1libdriv@ ; `string'
PUBLIC	??_C@_0CA@PHHAOAAH@?5argument?5?$CC?1lib?1libdriver?4so?$CC?4?6?$AA@ ; `string'
CONST	SEGMENT
?line_wrap@?1??util_verbose@@9@9 DD 04eH		; `util_verbose'::`2'::line_wrap
CONST	ENDS
;	COMDAT ??_C@_0CA@PHHAOAAH@?5argument?5?$CC?1lib?1libdriver?4so?$CC?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@PHHAOAAH@?5argument?5?$CC?1lib?1libdriver?4so?$CC?4?6?$AA@ DB ' '
	DB	'argument "/lib/libdriver.so".', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@PIDNHCOE@?5Eg?4?5?8?9pre?5?$CCSO_PATH?3?1lib?1libdriv@
CONST	SEGMENT
??_C@_0EG@PIDNHCOE@?5Eg?4?5?8?9pre?5?$CCSO_PATH?3?1lib?1libdriv@ DB ' Eg.'
	DB	' ''-pre "SO_PATH:/lib/libdriver.so"'' calls command "SO_PATH"'
	DB	' with', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HIOHJPKP@?5line?0?5or?5all?5supported?5ENGINEs?5@
CONST	SEGMENT
??_C@_0DI@HIOHJPKP@?5line?0?5or?5all?5supported?5ENGINEs?5@ DB ' line, or'
	DB	' all supported ENGINEs if none are specified.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@OEFBFBJF@?5NB?3?5?9pre?5and?5?9post?5will?5be?5appl@
CONST	SEGMENT
??_C@_0EM@OEFBFBJF@?5NB?3?5?9pre?5and?5?9post?5will?5be?5appl@ DB ' NB: -'
	DB	'pre and -post will be applied to all ENGINEs supplied on the '
	DB	'command', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FMINHHIC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CIonly?5used?5if?5?9t?5@
CONST	SEGMENT
??_C@_0DD@FMINHHIC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CIonly?5used?5if?5?9t?5@ DB ' '
	DB	'              (only used if -t is also provided)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@PBCIGEHG@?5?9post?5?$DMcmd?$DO?5?9?5runs?5command?5?8cmd@
CONST	SEGMENT
??_C@_0EH@PBCIGEHG@?5?9post?5?$DMcmd?$DO?5?9?5runs?5command?5?8cmd@ DB ' '
	DB	'-post <cmd> - runs command ''cmd'' against the ENGINE after l'
	DB	'oading it', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GJBLAHLL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5to?5load?5it?5?$CIif?5?9t@
CONST	SEGMENT
??_C@_0CL@GJBLAHLL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5to?5load?5it?5?$CIif?5?9t@ DB ' '
	DB	'              to load it (if -t is used)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@PLLCEOFA@?5?9pre?5?$DMcmd?$DO?5?5?9?5runs?5command?5?8cmd@
CONST	SEGMENT
??_C@_0EK@PLLCEOFA@?5?9pre?5?$DMcmd?$DO?5?5?9?5runs?5command?5?8cmd@ DB ' '
	DB	'-pre <cmd>  - runs command ''cmd'' against the ENGINE before '
	DB	'any attempts', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MIKDKENC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9tt?5will?5display?5@
CONST	SEGMENT
??_C@_0EF@MIKDKENC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9tt?5will?5display?5@ DB ' '
	DB	'              -tt will display error trace for unavailable en'
	DB	'gines', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@KCIGLAOK@?5?9t?$FLt?$FN?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@
CONST	SEGMENT
??_C@_0EG@KCIGLAOK@?5?9t?$FLt?$FN?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@ DB ' '
	DB	'-t[t]       - for each engine, check that they are really ava'
	DB	'ilable', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HHPDALF@?5?9c?5?5?5?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@
CONST	SEGMENT
??_C@_0DM@HHPDALF@?5?9c?5?5?5?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@ DB ' '
	DB	'-c          - for each engine, also list the capabilities', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EIMIKGBM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvvv?5will?5also?5s@
CONST	SEGMENT
??_C@_0DK@EIMIKGBM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvvv?5will?5also?5s@ DB ' '
	DB	'              -vvvv will also show internal input flags', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@HDMNLMNH@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvv?5will?5also?5ad@
CONST	SEGMENT
??_C@_0EE@HDMNLMNH@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvv?5will?5also?5ad@ DB ' '
	DB	'              -vvv will also add the input flags for each com'
	DB	'mand', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@ENDAEJDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vv?5will?5addition@
CONST	SEGMENT
??_C@_0EJ@ENDAEJDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vv?5will?5addition@ DB ' '
	DB	'              -vv will additionally display each command''s d'
	DB	'escription', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@HNILKGAK@?5?9v?$FLv?$FLv?$FLv?$FN?$FN?$FN?5?9?5verbose?5mode?0?5for@
CONST	SEGMENT
??_C@_0EL@HNILKGAK@?5?9v?$FLv?$FLv?$FLv?$FN?$FN?$FN?5?9?5verbose?5mode?0?5for@ DB ' '
	DB	'-v[v[v[v]]] - verbose mode, for each engine, list its ''contr'
	DB	'ol commands''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CIFJBFDD@usage?3?5engine?5opts?5?$FLengine?5?4?4?4?$FN?6@
CONST	SEGMENT
??_C@_0CB@CIFJBFDD@usage?3?5engine?5opts?5?$FLengine?5?4?4?4?$FN?6@ DB 'u'
	DB	'sage: engine opts [engine ...]', 0aH, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_engine_usage DD FLAT:??_C@_0CB@CIFJBFDD@usage?3?5engine?5opts?5?$FLengine?5?4?4?4?$FN?6@
	DD	FLAT:??_C@_0EL@HNILKGAK@?5?9v?$FLv?$FLv?$FLv?$FN?$FN?$FN?5?9?5verbose?5mode?0?5for@
	DD	FLAT:??_C@_0EJ@ENDAEJDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vv?5will?5addition@
	DD	FLAT:??_C@_0EE@HDMNLMNH@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvv?5will?5also?5ad@
	DD	FLAT:??_C@_0DK@EIMIKGBM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9vvvv?5will?5also?5s@
	DD	FLAT:??_C@_0DM@HHPDALF@?5?9c?5?5?5?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@
	DD	FLAT:??_C@_0EG@KCIGLAOK@?5?9t?$FLt?$FN?5?5?5?5?5?5?5?9?5for?5each?5engine?0?5@
	DD	FLAT:??_C@_0EF@MIKDKENC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?9tt?5will?5display?5@
	DD	FLAT:??_C@_0EK@PLLCEOFA@?5?9pre?5?$DMcmd?$DO?5?5?9?5runs?5command?5?8cmd@
	DD	FLAT:??_C@_0CL@GJBLAHLL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5to?5load?5it?5?$CIif?5?9t@
	DD	FLAT:??_C@_0EH@PBCIGEHG@?5?9post?5?$DMcmd?$DO?5?9?5runs?5command?5?8cmd@
	DD	FLAT:??_C@_0DD@FMINHHIC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CIonly?5used?5if?5?9t?5@
	DD	FLAT:??_C@_0EM@OEFBFBJF@?5NB?3?5?9pre?5and?5?9post?5will?5be?5appl@
	DD	FLAT:??_C@_0DI@HIOHJPKP@?5line?0?5or?5all?5supported?5ENGINEs?5@
	DD	FLAT:??_C@_0EG@PIDNHCOE@?5Eg?4?5?8?9pre?5?$CCSO_PATH?3?1lib?1libdriv@
	DD	FLAT:??_C@_0CA@PHHAOAAH@?5argument?5?$CC?1lib?1libdriver?4so?$CC?4?6?$AA@
	DD	00H
_DATA	ENDS
PUBLIC	_engine_main
PUBLIC	??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@	; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_0BE@MLPGEACJ@?$CFs?$CFs?$CIinput?5flags?$CJ?3?5?$AA@ ; `string'
PUBLIC	??_C@_0M@CKAOPFBI@?$DMno?5flags?$DO?6?$AA@	; `string'
PUBLIC	??_C@_0M@PDOHMIBC@?$FLInternal?$FN?5?$AA@	; `string'
PUBLIC	??_C@_07DBOJJFHC@NUMERIC?$AA@			; `string'
PUBLIC	??_C@_01DNKMNLPK@?$HM?$AA@			; `string'
PUBLIC	??_C@_06IGECGLFO@STRING?$AA@			; `string'
PUBLIC	??_C@_08JKLPLMPO@NO_INPUT?$AA@			; `string'
PUBLIC	??_C@_08CBNKDCCG@?$DM0x?$CF04X?$DO?$AA@		; `string'
PUBLIC	??_C@_0BD@JDIIEJIA@?5?5?$DMillegal?5flags?$CB?$DO?$AA@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BB@OCIBKIEO@?$DMno?5description?$DO?$AA@	; `string'
PUBLIC	??_C@_07KJFPOMFC@?$CFs?3?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0BP@NDDLPGNC@?$FLError?$FN?3?5internal?5stack?5error?6?$AA@ ; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_0CA@IHGFPMBA@?$FLError?$FN?3?5command?5name?5too?5long?6?$AA@ ; `string'
PUBLIC	??_C@_0P@NDKDJFKE@?$FLSuccess?$FN?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0P@LGMCLKEJ@?$FLFailure?$FN?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@		; `string'
PUBLIC	??_C@_02EJEOCNCO@?9v?$AA@			; `string'
PUBLIC	??_C@_01MHEDDDHA@v?$AA@				; `string'
PUBLIC	??_C@_02HOPLMLDK@?9c?$AA@			; `string'
PUBLIC	??_C@_02HLHIEPKM@?9t?$AA@			; `string'
PUBLIC	??_C@_01PFHFFBPC@t?$AA@				; `string'
PUBLIC	??_C@_04CEEMGABH@?9pre?$AA@			; `string'
PUBLIC	??_C@_05HCHMCFNF@?9post?$AA@			; `string'
PUBLIC	??_C@_02JNAPBCPB@?9h?$AA@			; `string'
PUBLIC	??_C@_02GIPFNJGC@?9?$DP?$AA@			; `string'
PUBLIC	??_C@_08JGBPHHBL@?$CI?$CFs?$CJ?5?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0BB@BFKIMFFL@Loaded?3?5?$CI?$CFs?$CJ?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03DICHAJGH@RSA?$AA@			; `string'
PUBLIC	??_C@_03ENFFABCE@DSA?$AA@			; `string'
PUBLIC	??_C@_02EPINMGPM@DH?$AA@			; `string'
PUBLIC	??_C@_04LGLHIBNK@RAND?$AA@			; `string'
PUBLIC	??_C@_06CFEHBLEG@?5?$FL?$CFs?$FN?6?$AA@		; `string'
PUBLIC	??_C@_0P@LLPNMFJD@?$FL?5available?5?$FN?6?$AA@	; `string'
PUBLIC	??_C@_0BB@KCPHCALN@?$FL?5unavailable?5?$FN?6?$AA@ ; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__strstr:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__strspn:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_push:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_CRYPTO_realloc:PROC
EXTRN	_BIO_new_fp:PROC
EXTRN	_BIO_puts:PROC
EXTRN	_BIO_free_all:PROC
EXTRN	_BIO_printf:PROC
EXTRN	_BUF_strlcat:PROC
EXTRN	_OBJ_nid2sn:PROC
EXTRN	_ERR_clear_error:PROC
EXTRN	_ERR_print_errors_fp:PROC
EXTRN	_ERR_print_errors:PROC
EXTRN	_ENGINE_get_first:PROC
EXTRN	_ENGINE_get_next:PROC
EXTRN	_ENGINE_by_id:PROC
EXTRN	_ENGINE_ctrl:PROC
EXTRN	_ENGINE_ctrl_cmd_string:PROC
EXTRN	_ENGINE_free:PROC
EXTRN	_ENGINE_get_id:PROC
EXTRN	_ENGINE_get_name:PROC
EXTRN	_ENGINE_get_RSA:PROC
EXTRN	_ENGINE_get_DSA:PROC
EXTRN	_ENGINE_get_DH:PROC
EXTRN	_ENGINE_get_RAND:PROC
EXTRN	_ENGINE_get_ciphers:PROC
EXTRN	_ENGINE_get_digests:PROC
EXTRN	_ENGINE_get_pkey_meths:PROC
EXTRN	_ENGINE_init:PROC
EXTRN	_ENGINE_finish:PROC
EXTRN	_load_config:PROC
EXTRN	_SSL_load_error_strings:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_bio_err:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BB@KCPHCALN@?$FL?5unavailable?5?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BB@KCPHCALN@?$FL?5unavailable?5?$FN?6?$AA@ DB '[ unavailable ]', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LLPNMFJD@?$FL?5available?5?$FN?6?$AA@
CONST	SEGMENT
??_C@_0P@LLPNMFJD@?$FL?5available?5?$FN?6?$AA@ DB '[ available ]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFEHBLEG@?5?$FL?$CFs?$FN?6?$AA@
CONST	SEGMENT
??_C@_06CFEHBLEG@?5?$FL?$CFs?$FN?6?$AA@ DB ' [%s]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LGLHIBNK@RAND?$AA@
CONST	SEGMENT
??_C@_04LGLHIBNK@RAND?$AA@ DB 'RAND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EPINMGPM@DH?$AA@
CONST	SEGMENT
??_C@_02EPINMGPM@DH?$AA@ DB 'DH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENFFABCE@DSA?$AA@
CONST	SEGMENT
??_C@_03ENFFABCE@DSA?$AA@ DB 'DSA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DICHAJGH@RSA?$AA@
CONST	SEGMENT
??_C@_03DICHAJGH@RSA?$AA@ DB 'RSA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BFKIMFFL@Loaded?3?5?$CI?$CFs?$CJ?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@BFKIMFFL@Loaded?3?5?$CI?$CFs?$CJ?5?$CFs?6?$AA@ DB 'Loaded: (%s)'
	DB	' %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGBPHHBL@?$CI?$CFs?$CJ?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_08JGBPHHBL@?$CI?$CFs?$CJ?5?$CFs?6?$AA@ DB '(%s) %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFNJGC@?9?$DP?$AA@
CONST	SEGMENT
??_C@_02GIPFNJGC@?9?$DP?$AA@ DB '-?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JNAPBCPB@?9h?$AA@
CONST	SEGMENT
??_C@_02JNAPBCPB@?9h?$AA@ DB '-h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HCHMCFNF@?9post?$AA@
CONST	SEGMENT
??_C@_05HCHMCFNF@?9post?$AA@ DB '-post', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEEMGABH@?9pre?$AA@
CONST	SEGMENT
??_C@_04CEEMGABH@?9pre?$AA@ DB '-pre', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PFHFFBPC@t?$AA@
CONST	SEGMENT
??_C@_01PFHFFBPC@t?$AA@ DB 't', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLHIEPKM@?9t?$AA@
CONST	SEGMENT
??_C@_02HLHIEPKM@?9t?$AA@ DB '-t', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HOPLMLDK@?9c?$AA@
CONST	SEGMENT
??_C@_02HOPLMLDK@?9c?$AA@ DB '-c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MHEDDDHA@v?$AA@
CONST	SEGMENT
??_C@_01MHEDDDHA@v?$AA@ DB 'v', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EJEOCNCO@?9v?$AA@
CONST	SEGMENT
??_C@_02EJEOCNCO@?9v?$AA@ DB '-v', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@ DB '     ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGMCLKEJ@?$FLFailure?$FN?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0P@LGMCLKEJ@?$FLFailure?$FN?3?5?$CFs?6?$AA@ DB '[Failure]: %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NDKDJFKE@?$FLSuccess?$FN?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0P@NDKDJFKE@?$FLSuccess?$FN?3?5?$CFs?6?$AA@ DB '[Success]: %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IHGFPMBA@?$FLError?$FN?3?5command?5name?5too?5long?6?$AA@
CONST	SEGMENT
??_C@_0CA@IHGFPMBA@?$FLError?$FN?3?5command?5name?5too?5long?6?$AA@ DB '['
	DB	'Error]: command name too long', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NDDLPGNC@?$FLError?$FN?3?5internal?5stack?5error?6?$AA@
CONST	SEGMENT
??_C@_0BP@NDDLPGNC@?$FLError?$FN?3?5internal?5stack?5error?6?$AA@ DB '[Er'
	DB	'ror]: internal stack error', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJFPOMFC@?$CFs?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_07KJFPOMFC@?$CFs?3?5?$CFs?6?$AA@ DB '%s: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OCIBKIEO@?$DMno?5description?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@OCIBKIEO@?$DMno?5description?$DO?$AA@ DB '<no description>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDIIEJIA@?5?5?$DMillegal?5flags?$CB?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@JDIIEJIA@?5?5?$DMillegal?5flags?$CB?$DO?$AA@ DB '  <illegal fla'
	DB	'gs!>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBNKDCCG@?$DM0x?$CF04X?$DO?$AA@
CONST	SEGMENT
??_C@_08CBNKDCCG@?$DM0x?$CF04X?$DO?$AA@ DB '<0x%04X>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKLPLMPO@NO_INPUT?$AA@
CONST	SEGMENT
??_C@_08JKLPLMPO@NO_INPUT?$AA@ DB 'NO_INPUT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGECGLFO@STRING?$AA@
CONST	SEGMENT
??_C@_06IGECGLFO@STRING?$AA@ DB 'STRING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM?$AA@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM?$AA@ DB '|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBOJJFHC@NUMERIC?$AA@
CONST	SEGMENT
??_C@_07DBOJJFHC@NUMERIC?$AA@ DB 'NUMERIC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PDOHMIBC@?$FLInternal?$FN?5?$AA@
CONST	SEGMENT
??_C@_0M@PDOHMIBC@?$FLInternal?$FN?5?$AA@ DB '[Internal] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKAOPFBI@?$DMno?5flags?$DO?6?$AA@
CONST	SEGMENT
??_C@_0M@CKAOPFBI@?$DMno?5flags?$DO?6?$AA@ DB '<no flags>', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MLPGEACJ@?$CFs?$CFs?$CIinput?5flags?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@MLPGEACJ@?$CFs?$CFs?$CIinput?5flags?$CJ?3?5?$AA@ DB '%s%s(input'
	DB	' flags): ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@
CONST	SEGMENT
??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@ DB '.\apps\engine.c', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _engine_main
_TEXT	SEGMENT
_bio_out$1$ = -44					; size = 4
_cap_buf$1 = -40					; size = 4
_cap_size$2 = -36					; size = 4
_nids$3 = -32						; size = 4
_engines$1$ = -28					; size = 4
_pre_cmds$1$ = -24					; size = 4
_post_cmds$1$ = -20					; size = 4
_list_cap$1$ = -16					; size = 4
_test_avail$1$ = -12					; size = 4
_test_avail_noise$1$ = -8				; size = 4
_verbose$1$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_engine_main PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\apps\engine.c
; Line 325
	mov	eax, 44					; 0000002cH
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 326
	mov	esi, 1
; Line 328
	mov	DWORD PTR _verbose$1$[esp+56], 0
	mov	DWORD PTR _list_cap$1$[esp+56], 0
	mov	DWORD PTR _test_avail$1$[esp+56], 0
	mov	DWORD PTR _test_avail_noise$1$[esp+56], 0
; Line 330
	call	_sk_new_null
	mov	DWORD PTR _engines$1$[esp+56], eax
; Line 331
	call	_sk_new_null
	mov	DWORD PTR _pre_cmds$1$[esp+56], eax
; Line 332
	call	_sk_new_null
	mov	DWORD PTR _post_cmds$1$[esp+56], eax
; Line 334
	xor	ebx, ebx
; Line 338
	call	_SSL_load_error_strings
; Line 340
	mov	eax, DWORD PTR _bio_err
	mov	ebp, DWORD PTR __imp____acrt_iob_func
	test	eax, eax
	jne	SHORT $LN22@engine_mai
; Line 341
	push	ebx
	push	2
	call	ebp
	add	esp, 4
	push	eax
	call	_BIO_new_fp
	add	esp, 8
	mov	DWORD PTR _bio_err, eax
$LN22@engine_mai:
; Line 343
	push	0
	push	eax
	call	_load_config
	add	esp, 8
	test	eax, eax
	je	$end$151
; Line 345
	push	edi
	push	0
	push	1
	call	ebp
	add	esp, 4
	push	eax
	call	_BIO_new_fp
; Line 353
	mov	ebx, DWORD PTR _argc$[esp+64]
	add	esp, 8
; Line 354
	mov	edi, DWORD PTR _argv$[esp+56]
	dec	ebx
	add	edi, 4
	mov	DWORD PTR _bio_out$1$[esp+60], eax
; Line 355
	cmp	ebx, 1
	jl	$LN43@engine_mai
	mov	ebp, DWORD PTR __imp__strncmp
	npad	2
$LL2@engine_mai:
; Line 356
	push	2
	push	OFFSET ??_C@_02EJEOCNCO@?9v?$AA@
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN24@engine_mai
; Line 357
	mov	ecx, DWORD PTR [edi]
	inc	ecx
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	2
$LL111@engine_mai:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL111@engine_mai
	push	OFFSET ??_C@_01MHEDDDHA@v?$AA@
	push	ecx
	sub	esi, edx
	call	DWORD PTR __imp__strspn
	add	esp, 8
	cmp	eax, esi
	jb	SHORT $LN110@engine_mai
; Line 359
	mov	esi, DWORD PTR [edi]
	inc	esi
	lea	ecx, DWORD PTR [esi+1]
$LL112@engine_mai:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL112@engine_mai
	sub	esi, ecx
	mov	DWORD PTR _verbose$1$[esp+60], esi
	cmp	esi, 4
	jle	$LN41@engine_mai
$LN110@engine_mai:
; Line 394
	mov	eax, DWORD PTR _engine_usage
	mov	esi, OFFSET _engine_usage
	test	eax, eax
	je	SHORT $LN139@engine_mai
	npad	10
$LL6@engine_mai:
; Line 395
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	DWORD PTR _bio_err
	call	_BIO_printf
	mov	eax, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [esi+4]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LL6@engine_mai
$LN139@engine_mai:
	mov	ebx, DWORD PTR _bio_out$1$[esp+60]
$LN146@engine_mai:
	mov	esi, 1
$LN147@engine_mai:
	pop	edi
$end$151:
; Line 497
	push	DWORD PTR _bio_err
	call	_ERR_print_errors
; Line 498
	push	OFFSET _identity
	push	DWORD PTR _engines$1$[esp+64]
	call	_sk_pop_free
; Line 499
	push	OFFSET _identity
	push	DWORD PTR _pre_cmds$1$[esp+72]
	call	_sk_pop_free
; Line 500
	push	OFFSET _identity
	push	DWORD PTR _post_cmds$1$[esp+80]
	call	_sk_pop_free
	add	esp, 28					; 0000001cH
; Line 501
	test	ebx, ebx
	je	SHORT $LN135@engine_mai
; Line 502
	push	ebx
	call	_BIO_free_all
	add	esp, 4
$LN135@engine_mai:
; Line 504
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 505
	add	esp, 44					; 0000002cH
	ret	0
$LN24@engine_mai:
; Line 361
	mov	esi, DWORD PTR [edi]
	mov	ecx, OFFSET ??_C@_02HOPLMLDK@?9c?$AA@
	mov	eax, esi
	npad	1
$LL113@engine_mai:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN114@engine_mai
	test	dl, dl
	je	SHORT $LN115@engine_mai
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN114@engine_mai
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL113@engine_mai
$LN115@engine_mai:
	xor	eax, eax
	jmp	SHORT $LN116@engine_mai
$LN114@engine_mai:
	sbb	eax, eax
	or	eax, 1
$LN116@engine_mai:
	test	eax, eax
	jne	SHORT $LN28@engine_mai
; Line 362
	mov	DWORD PTR _list_cap$1$[esp+60], 1
	jmp	$LN41@engine_mai
$LN28@engine_mai:
; Line 363
	push	2
	push	OFFSET ??_C@_02HLHIEPKM@?9t?$AA@
	push	esi
	call	ebp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN30@engine_mai
; Line 365
	mov	ecx, DWORD PTR [edi]
	inc	ecx
	mov	DWORD PTR _test_avail$1$[esp+60], 1
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL117@engine_mai:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL117@engine_mai
	push	OFFSET ??_C@_01PFHFFBPC@t?$AA@
	push	ecx
	sub	esi, edx
	call	DWORD PTR __imp__strspn
	add	esp, 8
	cmp	eax, esi
	jb	$LN110@engine_mai
; Line 367
	mov	ecx, DWORD PTR [edi]
	inc	ecx
	lea	edx, DWORD PTR [ecx+1]
	npad	3
$LL118@engine_mai:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL118@engine_mai
	sub	ecx, edx
	lea	esi, DWORD PTR [ecx-1]
	mov	DWORD PTR _test_avail_noise$1$[esp+60], esi
	cmp	esi, 1
	jg	$LN110@engine_mai
; Line 369
	jmp	$LN41@engine_mai
$LN30@engine_mai:
	mov	esi, DWORD PTR [edi]
	mov	ecx, OFFSET ??_C@_04CEEMGABH@?9pre?$AA@
	mov	eax, esi
$LL119@engine_mai:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN120@engine_mai
	test	dl, dl
	je	SHORT $LN121@engine_mai
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN120@engine_mai
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL119@engine_mai
$LN121@engine_mai:
	xor	eax, eax
	jmp	SHORT $LN122@engine_mai
$LN120@engine_mai:
	sbb	eax, eax
	or	eax, 1
$LN122@engine_mai:
	test	eax, eax
	jne	SHORT $LN34@engine_mai
; Line 371
	add	edi, 4
	sub	ebx, 1
; Line 372
	je	$LN110@engine_mai
; Line 374
	push	DWORD PTR [edi]
	push	DWORD PTR _pre_cmds$1$[esp+64]
	jmp	$LN148@engine_mai
$LN34@engine_mai:
; Line 375
	mov	ecx, OFFSET ??_C@_05HCHMCFNF@?9post?$AA@
	mov	eax, esi
	npad	2
$LL123@engine_mai:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN124@engine_mai
	test	dl, dl
	je	SHORT $LN125@engine_mai
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN124@engine_mai
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL123@engine_mai
$LN125@engine_mai:
	xor	eax, eax
	jmp	SHORT $LN126@engine_mai
$LN124@engine_mai:
	sbb	eax, eax
	or	eax, 1
$LN126@engine_mai:
	test	eax, eax
	jne	SHORT $LN37@engine_mai
; Line 377
	add	edi, 4
	sub	ebx, 1
; Line 378
	je	$LN110@engine_mai
; Line 380
	push	DWORD PTR [edi]
	push	DWORD PTR _post_cmds$1$[esp+64]
	jmp	SHORT $LN148@engine_mai
$LN37@engine_mai:
; Line 381
	push	2
	push	OFFSET ??_C@_02JNAPBCPB@?9h?$AA@
	push	esi
	call	ebp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN110@engine_mai
	mov	esi, DWORD PTR [edi]
	mov	ecx, OFFSET ??_C@_02GIPFNJGC@?9?$DP?$AA@
	mov	eax, esi
	npad	5
$LL127@engine_mai:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN128@engine_mai
	test	dl, dl
	je	SHORT $LN129@engine_mai
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN128@engine_mai
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL127@engine_mai
$LN129@engine_mai:
	xor	eax, eax
	jmp	SHORT $LN130@engine_mai
$LN128@engine_mai:
	sbb	eax, eax
	or	eax, 1
$LN130@engine_mai:
	test	eax, eax
	je	$LN110@engine_mai
; Line 385
	push	esi
	push	DWORD PTR _engines$1$[esp+64]
$LN148@engine_mai:
	call	_sk_push
	add	esp, 8
$LN41@engine_mai:
; Line 386
	dec	ebx
; Line 387
	add	edi, 4
	cmp	ebx, 1
	jge	$LL2@engine_mai
$LN43@engine_mai:
; Line 399
	mov	ebx, DWORD PTR _engines$1$[esp+60]
	push	ebx
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@engine_mai
; Line 400
	call	_ENGINE_get_first
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN8@engine_mai
$LL9@engine_mai:
; Line 401
	push	esi
	call	_ENGINE_get_id
	push	eax
	push	ebx
	call	_sk_push
	push	esi
	call	_ENGINE_get_next
	mov	esi, eax
	add	esp, 16					; 00000010H
	test	esi, esi
	jne	SHORT $LL9@engine_mai
$LN8@engine_mai:
; Line 405
	push	ebx
	xor	ebp, ebp
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	$LN11@engine_mai
$LL12@engine_mai:
; Line 406
	push	ebp
	push	ebx
	call	_sk_value
	mov	esi, eax
; Line 407
	push	esi
	call	_ENGINE_by_id
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	$LN45@engine_mai
; Line 408
	push	edi
	call	_ENGINE_get_name
; Line 412
	mov	ebx, DWORD PTR _bio_out$1$[esp+64]
	push	eax
	push	esi
	push	OFFSET ??_C@_08JGBPHHBL@?$CI?$CFs?$CJ?5?$CFs?6?$AA@
	push	ebx
	call	_BIO_printf
; Line 413
	push	OFFSET ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
	push	ebx
	push	DWORD PTR _pre_cmds$1$[esp+88]
	push	edi
	call	_util_do_cmds
; Line 414
	push	edi
	call	_ENGINE_get_id
	add	esp, 40					; 00000028H
	npad	2
$LL131@engine_mai:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [esi]
	jne	SHORT $LN132@engine_mai
	test	cl, cl
	je	SHORT $LN133@engine_mai
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [esi+1]
	jne	SHORT $LN132@engine_mai
	add	eax, 2
	add	esi, 2
	test	cl, cl
	jne	SHORT $LL131@engine_mai
$LN133@engine_mai:
	xor	eax, eax
	jmp	SHORT $LN134@engine_mai
$LN132@engine_mai:
	sbb	eax, eax
	or	eax, 1
$LN134@engine_mai:
	test	eax, eax
	je	SHORT $LN47@engine_mai
; Line 415
	push	edi
	call	_ENGINE_get_name
	add	esp, 4
	push	eax
	push	edi
	call	_ENGINE_get_id
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0BB@BFKIMFFL@Loaded?3?5?$CI?$CFs?$CJ?5?$CFs?6?$AA@
	push	ebx
	call	_BIO_printf
	add	esp, 16					; 00000010H
$LN47@engine_mai:
; Line 418
	cmp	DWORD PTR _list_cap$1$[esp+60], 0
	je	$LN48@engine_mai
; Line 428
	push	edi
	mov	DWORD PTR _cap_size$2[esp+64], 256	; 00000100H
	mov	DWORD PTR _cap_buf$1[esp+64], 0
	call	_ENGINE_get_RSA
	add	esp, 4
	test	eax, eax
	je	SHORT $LN49@engine_mai
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+68]
	push	OFFSET ??_C@_03DICHAJGH@RSA?$AA@
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN146@engine_mai
$LN49@engine_mai:
; Line 431
	push	edi
	call	_ENGINE_get_DSA
	add	esp, 4
	test	eax, eax
	je	SHORT $LN50@engine_mai
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+68]
	push	OFFSET ??_C@_03ENFFABCE@DSA?$AA@
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN146@engine_mai
$LN50@engine_mai:
; Line 434
	push	edi
	call	_ENGINE_get_DH
	add	esp, 4
	test	eax, eax
	je	SHORT $LN51@engine_mai
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+68]
	push	OFFSET ??_C@_02EPINMGPM@DH?$AA@
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN146@engine_mai
$LN51@engine_mai:
; Line 437
	push	edi
	call	_ENGINE_get_RAND
	add	esp, 4
	test	eax, eax
	je	SHORT $LN52@engine_mai
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+68]
	push	OFFSET ??_C@_04LGLHIBNK@RAND?$AA@
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN146@engine_mai
$LN52@engine_mai:
; Line 440
	push	edi
	call	_ENGINE_get_ciphers
	add	esp, 4
; Line 441
	test	eax, eax
	je	SHORT $skip_ciphers$152
; Line 443
	push	0
	lea	ecx, DWORD PTR _nids$3[esp+64]
	push	ecx
	push	0
	push	edi
	call	eax
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 444
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $skip_ciphers$152
	npad	2
$LL15@engine_mai:
; Line 445
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	mov	eax, DWORD PTR _nids$3[esp+68]
	push	DWORD PTR [eax+esi*4]
	call	_OBJ_nid2sn
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+72]
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN139@engine_mai
; Line 444
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL15@engine_mai
$skip_ciphers$152:
; Line 450
	push	edi
	call	_ENGINE_get_digests
	add	esp, 4
; Line 451
	test	eax, eax
	je	SHORT $skip_digests$153
; Line 453
	push	0
	lea	ecx, DWORD PTR _nids$3[esp+64]
	push	ecx
	push	0
	push	edi
	call	eax
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 454
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $skip_digests$153
	npad	8
$LL18@engine_mai:
; Line 455
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	mov	eax, DWORD PTR _nids$3[esp+68]
	push	DWORD PTR [eax+esi*4]
	call	_OBJ_nid2sn
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+72]
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN139@engine_mai
; Line 454
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL18@engine_mai
$skip_digests$153:
; Line 460
	push	edi
	call	_ENGINE_get_pkey_meths
	add	esp, 4
; Line 461
	test	eax, eax
	je	SHORT $skip_pmeths$154
; Line 463
	push	0
	lea	ecx, DWORD PTR _nids$3[esp+64]
	push	ecx
	push	0
	push	edi
	call	eax
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 464
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $skip_pmeths$154
	npad	8
$LL21@engine_mai:
; Line 465
	push	256					; 00000100H
	lea	eax, DWORD PTR _cap_size$2[esp+64]
	push	eax
	mov	eax, DWORD PTR _nids$3[esp+68]
	push	DWORD PTR [eax+esi*4]
	call	_OBJ_nid2sn
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _cap_buf$1[esp+72]
	push	eax
	call	_append_buf
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN139@engine_mai
; Line 464
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL21@engine_mai
$skip_pmeths$154:
; Line 469
	mov	eax, DWORD PTR _cap_buf$1[esp+60]
; Line 470
	mov	ebx, DWORD PTR _bio_out$1$[esp+60]
	test	eax, eax
	je	SHORT $LN59@engine_mai
; Line 469
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN59@engine_mai
; Line 470
	push	eax
	push	OFFSET ??_C@_06CFEHBLEG@?5?$FL?$CFs?$FN?6?$AA@
	push	ebx
	call	_BIO_printf
	add	esp, 12					; 0000000cH
$LN59@engine_mai:
; Line 472
	push	DWORD PTR _cap_buf$1[esp+60]
	call	_CRYPTO_free
	add	esp, 4
$LN48@engine_mai:
; Line 474
	cmp	DWORD PTR _test_avail$1$[esp+60], 0
	je	SHORT $LN62@engine_mai
; Line 475
	push	OFFSET ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ebx
	call	_BIO_printf
; Line 476
	push	edi
	call	_ENGINE_init
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN61@engine_mai
; Line 477
	push	OFFSET ??_C@_0P@LLPNMFJD@?$FL?5available?5?$FN?6?$AA@
	push	ebx
	call	_BIO_printf
; Line 478
	push	OFFSET ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
	push	ebx
	push	DWORD PTR _post_cmds$1$[esp+76]
	push	edi
	call	_util_do_cmds
; Line 479
	push	edi
	call	_ENGINE_finish
	add	esp, 28					; 0000001cH
; Line 480
	jmp	SHORT $LN62@engine_mai
$LN61@engine_mai:
; Line 481
	push	OFFSET ??_C@_0BB@KCPHCALN@?$FL?5unavailable?5?$FN?6?$AA@
	push	ebx
	call	_BIO_printf
	add	esp, 8
; Line 482
	cmp	DWORD PTR _test_avail_noise$1$[esp+60], 0
	je	SHORT $LN63@engine_mai
; Line 483
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	push	eax
	call	_ERR_print_errors_fp
	add	esp, 8
$LN63@engine_mai:
; Line 484
	call	_ERR_clear_error
$LN62@engine_mai:
; Line 487
	mov	eax, DWORD PTR _verbose$1$[esp+60]
	test	eax, eax
	jle	SHORT $LN64@engine_mai
	push	OFFSET ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
	push	ebx
	push	eax
	push	edi
	call	_util_verbose
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN146@engine_mai
$LN64@engine_mai:
; Line 489
	push	edi
	call	_ENGINE_free
; Line 490
	mov	ebx, DWORD PTR _engines$1$[esp+64]
	jmp	SHORT $LN149@engine_mai
$LN45@engine_mai:
; Line 491
	push	DWORD PTR _bio_err
	call	_ERR_print_errors
$LN149@engine_mai:
	add	esp, 4
	inc	ebp
	push	ebx
	call	_sk_num
	add	esp, 4
	cmp	ebp, eax
	jl	$LL12@engine_mai
$LN11@engine_mai:
	mov	ebx, DWORD PTR _bio_out$1$[esp+60]
; Line 494
	xor	esi, esi
	jmp	$LN147@engine_mai
_engine_main ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _util_do_cmds
_TEXT	SEGMENT
_e$GSCopy$1$ = -276					; size = 4
_num$1$ = -272						; size = 4
_arg$1$ = -268						; size = 4
_cmds$GSCopy$1$ = -264					; size = 4
_buf$1 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_e$ = 8							; size = 4
_cmds$ = 12						; size = 4
_bio_out$ = 16						; size = 4
_indent$ = 20						; size = 4
_util_do_cmds PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\apps\engine.c
; Line 285
	mov	eax, 276				; 00000114H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+276], eax
	mov	eax, DWORD PTR _e$[esp+272]
	push	ebp
	mov	ebp, DWORD PTR _bio_out$[esp+276]
	push	esi
	mov	esi, DWORD PTR _cmds$[esp+280]
	push	edi
; Line 286
	push	esi
	mov	DWORD PTR _e$GSCopy$1$[esp+292], eax
	mov	DWORD PTR _cmds$GSCopy$1$[esp+292], esi
	call	_sk_num
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR _num$1$[esp+288], edi
; Line 288
	test	edi, edi
	jns	SHORT $LN5@util_do_cm
; Line 289
	push	OFFSET ??_C@_0BP@NDDLPGNC@?$FLError?$FN?3?5internal?5stack?5error?6?$AA@
	push	ebp
	call	_BIO_printf
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
; Line 320
	mov	ecx, DWORD PTR __$ArrayPad$[esp+276]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	ret	0
$LN5@util_do_cm:
	push	ebx
; Line 292
	xor	ebx, ebx
	test	edi, edi
	jle	$LN23@util_do_cm
	npad	4
$LL4@util_do_cm:
; Line 295
	push	ebx
	push	esi
	call	_sk_value
	mov	esi, eax
; Line 298
	push	OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	push	esi
	call	DWORD PTR __imp__strstr
	add	esp, 16					; 00000010H
	mov	DWORD PTR _arg$1$[esp+292], eax
	test	eax, eax
	jne	SHORT $LN6@util_do_cm
; Line 299
	push	eax
	push	eax
	push	esi
	push	DWORD PTR _e$GSCopy$1$[esp+304]
	call	_ENGINE_ctrl_cmd_string
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN21@util_do_cm
$LN11@util_do_cm:
; Line 316
	push	esi
	push	OFFSET ??_C@_0P@LGMCLKEJ@?$FLFailure?$FN?3?5?$CFs?6?$AA@
	push	ebp
	call	_BIO_printf
; Line 317
	push	ebp
	call	_ERR_print_errors
	add	esp, 16					; 00000010H
$LN2@util_do_cm:
; Line 292
	mov	esi, DWORD PTR _cmds$GSCopy$1$[esp+292]
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $LL4@util_do_cm
; Line 302
	jmp	SHORT $LN23@util_do_cm
$LN6@util_do_cm:
	mov	edi, eax
	sub	edi, esi
	cmp	edi, 254				; 000000feH
	jg	SHORT $LN17@util_do_cm
; Line 306
	push	edi
	lea	eax, DWORD PTR _buf$1[esp+296]
	push	esi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 307
	cmp	edi, 256				; 00000100H
	jae	SHORT $LN25@util_do_cm
; Line 308
	mov	eax, DWORD PTR _arg$1$[esp+292]
; Line 310
	push	0
	inc	eax
	mov	BYTE PTR _buf$1[esp+edi+296], 0
	push	eax
	lea	eax, DWORD PTR _buf$1[esp+300]
	push	eax
	push	DWORD PTR _e$GSCopy$1$[esp+304]
	call	_ENGINE_ctrl_cmd_string
	mov	edi, DWORD PTR _num$1$[esp+308]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@util_do_cm
$LN21@util_do_cm:
; Line 314
	push	esi
	push	OFFSET ??_C@_0P@NDKDJFKE@?$FLSuccess?$FN?3?5?$CFs?6?$AA@
	push	ebp
	call	_BIO_printf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@util_do_cm
$LN17@util_do_cm:
; Line 303
	push	OFFSET ??_C@_0CA@IHGFPMBA@?$FLError?$FN?3?5command?5name?5too?5long?6?$AA@
	push	ebp
	call	_BIO_printf
	add	esp, 8
$LN23@util_do_cm:
; Line 320
	mov	ecx, DWORD PTR __$ArrayPad$[esp+292]
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	ret	0
$LN25@util_do_cm:
; Line 307
	call	___report_rangecheckfailure
$LN26@util_do_cm:
$LN24@util_do_cm:
	int	3
_util_do_cmds ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _util_verbose
_TEXT	SEGMENT
_num$1$ = -12						; size = 4
_ret$1$ = -8						; size = 4
_cmds$1$ = -4						; size = 4
_e$ = 8							; size = 4
_verbose$ = 12						; size = 4
_bio_out$ = 16						; size = 4
_indent$ = 20						; size = 4
_util_verbose PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\apps\engine.c
; Line 185
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebx
; Line 194
	mov	ebx, DWORD PTR _e$[esp+12]
	push	ebp
	push	esi
	push	edi
	xor	esi, esi
	mov	DWORD PTR _ret$1$[esp+28], 0
	push	esi
	push	esi
	push	esi
	push	10					; 0000000aH
	push	ebx
	xor	ebp, ebp
	xor	edi, edi
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN6@util_verbo
	push	esi
	push	esi
	push	esi
	push	11					; 0000000bH
	push	ebx
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	mov	DWORD PTR _num$1$[esp+28], eax
	test	eax, eax
	jle	$LN6@util_verbo
; Line 203
	call	_sk_new_null
	mov	DWORD PTR _cmds$1$[esp+28], eax
; Line 205
	test	eax, eax
	je	$LN28@util_verbo
	mov	eax, DWORD PTR _num$1$[esp+28]
	jmp	SHORT $LN4@util_verbo
$LL45@util_verbo:
	mov	ebx, DWORD PTR _e$[esp+24]
$LN4@util_verbo:
; Line 211
	push	0
	push	0
	push	eax
	push	18					; 00000012H
	push	ebx
	call	_ENGINE_ctrl
	mov	ebx, eax
	add	esp, 20					; 00000014H
	test	ebx, ebx
	js	$err$47
; Line 213
	test	bl, 8
	je	SHORT $LN10@util_verbo
	cmp	DWORD PTR _verbose$[esp+24], 4
	jl	$LN44@util_verbo
$LN10@util_verbo:
; Line 216
	push	0
	push	0
	push	DWORD PTR _num$1$[esp+36]
	push	14					; 0000000eH
	push	DWORD PTR _e$[esp+40]
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$err$47
; Line 218
	push	218					; 000000daH
	inc	eax
	push	OFFSET ??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
	test	ebp, ebp
	je	$err$47
; Line 221
	push	0
	push	ebp
	push	DWORD PTR _num$1$[esp+36]
	push	15					; 0000000fH
	push	DWORD PTR _e$[esp+40]
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$err$47
; Line 225
	push	0
	push	0
	push	DWORD PTR _num$1$[esp+36]
	push	16					; 00000010H
	push	DWORD PTR _e$[esp+40]
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	test	eax, eax
	js	$err$47
; Line 227
	jle	SHORT $LN17@util_verbo
; Line 228
	push	228					; 000000e4H
	inc	eax
	push	OFFSET ??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	$err$47
; Line 231
	push	0
	push	edi
	push	DWORD PTR _num$1$[esp+36]
	push	17					; 00000011H
	push	DWORD PTR _e$[esp+40]
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$err$47
$LN17@util_verbo:
; Line 237
	mov	eax, DWORD PTR _bio_out$[esp+24]
	test	esi, esi
	jne	SHORT $LN18@util_verbo
	push	DWORD PTR _indent$[esp+24]
	push	eax
	call	_BIO_puts
	add	esp, 8
	mov	esi, eax
	jmp	SHORT $LN19@util_verbo
$LN18@util_verbo:
; Line 240
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	push	eax
	call	_BIO_printf
	add	esp, 8
	add	esi, eax
$LN19@util_verbo:
; Line 241
	cmp	DWORD PTR _verbose$[esp+24], 1
	jne	SHORT $LN20@util_verbo
; Line 245
	mov	ebx, DWORD PTR _indent$[esp+24]
	mov	ecx, ebx
	lea	edx, DWORD PTR [ecx+1]
$LL42@util_verbo:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL42@util_verbo
	sub	ecx, edx
	cmp	esi, ecx
	jle	SHORT $LN22@util_verbo
	mov	ecx, ebp
	lea	edx, DWORD PTR [ecx+1]
$LL43@util_verbo:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL43@util_verbo
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+esi]
	cmp	eax, 78					; 0000004eH
	jle	SHORT $LN22@util_verbo
; Line 247
	mov	esi, DWORD PTR _bio_out$[esp+24]
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	esi
	call	_BIO_printf
; Line 248
	push	ebx
	push	esi
	call	_BIO_puts
	add	esp, 16					; 00000010H
	mov	esi, eax
$LN22@util_verbo:
; Line 250
	mov	ebx, DWORD PTR _bio_out$[esp+24]
	push	ebp
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ebx
	call	_BIO_printf
	add	esp, 12					; 0000000cH
	add	esi, eax
; Line 251
	jmp	SHORT $LN21@util_verbo
$LN20@util_verbo:
; Line 253
	mov	esi, DWORD PTR _bio_out$[esp+24]
	test	edi, edi
	mov	eax, OFFSET ??_C@_0BB@OCIBKIEO@?$DMno?5description?$DO?$AA@
	cmovne	eax, edi
	push	eax
	push	ebp
	push	OFFSET ??_C@_07KJFPOMFC@?$CFs?3?5?$CFs?6?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 16					; 00000010H
; Line 256
	cmp	DWORD PTR _verbose$[esp+24], 3
	jl	SHORT $LN23@util_verbo
	push	DWORD PTR _indent$[esp+24]
	push	ebx
	push	esi
	call	_util_flags
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$47
$LN23@util_verbo:
; Line 258
	xor	esi, esi
$LN44@util_verbo:
	mov	ebx, DWORD PTR _bio_out$[esp+24]
$LN21@util_verbo:
; Line 261
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
; Line 262
	xor	ebp, ebp
; Line 263
	test	edi, edi
	je	SHORT $LN24@util_verbo
; Line 264
	push	edi
	call	_CRYPTO_free
	add	esp, 4
; Line 265
	xor	edi, edi
$LN24@util_verbo:
; Line 268
	push	0
	push	0
	push	DWORD PTR _num$1$[esp+36]
	push	12					; 0000000cH
	push	DWORD PTR _e$[esp+40]
	call	_ENGINE_ctrl
	add	esp, 20					; 00000014H
	mov	DWORD PTR _num$1$[esp+28], eax
; Line 269
	test	eax, eax
	jg	$LL45@util_verbo
; Line 270
	test	esi, esi
	jle	SHORT $LN25@util_verbo
; Line 271
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	ebx
	call	_BIO_printf
	add	esp, 8
$LN25@util_verbo:
; Line 272
	mov	DWORD PTR _ret$1$[esp+28], 1
$err$47:
; Line 275
	push	OFFSET _identity
	push	DWORD PTR _cmds$1$[esp+32]
	call	_sk_pop_free
	add	esp, 8
; Line 276
	test	ebp, ebp
	je	SHORT $LN27@util_verbo
; Line 277
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$LN27@util_verbo:
; Line 278
	test	edi, edi
	je	SHORT $LN28@util_verbo
; Line 279
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN28@util_verbo:
; Line 280
	mov	eax, DWORD PTR _ret$1$[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 281
	add	esp, 12					; 0000000cH
	ret	0
$LN6@util_verbo:
	pop	edi
	pop	esi
	pop	ebp
; Line 200
	mov	eax, 1
	pop	ebx
; Line 281
	add	esp, 12					; 0000000cH
	ret	0
_util_verbose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _util_flags
_TEXT	SEGMENT
_bio_out$ = 8						; size = 4
_flags$ = 12						; size = 4
_indent$ = 16						; size = 4
_util_flags PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\apps\engine.c
; Line 129
	mov	eax, DWORD PTR _indent$[esp-4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _bio_out$[esp+8]
	xor	ebp, ebp
	push	edi
	push	eax
	push	eax
	push	OFFSET ??_C@_0BE@MLPGEACJ@?$CFs?$CFs?$CIinput?5flags?$CJ?3?5?$AA@
	push	esi
	xor	edi, edi
	call	_BIO_printf
; Line 130
	mov	ebx, DWORD PTR _flags$[esp+28]
	add	esp, 16					; 00000010H
	test	ebx, ebx
	jne	SHORT $LN2@util_flags
; Line 131
	push	OFFSET ??_C@_0M@CKAOPFBI@?$DMno?5flags?$DO?6?$AA@
; Line 179
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 180
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 181
	ret	0
$LN2@util_flags:
; Line 138
	test	bl, 8
	je	SHORT $LN3@util_flags
; Line 139
	push	OFFSET ??_C@_0M@PDOHMIBC@?$FLInternal?$FN?5?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
$LN3@util_flags:
; Line 142
	test	bl, 1
	je	SHORT $LN4@util_flags
; Line 143
	push	OFFSET ??_C@_07DBOJJFHC@NUMERIC?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 144
	mov	edi, 1
$LN4@util_flags:
; Line 152
	test	bl, 2
	je	SHORT $LN5@util_flags
; Line 153
	test	edi, edi
	je	SHORT $LN6@util_flags
; Line 154
	push	OFFSET ??_C@_01DNKMNLPK@?$HM?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 155
	mov	ebp, 1
$LN6@util_flags:
; Line 157
	push	OFFSET ??_C@_06IGECGLFO@STRING?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 158
	mov	edi, 1
$LN5@util_flags:
; Line 160
	test	bl, 4
	je	SHORT $LN7@util_flags
; Line 161
	test	edi, edi
	je	SHORT $LN8@util_flags
; Line 162
	push	OFFSET ??_C@_01DNKMNLPK@?$HM?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 163
	mov	ebp, 1
$LN8@util_flags:
; Line 165
	push	OFFSET ??_C@_08JKLPLMPO@NO_INPUT?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 166
	mov	edi, 1
$LN7@util_flags:
; Line 169
	and	ebx, -16				; fffffff0H
; Line 172
	je	SHORT $LN9@util_flags
; Line 173
	test	edi, edi
	je	SHORT $LN10@util_flags
; Line 174
	push	OFFSET ??_C@_01DNKMNLPK@?$HM?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
$LN10@util_flags:
; Line 175
	push	ebx
	push	OFFSET ??_C@_08CBNKDCCG@?$DM0x?$CF04X?$DO?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 12					; 0000000cH
$LN9@util_flags:
; Line 177
	test	ebp, ebp
	je	SHORT $LN11@util_flags
; Line 178
	push	OFFSET ??_C@_0BD@JDIIEJIA@?5?5?$DMillegal?5flags?$CB?$DO?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
$LN11@util_flags:
; Line 179
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	esi
	call	_BIO_printf
	add	esp, 8
; Line 180
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 181
	ret	0
_util_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _append_buf
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_s$ = 12						; size = 4
_size$ = 16						; size = 4
_step$ = 20						; size = 4
_append_buf PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\apps\engine.c
; Line 101
	push	ebx
; Line 102
	mov	ebx, DWORD PTR _step$[esp]
	push	esi
	mov	esi, DWORD PTR _buf$[esp+4]
	push	edi
	mov	edi, DWORD PTR _size$[esp+8]
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN2@append_buf
; Line 104
	push	104					; 00000068H
	push	OFFSET ??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@
	push	ebx
	mov	DWORD PTR [edi], ebx
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
; Line 105
	test	eax, eax
	jne	SHORT $LN3@append_buf
$LN10@append_buf:
	pop	edi
	pop	esi
; Line 106
	xor	eax, eax
	pop	ebx
; Line 123
	ret	0
$LN3@append_buf:
; Line 107
	mov	BYTE PTR [eax], 0
$LN2@append_buf:
; Line 110
	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL8@append_buf:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL8@append_buf
	sub	ecx, edx
	mov	edx, DWORD PTR _s$[esp+8]
	push	ebp
	lea	ebp, DWORD PTR [edx+1]
$LL9@append_buf:
	mov	al, BYTE PTR [edx]
	inc	edx
	test	al, al
	jne	SHORT $LL9@append_buf
	sub	edx, ebp
	mov	ebp, DWORD PTR [edi]
	lea	eax, DWORD PTR [edx+ecx]
	cmp	eax, ebp
	jb	SHORT $LN4@append_buf
; Line 112
	push	112					; 00000070H
	lea	eax, DWORD PTR [ebx+ebp]
	push	OFFSET ??_C@_0BA@EAJHHCLJ@?4?2apps?2engine?4c?$AA@
	push	eax
	mov	DWORD PTR [edi], eax
	push	DWORD PTR [esi]
	call	_CRYPTO_realloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi], eax
$LN4@append_buf:
; Line 115
	mov	eax, DWORD PTR [esi]
	pop	ebp
	test	eax, eax
	je	SHORT $LN10@append_buf
; Line 118
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN6@append_buf
; Line 119
	push	DWORD PTR [edi]
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	push	eax
	call	_BUF_strlcat
	add	esp, 12					; 0000000cH
$LN6@append_buf:
; Line 120
	push	DWORD PTR [edi]
	push	DWORD PTR _s$[esp+12]
	push	DWORD PTR [esi]
	call	_BUF_strlcat
	add	esp, 12					; 0000000cH
; Line 122
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 123
	ret	0
_append_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _identity
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_identity PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\apps\engine.c
; Line 98
	ret	0
_identity ENDP
_TEXT	ENDS
END
