; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_PEM_version
CONST	SEGMENT
_PEM_version DB	'PEM part of OpenSSL 1.0.2h  3 May 2016', 00H
	ORG $+1
?map@?1??PEM_dek_info@@9@9 DB '0123456789ABCDEF', 00H	; `PEM_dek_info'::`2'::map
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_PEM_get_EVP_CIPHER_INFO
PUBLIC	_PEM_do_header
PUBLIC	_PEM_read_bio
PUBLIC	_PEM_write_bio
PUBLIC	_PEM_bytes_read_bio
PUBLIC	_PEM_ASN1_write_bio
PUBLIC	_PEM_read
PUBLIC	_PEM_write
PUBLIC	_PEM_ASN1_read
PUBLIC	_PEM_ASN1_write
PUBLIC	_PEM_def_callback
PUBLIC	_PEM_proc_type
PUBLIC	_PEM_dek_info
PUBLIC	_pem_check_suffix
PUBLIC	??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@ ; `string'
PUBLIC	??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; `string'
PUBLIC	??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@ ; `string'
PUBLIC	??_C@_09NEFHHFED@ENCRYPTED?$AA@			; `string'
PUBLIC	??_C@_09ENKIIODD@MIC?9CLEAR?$AA@		; `string'
PUBLIC	??_C@_08HNLJNNOE@MIC?9ONLY?$AA@			; `string'
PUBLIC	??_C@_08JNPHPJPC@BAD?9TYPE?$AA@			; `string'
PUBLIC	??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@		; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@	; `string'
PUBLIC	??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@	; `string'
PUBLIC	??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@		; `string'
PUBLIC	??_C@_0L@MBJDOOAB@PARAMETERS?$AA@		; `string'
PUBLIC	??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@	; `string'
PUBLIC	??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@		; `string'
PUBLIC	??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@	; `string'
PUBLIC	??_C@_0M@BFIJENPO@CERTIFICATE?$AA@		; `string'
PUBLIC	??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ ; `string'
PUBLIC	??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@	; `string'
PUBLIC	??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@	; `string'
PUBLIC	??_C@_05BKMMPIPN@PKCS7?$AA@			; `string'
PUBLIC	??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@ ; `string'
PUBLIC	??_C@_03LOMOMHDE@CMS?$AA@			; `string'
PUBLIC	??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@		; `string'
PUBLIC	??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@ ; `string'
PUBLIC	??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@	; `string'
PUBLIC	??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@		; `string'
PUBLIC	??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@		; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_OpenSSLDie:PROC
EXTRN	_BUF_MEM_new:PROC
EXTRN	_BUF_MEM_free:PROC
EXTRN	_BUF_MEM_grow:PROC
EXTRN	_BUF_MEM_grow_clean:PROC
EXTRN	_BUF_strlcat:PROC
EXTRN	_BIO_s_file:PROC
EXTRN	_BIO_new:PROC
EXTRN	_BIO_free:PROC
EXTRN	_BIO_gets:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_peek_error:PROC
EXTRN	_ERR_add_error_data:PROC
EXTRN	_OBJ_nid2sn:PROC
EXTRN	_EVP_CIPHER_nid:PROC
EXTRN	_EVP_CIPHER_iv_length:PROC
EXTRN	_EVP_read_pw_string_min:PROC
EXTRN	_EVP_get_pw_prompt:PROC
EXTRN	_EVP_BytesToKey:PROC
EXTRN	_EVP_EncryptInit_ex:PROC
EXTRN	_EVP_EncryptUpdate:PROC
EXTRN	_EVP_EncryptFinal_ex:PROC
EXTRN	_EVP_DecryptInit_ex:PROC
EXTRN	_EVP_DecryptUpdate:PROC
EXTRN	_EVP_DecryptFinal_ex:PROC
EXTRN	_EVP_EncodeInit:PROC
EXTRN	_EVP_EncodeUpdate:PROC
EXTRN	_EVP_EncodeFinal:PROC
EXTRN	_EVP_DecodeInit:PROC
EXTRN	_EVP_DecodeUpdate:PROC
EXTRN	_EVP_DecodeFinal:PROC
EXTRN	_EVP_CIPHER_CTX_init:PROC
EXTRN	_EVP_CIPHER_CTX_cleanup:PROC
EXTRN	_EVP_md5:PROC
EXTRN	_EVP_get_cipherbyname:PROC
EXTRN	_EVP_PKEY_asn1_find_str:PROC
EXTRN	_RAND_pseudo_bytes:PROC
EXTRN	_RAND_add:PROC
EXTRN	_PEM_ASN1_read_bio:PROC
EXTRN	_ENGINE_finish:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@
CONST	SEGMENT
??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@ DB '-----END ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@
CONST	SEGMENT
??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@ DB '-----', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@
CONST	SEGMENT
??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@ DB '-----BEGIN ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@
CONST	SEGMENT
??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@ DB 'Proc-Type: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@
CONST	SEGMENT
??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@ DB 's'
	DB	'trlen(objstr) + 23 + 2 * enc->iv_len + 13 <= sizeof buf', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@ DB 'e'
	DB	'nc->iv_len <= (int)sizeof(iv)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@
CONST	SEGMENT
??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@ DB 'Expecting: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOMOMHDE@CMS?$AA@
CONST	SEGMENT
??_C@_03LOMOMHDE@CMS?$AA@ DB 'CMS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@
CONST	SEGMENT
??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@ DB 'PKCS #7 SIGNED DATA'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKMMPIPN@PKCS7?$AA@
CONST	SEGMENT
??_C@_05BKMMPIPN@PKCS7?$AA@ DB 'PKCS7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@
CONST	SEGMENT
??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@ DB 'TRUSTED CERTIFICATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@
CONST	SEGMENT
??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ DB 'CERTIFICATE REQUEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@
CONST	SEGMENT
??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ DB 'NEW CERTIFICATE REQ'
	DB	'UEST', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
CONST	SEGMENT
??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ DB 'CERTIFICATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@
CONST	SEGMENT
??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@ DB 'X509 CERTIFICATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ DB 'DH PARAMETERS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ DB 'X9.42 DH PARAMETERS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
CONST	SEGMENT
??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ DB 'PARAMETERS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ DB 'PRIVATE KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ DB 'ENCRYPTED PRIVATE KEY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@
CONST	SEGMENT
??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@ DB 'ANY PRIVATE KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@
CONST	SEGMENT
??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@ DB 'DEK-Info: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@
CONST	SEGMENT
??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@ DB 'Proc-Type: 4,', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNPHPJPC@BAD?9TYPE?$AA@
CONST	SEGMENT
??_C@_08JNPHPJPC@BAD?9TYPE?$AA@ DB 'BAD-TYPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HNLJNNOE@MIC?9ONLY?$AA@
CONST	SEGMENT
??_C@_08HNLJNNOE@MIC?9ONLY?$AA@ DB 'MIC-ONLY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ENKIIODD@MIC?9CLEAR?$AA@
CONST	SEGMENT
??_C@_09ENKIIODD@MIC?9CLEAR?$AA@ DB 'MIC-CLEAR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NEFHHFED@ENCRYPTED?$AA@
CONST	SEGMENT
??_C@_09NEFHHFED@ENCRYPTED?$AA@ DB 'ENCRYPTED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@
CONST	SEGMENT
??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@ DB 'phrase is'
	DB	' too short, needs to be at least %d chars', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
CONST	SEGMENT
??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ DB '.\crypto\pem\pem_'
	DB	'lib.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@
CONST	SEGMENT
??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@ DB 'Enter PEM pass phra'
	DB	'se:', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _pem_check_suffix
_TEXT	SEGMENT
_pem_str$ = 8						; size = 4
_suffix$ = 12						; size = 4
_pem_check_suffix PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 852
	push	ebx
	push	esi
	push	edi
; Line 853
	mov	edi, DWORD PTR _pem_str$[esp+8]
	mov	ecx, edi
	lea	edx, DWORD PTR [ecx+1]
	npad	4
$LL6@pem_check_:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL6@pem_check_
	sub	ecx, edx
; Line 854
	mov	edx, DWORD PTR _suffix$[esp+8]
	mov	esi, edx
	lea	ebx, DWORD PTR [esi+1]
$LL7@pem_check_:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL7@pem_check_
	sub	esi, ebx
; Line 856
	lea	eax, DWORD PTR [esi+1]
	cmp	eax, ecx
	jl	SHORT $LN2@pem_check_
$LN12@pem_check_:
	pop	edi
	pop	esi
; Line 857
	xor	eax, eax
	pop	ebx
; Line 865
	ret	0
$LN2@pem_check_:
; Line 858
	sub	ecx, esi
	add	ecx, edi
; Line 859
	mov	eax, ecx
	npad	2
$LL8@pem_check_:
	mov	bl, BYTE PTR [eax]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN9@pem_check_
	test	bl, bl
	je	SHORT $LN10@pem_check_
	mov	bl, BYTE PTR [eax+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN9@pem_check_
	add	eax, 2
	add	edx, 2
	test	bl, bl
	jne	SHORT $LL8@pem_check_
$LN10@pem_check_:
	xor	eax, eax
	jmp	SHORT $LN11@pem_check_
$LN9@pem_check_:
	sbb	eax, eax
	or	eax, 1
$LN11@pem_check_:
	test	eax, eax
	jne	SHORT $LN12@pem_check_
; Line 861
	dec	ecx
; Line 862
	cmp	BYTE PTR [ecx], 32			; 00000020H
	jne	SHORT $LN12@pem_check_
; Line 864
	sub	ecx, edi
	pop	edi
	pop	esi
	mov	eax, ecx
	pop	ebx
; Line 865
	ret	0
_pem_check_suffix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _check_pem
_TEXT	SEGMENT
_e$1 = -4						; size = 4
_nm$ = 8						; size = 4
_name$ = 12						; size = 4
_check_pem PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 183
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 185
	mov	esi, DWORD PTR _nm$[esp+4]
	mov	eax, esi
	push	edi
	mov	edi, DWORD PTR _name$[esp+8]
	mov	ecx, edi
$LL24@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN25@check_pem
	test	dl, dl
	je	SHORT $LN26@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN25@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL24@check_pem
$LN26@check_pem:
	xor	eax, eax
	jmp	SHORT $LN27@check_pem
$LN25@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN27@check_pem:
	test	eax, eax
	jne	SHORT $LN2@check_pem
$LN118@check_pem:
	pop	edi
; Line 186
	mov	eax, 1
	pop	esi
; Line 272
	pop	ecx
	ret	0
$LN2@check_pem:
; Line 190
	mov	ecx, OFFSET ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@
	mov	eax, edi
$LL28@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN29@check_pem
	test	dl, dl
	je	SHORT $LN30@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN29@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL28@check_pem
$LN30@check_pem:
	xor	eax, eax
	jmp	SHORT $LN31@check_pem
$LN29@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN31@check_pem:
	test	eax, eax
	jne	$LN3@check_pem
; Line 193
	mov	ecx, OFFSET ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
	mov	eax, esi
$LL32@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN33@check_pem
	test	dl, dl
	je	SHORT $LN34@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN33@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL32@check_pem
$LN34@check_pem:
	xor	eax, eax
	jmp	SHORT $LN35@check_pem
$LN33@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN35@check_pem:
	test	eax, eax
	je	SHORT $LN118@check_pem
; Line 195
	mov	ecx, OFFSET ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
	mov	eax, esi
$LL36@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN37@check_pem
	test	dl, dl
	je	SHORT $LN38@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN37@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL36@check_pem
$LN38@check_pem:
	xor	eax, eax
	jmp	SHORT $LN39@check_pem
$LN37@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN39@check_pem:
	test	eax, eax
	je	$LN118@check_pem
; Line 197
	push	OFFSET ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
	push	esi
	call	_pem_check_suffix
	add	esp, 8
; Line 198
	test	eax, eax
	jle	$LN22@check_pem
; Line 203
	push	eax
	push	esi
	push	0
	call	_EVP_PKEY_asn1_find_str
	add	esp, 12					; 0000000cH
; Line 204
	test	eax, eax
	je	$LN22@check_pem
	cmp	DWORD PTR [eax+92], 0
	je	$LN22@check_pem
; Line 186
	pop	edi
	mov	eax, 1
	pop	esi
; Line 272
	pop	ecx
	ret	0
$LN3@check_pem:
; Line 210
	mov	ecx, OFFSET ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
	mov	eax, edi
$LL40@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN41@check_pem
	test	dl, dl
	je	SHORT $LN42@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN41@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL40@check_pem
$LN42@check_pem:
	xor	eax, eax
	jmp	SHORT $LN43@check_pem
$LN41@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN43@check_pem:
	test	eax, eax
	jne	SHORT $LN8@check_pem
; Line 213
	push	OFFSET ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
	push	esi
	call	_pem_check_suffix
	add	esp, 8
; Line 214
	test	eax, eax
	jle	$LN22@check_pem
; Line 216
	push	eax
	lea	eax, DWORD PTR _e$1[esp+16]
	push	esi
	push	eax
	call	_EVP_PKEY_asn1_find_str
	add	esp, 12					; 0000000cH
; Line 217
	test	eax, eax
	je	$LN22@check_pem
; Line 219
	push	ebx
	xor	ebx, ebx
	cmp	DWORD PTR [eax+56], ebx
; Line 224
	mov	eax, DWORD PTR _e$1[esp+16]
	setne	bl
	test	eax, eax
	je	SHORT $LN13@check_pem
; Line 225
	push	eax
	call	_ENGINE_finish
	add	esp, 4
$LN13@check_pem:
; Line 227
	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
; Line 272
	pop	ecx
	ret	0
$LN8@check_pem:
; Line 233
	mov	ecx, OFFSET ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
	mov	eax, esi
$LL44@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN45@check_pem
	test	dl, dl
	je	SHORT $LN46@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN45@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL44@check_pem
$LN46@check_pem:
	xor	eax, eax
	jmp	SHORT $LN47@check_pem
$LN45@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN47@check_pem:
	test	eax, eax
	jne	SHORT $LN14@check_pem
	mov	ecx, OFFSET ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
	mov	eax, edi
$LL48@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN49@check_pem
	test	dl, dl
	je	SHORT $LN50@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN49@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL48@check_pem
$LN50@check_pem:
	xor	eax, eax
	jmp	SHORT $LN51@check_pem
$LN49@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN51@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN14@check_pem:
; Line 239
	mov	ecx, OFFSET ??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@
	mov	eax, esi
$LL52@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN53@check_pem
	test	dl, dl
	je	SHORT $LN54@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN53@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL52@check_pem
$LN54@check_pem:
	xor	eax, eax
	jmp	SHORT $LN55@check_pem
$LN53@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN55@check_pem:
	test	eax, eax
	jne	SHORT $LN15@check_pem
	mov	ecx, OFFSET ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
	mov	eax, edi
$LL56@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN57@check_pem
	test	dl, dl
	je	SHORT $LN58@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN57@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL56@check_pem
$LN58@check_pem:
	xor	eax, eax
	jmp	SHORT $LN59@check_pem
$LN57@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN59@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN15@check_pem:
; Line 242
	mov	ecx, OFFSET ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@
	mov	eax, esi
	npad	4
$LL60@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN61@check_pem
	test	dl, dl
	je	SHORT $LN62@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN61@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL60@check_pem
$LN62@check_pem:
	xor	eax, eax
	jmp	SHORT $LN63@check_pem
$LN61@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN63@check_pem:
	test	eax, eax
	jne	SHORT $LN16@check_pem
	mov	ecx, OFFSET ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@
	mov	eax, edi
$LL64@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN65@check_pem
	test	dl, dl
	je	SHORT $LN66@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN65@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL64@check_pem
$LN66@check_pem:
	xor	eax, eax
	jmp	SHORT $LN67@check_pem
$LN65@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN67@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN16@check_pem:
; Line 247
	mov	ecx, OFFSET ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
	mov	eax, esi
$LL68@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN69@check_pem
	test	dl, dl
	je	SHORT $LN70@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN69@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL68@check_pem
$LN70@check_pem:
	xor	eax, eax
	jmp	SHORT $LN71@check_pem
$LN69@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN71@check_pem:
	test	eax, eax
	jne	SHORT $LN17@check_pem
	mov	ecx, OFFSET ??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@
	mov	eax, edi
$LL72@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN73@check_pem
	test	dl, dl
	je	SHORT $LN74@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN73@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL72@check_pem
$LN74@check_pem:
	xor	eax, eax
	jmp	SHORT $LN75@check_pem
$LN73@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN75@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN17@check_pem:
; Line 251
	mov	ecx, OFFSET ??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@
	mov	eax, esi
$LL76@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN77@check_pem
	test	dl, dl
	je	SHORT $LN78@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN77@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL76@check_pem
$LN78@check_pem:
	xor	eax, eax
	jmp	SHORT $LN79@check_pem
$LN77@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN79@check_pem:
	test	eax, eax
	jne	SHORT $LN18@check_pem
	mov	ecx, OFFSET ??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@
	mov	eax, edi
$LL80@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN81@check_pem
	test	dl, dl
	je	SHORT $LN82@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN81@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL80@check_pem
$LN82@check_pem:
	xor	eax, eax
	jmp	SHORT $LN83@check_pem
$LN81@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN83@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN18@check_pem:
; Line 256
	mov	ecx, OFFSET ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
	mov	eax, esi
	npad	4
$LL84@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN85@check_pem
	test	dl, dl
	je	SHORT $LN86@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN85@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL84@check_pem
$LN86@check_pem:
	xor	eax, eax
	jmp	SHORT $LN87@check_pem
$LN85@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN87@check_pem:
	test	eax, eax
	jne	SHORT $LN19@check_pem
	mov	ecx, OFFSET ??_C@_05BKMMPIPN@PKCS7?$AA@
	mov	eax, edi
$LL88@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN89@check_pem
	test	dl, dl
	je	SHORT $LN90@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN89@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL88@check_pem
$LN90@check_pem:
	xor	eax, eax
	jmp	SHORT $LN91@check_pem
$LN89@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN91@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN19@check_pem:
; Line 259
	mov	ecx, OFFSET ??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@
	mov	eax, esi
$LL92@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN93@check_pem
	test	dl, dl
	je	SHORT $LN94@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN93@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL92@check_pem
$LN94@check_pem:
	xor	eax, eax
	jmp	SHORT $LN95@check_pem
$LN93@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN95@check_pem:
	test	eax, eax
	jne	SHORT $LN20@check_pem
	mov	ecx, OFFSET ??_C@_05BKMMPIPN@PKCS7?$AA@
	mov	eax, edi
$LL96@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN97@check_pem
	test	dl, dl
	je	SHORT $LN98@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN97@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL96@check_pem
$LN98@check_pem:
	xor	eax, eax
	jmp	SHORT $LN99@check_pem
$LN97@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN99@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN20@check_pem:
; Line 264
	mov	ecx, OFFSET ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
	mov	eax, esi
$LL100@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN101@check_pem
	test	dl, dl
	je	SHORT $LN102@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN101@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL100@check_pem
$LN102@check_pem:
	xor	eax, eax
	jmp	SHORT $LN103@check_pem
$LN101@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN103@check_pem:
	test	eax, eax
	jne	SHORT $LN21@check_pem
	mov	ecx, OFFSET ??_C@_03LOMOMHDE@CMS?$AA@
	mov	eax, edi
$LL104@check_pem:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN105@check_pem
	test	dl, dl
	je	SHORT $LN106@check_pem
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN105@check_pem
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL104@check_pem
$LN106@check_pem:
	xor	eax, eax
	jmp	SHORT $LN107@check_pem
$LN105@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN107@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN21@check_pem:
; Line 267
	mov	eax, OFFSET ??_C@_05BKMMPIPN@PKCS7?$AA@
	npad	6
$LL108@check_pem:
	mov	cl, BYTE PTR [esi]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN109@check_pem
	test	cl, cl
	je	SHORT $LN110@check_pem
	mov	cl, BYTE PTR [esi+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN109@check_pem
	add	esi, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL108@check_pem
$LN110@check_pem:
	xor	eax, eax
	jmp	SHORT $LN111@check_pem
$LN109@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN111@check_pem:
	test	eax, eax
	jne	SHORT $LN22@check_pem
	mov	eax, OFFSET ??_C@_03LOMOMHDE@CMS?$AA@
	npad	2
$LL112@check_pem:
	mov	cl, BYTE PTR [edi]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN113@check_pem
	test	cl, cl
	je	SHORT $LN114@check_pem
	mov	cl, BYTE PTR [edi+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN113@check_pem
	add	edi, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL112@check_pem
$LN114@check_pem:
	xor	eax, eax
	jmp	SHORT $LN115@check_pem
$LN113@check_pem:
	sbb	eax, eax
	or	eax, 1
$LN115@check_pem:
	test	eax, eax
	je	$LN118@check_pem
$LN22@check_pem:
	pop	edi
; Line 271
	xor	eax, eax
	pop	esi
; Line 272
	pop	ecx
	ret	0
_check_pem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _load_iv
_TEXT	SEGMENT
_fromp$ = 8						; size = 4
_to$ = 12						; size = 4
_num$ = 16						; size = 4
_load_iv PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 554
	push	ebx
; Line 558
	mov	ebx, DWORD PTR _fromp$[esp]
	push	ebp
; Line 559
	mov	ebp, DWORD PTR _to$[esp+4]
	push	esi
	mov	esi, DWORD PTR _num$[esp+8]
	mov	ebx, DWORD PTR [ebx]
	push	edi
	test	esi, esi
	jle	SHORT $LN3@load_iv
; Line 560
	mov	ecx, esi
	xor	eax, eax
	mov	edx, ecx
	mov	edi, ebp
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
$LN3@load_iv:
; Line 561
	lea	edi, DWORD PTR [esi+esi]
; Line 562
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN6@load_iv
$LL7@load_iv:
; Line 563
	mov	al, BYTE PTR [ebx]
	cmp	al, 48					; 00000030H
	jl	SHORT $LN8@load_iv
	cmp	al, 57					; 00000039H
	jg	SHORT $LN8@load_iv
; Line 564
	movsx	edx, al
	sub	edx, 48					; 00000030H
	jmp	SHORT $LN13@load_iv
$LN8@load_iv:
; Line 565
	cmp	al, 65					; 00000041H
	jl	SHORT $LN10@load_iv
	cmp	al, 70					; 00000046H
	jg	SHORT $LN10@load_iv
; Line 566
	movsx	edx, al
	sub	edx, 55					; 00000037H
	jmp	SHORT $LN13@load_iv
$LN10@load_iv:
; Line 567
	cmp	al, 97					; 00000061H
	jl	SHORT $LN12@load_iv
	cmp	al, 102					; 00000066H
	jg	SHORT $LN12@load_iv
; Line 568
	movsx	edx, al
	sub	edx, 87					; 00000057H
$LN13@load_iv:
; Line 573
	inc	ebx
; Line 574
	mov	eax, esi
	test	eax, eax
	jns	SHORT $LN24@load_iv
	add	eax, 1
$LN24@load_iv:
	sar	eax, 1
	mov	ecx, esi
	add	eax, ebp
	not	ecx
	inc	esi
	and	ecx, 1
	shl	ecx, 2
	shl	dl, cl
	or	BYTE PTR [eax], dl
	cmp	esi, edi
	jl	SHORT $LL7@load_iv
$LN6@load_iv:
; Line 577
	mov	eax, DWORD PTR _fromp$[esp+12]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ebx
; Line 578
	mov	eax, 1
	pop	ebx
; Line 579
	ret	0
$LN12@load_iv:
; Line 570
	push	570					; 0000023aH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	103					; 00000067H
	push	101					; 00000065H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 571
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 579
	ret	0
_load_iv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_dek_info
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_type$ = 12						; size = 4
_len$ = 16						; size = 4
_str$ = 20						; size = 4
_PEM_dek_info PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 145
	push	ebx
	push	edi
; Line 150
	mov	edi, DWORD PTR _buf$[esp+4]
	push	1024					; 00000400H
	push	OFFSET ??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@
	push	edi
	call	_BUF_strlcat
; Line 151
	push	1024					; 00000400H
	push	DWORD PTR _type$[esp+20]
	push	edi
	call	_BUF_strlcat
; Line 152
	push	1024					; 00000400H
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	edi
	call	_BUF_strlcat
; Line 153
	mov	eax, edi
	add	esp, 36					; 00000024H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL11@PEM_dek_in:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL11@PEM_dek_in
; Line 154
	mov	ebx, DWORD PTR _len$[esp+4]
	sub	eax, edx
	lea	ecx, DWORD PTR [ebx*2+1]
	add	ecx, eax
	cmp	ecx, 1024				; 00000400H
	jg	SHORT $LN1@PEM_dek_in
; Line 156
	xor	edx, edx
	test	ebx, ebx
	jle	SHORT $LN3@PEM_dek_in
	push	ebp
	mov	ebp, DWORD PTR _str$[esp+8]
	push	esi
	lea	esi, DWORD PTR [eax+edi]
	npad	3
$LL4@PEM_dek_in:
; Line 157
	movzx	ecx, BYTE PTR [edx+ebp]
	lea	esi, DWORD PTR [esi+2]
	shr	ecx, 4
	movzx	ecx, BYTE PTR ?map@?1??PEM_dek_info@@9@9[ecx]
	mov	BYTE PTR [esi-2], cl
; Line 158
	movsx	ecx, BYTE PTR [edx+ebp]
	inc	edx
	and	ecx, 15					; 0000000fH
	movzx	ecx, BYTE PTR ?map@?1??PEM_dek_info@@9@9[ecx]
	mov	BYTE PTR [esi-1], cl
	cmp	edx, ebx
	jl	SHORT $LL4@PEM_dek_in
	pop	esi
	pop	ebp
$LN3@PEM_dek_in:
; Line 160
	lea	eax, DWORD PTR [eax+edx*2]
	mov	WORD PTR [eax+edi], 10			; 0000000aH
$LN1@PEM_dek_in:
; Line 162
	pop	edi
	pop	ebx
	ret	0
_PEM_dek_info ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_proc_type
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_type$ = 12						; size = 4
_PEM_proc_type PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 130
	mov	eax, DWORD PTR _type$[esp-4]
	push	esi
	push	edi
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@PEM_proc_t
; Line 131
	mov	edi, OFFSET ??_C@_09NEFHHFED@ENCRYPTED?$AA@
	jmp	SHORT $LN6@PEM_proc_t
$LN2@PEM_proc_t:
; Line 132
	cmp	eax, 30					; 0000001eH
	jne	SHORT $LN4@PEM_proc_t
; Line 133
	mov	edi, OFFSET ??_C@_09ENKIIODD@MIC?9CLEAR?$AA@
	jmp	SHORT $LN6@PEM_proc_t
$LN4@PEM_proc_t:
; Line 134
	cmp	eax, 20					; 00000014H
	mov	edi, OFFSET ??_C@_08HNLJNNOE@MIC?9ONLY?$AA@
	mov	ecx, OFFSET ??_C@_08JNPHPJPC@BAD?9TYPE?$AA@
	cmovne	edi, ecx
$LN6@PEM_proc_t:
; Line 139
	mov	esi, DWORD PTR _buf$[esp+4]
	push	1024					; 00000400H
	push	OFFSET ??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@
	push	esi
	call	_BUF_strlcat
; Line 140
	push	1024					; 00000400H
	push	edi
	push	esi
	call	_BUF_strlcat
; Line 141
	push	1024					; 00000400H
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	esi
	call	_BUF_strlcat
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
; Line 142
	ret	0
_PEM_proc_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_def_callback
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_num$ = 12						; size = 4
_w$ = 16						; size = 4
_key$ = 20						; size = 4
_PEM_def_callback PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 96
	mov	edx, DWORD PTR _key$[esp-4]
	push	esi
	test	edx, edx
	je	SHORT $LN5@PEM_def_ca
; Line 97
	mov	esi, edx
	lea	ecx, DWORD PTR [esi+1]
	npad	2
$LL15@PEM_def_ca:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL15@PEM_def_ca
	sub	esi, ecx
; Line 98
	cmp	esi, DWORD PTR _num$[esp]
	cmovg	esi, DWORD PTR _num$[esp]
; Line 99
	push	esi
	push	edx
	push	DWORD PTR _buf$[esp+8]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 100
	mov	eax, esi
	pop	esi
; Line 124
	ret	0
$LN5@PEM_def_ca:
	push	ebx
	push	ebp
	push	edi
; Line 103
	call	_EVP_get_pw_prompt
; Line 108
	mov	ebp, DWORD PTR _w$[esp+12]
	test	eax, eax
	mov	ebx, DWORD PTR _num$[esp+12]
	mov	edi, OFFSET ??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@
	mov	esi, DWORD PTR _buf$[esp+12]
	cmovne	edi, eax
	push	ebp
	push	edi
	push	ebx
	push	4
	push	esi
	call	_EVP_read_pw_string_min
	add	esp, 20					; 00000014H
; Line 109
	test	eax, eax
	jne	SHORT $LN12@PEM_def_ca
$LL2@PEM_def_ca:
; Line 114
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL16@PEM_def_ca:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL16@PEM_def_ca
	sub	eax, edx
; Line 115
	cmp	eax, 4
	jge	SHORT $LN17@PEM_def_ca
; Line 116
	push	4
	push	OFFSET ??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	_fprintf
	push	ebp
	push	edi
	push	ebx
	push	4
	push	esi
	call	_EVP_read_pw_string_min
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LL2@PEM_def_ca
$LN12@PEM_def_ca:
; Line 110
	push	110					; 0000006eH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	109					; 0000006dH
	push	100					; 00000064H
	push	9
	call	_ERR_put_error
; Line 111
	push	ebx
	push	0
	push	esi
	call	_memset
	add	esp, 32					; 00000020H
; Line 112
	or	eax, -1
$LN17@PEM_def_ca:
; Line 124
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi
	ret	0
_PEM_def_callback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_ASN1_write
_TEXT	SEGMENT
_i2d$ = 8						; size = 4
_name$ = 12						; size = 4
_fp$ = 16						; size = 4
_x$ = 20						; size = 4
_enc$ = 24						; size = 4
_kstr$ = 28						; size = 4
_klen$ = 32						; size = 4
_callback$ = 36						; size = 4
_u$ = 40						; size = 4
_PEM_ASN1_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 322
	push	edi
; Line 326
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@PEM_ASN1_w
; Line 327
	push	327					; 00000147H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	7
	push	104					; 00000068H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 328
	xor	eax, eax
	pop	edi
; Line 334
	ret	0
$LN2@PEM_ASN1_w:
	push	esi
; Line 330
	push	DWORD PTR _fp$[esp+4]
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
; Line 331
	push	DWORD PTR _u$[esp+20]
	push	DWORD PTR _callback$[esp+24]
	push	DWORD PTR _klen$[esp+28]
	push	DWORD PTR _kstr$[esp+32]
	push	DWORD PTR _enc$[esp+36]
	push	DWORD PTR _x$[esp+40]
	push	edi
	push	DWORD PTR _name$[esp+48]
	push	DWORD PTR _i2d$[esp+52]
	call	_PEM_ASN1_write_bio
; Line 332
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 56					; 00000038H
; Line 333
	mov	eax, esi
	pop	esi
	pop	edi
; Line 334
	ret	0
_PEM_ASN1_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_ASN1_read
_TEXT	SEGMENT
_d2i$ = 8						; size = 4
_name$ = 12						; size = 4
_fp$ = 16						; size = 4
_x$ = 20						; size = 4
_cb$ = 24						; size = 4
_u$ = 28						; size = 4
_PEM_ASN1_read PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 167
	push	edi
; Line 171
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@PEM_ASN1_r
; Line 172
	push	172					; 000000acH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	7
	push	102					; 00000066H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 173
	xor	eax, eax
	pop	edi
; Line 179
	ret	0
$LN2@PEM_ASN1_r:
	push	esi
; Line 175
	push	DWORD PTR _fp$[esp+4]
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
; Line 176
	push	DWORD PTR _u$[esp+20]
	push	DWORD PTR _cb$[esp+24]
	push	DWORD PTR _x$[esp+28]
	push	edi
	push	DWORD PTR _name$[esp+36]
	push	DWORD PTR _d2i$[esp+40]
	call	_PEM_ASN1_read_bio
; Line 177
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 44					; 0000002cH
; Line 178
	mov	eax, esi
	pop	esi
	pop	edi
; Line 179
	ret	0
_PEM_ASN1_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_write
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_name$ = 12						; size = 4
_header$ = 16						; size = 4
_data$ = 20						; size = 4
_len$ = 24						; size = 4
_PEM_write PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 584
	push	edi
; Line 588
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@PEM_write
; Line 589
	push	589					; 0000024dH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	7
	push	113					; 00000071H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 590
	xor	eax, eax
	pop	edi
; Line 596
	ret	0
$LN2@PEM_write:
	push	esi
; Line 592
	push	DWORD PTR _fp$[esp+4]
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
; Line 593
	push	DWORD PTR _len$[esp+20]
	push	DWORD PTR _data$[esp+24]
	push	DWORD PTR _header$[esp+28]
	push	DWORD PTR _name$[esp+32]
	push	edi
	call	_PEM_write_bio
; Line 594
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 40					; 00000028H
; Line 595
	mov	eax, esi
	pop	esi
	pop	edi
; Line 596
	ret	0
_PEM_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_name$ = 12						; size = 4
_header$ = 16						; size = 4
_data$ = 20						; size = 4
_len$ = 24						; size = 4
_PEM_read PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 660
	push	edi
; Line 664
	call	_BIO_s_file
	push	eax
	call	_BIO_new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@PEM_read
; Line 665
	push	665					; 00000299H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	7
	push	108					; 0000006cH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 666
	xor	eax, eax
	pop	edi
; Line 672
	ret	0
$LN2@PEM_read:
	push	esi
; Line 668
	push	DWORD PTR _fp$[esp+4]
	push	0
	push	106					; 0000006aH
	push	edi
	call	_BIO_ctrl
; Line 669
	push	DWORD PTR _len$[esp+20]
	push	DWORD PTR _data$[esp+24]
	push	DWORD PTR _header$[esp+28]
	push	DWORD PTR _name$[esp+32]
	push	edi
	call	_PEM_read_bio
; Line 670
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 40					; 00000028H
; Line 671
	mov	eax, esi
	pop	esi
	pop	edi
; Line 672
	ret	0
_PEM_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_ASN1_write_bio
_TEXT	SEGMENT
_i$ = -1296						; size = 4
_dsize$1$ = -1292					; size = 4
_x$GSCopy$1$ = -1288					; size = 4
_i2d$GSCopy$1$ = -1284					; size = 4
_u$GSCopy$1$ = -1280					; size = 4
_kstr$GSCopy$1$ = -1276					; size = 4
_objstr$1$ = -1272					; size = 4
_j$ = -1268						; size = 4
_p$ = -1264						; size = 4
_callback$GSCopy$1$ = -1260				; size = 4
_name$GSCopy$1$ = -1256					; size = 4
_bp$GSCopy$1$ = -1252					; size = 4
_ctx$ = -1248						; size = 140
_iv$ = -1108						; size = 16
_key$ = -1092						; size = 64
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_i2d$ = 8						; size = 4
_name$ = 12						; size = 4
_bp$ = 16						; size = 4
_x$ = 20						; size = 4
_enc$ = 24						; size = 4
_kstr$ = 28						; size = 4
_klen$ = 32						; size = 4
_callback$ = 36						; size = 4
_u$ = 40						; size = 4
_PEM_ASN1_write_bio PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 340
	mov	eax, 1296				; 00000510H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+1296], eax
	mov	eax, DWORD PTR _i2d$[esp+1292]
	mov	DWORD PTR _i2d$GSCopy$1$[esp+1296], eax
	mov	eax, DWORD PTR _name$[esp+1292]
	push	ebx
	mov	ebx, DWORD PTR _enc$[esp+1296]
	mov	DWORD PTR _name$GSCopy$1$[esp+1300], eax
	mov	eax, DWORD PTR _bp$[esp+1296]
	push	ebp
	mov	ebp, DWORD PTR _kstr$[esp+1300]
	mov	DWORD PTR _bp$GSCopy$1$[esp+1304], eax
	mov	eax, DWORD PTR _x$[esp+1300]
	push	esi
	mov	DWORD PTR _x$GSCopy$1$[esp+1308], eax
; Line 342
	xor	esi, esi
	mov	eax, DWORD PTR _callback$[esp+1304]
	push	edi
	mov	DWORD PTR _callback$GSCopy$1$[esp+1312], eax
; Line 343
	xor	edi, edi
	mov	eax, DWORD PTR _u$[esp+1308]
	mov	DWORD PTR _kstr$GSCopy$1$[esp+1312], ebp
	mov	DWORD PTR _u$GSCopy$1$[esp+1312], eax
; Line 344
	mov	DWORD PTR _objstr$1$[esp+1312], esi
; Line 349
	test	ebx, ebx
	je	SHORT $LN3@PEM_ASN1_w
; Line 350
	push	ebx
	call	_EVP_CIPHER_nid
	push	eax
	call	_OBJ_nid2sn
	add	esp, 8
	mov	DWORD PTR _objstr$1$[esp+1312], eax
; Line 351
	test	eax, eax
	je	SHORT $LN4@PEM_ASN1_w
	push	ebx
	call	_EVP_CIPHER_iv_length
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@PEM_ASN1_w
$LN4@PEM_ASN1_w:
; Line 352
	push	352					; 00000160H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	113					; 00000071H
	push	105					; 00000069H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 353
	xor	ebx, ebx
	jmp	$err$38
$LN3@PEM_ASN1_w:
; Line 357
	push	0
	push	DWORD PTR _x$GSCopy$1$[esp+1316]
	call	DWORD PTR _i2d$GSCopy$1$[esp+1320]
	add	esp, 8
	mov	DWORD PTR _dsize$1$[esp+1312], eax
	test	eax, eax
	jns	SHORT $LN5@PEM_ASN1_w
; Line 358
	push	358					; 00000166H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	13					; 0000000dH
	push	105					; 00000069H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 359
	xor	ebx, ebx
; Line 360
	jmp	$err$38
$LN5@PEM_ASN1_w:
; Line 364
	push	364					; 0000016cH
	add	eax, 20					; 00000014H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 365
	test	edi, edi
	jne	SHORT $LN6@PEM_ASN1_w
; Line 366
	push	366					; 0000016eH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
	push	105					; 00000069H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 367
	jmp	$LN35@PEM_ASN1_w
$LN6@PEM_ASN1_w:
; Line 370
	lea	eax, DWORD PTR _p$[esp+1312]
	mov	DWORD PTR _p$[esp+1312], edi
	push	eax
	push	DWORD PTR _x$GSCopy$1$[esp+1316]
	call	DWORD PTR _i2d$GSCopy$1$[esp+1320]
	add	esp, 8
	mov	ecx, eax
	mov	DWORD PTR _i$[esp+1312], ecx
; Line 372
	test	ebx, ebx
	je	$LN7@PEM_ASN1_w
; Line 373
	test	ebp, ebp
	jne	SHORT $LN32@PEM_ASN1_w
; Line 375
	push	DWORD PTR _u$GSCopy$1$[esp+1312]
	mov	eax, DWORD PTR _callback$GSCopy$1$[esp+1316]
	push	1
	push	1024					; 00000400H
	test	eax, eax
	jne	SHORT $LN10@PEM_ASN1_w
	lea	eax, DWORD PTR _buf$[esp+1324]
	push	eax
	call	_PEM_def_callback
	jmp	SHORT $LN36@PEM_ASN1_w
$LN10@PEM_ASN1_w:
; Line 377
	lea	ecx, DWORD PTR _buf$[esp+1324]
	push	ecx
	call	eax
$LN36@PEM_ASN1_w:
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 378
	test	ebp, ebp
	jg	SHORT $LN12@PEM_ASN1_w
; Line 379
	push	379					; 0000017bH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	111					; 0000006fH
	push	105					; 00000069H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 380
	jmp	$LN35@PEM_ASN1_w
$LN12@PEM_ASN1_w:
; Line 386
	mov	ecx, DWORD PTR _i$[esp+1312]
	lea	eax, DWORD PTR _buf$[esp+1312]
	mov	DWORD PTR _kstr$GSCopy$1$[esp+1312], eax
	jmp	SHORT $LN9@PEM_ASN1_w
$LN32@PEM_ASN1_w:
	mov	ebp, DWORD PTR _klen$[esp+1308]
$LN9@PEM_ASN1_w:
; Line 388
	mov	eax, 8
	call	__chkstk
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	push	ecx
	push	edi
	call	_RAND_add
	add	esp, 16					; 00000010H
; Line 389
	cmp	DWORD PTR [ebx+12], 16			; 00000010H
	jle	SHORT $LN23@PEM_ASN1_w
	push	OFFSET ??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@
	push	389					; 00000185H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN23@PEM_ASN1_w:
; Line 390
	push	DWORD PTR [ebx+12]
	lea	eax, DWORD PTR _iv$[esp+1316]
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	js	$LN35@PEM_ASN1_w
; Line 396
	push	0
	lea	eax, DWORD PTR _key$[esp+1316]
	push	eax
	push	1
	push	ebp
	mov	ebp, DWORD PTR _kstr$GSCopy$1$[esp+1328]
	lea	eax, DWORD PTR _iv$[esp+1328]
	push	ebp
	push	eax
	call	_EVP_md5
	push	eax
	push	ebx
	call	_EVP_BytesToKey
	add	esp, 32					; 00000020H
	test	eax, eax
	je	$LN35@PEM_ASN1_w
; Line 399
	lea	eax, DWORD PTR _buf$[esp+1312]
	cmp	ebp, eax
	jne	SHORT $LN15@PEM_ASN1_w
; Line 400
	push	1024					; 00000400H
	push	eax
	call	_OPENSSL_cleanse
	add	esp, 8
$LN15@PEM_ASN1_w:
; Line 402
	mov	esi, DWORD PTR _objstr$1$[esp+1312]
	mov	ecx, esi
	lea	edx, DWORD PTR [ecx+1]
$LL30@PEM_ASN1_w:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL30@PEM_ASN1_w
	mov	eax, DWORD PTR [ebx+12]
	sub	ecx, edx
	add	eax, 18					; 00000012H
	lea	eax, DWORD PTR [ecx+eax*2]
	cmp	eax, 1024				; 00000400H
	jbe	SHORT $LN25@PEM_ASN1_w
	push	OFFSET ??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@
	push	403					; 00000193H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN25@PEM_ASN1_w:
; Line 406
	lea	eax, DWORD PTR _buf$[esp+1312]
	mov	BYTE PTR _buf$[esp+1312], 0
	push	10					; 0000000aH
	push	eax
	call	_PEM_proc_type
; Line 407
	lea	eax, DWORD PTR _iv$[esp+1320]
	push	eax
	push	DWORD PTR [ebx+12]
	lea	eax, DWORD PTR _buf$[esp+1328]
	push	esi
	push	eax
	call	_PEM_dek_info
; Line 410
	lea	eax, DWORD PTR _ctx$[esp+1336]
	push	eax
	call	_EVP_CIPHER_CTX_init
; Line 414
	lea	eax, DWORD PTR _iv$[esp+1340]
	mov	esi, 1
	push	eax
	lea	eax, DWORD PTR _key$[esp+1344]
	push	eax
	push	0
	lea	eax, DWORD PTR _ctx$[esp+1352]
	push	ebx
	push	eax
	call	_EVP_EncryptInit_ex
	add	esp, 48					; 00000030H
	test	eax, eax
	je	SHORT $LN17@PEM_ASN1_w
	push	DWORD PTR _i$[esp+1312]
	lea	eax, DWORD PTR _j$[esp+1316]
	push	edi
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+1324]
	push	edi
	push	eax
	call	_EVP_EncryptUpdate
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN17@PEM_ASN1_w
	lea	eax, DWORD PTR _i$[esp+1312]
	push	eax
	mov	eax, DWORD PTR _j$[esp+1316]
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+1320]
	push	eax
	call	_EVP_EncryptFinal_ex
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@PEM_ASN1_w
$LN17@PEM_ASN1_w:
; Line 415
	xor	esi, esi
$LN16@PEM_ASN1_w:
; Line 416
	lea	eax, DWORD PTR _ctx$[esp+1312]
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
	add	esp, 4
; Line 417
	test	esi, esi
	je	SHORT $LN35@PEM_ASN1_w
; Line 419
	mov	ecx, DWORD PTR _i$[esp+1312]
	add	ecx, DWORD PTR _j$[esp+1312]
	mov	DWORD PTR _i$[esp+1312], ecx
; Line 420
	jmp	SHORT $LN8@PEM_ASN1_w
$LN7@PEM_ASN1_w:
; Line 421
	mov	esi, 1
; Line 422
	mov	BYTE PTR _buf$[esp+1312], 0
$LN8@PEM_ASN1_w:
; Line 424
	push	ecx
	push	edi
	lea	eax, DWORD PTR _buf$[esp+1320]
	push	eax
	push	DWORD PTR _name$GSCopy$1$[esp+1324]
	push	DWORD PTR _bp$GSCopy$1$[esp+1328]
	call	_PEM_write_bio
; Line 425
	xor	ecx, ecx
	mov	DWORD PTR _i$[esp+1332], eax
	add	esp, 20					; 00000014H
	test	eax, eax
	cmovle	esi, ecx
$LN35@PEM_ASN1_w:
	mov	ebx, DWORD PTR _dsize$1$[esp+1312]
$err$38:
; Line 428
	lea	eax, DWORD PTR _key$[esp+1312]
	push	64					; 00000040H
	push	eax
	call	_OPENSSL_cleanse
; Line 429
	lea	eax, DWORD PTR _iv$[esp+1320]
	push	16					; 00000010H
	push	eax
	call	_OPENSSL_cleanse
; Line 430
	lea	eax, DWORD PTR _ctx$[esp+1328]
	push	140					; 0000008cH
	push	eax
	call	_OPENSSL_cleanse
; Line 431
	lea	eax, DWORD PTR _buf$[esp+1336]
	push	1024					; 00000400H
	push	eax
	call	_OPENSSL_cleanse
	add	esp, 32					; 00000020H
; Line 432
	test	edi, edi
	je	SHORT $LN31@PEM_ASN1_w
; Line 433
	push	ebx
	push	edi
	call	_OPENSSL_cleanse
; Line 434
	push	edi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN31@PEM_ASN1_w:
; Line 437
	mov	ecx, DWORD PTR __$ArrayPad$[esp+1312]
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 1296				; 00000510H
	ret	0
_PEM_ASN1_write_bio ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_bytes_read_bio
_TEXT	SEGMENT
_header$ = -60						; size = 4
_data$ = -56						; size = 4
_nm$ = -52						; size = 4
_len$ = -48						; size = 4
_bp$GSCopy$1$ = -44					; size = 4
_u$GSCopy$1$ = -40					; size = 4
_cb$GSCopy$1$ = -36					; size = 4
_pdata$GSCopy$1$ = -32					; size = 4
_plen$GSCopy$1$ = -28					; size = 4
_cipher$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_pdata$ = 8						; size = 4
_plen$ = 12						; size = 4
_pnm$ = 16						; size = 4
_name$ = 20						; size = 4
_bp$ = 24						; size = 4
_cb$ = 28						; size = 4
_u$ = 32						; size = 4
_PEM_bytes_read_bio PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 277
	mov	eax, 60					; 0000003cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+60], eax
	mov	ecx, DWORD PTR _cb$[esp+56]
	mov	eax, DWORD PTR _pdata$[esp+56]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pnm$[esp+64]
; Line 282
	xor	ebx, ebx
	mov	DWORD PTR _cb$GSCopy$1$[esp+68], ecx
	mov	ecx, DWORD PTR _u$[esp+64]
	push	esi
	push	edi
	mov	edi, DWORD PTR _name$[esp+72]
	mov	DWORD PTR _u$GSCopy$1$[esp+76], ecx
; Line 285
	lea	ecx, DWORD PTR _len$[esp+76]
	push	ecx
	lea	ecx, DWORD PTR _data$[esp+80]
	mov	DWORD PTR _pdata$GSCopy$1$[esp+80], eax
	mov	eax, DWORD PTR _plen$[esp+76]
	push	ecx
	lea	ecx, DWORD PTR _header$[esp+84]
	mov	DWORD PTR _plen$GSCopy$1$[esp+84], eax
	mov	eax, DWORD PTR _bp$[esp+80]
	push	ecx
	lea	ecx, DWORD PTR _nm$[esp+88]
	mov	DWORD PTR _bp$GSCopy$1$[esp+88], eax
	push	ecx
	push	eax
	mov	DWORD PTR _nm$[esp+96], 0
	mov	DWORD PTR _header$[esp+96], 0
	mov	DWORD PTR _data$[esp+96], 0
	call	_PEM_read_bio
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN17@PEM_bytes_
$LL2@PEM_bytes_:
; Line 290
	mov	esi, DWORD PTR _nm$[esp+76]
	push	edi
	push	esi
	call	_check_pem
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@PEM_bytes_
; Line 292
	push	esi
	call	_CRYPTO_free
; Line 293
	push	DWORD PTR _header$[esp+80]
	call	_CRYPTO_free
; Line 294
	push	DWORD PTR _data$[esp+84]
	call	_CRYPTO_free
	lea	eax, DWORD PTR _len$[esp+88]
	push	eax
	lea	eax, DWORD PTR _data$[esp+92]
	push	eax
	lea	eax, DWORD PTR _header$[esp+96]
	push	eax
	lea	eax, DWORD PTR _nm$[esp+100]
	push	eax
	push	DWORD PTR _bp$GSCopy$1$[esp+104]
	call	_PEM_read_bio
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LL2@PEM_bytes_
$LN17@PEM_bytes_:
; Line 286
	call	_ERR_peek_error
	and	eax, 4095				; 00000fffH
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN6@PEM_bytes_
; Line 287
	push	edi
	push	OFFSET ??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@
	push	2
	call	_ERR_add_error_data
	add	esp, 12					; 0000000cH
$LN6@PEM_bytes_:
; Line 288
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 316
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
$LN18@PEM_bytes_:
; Line 296
	lea	eax, DWORD PTR _cipher$[esp+76]
	push	eax
	push	DWORD PTR _header$[esp+80]
	call	_PEM_get_EVP_CIPHER_INFO
	mov	edi, DWORD PTR _data$[esp+84]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@PEM_bytes_
; Line 298
	push	DWORD PTR _u$GSCopy$1$[esp+76]
	lea	eax, DWORD PTR _len$[esp+80]
	push	DWORD PTR _cb$GSCopy$1$[esp+80]
	push	eax
	lea	eax, DWORD PTR _cipher$[esp+88]
	push	edi
	push	eax
	call	_PEM_do_header
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN12@PEM_bytes_
; Line 301
	mov	eax, DWORD PTR _pdata$GSCopy$1$[esp+76]
; Line 302
	mov	ecx, DWORD PTR _plen$GSCopy$1$[esp+76]
	mov	DWORD PTR [eax], edi
	mov	eax, DWORD PTR _len$[esp+76]
	mov	DWORD PTR [ecx], eax
; Line 304
	test	ebp, ebp
	je	SHORT $LN10@PEM_bytes_
; Line 305
	mov	DWORD PTR [ebp], esi
$LN10@PEM_bytes_:
; Line 307
	mov	ebx, 1
; Line 310
	test	ebp, ebp
	jne	SHORT $LN11@PEM_bytes_
$LN12@PEM_bytes_:
; Line 311
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN11@PEM_bytes_:
; Line 312
	push	DWORD PTR _header$[esp+76]
	call	_CRYPTO_free
	add	esp, 4
; Line 313
	test	ebx, ebx
	jne	SHORT $LN13@PEM_bytes_
; Line 314
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN13@PEM_bytes_:
; Line 316
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	ret	0
_PEM_bytes_read_bio ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_write_bio
_TEXT	SEGMENT
_outl$ = -124						; size = 4
_i$2$ = -120						; size = 4
_j$1$ = -116						; size = 4
_bp$GSCopy$1$ = -112					; size = 4
_data$GSCopy$1$ = -108					; size = 4
_name$GSCopy$1$ = -104					; size = 4
_ctx$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_bp$ = 8						; size = 4
_name$ = 12						; size = 4
_header$ = 16						; size = 4
_data$ = 20						; size = 4
_len$ = 24						; size = 4
_PEM_write_bio PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 601
	mov	eax, 124				; 0000007cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
	mov	eax, DWORD PTR _data$[esp+120]
	push	ebx
	mov	ebx, DWORD PTR _header$[esp+124]
	push	ebp
	mov	ebp, DWORD PTR _bp$[esp+128]
	push	esi
	mov	esi, DWORD PTR _name$[esp+132]
	mov	DWORD PTR _data$GSCopy$1$[esp+136], eax
; Line 607
	lea	eax, DWORD PTR _ctx$[esp+136]
	push	edi
	push	eax
	mov	DWORD PTR _bp$GSCopy$1$[esp+144], ebp
	mov	DWORD PTR _name$GSCopy$1$[esp+144], esi
	call	_EVP_EncodeInit
; Line 608
	mov	edi, esi
	add	esp, 4
	lea	ecx, DWORD PTR [edi+1]
$LL21@PEM_write_:
	mov	al, BYTE PTR [edi]
	inc	edi
	test	al, al
	jne	SHORT $LL21@PEM_write_
; Line 611
	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@
	push	ebp
	sub	edi, ecx
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, 11					; 0000000bH
	jne	$LN30@PEM_write_
	push	edi
	push	esi
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, edi
	jne	$LN30@PEM_write_
	push	6
	push	OFFSET ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, 6
	jne	$LN30@PEM_write_
; Line 615
	mov	esi, ebx
	lea	ecx, DWORD PTR [esi+1]
$LL22@PEM_write_:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL22@PEM_write_
	sub	esi, ecx
; Line 616
	test	esi, esi
	jle	SHORT $LN7@PEM_write_
; Line 617
	push	esi
	push	ebx
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, esi
	jne	$LN30@PEM_write_
	push	1
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	$LN30@PEM_write_
$LN7@PEM_write_:
; Line 621
	push	621					; 0000026dH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	8192					; 00002000H
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 622
	test	ebx, ebx
	jne	SHORT $LN9@PEM_write_
; Line 623
	lea	eax, DWORD PTR [ebx+65]
; Line 624
	jmp	$LN14@PEM_write_
$LN9@PEM_write_:
; Line 628
	mov	esi, DWORD PTR _len$[esp+136]
	xor	eax, eax
	mov	DWORD PTR _j$1$[esp+140], eax
	mov	DWORD PTR _i$2$[esp+140], eax
	test	esi, esi
	jle	SHORT $LN3@PEM_write_
	mov	ecx, 5120				; 00001400H
	npad	2
$LL2@PEM_write_:
; Line 629
	cmp	esi, 5120				; 00001400H
	mov	ebp, esi
	cmovg	ebp, ecx
; Line 630
	add	eax, DWORD PTR _data$GSCopy$1$[esp+140]
	push	ebp
	push	eax
	lea	eax, DWORD PTR _outl$[esp+148]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+152]
	push	ebx
	push	eax
	call	_EVP_EncodeUpdate
; Line 631
	mov	ecx, DWORD PTR _outl$[esp+160]
	add	esp, 20					; 00000014H
	test	ecx, ecx
	je	SHORT $LN10@PEM_write_
	push	ecx
	push	ebx
	push	DWORD PTR _bp$GSCopy$1$[esp+148]
	call	_BIO_write
	mov	ecx, DWORD PTR _outl$[esp+152]
	add	esp, 12					; 0000000cH
	cmp	eax, ecx
	jne	SHORT $err$32
$LN10@PEM_write_:
; Line 635
	mov	eax, DWORD PTR _j$1$[esp+140]
	sub	esi, ebp
	add	DWORD PTR _i$2$[esp+140], ecx
	add	eax, ebp
	mov	DWORD PTR _j$1$[esp+140], eax
	mov	ecx, 5120				; 00001400H
	test	esi, esi
	jg	SHORT $LL2@PEM_write_
	mov	ebp, DWORD PTR _bp$GSCopy$1$[esp+140]
$LN3@PEM_write_:
; Line 637
	lea	eax, DWORD PTR _outl$[esp+140]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+144]
	push	ebx
	push	eax
	call	_EVP_EncodeFinal
; Line 638
	mov	eax, DWORD PTR _outl$[esp+152]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN11@PEM_write_
	push	eax
	push	ebx
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _outl$[esp+140]
	je	SHORT $LN11@PEM_write_
$err$32:
; Line 650
	push	8192					; 00002000H
	push	ebx
	call	_OPENSSL_cleanse
; Line 651
	push	ebx
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
$LN30@PEM_write_:
	mov	eax, 7
$LN14@PEM_write_:
; Line 653
	push	653					; 0000028dH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	eax
	push	114					; 00000072H
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 654
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 655
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
$LN11@PEM_write_:
; Line 640
	push	8192					; 00002000H
	push	ebx
	call	_OPENSSL_cleanse
; Line 641
	push	ebx
	call	_CRYPTO_free
; Line 644
	push	9
	push	OFFSET ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@
	push	ebp
	call	_BIO_write
	add	esp, 24					; 00000018H
	cmp	eax, 9
	jne	SHORT $LN30@PEM_write_
	push	edi
	push	DWORD PTR _name$GSCopy$1$[esp+144]
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, edi
	jne	SHORT $LN30@PEM_write_
	push	6
	push	OFFSET ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@
	push	ebp
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, 6
	jne	SHORT $LN30@PEM_write_
; Line 655
	mov	ecx, DWORD PTR __$ArrayPad$[esp+140]
	mov	eax, DWORD PTR _outl$[esp+140]
	add	eax, DWORD PTR _i$2$[esp+140]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
_PEM_write_bio ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_read_bio
_TEXT	SEGMENT
_bl$ = -396						; size = 4
_headerB$1$ = -392					; size = 4
_nameB$1$ = -388					; size = 4
_bp$GSCopy$1$ = -384					; size = 4
_end$1$ = -380						; size = 4
_k$ = -376						; size = 4
_name$GSCopy$1$ = -372					; size = 4
_header$GSCopy$1$ = -368				; size = 4
_data$GSCopy$1$ = -364					; size = 4
_len$GSCopy$1$ = -360					; size = 4
_ctx$ = -356						; size = 96
_buf$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_bp$ = 8						; size = 4
_name$ = 12						; size = 4
_header$ = 16						; size = 4
_data$ = 20						; size = 4
_len$ = 24						; size = 4
_PEM_read_bio PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 677
	mov	eax, 396				; 0000018cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+396], eax
	mov	eax, DWORD PTR _name$[esp+392]
	mov	DWORD PTR _name$GSCopy$1$[esp+396], eax
	mov	eax, DWORD PTR _header$[esp+392]
	push	ebx
	mov	ebx, DWORD PTR _bp$[esp+396]
	mov	DWORD PTR _header$GSCopy$1$[esp+400], eax
	mov	eax, DWORD PTR _data$[esp+396]
	mov	DWORD PTR _data$GSCopy$1$[esp+400], eax
	mov	eax, DWORD PTR _len$[esp+396]
	push	ebp
	mov	DWORD PTR _len$GSCopy$1$[esp+404], eax
; Line 679
	xor	eax, eax
	push	esi
	push	edi
	mov	DWORD PTR _bp$GSCopy$1$[esp+412], ebx
	mov	DWORD PTR _end$1$[esp+412], eax
	mov	DWORD PTR _bl$[esp+412], eax
; Line 685
	call	_BUF_MEM_new
	mov	edi, eax
	mov	DWORD PTR _nameB$1$[esp+412], edi
; Line 686
	call	_BUF_MEM_new
	mov	esi, eax
	mov	DWORD PTR _headerB$1$[esp+412], esi
; Line 687
	call	_BUF_MEM_new
	mov	ebp, eax
; Line 688
	test	edi, edi
	je	$LN20@PEM_read_b
	test	esi, esi
	je	$LN20@PEM_read_b
	test	ebp, ebp
	je	$LN20@PEM_read_b
; Line 698
	push	254					; 000000feH
	lea	eax, DWORD PTR _buf$[esp+416]
	mov	BYTE PTR _buf$[esp+670], 0
	push	eax
	push	ebx
	call	_BIO_gets
	add	esp, 12					; 0000000cH
; Line 700
	test	eax, eax
	jle	$LN65@PEM_read_b
	mov	edi, DWORD PTR __imp__strncmp
$LN103@PEM_read_b:
; Line 705
	js	SHORT $LN97@PEM_read_b
$LL5@PEM_read_b:
	cmp	BYTE PTR _buf$[esp+eax+412], 32		; 00000020H
	jg	SHORT $LN97@PEM_read_b
; Line 706
	sub	eax, 1
; Line 705
	jns	SHORT $LL5@PEM_read_b
$LN97@PEM_read_b:
; Line 707
	mov	BYTE PTR _buf$[esp+eax+413], 10		; 0000000aH
; Line 708
	add	eax, 2
	cmp	eax, 256				; 00000100H
	jae	$LN108@PEM_read_b
; Line 710
	push	11					; 0000000bH
	mov	BYTE PTR _buf$[esp+eax+416], 0
	lea	eax, DWORD PTR _buf$[esp+416]
	push	OFFSET ??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@PEM_read_b
; Line 711
	lea	esi, DWORD PTR _buf$[esp+423]
	lea	ecx, DWORD PTR [esi+1]
	npad	1
$LL95@PEM_read_b:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL95@PEM_read_b
	sub	esi, ecx
; Line 713
	lea	eax, DWORD PTR _buf$[esp+417]
	push	6
	add	eax, esi
	push	OFFSET ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@PEM_read_b
$LN22@PEM_read_b:
; Line 698
	push	254					; 000000feH
	lea	eax, DWORD PTR _buf$[esp+416]
	push	eax
	push	ebx
	call	_BIO_gets
	add	esp, 12					; 0000000cH
; Line 700
	test	eax, eax
	jg	$LN103@PEM_read_b
$LN65@PEM_read_b:
; Line 701
	push	701					; 000002bdH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	108					; 0000006cH
$LN104@PEM_read_b:
	push	109					; 0000006dH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$110:
; Line 839
	push	DWORD PTR _nameB$1$[esp+412]
	call	_BUF_MEM_free
; Line 840
	push	DWORD PTR _headerB$1$[esp+416]
	call	_BUF_MEM_free
; Line 841
	push	ebp
	call	_BUF_MEM_free
	add	esp, 12					; 0000000cH
; Line 842
	jmp	$LN107@PEM_read_b
$LN23@PEM_read_b:
; Line 715
	mov	ebx, DWORD PTR _nameB$1$[esp+412]
	lea	eax, DWORD PTR [esi+9]
	push	eax
	push	ebx
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN24@PEM_read_b
; Line 716
	push	716					; 000002ccH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
; Line 717
	jmp	SHORT $LN104@PEM_read_b
$LN24@PEM_read_b:
; Line 719
	lea	eax, DWORD PTR [esi-6]
	push	eax
	lea	eax, DWORD PTR _buf$[esp+427]
	push	eax
	push	DWORD PTR [ebx+4]
	call	_memcpy
; Line 720
	mov	eax, DWORD PTR [ebx+4]
; Line 724
	xor	ebx, ebx
; Line 725
	push	256					; 00000100H
	mov	BYTE PTR [eax+esi-6], 0
	mov	esi, DWORD PTR _headerB$1$[esp+428]
	push	esi
	call	_BUF_MEM_grow
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN25@PEM_read_b
; Line 726
	push	726					; 000002d6H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
; Line 727
	jmp	$LN104@PEM_read_b
$LN25@PEM_read_b:
; Line 729
	mov	eax, DWORD PTR [esi+4]
; Line 731
	push	254					; 000000feH
	mov	BYTE PTR [eax], bl
	lea	eax, DWORD PTR _buf$[esp+416]
	push	eax
	push	DWORD PTR _bp$GSCopy$1$[esp+420]
	call	_BIO_gets
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 732
	test	esi, esi
	jle	$LN101@PEM_read_b
$LN105@PEM_read_b:
; Line 735
	js	SHORT $LN98@PEM_read_b
	npad	5
$LL10@PEM_read_b:
	cmp	BYTE PTR _buf$[esp+esi+412], 32		; 00000020H
	jg	SHORT $LN98@PEM_read_b
; Line 736
	sub	esi, 1
; Line 735
	jns	SHORT $LL10@PEM_read_b
$LN98@PEM_read_b:
; Line 737
	mov	BYTE PTR _buf$[esp+esi+413], 10		; 0000000aH
; Line 738
	add	esi, 2
	cmp	esi, 256				; 00000100H
	jae	$LN108@PEM_read_b
	mov	BYTE PTR _buf$[esp+esi+412], 0
; Line 740
	cmp	BYTE PTR _buf$[esp+412], 10		; 0000000aH
	je	$LN100@PEM_read_b
; Line 742
	lea	edi, DWORD PTR [esi+ebx]
	lea	eax, DWORD PTR [edi+9]
	push	eax
	push	DWORD PTR _headerB$1$[esp+416]
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	je	$LN68@PEM_read_b
; Line 746
	push	9
	lea	eax, DWORD PTR _buf$[esp+416]
	push	OFFSET ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN69@PEM_read_b
; Line 750
	push	esi
	lea	eax, DWORD PTR _buf$[esp+416]
	push	eax
	mov	eax, DWORD PTR _headerB$1$[esp+420]
	mov	eax, DWORD PTR [eax+4]
	add	eax, ebx
	push	eax
	call	_memcpy
; Line 751
	mov	eax, DWORD PTR _headerB$1$[esp+424]
	push	254					; 000000feH
	mov	eax, DWORD PTR [eax+4]
	add	eax, esi
	mov	BYTE PTR [eax+ebx], 0
	lea	eax, DWORD PTR _buf$[esp+428]
	push	eax
	push	DWORD PTR _bp$GSCopy$1$[esp+432]
; Line 752
	mov	ebx, edi
	call	_BIO_gets
	mov	esi, eax
	add	esp, 24					; 00000018H
	test	esi, esi
	jg	$LN105@PEM_read_b
$LN100@PEM_read_b:
	mov	edi, DWORD PTR __imp__strncmp
$LN101@PEM_read_b:
	xor	esi, esi
$LN8@PEM_read_b:
; Line 756
	push	1024					; 00000400H
	push	ebp
	mov	DWORD PTR _bl$[esp+420], 0
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN30@PEM_read_b
; Line 757
	push	757					; 000002f5H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
; Line 758
	jmp	$LN104@PEM_read_b
$LN69@PEM_read_b:
; Line 747
	mov	edi, DWORD PTR __imp__strncmp
	mov	esi, 1
	jmp	SHORT $LN8@PEM_read_b
$LN68@PEM_read_b:
; Line 743
	push	743					; 000002e7H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
; Line 744
	jmp	$LN104@PEM_read_b
$LN30@PEM_read_b:
; Line 760
	mov	eax, DWORD PTR [ebp+4]
	mov	BYTE PTR [eax], 0
; Line 761
	test	esi, esi
	jne	$LN31@PEM_read_b
; Line 763
	mov	ebx, DWORD PTR _bp$GSCopy$1$[esp+412]
	lea	eax, DWORD PTR _buf$[esp+412]
	push	254					; 000000feH
	push	eax
	push	ebx
	call	_BIO_gets
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 764
	test	esi, esi
	jle	$LN32@PEM_read_b
$LN106@PEM_read_b:
; Line 767
	js	SHORT $LN99@PEM_read_b
$LL15@PEM_read_b:
	cmp	BYTE PTR _buf$[esp+esi+412], 32		; 00000020H
	jg	SHORT $LN99@PEM_read_b
; Line 768
	sub	esi, 1
; Line 767
	jns	SHORT $LL15@PEM_read_b
$LN99@PEM_read_b:
; Line 769
	mov	BYTE PTR _buf$[esp+esi+413], 10		; 0000000aH
; Line 770
	add	esi, 2
	cmp	esi, 256				; 00000100H
	jae	$LN108@PEM_read_b
; Line 772
	mov	eax, DWORD PTR _end$1$[esp+412]
	cmp	esi, 65					; 00000041H
	mov	ecx, 1
	mov	BYTE PTR _buf$[esp+esi+412], 0
	cmovne	eax, ecx
; Line 774
	push	9
	mov	DWORD PTR _end$1$[esp+416], eax
	lea	eax, DWORD PTR _buf$[esp+416]
	push	OFFSET ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN32@PEM_read_b
; Line 776
	cmp	esi, 65					; 00000041H
	jg	$LN32@PEM_read_b
; Line 778
	mov	eax, DWORD PTR _bl$[esp+412]
	add	eax, 9
	add	eax, esi
	push	eax
	push	ebp
	call	_BUF_MEM_grow_clean
	add	esp, 8
	test	eax, eax
	je	$LN73@PEM_read_b
; Line 782
	push	esi
	lea	eax, DWORD PTR _buf$[esp+416]
	push	eax
	mov	eax, DWORD PTR [ebp+4]
	add	eax, DWORD PTR _bl$[esp+420]
	push	eax
	call	_memcpy
; Line 783
	mov	ecx, DWORD PTR [ebp+4]
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _bl$[esp+412]
	add	ecx, esi
	push	254					; 000000feH
	mov	BYTE PTR [ecx+eax], 0
; Line 785
	mov	eax, DWORD PTR _end$1$[esp+416]
	add	DWORD PTR _bl$[esp+416], esi
	test	eax, eax
	lea	eax, DWORD PTR _buf$[esp+416]
	push	eax
	push	ebx
	jne	SHORT $LN74@PEM_read_b
; Line 763
	call	_BIO_gets
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 764
	test	esi, esi
	jg	$LN106@PEM_read_b
; Line 765
	jmp	SHORT $LN32@PEM_read_b
$LN74@PEM_read_b:
; Line 786
	mov	BYTE PTR _buf$[esp+424], 0
; Line 787
	call	_BIO_gets
	add	esp, 12					; 0000000cH
; Line 788
	test	eax, eax
	jle	SHORT $LN32@PEM_read_b
	npad	5
$LL17@PEM_read_b:
; Line 791
	cmp	BYTE PTR _buf$[esp+eax+412], 32		; 00000020H
	jg	SHORT $LN18@PEM_read_b
; Line 792
	sub	eax, 1
; Line 791
	jns	SHORT $LL17@PEM_read_b
$LN18@PEM_read_b:
; Line 793
	mov	BYTE PTR _buf$[esp+eax+413], 10		; 0000000aH
; Line 794
	add	eax, 2
	cmp	eax, 256				; 00000100H
	jae	$LN108@PEM_read_b
	mov	BYTE PTR _buf$[esp+eax+412], 0
; Line 799
	jmp	SHORT $LN32@PEM_read_b
$LN73@PEM_read_b:
; Line 779
	push	779					; 0000030bH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
; Line 780
	jmp	$LN104@PEM_read_b
$LN31@PEM_read_b:
; Line 800
	mov	eax, DWORD PTR _headerB$1$[esp+412]
; Line 801
	mov	DWORD PTR _headerB$1$[esp+412], ebp
; Line 802
	mov	ebp, eax
; Line 803
	mov	DWORD PTR _bl$[esp+412], ebx
$LN32@PEM_read_b:
; Line 805
	mov	ebx, DWORD PTR _nameB$1$[esp+412]
	mov	esi, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [esi+1]
$LL96@PEM_read_b:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL96@PEM_read_b
; Line 807
	push	9
	lea	eax, DWORD PTR _buf$[esp+416]
	sub	esi, ecx
	push	OFFSET ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN41@PEM_read_b
	push	esi
	lea	eax, DWORD PTR _buf$[esp+425]
	push	eax
	push	DWORD PTR [ebx+4]
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN41@PEM_read_b
	push	6
	lea	eax, DWORD PTR _buf$[esp+425]
	add	eax, esi
	push	OFFSET ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN41@PEM_read_b
; Line 813
	lea	eax, DWORD PTR _ctx$[esp+412]
	push	eax
	call	_EVP_DecodeInit
; Line 814
	push	DWORD PTR _bl$[esp+416]
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR _bl$[esp+420]
	push	eax
	push	ecx
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+432]
	push	eax
	call	_EVP_DecodeUpdate
	add	esp, 24					; 00000018H
; Line 817
	test	eax, eax
	jns	SHORT $LN42@PEM_read_b
; Line 818
	push	818					; 00000332H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	100					; 00000064H
; Line 819
	jmp	$LN104@PEM_read_b
$LN42@PEM_read_b:
; Line 821
	lea	eax, DWORD PTR _k$[esp+412]
	push	eax
	mov	eax, DWORD PTR [ebp+4]
	add	eax, DWORD PTR _bl$[esp+416]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+420]
	push	eax
	call	_EVP_DecodeFinal
	add	esp, 12					; 0000000cH
; Line 822
	test	eax, eax
	jns	SHORT $LN43@PEM_read_b
; Line 823
	push	823					; 00000337H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	100					; 00000064H
; Line 824
	jmp	$LN104@PEM_read_b
$LN43@PEM_read_b:
; Line 826
	mov	ecx, DWORD PTR _bl$[esp+412]
	add	ecx, DWORD PTR _k$[esp+412]
	mov	DWORD PTR _bl$[esp+412], ecx
; Line 828
	je	$err$110
; Line 830
	mov	esi, DWORD PTR _name$GSCopy$1$[esp+412]
	mov	edx, ebx
; Line 831
	mov	ebx, DWORD PTR _headerB$1$[esp+412]
; Line 834
	push	edx
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	esi, DWORD PTR _header$GSCopy$1$[esp+416]
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi], eax
	mov	esi, DWORD PTR _data$GSCopy$1$[esp+416]
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _len$GSCopy$1$[esp+416]
	mov	DWORD PTR [eax], ecx
	call	_CRYPTO_free
; Line 835
	push	ebx
	call	_CRYPTO_free
; Line 836
	push	ebp
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
; Line 837
	mov	eax, 1
	jmp	SHORT $LN1@PEM_read_b
$LN41@PEM_read_b:
; Line 809
	push	809					; 00000329H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	102					; 00000066H
	jmp	$LN104@PEM_read_b
$LN20@PEM_read_b:
; Line 689
	push	edi
	call	_BUF_MEM_free
; Line 690
	push	esi
	call	_BUF_MEM_free
; Line 691
	push	ebp
	call	_BUF_MEM_free
; Line 692
	push	692					; 000002b4H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	65					; 00000041H
	push	109					; 0000006dH
	push	9
	call	_ERR_put_error
	add	esp, 32					; 00000020H
$LN107@PEM_read_b:
; Line 693
	xor	eax, eax
$LN1@PEM_read_b:
; Line 843
	mov	ecx, DWORD PTR __$ArrayPad$[esp+412]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 396				; 0000018cH
	ret	0
$LN108@PEM_read_b:
; Line 738
	call	___report_rangecheckfailure
$LN109@PEM_read_b:
$LN102@PEM_read_b:
	int	3
_PEM_read_bio ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_do_header
_TEXT	SEGMENT
_i$ = -1244						; size = 4
_j$ = -1240						; size = 4
_len$1$ = -1236						; size = 4
_ctx$ = -1232						; size = 140
_key$ = -1092						; size = 64
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_cipher$ = 8						; size = 4
_data$ = 12						; size = 4
_plen$ = 16						; size = 4
_callback$ = 20						; size = 4
_u$ = 24						; size = 4
_PEM_do_header PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 441
	mov	eax, 1244				; 000004dcH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+1244], eax
	mov	eax, DWORD PTR _callback$[esp+1240]
	mov	ecx, DWORD PTR _u$[esp+1240]
	push	ebx
	mov	ebx, DWORD PTR _plen$[esp+1244]
	push	esi
	mov	esi, DWORD PTR _cipher$[esp+1248]
	push	edi
; Line 448
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR _data$[esp+1252]
; Line 450
	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR _i$[esp+1256], 0
	mov	DWORD PTR _len$1$[esp+1256], edx
	jne	SHORT $LN2@PEM_do_hea
; Line 451
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 487
	mov	ecx, DWORD PTR __$ArrayPad$[esp+1244]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 1244				; 000004dcH
	ret	0
$LN2@PEM_do_hea:
; Line 453
	push	ecx
	push	0
	push	1024					; 00000400H
	test	eax, eax
	jne	SHORT $LN3@PEM_do_hea
	lea	eax, DWORD PTR _buf$[esp+1268]
	push	eax
	call	_PEM_def_callback
	jmp	SHORT $LN13@PEM_do_hea
$LN3@PEM_do_hea:
; Line 455
	lea	ecx, DWORD PTR _buf$[esp+1268]
	push	ecx
	call	eax
$LN13@PEM_do_hea:
	add	esp, 16					; 00000010H
; Line 456
	test	eax, eax
	jg	SHORT $LN5@PEM_do_hea
; Line 457
	push	457					; 000001c9H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	104					; 00000068H
	push	106					; 0000006aH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 458
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
; Line 487
	mov	ecx, DWORD PTR __$ArrayPad$[esp+1244]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 1244				; 000004dcH
	ret	0
$LN5@PEM_do_hea:
	push	ebp
; Line 465
	push	0
	lea	ecx, DWORD PTR _key$[esp+1264]
	push	ecx
	push	1
	push	eax
	lea	eax, DWORD PTR _buf$[esp+1276]
	push	eax
	lea	ebp, DWORD PTR [esi+4]
	push	ebp
	call	_EVP_md5
	push	eax
	push	DWORD PTR [esi]
	call	_EVP_BytesToKey
	add	esp, 32					; 00000020H
	test	eax, eax
	je	$LN14@PEM_do_hea
; Line 469
	mov	eax, DWORD PTR _len$1$[esp+1260]
	mov	DWORD PTR _j$[esp+1260], eax
; Line 470
	lea	eax, DWORD PTR _ctx$[esp+1260]
	push	eax
	call	_EVP_CIPHER_CTX_init
; Line 471
	push	ebp
	lea	eax, DWORD PTR _key$[esp+1268]
	push	eax
	push	0
	push	DWORD PTR [esi]
	lea	eax, DWORD PTR _ctx$[esp+1280]
	push	eax
	call	_EVP_DecryptInit_ex
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 472
	test	esi, esi
	je	SHORT $LN8@PEM_do_hea
; Line 473
	push	DWORD PTR _j$[esp+1260]
	lea	eax, DWORD PTR _i$[esp+1264]
	push	edi
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+1272]
	push	edi
	push	eax
	call	_EVP_DecryptUpdate
	mov	esi, eax
	add	esp, 20					; 00000014H
; Line 474
	test	esi, esi
	je	SHORT $LN8@PEM_do_hea
; Line 475
	lea	eax, DWORD PTR _j$[esp+1260]
	push	eax
	mov	eax, DWORD PTR _i$[esp+1264]
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+1268]
	push	eax
	call	_EVP_DecryptFinal_ex
	add	esp, 12					; 0000000cH
	mov	esi, eax
$LN8@PEM_do_hea:
; Line 476
	lea	eax, DWORD PTR _ctx$[esp+1260]
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
; Line 477
	lea	eax, DWORD PTR _buf$[esp+1264]
	push	1024					; 00000400H
	push	eax
	call	_OPENSSL_cleanse
; Line 478
	lea	eax, DWORD PTR _key$[esp+1272]
	push	64					; 00000040H
	push	eax
	call	_OPENSSL_cleanse
	add	esp, 20					; 00000014H
; Line 479
	test	esi, esi
	je	SHORT $LN9@PEM_do_hea
; Line 480
	mov	eax, DWORD PTR _j$[esp+1260]
	add	eax, DWORD PTR _i$[esp+1260]
; Line 485
	mov	DWORD PTR [ebx], eax
; Line 486
	mov	eax, 1
	jmp	SHORT $LN12@PEM_do_hea
$LN9@PEM_do_hea:
; Line 482
	push	482					; 000001e2H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	101					; 00000065H
	push	106					; 0000006aH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN14@PEM_do_hea:
; Line 483
	xor	eax, eax
$LN12@PEM_do_hea:
; Line 487
	mov	ecx, DWORD PTR __$ArrayPad$[esp+1260]
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 1244				; 000004dcH
	ret	0
_PEM_do_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _PEM_get_EVP_CIPHER_INFO
_TEXT	SEGMENT
_header$ = 8						; size = 4
_cipher$ = 12						; size = 4
_PEM_get_EVP_CIPHER_INFO PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\pem\pem_lib.c
; Line 490
	push	ebp
; Line 495
	mov	ebp, DWORD PTR _cipher$[esp]
	push	esi
; Line 496
	mov	esi, DWORD PTR _header$[esp+4]
	mov	DWORD PTR [ebp], 0
	test	esi, esi
	je	$LN9@PEM_get_EV
	mov	al, BYTE PTR [esi]
	test	al, al
	je	$LN9@PEM_get_EV
	cmp	al, 10					; 0000000aH
	je	$LN9@PEM_get_EV
; Line 498
	push	edi
	mov	edi, DWORD PTR __imp__strncmp
	push	11					; 0000000bH
	push	OFFSET ??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@
	push	esi
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN10@PEM_get_EV
; Line 499
	push	499					; 000001f3H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	107					; 0000006bH
; Line 520
	push	107					; 0000006bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN31@PEM_get_EV:
; Line 521
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 551
	ret	0
$LN10@PEM_get_EV:
; Line 503
	cmp	BYTE PTR [esi+11], 52			; 00000034H
	jne	SHORT $LN31@PEM_get_EV
; Line 506
	cmp	BYTE PTR [esi+12], 44			; 0000002cH
	jne	SHORT $LN31@PEM_get_EV
; Line 509
	push	9
	add	esi, 13					; 0000000dH
	push	OFFSET ??_C@_09NEFHHFED@ENCRYPTED?$AA@
	push	esi
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@PEM_get_EV
; Line 510
	push	510					; 000001feH
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	106					; 0000006aH
; Line 520
	push	107					; 0000006bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 521
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
; Line 551
	ret	0
$LN13@PEM_get_EV:
; Line 513
	mov	al, BYTE PTR [esi]
	cmp	al, 10					; 0000000aH
	je	SHORT $LN3@PEM_get_EV
$LL4@PEM_get_EV:
	test	al, al
	je	SHORT $LN29@PEM_get_EV
	mov	al, BYTE PTR [esi+1]
	inc	esi
	cmp	al, 10					; 0000000aH
	jne	SHORT $LL4@PEM_get_EV
$LN3@PEM_get_EV:
; Line 514
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LN14@PEM_get_EV
$LN29@PEM_get_EV:
; Line 515
	push	515					; 00000203H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	112					; 00000070H
; Line 520
	push	107					; 0000006bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 521
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
; Line 551
	ret	0
$LN14@PEM_get_EV:
; Line 519
	push	10					; 0000000aH
	inc	esi
	push	OFFSET ??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@
	push	esi
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN15@PEM_get_EV
; Line 520
	push	520					; 00000208H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	105					; 00000069H
	push	107					; 0000006bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 521
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
; Line 551
	ret	0
$LN15@PEM_get_EV:
; Line 523
	add	esi, 10					; 0000000aH
; Line 525
	mov	ecx, esi
	push	ebx
	npad	6
$LL5@PEM_get_EV:
; Line 527
	mov	bl, BYTE PTR [esi]
; Line 529
	cmp	bl, 65					; 00000041H
	jl	SHORT $LN17@PEM_get_EV
	cmp	bl, 90					; 0000005aH
	jle	SHORT $LN16@PEM_get_EV
$LN17@PEM_get_EV:
	cmp	bl, 45					; 0000002dH
	je	SHORT $LN16@PEM_get_EV
	lea	eax, DWORD PTR [ebx-48]
	cmp	al, 9
	ja	SHORT $LN18@PEM_get_EV
$LN16@PEM_get_EV:
; Line 536
	inc	esi
; Line 537
	jmp	SHORT $LL5@PEM_get_EV
$LN18@PEM_get_EV:
; Line 539
	push	ecx
	mov	BYTE PTR [esi], 0
	call	_EVP_get_cipherbyname
	add	esp, 4
	mov	DWORD PTR [ebp], eax
; Line 540
	mov	BYTE PTR [esi], bl
; Line 541
	inc	esi
	mov	DWORD PTR _header$[esp+12], esi
	pop	ebx
; Line 543
	test	eax, eax
	jne	SHORT $LN19@PEM_get_EV
; Line 544
	push	544					; 00000220H
	push	OFFSET ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
	push	114					; 00000072H
	push	107					; 0000006bH
	push	9
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
; Line 551
	ret	0
$LN19@PEM_get_EV:
; Line 547
	push	DWORD PTR [eax+12]
	lea	eax, DWORD PTR [ebp+4]
	push	eax
	lea	eax, DWORD PTR _header$[esp+16]
	push	eax
	call	_load_iv
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebp
; Line 551
	ret	0
$LN9@PEM_get_EV:
	pop	esi
; Line 497
	mov	eax, 1
	pop	ebp
; Line 551
	ret	0
_PEM_get_EVP_CIPHER_INFO ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 838
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
