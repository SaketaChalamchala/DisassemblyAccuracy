; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?hexdig@?1??do_hex_dump@@9@9 DB '0123456789ABCDEF', 00H	; `do_hex_dump'::`2'::hexdig
	ORG $+3
_tag2nbyte DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	01H
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	04H
	DB	0ffH
	DB	02H
	ORG $+5
_char_type DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	078H
	DB	00H
	DB	01H
	DB	028H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	010H
	DB	010H
	DB	00H
	DB	019H
	DB	019H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	09H
	DB	09H
	DB	010H
	DB	09H
	DB	010H
	DB	00H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
CONST	ENDS
PUBLIC	_ASN1_STRING_print_ex_fp
PUBLIC	_ASN1_STRING_to_UTF8
PUBLIC	_ASN1_STRING_print_ex
PUBLIC	_X509_NAME_print_ex_fp
PUBLIC	_X509_NAME_print_ex
PUBLIC	??_C@_07IOFGAIHD@?2W?$CF08lX?$AA@		; `string'
PUBLIC	??_C@_07FDBPKGOC@?2U?$CF04lX?$AA@		; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_05JJPGCIKH@?2?$CF02X?$AA@			; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_01IPJKGB@?$CD?$AA@			; `string'
PUBLIC	??_C@_0BI@CMDJHDOG@?4?2crypto?2asn1?2a_strex?4c?$AA@ ; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03NPBFACHO@?5?$CL?5?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02LNAEAIDO@?$DL?5?$AA@			; `string'
PUBLIC	??_C@_03MHLONNLM@?5?$DN?5?$AA@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	__imp__fwrite:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BIO_new_fp:PROC
EXTRN	_BIO_free:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_snprintf:PROC
EXTRN	_i2d_ASN1_TYPE:PROC
EXTRN	_UTF8_getc:PROC
EXTRN	_UTF8_putc:PROC
EXTRN	_ASN1_tag2str:PROC
EXTRN	_ASN1_mbstring_copy:PROC
EXTRN	_OBJ_nid2ln:PROC
EXTRN	_OBJ_nid2sn:PROC
EXTRN	_OBJ_obj2nid:PROC
EXTRN	_OBJ_obj2txt:PROC
EXTRN	_X509_NAME_print:PROC
EXTRN	_X509_NAME_entry_count:PROC
EXTRN	_X509_NAME_get_entry:PROC
EXTRN	_X509_NAME_ENTRY_get_object:PROC
EXTRN	_X509_NAME_ENTRY_get_data:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MHLONNLM@?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_03MHLONNLM@?5?$DN?5?$AA@ DB ' = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNAEAIDO@?$DL?5?$AA@
CONST	SEGMENT
??_C@_02LNAEAIDO@?$DL?5?$AA@ DB '; ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPBFACHO@?5?$CL?5?$AA@
CONST	SEGMENT
??_C@_03NPBFACHO@?5?$CL?5?$AA@ DB ' + ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CMDJHDOG@?4?2crypto?2asn1?2a_strex?4c?$AA@
CONST	SEGMENT
??_C@_0BI@CMDJHDOG@?4?2crypto?2asn1?2a_strex?4c?$AA@ DB '.\crypto\asn1\a_'
	DB	'strex.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01IPJKGB@?$CD?$AA@
CONST	SEGMENT
??_C@_01IPJKGB@?$CD?$AA@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJPGCIKH@?2?$CF02X?$AA@
CONST	SEGMENT
??_C@_05JJPGCIKH@?2?$CF02X?$AA@ DB '\%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FDBPKGOC@?2U?$CF04lX?$AA@
CONST	SEGMENT
??_C@_07FDBPKGOC@?2U?$CF04lX?$AA@ DB '\U%04lX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOFGAIHD@?2W?$CF08lX?$AA@
CONST	SEGMENT
??_C@_07IOFGAIHD@?2W?$CF08lX?$AA@ DB '\W%08lX', 00H	; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_name_ex
_TEXT	SEGMENT
_sep_mv_len$1$ = -148					; size = 4
_sep_dn_len$1$ = -144					; size = 4
_sep_mv$1$ = -140					; size = 4
_sep_dn$1$ = -136					; size = 4
_io_ch$GSCopy$1$ = -132					; size = 4
_arg$GSCopy$1$ = -128					; size = 4
_sep_eq_len$1$ = -124					; size = 4
_prev$1$ = -120						; size = 4
_sep_eq$1$ = -116					; size = 4
_i$1$ = -112						; size = 4
tv343 = -108						; size = 4
_n$GSCopy$1$ = -104					; size = 4
_fn_opt$1$ = -100					; size = 4
_val$1$ = -96						; size = 4
_cnt$1$ = -92						; size = 4
tv348 = -88						; size = 4
_objtmp$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_io_ch$ = 8						; size = 4
_arg$ = 12						; size = 4
_n$ = 16						; size = 4
_indent$ = 20						; size = 4
_flags$ = 24						; size = 4
_do_name_ex PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 447
	mov	eax, 148				; 00000094H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+148], eax
	mov	eax, DWORD PTR _n$[esp+144]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _arg$[esp+152]
	push	esi
; Line 458
	mov	esi, DWORD PTR _indent$[esp+156]
	mov	DWORD PTR _n$GSCopy$1$[esp+160], eax
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _io_ch$[esp+160]
	test	esi, esi
	mov	DWORD PTR _io_ch$GSCopy$1$[esp+164], edi
	cmovs	esi, eax
	mov	DWORD PTR _arg$GSCopy$1$[esp+164], ebp
; Line 461
	push	esi
	push	ebp
	push	edi
	mov	DWORD PTR _prev$1$[esp+176], -1
	mov	ebx, esi
	mov	DWORD PTR _indent$[esp+172], esi
	call	_do_indent
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@do_name_ex
$LN13@do_name_ex:
; Line 462
	or	eax, -1
	jmp	$LN1@do_name_ex
$LN8@do_name_ex:
; Line 463
	mov	ecx, DWORD PTR _flags$[esp+160]
	mov	eax, ecx
	and	eax, 983040				; 000f0000H
	cmp	eax, 196608				; 00030000H
	ja	SHORT $LN40@do_name_ex
	je	SHORT $LN12@do_name_ex
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN10@do_name_ex
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN13@do_name_ex
; Line 480
	mov	DWORD PTR _sep_dn$1$[esp+164], OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
; Line 481
	mov	DWORD PTR _sep_dn_len$1$[esp+164], 2
; Line 484
	mov	DWORD PTR _indent$[esp+160], 0
; Line 485
	jmp	SHORT $LN56@do_name_ex
$LN10@do_name_ex:
; Line 472
	mov	DWORD PTR _sep_dn$1$[esp+164], OFFSET ??_C@_01IHBHIGKO@?0?$AA@
; Line 473
	mov	DWORD PTR _sep_dn_len$1$[esp+164], 1
; Line 474
	mov	DWORD PTR _sep_mv$1$[esp+164], OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
; Line 475
	mov	DWORD PTR _sep_mv_len$1$[esp+164], 1
; Line 476
	mov	DWORD PTR _indent$[esp+160], 0
; Line 477
	jmp	SHORT $LN2@do_name_ex
$LN12@do_name_ex:
; Line 488
	mov	DWORD PTR _sep_dn$1$[esp+164], OFFSET ??_C@_02LNAEAIDO@?$DL?5?$AA@
; Line 489
	mov	DWORD PTR _sep_dn_len$1$[esp+164], 2
; Line 492
	mov	DWORD PTR _indent$[esp+160], 0
; Line 493
	jmp	SHORT $LN56@do_name_ex
$LN40@do_name_ex:
; Line 463
	cmp	eax, 262144				; 00040000H
	jne	$LN13@do_name_ex
; Line 465
	mov	DWORD PTR _sep_dn$1$[esp+164], OFFSET ??_C@_01EEMJAFIK@?6?$AA@
; Line 466
	mov	DWORD PTR _sep_dn_len$1$[esp+164], 1
$LN56@do_name_ex:
; Line 467
	mov	DWORD PTR _sep_mv$1$[esp+164], OFFSET ??_C@_03NPBFACHO@?5?$CL?5?$AA@
; Line 468
	mov	DWORD PTR _sep_mv_len$1$[esp+164], 3
$LN2@do_name_ex:
; Line 499
	test	ecx, 8388608				; 00800000H
	je	SHORT $LN14@do_name_ex
; Line 500
	mov	DWORD PTR _sep_eq$1$[esp+164], OFFSET ??_C@_03MHLONNLM@?5?$DN?5?$AA@
; Line 501
	mov	DWORD PTR _sep_eq_len$1$[esp+164], 3
; Line 502
	jmp	SHORT $LN15@do_name_ex
$LN14@do_name_ex:
; Line 503
	mov	DWORD PTR _sep_eq$1$[esp+164], OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
; Line 504
	mov	DWORD PTR _sep_eq_len$1$[esp+164], 1
$LN15@do_name_ex:
; Line 509
	mov	esi, DWORD PTR _n$GSCopy$1$[esp+164]
	and	ecx, 6291456				; 00600000H
	push	esi
	mov	DWORD PTR _fn_opt$1$[esp+168], ecx
	call	_X509_NAME_entry_count
	mov	ecx, eax
	add	esp, 4
; Line 510
	xor	eax, eax
	mov	DWORD PTR _cnt$1$[esp+164], ecx
	mov	DWORD PTR _i$1$[esp+164], eax
	test	ecx, ecx
	jle	$LN5@do_name_ex
; Line 507
	mov	edx, DWORD PTR _flags$[esp+160]
	and	edx, 1048576				; 00100000H
	dec	ecx
	mov	DWORD PTR tv348[esp+164], edx
	mov	DWORD PTR tv343[esp+164], ecx
$LL6@do_name_ex:
; Line 511
	test	edx, edx
	je	SHORT $LN16@do_name_ex
; Line 512
	push	ecx
	jmp	SHORT $LN57@do_name_ex
$LN16@do_name_ex:
; Line 514
	push	eax
$LN57@do_name_ex:
	push	esi
	call	_X509_NAME_get_entry
	mov	esi, eax
	add	esp, 8
; Line 515
	mov	eax, DWORD PTR _prev$1$[esp+164]
	cmp	eax, -1
	je	SHORT $LN20@do_name_ex
; Line 516
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN19@do_name_ex
; Line 517
	push	DWORD PTR _sep_mv_len$1$[esp+164]
	push	DWORD PTR _sep_mv$1$[esp+168]
	push	ebp
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@do_name_ex
; Line 519
	add	ebx, DWORD PTR _sep_mv_len$1$[esp+164]
; Line 520
	jmp	SHORT $LN20@do_name_ex
$LN19@do_name_ex:
; Line 521
	push	DWORD PTR _sep_dn_len$1$[esp+164]
	push	DWORD PTR _sep_dn$1$[esp+168]
	push	ebp
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@do_name_ex
; Line 524
	push	DWORD PTR _indent$[esp+160]
	push	ebp
	push	edi
	call	_do_indent
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@do_name_ex
; Line 526
	mov	eax, DWORD PTR _indent$[esp+160]
	add	eax, DWORD PTR _sep_dn_len$1$[esp+164]
	add	ebx, eax
$LN20@do_name_ex:
; Line 529
	mov	eax, DWORD PTR [esi+8]
; Line 530
	push	esi
	mov	DWORD PTR _prev$1$[esp+168], eax
	call	_X509_NAME_ENTRY_get_object
; Line 531
	push	esi
	mov	edi, eax
	call	_X509_NAME_ENTRY_get_data
; Line 532
	push	edi
	mov	DWORD PTR _val$1$[esp+176], eax
	call	_OBJ_obj2nid
; Line 533
	mov	esi, DWORD PTR _fn_opt$1$[esp+176]
	add	esp, 12					; 0000000cH
	mov	ebp, eax
	cmp	esi, 6291456				; 00600000H
	je	$LN54@do_name_ex
; Line 535
	cmp	esi, 4194304				; 00400000H
	je	SHORT $LN27@do_name_ex
	test	ebp, ebp
	je	SHORT $LN27@do_name_ex
; Line 540
	test	esi, esi
	jne	SHORT $LN28@do_name_ex
; Line 542
	push	ebp
	lea	edi, DWORD PTR [esi+10]
	call	_OBJ_nid2sn
	add	esp, 4
	mov	ecx, eax
	jmp	SHORT $LN31@do_name_ex
$LN28@do_name_ex:
; Line 543
	cmp	esi, 2097152				; 00200000H
	jne	SHORT $LN30@do_name_ex
; Line 545
	push	ebp
	mov	edi, 25					; 00000019H
	call	_OBJ_nid2ln
	add	esp, 4
	mov	ecx, eax
; Line 546
	jmp	SHORT $LN31@do_name_ex
$LN30@do_name_ex:
; Line 548
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN58@do_name_ex
$LN27@do_name_ex:
; Line 536
	push	1
	push	edi
	lea	eax, DWORD PTR _objtmp$[esp+172]
	push	80					; 00000050H
	push	eax
	call	_OBJ_obj2txt
	add	esp, 16					; 00000010H
; Line 538
	lea	ecx, DWORD PTR _objtmp$[esp+164]
$LN58@do_name_ex:
; Line 537
	xor	edi, edi
$LN31@do_name_ex:
; Line 551
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL53@do_name_ex:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL53@do_name_ex
	sub	esi, edx
; Line 552
	push	esi
	push	ecx
	push	DWORD PTR _arg$GSCopy$1$[esp+172]
	call	DWORD PTR _io_ch$GSCopy$1$[esp+176]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@do_name_ex
; Line 554
	cmp	esi, edi
	jge	SHORT $LN33@do_name_ex
	test	DWORD PTR _flags$[esp+160], 33554432	; 02000000H
	je	SHORT $LN33@do_name_ex
; Line 555
	sub	edi, esi
	push	edi
	push	DWORD PTR _arg$GSCopy$1$[esp+168]
	push	DWORD PTR _io_ch$GSCopy$1$[esp+172]
	call	_do_indent
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@do_name_ex
; Line 557
	add	ebx, edi
$LN33@do_name_ex:
; Line 559
	push	DWORD PTR _sep_eq_len$1$[esp+164]
	mov	edi, DWORD PTR _io_ch$GSCopy$1$[esp+168]
	push	DWORD PTR _sep_eq$1$[esp+168]
	push	DWORD PTR _arg$GSCopy$1$[esp+172]
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@do_name_ex
; Line 561
	mov	eax, DWORD PTR _sep_eq_len$1$[esp+164]
	add	eax, esi
	add	ebx, eax
	jmp	SHORT $LN24@do_name_ex
$LN54@do_name_ex:
	mov	edi, DWORD PTR _io_ch$GSCopy$1$[esp+164]
$LN24@do_name_ex:
; Line 568
	mov	ecx, DWORD PTR _flags$[esp+160]
	test	ebp, ebp
	jne	SHORT $LN36@do_name_ex
	test	ecx, 16777216				; 01000000H
	je	SHORT $LN36@do_name_ex
; Line 569
	mov	eax, 128				; 00000080H
	jmp	SHORT $LN37@do_name_ex
$LN36@do_name_ex:
; Line 571
	xor	eax, eax
$LN37@do_name_ex:
; Line 573
	push	DWORD PTR _val$1$[esp+164]
	mov	ebp, DWORD PTR _arg$GSCopy$1$[esp+168]
	or	eax, ecx
	push	eax
	push	ebp
	push	edi
	call	_do_print_ex
	add	esp, 16					; 00000010H
; Line 574
	test	eax, eax
	js	$LN13@do_name_ex
; Line 576
	mov	ecx, DWORD PTR tv343[esp+164]
	add	ebx, eax
	mov	eax, DWORD PTR _i$1$[esp+164]
	dec	ecx
	inc	eax
	mov	DWORD PTR tv343[esp+164], ecx
	mov	DWORD PTR _i$1$[esp+164], eax
	cmp	eax, DWORD PTR _cnt$1$[esp+164]
	jge	SHORT $LN5@do_name_ex
; Line 510
	mov	esi, DWORD PTR _n$GSCopy$1$[esp+164]
	mov	edx, DWORD PTR tv348[esp+164]
	jmp	$LL6@do_name_ex
$LN5@do_name_ex:
; Line 578
	mov	eax, ebx
$LN1@do_name_ex:
; Line 579
	mov	ecx, DWORD PTR __$ArrayPad$[esp+164]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 148				; 00000094H
	ret	0
_do_name_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_indent
_TEXT	SEGMENT
_io_ch$ = 8						; size = 4
_arg$ = 12						; size = 4
_indent$ = 16						; size = 4
_do_indent PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 434
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 436
	mov	edi, DWORD PTR _indent$[esp+12]
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN3@do_indent
	mov	ebx, DWORD PTR _arg$[esp+12]
	mov	ebp, DWORD PTR _io_ch$[esp+12]
$LL4@do_indent:
; Line 437
	push	1
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	ebx
	call	ebp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@do_indent
; Line 436
	inc	esi
	cmp	esi, edi
	jl	SHORT $LL4@do_indent
$LN3@do_indent:
	pop	edi
	pop	esi
	pop	ebp
; Line 439
	mov	eax, 1
	pop	ebx
; Line 440
	ret	0
$LN8@do_indent:
	pop	edi
	pop	esi
	pop	ebp
; Line 438
	xor	eax, eax
	pop	ebx
; Line 440
	ret	0
_do_indent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_print_ex
_TEXT	SEGMENT
_quotes$ = -5						; size = 1
_type$1$ = -4						; size = 4
_io_ch$ = 8						; size = 4
_arg$ = 12						; size = 4
_flags$ = 16						; size = 1
_lflags$ = 16						; size = 4
_str$ = 20						; size = 4
_do_print_ex PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 354
	mov	eax, 8
	call	__chkstk
; Line 363
	mov	ecx, DWORD PTR _str$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR _lflags$[esp+8]
	mov	al, bl
	push	ebp
	mov	edx, DWORD PTR [ecx+4]
	and	al, 15					; 0000000fH
; Line 367
	mov	ebp, DWORD PTR _arg$[esp+12]
	push	esi
	xor	esi, esi
	mov	BYTE PTR _quotes$[esp+20], 0
	mov	BYTE PTR _flags$[esp+16], al
	mov	DWORD PTR _type$1$[esp+20], edx
	push	edi
	mov	edi, DWORD PTR _io_ch$[esp+20]
	test	bl, 64					; 00000040H
	je	SHORT $LN2@do_print_e
; Line 369
	push	edx
	call	_ASN1_tag2str
	mov	ecx, eax
	add	esp, 4
; Line 370
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	7
$LL26@do_print_e:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL26@do_print_e
	sub	esi, edx
; Line 371
	push	esi
	push	ecx
	push	ebp
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN4@do_print_e
	push	1
	push	OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	push	ebp
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN4@do_print_e
; Line 373
	mov	ecx, DWORD PTR _str$[esp+20]
	inc	esi
	mov	edx, DWORD PTR _type$1$[esp+24]
$LN2@do_print_e:
; Line 379
	test	bl, bl
	js	$LN24@do_print_e
; Line 382
	test	bl, 32					; 00000020H
	jne	SHORT $LN27@do_print_e
; Line 386
	lea	eax, DWORD PTR [edx-1]
	cmp	eax, 29					; 0000001dH
	ja	SHORT $LN25@do_print_e
; Line 387
	movsx	edi, BYTE PTR _tag2nbyte[edx]
; Line 390
	cmp	edi, -1
	jne	SHORT $LN12@do_print_e
	mov	edi, DWORD PTR _io_ch$[esp+20]
$LN25@do_print_e:
	test	ebx, 256				; 00000100H
	jne	$LN24@do_print_e
$LN27@do_print_e:
; Line 391
	mov	edi, 1
$LN12@do_print_e:
; Line 402
	test	bl, 16					; 00000010H
	je	SHORT $LN16@do_print_e
; Line 409
	mov	eax, edi
	mov	edx, 1
; Line 411
	or	eax, 8
	test	edi, edi
	cmove	eax, edx
	mov	edi, eax
$LN16@do_print_e:
; Line 414
	mov	ebx, DWORD PTR _io_ch$[esp+20]
	lea	eax, DWORD PTR _quotes$[esp+24]
	push	0
	push	ebx
	push	eax
	push	DWORD PTR _flags$[esp+32]
	push	edi
	push	DWORD PTR [ecx]
	push	DWORD PTR [ecx+8]
	call	_do_buf
	add	esp, 28					; 0000001cH
; Line 415
	test	eax, eax
	js	SHORT $LN4@do_print_e
; Line 417
	add	esi, eax
; Line 418
	mov	al, BYTE PTR _quotes$[esp+24]
	test	al, al
	je	SHORT $LN18@do_print_e
; Line 419
	add	esi, 2
$LN18@do_print_e:
; Line 420
	test	ebp, ebp
	jne	SHORT $LN19@do_print_e
$LN22@do_print_e:
	pop	edi
; Line 421
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 429
	add	esp, 8
	ret	0
$LN4@do_print_e:
	pop	edi
	pop	esi
	pop	ebp
; Line 372
	or	eax, -1
	pop	ebx
; Line 429
	add	esp, 8
	ret	0
$LN19@do_print_e:
; Line 422
	test	al, al
	je	SHORT $LN20@do_print_e
	push	1
	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	push	ebp
	call	ebx
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@do_print_e
$LN20@do_print_e:
; Line 424
	mov	eax, DWORD PTR _str$[esp+20]
	push	ebp
	push	ebx
	push	0
	push	DWORD PTR _flags$[esp+32]
	push	edi
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+8]
	call	_do_buf
	add	esp, 28					; 0000001cH
	test	eax, eax
	js	SHORT $LN4@do_print_e
; Line 426
	cmp	BYTE PTR _quotes$[esp+24], 0
	je	SHORT $LN22@do_print_e
	push	1
	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	push	ebp
	call	ebx
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@do_print_e
; Line 372
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 429
	add	esp, 8
	ret	0
$LN24@do_print_e:
; Line 395
	push	ecx
	push	ebp
	push	edi
	push	ebx
	call	_do_dump
	add	esp, 16					; 00000010H
; Line 396
	test	eax, eax
	js	SHORT $LN4@do_print_e
; Line 398
	pop	edi
	add	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 429
	add	esp, 8
	ret	0
_do_print_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_dump
_TEXT	SEGMENT
_t$ = -8						; size = 8
_lflags$ = 8						; size = 4
_p$ = 12						; size = 4
_io_ch$ = 12						; size = 4
_arg$ = 16						; size = 4
_str$ = 20						; size = 4
_do_dump PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 296
	mov	eax, 8
	call	__chkstk
	push	esi
; Line 305
	mov	esi, DWORD PTR _arg$[esp+8]
	push	edi
	mov	edi, DWORD PTR _io_ch$[esp+12]
	push	1
	push	OFFSET ??_C@_01IPJKGB@?$CD?$AA@
	push	esi
	call	edi
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@do_dump
$LN11@do_dump:
	pop	edi
; Line 306
	or	eax, -1
	pop	esi
; Line 327
	add	esp, 8
	ret	0
$LN2@do_dump:
; Line 308
	test	DWORD PTR _lflags$[esp+12], 512		; 00000200H
	jne	SHORT $LN3@do_dump
; Line 309
	mov	eax, DWORD PTR _str$[esp+12]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+8]
	push	esi
	push	edi
	call	_do_hex_dump
	add	esp, 16					; 00000010H
; Line 310
	test	eax, eax
	js	SHORT $LN11@do_dump
; Line 312
	pop	edi
	inc	eax
	pop	esi
; Line 327
	add	esp, 8
	ret	0
$LN3@do_dump:
; Line 314
	mov	ecx, DWORD PTR _str$[esp+12]
	push	ebx
	push	ebp
; Line 316
	push	0
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _t$[esp+28], eax
	lea	eax, DWORD PTR _t$[esp+28]
	push	eax
	mov	DWORD PTR _t$[esp+36], ecx
	call	_i2d_ASN1_TYPE
; Line 317
	push	317					; 0000013dH
	mov	ebp, eax
	push	OFFSET ??_C@_0BI@CMDJHDOG@?4?2crypto?2asn1?2a_strex?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 318
	test	ebx, ebx
	je	SHORT $LN10@do_dump
; Line 321
	lea	eax, DWORD PTR _p$[esp+20]
	mov	DWORD PTR _p$[esp+20], ebx
	push	eax
	lea	eax, DWORD PTR _t$[esp+28]
	push	eax
	call	_i2d_ASN1_TYPE
; Line 322
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	_do_hex_dump
; Line 323
	push	ebx
	mov	esi, eax
	call	_CRYPTO_free
	add	esp, 28					; 0000001cH
; Line 324
	test	esi, esi
	jns	SHORT $LN6@do_dump
$LN10@do_dump:
	pop	ebp
	pop	ebx
	pop	edi
; Line 325
	or	eax, -1
	pop	esi
; Line 327
	add	esp, 8
	ret	0
$LN6@do_dump:
	pop	ebp
	pop	ebx
	pop	edi
; Line 326
	lea	eax, DWORD PTR [esi+1]
	pop	esi
; Line 327
	add	esp, 8
	ret	0
_do_dump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_hex_dump
_TEXT	SEGMENT
_io_ch$ = 8						; size = 4
_hextmp$ = 12						; size = 2
_arg$ = 12						; size = 4
_buf$ = 16						; size = 4
_buflen$ = 20						; size = 4
_do_hex_dump PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 270
	push	ebx
; Line 274
	mov	ebx, DWORD PTR _arg$[esp]
	push	ebp
	mov	ebp, DWORD PTR _buflen$[esp+4]
	push	esi
	push	edi
	test	ebx, ebx
	je	SHORT $LN3@do_hex_dum
; Line 275
	mov	esi, DWORD PTR _buf$[esp+12]
; Line 276
	lea	edi, DWORD PTR [esi+ebp]
; Line 277
	cmp	esi, edi
	je	SHORT $LN3@do_hex_dum
	npad	5
$LL2@do_hex_dum:
; Line 278
	movzx	ecx, BYTE PTR [esi]
	mov	eax, ecx
; Line 279
	and	ecx, 15					; 0000000fH
	shr	eax, 4
; Line 280
	push	2
	movzx	eax, BYTE PTR ?hexdig@?1??do_hex_dump@@9@9[eax]
	mov	BYTE PTR _hextmp$[esp+16], al
	movzx	eax, BYTE PTR ?hexdig@?1??do_hex_dump@@9@9[ecx]
	mov	BYTE PTR _hextmp$[esp+17], al
	lea	eax, DWORD PTR _hextmp$[esp+16]
	push	eax
	push	ebx
	call	DWORD PTR _io_ch$[esp+24]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@do_hex_dum
; Line 282
	inc	esi
	cmp	esi, edi
	jne	SHORT $LL2@do_hex_dum
$LN3@do_hex_dum:
	pop	edi
	pop	esi
; Line 285
	lea	eax, DWORD PTR [ebp*2]
	pop	ebp
	pop	ebx
; Line 286
	ret	0
$LN8@do_hex_dum:
	pop	edi
	pop	esi
	pop	ebp
; Line 281
	or	eax, -1
	pop	ebx
; Line 286
	ret	0
_do_hex_dump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_buf
_TEXT	SEGMENT
_c$ = -56						; size = 4
_quotes$GSCopy$1$ = -52					; size = 4
_arg$GSCopy$1$ = -48					; size = 4
_io_ch$GSCopy$1$ = -44					; size = 4
_q$1$ = -40						; size = 4
_buflen$GSCopy$1$ = -36					; size = 4
tv274 = -32						; size = 4
_utflen$1$ = -28					; size = 4
tv282 = -24						; size = 4
tv283 = -20						; size = 4
_buf$GSCopy$1$ = -16					; size = 4
_utfbuf$1 = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_buf$ = 8						; size = 4
_buflen$ = 12						; size = 4
_type$ = 16						; size = 4
_flags$ = 20						; size = 1
_quotes$ = 24						; size = 4
_io_ch$ = 28						; size = 4
_arg$ = 32						; size = 4
_do_buf	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 196
	mov	eax, 56					; 00000038H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+56], eax
	mov	ecx, DWORD PTR _buflen$[esp+52]
	mov	eax, DWORD PTR _quotes$[esp+52]
	mov	edx, DWORD PTR _io_ch$[esp+52]
	push	ebx
	mov	ebx, DWORD PTR _buf$[esp+56]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _arg$[esp+64]
; Line 200
	mov	ebp, ebx
	mov	DWORD PTR _buflen$GSCopy$1$[esp+68], ecx
; Line 201
	add	ecx, ebx
	push	edi
; Line 202
	xor	edi, edi
	mov	DWORD PTR _buf$GSCopy$1$[esp+72], ebx
	mov	DWORD PTR _quotes$GSCopy$1$[esp+72], eax
	mov	DWORD PTR _io_ch$GSCopy$1$[esp+72], edx
	mov	DWORD PTR _arg$GSCopy$1$[esp+72], esi
	mov	DWORD PTR _q$1$[esp+72], ecx
; Line 203
	cmp	ebx, ecx
	je	$LN3@do_buf
	mov	ecx, DWORD PTR _type$[esp+68]
	and	ecx, 7
	mov	DWORD PTR tv274[esp+72], 64		; 00000040H
	mov	DWORD PTR tv283[esp+72], ecx
$LL2@do_buf:
; Line 204
	cmp	ebp, ebx
	jne	SHORT $LN9@do_buf
	test	BYTE PTR _flags$[esp+68], 1
	je	SHORT $LN9@do_buf
; Line 205
	mov	bl, 32					; 00000020H
	jmp	SHORT $LN10@do_buf
$LN9@do_buf:
; Line 207
	xor	bl, bl
$LN10@do_buf:
; Line 208
	cmp	ecx, 4
	ja	$LN26@do_buf
	jmp	DWORD PTR $LN37@do_buf[ecx*4]
$LN11@do_buf:
; Line 210
	movzx	ecx, BYTE PTR [ebp]
	shl	ecx, 24					; 00000018H
	mov	DWORD PTR _c$[esp+72], ecx
; Line 211
	movzx	eax, BYTE PTR [ebp+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	DWORD PTR _c$[esp+72], ecx
; Line 212
	movzx	eax, BYTE PTR [ebp+2]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR _c$[esp+72], ecx
; Line 213
	movzx	eax, BYTE PTR [ebp+3]
	or	ecx, eax
	add	ebp, 4
	mov	DWORD PTR _c$[esp+72], ecx
; Line 214
	jmp	SHORT $LN35@do_buf
$LN12@do_buf:
; Line 217
	movzx	ecx, BYTE PTR [ebp]
	shl	ecx, 8
	mov	DWORD PTR _c$[esp+72], ecx
; Line 218
	movzx	eax, BYTE PTR [ebp+1]
	or	ecx, eax
	add	ebp, 2
	mov	DWORD PTR _c$[esp+72], ecx
; Line 219
	jmp	SHORT $LN35@do_buf
$LN13@do_buf:
; Line 222
	movzx	ecx, BYTE PTR [ebp]
	inc	ebp
	mov	DWORD PTR _c$[esp+72], ecx
; Line 223
	jmp	SHORT $LN4@do_buf
$LN14@do_buf:
; Line 226
	lea	eax, DWORD PTR _c$[esp+72]
	push	eax
	push	DWORD PTR _buflen$GSCopy$1$[esp+76]
	push	ebp
	call	_UTF8_getc
	add	esp, 12					; 0000000cH
; Line 227
	test	eax, eax
	js	$LN26@do_buf
; Line 229
	mov	ecx, DWORD PTR _c$[esp+72]
	add	ebp, eax
	mov	edx, DWORD PTR _io_ch$GSCopy$1$[esp+72]
$LN35@do_buf:
	mov	eax, DWORD PTR _quotes$GSCopy$1$[esp+72]
$LN4@do_buf:
; Line 234
	cmp	ebp, DWORD PTR _q$1$[esp+72]
	jne	SHORT $LN17@do_buf
	test	BYTE PTR _flags$[esp+68], 1
	movzx	ebx, bl
	cmovne	ebx, DWORD PTR tv274[esp+72]
$LN17@do_buf:
; Line 236
	test	BYTE PTR _type$[esp+68], 8
	je	SHORT $LN18@do_buf
; Line 239
	push	ecx
	lea	eax, DWORD PTR _utfbuf$1[esp+76]
	push	6
	push	eax
	call	_UTF8_putc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _utflen$1$[esp+72], eax
; Line 240
	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN34@do_buf
	mov	al, bl
	mov	ebx, DWORD PTR _utflen$1$[esp+72]
	or	al, BYTE PTR _flags$[esp+68]
	mov	DWORD PTR tv282[esp+72], eax
	npad	6
$LL8@do_buf:
; Line 247
	push	DWORD PTR _arg$GSCopy$1$[esp+72]
	push	DWORD PTR _io_ch$GSCopy$1$[esp+76]
	push	DWORD PTR _quotes$GSCopy$1$[esp+80]
	push	eax
	movzx	eax, BYTE PTR _utfbuf$1[esp+esi+88]
	push	eax
	call	_do_esc_char
	add	esp, 20					; 00000014H
; Line 250
	test	eax, eax
	js	SHORT $LN26@do_buf
; Line 252
	add	edi, eax
	inc	esi
	mov	eax, DWORD PTR tv282[esp+72]
	cmp	esi, ebx
	jl	SHORT $LL8@do_buf
$LN34@do_buf:
	mov	esi, DWORD PTR _arg$GSCopy$1$[esp+72]
$LN19@do_buf:
; Line 203
	cmp	ebp, DWORD PTR _q$1$[esp+72]
	je	SHORT $LN3@do_buf
	mov	eax, DWORD PTR _quotes$GSCopy$1$[esp+72]
	mov	edx, DWORD PTR _io_ch$GSCopy$1$[esp+72]
	mov	ecx, DWORD PTR tv283[esp+72]
	mov	ebx, DWORD PTR _buf$GSCopy$1$[esp+72]
	jmp	$LL2@do_buf
$LN18@do_buf:
; Line 255
	or	bl, BYTE PTR _flags$[esp+68]
	push	esi
	push	edx
	push	eax
	movzx	eax, bl
	push	eax
	push	ecx
	call	_do_esc_char
	add	esp, 20					; 00000014H
; Line 258
	test	eax, eax
	js	SHORT $LN26@do_buf
; Line 260
	add	edi, eax
	jmp	SHORT $LN19@do_buf
$LN26@do_buf:
	pop	edi
	pop	esi
	pop	ebp
; Line 228
	or	eax, -1
	pop	ebx
; Line 264
	mov	ecx, DWORD PTR __$ArrayPad$[esp+56]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	ret	0
$LN3@do_buf:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	ret	0
$LN37@do_buf:
	DD	$LN14@do_buf
	DD	$LN13@do_buf
	DD	$LN12@do_buf
	DD	$LN26@do_buf
	DD	$LN11@do_buf
_do_buf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _do_esc_char
_TEXT	SEGMENT
_chtmp$ = -17						; size = 1
_tmphex$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 4
_flags$ = 12						; size = 1
_do_quotes$ = 16					; size = 4
_io_ch$ = 20						; size = 4
_arg$ = 24						; size = 4
_do_esc_char PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 126
	mov	eax, 20					; 00000014H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+20], eax
; Line 130
	mov	ecx, DWORD PTR _c$[esp+16]
	push	ebx
	mov	ebx, DWORD PTR _do_quotes$[esp+20]
	push	esi
	mov	esi, DWORD PTR _io_ch$[esp+24]
	push	edi
	mov	edi, DWORD PTR _arg$[esp+28]
	cmp	ecx, -1
	jbe	SHORT $LN2@do_esc_cha
$LN22@do_esc_cha:
	pop	edi
	pop	esi
; Line 131
	or	eax, -1
	pop	ebx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN2@do_esc_cha:
; Line 132
	cmp	ecx, 65535				; 0000ffffH
	jbe	SHORT $LN3@do_esc_cha
; Line 133
	push	ecx
	push	OFFSET ??_C@_07IOFGAIHD@?2W?$CF08lX?$AA@
	lea	eax, DWORD PTR _tmphex$[esp+40]
	push	11					; 0000000bH
	push	eax
	call	_BIO_snprintf
; Line 134
	push	10					; 0000000aH
	lea	eax, DWORD PTR _tmphex$[esp+52]
	push	eax
	push	edi
	call	esi
	add	esp, 28					; 0000001cH
	neg	eax
	sbb	eax, eax
	and	eax, 11					; 0000000bH
	pop	edi
	pop	esi
; Line 179
	dec	eax
	pop	ebx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN3@do_esc_cha:
; Line 138
	cmp	ecx, 255				; 000000ffH
	jbe	SHORT $LN5@do_esc_cha
; Line 139
	push	ecx
	push	OFFSET ??_C@_07FDBPKGOC@?2U?$CF04lX?$AA@
	lea	eax, DWORD PTR _tmphex$[esp+40]
	push	11					; 0000000bH
	push	eax
	call	_BIO_snprintf
; Line 140
	push	6
	lea	eax, DWORD PTR _tmphex$[esp+52]
	push	eax
	push	edi
	call	esi
	add	esp, 28					; 0000001cH
	neg	eax
	sbb	eax, eax
	and	eax, 7
	pop	edi
	pop	esi
; Line 179
	dec	eax
	pop	ebx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN5@do_esc_cha:
; Line 146
	mov	dl, BYTE PTR _flags$[esp+28]
	mov	BYTE PTR _chtmp$[esp+32], cl
	cmp	cl, 127					; 0000007fH
	jbe	SHORT $LN7@do_esc_cha
	mov	al, dl
	and	al, 4
	jmp	SHORT $LN8@do_esc_cha
$LN7@do_esc_cha:
; Line 148
	movzx	eax, cl
	mov	al, BYTE PTR _char_type[eax]
	and	al, dl
$LN8@do_esc_cha:
; Line 149
	test	al, 97					; 00000061H
	je	SHORT $LN9@do_esc_cha
; Line 151
	test	al, 8
	je	SHORT $LN10@do_esc_cha
; Line 152
	test	ebx, ebx
	je	SHORT $LN17@do_esc_cha
; Line 153
	mov	BYTE PTR [ebx], 1
$LN17@do_esc_cha:
; Line 179
	push	1
	lea	eax, DWORD PTR _chtmp$[esp+36]
	push	eax
	push	edi
	call	esi
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	and	eax, 2
	pop	edi
	pop	esi
	dec	eax
	pop	ebx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN10@do_esc_cha:
; Line 158
	push	1
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	edi
	call	esi
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN22@do_esc_cha
; Line 160
	push	1
	lea	eax, DWORD PTR _chtmp$[esp+36]
	push	eax
	push	edi
	call	esi
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	and	eax, 3
	pop	edi
	pop	esi
; Line 179
	dec	eax
	pop	ebx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN9@do_esc_cha:
; Line 164
	test	al, 6
	je	SHORT $LN15@do_esc_cha
; Line 165
	movzx	eax, cl
	push	eax
	push	OFFSET ??_C@_05JJPGCIKH@?2?$CF02X?$AA@
	lea	eax, DWORD PTR _tmphex$[esp+40]
	push	11					; 0000000bH
	push	eax
	call	_BIO_snprintf
; Line 166
	push	3
	lea	eax, DWORD PTR _tmphex$[esp+52]
	push	eax
	push	edi
	call	esi
	add	esp, 28					; 0000001cH
	neg	eax
	sbb	eax, eax
	and	eax, 4
	pop	edi
	pop	esi
; Line 179
	dec	eax
	pop	ebx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+20]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
$LN15@do_esc_cha:
; Line 174
	cmp	cl, 92					; 0000005cH
	jne	$LN17@do_esc_cha
	test	dl, 15					; 0000000fH
	je	$LN17@do_esc_cha
; Line 175
	push	2
	push	OFFSET ??_C@_02HDBGODGB@?2?2?$AA@
	push	edi
	call	esi
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[esp+44]
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	pop	edi
	pop	esi
	and	eax, 3
	pop	ebx
	xor	ecx, esp
	dec	eax
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	ret	0
_do_esc_char ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _send_fp_chars
_TEXT	SEGMENT
_arg$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_send_fp_chars PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 109
	mov	eax, DWORD PTR _arg$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@send_fp_ch
; Line 110
	mov	eax, 1
; Line 114
	ret	0
$LN2@send_fp_ch:
; Line 111
	push	eax
	push	DWORD PTR _len$[esp]
	push	1
	push	DWORD PTR _buf$[esp+8]
	call	DWORD PTR __imp__fwrite
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _len$[esp-4]
	sete	cl
	mov	eax, ecx
; Line 114
	ret	0
_send_fp_chars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _send_bio_chars
_TEXT	SEGMENT
_arg$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_send_bio_chars PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 100
	mov	eax, DWORD PTR _arg$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@send_bio_c
; Line 101
	mov	eax, 1
; Line 105
	ret	0
$LN2@send_bio_c:
; Line 102
	push	DWORD PTR _len$[esp-4]
	push	DWORD PTR _buf$[esp]
	push	eax
	call	_BIO_write
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _len$[esp-4]
	sete	cl
	mov	eax, ecx
; Line 105
	ret	0
_send_bio_chars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_NAME_print_ex
_TEXT	SEGMENT
_out$ = 8						; size = 4
_nm$ = 12						; size = 4
_indent$ = 16						; size = 4
_flags$ = 20						; size = 4
_X509_NAME_print_ex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 586
	mov	eax, DWORD PTR _flags$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@X509_NAME_
; Line 587
	push	DWORD PTR _indent$[esp-4]
	push	DWORD PTR _nm$[esp]
	push	DWORD PTR _out$[esp+4]
	call	_X509_NAME_print
	add	esp, 12					; 0000000cH
; Line 589
	ret	0
$LN2@X509_NAME_:
; Line 588
	push	eax
	push	DWORD PTR _indent$[esp]
	push	DWORD PTR _nm$[esp+4]
	push	DWORD PTR _out$[esp+8]
	push	OFFSET _send_bio_chars
	call	_do_name_ex
	add	esp, 20					; 00000014H
; Line 589
	ret	0
_X509_NAME_print_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _X509_NAME_print_ex_fp
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_nm$ = 12						; size = 4
_indent$ = 16						; size = 4
_flags$ = 20						; size = 4
_X509_NAME_print_ex_fp PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 595
	mov	eax, DWORD PTR _flags$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@X509_NAME_
; Line 598
	push	edi
	push	eax
	push	DWORD PTR _fp$[esp+4]
	call	_BIO_new_fp
	mov	edi, eax
	add	esp, 8
; Line 599
	test	edi, edi
	jne	SHORT $LN3@X509_NAME_
; Line 600
	or	eax, -1
	pop	edi
; Line 606
	ret	0
$LN3@X509_NAME_:
	push	esi
; Line 601
	push	DWORD PTR _indent$[esp+4]
	push	DWORD PTR _nm$[esp+8]
	push	edi
	call	_X509_NAME_print
; Line 602
	push	edi
	mov	esi, eax
	call	_BIO_free
	add	esp, 16					; 00000010H
; Line 603
	mov	eax, esi
	pop	esi
	pop	edi
; Line 606
	ret	0
$LN2@X509_NAME_:
; Line 605
	push	eax
	push	DWORD PTR _indent$[esp]
	push	DWORD PTR _nm$[esp+4]
	push	DWORD PTR _fp$[esp+8]
	push	OFFSET _send_fp_chars
	call	_do_name_ex
	add	esp, 20					; 00000014H
; Line 606
	ret	0
_X509_NAME_print_ex_fp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_STRING_print_ex
_TEXT	SEGMENT
_out$ = 8						; size = 4
_str$ = 12						; size = 4
_flags$ = 16						; size = 4
_ASN1_STRING_print_ex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 611
	push	DWORD PTR _str$[esp-4]
	push	DWORD PTR _flags$[esp]
	push	DWORD PTR _out$[esp+4]
	push	OFFSET _send_bio_chars
	call	_do_print_ex
	add	esp, 16					; 00000010H
; Line 612
	ret	0
_ASN1_STRING_print_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_STRING_to_UTF8
_TEXT	SEGMENT
_str$ = -20						; size = 4
_stmp$ = -16						; size = 16
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_ASN1_STRING_to_UTF8 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 627
	mov	eax, 20					; 00000014H
	call	__chkstk
; Line 628
	lea	eax, DWORD PTR _stmp$[esp+20]
	mov	DWORD PTR _str$[esp+20], eax
; Line 630
	mov	eax, DWORD PTR _in$[esp+16]
	test	eax, eax
	je	SHORT $LN4@ASN1_STRIN
; Line 632
	mov	ecx, DWORD PTR [eax+4]
; Line 633
	cmp	ecx, 30					; 0000001eH
	ja	SHORT $LN4@ASN1_STRIN
; Line 635
	movsx	ecx, BYTE PTR _tag2nbyte[ecx]
; Line 636
	cmp	ecx, -1
	je	SHORT $LN4@ASN1_STRIN
; Line 642
	push	8192					; 00002000H
	or	ecx, 4096				; 00001000H
	mov	DWORD PTR _stmp$[esp+32], 0
	push	ecx
	push	DWORD PTR [eax]
	mov	DWORD PTR _stmp$[esp+32], 0
	push	DWORD PTR [eax+8]
	lea	eax, DWORD PTR _str$[esp+36]
	mov	DWORD PTR _stmp$[esp+48], 0
	push	eax
	call	_ASN1_mbstring_copy
	add	esp, 20					; 00000014H
; Line 645
	test	eax, eax
	js	SHORT $LN1@ASN1_STRIN
; Line 647
	mov	ecx, DWORD PTR _out$[esp+16]
	mov	eax, DWORD PTR _stmp$[esp+28]
	mov	DWORD PTR [ecx], eax
; Line 648
	mov	eax, DWORD PTR _stmp$[esp+20]
; Line 649
	add	esp, 20					; 00000014H
	ret	0
$LN4@ASN1_STRIN:
; Line 634
	or	eax, -1
$LN1@ASN1_STRIN:
; Line 649
	add	esp, 20					; 00000014H
	ret	0
_ASN1_STRING_to_UTF8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_STRING_print_ex_fp
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_str$ = 12						; size = 4
_flags$ = 16						; size = 4
_ASN1_STRING_print_ex_fp PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\a_strex.c
; Line 617
	push	DWORD PTR _str$[esp-4]
	push	DWORD PTR _flags$[esp]
	push	DWORD PTR _fp$[esp+4]
	push	OFFSET _send_fp_chars
	call	_do_print_ex
	add	esp, 16					; 00000010H
; Line 618
	ret	0
_ASN1_STRING_print_ex_fp ENDP
_TEXT	ENDS
END
