; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bf\bftest.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ ; `string'
PUBLIC	??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@	; `string'
;	COMDAT ??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@
CONST	SEGMENT
??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@ DB 'Who is John Galt?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@
CONST	SEGMENT
??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ DB 'abcdefghijklmnopqr'
	DB	'stuvwxyz', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
_bf_key	DD	FLAT:??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@
	DD	FLAT:??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@
_bf_plain DD	0424c4f57H
	DD	046495348H
	DD	0fedcba98H
	DD	076543210H
_bf_cipher DD	0324ed0feH
	DD	0f413a203H
	DD	0cc91732bH
	DD	08022f684H
_ecb_data DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	030H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	07cH
	DB	0a1H
	DB	010H
	DB	045H
	DB	04aH
	DB	01aH
	DB	06eH
	DB	057H
	DB	01H
	DB	031H
	DB	0d9H
	DB	061H
	DB	09dH
	DB	0c1H
	DB	037H
	DB	06eH
	DB	07H
	DB	0a1H
	DB	013H
	DB	03eH
	DB	04aH
	DB	0bH
	DB	026H
	DB	086H
	DB	038H
	DB	049H
	DB	067H
	DB	04cH
	DB	026H
	DB	02H
	DB	031H
	DB	09eH
	DB	04H
	DB	0b9H
	DB	015H
	DB	0baH
	DB	043H
	DB	0feH
	DB	0b5H
	DB	0b6H
	DB	01H
	DB	013H
	DB	0b9H
	DB	070H
	DB	0fdH
	DB	034H
	DB	0f2H
	DB	0ceH
	DB	01H
	DB	070H
	DB	0f1H
	DB	075H
	DB	046H
	DB	08fH
	DB	0b5H
	DB	0e6H
	DB	043H
	DB	029H
	DB	07fH
	DB	0adH
	DB	038H
	DB	0e3H
	DB	073H
	DB	0feH
	DB	07H
	DB	0a7H
	DB	013H
	DB	070H
	DB	045H
	DB	0daH
	DB	02aH
	DB	016H
	DB	04H
	DB	068H
	DB	091H
	DB	04H
	DB	0c2H
	DB	0fdH
	DB	03bH
	DB	02fH
	DB	037H
	DB	0d0H
	DB	06bH
	DB	0b5H
	DB	016H
	DB	0cbH
	DB	075H
	DB	046H
	DB	01fH
	DB	08H
	DB	026H
	DB	0dH
	DB	01aH
	DB	0c2H
	DB	046H
	DB	05eH
	DB	058H
	DB	040H
	DB	023H
	DB	064H
	DB	01aH
	DB	0baH
	DB	061H
	DB	076H
	DB	02H
	DB	058H
	DB	016H
	DB	016H
	DB	046H
	DB	029H
	DB	0b0H
	DB	07H
	DB	049H
	DB	079H
	DB	03eH
	DB	0bcH
	DB	079H
	DB	0b3H
	DB	025H
	DB	08fH
	DB	04fH
	DB	0b0H
	DB	05eH
	DB	015H
	DB	015H
	DB	0abH
	DB	073H
	DB	0a7H
	DB	049H
	DB	0e9H
	DB	05dH
	DB	06dH
	DB	04cH
	DB	0a2H
	DB	029H
	DB	0bfH
	DB	01H
	DB	083H
	DB	010H
	DB	0dcH
	DB	040H
	DB	09bH
	DB	026H
	DB	0d6H
	DB	01cH
	DB	058H
	DB	07fH
	DB	01cH
	DB	013H
	DB	092H
	DB	04fH
	DB	0efH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01fH
	DB	01fH
	DB	01fH
	DB	01fH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0e0H
	DB	0feH
	DB	0e0H
	DB	0feH
	DB	0f1H
	DB	0feH
	DB	0f1H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_plain_data DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	0a1H
	DB	0d6H
	DB	0d0H
	DB	039H
	DB	077H
	DB	067H
	DB	042H
	DB	05cH
	DB	0d5H
	DB	04cH
	DB	0a8H
	DB	03dH
	DB	0efH
	DB	057H
	DB	0daH
	DB	02H
	DB	048H
	DB	0d4H
	DB	038H
	DB	06H
	DB	0f6H
	DB	071H
	DB	072H
	DB	051H
	DB	045H
	DB	04bH
	DB	058H
	DB	02dH
	DB	0dfH
	DB	044H
	DB	0aH
	DB	042H
	DB	0fdH
	DB	044H
	DB	030H
	DB	059H
	DB	057H
	DB	07fH
	DB	0a2H
	DB	05H
	DB	09bH
	DB	05eH
	DB	08H
	DB	051H
	DB	0cfH
	DB	014H
	DB	03aH
	DB	07H
	DB	056H
	DB	0d8H
	DB	0e0H
	DB	077H
	DB	047H
	DB	061H
	DB	0d2H
	DB	076H
	DB	025H
	DB	014H
	DB	0b8H
	DB	029H
	DB	0bfH
	DB	048H
	DB	06aH
	DB	03bH
	DB	0ddH
	DB	011H
	DB	090H
	DB	049H
	DB	037H
	DB	028H
	DB	02H
	DB	026H
	DB	095H
	DB	05fH
	DB	068H
	DB	035H
	DB	0afH
	DB	060H
	DB	09aH
	DB	016H
	DB	04dH
	DB	05eH
	DB	040H
	DB	04fH
	DB	027H
	DB	052H
	DB	032H
	DB	06bH
	DB	05H
	DB	06eH
	DB	018H
	DB	075H
	DB	09fH
	DB	05cH
	DB	0caH
	DB	00H
	DB	04bH
	DB	0d6H
	DB	0efH
	DB	09H
	DB	017H
	DB	060H
	DB	062H
	DB	048H
	DB	0dH
	DB	039H
	DB	00H
	DB	06eH
	DB	0e7H
	DB	062H
	DB	0f2H
	DB	043H
	DB	075H
	DB	040H
	DB	0c8H
	DB	069H
	DB	08fH
	DB	03cH
	DB	0faH
	DB	07H
	DB	02dH
	DB	043H
	DB	0a0H
	DB	077H
	DB	07H
	DB	052H
	DB	092H
	DB	02H
	DB	0feH
	DB	055H
	DB	077H
	DB	081H
	DB	017H
	DB	0f1H
	DB	02aH
	DB	01dH
	DB	09dH
	DB	05cH
	DB	050H
	DB	018H
	DB	0f7H
	DB	028H
	DB	0c2H
	DB	030H
	DB	055H
	DB	032H
	DB	028H
	DB	06dH
	DB	06fH
	DB	029H
	DB	05aH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_cipher_data DB	04eH
	DB	0f9H
	DB	097H
	DB	045H
	DB	061H
	DB	098H
	DB	0ddH
	DB	078H
	DB	051H
	DB	086H
	DB	06fH
	DB	0d5H
	DB	0b8H
	DB	05eH
	DB	0cbH
	DB	08aH
	DB	07dH
	DB	085H
	DB	06fH
	DB	09aH
	DB	061H
	DB	030H
	DB	063H
	DB	0f2H
	DB	024H
	DB	066H
	DB	0ddH
	DB	087H
	DB	08bH
	DB	096H
	DB	03cH
	DB	09dH
	DB	061H
	DB	0f9H
	DB	0c3H
	DB	080H
	DB	022H
	DB	081H
	DB	0b0H
	DB	096H
	DB	07dH
	DB	0cH
	DB	0c6H
	DB	030H
	DB	0afH
	DB	0daH
	DB	01eH
	DB	0c7H
	DB	04eH
	DB	0f9H
	DB	097H
	DB	045H
	DB	061H
	DB	098H
	DB	0ddH
	DB	078H
	DB	0aH
	DB	0ceH
	DB	0abH
	DB	0fH
	DB	0c6H
	DB	0a0H
	DB	0a2H
	DB	08dH
	DB	059H
	DB	0c6H
	DB	082H
	DB	045H
	DB	0ebH
	DB	05H
	DB	028H
	DB	02bH
	DB	0b1H
	DB	0b8H
	DB	0ccH
	DB	0bH
	DB	025H
	DB	0fH
	DB	09H
	DB	0a0H
	DB	017H
	DB	030H
	DB	0e5H
	DB	077H
	DB	08bH
	DB	0eaH
	DB	01dH
	DB	0a4H
	DB	0a2H
	DB	05eH
	DB	078H
	DB	056H
	DB	0cfH
	DB	026H
	DB	051H
	DB	0ebH
	DB	035H
	DB	038H
	DB	082H
	DB	0b1H
	DB	09H
	DB	0ceH
	DB	08fH
	DB	01aH
	DB	048H
	DB	0f4H
	DB	0d0H
	DB	088H
	DB	04cH
	DB	037H
	DB	099H
	DB	018H
	DB	043H
	DB	021H
	DB	093H
	DB	0b7H
	DB	089H
	DB	051H
	DB	0fcH
	DB	098H
	DB	013H
	DB	0f0H
	DB	041H
	DB	054H
	DB	0d6H
	DB	09dH
	DB	01aH
	DB	0e5H
	DB	02eH
	DB	0edH
	DB	0daH
	DB	093H
	DB	0ffH
	DB	0d3H
	DB	09cH
	DB	079H
	DB	0d8H
	DB	087H
	DB	0e0H
	DB	039H
	DB	03cH
	DB	02dH
	DB	0a6H
	DB	0e3H
	DB	05fH
	DB	099H
	DB	0d0H
	DB	04fH
	DB	05bH
	DB	016H
	DB	039H
	DB	069H
	DB	04aH
	DB	05H
	DB	07aH
	DB	03bH
	DB	024H
	DB	0d3H
	DB	097H
	DB	07bH
	DB	045H
	DB	020H
	DB	031H
	DB	0c1H
	DB	0e4H
	DB	0faH
	DB	0daH
	DB	08eH
	DB	075H
	DB	055H
	DB	0aeH
	DB	039H
	DB	0f5H
	DB	09bH
	DB	087H
	DB	0bdH
	DB	053H
	DB	0c5H
	DB	05fH
	DB	09cH
	DB	0b4H
	DB	09fH
	DB	0c0H
	DB	019H
	DB	07aH
	DB	08eH
	DB	07bH
	DB	0faH
	DB	093H
	DB	07eH
	DB	089H
	DB	0a3H
	DB	0cfH
	DB	09cH
	DB	05dH
	DB	07aH
	DB	049H
	DB	086H
	DB	0adH
	DB	0b5H
	DB	0d1H
	DB	0abH
	DB	0b2H
	DB	090H
	DB	065H
	DB	08bH
	DB	0c7H
	DB	078H
	DB	055H
	DB	0cbH
	DB	037H
	DB	074H
	DB	0d1H
	DB	03eH
	DB	0f2H
	DB	01H
	DB	0faH
	DB	034H
	DB	0ecH
	DB	048H
	DB	047H
	DB	0b2H
	DB	068H
	DB	0b2H
	DB	0a7H
	DB	090H
	DB	079H
	DB	051H
	DB	08H
	DB	0eaH
	DB	03cH
	DB	0aeH
	DB	0c3H
	DB	09eH
	DB	07H
	DB	02dH
	DB	09fH
	DB	0acH
	DB	063H
	DB	01dH
	DB	01H
	DB	049H
	DB	033H
	DB	0e0H
	DB	0cdH
	DB	0afH
	DB	0f6H
	DB	0e4H
	DB	0f2H
	DB	01eH
	DB	09aH
	DB	077H
	DB	0b7H
	DB	01cH
	DB	049H
	DB	0bcH
	DB	024H
	DB	059H
	DB	046H
	DB	088H
	DB	057H
	DB	054H
	DB	036H
	DB	09aH
	DB	06bH
	DB	05cH
	DB	05aH
	DB	09cH
	DB	05dH
	DB	09eH
	DB	0aH
	DB	05aH
_cbc_key DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0f0H
	DB	0e1H
	DB	0d2H
	DB	0c3H
	DB	0b4H
	DB	0a5H
	DB	096H
	DB	087H
_cbc_iv	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_cbc_data DB	'7654321 Now is the time for ', 00H
	ORG $+11
_cbc_ok	DB	06bH
	DB	077H
	DB	0b4H
	DB	0d6H
	DB	030H
	DB	06H
	DB	0deH
	DB	0e6H
	DB	05H
	DB	0b1H
	DB	056H
	DB	0e2H
	DB	074H
	DB	03H
	DB	097H
	DB	093H
	DB	058H
	DB	0deH
	DB	0b9H
	DB	0e7H
	DB	015H
	DB	046H
	DB	016H
	DB	0d9H
	DB	059H
	DB	0f1H
	DB	065H
	DB	02bH
	DB	0d5H
	DB	0ffH
	DB	092H
	DB	0ccH
_cfb64_ok DB	0e7H
	DB	032H
	DB	014H
	DB	0a2H
	DB	082H
	DB	021H
	DB	039H
	DB	0caH
	DB	0f2H
	DB	06eH
	DB	0cfH
	DB	06dH
	DB	02eH
	DB	0b9H
	DB	0e7H
	DB	06eH
	DB	03dH
	DB	0a3H
	DB	0deH
	DB	04H
	DB	0d1H
	DB	051H
	DB	072H
	DB	00H
	DB	051H
	DB	09dH
	DB	057H
	DB	0a6H
	DB	0c3H
	ORG $+3
_ofb64_ok DB	0e7H
	DB	032H
	DB	014H
	DB	0a2H
	DB	082H
	DB	021H
	DB	039H
	DB	0caH
	DB	062H
	DB	0b3H
	DB	043H
	DB	0ccH
	DB	05bH
	DB	065H
	DB	058H
	DB	073H
	DB	010H
	DB	0ddH
	DB	090H
	DB	08dH
	DB	0cH
	DB	024H
	DB	01bH
	DB	022H
	DB	063H
	DB	0c2H
	DB	0cfH
	DB	080H
	DB	0daH
	ORG $+3
_key_test DB	0f0H
	DB	0e1H
	DB	0d2H
	DB	0c3H
	DB	0b4H
	DB	0a5H
	DB	096H
	DB	087H
	DB	078H
	DB	069H
	DB	05aH
	DB	04bH
	DB	03cH
	DB	02dH
	DB	01eH
	DB	0fH
	DB	00H
	DB	011H
	DB	022H
	DB	033H
	DB	044H
	DB	055H
	DB	066H
	DB	077H
	DB	088H
	ORG $+3
_key_data DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	ORG $+4
_key_out DB	0f9H
	DB	0adH
	DB	059H
	DB	07cH
	DB	049H
	DB	0dbH
	DB	00H
	DB	05eH
	DB	0e9H
	DB	01dH
	DB	021H
	DB	0c1H
	DB	0d9H
	DB	061H
	DB	0a6H
	DB	0d6H
	DB	0e9H
	DB	0c2H
	DB	0b7H
	DB	0aH
	DB	01bH
	DB	0c6H
	DB	05cH
	DB	0f3H
	DB	0beH
	DB	01eH
	DB	063H
	DB	094H
	DB	08H
	DB	064H
	DB	0fH
	DB	05H
	DB	0b3H
	DB	09eH
	DB	044H
	DB	048H
	DB	01bH
	DB	0dbH
	DB	01eH
	DB	06eH
	DB	094H
	DB	057H
	DB	0aaH
	DB	083H
	DB	0b1H
	DB	092H
	DB	08cH
	DB	0dH
	DB	08bH
	DB	0b7H
	DB	070H
	DB	032H
	DB	0f9H
	DB	060H
	DB	062H
	DB	09dH
	DB	0e8H
	DB	07aH
	DB	024H
	DB	04eH
	DB	02cH
	DB	0c8H
	DB	05eH
	DB	082H
	DB	015H
	DB	075H
	DB	0eH
	DB	07aH
	DB	04fH
	DB	04eH
	DB	0c5H
	DB	077H
	DB	012H
	DB	02bH
	DB	0a7H
	DB	0bH
	DB	03aH
	DB	0b6H
	DB	04aH
	DB	0e0H
	DB	03aH
	DB	083H
	DB	03cH
	DB	09aH
	DB	0ffH
	DB	0c5H
	DB	037H
	DB	0f6H
	DB	094H
	DB	09H
	DB	0daH
	DB	087H
	DB	0a9H
	DB	0fH
	DB	06bH
	DB	0f2H
	DB	088H
	DB	04fH
	DB	080H
	DB	062H
	DB	050H
	DB	060H
	DB	0b8H
	DB	0b4H
	DB	01fH
	DB	085H
	DB	03H
	DB	01cH
	DB	019H
	DB	0e1H
	DB	019H
	DB	068H
	DB	079H
	DB	0d9H
	DB	037H
	DB	03aH
	DB	071H
	DB	04cH
	DB	0a3H
	DB	04fH
	DB	093H
	DB	014H
	DB	028H
	DB	087H
	DB	0eeH
	DB	03bH
	DB	0e1H
	DB	05cH
	DB	03H
	DB	042H
	DB	09eH
	DB	083H
	DB	08cH
	DB	0e2H
	DB	0d1H
	DB	04bH
	DB	0a4H
	DB	029H
	DB	09eH
	DB	027H
	DB	046H
	DB	09fH
	DB	0f6H
	DB	07bH
	DB	0afH
	DB	0d5H
	DB	0aeH
	DB	0d1H
	DB	0c1H
	DB	0bcH
	DB	096H
	DB	0a8H
	DB	010H
	DB	085H
	DB	01cH
	DB	0eH
	DB	038H
	DB	058H
	DB	0daH
	DB	09fH
	DB	0e6H
	DB	0f5H
	DB	01eH
	DB	0d7H
	DB	09bH
	DB	09dH
	DB	0b2H
	DB	01fH
	DB	064H
	DB	0a6H
	DB	0e1H
	DB	04aH
	DB	0fdH
	DB	036H
	DB	0b4H
	DB	06fH
	DB	080H
	DB	0c7H
	DB	0d7H
	DB	0d4H
	DB	05aH
	DB	054H
	DB	079H
	DB	0adH
	DB	05H
	DB	04H
	DB	04bH
	DB	062H
	DB	0faH
	DB	052H
	DB	0d0H
	DB	080H
	ORG $+8
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@	; `string'
PUBLIC	??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@ ; `string'
PUBLIC	??_C@_04JFFKLGJF@?$CF02X?$AA@			; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@	; `string'
PUBLIC	??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@	; `string'
PUBLIC	??_C@_02CAMHBLCK@c?$DN?$AA@			; `string'
PUBLIC	??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@	; `string'
PUBLIC	??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@ ; `string'
PUBLIC	??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@	; `string'
PUBLIC	??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@	; `string'
PUBLIC	??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@	; `string'
PUBLIC	??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@ ; `string'
PUBLIC	??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@ ; `string'
PUBLIC	??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@		; `string'
PUBLIC	??_C@_06OMOGNBEB@?$CF08lX?5?$AA@		; `string'
PUBLIC	??_C@_09PBKDEKON@expected?3?$AA@		; `string'
PUBLIC	??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@ ; `string'
PUBLIC	??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@ ; `string'
PUBLIC	??_C@_05BFHEBJNP@?$CF02X?5?$AA@			; `string'
PUBLIC	??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@ ; `string'
PUBLIC	??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@		; `string'
PUBLIC	??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__exit:PROC
EXTRN	_BF_set_key:PROC
EXTRN	_BF_encrypt:PROC
EXTRN	_BF_decrypt:PROC
EXTRN	_BF_ecb_encrypt:PROC
EXTRN	_BF_cbc_encrypt:PROC
EXTRN	_BF_cfb64_encrypt:PROC
EXTRN	_BF_ofb64_encrypt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@ DB 'BF_ofb64_e'
	DB	'ncrypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@ DB 'BF_ofb64_e'
	DB	'ncrypt encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@
CONST	SEGMENT
??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@ DB 'testing blowfi'
	DB	'sh in ofb64', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@ DB 'BF_cfb64_e'
	DB	'ncrypt decrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@ DB 'BF_cfb64_e'
	DB	'ncrypt encrypt error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@
CONST	SEGMENT
??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@ DB 'testing '
	DB	'blowfish in cfb64 mode', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@ DB 'BF_cbc_encry'
	DB	'pt decrypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@
CONST	SEGMENT
??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@ DB '0x%02X,', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@
CONST	SEGMENT
??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@ DB 'BF_cbc_encry'
	DB	'pt encrypt error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@
CONST	SEGMENT
??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@ DB 'testing bl'
	DB	'owfish in cbc mode', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@
CONST	SEGMENT
??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@ DB 'blowfish setkey err'
	DB	'or', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@
CONST	SEGMENT
??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@ DB 'testing blowfish'
	DB	' set_key', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@
CONST	SEGMENT
??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@ DB 'BF_ecb_encryp'
	DB	't error decrypting', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
CONST	SEGMENT
??_C@_05BFHEBJNP@?$CF02X?5?$AA@ DB '%02X ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@
CONST	SEGMENT
??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@ DB 'BF_ecb_encryp'
	DB	't blowfish error encrypting', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@
CONST	SEGMENT
??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@ DB 'testing bl'
	DB	'owfish in ecb mode', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@
CONST	SEGMENT
??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@ DB 'BF_encrypt er'
	DB	'ror decrypting', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBKDEKON@expected?3?$AA@
CONST	SEGMENT
??_C@_09PBKDEKON@expected?3?$AA@ DB 'expected:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@
CONST	SEGMENT
??_C@_06OMOGNBEB@?$CF08lX?5?$AA@ DB '%08lX ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
CONST	SEGMENT
??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ DB 'got     :', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@
CONST	SEGMENT
??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@ DB 'BF_encrypt er'
	DB	'ror encrypting', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@
CONST	SEGMENT
??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@ DB 'testing blo'
	DB	'wfish in raw ecb mode', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@
CONST	SEGMENT
??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@ DB 'ofb64 cipher text', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@
CONST	SEGMENT
??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@ DB 'cfb64 cipher text', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@ DB 'cipher[%d]= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@
CONST	SEGMENT
??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@ DB 'cbc cipher text', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@ DB 0aH, 'data[%d]  ='
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@ DB 0aH, 'd'
	DB	'ata[%d]  = ''%s''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@ DB 0aH, 'iv[8]     ='
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@ DB 'key[16]   = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@
CONST	SEGMENT
??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@ DB 0aH, 'chaining '
	DB	'mode test data', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@
CONST	SEGMENT
??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@ DB ' k[%2u]=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02CAMHBLCK@c?$DN?$AA@
CONST	SEGMENT
??_C@_02CAMHBLCK@c?$DN?$AA@ DB 'c=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@
CONST	SEGMENT
??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@ DB 'data[8]= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@
CONST	SEGMENT
??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@ DB 'set_key test data', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFFKLGJF@?$CF02X?$AA@
CONST	SEGMENT
??_C@_04JFFKLGJF@?$CF02X?$AA@ DB '%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@
CONST	SEGMENT
??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@ DB 'key bytes'
	DB	09H, 09H, 'clear bytes', 09H, 09H, 'cipher bytes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@
CONST	SEGMENT
??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@ DB 'ecb test data', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bf\bftest.c
; Line 287
	cmp	DWORD PTR _argc$[esp-4], 1
	jle	SHORT $LN2@main
; Line 288
	call	_print_test_data
	jmp	SHORT $LN3@main
$LN2@main:
; Line 290
	call	_test
$LN3@main:
; Line 296
	push	eax
	call	DWORD PTR __imp__exit
$LN6@main:
$LN5@main:
	int	3
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _print_test_data
_TEXT	SEGMENT
_print_test_data PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bf\bftest.c
; Line 301
	push	esi
	push	edi
; Line 304
	push	OFFSET ??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@
	call	_printf
; Line 305
	push	OFFSET ??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@
	call	_printf
	add	esp, 8
; Line 306
	xor	edi, edi
	npad	5
$LL4@print_test:
; Line 307
	xor	esi, esi
$LL7@print_test:
; Line 308
	movzx	eax, BYTE PTR _ecb_data[edi+esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jb	SHORT $LL7@print_test
; Line 309
	push	OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
	call	_printf
	add	esp, 4
; Line 310
	xor	esi, esi
	npad	3
$LL10@print_test:
; Line 311
	movzx	eax, BYTE PTR _plain_data[edi+esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jb	SHORT $LL10@print_test
; Line 312
	push	OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
	call	_printf
	add	esp, 4
; Line 313
	xor	esi, esi
	npad	5
$LL13@print_test:
; Line 314
	movzx	eax, BYTE PTR _cipher_data[edi+esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jb	SHORT $LL13@print_test
; Line 315
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	edi, 8
	add	esp, 4
	cmp	edi, 272				; 00000110H
	jb	$LL4@print_test
; Line 318
	push	OFFSET ??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@
	call	_printf
; Line 319
	push	OFFSET ??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@
	call	_printf
	add	esp, 8
; Line 320
	xor	esi, esi
$LL16@print_test:
; Line 321
	movzx	eax, BYTE PTR _key_data[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jb	SHORT $LL16@print_test
; Line 322
	push	ebx
	push	ebp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	mov	edi, 1
	add	esp, 4
	mov	ebx, OFFSET _key_out
	lea	ebp, DWORD PTR [edi+23]
	npad	8
$LL19@print_test:
; Line 324
	push	OFFSET ??_C@_02CAMHBLCK@c?$DN?$AA@
	call	_printf
	add	esp, 4
; Line 325
	xor	esi, esi
	npad	1
$LL22@print_test:
; Line 326
	movzx	eax, BYTE PTR [ebx+esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jb	SHORT $LL22@print_test
; Line 327
	push	edi
	push	OFFSET ??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@
	call	_printf
	add	esp, 8
; Line 328
	xor	esi, esi
	test	edi, edi
	je	SHORT $LN24@print_test
	npad	4
$LL25@print_test:
; Line 329
	movzx	eax, BYTE PTR _key_test[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, edi
	jb	SHORT $LL25@print_test
$LN24@print_test:
; Line 330
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
	add	ebx, 8
	inc	edi
	sub	ebp, 1
	jne	SHORT $LL19@print_test
; Line 333
	push	OFFSET ??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@
	call	_printf
; Line 334
	push	OFFSET ??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@
	call	_printf
	add	esp, 8
; Line 335
	xor	esi, esi
	pop	ebp
	pop	ebx
	npad	5
$LL28@print_test:
; Line 336
	movzx	eax, BYTE PTR _cbc_key[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 16					; 00000010H
	jb	SHORT $LL28@print_test
; Line 337
	push	OFFSET ??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@
	call	_printf
	add	esp, 4
; Line 338
	xor	esi, esi
	npad	6
$LL31@print_test:
; Line 339
	movzx	eax, BYTE PTR _cbc_iv[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jb	SHORT $LL31@print_test
; Line 340
	mov	ecx, OFFSET _cbc_data
	lea	edx, DWORD PTR [ecx+1]
$LL101@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL101@print_test
	sub	ecx, edx
	push	OFFSET _cbc_data
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	push	OFFSET ??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@
	call	_printf
; Line 341
	mov	ecx, OFFSET _cbc_data
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL102@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL102@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	push	OFFSET ??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@
	call	_printf
; Line 342
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	xor	esi, esi
	lea	edx, DWORD PTR [ecx+1]
$LL103@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL103@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	test	eax, eax
	je	SHORT $LN33@print_test
	npad	12
$LL34@print_test:
; Line 343
	movsx	eax, BYTE PTR _cbc_data[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	inc	esi
	lea	edx, DWORD PTR [ecx+1]
	npad	2
$LL104@print_test:
; Line 342
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL104@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	cmp	esi, eax
	jb	SHORT $LL34@print_test
$LN33@print_test:
; Line 344
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 345
	push	OFFSET ??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@
	call	_printf
; Line 346
	push	32					; 00000020H
	push	OFFSET ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@
	call	_printf
	add	esp, 16					; 00000010H
; Line 347
	xor	esi, esi
	npad	11
$LL37@print_test:
; Line 348
	movzx	eax, BYTE PTR _cbc_ok[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL37@print_test
; Line 349
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 351
	push	OFFSET ??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@
	call	_printf
; Line 352
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL105@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL105@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	push	OFFSET ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@
	call	_printf
; Line 353
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	xor	esi, esi
	lea	edx, DWORD PTR [ecx+1]
$LL106@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL106@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	test	eax, eax
	je	SHORT $LN39@print_test
	npad	12
$LL40@print_test:
; Line 354
	movzx	eax, BYTE PTR _cfb64_ok[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	inc	esi
	lea	edx, DWORD PTR [ecx+1]
	npad	2
$LL107@print_test:
; Line 353
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL107@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	cmp	esi, eax
	jb	SHORT $LL40@print_test
$LN39@print_test:
; Line 355
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 357
	push	OFFSET ??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@
	call	_printf
; Line 358
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	lea	edx, DWORD PTR [ecx+1]
	npad	1
$LL108@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL108@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	push	OFFSET ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@
	call	_printf
; Line 359
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	xor	esi, esi
	lea	edx, DWORD PTR [ecx+1]
$LL109@print_test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL109@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	test	eax, eax
	je	SHORT $LN42@print_test
	npad	12
$LL43@print_test:
; Line 360
	movzx	eax, BYTE PTR _ofb64_ok[esi]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	call	_printf
	mov	ecx, OFFSET _cbc_data
	add	esp, 8
	inc	esi
	lea	edx, DWORD PTR [ecx+1]
	npad	2
$LL110@print_test:
; Line 359
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL110@print_test
	sub	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	cmp	esi, eax
	jb	SHORT $LL43@print_test
$LN42@print_test:
; Line 361
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4
; Line 362
	xor	eax, eax
	pop	edi
	pop	esi
; Line 363
	ret	0
_print_test_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _test
_TEXT	SEGMENT
_n$ = -4316						; size = 4
tv368 = -4312						; size = 4
tv335 = -4312						; size = 4
tv330 = -4312						; size = 4
tv324 = -4312						; size = 4
tv308 = -4312						; size = 4
_err$2$ = -4312						; size = 4
_data$ = -4308						; size = 8
_len$1$ = -4300						; size = 4
_key$ = -4296						; size = 4168
_iv$ = -128						; size = 8
_out$ = -120						; size = 8
_cbc_out$ = -112					; size = 40
_cbc_in$ = -64						; size = 40
__$ArrayPad$ = -4					; size = 4
_test	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bf\bftest.c
; Line 366
	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H
	mov	eax, 4328				; 000010e8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+4328], eax
	push	esi
	push	edi
; Line 378
	push	OFFSET ??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@
	xor	esi, esi
	call	_printf
	add	esp, 4
; Line 379
	xor	ecx, ecx
	mov	DWORD PTR _n$[esp+4336], ecx
	npad	11
$LL4@test:
; Line 383
	mov	edx, DWORD PTR _bf_key[ecx*4]
	mov	ecx, edx
	lea	edi, DWORD PTR [ecx+1]
	npad	4
$LL112@test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL112@test
	push	edx
	sub	ecx, edi
	lea	eax, DWORD PTR _key$[esp+4340]
	push	ecx
	push	eax
	call	_BF_set_key
; Line 385
	mov	ecx, DWORD PTR _n$[esp+4348]
	mov	eax, DWORD PTR _bf_plain[ecx*8]
	mov	DWORD PTR _data$[esp+4348], eax
; Line 386
	mov	eax, DWORD PTR _bf_plain[ecx*8+4]
	mov	DWORD PTR _data$[esp+4352], eax
; Line 387
	lea	eax, DWORD PTR _key$[esp+4348]
	push	eax
	lea	eax, DWORD PTR _data$[esp+4352]
	push	eax
	call	_BF_encrypt
; Line 388
	mov	ecx, DWORD PTR _n$[esp+4356]
	lea	edx, DWORD PTR _data$[esp+4356]
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _bf_cipher[ecx*8]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN113@test
	mov	eax, DWORD PTR _bf_cipher[ecx*8+4]
	cmp	eax, DWORD PTR [edx+4]
	je	$LN44@test
$LN113@test:
; Line 389
	push	OFFSET ??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@
	call	_printf
; Line 390
	push	OFFSET ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
	call	_printf
	add	esp, 8
; Line 391
	xor	esi, esi
	npad	3
$LL7@test:
; Line 392
	push	DWORD PTR _data$[esp+esi*4+4336]
	push	OFFSET ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 2
	jl	SHORT $LL7@test
; Line 393
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 394
	push	OFFSET ??_C@_09PBKDEKON@expected?3?$AA@
	call	_printf
	add	esp, 8
; Line 395
	xor	esi, esi
$LL10@test:
; Line 396
	mov	eax, DWORD PTR _n$[esp+4336]
	lea	eax, DWORD PTR [esi+eax*2]
	push	DWORD PTR _bf_cipher[eax*4]
	push	OFFSET ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 2
	jl	SHORT $LL10@test
; Line 398
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	esi, 1
	call	_printf
	add	esp, 4
$LN44@test:
; Line 401
	lea	eax, DWORD PTR _key$[esp+4336]
	push	eax
	lea	eax, DWORD PTR _data$[esp+4340]
	push	eax
	call	_BF_decrypt
; Line 402
	mov	ecx, DWORD PTR _n$[esp+4344]
	lea	edx, DWORD PTR _data$[esp+4344]
	add	esp, 8
	mov	eax, DWORD PTR _bf_plain[ecx*8]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN114@test
	mov	eax, DWORD PTR _bf_plain[ecx*8+4]
	cmp	eax, DWORD PTR [edx+4]
	je	$LN2@test
$LN114@test:
; Line 403
	push	OFFSET ??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@
	call	_printf
; Line 404
	push	OFFSET ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
	call	_printf
	add	esp, 8
; Line 405
	xor	esi, esi
$LL13@test:
; Line 406
	push	DWORD PTR _data$[esp+esi*4+4336]
	push	OFFSET ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 2
	jl	SHORT $LL13@test
; Line 407
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 408
	push	OFFSET ??_C@_09PBKDEKON@expected?3?$AA@
	call	_printf
	add	esp, 8
; Line 409
	xor	esi, esi
$LL16@test:
; Line 410
	mov	eax, DWORD PTR _n$[esp+4336]
	lea	eax, DWORD PTR [esi+eax*2]
	push	DWORD PTR _bf_plain[eax*4]
	push	OFFSET ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 2
	jl	SHORT $LL16@test
; Line 411
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 412
	mov	ecx, DWORD PTR _n$[esp+4340]
	add	esp, 4
	mov	esi, 1
$LN2@test:
; Line 379
	inc	ecx
	mov	DWORD PTR _n$[esp+4336], ecx
	cmp	ecx, 2
	jl	$LL4@test
; Line 416
	push	OFFSET ??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@
	call	_printf
	add	esp, 4
; Line 418
	xor	ecx, ecx
	mov	DWORD PTR _n$[esp+4336], ecx
	npad	7
$LL19@test:
; Line 419
	lea	eax, DWORD PTR _ecb_data[ecx*8]
	push	eax
	lea	eax, DWORD PTR _key$[esp+4340]
	push	8
	push	eax
	call	_BF_set_key
; Line 421
	push	1
	lea	eax, DWORD PTR _key$[esp+4352]
	push	eax
	lea	eax, DWORD PTR _out$[esp+4356]
	push	eax
	mov	eax, DWORD PTR _n$[esp+4360]
	lea	eax, DWORD PTR _plain_data[eax*8]
	push	eax
	call	_BF_ecb_encrypt
; Line 422
	mov	ecx, DWORD PTR _n$[esp+4364]
	lea	edx, DWORD PTR _out$[esp+4364]
	add	esp, 28					; 0000001cH
	mov	eax, DWORD PTR _cipher_data[ecx*8]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN115@test
	mov	eax, DWORD PTR _cipher_data[ecx*8+4]
	cmp	eax, DWORD PTR [edx+4]
	je	$LN46@test
$LN115@test:
; Line 423
	push	OFFSET ??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@
	call	_printf
; Line 424
	push	OFFSET ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
	call	_printf
	add	esp, 8
; Line 425
	xor	esi, esi
	npad	10
$LL22@test:
; Line 426
	movzx	eax, BYTE PTR _out$[esp+esi+4336]
	push	eax
	push	OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jl	SHORT $LL22@test
; Line 427
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 428
	push	OFFSET ??_C@_09PBKDEKON@expected?3?$AA@
	call	_printf
	add	esp, 8
; Line 429
	xor	esi, esi
	npad	11
$LL25@test:
; Line 430
	mov	eax, DWORD PTR _n$[esp+4336]
	movzx	eax, BYTE PTR _cipher_data[esi+eax*8]
	push	eax
	push	OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jl	SHORT $LL25@test
; Line 432
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	esi, 1
	call	_printf
	add	esp, 4
$LN46@test:
; Line 435
	push	0
	lea	eax, DWORD PTR _key$[esp+4340]
	push	eax
	lea	eax, DWORD PTR _out$[esp+4344]
	push	eax
	push	eax
	call	_BF_ecb_encrypt
; Line 436
	mov	ecx, DWORD PTR _n$[esp+4352]
	lea	edx, DWORD PTR _out$[esp+4352]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _plain_data[ecx*8]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN116@test
	mov	eax, DWORD PTR _plain_data[ecx*8+4]
	cmp	eax, DWORD PTR [edx+4]
	je	$LN17@test
$LN116@test:
; Line 437
	push	OFFSET ??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@
	call	_printf
; Line 438
	push	OFFSET ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
	call	_printf
	add	esp, 8
; Line 439
	xor	esi, esi
	npad	7
$LL28@test:
; Line 440
	movzx	eax, BYTE PTR _out$[esp+esi+4336]
	push	eax
	push	OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jl	SHORT $LL28@test
; Line 441
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 442
	push	OFFSET ??_C@_09PBKDEKON@expected?3?$AA@
	call	_printf
	add	esp, 8
; Line 443
	xor	esi, esi
	npad	11
$LL31@test:
; Line 444
	mov	eax, DWORD PTR _n$[esp+4336]
	movzx	eax, BYTE PTR _plain_data[esi+eax*8]
	push	eax
	push	OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, 8
	jl	SHORT $LL31@test
; Line 445
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
; Line 446
	mov	ecx, DWORD PTR _n$[esp+4340]
	add	esp, 4
	mov	esi, 1
$LN17@test:
; Line 418
	inc	ecx
	mov	DWORD PTR _n$[esp+4336], ecx
	cmp	ecx, 34					; 00000022H
	jl	$LL19@test
; Line 450
	push	OFFSET ??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@
	call	_printf
; Line 451
	mov	ecx, 1
	add	esp, 4
	mov	DWORD PTR _n$[esp+4336], ecx
	npad	6
$LL34@test:
; Line 452
	push	OFFSET _key_test
	push	ecx
	lea	eax, DWORD PTR _key$[esp+4344]
	push	eax
	call	_BF_set_key
; Line 453
	push	1
	lea	eax, DWORD PTR _key$[esp+4352]
	push	eax
	lea	eax, DWORD PTR _out$[esp+4356]
	push	eax
	push	OFFSET _key_data
	call	_BF_ecb_encrypt
; Line 455
	mov	ecx, DWORD PTR _n$[esp+4364]
	lea	edx, DWORD PTR _out$[esp+4364]
	mov	eax, DWORD PTR [edx]
	add	esp, 28					; 0000001cH
	cmp	eax, DWORD PTR _key_out[ecx*8-8]
	jne	SHORT $LN117@test
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _key_out[ecx*8-4]
	je	SHORT $LN32@test
$LN117@test:
; Line 456
	push	OFFSET ??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@
	call	_printf
; Line 457
	mov	ecx, DWORD PTR _n$[esp+4340]
	add	esp, 4
	mov	esi, 1
$LN32@test:
; Line 451
	inc	ecx
	mov	DWORD PTR _n$[esp+4336], ecx
	cmp	ecx, 25					; 00000019H
	jl	SHORT $LL34@test
; Line 461
	push	OFFSET ??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@
	call	_printf
; Line 462
	mov	edi, OFFSET _cbc_data
	add	esp, 4
	lea	ecx, DWORD PTR [edi+1]
$LL118@test:
	mov	al, BYTE PTR [edi]
	inc	edi
	test	al, al
	jne	SHORT $LL118@test
; Line 464
	push	OFFSET _cbc_key
	sub	edi, ecx
	lea	eax, DWORD PTR _key$[esp+4340]
	push	16					; 00000010H
	inc	edi
	push	eax
	mov	DWORD PTR _len$1$[esp+4348], edi
	call	_BF_set_key
; Line 467
	mov	eax, DWORD PTR _cbc_iv
	xorps	xmm0, xmm0
	mov	DWORD PTR _iv$[esp+4348], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv$[esp+4352], eax
; Line 468
	lea	eax, DWORD PTR _iv$[esp+4348]
	push	1
	push	eax
	lea	eax, DWORD PTR _key$[esp+4356]
	movaps	XMMWORD PTR _cbc_in$[esp+4356], xmm0
	push	eax
	push	edi
	lea	eax, DWORD PTR _cbc_out$[esp+4364]
	movaps	XMMWORD PTR _cbc_in$[esp+4380], xmm0
	push	eax
	push	OFFSET _cbc_data
	movq	QWORD PTR _cbc_in$[esp+4404], xmm0
	movaps	XMMWORD PTR _cbc_out$[esp+4372], xmm0
	movaps	XMMWORD PTR _cbc_out$[esp+4388], xmm0
	movq	QWORD PTR _cbc_out$[esp+4404], xmm0
	call	_BF_cbc_encrypt
	add	esp, 36					; 00000024H
; Line 470
	mov	DWORD PTR tv308[esp+4336], 28		; 0000001cH
	lea	ecx, DWORD PTR _cbc_out$[esp+4336]
	mov	edx, OFFSET _cbc_ok
$LL121@test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN120@test
	add	ecx, 4
	add	edx, 4
	sub	DWORD PTR tv308[esp+4336], 4
	jae	SHORT $LL121@test
	jmp	SHORT $LN36@test
$LN120@test:
; Line 472
	push	OFFSET ??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@
	mov	esi, 1
	call	_printf
	add	esp, 4
; Line 473
	xor	edi, edi
$LL37@test:
; Line 474
	movzx	eax, BYTE PTR _cbc_out$[esp+edi+4336]
	push	eax
	push	OFFSET ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@
	call	_printf
	inc	edi
	add	esp, 8
	cmp	edi, 32					; 00000020H
	jl	SHORT $LL37@test
	mov	edi, DWORD PTR _len$1$[esp+4336]
$LN36@test:
; Line 476
	mov	eax, DWORD PTR _cbc_iv
	mov	DWORD PTR _iv$[esp+4336], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv$[esp+4340], eax
; Line 477
	lea	eax, DWORD PTR _iv$[esp+4336]
	push	0
	push	eax
	lea	eax, DWORD PTR _key$[esp+4344]
	push	eax
	push	edi
	lea	eax, DWORD PTR _cbc_in$[esp+4352]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4356]
	push	eax
	call	_BF_cbc_encrypt
; Line 478
	mov	ecx, OFFSET _cbc_data
	add	esp, 24					; 00000018H
	lea	edx, DWORD PTR [ecx+1]
	npad	7
$LL122@test:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL122@test
	sub	ecx, edx
	mov	edx, OFFSET _cbc_data
	lea	eax, DWORD PTR [ecx+1]
	sub	eax, 4
	lea	ecx, DWORD PTR _cbc_in$[esp+4336]
	mov	DWORD PTR tv324[esp+4336], eax
	jb	SHORT $LN125@test
$LL126@test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN124@test
	mov	eax, DWORD PTR tv324[esp+4336]
	add	ecx, 4
	add	edx, 4
	sub	eax, 4
	mov	DWORD PTR tv324[esp+4336], eax
	jae	SHORT $LL126@test
$LN125@test:
	cmp	eax, -4					; fffffffcH
	je	SHORT $LN123@test
$LN124@test:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN127@test
	cmp	DWORD PTR tv324[esp+4336], -3		; fffffffdH
	je	SHORT $LN123@test
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN127@test
	cmp	DWORD PTR tv324[esp+4336], -2		; fffffffeH
	je	SHORT $LN123@test
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN127@test
	cmp	DWORD PTR tv324[esp+4336], -1
	je	SHORT $LN123@test
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN123@test
$LN127@test:
; Line 479
	push	OFFSET ??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 480
	mov	esi, 1
$LN123@test:
; Line 483
	push	OFFSET ??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@
	call	_printf
; Line 485
	push	OFFSET _cbc_key
	lea	eax, DWORD PTR _key$[esp+4344]
	push	16					; 00000010H
	push	eax
	call	_BF_set_key
; Line 488
	mov	eax, DWORD PTR _cbc_iv
	xorps	xmm0, xmm0
	mov	DWORD PTR _iv$[esp+4352], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv$[esp+4356], eax
; Line 490
	lea	eax, DWORD PTR _n$[esp+4352]
	push	1
	push	eax
	lea	eax, DWORD PTR _iv$[esp+4360]
	movaps	XMMWORD PTR _cbc_in$[esp+4360], xmm0
	push	eax
	lea	eax, DWORD PTR _key$[esp+4364]
	movaps	XMMWORD PTR _cbc_in$[esp+4380], xmm0
	push	eax
	push	13					; 0000000dH
	lea	eax, DWORD PTR _cbc_out$[esp+4372]
	movq	QWORD PTR _cbc_in$[esp+4404], xmm0
	push	eax
	push	OFFSET _cbc_data
	movaps	XMMWORD PTR _cbc_out$[esp+4380], xmm0
	movaps	XMMWORD PTR _cbc_out$[esp+4396], xmm0
	movq	QWORD PTR _cbc_out$[esp+4412], xmm0
	mov	DWORD PTR _n$[esp+4380], 0
	call	_BF_cfb64_encrypt
; Line 492
	push	1
	lea	ecx, DWORD PTR _n$[esp+4384]
	push	ecx
	lea	ecx, DWORD PTR _iv$[esp+4388]
	push	ecx
	lea	ecx, DWORD PTR _key$[esp+4392]
	push	ecx
	lea	eax, DWORD PTR [edi-13]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4413]
	push	eax
	push	OFFSET _cbc_data+13
	call	_BF_cfb64_encrypt
; Line 494
	mov	eax, edi
	lea	ecx, DWORD PTR _cbc_out$[esp+4408]
	add	esp, 72					; 00000048H
	mov	edx, OFFSET _cfb64_ok
	sub	eax, 4
	mov	DWORD PTR tv330[esp+4336], eax
	jb	SHORT $LN130@test
$LL131@test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN129@test
	mov	eax, DWORD PTR tv330[esp+4336]
	add	ecx, 4
	add	edx, 4
	sub	eax, 4
	mov	DWORD PTR tv330[esp+4336], eax
	jae	SHORT $LL131@test
$LN130@test:
	cmp	eax, -4					; fffffffcH
	je	SHORT $LN128@test
$LN129@test:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN132@test
	cmp	DWORD PTR tv330[esp+4336], -3		; fffffffdH
	je	SHORT $LN128@test
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN132@test
	cmp	DWORD PTR tv330[esp+4336], -2		; fffffffeH
	je	SHORT $LN128@test
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN132@test
	cmp	DWORD PTR tv330[esp+4336], -1
	je	SHORT $LN128@test
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN128@test
$LN132@test:
; Line 495
	mov	esi, 1
; Line 496
	push	OFFSET ??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@
	mov	DWORD PTR _err$2$[esp+4340], esi
	call	_printf
	add	esp, 4
; Line 497
	test	edi, edi
	jle	SHORT $LN128@test
	xor	esi, esi
	npad	3
$LL40@test:
; Line 498
	movzx	eax, BYTE PTR _cbc_out$[esp+esi+4336]
	push	eax
	push	OFFSET ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, edi
	jl	SHORT $LL40@test
	mov	esi, DWORD PTR _err$2$[esp+4336]
$LN128@test:
; Line 501
	mov	eax, DWORD PTR _cbc_iv
	mov	DWORD PTR _iv$[esp+4336], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv$[esp+4340], eax
; Line 502
	lea	eax, DWORD PTR _n$[esp+4336]
	push	0
	push	eax
	lea	eax, DWORD PTR _iv$[esp+4344]
	mov	DWORD PTR _n$[esp+4344], 0
	push	eax
	lea	eax, DWORD PTR _key$[esp+4348]
	push	eax
	push	17					; 00000011H
	lea	eax, DWORD PTR _cbc_in$[esp+4356]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4360]
	push	eax
	call	_BF_cfb64_encrypt
; Line 503
	push	0
	lea	ecx, DWORD PTR _n$[esp+4368]
	push	ecx
	lea	ecx, DWORD PTR _iv$[esp+4372]
	push	ecx
	lea	ecx, DWORD PTR _key$[esp+4376]
	push	ecx
	lea	eax, DWORD PTR [edi-17]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+4401]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4405]
	push	eax
	call	_BF_cfb64_encrypt
; Line 505
	mov	eax, edi
	lea	ecx, DWORD PTR _cbc_in$[esp+4392]
	add	esp, 56					; 00000038H
	mov	edx, OFFSET _cbc_data
	sub	eax, 4
	mov	DWORD PTR tv335[esp+4336], eax
	jb	SHORT $LN135@test
$LL136@test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN134@test
	mov	eax, DWORD PTR tv335[esp+4336]
	add	ecx, 4
	add	edx, 4
	sub	eax, 4
	mov	DWORD PTR tv335[esp+4336], eax
	jae	SHORT $LL136@test
$LN135@test:
	cmp	eax, -4					; fffffffcH
	je	SHORT $LN133@test
$LN134@test:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN137@test
	cmp	DWORD PTR tv335[esp+4336], -3		; fffffffdH
	je	SHORT $LN133@test
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN137@test
	cmp	DWORD PTR tv335[esp+4336], -2		; fffffffeH
	je	SHORT $LN133@test
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN137@test
	cmp	DWORD PTR tv335[esp+4336], -1
	je	SHORT $LN133@test
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN133@test
$LN137@test:
	sbb	eax, eax
	or	eax, 1
	jmp	SHORT $LN138@test
$LN133@test:
	xor	eax, eax
$LN138@test:
	test	eax, eax
	je	SHORT $LN52@test
; Line 506
	push	OFFSET ??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 507
	mov	esi, 1
$LN52@test:
; Line 510
	push	OFFSET ??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@
	call	_printf
; Line 512
	push	OFFSET _cbc_key
	lea	eax, DWORD PTR _key$[esp+4344]
	push	16					; 00000010H
	push	eax
	call	_BF_set_key
; Line 515
	mov	eax, DWORD PTR _cbc_iv
	xorps	xmm0, xmm0
	mov	DWORD PTR _iv$[esp+4352], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv$[esp+4356], eax
; Line 517
	lea	eax, DWORD PTR _n$[esp+4352]
	push	eax
	lea	eax, DWORD PTR _iv$[esp+4356]
	movaps	XMMWORD PTR _cbc_in$[esp+4356], xmm0
	push	eax
	lea	eax, DWORD PTR _key$[esp+4360]
	movaps	XMMWORD PTR _cbc_in$[esp+4376], xmm0
	push	eax
	push	13					; 0000000dH
	lea	eax, DWORD PTR _cbc_out$[esp+4368]
	movq	QWORD PTR _cbc_in$[esp+4400], xmm0
	push	eax
	push	OFFSET _cbc_data
	movaps	XMMWORD PTR _cbc_out$[esp+4376], xmm0
	movaps	XMMWORD PTR _cbc_out$[esp+4392], xmm0
	movq	QWORD PTR _cbc_out$[esp+4408], xmm0
	mov	DWORD PTR _n$[esp+4376], 0
	call	_BF_ofb64_encrypt
; Line 519
	lea	eax, DWORD PTR _n$[esp+4376]
	push	eax
	lea	eax, DWORD PTR _iv$[esp+4380]
	push	eax
	lea	eax, DWORD PTR _key$[esp+4384]
	push	eax
	lea	eax, DWORD PTR [edi-13]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4405]
	push	eax
	push	OFFSET _cbc_data+13
	call	_BF_ofb64_encrypt
; Line 521
	mov	eax, edi
	lea	ecx, DWORD PTR _cbc_out$[esp+4400]
	add	esp, 64					; 00000040H
	mov	edx, OFFSET _ofb64_ok
	sub	eax, 4
	mov	DWORD PTR tv368[esp+4336], eax
	jb	SHORT $LN141@test
	npad	7
$LL142@test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN140@test
	mov	eax, DWORD PTR tv368[esp+4336]
	add	ecx, 4
	add	edx, 4
	sub	eax, 4
	mov	DWORD PTR tv368[esp+4336], eax
	jae	SHORT $LL142@test
$LN141@test:
	cmp	eax, -4					; fffffffcH
	je	SHORT $LN139@test
$LN140@test:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN143@test
	cmp	DWORD PTR tv368[esp+4336], -3		; fffffffdH
	je	SHORT $LN139@test
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN143@test
	cmp	DWORD PTR tv368[esp+4336], -2		; fffffffeH
	je	SHORT $LN139@test
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN143@test
	cmp	DWORD PTR tv368[esp+4336], -1
	je	SHORT $LN139@test
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	je	SHORT $LN139@test
$LN143@test:
; Line 522
	mov	esi, 1
; Line 523
	push	OFFSET ??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@
	mov	DWORD PTR _err$2$[esp+4340], esi
	call	_printf
	add	esp, 4
; Line 524
	test	edi, edi
	jle	SHORT $LN139@test
	xor	esi, esi
	npad	3
$LL43@test:
; Line 525
	movzx	eax, BYTE PTR _cbc_out$[esp+esi+4336]
	push	eax
	push	OFFSET ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@
	call	_printf
	inc	esi
	add	esp, 8
	cmp	esi, edi
	jl	SHORT $LL43@test
	mov	esi, DWORD PTR _err$2$[esp+4336]
$LN139@test:
; Line 528
	mov	eax, DWORD PTR _cbc_iv
	mov	DWORD PTR _iv$[esp+4336], eax
	mov	eax, DWORD PTR _cbc_iv+4
	mov	DWORD PTR _iv$[esp+4340], eax
; Line 529
	lea	eax, DWORD PTR _n$[esp+4336]
	push	eax
	lea	eax, DWORD PTR _iv$[esp+4340]
	mov	DWORD PTR _n$[esp+4340], 0
	push	eax
	lea	eax, DWORD PTR _key$[esp+4344]
	push	eax
	push	17					; 00000011H
	lea	eax, DWORD PTR _cbc_in$[esp+4352]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4356]
	push	eax
	call	_BF_ofb64_encrypt
; Line 530
	lea	eax, DWORD PTR _n$[esp+4360]
	push	eax
	lea	eax, DWORD PTR _iv$[esp+4364]
	push	eax
	lea	eax, DWORD PTR _key$[esp+4368]
	push	eax
	lea	eax, DWORD PTR [edi-17]
	push	eax
	lea	eax, DWORD PTR _cbc_in$[esp+4393]
	push	eax
	lea	eax, DWORD PTR _cbc_out$[esp+4397]
	push	eax
	call	_BF_ofb64_encrypt
	add	esp, 48					; 00000030H
; Line 531
	lea	ecx, DWORD PTR _cbc_in$[esp+4336]
	mov	edx, OFFSET _cbc_data
	sub	edi, 4
	jb	SHORT $LN146@test
$LL147@test:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN145@test
	add	ecx, 4
	add	edx, 4
	sub	edi, 4
	jae	SHORT $LL147@test
$LN146@test:
	cmp	edi, -4					; fffffffcH
	je	SHORT $LN152@test
$LN145@test:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN148@test
	cmp	edi, -3					; fffffffdH
	je	SHORT $LN152@test
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN148@test
	cmp	edi, -2					; fffffffeH
	je	SHORT $LN152@test
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN148@test
	cmp	edi, -1
	je	SHORT $LN152@test
	mov	cl, BYTE PTR [ecx+3]
	cmp	cl, BYTE PTR [edx+3]
	je	SHORT $LN152@test
$LN148@test:
; Line 532
	push	OFFSET ??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@
	call	_printf
	add	esp, 4
; Line 536
	mov	eax, 1
; Line 537
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+4328]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN152@test:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+4336]
	mov	eax, esi
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_test	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 950
	push	esi
; Line 954
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
; Line 639
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	pop	esi
; Line 957
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
