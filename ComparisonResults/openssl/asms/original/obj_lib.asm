; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\objects\obj_lib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_OBJ_dup
PUBLIC	_OBJ_cmp
PUBLIC	??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ASN1_OBJECT_new:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
CONST	SEGMENT
??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@ DB '.\crypto\obje'
	DB	'cts\obj_lib.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _OBJ_cmp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_OBJ_cmp PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\objects\obj_lib.c
; Line 131
	mov	edx, DWORD PTR _a$[esp-4]
	push	esi
	mov	esi, DWORD PTR _b$[esp]
	mov	ecx, DWORD PTR [edx+12]
	mov	eax, ecx
	sub	eax, DWORD PTR [esi+12]
; Line 132
	jne	SHORT $LN1@OBJ_cmp
; Line 134
	mov	edx, DWORD PTR [edx+16]
	mov	esi, DWORD PTR [esi+16]
	sub	ecx, 4
	jb	SHORT $LN6@OBJ_cmp
	npad	2
$LL7@OBJ_cmp:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN5@OBJ_cmp
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL7@OBJ_cmp
$LN6@OBJ_cmp:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN4@OBJ_cmp
$LN5@OBJ_cmp:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN8@OBJ_cmp
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN4@OBJ_cmp
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN8@OBJ_cmp
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN4@OBJ_cmp
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN8@OBJ_cmp
	cmp	ecx, -1
	je	SHORT $LN4@OBJ_cmp
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	je	SHORT $LN4@OBJ_cmp
$LN8@OBJ_cmp:
	sbb	eax, eax
	or	eax, 1
	pop	esi
; Line 135
	ret	0
$LN4@OBJ_cmp:
; Line 134
	xor	eax, eax
$LN1@OBJ_cmp:
	pop	esi
; Line 135
	ret	0
_OBJ_cmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _OBJ_dup
_TEXT	SEGMENT
_i$2$ = -4						; size = 4
_i$1$ = -4						; size = 4
_data$1$ = 8						; size = 4
_o$ = 8							; size = 4
_OBJ_dup PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\objects\obj_lib.c
; Line 66
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 72
	mov	esi, DWORD PTR _o$[esp+12]
	xor	ebp, ebp
	xor	ebx, ebx
	test	esi, esi
	jne	SHORT $LN2@OBJ_dup
; Line 73
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 125
	pop	ecx
	ret	0
$LN2@OBJ_dup:
; Line 74
	test	BYTE PTR [esi+20], 1
	jne	SHORT $LN3@OBJ_dup
; Line 75
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 125
	pop	ecx
	ret	0
$LN3@OBJ_dup:
	push	edi
; Line 78
	call	_ASN1_OBJECT_new
	mov	edi, eax
; Line 79
	test	edi, edi
	jne	SHORT $LN4@OBJ_dup
; Line 80
	push	80					; 00000050H
	push	OFFSET ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
	push	13					; 0000000dH
	push	101					; 00000065H
	push	8
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 124
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 125
	pop	ecx
	ret	0
$LN4@OBJ_dup:
; Line 83
	push	83					; 00000053H
	push	OFFSET ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
	push	DWORD PTR [esi+12]
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _data$1$[esp+16], eax
; Line 84
	test	eax, eax
	je	$err$21
; Line 86
	mov	ecx, DWORD PTR [esi+16]
	test	ecx, ecx
	je	SHORT $LN6@OBJ_dup
; Line 87
	push	DWORD PTR [esi+12]
	push	ecx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR _data$1$[esp+28]
	add	esp, 12					; 0000000cH
$LN6@OBJ_dup:
; Line 89
	mov	DWORD PTR [edi+16], eax
; Line 90
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; Line 91
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; Line 92
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebx
; Line 93
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN7@OBJ_dup
; Line 94
	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL16@OBJ_dup:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL16@OBJ_dup
	sub	ecx, edx
; Line 95
	push	95					; 0000005fH
	push	OFFSET ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	mov	DWORD PTR _i$1$[esp+32], eax
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 96
	test	ebp, ebp
	je	SHORT $err$21
; Line 98
	push	DWORD PTR _i$1$[esp+20]
	push	DWORD PTR [esi+4]
	push	ebp
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 99
	mov	DWORD PTR [edi+4], ebp
$LN7@OBJ_dup:
; Line 102
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN9@OBJ_dup
; Line 103
	lea	edx, DWORD PTR [ecx+1]
$LL17@OBJ_dup:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL17@OBJ_dup
	sub	ecx, edx
; Line 104
	push	104					; 00000068H
	push	OFFSET ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
	lea	eax, DWORD PTR [ecx+1]
	push	eax
	mov	DWORD PTR _i$2$[esp+32], eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 105
	test	ebx, ebx
	je	SHORT $err$21
; Line 107
	push	DWORD PTR _i$2$[esp+20]
	push	DWORD PTR [esi]
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 108
	mov	DWORD PTR [edi], ebx
$LN9@OBJ_dup:
; Line 110
	mov	eax, DWORD PTR [esi+20]
	or	eax, 13					; 0000000dH
	mov	DWORD PTR [edi+20], eax
; Line 113
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 125
	pop	ecx
	ret	0
$err$21:
; Line 115
	push	115					; 00000073H
	push	OFFSET ??_C@_0BL@LGPLHJJB@?4?2crypto?2objects?2obj_lib?4c?$AA@
	push	65					; 00000041H
	push	101					; 00000065H
	push	8
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 116
	test	ebp, ebp
	je	SHORT $LN11@OBJ_dup
; Line 117
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
$LN11@OBJ_dup:
; Line 118
	test	ebx, ebx
	je	SHORT $LN12@OBJ_dup
; Line 119
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN12@OBJ_dup:
; Line 120
	mov	eax, DWORD PTR _data$1$[esp+16]
	test	eax, eax
	je	SHORT $LN13@OBJ_dup
; Line 121
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN13@OBJ_dup:
; Line 123
	push	edi
	call	_CRYPTO_free
	add	esp, 4
; Line 124
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 125
	pop	ecx
	ret	0
_OBJ_dup ENDP
_TEXT	ENDS
END
