; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_TXT_DB_version
CONST	SEGMENT
_TXT_DB_version DB 'TXT_DB part of OpenSSL 1.0.2h  3 May 2016', 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_TXT_DB_read
PUBLIC	_TXT_DB_write
PUBLIC	_TXT_DB_create_index
PUBLIC	_TXT_DB_free
PUBLIC	_TXT_DB_get_by_index
PUBLIC	_TXT_DB_insert
PUBLIC	??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ ; `string'
PUBLIC	??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@ ; `string'
PUBLIC	??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@	; `string'
PUBLIC	??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_free:PROC
EXTRN	_sk_find:PROC
EXTRN	_sk_push:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BUF_MEM_new:PROC
EXTRN	_BUF_MEM_free:PROC
EXTRN	_BUF_MEM_grow:PROC
EXTRN	_BUF_MEM_grow_clean:PROC
EXTRN	_BIO_gets:PROC
EXTRN	_BIO_write:PROC
EXTRN	_lh_new:PROC
EXTRN	_lh_free:PROC
EXTRN	_lh_insert:PROC
EXTRN	_lh_retrieve:PROC
EXTRN	__chkstk:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@
CONST	SEGMENT
??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@ DB 'OPENSSL_malloc fail'
	DB	'ure', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@
CONST	SEGMENT
??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@ DB 'failure in sk_push', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@
CONST	SEGMENT
??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@ DB 'wrong n'
	DB	'umber of fields on line %ld (looking for field %d, got %d, '''
	DB	'%s'' left)', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ DB '.\crypto\txt_db'
	DB	'\txt_db.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _TXT_DB_insert
_TEXT	SEGMENT
_db$ = 8						; size = 4
_row$ = 12						; size = 4
_TXT_DB_insert PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
; Line 306
	push	ebx
; Line 310
	mov	ebx, DWORD PTR _row$[esp]
	push	esi
	mov	esi, DWORD PTR _db$[esp+4]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [esi], edi
	jle	SHORT $LN24@TXT_DB_ins
$LL4@TXT_DB_ins:
; Line 311
	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax+edi*4], 0
	je	SHORT $LN2@TXT_DB_ins
; Line 312
	mov	eax, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [eax+edi*4]
	test	eax, eax
	je	SHORT $LN9@TXT_DB_ins
	push	ebx
	call	eax
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@TXT_DB_ins
$LN9@TXT_DB_ins:
; Line 314
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	push	DWORD PTR [eax+edi*4]
	call	_lh_retrieve
	add	esp, 8
; Line 315
	test	eax, eax
	jne	SHORT $LN17@TXT_DB_ins
$LN2@TXT_DB_ins:
; Line 310
	inc	edi
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL4@TXT_DB_ins
$LN24@TXT_DB_ins:
; Line 324
	push	ebx
	push	DWORD PTR [esi+4]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@TXT_DB_ins
; Line 325
	mov	DWORD PTR [esi+16], 1
$err$26:
	pop	edi
	pop	esi
	pop	ebx
; Line 339
	ret	0
$LN17@TXT_DB_ins:
; Line 317
	mov	DWORD PTR [esi+20], edi
	pop	edi
; Line 318
	mov	DWORD PTR [esi+28], eax
; Line 338
	xor	eax, eax
	mov	DWORD PTR [esi+16], 2
	pop	esi
	pop	ebx
; Line 339
	ret	0
$LN11@TXT_DB_ins:
; Line 329
	xor	edi, edi
	cmp	DWORD PTR [esi], edi
	jle	SHORT $LN6@TXT_DB_ins
	npad	6
$LL7@TXT_DB_ins:
; Line 330
	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax+edi*4], 0
	je	SHORT $LN5@TXT_DB_ins
; Line 331
	mov	eax, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [eax+edi*4]
	test	eax, eax
	je	SHORT $LN13@TXT_DB_ins
	push	ebx
	call	eax
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@TXT_DB_ins
$LN13@TXT_DB_ins:
; Line 333
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	push	DWORD PTR [eax+edi*4]
	call	_lh_insert
	add	esp, 8
$LN5@TXT_DB_ins:
; Line 329
	inc	edi
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL7@TXT_DB_ins
$LN6@TXT_DB_ins:
	pop	edi
	pop	esi
; Line 336
	mov	eax, 1
	pop	ebx
; Line 339
	ret	0
_TXT_DB_insert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _TXT_DB_get_by_index
_TEXT	SEGMENT
_db$ = 8						; size = 4
_idx$ = 12						; size = 4
_value$ = 16						; size = 4
_TXT_DB_get_by_index PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
; Line 207
	mov	ecx, DWORD PTR _idx$[esp-4]
	push	esi
	mov	esi, DWORD PTR _db$[esp]
	cmp	ecx, DWORD PTR [esi]
	jl	SHORT $LN2@TXT_DB_get
; Line 208
	mov	DWORD PTR [esi+16], 3
; Line 209
	xor	eax, eax
	pop	esi
; Line 219
	ret	0
$LN2@TXT_DB_get:
; Line 211
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 212
	test	eax, eax
	jne	SHORT $LN3@TXT_DB_get
; Line 213
	mov	DWORD PTR [esi+16], 4
	pop	esi
; Line 219
	ret	0
$LN3@TXT_DB_get:
; Line 216
	push	DWORD PTR _value$[esp]
	push	eax
	call	_lh_retrieve
	add	esp, 8
; Line 217
	mov	DWORD PTR [esi+16], 0
	pop	esi
; Line 219
	ret	0
_TXT_DB_get_by_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _TXT_DB_free
_TEXT	SEGMENT
_i$2$ = 8						; size = 4
_db$ = 8						; size = 4
_TXT_DB_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
; Line 342
	push	edi
; Line 346
	mov	edi, DWORD PTR _db$[esp]
	test	edi, edi
	je	$LN1@TXT_DB_fre
; Line 349
	cmp	DWORD PTR [edi+8], 0
	push	esi
	je	SHORT $LN15@TXT_DB_fre
; Line 350
	mov	esi, DWORD PTR [edi]
	sub	esi, 1
	js	SHORT $LN3@TXT_DB_fre
	npad	5
$LL4@TXT_DB_fre:
; Line 351
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+esi*4]
	test	eax, eax
	je	SHORT $LN2@TXT_DB_fre
; Line 352
	push	eax
	call	_lh_free
	add	esp, 4
$LN2@TXT_DB_fre:
; Line 350
	sub	esi, 1
	jns	SHORT $LL4@TXT_DB_fre
$LN3@TXT_DB_fre:
; Line 353
	push	DWORD PTR [edi+8]
	call	_CRYPTO_free
	add	esp, 4
$LN15@TXT_DB_fre:
; Line 355
	mov	eax, DWORD PTR [edi+12]
	test	eax, eax
	je	SHORT $LN17@TXT_DB_fre
; Line 356
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN17@TXT_DB_fre:
; Line 357
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	$LN18@TXT_DB_fre
; Line 358
	push	ebx
	push	eax
	call	_sk_num
	mov	ebx, eax
	add	esp, 4
	sub	ebx, 1
	mov	DWORD PTR _i$2$[esp+8], ebx
	js	SHORT $LN6@TXT_DB_fre
	push	ebp
$LL7@TXT_DB_fre:
; Line 363
	push	ebx
	push	DWORD PTR [edi+4]
	call	_sk_value
	mov	ebx, eax
	add	esp, 8
; Line 364
	mov	eax, DWORD PTR [edi]
; Line 366
	xor	esi, esi
	mov	ebp, DWORD PTR [ebx+eax*4]
	test	ebp, ebp
	jne	SHORT $LN19@TXT_DB_fre
	test	eax, eax
	jle	SHORT $LN12@TXT_DB_fre
$LL10@TXT_DB_fre:
; Line 367
	mov	eax, DWORD PTR [ebx+esi*4]
	test	eax, eax
	je	SHORT $LN8@TXT_DB_fre
; Line 368
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN8@TXT_DB_fre:
; Line 366
	inc	esi
	cmp	esi, DWORD PTR [edi]
	jl	SHORT $LL10@TXT_DB_fre
; Line 369
	jmp	SHORT $LN12@TXT_DB_fre
$LN19@TXT_DB_fre:
; Line 370
	test	eax, eax
	jle	SHORT $LN12@TXT_DB_fre
	npad	4
$LL13@TXT_DB_fre:
; Line 372
	mov	eax, DWORD PTR [ebx+esi*4]
	cmp	eax, ebx
	jb	SHORT $LN23@TXT_DB_fre
	cmp	eax, ebp
	jbe	SHORT $LN11@TXT_DB_fre
$LN23@TXT_DB_fre:
	test	eax, eax
	je	SHORT $LN11@TXT_DB_fre
; Line 373
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN11@TXT_DB_fre:
; Line 370
	inc	esi
	cmp	esi, DWORD PTR [edi]
	jl	SHORT $LL13@TXT_DB_fre
$LN12@TXT_DB_fre:
; Line 376
	mov	ebx, DWORD PTR _i$2$[esp+12]
	push	ebx
	push	DWORD PTR [edi+4]
	call	_sk_value
	push	eax
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
	sub	ebx, 1
	mov	DWORD PTR _i$2$[esp+12], ebx
	jns	SHORT $LL7@TXT_DB_fre
	pop	ebp
$LN6@TXT_DB_fre:
; Line 378
	push	DWORD PTR [edi+4]
	call	_sk_free
	add	esp, 4
	pop	ebx
$LN18@TXT_DB_fre:
; Line 380
	push	edi
	call	_CRYPTO_free
	add	esp, 4
	pop	esi
$LN1@TXT_DB_fre:
	pop	edi
; Line 381
	ret	0
_TXT_DB_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _TXT_DB_create_index
_TEXT	SEGMENT
_n$1$ = -4						; size = 4
_idx$1$ = 8						; size = 4
_db$ = 8						; size = 4
_field$ = 12						; size = 4
_qual$ = 16						; size = 4
_hash$ = 20						; size = 4
_cmp$ = 24						; size = 4
_TXT_DB_create_index PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
; Line 223
	mov	eax, 4
	call	__chkstk
; Line 228
	mov	eax, DWORD PTR _field$[esp]
	push	edi
	mov	edi, DWORD PTR _db$[esp+4]
	cmp	eax, DWORD PTR [edi]
	jl	SHORT $LN5@TXT_DB_cre
; Line 229
	mov	DWORD PTR [edi+16], 3
; Line 230
	xor	eax, eax
	pop	edi
; Line 255
	pop	ecx
	ret	0
$LN5@TXT_DB_cre:
	push	ebx
; Line 233
	push	DWORD PTR _cmp$[esp+8]
	push	DWORD PTR _hash$[esp+12]
	call	_lh_new
	mov	ebx, eax
	add	esp, 8
	mov	DWORD PTR _idx$1$[esp+8], ebx
	test	ebx, ebx
	jne	SHORT $LN6@TXT_DB_cre
; Line 234
	pop	ebx
	mov	DWORD PTR [edi+16], 1
	pop	edi
; Line 255
	pop	ecx
	ret	0
$LN6@TXT_DB_cre:
	push	ebp
	push	esi
; Line 237
	push	DWORD PTR [edi+4]
	call	_sk_num
; Line 238
	mov	ebp, DWORD PTR _qual$[esp+20]
	add	esp, 4
	xor	esi, esi
	mov	DWORD PTR _n$1$[esp+20], eax
	test	eax, eax
	jle	SHORT $LN3@TXT_DB_cre
$LL4@TXT_DB_cre:
; Line 239
	push	esi
	push	DWORD PTR [edi+4]
	call	_sk_value
	add	esp, 8
	mov	ebx, eax
; Line 240
	test	ebp, ebp
	je	SHORT $LN7@TXT_DB_cre
	push	ebx
	call	ebp
	add	esp, 4
	test	eax, eax
	je	SHORT $LN16@TXT_DB_cre
$LN7@TXT_DB_cre:
; Line 242
	push	ebx
	mov	ebx, DWORD PTR _idx$1$[esp+20]
	push	ebx
	call	_lh_insert
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@TXT_DB_cre
; Line 244
	push	eax
	push	DWORD PTR [edi+4]
	mov	DWORD PTR [edi+16], 2
	call	_sk_find
; Line 246
	push	ebx
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [edi+24], esi
	call	_lh_free
	add	esp, 12					; 0000000cH
; Line 247
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 255
	pop	ecx
	ret	0
$LN16@TXT_DB_cre:
	mov	ebx, DWORD PTR _idx$1$[esp+16]
$LN2@TXT_DB_cre:
; Line 238
	inc	esi
	cmp	esi, DWORD PTR _n$1$[esp+20]
	jl	SHORT $LL4@TXT_DB_cre
$LN3@TXT_DB_cre:
; Line 250
	mov	eax, DWORD PTR [edi+8]
	mov	esi, DWORD PTR _field$[esp+16]
	mov	eax, DWORD PTR [eax+esi*4]
	test	eax, eax
	je	SHORT $LN9@TXT_DB_cre
; Line 251
	push	eax
	call	_lh_free
	add	esp, 4
$LN9@TXT_DB_cre:
; Line 252
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+esi*4], ebx
; Line 253
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+esi*4], ebp
; Line 254
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 255
	pop	ecx
	ret	0
_TXT_DB_create_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _TXT_DB_write
_TEXT	SEGMENT
_tot$1$ = -16						; size = 4
_i$1$ = -12						; size = 4
_buf$1$ = -8						; size = 4
_n$1$ = -4						; size = 4
_out$ = 8						; size = 4
_db$ = 12						; size = 4
_TXT_DB_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
; Line 258
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebp
; Line 259
	xor	ebp, ebp
	push	edi
	mov	DWORD PTR _tot$1$[esp+24], ebp
; Line 264
	call	_BUF_MEM_new
	mov	edi, eax
	mov	DWORD PTR _buf$1$[esp+24], edi
	test	edi, edi
	je	$LN43@TXT_DB_wri
; Line 266
	push	ebx
	push	esi
	mov	esi, DWORD PTR _db$[esp+28]
	push	DWORD PTR [esi+4]
	call	_sk_num
; Line 267
	mov	ebx, DWORD PTR [esi]
	mov	ecx, eax
; Line 268
	xor	eax, eax
	mov	DWORD PTR _n$1$[esp+36], ecx
	add	esp, 4
	mov	DWORD PTR _i$1$[esp+32], eax
	test	ecx, ecx
	jle	$err$47
	npad	4
$LL4@TXT_DB_wri:
; Line 269
	push	eax
	push	DWORD PTR [esi+4]
	call	_sk_value
	add	esp, 8
; Line 271
	xor	edi, edi
; Line 272
	xor	edx, edx
	mov	ebp, eax
	test	ebx, ebx
	jle	SHORT $LN6@TXT_DB_wri
$LL7@TXT_DB_wri:
; Line 273
	mov	ecx, DWORD PTR [ebp+edx*4]
	test	ecx, ecx
	je	SHORT $LN5@TXT_DB_wri
; Line 274
	lea	esi, DWORD PTR [ecx+1]
$LL42@TXT_DB_wri:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL42@TXT_DB_wri
	sub	ecx, esi
	add	edi, ecx
$LN5@TXT_DB_wri:
; Line 272
	inc	edx
	cmp	edx, ebx
	jl	SHORT $LL7@TXT_DB_wri
$LN6@TXT_DB_wri:
; Line 276
	lea	eax, DWORD PTR [ebx+edi*2]
	mov	edi, DWORD PTR _buf$1$[esp+32]
	push	eax
	push	edi
	call	_BUF_MEM_grow_clean
	add	esp, 8
	test	eax, eax
	je	$LN45@TXT_DB_wri
; Line 279
	mov	esi, DWORD PTR [edi+4]
; Line 280
	xor	edx, edx
	test	ebx, ebx
	jle	SHORT $LN9@TXT_DB_wri
$LL10@TXT_DB_wri:
; Line 281
	mov	ecx, DWORD PTR [ebp+edx*4]
; Line 282
	test	ecx, ecx
	je	SHORT $LN27@TXT_DB_wri
; Line 284
	mov	al, BYTE PTR [ecx]
	test	al, al
	je	SHORT $LN27@TXT_DB_wri
$LL11@TXT_DB_wri:
; Line 286
	cmp	al, 9
	jne	SHORT $LN19@TXT_DB_wri
; Line 287
	mov	BYTE PTR [esi], 92			; 0000005cH
	inc	esi
$LN19@TXT_DB_wri:
; Line 288
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	BYTE PTR [esi], al
	inc	esi
	mov	al, BYTE PTR [ecx]
	test	al, al
	jne	SHORT $LL11@TXT_DB_wri
$LN27@TXT_DB_wri:
; Line 290
	mov	BYTE PTR [esi], 9
	inc	edx
	inc	esi
	cmp	edx, ebx
	jl	SHORT $LL10@TXT_DB_wri
$LN9@TXT_DB_wri:
; Line 292
	mov	BYTE PTR [esi-1], 10			; 0000000aH
; Line 293
	mov	eax, DWORD PTR [edi+4]
	sub	esi, eax
; Line 294
	push	esi
	push	eax
	push	DWORD PTR _out$[esp+36]
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, esi
	jne	SHORT $LN45@TXT_DB_wri
; Line 296
	mov	eax, DWORD PTR _i$1$[esp+32]
	mov	ebp, DWORD PTR _tot$1$[esp+32]
	inc	eax
	add	ebp, esi
	mov	DWORD PTR _i$1$[esp+32], eax
	mov	esi, DWORD PTR _db$[esp+28]
	mov	DWORD PTR _tot$1$[esp+32], ebp
	cmp	eax, DWORD PTR _n$1$[esp+32]
	jl	$LL4@TXT_DB_wri
; Line 301
	push	edi
	call	_BUF_MEM_free
	add	esp, 4
; Line 302
	mov	eax, ebp
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 303
	add	esp, 16					; 00000010H
	ret	0
$LN45@TXT_DB_wri:
	or	ebp, -1
$err$47:
; Line 301
	push	edi
	call	_BUF_MEM_free
	add	esp, 4
; Line 302
	mov	eax, ebp
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 303
	add	esp, 16					; 00000010H
	ret	0
$LN43@TXT_DB_wri:
	pop	edi
; Line 302
	or	eax, -1
	pop	ebp
; Line 303
	add	esp, 16					; 00000010H
	ret	0
_TXT_DB_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _TXT_DB_read
_TEXT	SEGMENT
_buf$1$ = -32						; size = 4
_ret$1$ = -28						; size = 4
_er$1$ = -24						; size = 4
_size$1$ = -20						; size = 4
_ln$1$ = -16						; size = 4
tv669 = -12						; size = 4
_add$1$ = -12						; size = 4
tv676 = -8						; size = 4
tv666 = -4						; size = 4
_offset$1$ = -4						; size = 4
_in$ = 8						; size = 4
_num$ = 12						; size = 4
_TXT_DB_read PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\txt_db\txt_db.c
; Line 72
	mov	eax, 32					; 00000020H
	call	__chkstk
	push	ebx
	push	ebp
; Line 76
	xor	eax, eax
	mov	DWORD PTR _er$1$[esp+40], 1
	push	esi
	xor	esi, esi
	mov	DWORD PTR _ln$1$[esp+44], eax
; Line 78
	mov	DWORD PTR _size$1$[esp+44], 512		; 00000200H
; Line 84
	call	_BUF_MEM_new
	mov	ebp, DWORD PTR __imp____acrt_iob_func
	mov	ebx, eax
	mov	DWORD PTR _buf$1$[esp+44], ebx
	test	ebx, ebx
	je	$err$81
; Line 86
	push	512					; 00000200H
	push	ebx
	call	_BUF_MEM_grow
	add	esp, 8
	test	eax, eax
	je	$err$81
; Line 89
	push	89					; 00000059H
	push	OFFSET ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@
	push	32					; 00000020H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1$[esp+44], esi
	test	esi, esi
	je	$err$81
; Line 91
	mov	ebx, DWORD PTR _num$[esp+40]
; Line 92
	lea	ebp, DWORD PTR [esi+8]
	push	edi
; Line 93
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [ebp], 0
	mov	DWORD PTR tv669[esp+48], edi
	mov	DWORD PTR [edi], 0
; Line 94
	call	_sk_new_null
	mov	DWORD PTR [esi+4], eax
	test	eax, eax
	je	$LN75@TXT_DB_rea
; Line 96
	push	96					; 00000060H
	lea	esi, DWORD PTR [ebx*4]
	push	OFFSET ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@
	push	esi
	mov	DWORD PTR tv666[esp+60], esi
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp], eax
	test	eax, eax
	je	$LN73@TXT_DB_rea
; Line 98
	push	98					; 00000062H
	push	OFFSET ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@
	push	esi
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv676[esp+48], eax
	mov	DWORD PTR [edi], eax
	test	eax, eax
	je	$LN73@TXT_DB_rea
; Line 100
	xor	esi, esi
	test	ebx, ebx
	jle	$LN3@TXT_DB_rea
	cmp	ebx, 4
	jb	$LN56@TXT_DB_rea
; Line 101
	mov	ecx, DWORD PTR [ebp]
	lea	edi, DWORD PTR [ebx-1]
	lea	edx, DWORD PTR [ebx-1]
	lea	edx, DWORD PTR [eax+edx*4]
	lea	edi, DWORD PTR [ecx+edi*4]
	cmp	eax, edi
	mov	edi, DWORD PTR tv669[esp+48]
	ja	SHORT $LN57@TXT_DB_rea
	cmp	edx, ecx
	jae	SHORT $LN56@TXT_DB_rea
$LN57@TXT_DB_rea:
	cmp	eax, ebp
	ja	SHORT $LN58@TXT_DB_rea
	cmp	edx, ebp
	jae	SHORT $LN56@TXT_DB_rea
$LN58@TXT_DB_rea:
	cmp	eax, edi
	ja	SHORT $LN59@TXT_DB_rea
	cmp	edx, edi
	jae	SHORT $LN56@TXT_DB_rea
$LN59@TXT_DB_rea:
	lea	eax, DWORD PTR [ebx-1]
	lea	eax, DWORD PTR [ecx+eax*4]
	cmp	ecx, ebp
	ja	SHORT $LN60@TXT_DB_rea
	cmp	eax, ebp
	jae	SHORT $LN56@TXT_DB_rea
$LN60@TXT_DB_rea:
	cmp	ecx, edi
	ja	SHORT $LN61@TXT_DB_rea
	cmp	eax, edi
	jae	SHORT $LN56@TXT_DB_rea
$LN61@TXT_DB_rea:
	mov	eax, ebx
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN79@TXT_DB_rea
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN79@TXT_DB_rea:
	mov	ecx, ebx
	sub	ecx, eax
	npad	5
$LL4@TXT_DB_rea:
; Line 100
	add	esi, 4
	cmp	esi, ecx
	jl	SHORT $LL4@TXT_DB_rea
; Line 101
	mov	edi, DWORD PTR [ebp]
	lea	eax, DWORD PTR [ecx+3]
	cdq
	and	edx, 3
	add	edx, eax
	xor	eax, eax
	sar	edx, 2
	shl	edx, 4
	mov	ecx, edx
	shr	ecx, 2
	rep stosd
; Line 102
	mov	edi, DWORD PTR tv676[esp+48]
	shr	edx, 2
	mov	ecx, edx
	rep stosd
	mov	edi, DWORD PTR tv669[esp+48]
$LN56@TXT_DB_rea:
; Line 100
	cmp	esi, ebx
	jge	SHORT $LN3@TXT_DB_rea
	npad	11
$LL55@TXT_DB_rea:
; Line 101
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [eax+esi*4], 0
; Line 102
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+esi*4], 0
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL55@TXT_DB_rea
$LN3@TXT_DB_rea:
; Line 106
	mov	ebx, DWORD PTR _buf$1$[esp+48]
	mov	ebp, DWORD PTR tv666[esp+48]
	mov	esi, DWORD PTR _ret$1$[esp+48]
	add	ebp, 4
	mov	DWORD PTR _add$1$[esp+48], ebp
; Line 107
	xor	edi, edi
	mov	eax, DWORD PTR [ebx+4]
	mov	BYTE PTR [eax+511], 0
$LL5@TXT_DB_rea:
; Line 109
	test	edi, edi
	je	SHORT $LN18@TXT_DB_rea
; Line 110
	mov	eax, DWORD PTR _size$1$[esp+48]
	add	eax, 512				; 00000200H
; Line 111
	push	eax
	push	ebx
	mov	DWORD PTR _size$1$[esp+56], eax
	call	_BUF_MEM_grow_clean
	add	esp, 8
	test	eax, eax
	je	$LN77@TXT_DB_rea
$LN18@TXT_DB_rea:
; Line 114
	mov	eax, DWORD PTR [ebx+4]
	mov	BYTE PTR [edi+eax], 0
; Line 115
	mov	eax, DWORD PTR _size$1$[esp+48]
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	add	eax, edi
	push	eax
	push	DWORD PTR _in$[esp+52]
	call	_BIO_gets
; Line 117
	mov	edx, DWORD PTR [ebx+4]
	add	esp, 12					; 0000000cH
	inc	DWORD PTR _ln$1$[esp+48]
	lea	ecx, DWORD PTR [edx+edi]
	cmp	BYTE PTR [ecx], 0
	je	$LN49@TXT_DB_rea
; Line 119
	test	edi, edi
	jne	SHORT $LN20@TXT_DB_rea
	cmp	BYTE PTR [edx], 35			; 00000023H
	je	SHORT $LL5@TXT_DB_rea
$LN20@TXT_DB_rea:
; Line 121
	lea	esi, DWORD PTR [ecx+1]
	npad	7
$LL70@TXT_DB_rea:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL70@TXT_DB_rea
	sub	ecx, esi
; Line 123
	mov	esi, DWORD PTR _ret$1$[esp+48]
	add	edi, ecx
	cmp	BYTE PTR [edx+edi-1], 10		; 0000000aH
	jne	SHORT $LL5@TXT_DB_rea
; Line 127
	push	127					; 0000007fH
	mov	BYTE PTR [edx+edi-1], al
	lea	eax, DWORD PTR [edi+ebp]
	push	OFFSET ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN77@TXT_DB_rea
; Line 131
	mov	ebp, eax
	xor	edi, edi
; Line 132
	add	eax, DWORD PTR _add$1$[esp+48]
	mov	DWORD PTR _offset$1$[esp+48], edi
; Line 134
	mov	DWORD PTR [ebp], eax
	lea	esi, DWORD PTR [edi+1]
; Line 136
	mov	ecx, DWORD PTR [ebx+4]
; Line 138
	xor	ebx, ebx
; Line 140
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $LN46@TXT_DB_rea
	mov	edi, DWORD PTR _num$[esp+44]
$LL8@TXT_DB_rea:
; Line 142
	cmp	dl, 9
	jne	SHORT $LN27@TXT_DB_rea
; Line 143
	test	ebx, ebx
	je	SHORT $LN26@TXT_DB_rea
; Line 144
	dec	eax
$LN27@TXT_DB_rea:
; Line 154
	xor	ebx, ebx
; Line 155
	mov	BYTE PTR [eax], dl
	cmp	dl, 92					; 0000005cH
	sete	bl
	inc	eax
	inc	ecx
$LN54@TXT_DB_rea:
; Line 140
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	jne	SHORT $LL8@TXT_DB_rea
$LN71@TXT_DB_rea:
	mov	edi, DWORD PTR _offset$1$[esp+48]
$LN46@TXT_DB_rea:
; Line 158
	mov	ebx, DWORD PTR _num$[esp+44]
	mov	BYTE PTR [eax], 0
	cmp	esi, ebx
	jne	SHORT $LN30@TXT_DB_rea
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LN30@TXT_DB_rea
; Line 168
	inc	eax
	mov	DWORD PTR [ebp+esi*4], eax
; Line 169
	mov	esi, DWORD PTR _ret$1$[esp+48]
	push	ebp
	push	DWORD PTR [esi+4]
	call	_sk_push
	mov	ebx, DWORD PTR _buf$1$[esp+56]
	add	esp, 8
	mov	ebp, DWORD PTR _add$1$[esp+48]
	test	eax, eax
	jne	$LL5@TXT_DB_rea
; Line 172
	mov	ebp, DWORD PTR __imp____acrt_iob_func
	push	OFFSET ??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@
	push	2
	call	ebp
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
; Line 174
	mov	DWORD PTR _er$1$[esp+48], 2
; Line 175
	jmp	SHORT $LN78@TXT_DB_rea
$LN26@TXT_DB_rea:
; Line 146
	mov	BYTE PTR [eax], 0
; Line 147
	inc	ecx
	inc	eax
; Line 148
	cmp	esi, edi
	jge	SHORT $LN71@TXT_DB_rea
; Line 150
	mov	DWORD PTR [ebp+esi*4], eax
	inc	esi
; Line 151
	jmp	SHORT $LN54@TXT_DB_rea
$LN30@TXT_DB_rea:
; Line 161
	mov	eax, DWORD PTR _ln$1$[esp+48]
	mov	ebp, DWORD PTR __imp____acrt_iob_func
	push	ecx
	push	esi
	push	ebx
	push	eax
	push	OFFSET ??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@
	push	2
	call	ebp
	add	esp, 4
	push	eax
	call	_fprintf
; Line 165
	mov	ebx, DWORD PTR _buf$1$[esp+72]
	add	esp, 24					; 00000018H
	mov	esi, DWORD PTR _ret$1$[esp+48]
	mov	DWORD PTR _er$1$[esp+48], 2
	jmp	SHORT $LN78@TXT_DB_rea
$LN49@TXT_DB_rea:
; Line 178
	xor	eax, eax
	mov	DWORD PTR _er$1$[esp+48], eax
	jmp	SHORT $LN77@TXT_DB_rea
$LN73@TXT_DB_rea:
	mov	esi, DWORD PTR _ret$1$[esp+48]
$LN75@TXT_DB_rea:
	mov	ebx, DWORD PTR _buf$1$[esp+48]
$LN77@TXT_DB_rea:
	mov	ebp, DWORD PTR __imp____acrt_iob_func
$LN78@TXT_DB_rea:
	pop	edi
$err$81:
; Line 180
	push	ebx
	call	_BUF_MEM_free
; Line 181
	mov	eax, DWORD PTR _er$1$[esp+48]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN32@TXT_DB_rea
; Line 183
	cmp	eax, 1
	jne	SHORT $LN34@TXT_DB_rea
; Line 184
	push	OFFSET ??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@
	push	2
	call	ebp
	add	esp, 4
	push	eax
	call	_fprintf
	add	esp, 8
$LN34@TXT_DB_rea:
; Line 186
	test	esi, esi
	je	SHORT $LN39@TXT_DB_rea
; Line 187
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN36@TXT_DB_rea
; Line 188
	push	eax
	call	_sk_free
	add	esp, 4
$LN36@TXT_DB_rea:
; Line 189
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN37@TXT_DB_rea
; Line 190
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN37@TXT_DB_rea:
; Line 191
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN38@TXT_DB_rea
; Line 192
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN38@TXT_DB_rea:
; Line 194
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN39@TXT_DB_rea:
; Line 196
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 199
	add	esp, 32					; 00000020H
	ret	0
$LN32@TXT_DB_rea:
; Line 198
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 199
	add	esp, 32					; 00000020H
	ret	0
_TXT_DB_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	lea	eax, DWORD PTR __Format$[esp]
	push	eax
	push	0
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 838
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; Line 639
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 640
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
; Line 82
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 83
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
