; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\rc2\rc2_cbc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_RC2_encrypt
PUBLIC	_RC2_decrypt
PUBLIC	_RC2_cbc_encrypt
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _RC2_cbc_encrypt
_TEXT	SEGMENT
_xor1$1$ = -20						; size = 4
_tout0$1$ = -20						; size = 4
_tin1$4$ = -16						; size = 4
tv835 = -16						; size = 4
_iv$2$ = -16						; size = 4
_tin0$4$ = -12						; size = 4
_l$2$ = -12						; size = 4
_tin$ = -8						; size = 8
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_tout1$3$ = 16						; size = 4
_l$1$ = 16						; size = 4
tv836 = 16						; size = 4
_out$2$ = 16						; size = 4
_length$ = 16						; size = 4
_ks$ = 20						; size = 4
_iv$ = 24						; size = 4
_xor0$1$ = 28						; size = 4
_tout1$1$ = 28						; size = 4
_encrypt$ = 28						; size = 4
_RC2_cbc_encrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rc2\rc2_cbc.c
; Line 64
	mov	eax, 20					; 00000014H
	call	__chkstk
; Line 70
	cmp	DWORD PTR _encrypt$[esp+16], 0
	push	ebx
	push	ebp
	push	esi
	push	edi
	je	$LN12@RC2_cbc_en
; Line 71
	mov	esi, DWORD PTR _iv$[esp+32]
; Line 74
	mov	ebp, DWORD PTR _length$[esp+32]
	mov	edi, DWORD PTR _out$[esp+32]
	mov	ebx, DWORD PTR _in$[esp+32]
	movzx	eax, BYTE PTR [esi+1]
	movzx	edx, BYTE PTR [esi]
	movzx	ecx, BYTE PTR [esi+4]
	shl	eax, 8
	or	edx, eax
	movzx	eax, BYTE PTR [esi+2]
	shl	eax, 16					; 00000010H
	or	edx, eax
	movzx	eax, BYTE PTR [esi+3]
	shl	eax, 24					; 00000018H
	or	edx, eax
	movzx	eax, BYTE PTR [esi+5]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR _tout0$1$[esp+36], edx
	movzx	eax, BYTE PTR [esi+6]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [esi+7]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	add	ebp, -8					; fffffff8H
	mov	DWORD PTR _tout1$1$[esp+32], ecx
	mov	DWORD PTR _l$1$[esp+32], ebp
	js	$LN3@RC2_cbc_en
; Line 71
	lea	eax, DWORD PTR [ebp+8]
	shr	eax, 3
	mov	DWORD PTR tv835[esp+36], eax
; Line 74
	neg	eax
	lea	ebp, DWORD PTR [ebp+eax*8]
	mov	DWORD PTR _l$1$[esp+32], ebp
	mov	ebp, DWORD PTR tv835[esp+36]
$LL4@RC2_cbc_en:
; Line 75
	movzx	eax, BYTE PTR [ebx+1]
	movzx	edx, BYTE PTR [ebx]
; Line 76
	movzx	ecx, BYTE PTR [ebx+4]
	shl	eax, 8
	or	edx, eax
	movzx	eax, BYTE PTR [ebx+2]
	shl	eax, 16					; 00000010H
; Line 81
	push	DWORD PTR _ks$[esp+32]
	or	edx, eax
	movzx	eax, BYTE PTR [ebx+3]
	shl	eax, 24					; 00000018H
	or	edx, eax
	movzx	eax, BYTE PTR [ebx+5]
	xor	edx, DWORD PTR _tout0$1$[esp+40]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR _tin$[esp+40], edx
	movzx	eax, BYTE PTR [ebx+6]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+7]
	shl	eax, 24					; 00000018H
	add	ebx, 8
	or	ecx, eax
	lea	eax, DWORD PTR _tin$[esp+40]
	xor	ecx, DWORD PTR _tout1$1$[esp+36]
	push	eax
	mov	DWORD PTR _tin$[esp+48], ecx
	call	_RC2_encrypt
; Line 82
	mov	edx, DWORD PTR _tin$[esp+44]
	add	esp, 8
; Line 84
	mov	ecx, DWORD PTR _tin$[esp+40]
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR [edi], dl
	mov	BYTE PTR [edi+1], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+2], al
	mov	eax, edx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi+3], al
; Line 85
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [edi+4], cl
	mov	BYTE PTR [edi+5], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+6], al
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi+7], al
	add	edi, 8
	mov	DWORD PTR _tout0$1$[esp+36], edx
	mov	DWORD PTR _tout1$1$[esp+32], ecx
	sub	ebp, 1
	jne	$LL4@RC2_cbc_en
	mov	ebp, DWORD PTR _l$1$[esp+32]
$LN3@RC2_cbc_en:
; Line 87
	cmp	ebp, -8					; fffffff8H
	je	$LN14@RC2_cbc_en
; Line 88
	mov	eax, DWORD PTR _l$1$[esp+32]
	lea	ecx, DWORD PTR [ebp+8]
	add	ecx, ebx
	add	eax, 7
	xor	ebx, ebx
	xor	ebp, ebp
	cmp	eax, 7
	ja	SHORT $LN5@RC2_cbc_en
	jmp	DWORD PTR $LN44@RC2_cbc_en[eax*4]
$LN15@RC2_cbc_en:
	movzx	ebx, BYTE PTR [ecx-1]
	dec	ecx
	shl	ebx, 24					; 00000018H
$LN16@RC2_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 16					; 00000010H
	or	ebx, eax
$LN17@RC2_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 8
	or	ebx, eax
$LN18@RC2_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	or	ebx, eax
$LN19@RC2_cbc_en:
	movzx	ebp, BYTE PTR [ecx-1]
	dec	ecx
	shl	ebp, 24					; 00000018H
$LN20@RC2_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 16					; 00000010H
	or	ebp, eax
$LN21@RC2_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	dec	ecx
	shl	eax, 8
	or	ebp, eax
$LN22@RC2_cbc_en:
	movzx	eax, BYTE PTR [ecx-1]
	or	ebp, eax
$LN5@RC2_cbc_en:
; Line 93
	push	DWORD PTR _ks$[esp+32]
	xor	ebx, DWORD PTR _tout1$1$[esp+36]
	lea	eax, DWORD PTR _tin$[esp+40]
	xor	ebp, edx
	mov	DWORD PTR _tin$[esp+44], ebx
	push	eax
	mov	DWORD PTR _tin$[esp+44], ebp
	call	_RC2_encrypt
; Line 94
	mov	edx, DWORD PTR _tin$[esp+44]
	add	esp, 8
; Line 96
	mov	ecx, DWORD PTR _tin$[esp+40]
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR [edi], dl
	mov	BYTE PTR [edi+1], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+2], al
	mov	eax, edx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi+3], al
; Line 97
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [edi+4], cl
	mov	BYTE PTR [edi+5], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+6], al
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi+7], al
$LN14@RC2_cbc_en:
; Line 99
	mov	BYTE PTR [esi], dl
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR [esi+1], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [esi+2], al
; Line 100
	mov	eax, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [esi+3], dl
	mov	BYTE PTR [esi+4], cl
	shr	eax, 8
	mov	BYTE PTR [esi+5], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	pop	edi
	mov	BYTE PTR [esi+6], al
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [esi+7], cl
	pop	esi
	pop	ebp
	pop	ebx
; Line 135
	add	esp, 20					; 00000014H
	ret	0
$LN12@RC2_cbc_en:
; Line 102
	mov	ebx, DWORD PTR _iv$[esp+32]
; Line 105
	mov	edi, DWORD PTR _length$[esp+32]
	mov	ebp, DWORD PTR _in$[esp+32]
	mov	DWORD PTR _iv$2$[esp+36], ebx
	movzx	eax, BYTE PTR [ebx+1]
	movzx	ecx, BYTE PTR [ebx]
	movzx	edx, BYTE PTR [ebx+4]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+2]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+3]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+5]
	shl	eax, 8
	or	edx, eax
	mov	DWORD PTR _xor0$1$[esp+32], ecx
	movzx	eax, BYTE PTR [ebx+6]
	shl	eax, 16					; 00000010H
	or	edx, eax
	movzx	eax, BYTE PTR [ebx+7]
	shl	eax, 24					; 00000018H
	or	edx, eax
	add	edi, -8					; fffffff8H
	mov	DWORD PTR _xor1$1$[esp+36], edx
	js	$LN42@RC2_cbc_en
	mov	ebx, DWORD PTR _out$[esp+32]
	lea	eax, DWORD PTR [edi+8]
	shr	eax, 3
	mov	DWORD PTR tv836[esp+32], eax
	neg	eax
	lea	edi, DWORD PTR [edi+eax*8]
	mov	DWORD PTR _l$2$[esp+36], edi
	npad	3
$LL9@RC2_cbc_en:
; Line 106
	movzx	eax, BYTE PTR [ebp+1]
	movzx	edi, BYTE PTR [ebp]
; Line 108
	movzx	esi, BYTE PTR [ebp+4]
	shl	eax, 8
	or	edi, eax
	movzx	eax, BYTE PTR [ebp+2]
	shl	eax, 16					; 00000010H
; Line 110
	push	DWORD PTR _ks$[esp+32]
	or	edi, eax
	movzx	eax, BYTE PTR [ebp+3]
	shl	eax, 24					; 00000018H
	or	edi, eax
	movzx	eax, BYTE PTR [ebp+5]
	shl	eax, 8
	or	esi, eax
	mov	DWORD PTR _tin$[esp+40], edi
	movzx	eax, BYTE PTR [ebp+6]
	shl	eax, 16					; 00000010H
	or	esi, eax
	movzx	eax, BYTE PTR [ebp+7]
	shl	eax, 24					; 00000018H
	add	ebp, 8
	or	esi, eax
	lea	eax, DWORD PTR _tin$[esp+40]
	push	eax
	mov	DWORD PTR _tin$[esp+48], esi
	call	_RC2_decrypt
; Line 111
	mov	ecx, DWORD PTR _tin$[esp+44]
	add	esp, 8
	xor	ecx, DWORD PTR _xor0$1$[esp+32]
; Line 112
	mov	edx, DWORD PTR _tin$[esp+40]
; Line 113
	mov	eax, ecx
	xor	edx, DWORD PTR _xor1$1$[esp+36]
	mov	BYTE PTR [ebx], cl
	shr	eax, 8
	mov	BYTE PTR [ebx+1], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebx+2], al
; Line 114
	mov	eax, edx
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [ebx+3], cl
; Line 115
	mov	ecx, edi
	mov	BYTE PTR [ebx+4], dl
	shr	eax, 8
	mov	BYTE PTR [ebx+5], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ebx+6], al
	mov	BYTE PTR [ebx+7], dl
	add	ebx, 8
	sub	DWORD PTR tv836[esp+32], 1
; Line 116
	mov	edx, esi
	mov	DWORD PTR _xor0$1$[esp+32], ecx
	mov	DWORD PTR _xor1$1$[esp+36], edx
	jne	$LL9@RC2_cbc_en
	mov	edi, DWORD PTR _l$2$[esp+36]
	mov	DWORD PTR _out$2$[esp+32], ebx
	mov	ebx, DWORD PTR _iv$2$[esp+36]
	mov	esi, DWORD PTR _out$2$[esp+32]
	jmp	SHORT $LN8@RC2_cbc_en
$LN42@RC2_cbc_en:
; Line 105
	mov	esi, DWORD PTR _out$[esp+32]
$LN8@RC2_cbc_en:
; Line 118
	cmp	edi, -8					; fffffff8H
	je	$LN23@RC2_cbc_en
; Line 119
	movzx	eax, BYTE PTR [ebp+1]
	movzx	ecx, BYTE PTR [ebp]
; Line 121
	movzx	edx, BYTE PTR [ebp+4]
; Line 123
	push	DWORD PTR _ks$[esp+32]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [ebp+2]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebp+3]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	movzx	eax, BYTE PTR [ebp+5]
	mov	DWORD PTR _tin0$4$[esp+40], ecx
	mov	DWORD PTR _tin$[esp+40], ecx
	movzx	ecx, BYTE PTR [ebp+7]
	shl	eax, 8
	or	edx, eax
	shl	ecx, 8
	movzx	eax, BYTE PTR [ebp+6]
	or	ecx, eax
	lea	eax, DWORD PTR _tin$[esp+40]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	push	eax
	mov	DWORD PTR _tin1$4$[esp+44], edx
	mov	DWORD PTR _tin$[esp+48], edx
	call	_RC2_decrypt
; Line 124
	mov	edx, DWORD PTR _tin$[esp+44]
; Line 126
	lea	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR _tin$[esp+48]
	add	edi, 7
	xor	eax, DWORD PTR _xor1$1$[esp+44]
	add	esp, 8
	xor	edx, DWORD PTR _xor0$1$[esp+32]
	add	ecx, esi
	mov	DWORD PTR _tout1$3$[esp+32], eax
	cmp	edi, 7
	ja	SHORT $LN10@RC2_cbc_en
	jmp	DWORD PTR $LN45@RC2_cbc_en[edi*4]
$LN24@RC2_cbc_en:
	dec	ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _tout1$3$[esp+32]
$LN25@RC2_cbc_en:
	dec	ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _tout1$3$[esp+32]
$LN26@RC2_cbc_en:
	dec	ecx
	shr	eax, 8
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _tout1$3$[esp+32]
$LN27@RC2_cbc_en:
	dec	ecx
	mov	BYTE PTR [ecx], al
$LN28@RC2_cbc_en:
	dec	ecx
	mov	eax, edx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx], al
$LN29@RC2_cbc_en:
	dec	ecx
	mov	eax, edx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ecx], al
$LN30@RC2_cbc_en:
	dec	ecx
	mov	eax, edx
	shr	eax, 8
	mov	BYTE PTR [ecx], al
$LN31@RC2_cbc_en:
	mov	BYTE PTR [ecx-1], dl
$LN10@RC2_cbc_en:
; Line 127
	mov	ecx, DWORD PTR _tin0$4$[esp+36]
; Line 128
	mov	edx, DWORD PTR _tin1$4$[esp+36]
$LN23@RC2_cbc_en:
; Line 130
	mov	BYTE PTR [ebx], cl
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [ebx+1], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [ebx+2], al
; Line 131
	mov	eax, edx
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [ebx+3], cl
	mov	BYTE PTR [ebx+4], dl
	shr	eax, 8
	mov	BYTE PTR [ebx+5], al
	mov	eax, edx
	pop	edi
	shr	eax, 16					; 00000010H
	pop	esi
	mov	BYTE PTR [ebx+6], al
	shr	edx, 24					; 00000018H
	pop	ebp
	mov	BYTE PTR [ebx+7], dl
	pop	ebx
; Line 135
	add	esp, 20					; 00000014H
	ret	0
$LN44@RC2_cbc_en:
	DD	$LN22@RC2_cbc_en
	DD	$LN21@RC2_cbc_en
	DD	$LN20@RC2_cbc_en
	DD	$LN19@RC2_cbc_en
	DD	$LN18@RC2_cbc_en
	DD	$LN17@RC2_cbc_en
	DD	$LN16@RC2_cbc_en
	DD	$LN15@RC2_cbc_en
$LN45@RC2_cbc_en:
	DD	$LN31@RC2_cbc_en
	DD	$LN30@RC2_cbc_en
	DD	$LN29@RC2_cbc_en
	DD	$LN28@RC2_cbc_en
	DD	$LN27@RC2_cbc_en
	DD	$LN26@RC2_cbc_en
	DD	$LN25@RC2_cbc_en
	DD	$LN24@RC2_cbc_en
_RC2_cbc_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RC2_decrypt
_TEXT	SEGMENT
_p0$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_d$ = 8							; size = 4
_key$ = 12						; size = 4
_RC2_decrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rc2\rc2_cbc.c
; Line 184
	mov	eax, 8
	call	__chkstk
; Line 190
	mov	eax, DWORD PTR _d$[esp+4]
; Line 200
	mov	edx, DWORD PTR _key$[esp+4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	ebp, 3
	mov	eax, DWORD PTR [eax+4]
	push	edi
	movzx	edi, si
	movzx	ebx, ax
	shr	esi, 16					; 00000010H
	shr	eax, 16					; 00000010H
	add	edx, 252				; 000000fcH
	mov	DWORD PTR _i$1$[esp+24], 5
	npad	6
$LL2@RC2_decryp:
; Line 203
	mov	ecx, eax
	shr	eax, 5
	shl	ecx, 11					; 0000000bH
	or	ecx, eax
; Line 204
	mov	eax, ebx
	not	eax
	and	eax, edi
	sub	ecx, eax
	mov	eax, ebx
	and	eax, esi
	sub	ecx, eax
	sub	ecx, DWORD PTR [edx]
	sub	edx, 4
	mov	DWORD PTR _p0$1$[esp+24], edx
; Line 205
	mov	edx, ebx
	movzx	eax, cx
; Line 206
	mov	ecx, esi
	shl	edx, 13					; 0000000dH
	not	ecx
	and	ecx, eax
	shr	ebx, 3
	or	edx, ebx
	sub	edx, ecx
	mov	ecx, esi
	and	ecx, edi
	sub	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	sub	edx, DWORD PTR [ecx]
	sub	ecx, 4
	movzx	ebx, dx
; Line 207
	mov	edx, esi
	mov	DWORD PTR _p0$1$[esp+24], ecx
; Line 208
	mov	ecx, edi
	shl	edx, 14					; 0000000eH
	not	ecx
	and	ecx, ebx
	shr	esi, 2
	or	edx, esi
	sub	edx, ecx
	mov	ecx, eax
	and	ecx, edi
	sub	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	sub	edx, DWORD PTR [ecx]
	sub	ecx, 4
	movzx	esi, dx
; Line 209
	mov	edx, edi
	mov	DWORD PTR _p0$1$[esp+24], ecx
; Line 210
	mov	ecx, eax
	shl	edx, 15					; 0000000fH
	not	ecx
	shr	edi, 1
	and	ecx, esi
	or	edx, edi
	sub	edx, ecx
	mov	ecx, eax
	and	ecx, ebx
	sub	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	sub	edx, DWORD PTR [ecx]
	movzx	edi, dx
	mov	edx, ecx
	sub	edx, 4
; Line 212
	sub	DWORD PTR _i$1$[esp+24], 1
	mov	DWORD PTR _p0$1$[esp+24], edx
	jne	$LL2@RC2_decryp
; Line 213
	sub	ebp, 1
	je	SHORT $LN10@RC2_decryp
; Line 217
	mov	edx, DWORD PTR _key$[esp+20]
	xor	ecx, ecx
	cmp	ebp, 2
	sete	cl
	add	ecx, 5
	mov	DWORD PTR _i$1$[esp+24], ecx
	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
	sub	eax, DWORD PTR [edx+ecx*4]
; Line 218
	mov	ecx, esi
	and	ecx, 63					; 0000003fH
	movzx	eax, ax
	sub	ebx, DWORD PTR [edx+ecx*4]
; Line 219
	mov	ecx, edi
	and	ecx, 63					; 0000003fH
	movzx	ebx, bx
	sub	esi, DWORD PTR [edx+ecx*4]
; Line 220
	mov	ecx, eax
	and	ecx, 63					; 0000003fH
	movzx	esi, si
	sub	edi, DWORD PTR [edx+ecx*4]
; Line 222
	mov	edx, DWORD PTR _p0$1$[esp+24]
	movzx	edi, di
	jmp	$LL2@RC2_decryp
$LN10@RC2_decryp:
; Line 224
	mov	edx, DWORD PTR _d$[esp+20]
	shl	esi, 16					; 00000010H
	or	esi, edi
; Line 226
	shl	eax, 16					; 00000010H
	pop	edi
	mov	DWORD PTR [edx], esi
	or	eax, ebx
	pop	esi
	pop	ebp
	mov	DWORD PTR [edx+4], eax
	pop	ebx
; Line 228
	add	esp, 8
	ret	0
_RC2_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _RC2_encrypt
_TEXT	SEGMENT
_p0$1$ = -8						; size = 4
_n$1$ = -4						; size = 4
_d$ = 8							; size = 4
_key$ = 12						; size = 4
_RC2_encrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\rc2\rc2_cbc.c
; Line 138
	mov	eax, 8
	call	__chkstk
; Line 144
	mov	eax, DWORD PTR _d$[esp+4]
; Line 154
	mov	ecx, DWORD PTR _key$[esp+4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	ebx, 5
	mov	eax, DWORD PTR [eax+4]
	push	edi
	movzx	edi, si
	shr	esi, 16					; 00000010H
	movzx	ebp, ax
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _n$1$[esp+24], 3
	mov	DWORD PTR _p0$1$[esp+24], ecx
$LL2@RC2_encryp:
; Line 156
	mov	edx, eax
	mov	ecx, eax
	not	edx
	and	ecx, ebp
	and	edx, esi
	add	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	add	DWORD PTR _p0$1$[esp+24], 4
	add	edx, DWORD PTR [ecx]
	add	edx, edi
	movzx	ecx, dx
; Line 157
	mov	edi, ecx
	add	ecx, ecx
	shr	edi, 15					; 0000000fH
	or	edi, ecx
; Line 158
	mov	ecx, eax
	and	ecx, edi
	mov	edx, edi
	not	edx
	and	edx, ebp
	add	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	add	DWORD PTR _p0$1$[esp+24], 4
	add	edx, DWORD PTR [ecx]
	add	edx, esi
	movzx	ecx, dx
; Line 159
	mov	esi, ecx
	shl	ecx, 2
	shr	esi, 14					; 0000000eH
	or	esi, ecx
; Line 160
	mov	edx, esi
	mov	ecx, esi
	not	edx
	and	ecx, edi
	and	edx, eax
	add	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	add	DWORD PTR _p0$1$[esp+24], 4
	add	edx, DWORD PTR [ecx]
	add	edx, ebp
	movzx	ecx, dx
; Line 161
	mov	ebp, ecx
	shl	ecx, 3
	shr	ebp, 13					; 0000000dH
	or	ebp, ecx
; Line 162
	mov	edx, ebp
	mov	ecx, ebp
	not	edx
	and	ecx, esi
	and	edx, edi
	add	edx, ecx
	mov	ecx, DWORD PTR _p0$1$[esp+24]
	add	DWORD PTR _p0$1$[esp+24], 4
	add	edx, DWORD PTR [ecx]
	add	edx, eax
	movzx	ecx, dx
; Line 163
	mov	eax, ecx
	shl	ecx, 5
	shr	eax, 11					; 0000000bH
	or	eax, ecx
; Line 165
	sub	ebx, 1
	jne	$LL2@RC2_encryp
; Line 166
	mov	ecx, DWORD PTR _n$1$[esp+24]
	sub	ecx, 1
	mov	DWORD PTR _n$1$[esp+24], ecx
	je	SHORT $LN10@RC2_encryp
; Line 170
	mov	edx, DWORD PTR _key$[esp+20]
	cmp	ecx, 2
	mov	ecx, eax
	sete	bl
	and	ecx, 63					; 0000003fH
	add	ebx, 5
	add	edi, DWORD PTR [edx+ecx*4]
; Line 171
	mov	ecx, edi
	and	ecx, 63					; 0000003fH
	add	esi, DWORD PTR [edx+ecx*4]
; Line 172
	mov	ecx, esi
	and	ecx, 63					; 0000003fH
	add	ebp, DWORD PTR [edx+ecx*4]
; Line 173
	mov	ecx, ebp
	and	ecx, 63					; 0000003fH
	add	eax, DWORD PTR [edx+ecx*4]
; Line 175
	jmp	$LL2@RC2_encryp
$LN10@RC2_encryp:
; Line 177
	mov	edx, DWORD PTR _d$[esp+20]
	shl	esi, 16					; 00000010H
	movzx	ecx, di
	or	esi, ecx
; Line 179
	shl	eax, 16					; 00000010H
	pop	edi
	mov	DWORD PTR [edx], esi
	movzx	ecx, bp
	pop	esi
	or	eax, ecx
	pop	ebp
	mov	DWORD PTR [edx+4], eax
	pop	ebx
; Line 181
	add	esp, 8
	ret	0
_RC2_encrypt ENDP
_TEXT	ENDS
END
