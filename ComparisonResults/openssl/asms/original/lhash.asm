; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_lh_version
CONST	SEGMENT
_lh_version DB	'lhash part of OpenSSL 1.0.2h  3 May 2016', 00H
CONST	ENDS
PUBLIC	_lh_new
PUBLIC	_lh_free
PUBLIC	_lh_insert
PUBLIC	_lh_delete
PUBLIC	_lh_retrieve
PUBLIC	_lh_doall
PUBLIC	_lh_doall_arg
PUBLIC	_lh_strhash
PUBLIC	_lh_num_items
PUBLIC	??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@ ; `string'
EXTRN	_strcmp:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_CRYPTO_realloc:PROC
;	COMDAT ??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@
CONST	SEGMENT
??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@ DB '.\crypto\lhash\lh'
	DB	'ash.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _doall_util_fn
_TEXT	SEGMENT
_lh$ = 8						; size = 4
_use_arg$ = 12						; size = 4
_func$ = 16						; size = 4
_func_arg$ = 20						; size = 4
_arg$ = 24						; size = 4
_doall_util_fn PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 266
	mov	eax, DWORD PTR _lh$[esp-4]
	test	eax, eax
	je	SHORT $LN3@doall_util
; Line 273
	push	edi
	mov	edi, DWORD PTR [eax+12]
	sub	edi, 1
	js	SHORT $LN19@doall_util
	push	ebx
	mov	ebx, DWORD PTR _use_arg$[esp+4]
	push	ebp
	mov	ebp, DWORD PTR _arg$[esp+8]
	push	esi
	npad	4
$LL4@doall_util:
; Line 274
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+edi*4]
; Line 275
	test	eax, eax
	je	SHORT $LN2@doall_util
	npad	7
$LL5@doall_util:
; Line 283
	mov	esi, DWORD PTR [eax+4]
; Line 284
	test	ebx, ebx
	je	SHORT $LN8@doall_util
; Line 285
	push	ebp
	push	DWORD PTR [eax]
	call	DWORD PTR _func_arg$[esp+20]
	add	esp, 8
	jmp	SHORT $LN9@doall_util
$LN8@doall_util:
; Line 287
	push	DWORD PTR [eax]
	call	DWORD PTR _func$[esp+16]
	add	esp, 4
$LN9@doall_util:
; Line 288
	mov	eax, esi
	test	esi, esi
	jne	SHORT $LL5@doall_util
$LN2@doall_util:
; Line 273
	sub	edi, 1
	mov	eax, DWORD PTR _lh$[esp+12]
	jns	SHORT $LL4@doall_util
	pop	esi
	pop	ebp
	pop	ebx
$LN19@doall_util:
	pop	edi
$LN3@doall_util:
; Line 291
	ret	0
_doall_util_fn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _getrn
_TEXT	SEGMENT
_cf$1$ = 8						; size = 4
_lh$ = 8						; size = 4
_data$ = 12						; size = 4
_rhash$ = 16						; size = 4
_getrn	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 391
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 396
	mov	edi, DWORD PTR _lh$[esp+12]
	push	DWORD PTR _data$[esp+12]
	mov	eax, DWORD PTR [edi+8]
	call	eax
; Line 398
	mov	ecx, DWORD PTR _rhash$[esp+16]
	mov	ebp, eax
	inc	DWORD PTR [edi+56]
; Line 400
	xor	edx, edx
	add	esp, 4
	mov	DWORD PTR [ecx], ebp
	div	DWORD PTR [edi+24]
; Line 401
	cmp	edx, DWORD PTR [edi+20]
	jae	SHORT $LN5@getrn
; Line 402
	mov	eax, ebp
	xor	edx, edx
	div	DWORD PTR [edi+16]
$LN5@getrn:
; Line 405
	mov	eax, DWORD PTR [edi]
; Line 406
	mov	esi, DWORD PTR [eax+edx*4]
	lea	ebx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR _cf$1$[esp+12], ecx
	test	esi, esi
	je	SHORT $LN15@getrn
$LL4@getrn:
; Line 408
	inc	DWORD PTR [edi+88]
; Line 409
	cmp	DWORD PTR [esi+8], ebp
	jne	SHORT $LN16@getrn
; Line 415
	push	DWORD PTR _data$[esp+12]
	inc	DWORD PTR [edi+60]
	push	DWORD PTR [esi]
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@getrn
	mov	ecx, DWORD PTR _cf$1$[esp+12]
$LN16@getrn:
; Line 417
	add	esi, 4
	mov	ebx, esi
	mov	esi, DWORD PTR [esi]
	test	esi, esi
	jne	SHORT $LL4@getrn
$LN15@getrn:
	pop	edi
	pop	esi
	pop	ebp
; Line 419
	mov	eax, ebx
	pop	ebx
; Line 420
	ret	0
_getrn	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _contract
_TEXT	SEGMENT
_lh$ = 8						; size = 4
_contract PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 355
	push	esi
; Line 358
	mov	esi, DWORD PTR _lh$[esp]
	push	edi
	mov	ecx, DWORD PTR [esi+20]
	add	ecx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [eax+ecx*4-4]
; Line 359
	mov	DWORD PTR [eax+ecx*4-4], 0
; Line 360
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	jne	SHORT $LN4@contract
; Line 361
	mov	eax, DWORD PTR [esi+24]
	push	363					; 0000016bH
	push	OFFSET ??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@
	shl	eax, 2
	push	eax
	push	DWORD PTR [esi]
	call	_CRYPTO_realloc
	mov	ecx, eax
	add	esp, 16					; 00000010H
; Line 364
	test	ecx, ecx
	jne	SHORT $LN6@contract
; Line 366
	inc	DWORD PTR [esi+92]
	pop	edi
	pop	esi
; Line 388
	ret	0
$LN6@contract:
; Line 369
	inc	DWORD PTR [esi+52]
; Line 370
	shr	DWORD PTR [esi+16], 1
; Line 371
	shr	DWORD PTR [esi+24], 1
	mov	eax, DWORD PTR [esi+24]
; Line 373
	mov	DWORD PTR [esi], ecx
$LN4@contract:
; Line 377
	dec	DWORD PTR [esi+12]
	dec	eax
; Line 378
	inc	DWORD PTR [esi+48]
; Line 380
	mov	ecx, eax
	mov	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [eax]
; Line 381
	test	ecx, ecx
	jne	SHORT $LN10@contract
; Line 382
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	esi
; Line 388
	ret	0
$LN10@contract:
; Line 384
	cmp	DWORD PTR [ecx+4], 0
	lea	eax, DWORD PTR [ecx+4]
	je	SHORT $LN3@contract
	npad	5
$LL2@contract:
; Line 385
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	lea	eax, DWORD PTR [ecx+4]
	jne	SHORT $LL2@contract
$LN3@contract:
; Line 386
	mov	DWORD PTR [ecx+4], edi
	pop	edi
	pop	esi
; Line 388
	ret	0
_contract ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _expand
_TEXT	SEGMENT
_nni$1$ = 8						; size = 4
_lh$ = 8						; size = 4
_expand	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 304
	push	ebx
	push	ebp
	push	esi
; Line 309
	mov	esi, DWORD PTR _lh$[esp+8]
	push	edi
; Line 311
	mov	ebp, DWORD PTR [esi+20]
; Line 312
	mov	edx, DWORD PTR [esi]
	inc	DWORD PTR [esi+12]
	lea	ecx, DWORD PTR [edx+ebp*4]
	inc	DWORD PTR [esi+40]
	lea	eax, DWORD PTR [ebp+1]
	mov	DWORD PTR [esi+20], eax
; Line 313
	mov	eax, DWORD PTR [esi+24]
	add	eax, ebp
	lea	ebx, DWORD PTR [edx+eax*4]
; Line 314
	mov	DWORD PTR [ebx], 0
; Line 317
	mov	edi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR _nni$1$[esp+12], eax
	test	edi, edi
	je	SHORT $LN3@expand
$LL2@expand:
; Line 324
	mov	eax, DWORD PTR [edi+8]
	xor	edx, edx
	div	DWORD PTR _nni$1$[esp+12]
	cmp	edx, ebp
	je	SHORT $LN8@expand
; Line 325
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], eax
; Line 326
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edi+4], eax
; Line 327
	mov	DWORD PTR [ebx], edi
; Line 328
	jmp	SHORT $LN9@expand
$LN8@expand:
; Line 329
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 4
$LN9@expand:
; Line 330
	mov	edi, DWORD PTR [ecx]
	test	edi, edi
	jne	SHORT $LL2@expand
$LN3@expand:
; Line 333
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [esi+24]
	jb	SHORT $LN10@expand
; Line 334
	mov	ebx, DWORD PTR [esi+16]
	add	ebx, ebx
; Line 335
	push	336					; 00000150H
	push	OFFSET ??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@
	lea	eax, DWORD PTR [ebx*4]
	push	eax
	push	DWORD PTR [esi]
	call	_CRYPTO_realloc
	mov	edx, eax
	add	esp, 16					; 00000010H
; Line 337
	test	edx, edx
	jne	SHORT $LN11@expand
; Line 339
	inc	DWORD PTR [esi+92]
	pop	edi
; Line 349
	mov	DWORD PTR [esi+20], eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 352
	ret	0
$LN11@expand:
; Line 344
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	jae	SHORT $LN7@expand
	mov	ecx, ebx
	lea	edi, DWORD PTR [edx+eax*4]
	sub	ecx, eax
	xor	eax, eax
	rep stosd
$LN7@expand:
; Line 346
	mov	eax, DWORD PTR [esi+16]
; Line 348
	inc	DWORD PTR [esi+44]
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+16], ebx
; Line 350
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+20], 0
$LN10@expand:
; Line 352
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_expand	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_num_items
_TEXT	SEGMENT
_lh$ = 8						; size = 4
_lh_num_items PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 457
	mov	eax, DWORD PTR _lh$[esp-4]
	test	eax, eax
	je	SHORT $LN3@lh_num_ite
	mov	eax, DWORD PTR [eax+36]
; Line 458
	ret	0
$LN3@lh_num_ite:
; Line 457
	xor	eax, eax
; Line 458
	ret	0
_lh_num_items ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_strhash
_TEXT	SEGMENT
_c$ = 8							; size = 4
_lh_strhash PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 428
	push	esi
; Line 434
	mov	esi, DWORD PTR _c$[esp]
	xor	edx, edx
	test	esi, esi
	je	SHORT $LN5@lh_strhash
	mov	al, BYTE PTR [esi]
	test	al, al
	je	SHORT $LN5@lh_strhash
; Line 442
	push	edi
	mov	edi, 256				; 00000100H
$LL2@lh_strhash:
; Line 444
	movsx	eax, al
; Line 450
	lea	esi, DWORD PTR [esi+1]
	or	eax, edi
	add	edi, 256				; 00000100H
	mov	ecx, eax
	shr	ecx, 2
	xor	ecx, eax
	imul	eax, eax
	and	ecx, 15					; 0000000fH
	rol	edx, cl
	xor	edx, eax
	mov	al, BYTE PTR [esi]
	test	al, al
	jne	SHORT $LL2@lh_strhash
; Line 452
	mov	eax, edx
	shr	eax, 16					; 00000010H
	pop	edi
	xor	eax, edx
	pop	esi
; Line 453
	ret	0
$LN5@lh_strhash:
; Line 435
	xor	eax, eax
	pop	esi
; Line 453
	ret	0
_lh_strhash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_doall_arg
_TEXT	SEGMENT
_lh$ = 8						; size = 4
_func$ = 12						; size = 4
_arg$ = 16						; size = 4
_lh_doall_arg PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 300
	push	DWORD PTR _arg$[esp-4]
	push	DWORD PTR _func$[esp]
	push	0
	push	1
	push	DWORD PTR _lh$[esp+12]
	call	_doall_util_fn
	add	esp, 20					; 00000014H
; Line 301
	ret	0
_lh_doall_arg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_doall
_TEXT	SEGMENT
_lh$ = 8						; size = 4
_func$ = 12						; size = 4
_lh_doall PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 295
	push	0
	push	0
	push	DWORD PTR _func$[esp+4]
	push	0
	push	DWORD PTR _lh$[esp+12]
	call	_doall_util_fn
	add	esp, 20					; 00000014H
; Line 296
	ret	0
_lh_doall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_retrieve
_TEXT	SEGMENT
_hash$ = 8						; size = 4
_lh$ = 8						; size = 4
_data$ = 12						; size = 4
_lh_retrieve PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 242
	push	esi
; Line 247
	mov	esi, DWORD PTR _lh$[esp]
; Line 248
	lea	eax, DWORD PTR _hash$[esp]
	push	eax
	push	DWORD PTR _data$[esp+4]
	push	esi
	mov	DWORD PTR [esi+92], 0
	call	_getrn
	add	esp, 12					; 0000000cH
; Line 250
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@lh_retriev
; Line 251
	inc	DWORD PTR [esi+84]
	pop	esi
; Line 258
	ret	0
$LN2@lh_retriev:
; Line 254
	mov	eax, DWORD PTR [eax]
; Line 255
	inc	DWORD PTR [esi+80]
	pop	esi
; Line 258
	ret	0
_lh_retrieve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_delete
_TEXT	SEGMENT
_hash$ = 8						; size = 4
_lh$ = 8						; size = 4
_data$ = 12						; size = 4
_lh_delete PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 214
	push	esi
; Line 219
	mov	esi, DWORD PTR _lh$[esp]
; Line 220
	lea	eax, DWORD PTR _hash$[esp]
	push	eax
	push	DWORD PTR _data$[esp+4]
	push	esi
	mov	DWORD PTR [esi+92], 0
	call	_getrn
	mov	edx, eax
	add	esp, 12					; 0000000cH
; Line 222
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	jne	SHORT $LN2@lh_delete
; Line 223
	inc	DWORD PTR [esi+76]
; Line 224
	xor	eax, eax
	pop	esi
; Line 239
	ret	0
$LN2@lh_delete:
; Line 227
	mov	eax, DWORD PTR [ecx+4]
	push	edi
	mov	DWORD PTR [edx], eax
; Line 228
	mov	edi, DWORD PTR [ecx]
; Line 229
	push	ecx
	call	_CRYPTO_free
; Line 233
	dec	DWORD PTR [esi+36]
	add	esp, 4
	inc	DWORD PTR [esi+72]
; Line 234
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+36]
	cmp	ecx, 16					; 00000010H
	jbe	SHORT $LN4@lh_delete
	shl	eax, 8
	xor	edx, edx
	div	ecx
	cmp	DWORD PTR [esi+32], eax
	jb	SHORT $LN4@lh_delete
; Line 236
	push	esi
	call	_contract
	add	esp, 4
$LN4@lh_delete:
; Line 238
	mov	eax, edi
	pop	edi
	pop	esi
; Line 239
	ret	0
_lh_delete ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_insert
_TEXT	SEGMENT
_hash$ = 8						; size = 4
_lh$ = 8						; size = 4
_data$ = 12						; size = 4
_lh_insert PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 179
	push	ebx
	push	esi
; Line 184
	mov	esi, DWORD PTR _lh$[esp+4]
; Line 185
	xor	edx, edx
	push	edi
	mov	eax, DWORD PTR [esi+36]
	shl	eax, 8
	div	DWORD PTR [esi+12]
	mov	DWORD PTR [esi+92], 0
	cmp	DWORD PTR [esi+28], eax
	ja	SHORT $LN2@lh_insert
; Line 186
	push	esi
	call	_expand
	add	esp, 4
$LN2@lh_insert:
; Line 188
	mov	edi, DWORD PTR _data$[esp+8]
	lea	eax, DWORD PTR _hash$[esp+8]
	push	eax
	push	edi
	push	esi
	call	_getrn
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 190
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	jne	SHORT $LN3@lh_insert
; Line 191
	push	191					; 000000bfH
	push	OFFSET ??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@
	push	12					; 0000000cH
	call	_CRYPTO_malloc
	mov	ecx, eax
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	jne	SHORT $LN5@lh_insert
; Line 192
	inc	DWORD PTR [esi+92]
	pop	edi
	pop	esi
	pop	ebx
; Line 211
	ret	0
$LN5@lh_insert:
; Line 198
	mov	eax, DWORD PTR _hash$[esp+8]
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [ecx+8], eax
; Line 201
	xor	eax, eax
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ebx], ecx
; Line 202
	inc	DWORD PTR [esi+64]
; Line 203
	inc	DWORD PTR [esi+36]
	pop	edi
	pop	esi
	pop	ebx
; Line 211
	ret	0
$LN3@lh_insert:
; Line 206
	mov	eax, DWORD PTR [ecx]
; Line 207
	mov	DWORD PTR [ecx], edi
; Line 208
	inc	DWORD PTR [esi+68]
	pop	edi
	pop	esi
	pop	ebx
; Line 211
	ret	0
_lh_insert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_free
_TEXT	SEGMENT
_lh$ = 8						; size = 4
_lh_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 159
	push	ebx
; Line 163
	mov	ebx, DWORD PTR _lh$[esp]
	test	ebx, ebx
	je	SHORT $LN1@lh_free
; Line 166
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [ebx+12], edi
	jbe	SHORT $LN3@lh_free
	push	esi
$LL4@lh_free:
; Line 167
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+edi*4]
; Line 168
	test	eax, eax
	je	SHORT $LN2@lh_free
	npad	5
$LL5@lh_free:
; Line 169
	mov	esi, DWORD PTR [eax+4]
; Line 170
	push	eax
	call	_CRYPTO_free
	add	esp, 4
; Line 171
	mov	eax, esi
	test	esi, esi
	jne	SHORT $LL5@lh_free
$LN2@lh_free:
; Line 166
	inc	edi
	cmp	edi, DWORD PTR [ebx+12]
	jb	SHORT $LL4@lh_free
	pop	esi
$LN3@lh_free:
; Line 174
	push	DWORD PTR [ebx]
	call	_CRYPTO_free
; Line 175
	push	ebx
	call	_CRYPTO_free
	add	esp, 8
	pop	edi
$LN1@lh_free:
	pop	ebx
; Line 176
	ret	0
_lh_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _lh_new
_TEXT	SEGMENT
_h$ = 8							; size = 4
_c$ = 12						; size = 4
_lh_new	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\lhash\lhash.c
; Line 116
	push	esi
; Line 120
	push	120					; 00000078H
	push	OFFSET ??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@
	push	96					; 00000060H
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $err0$21
; Line 122
	push	122					; 0000007aH
	push	OFFSET ??_C@_0BH@ENNIJDED@?4?2crypto?2lhash?2lhash?4c?$AA@
	push	64					; 00000040H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
	test	eax, eax
	jne	SHORT $LN6@lh_new
$err1$22:
; Line 153
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$err0$21:
; Line 155
	xor	eax, eax
	pop	esi
; Line 156
	ret	0
$LN6@lh_new:
	lea	ecx, DWORD PTR [eax+60]
	cmp	eax, esi
	ja	SHORT $LN12@lh_new
	cmp	ecx, esi
	jb	SHORT $LN12@lh_new
; Line 125
	xor	ecx, ecx
	npad	7
$LL18@lh_new:
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx+eax], 0
	add	ecx, 4
	cmp	ecx, 64					; 00000040H
	jl	SHORT $LL18@lh_new
; Line 124
	jmp	SHORT $LN3@lh_new
$LN12@lh_new:
	xorps	xmm0, xmm0
; Line 125
	movups	XMMWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax+16], xmm0
	movups	XMMWORD PTR [eax+32], xmm0
	movups	XMMWORD PTR [eax+48], xmm0
$LN3@lh_new:
; Line 126
	mov	eax, DWORD PTR _c$[esp]
	mov	ecx, OFFSET _strcmp
	test	eax, eax
; Line 128
	mov	DWORD PTR [esi+12], 8
; Line 129
	mov	DWORD PTR [esi+16], 16			; 00000010H
	cmove	eax, ecx
; Line 130
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+4], eax
	mov	ecx, OFFSET _lh_strhash
	mov	eax, DWORD PTR _h$[esp]
	test	eax, eax
; Line 131
	mov	DWORD PTR [esi+24], 8
	cmove	eax, ecx
; Line 132
	mov	DWORD PTR [esi+28], 512			; 00000200H
	mov	DWORD PTR [esi+8], eax
; Line 151
	mov	eax, esi
	mov	DWORD PTR [esi+32], 256			; 00000100H
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+44], 0
	mov	DWORD PTR [esi+48], 0
	mov	DWORD PTR [esi+52], 0
	mov	DWORD PTR [esi+56], 0
	mov	DWORD PTR [esi+60], 0
	mov	DWORD PTR [esi+64], 0
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+72], 0
	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR [esi+80], 0
	mov	DWORD PTR [esi+84], 0
	mov	DWORD PTR [esi+88], 0
	mov	DWORD PTR [esi+92], 0
	pop	esi
; Line 156
	ret	0
_lh_new	ENDP
_TEXT	ENDS
END
