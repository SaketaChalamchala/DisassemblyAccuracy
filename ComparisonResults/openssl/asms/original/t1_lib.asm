; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_tls1_version_str
PUBLIC	??_C@_0BA@OOFGCNEE@client?5finished?$AA@	; `string'
PUBLIC	??_C@_0BA@MHGDKHGN@server?5finished?$AA@	; `string'
PUBLIC	_TLSv1_enc_data
PUBLIC	_TLSv1_1_enc_data
PUBLIC	_TLSv1_2_enc_data
EXTRN	_tls1_change_cipher_state:PROC
EXTRN	_tls1_setup_key_block:PROC
EXTRN	_tls1_enc:PROC
EXTRN	_tls1_final_finish_mac:PROC
EXTRN	_tls1_cert_verify_mac:PROC
EXTRN	_tls1_mac:PROC
EXTRN	_tls1_generate_master_secret:PROC
EXTRN	_tls1_export_keying_material:PROC
EXTRN	_tls1_alert_code:PROC
EXTRN	_ssl3_set_handshake_header:PROC
EXTRN	_ssl3_handshake_write:PROC
_DATA	SEGMENT
_nid_list DD	02d1H
	DD	02d2H
	DD	02d3H
	DD	02d4H
	DD	02d5H
	DD	02d6H
	DD	02d7H
	DD	02d8H
	DD	02d9H
	DD	02daH
	DD	02dbH
	DD	02dcH
	DD	02ddH
	DD	02deH
	DD	02c4H
	DD	02c5H
	DD	02c6H
	DD	02c7H
	DD	0199H
	DD	02c8H
	DD	02c9H
	DD	02caH
	DD	019fH
	DD	02cbH
	DD	02ccH
	DD	039fH
	DD	03a3H
	DD	03a5H
_tls12_sigalgs DB 06H
	DB	01H
	DB	06H
	DB	02H
	DB	06H
	DB	03H
	DB	05H
	DB	01H
	DB	05H
	DB	02H
	DB	05H
	DB	03H
	DB	04H
	DB	01H
	DB	04H
	DB	02H
	DB	04H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	ORG $+2
_suiteb_sigalgs DB 04H
	DB	03H
	DB	05H
	DB	03H
_tls12_md DD	04H
	DD	01H
	DD	040H
	DD	02H
	DD	02a3H
	DD	03H
	DD	02a0H
	DD	04H
	DD	02a1H
	DD	05H
	DD	02a2H
	DD	06H
_tls12_sig DD	06H
	DD	01H
	DD	074H
	DD	02H
	DD	0198H
	DD	03H
	ORG $+4
_TLSv1_enc_data DD FLAT:_tls1_enc
	DD	FLAT:_tls1_mac
	DD	FLAT:_tls1_setup_key_block
	DD	FLAT:_tls1_generate_master_secret
	DD	FLAT:_tls1_change_cipher_state
	DD	FLAT:_tls1_final_finish_mac
	DD	0cH
	DD	FLAT:_tls1_cert_verify_mac
	DD	FLAT:??_C@_0BA@OOFGCNEE@client?5finished?$AA@
	DD	0fH
	DD	FLAT:??_C@_0BA@MHGDKHGN@server?5finished?$AA@
	DD	0fH
	DD	FLAT:_tls1_alert_code
	DD	FLAT:_tls1_export_keying_material
	DD	00H
	DD	04H
	DD	FLAT:_ssl3_set_handshake_header
	DD	FLAT:_ssl3_handshake_write
_TLSv1_1_enc_data DD FLAT:_tls1_enc
	DD	FLAT:_tls1_mac
	DD	FLAT:_tls1_setup_key_block
	DD	FLAT:_tls1_generate_master_secret
	DD	FLAT:_tls1_change_cipher_state
	DD	FLAT:_tls1_final_finish_mac
	DD	0cH
	DD	FLAT:_tls1_cert_verify_mac
	DD	FLAT:??_C@_0BA@OOFGCNEE@client?5finished?$AA@
	DD	0fH
	DD	FLAT:??_C@_0BA@MHGDKHGN@server?5finished?$AA@
	DD	0fH
	DD	FLAT:_tls1_alert_code
	DD	FLAT:_tls1_export_keying_material
	DD	01H
	DD	04H
	DD	FLAT:_ssl3_set_handshake_header
	DD	FLAT:_ssl3_handshake_write
_TLSv1_2_enc_data DD FLAT:_tls1_enc
	DD	FLAT:_tls1_mac
	DD	FLAT:_tls1_setup_key_block
	DD	FLAT:_tls1_generate_master_secret
	DD	FLAT:_tls1_change_cipher_state
	DD	FLAT:_tls1_final_finish_mac
	DD	0cH
	DD	FLAT:_tls1_cert_verify_mac
	DD	FLAT:??_C@_0BA@OOFGCNEE@client?5finished?$AA@
	DD	0fH
	DD	FLAT:??_C@_0BA@MHGDKHGN@server?5finished?$AA@
	DD	0fH
	DD	FLAT:_tls1_alert_code
	DD	FLAT:_tls1_export_keying_material
	DD	017H
	DD	04H
	DD	FLAT:_ssl3_set_handshake_header
	DD	FLAT:_ssl3_handshake_write
_DATA	ENDS
;	COMDAT ??_C@_0BA@MHGDKHGN@server?5finished?$AA@
CONST	SEGMENT
??_C@_0BA@MHGDKHGN@server?5finished?$AA@ DB 'server finished', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OOFGCNEE@client?5finished?$AA@
CONST	SEGMENT
??_C@_0BA@OOFGCNEE@client?5finished?$AA@ DB 'client finished', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
?kSafariExtensionsBlock@?1??ssl_check_for_safari@@9@9 DB 00H ; `ssl_check_for_safari'::`2'::kSafariExtensionsBlock
	DB	0aH
	DB	00H
	DB	08H
	DB	00H
	DB	06H
	DB	00H
	DB	017H
	DB	00H
	DB	018H
	DB	00H
	DB	019H
	DB	00H
	DB	0bH
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	ORG $+2
?kSafariTLS12ExtensionsBlock@?1??ssl_check_for_safari@@9@9 DB 00H ; `ssl_check_for_safari'::`2'::kSafariTLS12ExtensionsBlock
	DB	0dH
	DB	00H
	DB	0cH
	DB	00H
	DB	0aH
	DB	05H
	DB	01H
	DB	04H
	DB	01H
	DB	02H
	DB	01H
	DB	04H
	DB	03H
	DB	02H
	DB	03H
_tls1_version_str DB 'TLSv1 part of OpenSSL 1.0.2h  3 May 2016', 00H
	ORG $+3
_ecformats_default DB 00H
	DB	01H
	DB	02H
	ORG $+1
_eccurves_auto DB 00H
	DB	017H
	DB	00H
	DB	019H
	DB	00H
	DB	01cH
	DB	00H
	DB	01bH
	DB	00H
	DB	018H
	DB	00H
	DB	01aH
	DB	00H
	DB	016H
	DB	00H
	DB	0eH
	DB	00H
	DB	0dH
	DB	00H
	DB	0bH
	DB	00H
	DB	0cH
	DB	00H
	DB	09H
	DB	00H
	DB	0aH
	ORG $+2
_eccurves_all DB 00H
	DB	017H
	DB	00H
	DB	019H
	DB	00H
	DB	01cH
	DB	00H
	DB	01bH
	DB	00H
	DB	018H
	DB	00H
	DB	01aH
	DB	00H
	DB	016H
	DB	00H
	DB	0eH
	DB	00H
	DB	0dH
	DB	00H
	DB	0bH
	DB	00H
	DB	0cH
	DB	00H
	DB	09H
	DB	00H
	DB	0aH
	DB	00H
	DB	014H
	DB	00H
	DB	015H
	DB	00H
	DB	012H
	DB	00H
	DB	013H
	DB	00H
	DB	0fH
	DB	00H
	DB	010H
	DB	00H
	DB	011H
	DB	00H
	DB	08H
	DB	00H
	DB	06H
	DB	00H
	DB	07H
	DB	00H
	DB	04H
	DB	00H
	DB	05H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	03H
_suiteb_curves DB 00H
	DB	017H
	DB	00H
	DB	018H
CONST	ENDS
PUBLIC	_SSL_get_sigalgs
PUBLIC	_SSL_get_shared_sigalgs
PUBLIC	_SSL_check_chain
PUBLIC	_tls1_default_timeout
PUBLIC	_tls1_new
PUBLIC	_tls1_free
PUBLIC	_tls1_clear
PUBLIC	_tls1_ec_curve_id2nid
PUBLIC	_tls1_ec_nid2curve_id
PUBLIC	_tls1_check_curve
PUBLIC	_tls1_shared_curve
PUBLIC	_tls1_set_curves
PUBLIC	_tls1_set_curves_list
PUBLIC	_tls1_check_ec_tmp_key
PUBLIC	_ssl_add_clienthello_tlsext
PUBLIC	_ssl_add_serverhello_tlsext
PUBLIC	_ssl_parse_clienthello_tlsext
PUBLIC	_tls1_set_server_sigalgs
PUBLIC	_ssl_check_clienthello_tlsext_late
PUBLIC	_ssl_parse_serverhello_tlsext
PUBLIC	_ssl_prepare_clienthello_tlsext
PUBLIC	_ssl_prepare_serverhello_tlsext
PUBLIC	_tls1_heartbeat
PUBLIC	_tls1_process_heartbeat
PUBLIC	_tls1_process_ticket
PUBLIC	_tls12_get_sigandhash
PUBLIC	_tls12_get_sigid
PUBLIC	_tls12_get_hash
PUBLIC	_tls1_set_sigalgs_list
PUBLIC	_tls1_set_sigalgs
PUBLIC	_tls1_check_chain
PUBLIC	_tls1_set_cert_validity
PUBLIC	_tls1_save_sigalgs
PUBLIC	_tls1_process_sigalgs
PUBLIC	_tls12_get_psigalgs
PUBLIC	_tls12_check_peer_sigalg
PUBLIC	_ssl_set_client_disabled
PUBLIC	_ssl_check_serverhello_tlsext
PUBLIC	??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@	; `string'
PUBLIC	??_C@_03DICHAJGH@RSA?$AA@			; `string'
PUBLIC	??_C@_03ENFFABCE@DSA?$AA@			; `string'
PUBLIC	??_C@_05JNBFMGNN@ECDSA?$AA@			; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_sk_new_null:PROC
EXTRN	_sk_pop_free:PROC
EXTRN	_sk_push:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_CRYPTO_memcmp:PROC
EXTRN	_OBJ_ln2nid:PROC
EXTRN	_OBJ_sn2nid:PROC
EXTRN	_OBJ_find_sigid_by_algs:PROC
EXTRN	_EVP_MD_type:PROC
EXTRN	_EVP_MD_size:PROC
EXTRN	_EVP_CIPHER_CTX_iv_length:PROC
EXTRN	_EVP_DecryptInit_ex:PROC
EXTRN	_EVP_DecryptUpdate:PROC
EXTRN	_EVP_DecryptFinal:PROC
EXTRN	_EVP_CIPHER_CTX_init:PROC
EXTRN	_EVP_CIPHER_CTX_cleanup:PROC
EXTRN	_EVP_md5:PROC
EXTRN	_EVP_sha1:PROC
EXTRN	_EVP_sha224:PROC
EXTRN	_EVP_sha256:PROC
EXTRN	_EVP_sha384:PROC
EXTRN	_EVP_sha512:PROC
EXTRN	_EVP_aes_128_cbc:PROC
EXTRN	_EVP_PKEY_free:PROC
EXTRN	_HMAC_CTX_init:PROC
EXTRN	_HMAC_CTX_cleanup:PROC
EXTRN	_HMAC_Init_ex:PROC
EXTRN	_HMAC_Update:PROC
EXTRN	_HMAC_Final:PROC
EXTRN	_BUF_strdup:PROC
EXTRN	_EC_GROUP_method_of:PROC
EXTRN	_EC_METHOD_get_field_type:PROC
EXTRN	_EC_GROUP_get_curve_name:PROC
EXTRN	_EC_curve_nist2nid:PROC
EXTRN	_EC_KEY_get0_group:PROC
EXTRN	_EC_KEY_get0_public_key:PROC
EXTRN	_EC_KEY_get_conv_form:PROC
EXTRN	_X509_EXTENSION_free:PROC
EXTRN	_d2i_X509_EXTENSIONS:PROC
EXTRN	_i2d_X509_EXTENSIONS:PROC
EXTRN	_X509_get_signature_nid:PROC
EXTRN	_X509_get_issuer_name:PROC
EXTRN	_X509_get_pubkey:PROC
EXTRN	_X509_certificate_type:PROC
EXTRN	_X509_chain_check_suiteb:PROC
EXTRN	_X509_NAME_cmp:PROC
EXTRN	_CONF_parse_list:PROC
EXTRN	_OCSP_RESPID_free:PROC
EXTRN	_d2i_OCSP_RESPID:PROC
EXTRN	_i2d_OCSP_RESPID:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	_RAND_pseudo_bytes:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ERR_clear_error:PROC
EXTRN	_SSL_get_srtp_profiles:PROC
EXTRN	_d2i_SSL_SESSION:PROC
EXTRN	_SSL_ctrl:PROC
EXTRN	_SSL_get_ciphers:PROC
EXTRN	_SSL_state:PROC
EXTRN	_ssl_cert_set_default_md:PROC
EXTRN	_ssl_get_server_send_pkey:PROC
EXTRN	_ssl_cert_type:PROC
EXTRN	_ssl3_send_alert:PROC
EXTRN	_ssl3_write_bytes:PROC
EXTRN	_ssl3_new:PROC
EXTRN	_ssl3_free:PROC
EXTRN	_ssl3_clear:PROC
EXTRN	_ssl_add_serverhello_renegotiate_ext:PROC
EXTRN	_ssl_parse_serverhello_renegotiate_ext:PROC
EXTRN	_ssl_add_clienthello_renegotiate_ext:PROC
EXTRN	_ssl_parse_clienthello_renegotiate_ext:PROC
EXTRN	_ssl_add_clienthello_use_srtp_ext:PROC
EXTRN	_ssl_parse_clienthello_use_srtp_ext:PROC
EXTRN	_ssl_add_serverhello_use_srtp_ext:PROC
EXTRN	_ssl_parse_serverhello_use_srtp_ext:PROC
EXTRN	_custom_ext_init:PROC
EXTRN	_custom_ext_parse:PROC
EXTRN	_custom_ext_add:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_05JNBFMGNN@ECDSA?$AA@
CONST	SEGMENT
??_C@_05JNBFMGNN@ECDSA?$AA@ DB 'ECDSA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENFFABCE@DSA?$AA@
CONST	SEGMENT
??_C@_03ENFFABCE@DSA?$AA@ DB 'DSA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DICHAJGH@RSA?$AA@
CONST	SEGMENT
??_C@_03DICHAJGH@RSA?$AA@ DB 'RSA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
CONST	SEGMENT
??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@ DB '.\ssl\t1_lib.c', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_check_ca_name
_TEXT	SEGMENT
_names$ = 8						; size = 4
_x$ = 12						; size = 4
_ssl_check_ca_name PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4146
	push	ebx
	push	esi
	push	edi
; Line 4149
	push	DWORD PTR _x$[esp+8]
	call	_X509_get_issuer_name
; Line 4150
	mov	edi, DWORD PTR _names$[esp+12]
	mov	ebx, eax
	push	edi
	xor	esi, esi
	call	_sk_num
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN3@ssl_check_
$LL4@ssl_check_:
; Line 4151
	push	esi
	push	edi
	call	_sk_value
	push	eax
	push	ebx
	call	_X509_NAME_cmp
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@ssl_check_
; Line 4150
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@ssl_check_
$LN3@ssl_check_:
	pop	edi
	pop	esi
; Line 4154
	xor	eax, eax
	pop	ebx
; Line 4155
	ret	0
$LN8@ssl_check_:
	pop	edi
	pop	esi
; Line 4152
	mov	eax, 1
	pop	ebx
; Line 4155
	ret	0
_ssl_check_ca_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_check_sig_alg
_TEXT	SEGMENT
_c$ = 8							; size = 4
_x$ = 12						; size = 4
_default_nid$ = 16					; size = 4
_tls1_check_sig_alg PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4130
	push	edi
; Line 4133
	mov	edi, DWORD PTR _default_nid$[esp]
	cmp	edi, -1
	jne	SHORT $LN5@tls1_check
; Line 4134
	lea	eax, DWORD PTR [edi+2]
	pop	edi
; Line 4142
	ret	0
$LN5@tls1_check:
	push	esi
; Line 4135
	push	DWORD PTR _x$[esp+4]
	call	_X509_get_signature_nid
	add	esp, 4
	mov	esi, eax
; Line 4136
	test	edi, edi
	je	SHORT $LN6@tls1_check
; Line 4137
	xor	eax, eax
	cmp	esi, edi
	pop	esi
	sete	al
	pop	edi
; Line 4142
	ret	0
$LN6@tls1_check:
	mov	eax, DWORD PTR _c$[esp+4]
; Line 4138
	xor	ecx, ecx
	mov	edx, DWORD PTR [eax+320]
	test	edx, edx
	je	SHORT $LN3@tls1_check
; Line 4139
	mov	eax, DWORD PTR [eax+316]
	add	eax, 8
$LL4@tls1_check:
	cmp	esi, DWORD PTR [eax]
	je	SHORT $LN10@tls1_check
; Line 4138
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, edx
	jb	SHORT $LL4@tls1_check
$LN3@tls1_check:
	pop	esi
; Line 4141
	xor	eax, eax
	pop	edi
; Line 4142
	ret	0
$LN10@tls1_check:
	pop	esi
; Line 4140
	mov	eax, 1
	pop	edi
; Line 4142
	ret	0
_tls1_check_sig_alg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _sig_cb
_TEXT	SEGMENT
_etmp$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_elem$ = 8						; size = 4
_len$ = 12						; size = 4
_arg$ = 16						; size = 4
_sig_cb	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4027
	mov	eax, 24					; 00000018H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+24], eax
	mov	eax, DWORD PTR _elem$[esp+20]
	push	ebx
	mov	ebx, DWORD PTR _arg$[esp+24]
; Line 4032
	test	eax, eax
	jne	SHORT $LN5@sig_cb
$LN43@sig_cb:
; Line 4033
	xor	eax, eax
	pop	ebx
; Line 4070
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN5@sig_cb:
; Line 4034
	cmp	DWORD PTR [ebx], 56			; 00000038H
	je	SHORT $LN43@sig_cb
; Line 4036
	push	esi
	mov	esi, DWORD PTR _len$[esp+28]
	cmp	esi, 19					; 00000013H
	jle	SHORT $LN7@sig_cb
; Line 4037
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 4070
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN7@sig_cb:
; Line 4038
	push	esi
	push	eax
	lea	eax, DWORD PTR _etmp$[esp+40]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 4039
	cmp	esi, 20					; 00000014H
	jae	$LN44@sig_cb
; Line 4040
	push	edi
	lea	eax, DWORD PTR _etmp$[esp+36]
	mov	BYTE PTR _etmp$[esp+esi+36], 0
	push	43					; 0000002bH
	push	eax
	call	DWORD PTR __imp__strchr
	mov	edi, eax
	add	esp, 8
; Line 4041
	test	edi, edi
	je	$LN23@sig_cb
; Line 4043
	mov	BYTE PTR [edi], 0
; Line 4044
	inc	edi
; Line 4045
	cmp	BYTE PTR [edi], 0
	je	$LN23@sig_cb
; Line 4048
	mov	ecx, OFFSET ??_C@_03DICHAJGH@RSA?$AA@
	lea	eax, DWORD PTR _etmp$[esp+36]
$LL28@sig_cb:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN29@sig_cb
	test	dl, dl
	je	SHORT $LN30@sig_cb
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN29@sig_cb
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL28@sig_cb
$LN30@sig_cb:
	xor	eax, eax
	jmp	SHORT $LN31@sig_cb
$LN29@sig_cb:
	sbb	eax, eax
	or	eax, 1
$LN31@sig_cb:
	test	eax, eax
	jne	SHORT $LN10@sig_cb
; Line 4049
	lea	esi, DWORD PTR [eax+6]
	jmp	SHORT $LN15@sig_cb
$LN10@sig_cb:
; Line 4050
	mov	ecx, OFFSET ??_C@_03ENFFABCE@DSA?$AA@
	lea	eax, DWORD PTR _etmp$[esp+36]
	npad	5
$LL32@sig_cb:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN33@sig_cb
	test	dl, dl
	je	SHORT $LN34@sig_cb
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN33@sig_cb
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL32@sig_cb
$LN34@sig_cb:
	xor	eax, eax
	jmp	SHORT $LN35@sig_cb
$LN33@sig_cb:
	sbb	eax, eax
	or	eax, 1
$LN35@sig_cb:
	test	eax, eax
	jne	SHORT $LN12@sig_cb
; Line 4051
	lea	esi, DWORD PTR [eax+116]
	jmp	SHORT $LN15@sig_cb
$LN12@sig_cb:
; Line 4052
	mov	ecx, OFFSET ??_C@_05JNBFMGNN@ECDSA?$AA@
	lea	eax, DWORD PTR _etmp$[esp+36]
$LL36@sig_cb:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN37@sig_cb
	test	dl, dl
	je	SHORT $LN38@sig_cb
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN37@sig_cb
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL36@sig_cb
$LN38@sig_cb:
	xor	eax, eax
	jmp	SHORT $LN39@sig_cb
$LN37@sig_cb:
	sbb	eax, eax
	or	eax, 1
$LN39@sig_cb:
	test	eax, eax
	jne	SHORT $LN23@sig_cb
; Line 4053
	mov	esi, 408				; 00000198H
$LN15@sig_cb:
; Line 4057
	push	edi
	call	_OBJ_sn2nid
	mov	edx, eax
	add	esp, 4
; Line 4058
	test	edx, edx
	jne	SHORT $LN17@sig_cb
; Line 4059
	push	edi
	call	_OBJ_ln2nid
	mov	edx, eax
	add	esp, 4
; Line 4060
	test	edx, edx
	je	SHORT $LN23@sig_cb
$LN17@sig_cb:
; Line 4063
	mov	edi, DWORD PTR [ebx]
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN27@sig_cb
	lea	eax, DWORD PTR [ebx+8]
	npad	2
$LL4@sig_cb:
; Line 4064
	cmp	DWORD PTR [eax-4], esi
	jne	SHORT $LN2@sig_cb
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN23@sig_cb
$LN2@sig_cb:
; Line 4063
	add	ecx, 2
	add	eax, 8
	cmp	ecx, edi
	jb	SHORT $LL4@sig_cb
$LN27@sig_cb:
; Line 4067
	mov	DWORD PTR [ebx+edi*4+4], edx
	inc	DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx]
	pop	edi
; Line 4068
	mov	DWORD PTR [ebx+eax*4+4], esi
; Line 4069
	mov	eax, 1
	inc	DWORD PTR [ebx]
	pop	esi
	pop	ebx
; Line 4070
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN23@sig_cb:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN44@sig_cb:
; Line 4039
	call	___report_rangecheckfailure
$LN45@sig_cb:
$LN42@sig_cb:
	int	3
_sig_cb	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_shared_sigalgs
_TEXT	SEGMENT
_pref$1$ = -4						; size = 4
_conf$ = -4						; size = 4
_preflen$1$ = 8						; size = 4
_s$ = 8							; size = 4
_tls1_set_shared_sigalgs PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3677
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
; Line 3682
	mov	ebp, DWORD PTR _s$[esp+8]
	push	esi
	push	edi
	mov	esi, DWORD PTR [ebp+152]
; Line 3683
	mov	ebx, DWORD PTR [esi+56]
; Line 3684
	mov	eax, DWORD PTR [esi+316]
	and	ebx, 196608				; 00030000H
	test	eax, eax
	je	SHORT $LN2@tls1_set_s
; Line 3685
	push	eax
	call	_CRYPTO_free
	add	esp, 4
; Line 3686
	mov	DWORD PTR [esi+316], 0
; Line 3687
	mov	DWORD PTR [esi+320], 0
$LN2@tls1_set_s:
; Line 3690
	cmp	DWORD PTR [ebp+36], 0
	jne	SHORT $LN3@tls1_set_s
	mov	edi, DWORD PTR [esi+308]
	test	edi, edi
	je	SHORT $LN3@tls1_set_s
	test	ebx, ebx
	jne	SHORT $LN3@tls1_set_s
; Line 3692
	mov	ebp, DWORD PTR [esi+312]
	jmp	SHORT $LN6@tls1_set_s
$LN3@tls1_set_s:
; Line 3693
	mov	edi, DWORD PTR [esi+300]
	test	edi, edi
	je	SHORT $LN5@tls1_set_s
	test	ebx, ebx
	jne	SHORT $LN5@tls1_set_s
; Line 3695
	mov	ebp, DWORD PTR [esi+304]
; Line 3696
	jmp	SHORT $LN6@tls1_set_s
$LN5@tls1_set_s:
; Line 3697
	lea	eax, DWORD PTR _conf$[esp+20]
	push	eax
	push	ebp
	call	_tls12_get_psigalgs
	mov	edi, DWORD PTR _conf$[esp+28]
	add	esp, 8
	mov	ebp, eax
$LN6@tls1_set_s:
; Line 3698
	mov	eax, DWORD PTR _s$[esp+16]
	test	DWORD PTR [eax+256], 4194304		; 00400000H
	jne	SHORT $LN9@tls1_set_s
	test	ebx, ebx
	jne	SHORT $LN9@tls1_set_s
; Line 3706
	mov	eax, DWORD PTR [esi+292]
; Line 3707
	mov	ecx, DWORD PTR [esi+296]
	mov	DWORD PTR _pref$1$[esp+20], eax
	jmp	SHORT $LN14@tls1_set_s
$LN9@tls1_set_s:
; Line 3699
	mov	eax, edi
	mov	DWORD PTR _pref$1$[esp+20], edi
; Line 3701
	mov	edi, DWORD PTR [esi+292]
	mov	ecx, ebp
; Line 3702
	mov	ebp, DWORD PTR [esi+296]
$LN14@tls1_set_s:
; Line 3709
	push	ebp
	push	edi
	push	ecx
	push	eax
	push	0
	mov	DWORD PTR _preflen$1$[esp+36], ecx
	call	_tls12_do_shared_sigalgs
	add	esp, 20					; 00000014H
; Line 3710
	test	eax, eax
	je	SHORT $LN10@tls1_set_s
; Line 3711
	push	3711					; 00000e7fH
	shl	eax, 4
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 3712
	test	ebx, ebx
	jne	SHORT $LN12@tls1_set_s
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3721
	pop	ecx
	ret	0
$LN12@tls1_set_s:
; Line 3714
	push	ebp
	push	edi
	push	DWORD PTR _preflen$1$[esp+24]
	push	DWORD PTR _pref$1$[esp+32]
	push	ebx
	call	_tls12_do_shared_sigalgs
	add	esp, 20					; 00000014H
; Line 3715
	jmp	SHORT $LN11@tls1_set_s
$LN10@tls1_set_s:
; Line 3716
	xor	ebx, ebx
$LN11@tls1_set_s:
	pop	edi
; Line 3718
	mov	DWORD PTR [esi+316], ebx
; Line 3719
	mov	DWORD PTR [esi+320], eax
; Line 3720
	mov	eax, 1
	pop	esi
	pop	ebp
	pop	ebx
; Line 3721
	pop	ecx
	ret	0
_tls1_set_shared_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_do_shared_sigalgs
_TEXT	SEGMENT
_nmatch$1$ = -4						; size = 4
_shsig$ = 8						; size = 4
tv415 = 12						; size = 4
_pref$ = 12						; size = 4
_preflen$ = 16						; size = 4
_allow$ = 20						; size = 4
_allowlen$ = 24						; size = 4
_tls12_do_shared_sigalgs PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3648
	mov	eax, 4
	call	__chkstk
; Line 3651
	mov	ecx, DWORD PTR _preflen$[esp]
	push	ebx
	xor	ebx, ebx
	mov	DWORD PTR _nmatch$1$[esp+8], ebx
	push	esi
	mov	esi, DWORD PTR _pref$[esp+8]
	test	ecx, ecx
	je	$LN42@tls12_do_s
; Line 3564
	mov	eax, DWORD PTR _shsig$[esp+8]
	push	ebp
	lea	ebp, DWORD PTR [ecx-1]
	add	eax, 12					; 0000000cH
	shr	ebp, 1
	push	edi
	mov	edi, DWORD PTR _allowlen$[esp+16]
	inc	ebp
	mov	DWORD PTR tv415[esp+16], eax
	npad	7
$LL4@tls12_do_s:
	movzx	eax, BYTE PTR [esi]
	dec	eax
	cmp	eax, 5
	ja	SHORT $LN2@tls12_do_s
	jmp	DWORD PTR $LN48@tls12_do_s[eax*4]
$LN16@tls12_do_s:
; Line 3571
	call	_EVP_md5
	jmp	SHORT $LN13@tls12_do_s
$LN17@tls12_do_s:
; Line 3575
	call	_EVP_sha1
	jmp	SHORT $LN13@tls12_do_s
$LN18@tls12_do_s:
; Line 3579
	call	_EVP_sha224
	jmp	SHORT $LN13@tls12_do_s
$LN19@tls12_do_s:
; Line 3582
	call	_EVP_sha256
	jmp	SHORT $LN13@tls12_do_s
$LN20@tls12_do_s:
; Line 3586
	call	_EVP_sha384
	jmp	SHORT $LN13@tls12_do_s
$LN21@tls12_do_s:
; Line 3589
	call	_EVP_sha512
$LN13@tls12_do_s:
; Line 3653
	test	eax, eax
	je	SHORT $LN2@tls12_do_s
; Line 3599
	mov	bl, BYTE PTR [esi+1]
	movzx	eax, bl
	sub	eax, 1
	je	SHORT $LN27@tls12_do_s
	sub	eax, 1
	je	SHORT $LN27@tls12_do_s
	sub	eax, 1
	jne	SHORT $LN45@tls12_do_s
$LN27@tls12_do_s:
; Line 3657
	mov	eax, DWORD PTR _allow$[esp+16]
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN45@tls12_do_s
; Line 3658
	mov	dl, BYTE PTR [esi]
	npad	3
$LL7@tls12_do_s:
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN5@tls12_do_s
	cmp	bl, BYTE PTR [eax+1]
	je	SHORT $LN33@tls12_do_s
$LN5@tls12_do_s:
; Line 3657
	add	ecx, 2
	add	eax, 2
	cmp	ecx, edi
	jb	SHORT $LL7@tls12_do_s
$LN45@tls12_do_s:
	mov	ebx, DWORD PTR _nmatch$1$[esp+20]
$LN2@tls12_do_s:
; Line 3651
	add	esi, 2
	sub	ebp, 1
	jne	SHORT $LL4@tls12_do_s
	pop	edi
	pop	ebp
$LN42@tls12_do_s:
	pop	esi
; Line 3672
	mov	eax, ebx
	pop	ebx
; Line 3673
	pop	ecx
	ret	0
$LN33@tls12_do_s:
; Line 3660
	mov	ecx, DWORD PTR tv415[esp+16]
	mov	ebx, DWORD PTR _nmatch$1$[esp+20]
	inc	ebx
	mov	DWORD PTR _nmatch$1$[esp+20], ebx
	lea	eax, DWORD PTR [ecx-12]
	test	eax, eax
	je	SHORT $LN2@tls12_do_s
; Line 3661
	mov	BYTE PTR [ecx+1], dl
; Line 3662
	mov	al, BYTE PTR [esi+1]
	mov	BYTE PTR [ecx], al
; Line 3663
	lea	eax, DWORD PTR [ecx-4]
	push	esi
	push	eax
	lea	eax, DWORD PTR [ecx-8]
	push	eax
	lea	eax, DWORD PTR [ecx-12]
	push	eax
	call	_tls1_lookup_sigalg
	add	esp, 16					; 00000010H
; Line 3666
	add	DWORD PTR tv415[esp+16], 16		; 00000010H
	jmp	SHORT $LN2@tls12_do_s
	npad	1
$LN48@tls12_do_s:
; Line 3673
	DD	$LN16@tls12_do_s
	DD	$LN17@tls12_do_s
	DD	$LN18@tls12_do_s
	DD	$LN19@tls12_do_s
	DD	$LN20@tls12_do_s
	DD	$LN21@tls12_do_s
_tls12_do_shared_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_lookup_sigalg
_TEXT	SEGMENT
_phash_nid$ = 8						; size = 4
_psign_nid$ = 12					; size = 4
_psignhash_nid$ = 16					; size = 4
_data$ = 20						; size = 4
_tls1_lookup_sigalg PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3619
	push	ebx
; Line 3621
	mov	ebx, DWORD PTR _phash_nid$[esp]
	xor	edx, edx
	push	ebp
	mov	ebp, DWORD PTR _data$[esp+4]
	push	esi
	mov	esi, DWORD PTR _psignhash_nid$[esp+8]
	push	edi
	mov	edi, DWORD PTR _psign_nid$[esp+12]
	test	ebx, ebx
	jne	SHORT $LN4@tls1_looku
	test	edi, edi
	jne	SHORT $LN35@tls1_looku
	test	esi, esi
	je	SHORT $LN10@tls1_looku
; Line 3623
	jmp	SHORT $LN4@tls1_looku
$LN35@tls1_looku:
	test	esi, esi
	je	SHORT $LN5@tls1_looku
$LN4@tls1_looku:
	movzx	eax, BYTE PTR [ebp]
; Line 3531
	xor	ecx, ecx
	npad	2
$LL16@tls1_looku:
; Line 3532
	cmp	DWORD PTR _tls12_md[ecx*8+4], eax
	je	SHORT $LN27@tls1_looku
; Line 3531
	inc	ecx
	cmp	ecx, 6
	jb	SHORT $LL16@tls1_looku
; Line 3535
	xor	edx, edx
	jmp	SHORT $LN13@tls1_looku
$LN27@tls1_looku:
; Line 3533
	mov	edx, DWORD PTR _tls12_md[ecx*8]
$LN13@tls1_looku:
; Line 3626
	test	ebx, ebx
	je	SHORT $LN5@tls1_looku
; Line 3627
	mov	DWORD PTR [ebx], edx
$LN5@tls1_looku:
; Line 3629
	test	edi, edi
	jne	SHORT $LN7@tls1_looku
	test	esi, esi
	je	SHORT $LN10@tls1_looku
$LN7@tls1_looku:
	movzx	eax, BYTE PTR [ebp+1]
; Line 3531
	xor	ecx, ecx
	npad	2
$LL22@tls1_looku:
; Line 3532
	cmp	DWORD PTR _tls12_sig[ecx*8+4], eax
	je	SHORT $LN28@tls1_looku
; Line 3531
	inc	ecx
	cmp	ecx, 3
	jb	SHORT $LL22@tls1_looku
; Line 3535
	xor	eax, eax
	jmp	SHORT $LN19@tls1_looku
$LN28@tls1_looku:
; Line 3533
	mov	eax, DWORD PTR _tls12_sig[ecx*8]
$LN19@tls1_looku:
; Line 3632
	test	edi, edi
	je	SHORT $LN8@tls1_looku
; Line 3633
	mov	DWORD PTR [edi], eax
$LN8@tls1_looku:
; Line 3635
	test	esi, esi
	je	SHORT $LN10@tls1_looku
; Line 3637
	test	eax, eax
	je	SHORT $LN11@tls1_looku
	test	edx, edx
	je	SHORT $LN11@tls1_looku
	push	eax
	push	edx
	push	esi
	call	_OBJ_find_sigid_by_algs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	SHORT $LN10@tls1_looku
$LN11@tls1_looku:
; Line 3639
	mov	DWORD PTR [esi], 0
$LN10@tls1_looku:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3641
	ret	0
_tls1_lookup_sigalg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_get_pkey_idx
_TEXT	SEGMENT
_sig_alg$ = 8						; size = 1
_tls12_get_pkey_idx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3599
	movzx	eax, BYTE PTR _sig_alg$[esp-4]
	sub	eax, 1
	je	SHORT $LN4@tls12_get_
	sub	eax, 1
	je	SHORT $LN5@tls12_get_
	sub	eax, 1
	je	SHORT $LN6@tls12_get_
; Line 3613
	or	eax, -1
; Line 3614
	ret	0
$LN6@tls12_get_:
; Line 3610
	mov	eax, 5
; Line 3614
	ret	0
$LN5@tls12_get_:
; Line 3606
	mov	eax, 2
; Line 3614
	ret	0
$LN4@tls12_get_:
; Line 3602
	mov	eax, 1
; Line 3614
	ret	0
_tls12_get_pkey_idx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_find_nid
_TEXT	SEGMENT
_id$ = 8						; size = 4
_table$ = 12						; size = 4
_tlen$ = 16						; size = 4
_tls12_find_nid PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3531
	mov	edx, DWORD PTR _tlen$[esp-4]
	xor	eax, eax
	push	esi
	push	edi
	test	edx, edx
	je	SHORT $LN3@tls12_find
	mov	edi, DWORD PTR _table$[esp+4]
	mov	esi, DWORD PTR _id$[esp+4]
	lea	ecx, DWORD PTR [edi+4]
$LL4@tls12_find:
; Line 3532
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN8@tls12_find
; Line 3531
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jb	SHORT $LL4@tls12_find
$LN3@tls12_find:
	pop	edi
; Line 3535
	xor	eax, eax
	pop	esi
; Line 3536
	ret	0
$LN8@tls12_find:
; Line 3533
	mov	eax, DWORD PTR [edi+eax*8]
	pop	edi
	pop	esi
; Line 3536
	ret	0
_tls12_find_nid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_find_id
_TEXT	SEGMENT
_nid$ = 8						; size = 4
_table$ = 12						; size = 4
_tlen$ = 16						; size = 4
_tls12_find_id PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3521
	mov	ecx, DWORD PTR _tlen$[esp-4]
	xor	eax, eax
	push	esi
	test	ecx, ecx
	je	SHORT $LN3@tls12_find
	mov	edx, DWORD PTR _table$[esp]
	mov	esi, DWORD PTR _nid$[esp]
$LL4@tls12_find:
; Line 3522
	cmp	DWORD PTR [edx+eax*8], esi
	je	SHORT $LN8@tls12_find
; Line 3521
	inc	eax
	cmp	eax, ecx
	jb	SHORT $LL4@tls12_find
$LN3@tls12_find:
; Line 3525
	or	eax, -1
	pop	esi
; Line 3526
	ret	0
$LN8@tls12_find:
; Line 3523
	mov	eax, DWORD PTR [edx+eax*8+4]
	pop	esi
; Line 3526
	ret	0
_tls12_find_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_scan_serverhello_tlsext
_TEXT	SEGMENT
_tlsext_servername$1$ = -20				; size = 4
_renegotiate_seen$1$ = -16				; size = 4
_selected$1 = -12					; size = 4
tv771 = -8						; size = 4
tv773 = -4						; size = 4
_selected_len$2 = 8					; size = 1
_s$ = 8							; size = 4
_p$ = 12						; size = 4
tv774 = 16						; size = 4
_d$ = 16						; size = 4
_size$1$ = 20						; size = 4
_n$ = 20						; size = 4
_al$ = 24						; size = 4
_ssl_scan_serverhello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2550
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 2559
	mov	esi, DWORD PTR _s$[esp+28]
	xor	edx, edx
	push	edi
	mov	edi, DWORD PTR _p$[esp+32]
	xor	ebp, ebp
	mov	DWORD PTR _tlsext_servername$1$[esp+36], edx
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR _renegotiate_seen$1$[esp+36], ebp
	mov	edi, DWORD PTR [edi]
	mov	DWORD PTR [eax+1052], edx
; Line 2563
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [esi+320], edx
	mov	eax, DWORD PTR [eax+1060]
	test	eax, eax
	je	SHORT $LN6@ssl_scan_s
; Line 2564
	push	eax
	call	_CRYPTO_free
; Line 2565
	mov	eax, DWORD PTR [esi+88]
	add	esp, 4
	xor	edx, edx
	mov	DWORD PTR [eax+1060], ebp
$LN6@ssl_scan_s:
; Line 2572
	mov	ebx, DWORD PTR _d$[esp+32]
	add	ebx, DWORD PTR _n$[esp+32]
	and	DWORD PTR [esi+388], -4			; fffffffcH
	mov	DWORD PTR tv774[esp+32], ebx
	lea	eax, DWORD PTR [ebx-2]
	cmp	edi, eax
	jae	$LN97@ssl_scan_s
; Line 2575
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	cx, 8
	or	cx, ax
	movzx	eax, cx
; Line 2576
	add	eax, edi
	cmp	eax, ebx
	je	SHORT $LN69@ssl_scan_s
$LN74@ssl_scan_s:
; Line 2577
	mov	eax, DWORD PTR _al$[esp+32]
	mov	DWORD PTR [eax], 50			; 00000032H
$LN88@ssl_scan_s:
; Line 2578
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
$LN69@ssl_scan_s:
	lea	eax, DWORD PTR [ebx-4]
	mov	DWORD PTR tv773[esp+36], eax
; Line 2581
	cmp	edi, eax
	ja	$LN3@ssl_scan_s
	npad	1
$LL2@ssl_scan_s:
; Line 2582
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
	shl	cx, 8
	or	cx, ax
; Line 2583
	movzx	eax, BYTE PTR [edi+3]
	movzx	ebx, cx
	movzx	ecx, BYTE PTR [edi+2]
	add	edi, 4
	shl	cx, 8
	or	cx, ax
	movzx	ecx, cx
; Line 2585
	movzx	ebp, cx
	mov	DWORD PTR _size$1$[esp+32], ecx
	lea	eax, DWORD PTR [edi+ebp]
	mov	DWORD PTR tv771[esp+36], eax
	cmp	eax, DWORD PTR tv774[esp+32]
	ja	$LN102@ssl_scan_s
; Line 2588
	mov	edx, DWORD PTR [esi+280]
	test	edx, edx
	je	SHORT $LN10@ssl_scan_s
; Line 2589
	push	DWORD PTR [esi+284]
	push	ebp
	push	edi
	push	ebx
	push	1
	push	esi
	call	edx
	mov	ecx, DWORD PTR _size$1$[esp+56]
	add	esp, 24					; 00000018H
$LN10@ssl_scan_s:
; Line 2591
	test	bx, bx
	jne	SHORT $LN11@ssl_scan_s
; Line 2592
	cmp	DWORD PTR [esi+288], 0
	je	$LN73@ssl_scan_s
	test	cx, cx
	jne	$LN73@ssl_scan_s
; Line 2596
	mov	edx, 1
	mov	DWORD PTR _tlsext_servername$1$[esp+36], edx
; Line 2597
	jmp	$LN55@ssl_scan_s
$LN11@ssl_scan_s:
; Line 2599
	cmp	ebx, 11					; 0000000bH
	jne	$LN15@ssl_scan_s
; Line 2601
	movzx	ebx, BYTE PTR [edi]
; Line 2603
	lea	eax, DWORD PTR [ebp-1]
	inc	edi
	cmp	ebx, eax
	jne	$LN74@ssl_scan_s
; Line 2607
	cmp	DWORD PTR [esi+108], 0
	jne	$LN100@ssl_scan_s
; Line 2608
	mov	eax, DWORD PTR [esi+192]
	mov	DWORD PTR [eax+212], 0
; Line 2609
	mov	eax, DWORD PTR [esi+192]
	mov	eax, DWORD PTR [eax+216]
	test	eax, eax
	je	SHORT $LN19@ssl_scan_s
; Line 2610
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN19@ssl_scan_s:
; Line 2612
	push	2612					; 00000a34H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [esi+192]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+216], eax
	test	eax, eax
	je	$LN75@ssl_scan_s
; Line 2616
	mov	eax, DWORD PTR [esi+192]
; Line 2618
	push	ebx
	push	edi
	mov	DWORD PTR [eax+212], ebx
	mov	eax, DWORD PTR [esi+192]
	push	DWORD PTR [eax+216]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2629
	jmp	$LN100@ssl_scan_s
$LN15@ssl_scan_s:
; Line 2632
	cmp	ebx, 35					; 00000023H
	jne	SHORT $LN21@ssl_scan_s
; Line 2633
	mov	eax, DWORD PTR [esi+352]
	test	eax, eax
	je	SHORT $LN23@ssl_scan_s
	push	DWORD PTR [esi+356]
	push	ebp
	push	edi
	push	esi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN75@ssl_scan_s
$LN23@ssl_scan_s:
; Line 2641
	push	0
	push	0
	push	32					; 00000020H
	push	esi
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, 16384				; 00004000H
	jne	$LN77@ssl_scan_s
	cmp	WORD PTR _size$1$[esp+32], 0
	ja	$LN77@ssl_scan_s
; Line 2645
	mov	DWORD PTR [esi+320], 1
; Line 2646
	jmp	$LN100@ssl_scan_s
$LN21@ssl_scan_s:
; Line 2679
	cmp	ebx, 5
	jne	SHORT $LN26@ssl_scan_s
; Line 2684
	cmp	DWORD PTR [esi+296], -1
	je	$LN77@ssl_scan_s
	test	cx, cx
	jne	$LN77@ssl_scan_s
; Line 2689
	mov	DWORD PTR [esi+300], 1
; Line 2690
	jmp	$LN100@ssl_scan_s
$LN26@ssl_scan_s:
; Line 2692
	mov	eax, 13172				; 00003374H
	cmp	bx, ax
	jne	$LN30@ssl_scan_s
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+692], 0
	jne	$LN47@ssl_scan_s
; Line 2698
	mov	edx, DWORD PTR [esi+228]
	mov	ebx, DWORD PTR [edx+428]
	test	ebx, ebx
	je	$LN77@ssl_scan_s
; Line 2535
	xor	ecx, ecx
; Line 2537
	test	ebp, ebp
	je	SHORT $LN66@ssl_scan_s
	npad	5
$LL65@ssl_scan_s:
; Line 2538
	mov	al, BYTE PTR [ecx+edi]
	test	al, al
	je	$LN74@ssl_scan_s
; Line 2541
	inc	ecx
	movzx	eax, al
	add	ecx, eax
	cmp	ecx, ebp
	jb	SHORT $LL65@ssl_scan_s
$LN66@ssl_scan_s:
; Line 2544
	cmp	ecx, ebp
	sete	al
; Line 2703
	test	al, al
	je	$LN74@ssl_scan_s
; Line 2710
	push	DWORD PTR [edx+432]
	lea	eax, DWORD PTR _selected_len$2[esp+36]
	push	ebp
	push	edi
	push	eax
	lea	eax, DWORD PTR _selected$1[esp+52]
	push	eax
	push	esi
	call	ebx
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN75@ssl_scan_s
; Line 2715
	movzx	eax, BYTE PTR _selected_len$2[esp+32]
	push	2715					; 00000a9bH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+372], eax
; Line 2716
	test	eax, eax
	je	$LN75@ssl_scan_s
; Line 2720
	movzx	ecx, BYTE PTR _selected_len$2[esp+32]
	push	ecx
	push	DWORD PTR _selected$1[esp+40]
	push	eax
	call	_memcpy
; Line 2721
	mov	al, BYTE PTR _selected_len$2[esp+44]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+376], al
; Line 2722
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+1052], 1
; Line 2723
	jmp	$LN100@ssl_scan_s
$LN30@ssl_scan_s:
; Line 2726
	cmp	ebx, 16					; 00000010H
	jne	$LN36@ssl_scan_s
; Line 2730
	mov	eax, DWORD PTR [esi+152]
	cmp	DWORD PTR [eax+376], 0
	je	$LN77@ssl_scan_s
; Line 2734
	cmp	cx, 4
	jb	$LN74@ssl_scan_s
; Line 2744
	movzx	ecx, BYTE PTR [edi]
; Line 2746
	movzx	eax, BYTE PTR [edi+1]
	shl	ecx, 8
	or	ecx, eax
; Line 2747
	lea	eax, DWORD PTR [ebp-2]
	cmp	ecx, eax
	jne	$LN74@ssl_scan_s
; Line 2751
	movzx	ebx, BYTE PTR [edi+2]
; Line 2752
	lea	eax, DWORD PTR [ebp-3]
	cmp	ebx, eax
	jne	$LN74@ssl_scan_s
; Line 2756
	mov	eax, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+1060]
	test	eax, eax
	je	SHORT $LN42@ssl_scan_s
; Line 2757
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN42@ssl_scan_s:
; Line 2758
	push	2758					; 00000ac6H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [esi+88]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+1060], eax
; Line 2759
	mov	eax, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [eax+1060]
	test	ecx, ecx
	je	$LN75@ssl_scan_s
; Line 2763
	push	ebx
	lea	eax, DWORD PTR [edi+3]
	push	eax
	push	ecx
	call	_memcpy
; Line 2764
	mov	eax, DWORD PTR [esi+88]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [eax+1064], ebx
; Line 2765
	jmp	$LN100@ssl_scan_s
$LN36@ssl_scan_s:
; Line 2767
	mov	eax, 65281				; 0000ff01H
	cmp	bx, ax
	jne	SHORT $LN44@ssl_scan_s
; Line 2768
	push	DWORD PTR _al$[esp+32]
	push	ebp
	push	edi
	push	esi
	call	_ssl_parse_serverhello_renegotiate_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN88@ssl_scan_s
; Line 2770
	mov	DWORD PTR _renegotiate_seen$1$[esp+36], 1
; Line 2771
	jmp	SHORT $LN100@ssl_scan_s
$LN44@ssl_scan_s:
; Line 2773
	cmp	ebx, 15					; 0000000fH
	jne	SHORT $LN47@ssl_scan_s
; Line 2774
	movzx	eax, BYTE PTR [edi]
	sub	eax, 1
	je	SHORT $LN49@ssl_scan_s
	sub	eax, 1
	jne	$LN99@ssl_scan_s
; Line 2780
	or	DWORD PTR [esi+388], 3
; Line 2781
	jmp	SHORT $LN100@ssl_scan_s
$LN49@ssl_scan_s:
; Line 2776
	or	DWORD PTR [esi+388], 1
; Line 2786
	jmp	SHORT $LN100@ssl_scan_s
$LN47@ssl_scan_s:
; Line 2789
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN52@ssl_scan_s
	cmp	ebx, 14					; 0000000eH
	jne	SHORT $LN52@ssl_scan_s
; Line 2790
	push	DWORD PTR _al$[esp+32]
	push	ebp
	push	edi
	push	esi
	call	_ssl_parse_serverhello_use_srtp_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN88@ssl_scan_s
; Line 2792
	jmp	SHORT $LN100@ssl_scan_s
$LN52@ssl_scan_s:
; Line 2798
	push	DWORD PTR _al$[esp+32]
	push	ebp
	push	edi
	push	ebx
	push	0
	push	esi
	call	_custom_ext_parse
	add	esp, 24					; 00000018H
	test	eax, eax
	jle	$LN88@ssl_scan_s
$LN100@ssl_scan_s:
	mov	edx, DWORD PTR _tlsext_servername$1$[esp+36]
$LN55@ssl_scan_s:
; Line 2801
	mov	edi, DWORD PTR tv771[esp+36]
	cmp	edi, DWORD PTR tv773[esp+36]
	jbe	$LL2@ssl_scan_s
	mov	ebx, DWORD PTR tv774[esp+32]
	mov	ebp, DWORD PTR _renegotiate_seen$1$[esp+36]
$LN3@ssl_scan_s:
; Line 2804
	cmp	edi, ebx
	jne	$LN74@ssl_scan_s
; Line 2809
	cmp	DWORD PTR [esi+108], 0
	jne	SHORT $LN60@ssl_scan_s
	cmp	edx, 1
	jne	SHORT $LN60@ssl_scan_s
; Line 2810
	mov	ecx, DWORD PTR [esi+288]
	test	ecx, ecx
	je	SHORT $LN60@ssl_scan_s
; Line 2811
	mov	eax, DWORD PTR [esi+192]
	cmp	DWORD PTR [eax+208], 0
	jne	$LN74@ssl_scan_s
; Line 2812
	push	ecx
	call	_BUF_strdup
	mov	ecx, DWORD PTR [esi+192]
	add	esp, 4
	mov	DWORD PTR [ecx+208], eax
; Line 2813
	mov	eax, DWORD PTR [esi+192]
	cmp	DWORD PTR [eax+208], 0
	je	SHORT $LN73@ssl_scan_s
$LN60@ssl_scan_s:
; Line 2824
	mov	eax, DWORD PTR _p$[esp+32]
	mov	DWORD PTR [eax], edi
	jmp	SHORT $ri_check$104
$LN73@ssl_scan_s:
; Line 2593
	mov	eax, DWORD PTR _al$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 112			; 00000070H
; Line 2594
	xor	eax, eax
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
$LN75@ssl_scan_s:
; Line 2613
	mov	eax, DWORD PTR _al$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 80			; 00000050H
; Line 2614
	xor	eax, eax
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
$LN77@ssl_scan_s:
; Line 2642
	mov	eax, DWORD PTR _al$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 110			; 0000006eH
; Line 2643
	xor	eax, eax
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
$LN99@ssl_scan_s:
; Line 2783
	mov	eax, DWORD PTR _al$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 47			; 0000002fH
; Line 2784
	xor	eax, eax
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
$LN102@ssl_scan_s:
	mov	ebp, DWORD PTR _renegotiate_seen$1$[esp+36]
$ri_check$104:
; Line 2837
	test	ebp, ebp
	jne	SHORT $LN62@ssl_scan_s
$LN97@ssl_scan_s:
	test	DWORD PTR [esi+256], 262148		; 00040004H
	jne	SHORT $LN62@ssl_scan_s
; Line 2838
	mov	eax, DWORD PTR _al$[esp+32]
; Line 2839
	push	2840					; 00000b18H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	338					; 00000152H
	push	321					; 00000141H
	push	20					; 00000014H
	mov	DWORD PTR [eax], 40			; 00000028H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2841
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
$LN62@ssl_scan_s:
	pop	edi
	pop	esi
	pop	ebp
; Line 2844
	mov	eax, 1
	pop	ebx
; Line 2845
	add	esp, 20					; 00000014H
	ret	0
_ssl_scan_serverhello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_next_proto_validate
_TEXT	SEGMENT
_d$ = 8							; size = 4
_len$ = 12						; size = 4
_ssl_next_proto_validate PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2537
	mov	edx, DWORD PTR _len$[esp-4]
	xor	ecx, ecx
	push	esi
	test	edx, edx
	je	SHORT $LN3@ssl_next_p
	mov	esi, DWORD PTR _d$[esp]
	npad	1
$LL2@ssl_next_p:
; Line 2538
	mov	al, BYTE PTR [ecx+esi]
	test	al, al
	je	SHORT $LN7@ssl_next_p
; Line 2541
	inc	ecx
	movzx	eax, al
	add	ecx, eax
	cmp	ecx, edx
	jb	SHORT $LL2@ssl_next_p
$LN3@ssl_next_p:
; Line 2544
	xor	eax, eax
	cmp	ecx, edx
	pop	esi
	sete	al
; Line 2545
	ret	0
$LN7@ssl_next_p:
; Line 2539
	xor	al, al
	pop	esi
; Line 2545
	ret	0
_ssl_next_proto_validate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_scan_clienthello_custom_tlsext
_TEXT	SEGMENT
_type$1$ = 8						; size = 4
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_limit$ = 16						; size = 4
_al$ = 20						; size = 4
_ssl_scan_clienthello_custom_tlsext PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2469
	push	edi
; Line 2472
	mov	edi, DWORD PTR _s$[esp]
	cmp	DWORD PTR [edi+108], 0
	jne	$LN5@ssl_scan_c
	mov	eax, DWORD PTR [edi+152]
	cmp	DWORD PTR [eax+360], 0
	je	$LN5@ssl_scan_c
; Line 2475
	mov	eax, DWORD PTR _data$[esp]
	push	ebp
	mov	ebp, DWORD PTR _limit$[esp+4]
	lea	ecx, DWORD PTR [ebp-2]
	cmp	eax, ecx
	jae	SHORT $LN20@ssl_scan_c
; Line 2477
	movzx	edx, BYTE PTR [eax]
	movzx	ecx, BYTE PTR [eax+1]
	add	eax, 2
	shl	dx, 8
	or	dx, cx
	movzx	ecx, dx
; Line 2479
	mov	edx, ebp
	sub	edx, ecx
	cmp	eax, edx
	jbe	SHORT $LN11@ssl_scan_c
$LN20@ssl_scan_c:
	pop	ebp
; Line 2480
	mov	eax, 1
	pop	edi
; Line 2495
	ret	0
$LN11@ssl_scan_c:
	push	ebx
; Line 2482
	lea	ebx, DWORD PTR [ebp-4]
	push	esi
	cmp	eax, ebx
	ja	SHORT $LN3@ssl_scan_c
	npad	1
$LL2@ssl_scan_c:
; Line 2483
	movzx	edx, BYTE PTR [eax]
	movzx	ecx, BYTE PTR [eax+1]
	shl	dx, 8
	or	dx, cx
	movzx	ecx, dx
; Line 2484
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _type$1$[esp+12], ecx
	movzx	ecx, BYTE PTR [eax+3]
	add	eax, 4
	shl	dx, 8
	or	dx, cx
	movzx	ecx, dx
; Line 2486
	lea	esi, DWORD PTR [ecx+eax]
	cmp	esi, ebp
	ja	SHORT $LN3@ssl_scan_c
; Line 2488
	push	DWORD PTR _al$[esp+12]
	push	ecx
	push	eax
	mov	eax, DWORD PTR _type$1$[esp+24]
	movzx	eax, ax
	push	eax
	push	1
	push	edi
	call	_custom_ext_parse
	add	esp, 24					; 00000018H
	test	eax, eax
	jle	SHORT $LN13@ssl_scan_c
; Line 2491
	mov	eax, esi
	cmp	eax, ebx
	jbe	SHORT $LL2@ssl_scan_c
$LN3@ssl_scan_c:
	pop	esi
	pop	ebx
	pop	ebp
; Line 2494
	mov	eax, 1
	pop	edi
; Line 2495
	ret	0
$LN13@ssl_scan_c:
	pop	esi
	pop	ebx
	pop	ebp
; Line 2489
	xor	eax, eax
	pop	edi
; Line 2495
	ret	0
$LN5@ssl_scan_c:
; Line 2473
	mov	eax, 1
	pop	edi
; Line 2495
	ret	0
_ssl_scan_clienthello_custom_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_scan_clienthello_tlsext
_TEXT	SEGMENT
_renegotiate_seen$1$ = -20				; size = 4
_sdata$1 = -16						; size = 4
_sdata$1$ = -12						; size = 4
tv1076 = -8						; size = 4
tv1095 = -4						; size = 4
_size$1$ = 8						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_al$ = 20						; size = 4
_ssl_scan_clienthello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2006
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
; Line 2013
	mov	esi, DWORD PTR _s$[esp+28]
	xor	ebp, ebp
	push	edi
	mov	edi, DWORD PTR _p$[esp+32]
	mov	DWORD PTR _renegotiate_seen$1$[esp+36], ebp
; Line 2016
	mov	eax, DWORD PTR [esi+88]
	mov	edi, DWORD PTR [edi]
	mov	DWORD PTR [esi+292], ebp
	mov	DWORD PTR [esi+296], -1
	mov	DWORD PTR [eax+1052], ebp
; Line 2019
	mov	eax, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+1060]
	test	eax, eax
	je	SHORT $LN12@ssl_scan_c
; Line 2020
	push	eax
	call	_CRYPTO_free
; Line 2021
	mov	eax, DWORD PTR [esi+88]
	add	esp, 4
	mov	DWORD PTR [eax+1060], ebp
$LN12@ssl_scan_c:
; Line 2023
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+1064], ebp
; Line 2024
	mov	eax, DWORD PTR [esi+152]
	mov	eax, DWORD PTR [eax+368]
	test	eax, eax
	je	SHORT $LN13@ssl_scan_c
; Line 2025
	push	eax
	call	_CRYPTO_free
; Line 2026
	mov	eax, DWORD PTR [esi+152]
	add	esp, 4
	mov	DWORD PTR [eax+368], ebp
$LN13@ssl_scan_c:
; Line 2028
	mov	eax, DWORD PTR [esi+152]
; Line 2036
	mov	ebx, DWORD PTR _limit$[esp+32]
	mov	DWORD PTR [eax+372], ebp
	and	DWORD PTR [esi+388], -4			; fffffffcH
	test	BYTE PTR [esi+256], 64			; 00000040H
	je	SHORT $LN14@ssl_scan_c
	push	ebx
	push	edi
	push	esi
	call	_ssl_check_for_safari
	add	esp, 12					; 0000000cH
$LN14@ssl_scan_c:
; Line 2040
	mov	eax, DWORD PTR [esi+152]
	mov	eax, DWORD PTR [eax+292]
	test	eax, eax
	je	SHORT $LN15@ssl_scan_c
; Line 2041
	push	eax
	call	_CRYPTO_free
; Line 2042
	mov	eax, DWORD PTR [esi+152]
	add	esp, 4
	mov	DWORD PTR [eax+292], ebp
$LN15@ssl_scan_c:
; Line 2045
	mov	eax, DWORD PTR [esi+420]
	test	eax, eax
	je	SHORT $LN16@ssl_scan_c
; Line 2046
	push	eax
	call	_CRYPTO_free
	add	esp, 4
; Line 2047
	mov	DWORD PTR [esi+420], ebp
$LN16@ssl_scan_c:
; Line 2051
	mov	DWORD PTR [esi+384], ebp
; Line 2053
	cmp	edi, ebx
	je	$LN152@ssl_scan_c
; Line 2056
	lea	eax, DWORD PTR [ebx-2]
	cmp	edi, eax
	ja	$err$174
; Line 2059
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	cx, 8
	or	cx, ax
	movzx	eax, cx
; Line 2061
	add	eax, edi
	cmp	eax, ebx
	jne	$err$174
; Line 2064
	lea	eax, DWORD PTR [ebx-4]
	mov	DWORD PTR tv1095[esp+36], eax
	cmp	edi, eax
	ja	$LN154@ssl_scan_c
$LL2@ssl_scan_c:
; Line 2065
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
	shl	cx, 8
	or	cx, ax
; Line 2066
	movzx	eax, BYTE PTR [edi+3]
	movzx	ebx, cx
	movzx	ecx, BYTE PTR [edi+2]
	add	edi, 4
	shl	cx, 8
	or	cx, ax
	movzx	edx, cx
; Line 2068
	movzx	ebp, dx
	mov	DWORD PTR _size$1$[esp+32], edx
	lea	eax, DWORD PTR [edi+ebp]
	cmp	eax, DWORD PTR _limit$[esp+32]
	ja	$err$174
; Line 2073
	mov	ecx, DWORD PTR [esi+280]
	test	ecx, ecx
	je	SHORT $LN21@ssl_scan_c
; Line 2074
	push	DWORD PTR [esi+284]
	push	ebp
	push	edi
	push	ebx
	push	0
	push	esi
	call	ecx
	mov	edx, DWORD PTR _size$1$[esp+56]
	add	esp, 24					; 00000018H
$LN21@ssl_scan_c:
; Line 2100
	test	bx, bx
	jne	$LN22@ssl_scan_c
; Line 2105
	cmp	dx, 2
	jb	$err$174
; Line 2107
	movzx	ebp, BYTE PTR [edi]
; Line 2108
	add	edx, 65534				; 0000fffeH
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	ebp, 8
	or	ebp, eax
	mov	DWORD PTR _size$1$[esp+32], edx
; Line 2109
	movzx	eax, dx
	cmp	ebp, eax
	jg	$err$174
; Line 2112
	mov	ebx, edi
; Line 2113
	cmp	ebp, 3
	jle	$LN5@ssl_scan_c
	npad	2
$LL4@ssl_scan_c:
; Line 2115
	movzx	ecx, BYTE PTR [ebx+1]
; Line 2116
	sub	ebp, 3
	movzx	eax, BYTE PTR [ebx+2]
	movzx	edx, BYTE PTR [ebx]
	add	ebx, 3
	shl	cx, 8
	or	cx, ax
	mov	DWORD PTR _sdata$1$[esp+36], ebx
	movzx	ecx, cx
; Line 2118
	mov	ebx, ecx
	cmp	ebx, ebp
	jg	$err$174
; Line 2121
	cmp	DWORD PTR [esi+292], 0
	jne	$LN30@ssl_scan_c
; Line 2122
	test	edx, edx
	jne	$LN30@ssl_scan_c
; Line 2125
	mov	eax, DWORD PTR [esi+192]
	cmp	DWORD PTR [esi+108], edx
	jne	$LN29@ssl_scan_c
	cmp	DWORD PTR [eax+208], edx
	jne	$err$174
; Line 2128
	mov	eax, 255				; 000000ffH
	cmp	cx, ax
	ja	$LN111@ssl_scan_c
; Line 2133
	push	2133					; 00000855H
	lea	eax, DWORD PTR [ebx+1]
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [esi+192]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+208], eax
	test	eax, eax
	je	$LN112@ssl_scan_c
; Line 2137
	mov	eax, DWORD PTR [esi+192]
	push	ebx
	push	DWORD PTR _sdata$1$[esp+40]
	push	DWORD PTR [eax+208]
	call	_memcpy
; Line 2138
	mov	eax, DWORD PTR [esi+192]
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR [eax+208]
	mov	BYTE PTR [ebx+eax], 0
; Line 2139
	mov	eax, DWORD PTR [esi+192]
	mov	ecx, DWORD PTR [eax+208]
	lea	edx, DWORD PTR [ecx+1]
	npad	7
$LL155@ssl_scan_c:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL155@ssl_scan_c
	sub	ecx, edx
	cmp	ecx, ebx
	jne	$LN113@ssl_scan_c
; Line 2145
	mov	DWORD PTR [esi+292], 1
; Line 2147
	jmp	SHORT $LN30@ssl_scan_c
$LN29@ssl_scan_c:
; Line 2148
	mov	edx, DWORD PTR [eax+208]
	test	edx, edx
	je	SHORT $LN104@ssl_scan_c
	mov	ecx, edx
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR tv1076[esp+36], eax
$LL156@ssl_scan_c:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL156@ssl_scan_c
	sub	ecx, DWORD PTR tv1076[esp+36]
	cmp	ecx, ebx
	jne	SHORT $LN104@ssl_scan_c
	push	ebx
	push	DWORD PTR _sdata$1$[esp+40]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN104@ssl_scan_c
	mov	eax, 1
	jmp	SHORT $LN105@ssl_scan_c
$LN104@ssl_scan_c:
	xor	eax, eax
$LN105@ssl_scan_c:
	mov	DWORD PTR [esi+292], eax
$LN30@ssl_scan_c:
; Line 2159
	sub	ebp, ebx
	mov	ebx, DWORD PTR _sdata$1$[esp+36]
	cmp	ebp, 3
	jg	$LL4@ssl_scan_c
$LN5@ssl_scan_c:
; Line 2161
	test	ebp, ebp
	je	$LN170@ssl_scan_c
$err$174:
; Line 2456
	mov	eax, DWORD PTR _al$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 50			; 00000032H
; Line 2457
	xor	eax, eax
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN22@ssl_scan_c:
; Line 2166
	cmp	ebx, 12					; 0000000cH
	jne	SHORT $LN37@ssl_scan_c
; Line 2167
	test	dx, dx
	je	SHORT $err$174
	movzx	ebx, BYTE PTR [edi]
	lea	eax, DWORD PTR [ebp-1]
	cmp	ebx, eax
	jne	SHORT $err$174
; Line 2169
	cmp	DWORD PTR [esi+420], 0
	jne	SHORT $err$174
; Line 2171
	push	2171					; 0000087bH
	lea	eax, DWORD PTR [ebx+1]
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+420], eax
	test	eax, eax
	je	$LN126@ssl_scan_c
; Line 2173
	push	ebx
	lea	ecx, DWORD PTR [edi+1]
	push	ecx
	push	eax
	call	_memcpy
; Line 2174
	mov	eax, DWORD PTR [esi+420]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [ebx+eax], 0
; Line 2176
	mov	ecx, DWORD PTR [esi+420]
	lea	edx, DWORD PTR [ecx+1]
	npad	2
$LL157@ssl_scan_c:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL157@ssl_scan_c
	sub	ecx, edx
	cmp	ecx, ebx
	jne	$err$174
; Line 2178
	jmp	$LN170@ssl_scan_c
$LN37@ssl_scan_c:
; Line 2182
	cmp	ebx, 11					; 0000000bH
	jne	$LN44@ssl_scan_c
; Line 2184
	movzx	ebx, BYTE PTR [edi]
; Line 2186
	lea	eax, DWORD PTR [ebp-1]
	cmp	ebx, eax
	jne	$err$174
	cmp	ebx, 1
	jl	$err$174
; Line 2189
	cmp	DWORD PTR [esi+108], 0
	jne	$LN170@ssl_scan_c
; Line 2190
	mov	eax, DWORD PTR [esi+192]
	mov	eax, DWORD PTR [eax+216]
	test	eax, eax
	je	SHORT $LN49@ssl_scan_c
; Line 2191
	push	eax
	call	_CRYPTO_free
; Line 2192
	mov	eax, DWORD PTR [esi+192]
	add	esp, 4
	mov	DWORD PTR [eax+216], 0
$LN49@ssl_scan_c:
; Line 2194
	mov	eax, DWORD PTR [esi+192]
; Line 2196
	push	2196					; 00000894H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebx
	mov	DWORD PTR [eax+212], 0
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [esi+192]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+216], eax
	test	eax, eax
	je	$LN112@ssl_scan_c
; Line 2200
	mov	eax, DWORD PTR [esi+192]
; Line 2202
	push	ebx
	mov	DWORD PTR [eax+212], ebx
	lea	eax, DWORD PTR [edi+1]
	push	eax
	mov	eax, DWORD PTR [esi+192]
	push	DWORD PTR [eax+216]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2204
	jmp	$LN170@ssl_scan_c
$LN44@ssl_scan_c:
; Line 2214
	cmp	ebx, 10					; 0000000aH
	jne	$LN51@ssl_scan_c
; Line 2216
	movzx	ebx, BYTE PTR [edi]
; Line 2217
	movzx	eax, BYTE PTR [edi+1]
	shl	ebx, 8
	add	ebx, eax
; Line 2220
	lea	eax, DWORD PTR [ebp-2]
	cmp	ebx, eax
	jne	$err$174
	cmp	ebx, 1
	jl	$err$174
	test	bl, 1
	jne	$err$174
; Line 2225
	cmp	DWORD PTR [esi+108], 0
	jne	$LN170@ssl_scan_c
; Line 2226
	mov	eax, DWORD PTR [esi+192]
	cmp	DWORD PTR [eax+224], 0
	jne	$err$174
; Line 2231
	push	2231					; 000008b7H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebx
	mov	DWORD PTR [eax+220], 0
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [esi+192]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+224], eax
	test	eax, eax
	je	$LN112@ssl_scan_c
; Line 2235
	mov	eax, DWORD PTR [esi+192]
; Line 2237
	push	ebx
	mov	DWORD PTR [eax+220], ebx
	lea	eax, DWORD PTR [edi+2]
	push	eax
	mov	eax, DWORD PTR [esi+192]
	push	DWORD PTR [eax+224]
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2249
	jmp	$LN170@ssl_scan_c
$LN51@ssl_scan_c:
; Line 2282
	cmp	ebx, 35					; 00000023H
	jne	SHORT $LN58@ssl_scan_c
; Line 2283
	mov	eax, DWORD PTR [esi+352]
	test	eax, eax
	je	$LN170@ssl_scan_c
	push	DWORD PTR [esi+356]
	push	ebp
	push	edi
	push	esi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN112@ssl_scan_c
; Line 2289
	jmp	$LN170@ssl_scan_c
$LN58@ssl_scan_c:
; Line 2290
	mov	eax, 65281				; 0000ff01H
	cmp	bx, ax
	jne	SHORT $LN61@ssl_scan_c
; Line 2291
	push	DWORD PTR _al$[esp+32]
	push	ebp
	push	edi
	push	esi
	call	_ssl_parse_clienthello_renegotiate_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN134@ssl_scan_c
; Line 2293
	mov	ebp, 1
	mov	DWORD PTR _renegotiate_seen$1$[esp+36], ebp
	jmp	$LN100@ssl_scan_c
$LN61@ssl_scan_c:
; Line 2294
	cmp	ebx, 13					; 0000000dH
	jne	SHORT $LN64@ssl_scan_c
; Line 2296
	mov	eax, DWORD PTR [esi+152]
	cmp	DWORD PTR [eax+292], 0
	jne	$err$174
	cmp	dx, 2
	jb	$err$174
; Line 2298
	movzx	ecx, BYTE PTR [edi]
; Line 2299
	add	edx, 65534				; 0000fffeH
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR _size$1$[esp+32], edx
; Line 2300
	movzx	eax, dx
	cmp	ecx, eax
	jne	$err$174
	test	cl, 1
	jne	$err$174
	test	ecx, ecx
	je	$err$174
; Line 2302
	push	ecx
	push	edi
	push	esi
	call	_tls1_save_sigalgs
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$174
; Line 2304
	jmp	$LN170@ssl_scan_c
$LN64@ssl_scan_c:
	cmp	ebx, 5
	jne	$LN71@ssl_scan_c
; Line 2306
	cmp	dx, bx
	jb	$err$174
; Line 2309
	movzx	eax, BYTE PTR [edi]
; Line 2310
	add	edx, 65535				; 0000ffffH
	inc	edi
	mov	DWORD PTR [esi+296], eax
	mov	DWORD PTR _size$1$[esp+32], edx
; Line 2311
	cmp	eax, 1
	jne	$LN74@ssl_scan_c
; Line 2315
	movzx	ebx, BYTE PTR [edi]
; Line 2316
	add	edx, 65534				; 0000fffeH
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	ebx, 8
	or	ebx, eax
; Line 2317
	movzx	eax, dx
	cmp	ebx, eax
	jg	$err$174
; Line 2319
	test	ebx, ebx
	jle	$LN160@ssl_scan_c
$LL8@ssl_scan_c:
; Line 2322
	cmp	ebx, 4
	jl	$err$174
; Line 2324
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	ecx, 8
	or	ecx, eax
; Line 2325
	mov	eax, -2					; fffffffeH
	sub	eax, ecx
	add	ebx, eax
; Line 2326
	mov	eax, 65534				; 0000fffeH
	sub	eax, ecx
	add	edx, eax
	mov	DWORD PTR _size$1$[esp+32], edx
; Line 2327
	test	ebx, ebx
	js	$err$174
; Line 2331
	push	ecx
	lea	eax, DWORD PTR _sdata$1[esp+40]
	mov	DWORD PTR _sdata$1[esp+40], edi
	push	eax
	push	0
	add	edi, ecx
	call	_d2i_OCSP_RESPID
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 2332
	test	ebp, ebp
	je	$err$174
; Line 2334
	cmp	edi, DWORD PTR _sdata$1[esp+36]
	jne	$LN117@ssl_scan_c
; Line 2339
	cmp	DWORD PTR [esi+304], 0
	jne	SHORT $LN81@ssl_scan_c
	call	_sk_new_null
	mov	DWORD PTR [esi+304], eax
	test	eax, eax
	je	$LN118@ssl_scan_c
$LN81@ssl_scan_c:
; Line 2345
	push	ebp
	push	DWORD PTR [esi+304]
	call	_sk_push
	add	esp, 8
	test	eax, eax
	je	$LN118@ssl_scan_c
; Line 2319
	mov	edx, DWORD PTR _size$1$[esp+32]
	test	ebx, ebx
	jg	$LL8@ssl_scan_c
$LN160@ssl_scan_c:
; Line 2353
	cmp	dx, 2
	jb	$err$174
; Line 2355
	movzx	ebx, BYTE PTR [edi]
; Line 2356
	add	edx, 65534				; 0000fffeH
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 2
	shl	ebx, 8
	or	ebx, eax
	mov	DWORD PTR _size$1$[esp+32], edx
; Line 2357
	movzx	eax, dx
	cmp	ebx, eax
	jne	$err$174
; Line 2359
	mov	DWORD PTR _sdata$1[esp+36], edi
; Line 2360
	test	ebx, ebx
	jle	$LN170@ssl_scan_c
; Line 2361
	mov	eax, DWORD PTR [esi+308]
	test	eax, eax
	je	SHORT $LN86@ssl_scan_c
; Line 2362
	push	OFFSET _X509_EXTENSION_free
	push	eax
	call	_sk_pop_free
	add	esp, 8
$LN86@ssl_scan_c:
; Line 2366
	push	ebx
	lea	eax, DWORD PTR _sdata$1[esp+40]
	push	eax
	push	0
	call	_d2i_X509_EXTENSIONS
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+308], eax
; Line 2368
	test	eax, eax
	je	$err$174
	lea	eax, DWORD PTR [ebx+edi]
	cmp	eax, DWORD PTR _sdata$1[esp+36]
	jne	$err$174
; Line 2371
	jmp	$LN170@ssl_scan_c
$LN74@ssl_scan_c:
; Line 2376
	mov	DWORD PTR [esi+296], -1
; Line 2377
	jmp	$LN170@ssl_scan_c
$LN71@ssl_scan_c:
; Line 2379
	cmp	ebx, 15					; 0000000fH
	jne	SHORT $LN89@ssl_scan_c
; Line 2380
	movzx	eax, BYTE PTR [edi]
	sub	eax, 1
	je	SHORT $LN91@ssl_scan_c
	sub	eax, 1
	jne	$LN158@ssl_scan_c
; Line 2386
	or	DWORD PTR [esi+388], 3
; Line 2387
	jmp	$LN170@ssl_scan_c
$LN91@ssl_scan_c:
; Line 2382
	or	DWORD PTR [esi+388], 1
; Line 2392
	jmp	SHORT $LN170@ssl_scan_c
$LN89@ssl_scan_c:
; Line 2395
	mov	eax, 13172				; 00003374H
	cmp	bx, ax
	jne	SHORT $LN94@ssl_scan_c
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+692], 0
	jne	SHORT $LN96@ssl_scan_c
; Line 2414
	mov	DWORD PTR [eax+1052], 1
; Line 2415
	jmp	SHORT $LN170@ssl_scan_c
$LN94@ssl_scan_c:
; Line 2418
	cmp	ebx, 16					; 00000010H
	jne	SHORT $LN96@ssl_scan_c
	mov	eax, DWORD PTR [esi+88]
	cmp	DWORD PTR [eax+692], 0
	jne	SHORT $LN96@ssl_scan_c
; Line 2420
	push	DWORD PTR _al$[esp+32]
	push	ebp
	push	edi
	push	esi
	call	_tls1_alpn_handle_client_hello
; Line 2422
	jmp	SHORT $LN172@ssl_scan_c
$LN96@ssl_scan_c:
; Line 2427
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN170@ssl_scan_c
	push	esi
	call	_SSL_get_srtp_profiles
	add	esp, 4
	test	eax, eax
	je	SHORT $LN170@ssl_scan_c
	cmp	ebx, 14					; 0000000eH
	jne	SHORT $LN170@ssl_scan_c
; Line 2428
	push	DWORD PTR _al$[esp+32]
	push	ebp
	push	edi
	push	esi
	call	_ssl_parse_clienthello_use_srtp_ext
$LN172@ssl_scan_c:
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN142@ssl_scan_c
$LN170@ssl_scan_c:
	mov	ebp, DWORD PTR _renegotiate_seen$1$[esp+36]
$LN100@ssl_scan_c:
; Line 2433
	mov	eax, DWORD PTR _size$1$[esp+32]
	movzx	eax, ax
	add	edi, eax
	cmp	edi, DWORD PTR tv1095[esp+36]
	jbe	$LL2@ssl_scan_c
	mov	ebx, DWORD PTR _limit$[esp+32]
$LN154@ssl_scan_c:
; Line 2437
	cmp	edi, ebx
	jne	$err$174
; Line 2440
	mov	eax, DWORD PTR _p$[esp+32]
$ri_check$175:
	mov	DWORD PTR [eax], edi
; Line 2446
	test	ebp, ebp
	jne	$LN102@ssl_scan_c
$LN152@ssl_scan_c:
	cmp	DWORD PTR [esi+400], 0
	je	$LN102@ssl_scan_c
	test	DWORD PTR [esi+256], 262144		; 00040000H
	jne	$LN102@ssl_scan_c
; Line 2448
	mov	eax, DWORD PTR _al$[esp+32]
; Line 2449
	push	2450					; 00000992H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	338					; 00000152H
	push	320					; 00000140H
	push	20					; 00000014H
	mov	DWORD PTR [eax], 40			; 00000028H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2451
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN113@ssl_scan_c:
; Line 2140
	mov	eax, DWORD PTR [esi+192]
	push	DWORD PTR [eax+208]
	call	_CRYPTO_free
; Line 2141
	mov	eax, DWORD PTR [esi+192]
	add	esp, 4
	mov	DWORD PTR [eax+208], 0
$LN111@ssl_scan_c:
; Line 2142
	mov	eax, DWORD PTR _al$[esp+32]
	mov	DWORD PTR [eax], 112			; 00000070H
$LN142@ssl_scan_c:
; Line 2143
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN126@ssl_scan_c:
	pop	edi
	pop	esi
	pop	ebp
; Line 2172
	or	eax, -1
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN118@ssl_scan_c:
; Line 2341
	push	ebp
	call	_OCSP_RESPID_free
	add	esp, 4
$LN112@ssl_scan_c:
; Line 2342
	mov	eax, DWORD PTR _al$[esp+32]
	mov	DWORD PTR [eax], 80			; 00000050H
$LN134@ssl_scan_c:
; Line 2343
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN117@ssl_scan_c:
; Line 2335
	push	ebp
	call	_OCSP_RESPID_free
; Line 2456
	mov	eax, DWORD PTR _al$[esp+36]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 50			; 00000032H
; Line 2457
	xor	eax, eax
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN158@ssl_scan_c:
; Line 2389
	mov	eax, DWORD PTR _al$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], 47			; 0000002fH
; Line 2390
	xor	eax, eax
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
$LN102@ssl_scan_c:
	pop	edi
	pop	esi
	pop	ebp
; Line 2454
	mov	eax, 1
	pop	ebx
; Line 2458
	add	esp, 20					; 00000014H
	ret	0
_ssl_scan_clienthello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_alpn_handle_client_hello_late
_TEXT	SEGMENT
_selected_len$ = -5					; size = 1
_selected$ = -4						; size = 4
_s$ = 8							; size = 4
_ret$ = 12						; size = 4
_al$ = 16						; size = 4
_tls1_alpn_handle_client_hello_late PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1974
	mov	eax, 8
	call	__chkstk
	push	esi
; Line 1978
	mov	esi, DWORD PTR _s$[esp+8]
	mov	DWORD PTR _selected$[esp+12], 0
	mov	BYTE PTR _selected_len$[esp+12], 0
	mov	eax, DWORD PTR [esi+228]
	mov	ecx, DWORD PTR [eax+440]
	test	ecx, ecx
	je	$LN3@tls1_alpn_
	mov	edx, DWORD PTR [esi+152]
	cmp	DWORD PTR [edx+368], 0
	je	$LN3@tls1_alpn_
; Line 1979
	push	DWORD PTR [eax+444]
	lea	eax, DWORD PTR _selected_len$[esp+16]
	push	DWORD PTR [edx+372]
	push	DWORD PTR [edx+368]
	push	eax
	lea	eax, DWORD PTR _selected$[esp+28]
	push	eax
	push	esi
	call	ecx
	add	esp, 24					; 00000018H
; Line 1984
	test	eax, eax
	jne	$LN3@tls1_alpn_
; Line 1985
	mov	eax, DWORD PTR [esi+88]
	push	DWORD PTR [eax+1060]
	call	_CRYPTO_free
; Line 1986
	movzx	eax, BYTE PTR _selected_len$[esp+16]
	push	1986					; 000007c2H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [esi+88]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [ecx+1060], eax
; Line 1987
	mov	eax, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [eax+1060]
	test	ecx, ecx
	jne	SHORT $LN4@tls1_alpn_
; Line 1988
	mov	eax, DWORD PTR _al$[esp+8]
	pop	esi
	mov	DWORD PTR [eax], 80			; 00000050H
; Line 1989
	mov	eax, DWORD PTR _ret$[esp+4]
	mov	DWORD PTR [eax], 2
; Line 1990
	xor	eax, eax
; Line 2002
	add	esp, 8
	ret	0
$LN4@tls1_alpn_:
; Line 1992
	movzx	eax, BYTE PTR _selected_len$[esp+12]
	push	eax
	push	DWORD PTR _selected$[esp+16]
	push	ecx
	call	_memcpy
; Line 1993
	mov	eax, DWORD PTR [esi+88]
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR _selected_len$[esp+12]
	mov	DWORD PTR [eax+1064], ecx
; Line 1996
	mov	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+1052], 0
$LN3@tls1_alpn_:
; Line 2001
	mov	eax, 1
	pop	esi
; Line 2002
	add	esp, 8
	ret	0
_tls1_alpn_handle_client_hello_late ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_alpn_handle_client_hello
_TEXT	SEGMENT
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_data_len$ = 16						; size = 4
_al$ = 20						; size = 4
_tls1_alpn_handle_client_hello PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1918
	push	esi
; Line 1922
	mov	esi, DWORD PTR _data_len$[esp]
	push	edi
	cmp	esi, 2
	jb	$parse_error$22
; Line 1929
	mov	edi, DWORD PTR _data$[esp+4]
; Line 1930
	sub	esi, 2
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
; Line 1931
	add	edi, 2
	shl	ecx, 8
	or	ecx, eax
; Line 1932
	cmp	esi, ecx
	jne	$parse_error$22
; Line 1935
	cmp	esi, 2
	jb	$parse_error$22
; Line 1938
	xor	eax, eax
	test	esi, esi
	je	SHORT $LN3@tls1_alpn_
	npad	4
$LL2@tls1_alpn_:
; Line 1939
	movzx	ecx, BYTE PTR [eax+edi]
; Line 1940
	inc	eax
; Line 1942
	test	ecx, ecx
	je	$parse_error$22
; Line 1945
	add	ecx, eax
	cmp	ecx, eax
	jb	$parse_error$22
	cmp	ecx, esi
	ja	$parse_error$22
; Line 1948
	mov	eax, ecx
	cmp	eax, esi
	jb	SHORT $LL2@tls1_alpn_
$LN3@tls1_alpn_:
	push	ebx
; Line 1951
	mov	ebx, DWORD PTR _s$[esp+8]
	mov	eax, DWORD PTR [ebx+152]
	mov	eax, DWORD PTR [eax+368]
	test	eax, eax
	je	SHORT $LN11@tls1_alpn_
; Line 1952
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN11@tls1_alpn_:
; Line 1953
	push	1953					; 000007a1H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	esi
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [ebx+152]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+368], eax
; Line 1954
	mov	eax, DWORD PTR [ebx+152]
	mov	eax, DWORD PTR [eax+368]
	test	eax, eax
	jne	SHORT $LN12@tls1_alpn_
; Line 1955
	mov	eax, DWORD PTR _al$[esp+8]
	pop	ebx
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], 80			; 00000050H
; Line 1956
	or	eax, -1
; Line 1965
	ret	0
$LN12@tls1_alpn_:
; Line 1958
	push	esi
	push	edi
	push	eax
	call	_memcpy
; Line 1959
	mov	eax, DWORD PTR [ebx+152]
	add	esp, 12					; 0000000cH
	pop	ebx
	mov	DWORD PTR [eax+372], esi
; Line 1960
	xor	eax, eax
	pop	edi
	pop	esi
; Line 1965
	ret	0
$parse_error$22:
; Line 1963
	mov	eax, DWORD PTR _al$[esp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], 50			; 00000032H
; Line 1964
	or	eax, -1
; Line 1965
	ret	0
_tls1_alpn_handle_client_hello ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_check_for_safari
_TEXT	SEGMENT
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_limit$ = 16						; size = 4
_ssl_check_for_safari PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1842
	push	esi
; Line 1870
	mov	esi, DWORD PTR _data$[esp]
	push	edi
	mov	edi, DWORD PTR _limit$[esp+4]
	lea	eax, DWORD PTR [edi-2]
	cmp	esi, eax
	jae	$LN1@ssl_check_
; Line 1872
	add	esi, 2
; Line 1874
	lea	eax, DWORD PTR [edi-4]
	cmp	esi, eax
	ja	$LN1@ssl_check_
; Line 1876
	movzx	ecx, BYTE PTR [esi]
	movzx	eax, BYTE PTR [esi+1]
	shl	cx, 8
	or	cx, ax
; Line 1877
	movzx	eax, BYTE PTR [esi+3]
	movzx	edx, cx
	movzx	ecx, BYTE PTR [esi+2]
	add	esi, 4
	shl	cx, 8
	or	cx, ax
	movzx	eax, cx
; Line 1879
	test	dx, dx
	jne	$LN1@ssl_check_
; Line 1882
	lea	ecx, DWORD PTR [esi+eax]
	cmp	ecx, edi
	ja	$LN1@ssl_check_
; Line 1886
	push	ebx
	mov	ebx, DWORD PTR _s$[esp+8]
	mov	edx, DWORD PTR [ebx+272]
	mov	eax, edx
	and	eax, -256				; ffffff00H
	cmp	eax, 768				; 00000300H
	jne	SHORT $LN6@ssl_check_
	cmp	edx, 771				; 00000303H
	jl	SHORT $LN6@ssl_check_
; Line 1890
	lea	eax, DWORD PTR [ecx+34]
	cmp	eax, edi
	jne	$LN22@ssl_check_
; Line 1892
	mov	edx, ecx
	mov	esi, OFFSET ?kSafariExtensionsBlock@?1??ssl_check_for_safari@@9@9
	mov	edi, 14					; 0000000eH
$LL17@ssl_check_:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN22@ssl_check_
	add	edx, 4
	add	esi, 4
	sub	edi, 4
	jae	SHORT $LL17@ssl_check_
	mov	ax, WORD PTR [edx]
	cmp	ax, WORD PTR [esi]
	jne	SHORT $LN22@ssl_check_
; Line 1894
	add	ecx, 18					; 00000012H
	mov	edx, OFFSET ?kSafariTLS12ExtensionsBlock@?1??ssl_check_for_safari@@9@9
	mov	esi, 12					; 0000000cH
	npad	5
$LL19@ssl_check_:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN22@ssl_check_
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL19@ssl_check_
; Line 1905
	mov	eax, DWORD PTR [ebx+88]
	pop	ebx
	pop	edi
	pop	esi
	mov	BYTE PTR [eax+1056], 1
; Line 1906
	ret	0
$LN6@ssl_check_:
; Line 1899
	lea	eax, DWORD PTR [ecx+18]
	cmp	eax, edi
	jne	SHORT $LN22@ssl_check_
; Line 1901
	mov	edx, OFFSET ?kSafariExtensionsBlock@?1??ssl_check_for_safari@@9@9
	mov	esi, 14					; 0000000eH
$LL21@ssl_check_:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN22@ssl_check_
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL21@ssl_check_
	mov	ax, WORD PTR [ecx]
	cmp	ax, WORD PTR [edx]
	jne	SHORT $LN22@ssl_check_
; Line 1905
	mov	eax, DWORD PTR [ebx+88]
	mov	BYTE PTR [eax+1056], 1
$LN22@ssl_check_:
	pop	ebx
$LN1@ssl_check_:
	pop	edi
	pop	esi
; Line 1906
	ret	0
_ssl_check_for_safari ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_check_cert_param
_TEXT	SEGMENT
_comp_id$ = -5						; size = 1
_curve_id$ = -4						; size = 2
_s$ = 8							; size = 4
_x$ = 12						; size = 4
_set_ee_md$ = 16					; size = 4
_tls1_check_cert_param PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 853
	mov	eax, 8
	call	__chkstk
	push	edi
; Line 857
	push	DWORD PTR _x$[esp+8]
	call	_X509_get_pubkey
	mov	edi, eax
	add	esp, 4
; Line 858
	test	edi, edi
	jne	SHORT $LN5@tls1_check
	pop	edi
; Line 906
	add	esp, 8
	ret	0
$LN5@tls1_check:
; Line 861
	cmp	DWORD PTR [edi], 408			; 00000198H
	je	SHORT $LN6@tls1_check
; Line 862
	push	edi
	call	_EVP_PKEY_free
	add	esp, 4
; Line 863
	mov	eax, 1
	pop	edi
; Line 906
	add	esp, 8
	ret	0
$LN6@tls1_check:
	push	esi
; Line 865
	push	DWORD PTR [edi+20]
	lea	eax, DWORD PTR _comp_id$[esp+20]
	push	eax
	lea	eax, DWORD PTR _curve_id$[esp+24]
	push	eax
	call	_tls1_set_ec_id
; Line 866
	push	edi
	mov	esi, eax
	call	_EVP_PKEY_free
	add	esp, 16					; 00000010H
; Line 867
	test	esi, esi
	jne	SHORT $LN7@tls1_check
; Line 868
	pop	esi
	xor	eax, eax
	pop	edi
; Line 906
	add	esp, 8
	ret	0
$LN7@tls1_check:
; Line 873
	mov	edi, DWORD PTR _s$[esp+12]
	lea	eax, DWORD PTR _comp_id$[esp+16]
	push	ebp
	push	eax
	xor	ecx, ecx
	lea	eax, DWORD PTR _curve_id$[esp+24]
	cmp	DWORD PTR [edi+36], ecx
	cmove	eax, ecx
	push	eax
	push	edi
	call	_tls1_check_ec_key
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 874
	test	ebp, ebp
	je	SHORT $LN13@tls1_check
; Line 880
	cmp	DWORD PTR _set_ee_md$[esp+16], 0
	je	$LN19@tls1_check
	mov	edi, DWORD PTR [edi+152]
	test	DWORD PTR [edi+56], 196608		; 00030000H
	je	$LN19@tls1_check
; Line 884
	mov	ax, WORD PTR _curve_id$[esp+20]
	test	al, al
	jne	SHORT $LN13@tls1_check
; Line 887
	cmp	ah, 23					; 00000017H
	jne	SHORT $LN11@tls1_check
; Line 888
	mov	edx, 794				; 0000031aH
	jmp	SHORT $LN14@tls1_check
$LN11@tls1_check:
; Line 889
	cmp	ah, 24					; 00000018H
	jne	SHORT $LN13@tls1_check
; Line 890
	mov	edx, 795				; 0000031bH
$LN14@tls1_check:
; Line 893
	mov	esi, DWORD PTR [edi+320]
	xor	ecx, ecx
	test	esi, esi
	je	SHORT $LN26@tls1_check
; Line 894
	mov	eax, DWORD PTR [edi+316]
	add	eax, 8
	npad	1
$LL4@tls1_check:
	cmp	edx, DWORD PTR [eax]
	je	SHORT $LN26@tls1_check
; Line 893
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	jb	SHORT $LL4@tls1_check
$LN26@tls1_check:
; Line 896
	cmp	ecx, esi
	jne	SHORT $LN16@tls1_check
$LN13@tls1_check:
	pop	ebp
	pop	esi
; Line 897
	xor	eax, eax
	pop	edi
; Line 906
	add	esp, 8
	ret	0
$LN16@tls1_check:
; Line 898
	cmp	DWORD PTR _set_ee_md$[esp+16], 2
	jne	SHORT $LN19@tls1_check
; Line 899
	cmp	edx, 794				; 0000031aH
	jne	SHORT $LN18@tls1_check
; Line 900
	call	_EVP_sha256
; Line 902
	mov	DWORD PTR [edi+208], eax
; Line 905
	mov	eax, ebp
	pop	ebp
	pop	esi
	pop	edi
; Line 906
	add	esp, 8
	ret	0
$LN18@tls1_check:
; Line 902
	call	_EVP_sha384
	mov	DWORD PTR [edi+208], eax
$LN19@tls1_check:
; Line 905
	mov	eax, ebp
	pop	ebp
	pop	esi
	pop	edi
; Line 906
	add	esp, 8
	ret	0
_tls1_check_cert_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_get_formatlist
_TEXT	SEGMENT
_s$ = 8							; size = 4
_pformats$ = 12						; size = 4
_num_formats$ = 16					; size = 4
_tls1_get_formatlist PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 835
	mov	ecx, DWORD PTR _s$[esp-4]
; Line 836
	mov	eax, DWORD PTR _pformats$[esp-4]
	mov	edx, DWORD PTR [ecx+328]
	test	edx, edx
	je	SHORT $LN2@tls1_get_f
	mov	DWORD PTR [eax], edx
; Line 841
	mov	eax, DWORD PTR _num_formats$[esp-4]
	mov	ecx, DWORD PTR [ecx+324]
	mov	DWORD PTR [eax], ecx
; Line 846
	ret	0
$LN2@tls1_get_f:
; Line 839
	mov	DWORD PTR [eax], OFFSET _ecformats_default
; Line 841
	mov	eax, DWORD PTR [ecx+152]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _num_formats$[esp-4]
	and	ecx, 196608				; 00030000H
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 3
	mov	DWORD PTR [eax], ecx
; Line 846
	ret	0
_tls1_get_formatlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_check_ec_key
_TEXT	SEGMENT
_num_curves$ = -4					; size = 4
_s$ = 8							; size = 4
_curve_id$ = 12						; size = 4
_pcurves$ = 16						; size = 4
_comp_id$ = 16						; size = 4
_tls1_check_ec_key PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 782
	mov	eax, 4
	call	__chkstk
; Line 790
	mov	eax, DWORD PTR _s$[esp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _comp_id$[esp+8]
	test	esi, esi
	je	SHORT $LN13@tls1_check
	mov	ecx, DWORD PTR [eax+192]
	mov	edx, DWORD PTR [ecx+216]
	test	edx, edx
	je	SHORT $LN13@tls1_check
; Line 792
	mov	ecx, DWORD PTR [ecx+212]
; Line 793
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN39@tls1_check
; Line 794
	mov	bl, BYTE PTR [esi]
$LL4@tls1_check:
	cmp	bl, BYTE PTR [edx+eax]
	je	SHORT $LN39@tls1_check
; Line 793
	inc	eax
	cmp	eax, ecx
	jb	SHORT $LL4@tls1_check
$LN39@tls1_check:
; Line 797
	cmp	eax, ecx
	jne	SHORT $LN42@tls1_check
; Line 798
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 827
	pop	ecx
	ret	0
$LN42@tls1_check:
	mov	eax, DWORD PTR _s$[esp+8]
$LN13@tls1_check:
	push	ebp
; Line 800
	mov	ebp, DWORD PTR _curve_id$[esp+12]
	test	ebp, ebp
	jne	SHORT $LN14@tls1_check
; Line 801
	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	esi
	pop	ebx
; Line 827
	pop	ecx
	ret	0
$LN14@tls1_check:
	push	edi
; Line 803
	xor	edi, edi
$LL7@tls1_check:
; Line 804
	lea	ecx, DWORD PTR _num_curves$[esp+20]
	push	ecx
	lea	ecx, DWORD PTR _pcurves$[esp+20]
	push	ecx
	push	edi
	push	eax
	call	_tls1_get_curvelist
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN26@tls1_check
; Line 806
	mov	esi, DWORD PTR _num_curves$[esp+20]
	cmp	edi, 1
	jne	SHORT $LN16@tls1_check
	test	esi, esi
	je	SHORT $LN6@tls1_check
$LN16@tls1_check:
; Line 816
	xor	edx, edx
	test	esi, esi
	je	SHORT $LN25@tls1_check
; Line 817
	mov	bl, BYTE PTR [ebp]
	mov	ecx, DWORD PTR _pcurves$[esp+16]
$LL10@tls1_check:
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $LN8@tls1_check
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [ebp+1]
	je	SHORT $LN40@tls1_check
$LN8@tls1_check:
; Line 816
	inc	edx
	add	ecx, 2
	cmp	edx, esi
	jb	SHORT $LL10@tls1_check
$LN40@tls1_check:
	mov	DWORD PTR _pcurves$[esp+16], ecx
$LN25@tls1_check:
; Line 820
	cmp	edx, esi
	je	SHORT $LN26@tls1_check
; Line 823
	mov	eax, DWORD PTR _s$[esp+16]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN6@tls1_check
; Line 803
	inc	edi
	cmp	edi, 1
	jle	SHORT $LL7@tls1_check
$LN6@tls1_check:
	pop	edi
	pop	ebp
	pop	esi
; Line 826
	mov	eax, 1
	pop	ebx
; Line 827
	pop	ecx
	ret	0
$LN26@tls1_check:
	pop	edi
	pop	ebp
	pop	esi
; Line 805
	xor	eax, eax
	pop	ebx
; Line 827
	pop	ecx
	ret	0
_tls1_check_ec_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_ec_id
_TEXT	SEGMENT
_curve_id$ = 8						; size = 4
_comp_id$ = 12						; size = 4
_ec$ = 16						; size = 4
_tls1_set_ec_id PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 734
	push	esi
; Line 738
	mov	esi, DWORD PTR _ec$[esp]
	test	esi, esi
	jne	SHORT $LN2@tls1_set_e
; Line 739
	xor	eax, eax
	pop	esi
; Line 777
	ret	0
$LN2@tls1_set_e:
	push	edi
; Line 741
	push	esi
	call	_EC_KEY_get0_group
	mov	edi, eax
	add	esp, 4
; Line 742
	test	edi, edi
	je	SHORT $LN21@tls1_set_e
; Line 744
	push	edi
	call	_EC_GROUP_method_of
	add	esp, 4
; Line 745
	test	eax, eax
	jne	SHORT $LN4@tls1_set_e
$LN21@tls1_set_e:
	pop	edi
; Line 746
	xor	eax, eax
	pop	esi
; Line 777
	ret	0
$LN4@tls1_set_e:
	push	ebx
; Line 747
	push	eax
	call	_EC_METHOD_get_field_type
	xor	ebx, ebx
	cmp	eax, 406				; 00000196H
; Line 752
	push	edi
	sete	bl
	call	_EC_GROUP_get_curve_name
; Line 753
	push	eax
	call	_tls1_ec_nid2curve_id
; Line 756
	mov	ecx, DWORD PTR _curve_id$[esp+20]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@tls1_set_e
	mov	BYTE PTR [ecx], 0
; Line 758
	jmp	SHORT $LN20@tls1_set_e
$LN7@tls1_set_e:
; Line 760
	test	ebx, ebx
	mov	BYTE PTR [ecx], 255			; 000000ffH
	sete	al
	inc	al
$LN20@tls1_set_e:
; Line 765
	mov	edi, DWORD PTR _comp_id$[esp+8]
	mov	BYTE PTR [ecx+1], al
	test	edi, edi
	je	SHORT $LN14@tls1_set_e
; Line 766
	push	esi
	call	_EC_KEY_get0_public_key
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@tls1_set_e
	pop	ebx
	pop	edi
	pop	esi
; Line 777
	ret	0
$LN12@tls1_set_e:
; Line 768
	push	esi
	call	_EC_KEY_get_conv_form
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN13@tls1_set_e
; Line 769
	test	ebx, ebx
	pop	ebx
	sete	al
	inc	al
	mov	BYTE PTR [edi], al
; Line 776
	mov	eax, 1
	pop	edi
	pop	esi
; Line 777
	ret	0
$LN13@tls1_set_e:
; Line 774
	mov	BYTE PTR [edi], 0
$LN14@tls1_set_e:
	pop	ebx
	pop	edi
; Line 776
	mov	eax, 1
	pop	esi
; Line 777
	ret	0
_tls1_set_ec_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _nid_cb
_TEXT	SEGMENT
_etmp$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_elem$ = 8						; size = 4
_len$ = 12						; size = 4
_arg$ = 16						; size = 4
_nid_cb	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 691
	mov	eax, 24					; 00000018H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+24], eax
	mov	eax, DWORD PTR _elem$[esp+20]
	push	esi
	mov	esi, DWORD PTR _arg$[esp+24]
; Line 696
	test	eax, eax
	jne	SHORT $LN5@nid_cb
$LN22@nid_cb:
; Line 697
	xor	eax, eax
	pop	esi
; Line 716
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN5@nid_cb:
; Line 698
	cmp	DWORD PTR [esi], 28			; 0000001cH
	je	SHORT $LN22@nid_cb
; Line 700
	push	edi
	mov	edi, DWORD PTR _len$[esp+28]
	cmp	edi, 19					; 00000013H
	jg	$LN16@nid_cb
; Line 702
	push	edi
	push	eax
	lea	eax, DWORD PTR _etmp$[esp+40]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 703
	cmp	edi, 20					; 00000014H
	jae	$LN23@nid_cb
; Line 704
	lea	eax, DWORD PTR _etmp$[esp+32]
	mov	BYTE PTR _etmp$[esp+edi+32], 0
	push	eax
	call	_EC_curve_nist2nid
	mov	edx, eax
	add	esp, 4
; Line 705
	test	edx, edx
	jne	SHORT $LN10@nid_cb
; Line 706
	lea	eax, DWORD PTR _etmp$[esp+32]
	push	eax
	call	_OBJ_sn2nid
	mov	edx, eax
	add	esp, 4
; Line 707
	test	edx, edx
	jne	SHORT $LN10@nid_cb
; Line 708
	lea	eax, DWORD PTR _etmp$[esp+32]
	push	eax
	call	_OBJ_ln2nid
	mov	edx, eax
	add	esp, 4
; Line 709
	test	edx, edx
	je	SHORT $LN16@nid_cb
$LN10@nid_cb:
; Line 711
	mov	edi, DWORD PTR [esi]
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN3@nid_cb
	lea	eax, DWORD PTR [esi+4]
$LL4@nid_cb:
; Line 712
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN16@nid_cb
; Line 711
	inc	ecx
	add	eax, 4
	cmp	ecx, edi
	jb	SHORT $LL4@nid_cb
$LN3@nid_cb:
; Line 714
	mov	DWORD PTR [esi+edi*4+4], edx
; Line 715
	mov	eax, 1
	inc	DWORD PTR [esi]
	pop	edi
	pop	esi
; Line 716
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN16@nid_cb:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	eax, eax
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN23@nid_cb:
; Line 703
	call	___report_rangecheckfailure
$LN24@nid_cb:
$LN21@nid_cb:
	int	3
_nid_cb	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_get_curvelist
_TEXT	SEGMENT
_s$ = 8							; size = 4
_sess$ = 12						; size = 4
_pcurves$ = 16						; size = 4
_num_curves$ = 20					; size = 4
_tls1_get_curvelist PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 468
	cmp	DWORD PTR _sess$[esp-4], 0
; Line 469
	mov	edx, DWORD PTR _s$[esp-4]
	push	esi
	je	SHORT $LN4@tls1_get_c
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [eax+224]
	mov	eax, DWORD PTR _pcurves$[esp]
	mov	DWORD PTR [eax], ecx
; Line 470
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [eax+220]
; Line 471
	jmp	$LN12@tls1_get_c
$LN4@tls1_get_c:
; Line 473
	mov	eax, DWORD PTR [edx+152]
	mov	eax, DWORD PTR [eax+56]
	and	eax, 196608				; 00030000H
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN7@tls1_get_c
	cmp	eax, 131072				; 00020000H
	je	SHORT $LN8@tls1_get_c
	cmp	eax, 196608				; 00030000H
	je	SHORT $LN6@tls1_get_c
; Line 489
	mov	esi, DWORD PTR _pcurves$[esp]
	mov	eax, DWORD PTR [edx+336]
	mov	DWORD PTR [esi], eax
; Line 490
	mov	ecx, DWORD PTR [edx+332]
; Line 492
	test	eax, eax
	jne	SHORT $LN12@tls1_get_c
; Line 500
	cmp	DWORD PTR [edx+36], eax
	je	SHORT $LN13@tls1_get_c
	mov	eax, DWORD PTR [edx+152]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN13@tls1_get_c
; Line 504
	mov	DWORD PTR [esi], OFFSET _eccurves_all
; Line 505
	mov	ecx, 56					; 00000038H
	jmp	SHORT $LN12@tls1_get_c
$LN13@tls1_get_c:
; Line 501
	mov	DWORD PTR [esi], OFFSET _eccurves_auto
; Line 502
	mov	ecx, 26					; 0000001aH
	jmp	SHORT $LN12@tls1_get_c
$LN6@tls1_get_c:
; Line 476
	mov	ecx, 4
; Line 477
	jmp	SHORT $LN17@tls1_get_c
$LN8@tls1_get_c:
; Line 485
	mov	eax, DWORD PTR _pcurves$[esp]
; Line 486
	mov	ecx, 2
	mov	DWORD PTR [eax], OFFSET _suiteb_curves+2
; Line 487
	jmp	SHORT $LN12@tls1_get_c
$LN7@tls1_get_c:
; Line 481
	mov	ecx, 2
$LN17@tls1_get_c:
; Line 480
	mov	eax, DWORD PTR _pcurves$[esp]
	mov	DWORD PTR [eax], OFFSET _suiteb_curves
$LN12@tls1_get_c:
; Line 511
	pop	esi
	test	cl, 1
	je	SHORT $LN14@tls1_get_c
; Line 512
	push	512					; 00000200H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	68					; 00000044H
	push	338					; 00000152H
	push	20					; 00000014H
	call	_ERR_put_error
; Line 513
	mov	eax, DWORD PTR _num_curves$[esp+16]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [eax], 0
; Line 514
	xor	eax, eax
; Line 519
	ret	0
$LN14@tls1_get_c:
; Line 516
	mov	eax, DWORD PTR _num_curves$[esp-4]
	shr	ecx, 1
	mov	DWORD PTR [eax], ecx
; Line 517
	mov	eax, 1
; Line 519
	ret	0
_tls1_get_curvelist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_check_serverhello_tlsext
_TEXT	SEGMENT
_al$ = -4						; size = 4
_s$ = 8							; size = 4
_ssl_check_serverhello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3119
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 3135
	mov	esi, DWORD PTR _s$[esp+4]
	push	edi
	mov	DWORD PTR _al$[esp+12], 112		; 00000070H
	cmp	DWORD PTR [esi+328], 0
	je	SHORT $LN10@ssl_check_
	cmp	DWORD PTR [esi+324], 0
	jbe	SHORT $LN10@ssl_check_
	mov	edi, DWORD PTR [esi+192]
	mov	edx, DWORD PTR [edi+216]
	test	edx, edx
	je	SHORT $LN10@ssl_check_
	mov	edi, DWORD PTR [edi+212]
	test	edi, edi
	je	SHORT $LN10@ssl_check_
; Line 3129
	mov	eax, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+836]
; Line 3135
	test	BYTE PTR [eax+12], 224			; 000000e0H
	jne	SHORT $LN8@ssl_check_
	test	BYTE PTR [eax+16], 64			; 00000040H
	je	SHORT $LN10@ssl_check_
$LN8@ssl_check_:
; Line 3142
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN27@ssl_check_
	npad	1
$LL4@ssl_check_:
; Line 3143
	mov	al, BYTE PTR [edx]
	lea	edx, DWORD PTR [edx+1]
	test	al, al
	je	SHORT $LN10@ssl_check_
; Line 3142
	inc	ecx
	cmp	ecx, edi
	jb	SHORT $LL4@ssl_check_
$LN27@ssl_check_:
; Line 3149
	push	3150					; 00000c4eH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	157					; 0000009dH
	push	280					; 00000118H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 3151
	or	eax, -1
	pop	edi
	pop	esi
; Line 3233
	pop	ecx
	ret	0
$LN10@ssl_check_:
; Line 3157
	mov	eax, DWORD PTR [esi+228]
	xor	edi, edi
	test	eax, eax
	je	SHORT $LN11@ssl_check_
	mov	ecx, DWORD PTR [eax+256]
	test	ecx, ecx
	jne	SHORT $LN29@ssl_check_
$LN11@ssl_check_:
; Line 3162
	mov	eax, DWORD PTR [esi+368]
	test	eax, eax
	je	SHORT $LN13@ssl_check_
	mov	ecx, DWORD PTR [eax+256]
	test	ecx, ecx
	je	SHORT $LN13@ssl_check_
$LN29@ssl_check_:
; Line 3163
	push	DWORD PTR [eax+260]
	lea	eax, DWORD PTR _al$[esp+16]
	push	eax
	push	esi
	call	ecx
	mov	edi, eax
	add	esp, 12					; 0000000cH
$LN13@ssl_check_:
; Line 3194
	push	DWORD PTR [esi+312]
	call	_CRYPTO_free
	add	esp, 4
; Line 3195
	mov	DWORD PTR [esi+312], 0
; Line 3202
	cmp	DWORD PTR [esi+296], -1
	mov	DWORD PTR [esi+316], -1
	je	SHORT $LN28@ssl_check_
	cmp	DWORD PTR [esi+300], 0
	jne	SHORT $LN28@ssl_check_
	cmp	DWORD PTR [esi+108], 0
	jne	SHORT $LN28@ssl_check_
	mov	eax, DWORD PTR [esi+228]
	test	eax, eax
	je	SHORT $LN28@ssl_check_
	mov	ecx, DWORD PTR [eax+316]
	test	ecx, ecx
	je	SHORT $LN28@ssl_check_
; Line 3208
	push	DWORD PTR [eax+320]
	push	esi
	call	ecx
	add	esp, 8
; Line 3209
	test	eax, eax
	jne	SHORT $LN30@ssl_check_
; Line 3210
	mov	eax, 113				; 00000071H
	mov	DWORD PTR _al$[esp+12], eax
; Line 3211
	lea	edi, DWORD PTR [eax-111]
; Line 3213
	jmp	SHORT $LN16@ssl_check_
$LN30@ssl_check_:
	jns	SHORT $LN28@ssl_check_
; Line 3214
	mov	eax, 80					; 00000050H
	mov	DWORD PTR _al$[esp+12], eax
; Line 3215
	lea	edi, DWORD PTR [eax-78]
	jmp	SHORT $LN16@ssl_check_
$LN28@ssl_check_:
	mov	eax, DWORD PTR _al$[esp+12]
$LN16@ssl_check_:
; Line 3219
	sub	edi, 1
	je	SHORT $LN18@ssl_check_
	sub	edi, 1
	je	SHORT $LN17@ssl_check_
	sub	edi, 1
	jne	SHORT $LN20@ssl_check_
; Line 3229
	mov	DWORD PTR [esi+292], edi
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
; Line 3233
	pop	ecx
	ret	0
$LN17@ssl_check_:
; Line 3221
	push	eax
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 3222
	or	eax, -1
	pop	edi
	pop	esi
; Line 3233
	pop	ecx
	ret	0
$LN18@ssl_check_:
; Line 3225
	push	eax
	push	1
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
$LN20@ssl_check_:
; Line 3226
	pop	edi
	mov	eax, 1
	pop	esi
; Line 3233
	pop	ecx
	ret	0
_ssl_check_serverhello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_check_clienthello_tlsext_early
_TEXT	SEGMENT
_al$ = -4						; size = 4
_s$ = 8							; size = 4
_ssl_check_clienthello_tlsext_early PROC		; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2905
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 2920
	mov	esi, DWORD PTR _s$[esp+4]
	mov	ecx, 112				; 00000070H
	push	edi
	mov	eax, 3
	mov	DWORD PTR _al$[esp+12], ecx
	mov	edx, DWORD PTR [esi+228]
	test	edx, edx
	je	SHORT $LN4@ssl_check_
	mov	edi, DWORD PTR [edx+256]
	test	edi, edi
	jne	SHORT $LN12@ssl_check_
$LN4@ssl_check_:
; Line 2925
	mov	edx, DWORD PTR [esi+368]
	test	edx, edx
	je	SHORT $LN6@ssl_check_
	mov	edi, DWORD PTR [edx+256]
	test	edi, edi
	je	SHORT $LN6@ssl_check_
$LN12@ssl_check_:
; Line 2926
	push	DWORD PTR [edx+260]
	lea	eax, DWORD PTR _al$[esp+16]
	push	eax
	push	esi
	call	edi
	mov	ecx, DWORD PTR _al$[esp+24]
	add	esp, 12					; 0000000cH
$LN6@ssl_check_:
; Line 2998
	sub	eax, 1
	je	SHORT $LN8@ssl_check_
	sub	eax, 1
	je	SHORT $LN7@ssl_check_
	sub	eax, 1
	jne	SHORT $LN10@ssl_check_
; Line 3008
	mov	DWORD PTR [esi+292], eax
	mov	eax, 1
	pop	edi
	pop	esi
; Line 3012
	pop	ecx
	ret	0
$LN7@ssl_check_:
; Line 3000
	push	ecx
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 3001
	or	eax, -1
	pop	edi
	pop	esi
; Line 3012
	pop	ecx
	ret	0
$LN8@ssl_check_:
; Line 3004
	push	ecx
	push	1
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
$LN10@ssl_check_:
; Line 3005
	pop	edi
	mov	eax, 1
	pop	esi
; Line 3012
	pop	ecx
	ret	0
_ssl_check_clienthello_tlsext_early ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls_decrypt_ticket
_TEXT	SEGMENT
_slen$ = -436						; size = 4
_mlen$ = -432						; size = 4
_p$ = -428						; size = 4
_sess_id$GSCopy$1$ = -424				; size = 4
_psess$GSCopy$1$ = -420					; size = 4
_hctx$ = -416						; size = 208
_ctx$ = -208						; size = 140
_tick_hmac$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_etick$ = 12						; size = 4
_eticklen$ = 16						; size = 4
_sess_id$ = 20						; size = 4
_sesslen$ = 24						; size = 4
_psess$ = 28						; size = 4
_tls_decrypt_ticket PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3391
	mov	eax, 436				; 000001b4H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+436], eax
	mov	eax, DWORD PTR _sess_id$[esp+432]
	push	ebx
	mov	ebx, DWORD PTR _etick$[esp+436]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+444]
	push	edi
	mov	edi, DWORD PTR _eticklen$[esp+448]
	mov	DWORD PTR _sess_id$GSCopy$1$[esp+452], eax
	mov	eax, DWORD PTR _psess$[esp+448]
; Line 3399
	mov	ebp, DWORD PTR [esi+368]
	mov	DWORD PTR _psess$GSCopy$1$[esp+452], eax
; Line 3401
	cmp	edi, 48					; 00000030H
	jl	$LN24@tls_decryp
; Line 3404
	lea	eax, DWORD PTR _hctx$[esp+452]
	push	eax
	call	_HMAC_CTX_init
; Line 3405
	lea	eax, DWORD PTR _ctx$[esp+456]
	push	eax
	call	_EVP_CIPHER_CTX_init
; Line 3406
	mov	ecx, DWORD PTR [ebp+312]
	add	esp, 8
	test	ecx, ecx
	je	SHORT $LN3@tls_decryp
; Line 3408
	push	0
	lea	eax, DWORD PTR _hctx$[esp+456]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+460]
	push	eax
	lea	eax, DWORD PTR [ebx+16]
	push	eax
	push	ebx
	push	esi
	call	ecx
	add	esp, 24					; 00000018H
; Line 3410
	test	eax, eax
	js	$LN28@tls_decryp
; Line 3412
	je	$LN24@tls_decryp
; Line 3414
	cmp	eax, 2
	jne	SHORT $LN26@tls_decryp
; Line 3415
	lea	ebp, DWORD PTR [eax-1]
; Line 3416
	jmp	SHORT $LN9@tls_decryp
$LN3@tls_decryp:
; Line 3418
	lea	edx, DWORD PTR [ebp+264]
	mov	ecx, ebx
	mov	esi, 12					; 0000000cH
	npad	7
$LL25@tls_decryp:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	$LN24@tls_decryp
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL25@tls_decryp
; Line 3422
	push	0
	call	_EVP_sha256
	push	eax
	push	16					; 00000010H
	lea	eax, DWORD PTR [ebp+280]
	push	eax
	lea	eax, DWORD PTR _hctx$[esp+468]
	push	eax
	call	_HMAC_Init_ex
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$err$30
	lea	eax, DWORD PTR [ebx+16]
	push	eax
	lea	eax, DWORD PTR [ebp+296]
	push	eax
	push	0
	call	_EVP_aes_128_cbc
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+468]
	push	eax
	call	_EVP_DecryptInit_ex
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$err$30
$LN26@tls_decryp:
	xor	ebp, ebp
$LN9@tls_decryp:
; Line 3432
	push	DWORD PTR _hctx$[esp+452]
	call	_EVP_MD_size
	add	esp, 4
	mov	DWORD PTR _mlen$[esp+452], eax
; Line 3433
	test	eax, eax
	js	$err$30
; Line 3436
	sub	edi, eax
; Line 3439
	lea	eax, DWORD PTR _hctx$[esp+452]
	push	edi
	push	ebx
	push	eax
	call	_HMAC_Update
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$err$30
	push	0
	lea	eax, DWORD PTR _tick_hmac$[esp+456]
	push	eax
	lea	eax, DWORD PTR _hctx$[esp+460]
	push	eax
	call	_HMAC_Final
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$err$30
; Line 3442
	lea	eax, DWORD PTR _hctx$[esp+452]
	push	eax
	call	_HMAC_CTX_cleanup
; Line 3443
	push	DWORD PTR _mlen$[esp+456]
	lea	eax, DWORD PTR [edi+ebx]
	push	eax
	lea	eax, DWORD PTR _tick_hmac$[esp+464]
	push	eax
	call	_CRYPTO_memcmp
	add	esp, 16					; 00000010H
	test	eax, eax
; Line 3444
	lea	eax, DWORD PTR _ctx$[esp+452]
	push	eax
	je	SHORT $LN14@tls_decryp
	call	_EVP_CIPHER_CTX_cleanup
	add	esp, 4
$LN24@tls_decryp:
; Line 3419
	mov	eax, 2
$LN1@tls_decryp:
; Line 3494
	mov	ecx, DWORD PTR __$ArrayPad$[esp+452]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 436				; 000001b4H
	ret	0
$LN14@tls_decryp:
; Line 3449
	call	_EVP_CIPHER_CTX_iv_length
	add	eax, 16					; 00000010H
	add	eax, ebx
	mov	DWORD PTR _p$[esp+456], eax
; Line 3450
	lea	eax, DWORD PTR _ctx$[esp+456]
	push	eax
	call	_EVP_CIPHER_CTX_iv_length
	mov	ecx, -16				; fffffff0H
	sub	ecx, eax
; Line 3451
	push	3451					; 00000d7bH
	add	edi, ecx
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	edi
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 20					; 00000014H
; Line 3453
	test	esi, esi
	je	$LN16@tls_decryp
	push	edi
	push	DWORD PTR _p$[esp+456]
	lea	eax, DWORD PTR _slen$[esp+460]
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+464]
	push	esi
	push	eax
	call	_EVP_DecryptUpdate
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	$LN16@tls_decryp
; Line 3458
	lea	eax, DWORD PTR _mlen$[esp+452]
	push	eax
	mov	eax, DWORD PTR _slen$[esp+456]
	add	eax, esi
	push	eax
	lea	eax, DWORD PTR _ctx$[esp+460]
	push	eax
	call	_EVP_DecryptFinal
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	SHORT $LN17@tls_decryp
; Line 3459
	lea	eax, DWORD PTR _ctx$[esp+452]
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
; Line 3460
	push	esi
	call	_CRYPTO_free
	add	esp, 8
; Line 3461
	jmp	$LN24@tls_decryp
$LN17@tls_decryp:
; Line 3463
	mov	eax, DWORD PTR _mlen$[esp+452]
	add	DWORD PTR _slen$[esp+452], eax
; Line 3464
	lea	eax, DWORD PTR _ctx$[esp+452]
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
; Line 3467
	push	DWORD PTR _slen$[esp+456]
	lea	eax, DWORD PTR _p$[esp+460]
	mov	DWORD PTR _p$[esp+460], esi
	push	eax
	push	0
	call	_d2i_SSL_SESSION
; Line 3468
	push	esi
	mov	edi, eax
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
; Line 3469
	test	edi, edi
	je	SHORT $LN21@tls_decryp
; Line 3476
	mov	esi, DWORD PTR _sesslen$[esp+448]
	test	esi, esi
	je	SHORT $LN19@tls_decryp
; Line 3477
	push	esi
	push	DWORD PTR _sess_id$GSCopy$1$[esp+456]
	lea	eax, DWORD PTR [edi+72]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN19@tls_decryp:
; Line 3479
	mov	eax, DWORD PTR _psess$GSCopy$1$[esp+452]
	mov	DWORD PTR [edi+68], esi
	mov	DWORD PTR [eax], edi
; Line 3480
	xor	eax, eax
	test	ebp, ebp
	setne	al
	add	eax, 3
; Line 3483
	jmp	$LN1@tls_decryp
$LN21@tls_decryp:
; Line 3485
	call	_ERR_clear_error
; Line 3489
	jmp	$LN24@tls_decryp
$LN16@tls_decryp:
; Line 3454
	lea	eax, DWORD PTR _ctx$[esp+452]
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
; Line 3455
	push	esi
	call	_CRYPTO_free
	add	esp, 8
$LN28@tls_decryp:
; Line 3456
	or	eax, -1
	jmp	$LN1@tls_decryp
$err$30:
; Line 3491
	lea	eax, DWORD PTR _ctx$[esp+452]
	push	eax
	call	_EVP_CIPHER_CTX_cleanup
; Line 3492
	lea	eax, DWORD PTR _hctx$[esp+456]
	push	eax
	call	_HMAC_CTX_cleanup
	add	esp, 8
; Line 3493
	or	eax, -1
	jmp	$LN1@tls_decryp
_tls_decrypt_ticket ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_set_client_disabled
_TEXT	SEGMENT
_sigalgs$ = -4						; size = 4
_have_ecdsa$1$ = 8					; size = 4
_s$ = 8							; size = 4
_ssl_set_client_disabled PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1153
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1154
	mov	edi, DWORD PTR _s$[esp+16]
; Line 1157
	xor	ebx, ebx
	xor	ebp, ebp
	mov	DWORD PTR _have_ecdsa$1$[esp+16], ebx
	mov	esi, DWORD PTR [edi+152]
; Line 1158
	mov	DWORD PTR [esi+12], ebx
; Line 1159
	mov	DWORD PTR [esi+8], ebx
; Line 1161
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	mov	eax, DWORD PTR [eax+56]
	and	eax, 8
	je	SHORT $LN9@ssl_set_cl
	cmp	DWORD PTR [edi+272], 65277		; 0000fefdH
	jle	SHORT $LN7@ssl_set_cl
$LN9@ssl_set_cl:
	test	eax, eax
	jne	SHORT $LN10@ssl_set_cl
	cmp	DWORD PTR [edi+272], 771		; 00000303H
	jl	SHORT $LN10@ssl_set_cl
$LN7@ssl_set_cl:
; Line 1164
	mov	DWORD PTR [esi+24], ebx
	jmp	SHORT $LN8@ssl_set_cl
$LN10@ssl_set_cl:
; Line 1162
	mov	DWORD PTR [esi+24], 4
$LN8@ssl_set_cl:
; Line 1169
	lea	eax, DWORD PTR _sigalgs$[esp+20]
	push	eax
	push	edi
	call	_tls12_get_psigalgs
	add	esp, 8
; Line 1170
	test	eax, eax
	je	SHORT $LN24@ssl_set_cl
; Line 1169
	mov	ecx, DWORD PTR _sigalgs$[esp+20]
	lea	edx, DWORD PTR [eax-1]
	shr	edx, 1
	inc	ecx
	inc	edx
	npad	7
$LL4@ssl_set_cl:
; Line 1171
	movzx	eax, BYTE PTR [ecx]
	sub	eax, 1
	je	SHORT $LN11@ssl_set_cl
	sub	eax, 1
	je	SHORT $LN12@ssl_set_cl
	sub	eax, 1
	jne	SHORT $LN2@ssl_set_cl
; Line 1184
	mov	DWORD PTR _have_ecdsa$1$[esp+16], 1
	jmp	SHORT $LN2@ssl_set_cl
$LN12@ssl_set_cl:
; Line 1179
	mov	ebp, 1
; Line 1180
	jmp	SHORT $LN2@ssl_set_cl
$LN11@ssl_set_cl:
; Line 1174
	mov	ebx, 1
$LN2@ssl_set_cl:
; Line 1170
	add	ecx, 2
	sub	edx, 1
	jne	SHORT $LL4@ssl_set_cl
; Line 1193
	test	ebx, ebx
	jne	SHORT $LN14@ssl_set_cl
$LN24@ssl_set_cl:
; Line 1194
	mov	DWORD PTR [esi+12], 1
; Line 1195
	mov	DWORD PTR [esi+8], 34			; 00000022H
$LN14@ssl_set_cl:
; Line 1197
	test	ebp, ebp
	jne	SHORT $LN15@ssl_set_cl
; Line 1198
	or	DWORD PTR [esi+12], 2
; Line 1199
	or	DWORD PTR [esi+8], 4
$LN15@ssl_set_cl:
; Line 1201
	cmp	DWORD PTR _have_ecdsa$1$[esp+16], 0
	jne	SHORT $LN16@ssl_set_cl
; Line 1202
	or	DWORD PTR [esi+12], 64			; 00000040H
; Line 1203
	or	DWORD PTR [esi+8], 64			; 00000040H
$LN16@ssl_set_cl:
; Line 1213
	cmp	DWORD PTR [edi+220], 0
	jne	SHORT $LN17@ssl_set_cl
; Line 1214
	or	DWORD PTR [esi+12], 128			; 00000080H
; Line 1215
	or	DWORD PTR [esi+8], 256			; 00000100H
$LN17@ssl_set_cl:
; Line 1219
	test	DWORD PTR [edi+464], 1024		; 00000400H
; Line 1224
	mov	DWORD PTR [esi+4], 1
	jne	SHORT $LN18@ssl_set_cl
; Line 1221
	or	DWORD PTR [esi+12], 1024		; 00000400H
	or	DWORD PTR [esi+8], 1024			; 00000400H
$LN18@ssl_set_cl:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1225
	pop	ecx
	ret	0
_ssl_set_client_disabled ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_check_peer_sigalg
_TEXT	SEGMENT
_comp_id$1 = -5						; size = 1
_sent_sigs$ = -4					; size = 4
_curve_id$2 = -4					; size = 2
_pmd$ = 8						; size = 4
_s$ = 12						; size = 4
_sig$ = 16						; size = 4
_pkey$ = 20						; size = 4
_tls12_check_peer_sigalg PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1075
	mov	eax, 8
	call	__chkstk
	push	edi
; Line 3522
	mov	edi, DWORD PTR _pkey$[esp+8]
	xor	eax, eax
	mov	ecx, DWORD PTR [edi]
$LL31@tls12_chec:
	cmp	DWORD PTR _tls12_sig[eax*8], ecx
	je	SHORT $LN36@tls12_chec
; Line 3521
	inc	eax
	cmp	eax, 3
	jb	SHORT $LL31@tls12_chec
; Line 1081
	or	eax, -1
	pop	edi
; Line 1144
	add	esp, 8
	ret	0
$LN36@tls12_chec:
; Line 3523
	mov	edx, DWORD PTR _tls12_sig[eax*8+4]
; Line 1080
	cmp	edx, -1
	jne	SHORT $LN5@tls12_chec
; Line 1081
	or	eax, edx
	pop	edi
; Line 1144
	add	esp, 8
	ret	0
$LN5@tls12_chec:
	push	esi
; Line 1083
	mov	esi, DWORD PTR _sig$[esp+12]
	movzx	eax, BYTE PTR [esi+1]
	cmp	edx, eax
	je	SHORT $LN6@tls12_chec
; Line 1084
	push	1084					; 0000043cH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	370					; 00000172H
	push	333					; 0000014dH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1085
	xor	eax, eax
	pop	esi
	pop	edi
; Line 1144
	add	esp, 8
	ret	0
$LN6@tls12_chec:
	push	ebp
; Line 1088
	cmp	ecx, 408				; 00000198H
	jne	$LN7@tls12_chec
; Line 1091
	push	DWORD PTR [edi+20]
	lea	eax, DWORD PTR _comp_id$1[esp+24]
	push	eax
	lea	eax, DWORD PTR _curve_id$2[esp+28]
	push	eax
	call	_tls1_set_ec_id
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN49@tls12_chec
; Line 1093
	mov	edi, DWORD PTR _s$[esp+16]
	cmp	DWORD PTR [edi+36], 0
	jne	SHORT $LN10@tls12_chec
	lea	eax, DWORD PTR _comp_id$1[esp+20]
	push	eax
	lea	eax, DWORD PTR _curve_id$2[esp+24]
	push	eax
	push	edi
	call	_tls1_check_ec_key
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@tls12_chec
; Line 1094
	push	1094					; 00000446H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	378					; 0000017aH
; Line 1095
	jmp	$LN48@tls12_chec
$LN10@tls12_chec:
; Line 1098
	mov	eax, DWORD PTR [edi+152]
	mov	ebp, DWORD PTR [eax+56]
	test	ebp, 196608				; 00030000H
	je	SHORT $LN19@tls12_chec
; Line 1099
	mov	ax, WORD PTR _curve_id$2[esp+20]
	test	al, al
	jne	$LN49@tls12_chec
; Line 1101
	cmp	ah, 23					; 00000017H
	jne	SHORT $LN13@tls12_chec
; Line 1102
	cmp	BYTE PTR [esi], 4
	je	SHORT $LN19@tls12_chec
; Line 1103
	push	1104					; 00000450H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	380					; 0000017cH
; Line 1105
	jmp	$LN48@tls12_chec
$LN13@tls12_chec:
; Line 1107
	cmp	ah, 24					; 00000018H
	jne	$LN49@tls12_chec
; Line 1108
	cmp	BYTE PTR [esi], 5
	je	SHORT $LN19@tls12_chec
; Line 1109
	push	1110					; 00000456H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	380					; 0000017cH
; Line 1111
	jmp	$LN48@tls12_chec
$LN7@tls12_chec:
; Line 1116
	mov	edi, DWORD PTR _s$[esp+16]
	mov	eax, DWORD PTR [edi+152]
	mov	ebp, DWORD PTR [eax+56]
	test	ebp, 196608				; 00030000H
	jne	$LN49@tls12_chec
$LN19@tls12_chec:
	push	ebx
; Line 1121
	lea	eax, DWORD PTR _sent_sigs$[esp+24]
	push	eax
	push	edi
	call	_tls12_get_psigalgs
	mov	ebx, eax
	add	esp, 8
; Line 1122
	xor	edx, edx
	test	ebx, ebx
	je	SHORT $LN45@tls12_chec
; Line 1123
	mov	ah, BYTE PTR [esi]
	mov	ecx, DWORD PTR _sent_sigs$[esp+24]
$LL4@tls12_chec:
	cmp	ah, BYTE PTR [ecx]
	jne	SHORT $LN2@tls12_chec
	mov	al, BYTE PTR [esi+1]
	cmp	al, BYTE PTR [ecx+1]
	je	SHORT $LN45@tls12_chec
$LN2@tls12_chec:
; Line 1122
	add	edx, 2
	add	ecx, 2
	cmp	edx, ebx
	jb	SHORT $LL4@tls12_chec
$LN45@tls12_chec:
; Line 1128
	cmp	edx, ebx
	pop	ebx
	jne	SHORT $LN21@tls12_chec
	cmp	BYTE PTR [esi], 2
	jne	SHORT $LN22@tls12_chec
	test	ebp, 196609				; 00030001H
	je	SHORT $LN21@tls12_chec
$LN22@tls12_chec:
; Line 1130
	push	1130					; 0000046aH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	370					; 00000172H
; Line 1131
	jmp	SHORT $LN48@tls12_chec
$LN21@tls12_chec:
; Line 1133
	movzx	eax, BYTE PTR [esi]
	push	eax
	call	_tls12_get_hash
	mov	ecx, DWORD PTR _pmd$[esp+20]
	mov	edx, eax
	add	esp, 4
	mov	DWORD PTR [ecx], edx
; Line 1134
	test	edx, edx
	jne	SHORT $LN23@tls12_chec
; Line 1135
	push	1135					; 0000046fH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	368					; 00000170H
$LN48@tls12_chec:
	push	333					; 0000014dH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN49@tls12_chec:
; Line 1136
	pop	ebp
	pop	esi
	xor	eax, eax
	pop	edi
; Line 1144
	add	esp, 8
	ret	0
$LN23@tls12_chec:
; Line 1141
	mov	eax, DWORD PTR [edi+192]
	test	eax, eax
	je	SHORT $LN24@tls12_chec
	mov	eax, DWORD PTR [eax+152]
	test	eax, eax
	je	SHORT $LN24@tls12_chec
; Line 1142
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+8], edx
$LN24@tls12_chec:
; Line 1143
	pop	ebp
	pop	esi
	mov	eax, 1
	pop	edi
; Line 1144
	add	esp, 8
	ret	0
_tls12_check_peer_sigalg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_get_psigalgs
_TEXT	SEGMENT
_s$ = 8							; size = 4
_psigs$ = 12						; size = 4
_tls12_get_psigalgs PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1042
	mov	ecx, DWORD PTR _s$[esp-4]
	mov	edx, DWORD PTR [ecx+152]
	mov	eax, DWORD PTR [edx+56]
	and	eax, 196608				; 00030000H
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@tls12_get_
	cmp	eax, 131072				; 00020000H
	je	SHORT $LN6@tls12_get_
	cmp	eax, 196608				; 00030000H
	je	SHORT $LN4@tls12_get_
; Line 1057
	cmp	DWORD PTR [ecx+36], 0
	push	esi
	je	SHORT $LN7@tls12_get_
	mov	esi, DWORD PTR [edx+308]
	test	esi, esi
	je	SHORT $LN7@tls12_get_
; Line 1058
	mov	eax, DWORD PTR _psigs$[esp]
	mov	DWORD PTR [eax], esi
; Line 1059
	mov	eax, DWORD PTR [ecx+152]
	pop	esi
	mov	eax, DWORD PTR [eax+312]
; Line 1067
	ret	0
$LN7@tls12_get_:
; Line 1060
	mov	edx, DWORD PTR [edx+300]
; Line 1061
	mov	eax, DWORD PTR _psigs$[esp]
	test	edx, edx
	je	SHORT $LN9@tls12_get_
	mov	DWORD PTR [eax], edx
; Line 1062
	mov	eax, DWORD PTR [ecx+152]
	pop	esi
	mov	eax, DWORD PTR [eax+304]
; Line 1067
	ret	0
$LN9@tls12_get_:
; Line 1064
	mov	DWORD PTR [eax], OFFSET _tls12_sigalgs
; Line 1065
	mov	eax, 30					; 0000001eH
	pop	esi
; Line 1067
	ret	0
$LN4@tls12_get_:
; Line 1044
	mov	eax, DWORD PTR _psigs$[esp-4]
	mov	DWORD PTR [eax], OFFSET _suiteb_sigalgs
; Line 1045
	mov	eax, 4
; Line 1067
	ret	0
$LN6@tls12_get_:
; Line 1052
	mov	eax, DWORD PTR _psigs$[esp-4]
	mov	DWORD PTR [eax], OFFSET _suiteb_sigalgs+2
; Line 1053
	mov	eax, 2
; Line 1067
	ret	0
$LN5@tls12_get_:
; Line 1048
	mov	eax, DWORD PTR _psigs$[esp-4]
	mov	DWORD PTR [eax], OFFSET _suiteb_sigalgs
; Line 1049
	mov	eax, 2
; Line 1067
	ret	0
_tls12_get_psigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_process_sigalgs
_TEXT	SEGMENT
tv334 = -4						; size = 4
_s$ = 8							; size = 4
_tls1_process_sigalgs PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3746
	mov	eax, 4
	call	__chkstk
; Line 3750
	mov	eax, DWORD PTR _s$[esp]
	push	esi
; Line 3752
	push	eax
	mov	esi, DWORD PTR [eax+152]
	call	_tls1_set_shared_sigalgs
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@tls1_proce
	pop	esi
; Line 3820
	pop	ecx
	ret	0
$LN5@tls1_proce:
	push	ebx
; Line 3780
	mov	ebx, DWORD PTR [esi+316]
	push	ebp
	xor	ebp, ebp
; Line 3781
	cmp	DWORD PTR [esi+320], ebp
	jbe	$LN3@tls1_proce
; Line 3780
	add	ebx, 13					; 0000000dH
	push	edi
	npad	1
$LL4@tls1_proce:
; Line 3599
	movzx	eax, BYTE PTR [ebx-1]
	sub	eax, 1
	je	SHORT $LN16@tls1_proce
	sub	eax, 1
	je	SHORT $LN17@tls1_proce
	sub	eax, 1
	jne	$LN2@tls1_proce
; Line 3610
	lea	edi, DWORD PTR [eax+5]
	jmp	SHORT $LN35@tls1_proce
$LN17@tls1_proce:
; Line 3606
	mov	edi, 2
	jmp	SHORT $LN35@tls1_proce
$LN16@tls1_proce:
; Line 3602
	mov	edi, 1
$LN35@tls1_proce:
; Line 3783
	lea	eax, DWORD PTR [edi*8]
	sub	eax, edi
	add	eax, 17					; 00000011H
	cmp	DWORD PTR [esi+eax*4], 0
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR tv334[esp+20], eax
	jne	SHORT $LN2@tls1_proce
; Line 3564
	movzx	eax, BYTE PTR [ebx]
	dec	eax
	cmp	eax, 5
	ja	SHORT $LN29@tls1_proce
	jmp	DWORD PTR $LN37@tls1_proce[eax*4]
$LN23@tls1_proce:
; Line 3571
	call	_EVP_md5
	mov	edx, eax
	jmp	SHORT $LN20@tls1_proce
$LN24@tls1_proce:
; Line 3575
	call	_EVP_sha1
	mov	edx, eax
	jmp	SHORT $LN20@tls1_proce
$LN25@tls1_proce:
; Line 3579
	call	_EVP_sha224
	mov	edx, eax
	jmp	SHORT $LN20@tls1_proce
$LN26@tls1_proce:
; Line 3582
	call	_EVP_sha256
	mov	edx, eax
	jmp	SHORT $LN20@tls1_proce
$LN27@tls1_proce:
; Line 3586
	call	_EVP_sha384
	mov	edx, eax
	jmp	SHORT $LN20@tls1_proce
$LN28@tls1_proce:
; Line 3589
	call	_EVP_sha512
	mov	edx, eax
	jmp	SHORT $LN20@tls1_proce
$LN29@tls1_proce:
; Line 3592
	xor	edx, edx
$LN20@tls1_proce:
; Line 3785
	mov	eax, DWORD PTR tv334[esp+20]
; Line 3786
	lea	ecx, DWORD PTR [edi+3]
	mov	DWORD PTR [eax], edx
	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	mov	DWORD PTR [esi+eax*4], 256		; 00000100H
; Line 3787
	cmp	edi, 1
	jne	SHORT $LN2@tls1_proce
; Line 3788
	mov	DWORD PTR [esi+84], 256			; 00000100H
; Line 3790
	mov	DWORD PTR [esi+68], edx
$LN2@tls1_proce:
; Line 3781
	inc	ebp
	add	ebx, 16					; 00000010H
	cmp	ebp, DWORD PTR [esi+320]
	jb	$LL4@tls1_proce
	pop	edi
$LN3@tls1_proce:
; Line 3799
	mov	eax, DWORD PTR _s$[esp+12]
	pop	ebp
	pop	ebx
	mov	eax, DWORD PTR [eax+152]
	test	DWORD PTR [eax+56], 196609		; 00030001H
	jne	SHORT $LN11@tls1_proce
; Line 3805
	cmp	DWORD PTR [esi+124], 0
	jne	SHORT $LN9@tls1_proce
; Line 3806
	call	_EVP_sha1
	mov	DWORD PTR [esi+124], eax
$LN9@tls1_proce:
; Line 3809
	cmp	DWORD PTR [esi+96], 0
	jne	SHORT $LN10@tls1_proce
; Line 3810
	call	_EVP_sha1
	mov	DWORD PTR [esi+96], eax
; Line 3811
	call	_EVP_sha1
	mov	DWORD PTR [esi+68], eax
$LN10@tls1_proce:
; Line 3815
	cmp	DWORD PTR [esi+208], 0
	jne	SHORT $LN11@tls1_proce
; Line 3816
	call	_EVP_sha1
	mov	DWORD PTR [esi+208], eax
$LN11@tls1_proce:
; Line 3819
	mov	eax, 1
	pop	esi
; Line 3820
	pop	ecx
	ret	0
	npad	1
$LN37@tls1_proce:
	DD	$LN23@tls1_proce
	DD	$LN24@tls1_proce
	DD	$LN25@tls1_proce
	DD	$LN26@tls1_proce
	DD	$LN27@tls1_proce
	DD	$LN28@tls1_proce
_tls1_process_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_save_sigalgs
_TEXT	SEGMENT
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_dsize$ = 16						; size = 4
_tls1_save_sigalgs PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3727
	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+152]
; Line 3729
	mov	eax, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 2
	jne	SHORT $LN2@tls1_save_
; Line 3730
	mov	eax, 1
	pop	esi
; Line 3743
	ret	0
$LN2@tls1_save_:
; Line 3732
	test	esi, esi
	jne	SHORT $LN3@tls1_save_
; Line 3733
	xor	eax, eax
	pop	esi
; Line 3743
	ret	0
$LN3@tls1_save_:
; Line 3735
	mov	eax, DWORD PTR [esi+292]
	test	eax, eax
	je	SHORT $LN4@tls1_save_
; Line 3736
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@tls1_save_:
; Line 3737
	push	edi
	mov	edi, DWORD PTR _dsize$[esp+4]
	push	3737					; 00000e99H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	edi
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+292], eax
; Line 3738
	test	eax, eax
	jne	SHORT $LN5@tls1_save_
	pop	edi
	pop	esi
; Line 3743
	ret	0
$LN5@tls1_save_:
; Line 3741
	push	edi
	push	DWORD PTR _data$[esp+8]
	mov	DWORD PTR [esi+296], edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 3742
	mov	eax, 1
	pop	edi
	pop	esi
; Line 3743
	ret	0
_tls1_save_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_cert_validity
_TEXT	SEGMENT
_s$ = 8							; size = 4
_tls1_set_cert_validity PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4424
	push	esi
; Line 4425
	mov	esi, DWORD PTR _s$[esp]
	push	0
	push	0
	push	0
	push	0
	push	esi
	call	_tls1_check_chain
; Line 4426
	push	1
	push	0
	push	0
	push	0
	push	esi
	call	_tls1_check_chain
; Line 4427
	push	2
	push	0
	push	0
	push	0
	push	esi
	call	_tls1_check_chain
; Line 4428
	push	3
	push	0
	push	0
	push	0
	push	esi
	call	_tls1_check_chain
	add	esp, 80					; 00000050H
; Line 4429
	push	4
	push	0
	push	0
	push	0
	push	esi
	call	_tls1_check_chain
; Line 4430
	push	5
	push	0
	push	0
	push	0
	push	esi
	call	_tls1_check_chain
	add	esp, 40					; 00000028H
	pop	esi
; Line 4431
	ret	0
_tls1_set_cert_validity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_check_chain
_TEXT	SEGMENT
_strict_mode$1$ = -24					; size = 4
_default_nid$1$ = -20					; size = 4
_suiteb_flags$1$ = -20					; size = 4
_c$1$ = -16						; size = 4
_x$1$ = -12						; size = 4
_ctypes$1$ = -8						; size = 4
_pk$1$ = -8						; size = 4
$T1 = -4						; size = 4
_ca_dn$1$ = -4						; size = 4
_s$ = 8							; size = 4
_x$ = 12						; size = 4
_pk$ = 16						; size = 4
_chain$ = 20						; size = 4
_cpk$1$ = 24						; size = 4
_idx$ = 24						; size = 4
_tls1_check_chain PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4175
	mov	eax, 24					; 00000018H
	call	__chkstk
; Line 4180
	mov	eax, DWORD PTR _s$[esp+20]
	push	ebx
	push	ebp
	push	esi
; Line 4183
	mov	esi, DWORD PTR _idx$[esp+32]
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR [eax+152]
	xor	ebp, ebp
	mov	DWORD PTR _c$1$[esp+40], edi
	mov	eax, DWORD PTR [edi+56]
	and	eax, 196608				; 00030000H
	mov	DWORD PTR _suiteb_flags$1$[esp+40], eax
	cmp	esi, -1
	je	SHORT $LN21@tls1_check
; Line 4185
	cmp	esi, -2					; fffffffeH
	jne	SHORT $LN23@tls1_check
; Line 4186
	mov	ecx, DWORD PTR [edi]
; Line 4187
	mov	eax, -1840700269			; 92492493H
	mov	DWORD PTR _cpk$1$[esp+36], ecx
	sub	ecx, edi
	sub	ecx, 60					; 0000003cH
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
; Line 4188
	mov	edx, DWORD PTR _cpk$1$[esp+36]
	jmp	SHORT $LN24@tls1_check
$LN23@tls1_check:
; Line 4189
	lea	edx, DWORD PTR [esi*8]
	sub	edx, esi
	add	edx, 15					; 0000000fH
	lea	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR _cpk$1$[esp+36], edx
$LN24@tls1_check:
; Line 4191
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx]
; Line 4192
	mov	edi, DWORD PTR [edx+12]
	mov	DWORD PTR _pk$1$[esp+40], eax
; Line 4193
	mov	eax, DWORD PTR _c$1$[esp+40]
	mov	DWORD PTR _x$1$[esp+40], ecx
	mov	eax, DWORD PTR [eax+56]
	and	eax, 196609				; 00030001H
	mov	DWORD PTR _strict_mode$1$[esp+40], eax
; Line 4195
	test	ecx, ecx
	je	$end$145
	cmp	DWORD PTR _pk$1$[esp+40], ebx
	jne	SHORT $LN22@tls1_check
; Line 4196
	jmp	$end$145
$LN21@tls1_check:
; Line 4207
	mov	eax, DWORD PTR _x$[esp+36]
	mov	DWORD PTR _x$1$[esp+40], eax
	test	eax, eax
	je	$LN28@tls1_check
	mov	ecx, DWORD PTR _pk$[esp+36]
	mov	DWORD PTR _pk$1$[esp+40], ecx
	test	ecx, ecx
	je	$LN28@tls1_check
; Line 4209
	push	ecx
	push	eax
	call	_ssl_cert_type
	mov	esi, eax
	add	esp, 8
; Line 4210
	cmp	esi, -1
	je	$LN28@tls1_check
; Line 4213
	mov	ebp, DWORD PTR [edi+56]
	lea	ecx, DWORD PTR [esi*8]
	sub	ecx, esi
; Line 4217
	mov	DWORD PTR _strict_mode$1$[esp+40], 1
	and	ebp, 196609				; 00030001H
	add	ecx, 15					; 0000000fH
	neg	ebp
	sbb	ebp, ebp
	lea	ecx, DWORD PTR [edi+ecx*4]
	and	ebp, 1696				; 000006a0H
	mov	edi, DWORD PTR _chain$[esp+36]
	add	ebp, 80					; 00000050H
	mov	DWORD PTR _cpk$1$[esp+36], ecx
	mov	ecx, DWORD PTR _x$[esp+36]
$LN22@tls1_check:
; Line 4220
	mov	eax, DWORD PTR _suiteb_flags$1$[esp+40]
	test	eax, eax
	je	SHORT $LN36@tls1_check
; Line 4222
	test	ebp, ebp
	je	SHORT $LN33@tls1_check
; Line 4223
	or	ebp, 2048				; 00000800H
$LN33@tls1_check:
; Line 4224
	push	eax
	push	edi
	push	ecx
	push	0
	call	_X509_chain_check_suiteb
	add	esp, 16					; 00000010H
; Line 4225
	test	eax, eax
	jne	SHORT $LN34@tls1_check
; Line 4226
	mov	ebx, 2048				; 00000800H
	jmp	SHORT $LN36@tls1_check
$LN34@tls1_check:
; Line 4227
	test	ebp, ebp
	je	$LN139@tls1_check
$LN36@tls1_check:
; Line 4235
	mov	eax, DWORD PTR _s$[esp+36]
	mov	ecx, DWORD PTR [eax]
	mov	eax, ecx
	and	eax, -256				; ffffff00H
	cmp	eax, 768				; 00000300H
	jne	$LN37@tls1_check
	cmp	ecx, 771				; 00000303H
	jl	$LN37@tls1_check
	cmp	DWORD PTR _strict_mode$1$[esp+40], 0
	je	$LN37@tls1_check
; Line 4238
	mov	ecx, DWORD PTR _c$1$[esp+40]
	cmp	DWORD PTR [ecx+292], 0
	je	SHORT $LN39@tls1_check
; Line 4239
	xor	eax, eax
	mov	DWORD PTR _default_nid$1$[esp+40], eax
	jmp	$LN49@tls1_check
$LN39@tls1_check:
; Line 4242
	cmp	esi, 5
	ja	SHORT $LN44@tls1_check
	jmp	DWORD PTR $LN144@tls1_check[esi*4]
$LN41@tls1_check:
; Line 4246
	mov	dl, 1
; Line 4247
	mov	eax, 65					; 00000041H
; Line 4248
	jmp	SHORT $LN141@tls1_check
$LN42@tls1_check:
; Line 4252
	mov	dl, 2
; Line 4253
	mov	eax, 113				; 00000071H
; Line 4254
	jmp	SHORT $LN141@tls1_check
$LN43@tls1_check:
; Line 4257
	mov	dl, 3
; Line 4258
	mov	eax, 416				; 000001a0H
$LN141@tls1_check:
; Line 4270
	mov	esi, DWORD PTR [ecx+300]
	mov	DWORD PTR _default_nid$1$[esp+40], eax
	test	esi, esi
	je	SHORT $LN49@tls1_check
; Line 4273
	mov	eax, DWORD PTR [ecx+304]
	test	eax, eax
	mov	DWORD PTR $T1[esp+40], eax
	mov	eax, 0
	jbe	SHORT $LN107@tls1_check
; Line 4272
	lea	ecx, DWORD PTR [esi+1]
$LL6@tls1_check:
; Line 4274
	cmp	BYTE PTR [esi+eax], 2
	jne	SHORT $LN4@tls1_check
	cmp	BYTE PTR [ecx], dl
	je	SHORT $LN130@tls1_check
$LN4@tls1_check:
; Line 4273
	add	eax, 2
	add	ecx, 2
	cmp	eax, DWORD PTR $T1[esp+40]
	jb	SHORT $LL6@tls1_check
$LN130@tls1_check:
	mov	ecx, DWORD PTR _c$1$[esp+40]
$LN107@tls1_check:
; Line 4277
	cmp	eax, DWORD PTR [ecx+304]
	jne	SHORT $LN131@tls1_check
; Line 4278
	test	ebp, ebp
	jne	$skip_sigs$146
; Line 4281
	jmp	$LN139@tls1_check
$LN44@tls1_check:
; Line 4262
	or	eax, -1
	mov	DWORD PTR _default_nid$1$[esp+40], eax
	jmp	SHORT $LN49@tls1_check
$LN131@tls1_check:
	mov	eax, DWORD PTR _default_nid$1$[esp+40]
$LN49@tls1_check:
; Line 4285
	push	eax
	push	DWORD PTR _x$1$[esp+44]
	push	ecx
	call	_tls1_check_sig_alg
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN50@tls1_check
; Line 4286
	test	ebp, ebp
	je	$LN139@tls1_check
; Line 4288
	jmp	SHORT $LN51@tls1_check
$LN50@tls1_check:
; Line 4289
	or	ebx, 16					; 00000010H
$LN51@tls1_check:
; Line 4291
	push	edi
	or	ebx, 32					; 00000020H
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $skip_sigs$146
$LL9@tls1_check:
; Line 4292
	push	DWORD PTR _default_nid$1$[esp+40]
	push	esi
	push	edi
	call	_sk_value
	add	esp, 8
	push	eax
	push	DWORD PTR _c$1$[esp+48]
	call	_tls1_check_sig_alg
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN108@tls1_check
; Line 4291
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL9@tls1_check
; Line 4382
	jmp	SHORT $skip_sigs$146
$LN108@tls1_check:
; Line 4293
	test	ebp, ebp
	je	$LN139@tls1_check
; Line 4294
	and	ebx, -33				; ffffffdfH
; Line 4295
	jmp	SHORT $skip_sigs$146
$LN37@tls1_check:
; Line 4302
	test	ebp, ebp
	je	SHORT $skip_sigs$146
; Line 4303
	or	ebx, 48					; 00000030H
$skip_sigs$146:
; Line 4306
	mov	eax, ebp
	neg	eax
	sbb	eax, eax
	add	eax, 2
	push	eax
	push	DWORD PTR _x$1$[esp+44]
	push	DWORD PTR _s$[esp+44]
	call	_tls1_check_cert_param
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN57@tls1_check
; Line 4307
	or	ebx, 64					; 00000040H
	jmp	SHORT $LN59@tls1_check
$LN57@tls1_check:
; Line 4308
	test	ebp, ebp
	je	$LN139@tls1_check
$LN59@tls1_check:
; Line 4310
	mov	eax, DWORD PTR _s$[esp+36]
; Line 4311
	mov	ecx, DWORD PTR _strict_mode$1$[esp+40]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN60@tls1_check
	or	ebx, 128				; 00000080H
	jmp	SHORT $LN11@tls1_check
$LN60@tls1_check:
; Line 4313
	test	ecx, ecx
	je	SHORT $LN11@tls1_check
; Line 4315
	push	edi
	or	ebx, 128				; 00000080H
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN140@tls1_check
	npad	2
$LL12@tls1_check:
; Line 4316
	push	esi
	push	edi
	call	_sk_value
; Line 4317
	push	0
	push	eax
	push	DWORD PTR _s$[esp+52]
	call	_tls1_check_cert_param
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN109@tls1_check
; Line 4315
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL12@tls1_check
; Line 4382
	jmp	SHORT $LN140@tls1_check
$LN109@tls1_check:
; Line 4318
	test	ebp, ebp
	je	$LN139@tls1_check
; Line 4319
	and	ebx, -129				; ffffff7fH
$LN140@tls1_check:
	mov	eax, DWORD PTR _s$[esp+36]
	mov	ecx, DWORD PTR _strict_mode$1$[esp+40]
$LN11@tls1_check:
; Line 4326
	cmp	DWORD PTR [eax+36], 0
	jne	$LN66@tls1_check
	test	ecx, ecx
	je	$LN66@tls1_check
; Line 4329
	mov	ecx, DWORD PTR _pk$1$[esp+40]
	xor	esi, esi
	mov	eax, DWORD PTR [ecx]
	cmp	eax, 116				; 00000074H
	jg	SHORT $LN99@tls1_check
	je	SHORT $LN69@tls1_check
	cmp	eax, 6
	je	SHORT $LN68@tls1_check
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN71@tls1_check
; Line 4368
	or	ebx, 1024				; 00000400H
	jmp	$LN75@tls1_check
$LN68@tls1_check:
; Line 4331
	mov	esi, 1
; Line 4332
	jmp	SHORT $LN129@tls1_check
$LN69@tls1_check:
; Line 4334
	mov	esi, 2
; Line 4335
	jmp	SHORT $LN129@tls1_check
$LN99@tls1_check:
; Line 4329
	cmp	eax, 408				; 00000198H
	je	SHORT $LN70@tls1_check
	cmp	eax, 920				; 00000398H
	jne	SHORT $LN74@tls1_check
$LN71@tls1_check:
; Line 4342
	push	ecx
	push	DWORD PTR _x$1$[esp+44]
	call	_X509_certificate_type
	add	esp, 8
; Line 4343
	mov	ecx, 3
	test	eax, 256				; 00000100H
	cmovne	esi, ecx
; Line 4345
	test	eax, 512				; 00000200H
	je	SHORT $LN73@tls1_check
; Line 4346
	lea	esi, DWORD PTR [ecx+1]
	jmp	SHORT $LN129@tls1_check
$LN73@tls1_check:
; Line 4349
	test	esi, esi
	jne	SHORT $LN129@tls1_check
$LN74@tls1_check:
; Line 4368
	or	ebx, 1024				; 00000400H
	jmp	SHORT $LN75@tls1_check
$LN70@tls1_check:
; Line 4337
	mov	esi, 64					; 00000040H
$LN129@tls1_check:
; Line 4352
	mov	ecx, DWORD PTR _c$1$[esp+40]
	mov	eax, DWORD PTR [ecx+284]
	mov	DWORD PTR _ctypes$1$[esp+40], eax
	test	eax, eax
	je	SHORT $LN76@tls1_check
; Line 4354
	mov	edx, DWORD PTR [ecx+288]
; Line 4355
	jmp	SHORT $LN77@tls1_check
$LN76@tls1_check:
; Line 4356
	mov	eax, DWORD PTR _s$[esp+36]
	mov	eax, DWORD PTR [eax+88]
; Line 4357
	mov	edx, DWORD PTR [eax+860]
	lea	ecx, DWORD PTR [eax+864]
	mov	DWORD PTR _ctypes$1$[esp+40], ecx
	mov	eax, ecx
$LN77@tls1_check:
; Line 4359
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN16@tls1_check
$LL17@tls1_check:
; Line 4360
	movzx	eax, BYTE PTR [eax+ecx]
	cmp	eax, esi
	je	SHORT $LN110@tls1_check
; Line 4359
	mov	eax, DWORD PTR _ctypes$1$[esp+40]
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LL17@tls1_check
; Line 4382
	jmp	SHORT $LN16@tls1_check
$LN110@tls1_check:
; Line 4361
	or	ebx, 1024				; 00000400H
$LN16@tls1_check:
; Line 4365
	test	ebx, 1024				; 00000400H
	jne	SHORT $LN75@tls1_check
	test	ebp, ebp
	je	$LN139@tls1_check
$LN75@tls1_check:
; Line 4370
	mov	eax, DWORD PTR _s$[esp+36]
	mov	eax, DWORD PTR [eax+88]
	mov	esi, DWORD PTR [eax+876]
; Line 4372
	push	esi
	mov	DWORD PTR _ca_dn$1$[esp+44], esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN80@tls1_check
; Line 4373
	or	ebx, 512				; 00000200H
$LN80@tls1_check:
; Line 4375
	test	ebx, 512				; 00000200H
	jne	SHORT $LN19@tls1_check
; Line 4376
	push	DWORD PTR _x$1$[esp+40]
	push	esi
	call	_ssl_check_ca_name
	add	esp, 8
	test	eax, eax
	je	SHORT $LN82@tls1_check
; Line 4377
	or	ebx, 512				; 00000200H
$LN82@tls1_check:
; Line 4379
	test	ebx, 512				; 00000200H
	jne	SHORT $LN19@tls1_check
; Line 4380
	push	edi
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN19@tls1_check
$LL20@tls1_check:
; Line 4381
	push	esi
	push	edi
	call	_sk_value
; Line 4382
	push	eax
	push	DWORD PTR _ca_dn$1$[esp+52]
	call	_ssl_check_ca_name
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN111@tls1_check
; Line 4380
	push	edi
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL20@tls1_check
; Line 4382
	jmp	SHORT $LN19@tls1_check
$LN111@tls1_check:
; Line 4383
	or	ebx, 512				; 00000200H
$LN19@tls1_check:
; Line 4388
	test	ebp, ebp
	jne	SHORT $LN127@tls1_check
	test	ebx, 512				; 00000200H
	je	SHORT $LN139@tls1_check
; Line 4390
	jmp	SHORT $LN87@tls1_check
$LN66@tls1_check:
; Line 4391
	or	ebx, 1536				; 00000600H
; Line 4393
	test	ebp, ebp
	je	SHORT $LN87@tls1_check
$LN127@tls1_check:
	mov	eax, ebp
	and	eax, ebx
	cmp	eax, ebp
	jne	SHORT $LN139@tls1_check
$LN87@tls1_check:
; Line 4394
	or	ebx, 1
$LN139@tls1_check:
	mov	edx, DWORD PTR _cpk$1$[esp+36]
$end$145:
; Line 4398
	mov	eax, DWORD PTR _s$[esp+36]
	mov	ecx, DWORD PTR [eax]
	mov	eax, ecx
	and	eax, -256				; ffffff00H
	cmp	eax, 768				; 00000300H
	jne	SHORT $LN88@tls1_check
	cmp	ecx, 771				; 00000303H
	jl	SHORT $LN88@tls1_check
; Line 4399
	test	DWORD PTR [edx+24], 256			; 00000100H
	jne	SHORT $LN88@tls1_check
; Line 4401
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN89@tls1_check
; Line 4402
	or	ebx, 2
; Line 4403
	jmp	SHORT $LN89@tls1_check
$LN88@tls1_check:
; Line 4404
	or	ebx, 258				; 00000102H
$LN89@tls1_check:
; Line 4410
	test	ebp, ebp
	jne	SHORT $LN95@tls1_check
; Line 4411
	test	bl, 1
	je	SHORT $LN94@tls1_check
; Line 4412
	mov	DWORD PTR [edx+24], ebx
$LN95@tls1_check:
	pop	edi
	pop	esi
	pop	ebp
; Line 4419
	mov	eax, ebx
	pop	ebx
; Line 4420
	add	esp, 24					; 00000018H
	ret	0
$LN94@tls1_check:
; Line 4415
	and	DWORD PTR [edx+24], 256			; 00000100H
$LN28@tls1_check:
	pop	edi
	pop	esi
	pop	ebp
; Line 4208
	xor	eax, eax
	pop	ebx
; Line 4420
	add	esp, 24					; 00000018H
	ret	0
	npad	1
$LN144@tls1_check:
	DD	$LN41@tls1_check
	DD	$LN41@tls1_check
	DD	$LN42@tls1_check
	DD	$LN41@tls1_check
	DD	$LN42@tls1_check
	DD	$LN43@tls1_check
_tls1_check_chain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_sigalgs
_TEXT	SEGMENT
_c$ = 8							; size = 4
_psig_nids$ = 12					; size = 4
_sigalgs$1$ = 16					; size = 4
_salglen$ = 16						; size = 4
_client$ = 20						; size = 4
_tls1_set_sigalgs PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4089
	push	ebx
; Line 4093
	mov	ebx, DWORD PTR _salglen$[esp]
	test	bl, 1
	je	SHORT $LN5@tls1_set_s
; Line 4094
	xor	eax, eax
	pop	ebx
; Line 4127
	ret	0
$LN5@tls1_set_s:
	push	edi
; Line 4095
	push	4095					; 00000fffH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sigalgs$1$[esp+4], edi
; Line 4096
	test	edi, edi
	jne	SHORT $LN6@tls1_set_s
	pop	edi
	pop	ebx
; Line 4127
	ret	0
$LN6@tls1_set_s:
	push	ebp
; Line 4098
	xor	ebp, ebp
	push	esi
	mov	esi, edi
	test	ebx, ebx
	je	SHORT $LN3@tls1_set_s
	mov	edi, DWORD PTR _psig_nids$[esp+12]
	npad	3
$LL4@tls1_set_s:
; Line 4099
	mov	ecx, DWORD PTR [edi]
; Line 3521
	xor	eax, eax
$LL17@tls1_set_s:
; Line 3522
	cmp	DWORD PTR _tls12_md[eax*8], ecx
	je	SHORT $LN29@tls1_set_s
; Line 3521
	inc	eax
	cmp	eax, 6
	jb	SHORT $LL17@tls1_set_s
; Line 3525
	or	edx, -1
	jmp	SHORT $LN14@tls1_set_s
$LN29@tls1_set_s:
; Line 3523
	mov	edx, DWORD PTR _tls12_md[eax*8+4]
$LN14@tls1_set_s:
; Line 4101
	mov	ecx, DWORD PTR [edi+4]
; Line 3521
	xor	eax, eax
$LL23@tls1_set_s:
; Line 3522
	cmp	DWORD PTR _tls12_sig[eax*8], ecx
	je	SHORT $LN30@tls1_set_s
; Line 3521
	inc	eax
	cmp	eax, 3
	jb	SHORT $LL23@tls1_set_s
; Line 3525
	or	eax, -1
	jmp	SHORT $LN20@tls1_set_s
$LN30@tls1_set_s:
; Line 3523
	mov	eax, DWORD PTR _tls12_sig[eax*8+4]
$LN20@tls1_set_s:
; Line 4101
	add	edi, 8
; Line 4104
	cmp	edx, -1
	je	SHORT $err$45
	cmp	eax, -1
	je	SHORT $err$45
; Line 4106
	mov	BYTE PTR [esi], dl
	add	ebp, 2
; Line 4107
	mov	BYTE PTR [esi+1], al
	add	esi, 2
	cmp	ebp, ebx
	jb	SHORT $LL4@tls1_set_s
; Line 4104
	mov	edi, DWORD PTR _sigalgs$1$[esp+12]
$LN3@tls1_set_s:
; Line 4110
	cmp	DWORD PTR _client$[esp+12], 0
; Line 4111
	mov	esi, DWORD PTR _c$[esp+12]
	je	SHORT $LN9@tls1_set_s
	mov	eax, DWORD PTR [esi+308]
	test	eax, eax
	je	SHORT $LN11@tls1_set_s
; Line 4112
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN11@tls1_set_s:
; Line 4113
	mov	DWORD PTR [esi+308], edi
; Line 4122
	mov	eax, 1
	mov	DWORD PTR [esi+312], ebx
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 4127
	ret	0
$err$45:
; Line 4125
	push	DWORD PTR _sigalgs$1$[esp+12]
	call	_CRYPTO_free
	add	esp, 4
; Line 4126
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 4127
	ret	0
$LN9@tls1_set_s:
; Line 4116
	mov	eax, DWORD PTR [esi+300]
	test	eax, eax
	je	SHORT $LN12@tls1_set_s
; Line 4117
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN12@tls1_set_s:
; Line 4118
	mov	DWORD PTR [esi+300], edi
; Line 4122
	mov	eax, 1
	mov	DWORD PTR [esi+304], ebx
	pop	esi
	pop	ebp
	pop	edi
	pop	ebx
; Line 4127
	ret	0
_tls1_set_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_sigalgs_list
_TEXT	SEGMENT
_sig$ = -232						; size = 228
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 4
_str$ = 12						; size = 4
_client$ = 16						; size = 4
_tls1_set_sigalgs_list PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4077
	mov	eax, 232				; 000000e8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+232], eax
	mov	eax, DWORD PTR _str$[esp+228]
; Line 4080
	lea	ecx, DWORD PTR _sig$[esp+232]
	push	esi
	mov	esi, DWORD PTR _c$[esp+232]
	push	ecx
	push	OFFSET _sig_cb
	push	1
	push	58					; 0000003aH
	push	eax
	mov	DWORD PTR _sig$[esp+256], 0
	call	_CONF_parse_list
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN2@tls1_set_s
	pop	esi
; Line 4085
	mov	ecx, DWORD PTR __$ArrayPad$[esp+232]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	ret	0
$LN2@tls1_set_s:
; Line 4082
	test	esi, esi
	jne	SHORT $LN3@tls1_set_s
; Line 4083
	lea	eax, DWORD PTR [esi+1]
	pop	esi
; Line 4085
	mov	ecx, DWORD PTR __$ArrayPad$[esp+232]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	ret	0
$LN3@tls1_set_s:
; Line 4084
	push	DWORD PTR _client$[esp+232]
	lea	eax, DWORD PTR _sig$[esp+244]
	push	DWORD PTR _sig$[esp+240]
	push	eax
	push	esi
	call	_tls1_set_sigalgs
; Line 4085
	mov	ecx, DWORD PTR __$ArrayPad$[esp+252]
	add	esp, 16					; 00000010H
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	ret	0
_tls1_set_sigalgs_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_get_hash
_TEXT	SEGMENT
_hash_alg$ = 8						; size = 1
_tls12_get_hash PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3564
	movzx	eax, BYTE PTR _hash_alg$[esp-4]
	dec	eax
	cmp	eax, 5
	ja	SHORT $LN10@tls12_get_
	jmp	DWORD PTR $LN14@tls12_get_[eax*4]
$LN4@tls12_get_:
; Line 3571
	jmp	_EVP_md5
$LN5@tls12_get_:
; Line 3575
	jmp	_EVP_sha1
$LN6@tls12_get_:
; Line 3579
	jmp	_EVP_sha224
$LN7@tls12_get_:
; Line 3582
	jmp	_EVP_sha256
$LN8@tls12_get_:
; Line 3586
	jmp	_EVP_sha384
$LN9@tls12_get_:
; Line 3589
	jmp	_EVP_sha512
$LN10@tls12_get_:
; Line 3592
	xor	eax, eax
; Line 3595
	ret	0
	npad	1
$LN14@tls12_get_:
	DD	$LN4@tls12_get_
	DD	$LN5@tls12_get_
	DD	$LN6@tls12_get_
	DD	$LN7@tls12_get_
	DD	$LN8@tls12_get_
	DD	$LN9@tls12_get_
_tls12_get_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_get_sigid
_TEXT	SEGMENT
_pk$ = 8						; size = 4
_tls12_get_sigid PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3522
	mov	ecx, DWORD PTR _pk$[esp-4]
	xor	eax, eax
	mov	ecx, DWORD PTR [ecx]
	npad	8
$LL6@tls12_get_:
	cmp	DWORD PTR _tls12_sig[eax*8], ecx
	je	SHORT $LN10@tls12_get_
; Line 3521
	inc	eax
	cmp	eax, 3
	jb	SHORT $LL6@tls12_get_
; Line 3558
	or	eax, -1
; Line 3560
	ret	0
$LN10@tls12_get_:
; Line 3558
	mov	eax, DWORD PTR _tls12_sig[eax*8+4]
; Line 3560
	ret	0
_tls12_get_sigid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls12_get_sigandhash
_TEXT	SEGMENT
_p$ = 8							; size = 4
_pk$ = 12						; size = 4
_md$ = 16						; size = 4
_tls12_get_sigandhash PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3542
	mov	eax, DWORD PTR _md$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@tls12_get_
$LN30@tls12_get_:
; Line 3543
	xor	eax, eax
; Line 3554
	ret	0
$LN2@tls12_get_:
; Line 3544
	push	eax
	call	_EVP_MD_type
	add	esp, 4
; Line 3521
	xor	ecx, ecx
$LL9@tls12_get_:
; Line 3522
	cmp	DWORD PTR _tls12_md[ecx*8], eax
	je	SHORT $LN22@tls12_get_
; Line 3521
	inc	ecx
	cmp	ecx, 6
	jb	SHORT $LL9@tls12_get_
; Line 3543
	xor	eax, eax
; Line 3554
	ret	0
$LN22@tls12_get_:
; Line 3523
	mov	edx, DWORD PTR _tls12_md[ecx*8+4]
; Line 3546
	cmp	edx, -1
	je	SHORT $LN30@tls12_get_
; Line 3522
	mov	eax, DWORD PTR _pk$[esp-4]
	xor	ecx, ecx
	mov	eax, DWORD PTR [eax]
	npad	4
$LL17@tls12_get_:
	cmp	DWORD PTR _tls12_sig[ecx*8], eax
	je	SHORT $LN23@tls12_get_
; Line 3521
	inc	ecx
	cmp	ecx, 3
	jb	SHORT $LL17@tls12_get_
; Line 3543
	xor	eax, eax
; Line 3554
	ret	0
$LN23@tls12_get_:
; Line 3523
	mov	ecx, DWORD PTR _tls12_sig[ecx*8+4]
; Line 3549
	cmp	ecx, -1
	je	SHORT $LN30@tls12_get_
; Line 3551
	mov	eax, DWORD PTR _p$[esp-4]
	mov	BYTE PTR [eax], dl
; Line 3552
	mov	BYTE PTR [eax+1], cl
; Line 3553
	mov	eax, 1
; Line 3554
	ret	0
_tls12_get_sigandhash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_process_ticket
_TEXT	SEGMENT
_s$ = 8							; size = 4
_session_id$ = 12					; size = 4
_len$ = 16						; size = 4
_limit$ = 20						; size = 4
_ret$ = 24						; size = 4
_tls1_process_ticket PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3294
	mov	eax, DWORD PTR _ret$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _len$[esp]
	push	ebp
	mov	ebp, DWORD PTR _session_id$[esp+4]
	add	ebx, ebp
	push	edi
; Line 3295
	mov	edi, DWORD PTR _s$[esp+8]
; Line 3301
	push	0
	push	0
	push	32					; 00000020H
	mov	DWORD PTR [eax], 0
	push	edi
	mov	DWORD PTR [edi+320], 0
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, 16384				; 00004000H
	je	SHORT $LN6@tls1_proce
; Line 3302
	pop	edi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 3370
	ret	0
$LN6@tls1_proce:
; Line 3303
	cmp	DWORD PTR [edi], 768			; 00000300H
	push	esi
	jle	$LN8@tls1_proce
	mov	esi, DWORD PTR _limit$[esp+12]
	test	esi, esi
	je	$LN8@tls1_proce
; Line 3305
	cmp	ebx, esi
	jae	$LN32@tls1_proce
; Line 3308
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN11@tls1_proce
; Line 3310
	movzx	eax, BYTE PTR [ebx]
	inc	ebx
	add	ebx, eax
; Line 3311
	cmp	ebx, esi
	jae	$LN32@tls1_proce
$LN11@tls1_proce:
; Line 3315
	movzx	eax, BYTE PTR [ebx]
	shl	ax, 8
; Line 3316
	movzx	ecx, ax
	movzx	eax, BYTE PTR [ebx+1]
	or	ecx, eax
	add	ecx, 2
	add	ecx, ebx
; Line 3317
	cmp	ecx, esi
	jae	$LN32@tls1_proce
; Line 3321
	movzx	edx, BYTE PTR [ecx]
	inc	edx
	add	edx, ecx
; Line 3322
	cmp	edx, esi
	ja	$LN32@tls1_proce
; Line 3325
	add	edx, 2
	cmp	edx, esi
	jae	SHORT $LN8@tls1_proce
; Line 3328
	lea	eax, DWORD PTR [edx+4]
	cmp	eax, esi
	ja	SHORT $LN8@tls1_proce
$LL2@tls1_proce:
; Line 3330
	movzx	ecx, BYTE PTR [edx]
	movzx	eax, BYTE PTR [edx+1]
	shl	cx, 8
	or	cx, ax
; Line 3331
	movzx	eax, BYTE PTR [edx+3]
	movzx	ebx, cx
	movzx	ecx, BYTE PTR [edx+2]
	add	edx, 4
	shl	cx, 8
	or	cx, ax
	movzx	ecx, cx
; Line 3332
	lea	eax, DWORD PTR [edx+ecx]
	cmp	eax, esi
	ja	SHORT $LN8@tls1_proce
; Line 3334
	cmp	ebx, 35					; 00000023H
	je	SHORT $LN26@tls1_proce
; Line 3367
	mov	edx, eax
	lea	eax, DWORD PTR [edx+4]
	cmp	eax, esi
	jbe	SHORT $LL2@tls1_proce
$LN8@tls1_proce:
	pop	esi
	pop	edi
	pop	ebp
; Line 3304
	xor	eax, eax
	pop	ebx
; Line 3370
	ret	0
$LN26@tls1_proce:
; Line 3336
	test	cx, cx
	jne	SHORT $LN17@tls1_proce
; Line 3341
	pop	esi
	mov	DWORD PTR [edi+320], 1
; Line 3342
	mov	eax, 1
	pop	edi
	pop	ebp
	pop	ebx
; Line 3370
	ret	0
$LN17@tls1_proce:
; Line 3344
	cmp	DWORD PTR [edi+360], 0
	jne	SHORT $LN33@tls1_proce
; Line 3353
	push	DWORD PTR _ret$[esp+12]
	push	DWORD PTR _len$[esp+16]
	push	ebp
	push	ecx
	push	edx
	push	edi
	call	_tls_decrypt_ticket
	add	esp, 24					; 00000018H
; Line 3354
	sub	eax, 2
	je	SHORT $LN19@tls1_proce
	sub	eax, 1
	je	SHORT $LN20@tls1_proce
	sub	eax, 1
	je	SHORT $LN21@tls1_proce
$LN32@tls1_proce:
	pop	esi
	pop	edi
	pop	ebp
; Line 3364
	or	eax, -1
	pop	ebx
; Line 3370
	ret	0
$LN21@tls1_proce:
; Line 3361
	mov	DWORD PTR [edi+320], 1
$LN20@tls1_proce:
	pop	esi
	pop	edi
	pop	ebp
; Line 3362
	mov	eax, 3
	pop	ebx
; Line 3370
	ret	0
$LN19@tls1_proce:
; Line 3356
	mov	DWORD PTR [edi+320], 1
$LN33@tls1_proce:
	pop	esi
	pop	edi
	pop	ebp
; Line 3357
	mov	eax, 2
	pop	ebx
; Line 3370
	ret	0
_tls1_process_ticket ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_process_heartbeat
_TEXT	SEGMENT
_pl$1$ = -4						; size = 4
_payload$1$ = 8						; size = 4
_s$ = 8							; size = 4
_tls1_process_heartbeat PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3866
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	esi
	push	edi
; Line 3867
	mov	edi, DWORD PTR _s$[esp+12]
	mov	eax, DWORD PTR [edi+88]
; Line 3872
	mov	ecx, DWORD PTR [edi+100]
	mov	esi, DWORD PTR [eax+280]
	test	ecx, ecx
	je	SHORT $LN2@tls1_proce
; Line 3873
	push	DWORD PTR [edi+104]
	push	edi
	push	DWORD PTR [eax+272]
	push	esi
	push	24					; 00000018H
	push	DWORD PTR [edi]
	push	0
	call	ecx
	add	esp, 28					; 0000001cH
$LN2@tls1_proce:
; Line 3878
	mov	eax, DWORD PTR [edi+88]
	mov	ebx, DWORD PTR [eax+272]
	cmp	ebx, 19					; 00000013H
	jae	SHORT $LN3@tls1_proce
$LN16@tls1_proce:
	pop	edi
	pop	esi
; Line 3879
	xor	eax, eax
	pop	ebx
; Line 3938
	pop	ecx
	ret	0
$LN3@tls1_proce:
; Line 3881
	movzx	ecx, BYTE PTR [esi+1]
	movzx	eax, BYTE PTR [esi+2]
	movzx	edx, BYTE PTR [esi]
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR _payload$1$[esp+12], ecx
; Line 3882
	lea	eax, DWORD PTR [ecx+19]
	cmp	eax, ebx
	ja	SHORT $LN16@tls1_proce
; Line 3881
	lea	eax, DWORD PTR [esi+3]
	mov	DWORD PTR _pl$1$[esp+16], eax
	push	ebp
; Line 3886
	cmp	edx, 1
	jne	$LN5@tls1_proce
; Line 3894
	push	3894					; 00000f36H
	lea	ebp, DWORD PTR [ecx+19]
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebp
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 3895
	test	ebx, ebx
	je	SHORT $LN15@tls1_proce
; Line 3901
	mov	ecx, DWORD PTR _payload$1$[esp+16]
	lea	esi, DWORD PTR [ebx+1]
	mov	eax, ecx
	mov	BYTE PTR [ebx], 2
; Line 3902
	push	ecx
	push	DWORD PTR _pl$1$[esp+24]
	shr	eax, 8
	mov	BYTE PTR [esi], al
	mov	BYTE PTR [esi+1], cl
	add	esi, 2
	push	esi
	call	_memcpy
; Line 3903
	mov	eax, DWORD PTR _payload$1$[esp+28]
	add	eax, esi
; Line 3905
	push	16					; 00000010H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 20					; 00000014H
	test	eax, eax
	jns	SHORT $LN8@tls1_proce
; Line 3906
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN15@tls1_proce:
; Line 3907
	pop	ebp
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 3938
	pop	ecx
	ret	0
$LN8@tls1_proce:
; Line 3910
	push	ebp
	push	ebx
	push	24					; 00000018H
	push	edi
	call	_ssl3_write_bytes
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 3913
	test	esi, esi
	js	SHORT $LN9@tls1_proce
	mov	eax, DWORD PTR [edi+100]
	test	eax, eax
	je	SHORT $LN9@tls1_proce
; Line 3914
	push	DWORD PTR [edi+104]
	push	edi
	push	ebp
	push	ebx
	push	24					; 00000018H
	push	DWORD PTR [edi]
	push	1
	call	eax
	add	esp, 28					; 0000001cH
$LN9@tls1_proce:
; Line 3918
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 3920
	test	esi, esi
	jns	SHORT $LN12@tls1_proce
; Line 3921
	pop	ebp
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 3938
	pop	ecx
	ret	0
$LN5@tls1_proce:
; Line 3922
	cmp	edx, 2
	jne	SHORT $LN12@tls1_proce
; Line 3931
	cmp	ecx, 18					; 00000012H
	jne	SHORT $LN12@tls1_proce
; Line 3929
	movzx	ecx, BYTE PTR [eax]
	movzx	eax, BYTE PTR [eax+1]
; Line 3931
	mov	edx, DWORD PTR [edi+396]
	shl	ecx, 8
	or	ecx, eax
	cmp	ecx, edx
	jne	SHORT $LN12@tls1_proce
; Line 3932
	lea	eax, DWORD PTR [edx+1]
; Line 3933
	mov	DWORD PTR [edi+392], 0
	mov	DWORD PTR [edi+396], eax
$LN12@tls1_proce:
; Line 3937
	pop	ebp
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 3938
	pop	ecx
	ret	0
_tls1_process_heartbeat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_heartbeat
_TEXT	SEGMENT
_s$ = 8							; size = 4
_tls1_heartbeat PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3941
	push	ebp
	push	esi
	mov	esi, DWORD PTR _s$[esp+4]
; Line 3943
	or	ebp, -1
	mov	eax, DWORD PTR [esi+388]
	and	al, 3
	cmp	al, 1
; Line 3948
	jne	$LN3@tls1_heart
; Line 3955
	cmp	DWORD PTR [esi+392], 0
	je	SHORT $LN4@tls1_heart
; Line 3956
	push	3956					; 00000f74H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	366					; 0000016eH
; Line 3957
	jmp	$LN14@tls1_heart
$LN4@tls1_heart:
; Line 3961
	push	esi
	call	_SSL_state
	add	esp, 4
	test	eax, 12288				; 00003000H
	jne	$LN6@tls1_heart
	cmp	DWORD PTR [esi+28], 0
	jne	$LN6@tls1_heart
; Line 3982
	push	ebx
	push	edi
	push	3982					; 00000f8eH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	37					; 00000025H
	call	_CRYPTO_malloc
	mov	ebx, eax
; Line 3985
	lea	edi, DWORD PTR [ebx+1]
; Line 3991
	push	16					; 00000010H
	mov	BYTE PTR [ebx], 1
	mov	WORD PTR [edi], 4608			; 00001200H
	movzx	eax, BYTE PTR [esi+397]
	mov	BYTE PTR [edi+2], al
	movzx	eax, BYTE PTR [esi+396]
	mov	BYTE PTR [edi+3], al
	add	edi, 4
	push	edi
	call	_RAND_pseudo_bytes
	add	esp, 20					; 00000014H
	test	eax, eax
	jns	SHORT $LN7@tls1_heart
; Line 3992
	push	3992					; 00000f98H
$LN15@tls1_heart:
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	68					; 00000044H
	push	315					; 0000013bH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 4013
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 4015
	mov	eax, ebp
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 4016
	ret	0
$LN7@tls1_heart:
; Line 3995
	lea	eax, DWORD PTR [edi+16]
; Line 3997
	push	16					; 00000010H
	push	eax
	call	_RAND_pseudo_bytes
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN8@tls1_heart
; Line 3998
	push	3998					; 00000f9eH
; Line 3999
	jmp	SHORT $LN15@tls1_heart
$LN8@tls1_heart:
; Line 4002
	push	37					; 00000025H
	push	ebx
	push	24					; 00000018H
	push	esi
	call	_ssl3_write_bytes
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 4003
	test	ebp, ebp
	js	SHORT $err$17
; Line 4004
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	je	SHORT $LN10@tls1_heart
; Line 4005
	push	DWORD PTR [esi+104]
	push	esi
	push	37					; 00000025H
	push	ebx
	push	24					; 00000018H
	push	DWORD PTR [esi]
	push	1
	call	eax
	add	esp, 28					; 0000001cH
$LN10@tls1_heart:
; Line 4009
	mov	DWORD PTR [esi+392], 1
$err$17:
; Line 4013
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 4015
	mov	eax, ebp
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 4016
	ret	0
$LN6@tls1_heart:
; Line 3962
	push	3962					; 00000f7aH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	244					; 000000f4H
; Line 3963
	jmp	SHORT $LN14@tls1_heart
$LN3@tls1_heart:
; Line 3950
	push	3950					; 00000f6eH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	365					; 0000016dH
$LN14@tls1_heart:
	push	315					; 0000013bH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 3951
	or	eax, -1
	pop	esi
	pop	ebp
; Line 4016
	ret	0
_tls1_heartbeat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_prepare_serverhello_tlsext
_TEXT	SEGMENT
_s$ = 8							; size = 4
_ssl_prepare_serverhello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2901
	mov	eax, 1
; Line 2902
	ret	0
_ssl_prepare_serverhello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_prepare_clienthello_tlsext
_TEXT	SEGMENT
_s$ = 8							; size = 4
_ssl_prepare_clienthello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2895
	mov	eax, DWORD PTR _s$[esp-4]
	mov	eax, DWORD PTR [eax+152]
	mov	DWORD PTR [eax+376], 0
; Line 2896
	mov	eax, 1
; Line 2897
	ret	0
_ssl_prepare_clienthello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_parse_serverhello_tlsext
_TEXT	SEGMENT
_al$ = -4						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_d$ = 16						; size = 4
_n$ = 20						; size = 4
_ssl_parse_serverhello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3237
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 3239
	mov	esi, DWORD PTR _s$[esp+4]
	mov	DWORD PTR _al$[esp+8], -1
	cmp	DWORD PTR [esi], 768			; 00000300H
	jl	SHORT $LN4@ssl_parse_
; Line 3241
	lea	eax, DWORD PTR _al$[esp+8]
	push	eax
	push	DWORD PTR _n$[esp+8]
	push	DWORD PTR _d$[esp+12]
	push	DWORD PTR _p$[esp+16]
	push	esi
	call	_ssl_scan_serverhello_tlsext
	add	esp, 20					; 00000014H
	test	eax, eax
	jg	SHORT $LN3@ssl_parse_
; Line 3242
	push	DWORD PTR _al$[esp+8]
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 3243
	xor	eax, eax
	pop	esi
; Line 3251
	pop	ecx
	ret	0
$LN3@ssl_parse_:
; Line 3246
	push	esi
	call	_ssl_check_serverhello_tlsext
	add	esp, 4
	test	eax, eax
	jg	SHORT $LN4@ssl_parse_
; Line 3247
	push	3247					; 00000cafH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	275					; 00000113H
	push	303					; 0000012fH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 3248
	xor	eax, eax
	pop	esi
; Line 3251
	pop	ecx
	ret	0
$LN4@ssl_parse_:
; Line 3250
	mov	eax, 1
	pop	esi
; Line 3251
	pop	ecx
	ret	0
_ssl_parse_serverhello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_check_clienthello_tlsext_late
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_al$ = 8						; size = 4
_s$ = 8							; size = 4
_ssl_check_clienthello_tlsext_late PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3053
	mov	eax, 4
	call	__chkstk
	push	esi
; Line 3063
	mov	esi, DWORD PTR _s$[esp+4]
	mov	DWORD PTR _ret$[esp+8], 0
	cmp	DWORD PTR [esi+296], -1
	je	SHORT $LN6@ssl_check_
	mov	eax, DWORD PTR [esi+228]
	test	eax, eax
	je	SHORT $LN6@ssl_check_
	cmp	DWORD PTR [eax+316], 0
	je	SHORT $LN6@ssl_check_
; Line 3066
	push	esi
	call	_ssl_get_server_send_pkey
	mov	ecx, eax
	add	esp, 4
; Line 3068
	test	ecx, ecx
	jne	SHORT $LN8@ssl_check_
; Line 3069
	mov	DWORD PTR [esi+300], eax
; Line 3111
	lea	eax, DWORD PTR [ecx+1]
	pop	esi
; Line 3116
	pop	ecx
	ret	0
$LN8@ssl_check_:
; Line 3076
	mov	eax, DWORD PTR [esi+152]
	mov	DWORD PTR [eax], ecx
; Line 3077
	mov	eax, DWORD PTR [esi+228]
	push	DWORD PTR [eax+320]
	mov	eax, DWORD PTR [eax+316]
	push	esi
	call	eax
	add	esp, 8
; Line 3078
	sub	eax, 0
	je	SHORT $LN10@ssl_check_
	sub	eax, 2
	je	SHORT $LN13@ssl_check_
	sub	eax, 1
	jne	SHORT $LN7@ssl_check_
$LN6@ssl_check_:
; Line 3097
	mov	DWORD PTR [esi+300], 0
$LN7@ssl_check_:
; Line 3099
	lea	eax, DWORD PTR _al$[esp+4]
	push	eax
	lea	eax, DWORD PTR _ret$[esp+12]
	push	eax
	push	esi
	call	_tls1_alpn_handle_client_hello_late
	mov	eax, DWORD PTR _ret$[esp+20]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _al$[esp+4]
$err$21:
; Line 3104
	sub	eax, 1
	je	SHORT $LN16@ssl_check_
	sub	eax, 1
	jne	SHORT $LN19@ssl_check_
; Line 3106
	push	ecx
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 3107
	or	eax, -1
	pop	esi
; Line 3116
	pop	ecx
	ret	0
$LN13@ssl_check_:
; Line 3092
	mov	eax, 2
; Line 3093
	lea	ecx, DWORD PTR [eax+78]
; Line 3094
	jmp	SHORT $err$21
$LN10@ssl_check_:
; Line 3085
	xor	eax, eax
	cmp	DWORD PTR [esi+312], eax
	setne	al
	mov	DWORD PTR [esi+300], eax
; Line 3096
	jmp	SHORT $LN7@ssl_check_
$LN16@ssl_check_:
; Line 3110
	push	ecx
	push	1
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
$LN19@ssl_check_:
; Line 3111
	mov	eax, 1
	pop	esi
; Line 3116
	pop	ecx
	ret	0
_ssl_check_clienthello_tlsext_late ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_server_sigalgs
_TEXT	SEGMENT
tv819 = -4						; size = 4
_s$ = 8							; size = 4
_tls1_set_server_sigalgs PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3015
	mov	eax, 4
	call	__chkstk
	push	ebx
; Line 3019
	mov	ebx, DWORD PTR _s$[esp+4]
	push	esi
	mov	eax, DWORD PTR [ebx+152]
	mov	eax, DWORD PTR [eax+316]
	test	eax, eax
	je	SHORT $LN5@tls1_set_s
; Line 3020
	push	eax
	call	_CRYPTO_free
; Line 3021
	mov	eax, DWORD PTR [ebx+152]
	add	esp, 4
	mov	DWORD PTR [eax+316], 0
; Line 3022
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+320], 0
$LN5@tls1_set_s:
; Line 3026
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+68], 0
; Line 3027
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+84], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+96], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+112], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+124], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+140], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+152], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+168], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+180], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+196], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+208], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+224], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+236], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+252], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+264], 0
	mov	eax, DWORD PTR [ebx+152]
	mov	DWORD PTR [eax+280], 0
; Line 3031
	mov	esi, DWORD PTR [ebx+152]
	cmp	DWORD PTR [esi+292], 0
	je	$LN6@tls1_set_s
; Line 3752
	push	ebx
	call	_tls1_set_shared_sigalgs
	add	esp, 4
	test	eax, eax
	je	$LN57@tls1_set_s
; Line 3780
	mov	eax, DWORD PTR [esi+316]
	push	ebp
	xor	ebp, ebp
; Line 3781
	cmp	DWORD PTR [esi+320], ebp
	jbe	$LN13@tls1_set_s
; Line 3780
	lea	ebx, DWORD PTR [eax+13]
	push	edi
$LL14@tls1_set_s:
; Line 3599
	movzx	eax, BYTE PTR [ebx-1]
	sub	eax, 1
	je	SHORT $LN26@tls1_set_s
	sub	eax, 1
	je	SHORT $LN27@tls1_set_s
	sub	eax, 1
	jne	$LN12@tls1_set_s
; Line 3610
	lea	edi, DWORD PTR [eax+5]
	jmp	SHORT $LN58@tls1_set_s
$LN27@tls1_set_s:
; Line 3606
	mov	edi, 2
	jmp	SHORT $LN58@tls1_set_s
$LN26@tls1_set_s:
; Line 3602
	mov	edi, 1
$LN58@tls1_set_s:
; Line 3783
	lea	eax, DWORD PTR [edi*8]
	sub	eax, edi
	add	eax, 17					; 00000011H
	cmp	DWORD PTR [esi+eax*4], 0
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR tv819[esp+20], eax
	jne	SHORT $LN12@tls1_set_s
; Line 3564
	movzx	eax, BYTE PTR [ebx]
	dec	eax
	cmp	eax, 5
	ja	SHORT $LN39@tls1_set_s
	jmp	DWORD PTR $LN61@tls1_set_s[eax*4]
$LN33@tls1_set_s:
; Line 3571
	call	_EVP_md5
	mov	edx, eax
	jmp	SHORT $LN30@tls1_set_s
$LN34@tls1_set_s:
; Line 3575
	call	_EVP_sha1
	mov	edx, eax
	jmp	SHORT $LN30@tls1_set_s
$LN35@tls1_set_s:
; Line 3579
	call	_EVP_sha224
	mov	edx, eax
	jmp	SHORT $LN30@tls1_set_s
$LN36@tls1_set_s:
; Line 3582
	call	_EVP_sha256
	mov	edx, eax
	jmp	SHORT $LN30@tls1_set_s
$LN37@tls1_set_s:
; Line 3586
	call	_EVP_sha384
	mov	edx, eax
	jmp	SHORT $LN30@tls1_set_s
$LN38@tls1_set_s:
; Line 3589
	call	_EVP_sha512
	mov	edx, eax
	jmp	SHORT $LN30@tls1_set_s
$LN39@tls1_set_s:
; Line 3592
	xor	edx, edx
$LN30@tls1_set_s:
; Line 3785
	mov	eax, DWORD PTR tv819[esp+20]
; Line 3786
	lea	ecx, DWORD PTR [edi+3]
	mov	DWORD PTR [eax], edx
	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	mov	DWORD PTR [esi+eax*4], 256		; 00000100H
; Line 3787
	cmp	edi, 1
	jne	SHORT $LN12@tls1_set_s
; Line 3788
	mov	DWORD PTR [esi+84], 256			; 00000100H
; Line 3790
	mov	DWORD PTR [esi+68], edx
$LN12@tls1_set_s:
; Line 3781
	inc	ebp
	add	ebx, 16					; 00000010H
	cmp	ebp, DWORD PTR [esi+320]
	jb	$LL14@tls1_set_s
	mov	ebx, DWORD PTR _s$[esp+16]
	pop	edi
$LN13@tls1_set_s:
; Line 3799
	mov	eax, DWORD PTR [ebx+152]
	pop	ebp
	test	DWORD PTR [eax+56], 196609		; 00030001H
	jne	SHORT $LN8@tls1_set_s
; Line 3805
	cmp	DWORD PTR [esi+124], 0
	jne	SHORT $LN19@tls1_set_s
; Line 3806
	call	_EVP_sha1
	mov	DWORD PTR [esi+124], eax
$LN19@tls1_set_s:
; Line 3809
	cmp	DWORD PTR [esi+96], 0
	jne	SHORT $LN20@tls1_set_s
; Line 3810
	call	_EVP_sha1
	mov	DWORD PTR [esi+96], eax
; Line 3811
	call	_EVP_sha1
	mov	DWORD PTR [esi+68], eax
$LN20@tls1_set_s:
; Line 3815
	cmp	DWORD PTR [esi+208], 0
	jne	SHORT $LN8@tls1_set_s
; Line 3816
	call	_EVP_sha1
	mov	DWORD PTR [esi+208], eax
$LN8@tls1_set_s:
; Line 3038
	mov	eax, DWORD PTR [ebx+152]
	cmp	DWORD PTR [eax+316], 0
	jne	SHORT $LN7@tls1_set_s
; Line 3039
	push	3040					; 00000be0H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	376					; 00000178H
	push	335					; 0000014fH
	push	20					; 00000014H
	call	_ERR_put_error
; Line 3041
	mov	eax, 47					; 0000002fH
	jmp	SHORT $LN59@tls1_set_s
$LN57@tls1_set_s:
; Line 3033
	push	3033					; 00000bd9H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	65					; 00000041H
	push	335					; 0000014fH
	push	20					; 00000014H
	call	_ERR_put_error
; Line 3034
	mov	eax, 80					; 00000050H
$LN59@tls1_set_s:
; Line 3033
	add	esp, 20					; 00000014H
$err$62:
; Line 3048
	push	eax
	push	2
	push	ebx
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 3049
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 3050
	pop	ecx
	ret	0
$LN6@tls1_set_s:
; Line 3045
	push	esi
	call	_ssl_cert_set_default_md
	add	esp, 4
$LN7@tls1_set_s:
; Line 3046
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 3050
	pop	ecx
	ret	0
	npad	2
$LN61@tls1_set_s:
	DD	$LN33@tls1_set_s
	DD	$LN34@tls1_set_s
	DD	$LN35@tls1_set_s
	DD	$LN36@tls1_set_s
	DD	$LN37@tls1_set_s
	DD	$LN38@tls1_set_s
_tls1_set_server_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_parse_clienthello_tlsext
_TEXT	SEGMENT
_al$ = -4						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_ssl_parse_clienthello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 2499
	mov	eax, 4
	call	__chkstk
; Line 2501
	mov	eax, DWORD PTR _p$[esp]
; Line 2508
	lea	ecx, DWORD PTR _al$[esp+4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _s$[esp+8]
	mov	ebx, DWORD PTR [eax]
	push	ecx
	push	DWORD PTR _limit$[esp+12]
	mov	DWORD PTR _al$[esp+20], -1
	push	eax
	push	esi
	call	_ssl_scan_clienthello_tlsext
	add	esp, 16					; 00000010H
	test	eax, eax
	jg	SHORT $LN2@ssl_parse_
$LN6@ssl_parse_:
; Line 2509
	push	DWORD PTR _al$[esp+12]
	push	2
	push	esi
	call	_ssl3_send_alert
	add	esp, 12					; 0000000cH
; Line 2510
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 2525
	pop	ecx
	ret	0
$LN2@ssl_parse_:
; Line 2513
	push	esi
	call	_ssl_check_clienthello_tlsext_early
	add	esp, 4
	test	eax, eax
	jg	SHORT $LN3@ssl_parse_
; Line 2514
	push	2514					; 000009d2H
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	226					; 000000e2H
	push	302					; 0000012eH
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 2515
	xor	eax, eax
	pop	esi
	pop	ebx
; Line 2525
	pop	ecx
	ret	0
$LN3@ssl_parse_:
; Line 2518
	mov	eax, DWORD PTR [esi+152]
	add	eax, 356				; 00000164H
	push	eax
	call	_custom_ext_init
; Line 2519
	lea	eax, DWORD PTR _al$[esp+16]
	push	eax
	push	DWORD PTR _limit$[esp+16]
	push	ebx
	push	esi
	call	_ssl_scan_clienthello_custom_tlsext
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	SHORT $LN6@ssl_parse_
; Line 2524
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 2525
	pop	ecx
	ret	0
_ssl_parse_clienthello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_add_serverhello_tlsext
_TEXT	SEGMENT
_using_ecc$1$ = -40					; size = 4
_npa$1 = -40						; size = 4
_plist$2 = -40						; size = 4
_cryptopro_ext$3 = -36					; size = 36
_len$1$ = 8						; size = 4
_npalen$4 = 8						; size = 4
_el$5 = 8						; size = 4
_plistlen$6 = 8						; size = 4
_el$7 = 8						; size = 4
_s$ = 8							; size = 4
_ret$ = 12						; size = 4
_buf$ = 12						; size = 4
_limit$ = 16						; size = 4
_al$ = 20						; size = 4
_ssl_add_serverhello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1606
	mov	eax, 40					; 00000028H
	call	__chkstk
	push	ebp
; Line 1609
	mov	ebp, DWORD PTR _buf$[esp+40]
	push	edi
; Line 1614
	mov	edi, DWORD PTR _s$[esp+44]
	mov	DWORD PTR _ret$[esp+44], ebp
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, DWORD PTR [ecx+836]
; Line 1616
	test	BYTE PTR [eax+12], 224			; 000000e0H
	jne	SHORT $LN36@ssl_add_se
	test	BYTE PTR [eax+16], 64			; 00000040H
	je	SHORT $LN38@ssl_add_se
$LN36@ssl_add_se:
; Line 1618
	mov	eax, DWORD PTR [edi+192]
	mov	DWORD PTR _using_ecc$1$[esp+48], 1
	cmp	DWORD PTR [eax+216], 0
	jne	SHORT $LN39@ssl_add_se
$LN38@ssl_add_se:
	mov	DWORD PTR _using_ecc$1$[esp+48], 0
$LN39@ssl_add_se:
; Line 1623
	cmp	DWORD PTR [edi], 768			; 00000300H
	jne	SHORT $LN2@ssl_add_se
	cmp	DWORD PTR [ecx+1048], 0
	jne	SHORT $LN2@ssl_add_se
; Line 1624
	pop	edi
	mov	eax, ebp
	pop	ebp
; Line 1824
	add	esp, 40					; 00000028H
	ret	0
$LN2@ssl_add_se:
	push	ebx
; Line 1627
	mov	ebx, DWORD PTR _limit$[esp+48]
	push	esi
	lea	esi, DWORD PTR [ebp+2]
	mov	DWORD PTR _ret$[esp+52], esi
	cmp	esi, ebx
	jae	$LN47@ssl_add_se
; Line 1631
	cmp	DWORD PTR [edi+108], 0
	jne	SHORT $LN4@ssl_add_se
	cmp	DWORD PTR [edi+292], 1
	jne	SHORT $LN4@ssl_add_se
	mov	eax, DWORD PTR [edi+192]
	cmp	DWORD PTR [eax+208], 0
	je	SHORT $LN4@ssl_add_se
; Line 1632
	mov	eax, ebx
	sub	eax, esi
	sub	eax, 4
	js	$LN47@ssl_add_se
; Line 1635
	mov	BYTE PTR [esi], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+52], eax
; Line 1636
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 0
	mov	esi, DWORD PTR _ret$[esp+52]
	add	esi, 2
	mov	DWORD PTR _ret$[esp+52], esi
$LN4@ssl_add_se:
; Line 1639
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+1048], 0
	je	$LN6@ssl_add_se
; Line 1642
	push	0
	lea	eax, DWORD PTR _el$7[esp+56]
	push	eax
	push	0
	push	edi
	call	_ssl_add_serverhello_renegotiate_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN7@ssl_add_se
; Line 1643
	push	1643					; 0000066bH
; Line 1644
	jmp	$LN48@ssl_add_se
$LN7@ssl_add_se:
; Line 1647
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	eax, ebx
	sub	eax, DWORD PTR _el$7[esp+52]
	sub	eax, ecx
	sub	eax, 4
	js	$LN47@ssl_add_se
; Line 1650
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 1
	mov	ecx, DWORD PTR _ret$[esp+52]
; Line 1651
	mov	eax, DWORD PTR _el$7[esp+52]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+52], ecx
	sar	eax, 8
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	al, BYTE PTR _el$7[esp+52]
	mov	BYTE PTR [ecx+1], al
; Line 1653
	lea	ecx, DWORD PTR _el$7[esp+52]
	push	DWORD PTR _el$7[esp+52]
	mov	eax, DWORD PTR _ret$[esp+56]
	add	eax, 2
	push	ecx
	push	eax
	push	edi
	mov	DWORD PTR _ret$[esp+68], eax
	call	_ssl_add_serverhello_renegotiate_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN9@ssl_add_se
; Line 1654
	push	1654					; 00000676H
; Line 1655
	jmp	$LN48@ssl_add_se
$LN9@ssl_add_se:
; Line 1658
	mov	esi, DWORD PTR _ret$[esp+52]
	add	esi, DWORD PTR _el$7[esp+52]
	mov	DWORD PTR _ret$[esp+52], esi
$LN6@ssl_add_se:
; Line 1661
	cmp	DWORD PTR _using_ecc$1$[esp+56], 0
	je	$LN10@ssl_add_se
; Line 1669
	lea	eax, DWORD PTR _plistlen$6[esp+52]
	push	eax
	lea	eax, DWORD PTR _plist$2[esp+60]
	push	eax
	push	edi
	call	_tls1_get_formatlist
; Line 1671
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	sub	eax, esi
	sub	eax, 5
	js	$LN47@ssl_add_se
; Line 1673
	mov	edx, DWORD PTR _plistlen$6[esp+52]
	cmp	edx, eax
	ja	$LN47@ssl_add_se
; Line 1675
	cmp	edx, 255				; 000000ffH
	jbe	SHORT $LN13@ssl_add_se
; Line 1676
	push	1676					; 0000068cH
; Line 1677
	jmp	$LN48@ssl_add_se
$LN13@ssl_add_se:
; Line 1680
	mov	BYTE PTR [esi], 0
	mov	eax, DWORD PTR _ret$[esp+52]
; Line 1683
	push	edx
	push	DWORD PTR _plist$2[esp+60]
	mov	BYTE PTR [eax+1], 11			; 0000000bH
	lea	eax, DWORD PTR [edx+1]
	mov	ecx, DWORD PTR _ret$[esp+60]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+60], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [edx+1]
	mov	eax, DWORD PTR _ret$[esp+60]
	mov	BYTE PTR [eax+1], cl
	mov	eax, DWORD PTR _ret$[esp+60]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+60], eax
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _ret$[esp+60]
	inc	eax
	push	eax
	mov	DWORD PTR _ret$[esp+64], eax
	call	_memcpy
; Line 1684
	mov	esi, DWORD PTR _ret$[esp+64]
	add	esp, 12					; 0000000cH
	add	esi, DWORD PTR _plistlen$6[esp+52]
	mov	DWORD PTR _ret$[esp+52], esi
$LN10@ssl_add_se:
; Line 1693
	cmp	DWORD PTR [edi+320], 0
	je	SHORT $LN14@ssl_add_se
	push	0
	push	0
	push	32					; 00000020H
	push	edi
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, 16384				; 00004000H
	jne	SHORT $LN41@ssl_add_se
; Line 1694
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	eax, ebx
	sub	eax, ecx
	sub	eax, 4
	js	$LN47@ssl_add_se
; Line 1696
	mov	BYTE PTR [ecx], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 35			; 00000023H
	mov	eax, DWORD PTR _ret$[esp+52]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+52], eax
; Line 1697
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 0
	mov	esi, DWORD PTR _ret$[esp+52]
	add	esi, 2
	mov	DWORD PTR _ret$[esp+52], esi
	jmp	SHORT $LN14@ssl_add_se
$LN41@ssl_add_se:
	mov	esi, DWORD PTR _ret$[esp+52]
$LN14@ssl_add_se:
; Line 1700
	cmp	DWORD PTR [edi+300], 0
	je	SHORT $LN16@ssl_add_se
; Line 1701
	mov	eax, ebx
	sub	eax, esi
	sub	eax, 4
	js	$LN47@ssl_add_se
; Line 1703
	mov	BYTE PTR [esi], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 5
	mov	eax, DWORD PTR _ret$[esp+52]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+52], eax
; Line 1704
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 0
	mov	esi, DWORD PTR _ret$[esp+52]
	add	esi, 2
	mov	DWORD PTR _ret$[esp+52], esi
$LN16@ssl_add_se:
; Line 1724
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	$LN18@ssl_add_se
	cmp	DWORD PTR [edi+384], 0
	je	$LN18@ssl_add_se
; Line 1727
	push	0
	lea	eax, DWORD PTR _el$5[esp+56]
	push	eax
	push	0
	push	edi
	call	_ssl_add_serverhello_use_srtp_ext
; Line 1729
	mov	ecx, DWORD PTR _ret$[esp+68]
	mov	eax, ebx
	sub	eax, DWORD PTR _el$5[esp+68]
	add	esp, 16					; 00000010H
	sub	eax, ecx
	sub	eax, 4
	js	SHORT $LN47@ssl_add_se
; Line 1732
	mov	BYTE PTR [ecx], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 14			; 0000000eH
	mov	ecx, DWORD PTR _ret$[esp+52]
; Line 1733
	mov	eax, DWORD PTR _el$5[esp+52]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+52], ecx
	sar	eax, 8
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	al, BYTE PTR _el$5[esp+52]
	mov	BYTE PTR [ecx+1], al
; Line 1735
	lea	ecx, DWORD PTR _el$5[esp+52]
	push	DWORD PTR _el$5[esp+52]
	mov	eax, DWORD PTR _ret$[esp+56]
	add	eax, 2
	push	ecx
	push	eax
	push	edi
	mov	DWORD PTR _ret$[esp+68], eax
	call	_ssl_add_serverhello_use_srtp_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN20@ssl_add_se
; Line 1736
	push	1736					; 000006c8H
$LN48@ssl_add_se:
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	68					; 00000044H
	push	278					; 00000116H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN47@ssl_add_se:
; Line 1737
	pop	esi
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	ebp
; Line 1824
	add	esp, 40					; 00000028H
	ret	0
$LN20@ssl_add_se:
; Line 1739
	mov	esi, DWORD PTR _ret$[esp+52]
	add	esi, DWORD PTR _el$5[esp+52]
	mov	DWORD PTR _ret$[esp+52], esi
$LN18@ssl_add_se:
; Line 1745
	mov	eax, DWORD PTR [edi+88]
	mov	eax, DWORD PTR [eax+836]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 65535				; 0000ffffH
	cmp	eax, 128				; 00000080H
	je	SHORT $LN22@ssl_add_se
	cmp	eax, 129				; 00000081H
	jne	$LN21@ssl_add_se
$LN22@ssl_add_se:
	push	0
	push	0
	push	32					; 00000020H
	push	edi
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	$LN42@ssl_add_se
; Line 1754
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	eax, ebx
	sub	eax, ecx
	mov	DWORD PTR _cryptopro_ext$3[esp+56], 536930557 ; 2000e8fdH
	mov	DWORD PTR _cryptopro_ext$3[esp+60], 137371184 ; 08301e30H
	mov	DWORD PTR _cryptopro_ext$3[esp+64], -2060843514 ; 852a0606H
	mov	DWORD PTR _cryptopro_ext$3[esp+68], 151126531 ; 09020203H
	mov	DWORD PTR _cryptopro_ext$3[esp+72], 101058608 ; 06060830H
	mov	DWORD PTR _cryptopro_ext$3[esp+76], 33785130 ; 0203852aH
	mov	DWORD PTR _cryptopro_ext$3[esp+80], 137369090 ; 08301602H
	mov	DWORD PTR _cryptopro_ext$3[esp+84], -2060843514 ; 852a0606H
	mov	DWORD PTR _cryptopro_ext$3[esp+88], 386007555 ; 17020203H
	cmp	eax, 36					; 00000024H
	jl	$LN47@ssl_add_se
; Line 1756
	movups	xmm0, XMMWORD PTR _cryptopro_ext$3[esp+56]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _ret$[esp+52]
	movups	xmm0, XMMWORD PTR _cryptopro_ext$3[esp+72]
	mov	ecx, DWORD PTR _cryptopro_ext$3[esp+88]
	movups	XMMWORD PTR [eax+16], xmm0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	DWORD PTR [eax+32], ecx
; Line 1757
	mov	esi, DWORD PTR _ret$[esp+52]
	add	esi, 36					; 00000024H
	mov	DWORD PTR _ret$[esp+52], esi
	jmp	SHORT $LN21@ssl_add_se
$LN42@ssl_add_se:
	mov	esi, DWORD PTR _ret$[esp+52]
$LN21@ssl_add_se:
; Line 1762
	test	BYTE PTR [edi+388], 1
	je	SHORT $LN27@ssl_add_se
; Line 1763
	mov	eax, ebx
	sub	eax, esi
	sub	eax, 5
	js	$LN47@ssl_add_se
; Line 1765
	mov	BYTE PTR [esi], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 15			; 0000000fH
	mov	eax, DWORD PTR _ret$[esp+52]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+52], eax
; Line 1766
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 1
	mov	eax, DWORD PTR _ret$[esp+52]
	add	eax, 2
; Line 1772
	test	BYTE PTR [edi+388], 4
	mov	DWORD PTR _ret$[esp+52], eax
	je	SHORT $LN26@ssl_add_se
; Line 1773
	mov	BYTE PTR [eax], 2
	jmp	SHORT $LN46@ssl_add_se
$LN26@ssl_add_se:
; Line 1775
	mov	BYTE PTR [eax], 1
$LN46@ssl_add_se:
	inc	DWORD PTR _ret$[esp+52]
$LN27@ssl_add_se:
; Line 1781
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, DWORD PTR [ecx+1052]
; Line 1782
	mov	DWORD PTR [ecx+1052], 0
; Line 1783
	test	eax, eax
	je	$LN29@ssl_add_se
	mov	eax, DWORD PTR [edi+228]
	mov	ecx, DWORD PTR [eax+420]
	test	ecx, ecx
	je	$LN29@ssl_add_se
; Line 1788
	push	DWORD PTR [eax+424]
	lea	eax, DWORD PTR _npalen$4[esp+56]
	push	eax
	lea	eax, DWORD PTR _npa$1[esp+64]
	push	eax
	push	edi
	call	ecx
	add	esp, 16					; 00000010H
; Line 1791
	test	eax, eax
	jne	SHORT $LN29@ssl_add_se
; Line 1792
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	eax, ebx
	sub	eax, DWORD PTR _npalen$4[esp+52]
	sub	eax, ecx
	sub	eax, 4
	js	$LN47@ssl_add_se
; Line 1794
	mov	BYTE PTR [ecx], 51			; 00000033H
	mov	eax, DWORD PTR _ret$[esp+52]
	mov	BYTE PTR [eax+1], 116			; 00000074H
	mov	ecx, DWORD PTR _ret$[esp+52]
; Line 1795
	mov	eax, DWORD PTR _npalen$4[esp+52]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+52], ecx
	shr	eax, 8
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ret$[esp+52]
	mov	al, BYTE PTR _npalen$4[esp+52]
	mov	BYTE PTR [ecx+1], al
; Line 1796
	push	DWORD PTR _npalen$4[esp+52]
	mov	eax, DWORD PTR _ret$[esp+56]
	push	DWORD PTR _npa$1[esp+60]
	add	eax, 2
	push	eax
	mov	DWORD PTR _ret$[esp+64], eax
	call	_memcpy
; Line 1797
	mov	eax, DWORD PTR _npalen$4[esp+64]
	add	esp, 12					; 0000000cH
	add	DWORD PTR _ret$[esp+52], eax
; Line 1798
	mov	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [eax+1052], 1
$LN29@ssl_add_se:
; Line 1802
	push	DWORD PTR _al$[esp+52]
	lea	eax, DWORD PTR _ret$[esp+56]
	push	ebx
	push	eax
	push	1
	push	edi
	call	_custom_ext_add
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN47@ssl_add_se
; Line 1805
	mov	edx, DWORD PTR [edi+88]
	mov	esi, DWORD PTR [edx+1060]
	test	esi, esi
	je	$LN43@ssl_add_se
; Line 1807
	mov	edx, DWORD PTR [edx+1064]
; Line 1809
	sub	ebx, edx
	mov	eax, DWORD PTR _ret$[esp+52]
	sub	ebx, eax
	sub	ebx, 7
	mov	DWORD PTR _len$1$[esp+52], edx
	js	$LN47@ssl_add_se
; Line 1811
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+52]
; Line 1815
	push	edx
	push	esi
	mov	BYTE PTR [eax+1], 16			; 00000010H
	lea	eax, DWORD PTR [edx+3]
	mov	ecx, DWORD PTR _ret$[esp+60]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+60], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [edx+3]
	mov	eax, DWORD PTR _ret$[esp+60]
	mov	BYTE PTR [eax+1], cl
	lea	eax, DWORD PTR [edx+1]
	mov	ecx, DWORD PTR _ret$[esp+60]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+60], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [edx+1]
	mov	eax, DWORD PTR _ret$[esp+60]
	mov	BYTE PTR [eax+1], cl
	mov	eax, DWORD PTR _ret$[esp+60]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+60], eax
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _ret$[esp+60]
	inc	eax
	push	eax
	mov	DWORD PTR _ret$[esp+64], eax
	call	_memcpy
; Line 1816
	mov	edx, DWORD PTR _ret$[esp+64]
	add	esp, 12					; 0000000cH
	add	edx, DWORD PTR _len$1$[esp+52]
	jmp	SHORT $LN32@ssl_add_se
$LN43@ssl_add_se:
	mov	edx, DWORD PTR _ret$[esp+52]
$LN32@ssl_add_se:
; Line 1819
	mov	eax, edx
	sub	eax, ebp
	sub	eax, 2
	jne	SHORT $LN34@ssl_add_se
; Line 1820
	pop	esi
	pop	ebx
	pop	edi
	mov	eax, ebp
	pop	ebp
; Line 1824
	add	esp, 40					; 00000028H
	ret	0
$LN34@ssl_add_se:
	pop	esi
; Line 1822
	mov	ecx, eax
	mov	BYTE PTR [ebp+1], al
	pop	ebx
	sar	ecx, 8
; Line 1823
	mov	eax, edx
	pop	edi
	mov	BYTE PTR [ebp], cl
	pop	ebp
; Line 1824
	add	esp, 40					; 00000028H
	ret	0
_ssl_add_serverhello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl_add_clienthello_tlsext
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_using_ecc$1$ = -4					; size = 4
_num_curves$1 = -4					; size = 4
_extlen$1$ = 8						; size = 4
_el$2 = 8						; size = 4
_salg$3 = 8						; size = 4
_pcurves$4 = 8						; size = 4
_el$5 = 8						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_limit$ = 16						; size = 4
_al$ = 20						; size = 4
_ssl_add_clienthello_tlsext PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 1229
	mov	eax, 8
	call	__chkstk
	push	ebx
	push	ebp
; Line 1232
	mov	ebp, DWORD PTR _buf$[esp+12]
	mov	edx, ebp
	push	esi
	push	edi
; Line 1236
	mov	edi, DWORD PTR _s$[esp+20]
	mov	DWORD PTR _ret$[esp+24], edx
	mov	DWORD PTR _using_ecc$1$[esp+24], 0
	cmp	DWORD PTR [edi], 769			; 00000301H
	jge	SHORT $LN12@ssl_add_cl
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	SHORT $LN3@ssl_add_cl
$LN12@ssl_add_cl:
; Line 1239
	push	edi
	call	_SSL_get_ciphers
	mov	ebx, eax
; Line 1241
	xor	esi, esi
	push	ebx
	call	_sk_num
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN96@ssl_add_cl
	npad	1
$LL4@ssl_add_cl:
; Line 1242
	push	esi
	push	ebx
	call	_sk_value
	add	esp, 8
; Line 1247
	test	BYTE PTR [eax+12], 224			; 000000e0H
	jne	SHORT $LN82@ssl_add_cl
	test	BYTE PTR [eax+16], 64			; 00000040H
	jne	SHORT $LN82@ssl_add_cl
; Line 1241
	push	ebx
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@ssl_add_cl
; Line 1470
	jmp	SHORT $LN96@ssl_add_cl
$LN82@ssl_add_cl:
; Line 1248
	mov	DWORD PTR _using_ecc$1$[esp+24], 1
$LN96@ssl_add_cl:
	mov	edx, DWORD PTR _ret$[esp+24]
$LN3@ssl_add_cl:
; Line 1256
	cmp	DWORD PTR [edi+272], 768		; 00000300H
	jne	SHORT $LN15@ssl_add_cl
	mov	ecx, DWORD PTR [edi+88]
	cmp	DWORD PTR [ecx+1048], 0
	jne	SHORT $LN15@ssl_add_cl
; Line 1257
	pop	edi
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 1602
	add	esp, 8
	ret	0
$LN15@ssl_add_cl:
; Line 1261
	mov	ebp, DWORD PTR _limit$[esp+20]
	add	edx, 2
	mov	DWORD PTR _ret$[esp+24], edx
	cmp	edx, ebp
	jae	$LN19@ssl_add_cl
; Line 1264
	mov	ebx, DWORD PTR [edi+288]
	test	ebx, ebx
	je	$LN17@ssl_add_cl
; Line 1279
	mov	ecx, ebp
	sub	ecx, edx
	sub	ecx, 9
	js	$LN19@ssl_add_cl
	lea	esi, DWORD PTR [ebx+1]
$LL94@ssl_add_cl:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL94@ssl_add_cl
	sub	ebx, esi
	cmp	ebx, ecx
	ja	$LN19@ssl_add_cl
; Line 1284
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _ret$[esp+24]
; Line 1293
	push	ebx
	mov	BYTE PTR [eax+1], 0
	lea	eax, DWORD PTR [ebx+5]
	mov	ecx, DWORD PTR _ret$[esp+28]
	shr	eax, 8
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+28], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+5]
	mov	eax, DWORD PTR _ret$[esp+28]
	mov	BYTE PTR [eax+1], cl
	lea	eax, DWORD PTR [ebx+3]
	mov	ecx, DWORD PTR _ret$[esp+28]
	shr	eax, 8
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+28], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+3]
	mov	eax, DWORD PTR _ret$[esp+28]
	mov	BYTE PTR [eax+1], cl
	mov	eax, DWORD PTR _ret$[esp+28]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+28], eax
	mov	BYTE PTR [eax], 0
	mov	eax, ebx
	mov	ecx, DWORD PTR _ret$[esp+28]
	inc	ecx
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+28], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+28]
	mov	BYTE PTR [eax+1], bl
	mov	eax, DWORD PTR _ret$[esp+28]
	push	DWORD PTR [edi+288]
	add	eax, 2
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memcpy
; Line 1294
	mov	edx, DWORD PTR _ret$[esp+36]
	add	esp, 12					; 0000000cH
	add	edx, ebx
	mov	DWORD PTR _ret$[esp+24], edx
$LN17@ssl_add_cl:
; Line 1298
	cmp	DWORD PTR [edi+400], 0
	je	$LN20@ssl_add_cl
; Line 1301
	push	0
	lea	eax, DWORD PTR _el$5[esp+24]
	push	eax
	push	0
	push	edi
	call	_ssl_add_clienthello_renegotiate_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN21@ssl_add_cl
; Line 1302
	push	1302					; 00000516H
$LN100@ssl_add_cl:
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	68					; 00000044H
	push	277					; 00000115H
	push	20					; 00000014H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN19@ssl_add_cl:
; Line 1303
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 1602
	add	esp, 8
	ret	0
$LN21@ssl_add_cl:
; Line 1306
	mov	ecx, DWORD PTR _ret$[esp+24]
	mov	eax, ebp
	sub	eax, DWORD PTR _el$5[esp+20]
	sub	eax, ecx
	sub	eax, 4
	js	SHORT $LN19@ssl_add_cl
; Line 1309
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 1
	mov	ecx, DWORD PTR _ret$[esp+24]
; Line 1310
	mov	eax, DWORD PTR _el$5[esp+20]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+24], ecx
	sar	eax, 8
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ret$[esp+24]
	mov	al, BYTE PTR _el$5[esp+20]
	mov	BYTE PTR [ecx+1], al
; Line 1312
	lea	ecx, DWORD PTR _el$5[esp+20]
	push	DWORD PTR _el$5[esp+20]
	mov	eax, DWORD PTR _ret$[esp+28]
	add	eax, 2
	push	ecx
	push	eax
	push	edi
	mov	DWORD PTR _ret$[esp+40], eax
	call	_ssl_add_clienthello_renegotiate_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN23@ssl_add_cl
; Line 1313
	push	1313					; 00000521H
; Line 1314
	jmp	$LN100@ssl_add_cl
$LN23@ssl_add_cl:
; Line 1317
	mov	edx, DWORD PTR _ret$[esp+24]
	add	edx, DWORD PTR _el$5[esp+20]
	mov	DWORD PTR _ret$[esp+24], edx
$LN20@ssl_add_cl:
; Line 1321
	mov	ebx, DWORD PTR [edi+420]
	test	ebx, ebx
	je	$LN24@ssl_add_cl
; Line 1324
	lea	ecx, DWORD PTR [ebx+1]
$LL95@ssl_add_cl:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL95@ssl_add_cl
	sub	ebx, ecx
; Line 1325
	cmp	ebx, 255				; 000000ffH
	jg	$LN26@ssl_add_cl
	test	ebx, ebx
	je	$LN26@ssl_add_cl
; Line 1336
	mov	eax, ebp
	sub	eax, ebx
	sub	eax, edx
	sub	eax, 5
	js	$LN19@ssl_add_cl
; Line 1340
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
; Line 1343
	push	ebx
	mov	BYTE PTR [eax+1], 12			; 0000000cH
	lea	eax, DWORD PTR [ebx+1]
	mov	ecx, DWORD PTR _ret$[esp+28]
	add	ecx, 2
	sar	eax, 8
	mov	DWORD PTR _ret$[esp+28], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+1]
	mov	eax, DWORD PTR _ret$[esp+28]
	mov	BYTE PTR [eax+1], cl
	mov	eax, DWORD PTR _ret$[esp+28]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+28], eax
	mov	BYTE PTR [eax], bl
	mov	eax, DWORD PTR _ret$[esp+28]
	push	DWORD PTR [edi+420]
	inc	eax
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memcpy
; Line 1344
	mov	edx, DWORD PTR _ret$[esp+36]
	add	esp, 12					; 0000000cH
	add	edx, ebx
	mov	DWORD PTR _ret$[esp+24], edx
$LN24@ssl_add_cl:
; Line 1349
	cmp	DWORD PTR _using_ecc$1$[esp+24], 0
	je	$LN28@ssl_add_cl
; Line 835
	mov	esi, DWORD PTR [edi+328]
	test	esi, esi
	je	SHORT $LN74@ssl_add_cl
; Line 837
	mov	ebx, DWORD PTR [edi+324]
; Line 838
	jmp	SHORT $LN76@ssl_add_cl
$LN26@ssl_add_cl:
; Line 1326
	push	1326					; 0000052eH
; Line 1327
	jmp	$LN100@ssl_add_cl
$LN74@ssl_add_cl:
; Line 841
	mov	eax, DWORD PTR [edi+152]
	mov	esi, OFFSET _ecformats_default
	mov	ebx, DWORD PTR [eax+56]
	and	ebx, 196608				; 00030000H
	neg	ebx
	sbb	ebx, ebx
	add	ebx, 3
$LN76@ssl_add_cl:
; Line 1359
	mov	eax, ebp
	sub	eax, edx
	sub	eax, 5
	js	$LN19@ssl_add_cl
; Line 1361
	cmp	ebx, eax
	ja	$LN19@ssl_add_cl
; Line 1363
	cmp	ebx, 255				; 000000ffH
	jbe	SHORT $LN31@ssl_add_cl
; Line 1364
	push	1364					; 00000554H
; Line 1365
	jmp	$LN100@ssl_add_cl
$LN31@ssl_add_cl:
; Line 1368
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
; Line 1372
	push	ebx
	push	esi
	mov	BYTE PTR [eax+1], 11			; 0000000bH
	lea	eax, DWORD PTR [ebx+1]
	mov	ecx, DWORD PTR _ret$[esp+32]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+32], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+1]
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	BYTE PTR [eax+1], cl
	mov	eax, DWORD PTR _ret$[esp+32]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+32], eax
	mov	BYTE PTR [eax], bl
	mov	eax, DWORD PTR _ret$[esp+32]
	inc	eax
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memcpy
; Line 1378
	mov	eax, DWORD PTR [edi+336]
	add	DWORD PTR _ret$[esp+36], ebx
	mov	DWORD PTR _pcurves$4[esp+32], eax
; Line 1379
	lea	eax, DWORD PTR _num_curves$1[esp+36]
	push	eax
	lea	eax, DWORD PTR _pcurves$4[esp+36]
	push	eax
	push	0
	push	edi
	call	_tls1_get_curvelist
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN19@ssl_add_cl
; Line 1382
	mov	ecx, DWORD PTR _ret$[esp+24]
	mov	eax, ebp
	sub	eax, ecx
	sub	eax, 6
	js	$LN19@ssl_add_cl
; Line 1384
	mov	ebx, DWORD PTR _num_curves$1[esp+24]
	shr	eax, 1
	cmp	ebx, eax
	ja	$LN19@ssl_add_cl
; Line 1386
	cmp	ebx, 32766				; 00007ffeH
	jbe	SHORT $LN35@ssl_add_cl
; Line 1387
	push	1387					; 0000056bH
; Line 1388
	jmp	$LN100@ssl_add_cl
$LN35@ssl_add_cl:
; Line 1391
	mov	BYTE PTR [ecx], 0
	add	ebx, ebx
	mov	eax, DWORD PTR _ret$[esp+24]
; Line 1394
	push	ebx
	push	DWORD PTR _pcurves$4[esp+24]
	mov	BYTE PTR [eax+1], 10			; 0000000aH
	lea	eax, DWORD PTR [ebx+2]
	mov	ecx, DWORD PTR _ret$[esp+32]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+32], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+2]
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	BYTE PTR [eax+1], cl
	mov	eax, ebx
	mov	ecx, DWORD PTR _ret$[esp+32]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+32], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	BYTE PTR [eax+1], bl
	mov	eax, DWORD PTR _ret$[esp+32]
	add	eax, 2
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1395
	add	DWORD PTR _ret$[esp+24], ebx
$LN28@ssl_add_cl:
; Line 1399
	push	0
	push	0
	push	32					; 00000020H
	push	edi
	call	_SSL_ctrl
	add	esp, 16					; 00000010H
	test	eax, 16384				; 00004000H
	jne	$LN97@ssl_add_cl
; Line 1401
	cmp	DWORD PTR [edi+40], 0
	jne	SHORT $LN37@ssl_add_cl
	mov	ebx, DWORD PTR [edi+192]
	test	ebx, ebx
	je	SHORT $LN37@ssl_add_cl
	cmp	DWORD PTR [ebx+228], 0
	je	SHORT $LN37@ssl_add_cl
; Line 1402
	mov	ebx, DWORD PTR [ebx+232]
	jmp	SHORT $LN40@ssl_add_cl
$LN37@ssl_add_cl:
; Line 1403
	cmp	DWORD PTR [edi+192], 0
	je	SHORT $LN39@ssl_add_cl
	mov	eax, DWORD PTR [edi+348]
	test	eax, eax
	je	SHORT $LN39@ssl_add_cl
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN39@ssl_add_cl
; Line 1405
	movzx	ebx, WORD PTR [eax]
; Line 1406
	push	1406					; 0000057eH
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	ebx
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR [edi+192]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+228], eax
; Line 1407
	mov	eax, DWORD PTR [edi+192]
	mov	ecx, DWORD PTR [eax+228]
	test	ecx, ecx
	je	$LN19@ssl_add_cl
; Line 1409
	mov	eax, DWORD PTR [edi+348]
	push	ebx
	push	DWORD PTR [eax+4]
	push	ecx
	call	_memcpy
; Line 1411
	mov	eax, DWORD PTR [edi+192]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [eax+232], ebx
$LN40@ssl_add_cl:
; Line 1414
	test	ebx, ebx
	jne	SHORT $LN42@ssl_add_cl
	jmp	SHORT $LN93@ssl_add_cl
$LN39@ssl_add_cl:
; Line 1413
	xor	ebx, ebx
$LN93@ssl_add_cl:
; Line 1414
	mov	eax, DWORD PTR [edi+348]
	test	eax, eax
	je	SHORT $LN42@ssl_add_cl
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN97@ssl_add_cl
$LN42@ssl_add_cl:
; Line 1421
	mov	ecx, DWORD PTR _ret$[esp+24]
	mov	eax, ebp
	sub	eax, ebx
	sub	eax, ecx
	sub	eax, 4
	js	$LN19@ssl_add_cl
; Line 1423
	mov	BYTE PTR [ecx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 35			; 00000023H
; Line 1424
	mov	eax, ebx
	mov	ecx, DWORD PTR _ret$[esp+24]
	add	ecx, 2
	sar	eax, 8
	mov	DWORD PTR _ret$[esp+24], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], bl
	mov	esi, DWORD PTR _ret$[esp+24]
	add	esi, 2
	mov	DWORD PTR _ret$[esp+24], esi
; Line 1425
	test	ebx, ebx
	je	SHORT $skip_ext$102
; Line 1426
	mov	eax, DWORD PTR [edi+192]
	push	ebx
	push	DWORD PTR [eax+228]
	push	esi
	call	_memcpy
; Line 1427
	mov	esi, DWORD PTR _ret$[esp+36]
	add	esp, 12					; 0000000cH
	add	esi, ebx
	mov	DWORD PTR _ret$[esp+24], esi
	jmp	SHORT $skip_ext$102
$LN97@ssl_add_cl:
	mov	esi, DWORD PTR _ret$[esp+24]
$skip_ext$102:
; Line 1432
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 2
	je	$LN45@ssl_add_cl
; Line 1435
	lea	eax, DWORD PTR _salg$3[esp+20]
	push	eax
	push	edi
	call	_tls12_get_psigalgs
	mov	ebx, eax
; Line 1436
	mov	edx, ebp
	sub	edx, esi
	add	esp, 8
	lea	ecx, DWORD PTR [ebx+6]
	cmp	edx, ecx
	jb	$LN19@ssl_add_cl
; Line 1438
	mov	BYTE PTR [esi], 0
	mov	eax, DWORD PTR _ret$[esp+24]
; Line 1441
	push	ebx
	push	DWORD PTR _salg$3[esp+24]
	mov	BYTE PTR [eax+1], 13			; 0000000dH
	lea	eax, DWORD PTR [ebx+2]
	mov	ecx, DWORD PTR _ret$[esp+32]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+32], ecx
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+2]
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	BYTE PTR [eax+1], cl
	mov	eax, ebx
	mov	ecx, DWORD PTR _ret$[esp+32]
	add	ecx, 2
	shr	eax, 8
	mov	DWORD PTR _ret$[esp+32], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	BYTE PTR [eax+1], bl
	mov	eax, DWORD PTR _ret$[esp+32]
	add	eax, 2
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memcpy
; Line 1442
	mov	esi, DWORD PTR _ret$[esp+36]
	add	esp, 12					; 0000000cH
	add	esi, ebx
	mov	DWORD PTR _ret$[esp+24], esi
$LN45@ssl_add_cl:
; Line 1461
	cmp	DWORD PTR [edi+296], 1
	jne	$LN54@ssl_add_cl
; Line 1467
	push	DWORD PTR [edi+304]
	xor	ebx, ebx
	xor	esi, esi
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN6@ssl_add_cl
$LL7@ssl_add_cl:
; Line 1468
	push	esi
	push	DWORD PTR [edi+304]
	call	_sk_value
; Line 1469
	push	0
	push	eax
	call	_i2d_OCSP_RESPID
	add	esp, 16					; 00000010H
; Line 1470
	test	eax, eax
	jle	$LN19@ssl_add_cl
; Line 1472
	push	DWORD PTR [edi+304]
	add	eax, 2
	inc	esi
	add	ebx, eax
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL7@ssl_add_cl
$LN6@ssl_add_cl:
; Line 1475
	mov	eax, DWORD PTR [edi+308]
	test	eax, eax
	je	SHORT $LN49@ssl_add_cl
; Line 1476
	push	0
	push	eax
	call	_i2d_X509_EXTENSIONS
	mov	edx, eax
	add	esp, 8
	mov	DWORD PTR _extlen$1$[esp+20], edx
; Line 1477
	test	edx, edx
	jns	SHORT $LN50@ssl_add_cl
; Line 1303
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 1602
	add	esp, 8
	ret	0
$LN49@ssl_add_cl:
; Line 1480
	xor	edx, edx
	mov	DWORD PTR _extlen$1$[esp+20], edx
$LN50@ssl_add_cl:
; Line 1482
	mov	ecx, DWORD PTR _ret$[esp+24]
	mov	eax, ebp
	sub	eax, edx
	sub	eax, ebx
	sub	eax, ecx
	sub	eax, 7
	js	$LN19@ssl_add_cl
; Line 1484
	mov	BYTE PTR [ecx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 5
; Line 1485
	lea	eax, DWORD PTR [edx+ebx]
	mov	ecx, DWORD PTR _ret$[esp+24]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+24], ecx
	cmp	eax, 65520				; 0000fff0H
	jg	$LN19@ssl_add_cl
; Line 1487
	add	eax, 5
	sar	eax, 8
	mov	BYTE PTR [ecx], al
	lea	ecx, DWORD PTR [ebx+5]
	mov	eax, DWORD PTR _ret$[esp+24]
	add	cl, dl
	mov	BYTE PTR [eax+1], cl
	mov	eax, DWORD PTR _ret$[esp+24]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+24], eax
; Line 1488
	mov	BYTE PTR [eax], 1
; Line 1489
	mov	eax, ebx
	mov	ecx, DWORD PTR _ret$[esp+24]
	inc	ecx
	sar	eax, 8
	mov	DWORD PTR _ret$[esp+24], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], bl
; Line 1490
	xor	ebx, ebx
	push	DWORD PTR [edi+304]
	add	DWORD PTR _ret$[esp+28], 2
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN9@ssl_add_cl
$LL10@ssl_add_cl:
; Line 1492
	mov	esi, DWORD PTR _ret$[esp+24]
; Line 1493
	push	ebx
	push	DWORD PTR [edi+304]
	call	_sk_value
; Line 1495
	add	DWORD PTR _ret$[esp+32], 2
; Line 1496
	lea	ecx, DWORD PTR _ret$[esp+32]
	push	ecx
	push	eax
	call	_i2d_OCSP_RESPID
; Line 1498
	mov	ecx, eax
	mov	BYTE PTR [esi+1], al
	sar	ecx, 8
	inc	ebx
	mov	BYTE PTR [esi], cl
	push	DWORD PTR [edi+304]
	call	_sk_num
	add	esp, 20					; 00000014H
	cmp	ebx, eax
	jl	SHORT $LL10@ssl_add_cl
$LN9@ssl_add_cl:
; Line 1500
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	edx, DWORD PTR _extlen$1$[esp+20]
	mov	ecx, edx
	sar	ecx, 8
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], dl
	mov	esi, DWORD PTR _ret$[esp+24]
	add	esi, 2
	mov	DWORD PTR _ret$[esp+24], esi
; Line 1501
	test	edx, edx
	jle	SHORT $LN54@ssl_add_cl
; Line 1502
	lea	eax, DWORD PTR _ret$[esp+24]
	push	eax
	push	DWORD PTR [edi+308]
	call	_i2d_X509_EXTENSIONS
	mov	esi, DWORD PTR _ret$[esp+32]
	add	esp, 8
$LN54@ssl_add_cl:
; Line 1506
	mov	eax, ebp
	sub	eax, esi
	sub	eax, 5
	js	$LN19@ssl_add_cl
; Line 1508
	mov	BYTE PTR [esi], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 15			; 0000000fH
	mov	eax, DWORD PTR _ret$[esp+24]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+24], eax
; Line 1509
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 1
	mov	eax, DWORD PTR _ret$[esp+24]
	add	eax, 2
; Line 1515
	test	BYTE PTR [edi+388], 4
	mov	DWORD PTR _ret$[esp+24], eax
	je	SHORT $LN56@ssl_add_cl
; Line 1516
	mov	BYTE PTR [eax], 2
	jmp	SHORT $LN99@ssl_add_cl
$LN56@ssl_add_cl:
; Line 1518
	mov	BYTE PTR [eax], 1
$LN99@ssl_add_cl:
	mov	edx, DWORD PTR _ret$[esp+24]
; Line 1522
	mov	eax, DWORD PTR [edi+228]
	inc	edx
	mov	DWORD PTR _ret$[esp+24], edx
	cmp	DWORD PTR [eax+428], 0
	je	SHORT $LN58@ssl_add_cl
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+692], 0
	jne	SHORT $LN58@ssl_add_cl
; Line 1527
	mov	eax, ebp
	sub	eax, edx
	sub	eax, 4
	js	$LN19@ssl_add_cl
; Line 1529
	mov	BYTE PTR [edx], 51			; 00000033H
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 116			; 00000074H
	mov	eax, DWORD PTR _ret$[esp+24]
	add	eax, 2
	mov	DWORD PTR _ret$[esp+24], eax
; Line 1530
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 0
	mov	edx, DWORD PTR _ret$[esp+24]
	add	edx, 2
	mov	DWORD PTR _ret$[esp+24], edx
$LN58@ssl_add_cl:
; Line 1534
	cmp	DWORD PTR [edi+468], 0
	je	$LN60@ssl_add_cl
	mov	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [eax+692], 0
	jne	$LN60@ssl_add_cl
; Line 1535
	mov	eax, DWORD PTR [edi+472]
	mov	ecx, ebp
	sub	ecx, edx
	add	eax, 6
	cmp	ecx, eax
	jb	$LN19@ssl_add_cl
; Line 1537
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 16			; 00000010H
	mov	ecx, DWORD PTR _ret$[esp+24]
; Line 1538
	mov	eax, DWORD PTR [edi+472]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+24], ecx
	add	eax, 2
	shr	eax, 8
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+24]
	movzx	ecx, BYTE PTR [edi+472]
	add	cl, 2
	mov	BYTE PTR [eax+1], cl
	mov	ecx, DWORD PTR _ret$[esp+24]
; Line 1539
	mov	al, BYTE PTR [edi+473]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+24], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+24]
	movzx	ecx, BYTE PTR [edi+472]
	mov	BYTE PTR [eax+1], cl
; Line 1540
	push	DWORD PTR [edi+472]
	mov	eax, DWORD PTR _ret$[esp+28]
	push	DWORD PTR [edi+468]
	add	eax, 2
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memcpy
; Line 1541
	mov	eax, DWORD PTR [edi+472]
	add	esp, 12					; 0000000cH
	add	DWORD PTR _ret$[esp+24], eax
; Line 1542
	mov	eax, DWORD PTR [edi+152]
	mov	DWORD PTR [eax+376], 1
$LN60@ssl_add_cl:
; Line 1545
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 8
	je	$LN62@ssl_add_cl
	push	edi
	call	_SSL_get_srtp_profiles
	add	esp, 4
	test	eax, eax
	je	$LN62@ssl_add_cl
; Line 1548
	push	0
	lea	eax, DWORD PTR _el$2[esp+24]
	push	eax
	push	0
	push	edi
	call	_ssl_add_clienthello_use_srtp_ext
; Line 1550
	mov	ecx, DWORD PTR _ret$[esp+40]
	mov	eax, ebp
	sub	eax, DWORD PTR _el$2[esp+36]
	add	esp, 16					; 00000010H
	sub	eax, ecx
	sub	eax, 4
	js	$LN19@ssl_add_cl
; Line 1553
	mov	BYTE PTR [ecx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
	mov	BYTE PTR [eax+1], 14			; 0000000eH
	mov	ecx, DWORD PTR _ret$[esp+24]
; Line 1554
	mov	eax, DWORD PTR _el$2[esp+20]
	add	ecx, 2
	mov	DWORD PTR _ret$[esp+24], ecx
	sar	eax, 8
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ret$[esp+24]
	mov	al, BYTE PTR _el$2[esp+20]
	mov	BYTE PTR [ecx+1], al
; Line 1556
	lea	ecx, DWORD PTR _el$2[esp+20]
	push	DWORD PTR _el$2[esp+20]
	mov	eax, DWORD PTR _ret$[esp+28]
	add	eax, 2
	push	ecx
	push	eax
	push	edi
	mov	DWORD PTR _ret$[esp+40], eax
	call	_ssl_add_clienthello_use_srtp_ext
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN64@ssl_add_cl
; Line 1557
	push	1557					; 00000615H
; Line 1558
	jmp	$LN100@ssl_add_cl
$LN64@ssl_add_cl:
; Line 1560
	mov	eax, DWORD PTR _el$2[esp+20]
	add	DWORD PTR _ret$[esp+24], eax
$LN62@ssl_add_cl:
; Line 1563
	mov	eax, DWORD PTR [edi+152]
	add	eax, 348				; 0000015cH
	push	eax
	call	_custom_ext_init
; Line 1565
	push	DWORD PTR _al$[esp+24]
	lea	eax, DWORD PTR _ret$[esp+32]
	push	ebp
	push	eax
	push	0
	push	edi
	call	_custom_ext_add
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN19@ssl_add_cl
; Line 1574
	test	BYTE PTR [edi+256], 16			; 00000010H
; Line 1575
	mov	edx, DWORD PTR _ret$[esp+24]
	je	$LN68@ssl_add_cl
	mov	eax, DWORD PTR [edi+60]
	mov	ecx, edx
	sub	ecx, DWORD PTR [eax+4]
; Line 1581
	cmp	DWORD PTR [edi+52], 4624		; 00001210H
	jne	SHORT $LN67@ssl_add_cl
; Line 1582
	sub	ecx, 5
$LN67@ssl_add_cl:
; Line 1583
	lea	eax, DWORD PTR [ecx-256]
	cmp	eax, 255				; 000000ffH
	ja	SHORT $LN68@ssl_add_cl
; Line 1584
	mov	ebx, 512				; 00000200H
	sub	ebx, ecx
; Line 1585
	cmp	ebx, 4
	jl	SHORT $LN69@ssl_add_cl
; Line 1586
	sub	ebx, 4
	jmp	SHORT $LN70@ssl_add_cl
$LN69@ssl_add_cl:
; Line 1588
	xor	ebx, ebx
$LN70@ssl_add_cl:
; Line 1590
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _ret$[esp+24]
; Line 1592
	push	ebx
	push	0
	mov	BYTE PTR [eax+1], 21			; 00000015H
	mov	eax, ebx
	mov	ecx, DWORD PTR _ret$[esp+32]
	add	ecx, 2
	sar	eax, 8
	mov	DWORD PTR _ret$[esp+32], ecx
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _ret$[esp+32]
	mov	BYTE PTR [eax+1], bl
	mov	eax, DWORD PTR _ret$[esp+32]
	add	eax, 2
	push	eax
	mov	DWORD PTR _ret$[esp+36], eax
	call	_memset
; Line 1593
	mov	edx, DWORD PTR _ret$[esp+36]
	add	esp, 12					; 0000000cH
	add	edx, ebx
$LN68@ssl_add_cl:
; Line 1597
	mov	ebx, DWORD PTR _buf$[esp+20]
	mov	eax, edx
	sub	eax, ebx
	sub	eax, 2
	jne	SHORT $LN71@ssl_add_cl
; Line 1598
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 1602
	add	esp, 8
	ret	0
$LN71@ssl_add_cl:
	pop	edi
; Line 1600
	mov	ecx, eax
	mov	BYTE PTR [ebx+1], al
	pop	esi
	sar	ecx, 8
; Line 1601
	mov	eax, edx
	pop	ebp
	mov	BYTE PTR [ebx], cl
	pop	ebx
; Line 1602
	add	esp, 8
	ret	0
_ssl_add_clienthello_tlsext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_check_ec_tmp_key
_TEXT	SEGMENT
_curve_tmp$1 = 8					; size = 2
_curve_id$ = 8						; size = 2
_s$ = 8							; size = 4
_cid$ = 12						; size = 4
_tls1_check_ec_tmp_key PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 911
	push	esi
; Line 913
	mov	esi, DWORD PTR _s$[esp]
	push	edi
	mov	ecx, DWORD PTR [esi+152]
; Line 923
	test	DWORD PTR [ecx+56], 196608		; 00030000H
	mov	edi, DWORD PTR [ecx+44]
	je	SHORT $LN9@tls1_check
; Line 925
	mov	eax, DWORD PTR _cid$[esp+4]
	push	ebx
	cmp	eax, 50380843				; 0300c02bH
	jne	SHORT $LN3@tls1_check
; Line 926
	mov	bl, 23					; 00000017H
	jmp	SHORT $LN26@tls1_check
$LN3@tls1_check:
; Line 927
	cmp	eax, 50380844				; 0300c02cH
	jne	SHORT $LN27@tls1_check
; Line 928
	mov	bl, 24					; 00000018H
$LN26@tls1_check:
; Line 933
	push	0
	lea	eax, DWORD PTR _curve_id$[esp+12]
	mov	BYTE PTR _curve_id$[esp+13], bl
	push	eax
	push	esi
	mov	BYTE PTR _curve_id$[esp+20], 0
	call	_tls1_check_ec_key
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN27@tls1_check
; Line 936
	mov	eax, DWORD PTR [esi+152]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN10@tls1_check
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN10@tls1_check
; Line 941
	test	edi, edi
	je	SHORT $LN27@tls1_check
; Line 943
	push	edi
	lea	eax, DWORD PTR _curve_tmp$1[esp+12]
	push	0
	push	eax
	call	_tls1_set_ec_id
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN27@tls1_check
; Line 945
	mov	ax, WORD PTR _curve_tmp$1[esp+8]
	test	al, al
	je	SHORT $LN10@tls1_check
	cmp	ah, bl
	je	SHORT $LN10@tls1_check
$LN27@tls1_check:
	pop	ebx
	pop	edi
; Line 947
	xor	eax, eax
	pop	esi
; Line 972
	ret	0
$LN10@tls1_check:
	pop	ebx
	pop	edi
; Line 937
	mov	eax, 1
	pop	esi
; Line 972
	ret	0
$LN9@tls1_check:
; Line 951
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN17@tls1_check
; Line 953
	push	0
	push	esi
	call	_tls1_shared_curve
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
; Line 972
	ret	0
$LN17@tls1_check:
; Line 958
	test	edi, edi
	jne	SHORT $LN20@tls1_check
; Line 959
	xor	eax, eax
	cmp	DWORD PTR [ecx+48], eax
	pop	edi
	setne	al
	pop	esi
; Line 972
	ret	0
$LN20@tls1_check:
; Line 964
	push	edi
	lea	eax, DWORD PTR _curve_id$[esp+8]
	push	0
	push	eax
	call	_tls1_set_ec_id
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@tls1_check
	pop	edi
	pop	esi
; Line 972
	ret	0
$LN21@tls1_check:
; Line 970
	push	0
	lea	eax, DWORD PTR _curve_id$[esp+8]
	push	eax
	push	esi
	call	_tls1_check_ec_key
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 972
	ret	0
_tls1_check_ec_tmp_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_curves_list
_TEXT	SEGMENT
_ncb$ = -120						; size = 116
__$ArrayPad$ = -4					; size = 4
_pext$ = 8						; size = 4
_pextlen$ = 12						; size = 4
_str$ = 16						; size = 4
_tls1_set_curves_list PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 721
	mov	eax, 120				; 00000078H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+120], eax
	mov	eax, DWORD PTR _str$[esp+116]
; Line 724
	lea	ecx, DWORD PTR _ncb$[esp+120]
	push	esi
	mov	esi, DWORD PTR _pext$[esp+120]
	push	edi
	mov	edi, DWORD PTR _pextlen$[esp+124]
	push	ecx
	push	OFFSET _nid_cb
	push	1
	push	58					; 0000003aH
	push	eax
	mov	DWORD PTR _ncb$[esp+148], 0
	call	_CONF_parse_list
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN2@tls1_set_c
	pop	edi
	pop	esi
; Line 729
	mov	ecx, DWORD PTR __$ArrayPad$[esp+120]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	ret	0
$LN2@tls1_set_c:
; Line 726
	test	esi, esi
	jne	SHORT $LN3@tls1_set_c
; Line 727
	pop	edi
	lea	eax, DWORD PTR [esi+1]
	pop	esi
; Line 729
	mov	ecx, DWORD PTR __$ArrayPad$[esp+120]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	ret	0
$LN3@tls1_set_c:
; Line 728
	push	DWORD PTR _ncb$[esp+128]
	lea	eax, DWORD PTR _ncb$[esp+136]
	push	eax
	push	edi
	push	esi
	call	_tls1_set_curves
; Line 729
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	ret	0
_tls1_set_curves_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_set_curves
_TEXT	SEGMENT
_pext$ = 8						; size = 4
_pextlen$ = 12						; size = 4
_curves$ = 16						; size = 4
tv396 = 20						; size = 4
_ncurves$ = 20						; size = 4
_tls1_set_curves PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 631
	push	ebx
; Line 643
	mov	ebx, DWORD PTR _ncurves$[esp]
	push	ebp
	push	edi
	push	643					; 00000283H
	lea	eax, DWORD PTR [ebx+ebx]
	xor	edi, edi
	push	OFFSET ??_C@_0P@NKOFEPEL@?4?2ssl?2t1_lib?4c?$AA@
	push	eax
	mov	DWORD PTR tv396[esp+20], eax
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 644
	test	ebp, ebp
	jne	SHORT $LN5@tls1_set_c
	pop	edi
	pop	ebp
	pop	ebx
; Line 681
	ret	0
$LN5@tls1_set_c:
; Line 646
	xor	edx, edx
	push	esi
	mov	esi, ebp
	test	ebx, ebx
	je	$LN3@tls1_set_c
	npad	6
$LL4@tls1_set_c:
	mov	eax, DWORD PTR _curves$[esp+12]
	mov	eax, DWORD PTR [eax+edx*4]
; Line 389
	cmp	eax, 708				; 000002c4H
	jg	SHORT $LN43@tls1_set_c
	je	SHORT $LN27@tls1_set_c
	sub	eax, 409				; 00000199H
	je	SHORT $LN31@tls1_set_c
	sub	eax, 6
	jne	$LN52@tls1_set_c
; Line 435
	lea	ecx, DWORD PTR [eax+23]
; Line 668
	mov	eax, 8388608				; 00800000H
; Line 435
	jmp	$LN49@tls1_set_c
$LN31@tls1_set_c:
; Line 427
	mov	ecx, 19					; 00000013H
; Line 668
	mov	eax, 524288				; 00080000H
; Line 427
	jmp	$LN49@tls1_set_c
$LN27@tls1_set_c:
; Line 419
	mov	ecx, 15					; 0000000fH
; Line 668
	mov	eax, 32768				; 00008000H
; Line 419
	jmp	$LN49@tls1_set_c
$LN43@tls1_set_c:
; Line 389
	sub	eax, 709				; 000002c5H
	cmp	eax, 224				; 000000e0H
	ja	$LN52@tls1_set_c
	movzx	eax, BYTE PTR $LN51@tls1_set_c[eax]
	jmp	DWORD PTR $LN55@tls1_set_c[eax*4]
$LN13@tls1_set_c:
; Line 391
	mov	ecx, 1
; Line 668
	lea	eax, DWORD PTR [ecx+1]
; Line 391
	jmp	$LN49@tls1_set_c
$LN14@tls1_set_c:
; Line 393
	mov	ecx, 2
; Line 668
	lea	eax, DWORD PTR [ecx+2]
; Line 393
	jmp	$LN49@tls1_set_c
$LN15@tls1_set_c:
; Line 395
	mov	ecx, 3
; Line 668
	lea	eax, DWORD PTR [ecx+5]
; Line 395
	jmp	$LN49@tls1_set_c
$LN16@tls1_set_c:
; Line 397
	mov	ecx, 4
; Line 668
	lea	eax, DWORD PTR [ecx+12]
; Line 397
	jmp	$LN49@tls1_set_c
$LN17@tls1_set_c:
; Line 399
	mov	ecx, 5
; Line 668
	lea	eax, DWORD PTR [ecx+27]
; Line 399
	jmp	$LN49@tls1_set_c
$LN18@tls1_set_c:
; Line 401
	mov	ecx, 6
; Line 668
	lea	eax, DWORD PTR [ecx+58]
; Line 401
	jmp	$LN49@tls1_set_c
$LN19@tls1_set_c:
; Line 403
	mov	ecx, 7
; Line 668
	lea	eax, DWORD PTR [ecx+121]
; Line 403
	jmp	$LN49@tls1_set_c
$LN20@tls1_set_c:
; Line 405
	mov	ecx, 8
; Line 668
	mov	eax, 256				; 00000100H
; Line 405
	jmp	$LN49@tls1_set_c
$LN21@tls1_set_c:
; Line 407
	mov	ecx, 9
; Line 668
	mov	eax, 512				; 00000200H
; Line 407
	jmp	$LN49@tls1_set_c
$LN22@tls1_set_c:
; Line 409
	mov	ecx, 10					; 0000000aH
; Line 668
	mov	eax, 1024				; 00000400H
; Line 409
	jmp	$LN49@tls1_set_c
$LN23@tls1_set_c:
; Line 411
	mov	ecx, 11					; 0000000bH
; Line 668
	mov	eax, 2048				; 00000800H
; Line 411
	jmp	$LN49@tls1_set_c
$LN24@tls1_set_c:
; Line 413
	mov	ecx, 12					; 0000000cH
; Line 668
	mov	eax, 4096				; 00001000H
; Line 413
	jmp	$LN49@tls1_set_c
$LN25@tls1_set_c:
; Line 415
	mov	ecx, 13					; 0000000dH
; Line 668
	mov	eax, 8192				; 00002000H
; Line 415
	jmp	$LN49@tls1_set_c
$LN26@tls1_set_c:
; Line 417
	mov	ecx, 14					; 0000000eH
; Line 668
	mov	eax, 16384				; 00004000H
; Line 417
	jmp	$LN49@tls1_set_c
$LN28@tls1_set_c:
; Line 421
	mov	ecx, 16					; 00000010H
; Line 668
	mov	eax, 65536				; 00010000H
; Line 421
	jmp	SHORT $LN49@tls1_set_c
$LN29@tls1_set_c:
; Line 423
	mov	ecx, 17					; 00000011H
; Line 668
	mov	eax, 131072				; 00020000H
; Line 423
	jmp	SHORT $LN49@tls1_set_c
$LN30@tls1_set_c:
; Line 425
	mov	ecx, 18					; 00000012H
; Line 668
	mov	eax, 262144				; 00040000H
; Line 425
	jmp	SHORT $LN49@tls1_set_c
$LN32@tls1_set_c:
; Line 429
	mov	ecx, 20					; 00000014H
; Line 668
	mov	eax, 1048576				; 00100000H
; Line 429
	jmp	SHORT $LN49@tls1_set_c
$LN33@tls1_set_c:
; Line 431
	mov	ecx, 21					; 00000015H
; Line 668
	mov	eax, 2097152				; 00200000H
; Line 431
	jmp	SHORT $LN49@tls1_set_c
$LN34@tls1_set_c:
; Line 433
	mov	ecx, 22					; 00000016H
; Line 668
	mov	eax, 4194304				; 00400000H
; Line 433
	jmp	SHORT $LN49@tls1_set_c
$LN36@tls1_set_c:
; Line 437
	mov	ecx, 24					; 00000018H
; Line 668
	mov	eax, 16777216				; 01000000H
; Line 437
	jmp	SHORT $LN49@tls1_set_c
$LN37@tls1_set_c:
; Line 439
	mov	ecx, 25					; 00000019H
; Line 668
	mov	eax, 33554432				; 02000000H
; Line 439
	jmp	SHORT $LN49@tls1_set_c
$LN38@tls1_set_c:
; Line 441
	mov	ecx, 26					; 0000001aH
; Line 668
	mov	eax, 67108864				; 04000000H
; Line 441
	jmp	SHORT $LN49@tls1_set_c
$LN39@tls1_set_c:
; Line 443
	mov	ecx, 27					; 0000001bH
; Line 668
	mov	eax, 134217728				; 08000000H
; Line 443
	jmp	SHORT $LN49@tls1_set_c
$LN40@tls1_set_c:
; Line 445
	mov	ecx, 28					; 0000001cH
; Line 668
	mov	eax, 268435456				; 10000000H
$LN49@tls1_set_c:
; Line 669
	test	eax, edi
	jne	SHORT $LN52@tls1_set_c
; Line 673
	or	edi, eax
; Line 674
	mov	BYTE PTR [esi+1], cl
	mov	eax, ecx
	inc	edx
	sar	eax, 8
	mov	BYTE PTR [esi], al
	add	esi, 2
	cmp	edx, ebx
	jb	$LL4@tls1_set_c
$LN3@tls1_set_c:
; Line 676
	mov	esi, DWORD PTR _pext$[esp+12]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@tls1_set_c
; Line 677
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN8@tls1_set_c:
; Line 679
	mov	eax, DWORD PTR _pextlen$[esp+12]
	mov	ecx, DWORD PTR tv396[esp+12]
	mov	DWORD PTR [esi], ebp
	pop	esi
	pop	edi
	pop	ebp
	mov	DWORD PTR [eax], ecx
; Line 680
	mov	eax, 1
	pop	ebx
; Line 681
	ret	0
$LN52@tls1_set_c:
; Line 670
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
; Line 671
	xor	eax, eax
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 681
	ret	0
$LN55@tls1_set_c:
	DD	$LN28@tls1_set_c
	DD	$LN29@tls1_set_c
	DD	$LN30@tls1_set_c
	DD	$LN32@tls1_set_c
	DD	$LN33@tls1_set_c
	DD	$LN34@tls1_set_c
	DD	$LN36@tls1_set_c
	DD	$LN37@tls1_set_c
	DD	$LN13@tls1_set_c
	DD	$LN14@tls1_set_c
	DD	$LN15@tls1_set_c
	DD	$LN16@tls1_set_c
	DD	$LN17@tls1_set_c
	DD	$LN18@tls1_set_c
	DD	$LN19@tls1_set_c
	DD	$LN20@tls1_set_c
	DD	$LN21@tls1_set_c
	DD	$LN22@tls1_set_c
	DD	$LN23@tls1_set_c
	DD	$LN24@tls1_set_c
	DD	$LN25@tls1_set_c
	DD	$LN26@tls1_set_c
	DD	$LN38@tls1_set_c
	DD	$LN39@tls1_set_c
	DD	$LN40@tls1_set_c
	DD	$LN52@tls1_set_c
$LN51@tls1_set_c:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	22					; 00000016H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	23					; 00000017H
	DB	25					; 00000019H
	DB	24					; 00000018H
_tls1_set_curves ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_shared_curve
_TEXT	SEGMENT
_supp$1$ = -12						; size = 4
_supp$ = -12						; size = 4
_i$1$ = -8						; size = 4
_pref$ = -8						; size = 4
_num_supp$ = -4						; size = 4
_num_pref$1$ = 8					; size = 4
_num_pref$ = 8						; size = 4
_s$ = 8							; size = 4
_nmatch$ = 12						; size = 4
_tls1_shared_curve PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 559
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	esi
; Line 564
	mov	esi, DWORD PTR _s$[esp+12]
	cmp	DWORD PTR [esi+36], 0
	jne	SHORT $LN8@tls1_share
; Line 565
	or	eax, -1
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
$LN8@tls1_share:
	push	ebp
; Line 566
	mov	ebp, DWORD PTR _nmatch$[esp+16]
	cmp	ebp, -2					; fffffffeH
	jne	SHORT $LN9@tls1_share
; Line 567
	mov	eax, DWORD PTR [esi+152]
	test	DWORD PTR [eax+56], 196608		; 00030000H
	je	SHORT $LN10@tls1_share
; Line 572
	mov	eax, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+836]
	mov	ecx, DWORD PTR [eax+8]
; Line 573
	cmp	ecx, 50380843				; 0300c02bH
	jne	SHORT $LN11@tls1_share
; Line 574
	pop	ebp
	mov	eax, 415				; 0000019fH
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
$LN11@tls1_share:
; Line 575
	xor	eax, eax
	mov	edx, 715				; 000002cbH
	cmp	ecx, 50380844				; 0300c02cH
	pop	ebp
	cmove	eax, edx
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
$LN10@tls1_share:
; Line 581
	xor	ebp, ebp
$LN9@tls1_share:
; Line 587
	lea	eax, DWORD PTR _num_supp$[esp+20]
	push	eax
	lea	eax, DWORD PTR _supp$[esp+24]
	push	eax
	mov	eax, DWORD PTR [esi+256]
	shr	eax, 22					; 00000016H
	and	eax, 1
	push	eax
	push	esi
	call	_tls1_get_curvelist
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN42@tls1_share
; Line 592
	lea	eax, DWORD PTR _num_pref$[esp+16]
	push	eax
	lea	eax, DWORD PTR _pref$[esp+24]
	push	eax
	mov	eax, DWORD PTR [esi+256]
	shr	eax, 22					; 00000016H
	not	eax
	and	eax, 1
	push	eax
	push	esi
	call	_tls1_get_curvelist
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@tls1_share
$LN42@tls1_share:
	pop	ebp
; Line 595
	xor	eax, eax
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
$LN14@tls1_share:
	push	ebx
; Line 601
	mov	ebx, DWORD PTR _num_supp$[esp+24]
	push	edi
	test	ebx, ebx
	jne	SHORT $LN15@tls1_share
	test	DWORD PTR [esi+256], 4194304		; 00400000H
	je	SHORT $LN15@tls1_share
; Line 603
	mov	ecx, DWORD PTR _num_pref$[esp+24]
	mov	esi, OFFSET _eccurves_all
	mov	ebx, 28					; 0000001cH
	mov	DWORD PTR _num_pref$1$[esp+24], ecx
	jmp	SHORT $LN40@tls1_share
$LN15@tls1_share:
; Line 604
	mov	ecx, DWORD PTR _num_pref$[esp+24]
	mov	DWORD PTR _num_pref$1$[esp+24], ecx
	test	ecx, ecx
	jne	SHORT $LN36@tls1_share
	test	DWORD PTR [esi+256], 4194304		; 00400000H
	jne	SHORT $LN36@tls1_share
; Line 607
	mov	esi, DWORD PTR _supp$[esp+28]
	mov	ecx, 28					; 0000001cH
	mov	edi, OFFSET _eccurves_all
	mov	DWORD PTR _num_pref$1$[esp+24], ecx
	jmp	SHORT $LN41@tls1_share
$LN36@tls1_share:
	mov	esi, DWORD PTR _supp$[esp+28]
$LN40@tls1_share:
	mov	edi, DWORD PTR _pref$[esp+28]
$LN41@tls1_share:
; Line 611
	xor	eax, eax
	mov	DWORD PTR _supp$1$[esp+28], esi
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+28], eax
	test	ecx, ecx
	je	SHORT $LN35@tls1_share
	npad	3
$LL4@tls1_share:
; Line 612
	mov	ecx, esi
; Line 613
	xor	esi, esi
	test	ebx, ebx
	je	SHORT $LN2@tls1_share
; Line 614
	mov	ah, BYTE PTR [edi]
	npad	6
$LL7@tls1_share:
	cmp	ah, BYTE PTR [ecx]
	jne	SHORT $LN5@tls1_share
	mov	al, BYTE PTR [edi+1]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN5@tls1_share
; Line 615
	cmp	ebp, edx
	je	SHORT $LN28@tls1_share
; Line 619
	inc	edx
$LN5@tls1_share:
; Line 613
	inc	esi
	add	ecx, 2
	cmp	esi, ebx
	jb	SHORT $LL7@tls1_share
	mov	eax, DWORD PTR _i$1$[esp+28]
$LN2@tls1_share:
; Line 611
	inc	eax
	add	edi, 2
	mov	DWORD PTR _i$1$[esp+28], eax
	cmp	eax, DWORD PTR _num_pref$1$[esp+24]
	jae	SHORT $LN35@tls1_share
	mov	esi, DWORD PTR _supp$1$[esp+28]
	jmp	SHORT $LL4@tls1_share
$LN28@tls1_share:
; Line 616
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR [edi+1]
	shl	ecx, 8
	or	ecx, eax
; Line 380
	cmp	ecx, 1
	jl	SHORT $LN24@tls1_share
	cmp	ecx, 28					; 0000001cH
	ja	SHORT $LN24@tls1_share
; Line 383
	mov	eax, DWORD PTR _nid_list[ecx*4-4]
	pop	edi
	pop	ebx
	pop	ebp
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
$LN24@tls1_share:
	pop	edi
	pop	ebx
	pop	ebp
; Line 382
	xor	eax, eax
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
$LN35@tls1_share:
	pop	edi
; Line 623
	xor	eax, eax
	cmp	ebp, -1
	pop	ebx
	pop	ebp
	cmove	eax, edx
	pop	esi
; Line 627
	add	esp, 12					; 0000000cH
	ret	0
_tls1_shared_curve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_check_curve
_TEXT	SEGMENT
_curves$ = 8						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_num_curves$ = 16					; size = 4
_len$ = 16						; size = 4
_tls1_check_curve PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 527
	cmp	DWORD PTR _len$[esp-4], 3
	push	esi
	jne	SHORT $LN26@tls1_check
	mov	esi, DWORD PTR _p$[esp]
	cmp	BYTE PTR [esi], 3
	jne	SHORT $LN26@tls1_check
; Line 526
	mov	ecx, DWORD PTR _s$[esp]
	mov	eax, DWORD PTR [ecx+152]
	test	DWORD PTR [eax+56], 196608		; 00030000H
; Line 530
	je	SHORT $LN13@tls1_check
; Line 532
	cmp	BYTE PTR [esi+1], 0
	mov	eax, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR [eax+836]
	mov	eax, DWORD PTR [eax+8]
	jne	SHORT $LN26@tls1_check
; Line 534
	cmp	eax, 50380843				; 0300c02bH
	jne	SHORT $LN9@tls1_check
; Line 535
	cmp	BYTE PTR [esi+2], 23			; 00000017H
	je	SHORT $LN13@tls1_check
$LN26@tls1_check:
; Line 536
	xor	eax, eax
	pop	esi
; Line 550
	ret	0
$LN9@tls1_check:
; Line 537
	cmp	eax, 50380844				; 0300c02cH
	jne	SHORT $LN26@tls1_check
; Line 538
	cmp	BYTE PTR [esi+2], 24			; 00000018H
	je	SHORT $LN13@tls1_check
; Line 539
	xor	eax, eax
	pop	esi
; Line 550
	ret	0
$LN13@tls1_check:
; Line 543
	lea	eax, DWORD PTR _num_curves$[esp]
	push	eax
	lea	eax, DWORD PTR _curves$[esp+4]
	push	eax
	push	0
	push	ecx
	call	_tls1_get_curvelist
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN26@tls1_check
; Line 545
	push	ebx
	push	edi
	mov	edi, DWORD PTR _num_curves$[esp+8]
	xor	edx, edx
	test	edi, edi
	je	SHORT $LN23@tls1_check
; Line 546
	mov	bl, BYTE PTR [esi+1]
	mov	ecx, DWORD PTR _curves$[esp+8]
$LL4@tls1_check:
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $LN2@tls1_check
	mov	al, BYTE PTR [esi+2]
	cmp	al, BYTE PTR [ecx+1]
	je	SHORT $LN19@tls1_check
$LN2@tls1_check:
; Line 545
	inc	edx
	add	ecx, 2
	cmp	edx, edi
	jb	SHORT $LL4@tls1_check
$LN23@tls1_check:
	pop	edi
	pop	ebx
; Line 549
	xor	eax, eax
	pop	esi
; Line 550
	ret	0
$LN19@tls1_check:
	pop	edi
	pop	ebx
; Line 547
	mov	eax, 1
	pop	esi
; Line 550
	ret	0
_tls1_check_curve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_ec_nid2curve_id
_TEXT	SEGMENT
_nid$ = 8						; size = 4
_tls1_ec_nid2curve_id PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 389
	mov	eax, DWORD PTR _nid$[esp-4]
	cmp	eax, 708				; 000002c4H
	jg	SHORT $LN34@tls1_ec_ni
	je	SHORT $LN18@tls1_ec_ni
	sub	eax, 409				; 00000199H
	je	SHORT $LN22@tls1_ec_ni
	sub	eax, 6
	jne	$LN32@tls1_ec_ni
; Line 435
	mov	eax, 23					; 00000017H
; Line 449
	ret	0
$LN22@tls1_ec_ni:
; Line 427
	mov	eax, 19					; 00000013H
; Line 449
	ret	0
$LN18@tls1_ec_ni:
; Line 419
	mov	eax, 15					; 0000000fH
; Line 449
	ret	0
$LN34@tls1_ec_ni:
; Line 389
	add	eax, -709				; fffffd3bH
	cmp	eax, 224				; 000000e0H
	ja	$LN32@tls1_ec_ni
	movzx	eax, BYTE PTR $LN35@tls1_ec_ni[eax]
	jmp	DWORD PTR $LN37@tls1_ec_ni[eax*4]
$LN4@tls1_ec_ni:
; Line 391
	mov	eax, 1
; Line 449
	ret	0
$LN5@tls1_ec_ni:
; Line 393
	mov	eax, 2
; Line 449
	ret	0
$LN6@tls1_ec_ni:
; Line 395
	mov	eax, 3
; Line 449
	ret	0
$LN7@tls1_ec_ni:
; Line 397
	mov	eax, 4
; Line 449
	ret	0
$LN8@tls1_ec_ni:
; Line 399
	mov	eax, 5
; Line 449
	ret	0
$LN9@tls1_ec_ni:
; Line 401
	mov	eax, 6
; Line 449
	ret	0
$LN10@tls1_ec_ni:
; Line 403
	mov	eax, 7
; Line 449
	ret	0
$LN11@tls1_ec_ni:
; Line 405
	mov	eax, 8
; Line 449
	ret	0
$LN12@tls1_ec_ni:
; Line 407
	mov	eax, 9
; Line 449
	ret	0
$LN13@tls1_ec_ni:
; Line 409
	mov	eax, 10					; 0000000aH
; Line 449
	ret	0
$LN14@tls1_ec_ni:
; Line 411
	mov	eax, 11					; 0000000bH
; Line 449
	ret	0
$LN15@tls1_ec_ni:
; Line 413
	mov	eax, 12					; 0000000cH
; Line 449
	ret	0
$LN16@tls1_ec_ni:
; Line 415
	mov	eax, 13					; 0000000dH
; Line 449
	ret	0
$LN17@tls1_ec_ni:
; Line 417
	mov	eax, 14					; 0000000eH
; Line 449
	ret	0
$LN19@tls1_ec_ni:
; Line 421
	mov	eax, 16					; 00000010H
; Line 449
	ret	0
$LN20@tls1_ec_ni:
; Line 423
	mov	eax, 17					; 00000011H
; Line 449
	ret	0
$LN21@tls1_ec_ni:
; Line 425
	mov	eax, 18					; 00000012H
; Line 449
	ret	0
$LN23@tls1_ec_ni:
; Line 429
	mov	eax, 20					; 00000014H
; Line 449
	ret	0
$LN24@tls1_ec_ni:
; Line 431
	mov	eax, 21					; 00000015H
; Line 449
	ret	0
$LN25@tls1_ec_ni:
; Line 433
	mov	eax, 22					; 00000016H
; Line 449
	ret	0
$LN27@tls1_ec_ni:
; Line 437
	mov	eax, 24					; 00000018H
; Line 449
	ret	0
$LN28@tls1_ec_ni:
; Line 439
	mov	eax, 25					; 00000019H
; Line 449
	ret	0
$LN29@tls1_ec_ni:
; Line 441
	mov	eax, 26					; 0000001aH
; Line 449
	ret	0
$LN30@tls1_ec_ni:
; Line 443
	mov	eax, 27					; 0000001bH
; Line 449
	ret	0
$LN31@tls1_ec_ni:
; Line 445
	mov	eax, 28					; 0000001cH
; Line 449
	ret	0
$LN32@tls1_ec_ni:
; Line 447
	xor	eax, eax
; Line 449
	ret	0
	npad	2
$LN37@tls1_ec_ni:
	DD	$LN19@tls1_ec_ni
	DD	$LN20@tls1_ec_ni
	DD	$LN21@tls1_ec_ni
	DD	$LN23@tls1_ec_ni
	DD	$LN24@tls1_ec_ni
	DD	$LN25@tls1_ec_ni
	DD	$LN27@tls1_ec_ni
	DD	$LN28@tls1_ec_ni
	DD	$LN4@tls1_ec_ni
	DD	$LN5@tls1_ec_ni
	DD	$LN6@tls1_ec_ni
	DD	$LN7@tls1_ec_ni
	DD	$LN8@tls1_ec_ni
	DD	$LN9@tls1_ec_ni
	DD	$LN10@tls1_ec_ni
	DD	$LN11@tls1_ec_ni
	DD	$LN12@tls1_ec_ni
	DD	$LN13@tls1_ec_ni
	DD	$LN14@tls1_ec_ni
	DD	$LN15@tls1_ec_ni
	DD	$LN16@tls1_ec_ni
	DD	$LN17@tls1_ec_ni
	DD	$LN29@tls1_ec_ni
	DD	$LN30@tls1_ec_ni
	DD	$LN31@tls1_ec_ni
	DD	$LN32@tls1_ec_ni
$LN35@tls1_ec_ni:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	22					; 00000016H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	23					; 00000017H
	DB	25					; 00000019H
	DB	24					; 00000018H
_tls1_ec_nid2curve_id ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_ec_curve_id2nid
_TEXT	SEGMENT
_curve_id$ = 8						; size = 4
_tls1_ec_curve_id2nid PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 380
	mov	eax, DWORD PTR _curve_id$[esp-4]
	cmp	eax, 1
	jl	SHORT $LN3@tls1_ec_cu
	cmp	eax, 28					; 0000001cH
	ja	SHORT $LN3@tls1_ec_cu
; Line 383
	mov	eax, DWORD PTR _nid_list[eax*4-4]
; Line 384
	ret	0
$LN3@tls1_ec_cu:
; Line 382
	xor	eax, eax
; Line 384
	ret	0
_tls1_ec_curve_id2nid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_clear
_TEXT	SEGMENT
_s$ = 8							; size = 4
_tls1_clear PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 221
	push	esi
; Line 222
	mov	esi, DWORD PTR _s$[esp]
	push	esi
	call	_ssl3_clear
; Line 223
	mov	eax, DWORD PTR [esi+8]
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi], eax
	pop	esi
; Line 224
	ret	0
_tls1_clear ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_free
_TEXT	SEGMENT
_s$ = 8							; size = 4
_tls1_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 211
	push	esi
; Line 213
	mov	esi, DWORD PTR _s$[esp]
	mov	eax, DWORD PTR [esi+348]
	test	eax, eax
	je	SHORT $LN2@tls1_free
; Line 214
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN2@tls1_free:
; Line 217
	push	esi
	call	_ssl3_free
	add	esp, 4
	pop	esi
; Line 218
	ret	0
_tls1_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_new
_TEXT	SEGMENT
_s$ = 8							; size = 4
_tls1_new PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 203
	push	esi
; Line 204
	mov	esi, DWORD PTR _s$[esp]
	push	esi
	call	_ssl3_new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@tls1_new
	pop	esi
; Line 208
	ret	0
$LN2@tls1_new:
; Line 206
	mov	eax, DWORD PTR [esi+8]
	push	esi
	mov	eax, DWORD PTR [eax+8]
	call	eax
	add	esp, 4
; Line 207
	mov	eax, 1
	pop	esi
; Line 208
	ret	0
_tls1_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_default_timeout
_TEXT	SEGMENT
_tls1_default_timeout PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 199
	mov	eax, 7200				; 00001c20H
; Line 200
	ret	0
_tls1_default_timeout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SSL_check_chain
_TEXT	SEGMENT
_s$ = 8							; size = 4
_x$ = 12						; size = 4
_pk$ = 16						; size = 4
_chain$ = 20						; size = 4
_SSL_check_chain PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 4436
	push	-1
	push	DWORD PTR _chain$[esp]
	push	DWORD PTR _pk$[esp+4]
	push	DWORD PTR _x$[esp+8]
	push	DWORD PTR _s$[esp+12]
	call	_tls1_check_chain
	add	esp, 20					; 00000014H
; Line 4437
	ret	0
_SSL_check_chain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SSL_get_shared_sigalgs
_TEXT	SEGMENT
_s$ = 8							; size = 4
_idx$ = 12						; size = 4
_psign$ = 16						; size = 4
_phash$ = 20						; size = 4
_psignhash$ = 24					; size = 4
_rsig$ = 28						; size = 4
_rhash$ = 32						; size = 4
_SSL_get_shared_sigalgs PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3846
	push	esi
; Line 3847
	mov	esi, DWORD PTR _s$[esp]
	mov	edx, DWORD PTR [esi+152]
	mov	ecx, DWORD PTR [edx+316]
; Line 3848
	test	ecx, ecx
	je	SHORT $LN3@SSL_get_sh
	mov	eax, DWORD PTR _idx$[esp]
	cmp	eax, DWORD PTR [edx+320]
	jge	SHORT $LN3@SSL_get_sh
; Line 3851
	mov	edx, DWORD PTR _phash$[esp]
	shl	eax, 4
	add	ecx, eax
	test	edx, edx
	je	SHORT $LN4@SSL_get_sh
; Line 3852
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
$LN4@SSL_get_sh:
; Line 3853
	mov	edx, DWORD PTR _psign$[esp]
	test	edx, edx
	je	SHORT $LN5@SSL_get_sh
; Line 3854
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN5@SSL_get_sh:
; Line 3855
	mov	edx, DWORD PTR _psignhash$[esp]
	test	edx, edx
	je	SHORT $LN6@SSL_get_sh
; Line 3856
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
$LN6@SSL_get_sh:
; Line 3857
	mov	edx, DWORD PTR _rsig$[esp]
	test	edx, edx
	je	SHORT $LN7@SSL_get_sh
; Line 3858
	mov	al, BYTE PTR [ecx+12]
	mov	BYTE PTR [edx], al
$LN7@SSL_get_sh:
; Line 3859
	mov	edx, DWORD PTR _rhash$[esp]
	test	edx, edx
	je	SHORT $LN8@SSL_get_sh
; Line 3860
	mov	al, BYTE PTR [ecx+13]
	mov	BYTE PTR [edx], al
$LN8@SSL_get_sh:
; Line 3861
	mov	eax, DWORD PTR [esi+152]
	pop	esi
	mov	eax, DWORD PTR [eax+320]
; Line 3862
	ret	0
$LN3@SSL_get_sh:
; Line 3849
	xor	eax, eax
	pop	esi
; Line 3862
	ret	0
_SSL_get_shared_sigalgs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _SSL_get_sigalgs
_TEXT	SEGMENT
_s$ = 8							; size = 4
_idx$ = 12						; size = 4
_psign$ = 16						; size = 4
_phash$ = 20						; size = 4
_psignhash$ = 24					; size = 4
_rsig$ = 28						; size = 4
_rhash$ = 32						; size = 4
_SSL_get_sigalgs PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\t1_lib.c
; Line 3825
	push	esi
; Line 3826
	mov	esi, DWORD PTR _s$[esp]
	mov	edx, DWORD PTR [esi+152]
	mov	ecx, DWORD PTR [edx+292]
; Line 3827
	test	ecx, ecx
	jne	SHORT $LN2@SSL_get_si
$LN8@SSL_get_si:
; Line 3828
	xor	eax, eax
	pop	esi
; Line 3841
	ret	0
$LN2@SSL_get_si:
; Line 3829
	mov	eax, DWORD PTR _idx$[esp]
	test	eax, eax
	js	SHORT $LN3@SSL_get_si
; Line 3830
	add	eax, eax
; Line 3831
	cmp	eax, DWORD PTR [edx+296]
	jge	SHORT $LN8@SSL_get_si
; Line 3834
	mov	edx, DWORD PTR _rhash$[esp]
	add	ecx, eax
	test	edx, edx
	je	SHORT $LN5@SSL_get_si
; Line 3835
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
$LN5@SSL_get_si:
; Line 3836
	mov	edx, DWORD PTR _rsig$[esp]
	test	edx, edx
	je	SHORT $LN6@SSL_get_si
; Line 3837
	mov	al, BYTE PTR [ecx+1]
	mov	BYTE PTR [edx], al
$LN6@SSL_get_si:
; Line 3838
	push	ecx
	push	DWORD PTR _psignhash$[esp+4]
	push	DWORD PTR _psign$[esp+8]
	push	DWORD PTR _phash$[esp+12]
	call	_tls1_lookup_sigalg
	add	esp, 16					; 00000010H
$LN3@SSL_get_si:
; Line 3840
	mov	eax, DWORD PTR [esi+152]
	pop	esi
	mov	eax, DWORD PTR [eax+296]
	shr	eax, 1
; Line 3841
	ret	0
_SSL_get_sigalgs ENDP
_TEXT	ENDS
END
