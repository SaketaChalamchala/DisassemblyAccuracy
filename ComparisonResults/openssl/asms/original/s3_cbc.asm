; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ssl3_cbc_copy_mac
PUBLIC	_ssl3_cbc_remove_padding
PUBLIC	_tls1_cbc_remove_padding
PUBLIC	_ssl3_cbc_record_digest_supported
PUBLIC	_ssl3_cbc_digest_record
PUBLIC	??_C@_08BJPGOLFB@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@FDMJMLAH@orig_len?5?$DO?$DN?5md_size?$AA@ ; `string'
PUBLIC	??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@	; `string'
PUBLIC	??_C@_0BL@DNIGBJK@md_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ ; `string'
PUBLIC	??_C@_0CO@LFAHLKMA@data_plus_mac_plus_padding_size?5@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0CG@BPMBJPDA@mac_secret_length?5?$DM?$DN?5sizeof?$CIhmac@ ; `string'
PUBLIC	__xmm@36363636363636363636363636363636
PUBLIC	__xmm@6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a
EXTRN	_OpenSSLDie:PROC
EXTRN	_CRYPTO_memcmp:PROC
EXTRN	_EVP_MD_type:PROC
EXTRN	_EVP_MD_CTX_md:PROC
EXTRN	_EVP_CIPHER_flags:PROC
EXTRN	_EVP_MD_CTX_init:PROC
EXTRN	_EVP_MD_CTX_cleanup:PROC
EXTRN	_EVP_DigestInit_ex:PROC
EXTRN	_EVP_DigestUpdate:PROC
EXTRN	_EVP_DigestFinal:PROC
EXTRN	_SHA1_Init:PROC
EXTRN	_SHA1_Transform:PROC
EXTRN	_SHA224_Init:PROC
EXTRN	_SHA256_Init:PROC
EXTRN	_SHA256_Transform:PROC
EXTRN	_SHA384_Init:PROC
EXTRN	_SHA512_Init:PROC
EXTRN	_SHA512_Transform:PROC
EXTRN	_MD5_Init:PROC
EXTRN	_MD5_Transform:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __xmm@6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a
CONST	SEGMENT
__xmm@6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a DB 'jjjjjjjjjjjjjjjj'
CONST	ENDS
;	COMDAT __xmm@36363636363636363636363636363636
CONST	SEGMENT
__xmm@36363636363636363636363636363636 DB '6666666666666666'
CONST	ENDS
;	COMDAT ??_C@_0CG@BPMBJPDA@mac_secret_length?5?$DM?$DN?5sizeof?$CIhmac@
CONST	SEGMENT
??_C@_0CG@BPMBJPDA@mac_secret_length?5?$DM?$DN?5sizeof?$CIhmac@ DB 'mac_s'
	DB	'ecret_length <= sizeof(hmac_pad)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LFAHLKMA@data_plus_mac_plus_padding_size?5@
CONST	SEGMENT
??_C@_0CO@LFAHLKMA@data_plus_mac_plus_padding_size?5@ DB 'data_plus_mac_p'
	DB	'lus_padding_size < 1024 * 1024', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DNIGBJK@md_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@
CONST	SEGMENT
??_C@_0BL@DNIGBJK@md_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ DB 'md_size <= '
	DB	'EVP_MAX_MD_SIZE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@
CONST	SEGMENT
??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@ DB '.\ssl\s3_cbc.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FDMJMLAH@orig_len?5?$DO?$DN?5md_size?$AA@
CONST	SEGMENT
??_C@_0BE@FDMJMLAH@orig_len?5?$DO?$DN?5md_size?$AA@ DB 'orig_len >= md_si'
	DB	'ze', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJPGOLFB@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
CONST	SEGMENT
??_C@_08BJPGOLFB@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ DB 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_sha512_final_raw
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_md_out$ = 12						; size = 4
_tls1_sha512_final_raw PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 359
	mov	edx, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _md_out$[esp-4]
	movzx	eax, BYTE PTR [edx+7]
	mov	BYTE PTR [ecx], al
	movzx	eax, BYTE PTR [edx+6]
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [edx+5]
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+3], al
	movzx	eax, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+4], al
	movzx	eax, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+5], al
	movzx	eax, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+6], al
	movzx	eax, BYTE PTR [edx]
	mov	BYTE PTR [ecx+7], al
	movzx	eax, BYTE PTR [edx+15]
	mov	BYTE PTR [ecx+8], al
	movzx	eax, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+9], al
	movzx	eax, BYTE PTR [edx+13]
	mov	BYTE PTR [ecx+10], al
	movzx	eax, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+11], al
	movzx	eax, BYTE PTR [edx+11]
	mov	BYTE PTR [ecx+12], al
	movzx	eax, BYTE PTR [edx+10]
	mov	BYTE PTR [ecx+13], al
	movzx	eax, BYTE PTR [edx+9]
	mov	BYTE PTR [ecx+14], al
	movzx	eax, BYTE PTR [edx+8]
	mov	BYTE PTR [ecx+15], al
	movzx	eax, BYTE PTR [edx+23]
	mov	BYTE PTR [ecx+16], al
	movzx	eax, BYTE PTR [edx+22]
	mov	BYTE PTR [ecx+17], al
	movzx	eax, BYTE PTR [edx+21]
	mov	BYTE PTR [ecx+18], al
	movzx	eax, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+19], al
	movzx	eax, BYTE PTR [edx+19]
	mov	BYTE PTR [ecx+20], al
	movzx	eax, BYTE PTR [edx+18]
	mov	BYTE PTR [ecx+21], al
	movzx	eax, BYTE PTR [edx+17]
	mov	BYTE PTR [ecx+22], al
	movzx	eax, BYTE PTR [edx+16]
	mov	BYTE PTR [ecx+23], al
	movzx	eax, BYTE PTR [edx+31]
	mov	BYTE PTR [ecx+24], al
	movzx	eax, BYTE PTR [edx+30]
	mov	BYTE PTR [ecx+25], al
	movzx	eax, BYTE PTR [edx+29]
	mov	BYTE PTR [ecx+26], al
	movzx	eax, BYTE PTR [edx+28]
	mov	BYTE PTR [ecx+27], al
	movzx	eax, BYTE PTR [edx+27]
	mov	BYTE PTR [ecx+28], al
	movzx	eax, BYTE PTR [edx+26]
	mov	BYTE PTR [ecx+29], al
	movzx	eax, BYTE PTR [edx+25]
	mov	BYTE PTR [ecx+30], al
	movzx	eax, BYTE PTR [edx+24]
	mov	BYTE PTR [ecx+31], al
	movzx	eax, BYTE PTR [edx+39]
	mov	BYTE PTR [ecx+32], al
	movzx	eax, BYTE PTR [edx+38]
	mov	BYTE PTR [ecx+33], al
	movzx	eax, BYTE PTR [edx+37]
	mov	BYTE PTR [ecx+34], al
	movzx	eax, BYTE PTR [edx+36]
	mov	BYTE PTR [ecx+35], al
	movzx	eax, BYTE PTR [edx+35]
	mov	BYTE PTR [ecx+36], al
	movzx	eax, BYTE PTR [edx+34]
	mov	BYTE PTR [ecx+37], al
	movzx	eax, BYTE PTR [edx+33]
	mov	BYTE PTR [ecx+38], al
	movzx	eax, BYTE PTR [edx+32]
	mov	BYTE PTR [ecx+39], al
	movzx	eax, BYTE PTR [edx+47]
	mov	BYTE PTR [ecx+40], al
	movzx	eax, BYTE PTR [edx+46]
	mov	BYTE PTR [ecx+41], al
	movzx	eax, BYTE PTR [edx+45]
	mov	BYTE PTR [ecx+42], al
	movzx	eax, BYTE PTR [edx+44]
	mov	BYTE PTR [ecx+43], al
	movzx	eax, BYTE PTR [edx+43]
	mov	BYTE PTR [ecx+44], al
	movzx	eax, BYTE PTR [edx+42]
	mov	BYTE PTR [ecx+45], al
	movzx	eax, BYTE PTR [edx+41]
	mov	BYTE PTR [ecx+46], al
	movzx	eax, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+47], al
	movzx	eax, BYTE PTR [edx+55]
	mov	BYTE PTR [ecx+48], al
	movzx	eax, BYTE PTR [edx+54]
	mov	BYTE PTR [ecx+49], al
	movzx	eax, BYTE PTR [edx+53]
	mov	BYTE PTR [ecx+50], al
	movzx	eax, BYTE PTR [edx+52]
	mov	BYTE PTR [ecx+51], al
	movzx	eax, BYTE PTR [edx+51]
	mov	BYTE PTR [ecx+52], al
	movzx	eax, BYTE PTR [edx+50]
	mov	BYTE PTR [ecx+53], al
	movzx	eax, BYTE PTR [edx+49]
	mov	BYTE PTR [ecx+54], al
	movzx	eax, BYTE PTR [edx+48]
	mov	BYTE PTR [ecx+55], al
	movzx	eax, BYTE PTR [edx+63]
	mov	BYTE PTR [ecx+56], al
	movzx	eax, BYTE PTR [edx+62]
	mov	BYTE PTR [ecx+57], al
	movzx	eax, BYTE PTR [edx+61]
	mov	BYTE PTR [ecx+58], al
	movzx	eax, BYTE PTR [edx+60]
	mov	BYTE PTR [ecx+59], al
	movzx	eax, BYTE PTR [edx+59]
	mov	BYTE PTR [ecx+60], al
	movzx	eax, BYTE PTR [edx+58]
	mov	BYTE PTR [ecx+61], al
	movzx	eax, BYTE PTR [edx+57]
	mov	BYTE PTR [ecx+62], al
	movzx	eax, BYTE PTR [edx+56]
	mov	BYTE PTR [ecx+63], al
; Line 361
	ret	0
_tls1_sha512_final_raw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_sha256_final_raw
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_md_out$ = 12						; size = 4
_tls1_sha256_final_raw PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 344
	mov	edx, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _md_out$[esp-4]
	movzx	eax, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx], al
	movzx	eax, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [edx]
	mov	BYTE PTR [ecx+3], al
	movzx	eax, BYTE PTR [edx+7]
	mov	BYTE PTR [ecx+4], al
	movzx	eax, BYTE PTR [edx+6]
	mov	BYTE PTR [ecx+5], al
	movzx	eax, BYTE PTR [edx+5]
	mov	BYTE PTR [ecx+6], al
	movzx	eax, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+7], al
	movzx	eax, BYTE PTR [edx+11]
	mov	BYTE PTR [ecx+8], al
	movzx	eax, BYTE PTR [edx+10]
	mov	BYTE PTR [ecx+9], al
	movzx	eax, BYTE PTR [edx+9]
	mov	BYTE PTR [ecx+10], al
	movzx	eax, BYTE PTR [edx+8]
	mov	BYTE PTR [ecx+11], al
	movzx	eax, BYTE PTR [edx+15]
	mov	BYTE PTR [ecx+12], al
	movzx	eax, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+13], al
	movzx	eax, BYTE PTR [edx+13]
	mov	BYTE PTR [ecx+14], al
	movzx	eax, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+15], al
	movzx	eax, BYTE PTR [edx+19]
	mov	BYTE PTR [ecx+16], al
	movzx	eax, BYTE PTR [edx+18]
	mov	BYTE PTR [ecx+17], al
	movzx	eax, BYTE PTR [edx+17]
	mov	BYTE PTR [ecx+18], al
	movzx	eax, BYTE PTR [edx+16]
	mov	BYTE PTR [ecx+19], al
	movzx	eax, BYTE PTR [edx+23]
	mov	BYTE PTR [ecx+20], al
	movzx	eax, BYTE PTR [edx+22]
	mov	BYTE PTR [ecx+21], al
	movzx	eax, BYTE PTR [edx+21]
	mov	BYTE PTR [ecx+22], al
	movzx	eax, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+23], al
	movzx	eax, BYTE PTR [edx+27]
	mov	BYTE PTR [ecx+24], al
	movzx	eax, BYTE PTR [edx+26]
	mov	BYTE PTR [ecx+25], al
	movzx	eax, BYTE PTR [edx+25]
	mov	BYTE PTR [ecx+26], al
	movzx	eax, BYTE PTR [edx+24]
	mov	BYTE PTR [ecx+27], al
	movzx	eax, BYTE PTR [edx+31]
	mov	BYTE PTR [ecx+28], al
	movzx	eax, BYTE PTR [edx+30]
	mov	BYTE PTR [ecx+29], al
	movzx	eax, BYTE PTR [edx+29]
	mov	BYTE PTR [ecx+30], al
	movzx	eax, BYTE PTR [edx+28]
	mov	BYTE PTR [ecx+31], al
; Line 346
	ret	0
_tls1_sha256_final_raw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_sha1_final_raw
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_md_out$ = 12						; size = 4
_tls1_sha1_final_raw PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 328
	mov	edx, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _md_out$[esp-4]
	movzx	eax, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx], al
	movzx	eax, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [edx]
	mov	BYTE PTR [ecx+3], al
; Line 329
	movzx	eax, BYTE PTR [edx+7]
	mov	BYTE PTR [ecx+4], al
	movzx	eax, BYTE PTR [edx+6]
	mov	BYTE PTR [ecx+5], al
	movzx	eax, BYTE PTR [edx+5]
	mov	BYTE PTR [ecx+6], al
	movzx	eax, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+7], al
; Line 330
	movzx	eax, BYTE PTR [edx+11]
	mov	BYTE PTR [ecx+8], al
	movzx	eax, BYTE PTR [edx+10]
	mov	BYTE PTR [ecx+9], al
	movzx	eax, BYTE PTR [edx+9]
	mov	BYTE PTR [ecx+10], al
	movzx	eax, BYTE PTR [edx+8]
	mov	BYTE PTR [ecx+11], al
; Line 331
	movzx	eax, BYTE PTR [edx+15]
	mov	BYTE PTR [ecx+12], al
	movzx	eax, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+13], al
	movzx	eax, BYTE PTR [edx+13]
	mov	BYTE PTR [ecx+14], al
	movzx	eax, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+15], al
; Line 332
	movzx	eax, BYTE PTR [edx+19]
	mov	BYTE PTR [ecx+16], al
	movzx	eax, BYTE PTR [edx+18]
	mov	BYTE PTR [ecx+17], al
	movzx	eax, BYTE PTR [edx+17]
	mov	BYTE PTR [ecx+18], al
	movzx	eax, BYTE PTR [edx+16]
	mov	BYTE PTR [ecx+19], al
; Line 333
	ret	0
_tls1_sha1_final_raw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_md5_final_raw
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_md_out$ = 12						; size = 4
_tls1_md5_final_raw PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 319
	mov	edx, DWORD PTR _ctx$[esp-4]
	mov	ecx, DWORD PTR _md_out$[esp-4]
	movzx	eax, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
; Line 320
	movzx	eax, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+4], al
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 8
	mov	BYTE PTR [ecx+5], al
	movzx	eax, BYTE PTR [edx+6]
	mov	BYTE PTR [ecx+6], al
	movzx	eax, BYTE PTR [edx+7]
	mov	BYTE PTR [ecx+7], al
; Line 321
	movzx	eax, BYTE PTR [edx+8]
	mov	BYTE PTR [ecx+8], al
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 8
	mov	BYTE PTR [ecx+9], al
	movzx	eax, BYTE PTR [edx+10]
	mov	BYTE PTR [ecx+10], al
	movzx	eax, BYTE PTR [edx+11]
	mov	BYTE PTR [ecx+11], al
; Line 322
	movzx	eax, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+12], al
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 8
	mov	BYTE PTR [ecx+13], al
	movzx	eax, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+14], al
	movzx	eax, BYTE PTR [edx+15]
	mov	BYTE PTR [ecx+15], al
; Line 323
	ret	0
_tls1_md5_final_raw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl3_cbc_digest_record
_TEXT	SEGMENT
_b$1$ = -841						; size = 1
_length_is_big_endian$1$ = -841				; size = 1
_md_transform$1$ = -840					; size = 4
_md_length_size$1$ = -836				; size = 4
_md_size$1$ = -832					; size = 4
tv1783 = -825						; size = 1
_k$1$ = -824						; size = 4
tv1769 = -820						; size = 4
_bits$1$ = -820						; size = 4
_md_final_raw$1$ = -816					; size = 4
tv1698 = -812						; size = 4
_overhang$1$ = -812					; size = 4
_num_blocks$1$ = -812					; size = 4
_data$GSCopy$1$ = -808					; size = 4
tv1693 = -804						; size = 4
_variance_blocks$1$ = -804				; size = 4
_header$GSCopy$1$ = -800				; size = 4
_i$2$ = -796						; size = 4
_header_length$1$ = -792				; size = 4
_c$1$ = -788						; size = 4
_j$1$ = -784						; size = 4
_ctx$GSCopy$1$ = -780					; size = 4
_sslv3_pad_length$1$ = -776				; size = 4
_mac_secret$GSCopy$1$ = -772				; size = 4
_index_a$1$ = -768					; size = 4
_index_b$1$ = -764					; size = 4
tv1787 = -760						; size = 4
tv1785 = -756						; size = 4
_b$1$ = -752						; size = 4
tv1782 = -748						; size = 4
tv1788 = -744						; size = 4
_md_out$GSCopy$1$ = -740				; size = 4
_md_out_size$GSCopy$1$ = -736				; size = 4
_md_out_size_u$ = -732					; size = 4
_md_ctx$ = -728						; size = 24
tv1801 = -704						; size = 16
_md_state$ = -688					; size = 216
_length_bytes$ = -472					; size = 16
_mac_out$ = -456					; size = 64
_hmac_pad$ = -392					; size = 128
_first_block$ = -264					; size = 128
_block$1 = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_md_out$ = 12						; size = 4
_md_out_size$ = 16					; size = 4
_header$ = 20						; size = 4
_data$ = 24						; size = 4
_data_plus_mac_size$ = 28				; size = 4
_data_plus_mac_plus_padding_size$ = 32			; size = 4
_mac_secret$ = 36					; size = 4
_mac_secret_length$ = 40				; size = 4
_is_sslv3$ = 44						; size = 1
_ssl3_cbc_digest_record PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 425
	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H
	mov	eax, 852				; 00000354H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+852], eax
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctx$GSCopy$1$[esp+852], eax
	mov	eax, DWORD PTR _md_out$[ebp]
	mov	DWORD PTR _md_out$GSCopy$1$[esp+852], eax
	mov	eax, DWORD PTR _header$[ebp]
	push	ebx
; Line 455
	mov	ebx, DWORD PTR _data_plus_mac_plus_padding_size$[ebp]
	mov	DWORD PTR _header$GSCopy$1$[esp+856], eax
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$GSCopy$1$[esp+856], eax
	mov	eax, DWORD PTR _mac_secret$[ebp]
	mov	DWORD PTR _mac_secret$GSCopy$1$[esp+856], eax
	mov	DWORD PTR _sslv3_pad_length$1$[esp+856], 40 ; 00000028H
	mov	DWORD PTR _md_length_size$1$[esp+856], 8
	mov	BYTE PTR _length_is_big_endian$1$[esp+856], 1
	push	esi
	mov	esi, DWORD PTR _md_out_size$[ebp]
	mov	DWORD PTR _md_out_size$GSCopy$1$[esp+860], esi
	push	edi
	mov	edi, 64					; 00000040H
	cmp	ebx, 1048576				; 00100000H
	jb	SHORT $LN62@ssl3_cbc_d
	push	OFFSET ??_C@_0CO@LFAHLKMA@data_plus_mac_plus_padding_size?5@
	push	455					; 000001c7H
	push	OFFSET ??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN62@ssl3_cbc_d:
; Line 457
	push	DWORD PTR _ctx$GSCopy$1$[esp+864]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_type
	add	esp, 8
	cmp	eax, 672				; 000002a0H
	jg	$LN63@ssl3_cbc_d
	je	$LN31@ssl3_cbc_d
	cmp	eax, 4
	je	SHORT $LN25@ssl3_cbc_d
	cmp	eax, 64					; 00000040H
	jne	$LN37@ssl3_cbc_d
; Line 469
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	eax
	call	_SHA1_Init
	add	esp, 4
	test	eax, eax
	jle	$LN157@ssl3_cbc_d
; Line 471
	mov	DWORD PTR _md_final_raw$1$[esp+864], OFFSET _tls1_sha1_final_raw
; Line 474
	mov	eax, 20					; 00000014H
	mov	DWORD PTR _md_transform$1$[esp+864], OFFSET _SHA1_Transform
; Line 475
	jmp	$LN158@ssl3_cbc_d
$LN25@ssl3_cbc_d:
; Line 459
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	eax
	call	_MD5_Init
	add	esp, 4
	test	eax, eax
	jle	$LN157@ssl3_cbc_d
; Line 465
	mov	edx, 48					; 00000030H
	mov	DWORD PTR _md_final_raw$1$[esp+864], OFFSET _tls1_md5_final_raw
	mov	DWORD PTR _md_transform$1$[esp+864], OFFSET _MD5_Transform
	mov	eax, 16					; 00000010H
	mov	DWORD PTR _sslv3_pad_length$1$[esp+864], edx
; Line 466
	mov	BYTE PTR _length_is_big_endian$1$[esp+864], 0
; Line 467
	jmp	$LN159@ssl3_cbc_d
$LN31@ssl3_cbc_d:
; Line 486
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	eax
	call	_SHA256_Init
	add	esp, 4
	test	eax, eax
	jle	$LN157@ssl3_cbc_d
; Line 488
	mov	DWORD PTR _md_final_raw$1$[esp+864], OFFSET _tls1_sha256_final_raw
; Line 491
	mov	eax, 32					; 00000020H
	mov	DWORD PTR _md_transform$1$[esp+864], OFFSET _SHA256_Transform
; Line 492
	jmp	$LN158@ssl3_cbc_d
$LN63@ssl3_cbc_d:
; Line 457
	sub	eax, 673				; 000002a1H
	je	$LN33@ssl3_cbc_d
	sub	eax, 1
	je	SHORT $LN35@ssl3_cbc_d
	sub	eax, 1
	je	SHORT $LN29@ssl3_cbc_d
$LN37@ssl3_cbc_d:
; Line 521
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	521					; 00000209H
	push	OFFSET ??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
; Line 522
	test	esi, esi
	je	$LN157@ssl3_cbc_d
; Line 523
	mov	DWORD PTR [esi], 0
; Line 770
	xor	eax, eax
; Line 771
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+852]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@ssl3_cbc_d:
; Line 478
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	eax
	call	_SHA224_Init
	add	esp, 4
	test	eax, eax
	jle	$LN157@ssl3_cbc_d
; Line 480
	mov	DWORD PTR _md_final_raw$1$[esp+864], OFFSET _tls1_sha256_final_raw
; Line 483
	mov	eax, 28					; 0000001cH
	mov	DWORD PTR _md_transform$1$[esp+864], OFFSET _SHA256_Transform
; Line 484
	jmp	SHORT $LN158@ssl3_cbc_d
$LN35@ssl3_cbc_d:
; Line 506
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	eax
	call	_SHA512_Init
	add	esp, 4
	test	eax, eax
	jle	$LN157@ssl3_cbc_d
; Line 511
	mov	eax, edi
; Line 514
	jmp	SHORT $LN160@ssl3_cbc_d
$LN33@ssl3_cbc_d:
; Line 496
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	eax
	call	_SHA384_Init
	add	esp, 4
	test	eax, eax
	jle	$LN157@ssl3_cbc_d
; Line 501
	mov	eax, 48					; 00000030H
$LN160@ssl3_cbc_d:
; Line 503
	mov	DWORD PTR _md_length_size$1$[esp+864], 16 ; 00000010H
	mov	edi, 128				; 00000080H
	mov	DWORD PTR _md_transform$1$[esp+864], OFFSET _SHA512_Transform
	mov	DWORD PTR _md_final_raw$1$[esp+864], OFFSET _tls1_sha512_final_raw
$LN158@ssl3_cbc_d:
	mov	edx, 40					; 00000028H
$LN159@ssl3_cbc_d:
; Line 532
	cmp	BYTE PTR _is_sslv3$[ebp], 0
	mov	ecx, 13					; 0000000dH
	mov	DWORD PTR _md_size$1$[esp+864], eax
	mov	DWORD PTR _header_length$1$[esp+864], ecx
	je	SHORT $LN39@ssl3_cbc_d
; Line 533
	mov	ecx, DWORD PTR _mac_secret_length$[ebp]
	add	ecx, 11					; 0000000bH
	add	ecx, edx
	mov	DWORD PTR _header_length$1$[esp+864], ecx
$LN39@ssl3_cbc_d:
; Line 553
	xor	edx, edx
; Line 566
	mov	esi, ecx
	cmp	BYTE PTR _is_sslv3$[ebp], dl
	sete	dl
	sub	esi, eax
	mov	eax, DWORD PTR _md_length_size$1$[esp+864]
	dec	ebx
	add	eax, esi
; Line 611
	xor	ecx, ecx
	add	eax, edi
	add	esi, DWORD PTR _data_plus_mac_size$[ebp]
	lea	edx, DWORD PTR [edx*4+2]
	add	eax, ebx
	mov	DWORD PTR _variance_blocks$1$[esp+864], edx
	xor	ebx, ebx
	xor	edx, edx
	mov	DWORD PTR _k$1$[esp+864], ebx
	div	edi
	xor	edx, edx
	mov	DWORD PTR _num_blocks$1$[esp+864], eax
	xor	eax, eax
	mov	DWORD PTR _i$2$[esp+864], eax
	mov	eax, esi
	div	edi
	mov	DWORD PTR _index_a$1$[esp+864], eax
	mov	eax, DWORD PTR _md_length_size$1$[esp+864]
	mov	DWORD PTR _c$1$[esp+864], edx
	add	eax, esi
	xor	edx, edx
	div	edi
	cmp	BYTE PTR _is_sslv3$[ebp], cl
	mov	edx, DWORD PTR _variance_blocks$1$[esp+864]
	setne	cl
	mov	DWORD PTR _index_b$1$[esp+864], eax
	mov	eax, DWORD PTR _num_blocks$1$[esp+864]
	add	ecx, edx
	cmp	eax, ecx
	jbe	SHORT $LN40@ssl3_cbc_d
; Line 612
	sub	eax, edx
; Line 613
	mov	ebx, eax
	mov	DWORD PTR _i$2$[esp+864], eax
	imul	ebx, edi
	mov	DWORD PTR _k$1$[esp+864], ebx
$LN40@ssl3_cbc_d:
; Line 617
	cmp	BYTE PTR _is_sslv3$[ebp], 0
	lea	eax, DWORD PTR [esi*8]
	mov	DWORD PTR _bits$1$[esp+864], eax
	jne	$LN156@ssl3_cbc_d
; Line 623
	lea	eax, DWORD PTR [eax+edi*8]
; Line 624
	push	edi
	mov	DWORD PTR _bits$1$[esp+868], eax
	lea	eax, DWORD PTR _hmac_pad$[esp+868]
	push	0
	push	eax
	call	_memset
; Line 625
	mov	esi, DWORD PTR _mac_secret_length$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, 128				; 00000080H
	jbe	SHORT $LN71@ssl3_cbc_d
	push	OFFSET ??_C@_0CG@BPMBJPDA@mac_secret_length?5?$DM?$DN?5sizeof?$CIhmac@
	push	625					; 00000271H
	push	OFFSET ??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN71@ssl3_cbc_d:
; Line 626
	push	esi
	push	DWORD PTR _mac_secret$GSCopy$1$[esp+868]
	lea	eax, DWORD PTR _hmac_pad$[esp+872]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 627
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN5@ssl3_cbc_d
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN127@ssl3_cbc_d
	movaps	xmm1, XMMWORD PTR __xmm@36363636363636363636363636363636
	mov	eax, edi
	and	eax, 31					; 0000001fH
	mov	edx, edi
	sub	edx, eax
	lea	eax, DWORD PTR _hmac_pad$[esp+880]
	npad	8
$LL6@ssl3_cbc_d:
; Line 628
	movups	xmm0, XMMWORD PTR [eax-16]
	add	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [eax+32]
	pxor	xmm0, xmm1
	movups	XMMWORD PTR [eax-48], xmm0
	movups	xmm0, XMMWORD PTR [eax-32]
	pxor	xmm0, xmm1
	movups	XMMWORD PTR [eax-32], xmm0
	cmp	ecx, edx
	jb	SHORT $LL6@ssl3_cbc_d
$LN127@ssl3_cbc_d:
; Line 627
	cmp	ecx, edi
	jae	SHORT $LN5@ssl3_cbc_d
	npad	10
$LL126@ssl3_cbc_d:
; Line 628
	xor	BYTE PTR _hmac_pad$[esp+ecx+864], 54	; 00000036H
	inc	ecx
	cmp	ecx, edi
	jb	SHORT $LL126@ssl3_cbc_d
$LN5@ssl3_cbc_d:
; Line 630
	mov	esi, DWORD PTR _md_transform$1$[esp+864]
	lea	eax, DWORD PTR _hmac_pad$[esp+864]
	push	eax
	lea	eax, DWORD PTR _md_state$[esp+868]
	push	eax
	call	esi
	add	esp, 8
	jmp	SHORT $LN41@ssl3_cbc_d
$LN156@ssl3_cbc_d:
	mov	esi, DWORD PTR _md_transform$1$[esp+864]
$LN41@ssl3_cbc_d:
; Line 633
	cmp	BYTE PTR _length_is_big_endian$1$[esp+864], 0
	je	SHORT $LN42@ssl3_cbc_d
; Line 634
	mov	eax, DWORD PTR _md_length_size$1$[esp+864]
	add	eax, -4					; fffffffcH
	push	eax
	lea	eax, DWORD PTR _length_bytes$[esp+868]
	push	0
	push	eax
	call	_memset
; Line 635
	mov	ecx, DWORD PTR _bits$1$[esp+876]
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _md_length_size$1$[esp+864]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _length_bytes$[esp+edx+860], al
; Line 636
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _length_bytes$[esp+edx+861], al
; Line 637
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR _length_bytes$[esp+edx+862], al
; Line 638
	mov	BYTE PTR _length_bytes$[esp+edx+863], cl
; Line 639
	jmp	SHORT $LN43@ssl3_cbc_d
$LN42@ssl3_cbc_d:
; Line 640
	push	DWORD PTR _md_length_size$1$[esp+864]
	lea	eax, DWORD PTR _length_bytes$[esp+868]
	push	0
	push	eax
	call	_memset
; Line 641
	mov	ecx, DWORD PTR _bits$1$[esp+876]
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _md_length_size$1$[esp+864]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _length_bytes$[esp+edx+859], al
; Line 642
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _length_bytes$[esp+edx+858], al
; Line 643
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR _length_bytes$[esp+edx+857], al
; Line 644
	mov	BYTE PTR _length_bytes$[esp+edx+856], cl
$LN43@ssl3_cbc_d:
; Line 647
	test	ebx, ebx
	je	$LN11@ssl3_cbc_d
; Line 648
	cmp	BYTE PTR _is_sslv3$[ebp], 0
	je	$LN45@ssl3_cbc_d
; Line 660
	mov	esi, DWORD PTR _header_length$1$[esp+864]
	cmp	esi, edi
	jbe	$LN157@ssl3_cbc_d
; Line 665
	push	DWORD PTR _header$GSCopy$1$[esp+864]
	lea	eax, DWORD PTR _md_state$[esp+868]
	sub	esi, edi
	push	eax
	mov	DWORD PTR _overhang$1$[esp+872], esi
	call	DWORD PTR _md_transform$1$[esp+872]
; Line 666
	mov	eax, DWORD PTR _header$GSCopy$1$[esp+872]
	add	eax, edi
	push	esi
	push	eax
	lea	eax, DWORD PTR _first_block$[esp+880]
	push	eax
	call	_memcpy
; Line 667
	mov	eax, edi
	sub	eax, esi
	push	eax
	push	DWORD PTR _data$GSCopy$1$[esp+888]
	lea	eax, DWORD PTR _first_block$[esp+892]
	add	eax, esi
	push	eax
	call	_memcpy
; Line 668
	lea	eax, DWORD PTR _first_block$[esp+896]
	push	eax
	lea	eax, DWORD PTR _md_state$[esp+900]
	push	eax
	call	DWORD PTR _md_transform$1$[esp+904]
; Line 669
	xor	edx, edx
	mov	eax, ebx
	div	edi
	add	esp, 40					; 00000028H
	dec	eax
	cmp	eax, 1
	jbe	$LN11@ssl3_cbc_d
; Line 664
	mov	esi, DWORD PTR _data$GSCopy$1$[esp+864]
	lea	ebx, DWORD PTR [eax-1]
	sub	esi, DWORD PTR _overhang$1$[esp+864]
	add	esi, edi
$LL9@ssl3_cbc_d:
; Line 670
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	esi
	push	eax
	call	DWORD PTR _md_transform$1$[esp+872]
	add	esp, 8
	add	esi, edi
	sub	ebx, 1
	jne	SHORT $LL9@ssl3_cbc_d
; Line 671
	jmp	$LN11@ssl3_cbc_d
$LN45@ssl3_cbc_d:
; Line 673
	mov	ecx, DWORD PTR _header$GSCopy$1$[esp+864]
	mov	eax, DWORD PTR [ecx+8]
	movq	xmm0, QWORD PTR [ecx]
	mov	DWORD PTR _first_block$[esp+872], eax
	mov	al, BYTE PTR [ecx+12]
	mov	BYTE PTR _first_block$[esp+876], al
; Line 674
	lea	eax, DWORD PTR [edi-13]
	push	eax
	push	DWORD PTR _data$GSCopy$1$[esp+868]
	lea	eax, DWORD PTR _first_block$[esp+885]
	movq	QWORD PTR _first_block$[esp+872], xmm0
	push	eax
	call	_memcpy
; Line 675
	lea	eax, DWORD PTR _first_block$[esp+876]
	push	eax
	lea	eax, DWORD PTR _md_state$[esp+880]
	push	eax
	call	esi
; Line 676
	xor	edx, edx
	mov	eax, ebx
	div	edi
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jbe	SHORT $LN11@ssl3_cbc_d
; Line 673
	mov	esi, DWORD PTR _data$GSCopy$1$[esp+864]
	lea	ebx, DWORD PTR [eax-1]
	add	esi, -13				; fffffff3H
	add	esi, edi
$LL12@ssl3_cbc_d:
; Line 677
	lea	eax, DWORD PTR _md_state$[esp+864]
	push	esi
	push	eax
	call	DWORD PTR _md_transform$1$[esp+872]
	add	esp, 8
	add	esi, edi
	sub	ebx, 1
	jne	SHORT $LL12@ssl3_cbc_d
$LN11@ssl3_cbc_d:
; Line 681
	push	64					; 00000040H
	lea	eax, DWORD PTR _mac_out$[esp+868]
	push	0
	push	eax
	call	_memset
; Line 689
	mov	eax, DWORD PTR _variance_blocks$1$[esp+876]
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _i$2$[esp+864]
	add	eax, edx
	mov	esi, DWORD PTR _md_size$1$[esp+864]
	mov	DWORD PTR tv1788[esp+864], eax
	cmp	edx, eax
	ja	$LN14@ssl3_cbc_d
$LL15@ssl3_cbc_d:
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 170
	mov	eax, edx
	xor	eax, DWORD PTR _index_a$1$[esp+864]
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 692
	shr	ecx, 31					; 0000001fH
	shr	eax, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	and	cl, al
; Line 170
	mov	eax, edx
	xor	eax, DWORD PTR _index_b$1$[esp+864]
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 692
	neg	cl
	mov	DWORD PTR tv1693[esp+864], ecx
; Line 694
	xor	edx, edx
	mov	DWORD PTR _j$1$[esp+864], edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 693
	shr	ecx, 31					; 0000001fH
	shr	eax, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	and	cl, al
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 693
	neg	cl
	movsx	eax, cl
	mov	DWORD PTR tv1698[esp+864], ecx
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR tv1801[esp+864], xmm0
; Line 694
	test	edi, edi
	je	$LN17@ssl3_cbc_d
	mov	eax, DWORD PTR _c$1$[esp+864]
	not	cl
	lea	esi, DWORD PTR [eax+1]
	shr	eax, 31					; 0000001fH
	mov	DWORD PTR tv1787[esp+864], eax
	mov	eax, DWORD PTR tv1693[esp+864]
	or	cl, al
	movzx	ebx, al
	mov	eax, edi
	sub	eax, DWORD PTR _md_length_size$1$[esp+864]
	shr	esi, 31					; 0000001fH
	mov	DWORD PTR tv1782[esp+864], eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 170
	mov	eax, DWORD PTR _md_length_size$1$[esp+864]
	mov	DWORD PTR _b$1$[esp+864], esi
	sub	eax, edi
	mov	esi, DWORD PTR _c$1$[esp+864]
	mov	DWORD PTR tv1785[esp+864], ebx
	neg	esi
	lea	ebx, DWORD PTR _length_bytes$[esp+864]
	mov	BYTE PTR tv1783[esp+864], cl
	add	eax, ebx
	mov	ebx, DWORD PTR _k$1$[esp+864]
	mov	DWORD PTR tv1769[esp+864], eax
$LL18@ssl3_cbc_d:
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 696
	mov	ecx, DWORD PTR _header_length$1$[esp+864]
	mov	BYTE PTR _b$1$[esp+864], 0
	cmp	ebx, ecx
	jae	SHORT $LN48@ssl3_cbc_d
; Line 697
	mov	eax, DWORD PTR _header$GSCopy$1$[esp+864]
	jmp	SHORT $LN161@ssl3_cbc_d
$LN48@ssl3_cbc_d:
; Line 698
	mov	eax, DWORD PTR _data_plus_mac_plus_padding_size$[ebp]
	add	eax, ecx
	cmp	ebx, eax
	jae	SHORT $LN50@ssl3_cbc_d
; Line 699
	mov	eax, DWORD PTR _data$GSCopy$1$[esp+864]
	sub	eax, ecx
$LN161@ssl3_cbc_d:
	mov	al, BYTE PTR [eax+ebx]
	mov	BYTE PTR _b$1$[esp+864], al
$LN50@ssl3_cbc_d:
; Line 702
	mov	eax, DWORD PTR tv1787[esp+864]
	inc	ebx
	mov	DWORD PTR _k$1$[esp+864], ebx
	mov	ecx, esi
	shr	ecx, 31					; 0000001fH
; Line 703
	lea	ebx, DWORD PTR [esi-1]
	xor	cl, al
	shr	edx, 31					; 0000001fH
	xor	al, dl
	shr	ebx, 31					; 0000001fH
	or	cl, al
	mov	eax, DWORD PTR _b$1$[esp+864]
	xor	bl, al
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	xor	cl, dl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 703
	xor	al, dl
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	dec	cl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 703
	or	bl, al
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 199
	movzx	ecx, cl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 702
	and	ecx, DWORD PTR tv1785[esp+864]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	xor	bl, dl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 725
	mov	edx, DWORD PTR _j$1$[esp+864]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	dec	bl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 703
	and	bl, BYTE PTR tv1693[esp+864]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	mov	al, cl
	not	al
	and	cl, 128					; 00000080H
	and	al, BYTE PTR _b$1$[esp+864]
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 714
	not	bl
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	or	al, cl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 720
	and	bl, al
	and	bl, BYTE PTR tv1783[esp+864]
; Line 725
	cmp	edx, DWORD PTR tv1782[esp+864]
	jb	SHORT $LN51@ssl3_cbc_d
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 199
	mov	eax, DWORD PTR tv1698[esp+864]
	movzx	ecx, al
; Line 192
	mov	al, cl
	not	al
	and	al, bl
	mov	ebx, DWORD PTR tv1769[esp+864]
	and	cl, BYTE PTR [ebx]
	or	al, cl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 727
	mov	bl, al
$LN51@ssl3_cbc_d:
; Line 732
	inc	DWORD PTR tv1769[esp+864]
	lea	eax, DWORD PTR _block$1[esp+864]
	add	eax, DWORD PTR _c$1$[esp+864]
	inc	edx
	mov	DWORD PTR _j$1$[esp+864], edx
	mov	BYTE PTR [eax+esi], bl
	inc	esi
	mov	ebx, DWORD PTR _k$1$[esp+864]
	cmp	edx, edi
	jb	$LL18@ssl3_cbc_d
	mov	esi, DWORD PTR _md_size$1$[esp+864]
$LN17@ssl3_cbc_d:
; Line 735
	lea	eax, DWORD PTR _block$1[esp+864]
	push	eax
	lea	eax, DWORD PTR _md_state$[esp+868]
	push	eax
	call	DWORD PTR _md_transform$1$[esp+872]
; Line 736
	lea	eax, DWORD PTR _block$1[esp+872]
	push	eax
	lea	eax, DWORD PTR _md_state$[esp+876]
	push	eax
	call	DWORD PTR _md_final_raw$1$[esp+880]
	add	esp, 16					; 00000010H
; Line 738
	xor	eax, eax
	test	esi, esi
	je	$LN13@ssl3_cbc_d
	cmp	esi, 32					; 00000020H
	jb	SHORT $LN129@ssl3_cbc_d
	movaps	xmm2, XMMWORD PTR tv1801[esp+864]
	mov	ecx, esi
	and	ecx, 31					; 0000001fH
	mov	edx, esi
	sub	edx, ecx
	npad	2
$LL21@ssl3_cbc_d:
; Line 739
	movups	xmm0, XMMWORD PTR _mac_out$[esp+eax+864]
	movups	xmm1, XMMWORD PTR _block$1[esp+eax+864]
	pand	xmm1, xmm2
	por	xmm1, xmm0
	movups	XMMWORD PTR _mac_out$[esp+eax+864], xmm1
	movups	xmm1, XMMWORD PTR _block$1[esp+eax+880]
	movups	xmm0, XMMWORD PTR _mac_out$[esp+eax+880]
	pand	xmm1, xmm2
	por	xmm1, xmm0
	movups	XMMWORD PTR _mac_out$[esp+eax+880], xmm1
	add	eax, 32					; 00000020H
	cmp	eax, edx
	jb	SHORT $LL21@ssl3_cbc_d
$LN129@ssl3_cbc_d:
; Line 738
	cmp	eax, esi
	jae	SHORT $LN13@ssl3_cbc_d
	mov	edx, DWORD PTR tv1698[esp+864]
	npad	1
$LL128@ssl3_cbc_d:
; Line 739
	mov	cl, BYTE PTR _block$1[esp+eax+864]
	and	cl, dl
	or	BYTE PTR _mac_out$[esp+eax+864], cl
	inc	eax
	cmp	eax, esi
	jb	SHORT $LL128@ssl3_cbc_d
$LN13@ssl3_cbc_d:
; Line 690
	mov	edx, DWORD PTR _i$2$[esp+864]
	inc	edx
	mov	DWORD PTR _i$2$[esp+864], edx
	cmp	edx, DWORD PTR tv1788[esp+864]
	jbe	$LL15@ssl3_cbc_d
$LN14@ssl3_cbc_d:
; Line 742
	lea	eax, DWORD PTR _md_ctx$[esp+864]
	push	eax
	call	_EVP_MD_CTX_init
; Line 743
	mov	eax, DWORD PTR _ctx$GSCopy$1$[esp+868]
	push	0
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR _md_ctx$[esp+876]
	push	eax
	call	_EVP_DigestInit_ex
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	$err$163
; Line 745
	cmp	BYTE PTR _is_sslv3$[ebp], 0
	je	$LN53@ssl3_cbc_d
; Line 747
	mov	ebx, DWORD PTR _sslv3_pad_length$1$[esp+864]
	lea	eax, DWORD PTR _hmac_pad$[esp+864]
	push	ebx
	push	92					; 0000005cH
	push	eax
	call	_memset
; Line 751
	push	DWORD PTR _mac_secret_length$[ebp]
	lea	eax, DWORD PTR _md_ctx$[esp+880]
	push	DWORD PTR _mac_secret$GSCopy$1$[esp+880]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 24					; 00000018H
	test	eax, eax
	jle	SHORT $err$163
	push	ebx
	lea	eax, DWORD PTR _hmac_pad$[esp+868]
	push	eax
	lea	eax, DWORD PTR _md_ctx$[esp+872]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $err$163
	push	esi
	lea	eax, DWORD PTR _mac_out$[esp+868]
	push	eax
	lea	eax, DWORD PTR _md_ctx$[esp+872]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	$LN57@ssl3_cbc_d
$err$163:
; Line 769
	lea	eax, DWORD PTR _md_ctx$[esp+864]
	push	eax
	call	_EVP_MD_CTX_cleanup
	add	esp, 4
$LN157@ssl3_cbc_d:
; Line 770
	xor	eax, eax
; Line 771
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+852]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN53@ssl3_cbc_d:
; Line 755
	xor	ecx, ecx
	test	edi, edi
	je	SHORT $LN23@ssl3_cbc_d
	cmp	edi, 32					; 00000020H
	jb	SHORT $LN131@ssl3_cbc_d
	movaps	xmm1, XMMWORD PTR __xmm@6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a
	mov	eax, edi
	and	eax, 31					; 0000001fH
	mov	edx, edi
	sub	edx, eax
	lea	eax, DWORD PTR _hmac_pad$[esp+880]
$LL24@ssl3_cbc_d:
; Line 756
	movups	xmm0, XMMWORD PTR [eax-16]
	add	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [eax+32]
	pxor	xmm0, xmm1
	movups	XMMWORD PTR [eax-48], xmm0
	movups	xmm0, XMMWORD PTR [eax-32]
	pxor	xmm0, xmm1
	movups	XMMWORD PTR [eax-32], xmm0
	cmp	ecx, edx
	jb	SHORT $LL24@ssl3_cbc_d
$LN131@ssl3_cbc_d:
; Line 755
	cmp	ecx, edi
	jae	SHORT $LN23@ssl3_cbc_d
	npad	5
$LL130@ssl3_cbc_d:
; Line 756
	xor	BYTE PTR _hmac_pad$[esp+ecx+864], 106	; 0000006aH
	inc	ecx
	cmp	ecx, edi
	jb	SHORT $LL130@ssl3_cbc_d
$LN23@ssl3_cbc_d:
; Line 759
	push	edi
	lea	eax, DWORD PTR _hmac_pad$[esp+868]
	push	eax
	lea	eax, DWORD PTR _md_ctx$[esp+872]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$err$163
	push	esi
	lea	eax, DWORD PTR _mac_out$[esp+868]
	push	eax
	lea	eax, DWORD PTR _md_ctx$[esp+872]
	push	eax
	call	_EVP_DigestUpdate
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$err$163
$LN57@ssl3_cbc_d:
; Line 762
	lea	eax, DWORD PTR _md_out_size_u$[esp+864]
	push	eax
	push	DWORD PTR _md_out$GSCopy$1$[esp+868]
	lea	eax, DWORD PTR _md_ctx$[esp+872]
	push	eax
	call	_EVP_DigestFinal
; Line 763
	mov	ecx, DWORD PTR _md_out_size$GSCopy$1$[esp+876]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	je	SHORT $LN59@ssl3_cbc_d
; Line 764
	mov	eax, DWORD PTR _md_out_size_u$[esp+864]
	mov	DWORD PTR [ecx], eax
$LN59@ssl3_cbc_d:
; Line 765
	lea	eax, DWORD PTR _md_ctx$[esp+864]
	push	eax
	call	_EVP_MD_CTX_cleanup
; Line 771
	mov	ecx, DWORD PTR __$ArrayPad$[esp+868]
	add	esp, 4
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ssl3_cbc_digest_record ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl3_cbc_record_digest_supported
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_ssl3_cbc_record_digest_supported PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 377
	push	DWORD PTR _ctx$[esp-4]
	call	_EVP_MD_CTX_md
	push	eax
	call	_EVP_MD_type
	add	esp, 8
	cmp	eax, 64					; 00000040H
	jg	SHORT $LN7@ssl3_cbc_r
	je	SHORT $LN4@ssl3_cbc_r
	cmp	eax, 4
	je	SHORT $LN4@ssl3_cbc_r
$LN5@ssl3_cbc_r:
; Line 390
	xor	al, al
; Line 392
	ret	0
$LN7@ssl3_cbc_r:
; Line 377
	add	eax, -672				; fffffd60H
	cmp	eax, 3
	ja	SHORT $LN5@ssl3_cbc_r
$LN4@ssl3_cbc_r:
; Line 388
	mov	al, 1
; Line 392
	ret	0
_ssl3_cbc_record_digest_supported ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _tls1_cbc_remove_padding
_TEXT	SEGMENT
_to_check$2$ = -8					; size = 4
_a$1$ = -4						; size = 4
_good$1$ = 8						; size = 4
_s$ = 8							; size = 4
_rec$ = 12						; size = 4
_block_size$ = 16					; size = 4
tv576 = 20						; size = 4
_mac_size$ = 20						; size = 4
_tls1_cbc_remove_padding PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 124
	mov	eax, 8
	call	__chkstk
	push	ebp
; Line 126
	mov	ebp, DWORD PTR _mac_size$[esp+8]
	push	esi
; Line 133
	mov	esi, DWORD PTR _rec$[esp+12]
	inc	ebp
	push	edi
	mov	edi, DWORD PTR _s$[esp+16]
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+100]
	test	BYTE PTR [eax+56], 1
	je	SHORT $LN5@tls1_cbc_r
	mov	ecx, DWORD PTR _block_size$[esp+16]
	mov	edx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [ecx+ebp]
	cmp	eax, edx
	jbe	SHORT $LN7@tls1_cbc_r
$LN46@tls1_cbc_r:
	pop	edi
	pop	esi
; Line 134
	xor	eax, eax
	pop	ebp
; Line 201
	add	esp, 8
	ret	0
$LN7@tls1_cbc_r:
; Line 136
	add	DWORD PTR [esi+12], ecx
; Line 137
	add	DWORD PTR [esi+16], ecx
; Line 138
	sub	edx, ecx
	mov	DWORD PTR [esi+4], edx
	jmp	SHORT $LN8@tls1_cbc_r
$LN5@tls1_cbc_r:
; Line 139
	cmp	ebp, DWORD PTR [esi+4]
	ja	SHORT $LN46@tls1_cbc_r
$LN8@tls1_cbc_r:
; Line 150
	test	DWORD PTR [edi+256], 512		; 00000200H
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+4]
	push	ebx
	movzx	ebx, BYTE PTR [ecx+eax-1]
	je	SHORT $LN11@tls1_cbc_r
	cmp	DWORD PTR [edi+136], 0
	jne	SHORT $LN11@tls1_cbc_r
; Line 152
	mov	eax, DWORD PTR [edi+88]
	push	8
	add	eax, 8
	push	OFFSET ??_C@_08BJPGOLFB@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
	push	eax
	call	_CRYPTO_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@tls1_cbc_r
	test	bl, 1
	jne	SHORT $LN10@tls1_cbc_r
; Line 154
	mov	eax, DWORD PTR [edi+88]
	or	DWORD PTR [eax], 8
$LN10@tls1_cbc_r:
; Line 156
	mov	eax, DWORD PTR [edi+88]
	test	BYTE PTR [eax], 8
	je	SHORT $LN11@tls1_cbc_r
	test	ebx, ebx
	je	SHORT $LN11@tls1_cbc_r
; Line 157
	dec	ebx
$LN11@tls1_cbc_r:
; Line 161
	mov	eax, DWORD PTR [edi+128]
	push	DWORD PTR [eax]
	call	_EVP_CIPHER_flags
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $LN12@tls1_cbc_r
; Line 163
	or	eax, -1
	sub	eax, ebx
	add	DWORD PTR [esi+4], eax
; Line 164
	mov	eax, 1
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 201
	add	esp, 8
	ret	0
$LN12@tls1_cbc_r:
; Line 167
	lea	ecx, DWORD PTR [ebx+ebp]
	mov	ebp, DWORD PTR [esi+4]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edx, ebp
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 167
	mov	DWORD PTR _a$1$[esp+24], ebp
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	sub	edx, ecx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 167
	mov	eax, ebp
	xor	edx, ecx
	xor	eax, ecx
	or	edx, eax
; Line 177
	mov	ecx, 255				; 000000ffH
	xor	edx, ebp
; Line 178
	lea	eax, DWORD PTR [ebp-1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	shr	edx, 31					; 0000001fH
; Line 150
	dec	edx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 178
	cmp	eax, ecx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	mov	DWORD PTR _good$1$[esp+20], edx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 178
	cmovb	ecx, eax
; Line 181
	xor	edi, edi
	mov	DWORD PTR _to_check$2$[esp+24], ecx
	test	ecx, ecx
	je	SHORT $LN3@tls1_cbc_r
; Line 183
	mov	ecx, ebx
	dec	ebp
	shr	ecx, 31					; 0000001fH
	add	ebp, DWORD PTR [esi+12]
	mov	esi, DWORD PTR _to_check$2$[esp+24]
	mov	DWORD PTR tv576[esp+20], ecx
$LL41@tls1_cbc_r:
; Line 181
	mov	al, BYTE PTR tv576[esp+20]
	lea	ebp, DWORD PTR [ebp-1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edx, ebx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 182
	mov	ecx, edi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	sub	edx, edi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 182
	shr	ecx, 31					; 0000001fH
	shr	edx, 31					; 0000001fH
	xor	al, cl
	xor	dl, cl
	inc	edi
	or	dl, al
; Line 188
	movzx	eax, BYTE PTR [ebp+1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	xor	dl, BYTE PTR tv576[esp+20]
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 188
	xor	eax, ebx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	dec	dl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 188
	movzx	ecx, dl
	mov	edx, DWORD PTR _good$1$[esp+20]
	and	ecx, eax
	not	ecx
	and	edx, ecx
	mov	DWORD PTR _good$1$[esp+20], edx
	cmp	edi, esi
	jb	SHORT $LL41@tls1_cbc_r
	mov	esi, DWORD PTR _rec$[esp+20]
	mov	ebp, DWORD PTR _a$1$[esp+24]
$LN3@tls1_cbc_r:
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 170
	not	edx
	movzx	eax, dl
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 195
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	and	ecx, eax
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 196
	lea	eax, DWORD PTR [ebx+1]
	neg	ecx
	and	eax, ecx
; Line 197
	sub	ebp, eax
; Line 198
	shl	eax, 8
	or	DWORD PTR [esi], eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	mov	eax, ecx
	pop	ebx
	pop	edi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 197
	mov	DWORD PTR [esi+4], ebp
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	and	eax, 1
	not	ecx
	pop	esi
	or	eax, ecx
	pop	ebp
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 201
	add	esp, 8
	ret	0
_tls1_cbc_remove_padding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl3_cbc_remove_padding
_TEXT	SEGMENT
_s$ = 8							; size = 4
_rec$ = 12						; size = 4
_block_size$ = 16					; size = 4
_mac_size$ = 20						; size = 4
_ssl3_cbc_remove_padding PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 90
	mov	ecx, DWORD PTR _mac_size$[esp-4]
	push	ebx
	push	ebp
; Line 95
	mov	ebp, DWORD PTR _rec$[esp+4]
	inc	ecx
	mov	ebx, DWORD PTR [ebp+4]
	cmp	ecx, ebx
	jbe	SHORT $LN2@ssl3_cbc_r
; Line 96
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 106
	ret	0
$LN2@ssl3_cbc_r:
; Line 98
	mov	eax, DWORD PTR [ebp+12]
	push	esi
	push	edi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edi, ebx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 98
	movzx	eax, BYTE PTR [eax+ebx-1]
; Line 99
	add	ecx, eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	sub	edi, ecx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 101
	xor	edi, ecx
	lea	esi, DWORD PTR [eax+1]
	mov	eax, ebx
	xor	eax, ecx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	ecx, DWORD PTR _block_size$[esp+12]
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 101
	or	edi, eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edx, ecx
	sub	edx, esi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 101
	mov	eax, esi
	xor	edx, esi
	xor	eax, ecx
	or	edx, eax
	xor	edi, ebx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	shr	edi, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 101
	xor	edx, ecx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	dec	edi
; Line 135
	shr	edx, 31					; 0000001fH
; Line 150
	dec	edx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 101
	and	edi, edx
; Line 102
	and	esi, edi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	mov	eax, edi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 103
	sub	ebx, esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	not	edi
	and	eax, 1
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 104
	shl	esi, 8
	or	DWORD PTR [ebp], esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	or	eax, edi
	pop	edi
	pop	esi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 103
	mov	DWORD PTR [ebp+4], ebx
	pop	ebp
	pop	ebx
; Line 106
	ret	0
_ssl3_cbc_remove_padding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ssl3_cbc_copy_mac
_TEXT	SEGMENT
tv452 = -168						; size = 4
_mac_start$1$ = -168					; size = 4
tv454 = -164						; size = 4
_mac_end$1$ = -164					; size = 4
_j$1$ = -160						; size = 4
_rotated_mac$1$ = -156					; size = 4
tv451 = -152						; size = 4
tv456 = -148						; size = 4
tv450 = -144						; size = 4
_rotate_offset$1$ = -140				; size = 4
_out$GSCopy$1$ = -136					; size = 4
_rotated_mac_buf$ = -132				; size = 128
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_rec$ = 12						; size = 4
_md_size$ = 16						; size = 4
_orig_len$ = 20						; size = 4
_ssl3_cbc_copy_mac PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 226
	mov	eax, 168				; 000000a8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+168], eax
	mov	eax, DWORD PTR _out$[esp+164]
	push	ebx
	mov	DWORD PTR _out$GSCopy$1$[esp+172], eax
; Line 237
	mov	eax, DWORD PTR _rec$[esp+168]
	push	ebp
	push	esi
; Line 248
	mov	esi, DWORD PTR _orig_len$[esp+176]
	xor	ebp, ebp
	mov	eax, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR _md_size$[esp+180]
	mov	DWORD PTR _mac_end$1$[esp+184], eax
	sub	eax, edi
	mov	DWORD PTR _mac_start$1$[esp+184], eax
	cmp	esi, edi
	jae	SHORT $LN11@ssl3_cbc_c
	push	OFFSET ??_C@_0BE@FDMJMLAH@orig_len?5?$DO?$DN?5md_size?$AA@
	push	248					; 000000f8H
	push	OFFSET ??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN11@ssl3_cbc_c:
; Line 249
	cmp	edi, 64					; 00000040H
	jbe	SHORT $LN13@ssl3_cbc_c
	push	OFFSET ??_C@_0BL@DNIGBJK@md_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@
	push	249					; 000000f9H
	push	OFFSET ??_C@_0P@MCJLMBFO@?4?2ssl?2s3_cbc?4c?$AA@
	call	_OpenSSLDie
	add	esp, 12					; 0000000cH
$LN13@ssl3_cbc_c:
; Line 252
	lea	eax, DWORD PTR _rotated_mac_buf$[esp+184]
	neg	eax
	lea	ebx, DWORD PTR _rotated_mac_buf$[esp+184]
	and	eax, 63					; 0000003fH
	add	ebx, eax
; Line 256
	lea	eax, DWORD PTR [edi+256]
	mov	DWORD PTR _rotated_mac$1$[esp+184], ebx
	cmp	esi, eax
	jbe	SHORT $LN8@ssl3_cbc_c
; Line 257
	mov	ebp, esi
	sub	ebp, edi
	sub	ebp, 256				; 00000100H
$LN8@ssl3_cbc_c:
; Line 267
	mov	eax, edi
; Line 268
	xor	edx, edx
	and	eax, -2					; fffffffeH
	shl	eax, 23					; 00000017H
	sub	eax, ebp
	add	eax, DWORD PTR _mac_start$1$[esp+184]
	div	edi
; Line 270
	push	edi
	mov	esi, edx
	push	0
	push	ebx
	mov	DWORD PTR _rotate_offset$1$[esp+196], esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 271
	mov	DWORD PTR _j$1$[esp+184], 0
	cmp	ebp, DWORD PTR _orig_len$[esp+180]
	jae	$LN3@ssl3_cbc_c
	mov	ecx, DWORD PTR _mac_start$1$[esp+184]
	mov	edx, ecx
	mov	ebx, DWORD PTR _mac_end$1$[esp+184]
	mov	esi, ebx
; Line 274
	mov	eax, DWORD PTR _rec$[esp+180]
	sub	esi, ecx
	shr	edx, 31					; 0000001fH
	mov	DWORD PTR tv456[esp+184], edx
	mov	edx, ebx
	shr	edx, 31					; 0000001fH
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv454[esp+184], edx
	mov	edx, ebp
	sub	edx, ebx
	mov	DWORD PTR tv451[esp+184], esi
	mov	esi, DWORD PTR _rotated_mac$1$[esp+184]
	add	eax, ebx
	mov	DWORD PTR tv452[esp+184], edx
	mov	DWORD PTR tv450[esp+184], eax
$LL4@ssl3_cbc_c:
; Line 272
	mov	ebx, DWORD PTR tv451[esp+184]
	mov	ecx, ebp
	mov	eax, DWORD PTR tv456[esp+184]
	inc	ebp
	shr	ecx, 31					; 0000001fH
	lea	ebx, DWORD PTR [ebx+edx]
; Line 273
	shr	edx, 31					; 0000001fH
	xor	dl, BYTE PTR tv454[esp+184]
	shr	ebx, 31					; 0000001fH
	xor	bl, al
	xor	al, cl
	or	bl, al
	mov	al, cl
	xor	al, BYTE PTR tv454[esp+184]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	xor	bl, cl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 273
	or	dl, al
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	dec	bl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 274
	mov	eax, DWORD PTR tv452[esp+184]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	xor	dl, cl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 274
	mov	ecx, DWORD PTR tv450[esp+184]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 150
	dec	dl
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 275
	not	dl
	mov	al, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR _j$1$[esp+184]
	and	dl, al
	and	dl, bl
	or	BYTE PTR [ecx+esi], dl
	mov	edx, ecx
	inc	edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	ecx, edx
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 276
	mov	eax, edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	sub	ecx, edi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 276
	xor	eax, edi
	xor	ecx, edi
	or	ecx, eax
	xor	ecx, edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 276
	neg	ecx
	and	edx, ecx
	mov	DWORD PTR _j$1$[esp+184], edx
	mov	edx, DWORD PTR tv452[esp+184]
	inc	edx
	mov	DWORD PTR tv452[esp+184], edx
	cmp	ebp, DWORD PTR _orig_len$[esp+180]
	jb	SHORT $LL4@ssl3_cbc_c
	mov	esi, DWORD PTR _rotate_offset$1$[esp+184]
	mov	ebx, DWORD PTR _rotated_mac$1$[esp+184]
$LN3@ssl3_cbc_c:
; Line 282
	xor	edx, edx
	test	edi, edi
	je	SHORT $LN6@ssl3_cbc_c
	mov	ebp, DWORD PTR _out$GSCopy$1$[esp+184]
	npad	7
$LL7@ssl3_cbc_c:
; Line 284
	mov	eax, esi
	xor	eax, 32					; 00000020H
	mov	al, BYTE PTR [eax+ebx]
; Line 285
	movzx	eax, BYTE PTR [esi+ebx]
	inc	esi
	mov	BYTE PTR [edx+ebp], al
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	ecx, esi
	sub	ecx, edi
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 286
	mov	eax, esi
	xor	ecx, edi
	xor	eax, edi
	or	ecx, eax
	inc	edx
	xor	ecx, esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\ssl\s3_cbc.c
; Line 286
	neg	ecx
	and	esi, ecx
	cmp	edx, edi
	jb	SHORT $LL7@ssl3_cbc_c
$LN6@ssl3_cbc_c:
; Line 299
	mov	ecx, DWORD PTR __$ArrayPad$[esp+184]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	ret	0
_ssl3_cbc_copy_mac ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_select_int
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_constant_time_select_int PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	mov	ecx, DWORD PTR _mask$[esp-4]
	mov	eax, ecx
	and	ecx, DWORD PTR _a$[esp-4]
	not	eax
	and	eax, DWORD PTR _b$[esp-4]
	or	eax, ecx
; Line 205
	ret	0
_constant_time_select_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_select_8
_TEXT	SEGMENT
_mask$ = 8						; size = 1
_a$ = 12						; size = 1
_b$ = 16						; size = 1
_constant_time_select_8 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 199
	movzx	edx, BYTE PTR _mask$[esp-4]
	movzx	ecx, BYTE PTR _b$[esp-4]
; Line 192
	mov	eax, edx
	not	eax
	and	eax, ecx
; Line 199
	movzx	ecx, BYTE PTR _a$[esp-4]
; Line 192
	and	ecx, edx
	or	eax, ecx
; Line 200
	ret	0
_constant_time_select_8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_select
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_constant_time_select PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 192
	mov	ecx, DWORD PTR _mask$[esp-4]
	mov	eax, ecx
	and	ecx, DWORD PTR _a$[esp-4]
	not	eax
	and	eax, DWORD PTR _b$[esp-4]
	or	eax, ecx
; Line 193
	ret	0
_constant_time_select ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_eq_8
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_eq_8 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 170
	mov	ecx, DWORD PTR _a$[esp-4]
	xor	ecx, DWORD PTR _b$[esp-4]
; Line 160
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
; Line 175
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 175
	neg	eax
; Line 176
	ret	0
_constant_time_eq_8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_eq
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_eq PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 170
	mov	ecx, DWORD PTR _a$[esp-4]
	xor	ecx, DWORD PTR _b$[esp-4]
; Line 160
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
; Line 170
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 170
	neg	eax
; Line 171
	ret	0
_constant_time_eq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_is_zero
_TEXT	SEGMENT
_a$ = 8							; size = 4
_constant_time_is_zero PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 160
	mov	ecx, DWORD PTR _a$[esp-4]
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 160
	neg	eax
; Line 161
	ret	0
_constant_time_is_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_ge_8
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_ge_8 PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edx, DWORD PTR _b$[esp-4]
	push	esi
	mov	esi, DWORD PTR _a$[esp]
	mov	eax, esi
	sub	eax, edx
; Line 155
	mov	ecx, esi
	xor	eax, edx
	xor	ecx, edx
	or	eax, ecx
	xor	eax, esi
; Line 135
	shr	eax, 31					; 0000001fH
; Line 150
	dec	eax
	pop	esi
; Line 156
	ret	0
_constant_time_ge_8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_ge
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_ge PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edx, DWORD PTR _b$[esp-4]
	push	esi
	mov	esi, DWORD PTR _a$[esp]
	mov	eax, esi
	sub	eax, edx
; Line 150
	mov	ecx, esi
	xor	eax, edx
	xor	ecx, edx
	or	eax, ecx
	xor	eax, esi
; Line 135
	shr	eax, 31					; 0000001fH
; Line 150
	dec	eax
	pop	esi
; Line 151
	ret	0
_constant_time_ge ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_lt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_lt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 140
	mov	edx, DWORD PTR _b$[esp-4]
	push	esi
	mov	esi, DWORD PTR _a$[esp]
	mov	eax, esi
	sub	eax, edx
	mov	ecx, esi
	xor	eax, edx
	xor	ecx, edx
	or	eax, ecx
	xor	eax, esi
; Line 135
	shr	eax, 31					; 0000001fH
; Line 140
	neg	eax
	pop	esi
; Line 141
	ret	0
_constant_time_lt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_msb
_TEXT	SEGMENT
_a$ = 8							; size = 4
_constant_time_msb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\constant_time_locl.h
; Line 135
	mov	eax, DWORD PTR _a$[esp-4]
	shr	eax, 31					; 0000001fH
	neg	eax
; Line 136
	ret	0
_constant_time_msb ENDP
_TEXT	ENDS
END
