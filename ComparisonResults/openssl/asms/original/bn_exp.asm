; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_exp
PUBLIC	_BN_mod_exp
PUBLIC	_BN_mod_exp_mont
PUBLIC	_BN_mod_exp_mont_consttime
PUBLIC	_BN_mod_exp_mont_word
PUBLIC	_BN_mod_exp_simple
PUBLIC	_BN_mod_exp_recp
PUBLIC	??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ ; `string'
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_value_one:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_mul:PROC
EXTRN	_BN_sqr:PROC
EXTRN	_BN_div:PROC
EXTRN	_BN_nnmod:PROC
EXTRN	_BN_mod_mul:PROC
EXTRN	_BN_mul_word:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_is_bit_set:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_BN_MONT_CTX_new:PROC
EXTRN	_BN_mod_mul_montgomery:PROC
EXTRN	_BN_from_montgomery:PROC
EXTRN	_BN_MONT_CTX_free:PROC
EXTRN	_BN_MONT_CTX_set:PROC
EXTRN	_BN_RECP_CTX_init:PROC
EXTRN	_BN_RECP_CTX_free:PROC
EXTRN	_BN_RECP_CTX_set:PROC
EXTRN	_BN_mod_mul_reciprocal:PROC
EXTRN	_bn_expand2:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
CONST	SEGMENT
??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@ DB '.\crypto\bn\bn_exp.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _MOD_EXP_CTIME_COPY_FROM_PREBUF
_TEXT	SEGMENT
tv608 = -36						; size = 4
_i$3$ = -32						; size = 4
_idx$2$ = -28						; size = 4
_y3$1$ = -24						; size = 4
_y2$1$ = -20						; size = 4
_y1$1$ = -16						; size = 4
_y0$1$ = -12						; size = 4
_xstride$1$ = -8					; size = 4
tv613 = -4						; size = 4
_b$ = 8							; size = 4
_i$1$ = 12						; size = 4
_top$ = 12						; size = 4
tv606 = 16						; size = 4
_buf$ = 16						; size = 4
_idx$ = 20						; size = 4
_acc$1$ = 24						; size = 4
_window$ = 24						; size = 4
_MOD_EXP_CTIME_COPY_FROM_PREBUF PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 629
	mov	eax, 36					; 00000024H
	call	__chkstk
; Line 634
	mov	eax, DWORD PTR _b$[esp+32]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _top$[esp+40]
	mov	ebx, 1
	push	esi
	mov	esi, DWORD PTR _window$[esp+44]
	mov	ecx, esi
	shl	ebx, cl
	push	edi
	mov	edi, DWORD PTR _buf$[esp+48]
	cmp	ebp, DWORD PTR [eax+8]
	jle	SHORT $LN24@MOD_EXP_CT
	push	ebp
	push	eax
	call	_bn_expand2
	add	esp, 8
$LN24@MOD_EXP_CT:
	test	eax, eax
	jne	SHORT $LN17@MOD_EXP_CT
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 678
	add	esp, 36					; 00000024H
	ret	0
$LN17@MOD_EXP_CT:
; Line 637
	cmp	esi, 3
	jg	SHORT $LN18@MOD_EXP_CT
; Line 638
	xor	ecx, ecx
	mov	DWORD PTR _i$1$[esp+48], ecx
	test	ebp, ebp
	jle	$LN9@MOD_EXP_CT
$LL4@MOD_EXP_CT:
; Line 639
	xor	esi, esi
; Line 641
	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN6@MOD_EXP_CT
	npad	3
$LL7@MOD_EXP_CT:
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	mov	ecx, eax
	xor	ecx, DWORD PTR _idx$[esp+48]
; Line 160
	lea	edx, DWORD PTR [ecx-1]
	not	ecx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 642
	shr	edx, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	edx, ecx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 642
	neg	edx
	and	edx, 1
	neg	edx
	and	edx, DWORD PTR [edi+eax*4]
	inc	eax
	or	esi, edx
	cmp	eax, ebx
	jl	SHORT $LL7@MOD_EXP_CT
	mov	ecx, DWORD PTR _i$1$[esp+48]
$LN6@MOD_EXP_CT:
; Line 646
	mov	eax, DWORD PTR _b$[esp+48]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax+ecx*4], esi
	inc	ecx
	lea	eax, DWORD PTR [ebx*4]
	mov	DWORD PTR _i$1$[esp+48], ecx
	add	edi, eax
	cmp	ecx, ebp
	jl	SHORT $LL4@MOD_EXP_CT
; Line 648
	jmp	$LN9@MOD_EXP_CT
$LN18@MOD_EXP_CT:
; Line 652
	mov	edx, DWORD PTR _idx$[esp+48]
	lea	ecx, DWORD PTR [esi-2]
	sar	edx, cl
	mov	esi, 1
	shl	esi, cl
; Line 653
	mov	ecx, DWORD PTR _idx$[esp+48]
	mov	DWORD PTR _xstride$1$[esp+52], esi
	lea	eax, DWORD PTR [esi-1]
	and	ecx, eax
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	mov	eax, edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 653
	mov	DWORD PTR _idx$2$[esp+52], ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 655
	shr	eax, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [edx-1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 655
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	ecx, eax
; Line 170
	mov	eax, edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 655
	neg	ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	xor	eax, 1
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 655
	and	ecx, 1
	neg	ecx
	mov	DWORD PTR _y0$1$[esp+52], ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 656
	shr	ecx, 31					; 0000001fH
	shr	eax, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	ecx, eax
; Line 170
	mov	eax, edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 656
	neg	ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	xor	eax, 2
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 656
	and	ecx, 1
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	xor	edx, 3
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 656
	neg	ecx
	mov	DWORD PTR _y1$1$[esp+52], ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [eax-1]
	not	eax
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 657
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	ecx, eax
; Line 160
	lea	eax, DWORD PTR [edx-1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 658
	shr	eax, 31					; 0000001fH
	neg	ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	not	edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 657
	and	ecx, 1
; Line 658
	shr	edx, 31					; 0000001fH
	neg	ecx
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	eax, edx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 657
	mov	DWORD PTR _y2$1$[esp+52], ecx
; Line 658
	neg	eax
; Line 660
	xor	ecx, ecx
	and	eax, 1
	mov	DWORD PTR _i$3$[esp+52], ecx
	neg	eax
	mov	DWORD PTR _y3$1$[esp+52], eax
	test	ebp, ebp
	jle	$LN9@MOD_EXP_CT
	shl	ebx, 2
	mov	DWORD PTR tv613[esp+52], ebx
	npad	3
$LL10@MOD_EXP_CT:
; Line 661
	xor	edx, edx
; Line 663
	xor	ebx, ebx
	mov	DWORD PTR _acc$1$[esp+48], edx
	test	esi, esi
	jle	$LN12@MOD_EXP_CT
; Line 661
	lea	eax, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [edi+esi*8]
	lea	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR tv608[esp+52], ecx
	lea	ebp, DWORD PTR [edi+esi*4]
	mov	DWORD PTR tv606[esp+48], eax
$LL13@MOD_EXP_CT:
; Line 664
	mov	eax, DWORD PTR [eax]
	lea	ebp, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [ecx]
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	mov	esi, ebx
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 664
	and	ecx, DWORD PTR _y2$1$[esp+52]
	and	eax, DWORD PTR _y3$1$[esp+52]
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	xor	esi, DWORD PTR _idx$2$[esp+52]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 664
	or	ecx, eax
	mov	edx, DWORD PTR [ebp-4]
	and	edx, DWORD PTR _y1$1$[esp+52]
	mov	eax, DWORD PTR [edi+ebx*4]
	or	edx, ecx
	and	eax, DWORD PTR _y0$1$[esp+52]
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	lea	ecx, DWORD PTR [esi-1]
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 664
	shr	ecx, 31					; 0000001fH
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	not	esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 664
	shr	esi, 31					; 0000001fH
	or	eax, edx
	mov	edx, DWORD PTR _acc$1$[esp+48]
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	and	ecx, esi
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 663
	mov	esi, DWORD PTR _xstride$1$[esp+52]
; Line 664
	neg	ecx
	and	ecx, 1
	inc	ebx
	neg	ecx
	and	ecx, eax
	mov	eax, DWORD PTR tv606[esp+48]
	or	edx, ecx
	add	eax, 4
	mov	ecx, DWORD PTR tv608[esp+52]
	add	ecx, 4
	mov	DWORD PTR _acc$1$[esp+48], edx
	mov	DWORD PTR tv606[esp+48], eax
	mov	DWORD PTR tv608[esp+52], ecx
	cmp	ebx, esi
	jl	SHORT $LL13@MOD_EXP_CT
	mov	ebp, DWORD PTR _top$[esp+48]
	mov	ecx, DWORD PTR _i$3$[esp+52]
$LN12@MOD_EXP_CT:
; Line 671
	mov	eax, DWORD PTR _b$[esp+48]
	add	edi, DWORD PTR tv613[esp+52]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax+ecx*4], edx
	inc	ecx
	mov	DWORD PTR _i$3$[esp+52], ecx
	cmp	ecx, ebp
	jl	$LL10@MOD_EXP_CT
$LN9@MOD_EXP_CT:
; Line 675
	mov	esi, DWORD PTR _b$[esp+48]
	mov	DWORD PTR [esi+4], ebp
; Line 676
	test	ebp, ebp
	jle	SHORT $LN20@MOD_EXP_CT
	mov	ecx, DWORD PTR [esi]
	add	ecx, -4					; fffffffcH
	lea	ecx, DWORD PTR [ecx+ebp*4]
$LL16@MOD_EXP_CT:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN78@MOD_EXP_CT
	dec	ebp
	test	ebp, ebp
	jg	SHORT $LL16@MOD_EXP_CT
$LN78@MOD_EXP_CT:
	mov	DWORD PTR [esi+4], ebp
$LN20@MOD_EXP_CT:
	pop	edi
	pop	esi
	pop	ebp
; Line 677
	mov	eax, 1
	pop	ebx
; Line 678
	add	esp, 36					; 00000024H
	ret	0
_MOD_EXP_CTIME_COPY_FROM_PREBUF ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _MOD_EXP_CTIME_COPY_TO_PREBUF
_TEXT	SEGMENT
_b$ = 8							; size = 4
_top$ = 12						; size = 4
_buf$ = 16						; size = 4
_idx$ = 20						; size = 4
_window$ = 24						; size = 4
_MOD_EXP_CTIME_COPY_TO_PREBUF PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 613
	mov	ecx, DWORD PTR _window$[esp-4]
	push	ebx
; Line 616
	mov	ebx, DWORD PTR _b$[esp]
	push	ebp
	push	edi
	mov	edi, DWORD PTR _top$[esp+8]
	mov	ebp, 1
	shl	ebp, cl
	cmp	edi, DWORD PTR [ebx+4]
	cmovg	edi, DWORD PTR [ebx+4]
; Line 619
	xor	ecx, ecx
	test	edi, edi
	jle	SHORT $LN11@MOD_EXP_CT
	mov	edx, DWORD PTR _idx$[esp+8]
	mov	eax, DWORD PTR _buf$[esp+8]
	push	esi
	shl	ebp, 2
	lea	esi, DWORD PTR [eax+edx*4]
$LL4@MOD_EXP_CT:
; Line 620
	mov	edx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [edx+ecx*4]
	inc	ecx
	mov	DWORD PTR [esi], edx
	add	esi, ebp
	cmp	ecx, edi
	jl	SHORT $LL4@MOD_EXP_CT
	pop	esi
$LN11@MOD_EXP_CT:
	pop	edi
	pop	ebp
; Line 623
	mov	eax, 1
	pop	ebx
; Line 624
	ret	0
_MOD_EXP_CTIME_COPY_TO_PREBUF ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_exp_recp
_TEXT	SEGMENT
_wend$1$ = -216						; size = 4
_aa$1$ = -216						; size = 4
_wstart$1$ = -212					; size = 4
_bits$1$ = -212						; size = 4
_window$1$ = -208					; size = 4
_ctx$GSCopy$1$ = -204					; size = 4
_a$GSCopy$1$ = -200					; size = 4
_start$1$ = -200					; size = 4
_ret$2$ = -196						; size = 4
_p$GSCopy$1$ = -192					; size = 4
_r$GSCopy$1$ = -188					; size = 4
_recp$ = -184						; size = 52
_val$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_m$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_mod_exp_recp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 271
	mov	eax, 216				; 000000d8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+216], eax
	mov	eax, DWORD PTR _a$[esp+212]
	push	ebx
	mov	ebx, DWORD PTR _r$[esp+216]
	mov	DWORD PTR _a$GSCopy$1$[esp+220], eax
	mov	eax, DWORD PTR _p$[esp+216]
	push	ebp
	mov	ebp, DWORD PTR _ctx$[esp+220]
	push	esi
; Line 279
	test	BYTE PTR [eax+16], 4
	mov	esi, DWORD PTR _m$[esp+224]
	mov	DWORD PTR _r$GSCopy$1$[esp+228], ebx
	mov	DWORD PTR _p$GSCopy$1$[esp+228], eax
	mov	DWORD PTR _ctx$GSCopy$1$[esp+228], ebp
	mov	DWORD PTR _ret$2$[esp+228], 0
	je	SHORT $LN14@BN_mod_exp
; Line 281
	push	281					; 00000119H
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	66					; 00000042H
	push	125					; 0000007dH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 282
	or	eax, -1
	pop	esi
	pop	ebp
	pop	ebx
; Line 400
	mov	ecx, DWORD PTR __$ArrayPad$[esp+216]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	ret	0
$LN14@BN_mod_exp:
; Line 285
	push	eax
	call	_BN_num_bits
	add	esp, 4
	mov	DWORD PTR _bits$1$[esp+228], eax
; Line 286
	test	eax, eax
	jne	SHORT $LN15@BN_mod_exp
; Line 288
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN19@BN_mod_exp
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN19@BN_mod_exp
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN19@BN_mod_exp
; Line 290
	push	0
	push	ebx
	mov	esi, 1
	call	_BN_set_word
; Line 292
	add	esp, 8
; Line 294
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 400
	mov	ecx, DWORD PTR __$ArrayPad$[esp+216]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	ret	0
$LN19@BN_mod_exp:
; Line 292
	push	1
	push	ebx
	call	_BN_set_word
	add	esp, 8
	mov	esi, eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 400
	mov	ecx, DWORD PTR __$ArrayPad$[esp+216]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	ret	0
$LN15@BN_mod_exp:
	push	edi
; Line 297
	push	ebp
	call	_BN_CTX_start
; Line 298
	push	ebp
	call	_BN_CTX_get
; Line 299
	push	ebp
	mov	DWORD PTR _aa$1$[esp+244], eax
	call	_BN_CTX_get
	add	esp, 12					; 0000000cH
	mov	edi, eax
; Line 300
	cmp	DWORD PTR _aa$1$[esp+232], 0
	mov	DWORD PTR _val$[esp+232], edi
	je	$err$84
	test	edi, edi
	je	$err$84
; Line 303
	lea	eax, DWORD PTR _recp$[esp+232]
	push	eax
	call	_BN_RECP_CTX_init
	add	esp, 4
; Line 304
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN22@BN_mod_exp
; Line 306
	push	esi
	push	DWORD PTR _aa$1$[esp+236]
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$err$84
; Line 308
	mov	eax, DWORD PTR _aa$1$[esp+232]
; Line 309
	push	ebp
	push	eax
	mov	DWORD PTR [eax+12], 0
; Line 311
	jmp	SHORT $LN82@BN_mod_exp
$LN22@BN_mod_exp:
; Line 312
	push	ebp
	push	esi
$LN82@BN_mod_exp:
	lea	eax, DWORD PTR _recp$[esp+240]
	push	eax
	call	_BN_RECP_CTX_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$err$84
; Line 316
	push	ebp
	push	esi
	push	DWORD PTR _a$GSCopy$1$[esp+240]
	push	edi
	call	_BN_nnmod
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$84
; Line 318
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN28@BN_mod_exp
; Line 319
	push	0
	push	ebx
	call	_BN_set_word
	add	esp, 8
; Line 321
	jmp	$LN61@BN_mod_exp
$LN28@BN_mod_exp:
; Line 324
	mov	eax, DWORD PTR _bits$1$[esp+232]
	cmp	eax, 671				; 0000029fH
	jle	SHORT $LN49@BN_mod_exp
	mov	esi, 6
	mov	DWORD PTR _window$1$[esp+232], esi
	jmp	SHORT $LN73@BN_mod_exp
$LN49@BN_mod_exp:
	cmp	eax, 239				; 000000efH
	jle	SHORT $LN47@BN_mod_exp
	mov	esi, 5
	mov	DWORD PTR _window$1$[esp+232], esi
	jmp	SHORT $LN73@BN_mod_exp
$LN47@BN_mod_exp:
	cmp	eax, 79					; 0000004fH
	jle	SHORT $LN45@BN_mod_exp
	mov	esi, 4
	mov	DWORD PTR _window$1$[esp+232], esi
	jmp	SHORT $LN73@BN_mod_exp
$LN45@BN_mod_exp:
	xor	eax, eax
	cmp	DWORD PTR _bits$1$[esp+232], 23		; 00000017H
	setg	al
	lea	eax, DWORD PTR [eax*2+1]
	mov	DWORD PTR _window$1$[esp+232], eax
; Line 325
	cmp	eax, 1
	jle	SHORT $LN3@BN_mod_exp
	mov	esi, eax
$LN73@BN_mod_exp:
; Line 326
	push	ebp
	lea	eax, DWORD PTR _recp$[esp+236]
	push	eax
	push	edi
	push	edi
	push	DWORD PTR _aa$1$[esp+248]
	call	_BN_mod_mul_reciprocal
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$84
; Line 328
	lea	ecx, DWORD PTR [esi-1]
	mov	edi, 1
	shl	edi, cl
; Line 329
	mov	esi, 1
	cmp	edi, esi
	jle	SHORT $LN3@BN_mod_exp
$LL4@BN_mod_exp:
; Line 330
	push	ebp
	call	_BN_CTX_get
	add	esp, 4
	mov	DWORD PTR _val$[esp+esi*4+232], eax
	test	eax, eax
	je	$err$84
	push	ebp
	lea	ecx, DWORD PTR _recp$[esp+236]
	push	ecx
	push	DWORD PTR _aa$1$[esp+240]
	push	DWORD PTR _val$[esp+esi*4+240]
	push	eax
	call	_BN_mod_mul_reciprocal
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$84
; Line 329
	inc	esi
	cmp	esi, edi
	jl	SHORT $LL4@BN_mod_exp
$LN3@BN_mod_exp:
; Line 340
	mov	esi, DWORD PTR _bits$1$[esp+232]
	mov	edi, 1
; Line 343
	push	edi
	dec	esi
	mov	DWORD PTR _start$1$[esp+236], edi
	push	ebx
	mov	DWORD PTR _wstart$1$[esp+240], esi
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$err$84
	jmp	SHORT $LL5@BN_mod_exp
$LL75@BN_mod_exp:
	mov	ebp, DWORD PTR _ctx$GSCopy$1$[esp+232]
$LL5@BN_mod_exp:
; Line 347
	push	esi
	push	DWORD PTR _p$GSCopy$1$[esp+236]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@BN_mod_exp
; Line 348
	test	edi, edi
	jne	SHORT $LN36@BN_mod_exp
; Line 349
	push	ebp
	lea	eax, DWORD PTR _recp$[esp+236]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	call	_BN_mod_mul_reciprocal
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$84
$LN36@BN_mod_exp:
; Line 351
	test	esi, esi
	je	$LN61@BN_mod_exp
; Line 353
	dec	esi
	mov	DWORD PTR _wstart$1$[esp+232], esi
; Line 354
	jmp	SHORT $LL5@BN_mod_exp
$LN34@BN_mod_exp:
; Line 362
	mov	ebp, 1
; Line 363
	xor	eax, eax
; Line 364
	mov	edi, ebp
	mov	DWORD PTR _wend$1$[esp+232], eax
	cmp	DWORD PTR _window$1$[esp+232], edi
	jle	SHORT $LN56@BN_mod_exp
; Line 362
	mov	ebx, DWORD PTR _p$GSCopy$1$[esp+232]
	dec	esi
	npad	5
$LL10@BN_mod_exp:
; Line 365
	test	esi, esi
	js	SHORT $LN74@BN_mod_exp
; Line 367
	push	esi
	push	ebx
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LN76@BN_mod_exp
; Line 368
	mov	ecx, edi
; Line 370
	mov	eax, edi
	sub	ecx, DWORD PTR _wend$1$[esp+232]
	shl	ebp, cl
	or	ebp, 1
	mov	DWORD PTR _wend$1$[esp+232], eax
	jmp	SHORT $LN8@BN_mod_exp
$LN76@BN_mod_exp:
	mov	eax, DWORD PTR _wend$1$[esp+232]
$LN8@BN_mod_exp:
; Line 364
	inc	edi
	dec	esi
	cmp	edi, DWORD PTR _window$1$[esp+232]
	jl	SHORT $LL10@BN_mod_exp
$LN74@BN_mod_exp:
	mov	ebx, DWORD PTR _r$GSCopy$1$[esp+232]
$LN56@BN_mod_exp:
; Line 377
	cmp	DWORD PTR _start$1$[esp+232], 0
	lea	edi, DWORD PTR [eax+1]
	jne	SHORT $LN12@BN_mod_exp
; Line 378
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN12@BN_mod_exp
$LL13@BN_mod_exp:
; Line 379
	push	DWORD PTR _ctx$GSCopy$1$[esp+232]
	lea	eax, DWORD PTR _recp$[esp+236]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	call	_BN_mod_mul_reciprocal
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$84
; Line 378
	inc	esi
	cmp	esi, edi
	jl	SHORT $LL13@BN_mod_exp
$LN12@BN_mod_exp:
; Line 384
	push	DWORD PTR _ctx$GSCopy$1$[esp+232]
	lea	eax, DWORD PTR _recp$[esp+236]
	sar	ebp, 1
	push	eax
	push	DWORD PTR _val$[esp+ebp*4+240]
	push	ebx
	push	ebx
	call	_BN_mod_mul_reciprocal
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$84
; Line 388
	mov	esi, DWORD PTR _wstart$1$[esp+232]
	or	eax, -1
	sub	eax, DWORD PTR _wend$1$[esp+232]
; Line 390
	mov	edi, 0
	add	esi, eax
	mov	DWORD PTR _start$1$[esp+232], edi
	mov	DWORD PTR _wstart$1$[esp+232], esi
; Line 391
	jns	$LL75@BN_mod_exp
$LN61@BN_mod_exp:
; Line 394
	mov	DWORD PTR _ret$2$[esp+232], 1
$err$84:
; Line 396
	push	DWORD PTR _ctx$GSCopy$1$[esp+232]
	call	_BN_CTX_end
; Line 397
	lea	eax, DWORD PTR _recp$[esp+236]
	push	eax
	call	_BN_RECP_CTX_free
; Line 400
	mov	ecx, DWORD PTR __$ArrayPad$[esp+240]
	add	esp, 8
	mov	eax, DWORD PTR _ret$2$[esp+232]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	ret	0
_BN_mod_exp_recp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_exp_simple
_TEXT	SEGMENT
_wend$1$ = -168						; size = 4
_d$1$ = -168						; size = 4
_wstart$1$ = -164					; size = 4
_bits$1$ = -164						; size = 4
_a$GSCopy$1$ = -160					; size = 4
_j$1$ = -160						; size = 4
_start$1$ = -160					; size = 4
_window$1$ = -156					; size = 4
_ctx$GSCopy$1$ = -152					; size = 4
_ret$2$ = -148						; size = 4
_p$GSCopy$1$ = -144					; size = 4
_m$GSCopy$1$ = -140					; size = 4
_r$GSCopy$1$ = -136					; size = 4
_val$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_m$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_mod_exp_simple PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 1343
	mov	eax, 168				; 000000a8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+168], eax
	mov	eax, DWORD PTR _a$[esp+164]
	push	ebx
	mov	ebx, DWORD PTR _r$[esp+168]
	mov	DWORD PTR _a$GSCopy$1$[esp+172], eax
	mov	eax, DWORD PTR _p$[esp+168]
	push	ebp
	mov	ebp, DWORD PTR _ctx$[esp+172]
	push	edi
; Line 1350
	test	BYTE PTR [eax+16], 4
	mov	edi, DWORD PTR _m$[esp+176]
	mov	DWORD PTR _r$GSCopy$1$[esp+180], ebx
	mov	DWORD PTR _p$GSCopy$1$[esp+180], eax
	mov	DWORD PTR _m$GSCopy$1$[esp+180], edi
	mov	DWORD PTR _ctx$GSCopy$1$[esp+180], ebp
	mov	DWORD PTR _ret$2$[esp+180], 0
	je	SHORT $LN14@BN_mod_exp
; Line 1352
	push	1352					; 00000548H
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	66					; 00000042H
	push	126					; 0000007eH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1353
	or	eax, -1
	pop	edi
	pop	ebp
	pop	ebx
; Line 1457
	mov	ecx, DWORD PTR __$ArrayPad$[esp+168]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	ret	0
$LN14@BN_mod_exp:
	push	esi
; Line 1356
	push	eax
	call	_BN_num_bits
	add	esp, 4
	mov	DWORD PTR _bits$1$[esp+184], eax
; Line 1357
	test	eax, eax
	jne	SHORT $LN15@BN_mod_exp
; Line 1359
	cmp	DWORD PTR [edi+4], 1
	jne	SHORT $LN19@BN_mod_exp
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN19@BN_mod_exp
	cmp	DWORD PTR [edi+12], 0
	jne	SHORT $LN19@BN_mod_exp
; Line 1361
	push	0
	push	ebx
	mov	esi, 1
	call	_BN_set_word
; Line 1363
	add	esp, 8
; Line 1365
	mov	eax, esi
	jmp	$LN75@BN_mod_exp
$LN19@BN_mod_exp:
; Line 1363
	push	1
	push	ebx
	call	_BN_set_word
	mov	esi, eax
	add	esp, 8
; Line 1365
	jmp	$LN75@BN_mod_exp
$LN15@BN_mod_exp:
; Line 1368
	push	ebp
	call	_BN_CTX_start
; Line 1369
	push	ebp
	call	_BN_CTX_get
; Line 1370
	push	ebp
	mov	DWORD PTR _d$1$[esp+196], eax
	call	_BN_CTX_get
	add	esp, 12					; 0000000cH
	mov	esi, eax
; Line 1371
	cmp	DWORD PTR _d$1$[esp+184], 0
	mov	DWORD PTR _val$[esp+184], esi
	je	$err$78
	test	esi, esi
	je	$err$78
; Line 1374
	push	ebp
	push	edi
	push	DWORD PTR _a$GSCopy$1$[esp+192]
	push	esi
	call	_BN_nnmod
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$78
; Line 1376
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN23@BN_mod_exp
; Line 1377
	push	0
	push	ebx
	call	_BN_set_word
	add	esp, 8
; Line 1379
	jmp	$LN56@BN_mod_exp
$LN23@BN_mod_exp:
; Line 1382
	mov	eax, DWORD PTR _bits$1$[esp+184]
	cmp	eax, 671				; 0000029fH
	jle	SHORT $LN44@BN_mod_exp
	mov	DWORD PTR _window$1$[esp+184], 6
	jmp	SHORT $LN68@BN_mod_exp
$LN44@BN_mod_exp:
	cmp	eax, 239				; 000000efH
	jle	SHORT $LN42@BN_mod_exp
	mov	DWORD PTR _window$1$[esp+184], 5
	jmp	SHORT $LN68@BN_mod_exp
$LN42@BN_mod_exp:
	cmp	eax, 79					; 0000004fH
	jle	SHORT $LN40@BN_mod_exp
	mov	DWORD PTR _window$1$[esp+184], 4
	jmp	SHORT $LN68@BN_mod_exp
$LN40@BN_mod_exp:
	xor	eax, eax
	cmp	DWORD PTR _bits$1$[esp+184], 23		; 00000017H
	setg	al
	lea	eax, DWORD PTR [eax*2+1]
	mov	DWORD PTR _window$1$[esp+184], eax
; Line 1383
	cmp	eax, 1
	jle	SHORT $LN3@BN_mod_exp
$LN68@BN_mod_exp:
; Line 1384
	push	ebp
	push	edi
	push	esi
	push	esi
	push	DWORD PTR _d$1$[esp+200]
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$78
; Line 1386
	mov	ecx, DWORD PTR _window$1$[esp+184]
	mov	eax, 1
	dec	ecx
; Line 1387
	mov	esi, 1
	shl	eax, cl
	mov	DWORD PTR _j$1$[esp+184], eax
	cmp	eax, esi
	jle	SHORT $LN3@BN_mod_exp
$LL4@BN_mod_exp:
; Line 1388
	push	ebp
	call	_BN_CTX_get
	add	esp, 4
	mov	DWORD PTR _val$[esp+esi*4+184], eax
	test	eax, eax
	je	$err$78
	push	ebp
	push	edi
	push	DWORD PTR _d$1$[esp+192]
	push	DWORD PTR _val$[esp+esi*4+192]
	push	eax
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$78
; Line 1387
	inc	esi
	cmp	esi, DWORD PTR _j$1$[esp+184]
	jl	SHORT $LL4@BN_mod_exp
$LN3@BN_mod_exp:
; Line 1398
	mov	esi, DWORD PTR _bits$1$[esp+184]
; Line 1401
	push	1
	dec	esi
	mov	DWORD PTR _start$1$[esp+188], 1
	push	ebx
	mov	DWORD PTR _wstart$1$[esp+192], esi
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$err$78
	jmp	SHORT $LL5@BN_mod_exp
	npad	3
$LL70@BN_mod_exp:
	mov	ebp, DWORD PTR _ctx$GSCopy$1$[esp+184]
$LL5@BN_mod_exp:
; Line 1405
	push	esi
	push	DWORD PTR _p$GSCopy$1$[esp+188]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@BN_mod_exp
; Line 1406
	cmp	DWORD PTR _start$1$[esp+184], eax
	jne	SHORT $LN31@BN_mod_exp
; Line 1407
	push	ebp
	push	edi
	push	ebx
	push	ebx
	push	ebx
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$78
$LN31@BN_mod_exp:
; Line 1409
	test	esi, esi
	je	$LN56@BN_mod_exp
; Line 1411
	dec	esi
	mov	DWORD PTR _wstart$1$[esp+184], esi
; Line 1412
	jmp	SHORT $LL5@BN_mod_exp
$LN29@BN_mod_exp:
; Line 1420
	mov	ebp, 1
; Line 1421
	xor	eax, eax
; Line 1422
	mov	edi, ebp
	mov	DWORD PTR _wend$1$[esp+184], eax
	cmp	DWORD PTR _window$1$[esp+184], edi
	jle	SHORT $LN51@BN_mod_exp
; Line 1420
	mov	ebx, DWORD PTR _p$GSCopy$1$[esp+184]
	dec	esi
$LL10@BN_mod_exp:
; Line 1423
	test	esi, esi
	js	SHORT $LN69@BN_mod_exp
; Line 1425
	push	esi
	push	ebx
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LN71@BN_mod_exp
; Line 1426
	mov	ecx, edi
; Line 1428
	mov	eax, edi
	sub	ecx, DWORD PTR _wend$1$[esp+184]
	shl	ebp, cl
	or	ebp, 1
	mov	DWORD PTR _wend$1$[esp+184], eax
	jmp	SHORT $LN8@BN_mod_exp
$LN71@BN_mod_exp:
	mov	eax, DWORD PTR _wend$1$[esp+184]
$LN8@BN_mod_exp:
; Line 1422
	inc	edi
	dec	esi
	cmp	edi, DWORD PTR _window$1$[esp+184]
	jl	SHORT $LL10@BN_mod_exp
$LN69@BN_mod_exp:
	mov	ebx, DWORD PTR _r$GSCopy$1$[esp+184]
$LN51@BN_mod_exp:
; Line 1435
	cmp	DWORD PTR _start$1$[esp+184], 0
	lea	edi, DWORD PTR [eax+1]
	jne	SHORT $LN12@BN_mod_exp
; Line 1436
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN12@BN_mod_exp
	npad	4
$LL13@BN_mod_exp:
; Line 1437
	push	DWORD PTR _ctx$GSCopy$1$[esp+184]
	push	DWORD PTR _m$GSCopy$1$[esp+188]
	push	ebx
	push	ebx
	push	ebx
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$78
; Line 1436
	inc	esi
	cmp	esi, edi
	jl	SHORT $LL13@BN_mod_exp
$LN12@BN_mod_exp:
; Line 1442
	push	DWORD PTR _ctx$GSCopy$1$[esp+184]
	mov	edi, DWORD PTR _m$GSCopy$1$[esp+188]
	sar	ebp, 1
	push	edi
	push	DWORD PTR _val$[esp+ebp*4+192]
	push	ebx
	push	ebx
	call	_BN_mod_mul
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$78
; Line 1446
	mov	esi, DWORD PTR _wstart$1$[esp+184]
	or	eax, -1
	sub	eax, DWORD PTR _wend$1$[esp+184]
	add	esi, eax
; Line 1448
	mov	DWORD PTR _start$1$[esp+184], 0
	mov	DWORD PTR _wstart$1$[esp+184], esi
; Line 1449
	jns	$LL70@BN_mod_exp
$LN56@BN_mod_exp:
; Line 1452
	mov	DWORD PTR _ret$2$[esp+184], 1
$err$78:
; Line 1454
	push	DWORD PTR _ctx$GSCopy$1$[esp+184]
	call	_BN_CTX_end
; Line 1456
	mov	eax, DWORD PTR _ret$2$[esp+188]
	add	esp, 4
$LN75@BN_mod_exp:
; Line 1457
	mov	ecx, DWORD PTR __$ArrayPad$[esp+184]
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	ret	0
_BN_mod_exp_simple ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_exp_mont_word
_TEXT	SEGMENT
_r_is_one$1$ = -20					; size = 4
_t$1$ = -16						; size = 4
_a$1$ = -12						; size = 4
_b$1$ = -8						; size = 4
tv436 = -8						; size = 4
_bits$1$ = -8						; size = 4
_ret$2$ = -4						; size = 4
_rr$ = 8						; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_m$ = 20						; size = 4
_ctx$ = 24						; size = 4
_in_mont$ = 28						; size = 4
_BN_mod_exp_mont_word PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 1195
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebp
	push	edi
; Line 1219
	mov	edi, DWORD PTR _p$[esp+24]
	xor	ebp, ebp
	mov	DWORD PTR _ret$2$[esp+28], ebp
	test	BYTE PTR [edi+16], 4
	je	SHORT $LN5@BN_mod_exp
; Line 1221
	push	1221					; 000004c5H
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	66					; 00000042H
	push	117					; 00000075H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1222
	or	eax, -1
	pop	edi
	pop	ebp
; Line 1338
	add	esp, 20					; 00000014H
	ret	0
$LN5@BN_mod_exp:
	push	ebx
; Line 1228
	mov	ebx, DWORD PTR _m$[esp+28]
	mov	ecx, DWORD PTR [ebx+4]
	test	ecx, ecx
	jle	$LN7@BN_mod_exp
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv436[esp+32], eax
	test	al, 1
	je	$LN7@BN_mod_exp
; Line 1232
	push	esi
	cmp	ecx, 1
	jne	SHORT $LN62@BN_mod_exp
; Line 1233
	mov	eax, DWORD PTR _a$[esp+32]
	xor	edx, edx
	div	DWORD PTR tv436[esp+36]
	mov	esi, edx
	mov	DWORD PTR _a$1$[esp+36], edx
	jmp	SHORT $LN8@BN_mod_exp
$LN62@BN_mod_exp:
	mov	esi, DWORD PTR _a$[esp+32]
	mov	DWORD PTR _a$1$[esp+36], esi
$LN8@BN_mod_exp:
; Line 1235
	push	edi
	call	_BN_num_bits
	add	esp, 4
	mov	DWORD PTR _bits$1$[esp+36], eax
; Line 1236
	test	eax, eax
	jne	SHORT $LN9@BN_mod_exp
; Line 1238
	cmp	DWORD PTR [ebx+4], 1
	jne	SHORT $LN13@BN_mod_exp
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN13@BN_mod_exp
	cmp	DWORD PTR [ebx+12], ebp
	jne	SHORT $LN13@BN_mod_exp
; Line 1240
	push	0
	push	DWORD PTR _rr$[esp+36]
	mov	esi, 1
	call	_BN_set_word
; Line 1242
	add	esp, 8
; Line 1244
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 1338
	add	esp, 20					; 00000014H
	ret	0
$LN13@BN_mod_exp:
; Line 1242
	push	1
	push	DWORD PTR _rr$[esp+36]
	call	_BN_set_word
	add	esp, 8
	mov	esi, eax
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 1338
	add	esp, 20					; 00000014H
	ret	0
$LN9@BN_mod_exp:
; Line 1246
	test	esi, esi
	jne	SHORT $LN14@BN_mod_exp
; Line 1247
	push	esi
	push	DWORD PTR _rr$[esp+36]
	call	_BN_set_word
	add	esp, 8
; Line 1249
	lea	eax, DWORD PTR [esi+1]
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 1338
	add	esp, 20					; 00000014H
	ret	0
$LN14@BN_mod_exp:
; Line 1252
	mov	ebx, DWORD PTR _ctx$[esp+32]
	push	ebx
	call	_BN_CTX_start
; Line 1253
	push	ebx
	call	_BN_CTX_get
; Line 1254
	push	ebx
	mov	esi, eax
	call	_BN_CTX_get
; Line 1255
	push	ebx
	mov	edi, eax
	call	_BN_CTX_get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _t$1$[esp+36], eax
; Line 1256
	test	esi, esi
	je	$err$74
	test	edi, edi
	je	$err$74
	test	eax, eax
	je	$err$74
; Line 1259
	mov	eax, DWORD PTR _in_mont$[esp+32]
	test	eax, eax
	je	SHORT $LN17@BN_mod_exp
; Line 1260
	mov	ebp, eax
	jmp	SHORT $LN20@BN_mod_exp
$LN17@BN_mod_exp:
; Line 1262
	call	_BN_MONT_CTX_new
	mov	ebp, eax
	test	ebp, ebp
	je	$LN52@BN_mod_exp
; Line 1264
	push	ebx
	push	DWORD PTR _m$[esp+36]
	push	ebp
	call	_BN_MONT_CTX_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN61@BN_mod_exp
$LN20@BN_mod_exp:
; Line 1274
	add	DWORD PTR _bits$1$[esp+36], -2		; fffffffeH
	mov	ecx, 1
	mov	esi, DWORD PTR _a$1$[esp+36]
	mov	DWORD PTR _r_is_one$1$[esp+36], ecx
	js	$LN3@BN_mod_exp
	npad	7
$LL4@BN_mod_exp:
; Line 1276
	mov	ebx, esi
; Line 1277
	xor	edx, edx
	imul	ebx, esi
	mov	eax, ebx
	div	esi
	cmp	eax, esi
	je	SHORT $LN21@BN_mod_exp
; Line 1279
	push	esi
	push	edi
	test	ecx, ecx
	je	SHORT $LN22@BN_mod_exp
	call	_BN_set_word
	mov	ebx, DWORD PTR _ctx$[esp+40]
	add	esp, 8
	test	eax, eax
	je	$err$74
	push	ebx
	push	ebp
	lea	eax, DWORD PTR [ebp+4]
	push	eax
	push	edi
	push	edi
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$74
; Line 1281
	xor	ecx, ecx
	mov	DWORD PTR _r_is_one$1$[esp+36], ecx
; Line 1282
	jmp	SHORT $LN26@BN_mod_exp
$LN22@BN_mod_exp:
; Line 1283
	call	_BN_mul_word
	mov	ebx, DWORD PTR _ctx$[esp+40]
	add	esp, 8
	test	eax, eax
	je	$err$74
	mov	esi, DWORD PTR _t$1$[esp+36]
	push	ebx
	push	DWORD PTR _m$[esp+36]
	push	edi
	push	esi
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$74
	mov	ecx, DWORD PTR _r_is_one$1$[esp+36]
	mov	DWORD PTR _t$1$[esp+36], edi
	mov	edi, esi
$LN26@BN_mod_exp:
; Line 1286
	mov	ebx, 1
$LN21@BN_mod_exp:
; Line 1288
	mov	esi, ebx
; Line 1289
	test	ecx, ecx
	jne	SHORT $LN30@BN_mod_exp
; Line 1290
	push	DWORD PTR _ctx$[esp+32]
	push	ebp
	push	edi
	push	edi
	push	edi
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN65@BN_mod_exp
$LN30@BN_mod_exp:
; Line 1295
	push	DWORD PTR _b$1$[esp+36]
	push	DWORD PTR _p$[esp+36]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	$LN2@BN_mod_exp
; Line 1296
	imul	ebx, DWORD PTR _a$1$[esp+36]
; Line 1297
	xor	edx, edx
	mov	eax, ebx
	div	DWORD PTR _a$1$[esp+36]
	cmp	eax, esi
	je	SHORT $LN32@BN_mod_exp
; Line 1298
	mov	eax, DWORD PTR _r_is_one$1$[esp+36]
; Line 1299
	push	esi
	push	edi
	test	eax, eax
	je	SHORT $LN33@BN_mod_exp
	call	_BN_set_word
	mov	ebx, DWORD PTR _ctx$[esp+40]
	add	esp, 8
	test	eax, eax
	je	$err$74
	push	ebx
	push	ebp
	lea	eax, DWORD PTR [ebp+4]
	push	eax
	push	edi
	push	edi
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$74
; Line 1301
	xor	eax, eax
	mov	DWORD PTR _r_is_one$1$[esp+36], eax
; Line 1302
	jmp	SHORT $LN37@BN_mod_exp
$LN33@BN_mod_exp:
; Line 1303
	call	_BN_mul_word
	mov	ebx, DWORD PTR _ctx$[esp+40]
	add	esp, 8
	test	eax, eax
	je	$err$74
	mov	esi, DWORD PTR _t$1$[esp+36]
	push	ebx
	push	DWORD PTR _m$[esp+36]
	push	edi
	push	esi
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$74
	mov	DWORD PTR _t$1$[esp+36], edi
	mov	edi, esi
$LN37@BN_mod_exp:
; Line 1306
	mov	ebx, DWORD PTR _a$1$[esp+36]
$LN32@BN_mod_exp:
; Line 1308
	mov	esi, ebx
$LN2@BN_mod_exp:
; Line 1274
	sub	DWORD PTR _b$1$[esp+36], 1
	mov	ecx, DWORD PTR _r_is_one$1$[esp+36]
	jns	$LL4@BN_mod_exp
	mov	ebx, DWORD PTR _ctx$[esp+32]
$LN3@BN_mod_exp:
; Line 1313
	cmp	esi, 1
	je	SHORT $LN45@BN_mod_exp
; Line 1315
	push	esi
	push	edi
	test	ecx, ecx
	je	SHORT $LN41@BN_mod_exp
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	SHORT $err$74
	push	ebx
	push	ebp
	lea	eax, DWORD PTR [ebp+4]
	push	eax
	push	edi
	push	edi
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$74
$LN48@BN_mod_exp:
; Line 1328
	push	ebx
	push	ebp
	push	edi
	push	DWORD PTR _rr$[esp+44]
	call	_BN_from_montgomery
	add	esp, 16					; 00000010H
$LN72@BN_mod_exp:
	test	eax, eax
	je	SHORT $err$74
; Line 1331
	mov	DWORD PTR _ret$2$[esp+36], 1
	jmp	SHORT $err$74
$LN41@BN_mod_exp:
; Line 1319
	call	_BN_mul_word
	add	esp, 8
	test	eax, eax
	je	SHORT $err$74
	push	ebx
	push	DWORD PTR _m$[esp+36]
	push	edi
	mov	edi, DWORD PTR _t$1$[esp+48]
	push	edi
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$74
	jmp	SHORT $LN48@BN_mod_exp
$LN45@BN_mod_exp:
; Line 1324
	test	ecx, ecx
	je	SHORT $LN48@BN_mod_exp
; Line 1325
	push	1
	push	DWORD PTR _rr$[esp+36]
	call	_BN_set_word
	add	esp, 8
; Line 1327
	jmp	SHORT $LN72@BN_mod_exp
$LN65@BN_mod_exp:
	mov	ebx, DWORD PTR _ctx$[esp+32]
$err$74:
; Line 1333
	cmp	DWORD PTR _in_mont$[esp+32], 0
	jne	SHORT $LN52@BN_mod_exp
$LN61@BN_mod_exp:
	test	ebp, ebp
	je	SHORT $LN52@BN_mod_exp
; Line 1334
	push	ebp
	call	_BN_MONT_CTX_free
	add	esp, 4
$LN52@BN_mod_exp:
; Line 1335
	push	ebx
	call	_BN_CTX_end
; Line 1337
	mov	eax, DWORD PTR _ret$2$[esp+40]
	add	esp, 4
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 1338
	add	esp, 20					; 00000014H
	ret	0
$LN7@BN_mod_exp:
; Line 1229
	push	1229					; 000004cdH
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	102					; 00000066H
	push	117					; 00000075H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1230
	xor	eax, eax
	pop	ebx
	pop	edi
	pop	ebp
; Line 1338
	add	esp, 20					; 00000014H
	ret	0
_BN_mod_exp_mont_word ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_exp_mont_consttime
_TEXT	SEGMENT
_am$ = -96						; size = 20
_ret$2$ = -76						; size = 4
tv823 = -72						; size = 4
tv820 = -68						; size = 4
_tmp$ = -64						; size = 20
_powerbufLen$1$ = -44					; size = 4
tv822 = -40						; size = 4
_wvalue$1$ = -40					; size = 4
_i$3$ = -40						; size = 4
_powerbufFree$1$ = -36					; size = 4
_numPowers$1$ = -32					; size = 4
tv831 = -28						; size = 4
tv826 = -28						; size = 4
_tmp$1$ = -28						; size = 4
tv773 = -24						; size = 4
_i$2$ = -24						; size = 4
_mont$1$ = -20						; size = 4
_window$1$ = -16					; size = 4
_powerbuf$1$ = -12					; size = 4
_top$1$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_rr$ = 8						; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_m$ = 20						; size = 4
_ctx$ = 24						; size = 4
_in_mont$ = 28						; size = 4
_BN_mod_exp_mont_consttime PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 697
	push	ebp
	mov	ebp, esp
	mov	eax, 96					; 00000060H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
; Line 715
	mov	ebx, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	DWORD PTR _ret$2$[ebp], 0
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR _powerbufFree$1$[ebp], 0
	mov	DWORD PTR _powerbufLen$1$[ebp], 0
	mov	DWORD PTR _powerbuf$1$[ebp], 0
	mov	DWORD PTR _top$1$[ebp], eax
	test	eax, eax
	jle	$LN17@BN_mod_exp
	mov	eax, DWORD PTR [ebx]
	test	BYTE PTR [eax], 1
	je	$LN17@BN_mod_exp
; Line 722
	push	DWORD PTR _p$[ebp]
	call	_BN_num_bits
	mov	esi, eax
	add	esp, 4
; Line 723
	test	esi, esi
	jne	SHORT $LN18@BN_mod_exp
; Line 725
	cmp	DWORD PTR [ebx+4], 1
	jne	SHORT $LN22@BN_mod_exp
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN22@BN_mod_exp
	cmp	DWORD PTR [ebx+12], esi
	jne	SHORT $LN22@BN_mod_exp
; Line 727
	push	0
	push	DWORD PTR _rr$[ebp]
	mov	esi, 1
	call	_BN_set_word
; Line 729
	add	esp, 8
; Line 731
	mov	eax, esi
; Line 1191
	lea	esp, DWORD PTR [ebp-108]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@BN_mod_exp:
; Line 729
	push	1
	push	DWORD PTR _rr$[ebp]
	call	_BN_set_word
	mov	esi, eax
	add	esp, 8
; Line 1191
	lea	esp, DWORD PTR [ebp-108]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@BN_mod_exp:
; Line 734
	push	DWORD PTR _ctx$[ebp]
	call	_BN_CTX_start
; Line 740
	mov	eax, DWORD PTR _in_mont$[ebp]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN23@BN_mod_exp
; Line 741
	mov	edi, eax
	mov	DWORD PTR _mont$1$[ebp], edi
	jmp	SHORT $LN26@BN_mod_exp
$LN23@BN_mod_exp:
; Line 743
	call	_BN_MONT_CTX_new
	mov	edi, eax
	mov	DWORD PTR _mont$1$[ebp], edi
	test	edi, edi
	je	$LN54@BN_mod_exp
; Line 745
	push	DWORD PTR _ctx$[ebp]
	push	ebx
	push	edi
	call	_BN_MONT_CTX_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN95@BN_mod_exp
$LN26@BN_mod_exp:
; Line 779
	cmp	esi, 937				; 000003a9H
	jle	SHORT $LN60@BN_mod_exp
	mov	ebx, 6
	jmp	SHORT $LN112@BN_mod_exp
$LN60@BN_mod_exp:
	cmp	esi, 306				; 00000132H
	jle	SHORT $LN58@BN_mod_exp
	mov	ebx, 5
	jmp	SHORT $LN112@BN_mod_exp
$LN58@BN_mod_exp:
	cmp	esi, 89					; 00000059H
	jle	SHORT $LN56@BN_mod_exp
	mov	ebx, 4
	jmp	SHORT $LN112@BN_mod_exp
$LN56@BN_mod_exp:
	xor	ebx, ebx
	cmp	esi, 22					; 00000016H
	setg	bl
	lea	ebx, DWORD PTR [ebx*2+1]
$LN112@BN_mod_exp:
; Line 802
	mov	edx, DWORD PTR _top$1$[ebp]
	mov	ecx, ebx
	mov	eax, 1
	mov	DWORD PTR _window$1$[ebp], ebx
	shl	eax, cl
	mov	DWORD PTR _numPowers$1$[ebp], eax
	mov	ecx, DWORD PTR _numPowers$1$[ebp]
	lea	eax, DWORD PTR [edx+edx]
	cmp	eax, ecx
	cmovg	ecx, eax
	mov	eax, DWORD PTR _numPowers$1$[ebp]
	imul	eax, edx
	mov	DWORD PTR tv826[ebp], eax
	add	eax, ecx
	shl	eax, 2
	mov	DWORD PTR _powerbufLen$1$[ebp], eax
; Line 806
	cmp	eax, 3072				; 00000c00H
	jge	SHORT $LN27@BN_mod_exp
; Line 807
	add	eax, 64					; 00000040H
	call	__alloca_probe_16
	mov	ecx, esp
	mov	DWORD PTR _powerbufFree$1$[ebp], ecx
	jmp	SHORT $LN29@BN_mod_exp
$LN27@BN_mod_exp:
; Line 814
	push	813					; 0000032dH
	add	eax, 64					; 00000040H
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	eax
	call	_CRYPTO_malloc
	mov	ecx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _powerbufFree$1$[ebp], ecx
	test	ecx, ecx
	je	$err$114
$LN29@BN_mod_exp:
; Line 818
	push	DWORD PTR _powerbufLen$1$[ebp]
	mov	eax, ecx
	and	eax, 63					; 0000003fH
	sub	ecx, eax
	add	ecx, 64					; 00000040H
	push	0
	push	ecx
	mov	DWORD PTR _powerbuf$1$[ebp], ecx
	call	_memset
; Line 821
	mov	eax, DWORD PTR _powerbufFree$1$[ebp]
	xor	ecx, ecx
; Line 827
	mov	edx, DWORD PTR _top$1$[ebp]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _powerbufLen$1$[ebp], 3072	; 00000c00H
; Line 828
	mov	DWORD PTR _am$[ebp+4], 0
	cmovl	eax, ecx
	mov	DWORD PTR _tmp$[ebp+4], 0
	mov	ecx, DWORD PTR tv826[ebp]
	mov	DWORD PTR _powerbufFree$1$[ebp], eax
	mov	eax, DWORD PTR _powerbuf$1$[ebp]
; Line 829
	mov	DWORD PTR _am$[ebp+8], edx
	mov	DWORD PTR _tmp$[ebp+8], edx
; Line 830
	mov	DWORD PTR _am$[ebp+12], 0
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _tmp$[ebp+12], 0
; Line 835
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax
	mov	DWORD PTR _tmp$1$[ebp], eax
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _am$[ebp], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _am$[ebp+16], 2
	mov	DWORD PTR _tmp$[ebp+16], 2
	test	DWORD PTR [eax+edx*4-4], -2147483648	; 80000000H
	je	$LN31@BN_mod_exp
; Line 837
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR _tmp$1$[ebp]
	neg	eax
	mov	DWORD PTR [edx], eax
; Line 838
	mov	edx, 1
	mov	eax, DWORD PTR _top$1$[ebp]
	lea	edi, DWORD PTR [eax-1]
	mov	DWORD PTR tv773[ebp], edi
	mov	edi, DWORD PTR _mont$1$[ebp]
	cmp	eax, edx
	jle	$LN107@BN_mod_exp
	cmp	DWORD PTR tv773[ebp], 8
	jb	$LN97@BN_mod_exp
; Line 839
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv831[ebp], eax
	mov	eax, DWORD PTR _tmp$[ebp]
	lea	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR tv823[ebp], ebx
	mov	ebx, DWORD PTR tv773[ebp]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR tv831[ebp]
	mov	DWORD PTR tv820[ebp], eax
	lea	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR tv822[ebp], eax
	mov	eax, DWORD PTR tv773[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _window$1$[ebp]
	cmp	DWORD PTR tv823[ebp], eax
	mov	eax, DWORD PTR tv820[ebp]
	ja	SHORT $LN80@BN_mod_exp
	cmp	eax, DWORD PTR tv822[ebp]
	jae	SHORT $LN97@BN_mod_exp
$LN80@BN_mod_exp:
	cmp	DWORD PTR tv823[ebp], ecx
	ja	SHORT $LN81@BN_mod_exp
	cmp	eax, ecx
	jae	SHORT $LN97@BN_mod_exp
$LN81@BN_mod_exp:
	mov	eax, DWORD PTR tv773[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN110@BN_mod_exp
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN110@BN_mod_exp:
	mov	ecx, DWORD PTR _top$1$[ebp]
	movups	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	mov	edi, DWORD PTR tv831[ebp]
	sub	ecx, eax
$LL4@BN_mod_exp:
	movups	xmm0, XMMWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR _tmp$[ebp]
	pandn	xmm0, xmm1
	movups	XMMWORD PTR [eax+edx*4], xmm0
	mov	eax, DWORD PTR _tmp$[ebp]
	movups	xmm0, XMMWORD PTR [edi+edx*4+16]
	pandn	xmm0, xmm1
	movups	XMMWORD PTR [eax+edx*4+16], xmm0
	add	edx, 8
	cmp	edx, ecx
	jl	SHORT $LL4@BN_mod_exp
	mov	edi, DWORD PTR _mont$1$[ebp]
$LN97@BN_mod_exp:
; Line 838
	cmp	edx, DWORD PTR _top$1$[ebp]
	jge	SHORT $LN107@BN_mod_exp
	mov	edi, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _top$1$[ebp]
$LL78@BN_mod_exp:
; Line 839
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _tmp$[ebp]
	not	ecx
	mov	DWORD PTR [eax+edx*4], ecx
	inc	edx
	cmp	edx, ebx
	jl	SHORT $LL78@BN_mod_exp
	mov	ebx, DWORD PTR _window$1$[ebp]
	mov	edi, DWORD PTR _mont$1$[ebp]
$LN107@BN_mod_exp:
; Line 840
	mov	edx, DWORD PTR _top$1$[ebp]
	mov	DWORD PTR _tmp$[ebp+4], edx
; Line 841
	jmp	SHORT $LN33@BN_mod_exp
$LN31@BN_mod_exp:
; Line 843
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR [edi+4]
	push	edi
	push	eax
	call	_BN_value_one
	push	eax
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
$LN33@BN_mod_exp:
; Line 847
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN36@BN_mod_exp
	push	DWORD PTR _m$[ebp]
	push	eax
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN108@BN_mod_exp
; Line 852
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR [edi+4]
	push	edi
	push	eax
	push	DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR _am$[ebp]
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN38@BN_mod_exp
; Line 853
	jmp	$err$114
$LN108@BN_mod_exp:
	mov	eax, DWORD PTR _a$[ebp]
$LN36@BN_mod_exp:
; Line 848
	push	DWORD PTR _ctx$[ebp]
	push	DWORD PTR _m$[ebp]
	push	eax
	lea	eax, DWORD PTR _am$[ebp]
	push	eax
	push	0
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 850
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR [edi+4]
	push	edi
	push	eax
	lea	eax, DWORD PTR _am$[ebp]
	push	eax
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
$LN38@BN_mod_exp:
; Line 1107
	push	ebx
	push	0
	push	DWORD PTR _powerbuf$1$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	DWORD PTR _top$1$[ebp]
	push	eax
	call	_MOD_EXP_CTIME_COPY_TO_PREBUF
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1109
	push	ebx
	push	1
	push	DWORD PTR _powerbuf$1$[ebp]
	lea	eax, DWORD PTR _am$[ebp]
	push	DWORD PTR _top$1$[ebp]
	push	eax
	call	_MOD_EXP_CTIME_COPY_TO_PREBUF
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1118
	cmp	ebx, 1
	jle	$LN6@BN_mod_exp
; Line 1119
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR _am$[ebp]
	push	edi
	push	eax
	push	eax
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1121
	push	ebx
	push	2
	push	DWORD PTR _powerbuf$1$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	DWORD PTR _top$1$[ebp]
	push	eax
	call	_MOD_EXP_CTIME_COPY_TO_PREBUF
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1124
	cmp	DWORD PTR _numPowers$1$[ebp], 3
	mov	DWORD PTR _i$2$[ebp], 3
	jle	SHORT $LN6@BN_mod_exp
$LL7@BN_mod_exp:
; Line 1126
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _am$[ebp]
	push	eax
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1128
	push	ebx
	push	DWORD PTR _i$2$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	DWORD PTR _powerbuf$1$[ebp]
	push	DWORD PTR _top$1$[ebp]
	push	eax
	call	_MOD_EXP_CTIME_COPY_TO_PREBUF
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1124
	mov	eax, DWORD PTR _i$2$[ebp]
	inc	eax
	mov	DWORD PTR _i$2$[ebp], eax
	cmp	eax, DWORD PTR _numPowers$1$[ebp]
	jl	SHORT $LL7@BN_mod_exp
$LN6@BN_mod_exp:
; Line 1134
	dec	esi
; Line 1135
	xor	ecx, ecx
	mov	eax, esi
	cdq
	idiv	ebx
	mov	DWORD PTR _i$3$[ebp], edx
	test	edx, edx
	js	SHORT $LN9@BN_mod_exp
	mov	edi, edx
	xor	ebx, ebx
$LL10@BN_mod_exp:
; Line 1136
	push	esi
	push	DWORD PTR _p$[ebp]
	call	_BN_is_bit_set
	add	esp, 8
	dec	esi
	sub	edi, 1
	lea	ebx, DWORD PTR [eax+ebx*2]
	jns	SHORT $LL10@BN_mod_exp
	mov	edi, DWORD PTR _mont$1$[ebp]
	mov	DWORD PTR _wvalue$1$[ebp], ebx
	mov	ebx, DWORD PTR _window$1$[ebp]
	mov	ecx, DWORD PTR _wvalue$1$[ebp]
$LN9@BN_mod_exp:
; Line 1137
	push	ebx
	push	ecx
	push	DWORD PTR _powerbuf$1$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	DWORD PTR _top$1$[ebp]
	push	eax
	call	_MOD_EXP_CTIME_COPY_FROM_PREBUF
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$114
; Line 1145
	test	esi, esi
	js	$LN12@BN_mod_exp
	npad	6
$LL11@BN_mod_exp:
; Line 1149
	mov	eax, DWORD PTR _window$1$[ebp]
	xor	ebx, ebx
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN14@BN_mod_exp
	npad	5
$LL15@BN_mod_exp:
; Line 1150
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	DWORD PTR _mont$1$[ebp]
	push	eax
	push	eax
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$114
; Line 1152
	push	esi
	push	DWORD PTR _p$[ebp]
	call	_BN_is_bit_set
	inc	edi
	add	esp, 8
	dec	esi
	lea	ebx, DWORD PTR [eax+ebx*2]
	mov	eax, DWORD PTR _window$1$[ebp]
	cmp	edi, eax
	jl	SHORT $LL15@BN_mod_exp
$LN14@BN_mod_exp:
; Line 1158
	push	eax
	push	ebx
	push	DWORD PTR _powerbuf$1$[ebp]
	lea	eax, DWORD PTR _am$[ebp]
	push	DWORD PTR _top$1$[ebp]
	push	eax
	call	_MOD_EXP_CTIME_COPY_FROM_PREBUF
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$114
; Line 1163
	push	DWORD PTR _ctx$[ebp]
	mov	edi, DWORD PTR _mont$1$[ebp]
	lea	eax, DWORD PTR _am$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$114
; Line 1145
	test	esi, esi
	jns	SHORT $LL11@BN_mod_exp
$LN12@BN_mod_exp:
; Line 1178
	push	DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR _tmp$[ebp]
	push	edi
	push	eax
	push	DWORD PTR _rr$[ebp]
	call	_BN_from_montgomery
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	test	eax, eax
	mov	eax, 1
	cmovne	ecx, eax
	mov	DWORD PTR _ret$2$[ebp], ecx
$err$114:
; Line 1182
	cmp	DWORD PTR _in_mont$[ebp], 0
	jne	SHORT $LN52@BN_mod_exp
	mov	edi, DWORD PTR _mont$1$[ebp]
$LN95@BN_mod_exp:
	test	edi, edi
	je	SHORT $LN52@BN_mod_exp
; Line 1183
	push	edi
	call	_BN_MONT_CTX_free
	add	esp, 4
$LN52@BN_mod_exp:
; Line 1184
	mov	eax, DWORD PTR _powerbuf$1$[ebp]
	test	eax, eax
	je	SHORT $LN54@BN_mod_exp
; Line 1185
	push	DWORD PTR _powerbufLen$1$[ebp]
	push	eax
	call	_OPENSSL_cleanse
; Line 1186
	mov	eax, DWORD PTR _powerbufFree$1$[ebp]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN54@BN_mod_exp
; Line 1187
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN54@BN_mod_exp:
; Line 1189
	push	DWORD PTR _ctx$[ebp]
	call	_BN_CTX_end
; Line 1190
	mov	eax, DWORD PTR _ret$2$[ebp]
	add	esp, 4
; Line 1191
	lea	esp, DWORD PTR [ebp-108]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@BN_mod_exp:
; Line 716
	push	716					; 000002ccH
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	102					; 00000066H
	push	124					; 0000007cH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 717
	xor	eax, eax
; Line 1191
	lea	esp, DWORD PTR [ebp-108]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_BN_mod_exp_mont_consttime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_exp_mont
_TEXT	SEGMENT
_mont$1$ = -192						; size = 4
_wend$1$ = -188						; size = 4
_aa$1$ = -188						; size = 4
tv942 = -188						; size = 4
_wstart$1$ = -184					; size = 4
_d$1$ = -184						; size = 4
_bits$1$ = -180						; size = 4
tv945 = -180						; size = 4
_window$1$ = -176					; size = 4
_ctx$GSCopy$1$ = -172					; size = 4
_j$1$ = -168						; size = 4
tv955 = -168						; size = 4
_start$1$ = -164					; size = 4
_ret$2$ = -160						; size = 4
_p$GSCopy$1$ = -156					; size = 4
_rr$GSCopy$1$ = -152					; size = 4
_in_mont$GSCopy$1$ = -148				; size = 4
tv944 = -144						; size = 4
tv954 = -140						; size = 4
_r$1$ = -136						; size = 4
_val$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_rr$ = 8						; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_m$ = 20						; size = 4
_ctx$ = 24						; size = 4
_in_mont$ = 28						; size = 4
_BN_mod_exp_mont PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 404
	mov	eax, 192				; 000000c0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+192], eax
	mov	ecx, DWORD PTR _p$[esp+188]
	mov	eax, DWORD PTR _a$[esp+188]
	mov	edx, DWORD PTR _in_mont$[esp+188]
	push	ebx
	mov	ebx, DWORD PTR _m$[esp+192]
	push	ebp
	mov	ebp, DWORD PTR _rr$[esp+196]
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+204]
; Line 411
	xor	esi, esi
; Line 413
	test	BYTE PTR [ecx+16], 4
	mov	DWORD PTR _rr$GSCopy$1$[esp+208], ebp
	mov	DWORD PTR _aa$1$[esp+208], eax
	mov	DWORD PTR _p$GSCopy$1$[esp+208], ecx
	mov	DWORD PTR _ctx$GSCopy$1$[esp+208], edi
	mov	DWORD PTR _in_mont$GSCopy$1$[esp+208], edx
	mov	DWORD PTR _ret$2$[esp+208], 0
	je	SHORT $LN20@BN_mod_exp
; Line 414
	push	edx
	push	edi
	push	ebx
	push	ecx
	push	eax
	push	ebp
	call	_BN_mod_exp_mont_consttime
	add	esp, 24					; 00000018H
	jmp	$LN1@BN_mod_exp
$LN20@BN_mod_exp:
; Line 421
	cmp	DWORD PTR [ebx+4], esi
	jle	$LN22@BN_mod_exp
	mov	eax, DWORD PTR [ebx]
	test	BYTE PTR [eax], 1
	je	$LN22@BN_mod_exp
; Line 425
	push	ecx
	call	_BN_num_bits
	add	esp, 4
	mov	DWORD PTR _bits$1$[esp+208], eax
; Line 426
	test	eax, eax
	jne	SHORT $LN23@BN_mod_exp
; Line 428
	cmp	DWORD PTR [ebx+4], 1
	jne	SHORT $LN27@BN_mod_exp
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN27@BN_mod_exp
	cmp	DWORD PTR [ebx+12], esi
	jne	SHORT $LN27@BN_mod_exp
; Line 430
	push	0
	push	ebp
	mov	esi, 1
	call	_BN_set_word
; Line 432
	add	esp, 8
; Line 434
	mov	eax, esi
	jmp	$LN1@BN_mod_exp
$LN27@BN_mod_exp:
; Line 432
	push	1
	push	ebp
	call	_BN_set_word
	mov	esi, eax
	add	esp, 8
; Line 434
	jmp	$LN1@BN_mod_exp
$LN23@BN_mod_exp:
; Line 437
	push	edi
	call	_BN_CTX_start
; Line 438
	push	edi
	call	_BN_CTX_get
; Line 439
	push	edi
	mov	DWORD PTR _d$1$[esp+220], eax
	call	_BN_CTX_get
	mov	ebp, eax
; Line 440
	push	edi
	mov	DWORD PTR _r$1$[esp+224], ebp
	call	_BN_CTX_get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _val$[esp+208], eax
; Line 441
	cmp	DWORD PTR _d$1$[esp+208], esi
	je	$err$149
	test	ebp, ebp
	je	$err$149
	test	eax, eax
	je	$err$149
; Line 448
	mov	eax, DWORD PTR _in_mont$GSCopy$1$[esp+208]
	test	eax, eax
	je	SHORT $LN30@BN_mod_exp
; Line 449
	mov	esi, eax
	mov	DWORD PTR _mont$1$[esp+208], esi
	jmp	SHORT $LN33@BN_mod_exp
$LN30@BN_mod_exp:
; Line 451
	call	_BN_MONT_CTX_new
	mov	esi, eax
	mov	DWORD PTR _mont$1$[esp+208], esi
	test	esi, esi
	je	$LN61@BN_mod_exp
; Line 453
	push	edi
	push	ebx
	push	esi
	call	_BN_MONT_CTX_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN119@BN_mod_exp
$LN33@BN_mod_exp:
; Line 457
	mov	eax, DWORD PTR _aa$1$[esp+208]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN36@BN_mod_exp
	push	ebx
	push	eax
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
; Line 462
	mov	eax, DWORD PTR _aa$1$[esp+208]
	jns	SHORT $LN36@BN_mod_exp
	mov	ecx, DWORD PTR _val$[esp+208]
	jmp	SHORT $LN35@BN_mod_exp
$LN36@BN_mod_exp:
; Line 458
	push	edi
	push	ebx
	push	eax
	push	DWORD PTR _val$[esp+220]
	call	_BN_nnmod
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$149
; Line 460
	mov	ecx, DWORD PTR _val$[esp+208]
	mov	eax, ecx
$LN35@BN_mod_exp:
; Line 463
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN38@BN_mod_exp
; Line 464
	push	0
	push	DWORD PTR _rr$GSCopy$1$[esp+212]
	call	_BN_set_word
	add	esp, 8
; Line 465
	mov	DWORD PTR _ret$2$[esp+208], 1
; Line 466
	jmp	$err$149
$LN38@BN_mod_exp:
; Line 468
	push	edi
	push	esi
	lea	edx, DWORD PTR [esi+4]
	push	edx
	push	eax
	push	ecx
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$149
; Line 471
	mov	eax, DWORD PTR _bits$1$[esp+208]
	cmp	eax, 671				; 0000029fH
	jle	SHORT $LN67@BN_mod_exp
	mov	DWORD PTR _window$1$[esp+208], 6
	jmp	SHORT $LN120@BN_mod_exp
$LN67@BN_mod_exp:
	cmp	eax, 239				; 000000efH
	jle	SHORT $LN65@BN_mod_exp
	mov	DWORD PTR _window$1$[esp+208], 5
	jmp	SHORT $LN120@BN_mod_exp
$LN65@BN_mod_exp:
	cmp	eax, 79					; 0000004fH
	jle	SHORT $LN63@BN_mod_exp
	mov	DWORD PTR _window$1$[esp+208], 4
	jmp	SHORT $LN120@BN_mod_exp
$LN63@BN_mod_exp:
	xor	ecx, ecx
	cmp	eax, 23					; 00000017H
	setg	cl
	lea	ecx, DWORD PTR [ecx*2+1]
	mov	DWORD PTR _window$1$[esp+208], ecx
; Line 472
	cmp	ecx, 1
	jle	SHORT $LN3@BN_mod_exp
$LN120@BN_mod_exp:
; Line 473
	mov	eax, DWORD PTR _val$[esp+208]
	push	edi
	push	esi
	push	eax
	push	eax
	push	DWORD PTR _d$1$[esp+224]
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$149
; Line 475
	mov	ecx, DWORD PTR _window$1$[esp+208]
	mov	eax, 1
; Line 476
	mov	esi, 1
	lea	ecx, DWORD PTR [ecx-1]
	shl	eax, cl
	mov	DWORD PTR _j$1$[esp+208], eax
	cmp	eax, esi
	jle	SHORT $LN144@BN_mod_exp
$LL4@BN_mod_exp:
; Line 477
	push	edi
	call	_BN_CTX_get
	add	esp, 4
	mov	DWORD PTR _val$[esp+esi*4+208], eax
	test	eax, eax
	je	$LN141@BN_mod_exp
	push	edi
	push	DWORD PTR _mont$1$[esp+212]
	push	DWORD PTR _d$1$[esp+216]
	push	DWORD PTR _val$[esp+esi*4+216]
	push	eax
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN141@BN_mod_exp
; Line 476
	inc	esi
	cmp	esi, DWORD PTR _j$1$[esp+208]
	jl	SHORT $LL4@BN_mod_exp
$LN144@BN_mod_exp:
	mov	eax, DWORD PTR _bits$1$[esp+208]
$LN3@BN_mod_exp:
; Line 491
	mov	esi, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [eax-1]
; Line 492
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _start$1$[esp+208], 1
	mov	DWORD PTR _wstart$1$[esp+208], ecx
	test	DWORD PTR [eax+esi*4-4], -2147483648	; 80000000H
	je	$LN44@BN_mod_exp
; Line 493
	cmp	esi, DWORD PTR [ebp+8]
	jg	SHORT $LN69@BN_mod_exp
	mov	eax, ebp
	jmp	SHORT $LN70@BN_mod_exp
$LN69@BN_mod_exp:
	push	esi
	push	ebp
	call	_bn_expand2
	add	esp, 8
$LN70@BN_mod_exp:
	test	eax, eax
	je	$LN141@BN_mod_exp
; Line 496
	mov	eax, DWORD PTR [ebx]
; Line 497
	mov	edx, 1
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebp]
	neg	ecx
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [esi-1]
	cmp	esi, edx
	jle	$LN6@BN_mod_exp
	cmp	ecx, 8
	jb	$LN94@BN_mod_exp
; Line 498
	mov	edi, DWORD PTR [ebp]
	lea	eax, DWORD PTR [edi+4]
	mov	DWORD PTR tv945[esp+208], eax
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR tv942[esp+208], edi
	lea	edi, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv944[esp+208], edi
	cmp	DWORD PTR tv945[esp+208], eax
	mov	edi, DWORD PTR _ctx$GSCopy$1$[esp+208]
	mov	eax, DWORD PTR tv942[esp+208]
	ja	SHORT $LN95@BN_mod_exp
	cmp	eax, DWORD PTR tv944[esp+208]
	jae	SHORT $LN94@BN_mod_exp
$LN95@BN_mod_exp:
	cmp	DWORD PTR tv945[esp+208], ebp
	ja	SHORT $LN96@BN_mod_exp
	cmp	eax, ebp
	jae	SHORT $LN94@BN_mod_exp
$LN96@BN_mod_exp:
	cmp	DWORD PTR tv945[esp+208], ebx
	ja	SHORT $LN97@BN_mod_exp
	cmp	eax, ebx
	jae	SHORT $LN94@BN_mod_exp
$LN97@BN_mod_exp:
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN146@BN_mod_exp
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN146@BN_mod_exp:
	movups	xmm1, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	mov	edi, DWORD PTR [ebp]
	mov	eax, esi
	sub	eax, ecx
	mov	ecx, DWORD PTR [ebx]
$LL7@BN_mod_exp:
	movups	xmm0, XMMWORD PTR [ecx+edx*4]
	pandn	xmm0, xmm1
	movups	XMMWORD PTR [edi+edx*4], xmm0
	movups	xmm0, XMMWORD PTR [ecx+edx*4+16]
	pandn	xmm0, xmm1
	movups	XMMWORD PTR [edi+edx*4+16], xmm0
	add	edx, 8
	cmp	edx, eax
	jl	SHORT $LL7@BN_mod_exp
	mov	edi, DWORD PTR _ctx$GSCopy$1$[esp+208]
$LN94@BN_mod_exp:
; Line 497
	cmp	edx, esi
	jge	SHORT $LN6@BN_mod_exp
	npad	4
$LL93@BN_mod_exp:
; Line 498
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ebp]
	not	ecx
	mov	DWORD PTR [eax+edx*4], ecx
	inc	edx
	cmp	edx, esi
	jl	SHORT $LL93@BN_mod_exp
$LN6@BN_mod_exp:
; Line 499
	mov	DWORD PTR [ebp+4], esi
; Line 504
	test	esi, esi
	jle	SHORT $LN142@BN_mod_exp
	mov	eax, DWORD PTR [ebp]
	lea	ecx, DWORD PTR [esi-1]
	lea	ecx, DWORD PTR [eax+ecx*4]
$LL10@BN_mod_exp:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx-4]
	test	eax, eax
	jne	SHORT $LN78@BN_mod_exp
	dec	esi
	test	esi, esi
	jg	SHORT $LL10@BN_mod_exp
$LN78@BN_mod_exp:
	mov	DWORD PTR [ebp+4], esi
$LN142@BN_mod_exp:
	mov	esi, DWORD PTR _mont$1$[esp+208]
$LN133@BN_mod_exp:
	mov	ebx, DWORD PTR _wstart$1$[esp+208]
	npad	5
$LL11@BN_mod_exp:
; Line 510
	push	ebx
	push	DWORD PTR _p$GSCopy$1$[esp+212]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN50@BN_mod_exp
; Line 511
	cmp	DWORD PTR _start$1$[esp+208], eax
	jne	SHORT $LN52@BN_mod_exp
; Line 512
	push	edi
	push	esi
	push	ebp
	push	ebp
	push	ebp
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$149
$LN52@BN_mod_exp:
; Line 515
	test	ebx, ebx
	je	$LN84@BN_mod_exp
; Line 517
	dec	ebx
	mov	DWORD PTR _wstart$1$[esp+208], ebx
; Line 518
	jmp	SHORT $LL11@BN_mod_exp
$LN44@BN_mod_exp:
; Line 507
	mov	esi, DWORD PTR _mont$1$[esp+208]
	push	edi
	push	esi
	lea	eax, DWORD PTR [esi+4]
	push	eax
	call	_BN_value_one
	push	eax
	push	ebp
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$149
	jmp	SHORT $LN133@BN_mod_exp
$LN50@BN_mod_exp:
; Line 526
	mov	ebx, 1
; Line 527
	xor	eax, eax
; Line 528
	mov	esi, ebx
	mov	DWORD PTR _wend$1$[esp+208], eax
	cmp	DWORD PTR _window$1$[esp+208], ebx
	jle	SHORT $LN79@BN_mod_exp
; Line 526
	mov	edi, DWORD PTR _wstart$1$[esp+208]
	mov	ebp, DWORD PTR _p$GSCopy$1$[esp+208]
	dec	edi
	npad	6
$LL16@BN_mod_exp:
; Line 529
	test	edi, edi
	js	SHORT $LN136@BN_mod_exp
; Line 531
	push	edi
	push	ebp
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LN138@BN_mod_exp
; Line 532
	mov	ecx, esi
; Line 534
	mov	eax, esi
	sub	ecx, DWORD PTR _wend$1$[esp+208]
	shl	ebx, cl
	or	ebx, 1
	mov	DWORD PTR _wend$1$[esp+208], eax
	jmp	SHORT $LN14@BN_mod_exp
$LN138@BN_mod_exp:
	mov	eax, DWORD PTR _wend$1$[esp+208]
$LN14@BN_mod_exp:
; Line 528
	inc	esi
	dec	edi
	cmp	esi, DWORD PTR _window$1$[esp+208]
	jl	SHORT $LL16@BN_mod_exp
$LN136@BN_mod_exp:
	mov	ebp, DWORD PTR _r$1$[esp+208]
$LN79@BN_mod_exp:
; Line 541
	cmp	DWORD PTR _start$1$[esp+208], 0
	lea	edi, DWORD PTR [eax+1]
	jne	SHORT $LN18@BN_mod_exp
; Line 542
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN18@BN_mod_exp
$LL19@BN_mod_exp:
; Line 543
	push	DWORD PTR _ctx$GSCopy$1$[esp+208]
	push	DWORD PTR _mont$1$[esp+212]
	push	ebp
	push	ebp
	push	ebp
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN137@BN_mod_exp
; Line 542
	inc	esi
	cmp	esi, edi
	jl	SHORT $LL19@BN_mod_exp
$LN18@BN_mod_exp:
; Line 548
	mov	edi, DWORD PTR _ctx$GSCopy$1$[esp+208]
	mov	esi, DWORD PTR _mont$1$[esp+208]
	push	edi
	sar	ebx, 1
	push	esi
	push	DWORD PTR _val$[esp+ebx*4+216]
	push	ebp
	push	ebp
	call	_BN_mod_mul_montgomery
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$149
; Line 552
	mov	ebx, DWORD PTR _wstart$1$[esp+208]
	or	eax, -1
	sub	eax, DWORD PTR _wend$1$[esp+208]
	add	ebx, eax
; Line 554
	mov	DWORD PTR _start$1$[esp+208], 0
	mov	DWORD PTR _wstart$1$[esp+208], ebx
; Line 555
	jns	$LL11@BN_mod_exp
$LN84@BN_mod_exp:
; Line 569
	push	edi
	push	esi
	push	ebp
	push	DWORD PTR _rr$GSCopy$1$[esp+220]
	call	_BN_from_montgomery
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	test	eax, eax
	mov	eax, 1
	cmovne	ecx, eax
	mov	DWORD PTR _ret$2$[esp+208], ecx
	jmp	SHORT $err$149
$LN137@BN_mod_exp:
	mov	edi, DWORD PTR _ctx$GSCopy$1$[esp+208]
$LN141@BN_mod_exp:
	mov	esi, DWORD PTR _mont$1$[esp+208]
$err$149:
; Line 573
	cmp	DWORD PTR _in_mont$GSCopy$1$[esp+208], 0
	jne	SHORT $LN61@BN_mod_exp
$LN119@BN_mod_exp:
	test	esi, esi
	je	SHORT $LN61@BN_mod_exp
; Line 574
	push	esi
	call	_BN_MONT_CTX_free
	add	esp, 4
$LN61@BN_mod_exp:
; Line 575
	push	edi
	call	_BN_CTX_end
; Line 577
	mov	eax, DWORD PTR _ret$2$[esp+212]
	add	esp, 4
	jmp	SHORT $LN1@BN_mod_exp
$LN22@BN_mod_exp:
; Line 422
	push	422					; 000001a6H
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	102					; 00000066H
	push	109					; 0000006dH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 423
	xor	eax, eax
$LN1@BN_mod_exp:
; Line 578
	mov	ecx, DWORD PTR __$ArrayPad$[esp+208]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 192				; 000000c0H
	ret	0
_BN_mod_exp_mont ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_exp
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_m$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_mod_exp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 244
	mov	ecx, DWORD PTR _m$[esp-4]
	cmp	DWORD PTR [ecx+4], 0
	jle	SHORT $LN2@BN_mod_exp
	mov	eax, DWORD PTR [ecx]
	test	BYTE PTR [eax], 1
	je	SHORT $LN2@BN_mod_exp
; Line 247
	mov	eax, DWORD PTR _a$[esp-4]
	mov	edx, DWORD PTR _p$[esp-4]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN4@BN_mod_exp
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@BN_mod_exp
	test	BYTE PTR [edx+16], 4
	jne	SHORT $LN4@BN_mod_exp
; Line 248
	mov	eax, DWORD PTR [eax]
; Line 249
	push	0
	push	DWORD PTR _ctx$[esp]
	push	ecx
	push	edx
	push	DWORD PTR [eax]
	push	DWORD PTR _r$[esp+16]
	call	_BN_mod_exp_mont_word
	add	esp, 24					; 00000018H
; Line 267
	ret	0
$LN4@BN_mod_exp:
; Line 252
	push	0
	push	DWORD PTR _ctx$[esp]
	push	ecx
	push	edx
	push	eax
	push	DWORD PTR _r$[esp+16]
	call	_BN_mod_exp_mont
	add	esp, 24					; 00000018H
; Line 267
	ret	0
$LN2@BN_mod_exp:
; Line 257
	mov	DWORD PTR _m$[esp-4], ecx
	jmp	_BN_mod_exp_recp
_BN_mod_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_exp
_TEXT	SEGMENT
_bits$1$ = -8						; size = 4
_ret$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_exp	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_exp.c
; Line 144
	mov	eax, 8
	call	__chkstk
	push	esi
; Line 148
	mov	esi, DWORD PTR _p$[esp+8]
	mov	DWORD PTR _ret$1$[esp+12], 0
	test	BYTE PTR [esi+16], 4
	je	SHORT $LN5@BN_exp
; Line 150
	push	150					; 00000096H
	push	OFFSET ??_C@_0BF@GGICFINI@?4?2crypto?2bn?2bn_exp?4c?$AA@
	push	66					; 00000042H
	push	123					; 0000007bH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 151
	or	eax, -1
	pop	esi
; Line 190
	add	esp, 8
	ret	0
$LN5@BN_exp:
	push	ebx
; Line 154
	mov	ebx, DWORD PTR _ctx$[esp+12]
	push	ebp
	push	edi
	push	ebx
	call	_BN_CTX_start
; Line 155
	mov	eax, DWORD PTR _r$[esp+24]
	add	esp, 4
	cmp	eax, DWORD PTR _a$[esp+20]
	je	SHORT $LN8@BN_exp
	cmp	eax, esi
	jne	SHORT $LN27@BN_exp
$LN8@BN_exp:
; Line 156
	push	ebx
	call	_BN_CTX_get
	add	esp, 4
$LN27@BN_exp:
; Line 159
	push	ebx
	mov	edi, eax
	call	_BN_CTX_get
	add	esp, 4
	mov	ebp, eax
; Line 160
	test	edi, edi
	je	$err$31
	test	ebp, ebp
	je	$err$31
; Line 163
	push	DWORD PTR _a$[esp+20]
	push	ebp
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$err$31
; Line 165
	push	esi
	call	_BN_num_bits
	add	esp, 4
	mov	DWORD PTR _bits$1$[esp+24], eax
; Line 167
	cmp	DWORD PTR [esi+4], 0
	jle	SHORT $LN12@BN_exp
	mov	eax, DWORD PTR [esi]
	test	BYTE PTR [eax], 1
	je	SHORT $LN12@BN_exp
; Line 168
	push	DWORD PTR _a$[esp+20]
	push	edi
	call	_BN_copy
; Line 170
	jmp	SHORT $LN29@BN_exp
$LN12@BN_exp:
; Line 171
	push	1
	push	edi
	call	_BN_set_word
$LN29@BN_exp:
	add	esp, 8
	test	eax, eax
	je	SHORT $err$31
; Line 175
	mov	esi, 1
	cmp	DWORD PTR _bits$1$[esp+24], esi
	jle	SHORT $LN3@BN_exp
$LL4@BN_exp:
; Line 176
	push	ebx
	push	ebp
	push	ebp
	call	_BN_sqr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$31
; Line 178
	push	esi
	push	DWORD PTR _p$[esp+24]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@BN_exp
; Line 179
	push	ebx
	push	ebp
	push	edi
	push	edi
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$31
$LN2@BN_exp:
; Line 175
	inc	esi
	cmp	esi, DWORD PTR _bits$1$[esp+24]
	jl	SHORT $LL4@BN_exp
$LN3@BN_exp:
; Line 183
	mov	eax, DWORD PTR _r$[esp+20]
	cmp	eax, edi
	je	SHORT $LN19@BN_exp
; Line 184
	push	edi
	push	eax
	call	_BN_copy
	add	esp, 8
$LN19@BN_exp:
; Line 185
	mov	DWORD PTR _ret$1$[esp+24], 1
$err$31:
; Line 187
	push	ebx
	call	_BN_CTX_end
; Line 189
	mov	eax, DWORD PTR _ret$1$[esp+28]
	add	esp, 4
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi
; Line 190
	add	esp, 8
	ret	0
_BN_exp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_eq_int
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_eq_int PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	mov	ecx, DWORD PTR _a$[esp-4]
	xor	ecx, DWORD PTR _b$[esp-4]
; Line 160
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
; Line 180
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 180
	neg	eax
; Line 181
	ret	0
_constant_time_eq_int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_eq
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_constant_time_eq PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 170
	mov	ecx, DWORD PTR _a$[esp-4]
	xor	ecx, DWORD PTR _b$[esp-4]
; Line 160
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
; Line 170
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 170
	neg	eax
; Line 171
	ret	0
_constant_time_eq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_is_zero
_TEXT	SEGMENT
_a$ = 8							; size = 4
_constant_time_is_zero PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 160
	mov	ecx, DWORD PTR _a$[esp-4]
	lea	eax, DWORD PTR [ecx-1]
	not	ecx
	shr	eax, 31					; 0000001fH
	shr	ecx, 31					; 0000001fH
; Line 135
	and	eax, ecx
; Line 160
	neg	eax
; Line 161
	ret	0
_constant_time_is_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _constant_time_msb
_TEXT	SEGMENT
_a$ = 8							; size = 4
_constant_time_msb PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\tmp32dll\constant_time_locl.h
; Line 135
	mov	eax, DWORD PTR _a$[esp-4]
	shr	eax, 31					; 0000001fH
	neg	eax
; Line 136
	ret	0
_constant_time_msb ENDP
_TEXT	ENDS
END
