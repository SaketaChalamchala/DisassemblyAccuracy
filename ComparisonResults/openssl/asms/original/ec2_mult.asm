; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ec_GF2m_simple_mul
PUBLIC	_ec_GF2m_precompute_mult
PUBLIC	_ec_GF2m_have_precompute_mult
PUBLIC	??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@ ; `string'
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_set_negative:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_consttime_swap:PROC
EXTRN	_BN_GF2m_add:PROC
EXTRN	_BN_GF2m_mod_arr:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_EC_POINT_new:PROC
EXTRN	_EC_POINT_free:PROC
EXTRN	_EC_POINT_copy:PROC
EXTRN	_EC_POINT_set_to_infinity:PROC
EXTRN	_EC_POINT_is_at_infinity:PROC
EXTRN	_EC_GROUP_have_precompute_mult:PROC
EXTRN	_ec_wNAF_mul:PROC
EXTRN	_ec_wNAF_precompute_mult:PROC
EXTRN	_ec_wNAF_have_precompute_mult:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@
CONST	SEGMENT
??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@ DB '.\crypto\ec\ec2_m'
	DB	'ult.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_montgomery_point_multiply
_TEXT	SEGMENT
_x1$1$ = -16						; size = 4
_i$1$ = -12						; size = 4
_ret$1$ = -8						; size = 4
_word$2$ = -4						; size = 4
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_scalar$ = 16						; size = 4
_point$ = 20						; size = 4
_ctx$ = 24						; size = 4
_ec_GF2m_montgomery_point_multiply PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 268
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
; Line 273
	mov	ebx, DWORD PTR _r$[esp+16]
	push	ebp
	mov	ebp, DWORD PTR _point$[esp+20]
	mov	DWORD PTR _ret$1$[esp+24], 0
	cmp	ebx, ebp
	jne	SHORT $LN9@ec_GF2m_mo
; Line 274
	push	274					; 00000112H
	push	OFFSET ??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@
	push	112					; 00000070H
	push	208					; 000000d0H
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 275
	xor	eax, eax
	pop	ebp
	pop	ebx
; Line 367
	add	esp, 16					; 00000010H
	ret	0
$LN9@ec_GF2m_mo:
; Line 279
	mov	eax, DWORD PTR _scalar$[esp+20]
	push	esi
	mov	esi, DWORD PTR _group$[esp+24]
	test	eax, eax
	je	$LN11@ec_GF2m_mo
	cmp	DWORD PTR [eax+4], 0
	je	$LN11@ec_GF2m_mo
	test	ebp, ebp
	je	$LN11@ec_GF2m_mo
	push	ebp
	push	esi
	call	_EC_POINT_is_at_infinity
	add	esp, 8
	test	eax, eax
	jne	$LN11@ec_GF2m_mo
; Line 285
	cmp	DWORD PTR [ebp+64], eax
	jne	SHORT $LN12@ec_GF2m_mo
	pop	esi
	pop	ebp
	pop	ebx
; Line 367
	add	esp, 16					; 00000010H
	ret	0
$LN12@ec_GF2m_mo:
; Line 291
	mov	ebp, DWORD PTR _ctx$[esp+24]
	push	edi
	push	ebp
	call	_BN_CTX_start
; Line 292
	push	ebp
	call	_BN_CTX_get
	mov	edi, eax
; Line 293
	push	ebp
	mov	DWORD PTR _x1$1$[esp+44], edi
	call	_BN_CTX_get
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 294
	test	ebp, ebp
	je	$err$53
; Line 300
	mov	eax, DWORD PTR [esi+76]
	add	ebx, 4
	cmp	eax, DWORD PTR [edi+8]
	jle	SHORT $LN30@ec_GF2m_mo
	push	eax
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN30@ec_GF2m_mo:
; Line 301
	mov	eax, DWORD PTR [esi+76]
	cmp	eax, DWORD PTR [ebp+8]
	jle	SHORT $LN32@ec_GF2m_mo
	push	eax
	push	ebp
	call	_bn_expand2
	add	esp, 8
$LN32@ec_GF2m_mo:
; Line 302
	mov	eax, DWORD PTR [esi+76]
	cmp	eax, DWORD PTR [ebx+8]
	jle	SHORT $LN34@ec_GF2m_mo
	push	eax
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN34@ec_GF2m_mo:
; Line 303
	mov	eax, DWORD PTR _r$[esp+28]
	mov	ecx, DWORD PTR [esi+76]
	add	eax, 24					; 00000018H
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN36@ec_GF2m_mo
	push	ecx
	push	eax
	call	_bn_expand2
	add	esp, 8
$LN36@ec_GF2m_mo:
; Line 305
	mov	ecx, DWORD PTR _point$[esp+28]
	lea	eax, DWORD PTR [esi+92]
	push	eax
	add	ecx, 4
	push	ecx
	push	edi
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$53
; Line 307
	push	1
	push	ebp
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$err$53
; Line 309
	push	DWORD PTR _ctx$[esp+28]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _r$[esp+32]
	push	edi
	add	ecx, 24					; 00000018H
	mov	eax, DWORD PTR [eax+136]
	push	ecx
	push	esi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$53
; Line 311
	push	DWORD PTR _ctx$[esp+28]
	mov	ecx, DWORD PTR _r$[esp+32]
	mov	eax, DWORD PTR [esi]
	add	ecx, 24					; 00000018H
	push	ecx
	push	ebx
	push	esi
	mov	eax, DWORD PTR [eax+136]
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$53
; Line 313
	lea	eax, DWORD PTR [esi+136]
	push	eax
	push	ebx
	push	ebx
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$53
; Line 317
	mov	edx, DWORD PTR _scalar$[esp+28]
; Line 318
	mov	ebx, -2147483648			; 80000000H
	mov	ecx, DWORD PTR [edx+4]
; Line 319
	mov	eax, DWORD PTR [edx]
	dec	ecx
	mov	DWORD PTR _i$1$[esp+32], ecx
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 320
	test	eax, eax
	js	SHORT $LN3@ec_GF2m_mo
	npad	7
$LL2@ec_GF2m_mo:
; Line 321
	shr	ebx, 1
	test	eax, ebx
	je	SHORT $LL2@ec_GF2m_mo
$LN3@ec_GF2m_mo:
; Line 322
	shr	ebx, 1
; Line 324
	jne	SHORT $LN19@ec_GF2m_mo
; Line 325
	dec	ecx
; Line 326
	mov	ebx, -2147483648			; 80000000H
	mov	DWORD PTR _i$1$[esp+32], ecx
$LN19@ec_GF2m_mo:
; Line 329
	test	ecx, ecx
	js	$LN5@ec_GF2m_mo
	npad	4
$LL6@ec_GF2m_mo:
; Line 330
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _word$2$[esp+32], eax
; Line 331
	test	ebx, ebx
	je	$LN8@ec_GF2m_mo
$LL7@ec_GF2m_mo:
; Line 332
	push	DWORD PTR [esi+76]
	mov	edi, eax
	mov	eax, DWORD PTR _r$[esp+32]
	add	eax, 4
	and	edi, ebx
	push	eax
	push	DWORD PTR _x1$1$[esp+40]
	push	edi
	call	_BN_consttime_swap
; Line 333
	push	DWORD PTR [esi+76]
	mov	eax, DWORD PTR _r$[esp+48]
	add	eax, 24					; 00000018H
	push	eax
	push	ebp
	push	edi
	call	_BN_consttime_swap
; Line 334
	push	DWORD PTR _ctx$[esp+60]
	mov	ecx, DWORD PTR _r$[esp+64]
	push	ebp
	push	DWORD PTR _x1$1$[esp+72]
	lea	eax, DWORD PTR [ecx+24]
	push	eax
	lea	eax, DWORD PTR [ecx+4]
	push	eax
	mov	eax, DWORD PTR _point$[esp+80]
	add	eax, 4
	push	eax
	push	esi
	call	_gf2m_Madd
	add	esp, 60					; 0000003cH
	test	eax, eax
	je	$err$53
; Line 336
	push	DWORD PTR _ctx$[esp+28]
	push	ebp
	push	DWORD PTR _x1$1$[esp+40]
	push	esi
	call	_gf2m_Mdouble
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$53
; Line 338
	push	DWORD PTR [esi+76]
	mov	eax, DWORD PTR _r$[esp+32]
	add	eax, 4
	push	eax
	push	DWORD PTR _x1$1$[esp+40]
	push	edi
	call	_BN_consttime_swap
; Line 339
	push	DWORD PTR [esi+76]
	mov	eax, DWORD PTR _r$[esp+48]
	add	eax, 24					; 00000018H
	push	eax
	push	ebp
	push	edi
	call	_BN_consttime_swap
	mov	eax, DWORD PTR _word$2$[esp+64]
	add	esp, 32					; 00000020H
; Line 340
	shr	ebx, 1
	jne	$LL7@ec_GF2m_mo
	mov	ecx, DWORD PTR _i$1$[esp+32]
	mov	edx, DWORD PTR _scalar$[esp+28]
$LN8@ec_GF2m_mo:
; Line 329
	sub	ecx, 1
; Line 342
	mov	ebx, -2147483648			; 80000000H
	mov	DWORD PTR _i$1$[esp+32], ecx
	jns	$LL6@ec_GF2m_mo
	mov	edi, DWORD PTR _x1$1$[esp+32]
$LN5@ec_GF2m_mo:
; Line 346
	push	DWORD PTR _ctx$[esp+28]
	mov	ecx, DWORD PTR _r$[esp+32]
	lea	eax, DWORD PTR [ecx+24]
	push	eax
	lea	ebx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _point$[esp+36]
	push	ebx
	push	ebp
	push	edi
	lea	eax, DWORD PTR [ecx+24]
	push	eax
	lea	eax, DWORD PTR [ecx+4]
	push	eax
	push	esi
	call	_gf2m_Mxy
	add	esp, 32					; 00000020H
; Line 347
	test	eax, eax
	je	SHORT $err$53
; Line 350
	mov	ebp, DWORD PTR _r$[esp+28]
	cmp	eax, 1
	jne	SHORT $LN24@ec_GF2m_mo
	push	ebp
	push	esi
	call	_EC_POINT_set_to_infinity
	add	esp, 8
	test	eax, eax
	je	SHORT $err$53
; Line 352
	jmp	SHORT $LN25@ec_GF2m_mo
$LN24@ec_GF2m_mo:
; Line 353
	lea	eax, DWORD PTR [ebp+44]
	push	1
	push	eax
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	SHORT $err$53
; Line 355
	mov	DWORD PTR [ebp+64], 1
$LN25@ec_GF2m_mo:
; Line 359
	push	0
	push	ebx
	call	_BN_set_negative
; Line 360
	lea	eax, DWORD PTR [ebp+24]
	push	0
	push	eax
	call	_BN_set_negative
	add	esp, 16					; 00000010H
; Line 362
	mov	DWORD PTR _ret$1$[esp+32], 1
$err$53:
; Line 365
	push	DWORD PTR _ctx$[esp+28]
	call	_BN_CTX_end
; Line 366
	mov	eax, DWORD PTR _ret$1$[esp+36]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 367
	add	esp, 16					; 00000010H
	ret	0
$LN11@ec_GF2m_mo:
; Line 281
	push	ebx
	push	esi
	call	_EC_POINT_set_to_infinity
	add	esp, 8
	pop	esi
	pop	ebp
	pop	ebx
; Line 367
	add	esp, 16					; 00000010H
	ret	0
_ec_GF2m_montgomery_point_multiply ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gf2m_Mxy
_TEXT	SEGMENT
_ret$1$ = -12						; size = 4
_t4$1$ = -8						; size = 4
_t5$1$ = -4						; size = 4
_group$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
_t3$1$ = 24						; size = 4
_z1$ = 24						; size = 4
_x2$ = 28						; size = 4
_z2$ = 32						; size = 4
_ctx$ = 36						; size = 4
_gf2m_Mxy PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 176
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebp
; Line 180
	mov	ebp, DWORD PTR _z1$[esp+12]
	mov	DWORD PTR _ret$1$[esp+16], 0
	cmp	DWORD PTR [ebp+4], 0
	jne	SHORT $LN2@gf2m_Mxy
; Line 181
	push	0
	push	DWORD PTR _x2$[esp+16]
	call	_BN_set_word
; Line 182
	push	0
	push	DWORD PTR _z2$[esp+24]
	call	_BN_set_word
	add	esp, 16					; 00000010H
; Line 183
	mov	eax, 1
	pop	ebp
; Line 251
	add	esp, 12					; 0000000cH
	ret	0
$LN2@gf2m_Mxy:
	push	esi
	push	edi
; Line 186
	mov	edi, DWORD PTR _z2$[esp+20]
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN3@gf2m_Mxy
; Line 187
	mov	esi, DWORD PTR _x$[esp+20]
	push	esi
	push	DWORD PTR _x2$[esp+24]
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@gf2m_Mxy
	pop	edi
	pop	esi
	pop	ebp
; Line 251
	add	esp, 12					; 0000000cH
	ret	0
$LN4@gf2m_Mxy:
; Line 189
	push	DWORD PTR _y$[esp+20]
	push	esi
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	and	eax, 2
	pop	edi
	pop	esi
	pop	ebp
; Line 251
	add	esp, 12					; 0000000cH
	ret	0
$LN3@gf2m_Mxy:
	push	ebx
; Line 195
	mov	ebx, DWORD PTR _ctx$[esp+24]
	push	ebx
	call	_BN_CTX_start
; Line 196
	push	ebx
	call	_BN_CTX_get
; Line 197
	push	ebx
	mov	DWORD PTR _t3$1$[esp+36], eax
	call	_BN_CTX_get
; Line 198
	push	ebx
	mov	DWORD PTR _t4$1$[esp+44], eax
	call	_BN_CTX_get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _t5$1$[esp+28], eax
; Line 199
	test	eax, eax
	je	$err$30
; Line 202
	push	1
	push	eax
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$err$30
; Line 205
	mov	esi, DWORD PTR _group$[esp+24]
	push	ebx
	push	edi
	push	ebp
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _t3$1$[esp+36]
	push	esi
	mov	eax, DWORD PTR [eax+132]
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 208
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR _x$[esp+28]
	mov	eax, DWORD PTR [eax+132]
	push	ebp
	push	ebp
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 210
	push	DWORD PTR _x1$[esp+24]
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$30
; Line 212
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR _x$[esp+28]
	mov	eax, DWORD PTR [eax+132]
	push	edi
	push	edi
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 214
	mov	ecx, DWORD PTR _x1$[esp+24]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ecx
	push	edi
	mov	eax, DWORD PTR [eax+132]
	push	ecx
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 216
	push	DWORD PTR _x2$[esp+24]
	push	edi
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$30
; Line 219
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+132]
	push	edi
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 221
	mov	eax, DWORD PTR [esi]
	mov	ebp, DWORD PTR _t4$1$[esp+28]
	push	ebx
	push	DWORD PTR _x$[esp+28]
	mov	eax, DWORD PTR [eax+136]
	push	ebp
	push	esi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$30
; Line 223
	push	DWORD PTR _y$[esp+24]
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$30
; Line 225
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR _t3$1$[esp+28]
	mov	eax, DWORD PTR [eax+132]
	push	ebp
	push	ebp
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 227
	push	edi
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$30
; Line 230
	mov	ecx, DWORD PTR _t3$1$[esp+24]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR _x$[esp+28]
	mov	eax, DWORD PTR [eax+132]
	push	ecx
	push	ecx
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 232
	mov	ecx, DWORD PTR _t3$1$[esp+24]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ecx
	push	DWORD PTR _t5$1$[esp+36]
	mov	eax, DWORD PTR [eax+140]
	push	ecx
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$30
; Line 234
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	DWORD PTR _t3$1$[esp+32]
	mov	eax, DWORD PTR [eax+132]
	push	ebp
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$30
; Line 236
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	DWORD PTR _t3$1$[esp+28]
	push	DWORD PTR _x1$[esp+32]
	mov	eax, DWORD PTR [eax+132]
	push	DWORD PTR _x2$[esp+36]
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$30
; Line 238
	push	DWORD PTR _x$[esp+24]
	push	DWORD PTR _x2$[esp+28]
	push	edi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$30
; Line 241
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+132]
	push	edi
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $err$30
; Line 243
	push	DWORD PTR _y$[esp+24]
	push	edi
	push	edi
	call	_BN_GF2m_add
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	edx, 2
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+28], ecx
$err$30:
; Line 249
	push	ebx
	call	_BN_CTX_end
; Line 250
	mov	eax, DWORD PTR _ret$1$[esp+32]
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 251
	add	esp, 12					; 0000000cH
	ret	0
_gf2m_Mxy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gf2m_Madd
_TEXT	SEGMENT
_t2$1$ = -12						; size = 4
_ret$1$ = -8						; size = 4
_t1$1$ = -4						; size = 4
_group$ = 8						; size = 4
_x$ = 12						; size = 4
_x1$ = 16						; size = 4
_z1$ = 20						; size = 4
_x2$ = 24						; size = 4
_z2$ = 28						; size = 4
_ctx$ = 32						; size = 4
_gf2m_Madd PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 128
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebx
	push	esi
; Line 133
	mov	esi, DWORD PTR _ctx$[esp+16]
	push	esi
	mov	DWORD PTR _ret$1$[esp+24], 0
	call	_BN_CTX_start
; Line 134
	push	esi
	call	_BN_CTX_get
	mov	ebx, eax
; Line 135
	push	esi
	mov	DWORD PTR _t1$1$[esp+32], ebx
	call	_BN_CTX_get
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t2$1$[esp+20], eax
; Line 136
	test	eax, eax
	je	$err$15
; Line 139
	push	DWORD PTR _x$[esp+16]
	push	ebx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$err$15
; Line 141
	push	ebp
	mov	ebp, DWORD PTR _x1$[esp+20]
	push	edi
	mov	edi, DWORD PTR _group$[esp+24]
	push	esi
	push	DWORD PTR _z2$[esp+28]
	mov	eax, DWORD PTR [edi]
	push	ebp
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+132]
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN12@gf2m_Madd
; Line 143
	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR _z1$[esp+24]
	push	esi
	push	DWORD PTR _x2$[esp+28]
	mov	eax, DWORD PTR [eax+132]
	push	ebx
	push	ebx
	push	edi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN12@gf2m_Madd
; Line 145
	mov	eax, DWORD PTR [edi]
	push	esi
	push	ebx
	push	ebp
	push	DWORD PTR _t2$1$[esp+40]
	mov	eax, DWORD PTR [eax+132]
	push	edi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN12@gf2m_Madd
; Line 147
	push	ebp
	push	ebx
	push	ebx
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN12@gf2m_Madd
; Line 149
	mov	eax, DWORD PTR [edi]
	push	esi
	push	ebx
	push	ebx
	mov	eax, DWORD PTR [eax+136]
	push	edi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN12@gf2m_Madd
; Line 151
	mov	eax, DWORD PTR [edi]
	push	esi
	push	DWORD PTR _t1$1$[esp+32]
	mov	eax, DWORD PTR [eax+132]
	push	ebx
	push	ebp
	push	edi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN12@gf2m_Madd
; Line 153
	push	DWORD PTR _t2$1$[esp+28]
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+28], ecx
$LN12@gf2m_Madd:
	pop	edi
	pop	ebp
$err$15:
; Line 159
	push	esi
	call	_BN_CTX_end
; Line 160
	mov	eax, DWORD PTR _ret$1$[esp+24]
	add	esp, 4
	pop	esi
	pop	ebx
; Line 161
	add	esp, 12					; 0000000cH
	ret	0
_gf2m_Madd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gf2m_Mdouble
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_group$ = 8						; size = 4
_x$ = 12						; size = 4
_z$ = 16						; size = 4
_ctx$ = 20						; size = 4
_gf2m_Mdouble PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 86
	mov	eax, 4
	call	__chkstk
	push	ebx
	push	esi
; Line 91
	mov	esi, DWORD PTR _ctx$[esp+8]
	push	esi
	mov	DWORD PTR _ret$1$[esp+16], 0
	call	_BN_CTX_start
; Line 92
	push	esi
	call	_BN_CTX_get
	mov	ebx, eax
	add	esp, 8
; Line 93
	test	ebx, ebx
	je	$err$14
; Line 96
	push	ebp
	mov	ebp, DWORD PTR _x$[esp+12]
	push	edi
	mov	edi, DWORD PTR _group$[esp+16]
	push	esi
	push	ebp
	push	ebp
	mov	eax, DWORD PTR [edi]
	push	edi
	mov	eax, DWORD PTR [eax+136]
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN11@gf2m_Mdoub
; Line 98
	mov	eax, DWORD PTR [edi]
	push	esi
	push	DWORD PTR _z$[esp+20]
	mov	eax, DWORD PTR [eax+136]
	push	ebx
	push	edi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@gf2m_Mdoub
; Line 100
	mov	eax, DWORD PTR [edi]
	push	esi
	push	ebx
	push	ebp
	push	DWORD PTR _z$[esp+28]
	mov	eax, DWORD PTR [eax+132]
	push	edi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN11@gf2m_Mdoub
; Line 102
	mov	eax, DWORD PTR [edi]
	push	esi
	push	ebp
	push	ebp
	mov	eax, DWORD PTR [eax+136]
	push	edi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@gf2m_Mdoub
; Line 104
	mov	eax, DWORD PTR [edi]
	push	esi
	push	ebx
	push	ebx
	mov	eax, DWORD PTR [eax+136]
	push	edi
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@gf2m_Mdoub
; Line 106
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [edi+136]
	push	esi
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+132]
	push	ebx
	push	edi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN11@gf2m_Mdoub
; Line 108
	push	ebx
	push	ebp
	push	ebp
	call	_BN_GF2m_add
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+20], ecx
$LN11@gf2m_Mdoub:
	pop	edi
	pop	ebp
$err$14:
; Line 114
	push	esi
	call	_BN_CTX_end
; Line 115
	mov	eax, DWORD PTR _ret$1$[esp+16]
	add	esp, 4
	pop	esi
	pop	ebx
; Line 116
	pop	ecx
	ret	0
_gf2m_Mdouble ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_have_precompute_mult
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_GF2m_have_precompute_mult PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 460
	jmp	_ec_wNAF_have_precompute_mult
_ec_GF2m_have_precompute_mult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_precompute_mult
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ctx$ = 12						; size = 4
_ec_GF2m_precompute_mult PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 455
	jmp	_ec_wNAF_precompute_mult
_ec_GF2m_precompute_mult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_GF2m_simple_mul
_TEXT	SEGMENT
_ret$1$ = -16						; size = 4
_i$1$ = -12						; size = 4
_new_ctx$1$ = -8					; size = 4
tv340 = -4						; size = 4
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_scalar$ = 16						; size = 4
_num$ = 20						; size = 4
_points$ = 24						; size = 4
_scalars$ = 28						; size = 4
_acc$1$ = 32						; size = 4
_ctx$ = 32						; size = 4
_ec_GF2m_simple_mul PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec2_mult.c
; Line 378
	mov	eax, 16					; 00000010H
	call	__chkstk
	push	ebx
; Line 385
	mov	ebx, DWORD PTR _ctx$[esp+16]
	xor	eax, eax
	mov	DWORD PTR _new_ctx$1$[esp+20], 0
	mov	DWORD PTR _ret$1$[esp+20], eax
	test	ebx, ebx
	jne	SHORT $LN6@ec_GF2m_si
; Line 386
	call	_BN_CTX_new
	mov	DWORD PTR _new_ctx$1$[esp+20], eax
	mov	ebx, eax
; Line 387
	test	eax, eax
	jne	SHORT $LN6@ec_GF2m_si
	pop	ebx
; Line 446
	add	esp, 16					; 00000010H
	ret	0
$LN6@ec_GF2m_si:
	push	ebp
; Line 398
	mov	ebp, DWORD PTR _num$[esp+20]
	push	esi
	mov	esi, DWORD PTR _group$[esp+24]
	push	edi
	mov	edi, DWORD PTR _scalar$[esp+28]
	test	edi, edi
	je	SHORT $LN9@ec_GF2m_si
	cmp	ebp, 1
	ja	$LN8@ec_GF2m_si
$LN9@ec_GF2m_si:
	cmp	ebp, 2
	ja	$LN8@ec_GF2m_si
	test	ebp, ebp
	jne	SHORT $LN7@ec_GF2m_si
	push	esi
	call	_EC_GROUP_have_precompute_mult
	add	esp, 4
	test	eax, eax
	jne	$LN8@ec_GF2m_si
$LN7@ec_GF2m_si:
; Line 403
	push	esi
	call	_EC_POINT_new
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	je	$LN37@ec_GF2m_si
; Line 405
	push	esi
	call	_EC_POINT_new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR _acc$1$[esp+28], edi
	test	edi, edi
	je	$err$41
; Line 408
	push	edi
	push	esi
	call	_EC_POINT_set_to_infinity
	add	esp, 8
	test	eax, eax
	je	$err$41
; Line 411
	mov	eax, DWORD PTR _scalar$[esp+28]
	test	eax, eax
	je	SHORT $LN17@ec_GF2m_si
; Line 412
	push	ebx
	push	DWORD PTR [esi+4]
	push	eax
	push	ebp
	push	esi
	call	_ec_GF2m_montgomery_point_multiply
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$41
; Line 415
	mov	eax, DWORD PTR _scalar$[esp+28]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN16@ec_GF2m_si
; Line 416
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	esi
	mov	eax, DWORD PTR [eax+96]
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$41
$LN16@ec_GF2m_si:
; Line 418
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+88]
	push	edi
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$41
$LN17@ec_GF2m_si:
; Line 422
	cmp	DWORD PTR _num$[esp+28], 0
	mov	DWORD PTR _i$1$[esp+32], 0
	jbe	SHORT $LN3@ec_GF2m_si
	mov	eax, DWORD PTR _points$[esp+28]
	mov	edi, DWORD PTR _scalars$[esp+28]
	sub	eax, edi
	mov	DWORD PTR tv340[esp+32], eax
	npad	3
$LL4@ec_GF2m_si:
; Line 423
	push	ebx
	push	DWORD PTR [eax+edi]
	push	DWORD PTR [edi]
	push	ebp
	push	esi
	call	_ec_GF2m_montgomery_point_multiply
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN36@ec_GF2m_si
; Line 426
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN20@ec_GF2m_si
; Line 427
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	esi
	mov	eax, DWORD PTR [eax+96]
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN36@ec_GF2m_si
$LN20@ec_GF2m_si:
; Line 429
	mov	ecx, DWORD PTR _acc$1$[esp+28]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	push	ecx
	mov	eax, DWORD PTR [eax+88]
	push	ecx
	push	esi
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN36@ec_GF2m_si
; Line 422
	mov	eax, DWORD PTR _i$1$[esp+32]
	add	edi, 4
	inc	eax
	cmp	eax, DWORD PTR _num$[esp+28]
	mov	DWORD PTR _i$1$[esp+32], eax
	mov	eax, DWORD PTR tv340[esp+32]
	jb	SHORT $LL4@ec_GF2m_si
	mov	edi, DWORD PTR _acc$1$[esp+28]
$LN3@ec_GF2m_si:
; Line 433
	push	edi
	push	DWORD PTR _r$[esp+32]
	call	_EC_POINT_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$41
; Line 436
	mov	DWORD PTR _ret$1$[esp+32], 1
	jmp	SHORT $err$41
$LN36@ec_GF2m_si:
	mov	edi, DWORD PTR _acc$1$[esp+28]
$err$41:
; Line 440
	push	ebp
	call	_EC_POINT_free
	add	esp, 4
; Line 441
	test	edi, edi
	je	SHORT $LN38@ec_GF2m_si
; Line 442
	push	edi
	call	_EC_POINT_free
	add	esp, 4
$LN38@ec_GF2m_si:
	mov	ebx, DWORD PTR _ret$1$[esp+32]
$LN24@ec_GF2m_si:
; Line 443
	mov	eax, DWORD PTR _new_ctx$1$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	test	eax, eax
	je	SHORT $LN25@ec_GF2m_si
; Line 444
	push	eax
	call	_BN_CTX_free
	add	esp, 4
$LN25@ec_GF2m_si:
; Line 445
	mov	eax, ebx
	pop	ebx
; Line 446
	add	esp, 16					; 00000010H
	ret	0
$LN8@ec_GF2m_si:
; Line 399
	push	ebx
	push	DWORD PTR _scalars$[esp+32]
	push	DWORD PTR _points$[esp+36]
	push	ebp
	push	edi
	push	DWORD PTR _r$[esp+48]
	push	esi
	call	_ec_wNAF_mul
	add	esp, 28					; 0000001cH
	mov	ebx, eax
	jmp	SHORT $LN24@ec_GF2m_si
$LN37@ec_GF2m_si:
	xor	ebx, ebx
	jmp	SHORT $LN24@ec_GF2m_si
_ec_GF2m_simple_mul ENDP
_TEXT	ENDS
END
