; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\idea\i_skey.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_idea_set_encrypt_key
PUBLIC	_idea_set_decrypt_key
; Function compile flags: /Ogtpy
;	COMDAT _inverse
_TEXT	SEGMENT
_xin$ = 8						; size = 4
_inverse PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\idea\i_skey.c
; Line 144
	push	esi
; Line 147
	mov	esi, DWORD PTR _xin$[esp]
	test	esi, esi
	jne	SHORT $LN5@inverse
; Line 170
	xor	eax, eax
	pop	esi
; Line 171
	ret	0
$LN5@inverse:
	push	ebx
	push	ebp
	push	edi
; Line 150
	mov	edi, 65537				; 00010001H
; Line 152
	mov	ecx, 1
; Line 153
	xor	ebp, ebp
	npad	4
$LL4@inverse:
; Line 156
	mov	eax, edi
	cdq
	idiv	esi
	mov	ebx, edx
; Line 157
	sub	edi, ebx
	mov	eax, edi
	cdq
	idiv	esi
; Line 158
	test	ebx, ebx
	je	SHORT $LN15@inverse
; Line 165
	imul	eax, ecx
	mov	edx, ecx
	mov	ecx, ebp
	mov	edi, esi
	mov	esi, ebx
; Line 166
	mov	ebp, edx
	sub	ecx, eax
; Line 168
	jmp	SHORT $LL4@inverse
$LN15@inverse:
; Line 160
	lea	eax, DWORD PTR [ecx+65537]
	pop	edi
	pop	ebp
	pop	ebx
	test	ecx, ecx
	js	SHORT $LN3@inverse
; Line 170
	mov	eax, ecx
$LN3@inverse:
	pop	esi
; Line 171
	ret	0
_inverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _idea_set_decrypt_key
_TEXT	SEGMENT
_ek$ = 8						; size = 4
_dk$ = 12						; size = 4
_idea_set_decrypt_key PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\idea\i_skey.c
; Line 114
	push	ebx
	push	ebp
; Line 118
	mov	ebp, DWORD PTR _dk$[esp+4]
	push	esi
	push	edi
; Line 119
	mov	edi, DWORD PTR _ek$[esp+12]
	mov	esi, ebp
	add	edi, 192				; 000000c0H
; Line 120
	xor	ebx, ebx
$LL4@idea_set_d:
; Line 121
	push	DWORD PTR [edi]
	call	_inverse
	mov	DWORD PTR [esi], eax
; Line 122
	mov	eax, DWORD PTR [edi+8]
	neg	eax
	movzx	eax, ax
	mov	DWORD PTR [esi+4], eax
; Line 123
	mov	eax, DWORD PTR [edi+4]
	neg	eax
	movzx	eax, ax
	mov	DWORD PTR [esi+8], eax
; Line 124
	push	DWORD PTR [edi+12]
	call	_inverse
	add	esp, 8
	mov	DWORD PTR [esi+12], eax
; Line 125
	cmp	ebx, 8
	je	SHORT $LN8@idea_set_d
; Line 128
	mov	eax, DWORD PTR [edi-8]
	sub	edi, 24					; 00000018H
	mov	DWORD PTR [esi+16], eax
	inc	ebx
; Line 129
	mov	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
	add	esi, 24					; 00000018H
	cmp	ebx, 9
	jl	SHORT $LL4@idea_set_d
$LN8@idea_set_d:
; Line 133
	mov	ecx, DWORD PTR [ebp+4]
; Line 134
	mov	eax, DWORD PTR [ebp+8]
	pop	edi
	mov	DWORD PTR [ebp+4], eax
; Line 138
	mov	eax, DWORD PTR [ebp+200]
	mov	DWORD PTR [ebp+8], ecx
	mov	ecx, DWORD PTR [ebp+196]
	pop	esi
	mov	DWORD PTR [ebp+196], eax
; Line 139
	mov	DWORD PTR [ebp+200], ecx
	pop	ebp
	pop	ebx
; Line 140
	ret	0
_idea_set_decrypt_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _idea_set_encrypt_key
_TEXT	SEGMENT
_i$1$ = 8						; size = 4
_key$ = 8						; size = 4
_ks$ = 12						; size = 4
_idea_set_encrypt_key PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\idea\i_skey.c
; Line 79
	mov	edx, DWORD PTR _key$[esp-4]
	push	ebx
	push	ebp
	push	esi
	movzx	eax, BYTE PTR [edx]
	mov	esi, DWORD PTR _ks$[esp+8]
	shl	eax, 8
; Line 81
	lea	ebx, DWORD PTR [esi+8]
	push	edi
; Line 90
	mov	DWORD PTR _i$1$[esp+12], 0
	mov	DWORD PTR [esi], eax
	movzx	eax, BYTE PTR [edx+1]
	or	DWORD PTR [esi], eax
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	mov	DWORD PTR [esi+4], eax
	movzx	eax, BYTE PTR [edx+3]
	or	DWORD PTR [esi+4], eax
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 8
	mov	DWORD PTR [ebx], eax
	movzx	eax, BYTE PTR [edx+5]
	or	DWORD PTR [ebx], eax
	movzx	eax, BYTE PTR [edx+6]
	shl	eax, 8
	mov	DWORD PTR [esi+12], eax
	movzx	eax, BYTE PTR [edx+7]
	or	DWORD PTR [esi+12], eax
	movzx	eax, BYTE PTR [edx+8]
	shl	eax, 8
	mov	DWORD PTR [esi+16], eax
	movzx	eax, BYTE PTR [edx+9]
	or	DWORD PTR [esi+16], eax
	movzx	eax, BYTE PTR [edx+10]
	shl	eax, 8
	mov	DWORD PTR [esi+20], eax
	movzx	eax, BYTE PTR [edx+11]
	or	DWORD PTR [esi+20], eax
	movzx	eax, BYTE PTR [edx+12]
	shl	eax, 8
	mov	DWORD PTR [esi+24], eax
	movzx	eax, BYTE PTR [edx+13]
	or	DWORD PTR [esi+24], eax
	movzx	ecx, BYTE PTR [edx+14]
	shl	ecx, 8
	mov	DWORD PTR [esi+28], ecx
	movzx	eax, BYTE PTR [edx+15]
	or	eax, ecx
	mov	DWORD PTR [esi+28], eax
	lea	eax, DWORD PTR [esi+32]
	npad	1
$LL4@idea_set_e:
; Line 92
	mov	esi, DWORD PTR [ebx]
; Line 93
	mov	edx, esi
	mov	ebp, DWORD PTR [ebx-4]
	mov	ecx, ebp
	shl	ecx, 9
	shr	edx, 7
	or	edx, ecx
; Line 95
	shl	esi, 9
	movzx	ecx, dx
	mov	DWORD PTR [eax], ecx
	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, edi
	shr	ecx, 7
	or	ecx, esi
; Line 97
	shl	edi, 9
	movzx	ecx, cx
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [ebx+8]
	mov	ecx, edx
	shr	ecx, 7
	or	edi, ecx
; Line 99
	shl	edx, 9
	movzx	ecx, di
	mov	DWORD PTR [eax+8], ecx
	mov	esi, DWORD PTR [ebx+12]
	mov	ecx, esi
	shr	ecx, 7
	or	ecx, edx
; Line 105
	mov	edi, DWORD PTR _i$1$[esp+12]
	movzx	ecx, cx
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [ebx+16]
	mov	ecx, edx
	shr	ecx, 7
	shl	esi, 9
	or	esi, ecx
	shl	edx, 9
	movzx	ecx, si
	mov	DWORD PTR [eax+16], ecx
	mov	esi, DWORD PTR [ebx+20]
	mov	ecx, esi
	shr	ecx, 7
	or	ecx, edx
	movzx	ecx, cx
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR [ebx-8]
	cmp	edi, 5
	jge	SHORT $LN8@idea_set_e
; Line 107
	mov	ecx, edx
	shl	esi, 9
	shr	ecx, 7
	inc	edi
	or	esi, ecx
; Line 108
	shl	edx, 9
	shr	ebp, 7
; Line 109
	add	ebx, 32					; 00000020H
	movzx	ecx, si
	or	edx, ebp
	mov	DWORD PTR [eax+24], ecx
	movzx	ecx, dx
	mov	DWORD PTR [eax+28], ecx
	add	eax, 32					; 00000020H
	mov	DWORD PTR _i$1$[esp+12], edi
	cmp	edi, 6
	jl	$LL4@idea_set_e
$LN8@idea_set_e:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 111
	ret	0
_idea_set_encrypt_key ENDP
_TEXT	ENDS
END
