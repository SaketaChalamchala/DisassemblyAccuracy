; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\wrap128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_default_iv DB	0a6H
	DB	0a6H
	DB	0a6H
	DB	0a6H
	DB	0a6H
	DB	0a6H
	DB	0a6H
	DB	0a6H
CONST	ENDS
PUBLIC	_CRYPTO_128_wrap
PUBLIC	_CRYPTO_128_unwrap
EXTRN	__imp__memmove:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_128_unwrap
_TEXT	SEGMENT
_inlen$GSCopy$1$ = -40					; size = 4
tv275 = -36						; size = 4
_block$GSCopy$1$ = -32					; size = 4
tv274 = -28						; size = 4
_out$GSCopy$1$ = -24					; size = 4
_B$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_iv$ = 12						; size = 4
_out$ = 16						; size = 4
_in$ = 20						; size = 4
_inlen$ = 24						; size = 4
_block$ = 28						; size = 4
_CRYPTO_128_unwrap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\wrap128.c
; Line 107
	mov	eax, 40					; 00000028H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+40], eax
	mov	ecx, DWORD PTR _inlen$[esp+36]
	mov	eax, DWORD PTR _block$[esp+36]
; Line 110
	sub	ecx, 8
	mov	edx, DWORD PTR _in$[esp+36]
	mov	DWORD PTR _block$GSCopy$1$[esp+40], eax
	mov	DWORD PTR _inlen$GSCopy$1$[esp+40], ecx
	push	ebp
	mov	ebp, DWORD PTR _key$[esp+40]
	push	esi
	mov	esi, DWORD PTR _out$[esp+44]
	mov	DWORD PTR _out$GSCopy$1$[esp+48], esi
; Line 111
	test	cl, 7
	jne	$LN9@CRYPTO_128
	lea	eax, DWORD PTR [ecx-16]
	cmp	eax, 2147483632				; 7ffffff0H
	ja	$LN9@CRYPTO_128
; Line 114
	mov	eax, ecx
	shr	eax, 3
	push	ebx
	push	edi
; Line 116
	push	ecx
	lea	ebx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _B$[esp+60], eax
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _B$[esp+64], eax
	lea	eax, DWORD PTR [edx+8]
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	mov	edx, DWORD PTR _inlen$GSCopy$1$[esp+68]
	lea	ecx, DWORD PTR [esi-8]
	add	esp, 12					; 0000000cH
	mov	eax, 6
	add	ecx, edx
	mov	DWORD PTR tv275[esp+56], eax
	mov	DWORD PTR tv274[esp+56], ecx
	npad	2
$LL4@CRYPTO_128:
; Line 118
	mov	esi, ecx
; Line 119
	test	edx, edx
	je	SHORT $LN2@CRYPTO_128
; Line 118
	lea	edi, DWORD PTR [edx-1]
	shr	edi, 3
	inc	edi
	npad	3
$LL7@CRYPTO_128:
; Line 120
	xor	BYTE PTR _B$[esp+63], bl
; Line 121
	cmp	ebx, 255				; 000000ffH
	jbe	SHORT $LN10@CRYPTO_128
; Line 122
	mov	eax, ebx
	shr	eax, 8
	xor	BYTE PTR _B$[esp+62], al
; Line 123
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	xor	BYTE PTR _B$[esp+61], al
; Line 124
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	xor	BYTE PTR _B$[esp+60], al
$LN10@CRYPTO_128:
; Line 126
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _B$[esp+64], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _B$[esp+68], eax
; Line 127
	lea	eax, DWORD PTR _B$[esp+56]
	push	ebp
	push	eax
	push	eax
	call	DWORD PTR _block$GSCopy$1$[esp+68]
; Line 128
	mov	eax, DWORD PTR _B$[esp+76]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
	dec	ebx
	mov	eax, DWORD PTR _B$[esp+68]
	mov	DWORD PTR [esi+4], eax
	sub	esi, 8
	sub	edi, 1
	jne	SHORT $LL7@CRYPTO_128
	mov	edx, DWORD PTR _inlen$GSCopy$1$[esp+56]
	mov	eax, DWORD PTR tv275[esp+56]
	mov	ecx, DWORD PTR tv274[esp+56]
$LN2@CRYPTO_128:
; Line 117
	sub	eax, 1
	mov	DWORD PTR tv275[esp+56], eax
	jne	SHORT $LL4@CRYPTO_128
; Line 131
	mov	eax, DWORD PTR _iv$[esp+52]
	mov	esi, OFFSET _default_iv
	test	eax, eax
	pop	edi
	cmovne	esi, eax
; Line 133
	lea	eax, DWORD PTR _B$[esp+52]
	mov	ecx, DWORD PTR [eax]
	pop	ebx
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $LN22@CRYPTO_128
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR [esi+4]
	jne	SHORT $LN22@CRYPTO_128
; Line 137
	pop	esi
	mov	eax, edx
	pop	ebp
; Line 138
	mov	ecx, DWORD PTR __$ArrayPad$[esp+40]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	ret	0
$LN22@CRYPTO_128:
; Line 134
	push	edx
	push	DWORD PTR _out$GSCopy$1$[esp+52]
	call	_OPENSSL_cleanse
	add	esp, 8
$LN9@CRYPTO_128:
; Line 138
	mov	ecx, DWORD PTR __$ArrayPad$[esp+48]
	xor	eax, eax
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	ret	0
_CRYPTO_128_unwrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_128_wrap
_TEXT	SEGMENT
tv294 = -36						; size = 4
_block$GSCopy$1$ = -32					; size = 4
tv292 = -28						; size = 4
_out$GSCopy$1$ = -24					; size = 4
_B$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_iv$ = 12						; size = 4
_out$ = 16						; size = 4
_in$ = 20						; size = 4
_inlen$ = 24						; size = 4
_block$ = 28						; size = 4
_CRYPTO_128_wrap PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\wrap128.c
; Line 72
	mov	eax, 36					; 00000024H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+36], eax
; Line 75
	mov	ecx, DWORD PTR _inlen$[esp+32]
	mov	eax, DWORD PTR _block$[esp+32]
	mov	edx, DWORD PTR _in$[esp+32]
	mov	DWORD PTR _block$GSCopy$1$[esp+36], eax
	push	ebp
	mov	ebp, DWORD PTR _key$[esp+36]
	push	esi
	mov	esi, DWORD PTR _out$[esp+40]
	mov	DWORD PTR _out$GSCopy$1$[esp+44], esi
	test	cl, 7
	jne	$LN9@CRYPTO_128
	lea	eax, DWORD PTR [ecx-8]
	cmp	eax, 2147483640				; 7ffffff8H
	ja	$LN9@CRYPTO_128
; Line 79
	push	ebx
	push	edi
	push	ecx
	add	esi, 8
	mov	ebx, 1
	push	edx
	push	esi
	mov	DWORD PTR tv292[esp+64], esi
	call	DWORD PTR __imp__memmove
; Line 80
	mov	eax, DWORD PTR _iv$[esp+60]
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	ecx, OFFSET _default_iv
	cmovne	ecx, eax
; Line 83
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _B$[esp+52], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _inlen$[esp+48]
	mov	DWORD PTR _B$[esp+56], eax
	mov	eax, 6
	mov	DWORD PTR tv294[esp+52], eax
	npad	4
$LL4@CRYPTO_128:
; Line 87
	test	ecx, ecx
	je	SHORT $LN2@CRYPTO_128
; Line 86
	lea	edi, DWORD PTR [ecx-1]
	shr	edi, 3
	inc	edi
	npad	5
$LL7@CRYPTO_128:
; Line 88
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _B$[esp+60], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _B$[esp+64], eax
; Line 89
	lea	eax, DWORD PTR _B$[esp+52]
	push	ebp
	push	eax
	push	eax
	call	DWORD PTR _block$GSCopy$1$[esp+64]
; Line 90
	xor	BYTE PTR _B$[esp+71], bl
	add	esp, 12					; 0000000cH
; Line 91
	cmp	ebx, 255				; 000000ffH
	jbe	SHORT $LN11@CRYPTO_128
; Line 92
	mov	eax, ebx
	shr	eax, 8
	xor	BYTE PTR _B$[esp+58], al
; Line 93
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	xor	BYTE PTR _B$[esp+57], al
; Line 94
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	xor	BYTE PTR _B$[esp+56], al
$LN11@CRYPTO_128:
; Line 96
	mov	eax, DWORD PTR _B$[esp+60]
	inc	ebx
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _B$[esp+64]
	mov	DWORD PTR [esi+4], eax
	add	esi, 8
	sub	edi, 1
	jne	SHORT $LL7@CRYPTO_128
	mov	ecx, DWORD PTR _inlen$[esp+48]
	mov	eax, DWORD PTR tv294[esp+52]
$LN2@CRYPTO_128:
; Line 85
	mov	esi, DWORD PTR tv292[esp+52]
	sub	eax, 1
	mov	DWORD PTR tv294[esp+52], eax
	jne	SHORT $LL4@CRYPTO_128
; Line 99
	mov	edx, DWORD PTR _out$GSCopy$1$[esp+52]
	mov	eax, DWORD PTR _B$[esp+52]
	pop	edi
	pop	ebx
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _B$[esp+48]
	pop	esi
	mov	DWORD PTR [edx+4], eax
; Line 100
	lea	eax, DWORD PTR [ecx+8]
	pop	ebp
; Line 101
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
$LN9@CRYPTO_128:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+44]
	xor	eax, eax
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	ret	0
_CRYPTO_128_wrap ENDP
_TEXT	ENDS
END
