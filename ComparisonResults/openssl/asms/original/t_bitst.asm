; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\asn1\t_bitst.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ASN1_BIT_STRING_name_print
PUBLIC	_ASN1_BIT_STRING_num_asc
PUBLIC	_ASN1_BIT_STRING_set_asc
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_03HIJPJGOM@?$CF?$CKs?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_BIO_puts:PROC
EXTRN	_BIO_printf:PROC
EXTRN	_ASN1_BIT_STRING_set_bit:PROC
EXTRN	_ASN1_BIT_STRING_get_bit:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@
CONST	SEGMENT
??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ DB '%*s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_set_asc
_TEXT	SEGMENT
_bs$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_tbl$ = 20						; size = 4
_ASN1_BIT_STRING_set_asc PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\t_bitst.c
; Line 87
	push	DWORD PTR _tbl$[esp-4]
	push	DWORD PTR _name$[esp]
	call	_ASN1_BIT_STRING_num_asc
	mov	ecx, eax
	add	esp, 8
; Line 88
	test	ecx, ecx
	jns	SHORT $LN2@ASN1_BIT_S
$LN6@ASN1_BIT_S:
; Line 89
	xor	eax, eax
; Line 95
	ret	0
$LN2@ASN1_BIT_S:
; Line 90
	mov	eax, DWORD PTR _bs$[esp-4]
	test	eax, eax
	je	SHORT $LN4@ASN1_BIT_S
; Line 91
	push	DWORD PTR _value$[esp-4]
	push	ecx
	push	eax
	call	_ASN1_BIT_STRING_set_bit
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@ASN1_BIT_S
$LN4@ASN1_BIT_S:
; Line 94
	mov	eax, 1
; Line 95
	ret	0
_ASN1_BIT_STRING_set_asc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_num_asc
_TEXT	SEGMENT
_name$ = 8						; size = 4
_tbl$ = 12						; size = 4
_ASN1_BIT_STRING_num_asc PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\t_bitst.c
; Line 98
	push	esi
; Line 100
	mov	esi, DWORD PTR _tbl$[esp]
	push	edi
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN3@ASN1_BIT_S
	mov	edi, DWORD PTR _name$[esp+4]
$LL4@ASN1_BIT_S:
; Line 101
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, edi
$LL13@ASN1_BIT_S:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN14@ASN1_BIT_S
	test	dl, dl
	je	SHORT $LN15@ASN1_BIT_S
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN14@ASN1_BIT_S
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL13@ASN1_BIT_S
$LN15@ASN1_BIT_S:
	xor	eax, eax
	jmp	SHORT $LN16@ASN1_BIT_S
$LN14@ASN1_BIT_S:
	sbb	eax, eax
	or	eax, 1
$LN16@ASN1_BIT_S:
	test	eax, eax
	je	SHORT $LN9@ASN1_BIT_S
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, edi
$LL17@ASN1_BIT_S:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN18@ASN1_BIT_S
	test	dl, dl
	je	SHORT $LN19@ASN1_BIT_S
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN18@ASN1_BIT_S
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL17@ASN1_BIT_S
$LN19@ASN1_BIT_S:
	xor	eax, eax
	jmp	SHORT $LN20@ASN1_BIT_S
$LN18@ASN1_BIT_S:
	sbb	eax, eax
	or	eax, 1
$LN20@ASN1_BIT_S:
	test	eax, eax
	je	SHORT $LN9@ASN1_BIT_S
; Line 100
	add	esi, 12					; 0000000cH
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LL4@ASN1_BIT_S
$LN3@ASN1_BIT_S:
	pop	edi
; Line 104
	or	eax, -1
	pop	esi
; Line 105
	ret	0
$LN9@ASN1_BIT_S:
; Line 102
	mov	eax, DWORD PTR [esi]
	pop	edi
	pop	esi
; Line 105
	ret	0
_ASN1_BIT_STRING_num_asc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_BIT_STRING_name_print
_TEXT	SEGMENT
_out$ = 8						; size = 4
_bs$ = 12						; size = 4
_tbl$ = 16						; size = 4
_indent$ = 20						; size = 4
_ASN1_BIT_STRING_name_print PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\t_bitst.c
; Line 67
	push	ebx
	push	esi
	push	edi
; Line 70
	mov	edi, DWORD PTR _out$[esp+8]
	mov	bl, 1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR _indent$[esp+12]
	push	OFFSET ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@
	push	edi
	call	_BIO_printf
; Line 71
	mov	esi, DWORD PTR _tbl$[esp+24]
	add	esp, 16					; 00000010H
	add	esi, 4
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN3@ASN1_BIT_S
; Line 69
	push	ebp
	mov	ebp, DWORD PTR _bs$[esp+12]
$LL4@ASN1_BIT_S:
; Line 72
	push	DWORD PTR [esi-4]
	push	ebp
	call	_ASN1_BIT_STRING_get_bit
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ASN1_BIT_S
; Line 73
	test	bl, bl
	jne	SHORT $LN6@ASN1_BIT_S
; Line 74
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
$LN6@ASN1_BIT_S:
; Line 75
	push	DWORD PTR [esi]
	push	edi
	call	_BIO_puts
	add	esp, 8
; Line 76
	xor	bl, bl
$LN2@ASN1_BIT_S:
; Line 71
	add	esi, 12					; 0000000cH
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LL4@ASN1_BIT_S
	pop	ebp
$LN3@ASN1_BIT_S:
; Line 79
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
; Line 80
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 81
	ret	0
_ASN1_BIT_STRING_name_print ENDP
_TEXT	ENDS
END
