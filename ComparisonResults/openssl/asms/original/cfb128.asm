; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\modes\cfb128.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CRYPTO_cfb128_encrypt
PUBLIC	_CRYPTO_cfb128_8_encrypt
PUBLIC	_CRYPTO_cfb128_1_encrypt
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _cfbr_encrypt_block
_TEXT	SEGMENT
tv1309 = -64						; size = 4
tv1297 = -64						; size = 4
tv1302 = -60						; size = 4
tv1284 = -60						; size = 4
_out$GSCopy$1$ = -60					; size = 4
_ivec$GSCopy$1$ = -56					; size = 4
tv1296 = -52						; size = 4
tv1293 = -52						; size = 4
_num$1$ = -48						; size = 4
_in$2$ = -48						; size = 4
tv1298 = -44						; size = 4
_ovec$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_nbits$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_enc$ = 28						; size = 4
_block$ = 32						; size = 4
_cfbr_encrypt_block PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cfb128.c
; Line 191
	mov	eax, 64					; 00000040H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+64], eax
	mov	ecx, DWORD PTR _key$[esp+60]
	mov	edx, DWORD PTR _block$[esp+60]
	push	ebx
	mov	ebx, DWORD PTR _out$[esp+64]
	push	ebp
	mov	ebp, DWORD PTR _ivec$[esp+68]
	push	esi
; Line 196
	mov	esi, DWORD PTR _nbits$[esp+72]
	mov	DWORD PTR _out$GSCopy$1$[esp+76], ebx
	mov	DWORD PTR _ivec$GSCopy$1$[esp+76], ebp
	lea	eax, DWORD PTR [esi-1]
	cmp	eax, 127				; 0000007fH
	ja	$LN36@cfbr_encry
; Line 200
	movups	xmm0, XMMWORD PTR [ebp]
	push	edi
; Line 202
	push	ecx
	push	ebp
	push	ebp
	movups	XMMWORD PTR _ovec$[esp+92], xmm0
	call	edx
; Line 203
	lea	eax, DWORD PTR [esi+7]
	add	esp, 12					; 0000000cH
	cdq
	and	edx, 7
	lea	edi, DWORD PTR [edx+eax]
	sar	edi, 3
; Line 204
	cmp	DWORD PTR _enc$[esp+76], 0
	mov	DWORD PTR _num$1$[esp+80], edi
	je	SHORT $LN13@cfbr_encry
; Line 205
	test	edi, edi
	jle	$LN6@cfbr_encry
	mov	eax, DWORD PTR _in$[esp+76]
	lea	ecx, DWORD PTR _ovec$[esp+96]
	mov	esi, ebp
	sub	ecx, eax
	sub	esi, eax
	mov	ebp, ecx
	sub	ebx, eax
$LL4@cfbr_encry:
; Line 206
	movzx	edx, BYTE PTR [esi+eax]
	lea	eax, DWORD PTR [eax+1]
	movzx	ecx, BYTE PTR [eax-1]
	xor	edx, ecx
	mov	BYTE PTR [eax+ebp-1], dl
	mov	BYTE PTR [ebx+eax-1], dl
	sub	edi, 1
	jne	SHORT $LL4@cfbr_encry
	jmp	$LN44@cfbr_encry
$LN13@cfbr_encry:
; Line 208
	xor	esi, esi
	test	edi, edi
	jle	$LN6@cfbr_encry
	mov	ecx, DWORD PTR _in$[esp+76]
	cmp	edi, 16					; 00000010H
	jb	$LN25@cfbr_encry
; Line 209
	lea	edx, DWORD PTR [ebp-1]
	lea	ebx, DWORD PTR _ovec$[esp+96]
	add	edx, edi
	cmp	ebx, edx
	lea	eax, DWORD PTR _ovec$[esp+edi+95]
	mov	ebx, DWORD PTR _out$GSCopy$1$[esp+80]
	ja	SHORT $LN26@cfbr_encry
	cmp	eax, ebp
	jae	$LN25@cfbr_encry
$LN26@cfbr_encry:
	lea	edx, DWORD PTR [ebx-1]
	lea	ebp, DWORD PTR _ovec$[esp+96]
	add	edx, edi
	cmp	ebp, edx
	mov	ebp, DWORD PTR _ivec$GSCopy$1$[esp+80]
	ja	SHORT $LN27@cfbr_encry
	cmp	eax, ebx
	jae	$LN25@cfbr_encry
$LN27@cfbr_encry:
	lea	eax, DWORD PTR [ebp-1]
	add	eax, edi
	cmp	ebx, eax
	ja	SHORT $LN28@cfbr_encry
	cmp	edx, ebp
	jae	$LN25@cfbr_encry
$LN28@cfbr_encry:
	lea	eax, DWORD PTR [ecx-1]
	add	eax, edi
	cmp	ebx, eax
	ja	SHORT $LN29@cfbr_encry
	cmp	edx, ecx
	jae	SHORT $LN25@cfbr_encry
$LN29@cfbr_encry:
	mov	eax, edi
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN42@cfbr_encry
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN42@cfbr_encry:
; Line 208
	mov	ebp, ecx
	mov	edx, edi
	sub	ebp, ebx
	lea	ecx, DWORD PTR _ovec$[esp+96]
	mov	DWORD PTR tv1298[esp+80], ebp
	sub	edx, eax
	mov	ebp, DWORD PTR _ivec$GSCopy$1$[esp+80]
	mov	eax, ebx
	mov	DWORD PTR tv1297[esp+80], ebp
	sub	DWORD PTR tv1297[esp+80], ebx
	sub	ecx, ebx
	mov	ebp, DWORD PTR tv1298[esp+80]
	mov	ebx, DWORD PTR tv1297[esp+80]
	mov	DWORD PTR tv1296[esp+80], ecx
	mov	ecx, DWORD PTR _in$[esp+76]
	mov	edi, DWORD PTR tv1296[esp+80]
$LL7@cfbr_encry:
; Line 209
	movups	xmm0, XMMWORD PTR [eax+ebp]
	add	esi, 16					; 00000010H
	lea	eax, DWORD PTR [eax+16]
	movups	xmm1, XMMWORD PTR [ebx+eax-16]
	movups	XMMWORD PTR [edi+eax-16], xmm0
	movups	xmm0, XMMWORD PTR [edi+eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
	cmp	esi, edx
	jl	SHORT $LL7@cfbr_encry
	mov	edi, DWORD PTR _num$1$[esp+80]
	mov	ebx, DWORD PTR _out$GSCopy$1$[esp+80]
	mov	ebp, DWORD PTR _ivec$GSCopy$1$[esp+80]
$LN25@cfbr_encry:
; Line 208
	cmp	esi, edi
	jge	SHORT $LN6@cfbr_encry
; Line 209
	lea	eax, DWORD PTR _ovec$[esp+96]
	sub	ecx, eax
	mov	eax, ebp
	mov	DWORD PTR _in$2$[esp+80], ecx
	lea	ecx, DWORD PTR _ovec$[esp+96]
	mov	ebp, DWORD PTR _in$2$[esp+80]
	sub	eax, ecx
	mov	DWORD PTR tv1293[esp+80], eax
	sub	ebx, ecx
$LL24@cfbr_encry:
	lea	edx, DWORD PTR _ovec$[esp+96]
	add	edx, esi
	inc	esi
	mov	cl, BYTE PTR [edx+ebp]
	mov	al, BYTE PTR [eax+edx]
	xor	al, cl
	mov	BYTE PTR [edx], cl
	mov	BYTE PTR [ebx+edx], al
	mov	eax, DWORD PTR tv1293[esp+80]
	cmp	esi, edi
	jl	SHORT $LL24@cfbr_encry
$LN44@cfbr_encry:
	mov	ebp, DWORD PTR _ivec$GSCopy$1$[esp+80]
$LN6@cfbr_encry:
; Line 211
	mov	eax, DWORD PTR _nbits$[esp+76]
	mov	esi, eax
	and	esi, -2147483641			; 80000007H
	jns	SHORT $LN43@cfbr_encry
	dec	esi
	or	esi, -8					; fffffff8H
	inc	esi
$LN43@cfbr_encry:
; Line 212
	cdq
	and	edx, 7
	lea	ecx, DWORD PTR [edx+eax]
	sar	ecx, 3
; Line 213
	test	esi, esi
	jne	SHORT $LN15@cfbr_encry
; Line 214
	movups	xmm0, XMMWORD PTR _ovec$[esp+ecx+80]
	pop	edi
	pop	esi
	movups	XMMWORD PTR [ebp], xmm0
	pop	ebp
	pop	ebx
; Line 220
	mov	ecx, DWORD PTR __$ArrayPad$[esp+64]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
$LN15@cfbr_encry:
; Line 217
	mov	eax, 8
	mov	DWORD PTR tv1284[esp+80], 4
	sub	eax, esi
	lea	edi, DWORD PTR _ovec$[esp+81]
	inc	ebp
	mov	DWORD PTR tv1309[esp+80], eax
	add	edi, ecx
	npad	8
$LL30@cfbr_encry:
	mov	bl, BYTE PTR [edi]
	lea	edi, DWORD PTR [edi+4]
	movzx	edx, BYTE PTR [edi-5]
	lea	ebp, DWORD PTR [ebp+4]
	mov	ah, BYTE PTR [edi-3]
	mov	ecx, esi
	shl	dl, cl
	mov	al, bl
	movzx	ecx, BYTE PTR tv1309[esp+80]
	shr	al, cl
	movzx	ecx, BYTE PTR tv1309[esp+80]
	or	dl, al
	mov	al, ah
	mov	BYTE PTR [ebp-5], dl
	mov	dl, BYTE PTR [edi-2]
	shr	al, cl
	mov	ecx, esi
	shl	bl, cl
	or	al, bl
	mov	ebx, DWORD PTR tv1309[esp+80]
	mov	BYTE PTR [ebp-4], al
	mov	cl, bl
	mov	al, dl
	shr	al, cl
	mov	ecx, esi
	shl	ah, cl
	mov	cl, bl
	or	al, ah
	mov	BYTE PTR [ebp-3], al
	mov	al, BYTE PTR [edi-1]
	shr	al, cl
	mov	ecx, esi
	shl	dl, cl
	or	al, dl
	sub	DWORD PTR tv1284[esp+80], 1
	mov	BYTE PTR [ebp-2], al
	jne	SHORT $LL30@cfbr_encry
	pop	edi
$LN36@cfbr_encry:
; Line 220
	mov	ecx, DWORD PTR __$ArrayPad$[esp+76]
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	ret	0
_cfbr_encrypt_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cfb128_1_encrypt
_TEXT	SEGMENT
_c$1$ = -89						; size = 1
_n$1$ = -88						; size = 4
tv904 = -84						; size = 4
tv902 = -80						; size = 4
_block$GSCopy$1$ = -76					; size = 4
tv903 = -72						; size = 4
tv897 = -68						; size = 4
tv908 = -64						; size = 4
tv909 = -60						; size = 4
_out$GSCopy$1$ = -56					; size = 4
tv895 = -52						; size = 4
_ivec$GSCopy$1$ = -48					; size = 4
_key$GSCopy$1$ = -44					; size = 4
_ovec$1 = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_bits$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_num$ = 28						; size = 4
_enc$ = 32						; size = 4
_block$ = 36						; size = 4
_CRYPTO_cfb128_1_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cfb128.c
; Line 227
	mov	eax, 92					; 0000005cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+92], eax
	mov	eax, DWORD PTR _out$[esp+88]
; Line 234
	xor	ecx, ecx
	push	ebx
	mov	ebx, DWORD PTR _ivec$[esp+92]
	push	edi
	mov	edi, DWORD PTR _key$[esp+96]
	mov	DWORD PTR _out$GSCopy$1$[esp+100], eax
	mov	eax, DWORD PTR _block$[esp+96]
	mov	DWORD PTR _key$GSCopy$1$[esp+100], edi
	mov	DWORD PTR _ivec$GSCopy$1$[esp+100], ebx
	mov	DWORD PTR _block$GSCopy$1$[esp+100], eax
	mov	DWORD PTR _n$1$[esp+100], ecx
	cmp	DWORD PTR _bits$[esp+96], ecx
	jbe	$LN3@CRYPTO_cfb
	lea	eax, DWORD PTR _ovec$1[esp+100]
	sub	eax, ebx
	push	ebp
	push	esi
	mov	DWORD PTR tv903[esp+108], eax
	mov	esi, ebx
	lea	eax, DWORD PTR _ovec$1[esp+109]
	sub	esi, eax
	lea	eax, DWORD PTR [ebx+2]
	lea	edx, DWORD PTR [eax-1]
	mov	DWORD PTR tv902[esp+108], esi
	mov	DWORD PTR tv908[esp+108], eax
	mov	DWORD PTR tv897[esp+108], edx
$LL4@CRYPTO_cfb:
; Line 200
	movups	xmm0, XMMWORD PTR [ebx]
; Line 235
	mov	eax, ecx
	mov	ebp, 7
	and	eax, 7
	mov	edx, 1
	sub	ebp, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR _in$[esp+104]
	shr	eax, 3
	mov	DWORD PTR tv909[esp+108], eax
; Line 202
	push	edi
	push	ebx
; Line 235
	mov	al, BYTE PTR [eax+ecx]
	mov	ecx, ebp
	shl	edx, cl
	and	al, dl
	mov	DWORD PTR tv895[esp+116], ebp
	neg	al
; Line 202
	push	ebx
; Line 235
	sbb	al, al
	and	al, 128					; 00000080H
	mov	BYTE PTR _c$1$[esp+120], al
; Line 200
	movups	XMMWORD PTR _ovec$1[esp+120], xmm0
; Line 202
	call	DWORD PTR _block$GSCopy$1$[esp+120]
	add	esp, 12					; 0000000cH
; Line 204
	cmp	DWORD PTR _enc$[esp+104], 0
	je	SHORT $LN18@CRYPTO_cfb
; Line 206
	movzx	edx, BYTE PTR [ebx]
	movzx	eax, BYTE PTR _c$1$[esp+108]
	xor	edx, eax
	mov	BYTE PTR _ovec$1[esp+124], dl
	jmp	SHORT $LN42@CRYPTO_cfb
$LN18@CRYPTO_cfb:
; Line 209
	mov	al, BYTE PTR _c$1$[esp+108]
	mov	dl, BYTE PTR [ebx]
	mov	BYTE PTR _ovec$1[esp+124], al
	xor	dl, al
$LN42@CRYPTO_cfb:
	mov	DWORD PTR tv904[esp+108], edx
; Line 216
	xor	ebp, ebp
	mov	edx, DWORD PTR tv903[esp+108]
$LL31@CRYPTO_cfb:
; Line 217
	lea	edi, DWORD PTR _ovec$1[esp+109]
	add	edi, ebp
	add	esi, edi
	mov	ah, BYTE PTR [edi]
	movzx	ecx, BYTE PTR [esi+edx]
	mov	al, ah
	mov	bl, BYTE PTR [edi+1]
	add	cl, cl
	shr	al, 7
	add	ah, ah
	or	cl, al
	mov	al, bl
	shr	al, 7
	add	bl, bl
	mov	BYTE PTR [esi], cl
	or	al, ah
	mov	ecx, DWORD PTR tv897[esp+108]
	mov	esi, DWORD PTR tv902[esp+108]
	mov	BYTE PTR [ecx+ebp], al
	mov	cl, BYTE PTR [edi+2]
	mov	al, cl
	add	cl, cl
	shr	al, 7
	or	al, bl
	mov	ebx, DWORD PTR tv908[esp+108]
	mov	BYTE PTR [ebx+ebp], al
	mov	al, BYTE PTR [edi+3]
	shr	al, 7
	or	al, cl
	mov	BYTE PTR [ebx+ebp+1], al
	add	ebp, 4
	cmp	ebp, 16					; 00000010H
	jl	SHORT $LL31@CRYPTO_cfb
; Line 237
	mov	esi, DWORD PTR tv909[esp+108]
	mov	edi, DWORD PTR _out$GSCopy$1$[esp+108]
	mov	cl, BYTE PTR _n$1$[esp+108]
	mov	edx, DWORD PTR tv904[esp+108]
	and	cl, 7
	mov	ebx, DWORD PTR _ivec$GSCopy$1$[esp+108]
	and	dl, 128					; 00000080H
	movzx	eax, BYTE PTR [esi+edi]
	shr	dl, cl
	mov	ecx, DWORD PTR tv895[esp+108]
	btr	eax, ecx
	mov	ecx, DWORD PTR _n$1$[esp+108]
	or	dl, al
	inc	ecx
	mov	BYTE PTR [esi+edi], dl
	mov	esi, DWORD PTR tv902[esp+108]
	mov	edi, DWORD PTR _key$GSCopy$1$[esp+108]
	mov	DWORD PTR _n$1$[esp+108], ecx
	cmp	ecx, DWORD PTR _bits$[esp+104]
	jb	$LL4@CRYPTO_cfb
	pop	esi
	pop	ebp
$LN3@CRYPTO_cfb:
; Line 240
	mov	ecx, DWORD PTR __$ArrayPad$[esp+100]
	pop	edi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
_CRYPTO_cfb128_1_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cfb128_8_encrypt
_TEXT	SEGMENT
_key$GSCopy$1$ = -48					; size = 4
_block$GSCopy$1$ = -44					; size = 4
_ovec$1 = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_length$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_num$ = 28						; size = 4
_enc$ = 32						; size = 4
_block$ = 36						; size = 4
_CRYPTO_cfb128_8_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cfb128.c
; Line 246
	mov	eax, 48					; 00000030H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+48], eax
	mov	eax, DWORD PTR _key$[esp+44]
	mov	ecx, DWORD PTR _block$[esp+44]
	push	ebx
; Line 252
	mov	ebx, DWORD PTR _length$[esp+48]
	mov	DWORD PTR _key$GSCopy$1$[esp+52], eax
	mov	DWORD PTR _block$GSCopy$1$[esp+52], ecx
	push	ebp
	mov	ebp, DWORD PTR _out$[esp+52]
	push	esi
	mov	esi, DWORD PTR _ivec$[esp+56]
	test	ebx, ebx
	je	SHORT $LN3@CRYPTO_cfb
	push	edi
	mov	edi, DWORD PTR _in$[esp+60]
	sub	ebp, edi
	npad	1
$LL4@CRYPTO_cfb:
; Line 200
	movups	xmm0, XMMWORD PTR [esi]
; Line 202
	push	eax
	push	esi
	push	esi
	movups	XMMWORD PTR _ovec$1[esp+76], xmm0
	call	ecx
	add	esp, 12					; 0000000cH
; Line 204
	cmp	DWORD PTR _enc$[esp+60], 0
	je	SHORT $LN18@CRYPTO_cfb
; Line 206
	movzx	ecx, BYTE PTR [esi]
	movzx	eax, BYTE PTR [edi]
	xor	ecx, eax
	mov	BYTE PTR [edi+ebp], cl
	jmp	SHORT $LN42@CRYPTO_cfb
$LN18@CRYPTO_cfb:
; Line 209
	mov	cl, BYTE PTR [edi]
	mov	al, BYTE PTR [esi]
	xor	al, cl
	mov	BYTE PTR [edi+ebp], al
$LN42@CRYPTO_cfb:
; Line 252
	mov	eax, DWORD PTR _key$GSCopy$1$[esp+64]
	inc	edi
; Line 209
	mov	BYTE PTR _ovec$1[esp+80], cl
; Line 252
	mov	ecx, DWORD PTR _block$GSCopy$1$[esp+64]
; Line 214
	movups	xmm0, XMMWORD PTR _ovec$1[esp+65]
	movups	XMMWORD PTR [esi], xmm0
; Line 252
	sub	ebx, 1
	jne	SHORT $LL4@CRYPTO_cfb
	pop	edi
$LN3@CRYPTO_cfb:
; Line 254
	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	ret	0
_CRYPTO_cfb128_8_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _CRYPTO_cfb128_encrypt
_TEXT	SEGMENT
_out$1$ = -16						; size = 4
_len$2$ = -16						; size = 4
_out$2$ = -12						; size = 4
tv946 = -8						; size = 4
tv941 = -8						; size = 4
_n$1$ = -8						; size = 4
tv938 = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_len$ = 16						; size = 4
_key$ = 20						; size = 4
_ivec$ = 24						; size = 4
_num$ = 28						; size = 4
tv937 = 32						; size = 4
_in$2$ = 32						; size = 4
_in$1$ = 32						; size = 4
_enc$ = 32						; size = 4
_block$ = 36						; size = 4
_CRYPTO_cfb128_encrypt PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\modes\cfb128.c
; Line 71
	mov	eax, 16					; 00000010H
	call	__chkstk
; Line 79
	cmp	DWORD PTR _enc$[esp+12], 0
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _num$[esp+24]
	push	edi
	mov	esi, DWORD PTR [esi]
	je	$LN18@CRYPTO_cfb
; Line 83
	mov	edx, DWORD PTR _out$[esp+28]
	mov	ebp, DWORD PTR _in$[esp+28]
	mov	edi, DWORD PTR _len$[esp+28]
	mov	DWORD PTR _out$1$[esp+32], edx
	mov	DWORD PTR _in$1$[esp+28], ebp
	test	esi, esi
	je	SHORT $LN40@CRYPTO_cfb
	mov	ebx, DWORD PTR _ivec$[esp+28]
	npad	5
$LL5@CRYPTO_cfb:
	test	edi, edi
	je	SHORT $LN40@CRYPTO_cfb
; Line 84
	movzx	ecx, BYTE PTR [esi+ebx]
; Line 85
	dec	edi
	movzx	eax, BYTE PTR [ebp]
	inc	ebp
	xor	ecx, eax
	mov	DWORD PTR _in$1$[esp+28], ebp
	mov	BYTE PTR [esi+ebx], cl
; Line 86
	inc	esi
	mov	BYTE PTR [edx], cl
	inc	edx
	mov	DWORD PTR _out$1$[esp+32], edx
	and	esi, 15					; 0000000fH
	jne	SHORT $LL5@CRYPTO_cfb
$LN40@CRYPTO_cfb:
; Line 93
	cmp	edi, 16					; 00000010H
	jb	SHORT $LN8@CRYPTO_cfb
	mov	ecx, DWORD PTR _ivec$[esp+28]
	mov	eax, edi
	shr	eax, 4
	mov	ebx, edx
	mov	DWORD PTR tv946[esp+32], eax
	sub	ebx, ecx
	shl	eax, 4
	sub	ebp, ecx
	add	edx, eax
	add	DWORD PTR _in$1$[esp+28], eax
	mov	DWORD PTR _out$1$[esp+32], edx
	jmp	SHORT $LN7@CRYPTO_cfb
	npad	5
$LL76@CRYPTO_cfb:
	mov	ecx, DWORD PTR _ivec$[esp+28]
$LN7@CRYPTO_cfb:
; Line 94
	push	DWORD PTR _key$[esp+28]
	push	ecx
	push	ecx
	call	DWORD PTR _block$[esp+40]
	add	esp, 12					; 0000000cH
; Line 95
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN10@CRYPTO_cfb
; Line 94
	mov	ecx, DWORD PTR _ivec$[esp+28]
	mov	edx, 15					; 0000000fH
	sub	edx, esi
	add	ecx, esi
	shr	edx, 2
	inc	edx
$LL11@CRYPTO_cfb:
; Line 96
	mov	eax, DWORD PTR [ecx+ebp]
	lea	ecx, DWORD PTR [ecx+4]
	xor	DWORD PTR [ecx-4], eax
	mov	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [ebx+ecx-4], eax
	sub	edx, 1
	jne	SHORT $LL11@CRYPTO_cfb
$LN10@CRYPTO_cfb:
; Line 99
	sub	edi, 16					; 00000010H
; Line 100
	add	ebx, 16					; 00000010H
; Line 101
	add	ebp, 16					; 00000010H
; Line 102
	xor	esi, esi
	sub	DWORD PTR tv946[esp+32], 1
	jne	SHORT $LL76@CRYPTO_cfb
$LN8@CRYPTO_cfb:
; Line 104
	test	edi, edi
	je	$LN55@CRYPTO_cfb
; Line 105
	push	DWORD PTR _key$[esp+28]
	mov	ebp, DWORD PTR _ivec$[esp+32]
	push	ebp
	push	ebp
	call	DWORD PTR _block$[esp+40]
; Line 106
	mov	ebx, DWORD PTR _out$1$[esp+44]
	lea	edx, DWORD PTR [esi+ebp]
	sub	DWORD PTR _in$1$[esp+40], ebp
	add	esp, 12					; 0000000cH
	sub	ebx, ebp
	add	esi, edi
	mov	DWORD PTR _n$1$[esp+32], esi
	mov	esi, DWORD PTR _in$1$[esp+28]
	npad	2
$LL12@CRYPTO_cfb:
; Line 107
	movzx	ecx, BYTE PTR [edx+esi]
; Line 108
	lea	edx, DWORD PTR [edx+1]
	movzx	eax, BYTE PTR [edx-1]
	xor	ecx, eax
	mov	BYTE PTR [edx-1], cl
	mov	BYTE PTR [edx+ebx-1], cl
	sub	edi, 1
	jne	SHORT $LL12@CRYPTO_cfb
; Line 163
	mov	eax, DWORD PTR _num$[esp+28]
	mov	esi, DWORD PTR _n$1$[esp+32]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 181
	add	esp, 16					; 00000010H
	ret	0
$LN18@CRYPTO_cfb:
; Line 130
	mov	ebx, DWORD PTR _len$[esp+28]
	mov	ebp, DWORD PTR _out$[esp+28]
	mov	edi, DWORD PTR _in$[esp+28]
	mov	DWORD PTR _len$2$[esp+32], ebx
	mov	DWORD PTR _out$2$[esp+32], ebp
	mov	DWORD PTR _in$2$[esp+28], edi
	test	esi, esi
	je	SHORT $LN44@CRYPTO_cfb
	mov	edx, DWORD PTR _ivec$[esp+28]
	npad	5
$LL19@CRYPTO_cfb:
	test	ebx, ebx
	je	SHORT $LN44@CRYPTO_cfb
; Line 132
	mov	al, BYTE PTR [esi+edx]
; Line 134
	dec	ebx
	mov	cl, BYTE PTR [edi]
	inc	edi
	xor	al, cl
	mov	DWORD PTR _in$2$[esp+28], edi
	mov	BYTE PTR [ebp], al
	inc	ebp
	mov	BYTE PTR [esi+edx], cl
; Line 135
	inc	esi
	mov	DWORD PTR _out$2$[esp+32], ebp
	mov	DWORD PTR _len$2$[esp+32], ebx
	and	esi, 15					; 0000000fH
	jne	SHORT $LL19@CRYPTO_cfb
$LN44@CRYPTO_cfb:
; Line 142
	mov	edx, DWORD PTR _block$[esp+28]
	cmp	ebx, 16					; 00000010H
	jb	$LN22@CRYPTO_cfb
	mov	ecx, DWORD PTR _ivec$[esp+28]
	mov	eax, ebp
	sub	eax, ecx
	mov	DWORD PTR tv941[esp+32], eax
	mov	eax, ebx
	shr	eax, 4
	mov	DWORD PTR tv938[esp+32], eax
	jmp	SHORT $LN21@CRYPTO_cfb
	npad	6
$LL75@CRYPTO_cfb:
	mov	ecx, DWORD PTR _ivec$[esp+28]
$LN21@CRYPTO_cfb:
; Line 143
	push	DWORD PTR _key$[esp+28]
	push	ecx
	push	ecx
	call	edx
	add	esp, 12					; 0000000cH
; Line 144
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN24@CRYPTO_cfb
	mov	ebx, DWORD PTR _in$2$[esp+28]
	mov	edi, DWORD PTR _ivec$[esp+28]
	sub	ebx, ebp
	mov	ebp, 15					; 0000000fH
	add	edi, esi
	sub	ebp, esi
	mov	esi, DWORD PTR tv941[esp+32]
	shr	ebp, 2
	inc	ebp
	npad	1
$LL25@CRYPTO_cfb:
; Line 146
	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR [esi+edi]
	mov	edx, DWORD PTR [ecx+ebx]
	lea	edi, DWORD PTR [edi+4]
	xor	eax, edx
	mov	DWORD PTR [ecx], eax
; Line 147
	mov	DWORD PTR [edi-4], edx
	sub	ebp, 1
	jne	SHORT $LL25@CRYPTO_cfb
	mov	ebx, DWORD PTR _len$2$[esp+32]
	mov	ebp, DWORD PTR _out$2$[esp+32]
	mov	edi, DWORD PTR _in$2$[esp+28]
$LN24@CRYPTO_cfb:
; Line 150
	add	DWORD PTR tv941[esp+32], 16		; 00000010H
	sub	ebx, 16					; 00000010H
	mov	edx, DWORD PTR _block$[esp+28]
	add	ebp, 16					; 00000010H
; Line 151
	add	edi, 16					; 00000010H
	mov	DWORD PTR _len$2$[esp+32], ebx
; Line 152
	xor	esi, esi
	mov	DWORD PTR _out$2$[esp+32], ebp
	sub	DWORD PTR tv938[esp+32], 1
	mov	DWORD PTR _in$2$[esp+28], edi
	jne	SHORT $LL75@CRYPTO_cfb
$LN22@CRYPTO_cfb:
; Line 154
	test	ebx, ebx
	je	SHORT $LN55@CRYPTO_cfb
; Line 155
	push	DWORD PTR _key$[esp+28]
	mov	eax, DWORD PTR _ivec$[esp+32]
	push	eax
	push	eax
	call	edx
	mov	ecx, DWORD PTR _ivec$[esp+40]
; Line 156
	sub	edi, ebp
	add	esp, 12					; 0000000cH
	sub	ebp, ecx
	lea	eax, DWORD PTR [esi+ecx]
	add	esi, ebx
	mov	DWORD PTR _n$1$[esp+32], esi
	mov	esi, eax
	mov	DWORD PTR tv937[esp+28], eax
$LL26@CRYPTO_cfb:
; Line 158
	mov	al, BYTE PTR [esi]
	lea	ecx, DWORD PTR [esi+ebp]
	mov	dl, BYTE PTR [ecx+edi]
; Line 160
	lea	esi, DWORD PTR [esi+1]
	xor	al, dl
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [esi-1], dl
	sub	ebx, 1
	jne	SHORT $LL26@CRYPTO_cfb
	mov	esi, DWORD PTR _n$1$[esp+32]
$LN55@CRYPTO_cfb:
; Line 163
	mov	eax, DWORD PTR _num$[esp+28]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 181
	add	esp, 16					; 00000010H
	ret	0
_CRYPTO_cfb128_encrypt ENDP
_TEXT	ENDS
END
