; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_SQR_tb	DD	00H
	DD	01H
	DD	04H
	DD	05H
	DD	010H
	DD	011H
	DD	014H
	DD	015H
	DD	040H
	DD	041H
	DD	044H
	DD	045H
	DD	050H
	DD	051H
	DD	054H
	DD	055H
CONST	ENDS
PUBLIC	_BN_GF2m_add
PUBLIC	_BN_GF2m_mod
PUBLIC	_BN_GF2m_mod_mul
PUBLIC	_BN_GF2m_mod_sqr
PUBLIC	_BN_GF2m_mod_inv
PUBLIC	_BN_GF2m_mod_div
PUBLIC	_BN_GF2m_mod_exp
PUBLIC	_BN_GF2m_mod_sqrt
PUBLIC	_BN_GF2m_mod_solve_quad
PUBLIC	_BN_GF2m_mod_arr
PUBLIC	_BN_GF2m_mod_mul_arr
PUBLIC	_BN_GF2m_mod_sqr_arr
PUBLIC	_BN_GF2m_mod_inv_arr
PUBLIC	_BN_GF2m_mod_div_arr
PUBLIC	_BN_GF2m_mod_exp_arr
PUBLIC	_BN_GF2m_mod_sqrt_arr
PUBLIC	_BN_GF2m_mod_solve_quad_arr
PUBLIC	_BN_GF2m_poly2arr
PUBLIC	_BN_GF2m_arr2poly
PUBLIC	??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; `string'
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_rand:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_num_bits_word:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_is_bit_set:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	_BN_set_bit:PROC
EXTRN	_bn_expand2:PROC
EXTRN	_bn_GF2m_mul_2x2:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
CONST	SEGMENT
??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ DB '.\crypto\bn\bn_gf2'
	DB	'm.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_arr2poly
_TEXT	SEGMENT
_p$ = 8							; size = 4
_a$ = 12						; size = 4
_BN_GF2m_arr2poly PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1286
	push	ebx
; Line 1290
	mov	ebx, DWORD PTR _a$[esp]
	push	esi
	push	edi
	push	0
	push	ebx
	call	_BN_set_word
; Line 1291
	mov	edi, DWORD PTR _p$[esp+16]
	add	esp, 8
	xor	esi, esi
	cmp	DWORD PTR [edi], -1
	je	SHORT $LN3@BN_GF2m_ar
	mov	eax, edi
	npad	1
$LL4@BN_GF2m_ar:
; Line 1292
	push	DWORD PTR [eax]
	push	ebx
	call	_BN_set_bit
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@BN_GF2m_ar
; Line 1291
	inc	esi
	cmp	DWORD PTR [edi+esi*4], -1
	lea	eax, DWORD PTR [edi+esi*4]
	jne	SHORT $LL4@BN_GF2m_ar
$LN3@BN_GF2m_ar:
	pop	edi
	pop	esi
; Line 1297
	mov	eax, 1
	pop	ebx
; Line 1298
	ret	0
$LN8@BN_GF2m_ar:
	pop	edi
	pop	esi
; Line 1293
	xor	eax, eax
	pop	ebx
; Line 1298
	ret	0
_BN_GF2m_arr2poly ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_poly2arr
_TEXT	SEGMENT
_a$ = 8							; size = 4
_p$ = 12						; size = 4
_max$ = 16						; size = 4
_BN_GF2m_poly2arr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1251
	push	ebx
	push	ebp
; Line 1255
	mov	ebp, DWORD PTR _a$[esp+4]
	xor	eax, eax
	mov	ebx, DWORD PTR [ebp+4]
	test	ebx, ebx
	jne	SHORT $LN8@BN_GF2m_po
	pop	ebp
	pop	ebx
; Line 1279
	ret	0
$LN8@BN_GF2m_po:
; Line 1258
	add	ebx, -1
	js	SHORT $LN3@BN_GF2m_po
	push	esi
	push	edi
	mov	edi, ebx
	shl	edi, 5
	npad	2
$LL4@BN_GF2m_po:
; Line 1259
	mov	ecx, DWORD PTR [ebp]
	cmp	DWORD PTR [ecx+ebx*4], 0
	je	SHORT $LN2@BN_GF2m_po
; Line 1262
	mov	edx, -2147483648			; 80000000H
; Line 1263
	mov	esi, 31					; 0000001fH
$LL7@BN_GF2m_po:
; Line 1264
	mov	ecx, DWORD PTR [ebp]
	test	DWORD PTR [ecx+ebx*4], edx
	je	SHORT $LN10@BN_GF2m_po
; Line 1265
	cmp	eax, DWORD PTR _max$[esp+12]
	jge	SHORT $LN11@BN_GF2m_po
; Line 1266
	mov	ebp, DWORD PTR _p$[esp+12]
	lea	ecx, DWORD PTR [edi+esi]
	mov	DWORD PTR [ebp+eax*4], ecx
	mov	ebp, DWORD PTR _a$[esp+12]
$LN11@BN_GF2m_po:
; Line 1267
	inc	eax
$LN10@BN_GF2m_po:
; Line 1269
	shr	edx, 1
	sub	esi, 1
	jns	SHORT $LL7@BN_GF2m_po
$LN2@BN_GF2m_po:
; Line 1258
	sub	edi, 32					; 00000020H
	sub	ebx, 1
	jns	SHORT $LL4@BN_GF2m_po
	pop	edi
	pop	esi
$LN3@BN_GF2m_po:
; Line 1273
	cmp	eax, DWORD PTR _max$[esp+4]
	jge	SHORT $LN1@BN_GF2m_po
; Line 1274
	mov	ecx, DWORD PTR _p$[esp+4]
	mov	DWORD PTR [ecx+eax*4], -1
; Line 1275
	inc	eax
$LN1@BN_GF2m_po:
; Line 1279
	pop	ebp
	pop	ebx
	ret	0
_BN_GF2m_poly2arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_solve_quad_arr
_TEXT	SEGMENT
_rho$1$ = -24						; size = 4
_w2$1$ = -20						; size = 4
_j$1$ = -16						; size = 4
_w$1$ = -16						; size = 4
_ret$1$ = -12						; size = 4
_tmp$1$ = -8						; size = 4
_count$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a_$ = 12						; size = 4
_a$1$ = 16						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_solve_quad_arr PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1118
	mov	eax, 24					; 00000018H
	call	__chkstk
	push	edi
; Line 1124
	mov	edi, DWORD PTR _p$[esp+24]
	mov	DWORD PTR _ret$1$[esp+28], 0
	mov	DWORD PTR _count$1$[esp+28], 0
	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN11@BN_GF2m_mo
; Line 1126
	push	0
	push	DWORD PTR _r$[esp+28]
	call	_BN_set_word
	add	esp, 8
; Line 1127
	mov	eax, 1
	pop	edi
; Line 1212
	add	esp, 24					; 00000018H
	ret	0
$LN11@BN_GF2m_mo:
	push	ebx
; Line 1130
	mov	ebx, DWORD PTR _ctx$[esp+28]
	push	ebp
	push	esi
	push	ebx
	call	_BN_CTX_start
; Line 1131
	push	ebx
	call	_BN_CTX_get
; Line 1132
	push	ebx
	mov	DWORD PTR _a$1$[esp+48], eax
	call	_BN_CTX_get
; Line 1133
	push	ebx
	mov	esi, eax
	call	_BN_CTX_get
	mov	ebp, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _w$1$[esp+40], ebp
; Line 1134
	test	ebp, ebp
	je	$err$61
; Line 1137
	push	edi
	push	DWORD PTR _a_$[esp+40]
	push	DWORD PTR _a$1$[esp+44]
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$61
; Line 1140
	mov	eax, DWORD PTR _a$1$[esp+36]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN14@BN_GF2m_mo
; Line 1141
	push	0
	push	DWORD PTR _r$[esp+40]
	call	_BN_set_word
	add	esp, 8
; Line 1142
	mov	DWORD PTR _ret$1$[esp+40], 1
; Line 1210
	push	ebx
	call	_BN_CTX_end
; Line 1211
	mov	eax, DWORD PTR _ret$1$[esp+44]
	add	esp, 4
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 1212
	add	esp, 24					; 00000018H
	ret	0
$LN14@BN_GF2m_mo:
; Line 1146
	test	BYTE PTR [edi], 1
	je	$LN15@BN_GF2m_mo
; Line 1148
	push	eax
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$err$61
; Line 1150
	mov	eax, DWORD PTR [edi]
	dec	eax
	mov	DWORD PTR _j$1$[esp+40], 1
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	eax, 1
	jl	SHORT $LN31@BN_GF2m_mo
$LL4@BN_GF2m_mo:
; Line 1151
	push	ebx
	push	edi
	push	esi
	push	esi
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1153
	push	ebx
	push	edi
	push	esi
	push	esi
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1155
	push	DWORD PTR _a$1$[esp+36]
	push	esi
	push	esi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$61
; Line 1150
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR _j$1$[esp+40]
	dec	eax
	cdq
	inc	ecx
	sub	eax, edx
	mov	DWORD PTR _j$1$[esp+40], ecx
	sar	eax, 1
	cmp	ecx, eax
	jle	SHORT $LL4@BN_GF2m_mo
$LN31@BN_GF2m_mo:
; Line 1194
	push	ebx
	push	edi
	push	esi
	push	ebp
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1196
	push	ebp
	push	esi
	push	ebp
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$61
; Line 1198
	push	DWORD PTR _a$1$[esp+36]
	push	ebp
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	je	$LN34@BN_GF2m_mo
; Line 1199
	push	1199					; 000004afH
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	116					; 00000074H
	push	135					; 00000087H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1210
	push	ebx
	call	_BN_CTX_end
; Line 1211
	mov	eax, DWORD PTR _ret$1$[esp+44]
	add	esp, 4
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 1212
	add	esp, 24					; 00000018H
	ret	0
$LN15@BN_GF2m_mo:
; Line 1161
	push	ebx
	call	_BN_CTX_get
; Line 1162
	push	ebx
	mov	DWORD PTR _rho$1$[esp+48], eax
	call	_BN_CTX_get
; Line 1163
	push	ebx
	mov	DWORD PTR _w2$1$[esp+52], eax
	call	_BN_CTX_get
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp$1$[esp+40], eax
; Line 1164
	test	eax, eax
	je	$err$61
$LL7@BN_GF2m_mo:
; Line 1167
	push	0
	push	0
	push	DWORD PTR [edi]
	push	DWORD PTR _rho$1$[esp+52]
	call	_BN_rand
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1169
	mov	eax, DWORD PTR _rho$1$[esp+40]
	push	edi
	push	eax
	push	eax
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$61
; Line 1171
	push	0
	push	esi
	call	_BN_set_word
; Line 1172
	push	DWORD PTR _rho$1$[esp+48]
	push	ebp
	call	_BN_copy
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1174
	mov	eax, DWORD PTR [edi]
	mov	ebp, 1
	dec	eax
	cmp	eax, ebp
	jl	$LN9@BN_GF2m_mo
$LL10@BN_GF2m_mo:
; Line 1175
	push	ebx
	push	edi
	push	esi
	push	esi
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1177
	push	ebx
	push	edi
	push	DWORD PTR _w$1$[esp+48]
	push	DWORD PTR _w2$1$[esp+52]
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$61
; Line 1179
	push	ebx
	push	edi
	push	DWORD PTR _a$1$[esp+44]
	push	DWORD PTR _w2$1$[esp+52]
	push	DWORD PTR _tmp$1$[esp+56]
	call	_BN_GF2m_mod_mul_arr
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$61
; Line 1181
	push	DWORD PTR _tmp$1$[esp+40]
	push	esi
	push	esi
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$61
; Line 1183
	push	DWORD PTR _rho$1$[esp+40]
	push	DWORD PTR _w2$1$[esp+44]
	push	DWORD PTR _w$1$[esp+48]
	call	_BN_GF2m_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$61
; Line 1174
	mov	eax, DWORD PTR [edi]
	inc	ebp
	dec	eax
	cmp	ebp, eax
	jle	$LL10@BN_GF2m_mo
$LN9@BN_GF2m_mo:
; Line 1187
	mov	ebp, DWORD PTR _w$1$[esp+40]
	mov	eax, DWORD PTR _count$1$[esp+40]
	inc	eax
	mov	DWORD PTR _count$1$[esp+40], eax
	cmp	DWORD PTR [ebp+4], 0
	jne	$LN31@BN_GF2m_mo
	cmp	eax, 50					; 00000032H
	jl	$LL7@BN_GF2m_mo
; Line 1188
	cmp	DWORD PTR [ebp+4], 0
	jne	$LN31@BN_GF2m_mo
; Line 1189
	push	1189					; 000004a5H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	113					; 00000071H
	push	135					; 00000087H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 1210
	push	ebx
	call	_BN_CTX_end
; Line 1211
	mov	eax, DWORD PTR _ret$1$[esp+44]
	add	esp, 4
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 1212
	add	esp, 24					; 00000018H
	ret	0
$LN34@BN_GF2m_mo:
; Line 1203
	push	esi
	push	DWORD PTR _r$[esp+40]
	call	_BN_copy
	xor	ecx, ecx
	add	esp, 8
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+40], ecx
$err$61:
; Line 1210
	push	ebx
	call	_BN_CTX_end
; Line 1211
	mov	eax, DWORD PTR _ret$1$[esp+44]
	add	esp, 4
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 1212
	add	esp, 24					; 00000018H
	ret	0
_BN_GF2m_mod_solve_quad_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_sqrt_arr
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_sqrt_arr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1058
	push	ebp
	push	edi
; Line 1064
	mov	edi, DWORD PTR _p$[esp+4]
	xor	ebp, ebp
	cmp	DWORD PTR [edi], ebp
	jne	SHORT $LN2@BN_GF2m_mo
; Line 1066
	push	ebp
	push	DWORD PTR _r$[esp+8]
	call	_BN_set_word
	add	esp, 8
; Line 1067
	lea	eax, DWORD PTR [ebp+1]
	pop	edi
	pop	ebp
; Line 1082
	ret	0
$LN2@BN_GF2m_mo:
	push	ebx
	push	esi
; Line 1070
	mov	esi, DWORD PTR _ctx$[esp+12]
	push	esi
	call	_BN_CTX_start
; Line 1071
	push	esi
	call	_BN_CTX_get
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	je	SHORT $err$7
; Line 1074
	mov	eax, DWORD PTR [edi]
	dec	eax
	push	eax
	push	ebx
	call	_BN_set_bit
	add	esp, 8
	test	eax, eax
	je	SHORT $err$7
; Line 1076
	push	esi
	push	edi
	push	ebx
	push	DWORD PTR _a$[esp+24]
	push	DWORD PTR _r$[esp+28]
	call	_BN_GF2m_mod_exp_arr
	add	esp, 20					; 00000014H
	mov	ebp, eax
$err$7:
; Line 1080
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 1081
	mov	eax, ebp
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp
; Line 1082
	ret	0
_BN_GF2m_mod_sqrt_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_exp_arr
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_p$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_GF2m_mod_exp_arr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 984
	mov	eax, 4
	call	__chkstk
	push	edi
; Line 991
	mov	edi, DWORD PTR _b$[esp+4]
	mov	DWORD PTR _ret$1$[esp+8], 0
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $LN5@BN_GF2m_mo
; Line 992
	push	1
	push	DWORD PTR _r$[esp+8]
	call	_BN_set_word
	add	esp, 8
	pop	edi
; Line 1020
	pop	ecx
	ret	0
$LN5@BN_GF2m_mo:
; Line 994
	cmp	eax, 1
	jne	SHORT $LN8@BN_GF2m_mo
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@BN_GF2m_mo
; Line 995
	push	DWORD PTR _a$[esp+4]
	push	DWORD PTR _r$[esp+8]
	call	_BN_copy
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
; Line 1020
	pop	ecx
	ret	0
$LN8@BN_GF2m_mo:
	push	ebx
; Line 997
	mov	ebx, DWORD PTR _ctx$[esp+8]
	push	esi
	push	ebx
	call	_BN_CTX_start
; Line 998
	push	ebx
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	je	SHORT $err$24
; Line 1001
	push	ebp
	mov	ebp, DWORD PTR _p$[esp+16]
	push	ebp
	push	DWORD PTR _a$[esp+20]
	push	esi
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN22@BN_GF2m_mo
; Line 1004
	push	edi
	call	_BN_num_bits
	mov	edi, eax
	add	esp, 4
; Line 1005
	sub	edi, 2
	js	SHORT $LN3@BN_GF2m_mo
$LL4@BN_GF2m_mo:
; Line 1006
	push	ebx
	push	ebp
	push	esi
	push	esi
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN22@BN_GF2m_mo
; Line 1008
	push	edi
	push	DWORD PTR _b$[esp+20]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@BN_GF2m_mo
; Line 1009
	push	ebx
	push	ebp
	push	DWORD PTR _a$[esp+24]
	push	esi
	push	esi
	call	_BN_GF2m_mod_mul_arr
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN22@BN_GF2m_mo
$LN2@BN_GF2m_mo:
; Line 1005
	sub	edi, 1
	jns	SHORT $LL4@BN_GF2m_mo
$LN3@BN_GF2m_mo:
; Line 1013
	push	esi
	push	DWORD PTR _r$[esp+20]
	call	_BN_copy
	xor	ecx, ecx
	add	esp, 8
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+20], ecx
$LN22@BN_GF2m_mo:
	pop	ebp
$err$24:
; Line 1018
	push	ebx
	call	_BN_CTX_end
; Line 1019
	mov	eax, DWORD PTR _ret$1$[esp+20]
	add	esp, 4
	pop	esi
	pop	ebx
	pop	edi
; Line 1020
	pop	ecx
	ret	0
_BN_GF2m_mod_exp_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_div_arr
_TEXT	SEGMENT
_r$ = 8							; size = 4
_yy$ = 12						; size = 4
_xx$ = 16						; size = 4
_p$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_GF2m_mod_div_arr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 956
	push	ebx
	push	esi
; Line 963
	mov	esi, DWORD PTR _ctx$[esp+4]
	xor	ebx, ebx
	push	edi
	push	esi
	call	_BN_CTX_start
; Line 964
	push	esi
	call	_BN_CTX_get
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $err$6
; Line 966
	push	edi
	push	DWORD PTR _p$[esp+12]
	call	_BN_GF2m_arr2poly
	add	esp, 8
	test	eax, eax
	je	SHORT $err$6
; Line 969
	push	esi
	push	edi
	push	DWORD PTR _xx$[esp+16]
	push	DWORD PTR _yy$[esp+20]
	push	DWORD PTR _r$[esp+24]
	call	_BN_GF2m_mod_div
	add	esp, 20					; 00000014H
	mov	ebx, eax
$err$6:
; Line 973
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 974
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 975
	ret	0
_BN_GF2m_mod_div_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_inv_arr
_TEXT	SEGMENT
_r$ = 8							; size = 4
_xx$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_inv_arr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 809
	push	ebx
	push	esi
; Line 814
	mov	esi, DWORD PTR _ctx$[esp+4]
	xor	ebx, ebx
	push	edi
	push	esi
	call	_BN_CTX_start
; Line 815
	push	esi
	call	_BN_CTX_get
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $err$6
; Line 817
	push	edi
	push	DWORD PTR _p$[esp+12]
	call	_BN_GF2m_arr2poly
	add	esp, 8
	test	eax, eax
	je	SHORT $err$6
; Line 820
	push	esi
	push	edi
	push	DWORD PTR _xx$[esp+16]
	push	DWORD PTR _r$[esp+20]
	call	_BN_GF2m_mod_inv
	add	esp, 16					; 00000010H
	mov	ebx, eax
$err$6:
; Line 824
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 825
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 826
	ret	0
_BN_GF2m_mod_inv_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_sqr_arr
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_sqr_arr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 571
	push	ebx
; Line 576
	mov	ebx, DWORD PTR _ctx$[esp]
	push	esi
	push	edi
	push	ebx
	xor	esi, esi
	call	_BN_CTX_start
; Line 577
	push	ebx
	call	_BN_CTX_get
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	$err$27
; Line 579
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+12]
	mov	eax, DWORD PTR [ebp+4]
	add	eax, eax
	cmp	eax, DWORD PTR [edi+8]
	jg	SHORT $LN14@BN_GF2m_mo
	mov	eax, edi
	jmp	SHORT $LN15@BN_GF2m_mo
$LN14@BN_GF2m_mo:
	push	eax
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN15@BN_GF2m_mo:
	test	eax, eax
	je	$LN25@BN_GF2m_mo
; Line 582
	mov	ebx, DWORD PTR [ebp+4]
	sub	ebx, 1
	js	$LN3@BN_GF2m_mo
$LL4@BN_GF2m_mo:
; Line 583
	mov	eax, DWORD PTR [ebp]
	mov	esi, DWORD PTR [eax+ebx*4]
	mov	eax, esi
	shr	eax, 28					; 0000001cH
	mov	ecx, esi
	shr	ecx, 24					; 00000018H
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _SQR_tb[eax*4]
	mov	eax, esi
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	shl	edx, 8
	or	edx, DWORD PTR _SQR_tb[ecx*4]
	shl	edx, 8
	shr	esi, 16					; 00000010H
	or	edx, DWORD PTR _SQR_tb[eax*4]
	and	esi, 15					; 0000000fH
	mov	eax, DWORD PTR [edi]
	shl	edx, 8
	or	edx, DWORD PTR _SQR_tb[esi*4]
	mov	DWORD PTR [eax+ebx*8+4], edx
; Line 584
	mov	eax, DWORD PTR [ebp]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, edx
	shr	eax, 12					; 0000000cH
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _SQR_tb[eax*4]
	mov	eax, edx
	shr	eax, 8
	and	eax, 15					; 0000000fH
	shl	ecx, 8
	or	ecx, DWORD PTR _SQR_tb[eax*4]
	mov	eax, edx
	shr	eax, 4
	and	edx, 15					; 0000000fH
	and	eax, 15					; 0000000fH
	shl	ecx, 8
	or	ecx, DWORD PTR _SQR_tb[eax*4]
	mov	eax, DWORD PTR [edi]
	shl	ecx, 8
	or	ecx, DWORD PTR _SQR_tb[edx*4]
	mov	DWORD PTR [eax+ebx*8], ecx
	sub	ebx, 1
	jns	$LL4@BN_GF2m_mo
	xor	esi, esi
$LN3@BN_GF2m_mo:
; Line 587
	mov	eax, DWORD PTR [ebp+4]
	add	eax, eax
	mov	DWORD PTR [edi+4], eax
; Line 588
	test	eax, eax
	jle	SHORT $LN10@BN_GF2m_mo
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR [eax-1]
	lea	edx, DWORD PTR [ecx+edx*4]
	npad	7
$LL7@BN_GF2m_mo:
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	ecx, ecx
	jne	SHORT $LN18@BN_GF2m_mo
	dec	eax
	test	eax, eax
	jg	SHORT $LL7@BN_GF2m_mo
$LN18@BN_GF2m_mo:
	mov	DWORD PTR [edi+4], eax
$LN10@BN_GF2m_mo:
; Line 589
	push	DWORD PTR _p$[esp+12]
	push	edi
	push	DWORD PTR _r$[esp+20]
	call	_BN_GF2m_mod_arr
	mov	ebx, DWORD PTR _ctx$[esp+24]
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	ecx, 1
	cmovne	esi, ecx
$LN25@BN_GF2m_mo:
	pop	ebp
$err$27:
; Line 594
	push	ebx
	call	_BN_CTX_end
	add	esp, 4
; Line 595
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 596
	ret	0
_BN_GF2m_mod_sqr_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_mul_arr
_TEXT	SEGMENT
_y1$1$ = -52						; size = 4
_ret$1$ = -52						; size = 4
_j$1$ = -48						; size = 4
_a$GSCopy$1$ = -44					; size = 4
_y0$1$ = -44						; size = 4
_b$GSCopy$1$ = -40					; size = 4
_x0$1$ = -36						; size = 4
_p$GSCopy$1$ = -32					; size = 4
_r$GSCopy$1$ = -28					; size = 4
_ctx$GSCopy$1$ = -24					; size = 4
_zz$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_p$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_GF2m_mod_mul_arr PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 491
	mov	eax, 52					; 00000034H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+52], eax
	mov	eax, DWORD PTR _r$[esp+48]
	mov	ecx, DWORD PTR _p$[esp+48]
	push	ebx
	mov	ebx, DWORD PTR _ctx$[esp+52]
	push	esi
	mov	esi, DWORD PTR _a$[esp+56]
	push	edi
	mov	edi, DWORD PTR _b$[esp+60]
	mov	DWORD PTR _r$GSCopy$1$[esp+64], eax
	mov	DWORD PTR _a$GSCopy$1$[esp+64], esi
	mov	DWORD PTR _b$GSCopy$1$[esp+64], edi
	mov	DWORD PTR _p$GSCopy$1$[esp+64], ecx
	mov	DWORD PTR _ctx$GSCopy$1$[esp+64], ebx
; Line 492
	mov	DWORD PTR _ret$1$[esp+64], 0
; Line 500
	push	ebx
	cmp	esi, edi
	jne	SHORT $LN17@BN_GF2m_mo
	push	ecx
	push	esi
	push	eax
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
; Line 535
	mov	ecx, DWORD PTR __$ArrayPad$[esp+52]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	ret	0
$LN17@BN_GF2m_mo:
; Line 503
	call	_BN_CTX_start
; Line 504
	push	ebx
	call	_BN_CTX_get
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	je	$err$63
; Line 507
	push	ebp
	mov	ebp, DWORD PTR [esi+4]
	add	ebp, 4
	add	ebp, DWORD PTR [edi+4]
; Line 508
	cmp	ebp, DWORD PTR [ebx+8]
	jle	SHORT $LN25@BN_GF2m_mo
	push	ebp
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN25@BN_GF2m_mo:
	test	eax, eax
	je	$LN60@BN_GF2m_mo
; Line 512
	xor	esi, esi
	mov	DWORD PTR [ebx+4], ebp
	test	ebp, ebp
	jle	SHORT $LN3@BN_GF2m_mo
	cmp	ebp, 4
	jb	SHORT $LN42@BN_GF2m_mo
; Line 513
	mov	edi, DWORD PTR [ebx]
	lea	eax, DWORD PTR [ebp-1]
	lea	eax, DWORD PTR [edi+eax*4]
	cmp	edi, ebx
	ja	SHORT $LN43@BN_GF2m_mo
	cmp	eax, ebx
	jae	SHORT $LN42@BN_GF2m_mo
$LN43@BN_GF2m_mo:
	mov	eax, ebp
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN61@BN_GF2m_mo
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN61@BN_GF2m_mo:
	mov	ecx, ebp
	sub	ecx, eax
$LL4@BN_GF2m_mo:
; Line 512
	add	esi, 4
	cmp	esi, ecx
	jl	SHORT $LL4@BN_GF2m_mo
; Line 513
	lea	eax, DWORD PTR [ecx+3]
	cdq
	and	edx, 3
	lea	ecx, DWORD PTR [edx+eax]
	sar	ecx, 2
	shl	ecx, 4
	shr	ecx, 2
	xor	eax, eax
	rep stosd
$LN42@BN_GF2m_mo:
; Line 512
	cmp	esi, ebp
	jge	SHORT $LN3@BN_GF2m_mo
$LL41@BN_GF2m_mo:
; Line 513
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [eax+esi*4], 0
	inc	esi
	cmp	esi, ebp
	jl	SHORT $LL41@BN_GF2m_mo
$LN3@BN_GF2m_mo:
; Line 515
	mov	esi, DWORD PTR _b$GSCopy$1$[esp+68]
	xor	eax, eax
	mov	DWORD PTR _j$1$[esp+68], eax
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	jle	$LN6@BN_GF2m_mo
	mov	ebp, DWORD PTR _a$GSCopy$1$[esp+68]
	mov	edx, DWORD PTR [ebp+4]
	npad	1
$LL7@BN_GF2m_mo:
	mov	esi, DWORD PTR [esi]
	lea	edi, DWORD PTR [eax*4]
; Line 516
	mov	eax, DWORD PTR [esi+edi]
	mov	DWORD PTR _y0$1$[esp+68], eax
; Line 517
	mov	eax, DWORD PTR _j$1$[esp+68]
	inc	eax
	cmp	eax, ecx
	jne	SHORT $LN26@BN_GF2m_mo
	mov	DWORD PTR _y1$1$[esp+68], 0
	jmp	SHORT $LN27@BN_GF2m_mo
$LN26@BN_GF2m_mo:
	mov	eax, DWORD PTR [esi+edi+4]
	mov	DWORD PTR _y1$1$[esp+68], eax
$LN27@BN_GF2m_mo:
; Line 518
	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN5@BN_GF2m_mo
$LL10@BN_GF2m_mo:
	mov	eax, DWORD PTR [ebp]
; Line 519
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _x0$1$[esp+68], ecx
; Line 520
	lea	ecx, DWORD PTR [esi+1]
	cmp	ecx, edx
	jne	SHORT $LN28@BN_GF2m_mo
	xor	eax, eax
	jmp	SHORT $LN29@BN_GF2m_mo
$LN28@BN_GF2m_mo:
	mov	eax, DWORD PTR [eax+esi*4+4]
$LN29@BN_GF2m_mo:
; Line 521
	push	DWORD PTR _y0$1$[esp+68]
	push	DWORD PTR _y1$1$[esp+72]
	push	DWORD PTR _x0$1$[esp+76]
	push	eax
	lea	eax, DWORD PTR _zz$[esp+84]
	push	eax
	call	_bn_GF2m_mul_2x2
; Line 523
	mov	ecx, DWORD PTR [ebx]
	add	esi, 2
	mov	eax, DWORD PTR _zz$[esp+88]
	add	esp, 20					; 00000014H
	xor	DWORD PTR [ecx+edi], eax
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _zz$[esp+72]
	xor	DWORD PTR [ecx+edi+4], eax
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _zz$[esp+76]
	xor	DWORD PTR [ecx+edi+8], eax
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _zz$[esp+80]
	xor	DWORD PTR [ecx+edi+12], eax
	add	edi, 8
	mov	edx, DWORD PTR [ebp+4]
	cmp	esi, edx
	jl	SHORT $LL10@BN_GF2m_mo
$LN5@BN_GF2m_mo:
; Line 515
	mov	esi, DWORD PTR _b$GSCopy$1$[esp+68]
	mov	eax, DWORD PTR _j$1$[esp+68]
	add	eax, 2
	mov	DWORD PTR _j$1$[esp+68], eax
	mov	ecx, DWORD PTR [esi+4]
	cmp	eax, ecx
	jl	$LL7@BN_GF2m_mo
$LN6@BN_GF2m_mo:
; Line 527
	mov	ecx, DWORD PTR [ebx+4]
	test	ecx, ecx
	jle	SHORT $LN20@BN_GF2m_mo
	mov	eax, DWORD PTR [ebx]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL16@BN_GF2m_mo:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN35@BN_GF2m_mo
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL16@BN_GF2m_mo
$LN35@BN_GF2m_mo:
	mov	DWORD PTR [ebx+4], ecx
$LN20@BN_GF2m_mo:
; Line 528
	push	DWORD PTR _p$GSCopy$1$[esp+68]
	push	ebx
	push	DWORD PTR _r$GSCopy$1$[esp+76]
	call	_BN_GF2m_mod_arr
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+68], ecx
$LN60@BN_GF2m_mo:
	pop	ebp
$err$63:
; Line 533
	push	DWORD PTR _ctx$GSCopy$1$[esp+64]
	call	_BN_CTX_end
; Line 535
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	add	esp, 4
	mov	eax, DWORD PTR _ret$1$[esp+64]
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	ret	0
_BN_GF2m_mod_mul_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_arr
_TEXT	SEGMENT
_j$2$ = -12						; size = 4
tv695 = -8						; size = 4
tv704 = -4						; size = 4
_dN$1$ = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_z$1$ = 16						; size = 4
_p$ = 16						; size = 4
_BN_GF2m_mod_arr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 372
	mov	eax, 12					; 0000000cH
	call	__chkstk
	push	ebx
; Line 379
	mov	ebx, DWORD PTR _p$[esp+12]
	cmp	DWORD PTR [ebx], 0
	jne	SHORT $LN19@BN_GF2m_mo
; Line 381
	push	0
	push	DWORD PTR _r$[esp+16]
	call	_BN_set_word
	add	esp, 8
; Line 382
	mov	eax, 1
	pop	ebx
; Line 461
	add	esp, 12					; 0000000cH
	ret	0
$LN19@BN_GF2m_mo:
	push	esi
; Line 389
	mov	esi, DWORD PTR _a$[esp+16]
	push	edi
	mov	edi, DWORD PTR _r$[esp+20]
	cmp	esi, edi
	je	SHORT $LN20@BN_GF2m_mo
; Line 390
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [edi+8]
	jg	SHORT $LN32@BN_GF2m_mo
	mov	eax, edi
	jmp	SHORT $LN33@BN_GF2m_mo
$LN32@BN_GF2m_mo:
	push	eax
	push	edi
	call	_bn_expand2
	add	esp, 8
$LN33@BN_GF2m_mo:
	test	eax, eax
	jne	SHORT $LN21@BN_GF2m_mo
	pop	edi
	pop	esi
	pop	ebx
; Line 461
	add	esp, 12					; 0000000cH
	ret	0
$LN21@BN_GF2m_mo:
; Line 392
	xor	edx, edx
	cmp	DWORD PTR [esi+4], edx
	jle	SHORT $LN3@BN_GF2m_mo
$LL4@BN_GF2m_mo:
; Line 393
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+edx*4], eax
	inc	edx
	cmp	edx, DWORD PTR [esi+4]
	jl	SHORT $LL4@BN_GF2m_mo
$LN3@BN_GF2m_mo:
; Line 395
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
$LN20@BN_GF2m_mo:
; Line 400
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edi]
	cdq
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _z$1$[esp+20], ecx
	push	ebp
	lea	ebp, DWORD PTR [edx+eax]
; Line 401
	mov	edx, DWORD PTR [edi+4]
	sar	ebp, 5
	dec	edx
	mov	DWORD PTR _dN$1$[esp+28], ebp
	mov	DWORD PTR _j$2$[esp+28], edx
	cmp	edx, ebp
	jle	$LN66@BN_GF2m_mo
; Line 402
	mov	eax, edx
	sub	eax, ebp
	lea	ebp, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv695[esp+28], ebp
	npad	6
$LL5@BN_GF2m_mo:
	mov	edi, DWORD PTR [ecx+edx*4]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 403
	test	edi, edi
	jne	SHORT $LN22@BN_GF2m_mo
; Line 404
	dec	edx
	sub	ebp, 4
	mov	DWORD PTR _j$2$[esp+28], edx
	mov	DWORD PTR tv695[esp+28], ebp
; Line 405
	jmp	$LN24@BN_GF2m_mo
$LN22@BN_GF2m_mo:
; Line 409
	lea	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR [ecx], 0
	mov	esi, 1
	je	SHORT $LN9@BN_GF2m_mo
	npad	2
$LL10@BN_GF2m_mo:
; Line 411
	mov	eax, DWORD PTR [ebx]
	sub	eax, DWORD PTR [ecx]
; Line 412
	mov	ebp, eax
	and	ebp, -2147483617			; 8000001fH
	jns	SHORT $LN62@BN_GF2m_mo
	dec	ebp
	or	ebp, -32				; ffffffe0H
	inc	ebp
$LN62@BN_GF2m_mo:
; Line 415
	mov	ecx, DWORD PTR _j$2$[esp+28]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	sub	ecx, eax
	mov	eax, DWORD PTR _z$1$[esp+24]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, edi
	mov	ecx, ebp
	shr	eax, cl
	xor	DWORD PTR [edx], eax
; Line 416
	test	ebp, ebp
	je	SHORT $LN8@BN_GF2m_mo
; Line 417
	mov	ecx, 32					; 00000020H
	mov	eax, edi
	sub	ecx, ebp
	shl	eax, cl
	xor	DWORD PTR [edx-4], eax
$LN8@BN_GF2m_mo:
; Line 409
	inc	esi
	cmp	DWORD PTR [ebx+esi*4], 0
	lea	ecx, DWORD PTR [ebx+esi*4]
	jne	SHORT $LL10@BN_GF2m_mo
	mov	edx, DWORD PTR _j$2$[esp+28]
	mov	ebp, DWORD PTR tv695[esp+28]
$LN9@BN_GF2m_mo:
; Line 422
	mov	esi, DWORD PTR [ebx]
	and	esi, -2147483617			; 8000001fH
	jns	SHORT $LN63@BN_GF2m_mo
	dec	esi
	or	esi, -32				; ffffffe0H
	inc	esi
$LN63@BN_GF2m_mo:
; Line 424
	mov	eax, edi
	mov	ecx, esi
	shr	eax, cl
	xor	DWORD PTR [ebp], eax
; Line 425
	test	esi, esi
	je	SHORT $LN59@BN_GF2m_mo
; Line 423
	mov	ecx, 32					; 00000020H
	sub	ecx, esi
; Line 426
	shl	edi, cl
	xor	DWORD PTR [ebp-4], edi
$LN59@BN_GF2m_mo:
	mov	ecx, DWORD PTR _z$1$[esp+24]
$LN24@BN_GF2m_mo:
; Line 401
	cmp	edx, DWORD PTR _dN$1$[esp+28]
	jg	$LL5@BN_GF2m_mo
; Line 430
	mov	ebp, DWORD PTR _dN$1$[esp+28]
	cmp	edx, ebp
$LN66@BN_GF2m_mo:
	jne	$LN58@BN_GF2m_mo
	lea	esi, DWORD PTR [ecx+ebp*4]
	mov	DWORD PTR tv704[esp+28], esi
	npad	2
$LL11@BN_GF2m_mo:
; Line 432
	mov	ecx, DWORD PTR [ebx]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN64@BN_GF2m_mo
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN64@BN_GF2m_mo:
; Line 433
	mov	eax, DWORD PTR [esi]
	mov	ebp, eax
	shr	ebp, cl
; Line 434
	test	ebp, ebp
	je	$LN58@BN_GF2m_mo
; Line 436
	mov	edx, 32					; 00000020H
	sub	edx, ecx
; Line 439
	test	ecx, ecx
	je	SHORT $LN26@BN_GF2m_mo
; Line 440
	mov	ecx, edx
	shl	eax, cl
	shr	eax, cl
	mov	DWORD PTR [esi], eax
	jmp	SHORT $LN27@BN_GF2m_mo
$LN26@BN_GF2m_mo:
; Line 442
	mov	DWORD PTR [esi], 0
$LN27@BN_GF2m_mo:
; Line 443
	mov	ecx, DWORD PTR _z$1$[esp+24]
; Line 445
	lea	eax, DWORD PTR [ebx+4]
	mov	edi, 1
	xor	DWORD PTR [ecx], ebp
	cmp	DWORD PTR [eax], 0
	je	SHORT $LL11@BN_GF2m_mo
	npad	5
$LL15@BN_GF2m_mo:
; Line 449
	mov	esi, DWORD PTR [eax]
	mov	eax, esi
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
; Line 450
	and	esi, -2147483617			; 8000001fH
	jns	SHORT $LN65@BN_GF2m_mo
	dec	esi
	or	esi, -32				; ffffffe0H
	inc	esi
$LN65@BN_GF2m_mo:
; Line 452
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, ebp
	mov	ecx, esi
	shl	eax, cl
	xor	DWORD PTR [edx], eax
; Line 453
	test	esi, esi
	je	SHORT $LN13@BN_GF2m_mo
	mov	ecx, 32					; 00000020H
	mov	eax, ebp
	sub	ecx, esi
	shr	eax, cl
	test	eax, eax
	je	SHORT $LN13@BN_GF2m_mo
; Line 454
	xor	DWORD PTR [edx+4], eax
$LN13@BN_GF2m_mo:
; Line 445
	mov	ecx, DWORD PTR _z$1$[esp+24]
	inc	edi
	cmp	DWORD PTR [ebx+edi*4], 0
	lea	eax, DWORD PTR [ebx+edi*4]
	jne	SHORT $LL15@BN_GF2m_mo
; Line 430
	mov	esi, DWORD PTR tv704[esp+28]
	jmp	$LL11@BN_GF2m_mo
$LN58@BN_GF2m_mo:
; Line 459
	mov	esi, DWORD PTR _r$[esp+24]
	pop	ebp
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	jle	SHORT $LN29@BN_GF2m_mo
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL18@BN_GF2m_mo:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN41@BN_GF2m_mo
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL18@BN_GF2m_mo
$LN41@BN_GF2m_mo:
	mov	DWORD PTR [esi+4], ecx
$LN29@BN_GF2m_mo:
	pop	edi
	pop	esi
; Line 460
	mov	eax, 1
	pop	ebx
; Line 461
	add	esp, 12					; 0000000cH
	ret	0
_BN_GF2m_mod_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_solve_quad
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_solve_quad PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1222
	push	ebx
	push	esi
; Line 1224
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	push	esi
	call	_BN_num_bits
; Line 1228
	push	1228					; 000004ccH
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [edi*4]
	push	eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 16					; 00000010H
	test	ebx, ebx
	je	SHORT $LN7@BN_GF2m_mo
; Line 1230
	push	edi
	push	ebx
	push	esi
	call	_BN_GF2m_poly2arr
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 1231
	test	esi, esi
	je	SHORT $LN4@BN_GF2m_mo
	cmp	esi, edi
	jg	SHORT $LN4@BN_GF2m_mo
; Line 1235
	push	DWORD PTR _ctx$[esp+8]
	push	ebx
	push	DWORD PTR _a$[esp+16]
	push	DWORD PTR _r$[esp+20]
	call	_BN_GF2m_mod_solve_quad_arr
	add	esp, 16					; 00000010H
	mov	esi, eax
; Line 1239
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1240
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1241
	ret	0
$LN4@BN_GF2m_mo:
; Line 1232
	push	1232					; 000004d0H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	106					; 0000006aH
	push	134					; 00000086H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$9:
; Line 1239
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1240
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1241
	ret	0
$LN7@BN_GF2m_mo:
	pop	edi
	pop	esi
; Line 1240
	xor	eax, eax
	pop	ebx
; Line 1241
	ret	0
_BN_GF2m_mod_solve_quad ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_sqrt
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_sqrt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1091
	push	ebx
	push	esi
; Line 1093
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	push	esi
	call	_BN_num_bits
; Line 1097
	push	1097					; 00000449H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [edi*4]
	push	eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 16					; 00000010H
	test	ebx, ebx
	je	SHORT $LN7@BN_GF2m_mo
; Line 1099
	push	edi
	push	ebx
	push	esi
	call	_BN_GF2m_poly2arr
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 1100
	test	esi, esi
	je	SHORT $LN4@BN_GF2m_mo
	cmp	esi, edi
	jg	SHORT $LN4@BN_GF2m_mo
; Line 1104
	push	DWORD PTR _ctx$[esp+8]
	push	ebx
	push	DWORD PTR _a$[esp+16]
	push	DWORD PTR _r$[esp+20]
	call	_BN_GF2m_mod_sqrt_arr
	add	esp, 16					; 00000010H
	mov	esi, eax
; Line 1108
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1109
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1110
	ret	0
$LN4@BN_GF2m_mo:
; Line 1101
	push	1101					; 0000044dH
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	106					; 0000006aH
	push	137					; 00000089H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$9:
; Line 1108
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1109
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1110
	ret	0
$LN7@BN_GF2m_mo:
	pop	edi
	pop	esi
; Line 1109
	xor	eax, eax
	pop	ebx
; Line 1110
	ret	0
_BN_GF2m_mod_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_exp
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_p$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_GF2m_mod_exp PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 1030
	push	ebx
	push	esi
; Line 1032
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	push	esi
	call	_BN_num_bits
; Line 1037
	push	1037					; 0000040dH
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [edi*4]
	push	eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 16					; 00000010H
	test	ebx, ebx
	je	SHORT $LN7@BN_GF2m_mo
; Line 1039
	push	edi
	push	ebx
	push	esi
	call	_BN_GF2m_poly2arr
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 1040
	test	esi, esi
	je	SHORT $LN4@BN_GF2m_mo
	cmp	esi, edi
	jg	SHORT $LN4@BN_GF2m_mo
; Line 1044
	push	DWORD PTR _ctx$[esp+8]
	push	ebx
	push	DWORD PTR _b$[esp+16]
	push	DWORD PTR _a$[esp+20]
	push	DWORD PTR _r$[esp+24]
	call	_BN_GF2m_mod_exp_arr
	mov	esi, eax
	add	esp, 20					; 00000014H
$err$10:
; Line 1048
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1049
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1050
	ret	0
$LN4@BN_GF2m_mo:
; Line 1041
	push	1041					; 00000411H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	106					; 0000006aH
	push	132					; 00000084H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err_1$11:
; Line 1048
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 1049
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1050
	ret	0
$LN7@BN_GF2m_mo:
	pop	edi
	pop	esi
; Line 1049
	xor	eax, eax
	pop	ebx
; Line 1050
	ret	0
_BN_GF2m_mod_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_div
_TEXT	SEGMENT
_r$ = 8							; size = 4
_y$ = 12						; size = 4
_x$ = 16						; size = 4
_p$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_GF2m_mod_div PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 835
	push	ebx
	push	esi
; Line 843
	mov	esi, DWORD PTR _ctx$[esp+4]
	push	edi
	push	esi
	xor	edi, edi
	call	_BN_CTX_start
; Line 844
	push	esi
	call	_BN_CTX_get
	mov	ebx, eax
	add	esp, 8
; Line 845
	test	ebx, ebx
	je	SHORT $err$7
; Line 848
	push	esi
	push	DWORD PTR _p$[esp+12]
	push	DWORD PTR _x$[esp+16]
	push	ebx
	call	_BN_GF2m_mod_inv
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$7
; Line 850
	push	esi
	push	DWORD PTR _p$[esp+12]
	push	ebx
	push	DWORD PTR _y$[esp+20]
	push	DWORD PTR _r$[esp+24]
	call	_BN_GF2m_mod_mul
	add	esp, 20					; 00000014H
	mov	ecx, 1
	test	eax, eax
	cmovne	edi, ecx
$err$7:
; Line 856
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 857
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 858
	ret	0
_BN_GF2m_mod_div ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_inv
_TEXT	SEGMENT
_vdp$1$ = -60						; size = 4
_cdp$1$ = -56						; size = 4
_top$1$ = -52						; size = 4
_bdp$1$ = -48						; size = 4
_c$1$ = -44						; size = 4
_v$1$ = -40						; size = 4
_udp$1$ = -36						; size = 4
_vbits$1$ = -32						; size = 4
_ubits$1$ = -28						; size = 4
_b$1$ = -24						; size = 4
tv1284 = -20						; size = 4
tv1283 = -20						; size = 4
tv1278 = -20						; size = 4
_i$2$ = -16						; size = 4
tv1287 = -16						; size = 4
tv1286 = -16						; size = 4
_u$1$ = -12						; size = 4
_ret$1$ = -8						; size = 4
tv1291 = -4						; size = 4
tv1289 = -4						; size = 4
tv1288 = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_inv PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 634
	mov	eax, 60					; 0000003cH
	call	__chkstk
	push	esi
; Line 641
	mov	esi, DWORD PTR _ctx$[esp+60]
	push	esi
	mov	DWORD PTR _ret$1$[esp+68], 0
	call	_BN_CTX_start
; Line 643
	push	esi
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 8
	mov	DWORD PTR _b$1$[esp+64], esi
	test	esi, esi
	je	$err$114
; Line 645
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+64]
	push	edi
	call	_BN_CTX_get
	mov	edx, eax
	add	esp, 4
	mov	DWORD PTR _c$1$[esp+68], edx
	test	edx, edx
	je	$LN109@BN_GF2m_mo
; Line 647
	push	edi
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR _u$1$[esp+68], esi
	test	esi, esi
	je	$LN109@BN_GF2m_mo
; Line 649
	push	edi
	call	_BN_CTX_get
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR _v$1$[esp+68], edi
	test	edi, edi
	je	$LN109@BN_GF2m_mo
; Line 652
	push	ebx
	mov	ebx, DWORD PTR _p$[esp+68]
	push	ebx
	push	DWORD PTR _a$[esp+72]
	push	esi
	call	_BN_GF2m_mod
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN110@BN_GF2m_mo
; Line 654
	cmp	DWORD PTR [esi+4], 0
	je	$LN110@BN_GF2m_mo
; Line 657
	push	ebx
	push	edi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN110@BN_GF2m_mo
; Line 697
	push	ebp
	push	esi
	call	_BN_num_bits
	mov	ebp, eax
; Line 698
	push	edi
	mov	DWORD PTR _ubits$1$[esp+84], ebp
	call	_BN_num_bits
; Line 699
	mov	edi, DWORD PTR [ebx+4]
	add	esp, 8
	mov	DWORD PTR _vbits$1$[esp+76], eax
	mov	DWORD PTR _top$1$[esp+76], edi
; Line 702
	cmp	edi, DWORD PTR [esi+8]
	jg	SHORT $LN45@BN_GF2m_mo
	mov	eax, esi
	jmp	SHORT $LN46@BN_GF2m_mo
$LN45@BN_GF2m_mo:
	push	edi
	push	esi
	call	_bn_expand2
	add	esp, 8
$LN46@BN_GF2m_mo:
	test	eax, eax
	je	$LN111@BN_GF2m_mo
; Line 705
	mov	edx, DWORD PTR _u$1$[esp+76]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR _udp$1$[esp+76], esi
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, edi
	jge	SHORT $LN4@BN_GF2m_mo
; Line 704
	mov	ecx, DWORD PTR _top$1$[esp+76]
	lea	edi, DWORD PTR [esi+eax*4]
	sub	ecx, eax
	xor	eax, eax
	rep stosd
	mov	edi, DWORD PTR _top$1$[esp+76]
$LN4@BN_GF2m_mo:
; Line 708
	mov	ebx, DWORD PTR _b$1$[esp+76]
	mov	DWORD PTR [edx+4], edi
	cmp	edi, DWORD PTR [ebx+8]
	jg	SHORT $LN47@BN_GF2m_mo
	mov	eax, ebx
	jmp	SHORT $LN48@BN_GF2m_mo
$LN47@BN_GF2m_mo:
	push	edi
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN48@BN_GF2m_mo:
	test	eax, eax
	je	$LN111@BN_GF2m_mo
; Line 710
	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR _bdp$1$[esp+76], edx
; Line 711
	mov	DWORD PTR [edx], 1
; Line 712
	cmp	edi, 1
	jle	SHORT $LN6@BN_GF2m_mo
	lea	ecx, DWORD PTR [edi-1]
; Line 713
	xor	eax, eax
	lea	edi, DWORD PTR [edx+4]
	rep stosd
	mov	edi, DWORD PTR _top$1$[esp+76]
$LN6@BN_GF2m_mo:
; Line 715
	mov	ecx, DWORD PTR _c$1$[esp+76]
	mov	DWORD PTR [ebx+4], edi
	cmp	edi, DWORD PTR [ecx+8]
	jg	SHORT $LN49@BN_GF2m_mo
	mov	eax, ecx
	jmp	SHORT $LN50@BN_GF2m_mo
$LN49@BN_GF2m_mo:
	push	edi
	push	ecx
	call	_bn_expand2
	mov	edx, DWORD PTR _bdp$1$[esp+84]
	add	esp, 8
	mov	ecx, DWORD PTR _c$1$[esp+76]
$LN50@BN_GF2m_mo:
	test	eax, eax
	je	$LN111@BN_GF2m_mo
; Line 717
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR _cdp$1$[esp+76], ebx
; Line 718
	test	edi, edi
	jle	SHORT $LN9@BN_GF2m_mo
; Line 719
	mov	ecx, edi
	xor	eax, eax
	mov	edi, ebx
	rep stosd
	mov	edi, DWORD PTR _top$1$[esp+76]
	mov	ecx, DWORD PTR _c$1$[esp+76]
$LN9@BN_GF2m_mo:
; Line 721
	mov	eax, DWORD PTR _v$1$[esp+76]
	mov	DWORD PTR [ecx+4], edi
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vdp$1$[esp+76], ecx
$LL11@BN_GF2m_mo:
; Line 726
	test	ebp, ebp
	je	$LN14@BN_GF2m_mo
	npad	3
$LL13@BN_GF2m_mo:
	mov	ebx, DWORD PTR [esi]
	test	bl, 1
	jne	$LN101@BN_GF2m_mo
; Line 732
	mov	ecx, DWORD PTR _p$[esp+72]
; Line 733
	dec	edi
	mov	eax, DWORD PTR [edx]
	mov	ebp, eax
	and	ebp, 1
	neg	ebp
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx]
	and	ecx, ebp
	xor	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR _i$2$[esp+76], ecx
	test	edi, edi
	jle	SHORT $LN16@BN_GF2m_mo
	mov	ecx, esi
	mov	DWORD PTR tv1278[esp+76], -4		; fffffffcH
	sub	ecx, edx
	lea	edi, DWORD PTR [edx+4]
	sub	DWORD PTR tv1278[esp+76], edx
	mov	DWORD PTR tv1291[esp+76], ecx
	jmp	SHORT $LN72@BN_GF2m_mo
$LL103@BN_GF2m_mo:
	mov	ecx, DWORD PTR tv1291[esp+76]
$LN72@BN_GF2m_mo:
; Line 734
	mov	edx, DWORD PTR [edi+ecx]
; Line 735
	mov	ecx, edx
	shl	ecx, 31					; 0000001fH
	shr	ebx, 1
	or	ecx, ebx
; Line 738
	shr	eax, 1
	mov	ebx, DWORD PTR _i$2$[esp+76]
	mov	DWORD PTR [esi+ebx*4], ecx
	mov	ebx, edx
	mov	ecx, DWORD PTR _p$[esp+72]
	mov	edx, DWORD PTR tv1278[esp+76]
	mov	esi, DWORD PTR _udp$1$[esp+76]
	add	edx, edi
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+ecx+4]
	and	edx, ebp
	xor	edx, DWORD PTR [edi]
	mov	ecx, edx
	shl	ecx, 31					; 0000001fH
	or	ecx, eax
; Line 739
	mov	eax, edx
	mov	edx, DWORD PTR _top$1$[esp+76]
	mov	DWORD PTR [edi-4], ecx
	dec	edx
	mov	ecx, DWORD PTR _i$2$[esp+76]
	add	edi, 4
	inc	ecx
	mov	DWORD PTR _i$2$[esp+76], ecx
	cmp	ecx, edx
	jl	SHORT $LL103@BN_GF2m_mo
	mov	edx, DWORD PTR _bdp$1$[esp+76]
$LN16@BN_GF2m_mo:
; Line 743
	mov	ebp, DWORD PTR _ubits$1$[esp+76]
	mov	edi, DWORD PTR _top$1$[esp+76]
	shr	ebx, 1
	shr	eax, 1
	sub	ebp, 1
	mov	DWORD PTR [esi+ecx*4], ebx
	mov	DWORD PTR [edx+ecx*4], eax
	mov	DWORD PTR _ubits$1$[esp+76], ebp
	jne	$LL13@BN_GF2m_mo
$LN101@BN_GF2m_mo:
	mov	ebx, DWORD PTR _cdp$1$[esp+76]
	mov	ecx, DWORD PTR _vdp$1$[esp+76]
$LN14@BN_GF2m_mo:
; Line 746
	cmp	ebp, 32					; 00000020H
	jg	SHORT $LN38@BN_GF2m_mo
; Line 747
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	$LN111@BN_GF2m_mo
; Line 749
	cmp	eax, 1
	je	$LN62@BN_GF2m_mo
$LN38@BN_GF2m_mo:
; Line 753
	cmp	ebp, DWORD PTR _vbits$1$[esp+76]
	jge	SHORT $LN104@BN_GF2m_mo
; Line 758
	mov	edx, DWORD PTR _v$1$[esp+76]
	mov	eax, ebp
	mov	ebp, DWORD PTR _vbits$1$[esp+76]
; Line 763
	mov	esi, ecx
	mov	DWORD PTR _vbits$1$[esp+76], eax
	mov	eax, DWORD PTR _u$1$[esp+76]
	mov	DWORD PTR _v$1$[esp+76], eax
	mov	eax, DWORD PTR _b$1$[esp+76]
; Line 764
	mov	ecx, DWORD PTR _v$1$[esp+76]
	mov	DWORD PTR _u$1$[esp+76], edx
	mov	edx, DWORD PTR _c$1$[esp+76]
	mov	DWORD PTR _b$1$[esp+76], edx
; Line 765
	mov	edx, ebx
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _c$1$[esp+76], eax
; Line 766
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _ubits$1$[esp+76], ebp
	mov	DWORD PTR _udp$1$[esp+76], esi
	mov	DWORD PTR _vdp$1$[esp+76], ecx
	mov	DWORD PTR _bdp$1$[esp+76], edx
	mov	DWORD PTR _cdp$1$[esp+76], eax
	jmp	SHORT $LN39@BN_GF2m_mo
$LN104@BN_GF2m_mo:
	mov	eax, DWORD PTR _cdp$1$[esp+76]
$LN39@BN_GF2m_mo:
; Line 768
	xor	ebx, ebx
	test	edi, edi
	jle	$LN19@BN_GF2m_mo
	cmp	edi, 4
	jb	$LN108@BN_GF2m_mo
; Line 770
	lea	eax, DWORD PTR [eax+edi*4]
	add	eax, -4					; fffffffcH
	lea	ecx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [edx+ecx*4]
	cmp	edx, eax
	ja	SHORT $LN76@BN_GF2m_mo
	cmp	ecx, DWORD PTR _cdp$1$[esp+76]
	jae	$LN108@BN_GF2m_mo
$LN76@BN_GF2m_mo:
	lea	eax, DWORD PTR [edi-1]
	lea	eax, DWORD PTR [esi+eax*4]
	lea	ecx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [edx+ecx*4]
	cmp	edx, eax
	ja	SHORT $LN77@BN_GF2m_mo
	cmp	ecx, esi
	jae	$LN108@BN_GF2m_mo
$LN77@BN_GF2m_mo:
	mov	eax, DWORD PTR _vdp$1$[esp+76]
	lea	ecx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [edx+ecx*4]
	lea	eax, DWORD PTR [eax+edi*4]
	add	eax, -4					; fffffffcH
	cmp	edx, eax
	ja	SHORT $LN78@BN_GF2m_mo
	mov	eax, DWORD PTR _vdp$1$[esp+76]
	cmp	ecx, eax
	jae	$LN75@BN_GF2m_mo
$LN78@BN_GF2m_mo:
	mov	eax, DWORD PTR _cdp$1$[esp+76]
	lea	ecx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [esi+ecx*4]
	lea	eax, DWORD PTR [eax+edi*4]
	add	eax, -4					; fffffffcH
	cmp	esi, eax
	ja	SHORT $LN79@BN_GF2m_mo
	cmp	ecx, DWORD PTR _cdp$1$[esp+76]
	jae	$LN108@BN_GF2m_mo
$LN79@BN_GF2m_mo:
	mov	eax, DWORD PTR _vdp$1$[esp+76]
	lea	ecx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [esi+ecx*4]
	lea	eax, DWORD PTR [eax+edi*4]
	add	eax, -4					; fffffffcH
	cmp	esi, eax
	ja	SHORT $LN80@BN_GF2m_mo
	mov	eax, DWORD PTR _vdp$1$[esp+76]
	cmp	ecx, eax
	jae	$LN75@BN_GF2m_mo
$LN80@BN_GF2m_mo:
	mov	eax, edi
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN112@BN_GF2m_mo
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN112@BN_GF2m_mo:
; Line 768
	mov	edx, DWORD PTR _vdp$1$[esp+76]
	mov	ecx, edi
	mov	edi, DWORD PTR _bdp$1$[esp+76]
	sub	edx, esi
	mov	DWORD PTR tv1289[esp+76], edx
	sub	ecx, eax
	mov	edx, DWORD PTR _cdp$1$[esp+76]
	mov	eax, esi
	sub	edx, esi
	sub	edi, esi
	mov	DWORD PTR tv1287[esp+76], edx
	mov	edx, DWORD PTR tv1289[esp+76]
	mov	DWORD PTR tv1284[esp+76], edi
	mov	edi, DWORD PTR tv1287[esp+76]
	mov	esi, DWORD PTR tv1284[esp+76]
$LL20@BN_GF2m_mo:
; Line 769
	movups	xmm0, XMMWORD PTR [eax]
	add	ebx, 4
	lea	eax, DWORD PTR [eax+16]
	movups	xmm1, XMMWORD PTR [edx+eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-16], xmm1
; Line 770
	movups	xmm1, XMMWORD PTR [edi+eax-16]
	movups	xmm0, XMMWORD PTR [esi+eax-16]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [esi+eax-16], xmm1
	cmp	ebx, ecx
	jl	SHORT $LL20@BN_GF2m_mo
	mov	esi, DWORD PTR _udp$1$[esp+76]
	mov	edx, DWORD PTR _bdp$1$[esp+76]
	mov	edi, DWORD PTR _top$1$[esp+76]
$LN108@BN_GF2m_mo:
	mov	eax, DWORD PTR _vdp$1$[esp+76]
$LN75@BN_GF2m_mo:
; Line 768
	cmp	ebx, edi
	jge	SHORT $LN19@BN_GF2m_mo
	sub	eax, esi
	lea	ecx, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR tv1288[esp+76], eax
	sub	edx, esi
	mov	eax, DWORD PTR _cdp$1$[esp+76]
	sub	eax, esi
	mov	DWORD PTR tv1283[esp+76], edx
	mov	esi, DWORD PTR tv1288[esp+76]
	sub	edi, ebx
	mov	DWORD PTR tv1286[esp+76], eax
	mov	ebx, eax
$LL74@BN_GF2m_mo:
; Line 769
	mov	eax, DWORD PTR [ecx+esi]
	lea	ecx, DWORD PTR [ecx+4]
	xor	DWORD PTR [ecx-4], eax
; Line 770
	mov	eax, DWORD PTR [ecx+ebx-4]
	xor	DWORD PTR [ecx+edx-4], eax
	sub	edi, 1
	jne	SHORT $LL74@BN_GF2m_mo
	mov	esi, DWORD PTR _udp$1$[esp+76]
	mov	edx, DWORD PTR _bdp$1$[esp+76]
	mov	edi, DWORD PTR _top$1$[esp+76]
$LN19@BN_GF2m_mo:
; Line 772
	mov	ebx, DWORD PTR _cdp$1$[esp+76]
	mov	ecx, DWORD PTR _vdp$1$[esp+76]
	cmp	ebp, DWORD PTR _vbits$1$[esp+76]
	jne	$LL11@BN_GF2m_mo
; Line 774
	lea	eax, DWORD PTR [ebp-1]
	cdq
	and	edx, 31					; 0000001fH
	lea	edi, DWORD PTR [edx+eax]
	sar	edi, 5
; Line 776
	mov	eax, DWORD PTR [esi+edi*4]
	test	eax, eax
	jne	SHORT $LN102@BN_GF2m_mo
	npad	4
$LL21@BN_GF2m_mo:
	test	edi, edi
	je	SHORT $LN102@BN_GF2m_mo
	mov	eax, DWORD PTR [esi+edi*4-4]
; Line 777
	dec	edi
	test	eax, eax
	je	SHORT $LL21@BN_GF2m_mo
$LN102@BN_GF2m_mo:
; Line 778
	push	eax
	call	_BN_num_bits_word
; Line 780
	mov	edx, DWORD PTR _bdp$1$[esp+80]
	add	esp, 4
	mov	ebx, DWORD PTR _cdp$1$[esp+76]
	mov	ecx, DWORD PTR _vdp$1$[esp+76]
	shl	edi, 5
	lea	ebp, DWORD PTR [edi+eax]
	mov	edi, DWORD PTR _top$1$[esp+76]
	mov	DWORD PTR _ubits$1$[esp+76], ebp
	jmp	$LL11@BN_GF2m_mo
$LN62@BN_GF2m_mo:
; Line 781
	mov	esi, DWORD PTR _b$1$[esp+76]
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	jle	SHORT $LN41@BN_GF2m_mo
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [ecx-1]
	lea	edx, DWORD PTR [eax+edx*4]
$LL25@BN_GF2m_mo:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN63@BN_GF2m_mo
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL25@BN_GF2m_mo
$LN63@BN_GF2m_mo:
	mov	DWORD PTR [esi+4], ecx
$LN41@BN_GF2m_mo:
; Line 785
	push	esi
	push	DWORD PTR _r$[esp+76]
	call	_BN_copy
	xor	ecx, ecx
	add	esp, 8
	test	eax, eax
	mov	edx, 1
	cmovne	ecx, edx
	mov	DWORD PTR _ret$1$[esp+76], ecx
$LN111@BN_GF2m_mo:
	pop	ebp
$LN110@BN_GF2m_mo:
	pop	ebx
$LN109@BN_GF2m_mo:
	pop	edi
$err$114:
; Line 797
	push	DWORD PTR _ctx$[esp+60]
	call	_BN_CTX_end
; Line 798
	mov	eax, DWORD PTR _ret$1$[esp+68]
	add	esp, 4
	pop	esi
; Line 799
	add	esp, 60					; 0000003cH
	ret	0
_BN_GF2m_mod_inv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_sqr
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_GF2m_mod_sqr PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 605
	push	ebx
	push	esi
; Line 607
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	push	esi
	call	_BN_num_bits
; Line 612
	push	612					; 00000264H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [edi*4]
	push	eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 16					; 00000010H
	test	ebx, ebx
	je	SHORT $LN7@BN_GF2m_mo
; Line 614
	push	edi
	push	ebx
	push	esi
	call	_BN_GF2m_poly2arr
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 615
	test	esi, esi
	je	SHORT $LN4@BN_GF2m_mo
	cmp	esi, edi
	jg	SHORT $LN4@BN_GF2m_mo
; Line 619
	push	DWORD PTR _ctx$[esp+8]
	push	ebx
	push	DWORD PTR _a$[esp+16]
	push	DWORD PTR _r$[esp+20]
	call	_BN_GF2m_mod_sqr_arr
	add	esp, 16					; 00000010H
	mov	esi, eax
; Line 623
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 624
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 625
	ret	0
$LN4@BN_GF2m_mo:
; Line 616
	push	616					; 00000268H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	106					; 0000006aH
	push	136					; 00000088H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$9:
; Line 623
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 624
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 625
	ret	0
$LN7@BN_GF2m_mo:
	pop	edi
	pop	esi
; Line 624
	xor	eax, eax
	pop	ebx
; Line 625
	ret	0
_BN_GF2m_mod_sqr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod_mul
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_p$ = 20						; size = 4
_ctx$ = 24						; size = 4
_BN_GF2m_mod_mul PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 546
	push	ebx
	push	esi
; Line 548
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	push	esi
	call	_BN_num_bits
; Line 553
	push	553					; 00000229H
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [edi*4]
	push	eax
	call	_CRYPTO_malloc
	mov	ebx, eax
	add	esp, 16					; 00000010H
	test	ebx, ebx
	je	SHORT $LN7@BN_GF2m_mo
; Line 555
	push	edi
	push	ebx
	push	esi
	call	_BN_GF2m_poly2arr
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 556
	test	esi, esi
	je	SHORT $LN4@BN_GF2m_mo
	cmp	esi, edi
	jg	SHORT $LN4@BN_GF2m_mo
; Line 560
	push	DWORD PTR _ctx$[esp+8]
	push	ebx
	push	DWORD PTR _b$[esp+16]
	push	DWORD PTR _a$[esp+20]
	push	DWORD PTR _r$[esp+24]
	call	_BN_GF2m_mod_mul_arr
	mov	esi, eax
	add	esp, 20					; 00000014H
$err$10:
; Line 564
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 565
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 566
	ret	0
$LN4@BN_GF2m_mo:
; Line 557
	push	557					; 0000022dH
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	106					; 0000006aH
	push	133					; 00000085H
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err_1$11:
; Line 564
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
; Line 565
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 566
	ret	0
$LN7@BN_GF2m_mo:
	pop	edi
	pop	esi
; Line 565
	xor	eax, eax
	pop	ebx
; Line 566
	ret	0
_BN_GF2m_mod_mul ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_mod
_TEXT	SEGMENT
_arr$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_p$ = 16						; size = 4
_BN_GF2m_mod PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 470
	mov	eax, 28					; 0000001cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+28], eax
	mov	eax, DWORD PTR _p$[esp+24]
; Line 475
	lea	ecx, DWORD PTR _arr$[esp+28]
	push	esi
	mov	esi, DWORD PTR _r$[esp+28]
	push	edi
	mov	edi, DWORD PTR _a$[esp+32]
	push	6
	push	ecx
	push	eax
	call	_BN_GF2m_poly2arr
	add	esp, 12					; 0000000cH
; Line 476
	test	eax, eax
	je	SHORT $LN3@BN_GF2m_mo
	cmp	eax, 6
	jg	SHORT $LN3@BN_GF2m_mo
; Line 480
	lea	eax, DWORD PTR _arr$[esp+36]
	push	eax
	push	edi
	push	esi
	call	_BN_GF2m_mod_arr
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 483
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN3@BN_GF2m_mo:
; Line 477
	push	477					; 000001ddH
	push	OFFSET ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
	push	106					; 0000006aH
	push	131					; 00000083H
	push	3
	call	_ERR_put_error
; Line 483
	mov	ecx, DWORD PTR __$ArrayPad$[esp+56]
	add	esp, 20					; 00000014H
	xor	eax, eax
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
_BN_GF2m_mod ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_GF2m_add
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_BN_GF2m_add PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gf2m.c
; Line 339
	mov	ecx, DWORD PTR _b$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+4]
	push	edi
	mov	eax, DWORD PTR [ebp+4]
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN11@BN_GF2m_ad
; Line 340
	mov	edi, ecx
; Line 342
	jmp	SHORT $LN12@BN_GF2m_ad
$LN11@BN_GF2m_ad:
; Line 343
	mov	edi, ebp
; Line 344
	mov	ebp, ecx
$LN12@BN_GF2m_ad:
; Line 347
	mov	ebx, DWORD PTR _r$[esp+8]
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [ebx+8]
	jg	SHORT $LN17@BN_GF2m_ad
	mov	eax, ebx
	jmp	SHORT $LN18@BN_GF2m_ad
$LN17@BN_GF2m_ad:
	push	eax
	push	ebx
	call	_bn_expand2
	add	esp, 8
$LN18@BN_GF2m_ad:
	test	eax, eax
	jne	SHORT $LN13@BN_GF2m_ad
	pop	edi
	pop	ebp
	pop	ebx
; Line 361
	ret	0
$LN13@BN_GF2m_ad:
	push	esi
; Line 350
	xor	esi, esi
	cmp	DWORD PTR [ebp+4], esi
	jle	SHORT $LN3@BN_GF2m_ad
$LL4@BN_GF2m_ad:
; Line 351
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ebx]
	xor	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+esi*4], edx
	inc	esi
	cmp	esi, DWORD PTR [ebp+4]
	jl	SHORT $LL4@BN_GF2m_ad
$LN3@BN_GF2m_ad:
; Line 353
	cmp	esi, DWORD PTR [edi+4]
	jge	SHORT $LN6@BN_GF2m_ad
$LL7@BN_GF2m_ad:
; Line 354
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+esi*4], eax
	inc	esi
	cmp	esi, DWORD PTR [edi+4]
	jl	SHORT $LL7@BN_GF2m_ad
$LN6@BN_GF2m_ad:
; Line 357
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], ecx
	pop	esi
; Line 358
	test	ecx, ecx
	jle	SHORT $LN14@BN_GF2m_ad
	mov	edx, DWORD PTR [ebx]
	add	edx, -4					; fffffffcH
	lea	edx, DWORD PTR [edx+ecx*4]
$LL10@BN_GF2m_ad:
	mov	eax, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx-4]
	test	eax, eax
	jne	SHORT $LN22@BN_GF2m_ad
	dec	ecx
	test	ecx, ecx
	jg	SHORT $LL10@BN_GF2m_ad
$LN22@BN_GF2m_ad:
	mov	DWORD PTR [ebx+4], ecx
$LN14@BN_GF2m_ad:
	pop	edi
	pop	ebp
; Line 360
	mov	eax, 1
	pop	ebx
; Line 361
	ret	0
_BN_GF2m_add ENDP
_TEXT	ENDS
END
