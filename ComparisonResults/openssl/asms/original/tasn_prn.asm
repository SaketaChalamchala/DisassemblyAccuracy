; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_default_pctx
_DATA	SEGMENT
_default_pctx DD 01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?spaces@?1??asn1_print_fsname@@9@9 DB '                    ', 00H ; `asn1_print_fsname'::`2'::spaces
_DATA	ENDS
PUBLIC	_ASN1_item_print
PUBLIC	_ASN1_PCTX_new
PUBLIC	_ASN1_PCTX_free
PUBLIC	_ASN1_PCTX_get_flags
PUBLIC	_ASN1_PCTX_set_flags
PUBLIC	_ASN1_PCTX_get_nm_flags
PUBLIC	_ASN1_PCTX_set_nm_flags
PUBLIC	_ASN1_PCTX_get_cert_flags
PUBLIC	_ASN1_PCTX_set_cert_flags
PUBLIC	_ASN1_PCTX_get_oid_flags
PUBLIC	_ASN1_PCTX_set_oid_flags
PUBLIC	_ASN1_PCTX_get_str_flags
PUBLIC	_ASN1_PCTX_set_str_flags
PUBLIC	_asn1_template_print_ctx
PUBLIC	??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@ ; `string'
PUBLIC	??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@ ; `string'
PUBLIC	??_C@_03NMMCOAOG@?5?$HL?6?$AA@			; `string'
PUBLIC	??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@		; `string'
PUBLIC	??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_03KPIFFHNE@SET?$AA@			; `string'
PUBLIC	??_C@_08POLPFBMC@SEQUENCE?$AA@			; `string'
PUBLIC	??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@ ; `string'
PUBLIC	??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@	; `string'
PUBLIC	??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@	; `string'
PUBLIC	??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@		; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@		; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE?$AA@			; `string'
PUBLIC	??_C@_04HCDDPBNL@TRUE?$AA@			; `string'
PUBLIC	??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_05NJDBAOFA@NULL?6?$AA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
EXTRN	_sk_num:PROC
EXTRN	_sk_value:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_puts:PROC
EXTRN	_BIO_dump_indent:PROC
EXTRN	_BIO_printf:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_ASN1_UTCTIME_print:PROC
EXTRN	_ASN1_GENERALIZEDTIME_print:PROC
EXTRN	_ASN1_STRING_print_ex:PROC
EXTRN	_ASN1_parse_dump:PROC
EXTRN	_ASN1_tag2str:PROC
EXTRN	_asn1_get_choice_selector:PROC
EXTRN	_asn1_get_field_ptr:PROC
EXTRN	_asn1_do_adb:PROC
EXTRN	_OBJ_nid2ln:PROC
EXTRN	_OBJ_obj2nid:PROC
EXTRN	_OBJ_obj2txt:PROC
EXTRN	_i2s_ASN1_INTEGER:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NJDBAOFA@NULL?6?$AA@
CONST	SEGMENT
??_C@_05NJDBAOFA@NULL?6?$AA@ DB 'NULL', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@ DB ' (%ld unused'
	DB	' bits)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@ DB '%s (%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCDDPBNL@TRUE?$AA@
CONST	SEGMENT
??_C@_04HCDDPBNL@TRUE?$AA@ DB 'TRUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE?$AA@ DB 'FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@
CONST	SEGMENT
??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@ DB 'BOOL ABSENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@ DB ' (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@
CONST	SEGMENT
??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@ DB '%*s<EMPTY>', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@
CONST	SEGMENT
??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@ DB '%*s%s:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@
CONST	SEGMENT
??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@ DB '%*s%s OF %s '
	DB	'{', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08POLPFBMC@SEQUENCE?$AA@
CONST	SEGMENT
??_C@_08POLPFBMC@SEQUENCE?$AA@ DB 'SEQUENCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KPIFFHNE@SET?$AA@
CONST	SEGMENT
??_C@_03KPIFFHNE@SET?$AA@ DB 'SET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@ DB 'Unprocessed type %'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@
CONST	SEGMENT
??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@ DB '%*s}', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03NMMCOAOG@?5?$HL?6?$AA@
CONST	SEGMENT
??_C@_03NMMCOAOG@?5?$HL?6?$AA@ DB ' {', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@
CONST	SEGMENT
??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@ DB 'E'
	DB	'RROR: selector [%d] invalid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@ DB ':EXTERNAL TYPE %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@
CONST	SEGMENT
??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@ DB '<ABSENT>', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@ DB '.\crypto\asn1\t'
	DB	'asn_prn.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_print_obstring_ctx
_TEXT	SEGMENT
_out$ = 8						; size = 4
_str$ = 12						; size = 4
_indent$ = 16						; size = 4
_pctx$ = 20						; size = 4
_asn1_print_obstring_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 471
	push	esi
; Line 472
	mov	esi, DWORD PTR _str$[esp]
	push	edi
; Line 473
	mov	edi, DWORD PTR _out$[esp+4]
	cmp	DWORD PTR [esi+4], 3
	jne	SHORT $LN2@asn1_print
	mov	eax, DWORD PTR [esi+12]
	and	eax, 7
	push	eax
	push	OFFSET ??_C@_0BE@PKLJCNCC@?5?$CI?$CFld?5unused?5bits?$CJ?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	SHORT $LN5@asn1_print
$LN8@asn1_print:
	pop	edi
; Line 474
	xor	eax, eax
	pop	esi
; Line 482
	ret	0
$LN2@asn1_print:
; Line 475
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN5@asn1_print
; Line 476
	pop	edi
	xor	eax, eax
	pop	esi
; Line 482
	ret	0
$LN5@asn1_print:
; Line 478
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	jle	SHORT $LN6@asn1_print
	mov	eax, DWORD PTR _indent$[esp+4]
	add	eax, 2
	push	eax
	push	ecx
	push	DWORD PTR [esi+8]
	push	edi
	call	_BIO_dump_indent
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	SHORT $LN8@asn1_print
$LN6@asn1_print:
	pop	edi
; Line 481
	mov	eax, 1
	pop	esi
; Line 482
	ret	0
_asn1_print_obstring_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_print_oid_ctx
_TEXT	SEGMENT
_objbuf$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_oid$ = 12						; size = 4
_pctx$ = 16						; size = 4
_asn1_print_oid_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 457
	mov	eax, 84					; 00000054H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+84], eax
	push	ebx
	mov	ebx, DWORD PTR _out$[esp+84]
	push	esi
	push	edi
	mov	edi, DWORD PTR _oid$[esp+92]
; Line 460
	push	edi
	call	_OBJ_obj2nid
	push	eax
	call	_OBJ_nid2ln
; Line 461
	test	eax, eax
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
; Line 463
	push	1
	push	edi
	cmovne	esi, eax
	lea	eax, DWORD PTR _objbuf$[esp+112]
	push	80					; 00000050H
	push	eax
	call	_OBJ_obj2txt
; Line 464
	lea	eax, DWORD PTR _objbuf$[esp+120]
	push	eax
	push	esi
	push	OFFSET ??_C@_07IFMLPBAP@?$CFs?5?$CI?$CFs?$CJ?$AA@
	push	ebx
	call	_BIO_printf
	add	esp, 40					; 00000028H
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	pop	edi
	mov	eax, ecx
; Line 467
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	ret	0
_asn1_print_oid_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_print_integer_ctx
_TEXT	SEGMENT
_out$ = 8						; size = 4
_str$ = 12						; size = 4
_pctx$ = 16						; size = 4
_asn1_print_integer_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 445
	push	esi
	push	edi
; Line 448
	push	DWORD PTR _str$[esp+4]
	mov	edi, 1
	push	0
	call	_i2s_ASN1_INTEGER
	mov	esi, eax
; Line 449
	push	esi
	push	DWORD PTR _out$[esp+16]
	call	_BIO_puts
	xor	ecx, ecx
	test	eax, eax
; Line 451
	push	esi
	cmovle	edi, ecx
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
; Line 452
	mov	eax, edi
	pop	edi
	pop	esi
; Line 453
	ret	0
_asn1_print_integer_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_print_boolean_ctx
_TEXT	SEGMENT
_out$ = 8						; size = 4
_boolval$ = 12						; size = 4
_pctx$ = 16						; size = 4
_asn1_print_boolean_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 422
	mov	ecx, DWORD PTR _boolval$[esp-4]
	cmp	ecx, -1
	je	SHORT $LN4@asn1_print
	test	ecx, ecx
	mov	eax, OFFSET ??_C@_04HCDDPBNL@TRUE?$AA@
	mov	edx, OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
	cmove	eax, edx
; Line 429
	jmp	SHORT $LN2@asn1_print
$LN4@asn1_print:
; Line 424
	mov	eax, OFFSET ??_C@_0M@GEOFMDJK@BOOL?5ABSENT?$AA@
$LN2@asn1_print:
; Line 437
	push	eax
	push	DWORD PTR _out$[esp]
	call	_BIO_puts
	xor	ecx, ecx
	add	esp, 8
	test	eax, eax
	setg	cl
	mov	eax, ecx
; Line 441
	ret	0
_asn1_print_boolean_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_print_fsname
_TEXT	SEGMENT
_out$ = 8						; size = 4
_indent$ = 12						; size = 4
_fname$ = 16						; size = 4
_sname$ = 20						; size = 4
_pctx$ = 24						; size = 4
_asn1_print_fsname PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 378
	push	esi
; Line 387
	mov	esi, DWORD PTR _indent$[esp]
	push	edi
	mov	edi, DWORD PTR _out$[esp+4]
	cmp	esi, 20					; 00000014H
	jle	SHORT $LN3@asn1_print
	npad	1
$LL2@asn1_print:
; Line 388
	push	20					; 00000014H
	push	OFFSET ?spaces@?1??asn1_print_fsname@@9@9
	push	edi
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, 20					; 00000014H
	jne	SHORT $LN19@asn1_print
; Line 390
	sub	esi, eax
	cmp	esi, eax
	jg	SHORT $LL2@asn1_print
$LN3@asn1_print:
; Line 392
	push	esi
	push	OFFSET ?spaces@?1??asn1_print_fsname@@9@9
	push	edi
	call	_BIO_write
	add	esp, 12					; 0000000cH
	cmp	eax, esi
	jne	SHORT $LN19@asn1_print
; Line 394
	mov	eax, DWORD PTR _pctx$[esp+4]
	mov	ecx, 0
; Line 396
	mov	esi, DWORD PTR _fname$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR _sname$[esp+8]
	mov	eax, DWORD PTR [eax]
	test	eax, 256				; 00000100H
	cmovne	ebx, ecx
	test	al, 64					; 00000040H
	mov	eax, ecx
	cmovne	esi, eax
; Line 398
	test	ebx, ebx
	jne	SHORT $LN8@asn1_print
	test	esi, esi
	jne	SHORT $LN23@asn1_print
; Line 399
	pop	ebx
	pop	edi
	lea	eax, DWORD PTR [ecx+1]
	pop	esi
; Line 416
	ret	0
$LN19@asn1_print:
	pop	edi
; Line 389
	xor	eax, eax
	pop	esi
; Line 416
	ret	0
$LN8@asn1_print:
; Line 400
	test	esi, esi
	je	SHORT $LN10@asn1_print
$LN23@asn1_print:
; Line 401
	push	esi
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN25@asn1_print
$LN10@asn1_print:
; Line 404
	test	ebx, ebx
	je	SHORT $LN15@asn1_print
; Line 406
	push	ebx
	test	esi, esi
	je	SHORT $LN12@asn1_print
	push	OFFSET ??_C@_05DNDNCJEB@?5?$CI?$CFs?$CJ?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	SHORT $LN15@asn1_print
; Line 407
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 416
	ret	0
$LN12@asn1_print:
; Line 409
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN15@asn1_print
$LN25@asn1_print:
	pop	ebx
	pop	edi
; Line 410
	xor	eax, eax
	pop	esi
; Line 416
	ret	0
$LN15@asn1_print:
; Line 413
	push	2
	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	push	edi
	call	_BIO_write
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	cmp	eax, 2
	sete	cl
	pop	ebx
	pop	edi
	mov	eax, ecx
	pop	esi
; Line 416
	ret	0
_asn1_print_fsname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_primitive_print
_TEXT	SEGMENT
_utype$1$ = -8						; size = 4
_pf$1$ = -4						; size = 4
_fld$1$ = -4						; size = 4
_out$ = 8						; size = 4
_fld$ = 12						; size = 4
_it$ = 16						; size = 4
_indent$ = 20						; size = 4
_fname$ = 24						; size = 4
_sname$ = 28						; size = 4
_pctx$ = 32						; size = 4
_asn1_primitive_print PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 488
	mov	eax, 8
	call	__chkstk
	push	ebx
	push	ebp
; Line 495
	mov	ebp, DWORD PTR _pctx$[esp+12]
	mov	ebx, 1
	push	esi
	mov	esi, DWORD PTR _it$[esp+16]
	push	edi
	mov	edi, DWORD PTR _out$[esp+20]
	push	ebp
	push	DWORD PTR _sname$[esp+24]
	mov	eax, DWORD PTR [esi+16]
	push	DWORD PTR _fname$[esp+28]
	mov	DWORD PTR _pf$1$[esp+36], eax
	push	DWORD PTR _indent$[esp+32]
	push	edi
	call	_asn1_print_fsname
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN4@asn1_primi
$LN42@asn1_primi:
	pop	edi
	pop	esi
	pop	ebp
; Line 496
	xor	eax, eax
	pop	ebx
; Line 585
	add	esp, 8
	ret	0
$LN4@asn1_primi:
; Line 497
	mov	eax, DWORD PTR _pf$1$[esp+24]
	test	eax, eax
	je	SHORT $LN5@asn1_primi
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN5@asn1_primi
; Line 498
	mov	ecx, DWORD PTR _indent$[esp+20]
	push	ebp
	push	ecx
	push	esi
	push	DWORD PTR _fld$[esp+32]
	push	edi
	call	eax
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 585
	add	esp, 8
	ret	0
$LN5@asn1_primi:
; Line 499
	mov	edx, DWORD PTR _fld$[esp+20]
; Line 500
	mov	eax, DWORD PTR _it$[esp+20]
	mov	DWORD PTR _fld$1$[esp+24], edx
	mov	esi, DWORD PTR [edx]
	cmp	BYTE PTR [eax], 5
	jne	SHORT $LN6@asn1_primi
; Line 501
	mov	eax, DWORD PTR [esi+4]
	and	eax, -257				; fffffeffH
	jmp	SHORT $LN38@asn1_primi
$LN6@asn1_primi:
; Line 503
	mov	eax, DWORD PTR [eax+4]
$LN38@asn1_primi:
	mov	DWORD PTR _utype$1$[esp+24], eax
; Line 504
	cmp	eax, -4					; fffffffcH
	jne	SHORT $LN8@asn1_primi
; Line 509
	test	BYTE PTR [ebp], 16			; 00000010H
	lea	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR _utype$1$[esp+24], eax
	mov	DWORD PTR _fld$1$[esp+24], ecx
	jne	SHORT $LN12@asn1_primi
; Line 512
	push	eax
	call	_ASN1_tag2str
	mov	ecx, eax
	add	esp, 4
; Line 513
	mov	eax, DWORD PTR _utype$1$[esp+24]
	jmp	SHORT $LN13@asn1_primi
$LN8@asn1_primi:
; Line 514
	test	BYTE PTR [ebp], 8
	je	SHORT $LN12@asn1_primi
; Line 515
	push	eax
	call	_ASN1_tag2str
	mov	ecx, eax
	add	esp, 4
	mov	eax, DWORD PTR _utype$1$[esp+24]
	jmp	SHORT $LN13@asn1_primi
$LN12@asn1_primi:
; Line 517
	xor	ecx, ecx
$LN13@asn1_primi:
; Line 520
	cmp	eax, 5
	jne	SHORT $LN14@asn1_primi
; Line 521
	push	OFFSET ??_C@_05NJDBAOFA@NULL?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ecx
	pop	ebx
; Line 585
	add	esp, 8
	ret	0
$LN14@asn1_primi:
; Line 526
	test	ecx, ecx
	je	SHORT $LN18@asn1_primi
; Line 527
	push	ecx
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	$LN42@asn1_primi
; Line 529
	push	OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	$LN42@asn1_primi
	mov	eax, DWORD PTR _utype$1$[esp+24]
$LN18@asn1_primi:
; Line 533
	add	eax, 3
	cmp	eax, 27					; 0000001bH
	ja	$LN29@asn1_primi
	movzx	eax, BYTE PTR $LN36@asn1_primi[eax]
	jmp	DWORD PTR $LN44@asn1_primi[eax*4]
$LN19@asn1_primi:
; Line 536
	mov	eax, DWORD PTR _fld$1$[esp+24]
	mov	eax, DWORD PTR [eax]
; Line 537
	cmp	eax, -1
	jne	SHORT $LN20@asn1_primi
; Line 538
	mov	esi, DWORD PTR _it$[esp+20]
	mov	eax, DWORD PTR [esi+20]
$LN20@asn1_primi:
; Line 539
	push	ebp
	push	eax
	push	edi
	call	_asn1_print_boolean_ctx
; Line 541
	jmp	$LN39@asn1_primi
$LN21@asn1_primi:
; Line 448
	push	esi
	push	0
	call	_i2s_ASN1_INTEGER
	mov	esi, eax
; Line 449
	push	esi
	push	edi
	call	_BIO_puts
	xor	ecx, ecx
	test	eax, eax
; Line 451
	push	esi
	cmovle	ebx, ecx
	call	_CRYPTO_free
	add	esp, 20					; 00000014H
; Line 546
	jmp	$LN40@asn1_primi
$LN22@asn1_primi:
; Line 549
	push	esi
	push	edi
	call	_ASN1_UTCTIME_print
	add	esp, 8
; Line 550
	jmp	SHORT $LN41@asn1_primi
$LN23@asn1_primi:
; Line 553
	push	esi
	push	edi
	call	_ASN1_GENERALIZEDTIME_print
	add	esp, 8
; Line 554
	jmp	SHORT $LN41@asn1_primi
$LN24@asn1_primi:
; Line 557
	mov	eax, DWORD PTR _fld$1$[esp+24]
	push	ebp
	push	DWORD PTR [eax]
	push	edi
	call	_asn1_print_oid_ctx
; Line 558
	jmp	SHORT $LN39@asn1_primi
$LN25@asn1_primi:
; Line 562
	mov	ecx, DWORD PTR _indent$[esp+20]
	push	ebp
	push	ecx
	push	esi
	push	edi
	call	_asn1_print_obstring_ctx
	add	esp, 16					; 00000010H
	mov	ebx, eax
; Line 563
	xor	eax, eax
; Line 564
	jmp	SHORT $LN2@asn1_primi
$LN26@asn1_primi:
; Line 569
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	$LN42@asn1_primi
; Line 571
	mov	ecx, DWORD PTR _indent$[esp+20]
	push	0
	push	ecx
	push	DWORD PTR [esi]
	push	DWORD PTR [esi+8]
	push	edi
	call	_ASN1_parse_dump
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	test	eax, eax
	cmovle	ebx, ecx
; Line 573
	xor	eax, eax
; Line 574
	jmp	SHORT $LN2@asn1_primi
$LN29@asn1_primi:
; Line 577
	push	DWORD PTR [ebp+16]
	push	esi
	push	edi
	call	_ASN1_STRING_print_ex
$LN39@asn1_primi:
	add	esp, 12					; 0000000cH
$LN41@asn1_primi:
	mov	ebx, eax
$LN40@asn1_primi:
	mov	eax, 1
$LN2@asn1_primi:
; Line 580
	test	ebx, ebx
	je	$LN42@asn1_primi
; Line 582
	test	eax, eax
	je	SHORT $LN31@asn1_primi
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	$LN42@asn1_primi
$LN31@asn1_primi:
	pop	edi
	pop	esi
	pop	ebp
; Line 584
	mov	eax, 1
	pop	ebx
; Line 585
	add	esp, 8
	ret	0
	npad	1
$LN44@asn1_primi:
	DD	$LN26@asn1_primi
	DD	$LN19@asn1_primi
	DD	$LN21@asn1_primi
	DD	$LN25@asn1_primi
	DD	$LN24@asn1_primi
	DD	$LN22@asn1_primi
	DD	$LN23@asn1_primi
	DD	$LN29@asn1_primi
$LN36@asn1_primi:
	DB	0
	DB	7
	DB	7
	DB	7
	DB	1
	DB	2
	DB	3
	DB	3
	DB	7
	DB	4
	DB	7
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	0
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	5
	DB	6
_asn1_primitive_print ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_template_print_ctx
_TEXT	SEGMENT
_out$ = 8						; size = 4
_fld$ = 12						; size = 4
_indent$ = 16						; size = 4
_flags$1$ = 20						; size = 4
_skitem$1 = 20						; size = 4
_tt$ = 20						; size = 4
_pctx$ = 24						; size = 4
_asn1_template_print_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 322
	push	ebx
; Line 326
	mov	ebx, DWORD PTR _pctx$[esp]
	push	ebp
	mov	ebp, DWORD PTR _tt$[esp+4]
	test	BYTE PTR [ebx], 128			; 00000080H
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _flags$1$[esp+4], eax
	je	SHORT $LN5@asn1_templ
; Line 327
	mov	eax, DWORD PTR [ebp+16]
	call	eax
	mov	edx, DWORD PTR [eax+24]
	jmp	SHORT $LN6@asn1_templ
$LN5@asn1_templ:
; Line 329
	xor	edx, edx
$LN6@asn1_templ:
; Line 330
	mov	ecx, DWORD PTR [ebx]
	test	cl, 64					; 00000040H
	je	SHORT $LN7@asn1_templ
; Line 331
	xor	eax, eax
	jmp	SHORT $LN8@asn1_templ
$LN7@asn1_templ:
; Line 333
	mov	eax, DWORD PTR [ebp+12]
$LN8@asn1_templ:
; Line 334
	test	BYTE PTR _flags$1$[esp+4], 6
	je	$LN9@asn1_templ
; Line 340
	push	edi
	mov	edi, DWORD PTR _out$[esp+8]
	test	eax, eax
	je	SHORT $LN16@asn1_templ
; Line 341
	test	cl, 4
	je	SHORT $LN11@asn1_templ
; Line 347
	push	DWORD PTR [ebp+12]
	test	BYTE PTR _flags$1$[esp+12], 2
	mov	ecx, OFFSET ??_C@_08POLPFBMC@SEQUENCE?$AA@
	mov	eax, OFFSET ??_C@_03KPIFFHNE@SET?$AA@
	cmove	eax, ecx
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR _indent$[esp+20]
	push	OFFSET ??_C@_0P@OJACKFHB@?$CF?$CKs?$CFs?5OF?5?$CFs?5?$HL?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 24					; 00000018H
	test	eax, eax
	jg	SHORT $LN16@asn1_templ
; Line 348
	pop	edi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 373
	ret	0
$LN11@asn1_templ:
; Line 349
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR _indent$[esp+16]
	push	OFFSET ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 20					; 00000014H
	test	eax, eax
	jg	SHORT $LN16@asn1_templ
; Line 350
	pop	edi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 373
	ret	0
$LN16@asn1_templ:
; Line 352
	mov	eax, DWORD PTR _fld$[esp+8]
	push	esi
; Line 353
	xor	esi, esi
	mov	ebx, DWORD PTR [eax]
	push	ebx
	call	_sk_num
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN159@asn1_templ
$LL4@asn1_templ:
; Line 354
	test	esi, esi
	jle	SHORT $LN17@asn1_templ
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN164@asn1_templ
$LN17@asn1_templ:
; Line 357
	push	esi
	push	ebx
	call	_sk_value
	add	esp, 8
	mov	DWORD PTR _skitem$1[esp+12], eax
; Line 358
	mov	eax, DWORD PTR [ebp+16]
	push	DWORD PTR _pctx$[esp+12]
	push	1
	push	0
	push	0
	call	eax
	push	eax
	mov	eax, DWORD PTR _indent$[esp+32]
	add	eax, 2
	push	eax
	lea	eax, DWORD PTR _skitem$1[esp+36]
	push	eax
	push	edi
	call	_asn1_item_print_ctx
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN164@asn1_templ
; Line 353
	push	ebx
	inc	esi
	call	_sk_num
	add	esp, 4
	cmp	esi, eax
	jl	SHORT $LL4@asn1_templ
; Line 363
	test	esi, esi
	jne	SHORT $LN161@asn1_templ
$LN159@asn1_templ:
	mov	ebx, DWORD PTR _indent$[esp+12]
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR [ebx+2]
	push	eax
	push	OFFSET ??_C@_0M@FCFDJGIC@?$CF?$CKs?$DMEMPTY?$DO?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 16					; 00000010H
	test	eax, eax
	jg	SHORT $LN19@asn1_templ
$LN164@asn1_templ:
	pop	esi
	pop	edi
	pop	ebp
; Line 364
	xor	eax, eax
	pop	ebx
; Line 373
	ret	0
$LN161@asn1_templ:
	mov	ebx, DWORD PTR _indent$[esp+12]
$LN19@asn1_templ:
; Line 365
	mov	eax, DWORD PTR _pctx$[esp+12]
	test	BYTE PTR [eax], 2
	je	SHORT $LN21@asn1_templ
; Line 366
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	ebx
	push	OFFSET ??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 16					; 00000010H
	test	eax, eax
	jle	SHORT $LN164@asn1_templ
$LN21@asn1_templ:
	pop	esi
	pop	edi
	pop	ebp
; Line 369
	mov	eax, 1
	pop	ebx
; Line 373
	ret	0
$LN9@asn1_templ:
; Line 371
	push	ebx
	push	0
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebp+16]
	call	eax
	push	eax
	push	DWORD PTR _indent$[esp+24]
	push	DWORD PTR _fld$[esp+28]
	push	DWORD PTR _out$[esp+32]
	call	_asn1_item_print_ctx
	add	esp, 32					; 00000020H
	pop	ebp
	pop	ebx
; Line 373
	ret	0
_asn1_template_print_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _asn1_item_print_ctx
_TEXT	SEGMENT
_tt$2$ = -20						; size = 4
_seqtt$1$ = -16						; size = 4
_parg$ = -12						; size = 12
_out$ = 8						; size = 4
_i$4$ = 12						; size = 4
_fld$ = 12						; size = 4
_indent$ = 16						; size = 4
_asn1_cb$1$ = 20					; size = 4
_it$ = 20						; size = 4
_fname$ = 24						; size = 4
_sname$ = 28						; size = 4
_nohdr$ = 32						; size = 4
_pctx$ = 36						; size = 4
_asn1_item_print_ctx PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 191
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
; Line 199
	mov	ebx, DWORD PTR _pctx$[esp+20]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _it$[esp+28]
	push	edi
	mov	edi, DWORD PTR _out$[esp+32]
	mov	ecx, DWORD PTR [esi+16]
	test	ecx, ecx
	je	SHORT $LN7@asn1_item_
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN7@asn1_item_
; Line 201
	mov	eax, DWORD PTR _indent$[esp+32]
	mov	DWORD PTR _parg$[esp+36], edi
	mov	DWORD PTR _parg$[esp+40], eax
; Line 202
	mov	DWORD PTR _parg$[esp+44], ebx
; Line 203
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR _asn1_cb$1$[esp+32], ecx
; Line 204
	jmp	SHORT $LN8@asn1_item_
$LN7@asn1_item_:
	mov	eax, DWORD PTR _indent$[esp+32]
; Line 205
	mov	DWORD PTR _asn1_cb$1$[esp+32], 0
$LN8@asn1_item_:
; Line 207
	mov	ebp, DWORD PTR _fld$[esp+32]
	cmp	DWORD PTR [ebp], 0
	jne	SHORT $LN9@asn1_item_
; Line 208
	test	BYTE PTR [ebx], 1
	je	SHORT $LN12@asn1_item_
; Line 209
	cmp	DWORD PTR _nohdr$[esp+32], 0
	jne	SHORT $LN11@asn1_item_
	push	ebx
	push	DWORD PTR _sname$[esp+36]
	push	DWORD PTR _fname$[esp+40]
	push	eax
	push	edi
	call	_asn1_print_fsname
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN57@asn1_item_
$LN11@asn1_item_:
; Line 211
	push	OFFSET ??_C@_09PGPFBBND@?$DMABSENT?$DO?6?$AA@
$LN58@asn1_item_:
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	$LN57@asn1_item_
$LN12@asn1_item_:
	pop	edi
	pop	esi
	pop	ebp
; Line 214
	mov	eax, 1
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN9@asn1_item_:
; Line 217
	movsx	ecx, BYTE PTR [esi]
	cmp	ecx, 6
	ja	$LN47@asn1_item_
	jmp	DWORD PTR $LN60@asn1_item_[ecx*4]
$LN13@asn1_item_:
; Line 219
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN14@asn1_item_
; Line 220
	push	ebx
	push	ecx
	push	eax
	push	ebp
	push	edi
	call	_asn1_template_print_ctx
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN12@asn1_item_
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN14@asn1_item_:
; Line 227
	push	ebx
	push	DWORD PTR _sname$[esp+36]
	push	DWORD PTR _fname$[esp+40]
	push	eax
	push	esi
	push	ebp
	push	edi
	call	_asn1_primitive_print
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN12@asn1_item_
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN18@asn1_item_:
; Line 232
	cmp	DWORD PTR _nohdr$[esp+32], 0
	mov	ecx, DWORD PTR _sname$[esp+32]
	jne	SHORT $LN19@asn1_item_
	push	ebx
	push	ecx
	push	DWORD PTR _fname$[esp+40]
	push	eax
	push	edi
	call	_asn1_print_fsname
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN57@asn1_item_
	mov	ecx, DWORD PTR _sname$[esp+32]
$LN19@asn1_item_:
; Line 235
	mov	eax, DWORD PTR [esi+16]
; Line 236
	test	eax, eax
	je	SHORT $LN20@asn1_item_
	mov	eax, DWORD PTR [eax+24]
	test	eax, eax
	je	SHORT $LN20@asn1_item_
; Line 237
	push	ebx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR _indent$[esp+40]
	push	ebp
	push	edi
	call	eax
	add	esp, 20					; 00000014H
; Line 238
	test	eax, eax
	je	$LN57@asn1_item_
; Line 240
	cmp	eax, 2
	jne	$LN12@asn1_item_
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
; Line 242
	jmp	$LN58@asn1_item_
$LN20@asn1_item_:
; Line 243
	test	ecx, ecx
	je	$LN12@asn1_item_
	push	ecx
	push	OFFSET ??_C@_0BD@CAGFKGEH@?3EXTERNAL?5TYPE?5?$CFs?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 12					; 0000000cH
	test	eax, eax
	jg	$LN12@asn1_item_
; Line 314
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN25@asn1_item_:
; Line 254
	push	esi
	push	ebp
	call	_asn1_get_choice_selector
	add	esp, 8
; Line 256
	test	eax, eax
	js	SHORT $LN27@asn1_item_
	cmp	eax, DWORD PTR [esi+12]
	jge	SHORT $LN27@asn1_item_
; Line 261
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+8]
	lea	esi, DWORD PTR [eax+ecx*4]
; Line 262
	push	esi
	push	ebp
	call	_asn1_get_field_ptr
; Line 263
	push	ebx
	push	esi
	push	DWORD PTR _indent$[esp+48]
	push	eax
	push	edi
	call	_asn1_template_print_ctx
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN12@asn1_item_
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN27@asn1_item_:
; Line 257
	push	eax
	push	OFFSET ??_C@_0BO@ILEPLIDC@ERROR?3?5selector?5?$FL?$CFd?$FN?5invalid?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ecx
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN30@asn1_item_:
; Line 269
	cmp	DWORD PTR _nohdr$[esp+32], 0
	mov	ecx, DWORD PTR _sname$[esp+32]
	mov	edx, DWORD PTR _fname$[esp+32]
	jne	SHORT $LN31@asn1_item_
	push	ebx
	push	ecx
	push	edx
	push	eax
	push	edi
	call	_asn1_print_fsname
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN57@asn1_item_
	mov	ecx, DWORD PTR _sname$[esp+32]
	mov	edx, DWORD PTR _fname$[esp+32]
$LN31@asn1_item_:
; Line 271
	test	edx, edx
	jne	SHORT $LN33@asn1_item_
	test	ecx, ecx
	je	SHORT $LN37@asn1_item_
$LN33@asn1_item_:
; Line 272
	test	BYTE PTR [ebx], 2
	je	SHORT $LN34@asn1_item_
; Line 273
	push	OFFSET ??_C@_03NMMCOAOG@?5?$HL?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN37@asn1_item_
; Line 314
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN34@asn1_item_:
; Line 276
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	edi
	call	_BIO_puts
	add	esp, 8
	test	eax, eax
	jle	$LN57@asn1_item_
$LN37@asn1_item_:
; Line 281
	mov	eax, DWORD PTR _asn1_cb$1$[esp+32]
	test	eax, eax
	je	SHORT $LN40@asn1_item_
; Line 282
	lea	ecx, DWORD PTR _parg$[esp+36]
	push	ecx
	push	esi
	push	ebp
	push	8
	call	eax
	add	esp, 16					; 00000010H
; Line 283
	test	eax, eax
	je	$LN57@asn1_item_
; Line 285
	cmp	eax, 2
	je	$LN12@asn1_item_
$LN40@asn1_item_:
; Line 290
	cmp	DWORD PTR [esi+12], 0
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR _i$4$[esp+32], 0
	mov	DWORD PTR _tt$2$[esp+36], ecx
	jle	SHORT $LN5@asn1_item_
$LL6@asn1_item_:
; Line 292
	push	1
	push	ecx
	push	ebp
	call	_asn1_do_adb
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _seqtt$1$[esp+36], eax
; Line 293
	test	eax, eax
	je	$LN57@asn1_item_
; Line 295
	push	eax
	push	ebp
	call	_asn1_get_field_ptr
; Line 296
	mov	ecx, DWORD PTR _indent$[esp+40]
	push	ebx
	push	DWORD PTR _seqtt$1$[esp+48]
	add	ecx, 2
	push	ecx
	push	eax
	push	edi
	call	_asn1_template_print_ctx
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN57@asn1_item_
; Line 290
	mov	eax, DWORD PTR _i$4$[esp+32]
	mov	ecx, DWORD PTR _tt$2$[esp+36]
	inc	eax
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _i$4$[esp+32], eax
	mov	DWORD PTR _tt$2$[esp+36], ecx
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LL6@asn1_item_
$LN5@asn1_item_:
; Line 300
	test	BYTE PTR [ebx], 2
	je	SHORT $LN44@asn1_item_
; Line 301
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR _indent$[esp+36]
	push	OFFSET ??_C@_05ENGBOBIH@?$CF?$CKs?$HN?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 16					; 00000010H
	test	eax, eax
	js	SHORT $LN57@asn1_item_
$LN44@asn1_item_:
; Line 305
	mov	eax, DWORD PTR _asn1_cb$1$[esp+32]
	test	eax, eax
	je	$LN12@asn1_item_
; Line 306
	lea	ecx, DWORD PTR _parg$[esp+36]
	push	ecx
	push	esi
	push	ebp
	push	9
	call	eax
	add	esp, 16					; 00000010H
; Line 307
	test	eax, eax
	je	SHORT $LN57@asn1_item_
; Line 214
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
$LN47@asn1_item_:
; Line 313
	push	ecx
	push	OFFSET ??_C@_0BF@BNIIHHHF@Unprocessed?5type?5?$CFd?6?$AA@
	push	edi
	call	_BIO_printf
	add	esp, 12					; 0000000cH
$LN57@asn1_item_:
; Line 314
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 318
	add	esp, 20					; 00000014H
	ret	0
	npad	1
$LN60@asn1_item_:
	DD	$LN13@asn1_item_
	DD	$LN30@asn1_item_
	DD	$LN25@asn1_item_
	DD	$LN47@asn1_item_
	DD	$LN18@asn1_item_
	DD	$LN14@asn1_item_
	DD	$LN30@asn1_item_
_asn1_item_print_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_set_str_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_flags$ = 12						; size = 4
_ASN1_PCTX_set_str_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 152
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR _flags$[esp-4]
	mov	DWORD PTR [eax+16], ecx
; Line 153
	ret	0
_ASN1_PCTX_set_str_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_get_str_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ASN1_PCTX_get_str_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 147
	mov	eax, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR [eax+16]
; Line 148
	ret	0
_ASN1_PCTX_get_str_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_set_oid_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_flags$ = 12						; size = 4
_ASN1_PCTX_set_oid_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 142
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR _flags$[esp-4]
	mov	DWORD PTR [eax+12], ecx
; Line 143
	ret	0
_ASN1_PCTX_set_oid_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_get_oid_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ASN1_PCTX_get_oid_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 137
	mov	eax, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR [eax+12]
; Line 138
	ret	0
_ASN1_PCTX_get_oid_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_set_cert_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_flags$ = 12						; size = 4
_ASN1_PCTX_set_cert_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 132
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR _flags$[esp-4]
	mov	DWORD PTR [eax+8], ecx
; Line 133
	ret	0
_ASN1_PCTX_set_cert_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_get_cert_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ASN1_PCTX_get_cert_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 127
	mov	eax, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR [eax+8]
; Line 128
	ret	0
_ASN1_PCTX_get_cert_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_set_nm_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_flags$ = 12						; size = 4
_ASN1_PCTX_set_nm_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 122
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR _flags$[esp-4]
	mov	DWORD PTR [eax+4], ecx
; Line 123
	ret	0
_ASN1_PCTX_set_nm_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_get_nm_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ASN1_PCTX_get_nm_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 117
	mov	eax, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR [eax+4]
; Line 118
	ret	0
_ASN1_PCTX_get_nm_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_set_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_flags$ = 12						; size = 4
_ASN1_PCTX_set_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 112
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR _flags$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 113
	ret	0
_ASN1_PCTX_set_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_get_flags
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ASN1_PCTX_get_flags PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 107
	mov	eax, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR [eax]
; Line 108
	ret	0
_ASN1_PCTX_get_flags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_free
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ASN1_PCTX_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 102
	jmp	_CRYPTO_free
_ASN1_PCTX_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_PCTX_new
_TEXT	SEGMENT
_ASN1_PCTX_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 87
	push	87					; 00000057H
	push	OFFSET ??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@
	push	20					; 00000014H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
; Line 88
	test	eax, eax
	jne	SHORT $LN2@ASN1_PCTX_
; Line 89
	push	89					; 00000059H
	push	OFFSET ??_C@_0BJ@BHOCCEMA@?4?2crypto?2asn1?2tasn_prn?4c?$AA@
	push	65					; 00000041H
	push	205					; 000000cdH
	push	13					; 0000000dH
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 90
	xor	eax, eax
; Line 98
	ret	0
$LN2@ASN1_PCTX_:
; Line 92
	mov	DWORD PTR [eax], 0
; Line 93
	mov	DWORD PTR [eax+4], 0
; Line 94
	mov	DWORD PTR [eax+8], 0
; Line 95
	mov	DWORD PTR [eax+12], 0
; Line 96
	mov	DWORD PTR [eax+16], 0
; Line 98
	ret	0
_ASN1_PCTX_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ASN1_item_print
_TEXT	SEGMENT
_out$ = 8						; size = 4
_ifld$ = 12						; size = 4
_indent$ = 16						; size = 4
_it$ = 20						; size = 4
_pctx$ = 24						; size = 4
_ASN1_item_print PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\asn1\tasn_prn.c
; Line 178
	mov	eax, DWORD PTR _pctx$[esp-4]
	mov	ecx, OFFSET _default_pctx
; Line 180
	mov	edx, DWORD PTR _it$[esp-4]
	test	eax, eax
	cmovne	ecx, eax
	test	DWORD PTR [ecx], 256			; 00000100H
	je	SHORT $LN3@ASN1_item_
; Line 181
	xor	eax, eax
	jmp	SHORT $LN4@ASN1_item_
$LN3@ASN1_item_:
; Line 183
	mov	eax, DWORD PTR [edx+24]
$LN4@ASN1_item_:
; Line 184
	push	ecx
	push	0
	push	eax
	push	0
	push	edx
	push	DWORD PTR _indent$[esp+16]
	lea	eax, DWORD PTR _ifld$[esp+20]
	push	eax
	push	DWORD PTR _out$[esp+24]
	call	_asn1_item_print_ctx
	add	esp, 32					; 00000020H
; Line 185
	ret	0
_ASN1_item_print ENDP
_TEXT	ENDS
END
