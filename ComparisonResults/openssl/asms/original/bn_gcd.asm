; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gcd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_gcd
PUBLIC	_BN_mod_inverse
PUBLIC	??_C@_0BF@ODABJPII@?4?2crypto?2bn?2bn_gcd?4c?$AA@ ; `string'
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_new:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_sub:PROC
EXTRN	_BN_usub:PROC
EXTRN	_BN_uadd:PROC
EXTRN	_BN_add:PROC
EXTRN	_BN_mul:PROC
EXTRN	_BN_div:PROC
EXTRN	_BN_nnmod:PROC
EXTRN	_BN_mul_word:PROC
EXTRN	_BN_set_word:PROC
EXTRN	_BN_cmp:PROC
EXTRN	_BN_free:PROC
EXTRN	_BN_is_bit_set:PROC
EXTRN	_BN_lshift:PROC
EXTRN	_BN_lshift1:PROC
EXTRN	_BN_rshift:PROC
EXTRN	_BN_rshift1:PROC
EXTRN	_BN_ucmp:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BF@ODABJPII@?4?2crypto?2bn?2bn_gcd?4c?$AA@
CONST	SEGMENT
??_C@_0BF@ODABJPII@?4?2crypto?2bn?2bn_gcd?4c?$AA@ DB '.\crypto\bn\bn_gcd.'
	DB	'c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_inverse_no_branch
_TEXT	SEGMENT
_R$1$ = -64						; size = 4
_X$1$ = -60						; size = 4
_M$1$ = -56						; size = 4
_D$1$ = -52						; size = 4
_sign$1$ = -48						; size = 4
_ret$1$ = -44						; size = 4
_local_B$ = -40						; size = 20
_local_A$ = -20						; size = 20
_in$ = 8						; size = 4
_a$ = 12						; size = 4
_n$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_mod_inverse_no_branch PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gcd.c
; Line 544
	mov	eax, 64					; 00000040H
	call	__chkstk
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 554
	mov	edi, DWORD PTR _ctx$[esp+76]
	push	edi
	mov	DWORD PTR _ret$1$[esp+84], 0
	call	_BN_CTX_start
; Line 555
	push	edi
	call	_BN_CTX_get
; Line 556
	push	edi
	mov	esi, eax
	call	_BN_CTX_get
; Line 557
	push	edi
	mov	ebp, eax
	call	_BN_CTX_get
; Line 558
	push	edi
	mov	DWORD PTR _X$1$[esp+100], eax
	call	_BN_CTX_get
; Line 559
	push	edi
	mov	DWORD PTR _D$1$[esp+104], eax
	call	_BN_CTX_get
; Line 560
	push	edi
	mov	DWORD PTR _M$1$[esp+108], eax
	call	_BN_CTX_get
; Line 561
	push	edi
	mov	ebx, eax
	call	_BN_CTX_get
	add	esp, 32					; 00000020H
; Line 562
	test	eax, eax
	mov	eax, DWORD PTR _in$[esp+76]
	je	$LN46@BN_mod_inv
; Line 565
	test	eax, eax
	jne	SHORT $LN5@BN_mod_inv
; Line 566
	call	_BN_new
$LN5@BN_mod_inv:
; Line 568
	mov	DWORD PTR _R$1$[esp+80], eax
; Line 569
	test	eax, eax
	je	$LN45@BN_mod_inv
; Line 572
	push	1
	push	DWORD PTR _X$1$[esp+84]
	call	_BN_set_word
; Line 573
	push	0
	push	ebx
	call	_BN_set_word
; Line 574
	push	DWORD PTR _a$[esp+92]
	push	ebp
	call	_BN_copy
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN42@BN_mod_inv
; Line 576
	push	DWORD PTR _n$[esp+76]
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN42@BN_mod_inv
; Line 578
	mov	DWORD PTR [esi+12], 0
; Line 580
	cmp	DWORD PTR [ebp+12], 0
	jne	SHORT $LN11@BN_mod_inv
	push	esi
	push	ebp
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN12@BN_mod_inv
$LN11@BN_mod_inv:
; Line 586
	mov	DWORD PTR _local_B$[esp+96], 0
; Line 587
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _local_B$[esp+80], eax
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR _local_B$[esp+84], eax
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR _local_B$[esp+88], eax
	mov	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR _local_B$[esp+92], eax
	mov	eax, DWORD PTR [ebp+16]
	and	eax, -2					; fffffffeH
	or	eax, 6
; Line 588
	push	edi
	mov	DWORD PTR _local_B$[esp+100], eax
	lea	eax, DWORD PTR _local_B$[esp+84]
	push	esi
	push	eax
	push	ebp
	call	_BN_nnmod
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN42@BN_mod_inv
$LN12@BN_mod_inv:
; Line 600
	cmp	DWORD PTR [ebp+4], 0
	mov	DWORD PTR _sign$1$[esp+80], -1
	je	$LN36@BN_mod_inv
	jmp	SHORT $LN2@BN_mod_inv
	npad	11
$LL47@BN_mod_inv:
	mov	edi, DWORD PTR _ctx$[esp+76]
$LN2@BN_mod_inv:
; Line 614
	mov	DWORD PTR _local_A$[esp+96], 0
; Line 615
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _local_A$[esp+80], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _local_A$[esp+84], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _local_A$[esp+88], eax
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _local_A$[esp+92], eax
	mov	eax, DWORD PTR [esi+16]
	and	eax, -2					; fffffffeH
	or	eax, 6
; Line 618
	push	edi
	mov	DWORD PTR _local_A$[esp+100], eax
	lea	eax, DWORD PTR _local_A$[esp+84]
	push	ebp
	push	eax
	push	DWORD PTR _M$1$[esp+92]
	push	DWORD PTR _D$1$[esp+96]
	call	_BN_div
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN38@BN_mod_inv
; Line 656
	push	DWORD PTR _ctx$[esp+76]
	mov	edi, esi
	mov	esi, ebp
	push	DWORD PTR _X$1$[esp+84]
	mov	ebp, DWORD PTR _M$1$[esp+88]
	push	DWORD PTR _D$1$[esp+88]
	push	edi
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN38@BN_mod_inv
; Line 658
	push	ebx
	push	edi
	push	edi
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN38@BN_mod_inv
; Line 665
	mov	eax, DWORD PTR _sign$1$[esp+80]
	neg	eax
	mov	DWORD PTR _M$1$[esp+80], ebx
	cmp	DWORD PTR [ebp+4], 0
	mov	ebx, DWORD PTR _X$1$[esp+80]
	mov	DWORD PTR _X$1$[esp+80], edi
	mov	DWORD PTR _sign$1$[esp+80], eax
	jne	$LL47@BN_mod_inv
; Line 676
	test	eax, eax
	jns	SHORT $LN49@BN_mod_inv
$LN36@BN_mod_inv:
; Line 677
	mov	edi, DWORD PTR _n$[esp+76]
	push	ebx
	push	edi
	push	ebx
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN38@BN_mod_inv
	jmp	SHORT $LN17@BN_mod_inv
$LN49@BN_mod_inv:
	mov	edi, DWORD PTR _n$[esp+76]
$LN17@BN_mod_inv:
; Line 682
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN21@BN_mod_inv
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN21@BN_mod_inv
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN21@BN_mod_inv
; Line 684
	cmp	DWORD PTR [ebx+12], 0
	jne	SHORT $LN22@BN_mod_inv
	push	edi
	push	ebx
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN22@BN_mod_inv
; Line 685
	mov	esi, DWORD PTR _R$1$[esp+80]
	push	ebx
	push	esi
	call	_BN_copy
; Line 687
	mov	ebp, DWORD PTR _ctx$[esp+84]
	add	esp, 8
	jmp	SHORT $LN51@BN_mod_inv
$LN22@BN_mod_inv:
; Line 688
	mov	ebp, DWORD PTR _ctx$[esp+76]
	mov	esi, DWORD PTR _R$1$[esp+80]
	push	ebp
	push	edi
	push	ebx
	push	esi
	call	_BN_nnmod
	add	esp, 16					; 00000010H
$LN51@BN_mod_inv:
	test	eax, eax
	je	SHORT $LN48@BN_mod_inv
; Line 699
	push	ebp
	mov	DWORD PTR _ret$1$[esp+84], esi
	call	_BN_CTX_end
	add	esp, 4
; Line 701
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 702
	add	esp, 64					; 00000040H
	ret	0
$LN21@BN_mod_inv:
; Line 692
	push	692					; 000002b4H
	push	OFFSET ??_C@_0BF@ODABJPII@?4?2crypto?2bn?2bn_gcd?4c?$AA@
	push	108					; 0000006cH
	push	139					; 0000008bH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN38@BN_mod_inv:
	mov	ebp, DWORD PTR _ctx$[esp+76]
$LN48@BN_mod_inv:
	mov	eax, DWORD PTR _R$1$[esp+80]
$LN35@BN_mod_inv:
; Line 697
	cmp	DWORD PTR _in$[esp+76], 0
	jne	SHORT $LN26@BN_mod_inv
; Line 698
	push	eax
	call	_BN_free
	add	esp, 4
$LN26@BN_mod_inv:
; Line 699
	push	ebp
	call	_BN_CTX_end
; Line 701
	mov	eax, DWORD PTR _ret$1$[esp+84]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 702
	add	esp, 64					; 00000040H
	ret	0
$LN42@BN_mod_inv:
	mov	ebp, edi
	jmp	SHORT $LN48@BN_mod_inv
$LN45@BN_mod_inv:
	mov	ebp, edi
	jmp	SHORT $LN35@BN_mod_inv
$LN46@BN_mod_inv:
	mov	ebp, edi
	xor	eax, eax
	jmp	SHORT $LN35@BN_mod_inv
_BN_mod_inverse_no_branch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _euclid
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_euclid	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gcd.c
; Line 157
	push	ebx
	push	esi
; Line 165
	mov	esi, DWORD PTR _a$[esp+4]
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _b$[esp+8]
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	je	$LN20@euclid
$LL2@euclid:
; Line 168
	cmp	DWORD PTR [esi+4], 0
	jle	SHORT $LN4@euclid
	mov	eax, DWORD PTR [esi]
	test	BYTE PTR [eax], 1
	je	SHORT $LN4@euclid
; Line 169
	test	ecx, ecx
	jle	SHORT $LN6@euclid
	mov	eax, DWORD PTR [edi]
	test	BYTE PTR [eax], 1
	je	SHORT $LN6@euclid
; Line 170
	push	edi
	push	esi
	push	esi
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$35
; Line 179
	jmp	SHORT $LN33@euclid
$LN6@euclid:
; Line 181
	push	edi
	push	edi
; Line 189
	jmp	SHORT $LN32@euclid
$LN4@euclid:
; Line 191
	test	ecx, ecx
	jle	SHORT $LN13@euclid
	mov	eax, DWORD PTR [edi]
	test	BYTE PTR [eax], 1
	je	SHORT $LN13@euclid
$LN33@euclid:
; Line 192
	push	esi
	push	esi
$LN32@euclid:
	call	_BN_rshift1
	add	esp, 8
	test	eax, eax
	je	SHORT $err$35
; Line 194
	push	edi
	push	esi
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN14@euclid
; Line 195
	mov	eax, esi
; Line 196
	mov	esi, edi
; Line 197
	mov	edi, eax
; Line 199
	jmp	SHORT $LN14@euclid
$LN13@euclid:
; Line 201
	push	esi
	push	esi
	call	_BN_rshift1
	add	esp, 8
	test	eax, eax
	je	SHORT $err$35
; Line 203
	push	edi
	push	edi
	call	_BN_rshift1
	add	esp, 8
	test	eax, eax
	je	SHORT $err$35
; Line 205
	inc	ebx
$LN14@euclid:
; Line 165
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	jne	SHORT $LL2@euclid
; Line 211
	test	ebx, ebx
	je	SHORT $LN20@euclid
; Line 212
	push	ebx
	push	esi
	push	esi
	call	_BN_lshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN20@euclid
$err$35:
	pop	edi
	pop	esi
; Line 218
	xor	eax, eax
	pop	ebx
; Line 219
	ret	0
$LN20@euclid:
	pop	edi
; Line 216
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 219
	ret	0
_euclid	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_mod_inverse
_TEXT	SEGMENT
_R$1$ = -28						; size = 4
_A$1$ = -24						; size = 4
_D$1$ = -20						; size = 4
_M$1$ = -16						; size = 4
_T$1$ = -12						; size = 4
_sign$1$ = -8						; size = 4
_ret$1$ = -4						; size = 4
_in$ = 8						; size = 4
_tmp$1$ = 12						; size = 4
_a$ = 12						; size = 4
_n$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_mod_inverse PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gcd.c
; Line 228
	mov	eax, 28					; 0000001cH
	call	__chkstk
; Line 234
	mov	eax, DWORD PTR _a$[esp+24]
	mov	ecx, DWORD PTR _n$[esp+24]
	mov	DWORD PTR _ret$1$[esp+28], 0
	test	BYTE PTR [eax+16], 4
	jne	$LN11@BN_mod_inv
	test	BYTE PTR [ecx+16], 4
	jne	$LN11@BN_mod_inv
; Line 241
	push	ebx
	mov	ebx, DWORD PTR _ctx$[esp+28]
	push	ebp
	push	esi
	push	edi
	push	ebx
	call	_BN_CTX_start
; Line 242
	push	ebx
	call	_BN_CTX_get
	mov	esi, eax
; Line 243
	push	ebx
	mov	DWORD PTR _A$1$[esp+56], esi
	call	_BN_CTX_get
; Line 244
	push	ebx
	mov	ebp, eax
	call	_BN_CTX_get
; Line 245
	push	ebx
	mov	edi, eax
	call	_BN_CTX_get
; Line 246
	push	ebx
	mov	DWORD PTR _D$1$[esp+68], eax
	call	_BN_CTX_get
; Line 247
	push	ebx
	mov	DWORD PTR _M$1$[esp+72], eax
	call	_BN_CTX_get
; Line 248
	push	DWORD PTR _ctx$[esp+68]
	mov	ebx, eax
	call	_BN_CTX_get
	add	esp, 32					; 00000020H
	mov	DWORD PTR _T$1$[esp+44], eax
; Line 249
	test	eax, eax
	mov	eax, DWORD PTR _in$[esp+40]
	je	$LN180@BN_mod_inv
; Line 252
	test	eax, eax
	jne	SHORT $LN13@BN_mod_inv
; Line 253
	call	_BN_new
$LN13@BN_mod_inv:
; Line 255
	mov	DWORD PTR _R$1$[esp+44], eax
; Line 256
	test	eax, eax
	je	$LN179@BN_mod_inv
; Line 259
	push	1
	push	edi
	call	_BN_set_word
; Line 260
	push	0
	push	ebx
	call	_BN_set_word
; Line 261
	push	DWORD PTR _a$[esp+56]
	push	ebp
	call	_BN_copy
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 263
	push	DWORD PTR _n$[esp+40]
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 265
	mov	DWORD PTR [esi+12], 0
; Line 266
	cmp	DWORD PTR [ebp+12], 0
	jne	SHORT $LN19@BN_mod_inv
	push	esi
	push	ebp
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN20@BN_mod_inv
$LN19@BN_mod_inv:
; Line 267
	push	DWORD PTR _ctx$[esp+40]
	push	esi
	push	ebp
	push	ebp
	call	_BN_nnmod
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN147@BN_mod_inv
$LN20@BN_mod_inv:
; Line 279
	mov	ecx, DWORD PTR _n$[esp+40]
	mov	DWORD PTR _sign$1$[esp+44], -1
	cmp	DWORD PTR [ecx+4], 0
	jle	$LN96@BN_mod_inv
	mov	eax, DWORD PTR [ecx]
	test	BYTE PTR [eax], 1
	je	$LN96@BN_mod_inv
	push	ecx
	call	_BN_num_bits
	add	esp, 4
	cmp	eax, 2048				; 00000800H
	jg	$LN96@BN_mod_inv
; Line 288
	cmp	DWORD PTR [ebp+4], 0
	je	$LN135@BN_mod_inv
$LL2@BN_mod_inv:
; Line 301
	xor	esi, esi
; Line 302
	push	esi
	push	ebp
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@BN_mod_inv
$LL4@BN_mod_inv:
; Line 303
	inc	esi
; Line 305
	cmp	DWORD PTR [edi+4], 0
	jle	SHORT $LN24@BN_mod_inv
	mov	eax, DWORD PTR [edi]
	test	BYTE PTR [eax], 1
	je	SHORT $LN24@BN_mod_inv
; Line 306
	push	DWORD PTR _n$[esp+40]
	push	edi
	push	edi
	call	_BN_uadd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
$LN24@BN_mod_inv:
; Line 312
	push	edi
	push	edi
	call	_BN_rshift1
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 302
	push	esi
	push	ebp
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LL4@BN_mod_inv
; Line 315
	test	esi, esi
	jle	SHORT $LN27@BN_mod_inv
; Line 316
	push	esi
	push	ebp
	push	ebp
	call	_BN_rshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
$LN27@BN_mod_inv:
; Line 323
	xor	esi, esi
; Line 324
	push	esi
	push	DWORD PTR _A$1$[esp+48]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN137@BN_mod_inv
	npad	2
$LL6@BN_mod_inv:
; Line 325
	inc	esi
; Line 327
	cmp	DWORD PTR [ebx+4], 0
	jle	SHORT $LN29@BN_mod_inv
	mov	eax, DWORD PTR [ebx]
	test	BYTE PTR [eax], 1
	je	SHORT $LN29@BN_mod_inv
; Line 328
	push	DWORD PTR _n$[esp+40]
	push	ebx
	push	ebx
	call	_BN_uadd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
$LN29@BN_mod_inv:
; Line 332
	push	ebx
	push	ebx
	call	_BN_rshift1
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 324
	push	esi
	push	DWORD PTR _A$1$[esp+48]
	call	_BN_is_bit_set
	add	esp, 8
	test	eax, eax
	je	SHORT $LL6@BN_mod_inv
; Line 335
	test	esi, esi
	jle	SHORT $LN137@BN_mod_inv
; Line 336
	push	esi
	mov	esi, DWORD PTR _A$1$[esp+48]
	push	esi
	push	esi
	call	_BN_rshift
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
	jmp	SHORT $LN32@BN_mod_inv
$LN137@BN_mod_inv:
	mov	esi, DWORD PTR _A$1$[esp+44]
$LN32@BN_mod_inv:
; Line 352
	push	esi
	push	ebp
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	js	SHORT $LN33@BN_mod_inv
; Line 354
	push	ebx
	push	edi
	push	edi
	call	_BN_uadd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 360
	push	esi
	push	ebp
	push	ebp
; Line 362
	jmp	SHORT $LN188@BN_mod_inv
$LN33@BN_mod_inv:
; Line 364
	push	edi
	push	ebx
	push	ebx
	call	_BN_uadd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 370
	push	ebp
	push	esi
	push	esi
$LN188@BN_mod_inv:
	call	_BN_usub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 288
	cmp	DWORD PTR [ebp+4], 0
	jne	$LL2@BN_mod_inv
; Line 489
	jmp	$LN135@BN_mod_inv
$LN96@BN_mod_inv:
; Line 377
	cmp	DWORD PTR [ebp+4], 0
	je	$LN135@BN_mod_inv
	npad	3
$LL8@BN_mod_inv:
; Line 387
	push	ebp
	call	_BN_num_bits
	push	DWORD PTR _A$1$[esp+48]
	mov	esi, eax
	call	_BN_num_bits
	add	esp, 8
	cmp	eax, esi
	jne	SHORT $LN39@BN_mod_inv
; Line 388
	push	1
	push	DWORD PTR _D$1$[esp+48]
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 390
	push	ebp
	push	DWORD PTR _A$1$[esp+48]
	push	DWORD PTR _M$1$[esp+52]
	call	_BN_sub
	add	esp, 12					; 0000000cH
; Line 392
	jmp	$LN190@BN_mod_inv
$LN39@BN_mod_inv:
	push	ebp
	call	_BN_num_bits
	push	DWORD PTR _A$1$[esp+48]
	lea	esi, DWORD PTR [eax+1]
	call	_BN_num_bits
	add	esp, 8
	cmp	eax, esi
	jne	$LN43@BN_mod_inv
; Line 394
	mov	esi, DWORD PTR _T$1$[esp+44]
	push	ebp
	push	esi
	call	_BN_lshift1
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 396
	push	esi
	mov	esi, DWORD PTR _A$1$[esp+48]
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN46@BN_mod_inv
; Line 398
	push	1
	push	DWORD PTR _D$1$[esp+48]
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 400
	push	ebp
	push	esi
	push	DWORD PTR _M$1$[esp+52]
	call	_BN_sub
	add	esp, 12					; 0000000cH
; Line 402
	jmp	$LN190@BN_mod_inv
$LN46@BN_mod_inv:
; Line 404
	push	DWORD PTR _T$1$[esp+44]
	push	esi
	push	DWORD PTR _M$1$[esp+52]
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 406
	push	ebp
	push	DWORD PTR _T$1$[esp+48]
	push	DWORD PTR _D$1$[esp+52]
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 408
	push	DWORD PTR _D$1$[esp+44]
	push	esi
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN52@BN_mod_inv
; Line 410
	push	2
	push	DWORD PTR _D$1$[esp+48]
	call	_BN_set_word
	add	esp, 8
; Line 415
	jmp	SHORT $LN190@BN_mod_inv
$LN52@BN_mod_inv:
; Line 417
	push	3
	push	DWORD PTR _D$1$[esp+48]
	call	_BN_set_word
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 422
	mov	eax, DWORD PTR _M$1$[esp+44]
	push	ebp
	push	eax
	push	eax
	call	_BN_sub
	add	esp, 12					; 0000000cH
; Line 426
	jmp	SHORT $LN190@BN_mod_inv
$LN43@BN_mod_inv:
; Line 427
	push	DWORD PTR _ctx$[esp+40]
	push	ebp
	push	DWORD PTR _A$1$[esp+52]
	push	DWORD PTR _M$1$[esp+56]
	push	DWORD PTR _D$1$[esp+60]
	call	_BN_div
	add	esp, 20					; 00000014H
$LN190@BN_mod_inv:
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 470
	mov	ecx, DWORD PTR _D$1$[esp+44]
	mov	esi, ebp
	mov	edx, DWORD PTR _A$1$[esp+44]
	mov	ebp, DWORD PTR _M$1$[esp+44]
	mov	DWORD PTR _tmp$1$[esp+40], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _A$1$[esp+44], esi
	cmp	eax, 1
	jne	$LN75@BN_mod_inv
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN143@BN_mod_inv
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN143@BN_mod_inv
; Line 471
	push	ebx
	push	edi
	push	edx
; Line 473
	jmp	$LN192@BN_mod_inv
$LN143@BN_mod_inv:
	mov	eax, DWORD PTR [ecx+4]
; Line 474
	cmp	eax, 1
	jne	SHORT $LN75@BN_mod_inv
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN141@BN_mod_inv
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN141@BN_mod_inv
; Line 475
	push	edi
	push	edx
	call	_BN_lshift1
	add	esp, 8
; Line 477
	jmp	SHORT $LN194@BN_mod_inv
$LN141@BN_mod_inv:
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, 1
	jne	SHORT $LN75@BN_mod_inv
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN139@BN_mod_inv
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN139@BN_mod_inv
; Line 478
	push	2
	push	edi
	push	edx
	call	_BN_lshift
	add	esp, 12					; 0000000cH
; Line 480
	jmp	SHORT $LN194@BN_mod_inv
$LN139@BN_mod_inv:
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, 1
	jne	SHORT $LN75@BN_mod_inv
; Line 481
	push	edi
	push	edx
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 483
	mov	eax, DWORD PTR _D$1$[esp+44]
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR [eax]
	push	DWORD PTR _tmp$1$[esp+44]
	call	_BN_mul_word
	add	esp, 8
; Line 485
	jmp	SHORT $LN194@BN_mod_inv
$LN75@BN_mod_inv:
; Line 486
	push	DWORD PTR _ctx$[esp+40]
	push	edi
	push	ecx
	push	edx
	call	_BN_mul
	add	esp, 16					; 00000010H
$LN194@BN_mod_inv:
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 489
	mov	eax, DWORD PTR _tmp$1$[esp+40]
	push	ebx
	push	eax
	push	eax
$LN192@BN_mod_inv:
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
; Line 497
	mov	eax, DWORD PTR _sign$1$[esp+44]
	neg	eax
	mov	DWORD PTR _M$1$[esp+44], ebx
	cmp	DWORD PTR [ebp+4], 0
	mov	ebx, edi
	mov	edi, DWORD PTR _tmp$1$[esp+40]
	mov	DWORD PTR _sign$1$[esp+44], eax
	jne	$LL8@BN_mod_inv
; Line 509
	test	eax, eax
	jns	SHORT $LN145@BN_mod_inv
$LN135@BN_mod_inv:
; Line 510
	mov	edi, DWORD PTR _n$[esp+40]
	push	ebx
	push	edi
	push	ebx
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN147@BN_mod_inv
	jmp	SHORT $LN82@BN_mod_inv
$LN145@BN_mod_inv:
	mov	edi, DWORD PTR _n$[esp+40]
$LN82@BN_mod_inv:
; Line 515
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN86@BN_mod_inv
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN86@BN_mod_inv
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN86@BN_mod_inv
; Line 517
	cmp	DWORD PTR [ebx+12], 0
	jne	SHORT $LN87@BN_mod_inv
	push	edi
	push	ebx
	call	_BN_ucmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN87@BN_mod_inv
; Line 518
	mov	esi, DWORD PTR _R$1$[esp+44]
	push	ebx
	push	esi
	call	_BN_copy
; Line 520
	mov	ebp, DWORD PTR _ctx$[esp+48]
	add	esp, 8
	jmp	SHORT $LN196@BN_mod_inv
$LN87@BN_mod_inv:
; Line 521
	mov	ebp, DWORD PTR _ctx$[esp+40]
	mov	esi, DWORD PTR _R$1$[esp+44]
	push	ebp
	push	edi
	push	ebx
	push	esi
	call	_BN_nnmod
	add	esp, 16					; 00000010H
$LN196@BN_mod_inv:
	test	eax, eax
	je	SHORT $LN181@BN_mod_inv
; Line 532
	push	ebp
	mov	DWORD PTR _ret$1$[esp+48], esi
	call	_BN_CTX_end
	add	esp, 4
; Line 534
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 535
	add	esp, 28					; 0000001cH
	ret	0
$LN86@BN_mod_inv:
; Line 525
	push	525					; 0000020dH
	push	OFFSET ??_C@_0BF@ODABJPII@?4?2crypto?2bn?2bn_gcd?4c?$AA@
	push	108					; 0000006cH
	push	110					; 0000006eH
	push	3
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN147@BN_mod_inv:
	mov	ebp, DWORD PTR _ctx$[esp+40]
$LN181@BN_mod_inv:
	mov	eax, DWORD PTR _R$1$[esp+44]
$LN134@BN_mod_inv:
; Line 530
	cmp	DWORD PTR _in$[esp+40], 0
	jne	SHORT $LN91@BN_mod_inv
; Line 531
	push	eax
	call	_BN_free
	add	esp, 4
$LN91@BN_mod_inv:
; Line 532
	push	ebp
	call	_BN_CTX_end
; Line 534
	mov	eax, DWORD PTR _ret$1$[esp+48]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 535
	add	esp, 28					; 0000001cH
	ret	0
$LN179@BN_mod_inv:
	mov	ebp, DWORD PTR _ctx$[esp+40]
	jmp	SHORT $LN134@BN_mod_inv
$LN180@BN_mod_inv:
	mov	ebp, DWORD PTR _ctx$[esp+40]
	xor	eax, eax
	jmp	SHORT $LN134@BN_mod_inv
$LN11@BN_mod_inv:
	add	esp, 28					; 0000001cH
; Line 235
	mov	DWORD PTR _n$[esp-4], ecx
	mov	DWORD PTR _a$[esp-4], eax
	jmp	_BN_mod_inverse_no_branch
_BN_mod_inverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_gcd
_TEXT	SEGMENT
_r$ = 8							; size = 4
_in_a$ = 12						; size = 4
_in_b$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_gcd	PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_gcd.c
; Line 118
	push	ebx
; Line 125
	mov	ebx, DWORD PTR _ctx$[esp]
	push	ebp
	push	esi
	push	edi
	push	ebx
	xor	ebp, ebp
	call	_BN_CTX_start
; Line 126
	push	ebx
	call	_BN_CTX_get
; Line 127
	push	ebx
	mov	edi, eax
	call	_BN_CTX_get
	add	esp, 12					; 0000000cH
	mov	esi, eax
; Line 128
	test	edi, edi
	je	SHORT $err$11
	test	esi, esi
	je	SHORT $err$11
; Line 131
	push	DWORD PTR _in_a$[esp+12]
	push	edi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$11
; Line 133
	push	DWORD PTR _in_b$[esp+12]
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	je	SHORT $err$11
; Line 138
	push	esi
	mov	DWORD PTR [edi+12], ebp
	push	edi
	mov	DWORD PTR [esi+12], ebp
	call	_BN_cmp
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN6@BN_gcd
; Line 139
	mov	eax, edi
; Line 140
	mov	edi, esi
; Line 141
	mov	esi, eax
$LN6@BN_gcd:
; Line 143
	push	esi
	push	edi
	call	_euclid
	add	esp, 8
; Line 144
	test	eax, eax
	je	SHORT $err$11
; Line 147
	push	eax
	push	DWORD PTR _r$[esp+16]
	call	_BN_copy
	add	esp, 8
	mov	ecx, 1
	test	eax, eax
	cmovne	ebp, ecx
$err$11:
; Line 151
	push	ebx
	call	_BN_CTX_end
	add	esp, 4
; Line 153
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 154
	ret	0
_BN_gcd	ENDP
_TEXT	ENDS
END
