; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@LAGOGLFJ@socket?5accept?$AA@		; `string'
;	COMDAT ??_C@_0O@LAGOGLFJ@socket?5accept?$AA@
CONST	SEGMENT
??_C@_0O@LAGOGLFJ@socket?5accept?$AA@ DB 'socket accept', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_methods_acceptp DD 050dH
	DD	FLAT:??_C@_0O@LAGOGLFJ@socket?5accept?$AA@
	DD	FLAT:_acpt_write
	DD	FLAT:_acpt_read
	DD	FLAT:_acpt_puts
	DD	00H
	DD	FLAT:_acpt_ctrl
	DD	FLAT:_acpt_new
	DD	FLAT:_acpt_free
	DD	00H
_DATA	ENDS
PUBLIC	_BIO_s_accept
PUBLIC	_BIO_new_accept
PUBLIC	??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@ ; `string'
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__shutdown@8:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_BUF_strdup:PROC
EXTRN	_BIO_set_flags:PROC
EXTRN	_BIO_clear_flags:PROC
EXTRN	_BIO_get_callback:PROC
EXTRN	_BIO_set_callback:PROC
EXTRN	_BIO_get_callback_arg:PROC
EXTRN	_BIO_set_callback_arg:PROC
EXTRN	_BIO_new:PROC
EXTRN	_BIO_free:PROC
EXTRN	_BIO_read:PROC
EXTRN	_BIO_write:PROC
EXTRN	_BIO_ctrl:PROC
EXTRN	_BIO_push:PROC
EXTRN	_BIO_dup_chain:PROC
EXTRN	_BIO_socket_nbio:PROC
EXTRN	_BIO_get_accept_socket:PROC
EXTRN	_BIO_accept:PROC
EXTRN	_BIO_new_socket:PROC
EXTRN	_BIO_copy_next_retry:PROC
EXTRN	_ERR_put_error:PROC
;	COMDAT ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
CONST	SEGMENT
??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@ DB '.\crypto\bio\bss'
	DB	'_acpt.c', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_ACCEPT_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_BIO_ACCEPT_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 156
	push	esi
; Line 157
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	je	SHORT $LN1@BIO_ACCEPT
; Line 160
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN3@BIO_ACCEPT
; Line 161
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN3@BIO_ACCEPT:
; Line 162
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN4@BIO_ACCEPT
; Line 163
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN4@BIO_ACCEPT:
; Line 164
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN5@BIO_ACCEPT
; Line 165
	push	eax
	call	_BIO_free
	add	esp, 4
$LN5@BIO_ACCEPT:
; Line 166
	push	esi
	call	_CRYPTO_free
	add	esp, 4
$LN1@BIO_ACCEPT:
	pop	esi
; Line 167
	ret	0
_BIO_ACCEPT_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_ACCEPT_new
_TEXT	SEGMENT
_BIO_ACCEPT_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 146
	push	146					; 00000092H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	32					; 00000020H
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@BIO_ACCEPT
; Line 153
	ret	0
$LN2@BIO_ACCEPT:
	xorps	xmm0, xmm0
; Line 149
	movups	XMMWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax+16], xmm0
; Line 150
	mov	DWORD PTR [eax+8], -1
; Line 151
	mov	DWORD PTR [eax+24], 0
; Line 153
	ret	0
_BIO_ACCEPT_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_close_socket
_TEXT	SEGMENT
_bio$ = 8						; size = 4
_acpt_close_socket PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 170
	push	esi
	push	edi
; Line 173
	mov	edi, DWORD PTR _bio$[esp+4]
	mov	esi, DWORD PTR [edi+32]
; Line 174
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, -1
	je	SHORT $LN2@acpt_close
; Line 175
	push	2
	push	eax
	call	DWORD PTR __imp__shutdown@8
; Line 176
	push	DWORD PTR [esi+8]
	call	DWORD PTR __imp__closesocket@4
; Line 177
	mov	DWORD PTR [esi+8], -1
; Line 178
	mov	DWORD PTR [edi+28], -1
$LN2@acpt_close:
; Line 180
	pop	edi
	pop	esi
	ret	0
_acpt_close_socket ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_state
_TEXT	SEGMENT
_b$ = 8							; size = 4
_c$ = 12						; size = 4
_acpt_state PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 201
	push	ebx
	push	esi
	mov	esi, DWORD PTR _c$[esp+4]
	push	edi
	mov	edi, DWORD PTR _b$[esp+8]
	npad	5
$again$35:
; Line 207
	mov	eax, DWORD PTR [esi]
	sub	eax, 1
	je	$LN4@acpt_state
	sub	eax, 1
	je	SHORT $LN9@acpt_state
	sub	eax, 1
	jne	SHORT $LN31@acpt_state
; Line 288
	cmp	DWORD PTR [edi+36], eax
	jne	$LN24@acpt_state
; Line 289
	mov	DWORD PTR [esi], 2
; Line 290
	jmp	SHORT $again$35
$LN9@acpt_state:
; Line 231
	cmp	DWORD PTR [edi+36], 0
	je	SHORT $LN10@acpt_state
; Line 232
	mov	DWORD PTR [esi], 3
; Line 233
	jmp	SHORT $again$35
$LN31@acpt_state:
	pop	edi
	pop	esi
; Line 295
	xor	eax, eax
	pop	ebx
; Line 299
	ret	0
$LN10@acpt_state:
	push	ebp
; Line 235
	push	15					; 0000000fH
	push	edi
	call	_BIO_clear_flags
; Line 237
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+24], 0
	push	eax
	push	DWORD PTR [esi+8]
	call	_BIO_accept
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 240
	cmp	ebp, -2					; fffffffeH
	jne	SHORT $LN11@acpt_state
; Line 241
	push	12					; 0000000cH
	push	edi
	call	_BIO_set_flags
	add	esp, 8
; Line 242
	mov	DWORD PTR [edi+24], 3
; Line 243
	or	eax, -1
$LN32@acpt_state:
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 299
	ret	0
$LN11@acpt_state:
; Line 246
	test	ebp, ebp
	js	SHORT $LN32@acpt_state
; Line 249
	push	1
	push	ebp
	call	_BIO_new_socket
	mov	ebx, eax
	add	esp, 8
; Line 250
	test	ebx, ebx
	je	$LN22@acpt_state
; Line 253
	push	edi
	call	_BIO_get_callback
	push	eax
	push	ebx
	call	_BIO_set_callback
; Line 254
	push	edi
	call	_BIO_get_callback_arg
	push	eax
	push	ebx
	call	_BIO_set_callback_arg
	add	esp, 24					; 00000018H
; Line 256
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN15@acpt_state
; Line 257
	push	1
	push	ebp
	call	_BIO_socket_nbio
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@acpt_state
; Line 258
	push	259					; 00000103H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	105					; 00000069H
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 260
	jmp	SHORT $err$36
$LN15@acpt_state:
; Line 268
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN16@acpt_state
; Line 269
	push	eax
	call	_BIO_dup_chain
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	je	SHORT $err$36
; Line 271
	push	ebx
	push	ebp
	call	_BIO_push
	add	esp, 8
	test	eax, eax
	je	SHORT $err$36
; Line 273
	mov	ebx, ebp
$LN16@acpt_state:
; Line 275
	push	ebx
	push	edi
	call	_BIO_push
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@acpt_state
$err$36:
; Line 281
	test	ebx, ebx
	je	SHORT $LN22@acpt_state
; Line 282
	push	ebx
	call	_BIO_free
	add	esp, 4
$LN22@acpt_state:
; Line 285
	pop	ebp
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 299
	ret	0
$LN19@acpt_state:
	pop	ebp
	pop	edi
; Line 278
	mov	DWORD PTR [esi], 3
; Line 279
	mov	eax, 1
	pop	esi
	pop	ebx
; Line 299
	ret	0
$LN4@acpt_state:
; Line 209
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN5@acpt_state
; Line 210
	push	210					; 000000d2H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	111					; 0000006fH
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN33@acpt_state:
; Line 211
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 299
	ret	0
$LN5@acpt_state:
; Line 213
	push	DWORD PTR [esi+24]
	push	eax
	call	_BIO_get_accept_socket
	mov	ebx, eax
	add	esp, 8
; Line 214
	cmp	ebx, -1
	je	SHORT $LN33@acpt_state
; Line 217
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN8@acpt_state
; Line 218
	push	1
	push	ebx
	call	_BIO_socket_nbio
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@acpt_state
; Line 219
	push	ebx
	call	DWORD PTR __imp__closesocket@4
; Line 220
	push	221					; 000000ddH
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	106					; 0000006aH
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 222
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
; Line 299
	ret	0
$LN8@acpt_state:
; Line 225
	mov	DWORD PTR [esi+8], ebx
; Line 226
	mov	DWORD PTR [edi+28], ebx
; Line 227
	mov	DWORD PTR [esi], 2
$LN24@acpt_state:
; Line 228
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 299
	ret	0
_acpt_state ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_free
_TEXT	SEGMENT
_a$ = 8							; size = 4
_acpt_free PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 183
	push	esi
; Line 186
	mov	esi, DWORD PTR _a$[esp]
	test	esi, esi
	jne	SHORT $LN2@acpt_free
; Line 187
	xor	eax, eax
	pop	esi
; Line 198
	ret	0
$LN2@acpt_free:
; Line 190
	cmp	DWORD PTR [esi+16], 0
	push	edi
	mov	edi, DWORD PTR [esi+32]
	je	SHORT $LN3@acpt_free
; Line 174
	mov	eax, DWORD PTR [edi+8]
	cmp	eax, -1
	je	SHORT $LN6@acpt_free
; Line 175
	push	2
	push	eax
	call	DWORD PTR __imp__shutdown@8
; Line 176
	push	DWORD PTR [edi+8]
	call	DWORD PTR __imp__closesocket@4
; Line 177
	mov	DWORD PTR [edi+8], -1
; Line 178
	mov	DWORD PTR [esi+28], -1
$LN6@acpt_free:
; Line 192
	push	edi
	call	_BIO_ACCEPT_free
	add	esp, 4
; Line 193
	mov	DWORD PTR [esi+32], 0
; Line 194
	mov	DWORD PTR [esi+20], 0
; Line 195
	mov	DWORD PTR [esi+12], 0
$LN3@acpt_free:
; Line 197
	pop	edi
	mov	eax, 1
	pop	esi
; Line 198
	ret	0
_acpt_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_new
_TEXT	SEGMENT
_bi$ = 8						; size = 4
_acpt_new PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 128
	push	esi
; Line 131
	mov	esi, DWORD PTR _bi$[esp]
; Line 146
	push	146					; 00000092H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	32					; 00000020H
; Line 131
	mov	DWORD PTR [esi+12], 0
; Line 132
	mov	DWORD PTR [esi+28], -1
; Line 133
	mov	DWORD PTR [esi+20], 0
; Line 146
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@acpt_new
	xorps	xmm0, xmm0
; Line 149
	movups	XMMWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax+16], xmm0
; Line 150
	mov	DWORD PTR [eax+8], -1
; Line 151
	mov	DWORD PTR [eax+24], 0
; Line 136
	mov	DWORD PTR [esi+32], eax
; Line 137
	mov	DWORD PTR [eax], 1
; Line 139
	mov	eax, 1
	mov	DWORD PTR [esi+16], 1
	pop	esi
; Line 140
	ret	0
$LN7@acpt_new:
; Line 135
	xor	eax, eax
	pop	esi
; Line 140
	ret	0
_acpt_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_ctrl
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmd$ = 12						; size = 4
_num$ = 16						; size = 4
_ptr$ = 20						; size = 4
_acpt_ctrl PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 348
	mov	eax, DWORD PTR _cmd$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _b$[esp]
	dec	eax
	push	ebp
	push	esi
	push	edi
	mov	esi, DWORD PTR [ebx+32]
	mov	edi, 1
	cmp	eax, 131				; 00000083H
	ja	$LN33@acpt_ctrl
	movzx	eax, BYTE PTR $LN35@acpt_ctrl[eax]
	jmp	DWORD PTR $LN38@acpt_ctrl[eax*4]
$LN4@acpt_ctrl:
; Line 352
	push	ebx
	xor	edi, edi
	mov	DWORD PTR [esi], 1
	call	_acpt_close_socket
	add	esp, 4
; Line 353
	mov	DWORD PTR [ebx+20], edi
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN5@acpt_ctrl:
; Line 357
	push	esi
	push	ebx
	call	_acpt_state
	add	esp, 8
	mov	edi, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN6@acpt_ctrl:
; Line 360
	mov	ebp, DWORD PTR _ptr$[esp+12]
	test	ebp, ebp
	je	$LN2@acpt_ctrl
; Line 361
	mov	eax, DWORD PTR _num$[esp+12]
	test	eax, eax
	jne	SHORT $LN8@acpt_ctrl
; Line 362
	mov	DWORD PTR [ebx+12], edi
; Line 363
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN10@acpt_ctrl
; Line 364
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN10@acpt_ctrl:
; Line 365
	push	ebp
	call	_BUF_strdup
	add	esp, 4
	mov	DWORD PTR [esi+4], eax
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN8@acpt_ctrl:
; Line 366
	cmp	eax, 1
	jne	SHORT $LN11@acpt_ctrl
; Line 367
	mov	DWORD PTR [esi+12], edi
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN11@acpt_ctrl:
; Line 368
	cmp	eax, 2
	jne	$LN2@acpt_ctrl
; Line 369
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN14@acpt_ctrl
; Line 370
	push	eax
	call	_BIO_free
	add	esp, 4
$LN14@acpt_ctrl:
; Line 436
	mov	eax, edi
	mov	DWORD PTR [esi+28], ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN15@acpt_ctrl:
; Line 376
	mov	eax, DWORD PTR _num$[esp+12]
	mov	DWORD PTR [esi+20], eax
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN16@acpt_ctrl:
; Line 380
	mov	eax, DWORD PTR _ptr$[esp+12]
	mov	DWORD PTR [ebx+12], edi
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+28], eax
; Line 381
	mov	DWORD PTR [esi+8], eax
; Line 383
	mov	eax, DWORD PTR _num$[esp+12]
	mov	DWORD PTR [esi], 2
	mov	DWORD PTR [ebx+16], eax
; Line 436
	mov	eax, edi
	mov	DWORD PTR [ebx+12], edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN17@acpt_ctrl:
; Line 387
	cmp	DWORD PTR [ebx+12], 0
	je	SHORT $LN18@acpt_ctrl
; Line 389
	mov	ecx, DWORD PTR _ptr$[esp+12]
	test	ecx, ecx
	je	SHORT $LN20@acpt_ctrl
; Line 390
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx], eax
$LN20@acpt_ctrl:
; Line 391
	mov	edi, DWORD PTR [esi+8]
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN18@acpt_ctrl:
; Line 393
	or	edi, -1
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN21@acpt_ctrl:
; Line 396
	cmp	DWORD PTR [ebx+12], 0
	je	SHORT $LN18@acpt_ctrl
; Line 397
	mov	ecx, DWORD PTR _ptr$[esp+12]
	test	ecx, ecx
	je	SHORT $LN18@acpt_ctrl
; Line 399
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx], eax
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN26@acpt_ctrl:
; Line 406
	mov	edi, DWORD PTR [ebx+16]
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN27@acpt_ctrl:
; Line 409
	mov	eax, DWORD PTR _num$[esp+12]
	mov	DWORD PTR [ebx+16], eax
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN30@acpt_ctrl:
; Line 418
	mov	eax, DWORD PTR _num$[esp+12]
	mov	DWORD PTR [esi+24], eax
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN31@acpt_ctrl:
; Line 421
	mov	edi, DWORD PTR [esi+24]
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN33@acpt_ctrl:
; Line 433
	xor	edi, edi
$LN2@acpt_ctrl:
; Line 436
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 437
	ret	0
$LN38@acpt_ctrl:
	DD	$LN4@acpt_ctrl
	DD	$LN26@acpt_ctrl
	DD	$LN27@acpt_ctrl
	DD	$LN33@acpt_ctrl
	DD	$LN2@acpt_ctrl
	DD	$LN5@acpt_ctrl
	DD	$LN15@acpt_ctrl
	DD	$LN16@acpt_ctrl
	DD	$LN17@acpt_ctrl
	DD	$LN6@acpt_ctrl
	DD	$LN21@acpt_ctrl
	DD	$LN30@acpt_ctrl
	DD	$LN31@acpt_ctrl
	DD	$LN33@acpt_ctrl
$LN35@acpt_ctrl:
	DB	0
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	1
	DB	2
	DB	3
	DB	4
	DB	4
	DB	3
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	5
	DB	6
	DB	13					; 0000000dH
	DB	7
	DB	8
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	9
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	10					; 0000000aH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
_acpt_ctrl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_puts
_TEXT	SEGMENT
_bp$ = 8						; size = 4
_str$ = 12						; size = 4
_acpt_puts PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 443
	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, edx
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL3@acpt_puts:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@acpt_puts
	sub	eax, esi
; Line 444
	push	eax
	push	edx
	push	DWORD PTR _bp$[esp+8]
	call	_acpt_write
	add	esp, 12					; 0000000cH
	pop	esi
; Line 446
	ret	0
_acpt_puts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_read
_TEXT	SEGMENT
_b$ = 8							; size = 4
_out$ = 12						; size = 4
_outl$ = 16						; size = 4
_acpt_read PROC						; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 302
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 306
	mov	edi, DWORD PTR _b$[esp+12]
	push	15					; 0000000fH
	push	edi
	call	_BIO_clear_flags
; Line 307
	mov	esi, DWORD PTR [edi+32]
	add	esp, 8
; Line 309
	cmp	DWORD PTR [edi+36], 0
	jne	$LN3@acpt_read
$again$54:
; Line 207
	mov	eax, DWORD PTR [esi]
	sub	eax, 1
	je	$LN9@acpt_read
	sub	eax, 1
	je	SHORT $LN14@acpt_read
	sub	eax, 1
	jne	$LN27@acpt_read
; Line 288
	cmp	DWORD PTR [edi+36], eax
	jne	$LN3@acpt_read
; Line 289
	mov	DWORD PTR [esi], 2
; Line 290
	jmp	SHORT $again$54
$LN14@acpt_read:
; Line 231
	cmp	DWORD PTR [edi+36], 0
	je	SHORT $LN15@acpt_read
; Line 232
	mov	DWORD PTR [esi], 3
; Line 233
	jmp	SHORT $again$54
$LN15@acpt_read:
; Line 235
	push	15					; 0000000fH
	push	edi
	call	_BIO_clear_flags
; Line 237
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+24], 0
	push	eax
	push	DWORD PTR [esi+8]
	call	_BIO_accept
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 240
	cmp	ebx, -2					; fffffffeH
	je	$LN42@acpt_read
; Line 246
	test	ebx, ebx
	js	$LN35@acpt_read
; Line 249
	push	1
	push	ebx
	call	_BIO_new_socket
	mov	ebp, eax
	add	esp, 8
; Line 250
	test	ebp, ebp
	je	$LN27@acpt_read
; Line 253
	push	edi
	call	_BIO_get_callback
	push	eax
	push	ebp
	call	_BIO_set_callback
; Line 254
	push	edi
	call	_BIO_get_callback_arg
	push	eax
	push	ebp
	call	_BIO_set_callback_arg
	add	esp, 24					; 00000018H
; Line 256
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN20@acpt_read
; Line 257
	push	1
	push	ebx
	call	_BIO_socket_nbio
	add	esp, 8
	test	eax, eax
	je	$LN44@acpt_read
$LN20@acpt_read:
; Line 268
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN21@acpt_read
; Line 269
	push	eax
	call	_BIO_dup_chain
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	je	$err$55
; Line 271
	push	ebp
	push	ebx
	call	_BIO_push
	add	esp, 8
	test	eax, eax
	je	$err$55
; Line 273
	mov	ebp, ebx
$LN21@acpt_read:
; Line 275
	push	ebp
	push	edi
	call	_BIO_push
	add	esp, 8
	test	eax, eax
	je	$err$55
; Line 278
	mov	DWORD PTR [esi], 3
; Line 279
	jmp	SHORT $LN40@acpt_read
$LN9@acpt_read:
; Line 209
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	$LN45@acpt_read
; Line 213
	push	DWORD PTR [esi+24]
	push	eax
	call	_BIO_get_accept_socket
	mov	ebx, eax
	add	esp, 8
; Line 214
	cmp	ebx, -1
	je	$LN51@acpt_read
; Line 217
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN13@acpt_read
; Line 218
	push	1
	push	ebx
	call	_BIO_socket_nbio
	add	esp, 8
	test	eax, eax
	je	$LN47@acpt_read
$LN13@acpt_read:
; Line 225
	mov	DWORD PTR [esi+8], ebx
; Line 226
	mov	DWORD PTR [edi+28], ebx
; Line 227
	mov	DWORD PTR [esi], 2
$LN40@acpt_read:
; Line 309
	cmp	DWORD PTR [edi+36], 0
	je	$again$54
$LN3@acpt_read:
; Line 315
	push	DWORD PTR _outl$[esp+12]
	push	DWORD PTR _out$[esp+16]
	push	DWORD PTR [edi+36]
	call	_BIO_read
; Line 316
	push	edi
	mov	esi, eax
	call	_BIO_copy_next_retry
	add	esp, 16					; 00000010H
; Line 317
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 318
	ret	0
$LN44@acpt_read:
; Line 258
	push	259					; 00000103H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	105					; 00000069H
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$55:
; Line 281
	test	ebp, ebp
	je	SHORT $LN27@acpt_read
; Line 282
	push	ebp
	call	_BIO_free
	add	esp, 4
$LN27@acpt_read:
	pop	edi
	pop	esi
; Line 285
	xor	ebx, ebx
	pop	ebp
; Line 312
	mov	eax, ebx
	pop	ebx
; Line 318
	ret	0
$LN42@acpt_read:
; Line 241
	push	12					; 0000000cH
	push	edi
	call	_BIO_set_flags
	add	esp, 8
; Line 242
	mov	DWORD PTR [edi+24], 3
	or	ebx, -1
; Line 312
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 318
	ret	0
$LN47@acpt_read:
; Line 219
	push	ebx
	call	DWORD PTR __imp__closesocket@4
; Line 220
	push	221					; 000000ddH
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	106					; 0000006aH
; Line 222
	jmp	SHORT $LN52@acpt_read
$LN45@acpt_read:
; Line 210
	push	210					; 000000d2H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	111					; 0000006fH
$LN52@acpt_read:
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN51@acpt_read:
; Line 211
	or	ebx, -1
$LN35@acpt_read:
	pop	edi
	pop	esi
	pop	ebp
; Line 312
	mov	eax, ebx
	pop	ebx
; Line 318
	ret	0
_acpt_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _acpt_write
_TEXT	SEGMENT
_b$ = 8							; size = 4
_in$ = 12						; size = 4
_inl$ = 16						; size = 4
_acpt_write PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 321
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 325
	mov	edi, DWORD PTR _b$[esp+12]
	push	15					; 0000000fH
	push	edi
	call	_BIO_clear_flags
; Line 326
	mov	esi, DWORD PTR [edi+32]
	add	esp, 8
; Line 328
	cmp	DWORD PTR [edi+36], 0
	jne	$LN3@acpt_write
$again$54:
; Line 207
	mov	eax, DWORD PTR [esi]
	sub	eax, 1
	je	$LN9@acpt_write
	sub	eax, 1
	je	SHORT $LN14@acpt_write
	sub	eax, 1
	jne	$LN27@acpt_write
; Line 288
	cmp	DWORD PTR [edi+36], eax
	jne	$LN3@acpt_write
; Line 289
	mov	DWORD PTR [esi], 2
; Line 290
	jmp	SHORT $again$54
$LN14@acpt_write:
; Line 231
	cmp	DWORD PTR [edi+36], 0
	je	SHORT $LN15@acpt_write
; Line 232
	mov	DWORD PTR [esi], 3
; Line 233
	jmp	SHORT $again$54
$LN15@acpt_write:
; Line 235
	push	15					; 0000000fH
	push	edi
	call	_BIO_clear_flags
; Line 237
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+24], 0
	push	eax
	push	DWORD PTR [esi+8]
	call	_BIO_accept
	mov	ebx, eax
	add	esp, 16					; 00000010H
; Line 240
	cmp	ebx, -2					; fffffffeH
	je	$LN42@acpt_write
; Line 246
	test	ebx, ebx
	js	$LN35@acpt_write
; Line 249
	push	1
	push	ebx
	call	_BIO_new_socket
	mov	ebp, eax
	add	esp, 8
; Line 250
	test	ebp, ebp
	je	$LN27@acpt_write
; Line 253
	push	edi
	call	_BIO_get_callback
	push	eax
	push	ebp
	call	_BIO_set_callback
; Line 254
	push	edi
	call	_BIO_get_callback_arg
	push	eax
	push	ebp
	call	_BIO_set_callback_arg
	add	esp, 24					; 00000018H
; Line 256
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN20@acpt_write
; Line 257
	push	1
	push	ebx
	call	_BIO_socket_nbio
	add	esp, 8
	test	eax, eax
	je	$LN44@acpt_write
$LN20@acpt_write:
; Line 268
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN21@acpt_write
; Line 269
	push	eax
	call	_BIO_dup_chain
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	je	$err$55
; Line 271
	push	ebp
	push	ebx
	call	_BIO_push
	add	esp, 8
	test	eax, eax
	je	$err$55
; Line 273
	mov	ebp, ebx
$LN21@acpt_write:
; Line 275
	push	ebp
	push	edi
	call	_BIO_push
	add	esp, 8
	test	eax, eax
	je	$err$55
; Line 278
	mov	DWORD PTR [esi], 3
; Line 279
	jmp	SHORT $LN40@acpt_write
$LN9@acpt_write:
; Line 209
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	$LN45@acpt_write
; Line 213
	push	DWORD PTR [esi+24]
	push	eax
	call	_BIO_get_accept_socket
	mov	ebx, eax
	add	esp, 8
; Line 214
	cmp	ebx, -1
	je	$LN51@acpt_write
; Line 217
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN13@acpt_write
; Line 218
	push	1
	push	ebx
	call	_BIO_socket_nbio
	add	esp, 8
	test	eax, eax
	je	$LN47@acpt_write
$LN13@acpt_write:
; Line 225
	mov	DWORD PTR [esi+8], ebx
; Line 226
	mov	DWORD PTR [edi+28], ebx
; Line 227
	mov	DWORD PTR [esi], 2
$LN40@acpt_write:
; Line 328
	cmp	DWORD PTR [edi+36], 0
	je	$again$54
$LN3@acpt_write:
; Line 334
	push	DWORD PTR _inl$[esp+12]
	push	DWORD PTR _in$[esp+16]
	push	DWORD PTR [edi+36]
	call	_BIO_write
; Line 335
	push	edi
	mov	esi, eax
	call	_BIO_copy_next_retry
	add	esp, 16					; 00000010H
; Line 336
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 337
	ret	0
$LN44@acpt_write:
; Line 258
	push	259					; 00000103H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	105					; 00000069H
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$err$55:
; Line 281
	test	ebp, ebp
	je	SHORT $LN27@acpt_write
; Line 282
	push	ebp
	call	_BIO_free
	add	esp, 4
$LN27@acpt_write:
	pop	edi
	pop	esi
; Line 285
	xor	ebx, ebx
	pop	ebp
; Line 331
	mov	eax, ebx
	pop	ebx
; Line 337
	ret	0
$LN42@acpt_write:
; Line 241
	push	12					; 0000000cH
	push	edi
	call	_BIO_set_flags
	add	esp, 8
; Line 242
	mov	DWORD PTR [edi+24], 3
	or	ebx, -1
; Line 331
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 337
	ret	0
$LN47@acpt_write:
; Line 219
	push	ebx
	call	DWORD PTR __imp__closesocket@4
; Line 220
	push	221					; 000000ddH
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	106					; 0000006aH
; Line 222
	jmp	SHORT $LN52@acpt_write
$LN45@acpt_write:
; Line 210
	push	210					; 000000d2H
	push	OFFSET ??_C@_0BI@GOELLJHH@?4?2crypto?2bio?2bss_acpt?4c?$AA@
	push	111					; 0000006fH
$LN52@acpt_write:
	push	100					; 00000064H
	push	32					; 00000020H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN51@acpt_write:
; Line 211
	or	ebx, -1
$LN35@acpt_write:
	pop	edi
	pop	esi
	pop	ebp
; Line 331
	mov	eax, ebx
	pop	ebx
; Line 337
	ret	0
_acpt_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_new_accept
_TEXT	SEGMENT
_str$ = 8						; size = 4
_BIO_new_accept PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 449
	push	esi
; Line 452
	push	OFFSET _methods_acceptp
	call	_BIO_new
	mov	esi, eax
	add	esp, 4
; Line 453
	test	esi, esi
	je	SHORT $LN8@BIO_new_ac
; Line 455
	push	DWORD PTR _str$[esp]
	push	0
	push	118					; 00000076H
	push	esi
	call	_BIO_ctrl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@BIO_new_ac
; Line 456
	mov	eax, esi
	pop	esi
; Line 461
	ret	0
$LN3@BIO_new_ac:
; Line 458
	push	esi
	call	_BIO_free
	add	esp, 4
$LN8@BIO_new_ac:
; Line 459
	xor	eax, eax
	pop	esi
; Line 461
	ret	0
_BIO_new_accept ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BIO_s_accept
_TEXT	SEGMENT
_BIO_s_accept PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bio\bss_acpt.c
; Line 124
	mov	eax, OFFSET _methods_acceptp
; Line 125
	ret	0
_BIO_s_accept ENDP
_TEXT	ENDS
END
