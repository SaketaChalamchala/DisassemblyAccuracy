; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\des\pcbc_enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_DES_pcbc_encrypt
EXTRN	_DES_encrypt1:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DES_pcbc_encrypt
_TEXT	SEGMENT
_tin$ = -8						; size = 8
_sin0$2$ = 8						; size = 4
_xor1$2$ = 8						; size = 4
_xor0$1$ = 8						; size = 4
_input$ = 8						; size = 4
_sin1$2$ = 12						; size = 4
_length$1$ = 12						; size = 4
_output$ = 12						; size = 4
_length$ = 16						; size = 4
_schedule$ = 20						; size = 4
_xor1$1$ = 24						; size = 4
_length$2$ = 24						; size = 4
_ivec$ = 24						; size = 4
_enc$ = 28						; size = 4
_DES_pcbc_encrypt PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\des\pcbc_enc.c
; Line 64
	mov	eax, 8
	call	__chkstk
; Line 74
	cmp	DWORD PTR _enc$[esp+4], 0
; Line 75
	mov	eax, DWORD PTR _ivec$[esp+4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _input$[esp+16]
	lea	edx, DWORD PTR [eax+1]
	push	edi
	mov	edi, DWORD PTR _output$[esp+20]
	je	$LN12@DES_pcbc_e
	movzx	ecx, BYTE PTR [eax]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 24					; 00000018H
	or	ecx, eax
; Line 76
	movzx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR _xor0$1$[esp+20], ecx
	movzx	ecx, BYTE PTR [edx+3]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+5]
	mov	DWORD PTR _xor1$1$[esp+20], ecx
	movzx	ecx, BYTE PTR [edx+6]
	mov	edx, DWORD PTR _xor1$1$[esp+20]
	shl	ecx, 8
	or	ecx, eax
	shl	ecx, 16					; 00000010H
	or	edx, ecx
; Line 77
	mov	ecx, DWORD PTR _length$[esp+20]
	mov	DWORD PTR _length$1$[esp+20], ecx
	test	ecx, ecx
	jle	$LN8@DES_pcbc_e
$LL4@DES_pcbc_e:
; Line 78
	cmp	ecx, 8
	jl	SHORT $LN14@DES_pcbc_e
; Line 79
	movzx	eax, BYTE PTR [esi+1]
	movzx	ebp, BYTE PTR [esi]
; Line 80
	movzx	ebx, BYTE PTR [esi+4]
	shl	eax, 8
	or	ebp, eax
	movzx	eax, BYTE PTR [esi+2]
	shl	eax, 16					; 00000010H
	or	ebp, eax
	movzx	eax, BYTE PTR [esi+3]
	shl	eax, 24					; 00000018H
	or	ebp, eax
	movzx	eax, BYTE PTR [esi+5]
	shl	eax, 8
	or	ebx, eax
	movzx	eax, BYTE PTR [esi+6]
	shl	eax, 16					; 00000010H
	or	ebx, eax
	movzx	eax, BYTE PTR [esi+7]
	shl	eax, 24					; 00000018H
	or	ebx, eax
	add	esi, 8
; Line 81
	jmp	SHORT $LN5@DES_pcbc_e
$LN14@DES_pcbc_e:
; Line 82
	lea	eax, DWORD PTR [ecx-1]
	add	esi, ecx
	xor	ebx, ebx
	xor	ebp, ebp
	cmp	eax, 7
	ja	SHORT $LN5@DES_pcbc_e
	lea	eax, DWORD PTR [ecx-1]
	jmp	DWORD PTR $LN44@DES_pcbc_e[eax*4]
$LN16@DES_pcbc_e:
	movzx	ebx, BYTE PTR [esi-1]
	dec	esi
	shl	ebx, 24					; 00000018H
$LN17@DES_pcbc_e:
	movzx	eax, BYTE PTR [esi-1]
	dec	esi
	shl	eax, 16					; 00000010H
	or	ebx, eax
$LN18@DES_pcbc_e:
	movzx	eax, BYTE PTR [esi-1]
	dec	esi
	shl	eax, 8
	or	ebx, eax
$LN19@DES_pcbc_e:
	movzx	eax, BYTE PTR [esi-1]
	dec	esi
	or	ebx, eax
$LN20@DES_pcbc_e:
	movzx	ebp, BYTE PTR [esi-1]
	dec	esi
	shl	ebp, 24					; 00000018H
$LN21@DES_pcbc_e:
	movzx	eax, BYTE PTR [esi-1]
	dec	esi
	shl	eax, 16					; 00000010H
	or	ebp, eax
$LN22@DES_pcbc_e:
	movzx	eax, BYTE PTR [esi-1]
	dec	esi
	shl	eax, 8
	or	ebp, eax
$LN23@DES_pcbc_e:
	movzx	eax, BYTE PTR [esi-1]
	dec	esi
	or	ebp, eax
$LN5@DES_pcbc_e:
; Line 83
	mov	eax, ebp
	xor	eax, DWORD PTR _xor0$1$[esp+20]
	mov	DWORD PTR _tin$[esp+24], eax
; Line 84
	mov	eax, ebx
	xor	eax, edx
; Line 85
	push	1
	push	DWORD PTR _schedule$[esp+24]
	mov	DWORD PTR _tin$[esp+36], eax
	lea	eax, DWORD PTR _tin$[esp+32]
	push	eax
	call	_DES_encrypt1
; Line 88
	mov	ecx, DWORD PTR _tin$[esp+36]
	add	esp, 12					; 0000000cH
; Line 89
	mov	edx, DWORD PTR _tin$[esp+28]
	mov	eax, ecx
	xor	eax, ebp
; Line 90
	mov	BYTE PTR [edi], cl
	mov	DWORD PTR _xor0$1$[esp+20], eax
	mov	ebp, edx
	mov	eax, ecx
	xor	ebp, ebx
	shr	eax, 8
	mov	BYTE PTR [edi+1], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+2], al
; Line 91
	mov	eax, edx
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [edi+3], cl
	mov	ecx, DWORD PTR _length$1$[esp+20]
	mov	BYTE PTR [edi+4], dl
	sub	ecx, 8
	shr	eax, 8
	mov	BYTE PTR [edi+5], al
	mov	eax, edx
	shr	eax, 16					; 00000010H
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [edi+6], al
	mov	BYTE PTR [edi+7], dl
	add	edi, 8
	mov	DWORD PTR _xor1$1$[esp+20], ebp
	mov	edx, ebp
	mov	DWORD PTR _length$1$[esp+20], ecx
	test	ecx, ecx
	jg	$LL4@DES_pcbc_e
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 115
	add	esp, 8
	ret	0
$LN12@DES_pcbc_e:
; Line 94
	movzx	ebx, BYTE PTR [eax]
	movzx	eax, BYTE PTR [edx]
; Line 95
	movzx	ebp, BYTE PTR [edx+3]
	movzx	ecx, BYTE PTR [edx+6]
	shl	eax, 8
	or	ebx, eax
	shl	ecx, 8
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ebx, eax
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 24					; 00000018H
	or	ebx, eax
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 8
	or	ebp, eax
	movzx	eax, BYTE PTR [edx+5]
	or	ecx, eax
; Line 96
	mov	eax, DWORD PTR _length$[esp+20]
	shl	ecx, 16					; 00000010H
	or	ebp, ecx
	mov	DWORD PTR _length$2$[esp+20], eax
	test	eax, eax
	jle	$LN8@DES_pcbc_e
	npad	1
$LL9@DES_pcbc_e:
; Line 97
	movzx	eax, BYTE PTR [esi+1]
; Line 98
	lea	esi, DWORD PTR [esi+8]
	movzx	ecx, BYTE PTR [esi-8]
	movzx	edx, BYTE PTR [esi-4]
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [esi-6]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	eax, BYTE PTR [esi-5]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	movzx	eax, BYTE PTR [esi-3]
	shl	eax, 8
	or	edx, eax
	mov	DWORD PTR _sin0$2$[esp+20], ecx
	movzx	eax, BYTE PTR [esi-2]
	shl	eax, 16					; 00000010H
	or	edx, eax
; Line 99
	mov	DWORD PTR _tin$[esp+24], ecx
	movzx	eax, BYTE PTR [esi-1]
	shl	eax, 24					; 00000018H
	or	edx, eax
; Line 101
	lea	eax, DWORD PTR _tin$[esp+24]
	push	0
	push	DWORD PTR _schedule$[esp+24]
	mov	DWORD PTR _sin1$2$[esp+28], edx
	push	eax
	mov	DWORD PTR _tin$[esp+40], edx
	call	_DES_encrypt1
; Line 103
	mov	ecx, DWORD PTR _tin$[esp+40]
	add	esp, 12					; 0000000cH
	xor	ebx, DWORD PTR _tin$[esp+24]
	xor	ecx, ebp
; Line 104
	mov	edx, DWORD PTR _length$2$[esp+20]
	cmp	edx, 8
	jl	SHORT $LN24@DES_pcbc_e
; Line 105
	mov	BYTE PTR [edi], bl
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR [edi+1], al
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+2], al
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi+3], al
; Line 106
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [edi+4], cl
	mov	BYTE PTR [edi+5], al
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi+6], al
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi+7], al
	add	edi, 8
; Line 107
	jmp	SHORT $LN10@DES_pcbc_e
$LN24@DES_pcbc_e:
; Line 108
	lea	eax, DWORD PTR [edx-1]
	add	edi, edx
	cmp	eax, 7
	ja	SHORT $LN10@DES_pcbc_e
	lea	eax, DWORD PTR [edx-1]
	jmp	DWORD PTR $LN45@DES_pcbc_e[eax*4]
$LN26@DES_pcbc_e:
	dec	edi
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi], al
$LN27@DES_pcbc_e:
	dec	edi
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi], al
$LN28@DES_pcbc_e:
	dec	edi
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [edi], al
$LN29@DES_pcbc_e:
	dec	edi
	mov	BYTE PTR [edi], cl
$LN30@DES_pcbc_e:
	dec	edi
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edi], al
$LN31@DES_pcbc_e:
	dec	edi
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [edi], al
$LN32@DES_pcbc_e:
	dec	edi
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR [edi], al
$LN33@DES_pcbc_e:
	dec	edi
	mov	BYTE PTR [edi], bl
$LN10@DES_pcbc_e:
; Line 110
	xor	ecx, DWORD PTR _sin1$2$[esp+20]
	sub	edx, 8
	xor	ebx, DWORD PTR _sin0$2$[esp+20]
	mov	ebp, ecx
	mov	DWORD PTR _xor1$2$[esp+20], ecx
	mov	DWORD PTR _length$2$[esp+20], edx
	test	edx, edx
	jg	$LL9@DES_pcbc_e
$LN8@DES_pcbc_e:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 115
	add	esp, 8
	ret	0
$LN44@DES_pcbc_e:
	DD	$LN23@DES_pcbc_e
	DD	$LN22@DES_pcbc_e
	DD	$LN21@DES_pcbc_e
	DD	$LN20@DES_pcbc_e
	DD	$LN19@DES_pcbc_e
	DD	$LN18@DES_pcbc_e
	DD	$LN17@DES_pcbc_e
	DD	$LN16@DES_pcbc_e
$LN45@DES_pcbc_e:
	DD	$LN33@DES_pcbc_e
	DD	$LN32@DES_pcbc_e
	DD	$LN31@DES_pcbc_e
	DD	$LN30@DES_pcbc_e
	DD	$LN29@DES_pcbc_e
	DD	$LN28@DES_pcbc_e
	DD	$LN27@DES_pcbc_e
	DD	$LN26@DES_pcbc_e
_DES_pcbc_encrypt ENDP
_TEXT	ENDS
END
