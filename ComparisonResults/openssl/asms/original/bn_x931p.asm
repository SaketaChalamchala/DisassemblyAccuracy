; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_x931p.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_BN_X931_generate_Xpq
PUBLIC	_BN_X931_derive_prime_ex
PUBLIC	_BN_X931_generate_prime_ex
EXTRN	_BN_GENCB_call:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_rand:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_copy:PROC
EXTRN	_BN_sub:PROC
EXTRN	_BN_add:PROC
EXTRN	_BN_mul:PROC
EXTRN	_BN_mod_sub:PROC
EXTRN	_BN_add_word:PROC
EXTRN	_BN_sub_word:PROC
EXTRN	_BN_gcd:PROC
EXTRN	_BN_mod_inverse:PROC
EXTRN	_BN_is_prime_fasttest_ex:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _bn_x931_derive_pi
_TEXT	SEGMENT
_pi$ = 8						; size = 4
_Xpi$ = 12						; size = 4
_ctx$ = 16						; size = 4
_cb$ = 20						; size = 4
_bn_x931_derive_pi PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_x931p.c
; Line 72
	push	esi
; Line 74
	push	DWORD PTR _Xpi$[esp]
	mov	esi, DWORD PTR _pi$[esp+4]
	push	esi
	call	_BN_copy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@bn_x931_de
$LN20@bn_x931_de:
; Line 75
	xor	eax, eax
	pop	esi
; Line 89
	ret	0
$LN5@bn_x931_de:
; Line 76
	cmp	DWORD PTR [esi+4], 0
	jle	SHORT $LN7@bn_x931_de
	mov	eax, DWORD PTR [esi]
	test	BYTE PTR [eax], 1
	jne	SHORT $LN6@bn_x931_de
$LN7@bn_x931_de:
	push	1
	push	esi
	call	_BN_add_word
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@bn_x931_de
$LN6@bn_x931_de:
	push	ebx
; Line 80
	mov	ebx, DWORD PTR _cb$[esp+4]
	push	ebp
	push	edi
	mov	edi, 1
	push	edi
	push	0
	push	ebx
	call	_BN_GENCB_call
; Line 82
	mov	ebp, DWORD PTR _ctx$[esp+24]
	push	ebx
	push	edi
	push	ebp
	push	27					; 0000001bH
	push	esi
	call	_BN_is_prime_fasttest_ex
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN13@bn_x931_de
$LL2@bn_x931_de:
; Line 84
	push	2
	push	esi
	call	_BN_add_word
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@bn_x931_de
; Line 80
	inc	edi
	push	edi
	push	0
	push	ebx
	call	_BN_GENCB_call
; Line 82
	push	ebx
	push	1
	push	ebp
	push	27					; 0000001bH
	push	esi
	call	_BN_is_prime_fasttest_ex
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LL2@bn_x931_de
$LN13@bn_x931_de:
; Line 87
	push	edi
	push	2
	push	ebx
	call	_BN_GENCB_call
	add	esp, 12					; 0000000cH
; Line 88
	mov	eax, 1
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi
; Line 89
	ret	0
$LN14@bn_x931_de:
	pop	edi
	pop	ebp
	pop	ebx
; Line 85
	xor	eax, eax
	pop	esi
; Line 89
	ret	0
_bn_x931_derive_pi ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_X931_generate_prime_ex
_TEXT	SEGMENT
_p$ = 8							; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_Xp1$ = 20						; size = 4
_Xp2$ = 24						; size = 4
_Xp$ = 28						; size = 4
_e$ = 32						; size = 4
_ctx$ = 36						; size = 4
_cb$ = 40						; size = 4
_BN_X931_generate_prime_ex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_x931p.c
; Line 254
	push	ebx
	push	ebp
	push	esi
; Line 257
	mov	esi, DWORD PTR _ctx$[esp+8]
	xor	ebp, ebp
	push	edi
	push	esi
	call	_BN_CTX_start
; Line 258
	mov	edi, DWORD PTR _Xp1$[esp+16]
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@BN_X931_ge
; Line 259
	push	esi
	call	_BN_CTX_get
	add	esp, 4
	mov	edi, eax
$LN2@BN_X931_ge:
; Line 260
	mov	ebx, DWORD PTR _Xp2$[esp+12]
	test	ebx, ebx
	jne	SHORT $LN3@BN_X931_ge
; Line 261
	push	esi
	call	_BN_CTX_get
	add	esp, 4
	mov	ebx, eax
$LN3@BN_X931_ge:
; Line 263
	push	0
	push	0
	push	101					; 00000065H
	push	edi
	call	_BN_rand
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $error$9
; Line 265
	push	0
	push	0
	push	101					; 00000065H
	push	ebx
	call	_BN_rand
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $error$9
; Line 267
	push	DWORD PTR _cb$[esp+12]
	push	esi
	push	DWORD PTR _e$[esp+20]
	push	ebx
	push	edi
	push	DWORD PTR _Xp$[esp+32]
	push	DWORD PTR _p2$[esp+36]
	push	DWORD PTR _p1$[esp+40]
	push	DWORD PTR _p$[esp+44]
	call	_BN_X931_derive_prime_ex
	add	esp, 36					; 00000024H
	mov	ecx, 1
	test	eax, eax
	cmovne	ebp, ecx
$error$9:
; Line 273
	push	esi
	call	_BN_CTX_end
	add	esp, 4
; Line 275
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 277
	ret	0
_BN_X931_generate_prime_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_X931_derive_prime_ex
_TEXT	SEGMENT
_p1p2$1$ = -8						; size = 4
_ret$1$ = -4						; size = 4
_p$ = 8							; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_Xp$ = 20						; size = 4
_Xp1$ = 24						; size = 4
_Xp2$ = 28						; size = 4
_e$ = 32						; size = 4
_ctx$ = 36						; size = 4
_cb$ = 40						; size = 4
_BN_X931_derive_prime_ex PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_x931p.c
; Line 101
	mov	eax, 8
	call	__chkstk
; Line 107
	mov	eax, DWORD PTR _e$[esp+4]
	mov	DWORD PTR _ret$1$[esp+8], 0
	cmp	DWORD PTR [eax+4], 0
	jle	$LN6@BN_X931_de
	mov	eax, DWORD PTR [eax]
	test	BYTE PTR [eax], 1
	je	$LN6@BN_X931_de
; Line 110
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+20]
	push	edi
	call	_BN_CTX_start
	add	esp, 4
; Line 111
	cmp	DWORD PTR _p1$[esp+20], 0
	jne	SHORT $LN7@BN_X931_de
; Line 112
	push	edi
	call	_BN_CTX_get
	add	esp, 4
	mov	DWORD PTR _p1$[esp+20], eax
$LN7@BN_X931_de:
; Line 114
	mov	esi, DWORD PTR _p2$[esp+20]
	test	esi, esi
	jne	SHORT $LN8@BN_X931_de
; Line 115
	push	edi
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR _p2$[esp+20], esi
$LN8@BN_X931_de:
; Line 117
	push	edi
	call	_BN_CTX_get
; Line 119
	push	edi
	mov	ebx, eax
	call	_BN_CTX_get
; Line 121
	push	edi
	mov	DWORD PTR _p1p2$1$[esp+36], eax
	call	_BN_CTX_get
; Line 123
	push	DWORD PTR _cb$[esp+32]
	mov	ebp, eax
	push	edi
	push	DWORD PTR _Xp1$[esp+40]
	push	DWORD PTR _p1$[esp+44]
	call	_bn_x931_derive_pi
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$err$38
; Line 126
	push	DWORD PTR _cb$[esp+20]
	push	edi
	push	DWORD PTR _Xp2$[esp+28]
	push	esi
	call	_bn_x931_derive_pi
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$38
; Line 129
	push	edi
	push	esi
	push	DWORD PTR _p1$[esp+28]
	push	DWORD PTR _p1p2$1$[esp+36]
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$38
; Line 134
	push	edi
	push	DWORD PTR _p1$[esp+24]
	push	esi
	mov	esi, DWORD PTR _p$[esp+32]
	push	esi
	call	_BN_mod_inverse
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$38
; Line 137
	push	edi
	push	DWORD PTR _p2$[esp+24]
	push	esi
	push	esi
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$38
; Line 140
	push	edi
	push	DWORD PTR _p2$[esp+24]
	push	DWORD PTR _p1$[esp+28]
	push	ebx
	call	_BN_mod_inverse
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$38
; Line 143
	push	edi
	push	DWORD PTR _p1$[esp+24]
	push	ebx
	push	ebx
	call	_BN_mul
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$err$38
; Line 146
	push	ebx
	push	esi
	push	esi
	call	_BN_sub
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$38
; Line 149
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN17@BN_X931_de
	push	DWORD PTR _p1p2$1$[esp+24]
	push	esi
	push	esi
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$38
$LN17@BN_X931_de:
; Line 154
	push	edi
	push	DWORD PTR _p1p2$1$[esp+28]
	push	DWORD PTR _Xp$[esp+28]
	push	esi
	push	esi
	call	_BN_mod_sub
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$38
; Line 157
	push	DWORD PTR _Xp$[esp+20]
	push	esi
	push	esi
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$err$38
; Line 164
	push	1
	push	0
	push	DWORD PTR _cb$[esp+28]
	call	_BN_GENCB_call
; Line 165
	push	esi
	push	ebp
	call	_BN_copy
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$err$38
$LL2@BN_X931_de:
; Line 167
	push	1
	push	ebp
	call	_BN_sub_word
	add	esp, 8
	test	eax, eax
	je	$err$38
; Line 169
	push	edi
	push	DWORD PTR _e$[esp+24]
	push	ebp
	push	ebx
	call	_BN_gcd
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$38
; Line 177
	cmp	DWORD PTR [ebx+4], 1
	jne	SHORT $LN25@BN_X931_de
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN25@BN_X931_de
	cmp	DWORD PTR [ebx+12], 0
	jne	SHORT $LN25@BN_X931_de
	push	DWORD PTR _cb$[esp+20]
	push	1
	push	edi
	push	50					; 00000032H
	push	esi
	call	_BN_is_prime_fasttest_ex
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN32@BN_X931_de
$LN25@BN_X931_de:
; Line 179
	push	DWORD PTR _p1p2$1$[esp+24]
	push	esi
	push	esi
	call	_BN_add
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $err$38
; Line 164
	push	1
	push	0
	push	DWORD PTR _cb$[esp+28]
	call	_BN_GENCB_call
; Line 165
	push	esi
	push	ebp
	call	_BN_copy
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LL2@BN_X931_de
	jmp	SHORT $err$38
$LN32@BN_X931_de:
; Line 183
	push	0
	push	3
	push	DWORD PTR _cb$[esp+28]
	call	_BN_GENCB_call
	add	esp, 12					; 0000000cH
; Line 185
	mov	DWORD PTR _ret$1$[esp+24], 1
$err$38:
; Line 189
	push	edi
	call	_BN_CTX_end
; Line 191
	mov	eax, DWORD PTR _ret$1$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 192
	add	esp, 8
	ret	0
$LN6@BN_X931_de:
; Line 108
	xor	eax, eax
; Line 192
	add	esp, 8
	ret	0
_BN_X931_derive_prime_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _BN_X931_generate_Xpq
_TEXT	SEGMENT
_Xp$ = 8						; size = 4
_Xq$ = 12						; size = 4
_nbits$ = 16						; size = 4
_ctx$ = 20						; size = 4
_BN_X931_generate_Xpq PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\bn\bn_x931p.c
; Line 200
	push	ebx
; Line 207
	mov	ebx, DWORD PTR _nbits$[esp]
	cmp	ebx, 1024				; 00000400H
	jl	$LN6@BN_X931_ge
	test	bl, bl
	jne	$LN6@BN_X931_ge
; Line 215
	push	ebp
	push	esi
	push	edi
	push	0
	push	1
	sar	ebx, 1
	push	ebx
	push	DWORD PTR _Xp$[esp+24]
	call	_BN_rand
	mov	ebp, DWORD PTR _ctx$[esp+28]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $err$23
; Line 218
	push	ebp
	call	_BN_CTX_start
; Line 219
	push	ebp
	call	_BN_CTX_get
; Line 221
	mov	edi, DWORD PTR _Xq$[esp+20]
	add	esp, 8
	mov	ebp, eax
	xor	esi, esi
	npad	2
$LL4@BN_X931_ge:
; Line 222
	push	0
	push	1
	push	ebx
	push	edi
	call	_BN_rand
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN18@BN_X931_ge
; Line 225
	push	edi
	push	DWORD PTR _Xp$[esp+16]
	push	ebp
	call	_BN_sub
; Line 226
	push	ebp
	call	_BN_num_bits
	lea	ecx, DWORD PTR [ebx-100]
	add	esp, 16					; 00000010H
	cmp	eax, ecx
	jg	SHORT $LN14@BN_X931_ge
; Line 221
	inc	esi
	cmp	esi, 1000				; 000003e8H
	jl	SHORT $LL4@BN_X931_ge
$LN14@BN_X931_ge:
; Line 230
	push	DWORD PTR _ctx$[esp+12]
	call	_BN_CTX_end
	add	esp, 4
; Line 232
	xor	eax, eax
	cmp	esi, 1000				; 000003e8H
	setl	al
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 240
	ret	0
$LN18@BN_X931_ge:
	mov	ebp, DWORD PTR _ctx$[esp+12]
$err$23:
; Line 238
	push	ebp
	call	_BN_CTX_end
	add	esp, 4
; Line 239
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 240
	ret	0
$LN6@BN_X931_ge:
; Line 208
	xor	eax, eax
	pop	ebx
; Line 240
	ret	0
_BN_X931_generate_Xpq ENDP
_TEXT	ENDS
END
