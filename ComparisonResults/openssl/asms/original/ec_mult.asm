; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ec_wNAF_mul
PUBLIC	_ec_wNAF_precompute_mult
PUBLIC	_ec_wNAF_have_precompute_mult
PUBLIC	??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ ; `string'
EXTRN	_CRYPTO_add_lock:PROC
EXTRN	_CRYPTO_malloc:PROC
EXTRN	_CRYPTO_free:PROC
EXTRN	_OPENSSL_cleanse:PROC
EXTRN	_ERR_put_error:PROC
EXTRN	_BN_CTX_new:PROC
EXTRN	_BN_CTX_free:PROC
EXTRN	_BN_CTX_start:PROC
EXTRN	_BN_CTX_get:PROC
EXTRN	_BN_CTX_end:PROC
EXTRN	_BN_num_bits:PROC
EXTRN	_BN_is_bit_set:PROC
EXTRN	_EC_GROUP_get0_generator:PROC
EXTRN	_EC_GROUP_get_order:PROC
EXTRN	_EC_POINT_new:PROC
EXTRN	_EC_POINT_free:PROC
EXTRN	_EC_POINT_clear_free:PROC
EXTRN	_EC_POINT_copy:PROC
EXTRN	_EC_POINT_set_to_infinity:PROC
EXTRN	_EC_POINT_add:PROC
EXTRN	_EC_POINT_dbl:PROC
EXTRN	_EC_POINT_invert:PROC
EXTRN	_EC_POINT_cmp:PROC
EXTRN	_EC_POINTs_make_affine:PROC
EXTRN	_EC_EX_DATA_set_data:PROC
EXTRN	_EC_EX_DATA_get_data:PROC
EXTRN	_EC_EX_DATA_free_data:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
CONST	SEGMENT
??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@ DB '.\crypto\ec\ec_mul'
	DB	't.c', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _compute_wNAF
_TEXT	SEGMENT
_len$1$ = -20						; size = 4
_mask$1$ = -16						; size = 4
_sign$2$ = -12						; size = 4
tv338 = -8						; size = 4
tv339 = -4						; size = 4
_scalar$ = 8						; size = 4
_w$ = 12						; size = 4
_ret_len$ = 16						; size = 4
_compute_wNAF PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 186
	mov	eax, 20					; 00000014H
	call	__chkstk
	push	ebx
; Line 194
	mov	ebx, DWORD PTR _scalar$[esp+20]
	push	ebp
	xor	ebp, ebp
	push	esi
	push	edi
	lea	edx, DWORD PTR [ebp+1]
	cmp	DWORD PTR [ebx+4], ebp
	jne	SHORT $LN4@compute_wN
; Line 195
	push	195					; 000000c3H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	edx
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 196
	test	ebp, ebp
	jne	SHORT $LN5@compute_wN
; Line 197
	push	197					; 000000c5H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
; Line 198
	jmp	$LN33@compute_wN
$LN5@compute_wN:
; Line 201
	mov	eax, DWORD PTR _ret_len$[esp+32]
	pop	edi
	mov	BYTE PTR [ebp], 0
	pop	esi
	mov	DWORD PTR [eax], 1
; Line 306
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 307
	add	esp, 20					; 00000014H
	ret	0
$LN4@compute_wN:
; Line 205
	mov	ecx, DWORD PTR _w$[esp+32]
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 6
	ja	$LN7@compute_wN
; Line 210
	mov	esi, edx
; Line 214
	or	eax, -1
	shl	esi, cl
	lea	edi, DWORD PTR [esi*2-1]
	cmp	DWORD PTR [ebx+12], ebp
	mov	DWORD PTR _mask$1$[esp+36], edi
	cmovne	edx, eax
	mov	DWORD PTR _sign$2$[esp+36], edx
; Line 218
	cmp	DWORD PTR [ebx], ebp
	je	$LN10@compute_wN
; Line 223
	push	ebx
	call	_BN_num_bits
; Line 224
	push	224					; 000000e0H
	mov	DWORD PTR _len$1$[esp+44], eax
	inc	eax
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	eax
	mov	DWORD PTR tv339[esp+52], eax
	call	_CRYPTO_malloc
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 228
	test	ebp, ebp
	jne	SHORT $LN11@compute_wN
; Line 229
	push	229					; 000000e5H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
; Line 230
	jmp	$LN33@compute_wN
$LN11@compute_wN:
; Line 232
	mov	eax, DWORD PTR [ebx]
; Line 290
	mov	edx, DWORD PTR _w$[esp+32]
	mov	ebx, DWORD PTR [eax]
	mov	eax, ebp
	and	ebx, edi
	xor	edi, edi
	sub	eax, edx
	mov	DWORD PTR tv338[esp+36], eax
	npad	1
$LL2@compute_wN:
; Line 234
	test	ebx, ebx
	jne	SHORT $LN12@compute_wN
	lea	eax, DWORD PTR [edx+1]
	add	eax, edi
	cmp	eax, DWORD PTR _len$1$[esp+36]
	jae	$LN3@compute_wN
$LN12@compute_wN:
; Line 237
	xor	eax, eax
; Line 241
	test	bl, 1
	je	SHORT $LN19@compute_wN
; Line 245
	mov	eax, ebx
	test	ebx, esi
	je	SHORT $LN15@compute_wN
	lea	ecx, DWORD PTR [esi+esi]
	sub	eax, ecx
; Line 248
	lea	ecx, DWORD PTR [edx+1]
	add	ecx, edi
	cmp	ecx, DWORD PTR _len$1$[esp+36]
	jb	SHORT $LN15@compute_wN
; Line 256
	mov	eax, DWORD PTR _mask$1$[esp+36]
	sar	eax, 1
	and	eax, ebx
$LN15@compute_wN:
; Line 263
	mov	ecx, esi
	neg	ecx
	cmp	eax, ecx
	jle	SHORT $LN18@compute_wN
	cmp	eax, esi
	jge	SHORT $LN18@compute_wN
	test	al, 1
	je	SHORT $LN18@compute_wN
; Line 268
	sub	ebx, eax
; Line 275
	je	SHORT $LN19@compute_wN
	lea	ecx, DWORD PTR [esi+esi]
	cmp	ebx, ecx
	je	SHORT $LN19@compute_wN
	cmp	ebx, esi
	jne	SHORT $LN27@compute_wN
$LN19@compute_wN:
; Line 281
	mov	ecx, DWORD PTR _sign$2$[esp+36]
	movsx	eax, al
	movsx	ecx, cl
	imul	ecx, eax
	mov	eax, DWORD PTR tv338[esp+36]
	add	eax, edi
	inc	edi
	mov	BYTE PTR [eax+edx], cl
; Line 284
	lea	eax, DWORD PTR [edi+edx]
	push	eax
	push	DWORD PTR _scalar$[esp+36]
	call	_BN_is_bit_set
	imul	eax, esi
	add	esp, 8
	sar	ebx, 1
	add	ebx, eax
; Line 286
	lea	eax, DWORD PTR [esi+esi]
	cmp	ebx, eax
	jg	SHORT $LN28@compute_wN
; Line 290
	mov	edx, DWORD PTR _w$[esp+32]
	jmp	$LL2@compute_wN
$LN3@compute_wN:
; Line 292
	cmp	edi, DWORD PTR tv339[esp+36]
	jbe	SHORT $LN31@compute_wN
; Line 293
	push	293					; 00000125H
; Line 294
	jmp	SHORT $LN34@compute_wN
$LN31@compute_wN:
; Line 305
	mov	eax, DWORD PTR _ret_len$[esp+32]
	mov	DWORD PTR [eax], edi
; Line 306
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 307
	add	esp, 20					; 00000014H
	ret	0
$LN27@compute_wN:
; Line 276
	push	276					; 00000114H
; Line 277
	jmp	SHORT $LN34@compute_wN
$LN18@compute_wN:
; Line 264
	push	264					; 00000108H
; Line 265
	jmp	SHORT $LN34@compute_wN
$LN28@compute_wN:
; Line 287
	push	287					; 0000011fH
; Line 288
	jmp	SHORT $LN34@compute_wN
$LN10@compute_wN:
; Line 219
	push	219					; 000000dbH
; Line 220
	jmp	SHORT $LN34@compute_wN
$LN7@compute_wN:
; Line 207
	push	207					; 000000cfH
$LN34@compute_wN:
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	68					; 00000044H
$LN33@compute_wN:
	push	143					; 0000008fH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 301
	push	ebp
	call	_CRYPTO_free
	add	esp, 4
; Line 302
	xor	ebp, ebp
; Line 306
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 307
	add	esp, 20					; 00000014H
	ret	0
_compute_wNAF ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_pre_comp_new
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_pre_comp_new PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 97
	push	esi
; Line 100
	mov	esi, DWORD PTR _group$[esp]
	test	esi, esi
	je	SHORT $LN5@ec_pre_com
; Line 103
	push	103					; 00000067H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	28					; 0000001cH
	call	_CRYPTO_malloc
	add	esp, 12					; 0000000cH
; Line 104
	test	eax, eax
	jne	SHORT $LN3@ec_pre_com
; Line 105
	push	105					; 00000069H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
	push	196					; 000000c4H
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN5@ec_pre_com:
; Line 106
	xor	eax, eax
	pop	esi
; Line 116
	ret	0
$LN3@ec_pre_com:
; Line 108
	mov	DWORD PTR [eax], esi
; Line 109
	mov	DWORD PTR [eax+4], 8
; Line 110
	mov	DWORD PTR [eax+8], 0
; Line 111
	mov	DWORD PTR [eax+12], 4
; Line 112
	mov	DWORD PTR [eax+16], 0
; Line 113
	mov	DWORD PTR [eax+20], 0
; Line 114
	mov	DWORD PTR [eax+24], 1
	pop	esi
; Line 116
	ret	0
_ec_pre_comp_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_pre_comp_clear_free
_TEXT	SEGMENT
_pre_$ = 8						; size = 4
_ec_pre_comp_clear_free PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 152
	push	edi
; Line 156
	mov	edi, DWORD PTR _pre_$[esp]
	test	edi, edi
	je	SHORT $LN1@ec_pre_com
; Line 159
	push	159					; 0000009fH
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	36					; 00000024H
	lea	eax, DWORD PTR [edi+24]
	push	-1
	push	eax
	call	_CRYPTO_add_lock
	add	esp, 20					; 00000014H
; Line 160
	test	eax, eax
	jg	SHORT $LN1@ec_pre_com
; Line 163
	push	esi
	mov	esi, DWORD PTR [edi+16]
	test	esi, esi
	je	SHORT $LN7@ec_pre_com
; Line 166
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@ec_pre_com
$LL4@ec_pre_com:
; Line 167
	push	eax
	call	_EC_POINT_clear_free
; Line 168
	push	4
	push	esi
	call	_OPENSSL_cleanse
	mov	eax, DWORD PTR [esi+4]
	add	esi, 4
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LL4@ec_pre_com
$LN3@ec_pre_com:
; Line 170
	push	DWORD PTR [edi+16]
	call	_CRYPTO_free
	add	esp, 4
$LN7@ec_pre_com:
; Line 172
	push	28					; 0000001cH
	push	edi
	call	_OPENSSL_cleanse
; Line 173
	push	edi
	call	_CRYPTO_free
	add	esp, 12					; 0000000cH
	pop	esi
$LN1@ec_pre_com:
	pop	edi
; Line 174
	ret	0
_ec_pre_comp_clear_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_pre_comp_free
_TEXT	SEGMENT
_pre_$ = 8						; size = 4
_ec_pre_comp_free PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 130
	push	edi
; Line 134
	mov	edi, DWORD PTR _pre_$[esp]
	test	edi, edi
	je	SHORT $LN1@ec_pre_com
; Line 137
	push	137					; 00000089H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	36					; 00000024H
	lea	eax, DWORD PTR [edi+24]
	push	-1
	push	eax
	call	_CRYPTO_add_lock
	add	esp, 20					; 00000014H
; Line 138
	test	eax, eax
	jg	SHORT $LN1@ec_pre_com
; Line 141
	push	esi
	mov	esi, DWORD PTR [edi+16]
	test	esi, esi
	je	SHORT $LN7@ec_pre_com
; Line 144
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@ec_pre_com
$LL4@ec_pre_com:
; Line 145
	push	eax
	call	_EC_POINT_free
	mov	eax, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL4@ec_pre_com
$LN3@ec_pre_com:
; Line 146
	push	DWORD PTR [edi+16]
	call	_CRYPTO_free
	add	esp, 4
$LN7@ec_pre_com:
; Line 148
	push	edi
	call	_CRYPTO_free
	add	esp, 4
	pop	esi
$LN1@ec_pre_com:
	pop	edi
; Line 149
	ret	0
_ec_pre_comp_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_pre_comp_dup
_TEXT	SEGMENT
_src_$ = 8						; size = 4
_ec_pre_comp_dup PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 119
	push	esi
; Line 124
	mov	esi, DWORD PTR _src_$[esp]
	push	124					; 0000007cH
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	36					; 00000024H
	lea	ecx, DWORD PTR [esi+24]
	push	1
	push	ecx
	call	_CRYPTO_add_lock
	add	esp, 20					; 00000014H
; Line 126
	mov	eax, esi
	pop	esi
; Line 127
	ret	0
_ec_pre_comp_dup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_wNAF_have_precompute_mult
_TEXT	SEGMENT
_group$ = 8						; size = 4
_ec_wNAF_have_precompute_mult PROC			; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 909
	mov	eax, DWORD PTR _group$[esp-4]
	push	OFFSET _ec_pre_comp_clear_free
	push	OFFSET _ec_pre_comp_free
	push	OFFSET _ec_pre_comp_dup
	push	DWORD PTR [eax+68]
	call	_EC_EX_DATA_get_data
	add	esp, 16					; 00000010H
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 913
	ret	0
_ec_wNAF_have_precompute_mult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_wNAF_precompute_mult
_TEXT	SEGMENT
_points$1$ = -44					; size = 4
_w$1$ = -40						; size = 4
_base$1$ = -36						; size = 4
_tmp_point$1$ = -32					; size = 4
_numblocks$1$ = -28					; size = 4
_num$1$ = -24						; size = 4
_i$2$ = -20						; size = 4
_i$1$ = -20						; size = 4
_pre_points_per_block$1$ = -16				; size = 4
_new_ctx$1$ = -12					; size = 4
_ret$1$ = -8						; size = 4
_generator$1$ = -4					; size = 4
_pre_comp$1$ = 8					; size = 4
_group$ = 8						; size = 4
_ctx$ = 12						; size = 4
_ec_wNAF_precompute_mult PROC				; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 742
	mov	eax, 44					; 0000002cH
	call	__chkstk
	push	ebx
; Line 753
	mov	ebx, DWORD PTR _group$[esp+44]
	push	esi
	push	edi
	push	OFFSET _ec_pre_comp_clear_free
	push	OFFSET _ec_pre_comp_free
	lea	eax, DWORD PTR [ebx+68]
	mov	DWORD PTR _tmp_point$1$[esp+64], 0
	xor	esi, esi
	xor	edi, edi
	push	OFFSET _ec_pre_comp_dup
	push	eax
	mov	DWORD PTR _new_ctx$1$[esp+72], edi
	mov	DWORD PTR _points$1$[esp+72], esi
	mov	DWORD PTR _ret$1$[esp+72], esi
	call	_EC_EX_DATA_free_data
; Line 756
	push	ebx
	call	_ec_pre_comp_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pre_comp$1$[esp+52], eax
	test	eax, eax
	jne	SHORT $LN17@ec_wNAF_pr
	pop	edi
	pop	esi
	pop	ebx
; Line 903
	add	esp, 44					; 0000002cH
	ret	0
$LN17@ec_wNAF_pr:
	push	ebp
; Line 759
	push	ebx
	call	_EC_GROUP_get0_generator
	add	esp, 4
	mov	DWORD PTR _generator$1$[esp+60], eax
; Line 760
	test	eax, eax
	jne	SHORT $LN18@ec_wNAF_pr
; Line 761
	push	761					; 000002f9H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	113					; 00000071H
	push	188					; 000000bcH
	push	16					; 00000010H
	call	_ERR_put_error
; Line 762
	mov	ebp, DWORD PTR _ctx$[esp+76]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN102@ec_wNAF_pr
$LN18@ec_wNAF_pr:
; Line 765
	mov	ebp, DWORD PTR _ctx$[esp+56]
	test	ebp, ebp
	jne	SHORT $LN20@ec_wNAF_pr
; Line 766
	call	_BN_CTX_new
	mov	DWORD PTR _new_ctx$1$[esp+60], eax
	mov	ebp, eax
; Line 767
	test	eax, eax
	je	$LN100@ec_wNAF_pr
$LN20@ec_wNAF_pr:
; Line 771
	push	ebp
	call	_BN_CTX_start
; Line 772
	push	ebp
	call	_BN_CTX_get
	mov	esi, eax
	add	esp, 8
; Line 773
	test	esi, esi
	je	SHORT $LN99@ec_wNAF_pr
; Line 776
	push	ebp
	push	esi
	push	ebx
	call	_EC_GROUP_get_order
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN99@ec_wNAF_pr
; Line 778
	cmp	DWORD PTR [esi+4], edi
	jne	SHORT $LN23@ec_wNAF_pr
; Line 779
	push	779					; 0000030bH
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	114					; 00000072H
	push	188					; 000000bcH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN99@ec_wNAF_pr:
	xor	esi, esi
$LN102@ec_wNAF_pr:
	mov	ebx, DWORD PTR _pre_comp$1$[esp+56]
$err$109:
; Line 885
	test	ebp, ebp
	je	SHORT $LN39@ec_wNAF_pr
; Line 886
	push	ebp
	call	_BN_CTX_end
	add	esp, 4
$LN39@ec_wNAF_pr:
; Line 887
	mov	eax, DWORD PTR _new_ctx$1$[esp+60]
	test	eax, eax
	je	$LN40@ec_wNAF_pr
; Line 888
	push	eax
	call	_BN_CTX_free
	add	esp, 4
	jmp	$LN40@ec_wNAF_pr
$LN23@ec_wNAF_pr:
; Line 783
	push	esi
	call	_BN_num_bits
	mov	ecx, eax
	add	esp, 4
; Line 791
	mov	esi, 4
	mov	DWORD PTR _w$1$[esp+60], esi
; Line 792
	cmp	ecx, 2000				; 000007d0H
	jae	SHORT $LN91@ec_wNAF_pr
	cmp	ecx, 800				; 00000320H
	jae	SHORT $LN104@ec_wNAF_pr
	cmp	ecx, 300				; 0000012cH
	jae	SHORT $LN55@ec_wNAF_pr
	cmp	ecx, 70					; 00000046H
	jae	SHORT $LN55@ec_wNAF_pr
	cmp	ecx, 20					; 00000014H
	sbb	eax, eax
	add	eax, 2
	cmp	eax, esi
	jbe	SHORT $LN55@ec_wNAF_pr
; Line 794
	cmp	ecx, 800				; 00000320H
	jb	SHORT $LN58@ec_wNAF_pr
$LN104@ec_wNAF_pr:
	mov	esi, 5
	jmp	SHORT $LN105@ec_wNAF_pr
$LN58@ec_wNAF_pr:
	cmp	ecx, 300				; 0000012cH
	jae	SHORT $LN105@ec_wNAF_pr
	cmp	ecx, 70					; 00000046H
	jb	SHORT $LN54@ec_wNAF_pr
	mov	esi, 3
	jmp	SHORT $LN105@ec_wNAF_pr
$LN54@ec_wNAF_pr:
	cmp	ecx, 20					; 00000014H
	sbb	esi, esi
	add	esi, 2
	jmp	SHORT $LN105@ec_wNAF_pr
$LN91@ec_wNAF_pr:
	mov	esi, 6
$LN105@ec_wNAF_pr:
	mov	DWORD PTR _w$1$[esp+60], esi
$LN55@ec_wNAF_pr:
; Line 797
	lea	edx, DWORD PTR [ecx+7]
; Line 801
	mov	eax, 1
	lea	ecx, DWORD PTR [esi-1]
	shr	edx, 3
	shl	eax, cl
	mov	DWORD PTR _pre_points_per_block$1$[esp+60], eax
; Line 802
	imul	eax, edx
; Line 805
	push	805					; 00000325H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	mov	DWORD PTR _numblocks$1$[esp+68], edx
	mov	DWORD PTR _num$1$[esp+68], eax
	lea	eax, DWORD PTR [eax*4+4]
	push	eax
	call	_CRYPTO_malloc
	mov	esi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _points$1$[esp+60], esi
; Line 806
	test	esi, esi
	jne	SHORT $LN25@ec_wNAF_pr
; Line 807
	push	807					; 00000327H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
	push	188					; 000000bcH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 808
	jmp	$LN102@ec_wNAF_pr
$LN25@ec_wNAF_pr:
; Line 812
	mov	ecx, DWORD PTR _num$1$[esp+60]
	mov	eax, DWORD PTR _points$1$[esp+60]
; Line 813
	mov	DWORD PTR _i$1$[esp+60], edi
	mov	DWORD PTR [eax+ecx*4], edi
	test	ecx, ecx
	je	SHORT $LN3@ec_wNAF_pr
$LL4@ec_wNAF_pr:
; Line 814
	push	ebx
	call	_EC_POINT_new
	mov	ecx, DWORD PTR _i$1$[esp+64]
	add	esp, 4
	mov	edx, DWORD PTR _points$1$[esp+60]
	mov	DWORD PTR [edx+ecx*4], eax
	test	eax, eax
	je	$LN67@ec_wNAF_pr
; Line 813
	inc	ecx
	mov	DWORD PTR _i$1$[esp+60], ecx
	cmp	ecx, DWORD PTR _num$1$[esp+60]
	jb	SHORT $LL4@ec_wNAF_pr
$LN3@ec_wNAF_pr:
; Line 820
	push	ebx
	call	_EC_POINT_new
	add	esp, 4
	mov	DWORD PTR _tmp_point$1$[esp+60], eax
	test	eax, eax
	je	$LN28@ec_wNAF_pr
	push	ebx
	call	_EC_POINT_new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR _base$1$[esp+60], edi
	test	edi, edi
	je	$LN28@ec_wNAF_pr
; Line 825
	push	DWORD PTR _generator$1$[esp+60]
	push	edi
	call	_EC_POINT_copy
	add	esp, 8
	test	eax, eax
	je	$LN107@ec_wNAF_pr
; Line 829
	cmp	DWORD PTR _numblocks$1$[esp+60], 0
	mov	DWORD PTR _i$2$[esp+60], 0
	jbe	$LN6@ec_wNAF_pr
	npad	4
$LL7@ec_wNAF_pr:
; Line 832
	push	ebp
	push	edi
	push	DWORD PTR _tmp_point$1$[esp+68]
	push	ebx
	call	_EC_POINT_dbl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN107@ec_wNAF_pr
; Line 835
	push	edi
	push	DWORD PTR [esi]
	call	_EC_POINT_copy
	add	esp, 8
	add	esi, 4
	test	eax, eax
	je	$LN107@ec_wNAF_pr
; Line 838
	mov	edi, 1
	cmp	DWORD PTR _pre_points_per_block$1$[esp+60], edi
	jbe	SHORT $LN9@ec_wNAF_pr
$LL10@ec_wNAF_pr:
; Line 842
	push	ebp
	push	DWORD PTR [esi-4]
	push	DWORD PTR _tmp_point$1$[esp+68]
	push	DWORD PTR [esi]
	push	ebx
	call	_EC_POINT_add
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN92@ec_wNAF_pr
; Line 838
	inc	edi
	add	esi, 4
	cmp	edi, DWORD PTR _pre_points_per_block$1$[esp+60]
	jb	SHORT $LL10@ec_wNAF_pr
$LN9@ec_wNAF_pr:
; Line 846
	mov	eax, DWORD PTR _numblocks$1$[esp+60]
	dec	eax
	cmp	DWORD PTR _i$2$[esp+60], eax
	jae	SHORT $LN5@ec_wNAF_pr
; Line 857
	mov	edi, DWORD PTR _base$1$[esp+60]
	push	ebp
	push	DWORD PTR _tmp_point$1$[esp+64]
	push	edi
	push	ebx
	call	_EC_POINT_dbl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN107@ec_wNAF_pr
; Line 859
	mov	edi, 2
$LL13@ec_wNAF_pr:
; Line 860
	mov	eax, DWORD PTR _base$1$[esp+60]
	push	ebp
	push	eax
	push	eax
	push	ebx
	call	_EC_POINT_dbl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN92@ec_wNAF_pr
; Line 859
	inc	edi
	cmp	edi, 8
	jb	SHORT $LL13@ec_wNAF_pr
$LN5@ec_wNAF_pr:
; Line 829
	mov	eax, DWORD PTR _i$2$[esp+60]
	mov	edi, DWORD PTR _base$1$[esp+60]
	inc	eax
	mov	DWORD PTR _i$2$[esp+60], eax
	cmp	eax, DWORD PTR _numblocks$1$[esp+60]
	jb	$LL7@ec_wNAF_pr
$LN6@ec_wNAF_pr:
; Line 866
	mov	esi, DWORD PTR _points$1$[esp+60]
	push	ebp
	push	esi
	push	DWORD PTR _num$1$[esp+68]
	push	ebx
	call	_EC_POINTs_make_affine
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN102@ec_wNAF_pr
; Line 869
	mov	eax, DWORD PTR _pre_comp$1$[esp+56]
; Line 871
	mov	ecx, DWORD PTR _numblocks$1$[esp+60]
; Line 877
	push	OFFSET _ec_pre_comp_clear_free
	push	OFFSET _ec_pre_comp_free
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _w$1$[esp+68]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR _num$1$[esp+68]
	push	OFFSET _ec_pre_comp_dup
	mov	DWORD PTR [eax+16], esi
	xor	esi, esi
	push	eax
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], 8
	mov	DWORD PTR [eax+20], ecx
	lea	eax, DWORD PTR [ebx+68]
	push	eax
	mov	DWORD PTR _points$1$[esp+80], esi
	call	_EC_EX_DATA_set_data
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN102@ec_wNAF_pr
; Line 881
	xor	ebx, ebx
; Line 883
	mov	DWORD PTR _ret$1$[esp+60], 1
	jmp	$err$109
$LN67@ec_wNAF_pr:
; Line 815
	push	815					; 0000032fH
$LN106@ec_wNAF_pr:
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
	push	188					; 000000bcH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
$LN107@ec_wNAF_pr:
; Line 816
	mov	esi, DWORD PTR _points$1$[esp+60]
	jmp	$LN102@ec_wNAF_pr
$LN28@ec_wNAF_pr:
; Line 821
	push	821					; 00000335H
	jmp	SHORT $LN106@ec_wNAF_pr
$LN92@ec_wNAF_pr:
	mov	edi, DWORD PTR _base$1$[esp+60]
; Line 816
	mov	esi, DWORD PTR _points$1$[esp+60]
	jmp	$LN102@ec_wNAF_pr
$LN100@ec_wNAF_pr:
	mov	ebx, DWORD PTR _pre_comp$1$[esp+56]
$LN40@ec_wNAF_pr:
	pop	ebp
; Line 889
	test	ebx, ebx
	je	SHORT $LN41@ec_wNAF_pr
; Line 890
	push	ebx
	call	_ec_pre_comp_free
	add	esp, 4
$LN41@ec_wNAF_pr:
; Line 891
	test	esi, esi
	je	SHORT $LN42@ec_wNAF_pr
; Line 894
	mov	ebx, DWORD PTR _points$1$[esp+56]
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN15@ec_wNAF_pr
	npad	2
$LL16@ec_wNAF_pr:
; Line 895
	push	eax
	call	_EC_POINT_free
	mov	eax, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL16@ec_wNAF_pr
$LN15@ec_wNAF_pr:
; Line 896
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN42@ec_wNAF_pr:
; Line 898
	mov	eax, DWORD PTR _tmp_point$1$[esp+56]
	test	eax, eax
	je	SHORT $LN43@ec_wNAF_pr
; Line 899
	push	eax
	call	_EC_POINT_free
	add	esp, 4
$LN43@ec_wNAF_pr:
; Line 900
	test	edi, edi
	je	SHORT $LN44@ec_wNAF_pr
; Line 901
	push	edi
	call	_EC_POINT_free
	add	esp, 4
$LN44@ec_wNAF_pr:
; Line 902
	mov	eax, DWORD PTR _ret$1$[esp+56]
	pop	edi
	pop	esi
	pop	ebx
; Line 903
	add	esp, 44					; 0000002cH
	ret	0
_ec_wNAF_precompute_mult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _ec_wNAF_mul
_TEXT	SEGMENT
_wNAF$1$ = -76						; size = 4
_tmp_wNAF$1$ = -72					; size = 4
_pre_comp$1$ = -72					; size = 4
_val$1$ = -72						; size = 4
_blocksize$1$ = -68					; size = 4
_tmp$1$ = -68						; size = 4
_val_sub$1$ = -64					; size = 4
_wNAF_len$1$ = -60					; size = 4
_max_len$1$ = -56					; size = 4
_totalnum$1$ = -52					; size = 4
_wsize$1$ = -48						; size = 4
_pp$1$ = -44						; size = 4
tv1701 = -44						; size = 4
_numblocks$2$ = -44					; size = 4
tv1728 = -40						; size = 4
_k$1$ = -36						; size = 4
_num_val$1$ = -36					; size = 4
_r_is_inverted$1$ = -32					; size = 4
tv1724 = -28						; size = 4
tv1715 = -28						; size = 4
tv1708 = -24						; size = 4
_num_scalar$1$ = -24					; size = 4
_tmp_len$1 = -24					; size = 4
tv1722 = -20						; size = 4
_pre_points_per_block$1$ = -20				; size = 4
tv1698 = -16						; size = 4
_generator$1$ = -16					; size = 4
_new_ctx$1$ = -12					; size = 4
_ret$1$ = -8						; size = 4
tv1713 = -4						; size = 4
tv1706 = -4						; size = 4
tv1704 = -4						; size = 4
tv1695 = -4						; size = 4
_group$ = 8						; size = 4
_r$ = 12						; size = 4
_scalar$ = 16						; size = 4
_num$ = 20						; size = 4
_points$ = 24						; size = 4
_scalars$ = 28						; size = 4
_ctx$ = 32						; size = 4
_ec_wNAF_mul PROC					; COMDAT
; File c:\workpace\openssl\openssl-1.0.2h\crypto\ec\ec_mult.c
; Line 333
	mov	eax, 76					; 0000004cH
	call	__chkstk
; Line 353
	xor	eax, eax
	mov	DWORD PTR _new_ctx$1$[esp+76], 0
	push	ebx
; Line 359
	mov	ebx, DWORD PTR _group$[esp+76]
	mov	DWORD PTR _pre_comp$1$[esp+80], eax
	mov	DWORD PTR _ret$1$[esp+80], eax
	mov	eax, DWORD PTR _r$[esp+76]
	mov	edx, DWORD PTR [ebx]
	push	ebp
	push	esi
	xor	esi, esi
	mov	DWORD PTR _generator$1$[esp+88], 0
	xor	ebp, ebp
	mov	DWORD PTR _blocksize$1$[esp+88], 0
	mov	DWORD PTR _numblocks$2$[esp+88], esi
	mov	DWORD PTR _pre_points_per_block$1$[esp+88], esi
	mov	DWORD PTR _r_is_inverted$1$[esp+88], esi
	mov	DWORD PTR _wsize$1$[esp+88], esi
	mov	DWORD PTR _wNAF_len$1$[esp+88], esi
	mov	DWORD PTR _max_len$1$[esp+88], esi
	mov	DWORD PTR _val_sub$1$[esp+88], esi
	mov	DWORD PTR _num_scalar$1$[esp+88], ebp
	cmp	edx, DWORD PTR [eax]
	je	SHORT $LN35@ec_wNAF_mu
; Line 360
	push	360					; 00000168H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	101					; 00000065H
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 361
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 719
	add	esp, 76					; 0000004cH
	ret	0
$LN35@ec_wNAF_mu:
	push	edi
; Line 364
	mov	edi, DWORD PTR _scalar$[esp+88]
	test	edi, edi
	jne	SHORT $LN36@ec_wNAF_mu
	cmp	DWORD PTR _num$[esp+88], esi
	jne	SHORT $LN36@ec_wNAF_mu
; Line 365
	push	eax
	push	ebx
	call	_EC_POINT_set_to_infinity
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 719
	add	esp, 76					; 0000004cH
	ret	0
$LN36@ec_wNAF_mu:
; Line 368
	xor	ecx, ecx
	cmp	DWORD PTR _num$[esp+88], ecx
	jbe	SHORT $LN3@ec_wNAF_mu
	npad	2
$LL4@ec_wNAF_mu:
; Line 369
	mov	eax, DWORD PTR _points$[esp+88]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN128@ec_wNAF_mu
; Line 368
	inc	ecx
	cmp	ecx, DWORD PTR _num$[esp+88]
	jb	SHORT $LL4@ec_wNAF_mu
$LN3@ec_wNAF_mu:
; Line 375
	cmp	DWORD PTR _ctx$[esp+88], esi
	jne	SHORT $LN39@ec_wNAF_mu
; Line 376
	call	_BN_CTX_new
	mov	DWORD PTR _new_ctx$1$[esp+92], eax
	mov	DWORD PTR _ctx$[esp+88], eax
; Line 377
	test	eax, eax
	je	$LN103@ec_wNAF_mu
$LN39@ec_wNAF_mu:
; Line 381
	test	edi, edi
	je	$LN43@ec_wNAF_mu
; Line 382
	push	ebx
	call	_EC_GROUP_get0_generator
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR _generator$1$[esp+92], esi
; Line 383
	test	esi, esi
	jne	SHORT $LN41@ec_wNAF_mu
; Line 384
	push	384					; 00000180H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	113					; 00000071H
$LN205@ec_wNAF_mu:
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 385
	xor	ebx, ebx
	jmp	$LN200@ec_wNAF_mu
$LN128@ec_wNAF_mu:
; Line 370
	push	370					; 00000172H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	101					; 00000065H
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 371
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 719
	add	esp, 76					; 0000004cH
	ret	0
$LN41@ec_wNAF_mu:
; Line 390
	push	OFFSET _ec_pre_comp_clear_free
	push	OFFSET _ec_pre_comp_free
	push	OFFSET _ec_pre_comp_dup
	push	DWORD PTR [ebx+68]
	call	_EC_EX_DATA_get_data
	mov	ebp, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pre_comp$1$[esp+92], ebp
; Line 395
	test	ebp, ebp
	je	SHORT $LN42@ec_wNAF_mu
	cmp	DWORD PTR [ebp+8], 0
	je	SHORT $LN42@ec_wNAF_mu
	mov	ecx, DWORD PTR [ebp+16]
	push	DWORD PTR _ctx$[esp+88]
	push	DWORD PTR [ecx]
	push	esi
	push	ebx
	call	_EC_POINT_cmp
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN42@ec_wNAF_mu
; Line 397
	mov	ebx, DWORD PTR [ebp+4]
; Line 403
	push	edi
	mov	DWORD PTR _blocksize$1$[esp+96], ebx
	call	_BN_num_bits
	xor	edx, edx
; Line 411
	mov	ecx, DWORD PTR [ebp+12]
	div	ebx
	mov	edx, DWORD PTR [ebp+8]
	add	esp, 4
	lea	esi, DWORD PTR [eax+1]
	mov	eax, 1
	cmp	esi, edx
	cmova	esi, edx
	dec	ecx
	shl	eax, cl
; Line 414
	imul	edx, eax
	mov	DWORD PTR _numblocks$2$[esp+92], esi
	mov	DWORD PTR _pre_points_per_block$1$[esp+92], eax
	cmp	DWORD PTR [ebp+20], edx
	je	SHORT $LN182@ec_wNAF_mu
; Line 415
	push	415					; 0000019fH
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	68					; 00000044H
; Line 416
	jmp	$LN205@ec_wNAF_mu
$LN42@ec_wNAF_mu:
; Line 421
	mov	esi, 1
	xor	eax, eax
; Line 422
	mov	ebp, esi
	mov	DWORD PTR _pre_comp$1$[esp+92], eax
	mov	DWORD PTR _numblocks$2$[esp+92], esi
	mov	DWORD PTR _num_scalar$1$[esp+92], ebp
	jmp	SHORT $LN43@ec_wNAF_mu
$LN182@ec_wNAF_mu:
	xor	ebp, ebp
$LN43@ec_wNAF_mu:
; Line 427
	mov	eax, DWORD PTR _num$[esp+88]
	add	eax, esi
; Line 429
	push	429					; 000001adH
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	mov	DWORD PTR _totalnum$1$[esp+100], eax
	lea	esi, DWORD PTR [eax*4]
	push	esi
	call	_CRYPTO_malloc
; Line 430
	push	430					; 000001aeH
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	esi
	mov	DWORD PTR _wsize$1$[esp+116], eax
	call	_CRYPTO_malloc
; Line 431
	push	431					; 000001afH
	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR _wNAF_len$1$[esp+120], eax
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	ecx
	call	_CRYPTO_malloc
; Line 433
	push	433					; 000001b1H
	mov	ebx, eax
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	esi
	mov	DWORD PTR _wNAF$1$[esp+140], ebx
	call	_CRYPTO_malloc
	add	esp, 48					; 00000030H
	mov	DWORD PTR _val_sub$1$[esp+92], eax
; Line 436
	test	ebx, ebx
	je	SHORT $LN46@ec_wNAF_mu
; Line 437
	mov	DWORD PTR [ebx], 0
$LN46@ec_wNAF_mu:
; Line 439
	mov	esi, DWORD PTR _wsize$1$[esp+92]
	test	esi, esi
	je	$LN48@ec_wNAF_mu
	mov	edx, DWORD PTR _wNAF_len$1$[esp+92]
	test	edx, edx
	je	$LN48@ec_wNAF_mu
	test	ebx, ebx
	je	$LN48@ec_wNAF_mu
	test	eax, eax
	je	$LN48@ec_wNAF_mu
; Line 449
	mov	ecx, DWORD PTR _num$[esp+88]
	xor	ebx, ebx
	mov	DWORD PTR _num_val$1$[esp+92], 0
	lea	eax, DWORD PTR [ecx+ebp]
	mov	DWORD PTR tv1728[esp+92], eax
	test	eax, eax
	je	$LN6@ec_wNAF_mu
	mov	eax, DWORD PTR _wNAF$1$[esp+92]
	mov	edi, esi
	mov	ebp, DWORD PTR _scalars$[esp+88]
	sub	eax, esi
	mov	DWORD PTR tv1715[esp+92], eax
	sub	ebp, esi
	mov	eax, edx
	sub	eax, esi
	mov	DWORD PTR tv1713[esp+92], eax
$LL7@ec_wNAF_mu:
; Line 452
	cmp	ebx, ecx
	jae	SHORT $LN105@ec_wNAF_mu
	push	DWORD PTR [edi+ebp]
	call	_BN_num_bits
	mov	esi, DWORD PTR _scalar$[esp+92]
	jmp	SHORT $LN201@ec_wNAF_mu
$LN105@ec_wNAF_mu:
	mov	esi, DWORD PTR _scalar$[esp+88]
	push	esi
	call	_BN_num_bits
$LN201@ec_wNAF_mu:
	add	esp, 4
; Line 453
	cmp	eax, 2000				; 000007d0H
	jb	SHORT $LN113@ec_wNAF_mu
	mov	ecx, 6
	jmp	SHORT $LN108@ec_wNAF_mu
$LN113@ec_wNAF_mu:
	cmp	eax, 800				; 00000320H
	jb	SHORT $LN111@ec_wNAF_mu
	mov	ecx, 5
	jmp	SHORT $LN108@ec_wNAF_mu
$LN111@ec_wNAF_mu:
	cmp	eax, 300				; 0000012cH
	jb	SHORT $LN109@ec_wNAF_mu
	mov	ecx, 4
	jmp	SHORT $LN108@ec_wNAF_mu
$LN109@ec_wNAF_mu:
	cmp	eax, 70					; 00000046H
	jb	SHORT $LN107@ec_wNAF_mu
	mov	ecx, 3
	jmp	SHORT $LN108@ec_wNAF_mu
$LN107@ec_wNAF_mu:
	cmp	eax, 20					; 00000014H
	sbb	ecx, ecx
	add	ecx, 2
$LN108@ec_wNAF_mu:
	mov	DWORD PTR [edi], ecx
; Line 454
	mov	eax, 1
	dec	ecx
	shl	eax, cl
	add	DWORD PTR _num_val$1$[esp+92], eax
; Line 455
	mov	eax, DWORD PTR tv1715[esp+92]
	mov	DWORD PTR [eax+edi+4], 0
; Line 456
	cmp	ebx, DWORD PTR _num$[esp+88]
	jae	SHORT $LN115@ec_wNAF_mu
	mov	eax, DWORD PTR [edi+ebp]
	jmp	SHORT $LN116@ec_wNAF_mu
$LN115@ec_wNAF_mu:
	mov	eax, esi
$LN116@ec_wNAF_mu:
	mov	esi, DWORD PTR tv1713[esp+92]
	add	esi, edi
	push	esi
	push	DWORD PTR [edi]
	push	eax
	call	_compute_wNAF
	mov	ecx, DWORD PTR tv1715[esp+104]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+edi], eax
; Line 459
	test	eax, eax
	je	$LN198@ec_wNAF_mu
; Line 461
	mov	ecx, DWORD PTR _max_len$1$[esp+92]
	cmp	DWORD PTR [esi], ecx
	cmova	ecx, DWORD PTR [esi]
	inc	ebx
	add	edi, 4
	mov	DWORD PTR _max_len$1$[esp+92], ecx
	mov	ecx, DWORD PTR _num$[esp+88]
	cmp	ebx, DWORD PTR tv1728[esp+92]
	jb	$LL7@ec_wNAF_mu
	mov	edi, DWORD PTR _scalar$[esp+88]
	mov	ebp, DWORD PTR _num_scalar$1$[esp+92]
$LN6@ec_wNAF_mu:
; Line 465
	mov	esi, DWORD PTR _numblocks$2$[esp+92]
	test	esi, esi
	je	$LN58@ec_wNAF_mu
; Line 468
	mov	ebx, DWORD PTR _pre_comp$1$[esp+92]
	test	ebx, ebx
	jne	SHORT $LN52@ec_wNAF_mu
; Line 469
	cmp	ebp, 1
	je	$LN58@ec_wNAF_mu
; Line 470
	push	470					; 000001d6H
$LN203@ec_wNAF_mu:
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	68					; 00000044H
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
; Line 471
	jmp	$LN198@ec_wNAF_mu
$LN52@ec_wNAF_mu:
; Line 476
	mov	DWORD PTR _tmp_len$1[esp+92], 0
; Line 478
	test	ebp, ebp
	je	SHORT $LN55@ec_wNAF_mu
; Line 479
	push	479					; 000001dfH
; Line 480
	jmp	SHORT $LN203@ec_wNAF_mu
$LN55@ec_wNAF_mu:
; Line 486
	mov	edx, DWORD PTR _wsize$1$[esp+92]
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 487
	lea	ecx, DWORD PTR _tmp_len$1[esp+92]
	push	ecx
	push	eax
	push	edi
	call	_compute_wNAF
	mov	ecx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp_wNAF$1$[esp+92], ecx
; Line 488
	test	ecx, ecx
	je	$LN198@ec_wNAF_mu
; Line 491
	mov	edi, DWORD PTR _tmp_len$1[esp+92]
	cmp	edi, DWORD PTR _max_len$1$[esp+92]
	ja	SHORT $LN57@ec_wNAF_mu
; Line 499
	mov	esi, DWORD PTR _num$[esp+88]
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _totalnum$1$[esp+92], eax
; Line 500
	mov	eax, DWORD PTR _wNAF$1$[esp+92]
	mov	DWORD PTR [eax+esi*4], ecx
; Line 508
	mov	ecx, DWORD PTR _val_sub$1$[esp+92]
	mov	DWORD PTR [eax+esi*4+4], 0
	mov	eax, DWORD PTR _wNAF_len$1$[esp+92]
	mov	DWORD PTR [eax+esi*4], edi
	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR [ecx+esi*4], eax
; Line 509
	jmp	$LN58@ec_wNAF_mu
$LN57@ec_wNAF_mu:
; Line 518
	mov	ebp, DWORD PTR _blocksize$1$[esp+92]
	imul	esi, ebp
	cmp	edi, esi
	jae	SHORT $LN183@ec_wNAF_mu
; Line 522
	lea	eax, DWORD PTR [ebp-1]
	xor	edx, edx
	add	eax, edi
	div	ebp
; Line 523
	cmp	eax, DWORD PTR [ebx+8]
	jbe	SHORT $LN61@ec_wNAF_mu
; Line 524
	push	524					; 0000020cH
; Line 525
	jmp	$LN203@ec_wNAF_mu
$LN61@ec_wNAF_mu:
; Line 527
	mov	esi, DWORD PTR _num$[esp+88]
	add	eax, esi
	mov	DWORD PTR _totalnum$1$[esp+92], eax
	jmp	SHORT $LN60@ec_wNAF_mu
$LN183@ec_wNAF_mu:
	mov	esi, DWORD PTR _num$[esp+88]
	mov	eax, DWORD PTR _totalnum$1$[esp+92]
$LN60@ec_wNAF_mu:
; Line 532
	mov	ebp, DWORD PTR [ebx+16]
; Line 534
	mov	ebx, esi
	mov	DWORD PTR _pp$1$[esp+92], ecx
	cmp	esi, eax
	jae	$LN9@ec_wNAF_mu
	mov	ecx, DWORD PTR _wNAF$1$[esp+92]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _wNAF_len$1$[esp+92]
	sub	ecx, eax
	mov	DWORD PTR tv1724[esp+92], edx
	mov	DWORD PTR tv1708[esp+92], ecx
	lea	esi, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR _val_sub$1$[esp+92]
	sub	eax, DWORD PTR _wNAF_len$1$[esp+92]
	mov	DWORD PTR tv1706[esp+92], eax
	mov	eax, DWORD PTR _blocksize$1$[esp+92]
$LL10@ec_wNAF_mu:
; Line 535
	cmp	ebx, edx
	jae	SHORT $LN62@ec_wNAF_mu
; Line 536
	mov	DWORD PTR [esi], eax
; Line 537
	cmp	edi, eax
	jb	$LN130@ec_wNAF_mu
; Line 541
	sub	edi, eax
; Line 542
	jmp	SHORT $LN63@ec_wNAF_mu
$LN62@ec_wNAF_mu:
; Line 547
	mov	DWORD PTR [esi], edi
$LN63@ec_wNAF_mu:
; Line 550
	push	550					; 00000226H
	mov	DWORD PTR [ecx+esi+4], 0
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	DWORD PTR [esi]
	call	_CRYPTO_malloc
	mov	ecx, DWORD PTR tv1708[esp+104]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+esi], eax
; Line 551
	test	eax, eax
	je	$LN131@ec_wNAF_mu
; Line 556
	push	DWORD PTR [esi]
	push	DWORD PTR _pp$1$[esp+96]
	push	eax
	call	_memcpy
; Line 557
	mov	ecx, DWORD PTR _max_len$1$[esp+104]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi], ecx
	cmova	ecx, DWORD PTR [esi]
; Line 560
	cmp	DWORD PTR [ebp], 0
	mov	DWORD PTR _max_len$1$[esp+92], ecx
	je	$LN132@ec_wNAF_mu
; Line 565
	mov	eax, DWORD PTR tv1706[esp+92]
	inc	ebx
	mov	DWORD PTR [eax+esi], ebp
	add	esi, 4
; Line 566
	mov	eax, DWORD PTR _pre_points_per_block$1$[esp+92]
	lea	ebp, DWORD PTR [ebp+eax*4]
; Line 567
	mov	eax, DWORD PTR _blocksize$1$[esp+92]
	add	DWORD PTR _pp$1$[esp+92], eax
	cmp	ebx, DWORD PTR _totalnum$1$[esp+92]
	jae	SHORT $LN176@ec_wNAF_mu
; Line 534
	mov	ecx, DWORD PTR tv1708[esp+92]
	mov	edx, DWORD PTR tv1724[esp+92]
	jmp	$LL10@ec_wNAF_mu
$LN130@ec_wNAF_mu:
; Line 538
	push	538					; 0000021aH
; Line 539
	jmp	$LN203@ec_wNAF_mu
$LN176@ec_wNAF_mu:
; Line 642
	mov	ecx, DWORD PTR _tmp_wNAF$1$[esp+92]
$LN9@ec_wNAF_mu:
; Line 569
	push	ecx
	call	_CRYPTO_free
	add	esp, 4
$LN58@ec_wNAF_mu:
; Line 579
	mov	ebx, DWORD PTR _num_val$1$[esp+92]
	push	579					; 00000243H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	lea	eax, DWORD PTR [ebx*4+4]
	push	eax
	call	_CRYPTO_malloc
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$1$[esp+92], edi
; Line 580
	test	edi, edi
	jne	$LN68@ec_wNAF_mu
; Line 581
	push	581					; 00000245H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
; Line 582
	mov	ebx, DWORD PTR _wNAF$1$[esp+112]
	add	esp, 20					; 00000014H
	xor	esi, esi
	jmp	SHORT $err$211
$LN132@ec_wNAF_mu:
; Line 561
	push	561					; 00000231H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	68					; 00000044H
$LN204@ec_wNAF_mu:
; Line 552
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
; Line 553
	push	DWORD PTR _tmp_wNAF$1$[esp+112]
	call	_CRYPTO_free
	add	esp, 24					; 00000018H
$LN198@ec_wNAF_mu:
	mov	ebx, DWORD PTR _wNAF$1$[esp+92]
$LN200@ec_wNAF_mu:
	xor	esi, esi
	xor	edi, edi
$err$211:
; Line 693
	mov	eax, DWORD PTR _new_ctx$1$[esp+92]
	test	eax, eax
	je	SHORT $LN97@ec_wNAF_mu
; Line 694
	push	eax
	call	_BN_CTX_free
	add	esp, 4
$LN97@ec_wNAF_mu:
; Line 695
	test	esi, esi
	je	SHORT $LN98@ec_wNAF_mu
; Line 696
	push	esi
	call	_EC_POINT_free
	add	esp, 4
$LN98@ec_wNAF_mu:
; Line 697
	mov	eax, DWORD PTR _wsize$1$[esp+92]
	test	eax, eax
	je	SHORT $LN99@ec_wNAF_mu
; Line 698
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN99@ec_wNAF_mu:
; Line 699
	mov	eax, DWORD PTR _wNAF_len$1$[esp+92]
	test	eax, eax
	je	SHORT $LN100@ec_wNAF_mu
; Line 700
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN100@ec_wNAF_mu:
; Line 701
	test	ebx, ebx
	je	SHORT $LN101@ec_wNAF_mu
; Line 704
	mov	eax, DWORD PTR [ebx]
	mov	esi, ebx
	test	eax, eax
	je	SHORT $LN30@ec_wNAF_mu
$LL31@ec_wNAF_mu:
; Line 705
	push	eax
	call	_CRYPTO_free
	mov	eax, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL31@ec_wNAF_mu
$LN30@ec_wNAF_mu:
; Line 707
	push	ebx
	call	_CRYPTO_free
	add	esp, 4
$LN101@ec_wNAF_mu:
; Line 709
	test	edi, edi
	je	SHORT $LN102@ec_wNAF_mu
; Line 710
	mov	eax, DWORD PTR [edi]
	mov	esi, edi
	test	eax, eax
	je	SHORT $LN33@ec_wNAF_mu
	npad	4
$LL34@ec_wNAF_mu:
; Line 711
	push	eax
	call	_EC_POINT_clear_free
	mov	eax, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL34@ec_wNAF_mu
$LN33@ec_wNAF_mu:
; Line 713
	push	edi
	call	_CRYPTO_free
	add	esp, 4
$LN102@ec_wNAF_mu:
; Line 715
	mov	eax, DWORD PTR _val_sub$1$[esp+92]
	test	eax, eax
	je	SHORT $LN103@ec_wNAF_mu
; Line 716
	push	eax
	call	_CRYPTO_free
	add	esp, 4
$LN103@ec_wNAF_mu:
; Line 718
	mov	eax, DWORD PTR _ret$1$[esp+92]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 719
	add	esp, 76					; 0000004cH
	ret	0
$LN131@ec_wNAF_mu:
; Line 552
	push	552					; 00000228H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
; Line 554
	jmp	$LN204@ec_wNAF_mu
$LN68@ec_wNAF_mu:
; Line 584
	lea	eax, DWORD PTR [edi+ebx*4]
; Line 587
	mov	esi, edi
; Line 588
	xor	ebp, ebp
	mov	DWORD PTR [eax], 0
	mov	edi, DWORD PTR tv1728[esp+92]
	mov	DWORD PTR tv1722[esp+92], eax
	test	edi, edi
	je	SHORT $LN12@ec_wNAF_mu
	mov	eax, DWORD PTR _val_sub$1$[esp+92]
	mov	ebx, DWORD PTR _wsize$1$[esp+92]
	sub	eax, ebx
	mov	DWORD PTR tv1704[esp+92], eax
$LL13@ec_wNAF_mu:
; Line 589
	mov	DWORD PTR [eax+ebx], esi
; Line 590
	xor	edi, edi
	mov	ecx, DWORD PTR [ebx]
	mov	eax, 1
	dec	ecx
	shl	eax, cl
	test	eax, eax
	je	SHORT $LN11@ec_wNAF_mu
$LL16@ec_wNAF_mu:
; Line 591
	push	DWORD PTR _group$[esp+88]
	call	_EC_POINT_new
	add	esp, 4
	mov	DWORD PTR [esi], eax
; Line 592
	test	eax, eax
	je	$LN192@ec_wNAF_mu
; Line 590
	mov	ecx, DWORD PTR [ebx]
	mov	eax, 1
	dec	ecx
	inc	edi
	shl	eax, cl
; Line 594
	add	esi, 4
	cmp	edi, eax
	jb	SHORT $LL16@ec_wNAF_mu
$LN11@ec_wNAF_mu:
; Line 588
	mov	edi, DWORD PTR tv1728[esp+92]
	inc	ebp
	mov	eax, DWORD PTR tv1704[esp+92]
	add	ebx, 4
	cmp	ebp, edi
	jb	SHORT $LL13@ec_wNAF_mu
	mov	eax, DWORD PTR tv1722[esp+92]
$LN12@ec_wNAF_mu:
; Line 597
	cmp	esi, eax
	je	SHORT $LN70@ec_wNAF_mu
; Line 598
	push	598					; 00000256H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	68					; 00000044H
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
; Line 599
	mov	ebx, DWORD PTR _wNAF$1$[esp+112]
	add	esp, 20					; 00000014H
	mov	edi, DWORD PTR _val$1$[esp+92]
	xor	esi, esi
	jmp	$err$211
$LN70@ec_wNAF_mu:
; Line 602
	mov	ebp, DWORD PTR _group$[esp+88]
	push	ebp
	call	_EC_POINT_new
	add	esp, 4
	mov	DWORD PTR _tmp$1$[esp+92], eax
	test	eax, eax
	je	$LN197@ec_wNAF_mu
; Line 612
	xor	ebx, ebx
	test	edi, edi
	je	$LN18@ec_wNAF_mu
	mov	ecx, DWORD PTR _val_sub$1$[esp+92]
	mov	edi, ecx
	mov	eax, DWORD PTR _points$[esp+88]
	mov	esi, DWORD PTR _wsize$1$[esp+92]
	sub	eax, ecx
	sub	esi, ecx
	mov	DWORD PTR _points$[esp+88], eax
	mov	DWORD PTR tv1701[esp+92], esi
	npad	5
$LL19@ec_wNAF_mu:
; Line 613
	cmp	ebx, DWORD PTR _num$[esp+88]
	jae	SHORT $LN72@ec_wNAF_mu
; Line 614
	push	DWORD PTR [eax+edi]
; Line 616
	jmp	SHORT $LN207@ec_wNAF_mu
$LN72@ec_wNAF_mu:
; Line 617
	push	DWORD PTR _generator$1$[esp+92]
$LN207@ec_wNAF_mu:
	mov	eax, DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	_EC_POINT_copy
	add	esp, 8
	test	eax, eax
	je	$LN184@ec_wNAF_mu
; Line 621
	cmp	DWORD PTR [esi+edi], 1
	jbe	SHORT $LN17@ec_wNAF_mu
; Line 622
	mov	eax, DWORD PTR [edi]
	push	DWORD PTR _ctx$[esp+88]
	mov	esi, DWORD PTR _tmp$1$[esp+96]
	push	DWORD PTR [eax]
	push	esi
	push	ebp
	call	_EC_POINT_dbl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN189@ec_wNAF_mu
; Line 624
	mov	ecx, DWORD PTR tv1701[esp+92]
	mov	esi, 1
	mov	eax, esi
	mov	ecx, DWORD PTR [ecx+edi]
	dec	ecx
	shl	eax, cl
	cmp	eax, esi
	jbe	SHORT $LN181@ec_wNAF_mu
	npad	4
$LL22@ec_wNAF_mu:
; Line 625
	push	DWORD PTR _ctx$[esp+88]
	mov	eax, DWORD PTR [edi]
	push	DWORD PTR _tmp$1$[esp+96]
	push	DWORD PTR [eax+esi*4-4]
	push	DWORD PTR [eax+esi*4]
	push	ebp
	call	_EC_POINT_add
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN184@ec_wNAF_mu
; Line 624
	mov	eax, DWORD PTR tv1701[esp+92]
	inc	esi
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, 1
	dec	ecx
	shl	eax, cl
	cmp	esi, eax
	jb	SHORT $LL22@ec_wNAF_mu
$LN181@ec_wNAF_mu:
	mov	esi, DWORD PTR tv1701[esp+92]
$LN17@ec_wNAF_mu:
; Line 612
	mov	eax, DWORD PTR _points$[esp+88]
	inc	ebx
	add	edi, 4
	cmp	ebx, DWORD PTR tv1728[esp+92]
	jb	$LL19@ec_wNAF_mu
$LN18@ec_wNAF_mu:
; Line 634
	mov	edi, DWORD PTR _ctx$[esp+88]
	mov	eax, DWORD PTR _val$1$[esp+92]
	push	edi
	push	eax
	push	DWORD PTR _num_val$1$[esp+100]
	push	ebp
	call	_EC_POINTs_make_affine
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN184@ec_wNAF_mu
; Line 640
	mov	ecx, DWORD PTR _max_len$1$[esp+92]
	mov	ebx, 1
	sub	ecx, ebx
	mov	DWORD PTR _k$1$[esp+92], ecx
	js	$LN175@ec_wNAF_mu
	jmp	SHORT $LN25@ec_wNAF_mu
$LL180@ec_wNAF_mu:
	mov	ebp, DWORD PTR _group$[esp+88]
$LN25@ec_wNAF_mu:
; Line 642
	mov	esi, DWORD PTR _r$[esp+88]
	test	ebx, ebx
	jne	SHORT $LN81@ec_wNAF_mu
	push	edi
	push	esi
	push	esi
	push	ebp
	call	_EC_POINT_dbl
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN184@ec_wNAF_mu
	mov	ecx, DWORD PTR _k$1$[esp+92]
$LN81@ec_wNAF_mu:
; Line 646
	xor	ebp, ebp
	cmp	DWORD PTR _totalnum$1$[esp+92], ebp
	jbe	$LN23@ec_wNAF_mu
	mov	edx, DWORD PTR _wNAF_len$1$[esp+92]
	mov	eax, DWORD PTR _wNAF$1$[esp+92]
	sub	edx, eax
	mov	edi, DWORD PTR _val_sub$1$[esp+92]
	sub	eax, edi
	mov	DWORD PTR tv1698[esp+92], edx
	mov	DWORD PTR tv1695[esp+92], eax
	npad	6
$LL28@ec_wNAF_mu:
; Line 647
	add	eax, edi
	cmp	DWORD PTR [eax+edx], ecx
	jbe	$LN26@ec_wNAF_mu
; Line 648
	mov	eax, DWORD PTR [eax]
	movsx	esi, BYTE PTR [eax+ecx]
; Line 651
	test	esi, esi
	je	$LN177@ec_wNAF_mu
; Line 652
	xor	eax, eax
	test	esi, esi
	sets	al
; Line 654
	test	eax, eax
	je	SHORT $LN84@ec_wNAF_mu
; Line 655
	neg	esi
$LN84@ec_wNAF_mu:
; Line 657
	mov	ecx, DWORD PTR _r_is_inverted$1$[esp+92]
	cmp	eax, ecx
	je	SHORT $LN85@ec_wNAF_mu
; Line 658
	test	ebx, ebx
	jne	SHORT $LN87@ec_wNAF_mu
; Line 659
	push	DWORD PTR _ctx$[esp+88]
	push	DWORD PTR _r$[esp+92]
	push	DWORD PTR _group$[esp+96]
	call	_EC_POINT_invert
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN184@ec_wNAF_mu
	mov	ecx, DWORD PTR _r_is_inverted$1$[esp+92]
$LN87@ec_wNAF_mu:
; Line 662
	xor	eax, eax
	test	ecx, ecx
	sete	al
	mov	DWORD PTR _r_is_inverted$1$[esp+92], eax
$LN85@ec_wNAF_mu:
; Line 668
	mov	eax, DWORD PTR [edi]
	sar	esi, 1
	test	ebx, ebx
	je	SHORT $LN88@ec_wNAF_mu
	push	DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _r$[esp+92]
	push	esi
	call	_EC_POINT_copy
	add	esp, 8
	test	eax, eax
	je	$LN184@ec_wNAF_mu
; Line 671
	mov	ecx, DWORD PTR _k$1$[esp+92]
	xor	ebx, ebx
	mov	edx, DWORD PTR tv1698[esp+92]
	jmp	SHORT $LN26@ec_wNAF_mu
$LN88@ec_wNAF_mu:
; Line 672
	push	DWORD PTR _ctx$[esp+88]
	push	DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _r$[esp+96]
	push	esi
	push	esi
	push	DWORD PTR _group$[esp+104]
	call	_EC_POINT_add
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN184@ec_wNAF_mu
	mov	ecx, DWORD PTR _k$1$[esp+92]
	mov	edx, DWORD PTR tv1698[esp+92]
	jmp	SHORT $LN26@ec_wNAF_mu
$LN177@ec_wNAF_mu:
	mov	esi, DWORD PTR _r$[esp+88]
$LN26@ec_wNAF_mu:
; Line 646
	mov	eax, DWORD PTR tv1695[esp+92]
	inc	ebp
	add	edi, 4
	cmp	ebp, DWORD PTR _totalnum$1$[esp+92]
	jb	$LL28@ec_wNAF_mu
	mov	edi, DWORD PTR _ctx$[esp+88]
$LN23@ec_wNAF_mu:
; Line 640
	sub	ecx, 1
	mov	DWORD PTR _k$1$[esp+92], ecx
	jns	$LL180@ec_wNAF_mu
; Line 681
	test	ebx, ebx
	jne	SHORT $LN179@ec_wNAF_mu
; Line 685
	cmp	DWORD PTR _r_is_inverted$1$[esp+92], ebx
	je	SHORT $LN96@ec_wNAF_mu
; Line 686
	push	edi
	push	esi
	push	DWORD PTR _group$[esp+96]
	call	_EC_POINT_invert
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN209@ec_wNAF_mu
$LN179@ec_wNAF_mu:
	mov	ebp, DWORD PTR _group$[esp+88]
$LN175@ec_wNAF_mu:
; Line 682
	push	DWORD PTR _r$[esp+88]
	push	ebp
	call	_EC_POINT_set_to_infinity
	add	esp, 8
$LN209@ec_wNAF_mu:
	test	eax, eax
	je	SHORT $LN184@ec_wNAF_mu
$LN96@ec_wNAF_mu:
; Line 690
	mov	DWORD PTR _ret$1$[esp+92], 1
$LN184@ec_wNAF_mu:
	mov	ebx, DWORD PTR _wNAF$1$[esp+92]
	mov	esi, DWORD PTR _tmp$1$[esp+92]
	mov	edi, DWORD PTR _val$1$[esp+92]
	jmp	$err$211
$LN48@ec_wNAF_mu:
; Line 440
	push	440					; 000001b8H
	push	OFFSET ??_C@_0BG@MAGCMNCN@?4?2crypto?2ec?2ec_mult?4c?$AA@
	push	65					; 00000041H
	push	187					; 000000bbH
	push	16					; 00000010H
	call	_ERR_put_error
	add	esp, 20					; 00000014H
	jmp	$LN200@ec_wNAF_mu
$LN189@ec_wNAF_mu:
	mov	ebx, DWORD PTR _wNAF$1$[esp+92]
	mov	edi, DWORD PTR _val$1$[esp+92]
	jmp	$err$211
$LN192@ec_wNAF_mu:
	mov	edi, DWORD PTR _val$1$[esp+92]
	xor	esi, esi
	mov	ebx, DWORD PTR _wNAF$1$[esp+92]
	jmp	$err$211
$LN197@ec_wNAF_mu:
	mov	esi, DWORD PTR _tmp$1$[esp+92]
	mov	edi, DWORD PTR _val$1$[esp+92]
	mov	ebx, DWORD PTR _wNAF$1$[esp+92]
	jmp	$err$211
_ec_wNAF_mul ENDP
_TEXT	ENDS
END
