_blowfish_make_context proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['1050h']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_blowfish_ssh1_make_context proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['1050h']
push ['2']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_blowfish_free_context proc near        
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_blowfish_key   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
push ['10h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_blowfish_setkey']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_setkey proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '400h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '800h']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0C00h']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1000h']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_138D']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
cmp ['[ebp+var_28],', '12h']
jge ['loc_145C']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_28]']
mov ['edx,', 'ds:_parray[edx*4]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_28]']
shl ['eax,', '2']
movsx ['ecx,', '[ebp+arg_8]']
cdq
idiv ['ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+edx*4],', 'ecx']
mov ['ecx,', '[ebp+var_28]']
lea ['eax,', 'ds:1[ecx*4]']
movsx ['ecx,', '[ebp+arg_8]']
cdq
idiv ['ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+edx*4],', 'ecx']
mov ['ecx,', '[ebp+var_28]']
lea ['eax,', 'ds:2[ecx*4]']
movsx ['ecx,', '[ebp+arg_8]']
cdq
idiv ['ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
shl ['ecx,', '8']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+edx*4],', 'ecx']
mov ['ecx,', '[ebp+var_28]']
lea ['eax,', 'ds:3[ecx*4]']
movsx ['ecx,', '[ebp+arg_8]']
cdq
idiv ['ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+edx*4],', 'ecx']
jmp ['loc_1384']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_146E']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
cmp ['[ebp+var_28],', '100h']
jge ['short', 'loc_14C5']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_28]']
mov ['ecx,', 'ds:_sbox0[ecx*4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_28]']
mov ['ecx,', 'ds:_sbox1[ecx*4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_28]']
mov ['ecx,', 'ds:_sbox2[ecx*4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_28]']
mov ['ecx,', 'ds:_sbox3[ecx*4]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_1465']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_14E4']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '2']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '12h']
jge ['short', 'loc_151D']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+edx*4+4],', 'ecx']
jmp ['short', 'loc_14DB']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_152F']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '2']
mov ['[ebp+var_28],', 'edx']
cmp ['[ebp+var_28],', '100h']
jge ['short', 'loc_156B']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+ecx*4+4],', 'eax']
jmp ['short', 'loc_1526']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_157D']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '2']
mov ['[ebp+var_28],', 'ecx']
cmp ['[ebp+var_28],', '100h']
jge ['short', 'loc_15B9']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4+4],', 'edx']
jmp ['short', 'loc_1574']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_15CB']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '2']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '100h']
jge ['short', 'loc_1607']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+edx*4+4],', 'ecx']
jmp ['short', 'loc_15C2']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_1619']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '2']
mov ['[ebp+var_28],', 'edx']
cmp ['[ebp+var_28],', '100h']
jge ['short', 'loc_1655']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+ecx*4+4],', 'eax']
jmp ['short', 'loc_1610']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_encrypt proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '400h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '800h']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '0C00h']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '1000h']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+0Ch]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+10h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+14h]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+18h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+1Ch]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+20h]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+24h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+28h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+2Ch]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+30h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+34h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+38h]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+3Ch]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+40h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+44h]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish256_key proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
push ['20h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_blowfish_setkey']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_iv    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1048h],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+104Ch],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_sesskey proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
push ['20h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_blowfish_setkey']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+1048h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+104Ch],', '0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1050h']
push ['1050h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_ssh1_encrypt_blk proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_blowfish_lsb_encrypt_cbc']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_lsb_encrypt_cbc proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_1EE2']
push ['11Dh']
push ['offset', '$SG5975']
push ['offset', '$SG5976']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+1048h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+104Ch]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+arg_4],', '0']
jle ['loc_2005']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_20]']
xor ['eax,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_1C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_1C]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2],', 'dl']
mov ['ecx,', '[ebp+var_1C]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+3],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[eax+4],', 'cl']
mov ['edx,', '[ebp+var_20]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+5],', 'dl']
mov ['ecx,', '[ebp+var_20]']
shr ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+6],', 'cl']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+7],', 'al']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '8']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_1EFA']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+1048h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+104Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_ssh1_decrypt_blk proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1050h']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_blowfish_lsb_decrypt_cbc']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_lsb_decrypt_cbc proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_20E2']
push ['139h']
push ['offset', '$SG6018']
push ['offset', '$SG6019']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+1048h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+104Ch]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+arg_4],', '0']
jle ['loc_2205']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_blowfish_decrypt']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
xor ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_1C]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_1C]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2],', 'al']
mov ['edx,', '[ebp+var_1C]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+3],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[ecx+4],', 'dl']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+5],', 'al']
mov ['edx,', '[ebp+var_20]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+6],', 'dl']
mov ['ecx,', '[ebp+var_20]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+7],', 'cl']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '8']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_20FA']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+1048h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+104Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_decrypt proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '400h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '800h']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '0C00h']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '1000h']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+44h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+40h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+3Ch]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+38h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+34h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+30h]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+2Ch]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+28h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+24h]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+20h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+1Ch]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+18h]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+14h]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+10h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax*4]']
mov ['edx,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+0Ch]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
add ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_C]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
add ['ecx,', '[eax+edx*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[edx+8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
xor ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['edx,', '[ecx+eax*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'edx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[eax+4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_ssh2_encrypt_blk proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_blowfish_msb_encrypt_cbc']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_msb_encrypt_cbc proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_2982']
push ['155h']
push ['offset', '$SG6061']
push ['offset', '$SG6062']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+1048h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+104Ch]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+arg_4],', '0']
jle ['loc_2AA5']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_20]']
xor ['eax,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_1C]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_1C]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[ecx+3],', 'dl']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'al']
mov ['edx,', '[ebp+var_20]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+5],', 'dl']
mov ['ecx,', '[ebp+var_20]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+6],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[eax+7],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '8']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_299A']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+1048h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+104Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_ssh2_decrypt_blk proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_blowfish_msb_decrypt_cbc']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_msb_decrypt_cbc proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_2B82']
push ['171h']
push ['offset', '$SG6104']
push ['offset', '$SG6105']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+1048h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+104Ch]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+arg_4],', '0']
jle ['loc_2CA5']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_blowfish_decrypt']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
xor ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_1C]']
shr ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_1C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[edx+3],', 'al']
mov ['ecx,', '[ebp+var_20]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'cl']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+5],', 'al']
mov ['edx,', '[ebp+var_20]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+6],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[ecx+7],', 'dl']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '8']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_2B9A']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+1048h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+104Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_ssh2_sdctr proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_blowfish_msb_sdctr']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_blowfish_msb_sdctr proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_2D7F']
push ['18Dh']
push ['offset', '$SG6146']
push ['offset', '$SG6147']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+1048h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+104Ch]']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_4],', '0']
jle ['loc_2EB0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_blowfish_encrypt']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
or ['edx,', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_1C]']
xor ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2],', 'al']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+3],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'dl']
mov ['ecx,', '[ebp+var_1C]']
xor ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5],', 'cl']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+6],', 'al']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+7],', 'dl']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
jnz ['short', 'loc_2E99']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '8']
mov ['[ebp+arg_4],', 'ecx']
jmp ['loc_2D97']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+1048h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+104Ch],', 'edx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
