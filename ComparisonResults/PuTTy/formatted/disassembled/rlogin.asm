_rlogin_log     proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
push ['100h']
lea ['ecx,', '[ebp+var_10C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_sk_getaddr']
add ['esp,', '0Ch']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_176']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_10C]']
push ['ecx']
push ['offset', '$SG85585']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+var_114],', 'eax']
jmp ['short', 'loc_194']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
lea ['eax,', '[ebp+var_10C]']
push ['eax']
push ['offset', '$SG85587']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+var_114],', 'eax']
mov ['ecx,', '[ebp+var_114]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+20h]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_114]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_closing proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_270']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_261']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+20h]']
push ['edx']
call ['_notify_remote_exit']
add ['esp,', '4']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2A1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+20h]']
push ['edx']
call ['_logevent']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG85604']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+20h]']
push ['edx']
call ['_connection_fatal']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_receive proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '2']
jnz ['short', 'loc_325']
mov ['ecx,', '[ebp+arg_8]']
mov ['dl,', '[ecx]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'dl']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '1']
mov ['[ebp+arg_C],', 'ecx']
movsx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
cmp ['edx,', '0FFFFFF80h']
jnz ['short', 'loc_323']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_rlogin_size']
add ['esp,', '0Ch']
jmp ['short', 'loc_36E']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jz ['short', 'loc_354']
mov ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jnz ['short', 'loc_34A']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '1']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+10h],', '0']
cmp ['[ebp+arg_C],', '0']
jle ['short', 'loc_36E']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_c_write']
add ['esp,', '0Ch']
mov ['eax,', '1']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_c_write        proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
push ['eax']
call ['_from_backend']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
xor ['ecx,', 'ecx']
cmp ['[ebp+var_4],', '1000h']
setnle ['cl']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_sent    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+0Ch],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_init    proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['2Ch']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax],', 'offset', '?fn_table@?1??rlogin_init@@9@9']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+20h],', 'ecx']
push ['6Eh']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+18h],', 'eax']
push ['6Fh']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+10h],', '1']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+28h],', '0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_copy']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx],', 'eax']
push ['3']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '1']
jnz ['short', 'loc_4E8']
mov ['[ebp+var_28],', 'offset', '$SG85674']
jmp ['short', 'loc_504']
cmp ['[ebp+var_14],', '2']
jnz ['short', 'loc_4F7']
mov ['[ebp+var_2C],', 'offset', '$SG85675']
jmp ['short', 'loc_4FE']
mov ['[ebp+var_2C],', 'offset', '$SG85676']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
push ['offset', '$SG85677']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_logevent']
add ['esp,', '8']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['_name_lookup']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_sk_addr_error']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_583']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_sk_addr_free']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_718']
cmp ['[ebp+arg_10],', '0']
jge ['short', 'loc_590']
mov ['[ebp+arg_10],', '201h']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
push ['0']
push ['1']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_new_connection']
add ['esp,', '24h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+4],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+1Ch]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_5F1']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_718']
push ['9']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_str']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_653']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_dupstr']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'eax']
push ['3Ah']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_host_strrchr']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_653']
mov ['edx,', '[ebp+var_20]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_get_remote_username']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_689']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_rlogin_startup']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
jmp ['loc_716']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+20h]']
push ['eax']
call ['_new_prompts']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+28h],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+28h]']
mov ['dword', 'ptr', '[eax],', '1']
push ['offset', '$SG85691']
call ['_dupstr']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+28h]']
mov ['[edx+4],', 'eax']
push ['1']
push ['offset', '$SG85692']
call ['_dupstr']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['_add_prompt']
add ['esp,', '0Ch']
push ['0']
push ['0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['_get_userpass_input']
add ['esp,', '0Ch']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jl ['short', 'loc_716']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+28h]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_rlogin_startup']
add ['esp,', '8']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_startup proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['esi,', 'esp']
push ['1']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['34h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
push ['edx']
call ['_conf_get_str']
add ['esp,', '8']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['1']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['1']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['2Eh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
call ['_conf_get_str']
add ['esp,', '8']
mov ['[ebp+Str],', 'eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['1']
push ['offset', '$SG85640']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['2Fh']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
push ['edx']
call ['_conf_get_str']
add ['esp,', '8']
mov ['[ebp+Str],', 'eax']
push ['offset', '$SG85641']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strspn']
add ['esp,', '8']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['1']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_free    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+28h],', '0']
jz ['short', 'loc_986']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['_free_prompts']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_9AF']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+24h]']
push ['eax']
call ['_conf_free']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_reconfig proc near              
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_rlogin_send    proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_A14']
xor ['eax,', 'eax']
jmp ['short', 'loc_A8E']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+28h],', '0']
jz ['short', 'loc_A5A']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['_get_userpass_input']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_A58']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28h]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_rlogin_startup']
add ['esp,', '8']
jmp ['short', 'loc_A88']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_sendbuffer proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+0Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_size    proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_18],', '0FFh']
mov ['byte', 'ptr', '[ebp+var_18+1],', '0FFh']
mov ['byte', 'ptr', '[ebp+var_18+2],', '73h']
mov ['byte', 'ptr', '[ebp+var_18+3],', '73h']
mov ['byte', 'ptr', '[ebp+var_14],', '0']
mov ['byte', 'ptr', '[ebp+var_14+1],', '0']
mov ['byte', 'ptr', '[ebp+var_14+2],', '0']
mov ['byte', 'ptr', '[ebp+var_14+3],', '0']
mov ['byte', 'ptr', '[ebp+var_10],', '0']
mov ['byte', 'ptr', '[ebp+var_10+1],', '0']
mov ['byte', 'ptr', '[ebp+var_10+2],', '0']
mov ['byte', 'ptr', '[ebp+var_10+3],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_B51']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['short', 'loc_B53']
jmp ['short', 'loc_BB5']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+18h]']
sar ['edx,', '8']
mov ['byte', 'ptr', '[ebp+var_14+2],', 'dl']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
and ['ecx,', '0FFh']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'cl']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+1Ch]']
sar ['eax,', '8']
mov ['byte', 'ptr', '[ebp+var_14],', 'al']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1Ch]']
and ['edx,', '0FFh']
mov ['byte', 'ptr', '[ebp+var_14+1],', 'dl']
mov ['esi,', 'esp']
push ['0Ch']
lea ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_special proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_rlogin_get_specials proc near          
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
_rlogin_connected proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[ecx+4],', '0']
setnz ['al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_sendok  proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '1']
pop ['ebp']
retn
endp
_rlogin_unthrottle proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
xor ['ecx,', 'ecx']
cmp ['[ebp+arg_4],', '1000h']
setnle ['cl']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_ldisc   proc near               
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
_rlogin_provide_ldisc proc near         
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_rlogin_provide_logctx proc near        
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_rlogin_exitcode proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_CFD']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_D11']
jmp ['short', 'loc_D11']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_D0F']
mov ['eax,', '7FFFFFFFh']
jmp ['short', 'loc_D11']
jmp ['short', 'loc_D11']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_rlogin_cfg_info proc near              
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
