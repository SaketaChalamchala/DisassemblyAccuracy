_parse_blocksize proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+EndPtr],', 'eax']
mov ['[ebp+var_4],', 'eax']
push ['0Ah']
lea ['eax,', '[ebp+EndPtr]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_strtoul']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+EndPtr]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jz ['short', '$LN9']
mov ['ecx,', '[ebp+EndPtr]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_249']
mov ['eax,', '[ebp+EndPtr]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
call ['_isspace']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_249']
mov ['edx,', '[ebp+EndPtr]']
add ['edx,', '1']
mov ['[ebp+EndPtr],', 'edx']
jmp ['short', 'loc_221']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '47h']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '26h']
ja ['short', '$LN9']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'ds:$LN12[eax]']
jmp ['ds:$LN16[ecx*4]']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '0Ah']
mov ['[ebp+var_10],', 'edx']
jmp ['short', '$LN9']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '14h']
mov ['[ebp+var_10],', 'eax']
jmp ['short', '$LN9']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '1Eh']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_ctrlparse      proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['byte', 'ptr', '[ebp+var_4+3],', '0']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Eh']
jz ['short', 'loc_330']
mov ['edx,', '[ebp+EndPtr]']
mov ['dword', 'ptr', '[edx],', '0']
jmp ['loc_442']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
mov ['ecx,', '[ebp+Str]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jnz ['short', 'loc_351']
mov ['eax,', '[ebp+EndPtr]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['loc_442']
mov ['ecx,', '[ebp+Str]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '3Ch']
jnz ['short', 'loc_3B2']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
push ['0']
mov ['ecx,', '[ebp+EndPtr]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strtol']
add ['esp,', '0Ch']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['eax,', '[ebp+EndPtr]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+Str]']
jz ['short', 'loc_391']
mov ['edx,', '[ebp+EndPtr]']
mov ['eax,', '[edx]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Eh']
jz ['short', 'loc_3A0']
mov ['byte', 'ptr', '[ebp+var_4+3],', '0']
mov ['edx,', '[ebp+EndPtr]']
mov ['dword', 'ptr', '[edx],', '0']
jmp ['short', 'loc_3AD']
mov ['eax,', '[ebp+EndPtr]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+EndPtr]']
mov ['[edx],', 'ecx']
jmp ['loc_442']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '61h']
jl ['short', 'loc_3E1']
mov ['edx,', '[ebp+Str]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '7Ah']
jg ['short', 'loc_3E1']
mov ['ecx,', '[ebp+Str]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
sub ['edx,', '60h']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'dl']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['ecx,', '[ebp+EndPtr]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_442']
mov ['edx,', '[ebp+Str]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '40h']
jl ['short', 'loc_3F7']
mov ['ecx,', '[ebp+Str]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '5Fh']
jle ['short', 'loc_40F']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Fh']
jz ['short', 'loc_40F']
mov ['edx,', '[ebp+Str]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
and ['eax,', '80h']
jz ['short', 'loc_428']
mov ['ecx,', '[ebp+Str]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
xor ['edx,', '40h']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'dl']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['ecx,', '[ebp+EndPtr]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_442']
mov ['edx,', '[ebp+Str]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '7Eh']
jnz ['short', 'loc_442']
mov ['byte', 'ptr', '[ebp+var_4+3],', '5Eh']
mov ['ecx,', '[ebp+Str]']
add ['ecx,', '1']
mov ['edx,', '[ebp+EndPtr]']
mov ['[edx],', 'ecx']
mov ['al,', 'byte', 'ptr', '[ebp+var_4+3]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_host_strcspn   proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_host_strchr_internal']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_488']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[ebp+Str]']
jmp ['short', 'loc_494']
jmp ['short', 'loc_494']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_host_strchr_internal proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['loc_561']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jnz ['short', 'loc_4E6']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_561']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Bh']
jnz ['short', 'loc_4FC']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_553']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Dh']
jnz ['short', 'loc_518']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_518']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_553']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_52B']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Ah']
jnz ['short', 'loc_52B']
jmp ['short', 'loc_553']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_strchr']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_553']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_553']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_561']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
jmp ['loc_4CA']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_host_strchr    proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['dword', 'ptr', '[ebp+Str],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', '[ebp+arg_4]']
mov ['[ebp+Str],', 'al']
mov ['[ebp+Str+1],', '0']
push ['1']
lea ['ecx,', '[ebp+Str]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_host_strchr_internal']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_host_strrchr   proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['dword', 'ptr', '[ebp+Str],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', '[ebp+arg_4]']
mov ['[ebp+Str],', 'al']
mov ['[ebp+Str+1],', '0']
push ['0']
lea ['ecx,', '[ebp+Str]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_host_strchr_internal']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_host_strduptrim proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Bh']
jnz ['loc_716']
mov ['edx,', '[ebp+Str]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6D8']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '5Dh']
jz ['short', 'loc_6D8']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
call ['_isxdigit']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_6B5']
jmp ['short', 'loc_6CD']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Ah']
jnz ['short', 'loc_6CB']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_6CD']
jmp ['short', 'loc_6D8']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_68B']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '5Dh']
jnz ['short', 'loc_716']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+1]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_716']
cmp ['[ebp+var_8],', '1']
jle ['short', 'loc_716']
mov ['edx,', '[ebp+Str]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', 'eax']
push ['ecx']
push ['offset', '$SG85650']
call ['_dupprintf']
add ['esp,', '0Ch']
jmp ['short', 'loc_722']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_dupstr']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_new_prompts    proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['24h']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+20h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '1']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_add_prompt     proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['10h']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
push ['eax']
call ['_saferealloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['ecx,', '[ebp+var_4]']
mov ['[edx+eax*4-4],', 'ecx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_prompt_ensure_result_size proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
cmp ['ecx,', '[ebp+arg_4]']
jge ['short', 'loc_8E7']
mov ['eax,', '[ebp+arg_4]']
imul ['eax,', '5']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
add ['eax,', '200h']
mov ['[ebp+arg_4],', 'eax']
push ['1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_smemclr']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+Dst]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+0Ch],', 'edx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_prompt_set_result proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_prompt_ensure_result_size']
add ['esp,', '8']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_strcpy']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_free_prompts   proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Memory],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_95E']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+14h]']
jnb ['short', 'loc_9B9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+edx*4]']
mov ['[ebp+Memory],', 'eax']
mov ['ecx,', '[ebp+Memory]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+Memory]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_smemclr']
add ['esp,', '8']
mov ['edx,', '[ebp+Memory]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
mov ['ecx,', '[ebp+Memory]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
mov ['eax,', '[ebp+Memory]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
jmp ['short', 'loc_955']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_dupstr         proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Dest],', '0CCCCCCCCh']
mov ['[ebp+Dest],', '0']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_A5C']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
push ['ecx']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+Dest],', 'eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+Dest]']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '[ebp+Dest]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_dupcat         proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+Source],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Dest],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
lea ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '1']
test ['edx,', 'edx']
jz ['short', 'loc_ADE']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '4']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+Source],', 'edx']
cmp ['[ebp+Source],', '0']
jnz ['short', 'loc_ACA']
jmp ['short', 'loc_ADE']
mov ['eax,', '[ebp+Source]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_AA7']
mov ['[ebp+var_14],', '0']
push ['1']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
push ['ecx']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+Dest],', 'eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+Dest]']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
mov ['ecx,', '[ebp+Dest]']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '[ebp+Dest]']
mov ['[ebp+var_C],', 'eax']
lea ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_B68']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx-4]']
mov ['[ebp+Source],', 'eax']
cmp ['[ebp+Source],', '0']
jnz ['short', 'loc_B44']
jmp ['short', 'loc_B68']
mov ['ecx,', '[ebp+Source]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_B21']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+Dest]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_burnstr        proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_BB6']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_smemclr']
add ['esp,', '8']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_toint          proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '7FFFFFFFh']
ja ['short', 'loc_BDB']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_BF0']
jmp ['short', 'loc_BF0']
cmp ['[ebp+arg_0],', '80000000h']
jb ['short', 'loc_BEB']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_BF0']
jmp ['short', 'loc_BF0']
mov ['eax,', '80000000h']
pop ['ebp']
retn
endp
_dupprintf      proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Args],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_4]']
mov ['[ebp+Args],', 'eax']
mov ['ecx,', '[ebp+Args]']
push ['ecx']
mov ['edx,', '[ebp+Format]']
push ['edx']
call ['_dupvprintf']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+Args],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_dupvprintf     proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+Count],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Dest],', '0CCCCCCCCh']
push ['1']
push ['200h']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+Dest],', 'eax']
mov ['[ebp+Count],', '200h']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_CE9']
mov ['ecx,', '[ebp+Args]']
push ['ecx']
mov ['edx,', '[ebp+Format]']
push ['edx']
mov ['eax,', '[ebp+Count]']
push ['eax']
mov ['ecx,', '[ebp+Dest]']
push ['ecx']
call ['__vsnprintf']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_CB5']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+Count]']
jge ['short', 'loc_CB5']
mov ['eax,', '[ebp+Dest]']
jmp ['short', 'loc_CE9']
jmp ['short', 'loc_CD2']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_CC6']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+Count],', 'eax']
jmp ['short', 'loc_CD2']
mov ['ecx,', '[ebp+Count]']
add ['ecx,', '200h']
mov ['[ebp+Count],', 'ecx']
push ['1']
mov ['edx,', '[ebp+Count]']
push ['edx']
mov ['eax,', '[ebp+Dest]']
push ['eax']
call ['_saferealloc']
add ['esp,', '0Ch']
mov ['[ebp+Dest],', 'eax']
jmp ['short', 'loc_C7C']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_fgetline       proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Memory],', '0CCCCCCCCh']
push ['1']
push ['200h']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+Memory],', 'eax']
mov ['[ebp+var_8],', '200h']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+File]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+Memory]']
add ['edx,', '[ebp+var_C]']
push ['edx']
call ['_fgets']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jz ['short', 'loc_D99']
mov ['eax,', '[ebp+Memory]']
add ['eax,', '[ebp+var_C]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+Memory]']
add ['ecx,', '[ebp+var_C]']
movsx ['edx,', 'byte', 'ptr', '[ecx-1]']
cmp ['edx,', '0Ah']
jnz ['short', 'loc_D77']
jmp ['short', 'loc_D99']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '200h']
mov ['[ebp+var_8],', 'eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+Memory]']
push ['edx']
call ['_saferealloc']
add ['esp,', '0Ch']
mov ['[ebp+Memory],', 'eax']
jmp ['short', 'loc_D33']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_DAF']
mov ['eax,', '[ebp+Memory]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['short', 'loc_DBB']
mov ['ecx,', '[ebp+Memory]']
add ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['eax,', '[ebp+Memory]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_base64_encode_atom proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '10h']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_4],', '1']
jle ['short', 'loc_E05']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '8']
or ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '2']
jle ['short', 'loc_E18']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
or ['edx,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '12h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+arg_8]']
mov ['dl,', 'ds:?base64_chars@?1??base64_encode_atom@@9@9[eax]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '0Ch']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+arg_8]']
mov ['dl,', 'ds:?base64_chars@?1??base64_encode_atom@@9@9[eax]']
mov ['[ecx+1],', 'dl']
cmp ['[ebp+arg_4],', '1']
jle ['short', 'loc_E5E']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '6']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+arg_8]']
mov ['dl,', 'ds:?base64_chars@?1??base64_encode_atom@@9@9[eax]']
mov ['[ecx+2],', 'dl']
jmp ['short', 'loc_E65']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax+2],', '3Dh']
cmp ['[ebp+arg_4],', '2']
jle ['short', 'loc_E7F']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+arg_8]']
mov ['al,', 'ds:?base64_chars@?1??base64_encode_atom@@9@9[ecx]']
mov ['[edx+3],', 'al']
jmp ['short', 'loc_E86']
mov ['ecx,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[ecx+3],', '3Dh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_base64_decode_atom proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_ECA']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '4']
jge ['loc_F85']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_20]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_2D],', 'dl']
movsx ['eax,', '[ebp+var_2D]']
cmp ['eax,', '41h']
jl ['short', 'loc_EFD']
movsx ['ecx,', '[ebp+var_2D]']
cmp ['ecx,', '5Ah']
jg ['short', 'loc_EFD']
movsx ['edx,', '[ebp+var_2D]']
sub ['edx,', '41h']
mov ['[ebp+var_24],', 'edx']
jmp ['short', 'loc_F76']
movsx ['eax,', '[ebp+var_2D]']
cmp ['eax,', '61h']
jl ['short', 'loc_F1B']
movsx ['ecx,', '[ebp+var_2D]']
cmp ['ecx,', '7Ah']
jg ['short', 'loc_F1B']
movsx ['edx,', '[ebp+var_2D]']
sub ['edx,', '47h']
mov ['[ebp+var_24],', 'edx']
jmp ['short', 'loc_F76']
movsx ['eax,', '[ebp+var_2D]']
cmp ['eax,', '30h']
jl ['short', 'loc_F39']
movsx ['ecx,', '[ebp+var_2D]']
cmp ['ecx,', '39h']
jg ['short', 'loc_F39']
movsx ['edx,', '[ebp+var_2D]']
add ['edx,', '4']
mov ['[ebp+var_24],', 'edx']
jmp ['short', 'loc_F76']
movsx ['eax,', '[ebp+var_2D]']
cmp ['eax,', '2Bh']
jnz ['short', 'loc_F4B']
mov ['[ebp+var_24],', '3Eh']
jmp ['short', 'loc_F76']
movsx ['ecx,', '[ebp+var_2D]']
cmp ['ecx,', '2Fh']
jnz ['short', 'loc_F5D']
mov ['[ebp+var_24],', '3Fh']
jmp ['short', 'loc_F76']
movsx ['edx,', '[ebp+var_2D]']
cmp ['edx,', '3Dh']
jnz ['short', 'loc_F6F']
mov ['[ebp+var_24],', '0FFFFFFFFh']
jmp ['short', 'loc_F76']
xor ['eax,', 'eax']
jmp ['loc_1034']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+eax*4+var_18],', 'ecx']
jmp ['loc_EC1']
cmp ['[ebp+var_18],', '0FFFFFFFFh']
jz ['short', 'loc_F91']
cmp ['[ebp+var_14],', '0FFFFFFFFh']
jnz ['short', 'loc_F98']
xor ['eax,', 'eax']
jmp ['loc_1034']
cmp ['[ebp+var_10],', '0FFFFFFFFh']
jnz ['short', 'loc_FAB']
cmp ['[ebp+var_C],', '0FFFFFFFFh']
jz ['short', 'loc_FAB']
xor ['eax,', 'eax']
jmp ['loc_1034']
cmp ['[ebp+var_C],', '0FFFFFFFFh']
jz ['short', 'loc_FBA']
mov ['[ebp+var_28],', '3']
jmp ['short', 'loc_FD0']
cmp ['[ebp+var_10],', '0FFFFFFFFh']
jz ['short', 'loc_FC9']
mov ['[ebp+var_28],', '2']
jmp ['short', 'loc_FD0']
mov ['[ebp+var_28],', '1']
mov ['edx,', '[ebp+var_18]']
shl ['edx,', '12h']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '0Ch']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_10]']
and ['ecx,', '3Fh']
shl ['ecx,', '6']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['edx,', 'eax']
mov ['[ebp+var_2C],', 'edx']
mov ['ecx,', '[ebp+var_2C]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'cl']
cmp ['[ebp+var_28],', '1']
jle ['short', 'loc_101C']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+1],', 'al']
cmp ['[ebp+var_28],', '2']
jle ['short', 'loc_1031']
mov ['edx,', '[ebp+var_2C]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+2],', 'dl']
mov ['eax,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN29']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_bufchain_init  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
pop ['ebp']
retn
endp
_bufchain_clear proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+Memory],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_10DD']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+Memory],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+Memory]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
jmp ['short', 'loc_10B3']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_bufchain_size  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+8]']
pop ['ebp']
retn
endp
_bufchain_add   proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Src],', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1149']
jmp ['loc_129B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
add ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jle ['loc_129B']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['loc_11FE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[eax+8]']
cmp ['eax,', '[edx+0Ch]']
jnb ['short', 'loc_11FE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx+0Ch]']
sub ['edx,', '[ecx+8]']
cmp ['[ebp+arg_8],', 'edx']
jge ['short', 'loc_11A2']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_11B7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx+0Ch]']
sub ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Size]']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+Size]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[eax+8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jle ['loc_1296']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '10h']
cmp ['ecx,', '200h']
jbe ['short', 'loc_1221']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '10h']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_1228']
mov ['[ebp+var_18],', '200h']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'eax']
push ['1']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '10h']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_1285']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_128D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
jmp ['loc_1158']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_bufchain_consume proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Memory],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jge ['short', 'loc_12EE']
push ['278h']
push ['offset', '$SG85911']
push ['offset', '$SG85912']
call ['__wassert']
add ['esp,', '0Ch']
cmp ['[ebp+arg_4],', '0']
jle ['loc_13A7']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_131D']
push ['27Bh']
push ['offset', '$SG85919']
push ['offset', '$SG85920']
call ['__wassert']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ecx+8]']
sub ['ecx,', '[eax+4]']
cmp ['[ebp+var_8],', 'ecx']
jl ['short', 'loc_1377']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+Memory],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Memory]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_1369']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+Memory]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
jmp ['short', 'loc_138A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+var_8]']
mov ['[ebp+arg_4],', 'edx']
jmp ['loc_12EE']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_bufchain_prefix proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ecx+8]']
sub ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+4]']
mov ['[edx],', 'eax']
pop ['ebp']
retn
endp
_bufchain_fetch proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_1433']
push ['297h']
push ['offset', '$SG85943']
push ['offset', '$SG85944']
call ['__wassert']
add ['esp,', '0Ch']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_14AF']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_145C']
push ['29Bh']
push ['offset', '$SG85951']
push ['offset', '$SG85952']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+8]']
sub ['ecx,', '[eax+4]']
cmp ['[ebp+Size],', 'ecx']
jl ['short', 'loc_147C']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+8]']
sub ['ecx,', '[eax+4]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+Size]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+Size]']
mov ['[ebp+Dst],', 'eax']
jmp ['short', 'loc_1433']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_safemalloc     proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '7FFFFFFFh']
xor ['edx,', 'edx']
div ['[ebp+Size]']
cmp ['[ebp+arg_0],', 'eax']
jbe ['short', 'loc_1506']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_152C']
mov ['eax,', '[ebp+Size]']
imul ['eax,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'eax']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_151D']
mov ['[ebp+Size],', '1']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
call ['_malloc']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1555']
push ['offset', '$SG85966']
lea ['edx,', '[ebp+Dest]']
push ['edx']
call ['_strcpy']
add ['esp,', '8']
lea ['eax,', '[ebp+Dest]']
push ['eax']
call ['_modalfatalbox']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_saferealloc    proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '7FFFFFFFh']
xor ['edx,', 'edx']
div ['[ebp+Size]']
cmp ['[ebp+arg_4],', 'eax']
jbe ['short', 'loc_15E6']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_161A']
mov ['eax,', '[ebp+Size]']
imul ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
cmp ['[ebp+Memory],', '0']
jnz ['short', 'loc_1607']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
call ['_malloc']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_161A']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Memory]']
push ['eax']
call ['_realloc']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1643']
push ['offset', '$SG85982']
lea ['ecx,', '[ebp+Dest]']
push ['ecx']
call ['_strcpy']
add ['esp,', '8']
lea ['edx,', '[ebp+Dest]']
push ['edx']
call ['_modalfatalbox']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_safefree       proc near               
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+Memory],', '0']
jz ['short', 'loc_16AD']
mov ['eax,', '[ebp+Memory]']
push ['eax']
call ['_free']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_conf_launchable proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_conf_get_int']
add ['esp,', '8']
cmp ['eax,', '4']
jnz ['short', 'loc_16E9']
push ['37h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_conf_get_str']
add ['esp,', '8']
movsx ['eax,', 'byte', 'ptr', '[eax]']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
jmp ['short', 'loc_1700']
jmp ['short', 'loc_1700']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_conf_get_str']
add ['esp,', '8']
movsx ['eax,', 'byte', 'ptr', '[eax]']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_conf_dest      proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_conf_get_int']
add ['esp,', '8']
cmp ['eax,', '4']
jnz ['short', 'loc_1740']
push ['37h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_conf_get_str']
add ['esp,', '8']
jmp ['short', 'loc_174E']
jmp ['short', 'loc_174E']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_conf_get_str']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_validate_manual_hostkey proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+Dest]']
mov ['[ebp+Str],', 'eax']
push ['offset', '$SG86007']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_strspn']
add ['esp,', '8']
add ['eax,', '[ebp+Str]']
mov ['[ebp+Str],', 'eax']
mov ['edx,', '[ebp+Str]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jz ['loc_1A23']
mov ['ecx,', '[ebp+Str]']
mov ['[ebp+Source],', 'ecx']
push ['offset', '$SG86008']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strcspn']
add ['esp,', '8']
add ['eax,', '[ebp+Str]']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_17D9']
mov ['edx,', '[ebp+Str]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
mov ['ecx,', '[ebp+Source]']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
cmp ['eax,', '2Fh']
jnz ['$not_fingerprint$86018']
push ['offset', '$SG86011']
mov ['edx,', '[ebp+Source]']
push ['edx']
call ['_strspn']
add ['esp,', '8']
mov ['ecx,', '[ebp+Source]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
test ['edx,', 'edx']
jnz ['$not_fingerprint$86018']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_1820']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '10h']
jge ['short', 'loc_184F']
mov ['ecx,', '[ebp+var_18]']
imul ['ecx,', '3']
mov ['edx,', '[ebp+Source]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', '3Ah']
jz ['short', 'loc_184B']
mov ['ecx,', '[ebp+var_18]']
imul ['ecx,', '3']
mov ['edx,', '[ebp+Source]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx+1]']
cmp ['eax,', '3Ah']
jnz ['short', 'loc_184D']
jmp ['short', '$not_fingerprint$86018']
jmp ['short', 'loc_1817']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_1861']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_18],', '0Fh']
jge ['short', 'loc_187E']
mov ['edx,', '[ebp+var_18]']
imul ['edx,', '3']
mov ['eax,', '[ebp+Source]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx+2]']
cmp ['ecx,', '3Ah']
jz ['short', 'loc_187C']
jmp ['short', '$not_fingerprint$86018']
jmp ['short', 'loc_1858']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_1890']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '2Fh']
jge ['short', 'loc_18B2']
mov ['eax,', '[ebp+Source]']
add ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
call ['_tolower']
add ['esp,', '4']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_18]']
mov ['[edx],', 'al']
jmp ['short', 'loc_1887']
mov ['eax,', '[ebp+Dest]']
mov ['byte', 'ptr', '[eax+2Fh],', '0']
mov ['eax,', '1']
jmp ['loc_1A25']
mov ['ecx,', '[ebp+Source]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_18DA']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_190F']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ah']
jz ['short', 'loc_190D']
mov ['edx,', '[ebp+var_10]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '0Dh']
jz ['short', 'loc_190D']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[edx]']
mov ['[ecx],', 'al']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_18D1']
mov ['edx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+Source]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
xor ['edx,', 'edx']
mov ['ecx,', '4']
div ['ecx']
test ['edx,', 'edx']
jnz ['$not_ssh2_blob$86037']
mov ['edx,', '[ebp+Source]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
cmp ['eax,', '8']
jbe ['$not_ssh2_blob$86037']
push ['offset', '$SG86031']
mov ['eax,', '[ebp+Source]']
push ['eax']
call ['_strspn']
add ['esp,', '8']
mov ['ecx,', '[ebp+Source]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
test ['edx,', 'edx']
jnz ['$not_ssh2_blob$86037']
mov ['[ebp+var_34],', '0']
mov ['eax,', '[ebp+var_34]']
lea ['ecx,', '[ebp+eax+var_24]']
push ['ecx']
mov ['edx,', '[ebp+Source]']
push ['edx']
call ['_base64_decode_atom']
add ['esp,', '8']
add ['eax,', '[ebp+var_34]']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '3']
jge ['short', 'loc_1993']
jmp ['$not_ssh2_blob$86037']
mov ['eax,', '[ebp+var_34]']
lea ['ecx,', '[ebp+eax+var_24]']
push ['ecx']
mov ['edx,', '[ebp+Source]']
add ['edx,', '4']
push ['edx']
call ['_base64_decode_atom']
add ['esp,', '8']
add ['eax,', '[ebp+var_34]']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '4']
jge ['short', 'loc_19B8']
jmp ['short', '$not_ssh2_blob$86037']
movzx ['eax,', '[ebp+var_24]']
shl ['eax,', '18h']
movzx ['ecx,', '[ebp+var_23]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
movzx ['edx,', '[ebp+var_22]']
shl ['edx,', '8']
or ['eax,', 'edx']
movzx ['ecx,', '[ebp+var_21]']
or ['eax,', 'ecx']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '40h']
jbe ['short', 'loc_19E2']
jmp ['short', '$not_ssh2_blob$86037']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '6']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['[ebp+var_30],', 'eax']
mov ['edx,', '[ebp+Source]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
cmp ['eax,', '[ebp+var_30]']
jnb ['short', 'loc_1A07']
jmp ['short', '$not_ssh2_blob$86037']
mov ['eax,', '[ebp+Source]']
push ['eax']
mov ['ecx,', '[ebp+Dest]']
push ['ecx']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '1']
jmp ['short', 'loc_1A25']
jmp ['loc_177E']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN30']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
