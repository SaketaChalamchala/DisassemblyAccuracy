_des3_make_context proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['88h']
push ['3']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des3_ssh1_make_context proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['88h']
push ['6']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des_make_context proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['88h']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des_ssh1_make_context proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['88h']
push ['2']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des3_free_context proc near            
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des3_key       proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+4]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+5]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+6]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+7]']
or ['eax,', 'edx']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
push ['ecx']
call ['_des_key_setup']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '88h']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Ch]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Dh]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Eh]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Fh]']
or ['eax,', 'edx']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+9]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Ah]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
or ['ecx,', 'eax']
push ['ecx']
call ['_des_key_setup']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '110h']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+14h]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+15h]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+16h]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+17h]']
or ['eax,', 'edx']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+11h]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+12h]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+13h]']
or ['ecx,', 'eax']
push ['ecx']
call ['_des_key_setup']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_key_setup  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_10],', 'ecx']
push ['1Ch']
push ['offset', '?PC1_Cbits@?1??des_key_setup@@9@9']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['_bitsel']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
push ['1Ch']
push ['offset', '?PC1_Dbits@?1??des_key_setup@@9@9']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['_bitsel']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_F83']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
cmp ['[ebp+var_1C],', '10h']
jge ['loc_1034']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', 'ds:?leftshifts@?1??des_key_setup@@9@9[edx*4]']
shl ['eax,', 'cl']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '1Ch']
sub ['edx,', 'ds:?leftshifts@?1??des_key_setup@@9@9[ecx*4]']
mov ['esi,', '[ebp+var_4]']
mov ['ecx,', 'edx']
shr ['esi,', 'cl']
or ['eax,', 'esi']
and ['eax,', '0FFFFFFFh']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_8]']
mov ['ecx,', 'ds:?leftshifts@?1??des_key_setup@@9@9[eax*4]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '1Ch']
sub ['ecx,', 'ds:?leftshifts@?1??des_key_setup@@9@9[eax*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', 'cl']
or ['edx,', 'eax']
and ['edx,', '0FFFFFFFh']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_10],', 'edx']
push ['20h']
push ['offset', '?PC2_0246@?1??des_key_setup@@9@9']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['_bitsel']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+ecx*4],', 'eax']
push ['20h']
push ['offset', '?PC2_1357@?1??des_key_setup@@9@9']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['_bitsel']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+ecx*4+40h],', 'eax']
jmp ['loc_F7A']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax+84h],', '0']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx+80h],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_bitsel         proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_110D']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_110B']
mov ['eax,', '[ebp+var_8]']
cdq
and ['edx,', '1Fh']
add ['eax,', 'edx']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '8000001Fh']
jns ['short', 'loc_10FA']
dec ['ecx']
or ['ecx,', '0FFFFFFE0h']
inc ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+eax*4]']
shr ['eax,', 'cl']
and ['eax,', '1']
or ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_10AA']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_iv        proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+80h],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+84h],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_key        proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+4]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+5]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+6]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+7]']
or ['eax,', 'edx']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
push ['ecx']
call ['_des_key_setup']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_sesskey   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_des3_key']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '198h']
push ['ecx']
call ['_des3_key']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_encrypt_blk proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_3cbc_encrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_3cbc_encrypt proc near             
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_des_cbc_encrypt']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '88h']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_des_cbc_decrypt']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '110h']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_des_cbc_encrypt']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des_cbc_encrypt proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_1357']
push ['261h']
push ['offset', '$SG6000']
push ['offset', '$SG6001']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+84h]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_1381']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '8']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_1479']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
xor ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+5]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+6]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+7]']
or ['ecx,', 'eax']
xor ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_des_encipher']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_14]']
mov ['[ecx+3],', 'dl']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'al']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+5],', 'dl']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+6],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[eax+7],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
mov ['[ebp+arg_0],', 'edx']
jmp ['loc_1378']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+80h],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+84h],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_encipher   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '4']
xor ['eax,', '[ebp+arg_8]']
and ['eax,', '0F0F0F0Fh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '4']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '10h']
xor ['eax,', '[ebp+arg_8]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '10h']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '2']
xor ['eax,', '[ebp+arg_4]']
and ['eax,', '33333333h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '8']
xor ['eax,', '[ebp+arg_4]']
and ['eax,', '0FF00FFh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '1']
xor ['eax,', '[ebp+arg_8]']
and ['eax,', '55555555h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1Fh']
or ['eax,', 'ecx']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '1Fh']
or ['edx,', 'eax']
mov ['[ebp+arg_8],', 'edx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+40h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+44h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+48h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+10h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+50h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+14h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+54h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+18h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+58h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+5Ch]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+20h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+60h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+24h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+64h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+28h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+68h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+2Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+6Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+30h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+70h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+34h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+74h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+38h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+78h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+3Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+7Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '1Fh']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1']
or ['eax,', 'ecx']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '1Fh']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '1']
or ['edx,', 'eax']
mov ['[ebp+arg_8],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1']
xor ['ecx,', '[ebp+arg_8]']
and ['ecx,', '55555555h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '1']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '8']
xor ['ecx,', '[ebp+arg_4]']
and ['ecx,', '0FF00FFh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '8']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '2']
xor ['ecx,', '[ebp+arg_4]']
and ['ecx,', '33333333h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '2']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '10h']
xor ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '10h']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '4']
xor ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0F0F0F0Fh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '4']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_cbc_decrypt proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_219D']
push ['279h']
push ['offset', '$SG6044']
push ['offset', '$SG6045']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+84h]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_21C7']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_22CB']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+5]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+6]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+7]']
or ['ecx,', 'eax']
mov ['[ebp+var_20],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_des_decipher']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_18]']
xor ['eax,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_14]']
mov ['[ecx+3],', 'dl']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'al']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+5],', 'dl']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+6],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[eax+7],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'ecx']
jmp ['loc_21BE']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+80h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+84h],', 'edx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_decipher   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '4']
xor ['eax,', '[ebp+arg_8]']
and ['eax,', '0F0F0F0Fh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '4']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '10h']
xor ['eax,', '[ebp+arg_8]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '10h']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '2']
xor ['eax,', '[ebp+arg_4]']
and ['eax,', '33333333h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '8']
xor ['eax,', '[ebp+arg_4]']
and ['eax,', '0FF00FFh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '1']
xor ['eax,', '[ebp+arg_8]']
and ['eax,', '55555555h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1Fh']
or ['eax,', 'ecx']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '1Fh']
or ['edx,', 'eax']
mov ['[ebp+arg_8],', 'edx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+3Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+7Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+38h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+78h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+34h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+74h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+30h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+70h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+2Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+6Ch]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+28h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+68h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+24h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+64h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+20h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+60h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+5Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+18h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+58h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+14h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+54h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+10h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx+50h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
xor ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[edx+48h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', 'ds:_SPboxes[eax*4]']
or ['edx,', 'ds:dword_510[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_610[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_710[ecx*4]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['edx,', 'ds:off_810[eax*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_910[ecx*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
or ['edx,', 'ds:dword_A10[eax*4]']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '3Fh']
or ['edx,', 'ds:dword_B10[ecx*4]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ecx+44h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '4']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '3Fh']
mov ['ecx,', 'ds:_SPboxes[edx*4]']
or ['ecx,', 'ds:dword_510[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_610[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '10h']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_710[eax*4]']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['ecx,', 'ds:off_810[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '8']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_910[eax*4]']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['ecx,', 'ds:dword_A10[edx*4]']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3Fh']
or ['ecx,', 'ds:dword_B10[eax*4]']
xor ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_4]']
xor ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_4]']
xor ['ecx,', '[eax+40h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1Ch']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '3Fh']
mov ['eax,', 'ds:_SPboxes[ecx*4]']
or ['eax,', 'ds:dword_510[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '10h']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_610[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_710[edx*4]']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '8']
and ['ecx,', '3Fh']
or ['eax,', 'ds:off_810[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_910[edx*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
or ['eax,', 'ds:dword_A10[ecx*4]']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '3Fh']
or ['eax,', 'ds:dword_B10[edx*4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '1Fh']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1']
or ['eax,', 'ecx']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '1Fh']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '1']
or ['edx,', 'eax']
mov ['[ebp+arg_8],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1']
xor ['ecx,', '[ebp+arg_8]']
and ['ecx,', '55555555h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '1']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '8']
xor ['ecx,', '[ebp+arg_4]']
and ['ecx,', '0FF00FFh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '8']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '2']
xor ['ecx,', '[ebp+arg_4]']
and ['ecx,', '33333333h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '2']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '10h']
xor ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '10h']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '4']
xor ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0F0F0F0Fh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '4']
xor ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_decrypt_blk proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '198h']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_3cbc_decrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_3cbc_decrypt proc near             
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '110h']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_des_cbc_decrypt']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '88h']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_des_cbc_encrypt']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_des_cbc_decrypt']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_des3_ssh2_encrypt_blk proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_cbc3_encrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_cbc3_encrypt proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_30D7']
push ['29Bh']
push ['offset', '$SG6094']
push ['offset', '$SG6095']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+84h]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_3101']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '8']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_3234']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
xor ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+5]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+6]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+7]']
or ['ecx,', 'eax']
xor ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_des_encipher']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '88h']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_des_decipher']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '110h']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['_des_encipher']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_14]']
mov ['[eax+3],', 'cl']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'dl']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5],', 'cl']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+6],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[edx+7],', 'al']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '8']
mov ['[ebp+arg_0],', 'ecx']
jmp ['loc_30F8']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+80h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+84h],', 'edx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_ssh2_decrypt_blk proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_cbc3_decrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_cbc3_decrypt proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_330D']
push ['2BDh']
push ['offset', '$SG6146']
push ['offset', '$SG6147']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+84h]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_3337']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_3477']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+5]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+6]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+7]']
or ['ecx,', 'eax']
mov ['[ebp+var_20],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '110h']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_des_decipher']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '88h']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_des_encipher']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['_des_decipher']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_18]']
xor ['edx,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_14]']
mov ['[eax+3],', 'cl']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'dl']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5],', 'cl']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+6],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[edx+7],', 'al']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '8']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'eax']
jmp ['loc_332E']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+80h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+84h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_ssh2_sdctr proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_sdctr3']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_sdctr3     proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_354A']
push ['2D9h']
push ['offset', '$SG6189']
push ['offset', '$SG6190']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+84h]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_3574']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '8']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_36C8']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_des_encipher']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '88h']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['_des_decipher']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '110h']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_des_encipher']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+var_1C]']
xor ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2],', 'cl']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+3],', 'al']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
mov ['ecx,', '[ebp+var_1C]']
xor ['ecx,', '[ebp+var_8]']
shr ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_1C]']
xor ['eax,', '[ebp+var_8]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_8]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2],', 'dl']
mov ['ecx,', '[ebp+var_1C]']
xor ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+3],', 'cl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
jnz ['short', 'loc_36C3']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
jmp ['loc_356B']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+80h],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+84h],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_ssh2_encrypt_blk proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_cbc_encrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_ssh2_decrypt_blk proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_cbc_decrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_decrypt_pubkey proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1A4h']
push ['edi']
lea ['edi,', '[ebp+var_1A4]']
mov ['ecx,', '69h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_118]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Bh]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_des_3cbc_decrypt']
add ['esp,', '0Ch']
push ['198h']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
call ['_smemclr']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1A4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_encrypt_pubkey proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1A4h']
push ['edi']
lea ['edi,', '[ebp+var_1A4]']
mov ['ecx,', '69h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_118]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Bh]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_des_3cbc_encrypt']
add ['esp,', '0Ch']
push ['198h']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
call ['_smemclr']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1A4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_decrypt_pubkey_ossh proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1A4h']
push ['edi']
lea ['edi,', '[ebp+var_1A4]']
mov ['ecx,', '69h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_118]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Bh]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+14h]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+15h]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+16h]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+17h]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+11h]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+12h]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+13h]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['[ebp+var_120],', 'ecx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['[ebp+var_11C],', 'edx']
lea ['edx,', '[ebp+var_1A0]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_des_cbc3_decrypt']
add ['esp,', '0Ch']
push ['198h']
lea ['edx,', '[ebp+var_1A0]']
push ['edx']
call ['_smemclr']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1A4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des3_encrypt_pubkey_ossh proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1A4h']
push ['edi']
lea ['edi,', '[ebp+var_1A4]']
mov ['ecx,', '69h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_1A0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_118]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Bh]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+14h]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+15h]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+16h]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+17h]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+11h]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+12h]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+13h]']
or ['eax,', 'edx']
push ['eax']
call ['_des_key_setup']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['[ebp+var_120],', 'ecx']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
mov ['[ebp+var_11C],', 'edx']
lea ['edx,', '[ebp+var_1A0]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_des_cbc3_encrypt']
add ['esp,', '0Ch']
push ['198h']
lea ['edx,', '[ebp+var_1A0]']
push ['edx']
call ['_smemclr']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1A4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_encrypt_xdmauth proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '94h']
push ['edi']
lea ['edi,', '[ebp+var_94]']
mov ['ecx,', '25h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_des_keysetup_xdmauth']
add ['esp,', '8']
lea ['edx,', '[ebp+var_90]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_des_cbc_encrypt']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '94h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_keysetup_xdmauth proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_408F']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '8']
jge ['short', 'loc_40F5']
cmp ['[ebp+var_1C],', '7']
jge ['short', 'loc_40C1']
mov ['ecx,', '[ebp+var_24]']
shl ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
or ['ecx,', 'eax']
mov ['[ebp+var_24],', 'ecx']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '8']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['ecx,', '[ebp+var_1C]']
sub ['ecx,', '7']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', 'cl']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_18]']
mov ['byte', 'ptr', '[ebp+ecx+var_10],', 'al']
mov ['ecx,', '[ebp+var_1C]']
sub ['ecx,', '7']
mov ['edx,', '7Fh']
shl ['edx,', 'cl']
not ['edx']
and ['edx,', '[ebp+var_24]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_1C]']
sub ['eax,', '7']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_4086']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C]']
shl ['edx,', '18h']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+1]']
shl ['eax,', '10h']
or ['edx,', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_C+2]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+3]']
or ['edx,', 'eax']
push ['edx']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_10]']
shl ['ecx,', '18h']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+1]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_10+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+3]']
or ['ecx,', 'edx']
push ['ecx']
call ['_des_key_setup']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_decrypt_xdmauth proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '94h']
push ['edi']
lea ['edi,', '[ebp+var_94]']
mov ['ecx,', '25h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_des_keysetup_xdmauth']
add ['esp,', '8']
lea ['edx,', '[ebp+var_90]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_des_cbc_decrypt']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '94h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_sesskey    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_des_key']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '88h']
push ['ecx']
call ['_des_key']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_encrypt_blk proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_cbc_encrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_des_decrypt_blk proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '88h']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_des_cbc_decrypt']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
