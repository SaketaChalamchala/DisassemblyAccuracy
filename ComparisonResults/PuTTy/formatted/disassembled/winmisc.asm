_platform_get_x_display proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['offset', '$SG86889']
call ['_getenv']
add ['esp,', '4']
push ['eax']
call ['_dupstr']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_filename_from_str proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['4']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_dupstr']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_filename_copy  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_filename_from_str']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_filename_to_str proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax]']
pop ['ebp']
retn
endp
_filename_equal proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_strcmp']
add ['esp,', '8']
neg ['eax']
sbb ['eax,', 'eax']
add ['eax,', '1']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_filename_is_null proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movsx ['eax,', 'byte', 'ptr', '[ecx]']
neg ['eax']
sbb ['eax,', 'eax']
add ['eax,', '1']
pop ['ebp']
retn
endp
_filename_free  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_filename_serialise proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Dest],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Dest],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+Dest],', '0']
jz ['short', 'loc_1DE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+Dest]']
push ['edx']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_filename_deserialise proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Buf],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+Buf],', 'eax']
mov ['ecx,', '[ebp+MaxCount]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Buf]']
push ['edx']
call ['_memchr']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_231']
xor ['eax,', 'eax']
jmp ['short', 'loc_251']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+Buf]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+Buf]']
push ['eax']
call ['_filename_from_str']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_smemclr        proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+ptr],', '0']
jz ['short', 'loc_287']
cmp ['[ebp+cnt],', '0']
jbe ['short', 'loc_287']
mov ['eax,', '[ebp+cnt]']
push ['eax']
mov ['ecx,', '[ebp+ptr]']
push ['ecx']
call ['_RtlSecureZeroMemory']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_get_username   proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_1D],', '0']
mov ['[ebp+var_14],', '0']
cmp ['ds:?tried_usernameex@?2??get_username@@9@9,', '0']
jnz ['short', 'loc_310']
push ['offset', '$SG86955']
call ['_load_system32_dll']
add ['esp,', '4']
mov ['[ebp+hModule],', 'eax']
cmp ['[ebp+hModule],', '0']
jz ['short', 'loc_2F6']
mov ['esi,', 'esp']
push ['offset', '$SG86958']
mov ['eax,', '[ebp+hModule]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetProcAddress@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_2FD']
mov ['[ebp+var_24],', '0']
mov ['ecx,', '[ebp+var_24]']
mov ['ds:?p_GetUserNameExA@?1??get_username@@9@9,', 'ecx']
mov ['ds:?tried_usernameex@?2??get_username@@9@9,', '1']
cmp ['ds:?p_GetUserNameExA@?1??get_username@@9@9,', '0']
jz ['loc_3D9']
mov ['[ebp+pcbBuffer],', '0']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+pcbBuffer]']
push ['edx']
push ['0']
push ['8']
call ['ds:?p_GetUserNameExA@?1??get_username@@9@9']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['1']
mov ['eax,', '[ebp+pcbBuffer]']
push ['eax']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_1D],', '1']
mov ['[ebp+Str],', 'eax']
cmp ['[ebp+var_1D],', '0']
jnz ['short', 'loc_363']
push ['offset', '$LN16']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+pcbBuffer]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
push ['8']
call ['ds:?p_GetUserNameExA@?1??get_username@@9@9']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_3BA']
cmp ['[ebp+var_1D],', '0']
jnz ['short', 'loc_39B']
push ['offset', '$LN16']
call ['__RTC_UninitUse']
add ['esp,', '4']
push ['40h']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_strchr']
add ['esp,', '8']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_3B8']
mov ['edx,', '[ebp+var_1C]']
mov ['byte', 'ptr', '[edx],', '0']
jmp ['short', 'loc_3D9']
cmp ['[ebp+var_1D],', '0']
jnz ['short', 'loc_3CD']
push ['offset', '$LN16']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
cmp ['[ebp+var_14],', '0']
jnz ['loc_471']
mov ['[ebp+pcbBuffer],', '0']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+pcbBuffer]']
push ['ecx']
push ['0']
call ['dword', 'ptr', 'ds:__imp__GetUserNameA@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_40A']
mov ['[ebp+pcbBuffer],', '100h']
push ['1']
mov ['edx,', '[ebp+pcbBuffer]']
push ['edx']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_1D],', '1']
mov ['[ebp+Str],', 'eax']
cmp ['[ebp+var_1D],', '0']
jnz ['short', 'loc_432']
push ['offset', '$LN16']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+pcbBuffer]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetUserNameA@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_471']
cmp ['[ebp+var_1D],', '0']
jnz ['short', 'loc_465']
push ['offset', '$LN16']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_492']
cmp ['[ebp+var_1D],', '0']
jnz ['short', 'loc_48A']
push ['offset', '$LN16']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_499']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_init_winver    proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
push ['94h']
push ['0']
push ['offset', '_osVersion']
call ['_memset']
add ['esp,', '0Ch']
mov ['dword', 'ptr', 'ds:_osVersion,', '94h']
mov ['esi,', 'esp']
push ['offset', '_osVersion']
call ['dword', 'ptr', 'ds:__imp__GetVersionExA@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_load_system32_dll proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+uSize],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+lpLibFileName],', 'eax']
cmp ['ds:?sysdir@?1??load_system32_dll@@9@9,', '0']
jnz ['short', 'loc_5A1']
mov ['[ebp+uSize],', '0']
mov ['eax,', '[ebp+uSize]']
imul ['eax,', '3']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
add ['eax,', '200h']
mov ['[ebp+uSize],', 'eax']
push ['1']
mov ['eax,', '[ebp+uSize]']
push ['eax']
mov ['ecx,', 'ds:?sysdir@?1??load_system32_dll@@9@9']
push ['ecx']
call ['_saferealloc']
add ['esp,', '0Ch']
mov ['ds:?sysdir@?1??load_system32_dll@@9@9,', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+uSize]']
push ['edx']
mov ['eax,', 'ds:?sysdir@?1??load_system32_dll@@9@9']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetSystemDirectoryA@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+uSize]']
jge ['short', 'loc_550']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['offset', '$SG86997']
mov ['eax,', 'ds:?sysdir@?1??load_system32_dll@@9@9']
push ['eax']
call ['_dupcat']
add ['esp,', '10h']
mov ['[ebp+lpLibFileName],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+lpLibFileName]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__LoadLibraryA@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+lpLibFileName]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_win_strerror   proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '10014h']
call ['__chkstk']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_10014]']
mov ['ecx,', '4005h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['ds:_errstrings,', '0']
jnz ['short', 'loc_63E']
push ['offset', '_errstring_compare']
call ['_newtree234']
add ['esp,', '4']
mov ['ds:_errstrings,', 'eax']
push ['offset', '_errstring_find']
lea ['eax,', '[ebp+dwMessageId]']
push ['eax']
mov ['ecx,', 'ds:_errstrings']
push ['ecx']
call ['_find234']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['loc_740']
push ['8']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+dwMessageId]']
mov ['[edx],', 'eax']
mov ['esi,', 'esp']
push ['0']
push ['0FFFFh']
lea ['ecx,', '[ebp+Buffer]']
push ['ecx']
push ['400h']
mov ['edx,', '[ebp+dwMessageId]']
push ['edx']
push ['0']
push ['1200h']
call ['dword', 'ptr', 'ds:__imp__FormatMessageA@28']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_6D1']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetLastError@0']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
push ['offset', '$SG87037']
lea ['eax,', '[ebp+Buffer]']
push ['eax']
call ['_sprintf']
add ['esp,', '0Ch']
jmp ['short', 'loc_710']
lea ['ecx,', '[ebp+Buffer]']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_10014],', 'eax']
cmp ['[ebp+var_10014],', '0']
jle ['short', 'loc_710']
mov ['edx,', '[ebp+var_10014]']
movsx ['eax,', '[ebp+edx+var_1000D]']
cmp ['eax,', '0Ah']
jnz ['short', 'loc_710']
mov ['ecx,', '[ebp+var_10014]']
mov ['[ebp+ecx+var_1000D],', '0']
lea ['edx,', '[ebp+Buffer]']
push ['edx']
mov ['eax,', '[ebp+dwMessageId]']
push ['eax']
push ['offset', '$SG87041']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', 'ds:_errstrings']
push ['eax']
call ['_add234']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[ecx+4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '10014h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_errstring_find proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_7C9']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_7DE']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax]']
jle ['short', 'loc_7DC']
mov ['eax,', '1']
jmp ['short', 'loc_7DE']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_errstring_compare proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_errstring_find']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_fontspec_new   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['10h']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_dupstr']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_fontspec_copy  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_fontspec_new']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_fontspec_free  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_fontspec_serialise proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Dest],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Dest],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+Dest],', '0']
jz ['loc_9F0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+Dest]']
push ['edx']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sar ['ecx,', '18h']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sar ['ecx,', '10h']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sar ['ecx,', '8']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+2],', 'cl']
mov ['eax,', '[ebp+Dest]']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+4]']
mov ['[eax+3],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sar ['ecx,', '18h']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sar ['ecx,', '10h']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+5],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sar ['ecx,', '8']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+6],', 'cl']
mov ['eax,', '[ebp+Dest]']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+8]']
mov ['[eax+7],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sar ['ecx,', '18h']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+8],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sar ['ecx,', '10h']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+9],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sar ['ecx,', '8']
mov ['edx,', '[ebp+Dest]']
add ['edx,', '[ebp+var_8]']
mov ['[edx+0Ah],', 'cl']
mov ['eax,', '[ebp+Dest]']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+0Ch]']
mov ['[eax+0Bh],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '0Ch']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_fontspec_deserialise proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+Buf],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+Buf],', 'eax']
cmp ['[ebp+arg_4],', '0Dh']
jge ['short', 'loc_A2F']
xor ['eax,', 'eax']
jmp ['loc_AFA']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '0Ch']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Buf]']
push ['edx']
call ['_memchr']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_A54']
xor ['eax,', 'eax']
jmp ['loc_AFA']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+Buf]']
add ['ecx,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+9]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Ah]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
or ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7]']
or ['edx,', 'ecx']
push ['edx']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
shl ['eax,', '18h']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
or ['eax,', 'edx']
push ['eax']
mov ['eax,', '[ebp+Buf]']
push ['eax']
call ['_fontspec_new']
add ['esp,', '10h']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_RtlSecureZeroMemory proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+ptr]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+cnt],', '0']
jz ['short', 'loc_B41']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+cnt]']
sub ['eax,', '1']
mov ['[ebp+cnt],', 'eax']
jmp ['short', 'loc_B21']
mov ['eax,', '[ebp+ptr]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
