_serial_init    proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+lpFileName],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+hFile],', 'eax']
mov ['[ebp+var_4],', 'eax']
push ['1Ch']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'edx']
push ['37h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_conf_get_str']
add ['esp,', '8']
mov ['[ebp+Str],', 'eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
push ['offset', '$SG85680']
call ['_dupprintf']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_logevent']
add ['esp,', '8']
push ['5Ch']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strchr']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_37D']
mov ['[ebp+var_1C],', 'offset', '$SG85682']
jmp ['short', 'loc_384']
mov ['[ebp+var_1C],', 'offset', '$SG85683']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
push ['offset', '$SG85684']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+lpFileName],', 'eax']
mov ['esi,', 'esp']
push ['0']
push ['40000000h']
push ['3']
push ['0']
push ['0']
push ['0C0000000h']
mov ['edx,', '[ebp+lpFileName]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__CreateFileA@28']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+hFile],', 'eax']
mov ['eax,', '[ebp+lpFileName]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
cmp ['[ebp+hFile],', '0FFFFFFFFh']
jnz ['short', 'loc_3E0']
mov ['eax,', 'offset', '$SG85690']
jmp ['loc_466']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+hFile]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_serial_configure']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_402']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_466']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+hFile]']
mov ['[ecx],', 'edx']
push ['1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['offset', '_serial_sentdata']
mov ['ecx,', '[ebp+hFile]']
push ['ecx']
call ['_handle_output_new']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
push ['7']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['offset', '_serial_gotdata']
mov ['ecx,', '[ebp+hFile]']
push ['ecx']
call ['_handle_input_new']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_dupstr']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_update_specials_menu']
add ['esp,', '4']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_gotdata proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_handle_get_privdata']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_503']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_4B0']
mov ['[ebp+var_8],', 'offset', '$SG85573']
jmp ['short', 'loc_4B7']
mov ['[ebp+var_8],', 'offset', '$SG85575']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_serial_terminate']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_notify_remote_exit']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['offset', '$SG85576']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_connection_fatal']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jmp ['short', 'loc_51C']
jmp ['short', 'loc_51C']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_from_backend']
add ['esp,', '10h']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_terminate proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_55E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_handle_free']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jz ['short', 'loc_580']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['_handle_free']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx],', '0FFFFFFFFh']
jz ['short', 'loc_5C4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_5A6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__ClearCommBreak@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__CloseHandle@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0FFFFFFFFh']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_serial_sentdata proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_handle_get_privdata']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_650']
mov ['[ebp+var_8],', 'offset', '$SG85588']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_serial_terminate']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_notify_remote_exit']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['offset', '$SG85589']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_connection_fatal']
add ['esp,', '0Ch']
jmp ['short', 'loc_659']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_configure proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '58h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '16h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+DCB]']
push ['eax']
mov ['ecx,', '[ebp+hFile]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetCommState@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_9F9']
mov ['edx,', '[ebp+DCB._bf8]']
or ['edx,', '1']
mov ['[ebp+DCB._bf8],', 'edx']
mov ['eax,', '[ebp+DCB._bf8]']
and ['eax,', '0FFFFFFCFh']
or ['eax,', '10h']
mov ['[ebp+DCB._bf8],', 'eax']
mov ['ecx,', '[ebp+DCB._bf8]']
and ['ecx,', '0FFFFFFBFh']
mov ['[ebp+DCB._bf8],', 'ecx']
mov ['edx,', '[ebp+DCB._bf8]']
and ['edx,', '0FFFFFF7Fh']
mov ['[ebp+DCB._bf8],', 'edx']
mov ['eax,', '[ebp+DCB._bf8]']
and ['eax,', '0FFFFFEFFh']
mov ['[ebp+DCB._bf8],', 'eax']
mov ['ecx,', '[ebp+DCB._bf8]']
and ['ecx,', '0FFFFFDFFh']
mov ['[ebp+DCB._bf8],', 'ecx']
mov ['edx,', '[ebp+DCB._bf8]']
and ['edx,', '0FFFFFBFFh']
mov ['[ebp+DCB._bf8],', 'edx']
mov ['eax,', '[ebp+DCB._bf8]']
and ['eax,', '0FFFFF7FFh']
mov ['[ebp+DCB._bf8],', 'eax']
mov ['ecx,', '[ebp+DCB._bf8]']
and ['ecx,', '0FFFFCFFFh']
or ['ecx,', '1000h']
mov ['[ebp+DCB._bf8],', 'ecx']
mov ['edx,', '[ebp+DCB._bf8]']
and ['edx,', '0FFFFBFFFh']
mov ['[ebp+DCB._bf8],', 'edx']
mov ['eax,', '[ebp+DCB._bf8]']
and ['eax,', '0FFFFFFFBh']
mov ['[ebp+DCB._bf8],', 'eax']
mov ['ecx,', '[ebp+DCB._bf8]']
and ['ecx,', '0FFFFFFF7h']
mov ['[ebp+DCB._bf8],', 'ecx']
push ['38h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+DCB.BaudRate],', 'eax']
mov ['eax,', '[ebp+DCB.BaudRate]']
push ['eax']
push ['offset', '$SG85604']
call ['_dupprintf']
add ['esp,', '8']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
push ['39h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+DCB.ByteSize],', 'al']
movzx ['eax,', '[ebp+DCB.ByteSize]']
push ['eax']
push ['offset', '$SG85605']
call ['_dupprintf']
add ['esp,', '8']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
push ['3Ah']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '2']
jz ['short', 'loc_7DE']
cmp ['[ebp+var_50],', '3']
jz ['short', 'loc_7EB']
cmp ['[ebp+var_50],', '4']
jz ['short', 'loc_7F8']
jmp ['short', 'loc_805']
mov ['[ebp+DCB.StopBits],', '0']
mov ['[ebp+var_4C],', 'offset', '$SG85611']
jmp ['short', 'loc_80F']
mov ['[ebp+DCB.StopBits],', '1']
mov ['[ebp+var_4C],', 'offset', '$SG85613']
jmp ['short', 'loc_80F']
mov ['[ebp+DCB.StopBits],', '2']
mov ['[ebp+var_4C],', 'offset', '$SG85615']
jmp ['short', 'loc_80F']
mov ['eax,', 'offset', '$SG85617']
jmp ['loc_9FB']
mov ['eax,', '[ebp+var_4C]']
push ['eax']
push ['offset', '$SG85618']
call ['_dupprintf']
add ['esp,', '8']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
push ['3Bh']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '4']
ja ['short', 'loc_8A2']
mov ['eax,', '[ebp+var_54]']
jmp ['ds:$LN29[eax*4]']
mov ['[ebp+DCB.Parity],', '0']
mov ['[ebp+var_4C],', 'offset', '$SG85624']
jmp ['short', 'loc_8A2']
mov ['[ebp+DCB.Parity],', '1']
mov ['[ebp+var_4C],', 'offset', '$SG85626']
jmp ['short', 'loc_8A2']
mov ['[ebp+DCB.Parity],', '2']
mov ['[ebp+var_4C],', 'offset', '$SG85628']
jmp ['short', 'loc_8A2']
mov ['[ebp+DCB.Parity],', '3']
mov ['[ebp+var_4C],', 'offset', '$SG85630']
jmp ['short', 'loc_8A2']
mov ['[ebp+DCB.Parity],', '4']
mov ['[ebp+var_4C],', 'offset', '$SG85632']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
push ['offset', '$SG85633']
call ['_dupprintf']
add ['esp,', '8']
mov ['[ebp+var_48],', 'eax']
mov ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_logevent']
add ['esp,', '8']
mov ['edx,', '[ebp+var_48]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
push ['3Ch']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '3']
ja ['short', 'loc_95F']
mov ['ecx,', '[ebp+var_58]']
jmp ['ds:$LN30[ecx*4]']
mov ['[ebp+var_4C],', 'offset', '$SG85639']
jmp ['short', 'loc_95F']
mov ['edx,', '[ebp+DCB._bf8]']
or ['edx,', '200h']
mov ['[ebp+DCB._bf8],', 'edx']
mov ['eax,', '[ebp+DCB._bf8]']
or ['eax,', '100h']
mov ['[ebp+DCB._bf8],', 'eax']
mov ['[ebp+var_4C],', 'offset', '$SG85641']
jmp ['short', 'loc_95F']
mov ['ecx,', '[ebp+DCB._bf8]']
and ['ecx,', '0FFFFCFFFh']
or ['ecx,', '2000h']
mov ['[ebp+DCB._bf8],', 'ecx']
mov ['edx,', '[ebp+DCB._bf8]']
or ['edx,', '4']
mov ['[ebp+DCB._bf8],', 'edx']
mov ['[ebp+var_4C],', 'offset', '$SG85643']
jmp ['short', 'loc_95F']
mov ['eax,', '[ebp+DCB._bf8]']
and ['eax,', '0FFFFFFCFh']
or ['eax,', '20h']
mov ['[ebp+DCB._bf8],', 'eax']
mov ['ecx,', '[ebp+DCB._bf8]']
or ['ecx,', '8']
mov ['[ebp+DCB._bf8],', 'ecx']
mov ['[ebp+var_4C],', 'offset', '$SG85645']
mov ['edx,', '[ebp+var_4C]']
push ['edx']
push ['offset', '$SG85646']
call ['_dupprintf']
add ['esp,', '8']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_logevent']
add ['esp,', '8']
mov ['eax,', '[ebp+var_48]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+DCB]']
push ['ecx']
mov ['edx,', '[ebp+hFile]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SetCommState@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_9B4']
mov ['eax,', 'offset', '$SG85648']
jmp ['short', 'loc_9FB']
mov ['[ebp+CommTimeouts.ReadIntervalTimeout],', '1']
mov ['[ebp+CommTimeouts.ReadTotalTimeoutMultiplier],', '0']
mov ['[ebp+CommTimeouts.ReadTotalTimeoutConstant],', '0']
mov ['[ebp+CommTimeouts.WriteTotalTimeoutMultiplier],', '0']
mov ['[ebp+CommTimeouts.WriteTotalTimeoutConstant],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+CommTimeouts]']
push ['eax']
mov ['ecx,', '[ebp+hFile]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SetCommTimeouts@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_9F9']
mov ['eax,', 'offset', '$SG85650']
jmp ['short', 'loc_9FB']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN28']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_free    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_serial_terminate']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_expire_timer_context']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_reconfig proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_serial_configure']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_send    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_B46']
xor ['eax,', 'eax']
jmp ['short', 'loc_B69']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_handle_write']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_sendbuffer proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+10h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_size    proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_serial_special proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_C17']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_C17']
push ['offset', '$SG85753']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SetCommBreak@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['offset', '_serbreak_timer']
push ['190h']
call ['_schedule_timer']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+18h],', '1']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serbreak_timer proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+14h]']
jnz ['short', 'loc_C80']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_C80']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__ClearCommBreak@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+18h],', '0']
push ['offset', '$SG85743']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_logevent']
add ['esp,', '8']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_get_specials proc near          
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?specials@?1??serial_get_specials@@9@9']
pop ['ebp']
retn
endp
_serial_connected proc near             
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '1']
pop ['ebp']
retn
endp
_serial_sendok  proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '1']
pop ['ebp']
retn
endp
_serial_unthrottle proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jz ['short', 'loc_CF5']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_handle_unthrottle']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_ldisc   proc near               
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
_serial_provide_ldisc proc near         
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_serial_provide_logctx proc near        
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_serial_exitcode proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0FFFFFFFFh']
jz ['short', 'loc_D58']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_D5D']
jmp ['short', 'loc_D5D']
mov ['eax,', '7FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_serial_cfg_info proc near              
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
