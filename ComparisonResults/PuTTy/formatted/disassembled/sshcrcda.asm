_crcda_make_context proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['8']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '1000h']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_crcda_free_context proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_13A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_detect_attack  proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '40000h']
ja ['short', 'loc_18C']
mov ['eax,', '[ebp+arg_8]']
xor ['edx,', 'edx']
mov ['ecx,', '8']
div ['ecx']
test ['edx,', 'edx']
jz ['short', 'loc_1A0']
push ['72h']
push ['offset', '$SG5977']
push ['offset', '$SG5978']
call ['__wassert']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_1B4']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '2']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '3']
imul ['eax,', '3']
shr ['eax,', '1']
cmp ['[ebp+var_10],', 'eax']
jnb ['short', 'loc_1C6']
jmp ['short', 'loc_1AB']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_1EF']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+4],', 'eax']
push ['2']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_safemalloc']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_21F']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[edx+4]']
jbe ['short', 'loc_21F']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
push ['2']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
call ['_saferealloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
cmp ['[ebp+arg_8],', '38h']
ja ['loc_2F6']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_23A']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+arg_8]']
cmp ['[ebp+var_14],', 'ecx']
jnb ['loc_2EF']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_28F']
push ['8']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_28F']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_check_crc']
add ['esp,', '10h']
test ['eax,', 'eax']
jz ['short', 'loc_28D']
mov ['eax,', '1']
jmp ['loc_4AB']
jmp ['short', 'loc_28F']
jmp ['short', 'loc_2EF']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_2A0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[ebp+var_14]']
jnb ['short', 'loc_2EA']
push ['8']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_2E8']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_check_crc']
add ['esp,', '10h']
test ['eax,', 'eax']
jz ['short', 'loc_2E6']
mov ['eax,', '1']
jmp ['loc_4AB']
jmp ['short', 'loc_2E8']
jmp ['short', 'loc_2EA']
jmp ['short', 'loc_297']
jmp ['loc_231']
xor ['eax,', 'eax']
jmp ['loc_4AB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shl ['eax,', '1']
push ['eax']
push ['0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_35B']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
sub ['eax,', '1']
and ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['edx,', '0FFFEh']
mov ['[eax+ecx*2],', 'dx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_37C']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '8']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
cmp ['[ebp+var_14],', 'eax']
jnb ['loc_4A9']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '18h']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
and ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_3D9']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
and ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
cmp ['edx,', '0FFFFh']
jz ['loc_494']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
cmp ['eax,', '0FFFEh']
jnz ['short', 'loc_443']
push ['8']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_441']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_check_crc']
add ['esp,', '10h']
test ['eax,', 'eax']
jz ['short', 'loc_43F']
mov ['eax,', '1']
jmp ['short', 'loc_4AB']
jmp ['short', 'loc_441']
jmp ['short', 'loc_494']
jmp ['short', 'loc_48F']
push ['8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_48F']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_check_crc']
add ['esp,', '10h']
test ['eax,', 'eax']
jz ['short', 'loc_48D']
mov ['eax,', '1']
jmp ['short', 'loc_4AB']
jmp ['short', 'loc_48F']
jmp ['short', 'loc_494']
jmp ['loc_3C5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_8]']
mov ['ax,', 'word', 'ptr', '[ebp+var_C]']
mov ['[ecx+edx*2],', 'ax']
jmp ['loc_36A']
xor ['eax,', 'eax']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_check_crc      proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_51C']
push ['8']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_51C']
push ['offset', '_ONE']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_crc_update']
add ['esp,', '8']
push ['offset', '_ZERO']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_crc_update']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_52D']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '8']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
cmp ['[ebp+var_10],', 'eax']
jnb ['short', 'loc_596']
push ['8']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_572']
push ['offset', '_ONE']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_crc_update']
add ['esp,', '8']
push ['offset', '_ZERO']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_crc_update']
add ['esp,', '8']
jmp ['short', 'loc_594']
push ['offset', '_ZERO']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_crc_update']
add ['esp,', '8']
push ['offset', '_ZERO']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_crc_update']
add ['esp,', '8']
jmp ['short', 'loc_524']
xor ['eax,', 'eax']
cmp ['[ebp+var_8],', '0']
setz ['al']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_crc_update     proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_crc32_update']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
