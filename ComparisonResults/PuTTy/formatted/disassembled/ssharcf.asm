_arcfour_block  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[edx]']
mov ['byte', 'ptr', '[ebp+var_C+2],', 'al']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ecx+1]']
mov ['byte', 'ptr', '[ebp+var_C+1],', 'dl']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_12A']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['loc_1CA']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+2]']
add ['edx,', '1']
and ['edx,', '0FFh']
mov ['byte', 'ptr', '[ebp+var_C+2],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+1]']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_C+2]']
mov ['edx,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx]']
add ['eax,', 'ecx']
and ['eax,', '0FFh']
mov ['byte', 'ptr', '[ebp+var_C+1],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+2]']
mov ['eax,', '[ebp+var_10]']
mov ['cl,', '[eax+edx]']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+1]']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+2]']
mov ['ecx,', '[ebp+var_10]']
mov ['esi,', '[ebp+var_10]']
mov ['dl,', '[esi+edx]']
mov ['[ecx+eax],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+1]']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_C+3]']
mov ['[ecx+eax],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+2]']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+1]']
mov ['ecx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax]']
add ['edx,', 'eax']
and ['edx,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['ecx,', 'edx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_8]']
mov ['[edx],', 'cl']
jmp ['loc_121']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_C+2]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_C+1]']
mov ['[edx+1],', 'al']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_arcfour_make_context proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['102h']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_arcfour_free_context proc near         
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_arcfour128_key proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
push ['10h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_arcfour_setkey']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_arcfour_stir']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_arcfour_setkey proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '11Ch']
push ['edi']
lea ['edi,', '[ebp+var_11C]']
mov ['ecx,', '47h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+var_114],', 'eax']
cmp ['[ebp+arg_8],', '100h']
jbe ['short', 'loc_2AF']
push ['26h']
push ['offset', '$SG5953']
push ['offset', '$SG5954']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+1],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['[ebp+var_118],', '0']
jmp ['short', 'loc_2D7']
mov ['ecx,', '[ebp+var_118]']
add ['ecx,', '1']
mov ['[ebp+var_118],', 'ecx']
cmp ['[ebp+var_118],', '100h']
jnb ['short', 'loc_317']
mov ['edx,', '[ebp+var_114]']
add ['edx,', '[ebp+var_118]']
mov ['al,', 'byte', 'ptr', '[ebp+var_118]']
mov ['[edx],', 'al']
mov ['eax,', '[ebp+var_118]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['ecx,', '[ebp+var_118]']
mov ['eax,', '[ebp+arg_4]']
mov ['dl,', '[eax+edx]']
mov ['[ebp+ecx+var_10C],', 'dl']
jmp ['short', 'loc_2C8']
mov ['[ebp+var_11C],', '0']
mov ['[ebp+var_118],', '0']
jmp ['short', 'loc_33C']
mov ['eax,', '[ebp+var_118]']
add ['eax,', '1']
mov ['[ebp+var_118],', 'eax']
cmp ['[ebp+var_118],', '100h']
jnb ['short', 'loc_3BC']
mov ['ecx,', '[ebp+var_114]']
add ['ecx,', '[ebp+var_118]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
add ['edx,', '[ebp+var_11C]']
mov ['eax,', '[ebp+var_118]']
movzx ['ecx,', '[ebp+eax+var_10C]']
add ['edx,', 'ecx']
and ['edx,', '0FFh']
mov ['[ebp+var_11C],', 'edx']
mov ['edx,', '[ebp+var_114]']
add ['edx,', '[ebp+var_118]']
mov ['al,', '[edx]']
mov ['[ebp+var_5],', 'al']
mov ['ecx,', '[ebp+var_114]']
add ['ecx,', '[ebp+var_118]']
mov ['edx,', '[ebp+var_114]']
add ['edx,', '[ebp+var_11C]']
mov ['al,', '[edx]']
mov ['[ecx],', 'al']
mov ['ecx,', '[ebp+var_114]']
add ['ecx,', '[ebp+var_11C]']
mov ['dl,', '[ebp+var_5]']
mov ['[ecx],', 'dl']
jmp ['loc_32D']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '11Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_arcfour_stir   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['1']
push ['600h']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
push ['600h']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
push ['600h']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_arcfour_block']
add ['esp,', '0Ch']
push ['600h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_smemclr']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_arcfour256_key proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
push ['20h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_arcfour_setkey']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_arcfour_stir']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_arcfour_iv     proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
