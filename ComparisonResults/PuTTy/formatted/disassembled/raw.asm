_raw_log        proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
push ['100h']
lea ['ecx,', '[ebp+var_10C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_sk_getaddr']
add ['esp,', '0Ch']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_136']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_10C]']
push ['ecx']
push ['offset', '$SG85581']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+var_114],', 'eax']
jmp ['short', 'loc_154']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
lea ['eax,', '[ebp+var_10C]']
push ['eax']
push ['offset', '$SG85583']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+var_114],', 'eax']
mov ['ecx,', '[ebp+var_114]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['_logevent']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_114]']
push ['ecx']
call ['_safefree']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_closing    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_25D']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_230']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_notify_remote_exit']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_logevent']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG85606']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_connection_fatal']
add ['esp,', '0Ch']
jmp ['short', 'loc_2CB']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['short', 'loc_2B5']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_from_backend_eof']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_2B5']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jnz ['short', 'loc_2B5']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_2AB']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+18h],', '1']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '1']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_raw_check_close']
add ['esp,', '4']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_check_close proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_334']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+18h],', '0']
jz ['short', 'loc_334']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_334']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_notify_remote_exit']
add ['esp,', '4']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_raw_receive    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_c_write']
add ['esp,', '0Ch']
mov ['eax,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_c_write        proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['_from_backend']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
xor ['ecx,', 'ecx']
cmp ['[ebp+var_4],', '1000h']
setnle ['cl']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_sent       proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+0Ch],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_init       proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
push ['1Ch']
push ['1']
call ['_safemalloc']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax],', 'offset', '?fn_table@?1??raw_init@@9@9']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+10h],', 'eax']
push ['3']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_conf_get_int']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '1']
jnz ['short', 'loc_4BE']
mov ['[ebp+var_20],', 'offset', '$SG85660']
jmp ['short', 'loc_4DA']
cmp ['[ebp+var_10],', '2']
jnz ['short', 'loc_4CD']
mov ['[ebp+var_24],', 'offset', '$SG85661']
jmp ['short', 'loc_4D4']
mov ['[ebp+var_24],', 'offset', '$SG85662']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
push ['offset', '$SG85663']
call ['_dupprintf']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
call ['_logevent']
add ['esp,', '8']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['_name_lookup']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_sk_addr_error']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_559']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_sk_addr_free']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_628']
cmp ['[ebp+arg_10],', '0']
jge ['short', 'loc_566']
mov ['[ebp+arg_10],', '17h']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
push ['1']
push ['0']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_new_connection']
add ['esp,', '24h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+4],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+1Ch]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_5C4']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_628']
push ['9']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_conf_get_str']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_626']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
push ['eax']
call ['_safefree']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_dupstr']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'eax']
push ['3Ah']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_host_strrchr']
add ['esp,', '8']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_626']
mov ['edx,', '[ebp+var_1C]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_free       proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_677']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_safefree']
add ['esp,', '4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_reconfig   proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_raw_send       proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_6CB']
xor ['eax,', 'eax']
jmp ['short', 'loc_6FF']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_sendbuffer proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+0Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_size       proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_raw_special    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0Ch']
jnz ['short', 'loc_7A3']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_7A3']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+18h],', '1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_raw_check_close']
add ['esp,', '4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_get_specials proc near             
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
_raw_connected  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[ecx+4],', '0']
setnz ['al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_sendok     proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '1']
pop ['ebp']
retn
endp
_raw_unthrottle proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
xor ['ecx,', 'ecx']
cmp ['[ebp+arg_4],', '1000h']
setnle ['cl']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_ldisc      proc near               
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_86B']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_872']
mov ['eax,', '1']
jmp ['short', 'loc_874']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
_raw_provide_ldisc proc near            
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_raw_provide_logctx proc near           
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
_raw_exitcode   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_8BD']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_8D1']
jmp ['short', 'loc_8D1']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_8CF']
mov ['eax,', '7FFFFFFFh']
jmp ['short', 'loc_8D1']
jmp ['short', 'loc_8D1']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_raw_cfg_info   proc near               
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
