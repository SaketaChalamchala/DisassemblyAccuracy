.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 226F89989C51381C6CEB94A1222943B2
.data:00000000 ; Input CRC32 : 25BAFABB
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winnps.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG88076        db 'Error while listening to named pipe: %s',0
.data:00000000                                         ; DATA XREF: _named_pipe_accept_loop+121o
.data:00000028 ; char _SG88103[]
.data:00000028 $SG88103        db '\\.\pipe\',0        ; DATA XREF: _new_named_pipe_listener+5Fo
.data:00000032                 align 4
.data:00000034 ; wchar_t _SG88104
.data:00000034 $SG88104:                               ; DATA XREF: _new_named_pipe_listener+79o
.data:00000034                 unicode 0, <..\..\winnps.c>,0
.data:00000052                 align 8
.data:00000058 ; wchar_t _SG88105
.data:00000058 $SG88105:                               ; DATA XREF: _new_named_pipe_listener+7Eo
.data:00000058                 unicode 0, <strncmp(pipename, "\\\\.\\pipe\\", 9) == 0>,0
.data:000000AE                 align 10h
.data:000000B0 ; wchar_t _SG88108
.data:000000B0 $SG88108:                               ; DATA XREF: _new_named_pipe_listener+A5o
.data:000000B0                 unicode 0, <..\..\winnps.c>,0
.data:000000CE                 align 10h
.data:000000D0 ; wchar_t _SG88109
.data:000000D0 $SG88109:                               ; DATA XREF: _new_named_pipe_listener+AAo
.data:000000D0                 unicode 0, <strchr(pipename + 9, >
.data:000000D0                 dw 27h
.data:000000D0                 unicode 0, <\\>
.data:000000D0                 dw 27h
.data:000000D0                 unicode 0, <) == NULL>,0
.data:00000116                 align 4
.data:00000118 $SG88113        db 'unable to create named pipe ',27h,'%s',27h,': %s',0
.data:00000118                                         ; DATA XREF: _new_named_pipe_listener+111o
.data:0000013D                 align 10h
.data:0000013D _data           ends
.data:0000013D
.rdata:00000140 ; ===========================================================================
.rdata:00000140
.rdata:00000140 ; Segment type: Pure data
.rdata:00000140 ; Segment permissions: Read
.rdata:00000140 _rdata          segment dword public 'DATA' use32
.rdata:00000140                 assume cs:_rdata
.rdata:00000140                 ;org 140h
.rdata:00000140 ; `new_named_pipe_listener'::`2'::socket_fn_table
.rdata:00000140 ?socket_fn_table@?1??new_named_pipe_listener@@9@9 dd offset _sk_namedpipeserver_plug
.rdata:00000140                                         ; DATA XREF: _new_named_pipe_listener+1Eo
.rdata:00000144                 dd offset _sk_namedpipeserver_close
.rdata:00000148                 db    0
.rdata:00000149                 db    0
.rdata:0000014A                 db    0
.rdata:0000014B                 db    0
.rdata:0000014C                 db    0
.rdata:0000014D                 db    0
.rdata:0000014E                 db    0
.rdata:0000014F                 db    0
.rdata:00000150                 db    0
.rdata:00000151                 db    0
.rdata:00000152                 db    0
.rdata:00000153                 db    0
.rdata:00000154                 db    0
.rdata:00000155                 db    0
.rdata:00000156                 db    0
.rdata:00000157                 db    0
.rdata:00000158                 db    0
.rdata:00000159                 db    0
.rdata:0000015A                 db    0
.rdata:0000015B                 db    0
.rdata:0000015C                 dd offset _sk_namedpipeserver_socket_error
.rdata:0000015C _rdata          ends
.rdata:0000015C
.text:00000160 ; ===========================================================================
.text:00000160
.text:00000160 ; Segment type: Pure code
.text:00000160 ; Segment permissions: Read/Execute
.text:00000160 _text           segment para public 'CODE' use32
.text:00000160                 assume cs:_text
.text:00000160                 ;org 160h
.text:00000160                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160 _sk_namedpipeserver_plug proc near      ; DATA XREF: .rdata:`new_named_pipe_listener'::`2'::socket_fn_tableo
.text:00000160
.text:00000160 var_8           = dword ptr -8
.text:00000160 var_4           = dword ptr -4
.text:00000160 arg_0           = dword ptr  8
.text:00000160 arg_4           = dword ptr  0Ch
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 sub     esp, 8
.text:00000166                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000016D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000174                 mov     eax, [ebp+arg_0]
.text:00000177                 mov     [ebp+var_4], eax
.text:0000017A                 mov     ecx, [ebp+var_4]
.text:0000017D                 mov     edx, [ecx+28h]
.text:00000180                 mov     [ebp+var_8], edx
.text:00000183                 cmp     [ebp+arg_4], 0
.text:00000187                 jz      short loc_192
.text:00000189                 mov     eax, [ebp+var_4]
.text:0000018C                 mov     ecx, [ebp+arg_4]
.text:0000018F                 mov     [eax+28h], ecx
.text:00000192
.text:00000192 loc_192:                                ; CODE XREF: _sk_namedpipeserver_plug+27j
.text:00000192                 mov     eax, [ebp+var_8]
.text:00000195                 mov     esp, ebp
.text:00000197                 pop     ebp
.text:00000198                 retn
.text:00000198 _sk_namedpipeserver_plug endp
.text:00000198
.text:00000198 ; ---------------------------------------------------------------------------
.text:00000199                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 _sk_namedpipeserver_close proc near     ; DATA XREF: .rdata:00000144o
.text:000001A0
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 arg_0           = dword ptr  8
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 push    ecx
.text:000001A4                 push    esi
.text:000001A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001AC                 mov     eax, [ebp+arg_0]
.text:000001AF                 mov     [ebp+var_4], eax
.text:000001B2                 mov     esi, esp
.text:000001B4                 mov     ecx, [ebp+var_4]
.text:000001B7                 mov     edx, [ecx+10h]
.text:000001BA                 push    edx             ; hObject
.text:000001BB                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000001C1                 cmp     esi, esp
.text:000001C3                 call    __RTC_CheckEsp
.text:000001C8                 mov     esi, esp
.text:000001CA                 mov     eax, [ebp+var_4]
.text:000001CD                 mov     ecx, [eax+24h]
.text:000001D0                 push    ecx             ; hObject
.text:000001D1                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000001D7                 cmp     esi, esp
.text:000001D9                 call    __RTC_CheckEsp
.text:000001DE                 mov     edx, [ebp+var_4]
.text:000001E1                 mov     eax, [edx+2Ch]
.text:000001E4                 push    eax
.text:000001E5                 call    _safefree
.text:000001EA                 add     esp, 4
.text:000001ED                 mov     ecx, [ebp+var_4]
.text:000001F0                 mov     edx, [ecx+0Ch]
.text:000001F3                 push    edx
.text:000001F4                 call    _safefree
.text:000001F9                 add     esp, 4
.text:000001FC                 mov     eax, [ebp+var_4]
.text:000001FF                 cmp     dword ptr [eax+8], 0
.text:00000203                 jz      short loc_21B
.text:00000205                 mov     esi, esp
.text:00000207                 mov     ecx, [ebp+var_4]
.text:0000020A                 mov     edx, [ecx+8]
.text:0000020D                 push    edx             ; hMem
.text:0000020E                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000214                 cmp     esi, esp
.text:00000216                 call    __RTC_CheckEsp
.text:0000021B
.text:0000021B loc_21B:                                ; CODE XREF: _sk_namedpipeserver_close+63j
.text:0000021B                 mov     eax, [ebp+var_4]
.text:0000021E                 cmp     dword ptr [eax+4], 0
.text:00000222                 jz      short loc_23A
.text:00000224                 mov     esi, esp
.text:00000226                 mov     ecx, [ebp+var_4]
.text:00000229                 mov     edx, [ecx+4]
.text:0000022C                 push    edx             ; hMem
.text:0000022D                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000233                 cmp     esi, esp
.text:00000235                 call    __RTC_CheckEsp
.text:0000023A
.text:0000023A loc_23A:                                ; CODE XREF: _sk_namedpipeserver_close+82j
.text:0000023A                 mov     eax, [ebp+var_4]
.text:0000023D                 push    eax
.text:0000023E                 call    _safefree
.text:00000243                 add     esp, 4
.text:00000246                 pop     esi
.text:00000247                 add     esp, 4
.text:0000024A                 cmp     ebp, esp
.text:0000024C                 call    __RTC_CheckEsp
.text:00000251                 mov     esp, ebp
.text:00000253                 pop     ebp
.text:00000254                 retn
.text:00000254 _sk_namedpipeserver_close endp
.text:00000254
.text:00000254 ; ---------------------------------------------------------------------------
.text:00000255                 align 10h
.text:00000260
.text:00000260 ; =============== S U B R O U T I N E =======================================
.text:00000260
.text:00000260 ; Attributes: bp-based frame
.text:00000260
.text:00000260 _sk_namedpipeserver_socket_error proc near ; DATA XREF: .rdata:0000015Co
.text:00000260
.text:00000260 var_4           = dword ptr -4
.text:00000260 arg_0           = dword ptr  8
.text:00000260
.text:00000260                 push    ebp
.text:00000261                 mov     ebp, esp
.text:00000263                 push    ecx
.text:00000264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000026B                 mov     eax, [ebp+arg_0]
.text:0000026E                 mov     [ebp+var_4], eax
.text:00000271                 mov     ecx, [ebp+var_4]
.text:00000274                 mov     eax, [ecx+2Ch]
.text:00000277                 mov     esp, ebp
.text:00000279                 pop     ebp
.text:0000027A                 retn
.text:0000027A _sk_namedpipeserver_socket_error endp
.text:0000027A
.text:0000027A ; ---------------------------------------------------------------------------
.text:0000027B                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; int __cdecl new_named_pipe_listener(char *Str1, int)
.text:00000280                 public _new_named_pipe_listener
.text:00000280 _new_named_pipe_listener proc near
.text:00000280
.text:00000280 var_4           = dword ptr -4
.text:00000280 Str1            = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 push    ecx
.text:00000284                 push    esi
.text:00000285                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000028C                 push    30h ; '0'
.text:0000028E                 push    1
.text:00000290                 call    _safemalloc
.text:00000295                 add     esp, 8
.text:00000298                 mov     [ebp+var_4], eax
.text:0000029B                 mov     eax, [ebp+var_4]
.text:0000029E                 mov     dword ptr [eax], offset ?socket_fn_table@?1??new_named_pipe_listener@@9@9 ; `new_named_pipe_listener'::`2'::socket_fn_table
.text:000002A4                 mov     ecx, [ebp+var_4]
.text:000002A7                 mov     edx, [ebp+arg_4]
.text:000002AA                 mov     [ecx+28h], edx
.text:000002AD                 mov     eax, [ebp+var_4]
.text:000002B0                 mov     dword ptr [eax+2Ch], 0
.text:000002B7                 mov     ecx, [ebp+var_4]
.text:000002BA                 mov     dword ptr [ecx+4], 0
.text:000002C1                 mov     edx, [ebp+Str1]
.text:000002C4                 push    edx
.text:000002C5                 call    _dupstr
.text:000002CA                 add     esp, 4
.text:000002CD                 mov     ecx, [ebp+var_4]
.text:000002D0                 mov     [ecx+0Ch], eax
.text:000002D3                 mov     edx, [ebp+var_4]
.text:000002D6                 mov     dword ptr [edx+8], 0
.text:000002DD                 push    9               ; MaxCount
.text:000002DF                 push    offset $SG88103 ; "\\\\.\\pipe\\"
.text:000002E4                 mov     eax, [ebp+Str1]
.text:000002E7                 push    eax             ; Str1
.text:000002E8                 call    _strncmp
.text:000002ED                 add     esp, 0Ch
.text:000002F0                 test    eax, eax
.text:000002F2                 jz      short loc_30B
.text:000002F4                 push    0E0h ; 'a'      ; Line
.text:000002F9                 push    offset $SG88104 ; "..\\..\\winnps.c"
.text:000002FE                 push    offset $SG88105 ; "strncmp(pipename, \"\\\\\\\\.\\\\pipe\\"...
.text:00000303                 call    __wassert
.text:00000308 ; ---------------------------------------------------------------------------
.text:00000308                 add     esp, 0Ch
.text:0000030B
.text:0000030B loc_30B:                                ; CODE XREF: _new_named_pipe_listener+72j
.text:0000030B                 push    5Ch ; '\'       ; Val
.text:0000030D                 mov     edx, [ebp+Str1]
.text:00000310                 add     edx, 9
.text:00000313                 push    edx             ; Str
.text:00000314                 call    _strchr
.text:00000319                 add     esp, 8
.text:0000031C                 test    eax, eax
.text:0000031E                 jz      short loc_337
.text:00000320                 push    0E1h ; 'ß'      ; Line
.text:00000325                 push    offset $SG88108 ; "..\\..\\winnps.c"
.text:0000032A                 push    offset $SG88109 ; "strchr(pipename + 9, '\\\\') == NULL"
.text:0000032F                 call    __wassert
.text:00000334 ; ---------------------------------------------------------------------------
.text:00000334                 add     esp, 0Ch
.text:00000337
.text:00000337 loc_337:                                ; CODE XREF: _new_named_pipe_listener+9Ej
.text:00000337                 mov     ecx, [ebp+var_4]
.text:0000033A                 add     ecx, 2Ch ; ','
.text:0000033D                 push    ecx
.text:0000033E                 mov     edx, [ebp+var_4]
.text:00000341                 add     edx, 8
.text:00000344                 push    edx
.text:00000345                 mov     eax, [ebp+var_4]
.text:00000348                 add     eax, 4
.text:0000034B                 push    eax
.text:0000034C                 push    0C0000000h
.text:00000351                 call    _make_private_security_descriptor
.text:00000356                 add     esp, 10h
.text:00000359                 test    eax, eax
.text:0000035B                 jnz     short loc_362
.text:0000035D                 jmp     $cleanup$88111
.text:00000362 ; ---------------------------------------------------------------------------
.text:00000362
.text:00000362 loc_362:                                ; CODE XREF: _new_named_pipe_listener+DBj
.text:00000362                 push    1
.text:00000364                 mov     ecx, [ebp+var_4]
.text:00000367                 push    ecx
.text:00000368                 call    _create_named_pipe
.text:0000036D                 add     esp, 8
.text:00000370                 test    eax, eax
.text:00000372                 jnz     short loc_3A6
.text:00000374                 mov     esi, esp
.text:00000376                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000037C                 cmp     esi, esp
.text:0000037E                 call    __RTC_CheckEsp
.text:00000383                 push    eax
.text:00000384                 call    _win_strerror
.text:00000389                 add     esp, 4
.text:0000038C                 push    eax
.text:0000038D                 mov     edx, [ebp+Str1]
.text:00000390                 push    edx
.text:00000391                 push    offset $SG88113 ; "unable to create named pipe '%s': %s"
.text:00000396                 call    _dupprintf
.text:0000039B                 add     esp, 0Ch
.text:0000039E                 mov     ecx, [ebp+var_4]
.text:000003A1                 mov     [ecx+2Ch], eax
.text:000003A4                 jmp     short $cleanup$88111
.text:000003A6 ; ---------------------------------------------------------------------------
.text:000003A6
.text:000003A6 loc_3A6:                                ; CODE XREF: _new_named_pipe_listener+F2j
.text:000003A6                 push    14h             ; Size
.text:000003A8                 push    0               ; Val
.text:000003AA                 mov     edx, [ebp+var_4]
.text:000003AD                 add     edx, 14h
.text:000003B0                 push    edx             ; Dst
.text:000003B1                 call    _memset
.text:000003B6                 add     esp, 0Ch
.text:000003B9                 mov     esi, esp
.text:000003BB                 push    0               ; lpName
.text:000003BD                 push    0               ; bInitialState
.text:000003BF                 push    1               ; bManualReset
.text:000003C1                 push    0               ; lpEventAttributes
.text:000003C3                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:000003C9                 cmp     esi, esp
.text:000003CB                 call    __RTC_CheckEsp
.text:000003D0                 mov     ecx, [ebp+var_4]
.text:000003D3                 mov     [ecx+24h], eax
.text:000003D6                 mov     edx, [ebp+var_4]
.text:000003D9                 push    edx
.text:000003DA                 push    offset _named_pipe_connect_callback
.text:000003DF                 mov     eax, [ebp+var_4]
.text:000003E2                 mov     ecx, [eax+24h]
.text:000003E5                 push    ecx
.text:000003E6                 call    _handle_add_foreign_event
.text:000003EB                 add     esp, 0Ch
.text:000003EE                 push    0
.text:000003F0                 mov     edx, [ebp+var_4]
.text:000003F3                 push    edx
.text:000003F4                 call    _named_pipe_accept_loop
.text:000003F9                 add     esp, 8
.text:000003FC
.text:000003FC $cleanup$88111:                         ; CODE XREF: _new_named_pipe_listener+DDj
.text:000003FC                                         ; _new_named_pipe_listener+124j
.text:000003FC                 mov     eax, [ebp+var_4]
.text:000003FF                 pop     esi
.text:00000400                 add     esp, 4
.text:00000403                 cmp     ebp, esp
.text:00000405                 call    __RTC_CheckEsp
.text:0000040A                 mov     esp, ebp
.text:0000040C                 pop     ebp
.text:0000040D                 retn
.text:0000040D _new_named_pipe_listener endp
.text:0000040D
.text:0000040D ; ---------------------------------------------------------------------------
.text:0000040E                 align 10h
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 _create_named_pipe proc near            ; CODE XREF: _new_named_pipe_listener+E8p
.text:00000410                                         ; _named_pipe_accept_loop+EFp
.text:00000410
.text:00000410 var_14          = dword ptr -14h
.text:00000410 Dst             = dword ptr -10h
.text:00000410 var_C           = dword ptr -0Ch
.text:00000410 var_8           = dword ptr -8
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = dword ptr  8
.text:00000410 arg_4           = dword ptr  0Ch
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 sub     esp, 14h
.text:00000416                 push    esi
.text:00000417                 mov     eax, 0CCCCCCCCh
.text:0000041C                 mov     [ebp+var_14], eax
.text:0000041F                 mov     [ebp+Dst], eax
.text:00000422                 mov     [ebp+var_C], eax
.text:00000425                 mov     [ebp+var_8], eax
.text:00000428                 mov     [ebp+var_4], eax
.text:0000042B                 push    0Ch             ; Size
.text:0000042D                 push    0               ; Val
.text:0000042F                 lea     eax, [ebp+Dst]
.text:00000432                 push    eax             ; Dst
.text:00000433                 call    _memset
.text:00000438                 add     esp, 0Ch
.text:0000043B                 mov     [ebp+Dst], 0Ch
.text:00000442                 mov     ecx, [ebp+arg_0]
.text:00000445                 mov     edx, [ecx+4]
.text:00000448                 mov     [ebp+var_C], edx
.text:0000044B                 mov     [ebp+var_8], 0
.text:00000452                 mov     esi, esp
.text:00000454                 lea     eax, [ebp+Dst]
.text:00000457                 push    eax             ; lpSecurityAttributes
.text:00000458                 push    0               ; nDefaultTimeOut
.text:0000045A                 push    1000h           ; nInBufferSize
.text:0000045F                 push    1000h           ; nOutBufferSize
.text:00000464                 push    0FFh            ; nMaxInstances
.text:00000469                 push    8               ; dwPipeMode
.text:0000046B                 mov     ecx, [ebp+arg_4]
.text:0000046E                 neg     ecx
.text:00000470                 sbb     ecx, ecx
.text:00000472                 and     ecx, 80000h
.text:00000478                 or      ecx, 40000003h
.text:0000047E                 push    ecx             ; dwOpenMode
.text:0000047F                 mov     edx, [ebp+arg_0]
.text:00000482                 mov     eax, [edx+0Ch]
.text:00000485                 push    eax             ; lpName
.text:00000486                 call    dword ptr ds:__imp__CreateNamedPipeA@32 ; CreateNamedPipeA(x,x,x,x,x,x,x,x)
.text:0000048C                 cmp     esi, esp
.text:0000048E                 call    __RTC_CheckEsp
.text:00000493                 mov     ecx, [ebp+arg_0]
.text:00000496                 mov     [ecx+10h], eax
.text:00000499                 mov     edx, [ebp+arg_0]
.text:0000049C                 xor     eax, eax
.text:0000049E                 cmp     dword ptr [edx+10h], 0FFFFFFFFh
.text:000004A2                 setnz   al
.text:000004A5                 push    edx
.text:000004A6                 mov     ecx, ebp
.text:000004A8                 push    eax
.text:000004A9                 lea     edx, $LN5
.text:000004AF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004B4                 pop     eax
.text:000004B5                 pop     edx
.text:000004B6                 pop     esi
.text:000004B7                 add     esp, 14h
.text:000004BA                 cmp     ebp, esp
.text:000004BC                 call    __RTC_CheckEsp
.text:000004C1                 mov     esp, ebp
.text:000004C3                 pop     ebp
.text:000004C4                 retn
.text:000004C4 _create_named_pipe endp
.text:000004C4
.text:000004C4 ; ---------------------------------------------------------------------------
.text:000004C5                 align 4
.text:000004C8 $LN5            dd 1                    ; DATA XREF: _create_named_pipe+99o
.text:000004CC                 dd offset $LN4
.text:000004D0 $LN4            dd 0FFFFFFF0h, 0Ch      ; DATA XREF: .text:000004CCo
.text:000004D8                 dd offset $LN3
.text:000004DC $LN3            dd 0CC006173h           ; DATA XREF: .text:000004D8o
.text:000004E0
.text:000004E0 ; =============== S U B R O U T I N E =======================================
.text:000004E0
.text:000004E0 ; Attributes: bp-based frame
.text:000004E0
.text:000004E0 _named_pipe_accept_loop proc near       ; CODE XREF: _new_named_pipe_listener+174p
.text:000004E0                                         ; _named_pipe_connect_callback+17p
.text:000004E0
.text:000004E0 var_18          = dword ptr -18h
.text:000004E0 var_14          = dword ptr -14h
.text:000004E0 var_10          = dword ptr -10h
.text:000004E0 hObject         = dword ptr -0Ch
.text:000004E0 var_8           = dword ptr -8
.text:000004E0 var_4           = dword ptr -4
.text:000004E0 arg_0           = dword ptr  8
.text:000004E0 arg_4           = dword ptr  0Ch
.text:000004E0
.text:000004E0                 push    ebp
.text:000004E1                 mov     ebp, esp
.text:000004E3                 sub     esp, 18h
.text:000004E6                 push    esi
.text:000004E7                 mov     eax, 0CCCCCCCCh
.text:000004EC                 mov     [ebp+var_18], eax
.text:000004EF                 mov     [ebp+var_14], eax
.text:000004F2                 mov     [ebp+var_10], eax
.text:000004F5                 mov     [ebp+hObject], eax
.text:000004F8                 mov     [ebp+var_8], eax
.text:000004FB                 mov     [ebp+var_4], eax
.text:000004FE
.text:000004FE loc_4FE:                                ; CODE XREF: _named_pipe_accept_loop:loc_5EFj
.text:000004FE                                         ; _named_pipe_accept_loop+17Aj
.text:000004FE                 mov     eax, 1
.text:00000503                 test    eax, eax
.text:00000505                 jz      loc_65F
.text:0000050B                 cmp     [ebp+arg_4], 0
.text:0000050F                 jz      short loc_521
.text:00000511                 mov     [ebp+arg_4], 0
.text:00000518                 mov     [ebp+var_4], 0
.text:0000051F                 jmp     short loc_56B
.text:00000521 ; ---------------------------------------------------------------------------
.text:00000521
.text:00000521 loc_521:                                ; CODE XREF: _named_pipe_accept_loop+2Fj
.text:00000521                 mov     ecx, [ebp+arg_0]
.text:00000524                 add     ecx, 14h
.text:00000527                 mov     esi, esp
.text:00000529                 push    ecx             ; lpOverlapped
.text:0000052A                 mov     edx, [ebp+arg_0]
.text:0000052D                 mov     eax, [edx+10h]
.text:00000530                 push    eax             ; hNamedPipe
.text:00000531                 call    dword ptr ds:__imp__ConnectNamedPipe@8 ; ConnectNamedPipe(x,x)
.text:00000537                 cmp     esi, esp
.text:00000539                 call    __RTC_CheckEsp
.text:0000053E                 test    eax, eax
.text:00000540                 jz      short loc_54B
.text:00000542                 mov     [ebp+var_4], 0
.text:00000549                 jmp     short loc_55D
.text:0000054B ; ---------------------------------------------------------------------------
.text:0000054B
.text:0000054B loc_54B:                                ; CODE XREF: _named_pipe_accept_loop+60j
.text:0000054B                 mov     esi, esp
.text:0000054D                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000553                 cmp     esi, esp
.text:00000555                 call    __RTC_CheckEsp
.text:0000055A                 mov     [ebp+var_4], eax
.text:0000055D
.text:0000055D loc_55D:                                ; CODE XREF: _named_pipe_accept_loop+69j
.text:0000055D                 cmp     [ebp+var_4], 3E5h
.text:00000564                 jnz     short loc_56B
.text:00000566                 jmp     loc_65F
.text:0000056B ; ---------------------------------------------------------------------------
.text:0000056B
.text:0000056B loc_56B:                                ; CODE XREF: _named_pipe_accept_loop+3Fj
.text:0000056B                                         ; _named_pipe_accept_loop+84j
.text:0000056B                 cmp     [ebp+var_4], 0
.text:0000056F                 jz      short loc_57A
.text:00000571                 cmp     [ebp+var_4], 217h
.text:00000578                 jnz     short loc_5F4
.text:0000057A
.text:0000057A loc_57A:                                ; CODE XREF: _named_pipe_accept_loop+8Fj
.text:0000057A                 mov     ecx, [ebp+arg_0]
.text:0000057D                 mov     edx, [ecx+10h]
.text:00000580                 mov     [ebp+hObject], edx
.text:00000583                 mov     eax, [ebp+hObject]
.text:00000586                 mov     [ebp+var_14], eax
.text:00000589                 mov     esi, esp
.text:0000058B                 mov     ecx, [ebp+var_14]
.text:0000058E                 push    ecx
.text:0000058F                 push    offset _named_pipe_accept
.text:00000594                 mov     edx, [ebp+arg_0]
.text:00000597                 mov     eax, [edx+28h]
.text:0000059A                 push    eax
.text:0000059B                 mov     ecx, [ebp+arg_0]
.text:0000059E                 mov     edx, [ecx+28h]
.text:000005A1                 mov     eax, [edx]
.text:000005A3                 mov     ecx, [eax+10h]
.text:000005A6                 call    ecx
.text:000005A8                 add     esp, 0Ch
.text:000005AB                 cmp     esi, esp
.text:000005AD                 call    __RTC_CheckEsp
.text:000005B2                 test    eax, eax
.text:000005B4                 jz      short loc_5C9
.text:000005B6                 mov     esi, esp
.text:000005B8                 mov     edx, [ebp+hObject]
.text:000005BB                 push    edx             ; hObject
.text:000005BC                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000005C2                 cmp     esi, esp
.text:000005C4                 call    __RTC_CheckEsp
.text:000005C9
.text:000005C9 loc_5C9:                                ; CODE XREF: _named_pipe_accept_loop+D4j
.text:000005C9                 push    0
.text:000005CB                 mov     eax, [ebp+arg_0]
.text:000005CE                 push    eax
.text:000005CF                 call    _create_named_pipe
.text:000005D4                 add     esp, 8
.text:000005D7                 test    eax, eax
.text:000005D9                 jnz     short loc_5EF
.text:000005DB                 mov     esi, esp
.text:000005DD                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000005E3                 cmp     esi, esp
.text:000005E5                 call    __RTC_CheckEsp
.text:000005EA                 mov     [ebp+var_4], eax
.text:000005ED                 jmp     short loc_5F4
.text:000005EF ; ---------------------------------------------------------------------------
.text:000005EF
.text:000005EF loc_5EF:                                ; CODE XREF: _named_pipe_accept_loop+F9j
.text:000005EF                 jmp     loc_4FE
.text:000005F4 ; ---------------------------------------------------------------------------
.text:000005F4
.text:000005F4 loc_5F4:                                ; CODE XREF: _named_pipe_accept_loop+98j
.text:000005F4                                         ; _named_pipe_accept_loop+10Dj
.text:000005F4                 mov     ecx, [ebp+var_4]
.text:000005F7                 push    ecx
.text:000005F8                 call    _win_strerror
.text:000005FD                 add     esp, 4
.text:00000600                 push    eax
.text:00000601                 push    offset $SG88076 ; "Error while listening to named pipe: %s"
.text:00000606                 call    _dupprintf
.text:0000060B                 add     esp, 8
.text:0000060E                 mov     [ebp+var_8], eax
.text:00000611                 mov     esi, esp
.text:00000613                 mov     edx, [ebp+var_4]
.text:00000616                 push    edx
.text:00000617                 mov     eax, [ebp+var_8]
.text:0000061A                 push    eax
.text:0000061B                 push    0
.text:0000061D                 mov     ecx, [ebp+arg_0]
.text:00000620                 mov     edx, [ecx+0Ch]
.text:00000623                 push    edx
.text:00000624                 call    _sk_namedpipe_addr
.text:00000629                 add     esp, 4
.text:0000062C                 push    eax
.text:0000062D                 push    1
.text:0000062F                 mov     eax, [ebp+arg_0]
.text:00000632                 mov     ecx, [eax+28h]
.text:00000635                 push    ecx
.text:00000636                 mov     edx, [ebp+arg_0]
.text:00000639                 mov     eax, [edx+28h]
.text:0000063C                 mov     ecx, [eax]
.text:0000063E                 mov     edx, [ecx]
.text:00000640                 call    edx
.text:00000642                 add     esp, 18h
.text:00000645                 cmp     esi, esp
.text:00000647                 call    __RTC_CheckEsp
.text:0000064C                 mov     eax, [ebp+var_8]
.text:0000064F                 push    eax
.text:00000650                 call    _safefree
.text:00000655                 add     esp, 4
.text:00000658                 jmp     short loc_65F
.text:0000065A ; ---------------------------------------------------------------------------
.text:0000065A                 jmp     loc_4FE
.text:0000065F ; ---------------------------------------------------------------------------
.text:0000065F
.text:0000065F loc_65F:                                ; CODE XREF: _named_pipe_accept_loop+25j
.text:0000065F                                         ; _named_pipe_accept_loop+86j ...
.text:0000065F                 push    edx
.text:00000660                 mov     ecx, ebp
.text:00000662                 push    eax
.text:00000663                 lea     edx, $LN17
.text:00000669                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000066E                 pop     eax
.text:0000066F                 pop     edx
.text:00000670                 pop     esi
.text:00000671                 add     esp, 18h
.text:00000674                 cmp     ebp, esp
.text:00000676                 call    __RTC_CheckEsp
.text:0000067B                 mov     esp, ebp
.text:0000067D                 pop     ebp
.text:0000067E                 retn
.text:0000067E _named_pipe_accept_loop endp
.text:0000067E
.text:0000067E ; ---------------------------------------------------------------------------
.text:0000067F                 align 10h
.text:00000680 $LN17           dd 1                    ; DATA XREF: _named_pipe_accept_loop+183o
.text:00000684                 dd offset $LN16
.text:00000688 $LN16           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000684o
.text:00000690                 dd offset $LN15         ; "actx"
.text:00000694 $LN15           db 'actx',0             ; DATA XREF: .text:00000690o
.text:00000699                 align 10h
.text:000006A0
.text:000006A0 ; =============== S U B R O U T I N E =======================================
.text:000006A0
.text:000006A0 ; Attributes: bp-based frame
.text:000006A0
.text:000006A0 _named_pipe_accept proc near            ; DATA XREF: _named_pipe_accept_loop+AFo
.text:000006A0
.text:000006A0 var_4           = dword ptr -4
.text:000006A0 arg_0           = dword ptr  8
.text:000006A0 arg_4           = dword ptr  0Ch
.text:000006A0
.text:000006A0                 push    ebp
.text:000006A1                 mov     ebp, esp
.text:000006A3                 push    ecx
.text:000006A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006AB                 mov     eax, [ebp+arg_0]
.text:000006AE                 mov     [ebp+var_4], eax
.text:000006B1                 push    1
.text:000006B3                 mov     ecx, [ebp+arg_4]
.text:000006B6                 push    ecx
.text:000006B7                 mov     edx, [ebp+var_4]
.text:000006BA                 push    edx
.text:000006BB                 mov     eax, [ebp+var_4]
.text:000006BE                 push    eax
.text:000006BF                 call    _make_handle_socket
.text:000006C4                 add     esp, 10h
.text:000006C7                 add     esp, 4
.text:000006CA                 cmp     ebp, esp
.text:000006CC                 call    __RTC_CheckEsp
.text:000006D1                 mov     esp, ebp
.text:000006D3                 pop     ebp
.text:000006D4                 retn
.text:000006D4 _named_pipe_accept endp
.text:000006D4
.text:000006D4 ; ---------------------------------------------------------------------------
.text:000006D5                 align 10h
.text:000006E0
.text:000006E0 ; =============== S U B R O U T I N E =======================================
.text:000006E0
.text:000006E0 ; Attributes: bp-based frame
.text:000006E0
.text:000006E0 _named_pipe_connect_callback proc near  ; DATA XREF: _new_named_pipe_listener+15Ao
.text:000006E0
.text:000006E0 var_4           = dword ptr -4
.text:000006E0 arg_0           = dword ptr  8
.text:000006E0
.text:000006E0                 push    ebp
.text:000006E1                 mov     ebp, esp
.text:000006E3                 push    ecx
.text:000006E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006EB                 mov     eax, [ebp+arg_0]
.text:000006EE                 mov     [ebp+var_4], eax
.text:000006F1                 push    1
.text:000006F3                 mov     ecx, [ebp+var_4]
.text:000006F6                 push    ecx
.text:000006F7                 call    _named_pipe_accept_loop
.text:000006FC                 add     esp, 8
.text:000006FF                 add     esp, 4
.text:00000702                 cmp     ebp, esp
.text:00000704                 call    __RTC_CheckEsp
.text:00000709                 mov     esp, ebp
.text:0000070B                 pop     ebp
.text:0000070C                 retn
.text:0000070C _named_pipe_connect_callback endp
.text:0000070C
.text:0000070C ; ---------------------------------------------------------------------------
.text:0000070D                 align 10h
.text:0000070D _text           ends
.text:0000070D
.rtc$TMZ:00000710 ; ===========================================================================
.rtc$TMZ:00000710
.rtc$TMZ:00000710 ; Segment type: Pure data
.rtc$TMZ:00000710 ; Segment permissions: Read
.rtc$TMZ:00000710 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000710                 assume cs:_rtc$TMZ
.rtc$TMZ:00000710                 ;org 710h
.rtc$TMZ:00000710 ; COMDAT (pick any)
.rtc$TMZ:00000710 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000710 _rtc$TMZ        ends
.rtc$TMZ:00000710
.rtc$IMZ:00000714 ; ===========================================================================
.rtc$IMZ:00000714
.rtc$IMZ:00000714 ; Segment type: Pure data
.rtc$IMZ:00000714 ; Segment permissions: Read
.rtc$IMZ:00000714 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000714                 assume cs:_rtc$IMZ
.rtc$IMZ:00000714                 ;org 714h
.rtc$IMZ:00000714 ; COMDAT (pick any)
.rtc$IMZ:00000714 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000714 _rtc$IMZ        ends
.rtc$IMZ:00000714
UNDEF:00000720 ; ===========================================================================
UNDEF:00000720
UNDEF:00000720 ; Segment type: Externs
UNDEF:00000720 ; UNDEF
UNDEF:00000720                 extrn __RTC_Shutdown:near
UNDEF:00000720                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000724                 extrn __RTC_InitBase:near
UNDEF:00000724                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000728 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
UNDEF:00000728                 extrn __imp__LocalFree@4:near
UNDEF:00000728                                         ; CODE XREF: _sk_namedpipeserver_close+6Ep
UNDEF:00000728                                         ; _sk_namedpipeserver_close+8Dp
UNDEF:00000728                                         ; DATA XREF: ...
UNDEF:0000072C                 extrn _safefree:near    ; CODE XREF: _sk_namedpipeserver_close+45p
UNDEF:0000072C                                         ; _sk_namedpipeserver_close+54p ...
UNDEF:00000730 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:00000730                 extrn __imp__CloseHandle@4:near
UNDEF:00000730                                         ; CODE XREF: _sk_namedpipeserver_close+1Bp
UNDEF:00000730                                         ; _sk_namedpipeserver_close+31p ...
UNDEF:00000734                 extrn __RTC_CheckEsp:near
UNDEF:00000734                                         ; CODE XREF: _sk_namedpipeserver_close+23p
UNDEF:00000734                                         ; _sk_namedpipeserver_close+39p ...
UNDEF:00000738                 extrn _handle_add_foreign_event:near
UNDEF:00000738                                         ; CODE XREF: _new_named_pipe_listener+166p
UNDEF:0000073C ; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName)
UNDEF:0000073C                 extrn __imp__CreateEventA@16:near
UNDEF:0000073C                                         ; CODE XREF: _new_named_pipe_listener+143p
UNDEF:0000073C                                         ; DATA XREF: _new_named_pipe_listener+143r
UNDEF:00000740 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00000740                 extrn _memset:near      ; CODE XREF: _new_named_pipe_listener+131p
UNDEF:00000740                                         ; _create_named_pipe+23p
UNDEF:00000744                 extrn _dupprintf:near   ; CODE XREF: _new_named_pipe_listener+116p
UNDEF:00000744                                         ; _named_pipe_accept_loop+126p
UNDEF:00000748                 extrn _win_strerror:near
UNDEF:00000748                                         ; CODE XREF: _new_named_pipe_listener+104p
UNDEF:00000748                                         ; _named_pipe_accept_loop+118p
UNDEF:0000074C ; DWORD __stdcall GetLastError()
UNDEF:0000074C                 extrn __imp__GetLastError@0:near
UNDEF:0000074C                                         ; CODE XREF: _new_named_pipe_listener+F6p
UNDEF:0000074C                                         ; _named_pipe_accept_loop+6Dp ...
UNDEF:00000750                 extrn _make_private_security_descriptor:near
UNDEF:00000750                                         ; CODE XREF: _new_named_pipe_listener+D1p
UNDEF:00000754 ; char *__cdecl strchr(const char *Str, int Val)
UNDEF:00000754                 extrn _strchr:near      ; CODE XREF: _new_named_pipe_listener+94p
UNDEF:00000758 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00000758                 extrn __wassert:near    ; CODE XREF: _new_named_pipe_listener+83p
UNDEF:00000758                                         ; _new_named_pipe_listener+AFp
UNDEF:0000075C ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
UNDEF:0000075C                 extrn _strncmp:near     ; CODE XREF: _new_named_pipe_listener+68p
UNDEF:00000760                 extrn _dupstr:near      ; CODE XREF: _new_named_pipe_listener+45p
UNDEF:00000764                 extrn _safemalloc:near  ; CODE XREF: _new_named_pipe_listener+10p
UNDEF:00000768 ; HANDLE __stdcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
UNDEF:00000768                 extrn __imp__CreateNamedPipeA@32:near
UNDEF:00000768                                         ; CODE XREF: _create_named_pipe+76p
UNDEF:00000768                                         ; DATA XREF: _create_named_pipe+76r
UNDEF:0000076C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000076C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000076C                                         ; CODE XREF: _create_named_pipe+9Fp
UNDEF:0000076C                                         ; _named_pipe_accept_loop+189p
UNDEF:00000770                 extrn _sk_namedpipe_addr:near
UNDEF:00000770                                         ; CODE XREF: _named_pipe_accept_loop+144p
UNDEF:00000774 ; BOOL __stdcall ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped)
UNDEF:00000774                 extrn __imp__ConnectNamedPipe@8:near
UNDEF:00000774                                         ; CODE XREF: _named_pipe_accept_loop+51p
UNDEF:00000774                                         ; DATA XREF: _named_pipe_accept_loop+51r
UNDEF:00000778                 extrn _make_handle_socket:near
UNDEF:00000778                                         ; CODE XREF: _named_pipe_accept+1Fp
UNDEF:00000778
UNDEF:00000778
UNDEF:00000778                 end