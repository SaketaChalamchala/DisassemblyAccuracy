.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : A5CA633B592CDEB09A1C760AF254E7B1
.data:00000000 ; Input CRC32 : EE11B8B1
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winstore.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG119520       db 'Software\SimonTatham\PuTTY\Jumplist',0
.data:00000000                                         ; DATA XREF: .rdata:_reg_jumplist_keyo
.data:00000024 $SG119522       db  52h ; R             ; DATA XREF: .rdata:_reg_jumplist_valueo
.data:00000025                 db  65h ; e
.data:00000026                 db  63h ; c
.data:00000027                 db  65h ; e
.data:00000028                 db  6Eh ; n
.data:00000029                 db  74h ; t
.data:0000002A                 db  20h
.data:0000002B                 db  73h ; s
.data:0000002C                 db  65h ; e
.data:0000002D                 db  73h ; s
.data:0000002E                 db  73h ; s
.data:0000002F aIons           db 'ions',0             ; DATA XREF: .data:$SG119840o
.data:00000034 $SG119524       db  53h ; S             ; DATA XREF: .rdata:_puttystro
.data:00000035                 db  6Fh ; o
.data:00000036                 db  66h ; f
.data:00000037                 db  74h ; t
.data:00000038                 db  77h ; w
.data:00000039                 db  61h ; a
.data:0000003A unk_3A          db  72h ; r             ; DATA XREF: .data:$SG119825o
.data:0000003B                 db  65h ; e
.data:0000003C                 db  5Ch ; \
.data:0000003D                 db  53h ; S
.data:0000003E                 db  69h ; i
.data:0000003F                 db  6Dh ; m
.data:00000040 aOntathamPuttyS db 'onTatham\PuTTY\Sessions',0 ; DATA XREF: .data:$SG119793o
.data:00000058 $SG119580       db 'Default Settings',0 ; DATA XREF: _open_settings_w:loc_335o
.data:00000069                 align 4
.data:0000006C $SG119587       db 'Unable to create registry key',0Ah
.data:0000006C                                         ; DATA XREF: _open_settings_w+AEo
.data:0000006C                 db 'HKEY_CURRENT_USER\%s',0
.data:0000009F                 align 10h
.data:000000A0 $SG119590       db 'Unable to create registry key',0Ah
.data:000000A0                                         ; DATA XREF: _open_settings_w+106o
.data:000000A0                 db 'HKEY_CURRENT_USER\%s\%s',0
.data:000000D6                 align 4
.data:000000D8 $SG119624       db 'Default Settings',0 ; DATA XREF: _open_settings_r:loc_679o
.data:000000E9                 align 4
.data:000000EC ; wchar_t _SG119659
.data:000000EC $SG119659:                              ; DATA XREF: _read_setting_s+CBo
.data:000000EC                 unicode 0, <..\..\winstore.c>,0
.data:0000010E                 align 10h
.data:00000110 ; wchar_t _SG119660
.data:00000110 $SG119660:                              ; DATA XREF: _read_setting_s+D0o
.data:00000110                 unicode 0, <size >
.data:00000110                 dw 3Ch
.data:00000110                 unicode 0, < allocsize>,0
.data:00000132                 align 4
.data:00000134 $SG119690       db 'IsBold',0           ; DATA XREF: _read_setting_fontspec+3Fo
.data:0000013B                 align 4
.data:0000013C $SG119694       db 'CharSet',0          ; DATA XREF: _read_setting_fontspec+8Fo
.data:00000144 $SG119698       db 'Height',0           ; DATA XREF: _read_setting_fontspec+DCo
.data:0000014B                 align 4
.data:0000014C $SG119710       db 'IsBold',0           ; DATA XREF: _write_setting_fontspec+23o
.data:00000153                 align 4
.data:00000154 $SG119712       db 'CharSet',0          ; DATA XREF: _write_setting_fontspec+5Co
.data:0000015C $SG119714       db 'Height',0           ; DATA XREF: _write_setting_fontspec+95o
.data:00000163                 align 4
.data:00000164 ; char _SG119793[]
.data:00000164 $SG119793       dd offset aOntathamPuttyS ; DATA XREF: _hostkey_regname+1Bo
.data:00000164                                         ; "onTatham\\PuTTY\\Sessions"
.data:00000168 ; char _SG119794[4]
.data:00000168 $SG119794       db '%d:',0              ; DATA XREF: _hostkey_regname+3Fo
.data:0000016C ; CHAR _SG119818[]
.data:0000016C $SG119818       db 'Software\SimonTatham\PuTTY\SshHostKeys',0
.data:0000016C                                         ; DATA XREF: _verify_host_key+77o
.data:00000193                 align 4
.data:00000194 ; char _SG119823[]
.data:00000194 $SG119823       db 'rsa',0              ; DATA XREF: _verify_host_key+FEo
.data:00000198 ; char _SG119825[]
.data:00000198 $SG119825       dd offset unk_3A        ; DATA XREF: _verify_host_key+117o
.data:0000019C ; char _SG119840[]
.data:0000019C $SG119840       dd offset aIons         ; DATA XREF: _verify_host_key+1CEo
.data:0000019C                                         ; "ions"
.data:000001A0 ; CHAR _SG119872[]
.data:000001A0 $SG119872       db 'Software\SimonTatham\PuTTY\SshHostKeys',0
.data:000001A0                                         ; DATA XREF: _store_host_key+66o
.data:000001C7                 align 4
.data:000001C8 $SG119887       db 'Unable to delete ',27h,'%s',27h,': %s',0
.data:000001C8                                         ; DATA XREF: _try_random_seed+52o
.data:000001E2                 align 4
.data:000001E4 ; CHAR _SG119908[]
.data:000001E4 $SG119908       db 'Software\SimonTatham\PuTTY',0
.data:000001E4                                         ; DATA XREF: _access_random_seed+57o
.data:000001FF                 align 10h
.data:00000200 ; CHAR _SG119910[]
.data:00000200 $SG119910       db 'RandSeedFile',0     ; DATA XREF: _access_random_seed+89o
.data:0000020D                 align 10h
.data:00000210 $SG119915       db 'shell32.dll',0      ; DATA XREF: _access_random_seed+105o
.data:0000021C ; CHAR _SG119918[]
.data:0000021C $SG119918       db 'SHGetFolderPathA',0 ; DATA XREF: _access_random_seed+122o
.data:0000022D                 align 10h
.data:00000230 ; char _SG119924[]
.data:00000230 $SG119924       db '\PUTTY.RND',0       ; DATA XREF: _access_random_seed+191o
.data:0000023B                 align 4
.data:0000023C ; char _SG119930[]
.data:0000023C $SG119930       db '\PUTTY.RND',0       ; DATA XREF: _access_random_seed+1EAo
.data:00000247                 align 4
.data:00000248 ; CHAR _SG119934[]
.data:00000248 $SG119934       db 'HOMEDRIVE',0        ; DATA XREF: _access_random_seed+22Fo
.data:00000252                 align 4
.data:00000254 ; CHAR _SG119935[]
.data:00000254 $SG119935       db 'HOMEPATH',0         ; DATA XREF: _access_random_seed+263o
.data:0000025D                 align 10h
.data:00000260 ; char _SG119937[]
.data:00000260 $SG119937       db '\PUTTY.RND',0       ; DATA XREF: _access_random_seed+284o
.data:0000026B                 align 4
.data:0000026C ; char _SG119939[]
.data:0000026C $SG119939       db '\PUTTY.RND',0       ; DATA XREF: _access_random_seed+2D3o
.data:00000277                 align 4
.data:00000278 ; CHAR _SG120066[]
.data:00000278 $SG120066       db 'Software\SimonTatham\PuTTY',0
.data:00000278                                         ; DATA XREF: _cleanup_all+3Co
.data:00000293                 align 4
.data:00000294 ; CHAR _SG120071[]
.data:00000294 $SG120071       db 'Software\SimonTatham',0 ; DATA XREF: _cleanup_all+7Co
.data:000002A9                 align 4
.data:000002AC ; CHAR _SG120072[]
.data:000002AC $SG120072       db 'PuTTY',0            ; DATA XREF: _cleanup_all+9Do
.data:000002B2                 align 4
.data:000002B4 ; CHAR _SG120078[]
.data:000002B4 $SG120078       db 'Software',0         ; DATA XREF: _cleanup_all+F6o
.data:000002BD                 align 10h
.data:000002C0 ; CHAR _SG120079[]
.data:000002C0 $SG120079       db 'SimonTatham',0      ; DATA XREF: _cleanup_all+113o
.data:000002C0 _data           ends
.data:000002C0
.rdata:000002CC ; ===========================================================================
.rdata:000002CC
.rdata:000002CC ; Segment type: Pure data
.rdata:000002CC ; Segment permissions: Read
.rdata:000002CC _rdata          segment dword public 'DATA' use32
.rdata:000002CC                 assume cs:_rdata
.rdata:000002CC                 ;org 2CCh
.rdata:000002CC ; LPCSTR reg_jumplist_key
.rdata:000002CC _reg_jumplist_key dd offset $SG119520   ; DATA XREF: _transform_jumplist_registry+2Cr
.rdata:000002CC                                         ; "Software\\SimonTatham\\PuTTY\\Jumplist"
.rdata:000002D0 ; LPCSTR reg_jumplist_value
.rdata:000002D0 _reg_jumplist_value dd offset $SG119522 ; DATA XREF: _transform_jumplist_registry+80r
.rdata:000002D0                                         ; _transform_jumplist_registry+D0r ...
.rdata:000002D4 ; LPCSTR puttystr
.rdata:000002D4 _puttystr       dd offset $SG119524     ; DATA XREF: _open_settings_w+7Ar
.rdata:000002D4                                         ; _open_settings_w+A8r ...
.rdata:000002D8 _hex            db 30h                  ; DATA XREF: _mungestr+99r
.rdata:000002D8                                         ; _mungestr+B6r
.rdata:000002D9                 db  31h ; 1
.rdata:000002DA                 db  32h ; 2
.rdata:000002DB                 db  33h ; 3
.rdata:000002DC                 db  34h ; 4
.rdata:000002DD                 db  35h ; 5
.rdata:000002DE                 db  36h ; 6
.rdata:000002DF                 db  37h ; 7
.rdata:000002E0                 db  38h ; 8
.rdata:000002E1                 db  39h ; 9
.rdata:000002E2                 db  41h ; A
.rdata:000002E3                 db  42h ; B
.rdata:000002E4                 db  43h ; C
.rdata:000002E5                 db  44h ; D
.rdata:000002E6                 db  45h ; E
.rdata:000002E7                 db  46h ; F
.rdata:000002E7 _rdata          ends
.rdata:000002E7
.bss:000002E8 ; ===========================================================================
.bss:000002E8
.bss:000002E8 ; Segment type: Uninitialized
.bss:000002E8 ; Segment permissions: Read/Write
.bss:000002E8 _bss            segment dword public 'BSS' use32
.bss:000002E8                 assume cs:_bss
.bss:000002E8                 ;org 2E8h
.bss:000002E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000002E8 _p_SHGetFolderPathA dd ?                ; DATA XREF: _access_random_seed+152w
.bss:000002E8                                         ; _access_random_seed:loc_181Ar ...
.bss:000002EC _tried_shgetfolderpath dd ?             ; DATA XREF: _access_random_seed:loc_17B4r
.bss:000002EC                                         ; _access_random_seed+158w
.bss:000002F0 ; HMODULE shell32_module
.bss:000002F0 _shell32_module dd ?                    ; DATA XREF: _access_random_seed+112w
.bss:000002F0                                         ; _access_random_seed+117r ...
.bss:000002F4 $SG119903       dw ?                    ; DATA XREF: _access_random_seed+27r
.bss:000002F6                 align 4
.bss:000002F6 _bss            ends
.bss:000002F6
.text:000002F8 ; ===========================================================================
.text:000002F8
.text:000002F8 ; Segment type: Pure code
.text:000002F8 ; Segment permissions: Read/Execute
.text:000002F8 _text           segment para public 'CODE' use32
.text:000002F8                 assume cs:_text
.text:000002F8                 ;org 2F8h
.text:000002F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000002F8
.text:000002F8 ; =============== S U B R O U T I N E =======================================
.text:000002F8
.text:000002F8 ; Attributes: bp-based frame
.text:000002F8
.text:000002F8 ; int __cdecl open_settings_w(char *Str, int)
.text:000002F8                 public _open_settings_w
.text:000002F8 _open_settings_w proc near
.text:000002F8
.text:000002F8 lpSubKey        = dword ptr -20h
.text:000002F8 var_1C          = dword ptr -1Ch
.text:000002F8 var_18          = dword ptr -18h
.text:000002F8 var_14          = dword ptr -14h
.text:000002F8 var_10          = dword ptr -10h
.text:000002F8 var_C           = dword ptr -0Ch
.text:000002F8 phkResult       = dword ptr -8
.text:000002F8 var_4           = dword ptr -4
.text:000002F8 Str             = dword ptr  8
.text:000002F8 arg_4           = dword ptr  0Ch
.text:000002F8
.text:000002F8                 push    ebp
.text:000002F9                 mov     ebp, esp
.text:000002FB                 sub     esp, 20h
.text:000002FE                 push    esi
.text:000002FF                 mov     eax, 0CCCCCCCCh
.text:00000304                 mov     [ebp+lpSubKey], eax
.text:00000307                 mov     [ebp+var_1C], eax
.text:0000030A                 mov     [ebp+var_18], eax
.text:0000030D                 mov     [ebp+var_14], eax
.text:00000310                 mov     [ebp+var_10], eax
.text:00000313                 mov     [ebp+var_C], eax
.text:00000316                 mov     [ebp+phkResult], eax
.text:00000319                 mov     [ebp+var_4], eax
.text:0000031C                 mov     eax, [ebp+arg_4]
.text:0000031F                 mov     dword ptr [eax], 0
.text:00000325                 cmp     [ebp+Str], 0
.text:00000329                 jz      short loc_335
.text:0000032B                 mov     ecx, [ebp+Str]
.text:0000032E                 movsx   edx, byte ptr [ecx]
.text:00000331                 test    edx, edx
.text:00000333                 jnz     short loc_33C
.text:00000335
.text:00000335 loc_335:                                ; CODE XREF: _open_settings_w+31j
.text:00000335                 mov     [ebp+Str], offset $SG119580 ; "Default Settings"
.text:0000033C
.text:0000033C loc_33C:                                ; CODE XREF: _open_settings_w+3Bj
.text:0000033C                 push    1
.text:0000033E                 mov     eax, [ebp+Str]
.text:00000341                 push    eax             ; Str
.text:00000342                 call    _strlen
.text:00000347                 add     esp, 4
.text:0000034A                 imul    eax, 3
.text:0000034D                 add     eax, 1
.text:00000350                 push    eax
.text:00000351                 call    _safemalloc
.text:00000356                 add     esp, 8
.text:00000359                 mov     [ebp+lpSubKey], eax
.text:0000035C                 mov     ecx, [ebp+lpSubKey]
.text:0000035F                 push    ecx
.text:00000360                 mov     edx, [ebp+Str]
.text:00000363                 push    edx
.text:00000364                 call    _mungestr
.text:00000369                 add     esp, 8
.text:0000036C                 mov     esi, esp
.text:0000036E                 lea     eax, [ebp+phkResult]
.text:00000371                 push    eax             ; phkResult
.text:00000372                 mov     ecx, ds:_puttystr
.text:00000378                 push    ecx             ; lpSubKey
.text:00000379                 push    80000001h       ; hKey
.text:0000037E                 call    dword ptr ds:__imp__RegCreateKeyA@12 ; RegCreateKeyA(x,x,x)
.text:00000384                 cmp     esi, esp
.text:00000386                 call    __RTC_CheckEsp
.text:0000038B                 mov     [ebp+var_1C], eax
.text:0000038E                 cmp     [ebp+var_1C], 0
.text:00000392                 jz      short loc_3BC
.text:00000394                 mov     edx, [ebp+lpSubKey]
.text:00000397                 push    edx
.text:00000398                 call    _safefree
.text:0000039D                 add     esp, 4
.text:000003A0                 mov     eax, ds:_puttystr
.text:000003A5                 push    eax
.text:000003A6                 push    offset $SG119587 ; "Unable to create registry key\nHKEY_CUR"...
.text:000003AB                 call    _dupprintf
.text:000003B0                 add     esp, 8
.text:000003B3                 mov     ecx, [ebp+arg_4]
.text:000003B6                 mov     [ecx], eax
.text:000003B8                 xor     eax, eax
.text:000003BA                 jmp     short loc_42F
.text:000003BC ; ---------------------------------------------------------------------------
.text:000003BC
.text:000003BC loc_3BC:                                ; CODE XREF: _open_settings_w+9Aj
.text:000003BC                 mov     esi, esp
.text:000003BE                 lea     edx, [ebp+var_14]
.text:000003C1                 push    edx             ; phkResult
.text:000003C2                 mov     eax, [ebp+lpSubKey]
.text:000003C5                 push    eax             ; lpSubKey
.text:000003C6                 mov     ecx, [ebp+phkResult]
.text:000003C9                 push    ecx             ; hKey
.text:000003CA                 call    dword ptr ds:__imp__RegCreateKeyA@12 ; RegCreateKeyA(x,x,x)
.text:000003D0                 cmp     esi, esp
.text:000003D2                 call    __RTC_CheckEsp
.text:000003D7                 mov     [ebp+var_1C], eax
.text:000003DA                 mov     esi, esp
.text:000003DC                 mov     edx, [ebp+phkResult]
.text:000003DF                 push    edx             ; hKey
.text:000003E0                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:000003E6                 cmp     esi, esp
.text:000003E8                 call    __RTC_CheckEsp
.text:000003ED                 cmp     [ebp+var_1C], 0
.text:000003F1                 jz      short loc_420
.text:000003F3                 mov     eax, [ebp+lpSubKey]
.text:000003F6                 push    eax
.text:000003F7                 mov     ecx, ds:_puttystr
.text:000003FD                 push    ecx
.text:000003FE                 push    offset $SG119590 ; "Unable to create registry key\nHKEY_CUR"...
.text:00000403                 call    _dupprintf
.text:00000408                 add     esp, 0Ch
.text:0000040B                 mov     edx, [ebp+arg_4]
.text:0000040E                 mov     [edx], eax
.text:00000410                 mov     eax, [ebp+lpSubKey]
.text:00000413                 push    eax
.text:00000414                 call    _safefree
.text:00000419                 add     esp, 4
.text:0000041C                 xor     eax, eax
.text:0000041E                 jmp     short loc_42F
.text:00000420 ; ---------------------------------------------------------------------------
.text:00000420
.text:00000420 loc_420:                                ; CODE XREF: _open_settings_w+F9j
.text:00000420                 mov     ecx, [ebp+lpSubKey]
.text:00000423                 push    ecx
.text:00000424                 call    _safefree
.text:00000429                 add     esp, 4
.text:0000042C                 mov     eax, [ebp+var_14]
.text:0000042F
.text:0000042F loc_42F:                                ; CODE XREF: _open_settings_w+C2j
.text:0000042F                                         ; _open_settings_w+126j
.text:0000042F                 push    edx
.text:00000430                 mov     ecx, ebp
.text:00000432                 push    eax
.text:00000433                 lea     edx, $LN10
.text:00000439                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000043E                 pop     eax
.text:0000043F                 pop     edx
.text:00000440                 pop     esi
.text:00000441                 add     esp, 20h
.text:00000444                 cmp     ebp, esp
.text:00000446                 call    __RTC_CheckEsp
.text:0000044B                 mov     esp, ebp
.text:0000044D                 pop     ebp
.text:0000044E                 retn
.text:0000044E _open_settings_w endp
.text:0000044E
.text:0000044E ; ---------------------------------------------------------------------------
.text:0000044F                 align 10h
.text:00000450 $LN10           dd 2                    ; DATA XREF: _open_settings_w+13Bo
.text:00000454                 dd offset $LN9
.text:00000458 $LN9            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000454o
.text:00000460                 dd offset $LN7          ; "subkey1"
.text:00000464                 dd 0FFFFFFECh, 4
.text:0000046C                 dd offset $LN8          ; "sesskey"
.text:00000470 $LN8            db 'sesskey',0          ; DATA XREF: .text:0000046Co
.text:00000478 $LN7            db 'subkey1',0          ; DATA XREF: .text:00000460o
.text:00000480                 db 8 dup(0CCh)
.text:00000488
.text:00000488 ; =============== S U B R O U T I N E =======================================
.text:00000488
.text:00000488 ; Attributes: bp-based frame
.text:00000488
.text:00000488 _mungestr       proc near               ; CODE XREF: _open_settings_w+6Cp
.text:00000488                                         ; _open_settings_r+60p ...
.text:00000488
.text:00000488 var_4           = dword ptr -4
.text:00000488 arg_0           = dword ptr  8
.text:00000488 arg_4           = dword ptr  0Ch
.text:00000488
.text:00000488                 push    ebp
.text:00000489                 mov     ebp, esp
.text:0000048B                 push    ecx
.text:0000048C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000493                 mov     [ebp+var_4], 0
.text:0000049A
.text:0000049A loc_49A:                                ; CODE XREF: _mungestr+ECj
.text:0000049A                 mov     eax, [ebp+arg_0]
.text:0000049D                 movsx   ecx, byte ptr [eax]
.text:000004A0                 test    ecx, ecx
.text:000004A2                 jz      loc_579
.text:000004A8                 mov     edx, [ebp+arg_0]
.text:000004AB                 movsx   eax, byte ptr [edx]
.text:000004AE                 cmp     eax, 20h ; ' '
.text:000004B1                 jz      short loc_506
.text:000004B3                 mov     ecx, [ebp+arg_0]
.text:000004B6                 movsx   edx, byte ptr [ecx]
.text:000004B9                 cmp     edx, 5Ch ; '\'
.text:000004BC                 jz      short loc_506
.text:000004BE                 mov     eax, [ebp+arg_0]
.text:000004C1                 movsx   ecx, byte ptr [eax]
.text:000004C4                 cmp     ecx, 2Ah ; '*'
.text:000004C7                 jz      short loc_506
.text:000004C9                 mov     edx, [ebp+arg_0]
.text:000004CC                 movsx   eax, byte ptr [edx]
.text:000004CF                 cmp     eax, 3Fh ; '?'
.text:000004D2                 jz      short loc_506
.text:000004D4                 mov     ecx, [ebp+arg_0]
.text:000004D7                 movsx   edx, byte ptr [ecx]
.text:000004DA                 cmp     edx, 25h ; '%'
.text:000004DD                 jz      short loc_506
.text:000004DF                 mov     eax, [ebp+arg_0]
.text:000004E2                 movsx   ecx, byte ptr [eax]
.text:000004E5                 cmp     ecx, 20h ; ' '
.text:000004E8                 jl      short loc_506
.text:000004EA                 mov     edx, [ebp+arg_0]
.text:000004ED                 movsx   eax, byte ptr [edx]
.text:000004F0                 cmp     eax, 7Eh ; '~'
.text:000004F3                 jg      short loc_506
.text:000004F5                 mov     ecx, [ebp+arg_0]
.text:000004F8                 movsx   edx, byte ptr [ecx]
.text:000004FB                 cmp     edx, 2Eh ; '.'
.text:000004FE                 jnz     short loc_551
.text:00000500                 cmp     [ebp+var_4], 0
.text:00000504                 jnz     short loc_551
.text:00000506
.text:00000506 loc_506:                                ; CODE XREF: _mungestr+29j
.text:00000506                                         ; _mungestr+34j ...
.text:00000506                 mov     eax, [ebp+arg_4]
.text:00000509                 mov     byte ptr [eax], 25h ; '%'
.text:0000050C                 mov     ecx, [ebp+arg_4]
.text:0000050F                 add     ecx, 1
.text:00000512                 mov     [ebp+arg_4], ecx
.text:00000515                 mov     edx, [ebp+arg_0]
.text:00000518                 movzx   eax, byte ptr [edx]
.text:0000051B                 sar     eax, 4
.text:0000051E                 mov     ecx, [ebp+arg_4]
.text:00000521                 mov     dl, ds:_hex[eax]
.text:00000527                 mov     [ecx], dl
.text:00000529                 mov     eax, [ebp+arg_4]
.text:0000052C                 add     eax, 1
.text:0000052F                 mov     [ebp+arg_4], eax
.text:00000532                 mov     ecx, [ebp+arg_0]
.text:00000535                 movzx   edx, byte ptr [ecx]
.text:00000538                 and     edx, 0Fh
.text:0000053B                 mov     eax, [ebp+arg_4]
.text:0000053E                 mov     cl, ds:_hex[edx]
.text:00000544                 mov     [eax], cl
.text:00000546                 mov     edx, [ebp+arg_4]
.text:00000549                 add     edx, 1
.text:0000054C                 mov     [ebp+arg_4], edx
.text:0000054F                 jmp     short loc_564
.text:00000551 ; ---------------------------------------------------------------------------
.text:00000551
.text:00000551 loc_551:                                ; CODE XREF: _mungestr+76j
.text:00000551                                         ; _mungestr+7Cj
.text:00000551                 mov     eax, [ebp+arg_4]
.text:00000554                 mov     ecx, [ebp+arg_0]
.text:00000557                 mov     dl, [ecx]
.text:00000559                 mov     [eax], dl
.text:0000055B                 mov     eax, [ebp+arg_4]
.text:0000055E                 add     eax, 1
.text:00000561                 mov     [ebp+arg_4], eax
.text:00000564
.text:00000564 loc_564:                                ; CODE XREF: _mungestr+C7j
.text:00000564                 mov     ecx, [ebp+arg_0]
.text:00000567                 add     ecx, 1
.text:0000056A                 mov     [ebp+arg_0], ecx
.text:0000056D                 mov     [ebp+var_4], 1
.text:00000574                 jmp     loc_49A
.text:00000579 ; ---------------------------------------------------------------------------
.text:00000579
.text:00000579 loc_579:                                ; CODE XREF: _mungestr+1Aj
.text:00000579                 mov     edx, [ebp+arg_4]
.text:0000057C                 mov     byte ptr [edx], 0
.text:0000057F                 mov     esp, ebp
.text:00000581                 pop     ebp
.text:00000582                 retn
.text:00000582 _mungestr       endp
.text:00000582
.text:00000582 ; ---------------------------------------------------------------------------
.text:00000583                 align 8
.text:00000588
.text:00000588 ; =============== S U B R O U T I N E =======================================
.text:00000588
.text:00000588 ; Attributes: bp-based frame
.text:00000588
.text:00000588 ; int __cdecl write_setting_s(HKEY hKey, LPCSTR lpValueName, char *Str)
.text:00000588                 public _write_setting_s
.text:00000588 _write_setting_s proc near              ; CODE XREF: _write_setting_fontspec+19p
.text:00000588                                         ; _write_setting_filename+11p
.text:00000588
.text:00000588 hKey            = dword ptr  8
.text:00000588 lpValueName     = dword ptr  0Ch
.text:00000588 Str             = dword ptr  10h
.text:00000588
.text:00000588                 push    ebp
.text:00000589                 mov     ebp, esp
.text:0000058B                 push    esi
.text:0000058C                 cmp     [ebp+hKey], 0
.text:00000590                 jz      short loc_5C1
.text:00000592                 mov     eax, [ebp+Str]
.text:00000595                 push    eax             ; Str
.text:00000596                 call    _strlen
.text:0000059B                 add     esp, 4
.text:0000059E                 add     eax, 1
.text:000005A1                 mov     esi, esp
.text:000005A3                 push    eax             ; cbData
.text:000005A4                 mov     ecx, [ebp+Str]
.text:000005A7                 push    ecx             ; lpData
.text:000005A8                 push    1               ; dwType
.text:000005AA                 push    0               ; Reserved
.text:000005AC                 mov     edx, [ebp+lpValueName]
.text:000005AF                 push    edx             ; lpValueName
.text:000005B0                 mov     eax, [ebp+hKey]
.text:000005B3                 push    eax             ; hKey
.text:000005B4                 call    dword ptr ds:__imp__RegSetValueExA@24 ; RegSetValueExA(x,x,x,x,x,x)
.text:000005BA                 cmp     esi, esp
.text:000005BC                 call    __RTC_CheckEsp
.text:000005C1
.text:000005C1 loc_5C1:                                ; CODE XREF: _write_setting_s+8j
.text:000005C1                 pop     esi
.text:000005C2                 cmp     ebp, esp
.text:000005C4                 call    __RTC_CheckEsp
.text:000005C9                 pop     ebp
.text:000005CA                 retn
.text:000005CA _write_setting_s endp
.text:000005CA
.text:000005CA ; ---------------------------------------------------------------------------
.text:000005CB                 db 0Dh dup(0CCh)
.text:000005D8
.text:000005D8 ; =============== S U B R O U T I N E =======================================
.text:000005D8
.text:000005D8 ; Attributes: bp-based frame
.text:000005D8
.text:000005D8 ; int __cdecl write_setting_i(HKEY hKey, LPCSTR lpValueName, BYTE Data)
.text:000005D8                 public _write_setting_i
.text:000005D8 _write_setting_i proc near              ; CODE XREF: _write_setting_fontspec+46p
.text:000005D8                                         ; _write_setting_fontspec+7Fp ...
.text:000005D8
.text:000005D8 hKey            = dword ptr  8
.text:000005D8 lpValueName     = dword ptr  0Ch
.text:000005D8 Data            = byte ptr  10h
.text:000005D8
.text:000005D8                 push    ebp
.text:000005D9                 mov     ebp, esp
.text:000005DB                 push    esi
.text:000005DC                 cmp     [ebp+hKey], 0
.text:000005E0                 jz      short loc_603
.text:000005E2                 mov     esi, esp
.text:000005E4                 push    4               ; cbData
.text:000005E6                 lea     eax, [ebp+Data]
.text:000005E9                 push    eax             ; lpData
.text:000005EA                 push    4               ; dwType
.text:000005EC                 push    0               ; Reserved
.text:000005EE                 mov     ecx, [ebp+lpValueName]
.text:000005F1                 push    ecx             ; lpValueName
.text:000005F2                 mov     edx, [ebp+hKey]
.text:000005F5                 push    edx             ; hKey
.text:000005F6                 call    dword ptr ds:__imp__RegSetValueExA@24 ; RegSetValueExA(x,x,x,x,x,x)
.text:000005FC                 cmp     esi, esp
.text:000005FE                 call    __RTC_CheckEsp
.text:00000603
.text:00000603 loc_603:                                ; CODE XREF: _write_setting_i+8j
.text:00000603                 pop     esi
.text:00000604                 cmp     ebp, esp
.text:00000606                 call    __RTC_CheckEsp
.text:0000060B                 pop     ebp
.text:0000060C                 retn
.text:0000060C _write_setting_i endp
.text:0000060C
.text:0000060C ; ---------------------------------------------------------------------------
.text:0000060D                 db 0Bh dup(0CCh)
.text:00000618
.text:00000618 ; =============== S U B R O U T I N E =======================================
.text:00000618
.text:00000618 ; Attributes: bp-based frame
.text:00000618
.text:00000618 ; int __cdecl close_settings_w(HKEY hKey)
.text:00000618                 public _close_settings_w
.text:00000618 _close_settings_w proc near
.text:00000618
.text:00000618 hKey            = dword ptr  8
.text:00000618
.text:00000618                 push    ebp
.text:00000619                 mov     ebp, esp
.text:0000061B                 push    esi
.text:0000061C                 mov     esi, esp
.text:0000061E                 mov     eax, [ebp+hKey]
.text:00000621                 push    eax             ; hKey
.text:00000622                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00000628                 cmp     esi, esp
.text:0000062A                 call    __RTC_CheckEsp
.text:0000062F                 pop     esi
.text:00000630                 cmp     ebp, esp
.text:00000632                 call    __RTC_CheckEsp
.text:00000637                 pop     ebp
.text:00000638                 retn
.text:00000638 _close_settings_w endp
.text:00000638
.text:00000638 ; ---------------------------------------------------------------------------
.text:00000639                 db 0Fh dup(0CCh)
.text:00000648
.text:00000648 ; =============== S U B R O U T I N E =======================================
.text:00000648
.text:00000648 ; Attributes: bp-based frame
.text:00000648
.text:00000648 ; int __cdecl open_settings_r(char *Str)
.text:00000648                 public _open_settings_r
.text:00000648 _open_settings_r proc near              ; CODE XREF: _transform_jumplist_registry+28Bp
.text:00000648
.text:00000648 lpSubKey        = dword ptr -1Ch
.text:00000648 var_18          = dword ptr -18h
.text:00000648 var_14          = dword ptr -14h
.text:00000648 var_10          = dword ptr -10h
.text:00000648 var_C           = dword ptr -0Ch
.text:00000648 phkResult       = dword ptr -8
.text:00000648 var_4           = dword ptr -4
.text:00000648 Str             = dword ptr  8
.text:00000648
.text:00000648                 push    ebp
.text:00000649                 mov     ebp, esp
.text:0000064B                 sub     esp, 1Ch
.text:0000064E                 push    esi
.text:0000064F                 mov     eax, 0CCCCCCCCh
.text:00000654                 mov     [ebp+lpSubKey], eax
.text:00000657                 mov     [ebp+var_18], eax
.text:0000065A                 mov     [ebp+var_14], eax
.text:0000065D                 mov     [ebp+var_10], eax
.text:00000660                 mov     [ebp+var_C], eax
.text:00000663                 mov     [ebp+phkResult], eax
.text:00000666                 mov     [ebp+var_4], eax
.text:00000669                 cmp     [ebp+Str], 0
.text:0000066D                 jz      short loc_679
.text:0000066F                 mov     eax, [ebp+Str]
.text:00000672                 movsx   ecx, byte ptr [eax]
.text:00000675                 test    ecx, ecx
.text:00000677                 jnz     short loc_680
.text:00000679
.text:00000679 loc_679:                                ; CODE XREF: _open_settings_r+25j
.text:00000679                 mov     [ebp+Str], offset $SG119624 ; "Default Settings"
.text:00000680
.text:00000680 loc_680:                                ; CODE XREF: _open_settings_r+2Fj
.text:00000680                 push    1
.text:00000682                 mov     edx, [ebp+Str]
.text:00000685                 push    edx             ; Str
.text:00000686                 call    _strlen
.text:0000068B                 add     esp, 4
.text:0000068E                 imul    eax, 3
.text:00000691                 add     eax, 1
.text:00000694                 push    eax
.text:00000695                 call    _safemalloc
.text:0000069A                 add     esp, 8
.text:0000069D                 mov     [ebp+lpSubKey], eax
.text:000006A0                 mov     eax, [ebp+lpSubKey]
.text:000006A3                 push    eax
.text:000006A4                 mov     ecx, [ebp+Str]
.text:000006A7                 push    ecx
.text:000006A8                 call    _mungestr
.text:000006AD                 add     esp, 8
.text:000006B0                 mov     esi, esp
.text:000006B2                 lea     edx, [ebp+phkResult]
.text:000006B5                 push    edx             ; phkResult
.text:000006B6                 mov     eax, ds:_puttystr
.text:000006BB                 push    eax             ; lpSubKey
.text:000006BC                 push    80000001h       ; hKey
.text:000006C1                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:000006C7                 cmp     esi, esp
.text:000006C9                 call    __RTC_CheckEsp
.text:000006CE                 test    eax, eax
.text:000006D0                 jz      short loc_6DB
.text:000006D2                 mov     [ebp+var_14], 0
.text:000006D9                 jmp     short loc_714
.text:000006DB ; ---------------------------------------------------------------------------
.text:000006DB
.text:000006DB loc_6DB:                                ; CODE XREF: _open_settings_r+88j
.text:000006DB                 mov     esi, esp
.text:000006DD                 lea     ecx, [ebp+var_14]
.text:000006E0                 push    ecx             ; phkResult
.text:000006E1                 mov     edx, [ebp+lpSubKey]
.text:000006E4                 push    edx             ; lpSubKey
.text:000006E5                 mov     eax, [ebp+phkResult]
.text:000006E8                 push    eax             ; hKey
.text:000006E9                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:000006EF                 cmp     esi, esp
.text:000006F1                 call    __RTC_CheckEsp
.text:000006F6                 test    eax, eax
.text:000006F8                 jz      short loc_701
.text:000006FA                 mov     [ebp+var_14], 0
.text:00000701
.text:00000701 loc_701:                                ; CODE XREF: _open_settings_r+B0j
.text:00000701                 mov     esi, esp
.text:00000703                 mov     ecx, [ebp+phkResult]
.text:00000706                 push    ecx             ; hKey
.text:00000707                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:0000070D                 cmp     esi, esp
.text:0000070F                 call    __RTC_CheckEsp
.text:00000714
.text:00000714 loc_714:                                ; CODE XREF: _open_settings_r+91j
.text:00000714                 mov     edx, [ebp+lpSubKey]
.text:00000717                 push    edx
.text:00000718                 call    _safefree
.text:0000071D                 add     esp, 4
.text:00000720                 mov     eax, [ebp+var_14]
.text:00000723                 push    edx
.text:00000724                 mov     ecx, ebp
.text:00000726                 push    eax
.text:00000727                 lea     edx, $LN11
.text:0000072D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000732                 pop     eax
.text:00000733                 pop     edx
.text:00000734                 pop     esi
.text:00000735                 add     esp, 1Ch
.text:00000738                 cmp     ebp, esp
.text:0000073A                 call    __RTC_CheckEsp
.text:0000073F                 mov     esp, ebp
.text:00000741                 pop     ebp
.text:00000742                 retn
.text:00000742 _open_settings_r endp
.text:00000742
.text:00000742 ; ---------------------------------------------------------------------------
.text:00000743                 align 4
.text:00000744 $LN11           dd 2                    ; DATA XREF: _open_settings_r+DFo
.text:00000748                 dd offset $LN10_0
.text:0000074C $LN10_0         dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000748o
.text:00000754                 dd offset $LN8_0        ; "subkey1"
.text:00000758                 dd 0FFFFFFECh, 4
.text:00000760                 dd offset $LN9_0        ; "sesskey"
.text:00000764 $LN9_0          db 'sesskey',0          ; DATA XREF: .text:00000760o
.text:0000076C $LN8_0          db 'subkey1',0          ; DATA XREF: .text:00000754o
.text:00000774                 align 8
.text:00000778
.text:00000778 ; =============== S U B R O U T I N E =======================================
.text:00000778
.text:00000778 ; Attributes: bp-based frame
.text:00000778
.text:00000778 ; int __cdecl read_setting_s(HKEY hKey, LPCSTR lpValueName)
.text:00000778                 public _read_setting_s
.text:00000778 _read_setting_s proc near               ; CODE XREF: _read_setting_fontspec+25p
.text:00000778                                         ; _read_setting_filename+1Cp
.text:00000778
.text:00000778 lpData          = dword ptr -20h
.text:00000778 var_1C          = dword ptr -1Ch
.text:00000778 cbData          = dword ptr -18h
.text:00000778 var_14          = dword ptr -14h
.text:00000778 var_10          = dword ptr -10h
.text:00000778 var_C           = dword ptr -0Ch
.text:00000778 Type            = dword ptr -8
.text:00000778 var_4           = dword ptr -4
.text:00000778 hKey            = dword ptr  8
.text:00000778 lpValueName     = dword ptr  0Ch
.text:00000778
.text:00000778                 push    ebp
.text:00000779                 mov     ebp, esp
.text:0000077B                 sub     esp, 20h
.text:0000077E                 push    esi
.text:0000077F                 mov     eax, 0CCCCCCCCh
.text:00000784                 mov     [ebp+lpData], eax
.text:00000787                 mov     [ebp+var_1C], eax
.text:0000078A                 mov     [ebp+cbData], eax
.text:0000078D                 mov     [ebp+var_14], eax
.text:00000790                 mov     [ebp+var_10], eax
.text:00000793                 mov     [ebp+var_C], eax
.text:00000796                 mov     [ebp+Type], eax
.text:00000799                 mov     [ebp+var_4], eax
.text:0000079C                 cmp     [ebp+hKey], 0
.text:000007A0                 jnz     short loc_7A9
.text:000007A2                 xor     eax, eax
.text:000007A4                 jmp     loc_861
.text:000007A9 ; ---------------------------------------------------------------------------
.text:000007A9
.text:000007A9 loc_7A9:                                ; CODE XREF: _read_setting_s+28j
.text:000007A9                 mov     esi, esp
.text:000007AB                 lea     eax, [ebp+cbData]
.text:000007AE                 push    eax             ; lpcbData
.text:000007AF                 push    0               ; lpData
.text:000007B1                 lea     ecx, [ebp+Type]
.text:000007B4                 push    ecx             ; lpType
.text:000007B5                 push    0               ; lpReserved
.text:000007B7                 mov     edx, [ebp+lpValueName]
.text:000007BA                 push    edx             ; lpValueName
.text:000007BB                 mov     eax, [ebp+hKey]
.text:000007BE                 push    eax             ; hKey
.text:000007BF                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:000007C5                 cmp     esi, esp
.text:000007C7                 call    __RTC_CheckEsp
.text:000007CC                 test    eax, eax
.text:000007CE                 jnz     short loc_7D6
.text:000007D0                 cmp     [ebp+Type], 1
.text:000007D4                 jz      short loc_7DD
.text:000007D6
.text:000007D6 loc_7D6:                                ; CODE XREF: _read_setting_s+56j
.text:000007D6                 xor     eax, eax
.text:000007D8                 jmp     loc_861
.text:000007DD ; ---------------------------------------------------------------------------
.text:000007DD
.text:000007DD loc_7DD:                                ; CODE XREF: _read_setting_s+5Cj
.text:000007DD                 mov     ecx, [ebp+cbData]
.text:000007E0                 add     ecx, 1
.text:000007E3                 mov     [ebp+var_10], ecx
.text:000007E6                 push    1
.text:000007E8                 mov     edx, [ebp+var_10]
.text:000007EB                 push    edx
.text:000007EC                 call    _safemalloc
.text:000007F1                 add     esp, 8
.text:000007F4                 mov     [ebp+lpData], eax
.text:000007F7                 mov     esi, esp
.text:000007F9                 lea     eax, [ebp+cbData]
.text:000007FC                 push    eax             ; lpcbData
.text:000007FD                 mov     ecx, [ebp+lpData]
.text:00000800                 push    ecx             ; lpData
.text:00000801                 lea     edx, [ebp+Type]
.text:00000804                 push    edx             ; lpType
.text:00000805                 push    0               ; lpReserved
.text:00000807                 mov     eax, [ebp+lpValueName]
.text:0000080A                 push    eax             ; lpValueName
.text:0000080B                 mov     ecx, [ebp+hKey]
.text:0000080E                 push    ecx             ; hKey
.text:0000080F                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:00000815                 cmp     esi, esp
.text:00000817                 call    __RTC_CheckEsp
.text:0000081C                 test    eax, eax
.text:0000081E                 jnz     short loc_826
.text:00000820                 cmp     [ebp+Type], 1
.text:00000824                 jz      short loc_836
.text:00000826
.text:00000826 loc_826:                                ; CODE XREF: _read_setting_s+A6j
.text:00000826                 mov     edx, [ebp+lpData]
.text:00000829                 push    edx
.text:0000082A                 call    _safefree
.text:0000082F                 add     esp, 4
.text:00000832                 xor     eax, eax
.text:00000834                 jmp     short loc_861
.text:00000836 ; ---------------------------------------------------------------------------
.text:00000836
.text:00000836 loc_836:                                ; CODE XREF: _read_setting_s+ACj
.text:00000836                 mov     eax, [ebp+cbData]
.text:00000839                 cmp     eax, [ebp+var_10]
.text:0000083C                 jb      short loc_855
.text:0000083E                 push    0B0h ; '¦'      ; Line
.text:00000843                 push    offset $SG119659 ; "..\\..\\winstore.c"
.text:00000848                 push    offset $SG119660 ; "size < allocsize"
.text:0000084D                 call    __wassert
.text:00000852 ; ---------------------------------------------------------------------------
.text:00000852                 add     esp, 0Ch
.text:00000855
.text:00000855 loc_855:                                ; CODE XREF: _read_setting_s+C4j
.text:00000855                 mov     edx, [ebp+lpData]
.text:00000858                 add     edx, [ebp+cbData]
.text:0000085B                 mov     byte ptr [edx], 0
.text:0000085E                 mov     eax, [ebp+lpData]
.text:00000861
.text:00000861 loc_861:                                ; CODE XREF: _read_setting_s+2Cj
.text:00000861                                         ; _read_setting_s+60j ...
.text:00000861                 push    edx
.text:00000862                 mov     ecx, ebp
.text:00000864                 push    eax
.text:00000865                 lea     edx, $LN12
.text:0000086B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000870                 pop     eax
.text:00000871                 pop     edx
.text:00000872                 pop     esi
.text:00000873                 add     esp, 20h
.text:00000876                 cmp     ebp, esp
.text:00000878                 call    __RTC_CheckEsp
.text:0000087D                 mov     esp, ebp
.text:0000087F                 pop     ebp
.text:00000880                 retn
.text:00000880 _read_setting_s endp
.text:00000880
.text:00000880 ; ---------------------------------------------------------------------------
.text:00000881                 align 4
.text:00000884 $LN12           dd 2                    ; DATA XREF: _read_setting_s+EDo
.text:00000888                 dd offset $LN11_0
.text:0000088C $LN11_0         dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000888o
.text:00000894                 dd offset $LN9_1        ; "type"
.text:00000898                 dd 0FFFFFFE8h, 4
.text:000008A0                 dd offset $LN10_1       ; "size"
.text:000008A4 $LN10_1         db 'size',0             ; DATA XREF: .text:000008A0o
.text:000008A9 $LN9_1          db 'type',0             ; DATA XREF: .text:00000894o
.text:000008AE                 db 0Ah dup(0CCh)
.text:000008B8
.text:000008B8 ; =============== S U B R O U T I N E =======================================
.text:000008B8
.text:000008B8 ; Attributes: bp-based frame
.text:000008B8
.text:000008B8 ; int __cdecl read_setting_i(HKEY hKey, LPCSTR lpValueName, int)
.text:000008B8                 public _read_setting_i
.text:000008B8 _read_setting_i proc near               ; CODE XREF: _read_setting_fontspec+5Dp
.text:000008B8                                         ; _read_setting_fontspec+ADp ...
.text:000008B8
.text:000008B8 var_24          = dword ptr -24h
.text:000008B8 cbData          = dword ptr -20h
.text:000008B8 var_1C          = dword ptr -1Ch
.text:000008B8 var_18          = dword ptr -18h
.text:000008B8 Data            = byte ptr -14h
.text:000008B8 var_10          = dword ptr -10h
.text:000008B8 var_C           = dword ptr -0Ch
.text:000008B8 Type            = dword ptr -8
.text:000008B8 var_4           = dword ptr -4
.text:000008B8 hKey            = dword ptr  8
.text:000008B8 lpValueName     = dword ptr  0Ch
.text:000008B8 arg_8           = dword ptr  10h
.text:000008B8
.text:000008B8                 push    ebp
.text:000008B9                 mov     ebp, esp
.text:000008BB                 sub     esp, 24h
.text:000008BE                 push    esi
.text:000008BF                 mov     eax, 0CCCCCCCCh
.text:000008C4                 mov     [ebp+var_24], eax
.text:000008C7                 mov     [ebp+cbData], eax
.text:000008CA                 mov     [ebp+var_1C], eax
.text:000008CD                 mov     [ebp+var_18], eax
.text:000008D0                 mov     dword ptr [ebp+Data], eax
.text:000008D3                 mov     [ebp+var_10], eax
.text:000008D6                 mov     [ebp+var_C], eax
.text:000008D9                 mov     [ebp+Type], eax
.text:000008DC                 mov     [ebp+var_4], eax
.text:000008DF                 mov     [ebp+cbData], 4
.text:000008E6                 cmp     [ebp+hKey], 0
.text:000008EA                 jz      short loc_921
.text:000008EC                 mov     esi, esp
.text:000008EE                 lea     eax, [ebp+cbData]
.text:000008F1                 push    eax             ; lpcbData
.text:000008F2                 lea     ecx, [ebp+Data]
.text:000008F5                 push    ecx             ; lpData
.text:000008F6                 lea     edx, [ebp+Type]
.text:000008F9                 push    edx             ; lpType
.text:000008FA                 push    0               ; lpReserved
.text:000008FC                 mov     eax, [ebp+lpValueName]
.text:000008FF                 push    eax             ; lpValueName
.text:00000900                 mov     ecx, [ebp+hKey]
.text:00000903                 push    ecx             ; hKey
.text:00000904                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:0000090A                 cmp     esi, esp
.text:0000090C                 call    __RTC_CheckEsp
.text:00000911                 test    eax, eax
.text:00000913                 jnz     short loc_921
.text:00000915                 cmp     [ebp+cbData], 4
.text:00000919                 jnz     short loc_921
.text:0000091B                 cmp     [ebp+Type], 4
.text:0000091F                 jz      short loc_928
.text:00000921
.text:00000921 loc_921:                                ; CODE XREF: _read_setting_i+32j
.text:00000921                                         ; _read_setting_i+5Bj ...
.text:00000921                 mov     eax, [ebp+arg_8]
.text:00000924                 jmp     short loc_92B
.text:00000926 ; ---------------------------------------------------------------------------
.text:00000926                 jmp     short loc_92B
.text:00000928 ; ---------------------------------------------------------------------------
.text:00000928
.text:00000928 loc_928:                                ; CODE XREF: _read_setting_i+67j
.text:00000928                 mov     eax, dword ptr [ebp+Data]
.text:0000092B
.text:0000092B loc_92B:                                ; CODE XREF: _read_setting_i+6Cj
.text:0000092B                                         ; _read_setting_i+6Ej
.text:0000092B                 push    edx
.text:0000092C                 mov     ecx, ebp
.text:0000092E                 push    eax
.text:0000092F                 lea     edx, $LN10_2
.text:00000935                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000093A                 pop     eax
.text:0000093B                 pop     edx
.text:0000093C                 pop     esi
.text:0000093D                 add     esp, 24h
.text:00000940                 cmp     ebp, esp
.text:00000942                 call    __RTC_CheckEsp
.text:00000947                 mov     esp, ebp
.text:00000949                 pop     ebp
.text:0000094A                 retn
.text:0000094A _read_setting_i endp
.text:0000094A
.text:0000094A ; ---------------------------------------------------------------------------
.text:0000094B                 align 4
.text:0000094C $LN10_2         dd 3                    ; DATA XREF: _read_setting_i+77o
.text:00000950                 dd offset $LN9_2
.text:00000954 $LN9_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000950o
.text:0000095C                 dd offset $LN6          ; "type"
.text:00000960                 dd 0FFFFFFECh, 4
.text:00000968                 dd offset $LN7_0        ; "val"
.text:0000096C                 dd 0FFFFFFE0h, 4
.text:00000974                 dd offset $LN8_1        ; "size"
.text:00000978 $LN8_1          db 'size',0             ; DATA XREF: .text:00000974o
.text:0000097D $LN7_0          db 'val',0              ; DATA XREF: .text:00000968o
.text:00000981 $LN6            db 'type',0             ; DATA XREF: .text:0000095Co
.text:00000986                 align 4
.text:00000988
.text:00000988 ; =============== S U B R O U T I N E =======================================
.text:00000988
.text:00000988 ; Attributes: bp-based frame
.text:00000988
.text:00000988 ; int __cdecl read_setting_fontspec(HKEY hKey, LPCSTR lpValueName)
.text:00000988                 public _read_setting_fontspec
.text:00000988 _read_setting_fontspec proc near
.text:00000988
.text:00000988 var_18          = dword ptr -18h
.text:00000988 var_14          = dword ptr -14h
.text:00000988 var_10          = dword ptr -10h
.text:00000988 var_C           = dword ptr -0Ch
.text:00000988 var_8           = dword ptr -8
.text:00000988 var_4           = dword ptr -4
.text:00000988 hKey            = dword ptr  8
.text:00000988 lpValueName     = dword ptr  0Ch
.text:00000988
.text:00000988                 push    ebp
.text:00000989                 mov     ebp, esp
.text:0000098B                 sub     esp, 18h
.text:0000098E                 mov     eax, 0CCCCCCCCh
.text:00000993                 mov     [ebp+var_18], eax
.text:00000996                 mov     [ebp+var_14], eax
.text:00000999                 mov     [ebp+var_10], eax
.text:0000099C                 mov     [ebp+var_C], eax
.text:0000099F                 mov     [ebp+var_8], eax
.text:000009A2                 mov     [ebp+var_4], eax
.text:000009A5                 mov     eax, [ebp+lpValueName]
.text:000009A8                 push    eax             ; lpValueName
.text:000009A9                 mov     ecx, [ebp+hKey]
.text:000009AC                 push    ecx             ; hKey
.text:000009AD                 call    _read_setting_s
.text:000009B2                 add     esp, 8
.text:000009B5                 mov     [ebp+var_8], eax
.text:000009B8                 cmp     [ebp+var_8], 0
.text:000009BC                 jnz     short loc_9C5
.text:000009BE                 xor     eax, eax
.text:000009C0                 jmp     loc_ADF
.text:000009C5 ; ---------------------------------------------------------------------------
.text:000009C5
.text:000009C5 loc_9C5:                                ; CODE XREF: _read_setting_fontspec+34j
.text:000009C5                 push    0
.text:000009C7                 push    offset $SG119690 ; "IsBold"
.text:000009CC                 mov     edx, [ebp+lpValueName]
.text:000009CF                 push    edx
.text:000009D0                 call    _dupcat
.text:000009D5                 add     esp, 0Ch
.text:000009D8                 mov     [ebp+var_4], eax
.text:000009DB                 push    0FFFFFFFFh      ; int
.text:000009DD                 mov     eax, [ebp+var_4]
.text:000009E0                 push    eax             ; lpValueName
.text:000009E1                 mov     ecx, [ebp+hKey]
.text:000009E4                 push    ecx             ; hKey
.text:000009E5                 call    _read_setting_i
.text:000009EA                 add     esp, 0Ch
.text:000009ED                 mov     [ebp+var_10], eax
.text:000009F0                 mov     edx, [ebp+var_4]
.text:000009F3                 push    edx
.text:000009F4                 call    _safefree
.text:000009F9                 add     esp, 4
.text:000009FC                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00000A00                 jnz     short loc_A15
.text:00000A02                 mov     eax, [ebp+var_8]
.text:00000A05                 push    eax
.text:00000A06                 call    _safefree
.text:00000A0B                 add     esp, 4
.text:00000A0E                 xor     eax, eax
.text:00000A10                 jmp     loc_ADF
.text:00000A15 ; ---------------------------------------------------------------------------
.text:00000A15
.text:00000A15 loc_A15:                                ; CODE XREF: _read_setting_fontspec+78j
.text:00000A15                 push    0
.text:00000A17                 push    offset $SG119694 ; "CharSet"
.text:00000A1C                 mov     ecx, [ebp+lpValueName]
.text:00000A1F                 push    ecx
.text:00000A20                 call    _dupcat
.text:00000A25                 add     esp, 0Ch
.text:00000A28                 mov     [ebp+var_4], eax
.text:00000A2B                 push    0FFFFFFFFh      ; int
.text:00000A2D                 mov     edx, [ebp+var_4]
.text:00000A30                 push    edx             ; lpValueName
.text:00000A31                 mov     eax, [ebp+hKey]
.text:00000A34                 push    eax             ; hKey
.text:00000A35                 call    _read_setting_i
.text:00000A3A                 add     esp, 0Ch
.text:00000A3D                 mov     [ebp+var_18], eax
.text:00000A40                 mov     ecx, [ebp+var_4]
.text:00000A43                 push    ecx
.text:00000A44                 call    _safefree
.text:00000A49                 add     esp, 4
.text:00000A4C                 cmp     [ebp+var_18], 0FFFFFFFFh
.text:00000A50                 jnz     short loc_A62
.text:00000A52                 mov     edx, [ebp+var_8]
.text:00000A55                 push    edx
.text:00000A56                 call    _safefree
.text:00000A5B                 add     esp, 4
.text:00000A5E                 xor     eax, eax
.text:00000A60                 jmp     short loc_ADF
.text:00000A62 ; ---------------------------------------------------------------------------
.text:00000A62
.text:00000A62 loc_A62:                                ; CODE XREF: _read_setting_fontspec+C8j
.text:00000A62                 push    0
.text:00000A64                 push    offset $SG119698 ; "Height"
.text:00000A69                 mov     eax, [ebp+lpValueName]
.text:00000A6C                 push    eax
.text:00000A6D                 call    _dupcat
.text:00000A72                 add     esp, 0Ch
.text:00000A75                 mov     [ebp+var_4], eax
.text:00000A78                 push    80000000h       ; int
.text:00000A7D                 mov     ecx, [ebp+var_4]
.text:00000A80                 push    ecx             ; lpValueName
.text:00000A81                 mov     edx, [ebp+hKey]
.text:00000A84                 push    edx             ; hKey
.text:00000A85                 call    _read_setting_i
.text:00000A8A                 add     esp, 0Ch
.text:00000A8D                 mov     [ebp+var_14], eax
.text:00000A90                 mov     eax, [ebp+var_4]
.text:00000A93                 push    eax
.text:00000A94                 call    _safefree
.text:00000A99                 add     esp, 4
.text:00000A9C                 cmp     [ebp+var_14], 80000000h
.text:00000AA3                 jnz     short loc_AB5
.text:00000AA5                 mov     ecx, [ebp+var_8]
.text:00000AA8                 push    ecx
.text:00000AA9                 call    _safefree
.text:00000AAE                 add     esp, 4
.text:00000AB1                 xor     eax, eax
.text:00000AB3                 jmp     short loc_ADF
.text:00000AB5 ; ---------------------------------------------------------------------------
.text:00000AB5
.text:00000AB5 loc_AB5:                                ; CODE XREF: _read_setting_fontspec+11Bj
.text:00000AB5                 mov     edx, [ebp+var_18]
.text:00000AB8                 push    edx
.text:00000AB9                 mov     eax, [ebp+var_14]
.text:00000ABC                 push    eax
.text:00000ABD                 mov     ecx, [ebp+var_10]
.text:00000AC0                 push    ecx
.text:00000AC1                 mov     edx, [ebp+var_8]
.text:00000AC4                 push    edx
.text:00000AC5                 call    _fontspec_new
.text:00000ACA                 add     esp, 10h
.text:00000ACD                 mov     [ebp+var_C], eax
.text:00000AD0                 mov     eax, [ebp+var_8]
.text:00000AD3                 push    eax
.text:00000AD4                 call    _safefree
.text:00000AD9                 add     esp, 4
.text:00000ADC                 mov     eax, [ebp+var_C]
.text:00000ADF
.text:00000ADF loc_ADF:                                ; CODE XREF: _read_setting_fontspec+38j
.text:00000ADF                                         ; _read_setting_fontspec+88j ...
.text:00000ADF                 add     esp, 18h
.text:00000AE2                 cmp     ebp, esp
.text:00000AE4                 call    __RTC_CheckEsp
.text:00000AE9                 mov     esp, ebp
.text:00000AEB                 pop     ebp
.text:00000AEC                 retn
.text:00000AEC _read_setting_fontspec endp
.text:00000AEC
.text:00000AEC ; ---------------------------------------------------------------------------
.text:00000AED                 db 0Bh dup(0CCh)
.text:00000AF8
.text:00000AF8 ; =============== S U B R O U T I N E =======================================
.text:00000AF8
.text:00000AF8 ; Attributes: bp-based frame
.text:00000AF8
.text:00000AF8 ; int __cdecl write_setting_fontspec(HKEY hKey, LPCSTR lpValueName, int)
.text:00000AF8                 public _write_setting_fontspec
.text:00000AF8 _write_setting_fontspec proc near
.text:00000AF8
.text:00000AF8 var_4           = dword ptr -4
.text:00000AF8 hKey            = dword ptr  8
.text:00000AF8 lpValueName     = dword ptr  0Ch
.text:00000AF8 arg_8           = dword ptr  10h
.text:00000AF8
.text:00000AF8                 push    ebp
.text:00000AF9                 mov     ebp, esp
.text:00000AFB                 push    ecx
.text:00000AFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B03                 mov     eax, [ebp+arg_8]
.text:00000B06                 mov     ecx, [eax]
.text:00000B08                 push    ecx             ; Str
.text:00000B09                 mov     edx, [ebp+lpValueName]
.text:00000B0C                 push    edx             ; lpValueName
.text:00000B0D                 mov     eax, [ebp+hKey]
.text:00000B10                 push    eax             ; hKey
.text:00000B11                 call    _write_setting_s
.text:00000B16                 add     esp, 0Ch
.text:00000B19                 push    0
.text:00000B1B                 push    offset $SG119710 ; "IsBold"
.text:00000B20                 mov     ecx, [ebp+lpValueName]
.text:00000B23                 push    ecx
.text:00000B24                 call    _dupcat
.text:00000B29                 add     esp, 0Ch
.text:00000B2C                 mov     [ebp+var_4], eax
.text:00000B2F                 mov     edx, [ebp+arg_8]
.text:00000B32                 mov     eax, [edx+4]
.text:00000B35                 push    eax             ; Data
.text:00000B36                 mov     ecx, [ebp+var_4]
.text:00000B39                 push    ecx             ; lpValueName
.text:00000B3A                 mov     edx, [ebp+hKey]
.text:00000B3D                 push    edx             ; hKey
.text:00000B3E                 call    _write_setting_i
.text:00000B43                 add     esp, 0Ch
.text:00000B46                 mov     eax, [ebp+var_4]
.text:00000B49                 push    eax
.text:00000B4A                 call    _safefree
.text:00000B4F                 add     esp, 4
.text:00000B52                 push    0
.text:00000B54                 push    offset $SG119712 ; "CharSet"
.text:00000B59                 mov     ecx, [ebp+lpValueName]
.text:00000B5C                 push    ecx
.text:00000B5D                 call    _dupcat
.text:00000B62                 add     esp, 0Ch
.text:00000B65                 mov     [ebp+var_4], eax
.text:00000B68                 mov     edx, [ebp+arg_8]
.text:00000B6B                 mov     eax, [edx+0Ch]
.text:00000B6E                 push    eax             ; Data
.text:00000B6F                 mov     ecx, [ebp+var_4]
.text:00000B72                 push    ecx             ; lpValueName
.text:00000B73                 mov     edx, [ebp+hKey]
.text:00000B76                 push    edx             ; hKey
.text:00000B77                 call    _write_setting_i
.text:00000B7C                 add     esp, 0Ch
.text:00000B7F                 mov     eax, [ebp+var_4]
.text:00000B82                 push    eax
.text:00000B83                 call    _safefree
.text:00000B88                 add     esp, 4
.text:00000B8B                 push    0
.text:00000B8D                 push    offset $SG119714 ; "Height"
.text:00000B92                 mov     ecx, [ebp+lpValueName]
.text:00000B95                 push    ecx
.text:00000B96                 call    _dupcat
.text:00000B9B                 add     esp, 0Ch
.text:00000B9E                 mov     [ebp+var_4], eax
.text:00000BA1                 mov     edx, [ebp+arg_8]
.text:00000BA4                 mov     eax, [edx+8]
.text:00000BA7                 push    eax             ; Data
.text:00000BA8                 mov     ecx, [ebp+var_4]
.text:00000BAB                 push    ecx             ; lpValueName
.text:00000BAC                 mov     edx, [ebp+hKey]
.text:00000BAF                 push    edx             ; hKey
.text:00000BB0                 call    _write_setting_i
.text:00000BB5                 add     esp, 0Ch
.text:00000BB8                 mov     eax, [ebp+var_4]
.text:00000BBB                 push    eax
.text:00000BBC                 call    _safefree
.text:00000BC1                 add     esp, 4
.text:00000BC4                 add     esp, 4
.text:00000BC7                 cmp     ebp, esp
.text:00000BC9                 call    __RTC_CheckEsp
.text:00000BCE                 mov     esp, ebp
.text:00000BD0                 pop     ebp
.text:00000BD1                 retn
.text:00000BD1 _write_setting_fontspec endp
.text:00000BD1
.text:00000BD1 ; ---------------------------------------------------------------------------
.text:00000BD2                 align 8
.text:00000BD8
.text:00000BD8 ; =============== S U B R O U T I N E =======================================
.text:00000BD8
.text:00000BD8 ; Attributes: bp-based frame
.text:00000BD8
.text:00000BD8 ; int __cdecl read_setting_filename(HKEY hKey, LPCSTR lpValueName)
.text:00000BD8                 public _read_setting_filename
.text:00000BD8 _read_setting_filename proc near
.text:00000BD8
.text:00000BD8 var_8           = dword ptr -8
.text:00000BD8 var_4           = dword ptr -4
.text:00000BD8 hKey            = dword ptr  8
.text:00000BD8 lpValueName     = dword ptr  0Ch
.text:00000BD8
.text:00000BD8                 push    ebp
.text:00000BD9                 mov     ebp, esp
.text:00000BDB                 sub     esp, 8
.text:00000BDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BEC                 mov     eax, [ebp+lpValueName]
.text:00000BEF                 push    eax             ; lpValueName
.text:00000BF0                 mov     ecx, [ebp+hKey]
.text:00000BF3                 push    ecx             ; hKey
.text:00000BF4                 call    _read_setting_s
.text:00000BF9                 add     esp, 8
.text:00000BFC                 mov     [ebp+var_4], eax
.text:00000BFF                 cmp     [ebp+var_4], 0
.text:00000C03                 jz      short loc_C27
.text:00000C05                 mov     edx, [ebp+var_4]
.text:00000C08                 push    edx
.text:00000C09                 call    _filename_from_str
.text:00000C0E                 add     esp, 4
.text:00000C11                 mov     [ebp+var_8], eax
.text:00000C14                 mov     eax, [ebp+var_4]
.text:00000C17                 push    eax
.text:00000C18                 call    _safefree
.text:00000C1D                 add     esp, 4
.text:00000C20                 mov     eax, [ebp+var_8]
.text:00000C23                 jmp     short loc_C29
.text:00000C25 ; ---------------------------------------------------------------------------
.text:00000C25                 jmp     short loc_C29
.text:00000C27 ; ---------------------------------------------------------------------------
.text:00000C27
.text:00000C27 loc_C27:                                ; CODE XREF: _read_setting_filename+2Bj
.text:00000C27                 xor     eax, eax
.text:00000C29
.text:00000C29 loc_C29:                                ; CODE XREF: _read_setting_filename+4Bj
.text:00000C29                                         ; _read_setting_filename+4Dj
.text:00000C29                 add     esp, 8
.text:00000C2C                 cmp     ebp, esp
.text:00000C2E                 call    __RTC_CheckEsp
.text:00000C33                 mov     esp, ebp
.text:00000C35                 pop     ebp
.text:00000C36                 retn
.text:00000C36 _read_setting_filename endp
.text:00000C36
.text:00000C36 ; ---------------------------------------------------------------------------
.text:00000C37                 align 4
.text:00000C38
.text:00000C38 ; =============== S U B R O U T I N E =======================================
.text:00000C38
.text:00000C38 ; Attributes: bp-based frame
.text:00000C38
.text:00000C38 ; int __cdecl write_setting_filename(HKEY hKey, LPCSTR lpValueName, int)
.text:00000C38                 public _write_setting_filename
.text:00000C38 _write_setting_filename proc near
.text:00000C38
.text:00000C38 hKey            = dword ptr  8
.text:00000C38 lpValueName     = dword ptr  0Ch
.text:00000C38 arg_8           = dword ptr  10h
.text:00000C38
.text:00000C38                 push    ebp
.text:00000C39                 mov     ebp, esp
.text:00000C3B                 mov     eax, [ebp+arg_8]
.text:00000C3E                 mov     ecx, [eax]
.text:00000C40                 push    ecx             ; Str
.text:00000C41                 mov     edx, [ebp+lpValueName]
.text:00000C44                 push    edx             ; lpValueName
.text:00000C45                 mov     eax, [ebp+hKey]
.text:00000C48                 push    eax             ; hKey
.text:00000C49                 call    _write_setting_s
.text:00000C4E                 add     esp, 0Ch
.text:00000C51                 cmp     ebp, esp
.text:00000C53                 call    __RTC_CheckEsp
.text:00000C58                 pop     ebp
.text:00000C59                 retn
.text:00000C59 _write_setting_filename endp
.text:00000C59
.text:00000C59 ; ---------------------------------------------------------------------------
.text:00000C5A                 db 0Eh dup(0CCh)
.text:00000C68
.text:00000C68 ; =============== S U B R O U T I N E =======================================
.text:00000C68
.text:00000C68 ; Attributes: bp-based frame
.text:00000C68
.text:00000C68 ; int __cdecl close_settings_r(HKEY hKey)
.text:00000C68                 public _close_settings_r
.text:00000C68 _close_settings_r proc near             ; CODE XREF: _transform_jumplist_registry+2A0p
.text:00000C68
.text:00000C68 hKey            = dword ptr  8
.text:00000C68
.text:00000C68                 push    ebp
.text:00000C69                 mov     ebp, esp
.text:00000C6B                 push    esi
.text:00000C6C                 mov     esi, esp
.text:00000C6E                 mov     eax, [ebp+hKey]
.text:00000C71                 push    eax             ; hKey
.text:00000C72                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00000C78                 cmp     esi, esp
.text:00000C7A                 call    __RTC_CheckEsp
.text:00000C7F                 pop     esi
.text:00000C80                 cmp     ebp, esp
.text:00000C82                 call    __RTC_CheckEsp
.text:00000C87                 pop     ebp
.text:00000C88                 retn
.text:00000C88 _close_settings_r endp
.text:00000C88
.text:00000C88 ; ---------------------------------------------------------------------------
.text:00000C89                 db 0Fh dup(0CCh)
.text:00000C98
.text:00000C98 ; =============== S U B R O U T I N E =======================================
.text:00000C98
.text:00000C98 ; Attributes: bp-based frame
.text:00000C98
.text:00000C98 ; int __cdecl del_settings(char *Str)
.text:00000C98                 public _del_settings
.text:00000C98 _del_settings   proc near
.text:00000C98
.text:00000C98 lpSubKey        = dword ptr -10h
.text:00000C98 var_C           = dword ptr -0Ch
.text:00000C98 phkResult       = dword ptr -8
.text:00000C98 var_4           = dword ptr -4
.text:00000C98 Str             = dword ptr  8
.text:00000C98
.text:00000C98                 push    ebp
.text:00000C99                 mov     ebp, esp
.text:00000C9B                 sub     esp, 10h
.text:00000C9E                 push    esi
.text:00000C9F                 mov     eax, 0CCCCCCCCh
.text:00000CA4                 mov     [ebp+lpSubKey], eax
.text:00000CA7                 mov     [ebp+var_C], eax
.text:00000CAA                 mov     [ebp+phkResult], eax
.text:00000CAD                 mov     [ebp+var_4], eax
.text:00000CB0                 mov     esi, esp
.text:00000CB2                 lea     eax, [ebp+phkResult]
.text:00000CB5                 push    eax             ; phkResult
.text:00000CB6                 mov     ecx, ds:_puttystr
.text:00000CBC                 push    ecx             ; lpSubKey
.text:00000CBD                 push    80000001h       ; hKey
.text:00000CC2                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:00000CC8                 cmp     esi, esp
.text:00000CCA                 call    __RTC_CheckEsp
.text:00000CCF                 test    eax, eax
.text:00000CD1                 jz      short loc_CD5
.text:00000CD3                 jmp     short loc_D47
.text:00000CD5 ; ---------------------------------------------------------------------------
.text:00000CD5
.text:00000CD5 loc_CD5:                                ; CODE XREF: _del_settings+39j
.text:00000CD5                 push    1
.text:00000CD7                 mov     edx, [ebp+Str]
.text:00000CDA                 push    edx             ; Str
.text:00000CDB                 call    _strlen
.text:00000CE0                 add     esp, 4
.text:00000CE3                 imul    eax, 3
.text:00000CE6                 add     eax, 1
.text:00000CE9                 push    eax
.text:00000CEA                 call    _safemalloc
.text:00000CEF                 add     esp, 8
.text:00000CF2                 mov     [ebp+lpSubKey], eax
.text:00000CF5                 mov     eax, [ebp+lpSubKey]
.text:00000CF8                 push    eax
.text:00000CF9                 mov     ecx, [ebp+Str]
.text:00000CFC                 push    ecx
.text:00000CFD                 call    _mungestr
.text:00000D02                 add     esp, 8
.text:00000D05                 mov     esi, esp
.text:00000D07                 mov     edx, [ebp+lpSubKey]
.text:00000D0A                 push    edx             ; lpSubKey
.text:00000D0B                 mov     eax, [ebp+phkResult]
.text:00000D0E                 push    eax             ; hKey
.text:00000D0F                 call    dword ptr ds:__imp__RegDeleteKeyA@8 ; RegDeleteKeyA(x,x)
.text:00000D15                 cmp     esi, esp
.text:00000D17                 call    __RTC_CheckEsp
.text:00000D1C                 mov     ecx, [ebp+lpSubKey]
.text:00000D1F                 push    ecx
.text:00000D20                 call    _safefree
.text:00000D25                 add     esp, 4
.text:00000D28                 mov     esi, esp
.text:00000D2A                 mov     edx, [ebp+phkResult]
.text:00000D2D                 push    edx             ; hKey
.text:00000D2E                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00000D34                 cmp     esi, esp
.text:00000D36                 call    __RTC_CheckEsp
.text:00000D3B                 mov     eax, [ebp+Str]
.text:00000D3E                 push    eax
.text:00000D3F                 call    _remove_session_from_jumplist
.text:00000D44                 add     esp, 4
.text:00000D47
.text:00000D47 loc_D47:                                ; CODE XREF: _del_settings+3Bj
.text:00000D47                 push    edx
.text:00000D48                 mov     ecx, ebp
.text:00000D4A                 push    eax
.text:00000D4B                 lea     edx, $LN6_0
.text:00000D51                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D56                 pop     eax
.text:00000D57                 pop     edx
.text:00000D58                 pop     esi
.text:00000D59                 add     esp, 10h
.text:00000D5C                 cmp     ebp, esp
.text:00000D5E                 call    __RTC_CheckEsp
.text:00000D63                 mov     esp, ebp
.text:00000D65                 pop     ebp
.text:00000D66                 retn
.text:00000D66 _del_settings   endp
.text:00000D66
.text:00000D66 ; ---------------------------------------------------------------------------
.text:00000D67                 align 4
.text:00000D68 $LN6_0          dd 1                    ; DATA XREF: _del_settings+B3o
.text:00000D6C                 dd offset $LN5
.text:00000D70 $LN5            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000D6Co
.text:00000D78                 dd offset $LN4          ; "subkey1"
.text:00000D7C $LN4            db 'subkey1',0          ; DATA XREF: .text:00000D78o
.text:00000D84                 align 8
.text:00000D88
.text:00000D88 ; =============== S U B R O U T I N E =======================================
.text:00000D88
.text:00000D88 ; Attributes: bp-based frame
.text:00000D88
.text:00000D88                 public _enum_settings_start
.text:00000D88 _enum_settings_start proc near
.text:00000D88
.text:00000D88 var_10          = dword ptr -10h
.text:00000D88 phkResult       = dword ptr -0Ch
.text:00000D88 var_8           = dword ptr -8
.text:00000D88 var_4           = dword ptr -4
.text:00000D88
.text:00000D88                 push    ebp
.text:00000D89                 mov     ebp, esp
.text:00000D8B                 sub     esp, 10h
.text:00000D8E                 push    esi
.text:00000D8F                 mov     eax, 0CCCCCCCCh
.text:00000D94                 mov     [ebp+var_10], eax
.text:00000D97                 mov     [ebp+phkResult], eax
.text:00000D9A                 mov     [ebp+var_8], eax
.text:00000D9D                 mov     [ebp+var_4], eax
.text:00000DA0                 mov     esi, esp
.text:00000DA2                 lea     eax, [ebp+phkResult]
.text:00000DA5                 push    eax             ; phkResult
.text:00000DA6                 mov     ecx, ds:_puttystr
.text:00000DAC                 push    ecx             ; lpSubKey
.text:00000DAD                 push    80000001h       ; hKey
.text:00000DB2                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:00000DB8                 cmp     esi, esp
.text:00000DBA                 call    __RTC_CheckEsp
.text:00000DBF                 test    eax, eax
.text:00000DC1                 jz      short loc_DC7
.text:00000DC3                 xor     eax, eax
.text:00000DC5                 jmp     short loc_DF1
.text:00000DC7 ; ---------------------------------------------------------------------------
.text:00000DC7
.text:00000DC7 loc_DC7:                                ; CODE XREF: _enum_settings_start+39j
.text:00000DC7                 push    8
.text:00000DC9                 push    1
.text:00000DCB                 call    _safemalloc
.text:00000DD0                 add     esp, 8
.text:00000DD3                 mov     [ebp+var_4], eax
.text:00000DD6                 cmp     [ebp+var_4], 0
.text:00000DDA                 jz      short loc_DEE
.text:00000DDC                 mov     edx, [ebp+var_4]
.text:00000DDF                 mov     eax, [ebp+phkResult]
.text:00000DE2                 mov     [edx], eax
.text:00000DE4                 mov     ecx, [ebp+var_4]
.text:00000DE7                 mov     dword ptr [ecx+4], 0
.text:00000DEE
.text:00000DEE loc_DEE:                                ; CODE XREF: _enum_settings_start+52j
.text:00000DEE                 mov     eax, [ebp+var_4]
.text:00000DF1
.text:00000DF1 loc_DF1:                                ; CODE XREF: _enum_settings_start+3Dj
.text:00000DF1                 push    edx
.text:00000DF2                 mov     ecx, ebp
.text:00000DF4                 push    eax
.text:00000DF5                 lea     edx, $LN7_1
.text:00000DFB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E00                 pop     eax
.text:00000E01                 pop     edx
.text:00000E02                 pop     esi
.text:00000E03                 add     esp, 10h
.text:00000E06                 cmp     ebp, esp
.text:00000E08                 call    __RTC_CheckEsp
.text:00000E0D                 mov     esp, ebp
.text:00000E0F                 pop     ebp
.text:00000E10                 retn
.text:00000E10 _enum_settings_start endp
.text:00000E10
.text:00000E10 ; ---------------------------------------------------------------------------
.text:00000E11                 align 4
.text:00000E14 $LN7_1          dd 1                    ; DATA XREF: _enum_settings_start+6Do
.text:00000E18                 dd offset $LN6_1
.text:00000E1C $LN6_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000E18o
.text:00000E24                 dd offset $LN5_0
.text:00000E28 $LN5_0          dd 79656Bh, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000E24o
.text:00000E38
.text:00000E38 ; =============== S U B R O U T I N E =======================================
.text:00000E38
.text:00000E38 ; Attributes: bp-based frame
.text:00000E38
.text:00000E38                 public _enum_settings_next
.text:00000E38 _enum_settings_next proc near
.text:00000E38
.text:00000E38 dwIndex         = dword ptr -0Ch
.text:00000E38 lpName          = dword ptr -8
.text:00000E38 var_4           = dword ptr -4
.text:00000E38 arg_0           = dword ptr  8
.text:00000E38 arg_4           = dword ptr  0Ch
.text:00000E38 arg_8           = dword ptr  10h
.text:00000E38
.text:00000E38                 push    ebp
.text:00000E39                 mov     ebp, esp
.text:00000E3B                 sub     esp, 0Ch
.text:00000E3E                 push    esi
.text:00000E3F                 mov     [ebp+dwIndex], 0CCCCCCCCh
.text:00000E46                 mov     [ebp+lpName], 0CCCCCCCCh
.text:00000E4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E54                 mov     eax, [ebp+arg_0]
.text:00000E57                 mov     [ebp+var_4], eax
.text:00000E5A                 push    1
.text:00000E5C                 mov     ecx, [ebp+arg_8]
.text:00000E5F                 imul    ecx, 3
.text:00000E62                 push    ecx
.text:00000E63                 call    _safemalloc
.text:00000E68                 add     esp, 8
.text:00000E6B                 mov     [ebp+lpName], eax
.text:00000E6E                 mov     edx, [ebp+var_4]
.text:00000E71                 mov     eax, [edx+4]
.text:00000E74                 mov     [ebp+dwIndex], eax
.text:00000E77                 mov     ecx, [ebp+var_4]
.text:00000E7A                 mov     edx, [ecx+4]
.text:00000E7D                 add     edx, 1
.text:00000E80                 mov     eax, [ebp+var_4]
.text:00000E83                 mov     [eax+4], edx
.text:00000E86                 mov     ecx, [ebp+arg_8]
.text:00000E89                 imul    ecx, 3
.text:00000E8C                 mov     esi, esp
.text:00000E8E                 push    ecx             ; cchName
.text:00000E8F                 mov     edx, [ebp+lpName]
.text:00000E92                 push    edx             ; lpName
.text:00000E93                 mov     eax, [ebp+dwIndex]
.text:00000E96                 push    eax             ; dwIndex
.text:00000E97                 mov     ecx, [ebp+var_4]
.text:00000E9A                 mov     edx, [ecx]
.text:00000E9C                 push    edx             ; hKey
.text:00000E9D                 call    dword ptr ds:__imp__RegEnumKeyA@16 ; RegEnumKeyA(x,x,x,x)
.text:00000EA3                 cmp     esi, esp
.text:00000EA5                 call    __RTC_CheckEsp
.text:00000EAA                 test    eax, eax
.text:00000EAC                 jnz     short loc_ED5
.text:00000EAE                 mov     eax, [ebp+arg_8]
.text:00000EB1                 push    eax
.text:00000EB2                 mov     ecx, [ebp+arg_4]
.text:00000EB5                 push    ecx
.text:00000EB6                 mov     edx, [ebp+lpName]
.text:00000EB9                 push    edx
.text:00000EBA                 call    _unmungestr
.text:00000EBF                 add     esp, 0Ch
.text:00000EC2                 mov     eax, [ebp+lpName]
.text:00000EC5                 push    eax
.text:00000EC6                 call    _safefree
.text:00000ECB                 add     esp, 4
.text:00000ECE                 mov     eax, [ebp+arg_4]
.text:00000ED1                 jmp     short loc_EE3
.text:00000ED3 ; ---------------------------------------------------------------------------
.text:00000ED3                 jmp     short loc_EE3
.text:00000ED5 ; ---------------------------------------------------------------------------
.text:00000ED5
.text:00000ED5 loc_ED5:                                ; CODE XREF: _enum_settings_next+74j
.text:00000ED5                 mov     ecx, [ebp+lpName]
.text:00000ED8                 push    ecx
.text:00000ED9                 call    _safefree
.text:00000EDE                 add     esp, 4
.text:00000EE1                 xor     eax, eax
.text:00000EE3
.text:00000EE3 loc_EE3:                                ; CODE XREF: _enum_settings_next+99j
.text:00000EE3                                         ; _enum_settings_next+9Bj
.text:00000EE3                 pop     esi
.text:00000EE4                 add     esp, 0Ch
.text:00000EE7                 cmp     ebp, esp
.text:00000EE9                 call    __RTC_CheckEsp
.text:00000EEE                 mov     esp, ebp
.text:00000EF0                 pop     ebp
.text:00000EF1                 retn
.text:00000EF1 _enum_settings_next endp
.text:00000EF1
.text:00000EF1 ; ---------------------------------------------------------------------------
.text:00000EF2                 align 8
.text:00000EF8
.text:00000EF8 ; =============== S U B R O U T I N E =======================================
.text:00000EF8
.text:00000EF8 ; Attributes: bp-based frame
.text:00000EF8
.text:00000EF8 _unmungestr     proc near               ; CODE XREF: _enum_settings_next+82p
.text:00000EF8
.text:00000EF8 var_8           = dword ptr -8
.text:00000EF8 var_4           = dword ptr -4
.text:00000EF8 arg_0           = dword ptr  8
.text:00000EF8 arg_4           = dword ptr  0Ch
.text:00000EF8 arg_8           = dword ptr  10h
.text:00000EF8
.text:00000EF8                 push    ebp
.text:00000EF9                 mov     ebp, esp
.text:00000EFB                 sub     esp, 8
.text:00000EFE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F0C
.text:00000F0C loc_F0C:                                ; CODE XREF: _unmungestr:loc_FE3j
.text:00000F0C                 mov     eax, [ebp+arg_0]
.text:00000F0F                 movsx   ecx, byte ptr [eax]
.text:00000F12                 test    ecx, ecx
.text:00000F14                 jz      loc_FE8
.text:00000F1A                 mov     edx, [ebp+arg_0]
.text:00000F1D                 movsx   eax, byte ptr [edx]
.text:00000F20                 cmp     eax, 25h ; '%'
.text:00000F23                 jnz     loc_FBA
.text:00000F29                 mov     ecx, [ebp+arg_0]
.text:00000F2C                 movsx   edx, byte ptr [ecx+1]
.text:00000F30                 test    edx, edx
.text:00000F32                 jz      loc_FBA
.text:00000F38                 mov     eax, [ebp+arg_0]
.text:00000F3B                 movsx   ecx, byte ptr [eax+2]
.text:00000F3F                 test    ecx, ecx
.text:00000F41                 jz      short loc_FBA
.text:00000F43                 mov     edx, [ebp+arg_0]
.text:00000F46                 movsx   eax, byte ptr [edx+1]
.text:00000F4A                 sub     eax, 30h ; '0'
.text:00000F4D                 mov     [ebp+var_4], eax
.text:00000F50                 xor     ecx, ecx
.text:00000F52                 cmp     [ebp+var_4], 9
.text:00000F56                 setle   cl
.text:00000F59                 sub     ecx, 1
.text:00000F5C                 and     ecx, 7
.text:00000F5F                 mov     edx, [ebp+var_4]
.text:00000F62                 sub     edx, ecx
.text:00000F64                 mov     [ebp+var_4], edx
.text:00000F67                 mov     eax, [ebp+arg_0]
.text:00000F6A                 movsx   ecx, byte ptr [eax+2]
.text:00000F6E                 sub     ecx, 30h ; '0'
.text:00000F71                 mov     [ebp+var_8], ecx
.text:00000F74                 xor     edx, edx
.text:00000F76                 cmp     [ebp+var_8], 9
.text:00000F7A                 setle   dl
.text:00000F7D                 sub     edx, 1
.text:00000F80                 and     edx, 7
.text:00000F83                 mov     eax, [ebp+var_8]
.text:00000F86                 sub     eax, edx
.text:00000F88                 mov     [ebp+var_8], eax
.text:00000F8B                 mov     ecx, [ebp+var_4]
.text:00000F8E                 shl     ecx, 4
.text:00000F91                 add     ecx, [ebp+var_8]
.text:00000F94                 mov     edx, [ebp+arg_4]
.text:00000F97                 mov     [edx], cl
.text:00000F99                 mov     eax, [ebp+arg_4]
.text:00000F9C                 add     eax, 1
.text:00000F9F                 mov     [ebp+arg_4], eax
.text:00000FA2                 mov     ecx, [ebp+arg_8]
.text:00000FA5                 sub     ecx, 1
.text:00000FA8                 mov     [ebp+arg_8], ecx
.text:00000FAB                 jnz     short loc_FAF
.text:00000FAD                 jmp     short loc_FEE
.text:00000FAF ; ---------------------------------------------------------------------------
.text:00000FAF
.text:00000FAF loc_FAF:                                ; CODE XREF: _unmungestr+B3j
.text:00000FAF                 mov     edx, [ebp+arg_0]
.text:00000FB2                 add     edx, 3
.text:00000FB5                 mov     [ebp+arg_0], edx
.text:00000FB8                 jmp     short loc_FE3
.text:00000FBA ; ---------------------------------------------------------------------------
.text:00000FBA
.text:00000FBA loc_FBA:                                ; CODE XREF: _unmungestr+2Bj
.text:00000FBA                                         ; _unmungestr+3Aj ...
.text:00000FBA                 mov     eax, [ebp+arg_4]
.text:00000FBD                 mov     ecx, [ebp+arg_0]
.text:00000FC0                 mov     dl, [ecx]
.text:00000FC2                 mov     [eax], dl
.text:00000FC4                 mov     eax, [ebp+arg_4]
.text:00000FC7                 add     eax, 1
.text:00000FCA                 mov     [ebp+arg_4], eax
.text:00000FCD                 mov     ecx, [ebp+arg_0]
.text:00000FD0                 add     ecx, 1
.text:00000FD3                 mov     [ebp+arg_0], ecx
.text:00000FD6                 mov     edx, [ebp+arg_8]
.text:00000FD9                 sub     edx, 1
.text:00000FDC                 mov     [ebp+arg_8], edx
.text:00000FDF                 jnz     short loc_FE3
.text:00000FE1                 jmp     short loc_FEE
.text:00000FE3 ; ---------------------------------------------------------------------------
.text:00000FE3
.text:00000FE3 loc_FE3:                                ; CODE XREF: _unmungestr+C0j
.text:00000FE3                                         ; _unmungestr+E7j
.text:00000FE3                 jmp     loc_F0C
.text:00000FE8 ; ---------------------------------------------------------------------------
.text:00000FE8
.text:00000FE8 loc_FE8:                                ; CODE XREF: _unmungestr+1Cj
.text:00000FE8                 mov     eax, [ebp+arg_4]
.text:00000FEB                 mov     byte ptr [eax], 0
.text:00000FEE
.text:00000FEE loc_FEE:                                ; CODE XREF: _unmungestr+B5j
.text:00000FEE                                         ; _unmungestr+E9j
.text:00000FEE                 mov     esp, ebp
.text:00000FF0                 pop     ebp
.text:00000FF1                 retn
.text:00000FF1 _unmungestr     endp
.text:00000FF1
.text:00000FF1 ; ---------------------------------------------------------------------------
.text:00000FF2                 align 8
.text:00000FF8
.text:00000FF8 ; =============== S U B R O U T I N E =======================================
.text:00000FF8
.text:00000FF8 ; Attributes: bp-based frame
.text:00000FF8
.text:00000FF8                 public _enum_settings_finish
.text:00000FF8 _enum_settings_finish proc near
.text:00000FF8
.text:00000FF8 var_4           = dword ptr -4
.text:00000FF8 arg_0           = dword ptr  8
.text:00000FF8
.text:00000FF8                 push    ebp
.text:00000FF9                 mov     ebp, esp
.text:00000FFB                 push    ecx
.text:00000FFC                 push    esi
.text:00000FFD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001004                 mov     eax, [ebp+arg_0]
.text:00001007                 mov     [ebp+var_4], eax
.text:0000100A                 mov     esi, esp
.text:0000100C                 mov     ecx, [ebp+var_4]
.text:0000100F                 mov     edx, [ecx]
.text:00001011                 push    edx             ; hKey
.text:00001012                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00001018                 cmp     esi, esp
.text:0000101A                 call    __RTC_CheckEsp
.text:0000101F                 mov     eax, [ebp+var_4]
.text:00001022                 push    eax
.text:00001023                 call    _safefree
.text:00001028                 add     esp, 4
.text:0000102B                 pop     esi
.text:0000102C                 add     esp, 4
.text:0000102F                 cmp     ebp, esp
.text:00001031                 call    __RTC_CheckEsp
.text:00001036                 mov     esp, ebp
.text:00001038                 pop     ebp
.text:00001039                 retn
.text:00001039 _enum_settings_finish endp
.text:00001039
.text:00001039 ; ---------------------------------------------------------------------------
.text:0000103A                 db 0Eh dup(0CCh)
.text:00001048
.text:00001048 ; =============== S U B R O U T I N E =======================================
.text:00001048
.text:00001048 ; Attributes: bp-based frame
.text:00001048
.text:00001048 ; int __cdecl verify_host_key(char *, int, char *Str1, char *Str)
.text:00001048                 public _verify_host_key
.text:00001048 _verify_host_key proc near
.text:00001048
.text:00001048 var_58          = dword ptr -58h
.text:00001048 var_54          = dword ptr -54h
.text:00001048 var_50          = dword ptr -50h
.text:00001048 var_4C          = dword ptr -4Ch
.text:00001048 var_48          = dword ptr -48h
.text:00001048 var_44          = dword ptr -44h
.text:00001048 var_40          = dword ptr -40h
.text:00001048 var_3C          = dword ptr -3Ch
.text:00001048 var_38          = dword ptr -38h
.text:00001048 var_34          = dword ptr -34h
.text:00001048 Type            = dword ptr -2Ch
.text:00001048 cbData          = dword ptr -20h
.text:00001048 phkResult       = dword ptr -14h
.text:00001048 var_C           = dword ptr -0Ch
.text:00001048 lpValueName     = dword ptr -8
.text:00001048 lpData          = dword ptr -4
.text:00001048 arg_0           = dword ptr  8
.text:00001048 arg_4           = dword ptr  0Ch
.text:00001048 Str1            = dword ptr  10h
.text:00001048 Str             = dword ptr  14h
.text:00001048
.text:00001048                 push    ebp
.text:00001049                 mov     ebp, esp
.text:0000104B                 sub     esp, 58h
.text:0000104E                 push    esi
.text:0000104F                 push    edi
.text:00001050                 lea     edi, [ebp+var_58]
.text:00001053                 mov     ecx, 16h
.text:00001058                 mov     eax, 0CCCCCCCCh
.text:0000105D                 rep stosd
.text:0000105F                 mov     eax, [ebp+Str]
.text:00001062                 push    eax             ; Str
.text:00001063                 call    _strlen
.text:00001068                 add     esp, 4
.text:0000106B                 add     eax, 1
.text:0000106E                 mov     [ebp+var_C], eax
.text:00001071                 push    1
.text:00001073                 mov     ecx, [ebp+arg_0]
.text:00001076                 push    ecx             ; Str
.text:00001077                 call    _strlen
.text:0000107C                 add     esp, 4
.text:0000107F                 mov     esi, eax
.text:00001081                 mov     edx, [ebp+Str1]
.text:00001084                 push    edx             ; Str
.text:00001085                 call    _strlen
.text:0000108A                 add     esp, 4
.text:0000108D                 add     esi, eax
.text:0000108F                 imul    esi, 3
.text:00001092                 add     esi, 0Fh
.text:00001095                 push    esi
.text:00001096                 call    _safemalloc
.text:0000109B                 add     esp, 8
.text:0000109E                 mov     [ebp+lpValueName], eax
.text:000010A1                 mov     eax, [ebp+Str1]
.text:000010A4                 push    eax             ; Source
.text:000010A5                 mov     ecx, [ebp+arg_4]
.text:000010A8                 push    ecx             ; int
.text:000010A9                 mov     edx, [ebp+arg_0]
.text:000010AC                 push    edx             ; int
.text:000010AD                 mov     eax, [ebp+lpValueName]
.text:000010B0                 push    eax             ; Dest
.text:000010B1                 call    _hostkey_regname
.text:000010B6                 add     esp, 10h
.text:000010B9                 mov     esi, esp
.text:000010BB                 lea     ecx, [ebp+phkResult]
.text:000010BE                 push    ecx             ; phkResult
.text:000010BF                 push    offset $SG119818 ; "Software\\SimonTatham\\PuTTY\\SshHostKe"...
.text:000010C4                 push    80000001h       ; hKey
.text:000010C9                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:000010CF                 cmp     esi, esp
.text:000010D1                 call    __RTC_CheckEsp
.text:000010D6                 test    eax, eax
.text:000010D8                 jz      short loc_10F0
.text:000010DA                 mov     edx, [ebp+lpValueName]
.text:000010DD                 push    edx
.text:000010DE                 call    _safefree
.text:000010E3                 add     esp, 4
.text:000010E6                 mov     eax, 1
.text:000010EB                 jmp     loc_13A0
.text:000010F0 ; ---------------------------------------------------------------------------
.text:000010F0
.text:000010F0 loc_10F0:                               ; CODE XREF: _verify_host_key+90j
.text:000010F0                 mov     eax, [ebp+var_C]
.text:000010F3                 mov     [ebp+cbData], eax
.text:000010F6                 push    1
.text:000010F8                 mov     ecx, [ebp+var_C]
.text:000010FB                 push    ecx
.text:000010FC                 call    _safemalloc
.text:00001101                 add     esp, 8
.text:00001104                 mov     [ebp+lpData], eax
.text:00001107                 mov     esi, esp
.text:00001109                 lea     edx, [ebp+cbData]
.text:0000110C                 push    edx             ; lpcbData
.text:0000110D                 mov     eax, [ebp+lpData]
.text:00001110                 push    eax             ; lpData
.text:00001111                 lea     ecx, [ebp+Type]
.text:00001114                 push    ecx             ; lpType
.text:00001115                 push    0               ; lpReserved
.text:00001117                 mov     edx, [ebp+lpValueName]
.text:0000111A                 push    edx             ; lpValueName
.text:0000111B                 mov     eax, [ebp+phkResult]
.text:0000111E                 push    eax             ; hKey
.text:0000111F                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:00001125                 cmp     esi, esp
.text:00001127                 call    __RTC_CheckEsp
.text:0000112C                 mov     [ebp+var_34], eax
.text:0000112F                 cmp     [ebp+var_34], 0
.text:00001133                 jz      loc_1327
.text:00001139                 cmp     [ebp+var_34], 0EAh ; 'O'
.text:00001140                 jz      loc_1327
.text:00001146                 push    offset $SG119823 ; "rsa"
.text:0000114B                 mov     ecx, [ebp+Str1]
.text:0000114E                 push    ecx             ; Str1
.text:0000114F                 call    _strcmp
.text:00001154                 add     esp, 8
.text:00001157                 test    eax, eax
.text:00001159                 jnz     loc_1327
.text:0000115F                 push    offset $SG119825 ; Control
.text:00001164                 mov     edx, [ebp+lpValueName]
.text:00001167                 push    edx             ; Str
.text:00001168                 call    _strcspn
.text:0000116D                 add     esp, 8
.text:00001170                 mov     ecx, [ebp+lpValueName]
.text:00001173                 lea     edx, [ecx+eax+1]
.text:00001177                 mov     [ebp+var_3C], edx
.text:0000117A                 push    1
.text:0000117C                 mov     eax, [ebp+var_C]
.text:0000117F                 add     eax, 0Ah
.text:00001182                 push    eax
.text:00001183                 call    _safemalloc
.text:00001188                 add     esp, 8
.text:0000118B                 mov     [ebp+var_40], eax
.text:0000118E                 mov     ecx, [ebp+var_C]
.text:00001191                 mov     [ebp+cbData], ecx
.text:00001194                 mov     esi, esp
.text:00001196                 lea     edx, [ebp+cbData]
.text:00001199                 push    edx             ; lpcbData
.text:0000119A                 mov     eax, [ebp+var_40]
.text:0000119D                 push    eax             ; lpData
.text:0000119E                 lea     ecx, [ebp+Type]
.text:000011A1                 push    ecx             ; lpType
.text:000011A2                 push    0               ; lpReserved
.text:000011A4                 mov     edx, [ebp+var_3C]
.text:000011A7                 push    edx             ; lpValueName
.text:000011A8                 mov     eax, [ebp+phkResult]
.text:000011AB                 push    eax             ; hKey
.text:000011AC                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:000011B2                 cmp     esi, esp
.text:000011B4                 call    __RTC_CheckEsp
.text:000011B9                 mov     [ebp+var_34], eax
.text:000011BC                 cmp     [ebp+var_34], 0
.text:000011C0                 jnz     loc_131B
.text:000011C6                 cmp     [ebp+Type], 1
.text:000011CA                 jnz     loc_131B
.text:000011D0                 mov     ecx, [ebp+lpData]
.text:000011D3                 mov     [ebp+var_44], ecx
.text:000011D6                 mov     edx, [ebp+var_40]
.text:000011D9                 mov     [ebp+var_48], edx
.text:000011DC                 mov     [ebp+var_4C], 0
.text:000011E3                 jmp     short loc_11EE
.text:000011E5 ; ---------------------------------------------------------------------------
.text:000011E5
.text:000011E5 loc_11E5:                               ; CODE XREF: _verify_host_key+28Bj
.text:000011E5                 mov     eax, [ebp+var_4C]
.text:000011E8                 add     eax, 1
.text:000011EB                 mov     [ebp+var_4C], eax
.text:000011EE
.text:000011EE loc_11EE:                               ; CODE XREF: _verify_host_key+19Bj
.text:000011EE                 cmp     [ebp+var_4C], 2
.text:000011F2                 jge     loc_12D8
.text:000011F8                 mov     ecx, [ebp+var_44]
.text:000011FB                 mov     byte ptr [ecx], 30h ; '0'
.text:000011FE                 mov     edx, [ebp+var_44]
.text:00001201                 add     edx, 1
.text:00001204                 mov     [ebp+var_44], edx
.text:00001207                 mov     eax, [ebp+var_44]
.text:0000120A                 mov     byte ptr [eax], 78h ; 'x'
.text:0000120D                 mov     ecx, [ebp+var_44]
.text:00001210                 add     ecx, 1
.text:00001213                 mov     [ebp+var_44], ecx
.text:00001216                 push    offset $SG119840 ; Control
.text:0000121B                 mov     edx, [ebp+var_48]
.text:0000121E                 push    edx             ; Str
.text:0000121F                 call    _strcspn
.text:00001224                 add     esp, 8
.text:00001227                 mov     [ebp+var_54], eax
.text:0000122A                 mov     eax, [ebp+var_54]
.text:0000122D                 cdq
.text:0000122E                 and     edx, 3
.text:00001231                 add     eax, edx
.text:00001233                 sar     eax, 2
.text:00001236                 mov     [ebp+var_58], eax
.text:00001239
.text:00001239 loc_1239:                               ; CODE XREF: _verify_host_key+215j
.text:00001239                 mov     eax, [ebp+var_54]
.text:0000123C                 sub     eax, 1
.text:0000123F                 xor     eax, 3
.text:00001242                 mov     ecx, [ebp+var_48]
.text:00001245                 movsx   edx, byte ptr [ecx+eax]
.text:00001249                 cmp     edx, 30h ; '0'
.text:0000124C                 jnz     short loc_125F
.text:0000124E                 cmp     [ebp+var_54], 1
.text:00001252                 jle     short loc_125F
.text:00001254                 mov     eax, [ebp+var_54]
.text:00001257                 sub     eax, 1
.text:0000125A                 mov     [ebp+var_54], eax
.text:0000125D                 jmp     short loc_1239
.text:0000125F ; ---------------------------------------------------------------------------
.text:0000125F
.text:0000125F loc_125F:                               ; CODE XREF: _verify_host_key+204j
.text:0000125F                                         ; _verify_host_key+20Aj
.text:0000125F                 mov     [ebp+var_50], 0
.text:00001266                 jmp     short loc_1271
.text:00001268 ; ---------------------------------------------------------------------------
.text:00001268
.text:00001268 loc_1268:                               ; CODE XREF: _verify_host_key+24Cj
.text:00001268                 mov     ecx, [ebp+var_50]
.text:0000126B                 add     ecx, 1
.text:0000126E                 mov     [ebp+var_50], ecx
.text:00001271
.text:00001271 loc_1271:                               ; CODE XREF: _verify_host_key+21Ej
.text:00001271                 mov     edx, [ebp+var_50]
.text:00001274                 cmp     edx, [ebp+var_54]
.text:00001277                 jge     short loc_1296
.text:00001279                 mov     eax, [ebp+var_50]
.text:0000127C                 xor     eax, 3
.text:0000127F                 mov     ecx, [ebp+var_54]
.text:00001282                 sub     ecx, 1
.text:00001285                 sub     ecx, [ebp+var_50]
.text:00001288                 mov     edx, [ebp+var_44]
.text:0000128B                 mov     esi, [ebp+var_48]
.text:0000128E                 mov     al, [esi+eax]
.text:00001291                 mov     [edx+ecx], al
.text:00001294                 jmp     short loc_1268
.text:00001296 ; ---------------------------------------------------------------------------
.text:00001296
.text:00001296 loc_1296:                               ; CODE XREF: _verify_host_key+22Fj
.text:00001296                 mov     ecx, [ebp+var_44]
.text:00001299                 add     ecx, [ebp+var_54]
.text:0000129C                 mov     [ebp+var_44], ecx
.text:0000129F                 mov     edx, [ebp+var_58]
.text:000012A2                 mov     eax, [ebp+var_48]
.text:000012A5                 lea     ecx, [eax+edx*4]
.text:000012A8                 mov     [ebp+var_48], ecx
.text:000012AB                 mov     edx, [ebp+var_48]
.text:000012AE                 movsx   eax, byte ptr [edx]
.text:000012B1                 test    eax, eax
.text:000012B3                 jz      short loc_12CD
.text:000012B5                 mov     ecx, [ebp+var_48]
.text:000012B8                 add     ecx, 1
.text:000012BB                 mov     [ebp+var_48], ecx
.text:000012BE                 mov     edx, [ebp+var_44]
.text:000012C1                 mov     byte ptr [edx], 2Ch ; ','
.text:000012C4                 mov     eax, [ebp+var_44]
.text:000012C7                 add     eax, 1
.text:000012CA                 mov     [ebp+var_44], eax
.text:000012CD
.text:000012CD loc_12CD:                               ; CODE XREF: _verify_host_key+26Bj
.text:000012CD                 mov     ecx, [ebp+var_44]
.text:000012D0                 mov     byte ptr [ecx], 0
.text:000012D3                 jmp     loc_11E5
.text:000012D8 ; ---------------------------------------------------------------------------
.text:000012D8
.text:000012D8 loc_12D8:                               ; CODE XREF: _verify_host_key+1AAj
.text:000012D8                 mov     edx, [ebp+Str]
.text:000012DB                 push    edx             ; Str2
.text:000012DC                 mov     eax, [ebp+lpData]
.text:000012DF                 push    eax             ; Str1
.text:000012E0                 call    _strcmp
.text:000012E5                 add     esp, 8
.text:000012E8                 test    eax, eax
.text:000012EA                 jnz     short loc_131B
.text:000012EC                 mov     ecx, [ebp+lpData]
.text:000012EF                 push    ecx             ; Str
.text:000012F0                 call    _strlen
.text:000012F5                 add     esp, 4
.text:000012F8                 add     eax, 1
.text:000012FB                 mov     esi, esp
.text:000012FD                 push    eax             ; cbData
.text:000012FE                 mov     edx, [ebp+lpData]
.text:00001301                 push    edx             ; lpData
.text:00001302                 push    1               ; dwType
.text:00001304                 push    0               ; Reserved
.text:00001306                 mov     eax, [ebp+lpValueName]
.text:00001309                 push    eax             ; lpValueName
.text:0000130A                 mov     ecx, [ebp+phkResult]
.text:0000130D                 push    ecx             ; hKey
.text:0000130E                 call    dword ptr ds:__imp__RegSetValueExA@24 ; RegSetValueExA(x,x,x,x,x,x)
.text:00001314                 cmp     esi, esp
.text:00001316                 call    __RTC_CheckEsp
.text:0000131B
.text:0000131B loc_131B:                               ; CODE XREF: _verify_host_key+178j
.text:0000131B                                         ; _verify_host_key+182j ...
.text:0000131B                 mov     edx, [ebp+var_40]
.text:0000131E                 push    edx
.text:0000131F                 call    _safefree
.text:00001324                 add     esp, 4
.text:00001327
.text:00001327 loc_1327:                               ; CODE XREF: _verify_host_key+EBj
.text:00001327                                         ; _verify_host_key+F8j ...
.text:00001327                 mov     esi, esp
.text:00001329                 mov     eax, [ebp+phkResult]
.text:0000132C                 push    eax             ; hKey
.text:0000132D                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00001333                 cmp     esi, esp
.text:00001335                 call    __RTC_CheckEsp
.text:0000133A                 mov     ecx, [ebp+Str]
.text:0000133D                 push    ecx             ; Str2
.text:0000133E                 mov     edx, [ebp+lpData]
.text:00001341                 push    edx             ; Str1
.text:00001342                 call    _strcmp
.text:00001347                 add     esp, 8
.text:0000134A                 mov     [ebp+var_38], eax
.text:0000134D                 mov     eax, [ebp+lpData]
.text:00001350                 push    eax
.text:00001351                 call    _safefree
.text:00001356                 add     esp, 4
.text:00001359                 mov     ecx, [ebp+lpValueName]
.text:0000135C                 push    ecx
.text:0000135D                 call    _safefree
.text:00001362                 add     esp, 4
.text:00001365                 cmp     [ebp+var_34], 0EAh ; 'O'
.text:0000136C                 jz      short loc_1380
.text:0000136E                 cmp     [ebp+var_34], 0
.text:00001372                 jnz     short loc_1389
.text:00001374                 cmp     [ebp+Type], 1
.text:00001378                 jnz     short loc_1389
.text:0000137A                 cmp     [ebp+var_38], 0
.text:0000137E                 jz      short loc_1389
.text:00001380
.text:00001380 loc_1380:                               ; CODE XREF: _verify_host_key+324j
.text:00001380                 mov     eax, 2
.text:00001385                 jmp     short loc_13A0
.text:00001387 ; ---------------------------------------------------------------------------
.text:00001387                 jmp     short loc_13A0
.text:00001389 ; ---------------------------------------------------------------------------
.text:00001389
.text:00001389 loc_1389:                               ; CODE XREF: _verify_host_key+32Aj
.text:00001389                                         ; _verify_host_key+330j ...
.text:00001389                 cmp     [ebp+var_34], 0
.text:0000138D                 jnz     short loc_1395
.text:0000138F                 cmp     [ebp+Type], 1
.text:00001393                 jz      short loc_139E
.text:00001395
.text:00001395 loc_1395:                               ; CODE XREF: _verify_host_key+345j
.text:00001395                 mov     eax, 1
.text:0000139A                 jmp     short loc_13A0
.text:0000139C ; ---------------------------------------------------------------------------
.text:0000139C                 jmp     short loc_13A0
.text:0000139E ; ---------------------------------------------------------------------------
.text:0000139E
.text:0000139E loc_139E:                               ; CODE XREF: _verify_host_key+34Bj
.text:0000139E                 xor     eax, eax
.text:000013A0
.text:000013A0 loc_13A0:                               ; CODE XREF: _verify_host_key+A3j
.text:000013A0                                         ; _verify_host_key+33Dj ...
.text:000013A0                 push    edx
.text:000013A1                 mov     ecx, ebp
.text:000013A3                 push    eax
.text:000013A4                 lea     edx, $LN26
.text:000013AA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000013AF                 pop     eax
.text:000013B0                 pop     edx
.text:000013B1                 pop     edi
.text:000013B2                 pop     esi
.text:000013B3                 add     esp, 58h
.text:000013B6                 cmp     ebp, esp
.text:000013B8                 call    __RTC_CheckEsp
.text:000013BD                 mov     esp, ebp
.text:000013BF                 pop     ebp
.text:000013C0                 retn
.text:000013C0 _verify_host_key endp
.text:000013C0
.text:000013C0 ; ---------------------------------------------------------------------------
.text:000013C1                 align 4
.text:000013C4 $LN26           dd 3                    ; DATA XREF: _verify_host_key+35Co
.text:000013C8                 dd offset $LN25
.text:000013CC $LN25           dd 0FFFFFFECh, 4        ; DATA XREF: .text:000013C8o
.text:000013D4                 dd offset $LN22         ; "rkey"
.text:000013D8                 dd 0FFFFFFE0h, 4
.text:000013E0                 dd offset $LN23         ; "readlen"
.text:000013E4                 dd 0FFFFFFD4h, 4
.text:000013EC                 dd offset $LN24         ; "type"
.text:000013F0 $LN24           db 'type',0             ; DATA XREF: .text:000013ECo
.text:000013F5 $LN23           db 'readlen',0          ; DATA XREF: .text:000013E0o
.text:000013FD $LN22           db 'rkey',0             ; DATA XREF: .text:000013D4o
.text:00001402                 align 8
.text:00001408
.text:00001408 ; =============== S U B R O U T I N E =======================================
.text:00001408
.text:00001408 ; Attributes: bp-based frame
.text:00001408
.text:00001408 ; int __cdecl hostkey_regname(char *Dest, int, int, char *Source)
.text:00001408 _hostkey_regname proc near              ; CODE XREF: _verify_host_key+69p
.text:00001408                                         ; _store_host_key+58p
.text:00001408
.text:00001408 var_4           = dword ptr -4
.text:00001408 Dest            = dword ptr  8
.text:00001408 arg_4           = dword ptr  0Ch
.text:00001408 arg_8           = dword ptr  10h
.text:00001408 Source          = dword ptr  14h
.text:00001408
.text:00001408                 push    ebp
.text:00001409                 mov     ebp, esp
.text:0000140B                 push    ecx
.text:0000140C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001413                 mov     eax, [ebp+Source]
.text:00001416                 push    eax             ; Source
.text:00001417                 mov     ecx, [ebp+Dest]
.text:0000141A                 push    ecx             ; Dest
.text:0000141B                 call    _strcpy
.text:00001420                 add     esp, 8
.text:00001423                 push    offset $SG119793 ; Source
.text:00001428                 mov     edx, [ebp+Dest]
.text:0000142B                 push    edx             ; Dest
.text:0000142C                 call    _strcat
.text:00001431                 add     esp, 8
.text:00001434                 mov     eax, [ebp+Dest]
.text:00001437                 push    eax             ; Str
.text:00001438                 call    _strlen
.text:0000143D                 add     esp, 4
.text:00001440                 mov     [ebp+var_4], eax
.text:00001443                 mov     ecx, [ebp+arg_8]
.text:00001446                 push    ecx
.text:00001447                 push    offset $SG119794 ; "%d:"
.text:0000144C                 mov     edx, [ebp+Dest]
.text:0000144F                 add     edx, [ebp+var_4]
.text:00001452                 push    edx             ; Dest
.text:00001453                 call    _sprintf
.text:00001458                 add     esp, 0Ch
.text:0000145B                 add     eax, [ebp+var_4]
.text:0000145E                 mov     [ebp+var_4], eax
.text:00001461                 mov     eax, [ebp+Dest]
.text:00001464                 push    eax             ; Str
.text:00001465                 call    _strlen
.text:0000146A                 add     esp, 4
.text:0000146D                 add     eax, [ebp+Dest]
.text:00001470                 push    eax
.text:00001471                 mov     ecx, [ebp+arg_4]
.text:00001474                 push    ecx
.text:00001475                 call    _mungestr
.text:0000147A                 add     esp, 8
.text:0000147D                 add     esp, 4
.text:00001480                 cmp     ebp, esp
.text:00001482                 call    __RTC_CheckEsp
.text:00001487                 mov     esp, ebp
.text:00001489                 pop     ebp
.text:0000148A                 retn
.text:0000148A _hostkey_regname endp
.text:0000148A
.text:0000148A ; ---------------------------------------------------------------------------
.text:0000148B                 db 0Dh dup(0CCh)
.text:00001498
.text:00001498 ; =============== S U B R O U T I N E =======================================
.text:00001498
.text:00001498 ; Attributes: bp-based frame
.text:00001498
.text:00001498 ; int __cdecl store_host_key(char *Str, int, char *Source, BYTE *lpData)
.text:00001498                 public _store_host_key
.text:00001498 _store_host_key proc near
.text:00001498
.text:00001498 var_10          = dword ptr -10h
.text:00001498 phkResult       = dword ptr -0Ch
.text:00001498 var_8           = dword ptr -8
.text:00001498 lpValueName     = dword ptr -4
.text:00001498 Str             = dword ptr  8
.text:00001498 arg_4           = dword ptr  0Ch
.text:00001498 Source          = dword ptr  10h
.text:00001498 lpData          = dword ptr  14h
.text:00001498
.text:00001498                 push    ebp
.text:00001499                 mov     ebp, esp
.text:0000149B                 sub     esp, 10h
.text:0000149E                 push    esi
.text:0000149F                 mov     eax, 0CCCCCCCCh
.text:000014A4                 mov     [ebp+var_10], eax
.text:000014A7                 mov     [ebp+phkResult], eax
.text:000014AA                 mov     [ebp+var_8], eax
.text:000014AD                 mov     [ebp+lpValueName], eax
.text:000014B0                 push    1
.text:000014B2                 mov     eax, [ebp+Str]
.text:000014B5                 push    eax             ; Str
.text:000014B6                 call    _strlen
.text:000014BB                 add     esp, 4
.text:000014BE                 mov     esi, eax
.text:000014C0                 mov     ecx, [ebp+Source]
.text:000014C3                 push    ecx             ; Str
.text:000014C4                 call    _strlen
.text:000014C9                 add     esp, 4
.text:000014CC                 add     esi, eax
.text:000014CE                 imul    esi, 3
.text:000014D1                 add     esi, 0Fh
.text:000014D4                 push    esi
.text:000014D5                 call    _safemalloc
.text:000014DA                 add     esp, 8
.text:000014DD                 mov     [ebp+lpValueName], eax
.text:000014E0                 mov     edx, [ebp+Source]
.text:000014E3                 push    edx             ; Source
.text:000014E4                 mov     eax, [ebp+arg_4]
.text:000014E7                 push    eax             ; int
.text:000014E8                 mov     ecx, [ebp+Str]
.text:000014EB                 push    ecx             ; int
.text:000014EC                 mov     edx, [ebp+lpValueName]
.text:000014EF                 push    edx             ; Dest
.text:000014F0                 call    _hostkey_regname
.text:000014F5                 add     esp, 10h
.text:000014F8                 mov     esi, esp
.text:000014FA                 lea     eax, [ebp+phkResult]
.text:000014FD                 push    eax             ; phkResult
.text:000014FE                 push    offset $SG119872 ; "Software\\SimonTatham\\PuTTY\\SshHostKe"...
.text:00001503                 push    80000001h       ; hKey
.text:00001508                 call    dword ptr ds:__imp__RegCreateKeyA@12 ; RegCreateKeyA(x,x,x)
.text:0000150E                 cmp     esi, esp
.text:00001510                 call    __RTC_CheckEsp
.text:00001515                 test    eax, eax
.text:00001517                 jnz     short loc_155B
.text:00001519                 mov     ecx, [ebp+lpData]
.text:0000151C                 push    ecx             ; Str
.text:0000151D                 call    _strlen
.text:00001522                 add     esp, 4
.text:00001525                 add     eax, 1
.text:00001528                 mov     esi, esp
.text:0000152A                 push    eax             ; cbData
.text:0000152B                 mov     edx, [ebp+lpData]
.text:0000152E                 push    edx             ; lpData
.text:0000152F                 push    1               ; dwType
.text:00001531                 push    0               ; Reserved
.text:00001533                 mov     eax, [ebp+lpValueName]
.text:00001536                 push    eax             ; lpValueName
.text:00001537                 mov     ecx, [ebp+phkResult]
.text:0000153A                 push    ecx             ; hKey
.text:0000153B                 call    dword ptr ds:__imp__RegSetValueExA@24 ; RegSetValueExA(x,x,x,x,x,x)
.text:00001541                 cmp     esi, esp
.text:00001543                 call    __RTC_CheckEsp
.text:00001548                 mov     esi, esp
.text:0000154A                 mov     edx, [ebp+phkResult]
.text:0000154D                 push    edx             ; hKey
.text:0000154E                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00001554                 cmp     esi, esp
.text:00001556                 call    __RTC_CheckEsp
.text:0000155B
.text:0000155B loc_155B:                               ; CODE XREF: _store_host_key+7Fj
.text:0000155B                 mov     eax, [ebp+lpValueName]
.text:0000155E                 push    eax
.text:0000155F                 call    _safefree
.text:00001564                 add     esp, 4
.text:00001567                 push    edx
.text:00001568                 mov     ecx, ebp
.text:0000156A                 push    eax
.text:0000156B                 lea     edx, $LN6_2
.text:00001571                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001576                 pop     eax
.text:00001577                 pop     edx
.text:00001578                 pop     esi
.text:00001579                 add     esp, 10h
.text:0000157C                 cmp     ebp, esp
.text:0000157E                 call    __RTC_CheckEsp
.text:00001583                 mov     esp, ebp
.text:00001585                 pop     ebp
.text:00001586                 retn
.text:00001586 _store_host_key endp
.text:00001586
.text:00001586 ; ---------------------------------------------------------------------------
.text:00001587                 align 4
.text:00001588 $LN6_2          dd 1                    ; DATA XREF: _store_host_key+D3o
.text:0000158C                 dd offset $LN5_1
.text:00001590 $LN5_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000158Co
.text:00001598                 dd offset $LN4_0        ; "rkey"
.text:0000159C $LN4_0          db 'rkey',0             ; DATA XREF: .text:00001598o
.text:000015A1                 align 8
.text:000015A8
.text:000015A8 ; =============== S U B R O U T I N E =======================================
.text:000015A8
.text:000015A8 ; Attributes: bp-based frame
.text:000015A8
.text:000015A8                 public _read_random_seed
.text:000015A8 _read_random_seed proc near
.text:000015A8
.text:000015A8 var_41C         = byte ptr -41Ch
.text:000015A8 NumberOfBytesRead= dword ptr -418h
.text:000015A8 Buffer          = byte ptr -40Ch
.text:000015A8 hFile           = dword ptr -8
.text:000015A8 var_4           = dword ptr -4
.text:000015A8 arg_0           = dword ptr  8
.text:000015A8
.text:000015A8                 push    ebp
.text:000015A9                 mov     ebp, esp
.text:000015AB                 sub     esp, 41Ch
.text:000015B1                 push    esi
.text:000015B2                 push    edi
.text:000015B3                 lea     edi, [ebp+var_41C]
.text:000015B9                 mov     ecx, 107h
.text:000015BE                 mov     eax, 0CCCCCCCCh
.text:000015C3                 rep stosd
.text:000015C5                 mov     eax, dword ptr ds:___security_cookie
.text:000015CA                 xor     eax, ebp
.text:000015CC                 mov     [ebp+var_4], eax
.text:000015CF                 push    1
.text:000015D1                 call    _access_random_seed
.text:000015D6                 add     esp, 4
.text:000015D9                 mov     [ebp+hFile], eax
.text:000015DC                 cmp     [ebp+hFile], 0FFFFFFFFh
.text:000015E0                 jz      short loc_1656
.text:000015E2
.text:000015E2 loc_15E2:                               ; CODE XREF: _read_random_seed:loc_1641j
.text:000015E2                 mov     eax, 1
.text:000015E7                 test    eax, eax
.text:000015E9                 jz      short loc_1643
.text:000015EB                 mov     esi, esp
.text:000015ED                 push    0               ; lpOverlapped
.text:000015EF                 lea     ecx, [ebp+NumberOfBytesRead]
.text:000015F5                 push    ecx             ; lpNumberOfBytesRead
.text:000015F6                 push    400h            ; nNumberOfBytesToRead
.text:000015FB                 lea     edx, [ebp+Buffer]
.text:00001601                 push    edx             ; lpBuffer
.text:00001602                 mov     eax, [ebp+hFile]
.text:00001605                 push    eax             ; hFile
.text:00001606                 call    dword ptr ds:__imp__ReadFile@20 ; ReadFile(x,x,x,x,x)
.text:0000160C                 cmp     esi, esp
.text:0000160E                 call    __RTC_CheckEsp
.text:00001613                 test    eax, eax
.text:00001615                 jz      short loc_163F
.text:00001617                 cmp     [ebp+NumberOfBytesRead], 0
.text:0000161E                 jz      short loc_163F
.text:00001620                 mov     esi, esp
.text:00001622                 mov     ecx, [ebp+NumberOfBytesRead]
.text:00001628                 push    ecx
.text:00001629                 lea     edx, [ebp+Buffer]
.text:0000162F                 push    edx
.text:00001630                 call    [ebp+arg_0]
.text:00001633                 add     esp, 8
.text:00001636                 cmp     esi, esp
.text:00001638                 call    __RTC_CheckEsp
.text:0000163D                 jmp     short loc_1641
.text:0000163F ; ---------------------------------------------------------------------------
.text:0000163F
.text:0000163F loc_163F:                               ; CODE XREF: _read_random_seed+6Dj
.text:0000163F                                         ; _read_random_seed+76j
.text:0000163F                 jmp     short loc_1643
.text:00001641 ; ---------------------------------------------------------------------------
.text:00001641
.text:00001641 loc_1641:                               ; CODE XREF: _read_random_seed+95j
.text:00001641                 jmp     short loc_15E2
.text:00001643 ; ---------------------------------------------------------------------------
.text:00001643
.text:00001643 loc_1643:                               ; CODE XREF: _read_random_seed+41j
.text:00001643                                         ; _read_random_seed:loc_163Fj
.text:00001643                 mov     esi, esp
.text:00001645                 mov     eax, [ebp+hFile]
.text:00001648                 push    eax             ; hObject
.text:00001649                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:0000164F                 cmp     esi, esp
.text:00001651                 call    __RTC_CheckEsp
.text:00001656
.text:00001656 loc_1656:                               ; CODE XREF: _read_random_seed+38j
.text:00001656                 push    edx
.text:00001657                 mov     ecx, ebp
.text:00001659                 push    eax
.text:0000165A                 lea     edx, $LN11_1
.text:00001660                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001665                 pop     eax
.text:00001666                 pop     edx
.text:00001667                 pop     edi
.text:00001668                 pop     esi
.text:00001669                 mov     ecx, [ebp+var_4]
.text:0000166C                 xor     ecx, ebp
.text:0000166E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001673                 add     esp, 41Ch
.text:00001679                 cmp     ebp, esp
.text:0000167B                 call    __RTC_CheckEsp
.text:00001680                 mov     esp, ebp
.text:00001682                 pop     ebp
.text:00001683                 retn
.text:00001683 _read_random_seed endp
.text:00001683
.text:00001683 ; ---------------------------------------------------------------------------
.text:00001684 $LN11_1         dd 2                    ; DATA XREF: _read_random_seed+B2o
.text:00001688                 dd offset $LN10_3
.text:0000168C $LN10_3         dd 0FFFFFBF4h, 400h     ; DATA XREF: .text:00001688o
.text:00001694                 dd offset $LN8_2
.text:00001698                 dd 0FFFFFBE8h, 4
.text:000016A0                 dd offset $LN9_3
.text:000016A4 $LN9_3          dd 6E656Ch              ; DATA XREF: .text:000016A0o
.text:000016A8 $LN8_2          dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00001694o
.text:000016B8
.text:000016B8 ; =============== S U B R O U T I N E =======================================
.text:000016B8
.text:000016B8 ; Attributes: bp-based frame
.text:000016B8
.text:000016B8 _access_random_seed proc near           ; CODE XREF: _read_random_seed+29p
.text:000016B8                                         ; _write_random_seed+1Ap ...
.text:000016B8
.text:000016B8 var_260         = dword ptr -260h
.text:000016B8 var_25C         = dword ptr -25Ch
.text:000016B8 var_258         = dword ptr -258h
.text:000016B8 var_254         = dword ptr -254h
.text:000016B8 Data            = byte ptr -24Ch
.text:000016B8 Dst             = byte ptr -24Ah
.text:000016B8 var_30          = dword ptr -30h
.text:000016B8 cbData          = dword ptr -24h
.text:000016B8 Type            = dword ptr -18h
.text:000016B8 phkResult       = dword ptr -0Ch
.text:000016B8 var_4           = dword ptr -4
.text:000016B8 arg_0           = dword ptr  8
.text:000016B8
.text:000016B8                 push    ebp
.text:000016B9                 mov     ebp, esp
.text:000016BB                 sub     esp, 260h
.text:000016C1                 push    esi
.text:000016C2                 push    edi
.text:000016C3                 lea     edi, [ebp+var_260]
.text:000016C9                 mov     ecx, 98h ; 'ÿ'
.text:000016CE                 mov     eax, 0CCCCCCCCh
.text:000016D3                 rep stosd
.text:000016D5                 mov     eax, dword ptr ds:___security_cookie
.text:000016DA                 xor     eax, ebp
.text:000016DC                 mov     [ebp+var_4], eax
.text:000016DF                 mov     ax, ds:$SG119903
.text:000016E5                 mov     word ptr [ebp+Data], ax
.text:000016EC                 push    210h            ; Size
.text:000016F1                 push    0               ; Val
.text:000016F3                 lea     ecx, [ebp+Dst]
.text:000016F9                 push    ecx             ; Dst
.text:000016FA                 call    _memset
.text:000016FF                 add     esp, 0Ch
.text:00001702                 mov     [ebp+cbData], 212h
.text:00001709                 mov     esi, esp
.text:0000170B                 lea     edx, [ebp+phkResult]
.text:0000170E                 push    edx             ; phkResult
.text:0000170F                 push    offset $SG119908 ; "Software\\SimonTatham\\PuTTY"
.text:00001714                 push    80000001h       ; hKey
.text:00001719                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:0000171F                 cmp     esi, esp
.text:00001721                 call    __RTC_CheckEsp
.text:00001726                 test    eax, eax
.text:00001728                 jnz     loc_17B4
.text:0000172E                 mov     esi, esp
.text:00001730                 lea     eax, [ebp+cbData]
.text:00001733                 push    eax             ; lpcbData
.text:00001734                 lea     ecx, [ebp+Data]
.text:0000173A                 push    ecx             ; lpData
.text:0000173B                 lea     edx, [ebp+Type]
.text:0000173E                 push    edx             ; lpType
.text:0000173F                 push    0               ; lpReserved
.text:00001741                 push    offset $SG119910 ; "RandSeedFile"
.text:00001746                 mov     eax, [ebp+phkResult]
.text:00001749                 push    eax             ; hKey
.text:0000174A                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:00001750                 cmp     esi, esp
.text:00001752                 call    __RTC_CheckEsp
.text:00001757                 mov     [ebp+var_254], eax
.text:0000175D                 cmp     [ebp+var_254], 0
.text:00001764                 jnz     short loc_176C
.text:00001766                 cmp     [ebp+Type], 1
.text:0000176A                 jz      short loc_1773
.text:0000176C
.text:0000176C loc_176C:                               ; CODE XREF: _access_random_seed+ACj
.text:0000176C                 mov     [ebp+Data], 0
.text:00001773
.text:00001773 loc_1773:                               ; CODE XREF: _access_random_seed+B2j
.text:00001773                 mov     esi, esp
.text:00001775                 mov     ecx, [ebp+phkResult]
.text:00001778                 push    ecx             ; hKey
.text:00001779                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:0000177F                 cmp     esi, esp
.text:00001781                 call    __RTC_CheckEsp
.text:00001786                 movsx   edx, [ebp+Data]
.text:0000178D                 test    edx, edx
.text:0000178F                 jz      short loc_17B4
.text:00001791                 lea     eax, [ebp+var_30]
.text:00001794                 push    eax             ; int
.text:00001795                 mov     ecx, [ebp+arg_0]
.text:00001798                 push    ecx             ; int
.text:00001799                 lea     edx, [ebp+Data]
.text:0000179F                 push    edx             ; lpFileName
.text:000017A0                 call    _try_random_seed
.text:000017A5                 add     esp, 0Ch
.text:000017A8                 test    eax, eax
.text:000017AA                 jz      short loc_17B4
.text:000017AC                 mov     eax, [ebp+var_30]
.text:000017AF                 jmp     loc_19C2
.text:000017B4 ; ---------------------------------------------------------------------------
.text:000017B4
.text:000017B4 loc_17B4:                               ; CODE XREF: _access_random_seed+70j
.text:000017B4                                         ; _access_random_seed+D7j ...
.text:000017B4                 cmp     ds:_tried_shgetfolderpath, 0
.text:000017BB                 jnz     short loc_181A
.text:000017BD                 push    offset $SG119915 ; "shell32.dll"
.text:000017C2                 call    _load_system32_dll
.text:000017C7                 add     esp, 4
.text:000017CA                 mov     ds:_shell32_module, eax
.text:000017CF                 cmp     ds:_shell32_module, 0
.text:000017D6                 jz      short loc_17FA
.text:000017D8                 mov     esi, esp
.text:000017DA                 push    offset $SG119918 ; "SHGetFolderPathA"
.text:000017DF                 mov     eax, ds:_shell32_module
.text:000017E4                 push    eax             ; hModule
.text:000017E5                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000017EB                 cmp     esi, esp
.text:000017ED                 call    __RTC_CheckEsp
.text:000017F2                 mov     [ebp+var_260], eax
.text:000017F8                 jmp     short loc_1804
.text:000017FA ; ---------------------------------------------------------------------------
.text:000017FA
.text:000017FA loc_17FA:                               ; CODE XREF: _access_random_seed+11Ej
.text:000017FA                 mov     [ebp+var_260], 0
.text:00001804
.text:00001804 loc_1804:                               ; CODE XREF: _access_random_seed+140j
.text:00001804                 mov     ecx, [ebp+var_260]
.text:0000180A                 mov     ds:_p_SHGetFolderPathA, ecx
.text:00001810                 mov     ds:_tried_shgetfolderpath, 1
.text:0000181A
.text:0000181A loc_181A:                               ; CODE XREF: _access_random_seed+103j
.text:0000181A                 cmp     ds:_p_SHGetFolderPathA, 0
.text:00001821                 jz      loc_18D9
.text:00001827                 mov     esi, esp
.text:00001829                 lea     edx, [ebp+Data]
.text:0000182F                 push    edx
.text:00001830                 push    0
.text:00001832                 push    0
.text:00001834                 push    1Ch
.text:00001836                 push    0
.text:00001838                 call    ds:_p_SHGetFolderPathA
.text:0000183E                 cmp     esi, esp
.text:00001840                 call    __RTC_CheckEsp
.text:00001845                 test    eax, eax
.text:00001847                 jl      short loc_1880
.text:00001849                 push    offset $SG119924 ; "\\PUTTY.RND"
.text:0000184E                 lea     eax, [ebp+Data]
.text:00001854                 push    eax             ; Dest
.text:00001855                 call    _strcat
.text:0000185A                 add     esp, 8
.text:0000185D                 lea     ecx, [ebp+var_30]
.text:00001860                 push    ecx             ; int
.text:00001861                 mov     edx, [ebp+arg_0]
.text:00001864                 push    edx             ; int
.text:00001865                 lea     eax, [ebp+Data]
.text:0000186B                 push    eax             ; lpFileName
.text:0000186C                 call    _try_random_seed
.text:00001871                 add     esp, 0Ch
.text:00001874                 test    eax, eax
.text:00001876                 jz      short loc_1880
.text:00001878                 mov     eax, [ebp+var_30]
.text:0000187B                 jmp     loc_19C2
.text:00001880 ; ---------------------------------------------------------------------------
.text:00001880
.text:00001880 loc_1880:                               ; CODE XREF: _access_random_seed+18Fj
.text:00001880                                         ; _access_random_seed+1BEj
.text:00001880                 mov     esi, esp
.text:00001882                 lea     ecx, [ebp+Data]
.text:00001888                 push    ecx
.text:00001889                 push    0
.text:0000188B                 push    0
.text:0000188D                 push    1Ah
.text:0000188F                 push    0
.text:00001891                 call    ds:_p_SHGetFolderPathA
.text:00001897                 cmp     esi, esp
.text:00001899                 call    __RTC_CheckEsp
.text:0000189E                 test    eax, eax
.text:000018A0                 jl      short loc_18D9
.text:000018A2                 push    offset $SG119930 ; "\\PUTTY.RND"
.text:000018A7                 lea     edx, [ebp+Data]
.text:000018AD                 push    edx             ; Dest
.text:000018AE                 call    _strcat
.text:000018B3                 add     esp, 8
.text:000018B6                 lea     eax, [ebp+var_30]
.text:000018B9                 push    eax             ; int
.text:000018BA                 mov     ecx, [ebp+arg_0]
.text:000018BD                 push    ecx             ; int
.text:000018BE                 lea     edx, [ebp+Data]
.text:000018C4                 push    edx             ; lpFileName
.text:000018C5                 call    _try_random_seed
.text:000018CA                 add     esp, 0Ch
.text:000018CD                 test    eax, eax
.text:000018CF                 jz      short loc_18D9
.text:000018D1                 mov     eax, [ebp+var_30]
.text:000018D4                 jmp     loc_19C2
.text:000018D9 ; ---------------------------------------------------------------------------
.text:000018D9
.text:000018D9 loc_18D9:                               ; CODE XREF: _access_random_seed+169j
.text:000018D9                                         ; _access_random_seed+1E8j ...
.text:000018D9                 mov     esi, esp
.text:000018DB                 push    212h            ; nSize
.text:000018E0                 lea     eax, [ebp+Data]
.text:000018E6                 push    eax             ; lpBuffer
.text:000018E7                 push    offset $SG119934 ; "HOMEDRIVE"
.text:000018EC                 call    dword ptr ds:__imp__GetEnvironmentVariableA@12 ; GetEnvironmentVariableA(x,x,x)
.text:000018F2                 cmp     esi, esp
.text:000018F4                 call    __RTC_CheckEsp
.text:000018F9                 mov     [ebp+var_258], eax
.text:000018FF                 mov     ecx, 212h
.text:00001904                 sub     ecx, [ebp+var_258]
.text:0000190A                 mov     esi, esp
.text:0000190C                 push    ecx             ; nSize
.text:0000190D                 mov     edx, [ebp+var_258]
.text:00001913                 lea     eax, [ebp+edx+Data]
.text:0000191A                 push    eax             ; lpBuffer
.text:0000191B                 push    offset $SG119935 ; "HOMEPATH"
.text:00001920                 call    dword ptr ds:__imp__GetEnvironmentVariableA@12 ; GetEnvironmentVariableA(x,x,x)
.text:00001926                 cmp     esi, esp
.text:00001928                 call    __RTC_CheckEsp
.text:0000192D                 mov     [ebp+var_25C], eax
.text:00001933                 cmp     [ebp+var_25C], 0
.text:0000193A                 jz      short loc_1970
.text:0000193C                 push    offset $SG119937 ; "\\PUTTY.RND"
.text:00001941                 lea     ecx, [ebp+Data]
.text:00001947                 push    ecx             ; Dest
.text:00001948                 call    _strcat
.text:0000194D                 add     esp, 8
.text:00001950                 lea     edx, [ebp+var_30]
.text:00001953                 push    edx             ; int
.text:00001954                 mov     eax, [ebp+arg_0]
.text:00001957                 push    eax             ; int
.text:00001958                 lea     ecx, [ebp+Data]
.text:0000195E                 push    ecx             ; lpFileName
.text:0000195F                 call    _try_random_seed
.text:00001964                 add     esp, 0Ch
.text:00001967                 test    eax, eax
.text:00001969                 jz      short loc_1970
.text:0000196B                 mov     eax, [ebp+var_30]
.text:0000196E                 jmp     short loc_19C2
.text:00001970 ; ---------------------------------------------------------------------------
.text:00001970
.text:00001970 loc_1970:                               ; CODE XREF: _access_random_seed+282j
.text:00001970                                         ; _access_random_seed+2B1j
.text:00001970                 mov     esi, esp
.text:00001972                 push    212h            ; uSize
.text:00001977                 lea     edx, [ebp+Data]
.text:0000197D                 push    edx             ; lpBuffer
.text:0000197E                 call    dword ptr ds:__imp__GetWindowsDirectoryA@8 ; GetWindowsDirectoryA(x,x)
.text:00001984                 cmp     esi, esp
.text:00001986                 call    __RTC_CheckEsp
.text:0000198B                 push    offset $SG119939 ; "\\PUTTY.RND"
.text:00001990                 lea     eax, [ebp+Data]
.text:00001996                 push    eax             ; Dest
.text:00001997                 call    _strcat
.text:0000199C                 add     esp, 8
.text:0000199F                 lea     ecx, [ebp+var_30]
.text:000019A2                 push    ecx             ; int
.text:000019A3                 mov     edx, [ebp+arg_0]
.text:000019A6                 push    edx             ; int
.text:000019A7                 lea     eax, [ebp+Data]
.text:000019AD                 push    eax             ; lpFileName
.text:000019AE                 call    _try_random_seed
.text:000019B3                 add     esp, 0Ch
.text:000019B6                 test    eax, eax
.text:000019B8                 jz      short loc_19BF
.text:000019BA                 mov     eax, [ebp+var_30]
.text:000019BD                 jmp     short loc_19C2
.text:000019BF ; ---------------------------------------------------------------------------
.text:000019BF
.text:000019BF loc_19BF:                               ; CODE XREF: _access_random_seed+300j
.text:000019BF                 or      eax, 0FFFFFFFFh
.text:000019C2
.text:000019C2 loc_19C2:                               ; CODE XREF: _access_random_seed+F7j
.text:000019C2                                         ; _access_random_seed+1C3j ...
.text:000019C2                 push    edx
.text:000019C3                 mov     ecx, ebp
.text:000019C5                 push    eax
.text:000019C6                 lea     edx, $LN24_0
.text:000019CC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000019D1                 pop     eax
.text:000019D2                 pop     edx
.text:000019D3                 pop     edi
.text:000019D4                 pop     esi
.text:000019D5                 mov     ecx, [ebp+var_4]
.text:000019D8                 xor     ecx, ebp
.text:000019DA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000019DF                 add     esp, 260h
.text:000019E5                 cmp     ebp, esp
.text:000019E7                 call    __RTC_CheckEsp
.text:000019EC                 mov     esp, ebp
.text:000019EE                 pop     ebp
.text:000019EF                 retn
.text:000019EF _access_random_seed endp
.text:000019EF
.text:000019EF ; ---------------------------------------------------------------------------
.text:000019F0 $LN24_0         dd 5                    ; DATA XREF: _access_random_seed+30Eo
.text:000019F4                 dd offset $LN23_0
.text:000019F8 $LN23_0         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000019F4o
.text:00001A00                 dd offset $LN18         ; "rkey"
.text:00001A04                 dd 0FFFFFFE8h, 4
.text:00001A0C                 dd offset $LN19         ; "type"
.text:00001A10                 dd 0FFFFFFDCh, 4
.text:00001A18                 dd offset $LN20         ; "size"
.text:00001A1C                 dd 0FFFFFFD0h, 4
.text:00001A24                 dd offset $LN21         ; "rethandle"
.text:00001A28                 dd 0FFFFFDB4h, 212h
.text:00001A30                 dd offset $LN22_0       ; "seedpath"
.text:00001A34 $LN22_0         db 'seedpath',0         ; DATA XREF: .text:00001A30o
.text:00001A3D $LN21           db 'rethandle',0        ; DATA XREF: .text:00001A24o
.text:00001A47 $LN20           db 'size',0             ; DATA XREF: .text:00001A18o
.text:00001A4C $LN19           db 'type',0             ; DATA XREF: .text:00001A0Co
.text:00001A51 $LN18           db 'rkey',0             ; DATA XREF: .text:00001A00o
.text:00001A56                 align 4
.text:00001A58
.text:00001A58 ; =============== S U B R O U T I N E =======================================
.text:00001A58
.text:00001A58 ; Attributes: bp-based frame
.text:00001A58
.text:00001A58 ; int __cdecl try_random_seed(LPCSTR lpFileName, int, int)
.text:00001A58 _try_random_seed proc near              ; CODE XREF: _access_random_seed+E8p
.text:00001A58                                         ; _access_random_seed+1B4p ...
.text:00001A58
.text:00001A58 lpFileName      = dword ptr  8
.text:00001A58 arg_4           = dword ptr  0Ch
.text:00001A58 arg_8           = dword ptr  10h
.text:00001A58
.text:00001A58                 push    ebp
.text:00001A59                 mov     ebp, esp
.text:00001A5B                 push    esi
.text:00001A5C                 cmp     [ebp+arg_4], 0
.text:00001A60                 jnz     short loc_1AC4
.text:00001A62                 mov     esi, esp
.text:00001A64                 mov     eax, [ebp+lpFileName]
.text:00001A67                 push    eax             ; lpFileName
.text:00001A68                 call    dword ptr ds:__imp__DeleteFileA@4 ; DeleteFileA(x)
.text:00001A6E                 cmp     esi, esp
.text:00001A70                 call    __RTC_CheckEsp
.text:00001A75                 test    eax, eax
.text:00001A77                 jnz     short loc_1AB7
.text:00001A79                 mov     esi, esp
.text:00001A7B                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00001A81                 cmp     esi, esp
.text:00001A83                 call    __RTC_CheckEsp
.text:00001A88                 cmp     eax, 2
.text:00001A8B                 jz      short loc_1AB7
.text:00001A8D                 mov     esi, esp
.text:00001A8F                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00001A95                 cmp     esi, esp
.text:00001A97                 call    __RTC_CheckEsp
.text:00001A9C                 push    eax
.text:00001A9D                 call    _win_strerror
.text:00001AA2                 add     esp, 4
.text:00001AA5                 push    eax
.text:00001AA6                 mov     ecx, [ebp+lpFileName]
.text:00001AA9                 push    ecx
.text:00001AAA                 push    offset $SG119887 ; "Unable to delete '%s': %s"
.text:00001AAF                 call    _nonfatal
.text:00001AB4                 add     esp, 0Ch
.text:00001AB7
.text:00001AB7 loc_1AB7:                               ; CODE XREF: _try_random_seed+1Fj
.text:00001AB7                                         ; _try_random_seed+33j
.text:00001AB7                 mov     edx, [ebp+arg_8]
.text:00001ABA                 mov     dword ptr [edx], 0FFFFFFFFh
.text:00001AC0                 xor     eax, eax
.text:00001AC2                 jmp     short loc_1B2F
.text:00001AC4 ; ---------------------------------------------------------------------------
.text:00001AC4
.text:00001AC4 loc_1AC4:                               ; CODE XREF: _try_random_seed+8j
.text:00001AC4                 mov     esi, esp
.text:00001AC6                 push    0               ; hTemplateFile
.text:00001AC8                 xor     eax, eax
.text:00001ACA                 cmp     [ebp+arg_4], 2
.text:00001ACE                 setnz   al
.text:00001AD1                 sub     eax, 1
.text:00001AD4                 and     eax, 80h
.text:00001AD9                 push    eax             ; dwFlagsAndAttributes
.text:00001ADA                 xor     ecx, ecx
.text:00001ADC                 cmp     [ebp+arg_4], 2
.text:00001AE0                 setnz   cl
.text:00001AE3                 add     ecx, 2
.text:00001AE6                 push    ecx             ; dwCreationDisposition
.text:00001AE7                 push    0               ; lpSecurityAttributes
.text:00001AE9                 mov     edx, [ebp+arg_4]
.text:00001AEC                 sub     edx, 2
.text:00001AEF                 neg     edx
.text:00001AF1                 sbb     edx, edx
.text:00001AF3                 and     edx, 3
.text:00001AF6                 push    edx             ; dwShareMode
.text:00001AF7                 mov     eax, [ebp+arg_4]
.text:00001AFA                 sub     eax, 2
.text:00001AFD                 neg     eax
.text:00001AFF                 sbb     eax, eax
.text:00001B01                 and     eax, 40000000h
.text:00001B06                 add     eax, 40000000h
.text:00001B0B                 push    eax             ; dwDesiredAccess
.text:00001B0C                 mov     ecx, [ebp+lpFileName]
.text:00001B0F                 push    ecx             ; lpFileName
.text:00001B10                 call    dword ptr ds:__imp__CreateFileA@28 ; CreateFileA(x,x,x,x,x,x,x)
.text:00001B16                 cmp     esi, esp
.text:00001B18                 call    __RTC_CheckEsp
.text:00001B1D                 mov     edx, [ebp+arg_8]
.text:00001B20                 mov     [edx], eax
.text:00001B22                 mov     eax, [ebp+arg_8]
.text:00001B25                 xor     ecx, ecx
.text:00001B27                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00001B2A                 setnz   cl
.text:00001B2D                 mov     eax, ecx
.text:00001B2F
.text:00001B2F loc_1B2F:                               ; CODE XREF: _try_random_seed+6Aj
.text:00001B2F                 pop     esi
.text:00001B30                 cmp     ebp, esp
.text:00001B32                 call    __RTC_CheckEsp
.text:00001B37                 pop     ebp
.text:00001B38                 retn
.text:00001B38 _try_random_seed endp
.text:00001B38
.text:00001B38 ; ---------------------------------------------------------------------------
.text:00001B39                 db 0Fh dup(0CCh)
.text:00001B48
.text:00001B48 ; =============== S U B R O U T I N E =======================================
.text:00001B48
.text:00001B48 ; Attributes: bp-based frame
.text:00001B48
.text:00001B48 ; int __cdecl write_random_seed(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
.text:00001B48                 public _write_random_seed
.text:00001B48 _write_random_seed proc near
.text:00001B48
.text:00001B48 var_10          = dword ptr -10h
.text:00001B48 NumberOfBytesWritten= dword ptr -0Ch
.text:00001B48 var_8           = dword ptr -8
.text:00001B48 hFile           = dword ptr -4
.text:00001B48 lpBuffer        = dword ptr  8
.text:00001B48 nNumberOfBytesToWrite= dword ptr  0Ch
.text:00001B48
.text:00001B48                 push    ebp
.text:00001B49                 mov     ebp, esp
.text:00001B4B                 sub     esp, 10h
.text:00001B4E                 push    esi
.text:00001B4F                 mov     eax, 0CCCCCCCCh
.text:00001B54                 mov     [ebp+var_10], eax
.text:00001B57                 mov     [ebp+NumberOfBytesWritten], eax
.text:00001B5A                 mov     [ebp+var_8], eax
.text:00001B5D                 mov     [ebp+hFile], eax
.text:00001B60                 push    2
.text:00001B62                 call    _access_random_seed
.text:00001B67                 add     esp, 4
.text:00001B6A                 mov     [ebp+hFile], eax
.text:00001B6D                 cmp     [ebp+hFile], 0FFFFFFFFh
.text:00001B71                 jz      short loc_1BA7
.text:00001B73                 mov     esi, esp
.text:00001B75                 push    0               ; lpOverlapped
.text:00001B77                 lea     eax, [ebp+NumberOfBytesWritten]
.text:00001B7A                 push    eax             ; lpNumberOfBytesWritten
.text:00001B7B                 mov     ecx, [ebp+nNumberOfBytesToWrite]
.text:00001B7E                 push    ecx             ; nNumberOfBytesToWrite
.text:00001B7F                 mov     edx, [ebp+lpBuffer]
.text:00001B82                 push    edx             ; lpBuffer
.text:00001B83                 mov     eax, [ebp+hFile]
.text:00001B86                 push    eax             ; hFile
.text:00001B87                 call    dword ptr ds:__imp__WriteFile@20 ; WriteFile(x,x,x,x,x)
.text:00001B8D                 cmp     esi, esp
.text:00001B8F                 call    __RTC_CheckEsp
.text:00001B94                 mov     esi, esp
.text:00001B96                 mov     ecx, [ebp+hFile]
.text:00001B99                 push    ecx             ; hObject
.text:00001B9A                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00001BA0                 cmp     esi, esp
.text:00001BA2                 call    __RTC_CheckEsp
.text:00001BA7
.text:00001BA7 loc_1BA7:                               ; CODE XREF: _write_random_seed+29j
.text:00001BA7                 push    edx
.text:00001BA8                 mov     ecx, ebp
.text:00001BAA                 push    eax
.text:00001BAB                 lea     edx, $LN6_3
.text:00001BB1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001BB6                 pop     eax
.text:00001BB7                 pop     edx
.text:00001BB8                 pop     esi
.text:00001BB9                 add     esp, 10h
.text:00001BBC                 cmp     ebp, esp
.text:00001BBE                 call    __RTC_CheckEsp
.text:00001BC3                 mov     esp, ebp
.text:00001BC5                 pop     ebp
.text:00001BC6                 retn
.text:00001BC6 _write_random_seed endp
.text:00001BC6
.text:00001BC6 ; ---------------------------------------------------------------------------
.text:00001BC7                 align 4
.text:00001BC8 $LN6_3          dd 1                    ; DATA XREF: _write_random_seed+63o
.text:00001BCC                 dd offset $LN5_2
.text:00001BD0 $LN5_2          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00001BCCo
.text:00001BD8                 dd offset $LN4_1        ; "lenwritten"
.text:00001BDC $LN4_1          db 'lenwritten',0       ; DATA XREF: .text:00001BD8o
.text:00001BE7                 align 4
.text:00001BE8
.text:00001BE8 ; =============== S U B R O U T I N E =======================================
.text:00001BE8
.text:00001BE8 ; Attributes: bp-based frame
.text:00001BE8
.text:00001BE8 ; int __cdecl add_to_jumplist_registry(char *Str)
.text:00001BE8                 public _add_to_jumplist_registry
.text:00001BE8 _add_to_jumplist_registry proc near
.text:00001BE8
.text:00001BE8 Str             = dword ptr  8
.text:00001BE8
.text:00001BE8                 push    ebp
.text:00001BE9                 mov     ebp, esp
.text:00001BEB                 push    0               ; int
.text:00001BED                 mov     eax, [ebp+Str]
.text:00001BF0                 push    eax             ; Str2
.text:00001BF1                 mov     ecx, [ebp+Str]
.text:00001BF4                 push    ecx             ; Str
.text:00001BF5                 call    _transform_jumplist_registry
.text:00001BFA                 add     esp, 0Ch
.text:00001BFD                 cmp     ebp, esp
.text:00001BFF                 call    __RTC_CheckEsp
.text:00001C04                 pop     ebp
.text:00001C05                 retn
.text:00001C05 _add_to_jumplist_registry endp
.text:00001C05
.text:00001C05 ; ---------------------------------------------------------------------------
.text:00001C06                 align 4
.text:00001C08
.text:00001C08 ; =============== S U B R O U T I N E =======================================
.text:00001C08
.text:00001C08 ; Attributes: bp-based frame
.text:00001C08
.text:00001C08 ; int __cdecl transform_jumplist_registry(char *Str, char *Str2, int)
.text:00001C08 _transform_jumplist_registry proc near  ; CODE XREF: _add_to_jumplist_registry+Dp
.text:00001C08                                         ; _remove_from_jumplist_registry+Bp ...
.text:00001C08
.text:00001C08 var_44          = dword ptr -44h
.text:00001C08 var_40          = dword ptr -40h
.text:00001C08 Dest            = dword ptr -3Ch
.text:00001C08 Str1            = dword ptr -38h
.text:00001C08 var_34          = dword ptr -34h
.text:00001C08 lpData          = dword ptr -30h
.text:00001C08 cbData          = dword ptr -28h
.text:00001C08 Type            = dword ptr -1Ch
.text:00001C08 hKey            = dword ptr -14h
.text:00001C08 phkResult       = dword ptr -0Ch
.text:00001C08 var_4           = dword ptr -4
.text:00001C08 Str             = dword ptr  8
.text:00001C08 Str2            = dword ptr  0Ch
.text:00001C08 arg_8           = dword ptr  10h
.text:00001C08
.text:00001C08                 push    ebp
.text:00001C09                 mov     ebp, esp
.text:00001C0B                 sub     esp, 44h
.text:00001C0E                 push    esi
.text:00001C0F                 push    edi
.text:00001C10                 lea     edi, [ebp+var_44]
.text:00001C13                 mov     ecx, 11h
.text:00001C18                 mov     eax, 0CCCCCCCCh
.text:00001C1D                 rep stosd
.text:00001C1F                 mov     esi, esp
.text:00001C21                 push    0               ; lpdwDisposition
.text:00001C23                 lea     eax, [ebp+phkResult]
.text:00001C26                 push    eax             ; phkResult
.text:00001C27                 push    0               ; lpSecurityAttributes
.text:00001C29                 push    2001Fh          ; samDesired
.text:00001C2E                 push    0               ; dwOptions
.text:00001C30                 push    0               ; lpClass
.text:00001C32                 push    0               ; Reserved
.text:00001C34                 mov     ecx, ds:_reg_jumplist_key
.text:00001C3A                 push    ecx             ; lpSubKey
.text:00001C3B                 push    80000001h       ; hKey
.text:00001C40                 call    dword ptr ds:__imp__RegCreateKeyExA@36 ; RegCreateKeyExA(x,x,x,x,x,x,x,x,x)
.text:00001C46                 cmp     esi, esp
.text:00001C48                 call    __RTC_CheckEsp
.text:00001C4D                 mov     [ebp+var_4], eax
.text:00001C50                 cmp     [ebp+var_4], 0
.text:00001C54                 jz      short loc_1C60
.text:00001C56                 mov     eax, 2
.text:00001C5B                 jmp     loc_1F8D
.text:00001C60 ; ---------------------------------------------------------------------------
.text:00001C60
.text:00001C60 loc_1C60:                               ; CODE XREF: _transform_jumplist_registry+4Cj
.text:00001C60                 mov     [ebp+cbData], 0C8h ; '+'
.text:00001C67                 push    1
.text:00001C69                 mov     edx, [ebp+cbData]
.text:00001C6C                 push    edx
.text:00001C6D                 call    _safemalloc
.text:00001C72                 add     esp, 8
.text:00001C75                 mov     [ebp+lpData], eax
.text:00001C78                 mov     esi, esp
.text:00001C7A                 lea     eax, [ebp+cbData]
.text:00001C7D                 push    eax             ; lpcbData
.text:00001C7E                 mov     ecx, [ebp+lpData]
.text:00001C81                 push    ecx             ; lpData
.text:00001C82                 lea     edx, [ebp+Type]
.text:00001C85                 push    edx             ; lpType
.text:00001C86                 push    0               ; lpReserved
.text:00001C88                 mov     eax, ds:_reg_jumplist_value
.text:00001C8D                 push    eax             ; lpValueName
.text:00001C8E                 mov     ecx, [ebp+phkResult]
.text:00001C91                 push    ecx             ; hKey
.text:00001C92                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:00001C98                 cmp     esi, esp
.text:00001C9A                 call    __RTC_CheckEsp
.text:00001C9F                 mov     [ebp+var_4], eax
.text:00001CA2                 cmp     [ebp+var_4], 0EAh ; 'O'
.text:00001CA9                 jnz     short loc_1CF3
.text:00001CAB                 mov     edx, [ebp+lpData]
.text:00001CAE                 push    edx
.text:00001CAF                 call    _safefree
.text:00001CB4                 add     esp, 4
.text:00001CB7                 push    1
.text:00001CB9                 mov     eax, [ebp+cbData]
.text:00001CBC                 push    eax
.text:00001CBD                 call    _safemalloc
.text:00001CC2                 add     esp, 8
.text:00001CC5                 mov     [ebp+lpData], eax
.text:00001CC8                 mov     esi, esp
.text:00001CCA                 lea     ecx, [ebp+cbData]
.text:00001CCD                 push    ecx             ; lpcbData
.text:00001CCE                 mov     edx, [ebp+lpData]
.text:00001CD1                 push    edx             ; lpData
.text:00001CD2                 lea     eax, [ebp+Type]
.text:00001CD5                 push    eax             ; lpType
.text:00001CD6                 push    0               ; lpReserved
.text:00001CD8                 mov     ecx, ds:_reg_jumplist_value
.text:00001CDE                 push    ecx             ; lpValueName
.text:00001CDF                 mov     edx, [ebp+phkResult]
.text:00001CE2                 push    edx             ; hKey
.text:00001CE3                 call    dword ptr ds:__imp__RegQueryValueExA@24 ; RegQueryValueExA(x,x,x,x,x,x)
.text:00001CE9                 cmp     esi, esp
.text:00001CEB                 call    __RTC_CheckEsp
.text:00001CF0                 mov     [ebp+var_4], eax
.text:00001CF3
.text:00001CF3 loc_1CF3:                               ; CODE XREF: _transform_jumplist_registry+A1j
.text:00001CF3                 cmp     [ebp+var_4], 2
.text:00001CF7                 jnz     short loc_1D0B
.text:00001CF9                 mov     eax, [ebp+lpData]
.text:00001CFC                 mov     byte ptr [eax], 0
.text:00001CFF                 mov     ecx, [ebp+lpData]
.text:00001D02                 mov     byte ptr [ecx+1], 0
.text:00001D06                 jmp     loc_1D9B
.text:00001D0B ; ---------------------------------------------------------------------------
.text:00001D0B
.text:00001D0B loc_1D0B:                               ; CODE XREF: _transform_jumplist_registry+EFj
.text:00001D0B                 cmp     [ebp+var_4], 0
.text:00001D0F                 jz      short loc_1D3C
.text:00001D11                 mov     edx, [ebp+lpData]
.text:00001D14                 push    edx
.text:00001D15                 call    _safefree
.text:00001D1A                 add     esp, 4
.text:00001D1D                 mov     esi, esp
.text:00001D1F                 mov     eax, [ebp+phkResult]
.text:00001D22                 push    eax             ; hKey
.text:00001D23                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00001D29                 cmp     esi, esp
.text:00001D2B                 call    __RTC_CheckEsp
.text:00001D30                 mov     eax, 3
.text:00001D35                 jmp     loc_1F8D
.text:00001D3A ; ---------------------------------------------------------------------------
.text:00001D3A                 jmp     short loc_1D9B
.text:00001D3C ; ---------------------------------------------------------------------------
.text:00001D3C
.text:00001D3C loc_1D3C:                               ; CODE XREF: _transform_jumplist_registry+107j
.text:00001D3C                 cmp     [ebp+Type], 7
.text:00001D40                 jz      short loc_1D9B
.text:00001D42                 mov     esi, esp
.text:00001D44                 mov     ecx, ds:_reg_jumplist_value
.text:00001D4A                 push    ecx             ; lpValueName
.text:00001D4B                 mov     edx, [ebp+phkResult]
.text:00001D4E                 push    edx             ; hKey
.text:00001D4F                 call    dword ptr ds:__imp__RegDeleteValueA@8 ; RegDeleteValueA(x,x)
.text:00001D55                 cmp     esi, esp
.text:00001D57                 call    __RTC_CheckEsp
.text:00001D5C                 mov     [ebp+var_4], eax
.text:00001D5F                 cmp     [ebp+var_4], 0
.text:00001D63                 jz      short loc_1D8E
.text:00001D65                 mov     eax, [ebp+lpData]
.text:00001D68                 push    eax
.text:00001D69                 call    _safefree
.text:00001D6E                 add     esp, 4
.text:00001D71                 mov     esi, esp
.text:00001D73                 mov     ecx, [ebp+phkResult]
.text:00001D76                 push    ecx             ; hKey
.text:00001D77                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00001D7D                 cmp     esi, esp
.text:00001D7F                 call    __RTC_CheckEsp
.text:00001D84                 mov     eax, 3
.text:00001D89                 jmp     loc_1F8D
.text:00001D8E ; ---------------------------------------------------------------------------
.text:00001D8E
.text:00001D8E loc_1D8E:                               ; CODE XREF: _transform_jumplist_registry+15Bj
.text:00001D8E                 mov     edx, [ebp+lpData]
.text:00001D91                 mov     byte ptr [edx], 0
.text:00001D94                 mov     eax, [ebp+lpData]
.text:00001D97                 mov     byte ptr [eax+1], 0
.text:00001D9B
.text:00001D9B loc_1D9B:                               ; CODE XREF: _transform_jumplist_registry+FEj
.text:00001D9B                                         ; _transform_jumplist_registry+132j ...
.text:00001D9B                 mov     ecx, [ebp+lpData]
.text:00001D9E                 mov     [ebp+var_40], ecx
.text:00001DA1
.text:00001DA1 loc_1DA1:                               ; CODE XREF: _transform_jumplist_registry+1C7j
.text:00001DA1                 mov     edx, [ebp+var_40]
.text:00001DA4                 sub     edx, [ebp+lpData]
.text:00001DA7                 mov     eax, [ebp+cbData]
.text:00001DAA                 sub     eax, 1
.text:00001DAD                 cmp     edx, eax
.text:00001DAF                 jge     short loc_1DD1
.text:00001DB1                 mov     ecx, [ebp+var_40]
.text:00001DB4                 movsx   edx, byte ptr [ecx]
.text:00001DB7                 test    edx, edx
.text:00001DB9                 jnz     short loc_1DC6
.text:00001DBB                 mov     eax, [ebp+var_40]
.text:00001DBE                 movsx   ecx, byte ptr [eax+1]
.text:00001DC2                 test    ecx, ecx
.text:00001DC4                 jz      short loc_1DD1
.text:00001DC6
.text:00001DC6 loc_1DC6:                               ; CODE XREF: _transform_jumplist_registry+1B1j
.text:00001DC6                 mov     edx, [ebp+var_40]
.text:00001DC9                 add     edx, 1
.text:00001DCC                 mov     [ebp+var_40], edx
.text:00001DCF                 jmp     short loc_1DA1
.text:00001DD1 ; ---------------------------------------------------------------------------
.text:00001DD1
.text:00001DD1 loc_1DD1:                               ; CODE XREF: _transform_jumplist_registry+1A7j
.text:00001DD1                                         ; _transform_jumplist_registry+1BCj
.text:00001DD1                 mov     eax, [ebp+var_40]
.text:00001DD4                 sub     eax, [ebp+lpData]
.text:00001DD7                 mov     ecx, [ebp+cbData]
.text:00001DDA                 sub     ecx, 1
.text:00001DDD                 cmp     eax, ecx
.text:00001DDF                 jl      short loc_1DEE
.text:00001DE1                 mov     edx, [ebp+lpData]
.text:00001DE4                 mov     byte ptr [edx], 0
.text:00001DE7                 mov     eax, [ebp+lpData]
.text:00001DEA                 mov     byte ptr [eax+1], 0
.text:00001DEE
.text:00001DEE loc_1DEE:                               ; CODE XREF: _transform_jumplist_registry+1D7j
.text:00001DEE                 cmp     [ebp+Str], 0
.text:00001DF2                 jnz     short loc_1DFE
.text:00001DF4                 cmp     [ebp+Str2], 0
.text:00001DF8                 jz      loc_1F40
.text:00001DFE
.text:00001DFE loc_1DFE:                               ; CODE XREF: _transform_jumplist_registry+1EAj
.text:00001DFE                 cmp     [ebp+Str], 0
.text:00001E02                 jz      short loc_1E18
.text:00001E04                 mov     ecx, [ebp+Str]
.text:00001E07                 push    ecx             ; Str
.text:00001E08                 call    _strlen
.text:00001E0D                 add     esp, 4
.text:00001E10                 add     eax, 1
.text:00001E13                 mov     [ebp+var_44], eax
.text:00001E16                 jmp     short loc_1E1F
.text:00001E18 ; ---------------------------------------------------------------------------
.text:00001E18
.text:00001E18 loc_1E18:                               ; CODE XREF: _transform_jumplist_registry+1FAj
.text:00001E18                 mov     [ebp+var_44], 0
.text:00001E1F
.text:00001E1F loc_1E1F:                               ; CODE XREF: _transform_jumplist_registry+20Ej
.text:00001E1F                 push    1
.text:00001E21                 mov     edx, [ebp+cbData]
.text:00001E24                 add     edx, [ebp+var_44]
.text:00001E27                 push    edx
.text:00001E28                 call    _safemalloc
.text:00001E2D                 add     esp, 8
.text:00001E30                 mov     [ebp+var_34], eax
.text:00001E33                 mov     eax, [ebp+var_34]
.text:00001E36                 mov     [ebp+Dest], eax
.text:00001E39                 mov     ecx, [ebp+lpData]
.text:00001E3C                 mov     [ebp+Str1], ecx
.text:00001E3F                 cmp     [ebp+Str], 0
.text:00001E43                 jz      short loc_1E6B
.text:00001E45                 mov     edx, [ebp+Str]
.text:00001E48                 push    edx             ; Source
.text:00001E49                 mov     eax, [ebp+Dest]
.text:00001E4C                 push    eax             ; Dest
.text:00001E4D                 call    _strcpy
.text:00001E52                 add     esp, 8
.text:00001E55                 mov     ecx, [ebp+Dest]
.text:00001E58                 push    ecx             ; Str
.text:00001E59                 call    _strlen
.text:00001E5E                 add     esp, 4
.text:00001E61                 mov     edx, [ebp+Dest]
.text:00001E64                 lea     eax, [edx+eax+1]
.text:00001E68                 mov     [ebp+Dest], eax
.text:00001E6B
.text:00001E6B loc_1E6B:                               ; CODE XREF: _transform_jumplist_registry+23Bj
.text:00001E6B                                         ; _transform_jumplist_registry+2E4j
.text:00001E6B                 mov     ecx, [ebp+Str1]
.text:00001E6E                 movsx   edx, byte ptr [ecx]
.text:00001E71                 test    edx, edx
.text:00001E73                 jz      short loc_1EF1
.text:00001E75                 cmp     [ebp+Str2], 0
.text:00001E79                 jz      short loc_1E8F
.text:00001E7B                 mov     eax, [ebp+Str2]
.text:00001E7E                 push    eax             ; Str2
.text:00001E7F                 mov     ecx, [ebp+Str1]
.text:00001E82                 push    ecx             ; Str1
.text:00001E83                 call    _strcmp
.text:00001E88                 add     esp, 8
.text:00001E8B                 test    eax, eax
.text:00001E8D                 jz      short loc_1ED6
.text:00001E8F
.text:00001E8F loc_1E8F:                               ; CODE XREF: _transform_jumplist_registry+271j
.text:00001E8F                 mov     edx, [ebp+Str1]
.text:00001E92                 push    edx             ; Str
.text:00001E93                 call    _open_settings_r
.text:00001E98                 add     esp, 4
.text:00001E9B                 mov     [ebp+hKey], eax
.text:00001E9E                 cmp     [ebp+hKey], 0
.text:00001EA2                 jz      short loc_1ED6
.text:00001EA4                 mov     eax, [ebp+hKey]
.text:00001EA7                 push    eax             ; hKey
.text:00001EA8                 call    _close_settings_r
.text:00001EAD                 add     esp, 4
.text:00001EB0                 mov     ecx, [ebp+Str1]
.text:00001EB3                 push    ecx             ; Source
.text:00001EB4                 mov     edx, [ebp+Dest]
.text:00001EB7                 push    edx             ; Dest
.text:00001EB8                 call    _strcpy
.text:00001EBD                 add     esp, 8
.text:00001EC0                 mov     eax, [ebp+Dest]
.text:00001EC3                 push    eax             ; Str
.text:00001EC4                 call    _strlen
.text:00001EC9                 add     esp, 4
.text:00001ECC                 mov     ecx, [ebp+Dest]
.text:00001ECF                 lea     edx, [ecx+eax+1]
.text:00001ED3                 mov     [ebp+Dest], edx
.text:00001ED6
.text:00001ED6 loc_1ED6:                               ; CODE XREF: _transform_jumplist_registry+285j
.text:00001ED6                                         ; _transform_jumplist_registry+29Aj
.text:00001ED6                 mov     eax, [ebp+Str1]
.text:00001ED9                 push    eax             ; Str
.text:00001EDA                 call    _strlen
.text:00001EDF                 add     esp, 4
.text:00001EE2                 mov     ecx, [ebp+Str1]
.text:00001EE5                 lea     edx, [ecx+eax+1]
.text:00001EE9                 mov     [ebp+Str1], edx
.text:00001EEC                 jmp     loc_1E6B
.text:00001EF1 ; ---------------------------------------------------------------------------
.text:00001EF1
.text:00001EF1 loc_1EF1:                               ; CODE XREF: _transform_jumplist_registry+26Bj
.text:00001EF1                 mov     eax, [ebp+Dest]
.text:00001EF4                 mov     byte ptr [eax], 0
.text:00001EF7                 mov     ecx, [ebp+Dest]
.text:00001EFA                 add     ecx, 1
.text:00001EFD                 mov     [ebp+Dest], ecx
.text:00001F00                 mov     edx, [ebp+Dest]
.text:00001F03                 sub     edx, [ebp+var_34]
.text:00001F06                 mov     esi, esp
.text:00001F08                 push    edx             ; cbData
.text:00001F09                 mov     eax, [ebp+var_34]
.text:00001F0C                 push    eax             ; lpData
.text:00001F0D                 push    7               ; dwType
.text:00001F0F                 push    0               ; Reserved
.text:00001F11                 mov     ecx, ds:_reg_jumplist_value
.text:00001F17                 push    ecx             ; lpValueName
.text:00001F18                 mov     edx, [ebp+phkResult]
.text:00001F1B                 push    edx             ; hKey
.text:00001F1C                 call    dword ptr ds:__imp__RegSetValueExA@24 ; RegSetValueExA(x,x,x,x,x,x)
.text:00001F22                 cmp     esi, esp
.text:00001F24                 call    __RTC_CheckEsp
.text:00001F29                 mov     [ebp+var_4], eax
.text:00001F2C                 mov     eax, [ebp+lpData]
.text:00001F2F                 push    eax
.text:00001F30                 call    _safefree
.text:00001F35                 add     esp, 4
.text:00001F38                 mov     ecx, [ebp+var_34]
.text:00001F3B                 mov     [ebp+lpData], ecx
.text:00001F3E                 jmp     short loc_1F47
.text:00001F40 ; ---------------------------------------------------------------------------
.text:00001F40
.text:00001F40 loc_1F40:                               ; CODE XREF: _transform_jumplist_registry+1F0j
.text:00001F40                 mov     [ebp+var_4], 0
.text:00001F47
.text:00001F47 loc_1F47:                               ; CODE XREF: _transform_jumplist_registry+336j
.text:00001F47                 cmp     [ebp+arg_8], 0
.text:00001F4B                 jz      short loc_1F5D
.text:00001F4D                 cmp     [ebp+var_4], 0
.text:00001F51                 jnz     short loc_1F5D
.text:00001F53                 mov     edx, [ebp+arg_8]
.text:00001F56                 mov     eax, [ebp+lpData]
.text:00001F59                 mov     [edx], eax
.text:00001F5B                 jmp     short loc_1F69
.text:00001F5D ; ---------------------------------------------------------------------------
.text:00001F5D
.text:00001F5D loc_1F5D:                               ; CODE XREF: _transform_jumplist_registry+343j
.text:00001F5D                                         ; _transform_jumplist_registry+349j
.text:00001F5D                 mov     ecx, [ebp+lpData]
.text:00001F60                 push    ecx
.text:00001F61                 call    _safefree
.text:00001F66                 add     esp, 4
.text:00001F69
.text:00001F69 loc_1F69:                               ; CODE XREF: _transform_jumplist_registry+353j
.text:00001F69                 mov     esi, esp
.text:00001F6B                 mov     edx, [ebp+phkResult]
.text:00001F6E                 push    edx             ; hKey
.text:00001F6F                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00001F75                 cmp     esi, esp
.text:00001F77                 call    __RTC_CheckEsp
.text:00001F7C                 cmp     [ebp+var_4], 0
.text:00001F80                 jz      short loc_1F8B
.text:00001F82                 mov     eax, 4
.text:00001F87                 jmp     short loc_1F8D
.text:00001F89 ; ---------------------------------------------------------------------------
.text:00001F89                 jmp     short loc_1F8D
.text:00001F8B ; ---------------------------------------------------------------------------
.text:00001F8B
.text:00001F8B loc_1F8B:                               ; CODE XREF: _transform_jumplist_registry+378j
.text:00001F8B                 xor     eax, eax
.text:00001F8D
.text:00001F8D loc_1F8D:                               ; CODE XREF: _transform_jumplist_registry+53j
.text:00001F8D                                         ; _transform_jumplist_registry+12Dj ...
.text:00001F8D                 push    edx
.text:00001F8E                 mov     ecx, ebp
.text:00001F90                 push    eax
.text:00001F91                 lea     edx, $LN34
.text:00001F97                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F9C                 pop     eax
.text:00001F9D                 pop     edx
.text:00001F9E                 pop     edi
.text:00001F9F                 pop     esi
.text:00001FA0                 add     esp, 44h
.text:00001FA3                 cmp     ebp, esp
.text:00001FA5                 call    __RTC_CheckEsp
.text:00001FAA                 mov     esp, ebp
.text:00001FAC                 pop     ebp
.text:00001FAD                 retn
.text:00001FAD _transform_jumplist_registry endp
.text:00001FAD
.text:00001FAD ; ---------------------------------------------------------------------------
.text:00001FAE                 align 10h
.text:00001FB0 $LN34           dd 3                    ; DATA XREF: _transform_jumplist_registry+389o
.text:00001FB4                 dd offset $LN33
.text:00001FB8 $LN33           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00001FB4o
.text:00001FC0                 dd offset $LN30         ; "pjumplist_key"
.text:00001FC4                 dd 0FFFFFFE4h, 4
.text:00001FCC                 dd offset $LN31         ; "type"
.text:00001FD0                 dd 0FFFFFFD8h, 4
.text:00001FD8                 dd offset $LN32         ; "value_length"
.text:00001FDC $LN32           db 'value_length',0     ; DATA XREF: .text:00001FD8o
.text:00001FE9 $LN31           db 'type',0             ; DATA XREF: .text:00001FCCo
.text:00001FEE $LN30           db 'pjumplist_key',0    ; DATA XREF: .text:00001FC0o
.text:00001FFC                 db 0Ch dup(0CCh)
.text:00002008
.text:00002008 ; =============== S U B R O U T I N E =======================================
.text:00002008
.text:00002008 ; Attributes: bp-based frame
.text:00002008
.text:00002008 ; int __cdecl remove_from_jumplist_registry(char *Str2)
.text:00002008                 public _remove_from_jumplist_registry
.text:00002008 _remove_from_jumplist_registry proc near
.text:00002008
.text:00002008 Str2            = dword ptr  8
.text:00002008
.text:00002008                 push    ebp
.text:00002009                 mov     ebp, esp
.text:0000200B                 push    0               ; int
.text:0000200D                 mov     eax, [ebp+Str2]
.text:00002010                 push    eax             ; Str2
.text:00002011                 push    0               ; Str
.text:00002013                 call    _transform_jumplist_registry
.text:00002018                 add     esp, 0Ch
.text:0000201B                 cmp     ebp, esp
.text:0000201D                 call    __RTC_CheckEsp
.text:00002022                 pop     ebp
.text:00002023                 retn
.text:00002023 _remove_from_jumplist_registry endp
.text:00002023
.text:00002023 ; ---------------------------------------------------------------------------
.text:00002024                 align 8
.text:00002028
.text:00002028 ; =============== S U B R O U T I N E =======================================
.text:00002028
.text:00002028 ; Attributes: bp-based frame
.text:00002028
.text:00002028                 public _get_jumplist_registry_entries
.text:00002028 _get_jumplist_registry_entries proc near
.text:00002028
.text:00002028 var_C           = dword ptr -0Ch
.text:00002028 var_8           = dword ptr -8
.text:00002028 var_4           = dword ptr -4
.text:00002028
.text:00002028                 push    ebp
.text:00002029                 mov     ebp, esp
.text:0000202B                 sub     esp, 0Ch
.text:0000202E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002035                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000203C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002043                 lea     eax, [ebp+var_8]
.text:00002046                 push    eax             ; int
.text:00002047                 push    0               ; Str2
.text:00002049                 push    0               ; Str
.text:0000204B                 call    _transform_jumplist_registry
.text:00002050                 add     esp, 0Ch
.text:00002053                 test    eax, eax
.text:00002055                 jz      short loc_2073
.text:00002057                 push    1
.text:00002059                 push    2
.text:0000205B                 call    _safemalloc
.text:00002060                 add     esp, 8
.text:00002063                 mov     [ebp+var_8], eax
.text:00002066                 mov     ecx, [ebp+var_8]
.text:00002069                 mov     byte ptr [ecx], 0
.text:0000206C                 mov     edx, [ebp+var_8]
.text:0000206F                 mov     byte ptr [edx+1], 0
.text:00002073
.text:00002073 loc_2073:                               ; CODE XREF: _get_jumplist_registry_entries+2Dj
.text:00002073                 mov     eax, [ebp+var_8]
.text:00002076                 push    edx
.text:00002077                 mov     ecx, ebp
.text:00002079                 push    eax
.text:0000207A                 lea     edx, $LN6_4
.text:00002080                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002085                 pop     eax
.text:00002086                 pop     edx
.text:00002087                 add     esp, 0Ch
.text:0000208A                 cmp     ebp, esp
.text:0000208C                 call    __RTC_CheckEsp
.text:00002091                 mov     esp, ebp
.text:00002093                 pop     ebp
.text:00002094                 retn
.text:00002094 _get_jumplist_registry_entries endp
.text:00002094
.text:00002094 ; ---------------------------------------------------------------------------
.text:00002095                 align 4
.text:00002098 $LN6_4          dd 1                    ; DATA XREF: _get_jumplist_registry_entries+52o
.text:0000209C                 dd offset $LN5_3
.text:000020A0 $LN5_3          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000209Co
.text:000020A8                 dd offset $LN4_2        ; "list_value"
.text:000020AC $LN4_2          db 'list_value',0       ; DATA XREF: .text:000020A8o
.text:000020B7                 align 4
.text:000020B8
.text:000020B8 ; =============== S U B R O U T I N E =======================================
.text:000020B8
.text:000020B8 ; Attributes: bp-based frame
.text:000020B8
.text:000020B8                 public _cleanup_all
.text:000020B8 _cleanup_all    proc near
.text:000020B8
.text:000020B8 var_124         = byte ptr -124h
.text:000020B8 Name            = byte ptr -120h
.text:000020B8 var_14          = dword ptr -14h
.text:000020B8 phkResult       = dword ptr -0Ch
.text:000020B8 var_4           = dword ptr -4
.text:000020B8
.text:000020B8                 push    ebp
.text:000020B9                 mov     ebp, esp
.text:000020BB                 sub     esp, 124h
.text:000020C1                 push    esi
.text:000020C2                 push    edi
.text:000020C3                 lea     edi, [ebp+var_124]
.text:000020C9                 mov     ecx, 49h ; 'I'
.text:000020CE                 mov     eax, 0CCCCCCCCh
.text:000020D3                 rep stosd
.text:000020D5                 mov     eax, dword ptr ds:___security_cookie
.text:000020DA                 xor     eax, ebp
.text:000020DC                 mov     [ebp+var_4], eax
.text:000020DF                 push    0
.text:000020E1                 call    _access_random_seed
.text:000020E6                 add     esp, 4
.text:000020E9                 call    _clear_jumplist
.text:000020EE                 mov     esi, esp
.text:000020F0                 lea     eax, [ebp+phkResult]
.text:000020F3                 push    eax             ; phkResult
.text:000020F4                 push    offset $SG120066 ; "Software\\SimonTatham\\PuTTY"
.text:000020F9                 push    80000001h       ; hKey
.text:000020FE                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:00002104                 cmp     esi, esp
.text:00002106                 call    __RTC_CheckEsp
.text:0000210B                 test    eax, eax
.text:0000210D                 jnz     short loc_212E
.text:0000210F                 mov     ecx, [ebp+phkResult]
.text:00002112                 push    ecx             ; hKey
.text:00002113                 call    _registry_recursive_remove
.text:00002118                 add     esp, 4
.text:0000211B                 mov     esi, esp
.text:0000211D                 mov     edx, [ebp+phkResult]
.text:00002120                 push    edx             ; hKey
.text:00002121                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:00002127                 cmp     esi, esp
.text:00002129                 call    __RTC_CheckEsp
.text:0000212E
.text:0000212E loc_212E:                               ; CODE XREF: _cleanup_all+55j
.text:0000212E                 mov     esi, esp
.text:00002130                 lea     eax, [ebp+phkResult]
.text:00002133                 push    eax             ; phkResult
.text:00002134                 push    offset $SG120071 ; "Software\\SimonTatham"
.text:00002139                 push    80000001h       ; hKey
.text:0000213E                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:00002144                 cmp     esi, esp
.text:00002146                 call    __RTC_CheckEsp
.text:0000214B                 test    eax, eax
.text:0000214D                 jnz     loc_21F4
.text:00002153                 mov     esi, esp
.text:00002155                 push    offset $SG120072 ; "PuTTY"
.text:0000215A                 mov     ecx, [ebp+phkResult]
.text:0000215D                 push    ecx             ; hKey
.text:0000215E                 call    dword ptr ds:__imp__RegDeleteKeyA@8 ; RegDeleteKeyA(x,x)
.text:00002164                 cmp     esi, esp
.text:00002166                 call    __RTC_CheckEsp
.text:0000216B                 mov     esi, esp
.text:0000216D                 push    105h            ; cchName
.text:00002172                 lea     edx, [ebp+Name]
.text:00002178                 push    edx             ; lpName
.text:00002179                 push    0               ; dwIndex
.text:0000217B                 mov     eax, [ebp+phkResult]
.text:0000217E                 push    eax             ; hKey
.text:0000217F                 call    dword ptr ds:__imp__RegEnumKeyA@16 ; RegEnumKeyA(x,x,x,x)
.text:00002185                 cmp     esi, esp
.text:00002187                 call    __RTC_CheckEsp
.text:0000218C                 mov     [ebp+var_14], eax
.text:0000218F                 mov     esi, esp
.text:00002191                 mov     ecx, [ebp+phkResult]
.text:00002194                 push    ecx             ; hKey
.text:00002195                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:0000219B                 cmp     esi, esp
.text:0000219D                 call    __RTC_CheckEsp
.text:000021A2                 cmp     [ebp+var_14], 0
.text:000021A6                 jz      short loc_21F4
.text:000021A8                 mov     esi, esp
.text:000021AA                 lea     edx, [ebp+phkResult]
.text:000021AD                 push    edx             ; phkResult
.text:000021AE                 push    offset $SG120078 ; "Software"
.text:000021B3                 push    80000001h       ; hKey
.text:000021B8                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:000021BE                 cmp     esi, esp
.text:000021C0                 call    __RTC_CheckEsp
.text:000021C5                 test    eax, eax
.text:000021C7                 jnz     short loc_21F4
.text:000021C9                 mov     esi, esp
.text:000021CB                 push    offset $SG120079 ; "SimonTatham"
.text:000021D0                 mov     eax, [ebp+phkResult]
.text:000021D3                 push    eax             ; hKey
.text:000021D4                 call    dword ptr ds:__imp__RegDeleteKeyA@8 ; RegDeleteKeyA(x,x)
.text:000021DA                 cmp     esi, esp
.text:000021DC                 call    __RTC_CheckEsp
.text:000021E1                 mov     esi, esp
.text:000021E3                 mov     ecx, [ebp+phkResult]
.text:000021E6                 push    ecx             ; hKey
.text:000021E7                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:000021ED                 cmp     esi, esp
.text:000021EF                 call    __RTC_CheckEsp
.text:000021F4
.text:000021F4 loc_21F4:                               ; CODE XREF: _cleanup_all+95j
.text:000021F4                                         ; _cleanup_all+EEj ...
.text:000021F4                 push    edx
.text:000021F5                 mov     ecx, ebp
.text:000021F7                 push    eax
.text:000021F8                 lea     edx, $LN10_4
.text:000021FE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002203                 pop     eax
.text:00002204                 pop     edx
.text:00002205                 pop     edi
.text:00002206                 pop     esi
.text:00002207                 mov     ecx, [ebp+var_4]
.text:0000220A                 xor     ecx, ebp
.text:0000220C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002211                 add     esp, 124h
.text:00002217                 cmp     ebp, esp
.text:00002219                 call    __RTC_CheckEsp
.text:0000221E                 mov     esp, ebp
.text:00002220                 pop     ebp
.text:00002221                 retn
.text:00002221 _cleanup_all    endp
.text:00002221
.text:00002221 ; ---------------------------------------------------------------------------
.text:00002222                 align 4
.text:00002224 $LN10_4         dd 2                    ; DATA XREF: _cleanup_all+140o
.text:00002228                 dd offset $LN9_4
.text:0000222C $LN9_4          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00002228o
.text:00002234                 dd offset $LN7_2        ; "key"
.text:00002238                 dd 0FFFFFEE0h, 105h
.text:00002240                 dd offset $LN8_3        ; "name"
.text:00002244 $LN8_3          db 'name',0             ; DATA XREF: .text:00002240o
.text:00002249 $LN7_2          db 'key',0              ; DATA XREF: .text:00002234o
.text:0000224D                 db 0Bh dup(0CCh)
.text:00002258
.text:00002258 ; =============== S U B R O U T I N E =======================================
.text:00002258
.text:00002258 ; Attributes: bp-based frame
.text:00002258
.text:00002258 ; int __cdecl registry_recursive_remove(HKEY hKey)
.text:00002258 _registry_recursive_remove proc near    ; CODE XREF: _cleanup_all+5Bp
.text:00002258                                         ; _registry_recursive_remove+81p
.text:00002258
.text:00002258 var_124         = byte ptr -124h
.text:00002258 phkResult       = dword ptr -120h
.text:00002258 Name            = byte ptr -114h
.text:00002258 dwIndex         = dword ptr -8
.text:00002258 var_4           = dword ptr -4
.text:00002258 hKey            = dword ptr  8
.text:00002258
.text:00002258                 push    ebp
.text:00002259                 mov     ebp, esp
.text:0000225B                 sub     esp, 124h
.text:00002261                 push    esi
.text:00002262                 push    edi
.text:00002263                 lea     edi, [ebp+var_124]
.text:00002269                 mov     ecx, 49h ; 'I'
.text:0000226E                 mov     eax, 0CCCCCCCCh
.text:00002273                 rep stosd
.text:00002275                 mov     eax, dword ptr ds:___security_cookie
.text:0000227A                 xor     eax, ebp
.text:0000227C                 mov     [ebp+var_4], eax
.text:0000227F                 mov     [ebp+dwIndex], 0
.text:00002286
.text:00002286 loc_2286:                               ; CODE XREF: _registry_recursive_remove+B9j
.text:00002286                 mov     esi, esp
.text:00002288                 push    105h            ; cchName
.text:0000228D                 lea     eax, [ebp+Name]
.text:00002293                 push    eax             ; lpName
.text:00002294                 mov     ecx, [ebp+dwIndex]
.text:00002297                 push    ecx             ; dwIndex
.text:00002298                 mov     edx, [ebp+hKey]
.text:0000229B                 push    edx             ; hKey
.text:0000229C                 call    dword ptr ds:__imp__RegEnumKeyA@16 ; RegEnumKeyA(x,x,x,x)
.text:000022A2                 cmp     esi, esp
.text:000022A4                 call    __RTC_CheckEsp
.text:000022A9                 test    eax, eax
.text:000022AB                 jnz     short loc_2316
.text:000022AD                 mov     esi, esp
.text:000022AF                 lea     eax, [ebp+phkResult]
.text:000022B5                 push    eax             ; phkResult
.text:000022B6                 lea     ecx, [ebp+Name]
.text:000022BC                 push    ecx             ; lpSubKey
.text:000022BD                 mov     edx, [ebp+hKey]
.text:000022C0                 push    edx             ; hKey
.text:000022C1                 call    dword ptr ds:__imp__RegOpenKeyA@12 ; RegOpenKeyA(x,x,x)
.text:000022C7                 cmp     esi, esp
.text:000022C9                 call    __RTC_CheckEsp
.text:000022CE                 test    eax, eax
.text:000022D0                 jnz     short loc_22F7
.text:000022D2                 mov     eax, [ebp+phkResult]
.text:000022D8                 push    eax             ; hKey
.text:000022D9                 call    _registry_recursive_remove
.text:000022DE                 add     esp, 4
.text:000022E1                 mov     esi, esp
.text:000022E3                 mov     ecx, [ebp+phkResult]
.text:000022E9                 push    ecx             ; hKey
.text:000022EA                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text:000022F0                 cmp     esi, esp
.text:000022F2                 call    __RTC_CheckEsp
.text:000022F7
.text:000022F7 loc_22F7:                               ; CODE XREF: _registry_recursive_remove+78j
.text:000022F7                 mov     esi, esp
.text:000022F9                 lea     edx, [ebp+Name]
.text:000022FF                 push    edx             ; lpSubKey
.text:00002300                 mov     eax, [ebp+hKey]
.text:00002303                 push    eax             ; hKey
.text:00002304                 call    dword ptr ds:__imp__RegDeleteKeyA@8 ; RegDeleteKeyA(x,x)
.text:0000230A                 cmp     esi, esp
.text:0000230C                 call    __RTC_CheckEsp
.text:00002311                 jmp     loc_2286
.text:00002316 ; ---------------------------------------------------------------------------
.text:00002316
.text:00002316 loc_2316:                               ; CODE XREF: _registry_recursive_remove+53j
.text:00002316                 push    edx
.text:00002317                 mov     ecx, ebp
.text:00002319                 push    eax
.text:0000231A                 lea     edx, $LN9_5
.text:00002320                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002325                 pop     eax
.text:00002326                 pop     edx
.text:00002327                 pop     edi
.text:00002328                 pop     esi
.text:00002329                 mov     ecx, [ebp+var_4]
.text:0000232C                 xor     ecx, ebp
.text:0000232E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002333                 add     esp, 124h
.text:00002339                 cmp     ebp, esp
.text:0000233B                 call    __RTC_CheckEsp
.text:00002340                 mov     esp, ebp
.text:00002342                 pop     ebp
.text:00002343                 retn
.text:00002343 _registry_recursive_remove endp
.text:00002343
.text:00002343 ; ---------------------------------------------------------------------------
.text:00002344 $LN9_5          dd 2                    ; DATA XREF: _registry_recursive_remove+C2o
.text:00002348                 dd offset $LN8_4
.text:0000234C $LN8_4          dd 0FFFFFEECh, 105h     ; DATA XREF: .text:00002348o
.text:00002354                 dd offset $LN6_5        ; "name"
.text:00002358                 dd 0FFFFFEE0h, 4
.text:00002360                 dd offset $LN7_3        ; "subkey"
.text:00002364 $LN7_3          db 'subkey',0           ; DATA XREF: .text:00002360o
.text:0000236B $LN6_5          db 'name',0             ; DATA XREF: .text:00002354o
.text:0000236B _text           ends
.text:0000236B
.rtc$TMZ:00002370 ; ===========================================================================
.rtc$TMZ:00002370
.rtc$TMZ:00002370 ; Segment type: Pure data
.rtc$TMZ:00002370 ; Segment permissions: Read
.rtc$TMZ:00002370 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002370                 assume cs:_rtc$TMZ
.rtc$TMZ:00002370                 ;org 2370h
.rtc$TMZ:00002370 ; COMDAT (pick any)
.rtc$TMZ:00002370 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002370 _rtc$TMZ        ends
.rtc$TMZ:00002370
.rtc$IMZ:00002374 ; ===========================================================================
.rtc$IMZ:00002374
.rtc$IMZ:00002374 ; Segment type: Pure data
.rtc$IMZ:00002374 ; Segment permissions: Read
.rtc$IMZ:00002374 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002374                 assume cs:_rtc$IMZ
.rtc$IMZ:00002374                 ;org 2374h
.rtc$IMZ:00002374 ; COMDAT (pick any)
.rtc$IMZ:00002374 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002374 _rtc$IMZ        ends
.rtc$IMZ:00002374
UNDEF:00002380 ; ===========================================================================
UNDEF:00002380
UNDEF:00002380 ; Segment type: Externs
UNDEF:00002380 ; UNDEF
UNDEF:00002380 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
UNDEF:00002380                 extrn __imp__RegCloseKey@4:near
UNDEF:00002380                                         ; CODE XREF: _open_settings_w+E8p
UNDEF:00002380                                         ; _close_settings_w+Ap ...
UNDEF:00002384                 extrn _dupprintf:near   ; CODE XREF: _open_settings_w+B3p
UNDEF:00002384                                         ; _open_settings_w+10Bp
UNDEF:00002388                 extrn _safefree:near    ; CODE XREF: _open_settings_w+A0p
UNDEF:00002388                                         ; _open_settings_w+11Cp ...
UNDEF:0000238C ; LSTATUS __stdcall RegCreateKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult)
UNDEF:0000238C                 extrn __imp__RegCreateKeyA@12:near
UNDEF:0000238C                                         ; CODE XREF: _open_settings_w+86p
UNDEF:0000238C                                         ; _open_settings_w+D2p ...
UNDEF:00002390                 extrn _safemalloc:near  ; CODE XREF: _open_settings_w+59p
UNDEF:00002390                                         ; _open_settings_r+4Dp ...
UNDEF:00002394 ; size_t __cdecl strlen(const char *Str)
UNDEF:00002394                 extrn _strlen:near      ; CODE XREF: _open_settings_w+4Ap
UNDEF:00002394                                         ; _write_setting_s+Ep ...
UNDEF:00002398 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002398                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002398                                         ; CODE XREF: _open_settings_w+141p
UNDEF:00002398                                         ; _open_settings_r+E5p ...
UNDEF:0000239C                 extrn __RTC_CheckEsp:near ; CODE XREF: _open_settings_w+8Ep
UNDEF:0000239C                                         ; _open_settings_w+DAp ...
UNDEF:000023A0                 extrn __RTC_Shutdown:near
UNDEF:000023A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000023A4                 extrn __RTC_InitBase:near
UNDEF:000023A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000023A8 ; LSTATUS __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData)
UNDEF:000023A8                 extrn __imp__RegSetValueExA@24:near
UNDEF:000023A8                                         ; CODE XREF: _write_setting_s+2Cp
UNDEF:000023A8                                         ; _write_setting_i+1Ep ...
UNDEF:000023AC ; LSTATUS __stdcall RegOpenKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult)
UNDEF:000023AC                 extrn __imp__RegOpenKeyA@12:near
UNDEF:000023AC                                         ; CODE XREF: _open_settings_r+79p
UNDEF:000023AC                                         ; _open_settings_r+A1p ...
UNDEF:000023B0 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000023B0                 extrn __wassert:near    ; CODE XREF: _read_setting_s+D5p
UNDEF:000023B4 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
UNDEF:000023B4                 extrn __imp__RegQueryValueExA@24:near
UNDEF:000023B4                                         ; CODE XREF: _read_setting_s+47p
UNDEF:000023B4                                         ; _read_setting_s+97p ...
UNDEF:000023B8                 extrn _fontspec_new:near
UNDEF:000023B8                                         ; CODE XREF: _read_setting_fontspec+13Dp
UNDEF:000023BC                 extrn _dupcat:near      ; CODE XREF: _read_setting_fontspec+48p
UNDEF:000023BC                                         ; _read_setting_fontspec+98p ...
UNDEF:000023C0                 extrn _filename_from_str:near
UNDEF:000023C0                                         ; CODE XREF: _read_setting_filename+31p
UNDEF:000023C4                 extrn _remove_session_from_jumplist:near
UNDEF:000023C4                                         ; CODE XREF: _del_settings+A7p
UNDEF:000023C8 ; LSTATUS __stdcall RegDeleteKeyA(HKEY hKey, LPCSTR lpSubKey)
UNDEF:000023C8                 extrn __imp__RegDeleteKeyA@8:near
UNDEF:000023C8                                         ; CODE XREF: _del_settings+77p
UNDEF:000023C8                                         ; _cleanup_all+A6p ...
UNDEF:000023CC ; LSTATUS __stdcall RegEnumKeyA(HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName)
UNDEF:000023CC                 extrn __imp__RegEnumKeyA@16:near
UNDEF:000023CC                                         ; CODE XREF: _enum_settings_next+65p
UNDEF:000023CC                                         ; _cleanup_all+C7p ...
UNDEF:000023D0 ; size_t __cdecl strcspn(const char *Str, const char *Control)
UNDEF:000023D0                 extrn _strcspn:near     ; CODE XREF: _verify_host_key+120p
UNDEF:000023D0                                         ; _verify_host_key+1D7p
UNDEF:000023D4 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:000023D4                 extrn _strcmp:near      ; CODE XREF: _verify_host_key+107p
UNDEF:000023D4                                         ; _verify_host_key+298p ...
UNDEF:000023D8 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:000023D8                 extrn _sprintf:near     ; CODE XREF: _hostkey_regname+4Bp
UNDEF:000023DC ; char *__cdecl strcat(char *Dest, const char *Source)
UNDEF:000023DC                 extrn _strcat:near      ; CODE XREF: _hostkey_regname+24p
UNDEF:000023DC                                         ; _access_random_seed+19Dp ...
UNDEF:000023E0 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:000023E0                 extrn _strcpy:near      ; CODE XREF: _hostkey_regname+13p
UNDEF:000023E0                                         ; _transform_jumplist_registry+245p ...
UNDEF:000023E4 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:000023E4                 extrn __imp__CloseHandle@4:near
UNDEF:000023E4                                         ; CODE XREF: _read_random_seed+A1p
UNDEF:000023E4                                         ; _write_random_seed+52p
UNDEF:000023E4                                         ; DATA XREF: ...
UNDEF:000023E8 ; BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
UNDEF:000023E8                 extrn __imp__ReadFile@20:near
UNDEF:000023E8                                         ; CODE XREF: _read_random_seed+5Ep
UNDEF:000023E8                                         ; DATA XREF: _read_random_seed+5Er
UNDEF:000023EC                 extrn ___security_cookie:near
UNDEF:000023EC                                         ; DATA XREF: _read_random_seed+1Dr
UNDEF:000023EC                                         ; _access_random_seed+1Dr ...
UNDEF:000023F0 ; __fastcall __security_check_cookie(x)
UNDEF:000023F0                 extrn @__security_check_cookie@4:near
UNDEF:000023F0                                         ; CODE XREF: _read_random_seed+C6p
UNDEF:000023F0                                         ; _access_random_seed+322p ...
UNDEF:000023F4 ; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
UNDEF:000023F4                 extrn __imp__GetWindowsDirectoryA@8:near
UNDEF:000023F4                                         ; CODE XREF: _access_random_seed+2C6p
UNDEF:000023F4                                         ; DATA XREF: _access_random_seed+2C6r
UNDEF:000023F8 ; DWORD __stdcall GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
UNDEF:000023F8                 extrn __imp__GetEnvironmentVariableA@12:near
UNDEF:000023F8                                         ; CODE XREF: _access_random_seed+234p
UNDEF:000023F8                                         ; _access_random_seed+268p
UNDEF:000023F8                                         ; DATA XREF: ...
UNDEF:000023FC ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:000023FC                 extrn __imp__GetProcAddress@8:near
UNDEF:000023FC                                         ; CODE XREF: _access_random_seed+12Dp
UNDEF:000023FC                                         ; DATA XREF: _access_random_seed+12Dr
UNDEF:00002400                 extrn _load_system32_dll:near
UNDEF:00002400                                         ; CODE XREF: _access_random_seed+10Ap
UNDEF:00002404 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00002404                 extrn _memset:near      ; CODE XREF: _access_random_seed+42p
UNDEF:00002408 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
UNDEF:00002408                 extrn __imp__CreateFileA@28:near
UNDEF:00002408                                         ; CODE XREF: _try_random_seed+B8p
UNDEF:00002408                                         ; DATA XREF: _try_random_seed+B8r
UNDEF:0000240C                 extrn _nonfatal:near    ; CODE XREF: _try_random_seed+57p
UNDEF:00002410                 extrn _win_strerror:near ; CODE XREF: _try_random_seed+45p
UNDEF:00002414 ; DWORD __stdcall GetLastError()
UNDEF:00002414                 extrn __imp__GetLastError@0:near
UNDEF:00002414                                         ; CODE XREF: _try_random_seed+23p
UNDEF:00002414                                         ; _try_random_seed+37p
UNDEF:00002414                                         ; DATA XREF: ...
UNDEF:00002418 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
UNDEF:00002418                 extrn __imp__DeleteFileA@4:near
UNDEF:00002418                                         ; CODE XREF: _try_random_seed+10p
UNDEF:00002418                                         ; DATA XREF: _try_random_seed+10r
UNDEF:0000241C ; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
UNDEF:0000241C                 extrn __imp__WriteFile@20:near
UNDEF:0000241C                                         ; CODE XREF: _write_random_seed+3Fp
UNDEF:0000241C                                         ; DATA XREF: _write_random_seed+3Fr
UNDEF:00002420 ; LSTATUS __stdcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName)
UNDEF:00002420                 extrn __imp__RegDeleteValueA@8:near
UNDEF:00002420                                         ; CODE XREF: _transform_jumplist_registry+147p
UNDEF:00002420                                         ; DATA XREF: _transform_jumplist_registry+147r
UNDEF:00002424 ; LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
UNDEF:00002424                 extrn __imp__RegCreateKeyExA@36:near
UNDEF:00002424                                         ; CODE XREF: _transform_jumplist_registry+38p
UNDEF:00002424                                         ; DATA XREF: _transform_jumplist_registry+38r
UNDEF:00002428                 extrn _clear_jumplist:near ; CODE XREF: _cleanup_all+31p
UNDEF:00002428
UNDEF:00002428
UNDEF:00002428                 end