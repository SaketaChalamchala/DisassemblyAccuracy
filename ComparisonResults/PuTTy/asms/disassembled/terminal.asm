.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 12D9C474FD0C37D42F07DFC576813231
.bss:00000000 ; Input CRC32 : 7836244F
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\terminal.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment byte public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000 $SG85778        db    ? ;               ; DATA XREF: .data:_EMPTY_WINDOW_TITLEo
.bss:00000001 $SG88609        db    ? ;               ; DATA XREF: _term_get_userpass_input+12Ao
.bss:00000002                 align 4
.bss:00000002 _bss            ends
.bss:00000002
.data:00000004 ; ===========================================================================
.data:00000004
.data:00000004 ; Segment type: Pure data
.data:00000004 ; Segment permissions: Read/Write
.data:00000004 ; Segment alignment 'qword' can not be represented in assembly
.data:00000004 _data           segment para public 'DATA' use32
.data:00000004                 assume cs:_data
.data:00000004                 ;org 4
.data:00000004                 public _EMPTY_WINDOW_TITLE
.data:00000004 _EMPTY_WINDOW_TITLE dd offset $SG85778  ; DATA XREF: _term_out:loc_CFAFr
.data:00000004                                         ; _term_out:loc_D075r
.data:00000008 ; wchar_t _SG85860
.data:00000008 $SG85860:                               ; DATA XREF: _add_cc+2Ao
.data:00000008                 unicode 0, <..\..\..\terminal.c>,0
.data:00000030 ; wchar_t _SG85861
.data:00000030 $SG85861:                               ; DATA XREF: _add_cc+2Fo
.data:00000030                                         ; .data:$SG87639o
.data:00000030                 unicode 0, <col >
.data:00000030                 dw 3Eh
.data:00000030                 unicode 0, <= 0 && col >
.data:00000030                 dw 3Ch
.data:00000030                 unicode 0, < line->
.data:00000030                 dw 3Eh
.data:00000030                 unicode 0, <cols>,0
.data:0000006A                 align 4
.data:0000006C ; wchar_t _SG85886
.data:0000006C $SG85886:                               ; DATA XREF: _clear_cc+30o
.data:0000006C                 unicode 0, <..\..\..\terminal.c>,0
.data:00000094 ; wchar_t _SG85887
.data:00000094 $SG85887:                               ; DATA XREF: _clear_cc+35o
.data:00000094                                         ; .rdata:00000BE4o
.data:00000094                 unicode 0, <col >
.data:00000094                 dw 3Eh
.data:00000094                 unicode 0, <= 0 && col >
.data:00000094                 dw 3Ch
.data:00000094                 unicode 0, < line->
.data:00000094                 dw 3Eh
.data:00000094                 unicode 0, <cols>,0
.data:000000CE                 align 10h
.data:000000D0 ; wchar_t _SG85992
.data:000000D0 $SG85992:                               ; DATA XREF: _makerle+127o
.data:000000D0                 unicode 0, <..\..\..\terminal.c>,0
.data:000000F8 ; wchar_t _SG85993
.data:000000F8 $SG85993:                               ; DATA XREF: _makerle+12Co
.data:000000F8                 unicode 0, <hdrsize >
.data:000000F8                 dw 3Eh
.data:000000F8                 unicode 0, < 0>,0
.data:00000110 ; wchar_t _SG85996
.data:00000110 $SG85996:                               ; DATA XREF: _makerle+161o
.data:00000110                 unicode 0, <..\..\..\terminal.c>,0
.data:00000138 ; wchar_t _SG85997
.data:00000138 $SG85997:                               ; DATA XREF: _makerle+166o
.data:00000138                 unicode 0, <prevpos == hdrpos + 1>,0
.data:00000164 ; wchar_t _SG86000
.data:00000164 $SG86000:                               ; DATA XREF: _makerle+1D3o
.data:00000164                 unicode 0, <..\..\..\terminal.c>,0
.data:0000018C ; wchar_t _SG86001
.data:0000018C $SG86001:                               ; DATA XREF: _makerle+1D8o
.data:0000018C                 unicode 0, <hdrsize >
.data:0000018C                 dw 3Eh
.data:0000018C                 unicode 0, <= 1 && hdrsize >
.data:0000018C                 dw 3Ch
.data:0000018C                 unicode 0, <= 128>,0
.data:000001CA                 align 4
.data:000001CC ; wchar_t _SG86010
.data:000001CC $SG86010:                               ; DATA XREF: _makerle+2C5o
.data:000001CC                 unicode 0, <..\..\..\terminal.c>,0
.data:000001F4 ; wchar_t _SG86011
.data:000001F4 $SG86011:                               ; DATA XREF: _makerle+2CAo
.data:000001F4                 unicode 0, <runlen >
.data:000001F4                 dw 3Eh
.data:000001F4                 unicode 0, <= 2 && runlen >
.data:000001F4                 dw 3Ch
.data:000001F4                 unicode 0, <= 129>,0
.data:0000022E                 align 10h
.data:00000230 ; wchar_t _SG86017
.data:00000230 $SG86017:                               ; DATA XREF: _makerle+3B7o
.data:00000230                 unicode 0, <..\..\..\terminal.c>,0
.data:00000258 ; wchar_t _SG86018
.data:00000258 $SG86018:                               ; DATA XREF: _makerle+3BCo
.data:00000258                 unicode 0, <hdrsize >
.data:00000258                 dw 3Ch
.data:00000258                 unicode 0, <= 128>,0
.data:00000276                 align 4
.data:00000278 ; wchar_t _SG86083
.data:00000278 $SG86083:                               ; DATA XREF: _makeliteral_cc+55o
.data:00000278                 unicode 0, <..\..\..\terminal.c>,0
.data:000002A0 ; wchar_t _SG86084
.data:000002A0 $SG86084:                               ; DATA XREF: _makeliteral_cc+5Ao
.data:000002A0                 unicode 0, <c->
.data:000002A0                 dw 3Eh
.data:000002A0                 unicode 0, <chr != 0>,0
.data:000002B8 ; wchar_t _SG86141
.data:000002B8 $SG86141:                               ; DATA XREF: _readrle+87o
.data:000002B8                 unicode 0, <..\..\..\terminal.c>,0
.data:000002E0 ; wchar_t _SG86142
.data:000002E0 $SG86142:                               ; DATA XREF: _readrle+8Co
.data:000002E0                 unicode 0, <n >
.data:000002E0                 dw 3Ch
.data:000002E0                 unicode 0, < ldata->
.data:000002E0                 dw 3Eh
.data:000002E0                 unicode 0, <cols>,0
.data:00000300 ; wchar_t _SG86149
.data:00000300 $SG86149:                               ; DATA XREF: _readrle+105o
.data:00000300                 unicode 0, <..\..\..\terminal.c>,0
.data:00000328 ; wchar_t _SG86150
.data:00000328 $SG86150:                               ; DATA XREF: _readrle+10Ao
.data:00000328                 unicode 0, <n >
.data:00000328                 dw 3Ch
.data:00000328                 unicode 0, < ldata->
.data:00000328                 dw 3Eh
.data:00000328                 unicode 0, <cols>,0
.data:00000348 ; wchar_t _SG86152
.data:00000348 $SG86152:                               ; DATA XREF: _readrle+15Fo
.data:00000348                 unicode 0, <..\..\..\terminal.c>,0
.data:00000370 ; wchar_t _SG86153
.data:00000370 $SG86153:                               ; DATA XREF: _readrle+164o
.data:00000370                 unicode 0, <n == ldata->
.data:00000370                 dw 3Eh
.data:00000370                 unicode 0, <cols>,0
.data:00000392                 align 4
.data:00000394 ; wchar_t _SG86174
.data:00000394 $SG86174:                               ; DATA XREF: _readliteral_chr+128o
.data:00000394                 unicode 0, <..\..\..\terminal.c>,0
.data:000003BC ; wchar_t _SG86175
.data:000003BC $SG86175:                               ; DATA XREF: _readliteral_chr+12Do
.data:000003BC                 unicode 0, <byte == 0xF0>,0
.data:000003D6                 align 4
.data:000003D8 ; wchar_t _SG86283
.data:000003D8 $SG86283:                               ; DATA XREF: _lineptr+47o
.data:000003D8                 unicode 0, <..\..\..\terminal.c>,0
.data:00000400 ; wchar_t _SG86284
.data:00000400 $SG86284:                               ; DATA XREF: _lineptr+4Co
.data:00000400                 unicode 0, <!screen>,0
.data:00000410 ; wchar_t _SG86298
.data:00000410 $SG86298:                               ; DATA XREF: _lineptr+1ABo
.data:00000410                 unicode 0, <line != NULL>,0
.data:0000042A                 align 4
.data:0000042C $SG86294        db 'line==NULL in terminal.c',0Ah ; DATA XREF: _lineptr+18Eo
.data:0000042C                 db 'lineno=%d y=%d w=%d h=%d',0Ah
.data:0000042C                 db 'count(scrollback=%p)=%d',0Ah
.data:0000042C                 db 'count(screen=%p)=%d',0Ah
.data:0000042C                 db 'count(alt=%p)=%d alt_sblines=%d',0Ah
.data:0000042C                 db 'whichtree=%p treeindex=%d',0Ah
.data:0000042C                 db 0Ah
.data:0000042C                 db 'Please contact <putty@projects.tartarus.org> and pass on the abov'
.data:0000042C                 db 'e information.',0
.data:00000515                 align 4
.data:00000518 ; wchar_t _SG86297
.data:00000518 $SG86297:                               ; DATA XREF: _lineptr+1A6o
.data:00000518                 unicode 0, <..\..\..\terminal.c>,0
.data:00000540 ; char _SG86486[]
.data:00000540 $SG86486        db 1Bh,'[?6c',0         ; DATA XREF: _term_init+60o
.data:00000546                 align 4
.data:00000548 ; wchar_t _SG86552
.data:00000548 $SG86552:                               ; DATA XREF: _term_size+142o
.data:00000548                 unicode 0, <..\..\..\terminal.c>,0
.data:00000570 ; wchar_t _SG86571
.data:00000570 $SG86571:                               ; DATA XREF: _term_size+3C9o
.data:00000570                 unicode 0, <term->
.data:00000570                 dw 3Eh
.data:00000570                 unicode 0, <rows == newrows>,0
.data:0000059C ; wchar_t _SG86553
.data:0000059C $SG86553:                               ; DATA XREF: _term_size+147o
.data:0000059C                 unicode 0, <term->
.data:0000059C                 dw 3Eh
.data:0000059C                 unicode 0, <rows == count234(term->
.data:0000059C                 dw 3Eh
.data:0000059C                 unicode 0, <screen)>,0
.data:000005E6                 align 4
.data:000005E8 ; wchar_t _SG86560
.data:000005E8 $SG86560:                               ; DATA XREF: _term_size+183o
.data:000005E8                 unicode 0, <..\..\..\terminal.c>,0
.data:00000610 ; wchar_t _SG86561
.data:00000610 $SG86561:                               ; DATA XREF: _term_size+188o
.data:00000610                 unicode 0, <sblen >
.data:00000610                 dw 3Eh
.data:00000610                 unicode 0, <= term->
.data:00000610                 dw 3Eh
.data:00000610                 unicode 0, <tempsblines>,0
.data:00000646                 align 4
.data:00000648 ; wchar_t _SG86570
.data:00000648 $SG86570:                               ; DATA XREF: _term_size+3C4o
.data:00000648                 unicode 0, <..\..\..\terminal.c>,0
.data:00000670 ; wchar_t _SG86573
.data:00000670 $SG86573:                               ; DATA XREF: _term_size+3EFo
.data:00000670                 unicode 0, <..\..\..\terminal.c>,0
.data:00000698 ; wchar_t _SG86859
.data:00000698 $SG86859:                               ; DATA XREF: _insch+210o
.data:00000698                 unicode 0, <term->
.data:00000698                 dw 3Eh
.data:00000698                 unicode 0, <selstart.x >
.data:00000698                 dw 3Ch
.data:00000698                 unicode 0, < term->
.data:00000698                 dw 3Eh
.data:00000698                 unicode 0, <cols>,0
.data:000006D4 ; wchar_t _SG86574
.data:000006D4 $SG86574:                               ; DATA XREF: _term_size+3F4o
.data:000006D4                 unicode 0, <count234(term->
.data:000006D4                 dw 3Eh
.data:000006D4                 unicode 0, <screen) == newrows>,0
.data:00000718 ; wchar_t _SG86580
.data:00000718 $SG86580:                               ; DATA XREF: _term_size+461o
.data:00000718                 unicode 0, <..\..\..\terminal.c>,0
.data:00000740 ; wchar_t _SG86862
.data:00000740 $SG86862:                               ; DATA XREF: _insch+238o
.data:00000740                 unicode 0, <term->
.data:00000740                 dw 3Eh
.data:00000740                 unicode 0, <selend.x >
.data:00000740                 dw 3Eh
.data:00000740                 unicode 0, < term->
.data:00000740                 dw 3Eh
.data:00000740                 unicode 0, <curs.x>,0
.data:0000077C ; wchar_t _SG86581
.data:0000077C $SG86581:                               ; DATA XREF: _term_size+466o
.data:0000077C                 unicode 0, <count234(term->
.data:0000077C                 dw 3Eh
.data:0000077C                 unicode 0, <scrollback) >
.data:0000077C                 dw 3Ch
.data:0000077C                 unicode 0, <= newsavelines>,0
.data:000007D2                 align 4
.data:000007D4 ; wchar_t _SG86583
.data:000007D4 $SG86583:                               ; DATA XREF: _term_size+48Fo
.data:000007D4                 unicode 0, <..\..\..\terminal.c>,0
.data:000007FC ; wchar_t _SG86584
.data:000007FC $SG86584:                               ; DATA XREF: _term_size+494o
.data:000007FC                 unicode 0, <count234(term->
.data:000007FC                 dw 3Eh
.data:000007FC                 unicode 0, <scrollback) >
.data:000007FC                 dw 3Eh
.data:000007FC                 unicode 0, <= term->
.data:000007FC                 dw 3Eh
.data:000007FC                 unicode 0, <tempsblines>,0
.data:0000085C ; wchar_t _SG86855
.data:0000085C $SG86855:                               ; DATA XREF: _insch+1E0o
.data:0000085C                 unicode 0, <..\..\..\terminal.c>,0
.data:00000884 ; wchar_t _SG86856
.data:00000884 $SG86856:                               ; DATA XREF: _insch+1E5o
.data:00000884                 unicode 0, <term->
.data:00000884                 dw 3Eh
.data:00000884                 unicode 0, <selstart.x >
.data:00000884                 dw 3Eh
.data:00000884                 unicode 0, <= term->
.data:00000884                 dw 3Eh
.data:00000884                 unicode 0, <curs.x>,0
.data:000008C6                 align 4
.data:000008C8 ; wchar_t _SG86858
.data:000008C8 $SG86858:                               ; DATA XREF: _insch+20Bo
.data:000008C8                 unicode 0, <..\..\..\terminal.c>,0
.data:000008F0 ; wchar_t _SG86861
.data:000008F0 $SG86861:                               ; DATA XREF: _insch+233o
.data:000008F0                 unicode 0, <..\..\..\terminal.c>,0
.data:00000918 ; wchar_t _SG86864
.data:00000918 $SG86864:                               ; DATA XREF: _insch+25Eo
.data:00000918                 unicode 0, <..\..\..\terminal.c>,0
.data:00000940 ; wchar_t _SG86865
.data:00000940 $SG86865:                               ; DATA XREF: _insch+263o
.data:00000940                 unicode 0, <term->
.data:00000940                 dw 3Eh
.data:00000940                 unicode 0, <selend.x >
.data:00000940                 dw 3Ch
.data:00000940                 unicode 0, <= term->
.data:00000940                 dw 3Eh
.data:00000940                 unicode 0, <cols>,0
.data:0000097A                 align 4
.data:0000097C ; wchar_t _SG87020
.data:0000097C $SG87020:                               ; DATA XREF: _term_out+FFo
.data:0000097C                 unicode 0, <..\..\..\terminal.c>,0
.data:000009A4 ; wchar_t _SG87021
.data:000009A4 $SG87021:                               ; DATA XREF: _term_out+104o
.data:000009A4                 unicode 0, <chars != NULL>,0
.data:000009C0 ; wchar_t _SG87221
.data:000009C0 $SG87221:                               ; DATA XREF: _term_out+14A6o
.data:000009C0                 unicode 0, <..\..\..\terminal.c>,0
.data:000009E8 ; wchar_t _SG87222
.data:000009E8 $SG87222:                               ; DATA XREF: _term_out+14ABo
.data:000009E8                 unicode 0, <x >
.data:000009E8                 dw 3Eh
.data:000009E8                 unicode 0, < 0>,0
.data:000009F4 $SG87358        db 1Bh,'[>0;136;0c',0   ; DATA XREF: _term_out+23F3o
.data:00000A00 ; char _SG87399[]
.data:00000A00 $SG87399        db 1Bh,'[%d;%dR',0      ; DATA XREF: _term_out+2B80o
.data:00000A09                 align 4
.data:00000A0C $SG87402        db 1Bh,'[0n',0          ; DATA XREF: _term_out+2BD1o
.data:00000A0C                                         ; .data:$SG88554o ...
.data:00000A11                 align 4
.data:00000A14 $SG87522        db 1Bh,'[2t',0          ; DATA XREF: _term_out+3887o
.data:00000A19                 align 4
.data:00000A1C $SG87523        db 1Bh,'[1t',0          ; DATA XREF: _term_out:loc_CDDFo
.data:00000A21                 align 4
.data:00000A24 ; char _SG87526[]
.data:00000A24 $SG87526        db 1Bh,'[3;%d;%dt',0    ; DATA XREF: _term_out+38F9o
.data:00000A2F                 align 10h
.data:00000A30 ; char _SG87529[]
.data:00000A30 $SG87529        db 1Bh,'[4;%d;%dt',0    ; DATA XREF: _term_out+3974o
.data:00000A3B                 align 4
.data:00000A3C ; char _SG87532[]
.data:00000A3C $SG87532        db 1Bh,'[8;%d;%dt',0    ; DATA XREF: _term_out+39D5o
.data:00000A47                 align 4
.data:00000A48 $SG87538        db 1Bh,']L',0           ; DATA XREF: _term_out+3A88o
.data:00000A4C $SG87539        dd offset loc_5C1B      ; DATA XREF: _term_out+3AC5o
.data:00000A50 $SG87544        db  1Bh                 ; DATA XREF: _term_out+3B4Eo
.data:00000A51                 db  5Dh ; ]
.data:00000A52                 db  6Ch ; l
.data:00000A53                 db    0
.data:00000A54 $SG87545        dd offset loc_5C1B      ; DATA XREF: _term_out+3B8Bo
.data:00000A58 ; char _SG87575[]
.data:00000A58 $SG87575        db 1Bh,'[2;1;1;112;112;1;0x',0
.data:00000A58                                         ; DATA XREF: _term_out:loc_D54Bo
.data:00000A6D                 align 10h
.data:00000A70 ; char _SG87634[]
.data:00000A70 $SG87634        db 1Bh,'[?',0           ; DATA XREF: _term_out+456Ao
.data:00000A74 ; char _SG87639[]
.data:00000A74 $SG87639        dd offset $SG85861+0Bh  ; DATA XREF: _term_out+45B6o
.data:00000A74                                         ; " 　 ☀☀ 挀漀氀 㰀 氀"...
.data:00000A78 ; char _SG87640[]
.data:00000A78 $SG87640        dd offset loc_6423+2    ; DATA XREF: _term_out+45DEo
.data:00000A7C ; char _SG87641[]
.data:00000A7C $SG87641        dd offset $SG85861+33h  ; DATA XREF: _term_out:loc_DB59o
.data:00000A7C                                         ; "氀猀"
.data:00000A80 $SG87710        db  1Bh                 ; DATA XREF: _term_out+4B74o
.data:00000A81                 db  2Fh ; /
.data:00000A82                 db  5Ah ; Z
.data:00000A83                 db    0
.data:00000A84 ; wchar_t _SG87813
.data:00000A84 $SG87813:                               ; DATA XREF: _term_bidi_cache_store+36Co
.data:00000A84                 unicode 0, <..\..\..\terminal.c>,0
.data:00000AAC ; wchar_t _SG87814
.data:00000AAC $SG87814:                               ; DATA XREF: _term_bidi_cache_store+371o
.data:00000AAC                 unicode 0, <0 >
.data:00000AAC                 dw 3Ch
.data:00000AAC                 unicode 0, <= p && p >
.data:00000AAC                 dw 3Ch
.data:00000AAC                 unicode 0, < width>,0
.data:00000AD4 ; wchar_t _SG88038
.data:00000AD4 $SG88038:                               ; DATA XREF: _do_paint+F75o
.data:00000AD4                 unicode 0, <..\..\..\terminal.c>,0
.data:00000AFC ; wchar_t _SG88039
.data:00000AFC $SG88039:                               ; DATA XREF: _do_paint+F7Ao
.data:00000AFC                 unicode 0, <!(i == our_curs_y && j == our_curs_x)>,0
.data:00000B48 $SG88354:                               ; DATA XREF: _term_do_paste+C1o
.data:00000B48                 dw 1Bh
.data:00000B48                 unicode 0, <[200~>,0
.data:00000B56                 align 4
.data:00000B58 $SG88372:                               ; DATA XREF: _term_do_paste+218o
.data:00000B58                 dw 1Bh
.data:00000B58                 unicode 0, <[201~>,0
.data:00000B66                 align 4
.data:00000B68 ; char _SG88447[]
.data:00000B68 $SG88447        db 1Bh,'[<%d;%d;%d%c',0 ; DATA XREF: _term_mouse+33Bo
.data:00000B76                 align 4
.data:00000B78 ; char _SG88450[]
.data:00000B78 $SG88450        db 1Bh,'[%d;%d;%dM',0   ; DATA XREF: _term_mouse+36Co
.data:00000B84 ; char _SG88453[]
.data:00000B84 $SG88453        db 1Bh,'[M%c%c%c',0     ; DATA XREF: _term_mouse+3A9o
.data:00000B8E                 align 10h
.data:00000B90 ; char _SG88502[]
.data:00000B90 $SG88502        db 1Bh,'%c',0           ; DATA XREF: _format_arrow_key+31o
.data:00000B94 ; char _SG88508[]
.data:00000B94 $SG88508        db 1Bh,'O%c',0          ; DATA XREF: _format_arrow_key+94o
.data:00000B99                 align 4
.data:00000B9C ; char _SG88511[]
.data:00000B9C $SG88511        db 1Bh,'[%c',0          ; DATA XREF: _format_arrow_key+B1o
.data:00000BA1                 align 4
.data:00000BA4 $SG88554        dd offset $SG87402+1    ; DATA XREF: _term_data_untrusted+35o
.data:00000BA4                                         ; "[0n"
.data:00000BA8 ; char _SG88575[]
.data:00000BA8 $SG88575        db 'ERASE',0            ; DATA XREF: _term_get_ttymode+1Bo
.data:00000BAE                 align 10h
.data:00000BB0 $SG88576        dd offset loc_3F5D+1    ; DATA XREF: _term_get_ttymode+3Co
.data:00000BB4 $SG88577        dd offset loc_485D+1    ; DATA XREF: _term_get_ttymode:loc_106F1o
.data:00000BB8 $SG88599        db  0Ah                 ; DATA XREF: _term_get_userpass_input+A4o
.data:00000BB9                 db    0
.data:00000BBA                 db    0
.data:00000BBB                 db    0
.data:00000BBC $SG88603        db  0Ah                 ; DATA XREF: _term_get_userpass_input+FCo
.data:00000BBD                 db    0
.data:00000BBE                 db    0
.data:00000BBF                 db    0
.data:00000BC0 $SG88627        dd offset $SG87402+1    ; DATA XREF: _term_get_userpass_input+219o
.data:00000BC0                                         ; "[0n"
.data:00000BC4 $SG88631        db    8                 ; DATA XREF: _term_get_userpass_input+289o
.data:00000BC5                 db  20h
.data:00000BC6                 db    8
.data:00000BC7                 db    0
.data:00000BC8 $SG88637        db    8                 ; DATA XREF: _term_get_userpass_input+2C4o
.data:00000BC9                 db  20h
.data:00000BCA                 db    8
.data:00000BCB                 db    0
.data:00000BCC $SG88639        db  0Dh                 ; DATA XREF: _term_get_userpass_input+2EFo
.data:00000BCD                 db  0Ah
.data:00000BCE                 db    0
.data:00000BCF                 align 10h
.data:00000BCF _data           ends
.data:00000BCF
.rdata:00000BD0 ; ===========================================================================
.rdata:00000BD0
.rdata:00000BD0 ; Segment type: Pure data
.rdata:00000BD0 ; Segment permissions: Read
.rdata:00000BD0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000BD0 _rdata          segment para public 'DATA' use32
.rdata:00000BD0                 assume cs:_rdata
.rdata:00000BD0                 ;org 0BD0h
.rdata:00000BD0                 public _sco2ansicolour
.rdata:00000BD0 _sco2ansicolour db 0                    ; DATA XREF: _term_out+431Er
.rdata:00000BD0                                         ; _term_out+43D7r
.rdata:00000BD1                 db    4
.rdata:00000BD2                 db    2
.rdata:00000BD3                 db    6
.rdata:00000BD4                 db    1
.rdata:00000BD5                 db    5
.rdata:00000BD6                 db    3
.rdata:00000BD7                 db    7
.rdata:00000BD8                 public _sel_nl
.rdata:00000BD8 _sel_nl         dw 0Dh                  ; DATA XREF: _clipme+5C9r
.rdata:00000BD8                                         ; _term_do_paste+12Ao ...
.rdata:00000BDA                 db  0Ah
.rdata:00000BDB                 db    0
.rdata:00000BDC                 db    0
.rdata:00000BDD                 db    0
.rdata:00000BDE                 db    0
.rdata:00000BDF                 db    0
.rdata:00000BE0 ; `wordtype'::`2'::ucs_words
.rdata:00000BE0 ?ucs_words@?1??wordtype@@9@9 dd offset $SG85886+14h
.rdata:00000BE0                                         ; DATA XREF: _wordtype:loc_102DFo
.rdata:00000BE0                                         ; "erminal.c"
.rdata:00000BE4                 dd offset $SG85887+0Ch  ; " 0 && col < line->cols"
.rdata:00000BE8                 db    0
.rdata:00000BE9                 db    0
.rdata:00000BEA                 db    0
.rdata:00000BEB                 db    0
.rdata:00000BEC                 db 0A1h ; í
.rdata:00000BED                 db    0
.rdata:00000BEE                 db    0
.rdata:00000BEF                 db    0
.rdata:00000BF0                 db 0BFh ; +
.rdata:00000BF1                 db    0
.rdata:00000BF2                 db    0
.rdata:00000BF3                 db    0
.rdata:00000BF4                 db    1
.rdata:00000BF5                 db    0
.rdata:00000BF6                 db    0
.rdata:00000BF7                 db    0
.rdata:00000BF8                 db 0D7h ; +
.rdata:00000BF9                 db    0
.rdata:00000BFA                 db    0
.rdata:00000BFB                 db    0
.rdata:00000BFC                 db 0D7h ; +
.rdata:00000BFD                 db    0
.rdata:00000BFE                 db    0
.rdata:00000BFF                 db    0
.rdata:00000C00                 db    1
.rdata:00000C01                 db    0
.rdata:00000C02                 db    0
.rdata:00000C03                 db    0
.rdata:00000C04                 db 0F7h ; ˜
.rdata:00000C05                 db    0
.rdata:00000C06                 db    0
.rdata:00000C07                 db    0
.rdata:00000C08                 db 0F7h ; ˜
.rdata:00000C09                 db    0
.rdata:00000C0A                 db    0
.rdata:00000C0B                 db    0
.rdata:00000C0C                 db    1
.rdata:00000C0D                 db    0
.rdata:00000C0E                 db    0
.rdata:00000C0F                 db    0
.rdata:00000C10                 db  7Eh ; ~
.rdata:00000C11                 db    3
.rdata:00000C12                 db    0
.rdata:00000C13                 db    0
.rdata:00000C14                 db  7Eh ; ~
.rdata:00000C15                 db    3
.rdata:00000C16                 db    0
.rdata:00000C17                 db    0
.rdata:00000C18                 db    1
.rdata:00000C19                 db    0
.rdata:00000C1A                 db    0
.rdata:00000C1B                 db    0
.rdata:00000C1C                 db  87h ; ç
.rdata:00000C1D                 db    3
.rdata:00000C1E                 db    0
.rdata:00000C1F                 db    0
.rdata:00000C20                 db  87h ; ç
.rdata:00000C21                 db    3
.rdata:00000C22                 db    0
.rdata:00000C23                 db    0
.rdata:00000C24                 db    1
.rdata:00000C25                 db    0
.rdata:00000C26                 db    0
.rdata:00000C27                 db    0
.rdata:00000C28                 db  5Ah ; Z
.rdata:00000C29                 db    5
.rdata:00000C2A                 db    0
.rdata:00000C2B                 db    0
.rdata:00000C2C                 db  5Fh ; _
.rdata:00000C2D                 db    5
.rdata:00000C2E                 db    0
.rdata:00000C2F                 db    0
.rdata:00000C30                 db    1
.rdata:00000C31                 db    0
.rdata:00000C32                 db    0
.rdata:00000C33                 db    0
.rdata:00000C34                 db  89h ; ë
.rdata:00000C35                 db    5
.rdata:00000C36                 db    0
.rdata:00000C37                 db    0
.rdata:00000C38                 db  89h ; ë
.rdata:00000C39                 db    5
.rdata:00000C3A                 db    0
.rdata:00000C3B                 db    0
.rdata:00000C3C                 db    1
.rdata:00000C3D                 db    0
.rdata:00000C3E                 db    0
.rdata:00000C3F                 db    0
.rdata:00000C40                 db    0
.rdata:00000C41                 db    7
.rdata:00000C42                 db    0
.rdata:00000C43                 db    0
.rdata:00000C44                 db  0Dh
.rdata:00000C45                 db    7
.rdata:00000C46                 db    0
.rdata:00000C47                 db    0
.rdata:00000C48                 db    1
.rdata:00000C49                 db    0
.rdata:00000C4A                 db    0
.rdata:00000C4B                 db    0
.rdata:00000C4C                 db  4Ah ; J
.rdata:00000C4D                 db  10h
.rdata:00000C4E                 db    0
.rdata:00000C4F                 db    0
.rdata:00000C50                 db  4Fh ; O
.rdata:00000C51                 db  10h
.rdata:00000C52                 db    0
.rdata:00000C53                 db    0
.rdata:00000C54                 db    1
.rdata:00000C55                 db    0
.rdata:00000C56                 db    0
.rdata:00000C57                 db    0
.rdata:00000C58                 db 0FBh ; v
.rdata:00000C59                 db  10h
.rdata:00000C5A                 db    0
.rdata:00000C5B                 db    0
.rdata:00000C5C                 db 0FBh ; v
.rdata:00000C5D                 db  10h
.rdata:00000C5E                 db    0
.rdata:00000C5F                 db    0
.rdata:00000C60                 db    1
.rdata:00000C61                 db    0
.rdata:00000C62                 db    0
.rdata:00000C63                 db    0
.rdata:00000C64                 db  61h ; a
.rdata:00000C65                 db  13h
.rdata:00000C66                 db    0
.rdata:00000C67                 db    0
.rdata:00000C68                 db  68h ; h
.rdata:00000C69                 db  13h
.rdata:00000C6A                 db    0
.rdata:00000C6B                 db    0
.rdata:00000C6C                 db    1
.rdata:00000C6D                 db    0
.rdata:00000C6E                 db    0
.rdata:00000C6F                 db    0
.rdata:00000C70                 db  6Dh ; m
.rdata:00000C71                 db  16h
.rdata:00000C72                 db    0
.rdata:00000C73                 db    0
.rdata:00000C74                 db  6Eh ; n
.rdata:00000C75                 db  16h
.rdata:00000C76                 db    0
.rdata:00000C77                 db    0
.rdata:00000C78                 db    1
.rdata:00000C79                 db    0
.rdata:00000C7A                 db    0
.rdata:00000C7B                 db    0
.rdata:00000C7C                 db 0D4h ; +
.rdata:00000C7D                 db  17h
.rdata:00000C7E                 db    0
.rdata:00000C7F                 db    0
.rdata:00000C80                 db 0DCh ; _
.rdata:00000C81                 db  17h
.rdata:00000C82                 db    0
.rdata:00000C83                 db    0
.rdata:00000C84                 db    1
.rdata:00000C85                 db    0
.rdata:00000C86                 db    0
.rdata:00000C87                 db    0
.rdata:00000C88                 db    0
.rdata:00000C89                 db  18h
.rdata:00000C8A                 db    0
.rdata:00000C8B                 db    0
.rdata:00000C8C                 db  0Ah
.rdata:00000C8D                 db  18h
.rdata:00000C8E                 db    0
.rdata:00000C8F                 db    0
.rdata:00000C90                 db    1
.rdata:00000C91                 db    0
.rdata:00000C92                 db    0
.rdata:00000C93                 db    0
.rdata:00000C94                 db    0
.rdata:00000C95                 db  20h
.rdata:00000C96                 db    0
.rdata:00000C97                 db    0
.rdata:00000C98                 db  0Ah
.rdata:00000C99                 db  20h
.rdata:00000C9A                 db    0
.rdata:00000C9B                 db    0
.rdata:00000C9C                 db    0
.rdata:00000C9D                 db    0
.rdata:00000C9E                 db    0
.rdata:00000C9F                 db    0
.rdata:00000CA0                 db  70h ; p
.rdata:00000CA1                 db  20h
.rdata:00000CA2                 db    0
.rdata:00000CA3                 db    0
.rdata:00000CA4                 db  7Fh ; 
.rdata:00000CA5                 db  20h
.rdata:00000CA6                 db    0
.rdata:00000CA7                 db    0
.rdata:00000CA8                 db    2
.rdata:00000CA9                 db    0
.rdata:00000CAA                 db    0
.rdata:00000CAB                 db    0
.rdata:00000CAC                 db  80h ; Ç
.rdata:00000CAD                 db  20h
.rdata:00000CAE                 db    0
.rdata:00000CAF                 db    0
.rdata:00000CB0                 db  8Fh ; Å
.rdata:00000CB1                 db  20h
.rdata:00000CB2                 db    0
.rdata:00000CB3                 db    0
.rdata:00000CB4                 db    2
.rdata:00000CB5                 db    0
.rdata:00000CB6                 db    0
.rdata:00000CB7                 db    0
.rdata:00000CB8                 db  0Bh
.rdata:00000CB9                 db  20h
.rdata:00000CBA                 db    0
.rdata:00000CBB                 db    0
.rdata:00000CBC                 db 0FFh
.rdata:00000CBD                 db  27h ; '
.rdata:00000CBE                 db    0
.rdata:00000CBF                 db    0
.rdata:00000CC0                 db    1
.rdata:00000CC1                 db    0
.rdata:00000CC2                 db    0
.rdata:00000CC3                 db    0
.rdata:00000CC4                 db    0
.rdata:00000CC5                 db  30h ; 0
.rdata:00000CC6                 db    0
.rdata:00000CC7                 db    0
.rdata:00000CC8                 db    0
.rdata:00000CC9                 db  30h ; 0
.rdata:00000CCA                 db    0
.rdata:00000CCB                 db    0
.rdata:00000CCC                 db    0
.rdata:00000CCD                 db    0
.rdata:00000CCE                 db    0
.rdata:00000CCF                 db    0
.rdata:00000CD0                 db    1
.rdata:00000CD1                 db  30h ; 0
.rdata:00000CD2                 db    0
.rdata:00000CD3                 db    0
.rdata:00000CD4                 db  20h
.rdata:00000CD5                 db  30h ; 0
.rdata:00000CD6                 db    0
.rdata:00000CD7                 db    0
.rdata:00000CD8                 db    1
.rdata:00000CD9                 db    0
.rdata:00000CDA                 db    0
.rdata:00000CDB                 db    0
.rdata:00000CDC                 db  3Fh ; ?
.rdata:00000CDD                 db  30h ; 0
.rdata:00000CDE                 db    0
.rdata:00000CDF                 db    0
.rdata:00000CE0                 db  9Fh ; ƒ
.rdata:00000CE1                 db  30h ; 0
.rdata:00000CE2                 db    0
.rdata:00000CE3                 db    0
.rdata:00000CE4                 db    3
.rdata:00000CE5                 db    0
.rdata:00000CE6                 db    0
.rdata:00000CE7                 db    0
.rdata:00000CE8                 db 0A0h ; á
.rdata:00000CE9                 db  30h ; 0
.rdata:00000CEA                 db    0
.rdata:00000CEB                 db    0
.rdata:00000CEC                 db 0FFh
.rdata:00000CED                 db  30h ; 0
.rdata:00000CEE                 db    0
.rdata:00000CEF                 db    0
.rdata:00000CF0                 db    3
.rdata:00000CF1                 db    0
.rdata:00000CF2                 db    0
.rdata:00000CF3                 db    0
.rdata:00000CF4                 db    0
.rdata:00000CF5                 db  33h ; 3
.rdata:00000CF6                 db    0
.rdata:00000CF7                 db    0
.rdata:00000CF8                 db 0FFh
.rdata:00000CF9                 db  9Fh ; ƒ
.rdata:00000CFA                 db    0
.rdata:00000CFB                 db    0
.rdata:00000CFC                 db    3
.rdata:00000CFD                 db    0
.rdata:00000CFE                 db    0
.rdata:00000CFF                 db    0
.rdata:00000D00                 db    0
.rdata:00000D01                 db 0ACh ; ¼
.rdata:00000D02                 db    0
.rdata:00000D03                 db    0
.rdata:00000D04                 db 0A3h ; ú
.rdata:00000D05                 db 0D7h ; +
.rdata:00000D06                 db    0
.rdata:00000D07                 db    0
.rdata:00000D08                 db    3
.rdata:00000D09                 db    0
.rdata:00000D0A                 db    0
.rdata:00000D0B                 db    0
.rdata:00000D0C                 db    0
.rdata:00000D0D                 db 0F9h ; ·
.rdata:00000D0E                 db    0
.rdata:00000D0F                 db    0
.rdata:00000D10                 db 0FFh
.rdata:00000D11                 db 0FAh ; ·
.rdata:00000D12                 db    0
.rdata:00000D13                 db    0
.rdata:00000D14                 db    3
.rdata:00000D15                 db    0
.rdata:00000D16                 db    0
.rdata:00000D17                 db    0
.rdata:00000D18                 db  30h ; 0
.rdata:00000D19                 db 0FEh ; ¦
.rdata:00000D1A                 db    0
.rdata:00000D1B                 db    0
.rdata:00000D1C                 db  6Bh ; k
.rdata:00000D1D                 db 0FEh ; ¦
.rdata:00000D1E                 db    0
.rdata:00000D1F                 db    0
.rdata:00000D20                 db    1
.rdata:00000D21                 db    0
.rdata:00000D22                 db    0
.rdata:00000D23                 db    0
.rdata:00000D24                 db    0
.rdata:00000D25                 db 0FFh
.rdata:00000D26                 db    0
.rdata:00000D27                 db    0
.rdata:00000D28                 db  0Fh
.rdata:00000D29                 db 0FFh
.rdata:00000D2A                 db    0
.rdata:00000D2B                 db    0
.rdata:00000D2C                 db    1
.rdata:00000D2D                 db    0
.rdata:00000D2E                 db    0
.rdata:00000D2F                 db    0
.rdata:00000D30                 db  1Ah
.rdata:00000D31                 db 0FFh
.rdata:00000D32                 db    0
.rdata:00000D33                 db    0
.rdata:00000D34                 db  20h
.rdata:00000D35                 db 0FFh
.rdata:00000D36                 db    0
.rdata:00000D37                 db    0
.rdata:00000D38                 db    1
.rdata:00000D39                 db    0
.rdata:00000D3A                 db    0
.rdata:00000D3B                 db    0
.rdata:00000D3C                 db  3Bh ; ;
.rdata:00000D3D                 db 0FFh
.rdata:00000D3E                 db    0
.rdata:00000D3F                 db    0
.rdata:00000D40                 db  40h ; @
.rdata:00000D41                 db 0FFh
.rdata:00000D42                 db    0
.rdata:00000D43                 db    0
.rdata:00000D44                 db    1
.rdata:00000D45                 db    0
.rdata:00000D46                 db    0
.rdata:00000D47                 db    0
.rdata:00000D48                 db  5Bh ; [
.rdata:00000D49                 db 0FFh
.rdata:00000D4A                 db    0
.rdata:00000D4B                 db    0
.rdata:00000D4C                 db  64h ; d
.rdata:00000D4D                 db 0FFh
.rdata:00000D4E                 db    0
.rdata:00000D4F                 db    0
.rdata:00000D50                 db    1
.rdata:00000D51                 db    0
.rdata:00000D52                 db    0
.rdata:00000D53                 db    0
.rdata:00000D54                 db 0F0h ; =
.rdata:00000D55                 db 0FFh
.rdata:00000D56                 db    0
.rdata:00000D57                 db    0
.rdata:00000D58                 db 0FFh
.rdata:00000D59                 db 0FFh
.rdata:00000D5A                 db    0
.rdata:00000D5B                 db    0
.rdata:00000D5C                 db    0
.rdata:00000D5D                 db    0
.rdata:00000D5E                 db    0
.rdata:00000D5F                 db    0
.rdata:00000D60                 db    0
.rdata:00000D61                 db    0
.rdata:00000D62                 db    0
.rdata:00000D63                 db    0
.rdata:00000D64                 db    0
.rdata:00000D65                 db    0
.rdata:00000D66                 db    0
.rdata:00000D67                 db    0
.rdata:00000D68                 db    0
.rdata:00000D69                 db    0
.rdata:00000D6A                 db    0
.rdata:00000D6B                 db    0
.rdata:00000D6B _rdata          ends
.rdata:00000D6B
.text:00000D6C ; ===========================================================================
.text:00000D6C
.text:00000D6C ; Segment type: Pure code
.text:00000D6C ; Segment permissions: Read/Execute
.text:00000D6C _text           segment para public 'CODE' use32
.text:00000D6C                 assume cs:_text
.text:00000D6C                 ;org 0D6Ch
.text:00000D6C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000D6C
.text:00000D6C ; =============== S U B R O U T I N E =======================================
.text:00000D6C
.text:00000D6C ; Attributes: bp-based frame
.text:00000D6C
.text:00000D6C                 public _term_update
.text:00000D6C _term_update    proc near               ; CODE XREF: _term_timer+117p
.text:00000D6C                                         ; _term_pwron+51p ...
.text:00000D6C
.text:00000D6C var_8           = dword ptr -8
.text:00000D6C var_4           = dword ptr -4
.text:00000D6C arg_0           = dword ptr  8
.text:00000D6C
.text:00000D6C                 push    ebp
.text:00000D6D                 mov     ebp, esp
.text:00000D6F                 sub     esp, 8
.text:00000D72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D80                 mov     eax, [ebp+arg_0]
.text:00000D83                 mov     dword ptr [eax+109Ch], 0
.text:00000D8D                 mov     ecx, [ebp+arg_0]
.text:00000D90                 mov     edx, [ecx+1088h]
.text:00000D96                 push    edx
.text:00000D97                 call    _get_ctx
.text:00000D9C                 add     esp, 4
.text:00000D9F                 mov     [ebp+var_4], eax
.text:00000DA2                 cmp     [ebp+var_4], 0
.text:00000DA6                 jz      loc_E44
.text:00000DAC                 mov     eax, [ebp+arg_0]
.text:00000DAF                 mov     ecx, [eax+154h]
.text:00000DB5                 mov     [ebp+var_8], ecx
.text:00000DB8                 mov     edx, [ebp+arg_0]
.text:00000DBB                 cmp     dword ptr [edx+154h], 0
.text:00000DC2                 jz      short loc_DEE
.text:00000DC4                 mov     eax, [ebp+arg_0]
.text:00000DC7                 cmp     dword ptr [eax+1164h], 0
.text:00000DCE                 jz      short loc_DEE
.text:00000DD0                 mov     ecx, [ebp+arg_0]
.text:00000DD3                 mov     dword ptr [ecx+10h], 0
.text:00000DDA                 mov     edx, [ebp+arg_0]
.text:00000DDD                 mov     dword ptr [edx+154h], 0
.text:00000DE7                 mov     [ebp+var_8], 1
.text:00000DEE
.text:00000DEE loc_DEE:                                ; CODE XREF: _term_update+56j
.text:00000DEE                                         ; _term_update+62j
.text:00000DEE                 cmp     [ebp+var_8], 0
.text:00000DF2                 jz      short loc_E00
.text:00000DF4                 mov     eax, [ebp+arg_0]
.text:00000DF7                 push    eax
.text:00000DF8                 call    _update_sbar
.text:00000DFD                 add     esp, 4
.text:00000E00
.text:00000E00 loc_E00:                                ; CODE XREF: _term_update+86j
.text:00000E00                 push    1
.text:00000E02                 mov     ecx, [ebp+var_4]
.text:00000E05                 push    ecx
.text:00000E06                 mov     edx, [ebp+arg_0]
.text:00000E09                 push    edx
.text:00000E0A                 call    _do_paint
.text:00000E0F                 add     esp, 0Ch
.text:00000E12                 mov     eax, [ebp+arg_0]
.text:00000E15                 mov     ecx, [ebp+arg_0]
.text:00000E18                 mov     edx, [eax+6Ch]
.text:00000E1B                 sub     edx, [ecx+10h]
.text:00000E1E                 push    edx
.text:00000E1F                 mov     eax, [ebp+arg_0]
.text:00000E22                 mov     ecx, [eax+70h]
.text:00000E25                 push    ecx
.text:00000E26                 mov     edx, [ebp+arg_0]
.text:00000E29                 mov     eax, [edx+1088h]
.text:00000E2F                 push    eax
.text:00000E30                 call    _sys_cursor
.text:00000E35                 add     esp, 0Ch
.text:00000E38                 mov     ecx, [ebp+var_4]
.text:00000E3B                 push    ecx
.text:00000E3C                 call    _free_ctx
.text:00000E41                 add     esp, 4
.text:00000E44
.text:00000E44 loc_E44:                                ; CODE XREF: _term_update+3Aj
.text:00000E44                 add     esp, 8
.text:00000E47                 cmp     ebp, esp
.text:00000E49                 call    __RTC_CheckEsp
.text:00000E4E                 mov     esp, ebp
.text:00000E50                 pop     ebp
.text:00000E51                 retn
.text:00000E51 _term_update    endp
.text:00000E51
.text:00000E51 ; ---------------------------------------------------------------------------
.text:00000E52                 db 0Ah dup(0CCh)
.text:00000E5C
.text:00000E5C ; =============== S U B R O U T I N E =======================================
.text:00000E5C
.text:00000E5C ; Attributes: bp-based frame
.text:00000E5C
.text:00000E5C                 public _term_seen_key_event
.text:00000E5C _term_seen_key_event proc near          ; CODE XREF: _term_do_paste+59p
.text:00000E5C
.text:00000E5C var_4           = dword ptr -4
.text:00000E5C arg_0           = dword ptr  8
.text:00000E5C
.text:00000E5C                 push    ebp
.text:00000E5D                 mov     ebp, esp
.text:00000E5F                 push    ecx
.text:00000E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E67                 mov     eax, [ebp+arg_0]
.text:00000E6A                 mov     dword ptr [eax+34h], 0
.text:00000E71
.text:00000E71 loc_E71:                                ; CODE XREF: _term_seen_key_event+3Ej
.text:00000E71                 mov     ecx, [ebp+arg_0]
.text:00000E74                 cmp     dword ptr [ecx+28h], 0
.text:00000E78                 jz      short loc_E9C
.text:00000E7A                 mov     edx, [ebp+arg_0]
.text:00000E7D                 mov     eax, [edx+28h]
.text:00000E80                 mov     [ebp+var_4], eax
.text:00000E83                 mov     ecx, [ebp+arg_0]
.text:00000E86                 mov     edx, [ebp+var_4]
.text:00000E89                 mov     eax, [edx]
.text:00000E8B                 mov     [ecx+28h], eax
.text:00000E8E                 mov     ecx, [ebp+var_4]
.text:00000E91                 push    ecx
.text:00000E92                 call    _safefree
.text:00000E97                 add     esp, 4
.text:00000E9A                 jmp     short loc_E71
.text:00000E9C ; ---------------------------------------------------------------------------
.text:00000E9C
.text:00000E9C loc_E9C:                                ; CODE XREF: _term_seen_key_event+1Cj
.text:00000E9C                 mov     edx, [ebp+arg_0]
.text:00000E9F                 mov     dword ptr [edx+2Ch], 0
.text:00000EA6                 mov     eax, [ebp+arg_0]
.text:00000EA9                 mov     dword ptr [eax+30h], 0
.text:00000EB0                 mov     ecx, [ebp+arg_0]
.text:00000EB3                 cmp     dword ptr [ecx+1168h], 0
.text:00000EBA                 jz      short loc_ED2
.text:00000EBC                 mov     edx, [ebp+arg_0]
.text:00000EBF                 mov     dword ptr [edx+10h], 0
.text:00000EC6                 mov     eax, [ebp+arg_0]
.text:00000EC9                 push    eax
.text:00000ECA                 call    _seen_disp_event
.text:00000ECF                 add     esp, 4
.text:00000ED2
.text:00000ED2 loc_ED2:                                ; CODE XREF: _term_seen_key_event+5Ej
.text:00000ED2                 add     esp, 4
.text:00000ED5                 cmp     ebp, esp
.text:00000ED7                 call    __RTC_CheckEsp
.text:00000EDC                 mov     esp, ebp
.text:00000EDE                 pop     ebp
.text:00000EDF                 retn
.text:00000EDF _term_seen_key_event endp
.text:00000EDF
.text:00000EDF ; ---------------------------------------------------------------------------
.text:00000EE0                 db 0Ch dup(0CCh)
.text:00000EEC
.text:00000EEC ; =============== S U B R O U T I N E =======================================
.text:00000EEC
.text:00000EEC ; Attributes: bp-based frame
.text:00000EEC
.text:00000EEC _seen_disp_event proc near              ; CODE XREF: _term_seen_key_event+6Ep
.text:00000EEC                                         ; _term_out+AF1p ...
.text:00000EEC
.text:00000EEC arg_0           = dword ptr  8
.text:00000EEC
.text:00000EEC                 push    ebp
.text:00000EED                 mov     ebp, esp
.text:00000EEF                 mov     eax, [ebp+arg_0]
.text:00000EF2                 mov     dword ptr [eax+154h], 1
.text:00000EFC                 mov     ecx, [ebp+arg_0]
.text:00000EFF                 push    ecx
.text:00000F00                 call    _term_schedule_update
.text:00000F05                 add     esp, 4
.text:00000F08                 cmp     ebp, esp
.text:00000F0A                 call    __RTC_CheckEsp
.text:00000F0F                 pop     ebp
.text:00000F10                 retn
.text:00000F10 _seen_disp_event endp
.text:00000F10
.text:00000F10 ; ---------------------------------------------------------------------------
.text:00000F11                 db 0Bh dup(0CCh)
.text:00000F1C
.text:00000F1C ; =============== S U B R O U T I N E =======================================
.text:00000F1C
.text:00000F1C ; Attributes: bp-based frame
.text:00000F1C
.text:00000F1C _term_schedule_update proc near         ; CODE XREF: _seen_disp_event+14p
.text:00000F1C                                         ; _term_invalidate+93p ...
.text:00000F1C
.text:00000F1C arg_0           = dword ptr  8
.text:00000F1C
.text:00000F1C                 push    ebp
.text:00000F1D                 mov     ebp, esp
.text:00000F1F                 mov     eax, [ebp+arg_0]
.text:00000F22                 cmp     dword ptr [eax+109Ch], 0
.text:00000F29                 jnz     short loc_F54
.text:00000F2B                 mov     ecx, [ebp+arg_0]
.text:00000F2E                 mov     dword ptr [ecx+109Ch], 1
.text:00000F38                 mov     edx, [ebp+arg_0]
.text:00000F3B                 push    edx
.text:00000F3C                 push    offset _term_timer
.text:00000F41                 push    14h
.text:00000F43                 call    _schedule_timer
.text:00000F48                 add     esp, 0Ch
.text:00000F4B                 mov     ecx, [ebp+arg_0]
.text:00000F4E                 mov     [ecx+10A0h], eax
.text:00000F54
.text:00000F54 loc_F54:                                ; CODE XREF: _term_schedule_update+Dj
.text:00000F54                 cmp     ebp, esp
.text:00000F56                 call    __RTC_CheckEsp
.text:00000F5B                 pop     ebp
.text:00000F5C                 retn
.text:00000F5C _term_schedule_update endp
.text:00000F5C
.text:00000F5C ; ---------------------------------------------------------------------------
.text:00000F5D                 db 0Fh dup(0CCh)
.text:00000F6C
.text:00000F6C ; =============== S U B R O U T I N E =======================================
.text:00000F6C
.text:00000F6C ; Attributes: bp-based frame
.text:00000F6C
.text:00000F6C _term_timer     proc near               ; DATA XREF: _term_schedule_update+20o
.text:00000F6C                                         ; _term_schedule_tblink+1Fo ...
.text:00000F6C
.text:00000F6C var_8           = dword ptr -8
.text:00000F6C var_4           = dword ptr -4
.text:00000F6C arg_0           = dword ptr  8
.text:00000F6C arg_4           = dword ptr  0Ch
.text:00000F6C
.text:00000F6C                 push    ebp
.text:00000F6D                 mov     ebp, esp
.text:00000F6F                 sub     esp, 8
.text:00000F72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F80                 mov     eax, [ebp+arg_0]
.text:00000F83                 mov     [ebp+var_4], eax
.text:00000F86                 mov     [ebp+var_8], 0
.text:00000F8D                 mov     ecx, [ebp+var_4]
.text:00000F90                 cmp     dword ptr [ecx+10A4h], 0
.text:00000F97                 jz      short loc_FDF
.text:00000F99                 mov     edx, [ebp+var_4]
.text:00000F9C                 mov     eax, [ebp+arg_4]
.text:00000F9F                 cmp     eax, [edx+10ACh]
.text:00000FA5                 jnz     short loc_FDF
.text:00000FA7                 mov     ecx, [ebp+var_4]
.text:00000FAA                 xor     edx, edx
.text:00000FAC                 cmp     dword ptr [ecx+0C0h], 0
.text:00000FB3                 setz    dl
.text:00000FB6                 mov     eax, [ebp+var_4]
.text:00000FB9                 mov     [eax+0C0h], edx
.text:00000FBF                 mov     ecx, [ebp+var_4]
.text:00000FC2                 mov     dword ptr [ecx+10A4h], 0
.text:00000FCC                 mov     edx, [ebp+var_4]
.text:00000FCF                 push    edx
.text:00000FD0                 call    _term_schedule_tblink
.text:00000FD5                 add     esp, 4
.text:00000FD8                 mov     [ebp+var_8], 1
.text:00000FDF
.text:00000FDF loc_FDF:                                ; CODE XREF: _term_timer+2Bj
.text:00000FDF                                         ; _term_timer+39j
.text:00000FDF                 mov     eax, [ebp+var_4]
.text:00000FE2                 cmp     dword ptr [eax+10A8h], 0
.text:00000FE9                 jz      short loc_1031
.text:00000FEB                 mov     ecx, [ebp+var_4]
.text:00000FEE                 mov     edx, [ebp+arg_4]
.text:00000FF1                 cmp     edx, [ecx+10B0h]
.text:00000FF7                 jnz     short loc_1031
.text:00000FF9                 mov     eax, [ebp+var_4]
.text:00000FFC                 xor     ecx, ecx
.text:00000FFE                 cmp     dword ptr [eax+0BCh], 0
.text:00001005                 setz    cl
.text:00001008                 mov     edx, [ebp+var_4]
.text:0000100B                 mov     [edx+0BCh], ecx
.text:00001011                 mov     eax, [ebp+var_4]
.text:00001014                 mov     dword ptr [eax+10A8h], 0
.text:0000101E                 mov     ecx, [ebp+var_4]
.text:00001021                 push    ecx
.text:00001022                 call    _term_schedule_cblink
.text:00001027                 add     esp, 4
.text:0000102A                 mov     [ebp+var_8], 1
.text:00001031
.text:00001031 loc_1031:                               ; CODE XREF: _term_timer+7Dj
.text:00001031                                         ; _term_timer+8Bj
.text:00001031                 mov     edx, [ebp+var_4]
.text:00001034                 cmp     dword ptr [edx+138h], 0
.text:0000103B                 jz      short loc_105F
.text:0000103D                 mov     eax, [ebp+var_4]
.text:00001040                 mov     ecx, [ebp+arg_4]
.text:00001043                 cmp     ecx, [eax+13Ch]
.text:00001049                 jnz     short loc_105F
.text:0000104B                 mov     edx, [ebp+var_4]
.text:0000104E                 mov     dword ptr [edx+138h], 0
.text:00001058                 mov     [ebp+var_8], 1
.text:0000105F
.text:0000105F loc_105F:                               ; CODE XREF: _term_timer+CFj
.text:0000105F                                         ; _term_timer+DDj
.text:0000105F                 cmp     [ebp+var_8], 0
.text:00001063                 jnz     short loc_107F
.text:00001065                 mov     eax, [ebp+var_4]
.text:00001068                 cmp     dword ptr [eax+109Ch], 0
.text:0000106F                 jz      short loc_108B
.text:00001071                 mov     ecx, [ebp+var_4]
.text:00001074                 mov     edx, [ebp+arg_4]
.text:00001077                 cmp     edx, [ecx+10A0h]
.text:0000107D                 jnz     short loc_108B
.text:0000107F
.text:0000107F loc_107F:                               ; CODE XREF: _term_timer+F7j
.text:0000107F                 mov     eax, [ebp+var_4]
.text:00001082                 push    eax
.text:00001083                 call    _term_update
.text:00001088                 add     esp, 4
.text:0000108B
.text:0000108B loc_108B:                               ; CODE XREF: _term_timer+103j
.text:0000108B                                         ; _term_timer+111j
.text:0000108B                 add     esp, 8
.text:0000108E                 cmp     ebp, esp
.text:00001090                 call    __RTC_CheckEsp
.text:00001095                 mov     esp, ebp
.text:00001097                 pop     ebp
.text:00001098                 retn
.text:00001098 _term_timer     endp
.text:00001098
.text:00001098 ; ---------------------------------------------------------------------------
.text:00001099                 align 4
.text:0000109C
.text:0000109C ; =============== S U B R O U T I N E =======================================
.text:0000109C
.text:0000109C ; Attributes: bp-based frame
.text:0000109C
.text:0000109C _term_schedule_tblink proc near         ; CODE XREF: _term_timer+64p
.text:0000109C                                         ; _power_on+524p ...
.text:0000109C
.text:0000109C arg_0           = dword ptr  8
.text:0000109C
.text:0000109C                 push    ebp
.text:0000109D                 mov     ebp, esp
.text:0000109F                 mov     eax, [ebp+arg_0]
.text:000010A2                 cmp     dword ptr [eax+0C4h], 0
.text:000010A9                 jz      short loc_10E5
.text:000010AB                 mov     ecx, [ebp+arg_0]
.text:000010AE                 cmp     dword ptr [ecx+10A4h], 0
.text:000010B5                 jnz     short loc_10D6
.text:000010B7                 mov     edx, [ebp+arg_0]
.text:000010BA                 push    edx
.text:000010BB                 push    offset _term_timer
.text:000010C0                 push    1C2h
.text:000010C5                 call    _schedule_timer
.text:000010CA                 add     esp, 0Ch
.text:000010CD                 mov     ecx, [ebp+arg_0]
.text:000010D0                 mov     [ecx+10ACh], eax
.text:000010D6
.text:000010D6 loc_10D6:                               ; CODE XREF: _term_schedule_tblink+19j
.text:000010D6                 mov     edx, [ebp+arg_0]
.text:000010D9                 mov     dword ptr [edx+10A4h], 1
.text:000010E3                 jmp     short loc_10FF
.text:000010E5 ; ---------------------------------------------------------------------------
.text:000010E5
.text:000010E5 loc_10E5:                               ; CODE XREF: _term_schedule_tblink+Dj
.text:000010E5                 mov     eax, [ebp+arg_0]
.text:000010E8                 mov     dword ptr [eax+0C0h], 1
.text:000010F2                 mov     ecx, [ebp+arg_0]
.text:000010F5                 mov     dword ptr [ecx+10A4h], 0
.text:000010FF
.text:000010FF loc_10FF:                               ; CODE XREF: _term_schedule_tblink+47j
.text:000010FF                 cmp     ebp, esp
.text:00001101                 call    __RTC_CheckEsp
.text:00001106                 pop     ebp
.text:00001107                 retn
.text:00001107 _term_schedule_tblink endp
.text:00001107
.text:00001107 ; ---------------------------------------------------------------------------
.text:00001108                 db 4 dup(0CCh)
.text:0000110C
.text:0000110C ; =============== S U B R O U T I N E =======================================
.text:0000110C
.text:0000110C ; Attributes: bp-based frame
.text:0000110C
.text:0000110C _term_schedule_cblink proc near         ; CODE XREF: _term_timer+B6p
.text:0000110C                                         ; _power_on+530p ...
.text:0000110C
.text:0000110C arg_0           = dword ptr  8
.text:0000110C
.text:0000110C                 push    ebp
.text:0000110D                 mov     ebp, esp
.text:0000110F                 push    esi
.text:00001110                 mov     eax, [ebp+arg_0]
.text:00001113                 cmp     dword ptr [eax+1100h], 0
.text:0000111A                 jz      short loc_116D
.text:0000111C                 mov     ecx, [ebp+arg_0]
.text:0000111F                 cmp     dword ptr [ecx+134h], 0
.text:00001126                 jz      short loc_116D
.text:00001128                 mov     edx, [ebp+arg_0]
.text:0000112B                 cmp     dword ptr [edx+10A8h], 0
.text:00001132                 jnz     short loc_115E
.text:00001134                 mov     eax, [ebp+arg_0]
.text:00001137                 push    eax
.text:00001138                 push    offset _term_timer
.text:0000113D                 mov     esi, esp
.text:0000113F                 call    dword ptr ds:__imp__GetCaretBlinkTime@0 ; GetCaretBlinkTime()
.text:00001145                 cmp     esi, esp
.text:00001147                 call    __RTC_CheckEsp
.text:0000114C                 push    eax
.text:0000114D                 call    _schedule_timer
.text:00001152                 add     esp, 0Ch
.text:00001155                 mov     ecx, [ebp+arg_0]
.text:00001158                 mov     [ecx+10B0h], eax
.text:0000115E
.text:0000115E loc_115E:                               ; CODE XREF: _term_schedule_cblink+26j
.text:0000115E                 mov     edx, [ebp+arg_0]
.text:00001161                 mov     dword ptr [edx+10A8h], 1
.text:0000116B                 jmp     short loc_1187
.text:0000116D ; ---------------------------------------------------------------------------
.text:0000116D
.text:0000116D loc_116D:                               ; CODE XREF: _term_schedule_cblink+Ej
.text:0000116D                                         ; _term_schedule_cblink+1Aj
.text:0000116D                 mov     eax, [ebp+arg_0]
.text:00001170                 mov     dword ptr [eax+0BCh], 1
.text:0000117A                 mov     ecx, [ebp+arg_0]
.text:0000117D                 mov     dword ptr [ecx+10A8h], 0
.text:00001187
.text:00001187 loc_1187:                               ; CODE XREF: _term_schedule_cblink+5Fj
.text:00001187                 pop     esi
.text:00001188                 cmp     ebp, esp
.text:0000118A                 call    __RTC_CheckEsp
.text:0000118F                 pop     ebp
.text:00001190                 retn
.text:00001190 _term_schedule_cblink endp
.text:00001190
.text:00001190 ; ---------------------------------------------------------------------------
.text:00001191                 db 0Bh dup(0CCh)
.text:0000119C
.text:0000119C ; =============== S U B R O U T I N E =======================================
.text:0000119C
.text:0000119C ; Attributes: bp-based frame
.text:0000119C
.text:0000119C                 public _term_pwron
.text:0000119C _term_pwron     proc near
.text:0000119C
.text:0000119C arg_0           = dword ptr  8
.text:0000119C arg_4           = dword ptr  0Ch
.text:0000119C
.text:0000119C                 push    ebp
.text:0000119D                 mov     ebp, esp
.text:0000119F                 mov     eax, [ebp+arg_4]
.text:000011A2                 push    eax
.text:000011A3                 mov     ecx, [ebp+arg_0]
.text:000011A6                 push    ecx
.text:000011A7                 call    _power_on
.text:000011AC                 add     esp, 8
.text:000011AF                 mov     edx, [ebp+arg_0]
.text:000011B2                 cmp     dword ptr [edx+1084h], 0
.text:000011B9                 jz      short loc_11D3
.text:000011BB                 push    0
.text:000011BD                 push    0
.text:000011BF                 push    0
.text:000011C1                 mov     eax, [ebp+arg_0]
.text:000011C4                 mov     ecx, [eax+1084h]
.text:000011CA                 push    ecx
.text:000011CB                 call    _ldisc_send
.text:000011D0                 add     esp, 10h
.text:000011D3
.text:000011D3 loc_11D3:                               ; CODE XREF: _term_pwron+1Dj
.text:000011D3                 mov     edx, [ebp+arg_0]
.text:000011D6                 mov     dword ptr [edx+10h], 0
.text:000011DD                 mov     eax, [ebp+arg_0]
.text:000011E0                 push    eax
.text:000011E1                 call    _deselect
.text:000011E6                 add     esp, 4
.text:000011E9                 mov     ecx, [ebp+arg_0]
.text:000011EC                 push    ecx
.text:000011ED                 call    _term_update
.text:000011F2                 add     esp, 4
.text:000011F5                 cmp     ebp, esp
.text:000011F7                 call    __RTC_CheckEsp
.text:000011FC                 pop     ebp
.text:000011FD                 retn
.text:000011FD _term_pwron     endp
.text:000011FD
.text:000011FD ; ---------------------------------------------------------------------------
.text:000011FE                 db 0Eh dup(0CCh)
.text:0000120C
.text:0000120C ; =============== S U B R O U T I N E =======================================
.text:0000120C
.text:0000120C ; Attributes: bp-based frame
.text:0000120C
.text:0000120C _power_on       proc near               ; CODE XREF: _term_pwron+Bp
.text:0000120C                                         ; _term_init+22Ep ...
.text:0000120C
.text:0000120C var_14          = dword ptr -14h
.text:0000120C var_10          = dword ptr -10h
.text:0000120C var_C           = dword ptr -0Ch
.text:0000120C var_8           = dword ptr -8
.text:0000120C var_4           = dword ptr -4
.text:0000120C arg_0           = dword ptr  8
.text:0000120C arg_4           = dword ptr  0Ch
.text:0000120C
.text:0000120C                 push    ebp
.text:0000120D                 mov     ebp, esp
.text:0000120F                 sub     esp, 14h
.text:00001212                 mov     eax, 0CCCCCCCCh
.text:00001217                 mov     [ebp+var_14], eax
.text:0000121A                 mov     [ebp+var_10], eax
.text:0000121D                 mov     [ebp+var_C], eax
.text:00001220                 mov     [ebp+var_8], eax
.text:00001223                 mov     [ebp+var_4], eax
.text:00001226                 mov     eax, [ebp+arg_0]
.text:00001229                 mov     dword ptr [eax+17Ch], 0
.text:00001233                 mov     ecx, [ebp+arg_0]
.text:00001236                 mov     dword ptr [ecx+178h], 0
.text:00001240                 mov     edx, [ebp+arg_0]
.text:00001243                 mov     dword ptr [edx+74h], 0
.text:0000124A                 mov     eax, [ebp+arg_0]
.text:0000124D                 mov     dword ptr [eax+78h], 0
.text:00001254                 mov     ecx, [ebp+arg_0]
.text:00001257                 mov     dword ptr [ecx+108h], 0
.text:00001261                 mov     edx, [ebp+arg_0]
.text:00001264                 mov     dword ptr [edx+10Ch], 0
.text:0000126E                 mov     eax, [ebp+arg_0]
.text:00001271                 mov     dword ptr [eax+7Ch], 0
.text:00001278                 mov     ecx, [ebp+arg_0]
.text:0000127B                 mov     dword ptr [ecx+19Ch], 0
.text:00001285                 mov     edx, [ebp+arg_0]
.text:00001288                 cmp     dword ptr [edx+128h], 0FFFFFFFFh
.text:0000128F                 jz      short loc_12BA
.text:00001291                 mov     eax, [ebp+arg_0]
.text:00001294                 mov     ecx, [eax+128h]
.text:0000129A                 sub     ecx, 1
.text:0000129D                 mov     [ebp+var_C], ecx
.text:000012A0                 mov     edx, [ebp+arg_0]
.text:000012A3                 mov     eax, [ebp+var_C]
.text:000012A6                 mov     [edx+80h], eax
.text:000012AC                 mov     ecx, [ebp+arg_0]
.text:000012AF                 mov     edx, [ebp+var_C]
.text:000012B2                 mov     [ecx+1A0h], edx
.text:000012B8                 jmp     short loc_12D4
.text:000012BA ; ---------------------------------------------------------------------------
.text:000012BA
.text:000012BA loc_12BA:                               ; CODE XREF: _power_on+83j
.text:000012BA                 mov     eax, [ebp+arg_0]
.text:000012BD                 mov     dword ptr [eax+80h], 0
.text:000012C7                 mov     ecx, [ebp+arg_0]
.text:000012CA                 mov     dword ptr [ecx+1A0h], 0
.text:000012D4
.text:000012D4 loc_12D4:                               ; CODE XREF: _power_on+ACj
.text:000012D4                 mov     edx, [ebp+arg_0]
.text:000012D7                 cmp     dword ptr [edx+12Ch], 0FFFFFFFFh
.text:000012DE                 jz      short loc_1327
.text:000012E0                 mov     [ebp+var_4], 0
.text:000012E7                 jmp     short loc_12F2
.text:000012E9 ; ---------------------------------------------------------------------------
.text:000012E9
.text:000012E9 loc_12E9:                               ; CODE XREF: _power_on+119j
.text:000012E9                 mov     eax, [ebp+var_4]
.text:000012EC                 add     eax, 1
.text:000012EF                 mov     [ebp+var_4], eax
.text:000012F2
.text:000012F2 loc_12F2:                               ; CODE XREF: _power_on+DBj
.text:000012F2                 mov     ecx, [ebp+arg_0]
.text:000012F5                 mov     edx, [ebp+var_4]
.text:000012F8                 cmp     edx, [ecx+12Ch]
.text:000012FE                 jge     short loc_1327
.text:00001300                 mov     eax, [ebp+var_4]
.text:00001303                 and     eax, 80000007h
.text:00001308                 jns     short loc_130F
.text:0000130A                 dec     eax
.text:0000130B                 or      eax, 0FFFFFFF8h
.text:0000130E                 inc     eax
.text:0000130F
.text:0000130F loc_130F:                               ; CODE XREF: _power_on+FCj
.text:0000130F                 neg     eax
.text:00001311                 sbb     eax, eax
.text:00001313                 add     eax, 1
.text:00001316                 mov     ecx, [ebp+arg_0]
.text:00001319                 mov     edx, [ecx+0E40h]
.text:0000131F                 mov     ecx, [ebp+var_4]
.text:00001322                 mov     [edx+ecx], al
.text:00001325                 jmp     short loc_12E9
.text:00001327 ; ---------------------------------------------------------------------------
.text:00001327
.text:00001327 loc_1327:                               ; CODE XREF: _power_on+D2j
.text:00001327                                         ; _power_on+F2j
.text:00001327                 push    5Ch ; '\'
.text:00001329                 mov     edx, [ebp+arg_0]
.text:0000132C                 mov     eax, [edx+1094h]
.text:00001332                 push    eax
.text:00001333                 call    _conf_get_int
.text:00001338                 add     esp, 8
.text:0000133B                 mov     [ebp+var_10], eax
.text:0000133E                 mov     ecx, [ebp+arg_0]
.text:00001341                 mov     edx, [ebp+var_10]
.text:00001344                 mov     [ecx+84h], edx
.text:0000134A                 mov     eax, [ebp+arg_0]
.text:0000134D                 mov     ecx, [ebp+var_10]
.text:00001350                 mov     [eax+180h], ecx
.text:00001356                 mov     edx, [ebp+arg_0]
.text:00001359                 mov     dword ptr [edx+90h], 0
.text:00001363                 mov     eax, [ebp+arg_0]
.text:00001366                 mov     dword ptr [eax+18Ch], 0
.text:00001370                 mov     ecx, [ebp+arg_0]
.text:00001373                 mov     dword ptr [ecx+120h], 0
.text:0000137D                 mov     edx, [ebp+arg_0]
.text:00001380                 mov     dword ptr [edx+0A4h], 0
.text:0000138A                 mov     eax, [ebp+arg_0]
.text:0000138D                 mov     dword ptr [eax+8Ch], 0
.text:00001397                 mov     ecx, [ebp+arg_0]
.text:0000139A                 mov     dword ptr [ecx+188h], 0
.text:000013A4                 push    5Dh ; ']'
.text:000013A6                 mov     edx, [ebp+arg_0]
.text:000013A9                 mov     eax, [edx+1094h]
.text:000013AF                 push    eax
.text:000013B0                 call    _conf_get_int
.text:000013B5                 add     esp, 8
.text:000013B8                 mov     [ebp+var_14], eax
.text:000013BB                 mov     ecx, [ebp+arg_0]
.text:000013BE                 mov     edx, [ebp+var_14]
.text:000013C1                 mov     [ecx+88h], edx
.text:000013C7                 mov     eax, [ebp+arg_0]
.text:000013CA                 mov     ecx, [ebp+var_14]
.text:000013CD                 mov     [eax+184h], ecx
.text:000013D3                 mov     edx, [ebp+arg_0]
.text:000013D6                 mov     dword ptr [edx+114h], 0
.text:000013E0                 mov     eax, [ebp+arg_0]
.text:000013E3                 mov     dword ptr [eax+98h], 0
.text:000013ED                 mov     ecx, [ebp+arg_0]
.text:000013F0                 mov     dword ptr [ecx+94h], 0
.text:000013FA                 mov     edx, [ebp+arg_0]
.text:000013FD                 mov     dword ptr [edx+190h], 0
.text:00001407                 mov     eax, [ebp+arg_0]
.text:0000140A                 mov     dword ptr [eax+11Ch], 0
.text:00001414                 mov     ecx, [ebp+arg_0]
.text:00001417                 mov     dword ptr [ecx+0A0h], 0
.text:00001421                 mov     edx, [ebp+arg_0]
.text:00001424                 mov     dword ptr [edx+0DCh], 0
.text:0000142E                 mov     eax, [ebp+arg_0]
.text:00001431                 mov     dword ptr [eax+198h], 0
.text:0000143B                 mov     ecx, [ebp+arg_0]
.text:0000143E                 mov     dword ptr [ecx+0E0h], 0
.text:00001448                 mov     edx, [ebp+arg_0]
.text:0000144B                 mov     dword ptr [edx+124h], 0
.text:00001455                 mov     eax, [ebp+arg_0]
.text:00001458                 mov     dword ptr [eax+0D4h], 0
.text:00001462                 mov     ecx, [ebp+arg_0]
.text:00001465                 mov     dword ptr [ecx+0D0h], 0
.text:0000146F                 mov     edx, [ebp+arg_0]
.text:00001472                 mov     dword ptr [edx+194h], 0
.text:0000147C                 mov     eax, [ebp+arg_0]
.text:0000147F                 mov     dword ptr [eax+118h], 0D800h
.text:00001489                 mov     ecx, [ebp+arg_0]
.text:0000148C                 mov     dword ptr [ecx+9Ch], 0D800h
.text:00001496                 mov     edx, [ebp+arg_0]
.text:00001499                 mov     dword ptr [edx+174h], 0D800h
.text:000014A3                 mov     eax, [ebp+arg_0]
.text:000014A6                 mov     dword ptr [eax+170h], 0D800h
.text:000014B0                 mov     ecx, [ebp+arg_0]
.text:000014B3                 mov     dword ptr [ecx+0A8h], 0
.text:000014BD                 mov     edx, [ebp+arg_0]
.text:000014C0                 mov     dword ptr [edx+138h], 0
.text:000014CA                 mov     eax, [ebp+arg_0]
.text:000014CD                 mov     dword ptr [eax+0B0h], 1
.text:000014D7                 mov     ecx, [ebp+arg_0]
.text:000014DA                 mov     dword ptr [ecx+158h], 0
.text:000014E4                 mov     edx, [ebp+arg_0]
.text:000014E7                 mov     dword ptr [edx+40h], 20500h
.text:000014EE                 mov     eax, [ebp+arg_0]
.text:000014F1                 mov     dword ptr [eax+110h], 20500h
.text:000014FB                 mov     ecx, [ebp+arg_0]
.text:000014FE                 mov     dword ptr [ecx+44h], 20500h
.text:00001505                 mov     edx, [ebp+arg_0]
.text:00001508                 mov     dword ptr [edx+3Ch], 20500h
.text:0000150F                 mov     eax, [ebp+arg_0]
.text:00001512                 mov     dword ptr [eax+0C8h], 0
.text:0000151C                 mov     ecx, [ebp+arg_0]
.text:0000151F                 mov     dword ptr [ecx+0CCh], 0
.text:00001529                 push    49h ; 'I'
.text:0000152B                 mov     edx, [ebp+arg_0]
.text:0000152E                 mov     eax, [edx+1094h]
.text:00001534                 push    eax
.text:00001535                 call    _conf_get_int
.text:0000153A                 add     esp, 8
.text:0000153D                 mov     ecx, [ebp+arg_0]
.text:00001540                 mov     [ecx+140h], eax
.text:00001546                 push    4Ah ; 'J'
.text:00001548                 mov     edx, [ebp+arg_0]
.text:0000154B                 mov     eax, [edx+1094h]
.text:00001551                 push    eax
.text:00001552                 call    _conf_get_int
.text:00001557                 add     esp, 8
.text:0000155A                 mov     ecx, [ebp+arg_0]
.text:0000155D                 mov     [ecx+144h], eax
.text:00001563                 push    6Bh ; 'k'
.text:00001565                 mov     edx, [ebp+arg_0]
.text:00001568                 mov     eax, [edx+1094h]
.text:0000156E                 push    eax
.text:0000156F                 call    _conf_get_int
.text:00001574                 add     esp, 8
.text:00001577                 mov     ecx, [ebp+arg_0]
.text:0000157A                 mov     [ecx+0B8h], eax
.text:00001580                 push    6Ch ; 'l'
.text:00001582                 mov     edx, [ebp+arg_0]
.text:00001585                 mov     eax, [edx+1094h]
.text:0000158B                 push    eax
.text:0000158C                 call    _conf_get_int
.text:00001591                 add     esp, 8
.text:00001594                 mov     ecx, [ebp+arg_0]
.text:00001597                 mov     [ecx+0C4h], eax
.text:0000159D                 mov     edx, [ebp+arg_0]
.text:000015A0                 add     edx, 48h ; 'H'
.text:000015A3                 mov     eax, [ebp+arg_0]
.text:000015A6                 add     eax, 54h ; 'T'
.text:000015A9                 mov     ecx, [edx]
.text:000015AB                 mov     [eax], ecx
.text:000015AD                 mov     ecx, [edx+4]
.text:000015B0                 mov     [eax+4], ecx
.text:000015B3                 mov     edx, [edx+8]
.text:000015B6                 mov     [eax+8], edx
.text:000015B9                 mov     eax, [ebp+arg_0]
.text:000015BC                 mov     dword ptr [eax+1A4h], 0
.text:000015C6                 mov     ecx, [ebp+arg_0]
.text:000015C9                 push    ecx
.text:000015CA                 call    _term_print_finish
.text:000015CF                 add     esp, 4
.text:000015D2                 mov     edx, [ebp+arg_0]
.text:000015D5                 mov     dword ptr [edx+15Ch], 0
.text:000015DF                 mov     eax, [ebp+arg_0]
.text:000015E2                 mov     dword ptr [eax+160h], 0
.text:000015EC                 mov     ecx, [ebp+arg_0]
.text:000015EF                 mov     dword ptr [ecx+164h], 0
.text:000015F9                 push    0
.text:000015FB                 mov     edx, [ebp+arg_0]
.text:000015FE                 mov     eax, [edx+1088h]
.text:00001604                 push    eax
.text:00001605                 call    _set_raw_mouse_mode
.text:0000160A                 add     esp, 8
.text:0000160D                 mov     ecx, [ebp+arg_0]
.text:00001610                 mov     dword ptr [ecx+16Ch], 0
.text:0000161A                 mov     [ebp+var_8], 0
.text:00001621                 jmp     short loc_162C
.text:00001623 ; ---------------------------------------------------------------------------
.text:00001623
.text:00001623 loc_1623:                               ; CODE XREF: _power_on+452j
.text:00001623                 mov     edx, [ebp+var_8]
.text:00001626                 add     edx, 1
.text:00001629                 mov     [ebp+var_8], edx
.text:0000162C
.text:0000162C loc_162C:                               ; CODE XREF: _power_on+415j
.text:0000162C                 cmp     [ebp+var_8], 100h
.text:00001633                 jge     short loc_1660
.text:00001635                 mov     eax, [ebp+var_8]
.text:00001638                 push    eax
.text:00001639                 push    8Ah ; 'è'
.text:0000163E                 mov     ecx, [ebp+arg_0]
.text:00001641                 mov     edx, [ecx+1094h]
.text:00001647                 push    edx
.text:00001648                 call    _conf_get_int_int
.text:0000164D                 add     esp, 0Ch
.text:00001650                 mov     ecx, [ebp+var_8]
.text:00001653                 mov     edx, [ebp+arg_0]
.text:00001656                 mov     [edx+ecx*2+0E6Ch], ax
.text:0000165E                 jmp     short loc_1623
.text:00001660 ; ---------------------------------------------------------------------------
.text:00001660
.text:00001660 loc_1660:                               ; CODE XREF: _power_on+427j
.text:00001660                 mov     eax, [ebp+arg_0]
.text:00001663                 cmp     dword ptr [eax+8], 0
.text:00001667                 jz      loc_1718
.text:0000166D                 push    0
.text:0000166F                 push    0
.text:00001671                 push    1
.text:00001673                 mov     ecx, [ebp+arg_0]
.text:00001676                 push    ecx
.text:00001677                 call    _swap_screen
.text:0000167C                 add     esp, 10h
.text:0000167F                 push    1
.text:00001681                 push    1
.text:00001683                 push    0
.text:00001685                 mov     edx, [ebp+arg_0]
.text:00001688                 push    edx
.text:00001689                 call    _erase_lots
.text:0000168E                 add     esp, 10h
.text:00001691                 push    0
.text:00001693                 push    0
.text:00001695                 push    0
.text:00001697                 mov     eax, [ebp+arg_0]
.text:0000169A                 push    eax
.text:0000169B                 call    _swap_screen
.text:000016A0                 add     esp, 10h
.text:000016A3                 cmp     [ebp+arg_4], 0
.text:000016A7                 jz      short loc_16BB
.text:000016A9                 push    1
.text:000016AB                 push    1
.text:000016AD                 push    0
.text:000016AF                 mov     ecx, [ebp+arg_0]
.text:000016B2                 push    ecx
.text:000016B3                 call    _erase_lots
.text:000016B8                 add     esp, 10h
.text:000016BB
.text:000016BB loc_16BB:                               ; CODE XREF: _power_on+49Bj
.text:000016BB                 mov     edx, [ebp+arg_0]
.text:000016BE                 mov     eax, [edx+8]
.text:000016C1                 push    eax
.text:000016C2                 mov     ecx, [ebp+arg_0]
.text:000016C5                 push    ecx
.text:000016C6                 call    _find_last_nonempty_line
.text:000016CB                 add     esp, 8
.text:000016CE                 add     eax, 1
.text:000016D1                 mov     edx, [ebp+arg_0]
.text:000016D4                 mov     [edx+6Ch], eax
.text:000016D7                 mov     eax, [ebp+arg_0]
.text:000016DA                 mov     ecx, [ebp+arg_0]
.text:000016DD                 mov     edx, [eax+6Ch]
.text:000016E0                 cmp     edx, [ecx+128h]
.text:000016E6                 jnz     short loc_1716
.text:000016E8                 mov     eax, [ebp+arg_0]
.text:000016EB                 mov     ecx, [eax+6Ch]
.text:000016EE                 sub     ecx, 1
.text:000016F1                 mov     edx, [ebp+arg_0]
.text:000016F4                 mov     [edx+6Ch], ecx
.text:000016F7                 push    1
.text:000016F9                 push    1
.text:000016FB                 mov     eax, [ebp+arg_0]
.text:000016FE                 mov     ecx, [eax+128h]
.text:00001704                 sub     ecx, 1
.text:00001707                 push    ecx
.text:00001708                 push    0
.text:0000170A                 mov     edx, [ebp+arg_0]
.text:0000170D                 push    edx
.text:0000170E                 call    _scroll
.text:00001713                 add     esp, 14h
.text:00001716
.text:00001716 loc_1716:                               ; CODE XREF: _power_on+4DAj
.text:00001716                 jmp     short loc_1722
.text:00001718 ; ---------------------------------------------------------------------------
.text:00001718
.text:00001718 loc_1718:                               ; CODE XREF: _power_on+45Bj
.text:00001718                 mov     eax, [ebp+arg_0]
.text:0000171B                 mov     dword ptr [eax+6Ch], 0
.text:00001722
.text:00001722 loc_1722:                               ; CODE XREF: _power_on:loc_1716j
.text:00001722                 mov     ecx, [ebp+arg_0]
.text:00001725                 mov     dword ptr [ecx+70h], 0
.text:0000172C                 mov     edx, [ebp+arg_0]
.text:0000172F                 push    edx
.text:00001730                 call    _term_schedule_tblink
.text:00001735                 add     esp, 4
.text:00001738                 mov     eax, [ebp+arg_0]
.text:0000173B                 push    eax
.text:0000173C                 call    _term_schedule_cblink
.text:00001741                 add     esp, 4
.text:00001744                 add     esp, 14h
.text:00001747                 cmp     ebp, esp
.text:00001749                 call    __RTC_CheckEsp
.text:0000174E                 mov     esp, ebp
.text:00001750                 pop     ebp
.text:00001751                 retn
.text:00001751 _power_on       endp
.text:00001751
.text:00001751 ; ---------------------------------------------------------------------------
.text:00001752                 db 0Ah dup(0CCh)
.text:0000175C
.text:0000175C ; =============== S U B R O U T I N E =======================================
.text:0000175C
.text:0000175C ; Attributes: bp-based frame
.text:0000175C
.text:0000175C                 public _term_copy_stuff_from_conf
.text:0000175C _term_copy_stuff_from_conf proc near    ; CODE XREF: _term_reconfig+477p
.text:0000175C                                         ; _term_init+190p
.text:0000175C
.text:0000175C var_18          = dword ptr -18h
.text:0000175C var_14          = dword ptr -14h
.text:0000175C var_10          = dword ptr -10h
.text:0000175C var_C           = dword ptr -0Ch
.text:0000175C var_8           = dword ptr -8
.text:0000175C Str             = dword ptr -4
.text:0000175C arg_0           = dword ptr  8
.text:0000175C
.text:0000175C                 push    ebp
.text:0000175D                 mov     ebp, esp
.text:0000175F                 sub     esp, 18h
.text:00001762                 mov     eax, 0CCCCCCCCh
.text:00001767                 mov     [ebp+var_18], eax
.text:0000176A                 mov     [ebp+var_14], eax
.text:0000176D                 mov     [ebp+var_10], eax
.text:00001770                 mov     [ebp+var_C], eax
.text:00001773                 mov     [ebp+var_8], eax
.text:00001776                 mov     [ebp+Str], eax
.text:00001779                 push    7Fh ; ''
.text:0000177B                 mov     eax, [ebp+arg_0]
.text:0000177E                 mov     ecx, [eax+1094h]
.text:00001784                 push    ecx
.text:00001785                 call    _conf_get_int
.text:0000178A                 add     esp, 8
.text:0000178D                 mov     edx, [ebp+arg_0]
.text:00001790                 mov     [edx+10D4h], eax
.text:00001796                 push    7Dh ; '}'
.text:00001798                 mov     eax, [ebp+arg_0]
.text:0000179B                 mov     ecx, [eax+1094h]
.text:000017A1                 push    ecx
.text:000017A2                 call    _conf_get_int
.text:000017A7                 add     esp, 8
.text:000017AA                 mov     edx, [ebp+arg_0]
.text:000017AD                 mov     [edx+10E0h], eax
.text:000017B3                 push    61h ; 'a'
.text:000017B5                 mov     eax, [ebp+arg_0]
.text:000017B8                 mov     ecx, [eax+1094h]
.text:000017BE                 push    ecx
.text:000017BF                 call    _conf_get_int
.text:000017C4                 add     esp, 8
.text:000017C7                 mov     edx, [ebp+arg_0]
.text:000017CA                 mov     [edx+10E4h], eax
.text:000017D0                 push    63h ; 'c'
.text:000017D2                 mov     eax, [ebp+arg_0]
.text:000017D5                 mov     ecx, [eax+1094h]
.text:000017DB                 push    ecx
.text:000017DC                 call    _conf_get_int
.text:000017E1                 add     esp, 8
.text:000017E4                 mov     edx, [ebp+arg_0]
.text:000017E7                 mov     [edx+10E8h], eax
.text:000017ED                 push    64h ; 'd'
.text:000017EF                 mov     eax, [ebp+arg_0]
.text:000017F2                 mov     ecx, [eax+1094h]
.text:000017F8                 push    ecx
.text:000017F9                 call    _conf_get_int
.text:000017FE                 add     esp, 8
.text:00001801                 mov     edx, [ebp+arg_0]
.text:00001804                 mov     [edx+10ECh], eax
.text:0000180A                 push    66h ; 'f'
.text:0000180C                 mov     eax, [ebp+arg_0]
.text:0000180F                 mov     ecx, [eax+1094h]
.text:00001815                 push    ecx
.text:00001816                 call    _conf_get_int
.text:0000181B                 add     esp, 8
.text:0000181E                 mov     edx, [ebp+arg_0]
.text:00001821                 mov     [edx+10F0h], eax
.text:00001827                 push    65h ; 'e'
.text:00001829                 mov     eax, [ebp+arg_0]
.text:0000182C                 mov     ecx, [eax+1094h]
.text:00001832                 push    ecx
.text:00001833                 call    _conf_get_int
.text:00001838                 add     esp, 8
.text:0000183B                 mov     edx, [ebp+arg_0]
.text:0000183E                 mov     [edx+10F4h], eax
.text:00001844                 push    7Eh ; '~'
.text:00001846                 mov     eax, [ebp+arg_0]
.text:00001849                 mov     ecx, [eax+1094h]
.text:0000184F                 push    ecx
.text:00001850                 call    _conf_get_int
.text:00001855                 add     esp, 8
.text:00001858                 mov     edx, [ebp+arg_0]
.text:0000185B                 mov     [edx+10F8h], eax
.text:00001861                 push    3Dh ; '='
.text:00001863                 mov     eax, [ebp+arg_0]
.text:00001866                 mov     ecx, [eax+1094h]
.text:0000186C                 push    ecx
.text:0000186D                 call    _conf_get_int
.text:00001872                 add     esp, 8
.text:00001875                 mov     edx, [ebp+arg_0]
.text:00001878                 mov     [edx+10FCh], eax
.text:0000187E                 push    60h ; '`'
.text:00001880                 mov     eax, [ebp+arg_0]
.text:00001883                 mov     ecx, [eax+1094h]
.text:00001889                 push    ecx
.text:0000188A                 call    _conf_get_int
.text:0000188F                 add     esp, 8
.text:00001892                 mov     edx, [ebp+arg_0]
.text:00001895                 mov     [edx+1100h], eax
.text:0000189B                 push    6Ch ; 'l'
.text:0000189D                 mov     eax, [ebp+arg_0]
.text:000018A0                 mov     ecx, [eax+1094h]
.text:000018A6                 push    ecx
.text:000018A7                 call    _conf_get_int
.text:000018AC                 add     esp, 8
.text:000018AF                 mov     edx, [ebp+arg_0]
.text:000018B2                 mov     [edx+1104h], eax
.text:000018B8                 push    8Dh ; 'ì'
.text:000018BD                 mov     eax, [ebp+arg_0]
.text:000018C0                 mov     ecx, [eax+1094h]
.text:000018C6                 push    ecx
.text:000018C7                 call    _conf_get_int
.text:000018CC                 add     esp, 8
.text:000018CF                 mov     edx, [ebp+arg_0]
.text:000018D2                 mov     [edx+1108h], eax
.text:000018D8                 push    6Fh ; 'o'
.text:000018DA                 mov     eax, [ebp+arg_0]
.text:000018DD                 mov     ecx, [eax+1094h]
.text:000018E3                 push    ecx
.text:000018E4                 call    _conf_get_int
.text:000018E9                 add     esp, 8
.text:000018EC                 mov     edx, [ebp+arg_0]
.text:000018EF                 mov     [edx+110Ch], eax
.text:000018F5                 push    6Eh ; 'n'
.text:000018F7                 mov     eax, [ebp+arg_0]
.text:000018FA                 mov     ecx, [eax+1094h]
.text:00001900                 push    ecx
.text:00001901                 call    _conf_get_int
.text:00001906                 add     esp, 8
.text:00001909                 mov     edx, [ebp+arg_0]
.text:0000190C                 mov     [edx+1110h], eax
.text:00001912                 push    0B0h ; '¦'
.text:00001917                 mov     eax, [ebp+arg_0]
.text:0000191A                 mov     ecx, [eax+1094h]
.text:00001920                 push    ecx
.text:00001921                 call    _conf_get_int
.text:00001926                 add     esp, 8
.text:00001929                 mov     edx, [ebp+arg_0]
.text:0000192C                 mov     [edx+1114h], eax
.text:00001932                 push    57h ; 'W'
.text:00001934                 mov     eax, [ebp+arg_0]
.text:00001937                 mov     ecx, [eax+1094h]
.text:0000193D                 push    ecx
.text:0000193E                 call    _conf_get_int
.text:00001943                 add     esp, 8
.text:00001946                 mov     edx, [ebp+arg_0]
.text:00001949                 mov     [edx+1118h], eax
.text:0000194F                 push    3Fh ; '?'
.text:00001951                 mov     eax, [ebp+arg_0]
.text:00001954                 mov     ecx, [eax+1094h]
.text:0000195A                 push    ecx
.text:0000195B                 call    _conf_get_int
.text:00001960                 add     esp, 8
.text:00001963                 mov     edx, [ebp+arg_0]
.text:00001966                 mov     [edx+111Ch], eax
.text:0000196C                 push    5Eh ; '^'
.text:0000196E                 mov     eax, [ebp+arg_0]
.text:00001971                 mov     ecx, [eax+1094h]
.text:00001977                 push    ecx
.text:00001978                 call    _conf_get_int
.text:0000197D                 add     esp, 8
.text:00001980                 mov     edx, [ebp+arg_0]
.text:00001983                 mov     [edx+1120h], eax
.text:00001989                 push    75h ; 'u'
.text:0000198B                 mov     eax, [ebp+arg_0]
.text:0000198E                 mov     ecx, [eax+1094h]
.text:00001994                 push    ecx
.text:00001995                 call    _conf_get_int
.text:0000199A                 add     esp, 8
.text:0000199D                 mov     edx, [ebp+arg_0]
.text:000019A0                 mov     [edx+1124h], eax
.text:000019A6                 push    73h ; 's'
.text:000019A8                 mov     eax, [ebp+arg_0]
.text:000019AB                 mov     ecx, [eax+1094h]
.text:000019B1                 push    ecx
.text:000019B2                 call    _conf_get_int
.text:000019B7                 add     esp, 8
.text:000019BA                 mov     edx, [ebp+arg_0]
.text:000019BD                 mov     [edx+1128h], eax
.text:000019C3                 push    89h ; 'ë'
.text:000019C8                 mov     eax, [ebp+arg_0]
.text:000019CB                 mov     ecx, [eax+1094h]
.text:000019D1                 push    ecx
.text:000019D2                 call    _conf_get_int
.text:000019D7                 add     esp, 8
.text:000019DA                 mov     edx, [ebp+arg_0]
.text:000019DD                 mov     [edx+112Ch], eax
.text:000019E3                 push    4Bh ; 'K'
.text:000019E5                 mov     eax, [ebp+arg_0]
.text:000019E8                 mov     ecx, [eax+1094h]
.text:000019EE                 push    ecx
.text:000019EF                 call    _conf_get_int
.text:000019F4                 add     esp, 8
.text:000019F7                 mov     edx, [ebp+arg_0]
.text:000019FA                 mov     [edx+1130h], eax
.text:00001A00                 push    44h ; 'D'
.text:00001A02                 mov     eax, [ebp+arg_0]
.text:00001A05                 mov     ecx, [eax+1094h]
.text:00001A0B                 push    ecx
.text:00001A0C                 call    _conf_get_int
.text:00001A11                 add     esp, 8
.text:00001A14                 mov     edx, [ebp+arg_0]
.text:00001A17                 mov     [edx+1134h], eax
.text:00001A1D                 push    40h ; '@'
.text:00001A1F                 mov     eax, [ebp+arg_0]
.text:00001A22                 mov     ecx, [eax+1094h]
.text:00001A28                 push    ecx
.text:00001A29                 call    _conf_get_int
.text:00001A2E                 add     esp, 8
.text:00001A31                 mov     edx, [ebp+arg_0]
.text:00001A34                 mov     [edx+1138h], eax
.text:00001A3A                 push    41h ; 'A'
.text:00001A3C                 mov     eax, [ebp+arg_0]
.text:00001A3F                 mov     ecx, [eax+1094h]
.text:00001A45                 push    ecx
.text:00001A46                 call    _conf_get_int
.text:00001A4B                 add     esp, 8
.text:00001A4E                 mov     edx, [ebp+arg_0]
.text:00001A51                 mov     [edx+113Ch], eax
.text:00001A57                 push    46h ; 'F'
.text:00001A59                 mov     eax, [ebp+arg_0]
.text:00001A5C                 mov     ecx, [eax+1094h]
.text:00001A62                 push    ecx
.text:00001A63                 call    _conf_get_int
.text:00001A68                 add     esp, 8
.text:00001A6B                 mov     edx, [ebp+arg_0]
.text:00001A6E                 mov     [edx+1140h], eax
.text:00001A74                 push    42h ; 'B'
.text:00001A76                 mov     eax, [ebp+arg_0]
.text:00001A79                 mov     ecx, [eax+1094h]
.text:00001A7F                 push    ecx
.text:00001A80                 call    _conf_get_int
.text:00001A85                 add     esp, 8
.text:00001A88                 mov     edx, [ebp+arg_0]
.text:00001A8B                 mov     [edx+1144h], eax
.text:00001A91                 push    47h ; 'G'
.text:00001A93                 mov     eax, [ebp+arg_0]
.text:00001A96                 mov     ecx, [eax+1094h]
.text:00001A9C                 push    ecx
.text:00001A9D                 call    _conf_get_int
.text:00001AA2                 add     esp, 8
.text:00001AA5                 mov     edx, [ebp+arg_0]
.text:00001AA8                 mov     [edx+1148h], eax
.text:00001AAE                 push    43h ; 'C'
.text:00001AB0                 mov     eax, [ebp+arg_0]
.text:00001AB3                 mov     ecx, [eax+1094h]
.text:00001AB9                 push    ecx
.text:00001ABA                 call    _conf_get_int
.text:00001ABF                 add     esp, 8
.text:00001AC2                 mov     edx, [ebp+arg_0]
.text:00001AC5                 mov     [edx+114Ch], eax
.text:00001ACB                 push    45h ; 'E'
.text:00001ACD                 mov     eax, [ebp+arg_0]
.text:00001AD0                 mov     ecx, [eax+1094h]
.text:00001AD6                 push    ecx
.text:00001AD7                 call    _conf_get_int
.text:00001ADC                 add     esp, 8
.text:00001ADF                 mov     edx, [ebp+arg_0]
.text:00001AE2                 mov     [edx+1150h], eax
.text:00001AE8                 push    87h ; 'ç'
.text:00001AED                 mov     eax, [ebp+arg_0]
.text:00001AF0                 mov     ecx, [eax+1094h]
.text:00001AF6                 push    ecx
.text:00001AF7                 call    _conf_get_int
.text:00001AFC                 add     esp, 8
.text:00001AFF                 mov     edx, [ebp+arg_0]
.text:00001B02                 mov     [edx+1154h], eax
.text:00001B08                 push    86h ; 'å'
.text:00001B0D                 mov     eax, [ebp+arg_0]
.text:00001B10                 mov     ecx, [eax+1094h]
.text:00001B16                 push    ecx
.text:00001B17                 call    _conf_get_int
.text:00001B1C                 add     esp, 8
.text:00001B1F                 mov     edx, [ebp+arg_0]
.text:00001B22                 mov     [edx+1158h], eax
.text:00001B28                 push    48h ; 'H'
.text:00001B2A                 mov     eax, [ebp+arg_0]
.text:00001B2D                 mov     ecx, [eax+1094h]
.text:00001B33                 push    ecx
.text:00001B34                 call    _conf_get_int
.text:00001B39                 add     esp, 8
.text:00001B3C                 mov     edx, [ebp+arg_0]
.text:00001B3F                 mov     [edx+115Ch], eax
.text:00001B45                 push    3Eh ; '>'
.text:00001B47                 mov     eax, [ebp+arg_0]
.text:00001B4A                 mov     ecx, [eax+1094h]
.text:00001B50                 push    ecx
.text:00001B51                 call    _conf_get_int
.text:00001B56                 add     esp, 8
.text:00001B59                 mov     edx, [ebp+arg_0]
.text:00001B5C                 mov     [edx+1160h], eax
.text:00001B62                 push    56h ; 'V'
.text:00001B64                 mov     eax, [ebp+arg_0]
.text:00001B67                 mov     ecx, [eax+1094h]
.text:00001B6D                 push    ecx
.text:00001B6E                 call    _conf_get_int
.text:00001B73                 add     esp, 8
.text:00001B76                 mov     edx, [ebp+arg_0]
.text:00001B79                 mov     [edx+1164h], eax
.text:00001B7F                 push    55h ; 'U'
.text:00001B81                 mov     eax, [ebp+arg_0]
.text:00001B84                 mov     ecx, [eax+1094h]
.text:00001B8A                 push    ecx
.text:00001B8B                 call    _conf_get_int
.text:00001B90                 add     esp, 8
.text:00001B93                 mov     edx, [ebp+arg_0]
.text:00001B96                 mov     [edx+1168h], eax
.text:00001B9C                 push    80h ; 'Ç'
.text:00001BA1                 mov     eax, [ebp+arg_0]
.text:00001BA4                 mov     ecx, [eax+1094h]
.text:00001BAA                 push    ecx
.text:00001BAB                 call    _conf_get_int
.text:00001BB0                 add     esp, 8
.text:00001BB3                 mov     edx, [ebp+arg_0]
.text:00001BB6                 mov     [edx+116Ch], eax
.text:00001BBC                 push    7Bh ; '{'
.text:00001BBE                 mov     eax, [ebp+arg_0]
.text:00001BC1                 mov     ecx, [eax+1094h]
.text:00001BC7                 push    ecx
.text:00001BC8                 call    _conf_get_str
.text:00001BCD                 add     esp, 8
.text:00001BD0                 mov     [ebp+Str], eax
.text:00001BD3                 mov     edx, [ebp+Str]
.text:00001BD6                 push    edx             ; Str
.text:00001BD7                 call    _strlen
.text:00001BDC                 add     esp, 4
.text:00001BDF                 mov     [ebp+var_8], eax
.text:00001BE2                 push    1
.text:00001BE4                 mov     eax, [ebp+var_8]
.text:00001BE7                 push    eax
.text:00001BE8                 call    _safemalloc
.text:00001BED                 add     esp, 8
.text:00001BF0                 mov     ecx, [ebp+arg_0]
.text:00001BF3                 mov     [ecx+10D8h], eax
.text:00001BF9                 mov     edx, [ebp+arg_0]
.text:00001BFC                 mov     dword ptr [edx+10DCh], 0
.text:00001C06
.text:00001C06 loc_1C06:                               ; CODE XREF: _term_copy_stuff_from_conf:loc_1C9Aj
.text:00001C06                 mov     eax, [ebp+Str]
.text:00001C09                 movsx   ecx, byte ptr [eax]
.text:00001C0C                 test    ecx, ecx
.text:00001C0E                 jz      loc_1C9F
.text:00001C14                 lea     edx, [ebp+var_10]
.text:00001C17                 push    edx
.text:00001C18                 mov     eax, [ebp+Str]
.text:00001C1B                 push    eax
.text:00001C1C                 call    _ctrlparse
.text:00001C21                 add     esp, 8
.text:00001C24                 mov     byte ptr [ebp+var_18+3], al
.text:00001C27                 cmp     [ebp+var_10], 0
.text:00001C2B                 jz      short loc_1C62
.text:00001C2D                 mov     ecx, [ebp+arg_0]
.text:00001C30                 mov     edx, [ecx+10D8h]
.text:00001C36                 mov     eax, [ebp+arg_0]
.text:00001C39                 mov     ecx, [eax+10DCh]
.text:00001C3F                 mov     al, byte ptr [ebp+var_18+3]
.text:00001C42                 mov     [edx+ecx], al
.text:00001C45                 mov     ecx, [ebp+arg_0]
.text:00001C48                 mov     edx, [ecx+10DCh]
.text:00001C4E                 add     edx, 1
.text:00001C51                 mov     eax, [ebp+arg_0]
.text:00001C54                 mov     [eax+10DCh], edx
.text:00001C5A                 mov     ecx, [ebp+var_10]
.text:00001C5D                 mov     [ebp+Str], ecx
.text:00001C60                 jmp     short loc_1C9A
.text:00001C62 ; ---------------------------------------------------------------------------
.text:00001C62
.text:00001C62 loc_1C62:                               ; CODE XREF: _term_copy_stuff_from_conf+4CFj
.text:00001C62                 mov     edx, [ebp+arg_0]
.text:00001C65                 mov     eax, [edx+10D8h]
.text:00001C6B                 mov     ecx, [ebp+arg_0]
.text:00001C6E                 mov     edx, [ecx+10DCh]
.text:00001C74                 mov     ecx, [ebp+Str]
.text:00001C77                 mov     cl, [ecx]
.text:00001C79                 mov     [eax+edx], cl
.text:00001C7C                 mov     edx, [ebp+arg_0]
.text:00001C7F                 mov     eax, [edx+10DCh]
.text:00001C85                 add     eax, 1
.text:00001C88                 mov     ecx, [ebp+arg_0]
.text:00001C8B                 mov     [ecx+10DCh], eax
.text:00001C91                 mov     edx, [ebp+Str]
.text:00001C94                 add     edx, 1
.text:00001C97                 mov     [ebp+Str], edx
.text:00001C9A
.text:00001C9A loc_1C9A:                               ; CODE XREF: _term_copy_stuff_from_conf+504j
.text:00001C9A                 jmp     loc_1C06
.text:00001C9F ; ---------------------------------------------------------------------------
.text:00001C9F
.text:00001C9F loc_1C9F:                               ; CODE XREF: _term_copy_stuff_from_conf+4B2j
.text:00001C9F                 push    edx
.text:00001CA0                 mov     ecx, ebp
.text:00001CA2                 push    eax
.text:00001CA3                 lea     edx, $LN9
.text:00001CA9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001CAE                 pop     eax
.text:00001CAF                 pop     edx
.text:00001CB0                 add     esp, 18h
.text:00001CB3                 cmp     ebp, esp
.text:00001CB5                 call    __RTC_CheckEsp
.text:00001CBA                 mov     esp, ebp
.text:00001CBC                 pop     ebp
.text:00001CBD                 retn
.text:00001CBD _term_copy_stuff_from_conf endp
.text:00001CBD
.text:00001CBD ; ---------------------------------------------------------------------------
.text:00001CBE                 align 10h
.text:00001CC0 $LN9            dd 1                    ; DATA XREF: _term_copy_stuff_from_conf+547o
.text:00001CC4                 dd offset $LN8
.text:00001CC8 $LN8            dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00001CC4o
.text:00001CD0                 dd offset $LN7
.text:00001CD4 $LN7            dd 0CCCC006Eh, 0CCCCCCCCh ; DATA XREF: .text:00001CD0o
.text:00001CDC
.text:00001CDC ; =============== S U B R O U T I N E =======================================
.text:00001CDC
.text:00001CDC ; Attributes: bp-based frame
.text:00001CDC
.text:00001CDC                 public _term_reconfig
.text:00001CDC _term_reconfig  proc near
.text:00001CDC
.text:00001CDC var_20          = dword ptr -20h
.text:00001CDC var_1C          = dword ptr -1Ch
.text:00001CDC var_18          = dword ptr -18h
.text:00001CDC var_14          = dword ptr -14h
.text:00001CDC var_10          = dword ptr -10h
.text:00001CDC var_C           = dword ptr -0Ch
.text:00001CDC var_8           = dword ptr -8
.text:00001CDC var_4           = dword ptr -4
.text:00001CDC arg_0           = dword ptr  8
.text:00001CDC arg_4           = dword ptr  0Ch
.text:00001CDC
.text:00001CDC                 push    ebp
.text:00001CDD                 mov     ebp, esp
.text:00001CDF                 sub     esp, 20h
.text:00001CE2                 push    esi
.text:00001CE3                 mov     eax, 0CCCCCCCCh
.text:00001CE8                 mov     [ebp+var_20], eax
.text:00001CEB                 mov     [ebp+var_1C], eax
.text:00001CEE                 mov     [ebp+var_18], eax
.text:00001CF1                 mov     [ebp+var_14], eax
.text:00001CF4                 mov     [ebp+var_10], eax
.text:00001CF7                 mov     [ebp+var_C], eax
.text:00001CFA                 mov     [ebp+var_8], eax
.text:00001CFD                 mov     [ebp+var_4], eax
.text:00001D00                 push    5Dh ; ']'
.text:00001D02                 mov     eax, [ebp+arg_0]
.text:00001D05                 mov     ecx, [eax+1094h]
.text:00001D0B                 push    ecx
.text:00001D0C                 call    _conf_get_int
.text:00001D11                 add     esp, 8
.text:00001D14                 mov     esi, eax
.text:00001D16                 push    5Dh ; ']'
.text:00001D18                 mov     edx, [ebp+arg_4]
.text:00001D1B                 push    edx
.text:00001D1C                 call    _conf_get_int
.text:00001D21                 add     esp, 8
.text:00001D24                 xor     ecx, ecx
.text:00001D26                 cmp     esi, eax
.text:00001D28                 setnz   cl
.text:00001D2B                 mov     [ebp+var_4], ecx
.text:00001D2E                 push    5Ch ; '\'
.text:00001D30                 mov     edx, [ebp+arg_0]
.text:00001D33                 mov     eax, [edx+1094h]
.text:00001D39                 push    eax
.text:00001D3A                 call    _conf_get_int
.text:00001D3F                 add     esp, 8
.text:00001D42                 mov     esi, eax
.text:00001D44                 push    5Ch ; '\'
.text:00001D46                 mov     ecx, [ebp+arg_4]
.text:00001D49                 push    ecx
.text:00001D4A                 call    _conf_get_int
.text:00001D4F                 add     esp, 8
.text:00001D52                 xor     edx, edx
.text:00001D54                 cmp     esi, eax
.text:00001D56                 setnz   dl
.text:00001D59                 mov     [ebp+var_8], edx
.text:00001D5C                 push    6Bh ; 'k'
.text:00001D5E                 mov     eax, [ebp+arg_0]
.text:00001D61                 mov     ecx, [eax+1094h]
.text:00001D67                 push    ecx
.text:00001D68                 call    _conf_get_int
.text:00001D6D                 add     esp, 8
.text:00001D70                 mov     esi, eax
.text:00001D72                 push    6Bh ; 'k'
.text:00001D74                 mov     edx, [ebp+arg_4]
.text:00001D77                 push    edx
.text:00001D78                 call    _conf_get_int
.text:00001D7D                 add     esp, 8
.text:00001D80                 xor     ecx, ecx
.text:00001D82                 cmp     esi, eax
.text:00001D84                 setnz   cl
.text:00001D87                 mov     [ebp+var_C], ecx
.text:00001D8A                 push    6Ch ; 'l'
.text:00001D8C                 mov     edx, [ebp+arg_0]
.text:00001D8F                 mov     eax, [edx+1094h]
.text:00001D95                 push    eax
.text:00001D96                 call    _conf_get_int
.text:00001D9B                 add     esp, 8
.text:00001D9E                 mov     esi, eax
.text:00001DA0                 push    6Ch ; 'l'
.text:00001DA2                 mov     ecx, [ebp+arg_4]
.text:00001DA5                 push    ecx
.text:00001DA6                 call    _conf_get_int
.text:00001DAB                 add     esp, 8
.text:00001DAE                 xor     edx, edx
.text:00001DB0                 cmp     esi, eax
.text:00001DB2                 setnz   dl
.text:00001DB5                 mov     [ebp+var_10], edx
.text:00001DB8                 mov     [ebp+var_14], 0
.text:00001DBF                 mov     [ebp+var_18], 0
.text:00001DC6                 jmp     short loc_1DD1
.text:00001DC8 ; ---------------------------------------------------------------------------
.text:00001DC8
.text:00001DC8 loc_1DC8:                               ; CODE XREF: _term_reconfig:loc_1E17j
.text:00001DC8                 mov     eax, [ebp+var_18]
.text:00001DCB                 add     eax, 1
.text:00001DCE                 mov     [ebp+var_18], eax
.text:00001DD1
.text:00001DD1 loc_1DD1:                               ; CODE XREF: _term_reconfig+EAj
.text:00001DD1                 cmp     [ebp+var_18], 100h
.text:00001DD8                 jge     short loc_1E19
.text:00001DDA                 mov     ecx, [ebp+var_18]
.text:00001DDD                 push    ecx
.text:00001DDE                 push    8Ah ; 'è'
.text:00001DE3                 mov     edx, [ebp+arg_0]
.text:00001DE6                 mov     eax, [edx+1094h]
.text:00001DEC                 push    eax
.text:00001DED                 call    _conf_get_int_int
.text:00001DF2                 add     esp, 0Ch
.text:00001DF5                 mov     esi, eax
.text:00001DF7                 mov     ecx, [ebp+var_18]
.text:00001DFA                 push    ecx
.text:00001DFB                 push    8Ah ; 'è'
.text:00001E00                 mov     edx, [ebp+arg_4]
.text:00001E03                 push    edx
.text:00001E04                 call    _conf_get_int_int
.text:00001E09                 add     esp, 0Ch
.text:00001E0C                 cmp     esi, eax
.text:00001E0E                 jz      short loc_1E17
.text:00001E10                 mov     [ebp+var_14], 1
.text:00001E17
.text:00001E17 loc_1E17:                               ; CODE XREF: _term_reconfig+132j
.text:00001E17                 jmp     short loc_1DC8
.text:00001E19 ; ---------------------------------------------------------------------------
.text:00001E19
.text:00001E19 loc_1E19:                               ; CODE XREF: _term_reconfig+FCj
.text:00001E19                 push    7Dh ; '}'
.text:00001E1B                 mov     eax, [ebp+arg_0]
.text:00001E1E                 mov     ecx, [eax+1094h]
.text:00001E24                 push    ecx
.text:00001E25                 call    _conf_get_int
.text:00001E2A                 add     esp, 8
.text:00001E2D                 mov     esi, eax
.text:00001E2F                 push    7Dh ; '}'
.text:00001E31                 mov     edx, [ebp+arg_4]
.text:00001E34                 push    edx
.text:00001E35                 call    _conf_get_int
.text:00001E3A                 add     esp, 8
.text:00001E3D                 cmp     esi, eax
.text:00001E3F                 jnz     short loc_1E6D
.text:00001E41                 push    7Eh ; '~'
.text:00001E43                 mov     eax, [ebp+arg_0]
.text:00001E46                 mov     ecx, [eax+1094h]
.text:00001E4C                 push    ecx
.text:00001E4D                 call    _conf_get_int
.text:00001E52                 add     esp, 8
.text:00001E55                 mov     esi, eax
.text:00001E57                 push    7Eh ; '~'
.text:00001E59                 mov     edx, [ebp+arg_4]
.text:00001E5C                 push    edx
.text:00001E5D                 call    _conf_get_int
.text:00001E62                 add     esp, 8
.text:00001E65                 cmp     esi, eax
.text:00001E67                 jz      loc_1F28
.text:00001E6D
.text:00001E6D loc_1E6D:                               ; CODE XREF: _term_reconfig+163j
.text:00001E6D                 mov     [ebp+var_18], 0
.text:00001E74                 jmp     short loc_1E7F
.text:00001E76 ; ---------------------------------------------------------------------------
.text:00001E76
.text:00001E76 loc_1E76:                               ; CODE XREF: _term_reconfig+247j
.text:00001E76                 mov     eax, [ebp+var_18]
.text:00001E79                 add     eax, 1
.text:00001E7C                 mov     [ebp+var_18], eax
.text:00001E7F
.text:00001E7F loc_1E7F:                               ; CODE XREF: _term_reconfig+198j
.text:00001E7F                 mov     ecx, [ebp+arg_0]
.text:00001E82                 mov     edx, [ebp+var_18]
.text:00001E85                 cmp     edx, [ecx+10D0h]
.text:00001E8B                 jge     loc_1F28
.text:00001E91                 mov     eax, [ebp+var_18]
.text:00001E94                 shl     eax, 4
.text:00001E97                 mov     ecx, [ebp+arg_0]
.text:00001E9A                 mov     edx, [ecx+10C8h]
.text:00001EA0                 mov     eax, [edx+eax+4]
.text:00001EA4                 push    eax
.text:00001EA5                 call    _safefree
.text:00001EAA                 add     esp, 4
.text:00001EAD                 mov     ecx, [ebp+var_18]
.text:00001EB0                 shl     ecx, 4
.text:00001EB3                 mov     edx, [ebp+arg_0]
.text:00001EB6                 mov     eax, [edx+10CCh]
.text:00001EBC                 mov     ecx, [eax+ecx+4]
.text:00001EC0                 push    ecx
.text:00001EC1                 call    _safefree
.text:00001EC6                 add     esp, 4
.text:00001EC9                 mov     edx, [ebp+var_18]
.text:00001ECC                 shl     edx, 4
.text:00001ECF                 mov     eax, [ebp+arg_0]
.text:00001ED2                 mov     ecx, [eax+10C8h]
.text:00001ED8                 mov     dword ptr [edx+ecx], 0FFFFFFFFh
.text:00001EDF                 mov     edx, [ebp+var_18]
.text:00001EE2                 shl     edx, 4
.text:00001EE5                 mov     eax, [ebp+arg_0]
.text:00001EE8                 mov     ecx, [eax+10C8h]
.text:00001EEE                 mov     dword ptr [ecx+edx+4], 0
.text:00001EF6                 mov     edx, [ebp+var_18]
.text:00001EF9                 shl     edx, 4
.text:00001EFC                 mov     eax, [ebp+arg_0]
.text:00001EFF                 mov     ecx, [eax+10CCh]
.text:00001F05                 mov     dword ptr [edx+ecx], 0FFFFFFFFh
.text:00001F0C                 mov     edx, [ebp+var_18]
.text:00001F0F                 shl     edx, 4
.text:00001F12                 mov     eax, [ebp+arg_0]
.text:00001F15                 mov     ecx, [eax+10CCh]
.text:00001F1B                 mov     dword ptr [ecx+edx+4], 0
.text:00001F23                 jmp     loc_1E76
.text:00001F28 ; ---------------------------------------------------------------------------
.text:00001F28
.text:00001F28 loc_1F28:                               ; CODE XREF: _term_reconfig+18Bj
.text:00001F28                                         ; _term_reconfig+1AFj
.text:00001F28                 mov     edx, [ebp+arg_0]
.text:00001F2B                 mov     eax, [edx+1094h]
.text:00001F31                 push    eax
.text:00001F32                 call    _conf_free
.text:00001F37                 add     esp, 4
.text:00001F3A                 mov     ecx, [ebp+arg_4]
.text:00001F3D                 push    ecx
.text:00001F3E                 call    _conf_copy
.text:00001F43                 add     esp, 4
.text:00001F46                 mov     edx, [ebp+arg_0]
.text:00001F49                 mov     [edx+1094h], eax
.text:00001F4F                 cmp     [ebp+var_4], 0
.text:00001F53                 jz      short loc_1F84
.text:00001F55                 push    5Dh ; ']'
.text:00001F57                 mov     eax, [ebp+arg_0]
.text:00001F5A                 mov     ecx, [eax+1094h]
.text:00001F60                 push    ecx
.text:00001F61                 call    _conf_get_int
.text:00001F66                 add     esp, 8
.text:00001F69                 mov     [ebp+var_1C], eax
.text:00001F6C                 mov     edx, [ebp+arg_0]
.text:00001F6F                 mov     eax, [ebp+var_1C]
.text:00001F72                 mov     [edx+88h], eax
.text:00001F78                 mov     ecx, [ebp+arg_0]
.text:00001F7B                 mov     edx, [ebp+var_1C]
.text:00001F7E                 mov     [ecx+184h], edx
.text:00001F84
.text:00001F84 loc_1F84:                               ; CODE XREF: _term_reconfig+277j
.text:00001F84                 cmp     [ebp+var_8], 0
.text:00001F88                 jz      short loc_1FB9
.text:00001F8A                 push    5Ch ; '\'
.text:00001F8C                 mov     eax, [ebp+arg_0]
.text:00001F8F                 mov     ecx, [eax+1094h]
.text:00001F95                 push    ecx
.text:00001F96                 call    _conf_get_int
.text:00001F9B                 add     esp, 8
.text:00001F9E                 mov     [ebp+var_20], eax
.text:00001FA1                 mov     edx, [ebp+arg_0]
.text:00001FA4                 mov     eax, [ebp+var_20]
.text:00001FA7                 mov     [edx+84h], eax
.text:00001FAD                 mov     ecx, [ebp+arg_0]
.text:00001FB0                 mov     edx, [ebp+var_20]
.text:00001FB3                 mov     [ecx+180h], edx
.text:00001FB9
.text:00001FB9 loc_1FB9:                               ; CODE XREF: _term_reconfig+2ACj
.text:00001FB9                 cmp     [ebp+var_C], 0
.text:00001FBD                 jz      short loc_1FE8
.text:00001FBF                 push    6Bh ; 'k'
.text:00001FC1                 mov     eax, [ebp+arg_0]
.text:00001FC4                 mov     ecx, [eax+1094h]
.text:00001FCA                 push    ecx
.text:00001FCB                 call    _conf_get_int
.text:00001FD0                 add     esp, 8
.text:00001FD3                 mov     edx, [ebp+arg_0]
.text:00001FD6                 mov     [edx+0B8h], eax
.text:00001FDC                 mov     eax, [ebp+arg_0]
.text:00001FDF                 push    eax
.text:00001FE0                 call    _set_erase_char
.text:00001FE5                 add     esp, 4
.text:00001FE8
.text:00001FE8 loc_1FE8:                               ; CODE XREF: _term_reconfig+2E1j
.text:00001FE8                 cmp     [ebp+var_10], 0
.text:00001FEC                 jz      short loc_200B
.text:00001FEE                 push    6Ch ; 'l'
.text:00001FF0                 mov     ecx, [ebp+arg_0]
.text:00001FF3                 mov     edx, [ecx+1094h]
.text:00001FF9                 push    edx
.text:00001FFA                 call    _conf_get_int
.text:00001FFF                 add     esp, 8
.text:00002002                 mov     ecx, [ebp+arg_0]
.text:00002005                 mov     [ecx+0C4h], eax
.text:0000200B
.text:0000200B loc_200B:                               ; CODE XREF: _term_reconfig+310j
.text:0000200B                 cmp     [ebp+var_14], 0
.text:0000200F                 jz      short loc_2057
.text:00002011                 mov     [ebp+var_18], 0
.text:00002018                 jmp     short loc_2023
.text:0000201A ; ---------------------------------------------------------------------------
.text:0000201A
.text:0000201A loc_201A:                               ; CODE XREF: _term_reconfig+379j
.text:0000201A                 mov     edx, [ebp+var_18]
.text:0000201D                 add     edx, 1
.text:00002020                 mov     [ebp+var_18], edx
.text:00002023
.text:00002023 loc_2023:                               ; CODE XREF: _term_reconfig+33Cj
.text:00002023                 cmp     [ebp+var_18], 100h
.text:0000202A                 jge     short loc_2057
.text:0000202C                 mov     eax, [ebp+var_18]
.text:0000202F                 push    eax
.text:00002030                 push    8Ah ; 'è'
.text:00002035                 mov     ecx, [ebp+arg_0]
.text:00002038                 mov     edx, [ecx+1094h]
.text:0000203E                 push    edx
.text:0000203F                 call    _conf_get_int_int
.text:00002044                 add     esp, 0Ch
.text:00002047                 mov     ecx, [ebp+var_18]
.text:0000204A                 mov     edx, [ebp+arg_0]
.text:0000204D                 mov     [edx+ecx*2+0E6Ch], ax
.text:00002055                 jmp     short loc_201A
.text:00002057 ; ---------------------------------------------------------------------------
.text:00002057
.text:00002057 loc_2057:                               ; CODE XREF: _term_reconfig+333j
.text:00002057                                         ; _term_reconfig+34Ej
.text:00002057                 push    44h ; 'D'
.text:00002059                 mov     eax, [ebp+arg_0]
.text:0000205C                 mov     ecx, [eax+1094h]
.text:00002062                 push    ecx
.text:00002063                 call    _conf_get_int
.text:00002068                 add     esp, 8
.text:0000206B                 test    eax, eax
.text:0000206D                 jz      short loc_2081
.text:0000206F                 push    0
.text:00002071                 push    0
.text:00002073                 push    0
.text:00002075                 mov     edx, [ebp+arg_0]
.text:00002078                 push    edx
.text:00002079                 call    _swap_screen
.text:0000207E                 add     esp, 10h
.text:00002081
.text:00002081 loc_2081:                               ; CODE XREF: _term_reconfig+391j
.text:00002081                 push    42h ; 'B'
.text:00002083                 mov     eax, [ebp+arg_0]
.text:00002086                 mov     ecx, [eax+1094h]
.text:0000208C                 push    ecx
.text:0000208D                 call    _conf_get_int
.text:00002092                 add     esp, 8
.text:00002095                 test    eax, eax
.text:00002097                 jz      short loc_20BA
.text:00002099                 mov     edx, [ebp+arg_0]
.text:0000209C                 mov     dword ptr [edx+15Ch], 0
.text:000020A6                 push    0
.text:000020A8                 mov     eax, [ebp+arg_0]
.text:000020AB                 mov     ecx, [eax+1088h]
.text:000020B1                 push    ecx
.text:000020B2                 call    _set_raw_mouse_mode
.text:000020B7                 add     esp, 8
.text:000020BA
.text:000020BA loc_20BA:                               ; CODE XREF: _term_reconfig+3BBj
.text:000020BA                 push    47h ; 'G'
.text:000020BC                 mov     edx, [ebp+arg_0]
.text:000020BF                 mov     eax, [edx+1094h]
.text:000020C5                 push    eax
.text:000020C6                 call    _conf_get_int
.text:000020CB                 add     esp, 8
.text:000020CE                 test    eax, eax
.text:000020D0                 jz      short loc_2113
.text:000020D2                 mov     ecx, [ebp+arg_0]
.text:000020D5                 mov     dword ptr [ecx+174h], 0D800h
.text:000020DF                 mov     edx, [ebp+arg_0]
.text:000020E2                 mov     dword ptr [edx+170h], 0D800h
.text:000020EC                 mov     eax, [ebp+arg_0]
.text:000020EF                 mov     dword ptr [eax+194h], 0
.text:000020F9                 mov     ecx, [ebp+arg_0]
.text:000020FC                 mov     dword ptr [ecx+0D0h], 0
.text:00002106                 mov     edx, [ebp+arg_0]
.text:00002109                 mov     dword ptr [edx+0DCh], 0
.text:00002113
.text:00002113 loc_2113:                               ; CODE XREF: _term_reconfig+3F4j
.text:00002113                 push    7Ch ; '|'
.text:00002115                 mov     eax, [ebp+arg_0]
.text:00002118                 mov     ecx, [eax+1094h]
.text:0000211E                 push    ecx
.text:0000211F                 call    _conf_get_str
.text:00002124                 add     esp, 8
.text:00002127                 test    eax, eax
.text:00002129                 jnz     short loc_2137
.text:0000212B                 mov     edx, [ebp+arg_0]
.text:0000212E                 push    edx
.text:0000212F                 call    _term_print_finish
.text:00002134                 add     esp, 4
.text:00002137
.text:00002137 loc_2137:                               ; CODE XREF: _term_reconfig+44Dj
.text:00002137                 mov     eax, [ebp+arg_0]
.text:0000213A                 push    eax
.text:0000213B                 call    _term_schedule_tblink
.text:00002140                 add     esp, 4
.text:00002143                 mov     ecx, [ebp+arg_0]
.text:00002146                 push    ecx
.text:00002147                 call    _term_schedule_cblink
.text:0000214C                 add     esp, 4
.text:0000214F                 mov     edx, [ebp+arg_0]
.text:00002152                 push    edx
.text:00002153                 call    _term_copy_stuff_from_conf
.text:00002158                 add     esp, 4
.text:0000215B                 pop     esi
.text:0000215C                 add     esp, 20h
.text:0000215F                 cmp     ebp, esp
.text:00002161                 call    __RTC_CheckEsp
.text:00002166                 mov     esp, ebp
.text:00002168                 pop     ebp
.text:00002169                 retn
.text:00002169 _term_reconfig  endp
.text:00002169
.text:00002169 ; ---------------------------------------------------------------------------
.text:0000216A                 align 4
.text:0000216C
.text:0000216C ; =============== S U B R O U T I N E =======================================
.text:0000216C
.text:0000216C ; Attributes: bp-based frame
.text:0000216C
.text:0000216C _set_erase_char proc near               ; CODE XREF: _term_reconfig+304p
.text:0000216C                                         ; _term_out+3517p ...
.text:0000216C
.text:0000216C arg_0           = dword ptr  8
.text:0000216C
.text:0000216C                 push    ebp
.text:0000216D                 mov     ebp, esp
.text:0000216F                 mov     eax, [ebp+arg_0]
.text:00002172                 add     eax, 48h ; 'H'
.text:00002175                 mov     ecx, [ebp+arg_0]
.text:00002178                 add     ecx, 54h ; 'T'
.text:0000217B                 mov     edx, [eax]
.text:0000217D                 mov     [ecx], edx
.text:0000217F                 mov     edx, [eax+4]
.text:00002182                 mov     [ecx+4], edx
.text:00002185                 mov     eax, [eax+8]
.text:00002188                 mov     [ecx+8], eax
.text:0000218B                 mov     ecx, [ebp+arg_0]
.text:0000218E                 cmp     dword ptr [ecx+0B8h], 0
.text:00002195                 jz      short loc_21A8
.text:00002197                 mov     edx, [ebp+arg_0]
.text:0000219A                 mov     eax, [edx+40h]
.text:0000219D                 and     eax, 3FFFFh
.text:000021A2                 mov     ecx, [ebp+arg_0]
.text:000021A5                 mov     [ecx+58h], eax
.text:000021A8
.text:000021A8 loc_21A8:                               ; CODE XREF: _set_erase_char+29j
.text:000021A8                 pop     ebp
.text:000021A9                 retn
.text:000021A9 _set_erase_char endp
.text:000021A9
.text:000021A9 ; ---------------------------------------------------------------------------
.text:000021AA                 align 4
.text:000021AC
.text:000021AC ; =============== S U B R O U T I N E =======================================
.text:000021AC
.text:000021AC ; Attributes: bp-based frame
.text:000021AC
.text:000021AC                 public _term_clrsb
.text:000021AC _term_clrsb     proc near               ; CODE XREF: _term_out+2802p
.text:000021AC
.text:000021AC var_8           = dword ptr -8
.text:000021AC var_4           = dword ptr -4
.text:000021AC arg_0           = dword ptr  8
.text:000021AC
.text:000021AC                 push    ebp
.text:000021AD                 mov     ebp, esp
.text:000021AF                 sub     esp, 8
.text:000021B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021C0                 mov     eax, [ebp+arg_0]
.text:000021C3                 mov     dword ptr [eax+10h], 0
.text:000021CA
.text:000021CA loc_21CA:                               ; CODE XREF: _term_clrsb+44j
.text:000021CA                 push    0
.text:000021CC                 mov     ecx, [ebp+arg_0]
.text:000021CF                 mov     edx, [ecx+4]
.text:000021D2                 push    edx
.text:000021D3                 call    _delpos234
.text:000021D8                 add     esp, 8
.text:000021DB                 mov     [ebp+var_4], eax
.text:000021DE                 cmp     [ebp+var_4], 0
.text:000021E2                 jz      short loc_21F2
.text:000021E4                 mov     eax, [ebp+var_4]
.text:000021E7                 push    eax
.text:000021E8                 call    _safefree
.text:000021ED                 add     esp, 4
.text:000021F0                 jmp     short loc_21CA
.text:000021F2 ; ---------------------------------------------------------------------------
.text:000021F2
.text:000021F2 loc_21F2:                               ; CODE XREF: _term_clrsb+36j
.text:000021F2                 mov     [ebp+var_8], 0
.text:000021F9                 jmp     short loc_2204
.text:000021FB ; ---------------------------------------------------------------------------
.text:000021FB
.text:000021FB loc_21FB:                               ; CODE XREF: _term_clrsb+8Aj
.text:000021FB                 mov     ecx, [ebp+var_8]
.text:000021FE                 add     ecx, 1
.text:00002201                 mov     [ebp+var_8], ecx
.text:00002204
.text:00002204 loc_2204:                               ; CODE XREF: _term_clrsb+4Dj
.text:00002204                 mov     edx, [ebp+arg_0]
.text:00002207                 mov     eax, [ebp+var_8]
.text:0000220A                 cmp     eax, [edx+128h]
.text:00002210                 jge     short loc_2238
.text:00002212                 push    1
.text:00002214                 push    613h
.text:00002219                 mov     ecx, [ebp+var_8]
.text:0000221C                 push    ecx
.text:0000221D                 mov     edx, [ebp+arg_0]
.text:00002220                 push    edx
.text:00002221                 call    _lineptr
.text:00002226                 add     esp, 10h
.text:00002229                 push    eax
.text:0000222A                 mov     eax, [ebp+arg_0]
.text:0000222D                 push    eax
.text:0000222E                 call    _check_line_size
.text:00002233                 add     esp, 8
.text:00002236                 jmp     short loc_21FB
.text:00002238 ; ---------------------------------------------------------------------------
.text:00002238
.text:00002238 loc_2238:                               ; CODE XREF: _term_clrsb+64j
.text:00002238                 mov     ecx, [ebp+arg_0]
.text:0000223B                 mov     dword ptr [ecx+14h], 0
.text:00002242                 mov     edx, [ebp+arg_0]
.text:00002245                 mov     dword ptr [edx+1A8h], 0
.text:0000224F                 mov     eax, [ebp+arg_0]
.text:00002252                 push    eax
.text:00002253                 call    _update_sbar
.text:00002258                 add     esp, 4
.text:0000225B                 add     esp, 8
.text:0000225E                 cmp     ebp, esp
.text:00002260                 call    __RTC_CheckEsp
.text:00002265                 mov     esp, ebp
.text:00002267                 pop     ebp
.text:00002268                 retn
.text:00002268 _term_clrsb     endp
.text:00002268
.text:00002268 ; ---------------------------------------------------------------------------
.text:00002269                 align 4
.text:0000226C
.text:0000226C ; =============== S U B R O U T I N E =======================================
.text:0000226C
.text:0000226C ; Attributes: bp-based frame
.text:0000226C
.text:0000226C _lineptr        proc near               ; CODE XREF: _term_clrsb+75p
.text:0000226C                                         ; _erase_lots+1D3p ...
.text:0000226C
.text:0000226C var_14          = dword ptr -14h
.text:0000226C var_10          = dword ptr -10h
.text:0000226C var_C           = dword ptr -0Ch
.text:0000226C var_8           = dword ptr -8
.text:0000226C var_4           = dword ptr -4
.text:0000226C arg_0           = dword ptr  8
.text:0000226C arg_4           = dword ptr  0Ch
.text:0000226C arg_8           = dword ptr  10h
.text:0000226C arg_C           = dword ptr  14h
.text:0000226C
.text:0000226C                 push    ebp
.text:0000226D                 mov     ebp, esp
.text:0000226F                 sub     esp, 14h
.text:00002272                 push    esi
.text:00002273                 mov     eax, 0CCCCCCCCh
.text:00002278                 mov     [ebp+var_14], eax
.text:0000227B                 mov     [ebp+var_10], eax
.text:0000227E                 mov     [ebp+var_C], eax
.text:00002281                 mov     [ebp+var_8], eax
.text:00002284                 mov     [ebp+var_4], eax
.text:00002287                 cmp     [ebp+arg_4], 0
.text:0000228B                 jl      short loc_22A1
.text:0000228D                 mov     eax, [ebp+arg_0]
.text:00002290                 mov     ecx, [eax+8]
.text:00002293                 mov     [ebp+var_8], ecx
.text:00002296                 mov     edx, [ebp+arg_4]
.text:00002299                 mov     [ebp+var_C], edx
.text:0000229C                 jmp     loc_2339
.text:000022A1 ; ---------------------------------------------------------------------------
.text:000022A1
.text:000022A1 loc_22A1:                               ; CODE XREF: _lineptr+1Fj
.text:000022A1                 mov     [ebp+var_10], 0
.text:000022A8                 cmp     [ebp+arg_C], 0
.text:000022AC                 jz      short loc_22C5
.text:000022AE                 push    3F9h            ; Line
.text:000022B3                 push    offset $SG86283 ; "..\\..\\..\\terminal.c"
.text:000022B8                 push    offset $SG86284 ; "!screen"
.text:000022BD                 call    __wassert
.text:000022C2 ; ---------------------------------------------------------------------------
.text:000022C2                 add     esp, 0Ch
.text:000022C5
.text:000022C5 loc_22C5:                               ; CODE XREF: _lineptr+40j
.text:000022C5                 mov     ecx, [ebp+arg_0]
.text:000022C8                 cmp     dword ptr [ecx+1118h], 0
.text:000022CF                 jz      short loc_22F2
.text:000022D1                 mov     edx, [ebp+arg_0]
.text:000022D4                 cmp     dword ptr [edx+1A4h], 0
.text:000022DB                 jz      short loc_22F2
.text:000022DD                 mov     eax, [ebp+arg_0]
.text:000022E0                 cmp     dword ptr [eax+0Ch], 0
.text:000022E4                 jz      short loc_22F2
.text:000022E6                 mov     ecx, [ebp+arg_0]
.text:000022E9                 mov     edx, [ecx+1A8h]
.text:000022EF                 mov     [ebp+var_10], edx
.text:000022F2
.text:000022F2 loc_22F2:                               ; CODE XREF: _lineptr+63j
.text:000022F2                                         ; _lineptr+6Fj ...
.text:000022F2                 mov     eax, [ebp+var_10]
.text:000022F5                 neg     eax
.text:000022F7                 cmp     [ebp+arg_4], eax
.text:000022FA                 jge     short loc_2321
.text:000022FC                 mov     ecx, [ebp+arg_0]
.text:000022FF                 mov     edx, [ecx+4]
.text:00002302                 mov     [ebp+var_8], edx
.text:00002305                 mov     esi, [ebp+arg_4]
.text:00002308                 add     esi, [ebp+var_10]
.text:0000230B                 mov     eax, [ebp+arg_0]
.text:0000230E                 mov     ecx, [eax+4]
.text:00002311                 push    ecx
.text:00002312                 call    _count234
.text:00002317                 add     esp, 4
.text:0000231A                 add     esi, eax
.text:0000231C                 mov     [ebp+var_C], esi
.text:0000231F                 jmp     short loc_2339
.text:00002321 ; ---------------------------------------------------------------------------
.text:00002321
.text:00002321 loc_2321:                               ; CODE XREF: _lineptr+8Ej
.text:00002321                 mov     edx, [ebp+arg_0]
.text:00002324                 mov     eax, [edx+0Ch]
.text:00002327                 mov     [ebp+var_8], eax
.text:0000232A                 mov     ecx, [ebp+arg_0]
.text:0000232D                 mov     edx, [ebp+arg_4]
.text:00002330                 add     edx, [ecx+1A8h]
.text:00002336                 mov     [ebp+var_C], edx
.text:00002339
.text:00002339 loc_2339:                               ; CODE XREF: _lineptr+30j
.text:00002339                                         ; _lineptr+B3j
.text:00002339                 mov     eax, [ebp+arg_0]
.text:0000233C                 mov     ecx, [ebp+var_8]
.text:0000233F                 cmp     ecx, [eax+4]
.text:00002342                 jnz     short loc_236A
.text:00002344                 mov     edx, [ebp+var_C]
.text:00002347                 push    edx
.text:00002348                 mov     eax, [ebp+var_8]
.text:0000234B                 push    eax
.text:0000234C                 call    _index234
.text:00002351                 add     esp, 8
.text:00002354                 mov     [ebp+var_14], eax
.text:00002357                 push    0
.text:00002359                 mov     ecx, [ebp+var_14]
.text:0000235C                 push    ecx
.text:0000235D                 call    _decompressline
.text:00002362                 add     esp, 8
.text:00002365                 mov     [ebp+var_4], eax
.text:00002368                 jmp     short loc_237D
.text:0000236A ; ---------------------------------------------------------------------------
.text:0000236A
.text:0000236A loc_236A:                               ; CODE XREF: _lineptr+D6j
.text:0000236A                 mov     edx, [ebp+var_C]
.text:0000236D                 push    edx
.text:0000236E                 mov     eax, [ebp+var_8]
.text:00002371                 push    eax
.text:00002372                 call    _index234
.text:00002377                 add     esp, 8
.text:0000237A                 mov     [ebp+var_4], eax
.text:0000237D
.text:0000237D loc_237D:                               ; CODE XREF: _lineptr+FCj
.text:0000237D                 cmp     [ebp+var_4], 0
.text:00002381                 jnz     loc_2407
.text:00002387                 mov     ecx, [ebp+var_C]
.text:0000238A                 push    ecx
.text:0000238B                 mov     edx, [ebp+var_8]
.text:0000238E                 push    edx
.text:0000238F                 mov     eax, [ebp+arg_0]
.text:00002392                 mov     ecx, [eax+1A8h]
.text:00002398                 push    ecx
.text:00002399                 mov     edx, [ebp+arg_0]
.text:0000239C                 mov     eax, [edx+0Ch]
.text:0000239F                 push    eax
.text:000023A0                 call    _count234
.text:000023A5                 add     esp, 4
.text:000023A8                 push    eax
.text:000023A9                 mov     ecx, [ebp+arg_0]
.text:000023AC                 mov     edx, [ecx+0Ch]
.text:000023AF                 push    edx
.text:000023B0                 mov     eax, [ebp+arg_0]
.text:000023B3                 mov     ecx, [eax+8]
.text:000023B6                 push    ecx
.text:000023B7                 call    _count234
.text:000023BC                 add     esp, 4
.text:000023BF                 push    eax
.text:000023C0                 mov     edx, [ebp+arg_0]
.text:000023C3                 mov     eax, [edx+8]
.text:000023C6                 push    eax
.text:000023C7                 mov     ecx, [ebp+arg_0]
.text:000023CA                 mov     edx, [ecx+4]
.text:000023CD                 push    edx
.text:000023CE                 call    _count234
.text:000023D3                 add     esp, 4
.text:000023D6                 push    eax
.text:000023D7                 mov     eax, [ebp+arg_0]
.text:000023DA                 mov     ecx, [eax+4]
.text:000023DD                 push    ecx
.text:000023DE                 mov     edx, [ebp+arg_0]
.text:000023E1                 mov     eax, [edx+128h]
.text:000023E7                 push    eax
.text:000023E8                 mov     ecx, [ebp+arg_0]
.text:000023EB                 mov     edx, [ecx+12Ch]
.text:000023F1                 push    edx
.text:000023F2                 mov     eax, [ebp+arg_4]
.text:000023F5                 push    eax
.text:000023F6                 mov     ecx, [ebp+arg_8]
.text:000023F9                 push    ecx
.text:000023FA                 push    offset $SG86294 ; "line==NULL in terminal.c\nlineno=%d y=%"...
.text:000023FF                 call    _fatalbox
.text:00002404                 add     esp, 38h
.text:00002407
.text:00002407 loc_2407:                               ; CODE XREF: _lineptr+115j
.text:00002407                 cmp     [ebp+var_4], 0
.text:0000240B                 jnz     short loc_2424
.text:0000240D                 push    41Fh            ; Line
.text:00002412                 push    offset $SG86297 ; "..\\..\\..\\terminal.c"
.text:00002417                 push    offset $SG86298 ; "line != NULL"
.text:0000241C                 call    __wassert
.text:00002421 ; ---------------------------------------------------------------------------
.text:00002421                 add     esp, 0Ch
.text:00002424
.text:00002424 loc_2424:                               ; CODE XREF: _lineptr+19Fj
.text:00002424                 mov     eax, [ebp+arg_0]
.text:00002427                 mov     ecx, [ebp+var_4]
.text:0000242A                 mov     edx, [eax+12Ch]
.text:00002430                 cmp     edx, [ecx+4]
.text:00002433                 jle     short loc_244F
.text:00002435                 mov     eax, [ebp+arg_0]
.text:00002438                 mov     ecx, [eax+12Ch]
.text:0000243E                 push    ecx
.text:0000243F                 mov     edx, [ebp+var_4]
.text:00002442                 push    edx
.text:00002443                 mov     eax, [ebp+arg_0]
.text:00002446                 push    eax
.text:00002447                 call    _resizeline
.text:0000244C                 add     esp, 0Ch
.text:0000244F
.text:0000244F loc_244F:                               ; CODE XREF: _lineptr+1C7j
.text:0000244F                 mov     eax, [ebp+var_4]
.text:00002452                 pop     esi
.text:00002453                 add     esp, 14h
.text:00002456                 cmp     ebp, esp
.text:00002458                 call    __RTC_CheckEsp
.text:0000245D                 mov     esp, ebp
.text:0000245F                 pop     ebp
.text:00002460                 retn
.text:00002460 _lineptr        endp
.text:00002460
.text:00002460 ; ---------------------------------------------------------------------------
.text:00002461                 db 0Bh dup(0CCh)
.text:0000246C
.text:0000246C ; =============== S U B R O U T I N E =======================================
.text:0000246C
.text:0000246C ; Attributes: bp-based frame
.text:0000246C
.text:0000246C _decompressline proc near               ; CODE XREF: _lineptr+F1p
.text:0000246C                                         ; _term_size+1BAp
.text:0000246C
.text:0000246C var_2C          = dword ptr -2Ch
.text:0000246C var_28          = dword ptr -28h
.text:0000246C var_24          = dword ptr -24h
.text:0000246C var_1C          = byte ptr -1Ch
.text:0000246C var_C           = dword ptr -0Ch
.text:0000246C var_8           = dword ptr -8
.text:0000246C var_4           = dword ptr -4
.text:0000246C arg_0           = dword ptr  8
.text:0000246C arg_4           = dword ptr  0Ch
.text:0000246C
.text:0000246C                 push    ebp
.text:0000246D                 mov     ebp, esp
.text:0000246F                 sub     esp, 2Ch
.text:00002472                 push    edi
.text:00002473                 lea     edi, [ebp+var_2C]
.text:00002476                 mov     ecx, 0Bh
.text:0000247B                 mov     eax, 0CCCCCCCCh
.text:00002480                 rep stosd
.text:00002482                 lea     eax, [ebp+var_1C]
.text:00002485                 mov     [ebp+var_24], eax
.text:00002488                 mov     ecx, [ebp+var_24]
.text:0000248B                 mov     edx, [ebp+arg_0]
.text:0000248E                 mov     [ecx], edx
.text:00002490                 mov     eax, [ebp+var_24]
.text:00002493                 mov     dword ptr [eax+4], 0
.text:0000249A                 mov     [ebp+var_C], 0
.text:000024A1                 mov     ecx, [ebp+var_C]
.text:000024A4                 mov     [ebp+var_4], ecx
.text:000024A7
.text:000024A7 loc_24A7:                               ; CODE XREF: _decompressline+6Dj
.text:000024A7                 mov     edx, [ebp+var_24]
.text:000024AA                 push    edx
.text:000024AB                 call    _get
.text:000024B0                 add     esp, 4
.text:000024B3                 mov     [ebp+var_8], eax
.text:000024B6                 mov     eax, [ebp+var_8]
.text:000024B9                 and     eax, 7Fh
.text:000024BC                 mov     ecx, [ebp+var_C]
.text:000024BF                 shl     eax, cl
.text:000024C1                 or      eax, [ebp+var_4]
.text:000024C4                 mov     [ebp+var_4], eax
.text:000024C7                 mov     ecx, [ebp+var_C]
.text:000024CA                 add     ecx, 7
.text:000024CD                 mov     [ebp+var_C], ecx
.text:000024D0                 mov     edx, [ebp+var_8]
.text:000024D3                 and     edx, 80h
.text:000024D9                 jnz     short loc_24A7
.text:000024DB                 push    18h
.text:000024DD                 push    1
.text:000024DF                 call    _safemalloc
.text:000024E4                 add     esp, 8
.text:000024E7                 mov     [ebp+var_28], eax
.text:000024EA                 push    0Ch
.text:000024EC                 mov     eax, [ebp+var_4]
.text:000024EF                 push    eax
.text:000024F0                 call    _safemalloc
.text:000024F5                 add     esp, 8
.text:000024F8                 mov     ecx, [ebp+var_28]
.text:000024FB                 mov     [ecx+14h], eax
.text:000024FE                 mov     edx, [ebp+var_28]
.text:00002501                 mov     eax, [ebp+var_4]
.text:00002504                 mov     [edx+8], eax
.text:00002507                 mov     ecx, [ebp+var_28]
.text:0000250A                 mov     edx, [ebp+var_4]
.text:0000250D                 mov     [ecx+4], edx
.text:00002510                 mov     eax, [ebp+var_28]
.text:00002513                 mov     dword ptr [eax+0Ch], 1
.text:0000251A                 mov     ecx, [ebp+var_28]
.text:0000251D                 mov     dword ptr [ecx+10h], 0
.text:00002524                 mov     [ebp+var_2C], 0
.text:0000252B                 jmp     short loc_2536
.text:0000252D ; ---------------------------------------------------------------------------
.text:0000252D
.text:0000252D loc_252D:                               ; CODE XREF: _decompressline+E9j
.text:0000252D                 mov     edx, [ebp+var_2C]
.text:00002530                 add     edx, 1
.text:00002533                 mov     [ebp+var_2C], edx
.text:00002536
.text:00002536 loc_2536:                               ; CODE XREF: _decompressline+BFj
.text:00002536                 mov     eax, [ebp+var_28]
.text:00002539                 mov     ecx, [ebp+var_2C]
.text:0000253C                 cmp     ecx, [eax+4]
.text:0000253F                 jge     short loc_2557
.text:00002541                 mov     edx, [ebp+var_2C]
.text:00002544                 imul    edx, 0Ch
.text:00002547                 mov     eax, [ebp+var_28]
.text:0000254A                 mov     ecx, [eax+14h]
.text:0000254D                 mov     dword ptr [ecx+edx+8], 0
.text:00002555                 jmp     short loc_252D
.text:00002557 ; ---------------------------------------------------------------------------
.text:00002557
.text:00002557 loc_2557:                               ; CODE XREF: _decompressline+D3j
.text:00002557                 mov     [ebp+var_C], 0
.text:0000255E                 mov     edx, [ebp+var_28]
.text:00002561                 mov     ax, word ptr [ebp+var_C]
.text:00002565                 mov     [edx], ax
.text:00002568
.text:00002568 loc_2568:                               ; CODE XREF: _decompressline+136j
.text:00002568                 mov     ecx, [ebp+var_24]
.text:0000256B                 push    ecx
.text:0000256C                 call    _get
.text:00002571                 add     esp, 4
.text:00002574                 mov     [ebp+var_8], eax
.text:00002577                 mov     edx, [ebp+var_8]
.text:0000257A                 and     edx, 7Fh
.text:0000257D                 mov     ecx, [ebp+var_C]
.text:00002580                 shl     edx, cl
.text:00002582                 mov     eax, [ebp+var_28]
.text:00002585                 movzx   ecx, word ptr [eax]
.text:00002588                 or      ecx, edx
.text:0000258A                 mov     edx, [ebp+var_28]
.text:0000258D                 mov     [edx], cx
.text:00002590                 mov     eax, [ebp+var_C]
.text:00002593                 add     eax, 7
.text:00002596                 mov     [ebp+var_C], eax
.text:00002599                 mov     ecx, [ebp+var_8]
.text:0000259C                 and     ecx, 80h
.text:000025A2                 jnz     short loc_2568
.text:000025A4                 push    offset _readliteral_chr
.text:000025A9                 mov     edx, [ebp+var_28]
.text:000025AC                 push    edx
.text:000025AD                 mov     eax, [ebp+var_24]
.text:000025B0                 push    eax
.text:000025B1                 call    _readrle
.text:000025B6                 add     esp, 0Ch
.text:000025B9                 push    offset _readliteral_attr
.text:000025BE                 mov     ecx, [ebp+var_28]
.text:000025C1                 push    ecx
.text:000025C2                 mov     edx, [ebp+var_24]
.text:000025C5                 push    edx
.text:000025C6                 call    _readrle
.text:000025CB                 add     esp, 0Ch
.text:000025CE                 push    offset _readliteral_cc
.text:000025D3                 mov     eax, [ebp+var_28]
.text:000025D6                 push    eax
.text:000025D7                 mov     ecx, [ebp+var_24]
.text:000025DA                 push    ecx
.text:000025DB                 call    _readrle
.text:000025E0                 add     esp, 0Ch
.text:000025E3                 cmp     [ebp+arg_4], 0
.text:000025E7                 jz      short loc_25F4
.text:000025E9                 mov     edx, [ebp+arg_4]
.text:000025EC                 mov     eax, [ebp+var_24]
.text:000025EF                 mov     ecx, [eax+4]
.text:000025F2                 mov     [edx], ecx
.text:000025F4
.text:000025F4 loc_25F4:                               ; CODE XREF: _decompressline+17Bj
.text:000025F4                 mov     eax, [ebp+var_28]
.text:000025F7                 push    edx
.text:000025F8                 mov     ecx, ebp
.text:000025FA                 push    eax
.text:000025FB                 lea     edx, $LN15
.text:00002601                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002606                 pop     eax
.text:00002607                 pop     edx
.text:00002608                 pop     edi
.text:00002609                 add     esp, 2Ch
.text:0000260C                 cmp     ebp, esp
.text:0000260E                 call    __RTC_CheckEsp
.text:00002613                 mov     esp, ebp
.text:00002615                 pop     ebp
.text:00002616                 retn
.text:00002616 _decompressline endp
.text:00002616
.text:00002616 ; ---------------------------------------------------------------------------
.text:00002617                 align 4
.text:00002618 $LN15           dd 1                    ; DATA XREF: _decompressline+18Fo
.text:0000261C                 dd offset $LN14
.text:00002620 $LN14           dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:0000261Co
.text:00002628                 dd offset $LN13         ; "buffer"
.text:0000262C $LN13           db 'buffer',0           ; DATA XREF: .text:00002628o
.text:00002633                 db 9 dup(0CCh)
.text:0000263C
.text:0000263C ; =============== S U B R O U T I N E =======================================
.text:0000263C
.text:0000263C ; Attributes: bp-based frame
.text:0000263C
.text:0000263C _get            proc near               ; CODE XREF: _decompressline+3Fp
.text:0000263C                                         ; _decompressline+100p ...
.text:0000263C
.text:0000263C var_4           = dword ptr -4
.text:0000263C arg_0           = dword ptr  8
.text:0000263C
.text:0000263C                 push    ebp
.text:0000263D                 mov     ebp, esp
.text:0000263F                 push    ecx
.text:00002640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002647                 mov     eax, [ebp+arg_0]
.text:0000264A                 mov     ecx, [eax]
.text:0000264C                 mov     edx, [ebp+arg_0]
.text:0000264F                 mov     eax, [edx+4]
.text:00002652                 mov     cl, [ecx+eax]
.text:00002655                 mov     byte ptr [ebp+var_4+3], cl
.text:00002658                 mov     edx, [ebp+arg_0]
.text:0000265B                 mov     eax, [edx+4]
.text:0000265E                 add     eax, 1
.text:00002661                 mov     ecx, [ebp+arg_0]
.text:00002664                 mov     [ecx+4], eax
.text:00002667                 movzx   eax, byte ptr [ebp+var_4+3]
.text:0000266B                 mov     esp, ebp
.text:0000266D                 pop     ebp
.text:0000266E                 retn
.text:0000266E _get            endp
.text:0000266E
.text:0000266E ; ---------------------------------------------------------------------------
.text:0000266F                 db 0Dh dup(0CCh)
.text:0000267C
.text:0000267C ; =============== S U B R O U T I N E =======================================
.text:0000267C
.text:0000267C ; Attributes: bp-based frame
.text:0000267C
.text:0000267C _readrle        proc near               ; CODE XREF: _decompressline+145p
.text:0000267C                                         ; _decompressline+15Ap ...
.text:0000267C
.text:0000267C var_28          = dword ptr -28h
.text:0000267C var_24          = dword ptr -24h
.text:0000267C var_20          = dword ptr -20h
.text:0000267C var_1C          = dword ptr -1Ch
.text:0000267C var_18          = dword ptr -18h
.text:0000267C var_14          = dword ptr -14h
.text:0000267C var_C           = dword ptr -0Ch
.text:0000267C var_4           = dword ptr -4
.text:0000267C arg_0           = dword ptr  8
.text:0000267C arg_4           = dword ptr  0Ch
.text:0000267C arg_8           = dword ptr  10h
.text:0000267C
.text:0000267C                 push    ebp
.text:0000267D                 mov     ebp, esp
.text:0000267F                 sub     esp, 28h
.text:00002682                 push    esi
.text:00002683                 push    edi
.text:00002684                 lea     edi, [ebp+var_28]
.text:00002687                 mov     ecx, 0Ah
.text:0000268C                 mov     eax, 0CCCCCCCCh
.text:00002691                 rep stosd
.text:00002693                 mov     [ebp+var_4], 0
.text:0000269A                 mov     [ebp+var_C], 0
.text:000026A1
.text:000026A1 loc_26A1:                               ; CODE XREF: _readrle:loc_27C6j
.text:000026A1                 mov     eax, [ebp+arg_4]
.text:000026A4                 mov     ecx, [ebp+var_4]
.text:000026A7                 cmp     ecx, [eax+4]
.text:000026AA                 jge     loc_27CB
.text:000026B0                 mov     edx, [ebp+arg_0]
.text:000026B3                 push    edx
.text:000026B4                 call    _get
.text:000026B9                 add     esp, 4
.text:000026BC                 mov     [ebp+var_14], eax
.text:000026BF                 cmp     [ebp+var_14], 80h ; 'Ç'
.text:000026C6                 jl      loc_2753
.text:000026CC                 mov     eax, [ebp+arg_0]
.text:000026CF                 mov     ecx, [eax+4]
.text:000026D2                 mov     [ebp+var_18], ecx
.text:000026D5                 mov     edx, [ebp+var_14]
.text:000026D8                 sub     edx, 7Eh ; '~'
.text:000026DB                 mov     [ebp+var_1C], edx
.text:000026DE
.text:000026DE loc_26DE:                               ; CODE XREF: _readrle+D3j
.text:000026DE                 mov     eax, [ebp+var_1C]
.text:000026E1                 mov     [ebp+var_24], eax
.text:000026E4                 mov     ecx, [ebp+var_1C]
.text:000026E7                 sub     ecx, 1
.text:000026EA                 mov     [ebp+var_1C], ecx
.text:000026ED                 cmp     [ebp+var_24], 0
.text:000026F1                 jz      short loc_2751
.text:000026F3                 mov     edx, [ebp+arg_4]
.text:000026F6                 mov     eax, [ebp+var_4]
.text:000026F9                 cmp     eax, [edx+4]
.text:000026FC                 jl      short loc_2715
.text:000026FE                 push    2E8h            ; Line
.text:00002703                 push    offset $SG86141 ; "..\\..\\..\\terminal.c"
.text:00002708                 push    offset $SG86142 ; "n < ldata->cols"
.text:0000270D                 call    __wassert
.text:00002712 ; ---------------------------------------------------------------------------
.text:00002712                 add     esp, 0Ch
.text:00002715
.text:00002715 loc_2715:                               ; CODE XREF: _readrle+80j
.text:00002715                 mov     edx, [ebp+arg_0]
.text:00002718                 mov     eax, [ebp+var_18]
.text:0000271B                 mov     [edx+4], eax
.text:0000271E                 mov     esi, esp
.text:00002720                 lea     ecx, [ebp+var_C]
.text:00002723                 push    ecx
.text:00002724                 mov     edx, [ebp+arg_4]
.text:00002727                 push    edx
.text:00002728                 mov     eax, [ebp+var_4]
.text:0000272B                 imul    eax, 0Ch
.text:0000272E                 mov     ecx, [ebp+arg_4]
.text:00002731                 add     eax, [ecx+14h]
.text:00002734                 push    eax
.text:00002735                 mov     edx, [ebp+arg_0]
.text:00002738                 push    edx
.text:00002739                 call    [ebp+arg_8]
.text:0000273C                 add     esp, 10h
.text:0000273F                 cmp     esi, esp
.text:00002741                 call    __RTC_CheckEsp
.text:00002746                 mov     eax, [ebp+var_4]
.text:00002749                 add     eax, 1
.text:0000274C                 mov     [ebp+var_4], eax
.text:0000274F                 jmp     short loc_26DE
.text:00002751 ; ---------------------------------------------------------------------------
.text:00002751
.text:00002751 loc_2751:                               ; CODE XREF: _readrle+75j
.text:00002751                 jmp     short loc_27C6
.text:00002753 ; ---------------------------------------------------------------------------
.text:00002753
.text:00002753 loc_2753:                               ; CODE XREF: _readrle+4Aj
.text:00002753                 mov     ecx, [ebp+var_14]
.text:00002756                 add     ecx, 1
.text:00002759                 mov     [ebp+var_20], ecx
.text:0000275C
.text:0000275C loc_275C:                               ; CODE XREF: _readrle+148j
.text:0000275C                 mov     edx, [ebp+var_20]
.text:0000275F                 mov     [ebp+var_28], edx
.text:00002762                 mov     eax, [ebp+var_20]
.text:00002765                 sub     eax, 1
.text:00002768                 mov     [ebp+var_20], eax
.text:0000276B                 cmp     [ebp+var_28], 0
.text:0000276F                 jz      short loc_27C6
.text:00002771                 mov     ecx, [ebp+arg_4]
.text:00002774                 mov     edx, [ebp+var_4]
.text:00002777                 cmp     edx, [ecx+4]
.text:0000277A                 jl      short loc_2793
.text:0000277C                 push    2F2h            ; Line
.text:00002781                 push    offset $SG86149 ; "..\\..\\..\\terminal.c"
.text:00002786                 push    offset $SG86150 ; "n < ldata->cols"
.text:0000278B                 call    __wassert
.text:00002790 ; ---------------------------------------------------------------------------
.text:00002790                 add     esp, 0Ch
.text:00002793
.text:00002793 loc_2793:                               ; CODE XREF: _readrle+FEj
.text:00002793                 mov     esi, esp
.text:00002795                 lea     ecx, [ebp+var_C]
.text:00002798                 push    ecx
.text:00002799                 mov     edx, [ebp+arg_4]
.text:0000279C                 push    edx
.text:0000279D                 mov     eax, [ebp+var_4]
.text:000027A0                 imul    eax, 0Ch
.text:000027A3                 mov     ecx, [ebp+arg_4]
.text:000027A6                 add     eax, [ecx+14h]
.text:000027A9                 push    eax
.text:000027AA                 mov     edx, [ebp+arg_0]
.text:000027AD                 push    edx
.text:000027AE                 call    [ebp+arg_8]
.text:000027B1                 add     esp, 10h
.text:000027B4                 cmp     esi, esp
.text:000027B6                 call    __RTC_CheckEsp
.text:000027BB                 mov     eax, [ebp+var_4]
.text:000027BE                 add     eax, 1
.text:000027C1                 mov     [ebp+var_4], eax
.text:000027C4                 jmp     short loc_275C
.text:000027C6 ; ---------------------------------------------------------------------------
.text:000027C6
.text:000027C6 loc_27C6:                               ; CODE XREF: _readrle:loc_2751j
.text:000027C6                                         ; _readrle+F3j
.text:000027C6                 jmp     loc_26A1
.text:000027CB ; ---------------------------------------------------------------------------
.text:000027CB
.text:000027CB loc_27CB:                               ; CODE XREF: _readrle+2Ej
.text:000027CB                 mov     ecx, [ebp+arg_4]
.text:000027CE                 mov     edx, [ebp+var_4]
.text:000027D1                 cmp     edx, [ecx+4]
.text:000027D4                 jz      short loc_27ED
.text:000027D6                 push    2F9h            ; Line
.text:000027DB                 push    offset $SG86152 ; "..\\..\\..\\terminal.c"
.text:000027E0                 push    offset $SG86153 ; "n == ldata->cols"
.text:000027E5                 call    __wassert
.text:000027EA ; ---------------------------------------------------------------------------
.text:000027EA                 add     esp, 0Ch
.text:000027ED
.text:000027ED loc_27ED:                               ; CODE XREF: _readrle+158j
.text:000027ED                 push    edx
.text:000027EE                 mov     ecx, ebp
.text:000027F0                 push    eax
.text:000027F1                 lea     edx, $LN16
.text:000027F7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000027FC                 pop     eax
.text:000027FD                 pop     edx
.text:000027FE                 pop     edi
.text:000027FF                 pop     esi
.text:00002800                 add     esp, 28h
.text:00002803                 cmp     ebp, esp
.text:00002805                 call    __RTC_CheckEsp
.text:0000280A                 mov     esp, ebp
.text:0000280C                 pop     ebp
.text:0000280D                 retn
.text:0000280D _readrle        endp
.text:0000280D
.text:0000280D ; ---------------------------------------------------------------------------
.text:0000280E                 align 10h
.text:00002810 $LN16           dd 1                    ; DATA XREF: _readrle+175o
.text:00002814                 dd offset $LN15_0
.text:00002818 $LN15_0         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00002814o
.text:00002820                 dd offset $LN14_0       ; "state"
.text:00002824 $LN14_0         db 'state',0            ; DATA XREF: .text:00002820o
.text:0000282A                 align 4
.text:0000282C
.text:0000282C ; =============== S U B R O U T I N E =======================================
.text:0000282C
.text:0000282C ; Attributes: bp-based frame
.text:0000282C
.text:0000282C _readliteral_chr proc near              ; CODE XREF: _readliteral_cc+60p
.text:0000282C                                         ; DATA XREF: _decompressline+138o
.text:0000282C
.text:0000282C var_4           = dword ptr -4
.text:0000282C arg_0           = dword ptr  8
.text:0000282C arg_4           = dword ptr  0Ch
.text:0000282C arg_C           = dword ptr  14h
.text:0000282C
.text:0000282C                 push    ebp
.text:0000282D                 mov     ebp, esp
.text:0000282F                 push    ecx
.text:00002830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002837                 mov     eax, [ebp+arg_0]
.text:0000283A                 push    eax
.text:0000283B                 call    _get
.text:00002840                 add     esp, 4
.text:00002843                 mov     [ebp+var_4], eax
.text:00002846                 cmp     [ebp+var_4], 80h ; 'Ç'
.text:0000284D                 jge     short loc_2861
.text:0000284F                 mov     ecx, [ebp+arg_C]
.text:00002852                 mov     edx, [ebp+var_4]
.text:00002855                 or      edx, [ecx]
.text:00002857                 mov     eax, [ebp+arg_4]
.text:0000285A                 mov     [eax], edx
.text:0000285C                 jmp     loc_29C2
.text:00002861 ; ---------------------------------------------------------------------------
.text:00002861
.text:00002861 loc_2861:                               ; CODE XREF: _readliteral_chr+21j
.text:00002861                 cmp     [ebp+var_4], 0C0h ; '+'
.text:00002868                 jge     short loc_2896
.text:0000286A                 mov     ecx, [ebp+var_4]
.text:0000286D                 and     ecx, 0FFFFFF3Fh
.text:00002873                 shl     ecx, 8
.text:00002876                 mov     edx, [ebp+arg_4]
.text:00002879                 mov     [edx], ecx
.text:0000287B                 mov     eax, [ebp+arg_0]
.text:0000287E                 push    eax
.text:0000287F                 call    _get
.text:00002884                 add     esp, 4
.text:00002887                 mov     ecx, [ebp+arg_4]
.text:0000288A                 or      eax, [ecx]
.text:0000288C                 mov     edx, [ebp+arg_4]
.text:0000288F                 mov     [edx], eax
.text:00002891                 jmp     loc_29C2
.text:00002896 ; ---------------------------------------------------------------------------
.text:00002896
.text:00002896 loc_2896:                               ; CODE XREF: _readliteral_chr+3Cj
.text:00002896                 cmp     [ebp+var_4], 0E0h ; 'a'
.text:0000289D                 jge     short loc_28E3
.text:0000289F                 mov     eax, [ebp+var_4]
.text:000028A2                 and     eax, 0FFFFFF1Fh
.text:000028A7                 shl     eax, 10h
.text:000028AA                 mov     ecx, [ebp+arg_4]
.text:000028AD                 mov     [ecx], eax
.text:000028AF                 mov     edx, [ebp+arg_0]
.text:000028B2                 push    edx
.text:000028B3                 call    _get
.text:000028B8                 add     esp, 4
.text:000028BB                 shl     eax, 8
.text:000028BE                 mov     ecx, [ebp+arg_4]
.text:000028C1                 or      eax, [ecx]
.text:000028C3                 mov     edx, [ebp+arg_4]
.text:000028C6                 mov     [edx], eax
.text:000028C8                 mov     eax, [ebp+arg_0]
.text:000028CB                 push    eax
.text:000028CC                 call    _get
.text:000028D1                 add     esp, 4
.text:000028D4                 mov     ecx, [ebp+arg_4]
.text:000028D7                 or      eax, [ecx]
.text:000028D9                 mov     edx, [ebp+arg_4]
.text:000028DC                 mov     [edx], eax
.text:000028DE                 jmp     loc_29C2
.text:000028E3 ; ---------------------------------------------------------------------------
.text:000028E3
.text:000028E3 loc_28E3:                               ; CODE XREF: _readliteral_chr+71j
.text:000028E3                 cmp     [ebp+var_4], 0F0h ; '='
.text:000028EA                 jge     short loc_2946
.text:000028EC                 mov     eax, [ebp+var_4]
.text:000028EF                 and     eax, 0FFFFFF0Fh
.text:000028F4                 shl     eax, 18h
.text:000028F7                 mov     ecx, [ebp+arg_4]
.text:000028FA                 mov     [ecx], eax
.text:000028FC                 mov     edx, [ebp+arg_0]
.text:000028FF                 push    edx
.text:00002900                 call    _get
.text:00002905                 add     esp, 4
.text:00002908                 shl     eax, 10h
.text:0000290B                 mov     ecx, [ebp+arg_4]
.text:0000290E                 or      eax, [ecx]
.text:00002910                 mov     edx, [ebp+arg_4]
.text:00002913                 mov     [edx], eax
.text:00002915                 mov     eax, [ebp+arg_0]
.text:00002918                 push    eax
.text:00002919                 call    _get
.text:0000291E                 add     esp, 4
.text:00002921                 shl     eax, 8
.text:00002924                 mov     ecx, [ebp+arg_4]
.text:00002927                 or      eax, [ecx]
.text:00002929                 mov     edx, [ebp+arg_4]
.text:0000292C                 mov     [edx], eax
.text:0000292E                 mov     eax, [ebp+arg_0]
.text:00002931                 push    eax
.text:00002932                 call    _get
.text:00002937                 add     esp, 4
.text:0000293A                 mov     ecx, [ebp+arg_4]
.text:0000293D                 or      eax, [ecx]
.text:0000293F                 mov     edx, [ebp+arg_4]
.text:00002942                 mov     [edx], eax
.text:00002944                 jmp     short loc_29C2
.text:00002946 ; ---------------------------------------------------------------------------
.text:00002946
.text:00002946 loc_2946:                               ; CODE XREF: _readliteral_chr+BEj
.text:00002946                 cmp     [ebp+var_4], 0F0h ; '='
.text:0000294D                 jz      short loc_2966
.text:0000294F                 push    318h            ; Line
.text:00002954                 push    offset $SG86174 ; "..\\..\\..\\terminal.c"
.text:00002959                 push    offset $SG86175 ; "byte == 0xF0"
.text:0000295E                 call    __wassert
.text:00002963 ; ---------------------------------------------------------------------------
.text:00002963                 add     esp, 0Ch
.text:00002966
.text:00002966 loc_2966:                               ; CODE XREF: _readliteral_chr+121j
.text:00002966                 mov     ecx, [ebp+arg_0]
.text:00002969                 push    ecx
.text:0000296A                 call    _get
.text:0000296F                 add     esp, 4
.text:00002972                 shl     eax, 18h
.text:00002975                 mov     edx, [ebp+arg_4]
.text:00002978                 mov     [edx], eax
.text:0000297A                 mov     eax, [ebp+arg_0]
.text:0000297D                 push    eax
.text:0000297E                 call    _get
.text:00002983                 add     esp, 4
.text:00002986                 shl     eax, 10h
.text:00002989                 mov     ecx, [ebp+arg_4]
.text:0000298C                 or      eax, [ecx]
.text:0000298E                 mov     edx, [ebp+arg_4]
.text:00002991                 mov     [edx], eax
.text:00002993                 mov     eax, [ebp+arg_0]
.text:00002996                 push    eax
.text:00002997                 call    _get
.text:0000299C                 add     esp, 4
.text:0000299F                 shl     eax, 8
.text:000029A2                 mov     ecx, [ebp+arg_4]
.text:000029A5                 or      eax, [ecx]
.text:000029A7                 mov     edx, [ebp+arg_4]
.text:000029AA                 mov     [edx], eax
.text:000029AC                 mov     eax, [ebp+arg_0]
.text:000029AF                 push    eax
.text:000029B0                 call    _get
.text:000029B5                 add     esp, 4
.text:000029B8                 mov     ecx, [ebp+arg_4]
.text:000029BB                 or      eax, [ecx]
.text:000029BD                 mov     edx, [ebp+arg_4]
.text:000029C0                 mov     [edx], eax
.text:000029C2
.text:000029C2 loc_29C2:                               ; CODE XREF: _readliteral_chr+30j
.text:000029C2                                         ; _readliteral_chr+65j ...
.text:000029C2                 mov     eax, [ebp+arg_4]
.text:000029C5                 mov     ecx, [eax]
.text:000029C7                 and     ecx, 0FFFFFF00h
.text:000029CD                 mov     edx, [ebp+arg_C]
.text:000029D0                 mov     [edx], ecx
.text:000029D2                 add     esp, 4
.text:000029D5                 cmp     ebp, esp
.text:000029D7                 call    __RTC_CheckEsp
.text:000029DC                 mov     esp, ebp
.text:000029DE                 pop     ebp
.text:000029DF                 retn
.text:000029DF _readliteral_chr endp
.text:000029DF
.text:000029DF ; ---------------------------------------------------------------------------
.text:000029E0                 db 0Ch dup(0CCh)
.text:000029EC
.text:000029EC ; =============== S U B R O U T I N E =======================================
.text:000029EC
.text:000029EC ; Attributes: bp-based frame
.text:000029EC
.text:000029EC _readliteral_attr proc near             ; DATA XREF: _decompressline+14Do
.text:000029EC
.text:000029EC var_C           = dword ptr -0Ch
.text:000029EC var_8           = dword ptr -8
.text:000029EC var_4           = dword ptr -4
.text:000029EC arg_0           = dword ptr  8
.text:000029EC arg_4           = dword ptr  0Ch
.text:000029EC
.text:000029EC                 push    ebp
.text:000029ED                 mov     ebp, esp
.text:000029EF                 sub     esp, 0Ch
.text:000029F2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000029F9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A07                 mov     eax, [ebp+arg_0]
.text:00002A0A                 push    eax
.text:00002A0B                 call    _get
.text:00002A10                 add     esp, 4
.text:00002A13                 shl     eax, 8
.text:00002A16                 mov     [ebp+var_4], eax
.text:00002A19                 mov     ecx, [ebp+arg_0]
.text:00002A1C                 push    ecx
.text:00002A1D                 call    _get
.text:00002A22                 add     esp, 4
.text:00002A25                 or      eax, [ebp+var_4]
.text:00002A28                 mov     [ebp+var_4], eax
.text:00002A2B                 cmp     [ebp+var_4], 8000h
.text:00002A32                 jb      short loc_2A70
.text:00002A34                 mov     edx, [ebp+var_4]
.text:00002A37                 and     edx, 0FFFF7FFFh
.text:00002A3D                 mov     [ebp+var_4], edx
.text:00002A40                 mov     eax, [ebp+var_4]
.text:00002A43                 shl     eax, 10h
.text:00002A46                 mov     [ebp+var_4], eax
.text:00002A49                 mov     ecx, [ebp+arg_0]
.text:00002A4C                 push    ecx
.text:00002A4D                 call    _get
.text:00002A52                 add     esp, 4
.text:00002A55                 shl     eax, 8
.text:00002A58                 or      eax, [ebp+var_4]
.text:00002A5B                 mov     [ebp+var_4], eax
.text:00002A5E                 mov     edx, [ebp+arg_0]
.text:00002A61                 push    edx
.text:00002A62                 call    _get
.text:00002A67                 add     esp, 4
.text:00002A6A                 or      eax, [ebp+var_4]
.text:00002A6D                 mov     [ebp+var_4], eax
.text:00002A70
.text:00002A70 loc_2A70:                               ; CODE XREF: _readliteral_attr+46j
.text:00002A70                 mov     eax, [ebp+var_4]
.text:00002A73                 shr     eax, 17h
.text:00002A76                 and     eax, 0FFh
.text:00002A7B                 mov     [ebp+var_C], eax
.text:00002A7E                 mov     ecx, [ebp+var_4]
.text:00002A81                 and     ecx, 7FFFFFh
.text:00002A87                 mov     [ebp+var_8], ecx
.text:00002A8A                 mov     edx, [ebp+var_8]
.text:00002A8D                 shr     edx, 4
.text:00002A90                 shl     edx, 8
.text:00002A93                 mov     eax, [ebp+var_8]
.text:00002A96                 and     eax, 0Fh
.text:00002A99                 or      edx, eax
.text:00002A9B                 mov     [ebp+var_8], edx
.text:00002A9E                 mov     ecx, [ebp+var_8]
.text:00002AA1                 shr     ecx, 0Dh
.text:00002AA4                 shl     ecx, 11h
.text:00002AA7                 mov     edx, [ebp+var_8]
.text:00002AAA                 and     edx, 1FFFh
.text:00002AB0                 or      ecx, edx
.text:00002AB2                 mov     [ebp+var_8], ecx
.text:00002AB5                 mov     eax, [ebp+var_C]
.text:00002AB8                 shr     eax, 4
.text:00002ABB                 shl     eax, 0Dh
.text:00002ABE                 or      eax, [ebp+var_8]
.text:00002AC1                 mov     [ebp+var_8], eax
.text:00002AC4                 mov     ecx, [ebp+var_C]
.text:00002AC7                 and     ecx, 0Fh
.text:00002ACA                 shl     ecx, 4
.text:00002ACD                 or      ecx, [ebp+var_8]
.text:00002AD0                 mov     [ebp+var_8], ecx
.text:00002AD3                 mov     edx, [ebp+arg_4]
.text:00002AD6                 mov     eax, [ebp+var_8]
.text:00002AD9                 mov     [edx+4], eax
.text:00002ADC                 add     esp, 0Ch
.text:00002ADF                 cmp     ebp, esp
.text:00002AE1                 call    __RTC_CheckEsp
.text:00002AE6                 mov     esp, ebp
.text:00002AE8                 pop     ebp
.text:00002AE9                 retn
.text:00002AE9 _readliteral_attr endp
.text:00002AE9
.text:00002AE9 ; ---------------------------------------------------------------------------
.text:00002AEA                 align 4
.text:00002AEC
.text:00002AEC ; =============== S U B R O U T I N E =======================================
.text:00002AEC
.text:00002AEC ; Attributes: bp-based frame
.text:00002AEC
.text:00002AEC _readliteral_cc proc near               ; DATA XREF: _decompressline+162o
.text:00002AEC
.text:00002AEC var_28          = dword ptr -28h
.text:00002AEC var_20          = dword ptr -20h
.text:00002AEC var_14          = dword ptr -14h
.text:00002AEC var_4           = dword ptr -4
.text:00002AEC arg_0           = dword ptr  8
.text:00002AEC arg_4           = dword ptr  0Ch
.text:00002AEC arg_8           = dword ptr  10h
.text:00002AEC
.text:00002AEC                 push    ebp
.text:00002AED                 mov     ebp, esp
.text:00002AEF                 sub     esp, 28h
.text:00002AF2                 push    edi
.text:00002AF3                 lea     edi, [ebp+var_28]
.text:00002AF6                 mov     ecx, 0Ah
.text:00002AFB                 mov     eax, 0CCCCCCCCh
.text:00002B00                 rep stosd
.text:00002B02                 mov     eax, dword ptr ds:___security_cookie
.text:00002B07                 xor     eax, ebp
.text:00002B09                 mov     [ebp+var_4], eax
.text:00002B0C                 mov     eax, [ebp+arg_8]
.text:00002B0F                 mov     ecx, [ebp+arg_4]
.text:00002B12                 sub     ecx, [eax+14h]
.text:00002B15                 mov     eax, ecx
.text:00002B17                 cdq
.text:00002B18                 mov     ecx, 0Ch
.text:00002B1D                 idiv    ecx
.text:00002B1F                 mov     [ebp+var_28], eax
.text:00002B22                 mov     edx, [ebp+arg_4]
.text:00002B25                 mov     dword ptr [edx+8], 0
.text:00002B2C
.text:00002B2C loc_2B2C:                               ; CODE XREF: _readliteral_cc+84j
.text:00002B2C                 mov     eax, 1
.text:00002B31                 test    eax, eax
.text:00002B33                 jz      short loc_2B72
.text:00002B35                 mov     [ebp+var_20], 0
.text:00002B3C                 lea     ecx, [ebp+var_20]
.text:00002B3F                 push    ecx
.text:00002B40                 mov     edx, [ebp+arg_8]
.text:00002B43                 push    edx
.text:00002B44                 lea     eax, [ebp+var_14]
.text:00002B47                 push    eax
.text:00002B48                 mov     ecx, [ebp+arg_0]
.text:00002B4B                 push    ecx
.text:00002B4C                 call    _readliteral_chr
.text:00002B51                 add     esp, 10h
.text:00002B54                 cmp     [ebp+var_14], 0
.text:00002B58                 jnz     short loc_2B5C
.text:00002B5A                 jmp     short loc_2B72
.text:00002B5C ; ---------------------------------------------------------------------------
.text:00002B5C
.text:00002B5C loc_2B5C:                               ; CODE XREF: _readliteral_cc+6Cj
.text:00002B5C                 mov     edx, [ebp+var_14]
.text:00002B5F                 push    edx
.text:00002B60                 mov     eax, [ebp+var_28]
.text:00002B63                 push    eax
.text:00002B64                 mov     ecx, [ebp+arg_8]
.text:00002B67                 push    ecx
.text:00002B68                 call    _add_cc
.text:00002B6D                 add     esp, 0Ch
.text:00002B70                 jmp     short loc_2B2C
.text:00002B72 ; ---------------------------------------------------------------------------
.text:00002B72
.text:00002B72 loc_2B72:                               ; CODE XREF: _readliteral_cc+47j
.text:00002B72                                         ; _readliteral_cc+6Ej
.text:00002B72                 push    edx
.text:00002B73                 mov     ecx, ebp
.text:00002B75                 push    eax
.text:00002B76                 lea     edx, $LN9_0
.text:00002B7C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002B81                 pop     eax
.text:00002B82                 pop     edx
.text:00002B83                 pop     edi
.text:00002B84                 mov     ecx, [ebp+var_4]
.text:00002B87                 xor     ecx, ebp
.text:00002B89                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002B8E                 add     esp, 28h
.text:00002B91                 cmp     ebp, esp
.text:00002B93                 call    __RTC_CheckEsp
.text:00002B98                 mov     esp, ebp
.text:00002B9A                 pop     ebp
.text:00002B9B                 retn
.text:00002B9B _readliteral_cc endp
.text:00002B9B
.text:00002B9B ; ---------------------------------------------------------------------------
.text:00002B9C $LN9_0          dd 2                    ; DATA XREF: _readliteral_cc+8Ao
.text:00002BA0                 dd offset $LN8_0
.text:00002BA4 $LN8_0          dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:00002BA0o
.text:00002BAC                 dd offset $LN6          ; "n"
.text:00002BB0                 dd 0FFFFFFE0h, 4
.text:00002BB8                 dd offset $LN7_0        ; "zstate"
.text:00002BBC $LN7_0          db 'zstate',0           ; DATA XREF: .text:00002BB8o
.text:00002BC3 $LN6            db 'n',0                ; DATA XREF: .text:00002BACo
.text:00002BC5                 db 7 dup(0CCh)
.text:00002BCC
.text:00002BCC ; =============== S U B R O U T I N E =======================================
.text:00002BCC
.text:00002BCC ; Attributes: bp-based frame
.text:00002BCC
.text:00002BCC _add_cc         proc near               ; CODE XREF: _readliteral_cc+7Cp
.text:00002BCC                                         ; _copy_termchar+6Ep ...
.text:00002BCC
.text:00002BCC var_8           = dword ptr -8
.text:00002BCC var_4           = dword ptr -4
.text:00002BCC arg_0           = dword ptr  8
.text:00002BCC arg_4           = dword ptr  0Ch
.text:00002BCC arg_8           = dword ptr  10h
.text:00002BCC
.text:00002BCC                 push    ebp
.text:00002BCD                 mov     ebp, esp
.text:00002BCF                 sub     esp, 8
.text:00002BD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002BD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BE0                 cmp     [ebp+arg_4], 0
.text:00002BE4                 jl      short loc_2BF1
.text:00002BE6                 mov     eax, [ebp+arg_0]
.text:00002BE9                 mov     ecx, [ebp+arg_4]
.text:00002BEC                 cmp     ecx, [eax+4]
.text:00002BEF                 jl      short loc_2C08
.text:00002BF1
.text:00002BF1 loc_2BF1:                               ; CODE XREF: _add_cc+18j
.text:00002BF1                 push    0CDh ; '-'      ; Line
.text:00002BF6                 push    offset $SG85860 ; "..\\..\\..\\terminal.c"
.text:00002BFB                 push    offset $SG85861 ; "col >= 0 && col < line->cols"
.text:00002C00                 call    __wassert
.text:00002C05 ; ---------------------------------------------------------------------------
.text:00002C05                 add     esp, 0Ch
.text:00002C08
.text:00002C08 loc_2C08:                               ; CODE XREF: _add_cc+23j
.text:00002C08                 mov     eax, [ebp+arg_0]
.text:00002C0B                 cmp     dword ptr [eax+10h], 0
.text:00002C0F                 jnz     loc_2CB4
.text:00002C15                 mov     ecx, [ebp+arg_0]
.text:00002C18                 mov     edx, [ecx+8]
.text:00002C1B                 mov     [ebp+var_8], edx
.text:00002C1E                 mov     eax, [ebp+arg_0]
.text:00002C21                 mov     ecx, [ebp+arg_0]
.text:00002C24                 mov     eax, [eax+8]
.text:00002C27                 sub     eax, [ecx+4]
.text:00002C2A                 cdq
.text:00002C2B                 sub     eax, edx
.text:00002C2D                 sar     eax, 1
.text:00002C2F                 mov     edx, [ebp+arg_0]
.text:00002C32                 mov     ecx, [edx+8]
.text:00002C35                 lea     edx, [eax+ecx+10h]
.text:00002C39                 mov     eax, [ebp+arg_0]
.text:00002C3C                 mov     [eax+8], edx
.text:00002C3F                 push    0Ch
.text:00002C41                 mov     ecx, [ebp+arg_0]
.text:00002C44                 mov     edx, [ecx+8]
.text:00002C47                 push    edx
.text:00002C48                 mov     eax, [ebp+arg_0]
.text:00002C4B                 mov     ecx, [eax+14h]
.text:00002C4E                 push    ecx
.text:00002C4F                 call    _saferealloc
.text:00002C54                 add     esp, 0Ch
.text:00002C57                 mov     edx, [ebp+arg_0]
.text:00002C5A                 mov     [edx+14h], eax
.text:00002C5D                 mov     eax, [ebp+arg_0]
.text:00002C60                 mov     ecx, [ebp+var_8]
.text:00002C63                 mov     [eax+10h], ecx
.text:00002C66
.text:00002C66 loc_2C66:                               ; CODE XREF: _add_cc+E6j
.text:00002C66                 mov     edx, [ebp+arg_0]
.text:00002C69                 mov     eax, [ebp+var_8]
.text:00002C6C                 cmp     eax, [edx+8]
.text:00002C6F                 jge     short loc_2CB4
.text:00002C71                 mov     ecx, [ebp+var_8]
.text:00002C74                 add     ecx, 1
.text:00002C77                 mov     edx, [ebp+arg_0]
.text:00002C7A                 cmp     ecx, [edx+8]
.text:00002C7D                 jge     short loc_2C95
.text:00002C7F                 mov     eax, [ebp+var_8]
.text:00002C82                 imul    eax, 0Ch
.text:00002C85                 mov     ecx, [ebp+arg_0]
.text:00002C88                 mov     edx, [ecx+14h]
.text:00002C8B                 mov     dword ptr [edx+eax+8], 1
.text:00002C93                 jmp     short loc_2CA9
.text:00002C95 ; ---------------------------------------------------------------------------
.text:00002C95
.text:00002C95 loc_2C95:                               ; CODE XREF: _add_cc+B1j
.text:00002C95                 mov     eax, [ebp+var_8]
.text:00002C98                 imul    eax, 0Ch
.text:00002C9B                 mov     ecx, [ebp+arg_0]
.text:00002C9E                 mov     edx, [ecx+14h]
.text:00002CA1                 mov     dword ptr [edx+eax+8], 0
.text:00002CA9
.text:00002CA9 loc_2CA9:                               ; CODE XREF: _add_cc+C7j
.text:00002CA9                 mov     eax, [ebp+var_8]
.text:00002CAC                 add     eax, 1
.text:00002CAF                 mov     [ebp+var_8], eax
.text:00002CB2                 jmp     short loc_2C66
.text:00002CB4 ; ---------------------------------------------------------------------------
.text:00002CB4
.text:00002CB4 loc_2CB4:                               ; CODE XREF: _add_cc+43j
.text:00002CB4                                         ; _add_cc+A3j ...
.text:00002CB4                 mov     ecx, [ebp+arg_4]
.text:00002CB7                 imul    ecx, 0Ch
.text:00002CBA                 mov     edx, [ebp+arg_0]
.text:00002CBD                 mov     eax, [edx+14h]
.text:00002CC0                 cmp     dword ptr [eax+ecx+8], 0
.text:00002CC5                 jz      short loc_2CDF
.text:00002CC7                 mov     ecx, [ebp+arg_4]
.text:00002CCA                 imul    ecx, 0Ch
.text:00002CCD                 mov     edx, [ebp+arg_0]
.text:00002CD0                 mov     eax, [edx+14h]
.text:00002CD3                 mov     edx, [ebp+arg_4]
.text:00002CD6                 add     edx, [eax+ecx+8]
.text:00002CDA                 mov     [ebp+arg_4], edx
.text:00002CDD                 jmp     short loc_2CB4
.text:00002CDF ; ---------------------------------------------------------------------------
.text:00002CDF
.text:00002CDF loc_2CDF:                               ; CODE XREF: _add_cc+F9j
.text:00002CDF                 mov     eax, [ebp+arg_0]
.text:00002CE2                 mov     ecx, [eax+10h]
.text:00002CE5                 mov     [ebp+var_4], ecx
.text:00002CE8                 mov     edx, [ebp+var_4]
.text:00002CEB                 imul    edx, 0Ch
.text:00002CEE                 mov     eax, [ebp+arg_0]
.text:00002CF1                 mov     ecx, [eax+14h]
.text:00002CF4                 cmp     dword ptr [ecx+edx+8], 0
.text:00002CF9                 jz      short loc_2D16
.text:00002CFB                 mov     edx, [ebp+var_4]
.text:00002CFE                 imul    edx, 0Ch
.text:00002D01                 mov     eax, [ebp+arg_0]
.text:00002D04                 mov     ecx, [eax+14h]
.text:00002D07                 mov     eax, [ebp+var_4]
.text:00002D0A                 add     eax, [ecx+edx+8]
.text:00002D0E                 mov     ecx, [ebp+arg_0]
.text:00002D11                 mov     [ecx+10h], eax
.text:00002D14                 jmp     short loc_2D20
.text:00002D16 ; ---------------------------------------------------------------------------
.text:00002D16
.text:00002D16 loc_2D16:                               ; CODE XREF: _add_cc+12Dj
.text:00002D16                 mov     edx, [ebp+arg_0]
.text:00002D19                 mov     dword ptr [edx+10h], 0
.text:00002D20
.text:00002D20 loc_2D20:                               ; CODE XREF: _add_cc+148j
.text:00002D20                 mov     eax, [ebp+var_4]
.text:00002D23                 imul    eax, 0Ch
.text:00002D26                 mov     ecx, [ebp+arg_0]
.text:00002D29                 mov     edx, [ecx+14h]
.text:00002D2C                 mov     dword ptr [edx+eax+8], 0
.text:00002D34                 mov     eax, [ebp+var_4]
.text:00002D37                 imul    eax, 0Ch
.text:00002D3A                 mov     ecx, [ebp+arg_0]
.text:00002D3D                 mov     edx, [ecx+14h]
.text:00002D40                 mov     ecx, [ebp+arg_8]
.text:00002D43                 mov     [eax+edx], ecx
.text:00002D46                 mov     edx, [ebp+var_4]
.text:00002D49                 sub     edx, [ebp+arg_4]
.text:00002D4C                 mov     eax, [ebp+arg_4]
.text:00002D4F                 imul    eax, 0Ch
.text:00002D52                 mov     ecx, [ebp+arg_0]
.text:00002D55                 mov     ecx, [ecx+14h]
.text:00002D58                 mov     [ecx+eax+8], edx
.text:00002D5C                 add     esp, 8
.text:00002D5F                 cmp     ebp, esp
.text:00002D61                 call    __RTC_CheckEsp
.text:00002D66                 mov     esp, ebp
.text:00002D68                 pop     ebp
.text:00002D69                 retn
.text:00002D69 _add_cc         endp
.text:00002D69
.text:00002D69 ; ---------------------------------------------------------------------------
.text:00002D6A                 align 4
.text:00002D6C
.text:00002D6C ; =============== S U B R O U T I N E =======================================
.text:00002D6C
.text:00002D6C ; Attributes: bp-based frame
.text:00002D6C
.text:00002D6C _resizeline     proc near               ; CODE XREF: _lineptr+1DBp
.text:00002D6C                                         ; _check_line_size+26p ...
.text:00002D6C
.text:00002D6C var_8           = dword ptr -8
.text:00002D6C var_4           = dword ptr -4
.text:00002D6C arg_0           = dword ptr  8
.text:00002D6C arg_4           = dword ptr  0Ch
.text:00002D6C arg_8           = dword ptr  10h
.text:00002D6C
.text:00002D6C                 push    ebp
.text:00002D6D                 mov     ebp, esp
.text:00002D6F                 sub     esp, 8
.text:00002D72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002D79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D80                 mov     eax, [ebp+arg_4]
.text:00002D83                 mov     ecx, [eax+4]
.text:00002D86                 cmp     ecx, [ebp+arg_8]
.text:00002D89                 jz      loc_2F27
.text:00002D8F                 mov     edx, [ebp+arg_4]
.text:00002D92                 mov     eax, [edx+4]
.text:00002D95                 mov     [ebp+var_8], eax
.text:00002D98                 mov     ecx, [ebp+arg_8]
.text:00002D9B                 mov     [ebp+var_4], ecx
.text:00002D9E                 jmp     short loc_2DA9
.text:00002DA0 ; ---------------------------------------------------------------------------
.text:00002DA0
.text:00002DA0 loc_2DA0:                               ; CODE XREF: _resizeline+55j
.text:00002DA0                 mov     edx, [ebp+var_4]
.text:00002DA3                 add     edx, 1
.text:00002DA6                 mov     [ebp+var_4], edx
.text:00002DA9
.text:00002DA9 loc_2DA9:                               ; CODE XREF: _resizeline+32j
.text:00002DA9                 mov     eax, [ebp+var_4]
.text:00002DAC                 cmp     eax, [ebp+var_8]
.text:00002DAF                 jge     short loc_2DC3
.text:00002DB1                 mov     ecx, [ebp+var_4]
.text:00002DB4                 push    ecx
.text:00002DB5                 mov     edx, [ebp+arg_4]
.text:00002DB8                 push    edx
.text:00002DB9                 call    _clear_cc
.text:00002DBE                 add     esp, 8
.text:00002DC1                 jmp     short loc_2DA0
.text:00002DC3 ; ---------------------------------------------------------------------------
.text:00002DC3
.text:00002DC3 loc_2DC3:                               ; CODE XREF: _resizeline+43j
.text:00002DC3                 mov     eax, [ebp+arg_8]
.text:00002DC6                 cmp     eax, [ebp+var_8]
.text:00002DC9                 jge     short loc_2DFD
.text:00002DCB                 mov     ecx, [ebp+arg_4]
.text:00002DCE                 mov     edx, [ebp+arg_4]
.text:00002DD1                 mov     eax, [ecx+8]
.text:00002DD4                 sub     eax, [edx+4]
.text:00002DD7                 imul    eax, 0Ch
.text:00002DDA                 push    eax             ; Size
.text:00002DDB                 mov     ecx, [ebp+var_8]
.text:00002DDE                 imul    ecx, 0Ch
.text:00002DE1                 mov     edx, [ebp+arg_4]
.text:00002DE4                 add     ecx, [edx+14h]
.text:00002DE7                 push    ecx             ; Src
.text:00002DE8                 mov     eax, [ebp+arg_8]
.text:00002DEB                 imul    eax, 0Ch
.text:00002DEE                 mov     ecx, [ebp+arg_4]
.text:00002DF1                 add     eax, [ecx+14h]
.text:00002DF4                 push    eax             ; Dst
.text:00002DF5                 call    _memmove
.text:00002DFA                 add     esp, 0Ch
.text:00002DFD
.text:00002DFD loc_2DFD:                               ; CODE XREF: _resizeline+5Dj
.text:00002DFD                 mov     edx, [ebp+arg_8]
.text:00002E00                 sub     edx, [ebp+var_8]
.text:00002E03                 mov     eax, [ebp+arg_4]
.text:00002E06                 add     edx, [eax+8]
.text:00002E09                 mov     ecx, [ebp+arg_4]
.text:00002E0C                 mov     [ecx+8], edx
.text:00002E0F                 push    0Ch
.text:00002E11                 mov     edx, [ebp+arg_4]
.text:00002E14                 mov     eax, [edx+8]
.text:00002E17                 push    eax
.text:00002E18                 mov     ecx, [ebp+arg_4]
.text:00002E1B                 mov     edx, [ecx+14h]
.text:00002E1E                 push    edx
.text:00002E1F                 call    _saferealloc
.text:00002E24                 add     esp, 0Ch
.text:00002E27                 mov     ecx, [ebp+arg_4]
.text:00002E2A                 mov     [ecx+14h], eax
.text:00002E2D                 mov     edx, [ebp+arg_4]
.text:00002E30                 mov     eax, [ebp+arg_8]
.text:00002E33                 mov     [edx+4], eax
.text:00002E36                 mov     ecx, [ebp+arg_8]
.text:00002E39                 cmp     ecx, [ebp+var_8]
.text:00002E3C                 jle     short loc_2E70
.text:00002E3E                 mov     edx, [ebp+arg_4]
.text:00002E41                 mov     eax, [ebp+arg_4]
.text:00002E44                 mov     ecx, [edx+8]
.text:00002E47                 sub     ecx, [eax+4]
.text:00002E4A                 imul    ecx, 0Ch
.text:00002E4D                 push    ecx             ; Size
.text:00002E4E                 mov     edx, [ebp+var_8]
.text:00002E51                 imul    edx, 0Ch
.text:00002E54                 mov     eax, [ebp+arg_4]
.text:00002E57                 add     edx, [eax+14h]
.text:00002E5A                 push    edx             ; Src
.text:00002E5B                 mov     ecx, [ebp+arg_8]
.text:00002E5E                 imul    ecx, 0Ch
.text:00002E61                 mov     edx, [ebp+arg_4]
.text:00002E64                 add     ecx, [edx+14h]
.text:00002E67                 push    ecx             ; Dst
.text:00002E68                 call    _memmove
.text:00002E6D                 add     esp, 0Ch
.text:00002E70
.text:00002E70 loc_2E70:                               ; CODE XREF: _resizeline+D0j
.text:00002E70                 mov     [ebp+var_4], 0
.text:00002E77                 jmp     short loc_2E82
.text:00002E79 ; ---------------------------------------------------------------------------
.text:00002E79
.text:00002E79 loc_2E79:                               ; CODE XREF: _resizeline:loc_2ECBj
.text:00002E79                 mov     eax, [ebp+var_4]
.text:00002E7C                 add     eax, 1
.text:00002E7F                 mov     [ebp+var_4], eax
.text:00002E82
.text:00002E82 loc_2E82:                               ; CODE XREF: _resizeline+10Bj
.text:00002E82                 mov     ecx, [ebp+var_4]
.text:00002E85                 cmp     ecx, [ebp+var_8]
.text:00002E88                 jge     short loc_2ECD
.text:00002E8A                 mov     edx, [ebp+var_4]
.text:00002E8D                 cmp     edx, [ebp+arg_8]
.text:00002E90                 jge     short loc_2ECD
.text:00002E92                 mov     eax, [ebp+var_4]
.text:00002E95                 imul    eax, 0Ch
.text:00002E98                 mov     ecx, [ebp+arg_4]
.text:00002E9B                 mov     edx, [ecx+14h]
.text:00002E9E                 cmp     dword ptr [edx+eax+8], 0
.text:00002EA3                 jz      short loc_2ECB
.text:00002EA5                 mov     eax, [ebp+var_4]
.text:00002EA8                 imul    eax, 0Ch
.text:00002EAB                 mov     ecx, [ebp+arg_4]
.text:00002EAE                 mov     edx, [ecx+14h]
.text:00002EB1                 mov     ecx, [ebp+arg_8]
.text:00002EB4                 sub     ecx, [ebp+var_8]
.text:00002EB7                 add     ecx, [edx+eax+8]
.text:00002EBB                 mov     edx, [ebp+var_4]
.text:00002EBE                 imul    edx, 0Ch
.text:00002EC1                 mov     eax, [ebp+arg_4]
.text:00002EC4                 mov     eax, [eax+14h]
.text:00002EC7                 mov     [eax+edx+8], ecx
.text:00002ECB
.text:00002ECB loc_2ECB:                               ; CODE XREF: _resizeline+137j
.text:00002ECB                 jmp     short loc_2E79
.text:00002ECD ; ---------------------------------------------------------------------------
.text:00002ECD
.text:00002ECD loc_2ECD:                               ; CODE XREF: _resizeline+11Cj
.text:00002ECD                                         ; _resizeline+124j
.text:00002ECD                 mov     ecx, [ebp+arg_4]
.text:00002ED0                 cmp     dword ptr [ecx+10h], 0
.text:00002ED4                 jz      short loc_2EE8
.text:00002ED6                 mov     edx, [ebp+arg_8]
.text:00002ED9                 sub     edx, [ebp+var_8]
.text:00002EDC                 mov     eax, [ebp+arg_4]
.text:00002EDF                 add     edx, [eax+10h]
.text:00002EE2                 mov     ecx, [ebp+arg_4]
.text:00002EE5                 mov     [ecx+10h], edx
.text:00002EE8
.text:00002EE8 loc_2EE8:                               ; CODE XREF: _resizeline+168j
.text:00002EE8                 mov     edx, [ebp+var_8]
.text:00002EEB                 mov     [ebp+var_4], edx
.text:00002EEE                 jmp     short loc_2EF9
.text:00002EF0 ; ---------------------------------------------------------------------------
.text:00002EF0
.text:00002EF0 loc_2EF0:                               ; CODE XREF: _resizeline+1B9j
.text:00002EF0                 mov     eax, [ebp+var_4]
.text:00002EF3                 add     eax, 1
.text:00002EF6                 mov     [ebp+var_4], eax
.text:00002EF9
.text:00002EF9 loc_2EF9:                               ; CODE XREF: _resizeline+182j
.text:00002EF9                 mov     ecx, [ebp+var_4]
.text:00002EFC                 cmp     ecx, [ebp+arg_8]
.text:00002EFF                 jge     short loc_2F27
.text:00002F01                 mov     edx, [ebp+arg_0]
.text:00002F04                 add     edx, 48h ; 'H'
.text:00002F07                 mov     eax, [ebp+var_4]
.text:00002F0A                 imul    eax, 0Ch
.text:00002F0D                 mov     ecx, [ebp+arg_4]
.text:00002F10                 mov     ecx, [ecx+14h]
.text:00002F13                 add     ecx, eax
.text:00002F15                 mov     eax, [edx]
.text:00002F17                 mov     [ecx], eax
.text:00002F19                 mov     eax, [edx+4]
.text:00002F1C                 mov     [ecx+4], eax
.text:00002F1F                 mov     edx, [edx+8]
.text:00002F22                 mov     [ecx+8], edx
.text:00002F25                 jmp     short loc_2EF0
.text:00002F27 ; ---------------------------------------------------------------------------
.text:00002F27
.text:00002F27 loc_2F27:                               ; CODE XREF: _resizeline+1Dj
.text:00002F27                                         ; _resizeline+193j
.text:00002F27                 add     esp, 8
.text:00002F2A                 cmp     ebp, esp
.text:00002F2C                 call    __RTC_CheckEsp
.text:00002F31                 mov     esp, ebp
.text:00002F33                 pop     ebp
.text:00002F34                 retn
.text:00002F34 _resizeline     endp
.text:00002F34
.text:00002F34 ; ---------------------------------------------------------------------------
.text:00002F35                 db 7 dup(0CCh)
.text:00002F3C
.text:00002F3C ; =============== S U B R O U T I N E =======================================
.text:00002F3C
.text:00002F3C ; Attributes: bp-based frame
.text:00002F3C
.text:00002F3C _clear_cc       proc near               ; CODE XREF: _resizeline+4Dp
.text:00002F3C                                         ; _copy_termchar+Bp ...
.text:00002F3C
.text:00002F3C var_8           = dword ptr -8
.text:00002F3C var_4           = dword ptr -4
.text:00002F3C arg_0           = dword ptr  8
.text:00002F3C arg_4           = dword ptr  0Ch
.text:00002F3C
.text:00002F3C                 push    ebp
.text:00002F3D                 mov     ebp, esp
.text:00002F3F                 sub     esp, 8
.text:00002F42                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002F49                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F50                 mov     eax, [ebp+arg_4]
.text:00002F53                 mov     [ebp+var_8], eax
.text:00002F56                 cmp     [ebp+arg_4], 0
.text:00002F5A                 jl      short loc_2F67
.text:00002F5C                 mov     ecx, [ebp+arg_0]
.text:00002F5F                 mov     edx, [ebp+arg_4]
.text:00002F62                 cmp     edx, [ecx+4]
.text:00002F65                 jl      short loc_2F7E
.text:00002F67
.text:00002F67 loc_2F67:                               ; CODE XREF: _clear_cc+1Ej
.text:00002F67                 push    0FFh            ; Line
.text:00002F6C                 push    offset $SG85886 ; "..\\..\\..\\terminal.c"
.text:00002F71                 push    offset $SG85887 ; "col >= 0 && col < line->cols"
.text:00002F76                 call    __wassert
.text:00002F7B ; ---------------------------------------------------------------------------
.text:00002F7B                 add     esp, 0Ch
.text:00002F7E
.text:00002F7E loc_2F7E:                               ; CODE XREF: _clear_cc+29j
.text:00002F7E                 mov     ecx, [ebp+arg_4]
.text:00002F81                 imul    ecx, 0Ch
.text:00002F84                 mov     edx, [ebp+arg_0]
.text:00002F87                 mov     eax, [edx+14h]
.text:00002F8A                 cmp     dword ptr [eax+ecx+8], 0
.text:00002F8F                 jnz     short loc_2F96
.text:00002F91                 jmp     loc_3029
.text:00002F96 ; ---------------------------------------------------------------------------
.text:00002F96
.text:00002F96 loc_2F96:                               ; CODE XREF: _clear_cc+53j
.text:00002F96                 mov     ecx, [ebp+arg_0]
.text:00002F99                 mov     edx, [ecx+10h]
.text:00002F9C                 mov     [ebp+var_4], edx
.text:00002F9F                 mov     eax, [ebp+arg_4]
.text:00002FA2                 imul    eax, 0Ch
.text:00002FA5                 mov     ecx, [ebp+arg_0]
.text:00002FA8                 mov     edx, [ecx+14h]
.text:00002FAB                 mov     ecx, [ebp+arg_4]
.text:00002FAE                 add     ecx, [edx+eax+8]
.text:00002FB2                 mov     edx, [ebp+arg_0]
.text:00002FB5                 mov     [edx+10h], ecx
.text:00002FB8
.text:00002FB8 loc_2FB8:                               ; CODE XREF: _clear_cc+A5j
.text:00002FB8                 mov     eax, [ebp+arg_4]
.text:00002FBB                 imul    eax, 0Ch
.text:00002FBE                 mov     ecx, [ebp+arg_0]
.text:00002FC1                 mov     edx, [ecx+14h]
.text:00002FC4                 cmp     dword ptr [edx+eax+8], 0
.text:00002FC9                 jz      short loc_2FE3
.text:00002FCB                 mov     eax, [ebp+arg_4]
.text:00002FCE                 imul    eax, 0Ch
.text:00002FD1                 mov     ecx, [ebp+arg_0]
.text:00002FD4                 mov     edx, [ecx+14h]
.text:00002FD7                 mov     ecx, [ebp+arg_4]
.text:00002FDA                 add     ecx, [edx+eax+8]
.text:00002FDE                 mov     [ebp+arg_4], ecx
.text:00002FE1                 jmp     short loc_2FB8
.text:00002FE3 ; ---------------------------------------------------------------------------
.text:00002FE3
.text:00002FE3 loc_2FE3:                               ; CODE XREF: _clear_cc+8Dj
.text:00002FE3                 cmp     [ebp+var_4], 0
.text:00002FE7                 jz      short loc_3001
.text:00002FE9                 mov     edx, [ebp+var_4]
.text:00002FEC                 sub     edx, [ebp+arg_4]
.text:00002FEF                 mov     eax, [ebp+arg_4]
.text:00002FF2                 imul    eax, 0Ch
.text:00002FF5                 mov     ecx, [ebp+arg_0]
.text:00002FF8                 mov     ecx, [ecx+14h]
.text:00002FFB                 mov     [ecx+eax+8], edx
.text:00002FFF                 jmp     short loc_3015
.text:00003001 ; ---------------------------------------------------------------------------
.text:00003001
.text:00003001 loc_3001:                               ; CODE XREF: _clear_cc+ABj
.text:00003001                 mov     edx, [ebp+arg_4]
.text:00003004                 imul    edx, 0Ch
.text:00003007                 mov     eax, [ebp+arg_0]
.text:0000300A                 mov     ecx, [eax+14h]
.text:0000300D                 mov     dword ptr [ecx+edx+8], 0
.text:00003015
.text:00003015 loc_3015:                               ; CODE XREF: _clear_cc+C3j
.text:00003015                 mov     edx, [ebp+var_8]
.text:00003018                 imul    edx, 0Ch
.text:0000301B                 mov     eax, [ebp+arg_0]
.text:0000301E                 mov     ecx, [eax+14h]
.text:00003021                 mov     dword ptr [ecx+edx+8], 0
.text:00003029
.text:00003029 loc_3029:                               ; CODE XREF: _clear_cc+55j
.text:00003029                 add     esp, 8
.text:0000302C                 cmp     ebp, esp
.text:0000302E                 call    __RTC_CheckEsp
.text:00003033                 mov     esp, ebp
.text:00003035                 pop     ebp
.text:00003036                 retn
.text:00003036 _clear_cc       endp
.text:00003036
.text:00003036 ; ---------------------------------------------------------------------------
.text:00003037                 db 5 dup(0CCh)
.text:0000303C
.text:0000303C ; =============== S U B R O U T I N E =======================================
.text:0000303C
.text:0000303C ; Attributes: bp-based frame
.text:0000303C
.text:0000303C _check_line_size proc near              ; CODE XREF: _term_clrsb+82p
.text:0000303C                                         ; _erase_lots+206p ...
.text:0000303C
.text:0000303C arg_0           = dword ptr  8
.text:0000303C arg_4           = dword ptr  0Ch
.text:0000303C
.text:0000303C                 push    ebp
.text:0000303D                 mov     ebp, esp
.text:0000303F                 mov     eax, [ebp+arg_0]
.text:00003042                 mov     ecx, [ebp+arg_4]
.text:00003045                 mov     edx, [eax+12Ch]
.text:0000304B                 cmp     edx, [ecx+4]
.text:0000304E                 jz      short loc_306A
.text:00003050                 mov     eax, [ebp+arg_0]
.text:00003053                 mov     ecx, [eax+12Ch]
.text:00003059                 push    ecx
.text:0000305A                 mov     edx, [ebp+arg_4]
.text:0000305D                 push    edx
.text:0000305E                 mov     eax, [ebp+arg_0]
.text:00003061                 push    eax
.text:00003062                 call    _resizeline
.text:00003067                 add     esp, 0Ch
.text:0000306A
.text:0000306A loc_306A:                               ; CODE XREF: _check_line_size+12j
.text:0000306A                 cmp     ebp, esp
.text:0000306C                 call    __RTC_CheckEsp
.text:00003071                 pop     ebp
.text:00003072                 retn
.text:00003072 _check_line_size endp
.text:00003072
.text:00003072 ; ---------------------------------------------------------------------------
.text:00003073                 db 9 dup(0CCh)
.text:0000307C
.text:0000307C ; =============== S U B R O U T I N E =======================================
.text:0000307C
.text:0000307C ; Attributes: bp-based frame
.text:0000307C
.text:0000307C                 public _term_init
.text:0000307C _term_init      proc near
.text:0000307C
.text:0000307C var_4           = dword ptr -4
.text:0000307C arg_0           = dword ptr  8
.text:0000307C arg_4           = dword ptr  0Ch
.text:0000307C arg_8           = dword ptr  10h
.text:0000307C
.text:0000307C                 push    ebp
.text:0000307D                 mov     ebp, esp
.text:0000307F                 push    ecx
.text:00003080                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003087                 push    1170h
.text:0000308C                 push    1
.text:0000308E                 call    _safemalloc
.text:00003093                 add     esp, 8
.text:00003096                 mov     [ebp+var_4], eax
.text:00003099                 mov     eax, [ebp+var_4]
.text:0000309C                 mov     ecx, [ebp+arg_8]
.text:0000309F                 mov     [eax+1088h], ecx
.text:000030A5                 mov     edx, [ebp+var_4]
.text:000030A8                 mov     eax, [ebp+arg_4]
.text:000030AB                 mov     [edx+1090h], eax
.text:000030B1                 mov     ecx, [ebp+arg_0]
.text:000030B4                 push    ecx
.text:000030B5                 call    _conf_copy
.text:000030BA                 add     esp, 4
.text:000030BD                 mov     edx, [ebp+var_4]
.text:000030C0                 mov     [edx+1094h], eax
.text:000030C6                 mov     eax, [ebp+var_4]
.text:000030C9                 mov     dword ptr [eax+108Ch], 0
.text:000030D3                 mov     ecx, [ebp+var_4]
.text:000030D6                 mov     dword ptr [ecx], 0FFFFh
.text:000030DC                 push    offset $SG86486 ; "\x1B[?6c"
.text:000030E1                 mov     edx, [ebp+var_4]
.text:000030E4                 add     edx, 0A40h
.text:000030EA                 push    edx             ; Dest
.text:000030EB                 call    _strcpy
.text:000030F0                 add     esp, 8
.text:000030F3                 mov     eax, [ebp+var_4]
.text:000030F6                 mov     dword ptr [eax+10A4h], 0
.text:00003100                 mov     ecx, [ebp+var_4]
.text:00003103                 mov     dword ptr [ecx+10A8h], 0
.text:0000310D                 mov     edx, [ebp+var_4]
.text:00003110                 mov     dword ptr [edx+1070h], 0
.text:0000311A                 mov     eax, [ebp+var_4]
.text:0000311D                 mov     dword ptr [eax+1074h], 0
.text:00003127                 mov     ecx, [ebp+var_4]
.text:0000312A                 add     ecx, 60h ; '`'
.text:0000312D                 push    ecx
.text:0000312E                 call    _bufchain_init
.text:00003133                 add     esp, 4
.text:00003136                 mov     edx, [ebp+var_4]
.text:00003139                 add     edx, 0F8h ; '°'
.text:0000313F                 push    edx
.text:00003140                 call    _bufchain_init
.text:00003145                 add     esp, 4
.text:00003148                 mov     eax, [ebp+var_4]
.text:0000314B                 mov     dword ptr [eax+0F0h], 0
.text:00003155                 mov     ecx, [ebp+var_4]
.text:00003158                 mov     dword ptr [ecx+0ECh], 0
.text:00003162                 mov     edx, [ebp+var_4]
.text:00003165                 mov     dword ptr [edx+104h], 0
.text:0000316F                 mov     eax, [ebp+var_4]
.text:00003172                 mov     dword ptr [eax+148h], 0
.text:0000317C                 mov     ecx, [ebp+var_4]
.text:0000317F                 mov     dword ptr [ecx+150h], 0
.text:00003189                 mov     edx, [ebp+var_4]
.text:0000318C                 mov     dword ptr [edx+154h], 0
.text:00003196                 mov     eax, [ebp+var_4]
.text:00003199                 mov     dword ptr [eax+168h], 0
.text:000031A3                 mov     ecx, [ebp+var_4]
.text:000031A6                 mov     dword ptr [ecx+0B4h], 0
.text:000031B0                 mov     edx, [ebp+var_4]
.text:000031B3                 mov     dword ptr [edx+0C0h], 0
.text:000031BD                 mov     eax, [ebp+var_4]
.text:000031C0                 mov     dword ptr [eax+0BCh], 0
.text:000031CA                 mov     ecx, [ebp+var_4]
.text:000031CD                 mov     dword ptr [ecx+134h], 1
.text:000031D7                 mov     edx, [ebp+var_4]
.text:000031DA                 mov     dword ptr [edx+14Ch], 0
.text:000031E4                 mov     eax, [ebp+var_4]
.text:000031E7                 mov     dword ptr [eax+0E44h], 0
.text:000031F1                 mov     ecx, [ebp+var_4]
.text:000031F4                 mov     dword ptr [ecx+0E48h], 0
.text:000031FE                 mov     edx, [ebp+var_4]
.text:00003201                 mov     dword ptr [edx+24h], 0
.text:00003208                 mov     eax, [ebp+var_4]
.text:0000320B                 push    eax
.text:0000320C                 call    _term_copy_stuff_from_conf
.text:00003211                 add     esp, 4
.text:00003214                 mov     ecx, [ebp+var_4]
.text:00003217                 mov     dword ptr [ecx+4], 0
.text:0000321E                 mov     edx, [ebp+var_4]
.text:00003221                 mov     dword ptr [edx+0Ch], 0
.text:00003228                 mov     eax, [ebp+var_4]
.text:0000322B                 mov     dword ptr [eax+8], 0
.text:00003232                 mov     ecx, [ebp+var_4]
.text:00003235                 mov     dword ptr [ecx+14h], 0
.text:0000323C                 mov     edx, [ebp+var_4]
.text:0000323F                 mov     dword ptr [edx+1A8h], 0
.text:00003249                 mov     eax, [ebp+var_4]
.text:0000324C                 mov     dword ptr [eax+10h], 0
.text:00003253                 mov     ecx, [ebp+var_4]
.text:00003256                 mov     dword ptr [ecx+18h], 0
.text:0000325D                 mov     edx, [ebp+var_4]
.text:00003260                 mov     dword ptr [edx+20h], 0FFFFFFFFh
.text:00003267                 mov     eax, [ebp+var_4]
.text:0000326A                 mov     dword ptr [eax+1Ch], 0FFFFFFFFh
.text:00003271                 mov     ecx, [ebp+var_4]
.text:00003274                 mov     dword ptr [ecx+0E40h], 0
.text:0000327E                 mov     edx, [ebp+var_4]
.text:00003281                 push    edx
.text:00003282                 call    _deselect
.text:00003287                 add     esp, 4
.text:0000328A                 mov     eax, [ebp+var_4]
.text:0000328D                 mov     dword ptr [eax+12Ch], 0FFFFFFFFh
.text:00003297                 mov     ecx, [ebp+var_4]
.text:0000329A                 mov     dword ptr [ecx+128h], 0FFFFFFFFh
.text:000032A4                 push    1
.text:000032A6                 mov     edx, [ebp+var_4]
.text:000032A9                 push    edx
.text:000032AA                 call    _power_on
.text:000032AF                 add     esp, 8
.text:000032B2                 mov     eax, [ebp+var_4]
.text:000032B5                 mov     dword ptr [eax+2Ch], 0
.text:000032BC                 mov     ecx, [ebp+var_4]
.text:000032BF                 mov     dword ptr [ecx+28h], 0
.text:000032C6                 mov     edx, [ebp+var_4]
.text:000032C9                 mov     dword ptr [edx+30h], 0
.text:000032D0                 mov     eax, [ebp+var_4]
.text:000032D3                 mov     dword ptr [eax+38h], 0
.text:000032DA                 mov     ecx, [ebp+var_4]
.text:000032DD                 mov     dword ptr [ecx+34h], 0
.text:000032E4                 mov     edx, [ebp+var_4]
.text:000032E7                 mov     dword ptr [edx+106Ch], 0FFFFFFFFh
.text:000032F1                 mov     eax, [ebp+var_4]
.text:000032F4                 mov     dword ptr [eax+107Ch], 0
.text:000032FE                 mov     ecx, [ebp+var_4]
.text:00003301                 mov     dword ptr [ecx+1080h], 0
.text:0000330B                 mov     edx, [ebp+var_4]
.text:0000330E                 mov     dword ptr [edx+1098h], 0
.text:00003318                 mov     eax, [ebp+var_4]
.text:0000331B                 mov     dword ptr [eax+10B4h], 0
.text:00003325                 mov     ecx, [ebp+var_4]
.text:00003328                 mov     dword ptr [ecx+10B8h], 0
.text:00003332                 mov     edx, [ebp+var_4]
.text:00003335                 mov     dword ptr [edx+10BCh], 0
.text:0000333F                 mov     eax, [ebp+var_4]
.text:00003342                 mov     dword ptr [eax+10C0h], 0
.text:0000334C                 mov     ecx, [ebp+var_4]
.text:0000334F                 mov     dword ptr [ecx+10C4h], 0
.text:00003359                 mov     edx, [ebp+var_4]
.text:0000335C                 mov     dword ptr [edx+109Ch], 0
.text:00003366                 mov     eax, [ebp+var_4]
.text:00003369                 mov     dword ptr [eax+10D0h], 0
.text:00003373                 mov     ecx, [ebp+var_4]
.text:00003376                 mov     dword ptr [ecx+10CCh], 0
.text:00003380                 mov     edx, [ebp+var_4]
.text:00003383                 mov     dword ptr [edx+10C8h], 0
.text:0000338D                 mov     eax, [ebp+var_4]
.text:00003390                 mov     dword ptr [eax+48h], 0D820h
.text:00003397                 mov     ecx, [ebp+var_4]
.text:0000339A                 mov     dword ptr [ecx+4Ch], 20500h
.text:000033A1                 mov     edx, [ebp+var_4]
.text:000033A4                 mov     dword ptr [edx+50h], 0
.text:000033AB                 mov     eax, [ebp+var_4]
.text:000033AE                 add     eax, 48h ; 'H'
.text:000033B1                 mov     ecx, [ebp+var_4]
.text:000033B4                 add     ecx, 54h ; 'T'
.text:000033B7                 mov     edx, [eax]
.text:000033B9                 mov     [ecx], edx
.text:000033BB                 mov     edx, [eax+4]
.text:000033BE                 mov     [ecx+4], edx
.text:000033C1                 mov     eax, [eax+8]
.text:000033C4                 mov     [ecx+8], eax
.text:000033C7                 mov     eax, [ebp+var_4]
.text:000033CA                 add     esp, 4
.text:000033CD                 cmp     ebp, esp
.text:000033CF                 call    __RTC_CheckEsp
.text:000033D4                 mov     esp, ebp
.text:000033D6                 pop     ebp
.text:000033D7                 retn
.text:000033D7 _term_init      endp
.text:000033D7
.text:000033D7 ; ---------------------------------------------------------------------------
.text:000033D8                 db 4 dup(0CCh)
.text:000033DC
.text:000033DC ; =============== S U B R O U T I N E =======================================
.text:000033DC
.text:000033DC ; Attributes: bp-based frame
.text:000033DC
.text:000033DC                 public _term_free
.text:000033DC _term_free      proc near
.text:000033DC
.text:000033DC var_C           = dword ptr -0Ch
.text:000033DC var_8           = dword ptr -8
.text:000033DC var_4           = dword ptr -4
.text:000033DC arg_0           = dword ptr  8
.text:000033DC
.text:000033DC                 push    ebp
.text:000033DD                 mov     ebp, esp
.text:000033DF                 sub     esp, 0Ch
.text:000033E2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000033E9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000033F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033F7
.text:000033F7 loc_33F7:                               ; CODE XREF: _term_free+41j
.text:000033F7                 push    0
.text:000033F9                 mov     eax, [ebp+arg_0]
.text:000033FC                 mov     ecx, [eax+4]
.text:000033FF                 push    ecx
.text:00003400                 call    _delpos234
.text:00003405                 add     esp, 8
.text:00003408                 mov     [ebp+var_4], eax
.text:0000340B                 cmp     [ebp+var_4], 0
.text:0000340F                 jz      short loc_341F
.text:00003411                 mov     edx, [ebp+var_4]
.text:00003414                 push    edx
.text:00003415                 call    _safefree
.text:0000341A                 add     esp, 4
.text:0000341D                 jmp     short loc_33F7
.text:0000341F ; ---------------------------------------------------------------------------
.text:0000341F
.text:0000341F loc_341F:                               ; CODE XREF: _term_free+33j
.text:0000341F                 mov     eax, [ebp+arg_0]
.text:00003422                 mov     ecx, [eax+4]
.text:00003425                 push    ecx
.text:00003426                 call    _freetree234
.text:0000342B                 add     esp, 4
.text:0000342E
.text:0000342E loc_342E:                               ; CODE XREF: _term_free+78j
.text:0000342E                 push    0
.text:00003430                 mov     edx, [ebp+arg_0]
.text:00003433                 mov     eax, [edx+8]
.text:00003436                 push    eax
.text:00003437                 call    _delpos234
.text:0000343C                 add     esp, 8
.text:0000343F                 mov     [ebp+var_4], eax
.text:00003442                 cmp     [ebp+var_4], 0
.text:00003446                 jz      short loc_3456
.text:00003448                 mov     ecx, [ebp+var_4]
.text:0000344B                 push    ecx
.text:0000344C                 call    _freeline
.text:00003451                 add     esp, 4
.text:00003454                 jmp     short loc_342E
.text:00003456 ; ---------------------------------------------------------------------------
.text:00003456
.text:00003456 loc_3456:                               ; CODE XREF: _term_free+6Aj
.text:00003456                 mov     edx, [ebp+arg_0]
.text:00003459                 mov     eax, [edx+8]
.text:0000345C                 push    eax
.text:0000345D                 call    _freetree234
.text:00003462                 add     esp, 4
.text:00003465
.text:00003465 loc_3465:                               ; CODE XREF: _term_free+AFj
.text:00003465                 push    0
.text:00003467                 mov     ecx, [ebp+arg_0]
.text:0000346A                 mov     edx, [ecx+0Ch]
.text:0000346D                 push    edx
.text:0000346E                 call    _delpos234
.text:00003473                 add     esp, 8
.text:00003476                 mov     [ebp+var_4], eax
.text:00003479                 cmp     [ebp+var_4], 0
.text:0000347D                 jz      short loc_348D
.text:0000347F                 mov     eax, [ebp+var_4]
.text:00003482                 push    eax
.text:00003483                 call    _freeline
.text:00003488                 add     esp, 4
.text:0000348B                 jmp     short loc_3465
.text:0000348D ; ---------------------------------------------------------------------------
.text:0000348D
.text:0000348D loc_348D:                               ; CODE XREF: _term_free+A1j
.text:0000348D                 mov     ecx, [ebp+arg_0]
.text:00003490                 mov     edx, [ecx+0Ch]
.text:00003493                 push    edx
.text:00003494                 call    _freetree234
.text:00003499                 add     esp, 4
.text:0000349C                 mov     eax, [ebp+arg_0]
.text:0000349F                 cmp     dword ptr [eax+18h], 0
.text:000034A3                 jz      short loc_34DC
.text:000034A5                 mov     [ebp+var_C], 0
.text:000034AC                 jmp     short loc_34B7
.text:000034AE ; ---------------------------------------------------------------------------
.text:000034AE
.text:000034AE loc_34AE:                               ; CODE XREF: _term_free+FEj
.text:000034AE                 mov     ecx, [ebp+var_C]
.text:000034B1                 add     ecx, 1
.text:000034B4                 mov     [ebp+var_C], ecx
.text:000034B7
.text:000034B7 loc_34B7:                               ; CODE XREF: _term_free+D0j
.text:000034B7                 mov     edx, [ebp+arg_0]
.text:000034BA                 mov     eax, [ebp+var_C]
.text:000034BD                 cmp     eax, [edx+128h]
.text:000034C3                 jge     short loc_34DC
.text:000034C5                 mov     ecx, [ebp+arg_0]
.text:000034C8                 mov     edx, [ecx+18h]
.text:000034CB                 mov     eax, [ebp+var_C]
.text:000034CE                 mov     ecx, [edx+eax*4]
.text:000034D1                 push    ecx
.text:000034D2                 call    _freeline
.text:000034D7                 add     esp, 4
.text:000034DA                 jmp     short loc_34AE
.text:000034DC ; ---------------------------------------------------------------------------
.text:000034DC
.text:000034DC loc_34DC:                               ; CODE XREF: _term_free+C7j
.text:000034DC                                         ; _term_free+E7j
.text:000034DC                 mov     edx, [ebp+arg_0]
.text:000034DF                 mov     eax, [edx+18h]
.text:000034E2                 push    eax
.text:000034E3                 call    _safefree
.text:000034E8                 add     esp, 4
.text:000034EB
.text:000034EB loc_34EB:                               ; CODE XREF: _term_free+138j
.text:000034EB                 mov     ecx, [ebp+arg_0]
.text:000034EE                 cmp     dword ptr [ecx+28h], 0
.text:000034F2                 jz      short loc_3516
.text:000034F4                 mov     edx, [ebp+arg_0]
.text:000034F7                 mov     eax, [edx+28h]
.text:000034FA                 mov     [ebp+var_8], eax
.text:000034FD                 mov     ecx, [ebp+arg_0]
.text:00003500                 mov     edx, [ebp+var_8]
.text:00003503                 mov     eax, [edx]
.text:00003505                 mov     [ecx+28h], eax
.text:00003508                 mov     ecx, [ebp+var_8]
.text:0000350B                 push    ecx
.text:0000350C                 call    _safefree
.text:00003511                 add     esp, 4
.text:00003514                 jmp     short loc_34EB
.text:00003516 ; ---------------------------------------------------------------------------
.text:00003516
.text:00003516 loc_3516:                               ; CODE XREF: _term_free+116j
.text:00003516                 mov     edx, [ebp+arg_0]
.text:00003519                 add     edx, 60h ; '`'
.text:0000351C                 push    edx
.text:0000351D                 call    _bufchain_clear
.text:00003522                 add     esp, 4
.text:00003525                 mov     eax, [ebp+arg_0]
.text:00003528                 cmp     dword ptr [eax+104h], 0
.text:0000352F                 jz      short loc_3543
.text:00003531                 mov     ecx, [ebp+arg_0]
.text:00003534                 mov     edx, [ecx+104h]
.text:0000353A                 push    edx
.text:0000353B                 call    _printer_finish_job
.text:00003540                 add     esp, 4
.text:00003543
.text:00003543 loc_3543:                               ; CODE XREF: _term_free+153j
.text:00003543                 mov     eax, [ebp+arg_0]
.text:00003546                 add     eax, 0F8h ; '°'
.text:0000354B                 push    eax
.text:0000354C                 call    _bufchain_clear
.text:00003551                 add     esp, 4
.text:00003554                 mov     ecx, [ebp+arg_0]
.text:00003557                 mov     edx, [ecx+1070h]
.text:0000355D                 push    edx
.text:0000355E                 call    _safefree
.text:00003563                 add     esp, 4
.text:00003566                 mov     eax, [ebp+arg_0]
.text:00003569                 mov     ecx, [eax+10B4h]
.text:0000356F                 push    ecx
.text:00003570                 call    _safefree
.text:00003575                 add     esp, 4
.text:00003578                 mov     edx, [ebp+arg_0]
.text:0000357B                 mov     eax, [edx+10BCh]
.text:00003581                 push    eax
.text:00003582                 call    _safefree
.text:00003587                 add     esp, 4
.text:0000358A                 mov     ecx, [ebp+arg_0]
.text:0000358D                 mov     edx, [ecx+10C0h]
.text:00003593                 push    edx
.text:00003594                 call    _safefree
.text:00003599                 add     esp, 4
.text:0000359C                 mov     [ebp+var_C], 0
.text:000035A3                 jmp     short loc_35AE
.text:000035A5 ; ---------------------------------------------------------------------------
.text:000035A5
.text:000035A5 loc_35A5:                               ; CODE XREF: _term_free+250j
.text:000035A5                 mov     eax, [ebp+var_C]
.text:000035A8                 add     eax, 1
.text:000035AB                 mov     [ebp+var_C], eax
.text:000035AE
.text:000035AE loc_35AE:                               ; CODE XREF: _term_free+1C7j
.text:000035AE                 mov     ecx, [ebp+arg_0]
.text:000035B1                 mov     edx, [ebp+var_C]
.text:000035B4                 cmp     edx, [ecx+10D0h]
.text:000035BA                 jge     short loc_3631
.text:000035BC                 mov     eax, [ebp+var_C]
.text:000035BF                 shl     eax, 4
.text:000035C2                 mov     ecx, [ebp+arg_0]
.text:000035C5                 mov     edx, [ecx+10C8h]
.text:000035CB                 mov     eax, [edx+eax+4]
.text:000035CF                 push    eax
.text:000035D0                 call    _safefree
.text:000035D5                 add     esp, 4
.text:000035D8                 mov     ecx, [ebp+var_C]
.text:000035DB                 shl     ecx, 4
.text:000035DE                 mov     edx, [ebp+arg_0]
.text:000035E1                 mov     eax, [edx+10CCh]
.text:000035E7                 mov     ecx, [eax+ecx+4]
.text:000035EB                 push    ecx
.text:000035EC                 call    _safefree
.text:000035F1                 add     esp, 4
.text:000035F4                 mov     edx, [ebp+var_C]
.text:000035F7                 shl     edx, 4
.text:000035FA                 mov     eax, [ebp+arg_0]
.text:000035FD                 mov     ecx, [eax+10CCh]
.text:00003603                 mov     edx, [ecx+edx+8]
.text:00003607                 push    edx
.text:00003608                 call    _safefree
.text:0000360D                 add     esp, 4
.text:00003610                 mov     eax, [ebp+var_C]
.text:00003613                 shl     eax, 4
.text:00003616                 mov     ecx, [ebp+arg_0]
.text:00003619                 mov     edx, [ecx+10CCh]
.text:0000361F                 mov     eax, [edx+eax+0Ch]
.text:00003623                 push    eax
.text:00003624                 call    _safefree
.text:00003629                 add     esp, 4
.text:0000362C                 jmp     loc_35A5
.text:00003631 ; ---------------------------------------------------------------------------
.text:00003631
.text:00003631 loc_3631:                               ; CODE XREF: _term_free+1DEj
.text:00003631                 mov     ecx, [ebp+arg_0]
.text:00003634                 mov     edx, [ecx+10C8h]
.text:0000363A                 push    edx
.text:0000363B                 call    _safefree
.text:00003640                 add     esp, 4
.text:00003643                 mov     eax, [ebp+arg_0]
.text:00003646                 mov     ecx, [eax+10CCh]
.text:0000364C                 push    ecx
.text:0000364D                 call    _safefree
.text:00003652                 add     esp, 4
.text:00003655                 mov     edx, [ebp+arg_0]
.text:00003658                 mov     eax, [edx+0E40h]
.text:0000365E                 push    eax
.text:0000365F                 call    _safefree
.text:00003664                 add     esp, 4
.text:00003667                 mov     ecx, [ebp+arg_0]
.text:0000366A                 push    ecx
.text:0000366B                 call    _expire_timer_context
.text:00003670                 add     esp, 4
.text:00003673                 mov     edx, [ebp+arg_0]
.text:00003676                 mov     eax, [edx+1094h]
.text:0000367C                 push    eax
.text:0000367D                 call    _conf_free
.text:00003682                 add     esp, 4
.text:00003685                 mov     ecx, [ebp+arg_0]
.text:00003688                 push    ecx
.text:00003689                 call    _safefree
.text:0000368E                 add     esp, 4
.text:00003691                 add     esp, 0Ch
.text:00003694                 cmp     ebp, esp
.text:00003696                 call    __RTC_CheckEsp
.text:0000369B                 mov     esp, ebp
.text:0000369D                 pop     ebp
.text:0000369E                 retn
.text:0000369E _term_free      endp
.text:0000369E
.text:0000369E ; ---------------------------------------------------------------------------
.text:0000369F                 db 0Dh dup(0CCh)
.text:000036AC
.text:000036AC ; =============== S U B R O U T I N E =======================================
.text:000036AC
.text:000036AC ; Attributes: bp-based frame
.text:000036AC
.text:000036AC _freeline       proc near               ; CODE XREF: _term_free+70p
.text:000036AC                                         ; _term_free+A7p ...
.text:000036AC
.text:000036AC arg_0           = dword ptr  8
.text:000036AC
.text:000036AC                 push    ebp
.text:000036AD                 mov     ebp, esp
.text:000036AF                 cmp     [ebp+arg_0], 0
.text:000036B3                 jz      short loc_36D0
.text:000036B5                 mov     eax, [ebp+arg_0]
.text:000036B8                 mov     ecx, [eax+14h]
.text:000036BB                 push    ecx
.text:000036BC                 call    _safefree
.text:000036C1                 add     esp, 4
.text:000036C4                 mov     edx, [ebp+arg_0]
.text:000036C7                 push    edx
.text:000036C8                 call    _safefree
.text:000036CD                 add     esp, 4
.text:000036D0
.text:000036D0 loc_36D0:                               ; CODE XREF: _freeline+7j
.text:000036D0                 cmp     ebp, esp
.text:000036D2                 call    __RTC_CheckEsp
.text:000036D7                 pop     ebp
.text:000036D8                 retn
.text:000036D8 _freeline       endp
.text:000036D8
.text:000036D8 ; ---------------------------------------------------------------------------
.text:000036D9                 align 4
.text:000036DC
.text:000036DC ; =============== S U B R O U T I N E =======================================
.text:000036DC
.text:000036DC ; Attributes: bp-based frame
.text:000036DC
.text:000036DC                 public _term_size
.text:000036DC _term_size      proc near
.text:000036DC
.text:000036DC var_34          = dword ptr -34h
.text:000036DC var_30          = dword ptr -30h
.text:000036DC var_2C          = dword ptr -2Ch
.text:000036DC var_28          = dword ptr -28h
.text:000036DC var_24          = dword ptr -24h
.text:000036DC var_20          = dword ptr -20h
.text:000036DC var_1C          = dword ptr -1Ch
.text:000036DC var_18          = dword ptr -18h
.text:000036DC var_14          = dword ptr -14h
.text:000036DC var_10          = dword ptr -10h
.text:000036DC var_C           = dword ptr -0Ch
.text:000036DC var_8           = dword ptr -8
.text:000036DC var_4           = dword ptr -4
.text:000036DC arg_0           = dword ptr  8
.text:000036DC arg_4           = dword ptr  0Ch
.text:000036DC arg_8           = dword ptr  10h
.text:000036DC arg_C           = dword ptr  14h
.text:000036DC
.text:000036DC                 push    ebp
.text:000036DD                 mov     ebp, esp
.text:000036DF                 sub     esp, 34h
.text:000036E2                 push    esi
.text:000036E3                 push    edi
.text:000036E4                 lea     edi, [ebp+var_34]
.text:000036E7                 mov     ecx, 0Dh
.text:000036EC                 mov     eax, 0CCCCCCCCh
.text:000036F1                 rep stosd
.text:000036F3                 mov     eax, [ebp+arg_0]
.text:000036F6                 mov     ecx, [eax+128h]
.text:000036FC                 mov     [ebp+var_18], ecx
.text:000036FF                 mov     edx, [ebp+arg_0]
.text:00003702                 mov     eax, [edx+1A4h]
.text:00003708                 mov     [ebp+var_20], eax
.text:0000370B                 mov     ecx, [ebp+arg_0]
.text:0000370E                 mov     edx, [ebp+arg_4]
.text:00003711                 cmp     edx, [ecx+128h]
.text:00003717                 jnz     short loc_373A
.text:00003719                 mov     eax, [ebp+arg_0]
.text:0000371C                 mov     ecx, [ebp+arg_8]
.text:0000371F                 cmp     ecx, [eax+12Ch]
.text:00003725                 jnz     short loc_373A
.text:00003727                 mov     edx, [ebp+arg_0]
.text:0000372A                 mov     eax, [ebp+arg_C]
.text:0000372D                 cmp     eax, [edx+130h]
.text:00003733                 jnz     short loc_373A
.text:00003735                 jmp     loc_3F83
.text:0000373A ; ---------------------------------------------------------------------------
.text:0000373A
.text:0000373A loc_373A:                               ; CODE XREF: _term_size+3Bj
.text:0000373A                                         ; _term_size+49j ...
.text:0000373A                 cmp     [ebp+arg_4], 1
.text:0000373E                 jge     short loc_3747
.text:00003740                 mov     [ebp+arg_4], 1
.text:00003747
.text:00003747 loc_3747:                               ; CODE XREF: _term_size+62j
.text:00003747                 cmp     [ebp+arg_8], 1
.text:0000374B                 jge     short loc_3754
.text:0000374D                 mov     [ebp+arg_8], 1
.text:00003754
.text:00003754 loc_3754:                               ; CODE XREF: _term_size+6Fj
.text:00003754                 mov     ecx, [ebp+arg_0]
.text:00003757                 push    ecx
.text:00003758                 call    _deselect
.text:0000375D                 add     esp, 4
.text:00003760                 push    0
.text:00003762                 push    0
.text:00003764                 push    0
.text:00003766                 mov     edx, [ebp+arg_0]
.text:00003769                 push    edx
.text:0000376A                 call    _swap_screen
.text:0000376F                 add     esp, 10h
.text:00003772                 mov     eax, [ebp+arg_0]
.text:00003775                 mov     dword ptr [eax+7Ch], 0
.text:0000377C                 mov     ecx, [ebp+arg_0]
.text:0000377F                 mov     dword ptr [ecx+19Ch], 0
.text:00003789                 mov     edx, [ebp+arg_4]
.text:0000378C                 sub     edx, 1
.text:0000378F                 mov     [ebp+var_2C], edx
.text:00003792                 mov     eax, [ebp+arg_0]
.text:00003795                 mov     ecx, [ebp+var_2C]
.text:00003798                 mov     [eax+80h], ecx
.text:0000379E                 mov     edx, [ebp+arg_0]
.text:000037A1                 mov     eax, [ebp+var_2C]
.text:000037A4                 mov     [edx+1A0h], eax
.text:000037AA                 mov     ecx, [ebp+arg_0]
.text:000037AD                 cmp     dword ptr [ecx+128h], 0FFFFFFFFh
.text:000037B4                 jnz     short loc_37ED
.text:000037B6                 push    0
.text:000037B8                 call    _newtree234
.text:000037BD                 add     esp, 4
.text:000037C0                 mov     edx, [ebp+arg_0]
.text:000037C3                 mov     [edx+4], eax
.text:000037C6                 push    0
.text:000037C8                 call    _newtree234
.text:000037CD                 add     esp, 4
.text:000037D0                 mov     ecx, [ebp+arg_0]
.text:000037D3                 mov     [ecx+8], eax
.text:000037D6                 mov     edx, [ebp+arg_0]
.text:000037D9                 mov     dword ptr [edx+14h], 0
.text:000037E0                 mov     eax, [ebp+arg_0]
.text:000037E3                 mov     dword ptr [eax+128h], 0
.text:000037ED
.text:000037ED loc_37ED:                               ; CODE XREF: _term_size+D8j
.text:000037ED                 mov     ecx, [ebp+arg_0]
.text:000037F0                 mov     edx, [ecx+4]
.text:000037F3                 push    edx
.text:000037F4                 call    _count234
.text:000037F9                 add     esp, 4
.text:000037FC                 mov     [ebp+var_1C], eax
.text:000037FF                 mov     eax, [ebp+arg_0]
.text:00003802                 mov     ecx, [eax+8]
.text:00003805                 push    ecx
.text:00003806                 call    _count234
.text:0000380B                 add     esp, 4
.text:0000380E                 mov     edx, [ebp+arg_0]
.text:00003811                 cmp     [edx+128h], eax
.text:00003817                 jz      short loc_3830
.text:00003819                 push    6DEh            ; Line
.text:0000381E                 push    offset $SG86552 ; "..\\..\\..\\terminal.c"
.text:00003823                 push    offset $SG86553 ; "term->rows == count234(term->screen)"
.text:00003828                 call    __wassert
.text:0000382D ; ---------------------------------------------------------------------------
.text:0000382D                 add     esp, 0Ch
.text:00003830
.text:00003830 loc_3830:                               ; CODE XREF: _term_size+13Bj
.text:00003830                                         ; _term_size+296j
.text:00003830                 mov     ecx, [ebp+arg_0]
.text:00003833                 mov     edx, [ecx+128h]
.text:00003839                 cmp     edx, [ebp+arg_4]
.text:0000383C                 jge     loc_3977
.text:00003842                 mov     eax, [ebp+arg_0]
.text:00003845                 cmp     dword ptr [eax+14h], 0
.text:00003849                 jle     loc_3925
.text:0000384F                 mov     ecx, [ebp+arg_0]
.text:00003852                 mov     edx, [ebp+var_1C]
.text:00003855                 cmp     edx, [ecx+14h]
.text:00003858                 jge     short loc_3871
.text:0000385A                 push    6E3h            ; Line
.text:0000385F                 push    offset $SG86560 ; "..\\..\\..\\terminal.c"
.text:00003864                 push    offset $SG86561 ; "sblen >= term->tempsblines"
.text:00003869                 call    __wassert
.text:0000386E ; ---------------------------------------------------------------------------
.text:0000386E                 add     esp, 0Ch
.text:00003871
.text:00003871 loc_3871:                               ; CODE XREF: _term_size+17Cj
.text:00003871                 mov     ecx, [ebp+var_1C]
.text:00003874                 sub     ecx, 1
.text:00003877                 mov     [ebp+var_1C], ecx
.text:0000387A                 mov     edx, [ebp+var_1C]
.text:0000387D                 push    edx
.text:0000387E                 mov     eax, [ebp+arg_0]
.text:00003881                 mov     ecx, [eax+4]
.text:00003884                 push    ecx
.text:00003885                 call    _delpos234
.text:0000388A                 add     esp, 8
.text:0000388D                 mov     [ebp+var_24], eax
.text:00003890                 push    0
.text:00003892                 mov     edx, [ebp+var_24]
.text:00003895                 push    edx
.text:00003896                 call    _decompressline
.text:0000389B                 add     esp, 8
.text:0000389E                 mov     [ebp+var_C], eax
.text:000038A1                 mov     eax, [ebp+var_24]
.text:000038A4                 push    eax
.text:000038A5                 call    _safefree
.text:000038AA                 add     esp, 4
.text:000038AD                 mov     ecx, [ebp+var_C]
.text:000038B0                 mov     dword ptr [ecx+0Ch], 0
.text:000038B7                 mov     edx, [ebp+arg_0]
.text:000038BA                 mov     eax, [edx+14h]
.text:000038BD                 sub     eax, 1
.text:000038C0                 mov     ecx, [ebp+arg_0]
.text:000038C3                 mov     [ecx+14h], eax
.text:000038C6                 push    0
.text:000038C8                 mov     edx, [ebp+var_C]
.text:000038CB                 push    edx
.text:000038CC                 mov     eax, [ebp+arg_0]
.text:000038CF                 mov     ecx, [eax+8]
.text:000038D2                 push    ecx
.text:000038D3                 call    _addpos234
.text:000038D8                 add     esp, 0Ch
.text:000038DB                 mov     edx, [ebp+arg_0]
.text:000038DE                 mov     eax, [edx+6Ch]
.text:000038E1                 add     eax, 1
.text:000038E4                 mov     ecx, [ebp+arg_0]
.text:000038E7                 mov     [ecx+6Ch], eax
.text:000038EA                 mov     edx, [ebp+arg_0]
.text:000038ED                 mov     eax, [edx+74h]
.text:000038F0                 add     eax, 1
.text:000038F3                 mov     ecx, [ebp+arg_0]
.text:000038F6                 mov     [ecx+74h], eax
.text:000038F9                 mov     edx, [ebp+arg_0]
.text:000038FC                 mov     eax, [edx+17Ch]
.text:00003902                 add     eax, 1
.text:00003905                 mov     ecx, [ebp+arg_0]
.text:00003908                 mov     [ecx+17Ch], eax
.text:0000390E                 mov     edx, [ebp+arg_0]
.text:00003911                 mov     eax, [edx+108h]
.text:00003917                 add     eax, 1
.text:0000391A                 mov     ecx, [ebp+arg_0]
.text:0000391D                 mov     [ecx+108h], eax
.text:00003923                 jmp     short loc_395D
.text:00003925 ; ---------------------------------------------------------------------------
.text:00003925
.text:00003925 loc_3925:                               ; CODE XREF: _term_size+16Dj
.text:00003925                 push    0
.text:00003927                 mov     edx, [ebp+arg_8]
.text:0000392A                 push    edx
.text:0000392B                 mov     eax, [ebp+arg_0]
.text:0000392E                 push    eax
.text:0000392F                 call    _newline
.text:00003934                 add     esp, 0Ch
.text:00003937                 mov     [ebp+var_C], eax
.text:0000393A                 mov     ecx, [ebp+arg_0]
.text:0000393D                 mov     edx, [ecx+8]
.text:00003940                 push    edx
.text:00003941                 call    _count234
.text:00003946                 add     esp, 4
.text:00003949                 push    eax
.text:0000394A                 mov     eax, [ebp+var_C]
.text:0000394D                 push    eax
.text:0000394E                 mov     ecx, [ebp+arg_0]
.text:00003951                 mov     edx, [ecx+8]
.text:00003954                 push    edx
.text:00003955                 call    _addpos234
.text:0000395A                 add     esp, 0Ch
.text:0000395D
.text:0000395D loc_395D:                               ; CODE XREF: _term_size+247j
.text:0000395D                 mov     eax, [ebp+arg_0]
.text:00003960                 mov     ecx, [eax+128h]
.text:00003966                 add     ecx, 1
.text:00003969                 mov     edx, [ebp+arg_0]
.text:0000396C                 mov     [edx+128h], ecx
.text:00003972                 jmp     loc_3830
.text:00003977 ; ---------------------------------------------------------------------------
.text:00003977
.text:00003977 loc_3977:                               ; CODE XREF: _term_size+160j
.text:00003977                                         ; _term_size+3ACj
.text:00003977                 mov     eax, [ebp+arg_0]
.text:0000397A                 mov     ecx, [eax+128h]
.text:00003980                 cmp     ecx, [ebp+arg_4]
.text:00003983                 jle     loc_3A8D
.text:00003989                 mov     edx, [ebp+arg_0]
.text:0000398C                 mov     eax, [edx+128h]
.text:00003992                 sub     eax, 1
.text:00003995                 mov     ecx, [ebp+arg_0]
.text:00003998                 cmp     [ecx+6Ch], eax
.text:0000399B                 jge     short loc_39CD
.text:0000399D                 mov     edx, [ebp+arg_0]
.text:000039A0                 mov     eax, [edx+128h]
.text:000039A6                 sub     eax, 1
.text:000039A9                 push    eax
.text:000039AA                 mov     ecx, [ebp+arg_0]
.text:000039AD                 mov     edx, [ecx+8]
.text:000039B0                 push    edx
.text:000039B1                 call    _delpos234
.text:000039B6                 add     esp, 8
.text:000039B9                 mov     [ebp+var_C], eax
.text:000039BC                 mov     eax, [ebp+var_C]
.text:000039BF                 push    eax
.text:000039C0                 call    _freeline
.text:000039C5                 add     esp, 4
.text:000039C8                 jmp     loc_3A73
.text:000039CD ; ---------------------------------------------------------------------------
.text:000039CD
.text:000039CD loc_39CD:                               ; CODE XREF: _term_size+2BFj
.text:000039CD                 push    0
.text:000039CF                 mov     ecx, [ebp+arg_0]
.text:000039D2                 mov     edx, [ecx+8]
.text:000039D5                 push    edx
.text:000039D6                 call    _delpos234
.text:000039DB                 add     esp, 8
.text:000039DE                 mov     [ebp+var_C], eax
.text:000039E1                 mov     eax, [ebp+var_1C]
.text:000039E4                 mov     [ebp+var_30], eax
.text:000039E7                 mov     ecx, [ebp+var_1C]
.text:000039EA                 add     ecx, 1
.text:000039ED                 mov     [ebp+var_1C], ecx
.text:000039F0                 mov     edx, [ebp+var_30]
.text:000039F3                 push    edx
.text:000039F4                 mov     eax, [ebp+var_C]
.text:000039F7                 push    eax
.text:000039F8                 call    _compressline
.text:000039FD                 add     esp, 4
.text:00003A00                 push    eax
.text:00003A01                 mov     ecx, [ebp+arg_0]
.text:00003A04                 mov     edx, [ecx+4]
.text:00003A07                 push    edx
.text:00003A08                 call    _addpos234
.text:00003A0D                 add     esp, 0Ch
.text:00003A10                 mov     eax, [ebp+var_C]
.text:00003A13                 push    eax
.text:00003A14                 call    _freeline
.text:00003A19                 add     esp, 4
.text:00003A1C                 mov     ecx, [ebp+arg_0]
.text:00003A1F                 mov     edx, [ecx+14h]
.text:00003A22                 add     edx, 1
.text:00003A25                 mov     eax, [ebp+arg_0]
.text:00003A28                 mov     [eax+14h], edx
.text:00003A2B                 mov     ecx, [ebp+arg_0]
.text:00003A2E                 mov     edx, [ecx+6Ch]
.text:00003A31                 sub     edx, 1
.text:00003A34                 mov     eax, [ebp+arg_0]
.text:00003A37                 mov     [eax+6Ch], edx
.text:00003A3A                 mov     ecx, [ebp+arg_0]
.text:00003A3D                 mov     edx, [ecx+74h]
.text:00003A40                 sub     edx, 1
.text:00003A43                 mov     eax, [ebp+arg_0]
.text:00003A46                 mov     [eax+74h], edx
.text:00003A49                 mov     ecx, [ebp+arg_0]
.text:00003A4C                 mov     edx, [ecx+17Ch]
.text:00003A52                 sub     edx, 1
.text:00003A55                 mov     eax, [ebp+arg_0]
.text:00003A58                 mov     [eax+17Ch], edx
.text:00003A5E                 mov     ecx, [ebp+arg_0]
.text:00003A61                 mov     edx, [ecx+108h]
.text:00003A67                 sub     edx, 1
.text:00003A6A                 mov     eax, [ebp+arg_0]
.text:00003A6D                 mov     [eax+108h], edx
.text:00003A73
.text:00003A73 loc_3A73:                               ; CODE XREF: _term_size+2ECj
.text:00003A73                 mov     ecx, [ebp+arg_0]
.text:00003A76                 mov     edx, [ecx+128h]
.text:00003A7C                 sub     edx, 1
.text:00003A7F                 mov     eax, [ebp+arg_0]
.text:00003A82                 mov     [eax+128h], edx
.text:00003A88                 jmp     loc_3977
.text:00003A8D ; ---------------------------------------------------------------------------
.text:00003A8D
.text:00003A8D loc_3A8D:                               ; CODE XREF: _term_size+2A7j
.text:00003A8D                 mov     ecx, [ebp+arg_0]
.text:00003A90                 mov     edx, [ecx+128h]
.text:00003A96                 cmp     edx, [ebp+arg_4]
.text:00003A99                 jz      short loc_3AB2
.text:00003A9B                 push    708h            ; Line
.text:00003AA0                 push    offset $SG86570 ; "..\\..\\..\\terminal.c"
.text:00003AA5                 push    offset $SG86571 ; "term->rows == newrows"
.text:00003AAA                 call    __wassert
.text:00003AAF ; ---------------------------------------------------------------------------
.text:00003AAF                 add     esp, 0Ch
.text:00003AB2
.text:00003AB2 loc_3AB2:                               ; CODE XREF: _term_size+3BDj
.text:00003AB2                 mov     ecx, [ebp+arg_0]
.text:00003AB5                 mov     edx, [ecx+8]
.text:00003AB8                 push    edx
.text:00003AB9                 call    _count234
.text:00003ABE                 add     esp, 4
.text:00003AC1                 cmp     eax, [ebp+arg_4]
.text:00003AC4                 jz      short loc_3ADD
.text:00003AC6                 push    709h            ; Line
.text:00003ACB                 push    offset $SG86573 ; "..\\..\\..\\terminal.c"
.text:00003AD0                 push    offset $SG86574 ; "count234(term->screen) == newrows"
.text:00003AD5                 call    __wassert
.text:00003ADA ; ---------------------------------------------------------------------------
.text:00003ADA                 add     esp, 0Ch
.text:00003ADD
.text:00003ADD loc_3ADD:                               ; CODE XREF: _term_size+3E8j
.text:00003ADD                                         ; _term_size+432j
.text:00003ADD                 mov     ecx, [ebp+var_1C]
.text:00003AE0                 cmp     ecx, [ebp+arg_C]
.text:00003AE3                 jle     short loc_3B10
.text:00003AE5                 push    0
.text:00003AE7                 mov     edx, [ebp+arg_0]
.text:00003AEA                 mov     eax, [edx+4]
.text:00003AED                 push    eax
.text:00003AEE                 call    _delpos234
.text:00003AF3                 add     esp, 8
.text:00003AF6                 mov     [ebp+var_C], eax
.text:00003AF9                 mov     ecx, [ebp+var_C]
.text:00003AFC                 push    ecx
.text:00003AFD                 call    _safefree
.text:00003B02                 add     esp, 4
.text:00003B05                 mov     edx, [ebp+var_1C]
.text:00003B08                 sub     edx, 1
.text:00003B0B                 mov     [ebp+var_1C], edx
.text:00003B0E                 jmp     short loc_3ADD
.text:00003B10 ; ---------------------------------------------------------------------------
.text:00003B10
.text:00003B10 loc_3B10:                               ; CODE XREF: _term_size+407j
.text:00003B10                 mov     eax, [ebp+arg_0]
.text:00003B13                 mov     ecx, [ebp+var_1C]
.text:00003B16                 cmp     ecx, [eax+14h]
.text:00003B19                 jge     short loc_3B24
.text:00003B1B                 mov     edx, [ebp+arg_0]
.text:00003B1E                 mov     eax, [ebp+var_1C]
.text:00003B21                 mov     [edx+14h], eax
.text:00003B24
.text:00003B24 loc_3B24:                               ; CODE XREF: _term_size+43Dj
.text:00003B24                 mov     ecx, [ebp+arg_0]
.text:00003B27                 mov     edx, [ecx+4]
.text:00003B2A                 push    edx
.text:00003B2B                 call    _count234
.text:00003B30                 add     esp, 4
.text:00003B33                 cmp     eax, [ebp+arg_C]
.text:00003B36                 jle     short loc_3B4F
.text:00003B38                 push    713h            ; Line
.text:00003B3D                 push    offset $SG86580 ; "..\\..\\..\\terminal.c"
.text:00003B42                 push    offset $SG86581 ; "count234(term->scrollback) <= newsaveli"...
.text:00003B47                 call    __wassert
.text:00003B4C ; ---------------------------------------------------------------------------
.text:00003B4C                 add     esp, 0Ch
.text:00003B4F
.text:00003B4F loc_3B4F:                               ; CODE XREF: _term_size+45Aj
.text:00003B4F                 mov     ecx, [ebp+arg_0]
.text:00003B52                 mov     edx, [ecx+4]
.text:00003B55                 push    edx
.text:00003B56                 call    _count234
.text:00003B5B                 add     esp, 4
.text:00003B5E                 mov     ecx, [ebp+arg_0]
.text:00003B61                 cmp     eax, [ecx+14h]
.text:00003B64                 jge     short loc_3B7D
.text:00003B66                 push    714h            ; Line
.text:00003B6B                 push    offset $SG86583 ; "..\\..\\..\\terminal.c"
.text:00003B70                 push    offset $SG86584 ; "count234(term->scrollback) >= term->tem"...
.text:00003B75                 call    __wassert
.text:00003B7A ; ---------------------------------------------------------------------------
.text:00003B7A                 add     esp, 0Ch
.text:00003B7D
.text:00003B7D loc_3B7D:                               ; CODE XREF: _term_size+488j
.text:00003B7D                 mov     eax, [ebp+arg_0]
.text:00003B80                 mov     dword ptr [eax+10h], 0
.text:00003B87                 push    4
.text:00003B89                 mov     ecx, [ebp+arg_4]
.text:00003B8C                 push    ecx
.text:00003B8D                 call    _safemalloc
.text:00003B92                 add     esp, 8
.text:00003B95                 mov     [ebp+var_8], eax
.text:00003B98                 mov     [ebp+var_10], 0
.text:00003B9F                 jmp     short loc_3BAA
.text:00003BA1 ; ---------------------------------------------------------------------------
.text:00003BA1
.text:00003BA1 loc_3BA1:                               ; CODE XREF: _term_size:loc_3C03j
.text:00003BA1                 mov     edx, [ebp+var_10]
.text:00003BA4                 add     edx, 1
.text:00003BA7                 mov     [ebp+var_10], edx
.text:00003BAA
.text:00003BAA loc_3BAA:                               ; CODE XREF: _term_size+4C3j
.text:00003BAA                 mov     eax, [ebp+var_10]
.text:00003BAD                 cmp     eax, [ebp+arg_4]
.text:00003BB0                 jge     short loc_3C05
.text:00003BB2                 push    0
.text:00003BB4                 mov     ecx, [ebp+arg_8]
.text:00003BB7                 push    ecx
.text:00003BB8                 mov     edx, [ebp+arg_0]
.text:00003BBB                 push    edx
.text:00003BBC                 call    _newline
.text:00003BC1                 add     esp, 0Ch
.text:00003BC4                 mov     ecx, [ebp+var_10]
.text:00003BC7                 mov     edx, [ebp+var_8]
.text:00003BCA                 mov     [edx+ecx*4], eax
.text:00003BCD                 mov     [ebp+var_14], 0
.text:00003BD4                 jmp     short loc_3BDF
.text:00003BD6 ; ---------------------------------------------------------------------------
.text:00003BD6
.text:00003BD6 loc_3BD6:                               ; CODE XREF: _term_size+525j
.text:00003BD6                 mov     eax, [ebp+var_14]
.text:00003BD9                 add     eax, 1
.text:00003BDC                 mov     [ebp+var_14], eax
.text:00003BDF
.text:00003BDF loc_3BDF:                               ; CODE XREF: _term_size+4F8j
.text:00003BDF                 mov     ecx, [ebp+var_14]
.text:00003BE2                 cmp     ecx, [ebp+arg_8]
.text:00003BE5                 jge     short loc_3C03
.text:00003BE7                 mov     edx, [ebp+var_10]
.text:00003BEA                 mov     eax, [ebp+var_8]
.text:00003BED                 mov     ecx, [eax+edx*4]
.text:00003BF0                 mov     edx, [ebp+var_14]
.text:00003BF3                 imul    edx, 0Ch
.text:00003BF6                 mov     eax, [ecx+14h]
.text:00003BF9                 mov     dword ptr [eax+edx+4], 3FFFFh
.text:00003C01                 jmp     short loc_3BD6
.text:00003C03 ; ---------------------------------------------------------------------------
.text:00003C03
.text:00003C03 loc_3C03:                               ; CODE XREF: _term_size+509j
.text:00003C03                 jmp     short loc_3BA1
.text:00003C05 ; ---------------------------------------------------------------------------
.text:00003C05
.text:00003C05 loc_3C05:                               ; CODE XREF: _term_size+4D4j
.text:00003C05                 mov     ecx, [ebp+arg_0]
.text:00003C08                 cmp     dword ptr [ecx+18h], 0
.text:00003C0C                 jz      short loc_3C3F
.text:00003C0E                 mov     [ebp+var_10], 0
.text:00003C15                 jmp     short loc_3C20
.text:00003C17 ; ---------------------------------------------------------------------------
.text:00003C17
.text:00003C17 loc_3C17:                               ; CODE XREF: _term_size+561j
.text:00003C17                 mov     edx, [ebp+var_10]
.text:00003C1A                 add     edx, 1
.text:00003C1D                 mov     [ebp+var_10], edx
.text:00003C20
.text:00003C20 loc_3C20:                               ; CODE XREF: _term_size+539j
.text:00003C20                 mov     eax, [ebp+var_10]
.text:00003C23                 cmp     eax, [ebp+var_18]
.text:00003C26                 jge     short loc_3C3F
.text:00003C28                 mov     ecx, [ebp+arg_0]
.text:00003C2B                 mov     edx, [ecx+18h]
.text:00003C2E                 mov     eax, [ebp+var_10]
.text:00003C31                 mov     ecx, [edx+eax*4]
.text:00003C34                 push    ecx
.text:00003C35                 call    _freeline
.text:00003C3A                 add     esp, 4
.text:00003C3D                 jmp     short loc_3C17
.text:00003C3F ; ---------------------------------------------------------------------------
.text:00003C3F
.text:00003C3F loc_3C3F:                               ; CODE XREF: _term_size+530j
.text:00003C3F                                         ; _term_size+54Aj
.text:00003C3F                 mov     edx, [ebp+arg_0]
.text:00003C42                 mov     eax, [edx+18h]
.text:00003C45                 push    eax
.text:00003C46                 call    _safefree
.text:00003C4B                 add     esp, 4
.text:00003C4E                 mov     ecx, [ebp+arg_0]
.text:00003C51                 mov     edx, [ebp+var_8]
.text:00003C54                 mov     [ecx+18h], edx
.text:00003C57                 mov     eax, [ebp+arg_0]
.text:00003C5A                 mov     dword ptr [eax+20h], 0FFFFFFFFh
.text:00003C61                 mov     ecx, [ebp+arg_0]
.text:00003C64                 mov     dword ptr [ecx+1Ch], 0FFFFFFFFh
.text:00003C6B                 push    0
.text:00003C6D                 call    _newtree234
.text:00003C72                 add     esp, 4
.text:00003C75                 mov     [ebp+var_4], eax
.text:00003C78                 mov     [ebp+var_10], 0
.text:00003C7F                 jmp     short loc_3C8A
.text:00003C81 ; ---------------------------------------------------------------------------
.text:00003C81
.text:00003C81 loc_3C81:                               ; CODE XREF: _term_size+5DFj
.text:00003C81                 mov     edx, [ebp+var_10]
.text:00003C84                 add     edx, 1
.text:00003C87                 mov     [ebp+var_10], edx
.text:00003C8A
.text:00003C8A loc_3C8A:                               ; CODE XREF: _term_size+5A3j
.text:00003C8A                 mov     eax, [ebp+var_10]
.text:00003C8D                 cmp     eax, [ebp+arg_4]
.text:00003C90                 jge     short loc_3CBD
.text:00003C92                 push    1
.text:00003C94                 mov     ecx, [ebp+arg_8]
.text:00003C97                 push    ecx
.text:00003C98                 mov     edx, [ebp+arg_0]
.text:00003C9B                 push    edx
.text:00003C9C                 call    _newline
.text:00003CA1                 add     esp, 0Ch
.text:00003CA4                 mov     [ebp+var_C], eax
.text:00003CA7                 mov     eax, [ebp+var_10]
.text:00003CAA                 push    eax
.text:00003CAB                 mov     ecx, [ebp+var_C]
.text:00003CAE                 push    ecx
.text:00003CAF                 mov     edx, [ebp+var_4]
.text:00003CB2                 push    edx
.text:00003CB3                 call    _addpos234
.text:00003CB8                 add     esp, 0Ch
.text:00003CBB                 jmp     short loc_3C81
.text:00003CBD ; ---------------------------------------------------------------------------
.text:00003CBD
.text:00003CBD loc_3CBD:                               ; CODE XREF: _term_size+5B4j
.text:00003CBD                 mov     eax, [ebp+arg_0]
.text:00003CC0                 cmp     dword ptr [eax+0Ch], 0
.text:00003CC4                 jz      short loc_3CFD
.text:00003CC6
.text:00003CC6 loc_3CC6:                               ; CODE XREF: _term_size+610j
.text:00003CC6                 push    0
.text:00003CC8                 mov     ecx, [ebp+arg_0]
.text:00003CCB                 mov     edx, [ecx+0Ch]
.text:00003CCE                 push    edx
.text:00003CCF                 call    _delpos234
.text:00003CD4                 add     esp, 8
.text:00003CD7                 mov     [ebp+var_C], eax
.text:00003CDA                 cmp     [ebp+var_C], 0
.text:00003CDE                 jz      short loc_3CEE
.text:00003CE0                 mov     eax, [ebp+var_C]
.text:00003CE3                 push    eax
.text:00003CE4                 call    _freeline
.text:00003CE9                 add     esp, 4
.text:00003CEC                 jmp     short loc_3CC6
.text:00003CEE ; ---------------------------------------------------------------------------
.text:00003CEE
.text:00003CEE loc_3CEE:                               ; CODE XREF: _term_size+602j
.text:00003CEE                 mov     ecx, [ebp+arg_0]
.text:00003CF1                 mov     edx, [ecx+0Ch]
.text:00003CF4                 push    edx
.text:00003CF5                 call    _freetree234
.text:00003CFA                 add     esp, 4
.text:00003CFD
.text:00003CFD loc_3CFD:                               ; CODE XREF: _term_size+5E8j
.text:00003CFD                 mov     eax, [ebp+arg_0]
.text:00003D00                 mov     ecx, [ebp+var_4]
.text:00003D03                 mov     [eax+0Ch], ecx
.text:00003D06                 mov     edx, [ebp+arg_0]
.text:00003D09                 mov     dword ptr [edx+1A8h], 0
.text:00003D13                 push    1
.text:00003D15                 mov     eax, [ebp+arg_8]
.text:00003D18                 push    eax
.text:00003D19                 mov     ecx, [ebp+arg_0]
.text:00003D1C                 mov     edx, [ecx+0E40h]
.text:00003D22                 push    edx
.text:00003D23                 call    _saferealloc
.text:00003D28                 add     esp, 0Ch
.text:00003D2B                 mov     ecx, [ebp+arg_0]
.text:00003D2E                 mov     [ecx+0E40h], eax
.text:00003D34                 mov     edx, [ebp+arg_0]
.text:00003D37                 cmp     dword ptr [edx+12Ch], 0
.text:00003D3E                 jle     short loc_3D4E
.text:00003D40                 mov     eax, [ebp+arg_0]
.text:00003D43                 mov     ecx, [eax+12Ch]
.text:00003D49                 mov     [ebp+var_34], ecx
.text:00003D4C                 jmp     short loc_3D55
.text:00003D4E ; ---------------------------------------------------------------------------
.text:00003D4E
.text:00003D4E loc_3D4E:                               ; CODE XREF: _term_size+662j
.text:00003D4E                 mov     [ebp+var_34], 0
.text:00003D55
.text:00003D55 loc_3D55:                               ; CODE XREF: _term_size+670j
.text:00003D55                 mov     edx, [ebp+var_34]
.text:00003D58                 mov     [ebp+var_28], edx
.text:00003D5B                 jmp     short loc_3D66
.text:00003D5D ; ---------------------------------------------------------------------------
.text:00003D5D
.text:00003D5D loc_3D5D:                               ; CODE XREF: _term_size+6B8j
.text:00003D5D                 mov     eax, [ebp+var_28]
.text:00003D60                 add     eax, 1
.text:00003D63                 mov     [ebp+var_28], eax
.text:00003D66
.text:00003D66 loc_3D66:                               ; CODE XREF: _term_size+67Fj
.text:00003D66                 mov     ecx, [ebp+var_28]
.text:00003D69                 cmp     ecx, [ebp+arg_8]
.text:00003D6C                 jge     short loc_3D96
.text:00003D6E                 mov     edx, [ebp+var_28]
.text:00003D71                 and     edx, 80000007h
.text:00003D77                 jns     short loc_3D7E
.text:00003D79                 dec     edx
.text:00003D7A                 or      edx, 0FFFFFFF8h
.text:00003D7D                 inc     edx
.text:00003D7E
.text:00003D7E loc_3D7E:                               ; CODE XREF: _term_size+69Bj
.text:00003D7E                 neg     edx
.text:00003D80                 sbb     edx, edx
.text:00003D82                 add     edx, 1
.text:00003D85                 mov     eax, [ebp+arg_0]
.text:00003D88                 mov     ecx, [eax+0E40h]
.text:00003D8E                 mov     eax, [ebp+var_28]
.text:00003D91                 mov     [ecx+eax], dl
.text:00003D94                 jmp     short loc_3D5D
.text:00003D96 ; ---------------------------------------------------------------------------
.text:00003D96
.text:00003D96 loc_3D96:                               ; CODE XREF: _term_size+690j
.text:00003D96                 mov     ecx, [ebp+arg_0]
.text:00003D99                 cmp     dword ptr [ecx+74h], 0
.text:00003D9D                 jge     short loc_3DA9
.text:00003D9F                 mov     edx, [ebp+arg_0]
.text:00003DA2                 mov     dword ptr [edx+74h], 0
.text:00003DA9
.text:00003DA9 loc_3DA9:                               ; CODE XREF: _term_size+6C1j
.text:00003DA9                 mov     eax, [ebp+arg_0]
.text:00003DAC                 mov     ecx, [eax+74h]
.text:00003DAF                 cmp     ecx, [ebp+arg_4]
.text:00003DB2                 jl      short loc_3DC0
.text:00003DB4                 mov     edx, [ebp+arg_4]
.text:00003DB7                 sub     edx, 1
.text:00003DBA                 mov     eax, [ebp+arg_0]
.text:00003DBD                 mov     [eax+74h], edx
.text:00003DC0
.text:00003DC0 loc_3DC0:                               ; CODE XREF: _term_size+6D6j
.text:00003DC0                 mov     ecx, [ebp+arg_0]
.text:00003DC3                 mov     edx, [ecx+78h]
.text:00003DC6                 cmp     edx, [ebp+arg_8]
.text:00003DC9                 jl      short loc_3DD7
.text:00003DCB                 mov     eax, [ebp+arg_8]
.text:00003DCE                 sub     eax, 1
.text:00003DD1                 mov     ecx, [ebp+arg_0]
.text:00003DD4                 mov     [ecx+78h], eax
.text:00003DD7
.text:00003DD7 loc_3DD7:                               ; CODE XREF: _term_size+6EDj
.text:00003DD7                 mov     edx, [ebp+arg_0]
.text:00003DDA                 cmp     dword ptr [edx+108h], 0
.text:00003DE1                 jge     short loc_3DF0
.text:00003DE3                 mov     eax, [ebp+arg_0]
.text:00003DE6                 mov     dword ptr [eax+108h], 0
.text:00003DF0
.text:00003DF0 loc_3DF0:                               ; CODE XREF: _term_size+705j
.text:00003DF0                 mov     ecx, [ebp+arg_0]
.text:00003DF3                 mov     edx, [ecx+108h]
.text:00003DF9                 cmp     edx, [ebp+arg_4]
.text:00003DFC                 jl      short loc_3E0D
.text:00003DFE                 mov     eax, [ebp+arg_4]
.text:00003E01                 sub     eax, 1
.text:00003E04                 mov     ecx, [ebp+arg_0]
.text:00003E07                 mov     [ecx+108h], eax
.text:00003E0D
.text:00003E0D loc_3E0D:                               ; CODE XREF: _term_size+720j
.text:00003E0D                 mov     edx, [ebp+arg_0]
.text:00003E10                 mov     eax, [edx+10Ch]
.text:00003E16                 cmp     eax, [ebp+arg_8]
.text:00003E19                 jl      short loc_3E2A
.text:00003E1B                 mov     ecx, [ebp+arg_8]
.text:00003E1E                 sub     ecx, 1
.text:00003E21                 mov     edx, [ebp+arg_0]
.text:00003E24                 mov     [edx+10Ch], ecx
.text:00003E2A
.text:00003E2A loc_3E2A:                               ; CODE XREF: _term_size+73Dj
.text:00003E2A                 mov     eax, [ebp+arg_0]
.text:00003E2D                 cmp     dword ptr [eax+6Ch], 0
.text:00003E31                 jge     short loc_3E3D
.text:00003E33                 mov     ecx, [ebp+arg_0]
.text:00003E36                 mov     dword ptr [ecx+6Ch], 0
.text:00003E3D
.text:00003E3D loc_3E3D:                               ; CODE XREF: _term_size+755j
.text:00003E3D                 mov     edx, [ebp+arg_0]
.text:00003E40                 mov     eax, [edx+6Ch]
.text:00003E43                 cmp     eax, [ebp+arg_4]
.text:00003E46                 jl      short loc_3E54
.text:00003E48                 mov     ecx, [ebp+arg_4]
.text:00003E4B                 sub     ecx, 1
.text:00003E4E                 mov     edx, [ebp+arg_0]
.text:00003E51                 mov     [edx+6Ch], ecx
.text:00003E54
.text:00003E54 loc_3E54:                               ; CODE XREF: _term_size+76Aj
.text:00003E54                 mov     eax, [ebp+arg_0]
.text:00003E57                 mov     ecx, [eax+70h]
.text:00003E5A                 cmp     ecx, [ebp+arg_8]
.text:00003E5D                 jl      short loc_3E6B
.text:00003E5F                 mov     edx, [ebp+arg_8]
.text:00003E62                 sub     edx, 1
.text:00003E65                 mov     eax, [ebp+arg_0]
.text:00003E68                 mov     [eax+70h], edx
.text:00003E6B
.text:00003E6B loc_3E6B:                               ; CODE XREF: _term_size+781j
.text:00003E6B                 mov     ecx, [ebp+arg_0]
.text:00003E6E                 cmp     dword ptr [ecx+17Ch], 0
.text:00003E75                 jge     short loc_3E84
.text:00003E77                 mov     edx, [ebp+arg_0]
.text:00003E7A                 mov     dword ptr [edx+17Ch], 0
.text:00003E84
.text:00003E84 loc_3E84:                               ; CODE XREF: _term_size+799j
.text:00003E84                 mov     eax, [ebp+arg_0]
.text:00003E87                 mov     ecx, [eax+17Ch]
.text:00003E8D                 cmp     ecx, [ebp+arg_4]
.text:00003E90                 jl      short loc_3EA1
.text:00003E92                 mov     edx, [ebp+arg_4]
.text:00003E95                 sub     edx, 1
.text:00003E98                 mov     eax, [ebp+arg_0]
.text:00003E9B                 mov     [eax+17Ch], edx
.text:00003EA1
.text:00003EA1 loc_3EA1:                               ; CODE XREF: _term_size+7B4j
.text:00003EA1                 mov     ecx, [ebp+arg_0]
.text:00003EA4                 mov     edx, [ecx+178h]
.text:00003EAA                 cmp     edx, [ebp+arg_8]
.text:00003EAD                 jl      short loc_3EBE
.text:00003EAF                 mov     eax, [ebp+arg_8]
.text:00003EB2                 sub     eax, 1
.text:00003EB5                 mov     ecx, [ebp+arg_0]
.text:00003EB8                 mov     [ecx+178h], eax
.text:00003EBE
.text:00003EBE loc_3EBE:                               ; CODE XREF: _term_size+7D1j
.text:00003EBE                 mov     edx, [ebp+arg_0]
.text:00003EC1                 mov     dword ptr [edx+17Ch], 0
.text:00003ECB                 mov     eax, [ebp+arg_0]
.text:00003ECE                 mov     dword ptr [eax+178h], 0
.text:00003ED8                 mov     ecx, [ebp+arg_0]
.text:00003EDB                 mov     dword ptr [ecx+188h], 0
.text:00003EE5                 mov     edx, [ebp+arg_0]
.text:00003EE8                 mov     dword ptr [edx+8Ch], 0
.text:00003EF2                 mov     eax, [ebp+arg_0]
.text:00003EF5                 mov     ecx, [ebp+arg_4]
.text:00003EF8                 mov     [eax+128h], ecx
.text:00003EFE                 mov     edx, [ebp+arg_0]
.text:00003F01                 mov     eax, [ebp+arg_8]
.text:00003F04                 mov     [edx+12Ch], eax
.text:00003F0A                 mov     ecx, [ebp+arg_0]
.text:00003F0D                 mov     edx, [ebp+arg_C]
.text:00003F10                 mov     [ecx+130h], edx
.text:00003F16                 push    0
.text:00003F18                 push    0
.text:00003F1A                 mov     eax, [ebp+var_20]
.text:00003F1D                 push    eax
.text:00003F1E                 mov     ecx, [ebp+arg_0]
.text:00003F21                 push    ecx
.text:00003F22                 call    _swap_screen
.text:00003F27                 add     esp, 10h
.text:00003F2A                 mov     edx, [ebp+arg_0]
.text:00003F2D                 push    edx
.text:00003F2E                 call    _update_sbar
.text:00003F33                 add     esp, 4
.text:00003F36                 mov     eax, [ebp+arg_0]
.text:00003F39                 push    eax
.text:00003F3A                 call    _term_update
.text:00003F3F                 add     esp, 4
.text:00003F42                 mov     ecx, [ebp+arg_0]
.text:00003F45                 cmp     dword ptr [ecx+107Ch], 0
.text:00003F4C                 jz      short loc_3F83
.text:00003F4E                 mov     esi, esp
.text:00003F50                 mov     edx, [ebp+arg_0]
.text:00003F53                 mov     eax, [edx+128h]
.text:00003F59                 push    eax
.text:00003F5A                 mov     ecx, [ebp+arg_0]
.text:00003F5D
.text:00003F5D loc_3F5D:                               ; DATA XREF: .data:$SG88576o
.text:00003F5D                 mov     edx, [ecx+12Ch]
.text:00003F63                 push    edx
.text:00003F64                 mov     eax, [ebp+arg_0]
.text:00003F67                 mov     ecx, [eax+1080h]
.text:00003F6D                 push    ecx
.text:00003F6E                 mov     edx, [ebp+arg_0]
.text:00003F71                 mov     eax, [edx+107Ch]
.text:00003F77                 call    eax
.text:00003F79                 add     esp, 0Ch
.text:00003F7C                 cmp     esi, esp
.text:00003F7E                 call    __RTC_CheckEsp
.text:00003F83
.text:00003F83 loc_3F83:                               ; CODE XREF: _term_size+59j
.text:00003F83                                         ; _term_size+870j
.text:00003F83                 pop     edi
.text:00003F84                 pop     esi
.text:00003F85                 add     esp, 34h
.text:00003F88                 cmp     ebp, esp
.text:00003F8A                 call    __RTC_CheckEsp
.text:00003F8F                 mov     esp, ebp
.text:00003F91                 pop     ebp
.text:00003F92                 retn
.text:00003F92 _term_size      endp
.text:00003F92
.text:00003F92 ; ---------------------------------------------------------------------------
.text:00003F93                 db 9 dup(0CCh)
.text:00003F9C
.text:00003F9C ; =============== S U B R O U T I N E =======================================
.text:00003F9C
.text:00003F9C ; Attributes: bp-based frame
.text:00003F9C
.text:00003F9C _newline        proc near               ; CODE XREF: _term_size+253p
.text:00003F9C                                         ; _term_size+4E0p ...
.text:00003F9C
.text:00003F9C var_C           = dword ptr -0Ch
.text:00003F9C var_8           = dword ptr -8
.text:00003F9C var_4           = dword ptr -4
.text:00003F9C arg_0           = dword ptr  8
.text:00003F9C arg_4           = dword ptr  0Ch
.text:00003F9C arg_8           = dword ptr  10h
.text:00003F9C
.text:00003F9C                 push    ebp
.text:00003F9D                 mov     ebp, esp
.text:00003F9F                 sub     esp, 0Ch
.text:00003FA2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003FA9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003FB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FB7                 push    18h
.text:00003FB9                 push    1
.text:00003FBB                 call    _safemalloc
.text:00003FC0                 add     esp, 8
.text:00003FC3                 mov     [ebp+var_4], eax
.text:00003FC6                 push    0Ch
.text:00003FC8                 mov     eax, [ebp+arg_4]
.text:00003FCB                 push    eax
.text:00003FCC                 call    _safemalloc
.text:00003FD1                 add     esp, 8
.text:00003FD4                 mov     ecx, [ebp+var_4]
.text:00003FD7                 mov     [ecx+14h], eax
.text:00003FDA                 mov     [ebp+var_8], 0
.text:00003FE1                 jmp     short loc_3FEC
.text:00003FE3 ; ---------------------------------------------------------------------------
.text:00003FE3
.text:00003FE3 loc_3FE3:                               ; CODE XREF: _newline+93j
.text:00003FE3                 mov     edx, [ebp+var_8]
.text:00003FE6                 add     edx, 1
.text:00003FE9                 mov     [ebp+var_8], edx
.text:00003FEC
.text:00003FEC loc_3FEC:                               ; CODE XREF: _newline+45j
.text:00003FEC                 mov     eax, [ebp+var_8]
.text:00003FEF                 cmp     eax, [ebp+arg_4]
.text:00003FF2                 jge     short loc_4031
.text:00003FF4                 cmp     [ebp+arg_8], 0
.text:00003FF8                 jz      short loc_4005
.text:00003FFA                 mov     ecx, [ebp+arg_0]
.text:00003FFD                 add     ecx, 54h ; 'T'
.text:00004000                 mov     [ebp+var_C], ecx
.text:00004003                 jmp     short loc_400E
.text:00004005 ; ---------------------------------------------------------------------------
.text:00004005
.text:00004005 loc_4005:                               ; CODE XREF: _newline+5Cj
.text:00004005                 mov     edx, [ebp+arg_0]
.text:00004008                 add     edx, 48h ; 'H'
.text:0000400B                 mov     [ebp+var_C], edx
.text:0000400E
.text:0000400E loc_400E:                               ; CODE XREF: _newline+67j
.text:0000400E                 mov     eax, [ebp+var_C]
.text:00004011                 mov     ecx, [ebp+var_8]
.text:00004014                 imul    ecx, 0Ch
.text:00004017                 mov     edx, [ebp+var_4]
.text:0000401A                 mov     edx, [edx+14h]
.text:0000401D                 add     edx, ecx
.text:0000401F                 mov     ecx, [eax]
.text:00004021                 mov     [edx], ecx
.text:00004023                 mov     ecx, [eax+4]
.text:00004026                 mov     [edx+4], ecx
.text:00004029                 mov     eax, [eax+8]
.text:0000402C                 mov     [edx+8], eax
.text:0000402F                 jmp     short loc_3FE3
.text:00004031 ; ---------------------------------------------------------------------------
.text:00004031
.text:00004031 loc_4031:                               ; CODE XREF: _newline+56j
.text:00004031                 mov     ecx, [ebp+var_4]
.text:00004034                 mov     edx, [ebp+arg_4]
.text:00004037                 mov     [ecx+8], edx
.text:0000403A                 mov     eax, [ebp+var_4]
.text:0000403D                 mov     ecx, [ebp+arg_4]
.text:00004040                 mov     [eax+4], ecx
.text:00004043                 xor     edx, edx
.text:00004045                 mov     eax, [ebp+var_4]
.text:00004048                 mov     [eax], dx
.text:0000404B                 mov     ecx, [ebp+var_4]
.text:0000404E                 mov     dword ptr [ecx+0Ch], 0
.text:00004055                 mov     edx, [ebp+var_4]
.text:00004058                 mov     dword ptr [edx+10h], 0
.text:0000405F                 mov     eax, [ebp+var_4]
.text:00004062                 add     esp, 0Ch
.text:00004065                 cmp     ebp, esp
.text:00004067                 call    __RTC_CheckEsp
.text:0000406C                 mov     esp, ebp
.text:0000406E                 pop     ebp
.text:0000406F                 retn
.text:0000406F _newline        endp
.text:0000406F
.text:0000406F ; ---------------------------------------------------------------------------
.text:00004070                 db 0Ch dup(0CCh)
.text:0000407C
.text:0000407C ; =============== S U B R O U T I N E =======================================
.text:0000407C
.text:0000407C ; Attributes: bp-based frame
.text:0000407C
.text:0000407C _compressline   proc near               ; CODE XREF: _term_size+31Cp
.text:0000407C                                         ; _scroll+2A7p
.text:0000407C
.text:0000407C var_20          = dword ptr -20h
.text:0000407C var_1C          = dword ptr -1Ch
.text:0000407C var_18          = dword ptr -18h
.text:0000407C var_14          = dword ptr -14h
.text:0000407C var_10          = dword ptr -10h
.text:0000407C var_C           = dword ptr -0Ch
.text:0000407C var_8           = dword ptr -8
.text:0000407C var_4           = dword ptr -4
.text:0000407C arg_0           = dword ptr  8
.text:0000407C
.text:0000407C                 push    ebp
.text:0000407D                 mov     ebp, esp
.text:0000407F                 sub     esp, 20h
.text:00004082                 mov     eax, 0CCCCCCCCh
.text:00004087                 mov     [ebp+var_20], eax
.text:0000408A                 mov     [ebp+var_1C], eax
.text:0000408D                 mov     [ebp+var_18], eax
.text:00004090                 mov     [ebp+var_14], eax
.text:00004093                 mov     [ebp+var_10], eax
.text:00004096                 mov     [ebp+var_C], eax
.text:00004099                 mov     [ebp+var_8], eax
.text:0000409C                 mov     [ebp+var_4], eax
.text:0000409F                 mov     [ebp+var_10], 0
.text:000040A6                 mov     [ebp+var_C], 0
.text:000040AD                 mov     [ebp+var_8], 0
.text:000040B4                 lea     eax, [ebp+var_10]
.text:000040B7                 mov     [ebp+var_18], eax
.text:000040BA                 mov     ecx, [ebp+arg_0]
.text:000040BD                 mov     edx, [ecx+4]
.text:000040C0                 mov     [ebp+var_1C], edx
.text:000040C3
.text:000040C3 loc_40C3:                               ; CODE XREF: _compressline+71j
.text:000040C3                 cmp     [ebp+var_1C], 80h ; 'Ç'
.text:000040CA                 jl      short loc_40EF
.text:000040CC                 mov     eax, [ebp+var_1C]
.text:000040CF                 and     eax, 7Fh
.text:000040D2                 or      eax, 80h
.text:000040D7                 push    eax
.text:000040D8                 mov     ecx, [ebp+var_18]
.text:000040DB                 push    ecx
.text:000040DC                 call    _add
.text:000040E1                 add     esp, 8
.text:000040E4                 mov     edx, [ebp+var_1C]
.text:000040E7                 sar     edx, 7
.text:000040EA                 mov     [ebp+var_1C], edx
.text:000040ED                 jmp     short loc_40C3
.text:000040EF ; ---------------------------------------------------------------------------
.text:000040EF
.text:000040EF loc_40EF:                               ; CODE XREF: _compressline+4Ej
.text:000040EF                 movzx   eax, byte ptr [ebp+var_1C]
.text:000040F3                 push    eax
.text:000040F4                 mov     ecx, [ebp+var_18]
.text:000040F7                 push    ecx
.text:000040F8                 call    _add
.text:000040FD                 add     esp, 8
.text:00004100                 mov     edx, [ebp+arg_0]
.text:00004103                 movzx   eax, word ptr [edx]
.text:00004106                 mov     [ebp+var_20], eax
.text:00004109
.text:00004109 loc_4109:                               ; CODE XREF: _compressline+B8j
.text:00004109                 cmp     [ebp+var_20], 80h ; 'Ç'
.text:00004110                 jl      short loc_4136
.text:00004112                 mov     ecx, [ebp+var_20]
.text:00004115                 and     ecx, 7Fh
.text:00004118                 or      ecx, 80h
.text:0000411E                 push    ecx
.text:0000411F                 mov     edx, [ebp+var_18]
.text:00004122                 push    edx
.text:00004123                 call    _add
.text:00004128                 add     esp, 8
.text:0000412B                 mov     eax, [ebp+var_20]
.text:0000412E                 sar     eax, 7
.text:00004131                 mov     [ebp+var_20], eax
.text:00004134                 jmp     short loc_4109
.text:00004136 ; ---------------------------------------------------------------------------
.text:00004136
.text:00004136 loc_4136:                               ; CODE XREF: _compressline+94j
.text:00004136                 movzx   ecx, byte ptr [ebp+var_20]
.text:0000413A                 push    ecx
.text:0000413B                 mov     edx, [ebp+var_18]
.text:0000413E                 push    edx
.text:0000413F                 call    _add
.text:00004144                 add     esp, 8
.text:00004147                 push    offset _makeliteral_chr
.text:0000414C                 mov     eax, [ebp+arg_0]
.text:0000414F                 push    eax
.text:00004150                 mov     ecx, [ebp+var_18]
.text:00004153                 push    ecx
.text:00004154                 call    _makerle
.text:00004159                 add     esp, 0Ch
.text:0000415C                 push    offset _makeliteral_attr
.text:00004161                 mov     edx, [ebp+arg_0]
.text:00004164                 push    edx
.text:00004165                 mov     eax, [ebp+var_18]
.text:00004168                 push    eax
.text:00004169                 call    _makerle
.text:0000416E                 add     esp, 0Ch
.text:00004171                 push    offset _makeliteral_cc
.text:00004176                 mov     ecx, [ebp+arg_0]
.text:00004179                 push    ecx
.text:0000417A                 mov     edx, [ebp+var_18]
.text:0000417D                 push    edx
.text:0000417E                 call    _makerle
.text:00004183                 add     esp, 0Ch
.text:00004186                 push    1
.text:00004188                 mov     eax, [ebp+var_18]
.text:0000418B                 mov     ecx, [eax+4]
.text:0000418E                 push    ecx
.text:0000418F                 mov     edx, [ebp+var_18]
.text:00004192                 mov     eax, [edx]
.text:00004194                 push    eax
.text:00004195                 call    _saferealloc
.text:0000419A                 add     esp, 0Ch
.text:0000419D                 push    edx
.text:0000419E                 mov     ecx, ebp
.text:000041A0                 push    eax
.text:000041A1                 lea     edx, $LN9_1
.text:000041A7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000041AC                 pop     eax
.text:000041AD                 pop     edx
.text:000041AE                 add     esp, 20h
.text:000041B1                 cmp     ebp, esp
.text:000041B3                 call    __RTC_CheckEsp
.text:000041B8                 mov     esp, ebp
.text:000041BA                 pop     ebp
.text:000041BB                 retn
.text:000041BB _compressline   endp
.text:000041BB
.text:000041BB ; ---------------------------------------------------------------------------
.text:000041BC $LN9_1          dd 1                    ; DATA XREF: _compressline+125o
.text:000041C0                 dd offset $LN8_1
.text:000041C4 $LN8_1          dd 0FFFFFFF0h, 0Ch      ; DATA XREF: .text:000041C0o
.text:000041CC                 dd offset $LN7_1        ; "buffer"
.text:000041D0 $LN7_1          db 'buffer',0           ; DATA XREF: .text:000041CCo
.text:000041D7                 db 5 dup(0CCh)
.text:000041DC
.text:000041DC ; =============== S U B R O U T I N E =======================================
.text:000041DC
.text:000041DC ; Attributes: bp-based frame
.text:000041DC
.text:000041DC _add            proc near               ; CODE XREF: _compressline+60p
.text:000041DC                                         ; _compressline+7Cp ...
.text:000041DC
.text:000041DC arg_0           = dword ptr  8
.text:000041DC arg_4           = byte ptr  0Ch
.text:000041DC
.text:000041DC                 push    ebp
.text:000041DD                 mov     ebp, esp
.text:000041DF                 mov     eax, [ebp+arg_0]
.text:000041E2                 mov     ecx, [ebp+arg_0]
.text:000041E5                 mov     edx, [eax+4]
.text:000041E8                 cmp     edx, [ecx+8]
.text:000041EB                 jl      short loc_4222
.text:000041ED                 mov     eax, [ebp+arg_0]
.text:000041F0                 mov     eax, [eax+4]
.text:000041F3                 imul    eax, 3
.text:000041F6                 cdq
.text:000041F7                 sub     eax, edx
.text:000041F9                 sar     eax, 1
.text:000041FB                 add     eax, 200h
.text:00004200                 mov     ecx, [ebp+arg_0]
.text:00004203                 mov     [ecx+8], eax
.text:00004206                 push    1
.text:00004208                 mov     edx, [ebp+arg_0]
.text:0000420B                 mov     eax, [edx+8]
.text:0000420E                 push    eax
.text:0000420F                 mov     ecx, [ebp+arg_0]
.text:00004212                 mov     edx, [ecx]
.text:00004214                 push    edx
.text:00004215                 call    _saferealloc
.text:0000421A                 add     esp, 0Ch
.text:0000421D                 mov     ecx, [ebp+arg_0]
.text:00004220                 mov     [ecx], eax
.text:00004222
.text:00004222 loc_4222:                               ; CODE XREF: _add+Fj
.text:00004222                 mov     edx, [ebp+arg_0]
.text:00004225                 mov     eax, [edx]
.text:00004227                 mov     ecx, [ebp+arg_0]
.text:0000422A                 mov     edx, [ecx+4]
.text:0000422D                 mov     cl, [ebp+arg_4]
.text:00004230                 mov     [eax+edx], cl
.text:00004233                 mov     edx, [ebp+arg_0]
.text:00004236                 mov     eax, [edx+4]
.text:00004239                 add     eax, 1
.text:0000423C                 mov     ecx, [ebp+arg_0]
.text:0000423F                 mov     [ecx+4], eax
.text:00004242                 cmp     ebp, esp
.text:00004244                 call    __RTC_CheckEsp
.text:00004249                 pop     ebp
.text:0000424A                 retn
.text:0000424A _add            endp
.text:0000424A
.text:0000424A ; ---------------------------------------------------------------------------
.text:0000424B                 align 4
.text:0000424C
.text:0000424C ; =============== S U B R O U T I N E =======================================
.text:0000424C
.text:0000424C ; Attributes: bp-based frame
.text:0000424C
.text:0000424C _makerle        proc near               ; CODE XREF: _compressline+D8p
.text:0000424C                                         ; _compressline+EDp ...
.text:0000424C
.text:0000424C var_4C          = dword ptr -4Ch
.text:0000424C var_48          = dword ptr -48h
.text:0000424C var_44          = dword ptr -44h
.text:0000424C var_40          = dword ptr -40h
.text:0000424C var_3C          = dword ptr -3Ch
.text:0000424C var_38          = dword ptr -38h
.text:0000424C var_34          = dword ptr -34h
.text:0000424C var_2C          = dword ptr -2Ch
.text:0000424C var_24          = dword ptr -24h
.text:0000424C var_20          = dword ptr -20h
.text:0000424C var_1C          = dword ptr -1Ch
.text:0000424C Size            = dword ptr -18h
.text:0000424C var_14          = dword ptr -14h
.text:0000424C var_10          = dword ptr -10h
.text:0000424C var_C           = dword ptr -0Ch
.text:0000424C var_8           = dword ptr -8
.text:0000424C var_4           = dword ptr -4
.text:0000424C arg_0           = dword ptr  8
.text:0000424C arg_4           = dword ptr  0Ch
.text:0000424C arg_8           = dword ptr  10h
.text:0000424C
.text:0000424C                 push    ebp
.text:0000424D                 mov     ebp, esp
.text:0000424F                 sub     esp, 4Ch
.text:00004252                 push    esi
.text:00004253                 push    edi
.text:00004254                 lea     edi, [ebp+var_4C]
.text:00004257                 mov     ecx, 13h
.text:0000425C                 mov     eax, 0CCCCCCCCh
.text:00004261                 rep stosd
.text:00004263                 mov     eax, [ebp+arg_4]
.text:00004266                 mov     ecx, [eax+14h]
.text:00004269                 mov     [ebp+var_24], ecx
.text:0000426C                 mov     [ebp+var_2C], 0
.text:00004273                 mov     edx, [ebp+arg_4]
.text:00004276                 mov     eax, [edx+4]
.text:00004279                 mov     [ebp+var_C], eax
.text:0000427C                 mov     ecx, [ebp+arg_0]
.text:0000427F                 mov     edx, [ecx+4]
.text:00004282                 mov     [ebp+var_4], edx
.text:00004285                 mov     [ebp+var_8], 0
.text:0000428C                 push    0
.text:0000428E                 mov     eax, [ebp+arg_0]
.text:00004291                 push    eax
.text:00004292                 call    _add
.text:00004297                 add     esp, 8
.text:0000429A                 mov     [ebp+var_14], 0
.text:000042A1                 mov     ecx, [ebp+var_14]
.text:000042A4                 mov     [ebp+var_10], ecx
.text:000042A7                 mov     [ebp+var_20], 0
.text:000042AE
.text:000042AE loc_42AE:                               ; CODE XREF: _makerle+31Aj
.text:000042AE                                         ; _makerle:loc_45EAj
.text:000042AE                 mov     edx, [ebp+var_C]
.text:000042B1                 mov     eax, [ebp+var_C]
.text:000042B4                 sub     eax, 1
.text:000042B7                 mov     [ebp+var_C], eax
.text:000042BA                 test    edx, edx
.text:000042BC                 jle     short loc_42C7
.text:000042BE                 mov     [ebp+var_48], 1
.text:000042C5                 jmp     short loc_42CE
.text:000042C7 ; ---------------------------------------------------------------------------
.text:000042C7
.text:000042C7 loc_42C7:                               ; CODE XREF: _makerle+70j
.text:000042C7                 mov     [ebp+var_48], 0
.text:000042CE
.text:000042CE loc_42CE:                               ; CODE XREF: _makerle+79j
.text:000042CE                 cmp     [ebp+var_48], 0
.text:000042D2                 jz      loc_45EF
.text:000042D8                 mov     ecx, [ebp+arg_0]
.text:000042DB                 mov     edx, [ecx+4]
.text:000042DE                 mov     [ebp+var_1C], edx
.text:000042E1                 mov     eax, [ebp+var_24]
.text:000042E4                 mov     [ebp+var_4C], eax
.text:000042E7                 mov     ecx, [ebp+var_24]
.text:000042EA                 add     ecx, 0Ch
.text:000042ED                 mov     [ebp+var_24], ecx
.text:000042F0                 mov     esi, esp
.text:000042F2                 lea     edx, [ebp+var_2C]
.text:000042F5                 push    edx
.text:000042F6                 mov     eax, [ebp+var_4C]
.text:000042F9                 push    eax
.text:000042FA                 mov     ecx, [ebp+arg_0]
.text:000042FD                 push    ecx
.text:000042FE                 call    [ebp+arg_8]
.text:00004301                 add     esp, 0Ch
.text:00004304                 cmp     esi, esp
.text:00004306                 call    __RTC_CheckEsp
.text:0000430B                 mov     edx, [ebp+arg_0]
.text:0000430E                 mov     eax, [edx+4]
.text:00004311                 sub     eax, [ebp+var_1C]
.text:00004314                 mov     [ebp+Size], eax
.text:00004317                 mov     ecx, [ebp+Size]
.text:0000431A                 cmp     ecx, [ebp+var_10]
.text:0000431D                 jnz     loc_4582
.text:00004323                 mov     edx, [ebp+Size]
.text:00004326                 push    edx             ; Size
.text:00004327                 mov     eax, [ebp+arg_0]
.text:0000432A                 mov     ecx, [eax]
.text:0000432C                 add     ecx, [ebp+var_1C]
.text:0000432F                 push    ecx             ; Buf2
.text:00004330                 mov     edx, [ebp+arg_0]
.text:00004333                 mov     eax, [edx]
.text:00004335                 add     eax, [ebp+var_14]
.text:00004338                 push    eax             ; Buf1
.text:00004339                 call    _memcmp
.text:0000433E                 add     esp, 0Ch
.text:00004341                 test    eax, eax
.text:00004343                 jnz     loc_4582
.text:00004349                 cmp     [ebp+Size], 1
.text:0000434D                 jg      short loc_4359
.text:0000434F                 cmp     [ebp+var_20], 0
.text:00004353                 jz      loc_456D
.text:00004359
.text:00004359 loc_4359:                               ; CODE XREF: _makerle+101j
.text:00004359                 mov     ecx, [ebp+var_8]
.text:0000435C                 sub     ecx, 1
.text:0000435F                 mov     [ebp+var_8], ecx
.text:00004362                 cmp     [ebp+var_20], 0
.text:00004366                 jz      short loc_4397
.text:00004368                 cmp     [ebp+var_8], 0
.text:0000436C                 jg      short loc_4385
.text:0000436E                 push    1A0h            ; Line
.text:00004373                 push    offset $SG85992 ; "..\\..\\..\\terminal.c"
.text:00004378                 push    offset $SG85993 ; "hdrsize > 0"
.text:0000437D                 call    __wassert
.text:00004382 ; ---------------------------------------------------------------------------
.text:00004382                 add     esp, 0Ch
.text:00004385
.text:00004385 loc_4385:                               ; CODE XREF: _makerle+120j
.text:00004385                 mov     eax, [ebp+var_8]
.text:00004388                 sub     eax, 1
.text:0000438B                 mov     [ebp+var_8], eax
.text:0000438E                 mov     ecx, [ebp+var_14]
.text:00004391                 sub     ecx, [ebp+var_10]
.text:00004394                 mov     [ebp+var_14], ecx
.text:00004397
.text:00004397 loc_4397:                               ; CODE XREF: _makerle+11Aj
.text:00004397                 cmp     [ebp+var_8], 0
.text:0000439B                 jnz     short loc_43D3
.text:0000439D                 mov     edx, [ebp+var_4]
.text:000043A0                 add     edx, 1
.text:000043A3                 cmp     [ebp+var_14], edx
.text:000043A6                 jz      short loc_43BF
.text:000043A8                 push    1A6h            ; Line
.text:000043AD                 push    offset $SG85996 ; "..\\..\\..\\terminal.c"
.text:000043B2                 push    offset $SG85997 ; "prevpos == hdrpos + 1"
.text:000043B7                 call    __wassert
.text:000043BC ; ---------------------------------------------------------------------------
.text:000043BC                 add     esp, 0Ch
.text:000043BF
.text:000043BF loc_43BF:                               ; CODE XREF: _makerle+15Aj
.text:000043BF                 mov     ecx, [ebp+var_4]
.text:000043C2                 mov     [ebp+var_38], ecx
.text:000043C5                 mov     edx, [ebp+var_14]
.text:000043C8                 add     edx, [ebp+var_10]
.text:000043CB                 mov     eax, [ebp+arg_0]
.text:000043CE                 mov     [eax+4], edx
.text:000043D1                 jmp     short loc_4442
.text:000043D3 ; ---------------------------------------------------------------------------
.text:000043D3
.text:000043D3 loc_43D3:                               ; CODE XREF: _makerle+14Fj
.text:000043D3                 mov     ecx, [ebp+var_10]
.text:000043D6                 push    ecx             ; Size
.text:000043D7                 mov     edx, [ebp+arg_0]
.text:000043DA                 mov     eax, [edx]
.text:000043DC                 add     eax, [ebp+var_14]
.text:000043DF                 push    eax             ; Src
.text:000043E0                 mov     ecx, [ebp+arg_0]
.text:000043E3                 mov     edx, [ecx]
.text:000043E5                 mov     eax, [ebp+var_14]
.text:000043E8                 lea     ecx, [edx+eax+1]
.text:000043EC                 push    ecx             ; Dst
.text:000043ED                 call    _memmove
.text:000043F2                 add     esp, 0Ch
.text:000043F5                 mov     edx, [ebp+var_14]
.text:000043F8                 mov     [ebp+var_38], edx
.text:000043FB                 mov     eax, [ebp+var_10]
.text:000043FE                 mov     ecx, [ebp+var_14]
.text:00004401                 lea     edx, [ecx+eax+1]
.text:00004405                 mov     eax, [ebp+arg_0]
.text:00004408                 mov     [eax+4], edx
.text:0000440B                 cmp     [ebp+var_8], 1
.text:0000440F                 jl      short loc_441A
.text:00004411                 cmp     [ebp+var_8], 80h ; 'Ç'
.text:00004418                 jle     short loc_4431
.text:0000441A
.text:0000441A loc_441A:                               ; CODE XREF: _makerle+1C3j
.text:0000441A                 push    1B1h            ; Line
.text:0000441F                 push    offset $SG86000 ; "..\\..\\..\\terminal.c"
.text:00004424                 push    offset $SG86001 ; "hdrsize >= 1 && hdrsize <= 128"
.text:00004429                 call    __wassert
.text:0000442E ; ---------------------------------------------------------------------------
.text:0000442E                 add     esp, 0Ch
.text:00004431
.text:00004431 loc_4431:                               ; CODE XREF: _makerle+1CCj
.text:00004431                 mov     edx, [ebp+var_8]
.text:00004434                 sub     edx, 1
.text:00004437                 mov     eax, [ebp+arg_0]
.text:0000443A                 mov     ecx, [eax]
.text:0000443C                 mov     eax, [ebp+var_4]
.text:0000443F                 mov     [ecx+eax], dl
.text:00004442
.text:00004442 loc_4442:                               ; CODE XREF: _makerle+185j
.text:00004442                 xor     ecx, ecx
.text:00004444                 cmp     [ebp+var_20], 0
.text:00004448                 setnz   cl
.text:0000444B                 add     ecx, 2
.text:0000444E                 mov     [ebp+var_3C], ecx
.text:00004451
.text:00004451 loc_4451:                               ; CODE XREF: _makerle+2ACj
.text:00004451                 cmp     [ebp+var_C], 0
.text:00004455                 jle     loc_44FD
.text:0000445B                 cmp     [ebp+var_3C], 81h ; 'ü'
.text:00004462                 jge     loc_44FD
.text:00004468                 mov     edx, [ebp+arg_0]
.text:0000446B                 mov     eax, [edx+4]
.text:0000446E                 mov     [ebp+var_40], eax
.text:00004471                 mov     ecx, [ebp+var_2C]
.text:00004474                 mov     [ebp+var_34], ecx
.text:00004477                 mov     esi, esp
.text:00004479                 lea     edx, [ebp+var_2C]
.text:0000447C                 push    edx
.text:0000447D                 mov     eax, [ebp+var_24]
.text:00004480                 push    eax
.text:00004481                 mov     ecx, [ebp+arg_0]
.text:00004484                 push    ecx
.text:00004485                 call    [ebp+arg_8]
.text:00004488                 add     esp, 0Ch
.text:0000448B                 cmp     esi, esp
.text:0000448D                 call    __RTC_CheckEsp
.text:00004492                 mov     edx, [ebp+arg_0]
.text:00004495                 mov     eax, [edx+4]
.text:00004498                 sub     eax, [ebp+var_40]
.text:0000449B                 mov     [ebp+var_44], eax
.text:0000449E                 mov     ecx, [ebp+arg_0]
.text:000044A1                 mov     edx, [ebp+var_40]
.text:000044A4                 mov     [ecx+4], edx
.text:000044A7                 mov     eax, [ebp+var_44]
.text:000044AA                 cmp     eax, [ebp+Size]
.text:000044AD                 jnz     short loc_44D5
.text:000044AF                 mov     ecx, [ebp+var_44]
.text:000044B2                 push    ecx             ; Size
.text:000044B3                 mov     edx, [ebp+arg_0]
.text:000044B6                 mov     eax, [edx]
.text:000044B8                 add     eax, [ebp+var_40]
.text:000044BB                 push    eax             ; Buf2
.text:000044BC                 mov     ecx, [ebp+arg_0]
.text:000044BF                 mov     edx, [ecx]
.text:000044C1                 mov     eax, [ebp+var_38]
.text:000044C4                 lea     ecx, [edx+eax+1]
.text:000044C8                 push    ecx             ; Buf1
.text:000044C9                 call    _memcmp
.text:000044CE                 add     esp, 0Ch
.text:000044D1                 test    eax, eax
.text:000044D3                 jz      short loc_44DD
.text:000044D5
.text:000044D5 loc_44D5:                               ; CODE XREF: _makerle+261j
.text:000044D5                 mov     edx, [ebp+var_34]
.text:000044D8                 mov     [ebp+var_2C], edx
.text:000044DB                 jmp     short loc_44FD
.text:000044DD ; ---------------------------------------------------------------------------
.text:000044DD
.text:000044DD loc_44DD:                               ; CODE XREF: _makerle+287j
.text:000044DD                 mov     eax, [ebp+var_C]
.text:000044E0                 sub     eax, 1
.text:000044E3                 mov     [ebp+var_C], eax
.text:000044E6                 mov     ecx, [ebp+var_24]
.text:000044E9                 add     ecx, 0Ch
.text:000044EC                 mov     [ebp+var_24], ecx
.text:000044EF                 mov     edx, [ebp+var_3C]
.text:000044F2                 add     edx, 1
.text:000044F5                 mov     [ebp+var_3C], edx
.text:000044F8                 jmp     loc_4451
.text:000044FD ; ---------------------------------------------------------------------------
.text:000044FD
.text:000044FD loc_44FD:                               ; CODE XREF: _makerle+209j
.text:000044FD                                         ; _makerle+216j ...
.text:000044FD                 cmp     [ebp+var_3C], 2
.text:00004501                 jl      short loc_450C
.text:00004503                 cmp     [ebp+var_3C], 81h ; 'ü'
.text:0000450A                 jle     short loc_4523
.text:0000450C
.text:0000450C loc_450C:                               ; CODE XREF: _makerle+2B5j
.text:0000450C                 push    1C6h            ; Line
.text:00004511                 push    offset $SG86010 ; "..\\..\\..\\terminal.c"
.text:00004516                 push    offset $SG86011 ; "runlen >= 2 && runlen <= 129"
.text:0000451B                 call    __wassert
.text:00004520 ; ---------------------------------------------------------------------------
.text:00004520                 add     esp, 0Ch
.text:00004523
.text:00004523 loc_4523:                               ; CODE XREF: _makerle+2BEj
.text:00004523                 mov     ecx, [ebp+var_3C]
.text:00004526                 add     ecx, 7Eh ; '~'
.text:00004529                 mov     edx, [ebp+arg_0]
.text:0000452C                 mov     eax, [edx]
.text:0000452E                 mov     edx, [ebp+var_38]
.text:00004531                 mov     [eax+edx], cl
.text:00004534                 mov     eax, [ebp+arg_0]
.text:00004537                 mov     ecx, [eax+4]
.text:0000453A                 mov     [ebp+var_4], ecx
.text:0000453D                 mov     [ebp+var_8], 0
.text:00004544                 push    0
.text:00004546                 mov     edx, [ebp+arg_0]
.text:00004549                 push    edx
.text:0000454A                 call    _add
.text:0000454F                 add     esp, 8
.text:00004552                 mov     [ebp+var_14], 0
.text:00004559                 mov     eax, [ebp+var_14]
.text:0000455C                 mov     [ebp+var_10], eax
.text:0000455F                 mov     [ebp+var_20], 0
.text:00004566                 jmp     loc_42AE
.text:0000456B ; ---------------------------------------------------------------------------
.text:0000456B                 jmp     short loc_4580
.text:0000456D ; ---------------------------------------------------------------------------
.text:0000456D
.text:0000456D loc_456D:                               ; CODE XREF: _makerle+107j
.text:0000456D                 mov     [ebp+var_20], 1
.text:00004574                 mov     ecx, [ebp+Size]
.text:00004577                 mov     [ebp+var_10], ecx
.text:0000457A                 mov     edx, [ebp+var_1C]
.text:0000457D                 mov     [ebp+var_14], edx
.text:00004580
.text:00004580 loc_4580:                               ; CODE XREF: _makerle+31Fj
.text:00004580                 jmp     short loc_4595
.text:00004582 ; ---------------------------------------------------------------------------
.text:00004582
.text:00004582 loc_4582:                               ; CODE XREF: _makerle+D1j
.text:00004582                                         ; _makerle+F7j
.text:00004582                 mov     [ebp+var_20], 0
.text:00004589                 mov     eax, [ebp+Size]
.text:0000458C                 mov     [ebp+var_10], eax
.text:0000458F                 mov     ecx, [ebp+var_1C]
.text:00004592                 mov     [ebp+var_14], ecx
.text:00004595
.text:00004595 loc_4595:                               ; CODE XREF: _makerle:loc_4580j
.text:00004595                 mov     edx, [ebp+var_8]
.text:00004598                 add     edx, 1
.text:0000459B                 mov     [ebp+var_8], edx
.text:0000459E                 cmp     [ebp+var_8], 80h ; 'Ç'
.text:000045A5                 jnz     short loc_45EA
.text:000045A7                 mov     eax, [ebp+var_8]
.text:000045AA                 sub     eax, 1
.text:000045AD                 mov     ecx, [ebp+arg_0]
.text:000045B0                 mov     edx, [ecx]
.text:000045B2                 mov     ecx, [ebp+var_4]
.text:000045B5                 mov     [edx+ecx], al
.text:000045B8                 mov     edx, [ebp+arg_0]
.text:000045BB                 mov     eax, [edx+4]
.text:000045BE                 mov     [ebp+var_4], eax
.text:000045C1                 mov     [ebp+var_8], 0
.text:000045C8                 push    0
.text:000045CA                 mov     ecx, [ebp+arg_0]
.text:000045CD                 push    ecx
.text:000045CE                 call    _add
.text:000045D3                 add     esp, 8
.text:000045D6                 mov     [ebp+var_14], 0
.text:000045DD                 mov     edx, [ebp+var_14]
.text:000045E0                 mov     [ebp+var_10], edx
.text:000045E3                 mov     [ebp+var_20], 0
.text:000045EA
.text:000045EA loc_45EA:                               ; CODE XREF: _makerle+359j
.text:000045EA                 jmp     loc_42AE
.text:000045EF ; ---------------------------------------------------------------------------
.text:000045EF
.text:000045EF loc_45EF:                               ; CODE XREF: _makerle+86j
.text:000045EF                 cmp     [ebp+var_8], 0
.text:000045F3                 jle     short loc_4628
.text:000045F5                 cmp     [ebp+var_8], 80h ; 'Ç'
.text:000045FC                 jle     short loc_4615
.text:000045FE                 push    1F4h            ; Line
.text:00004603                 push    offset $SG86017 ; "..\\..\\..\\terminal.c"
.text:00004608                 push    offset $SG86018 ; "hdrsize <= 128"
.text:0000460D                 call    __wassert
.text:00004612 ; ---------------------------------------------------------------------------
.text:00004612                 add     esp, 0Ch
.text:00004615
.text:00004615 loc_4615:                               ; CODE XREF: _makerle+3B0j
.text:00004615                 mov     ecx, [ebp+var_8]
.text:00004618                 sub     ecx, 1
.text:0000461B                 mov     edx, [ebp+arg_0]
.text:0000461E                 mov     eax, [edx]
.text:00004620                 mov     edx, [ebp+var_4]
.text:00004623                 mov     [eax+edx], cl
.text:00004626                 jmp     short loc_4631
.text:00004628 ; ---------------------------------------------------------------------------
.text:00004628
.text:00004628 loc_4628:                               ; CODE XREF: _makerle+3A7j
.text:00004628                 mov     eax, [ebp+arg_0]
.text:0000462B                 mov     ecx, [ebp+var_4]
.text:0000462E                 mov     [eax+4], ecx
.text:00004631
.text:00004631 loc_4631:                               ; CODE XREF: _makerle+3DAj
.text:00004631                 push    edx
.text:00004632                 mov     ecx, ebp
.text:00004634                 push    eax
.text:00004635                 lea     edx, $LN32
.text:0000463B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004640                 pop     eax
.text:00004641                 pop     edx
.text:00004642                 pop     edi
.text:00004643                 pop     esi
.text:00004644                 add     esp, 4Ch
.text:00004647                 cmp     ebp, esp
.text:00004649                 call    __RTC_CheckEsp
.text:0000464E                 mov     esp, ebp
.text:00004650                 pop     ebp
.text:00004651                 retn
.text:00004651 _makerle        endp
.text:00004651
.text:00004651 ; ---------------------------------------------------------------------------
.text:00004652                 align 4
.text:00004654 $LN32           dd 1                    ; DATA XREF: _makerle+3E9o
.text:00004658                 dd offset $LN31
.text:0000465C $LN31           dd 0FFFFFFD4h, 4        ; DATA XREF: .text:00004658o
.text:00004664                 dd offset $LN30         ; "state"
.text:00004668 $LN30           db 'state',0            ; DATA XREF: .text:00004664o
.text:0000466E                 db 0Eh dup(0CCh)
.text:0000467C
.text:0000467C ; =============== S U B R O U T I N E =======================================
.text:0000467C
.text:0000467C ; Attributes: bp-based frame
.text:0000467C
.text:0000467C _makeliteral_chr proc near              ; CODE XREF: _makeliteral_cc+7Ap
.text:0000467C                                         ; _makeliteral_cc+9Ep
.text:0000467C                                         ; DATA XREF: ...
.text:0000467C
.text:0000467C arg_0           = dword ptr  8
.text:0000467C arg_4           = dword ptr  0Ch
.text:0000467C arg_8           = dword ptr  10h
.text:0000467C
.text:0000467C                 push    ebp
.text:0000467D                 mov     ebp, esp
.text:0000467F                 mov     eax, [ebp+arg_4]
.text:00004682                 mov     ecx, [eax]
.text:00004684                 and     ecx, 0FFFFFF80h
.text:00004687                 mov     edx, [ebp+arg_8]
.text:0000468A                 cmp     ecx, [edx]
.text:0000468C                 jnz     short loc_46A8
.text:0000468E                 mov     eax, [ebp+arg_4]
.text:00004691                 mov     ecx, [eax]
.text:00004693                 and     ecx, 7Fh
.text:00004696                 push    ecx
.text:00004697                 mov     edx, [ebp+arg_0]
.text:0000469A                 push    edx
.text:0000469B                 call    _add
.text:000046A0                 add     esp, 8
.text:000046A3                 jmp     loc_483F
.text:000046A8 ; ---------------------------------------------------------------------------
.text:000046A8
.text:000046A8 loc_46A8:                               ; CODE XREF: _makeliteral_chr+10j
.text:000046A8                 mov     eax, [ebp+arg_4]
.text:000046AB                 cmp     dword ptr [eax], 4000h
.text:000046B1                 jnb     short loc_46EE
.text:000046B3                 mov     ecx, [ebp+arg_4]
.text:000046B6                 mov     edx, [ecx]
.text:000046B8                 shr     edx, 8
.text:000046BB                 and     edx, 3Fh
.text:000046BE                 or      edx, 80h
.text:000046C4                 push    edx
.text:000046C5                 mov     eax, [ebp+arg_0]
.text:000046C8                 push    eax
.text:000046C9                 call    _add
.text:000046CE                 add     esp, 8
.text:000046D1                 mov     ecx, [ebp+arg_4]
.text:000046D4                 mov     edx, [ecx]
.text:000046D6                 and     edx, 0FFh
.text:000046DC                 push    edx
.text:000046DD                 mov     eax, [ebp+arg_0]
.text:000046E0                 push    eax
.text:000046E1                 call    _add
.text:000046E6                 add     esp, 8
.text:000046E9                 jmp     loc_483F
.text:000046EE ; ---------------------------------------------------------------------------
.text:000046EE
.text:000046EE loc_46EE:                               ; CODE XREF: _makeliteral_chr+35j
.text:000046EE                 mov     ecx, [ebp+arg_4]
.text:000046F1                 cmp     dword ptr [ecx], 200000h
.text:000046F7                 jnb     short loc_474C
.text:000046F9                 mov     edx, [ebp+arg_4]
.text:000046FC                 mov     eax, [edx]
.text:000046FE                 shr     eax, 10h
.text:00004701                 and     eax, 1Fh
.text:00004704                 or      eax, 0C0h
.text:00004709                 push    eax
.text:0000470A                 mov     ecx, [ebp+arg_0]
.text:0000470D                 push    ecx
.text:0000470E                 call    _add
.text:00004713                 add     esp, 8
.text:00004716                 mov     edx, [ebp+arg_4]
.text:00004719                 mov     eax, [edx]
.text:0000471B                 shr     eax, 8
.text:0000471E                 and     eax, 0FFh
.text:00004723                 push    eax
.text:00004724                 mov     ecx, [ebp+arg_0]
.text:00004727                 push    ecx
.text:00004728                 call    _add
.text:0000472D                 add     esp, 8
.text:00004730                 mov     edx, [ebp+arg_4]
.text:00004733                 mov     eax, [edx]
.text:00004735                 and     eax, 0FFh
.text:0000473A                 push    eax
.text:0000473B                 mov     ecx, [ebp+arg_0]
.text:0000473E                 push    ecx
.text:0000473F                 call    _add
.text:00004744                 add     esp, 8
.text:00004747                 jmp     loc_483F
.text:0000474C ; ---------------------------------------------------------------------------
.text:0000474C
.text:0000474C loc_474C:                               ; CODE XREF: _makeliteral_chr+7Bj
.text:0000474C                 mov     edx, [ebp+arg_4]
.text:0000474F                 cmp     dword ptr [edx], 10000000h
.text:00004755                 jnb     short loc_47C5
.text:00004757                 mov     eax, [ebp+arg_4]
.text:0000475A                 mov     ecx, [eax]
.text:0000475C                 shr     ecx, 18h
.text:0000475F                 and     ecx, 0Fh
.text:00004762                 or      ecx, 0E0h
.text:00004768                 push    ecx
.text:00004769                 mov     edx, [ebp+arg_0]
.text:0000476C                 push    edx
.text:0000476D                 call    _add
.text:00004772                 add     esp, 8
.text:00004775                 mov     eax, [ebp+arg_4]
.text:00004778                 mov     ecx, [eax]
.text:0000477A                 shr     ecx, 10h
.text:0000477D                 and     ecx, 0FFh
.text:00004783                 push    ecx
.text:00004784                 mov     edx, [ebp+arg_0]
.text:00004787                 push    edx
.text:00004788                 call    _add
.text:0000478D                 add     esp, 8
.text:00004790                 mov     eax, [ebp+arg_4]
.text:00004793                 mov     ecx, [eax]
.text:00004795                 shr     ecx, 8
.text:00004798                 and     ecx, 0FFh
.text:0000479E                 push    ecx
.text:0000479F                 mov     edx, [ebp+arg_0]
.text:000047A2                 push    edx
.text:000047A3                 call    _add
.text:000047A8                 add     esp, 8
.text:000047AB                 mov     eax, [ebp+arg_4]
.text:000047AE                 mov     ecx, [eax]
.text:000047B0                 and     ecx, 0FFh
.text:000047B6                 push    ecx
.text:000047B7                 mov     edx, [ebp+arg_0]
.text:000047BA                 push    edx
.text:000047BB                 call    _add
.text:000047C0                 add     esp, 8
.text:000047C3                 jmp     short loc_483F
.text:000047C5 ; ---------------------------------------------------------------------------
.text:000047C5
.text:000047C5 loc_47C5:                               ; CODE XREF: _makeliteral_chr+D9j
.text:000047C5                 push    0F0h ; '='
.text:000047CA                 mov     eax, [ebp+arg_0]
.text:000047CD                 push    eax
.text:000047CE                 call    _add
.text:000047D3                 add     esp, 8
.text:000047D6                 mov     ecx, [ebp+arg_4]
.text:000047D9                 mov     edx, [ecx]
.text:000047DB                 shr     edx, 18h
.text:000047DE                 and     edx, 0FFh
.text:000047E4                 push    edx
.text:000047E5                 mov     eax, [ebp+arg_0]
.text:000047E8                 push    eax
.text:000047E9                 call    _add
.text:000047EE                 add     esp, 8
.text:000047F1                 mov     ecx, [ebp+arg_4]
.text:000047F4                 mov     edx, [ecx]
.text:000047F6                 shr     edx, 10h
.text:000047F9                 and     edx, 0FFh
.text:000047FF                 push    edx
.text:00004800                 mov     eax, [ebp+arg_0]
.text:00004803                 push    eax
.text:00004804                 call    _add
.text:00004809                 add     esp, 8
.text:0000480C                 mov     ecx, [ebp+arg_4]
.text:0000480F                 mov     edx, [ecx]
.text:00004811                 shr     edx, 8
.text:00004814                 and     edx, 0FFh
.text:0000481A                 push    edx
.text:0000481B                 mov     eax, [ebp+arg_0]
.text:0000481E                 push    eax
.text:0000481F                 call    _add
.text:00004824                 add     esp, 8
.text:00004827                 mov     ecx, [ebp+arg_4]
.text:0000482A                 mov     edx, [ecx]
.text:0000482C                 and     edx, 0FFh
.text:00004832                 push    edx
.text:00004833                 mov     eax, [ebp+arg_0]
.text:00004836                 push    eax
.text:00004837                 call    _add
.text:0000483C                 add     esp, 8
.text:0000483F
.text:0000483F loc_483F:                               ; CODE XREF: _makeliteral_chr+27j
.text:0000483F                                         ; _makeliteral_chr+6Dj ...
.text:0000483F                 mov     ecx, [ebp+arg_4]
.text:00004842                 mov     edx, [ecx]
.text:00004844                 and     edx, 0FFFFFF00h
.text:0000484A                 mov     eax, [ebp+arg_8]
.text:0000484D                 mov     [eax], edx
.text:0000484F                 cmp     ebp, esp
.text:00004851                 call    __RTC_CheckEsp
.text:00004856                 pop     ebp
.text:00004857                 retn
.text:00004857 _makeliteral_chr endp
.text:00004857
.text:00004857 ; ---------------------------------------------------------------------------
.text:00004858                 db 4 dup(0CCh)
.text:0000485C
.text:0000485C ; =============== S U B R O U T I N E =======================================
.text:0000485C
.text:0000485C ; Attributes: bp-based frame
.text:0000485C
.text:0000485C _makeliteral_attr proc near             ; DATA XREF: _compressline+E0o
.text:0000485C
.text:0000485C var_8           = dword ptr -8
.text:0000485C var_4           = dword ptr -4
.text:0000485C arg_0           = dword ptr  8
.text:0000485C arg_4           = dword ptr  0Ch
.text:0000485C
.text:0000485C                 push    ebp
.text:0000485D
.text:0000485D loc_485D:                               ; DATA XREF: .data:$SG88577o
.text:0000485D                 mov     ebp, esp
.text:0000485F                 sub     esp, 8
.text:00004862                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004869                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004870                 mov     eax, [ebp+arg_4]
.text:00004873                 mov     ecx, [eax+4]
.text:00004876                 mov     [ebp+var_4], ecx
.text:00004879                 mov     edx, [ebp+var_4]
.text:0000487C                 shr     edx, 0Dh
.text:0000487F                 and     edx, 0Fh
.text:00004882                 mov     [ebp+var_8], edx
.text:00004885                 mov     eax, [ebp+var_8]
.text:00004888                 shl     eax, 4
.text:0000488B                 mov     [ebp+var_8], eax
.text:0000488E                 mov     ecx, [ebp+var_4]
.text:00004891                 shr     ecx, 4
.text:00004894                 and     ecx, 0Fh
.text:00004897                 or      ecx, [ebp+var_8]
.text:0000489A                 mov     [ebp+var_8], ecx
.text:0000489D                 mov     edx, [ebp+var_4]
.text:000048A0                 shr     edx, 11h
.text:000048A3                 shl     edx, 0Dh
.text:000048A6                 mov     eax, [ebp+var_4]
.text:000048A9                 and     eax, 1FFFh
.text:000048AE                 or      edx, eax
.text:000048B0                 mov     [ebp+var_4], edx
.text:000048B3                 mov     ecx, [ebp+var_4]
.text:000048B6                 shr     ecx, 8
.text:000048B9                 shl     ecx, 4
.text:000048BC                 mov     edx, [ebp+var_4]
.text:000048BF                 and     edx, 0Fh
.text:000048C2                 or      ecx, edx
.text:000048C4                 mov     [ebp+var_4], ecx
.text:000048C7                 mov     eax, [ebp+var_8]
.text:000048CA                 shl     eax, 17h
.text:000048CD                 or      eax, [ebp+var_4]
.text:000048D0                 mov     [ebp+var_4], eax
.text:000048D3                 cmp     [ebp+var_4], 8000h
.text:000048DA                 jnb     short loc_490C
.text:000048DC                 mov     ecx, [ebp+var_4]
.text:000048DF                 shr     ecx, 8
.text:000048E2                 and     ecx, 0FFh
.text:000048E8                 push    ecx
.text:000048E9                 mov     edx, [ebp+arg_0]
.text:000048EC                 push    edx
.text:000048ED                 call    _add
.text:000048F2                 add     esp, 8
.text:000048F5                 mov     eax, [ebp+var_4]
.text:000048F8                 and     eax, 0FFh
.text:000048FD                 push    eax
.text:000048FE                 mov     ecx, [ebp+arg_0]
.text:00004901                 push    ecx
.text:00004902                 call    _add
.text:00004907                 add     esp, 8
.text:0000490A                 jmp     short loc_496F
.text:0000490C ; ---------------------------------------------------------------------------
.text:0000490C
.text:0000490C loc_490C:                               ; CODE XREF: _makeliteral_attr+7Ej
.text:0000490C                 mov     edx, [ebp+var_4]
.text:0000490F                 shr     edx, 18h
.text:00004912                 and     edx, 7Fh
.text:00004915                 or      edx, 80h
.text:0000491B                 push    edx
.text:0000491C                 mov     eax, [ebp+arg_0]
.text:0000491F                 push    eax
.text:00004920                 call    _add
.text:00004925                 add     esp, 8
.text:00004928                 mov     ecx, [ebp+var_4]
.text:0000492B                 shr     ecx, 10h
.text:0000492E                 and     ecx, 0FFh
.text:00004934                 push    ecx
.text:00004935                 mov     edx, [ebp+arg_0]
.text:00004938                 push    edx
.text:00004939                 call    _add
.text:0000493E                 add     esp, 8
.text:00004941                 mov     eax, [ebp+var_4]
.text:00004944                 shr     eax, 8
.text:00004947                 and     eax, 0FFh
.text:0000494C                 push    eax
.text:0000494D                 mov     ecx, [ebp+arg_0]
.text:00004950                 push    ecx
.text:00004951                 call    _add
.text:00004956                 add     esp, 8
.text:00004959                 mov     edx, [ebp+var_4]
.text:0000495C                 and     edx, 0FFh
.text:00004962                 push    edx
.text:00004963                 mov     eax, [ebp+arg_0]
.text:00004966                 push    eax
.text:00004967                 call    _add
.text:0000496C                 add     esp, 8
.text:0000496F
.text:0000496F loc_496F:                               ; CODE XREF: _makeliteral_attr+AEj
.text:0000496F                 add     esp, 8
.text:00004972                 cmp     ebp, esp
.text:00004974                 call    __RTC_CheckEsp
.text:00004979                 mov     esp, ebp
.text:0000497B                 pop     ebp
.text:0000497C                 retn
.text:0000497C _makeliteral_attr endp
.text:0000497C
.text:0000497C ; ---------------------------------------------------------------------------
.text:0000497D                 db 0Fh dup(0CCh)
.text:0000498C
.text:0000498C ; =============== S U B R O U T I N E =======================================
.text:0000498C
.text:0000498C ; Attributes: bp-based frame
.text:0000498C
.text:0000498C _makeliteral_cc proc near               ; DATA XREF: _compressline+F5o
.text:0000498C
.text:0000498C var_24          = dword ptr -24h
.text:0000498C var_20          = dword ptr -20h
.text:0000498C var_1C          = dword ptr -1Ch
.text:0000498C var_18          = dword ptr -18h
.text:0000498C var_14          = dword ptr -14h
.text:0000498C var_10          = dword ptr -10h
.text:0000498C var_C           = dword ptr -0Ch
.text:0000498C var_8           = dword ptr -8
.text:0000498C var_4           = dword ptr -4
.text:0000498C arg_0           = dword ptr  8
.text:0000498C arg_4           = dword ptr  0Ch
.text:0000498C
.text:0000498C                 push    ebp
.text:0000498D                 mov     ebp, esp
.text:0000498F                 sub     esp, 24h
.text:00004992                 mov     eax, 0CCCCCCCCh
.text:00004997                 mov     [ebp+var_24], eax
.text:0000499A                 mov     [ebp+var_20], eax
.text:0000499D                 mov     [ebp+var_1C], eax
.text:000049A0                 mov     [ebp+var_18], eax
.text:000049A3                 mov     [ebp+var_14], eax
.text:000049A6                 mov     [ebp+var_10], eax
.text:000049A9                 mov     [ebp+var_C], eax
.text:000049AC                 mov     [ebp+var_8], eax
.text:000049AF                 mov     [ebp+var_4], eax
.text:000049B2                 mov     eax, dword ptr ds:___security_cookie
.text:000049B7                 xor     eax, ebp
.text:000049B9                 mov     [ebp+var_4], eax
.text:000049BC
.text:000049BC loc_49BC:                               ; CODE XREF: _makeliteral_cc+82j
.text:000049BC                 mov     eax, [ebp+arg_4]
.text:000049BF                 cmp     dword ptr [eax+8], 0
.text:000049C3                 jz      short loc_4A10
.text:000049C5                 mov     ecx, [ebp+arg_4]
.text:000049C8                 mov     edx, [ecx+8]
.text:000049CB                 imul    edx, 0Ch
.text:000049CE                 add     edx, [ebp+arg_4]
.text:000049D1                 mov     [ebp+arg_4], edx
.text:000049D4                 mov     eax, [ebp+arg_4]
.text:000049D7                 cmp     dword ptr [eax], 0
.text:000049DA                 jnz     short loc_49F3
.text:000049DC                 push    271h            ; Line
.text:000049E1                 push    offset $SG86083 ; "..\\..\\..\\terminal.c"
.text:000049E6                 push    offset $SG86084 ; "c->chr != 0"
.text:000049EB                 call    __wassert
.text:000049F0 ; ---------------------------------------------------------------------------
.text:000049F0                 add     esp, 0Ch
.text:000049F3
.text:000049F3 loc_49F3:                               ; CODE XREF: _makeliteral_cc+4Ej
.text:000049F3                 mov     [ebp+var_C], 0
.text:000049FA                 lea     edx, [ebp+var_C]
.text:000049FD                 push    edx
.text:000049FE                 mov     eax, [ebp+arg_4]
.text:00004A01                 push    eax
.text:00004A02                 mov     ecx, [ebp+arg_0]
.text:00004A05                 push    ecx
.text:00004A06                 call    _makeliteral_chr
.text:00004A0B                 add     esp, 0Ch
.text:00004A0E                 jmp     short loc_49BC
.text:00004A10 ; ---------------------------------------------------------------------------
.text:00004A10
.text:00004A10 loc_4A10:                               ; CODE XREF: _makeliteral_cc+37j
.text:00004A10                 mov     [ebp+var_20], 0
.text:00004A17                 mov     [ebp+var_C], 0
.text:00004A1E                 lea     edx, [ebp+var_C]
.text:00004A21                 push    edx
.text:00004A22                 lea     eax, [ebp+var_20]
.text:00004A25                 push    eax
.text:00004A26                 mov     ecx, [ebp+arg_0]
.text:00004A29                 push    ecx
.text:00004A2A                 call    _makeliteral_chr
.text:00004A2F                 add     esp, 0Ch
.text:00004A32                 push    edx
.text:00004A33                 mov     ecx, ebp
.text:00004A35                 push    eax
.text:00004A36                 lea     edx, $LN9_2
.text:00004A3C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004A41                 pop     eax
.text:00004A42                 pop     edx
.text:00004A43                 mov     ecx, [ebp+var_4]
.text:00004A46                 xor     ecx, ebp
.text:00004A48                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004A4D                 add     esp, 24h
.text:00004A50                 cmp     ebp, esp
.text:00004A52                 call    __RTC_CheckEsp
.text:00004A57                 mov     esp, ebp
.text:00004A59                 pop     ebp
.text:00004A5A                 retn
.text:00004A5A _makeliteral_cc endp
.text:00004A5A
.text:00004A5A ; ---------------------------------------------------------------------------
.text:00004A5B                 align 4
.text:00004A5C $LN9_2          dd 2                    ; DATA XREF: _makeliteral_cc+AAo
.text:00004A60                 dd offset $LN8_2
.text:00004A64 $LN8_2          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00004A60o
.text:00004A6C                 dd offset $LN6_0        ; "zstate"
.text:00004A70                 dd 0FFFFFFE0h, 0Ch
.text:00004A78                 dd offset $LN7_2
.text:00004A7C $LN7_2          db 7Ah, 0               ; DATA XREF: .text:00004A78o
.text:00004A7E $LN6_0          db 'zstate',0           ; DATA XREF: .text:00004A6Co
.text:00004A85                 db 7 dup(0CCh)
.text:00004A8C
.text:00004A8C ; =============== S U B R O U T I N E =======================================
.text:00004A8C
.text:00004A8C ; Attributes: bp-based frame
.text:00004A8C
.text:00004A8C                 public _term_provide_resize_fn
.text:00004A8C _term_provide_resize_fn proc near
.text:00004A8C
.text:00004A8C arg_0           = dword ptr  8
.text:00004A8C arg_4           = dword ptr  0Ch
.text:00004A8C arg_8           = dword ptr  10h
.text:00004A8C
.text:00004A8C                 push    ebp
.text:00004A8D                 mov     ebp, esp
.text:00004A8F                 push    esi
.text:00004A90                 mov     eax, [ebp+arg_0]
.text:00004A93                 mov     ecx, [ebp+arg_4]
.text:00004A96                 mov     [eax+107Ch], ecx
.text:00004A9C                 mov     edx, [ebp+arg_0]
.text:00004A9F                 mov     eax, [ebp+arg_8]
.text:00004AA2                 mov     [edx+1080h], eax
.text:00004AA8                 cmp     [ebp+arg_4], 0
.text:00004AAC                 jz      short loc_4AED
.text:00004AAE                 mov     ecx, [ebp+arg_0]
.text:00004AB1                 cmp     dword ptr [ecx+12Ch], 0
.text:00004AB8                 jle     short loc_4AED
.text:00004ABA                 mov     edx, [ebp+arg_0]
.text:00004ABD                 cmp     dword ptr [edx+128h], 0
.text:00004AC4                 jle     short loc_4AED
.text:00004AC6                 mov     esi, esp
.text:00004AC8                 mov     eax, [ebp+arg_0]
.text:00004ACB                 mov     ecx, [eax+128h]
.text:00004AD1                 push    ecx
.text:00004AD2                 mov     edx, [ebp+arg_0]
.text:00004AD5                 mov     eax, [edx+12Ch]
.text:00004ADB                 push    eax
.text:00004ADC                 mov     ecx, [ebp+arg_8]
.text:00004ADF                 push    ecx
.text:00004AE0                 call    [ebp+arg_4]
.text:00004AE3                 add     esp, 0Ch
.text:00004AE6                 cmp     esi, esp
.text:00004AE8                 call    __RTC_CheckEsp
.text:00004AED
.text:00004AED loc_4AED:                               ; CODE XREF: _term_provide_resize_fn+20j
.text:00004AED                                         ; _term_provide_resize_fn+2Cj ...
.text:00004AED                 pop     esi
.text:00004AEE                 cmp     ebp, esp
.text:00004AF0                 call    __RTC_CheckEsp
.text:00004AF5                 pop     ebp
.text:00004AF6                 retn
.text:00004AF6 _term_provide_resize_fn endp
.text:00004AF6
.text:00004AF6 ; ---------------------------------------------------------------------------
.text:00004AF7                 db 5 dup(0CCh)
.text:00004AFC
.text:00004AFC ; =============== S U B R O U T I N E =======================================
.text:00004AFC
.text:00004AFC ; Attributes: bp-based frame
.text:00004AFC
.text:00004AFC _find_last_nonempty_line proc near      ; CODE XREF: _power_on+4BAp
.text:00004AFC                                         ; _swap_screen+71p ...
.text:00004AFC
.text:00004AFC var_C           = dword ptr -0Ch
.text:00004AFC var_8           = dword ptr -8
.text:00004AFC var_4           = dword ptr -4
.text:00004AFC arg_0           = dword ptr  8
.text:00004AFC arg_4           = dword ptr  0Ch
.text:00004AFC
.text:00004AFC                 push    ebp
.text:00004AFD                 mov     ebp, esp
.text:00004AFF                 sub     esp, 0Ch
.text:00004B02                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004B09                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B17                 mov     eax, [ebp+arg_4]
.text:00004B1A                 push    eax
.text:00004B1B                 call    _count234
.text:00004B20                 add     esp, 4
.text:00004B23                 sub     eax, 1
.text:00004B26                 mov     [ebp+var_4], eax
.text:00004B29                 jmp     short loc_4B34
.text:00004B2B ; ---------------------------------------------------------------------------
.text:00004B2B
.text:00004B2B loc_4B2B:                               ; CODE XREF: _find_last_nonempty_line:loc_4B9Bj
.text:00004B2B                 mov     ecx, [ebp+var_4]
.text:00004B2E                 sub     ecx, 1
.text:00004B31                 mov     [ebp+var_4], ecx
.text:00004B34
.text:00004B34 loc_4B34:                               ; CODE XREF: _find_last_nonempty_line+2Dj
.text:00004B34                 cmp     [ebp+var_4], 0
.text:00004B38                 jl      short loc_4B9D
.text:00004B3A                 mov     edx, [ebp+var_4]
.text:00004B3D                 push    edx
.text:00004B3E                 mov     eax, [ebp+arg_4]
.text:00004B41                 push    eax
.text:00004B42                 call    _index234
.text:00004B47                 add     esp, 8
.text:00004B4A                 mov     [ebp+var_8], eax
.text:00004B4D                 mov     [ebp+var_C], 0
.text:00004B54                 jmp     short loc_4B5F
.text:00004B56 ; ---------------------------------------------------------------------------
.text:00004B56
.text:00004B56 loc_4B56:                               ; CODE XREF: _find_last_nonempty_line:loc_4B8Cj
.text:00004B56                 mov     ecx, [ebp+var_C]
.text:00004B59                 add     ecx, 1
.text:00004B5C                 mov     [ebp+var_C], ecx
.text:00004B5F
.text:00004B5F loc_4B5F:                               ; CODE XREF: _find_last_nonempty_line+58j
.text:00004B5F                 mov     edx, [ebp+var_8]
.text:00004B62                 mov     eax, [ebp+var_C]
.text:00004B65                 cmp     eax, [edx+4]
.text:00004B68                 jge     short loc_4B8E
.text:00004B6A                 mov     ecx, [ebp+arg_0]
.text:00004B6D                 add     ecx, 54h ; 'T'
.text:00004B70                 push    ecx
.text:00004B71                 mov     edx, [ebp+var_C]
.text:00004B74                 imul    edx, 0Ch
.text:00004B77                 mov     eax, [ebp+var_8]
.text:00004B7A                 add     edx, [eax+14h]
.text:00004B7D                 push    edx
.text:00004B7E                 call    _termchars_equal
.text:00004B83                 add     esp, 8
.text:00004B86                 test    eax, eax
.text:00004B88                 jnz     short loc_4B8C
.text:00004B8A                 jmp     short loc_4B8E
.text:00004B8C ; ---------------------------------------------------------------------------
.text:00004B8C
.text:00004B8C loc_4B8C:                               ; CODE XREF: _find_last_nonempty_line+8Cj
.text:00004B8C                 jmp     short loc_4B56
.text:00004B8E ; ---------------------------------------------------------------------------
.text:00004B8E
.text:00004B8E loc_4B8E:                               ; CODE XREF: _find_last_nonempty_line+6Cj
.text:00004B8E                                         ; _find_last_nonempty_line+8Ej
.text:00004B8E                 mov     ecx, [ebp+var_8]
.text:00004B91                 mov     edx, [ebp+var_C]
.text:00004B94                 cmp     edx, [ecx+4]
.text:00004B97                 jz      short loc_4B9B
.text:00004B99                 jmp     short loc_4B9D
.text:00004B9B ; ---------------------------------------------------------------------------
.text:00004B9B
.text:00004B9B loc_4B9B:                               ; CODE XREF: _find_last_nonempty_line+9Bj
.text:00004B9B                 jmp     short loc_4B2B
.text:00004B9D ; ---------------------------------------------------------------------------
.text:00004B9D
.text:00004B9D loc_4B9D:                               ; CODE XREF: _find_last_nonempty_line+3Cj
.text:00004B9D                                         ; _find_last_nonempty_line+9Dj
.text:00004B9D                 mov     eax, [ebp+var_4]
.text:00004BA0                 add     esp, 0Ch
.text:00004BA3                 cmp     ebp, esp
.text:00004BA5                 call    __RTC_CheckEsp
.text:00004BAA                 mov     esp, ebp
.text:00004BAC                 pop     ebp
.text:00004BAD                 retn
.text:00004BAD _find_last_nonempty_line endp
.text:00004BAD
.text:00004BAD ; ---------------------------------------------------------------------------
.text:00004BAE                 db 0Eh dup(0CCh)
.text:00004BBC
.text:00004BBC ; =============== S U B R O U T I N E =======================================
.text:00004BBC
.text:00004BBC ; Attributes: bp-based frame
.text:00004BBC
.text:00004BBC _termchars_equal proc near              ; CODE XREF: _find_last_nonempty_line+82p
.text:00004BBC                                         ; _do_paint+FA4p ...
.text:00004BBC
.text:00004BBC arg_0           = dword ptr  8
.text:00004BBC arg_4           = dword ptr  0Ch
.text:00004BBC
.text:00004BBC                 push    ebp
.text:00004BBD                 mov     ebp, esp
.text:00004BBF                 mov     eax, [ebp+arg_4]
.text:00004BC2                 mov     ecx, [eax+4]
.text:00004BC5                 push    ecx
.text:00004BC6                 mov     edx, [ebp+arg_4]
.text:00004BC9                 mov     eax, [edx]
.text:00004BCB                 push    eax
.text:00004BCC                 mov     ecx, [ebp+arg_4]
.text:00004BCF                 push    ecx
.text:00004BD0                 mov     edx, [ebp+arg_0]
.text:00004BD3                 push    edx
.text:00004BD4                 call    _termchars_equal_override
.text:00004BD9                 add     esp, 10h
.text:00004BDC                 cmp     ebp, esp
.text:00004BDE                 call    __RTC_CheckEsp
.text:00004BE3                 pop     ebp
.text:00004BE4                 retn
.text:00004BE4 _termchars_equal endp
.text:00004BE4
.text:00004BE4 ; ---------------------------------------------------------------------------
.text:00004BE5                 db 7 dup(0CCh)
.text:00004BEC
.text:00004BEC ; =============== S U B R O U T I N E =======================================
.text:00004BEC
.text:00004BEC ; Attributes: bp-based frame
.text:00004BEC
.text:00004BEC _termchars_equal_override proc near     ; CODE XREF: _termchars_equal+18p
.text:00004BEC                                         ; _do_paint+BF3p
.text:00004BEC
.text:00004BEC arg_0           = dword ptr  8
.text:00004BEC arg_4           = dword ptr  0Ch
.text:00004BEC arg_8           = dword ptr  10h
.text:00004BEC arg_C           = dword ptr  14h
.text:00004BEC
.text:00004BEC                 push    ebp
.text:00004BED                 mov     ebp, esp
.text:00004BEF                 mov     eax, [ebp+arg_0]
.text:00004BF2                 mov     ecx, [eax]
.text:00004BF4                 cmp     ecx, [ebp+arg_8]
.text:00004BF7                 jz      short loc_4BFD
.text:00004BF9                 xor     eax, eax
.text:00004BFB                 jmp     short loc_4C76
.text:00004BFD ; ---------------------------------------------------------------------------
.text:00004BFD
.text:00004BFD loc_4BFD:                               ; CODE XREF: _termchars_equal_override+Bj
.text:00004BFD                 mov     edx, [ebp+arg_0]
.text:00004C00                 mov     eax, [edx+4]
.text:00004C03                 and     eax, 0FFFFFFFh
.text:00004C08                 mov     ecx, [ebp+arg_C]
.text:00004C0B                 and     ecx, 0FFFFFFFh
.text:00004C11                 cmp     eax, ecx
.text:00004C13                 jz      short loc_4C19
.text:00004C15                 xor     eax, eax
.text:00004C17                 jmp     short loc_4C76
.text:00004C19 ; ---------------------------------------------------------------------------
.text:00004C19
.text:00004C19 loc_4C19:                               ; CODE XREF: _termchars_equal_override+27j
.text:00004C19                                         ; _termchars_equal_override:loc_4C6Fj
.text:00004C19                 mov     edx, [ebp+arg_0]
.text:00004C1C                 cmp     dword ptr [edx+8], 0
.text:00004C20                 jnz     short loc_4C2B
.text:00004C22                 mov     eax, [ebp+arg_4]
.text:00004C25                 cmp     dword ptr [eax+8], 0
.text:00004C29                 jz      short loc_4C71
.text:00004C2B
.text:00004C2B loc_4C2B:                               ; CODE XREF: _termchars_equal_override+34j
.text:00004C2B                 mov     ecx, [ebp+arg_0]
.text:00004C2E                 cmp     dword ptr [ecx+8], 0
.text:00004C32                 jz      short loc_4C3D
.text:00004C34                 mov     edx, [ebp+arg_4]
.text:00004C37                 cmp     dword ptr [edx+8], 0
.text:00004C3B                 jnz     short loc_4C41
.text:00004C3D
.text:00004C3D loc_4C3D:                               ; CODE XREF: _termchars_equal_override+46j
.text:00004C3D                 xor     eax, eax
.text:00004C3F                 jmp     short loc_4C76
.text:00004C41 ; ---------------------------------------------------------------------------
.text:00004C41
.text:00004C41 loc_4C41:                               ; CODE XREF: _termchars_equal_override+4Fj
.text:00004C41                 mov     eax, [ebp+arg_0]
.text:00004C44                 mov     ecx, [eax+8]
.text:00004C47                 imul    ecx, 0Ch
.text:00004C4A                 add     ecx, [ebp+arg_0]
.text:00004C4D                 mov     [ebp+arg_0], ecx
.text:00004C50                 mov     edx, [ebp+arg_4]
.text:00004C53                 mov     eax, [edx+8]
.text:00004C56                 imul    eax, 0Ch
.text:00004C59                 add     eax, [ebp+arg_4]
.text:00004C5C                 mov     [ebp+arg_4], eax
.text:00004C5F                 mov     ecx, [ebp+arg_0]
.text:00004C62                 mov     edx, [ebp+arg_4]
.text:00004C65                 mov     eax, [ecx]
.text:00004C67                 cmp     eax, [edx]
.text:00004C69                 jz      short loc_4C6F
.text:00004C6B                 xor     eax, eax
.text:00004C6D                 jmp     short loc_4C76
.text:00004C6F ; ---------------------------------------------------------------------------
.text:00004C6F
.text:00004C6F loc_4C6F:                               ; CODE XREF: _termchars_equal_override+7Dj
.text:00004C6F                 jmp     short loc_4C19
.text:00004C71 ; ---------------------------------------------------------------------------
.text:00004C71
.text:00004C71 loc_4C71:                               ; CODE XREF: _termchars_equal_override+3Dj
.text:00004C71                 mov     eax, 1
.text:00004C76
.text:00004C76 loc_4C76:                               ; CODE XREF: _termchars_equal_override+Fj
.text:00004C76                                         ; _termchars_equal_override+2Bj ...
.text:00004C76                 pop     ebp
.text:00004C77                 retn
.text:00004C77 _termchars_equal_override endp
.text:00004C77
.text:00004C77 ; ---------------------------------------------------------------------------
.text:00004C78                 db 4 dup(0CCh)
.text:00004C7C
.text:00004C7C ; =============== S U B R O U T I N E =======================================
.text:00004C7C
.text:00004C7C ; Attributes: bp-based frame
.text:00004C7C
.text:00004C7C _swap_screen    proc near               ; CODE XREF: _power_on+46Bp
.text:00004C7C                                         ; _power_on+48Fp ...
.text:00004C7C
.text:00004C7C var_18          = dword ptr -18h
.text:00004C7C var_14          = dword ptr -14h
.text:00004C7C var_10          = dword ptr -10h
.text:00004C7C var_C           = dword ptr -0Ch
.text:00004C7C var_8           = dword ptr -8
.text:00004C7C var_4           = dword ptr -4
.text:00004C7C arg_0           = dword ptr  8
.text:00004C7C arg_4           = dword ptr  0Ch
.text:00004C7C arg_8           = dword ptr  10h
.text:00004C7C arg_C           = dword ptr  14h
.text:00004C7C
.text:00004C7C                 push    ebp
.text:00004C7D                 mov     ebp, esp
.text:00004C7F                 sub     esp, 18h
.text:00004C82                 mov     eax, 0CCCCCCCCh
.text:00004C87                 mov     [ebp+var_18], eax
.text:00004C8A                 mov     [ebp+var_14], eax
.text:00004C8D                 mov     [ebp+var_10], eax
.text:00004C90                 mov     [ebp+var_C], eax
.text:00004C93                 mov     [ebp+var_8], eax
.text:00004C96                 mov     [ebp+var_4], eax
.text:00004C99                 cmp     [ebp+arg_4], 0
.text:00004C9D                 jnz     short loc_4CA6
.text:00004C9F                 mov     [ebp+arg_8], 0
.text:00004CA6
.text:00004CA6 loc_4CA6:                               ; CODE XREF: _swap_screen+21j
.text:00004CA6                 mov     eax, [ebp+arg_0]
.text:00004CA9                 mov     ecx, [ebp+arg_4]
.text:00004CAC                 cmp     ecx, [eax+1A4h]
.text:00004CB2                 jz      loc_5091
.text:00004CB8                 mov     edx, [ebp+arg_0]
.text:00004CBB                 mov     eax, [ebp+arg_4]
.text:00004CBE                 mov     [edx+1A4h], eax
.text:00004CC4                 mov     ecx, [ebp+arg_0]
.text:00004CC7                 mov     edx, [ecx+0Ch]
.text:00004CCA                 mov     [ebp+var_18], edx
.text:00004CCD                 mov     eax, [ebp+arg_0]
.text:00004CD0                 mov     ecx, [ebp+arg_0]
.text:00004CD3                 mov     edx, [ecx+8]
.text:00004CD6                 mov     [eax+0Ch], edx
.text:00004CD9                 mov     eax, [ebp+arg_0]
.text:00004CDC                 mov     ecx, [ebp+var_18]
.text:00004CDF                 mov     [eax+8], ecx
.text:00004CE2                 mov     edx, [ebp+arg_0]
.text:00004CE5                 mov     eax, [edx+0Ch]
.text:00004CE8                 push    eax
.text:00004CE9                 mov     ecx, [ebp+arg_0]
.text:00004CEC                 push    ecx
.text:00004CED                 call    _find_last_nonempty_line
.text:00004CF2                 add     esp, 8
.text:00004CF5                 add     eax, 1
.text:00004CF8                 mov     edx, [ebp+arg_0]
.text:00004CFB                 mov     [edx+1A8h], eax
.text:00004D01                 mov     eax, [ebp+arg_0]
.text:00004D04                 mov     ecx, [eax+70h]
.text:00004D07                 mov     [ebp+var_4], ecx
.text:00004D0A                 cmp     [ebp+arg_8], 0
.text:00004D0E                 jnz     short loc_4D25
.text:00004D10                 cmp     [ebp+arg_C], 0
.text:00004D14                 jnz     short loc_4D25
.text:00004D16                 mov     edx, [ebp+arg_0]
.text:00004D19                 mov     eax, [ebp+arg_0]
.text:00004D1C                 mov     ecx, [eax+178h]
.text:00004D22                 mov     [edx+70h], ecx
.text:00004D25
.text:00004D25 loc_4D25:                               ; CODE XREF: _swap_screen+92j
.text:00004D25                                         ; _swap_screen+98j
.text:00004D25                 mov     edx, [ebp+arg_0]
.text:00004D28                 mov     eax, [ebp+var_4]
.text:00004D2B                 mov     [edx+178h], eax
.text:00004D31                 mov     ecx, [ebp+arg_0]
.text:00004D34                 mov     edx, [ecx+6Ch]
.text:00004D37                 mov     [ebp+var_4], edx
.text:00004D3A                 cmp     [ebp+arg_8], 0
.text:00004D3E                 jnz     short loc_4D55
.text:00004D40                 cmp     [ebp+arg_C], 0
.text:00004D44                 jnz     short loc_4D55
.text:00004D46                 mov     eax, [ebp+arg_0]
.text:00004D49                 mov     ecx, [ebp+arg_0]
.text:00004D4C                 mov     edx, [ecx+17Ch]
.text:00004D52                 mov     [eax+6Ch], edx
.text:00004D55
.text:00004D55 loc_4D55:                               ; CODE XREF: _swap_screen+C2j
.text:00004D55                                         ; _swap_screen+C8j
.text:00004D55                 mov     eax, [ebp+arg_0]
.text:00004D58                 mov     ecx, [ebp+var_4]
.text:00004D5B                 mov     [eax+17Ch], ecx
.text:00004D61                 mov     edx, [ebp+arg_0]
.text:00004D64                 mov     eax, [edx+7Ch]
.text:00004D67                 mov     [ebp+var_4], eax
.text:00004D6A                 cmp     [ebp+arg_8], 0
.text:00004D6E                 jnz     short loc_4D7F
.text:00004D70                 mov     ecx, [ebp+arg_0]
.text:00004D73                 mov     edx, [ebp+arg_0]
.text:00004D76                 mov     eax, [edx+19Ch]
.text:00004D7C                 mov     [ecx+7Ch], eax
.text:00004D7F
.text:00004D7F loc_4D7F:                               ; CODE XREF: _swap_screen+F2j
.text:00004D7F                 mov     ecx, [ebp+arg_0]
.text:00004D82                 mov     edx, [ebp+var_4]
.text:00004D85                 mov     [ecx+19Ch], edx
.text:00004D8B                 mov     eax, [ebp+arg_0]
.text:00004D8E                 mov     ecx, [eax+80h]
.text:00004D94                 mov     [ebp+var_4], ecx
.text:00004D97                 cmp     [ebp+arg_8], 0
.text:00004D9B                 jnz     short loc_4DAF
.text:00004D9D                 mov     edx, [ebp+arg_0]
.text:00004DA0                 mov     eax, [ebp+arg_0]
.text:00004DA3                 mov     ecx, [eax+1A0h]
.text:00004DA9                 mov     [edx+80h], ecx
.text:00004DAF
.text:00004DAF loc_4DAF:                               ; CODE XREF: _swap_screen+11Fj
.text:00004DAF                 mov     edx, [ebp+arg_0]
.text:00004DB2                 mov     eax, [ebp+var_4]
.text:00004DB5                 mov     [edx+1A0h], eax
.text:00004DBB                 mov     ecx, [ebp+arg_0]
.text:00004DBE                 mov     edx, [ecx+84h]
.text:00004DC4                 mov     [ebp+var_4], edx
.text:00004DC7                 cmp     [ebp+arg_8], 0
.text:00004DCB                 jnz     short loc_4DDF
.text:00004DCD                 mov     eax, [ebp+arg_0]
.text:00004DD0                 mov     ecx, [ebp+arg_0]
.text:00004DD3                 mov     edx, [ecx+180h]
.text:00004DD9                 mov     [eax+84h], edx
.text:00004DDF
.text:00004DDF loc_4DDF:                               ; CODE XREF: _swap_screen+14Fj
.text:00004DDF                 mov     eax, [ebp+arg_0]
.text:00004DE2                 mov     ecx, [ebp+var_4]
.text:00004DE5                 mov     [eax+180h], ecx
.text:00004DEB                 mov     edx, [ebp+arg_0]
.text:00004DEE                 mov     eax, [edx+88h]
.text:00004DF4                 mov     [ebp+var_4], eax
.text:00004DF7                 cmp     [ebp+arg_8], 0
.text:00004DFB                 jnz     short loc_4E0F
.text:00004DFD                 mov     ecx, [ebp+arg_0]
.text:00004E00                 mov     edx, [ebp+arg_0]
.text:00004E03                 mov     eax, [edx+184h]
.text:00004E09                 mov     [ecx+88h], eax
.text:00004E0F
.text:00004E0F loc_4E0F:                               ; CODE XREF: _swap_screen+17Fj
.text:00004E0F                 mov     ecx, [ebp+arg_0]
.text:00004E12                 mov     edx, [ebp+var_4]
.text:00004E15                 mov     [ecx+184h], edx
.text:00004E1B                 mov     eax, [ebp+arg_0]
.text:00004E1E                 mov     ecx, [eax+8Ch]
.text:00004E24                 mov     [ebp+var_4], ecx
.text:00004E27                 cmp     [ebp+arg_8], 0
.text:00004E2B                 jnz     short loc_4E3F
.text:00004E2D                 mov     edx, [ebp+arg_0]
.text:00004E30                 mov     eax, [ebp+arg_0]
.text:00004E33                 mov     ecx, [eax+188h]
.text:00004E39                 mov     [edx+8Ch], ecx
.text:00004E3F
.text:00004E3F loc_4E3F:                               ; CODE XREF: _swap_screen+1AFj
.text:00004E3F                 mov     edx, [ebp+arg_0]
.text:00004E42                 mov     eax, [ebp+var_4]
.text:00004E45                 mov     [edx+188h], eax
.text:00004E4B                 mov     ecx, [ebp+arg_0]
.text:00004E4E                 mov     edx, [ecx+90h]
.text:00004E54                 mov     [ebp+var_4], edx
.text:00004E57                 cmp     [ebp+arg_8], 0
.text:00004E5B                 jnz     short loc_4E6F
.text:00004E5D                 mov     eax, [ebp+arg_0]
.text:00004E60                 mov     ecx, [ebp+arg_0]
.text:00004E63                 mov     edx, [ecx+18Ch]
.text:00004E69                 mov     [eax+90h], edx
.text:00004E6F
.text:00004E6F loc_4E6F:                               ; CODE XREF: _swap_screen+1DFj
.text:00004E6F                 mov     eax, [ebp+arg_0]
.text:00004E72                 mov     ecx, [ebp+var_4]
.text:00004E75                 mov     [eax+18Ch], ecx
.text:00004E7B                 mov     edx, [ebp+arg_0]
.text:00004E7E                 mov     eax, [edx+94h]
.text:00004E84                 mov     [ebp+var_4], eax
.text:00004E87                 cmp     [ebp+arg_8], 0
.text:00004E8B                 jnz     short loc_4E9F
.text:00004E8D                 mov     ecx, [ebp+arg_0]
.text:00004E90                 mov     edx, [ebp+arg_0]
.text:00004E93                 mov     eax, [edx+190h]
.text:00004E99                 mov     [ecx+94h], eax
.text:00004E9F
.text:00004E9F loc_4E9F:                               ; CODE XREF: _swap_screen+20Fj
.text:00004E9F                 mov     ecx, [ebp+arg_0]
.text:00004EA2                 mov     edx, [ebp+var_4]
.text:00004EA5                 mov     [ecx+190h], edx
.text:00004EAB                 mov     eax, [ebp+arg_0]
.text:00004EAE                 mov     ecx, [eax+0DCh]
.text:00004EB4                 mov     [ebp+var_4], ecx
.text:00004EB7                 cmp     [ebp+arg_8], 0
.text:00004EBB                 jnz     short loc_4ECF
.text:00004EBD                 mov     edx, [ebp+arg_0]
.text:00004EC0                 mov     eax, [ebp+arg_0]
.text:00004EC3                 mov     ecx, [eax+198h]
.text:00004EC9                 mov     [edx+0DCh], ecx
.text:00004ECF
.text:00004ECF loc_4ECF:                               ; CODE XREF: _swap_screen+23Fj
.text:00004ECF                 mov     edx, [ebp+arg_0]
.text:00004ED2                 mov     eax, [ebp+var_4]
.text:00004ED5                 mov     [edx+198h], eax
.text:00004EDB                 mov     ecx, [ebp+arg_0]
.text:00004EDE                 mov     edx, [ecx+0D0h]
.text:00004EE4                 mov     [ebp+var_4], edx
.text:00004EE7                 cmp     [ebp+arg_8], 0
.text:00004EEB                 jnz     short loc_4EFF
.text:00004EED                 mov     eax, [ebp+arg_0]
.text:00004EF0                 mov     ecx, [ebp+arg_0]
.text:00004EF3                 mov     edx, [ecx+194h]
.text:00004EF9                 mov     [eax+0D0h], edx
.text:00004EFF
.text:00004EFF loc_4EFF:                               ; CODE XREF: _swap_screen+26Fj
.text:00004EFF                 mov     eax, [ebp+arg_0]
.text:00004F02                 mov     ecx, [ebp+var_4]
.text:00004F05                 mov     [eax+194h], ecx
.text:00004F0B                 mov     edx, [ebp+arg_0]
.text:00004F0E                 mov     eax, [edx+74h]
.text:00004F11                 mov     ecx, [edx+78h]
.text:00004F14                 mov     [ebp+var_10], eax
.text:00004F17                 mov     [ebp+var_C], ecx
.text:00004F1A                 cmp     [ebp+arg_8], 0
.text:00004F1E                 jnz     short loc_4F3E
.text:00004F20                 cmp     [ebp+arg_C], 0
.text:00004F24                 jnz     short loc_4F3E
.text:00004F26                 mov     edx, [ebp+arg_0]
.text:00004F29                 mov     eax, [edx+108h]
.text:00004F2F                 mov     ecx, [edx+10Ch]
.text:00004F35                 mov     edx, [ebp+arg_0]
.text:00004F38                 mov     [edx+74h], eax
.text:00004F3B                 mov     [edx+78h], ecx
.text:00004F3E
.text:00004F3E loc_4F3E:                               ; CODE XREF: _swap_screen+2A2j
.text:00004F3E                                         ; _swap_screen+2A8j
.text:00004F3E                 mov     eax, [ebp+arg_0]
.text:00004F41                 mov     ecx, [ebp+var_10]
.text:00004F44                 mov     [eax+108h], ecx
.text:00004F4A                 mov     edx, [ebp+var_C]
.text:00004F4D                 mov     [eax+10Ch], edx
.text:00004F53                 mov     eax, [ebp+arg_0]
.text:00004F56                 mov     ecx, [eax+98h]
.text:00004F5C                 mov     [ebp+var_4], ecx
.text:00004F5F                 cmp     [ebp+arg_8], 0
.text:00004F63                 jnz     short loc_4F7D
.text:00004F65                 cmp     [ebp+arg_C], 0
.text:00004F69                 jnz     short loc_4F7D
.text:00004F6B                 mov     edx, [ebp+arg_0]
.text:00004F6E                 mov     eax, [ebp+arg_0]
.text:00004F71                 mov     ecx, [eax+114h]
.text:00004F77                 mov     [edx+98h], ecx
.text:00004F7D
.text:00004F7D loc_4F7D:                               ; CODE XREF: _swap_screen+2E7j
.text:00004F7D                                         ; _swap_screen+2EDj
.text:00004F7D                 mov     edx, [ebp+arg_0]
.text:00004F80                 mov     eax, [ebp+var_4]
.text:00004F83                 mov     [edx+114h], eax
.text:00004F89                 mov     ecx, [ebp+arg_0]
.text:00004F8C                 mov     edx, [ecx+9Ch]
.text:00004F92                 mov     [ebp+var_4], edx
.text:00004F95                 cmp     [ebp+arg_8], 0
.text:00004F99                 jnz     short loc_4FB3
.text:00004F9B                 cmp     [ebp+arg_C], 0
.text:00004F9F                 jnz     short loc_4FB3
.text:00004FA1                 mov     eax, [ebp+arg_0]
.text:00004FA4                 mov     ecx, [ebp+arg_0]
.text:00004FA7                 mov     edx, [ecx+118h]
.text:00004FAD                 mov     [eax+9Ch], edx
.text:00004FB3
.text:00004FB3 loc_4FB3:                               ; CODE XREF: _swap_screen+31Dj
.text:00004FB3                                         ; _swap_screen+323j
.text:00004FB3                 mov     eax, [ebp+arg_0]
.text:00004FB6                 mov     ecx, [ebp+var_4]
.text:00004FB9                 mov     [eax+118h], ecx
.text:00004FBF                 mov     edx, [ebp+arg_0]
.text:00004FC2                 mov     eax, [edx+44h]
.text:00004FC5                 mov     [ebp+var_4], eax
.text:00004FC8                 cmp     [ebp+arg_8], 0
.text:00004FCC                 jnz     short loc_4FE3
.text:00004FCE                 cmp     [ebp+arg_C], 0
.text:00004FD2                 jnz     short loc_4FE3
.text:00004FD4                 mov     ecx, [ebp+arg_0]
.text:00004FD7                 mov     edx, [ebp+arg_0]
.text:00004FDA                 mov     eax, [edx+110h]
.text:00004FE0                 mov     [ecx+44h], eax
.text:00004FE3
.text:00004FE3 loc_4FE3:                               ; CODE XREF: _swap_screen+350j
.text:00004FE3                                         ; _swap_screen+356j
.text:00004FE3                 mov     ecx, [ebp+arg_0]
.text:00004FE6                 mov     edx, [ebp+var_4]
.text:00004FE9                 mov     [ecx+110h], edx
.text:00004FEF                 mov     eax, [ebp+arg_0]
.text:00004FF2                 mov     ecx, [eax+0A0h]
.text:00004FF8                 mov     [ebp+var_4], ecx
.text:00004FFB                 cmp     [ebp+arg_8], 0
.text:00004FFF                 jnz     short loc_5019
.text:00005001                 cmp     [ebp+arg_C], 0
.text:00005005                 jnz     short loc_5019
.text:00005007                 mov     edx, [ebp+arg_0]
.text:0000500A                 mov     eax, [ebp+arg_0]
.text:0000500D                 mov     ecx, [eax+11Ch]
.text:00005013                 mov     [edx+0A0h], ecx
.text:00005019
.text:00005019 loc_5019:                               ; CODE XREF: _swap_screen+383j
.text:00005019                                         ; _swap_screen+389j
.text:00005019                 mov     edx, [ebp+arg_0]
.text:0000501C                 mov     eax, [ebp+var_4]
.text:0000501F                 mov     [edx+11Ch], eax
.text:00005025                 mov     ecx, [ebp+arg_0]
.text:00005028                 mov     edx, [ecx+0A4h]
.text:0000502E                 mov     [ebp+var_4], edx
.text:00005031                 cmp     [ebp+arg_8], 0
.text:00005035                 jnz     short loc_504F
.text:00005037                 cmp     [ebp+arg_C], 0
.text:0000503B                 jnz     short loc_504F
.text:0000503D                 mov     eax, [ebp+arg_0]
.text:00005040                 mov     ecx, [ebp+arg_0]
.text:00005043                 mov     edx, [ecx+120h]
.text:00005049                 mov     [eax+0A4h], edx
.text:0000504F
.text:0000504F loc_504F:                               ; CODE XREF: _swap_screen+3B9j
.text:0000504F                                         ; _swap_screen+3BFj
.text:0000504F                 mov     eax, [ebp+arg_0]
.text:00005052                 mov     ecx, [ebp+var_4]
.text:00005055                 mov     [eax+120h], ecx
.text:0000505B                 mov     edx, [ebp+arg_0]
.text:0000505E                 mov     eax, [edx+0D4h]
.text:00005064                 mov     [ebp+var_4], eax
.text:00005067                 cmp     [ebp+arg_8], 0
.text:0000506B                 jnz     short loc_5085
.text:0000506D                 cmp     [ebp+arg_C], 0
.text:00005071                 jnz     short loc_5085
.text:00005073                 mov     ecx, [ebp+arg_0]
.text:00005076                 mov     edx, [ebp+arg_0]
.text:00005079                 mov     eax, [edx+124h]
.text:0000507F                 mov     [ecx+0D4h], eax
.text:00005085
.text:00005085 loc_5085:                               ; CODE XREF: _swap_screen+3EFj
.text:00005085                                         ; _swap_screen+3F5j
.text:00005085                 mov     ecx, [ebp+arg_0]
.text:00005088                 mov     edx, [ebp+var_4]
.text:0000508B                 mov     [ecx+124h], edx
.text:00005091
.text:00005091 loc_5091:                               ; CODE XREF: _swap_screen+36j
.text:00005091                 cmp     [ebp+arg_8], 0
.text:00005095                 jz      short loc_50B2
.text:00005097                 mov     eax, [ebp+arg_0]
.text:0000509A                 cmp     dword ptr [eax+8], 0
.text:0000509E                 jz      short loc_50B2
.text:000050A0                 push    1
.text:000050A2                 push    1
.text:000050A4                 push    0
.text:000050A6                 mov     ecx, [ebp+arg_0]
.text:000050A9                 push    ecx
.text:000050AA                 call    _erase_lots
.text:000050AF                 add     esp, 10h
.text:000050B2
.text:000050B2 loc_50B2:                               ; CODE XREF: _swap_screen+419j
.text:000050B2                                         ; _swap_screen+422j
.text:000050B2                 push    edx
.text:000050B3                 mov     ecx, ebp
.text:000050B5                 push    eax
.text:000050B6                 lea     edx, $LN26
.text:000050BC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000050C1                 pop     eax
.text:000050C2                 pop     edx
.text:000050C3                 add     esp, 18h
.text:000050C6                 cmp     ebp, esp
.text:000050C8                 call    __RTC_CheckEsp
.text:000050CD                 mov     esp, ebp
.text:000050CF                 pop     ebp
.text:000050D0                 retn
.text:000050D0 _swap_screen    endp
.text:000050D0
.text:000050D0 ; ---------------------------------------------------------------------------
.text:000050D1                 align 4
.text:000050D4 $LN26           dd 1                    ; DATA XREF: _swap_screen+43Ao
.text:000050D8                 dd offset $LN25
.text:000050DC $LN25           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:000050D8o
.text:000050E4                 dd offset $LN24
.text:000050E8 ; ---------------------------------------------------------------------------
.text:000050E8
.text:000050E8 $LN24:                                  ; DATA XREF: .text:000050E4o
.text:000050E8                 jz      short loc_515A
.text:000050EA                 add     ah, cl
.text:000050EC
.text:000050EC ; =============== S U B R O U T I N E =======================================
.text:000050EC
.text:000050EC ; Attributes: bp-based frame
.text:000050EC
.text:000050EC _update_sbar    proc near               ; CODE XREF: _term_update+8Cp
.text:000050EC                                         ; _term_clrsb+A7p ...
.text:000050EC
.text:000050EC var_4           = dword ptr -4
.text:000050EC arg_0           = dword ptr  8
.text:000050EC
.text:000050EC                 push    ebp
.text:000050ED                 mov     ebp, esp
.text:000050EF                 push    ecx
.text:000050F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050F7                 mov     eax, [ebp+arg_0]
.text:000050FA                 push    eax
.text:000050FB                 call    _sblines
.text:00005100                 add     esp, 4
.text:00005103                 mov     [ebp+var_4], eax
.text:00005106                 mov     ecx, [ebp+arg_0]
.text:00005109                 mov     edx, [ecx+128h]
.text:0000510F                 push    edx
.text:00005110                 mov     eax, [ebp+arg_0]
.text:00005113                 mov     ecx, [ebp+var_4]
.text:00005116                 add     ecx, [eax+10h]
.text:00005119                 push    ecx
.text:0000511A                 mov     edx, [ebp+arg_0]
.text:0000511D                 mov     eax, [ebp+var_4]
.text:00005120                 add     eax, [edx+128h]
.text:00005126                 push    eax
.text:00005127                 mov     ecx, [ebp+arg_0]
.text:0000512A                 mov     edx, [ecx+1088h]
.text:00005130                 push    edx
.text:00005131                 call    _set_sbar
.text:00005136                 add     esp, 10h
.text:00005139                 add     esp, 4
.text:0000513C                 cmp     ebp, esp
.text:0000513E                 call    __RTC_CheckEsp
.text:00005143                 mov     esp, ebp
.text:00005145                 pop     ebp
.text:00005146                 retn
.text:00005146 _update_sbar    endp
.text:00005146
.text:00005146 ; ---------------------------------------------------------------------------
.text:00005147                 db 5 dup(0CCh)
.text:0000514C
.text:0000514C ; =============== S U B R O U T I N E =======================================
.text:0000514C
.text:0000514C ; Attributes: bp-based frame
.text:0000514C
.text:0000514C _sblines        proc near               ; CODE XREF: _update_sbar+Fp
.text:0000514C                                         ; _term_scroll+1Fp ...
.text:0000514C
.text:0000514C var_4           = dword ptr -4
.text:0000514C arg_0           = dword ptr  8
.text:0000514C
.text:0000514C                 push    ebp
.text:0000514D                 mov     ebp, esp
.text:0000514F                 push    ecx
.text:00005150                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005157                 mov     eax, [ebp+arg_0]
.text:0000515A
.text:0000515A loc_515A:                               ; CODE XREF: .text:$LN24j
.text:0000515A                 mov     ecx, [eax+4]
.text:0000515D                 push    ecx
.text:0000515E                 call    _count234
.text:00005163                 add     esp, 4
.text:00005166                 mov     [ebp+var_4], eax
.text:00005169                 mov     edx, [ebp+arg_0]
.text:0000516C                 cmp     dword ptr [edx+1118h], 0
.text:00005173                 jz      short loc_5199
.text:00005175                 mov     eax, [ebp+arg_0]
.text:00005178                 cmp     dword ptr [eax+1A4h], 0
.text:0000517F                 jz      short loc_5199
.text:00005181                 mov     ecx, [ebp+arg_0]
.text:00005184                 cmp     dword ptr [ecx+0Ch], 0
.text:00005188                 jz      short loc_5199
.text:0000518A                 mov     edx, [ebp+arg_0]
.text:0000518D                 mov     eax, [ebp+var_4]
.text:00005190                 add     eax, [edx+1A8h]
.text:00005196                 mov     [ebp+var_4], eax
.text:00005199
.text:00005199 loc_5199:                               ; CODE XREF: _sblines+27j
.text:00005199                                         ; _sblines+33j ...
.text:00005199                 mov     eax, [ebp+var_4]
.text:0000519C                 add     esp, 4
.text:0000519F                 cmp     ebp, esp
.text:000051A1                 call    __RTC_CheckEsp
.text:000051A6                 mov     esp, ebp
.text:000051A8                 pop     ebp
.text:000051A9                 retn
.text:000051A9 _sblines        endp
.text:000051A9
.text:000051A9 ; ---------------------------------------------------------------------------
.text:000051AA                 align 4
.text:000051AC
.text:000051AC ; =============== S U B R O U T I N E =======================================
.text:000051AC
.text:000051AC ; Attributes: bp-based frame
.text:000051AC
.text:000051AC _scroll         proc near               ; CODE XREF: _power_on+502p
.text:000051AC                                         ; _erase_lots+1B7p ...
.text:000051AC
.text:000051AC var_24          = dword ptr -24h
.text:000051AC var_20          = dword ptr -20h
.text:000051AC var_1C          = dword ptr -1Ch
.text:000051AC var_18          = dword ptr -18h
.text:000051AC var_14          = dword ptr -14h
.text:000051AC var_10          = dword ptr -10h
.text:000051AC var_C           = dword ptr -0Ch
.text:000051AC var_8           = dword ptr -8
.text:000051AC var_4           = dword ptr -4
.text:000051AC arg_0           = dword ptr  8
.text:000051AC arg_4           = dword ptr  0Ch
.text:000051AC arg_8           = dword ptr  10h
.text:000051AC arg_C           = dword ptr  14h
.text:000051AC arg_10          = dword ptr  18h
.text:000051AC
.text:000051AC                 push    ebp
.text:000051AD                 mov     ebp, esp
.text:000051AF                 sub     esp, 24h
.text:000051B2                 mov     eax, 0CCCCCCCCh
.text:000051B7                 mov     [ebp+var_24], eax
.text:000051BA                 mov     [ebp+var_20], eax
.text:000051BD                 mov     [ebp+var_1C], eax
.text:000051C0                 mov     [ebp+var_18], eax
.text:000051C3                 mov     [ebp+var_14], eax
.text:000051C6                 mov     [ebp+var_10], eax
.text:000051C9                 mov     [ebp+var_C], eax
.text:000051CC                 mov     [ebp+var_8], eax
.text:000051CF                 mov     [ebp+var_4], eax
.text:000051D2                 cmp     [ebp+arg_4], 0
.text:000051D6                 jnz     short loc_51E4
.text:000051D8                 mov     eax, [ebp+arg_0]
.text:000051DB                 cmp     dword ptr [eax+1A4h], 0
.text:000051E2                 jz      short loc_51EB
.text:000051E4
.text:000051E4 loc_51E4:                               ; CODE XREF: _scroll+2Aj
.text:000051E4                 mov     [ebp+arg_10], 0
.text:000051EB
.text:000051EB loc_51EB:                               ; CODE XREF: _scroll+36j
.text:000051EB                 mov     ecx, [ebp+arg_8]
.text:000051EE                 sub     ecx, [ebp+arg_4]
.text:000051F1                 add     ecx, 1
.text:000051F4                 mov     [ebp+var_10], ecx
.text:000051F7                 cmp     [ebp+arg_C], 0
.text:000051FB                 jge     loc_5389
.text:00005201                 mov     edx, [ebp+arg_C]
.text:00005204                 neg     edx
.text:00005206                 mov     [ebp+arg_C], edx
.text:00005209                 mov     eax, [ebp+arg_C]
.text:0000520C                 cmp     eax, [ebp+var_10]
.text:0000520F                 jle     short loc_5217
.text:00005211                 mov     ecx, [ebp+var_10]
.text:00005214                 mov     [ebp+arg_C], ecx
.text:00005217
.text:00005217 loc_5217:                               ; CODE XREF: _scroll+63j
.text:00005217                                         ; _scroll:loc_537Fj
.text:00005217                 mov     edx, [ebp+arg_C]
.text:0000521A                 mov     eax, [ebp+arg_C]
.text:0000521D                 sub     eax, 1
.text:00005220                 mov     [ebp+arg_C], eax
.text:00005223                 test    edx, edx
.text:00005225                 jle     short loc_5230
.text:00005227                 mov     [ebp+var_1C], 1
.text:0000522E                 jmp     short loc_5237
.text:00005230 ; ---------------------------------------------------------------------------
.text:00005230
.text:00005230 loc_5230:                               ; CODE XREF: _scroll+79j
.text:00005230                 mov     [ebp+var_1C], 0
.text:00005237
.text:00005237 loc_5237:                               ; CODE XREF: _scroll+82j
.text:00005237                 cmp     [ebp+var_1C], 0
.text:0000523B                 jz      loc_5384
.text:00005241                 mov     ecx, [ebp+arg_8]
.text:00005244                 push    ecx
.text:00005245                 mov     edx, [ebp+arg_0]
.text:00005248                 mov     eax, [edx+8]
.text:0000524B                 push    eax
.text:0000524C                 call    _delpos234
.text:00005251                 add     esp, 8
.text:00005254                 mov     [ebp+var_4], eax
.text:00005257                 mov     ecx, [ebp+arg_0]
.text:0000525A                 mov     edx, [ecx+12Ch]
.text:00005260                 push    edx
.text:00005261                 mov     eax, [ebp+var_4]
.text:00005264                 push    eax
.text:00005265                 mov     ecx, [ebp+arg_0]
.text:00005268                 push    ecx
.text:00005269                 call    _resizeline
.text:0000526E                 add     esp, 0Ch
.text:00005271                 mov     [ebp+var_8], 0
.text:00005278                 jmp     short loc_5283
.text:0000527A ; ---------------------------------------------------------------------------
.text:0000527A
.text:0000527A loc_527A:                               ; CODE XREF: _scroll+FCj
.text:0000527A                 mov     edx, [ebp+var_8]
.text:0000527D                 add     edx, 1
.text:00005280                 mov     [ebp+var_8], edx
.text:00005283
.text:00005283 loc_5283:                               ; CODE XREF: _scroll+CCj
.text:00005283                 mov     eax, [ebp+arg_0]
.text:00005286                 mov     ecx, [ebp+var_8]
.text:00005289                 cmp     ecx, [eax+12Ch]
.text:0000528F                 jge     short loc_52AA
.text:00005291                 mov     edx, [ebp+arg_0]
.text:00005294                 add     edx, 54h ; 'T'
.text:00005297                 push    edx
.text:00005298                 mov     eax, [ebp+var_8]
.text:0000529B                 push    eax
.text:0000529C                 mov     ecx, [ebp+var_4]
.text:0000529F                 push    ecx
.text:000052A0                 call    _copy_termchar
.text:000052A5                 add     esp, 0Ch
.text:000052A8                 jmp     short loc_527A
.text:000052AA ; ---------------------------------------------------------------------------
.text:000052AA
.text:000052AA loc_52AA:                               ; CODE XREF: _scroll+E3j
.text:000052AA                 xor     edx, edx
.text:000052AC                 mov     eax, [ebp+var_4]
.text:000052AF                 mov     [eax], dx
.text:000052B2                 mov     ecx, [ebp+arg_4]
.text:000052B5                 push    ecx
.text:000052B6                 mov     edx, [ebp+var_4]
.text:000052B9                 push    edx
.text:000052BA                 mov     eax, [ebp+arg_0]
.text:000052BD                 mov     ecx, [eax+8]
.text:000052C0                 push    ecx
.text:000052C1                 call    _addpos234
.text:000052C6                 add     esp, 0Ch
.text:000052C9                 mov     edx, [ebp+arg_0]
.text:000052CC                 mov     eax, [edx+0E54h]
.text:000052D2                 cmp     eax, [ebp+arg_4]
.text:000052D5                 jl      short loc_5324
.text:000052D7                 mov     ecx, [ebp+arg_0]
.text:000052DA                 mov     edx, [ecx+0E54h]
.text:000052E0                 cmp     edx, [ebp+arg_8]
.text:000052E3                 jg      short loc_5324
.text:000052E5                 mov     eax, [ebp+arg_0]
.text:000052E8                 mov     ecx, [eax+0E54h]
.text:000052EE                 add     ecx, 1
.text:000052F1                 mov     edx, [ebp+arg_0]
.text:000052F4                 mov     [edx+0E54h], ecx
.text:000052FA                 mov     eax, [ebp+arg_0]
.text:000052FD                 mov     ecx, [eax+0E54h]
.text:00005303                 cmp     ecx, [ebp+arg_8]
.text:00005306                 jle     short loc_5324
.text:00005308                 mov     edx, [ebp+arg_8]
.text:0000530B                 add     edx, 1
.text:0000530E                 mov     eax, [ebp+arg_0]
.text:00005311                 mov     [eax+0E54h], edx
.text:00005317                 mov     ecx, [ebp+arg_0]
.text:0000531A                 mov     dword ptr [ecx+0E58h], 0
.text:00005324
.text:00005324 loc_5324:                               ; CODE XREF: _scroll+129j
.text:00005324                                         ; _scroll+137j ...
.text:00005324                 mov     edx, [ebp+arg_0]
.text:00005327                 mov     eax, [edx+0E5Ch]
.text:0000532D                 cmp     eax, [ebp+arg_4]
.text:00005330                 jl      short loc_537F
.text:00005332                 mov     ecx, [ebp+arg_0]
.text:00005335                 mov     edx, [ecx+0E5Ch]
.text:0000533B                 cmp     edx, [ebp+arg_8]
.text:0000533E                 jg      short loc_537F
.text:00005340                 mov     eax, [ebp+arg_0]
.text:00005343                 mov     ecx, [eax+0E5Ch]
.text:00005349                 add     ecx, 1
.text:0000534C                 mov     edx, [ebp+arg_0]
.text:0000534F                 mov     [edx+0E5Ch], ecx
.text:00005355                 mov     eax, [ebp+arg_0]
.text:00005358                 mov     ecx, [eax+0E5Ch]
.text:0000535E                 cmp     ecx, [ebp+arg_8]
.text:00005361                 jle     short loc_537F
.text:00005363                 mov     edx, [ebp+arg_8]
.text:00005366                 add     edx, 1
.text:00005369                 mov     eax, [ebp+arg_0]
.text:0000536C                 mov     [eax+0E5Ch], edx
.text:00005372                 mov     ecx, [ebp+arg_0]
.text:00005375                 mov     dword ptr [ecx+0E60h], 0
.text:0000537F
.text:0000537F loc_537F:                               ; CODE XREF: _scroll+184j
.text:0000537F                                         ; _scroll+192j ...
.text:0000537F                 jmp     loc_5217
.text:00005384 ; ---------------------------------------------------------------------------
.text:00005384
.text:00005384 loc_5384:                               ; CODE XREF: _scroll+8Fj
.text:00005384                 jmp     loc_5647
.text:00005389 ; ---------------------------------------------------------------------------
.text:00005389
.text:00005389 loc_5389:                               ; CODE XREF: _scroll+4Fj
.text:00005389                 mov     edx, [ebp+arg_C]
.text:0000538C                 cmp     edx, [ebp+var_10]
.text:0000538F                 jle     short loc_5397
.text:00005391                 mov     eax, [ebp+var_10]
.text:00005394                 mov     [ebp+arg_C], eax
.text:00005397
.text:00005397 loc_5397:                               ; CODE XREF: _scroll+1E3j
.text:00005397                                         ; _scroll:loc_5642j
.text:00005397                 mov     ecx, [ebp+arg_C]
.text:0000539A                 mov     edx, [ebp+arg_C]
.text:0000539D                 sub     edx, 1
.text:000053A0                 mov     [ebp+arg_C], edx
.text:000053A3                 test    ecx, ecx
.text:000053A5                 jle     short loc_53B0
.text:000053A7                 mov     [ebp+var_20], 1
.text:000053AE                 jmp     short loc_53B7
.text:000053B0 ; ---------------------------------------------------------------------------
.text:000053B0
.text:000053B0 loc_53B0:                               ; CODE XREF: _scroll+1F9j
.text:000053B0                 mov     [ebp+var_20], 0
.text:000053B7
.text:000053B7 loc_53B7:                               ; CODE XREF: _scroll+202j
.text:000053B7                 cmp     [ebp+var_20], 0
.text:000053BB                 jz      loc_5647
.text:000053C1                 mov     eax, [ebp+arg_4]
.text:000053C4                 push    eax
.text:000053C5                 mov     ecx, [ebp+arg_0]
.text:000053C8                 mov     edx, [ecx+8]
.text:000053CB                 push    edx
.text:000053CC                 call    _delpos234
.text:000053D1                 add     esp, 8
.text:000053D4                 mov     [ebp+var_4], eax
.text:000053D7                 cmp     [ebp+arg_10], 0
.text:000053DB                 jz      loc_5496
.text:000053E1                 mov     eax, [ebp+arg_0]
.text:000053E4                 cmp     dword ptr [eax+130h], 0
.text:000053EB                 jle     loc_5496
.text:000053F1                 mov     ecx, [ebp+arg_0]
.text:000053F4                 mov     edx, [ecx+4]
.text:000053F7                 push    edx
.text:000053F8                 call    _count234
.text:000053FD                 add     esp, 4
.text:00005400                 mov     [ebp+var_14], eax
.text:00005403                 mov     eax, [ebp+arg_0]
.text:00005406                 mov     ecx, [ebp+var_14]
.text:00005409                 cmp     ecx, [eax+130h]
.text:0000540F                 jnz     short loc_543C
.text:00005411                 mov     edx, [ebp+var_14]
.text:00005414                 sub     edx, 1
.text:00005417                 mov     [ebp+var_14], edx
.text:0000541A                 push    0
.text:0000541C                 mov     eax, [ebp+arg_0]
.text:0000541F                 mov     ecx, [eax+4]
.text:00005422                 push    ecx
.text:00005423                 call    _delpos234
.text:00005428                 add     esp, 8
.text:0000542B                 mov     [ebp+var_18], eax
.text:0000542E                 mov     edx, [ebp+var_18]
.text:00005431                 push    edx
.text:00005432                 call    _safefree
.text:00005437                 add     esp, 4
.text:0000543A                 jmp     short loc_544B
.text:0000543C ; ---------------------------------------------------------------------------
.text:0000543C
.text:0000543C loc_543C:                               ; CODE XREF: _scroll+263j
.text:0000543C                 mov     eax, [ebp+arg_0]
.text:0000543F                 mov     ecx, [eax+14h]
.text:00005442                 add     ecx, 1
.text:00005445                 mov     edx, [ebp+arg_0]
.text:00005448                 mov     [edx+14h], ecx
.text:0000544B
.text:0000544B loc_544B:                               ; CODE XREF: _scroll+28Ej
.text:0000544B                 mov     eax, [ebp+var_14]
.text:0000544E                 push    eax
.text:0000544F                 mov     ecx, [ebp+var_4]
.text:00005452                 push    ecx
.text:00005453                 call    _compressline
.text:00005458                 add     esp, 4
.text:0000545B                 push    eax
.text:0000545C                 mov     edx, [ebp+arg_0]
.text:0000545F                 mov     eax, [edx+4]
.text:00005462                 push    eax
.text:00005463                 call    _addpos234
.text:00005468                 add     esp, 0Ch
.text:0000546B                 mov     ecx, [ebp+arg_0]
.text:0000546E                 mov     edx, [ecx+130h]
.text:00005474                 neg     edx
.text:00005476                 mov     eax, [ebp+arg_0]
.text:00005479                 cmp     [eax+10h], edx
.text:0000547C                 jle     short loc_5496
.text:0000547E                 mov     ecx, [ebp+arg_0]
.text:00005481                 cmp     dword ptr [ecx+10h], 0
.text:00005485                 jge     short loc_5496
.text:00005487                 mov     edx, [ebp+arg_0]
.text:0000548A                 mov     eax, [edx+10h]
.text:0000548D                 sub     eax, 1
.text:00005490                 mov     ecx, [ebp+arg_0]
.text:00005493                 mov     [ecx+10h], eax
.text:00005496
.text:00005496 loc_5496:                               ; CODE XREF: _scroll+22Fj
.text:00005496                                         ; _scroll+23Fj ...
.text:00005496                 mov     edx, [ebp+arg_0]
.text:00005499                 mov     eax, [edx+12Ch]
.text:0000549F                 push    eax
.text:000054A0                 mov     ecx, [ebp+var_4]
.text:000054A3                 push    ecx
.text:000054A4                 mov     edx, [ebp+arg_0]
.text:000054A7                 push    edx
.text:000054A8                 call    _resizeline
.text:000054AD                 add     esp, 0Ch
.text:000054B0                 mov     [ebp+var_8], 0
.text:000054B7                 jmp     short loc_54C2
.text:000054B9 ; ---------------------------------------------------------------------------
.text:000054B9
.text:000054B9 loc_54B9:                               ; CODE XREF: _scroll+33Bj
.text:000054B9                 mov     eax, [ebp+var_8]
.text:000054BC                 add     eax, 1
.text:000054BF                 mov     [ebp+var_8], eax
.text:000054C2
.text:000054C2 loc_54C2:                               ; CODE XREF: _scroll+30Bj
.text:000054C2                 mov     ecx, [ebp+arg_0]
.text:000054C5                 mov     edx, [ebp+var_8]
.text:000054C8                 cmp     edx, [ecx+12Ch]
.text:000054CE                 jge     short loc_54E9
.text:000054D0                 mov     eax, [ebp+arg_0]
.text:000054D3                 add     eax, 54h ; 'T'
.text:000054D6                 push    eax
.text:000054D7                 mov     ecx, [ebp+var_8]
.text:000054DA                 push    ecx
.text:000054DB                 mov     edx, [ebp+var_4]
.text:000054DE                 push    edx
.text:000054DF                 call    _copy_termchar
.text:000054E4                 add     esp, 0Ch
.text:000054E7                 jmp     short loc_54B9
.text:000054E9 ; ---------------------------------------------------------------------------
.text:000054E9
.text:000054E9 loc_54E9:                               ; CODE XREF: _scroll+322j
.text:000054E9                 xor     eax, eax
.text:000054EB                 mov     ecx, [ebp+var_4]
.text:000054EE                 mov     [ecx], ax
.text:000054F1                 mov     edx, [ebp+arg_8]
.text:000054F4                 push    edx
.text:000054F5                 mov     eax, [ebp+var_4]
.text:000054F8                 push    eax
.text:000054F9                 mov     ecx, [ebp+arg_0]
.text:000054FC                 mov     edx, [ecx+8]
.text:000054FF                 push    edx
.text:00005500                 call    _addpos234
.text:00005505                 add     esp, 0Ch
.text:00005508                 cmp     [ebp+arg_10], 0
.text:0000550C                 jz      short loc_551E
.text:0000550E                 mov     eax, [ebp+arg_0]
.text:00005511                 mov     ecx, [eax+130h]
.text:00005517                 neg     ecx
.text:00005519                 mov     [ebp+var_24], ecx
.text:0000551C                 jmp     short loc_5524
.text:0000551E ; ---------------------------------------------------------------------------
.text:0000551E
.text:0000551E loc_551E:                               ; CODE XREF: _scroll+360j
.text:0000551E                 mov     edx, [ebp+arg_4]
.text:00005521                 mov     [ebp+var_24], edx
.text:00005524
.text:00005524 loc_5524:                               ; CODE XREF: _scroll+370j
.text:00005524                 mov     eax, [ebp+var_24]
.text:00005527                 mov     [ebp+var_C], eax
.text:0000552A                 mov     ecx, [ebp+arg_0]
.text:0000552D                 cmp     dword ptr [ecx+0E48h], 0
.text:00005534                 jz      loc_5642
.text:0000553A                 mov     edx, [ebp+arg_0]
.text:0000553D                 mov     eax, [edx+0E54h]
.text:00005543                 cmp     eax, [ebp+var_C]
.text:00005546                 jl      short loc_5592
.text:00005548                 mov     ecx, [ebp+arg_0]
.text:0000554B                 mov     edx, [ecx+0E54h]
.text:00005551                 cmp     edx, [ebp+arg_8]
.text:00005554                 jg      short loc_5592
.text:00005556                 mov     eax, [ebp+arg_0]
.text:00005559                 mov     ecx, [eax+0E54h]
.text:0000555F                 sub     ecx, 1
.text:00005562                 mov     edx, [ebp+arg_0]
.text:00005565                 mov     [edx+0E54h], ecx
.text:0000556B                 mov     eax, [ebp+arg_0]
.text:0000556E                 mov     ecx, [eax+0E54h]
.text:00005574                 cmp     ecx, [ebp+var_C]
.text:00005577                 jge     short loc_5592
.text:00005579                 mov     edx, [ebp+arg_0]
.text:0000557C                 mov     eax, [ebp+var_C]
.text:0000557F                 mov     [edx+0E54h], eax
.text:00005585                 mov     ecx, [ebp+arg_0]
.text:00005588                 mov     dword ptr [ecx+0E58h], 0
.text:00005592
.text:00005592 loc_5592:                               ; CODE XREF: _scroll+39Aj
.text:00005592                                         ; _scroll+3A8j ...
.text:00005592                 mov     edx, [ebp+arg_0]
.text:00005595                 mov     eax, [edx+0E5Ch]
.text:0000559B                 cmp     eax, [ebp+var_C]
.text:0000559E                 jl      short loc_55EA
.text:000055A0                 mov     ecx, [ebp+arg_0]
.text:000055A3                 mov     edx, [ecx+0E5Ch]
.text:000055A9                 cmp     edx, [ebp+arg_8]
.text:000055AC                 jg      short loc_55EA
.text:000055AE                 mov     eax, [ebp+arg_0]
.text:000055B1                 mov     ecx, [eax+0E5Ch]
.text:000055B7                 sub     ecx, 1
.text:000055BA                 mov     edx, [ebp+arg_0]
.text:000055BD                 mov     [edx+0E5Ch], ecx
.text:000055C3                 mov     eax, [ebp+arg_0]
.text:000055C6                 mov     ecx, [eax+0E5Ch]
.text:000055CC                 cmp     ecx, [ebp+var_C]
.text:000055CF                 jge     short loc_55EA
.text:000055D1                 mov     edx, [ebp+arg_0]
.text:000055D4                 mov     eax, [ebp+var_C]
.text:000055D7                 mov     [edx+0E5Ch], eax
.text:000055DD                 mov     ecx, [ebp+arg_0]
.text:000055E0                 mov     dword ptr [ecx+0E60h], 0
.text:000055EA
.text:000055EA loc_55EA:                               ; CODE XREF: _scroll+3F2j
.text:000055EA                                         ; _scroll+400j ...
.text:000055EA                 mov     edx, [ebp+arg_0]
.text:000055ED                 mov     eax, [edx+0E64h]
.text:000055F3                 cmp     eax, [ebp+var_C]
.text:000055F6                 jl      short loc_5642
.text:000055F8                 mov     ecx, [ebp+arg_0]
.text:000055FB                 mov     edx, [ecx+0E64h]
.text:00005601                 cmp     edx, [ebp+arg_8]
.text:00005604                 jg      short loc_5642
.text:00005606                 mov     eax, [ebp+arg_0]
.text:00005609                 mov     ecx, [eax+0E64h]
.text:0000560F                 sub     ecx, 1
.text:00005612                 mov     edx, [ebp+arg_0]
.text:00005615                 mov     [edx+0E64h], ecx
.text:0000561B                 mov     eax, [ebp+arg_0]
.text:0000561E                 mov     ecx, [eax+0E64h]
.text:00005624                 cmp     ecx, [ebp+var_C]
.text:00005627                 jge     short loc_5642
.text:00005629                 mov     edx, [ebp+arg_0]
.text:0000562C                 mov     eax, [ebp+var_C]
.text:0000562F                 mov     [edx+0E64h], eax
.text:00005635                 mov     ecx, [ebp+arg_0]
.text:00005638                 mov     dword ptr [ecx+0E68h], 0
.text:00005642
.text:00005642 loc_5642:                               ; CODE XREF: _scroll+388j
.text:00005642                                         ; _scroll+44Aj ...
.text:00005642                 jmp     loc_5397
.text:00005647 ; ---------------------------------------------------------------------------
.text:00005647
.text:00005647 loc_5647:                               ; CODE XREF: _scroll:loc_5384j
.text:00005647                                         ; _scroll+20Fj
.text:00005647                 add     esp, 24h
.text:0000564A                 cmp     ebp, esp
.text:0000564C                 call    __RTC_CheckEsp
.text:00005651                 mov     esp, ebp
.text:00005653                 pop     ebp
.text:00005654                 retn
.text:00005654 _scroll         endp
.text:00005654
.text:00005654 ; ---------------------------------------------------------------------------
.text:00005655                 db 7 dup(0CCh)
.text:0000565C
.text:0000565C ; =============== S U B R O U T I N E =======================================
.text:0000565C
.text:0000565C ; Attributes: bp-based frame
.text:0000565C
.text:0000565C _copy_termchar  proc near               ; CODE XREF: _scroll+F4p
.text:0000565C                                         ; _scroll+333p ...
.text:0000565C
.text:0000565C arg_0           = dword ptr  8
.text:0000565C arg_4           = dword ptr  0Ch
.text:0000565C arg_8           = dword ptr  10h
.text:0000565C
.text:0000565C                 push    ebp
.text:0000565D                 mov     ebp, esp
.text:0000565F                 mov     eax, [ebp+arg_4]
.text:00005662                 push    eax
.text:00005663                 mov     ecx, [ebp+arg_0]
.text:00005666                 push    ecx
.text:00005667                 call    _clear_cc
.text:0000566C                 add     esp, 8
.text:0000566F                 mov     edx, [ebp+arg_8]
.text:00005672                 mov     eax, [ebp+arg_4]
.text:00005675                 imul    eax, 0Ch
.text:00005678                 mov     ecx, [ebp+arg_0]
.text:0000567B                 mov     ecx, [ecx+14h]
.text:0000567E                 add     ecx, eax
.text:00005680                 mov     eax, [edx]
.text:00005682                 mov     [ecx], eax
.text:00005684                 mov     eax, [edx+4]
.text:00005687                 mov     [ecx+4], eax
.text:0000568A                 mov     edx, [edx+8]
.text:0000568D                 mov     [ecx+8], edx
.text:00005690                 mov     eax, [ebp+arg_4]
.text:00005693                 imul    eax, 0Ch
.text:00005696                 mov     ecx, [ebp+arg_0]
.text:00005699                 mov     edx, [ecx+14h]
.text:0000569C                 mov     dword ptr [edx+eax+8], 0
.text:000056A4
.text:000056A4 loc_56A4:                               ; CODE XREF: _copy_termchar+76j
.text:000056A4                 mov     eax, [ebp+arg_8]
.text:000056A7                 cmp     dword ptr [eax+8], 0
.text:000056AB                 jz      short loc_56D4
.text:000056AD                 mov     ecx, [ebp+arg_8]
.text:000056B0                 mov     edx, [ecx+8]
.text:000056B3                 imul    edx, 0Ch
.text:000056B6                 add     edx, [ebp+arg_8]
.text:000056B9                 mov     [ebp+arg_8], edx
.text:000056BC                 mov     eax, [ebp+arg_8]
.text:000056BF                 mov     ecx, [eax]
.text:000056C1                 push    ecx
.text:000056C2                 mov     edx, [ebp+arg_4]
.text:000056C5                 push    edx
.text:000056C6                 mov     eax, [ebp+arg_0]
.text:000056C9                 push    eax
.text:000056CA                 call    _add_cc
.text:000056CF                 add     esp, 0Ch
.text:000056D2                 jmp     short loc_56A4
.text:000056D4 ; ---------------------------------------------------------------------------
.text:000056D4
.text:000056D4 loc_56D4:                               ; CODE XREF: _copy_termchar+4Fj
.text:000056D4                 cmp     ebp, esp
.text:000056D6                 call    __RTC_CheckEsp
.text:000056DB                 pop     ebp
.text:000056DC                 retn
.text:000056DC _copy_termchar  endp
.text:000056DC
.text:000056DC ; ---------------------------------------------------------------------------
.text:000056DD                 db 0Fh dup(0CCh)
.text:000056EC
.text:000056EC ; =============== S U B R O U T I N E =======================================
.text:000056EC
.text:000056EC ; Attributes: bp-based frame
.text:000056EC
.text:000056EC _erase_lots     proc near               ; CODE XREF: _power_on+47Dp
.text:000056EC                                         ; _power_on+4A7p ...
.text:000056EC
.text:000056EC var_38          = dword ptr -38h
.text:000056EC var_34          = dword ptr -34h
.text:000056EC var_30          = dword ptr -30h
.text:000056EC var_2C          = dword ptr -2Ch
.text:000056EC var_28          = dword ptr -28h
.text:000056EC var_24          = dword ptr -24h
.text:000056EC var_1C          = dword ptr -1Ch
.text:000056EC var_18          = dword ptr -18h
.text:000056EC var_C           = dword ptr -0Ch
.text:000056EC var_8           = dword ptr -8
.text:000056EC arg_0           = dword ptr  8
.text:000056EC arg_4           = dword ptr  0Ch
.text:000056EC arg_8           = dword ptr  10h
.text:000056EC arg_C           = dword ptr  14h
.text:000056EC
.text:000056EC                 push    ebp
.text:000056ED                 mov     ebp, esp
.text:000056EF                 sub     esp, 38h
.text:000056F2                 push    edi
.text:000056F3                 lea     edi, [ebp+var_38]
.text:000056F6                 mov     ecx, 0Eh
.text:000056FB                 mov     eax, 0CCCCCCCCh
.text:00005700                 rep stosd
.text:00005702                 mov     [ebp+var_28], 0
.text:00005709                 cmp     [ebp+arg_4], 0
.text:0000570D                 jz      short loc_573B
.text:0000570F                 mov     eax, [ebp+arg_0]
.text:00005712                 mov     ecx, [eax+6Ch]
.text:00005715                 mov     [ebp+var_C], ecx
.text:00005718                 mov     [ebp+var_8], 0
.text:0000571F                 mov     edx, [ebp+arg_0]
.text:00005722                 mov     eax, [edx+6Ch]
.text:00005725                 add     eax, 1
.text:00005728                 mov     [ebp+var_1C], eax
.text:0000572B                 mov     [ebp+var_18], 0
.text:00005732                 mov     [ebp+var_24], 0
.text:00005739                 jmp     short loc_5763
.text:0000573B ; ---------------------------------------------------------------------------
.text:0000573B
.text:0000573B loc_573B:                               ; CODE XREF: _erase_lots+21j
.text:0000573B                 mov     [ebp+var_C], 0
.text:00005742                 mov     [ebp+var_8], 0
.text:00005749                 mov     ecx, [ebp+arg_0]
.text:0000574C                 mov     edx, [ecx+128h]
.text:00005752                 mov     [ebp+var_1C], edx
.text:00005755                 mov     [ebp+var_18], 0
.text:0000575C                 mov     [ebp+var_24], 1
.text:00005763
.text:00005763 loc_5763:                               ; CODE XREF: _erase_lots+4Dj
.text:00005763                 cmp     [ebp+arg_8], 0
.text:00005767                 jnz     short loc_5778
.text:00005769                 mov     eax, [ebp+arg_0]
.text:0000576C                 mov     ecx, [eax+6Ch]
.text:0000576F                 mov     edx, [eax+70h]
.text:00005772                 mov     [ebp+var_C], ecx
.text:00005775                 mov     [ebp+var_8], edx
.text:00005778
.text:00005778 loc_5778:                               ; CODE XREF: _erase_lots+7Bj
.text:00005778                 cmp     [ebp+arg_C], 0
.text:0000577C                 jnz     short loc_57C4
.text:0000577E                 mov     eax, [ebp+arg_0]
.text:00005781                 mov     ecx, [eax+6Ch]
.text:00005784                 mov     edx, [eax+70h]
.text:00005787                 mov     [ebp+var_1C], ecx
.text:0000578A                 mov     [ebp+var_18], edx
.text:0000578D                 mov     eax, [ebp+arg_0]
.text:00005790                 mov     ecx, [ebp+var_18]
.text:00005793                 cmp     ecx, [eax+12Ch]
.text:00005799                 jnz     short loc_57B4
.text:0000579B                 mov     [ebp+var_18], 0
.text:000057A2                 mov     edx, [ebp+var_1C]
.text:000057A5                 add     edx, 1
.text:000057A8                 mov     [ebp+var_1C], edx
.text:000057AB                 mov     [ebp+var_34], 1
.text:000057B2                 jmp     short loc_57C4
.text:000057B4 ; ---------------------------------------------------------------------------
.text:000057B4
.text:000057B4 loc_57B4:                               ; CODE XREF: _erase_lots+ADj
.text:000057B4                 mov     eax, [ebp+var_18]
.text:000057B7                 add     eax, 1
.text:000057BA                 mov     [ebp+var_18], eax
.text:000057BD                 mov     [ebp+var_34], 0
.text:000057C4
.text:000057C4 loc_57C4:                               ; CODE XREF: _erase_lots+90j
.text:000057C4                                         ; _erase_lots+C6j
.text:000057C4                 cmp     [ebp+arg_8], 0
.text:000057C8                 jz      short loc_57D0
.text:000057CA                 cmp     [ebp+arg_C], 0
.text:000057CE                 jnz     short loc_57EA
.text:000057D0
.text:000057D0 loc_57D0:                               ; CODE XREF: _erase_lots+DCj
.text:000057D0                 mov     ecx, [ebp+arg_0]
.text:000057D3                 mov     edx, [ecx+6Ch]
.text:000057D6                 push    edx
.text:000057D7                 mov     eax, [ebp+arg_0]
.text:000057DA                 mov     ecx, [eax+70h]
.text:000057DD                 push    ecx
.text:000057DE                 mov     edx, [ebp+arg_0]
.text:000057E1                 push    edx
.text:000057E2                 call    _check_boundary
.text:000057E7                 add     esp, 0Ch
.text:000057EA
.text:000057EA loc_57EA:                               ; CODE XREF: _erase_lots+E2j
.text:000057EA                 mov     eax, [ebp+var_18]
.text:000057ED                 push    eax
.text:000057EE                 mov     ecx, [ebp+var_1C]
.text:000057F1                 push    ecx
.text:000057F2                 mov     edx, [ebp+var_8]
.text:000057F5                 push    edx
.text:000057F6                 mov     eax, [ebp+var_C]
.text:000057F9                 push    eax
.text:000057FA                 mov     ecx, [ebp+arg_0]
.text:000057FD                 push    ecx
.text:000057FE                 call    _check_selection
.text:00005803                 add     esp, 14h
.text:00005806                 cmp     [ebp+var_C], 0
.text:0000580A                 jnz     short loc_582C
.text:0000580C                 cmp     [ebp+var_8], 0
.text:00005810                 jnz     short loc_582C
.text:00005812                 mov     edx, [ebp+arg_0]
.text:00005815                 mov     eax, [ebp+var_1C]
.text:00005818                 cmp     eax, [edx+128h]
.text:0000581E                 jnz     short loc_582C
.text:00005820                 mov     ecx, [ebp+arg_0]
.text:00005823                 push    ecx
.text:00005824                 call    _term_invalidate
.text:00005829                 add     esp, 4
.text:0000582C
.text:0000582C loc_582C:                               ; CODE XREF: _erase_lots+11Ej
.text:0000582C                                         ; _erase_lots+124j ...
.text:0000582C                 cmp     [ebp+var_C], 0
.text:00005830                 jnz     short loc_584B
.text:00005832                 cmp     [ebp+var_8], 0
.text:00005836                 jnz     short loc_584B
.text:00005838                 cmp     [ebp+var_18], 0
.text:0000583C                 jnz     short loc_584B
.text:0000583E                 cmp     [ebp+var_24], 0
.text:00005842                 jz      short loc_584B
.text:00005844                 mov     [ebp+var_28], 1
.text:0000584B
.text:0000584B loc_584B:                               ; CODE XREF: _erase_lots+144j
.text:0000584B                                         ; _erase_lots+14Aj ...
.text:0000584B                 mov     edx, [ebp+arg_0]
.text:0000584E                 cmp     dword ptr [edx+1118h], 0
.text:00005855                 jz      short loc_58B0
.text:00005857                 cmp     [ebp+var_28], 0
.text:0000585B                 jz      short loc_58B0
.text:0000585D                 mov     eax, [ebp+var_1C]
.text:00005860                 mov     [ebp+var_2C], eax
.text:00005863                 mov     ecx, [ebp+arg_0]
.text:00005866                 mov     edx, [ebp+var_1C]
.text:00005869                 cmp     edx, [ecx+128h]
.text:0000586F                 jnz     short loc_588A
.text:00005871                 mov     eax, [ebp+arg_0]
.text:00005874                 mov     ecx, [eax+8]
.text:00005877                 push    ecx
.text:00005878                 mov     edx, [ebp+arg_0]
.text:0000587B                 push    edx
.text:0000587C                 call    _find_last_nonempty_line
.text:00005881                 add     esp, 8
.text:00005884                 add     eax, 1
.text:00005887                 mov     [ebp+var_2C], eax
.text:0000588A
.text:0000588A loc_588A:                               ; CODE XREF: _erase_lots+183j
.text:0000588A                 cmp     [ebp+var_2C], 0
.text:0000588E                 jle     short loc_58AB
.text:00005890                 push    1
.text:00005892                 mov     eax, [ebp+var_2C]
.text:00005895                 push    eax
.text:00005896                 mov     ecx, [ebp+var_2C]
.text:00005899                 sub     ecx, 1
.text:0000589C                 push    ecx
.text:0000589D                 push    0
.text:0000589F                 mov     edx, [ebp+arg_0]
.text:000058A2                 push    edx
.text:000058A3                 call    _scroll
.text:000058A8                 add     esp, 14h
.text:000058AB
.text:000058AB loc_58AB:                               ; CODE XREF: _erase_lots+1A2j
.text:000058AB                 jmp     loc_59AA
.text:000058B0 ; ---------------------------------------------------------------------------
.text:000058B0
.text:000058B0 loc_58B0:                               ; CODE XREF: _erase_lots+169j
.text:000058B0                                         ; _erase_lots+16Fj
.text:000058B0                 push    1
.text:000058B2                 push    973h
.text:000058B7                 mov     eax, [ebp+var_C]
.text:000058BA                 push    eax
.text:000058BB                 mov     ecx, [ebp+arg_0]
.text:000058BE                 push    ecx
.text:000058BF                 call    _lineptr
.text:000058C4                 add     esp, 10h
.text:000058C7                 mov     [ebp+var_30], eax
.text:000058CA
.text:000058CA loc_58CA:                               ; CODE XREF: _erase_lots:loc_59A5j
.text:000058CA                 mov     edx, [ebp+var_C]
.text:000058CD                 cmp     edx, [ebp+var_1C]
.text:000058D0                 jl      short loc_58EA
.text:000058D2                 mov     eax, [ebp+var_C]
.text:000058D5                 cmp     eax, [ebp+var_1C]
.text:000058D8                 jnz     loc_59AA
.text:000058DE                 mov     ecx, [ebp+var_8]
.text:000058E1                 cmp     ecx, [ebp+var_18]
.text:000058E4                 jge     loc_59AA
.text:000058EA
.text:000058EA loc_58EA:                               ; CODE XREF: _erase_lots+1E4j
.text:000058EA                 mov     edx, [ebp+var_30]
.text:000058ED                 push    edx
.text:000058EE                 mov     eax, [ebp+arg_0]
.text:000058F1                 push    eax
.text:000058F2                 call    _check_line_size
.text:000058F7                 add     esp, 8
.text:000058FA                 mov     ecx, [ebp+arg_0]
.text:000058FD                 mov     edx, [ebp+var_8]
.text:00005900                 cmp     edx, [ecx+12Ch]
.text:00005906                 jnz     short loc_5929
.text:00005908                 cmp     [ebp+var_24], 0
.text:0000590C                 jnz     short loc_591F
.text:0000590E                 mov     eax, [ebp+var_30]
.text:00005911                 movzx   ecx, word ptr [eax]
.text:00005914                 and     ecx, 0FFFFFFCFh
.text:00005917                 mov     edx, [ebp+var_30]
.text:0000591A                 mov     [edx], cx
.text:0000591D                 jmp     short loc_5927
.text:0000591F ; ---------------------------------------------------------------------------
.text:0000591F
.text:0000591F loc_591F:                               ; CODE XREF: _erase_lots+220j
.text:0000591F                 xor     eax, eax
.text:00005921                 mov     ecx, [ebp+var_30]
.text:00005924                 mov     [ecx], ax
.text:00005927
.text:00005927 loc_5927:                               ; CODE XREF: _erase_lots+231j
.text:00005927                 jmp     short loc_5940
.text:00005929 ; ---------------------------------------------------------------------------
.text:00005929
.text:00005929 loc_5929:                               ; CODE XREF: _erase_lots+21Aj
.text:00005929                 mov     edx, [ebp+arg_0]
.text:0000592C                 add     edx, 54h ; 'T'
.text:0000592F                 push    edx
.text:00005930                 mov     eax, [ebp+var_8]
.text:00005933                 push    eax
.text:00005934                 mov     ecx, [ebp+var_30]
.text:00005937                 push    ecx
.text:00005938                 call    _copy_termchar
.text:0000593D                 add     esp, 0Ch
.text:00005940
.text:00005940 loc_5940:                               ; CODE XREF: _erase_lots:loc_5927j
.text:00005940                 mov     edx, [ebp+arg_0]
.text:00005943                 mov     eax, [ebp+var_8]
.text:00005946                 cmp     eax, [edx+12Ch]
.text:0000594C                 jnz     short loc_5967
.text:0000594E                 mov     [ebp+var_8], 0
.text:00005955                 mov     ecx, [ebp+var_C]
.text:00005958                 add     ecx, 1
.text:0000595B                 mov     [ebp+var_C], ecx
.text:0000595E                 mov     [ebp+var_38], 1
.text:00005965                 jmp     short loc_5977
.text:00005967 ; ---------------------------------------------------------------------------
.text:00005967
.text:00005967 loc_5967:                               ; CODE XREF: _erase_lots+260j
.text:00005967                 mov     edx, [ebp+var_8]
.text:0000596A                 add     edx, 1
.text:0000596D                 mov     [ebp+var_8], edx
.text:00005970                 mov     [ebp+var_38], 0
.text:00005977
.text:00005977 loc_5977:                               ; CODE XREF: _erase_lots+279j
.text:00005977                 cmp     [ebp+var_38], 0
.text:0000597B                 jz      short loc_59A5
.text:0000597D                 mov     eax, [ebp+arg_0]
.text:00005980                 mov     ecx, [ebp+var_C]
.text:00005983                 cmp     ecx, [eax+128h]
.text:00005989                 jge     short loc_59A5
.text:0000598B                 push    1
.text:0000598D                 push    97Fh
.text:00005992                 mov     edx, [ebp+var_C]
.text:00005995                 push    edx
.text:00005996                 mov     eax, [ebp+arg_0]
.text:00005999                 push    eax
.text:0000599A                 call    _lineptr
.text:0000599F                 add     esp, 10h
.text:000059A2                 mov     [ebp+var_30], eax
.text:000059A5
.text:000059A5 loc_59A5:                               ; CODE XREF: _erase_lots+28Fj
.text:000059A5                                         ; _erase_lots+29Dj
.text:000059A5                 jmp     loc_58CA
.text:000059AA ; ---------------------------------------------------------------------------
.text:000059AA
.text:000059AA loc_59AA:                               ; CODE XREF: _erase_lots:loc_58ABj
.text:000059AA                                         ; _erase_lots+1ECj ...
.text:000059AA                 cmp     [ebp+var_28], 0
.text:000059AE                 jz      short loc_59C6
.text:000059B0                 mov     ecx, [ebp+arg_0]
.text:000059B3                 cmp     dword ptr [ecx+1A4h], 0
.text:000059BA                 jnz     short loc_59C6
.text:000059BC                 mov     edx, [ebp+arg_0]
.text:000059BF                 mov     dword ptr [edx+14h], 0
.text:000059C6
.text:000059C6 loc_59C6:                               ; CODE XREF: _erase_lots+2C2j
.text:000059C6                                         ; _erase_lots+2CEj
.text:000059C6                 push    edx
.text:000059C7                 mov     ecx, ebp
.text:000059C9                 push    eax
.text:000059CA                 lea     edx, $LN31_0
.text:000059D0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000059D5                 pop     eax
.text:000059D6                 pop     edx
.text:000059D7                 pop     edi
.text:000059D8                 add     esp, 38h
.text:000059DB                 cmp     ebp, esp
.text:000059DD                 call    __RTC_CheckEsp
.text:000059E2                 mov     esp, ebp
.text:000059E4                 pop     ebp
.text:000059E5                 retn
.text:000059E5 _erase_lots     endp
.text:000059E5
.text:000059E5 ; ---------------------------------------------------------------------------
.text:000059E6                 align 4
.text:000059E8 $LN31_0         dd 2                    ; DATA XREF: _erase_lots+2DEo
.text:000059EC                 dd offset $LN30_0
.text:000059F0 $LN30_0         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000059ECo
.text:000059F8                 dd offset $LN28         ; "start"
.text:000059FC                 dd 0FFFFFFE4h, 8
.text:00005A04                 dd offset $LN29
.text:00005A08 $LN29           dd 646E65h              ; DATA XREF: .text:00005A04o
.text:00005A0C $LN28           db 'start',0            ; DATA XREF: .text:000059F8o
.text:00005A12                 db 0Ah dup(0CCh)
.text:00005A1C
.text:00005A1C ; =============== S U B R O U T I N E =======================================
.text:00005A1C
.text:00005A1C ; Attributes: bp-based frame
.text:00005A1C
.text:00005A1C _check_selection proc near              ; CODE XREF: _erase_lots+112p
.text:00005A1C                                         ; _term_out+F0Cp ...
.text:00005A1C
.text:00005A1C arg_0           = dword ptr  8
.text:00005A1C arg_4           = dword ptr  0Ch
.text:00005A1C arg_8           = dword ptr  10h
.text:00005A1C arg_C           = dword ptr  14h
.text:00005A1C arg_10          = dword ptr  18h
.text:00005A1C
.text:00005A1C                 push    ebp
.text:00005A1D                 mov     ebp, esp
.text:00005A1F                 mov     eax, [ebp+arg_0]
.text:00005A22                 mov     ecx, [ebp+arg_4]
.text:00005A25                 cmp     ecx, [eax+0E5Ch]
.text:00005A2B                 jl      short loc_5A49
.text:00005A2D                 mov     edx, [ebp+arg_0]
.text:00005A30                 mov     eax, [ebp+arg_4]
.text:00005A33                 cmp     eax, [edx+0E5Ch]
.text:00005A39                 jnz     short loc_5A7F
.text:00005A3B                 mov     ecx, [ebp+arg_0]
.text:00005A3E                 mov     edx, [ebp+arg_8]
.text:00005A41                 cmp     edx, [ecx+0E60h]
.text:00005A47                 jge     short loc_5A7F
.text:00005A49
.text:00005A49 loc_5A49:                               ; CODE XREF: _check_selection+Fj
.text:00005A49                 mov     eax, [ebp+arg_0]
.text:00005A4C                 mov     ecx, [eax+0E54h]
.text:00005A52                 cmp     ecx, [ebp+arg_C]
.text:00005A55                 jl      short loc_5A73
.text:00005A57                 mov     edx, [ebp+arg_0]
.text:00005A5A                 mov     eax, [edx+0E54h]
.text:00005A60                 cmp     eax, [ebp+arg_C]
.text:00005A63                 jnz     short loc_5A7F
.text:00005A65                 mov     ecx, [ebp+arg_0]
.text:00005A68                 mov     edx, [ecx+0E58h]
.text:00005A6E                 cmp     edx, [ebp+arg_10]
.text:00005A71                 jge     short loc_5A7F
.text:00005A73
.text:00005A73 loc_5A73:                               ; CODE XREF: _check_selection+39j
.text:00005A73                 mov     eax, [ebp+arg_0]
.text:00005A76                 push    eax
.text:00005A77                 call    _deselect
.text:00005A7C                 add     esp, 4
.text:00005A7F
.text:00005A7F loc_5A7F:                               ; CODE XREF: _check_selection+1Dj
.text:00005A7F                                         ; _check_selection+2Bj ...
.text:00005A7F                 cmp     ebp, esp
.text:00005A81                 call    __RTC_CheckEsp
.text:00005A86                 pop     ebp
.text:00005A87                 retn
.text:00005A87 _check_selection endp
.text:00005A87
.text:00005A87 ; ---------------------------------------------------------------------------
.text:00005A88                 db 4 dup(0CCh)
.text:00005A8C
.text:00005A8C ; =============== S U B R O U T I N E =======================================
.text:00005A8C
.text:00005A8C ; Attributes: bp-based frame
.text:00005A8C
.text:00005A8C _check_boundary proc near               ; CODE XREF: _erase_lots+F6p
.text:00005A8C                                         ; _term_out+82Ap ...
.text:00005A8C
.text:00005A8C var_4           = dword ptr -4
.text:00005A8C arg_0           = dword ptr  8
.text:00005A8C arg_4           = dword ptr  0Ch
.text:00005A8C arg_8           = dword ptr  10h
.text:00005A8C
.text:00005A8C                 push    ebp
.text:00005A8D                 mov     ebp, esp
.text:00005A8F                 push    ecx
.text:00005A90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A97                 cmp     [ebp+arg_4], 0
.text:00005A9B                 jz      short loc_5AAB
.text:00005A9D                 mov     eax, [ebp+arg_0]
.text:00005AA0                 mov     ecx, [ebp+arg_4]
.text:00005AA3                 cmp     ecx, [eax+12Ch]
.text:00005AA9                 jle     short loc_5AB0
.text:00005AAB
.text:00005AAB loc_5AAB:                               ; CODE XREF: _check_boundary+Fj
.text:00005AAB                 jmp     loc_5B76
.text:00005AB0 ; ---------------------------------------------------------------------------
.text:00005AB0
.text:00005AB0 loc_5AB0:                               ; CODE XREF: _check_boundary+1Dj
.text:00005AB0                 push    1
.text:00005AB2                 push    92Dh
.text:00005AB7                 mov     edx, [ebp+arg_8]
.text:00005ABA                 push    edx
.text:00005ABB                 mov     eax, [ebp+arg_0]
.text:00005ABE                 push    eax
.text:00005ABF                 call    _lineptr
.text:00005AC4                 add     esp, 10h
.text:00005AC7                 mov     [ebp+var_4], eax
.text:00005ACA                 mov     ecx, [ebp+var_4]
.text:00005ACD                 push    ecx
.text:00005ACE                 mov     edx, [ebp+arg_0]
.text:00005AD1                 push    edx
.text:00005AD2                 call    _check_line_size
.text:00005AD7                 add     esp, 8
.text:00005ADA                 mov     eax, [ebp+arg_0]
.text:00005ADD                 mov     ecx, [ebp+arg_4]
.text:00005AE0                 cmp     ecx, [eax+12Ch]
.text:00005AE6                 jnz     short loc_5AF9
.text:00005AE8                 mov     edx, [ebp+var_4]
.text:00005AEB                 movzx   eax, word ptr [edx]
.text:00005AEE                 and     eax, 0FFFFFFDFh
.text:00005AF1                 mov     ecx, [ebp+var_4]
.text:00005AF4                 mov     [ecx], ax
.text:00005AF7                 jmp     short loc_5B76
.text:00005AF9 ; ---------------------------------------------------------------------------
.text:00005AF9
.text:00005AF9 loc_5AF9:                               ; CODE XREF: _check_boundary+5Aj
.text:00005AF9                 mov     edx, [ebp+arg_4]
.text:00005AFC                 imul    edx, 0Ch
.text:00005AFF                 mov     eax, [ebp+var_4]
.text:00005B02                 mov     ecx, [eax+14h]
.text:00005B05                 cmp     dword ptr [edx+ecx], 0DFFFh
.text:00005B0C                 jnz     short loc_5B76
.text:00005B0E                 mov     edx, [ebp+arg_4]
.text:00005B11                 sub     edx, 1
.text:00005B14                 push    edx
.text:00005B15                 mov     eax, [ebp+var_4]
.text:00005B18                 push    eax
.text:00005B19                 call    _clear_cc
.text:00005B1E                 add     esp, 8
.text:00005B21                 mov     ecx, [ebp+arg_4]
.text:00005B24                 push    ecx
.text:00005B25                 mov     edx, [ebp+var_4]
.text:00005B28                 push    edx
.text:00005B29                 call    _clear_cc
.text:00005B2E                 add     esp, 8
.text:00005B31                 mov     eax, [ebp+arg_4]
.text:00005B34                 sub     eax, 1
.text:00005B37                 imul    eax, 0Ch
.text:00005B3A                 mov     ecx, [ebp+var_4]
.text:00005B3D                 mov     edx, [ecx+14h]
.text:00005B40                 mov     dword ptr [eax+edx], 0D820h
.text:00005B47                 mov     eax, [ebp+arg_4]
.text:00005B4A                 sub     eax, 1
.text:00005B4D                 imul    eax, 0Ch
.text:00005B50                 mov     ecx, [ebp+var_4]
.text:00005B53                 mov     edx, [ecx+14h]
.text:00005B56                 add     edx, eax
.text:00005B58                 mov     eax, [ebp+arg_4]
.text:00005B5B                 imul    eax, 0Ch
.text:00005B5E                 mov     ecx, [ebp+var_4]
.text:00005B61                 mov     ecx, [ecx+14h]
.text:00005B64                 add     ecx, eax
.text:00005B66                 mov     eax, [edx]
.text:00005B68                 mov     [ecx], eax
.text:00005B6A                 mov     eax, [edx+4]
.text:00005B6D                 mov     [ecx+4], eax
.text:00005B70                 mov     edx, [edx+8]
.text:00005B73                 mov     [ecx+8], edx
.text:00005B76
.text:00005B76 loc_5B76:                               ; CODE XREF: _check_boundary:loc_5AABj
.text:00005B76                                         ; _check_boundary+6Bj ...
.text:00005B76                 add     esp, 4
.text:00005B79                 cmp     ebp, esp
.text:00005B7B                 call    __RTC_CheckEsp
.text:00005B80                 mov     esp, ebp
.text:00005B82                 pop     ebp
.text:00005B83                 retn
.text:00005B83 _check_boundary endp
.text:00005B83
.text:00005B83 ; ---------------------------------------------------------------------------
.text:00005B84                 db 8 dup(0CCh)
.text:00005B8C
.text:00005B8C ; =============== S U B R O U T I N E =======================================
.text:00005B8C
.text:00005B8C ; Attributes: bp-based frame
.text:00005B8C
.text:00005B8C _term_print_finish proc near            ; CODE XREF: _power_on+3BEp
.text:00005B8C                                         ; _term_reconfig+453p ...
.text:00005B8C
.text:00005B8C var_28          = byte ptr -28h
.text:00005B8C var_21          = byte ptr -21h
.text:00005B8C var_1C          = dword ptr -1Ch
.text:00005B8C var_14          = byte ptr -14h
.text:00005B8C var_8           = dword ptr -8
.text:00005B8C arg_0           = dword ptr  8
.text:00005B8C
.text:00005B8C                 push    ebp
.text:00005B8D                 mov     ebp, esp
.text:00005B8F                 sub     esp, 28h
.text:00005B92                 push    edi
.text:00005B93                 lea     edi, [ebp+var_28]
.text:00005B96                 mov     ecx, 0Ah
.text:00005B9B                 mov     eax, 0CCCCCCCCh
.text:00005BA0                 rep stosd
.text:00005BA2                 mov     eax, [ebp+arg_0]
.text:00005BA5                 cmp     dword ptr [eax+0ECh], 0
.text:00005BAC                 jnz     short loc_5BBF
.text:00005BAE                 mov     ecx, [ebp+arg_0]
.text:00005BB1                 cmp     dword ptr [ecx+0F0h], 0
.text:00005BB8                 jnz     short loc_5BBF
.text:00005BBA                 jmp     loc_5C9B
.text:00005BBF ; ---------------------------------------------------------------------------
.text:00005BBF
.text:00005BBF loc_5BBF:                               ; CODE XREF: _term_print_finish+20j
.text:00005BBF                                         ; _term_print_finish+2Cj
.text:00005BBF                 mov     edx, [ebp+arg_0]
.text:00005BC2                 push    edx
.text:00005BC3                 call    _term_print_flush
.text:00005BC8                 add     esp, 4
.text:00005BCB
.text:00005BCB loc_5BCB:                               ; CODE XREF: _term_print_finish:loc_5C5Dj
.text:00005BCB                 mov     eax, [ebp+arg_0]
.text:00005BCE                 add     eax, 0F8h ; '°'
.text:00005BD3                 push    eax
.text:00005BD4                 call    _bufchain_size
.text:00005BD9                 add     esp, 4
.text:00005BDC                 mov     [ebp+var_1C], eax
.text:00005BDF                 cmp     [ebp+var_1C], 0
.text:00005BE3                 jle     short loc_5C62
.text:00005BE5                 lea     ecx, [ebp+var_14]
.text:00005BE8                 push    ecx
.text:00005BE9                 lea     edx, [ebp+var_8]
.text:00005BEC                 push    edx
.text:00005BED                 mov     eax, [ebp+arg_0]
.text:00005BF0                 add     eax, 0F8h ; '°'
.text:00005BF5                 push    eax
.text:00005BF6                 call    _bufchain_prefix
.text:00005BFB                 add     esp, 0Ch
.text:00005BFE                 mov     ecx, [ebp+var_8]
.text:00005C01                 mov     dl, [ecx]
.text:00005C03                 mov     [ebp+var_21], dl
.text:00005C06                 movsx   eax, [ebp+var_21]
.text:00005C0A                 cmp     eax, 1Bh
.text:00005C0D                 jz      short loc_5C18
.text:00005C0F                 movsx   ecx, [ebp+var_21]
.text:00005C13                 cmp     ecx, 0FFFFFF9Bh
.text:00005C16                 jnz     short loc_5C31
.text:00005C18
.text:00005C18 loc_5C18:                               ; CODE XREF: _term_print_finish+81j
.text:00005C18                 mov     edx, [ebp+var_1C]
.text:00005C1B
.text:00005C1B loc_5C1B:                               ; DATA XREF: .data:$SG87539o
.text:00005C1B                                         ; .data:$SG87545o
.text:00005C1B                 push    edx
.text:00005C1C                 mov     eax, [ebp+arg_0]
.text:00005C1F                 add     eax, 0F8h ; '°'
.text:00005C24                 push    eax
.text:00005C25                 call    _bufchain_consume
.text:00005C2A                 add     esp, 8
.text:00005C2D                 jmp     short loc_5C62
.text:00005C2F ; ---------------------------------------------------------------------------
.text:00005C2F                 jmp     short loc_5C5D
.text:00005C31 ; ---------------------------------------------------------------------------
.text:00005C31
.text:00005C31 loc_5C31:                               ; CODE XREF: _term_print_finish+8Aj
.text:00005C31                 push    1
.text:00005C33                 lea     ecx, [ebp+var_21]
.text:00005C36                 push    ecx
.text:00005C37                 mov     edx, [ebp+arg_0]
.text:00005C3A                 mov     eax, [edx+104h]
.text:00005C40                 push    eax
.text:00005C41                 call    _printer_job_data
.text:00005C46                 add     esp, 0Ch
.text:00005C49                 push    1
.text:00005C4B                 mov     ecx, [ebp+arg_0]
.text:00005C4E                 add     ecx, 0F8h ; '°'
.text:00005C54                 push    ecx
.text:00005C55                 call    _bufchain_consume
.text:00005C5A                 add     esp, 8
.text:00005C5D
.text:00005C5D loc_5C5D:                               ; CODE XREF: _term_print_finish+A3j
.text:00005C5D                 jmp     loc_5BCB
.text:00005C62 ; ---------------------------------------------------------------------------
.text:00005C62
.text:00005C62 loc_5C62:                               ; CODE XREF: _term_print_finish+57j
.text:00005C62                                         ; _term_print_finish+A1j
.text:00005C62                 mov     edx, [ebp+arg_0]
.text:00005C65                 mov     eax, [edx+104h]
.text:00005C6B                 push    eax
.text:00005C6C                 call    _printer_finish_job
.text:00005C71                 add     esp, 4
.text:00005C74                 mov     ecx, [ebp+arg_0]
.text:00005C77                 mov     dword ptr [ecx+104h], 0
.text:00005C81                 mov     edx, [ebp+arg_0]
.text:00005C84                 mov     dword ptr [edx+0F0h], 0
.text:00005C8E                 mov     eax, [ebp+arg_0]
.text:00005C91                 mov     dword ptr [eax+0ECh], 0
.text:00005C9B
.text:00005C9B loc_5C9B:                               ; CODE XREF: _term_print_finish+2Ej
.text:00005C9B                 push    edx
.text:00005C9C                 mov     ecx, ebp
.text:00005C9E                 push    eax
.text:00005C9F                 lea     edx, $LN13_0
.text:00005CA5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005CAA                 pop     eax
.text:00005CAB                 pop     edx
.text:00005CAC                 pop     edi
.text:00005CAD                 add     esp, 28h
.text:00005CB0                 cmp     ebp, esp
.text:00005CB2                 call    __RTC_CheckEsp
.text:00005CB7                 mov     esp, ebp
.text:00005CB9                 pop     ebp
.text:00005CBA                 retn
.text:00005CBA _term_print_finish endp
.text:00005CBA
.text:00005CBA ; ---------------------------------------------------------------------------
.text:00005CBB                 align 4
.text:00005CBC $LN13_0         dd 3                    ; DATA XREF: _term_print_finish+113o
.text:00005CC0                 dd offset $LN12
.text:00005CC4 $LN12           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00005CC0o
.text:00005CCC                 dd offset $LN9_3        ; "data"
.text:00005CD0                 dd 0FFFFFFECh, 4
.text:00005CD8                 dd offset $LN10
.text:00005CDC                 dd 0FFFFFFDFh, 1
.text:00005CE4                 dd offset $LN11
.text:00005CE8 $LN11           db 63h, 0               ; DATA XREF: .text:00005CE4o
.text:00005CEA $LN10           dw 656Ch                ; DATA XREF: .text:00005CD8o
.text:00005CEC                 db 6Eh, 0
.text:00005CEE $LN9_3          db 'data',0             ; DATA XREF: .text:00005CCCo
.text:00005CF3                 db 9 dup(0CCh)
.text:00005CFC
.text:00005CFC ; =============== S U B R O U T I N E =======================================
.text:00005CFC
.text:00005CFC ; Attributes: bp-based frame
.text:00005CFC
.text:00005CFC _term_print_flush proc near             ; CODE XREF: _term_print_finish+37p
.text:00005CFC                                         ; _term_out+4FCCp
.text:00005CFC
.text:00005CFC var_1C          = dword ptr -1Ch
.text:00005CFC var_18          = dword ptr -18h
.text:00005CFC var_14          = dword ptr -14h
.text:00005CFC var_10          = dword ptr -10h
.text:00005CFC var_C           = dword ptr -0Ch
.text:00005CFC var_8           = dword ptr -8
.text:00005CFC var_4           = dword ptr -4
.text:00005CFC arg_0           = dword ptr  8
.text:00005CFC
.text:00005CFC                 push    ebp
.text:00005CFD                 mov     ebp, esp
.text:00005CFF                 sub     esp, 1Ch
.text:00005D02                 mov     eax, 0CCCCCCCCh
.text:00005D07                 mov     [ebp+var_1C], eax
.text:00005D0A                 mov     [ebp+var_18], eax
.text:00005D0D                 mov     [ebp+var_14], eax
.text:00005D10                 mov     [ebp+var_10], eax
.text:00005D13                 mov     [ebp+var_C], eax
.text:00005D16                 mov     [ebp+var_8], eax
.text:00005D19                 mov     [ebp+var_4], eax
.text:00005D1C
.text:00005D1C loc_5D1C:                               ; CODE XREF: _term_print_flush+97j
.text:00005D1C                 mov     eax, [ebp+arg_0]
.text:00005D1F                 add     eax, 0F8h ; '°'
.text:00005D24                 push    eax
.text:00005D25                 call    _bufchain_size
.text:00005D2A                 add     esp, 4
.text:00005D2D                 mov     [ebp+var_1C], eax
.text:00005D30                 cmp     [ebp+var_1C], 5
.text:00005D34                 jle     short loc_5D95
.text:00005D36                 lea     ecx, [ebp+var_14]
.text:00005D39                 push    ecx
.text:00005D3A                 lea     edx, [ebp+var_8]
.text:00005D3D                 push    edx
.text:00005D3E                 mov     eax, [ebp+arg_0]
.text:00005D41                 add     eax, 0F8h ; '°'
.text:00005D46                 push    eax
.text:00005D47                 call    _bufchain_prefix
.text:00005D4C                 add     esp, 0Ch
.text:00005D4F                 mov     ecx, [ebp+var_1C]
.text:00005D52                 sub     ecx, 5
.text:00005D55                 cmp     [ebp+var_14], ecx
.text:00005D58                 jle     short loc_5D63
.text:00005D5A                 mov     edx, [ebp+var_1C]
.text:00005D5D                 sub     edx, 5
.text:00005D60                 mov     [ebp+var_14], edx
.text:00005D63
.text:00005D63 loc_5D63:                               ; CODE XREF: _term_print_flush+5Cj
.text:00005D63                 mov     eax, [ebp+var_14]
.text:00005D66                 push    eax
.text:00005D67                 mov     ecx, [ebp+var_8]
.text:00005D6A                 push    ecx
.text:00005D6B                 mov     edx, [ebp+arg_0]
.text:00005D6E                 mov     eax, [edx+104h]
.text:00005D74                 push    eax
.text:00005D75                 call    _printer_job_data
.text:00005D7A                 add     esp, 0Ch
.text:00005D7D                 mov     ecx, [ebp+var_14]
.text:00005D80                 push    ecx
.text:00005D81                 mov     edx, [ebp+arg_0]
.text:00005D84                 add     edx, 0F8h ; '°'
.text:00005D8A                 push    edx
.text:00005D8B                 call    _bufchain_consume
.text:00005D90                 add     esp, 8
.text:00005D93                 jmp     short loc_5D1C
.text:00005D95 ; ---------------------------------------------------------------------------
.text:00005D95
.text:00005D95 loc_5D95:                               ; CODE XREF: _term_print_flush+38j
.text:00005D95                 push    edx
.text:00005D96                 mov     ecx, ebp
.text:00005D98                 push    eax
.text:00005D99                 lea     edx, $LN9_4
.text:00005D9F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005DA4                 pop     eax
.text:00005DA5                 pop     edx
.text:00005DA6                 add     esp, 1Ch
.text:00005DA9                 cmp     ebp, esp
.text:00005DAB                 call    __RTC_CheckEsp
.text:00005DB0                 mov     esp, ebp
.text:00005DB2                 pop     ebp
.text:00005DB3                 retn
.text:00005DB3 _term_print_flush endp
.text:00005DB3
.text:00005DB3 ; ---------------------------------------------------------------------------
.text:00005DB4 $LN9_4          dd 2                    ; DATA XREF: _term_print_flush+9Do
.text:00005DB8                 dd offset $LN8_3
.text:00005DBC $LN8_3          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00005DB8o
.text:00005DC4                 dd offset $LN6_1        ; "data"
.text:00005DC8                 dd 0FFFFFFECh, 4
.text:00005DD0                 dd offset $LN7_3
.text:00005DD4 $LN7_3          dd 6E656Ch              ; DATA XREF: .text:00005DD0o
.text:00005DD8 $LN6_1          db 'data',0             ; DATA XREF: .text:00005DC4o
.text:00005DDD                 db 0Fh dup(0CCh)
.text:00005DEC
.text:00005DEC ; =============== S U B R O U T I N E =======================================
.text:00005DEC
.text:00005DEC ; Attributes: bp-based frame
.text:00005DEC
.text:00005DEC _do_paint       proc near               ; CODE XREF: _term_update+9Ep
.text:00005DEC                                         ; _term_paint+191p
.text:00005DEC
.text:00005DEC var_C0          = dword ptr -0C0h
.text:00005DEC var_BC          = dword ptr -0BCh
.text:00005DEC var_B8          = dword ptr -0B8h
.text:00005DEC var_B4          = dword ptr -0B4h
.text:00005DEC var_B0          = dword ptr -0B0h
.text:00005DEC var_AC          = dword ptr -0ACh
.text:00005DEC var_A8          = dword ptr -0A8h
.text:00005DEC var_A4          = dword ptr -0A4h
.text:00005DEC var_A0          = dword ptr -0A0h
.text:00005DEC var_9C          = dword ptr -9Ch
.text:00005DEC var_98          = dword ptr -98h
.text:00005DEC var_94          = dword ptr -94h
.text:00005DEC var_90          = dword ptr -90h
.text:00005DEC var_8C          = dword ptr -8Ch
.text:00005DEC var_88          = dword ptr -88h
.text:00005DEC var_84          = dword ptr -84h
.text:00005DEC var_80          = dword ptr -80h
.text:00005DEC var_7C          = dword ptr -7Ch
.text:00005DEC var_78          = dword ptr -78h
.text:00005DEC var_74          = dword ptr -74h
.text:00005DEC var_70          = dword ptr -70h
.text:00005DEC var_6C          = dword ptr -6Ch
.text:00005DEC var_68          = dword ptr -68h
.text:00005DEC var_64          = dword ptr -64h
.text:00005DEC var_60          = dword ptr -60h
.text:00005DEC var_5C          = dword ptr -5Ch
.text:00005DEC var_58          = dword ptr -58h
.text:00005DEC var_54          = dword ptr -54h
.text:00005DEC var_50          = dword ptr -50h
.text:00005DEC var_4C          = dword ptr -4Ch
.text:00005DEC var_48          = dword ptr -48h
.text:00005DEC var_44          = dword ptr -44h
.text:00005DEC var_40          = dword ptr -40h
.text:00005DEC var_3C          = dword ptr -3Ch
.text:00005DEC var_38          = dword ptr -38h
.text:00005DEC var_34          = dword ptr -34h
.text:00005DEC var_30          = dword ptr -30h
.text:00005DEC var_2C          = dword ptr -2Ch
.text:00005DEC var_24          = dword ptr -24h
.text:00005DEC var_20          = dword ptr -20h
.text:00005DEC var_18          = dword ptr -18h
.text:00005DEC var_14          = dword ptr -14h
.text:00005DEC var_10          = dword ptr -10h
.text:00005DEC var_C           = dword ptr -0Ch
.text:00005DEC var_8           = dword ptr -8
.text:00005DEC var_4           = dword ptr -4
.text:00005DEC arg_0           = dword ptr  8
.text:00005DEC arg_4           = dword ptr  0Ch
.text:00005DEC
.text:00005DEC                 push    ebp
.text:00005DED                 mov     ebp, esp
.text:00005DEF                 sub     esp, 0C0h
.text:00005DF5                 push    esi
.text:00005DF6                 push    edi
.text:00005DF7                 lea     edi, [ebp+var_C0]
.text:00005DFD                 mov     ecx, 30h ; '0'
.text:00005E02                 mov     eax, 0CCCCCCCCh
.text:00005E07                 rep stosd
.text:00005E09                 mov     [ebp+var_30], 400h
.text:00005E10                 push    2
.text:00005E12                 mov     eax, [ebp+var_30]
.text:00005E15                 push    eax
.text:00005E16                 call    _safemalloc
.text:00005E1B                 add     esp, 8
.text:00005E1E                 mov     [ebp+var_2C], eax
.text:00005E21                 push    0Ch
.text:00005E23                 mov     ecx, [ebp+arg_0]
.text:00005E26                 mov     edx, [ecx+12Ch]
.text:00005E2C                 push    edx
.text:00005E2D                 call    _safemalloc
.text:00005E32                 add     esp, 8
.text:00005E35                 mov     [ebp+var_34], eax
.text:00005E38                 mov     eax, [ebp+arg_0]
.text:00005E3B                 xor     ecx, ecx
.text:00005E3D                 cmp     dword ptr [eax+0A8h], 0
.text:00005E44                 setz    cl
.text:00005E47                 mov     edx, [ebp+arg_0]
.text:00005E4A                 xor     eax, eax
.text:00005E4C                 cmp     dword ptr [edx+138h], 0
.text:00005E53                 setz    al
.text:00005E56                 xor     ecx, eax
.text:00005E58                 neg     ecx
.text:00005E5A                 sbb     ecx, ecx
.text:00005E5C                 and     ecx, 100000h
.text:00005E62                 mov     [ebp+var_14], ecx
.text:00005E65                 mov     ecx, [ebp+arg_0]
.text:00005E68                 cmp     dword ptr [ecx+0B0h], 0
.text:00005E6F                 jz      short loc_5EC7
.text:00005E71                 mov     edx, [ebp+arg_0]
.text:00005E74                 cmp     dword ptr [edx+134h], 0
.text:00005E7B                 jz      short loc_5EA7
.text:00005E7D                 mov     eax, [ebp+arg_0]
.text:00005E80                 cmp     dword ptr [eax+0BCh], 0
.text:00005E87                 jnz     short loc_5E95
.text:00005E89                 mov     ecx, [ebp+arg_0]
.text:00005E8C                 cmp     dword ptr [ecx+1100h], 0
.text:00005E93                 jnz     short loc_5E9E
.text:00005E95
.text:00005E95 loc_5E95:                               ; CODE XREF: _do_paint+9Bj
.text:00005E95                 mov     [ebp+var_18], 40000000h
.text:00005E9C                 jmp     short loc_5EA5
.text:00005E9E ; ---------------------------------------------------------------------------
.text:00005E9E
.text:00005E9E loc_5E9E:                               ; CODE XREF: _do_paint+A7j
.text:00005E9E                 mov     [ebp+var_18], 0
.text:00005EA5
.text:00005EA5 loc_5EA5:                               ; CODE XREF: _do_paint+B0j
.text:00005EA5                 jmp     short loc_5EAE
.text:00005EA7 ; ---------------------------------------------------------------------------
.text:00005EA7
.text:00005EA7 loc_5EA7:                               ; CODE XREF: _do_paint+8Fj
.text:00005EA7                 mov     [ebp+var_18], 20000000h
.text:00005EAE
.text:00005EAE loc_5EAE:                               ; CODE XREF: _do_paint:loc_5EA5j
.text:00005EAE                 mov     edx, [ebp+arg_0]
.text:00005EB1                 cmp     dword ptr [edx+8Ch], 0
.text:00005EB8                 jz      short loc_5EC5
.text:00005EBA                 mov     eax, [ebp+var_18]
.text:00005EBD                 or      eax, 10000000h
.text:00005EC2                 mov     [ebp+var_18], eax
.text:00005EC5
.text:00005EC5 loc_5EC5:                               ; CODE XREF: _do_paint+CCj
.text:00005EC5                 jmp     short loc_5ECE
.text:00005EC7 ; ---------------------------------------------------------------------------
.text:00005EC7
.text:00005EC7 loc_5EC7:                               ; CODE XREF: _do_paint+83j
.text:00005EC7                 mov     [ebp+var_18], 0
.text:00005ECE
.text:00005ECE loc_5ECE:                               ; CODE XREF: _do_paint:loc_5EC5j
.text:00005ECE                 mov     ecx, [ebp+arg_0]
.text:00005ED1                 mov     edx, [ebp+arg_0]
.text:00005ED4                 mov     eax, [ecx+6Ch]
.text:00005ED7                 sub     eax, [edx+10h]
.text:00005EDA                 mov     [ebp+var_C], eax
.text:00005EDD                 push    0
.text:00005EDF                 push    1344h
.text:00005EE4                 mov     ecx, [ebp+arg_0]
.text:00005EE7                 mov     edx, [ecx+6Ch]
.text:00005EEA                 push    edx
.text:00005EEB                 mov     eax, [ebp+arg_0]
.text:00005EEE                 push    eax
.text:00005EEF                 call    _lineptr
.text:00005EF4                 add     esp, 10h
.text:00005EF7                 mov     [ebp+var_38], eax
.text:00005EFA                 mov     ecx, [ebp+arg_0]
.text:00005EFD                 mov     edx, [ecx+70h]
.text:00005F00                 mov     [ebp+var_10], edx
.text:00005F03                 mov     eax, [ebp+var_C]
.text:00005F06                 push    eax
.text:00005F07                 mov     ecx, [ebp+var_38]
.text:00005F0A                 push    ecx
.text:00005F0B                 mov     edx, [ebp+arg_0]
.text:00005F0E                 push    edx
.text:00005F0F                 call    _term_bidi_line
.text:00005F14                 add     esp, 0Ch
.text:00005F17                 mov     [ebp+var_3C], eax
.text:00005F1A                 cmp     [ebp+var_3C], 0
.text:00005F1E                 jz      short loc_5F3E
.text:00005F20                 mov     eax, [ebp+var_C]
.text:00005F23                 shl     eax, 4
.text:00005F26                 mov     ecx, [ebp+arg_0]
.text:00005F29                 mov     edx, [ecx+10CCh]
.text:00005F2F                 mov     eax, [edx+eax+8]
.text:00005F33                 mov     ecx, [ebp+var_10]
.text:00005F36                 mov     edx, [eax+ecx*4]
.text:00005F39                 mov     [ebp+var_10], edx
.text:00005F3C                 jmp     short loc_5F47
.text:00005F3E ; ---------------------------------------------------------------------------
.text:00005F3E
.text:00005F3E loc_5F3E:                               ; CODE XREF: _do_paint+132j
.text:00005F3E                 mov     eax, [ebp+var_38]
.text:00005F41                 mov     ecx, [eax+14h]
.text:00005F44                 mov     [ebp+var_3C], ecx
.text:00005F47
.text:00005F47 loc_5F47:                               ; CODE XREF: _do_paint+150j
.text:00005F47                 cmp     [ebp+var_10], 0
.text:00005F4B                 jle     short loc_5F68
.text:00005F4D                 mov     edx, [ebp+var_10]
.text:00005F50                 imul    edx, 0Ch
.text:00005F53                 mov     eax, [ebp+var_3C]
.text:00005F56                 cmp     dword ptr [eax+edx], 0DFFFh
.text:00005F5D                 jnz     short loc_5F68
.text:00005F5F                 mov     ecx, [ebp+var_10]
.text:00005F62                 sub     ecx, 1
.text:00005F65                 mov     [ebp+var_10], ecx
.text:00005F68
.text:00005F68 loc_5F68:                               ; CODE XREF: _do_paint+15Fj
.text:00005F68                                         ; _do_paint+171j
.text:00005F68                 mov     edx, [ebp+var_38]
.text:00005F6B                 push    edx
.text:00005F6C                 call    _unlineptr
.text:00005F71                 add     esp, 4
.text:00005F74                 mov     eax, [ebp+arg_0]
.text:00005F77                 cmp     dword ptr [eax+20h], 0
.text:00005F7B                 jl      loc_6036
.text:00005F81                 mov     ecx, [ebp+arg_0]
.text:00005F84                 mov     edx, [ecx+24h]
.text:00005F87                 cmp     edx, [ebp+var_18]
.text:00005F8A                 jnz     short loc_5FA6
.text:00005F8C                 mov     eax, [ebp+arg_0]
.text:00005F8F                 mov     ecx, [eax+20h]
.text:00005F92                 cmp     ecx, [ebp+var_C]
.text:00005F95                 jnz     short loc_5FA6
.text:00005F97                 mov     edx, [ebp+arg_0]
.text:00005F9A                 mov     eax, [edx+1Ch]
.text:00005F9D                 cmp     eax, [ebp+var_10]
.text:00005FA0                 jz      loc_6036
.text:00005FA6
.text:00005FA6 loc_5FA6:                               ; CODE XREF: _do_paint+19Ej
.text:00005FA6                                         ; _do_paint+1A9j
.text:00005FA6                 mov     ecx, [ebp+arg_0]
.text:00005FA9                 mov     edx, [ecx+20h]
.text:00005FAC                 mov     eax, [ebp+arg_0]
.text:00005FAF                 mov     ecx, [eax+18h]
.text:00005FB2                 mov     edx, [ecx+edx*4]
.text:00005FB5                 mov     eax, [ebp+arg_0]
.text:00005FB8                 mov     ecx, [eax+1Ch]
.text:00005FBB                 imul    ecx, 0Ch
.text:00005FBE                 add     ecx, [edx+14h]
.text:00005FC1                 mov     [ebp+var_40], ecx
.text:00005FC4                 mov     edx, [ebp+arg_0]
.text:00005FC7                 cmp     dword ptr [edx+1Ch], 0
.text:00005FCB                 jle     short loc_5FEA
.text:00005FCD                 mov     eax, [ebp+var_40]
.text:00005FD0                 cmp     dword ptr [eax], 0DFFFh
.text:00005FD6                 jnz     short loc_5FEA
.text:00005FD8                 mov     ecx, [ebp+var_40]
.text:00005FDB                 mov     edx, [ecx-8]
.text:00005FDE                 or      edx, 3FFFFh
.text:00005FE4                 mov     eax, [ebp+var_40]
.text:00005FE7                 mov     [eax-8], edx
.text:00005FEA
.text:00005FEA loc_5FEA:                               ; CODE XREF: _do_paint+1DFj
.text:00005FEA                                         ; _do_paint+1EAj
.text:00005FEA                 mov     ecx, [ebp+arg_0]
.text:00005FED                 mov     edx, [ecx+12Ch]
.text:00005FF3                 sub     edx, 1
.text:00005FF6                 mov     eax, [ebp+arg_0]
.text:00005FF9                 cmp     [eax+1Ch], edx
.text:00005FFC                 jge     short loc_601B
.text:00005FFE                 mov     ecx, [ebp+var_40]
.text:00006001                 cmp     dword ptr [ecx+0Ch], 0DFFFh
.text:00006008                 jnz     short loc_601B
.text:0000600A                 mov     edx, [ebp+var_40]
.text:0000600D                 mov     eax, [edx+10h]
.text:00006010                 or      eax, 3FFFFh
.text:00006015                 mov     ecx, [ebp+var_40]
.text:00006018                 mov     [ecx+10h], eax
.text:0000601B
.text:0000601B loc_601B:                               ; CODE XREF: _do_paint+210j
.text:0000601B                                         ; _do_paint+21Cj
.text:0000601B                 mov     edx, [ebp+var_40]
.text:0000601E                 mov     eax, [edx+4]
.text:00006021                 or      eax, 3FFFFh
.text:00006026                 mov     ecx, [ebp+var_40]
.text:00006029                 mov     [ecx+4], eax
.text:0000602C                 mov     edx, [ebp+arg_0]
.text:0000602F                 mov     dword ptr [edx+24h], 0
.text:00006036
.text:00006036 loc_6036:                               ; CODE XREF: _do_paint+18Fj
.text:00006036                                         ; _do_paint+1B4j
.text:00006036                 mov     eax, [ebp+arg_0]
.text:00006039                 mov     dword ptr [eax+20h], 0FFFFFFFFh
.text:00006040                 mov     ecx, [ebp+arg_0]
.text:00006043                 mov     dword ptr [ecx+1Ch], 0FFFFFFFFh
.text:0000604A                 mov     [ebp+var_4], 0
.text:00006051                 jmp     short loc_605C
.text:00006053 ; ---------------------------------------------------------------------------
.text:00006053
.text:00006053 loc_6053:                               ; CODE XREF: _do_paint+104Cj
.text:00006053                 mov     edx, [ebp+var_4]
.text:00006056                 add     edx, 1
.text:00006059                 mov     [ebp+var_4], edx
.text:0000605C
.text:0000605C loc_605C:                               ; CODE XREF: _do_paint+265j
.text:0000605C                 mov     eax, [ebp+arg_0]
.text:0000605F                 mov     ecx, [ebp+var_4]
.text:00006062                 cmp     ecx, [eax+128h]
.text:00006068                 jge     loc_6E3D
.text:0000606E                 mov     [ebp+var_58], 0
.text:00006075                 mov     [ebp+var_5C], 0
.text:0000607C                 mov     [ebp+var_60], 0
.text:00006083                 mov     [ebp+var_64], 0
.text:0000608A                 mov     [ebp+var_68], 0
.text:00006091                 mov     edx, [ebp+arg_0]
.text:00006094                 mov     eax, [ebp+var_4]
.text:00006097                 add     eax, [edx+10h]
.text:0000609A                 mov     [ebp+var_24], eax
.text:0000609D                 push    0
.text:0000609F                 push    1384h
.text:000060A4                 mov     ecx, [ebp+var_24]
.text:000060A7                 push    ecx
.text:000060A8                 mov     edx, [ebp+arg_0]
.text:000060AB                 push    edx
.text:000060AC                 call    _lineptr
.text:000060B1                 add     esp, 10h
.text:000060B4                 mov     [ebp+var_44], eax
.text:000060B7                 mov     eax, [ebp+var_4]
.text:000060BA                 push    eax
.text:000060BB                 mov     ecx, [ebp+var_44]
.text:000060BE                 push    ecx
.text:000060BF                 mov     edx, [ebp+arg_0]
.text:000060C2                 push    edx
.text:000060C3                 call    _term_bidi_line
.text:000060C8                 add     esp, 0Ch
.text:000060CB                 mov     [ebp+var_48], eax
.text:000060CE                 cmp     [ebp+var_48], 0
.text:000060D2                 jz      short loc_60EC
.text:000060D4                 mov     eax, [ebp+var_4]
.text:000060D7                 shl     eax, 4
.text:000060DA                 mov     ecx, [ebp+arg_0]
.text:000060DD                 mov     edx, [ecx+10CCh]
.text:000060E3                 mov     eax, [edx+eax+0Ch]
.text:000060E7                 mov     [ebp+var_74], eax
.text:000060EA                 jmp     short loc_60FC
.text:000060EC ; ---------------------------------------------------------------------------
.text:000060EC
.text:000060EC loc_60EC:                               ; CODE XREF: _do_paint+2E6j
.text:000060EC                 mov     ecx, [ebp+var_44]
.text:000060EF                 mov     edx, [ecx+14h]
.text:000060F2                 mov     [ebp+var_48], edx
.text:000060F5                 mov     [ebp+var_74], 0
.text:000060FC
.text:000060FC loc_60FC:                               ; CODE XREF: _do_paint+2FEj
.text:000060FC                 mov     [ebp+var_8], 0
.text:00006103                 jmp     short loc_610E
.text:00006105 ; ---------------------------------------------------------------------------
.text:00006105
.text:00006105 loc_6105:                               ; CODE XREF: _do_paint+72Dj
.text:00006105                 mov     eax, [ebp+var_8]
.text:00006108                 add     eax, 1
.text:0000610B                 mov     [ebp+var_8], eax
.text:0000610E
.text:0000610E loc_610E:                               ; CODE XREF: _do_paint+317j
.text:0000610E                 mov     ecx, [ebp+arg_0]
.text:00006111                 mov     edx, [ebp+var_8]
.text:00006114                 cmp     edx, [ecx+12Ch]
.text:0000611A                 jge     loc_651E
.text:00006120                 mov     eax, [ebp+var_8]
.text:00006123                 imul    eax, 0Ch
.text:00006126                 add     eax, [ebp+var_48]
.text:00006129                 mov     [ebp+var_80], eax
.text:0000612C                 cmp     [ebp+var_74], 0
.text:00006130                 jz      short loc_6143
.text:00006132                 mov     ecx, [ebp+var_8]
.text:00006135                 mov     edx, [ebp+var_74]
.text:00006138                 mov     eax, [edx+ecx*4]
.text:0000613B                 mov     [ebp+var_A8], eax
.text:00006141                 jmp     short loc_614C
.text:00006143 ; ---------------------------------------------------------------------------
.text:00006143
.text:00006143 loc_6143:                               ; CODE XREF: _do_paint+344j
.text:00006143                 mov     ecx, [ebp+var_8]
.text:00006146                 mov     [ebp+var_A8], ecx
.text:0000614C
.text:0000614C loc_614C:                               ; CODE XREF: _do_paint+355j
.text:0000614C                 mov     edx, [ebp+var_A8]
.text:00006152                 mov     [ebp+var_20], edx
.text:00006155                 mov     eax, [ebp+var_80]
.text:00006158                 mov     ecx, [eax]
.text:0000615A                 mov     [ebp+var_7C], ecx
.text:0000615D                 mov     edx, [ebp+var_80]
.text:00006160                 mov     eax, [edx+4]
.text:00006163                 mov     [ebp+var_78], eax
.text:00006166                 mov     ecx, [ebp+arg_0]
.text:00006169                 cmp     dword ptr [ecx+10D4h], 0
.text:00006170                 jnz     short loc_618A
.text:00006172                 mov     edx, [ebp+var_78]
.text:00006175                 and     edx, 0FFFC0000h
.text:0000617B                 or      edx, 100h
.text:00006181                 or      edx, 20400h
.text:00006187                 mov     [ebp+var_78], edx
.text:0000618A
.text:0000618A loc_618A:                               ; CODE XREF: _do_paint+384j
.text:0000618A                 mov     eax, [ebp+arg_0]
.text:0000618D                 cmp     dword ptr [eax+116Ch], 0
.text:00006194                 jnz     short loc_6204
.text:00006196                 mov     ecx, [ebp+var_78]
.text:00006199                 and     ecx, 1FFh
.text:0000619F                 mov     [ebp+var_84], ecx
.text:000061A5                 cmp     [ebp+var_84], 10h
.text:000061AC                 jl      short loc_61CC
.text:000061AE                 cmp     [ebp+var_84], 100h
.text:000061B8                 jge     short loc_61CC
.text:000061BA                 mov     edx, [ebp+var_78]
.text:000061BD                 and     edx, 0FFFFFE00h
.text:000061C3                 or      edx, 100h
.text:000061C9                 mov     [ebp+var_78], edx
.text:000061CC
.text:000061CC loc_61CC:                               ; CODE XREF: _do_paint+3C0j
.text:000061CC                                         ; _do_paint+3CCj
.text:000061CC                 mov     eax, [ebp+var_78]
.text:000061CF                 and     eax, 3FE00h
.text:000061D4                 shr     eax, 9
.text:000061D7                 mov     [ebp+var_84], eax
.text:000061DD                 cmp     [ebp+var_84], 10h
.text:000061E4                 jl      short loc_6204
.text:000061E6                 cmp     [ebp+var_84], 100h
.text:000061F0                 jge     short loc_6204
.text:000061F2                 mov     ecx, [ebp+var_78]
.text:000061F5                 and     ecx, 0FFFC01FFh
.text:000061FB                 or      ecx, 20400h
.text:00006201                 mov     [ebp+var_78], ecx
.text:00006204
.text:00006204 loc_6204:                               ; CODE XREF: _do_paint+3A8j
.text:00006204                                         ; _do_paint+3F8j ...
.text:00006204                 mov     edx, [ebp+var_7C]
.text:00006207                 and     edx, 0FFFFFF00h
.text:0000620D                 mov     [ebp+var_AC], edx
.text:00006213                 cmp     [ebp+var_AC], 0D800h
.text:0000621D                 jz      short loc_6239
.text:0000621F                 cmp     [ebp+var_AC], 0D900h
.text:00006229                 jz      short loc_6258
.text:0000622B                 cmp     [ebp+var_AC], 0DA00h
.text:00006235                 jz      short loc_6276
.text:00006237                 jmp     short loc_6290
.text:00006239 ; ---------------------------------------------------------------------------
.text:00006239
.text:00006239 loc_6239:                               ; CODE XREF: _do_paint+431j
.text:00006239                 mov     eax, [ebp+arg_0]
.text:0000623C                 mov     ecx, [eax+1090h]
.text:00006242                 mov     edx, [ebp+var_7C]
.text:00006245                 and     edx, 0FFh
.text:0000624B                 movzx   eax, word ptr [ecx+edx*2+210h]
.text:00006253                 mov     [ebp+var_7C], eax
.text:00006256                 jmp     short loc_6290
.text:00006258 ; ---------------------------------------------------------------------------
.text:00006258
.text:00006258 loc_6258:                               ; CODE XREF: _do_paint+43Dj
.text:00006258                 mov     ecx, [ebp+arg_0]
.text:0000625B                 mov     edx, [ecx+1090h]
.text:00006261                 mov     eax, [ebp+var_7C]
.text:00006264                 and     eax, 0FFh
.text:00006269                 movzx   ecx, word ptr [edx+eax*2+610h]
.text:00006271                 mov     [ebp+var_7C], ecx
.text:00006274                 jmp     short loc_6290
.text:00006276 ; ---------------------------------------------------------------------------
.text:00006276
.text:00006276 loc_6276:                               ; CODE XREF: _do_paint+449j
.text:00006276                 mov     edx, [ebp+arg_0]
.text:00006279                 mov     eax, [edx+1090h]
.text:0000627F                 mov     ecx, [ebp+var_7C]
.text:00006282                 and     ecx, 0FFh
.text:00006288                 movzx   edx, word ptr [eax+ecx*2+10h]
.text:0000628D                 mov     [ebp+var_7C], edx
.text:00006290
.text:00006290 loc_6290:                               ; CODE XREF: _do_paint+44Bj
.text:00006290                                         ; _do_paint+46Aj ...
.text:00006290                 mov     eax, [ebp+arg_0]
.text:00006293                 mov     ecx, [eax+12Ch]
.text:00006299                 sub     ecx, 1
.text:0000629C                 cmp     [ebp+var_8], ecx
.text:0000629F                 jge     short loc_62B8
.text:000062A1                 mov     edx, [ebp+var_80]
.text:000062A4                 cmp     dword ptr [edx+0Ch], 0DFFFh
.text:000062AB                 jnz     short loc_62B8
.text:000062AD                 mov     eax, [ebp+var_78]
.text:000062B0                 or      eax, 400000h
.text:000062B5                 mov     [ebp+var_78], eax
.text:000062B8
.text:000062B8 loc_62B8:                               ; CODE XREF: _do_paint+4B3j
.text:000062B8                                         ; _do_paint+4BFj
.text:000062B8                 mov     ecx, [ebp+arg_0]
.text:000062BB                 cmp     dword ptr [ecx+0E48h], 2
.text:000062C2                 jz      short loc_62D4
.text:000062C4                 mov     edx, [ebp+arg_0]
.text:000062C7                 cmp     dword ptr [edx+0E48h], 3
.text:000062CE                 jnz     loc_63AE
.text:000062D4
.text:000062D4 loc_62D4:                               ; CODE XREF: _do_paint+4D6j
.text:000062D4                 mov     eax, [ebp+arg_0]
.text:000062D7                 cmp     dword ptr [eax+0E4Ch], 0
.text:000062DE                 jnz     short loc_6355
.text:000062E0                 mov     ecx, [ebp+arg_0]
.text:000062E3                 mov     edx, [ecx+0E54h]
.text:000062E9                 cmp     edx, [ebp+var_24]
.text:000062EC                 jl      short loc_630A
.text:000062EE                 mov     eax, [ebp+arg_0]
.text:000062F1                 mov     ecx, [eax+0E54h]
.text:000062F7                 cmp     ecx, [ebp+var_24]
.text:000062FA                 jnz     short loc_6340
.text:000062FC                 mov     edx, [ebp+arg_0]
.text:000062FF                 mov     eax, [edx+0E58h]
.text:00006305                 cmp     eax, [ebp+var_20]
.text:00006308                 jg      short loc_6340
.text:0000630A
.text:0000630A loc_630A:                               ; CODE XREF: _do_paint+500j
.text:0000630A                 mov     ecx, [ebp+arg_0]
.text:0000630D                 mov     edx, [ebp+var_24]
.text:00006310                 cmp     edx, [ecx+0E5Ch]
.text:00006316                 jl      short loc_6334
.text:00006318                 mov     eax, [ebp+arg_0]
.text:0000631B                 mov     ecx, [ebp+var_24]
.text:0000631E                 cmp     ecx, [eax+0E5Ch]
.text:00006324                 jnz     short loc_6340
.text:00006326                 mov     edx, [ebp+arg_0]
.text:00006329                 mov     eax, [ebp+var_20]
.text:0000632C                 cmp     eax, [edx+0E60h]
.text:00006332                 jge     short loc_6340
.text:00006334
.text:00006334 loc_6334:                               ; CODE XREF: _do_paint+52Aj
.text:00006334                 mov     [ebp+var_B0], 1
.text:0000633E                 jmp     short loc_634A
.text:00006340 ; ---------------------------------------------------------------------------
.text:00006340
.text:00006340 loc_6340:                               ; CODE XREF: _do_paint+50Ej
.text:00006340                                         ; _do_paint+51Cj ...
.text:00006340                 mov     [ebp+var_B0], 0
.text:0000634A
.text:0000634A loc_634A:                               ; CODE XREF: _do_paint+552j
.text:0000634A                 mov     ecx, [ebp+var_B0]
.text:00006350                 mov     [ebp+var_54], ecx
.text:00006353                 jmp     short loc_63AC
.text:00006355 ; ---------------------------------------------------------------------------
.text:00006355
.text:00006355 loc_6355:                               ; CODE XREF: _do_paint+4F2j
.text:00006355                 mov     edx, [ebp+arg_0]
.text:00006358                 mov     eax, [edx+0E54h]
.text:0000635E                 cmp     eax, [ebp+var_24]
.text:00006361                 jg      short loc_6399
.text:00006363                 mov     ecx, [ebp+arg_0]
.text:00006366                 mov     edx, [ecx+0E58h]
.text:0000636C                 cmp     edx, [ebp+var_20]
.text:0000636F                 jg      short loc_6399
.text:00006371                 mov     eax, [ebp+arg_0]
.text:00006374                 mov     ecx, [ebp+var_24]
.text:00006377                 cmp     ecx, [eax+0E5Ch]
.text:0000637D                 jg      short loc_6399
.text:0000637F                 mov     edx, [ebp+arg_0]
.text:00006382                 mov     eax, [ebp+var_20]
.text:00006385                 cmp     eax, [edx+0E60h]
.text:0000638B                 jge     short loc_6399
.text:0000638D                 mov     [ebp+var_B4], 1
.text:00006397                 jmp     short loc_63A3
.text:00006399 ; ---------------------------------------------------------------------------
.text:00006399
.text:00006399 loc_6399:                               ; CODE XREF: _do_paint+575j
.text:00006399                                         ; _do_paint+583j ...
.text:00006399                 mov     [ebp+var_B4], 0
.text:000063A3
.text:000063A3 loc_63A3:                               ; CODE XREF: _do_paint+5ABj
.text:000063A3                 mov     ecx, [ebp+var_B4]
.text:000063A9                 mov     [ebp+var_54], ecx
.text:000063AC
.text:000063AC loc_63AC:                               ; CODE XREF: _do_paint+567j
.text:000063AC                 jmp     short loc_63B5
.text:000063AE ; ---------------------------------------------------------------------------
.text:000063AE
.text:000063AE loc_63AE:                               ; CODE XREF: _do_paint+4E2j
.text:000063AE                 mov     [ebp+var_54], 0
.text:000063B5
.text:000063B5 loc_63B5:                               ; CODE XREF: _do_paint:loc_63ACj
.text:000063B5                 mov     edx, [ebp+var_78]
.text:000063B8                 xor     edx, [ebp+var_14]
.text:000063BB                 mov     eax, [ebp+var_54]
.text:000063BE                 neg     eax
.text:000063C0                 sbb     eax, eax
.text:000063C2                 and     eax, 100000h
.text:000063C7                 xor     edx, eax
.text:000063C9                 mov     [ebp+var_78], edx
.text:000063CC                 mov     ecx, [ebp+arg_0]
.text:000063CF                 cmp     dword ptr [ecx+0C4h], 0
.text:000063D6                 jz      short loc_641A
.text:000063D8                 mov     edx, [ebp+var_78]
.text:000063DB                 and     edx, 200000h
.text:000063E1                 jz      short loc_641A
.text:000063E3                 mov     eax, [ebp+arg_0]
.text:000063E6                 cmp     dword ptr [eax+134h], 0
.text:000063ED                 jz      short loc_640E
.text:000063EF                 mov     ecx, [ebp+arg_0]
.text:000063F2                 cmp     dword ptr [ecx+0C0h], 0
.text:000063F9                 jz      short loc_640E
.text:000063FB                 mov     edx, [ebp+arg_0]
.text:000063FE                 mov     eax, [edx+1090h]
.text:00006404                 movzx   ecx, word ptr [eax+250h]
.text:0000640B                 mov     [ebp+var_7C], ecx
.text:0000640E
.text:0000640E loc_640E:                               ; CODE XREF: _do_paint+601j
.text:0000640E                                         ; _do_paint+60Dj
.text:0000640E                 mov     edx, [ebp+var_78]
.text:00006411                 and     edx, 0FFDFFFFFh
.text:00006417                 mov     [ebp+var_78], edx
.text:0000641A
.text:0000641A loc_641A:                               ; CODE XREF: _do_paint+5EAj
.text:0000641A                                         ; _do_paint+5F5j
.text:0000641A                 mov     eax, [ebp+arg_0]
.text:0000641D                 mov     ecx, [eax+18h]
.text:00006420                 mov     edx, [ebp+var_4]
.text:00006423
.text:00006423 loc_6423:                               ; DATA XREF: .data:$SG87640o
.text:00006423                 mov     eax, [ecx+edx*4]
.text:00006426                 mov     ecx, [ebp+var_8]
.text:00006429                 imul    ecx, 0Ch
.text:0000642C                 mov     edx, [eax+14h]
.text:0000642F                 mov     eax, [ebp+var_7C]
.text:00006432                 cmp     eax, [ecx+edx]
.text:00006435                 jnz     short loc_645B
.text:00006437                 mov     ecx, [ebp+arg_0]
.text:0000643A                 mov     edx, [ecx+18h]
.text:0000643D                 mov     eax, [ebp+var_4]
.text:00006440                 mov     ecx, [edx+eax*4]
.text:00006443                 mov     edx, [ebp+var_8]
.text:00006446                 imul    edx, 0Ch
.text:00006449                 mov     eax, [ecx+14h]
.text:0000644C                 mov     ecx, [eax+edx+4]
.text:00006450                 and     ecx, 0F7FFFFFh
.text:00006456                 cmp     [ebp+var_78], ecx
.text:00006459                 jz      short loc_6489
.text:0000645B
.text:0000645B loc_645B:                               ; CODE XREF: _do_paint+649j
.text:0000645B                 mov     edx, [ebp+var_78]
.text:0000645E                 and     edx, 400000h
.text:00006464                 jnz     short loc_6487
.text:00006466                 mov     eax, [ebp+var_7C]
.text:00006469                 push    eax
.text:0000646A                 mov     ecx, [ebp+arg_4]
.text:0000646D                 push    ecx
.text:0000646E                 call    _char_width
.text:00006473                 add     esp, 8
.text:00006476                 cmp     eax, 2
.text:00006479                 jnz     short loc_6487
.text:0000647B                 mov     edx, [ebp+var_78]
.text:0000647E                 or      edx, 800000h
.text:00006484                 mov     [ebp+var_78], edx
.text:00006487
.text:00006487 loc_6487:                               ; CODE XREF: _do_paint+678j
.text:00006487                                         ; _do_paint+68Dj
.text:00006487                 jmp     short loc_64B5
.text:00006489 ; ---------------------------------------------------------------------------
.text:00006489
.text:00006489 loc_6489:                               ; CODE XREF: _do_paint+66Dj
.text:00006489                 mov     eax, [ebp+arg_0]
.text:0000648C                 mov     ecx, [eax+18h]
.text:0000648F                 mov     edx, [ebp+var_4]
.text:00006492                 mov     eax, [ecx+edx*4]
.text:00006495                 mov     ecx, [ebp+var_8]
.text:00006498                 imul    ecx, 0Ch
.text:0000649B                 mov     edx, [eax+14h]
.text:0000649E                 mov     eax, [edx+ecx+4]
.text:000064A2                 and     eax, 800000h
.text:000064A7                 jz      short loc_64B5
.text:000064A9                 mov     ecx, [ebp+var_78]
.text:000064AC                 or      ecx, 800000h
.text:000064B2                 mov     [ebp+var_78], ecx
.text:000064B5
.text:000064B5 loc_64B5:                               ; CODE XREF: _do_paint:loc_6487j
.text:000064B5                                         ; _do_paint+6BBj
.text:000064B5                 mov     edx, [ebp+var_4]
.text:000064B8                 cmp     edx, [ebp+var_C]
.text:000064BB                 jnz     short loc_64E9
.text:000064BD                 mov     eax, [ebp+var_8]
.text:000064C0                 cmp     eax, [ebp+var_10]
.text:000064C3                 jnz     short loc_64E9
.text:000064C5                 mov     ecx, [ebp+var_78]
.text:000064C8                 or      ecx, [ebp+var_18]
.text:000064CB                 mov     [ebp+var_78], ecx
.text:000064CE                 mov     edx, [ebp+arg_0]
.text:000064D1                 mov     eax, [ebp+var_18]
.text:000064D4                 mov     [edx+24h], eax
.text:000064D7                 mov     ecx, [ebp+arg_0]
.text:000064DA                 mov     edx, [ebp+var_8]
.text:000064DD                 mov     [ecx+1Ch], edx
.text:000064E0                 mov     eax, [ebp+arg_0]
.text:000064E3                 mov     ecx, [ebp+var_4]
.text:000064E6                 mov     [eax+20h], ecx
.text:000064E9
.text:000064E9 loc_64E9:                               ; CODE XREF: _do_paint+6CFj
.text:000064E9                                         ; _do_paint+6D7j
.text:000064E9                 mov     edx, [ebp+var_8]
.text:000064EC                 imul    edx, 0Ch
.text:000064EF                 mov     eax, [ebp+var_34]
.text:000064F2                 mov     ecx, [ebp+var_78]
.text:000064F5                 mov     [eax+edx+4], ecx
.text:000064F9                 mov     edx, [ebp+var_8]
.text:000064FC                 imul    edx, 0Ch
.text:000064FF                 mov     eax, [ebp+var_34]
.text:00006502                 mov     ecx, [ebp+var_7C]
.text:00006505                 mov     [eax+edx], ecx
.text:00006508                 mov     edx, [ebp+var_8]
.text:0000650B                 imul    edx, 0Ch
.text:0000650E                 mov     eax, [ebp+var_34]
.text:00006511                 mov     dword ptr [eax+edx+8], 0
.text:00006519                 jmp     loc_6105
.text:0000651E ; ---------------------------------------------------------------------------
.text:0000651E
.text:0000651E loc_651E:                               ; CODE XREF: _do_paint+32Ej
.text:0000651E                 mov     [ebp+var_6C], 0
.text:00006525                 mov     [ebp+var_70], 0
.text:0000652C                 mov     [ebp+var_8], 0
.text:00006533                 jmp     short loc_653E
.text:00006535 ; ---------------------------------------------------------------------------
.text:00006535
.text:00006535 loc_6535:                               ; CODE XREF: _do_paint:loc_6682j
.text:00006535                 mov     ecx, [ebp+var_8]
.text:00006538                 add     ecx, 1
.text:0000653B                 mov     [ebp+var_8], ecx
.text:0000653E
.text:0000653E loc_653E:                               ; CODE XREF: _do_paint+747j
.text:0000653E                 mov     edx, [ebp+arg_0]
.text:00006541                 mov     eax, [ebp+var_8]
.text:00006544                 cmp     eax, [edx+12Ch]
.text:0000654A                 jge     loc_6687
.text:00006550                 mov     ecx, [ebp+arg_0]
.text:00006553                 mov     edx, [ecx+18h]
.text:00006556                 mov     eax, [ebp+var_4]
.text:00006559                 mov     ecx, [edx+eax*4]
.text:0000655C                 mov     edx, [ebp+var_8]
.text:0000655F                 imul    edx, 0Ch
.text:00006562                 mov     eax, [ecx+14h]
.text:00006565                 mov     ecx, [eax+edx+4]
.text:00006569                 and     ecx, 80000000h
.text:0000656F                 jz      short loc_657E
.text:00006571                 mov     edx, [ebp+var_8]
.text:00006574                 mov     [ebp+var_6C], edx
.text:00006577                 mov     [ebp+var_70], 0
.text:0000657E
.text:0000657E loc_657E:                               ; CODE XREF: _do_paint+783j
.text:0000657E                 mov     eax, [ebp+arg_0]
.text:00006581                 mov     ecx, [eax+18h]
.text:00006584                 mov     edx, [ebp+var_4]
.text:00006587                 mov     eax, [ecx+edx*4]
.text:0000658A                 mov     ecx, [ebp+var_8]
.text:0000658D                 imul    ecx, 0Ch
.text:00006590                 mov     edx, [eax+14h]
.text:00006593                 mov     eax, [ebp+var_8]
.text:00006596                 imul    eax, 0Ch
.text:00006599                 mov     esi, [ebp+var_34]
.text:0000659C                 mov     ecx, [ecx+edx]
.text:0000659F                 cmp     ecx, [esi+eax]
.text:000065A2                 jnz     short loc_65D2
.text:000065A4                 mov     edx, [ebp+arg_0]
.text:000065A7                 mov     eax, [edx+18h]
.text:000065AA                 mov     ecx, [ebp+var_4]
.text:000065AD                 mov     edx, [eax+ecx*4]
.text:000065B0                 mov     eax, [ebp+var_8]
.text:000065B3                 imul    eax, 0Ch
.text:000065B6                 mov     ecx, [edx+14h]
.text:000065B9                 mov     edx, [ecx+eax+4]
.text:000065BD                 and     edx, 0FFFFFFFh
.text:000065C3                 mov     eax, [ebp+var_8]
.text:000065C6                 imul    eax, 0Ch
.text:000065C9                 mov     ecx, [ebp+var_34]
.text:000065CC                 cmp     edx, [ecx+eax+4]
.text:000065D0                 jz      short loc_6644
.text:000065D2
.text:000065D2 loc_65D2:                               ; CODE XREF: _do_paint+7B6j
.text:000065D2                 cmp     [ebp+var_70], 0
.text:000065D6                 jnz     short loc_6644
.text:000065D8                 mov     edx, [ebp+var_6C]
.text:000065DB                 mov     [ebp+var_88], edx
.text:000065E1                 jmp     short loc_65F2
.text:000065E3 ; ---------------------------------------------------------------------------
.text:000065E3
.text:000065E3 loc_65E3:                               ; CODE XREF: _do_paint+84Fj
.text:000065E3                 mov     eax, [ebp+var_88]
.text:000065E9                 add     eax, 1
.text:000065EC                 mov     [ebp+var_88], eax
.text:000065F2
.text:000065F2 loc_65F2:                               ; CODE XREF: _do_paint+7F5j
.text:000065F2                 mov     ecx, [ebp+var_88]
.text:000065F8                 cmp     ecx, [ebp+var_8]
.text:000065FB                 jge     short loc_663D
.text:000065FD                 mov     edx, [ebp+arg_0]
.text:00006600                 mov     eax, [edx+18h]
.text:00006603                 mov     ecx, [ebp+var_4]
.text:00006606                 mov     edx, [eax+ecx*4]
.text:00006609                 mov     eax, [ebp+var_88]
.text:0000660F                 imul    eax, 0Ch
.text:00006612                 mov     ecx, [edx+14h]
.text:00006615                 mov     edx, [ecx+eax+4]
.text:00006619                 or      edx, 3FFFFh
.text:0000661F                 mov     eax, [ebp+arg_0]
.text:00006622                 mov     ecx, [eax+18h]
.text:00006625                 mov     eax, [ebp+var_4]
.text:00006628                 mov     ecx, [ecx+eax*4]
.text:0000662B                 mov     eax, [ebp+var_88]
.text:00006631                 imul    eax, 0Ch
.text:00006634                 mov     ecx, [ecx+14h]
.text:00006637                 mov     [ecx+eax+4], edx
.text:0000663B                 jmp     short loc_65E3
.text:0000663D ; ---------------------------------------------------------------------------
.text:0000663D
.text:0000663D loc_663D:                               ; CODE XREF: _do_paint+80Fj
.text:0000663D                 mov     [ebp+var_70], 1
.text:00006644
.text:00006644 loc_6644:                               ; CODE XREF: _do_paint+7E4j
.text:00006644                                         ; _do_paint+7EAj
.text:00006644                 cmp     [ebp+var_70], 0
.text:00006648                 jz      short loc_6682
.text:0000664A                 mov     edx, [ebp+arg_0]
.text:0000664D                 mov     eax, [edx+18h]
.text:00006650                 mov     ecx, [ebp+var_4]
.text:00006653                 mov     edx, [eax+ecx*4]
.text:00006656                 mov     eax, [ebp+var_8]
.text:00006659                 imul    eax, 0Ch
.text:0000665C                 mov     ecx, [edx+14h]
.text:0000665F                 mov     edx, [ecx+eax+4]
.text:00006663                 or      edx, 3FFFFh
.text:00006669                 mov     eax, [ebp+arg_0]
.text:0000666C                 mov     ecx, [eax+18h]
.text:0000666F                 mov     eax, [ebp+var_4]
.text:00006672                 mov     ecx, [ecx+eax*4]
.text:00006675                 mov     eax, [ebp+var_8]
.text:00006678                 imul    eax, 0Ch
.text:0000667B                 mov     ecx, [ecx+14h]
.text:0000667E                 mov     [ecx+eax+4], edx
.text:00006682
.text:00006682 loc_6682:                               ; CODE XREF: _do_paint+85Cj
.text:00006682                 jmp     loc_6535
.text:00006687 ; ---------------------------------------------------------------------------
.text:00006687
.text:00006687 loc_6687:                               ; CODE XREF: _do_paint+75Ej
.text:00006687                 mov     edx, [ebp+var_44]
.text:0000668A                 movzx   eax, word ptr [edx]
.text:0000668D                 mov     ecx, [ebp+arg_0]
.text:00006690                 mov     edx, [ecx+18h]
.text:00006693                 mov     ecx, [ebp+var_4]
.text:00006696                 mov     edx, [edx+ecx*4]
.text:00006699                 movzx   ecx, word ptr [edx]
.text:0000669C                 xor     edx, edx
.text:0000669E                 cmp     eax, ecx
.text:000066A0                 setnz   dl
.text:000066A3                 mov     [ebp+var_4C], edx
.text:000066A6                 mov     eax, [ebp+var_4C]
.text:000066A9                 mov     [ebp+var_50], eax
.text:000066AC                 mov     ecx, [ebp+arg_0]
.text:000066AF                 mov     edx, [ecx+18h]
.text:000066B2                 mov     eax, [ebp+var_4]
.text:000066B5                 mov     ecx, [edx+eax*4]
.text:000066B8                 mov     edx, [ebp+var_44]
.text:000066BB                 mov     ax, [edx]
.text:000066BE                 mov     [ecx], ax
.text:000066C1                 mov     [ebp+var_8], 0
.text:000066C8                 jmp     short loc_66D3
.text:000066CA ; ---------------------------------------------------------------------------
.text:000066CA
.text:000066CA loc_66CA:                               ; CODE XREF: _do_paint:loc_6DC3j
.text:000066CA                 mov     ecx, [ebp+var_8]
.text:000066CD                 add     ecx, 1
.text:000066D0                 mov     [ebp+var_8], ecx
.text:000066D3
.text:000066D3 loc_66D3:                               ; CODE XREF: _do_paint+8DCj
.text:000066D3                 mov     edx, [ebp+arg_0]
.text:000066D6                 mov     eax, [ebp+var_8]
.text:000066D9                 cmp     eax, [edx+12Ch]
.text:000066DF                 jge     loc_6DC8
.text:000066E5                 mov     ecx, [ebp+var_8]
.text:000066E8                 imul    ecx, 0Ch
.text:000066EB                 add     ecx, [ebp+var_48]
.text:000066EE                 mov     [ebp+var_9C], ecx
.text:000066F4                 mov     edx, [ebp+var_8]
.text:000066F7                 imul    edx, 0Ch
.text:000066FA                 mov     eax, [ebp+var_34]
.text:000066FD                 mov     ecx, [eax+edx+4]
.text:00006701                 mov     [ebp+var_8C], ecx
.text:00006707                 mov     edx, [ebp+var_8]
.text:0000670A                 imul    edx, 0Ch
.text:0000670D                 mov     eax, [ebp+var_34]
.text:00006710                 mov     ecx, [eax+edx]
.text:00006713                 mov     [ebp+var_90], ecx
.text:00006719                 mov     edx, [ebp+arg_0]
.text:0000671C                 mov     eax, [edx+18h]
.text:0000671F                 mov     ecx, [ebp+var_4]
.text:00006722                 mov     edx, [eax+ecx*4]
.text:00006725                 mov     eax, [ebp+var_8]
.text:00006728                 imul    eax, 0Ch
.text:0000672B                 mov     ecx, [edx+14h]
.text:0000672E                 mov     edx, [ecx+eax+4]
.text:00006732                 xor     edx, [ebp+var_8C]
.text:00006738                 and     edx, 400000h
.text:0000673E                 jz      short loc_6747
.text:00006740                 mov     [ebp+var_4C], 1
.text:00006747
.text:00006747 loc_6747:                               ; CODE XREF: _do_paint+952j
.text:00006747                 mov     eax, [ebp+var_8C]
.text:0000674D                 xor     eax, [ebp+var_58]
.text:00006750                 mov     ecx, [ebp+arg_0]
.text:00006753                 and     eax, [ecx+106Ch]
.text:00006759                 neg     eax
.text:0000675B                 sbb     eax, eax
.text:0000675D                 neg     eax
.text:0000675F                 mov     [ebp+var_94], eax
.text:00006765                 cmp     [ebp+var_90], 23BAh
.text:0000676F                 jb      short loc_677D
.text:00006771                 cmp     [ebp+var_90], 23BDh
.text:0000677B                 jbe     short loc_67AD
.text:0000677D
.text:0000677D loc_677D:                               ; CODE XREF: _do_paint+983j
.text:0000677D                 cmp     [ebp+var_8], 0
.text:00006781                 jle     short loc_67B7
.text:00006783                 mov     edx, [ebp+var_8]
.text:00006786                 sub     edx, 1
.text:00006789                 imul    edx, 0Ch
.text:0000678C                 mov     eax, [ebp+var_34]
.text:0000678F                 cmp     dword ptr [eax+edx], 23BAh
.text:00006796                 jb      short loc_67B7
.text:00006798                 mov     ecx, [ebp+var_8]
.text:0000679B                 sub     ecx, 1
.text:0000679E                 imul    ecx, 0Ch
.text:000067A1                 mov     edx, [ebp+var_34]
.text:000067A4                 cmp     dword ptr [edx+ecx], 23BDh
.text:000067AB                 ja      short loc_67B7
.text:000067AD
.text:000067AD loc_67AD:                               ; CODE XREF: _do_paint+98Fj
.text:000067AD                 mov     [ebp+var_94], 1
.text:000067B7
.text:000067B7 loc_67B7:                               ; CODE XREF: _do_paint+995j
.text:000067B7                                         ; _do_paint+9AAj ...
.text:000067B7                 mov     eax, [ebp+var_90]
.text:000067BD                 and     eax, 0FFFFFC00h
.text:000067C2                 cmp     eax, 0D800h
.text:000067C7                 jz      short loc_67E9
.text:000067C9                 mov     ecx, [ebp+var_90]
.text:000067CF                 and     ecx, 0FFFFFE00h
.text:000067D5                 cmp     ecx, 0F000h
.text:000067DB                 jz      short loc_67E9
.text:000067DD                 mov     [ebp+var_B8], 0
.text:000067E7                 jmp     short loc_67FB
.text:000067E9 ; ---------------------------------------------------------------------------
.text:000067E9
.text:000067E9 loc_67E9:                               ; CODE XREF: _do_paint+9DBj
.text:000067E9                                         ; _do_paint+9EFj
.text:000067E9                 mov     edx, [ebp+var_90]
.text:000067EF                 and     edx, 0FFFFFF00h
.text:000067F5                 mov     [ebp+var_B8], edx
.text:000067FB
.text:000067FB loc_67FB:                               ; CODE XREF: _do_paint+9FBj
.text:000067FB                 mov     eax, [ebp+var_B8]
.text:00006801                 cmp     eax, [ebp+var_5C]
.text:00006804                 jz      short loc_6810
.text:00006806                 mov     [ebp+var_94], 1
.text:00006810
.text:00006810 loc_6810:                               ; CODE XREF: _do_paint+A18j
.text:00006810                 mov     ecx, [ebp+var_9C]
.text:00006816                 cmp     dword ptr [ecx+8], 0
.text:0000681A                 jnz     short loc_682E
.text:0000681C                 cmp     [ebp+var_8], 0
.text:00006820                 jle     short loc_6838
.text:00006822                 mov     edx, [ebp+var_9C]
.text:00006828                 cmp     dword ptr [edx-4], 0
.text:0000682C                 jz      short loc_6838
.text:0000682E
.text:0000682E loc_682E:                               ; CODE XREF: _do_paint+A2Ej
.text:0000682E                 mov     [ebp+var_94], 1
.text:00006838
.text:00006838 loc_6838:                               ; CODE XREF: _do_paint+A34j
.text:00006838                                         ; _do_paint+A40j
.text:00006838                 mov     eax, [ebp+arg_0]
.text:0000683B                 mov     ecx, [eax+1090h]
.text:00006841                 cmp     dword ptr [ecx+4], 0
.text:00006845                 jnz     short loc_68B5
.text:00006847                 cmp     [ebp+var_4C], 0
.text:0000684B                 jnz     short loc_68B5
.text:0000684D                 mov     edx, [ebp+arg_0]
.text:00006850                 mov     eax, [edx+18h]
.text:00006853                 mov     ecx, [ebp+var_4]
.text:00006856                 mov     edx, [eax+ecx*4]
.text:00006859                 mov     eax, [ebp+var_8]
.text:0000685C                 imul    eax, 0Ch
.text:0000685F                 mov     ecx, [edx+14h]
.text:00006862                 mov     edx, [eax+ecx]
.text:00006865                 cmp     edx, [ebp+var_90]
.text:0000686B                 jnz     short loc_689F
.text:0000686D                 mov     eax, [ebp+arg_0]
.text:00006870                 mov     ecx, [eax+18h]
.text:00006873                 mov     edx, [ebp+var_4]
.text:00006876                 mov     eax, [ecx+edx*4]
.text:00006879                 mov     ecx, [ebp+var_8]
.text:0000687C                 imul    ecx, 0Ch
.text:0000687F                 mov     edx, [eax+14h]
.text:00006882                 mov     eax, [edx+ecx+4]
.text:00006886                 and     eax, 0FFFFFFFh
.text:0000688B                 cmp     eax, [ebp+var_8C]
.text:00006891                 jnz     short loc_689F
.text:00006893                 mov     [ebp+var_94], 1
.text:0000689D                 jmp     short loc_68B5
.text:0000689F ; ---------------------------------------------------------------------------
.text:0000689F
.text:0000689F loc_689F:                               ; CODE XREF: _do_paint+A7Fj
.text:0000689F                                         ; _do_paint+AA5j
.text:0000689F                 cmp     [ebp+var_50], 0
.text:000068A3                 jnz     short loc_68B5
.text:000068A5                 cmp     [ebp+var_64], 1
.text:000068A9                 jnz     short loc_68B5
.text:000068AB                 mov     [ebp+var_94], 1
.text:000068B5
.text:000068B5 loc_68B5:                               ; CODE XREF: _do_paint+A59j
.text:000068B5                                         ; _do_paint+A5Fj ...
.text:000068B5                 cmp     [ebp+var_94], 0
.text:000068BC                 jz      loc_69AA
.text:000068C2                 cmp     [ebp+var_50], 0
.text:000068C6                 jnz     short loc_68CE
.text:000068C8                 cmp     [ebp+var_68], 0
.text:000068CC                 jz      short loc_692C
.text:000068CE
.text:000068CE loc_68CE:                               ; CODE XREF: _do_paint+ADAj
.text:000068CE                 cmp     [ebp+var_64], 0
.text:000068D2                 jle     short loc_692C
.text:000068D4                 mov     ecx, [ebp+var_44]
.text:000068D7                 movzx   edx, word ptr [ecx]
.text:000068DA                 push    edx
.text:000068DB                 mov     eax, [ebp+var_58]
.text:000068DE                 push    eax
.text:000068DF                 mov     ecx, [ebp+var_64]
.text:000068E2                 push    ecx
.text:000068E3                 mov     edx, [ebp+var_2C]
.text:000068E6                 push    edx
.text:000068E7                 mov     eax, [ebp+var_4]
.text:000068EA                 push    eax
.text:000068EB                 mov     ecx, [ebp+var_60]
.text:000068EE                 push    ecx
.text:000068EF                 mov     edx, [ebp+arg_4]
.text:000068F2                 push    edx
.text:000068F3                 call    _do_text
.text:000068F8                 add     esp, 1Ch
.text:000068FB                 mov     eax, [ebp+var_58]
.text:000068FE                 and     eax, 60000000h
.text:00006903                 jz      short loc_692C
.text:00006905                 mov     ecx, [ebp+var_44]
.text:00006908                 movzx   edx, word ptr [ecx]
.text:0000690B                 push    edx
.text:0000690C                 mov     eax, [ebp+var_58]
.text:0000690F                 push    eax
.text:00006910                 mov     ecx, [ebp+var_64]
.text:00006913                 push    ecx
.text:00006914                 mov     edx, [ebp+var_2C]
.text:00006917                 push    edx
.text:00006918                 mov     eax, [ebp+var_4]
.text:0000691B                 push    eax
.text:0000691C                 mov     ecx, [ebp+var_60]
.text:0000691F                 push    ecx
.text:00006920                 mov     edx, [ebp+arg_4]
.text:00006923                 push    edx
.text:00006924                 call    _do_cursor
.text:00006929                 add     esp, 1Ch
.text:0000692C
.text:0000692C loc_692C:                               ; CODE XREF: _do_paint+AE0j
.text:0000692C                                         ; _do_paint+AE6j ...
.text:0000692C                 mov     eax, [ebp+var_8]
.text:0000692F                 mov     [ebp+var_60], eax
.text:00006932                 mov     [ebp+var_64], 0
.text:00006939                 mov     ecx, [ebp+var_8C]
.text:0000693F                 mov     [ebp+var_58], ecx
.text:00006942                 mov     edx, [ebp+var_90]
.text:00006948                 and     edx, 0FFFFFC00h
.text:0000694E                 cmp     edx, 0D800h
.text:00006954                 jz      short loc_6974
.text:00006956                 mov     eax, [ebp+var_90]
.text:0000695C                 and     eax, 0FFFFFE00h
.text:00006961                 cmp     eax, 0F000h
.text:00006966                 jz      short loc_6974
.text:00006968                 mov     [ebp+var_BC], 0
.text:00006972                 jmp     short loc_6986
.text:00006974 ; ---------------------------------------------------------------------------
.text:00006974
.text:00006974 loc_6974:                               ; CODE XREF: _do_paint+B68j
.text:00006974                                         ; _do_paint+B7Aj
.text:00006974                 mov     ecx, [ebp+var_90]
.text:0000697A                 and     ecx, 0FFFFFF00h
.text:00006980                 mov     [ebp+var_BC], ecx
.text:00006986
.text:00006986 loc_6986:                               ; CODE XREF: _do_paint+B86j
.text:00006986                 mov     edx, [ebp+var_BC]
.text:0000698C                 mov     [ebp+var_5C], edx
.text:0000698F                 mov     eax, [ebp+arg_0]
.text:00006992                 mov     ecx, [eax+1090h]
.text:00006998                 cmp     dword ptr [ecx+4], 0
.text:0000699C                 jz      short loc_69A4
.text:0000699E                 mov     edx, [ebp+var_50]
.text:000069A1                 mov     [ebp+var_68], edx
.text:000069A4
.text:000069A4 loc_69A4:                               ; CODE XREF: _do_paint+BB0j
.text:000069A4                 mov     eax, [ebp+var_4C]
.text:000069A7                 mov     [ebp+var_50], eax
.text:000069AA
.text:000069AA loc_69AA:                               ; CODE XREF: _do_paint+AD0j
.text:000069AA                 mov     [ebp+var_98], 0
.text:000069B4                 mov     ecx, [ebp+var_8C]
.text:000069BA                 push    ecx
.text:000069BB                 mov     edx, [ebp+var_90]
.text:000069C1                 push    edx
.text:000069C2                 mov     eax, [ebp+var_9C]
.text:000069C8                 push    eax
.text:000069C9                 mov     ecx, [ebp+arg_0]
.text:000069CC                 mov     edx, [ecx+18h]
.text:000069CF                 mov     eax, [ebp+var_4]
.text:000069D2                 mov     ecx, [edx+eax*4]
.text:000069D5                 mov     edx, [ebp+var_8]
.text:000069D8                 imul    edx, 0Ch
.text:000069DB                 add     edx, [ecx+14h]
.text:000069DE                 push    edx
.text:000069DF                 call    _termchars_equal_override
.text:000069E4                 add     esp, 10h
.text:000069E7                 test    eax, eax
.text:000069E9                 jnz     short loc_69FC
.text:000069EB                 mov     [ebp+var_98], 1
.text:000069F5                 mov     [ebp+var_50], 1
.text:000069FC
.text:000069FC loc_69FC:                               ; CODE XREF: _do_paint+BFDj
.text:000069FC                 mov     eax, [ebp+var_64]
.text:000069FF                 add     eax, 2
.text:00006A02                 cmp     eax, [ebp+var_30]
.text:00006A05                 jle     short loc_6A28
.text:00006A07                 mov     ecx, [ebp+var_64]
.text:00006A0A                 add     ecx, 100h
.text:00006A10                 mov     [ebp+var_30], ecx
.text:00006A13                 push    2
.text:00006A15                 mov     edx, [ebp+var_30]
.text:00006A18                 push    edx
.text:00006A19                 mov     eax, [ebp+var_2C]
.text:00006A1C                 push    eax
.text:00006A1D                 call    _saferealloc
.text:00006A22                 add     esp, 0Ch
.text:00006A25                 mov     [ebp+var_2C], eax
.text:00006A28
.text:00006A28 loc_6A28:                               ; CODE XREF: _do_paint+C19j
.text:00006A28                 cmp     [ebp+var_90], (offset loc_FFFF+1)
.text:00006A32                 jbe     short loc_6A95
.text:00006A34                 cmp     [ebp+var_90], 110000h
.text:00006A3E                 jnb     short loc_6A95
.text:00006A40                 mov     ecx, [ebp+var_90]
.text:00006A46                 sub     ecx, (offset loc_FFFF+1)
.text:00006A4C                 shr     ecx, 0Ah
.text:00006A4F                 add     ecx, 0D800h
.text:00006A55                 mov     edx, [ebp+var_64]
.text:00006A58                 mov     eax, [ebp+var_2C]
.text:00006A5B                 mov     [eax+edx*2], cx
.text:00006A5F                 mov     ecx, [ebp+var_64]
.text:00006A62                 add     ecx, 1
.text:00006A65                 mov     [ebp+var_64], ecx
.text:00006A68                 mov     edx, [ebp+var_90]
.text:00006A6E                 sub     edx, (offset loc_FFFF+1)
.text:00006A74                 and     edx, 3FFh
.text:00006A7A                 add     edx, 0DC00h
.text:00006A80                 mov     eax, [ebp+var_64]
.text:00006A83                 mov     ecx, [ebp+var_2C]
.text:00006A86                 mov     [ecx+eax*2], dx
.text:00006A8A                 mov     edx, [ebp+var_64]
.text:00006A8D                 add     edx, 1
.text:00006A90                 mov     [ebp+var_64], edx
.text:00006A93                 jmp     short loc_6AAF
.text:00006A95 ; ---------------------------------------------------------------------------
.text:00006A95
.text:00006A95 loc_6A95:                               ; CODE XREF: _do_paint+C46j
.text:00006A95                                         ; _do_paint+C52j
.text:00006A95                 mov     eax, [ebp+var_64]
.text:00006A98                 mov     ecx, [ebp+var_2C]
.text:00006A9B                 mov     dx, word ptr [ebp+var_90]
.text:00006AA2                 mov     [ecx+eax*2], dx
.text:00006AA6                 mov     eax, [ebp+var_64]
.text:00006AA9                 add     eax, 1
.text:00006AAC                 mov     [ebp+var_64], eax
.text:00006AAF
.text:00006AAF loc_6AAF:                               ; CODE XREF: _do_paint+CA7j
.text:00006AAF                 mov     ecx, [ebp+var_9C]
.text:00006AB5                 cmp     dword ptr [ecx+8], 0
.text:00006AB9                 jz      loc_6C66
.text:00006ABF                 mov     edx, [ebp+var_9C]
.text:00006AC5                 mov     [ebp+var_A0], edx
.text:00006ACB
.text:00006ACB loc_6ACB:                               ; CODE XREF: _do_paint:loc_6C55j
.text:00006ACB                 mov     eax, [ebp+var_A0]
.text:00006AD1                 cmp     dword ptr [eax+8], 0
.text:00006AD5                 jz      loc_6C5A
.text:00006ADB                 mov     ecx, [ebp+var_A0]
.text:00006AE1                 mov     edx, [ecx+8]
.text:00006AE4                 imul    edx, 0Ch
.text:00006AE7                 add     edx, [ebp+var_A0]
.text:00006AED                 mov     [ebp+var_A0], edx
.text:00006AF3                 mov     eax, [ebp+var_A0]
.text:00006AF9                 mov     ecx, [eax]
.text:00006AFB                 mov     [ebp+var_A4], ecx
.text:00006B01                 mov     edx, [ebp+var_A4]
.text:00006B07                 and     edx, 0FFFFFF00h
.text:00006B0D                 mov     [ebp+var_C0], edx
.text:00006B13                 cmp     [ebp+var_C0], 0D800h
.text:00006B1D                 jz      short loc_6B39
.text:00006B1F                 cmp     [ebp+var_C0], 0D900h
.text:00006B29                 jz      short loc_6B5E
.text:00006B2B                 cmp     [ebp+var_C0], 0DA00h
.text:00006B35                 jz      short loc_6B82
.text:00006B37                 jmp     short loc_6BA2
.text:00006B39 ; ---------------------------------------------------------------------------
.text:00006B39
.text:00006B39 loc_6B39:                               ; CODE XREF: _do_paint+D31j
.text:00006B39                 mov     eax, [ebp+arg_0]
.text:00006B3C                 mov     ecx, [eax+1090h]
.text:00006B42                 mov     edx, [ebp+var_A4]
.text:00006B48                 and     edx, 0FFh
.text:00006B4E                 movzx   eax, word ptr [ecx+edx*2+210h]
.text:00006B56                 mov     [ebp+var_A4], eax
.text:00006B5C                 jmp     short loc_6BA2
.text:00006B5E ; ---------------------------------------------------------------------------
.text:00006B5E
.text:00006B5E loc_6B5E:                               ; CODE XREF: _do_paint+D3Dj
.text:00006B5E                 mov     ecx, [ebp+arg_0]
.text:00006B61                 mov     edx, [ecx+1090h]
.text:00006B67                 mov     eax, [ebp+var_A4]
.text:00006B6D                 and     eax, 0FFh
.text:00006B72                 movzx   ecx, word ptr [edx+eax*2+610h]
.text:00006B7A                 mov     [ebp+var_A4], ecx
.text:00006B80                 jmp     short loc_6BA2
.text:00006B82 ; ---------------------------------------------------------------------------
.text:00006B82
.text:00006B82 loc_6B82:                               ; CODE XREF: _do_paint+D49j
.text:00006B82                 mov     edx, [ebp+arg_0]
.text:00006B85                 mov     eax, [edx+1090h]
.text:00006B8B                 mov     ecx, [ebp+var_A4]
.text:00006B91                 and     ecx, 0FFh
.text:00006B97                 movzx   edx, word ptr [eax+ecx*2+10h]
.text:00006B9C                 mov     [ebp+var_A4], edx
.text:00006BA2
.text:00006BA2 loc_6BA2:                               ; CODE XREF: _do_paint+D4Bj
.text:00006BA2                                         ; _do_paint+D70j ...
.text:00006BA2                 mov     eax, [ebp+var_64]
.text:00006BA5                 add     eax, 2
.text:00006BA8                 cmp     eax, [ebp+var_30]
.text:00006BAB                 jle     short loc_6BCE
.text:00006BAD                 mov     ecx, [ebp+var_64]
.text:00006BB0                 add     ecx, 100h
.text:00006BB6                 mov     [ebp+var_30], ecx
.text:00006BB9                 push    2
.text:00006BBB                 mov     edx, [ebp+var_30]
.text:00006BBE                 push    edx
.text:00006BBF                 mov     eax, [ebp+var_2C]
.text:00006BC2                 push    eax
.text:00006BC3                 call    _saferealloc
.text:00006BC8                 add     esp, 0Ch
.text:00006BCB                 mov     [ebp+var_2C], eax
.text:00006BCE
.text:00006BCE loc_6BCE:                               ; CODE XREF: _do_paint+DBFj
.text:00006BCE                 cmp     [ebp+var_A4], (offset loc_FFFF+1)
.text:00006BD8                 jbe     short loc_6C3B
.text:00006BDA                 cmp     [ebp+var_A4], 110000h
.text:00006BE4                 jnb     short loc_6C3B
.text:00006BE6                 mov     ecx, [ebp+var_A4]
.text:00006BEC                 sub     ecx, (offset loc_FFFF+1)
.text:00006BF2                 shr     ecx, 0Ah
.text:00006BF5                 add     ecx, 0D800h
.text:00006BFB                 mov     edx, [ebp+var_64]
.text:00006BFE                 mov     eax, [ebp+var_2C]
.text:00006C01                 mov     [eax+edx*2], cx
.text:00006C05                 mov     ecx, [ebp+var_64]
.text:00006C08                 add     ecx, 1
.text:00006C0B                 mov     [ebp+var_64], ecx
.text:00006C0E                 mov     edx, [ebp+var_A4]
.text:00006C14                 sub     edx, (offset loc_FFFF+1)
.text:00006C1A                 and     edx, 3FFh
.text:00006C20                 add     edx, 0DC00h
.text:00006C26                 mov     eax, [ebp+var_64]
.text:00006C29                 mov     ecx, [ebp+var_2C]
.text:00006C2C                 mov     [ecx+eax*2], dx
.text:00006C30                 mov     edx, [ebp+var_64]
.text:00006C33                 add     edx, 1
.text:00006C36                 mov     [ebp+var_64], edx
.text:00006C39                 jmp     short loc_6C55
.text:00006C3B ; ---------------------------------------------------------------------------
.text:00006C3B
.text:00006C3B loc_6C3B:                               ; CODE XREF: _do_paint+DECj
.text:00006C3B                                         ; _do_paint+DF8j
.text:00006C3B                 mov     eax, [ebp+var_64]
.text:00006C3E                 mov     ecx, [ebp+var_2C]
.text:00006C41                 mov     dx, word ptr [ebp+var_A4]
.text:00006C48                 mov     [ecx+eax*2], dx
.text:00006C4C                 mov     eax, [ebp+var_64]
.text:00006C4F                 add     eax, 1
.text:00006C52                 mov     [ebp+var_64], eax
.text:00006C55
.text:00006C55 loc_6C55:                               ; CODE XREF: _do_paint+E4Dj
.text:00006C55                 jmp     loc_6ACB
.text:00006C5A ; ---------------------------------------------------------------------------
.text:00006C5A
.text:00006C5A loc_6C5A:                               ; CODE XREF: _do_paint+CE9j
.text:00006C5A                 mov     ecx, [ebp+var_58]
.text:00006C5D                 or      ecx, 80000000h
.text:00006C63                 mov     [ebp+var_58], ecx
.text:00006C66
.text:00006C66 loc_6C66:                               ; CODE XREF: _do_paint+CCDj
.text:00006C66                 cmp     [ebp+var_98], 0
.text:00006C6D                 jz      loc_6D10
.text:00006C73                 mov     edx, [ebp+var_9C]
.text:00006C79                 push    edx
.text:00006C7A                 mov     eax, [ebp+var_8]
.text:00006C7D                 push    eax
.text:00006C7E                 mov     ecx, [ebp+arg_0]
.text:00006C81                 mov     edx, [ecx+18h]
.text:00006C84                 mov     eax, [ebp+var_4]
.text:00006C87                 mov     ecx, [edx+eax*4]
.text:00006C8A                 push    ecx
.text:00006C8B                 call    _copy_termchar
.text:00006C90                 add     esp, 0Ch
.text:00006C93                 mov     edx, [ebp+arg_0]
.text:00006C96                 mov     eax, [edx+18h]
.text:00006C99                 mov     ecx, [ebp+var_4]
.text:00006C9C                 mov     edx, [eax+ecx*4]
.text:00006C9F                 mov     eax, [ebp+var_8]
.text:00006CA2                 imul    eax, 0Ch
.text:00006CA5                 mov     ecx, [edx+14h]
.text:00006CA8                 mov     edx, [ebp+var_90]
.text:00006CAE                 mov     [eax+ecx], edx
.text:00006CB1                 mov     eax, [ebp+arg_0]
.text:00006CB4                 mov     ecx, [eax+18h]
.text:00006CB7                 mov     edx, [ebp+var_4]
.text:00006CBA                 mov     eax, [ecx+edx*4]
.text:00006CBD                 mov     ecx, [ebp+var_8]
.text:00006CC0                 imul    ecx, 0Ch
.text:00006CC3                 mov     edx, [eax+14h]
.text:00006CC6                 mov     eax, [ebp+var_8C]
.text:00006CCC                 mov     [edx+ecx+4], eax
.text:00006CD0                 mov     ecx, [ebp+var_60]
.text:00006CD3                 cmp     ecx, [ebp+var_8]
.text:00006CD6                 jnz     short loc_6D10
.text:00006CD8                 mov     edx, [ebp+arg_0]
.text:00006CDB                 mov     eax, [edx+18h]
.text:00006CDE                 mov     ecx, [ebp+var_4]
.text:00006CE1                 mov     edx, [eax+ecx*4]
.text:00006CE4                 mov     eax, [ebp+var_8]
.text:00006CE7                 imul    eax, 0Ch
.text:00006CEA                 mov     ecx, [edx+14h]
.text:00006CED                 mov     edx, [ecx+eax+4]
.text:00006CF1                 or      edx, 80000000h
.text:00006CF7                 mov     eax, [ebp+arg_0]
.text:00006CFA                 mov     ecx, [eax+18h]
.text:00006CFD                 mov     eax, [ebp+var_4]
.text:00006D00                 mov     ecx, [ecx+eax*4]
.text:00006D03                 mov     eax, [ebp+var_8]
.text:00006D06                 imul    eax, 0Ch
.text:00006D09                 mov     ecx, [ecx+14h]
.text:00006D0C                 mov     [ecx+eax+4], edx
.text:00006D10
.text:00006D10 loc_6D10:                               ; CODE XREF: _do_paint+E81j
.text:00006D10                                         ; _do_paint+EEAj
.text:00006D10                 mov     edx, [ebp+var_8C]
.text:00006D16                 and     edx, 400000h
.text:00006D1C                 jz      loc_6DC3
.text:00006D22                 mov     eax, [ebp+var_8]
.text:00006D25                 add     eax, 1
.text:00006D28                 mov     [ebp+var_8], eax
.text:00006D2B                 mov     ecx, [ebp+arg_0]
.text:00006D2E                 mov     edx, [ebp+var_8]
.text:00006D31                 cmp     edx, [ecx+12Ch]
.text:00006D37                 jge     loc_6DC3
.text:00006D3D                 mov     eax, [ebp+var_9C]
.text:00006D43                 add     eax, 0Ch
.text:00006D46                 mov     [ebp+var_9C], eax
.text:00006D4C                 mov     ecx, [ebp+var_4]
.text:00006D4F                 cmp     ecx, [ebp+var_C]
.text:00006D52                 jnz     short loc_6D73
.text:00006D54                 mov     edx, [ebp+var_8]
.text:00006D57                 cmp     edx, [ebp+var_10]
.text:00006D5A                 jnz     short loc_6D73
.text:00006D5C                 push    149Bh           ; Line
.text:00006D61                 push    offset $SG88038 ; "..\\..\\..\\terminal.c"
.text:00006D66                 push    offset $SG88039 ; "!(i == our_curs_y && j == our_curs_x)"
.text:00006D6B                 call    __wassert
.text:00006D70 ; ---------------------------------------------------------------------------
.text:00006D70                 add     esp, 0Ch
.text:00006D73
.text:00006D73 loc_6D73:                               ; CODE XREF: _do_paint+F66j
.text:00006D73                                         ; _do_paint+F6Ej
.text:00006D73                 mov     ecx, [ebp+var_9C]
.text:00006D79                 push    ecx
.text:00006D7A                 mov     edx, [ebp+arg_0]
.text:00006D7D                 mov     eax, [edx+18h]
.text:00006D80                 mov     ecx, [ebp+var_4]
.text:00006D83                 mov     edx, [eax+ecx*4]
.text:00006D86                 mov     eax, [ebp+var_8]
.text:00006D89                 imul    eax, 0Ch
.text:00006D8C                 add     eax, [edx+14h]
.text:00006D8F                 push    eax
.text:00006D90                 call    _termchars_equal
.text:00006D95                 add     esp, 8
.text:00006D98                 test    eax, eax
.text:00006D9A                 jnz     short loc_6DA3
.text:00006D9C                 mov     [ebp+var_50], 1
.text:00006DA3
.text:00006DA3 loc_6DA3:                               ; CODE XREF: _do_paint+FAEj
.text:00006DA3                 mov     ecx, [ebp+var_9C]
.text:00006DA9                 push    ecx
.text:00006DAA                 mov     edx, [ebp+var_8]
.text:00006DAD                 push    edx
.text:00006DAE                 mov     eax, [ebp+arg_0]
.text:00006DB1                 mov     ecx, [eax+18h]
.text:00006DB4                 mov     edx, [ebp+var_4]
.text:00006DB7                 mov     eax, [ecx+edx*4]
.text:00006DBA                 push    eax
.text:00006DBB                 call    _copy_termchar
.text:00006DC0                 add     esp, 0Ch
.text:00006DC3
.text:00006DC3 loc_6DC3:                               ; CODE XREF: _do_paint+F30j
.text:00006DC3                                         ; _do_paint+F4Bj
.text:00006DC3                 jmp     loc_66CA
.text:00006DC8 ; ---------------------------------------------------------------------------
.text:00006DC8
.text:00006DC8 loc_6DC8:                               ; CODE XREF: _do_paint+8F3j
.text:00006DC8                 cmp     [ebp+var_50], 0
.text:00006DCC                 jz      short loc_6E2C
.text:00006DCE                 cmp     [ebp+var_64], 0
.text:00006DD2                 jle     short loc_6E2C
.text:00006DD4                 mov     ecx, [ebp+var_44]
.text:00006DD7                 movzx   edx, word ptr [ecx]
.text:00006DDA                 push    edx
.text:00006DDB                 mov     eax, [ebp+var_58]
.text:00006DDE                 push    eax
.text:00006DDF                 mov     ecx, [ebp+var_64]
.text:00006DE2                 push    ecx
.text:00006DE3                 mov     edx, [ebp+var_2C]
.text:00006DE6                 push    edx
.text:00006DE7                 mov     eax, [ebp+var_4]
.text:00006DEA                 push    eax
.text:00006DEB                 mov     ecx, [ebp+var_60]
.text:00006DEE                 push    ecx
.text:00006DEF                 mov     edx, [ebp+arg_4]
.text:00006DF2                 push    edx
.text:00006DF3                 call    _do_text
.text:00006DF8                 add     esp, 1Ch
.text:00006DFB                 mov     eax, [ebp+var_58]
.text:00006DFE                 and     eax, 60000000h
.text:00006E03                 jz      short loc_6E2C
.text:00006E05                 mov     ecx, [ebp+var_44]
.text:00006E08                 movzx   edx, word ptr [ecx]
.text:00006E0B                 push    edx
.text:00006E0C                 mov     eax, [ebp+var_58]
.text:00006E0F                 push    eax
.text:00006E10                 mov     ecx, [ebp+var_64]
.text:00006E13                 push    ecx
.text:00006E14                 mov     edx, [ebp+var_2C]
.text:00006E17                 push    edx
.text:00006E18                 mov     eax, [ebp+var_4]
.text:00006E1B                 push    eax
.text:00006E1C                 mov     ecx, [ebp+var_60]
.text:00006E1F                 push    ecx
.text:00006E20                 mov     edx, [ebp+arg_4]
.text:00006E23                 push    edx
.text:00006E24                 call    _do_cursor
.text:00006E29                 add     esp, 1Ch
.text:00006E2C
.text:00006E2C loc_6E2C:                               ; CODE XREF: _do_paint+FE0j
.text:00006E2C                                         ; _do_paint+FE6j ...
.text:00006E2C                 mov     eax, [ebp+var_44]
.text:00006E2F                 push    eax
.text:00006E30                 call    _unlineptr
.text:00006E35                 add     esp, 4
.text:00006E38                 jmp     loc_6053
.text:00006E3D ; ---------------------------------------------------------------------------
.text:00006E3D
.text:00006E3D loc_6E3D:                               ; CODE XREF: _do_paint+27Cj
.text:00006E3D                 mov     ecx, [ebp+var_34]
.text:00006E40                 push    ecx
.text:00006E41                 call    _safefree
.text:00006E46                 add     esp, 4
.text:00006E49                 mov     edx, [ebp+var_2C]
.text:00006E4C                 push    edx
.text:00006E4D                 call    _safefree
.text:00006E52                 add     esp, 4
.text:00006E55                 push    edx
.text:00006E56                 mov     ecx, ebp
.text:00006E58                 push    eax
.text:00006E59                 lea     edx, $LN118
.text:00006E5F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00006E64                 pop     eax
.text:00006E65                 pop     edx
.text:00006E66                 pop     edi
.text:00006E67                 pop     esi
.text:00006E68                 add     esp, 0C0h
.text:00006E6E                 cmp     ebp, esp
.text:00006E70                 call    __RTC_CheckEsp
.text:00006E75                 mov     esp, ebp
.text:00006E77                 pop     ebp
.text:00006E78                 retn
.text:00006E78 _do_paint       endp
.text:00006E78
.text:00006E78 ; ---------------------------------------------------------------------------
.text:00006E79                 align 4
.text:00006E7C $LN118          dd 1                    ; DATA XREF: _do_paint+106Do
.text:00006E80                 dd offset $LN117
.text:00006E84 $LN117          dd 0FFFFFFDCh, 8        ; DATA XREF: .text:00006E80o
.text:00006E8C                 dd offset $LN116        ; "scrpos"
.text:00006E90 $LN116          db 'scrpos',0           ; DATA XREF: .text:00006E8Co
.text:00006E97                 db 5 dup(0CCh)
.text:00006E9C
.text:00006E9C ; =============== S U B R O U T I N E =======================================
.text:00006E9C
.text:00006E9C ; Attributes: bp-based frame
.text:00006E9C
.text:00006E9C _unlineptr      proc near               ; CODE XREF: _do_paint+180p
.text:00006E9C                                         ; _do_paint+1044p ...
.text:00006E9C
.text:00006E9C arg_0           = dword ptr  8
.text:00006E9C
.text:00006E9C                 push    ebp
.text:00006E9D                 mov     ebp, esp
.text:00006E9F                 mov     eax, [ebp+arg_0]
.text:00006EA2                 cmp     dword ptr [eax+0Ch], 0
.text:00006EA6                 jz      short loc_6EB4
.text:00006EA8                 mov     ecx, [ebp+arg_0]
.text:00006EAB                 push    ecx
.text:00006EAC                 call    _freeline
.text:00006EB1                 add     esp, 4
.text:00006EB4
.text:00006EB4 loc_6EB4:                               ; CODE XREF: _unlineptr+Aj
.text:00006EB4                 cmp     ebp, esp
.text:00006EB6                 call    __RTC_CheckEsp
.text:00006EBB                 pop     ebp
.text:00006EBC                 retn
.text:00006EBC _unlineptr      endp
.text:00006EBC
.text:00006EBC ; ---------------------------------------------------------------------------
.text:00006EBD                 db 0Fh dup(0CCh)
.text:00006ECC
.text:00006ECC ; =============== S U B R O U T I N E =======================================
.text:00006ECC
.text:00006ECC ; Attributes: bp-based frame
.text:00006ECC
.text:00006ECC _term_bidi_line proc near               ; CODE XREF: _do_paint+123p
.text:00006ECC                                         ; _do_paint+2D7p ...
.text:00006ECC
.text:00006ECC var_14          = dword ptr -14h
.text:00006ECC var_10          = dword ptr -10h
.text:00006ECC var_C           = dword ptr -0Ch
.text:00006ECC var_8           = dword ptr -8
.text:00006ECC var_4           = dword ptr -4
.text:00006ECC arg_0           = dword ptr  8
.text:00006ECC arg_4           = dword ptr  0Ch
.text:00006ECC arg_8           = dword ptr  10h
.text:00006ECC
.text:00006ECC                 push    ebp
.text:00006ECD                 mov     ebp, esp
.text:00006ECF                 sub     esp, 14h
.text:00006ED2                 push    esi
.text:00006ED3                 mov     eax, 0CCCCCCCCh
.text:00006ED8                 mov     [ebp+var_14], eax
.text:00006EDB                 mov     [ebp+var_10], eax
.text:00006EDE                 mov     [ebp+var_C], eax
.text:00006EE1                 mov     [ebp+var_8], eax
.text:00006EE4                 mov     [ebp+var_4], eax
.text:00006EE7                 mov     eax, [ebp+arg_0]
.text:00006EEA                 cmp     dword ptr [eax+10F8h], 0
.text:00006EF1                 jz      short loc_6F03
.text:00006EF3                 mov     ecx, [ebp+arg_0]
.text:00006EF6                 cmp     dword ptr [ecx+10E0h], 0
.text:00006EFD                 jnz     loc_73A2
.text:00006F03
.text:00006F03 loc_6F03:                               ; CODE XREF: _term_bidi_line+25j
.text:00006F03                 mov     edx, [ebp+arg_0]
.text:00006F06                 mov     eax, [edx+12Ch]
.text:00006F0C                 push    eax
.text:00006F0D                 mov     ecx, [ebp+arg_4]
.text:00006F10                 mov     edx, [ecx+14h]
.text:00006F13                 push    edx
.text:00006F14                 mov     eax, [ebp+arg_8]
.text:00006F17                 push    eax
.text:00006F18                 mov     ecx, [ebp+arg_0]
.text:00006F1B                 push    ecx
.text:00006F1C                 call    _term_bidi_cache_hit
.text:00006F21                 add     esp, 10h
.text:00006F24                 test    eax, eax
.text:00006F26                 jnz     loc_738A
.text:00006F2C                 mov     edx, [ebp+arg_0]
.text:00006F2F                 mov     eax, [ebp+arg_0]
.text:00006F32                 mov     ecx, [edx+10C4h]
.text:00006F38                 cmp     ecx, [eax+12Ch]
.text:00006F3E                 jge     short loc_6FA0
.text:00006F40                 mov     edx, [ebp+arg_0]
.text:00006F43                 mov     eax, [ebp+arg_0]
.text:00006F46                 mov     ecx, [eax+12Ch]
.text:00006F4C                 mov     [edx+10C4h], ecx
.text:00006F52                 push    0Ch
.text:00006F54                 mov     edx, [ebp+arg_0]
.text:00006F57                 mov     eax, [edx+10C4h]
.text:00006F5D                 push    eax
.text:00006F5E                 mov     ecx, [ebp+arg_0]
.text:00006F61                 mov     edx, [ecx+10BCh]
.text:00006F67                 push    edx
.text:00006F68                 call    _saferealloc
.text:00006F6D                 add     esp, 0Ch
.text:00006F70                 mov     ecx, [ebp+arg_0]
.text:00006F73                 mov     [ecx+10BCh], eax
.text:00006F79                 push    0Ch
.text:00006F7B                 mov     edx, [ebp+arg_0]
.text:00006F7E                 mov     eax, [edx+10C4h]
.text:00006F84                 push    eax
.text:00006F85                 mov     ecx, [ebp+arg_0]
.text:00006F88                 mov     edx, [ecx+10C0h]
.text:00006F8E                 push    edx
.text:00006F8F                 call    _saferealloc
.text:00006F94                 add     esp, 0Ch
.text:00006F97                 mov     ecx, [ebp+arg_0]
.text:00006F9A                 mov     [ecx+10C0h], eax
.text:00006FA0
.text:00006FA0 loc_6FA0:                               ; CODE XREF: _term_bidi_line+72j
.text:00006FA0                 mov     [ebp+var_8], 0
.text:00006FA7                 jmp     short loc_6FB2
.text:00006FA9 ; ---------------------------------------------------------------------------
.text:00006FA9
.text:00006FA9 loc_6FA9:                               ; CODE XREF: _term_bidi_line+233j
.text:00006FA9                 mov     edx, [ebp+var_8]
.text:00006FAC                 add     edx, 1
.text:00006FAF                 mov     [ebp+var_8], edx
.text:00006FB2
.text:00006FB2 loc_6FB2:                               ; CODE XREF: _term_bidi_line+DBj
.text:00006FB2                 mov     eax, [ebp+arg_0]
.text:00006FB5                 mov     ecx, [ebp+var_8]
.text:00006FB8                 cmp     ecx, [eax+12Ch]
.text:00006FBE                 jge     loc_7104
.text:00006FC4                 mov     edx, [ebp+var_8]
.text:00006FC7                 imul    edx, 0Ch
.text:00006FCA                 mov     eax, [ebp+arg_4]
.text:00006FCD                 mov     ecx, [eax+14h]
.text:00006FD0                 mov     edx, [edx+ecx]
.text:00006FD3                 mov     [ebp+var_C], edx
.text:00006FD6                 mov     eax, [ebp+var_C]
.text:00006FD9                 and     eax, 0FFFFFF00h
.text:00006FDE                 mov     [ebp+var_10], eax
.text:00006FE1                 cmp     [ebp+var_10], 0D800h
.text:00006FE8                 jz      short loc_7029
.text:00006FEA                 cmp     [ebp+var_10], 0D900h
.text:00006FF1                 jz      short loc_6FFE
.text:00006FF3                 cmp     [ebp+var_10], 0DA00h
.text:00006FFA                 jz      short loc_7048
.text:00006FFC                 jmp     short loc_7061
.text:00006FFE ; ---------------------------------------------------------------------------
.text:00006FFE
.text:00006FFE loc_6FFE:                               ; CODE XREF: _term_bidi_line+125j
.text:00006FFE                 mov     ecx, [ebp+arg_0]
.text:00007001                 cmp     dword ptr [ecx+1154h], 0
.text:00007008                 jnz     short loc_7029
.text:0000700A                 mov     edx, [ebp+arg_0]
.text:0000700D                 mov     eax, [edx+1090h]
.text:00007013                 mov     ecx, [ebp+var_C]
.text:00007016                 and     ecx, 0FFh
.text:0000701C                 movzx   edx, word ptr [eax+ecx*2+610h]
.text:00007024                 mov     [ebp+var_C], edx
.text:00007027                 jmp     short loc_7061
.text:00007029 ; ---------------------------------------------------------------------------
.text:00007029
.text:00007029 loc_7029:                               ; CODE XREF: _term_bidi_line+11Cj
.text:00007029                                         ; _term_bidi_line+13Cj
.text:00007029                 mov     eax, [ebp+arg_0]
.text:0000702C                 mov     ecx, [eax+1090h]
.text:00007032                 mov     edx, [ebp+var_C]
.text:00007035                 and     edx, 0FFh
.text:0000703B                 movzx   eax, word ptr [ecx+edx*2+210h]
.text:00007043                 mov     [ebp+var_C], eax
.text:00007046                 jmp     short loc_7061
.text:00007048 ; ---------------------------------------------------------------------------
.text:00007048
.text:00007048 loc_7048:                               ; CODE XREF: _term_bidi_line+12Ej
.text:00007048                 mov     ecx, [ebp+arg_0]
.text:0000704B                 mov     edx, [ecx+1090h]
.text:00007051                 mov     eax, [ebp+var_C]
.text:00007054                 and     eax, 0FFh
.text:00007059                 movzx   ecx, word ptr [edx+eax*2+10h]
.text:0000705E                 mov     [ebp+var_C], ecx
.text:00007061
.text:00007061 loc_7061:                               ; CODE XREF: _term_bidi_line+130j
.text:00007061                                         ; _term_bidi_line+15Bj ...
.text:00007061                 mov     edx, [ebp+var_C]
.text:00007064                 and     edx, 0FFFFFF00h
.text:0000706A                 mov     [ebp+var_14], edx
.text:0000706D                 cmp     [ebp+var_14], 0F000h
.text:00007074                 jz      short loc_70A0
.text:00007076                 cmp     [ebp+var_14], 0F100h
.text:0000707D                 jz      short loc_7081
.text:0000707F                 jmp     short loc_70BC
.text:00007081 ; ---------------------------------------------------------------------------
.text:00007081
.text:00007081 loc_7081:                               ; CODE XREF: _term_bidi_line+1B1j
.text:00007081                 mov     eax, [ebp+arg_0]
.text:00007084                 mov     ecx, [eax+1090h]
.text:0000708A                 mov     edx, [ebp+var_C]
.text:0000708D                 and     edx, 0FFh
.text:00007093                 movzx   eax, word ptr [ecx+edx*2+410h]
.text:0000709B                 mov     [ebp+var_C], eax
.text:0000709E                 jmp     short loc_70BC
.text:000070A0 ; ---------------------------------------------------------------------------
.text:000070A0
.text:000070A0 loc_70A0:                               ; CODE XREF: _term_bidi_line+1A8j
.text:000070A0                 mov     ecx, [ebp+arg_0]
.text:000070A3                 mov     edx, [ecx+1090h]
.text:000070A9                 mov     eax, [ebp+var_C]
.text:000070AC                 and     eax, 0FFh
.text:000070B1                 movzx   ecx, word ptr [edx+eax*2+810h]
.text:000070B9                 mov     [ebp+var_C], ecx
.text:000070BC
.text:000070BC loc_70BC:                               ; CODE XREF: _term_bidi_line+1B3j
.text:000070BC                                         ; _term_bidi_line+1D2j
.text:000070BC                 mov     edx, [ebp+var_8]
.text:000070BF                 imul    edx, 0Ch
.text:000070C2                 mov     eax, [ebp+arg_0]
.text:000070C5                 mov     ecx, [eax+10BCh]
.text:000070CB                 mov     eax, [ebp+var_C]
.text:000070CE                 mov     [ecx+edx+4], eax
.text:000070D2                 mov     ecx, [ebp+var_8]
.text:000070D5                 imul    ecx, 0Ch
.text:000070D8                 mov     edx, [ebp+arg_0]
.text:000070DB                 mov     eax, [edx+10BCh]
.text:000070E1                 mov     edx, [ebp+var_C]
.text:000070E4                 mov     [ecx+eax], edx
.text:000070E7                 mov     eax, [ebp+var_8]
.text:000070EA                 imul    eax, 0Ch
.text:000070ED                 mov     ecx, [ebp+arg_0]
.text:000070F0                 mov     edx, [ecx+10BCh]
.text:000070F6                 mov     cx, word ptr [ebp+var_8]
.text:000070FA                 mov     [edx+eax+8], cx
.text:000070FF                 jmp     loc_6FA9
.text:00007104 ; ---------------------------------------------------------------------------
.text:00007104
.text:00007104 loc_7104:                               ; CODE XREF: _term_bidi_line+F2j
.text:00007104                 mov     edx, [ebp+arg_0]
.text:00007107                 cmp     dword ptr [edx+10F8h], 0
.text:0000710E                 jnz     short loc_712C
.text:00007110                 mov     eax, [ebp+arg_0]
.text:00007113                 mov     ecx, [eax+12Ch]
.text:00007119                 push    ecx
.text:0000711A                 mov     edx, [ebp+arg_0]
.text:0000711D                 mov     eax, [edx+10BCh]
.text:00007123                 push    eax
.text:00007124                 call    _do_bidi
.text:00007129                 add     esp, 8
.text:0000712C
.text:0000712C loc_712C:                               ; CODE XREF: _term_bidi_line+242j
.text:0000712C                 mov     ecx, [ebp+arg_0]
.text:0000712F                 cmp     dword ptr [ecx+10F8h], 0
.text:00007136                 jnz     short loc_7198
.text:00007138                 mov     edx, [ebp+arg_0]
.text:0000713B                 cmp     dword ptr [edx+10E0h], 0
.text:00007142                 jz      short loc_7198
.text:00007144                 mov     [ebp+var_8], 0
.text:0000714B                 jmp     short loc_7156
.text:0000714D ; ---------------------------------------------------------------------------
.text:0000714D
.text:0000714D loc_714D:                               ; CODE XREF: _term_bidi_line+2CAj
.text:0000714D                 mov     eax, [ebp+var_8]
.text:00007150                 add     eax, 1
.text:00007153                 mov     [ebp+var_8], eax
.text:00007156
.text:00007156 loc_7156:                               ; CODE XREF: _term_bidi_line+27Fj
.text:00007156                 mov     ecx, [ebp+arg_0]
.text:00007159                 mov     edx, [ebp+var_8]
.text:0000715C                 cmp     edx, [ecx+12Ch]
.text:00007162                 jge     short loc_7198
.text:00007164                 mov     eax, [ebp+var_8]
.text:00007167                 imul    eax, 0Ch
.text:0000716A                 mov     ecx, [ebp+arg_0]
.text:0000716D                 mov     edx, [ecx+10BCh]
.text:00007173                 add     edx, eax
.text:00007175                 mov     eax, [ebp+var_8]
.text:00007178                 imul    eax, 0Ch
.text:0000717B                 mov     ecx, [ebp+arg_0]
.text:0000717E                 mov     ecx, [ecx+10C0h]
.text:00007184                 add     ecx, eax
.text:00007186                 mov     eax, [edx]
.text:00007188                 mov     [ecx], eax
.text:0000718A                 mov     eax, [edx+4]
.text:0000718D                 mov     [ecx+4], eax
.text:00007190                 mov     edx, [edx+8]
.text:00007193                 mov     [ecx+8], edx
.text:00007196                 jmp     short loc_714D
.text:00007198 ; ---------------------------------------------------------------------------
.text:00007198
.text:00007198 loc_7198:                               ; CODE XREF: _term_bidi_line+26Aj
.text:00007198                                         ; _term_bidi_line+276j ...
.text:00007198                 mov     eax, [ebp+arg_0]
.text:0000719B                 cmp     dword ptr [eax+10E0h], 0
.text:000071A2                 jnz     short loc_71CA
.text:000071A4                 mov     ecx, [ebp+arg_0]
.text:000071A7                 mov     edx, [ecx+12Ch]
.text:000071AD                 push    edx
.text:000071AE                 mov     eax, [ebp+arg_0]
.text:000071B1                 mov     ecx, [eax+10C0h]
.text:000071B7                 push    ecx
.text:000071B8                 mov     edx, [ebp+arg_0]
.text:000071BB                 mov     eax, [edx+10BCh]
.text:000071C1                 push    eax
.text:000071C2                 call    _do_shape
.text:000071C7                 add     esp, 0Ch
.text:000071CA
.text:000071CA loc_71CA:                               ; CODE XREF: _term_bidi_line+2D6j
.text:000071CA                 mov     ecx, [ebp+arg_0]
.text:000071CD                 mov     edx, [ebp+arg_4]
.text:000071D0                 mov     eax, [ecx+10B8h]
.text:000071D6                 cmp     eax, [edx+8]
.text:000071D9                 jge     short loc_7211
.text:000071DB                 mov     ecx, [ebp+arg_0]
.text:000071DE                 mov     edx, [ebp+arg_4]
.text:000071E1                 mov     eax, [edx+8]
.text:000071E4                 mov     [ecx+10B8h], eax
.text:000071EA                 push    0Ch
.text:000071EC                 mov     ecx, [ebp+arg_0]
.text:000071EF                 mov     edx, [ecx+10B8h]
.text:000071F5                 push    edx
.text:000071F6                 mov     eax, [ebp+arg_0]
.text:000071F9                 mov     ecx, [eax+10B4h]
.text:000071FF                 push    ecx
.text:00007200                 call    _saferealloc
.text:00007205                 add     esp, 0Ch
.text:00007208                 mov     edx, [ebp+arg_0]
.text:0000720B                 mov     [edx+10B4h], eax
.text:00007211
.text:00007211 loc_7211:                               ; CODE XREF: _term_bidi_line+30Dj
.text:00007211                 mov     eax, [ebp+arg_4]
.text:00007214                 mov     ecx, [eax+8]
.text:00007217                 imul    ecx, 0Ch
.text:0000721A                 push    ecx             ; Size
.text:0000721B                 mov     edx, [ebp+arg_4]
.text:0000721E                 mov     eax, [edx+14h]
.text:00007221                 push    eax             ; Src
.text:00007222                 mov     ecx, [ebp+arg_0]
.text:00007225                 mov     edx, [ecx+10B4h]
.text:0000722B                 push    edx             ; Dst
.text:0000722C                 call    _memcpy
.text:00007231                 add     esp, 0Ch
.text:00007234                 mov     [ebp+var_8], 0
.text:0000723B                 jmp     short loc_7246
.text:0000723D ; ---------------------------------------------------------------------------
.text:0000723D
.text:0000723D loc_723D:                               ; CODE XREF: _term_bidi_line:loc_733Bj
.text:0000723D                 mov     eax, [ebp+var_8]
.text:00007240                 add     eax, 1
.text:00007243                 mov     [ebp+var_8], eax
.text:00007246
.text:00007246 loc_7246:                               ; CODE XREF: _term_bidi_line+36Fj
.text:00007246                 mov     ecx, [ebp+arg_0]
.text:00007249                 mov     edx, [ebp+var_8]
.text:0000724C                 cmp     edx, [ecx+12Ch]
.text:00007252                 jge     loc_7340
.text:00007258                 mov     eax, [ebp+var_8]
.text:0000725B                 imul    eax, 0Ch
.text:0000725E                 mov     ecx, [ebp+arg_0]
.text:00007261                 mov     edx, [ecx+10C0h]
.text:00007267                 movzx   eax, word ptr [edx+eax+8]
.text:0000726C                 imul    eax, 0Ch
.text:0000726F                 mov     ecx, [ebp+arg_4]
.text:00007272                 mov     edx, [ecx+14h]
.text:00007275                 add     edx, eax
.text:00007277                 mov     eax, [ebp+var_8]
.text:0000727A                 imul    eax, 0Ch
.text:0000727D                 mov     ecx, [ebp+arg_0]
.text:00007280                 mov     ecx, [ecx+10B4h]
.text:00007286                 add     ecx, eax
.text:00007288                 mov     eax, [edx]
.text:0000728A                 mov     [ecx], eax
.text:0000728C                 mov     eax, [edx+4]
.text:0000728F                 mov     [ecx+4], eax
.text:00007292                 mov     edx, [edx+8]
.text:00007295                 mov     [ecx+8], edx
.text:00007298                 mov     eax, [ebp+var_8]
.text:0000729B                 imul    eax, 0Ch
.text:0000729E                 mov     ecx, [ebp+arg_0]
.text:000072A1                 mov     edx, [ecx+10B4h]
.text:000072A7                 cmp     dword ptr [edx+eax+8], 0
.text:000072AC                 jz      short loc_72EF
.text:000072AE                 mov     eax, [ebp+var_8]
.text:000072B1                 imul    eax, 0Ch
.text:000072B4                 mov     ecx, [ebp+arg_0]
.text:000072B7                 mov     edx, [ecx+10B4h]
.text:000072BD                 mov     ecx, [ebp+var_8]
.text:000072C0                 imul    ecx, 0Ch
.text:000072C3                 mov     esi, [ebp+arg_0]
.text:000072C6                 mov     esi, [esi+10C0h]
.text:000072CC                 movzx   ecx, word ptr [esi+ecx+8]
.text:000072D1                 mov     esi, [ebp+var_8]
.text:000072D4                 sub     esi, ecx
.text:000072D6                 mov     edx, [edx+eax+8]
.text:000072DA                 sub     edx, esi
.text:000072DC                 mov     eax, [ebp+var_8]
.text:000072DF                 imul    eax, 0Ch
.text:000072E2                 mov     ecx, [ebp+arg_0]
.text:000072E5                 mov     ecx, [ecx+10B4h]
.text:000072EB                 mov     [ecx+eax+8], edx
.text:000072EF
.text:000072EF loc_72EF:                               ; CODE XREF: _term_bidi_line+3E0j
.text:000072EF                 mov     edx, [ebp+var_8]
.text:000072F2                 imul    edx, 0Ch
.text:000072F5                 mov     eax, [ebp+arg_0]
.text:000072F8                 mov     ecx, [eax+10C0h]
.text:000072FE                 mov     eax, [ebp+var_8]
.text:00007301                 imul    eax, 0Ch
.text:00007304                 mov     esi, [ebp+arg_0]
.text:00007307                 mov     esi, [esi+10C0h]
.text:0000730D                 mov     ecx, [edx+ecx]
.text:00007310                 cmp     ecx, [esi+eax+4]
.text:00007314                 jz      short loc_733B
.text:00007316                 mov     edx, [ebp+var_8]
.text:00007319                 imul    edx, 0Ch
.text:0000731C                 mov     eax, [ebp+arg_0]
.text:0000731F                 mov     ecx, [eax+10C0h]
.text:00007325                 mov     eax, [ebp+var_8]
.text:00007328                 imul    eax, 0Ch
.text:0000732B                 mov     esi, [ebp+arg_0]
.text:0000732E                 mov     esi, [esi+10B4h]
.text:00007334                 mov     ecx, [ecx+edx+4]
.text:00007338                 mov     [eax+esi], ecx
.text:0000733B
.text:0000733B loc_733B:                               ; CODE XREF: _term_bidi_line+448j
.text:0000733B                 jmp     loc_723D
.text:00007340 ; ---------------------------------------------------------------------------
.text:00007340
.text:00007340 loc_7340:                               ; CODE XREF: _term_bidi_line+386j
.text:00007340                 mov     edx, [ebp+arg_4]
.text:00007343                 mov     eax, [edx+8]
.text:00007346                 push    eax             ; int
.text:00007347                 mov     ecx, [ebp+arg_0]
.text:0000734A                 mov     edx, [ecx+12Ch]
.text:00007350                 push    edx             ; int
.text:00007351                 mov     eax, [ebp+arg_0]
.text:00007354                 mov     ecx, [eax+10C0h]
.text:0000735A                 push    ecx             ; int
.text:0000735B                 mov     edx, [ebp+arg_0]
.text:0000735E                 mov     eax, [edx+10B4h]
.text:00007364                 push    eax             ; void *
.text:00007365                 mov     ecx, [ebp+arg_4]
.text:00007368                 mov     edx, [ecx+14h]
.text:0000736B                 push    edx             ; Src
.text:0000736C                 mov     eax, [ebp+arg_8]
.text:0000736F                 push    eax             ; int
.text:00007370                 mov     ecx, [ebp+arg_0]
.text:00007373                 push    ecx             ; int
.text:00007374                 call    _term_bidi_cache_store
.text:00007379                 add     esp, 1Ch
.text:0000737C                 mov     edx, [ebp+arg_0]
.text:0000737F                 mov     eax, [edx+10B4h]
.text:00007385                 mov     [ebp+var_4], eax
.text:00007388                 jmp     short loc_73A0
.text:0000738A ; ---------------------------------------------------------------------------
.text:0000738A
.text:0000738A loc_738A:                               ; CODE XREF: _term_bidi_line+5Aj
.text:0000738A                 mov     ecx, [ebp+arg_8]
.text:0000738D                 shl     ecx, 4
.text:00007390                 mov     edx, [ebp+arg_0]
.text:00007393                 mov     eax, [edx+10CCh]
.text:00007399                 mov     ecx, [eax+ecx+4]
.text:0000739D                 mov     [ebp+var_4], ecx
.text:000073A0
.text:000073A0 loc_73A0:                               ; CODE XREF: _term_bidi_line+4BCj
.text:000073A0                 jmp     short loc_73A9
.text:000073A2 ; ---------------------------------------------------------------------------
.text:000073A2
.text:000073A2 loc_73A2:                               ; CODE XREF: _term_bidi_line+31j
.text:000073A2                 mov     [ebp+var_4], 0
.text:000073A9
.text:000073A9 loc_73A9:                               ; CODE XREF: _term_bidi_line:loc_73A0j
.text:000073A9                 mov     eax, [ebp+var_4]
.text:000073AC                 pop     esi
.text:000073AD                 add     esp, 14h
.text:000073B0                 cmp     ebp, esp
.text:000073B2                 call    __RTC_CheckEsp
.text:000073B7                 mov     esp, ebp
.text:000073B9                 pop     ebp
.text:000073BA                 retn
.text:000073BA _term_bidi_line endp
.text:000073BA
.text:000073BA ; ---------------------------------------------------------------------------
.text:000073BB                 align 4
.text:000073BC
.text:000073BC ; =============== S U B R O U T I N E =======================================
.text:000073BC
.text:000073BC ; Attributes: bp-based frame
.text:000073BC
.text:000073BC _term_bidi_cache_hit proc near          ; CODE XREF: _term_bidi_line+50p
.text:000073BC
.text:000073BC var_4           = dword ptr -4
.text:000073BC arg_0           = dword ptr  8
.text:000073BC arg_4           = dword ptr  0Ch
.text:000073BC arg_8           = dword ptr  10h
.text:000073BC arg_C           = dword ptr  14h
.text:000073BC
.text:000073BC                 push    ebp
.text:000073BD                 mov     ebp, esp
.text:000073BF                 push    ecx
.text:000073C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073C7                 mov     eax, [ebp+arg_0]
.text:000073CA                 cmp     dword ptr [eax+10C8h], 0
.text:000073D1                 jnz     short loc_73DA
.text:000073D3                 xor     eax, eax
.text:000073D5                 jmp     loc_7479
.text:000073DA ; ---------------------------------------------------------------------------
.text:000073DA
.text:000073DA loc_73DA:                               ; CODE XREF: _term_bidi_cache_hit+15j
.text:000073DA                 mov     ecx, [ebp+arg_0]
.text:000073DD                 mov     edx, [ebp+arg_4]
.text:000073E0                 cmp     edx, [ecx+10D0h]
.text:000073E6                 jl      short loc_73EF
.text:000073E8                 xor     eax, eax
.text:000073EA                 jmp     loc_7479
.text:000073EF ; ---------------------------------------------------------------------------
.text:000073EF
.text:000073EF loc_73EF:                               ; CODE XREF: _term_bidi_cache_hit+2Aj
.text:000073EF                 mov     eax, [ebp+arg_4]
.text:000073F2                 shl     eax, 4
.text:000073F5                 mov     ecx, [ebp+arg_0]
.text:000073F8                 mov     edx, [ecx+10C8h]
.text:000073FE                 cmp     dword ptr [edx+eax+4], 0
.text:00007403                 jnz     short loc_7409
.text:00007405                 xor     eax, eax
.text:00007407                 jmp     short loc_7479
.text:00007409 ; ---------------------------------------------------------------------------
.text:00007409
.text:00007409 loc_7409:                               ; CODE XREF: _term_bidi_cache_hit+47j
.text:00007409                 mov     eax, [ebp+arg_4]
.text:0000740C                 shl     eax, 4
.text:0000740F                 mov     ecx, [ebp+arg_0]
.text:00007412                 mov     edx, [ecx+10C8h]
.text:00007418                 mov     eax, [eax+edx]
.text:0000741B                 cmp     eax, [ebp+arg_C]
.text:0000741E                 jz      short loc_7424
.text:00007420                 xor     eax, eax
.text:00007422                 jmp     short loc_7479
.text:00007424 ; ---------------------------------------------------------------------------
.text:00007424
.text:00007424 loc_7424:                               ; CODE XREF: _term_bidi_cache_hit+62j
.text:00007424                 mov     [ebp+var_4], 0
.text:0000742B                 jmp     short loc_7436
.text:0000742D ; ---------------------------------------------------------------------------
.text:0000742D
.text:0000742D loc_742D:                               ; CODE XREF: _term_bidi_cache_hit:loc_7472j
.text:0000742D                 mov     ecx, [ebp+var_4]
.text:00007430                 add     ecx, 1
.text:00007433                 mov     [ebp+var_4], ecx
.text:00007436
.text:00007436 loc_7436:                               ; CODE XREF: _term_bidi_cache_hit+6Fj
.text:00007436                 mov     edx, [ebp+var_4]
.text:00007439                 cmp     edx, [ebp+arg_C]
.text:0000743C                 jge     short loc_7474
.text:0000743E                 mov     eax, [ebp+var_4]
.text:00007441                 imul    eax, 0Ch
.text:00007444                 add     eax, [ebp+arg_8]
.text:00007447                 push    eax
.text:00007448                 mov     ecx, [ebp+arg_4]
.text:0000744B                 shl     ecx, 4
.text:0000744E                 mov     edx, [ebp+arg_0]
.text:00007451                 mov     eax, [edx+10C8h]
.text:00007457                 mov     edx, [ebp+var_4]
.text:0000745A                 imul    edx, 0Ch
.text:0000745D                 add     edx, [eax+ecx+4]
.text:00007461                 push    edx
.text:00007462                 call    _termchars_equal
.text:00007467                 add     esp, 8
.text:0000746A                 test    eax, eax
.text:0000746C                 jnz     short loc_7472
.text:0000746E                 xor     eax, eax
.text:00007470                 jmp     short loc_7479
.text:00007472 ; ---------------------------------------------------------------------------
.text:00007472
.text:00007472 loc_7472:                               ; CODE XREF: _term_bidi_cache_hit+B0j
.text:00007472                 jmp     short loc_742D
.text:00007474 ; ---------------------------------------------------------------------------
.text:00007474
.text:00007474 loc_7474:                               ; CODE XREF: _term_bidi_cache_hit+80j
.text:00007474                 mov     eax, 1
.text:00007479
.text:00007479 loc_7479:                               ; CODE XREF: _term_bidi_cache_hit+19j
.text:00007479                                         ; _term_bidi_cache_hit+2Ej ...
.text:00007479                 add     esp, 4
.text:0000747C                 cmp     ebp, esp
.text:0000747E                 call    __RTC_CheckEsp
.text:00007483                 mov     esp, ebp
.text:00007485                 pop     ebp
.text:00007486                 retn
.text:00007486 _term_bidi_cache_hit endp
.text:00007486
.text:00007486 ; ---------------------------------------------------------------------------
.text:00007487                 db 5 dup(0CCh)
.text:0000748C
.text:0000748C ; =============== S U B R O U T I N E =======================================
.text:0000748C
.text:0000748C ; Attributes: bp-based frame
.text:0000748C
.text:0000748C ; int __cdecl term_bidi_cache_store(int, int, void *Src, void *, int, int, int)
.text:0000748C _term_bidi_cache_store proc near        ; CODE XREF: _term_bidi_line+4A8p
.text:0000748C
.text:0000748C var_C           = dword ptr -0Ch
.text:0000748C var_8           = dword ptr -8
.text:0000748C var_4           = dword ptr -4
.text:0000748C arg_0           = dword ptr  8
.text:0000748C arg_4           = dword ptr  0Ch
.text:0000748C Src             = dword ptr  10h
.text:0000748C arg_C           = dword ptr  14h
.text:0000748C arg_10          = dword ptr  18h
.text:0000748C arg_14          = dword ptr  1Ch
.text:0000748C arg_18          = dword ptr  20h
.text:0000748C
.text:0000748C                 push    ebp
.text:0000748D                 mov     ebp, esp
.text:0000748F                 sub     esp, 0Ch
.text:00007492                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00007499                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000074A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074A7                 mov     eax, [ebp+arg_0]
.text:000074AA                 cmp     dword ptr [eax+10C8h], 0
.text:000074B1                 jz      short loc_74C5
.text:000074B3                 mov     ecx, [ebp+arg_0]
.text:000074B6                 mov     edx, [ecx+10D0h]
.text:000074BC                 cmp     edx, [ebp+arg_4]
.text:000074BF                 jg      loc_7604
.text:000074C5
.text:000074C5 loc_74C5:                               ; CODE XREF: _term_bidi_cache_store+25j
.text:000074C5                 mov     eax, [ebp+arg_0]
.text:000074C8                 mov     ecx, [eax+10D0h]
.text:000074CE                 mov     [ebp+var_8], ecx
.text:000074D1                 mov     edx, [ebp+arg_4]
.text:000074D4                 add     edx, 1
.text:000074D7                 mov     eax, [ebp+arg_0]
.text:000074DA                 mov     [eax+10D0h], edx
.text:000074E0                 push    10h
.text:000074E2                 mov     ecx, [ebp+arg_0]
.text:000074E5                 mov     edx, [ecx+10D0h]
.text:000074EB                 push    edx
.text:000074EC                 mov     eax, [ebp+arg_0]
.text:000074EF                 mov     ecx, [eax+10C8h]
.text:000074F5                 push    ecx
.text:000074F6                 call    _saferealloc
.text:000074FB                 add     esp, 0Ch
.text:000074FE                 mov     edx, [ebp+arg_0]
.text:00007501                 mov     [edx+10C8h], eax
.text:00007507                 push    10h
.text:00007509                 mov     eax, [ebp+arg_0]
.text:0000750C                 mov     ecx, [eax+10D0h]
.text:00007512                 push    ecx
.text:00007513                 mov     edx, [ebp+arg_0]
.text:00007516                 mov     eax, [edx+10CCh]
.text:0000751C                 push    eax
.text:0000751D                 call    _saferealloc
.text:00007522                 add     esp, 0Ch
.text:00007525                 mov     ecx, [ebp+arg_0]
.text:00007528                 mov     [ecx+10CCh], eax
.text:0000752E
.text:0000752E loc_752E:                               ; CODE XREF: _term_bidi_cache_store+173j
.text:0000752E                 mov     edx, [ebp+arg_0]
.text:00007531                 mov     eax, [ebp+var_8]
.text:00007534                 cmp     eax, [edx+10D0h]
.text:0000753A                 jge     loc_7604
.text:00007540                 mov     ecx, [ebp+var_8]
.text:00007543                 shl     ecx, 4
.text:00007546                 mov     edx, [ebp+arg_0]
.text:00007549                 mov     eax, [edx+10CCh]
.text:0000754F                 mov     dword ptr [eax+ecx+4], 0
.text:00007557                 mov     ecx, [ebp+var_8]
.text:0000755A                 shl     ecx, 4
.text:0000755D                 mov     edx, [ebp+arg_0]
.text:00007560                 mov     eax, [edx+10C8h]
.text:00007566                 mov     dword ptr [eax+ecx+4], 0
.text:0000756E                 mov     ecx, [ebp+var_8]
.text:00007571                 shl     ecx, 4
.text:00007574                 mov     edx, [ebp+arg_0]
.text:00007577                 mov     eax, [edx+10CCh]
.text:0000757D                 mov     dword ptr [ecx+eax], 0FFFFFFFFh
.text:00007584                 mov     ecx, [ebp+var_8]
.text:00007587                 shl     ecx, 4
.text:0000758A                 mov     edx, [ebp+arg_0]
.text:0000758D                 mov     eax, [edx+10C8h]
.text:00007593                 mov     dword ptr [ecx+eax], 0FFFFFFFFh
.text:0000759A                 mov     ecx, [ebp+var_8]
.text:0000759D                 shl     ecx, 4
.text:000075A0                 mov     edx, [ebp+arg_0]
.text:000075A3                 mov     eax, [edx+10CCh]
.text:000075A9                 mov     dword ptr [eax+ecx+8], 0
.text:000075B1                 mov     ecx, [ebp+var_8]
.text:000075B4                 shl     ecx, 4
.text:000075B7                 mov     edx, [ebp+arg_0]
.text:000075BA                 mov     eax, [edx+10C8h]
.text:000075C0                 mov     dword ptr [eax+ecx+8], 0
.text:000075C8                 mov     ecx, [ebp+var_8]
.text:000075CB                 shl     ecx, 4
.text:000075CE                 mov     edx, [ebp+arg_0]
.text:000075D1                 mov     eax, [edx+10CCh]
.text:000075D7                 mov     dword ptr [eax+ecx+0Ch], 0
.text:000075DF                 mov     ecx, [ebp+var_8]
.text:000075E2                 shl     ecx, 4
.text:000075E5                 mov     edx, [ebp+arg_0]
.text:000075E8                 mov     eax, [edx+10C8h]
.text:000075EE                 mov     dword ptr [eax+ecx+0Ch], 0
.text:000075F6                 mov     ecx, [ebp+var_8]
.text:000075F9                 add     ecx, 1
.text:000075FC                 mov     [ebp+var_8], ecx
.text:000075FF                 jmp     loc_752E
.text:00007604 ; ---------------------------------------------------------------------------
.text:00007604
.text:00007604 loc_7604:                               ; CODE XREF: _term_bidi_cache_store+33j
.text:00007604                                         ; _term_bidi_cache_store+AEj
.text:00007604                 mov     edx, [ebp+arg_4]
.text:00007607                 shl     edx, 4
.text:0000760A                 mov     eax, [ebp+arg_0]
.text:0000760D                 mov     ecx, [eax+10C8h]
.text:00007613                 mov     edx, [ecx+edx+4]
.text:00007617                 push    edx
.text:00007618                 call    _safefree
.text:0000761D                 add     esp, 4
.text:00007620                 mov     eax, [ebp+arg_4]
.text:00007623                 shl     eax, 4
.text:00007626                 mov     ecx, [ebp+arg_0]
.text:00007629                 mov     edx, [ecx+10CCh]
.text:0000762F                 mov     eax, [edx+eax+4]
.text:00007633                 push    eax
.text:00007634                 call    _safefree
.text:00007639                 add     esp, 4
.text:0000763C                 mov     ecx, [ebp+arg_4]
.text:0000763F                 shl     ecx, 4
.text:00007642                 mov     edx, [ebp+arg_0]
.text:00007645                 mov     eax, [edx+10CCh]
.text:0000764B                 mov     ecx, [eax+ecx+8]
.text:0000764F                 push    ecx
.text:00007650                 call    _safefree
.text:00007655                 add     esp, 4
.text:00007658                 mov     edx, [ebp+arg_4]
.text:0000765B                 shl     edx, 4
.text:0000765E                 mov     eax, [ebp+arg_0]
.text:00007661                 mov     ecx, [eax+10CCh]
.text:00007667                 mov     edx, [ecx+edx+0Ch]
.text:0000766B                 push    edx
.text:0000766C                 call    _safefree
.text:00007671                 add     esp, 4
.text:00007674                 mov     eax, [ebp+arg_4]
.text:00007677                 shl     eax, 4
.text:0000767A                 mov     ecx, [ebp+arg_0]
.text:0000767D                 mov     edx, [ecx+10C8h]
.text:00007683                 mov     ecx, [ebp+arg_14]
.text:00007686                 mov     [eax+edx], ecx
.text:00007689                 push    0Ch
.text:0000768B                 mov     edx, [ebp+arg_18]
.text:0000768E                 push    edx
.text:0000768F                 call    _safemalloc
.text:00007694                 add     esp, 8
.text:00007697                 mov     ecx, [ebp+arg_4]
.text:0000769A                 shl     ecx, 4
.text:0000769D                 mov     edx, [ebp+arg_0]
.text:000076A0                 mov     edx, [edx+10C8h]
.text:000076A6                 mov     [edx+ecx+4], eax
.text:000076AA                 mov     eax, [ebp+arg_4]
.text:000076AD                 shl     eax, 4
.text:000076B0                 mov     ecx, [ebp+arg_0]
.text:000076B3                 mov     edx, [ecx+10CCh]
.text:000076B9                 mov     ecx, [ebp+arg_14]
.text:000076BC                 mov     [eax+edx], ecx
.text:000076BF                 push    0Ch
.text:000076C1                 mov     edx, [ebp+arg_18]
.text:000076C4                 push    edx
.text:000076C5                 call    _safemalloc
.text:000076CA                 add     esp, 8
.text:000076CD                 mov     ecx, [ebp+arg_4]
.text:000076D0                 shl     ecx, 4
.text:000076D3                 mov     edx, [ebp+arg_0]
.text:000076D6                 mov     edx, [edx+10CCh]
.text:000076DC                 mov     [edx+ecx+4], eax
.text:000076E0                 push    4
.text:000076E2                 mov     eax, [ebp+arg_14]
.text:000076E5                 push    eax
.text:000076E6                 call    _safemalloc
.text:000076EB                 add     esp, 8
.text:000076EE                 mov     ecx, [ebp+arg_4]
.text:000076F1                 shl     ecx, 4
.text:000076F4                 mov     edx, [ebp+arg_0]
.text:000076F7                 mov     edx, [edx+10CCh]
.text:000076FD                 mov     [edx+ecx+8], eax
.text:00007701                 push    4
.text:00007703                 mov     eax, [ebp+arg_14]
.text:00007706                 push    eax
.text:00007707                 call    _safemalloc
.text:0000770C                 add     esp, 8
.text:0000770F                 mov     ecx, [ebp+arg_4]
.text:00007712                 shl     ecx, 4
.text:00007715                 mov     edx, [ebp+arg_0]
.text:00007718                 mov     edx, [edx+10CCh]
.text:0000771E                 mov     [edx+ecx+0Ch], eax
.text:00007722                 mov     eax, [ebp+arg_18]
.text:00007725                 imul    eax, 0Ch
.text:00007728                 push    eax             ; Size
.text:00007729                 mov     ecx, [ebp+Src]
.text:0000772C                 push    ecx             ; Src
.text:0000772D                 mov     edx, [ebp+arg_4]
.text:00007730                 shl     edx, 4
.text:00007733                 mov     eax, [ebp+arg_0]
.text:00007736                 mov     ecx, [eax+10C8h]
.text:0000773C                 mov     edx, [ecx+edx+4]
.text:00007740                 push    edx             ; Dst
.text:00007741                 call    _memcpy
.text:00007746                 add     esp, 0Ch
.text:00007749                 mov     eax, [ebp+arg_18]
.text:0000774C                 imul    eax, 0Ch
.text:0000774F                 push    eax             ; Size
.text:00007750                 mov     ecx, [ebp+arg_C]
.text:00007753                 push    ecx             ; Src
.text:00007754                 mov     edx, [ebp+arg_4]
.text:00007757                 shl     edx, 4
.text:0000775A                 mov     eax, [ebp+arg_0]
.text:0000775D                 mov     ecx, [eax+10CCh]
.text:00007763                 mov     edx, [ecx+edx+4]
.text:00007767                 push    edx             ; Dst
.text:00007768                 call    _memcpy
.text:0000776D                 add     esp, 0Ch
.text:00007770                 mov     eax, [ebp+arg_14]
.text:00007773                 shl     eax, 2
.text:00007776                 push    eax             ; Size
.text:00007777                 push    0               ; Val
.text:00007779                 mov     ecx, [ebp+arg_4]
.text:0000777C                 shl     ecx, 4
.text:0000777F                 mov     edx, [ebp+arg_0]
.text:00007782                 mov     eax, [edx+10CCh]
.text:00007788                 mov     ecx, [eax+ecx+8]
.text:0000778C                 push    ecx             ; Dst
.text:0000778D                 call    _memset
.text:00007792                 add     esp, 0Ch
.text:00007795                 mov     edx, [ebp+arg_14]
.text:00007798                 shl     edx, 2
.text:0000779B                 push    edx             ; Size
.text:0000779C                 push    0               ; Val
.text:0000779E                 mov     eax, [ebp+arg_4]
.text:000077A1                 shl     eax, 4
.text:000077A4                 mov     ecx, [ebp+arg_0]
.text:000077A7                 mov     edx, [ecx+10CCh]
.text:000077AD                 mov     eax, [edx+eax+0Ch]
.text:000077B1                 push    eax             ; Dst
.text:000077B2                 call    _memset
.text:000077B7                 add     esp, 0Ch
.text:000077BA                 mov     [ebp+var_4], 0
.text:000077C1                 jmp     short loc_77CC
.text:000077C3 ; ---------------------------------------------------------------------------
.text:000077C3
.text:000077C3 loc_77C3:                               ; CODE XREF: _term_bidi_cache_store+3B6j
.text:000077C3                 mov     ecx, [ebp+var_4]
.text:000077C6                 add     ecx, 1
.text:000077C9                 mov     [ebp+var_4], ecx
.text:000077CC
.text:000077CC loc_77CC:                               ; CODE XREF: _term_bidi_cache_store+335j
.text:000077CC                 mov     edx, [ebp+var_4]
.text:000077CF                 cmp     edx, [ebp+arg_14]
.text:000077D2                 jge     short loc_7847
.text:000077D4                 mov     eax, [ebp+var_4]
.text:000077D7                 imul    eax, 0Ch
.text:000077DA                 mov     ecx, [ebp+arg_10]
.text:000077DD                 movzx   edx, word ptr [ecx+eax+8]
.text:000077E2                 mov     [ebp+var_C], edx
.text:000077E5                 cmp     [ebp+var_C], 0
.text:000077E9                 jl      short loc_77F3
.text:000077EB                 mov     eax, [ebp+var_C]
.text:000077EE                 cmp     eax, [ebp+arg_14]
.text:000077F1                 jl      short loc_780A
.text:000077F3
.text:000077F3 loc_77F3:                               ; CODE XREF: _term_bidi_cache_store+35Dj
.text:000077F3                 push    12A1h           ; Line
.text:000077F8                 push    offset $SG87813 ; "..\\..\\..\\terminal.c"
.text:000077FD                 push    offset $SG87814 ; "0 <= p && p < width"
.text:00007802                 call    __wassert
.text:00007807 ; ---------------------------------------------------------------------------
.text:00007807                 add     esp, 0Ch
.text:0000780A
.text:0000780A loc_780A:                               ; CODE XREF: _term_bidi_cache_store+365j
.text:0000780A                 mov     edx, [ebp+arg_4]
.text:0000780D                 shl     edx, 4
.text:00007810                 mov     eax, [ebp+arg_0]
.text:00007813                 mov     ecx, [eax+10CCh]
.text:00007819                 mov     edx, [ecx+edx+0Ch]
.text:0000781D                 mov     eax, [ebp+var_4]
.text:00007820                 mov     ecx, [ebp+var_C]
.text:00007823                 mov     [edx+eax*4], ecx
.text:00007826                 mov     edx, [ebp+arg_4]
.text:00007829                 shl     edx, 4
.text:0000782C                 mov     eax, [ebp+arg_0]
.text:0000782F                 mov     ecx, [eax+10CCh]
.text:00007835                 mov     edx, [ecx+edx+8]
.text:00007839                 mov     eax, [ebp+var_C]
.text:0000783C                 mov     ecx, [ebp+var_4]
.text:0000783F                 mov     [edx+eax*4], ecx
.text:00007842                 jmp     loc_77C3
.text:00007847 ; ---------------------------------------------------------------------------
.text:00007847
.text:00007847 loc_7847:                               ; CODE XREF: _term_bidi_cache_store+346j
.text:00007847                 add     esp, 0Ch
.text:0000784A                 cmp     ebp, esp
.text:0000784C                 call    __RTC_CheckEsp
.text:00007851                 mov     esp, ebp
.text:00007853                 pop     ebp
.text:00007854                 retn
.text:00007854 _term_bidi_cache_store endp
.text:00007854
.text:00007854 ; ---------------------------------------------------------------------------
.text:00007855                 db 7 dup(0CCh)
.text:0000785C
.text:0000785C ; =============== S U B R O U T I N E =======================================
.text:0000785C
.text:0000785C ; Attributes: bp-based frame
.text:0000785C
.text:0000785C                 public _term_invalidate
.text:0000785C _term_invalidate proc near              ; CODE XREF: _erase_lots+138p
.text:0000785C                                         ; _term_out+46A3p ...
.text:0000785C
.text:0000785C var_8           = dword ptr -8
.text:0000785C var_4           = dword ptr -4
.text:0000785C arg_0           = dword ptr  8
.text:0000785C
.text:0000785C                 push    ebp
.text:0000785D                 mov     ebp, esp
.text:0000785F                 sub     esp, 8
.text:00007862                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007869                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007870                 mov     [ebp+var_4], 0
.text:00007877                 jmp     short loc_7882
.text:00007879 ; ---------------------------------------------------------------------------
.text:00007879
.text:00007879 loc_7879:                               ; CODE XREF: _term_invalidate:loc_78E9j
.text:00007879                 mov     eax, [ebp+var_4]
.text:0000787C                 add     eax, 1
.text:0000787F                 mov     [ebp+var_4], eax
.text:00007882
.text:00007882 loc_7882:                               ; CODE XREF: _term_invalidate+1Bj
.text:00007882                 mov     ecx, [ebp+arg_0]
.text:00007885                 mov     edx, [ebp+var_4]
.text:00007888                 cmp     edx, [ecx+128h]
.text:0000788E                 jge     short loc_78EB
.text:00007890                 mov     [ebp+var_8], 0
.text:00007897                 jmp     short loc_78A2
.text:00007899 ; ---------------------------------------------------------------------------
.text:00007899
.text:00007899 loc_7899:                               ; CODE XREF: _term_invalidate+8Bj
.text:00007899                 mov     eax, [ebp+var_8]
.text:0000789C                 add     eax, 1
.text:0000789F                 mov     [ebp+var_8], eax
.text:000078A2
.text:000078A2 loc_78A2:                               ; CODE XREF: _term_invalidate+3Bj
.text:000078A2                 mov     ecx, [ebp+arg_0]
.text:000078A5                 mov     edx, [ebp+var_8]
.text:000078A8                 cmp     edx, [ecx+12Ch]
.text:000078AE                 jge     short loc_78E9
.text:000078B0                 mov     eax, [ebp+arg_0]
.text:000078B3                 mov     ecx, [eax+18h]
.text:000078B6                 mov     edx, [ebp+var_4]
.text:000078B9                 mov     eax, [ecx+edx*4]
.text:000078BC                 mov     ecx, [ebp+var_8]
.text:000078BF                 imul    ecx, 0Ch
.text:000078C2                 mov     edx, [eax+14h]
.text:000078C5                 mov     eax, [edx+ecx+4]
.text:000078C9                 or      eax, 3FFFFh
.text:000078CE                 mov     ecx, [ebp+arg_0]
.text:000078D1                 mov     edx, [ecx+18h]
.text:000078D4                 mov     ecx, [ebp+var_4]
.text:000078D7                 mov     edx, [edx+ecx*4]
.text:000078DA                 mov     ecx, [ebp+var_8]
.text:000078DD                 imul    ecx, 0Ch
.text:000078E0                 mov     edx, [edx+14h]
.text:000078E3                 mov     [edx+ecx+4], eax
.text:000078E7                 jmp     short loc_7899
.text:000078E9 ; ---------------------------------------------------------------------------
.text:000078E9
.text:000078E9 loc_78E9:                               ; CODE XREF: _term_invalidate+52j
.text:000078E9                 jmp     short loc_7879
.text:000078EB ; ---------------------------------------------------------------------------
.text:000078EB
.text:000078EB loc_78EB:                               ; CODE XREF: _term_invalidate+32j
.text:000078EB                 mov     eax, [ebp+arg_0]
.text:000078EE                 push    eax
.text:000078EF                 call    _term_schedule_update
.text:000078F4                 add     esp, 4
.text:000078F7                 add     esp, 8
.text:000078FA                 cmp     ebp, esp
.text:000078FC                 call    __RTC_CheckEsp
.text:00007901                 mov     esp, ebp
.text:00007903                 pop     ebp
.text:00007904                 retn
.text:00007904 _term_invalidate endp
.text:00007904
.text:00007904 ; ---------------------------------------------------------------------------
.text:00007905                 db 7 dup(0CCh)
.text:0000790C
.text:0000790C ; =============== S U B R O U T I N E =======================================
.text:0000790C
.text:0000790C ; Attributes: bp-based frame
.text:0000790C
.text:0000790C                 public _term_paint
.text:0000790C _term_paint     proc near
.text:0000790C
.text:0000790C var_8           = dword ptr -8
.text:0000790C var_4           = dword ptr -4
.text:0000790C arg_0           = dword ptr  8
.text:0000790C arg_4           = dword ptr  0Ch
.text:0000790C arg_8           = dword ptr  10h
.text:0000790C arg_C           = dword ptr  14h
.text:0000790C arg_10          = dword ptr  18h
.text:0000790C arg_14          = dword ptr  1Ch
.text:0000790C arg_18          = dword ptr  20h
.text:0000790C
.text:0000790C                 push    ebp
.text:0000790D                 mov     ebp, esp
.text:0000790F                 sub     esp, 8
.text:00007912                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007919                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007920                 cmp     [ebp+arg_8], 0
.text:00007924                 jge     short loc_792D
.text:00007926                 mov     [ebp+arg_8], 0
.text:0000792D
.text:0000792D loc_792D:                               ; CODE XREF: _term_paint+18j
.text:0000792D                 cmp     [ebp+arg_C], 0
.text:00007931                 jge     short loc_793A
.text:00007933                 mov     [ebp+arg_C], 0
.text:0000793A
.text:0000793A loc_793A:                               ; CODE XREF: _term_paint+25j
.text:0000793A                 mov     eax, [ebp+arg_0]
.text:0000793D                 mov     ecx, [ebp+arg_10]
.text:00007940                 cmp     ecx, [eax+12Ch]
.text:00007946                 jl      short loc_7957
.text:00007948                 mov     edx, [ebp+arg_0]
.text:0000794B                 mov     eax, [edx+12Ch]
.text:00007951                 sub     eax, 1
.text:00007954                 mov     [ebp+arg_10], eax
.text:00007957
.text:00007957 loc_7957:                               ; CODE XREF: _term_paint+3Aj
.text:00007957                 mov     ecx, [ebp+arg_0]
.text:0000795A                 mov     edx, [ebp+arg_14]
.text:0000795D                 cmp     edx, [ecx+128h]
.text:00007963                 jl      short loc_7974
.text:00007965                 mov     eax, [ebp+arg_0]
.text:00007968                 mov     ecx, [eax+128h]
.text:0000796E                 sub     ecx, 1
.text:00007971                 mov     [ebp+arg_14], ecx
.text:00007974
.text:00007974 loc_7974:                               ; CODE XREF: _term_paint+57j
.text:00007974                 mov     edx, [ebp+arg_C]
.text:00007977                 mov     [ebp+var_4], edx
.text:0000797A                 jmp     short loc_7985
.text:0000797C ; ---------------------------------------------------------------------------
.text:0000797C
.text:0000797C loc_797C:                               ; CODE XREF: _term_paint:loc_7A88j
.text:0000797C                 mov     eax, [ebp+var_4]
.text:0000797F                 add     eax, 1
.text:00007982                 mov     [ebp+var_4], eax
.text:00007985
.text:00007985 loc_7985:                               ; CODE XREF: _term_paint+6Ej
.text:00007985                 mov     ecx, [ebp+var_4]
.text:00007988                 cmp     ecx, [ebp+arg_14]
.text:0000798B                 jg      loc_7A8D
.text:00007991                 mov     edx, [ebp+arg_0]
.text:00007994                 mov     eax, [ebp+var_4]
.text:00007997                 cmp     eax, [edx+128h]
.text:0000799D                 jge     loc_7A8D
.text:000079A3                 mov     ecx, [ebp+arg_0]
.text:000079A6                 mov     edx, [ecx+18h]
.text:000079A9                 mov     eax, [ebp+var_4]
.text:000079AC                 mov     ecx, [edx+eax*4]
.text:000079AF                 movzx   edx, word ptr [ecx]
.text:000079B2                 and     edx, 3
.text:000079B5                 jnz     short loc_7A1A
.text:000079B7                 mov     eax, [ebp+arg_8]
.text:000079BA                 mov     [ebp+var_8], eax
.text:000079BD                 jmp     short loc_79C8
.text:000079BF ; ---------------------------------------------------------------------------
.text:000079BF
.text:000079BF loc_79BF:                               ; CODE XREF: _term_paint+10Aj
.text:000079BF                 mov     ecx, [ebp+var_8]
.text:000079C2                 add     ecx, 1
.text:000079C5                 mov     [ebp+var_8], ecx
.text:000079C8
.text:000079C8 loc_79C8:                               ; CODE XREF: _term_paint+B1j
.text:000079C8                 mov     edx, [ebp+var_8]
.text:000079CB                 cmp     edx, [ebp+arg_10]
.text:000079CE                 jg      short loc_7A18
.text:000079D0                 mov     eax, [ebp+arg_0]
.text:000079D3                 mov     ecx, [ebp+var_8]
.text:000079D6                 cmp     ecx, [eax+12Ch]
.text:000079DC                 jge     short loc_7A18
.text:000079DE                 mov     edx, [ebp+arg_0]
.text:000079E1                 mov     eax, [edx+18h]
.text:000079E4                 mov     ecx, [ebp+var_4]
.text:000079E7                 mov     edx, [eax+ecx*4]
.text:000079EA                 mov     eax, [ebp+var_8]
.text:000079ED                 imul    eax, 0Ch
.text:000079F0                 mov     ecx, [edx+14h]
.text:000079F3                 mov     edx, [ecx+eax+4]
.text:000079F7                 or      edx, 3FFFFh
.text:000079FD                 mov     eax, [ebp+arg_0]
.text:00007A00                 mov     ecx, [eax+18h]
.text:00007A03                 mov     eax, [ebp+var_4]
.text:00007A06                 mov     ecx, [ecx+eax*4]
.text:00007A09                 mov     eax, [ebp+var_8]
.text:00007A0C                 imul    eax, 0Ch
.text:00007A0F                 mov     ecx, [ecx+14h]
.text:00007A12                 mov     [ecx+eax+4], edx
.text:00007A16                 jmp     short loc_79BF
.text:00007A18 ; ---------------------------------------------------------------------------
.text:00007A18
.text:00007A18 loc_7A18:                               ; CODE XREF: _term_paint+C2j
.text:00007A18                                         ; _term_paint+D0j
.text:00007A18                 jmp     short loc_7A88
.text:00007A1A ; ---------------------------------------------------------------------------
.text:00007A1A
.text:00007A1A loc_7A1A:                               ; CODE XREF: _term_paint+A9j
.text:00007A1A                 mov     eax, [ebp+arg_8]
.text:00007A1D                 cdq
.text:00007A1E                 sub     eax, edx
.text:00007A20                 sar     eax, 1
.text:00007A22                 mov     [ebp+var_8], eax
.text:00007A25                 jmp     short loc_7A30
.text:00007A27 ; ---------------------------------------------------------------------------
.text:00007A27
.text:00007A27 loc_7A27:                               ; CODE XREF: _term_paint+17Aj
.text:00007A27                 mov     edx, [ebp+var_8]
.text:00007A2A                 add     edx, 1
.text:00007A2D                 mov     [ebp+var_8], edx
.text:00007A30
.text:00007A30 loc_7A30:                               ; CODE XREF: _term_paint+119j
.text:00007A30                 mov     eax, [ebp+arg_10]
.text:00007A33                 cdq
.text:00007A34                 sub     eax, edx
.text:00007A36                 sar     eax, 1
.text:00007A38                 add     eax, 1
.text:00007A3B                 cmp     [ebp+var_8], eax
.text:00007A3E                 jg      short loc_7A88
.text:00007A40                 mov     eax, [ebp+arg_0]
.text:00007A43                 mov     ecx, [ebp+var_8]
.text:00007A46                 cmp     ecx, [eax+12Ch]
.text:00007A4C                 jge     short loc_7A88
.text:00007A4E                 mov     edx, [ebp+arg_0]
.text:00007A51                 mov     eax, [edx+18h]
.text:00007A54                 mov     ecx, [ebp+var_4]
.text:00007A57                 mov     edx, [eax+ecx*4]
.text:00007A5A                 mov     eax, [ebp+var_8]
.text:00007A5D                 imul    eax, 0Ch
.text:00007A60                 mov     ecx, [edx+14h]
.text:00007A63                 mov     edx, [ecx+eax+4]
.text:00007A67                 or      edx, 3FFFFh
.text:00007A6D                 mov     eax, [ebp+arg_0]
.text:00007A70                 mov     ecx, [eax+18h]
.text:00007A73                 mov     eax, [ebp+var_4]
.text:00007A76                 mov     ecx, [ecx+eax*4]
.text:00007A79                 mov     eax, [ebp+var_8]
.text:00007A7C                 imul    eax, 0Ch
.text:00007A7F                 mov     ecx, [ecx+14h]
.text:00007A82                 mov     [ecx+eax+4], edx
.text:00007A86                 jmp     short loc_7A27
.text:00007A88 ; ---------------------------------------------------------------------------
.text:00007A88
.text:00007A88 loc_7A88:                               ; CODE XREF: _term_paint:loc_7A18j
.text:00007A88                                         ; _term_paint+132j ...
.text:00007A88                 jmp     loc_797C
.text:00007A8D ; ---------------------------------------------------------------------------
.text:00007A8D
.text:00007A8D loc_7A8D:                               ; CODE XREF: _term_paint+7Fj
.text:00007A8D                                         ; _term_paint+91j
.text:00007A8D                 cmp     [ebp+arg_18], 0
.text:00007A91                 jz      short loc_7AA7
.text:00007A93                 push    0
.text:00007A95                 mov     edx, [ebp+arg_4]
.text:00007A98                 push    edx
.text:00007A99                 mov     eax, [ebp+arg_0]
.text:00007A9C                 push    eax
.text:00007A9D                 call    _do_paint
.text:00007AA2                 add     esp, 0Ch
.text:00007AA5                 jmp     short loc_7AB3
.text:00007AA7 ; ---------------------------------------------------------------------------
.text:00007AA7
.text:00007AA7 loc_7AA7:                               ; CODE XREF: _term_paint+185j
.text:00007AA7                 mov     ecx, [ebp+arg_0]
.text:00007AAA                 push    ecx
.text:00007AAB                 call    _term_schedule_update
.text:00007AB0                 add     esp, 4
.text:00007AB3
.text:00007AB3 loc_7AB3:                               ; CODE XREF: _term_paint+199j
.text:00007AB3                 add     esp, 8
.text:00007AB6                 cmp     ebp, esp
.text:00007AB8                 call    __RTC_CheckEsp
.text:00007ABD                 mov     esp, ebp
.text:00007ABF                 pop     ebp
.text:00007AC0                 retn
.text:00007AC0 _term_paint     endp
.text:00007AC0
.text:00007AC0 ; ---------------------------------------------------------------------------
.text:00007AC1                 db 0Bh dup(0CCh)
.text:00007ACC
.text:00007ACC ; =============== S U B R O U T I N E =======================================
.text:00007ACC
.text:00007ACC ; Attributes: bp-based frame
.text:00007ACC
.text:00007ACC                 public _term_scroll
.text:00007ACC _term_scroll    proc near               ; CODE XREF: _term_scroll_to_selection+ABp
.text:00007ACC                                         ; _term_mouse+88p ...
.text:00007ACC
.text:00007ACC var_C           = dword ptr -0Ch
.text:00007ACC var_8           = dword ptr -8
.text:00007ACC var_4           = dword ptr -4
.text:00007ACC arg_0           = dword ptr  8
.text:00007ACC arg_4           = dword ptr  0Ch
.text:00007ACC arg_8           = dword ptr  10h
.text:00007ACC
.text:00007ACC                 push    ebp
.text:00007ACD                 mov     ebp, esp
.text:00007ACF                 sub     esp, 0Ch
.text:00007AD2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00007AD9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007AE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007AE7                 mov     eax, [ebp+arg_0]
.text:00007AEA                 push    eax
.text:00007AEB                 call    _sblines
.text:00007AF0                 add     esp, 4
.text:00007AF3                 neg     eax
.text:00007AF5                 mov     [ebp+var_4], eax
.text:00007AF8                 cmp     [ebp+arg_4], 0
.text:00007AFC                 jge     short loc_7B07
.text:00007AFE                 mov     [ebp+var_8], 0
.text:00007B05                 jmp     short loc_7B24
.text:00007B07 ; ---------------------------------------------------------------------------
.text:00007B07
.text:00007B07 loc_7B07:                               ; CODE XREF: _term_scroll+30j
.text:00007B07                 cmp     [ebp+arg_4], 0
.text:00007B0B                 jle     short loc_7B15
.text:00007B0D                 mov     ecx, [ebp+var_4]
.text:00007B10                 mov     [ebp+var_C], ecx
.text:00007B13                 jmp     short loc_7B1E
.text:00007B15 ; ---------------------------------------------------------------------------
.text:00007B15
.text:00007B15 loc_7B15:                               ; CODE XREF: _term_scroll+3Fj
.text:00007B15                 mov     edx, [ebp+arg_0]
.text:00007B18                 mov     eax, [edx+10h]
.text:00007B1B                 mov     [ebp+var_C], eax
.text:00007B1E
.text:00007B1E loc_7B1E:                               ; CODE XREF: _term_scroll+47j
.text:00007B1E                 mov     ecx, [ebp+var_C]
.text:00007B21                 mov     [ebp+var_8], ecx
.text:00007B24
.text:00007B24 loc_7B24:                               ; CODE XREF: _term_scroll+39j
.text:00007B24                 mov     edx, [ebp+var_8]
.text:00007B27                 add     edx, [ebp+arg_8]
.text:00007B2A                 mov     eax, [ebp+arg_0]
.text:00007B2D                 mov     [eax+10h], edx
.text:00007B30                 mov     ecx, [ebp+arg_0]
.text:00007B33                 mov     edx, [ecx+10h]
.text:00007B36                 cmp     edx, [ebp+var_4]
.text:00007B39                 jge     short loc_7B44
.text:00007B3B                 mov     eax, [ebp+arg_0]
.text:00007B3E                 mov     ecx, [ebp+var_4]
.text:00007B41                 mov     [eax+10h], ecx
.text:00007B44
.text:00007B44 loc_7B44:                               ; CODE XREF: _term_scroll+6Dj
.text:00007B44                 mov     edx, [ebp+arg_0]
.text:00007B47                 cmp     dword ptr [edx+10h], 0
.text:00007B4B                 jle     short loc_7B57
.text:00007B4D                 mov     eax, [ebp+arg_0]
.text:00007B50                 mov     dword ptr [eax+10h], 0
.text:00007B57
.text:00007B57 loc_7B57:                               ; CODE XREF: _term_scroll+7Fj
.text:00007B57                 mov     ecx, [ebp+arg_0]
.text:00007B5A                 push    ecx
.text:00007B5B                 call    _update_sbar
.text:00007B60                 add     esp, 4
.text:00007B63                 mov     edx, [ebp+arg_0]
.text:00007B66                 push    edx
.text:00007B67                 call    _term_update
.text:00007B6C                 add     esp, 4
.text:00007B6F                 add     esp, 0Ch
.text:00007B72                 cmp     ebp, esp
.text:00007B74                 call    __RTC_CheckEsp
.text:00007B79                 mov     esp, ebp
.text:00007B7B                 pop     ebp
.text:00007B7C                 retn
.text:00007B7C _term_scroll    endp
.text:00007B7C
.text:00007B7C ; ---------------------------------------------------------------------------
.text:00007B7D                 db 0Fh dup(0CCh)
.text:00007B8C
.text:00007B8C ; =============== S U B R O U T I N E =======================================
.text:00007B8C
.text:00007B8C ; Attributes: bp-based frame
.text:00007B8C
.text:00007B8C                 public _term_scroll_to_selection
.text:00007B8C _term_scroll_to_selection proc near
.text:00007B8C
.text:00007B8C var_18          = dword ptr -18h
.text:00007B8C var_14          = dword ptr -14h
.text:00007B8C var_10          = dword ptr -10h
.text:00007B8C var_C           = dword ptr -0Ch
.text:00007B8C var_8           = dword ptr -8
.text:00007B8C var_4           = dword ptr -4
.text:00007B8C arg_0           = dword ptr  8
.text:00007B8C arg_4           = dword ptr  0Ch
.text:00007B8C
.text:00007B8C                 push    ebp
.text:00007B8D                 mov     ebp, esp
.text:00007B8F                 sub     esp, 18h
.text:00007B92                 mov     eax, 0CCCCCCCCh
.text:00007B97                 mov     [ebp+var_18], eax
.text:00007B9A                 mov     [ebp+var_14], eax
.text:00007B9D                 mov     [ebp+var_10], eax
.text:00007BA0                 mov     [ebp+var_C], eax
.text:00007BA3                 mov     [ebp+var_8], eax
.text:00007BA6                 mov     [ebp+var_4], eax
.text:00007BA9                 mov     eax, [ebp+arg_0]
.text:00007BAC                 push    eax
.text:00007BAD                 call    _sblines
.text:00007BB2                 add     esp, 4
.text:00007BB5                 neg     eax
.text:00007BB7                 mov     [ebp+var_18], eax
.text:00007BBA                 mov     ecx, [ebp+arg_0]
.text:00007BBD                 cmp     dword ptr [ecx+0E48h], 3
.text:00007BC4                 jz      short loc_7BC8
.text:00007BC6                 jmp     short loc_7C3F
.text:00007BC8 ; ---------------------------------------------------------------------------
.text:00007BC8
.text:00007BC8 loc_7BC8:                               ; CODE XREF: _term_scroll_to_selection+38j
.text:00007BC8                 cmp     [ebp+arg_4], 0
.text:00007BCC                 jz      short loc_7BE5
.text:00007BCE                 mov     edx, [ebp+arg_0]
.text:00007BD1                 mov     eax, [edx+0E5Ch]
.text:00007BD7                 mov     ecx, [edx+0E60h]
.text:00007BDD                 mov     [ebp+var_C], eax
.text:00007BE0                 mov     [ebp+var_8], ecx
.text:00007BE3                 jmp     short loc_7BFA
.text:00007BE5 ; ---------------------------------------------------------------------------
.text:00007BE5
.text:00007BE5 loc_7BE5:                               ; CODE XREF: _term_scroll_to_selection+40j
.text:00007BE5                 mov     edx, [ebp+arg_0]
.text:00007BE8                 mov     eax, [edx+0E54h]
.text:00007BEE                 mov     ecx, [edx+0E58h]
.text:00007BF4                 mov     [ebp+var_C], eax
.text:00007BF7                 mov     [ebp+var_8], ecx
.text:00007BFA
.text:00007BFA loc_7BFA:                               ; CODE XREF: _term_scroll_to_selection+57j
.text:00007BFA                 mov     edx, [ebp+arg_0]
.text:00007BFD                 mov     eax, [edx+128h]
.text:00007C03                 cdq
.text:00007C04                 sub     eax, edx
.text:00007C06                 sar     eax, 1
.text:00007C08                 mov     ecx, [ebp+var_C]
.text:00007C0B                 sub     ecx, eax
.text:00007C0D                 mov     [ebp+var_14], ecx
.text:00007C10                 mov     edx, [ebp+var_14]
.text:00007C13                 cmp     edx, [ebp+var_18]
.text:00007C16                 jge     short loc_7C20
.text:00007C18                 mov     eax, [ebp+var_18]
.text:00007C1B                 mov     [ebp+var_14], eax
.text:00007C1E                 jmp     short loc_7C2D
.text:00007C20 ; ---------------------------------------------------------------------------
.text:00007C20
.text:00007C20 loc_7C20:                               ; CODE XREF: _term_scroll_to_selection+8Aj
.text:00007C20                 cmp     [ebp+var_14], 0
.text:00007C24                 jle     short loc_7C2D
.text:00007C26                 mov     [ebp+var_14], 0
.text:00007C2D
.text:00007C2D loc_7C2D:                               ; CODE XREF: _term_scroll_to_selection+92j
.text:00007C2D                                         ; _term_scroll_to_selection+98j
.text:00007C2D                 mov     ecx, [ebp+var_14]
.text:00007C30                 push    ecx
.text:00007C31                 push    0FFFFFFFFh
.text:00007C33                 mov     edx, [ebp+arg_0]
.text:00007C36                 push    edx
.text:00007C37                 call    _term_scroll
.text:00007C3C                 add     esp, 0Ch
.text:00007C3F
.text:00007C3F loc_7C3F:                               ; CODE XREF: _term_scroll_to_selection+3Aj
.text:00007C3F                 push    edx
.text:00007C40                 mov     ecx, ebp
.text:00007C42                 push    eax
.text:00007C43                 lea     edx, $LN11_0
.text:00007C49                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00007C4E                 pop     eax
.text:00007C4F                 pop     edx
.text:00007C50                 add     esp, 18h
.text:00007C53                 cmp     ebp, esp
.text:00007C55                 call    __RTC_CheckEsp
.text:00007C5A                 mov     esp, ebp
.text:00007C5C                 pop     ebp
.text:00007C5D                 retn
.text:00007C5D _term_scroll_to_selection endp
.text:00007C5D
.text:00007C5D ; ---------------------------------------------------------------------------
.text:00007C5E                 align 10h
.text:00007C60 $LN11_0         dd 1                    ; DATA XREF: _term_scroll_to_selection+B7o
.text:00007C64                 dd offset $LN10_0
.text:00007C68 $LN10_0         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00007C64o
.text:00007C70                 dd offset $LN9_5        ; "target"
.text:00007C74 $LN9_5          db 'target',0           ; DATA XREF: .text:00007C70o
.text:00007C7B                 align 4
.text:00007C7C
.text:00007C7C ; =============== S U B R O U T I N E =======================================
.text:00007C7C
.text:00007C7C ; Attributes: bp-based frame
.text:00007C7C
.text:00007C7C                 public _term_copyall
.text:00007C7C _term_copyall   proc near
.text:00007C7C
.text:00007C7C var_24          = dword ptr -24h
.text:00007C7C var_20          = dword ptr -20h
.text:00007C7C var_1C          = dword ptr -1Ch
.text:00007C7C var_18          = dword ptr -18h
.text:00007C7C var_14          = dword ptr -14h
.text:00007C7C var_10          = dword ptr -10h
.text:00007C7C var_C           = dword ptr -0Ch
.text:00007C7C var_8           = dword ptr -8
.text:00007C7C var_4           = dword ptr -4
.text:00007C7C arg_0           = dword ptr  8
.text:00007C7C
.text:00007C7C                 push    ebp
.text:00007C7D                 mov     ebp, esp
.text:00007C7F                 sub     esp, 24h
.text:00007C82                 mov     eax, 0CCCCCCCCh
.text:00007C87                 mov     [ebp+var_24], eax
.text:00007C8A                 mov     [ebp+var_20], eax
.text:00007C8D                 mov     [ebp+var_1C], eax
.text:00007C90                 mov     [ebp+var_18], eax
.text:00007C93                 mov     [ebp+var_14], eax
.text:00007C96                 mov     [ebp+var_10], eax
.text:00007C99                 mov     [ebp+var_C], eax
.text:00007C9C                 mov     [ebp+var_8], eax
.text:00007C9F                 mov     [ebp+var_4], eax
.text:00007CA2                 mov     eax, [ebp+arg_0]
.text:00007CA5                 mov     ecx, [eax+8]
.text:00007CA8                 mov     [ebp+var_24], ecx
.text:00007CAB                 mov     edx, [ebp+arg_0]
.text:00007CAE                 push    edx
.text:00007CAF                 call    _sblines
.text:00007CB4                 add     esp, 4
.text:00007CB7                 neg     eax
.text:00007CB9                 mov     [ebp+var_C], eax
.text:00007CBC                 mov     [ebp+var_8], 0
.text:00007CC3                 mov     eax, [ebp+var_24]
.text:00007CC6                 push    eax
.text:00007CC7                 mov     ecx, [ebp+arg_0]
.text:00007CCA                 push    ecx
.text:00007CCB                 call    _find_last_nonempty_line
.text:00007CD0                 add     esp, 8
.text:00007CD3                 mov     [ebp+var_1C], eax
.text:00007CD6                 mov     edx, [ebp+arg_0]
.text:00007CD9                 mov     eax, [edx+12Ch]
.text:00007CDF                 mov     [ebp+var_18], eax
.text:00007CE2                 push    1
.text:00007CE4                 push    0
.text:00007CE6                 mov     ecx, [ebp+var_18]
.text:00007CE9                 push    ecx
.text:00007CEA                 mov     edx, [ebp+var_1C]
.text:00007CED                 push    edx
.text:00007CEE                 mov     eax, [ebp+var_8]
.text:00007CF1                 push    eax
.text:00007CF2                 mov     ecx, [ebp+var_C]
.text:00007CF5                 push    ecx
.text:00007CF6                 mov     edx, [ebp+arg_0]
.text:00007CF9                 push    edx
.text:00007CFA                 call    _clipme
.text:00007CFF                 add     esp, 1Ch
.text:00007D02                 push    edx
.text:00007D03                 mov     ecx, ebp
.text:00007D05                 push    eax
.text:00007D06                 lea     edx, $LN6_2
.text:00007D0C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00007D11                 pop     eax
.text:00007D12                 pop     edx
.text:00007D13                 add     esp, 24h
.text:00007D16                 cmp     ebp, esp
.text:00007D18                 call    __RTC_CheckEsp
.text:00007D1D                 mov     esp, ebp
.text:00007D1F                 pop     ebp
.text:00007D20                 retn
.text:00007D20 _term_copyall   endp
.text:00007D20
.text:00007D20 ; ---------------------------------------------------------------------------
.text:00007D21                 align 4
.text:00007D24 $LN6_2          dd 2                    ; DATA XREF: _term_copyall+8Ao
.text:00007D28                 dd offset $LN5
.text:00007D2C $LN5            dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00007D28o
.text:00007D34                 dd offset $LN3          ; "top"
.text:00007D38                 dd 0FFFFFFE4h, 8
.text:00007D40                 dd offset $LN4          ; "bottom"
.text:00007D44 $LN4            db 'bottom',0           ; DATA XREF: .text:00007D40o
.text:00007D4B $LN3            db 'top',0              ; DATA XREF: .text:00007D34o
.text:00007D4F                 db 0Dh dup(0CCh)
.text:00007D5C
.text:00007D5C ; =============== S U B R O U T I N E =======================================
.text:00007D5C
.text:00007D5C ; Attributes: bp-based frame
.text:00007D5C
.text:00007D5C _clipme         proc near               ; CODE XREF: _term_copyall+7Ep
.text:00007D5C                                         ; _term_mouse+A5Fp
.text:00007D5C
.text:00007D5C var_B4          = dword ptr -0B4h
.text:00007D5C var_B0          = dword ptr -0B0h
.text:00007D5C var_AC          = dword ptr -0ACh
.text:00007D5C var_A8          = dword ptr -0A8h
.text:00007D5C var_A4          = dword ptr -0A4h
.text:00007D5C var_A0          = dword ptr -0A0h
.text:00007D5C var_9C          = dword ptr -9Ch
.text:00007D5C Src             = byte ptr -94h
.text:00007D5C var_84          = byte ptr -84h
.text:00007D5C var_83          = byte ptr -83h
.text:00007D5C var_7C          = dword ptr -7Ch
.text:00007D5C var_78          = dword ptr -78h
.text:00007D5C var_74          = dword ptr -74h
.text:00007D5C var_70          = dword ptr -70h
.text:00007D5C Dst             = word ptr -68h
.text:00007D5C var_66          = word ptr -66h
.text:00007D5C var_64          = word ptr -64h
.text:00007D5C var_40          = dword ptr -40h
.text:00007D5C var_3C          = dword ptr -3Ch
.text:00007D5C var_34          = dword ptr -34h
.text:00007D5C var_30          = dword ptr -30h
.text:00007D5C var_2C          = dword ptr -2Ch
.text:00007D5C var_28          = dword ptr -28h
.text:00007D5C var_20          = dword ptr -20h
.text:00007D5C var_1C          = dword ptr -1Ch
.text:00007D5C var_18          = dword ptr -18h
.text:00007D5C var_14          = dword ptr -14h
.text:00007D5C var_10          = dword ptr -10h
.text:00007D5C var_C           = dword ptr -0Ch
.text:00007D5C var_4           = dword ptr -4
.text:00007D5C arg_0           = dword ptr  8
.text:00007D5C arg_4           = dword ptr  0Ch
.text:00007D5C arg_8           = dword ptr  10h
.text:00007D5C arg_C           = dword ptr  14h
.text:00007D5C arg_10          = dword ptr  18h
.text:00007D5C arg_14          = dword ptr  1Ch
.text:00007D5C arg_18          = dword ptr  20h
.text:00007D5C
.text:00007D5C                 push    ebp
.text:00007D5D                 mov     ebp, esp
.text:00007D5F                 sub     esp, 0B4h
.text:00007D65                 push    edi
.text:00007D66                 lea     edi, [ebp+var_B4]
.text:00007D6C                 mov     ecx, 2Dh ; '-'
.text:00007D71                 mov     eax, 0CCCCCCCCh
.text:00007D76                 rep stosd
.text:00007D78                 mov     eax, dword ptr ds:___security_cookie
.text:00007D7D                 xor     eax, ebp
.text:00007D7F                 mov     [ebp+var_4], eax
.text:00007D82                 mov     [ebp+var_20], 1400h
.text:00007D89                 mov     [ebp+var_1C], 0
.text:00007D90                 push    2
.text:00007D92                 mov     eax, [ebp+var_20]
.text:00007D95                 push    eax
.text:00007D96                 call    _safemalloc
.text:00007D9B                 add     esp, 8
.text:00007D9E                 mov     [ebp+var_18], eax
.text:00007DA1                 mov     ecx, [ebp+var_18]
.text:00007DA4                 mov     [ebp+var_14], ecx
.text:00007DA7                 push    4
.text:00007DA9                 mov     edx, [ebp+var_20]
.text:00007DAC                 push    edx
.text:00007DAD                 call    _safemalloc
.text:00007DB2                 add     esp, 8
.text:00007DB5                 mov     [ebp+var_10], eax
.text:00007DB8                 mov     eax, [ebp+var_10]
.text:00007DBB                 mov     [ebp+var_C], eax
.text:00007DBE                 mov     ecx, [ebp+arg_8]
.text:00007DC1                 mov     [ebp+var_28], ecx
.text:00007DC4
.text:00007DC4 loc_7DC4:                               ; CODE XREF: _clipme+619j
.text:00007DC4                 mov     edx, [ebp+arg_4]
.text:00007DC7                 cmp     edx, [ebp+arg_C]
.text:00007DCA                 jl      short loc_7DE4
.text:00007DCC                 mov     eax, [ebp+arg_4]
.text:00007DCF                 cmp     eax, [ebp+arg_C]
.text:00007DD2                 jnz     loc_837A
.text:00007DD8                 mov     ecx, [ebp+arg_8]
.text:00007DDB                 cmp     ecx, [ebp+arg_10]
.text:00007DDE                 jge     loc_837A
.text:00007DE4
.text:00007DE4 loc_7DE4:                               ; CODE XREF: _clipme+6Ej
.text:00007DE4                 mov     [ebp+var_30], 0
.text:00007DEB                 push    0
.text:00007DED                 push    153Ah
.text:00007DF2                 mov     edx, [ebp+arg_4]
.text:00007DF5                 push    edx
.text:00007DF6                 mov     eax, [ebp+arg_0]
.text:00007DF9                 push    eax
.text:00007DFA                 call    _lineptr
.text:00007DFF                 add     esp, 10h
.text:00007E02                 mov     [ebp+var_34], eax
.text:00007E05                 mov     ecx, [ebp+arg_4]
.text:00007E08                 mov     [ebp+var_40], ecx
.text:00007E0B                 mov     edx, [ebp+arg_0]
.text:00007E0E                 mov     eax, [edx+12Ch]
.text:00007E14                 mov     [ebp+var_3C], eax
.text:00007E17                 mov     ecx, [ebp+var_34]
.text:00007E1A                 movzx   edx, word ptr [ecx]
.text:00007E1D                 and     edx, 10h
.text:00007E20                 jnz     loc_7F12
.text:00007E26
.text:00007E26 loc_7E26:                               ; CODE XREF: _clipme:loc_7EECj
.text:00007E26                 cmp     [ebp+var_3C], 0
.text:00007E2A                 jz      loc_7EF1
.text:00007E30                 mov     eax, [ebp+var_3C]
.text:00007E33                 sub     eax, 1
.text:00007E36                 imul    eax, 0Ch
.text:00007E39                 mov     ecx, [ebp+var_34]
.text:00007E3C                 mov     edx, [ecx+14h]
.text:00007E3F                 cmp     dword ptr [eax+edx], 20h ; ' '
.text:00007E43                 jz      short loc_7E84
.text:00007E45                 mov     eax, [ebp+var_3C]
.text:00007E48                 sub     eax, 1
.text:00007E4B                 imul    eax, 0Ch
.text:00007E4E                 mov     ecx, [ebp+var_34]
.text:00007E51                 mov     edx, [ecx+14h]
.text:00007E54                 mov     eax, [edx+eax]
.text:00007E57                 and     eax, 0FFFFFC00h
.text:00007E5C                 cmp     eax, 0D800h
.text:00007E61                 jnz     loc_7EF1
.text:00007E67                 mov     ecx, [ebp+var_3C]
.text:00007E6A                 sub     ecx, 1
.text:00007E6D                 imul    ecx, 0Ch
.text:00007E70                 mov     edx, [ebp+var_34]
.text:00007E73                 mov     eax, [edx+14h]
.text:00007E76                 mov     ecx, [eax+ecx]
.text:00007E79                 and     ecx, 0FFh
.text:00007E7F                 cmp     ecx, 20h ; ' '
.text:00007E82                 jnz     short loc_7EF1
.text:00007E84
.text:00007E84 loc_7E84:                               ; CODE XREF: _clipme+E7j
.text:00007E84                 mov     edx, [ebp+var_3C]
.text:00007E87                 sub     edx, 1
.text:00007E8A                 imul    edx, 0Ch
.text:00007E8D                 mov     eax, [ebp+var_34]
.text:00007E90                 mov     ecx, [eax+14h]
.text:00007E93                 cmp     dword ptr [ecx+edx+8], 0
.text:00007E98                 jnz     short loc_7EF1
.text:00007E9A                 mov     edx, [ebp+arg_4]
.text:00007E9D                 cmp     edx, [ebp+var_40]
.text:00007EA0                 jl      short loc_7EB2
.text:00007EA2                 mov     eax, [ebp+arg_4]
.text:00007EA5                 cmp     eax, [ebp+var_40]
.text:00007EA8                 jnz     short loc_7EF1
.text:00007EAA                 mov     ecx, [ebp+arg_8]
.text:00007EAD                 cmp     ecx, [ebp+var_3C]
.text:00007EB0                 jge     short loc_7EF1
.text:00007EB2
.text:00007EB2 loc_7EB2:                               ; CODE XREF: _clipme+144j
.text:00007EB2                 cmp     [ebp+var_3C], 0
.text:00007EB6                 jnz     short loc_7ED9
.text:00007EB8                 mov     edx, [ebp+arg_0]
.text:00007EBB                 mov     eax, [edx+12Ch]
.text:00007EC1                 mov     [ebp+var_3C], eax
.text:00007EC4                 mov     ecx, [ebp+var_40]
.text:00007EC7                 sub     ecx, 1
.text:00007ECA                 mov     [ebp+var_40], ecx
.text:00007ECD                 mov     [ebp+var_A4], 1
.text:00007ED7                 jmp     short loc_7EEC
.text:00007ED9 ; ---------------------------------------------------------------------------
.text:00007ED9
.text:00007ED9 loc_7ED9:                               ; CODE XREF: _clipme+15Aj
.text:00007ED9                 mov     edx, [ebp+var_3C]
.text:00007EDC                 sub     edx, 1
.text:00007EDF                 mov     [ebp+var_3C], edx
.text:00007EE2                 mov     [ebp+var_A4], 0
.text:00007EEC
.text:00007EEC loc_7EEC:                               ; CODE XREF: _clipme+17Bj
.text:00007EEC                 jmp     loc_7E26
.text:00007EF1 ; ---------------------------------------------------------------------------
.text:00007EF1
.text:00007EF1 loc_7EF1:                               ; CODE XREF: _clipme+CEj
.text:00007EF1                                         ; _clipme+105j ...
.text:00007EF1                 mov     eax, [ebp+var_40]
.text:00007EF4                 cmp     eax, [ebp+arg_C]
.text:00007EF7                 jl      short loc_7F09
.text:00007EF9                 mov     ecx, [ebp+var_40]
.text:00007EFC                 cmp     ecx, [ebp+arg_C]
.text:00007EFF                 jnz     short loc_7F10
.text:00007F01                 mov     edx, [ebp+var_3C]
.text:00007F04                 cmp     edx, [ebp+arg_10]
.text:00007F07                 jge     short loc_7F10
.text:00007F09
.text:00007F09 loc_7F09:                               ; CODE XREF: _clipme+19Bj
.text:00007F09                 mov     [ebp+var_30], 1
.text:00007F10
.text:00007F10 loc_7F10:                               ; CODE XREF: _clipme+1A3j
.text:00007F10                                         ; _clipme+1ABj
.text:00007F10                 jmp     short loc_7F57
.text:00007F12 ; ---------------------------------------------------------------------------
.text:00007F12
.text:00007F12 loc_7F12:                               ; CODE XREF: _clipme+C4j
.text:00007F12                 mov     eax, [ebp+var_34]
.text:00007F15                 movzx   ecx, word ptr [eax]
.text:00007F18                 and     ecx, 20h
.text:00007F1B                 jz      short loc_7F57
.text:00007F1D                 cmp     [ebp+var_3C], 0
.text:00007F21                 jnz     short loc_7F44
.text:00007F23                 mov     edx, [ebp+arg_0]
.text:00007F26                 mov     eax, [edx+12Ch]
.text:00007F2C                 mov     [ebp+var_3C], eax
.text:00007F2F                 mov     ecx, [ebp+var_40]
.text:00007F32                 sub     ecx, 1
.text:00007F35                 mov     [ebp+var_40], ecx
.text:00007F38                 mov     [ebp+var_A8], 1
.text:00007F42                 jmp     short loc_7F57
.text:00007F44 ; ---------------------------------------------------------------------------
.text:00007F44
.text:00007F44 loc_7F44:                               ; CODE XREF: _clipme+1C5j
.text:00007F44                 mov     edx, [ebp+var_3C]
.text:00007F47                 sub     edx, 1
.text:00007F4A                 mov     [ebp+var_3C], edx
.text:00007F4D                 mov     [ebp+var_A8], 0
.text:00007F57
.text:00007F57 loc_7F57:                               ; CODE XREF: _clipme:loc_7F10j
.text:00007F57                                         ; _clipme+1BFj ...
.text:00007F57                 cmp     [ebp+arg_14], 0
.text:00007F5B                 jz      short loc_7F79
.text:00007F5D                 mov     eax, [ebp+var_3C]
.text:00007F60                 cmp     eax, [ebp+arg_10]
.text:00007F63                 jle     short loc_7F6B
.text:00007F65                 mov     ecx, [ebp+arg_10]
.text:00007F68                 mov     [ebp+var_3C], ecx
.text:00007F6B
.text:00007F6B loc_7F6B:                               ; CODE XREF: _clipme+207j
.text:00007F6B                 mov     edx, [ebp+arg_4]
.text:00007F6E                 xor     eax, eax
.text:00007F70                 cmp     edx, [ebp+arg_C]
.text:00007F73                 setl    al
.text:00007F76                 mov     [ebp+var_30], eax
.text:00007F79
.text:00007F79 loc_7F79:                               ; CODE XREF: _clipme+1FFj
.text:00007F79                                         ; _clipme+281j ...
.text:00007F79                 mov     ecx, [ebp+arg_4]
.text:00007F7C                 cmp     ecx, [ebp+arg_C]
.text:00007F7F                 jl      short loc_7F99
.text:00007F81                 mov     edx, [ebp+arg_4]
.text:00007F84                 cmp     edx, [ebp+arg_C]
.text:00007F87                 jnz     loc_82F3
.text:00007F8D                 mov     eax, [ebp+arg_8]
.text:00007F90                 cmp     eax, [ebp+arg_10]
.text:00007F93                 jge     loc_82F3
.text:00007F99
.text:00007F99 loc_7F99:                               ; CODE XREF: _clipme+223j
.text:00007F99                 mov     ecx, [ebp+arg_4]
.text:00007F9C                 cmp     ecx, [ebp+var_40]
.text:00007F9F                 jl      short loc_7FB9
.text:00007FA1                 mov     edx, [ebp+arg_4]
.text:00007FA4                 cmp     edx, [ebp+var_40]
.text:00007FA7                 jnz     loc_82F3
.text:00007FAD                 mov     eax, [ebp+arg_8]
.text:00007FB0                 cmp     eax, [ebp+var_3C]
.text:00007FB3                 jge     loc_82F3
.text:00007FB9
.text:00007FB9 loc_7FB9:                               ; CODE XREF: _clipme+243j
.text:00007FB9                 mov     ecx, [ebp+arg_8]
.text:00007FBC                 mov     [ebp+var_78], ecx
.text:00007FBF                 mov     edx, [ebp+var_78]
.text:00007FC2                 imul    edx, 0Ch
.text:00007FC5                 mov     eax, [ebp+var_34]
.text:00007FC8                 mov     ecx, [eax+14h]
.text:00007FCB                 cmp     dword ptr [edx+ecx], 0DFFFh
.text:00007FD2                 jnz     short loc_7FDF
.text:00007FD4                 mov     edx, [ebp+arg_8]
.text:00007FD7                 add     edx, 1
.text:00007FDA                 mov     [ebp+arg_8], edx
.text:00007FDD                 jmp     short loc_7F79
.text:00007FDF ; ---------------------------------------------------------------------------
.text:00007FDF
.text:00007FDF loc_7FDF:                               ; CODE XREF: _clipme+276j
.text:00007FDF                                         ; _clipme:loc_82E0j
.text:00007FDF                 mov     eax, 1
.text:00007FE4                 test    eax, eax
.text:00007FE6                 jz      loc_82E5
.text:00007FEC                 mov     ecx, [ebp+var_78]
.text:00007FEF                 imul    ecx, 0Ch
.text:00007FF2                 mov     edx, [ebp+var_34]
.text:00007FF5                 mov     eax, [edx+14h]
.text:00007FF8                 mov     ecx, [ecx+eax]
.text:00007FFB                 mov     [ebp+var_7C], ecx
.text:00007FFE                 mov     edx, [ebp+var_78]
.text:00008001                 imul    edx, 0Ch
.text:00008004                 mov     eax, [ebp+var_34]
.text:00008007                 mov     ecx, [eax+14h]
.text:0000800A                 mov     edx, [ecx+edx+4]
.text:0000800E                 mov     [ebp+var_2C], edx
.text:00008011                 mov     eax, [ebp+var_7C]
.text:00008014                 and     eax, 0FFFFFF00h
.text:00008019                 mov     [ebp+var_AC], eax
.text:0000801F                 cmp     [ebp+var_AC], 0D800h
.text:00008029                 jz      short loc_8070
.text:0000802B                 cmp     [ebp+var_AC], 0D900h
.text:00008035                 jz      short loc_8045
.text:00008037                 cmp     [ebp+var_AC], 0DA00h
.text:00008041                 jz      short loc_808F
.text:00008043                 jmp     short loc_80A8
.text:00008045 ; ---------------------------------------------------------------------------
.text:00008045
.text:00008045 loc_8045:                               ; CODE XREF: _clipme+2D9j
.text:00008045                 mov     ecx, [ebp+arg_0]
.text:00008048                 cmp     dword ptr [ecx+1154h], 0
.text:0000804F                 jnz     short loc_8070
.text:00008051                 mov     edx, [ebp+arg_0]
.text:00008054                 mov     eax, [edx+1090h]
.text:0000805A                 mov     ecx, [ebp+var_7C]
.text:0000805D                 and     ecx, 0FFh
.text:00008063                 movzx   edx, word ptr [eax+ecx*2+610h]
.text:0000806B                 mov     [ebp+var_7C], edx
.text:0000806E                 jmp     short loc_80A8
.text:00008070 ; ---------------------------------------------------------------------------
.text:00008070
.text:00008070 loc_8070:                               ; CODE XREF: _clipme+2CDj
.text:00008070                                         ; _clipme+2F3j
.text:00008070                 mov     eax, [ebp+arg_0]
.text:00008073                 mov     ecx, [eax+1090h]
.text:00008079                 mov     edx, [ebp+var_7C]
.text:0000807C                 and     edx, 0FFh
.text:00008082                 movzx   eax, word ptr [ecx+edx*2+210h]
.text:0000808A                 mov     [ebp+var_7C], eax
.text:0000808D                 jmp     short loc_80A8
.text:0000808F ; ---------------------------------------------------------------------------
.text:0000808F
.text:0000808F loc_808F:                               ; CODE XREF: _clipme+2E5j
.text:0000808F                 mov     ecx, [ebp+arg_0]
.text:00008092                 mov     edx, [ecx+1090h]
.text:00008098                 mov     eax, [ebp+var_7C]
.text:0000809B                 and     eax, 0FFh
.text:000080A0                 movzx   ecx, word ptr [edx+eax*2+10h]
.text:000080A5                 mov     [ebp+var_7C], ecx
.text:000080A8
.text:000080A8 loc_80A8:                               ; CODE XREF: _clipme+2E7j
.text:000080A8                                         ; _clipme+312j ...
.text:000080A8                 mov     edx, [ebp+var_7C]
.text:000080AB                 and     edx, 0FFFFFF00h
.text:000080B1                 mov     [ebp+var_B0], edx
.text:000080B7                 cmp     [ebp+var_B0], 0F000h
.text:000080C1                 jz      short loc_80F0
.text:000080C3                 cmp     [ebp+var_B0], 0F100h
.text:000080CD                 jz      short loc_80D1
.text:000080CF                 jmp     short loc_810C
.text:000080D1 ; ---------------------------------------------------------------------------
.text:000080D1
.text:000080D1 loc_80D1:                               ; CODE XREF: _clipme+371j
.text:000080D1                 mov     eax, [ebp+arg_0]
.text:000080D4                 mov     ecx, [eax+1090h]
.text:000080DA                 mov     edx, [ebp+var_7C]
.text:000080DD                 and     edx, 0FFh
.text:000080E3                 movzx   eax, word ptr [ecx+edx*2+410h]
.text:000080EB                 mov     [ebp+var_7C], eax
.text:000080EE                 jmp     short loc_810C
.text:000080F0 ; ---------------------------------------------------------------------------
.text:000080F0
.text:000080F0 loc_80F0:                               ; CODE XREF: _clipme+365j
.text:000080F0                 mov     ecx, [ebp+arg_0]
.text:000080F3                 mov     edx, [ecx+1090h]
.text:000080F9                 mov     eax, [ebp+var_7C]
.text:000080FC                 and     eax, 0FFh
.text:00008101                 movzx   ecx, word ptr [edx+eax*2+810h]
.text:00008109                 mov     [ebp+var_7C], ecx
.text:0000810C
.text:0000810C loc_810C:                               ; CODE XREF: _clipme+373j
.text:0000810C                                         ; _clipme+392j
.text:0000810C                 mov     edx, [ebp+var_7C]
.text:0000810F                 and     edx, 0FFh
.text:00008115                 mov     [ebp+var_74], edx
.text:00008118                 cmp     [ebp+var_7C], (offset loc_FFFF+1)
.text:0000811F                 jle     short loc_815F
.text:00008121                 cmp     [ebp+var_7C], 110000h
.text:00008128                 jge     short loc_815F
.text:0000812A                 mov     eax, [ebp+var_7C]
.text:0000812D                 sub     eax, (offset loc_FFFF+1)
.text:00008132                 sar     eax, 0Ah
.text:00008135                 or      eax, 0D800h
.text:0000813A                 mov     [ebp+Dst], ax
.text:0000813E                 mov     ecx, [ebp+var_7C]
.text:00008141                 sub     ecx, (offset loc_FFFF+1)
.text:00008147                 and     ecx, 3FFh
.text:0000814D                 or      ecx, 0DC00h
.text:00008153                 mov     [ebp+var_66], cx
.text:00008157                 xor     edx, edx
.text:00008159                 mov     [ebp+var_64], dx
.text:0000815D                 jmp     short loc_816D
.text:0000815F ; ---------------------------------------------------------------------------
.text:0000815F
.text:0000815F loc_815F:                               ; CODE XREF: _clipme+3C3j
.text:0000815F                                         ; _clipme+3CCj
.text:0000815F                 mov     ax, word ptr [ebp+var_7C]
.text:00008163                 mov     [ebp+Dst], ax
.text:00008167                 xor     ecx, ecx
.text:00008169                 mov     [ebp+var_66], cx
.text:0000816D
.text:0000816D loc_816D:                               ; CODE XREF: _clipme+401j
.text:0000816D                 mov     edx, [ebp+var_7C]
.text:00008170                 and     edx, 0FFFFFE00h
.text:00008176                 cmp     edx, 0F000h
.text:0000817C                 jnz     loc_827F
.text:00008182                 cmp     [ebp+var_74], 20h ; ' '
.text:00008186                 jl      loc_827F
.text:0000818C                 cmp     [ebp+var_74], 7Fh ; ''
.text:00008190                 jz      loc_827F
.text:00008196                 movzx   eax, byte ptr [ebp+var_74]
.text:0000819A                 push    eax
.text:0000819B                 mov     ecx, [ebp+arg_0]
.text:0000819E                 mov     edx, [ecx+1090h]
.text:000081A4                 mov     eax, [edx+8]
.text:000081A7                 push    eax
.text:000081A8                 call    _is_dbcs_leadbyte
.text:000081AD                 add     esp, 8
.text:000081B0                 test    eax, eax
.text:000081B2                 jz      short loc_8215
.text:000081B4                 mov     cl, byte ptr [ebp+var_74]
.text:000081B7                 mov     [ebp+var_84], cl
.text:000081BD                 mov     edx, [ebp+arg_8]
.text:000081C0                 add     edx, 1
.text:000081C3                 imul    edx, 0Ch
.text:000081C6                 mov     eax, [ebp+var_34]
.text:000081C9                 mov     ecx, [eax+14h]
.text:000081CC                 mov     edx, [ecx+edx]
.text:000081CF                 and     edx, 0FFh
.text:000081D5                 mov     [ebp+var_83], dl
.text:000081DB                 push    4
.text:000081DD                 lea     eax, [ebp+Src]
.text:000081E3                 push    eax
.text:000081E4                 push    2
.text:000081E6                 lea     ecx, [ebp+var_84]
.text:000081EC                 push    ecx
.text:000081ED                 push    0
.text:000081EF                 mov     edx, [ebp+arg_0]
.text:000081F2                 mov     eax, [edx+1090h]
.text:000081F8                 mov     ecx, [eax+8]
.text:000081FB                 push    ecx
.text:000081FC                 call    _mb_to_wc
.text:00008201                 add     esp, 18h
.text:00008204                 mov     [ebp+var_9C], eax
.text:0000820A                 mov     edx, [ebp+arg_8]
.text:0000820D                 add     edx, 1
.text:00008210                 mov     [ebp+arg_8], edx
.text:00008213                 jmp     short loc_824D
.text:00008215 ; ---------------------------------------------------------------------------
.text:00008215
.text:00008215 loc_8215:                               ; CODE XREF: _clipme+456j
.text:00008215                 mov     al, byte ptr [ebp+var_74]
.text:00008218                 mov     [ebp+var_84], al
.text:0000821E                 push    4
.text:00008220                 lea     ecx, [ebp+Src]
.text:00008226                 push    ecx
.text:00008227                 push    1
.text:00008229                 lea     edx, [ebp+var_84]
.text:0000822F                 push    edx
.text:00008230                 push    0
.text:00008232                 mov     eax, [ebp+arg_0]
.text:00008235                 mov     ecx, [eax+1090h]
.text:0000823B                 mov     edx, [ecx+8]
.text:0000823E                 push    edx
.text:0000823F                 call    _mb_to_wc
.text:00008244                 add     esp, 18h
.text:00008247                 mov     [ebp+var_9C], eax
.text:0000824D
.text:0000824D loc_824D:                               ; CODE XREF: _clipme+4B7j
.text:0000824D                 cmp     [ebp+var_9C], 0
.text:00008254                 jle     short loc_827F
.text:00008256                 mov     eax, [ebp+var_9C]
.text:0000825C                 shl     eax, 1
.text:0000825E                 push    eax             ; Size
.text:0000825F                 lea     ecx, [ebp+Src]
.text:00008265                 push    ecx             ; Src
.text:00008266                 lea     edx, [ebp+Dst]
.text:00008269                 push    edx             ; Dst
.text:0000826A                 call    _memcpy
.text:0000826F                 add     esp, 0Ch
.text:00008272                 xor     eax, eax
.text:00008274                 mov     ecx, [ebp+var_9C]
.text:0000827A                 mov     [ebp+ecx*2+Dst], ax
.text:0000827F
.text:0000827F loc_827F:                               ; CODE XREF: _clipme+420j
.text:0000827F                                         ; _clipme+42Aj ...
.text:0000827F                 lea     edx, [ebp+Dst]
.text:00008282                 mov     [ebp+var_70], edx
.text:00008285                 jmp     short loc_8290
.text:00008287 ; ---------------------------------------------------------------------------
.text:00008287
.text:00008287 loc_8287:                               ; CODE XREF: _clipme+555j
.text:00008287                 mov     eax, [ebp+var_70]
.text:0000828A                 add     eax, 2
.text:0000828D                 mov     [ebp+var_70], eax
.text:00008290
.text:00008290 loc_8290:                               ; CODE XREF: _clipme+529j
.text:00008290                 mov     ecx, [ebp+var_70]
.text:00008293                 movzx   edx, word ptr [ecx]
.text:00008296                 test    edx, edx
.text:00008298                 jz      short loc_82B3
.text:0000829A                 mov     eax, [ebp+var_2C]
.text:0000829D                 push    eax
.text:0000829E                 mov     ecx, [ebp+var_70]
.text:000082A1                 movzx   edx, word ptr [ecx]
.text:000082A4                 push    edx
.text:000082A5                 lea     eax, [ebp+var_20]
.text:000082A8                 push    eax
.text:000082A9                 call    _clip_addchar
.text:000082AE                 add     esp, 0Ch
.text:000082B1                 jmp     short loc_8287
.text:000082B3 ; ---------------------------------------------------------------------------
.text:000082B3
.text:000082B3 loc_82B3:                               ; CODE XREF: _clipme+53Cj
.text:000082B3                 mov     ecx, [ebp+var_78]
.text:000082B6                 imul    ecx, 0Ch
.text:000082B9                 mov     edx, [ebp+var_34]
.text:000082BC                 mov     eax, [edx+14h]
.text:000082BF                 cmp     dword ptr [eax+ecx+8], 0
.text:000082C4                 jz      short loc_82DE
.text:000082C6                 mov     ecx, [ebp+var_78]
.text:000082C9                 imul    ecx, 0Ch
.text:000082CC                 mov     edx, [ebp+var_34]
.text:000082CF                 mov     eax, [edx+14h]
.text:000082D2                 mov     edx, [ebp+var_78]
.text:000082D5                 add     edx, [eax+ecx+8]
.text:000082D9                 mov     [ebp+var_78], edx
.text:000082DC                 jmp     short loc_82E0
.text:000082DE ; ---------------------------------------------------------------------------
.text:000082DE
.text:000082DE loc_82DE:                               ; CODE XREF: _clipme+568j
.text:000082DE                 jmp     short loc_82E5
.text:000082E0 ; ---------------------------------------------------------------------------
.text:000082E0
.text:000082E0 loc_82E0:                               ; CODE XREF: _clipme+580j
.text:000082E0                 jmp     loc_7FDF
.text:000082E5 ; ---------------------------------------------------------------------------
.text:000082E5
.text:000082E5 loc_82E5:                               ; CODE XREF: _clipme+28Aj
.text:000082E5                                         ; _clipme:loc_82DEj
.text:000082E5                 mov     eax, [ebp+arg_8]
.text:000082E8                 add     eax, 1
.text:000082EB                 mov     [ebp+arg_8], eax
.text:000082EE                 jmp     loc_7F79
.text:000082F3 ; ---------------------------------------------------------------------------
.text:000082F3
.text:000082F3 loc_82F3:                               ; CODE XREF: _clipme+22Bj
.text:000082F3                                         ; _clipme+237j ...
.text:000082F3                 cmp     [ebp+var_30], 0
.text:000082F7                 jz      short loc_833C
.text:000082F9                 mov     [ebp+var_A0], 0
.text:00008303                 jmp     short loc_8314
.text:00008305 ; ---------------------------------------------------------------------------
.text:00008305
.text:00008305 loc_8305:                               ; CODE XREF: _clipme+5DEj
.text:00008305                 mov     ecx, [ebp+var_A0]
.text:0000830B                 add     ecx, 1
.text:0000830E                 mov     [ebp+var_A0], ecx
.text:00008314
.text:00008314 loc_8314:                               ; CODE XREF: _clipme+5A7j
.text:00008314                 cmp     [ebp+var_A0], 2
.text:0000831B                 jnb     short loc_833C
.text:0000831D                 push    0
.text:0000831F                 mov     edx, [ebp+var_A0]
.text:00008325                 movzx   eax, ds:_sel_nl[edx*2]
.text:0000832D                 push    eax
.text:0000832E                 lea     ecx, [ebp+var_20]
.text:00008331                 push    ecx
.text:00008332                 call    _clip_addchar
.text:00008337                 add     esp, 0Ch
.text:0000833A                 jmp     short loc_8305
.text:0000833C ; ---------------------------------------------------------------------------
.text:0000833C
.text:0000833C loc_833C:                               ; CODE XREF: _clipme+59Bj
.text:0000833C                                         ; _clipme+5BFj
.text:0000833C                 mov     edx, [ebp+arg_4]
.text:0000833F                 add     edx, 1
.text:00008342                 mov     [ebp+arg_4], edx
.text:00008345                 cmp     [ebp+arg_14], 0
.text:00008349                 jz      short loc_8356
.text:0000834B                 mov     eax, [ebp+var_28]
.text:0000834E                 mov     [ebp+var_B4], eax
.text:00008354                 jmp     short loc_8360
.text:00008356 ; ---------------------------------------------------------------------------
.text:00008356
.text:00008356 loc_8356:                               ; CODE XREF: _clipme+5EDj
.text:00008356                 mov     [ebp+var_B4], 0
.text:00008360
.text:00008360 loc_8360:                               ; CODE XREF: _clipme+5F8j
.text:00008360                 mov     ecx, [ebp+var_B4]
.text:00008366                 mov     [ebp+arg_8], ecx
.text:00008369                 mov     edx, [ebp+var_34]
.text:0000836C                 push    edx
.text:0000836D                 call    _unlineptr
.text:00008372                 add     esp, 4
.text:00008375                 jmp     loc_7DC4
.text:0000837A ; ---------------------------------------------------------------------------
.text:0000837A
.text:0000837A loc_837A:                               ; CODE XREF: _clipme+76j
.text:0000837A                                         ; _clipme+82j
.text:0000837A                 push    0
.text:0000837C                 push    0
.text:0000837E                 lea     eax, [ebp+var_20]
.text:00008381                 push    eax
.text:00008382                 call    _clip_addchar
.text:00008387                 add     esp, 0Ch
.text:0000838A                 mov     ecx, [ebp+arg_18]
.text:0000838D                 push    ecx
.text:0000838E                 mov     edx, [ebp+var_1C]
.text:00008391                 push    edx
.text:00008392                 mov     eax, [ebp+var_10]
.text:00008395                 push    eax
.text:00008396                 mov     ecx, [ebp+var_18]
.text:00008399                 push    ecx
.text:0000839A                 mov     edx, [ebp+arg_0]
.text:0000839D                 mov     eax, [edx+1088h]
.text:000083A3                 push    eax
.text:000083A4                 call    _write_clip
.text:000083A9                 add     esp, 14h
.text:000083AC                 mov     ecx, [ebp+var_18]
.text:000083AF                 push    ecx
.text:000083B0                 call    _safefree
.text:000083B5                 add     esp, 4
.text:000083B8                 mov     edx, [ebp+var_10]
.text:000083BB                 push    edx
.text:000083BC                 call    _safefree
.text:000083C1                 add     esp, 4
.text:000083C4                 push    edx
.text:000083C5                 mov     ecx, ebp
.text:000083C7                 push    eax
.text:000083C8                 lea     edx, $LN63
.text:000083CE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000083D3                 pop     eax
.text:000083D4                 pop     edx
.text:000083D5                 pop     edi
.text:000083D6                 mov     ecx, [ebp+var_4]
.text:000083D9                 xor     ecx, ebp
.text:000083DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000083E0                 add     esp, 0B4h
.text:000083E6                 cmp     ebp, esp
.text:000083E8                 call    __RTC_CheckEsp
.text:000083ED                 mov     esp, ebp
.text:000083EF                 pop     ebp
.text:000083F0                 retn
.text:000083F0 _clipme         endp
.text:000083F0
.text:000083F0 ; ---------------------------------------------------------------------------
.text:000083F1                 align 4
.text:000083F4 $LN63           dd 5                    ; DATA XREF: _clipme+66Co
.text:000083F8                 dd offset $LN62
.text:000083FC $LN62           dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:000083F8o
.text:00008404                 dd offset $LN57         ; "buf"
.text:00008408                 dd 0FFFFFFC0h, 8
.text:00008410                 dd offset $LN58         ; "nlpos"
.text:00008414                 dd 0FFFFFF98h, 20h
.text:0000841C                 dd offset $LN59         ; "cbuf"
.text:00008420                 dd 0FFFFFF7Ch, 4
.text:00008428                 dd offset $LN60         ; "buf"
.text:0000842C                 dd 0FFFFFF6Ch, 8
.text:00008434                 dd offset $LN61         ; "wbuf"
.text:00008438 $LN61           db 'wbuf',0             ; DATA XREF: .text:00008434o
.text:0000843D $LN60           db 'buf',0              ; DATA XREF: .text:00008428o
.text:00008441 $LN59           db 'cbuf',0             ; DATA XREF: .text:0000841Co
.text:00008446 $LN58           db 'nlpos',0            ; DATA XREF: .text:00008410o
.text:0000844C $LN57           db 'buf',0              ; DATA XREF: .text:00008404o
.text:00008450                 db 0Ch dup(0CCh)
.text:0000845C
.text:0000845C ; =============== S U B R O U T I N E =======================================
.text:0000845C
.text:0000845C ; Attributes: bp-based frame
.text:0000845C
.text:0000845C _clip_addchar   proc near               ; CODE XREF: _clipme+54Dp
.text:0000845C                                         ; _clipme+5D6p ...
.text:0000845C
.text:0000845C arg_0           = dword ptr  8
.text:0000845C arg_4           = word ptr  0Ch
.text:0000845C arg_8           = dword ptr  10h
.text:0000845C
.text:0000845C                 push    ebp
.text:0000845D                 mov     ebp, esp
.text:0000845F                 mov     eax, [ebp+arg_0]
.text:00008462                 mov     ecx, [ebp+arg_0]
.text:00008465                 mov     edx, [eax+4]
.text:00008468                 cmp     edx, [ecx]
.text:0000846A                 jl      short loc_84E0
.text:0000846C                 mov     eax, [ebp+arg_0]
.text:0000846F                 mov     ecx, [eax]
.text:00008471                 add     ecx, 80h ; 'Ç'
.text:00008477                 mov     edx, [ebp+arg_0]
.text:0000847A                 mov     [edx], ecx
.text:0000847C                 push    2
.text:0000847E                 mov     eax, [ebp+arg_0]
.text:00008481                 mov     ecx, [eax]
.text:00008483                 push    ecx
.text:00008484                 mov     edx, [ebp+arg_0]
.text:00008487                 mov     eax, [edx+8]
.text:0000848A                 push    eax
.text:0000848B                 call    _saferealloc
.text:00008490                 add     esp, 0Ch
.text:00008493                 mov     ecx, [ebp+arg_0]
.text:00008496                 mov     [ecx+8], eax
.text:00008499                 mov     edx, [ebp+arg_0]
.text:0000849C                 mov     eax, [edx+4]
.text:0000849F                 mov     ecx, [ebp+arg_0]
.text:000084A2                 mov     edx, [ecx+8]
.text:000084A5                 lea     eax, [edx+eax*2]
.text:000084A8                 mov     ecx, [ebp+arg_0]
.text:000084AB                 mov     [ecx+0Ch], eax
.text:000084AE                 push    4
.text:000084B0                 mov     edx, [ebp+arg_0]
.text:000084B3                 mov     eax, [edx]
.text:000084B5                 push    eax
.text:000084B6                 mov     ecx, [ebp+arg_0]
.text:000084B9                 mov     edx, [ecx+10h]
.text:000084BC                 push    edx
.text:000084BD                 call    _saferealloc
.text:000084C2                 add     esp, 0Ch
.text:000084C5                 mov     ecx, [ebp+arg_0]
.text:000084C8                 mov     [ecx+10h], eax
.text:000084CB                 mov     edx, [ebp+arg_0]
.text:000084CE                 mov     eax, [edx+4]
.text:000084D1                 mov     ecx, [ebp+arg_0]
.text:000084D4                 mov     edx, [ecx+10h]
.text:000084D7                 lea     eax, [edx+eax*4]
.text:000084DA                 mov     ecx, [ebp+arg_0]
.text:000084DD                 mov     [ecx+14h], eax
.text:000084E0
.text:000084E0 loc_84E0:                               ; CODE XREF: _clip_addchar+Ej
.text:000084E0                 mov     edx, [ebp+arg_0]
.text:000084E3                 mov     eax, [edx+0Ch]
.text:000084E6                 mov     cx, [ebp+arg_4]
.text:000084EA                 mov     [eax], cx
.text:000084ED                 mov     edx, [ebp+arg_0]
.text:000084F0                 mov     eax, [edx+0Ch]
.text:000084F3                 add     eax, 2
.text:000084F6                 mov     ecx, [ebp+arg_0]
.text:000084F9                 mov     [ecx+0Ch], eax
.text:000084FC                 mov     edx, [ebp+arg_0]
.text:000084FF                 mov     eax, [edx+14h]
.text:00008502                 mov     ecx, [ebp+arg_8]
.text:00008505                 mov     [eax], ecx
.text:00008507                 mov     edx, [ebp+arg_0]
.text:0000850A                 mov     eax, [edx+14h]
.text:0000850D                 add     eax, 4
.text:00008510                 mov     ecx, [ebp+arg_0]
.text:00008513                 mov     [ecx+14h], eax
.text:00008516                 mov     edx, [ebp+arg_0]
.text:00008519                 mov     eax, [edx+4]
.text:0000851C                 add     eax, 1
.text:0000851F                 mov     ecx, [ebp+arg_0]
.text:00008522                 mov     [ecx+4], eax
.text:00008525                 cmp     ebp, esp
.text:00008527                 call    __RTC_CheckEsp
.text:0000852C                 pop     ebp
.text:0000852D                 retn
.text:0000852D _clip_addchar   endp
.text:0000852D
.text:0000852D ; ---------------------------------------------------------------------------
.text:0000852E                 db 0Eh dup(0CCh)
.text:0000853C
.text:0000853C ; =============== S U B R O U T I N E =======================================
.text:0000853C
.text:0000853C ; Attributes: bp-based frame
.text:0000853C
.text:0000853C                 public _term_do_paste
.text:0000853C _term_do_paste  proc near
.text:0000853C
.text:0000853C var_24          = dword ptr -24h
.text:0000853C var_20          = dword ptr -20h
.text:0000853C Buf1            = dword ptr -1Ch
.text:0000853C var_18          = dword ptr -18h
.text:0000853C var_14          = dword ptr -14h
.text:0000853C var_10          = dword ptr -10h
.text:0000853C var_C           = dword ptr -0Ch
.text:0000853C var_8           = dword ptr -8
.text:0000853C var_4           = dword ptr -4
.text:0000853C arg_0           = dword ptr  8
.text:0000853C
.text:0000853C                 push    ebp
.text:0000853D                 mov     ebp, esp
.text:0000853F                 sub     esp, 24h
.text:00008542                 push    esi
.text:00008543                 mov     eax, 0CCCCCCCCh
.text:00008548                 mov     [ebp+var_24], eax
.text:0000854B                 mov     [ebp+var_20], eax
.text:0000854E                 mov     [ebp+Buf1], eax
.text:00008551                 mov     [ebp+var_18], eax
.text:00008554                 mov     [ebp+var_14], eax
.text:00008557                 mov     [ebp+var_10], eax
.text:0000855A                 mov     [ebp+var_C], eax
.text:0000855D                 mov     [ebp+var_8], eax
.text:00008560                 mov     [ebp+var_4], eax
.text:00008563                 lea     eax, [ebp+var_14]
.text:00008566                 push    eax
.text:00008567                 lea     ecx, [ebp+var_8]
.text:0000856A                 push    ecx
.text:0000856B                 mov     edx, [ebp+arg_0]
.text:0000856E                 mov     eax, [edx+1088h]
.text:00008574                 push    eax
.text:00008575                 call    _get_clip
.text:0000857A                 add     esp, 0Ch
.text:0000857D                 cmp     [ebp+var_8], 0
.text:00008581                 jz      loc_8814
.text:00008587                 cmp     [ebp+var_14], 0
.text:0000858B                 jle     loc_8814
.text:00008591                 mov     ecx, [ebp+arg_0]
.text:00008594                 push    ecx
.text:00008595                 call    _term_seen_key_event
.text:0000859A                 add     esp, 4
.text:0000859D                 mov     edx, [ebp+arg_0]
.text:000085A0                 cmp     dword ptr [edx+1070h], 0
.text:000085A7                 jz      short loc_85BB
.text:000085A9                 mov     eax, [ebp+arg_0]
.text:000085AC                 mov     ecx, [eax+1070h]
.text:000085B2                 push    ecx
.text:000085B3                 call    _safefree
.text:000085B8                 add     esp, 4
.text:000085BB
.text:000085BB loc_85BB:                               ; CODE XREF: _term_do_paste+6Bj
.text:000085BB                 mov     edx, [ebp+arg_0]
.text:000085BE                 mov     dword ptr [edx+1074h], 0
.text:000085C8                 mov     eax, [ebp+arg_0]
.text:000085CB                 mov     dword ptr [eax+1078h], 0
.text:000085D5                 push    2
.text:000085D7                 mov     ecx, [ebp+var_14]
.text:000085DA                 add     ecx, 0Ch
.text:000085DD                 push    ecx
.text:000085DE                 call    _safemalloc
.text:000085E3                 add     esp, 8
.text:000085E6                 mov     edx, [ebp+arg_0]
.text:000085E9                 mov     [edx+1070h], eax
.text:000085EF                 mov     eax, [ebp+arg_0]
.text:000085F2                 cmp     dword ptr [eax+16Ch], 0
.text:000085F9                 jz      short loc_8629
.text:000085FB                 push    0Ch             ; Size
.text:000085FD                 push    offset $SG88354 ; "\x1B[200~"
.text:00008602                 mov     ecx, [ebp+arg_0]
.text:00008605                 mov     edx, [ecx+1070h]
.text:0000860B                 push    edx             ; Dst
.text:0000860C                 call    _memcpy
.text:00008611                 add     esp, 0Ch
.text:00008614                 mov     eax, [ebp+arg_0]
.text:00008617                 mov     ecx, [eax+1074h]
.text:0000861D                 add     ecx, 6
.text:00008620                 mov     edx, [ebp+arg_0]
.text:00008623                 mov     [edx+1074h], ecx
.text:00008629
.text:00008629 loc_8629:                               ; CODE XREF: _term_do_paste+BDj
.text:00008629                 mov     eax, [ebp+var_8]
.text:0000862C                 mov     [ebp+var_20], eax
.text:0000862F                 mov     ecx, [ebp+var_20]
.text:00008632                 mov     [ebp+Buf1], ecx
.text:00008635
.text:00008635 loc_8635:                               ; CODE XREF: _term_do_paste+205j
.text:00008635                 mov     edx, [ebp+var_14]
.text:00008638                 mov     eax, [ebp+var_8]
.text:0000863B                 lea     ecx, [eax+edx*2]
.text:0000863E                 cmp     [ebp+Buf1], ecx
.text:00008641                 jnb     loc_8746
.text:00008647
.text:00008647 loc_8647:                               ; CODE XREF: _term_do_paste+148j
.text:00008647                 mov     edx, [ebp+var_14]
.text:0000864A                 mov     eax, [ebp+var_8]
.text:0000864D                 lea     ecx, [eax+edx*2]
.text:00008650                 cmp     [ebp+Buf1], ecx
.text:00008653                 jnb     short loc_8686
.text:00008655                 mov     edx, [ebp+var_14]
.text:00008658                 mov     eax, [ebp+var_8]
.text:0000865B                 lea     ecx, [eax+edx*2-4]
.text:0000865F                 cmp     [ebp+Buf1], ecx
.text:00008662                 ja      short loc_867B
.text:00008664                 push    4               ; Size
.text:00008666                 push    offset _sel_nl  ; Buf2
.text:0000866B                 mov     edx, [ebp+Buf1]
.text:0000866E                 push    edx             ; Buf1
.text:0000866F                 call    _memcmp
.text:00008674                 add     esp, 0Ch
.text:00008677                 test    eax, eax
.text:00008679                 jz      short loc_8686
.text:0000867B
.text:0000867B loc_867B:                               ; CODE XREF: _term_do_paste+126j
.text:0000867B                 mov     eax, [ebp+Buf1]
.text:0000867E                 add     eax, 2
.text:00008681                 mov     [ebp+Buf1], eax
.text:00008684                 jmp     short loc_8647
.text:00008686 ; ---------------------------------------------------------------------------
.text:00008686
.text:00008686 loc_8686:                               ; CODE XREF: _term_do_paste+117j
.text:00008686                                         ; _term_do_paste+13Dj
.text:00008686                 mov     [ebp+var_24], 0
.text:0000868D                 jmp     short loc_8698
.text:0000868F ; ---------------------------------------------------------------------------
.text:0000868F
.text:0000868F loc_868F:                               ; CODE XREF: _term_do_paste+19Ej
.text:0000868F                 mov     ecx, [ebp+var_24]
.text:00008692                 add     ecx, 1
.text:00008695                 mov     [ebp+var_24], ecx
.text:00008698
.text:00008698 loc_8698:                               ; CODE XREF: _term_do_paste+151j
.text:00008698                 mov     edx, [ebp+Buf1]
.text:0000869B                 sub     edx, [ebp+var_20]
.text:0000869E                 sar     edx, 1
.text:000086A0                 cmp     [ebp+var_24], edx
.text:000086A3                 jge     short loc_86DC
.text:000086A5                 mov     eax, [ebp+arg_0]
.text:000086A8                 mov     ecx, [eax+1074h]
.text:000086AE                 mov     edx, [ebp+arg_0]
.text:000086B1                 mov     eax, [edx+1070h]
.text:000086B7                 mov     edx, [ebp+var_24]
.text:000086BA                 mov     esi, [ebp+var_20]
.text:000086BD                 mov     dx, [esi+edx*2]
.text:000086C1                 mov     [eax+ecx*2], dx
.text:000086C5                 mov     eax, [ebp+arg_0]
.text:000086C8                 mov     ecx, [eax+1074h]
.text:000086CE                 add     ecx, 1
.text:000086D1                 mov     edx, [ebp+arg_0]
.text:000086D4                 mov     [edx+1074h], ecx
.text:000086DA                 jmp     short loc_868F
.text:000086DC ; ---------------------------------------------------------------------------
.text:000086DC
.text:000086DC loc_86DC:                               ; CODE XREF: _term_do_paste+167j
.text:000086DC                 mov     eax, [ebp+var_14]
.text:000086DF                 mov     ecx, [ebp+var_8]
.text:000086E2                 lea     edx, [ecx+eax*2-4]
.text:000086E6                 cmp     [ebp+Buf1], edx
.text:000086E9                 ja      short loc_873B
.text:000086EB                 push    4               ; Size
.text:000086ED                 push    offset _sel_nl  ; Buf2
.text:000086F2                 mov     eax, [ebp+Buf1]
.text:000086F5                 push    eax             ; Buf1
.text:000086F6                 call    _memcmp
.text:000086FB                 add     esp, 0Ch
.text:000086FE                 test    eax, eax
.text:00008700                 jnz     short loc_873B
.text:00008702                 mov     ecx, [ebp+arg_0]
.text:00008705                 mov     edx, [ecx+1074h]
.text:0000870B                 mov     eax, [ebp+arg_0]
.text:0000870E                 mov     ecx, [eax+1070h]
.text:00008714                 mov     eax, 0Dh
.text:00008719                 mov     [ecx+edx*2], ax
.text:0000871D                 mov     ecx, [ebp+arg_0]
.text:00008720                 mov     edx, [ecx+1074h]
.text:00008726                 add     edx, 1
.text:00008729                 mov     eax, [ebp+arg_0]
.text:0000872C                 mov     [eax+1074h], edx
.text:00008732                 mov     ecx, [ebp+Buf1]
.text:00008735                 add     ecx, 4
.text:00008738                 mov     [ebp+Buf1], ecx
.text:0000873B
.text:0000873B loc_873B:                               ; CODE XREF: _term_do_paste+1ADj
.text:0000873B                                         ; _term_do_paste+1C4j
.text:0000873B                 mov     edx, [ebp+Buf1]
.text:0000873E                 mov     [ebp+var_20], edx
.text:00008741                 jmp     loc_8635
.text:00008746 ; ---------------------------------------------------------------------------
.text:00008746
.text:00008746 loc_8746:                               ; CODE XREF: _term_do_paste+105j
.text:00008746                 mov     eax, [ebp+arg_0]
.text:00008749                 cmp     dword ptr [eax+16Ch], 0
.text:00008750                 jz      short loc_878C
.text:00008752                 push    0Ch             ; Size
.text:00008754                 push    offset $SG88372 ; "\x1B[201~"
.text:00008759                 mov     ecx, [ebp+arg_0]
.text:0000875C                 mov     edx, [ecx+1074h]
.text:00008762                 mov     eax, [ebp+arg_0]
.text:00008765                 mov     ecx, [eax+1070h]
.text:0000876B                 lea     edx, [ecx+edx*2]
.text:0000876E                 push    edx             ; Dst
.text:0000876F                 call    _memcpy
.text:00008774                 add     esp, 0Ch
.text:00008777                 mov     eax, [ebp+arg_0]
.text:0000877A                 mov     ecx, [eax+1074h]
.text:00008780                 add     ecx, 6
.text:00008783                 mov     edx, [ebp+arg_0]
.text:00008786                 mov     [edx+1074h], ecx
.text:0000878C
.text:0000878C loc_878C:                               ; CODE XREF: _term_do_paste+214j
.text:0000878C                 mov     eax, [ebp+arg_0]
.text:0000878F                 cmp     dword ptr [eax+1074h], 100h
.text:00008799                 jge     short loc_8814
.text:0000879B                 mov     ecx, [ebp+arg_0]
.text:0000879E                 cmp     dword ptr [ecx+1084h], 0
.text:000087A5                 jz      short loc_87CF
.text:000087A7                 push    0
.text:000087A9                 mov     edx, [ebp+arg_0]
.text:000087AC                 mov     eax, [edx+1074h]
.text:000087B2                 push    eax
.text:000087B3                 mov     ecx, [ebp+arg_0]
.text:000087B6                 mov     edx, [ecx+1070h]
.text:000087BC                 push    edx
.text:000087BD                 mov     eax, [ebp+arg_0]
.text:000087C0                 mov     ecx, [eax+1084h]
.text:000087C6                 push    ecx
.text:000087C7                 call    _luni_send
.text:000087CC                 add     esp, 10h
.text:000087CF
.text:000087CF loc_87CF:                               ; CODE XREF: _term_do_paste+269j
.text:000087CF                 mov     edx, [ebp+arg_0]
.text:000087D2                 cmp     dword ptr [edx+1070h], 0
.text:000087D9                 jz      short loc_87ED
.text:000087DB                 mov     eax, [ebp+arg_0]
.text:000087DE                 mov     ecx, [eax+1070h]
.text:000087E4                 push    ecx
.text:000087E5                 call    _safefree
.text:000087EA                 add     esp, 4
.text:000087ED
.text:000087ED loc_87ED:                               ; CODE XREF: _term_do_paste+29Dj
.text:000087ED                 mov     edx, [ebp+arg_0]
.text:000087F0                 mov     dword ptr [edx+1070h], 0
.text:000087FA                 mov     eax, [ebp+arg_0]
.text:000087FD                 mov     dword ptr [eax+1074h], 0
.text:00008807                 mov     ecx, [ebp+arg_0]
.text:0000880A                 mov     dword ptr [ecx+1078h], 0
.text:00008814
.text:00008814 loc_8814:                               ; CODE XREF: _term_do_paste+45j
.text:00008814                                         ; _term_do_paste+4Fj ...
.text:00008814                 push    0
.text:00008816                 push    0
.text:00008818                 mov     edx, [ebp+arg_0]
.text:0000881B                 mov     eax, [edx+1088h]
.text:00008821                 push    eax
.text:00008822                 call    _get_clip
.text:00008827                 add     esp, 0Ch
.text:0000882A                 mov     ecx, [ebp+arg_0]
.text:0000882D                 push    ecx
.text:0000882E                 push    offset _term_paste_callback
.text:00008833                 call    _queue_toplevel_callback
.text:00008838                 add     esp, 8
.text:0000883B                 push    edx
.text:0000883C                 mov     ecx, ebp
.text:0000883E                 push    eax
.text:0000883F                 lea     edx, $LN22
.text:00008845                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000884A                 pop     eax
.text:0000884B                 pop     edx
.text:0000884C                 pop     esi
.text:0000884D                 add     esp, 24h
.text:00008850                 cmp     ebp, esp
.text:00008852                 call    __RTC_CheckEsp
.text:00008857                 mov     esp, ebp
.text:00008859                 pop     ebp
.text:0000885A                 retn
.text:0000885A _term_do_paste  endp
.text:0000885A
.text:0000885A ; ---------------------------------------------------------------------------
.text:0000885B                 align 4
.text:0000885C $LN22           dd 2                    ; DATA XREF: _term_do_paste+303o
.text:00008860                 dd offset $LN21
.text:00008864 $LN21           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00008860o
.text:0000886C                 dd offset $LN19         ; "data"
.text:00008870                 dd 0FFFFFFECh, 4
.text:00008878                 dd offset $LN20
.text:0000887C $LN20           dd 6E656Ch              ; DATA XREF: .text:00008878o
.text:00008880 $LN19           db 'data',0             ; DATA XREF: .text:0000886Co
.text:00008885                 db 7 dup(0CCh)
.text:0000888C
.text:0000888C ; =============== S U B R O U T I N E =======================================
.text:0000888C
.text:0000888C ; Attributes: bp-based frame
.text:0000888C
.text:0000888C _term_paste_callback proc near          ; DATA XREF: _term_do_paste+2F2o
.text:0000888C                                         ; _term_paste_callback+110o
.text:0000888C
.text:0000888C var_C           = dword ptr -0Ch
.text:0000888C var_8           = dword ptr -8
.text:0000888C var_4           = dword ptr -4
.text:0000888C arg_0           = dword ptr  8
.text:0000888C
.text:0000888C                 push    ebp
.text:0000888D                 mov     ebp, esp
.text:0000888F                 sub     esp, 0Ch
.text:00008892                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00008899                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000088A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000088A7                 mov     eax, [ebp+arg_0]
.text:000088AA                 mov     [ebp+var_4], eax
.text:000088AD                 mov     ecx, [ebp+var_4]
.text:000088B0                 cmp     dword ptr [ecx+1074h], 0
.text:000088B7                 jnz     short loc_88BE
.text:000088B9                 jmp     loc_89DC
.text:000088BE ; ---------------------------------------------------------------------------
.text:000088BE
.text:000088BE loc_88BE:                               ; CODE XREF: _term_paste_callback+2Bj
.text:000088BE                                         ; _term_paste_callback:loc_89ABj
.text:000088BE                 mov     edx, [ebp+var_4]
.text:000088C1                 mov     eax, [ebp+var_4]
.text:000088C4                 mov     ecx, [edx+1078h]
.text:000088CA                 cmp     ecx, [eax+1074h]
.text:000088D0                 jge     loc_89B0
.text:000088D6                 mov     [ebp+var_8], 0
.text:000088DD
.text:000088DD loc_88DD:                               ; CODE XREF: _term_paste_callback:loc_8933j
.text:000088DD                 mov     edx, [ebp+var_4]
.text:000088E0                 mov     eax, [ebp+var_8]
.text:000088E3                 add     eax, [edx+1078h]
.text:000088E9                 mov     ecx, [ebp+var_4]
.text:000088EC                 cmp     eax, [ecx+1074h]
.text:000088F2                 jge     short loc_8935
.text:000088F4                 mov     edx, [ebp+var_4]
.text:000088F7                 mov     eax, [edx+1078h]
.text:000088FD                 add     eax, [ebp+var_8]
.text:00008900                 mov     ecx, [ebp+var_4]
.text:00008903                 mov     edx, [ecx+1070h]
.text:00008909                 movzx   eax, word ptr [edx+eax*2]
.text:0000890D                 mov     ecx, [ebp+var_8]
.text:00008910                 add     ecx, 1
.text:00008913                 mov     [ebp+var_8], ecx
.text:00008916                 cmp     eax, 0Dh
.text:00008919                 jnz     short loc_8924
.text:0000891B                 mov     [ebp+var_C], 1
.text:00008922                 jmp     short loc_892B
.text:00008924 ; ---------------------------------------------------------------------------
.text:00008924
.text:00008924 loc_8924:                               ; CODE XREF: _term_paste_callback+8Dj
.text:00008924                 mov     [ebp+var_C], 0
.text:0000892B
.text:0000892B loc_892B:                               ; CODE XREF: _term_paste_callback+96j
.text:0000892B                 cmp     [ebp+var_C], 0
.text:0000892F                 jz      short loc_8933
.text:00008931                 jmp     short loc_8935
.text:00008933 ; ---------------------------------------------------------------------------
.text:00008933
.text:00008933 loc_8933:                               ; CODE XREF: _term_paste_callback+A3j
.text:00008933                 jmp     short loc_88DD
.text:00008935 ; ---------------------------------------------------------------------------
.text:00008935
.text:00008935 loc_8935:                               ; CODE XREF: _term_paste_callback+66j
.text:00008935                                         ; _term_paste_callback+A5j
.text:00008935                 mov     edx, [ebp+var_4]
.text:00008938                 cmp     dword ptr [edx+1084h], 0
.text:0000893F                 jz      short loc_896F
.text:00008941                 push    0
.text:00008943                 mov     eax, [ebp+var_8]
.text:00008946                 push    eax
.text:00008947                 mov     ecx, [ebp+var_4]
.text:0000894A                 mov     edx, [ecx+1078h]
.text:00008950                 mov     eax, [ebp+var_4]
.text:00008953                 mov     ecx, [eax+1070h]
.text:00008959                 lea     edx, [ecx+edx*2]
.text:0000895C                 push    edx
.text:0000895D                 mov     eax, [ebp+var_4]
.text:00008960                 mov     ecx, [eax+1084h]
.text:00008966                 push    ecx
.text:00008967                 call    _luni_send
.text:0000896C                 add     esp, 10h
.text:0000896F
.text:0000896F loc_896F:                               ; CODE XREF: _term_paste_callback+B3j
.text:0000896F                 mov     edx, [ebp+var_4]
.text:00008972                 mov     eax, [edx+1078h]
.text:00008978                 add     eax, [ebp+var_8]
.text:0000897B                 mov     ecx, [ebp+var_4]
.text:0000897E                 mov     [ecx+1078h], eax
.text:00008984                 mov     edx, [ebp+var_4]
.text:00008987                 mov     eax, [ebp+var_4]
.text:0000898A                 mov     ecx, [edx+1078h]
.text:00008990                 cmp     ecx, [eax+1074h]
.text:00008996                 jge     short loc_89AB
.text:00008998                 mov     edx, [ebp+var_4]
.text:0000899B                 push    edx
.text:0000899C                 push    offset _term_paste_callback
.text:000089A1                 call    _queue_toplevel_callback
.text:000089A6                 add     esp, 8
.text:000089A9                 jmp     short loc_89DC
.text:000089AB ; ---------------------------------------------------------------------------
.text:000089AB
.text:000089AB loc_89AB:                               ; CODE XREF: _term_paste_callback+10Aj
.text:000089AB                 jmp     loc_88BE
.text:000089B0 ; ---------------------------------------------------------------------------
.text:000089B0
.text:000089B0 loc_89B0:                               ; CODE XREF: _term_paste_callback+44j
.text:000089B0                 mov     eax, [ebp+var_4]
.text:000089B3                 mov     ecx, [eax+1070h]
.text:000089B9                 push    ecx
.text:000089BA                 call    _safefree
.text:000089BF                 add     esp, 4
.text:000089C2                 mov     edx, [ebp+var_4]
.text:000089C5                 mov     dword ptr [edx+1070h], 0
.text:000089CF                 mov     eax, [ebp+var_4]
.text:000089D2                 mov     dword ptr [eax+1074h], 0
.text:000089DC
.text:000089DC loc_89DC:                               ; CODE XREF: _term_paste_callback+2Dj
.text:000089DC                                         ; _term_paste_callback+11Dj
.text:000089DC                 add     esp, 0Ch
.text:000089DF                 cmp     ebp, esp
.text:000089E1                 call    __RTC_CheckEsp
.text:000089E6                 mov     esp, ebp
.text:000089E8                 pop     ebp
.text:000089E9                 retn
.text:000089E9 _term_paste_callback endp
.text:000089E9
.text:000089E9 ; ---------------------------------------------------------------------------
.text:000089EA                 align 4
.text:000089EC
.text:000089EC ; =============== S U B R O U T I N E =======================================
.text:000089EC
.text:000089EC ; Attributes: bp-based frame
.text:000089EC
.text:000089EC                 public _term_mouse
.text:000089EC _term_mouse     proc near
.text:000089EC
.text:000089EC var_88          = dword ptr -88h
.text:000089EC var_84          = dword ptr -84h
.text:000089EC var_80          = dword ptr -80h
.text:000089EC var_7C          = dword ptr -7Ch
.text:000089EC var_78          = dword ptr -78h
.text:000089EC var_74          = dword ptr -74h
.text:000089EC var_70          = dword ptr -70h
.text:000089EC var_6C          = dword ptr -6Ch
.text:000089EC var_68          = dword ptr -68h
.text:000089EC var_64          = dword ptr -64h
.text:000089EC var_60          = dword ptr -60h
.text:000089EC var_5C          = dword ptr -5Ch
.text:000089EC Dest            = byte ptr -54h
.text:000089EC var_30          = dword ptr -30h
.text:000089EC var_2C          = dword ptr -2Ch
.text:000089EC var_28          = dword ptr -28h
.text:000089EC var_24          = dword ptr -24h
.text:000089EC var_20          = dword ptr -20h
.text:000089EC var_1C          = dword ptr -1Ch
.text:000089EC var_18          = dword ptr -18h
.text:000089EC var_10          = dword ptr -10h
.text:000089EC var_C           = dword ptr -0Ch
.text:000089EC var_4           = dword ptr -4
.text:000089EC arg_0           = dword ptr  8
.text:000089EC arg_4           = dword ptr  0Ch
.text:000089EC arg_8           = dword ptr  10h
.text:000089EC arg_C           = dword ptr  14h
.text:000089EC arg_10          = dword ptr  18h
.text:000089EC arg_14          = dword ptr  1Ch
.text:000089EC arg_18          = dword ptr  20h
.text:000089EC arg_1C          = dword ptr  24h
.text:000089EC arg_20          = dword ptr  28h
.text:000089EC
.text:000089EC                 push    ebp
.text:000089ED                 mov     ebp, esp
.text:000089EF                 sub     esp, 88h
.text:000089F5                 push    esi
.text:000089F6                 push    edi
.text:000089F7                 lea     edi, [ebp+var_88]
.text:000089FD                 mov     ecx, 22h ; '"'
.text:00008A02                 mov     eax, 0CCCCCCCCh
.text:00008A07                 rep stosd
.text:00008A09                 mov     eax, dword ptr ds:___security_cookie
.text:00008A0E                 xor     eax, ebp
.text:00008A10                 mov     [ebp+var_4], eax
.text:00008A13                 mov     eax, [ebp+arg_0]
.text:00008A16                 cmp     dword ptr [eax+15Ch], 0
.text:00008A1D                 jz      short loc_8A46
.text:00008A1F                 mov     ecx, [ebp+arg_0]
.text:00008A22                 cmp     dword ptr [ecx+1144h], 0
.text:00008A29                 jnz     short loc_8A46
.text:00008A2B                 mov     edx, [ebp+arg_0]
.text:00008A2E                 cmp     dword ptr [edx+112Ch], 0
.text:00008A35                 jz      short loc_8A3D
.text:00008A37                 cmp     [ebp+arg_18], 0
.text:00008A3B                 jnz     short loc_8A46
.text:00008A3D
.text:00008A3D loc_8A3D:                               ; CODE XREF: _term_mouse+49j
.text:00008A3D                 mov     [ebp+var_60], 1
.text:00008A44                 jmp     short loc_8A4D
.text:00008A46 ; ---------------------------------------------------------------------------
.text:00008A46
.text:00008A46 loc_8A46:                               ; CODE XREF: _term_mouse+31j
.text:00008A46                                         ; _term_mouse+3Dj ...
.text:00008A46                 mov     [ebp+var_60], 0
.text:00008A4D
.text:00008A4D loc_8A4D:                               ; CODE XREF: _term_mouse+58j
.text:00008A4D                 mov     eax, [ebp+var_60]
.text:00008A50                 mov     [ebp+var_1C], eax
.text:00008A53                 cmp     [ebp+arg_14], 0
.text:00008A57                 jge     short loc_8A7C
.text:00008A59                 mov     [ebp+arg_14], 0
.text:00008A60                 cmp     [ebp+arg_C], 4
.text:00008A64                 jnz     short loc_8A7C
.text:00008A66                 cmp     [ebp+var_1C], 0
.text:00008A6A                 jnz     short loc_8A7C
.text:00008A6C                 push    0FFFFFFFFh
.text:00008A6E                 push    0
.text:00008A70                 mov     ecx, [ebp+arg_0]
.text:00008A73                 push    ecx
.text:00008A74                 call    _term_scroll
.text:00008A79                 add     esp, 0Ch
.text:00008A7C
.text:00008A7C loc_8A7C:                               ; CODE XREF: _term_mouse+6Bj
.text:00008A7C                                         ; _term_mouse+78j ...
.text:00008A7C                 mov     edx, [ebp+arg_0]
.text:00008A7F                 mov     eax, [ebp+arg_14]
.text:00008A82                 cmp     eax, [edx+128h]
.text:00008A88                 jl      short loc_8AB5
.text:00008A8A                 mov     ecx, [ebp+arg_0]
.text:00008A8D                 mov     edx, [ecx+128h]
.text:00008A93                 sub     edx, 1
.text:00008A96                 mov     [ebp+arg_14], edx
.text:00008A99                 cmp     [ebp+arg_C], 4
.text:00008A9D                 jnz     short loc_8AB5
.text:00008A9F                 cmp     [ebp+var_1C], 0
.text:00008AA3                 jnz     short loc_8AB5
.text:00008AA5                 push    1
.text:00008AA7                 push    0
.text:00008AA9                 mov     eax, [ebp+arg_0]
.text:00008AAC                 push    eax
.text:00008AAD                 call    _term_scroll
.text:00008AB2                 add     esp, 0Ch
.text:00008AB5
.text:00008AB5 loc_8AB5:                               ; CODE XREF: _term_mouse+9Cj
.text:00008AB5                                         ; _term_mouse+B1j ...
.text:00008AB5                 cmp     [ebp+arg_10], 0
.text:00008AB9                 jge     short loc_8AE2
.text:00008ABB                 cmp     [ebp+arg_14], 0
.text:00008ABF                 jle     short loc_8ADB
.text:00008AC1                 mov     ecx, [ebp+arg_0]
.text:00008AC4                 mov     edx, [ecx+12Ch]
.text:00008ACA                 sub     edx, 1
.text:00008ACD                 mov     [ebp+arg_10], edx
.text:00008AD0                 mov     eax, [ebp+arg_14]
.text:00008AD3                 sub     eax, 1
.text:00008AD6                 mov     [ebp+arg_14], eax
.text:00008AD9                 jmp     short loc_8AE2
.text:00008ADB ; ---------------------------------------------------------------------------
.text:00008ADB
.text:00008ADB loc_8ADB:                               ; CODE XREF: _term_mouse+D3j
.text:00008ADB                 mov     [ebp+arg_10], 0
.text:00008AE2
.text:00008AE2 loc_8AE2:                               ; CODE XREF: _term_mouse+CDj
.text:00008AE2                                         ; _term_mouse+EDj
.text:00008AE2                 mov     ecx, [ebp+arg_0]
.text:00008AE5                 mov     edx, [ebp+arg_10]
.text:00008AE8                 cmp     edx, [ecx+12Ch]
.text:00008AEE                 jl      short loc_8AFF
.text:00008AF0                 mov     eax, [ebp+arg_0]
.text:00008AF3                 mov     ecx, [eax+12Ch]
.text:00008AF9                 sub     ecx, 1
.text:00008AFC                 mov     [ebp+arg_10], ecx
.text:00008AFF
.text:00008AFF loc_8AFF:                               ; CODE XREF: _term_mouse+102j
.text:00008AFF                 mov     edx, [ebp+arg_0]
.text:00008B02                 mov     eax, [ebp+arg_14]
.text:00008B05                 add     eax, [edx+10h]
.text:00008B08                 mov     [ebp+var_10], eax
.text:00008B0B                 push    0
.text:00008B0D                 push    1739h
.text:00008B12                 mov     ecx, [ebp+var_10]
.text:00008B15                 push    ecx
.text:00008B16                 mov     edx, [ebp+arg_0]
.text:00008B19                 push    edx
.text:00008B1A                 call    _lineptr
.text:00008B1F                 add     esp, 10h
.text:00008B22                 mov     [ebp+var_18], eax
.text:00008B25                 mov     eax, [ebp+var_18]
.text:00008B28                 movzx   ecx, word ptr [eax]
.text:00008B2B                 and     ecx, 3
.text:00008B2E                 jz      short loc_8B3B
.text:00008B30                 mov     eax, [ebp+arg_10]
.text:00008B33                 cdq
.text:00008B34                 sub     eax, edx
.text:00008B36                 sar     eax, 1
.text:00008B38                 mov     [ebp+arg_10], eax
.text:00008B3B
.text:00008B3B loc_8B3B:                               ; CODE XREF: _term_mouse+142j
.text:00008B3B                 mov     edx, [ebp+arg_14]
.text:00008B3E                 push    edx
.text:00008B3F                 mov     eax, [ebp+var_18]
.text:00008B42                 push    eax
.text:00008B43                 mov     ecx, [ebp+arg_0]
.text:00008B46                 push    ecx
.text:00008B47                 call    _term_bidi_line
.text:00008B4C                 add     esp, 0Ch
.text:00008B4F                 test    eax, eax
.text:00008B51                 jz      short loc_8B6F
.text:00008B53                 mov     edx, [ebp+arg_14]
.text:00008B56                 shl     edx, 4
.text:00008B59                 mov     eax, [ebp+arg_0]
.text:00008B5C                 mov     ecx, [eax+10CCh]
.text:00008B62                 mov     edx, [ecx+edx+0Ch]
.text:00008B66                 mov     eax, [ebp+arg_10]
.text:00008B69                 mov     ecx, [edx+eax*4]
.text:00008B6C                 mov     [ebp+arg_10], ecx
.text:00008B6F
.text:00008B6F loc_8B6F:                               ; CODE XREF: _term_mouse+165j
.text:00008B6F                 mov     edx, [ebp+arg_10]
.text:00008B72                 mov     [ebp+var_C], edx
.text:00008B75                 mov     eax, [ebp+var_18]
.text:00008B78                 push    eax
.text:00008B79                 call    _unlineptr
.text:00008B7E                 add     esp, 4
.text:00008B81                 cmp     [ebp+var_1C], 0
.text:00008B85                 jz      loc_8DCA
.text:00008B8B                 mov     ecx, [ebp+arg_0]
.text:00008B8E                 cmp     dword ptr [ecx+0E48h], 1
.text:00008B95                 jz      loc_8DCA
.text:00008B9B                 mov     edx, [ebp+arg_0]
.text:00008B9E                 cmp     dword ptr [edx+0E48h], 2
.text:00008BA5                 jz      loc_8DCA
.text:00008BAB                 mov     [ebp+var_24], 0
.text:00008BB2                 mov     [ebp+var_5C], 0
.text:00008BB9                 mov     eax, [ebp+arg_0]
.text:00008BBC                 cmp     dword ptr [eax+1084h], 0
.text:00008BC3                 jz      loc_8DC5
.text:00008BC9                 mov     ecx, [ebp+arg_4]
.text:00008BCC                 mov     [ebp+var_64], ecx
.text:00008BCF                 mov     edx, [ebp+var_64]
.text:00008BD2                 sub     edx, 1
.text:00008BD5                 mov     [ebp+var_64], edx
.text:00008BD8                 cmp     [ebp+var_64], 7 ; switch 8 cases
.text:00008BDC                 ja      short $LN56     ; jumptable 00008BE1 default case
.text:00008BDE                 mov     eax, [ebp+var_64]
.text:00008BE1                 jmp     ds:$LN101[eax*4] ; switch jump
.text:00008BE8 ; ---------------------------------------------------------------------------
.text:00008BE8
.text:00008BE8 $LN61_0:                                ; CODE XREF: _term_mouse+1F5j
.text:00008BE8                                         ; DATA XREF: .text:$LN101o
.text:00008BE8                 mov     [ebp+var_24], 0 ; jumptable 00008BE1 case 0
.text:00008BEF                 mov     [ebp+var_30], 0
.text:00008BF6                 jmp     short loc_8C3D
.text:00008BF8 ; ---------------------------------------------------------------------------
.text:00008BF8
.text:00008BF8 $LN60_0:                                ; CODE XREF: _term_mouse+1F5j
.text:00008BF8                                         ; DATA XREF: .text:$LN101o
.text:00008BF8                 mov     [ebp+var_24], 1 ; jumptable 00008BE1 case 1
.text:00008BFF                 mov     [ebp+var_30], 0
.text:00008C06                 jmp     short loc_8C3D
.text:00008C08 ; ---------------------------------------------------------------------------
.text:00008C08
.text:00008C08 $LN59_0:                                ; CODE XREF: _term_mouse+1F5j
.text:00008C08                                         ; DATA XREF: .text:$LN101o
.text:00008C08                 mov     [ebp+var_24], 2 ; jumptable 00008BE1 case 2
.text:00008C0F                 mov     [ebp+var_30], 0
.text:00008C16                 jmp     short loc_8C3D
.text:00008C18 ; ---------------------------------------------------------------------------
.text:00008C18
.text:00008C18 $LN58_0:                                ; CODE XREF: _term_mouse+1F5j
.text:00008C18                                         ; DATA XREF: .text:$LN101o
.text:00008C18                 mov     [ebp+var_24], 40h ; '@' ; jumptable 00008BE1 case 6
.text:00008C1F                 mov     [ebp+var_30], 1
.text:00008C26                 jmp     short loc_8C3D
.text:00008C28 ; ---------------------------------------------------------------------------
.text:00008C28
.text:00008C28 $LN57_0:                                ; CODE XREF: _term_mouse+1F5j
.text:00008C28                                         ; DATA XREF: .text:$LN101o
.text:00008C28                 mov     [ebp+var_24], 41h ; 'A' ; jumptable 00008BE1 case 7
.text:00008C2F                 mov     [ebp+var_30], 1
.text:00008C36                 jmp     short loc_8C3D
.text:00008C38 ; ---------------------------------------------------------------------------
.text:00008C38
.text:00008C38 $LN56:                                  ; CODE XREF: _term_mouse+1F0j
.text:00008C38                                         ; _term_mouse+1F5j
.text:00008C38                                         ; DATA XREF: ...
.text:00008C38                 jmp     loc_94BF        ; jumptable 00008BE1 default case
.text:00008C3D ; ---------------------------------------------------------------------------
.text:00008C3D
.text:00008C3D loc_8C3D:                               ; CODE XREF: _term_mouse+20Aj
.text:00008C3D                                         ; _term_mouse+21Aj ...
.text:00008C3D                 cmp     [ebp+var_30], 0
.text:00008C41                 jz      short loc_8C50
.text:00008C43                 cmp     [ebp+arg_C], 1
.text:00008C47                 jz      short loc_8C4E
.text:00008C49                 jmp     loc_94BF
.text:00008C4E ; ---------------------------------------------------------------------------
.text:00008C4E
.text:00008C4E loc_8C4E:                               ; CODE XREF: _term_mouse+25Bj
.text:00008C4E                 jmp     short loc_8CCE
.text:00008C50 ; ---------------------------------------------------------------------------
.text:00008C50
.text:00008C50 loc_8C50:                               ; CODE XREF: _term_mouse+255j
.text:00008C50                 mov     ecx, [ebp+arg_C]
.text:00008C53                 mov     [ebp+var_68], ecx
.text:00008C56                 cmp     [ebp+var_68], 1
.text:00008C5A                 jz      short loc_8CA8
.text:00008C5C                 cmp     [ebp+var_68], 4
.text:00008C60                 jz      short loc_8C6A
.text:00008C62                 cmp     [ebp+var_68], 5
.text:00008C66                 jz      short loc_8C86
.text:00008C68                 jmp     short loc_8CC9
.text:00008C6A ; ---------------------------------------------------------------------------
.text:00008C6A
.text:00008C6A loc_8C6A:                               ; CODE XREF: _term_mouse+274j
.text:00008C6A                 mov     edx, [ebp+arg_0]
.text:00008C6D                 cmp     dword ptr [edx+15Ch], 1
.text:00008C74                 jnz     short loc_8C7B
.text:00008C76                 jmp     loc_94BF
.text:00008C7B ; ---------------------------------------------------------------------------
.text:00008C7B
.text:00008C7B loc_8C7B:                               ; CODE XREF: _term_mouse+288j
.text:00008C7B                 mov     eax, [ebp+var_24]
.text:00008C7E                 add     eax, 20h ; ' '
.text:00008C81                 mov     [ebp+var_24], eax
.text:00008C84                 jmp     short loc_8CCE
.text:00008C86 ; ---------------------------------------------------------------------------
.text:00008C86
.text:00008C86 loc_8C86:                               ; CODE XREF: _term_mouse+27Aj
.text:00008C86                 mov     ecx, [ebp+arg_0]
.text:00008C89                 cmp     dword ptr [ecx+160h], 0
.text:00008C90                 jnz     short loc_8C99
.text:00008C92                 mov     [ebp+var_24], 3
.text:00008C99
.text:00008C99 loc_8C99:                               ; CODE XREF: _term_mouse+2A4j
.text:00008C99                 mov     edx, [ebp+arg_0]
.text:00008C9C                 mov     dword ptr [edx+168h], 0
.text:00008CA6                 jmp     short loc_8CCE
.text:00008CA8 ; ---------------------------------------------------------------------------
.text:00008CA8
.text:00008CA8 loc_8CA8:                               ; CODE XREF: _term_mouse+26Ej
.text:00008CA8                 mov     eax, [ebp+arg_0]
.text:00008CAB                 mov     ecx, [eax+168h]
.text:00008CB1                 cmp     ecx, [ebp+arg_4]
.text:00008CB4                 jnz     short loc_8CBB
.text:00008CB6                 jmp     loc_94BF
.text:00008CBB ; ---------------------------------------------------------------------------
.text:00008CBB
.text:00008CBB loc_8CBB:                               ; CODE XREF: _term_mouse+2C8j
.text:00008CBB                 mov     edx, [ebp+arg_0]
.text:00008CBE                 mov     eax, [ebp+arg_4]
.text:00008CC1                 mov     [edx+168h], eax
.text:00008CC7                 jmp     short loc_8CCE
.text:00008CC9 ; ---------------------------------------------------------------------------
.text:00008CC9
.text:00008CC9 loc_8CC9:                               ; CODE XREF: _term_mouse+27Cj
.text:00008CC9                 jmp     loc_94BF
.text:00008CCE ; ---------------------------------------------------------------------------
.text:00008CCE
.text:00008CCE loc_8CCE:                               ; CODE XREF: _term_mouse:loc_8C4Ej
.text:00008CCE                                         ; _term_mouse+298j ...
.text:00008CCE                 cmp     [ebp+arg_18], 0
.text:00008CD2                 jz      short loc_8CDD
.text:00008CD4                 mov     ecx, [ebp+var_24]
.text:00008CD7                 add     ecx, 4
.text:00008CDA                 mov     [ebp+var_24], ecx
.text:00008CDD
.text:00008CDD loc_8CDD:                               ; CODE XREF: _term_mouse+2E6j
.text:00008CDD                 cmp     [ebp+arg_1C], 0
.text:00008CE1                 jz      short loc_8CEC
.text:00008CE3                 mov     edx, [ebp+var_24]
.text:00008CE6                 add     edx, 10h
.text:00008CE9                 mov     [ebp+var_24], edx
.text:00008CEC
.text:00008CEC loc_8CEC:                               ; CODE XREF: _term_mouse+2F5j
.text:00008CEC                 mov     eax, [ebp+arg_14]
.text:00008CEF                 add     eax, 1
.text:00008CF2                 mov     [ebp+var_28], eax
.text:00008CF5                 mov     ecx, [ebp+arg_10]
.text:00008CF8                 add     ecx, 1
.text:00008CFB                 mov     [ebp+var_2C], ecx
.text:00008CFE                 mov     edx, [ebp+arg_0]
.text:00008D01                 cmp     dword ptr [edx+160h], 0
.text:00008D08                 jz      short loc_8D3D
.text:00008D0A                 mov     eax, [ebp+arg_C]
.text:00008D0D                 sub     eax, 5
.text:00008D10                 neg     eax
.text:00008D12                 sbb     eax, eax
.text:00008D14                 and     eax, 0FFFFFFE0h
.text:00008D17                 add     eax, 6Dh ; 'm'
.text:00008D1A                 push    eax
.text:00008D1B                 mov     ecx, [ebp+var_28]
.text:00008D1E                 push    ecx
.text:00008D1F                 mov     edx, [ebp+var_2C]
.text:00008D22                 push    edx
.text:00008D23                 mov     eax, [ebp+var_24]
.text:00008D26                 push    eax
.text:00008D27                 push    offset $SG88447 ; "\x1B[<%d;%d;%d%c"
.text:00008D2C                 lea     ecx, [ebp+Dest]
.text:00008D2F                 push    ecx             ; Dest
.text:00008D30                 call    _sprintf
.text:00008D35                 add     esp, 18h
.text:00008D38                 mov     [ebp+var_5C], eax
.text:00008D3B                 jmp     short loc_8DA9
.text:00008D3D ; ---------------------------------------------------------------------------
.text:00008D3D
.text:00008D3D loc_8D3D:                               ; CODE XREF: _term_mouse+31Cj
.text:00008D3D                 mov     edx, [ebp+arg_0]
.text:00008D40                 cmp     dword ptr [edx+164h], 0
.text:00008D47                 jz      short loc_8D6E
.text:00008D49                 mov     eax, [ebp+var_28]
.text:00008D4C                 push    eax
.text:00008D4D                 mov     ecx, [ebp+var_2C]
.text:00008D50                 push    ecx
.text:00008D51                 mov     edx, [ebp+var_24]
.text:00008D54                 add     edx, 20h ; ' '
.text:00008D57                 push    edx
.text:00008D58                 push    offset $SG88450 ; "\x1B[%d;%d;%dM"
.text:00008D5D                 lea     eax, [ebp+Dest]
.text:00008D60                 push    eax             ; Dest
.text:00008D61                 call    _sprintf
.text:00008D66                 add     esp, 14h
.text:00008D69                 mov     [ebp+var_5C], eax
.text:00008D6C                 jmp     short loc_8DA9
.text:00008D6E ; ---------------------------------------------------------------------------
.text:00008D6E
.text:00008D6E loc_8D6E:                               ; CODE XREF: _term_mouse+35Bj
.text:00008D6E                 cmp     [ebp+var_2C], 0DFh ; '¯'
.text:00008D75                 jg      short loc_8DA9
.text:00008D77                 cmp     [ebp+var_28], 0DFh ; '¯'
.text:00008D7E                 jg      short loc_8DA9
.text:00008D80                 mov     ecx, [ebp+var_28]
.text:00008D83                 add     ecx, 20h ; ' '
.text:00008D86                 push    ecx
.text:00008D87                 mov     edx, [ebp+var_2C]
.text:00008D8A                 add     edx, 20h ; ' '
.text:00008D8D                 push    edx
.text:00008D8E                 mov     eax, [ebp+var_24]
.text:00008D91                 add     eax, 20h ; ' '
.text:00008D94                 push    eax
.text:00008D95                 push    offset $SG88453 ; "\x1B[M%c%c%c"
.text:00008D9A                 lea     ecx, [ebp+Dest]
.text:00008D9D                 push    ecx             ; Dest
.text:00008D9E                 call    _sprintf
.text:00008DA3                 add     esp, 14h
.text:00008DA6                 mov     [ebp+var_5C], eax
.text:00008DA9
.text:00008DA9 loc_8DA9:                               ; CODE XREF: _term_mouse+34Fj
.text:00008DA9                                         ; _term_mouse+380j ...
.text:00008DA9                 push    0
.text:00008DAB                 mov     edx, [ebp+var_5C]
.text:00008DAE                 push    edx
.text:00008DAF                 lea     eax, [ebp+Dest]
.text:00008DB2                 push    eax
.text:00008DB3                 mov     ecx, [ebp+arg_0]
.text:00008DB6                 mov     edx, [ecx+1084h]
.text:00008DBC                 push    edx
.text:00008DBD                 call    _ldisc_send
.text:00008DC2                 add     esp, 10h
.text:00008DC5
.text:00008DC5 loc_8DC5:                               ; CODE XREF: _term_mouse+1D7j
.text:00008DC5                 jmp     loc_94BF
.text:00008DCA ; ---------------------------------------------------------------------------
.text:00008DCA
.text:00008DCA loc_8DCA:                               ; CODE XREF: _term_mouse+199j
.text:00008DCA                                         ; _term_mouse+1A9j ...
.text:00008DCA                 xor     eax, eax
.text:00008DCC                 cmp     [ebp+arg_20], 0
.text:00008DD0                 setz    al
.text:00008DD3                 mov     ecx, [ebp+arg_0]
.text:00008DD6                 xor     edx, edx
.text:00008DD8                 cmp     dword ptr [ecx+1158h], 0
.text:00008DDF                 setz    dl
.text:00008DE2                 xor     eax, edx
.text:00008DE4                 jz      short loc_8DEF
.text:00008DE6                 mov     [ebp+var_20], 1
.text:00008DED                 jmp     short loc_8DF6
.text:00008DEF ; ---------------------------------------------------------------------------
.text:00008DEF
.text:00008DEF loc_8DEF:                               ; CODE XREF: _term_mouse+3F8j
.text:00008DEF                 mov     [ebp+var_20], 0
.text:00008DF6
.text:00008DF6 loc_8DF6:                               ; CODE XREF: _term_mouse+401j
.text:00008DF6                 mov     eax, [ebp+arg_0]
.text:00008DF9                 cmp     dword ptr [eax+0E48h], 0
.text:00008E00                 jnz     short loc_8E0E
.text:00008E02                 mov     ecx, [ebp+arg_0]
.text:00008E05                 mov     edx, [ebp+var_20]
.text:00008E08                 mov     [ecx+0E4Ch], edx
.text:00008E0E
.text:00008E0E loc_8E0E:                               ; CODE XREF: _term_mouse+414j
.text:00008E0E                 cmp     [ebp+arg_8], 4
.text:00008E12                 jnz     short loc_8E66
.text:00008E14                 cmp     [ebp+arg_C], 1
.text:00008E18                 jnz     short loc_8E66
.text:00008E1A                 mov     eax, [ebp+arg_0]
.text:00008E1D                 push    eax
.text:00008E1E                 call    _deselect
.text:00008E23                 add     esp, 4
.text:00008E26                 mov     ecx, [ebp+arg_0]
.text:00008E29                 mov     dword ptr [ecx+0E48h], 1
.text:00008E33                 mov     edx, [ebp+arg_0]
.text:00008E36                 mov     eax, [ebp+var_20]
.text:00008E39                 mov     [edx+0E4Ch], eax
.text:00008E3F                 mov     ecx, [ebp+arg_0]
.text:00008E42                 mov     edx, [ebp+var_10]
.text:00008E45                 mov     [ecx+0E64h], edx
.text:00008E4B                 mov     eax, [ebp+var_C]
.text:00008E4E                 mov     [ecx+0E68h], eax
.text:00008E54                 mov     ecx, [ebp+arg_0]
.text:00008E57                 mov     dword ptr [ecx+0E50h], 0
.text:00008E61                 jmp     loc_949B
.text:00008E66 ; ---------------------------------------------------------------------------
.text:00008E66
.text:00008E66 loc_8E66:                               ; CODE XREF: _term_mouse+426j
.text:00008E66                                         ; _term_mouse+42Cj
.text:00008E66                 cmp     [ebp+arg_8], 4
.text:00008E6A                 jnz     loc_8F62
.text:00008E70                 cmp     [ebp+arg_C], 2
.text:00008E74                 jz      short loc_8E80
.text:00008E76                 cmp     [ebp+arg_C], 3
.text:00008E7A                 jnz     loc_8F62
.text:00008E80
.text:00008E80 loc_8E80:                               ; CODE XREF: _term_mouse+488j
.text:00008E80                 mov     edx, [ebp+arg_0]
.text:00008E83                 push    edx
.text:00008E84                 call    _deselect
.text:00008E89                 add     esp, 4
.text:00008E8C                 xor     eax, eax
.text:00008E8E                 cmp     [ebp+arg_C], 2
.text:00008E92                 setnz   al
.text:00008E95                 add     eax, 1
.text:00008E98                 mov     ecx, [ebp+arg_0]
.text:00008E9B                 mov     [ecx+0E50h], eax
.text:00008EA1                 mov     edx, [ebp+arg_0]
.text:00008EA4                 mov     dword ptr [edx+0E48h], 2
.text:00008EAE                 mov     eax, [ebp+arg_0]
.text:00008EB1                 mov     ecx, [ebp+var_10]
.text:00008EB4                 mov     [eax+0E64h], ecx
.text:00008EBA                 mov     edx, [ebp+var_C]
.text:00008EBD                 mov     [eax+0E68h], edx
.text:00008EC3                 mov     eax, [ebp+arg_0]
.text:00008EC6                 mov     ecx, [ebp+var_10]
.text:00008EC9                 mov     [eax+0E54h], ecx
.text:00008ECF                 mov     edx, [ebp+var_C]
.text:00008ED2                 mov     [eax+0E58h], edx
.text:00008ED8                 mov     eax, [ebp+arg_0]
.text:00008EDB                 mov     ecx, [eax+0E54h]
.text:00008EE1                 mov     edx, [eax+0E58h]
.text:00008EE7                 mov     eax, [ebp+arg_0]
.text:00008EEA                 mov     [eax+0E5Ch], ecx
.text:00008EF0                 mov     [eax+0E60h], edx
.text:00008EF6                 mov     ecx, [ebp+arg_0]
.text:00008EF9                 mov     edx, [ebp+arg_0]
.text:00008EFC                 mov     eax, [ecx+0E60h]
.text:00008F02                 cmp     eax, [edx+12Ch]
.text:00008F08                 jnz     short loc_8F35
.text:00008F0A                 mov     ecx, [ebp+arg_0]
.text:00008F0D                 mov     dword ptr [ecx+0E60h], 0
.text:00008F17                 mov     edx, [ebp+arg_0]
.text:00008F1A                 mov     eax, [edx+0E5Ch]
.text:00008F20                 add     eax, 1
.text:00008F23                 mov     ecx, [ebp+arg_0]
.text:00008F26                 mov     [ecx+0E5Ch], eax
.text:00008F2C                 mov     [ebp+var_6C], 1
.text:00008F33                 jmp     short loc_8F51
.text:00008F35 ; ---------------------------------------------------------------------------
.text:00008F35
.text:00008F35 loc_8F35:                               ; CODE XREF: _term_mouse+51Cj
.text:00008F35                 mov     edx, [ebp+arg_0]
.text:00008F38                 mov     eax, [edx+0E60h]
.text:00008F3E                 add     eax, 1
.text:00008F41                 mov     ecx, [ebp+arg_0]
.text:00008F44                 mov     [ecx+0E60h], eax
.text:00008F4A                 mov     [ebp+var_6C], 0
.text:00008F51
.text:00008F51 loc_8F51:                               ; CODE XREF: _term_mouse+547j
.text:00008F51                 mov     edx, [ebp+arg_0]
.text:00008F54                 push    edx
.text:00008F55                 call    _sel_spread
.text:00008F5A                 add     esp, 4
.text:00008F5D                 jmp     loc_949B
.text:00008F62 ; ---------------------------------------------------------------------------
.text:00008F62
.text:00008F62 loc_8F62:                               ; CODE XREF: _term_mouse+47Ej
.text:00008F62                                         ; _term_mouse+48Ej
.text:00008F62                 cmp     [ebp+arg_8], 4
.text:00008F66                 jnz     short loc_8F6E
.text:00008F68                 cmp     [ebp+arg_C], 4
.text:00008F6C                 jz      short loc_8F82
.text:00008F6E
.text:00008F6E loc_8F6E:                               ; CODE XREF: _term_mouse+57Aj
.text:00008F6E                 cmp     [ebp+arg_8], 5
.text:00008F72                 jnz     loc_93F5
.text:00008F78                 cmp     [ebp+arg_C], 5
.text:00008F7C                 jz      loc_93F5
.text:00008F82
.text:00008F82 loc_8F82:                               ; CODE XREF: _term_mouse+580j
.text:00008F82                 mov     eax, [ebp+arg_0]
.text:00008F85                 cmp     dword ptr [eax+0E48h], 1
.text:00008F8C                 jnz     short loc_8FAF
.text:00008F8E                 mov     ecx, [ebp+arg_0]
.text:00008F91                 mov     edx, [ecx+0E64h]
.text:00008F97                 cmp     edx, [ebp+var_10]
.text:00008F9A                 jnz     short loc_8FAF
.text:00008F9C                 mov     eax, [ebp+arg_0]
.text:00008F9F                 mov     ecx, [eax+0E68h]
.text:00008FA5                 cmp     ecx, [ebp+var_C]
.text:00008FA8                 jnz     short loc_8FAF
.text:00008FAA                 jmp     loc_94BF
.text:00008FAF ; ---------------------------------------------------------------------------
.text:00008FAF
.text:00008FAF loc_8FAF:                               ; CODE XREF: _term_mouse+5A0j
.text:00008FAF                                         ; _term_mouse+5AEj ...
.text:00008FAF                 cmp     [ebp+arg_8], 5
.text:00008FB3                 jnz     loc_9175
.text:00008FB9                 cmp     [ebp+arg_C], 4
.text:00008FBD                 jz      loc_9175
.text:00008FC3                 mov     edx, [ebp+arg_0]
.text:00008FC6                 cmp     dword ptr [edx+0E48h], 3
.text:00008FCD                 jnz     loc_9175
.text:00008FD3                 mov     eax, [ebp+arg_0]
.text:00008FD6                 cmp     dword ptr [eax+0E4Ch], 0
.text:00008FDD                 jnz     loc_90E3
.text:00008FE3                 mov     ecx, [ebp+arg_0]
.text:00008FE6                 mov     esi, [ebp+var_10]
.text:00008FE9                 sub     esi, [ecx+0E54h]
.text:00008FEF                 mov     edx, [ebp+arg_0]
.text:00008FF2                 mov     eax, [edx+12Ch]
.text:00008FF8                 add     eax, 1
.text:00008FFB                 imul    esi, eax
.text:00008FFE                 add     esi, [ebp+var_C]
.text:00009001                 mov     ecx, [ebp+arg_0]
.text:00009004                 sub     esi, [ecx+0E58h]
.text:0000900A                 mov     edx, [ebp+arg_0]
.text:0000900D                 mov     eax, [ebp+arg_0]
.text:00009010                 mov     ecx, [edx+0E5Ch]
.text:00009016                 sub     ecx, [eax+0E54h]
.text:0000901C                 mov     edx, [ebp+arg_0]
.text:0000901F                 mov     eax, [edx+12Ch]
.text:00009025                 add     eax, 1
.text:00009028                 imul    ecx, eax
.text:0000902B                 mov     edx, [ebp+arg_0]
.text:0000902E                 add     ecx, [edx+0E60h]
.text:00009034                 mov     eax, [ebp+arg_0]
.text:00009037                 sub     ecx, [eax+0E58h]
.text:0000903D                 mov     eax, ecx
.text:0000903F                 cdq
.text:00009040                 sub     eax, edx
.text:00009042                 sar     eax, 1
.text:00009044                 cmp     esi, eax
.text:00009046                 jge     short loc_90C0
.text:00009048                 mov     ecx, [ebp+arg_0]
.text:0000904B                 mov     edx, [ecx+0E5Ch]
.text:00009051                 mov     eax, [ecx+0E60h]
.text:00009057                 mov     ecx, [ebp+arg_0]
.text:0000905A                 mov     [ecx+0E64h], edx
.text:00009060                 mov     [ecx+0E68h], eax
.text:00009066                 mov     edx, [ebp+arg_0]
.text:00009069                 cmp     dword ptr [edx+0E68h], 0
.text:00009070                 jnz     short loc_90A2
.text:00009072                 mov     eax, [ebp+arg_0]
.text:00009075                 mov     ecx, [ebp+arg_0]
.text:00009078                 mov     edx, [ecx+12Ch]
.text:0000907E                 mov     [eax+0E68h], edx
.text:00009084                 mov     eax, [ebp+arg_0]
.text:00009087                 mov     ecx, [eax+0E64h]
.text:0000908D                 sub     ecx, 1
.text:00009090                 mov     edx, [ebp+arg_0]
.text:00009093                 mov     [edx+0E64h], ecx
.text:00009099                 mov     [ebp+var_70], 1
.text:000090A0                 jmp     short loc_90BE
.text:000090A2 ; ---------------------------------------------------------------------------
.text:000090A2
.text:000090A2 loc_90A2:                               ; CODE XREF: _term_mouse+684j
.text:000090A2                 mov     eax, [ebp+arg_0]
.text:000090A5                 mov     ecx, [eax+0E68h]
.text:000090AB                 sub     ecx, 1
.text:000090AE                 mov     edx, [ebp+arg_0]
.text:000090B1                 mov     [edx+0E68h], ecx
.text:000090B7                 mov     [ebp+var_70], 0
.text:000090BE
.text:000090BE loc_90BE:                               ; CODE XREF: _term_mouse+6B4j
.text:000090BE                 jmp     short loc_90DE
.text:000090C0 ; ---------------------------------------------------------------------------
.text:000090C0
.text:000090C0 loc_90C0:                               ; CODE XREF: _term_mouse+65Aj
.text:000090C0                 mov     eax, [ebp+arg_0]
.text:000090C3                 mov     ecx, [eax+0E54h]
.text:000090C9                 mov     edx, [eax+0E58h]
.text:000090CF                 mov     eax, [ebp+arg_0]
.text:000090D2                 mov     [eax+0E64h], ecx
.text:000090D8                 mov     [eax+0E68h], edx
.text:000090DE
.text:000090DE loc_90DE:                               ; CODE XREF: _term_mouse:loc_90BEj
.text:000090DE                 jmp     loc_9168
.text:000090E3 ; ---------------------------------------------------------------------------
.text:000090E3
.text:000090E3 loc_90E3:                               ; CODE XREF: _term_mouse+5F1j
.text:000090E3                 mov     ecx, [ebp+var_C]
.text:000090E6                 shl     ecx, 1
.text:000090E8                 mov     edx, [ebp+arg_0]
.text:000090EB                 mov     eax, [edx+0E58h]
.text:000090F1                 mov     edx, [ebp+arg_0]
.text:000090F4                 add     eax, [edx+0E60h]
.text:000090FA                 cmp     ecx, eax
.text:000090FC                 jge     short loc_9115
.text:000090FE                 mov     eax, [ebp+arg_0]
.text:00009101                 mov     ecx, [eax+0E60h]
.text:00009107                 sub     ecx, 1
.text:0000910A                 mov     edx, [ebp+arg_0]
.text:0000910D                 mov     [edx+0E68h], ecx
.text:00009113                 jmp     short loc_9127
.text:00009115 ; ---------------------------------------------------------------------------
.text:00009115
.text:00009115 loc_9115:                               ; CODE XREF: _term_mouse+710j
.text:00009115                 mov     eax, [ebp+arg_0]
.text:00009118                 mov     ecx, [ebp+arg_0]
.text:0000911B                 mov     edx, [ecx+0E58h]
.text:00009121                 mov     [eax+0E68h], edx
.text:00009127
.text:00009127 loc_9127:                               ; CODE XREF: _term_mouse+727j
.text:00009127                 mov     eax, [ebp+var_10]
.text:0000912A                 shl     eax, 1
.text:0000912C                 mov     ecx, [ebp+arg_0]
.text:0000912F                 mov     edx, [ecx+0E54h]
.text:00009135                 mov     ecx, [ebp+arg_0]
.text:00009138                 add     edx, [ecx+0E5Ch]
.text:0000913E                 cmp     eax, edx
.text:00009140                 jge     short loc_9156
.text:00009142                 mov     edx, [ebp+arg_0]
.text:00009145                 mov     eax, [ebp+arg_0]
.text:00009148                 mov     ecx, [eax+0E5Ch]
.text:0000914E                 mov     [edx+0E64h], ecx
.text:00009154                 jmp     short loc_9168
.text:00009156 ; ---------------------------------------------------------------------------
.text:00009156
.text:00009156 loc_9156:                               ; CODE XREF: _term_mouse+754j
.text:00009156                 mov     edx, [ebp+arg_0]
.text:00009159                 mov     eax, [ebp+arg_0]
.text:0000915C                 mov     ecx, [eax+0E54h]
.text:00009162                 mov     [edx+0E64h], ecx
.text:00009168
.text:00009168 loc_9168:                               ; CODE XREF: _term_mouse:loc_90DEj
.text:00009168                                         ; _term_mouse+768j
.text:00009168                 mov     edx, [ebp+arg_0]
.text:0000916B                 mov     dword ptr [edx+0E48h], 2
.text:00009175
.text:00009175 loc_9175:                               ; CODE XREF: _term_mouse+5C7j
.text:00009175                                         ; _term_mouse+5D1j ...
.text:00009175                 mov     eax, [ebp+arg_0]
.text:00009178                 cmp     dword ptr [eax+0E48h], 1
.text:0000917F                 jz      short loc_91A2
.text:00009181                 mov     ecx, [ebp+arg_0]
.text:00009184                 cmp     dword ptr [ecx+0E48h], 2
.text:0000918B                 jz      short loc_91A2
.text:0000918D                 mov     edx, [ebp+arg_0]
.text:00009190                 mov     eax, [ebp+var_10]
.text:00009193                 mov     [edx+0E64h], eax
.text:00009199                 mov     ecx, [ebp+var_C]
.text:0000919C                 mov     [edx+0E68h], ecx
.text:000091A2
.text:000091A2 loc_91A2:                               ; CODE XREF: _term_mouse+793j
.text:000091A2                                         ; _term_mouse+79Fj
.text:000091A2                 mov     edx, [ebp+arg_0]
.text:000091A5                 mov     dword ptr [edx+0E48h], 2
.text:000091AF                 mov     eax, [ebp+arg_0]
.text:000091B2                 cmp     dword ptr [eax+0E4Ch], 0
.text:000091B9                 jnz     loc_9317
.text:000091BF                 mov     ecx, [ebp+arg_0]
.text:000091C2                 mov     edx, [ebp+var_10]
.text:000091C5                 cmp     edx, [ecx+0E64h]
.text:000091CB                 jl      short loc_91F1
.text:000091CD                 mov     eax, [ebp+arg_0]
.text:000091D0                 mov     ecx, [ebp+var_10]
.text:000091D3                 cmp     ecx, [eax+0E64h]
.text:000091D9                 jnz     loc_9284
.text:000091DF                 mov     edx, [ebp+arg_0]
.text:000091E2                 mov     eax, [ebp+var_C]
.text:000091E5                 cmp     eax, [edx+0E68h]
.text:000091EB                 jge     loc_9284
.text:000091F1
.text:000091F1 loc_91F1:                               ; CODE XREF: _term_mouse+7DFj
.text:000091F1                 mov     ecx, [ebp+arg_0]
.text:000091F4                 mov     edx, [ebp+var_10]
.text:000091F7                 mov     [ecx+0E54h], edx
.text:000091FD                 mov     eax, [ebp+var_C]
.text:00009200                 mov     [ecx+0E58h], eax
.text:00009206                 mov     ecx, [ebp+arg_0]
.text:00009209                 mov     edx, [ecx+0E64h]
.text:0000920F                 mov     eax, [ecx+0E68h]
.text:00009215                 mov     ecx, [ebp+arg_0]
.text:00009218                 mov     [ecx+0E5Ch], edx
.text:0000921E                 mov     [ecx+0E60h], eax
.text:00009224                 mov     edx, [ebp+arg_0]
.text:00009227                 mov     eax, [ebp+arg_0]
.text:0000922A                 mov     ecx, [edx+0E60h]
.text:00009230                 cmp     ecx, [eax+12Ch]
.text:00009236                 jnz     short loc_9263
.text:00009238                 mov     edx, [ebp+arg_0]
.text:0000923B                 mov     dword ptr [edx+0E60h], 0
.text:00009245                 mov     eax, [ebp+arg_0]
.text:00009248                 mov     ecx, [eax+0E5Ch]
.text:0000924E                 add     ecx, 1
.text:00009251                 mov     edx, [ebp+arg_0]
.text:00009254                 mov     [edx+0E5Ch], ecx
.text:0000925A                 mov     [ebp+var_74], 1
.text:00009261                 jmp     short loc_927F
.text:00009263 ; ---------------------------------------------------------------------------
.text:00009263
.text:00009263 loc_9263:                               ; CODE XREF: _term_mouse+84Aj
.text:00009263                 mov     eax, [ebp+arg_0]
.text:00009266                 mov     ecx, [eax+0E60h]
.text:0000926C                 add     ecx, 1
.text:0000926F                 mov     edx, [ebp+arg_0]
.text:00009272                 mov     [edx+0E60h], ecx
.text:00009278                 mov     [ebp+var_74], 0
.text:0000927F
.text:0000927F loc_927F:                               ; CODE XREF: _term_mouse+875j
.text:0000927F                 jmp     loc_9312
.text:00009284 ; ---------------------------------------------------------------------------
.text:00009284
.text:00009284 loc_9284:                               ; CODE XREF: _term_mouse+7EDj
.text:00009284                                         ; _term_mouse+7FFj
.text:00009284                 mov     eax, [ebp+arg_0]
.text:00009287                 mov     ecx, [eax+0E64h]
.text:0000928D                 mov     edx, [eax+0E68h]
.text:00009293                 mov     eax, [ebp+arg_0]
.text:00009296                 mov     [eax+0E54h], ecx
.text:0000929C                 mov     [eax+0E58h], edx
.text:000092A2                 mov     ecx, [ebp+arg_0]
.text:000092A5                 mov     edx, [ebp+var_10]
.text:000092A8                 mov     [ecx+0E5Ch], edx
.text:000092AE                 mov     eax, [ebp+var_C]
.text:000092B1                 mov     [ecx+0E60h], eax
.text:000092B7                 mov     ecx, [ebp+arg_0]
.text:000092BA                 mov     edx, [ebp+arg_0]
.text:000092BD                 mov     eax, [ecx+0E60h]
.text:000092C3                 cmp     eax, [edx+12Ch]
.text:000092C9                 jnz     short loc_92F6
.text:000092CB                 mov     ecx, [ebp+arg_0]
.text:000092CE                 mov     dword ptr [ecx+0E60h], 0
.text:000092D8                 mov     edx, [ebp+arg_0]
.text:000092DB                 mov     eax, [edx+0E5Ch]
.text:000092E1                 add     eax, 1
.text:000092E4                 mov     ecx, [ebp+arg_0]
.text:000092E7                 mov     [ecx+0E5Ch], eax
.text:000092ED                 mov     [ebp+var_78], 1
.text:000092F4                 jmp     short loc_9312
.text:000092F6 ; ---------------------------------------------------------------------------
.text:000092F6
.text:000092F6 loc_92F6:                               ; CODE XREF: _term_mouse+8DDj
.text:000092F6                 mov     edx, [ebp+arg_0]
.text:000092F9                 mov     eax, [edx+0E60h]
.text:000092FF                 add     eax, 1
.text:00009302                 mov     ecx, [ebp+arg_0]
.text:00009305                 mov     [ecx+0E60h], eax
.text:0000930B                 mov     [ebp+var_78], 0
.text:00009312
.text:00009312 loc_9312:                               ; CODE XREF: _term_mouse:loc_927Fj
.text:00009312                                         ; _term_mouse+908j
.text:00009312                 jmp     loc_93E4
.text:00009317 ; ---------------------------------------------------------------------------
.text:00009317
.text:00009317 loc_9317:                               ; CODE XREF: _term_mouse+7CDj
.text:00009317                 mov     edx, [ebp+arg_0]
.text:0000931A                 mov     eax, [edx+0E68h]
.text:00009320                 cmp     eax, [ebp+var_C]
.text:00009323                 jge     short loc_9333
.text:00009325                 mov     ecx, [ebp+arg_0]
.text:00009328                 mov     edx, [ecx+0E68h]
.text:0000932E                 mov     [ebp+var_7C], edx
.text:00009331                 jmp     short loc_9339
.text:00009333 ; ---------------------------------------------------------------------------
.text:00009333
.text:00009333 loc_9333:                               ; CODE XREF: _term_mouse+937j
.text:00009333                 mov     eax, [ebp+var_C]
.text:00009336                 mov     [ebp+var_7C], eax
.text:00009339
.text:00009339 loc_9339:                               ; CODE XREF: _term_mouse+945j
.text:00009339                 mov     ecx, [ebp+arg_0]
.text:0000933C                 mov     edx, [ebp+var_7C]
.text:0000933F                 mov     [ecx+0E58h], edx
.text:00009345                 mov     eax, [ebp+arg_0]
.text:00009348                 mov     ecx, [eax+0E68h]
.text:0000934E                 cmp     ecx, [ebp+var_C]
.text:00009351                 jle     short loc_9361
.text:00009353                 mov     edx, [ebp+arg_0]
.text:00009356                 mov     eax, [edx+0E68h]
.text:0000935C                 mov     [ebp+var_80], eax
.text:0000935F                 jmp     short loc_9367
.text:00009361 ; ---------------------------------------------------------------------------
.text:00009361
.text:00009361 loc_9361:                               ; CODE XREF: _term_mouse+965j
.text:00009361                 mov     ecx, [ebp+var_C]
.text:00009364                 mov     [ebp+var_80], ecx
.text:00009367
.text:00009367 loc_9367:                               ; CODE XREF: _term_mouse+973j
.text:00009367                 mov     edx, [ebp+var_80]
.text:0000936A                 add     edx, 1
.text:0000936D                 mov     eax, [ebp+arg_0]
.text:00009370                 mov     [eax+0E60h], edx
.text:00009376                 mov     ecx, [ebp+arg_0]
.text:00009379                 mov     edx, [ecx+0E64h]
.text:0000937F                 cmp     edx, [ebp+var_10]
.text:00009382                 jge     short loc_9395
.text:00009384                 mov     eax, [ebp+arg_0]
.text:00009387                 mov     ecx, [eax+0E64h]
.text:0000938D                 mov     [ebp+var_84], ecx
.text:00009393                 jmp     short loc_939E
.text:00009395 ; ---------------------------------------------------------------------------
.text:00009395
.text:00009395 loc_9395:                               ; CODE XREF: _term_mouse+996j
.text:00009395                 mov     edx, [ebp+var_10]
.text:00009398                 mov     [ebp+var_84], edx
.text:0000939E
.text:0000939E loc_939E:                               ; CODE XREF: _term_mouse+9A7j
.text:0000939E                 mov     eax, [ebp+arg_0]
.text:000093A1                 mov     ecx, [ebp+var_84]
.text:000093A7                 mov     [eax+0E54h], ecx
.text:000093AD                 mov     edx, [ebp+arg_0]
.text:000093B0                 mov     eax, [edx+0E64h]
.text:000093B6                 cmp     eax, [ebp+var_10]
.text:000093B9                 jle     short loc_93CC
.text:000093BB                 mov     ecx, [ebp+arg_0]
.text:000093BE                 mov     edx, [ecx+0E64h]
.text:000093C4                 mov     [ebp+var_88], edx
.text:000093CA                 jmp     short loc_93D5
.text:000093CC ; ---------------------------------------------------------------------------
.text:000093CC
.text:000093CC loc_93CC:                               ; CODE XREF: _term_mouse+9CDj
.text:000093CC                 mov     eax, [ebp+var_10]
.text:000093CF                 mov     [ebp+var_88], eax
.text:000093D5
.text:000093D5 loc_93D5:                               ; CODE XREF: _term_mouse+9DEj
.text:000093D5                 mov     ecx, [ebp+arg_0]
.text:000093D8                 mov     edx, [ebp+var_88]
.text:000093DE                 mov     [ecx+0E5Ch], edx
.text:000093E4
.text:000093E4 loc_93E4:                               ; CODE XREF: _term_mouse:loc_9312j
.text:000093E4                 mov     eax, [ebp+arg_0]
.text:000093E7                 push    eax
.text:000093E8                 call    _sel_spread
.text:000093ED                 add     esp, 4
.text:000093F0                 jmp     loc_949B
.text:000093F5 ; ---------------------------------------------------------------------------
.text:000093F5
.text:000093F5 loc_93F5:                               ; CODE XREF: _term_mouse+586j
.text:000093F5                                         ; _term_mouse+590j
.text:000093F5                 cmp     [ebp+arg_8], 4
.text:000093F9                 jz      short loc_9401
.text:000093FB                 cmp     [ebp+arg_8], 5
.text:000093FF                 jnz     short loc_9471
.text:00009401
.text:00009401 loc_9401:                               ; CODE XREF: _term_mouse+A0Dj
.text:00009401                 cmp     [ebp+arg_C], 5
.text:00009405                 jnz     short loc_9471
.text:00009407                 mov     ecx, [ebp+arg_0]
.text:0000940A                 cmp     dword ptr [ecx+0E48h], 2
.text:00009411                 jnz     short loc_9462
.text:00009413                 push    0
.text:00009415                 mov     edx, [ebp+arg_0]
.text:00009418                 xor     eax, eax
.text:0000941A                 cmp     dword ptr [edx+0E4Ch], 1
.text:00009421                 setz    al
.text:00009424                 push    eax
.text:00009425                 mov     ecx, [ebp+arg_0]
.text:00009428                 mov     edx, [ecx+0E60h]
.text:0000942E                 push    edx
.text:0000942F                 mov     eax, [ecx+0E5Ch]
.text:00009435                 push    eax
.text:00009436                 mov     ecx, [ebp+arg_0]
.text:00009439                 mov     edx, [ecx+0E58h]
.text:0000943F                 push    edx
.text:00009440                 mov     eax, [ecx+0E54h]
.text:00009446                 push    eax
.text:00009447                 mov     ecx, [ebp+arg_0]
.text:0000944A                 push    ecx
.text:0000944B                 call    _clipme
.text:00009450                 add     esp, 1Ch
.text:00009453                 mov     edx, [ebp+arg_0]
.text:00009456                 mov     dword ptr [edx+0E48h], 3
.text:00009460                 jmp     short loc_946F
.text:00009462 ; ---------------------------------------------------------------------------
.text:00009462
.text:00009462 loc_9462:                               ; CODE XREF: _term_mouse+A25j
.text:00009462                 mov     eax, [ebp+arg_0]
.text:00009465                 mov     dword ptr [eax+0E48h], 0
.text:0000946F
.text:0000946F loc_946F:                               ; CODE XREF: _term_mouse+A74j
.text:0000946F                 jmp     short loc_949B
.text:00009471 ; ---------------------------------------------------------------------------
.text:00009471
.text:00009471 loc_9471:                               ; CODE XREF: _term_mouse+A13j
.text:00009471                                         ; _term_mouse+A19j
.text:00009471                 cmp     [ebp+arg_8], 6
.text:00009475                 jnz     short loc_949B
.text:00009477                 cmp     [ebp+arg_C], 1
.text:0000947B                 jz      short loc_9489
.text:0000947D                 cmp     [ebp+arg_C], 2
.text:00009481                 jz      short loc_9489
.text:00009483                 cmp     [ebp+arg_C], 3
.text:00009487                 jnz     short loc_949B
.text:00009489
.text:00009489 loc_9489:                               ; CODE XREF: _term_mouse+A8Fj
.text:00009489                                         ; _term_mouse+A95j
.text:00009489                 mov     ecx, [ebp+arg_0]
.text:0000948C                 mov     edx, [ecx+1088h]
.text:00009492                 push    edx
.text:00009493                 call    _request_paste
.text:00009498                 add     esp, 4
.text:0000949B
.text:0000949B loc_949B:                               ; CODE XREF: _term_mouse+475j
.text:0000949B                                         ; _term_mouse+571j ...
.text:0000949B                 mov     eax, [ebp+arg_0]
.text:0000949E                 cmp     dword ptr [eax+0E48h], 2
.text:000094A5                 jz      short loc_94B3
.text:000094A7                 mov     ecx, [ebp+arg_0]
.text:000094AA                 push    ecx
.text:000094AB                 call    _term_out
.text:000094B0                 add     esp, 4
.text:000094B3
.text:000094B3 loc_94B3:                               ; CODE XREF: _term_mouse+AB9j
.text:000094B3                 mov     edx, [ebp+arg_0]
.text:000094B6                 push    edx
.text:000094B7                 call    _term_update
.text:000094BC                 add     esp, 4
.text:000094BF
.text:000094BF loc_94BF:                               ; CODE XREF: _term_mouse:$LN56j
.text:000094BF                                         ; _term_mouse+25Dj ...
.text:000094BF                 push    edx
.text:000094C0                 mov     ecx, ebp
.text:000094C2                 push    eax
.text:000094C3                 lea     edx, $LN100
.text:000094C9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000094CE                 pop     eax
.text:000094CF                 pop     edx
.text:000094D0                 pop     edi
.text:000094D1                 pop     esi
.text:000094D2                 mov     ecx, [ebp+var_4]
.text:000094D5                 xor     ecx, ebp
.text:000094D7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000094DC                 add     esp, 88h
.text:000094E2                 cmp     ebp, esp
.text:000094E4                 call    __RTC_CheckEsp
.text:000094E9                 mov     esp, ebp
.text:000094EB                 pop     ebp
.text:000094EC                 retn
.text:000094EC _term_mouse     endp
.text:000094EC
.text:000094EC ; ---------------------------------------------------------------------------
.text:000094ED                 align 10h
.text:000094F0 $LN100          dd 2                    ; DATA XREF: _term_mouse+AD7o
.text:000094F4                 dd offset $LN99
.text:000094F8 $LN99           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:000094F4o
.text:00009500                 dd offset $LN97         ; "selpoint"
.text:00009504                 dd 0FFFFFFACh, 20h
.text:0000950C                 dd offset $LN98         ; "abuf"
.text:00009510 $LN98           db 'abuf',0             ; DATA XREF: .text:0000950Co
.text:00009515 $LN97           db 'selpoint',0         ; DATA XREF: .text:00009500o
.text:0000951E                 align 10h
.text:00009520 $LN101          dd offset $LN61_0       ; DATA XREF: _term_mouse+1F5r
.text:00009520                 dd offset $LN60_0       ; jump table for switch statement
.text:00009520                 dd offset $LN59_0
.text:00009520                 dd offset $LN56
.text:00009520                 dd offset $LN56
.text:00009520                 dd offset $LN56
.text:00009520                 dd offset $LN58_0
.text:00009520                 dd offset $LN57_0
.text:00009540                 db 0Ch dup(0CCh)
.text:0000954C
.text:0000954C ; =============== S U B R O U T I N E =======================================
.text:0000954C
.text:0000954C ; Attributes: bp-based frame
.text:0000954C
.text:0000954C _term_out       proc near               ; CODE XREF: _term_mouse+ABFp
.text:0000954C                                         ; _term_deselect+2Bp ...
.text:0000954C
.text:0000954C var_418         = dword ptr -418h
.text:0000954C var_414         = dword ptr -414h
.text:0000954C var_410         = dword ptr -410h
.text:0000954C var_40C         = dword ptr -40Ch
.text:0000954C var_408         = dword ptr -408h
.text:0000954C var_404         = dword ptr -404h
.text:0000954C var_400         = dword ptr -400h
.text:0000954C var_3FC         = dword ptr -3FCh
.text:0000954C var_3F8         = dword ptr -3F8h
.text:0000954C var_3F4         = dword ptr -3F4h
.text:0000954C var_3F0         = dword ptr -3F0h
.text:0000954C var_3EC         = dword ptr -3ECh
.text:0000954C var_3E8         = dword ptr -3E8h
.text:0000954C var_3E4         = dword ptr -3E4h
.text:0000954C var_3E0         = dword ptr -3E0h
.text:0000954C var_3DC         = dword ptr -3DCh
.text:0000954C var_3D8         = dword ptr -3D8h
.text:0000954C var_3D4         = dword ptr -3D4h
.text:0000954C var_3D0         = dword ptr -3D0h
.text:0000954C var_3CC         = dword ptr -3CCh
.text:0000954C var_3C8         = dword ptr -3C8h
.text:0000954C var_3C4         = dword ptr -3C4h
.text:0000954C var_3C0         = dword ptr -3C0h
.text:0000954C var_3BC         = dword ptr -3BCh
.text:0000954C var_3B8         = dword ptr -3B8h
.text:0000954C var_3B4         = dword ptr -3B4h
.text:0000954C var_3B0         = dword ptr -3B0h
.text:0000954C var_3AC         = dword ptr -3ACh
.text:0000954C var_3A8         = dword ptr -3A8h
.text:0000954C var_3A4         = dword ptr -3A4h
.text:0000954C var_3A0         = dword ptr -3A0h
.text:0000954C var_39C         = dword ptr -39Ch
.text:0000954C var_398         = dword ptr -398h
.text:0000954C var_394         = dword ptr -394h
.text:0000954C var_390         = dword ptr -390h
.text:0000954C var_38C         = dword ptr -38Ch
.text:0000954C var_388         = dword ptr -388h
.text:0000954C var_384         = dword ptr -384h
.text:0000954C var_380         = dword ptr -380h
.text:0000954C var_37C         = dword ptr -37Ch
.text:0000954C var_378         = dword ptr -378h
.text:0000954C var_374         = dword ptr -374h
.text:0000954C var_370         = dword ptr -370h
.text:0000954C var_36C         = dword ptr -36Ch
.text:0000954C var_368         = dword ptr -368h
.text:0000954C var_364         = dword ptr -364h
.text:0000954C var_360         = dword ptr -360h
.text:0000954C var_35C         = dword ptr -35Ch
.text:0000954C var_358         = dword ptr -358h
.text:0000954C var_354         = dword ptr -354h
.text:0000954C var_350         = dword ptr -350h
.text:0000954C var_34C         = dword ptr -34Ch
.text:0000954C var_348         = dword ptr -348h
.text:0000954C var_344         = dword ptr -344h
.text:0000954C var_340         = dword ptr -340h
.text:0000954C var_33C         = dword ptr -33Ch
.text:0000954C var_338         = dword ptr -338h
.text:0000954C var_330         = dword ptr -330h
.text:0000954C var_32C         = dword ptr -32Ch
.text:0000954C var_324         = dword ptr -324h
.text:0000954C var_320         = dword ptr -320h
.text:0000954C Source          = byte ptr -318h
.text:0000954C var_2D4         = dword ptr -2D4h
.text:0000954C var_2D0         = dword ptr -2D0h
.text:0000954C var_2CC         = dword ptr -2CCh
.text:0000954C var_2C4         = dword ptr -2C4h
.text:0000954C var_2C0         = dword ptr -2C0h
.text:0000954C var_2B8         = dword ptr -2B8h
.text:0000954C var_2B4         = dword ptr -2B4h
.text:0000954C var_2AC         = byte ptr -2ACh
.text:0000954C var_2AA         = byte ptr -2AAh
.text:0000954C var_288         = dword ptr -288h
.text:0000954C var_284         = dword ptr -284h
.text:0000954C var_27C         = dword ptr -27Ch
.text:0000954C var_278         = dword ptr -278h
.text:0000954C var_270         = dword ptr -270h
.text:0000954C Str             = dword ptr -26Ch
.text:0000954C var_264         = byte ptr -264h
.text:0000954C var_210         = dword ptr -210h
.text:0000954C var_208         = dword ptr -208h
.text:0000954C var_1FC         = dword ptr -1FCh
.text:0000954C var_1F4         = dword ptr -1F4h
.text:0000954C var_1F0         = dword ptr -1F0h
.text:0000954C var_1EC         = dword ptr -1ECh
.text:0000954C var_1E8         = dword ptr -1E8h
.text:0000954C var_1E4         = dword ptr -1E4h
.text:0000954C var_1E0         = dword ptr -1E0h
.text:0000954C var_1DC         = dword ptr -1DCh
.text:0000954C Dest            = byte ptr -1D4h
.text:0000954C var_1B0         = dword ptr -1B0h
.text:0000954C var_1AC         = dword ptr -1ACh
.text:0000954C var_1A8         = dword ptr -1A8h
.text:0000954C var_1A4         = dword ptr -1A4h
.text:0000954C var_19C         = dword ptr -19Ch
.text:0000954C var_198         = dword ptr -198h
.text:0000954C var_18C         = dword ptr -18Ch
.text:0000954C var_188         = dword ptr -188h
.text:0000954C var_180         = dword ptr -180h
.text:0000954C var_17C         = dword ptr -17Ch
.text:0000954C var_178         = dword ptr -178h
.text:0000954C var_174         = dword ptr -174h
.text:0000954C var_16C         = dword ptr -16Ch
.text:0000954C var_168         = dword ptr -168h
.text:0000954C var_160         = dword ptr -160h
.text:0000954C var_15C         = dword ptr -15Ch
.text:0000954C var_158         = dword ptr -158h
.text:0000954C var_150         = dword ptr -150h
.text:0000954C var_14C         = dword ptr -14Ch
.text:0000954C var_144         = dword ptr -144h
.text:0000954C var_140         = dword ptr -140h
.text:0000954C var_13C         = dword ptr -13Ch
.text:0000954C Src             = dword ptr -134h
.text:0000954C Size            = dword ptr -128h
.text:0000954C var_120         = dword ptr -120h
.text:0000954C Dst             = byte ptr -118h
.text:0000954C var_14          = dword ptr -14h
.text:0000954C C               = dword ptr -0Ch
.text:0000954C var_4           = dword ptr -4
.text:0000954C arg_0           = dword ptr  8
.text:0000954C
.text:0000954C                 push    ebp
.text:0000954D                 mov     ebp, esp
.text:0000954F                 sub     esp, 418h
.text:00009555                 push    esi
.text:00009556                 push    edi
.text:00009557                 lea     edi, [ebp+var_418]
.text:0000955D                 mov     ecx, 106h
.text:00009562                 mov     eax, 0CCCCCCCCh
.text:00009567                 rep stosd
.text:00009569                 mov     eax, dword ptr ds:___security_cookie
.text:0000956E                 xor     eax, ebp
.text:00009570                 mov     [ebp+var_4], eax
.text:00009573                 mov     [ebp+Size], 0
.text:0000957D                 mov     [ebp+var_14], 0FFFFFFFFh
.text:00009584                 mov     [ebp+var_120], 0
.text:0000958E
.text:0000958E loc_958E:                               ; CODE XREF: _term_out:loc_97B7j
.text:0000958E                                         ; _term_out:loc_99B6j ...
.text:0000958E                 cmp     [ebp+Size], 0
.text:00009595                 jg      short loc_95B4
.text:00009597                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:0000959B                 jnz     short loc_95B4
.text:0000959D                 mov     eax, [ebp+arg_0]
.text:000095A0                 add     eax, 60h ; '`'
.text:000095A3                 push    eax
.text:000095A4                 call    _bufchain_size
.text:000095A9                 add     esp, 4
.text:000095AC                 test    eax, eax
.text:000095AE                 jle     loc_E514
.text:000095B4
.text:000095B4 loc_95B4:                               ; CODE XREF: _term_out+49j
.text:000095B4                                         ; _term_out+4Fj
.text:000095B4                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:000095B8                 jnz     loc_96BA
.text:000095BE                 cmp     [ebp+Size], 0
.text:000095C5                 jnz     loc_965D
.text:000095CB                 lea     ecx, [ebp+Size]
.text:000095D1                 push    ecx
.text:000095D2                 lea     edx, [ebp+Src]
.text:000095D8                 push    edx
.text:000095D9                 mov     eax, [ebp+arg_0]
.text:000095DC                 add     eax, 60h ; '`'
.text:000095DF                 push    eax
.text:000095E0                 call    _bufchain_prefix
.text:000095E5                 add     esp, 0Ch
.text:000095E8                 cmp     [ebp+Size], 100h
.text:000095F2                 jbe     short loc_95FE
.text:000095F4                 mov     [ebp+Size], 100h
.text:000095FE
.text:000095FE loc_95FE:                               ; CODE XREF: _term_out+A6j
.text:000095FE                 mov     ecx, [ebp+Size]
.text:00009604                 push    ecx             ; Size
.text:00009605                 mov     edx, [ebp+Src]
.text:0000960B                 push    edx             ; Src
.text:0000960C                 lea     eax, [ebp+Dst]
.text:00009612                 push    eax             ; Dst
.text:00009613                 call    _memcpy
.text:00009618                 add     esp, 0Ch
.text:0000961B                 mov     ecx, [ebp+Size]
.text:00009621                 push    ecx
.text:00009622                 mov     edx, [ebp+arg_0]
.text:00009625                 add     edx, 60h ; '`'
.text:00009628                 push    edx
.text:00009629                 call    _bufchain_consume
.text:0000962E                 add     esp, 8
.text:00009631                 lea     eax, [ebp+Dst]
.text:00009637                 mov     [ebp+var_120], eax
.text:0000963D                 cmp     [ebp+var_120], 0
.text:00009644                 jnz     short loc_965D
.text:00009646                 push    0AC0h           ; Line
.text:0000964B                 push    offset $SG87020 ; "..\\..\\..\\terminal.c"
.text:00009650                 push    offset $SG87021 ; "chars != NULL"
.text:00009655                 call    __wassert
.text:0000965A ; ---------------------------------------------------------------------------
.text:0000965A                 add     esp, 0Ch
.text:0000965D
.text:0000965D loc_965D:                               ; CODE XREF: _term_out+79j
.text:0000965D                                         ; _term_out+F8j
.text:0000965D                 mov     edx, [ebp+var_120]
.text:00009663                 movzx   eax, byte ptr [edx]
.text:00009666                 mov     [ebp+C], eax
.text:00009669                 mov     ecx, [ebp+var_120]
.text:0000966F                 add     ecx, 1
.text:00009672                 mov     [ebp+var_120], ecx
.text:00009678                 mov     edx, [ebp+Size]
.text:0000967E                 sub     edx, 1
.text:00009681                 mov     [ebp+Size], edx
.text:00009687                 mov     eax, [ebp+arg_0]
.text:0000968A                 cmp     dword ptr [eax+1128h], 2
.text:00009691                 jnz     short loc_96B8
.text:00009693                 mov     ecx, [ebp+arg_0]
.text:00009696                 cmp     dword ptr [ecx+108Ch], 0
.text:0000969D                 jz      short loc_96B8
.text:0000969F                 push    2
.text:000096A1                 movzx   edx, byte ptr [ebp+C]
.text:000096A5                 push    edx
.text:000096A6                 mov     eax, [ebp+arg_0]
.text:000096A9                 mov     ecx, [eax+108Ch]
.text:000096AF                 push    ecx
.text:000096B0                 call    _logtraffic
.text:000096B5                 add     esp, 0Ch
.text:000096B8
.text:000096B8 loc_96B8:                               ; CODE XREF: _term_out+145j
.text:000096B8                                         ; _term_out+151j
.text:000096B8                 jmp     short loc_96C7
.text:000096BA ; ---------------------------------------------------------------------------
.text:000096BA
.text:000096BA loc_96BA:                               ; CODE XREF: _term_out+6Cj
.text:000096BA                 mov     edx, [ebp+var_14]
.text:000096BD                 mov     [ebp+C], edx
.text:000096C0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:000096C7
.text:000096C7 loc_96C7:                               ; CODE XREF: _term_out:loc_96B8j
.text:000096C7                 mov     eax, [ebp+arg_0]
.text:000096CA                 cmp     dword ptr [eax+0ECh], 0
.text:000096D1                 jz      loc_97BC
.text:000096D7                 push    1
.text:000096D9                 lea     ecx, [ebp+C]
.text:000096DC                 push    ecx
.text:000096DD                 mov     edx, [ebp+arg_0]
.text:000096E0                 add     edx, 0F8h ; '°'
.text:000096E6                 push    edx
.text:000096E7                 call    _bufchain_add
.text:000096EC                 add     esp, 0Ch
.text:000096EF                 mov     eax, [ebp+arg_0]
.text:000096F2                 cmp     dword ptr [eax+0F0h], 0
.text:000096F9                 jz      loc_97BC
.text:000096FF                 cmp     [ebp+C], 1Bh
.text:00009703                 jnz     short loc_9717
.text:00009705                 mov     ecx, [ebp+arg_0]
.text:00009708                 mov     dword ptr [ecx+0F4h], 1
.text:00009712                 jmp     loc_979F
.text:00009717 ; ---------------------------------------------------------------------------
.text:00009717
.text:00009717 loc_9717:                               ; CODE XREF: _term_out+1B7j
.text:00009717                 cmp     [ebp+C], 9Bh ; '¢'
.text:0000971E                 jnz     short loc_972F
.text:00009720                 mov     edx, [ebp+arg_0]
.text:00009723                 mov     dword ptr [edx+0F4h], 2
.text:0000972D                 jmp     short loc_979F
.text:0000972F ; ---------------------------------------------------------------------------
.text:0000972F
.text:0000972F loc_972F:                               ; CODE XREF: _term_out+1D2j
.text:0000972F                 cmp     [ebp+C], 5Bh ; '['
.text:00009733                 jnz     short loc_9750
.text:00009735                 mov     eax, [ebp+arg_0]
.text:00009738                 cmp     dword ptr [eax+0F4h], 1
.text:0000973F                 jnz     short loc_9750
.text:00009741                 mov     ecx, [ebp+arg_0]
.text:00009744                 mov     dword ptr [ecx+0F4h], 2
.text:0000974E                 jmp     short loc_979F
.text:00009750 ; ---------------------------------------------------------------------------
.text:00009750
.text:00009750 loc_9750:                               ; CODE XREF: _term_out+1E7j
.text:00009750                                         ; _term_out+1F3j
.text:00009750                 cmp     [ebp+C], 34h ; '4'
.text:00009754                 jnz     short loc_9771
.text:00009756                 mov     edx, [ebp+arg_0]
.text:00009759                 cmp     dword ptr [edx+0F4h], 2
.text:00009760                 jnz     short loc_9771
.text:00009762                 mov     eax, [ebp+arg_0]
.text:00009765                 mov     dword ptr [eax+0F4h], 3
.text:0000976F                 jmp     short loc_979F
.text:00009771 ; ---------------------------------------------------------------------------
.text:00009771
.text:00009771 loc_9771:                               ; CODE XREF: _term_out+208j
.text:00009771                                         ; _term_out+214j
.text:00009771                 cmp     [ebp+C], 69h ; 'i'
.text:00009775                 jnz     short loc_9792
.text:00009777                 mov     ecx, [ebp+arg_0]
.text:0000977A                 cmp     dword ptr [ecx+0F4h], 3
.text:00009781                 jnz     short loc_9792
.text:00009783                 mov     edx, [ebp+arg_0]
.text:00009786                 mov     dword ptr [edx+0F4h], 4
.text:00009790                 jmp     short loc_979F
.text:00009792 ; ---------------------------------------------------------------------------
.text:00009792
.text:00009792 loc_9792:                               ; CODE XREF: _term_out+229j
.text:00009792                                         ; _term_out+235j
.text:00009792                 mov     eax, [ebp+arg_0]
.text:00009795                 mov     dword ptr [eax+0F4h], 0
.text:0000979F
.text:0000979F loc_979F:                               ; CODE XREF: _term_out+1C6j
.text:0000979F                                         ; _term_out+1E1j ...
.text:0000979F                 mov     ecx, [ebp+arg_0]
.text:000097A2                 cmp     dword ptr [ecx+0F4h], 4
.text:000097A9                 jnz     short loc_97B7
.text:000097AB                 mov     edx, [ebp+arg_0]
.text:000097AE                 push    edx
.text:000097AF                 call    _term_print_finish
.text:000097B4                 add     esp, 4
.text:000097B7
.text:000097B7 loc_97B7:                               ; CODE XREF: _term_out+25Dj
.text:000097B7                 jmp     loc_958E
.text:000097BC ; ---------------------------------------------------------------------------
.text:000097BC
.text:000097BC loc_97BC:                               ; CODE XREF: _term_out+185j
.text:000097BC                                         ; _term_out+1ADj
.text:000097BC                 mov     eax, [ebp+arg_0]
.text:000097BF                 cmp     dword ptr [eax+0E44h], 0
.text:000097C6                 jnz     loc_9C95
.text:000097CC                 mov     ecx, [ebp+arg_0]
.text:000097CF                 cmp     dword ptr [ecx+0DCh], 0
.text:000097D6                 jnz     short loc_97EE
.text:000097D8                 mov     edx, [ebp+arg_0]
.text:000097DB                 mov     eax, [edx+1090h]
.text:000097E1                 cmp     dword ptr [eax+0Ch], 0FDE9h
.text:000097E8                 jnz     loc_9B3C
.text:000097EE
.text:000097EE loc_97EE:                               ; CODE XREF: _term_out+28Aj
.text:000097EE                 mov     ecx, [ebp+arg_0]
.text:000097F1                 mov     edx, [ecx+0E0h]
.text:000097F7                 mov     [ebp+var_338], edx
.text:000097FD                 cmp     [ebp+var_338], 0
.text:00009804                 jz      short loc_9825
.text:00009806                 cmp     [ebp+var_338], 0
.text:0000980D                 jle     loc_9B37
.text:00009813                 cmp     [ebp+var_338], 5
.text:0000981A                 jle     loc_99BB
.text:00009820                 jmp     loc_9B37
.text:00009825 ; ---------------------------------------------------------------------------
.text:00009825
.text:00009825 loc_9825:                               ; CODE XREF: _term_out+2B8j
.text:00009825                 cmp     [ebp+C], 80h ; 'Ç'
.text:0000982C                 jnb     short loc_9879
.text:0000982E                 mov     eax, [ebp+arg_0]
.text:00009831                 mov     ecx, [eax+1090h]
.text:00009837                 mov     edx, [ebp+C]
.text:0000983A                 movzx   eax, byte ptr [ecx+edx+0A10h]
.text:00009842                 cmp     eax, 0FFh
.text:00009847                 jz      short loc_9862
.text:00009849                 mov     ecx, [ebp+arg_0]
.text:0000984C                 mov     edx, [ecx+1090h]
.text:00009852                 mov     eax, [ebp+C]
.text:00009855                 movzx   ecx, byte ptr [edx+eax+0A10h]
.text:0000985D                 mov     [ebp+C], ecx
.text:00009860                 jmp     short loc_986F
.text:00009862 ; ---------------------------------------------------------------------------
.text:00009862
.text:00009862 loc_9862:                               ; CODE XREF: _term_out+2FBj
.text:00009862                 movzx   edx, byte ptr [ebp+C]
.text:00009866                 or      edx, 0D800h
.text:0000986C                 mov     [ebp+C], edx
.text:0000986F
.text:0000986F loc_986F:                               ; CODE XREF: _term_out+314j
.text:0000986F                 jmp     loc_9B37
.text:00009874 ; ---------------------------------------------------------------------------
.text:00009874                 jmp     loc_99B6
.text:00009879 ; ---------------------------------------------------------------------------
.text:00009879
.text:00009879 loc_9879:                               ; CODE XREF: _term_out+2E0j
.text:00009879                 mov     eax, [ebp+C]
.text:0000987C                 and     eax, 0E0h
.text:00009881                 cmp     eax, 0C0h ; '+'
.text:00009886                 jnz     short loc_98B6
.text:00009888                 mov     ecx, [ebp+arg_0]
.text:0000988B                 mov     dword ptr [ecx+0E0h], 1
.text:00009895                 mov     edx, [ebp+arg_0]
.text:00009898                 mov     dword ptr [edx+0E8h], 1
.text:000098A2                 mov     eax, [ebp+C]
.text:000098A5                 and     eax, 1Fh
.text:000098A8                 mov     ecx, [ebp+arg_0]
.text:000098AB                 mov     [ecx+0E4h], eax
.text:000098B1                 jmp     loc_99B6
.text:000098B6 ; ---------------------------------------------------------------------------
.text:000098B6
.text:000098B6 loc_98B6:                               ; CODE XREF: _term_out+33Aj
.text:000098B6                 mov     edx, [ebp+C]
.text:000098B9                 and     edx, 0F0h
.text:000098BF                 cmp     edx, 0E0h ; 'a'
.text:000098C5                 jnz     short loc_98F5
.text:000098C7                 mov     eax, [ebp+arg_0]
.text:000098CA                 mov     dword ptr [eax+0E0h], 2
.text:000098D4                 mov     ecx, [ebp+arg_0]
.text:000098D7                 mov     dword ptr [ecx+0E8h], 2
.text:000098E1                 mov     edx, [ebp+C]
.text:000098E4                 and     edx, 0Fh
.text:000098E7                 mov     eax, [ebp+arg_0]
.text:000098EA                 mov     [eax+0E4h], edx
.text:000098F0                 jmp     loc_99B6
.text:000098F5 ; ---------------------------------------------------------------------------
.text:000098F5
.text:000098F5 loc_98F5:                               ; CODE XREF: _term_out+379j
.text:000098F5                 mov     ecx, [ebp+C]
.text:000098F8                 and     ecx, 0F8h
.text:000098FE                 cmp     ecx, 0F0h ; '='
.text:00009904                 jnz     short loc_9934
.text:00009906                 mov     edx, [ebp+arg_0]
.text:00009909                 mov     dword ptr [edx+0E0h], 3
.text:00009913                 mov     eax, [ebp+arg_0]
.text:00009916                 mov     dword ptr [eax+0E8h], 3
.text:00009920                 mov     ecx, [ebp+C]
.text:00009923                 and     ecx, 7
.text:00009926                 mov     edx, [ebp+arg_0]
.text:00009929                 mov     [edx+0E4h], ecx
.text:0000992F                 jmp     loc_99B6
.text:00009934 ; ---------------------------------------------------------------------------
.text:00009934
.text:00009934 loc_9934:                               ; CODE XREF: _term_out+3B8j
.text:00009934                 mov     eax, [ebp+C]
.text:00009937                 and     eax, 0FCh
.text:0000993C                 cmp     eax, 0F8h ; '°'
.text:00009941                 jnz     short loc_996E
.text:00009943                 mov     ecx, [ebp+arg_0]
.text:00009946                 mov     dword ptr [ecx+0E0h], 4
.text:00009950                 mov     edx, [ebp+arg_0]
.text:00009953                 mov     dword ptr [edx+0E8h], 4
.text:0000995D                 mov     eax, [ebp+C]
.text:00009960                 and     eax, 3
.text:00009963                 mov     ecx, [ebp+arg_0]
.text:00009966                 mov     [ecx+0E4h], eax
.text:0000996C                 jmp     short loc_99B6
.text:0000996E ; ---------------------------------------------------------------------------
.text:0000996E
.text:0000996E loc_996E:                               ; CODE XREF: _term_out+3F5j
.text:0000996E                 mov     edx, [ebp+C]
.text:00009971                 and     edx, 0FEh
.text:00009977                 cmp     edx, 0FCh ; 'n'
.text:0000997D                 jnz     short loc_99AA
.text:0000997F                 mov     eax, [ebp+arg_0]
.text:00009982                 mov     dword ptr [eax+0E0h], 5
.text:0000998C                 mov     ecx, [ebp+arg_0]
.text:0000998F                 mov     dword ptr [ecx+0E8h], 5
.text:00009999                 mov     edx, [ebp+C]
.text:0000999C                 and     edx, 1
.text:0000999F                 mov     eax, [ebp+arg_0]
.text:000099A2                 mov     [eax+0E4h], edx
.text:000099A8                 jmp     short loc_99B6
.text:000099AA ; ---------------------------------------------------------------------------
.text:000099AA
.text:000099AA loc_99AA:                               ; CODE XREF: _term_out+431j
.text:000099AA                 mov     [ebp+C], 0D961h
.text:000099B1                 jmp     loc_9B37
.text:000099B6 ; ---------------------------------------------------------------------------
.text:000099B6
.text:000099B6 loc_99B6:                               ; CODE XREF: _term_out+328j
.text:000099B6                                         ; _term_out+365j ...
.text:000099B6                 jmp     loc_958E
.text:000099BB ; ---------------------------------------------------------------------------
.text:000099BB
.text:000099BB loc_99BB:                               ; CODE XREF: _term_out+2CEj
.text:000099BB                 mov     ecx, [ebp+C]
.text:000099BE                 and     ecx, 0C0h
.text:000099C4                 cmp     ecx, 80h ; 'Ç'
.text:000099CA                 jz      short loc_99EB
.text:000099CC                 mov     edx, [ebp+C]
.text:000099CF                 mov     [ebp+var_14], edx
.text:000099D2                 mov     [ebp+C], 0D961h
.text:000099D9                 mov     eax, [ebp+arg_0]
.text:000099DC                 mov     dword ptr [eax+0E0h], 0
.text:000099E6                 jmp     loc_9B37
.text:000099EB ; ---------------------------------------------------------------------------
.text:000099EB
.text:000099EB loc_99EB:                               ; CODE XREF: _term_out+47Ej
.text:000099EB                 mov     ecx, [ebp+arg_0]
.text:000099EE                 mov     edx, [ecx+0E4h]
.text:000099F4                 shl     edx, 6
.text:000099F7                 mov     eax, [ebp+C]
.text:000099FA                 and     eax, 3Fh
.text:000099FD                 or      edx, eax
.text:000099FF                 mov     ecx, [ebp+arg_0]
.text:00009A02                 mov     [ecx+0E4h], edx
.text:00009A08                 mov     edx, [ebp+arg_0]
.text:00009A0B                 mov     eax, [edx+0E0h]
.text:00009A11                 sub     eax, 1
.text:00009A14                 mov     [ebp+var_33C], eax
.text:00009A1A                 mov     ecx, [ebp+arg_0]
.text:00009A1D                 mov     edx, [ebp+var_33C]
.text:00009A23                 mov     [ecx+0E0h], edx
.text:00009A29                 cmp     [ebp+var_33C], 0
.text:00009A30                 jz      short loc_9A37
.text:00009A32                 jmp     loc_958E
.text:00009A37 ; ---------------------------------------------------------------------------
.text:00009A37
.text:00009A37 loc_9A37:                               ; CODE XREF: _term_out+4E4j
.text:00009A37                 mov     eax, [ebp+arg_0]
.text:00009A3A                 mov     ecx, [eax+0E4h]
.text:00009A40                 mov     [ebp+C], ecx
.text:00009A43                 cmp     [ebp+C], 80h ; 'Ç'
.text:00009A4A                 jb      short loc_9AA0
.text:00009A4C                 cmp     [ebp+C], 800h
.text:00009A53                 jnb     short loc_9A61
.text:00009A55                 mov     edx, [ebp+arg_0]
.text:00009A58                 cmp     dword ptr [edx+0E8h], 2
.text:00009A5F                 jge     short loc_9AA0
.text:00009A61
.text:00009A61 loc_9A61:                               ; CODE XREF: _term_out+507j
.text:00009A61                 cmp     [ebp+C], (offset loc_FFFF+1)
.text:00009A68                 jnb     short loc_9A76
.text:00009A6A                 mov     eax, [ebp+arg_0]
.text:00009A6D                 cmp     dword ptr [eax+0E8h], 3
.text:00009A74                 jge     short loc_9AA0
.text:00009A76
.text:00009A76 loc_9A76:                               ; CODE XREF: _term_out+51Cj
.text:00009A76                 cmp     [ebp+C], 200000h
.text:00009A7D                 jnb     short loc_9A8B
.text:00009A7F                 mov     ecx, [ebp+arg_0]
.text:00009A82                 cmp     dword ptr [ecx+0E8h], 4
.text:00009A89                 jge     short loc_9AA0
.text:00009A8B
.text:00009A8B loc_9A8B:                               ; CODE XREF: _term_out+531j
.text:00009A8B                 cmp     [ebp+C], 4000000h
.text:00009A92                 jnb     short loc_9AA7
.text:00009A94                 mov     edx, [ebp+arg_0]
.text:00009A97                 cmp     dword ptr [edx+0E8h], 5
.text:00009A9E                 jl      short loc_9AA7
.text:00009AA0
.text:00009AA0 loc_9AA0:                               ; CODE XREF: _term_out+4FEj
.text:00009AA0                                         ; _term_out+513j ...
.text:00009AA0                 mov     [ebp+C], 0D961h
.text:00009AA7
.text:00009AA7 loc_9AA7:                               ; CODE XREF: _term_out+546j
.text:00009AA7                                         ; _term_out+552j
.text:00009AA7                 cmp     [ebp+C], 2028h
.text:00009AAE                 jz      short loc_9AB9
.text:00009AB0                 cmp     [ebp+C], 2029h
.text:00009AB7                 jnz     short loc_9AC0
.text:00009AB9
.text:00009AB9 loc_9AB9:                               ; CODE XREF: _term_out+562j
.text:00009AB9                 mov     [ebp+C], 85h ; 'à'
.text:00009AC0
.text:00009AC0 loc_9AC0:                               ; CODE XREF: _term_out+56Bj
.text:00009AC0                 cmp     [ebp+C], 0A0h ; 'á'
.text:00009AC7                 jnb     short loc_9AD0
.text:00009AC9                 mov     [ebp+C], 0FFFDh
.text:00009AD0
.text:00009AD0 loc_9AD0:                               ; CODE XREF: _term_out+57Bj
.text:00009AD0                 cmp     [ebp+C], 0D800h
.text:00009AD7                 jb      short loc_9AE9
.text:00009AD9                 cmp     [ebp+C], 0E000h
.text:00009AE0                 jnb     short loc_9AE9
.text:00009AE2                 mov     [ebp+C], 0D961h
.text:00009AE9
.text:00009AE9 loc_9AE9:                               ; CODE XREF: _term_out+58Bj
.text:00009AE9                                         ; _term_out+594j
.text:00009AE9                 cmp     [ebp+C], 10FFFFh
.text:00009AF0                 jbe     short loc_9AF9
.text:00009AF2                 mov     [ebp+C], 0D961h
.text:00009AF9
.text:00009AF9 loc_9AF9:                               ; CODE XREF: _term_out+5A4j
.text:00009AF9                 cmp     [ebp+C], 0E0000h
.text:00009B00                 jb      short loc_9B10
.text:00009B02                 cmp     [ebp+C], 0E007Fh
.text:00009B09                 ja      short loc_9B10
.text:00009B0B                 jmp     loc_958E
.text:00009B10 ; ---------------------------------------------------------------------------
.text:00009B10
.text:00009B10 loc_9B10:                               ; CODE XREF: _term_out+5B4j
.text:00009B10                                         ; _term_out+5BDj
.text:00009B10                 cmp     [ebp+C], 0FEFFh
.text:00009B17                 jnz     short loc_9B1E
.text:00009B19                 jmp     loc_958E
.text:00009B1E ; ---------------------------------------------------------------------------
.text:00009B1E
.text:00009B1E loc_9B1E:                               ; CODE XREF: _term_out+5CBj
.text:00009B1E                 cmp     [ebp+C], 0FFFEh
.text:00009B25                 jz      short loc_9B30
.text:00009B27                 cmp     [ebp+C], 0FFFFh
.text:00009B2E                 jnz     short loc_9B37
.text:00009B30
.text:00009B30 loc_9B30:                               ; CODE XREF: _term_out+5D9j
.text:00009B30                 mov     [ebp+C], 0D961h
.text:00009B37
.text:00009B37 loc_9B37:                               ; CODE XREF: _term_out+2C1j
.text:00009B37                                         ; _term_out+2D4j ...
.text:00009B37                 jmp     loc_9C95
.text:00009B3C ; ---------------------------------------------------------------------------
.text:00009B3C
.text:00009B3C loc_9B3C:                               ; CODE XREF: _term_out+29Cj
.text:00009B3C                 mov     eax, [ebp+arg_0]
.text:00009B3F                 cmp     dword ptr [eax+0D0h], 0
.text:00009B46                 jz      short loc_9B88
.text:00009B48                 cmp     [ebp+C], 1Bh
.text:00009B4C                 jz      short loc_9B88
.text:00009B4E                 cmp     [ebp+C], 0Ah
.text:00009B52                 jz      short loc_9B88
.text:00009B54                 cmp     [ebp+C], 0Dh
.text:00009B58                 jz      short loc_9B88
.text:00009B5A                 cmp     [ebp+C], 8
.text:00009B5E                 jz      short loc_9B88
.text:00009B60                 mov     ecx, [ebp+arg_0]
.text:00009B63                 cmp     dword ptr [ecx+0D0h], 2
.text:00009B6A                 jnz     short loc_9B78
.text:00009B6C                 mov     edx, [ebp+C]
.text:00009B6F                 or      edx, 80h
.text:00009B75                 mov     [ebp+C], edx
.text:00009B78
.text:00009B78 loc_9B78:                               ; CODE XREF: _term_out+61Ej
.text:00009B78                 mov     eax, [ebp+C]
.text:00009B7B                 or      eax, 0DA00h
.text:00009B80                 mov     [ebp+C], eax
.text:00009B83                 jmp     loc_9C95
.text:00009B88 ; ---------------------------------------------------------------------------
.text:00009B88
.text:00009B88 loc_9B88:                               ; CODE XREF: _term_out+5FAj
.text:00009B88                                         ; _term_out+600j ...
.text:00009B88                 mov     ecx, [ebp+arg_0]
.text:00009B8B                 mov     edx, [ecx+94h]
.text:00009B91                 mov     eax, [ebp+arg_0]
.text:00009B94                 mov     ecx, [eax+edx*4+170h]
.text:00009B9B                 mov     [ebp+var_340], ecx
.text:00009BA1                 cmp     [ebp+var_340], 0DA00h
.text:00009BAB                 jg      short loc_9BDA
.text:00009BAD                 cmp     [ebp+var_340], 0DA00h
.text:00009BB7                 jz      loc_9C82
.text:00009BBD                 cmp     [ebp+var_340], 0D800h
.text:00009BC7                 jz      short loc_9C3E
.text:00009BC9                 cmp     [ebp+var_340], 0D900h
.text:00009BD3                 jz      short loc_9BEB
.text:00009BD5                 jmp     loc_9C95
.text:00009BDA ; ---------------------------------------------------------------------------
.text:00009BDA
.text:00009BDA loc_9BDA:                               ; CODE XREF: _term_out+65Fj
.text:00009BDA                 cmp     [ebp+var_340], 0DB00h
.text:00009BE4                 jz      short loc_9C2F
.text:00009BE6                 jmp     loc_9C95
.text:00009BEB ; ---------------------------------------------------------------------------
.text:00009BEB
.text:00009BEB loc_9BEB:                               ; CODE XREF: _term_out+687j
.text:00009BEB                 mov     edx, [ebp+arg_0]
.text:00009BEE                 mov     eax, [edx+1090h]
.text:00009BF4                 mov     ecx, [ebp+C]
.text:00009BF7                 movzx   edx, byte ptr [eax+ecx+0A10h]
.text:00009BFF                 cmp     edx, 0FFh
.text:00009C05                 jz      short loc_9C20
.text:00009C07                 mov     eax, [ebp+arg_0]
.text:00009C0A                 mov     ecx, [eax+1090h]
.text:00009C10                 mov     edx, [ebp+C]
.text:00009C13                 movzx   eax, byte ptr [ecx+edx+0A10h]
.text:00009C1B                 mov     [ebp+C], eax
.text:00009C1E                 jmp     short loc_9C2D
.text:00009C20 ; ---------------------------------------------------------------------------
.text:00009C20
.text:00009C20 loc_9C20:                               ; CODE XREF: _term_out+6B9j
.text:00009C20                 movzx   ecx, byte ptr [ebp+C]
.text:00009C24                 or      ecx, 0D900h
.text:00009C2A                 mov     [ebp+C], ecx
.text:00009C2D
.text:00009C2D loc_9C2D:                               ; CODE XREF: _term_out+6D2j
.text:00009C2D                 jmp     short loc_9C95
.text:00009C2F ; ---------------------------------------------------------------------------
.text:00009C2F
.text:00009C2F loc_9C2F:                               ; CODE XREF: _term_out+698j
.text:00009C2F                 cmp     [ebp+C], 23h ; '#'
.text:00009C33                 jnz     short loc_9C3E
.text:00009C35                 mov     [ebp+C], 0D97Dh
.text:00009C3C                 jmp     short loc_9C95
.text:00009C3E ; ---------------------------------------------------------------------------
.text:00009C3E
.text:00009C3E loc_9C3E:                               ; CODE XREF: _term_out+67Bj
.text:00009C3E                                         ; _term_out+6E7j
.text:00009C3E                 mov     edx, [ebp+arg_0]
.text:00009C41                 mov     eax, [edx+1090h]
.text:00009C47                 mov     ecx, [ebp+C]
.text:00009C4A                 movzx   edx, byte ptr [eax+ecx+0A10h]
.text:00009C52                 cmp     edx, 0FFh
.text:00009C58                 jz      short loc_9C73
.text:00009C5A                 mov     eax, [ebp+arg_0]
.text:00009C5D                 mov     ecx, [eax+1090h]
.text:00009C63                 mov     edx, [ebp+C]
.text:00009C66                 movzx   eax, byte ptr [ecx+edx+0A10h]
.text:00009C6E                 mov     [ebp+C], eax
.text:00009C71                 jmp     short loc_9C80
.text:00009C73 ; ---------------------------------------------------------------------------
.text:00009C73
.text:00009C73 loc_9C73:                               ; CODE XREF: _term_out+70Cj
.text:00009C73                 movzx   ecx, byte ptr [ebp+C]
.text:00009C77                 or      ecx, 0D800h
.text:00009C7D                 mov     [ebp+C], ecx
.text:00009C80
.text:00009C80 loc_9C80:                               ; CODE XREF: _term_out+725j
.text:00009C80                 jmp     short loc_9C95
.text:00009C82 ; ---------------------------------------------------------------------------
.text:00009C82
.text:00009C82 loc_9C82:                               ; CODE XREF: _term_out+66Bj
.text:00009C82                 cmp     [ebp+C], 20h ; ' '
.text:00009C86                 jb      short loc_9C95
.text:00009C88                 movzx   edx, byte ptr [ebp+C]
.text:00009C8C                 or      edx, 0DA00h
.text:00009C92                 mov     [ebp+C], edx
.text:00009C95
.text:00009C95 loc_9C95:                               ; CODE XREF: _term_out+27Aj
.text:00009C95                                         ; _term_out:loc_9B37j ...
.text:00009C95                 mov     eax, [ebp+C]
.text:00009C98                 and     eax, 0FFFFFFE0h
.text:00009C9B                 cmp     eax, 80h ; 'Ç'
.text:00009CA0                 jnz     short loc_9CFC
.text:00009CA2                 mov     ecx, [ebp+arg_0]
.text:00009CA5                 cmp     dword ptr [ecx+0E44h], 5
.text:00009CAC                 jge     short loc_9CFC
.text:00009CAE                 mov     edx, [ebp+arg_0]
.text:00009CB1                 cmp     dword ptr [edx+148h], 0
.text:00009CB8                 jnz     short loc_9CFC
.text:00009CBA                 mov     eax, [ebp+arg_0]
.text:00009CBD                 mov     ecx, [eax]
.text:00009CBF                 and     ecx, 10h
.text:00009CC2                 jz      short loc_9CFC
.text:00009CC4                 cmp     [ebp+C], 9Ah ; 'Ü'
.text:00009CCB                 jnz     short loc_9CD6
.text:00009CCD                 mov     [ebp+C], 0
.text:00009CD4                 jmp     short loc_9CFC
.text:00009CD6 ; ---------------------------------------------------------------------------
.text:00009CD6
.text:00009CD6 loc_9CD6:                               ; CODE XREF: _term_out+77Fj
.text:00009CD6                 mov     edx, [ebp+arg_0]
.text:00009CD9                 mov     dword ptr [edx+0E44h], 1
.text:00009CE3                 mov     eax, [ebp+arg_0]
.text:00009CE6                 mov     dword ptr [eax+230h], 0
.text:00009CF0                 mov     ecx, [ebp+C]
.text:00009CF3                 and     ecx, 1Fh
.text:00009CF6                 add     ecx, 40h ; '@'
.text:00009CF9                 mov     [ebp+C], ecx
.text:00009CFC
.text:00009CFC loc_9CFC:                               ; CODE XREF: _term_out+754j
.text:00009CFC                                         ; _term_out+760j ...
.text:00009CFC                 cmp     [ebp+C], 7Fh ; ''
.text:00009D00                 jnz     loc_9DD1
.text:00009D06                 mov     edx, [ebp+arg_0]
.text:00009D09                 cmp     dword ptr [edx+0E44h], 5
.text:00009D10                 jge     loc_9DD1
.text:00009D16                 mov     eax, [ebp+arg_0]
.text:00009D19                 mov     ecx, [eax]
.text:00009D1B                 and     ecx, 4000h
.text:00009D21                 jz      loc_9DD1
.text:00009D27                 mov     edx, [ebp+arg_0]
.text:00009D2A                 cmp     dword ptr [edx+70h], 0
.text:00009D2E                 jz      short loc_9D4B
.text:00009D30                 mov     eax, [ebp+arg_0]
.text:00009D33                 cmp     dword ptr [eax+8Ch], 0
.text:00009D3A                 jnz     short loc_9D4B
.text:00009D3C                 mov     ecx, [ebp+arg_0]
.text:00009D3F                 mov     edx, [ecx+70h]
.text:00009D42                 sub     edx, 1
.text:00009D45                 mov     eax, [ebp+arg_0]
.text:00009D48                 mov     [eax+70h], edx
.text:00009D4B
.text:00009D4B loc_9D4B:                               ; CODE XREF: _term_out+7E2j
.text:00009D4B                                         ; _term_out+7EEj
.text:00009D4B                 mov     ecx, [ebp+arg_0]
.text:00009D4E                 mov     dword ptr [ecx+8Ch], 0
.text:00009D58                 mov     edx, [ebp+arg_0]
.text:00009D5B                 cmp     dword ptr [edx+1140h], 0
.text:00009D62                 jnz     short loc_9DCC
.text:00009D64                 mov     eax, [ebp+arg_0]
.text:00009D67                 mov     ecx, [eax+6Ch]
.text:00009D6A                 push    ecx
.text:00009D6B                 mov     edx, [ebp+arg_0]
.text:00009D6E                 mov     eax, [edx+70h]
.text:00009D71                 push    eax
.text:00009D72                 mov     ecx, [ebp+arg_0]
.text:00009D75                 push    ecx
.text:00009D76                 call    _check_boundary
.text:00009D7B                 add     esp, 0Ch
.text:00009D7E                 mov     edx, [ebp+arg_0]
.text:00009D81                 mov     eax, [edx+6Ch]
.text:00009D84                 push    eax
.text:00009D85                 mov     ecx, [ebp+arg_0]
.text:00009D88                 mov     edx, [ecx+70h]
.text:00009D8B                 add     edx, 1
.text:00009D8E                 push    edx
.text:00009D8F                 mov     eax, [ebp+arg_0]
.text:00009D92                 push    eax
.text:00009D93                 call    _check_boundary
.text:00009D98                 add     esp, 0Ch
.text:00009D9B                 mov     ecx, [ebp+arg_0]
.text:00009D9E                 add     ecx, 54h ; 'T'
.text:00009DA1                 push    ecx
.text:00009DA2                 mov     edx, [ebp+arg_0]
.text:00009DA5                 mov     eax, [edx+70h]
.text:00009DA8                 push    eax
.text:00009DA9                 push    1
.text:00009DAB                 push    0B8Ch
.text:00009DB0                 mov     ecx, [ebp+arg_0]
.text:00009DB3                 mov     edx, [ecx+6Ch]
.text:00009DB6                 push    edx
.text:00009DB7                 mov     eax, [ebp+arg_0]
.text:00009DBA                 push    eax
.text:00009DBB                 call    _lineptr
.text:00009DC0                 add     esp, 10h
.text:00009DC3                 push    eax
.text:00009DC4                 call    _copy_termchar
.text:00009DC9                 add     esp, 0Ch
.text:00009DCC
.text:00009DCC loc_9DCC:                               ; CODE XREF: _term_out+816j
.text:00009DCC                 jmp     $LN526          ; jumptable 0000A493 default case
.text:00009DD1 ; ---------------------------------------------------------------------------
.text:00009DD1
.text:00009DD1 loc_9DD1:                               ; CODE XREF: _term_out+7B4j
.text:00009DD1                                         ; _term_out+7C4j ...
.text:00009DD1                 mov     ecx, [ebp+C]
.text:00009DD4                 and     ecx, 0FFFFFFE0h
.text:00009DD7                 jnz     loc_A471
.text:00009DDD                 mov     edx, [ebp+arg_0]
.text:00009DE0                 cmp     dword ptr [edx+0E44h], 5
.text:00009DE7                 jge     loc_A471
.text:00009DED                 mov     eax, [ebp+C]
.text:00009DF0                 mov     [ebp+var_344], eax
.text:00009DF6                 mov     ecx, [ebp+var_344]
.text:00009DFC                 sub     ecx, 5
.text:00009DFF                 mov     [ebp+var_344], ecx
.text:00009E05                 cmp     [ebp+var_344], 16h ; switch 23 cases
.text:00009E0C                 ja      $LN523          ; jumptable 00009E1F default case
.text:00009E12                 mov     edx, [ebp+var_344]
.text:00009E18                 movzx   eax, ds:$LN705[edx]
.text:00009E1F                 jmp     ds:$LN731[eax*4] ; switch jump
.text:00009E26 ; ---------------------------------------------------------------------------
.text:00009E26
.text:00009E26 $LN522:                                 ; CODE XREF: _term_out+8D3j
.text:00009E26                                         ; DATA XREF: .text:$LN731o
.text:00009E26                 mov     ecx, [ebp+arg_0] ; jumptable 00009E1F case 0
.text:00009E29                 mov     edx, [ecx]
.text:00009E2B                 and     edx, 1
.text:00009E2E                 jnz     short loc_9E42
.text:00009E30                 mov     eax, [ebp+arg_0]
.text:00009E33                 mov     dword ptr [eax+0E44h], 0
.text:00009E3D                 jmp     $LN523          ; jumptable 00009E1F default case
.text:00009E42 ; ---------------------------------------------------------------------------
.text:00009E42
.text:00009E42 loc_9E42:                               ; CODE XREF: _term_out+8E2j
.text:00009E42                 mov     ecx, [ebp+arg_0]
.text:00009E45                 cmp     dword ptr [ecx+1084h], 0
.text:00009E4C                 jz      short loc_9E78
.text:00009E4E                 push    0
.text:00009E50                 mov     edx, [ebp+arg_0]
.text:00009E53                 mov     eax, [edx+10DCh]
.text:00009E59                 push    eax
.text:00009E5A                 mov     ecx, [ebp+arg_0]
.text:00009E5D                 mov     edx, [ecx+10D8h]
.text:00009E63                 push    edx
.text:00009E64                 push    0
.text:00009E66                 mov     eax, [ebp+arg_0]
.text:00009E69                 mov     ecx, [eax+1084h]
.text:00009E6F                 push    ecx
.text:00009E70                 call    _lpage_send
.text:00009E75                 add     esp, 14h
.text:00009E78
.text:00009E78 loc_9E78:                               ; CODE XREF: _term_out+900j
.text:00009E78                 jmp     $LN523          ; jumptable 00009E1F default case
.text:00009E7D ; ---------------------------------------------------------------------------
.text:00009E7D
.text:00009E7D $LN519:                                 ; CODE XREF: _term_out+8D3j
.text:00009E7D                                         ; DATA XREF: .text:$LN731o
.text:00009E7D                 mov     esi, esp        ; jumptable 00009E1F case 2
.text:00009E7F                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:00009E85                 cmp     esi, esp
.text:00009E87                 call    __RTC_CheckEsp
.text:00009E8C                 mov     [ebp+var_140], eax
.text:00009E92                 mov     edx, [ebp+arg_0]
.text:00009E95                 cmp     dword ptr [edx+34h], 0
.text:00009E99                 jnz     short loc_9F08
.text:00009E9B                 push    8
.text:00009E9D                 push    1
.text:00009E9F                 call    _safemalloc
.text:00009EA4                 add     esp, 8
.text:00009EA7                 mov     [ebp+var_13C], eax
.text:00009EAD                 mov     eax, [ebp+var_13C]
.text:00009EB3                 mov     ecx, [ebp+var_140]
.text:00009EB9                 mov     [eax+4], ecx
.text:00009EBC                 mov     edx, [ebp+var_13C]
.text:00009EC2                 mov     dword ptr [edx], 0
.text:00009EC8                 mov     eax, [ebp+arg_0]
.text:00009ECB                 cmp     dword ptr [eax+28h], 0
.text:00009ECF                 jnz     short loc_9EDF
.text:00009ED1                 mov     ecx, [ebp+arg_0]
.text:00009ED4                 mov     edx, [ebp+var_13C]
.text:00009EDA                 mov     [ecx+28h], edx
.text:00009EDD                 jmp     short loc_9EED
.text:00009EDF ; ---------------------------------------------------------------------------
.text:00009EDF
.text:00009EDF loc_9EDF:                               ; CODE XREF: _term_out+983j
.text:00009EDF                 mov     eax, [ebp+arg_0]
.text:00009EE2                 mov     ecx, [eax+2Ch]
.text:00009EE5                 mov     edx, [ebp+var_13C]
.text:00009EEB                 mov     [ecx], edx
.text:00009EED
.text:00009EED loc_9EED:                               ; CODE XREF: _term_out+991j
.text:00009EED                 mov     eax, [ebp+arg_0]
.text:00009EF0                 mov     ecx, [ebp+var_13C]
.text:00009EF6                 mov     [eax+2Ch], ecx
.text:00009EF9                 mov     edx, [ebp+arg_0]
.text:00009EFC                 mov     eax, [edx+30h]
.text:00009EFF                 add     eax, 1
.text:00009F02                 mov     ecx, [ebp+arg_0]
.text:00009F05                 mov     [ecx+30h], eax
.text:00009F08
.text:00009F08 loc_9F08:                               ; CODE XREF: _term_out+94Dj
.text:00009F08                                         ; _term_out+A2Aj
.text:00009F08                 mov     edx, [ebp+arg_0]
.text:00009F0B                 cmp     dword ptr [edx+28h], 0
.text:00009F0F                 jz      short loc_9F78
.text:00009F11                 mov     eax, [ebp+arg_0]
.text:00009F14                 mov     ecx, [eax+28h]
.text:00009F17                 mov     edx, [ebp+arg_0]
.text:00009F1A                 mov     eax, [ebp+var_140]
.text:00009F20                 sub     eax, [edx+10F4h]
.text:00009F26                 cmp     [ecx+4], eax
.text:00009F29                 jnb     short loc_9F78
.text:00009F2B                 mov     ecx, [ebp+arg_0]
.text:00009F2E                 mov     edx, [ecx+28h]
.text:00009F31                 mov     [ebp+var_144], edx
.text:00009F37                 mov     eax, [ebp+arg_0]
.text:00009F3A                 mov     ecx, [ebp+var_144]
.text:00009F40                 mov     edx, [ecx]
.text:00009F42                 mov     [eax+28h], edx
.text:00009F45                 mov     eax, [ebp+var_144]
.text:00009F4B                 push    eax
.text:00009F4C                 call    _safefree
.text:00009F51                 add     esp, 4
.text:00009F54                 mov     ecx, [ebp+arg_0]
.text:00009F57                 cmp     dword ptr [ecx+28h], 0
.text:00009F5B                 jnz     short loc_9F67
.text:00009F5D                 mov     edx, [ebp+arg_0]
.text:00009F60                 mov     dword ptr [edx+2Ch], 0
.text:00009F67
.text:00009F67 loc_9F67:                               ; CODE XREF: _term_out+A0Fj
.text:00009F67                 mov     eax, [ebp+arg_0]
.text:00009F6A                 mov     ecx, [eax+30h]
.text:00009F6D                 sub     ecx, 1
.text:00009F70                 mov     edx, [ebp+arg_0]
.text:00009F73                 mov     [edx+30h], ecx
.text:00009F76                 jmp     short loc_9F08
.text:00009F78 ; ---------------------------------------------------------------------------
.text:00009F78
.text:00009F78 loc_9F78:                               ; CODE XREF: _term_out+9C3j
.text:00009F78                                         ; _term_out+9DDj
.text:00009F78                 mov     eax, [ebp+arg_0]
.text:00009F7B                 cmp     dword ptr [eax+10E8h], 0
.text:00009F82                 jz      short loc_9FB0
.text:00009F84                 mov     ecx, [ebp+arg_0]
.text:00009F87                 cmp     dword ptr [ecx+34h], 0
.text:00009F8B                 jz      short loc_9FB0
.text:00009F8D                 mov     edx, [ebp+arg_0]
.text:00009F90                 mov     eax, [ebp+var_140]
.text:00009F96                 sub     eax, [edx+38h]
.text:00009F99                 mov     ecx, [ebp+arg_0]
.text:00009F9C                 cmp     eax, [ecx+10F0h]
.text:00009FA2                 jb      short loc_9FB0
.text:00009FA4                 mov     edx, [ebp+arg_0]
.text:00009FA7                 mov     dword ptr [edx+34h], 0
.text:00009FAE                 jmp     short loc_9FE0
.text:00009FB0 ; ---------------------------------------------------------------------------
.text:00009FB0
.text:00009FB0 loc_9FB0:                               ; CODE XREF: _term_out+A36j
.text:00009FB0                                         ; _term_out+A3Fj ...
.text:00009FB0                 mov     eax, [ebp+arg_0]
.text:00009FB3                 cmp     dword ptr [eax+10E8h], 0
.text:00009FBA                 jz      short loc_9FE0
.text:00009FBC                 mov     ecx, [ebp+arg_0]
.text:00009FBF                 cmp     dword ptr [ecx+34h], 0
.text:00009FC3                 jnz     short loc_9FE0
.text:00009FC5                 mov     edx, [ebp+arg_0]
.text:00009FC8                 mov     eax, [ebp+arg_0]
.text:00009FCB                 mov     ecx, [edx+30h]
.text:00009FCE                 cmp     ecx, [eax+10ECh]
.text:00009FD4                 jl      short loc_9FE0
.text:00009FD6                 mov     edx, [ebp+arg_0]
.text:00009FD9                 mov     dword ptr [edx+34h], 1
.text:00009FE0
.text:00009FE0 loc_9FE0:                               ; CODE XREF: _term_out+A62j
.text:00009FE0                                         ; _term_out+A6Ej ...
.text:00009FE0                 mov     eax, [ebp+arg_0]
.text:00009FE3                 mov     ecx, [ebp+var_140]
.text:00009FE9                 mov     [eax+38h], ecx
.text:00009FEC                 mov     edx, [ebp+arg_0]
.text:00009FEF                 cmp     dword ptr [edx+10E8h], 0
.text:00009FF6                 jz      short loc_A001
.text:00009FF8                 mov     eax, [ebp+arg_0]
.text:00009FFB                 cmp     dword ptr [eax+34h], 0
.text:00009FFF                 jnz     short loc_A039
.text:0000A001
.text:0000A001 loc_A001:                               ; CODE XREF: _term_out+AAAj
.text:0000A001                 mov     ecx, [ebp+arg_0]
.text:0000A004                 mov     edx, [ecx+10E4h]
.text:0000A00A                 push    edx
.text:0000A00B                 mov     eax, [ebp+arg_0]
.text:0000A00E                 mov     ecx, [eax+1088h]
.text:0000A014                 push    ecx
.text:0000A015                 call    _do_beep
.text:0000A01A                 add     esp, 8
.text:0000A01D                 mov     edx, [ebp+arg_0]
.text:0000A020                 cmp     dword ptr [edx+10E4h], 2
.text:0000A027                 jnz     short loc_A039
.text:0000A029                 push    0
.text:0000A02B                 push    0
.text:0000A02D                 mov     eax, [ebp+arg_0]
.text:0000A030                 push    eax
.text:0000A031                 call    _term_schedule_vbell
.text:0000A036                 add     esp, 0Ch
.text:0000A039
.text:0000A039 loc_A039:                               ; CODE XREF: _term_out+AB3j
.text:0000A039                                         ; _term_out+ADBj
.text:0000A039                 mov     ecx, [ebp+arg_0]
.text:0000A03C                 push    ecx
.text:0000A03D                 call    _seen_disp_event
.text:0000A042                 add     esp, 4
.text:0000A045                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A04A ; ---------------------------------------------------------------------------
.text:0000A04A
.text:0000A04A $LN506:                                 ; CODE XREF: _term_out+8D3j
.text:0000A04A                                         ; DATA XREF: .text:$LN731o
.text:0000A04A                 mov     edx, [ebp+arg_0] ; jumptable 00009E1F case 3
.text:0000A04D                 cmp     dword ptr [edx+70h], 0
.text:0000A051                 jnz     short loc_A06A
.text:0000A053                 mov     eax, [ebp+arg_0]
.text:0000A056                 cmp     dword ptr [eax+6Ch], 0
.text:0000A05A                 jz      short loc_A068
.text:0000A05C                 mov     ecx, [ebp+arg_0]
.text:0000A05F                 cmp     dword ptr [ecx+88h], 0
.text:0000A066                 jnz     short loc_A06A
.text:0000A068
.text:0000A068 loc_A068:                               ; CODE XREF: _term_out+B0Ej
.text:0000A068                 jmp     short loc_A0C9
.text:0000A06A ; ---------------------------------------------------------------------------
.text:0000A06A
.text:0000A06A loc_A06A:                               ; CODE XREF: _term_out+B05j
.text:0000A06A                                         ; _term_out+B1Aj
.text:0000A06A                 mov     edx, [ebp+arg_0]
.text:0000A06D                 cmp     dword ptr [edx+70h], 0
.text:0000A071                 jnz     short loc_A09F
.text:0000A073                 mov     eax, [ebp+arg_0]
.text:0000A076                 cmp     dword ptr [eax+6Ch], 0
.text:0000A07A                 jle     short loc_A09F
.text:0000A07C                 mov     ecx, [ebp+arg_0]
.text:0000A07F                 mov     edx, [ecx+12Ch]
.text:0000A085                 sub     edx, 1
.text:0000A088                 mov     eax, [ebp+arg_0]
.text:0000A08B                 mov     [eax+70h], edx
.text:0000A08E                 mov     ecx, [ebp+arg_0]
.text:0000A091                 mov     edx, [ecx+6Ch]
.text:0000A094                 sub     edx, 1
.text:0000A097                 mov     eax, [ebp+arg_0]
.text:0000A09A                 mov     [eax+6Ch], edx
.text:0000A09D                 jmp     short loc_A0C9
.text:0000A09F ; ---------------------------------------------------------------------------
.text:0000A09F
.text:0000A09F loc_A09F:                               ; CODE XREF: _term_out+B25j
.text:0000A09F                                         ; _term_out+B2Ej
.text:0000A09F                 mov     ecx, [ebp+arg_0]
.text:0000A0A2                 cmp     dword ptr [ecx+8Ch], 0
.text:0000A0A9                 jz      short loc_A0BA
.text:0000A0AB                 mov     edx, [ebp+arg_0]
.text:0000A0AE                 mov     dword ptr [edx+8Ch], 0
.text:0000A0B8                 jmp     short loc_A0C9
.text:0000A0BA ; ---------------------------------------------------------------------------
.text:0000A0BA
.text:0000A0BA loc_A0BA:                               ; CODE XREF: _term_out+B5Dj
.text:0000A0BA                 mov     eax, [ebp+arg_0]
.text:0000A0BD                 mov     ecx, [eax+70h]
.text:0000A0C0                 sub     ecx, 1
.text:0000A0C3                 mov     edx, [ebp+arg_0]
.text:0000A0C6                 mov     [edx+70h], ecx
.text:0000A0C9
.text:0000A0C9 loc_A0C9:                               ; CODE XREF: _term_out:loc_A068j
.text:0000A0C9                                         ; _term_out+B51j ...
.text:0000A0C9                 mov     eax, [ebp+arg_0]
.text:0000A0CC                 push    eax
.text:0000A0CD                 call    _seen_disp_event
.text:0000A0D2                 add     esp, 4
.text:0000A0D5                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A0DA ; ---------------------------------------------------------------------------
.text:0000A0DA
.text:0000A0DA $LN498:                                 ; CODE XREF: _term_out+8D3j
.text:0000A0DA                                         ; DATA XREF: .text:$LN731o
.text:0000A0DA                 mov     ecx, [ebp+arg_0] ; jumptable 00009E1F case 9
.text:0000A0DD                 mov     edx, [ecx]
.text:0000A0DF                 and     edx, 2
.text:0000A0E2                 jnz     short loc_A0F6
.text:0000A0E4                 mov     eax, [ebp+arg_0]
.text:0000A0E7                 mov     dword ptr [eax+0E44h], 0
.text:0000A0F1                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A0F6 ; ---------------------------------------------------------------------------
.text:0000A0F6
.text:0000A0F6 loc_A0F6:                               ; CODE XREF: _term_out+B96j
.text:0000A0F6                 mov     ecx, [ebp+arg_0]
.text:0000A0F9                 mov     dword ptr [ecx+94h], 1
.text:0000A103                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A108 ; ---------------------------------------------------------------------------
.text:0000A108
.text:0000A108 $LN496:                                 ; CODE XREF: _term_out+8D3j
.text:0000A108                                         ; DATA XREF: .text:$LN731o
.text:0000A108                 mov     edx, [ebp+arg_0] ; jumptable 00009E1F case 10
.text:0000A10B                 mov     eax, [edx]
.text:0000A10D                 and     eax, 2
.text:0000A110                 jnz     short loc_A124
.text:0000A112                 mov     ecx, [ebp+arg_0]
.text:0000A115                 mov     dword ptr [ecx+0E44h], 0
.text:0000A11F                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A124 ; ---------------------------------------------------------------------------
.text:0000A124
.text:0000A124 loc_A124:                               ; CODE XREF: _term_out+BC4j
.text:0000A124                 mov     edx, [ebp+arg_0]
.text:0000A127                 mov     dword ptr [edx+94h], 0
.text:0000A131                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A136 ; ---------------------------------------------------------------------------
.text:0000A136
.text:0000A136 $LN494:                                 ; CODE XREF: _term_out+8D3j
.text:0000A136                                         ; DATA XREF: .text:$LN731o
.text:0000A136                 mov     eax, [ebp+arg_0] ; jumptable 00009E1F case 22
.text:0000A139                 cmp     dword ptr [eax+148h], 0
.text:0000A140                 jz      short loc_A151
.text:0000A142                 mov     ecx, [ebp+arg_0]
.text:0000A145                 mov     dword ptr [ecx+0E44h], 9
.text:0000A14F                 jmp     short loc_A187
.text:0000A151 ; ---------------------------------------------------------------------------
.text:0000A151
.text:0000A151 loc_A151:                               ; CODE XREF: _term_out+BF4j
.text:0000A151                 mov     edx, [ebp+arg_0]
.text:0000A154                 mov     eax, [edx]
.text:0000A156                 and     eax, 1
.text:0000A159                 jnz     short loc_A16D
.text:0000A15B                 mov     ecx, [ebp+arg_0]
.text:0000A15E                 mov     dword ptr [ecx+0E44h], 0
.text:0000A168                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A16D ; ---------------------------------------------------------------------------
.text:0000A16D
.text:0000A16D loc_A16D:                               ; CODE XREF: _term_out+C0Dj
.text:0000A16D                 mov     edx, [ebp+arg_0]
.text:0000A170                 mov     dword ptr [edx+0E44h], 1
.text:0000A17A                 mov     eax, [ebp+arg_0]
.text:0000A17D                 mov     dword ptr [eax+230h], 0
.text:0000A187
.text:0000A187 loc_A187:                               ; CODE XREF: _term_out+C03j
.text:0000A187                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A18C ; ---------------------------------------------------------------------------
.text:0000A18C
.text:0000A18C $LN490:                                 ; CODE XREF: _term_out+8D3j
.text:0000A18C                                         ; DATA XREF: .text:$LN731o
.text:0000A18C                 mov     ecx, [ebp+arg_0] ; jumptable 00009E1F case 8
.text:0000A18F                 mov     dword ptr [ecx+70h], 0
.text:0000A196                 mov     edx, [ebp+arg_0]
.text:0000A199                 mov     dword ptr [edx+8Ch], 0
.text:0000A1A3                 mov     eax, [ebp+arg_0]
.text:0000A1A6                 push    eax
.text:0000A1A7                 call    _seen_disp_event
.text:0000A1AC                 add     esp, 4
.text:0000A1AF                 mov     ecx, [ebp+arg_0]
.text:0000A1B2                 cmp     dword ptr [ecx+1114h], 0
.text:0000A1B9                 jz      short loc_A212
.text:0000A1BB                 mov     edx, [ebp+arg_0]
.text:0000A1BE                 mov     eax, [ebp+arg_0]
.text:0000A1C1                 mov     ecx, [edx+6Ch]
.text:0000A1C4                 cmp     ecx, [eax+80h]
.text:0000A1CA                 jnz     short loc_A1EF
.text:0000A1CC                 push    1
.text:0000A1CE                 push    1
.text:0000A1D0                 mov     edx, [ebp+arg_0]
.text:0000A1D3                 mov     eax, [edx+80h]
.text:0000A1D9                 push    eax
.text:0000A1DA                 mov     ecx, [ebp+arg_0]
.text:0000A1DD                 mov     edx, [ecx+7Ch]
.text:0000A1E0                 push    edx
.text:0000A1E1                 mov     eax, [ebp+arg_0]
.text:0000A1E4                 push    eax
.text:0000A1E5                 call    _scroll
.text:0000A1EA                 add     esp, 14h
.text:0000A1ED                 jmp     short loc_A212
.text:0000A1EF ; ---------------------------------------------------------------------------
.text:0000A1EF
.text:0000A1EF loc_A1EF:                               ; CODE XREF: _term_out+C7Ej
.text:0000A1EF                 mov     ecx, [ebp+arg_0]
.text:0000A1F2                 mov     edx, [ecx+128h]
.text:0000A1F8                 sub     edx, 1
.text:0000A1FB                 mov     eax, [ebp+arg_0]
.text:0000A1FE                 cmp     [eax+6Ch], edx
.text:0000A201                 jge     short loc_A212
.text:0000A203                 mov     ecx, [ebp+arg_0]
.text:0000A206                 mov     edx, [ecx+6Ch]
.text:0000A209                 add     edx, 1
.text:0000A20C                 mov     eax, [ebp+arg_0]
.text:0000A20F                 mov     [eax+6Ch], edx
.text:0000A212
.text:0000A212 loc_A212:                               ; CODE XREF: _term_out+C6Dj
.text:0000A212                                         ; _term_out+CA1j ...
.text:0000A212                 mov     ecx, [ebp+arg_0]
.text:0000A215                 cmp     dword ptr [ecx+108Ch], 0
.text:0000A21C                 jz      short loc_A237
.text:0000A21E                 push    1
.text:0000A220                 movzx   edx, byte ptr [ebp+C]
.text:0000A224                 push    edx
.text:0000A225                 mov     eax, [ebp+arg_0]
.text:0000A228                 mov     ecx, [eax+108Ch]
.text:0000A22E                 push    ecx
.text:0000A22F                 call    _logtraffic
.text:0000A234                 add     esp, 0Ch
.text:0000A237
.text:0000A237 loc_A237:                               ; CODE XREF: _term_out+CD0j
.text:0000A237                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A23C ; ---------------------------------------------------------------------------
.text:0000A23C
.text:0000A23C $LN484:                                 ; CODE XREF: _term_out+8D3j
.text:0000A23C                                         ; DATA XREF: .text:$LN731o
.text:0000A23C                 mov     edx, [ebp+arg_0] ; jumptable 00009E1F case 7
.text:0000A23F                 mov     eax, [edx]
.text:0000A241                 and     eax, 1000h
.text:0000A246                 jz      short $LN481    ; jumptable 00009E1F case 6
.text:0000A248                 push    0
.text:0000A24A                 push    0
.text:0000A24C                 push    0
.text:0000A24E                 mov     ecx, [ebp+arg_0]
.text:0000A251                 push    ecx
.text:0000A252                 call    _move
.text:0000A257                 add     esp, 10h
.text:0000A25A                 push    1
.text:0000A25C                 push    0
.text:0000A25E                 push    0
.text:0000A260                 mov     edx, [ebp+arg_0]
.text:0000A263                 push    edx
.text:0000A264                 call    _erase_lots
.text:0000A269                 add     esp, 10h
.text:0000A26C                 mov     eax, [ebp+arg_0]
.text:0000A26F                 cmp     dword ptr [eax+1164h], 0
.text:0000A276                 jz      short loc_A282
.text:0000A278                 mov     ecx, [ebp+arg_0]
.text:0000A27B                 mov     dword ptr [ecx+10h], 0
.text:0000A282
.text:0000A282 loc_A282:                               ; CODE XREF: _term_out+D2Aj
.text:0000A282                 mov     edx, [ebp+arg_0]
.text:0000A285                 mov     dword ptr [edx+8Ch], 0
.text:0000A28F                 mov     eax, [ebp+arg_0]
.text:0000A292                 push    eax
.text:0000A293                 call    _seen_disp_event
.text:0000A298                 add     esp, 4
.text:0000A29B                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A2A0 ; ---------------------------------------------------------------------------
.text:0000A2A0
.text:0000A2A0 $LN481:                                 ; CODE XREF: _term_out+8D3j
.text:0000A2A0                                         ; _term_out+CFAj
.text:0000A2A0                                         ; DATA XREF: ...
.text:0000A2A0                 mov     ecx, [ebp+arg_0] ; jumptable 00009E1F case 6
.text:0000A2A3                 mov     edx, [ecx]
.text:0000A2A5                 and     edx, 2
.text:0000A2A8                 jnz     short $LN479    ; jumptable 00009E1F case 5
.text:0000A2AA                 mov     eax, [ebp+arg_0]
.text:0000A2AD                 mov     dword ptr [eax+0E44h], 0
.text:0000A2B7                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A2BC ; ---------------------------------------------------------------------------
.text:0000A2BC
.text:0000A2BC $LN479:                                 ; CODE XREF: _term_out+8D3j
.text:0000A2BC                                         ; _term_out+D5Cj
.text:0000A2BC                                         ; DATA XREF: ...
.text:0000A2BC                 mov     ecx, [ebp+arg_0] ; jumptable 00009E1F case 5
.text:0000A2BF                 mov     edx, [ebp+arg_0]
.text:0000A2C2                 mov     eax, [ecx+6Ch]
.text:0000A2C5                 cmp     eax, [edx+80h]
.text:0000A2CB                 jnz     short loc_A2F0
.text:0000A2CD                 push    1
.text:0000A2CF                 push    1
.text:0000A2D1                 mov     ecx, [ebp+arg_0]
.text:0000A2D4                 mov     edx, [ecx+80h]
.text:0000A2DA                 push    edx
.text:0000A2DB                 mov     eax, [ebp+arg_0]
.text:0000A2DE                 mov     ecx, [eax+7Ch]
.text:0000A2E1                 push    ecx
.text:0000A2E2                 mov     edx, [ebp+arg_0]
.text:0000A2E5                 push    edx
.text:0000A2E6                 call    _scroll
.text:0000A2EB                 add     esp, 14h
.text:0000A2EE                 jmp     short loc_A313
.text:0000A2F0 ; ---------------------------------------------------------------------------
.text:0000A2F0
.text:0000A2F0 loc_A2F0:                               ; CODE XREF: _term_out+D7Fj
.text:0000A2F0                 mov     eax, [ebp+arg_0]
.text:0000A2F3                 mov     ecx, [eax+128h]
.text:0000A2F9                 sub     ecx, 1
.text:0000A2FC                 mov     edx, [ebp+arg_0]
.text:0000A2FF                 cmp     [edx+6Ch], ecx
.text:0000A302                 jge     short loc_A313
.text:0000A304                 mov     eax, [ebp+arg_0]
.text:0000A307                 mov     ecx, [eax+6Ch]
.text:0000A30A                 add     ecx, 1
.text:0000A30D                 mov     edx, [ebp+arg_0]
.text:0000A310                 mov     [edx+6Ch], ecx
.text:0000A313
.text:0000A313 loc_A313:                               ; CODE XREF: _term_out+DA2j
.text:0000A313                                         ; _term_out+DB6j
.text:0000A313                 mov     eax, [ebp+arg_0]
.text:0000A316                 cmp     dword ptr [eax+1120h], 0
.text:0000A31D                 jz      short loc_A329
.text:0000A31F                 mov     ecx, [ebp+arg_0]
.text:0000A322                 mov     dword ptr [ecx+70h], 0
.text:0000A329
.text:0000A329 loc_A329:                               ; CODE XREF: _term_out+DD1j
.text:0000A329                 mov     edx, [ebp+arg_0]
.text:0000A32C                 mov     dword ptr [edx+8Ch], 0
.text:0000A336                 mov     eax, [ebp+arg_0]
.text:0000A339                 push    eax
.text:0000A33A                 call    _seen_disp_event
.text:0000A33F                 add     esp, 4
.text:0000A342                 mov     ecx, [ebp+arg_0]
.text:0000A345                 cmp     dword ptr [ecx+108Ch], 0
.text:0000A34C                 jz      short loc_A367
.text:0000A34E                 push    1
.text:0000A350                 movzx   edx, byte ptr [ebp+C]
.text:0000A354                 push    edx
.text:0000A355                 mov     eax, [ebp+arg_0]
.text:0000A358                 mov     ecx, [eax+108Ch]
.text:0000A35E                 push    ecx
.text:0000A35F                 call    _logtraffic
.text:0000A364                 add     esp, 0Ch
.text:0000A367
.text:0000A367 loc_A367:                               ; CODE XREF: _term_out+E00j
.text:0000A367                 jmp     $LN523          ; jumptable 00009E1F default case
.text:0000A36C ; ---------------------------------------------------------------------------
.text:0000A36C
.text:0000A36C $LN473:                                 ; CODE XREF: _term_out+8D3j
.text:0000A36C                                         ; DATA XREF: .text:$LN731o
.text:0000A36C                 mov     edx, [ebp+arg_0] ; jumptable 00009E1F case 4
.text:0000A36F                 mov     eax, [edx+6Ch]
.text:0000A372                 mov     ecx, [edx+70h]
.text:0000A375                 mov     [ebp+var_150], eax
.text:0000A37B                 mov     [ebp+var_14C], ecx
.text:0000A381                 push    1
.text:0000A383                 push    0C28h
.text:0000A388                 mov     edx, [ebp+arg_0]
.text:0000A38B                 mov     eax, [edx+6Ch]
.text:0000A38E                 push    eax
.text:0000A38F                 mov     ecx, [ebp+arg_0]
.text:0000A392                 push    ecx
.text:0000A393                 call    _lineptr
.text:0000A398                 add     esp, 10h
.text:0000A39B                 mov     [ebp+var_158], eax
.text:0000A3A1
.text:0000A3A1 loc_A3A1:                               ; CODE XREF: _term_out+E8Dj
.text:0000A3A1                 mov     edx, [ebp+arg_0]
.text:0000A3A4                 mov     eax, [edx+70h]
.text:0000A3A7                 add     eax, 1
.text:0000A3AA                 mov     ecx, [ebp+arg_0]
.text:0000A3AD                 mov     [ecx+70h], eax
.text:0000A3B0                 mov     edx, [ebp+arg_0]
.text:0000A3B3                 mov     eax, [edx+12Ch]
.text:0000A3B9                 sub     eax, 1
.text:0000A3BC                 mov     ecx, [ebp+arg_0]
.text:0000A3BF                 cmp     [ecx+70h], eax
.text:0000A3C2                 jge     short loc_A3DB
.text:0000A3C4                 mov     edx, [ebp+arg_0]
.text:0000A3C7                 mov     eax, [edx+0E40h]
.text:0000A3CD                 mov     ecx, [ebp+arg_0]
.text:0000A3D0                 mov     edx, [ecx+70h]
.text:0000A3D3                 movzx   eax, byte ptr [eax+edx]
.text:0000A3D7                 test    eax, eax
.text:0000A3D9                 jz      short loc_A3A1
.text:0000A3DB
.text:0000A3DB loc_A3DB:                               ; CODE XREF: _term_out+E76j
.text:0000A3DB                 mov     ecx, [ebp+var_158]
.text:0000A3E1                 movzx   edx, word ptr [ecx]
.text:0000A3E4                 and     edx, 3
.text:0000A3E7                 jz      short loc_A418
.text:0000A3E9                 mov     eax, [ebp+arg_0]
.text:0000A3EC                 mov     eax, [eax+12Ch]
.text:0000A3F2                 cdq
.text:0000A3F3                 sub     eax, edx
.text:0000A3F5                 sar     eax, 1
.text:0000A3F7                 mov     ecx, [ebp+arg_0]
.text:0000A3FA                 cmp     [ecx+70h], eax
.text:0000A3FD                 jl      short loc_A416
.text:0000A3FF                 mov     edx, [ebp+arg_0]
.text:0000A402                 mov     eax, [edx+12Ch]
.text:0000A408                 cdq
.text:0000A409                 sub     eax, edx
.text:0000A40B                 sar     eax, 1
.text:0000A40D                 sub     eax, 1
.text:0000A410                 mov     ecx, [ebp+arg_0]
.text:0000A413                 mov     [ecx+70h], eax
.text:0000A416
.text:0000A416 loc_A416:                               ; CODE XREF: _term_out+EB1j
.text:0000A416                 jmp     short loc_A43B
.text:0000A418 ; ---------------------------------------------------------------------------
.text:0000A418
.text:0000A418 loc_A418:                               ; CODE XREF: _term_out+E9Bj
.text:0000A418                 mov     edx, [ebp+arg_0]
.text:0000A41B                 mov     eax, [ebp+arg_0]
.text:0000A41E                 mov     ecx, [edx+70h]
.text:0000A421                 cmp     ecx, [eax+12Ch]
.text:0000A427                 jl      short loc_A43B
.text:0000A429                 mov     edx, [ebp+arg_0]
.text:0000A42C                 mov     eax, [edx+12Ch]
.text:0000A432                 sub     eax, 1
.text:0000A435                 mov     ecx, [ebp+arg_0]
.text:0000A438                 mov     [ecx+70h], eax
.text:0000A43B
.text:0000A43B loc_A43B:                               ; CODE XREF: _term_out:loc_A416j
.text:0000A43B                                         ; _term_out+EDBj
.text:0000A43B                 mov     edx, [ebp+arg_0]
.text:0000A43E                 mov     eax, [edx+70h]
.text:0000A441                 push    eax
.text:0000A442                 mov     ecx, [edx+6Ch]
.text:0000A445                 push    ecx
.text:0000A446                 mov     edx, [ebp+var_14C]
.text:0000A44C                 push    edx
.text:0000A44D                 mov     eax, [ebp+var_150]
.text:0000A453                 push    eax
.text:0000A454                 mov     ecx, [ebp+arg_0]
.text:0000A457                 push    ecx
.text:0000A458                 call    _check_selection
.text:0000A45D                 add     esp, 14h
.text:0000A460                 mov     edx, [ebp+arg_0]
.text:0000A463                 push    edx
.text:0000A464                 call    _seen_disp_event
.text:0000A469                 add     esp, 4
.text:0000A46C
.text:0000A46C $LN523:                                 ; CODE XREF: _term_out+8C0j
.text:0000A46C                                         ; _term_out+8D3j ...
.text:0000A46C                 jmp     $LN526          ; jumptable 00009E1F default case
.text:0000A471 ; ---------------------------------------------------------------------------
.text:0000A471
.text:0000A471 loc_A471:                               ; CODE XREF: _term_out+88Bj
.text:0000A471                                         ; _term_out+89Bj
.text:0000A471                 mov     eax, [ebp+arg_0]
.text:0000A474                 mov     ecx, [eax+0E44h]
.text:0000A47A                 mov     [ebp+var_348], ecx
.text:0000A480                 cmp     [ebp+var_348], 0Dh ; switch 14 cases
.text:0000A487                 ja      $LN526          ; jumptable 0000A493 default case
.text:0000A48D                 mov     edx, [ebp+var_348]
.text:0000A493                 jmp     ds:$LN732[edx*4] ; switch jump
.text:0000A49A ; ---------------------------------------------------------------------------
.text:0000A49A
.text:0000A49A $LN461:                                 ; CODE XREF: _term_out+F47j
.text:0000A49A                                         ; DATA XREF: .text:$LN732o
.text:0000A49A                 push    1               ; jumptable 0000A493 case 0
.text:0000A49C                 push    0C42h
.text:0000A4A1                 mov     eax, [ebp+arg_0]
.text:0000A4A4                 mov     ecx, [eax+6Ch]
.text:0000A4A7                 push    ecx
.text:0000A4A8                 mov     edx, [ebp+arg_0]
.text:0000A4AB                 push    edx
.text:0000A4AC                 call    _lineptr
.text:0000A4B1                 add     esp, 10h
.text:0000A4B4                 mov     [ebp+var_15C], eax
.text:0000A4BA                 mov     [ebp+var_160], 0
.text:0000A4C4                 mov     eax, [ebp+C]
.text:0000A4C7                 and     eax, 0FFFFFC00h
.text:0000A4CC                 cmp     eax, 0D800h
.text:0000A4D1                 jnz     short loc_A4DD
.text:0000A4D3                 mov     [ebp+var_160], 1
.text:0000A4DD
.text:0000A4DD loc_A4DD:                               ; CODE XREF: _term_out+F85j
.text:0000A4DD                 cmp     [ebp+var_160], 0
.text:0000A4E4                 jnz     short loc_A524
.text:0000A4E6                 mov     ecx, [ebp+arg_0]
.text:0000A4E9                 cmp     dword ptr [ecx+1108h], 0
.text:0000A4F0                 jz      short loc_A506
.text:0000A4F2                 mov     edx, [ebp+C]
.text:0000A4F5                 push    edx
.text:0000A4F6                 call    _mk_wcwidth_cjk
.text:0000A4FB                 add     esp, 4
.text:0000A4FE                 mov     [ebp+var_34C], eax
.text:0000A504                 jmp     short loc_A518
.text:0000A506 ; ---------------------------------------------------------------------------
.text:0000A506
.text:0000A506 loc_A506:                               ; CODE XREF: _term_out+FA4j
.text:0000A506                 mov     eax, [ebp+C]
.text:0000A509                 push    eax
.text:0000A50A                 call    _mk_wcwidth
.text:0000A50F                 add     esp, 4
.text:0000A512                 mov     [ebp+var_34C], eax
.text:0000A518
.text:0000A518 loc_A518:                               ; CODE XREF: _term_out+FB8j
.text:0000A518                 mov     ecx, [ebp+var_34C]
.text:0000A51E                 mov     [ebp+var_160], ecx
.text:0000A524
.text:0000A524 loc_A524:                               ; CODE XREF: _term_out+F98j
.text:0000A524                 mov     edx, [ebp+arg_0]
.text:0000A527                 cmp     dword ptr [edx+8Ch], 0
.text:0000A52E                 jz      loc_A5F4
.text:0000A534                 mov     eax, [ebp+arg_0]
.text:0000A537                 cmp     dword ptr [eax+88h], 0
.text:0000A53E                 jz      loc_A5F4
.text:0000A544                 cmp     [ebp+var_160], 0
.text:0000A54B                 jle     loc_A5F4
.text:0000A551                 mov     ecx, [ebp+var_15C]
.text:0000A557                 movzx   edx, word ptr [ecx]
.text:0000A55A                 or      edx, 10h
.text:0000A55D                 mov     eax, [ebp+var_15C]
.text:0000A563                 mov     [eax], dx
.text:0000A566                 mov     ecx, [ebp+arg_0]
.text:0000A569                 mov     edx, [ebp+arg_0]
.text:0000A56C                 mov     eax, [ecx+6Ch]
.text:0000A56F                 cmp     eax, [edx+80h]
.text:0000A575                 jnz     short loc_A59A
.text:0000A577                 push    1
.text:0000A579                 push    1
.text:0000A57B                 mov     ecx, [ebp+arg_0]
.text:0000A57E                 mov     edx, [ecx+80h]
.text:0000A584                 push    edx
.text:0000A585                 mov     eax, [ebp+arg_0]
.text:0000A588                 mov     ecx, [eax+7Ch]
.text:0000A58B                 push    ecx
.text:0000A58C                 mov     edx, [ebp+arg_0]
.text:0000A58F                 push    edx
.text:0000A590                 call    _scroll
.text:0000A595                 add     esp, 14h
.text:0000A598                 jmp     short loc_A5BD
.text:0000A59A ; ---------------------------------------------------------------------------
.text:0000A59A
.text:0000A59A loc_A59A:                               ; CODE XREF: _term_out+1029j
.text:0000A59A                 mov     eax, [ebp+arg_0]
.text:0000A59D                 mov     ecx, [eax+128h]
.text:0000A5A3                 sub     ecx, 1
.text:0000A5A6                 mov     edx, [ebp+arg_0]
.text:0000A5A9                 cmp     [edx+6Ch], ecx
.text:0000A5AC                 jge     short loc_A5BD
.text:0000A5AE                 mov     eax, [ebp+arg_0]
.text:0000A5B1                 mov     ecx, [eax+6Ch]
.text:0000A5B4                 add     ecx, 1
.text:0000A5B7                 mov     edx, [ebp+arg_0]
.text:0000A5BA                 mov     [edx+6Ch], ecx
.text:0000A5BD
.text:0000A5BD loc_A5BD:                               ; CODE XREF: _term_out+104Cj
.text:0000A5BD                                         ; _term_out+1060j
.text:0000A5BD                 mov     eax, [ebp+arg_0]
.text:0000A5C0                 mov     dword ptr [eax+70h], 0
.text:0000A5C7                 mov     ecx, [ebp+arg_0]
.text:0000A5CA                 mov     dword ptr [ecx+8Ch], 0
.text:0000A5D4                 push    1
.text:0000A5D6                 push    0C53h
.text:0000A5DB                 mov     edx, [ebp+arg_0]
.text:0000A5DE                 mov     eax, [edx+6Ch]
.text:0000A5E1                 push    eax
.text:0000A5E2                 mov     ecx, [ebp+arg_0]
.text:0000A5E5                 push    ecx
.text:0000A5E6                 call    _lineptr
.text:0000A5EB                 add     esp, 10h
.text:0000A5EE                 mov     [ebp+var_15C], eax
.text:0000A5F4
.text:0000A5F4 loc_A5F4:                               ; CODE XREF: _term_out+FE2j
.text:0000A5F4                                         ; _term_out+FF2j ...
.text:0000A5F4                 mov     edx, [ebp+arg_0]
.text:0000A5F7                 cmp     dword ptr [edx+90h], 0
.text:0000A5FE                 jz      short loc_A61C
.text:0000A600                 cmp     [ebp+var_160], 0
.text:0000A607                 jle     short loc_A61C
.text:0000A609                 mov     eax, [ebp+var_160]
.text:0000A60F                 push    eax
.text:0000A610                 mov     ecx, [ebp+arg_0]
.text:0000A613                 push    ecx
.text:0000A614                 call    _insch
.text:0000A619                 add     esp, 8
.text:0000A61C
.text:0000A61C loc_A61C:                               ; CODE XREF: _term_out+10B2j
.text:0000A61C                                         ; _term_out+10BBj
.text:0000A61C                 mov     edx, [ebp+arg_0]
.text:0000A61F                 cmp     dword ptr [edx+0E48h], 0
.text:0000A626                 jz      loc_A6B5
.text:0000A62C                 mov     eax, [ebp+arg_0]
.text:0000A62F                 mov     ecx, [eax+6Ch]
.text:0000A632                 mov     edx, [eax+70h]
.text:0000A635                 mov     [ebp+var_16C], ecx
.text:0000A63B                 mov     [ebp+var_168], edx
.text:0000A641                 mov     eax, [ebp+arg_0]
.text:0000A644                 mov     ecx, [ebp+var_168]
.text:0000A64A                 cmp     ecx, [eax+12Ch]
.text:0000A650                 jnz     short loc_A677
.text:0000A652                 mov     [ebp+var_168], 0
.text:0000A65C                 mov     edx, [ebp+var_16C]
.text:0000A662                 add     edx, 1
.text:0000A665                 mov     [ebp+var_16C], edx
.text:0000A66B                 mov     [ebp+var_350], 1
.text:0000A675                 jmp     short loc_A690
.text:0000A677 ; ---------------------------------------------------------------------------
.text:0000A677
.text:0000A677 loc_A677:                               ; CODE XREF: _term_out+1104j
.text:0000A677                 mov     eax, [ebp+var_168]
.text:0000A67D                 add     eax, 1
.text:0000A680                 mov     [ebp+var_168], eax
.text:0000A686                 mov     [ebp+var_350], 0
.text:0000A690
.text:0000A690 loc_A690:                               ; CODE XREF: _term_out+1129j
.text:0000A690                 mov     ecx, [ebp+var_168]
.text:0000A696                 push    ecx
.text:0000A697                 mov     edx, [ebp+var_16C]
.text:0000A69D                 push    edx
.text:0000A69E                 mov     eax, [ebp+arg_0]
.text:0000A6A1                 mov     ecx, [eax+70h]
.text:0000A6A4                 push    ecx
.text:0000A6A5                 mov     edx, [eax+6Ch]
.text:0000A6A8                 push    edx
.text:0000A6A9                 mov     eax, [ebp+arg_0]
.text:0000A6AC                 push    eax
.text:0000A6AD                 call    _check_selection
.text:0000A6B2                 add     esp, 14h
.text:0000A6B5
.text:0000A6B5 loc_A6B5:                               ; CODE XREF: _term_out+10DAj
.text:0000A6B5                 mov     ecx, [ebp+C]
.text:0000A6B8                 and     ecx, 0FFFFFF00h
.text:0000A6BE                 cmp     ecx, 0D800h
.text:0000A6C4                 jz      short loc_A6D1
.text:0000A6C6                 mov     edx, [ebp+C]
.text:0000A6C9                 and     edx, 0FFFFFF00h
.text:0000A6CF                 jnz     short loc_A6F6
.text:0000A6D1
.text:0000A6D1 loc_A6D1:                               ; CODE XREF: _term_out+1178j
.text:0000A6D1                 mov     eax, [ebp+arg_0]
.text:0000A6D4                 cmp     dword ptr [eax+108Ch], 0
.text:0000A6DB                 jz      short loc_A6F6
.text:0000A6DD                 push    1
.text:0000A6DF                 movzx   ecx, byte ptr [ebp+C]
.text:0000A6E3                 push    ecx
.text:0000A6E4                 mov     edx, [ebp+arg_0]
.text:0000A6E7                 mov     eax, [edx+108Ch]
.text:0000A6ED                 push    eax
.text:0000A6EE                 call    _logtraffic
.text:0000A6F3                 add     esp, 0Ch
.text:0000A6F6
.text:0000A6F6 loc_A6F6:                               ; CODE XREF: _term_out+1183j
.text:0000A6F6                                         ; _term_out+118Fj
.text:0000A6F6                 mov     ecx, [ebp+var_160]
.text:0000A6FC                 mov     [ebp+var_354], ecx
.text:0000A702                 cmp     [ebp+var_354], 0
.text:0000A709                 jz      loc_A992
.text:0000A70F                 cmp     [ebp+var_354], 1
.text:0000A716                 jz      loc_A90C
.text:0000A71C                 cmp     [ebp+var_354], 2
.text:0000A723                 jz      short loc_A72A
.text:0000A725                 jmp     loc_AA3E
.text:0000A72A ; ---------------------------------------------------------------------------
.text:0000A72A
.text:0000A72A loc_A72A:                               ; CODE XREF: _term_out+11D7j
.text:0000A72A                 mov     edx, [ebp+arg_0]
.text:0000A72D                 mov     eax, [edx+6Ch]
.text:0000A730                 push    eax
.text:0000A731                 mov     ecx, [ebp+arg_0]
.text:0000A734                 mov     edx, [ecx+70h]
.text:0000A737                 push    edx
.text:0000A738                 mov     eax, [ebp+arg_0]
.text:0000A73B                 push    eax
.text:0000A73C                 call    _check_boundary
.text:0000A741                 add     esp, 0Ch
.text:0000A744                 mov     ecx, [ebp+arg_0]
.text:0000A747                 mov     edx, [ecx+6Ch]
.text:0000A74A                 push    edx
.text:0000A74B                 mov     eax, [ebp+arg_0]
.text:0000A74E                 mov     ecx, [eax+70h]
.text:0000A751                 add     ecx, 2
.text:0000A754                 push    ecx
.text:0000A755                 mov     edx, [ebp+arg_0]
.text:0000A758                 push    edx
.text:0000A759                 call    _check_boundary
.text:0000A75E                 add     esp, 0Ch
.text:0000A761                 mov     eax, [ebp+arg_0]
.text:0000A764                 mov     ecx, [eax+12Ch]
.text:0000A76A                 sub     ecx, 1
.text:0000A76D                 mov     edx, [ebp+arg_0]
.text:0000A770                 cmp     [edx+70h], ecx
.text:0000A773                 jnz     loc_A863
.text:0000A779                 mov     eax, [ebp+arg_0]
.text:0000A77C                 add     eax, 54h ; 'T'
.text:0000A77F                 push    eax
.text:0000A780                 mov     ecx, [ebp+arg_0]
.text:0000A783                 mov     edx, [ecx+70h]
.text:0000A786                 push    edx
.text:0000A787                 mov     eax, [ebp+var_15C]
.text:0000A78D                 push    eax
.text:0000A78E                 call    _copy_termchar
.text:0000A793                 add     esp, 0Ch
.text:0000A796                 mov     ecx, [ebp+var_15C]
.text:0000A79C                 movzx   edx, word ptr [ecx]
.text:0000A79F                 or      edx, 30h
.text:0000A7A2                 mov     eax, [ebp+var_15C]
.text:0000A7A8                 mov     [eax], dx
.text:0000A7AB                 mov     ecx, [ebp+arg_0]
.text:0000A7AE                 mov     edx, [ebp+arg_0]
.text:0000A7B1                 mov     eax, [ecx+6Ch]
.text:0000A7B4                 cmp     eax, [edx+80h]
.text:0000A7BA                 jnz     short loc_A7DF
.text:0000A7BC                 push    1
.text:0000A7BE                 push    1
.text:0000A7C0                 mov     ecx, [ebp+arg_0]
.text:0000A7C3                 mov     edx, [ecx+80h]
.text:0000A7C9                 push    edx
.text:0000A7CA                 mov     eax, [ebp+arg_0]
.text:0000A7CD                 mov     ecx, [eax+7Ch]
.text:0000A7D0                 push    ecx
.text:0000A7D1                 mov     edx, [ebp+arg_0]
.text:0000A7D4                 push    edx
.text:0000A7D5                 call    _scroll
.text:0000A7DA                 add     esp, 14h
.text:0000A7DD                 jmp     short loc_A802
.text:0000A7DF ; ---------------------------------------------------------------------------
.text:0000A7DF
.text:0000A7DF loc_A7DF:                               ; CODE XREF: _term_out+126Ej
.text:0000A7DF                 mov     eax, [ebp+arg_0]
.text:0000A7E2                 mov     ecx, [eax+128h]
.text:0000A7E8                 sub     ecx, 1
.text:0000A7EB                 mov     edx, [ebp+arg_0]
.text:0000A7EE                 cmp     [edx+6Ch], ecx
.text:0000A7F1                 jge     short loc_A802
.text:0000A7F3                 mov     eax, [ebp+arg_0]
.text:0000A7F6                 mov     ecx, [eax+6Ch]
.text:0000A7F9                 add     ecx, 1
.text:0000A7FC                 mov     edx, [ebp+arg_0]
.text:0000A7FF                 mov     [edx+6Ch], ecx
.text:0000A802
.text:0000A802 loc_A802:                               ; CODE XREF: _term_out+1291j
.text:0000A802                                         ; _term_out+12A5j
.text:0000A802                 mov     eax, [ebp+arg_0]
.text:0000A805                 mov     dword ptr [eax+70h], 0
.text:0000A80C                 push    1
.text:0000A80E                 push    0C83h
.text:0000A813                 mov     ecx, [ebp+arg_0]
.text:0000A816                 mov     edx, [ecx+6Ch]
.text:0000A819                 push    edx
.text:0000A81A                 mov     eax, [ebp+arg_0]
.text:0000A81D                 push    eax
.text:0000A81E                 call    _lineptr
.text:0000A823                 add     esp, 10h
.text:0000A826                 mov     [ebp+var_15C], eax
.text:0000A82C                 mov     ecx, [ebp+arg_0]
.text:0000A82F                 mov     edx, [ecx+6Ch]
.text:0000A832                 push    edx
.text:0000A833                 mov     eax, [ebp+arg_0]
.text:0000A836                 mov     ecx, [eax+70h]
.text:0000A839                 push    ecx
.text:0000A83A                 mov     edx, [ebp+arg_0]
.text:0000A83D                 push    edx
.text:0000A83E                 call    _check_boundary
.text:0000A843                 add     esp, 0Ch
.text:0000A846                 mov     eax, [ebp+arg_0]
.text:0000A849                 mov     ecx, [eax+6Ch]
.text:0000A84C                 push    ecx
.text:0000A84D                 mov     edx, [ebp+arg_0]
.text:0000A850                 mov     eax, [edx+70h]
.text:0000A853                 add     eax, 2
.text:0000A856                 push    eax
.text:0000A857                 mov     ecx, [ebp+arg_0]
.text:0000A85A                 push    ecx
.text:0000A85B                 call    _check_boundary
.text:0000A860                 add     esp, 0Ch
.text:0000A863
.text:0000A863 loc_A863:                               ; CODE XREF: _term_out+1227j
.text:0000A863                 mov     edx, [ebp+arg_0]
.text:0000A866                 mov     eax, [edx+70h]
.text:0000A869                 push    eax
.text:0000A86A                 mov     ecx, [ebp+var_15C]
.text:0000A870                 push    ecx
.text:0000A871                 call    _clear_cc
.text:0000A876                 add     esp, 8
.text:0000A879                 mov     edx, [ebp+arg_0]
.text:0000A87C                 mov     eax, [edx+70h]
.text:0000A87F                 imul    eax, 0Ch
.text:0000A882                 mov     ecx, [ebp+var_15C]
.text:0000A888                 mov     edx, [ecx+14h]
.text:0000A88B                 mov     ecx, [ebp+C]
.text:0000A88E                 mov     [eax+edx], ecx
.text:0000A891                 mov     edx, [ebp+arg_0]
.text:0000A894                 mov     eax, [edx+70h]
.text:0000A897                 imul    eax, 0Ch
.text:0000A89A                 mov     ecx, [ebp+var_15C]
.text:0000A8A0                 mov     edx, [ecx+14h]
.text:0000A8A3                 mov     ecx, [ebp+arg_0]
.text:0000A8A6                 mov     ecx, [ecx+40h]
.text:0000A8A9                 mov     [edx+eax+4], ecx
.text:0000A8AD                 mov     edx, [ebp+arg_0]
.text:0000A8B0                 mov     eax, [edx+70h]
.text:0000A8B3                 add     eax, 1
.text:0000A8B6                 mov     ecx, [ebp+arg_0]
.text:0000A8B9                 mov     [ecx+70h], eax
.text:0000A8BC                 mov     edx, [ebp+arg_0]
.text:0000A8BF                 mov     eax, [edx+70h]
.text:0000A8C2                 push    eax
.text:0000A8C3                 mov     ecx, [ebp+var_15C]
.text:0000A8C9                 push    ecx
.text:0000A8CA                 call    _clear_cc
.text:0000A8CF                 add     esp, 8
.text:0000A8D2                 mov     edx, [ebp+arg_0]
.text:0000A8D5                 mov     eax, [edx+70h]
.text:0000A8D8                 imul    eax, 0Ch
.text:0000A8DB                 mov     ecx, [ebp+var_15C]
.text:0000A8E1                 mov     edx, [ecx+14h]
.text:0000A8E4                 mov     dword ptr [eax+edx], 0DFFFh
.text:0000A8EB                 mov     eax, [ebp+arg_0]
.text:0000A8EE                 mov     ecx, [eax+70h]
.text:0000A8F1                 imul    ecx, 0Ch
.text:0000A8F4                 mov     edx, [ebp+var_15C]
.text:0000A8FA                 mov     eax, [edx+14h]
.text:0000A8FD                 mov     edx, [ebp+arg_0]
.text:0000A900                 mov     edx, [edx+40h]
.text:0000A903                 mov     [eax+ecx+4], edx
.text:0000A907                 jmp     loc_AA43
.text:0000A90C ; ---------------------------------------------------------------------------
.text:0000A90C
.text:0000A90C loc_A90C:                               ; CODE XREF: _term_out+11CAj
.text:0000A90C                 mov     eax, [ebp+arg_0]
.text:0000A90F                 mov     ecx, [eax+6Ch]
.text:0000A912                 push    ecx
.text:0000A913                 mov     edx, [ebp+arg_0]
.text:0000A916                 mov     eax, [edx+70h]
.text:0000A919                 push    eax
.text:0000A91A                 mov     ecx, [ebp+arg_0]
.text:0000A91D                 push    ecx
.text:0000A91E                 call    _check_boundary
.text:0000A923                 add     esp, 0Ch
.text:0000A926                 mov     edx, [ebp+arg_0]
.text:0000A929                 mov     eax, [edx+6Ch]
.text:0000A92C                 push    eax
.text:0000A92D                 mov     ecx, [ebp+arg_0]
.text:0000A930                 mov     edx, [ecx+70h]
.text:0000A933                 add     edx, 1
.text:0000A936                 push    edx
.text:0000A937                 mov     eax, [ebp+arg_0]
.text:0000A93A                 push    eax
.text:0000A93B                 call    _check_boundary
.text:0000A940                 add     esp, 0Ch
.text:0000A943                 mov     ecx, [ebp+arg_0]
.text:0000A946                 mov     edx, [ecx+70h]
.text:0000A949                 push    edx
.text:0000A94A                 mov     eax, [ebp+var_15C]
.text:0000A950                 push    eax
.text:0000A951                 call    _clear_cc
.text:0000A956                 add     esp, 8
.text:0000A959                 mov     ecx, [ebp+arg_0]
.text:0000A95C                 mov     edx, [ecx+70h]
.text:0000A95F                 imul    edx, 0Ch
.text:0000A962                 mov     eax, [ebp+var_15C]
.text:0000A968                 mov     ecx, [eax+14h]
.text:0000A96B                 mov     eax, [ebp+C]
.text:0000A96E                 mov     [edx+ecx], eax
.text:0000A971                 mov     ecx, [ebp+arg_0]
.text:0000A974                 mov     edx, [ecx+70h]
.text:0000A977                 imul    edx, 0Ch
.text:0000A97A                 mov     eax, [ebp+var_15C]
.text:0000A980                 mov     ecx, [eax+14h]
.text:0000A983                 mov     eax, [ebp+arg_0]
.text:0000A986                 mov     eax, [eax+40h]
.text:0000A989                 mov     [ecx+edx+4], eax
.text:0000A98D                 jmp     loc_AA43
.text:0000A992 ; ---------------------------------------------------------------------------
.text:0000A992
.text:0000A992 loc_A992:                               ; CODE XREF: _term_out+11BDj
.text:0000A992                 mov     ecx, [ebp+arg_0]
.text:0000A995                 cmp     dword ptr [ecx+70h], 0
.text:0000A999                 jle     loc_AA39
.text:0000A99F                 mov     edx, [ebp+arg_0]
.text:0000A9A2                 mov     eax, [edx+70h]
.text:0000A9A5                 sub     eax, 1
.text:0000A9A8                 mov     [ebp+var_174], eax
.text:0000A9AE                 mov     ecx, [ebp+arg_0]
.text:0000A9B1                 cmp     dword ptr [ecx+8Ch], 0
.text:0000A9B8                 jz      short loc_A9C9
.text:0000A9BA                 mov     edx, [ebp+var_174]
.text:0000A9C0                 add     edx, 1
.text:0000A9C3                 mov     [ebp+var_174], edx
.text:0000A9C9
.text:0000A9C9 loc_A9C9:                               ; CODE XREF: _term_out+146Cj
.text:0000A9C9                 mov     eax, [ebp+var_174]
.text:0000A9CF                 imul    eax, 0Ch
.text:0000A9D2                 mov     ecx, [ebp+var_15C]
.text:0000A9D8                 mov     edx, [ecx+14h]
.text:0000A9DB                 cmp     dword ptr [eax+edx], 0DFFFh
.text:0000A9E2                 jnz     short loc_AA13
.text:0000A9E4                 cmp     [ebp+var_174], 0
.text:0000A9EB                 jg      short loc_AA04
.text:0000A9ED                 push    0CAEh           ; Line
.text:0000A9F2                 push    offset $SG87221 ; "..\\..\\..\\terminal.c"
.text:0000A9F7                 push    offset $SG87222 ; "x > 0"
.text:0000A9FC                 call    __wassert
.text:0000AA01 ; ---------------------------------------------------------------------------
.text:0000AA01                 add     esp, 0Ch
.text:0000AA04
.text:0000AA04 loc_AA04:                               ; CODE XREF: _term_out+149Fj
.text:0000AA04                 mov     ecx, [ebp+var_174]
.text:0000AA0A                 sub     ecx, 1
.text:0000AA0D                 mov     [ebp+var_174], ecx
.text:0000AA13
.text:0000AA13 loc_AA13:                               ; CODE XREF: _term_out+1496j
.text:0000AA13                 mov     edx, [ebp+C]
.text:0000AA16                 push    edx
.text:0000AA17                 mov     eax, [ebp+var_174]
.text:0000AA1D                 push    eax
.text:0000AA1E                 mov     ecx, [ebp+var_15C]
.text:0000AA24                 push    ecx
.text:0000AA25                 call    _add_cc
.text:0000AA2A                 add     esp, 0Ch
.text:0000AA2D                 mov     edx, [ebp+arg_0]
.text:0000AA30                 push    edx
.text:0000AA31                 call    _seen_disp_event
.text:0000AA36                 add     esp, 4
.text:0000AA39
.text:0000AA39 loc_AA39:                               ; CODE XREF: _term_out+144Dj
.text:0000AA39                 jmp     loc_958E
.text:0000AA3E ; ---------------------------------------------------------------------------
.text:0000AA3E
.text:0000AA3E loc_AA3E:                               ; CODE XREF: _term_out+11D9j
.text:0000AA3E                 jmp     loc_958E
.text:0000AA43 ; ---------------------------------------------------------------------------
.text:0000AA43
.text:0000AA43 loc_AA43:                               ; CODE XREF: _term_out+13BBj
.text:0000AA43                                         ; _term_out+1441j
.text:0000AA43                 mov     eax, [ebp+arg_0]
.text:0000AA46                 mov     ecx, [eax+70h]
.text:0000AA49                 add     ecx, 1
.text:0000AA4C                 mov     edx, [ebp+arg_0]
.text:0000AA4F                 mov     [edx+70h], ecx
.text:0000AA52                 mov     eax, [ebp+arg_0]
.text:0000AA55                 mov     ecx, [ebp+arg_0]
.text:0000AA58                 mov     edx, [eax+70h]
.text:0000AA5B                 cmp     edx, [ecx+12Ch]
.text:0000AA61                 jnz     loc_AB26
.text:0000AA67                 mov     eax, [ebp+arg_0]
.text:0000AA6A                 mov     ecx, [eax+70h]
.text:0000AA6D                 sub     ecx, 1
.text:0000AA70                 mov     edx, [ebp+arg_0]
.text:0000AA73                 mov     [edx+70h], ecx
.text:0000AA76                 mov     eax, [ebp+arg_0]
.text:0000AA79                 mov     dword ptr [eax+8Ch], 1
.text:0000AA83                 mov     ecx, [ebp+arg_0]
.text:0000AA86                 cmp     dword ptr [ecx+88h], 0
.text:0000AA8D                 jz      loc_AB26
.text:0000AA93                 mov     edx, [ebp+arg_0]
.text:0000AA96                 cmp     dword ptr [edx+148h], 0
.text:0000AA9D                 jz      loc_AB26
.text:0000AAA3                 mov     eax, [ebp+var_15C]
.text:0000AAA9                 movzx   ecx, word ptr [eax]
.text:0000AAAC                 or      ecx, 10h
.text:0000AAAF                 mov     edx, [ebp+var_15C]
.text:0000AAB5                 mov     [edx], cx
.text:0000AAB8                 mov     eax, [ebp+arg_0]
.text:0000AABB                 mov     ecx, [ebp+arg_0]
.text:0000AABE                 mov     edx, [eax+6Ch]
.text:0000AAC1                 cmp     edx, [ecx+80h]
.text:0000AAC7                 jnz     short loc_AAEC
.text:0000AAC9                 push    1
.text:0000AACB                 push    1
.text:0000AACD                 mov     eax, [ebp+arg_0]
.text:0000AAD0                 mov     ecx, [eax+80h]
.text:0000AAD6                 push    ecx
.text:0000AAD7                 mov     edx, [ebp+arg_0]
.text:0000AADA                 mov     eax, [edx+7Ch]
.text:0000AADD                 push    eax
.text:0000AADE                 mov     ecx, [ebp+arg_0]
.text:0000AAE1                 push    ecx
.text:0000AAE2                 call    _scroll
.text:0000AAE7                 add     esp, 14h
.text:0000AAEA                 jmp     short loc_AB0F
.text:0000AAEC ; ---------------------------------------------------------------------------
.text:0000AAEC
.text:0000AAEC loc_AAEC:                               ; CODE XREF: _term_out+157Bj
.text:0000AAEC                 mov     edx, [ebp+arg_0]
.text:0000AAEF                 mov     eax, [edx+128h]
.text:0000AAF5                 sub     eax, 1
.text:0000AAF8                 mov     ecx, [ebp+arg_0]
.text:0000AAFB                 cmp     [ecx+6Ch], eax
.text:0000AAFE                 jge     short loc_AB0F
.text:0000AB00                 mov     edx, [ebp+arg_0]
.text:0000AB03                 mov     eax, [edx+6Ch]
.text:0000AB06                 add     eax, 1
.text:0000AB09                 mov     ecx, [ebp+arg_0]
.text:0000AB0C                 mov     [ecx+6Ch], eax
.text:0000AB0F
.text:0000AB0F loc_AB0F:                               ; CODE XREF: _term_out+159Ej
.text:0000AB0F                                         ; _term_out+15B2j
.text:0000AB0F                 mov     edx, [ebp+arg_0]
.text:0000AB12                 mov     dword ptr [edx+70h], 0
.text:0000AB19                 mov     eax, [ebp+arg_0]
.text:0000AB1C                 mov     dword ptr [eax+8Ch], 0
.text:0000AB26
.text:0000AB26 loc_AB26:                               ; CODE XREF: _term_out+1515j
.text:0000AB26                                         ; _term_out+1541j ...
.text:0000AB26                 mov     ecx, [ebp+arg_0]
.text:0000AB29                 push    ecx
.text:0000AB2A                 call    _seen_disp_event
.text:0000AB2F                 add     esp, 4
.text:0000AB32                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000AB37 ; ---------------------------------------------------------------------------
.text:0000AB37
.text:0000AB37 $LN432:                                 ; CODE XREF: _term_out+F47j
.text:0000AB37                                         ; DATA XREF: .text:$LN732o
.text:0000AB37                 cmp     [ebp+C], 5Ch ; '\' ; jumptable 0000A493 case 8
.text:0000AB3B                 jnz     short $LN430    ; jumptable 0000A493 case 1
.text:0000AB3D                 mov     edx, [ebp+arg_0]
.text:0000AB40                 push    edx
.text:0000AB41                 call    _do_osc
.text:0000AB46                 add     esp, 4
.text:0000AB49                 mov     eax, [ebp+arg_0]
.text:0000AB4C                 mov     dword ptr [eax+0E44h], 0
.text:0000AB56                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000AB5B ; ---------------------------------------------------------------------------
.text:0000AB5B
.text:0000AB5B $LN430:                                 ; CODE XREF: _term_out+F47j
.text:0000AB5B                                         ; _term_out+15EFj
.text:0000AB5B                                         ; DATA XREF: ...
.text:0000AB5B                 cmp     [ebp+C], 20h ; ' ' ; jumptable 0000A493 case 1
.text:0000AB5F                 jb      short loc_AB93
.text:0000AB61                 cmp     [ebp+C], 2Fh ; '/'
.text:0000AB65                 ja      short loc_AB93
.text:0000AB67                 mov     ecx, [ebp+arg_0]
.text:0000AB6A                 cmp     dword ptr [ecx+230h], 0
.text:0000AB71                 jz      short loc_AB82
.text:0000AB73                 mov     edx, [ebp+arg_0]
.text:0000AB76                 mov     dword ptr [edx+230h], 0FFFFFFFFh
.text:0000AB80                 jmp     short loc_AB8E
.text:0000AB82 ; ---------------------------------------------------------------------------
.text:0000AB82
.text:0000AB82 loc_AB82:                               ; CODE XREF: _term_out+1625j
.text:0000AB82                 mov     eax, [ebp+arg_0]
.text:0000AB85                 mov     ecx, [ebp+C]
.text:0000AB88                 mov     [eax+230h], ecx
.text:0000AB8E
.text:0000AB8E loc_AB8E:                               ; CODE XREF: _term_out+1634j
.text:0000AB8E                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000AB93 ; ---------------------------------------------------------------------------
.text:0000AB93
.text:0000AB93 loc_AB93:                               ; CODE XREF: _term_out+1613j
.text:0000AB93                                         ; _term_out+1619j
.text:0000AB93                 mov     edx, [ebp+arg_0]
.text:0000AB96                 mov     dword ptr [edx+0E44h], 0
.text:0000ABA0                 mov     eax, [ebp+arg_0]
.text:0000ABA3                 mov     ecx, [eax+230h]
.text:0000ABA9                 shl     ecx, 8
.text:0000ABAC                 add     ecx, [ebp+C]
.text:0000ABAF                 mov     [ebp+var_358], ecx
.text:0000ABB5                 cmp     [ebp+var_358], 2336h
.text:0000ABBF                 ja      short loc_AC01
.text:0000ABC1                 cmp     [ebp+var_358], 2333h
.text:0000ABCB                 jnb     loc_B2A4
.text:0000ABD1                 mov     edx, [ebp+var_358]
.text:0000ABD7                 sub     edx, 37h ; '7'
.text:0000ABDA                 mov     [ebp+var_358], edx
.text:0000ABE0                 cmp     [ebp+var_358], 2Ch ; ',' ; switch 45 cases
.text:0000ABE7                 ja      $LN425          ; jumptable 0000ABFA default case
.text:0000ABED                 mov     eax, [ebp+var_358]
.text:0000ABF3                 movzx   ecx, ds:$LN706[eax]
.text:0000ABFA                 jmp     ds:$LN733[ecx*4] ; switch jump
.text:0000AC01 ; ---------------------------------------------------------------------------
.text:0000AC01
.text:0000AC01 loc_AC01:                               ; CODE XREF: _term_out+1673j
.text:0000AC01                 cmp     [ebp+var_358], 2842h
.text:0000AC0B                 ja      loc_AC97
.text:0000AC11                 cmp     [ebp+var_358], 2842h
.text:0000AC1B                 jz      loc_B3AB
.text:0000AC21                 cmp     [ebp+var_358], 2547h
.text:0000AC2B                 ja      short loc_AC72
.text:0000AC2D                 cmp     [ebp+var_358], 2547h
.text:0000AC37                 jz      loc_B544
.text:0000AC3D                 cmp     [ebp+var_358], 2338h
.text:0000AC47                 jz      loc_B133
.text:0000AC4D                 cmp     [ebp+var_358], 2538h
.text:0000AC57                 jz      loc_B544
.text:0000AC5D                 cmp     [ebp+var_358], 2540h
.text:0000AC67                 jz      loc_B57A
.text:0000AC6D                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AC72 ; ---------------------------------------------------------------------------
.text:0000AC72
.text:0000AC72 loc_AC72:                               ; CODE XREF: _term_out+16DFj
.text:0000AC72                 cmp     [ebp+var_358], 2830h
.text:0000AC7C                 jz      loc_B3E5
.text:0000AC82                 cmp     [ebp+var_358], 2841h
.text:0000AC8C                 jz      loc_B371
.text:0000AC92                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AC97 ; ---------------------------------------------------------------------------
.text:0000AC97
.text:0000AC97 loc_AC97:                               ; CODE XREF: _term_out+16BFj
.text:0000AC97                 cmp     [ebp+var_358], 2941h
.text:0000ACA1                 ja      short loc_ACD8
.text:0000ACA3                 cmp     [ebp+var_358], 2941h
.text:0000ACAD                 jz      loc_B45C
.text:0000ACB3                 cmp     [ebp+var_358], 2855h
.text:0000ACBD                 jz      loc_B41F
.text:0000ACC3                 cmp     [ebp+var_358], 2930h
.text:0000ACCD                 jz      loc_B4D0
.text:0000ACD3                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000ACD8 ; ---------------------------------------------------------------------------
.text:0000ACD8
.text:0000ACD8 loc_ACD8:                               ; CODE XREF: _term_out+1755j
.text:0000ACD8                 cmp     [ebp+var_358], 2942h
.text:0000ACE2                 jz      loc_B496
.text:0000ACE8                 cmp     [ebp+var_358], 2955h
.text:0000ACF2                 jz      loc_B50A
.text:0000ACF8                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000ACFD ; ---------------------------------------------------------------------------
.text:0000ACFD
.text:0000ACFD $LN424:                                 ; CODE XREF: _term_out+16AEj
.text:0000ACFD                                         ; DATA XREF: .text:$LN733o
.text:0000ACFD                 mov     edx, [ebp+arg_0] ; jumptable 0000ABFA case 36
.text:0000AD00                 mov     dword ptr [edx+0E44h], 2
.text:0000AD0A                 mov     eax, [ebp+arg_0]
.text:0000AD0D                 mov     dword ptr [eax+22Ch], 1
.text:0000AD17                 mov     ecx, [ebp+arg_0]
.text:0000AD1A                 mov     dword ptr [ecx+1ACh], 0
.text:0000AD24                 mov     edx, [ebp+arg_0]
.text:0000AD27                 mov     dword ptr [edx+230h], 0
.text:0000AD31                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AD36 ; ---------------------------------------------------------------------------
.text:0000AD36
.text:0000AD36 $LN423:                                 ; CODE XREF: _term_out+16AEj
.text:0000AD36                                         ; DATA XREF: .text:$LN733o
.text:0000AD36                 mov     eax, [ebp+arg_0] ; jumptable 0000ABFA case 38
.text:0000AD39                 mov     ecx, [eax]
.text:0000AD3B                 and     ecx, 4000h
.text:0000AD41                 jnz     short loc_AD55
.text:0000AD43                 mov     edx, [ebp+arg_0]
.text:0000AD46                 mov     dword ptr [edx+0E44h], 0
.text:0000AD50                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AD55 ; ---------------------------------------------------------------------------
.text:0000AD55
.text:0000AD55 loc_AD55:                               ; CODE XREF: _term_out+17F5j
.text:0000AD55                 mov     eax, [ebp+arg_0]
.text:0000AD58                 mov     dword ptr [eax+0E44h], 3
.text:0000AD62                 mov     ecx, [ebp+arg_0]
.text:0000AD65                 mov     dword ptr [ecx+1ACh], 0
.text:0000AD6F                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AD74 ; ---------------------------------------------------------------------------
.text:0000AD74
.text:0000AD74 $LN421:                                 ; CODE XREF: _term_out+16AEj
.text:0000AD74                                         ; DATA XREF: .text:$LN733o
.text:0000AD74                 mov     edx, [ebp+arg_0] ; jumptable 0000ABFA case 0
.text:0000AD77                 mov     eax, [edx]
.text:0000AD79                 and     eax, 2
.text:0000AD7C                 jnz     short loc_AD90
.text:0000AD7E                 mov     ecx, [ebp+arg_0]
.text:0000AD81                 mov     dword ptr [ecx+0E44h], 0
.text:0000AD8B                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AD90 ; ---------------------------------------------------------------------------
.text:0000AD90
.text:0000AD90 loc_AD90:                               ; CODE XREF: _term_out+1830j
.text:0000AD90                 push    1
.text:0000AD92                 mov     edx, [ebp+arg_0]
.text:0000AD95                 push    edx
.text:0000AD96                 call    _save_cursor
.text:0000AD9B                 add     esp, 8
.text:0000AD9E                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000ADA3 ; ---------------------------------------------------------------------------
.text:0000ADA3
.text:0000ADA3 $LN419:                                 ; CODE XREF: _term_out+16AEj
.text:0000ADA3                                         ; DATA XREF: .text:$LN733o
.text:0000ADA3                 mov     eax, [ebp+arg_0] ; jumptable 0000ABFA case 1
.text:0000ADA6                 mov     ecx, [eax]
.text:0000ADA8                 and     ecx, 2
.text:0000ADAB                 jnz     short loc_ADBF
.text:0000ADAD                 mov     edx, [ebp+arg_0]
.text:0000ADB0                 mov     dword ptr [edx+0E44h], 0
.text:0000ADBA                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000ADBF ; ---------------------------------------------------------------------------
.text:0000ADBF
.text:0000ADBF loc_ADBF:                               ; CODE XREF: _term_out+185Fj
.text:0000ADBF                 push    0
.text:0000ADC1                 mov     eax, [ebp+arg_0]
.text:0000ADC4                 push    eax
.text:0000ADC5                 call    _save_cursor
.text:0000ADCA                 add     esp, 8
.text:0000ADCD                 mov     ecx, [ebp+arg_0]
.text:0000ADD0                 push    ecx
.text:0000ADD1                 call    _seen_disp_event
.text:0000ADD6                 add     esp, 4
.text:0000ADD9                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000ADDE ; ---------------------------------------------------------------------------
.text:0000ADDE
.text:0000ADDE $LN417:                                 ; CODE XREF: _term_out+16AEj
.text:0000ADDE                                         ; DATA XREF: .text:$LN733o
.text:0000ADDE                 mov     edx, [ebp+arg_0] ; jumptable 0000ABFA case 6
.text:0000ADE1                 mov     eax, [edx]
.text:0000ADE3                 and     eax, 2
.text:0000ADE6                 jnz     short loc_ADFA
.text:0000ADE8                 mov     ecx, [ebp+arg_0]
.text:0000ADEB                 mov     dword ptr [ecx+0E44h], 0
.text:0000ADF5                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000ADFA ; ---------------------------------------------------------------------------
.text:0000ADFA
.text:0000ADFA loc_ADFA:                               ; CODE XREF: _term_out+189Aj
.text:0000ADFA                 mov     edx, [ebp+arg_0]
.text:0000ADFD                 mov     dword ptr [edx+144h], 1
.text:0000AE07                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AE0C ; ---------------------------------------------------------------------------
.text:0000AE0C
.text:0000AE0C $LN415:                                 ; CODE XREF: _term_out+16AEj
.text:0000AE0C                                         ; DATA XREF: .text:$LN733o
.text:0000AE0C                 mov     eax, [ebp+arg_0] ; jumptable 0000ABFA case 7
.text:0000AE0F                 mov     ecx, [eax]
.text:0000AE11                 and     ecx, 2
.text:0000AE14                 jnz     short loc_AE28
.text:0000AE16                 mov     edx, [ebp+arg_0]
.text:0000AE19                 mov     dword ptr [edx+0E44h], 0
.text:0000AE23                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AE28 ; ---------------------------------------------------------------------------
.text:0000AE28
.text:0000AE28 loc_AE28:                               ; CODE XREF: _term_out+18C8j
.text:0000AE28                 mov     eax, [ebp+arg_0]
.text:0000AE2B                 mov     dword ptr [eax+144h], 0
.text:0000AE35                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AE3A ; ---------------------------------------------------------------------------
.text:0000AE3A
.text:0000AE3A $LN413:                                 ; CODE XREF: _term_out+16AEj
.text:0000AE3A                                         ; DATA XREF: .text:$LN733o
.text:0000AE3A                 mov     ecx, [ebp+arg_0] ; jumptable 0000ABFA case 13
.text:0000AE3D                 mov     edx, [ecx]
.text:0000AE3F                 and     edx, 2
.text:0000AE42                 jnz     short loc_AE56
.text:0000AE44                 mov     eax, [ebp+arg_0]
.text:0000AE47                 mov     dword ptr [eax+0E44h], 0
.text:0000AE51                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AE56 ; ---------------------------------------------------------------------------
.text:0000AE56
.text:0000AE56 loc_AE56:                               ; CODE XREF: _term_out+18F6j
.text:0000AE56                 mov     ecx, [ebp+arg_0]
.text:0000AE59                 mov     edx, [ebp+arg_0]
.text:0000AE5C                 mov     eax, [ecx+6Ch]
.text:0000AE5F                 cmp     eax, [edx+80h]
.text:0000AE65                 jnz     short loc_AE8A
.text:0000AE67                 push    1
.text:0000AE69                 push    1
.text:0000AE6B                 mov     ecx, [ebp+arg_0]
.text:0000AE6E                 mov     edx, [ecx+80h]
.text:0000AE74                 push    edx
.text:0000AE75                 mov     eax, [ebp+arg_0]
.text:0000AE78                 mov     ecx, [eax+7Ch]
.text:0000AE7B                 push    ecx
.text:0000AE7C                 mov     edx, [ebp+arg_0]
.text:0000AE7F                 push    edx
.text:0000AE80                 call    _scroll
.text:0000AE85                 add     esp, 14h
.text:0000AE88                 jmp     short loc_AEAD
.text:0000AE8A ; ---------------------------------------------------------------------------
.text:0000AE8A
.text:0000AE8A loc_AE8A:                               ; CODE XREF: _term_out+1919j
.text:0000AE8A                 mov     eax, [ebp+arg_0]
.text:0000AE8D                 mov     ecx, [eax+128h]
.text:0000AE93                 sub     ecx, 1
.text:0000AE96                 mov     edx, [ebp+arg_0]
.text:0000AE99                 cmp     [edx+6Ch], ecx
.text:0000AE9C                 jge     short loc_AEAD
.text:0000AE9E                 mov     eax, [ebp+arg_0]
.text:0000AEA1                 mov     ecx, [eax+6Ch]
.text:0000AEA4                 add     ecx, 1
.text:0000AEA7                 mov     edx, [ebp+arg_0]
.text:0000AEAA                 mov     [edx+6Ch], ecx
.text:0000AEAD
.text:0000AEAD loc_AEAD:                               ; CODE XREF: _term_out+193Cj
.text:0000AEAD                                         ; _term_out+1950j
.text:0000AEAD                 mov     eax, [ebp+arg_0]
.text:0000AEB0                 mov     dword ptr [eax+8Ch], 0
.text:0000AEBA                 mov     ecx, [ebp+arg_0]
.text:0000AEBD                 push    ecx
.text:0000AEBE                 call    _seen_disp_event
.text:0000AEC3                 add     esp, 4
.text:0000AEC6                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AECB ; ---------------------------------------------------------------------------
.text:0000AECB
.text:0000AECB $LN408:                                 ; CODE XREF: _term_out+16AEj
.text:0000AECB                                         ; DATA XREF: .text:$LN733o
.text:0000AECB                 mov     edx, [ebp+arg_0] ; jumptable 0000ABFA case 14
.text:0000AECE                 mov     eax, [edx]
.text:0000AED0                 and     eax, 2
.text:0000AED3                 jnz     short loc_AEE7
.text:0000AED5                 mov     ecx, [ebp+arg_0]
.text:0000AED8                 mov     dword ptr [ecx+0E44h], 0
.text:0000AEE2                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AEE7 ; ---------------------------------------------------------------------------
.text:0000AEE7
.text:0000AEE7 loc_AEE7:                               ; CODE XREF: _term_out+1987j
.text:0000AEE7                 mov     edx, [ebp+arg_0]
.text:0000AEEA                 mov     dword ptr [edx+70h], 0
.text:0000AEF1                 mov     eax, [ebp+arg_0]
.text:0000AEF4                 mov     ecx, [ebp+arg_0]
.text:0000AEF7                 mov     edx, [eax+6Ch]
.text:0000AEFA                 cmp     edx, [ecx+80h]
.text:0000AF00                 jnz     short loc_AF25
.text:0000AF02                 push    1
.text:0000AF04                 push    1
.text:0000AF06                 mov     eax, [ebp+arg_0]
.text:0000AF09                 mov     ecx, [eax+80h]
.text:0000AF0F                 push    ecx
.text:0000AF10                 mov     edx, [ebp+arg_0]
.text:0000AF13                 mov     eax, [edx+7Ch]
.text:0000AF16                 push    eax
.text:0000AF17                 mov     ecx, [ebp+arg_0]
.text:0000AF1A                 push    ecx
.text:0000AF1B                 call    _scroll
.text:0000AF20                 add     esp, 14h
.text:0000AF23                 jmp     short loc_AF48
.text:0000AF25 ; ---------------------------------------------------------------------------
.text:0000AF25
.text:0000AF25 loc_AF25:                               ; CODE XREF: _term_out+19B4j
.text:0000AF25                 mov     edx, [ebp+arg_0]
.text:0000AF28                 mov     eax, [edx+128h]
.text:0000AF2E                 sub     eax, 1
.text:0000AF31                 mov     ecx, [ebp+arg_0]
.text:0000AF34                 cmp     [ecx+6Ch], eax
.text:0000AF37                 jge     short loc_AF48
.text:0000AF39                 mov     edx, [ebp+arg_0]
.text:0000AF3C                 mov     eax, [edx+6Ch]
.text:0000AF3F                 add     eax, 1
.text:0000AF42                 mov     ecx, [ebp+arg_0]
.text:0000AF45                 mov     [ecx+6Ch], eax
.text:0000AF48
.text:0000AF48 loc_AF48:                               ; CODE XREF: _term_out+19D7j
.text:0000AF48                                         ; _term_out+19EBj
.text:0000AF48                 mov     edx, [ebp+arg_0]
.text:0000AF4B                 mov     dword ptr [edx+8Ch], 0
.text:0000AF55                 mov     eax, [ebp+arg_0]
.text:0000AF58                 push    eax
.text:0000AF59                 call    _seen_disp_event
.text:0000AF5E                 add     esp, 4
.text:0000AF61                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AF66 ; ---------------------------------------------------------------------------
.text:0000AF66
.text:0000AF66 $LN403:                                 ; CODE XREF: _term_out+16AEj
.text:0000AF66                                         ; DATA XREF: .text:$LN733o
.text:0000AF66                 mov     ecx, [ebp+arg_0] ; jumptable 0000ABFA case 22
.text:0000AF69                 mov     edx, [ecx]
.text:0000AF6B                 and     edx, 2
.text:0000AF6E                 jnz     short loc_AF82
.text:0000AF70                 mov     eax, [ebp+arg_0]
.text:0000AF73                 mov     dword ptr [eax+0E44h], 0
.text:0000AF7D                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AF82 ; ---------------------------------------------------------------------------
.text:0000AF82
.text:0000AF82 loc_AF82:                               ; CODE XREF: _term_out+1A22j
.text:0000AF82                 mov     ecx, [ebp+arg_0]
.text:0000AF85                 mov     edx, [ebp+arg_0]
.text:0000AF88                 mov     eax, [ecx+6Ch]
.text:0000AF8B                 cmp     eax, [edx+7Ch]
.text:0000AF8E                 jnz     short loc_AFB3
.text:0000AF90                 push    1
.text:0000AF92                 push    0FFFFFFFFh
.text:0000AF94                 mov     ecx, [ebp+arg_0]
.text:0000AF97                 mov     edx, [ecx+80h]
.text:0000AF9D                 push    edx
.text:0000AF9E                 mov     eax, [ebp+arg_0]
.text:0000AFA1                 mov     ecx, [eax+7Ch]
.text:0000AFA4                 push    ecx
.text:0000AFA5                 mov     edx, [ebp+arg_0]
.text:0000AFA8                 push    edx
.text:0000AFA9                 call    _scroll
.text:0000AFAE                 add     esp, 14h
.text:0000AFB1                 jmp     short loc_AFCB
.text:0000AFB3 ; ---------------------------------------------------------------------------
.text:0000AFB3
.text:0000AFB3 loc_AFB3:                               ; CODE XREF: _term_out+1A42j
.text:0000AFB3                 mov     eax, [ebp+arg_0]
.text:0000AFB6                 cmp     dword ptr [eax+6Ch], 0
.text:0000AFBA                 jle     short loc_AFCB
.text:0000AFBC                 mov     ecx, [ebp+arg_0]
.text:0000AFBF                 mov     edx, [ecx+6Ch]
.text:0000AFC2                 sub     edx, 1
.text:0000AFC5                 mov     eax, [ebp+arg_0]
.text:0000AFC8                 mov     [eax+6Ch], edx
.text:0000AFCB
.text:0000AFCB loc_AFCB:                               ; CODE XREF: _term_out+1A65j
.text:0000AFCB                                         ; _term_out+1A6Ej
.text:0000AFCB                 mov     ecx, [ebp+arg_0]
.text:0000AFCE                 mov     dword ptr [ecx+8Ch], 0
.text:0000AFD8                 mov     edx, [ebp+arg_0]
.text:0000AFDB                 push    edx
.text:0000AFDC                 call    _seen_disp_event
.text:0000AFE1                 add     esp, 4
.text:0000AFE4                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000AFE9 ; ---------------------------------------------------------------------------
.text:0000AFE9
.text:0000AFE9 $LN398:                                 ; CODE XREF: _term_out+16AEj
.text:0000AFE9                                         ; DATA XREF: .text:$LN733o
.text:0000AFE9                 mov     eax, [ebp+arg_0] ; jumptable 0000ABFA case 35
.text:0000AFEC                 mov     ecx, [eax]
.text:0000AFEE                 and     ecx, 2
.text:0000AFF1                 jnz     short loc_B005
.text:0000AFF3                 mov     edx, [ebp+arg_0]
.text:0000AFF6                 mov     dword ptr [edx+0E44h], 0
.text:0000B000                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B005 ; ---------------------------------------------------------------------------
.text:0000B005
.text:0000B005 loc_B005:                               ; CODE XREF: _term_out+1AA5j
.text:0000B005                 mov     eax, [ebp+arg_0]
.text:0000B008                 cmp     dword ptr [eax+1084h], 0
.text:0000B00F                 jz      short loc_B042
.text:0000B011                 push    0
.text:0000B013                 mov     ecx, [ebp+arg_0]
.text:0000B016                 add     ecx, 0A40h
.text:0000B01C                 push    ecx             ; Str
.text:0000B01D                 call    _strlen
.text:0000B022                 add     esp, 4
.text:0000B025                 push    eax
.text:0000B026                 mov     edx, [ebp+arg_0]
.text:0000B029                 add     edx, 0A40h
.text:0000B02F                 push    edx
.text:0000B030                 mov     eax, [ebp+arg_0]
.text:0000B033                 mov     ecx, [eax+1084h]
.text:0000B039                 push    ecx
.text:0000B03A                 call    _ldisc_send
.text:0000B03F                 add     esp, 10h
.text:0000B042
.text:0000B042 loc_B042:                               ; CODE XREF: _term_out+1AC3j
.text:0000B042                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B047 ; ---------------------------------------------------------------------------
.text:0000B047
.text:0000B047 $LN395:                                 ; CODE XREF: _term_out+16AEj
.text:0000B047                                         ; DATA XREF: .text:$LN733o
.text:0000B047                 mov     edx, [ebp+arg_0] ; jumptable 0000ABFA case 44
.text:0000B04A                 mov     eax, [edx]
.text:0000B04C                 and     eax, 2
.text:0000B04F                 jnz     short loc_B063
.text:0000B051                 mov     ecx, [ebp+arg_0]
.text:0000B054                 mov     dword ptr [ecx+0E44h], 0
.text:0000B05E                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B063 ; ---------------------------------------------------------------------------
.text:0000B063
.text:0000B063 loc_B063:                               ; CODE XREF: _term_out+1B03j
.text:0000B063                 push    1
.text:0000B065                 mov     edx, [ebp+arg_0]
.text:0000B068                 push    edx
.text:0000B069                 call    _power_on
.text:0000B06E                 add     esp, 8
.text:0000B071                 mov     eax, [ebp+arg_0]
.text:0000B074                 cmp     dword ptr [eax+1084h], 0
.text:0000B07B                 jz      short loc_B095
.text:0000B07D                 push    0
.text:0000B07F                 push    0
.text:0000B081                 push    0
.text:0000B083                 mov     ecx, [ebp+arg_0]
.text:0000B086                 mov     edx, [ecx+1084h]
.text:0000B08C                 push    edx
.text:0000B08D                 call    _ldisc_send
.text:0000B092                 add     esp, 10h
.text:0000B095
.text:0000B095 loc_B095:                               ; CODE XREF: _term_out+1B2Fj
.text:0000B095                 mov     eax, [ebp+arg_0]
.text:0000B098                 cmp     dword ptr [eax+0B4h], 0
.text:0000B09F                 jz      short loc_B0D8
.text:0000B0A1                 mov     ecx, [ebp+arg_0]
.text:0000B0A4                 cmp     dword ptr [ecx+114Ch], 0
.text:0000B0AB                 jnz     short loc_B0CB
.text:0000B0AD                 mov     edx, [ebp+arg_0]
.text:0000B0B0                 mov     eax, [edx+128h]
.text:0000B0B6                 push    eax
.text:0000B0B7                 push    50h ; 'P'
.text:0000B0B9                 mov     ecx, [ebp+arg_0]
.text:0000B0BC                 mov     edx, [ecx+1088h]
.text:0000B0C2                 push    edx
.text:0000B0C3                 call    _request_resize
.text:0000B0C8                 add     esp, 0Ch
.text:0000B0CB
.text:0000B0CB loc_B0CB:                               ; CODE XREF: _term_out+1B5Fj
.text:0000B0CB                 mov     eax, [ebp+arg_0]
.text:0000B0CE                 mov     dword ptr [eax+0B4h], 0
.text:0000B0D8
.text:0000B0D8 loc_B0D8:                               ; CODE XREF: _term_out+1B53j
.text:0000B0D8                 mov     ecx, [ebp+arg_0]
.text:0000B0DB                 cmp     dword ptr [ecx+1164h], 0
.text:0000B0E2                 jz      short loc_B0EE
.text:0000B0E4                 mov     edx, [ebp+arg_0]
.text:0000B0E7                 mov     dword ptr [edx+10h], 0
.text:0000B0EE
.text:0000B0EE loc_B0EE:                               ; CODE XREF: _term_out+1B96j
.text:0000B0EE                 mov     eax, [ebp+arg_0]
.text:0000B0F1                 push    eax
.text:0000B0F2                 call    _seen_disp_event
.text:0000B0F7                 add     esp, 4
.text:0000B0FA                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B0FF ; ---------------------------------------------------------------------------
.text:0000B0FF
.text:0000B0FF $LN389:                                 ; CODE XREF: _term_out+16AEj
.text:0000B0FF                                         ; DATA XREF: .text:$LN733o
.text:0000B0FF                 mov     ecx, [ebp+arg_0] ; jumptable 0000ABFA case 17
.text:0000B102                 mov     edx, [ecx]
.text:0000B104                 and     edx, 2
.text:0000B107                 jnz     short loc_B11B
.text:0000B109                 mov     eax, [ebp+arg_0]
.text:0000B10C                 mov     dword ptr [eax+0E44h], 0
.text:0000B116                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B11B ; ---------------------------------------------------------------------------
.text:0000B11B
.text:0000B11B loc_B11B:                               ; CODE XREF: _term_out+1BBBj
.text:0000B11B                 mov     ecx, [ebp+arg_0]
.text:0000B11E                 mov     edx, [ecx+0E40h]
.text:0000B124                 mov     eax, [ebp+arg_0]
.text:0000B127                 mov     ecx, [eax+70h]
.text:0000B12A                 mov     byte ptr [edx+ecx], 1
.text:0000B12E                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B133 ; ---------------------------------------------------------------------------
.text:0000B133
.text:0000B133 loc_B133:                               ; CODE XREF: _term_out+16FBj
.text:0000B133                 mov     edx, [ebp+arg_0]
.text:0000B136                 mov     eax, [edx]
.text:0000B138                 and     eax, 2
.text:0000B13B                 jnz     short loc_B14F
.text:0000B13D                 mov     ecx, [ebp+arg_0]
.text:0000B140                 mov     dword ptr [ecx+0E44h], 0
.text:0000B14A                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B14F ; ---------------------------------------------------------------------------
.text:0000B14F
.text:0000B14F loc_B14F:                               ; CODE XREF: _term_out+1BEFj
.text:0000B14F                 mov     [ebp+var_17C], 0
.text:0000B159                 jmp     short loc_B16A
.text:0000B15B ; ---------------------------------------------------------------------------
.text:0000B15B
.text:0000B15B loc_B15B:                               ; CODE XREF: _term_out+1CD5j
.text:0000B15B                 mov     edx, [ebp+var_17C]
.text:0000B161                 add     edx, 1
.text:0000B164                 mov     [ebp+var_17C], edx
.text:0000B16A
.text:0000B16A loc_B16A:                               ; CODE XREF: _term_out+1C0Dj
.text:0000B16A                 mov     eax, [ebp+arg_0]
.text:0000B16D                 mov     ecx, [ebp+var_17C]
.text:0000B173                 cmp     ecx, [eax+128h]
.text:0000B179                 jge     loc_B226
.text:0000B17F                 push    1
.text:0000B181                 push    0D3Bh
.text:0000B186                 mov     edx, [ebp+var_17C]
.text:0000B18C                 push    edx
.text:0000B18D                 mov     eax, [ebp+arg_0]
.text:0000B190                 push    eax
.text:0000B191                 call    _lineptr
.text:0000B196                 add     esp, 10h
.text:0000B199                 mov     [ebp+var_178], eax
.text:0000B19F                 mov     ecx, [ebp+var_178]
.text:0000B1A5                 push    ecx
.text:0000B1A6                 mov     edx, [ebp+arg_0]
.text:0000B1A9                 push    edx
.text:0000B1AA                 call    _check_line_size
.text:0000B1AF                 add     esp, 8
.text:0000B1B2                 mov     [ebp+var_180], 0
.text:0000B1BC                 jmp     short loc_B1CD
.text:0000B1BE ; ---------------------------------------------------------------------------
.text:0000B1BE
.text:0000B1BE loc_B1BE:                               ; CODE XREF: _term_out+1CC8j
.text:0000B1BE                 mov     eax, [ebp+var_180]
.text:0000B1C4                 add     eax, 1
.text:0000B1C7                 mov     [ebp+var_180], eax
.text:0000B1CD
.text:0000B1CD loc_B1CD:                               ; CODE XREF: _term_out+1C70j
.text:0000B1CD                 mov     ecx, [ebp+arg_0]
.text:0000B1D0                 mov     edx, [ebp+var_180]
.text:0000B1D6                 cmp     edx, [ecx+12Ch]
.text:0000B1DC                 jge     short loc_B216
.text:0000B1DE                 mov     eax, [ebp+arg_0]
.text:0000B1E1                 add     eax, 48h ; 'H'
.text:0000B1E4                 push    eax
.text:0000B1E5                 mov     ecx, [ebp+var_180]
.text:0000B1EB                 push    ecx
.text:0000B1EC                 mov     edx, [ebp+var_178]
.text:0000B1F2                 push    edx
.text:0000B1F3                 call    _copy_termchar
.text:0000B1F8                 add     esp, 0Ch
.text:0000B1FB                 mov     eax, [ebp+var_180]
.text:0000B201                 imul    eax, 0Ch
.text:0000B204                 mov     ecx, [ebp+var_178]
.text:0000B20A                 mov     edx, [ecx+14h]
.text:0000B20D                 mov     dword ptr [eax+edx], 45h ; 'E'
.text:0000B214                 jmp     short loc_B1BE
.text:0000B216 ; ---------------------------------------------------------------------------
.text:0000B216
.text:0000B216 loc_B216:                               ; CODE XREF: _term_out+1C90j
.text:0000B216                 xor     eax, eax
.text:0000B218                 mov     ecx, [ebp+var_178]
.text:0000B21E                 mov     [ecx], ax
.text:0000B221                 jmp     loc_B15B
.text:0000B226 ; ---------------------------------------------------------------------------
.text:0000B226
.text:0000B226 loc_B226:                               ; CODE XREF: _term_out+1C2Dj
.text:0000B226                 mov     edx, [ebp+arg_0]
.text:0000B229                 cmp     dword ptr [edx+1164h], 0
.text:0000B230                 jz      short loc_B23C
.text:0000B232                 mov     eax, [ebp+arg_0]
.text:0000B235                 mov     dword ptr [eax+10h], 0
.text:0000B23C
.text:0000B23C loc_B23C:                               ; CODE XREF: _term_out+1CE4j
.text:0000B23C                 mov     ecx, [ebp+arg_0]
.text:0000B23F                 push    ecx
.text:0000B240                 call    _seen_disp_event
.text:0000B245                 add     esp, 4
.text:0000B248                 mov     [ebp+var_18C], 0
.text:0000B252                 mov     edx, [ebp+var_18C]
.text:0000B258                 mov     [ebp+var_188], edx
.text:0000B25E                 mov     [ebp+var_198], 0
.text:0000B268                 mov     eax, [ebp+arg_0]
.text:0000B26B                 mov     ecx, [eax+128h]
.text:0000B271                 mov     [ebp+var_19C], ecx
.text:0000B277                 mov     edx, [ebp+var_198]
.text:0000B27D                 push    edx
.text:0000B27E                 mov     eax, [ebp+var_19C]
.text:0000B284                 push    eax
.text:0000B285                 mov     ecx, [ebp+var_188]
.text:0000B28B                 push    ecx
.text:0000B28C                 mov     edx, [ebp+var_18C]
.text:0000B292                 push    edx
.text:0000B293                 mov     eax, [ebp+arg_0]
.text:0000B296                 push    eax
.text:0000B297                 call    _check_selection
.text:0000B29C                 add     esp, 14h
.text:0000B29F                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B2A4 ; ---------------------------------------------------------------------------
.text:0000B2A4
.text:0000B2A4 loc_B2A4:                               ; CODE XREF: _term_out+167Fj
.text:0000B2A4                 mov     ecx, [ebp+arg_0]
.text:0000B2A7                 mov     edx, [ecx]
.text:0000B2A9                 and     edx, 2
.text:0000B2AC                 jnz     short loc_B2C0
.text:0000B2AE                 mov     eax, [ebp+arg_0]
.text:0000B2B1                 mov     dword ptr [eax+0E44h], 0
.text:0000B2BB                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B2C0 ; ---------------------------------------------------------------------------
.text:0000B2C0
.text:0000B2C0 loc_B2C0:                               ; CODE XREF: _term_out+1D60j
.text:0000B2C0                 mov     ecx, [ebp+arg_0]
.text:0000B2C3                 mov     edx, [ecx+230h]
.text:0000B2C9                 shl     edx, 8
.text:0000B2CC                 add     edx, [ebp+C]
.text:0000B2CF                 mov     [ebp+var_35C], edx
.text:0000B2D5                 cmp     [ebp+var_35C], 2333h
.text:0000B2DF                 jz      short loc_B2FB
.text:0000B2E1                 cmp     [ebp+var_35C], 2334h
.text:0000B2EB                 jz      short loc_B307
.text:0000B2ED                 cmp     [ebp+var_35C], 2335h
.text:0000B2F7                 jz      short loc_B313
.text:0000B2F9                 jmp     short loc_B31F
.text:0000B2FB ; ---------------------------------------------------------------------------
.text:0000B2FB
.text:0000B2FB loc_B2FB:                               ; CODE XREF: _term_out+1D93j
.text:0000B2FB                 mov     [ebp+var_1A4], 2
.text:0000B305                 jmp     short loc_B329
.text:0000B307 ; ---------------------------------------------------------------------------
.text:0000B307
.text:0000B307 loc_B307:                               ; CODE XREF: _term_out+1D9Fj
.text:0000B307                 mov     [ebp+var_1A4], 3
.text:0000B311                 jmp     short loc_B329
.text:0000B313 ; ---------------------------------------------------------------------------
.text:0000B313
.text:0000B313 loc_B313:                               ; CODE XREF: _term_out+1DABj
.text:0000B313                 mov     [ebp+var_1A4], 0
.text:0000B31D                 jmp     short loc_B329
.text:0000B31F ; ---------------------------------------------------------------------------
.text:0000B31F
.text:0000B31F loc_B31F:                               ; CODE XREF: _term_out+1DADj
.text:0000B31F                 mov     [ebp+var_1A4], 1
.text:0000B329
.text:0000B329 loc_B329:                               ; CODE XREF: _term_out+1DB9j
.text:0000B329                                         ; _term_out+1DC5j ...
.text:0000B329                 push    1
.text:0000B32B                 push    0D65h
.text:0000B330                 mov     eax, [ebp+arg_0]
.text:0000B333                 mov     ecx, [eax+6Ch]
.text:0000B336                 push    ecx
.text:0000B337                 mov     edx, [ebp+arg_0]
.text:0000B33A                 push    edx
.text:0000B33B                 call    _lineptr
.text:0000B340                 add     esp, 10h
.text:0000B343                 mov     [ebp+var_1A8], eax
.text:0000B349                 mov     eax, [ebp+var_1A8]
.text:0000B34F                 push    eax
.text:0000B350                 mov     ecx, [ebp+arg_0]
.text:0000B353                 push    ecx
.text:0000B354                 call    _check_line_size
.text:0000B359                 add     esp, 8
.text:0000B35C                 mov     edx, [ebp+var_1A8]
.text:0000B362                 mov     ax, word ptr [ebp+var_1A4]
.text:0000B369                 mov     [edx], ax
.text:0000B36C                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B371 ; ---------------------------------------------------------------------------
.text:0000B371
.text:0000B371 loc_B371:                               ; CODE XREF: _term_out+1740j
.text:0000B371                 mov     ecx, [ebp+arg_0]
.text:0000B374                 mov     edx, [ecx]
.text:0000B376                 and     edx, 2
.text:0000B379                 jnz     short loc_B38D
.text:0000B37B                 mov     eax, [ebp+arg_0]
.text:0000B37E                 mov     dword ptr [eax+0E44h], 0
.text:0000B388                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B38D ; ---------------------------------------------------------------------------
.text:0000B38D
.text:0000B38D loc_B38D:                               ; CODE XREF: _term_out+1E2Dj
.text:0000B38D                 mov     ecx, [ebp+arg_0]
.text:0000B390                 cmp     dword ptr [ecx+1148h], 0
.text:0000B397                 jnz     short loc_B3A6
.text:0000B399                 mov     edx, [ebp+arg_0]
.text:0000B39C                 mov     dword ptr [edx+170h], 0DB00h
.text:0000B3A6
.text:0000B3A6 loc_B3A6:                               ; CODE XREF: _term_out+1E4Bj
.text:0000B3A6                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B3AB ; ---------------------------------------------------------------------------
.text:0000B3AB
.text:0000B3AB loc_B3AB:                               ; CODE XREF: _term_out+16CFj
.text:0000B3AB                 mov     eax, [ebp+arg_0]
.text:0000B3AE                 mov     ecx, [eax]
.text:0000B3B0                 and     ecx, 2
.text:0000B3B3                 jnz     short loc_B3C7
.text:0000B3B5                 mov     edx, [ebp+arg_0]
.text:0000B3B8                 mov     dword ptr [edx+0E44h], 0
.text:0000B3C2                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B3C7 ; ---------------------------------------------------------------------------
.text:0000B3C7
.text:0000B3C7 loc_B3C7:                               ; CODE XREF: _term_out+1E67j
.text:0000B3C7                 mov     eax, [ebp+arg_0]
.text:0000B3CA                 cmp     dword ptr [eax+1148h], 0
.text:0000B3D1                 jnz     short loc_B3E0
.text:0000B3D3                 mov     ecx, [ebp+arg_0]
.text:0000B3D6                 mov     dword ptr [ecx+170h], 0D800h
.text:0000B3E0
.text:0000B3E0 loc_B3E0:                               ; CODE XREF: _term_out+1E85j
.text:0000B3E0                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B3E5 ; ---------------------------------------------------------------------------
.text:0000B3E5
.text:0000B3E5 loc_B3E5:                               ; CODE XREF: _term_out+1730j
.text:0000B3E5                 mov     edx, [ebp+arg_0]
.text:0000B3E8                 mov     eax, [edx]
.text:0000B3EA                 and     eax, 2
.text:0000B3ED                 jnz     short loc_B401
.text:0000B3EF                 mov     ecx, [ebp+arg_0]
.text:0000B3F2                 mov     dword ptr [ecx+0E44h], 0
.text:0000B3FC                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B401 ; ---------------------------------------------------------------------------
.text:0000B401
.text:0000B401 loc_B401:                               ; CODE XREF: _term_out+1EA1j
.text:0000B401                 mov     edx, [ebp+arg_0]
.text:0000B404                 cmp     dword ptr [edx+1148h], 0
.text:0000B40B                 jnz     short loc_B41A
.text:0000B40D                 mov     eax, [ebp+arg_0]
.text:0000B410                 mov     dword ptr [eax+170h], 0D900h
.text:0000B41A
.text:0000B41A loc_B41A:                               ; CODE XREF: _term_out+1EBFj
.text:0000B41A                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B41F ; ---------------------------------------------------------------------------
.text:0000B41F
.text:0000B41F loc_B41F:                               ; CODE XREF: _term_out+1771j
.text:0000B41F                 mov     ecx, [ebp+arg_0]
.text:0000B422                 mov     edx, [ecx]
.text:0000B424                 and     edx, 4000h
.text:0000B42A                 jnz     short loc_B43E
.text:0000B42C                 mov     eax, [ebp+arg_0]
.text:0000B42F                 mov     dword ptr [eax+0E44h], 0
.text:0000B439                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B43E ; ---------------------------------------------------------------------------
.text:0000B43E
.text:0000B43E loc_B43E:                               ; CODE XREF: _term_out+1EDEj
.text:0000B43E                 mov     ecx, [ebp+arg_0]
.text:0000B441                 cmp     dword ptr [ecx+1148h], 0
.text:0000B448                 jnz     short loc_B457
.text:0000B44A                 mov     edx, [ebp+arg_0]
.text:0000B44D                 mov     dword ptr [edx+170h], 0DA00h
.text:0000B457
.text:0000B457 loc_B457:                               ; CODE XREF: _term_out+1EFCj
.text:0000B457                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B45C ; ---------------------------------------------------------------------------
.text:0000B45C
.text:0000B45C loc_B45C:                               ; CODE XREF: _term_out+1761j
.text:0000B45C                 mov     eax, [ebp+arg_0]
.text:0000B45F                 mov     ecx, [eax]
.text:0000B461                 and     ecx, 2
.text:0000B464                 jnz     short loc_B478
.text:0000B466                 mov     edx, [ebp+arg_0]
.text:0000B469                 mov     dword ptr [edx+0E44h], 0
.text:0000B473                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B478 ; ---------------------------------------------------------------------------
.text:0000B478
.text:0000B478 loc_B478:                               ; CODE XREF: _term_out+1F18j
.text:0000B478                 mov     eax, [ebp+arg_0]
.text:0000B47B                 cmp     dword ptr [eax+1148h], 0
.text:0000B482                 jnz     short loc_B491
.text:0000B484                 mov     ecx, [ebp+arg_0]
.text:0000B487                 mov     dword ptr [ecx+174h], 0DB00h
.text:0000B491
.text:0000B491 loc_B491:                               ; CODE XREF: _term_out+1F36j
.text:0000B491                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B496 ; ---------------------------------------------------------------------------
.text:0000B496
.text:0000B496 loc_B496:                               ; CODE XREF: _term_out+1796j
.text:0000B496                 mov     edx, [ebp+arg_0]
.text:0000B499                 mov     eax, [edx]
.text:0000B49B                 and     eax, 2
.text:0000B49E                 jnz     short loc_B4B2
.text:0000B4A0                 mov     ecx, [ebp+arg_0]
.text:0000B4A3                 mov     dword ptr [ecx+0E44h], 0
.text:0000B4AD                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B4B2 ; ---------------------------------------------------------------------------
.text:0000B4B2
.text:0000B4B2 loc_B4B2:                               ; CODE XREF: _term_out+1F52j
.text:0000B4B2                 mov     edx, [ebp+arg_0]
.text:0000B4B5                 cmp     dword ptr [edx+1148h], 0
.text:0000B4BC                 jnz     short loc_B4CB
.text:0000B4BE                 mov     eax, [ebp+arg_0]
.text:0000B4C1                 mov     dword ptr [eax+174h], 0D800h
.text:0000B4CB
.text:0000B4CB loc_B4CB:                               ; CODE XREF: _term_out+1F70j
.text:0000B4CB                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B4D0 ; ---------------------------------------------------------------------------
.text:0000B4D0
.text:0000B4D0 loc_B4D0:                               ; CODE XREF: _term_out+1781j
.text:0000B4D0                 mov     ecx, [ebp+arg_0]
.text:0000B4D3                 mov     edx, [ecx]
.text:0000B4D5                 and     edx, 2
.text:0000B4D8                 jnz     short loc_B4EC
.text:0000B4DA                 mov     eax, [ebp+arg_0]
.text:0000B4DD                 mov     dword ptr [eax+0E44h], 0
.text:0000B4E7                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B4EC ; ---------------------------------------------------------------------------
.text:0000B4EC
.text:0000B4EC loc_B4EC:                               ; CODE XREF: _term_out+1F8Cj
.text:0000B4EC                 mov     ecx, [ebp+arg_0]
.text:0000B4EF                 cmp     dword ptr [ecx+1148h], 0
.text:0000B4F6                 jnz     short loc_B505
.text:0000B4F8                 mov     edx, [ebp+arg_0]
.text:0000B4FB                 mov     dword ptr [edx+174h], 0D900h
.text:0000B505
.text:0000B505 loc_B505:                               ; CODE XREF: _term_out+1FAAj
.text:0000B505                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B50A ; ---------------------------------------------------------------------------
.text:0000B50A
.text:0000B50A loc_B50A:                               ; CODE XREF: _term_out+17A6j
.text:0000B50A                 mov     eax, [ebp+arg_0]
.text:0000B50D                 mov     ecx, [eax]
.text:0000B50F                 and     ecx, 4000h
.text:0000B515                 jnz     short loc_B529
.text:0000B517                 mov     edx, [ebp+arg_0]
.text:0000B51A                 mov     dword ptr [edx+0E44h], 0
.text:0000B524                 jmp     $LN425          ; jumptable 0000ABFA default case
.text:0000B529 ; ---------------------------------------------------------------------------
.text:0000B529
.text:0000B529 loc_B529:                               ; CODE XREF: _term_out+1FC9j
.text:0000B529                 mov     eax, [ebp+arg_0]
.text:0000B52C                 cmp     dword ptr [eax+1148h], 0
.text:0000B533                 jnz     short loc_B542
.text:0000B535                 mov     ecx, [ebp+arg_0]
.text:0000B538                 mov     dword ptr [ecx+174h], 0DA00h
.text:0000B542
.text:0000B542 loc_B542:                               ; CODE XREF: _term_out+1FE7j
.text:0000B542                 jmp     short $LN425    ; jumptable 0000ABFA default case
.text:0000B544 ; ---------------------------------------------------------------------------
.text:0000B544
.text:0000B544 loc_B544:                               ; CODE XREF: _term_out+16EBj
.text:0000B544                                         ; _term_out+170Bj
.text:0000B544                 mov     edx, [ebp+arg_0]
.text:0000B547                 mov     eax, [edx]
.text:0000B549                 and     eax, 4000h
.text:0000B54E                 jnz     short loc_B55F
.text:0000B550                 mov     ecx, [ebp+arg_0]
.text:0000B553                 mov     dword ptr [ecx+0E44h], 0
.text:0000B55D                 jmp     short $LN425    ; jumptable 0000ABFA default case
.text:0000B55F ; ---------------------------------------------------------------------------
.text:0000B55F
.text:0000B55F loc_B55F:                               ; CODE XREF: _term_out+2002j
.text:0000B55F                 mov     edx, [ebp+arg_0]
.text:0000B562                 cmp     dword ptr [edx+1148h], 0
.text:0000B569                 jnz     short loc_B578
.text:0000B56B                 mov     eax, [ebp+arg_0]
.text:0000B56E                 mov     dword ptr [eax+0DCh], 1
.text:0000B578
.text:0000B578 loc_B578:                               ; CODE XREF: _term_out+201Dj
.text:0000B578                 jmp     short $LN425    ; jumptable 0000ABFA default case
.text:0000B57A ; ---------------------------------------------------------------------------
.text:0000B57A
.text:0000B57A loc_B57A:                               ; CODE XREF: _term_out+171Bj
.text:0000B57A                 mov     ecx, [ebp+arg_0]
.text:0000B57D                 mov     edx, [ecx]
.text:0000B57F                 and     edx, 4000h
.text:0000B585                 jnz     short loc_B596
.text:0000B587                 mov     eax, [ebp+arg_0]
.text:0000B58A                 mov     dword ptr [eax+0E44h], 0
.text:0000B594                 jmp     short $LN425    ; jumptable 0000ABFA default case
.text:0000B596 ; ---------------------------------------------------------------------------
.text:0000B596
.text:0000B596 loc_B596:                               ; CODE XREF: _term_out+2039j
.text:0000B596                 mov     ecx, [ebp+arg_0]
.text:0000B599                 cmp     dword ptr [ecx+1148h], 0
.text:0000B5A0                 jnz     short $LN425    ; jumptable 0000ABFA default case
.text:0000B5A2                 mov     edx, [ebp+arg_0]
.text:0000B5A5                 mov     dword ptr [edx+0DCh], 0
.text:0000B5AF
.text:0000B5AF $LN425:                                 ; CODE XREF: _term_out+169Bj
.text:0000B5AF                                         ; _term_out+16AEj ...
.text:0000B5AF                 jmp     $LN526          ; jumptable 0000ABFA default case
.text:0000B5B4 ; ---------------------------------------------------------------------------
.text:0000B5B4
.text:0000B5B4 $LN340:                                 ; CODE XREF: _term_out+F47j
.text:0000B5B4                                         ; DATA XREF: .text:$LN732o
.text:0000B5B4                 mov     eax, [ebp+arg_0] ; jumptable 0000A493 case 2
.text:0000B5B7                 mov     dword ptr [eax+0E44h], 0
.text:0000B5C1                 mov     ecx, [ebp+C]
.text:0000B5C4                 push    ecx             ; C
.text:0000B5C5                 call    _isdigit
.text:0000B5CA                 add     esp, 4
.text:0000B5CD                 test    eax, eax
.text:0000B5CF                 jz      short loc_B64C
.text:0000B5D1                 mov     edx, [ebp+arg_0]
.text:0000B5D4                 cmp     dword ptr [edx+22Ch], 20h ; ' '
.text:0000B5DB                 jg      short loc_B63A
.text:0000B5DD                 mov     eax, [ebp+arg_0]
.text:0000B5E0                 mov     ecx, [eax+22Ch]
.text:0000B5E6                 mov     edx, [ebp+arg_0]
.text:0000B5E9                 cmp     dword ptr [edx+ecx*4+1A8h], 0
.text:0000B5F1                 jnz     short loc_B60A
.text:0000B5F3                 mov     eax, [ebp+arg_0]
.text:0000B5F6                 mov     ecx, [eax+22Ch]
.text:0000B5FC                 mov     edx, [ebp+arg_0]
.text:0000B5FF                 mov     dword ptr [edx+ecx*4+1A8h], 0
.text:0000B60A
.text:0000B60A loc_B60A:                               ; CODE XREF: _term_out+20A5j
.text:0000B60A                 mov     eax, [ebp+arg_0]
.text:0000B60D                 mov     ecx, [eax+22Ch]
.text:0000B613                 mov     edx, [ebp+arg_0]
.text:0000B616                 mov     eax, [edx+ecx*4+1A8h]
.text:0000B61D                 imul    eax, 0Ah
.text:0000B620                 mov     ecx, [ebp+C]
.text:0000B623                 lea     edx, [eax+ecx-30h]
.text:0000B627                 mov     eax, [ebp+arg_0]
.text:0000B62A                 mov     ecx, [eax+22Ch]
.text:0000B630                 mov     eax, [ebp+arg_0]
.text:0000B633                 mov     [eax+ecx*4+1A8h], edx
.text:0000B63A
.text:0000B63A loc_B63A:                               ; CODE XREF: _term_out+208Fj
.text:0000B63A                 mov     ecx, [ebp+arg_0]
.text:0000B63D                 mov     dword ptr [ecx+0E44h], 2
.text:0000B647                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B64C ; ---------------------------------------------------------------------------
.text:0000B64C
.text:0000B64C loc_B64C:                               ; CODE XREF: _term_out+2083j
.text:0000B64C                 cmp     [ebp+C], 3Bh ; ';'
.text:0000B650                 jnz     short loc_B69C
.text:0000B652                 mov     edx, [ebp+arg_0]
.text:0000B655                 cmp     dword ptr [edx+22Ch], 20h ; ' '
.text:0000B65C                 jge     short loc_B68A
.text:0000B65E                 mov     eax, [ebp+arg_0]
.text:0000B661                 mov     ecx, [eax+22Ch]
.text:0000B667                 mov     edx, [ebp+arg_0]
.text:0000B66A                 mov     dword ptr [edx+ecx*4+1ACh], 0
.text:0000B675                 mov     eax, [ebp+arg_0]
.text:0000B678                 mov     ecx, [eax+22Ch]
.text:0000B67E                 add     ecx, 1
.text:0000B681                 mov     edx, [ebp+arg_0]
.text:0000B684                 mov     [edx+22Ch], ecx
.text:0000B68A
.text:0000B68A loc_B68A:                               ; CODE XREF: _term_out+2110j
.text:0000B68A                 mov     eax, [ebp+arg_0]
.text:0000B68D                 mov     dword ptr [eax+0E44h], 2
.text:0000B697                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B69C ; ---------------------------------------------------------------------------
.text:0000B69C
.text:0000B69C loc_B69C:                               ; CODE XREF: _term_out+2104j
.text:0000B69C                 cmp     [ebp+C], 40h ; '@'
.text:0000B6A0                 jnb     short loc_B6F0
.text:0000B6A2                 mov     ecx, [ebp+arg_0]
.text:0000B6A5                 cmp     dword ptr [ecx+230h], 0
.text:0000B6AC                 jz      short loc_B6BD
.text:0000B6AE                 mov     edx, [ebp+arg_0]
.text:0000B6B1                 mov     dword ptr [edx+230h], 0FFFFFFFFh
.text:0000B6BB                 jmp     short loc_B6DE
.text:0000B6BD ; ---------------------------------------------------------------------------
.text:0000B6BD
.text:0000B6BD loc_B6BD:                               ; CODE XREF: _term_out+2160j
.text:0000B6BD                 cmp     [ebp+C], 3Fh ; '?'
.text:0000B6C1                 jnz     short loc_B6D2
.text:0000B6C3                 mov     eax, [ebp+arg_0]
.text:0000B6C6                 mov     dword ptr [eax+230h], 1
.text:0000B6D0                 jmp     short loc_B6DE
.text:0000B6D2 ; ---------------------------------------------------------------------------
.text:0000B6D2
.text:0000B6D2 loc_B6D2:                               ; CODE XREF: _term_out+2175j
.text:0000B6D2                 mov     ecx, [ebp+arg_0]
.text:0000B6D5                 mov     edx, [ebp+C]
.text:0000B6D8                 mov     [ecx+230h], edx
.text:0000B6DE
.text:0000B6DE loc_B6DE:                               ; CODE XREF: _term_out+216Fj
.text:0000B6DE                                         ; _term_out+2184j
.text:0000B6DE                 mov     eax, [ebp+arg_0]
.text:0000B6E1                 mov     dword ptr [eax+0E44h], 2
.text:0000B6EB                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B6F0 ; ---------------------------------------------------------------------------
.text:0000B6F0
.text:0000B6F0 loc_B6F0:                               ; CODE XREF: _term_out+2154j
.text:0000B6F0                 mov     ecx, [ebp+arg_0]
.text:0000B6F3                 mov     edx, [ecx+230h]
.text:0000B6F9                 shl     edx, 8
.text:0000B6FC                 add     edx, [ebp+C]
.text:0000B6FF                 mov     [ebp+var_360], edx
.text:0000B705                 cmp     [ebp+var_360], 168h
.text:0000B70F                 ja      short loc_B751
.text:0000B711                 cmp     [ebp+var_360], 168h
.text:0000B71B                 jz      $LN278          ; jumptable 0000B74A case 40
.text:0000B721                 mov     eax, [ebp+var_360]
.text:0000B727                 sub     eax, 40h ; '@'
.text:0000B72A                 mov     [ebp+var_360], eax
.text:0000B730                 cmp     [ebp+var_360], 38h ; '8' ; switch 57 cases
.text:0000B737                 ja      $LN336          ; jumptable 0000B74A default case
.text:0000B73D                 mov     ecx, [ebp+var_360]
.text:0000B743                 movzx   edx, ds:$LN707[ecx]
.text:0000B74A                 jmp     ds:$LN734[edx*4] ; switch jump
.text:0000B751 ; ---------------------------------------------------------------------------
.text:0000B751
.text:0000B751 loc_B751:                               ; CODE XREF: _term_out+21C3j
.text:0000B751                 cmp     [ebp+var_360], 3D43h
.text:0000B75B                 ja      short loc_B7D3
.text:0000B75D                 cmp     [ebp+var_360], 3D43h
.text:0000B767                 jz      loc_D70C
.text:0000B76D                 cmp     [ebp+var_360], 2270h
.text:0000B777                 ja      short loc_B7AE
.text:0000B779                 cmp     [ebp+var_360], 2270h
.text:0000B783                 jz      loc_D9E1
.text:0000B789                 cmp     [ebp+var_360], 169h
.text:0000B793                 jz      $LN273          ; jumptable 0000B74A case 41
.text:0000B799                 cmp     [ebp+var_360], 16Ch
.text:0000B7A3                 jz      $LN267          ; jumptable 0000B74A case 44
.text:0000B7A9                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B7AE ; ---------------------------------------------------------------------------
.text:0000B7AE
.text:0000B7AE loc_B7AE:                               ; CODE XREF: _term_out+222Bj
.text:0000B7AE                 cmp     [ebp+var_360], 247Ch
.text:0000B7B8                 jz      loc_D2A8
.text:0000B7BE                 cmp     [ebp+var_360], 2A7Ch
.text:0000B7C8                 jz      loc_D208
.text:0000B7CE                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B7D3 ; ---------------------------------------------------------------------------
.text:0000B7D3
.text:0000B7D3 loc_B7D3:                               ; CODE XREF: _term_out+220Fj
.text:0000B7D3                 cmp     [ebp+var_360], 3D4Ch
.text:0000B7DD                 ja      short loc_B81A
.text:0000B7DF                 cmp     [ebp+var_360], 3D4Ch
.text:0000B7E9                 jz      loc_D99A
.text:0000B7EF                 mov     eax, [ebp+var_360]
.text:0000B7F5                 sub     eax, 3D44h
.text:0000B7FA                 mov     [ebp+var_360], eax
.text:0000B800                 cmp     [ebp+var_360], 3 ; switch 4 cases
.text:0000B807                 ja      $LN336          ; jumptable 0000B74A default case
.text:0000B80D                 mov     ecx, [ebp+var_360]
.text:0000B813                 jmp     ds:$LN735[ecx*4] ; switch jump
.text:0000B81A ; ---------------------------------------------------------------------------
.text:0000B81A
.text:0000B81A loc_B81A:                               ; CODE XREF: _term_out+2291j
.text:0000B81A                 cmp     [ebp+var_360], 3D63h
.text:0000B824                 jz      loc_D678
.text:0000B82A                 cmp     [ebp+var_360], 3E63h
.text:0000B834                 jz      loc_B911
.text:0000B83A                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B83F ; ---------------------------------------------------------------------------
.text:0000B83F
.text:0000B83F $LN324:                                 ; CODE XREF: _term_out+21FEj
.text:0000B83F                                         ; DATA XREF: .text:$LN734o
.text:0000B83F                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 1
.text:0000B842                 cmp     dword ptr [edx+1ACh], 0
.text:0000B849                 jnz     short loc_B857
.text:0000B84B                 mov     [ebp+var_364], 1
.text:0000B855                 jmp     short loc_B866
.text:0000B857 ; ---------------------------------------------------------------------------
.text:0000B857
.text:0000B857 loc_B857:                               ; CODE XREF: _term_out+22FDj
.text:0000B857                 mov     eax, [ebp+arg_0]
.text:0000B85A                 mov     ecx, [eax+1ACh]
.text:0000B860                 mov     [ebp+var_364], ecx
.text:0000B866
.text:0000B866 loc_B866:                               ; CODE XREF: _term_out+2309j
.text:0000B866                 push    1
.text:0000B868                 mov     edx, [ebp+arg_0]
.text:0000B86B                 mov     eax, [edx+6Ch]
.text:0000B86E                 sub     eax, [ebp+var_364]
.text:0000B874                 push    eax
.text:0000B875                 mov     ecx, [ebp+arg_0]
.text:0000B878                 mov     edx, [ecx+70h]
.text:0000B87B                 push    edx
.text:0000B87C                 mov     eax, [ebp+arg_0]
.text:0000B87F                 push    eax
.text:0000B880                 call    _move
.text:0000B885                 add     esp, 10h
.text:0000B888                 mov     ecx, [ebp+arg_0]
.text:0000B88B                 push    ecx
.text:0000B88C                 call    _seen_disp_event
.text:0000B891                 add     esp, 4
.text:0000B894                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B899 ; ---------------------------------------------------------------------------
.text:0000B899
.text:0000B899 $LN323:                                 ; CODE XREF: _term_out+21FEj
.text:0000B899                                         ; DATA XREF: .text:$LN734o
.text:0000B899                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 37
.text:0000B89C                 mov     eax, [edx]
.text:0000B89E                 and     eax, 2000h
.text:0000B8A3                 jnz     short $LN321    ; jumptable 0000B74A case 2
.text:0000B8A5                 mov     ecx, [ebp+arg_0]
.text:0000B8A8                 mov     dword ptr [ecx+0E44h], 0
.text:0000B8B2                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B8B7 ; ---------------------------------------------------------------------------
.text:0000B8B7
.text:0000B8B7 $LN321:                                 ; CODE XREF: _term_out+21FEj
.text:0000B8B7                                         ; _term_out+2357j
.text:0000B8B7                                         ; DATA XREF: ...
.text:0000B8B7                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 2
.text:0000B8BA                 cmp     dword ptr [edx+1ACh], 0
.text:0000B8C1                 jnz     short loc_B8CF
.text:0000B8C3                 mov     [ebp+var_368], 1
.text:0000B8CD                 jmp     short loc_B8DE
.text:0000B8CF ; ---------------------------------------------------------------------------
.text:0000B8CF
.text:0000B8CF loc_B8CF:                               ; CODE XREF: _term_out+2375j
.text:0000B8CF                 mov     eax, [ebp+arg_0]
.text:0000B8D2                 mov     ecx, [eax+1ACh]
.text:0000B8D8                 mov     [ebp+var_368], ecx
.text:0000B8DE
.text:0000B8DE loc_B8DE:                               ; CODE XREF: _term_out+2381j
.text:0000B8DE                 push    1
.text:0000B8E0                 mov     edx, [ebp+arg_0]
.text:0000B8E3                 mov     eax, [edx+6Ch]
.text:0000B8E6                 add     eax, [ebp+var_368]
.text:0000B8EC                 push    eax
.text:0000B8ED                 mov     ecx, [ebp+arg_0]
.text:0000B8F0                 mov     edx, [ecx+70h]
.text:0000B8F3                 push    edx
.text:0000B8F4                 mov     eax, [ebp+arg_0]
.text:0000B8F7                 push    eax
.text:0000B8F8                 call    _move
.text:0000B8FD                 add     esp, 10h
.text:0000B900                 mov     ecx, [ebp+arg_0]
.text:0000B903                 push    ecx
.text:0000B904                 call    _seen_disp_event
.text:0000B909                 add     esp, 4
.text:0000B90C                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B911 ; ---------------------------------------------------------------------------
.text:0000B911
.text:0000B911 loc_B911:                               ; CODE XREF: _term_out+22E8j
.text:0000B911                 mov     edx, [ebp+arg_0]
.text:0000B914                 mov     eax, [edx]
.text:0000B916                 and     eax, 4000h
.text:0000B91B                 jnz     short loc_B92F
.text:0000B91D                 mov     ecx, [ebp+arg_0]
.text:0000B920                 mov     dword ptr [ecx+0E44h], 0
.text:0000B92A                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B92F ; ---------------------------------------------------------------------------
.text:0000B92F
.text:0000B92F loc_B92F:                               ; CODE XREF: _term_out+23CFj
.text:0000B92F                 mov     edx, [ebp+arg_0]
.text:0000B932                 cmp     dword ptr [edx+1084h], 0
.text:0000B939                 jz      short loc_B956
.text:0000B93B                 push    0
.text:0000B93D                 push    0Bh
.text:0000B93F                 push    offset $SG87358 ; "\x1B[>0;136;0c"
.text:0000B944                 mov     eax, [ebp+arg_0]
.text:0000B947                 mov     ecx, [eax+1084h]
.text:0000B94D                 push    ecx
.text:0000B94E                 call    _ldisc_send
.text:0000B953                 add     esp, 10h
.text:0000B956
.text:0000B956 loc_B956:                               ; CODE XREF: _term_out+23EDj
.text:0000B956                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B95B ; ---------------------------------------------------------------------------
.text:0000B95B
.text:0000B95B $LN317:                                 ; CODE XREF: _term_out+21FEj
.text:0000B95B                                         ; DATA XREF: .text:$LN734o
.text:0000B95B                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 33
.text:0000B95E                 mov     eax, [edx]
.text:0000B960                 and     eax, 2000h
.text:0000B965                 jnz     short $LN315    ; jumptable 0000B74A case 3
.text:0000B967                 mov     ecx, [ebp+arg_0]
.text:0000B96A                 mov     dword ptr [ecx+0E44h], 0
.text:0000B974                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B979 ; ---------------------------------------------------------------------------
.text:0000B979
.text:0000B979 $LN315:                                 ; CODE XREF: _term_out+21FEj
.text:0000B979                                         ; _term_out+2419j
.text:0000B979                                         ; DATA XREF: ...
.text:0000B979                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 3
.text:0000B97C                 cmp     dword ptr [edx+1ACh], 0
.text:0000B983                 jnz     short loc_B991
.text:0000B985                 mov     [ebp+var_36C], 1
.text:0000B98F                 jmp     short loc_B9A0
.text:0000B991 ; ---------------------------------------------------------------------------
.text:0000B991
.text:0000B991 loc_B991:                               ; CODE XREF: _term_out+2437j
.text:0000B991                 mov     eax, [ebp+arg_0]
.text:0000B994                 mov     ecx, [eax+1ACh]
.text:0000B99A                 mov     [ebp+var_36C], ecx
.text:0000B9A0
.text:0000B9A0 loc_B9A0:                               ; CODE XREF: _term_out+2443j
.text:0000B9A0                 push    1
.text:0000B9A2                 mov     edx, [ebp+arg_0]
.text:0000B9A5                 mov     eax, [edx+6Ch]
.text:0000B9A8                 push    eax
.text:0000B9A9                 mov     ecx, [ebp+arg_0]
.text:0000B9AC                 mov     edx, [ecx+70h]
.text:0000B9AF                 add     edx, [ebp+var_36C]
.text:0000B9B5                 push    edx
.text:0000B9B6                 mov     eax, [ebp+arg_0]
.text:0000B9B9                 push    eax
.text:0000B9BA                 call    _move
.text:0000B9BF                 add     esp, 10h
.text:0000B9C2                 mov     ecx, [ebp+arg_0]
.text:0000B9C5                 push    ecx
.text:0000B9C6                 call    _seen_disp_event
.text:0000B9CB                 add     esp, 4
.text:0000B9CE                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000B9D3 ; ---------------------------------------------------------------------------
.text:0000B9D3
.text:0000B9D3 $LN314:                                 ; CODE XREF: _term_out+21FEj
.text:0000B9D3                                         ; DATA XREF: .text:$LN734o
.text:0000B9D3                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 4
.text:0000B9D6                 cmp     dword ptr [edx+1ACh], 0
.text:0000B9DD                 jnz     short loc_B9EB
.text:0000B9DF                 mov     [ebp+var_370], 1
.text:0000B9E9                 jmp     short loc_B9FA
.text:0000B9EB ; ---------------------------------------------------------------------------
.text:0000B9EB
.text:0000B9EB loc_B9EB:                               ; CODE XREF: _term_out+2491j
.text:0000B9EB                 mov     eax, [ebp+arg_0]
.text:0000B9EE                 mov     ecx, [eax+1ACh]
.text:0000B9F4                 mov     [ebp+var_370], ecx
.text:0000B9FA
.text:0000B9FA loc_B9FA:                               ; CODE XREF: _term_out+249Dj
.text:0000B9FA                 push    1
.text:0000B9FC                 mov     edx, [ebp+arg_0]
.text:0000B9FF                 mov     eax, [edx+6Ch]
.text:0000BA02                 push    eax
.text:0000BA03                 mov     ecx, [ebp+arg_0]
.text:0000BA06                 mov     edx, [ecx+70h]
.text:0000BA09                 sub     edx, [ebp+var_370]
.text:0000BA0F                 push    edx
.text:0000BA10                 mov     eax, [ebp+arg_0]
.text:0000BA13                 push    eax
.text:0000BA14                 call    _move
.text:0000BA19                 add     esp, 10h
.text:0000BA1C                 mov     ecx, [ebp+arg_0]
.text:0000BA1F                 push    ecx
.text:0000BA20                 call    _seen_disp_event
.text:0000BA25                 add     esp, 4
.text:0000BA28                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BA2D ; ---------------------------------------------------------------------------
.text:0000BA2D
.text:0000BA2D $LN313:                                 ; CODE XREF: _term_out+21FEj
.text:0000BA2D                                         ; DATA XREF: .text:$LN734o
.text:0000BA2D                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 5
.text:0000BA30                 mov     eax, [edx]
.text:0000BA32                 and     eax, 2000h
.text:0000BA37                 jnz     short loc_BA4B
.text:0000BA39                 mov     ecx, [ebp+arg_0]
.text:0000BA3C                 mov     dword ptr [ecx+0E44h], 0
.text:0000BA46                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BA4B ; ---------------------------------------------------------------------------
.text:0000BA4B
.text:0000BA4B loc_BA4B:                               ; CODE XREF: _term_out+24EBj
.text:0000BA4B                 mov     edx, [ebp+arg_0]
.text:0000BA4E                 cmp     dword ptr [edx+1ACh], 0
.text:0000BA55                 jnz     short loc_BA63
.text:0000BA57                 mov     [ebp+var_374], 1
.text:0000BA61                 jmp     short loc_BA72
.text:0000BA63 ; ---------------------------------------------------------------------------
.text:0000BA63
.text:0000BA63 loc_BA63:                               ; CODE XREF: _term_out+2509j
.text:0000BA63                 mov     eax, [ebp+arg_0]
.text:0000BA66                 mov     ecx, [eax+1ACh]
.text:0000BA6C                 mov     [ebp+var_374], ecx
.text:0000BA72
.text:0000BA72 loc_BA72:                               ; CODE XREF: _term_out+2515j
.text:0000BA72                 push    1
.text:0000BA74                 mov     edx, [ebp+arg_0]
.text:0000BA77                 mov     eax, [edx+6Ch]
.text:0000BA7A                 add     eax, [ebp+var_374]
.text:0000BA80                 push    eax
.text:0000BA81                 push    0
.text:0000BA83                 mov     ecx, [ebp+arg_0]
.text:0000BA86                 push    ecx
.text:0000BA87                 call    _move
.text:0000BA8C                 add     esp, 10h
.text:0000BA8F                 mov     edx, [ebp+arg_0]
.text:0000BA92                 push    edx
.text:0000BA93                 call    _seen_disp_event
.text:0000BA98                 add     esp, 4
.text:0000BA9B                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BAA0 ; ---------------------------------------------------------------------------
.text:0000BAA0
.text:0000BAA0 $LN311:                                 ; CODE XREF: _term_out+21FEj
.text:0000BAA0                                         ; DATA XREF: .text:$LN734o
.text:0000BAA0                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A case 6
.text:0000BAA3                 mov     ecx, [eax]
.text:0000BAA5                 and     ecx, 2000h
.text:0000BAAB                 jnz     short loc_BABF
.text:0000BAAD                 mov     edx, [ebp+arg_0]
.text:0000BAB0                 mov     dword ptr [edx+0E44h], 0
.text:0000BABA                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BABF ; ---------------------------------------------------------------------------
.text:0000BABF
.text:0000BABF loc_BABF:                               ; CODE XREF: _term_out+255Fj
.text:0000BABF                 mov     eax, [ebp+arg_0]
.text:0000BAC2                 cmp     dword ptr [eax+1ACh], 0
.text:0000BAC9                 jnz     short loc_BAD7
.text:0000BACB                 mov     [ebp+var_378], 1
.text:0000BAD5                 jmp     short loc_BAE6
.text:0000BAD7 ; ---------------------------------------------------------------------------
.text:0000BAD7
.text:0000BAD7 loc_BAD7:                               ; CODE XREF: _term_out+257Dj
.text:0000BAD7                 mov     ecx, [ebp+arg_0]
.text:0000BADA                 mov     edx, [ecx+1ACh]
.text:0000BAE0                 mov     [ebp+var_378], edx
.text:0000BAE6
.text:0000BAE6 loc_BAE6:                               ; CODE XREF: _term_out+2589j
.text:0000BAE6                 push    1
.text:0000BAE8                 mov     eax, [ebp+arg_0]
.text:0000BAEB                 mov     ecx, [eax+6Ch]
.text:0000BAEE                 sub     ecx, [ebp+var_378]
.text:0000BAF4                 push    ecx
.text:0000BAF5                 push    0
.text:0000BAF7                 mov     edx, [ebp+arg_0]
.text:0000BAFA                 push    edx
.text:0000BAFB                 call    _move
.text:0000BB00                 add     esp, 10h
.text:0000BB03                 mov     eax, [ebp+arg_0]
.text:0000BB06                 push    eax
.text:0000BB07                 call    _seen_disp_event
.text:0000BB0C                 add     esp, 4
.text:0000BB0F                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BB14 ; ---------------------------------------------------------------------------
.text:0000BB14
.text:0000BB14 $LN309:                                 ; CODE XREF: _term_out+21FEj
.text:0000BB14                                         ; DATA XREF: .text:$LN734o
.text:0000BB14                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A cases 7,32
.text:0000BB17                 mov     edx, [ecx]
.text:0000BB19                 and     edx, 2000h
.text:0000BB1F                 jnz     short loc_BB33
.text:0000BB21                 mov     eax, [ebp+arg_0]
.text:0000BB24                 mov     dword ptr [eax+0E44h], 0
.text:0000BB2E                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BB33 ; ---------------------------------------------------------------------------
.text:0000BB33
.text:0000BB33 loc_BB33:                               ; CODE XREF: _term_out+25D3j
.text:0000BB33                 mov     ecx, [ebp+arg_0]
.text:0000BB36                 cmp     dword ptr [ecx+1ACh], 0
.text:0000BB3D                 jnz     short loc_BB4B
.text:0000BB3F                 mov     [ebp+var_37C], 1
.text:0000BB49                 jmp     short loc_BB5A
.text:0000BB4B ; ---------------------------------------------------------------------------
.text:0000BB4B
.text:0000BB4B loc_BB4B:                               ; CODE XREF: _term_out+25F1j
.text:0000BB4B                 mov     edx, [ebp+arg_0]
.text:0000BB4E                 mov     eax, [edx+1ACh]
.text:0000BB54                 mov     [ebp+var_37C], eax
.text:0000BB5A
.text:0000BB5A loc_BB5A:                               ; CODE XREF: _term_out+25FDj
.text:0000BB5A                 push    0
.text:0000BB5C                 mov     ecx, [ebp+arg_0]
.text:0000BB5F                 mov     edx, [ecx+6Ch]
.text:0000BB62                 push    edx
.text:0000BB63                 mov     eax, [ebp+var_37C]
.text:0000BB69                 sub     eax, 1
.text:0000BB6C                 push    eax
.text:0000BB6D                 mov     ecx, [ebp+arg_0]
.text:0000BB70                 push    ecx
.text:0000BB71                 call    _move
.text:0000BB76                 add     esp, 10h
.text:0000BB79                 mov     edx, [ebp+arg_0]
.text:0000BB7C                 push    edx
.text:0000BB7D                 call    _seen_disp_event
.text:0000BB82                 add     esp, 4
.text:0000BB85                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BB8A ; ---------------------------------------------------------------------------
.text:0000BB8A
.text:0000BB8A $LN307:                                 ; CODE XREF: _term_out+21FEj
.text:0000BB8A                                         ; DATA XREF: .text:$LN734o
.text:0000BB8A                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A case 36
.text:0000BB8D                 mov     ecx, [eax]
.text:0000BB8F                 and     ecx, 2000h
.text:0000BB95                 jnz     short loc_BBA9
.text:0000BB97                 mov     edx, [ebp+arg_0]
.text:0000BB9A                 mov     dword ptr [edx+0E44h], 0
.text:0000BBA4                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BBA9 ; ---------------------------------------------------------------------------
.text:0000BBA9
.text:0000BBA9 loc_BBA9:                               ; CODE XREF: _term_out+2649j
.text:0000BBA9                 mov     eax, [ebp+arg_0]
.text:0000BBAC                 cmp     dword ptr [eax+84h], 0
.text:0000BBB3                 jz      short loc_BBC3
.text:0000BBB5                 mov     ecx, [ebp+arg_0]
.text:0000BBB8                 mov     edx, [ecx+7Ch]
.text:0000BBBB                 mov     [ebp+var_380], edx
.text:0000BBC1                 jmp     short loc_BBCD
.text:0000BBC3 ; ---------------------------------------------------------------------------
.text:0000BBC3
.text:0000BBC3 loc_BBC3:                               ; CODE XREF: _term_out+2667j
.text:0000BBC3                 mov     [ebp+var_380], 0
.text:0000BBCD
.text:0000BBCD loc_BBCD:                               ; CODE XREF: _term_out+2675j
.text:0000BBCD                 mov     eax, [ebp+arg_0]
.text:0000BBD0                 cmp     dword ptr [eax+1ACh], 0
.text:0000BBD7                 jnz     short loc_BBE5
.text:0000BBD9                 mov     [ebp+var_384], 1
.text:0000BBE3                 jmp     short loc_BBF4
.text:0000BBE5 ; ---------------------------------------------------------------------------
.text:0000BBE5
.text:0000BBE5 loc_BBE5:                               ; CODE XREF: _term_out+268Bj
.text:0000BBE5                 mov     ecx, [ebp+arg_0]
.text:0000BBE8                 mov     edx, [ecx+1ACh]
.text:0000BBEE                 mov     [ebp+var_384], edx
.text:0000BBF4
.text:0000BBF4 loc_BBF4:                               ; CODE XREF: _term_out+2697j
.text:0000BBF4                 mov     eax, [ebp+arg_0]
.text:0000BBF7                 mov     ecx, [eax+84h]
.text:0000BBFD                 neg     ecx
.text:0000BBFF                 sbb     ecx, ecx
.text:0000BC01                 and     ecx, 2
.text:0000BC04                 push    ecx
.text:0000BC05                 mov     edx, [ebp+var_384]
.text:0000BC0B                 mov     eax, [ebp+var_380]
.text:0000BC11                 lea     ecx, [eax+edx-1]
.text:0000BC15                 push    ecx
.text:0000BC16                 mov     edx, [ebp+arg_0]
.text:0000BC19                 mov     eax, [edx+70h]
.text:0000BC1C                 push    eax
.text:0000BC1D                 mov     ecx, [ebp+arg_0]
.text:0000BC20                 push    ecx
.text:0000BC21                 call    _move
.text:0000BC26                 add     esp, 10h
.text:0000BC29                 mov     edx, [ebp+arg_0]
.text:0000BC2C                 push    edx
.text:0000BC2D                 call    _seen_disp_event
.text:0000BC32                 add     esp, 4
.text:0000BC35                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BC3A ; ---------------------------------------------------------------------------
.text:0000BC3A
.text:0000BC3A $LN305:                                 ; CODE XREF: _term_out+21FEj
.text:0000BC3A                                         ; DATA XREF: .text:$LN734o
.text:0000BC3A                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A cases 8,38
.text:0000BC3D                 cmp     dword ptr [eax+22Ch], 2
.text:0000BC44                 jge     short loc_BC53
.text:0000BC46                 mov     ecx, [ebp+arg_0]
.text:0000BC49                 mov     dword ptr [ecx+1B0h], 0
.text:0000BC53
.text:0000BC53 loc_BC53:                               ; CODE XREF: _term_out+26F8j
.text:0000BC53                 mov     edx, [ebp+arg_0]
.text:0000BC56                 cmp     dword ptr [edx+84h], 0
.text:0000BC5D                 jz      short loc_BC6D
.text:0000BC5F                 mov     eax, [ebp+arg_0]
.text:0000BC62                 mov     ecx, [eax+7Ch]
.text:0000BC65                 mov     [ebp+var_388], ecx
.text:0000BC6B                 jmp     short loc_BC77
.text:0000BC6D ; ---------------------------------------------------------------------------
.text:0000BC6D
.text:0000BC6D loc_BC6D:                               ; CODE XREF: _term_out+2711j
.text:0000BC6D                 mov     [ebp+var_388], 0
.text:0000BC77
.text:0000BC77 loc_BC77:                               ; CODE XREF: _term_out+271Fj
.text:0000BC77                 mov     edx, [ebp+arg_0]
.text:0000BC7A                 cmp     dword ptr [edx+1ACh], 0
.text:0000BC81                 jnz     short loc_BC8F
.text:0000BC83                 mov     [ebp+var_38C], 1
.text:0000BC8D                 jmp     short loc_BC9E
.text:0000BC8F ; ---------------------------------------------------------------------------
.text:0000BC8F
.text:0000BC8F loc_BC8F:                               ; CODE XREF: _term_out+2735j
.text:0000BC8F                 mov     eax, [ebp+arg_0]
.text:0000BC92                 mov     ecx, [eax+1ACh]
.text:0000BC98                 mov     [ebp+var_38C], ecx
.text:0000BC9E
.text:0000BC9E loc_BC9E:                               ; CODE XREF: _term_out+2741j
.text:0000BC9E                 mov     edx, [ebp+arg_0]
.text:0000BCA1                 cmp     dword ptr [edx+1B0h], 0
.text:0000BCA8                 jnz     short loc_BCB6
.text:0000BCAA                 mov     [ebp+var_390], 1
.text:0000BCB4                 jmp     short loc_BCC5
.text:0000BCB6 ; ---------------------------------------------------------------------------
.text:0000BCB6
.text:0000BCB6 loc_BCB6:                               ; CODE XREF: _term_out+275Cj
.text:0000BCB6                 mov     eax, [ebp+arg_0]
.text:0000BCB9                 mov     ecx, [eax+1B0h]
.text:0000BCBF                 mov     [ebp+var_390], ecx
.text:0000BCC5
.text:0000BCC5 loc_BCC5:                               ; CODE XREF: _term_out+2768j
.text:0000BCC5                 mov     edx, [ebp+arg_0]
.text:0000BCC8                 mov     eax, [edx+84h]
.text:0000BCCE                 neg     eax
.text:0000BCD0                 sbb     eax, eax
.text:0000BCD2                 and     eax, 2
.text:0000BCD5                 push    eax
.text:0000BCD6                 mov     ecx, [ebp+var_38C]
.text:0000BCDC                 mov     edx, [ebp+var_388]
.text:0000BCE2                 lea     eax, [edx+ecx-1]
.text:0000BCE6                 push    eax
.text:0000BCE7                 mov     ecx, [ebp+var_390]
.text:0000BCED                 sub     ecx, 1
.text:0000BCF0                 push    ecx
.text:0000BCF1                 mov     edx, [ebp+arg_0]
.text:0000BCF4                 push    edx
.text:0000BCF5                 call    _move
.text:0000BCFA                 add     esp, 10h
.text:0000BCFD                 mov     eax, [ebp+arg_0]
.text:0000BD00                 push    eax
.text:0000BD01                 call    _seen_disp_event
.text:0000BD06                 add     esp, 4
.text:0000BD09                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BD0E ; ---------------------------------------------------------------------------
.text:0000BD0E
.text:0000BD0E $LN303:                                 ; CODE XREF: _term_out+21FEj
.text:0000BD0E                                         ; DATA XREF: .text:$LN734o
.text:0000BD0E                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 10
.text:0000BD11                 cmp     dword ptr [ecx+1ACh], 0
.text:0000BD18                 jnz     short loc_BD26
.text:0000BD1A                 mov     [ebp+var_394], 0
.text:0000BD24                 jmp     short loc_BD35
.text:0000BD26 ; ---------------------------------------------------------------------------
.text:0000BD26
.text:0000BD26 loc_BD26:                               ; CODE XREF: _term_out+27CCj
.text:0000BD26                 mov     edx, [ebp+arg_0]
.text:0000BD29                 mov     eax, [edx+1ACh]
.text:0000BD2F                 mov     [ebp+var_394], eax
.text:0000BD35
.text:0000BD35 loc_BD35:                               ; CODE XREF: _term_out+27D8j
.text:0000BD35                 mov     ecx, [ebp+var_394]
.text:0000BD3B                 mov     [ebp+var_1AC], ecx
.text:0000BD41                 cmp     [ebp+var_1AC], 3
.text:0000BD48                 jnz     short loc_BD58
.text:0000BD4A                 mov     edx, [ebp+arg_0]
.text:0000BD4D                 push    edx
.text:0000BD4E                 call    _term_clrsb
.text:0000BD53                 add     esp, 4
.text:0000BD56                 jmp     short loc_BDA8
.text:0000BD58 ; ---------------------------------------------------------------------------
.text:0000BD58
.text:0000BD58 loc_BD58:                               ; CODE XREF: _term_out+27FCj
.text:0000BD58                 mov     eax, [ebp+var_1AC]
.text:0000BD5E                 add     eax, 1
.text:0000BD61                 mov     [ebp+var_1AC], eax
.text:0000BD67                 cmp     [ebp+var_1AC], 3
.text:0000BD6E                 jbe     short loc_BD7A
.text:0000BD70                 mov     [ebp+var_1AC], 0
.text:0000BD7A
.text:0000BD7A loc_BD7A:                               ; CODE XREF: _term_out+2822j
.text:0000BD7A                 mov     ecx, [ebp+var_1AC]
.text:0000BD80                 and     ecx, 1
.text:0000BD83                 neg     ecx
.text:0000BD85                 sbb     ecx, ecx
.text:0000BD87                 neg     ecx
.text:0000BD89                 push    ecx
.text:0000BD8A                 mov     edx, [ebp+var_1AC]
.text:0000BD90                 and     edx, 2
.text:0000BD93                 neg     edx
.text:0000BD95                 sbb     edx, edx
.text:0000BD97                 neg     edx
.text:0000BD99                 push    edx
.text:0000BD9A                 push    0
.text:0000BD9C                 mov     eax, [ebp+arg_0]
.text:0000BD9F                 push    eax
.text:0000BDA0                 call    _erase_lots
.text:0000BDA5                 add     esp, 10h
.text:0000BDA8
.text:0000BDA8 loc_BDA8:                               ; CODE XREF: _term_out+280Aj
.text:0000BDA8                 mov     ecx, [ebp+arg_0]
.text:0000BDAB                 cmp     dword ptr [ecx+1164h], 0
.text:0000BDB2                 jz      short loc_BDBE
.text:0000BDB4                 mov     edx, [ebp+arg_0]
.text:0000BDB7                 mov     dword ptr [edx+10h], 0
.text:0000BDBE
.text:0000BDBE loc_BDBE:                               ; CODE XREF: _term_out+2866j
.text:0000BDBE                 mov     eax, [ebp+arg_0]
.text:0000BDC1                 push    eax
.text:0000BDC2                 call    _seen_disp_event
.text:0000BDC7                 add     esp, 4
.text:0000BDCA                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BDCF ; ---------------------------------------------------------------------------
.text:0000BDCF
.text:0000BDCF $LN298:                                 ; CODE XREF: _term_out+21FEj
.text:0000BDCF                                         ; DATA XREF: .text:$LN734o
.text:0000BDCF                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 11
.text:0000BDD2                 cmp     dword ptr [ecx+1ACh], 0
.text:0000BDD9                 jnz     short loc_BDE7
.text:0000BDDB                 mov     [ebp+var_398], 0
.text:0000BDE5                 jmp     short loc_BDF6
.text:0000BDE7 ; ---------------------------------------------------------------------------
.text:0000BDE7
.text:0000BDE7 loc_BDE7:                               ; CODE XREF: _term_out+288Dj
.text:0000BDE7                 mov     edx, [ebp+arg_0]
.text:0000BDEA                 mov     eax, [edx+1ACh]
.text:0000BDF0                 mov     [ebp+var_398], eax
.text:0000BDF6
.text:0000BDF6 loc_BDF6:                               ; CODE XREF: _term_out+2899j
.text:0000BDF6                 mov     ecx, [ebp+var_398]
.text:0000BDFC                 add     ecx, 1
.text:0000BDFF                 mov     [ebp+var_1B0], ecx
.text:0000BE05                 cmp     [ebp+var_1B0], 3
.text:0000BE0C                 jbe     short loc_BE18
.text:0000BE0E                 mov     [ebp+var_1B0], 0
.text:0000BE18
.text:0000BE18 loc_BE18:                               ; CODE XREF: _term_out+28C0j
.text:0000BE18                 mov     edx, [ebp+var_1B0]
.text:0000BE1E                 and     edx, 1
.text:0000BE21                 neg     edx
.text:0000BE23                 sbb     edx, edx
.text:0000BE25                 neg     edx
.text:0000BE27                 push    edx
.text:0000BE28                 mov     eax, [ebp+var_1B0]
.text:0000BE2E                 and     eax, 2
.text:0000BE31                 neg     eax
.text:0000BE33                 sbb     eax, eax
.text:0000BE35                 neg     eax
.text:0000BE37                 push    eax
.text:0000BE38                 push    1
.text:0000BE3A                 mov     ecx, [ebp+arg_0]
.text:0000BE3D                 push    ecx
.text:0000BE3E                 call    _erase_lots
.text:0000BE43                 add     esp, 10h
.text:0000BE46                 mov     edx, [ebp+arg_0]
.text:0000BE49                 push    edx
.text:0000BE4A                 call    _seen_disp_event
.text:0000BE4F                 add     esp, 4
.text:0000BE52                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BE57 ; ---------------------------------------------------------------------------
.text:0000BE57
.text:0000BE57 $LN296:                                 ; CODE XREF: _term_out+21FEj
.text:0000BE57                                         ; DATA XREF: .text:$LN734o
.text:0000BE57                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A case 12
.text:0000BE5A                 mov     ecx, [eax]
.text:0000BE5C                 and     ecx, 8
.text:0000BE5F                 jnz     short loc_BE73
.text:0000BE61                 mov     edx, [ebp+arg_0]
.text:0000BE64                 mov     dword ptr [edx+0E44h], 0
.text:0000BE6E                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BE73 ; ---------------------------------------------------------------------------
.text:0000BE73
.text:0000BE73 loc_BE73:                               ; CODE XREF: _term_out+2913j
.text:0000BE73                 mov     eax, [ebp+arg_0]
.text:0000BE76                 mov     ecx, [ebp+arg_0]
.text:0000BE79                 mov     edx, [eax+6Ch]
.text:0000BE7C                 cmp     edx, [ecx+80h]
.text:0000BE82                 jg      short loc_BED3
.text:0000BE84                 mov     eax, [ebp+arg_0]
.text:0000BE87                 cmp     dword ptr [eax+1ACh], 0
.text:0000BE8E                 jnz     short loc_BE9C
.text:0000BE90                 mov     [ebp+var_39C], 1
.text:0000BE9A                 jmp     short loc_BEAB
.text:0000BE9C ; ---------------------------------------------------------------------------
.text:0000BE9C
.text:0000BE9C loc_BE9C:                               ; CODE XREF: _term_out+2942j
.text:0000BE9C                 mov     ecx, [ebp+arg_0]
.text:0000BE9F                 mov     edx, [ecx+1ACh]
.text:0000BEA5                 mov     [ebp+var_39C], edx
.text:0000BEAB
.text:0000BEAB loc_BEAB:                               ; CODE XREF: _term_out+294Ej
.text:0000BEAB                 push    0
.text:0000BEAD                 mov     eax, [ebp+var_39C]
.text:0000BEB3                 neg     eax
.text:0000BEB5                 push    eax
.text:0000BEB6                 mov     ecx, [ebp+arg_0]
.text:0000BEB9                 mov     edx, [ecx+80h]
.text:0000BEBF                 push    edx
.text:0000BEC0                 mov     eax, [ebp+arg_0]
.text:0000BEC3                 mov     ecx, [eax+6Ch]
.text:0000BEC6                 push    ecx
.text:0000BEC7                 mov     edx, [ebp+arg_0]
.text:0000BECA                 push    edx
.text:0000BECB                 call    _scroll
.text:0000BED0                 add     esp, 14h
.text:0000BED3
.text:0000BED3 loc_BED3:                               ; CODE XREF: _term_out+2936j
.text:0000BED3                 mov     eax, [ebp+arg_0]
.text:0000BED6                 push    eax
.text:0000BED7                 call    _seen_disp_event
.text:0000BEDC                 add     esp, 4
.text:0000BEDF                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BEE4 ; ---------------------------------------------------------------------------
.text:0000BEE4
.text:0000BEE4 $LN293:                                 ; CODE XREF: _term_out+21FEj
.text:0000BEE4                                         ; DATA XREF: .text:$LN734o
.text:0000BEE4                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 13
.text:0000BEE7                 mov     edx, [ecx]
.text:0000BEE9                 and     edx, 8
.text:0000BEEC                 jnz     short loc_BF00
.text:0000BEEE                 mov     eax, [ebp+arg_0]
.text:0000BEF1                 mov     dword ptr [eax+0E44h], 0
.text:0000BEFB                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BF00 ; ---------------------------------------------------------------------------
.text:0000BF00
.text:0000BF00 loc_BF00:                               ; CODE XREF: _term_out+29A0j
.text:0000BF00                 mov     ecx, [ebp+arg_0]
.text:0000BF03                 mov     edx, [ebp+arg_0]
.text:0000BF06                 mov     eax, [ecx+6Ch]
.text:0000BF09                 cmp     eax, [edx+80h]
.text:0000BF0F                 jg      short loc_BF5E
.text:0000BF11                 mov     ecx, [ebp+arg_0]
.text:0000BF14                 cmp     dword ptr [ecx+1ACh], 0
.text:0000BF1B                 jnz     short loc_BF29
.text:0000BF1D                 mov     [ebp+var_3A0], 1
.text:0000BF27                 jmp     short loc_BF38
.text:0000BF29 ; ---------------------------------------------------------------------------
.text:0000BF29
.text:0000BF29 loc_BF29:                               ; CODE XREF: _term_out+29CFj
.text:0000BF29                 mov     edx, [ebp+arg_0]
.text:0000BF2C                 mov     eax, [edx+1ACh]
.text:0000BF32                 mov     [ebp+var_3A0], eax
.text:0000BF38
.text:0000BF38 loc_BF38:                               ; CODE XREF: _term_out+29DBj
.text:0000BF38                 push    1
.text:0000BF3A                 mov     ecx, [ebp+var_3A0]
.text:0000BF40                 push    ecx
.text:0000BF41                 mov     edx, [ebp+arg_0]
.text:0000BF44                 mov     eax, [edx+80h]
.text:0000BF4A                 push    eax
.text:0000BF4B                 mov     ecx, [ebp+arg_0]
.text:0000BF4E                 mov     edx, [ecx+6Ch]
.text:0000BF51                 push    edx
.text:0000BF52                 mov     eax, [ebp+arg_0]
.text:0000BF55                 push    eax
.text:0000BF56                 call    _scroll
.text:0000BF5B                 add     esp, 14h
.text:0000BF5E
.text:0000BF5E loc_BF5E:                               ; CODE XREF: _term_out+29C3j
.text:0000BF5E                 mov     ecx, [ebp+arg_0]
.text:0000BF61                 push    ecx
.text:0000BF62                 call    _seen_disp_event
.text:0000BF67                 add     esp, 4
.text:0000BF6A                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BF6F ; ---------------------------------------------------------------------------
.text:0000BF6F
.text:0000BF6F $LN290:                                 ; CODE XREF: _term_out+21FEj
.text:0000BF6F                                         ; DATA XREF: .text:$LN734o
.text:0000BF6F                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 0
.text:0000BF72                 mov     eax, [edx]
.text:0000BF74                 and     eax, 8
.text:0000BF77                 jnz     short loc_BF8B
.text:0000BF79                 mov     ecx, [ebp+arg_0]
.text:0000BF7C                 mov     dword ptr [ecx+0E44h], 0
.text:0000BF86                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BF8B ; ---------------------------------------------------------------------------
.text:0000BF8B
.text:0000BF8B loc_BF8B:                               ; CODE XREF: _term_out+2A2Bj
.text:0000BF8B                 mov     edx, [ebp+arg_0]
.text:0000BF8E                 cmp     dword ptr [edx+1ACh], 0
.text:0000BF95                 jnz     short loc_BFA3
.text:0000BF97                 mov     [ebp+var_3A4], 1
.text:0000BFA1                 jmp     short loc_BFB2
.text:0000BFA3 ; ---------------------------------------------------------------------------
.text:0000BFA3
.text:0000BFA3 loc_BFA3:                               ; CODE XREF: _term_out+2A49j
.text:0000BFA3                 mov     eax, [ebp+arg_0]
.text:0000BFA6                 mov     ecx, [eax+1ACh]
.text:0000BFAC                 mov     [ebp+var_3A4], ecx
.text:0000BFB2
.text:0000BFB2 loc_BFB2:                               ; CODE XREF: _term_out+2A55j
.text:0000BFB2                 mov     edx, [ebp+var_3A4]
.text:0000BFB8                 push    edx
.text:0000BFB9                 mov     eax, [ebp+arg_0]
.text:0000BFBC                 push    eax
.text:0000BFBD                 call    _insch
.text:0000BFC2                 add     esp, 8
.text:0000BFC5                 mov     ecx, [ebp+arg_0]
.text:0000BFC8                 push    ecx
.text:0000BFC9                 call    _seen_disp_event
.text:0000BFCE                 add     esp, 4
.text:0000BFD1                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BFD6 ; ---------------------------------------------------------------------------
.text:0000BFD6
.text:0000BFD6 $LN288:                                 ; CODE XREF: _term_out+21FEj
.text:0000BFD6                                         ; DATA XREF: .text:$LN734o
.text:0000BFD6                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 16
.text:0000BFD9                 mov     eax, [edx]
.text:0000BFDB                 and     eax, 8
.text:0000BFDE                 jnz     short loc_BFF2
.text:0000BFE0                 mov     ecx, [ebp+arg_0]
.text:0000BFE3                 mov     dword ptr [ecx+0E44h], 0
.text:0000BFED                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000BFF2 ; ---------------------------------------------------------------------------
.text:0000BFF2
.text:0000BFF2 loc_BFF2:                               ; CODE XREF: _term_out+2A92j
.text:0000BFF2                 mov     edx, [ebp+arg_0]
.text:0000BFF5                 cmp     dword ptr [edx+1ACh], 0
.text:0000BFFC                 jnz     short loc_C00A
.text:0000BFFE                 mov     [ebp+var_3A8], 1
.text:0000C008                 jmp     short loc_C019
.text:0000C00A ; ---------------------------------------------------------------------------
.text:0000C00A
.text:0000C00A loc_C00A:                               ; CODE XREF: _term_out+2AB0j
.text:0000C00A                 mov     eax, [ebp+arg_0]
.text:0000C00D                 mov     ecx, [eax+1ACh]
.text:0000C013                 mov     [ebp+var_3A8], ecx
.text:0000C019
.text:0000C019 loc_C019:                               ; CODE XREF: _term_out+2ABCj
.text:0000C019                 mov     edx, [ebp+var_3A8]
.text:0000C01F                 neg     edx
.text:0000C021                 push    edx
.text:0000C022                 mov     eax, [ebp+arg_0]
.text:0000C025                 push    eax
.text:0000C026                 call    _insch
.text:0000C02B                 add     esp, 8
.text:0000C02E                 mov     ecx, [ebp+arg_0]
.text:0000C031                 push    ecx
.text:0000C032                 call    _seen_disp_event
.text:0000C037                 add     esp, 4
.text:0000C03A                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C03F ; ---------------------------------------------------------------------------
.text:0000C03F
.text:0000C03F $LN286:                                 ; CODE XREF: _term_out+21FEj
.text:0000C03F                                         ; DATA XREF: .text:$LN734o
.text:0000C03F                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 35
.text:0000C042                 mov     eax, [edx]
.text:0000C044                 and     eax, 2
.text:0000C047                 jnz     short loc_C05B
.text:0000C049                 mov     ecx, [ebp+arg_0]
.text:0000C04C                 mov     dword ptr [ecx+0E44h], 0
.text:0000C056                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C05B ; ---------------------------------------------------------------------------
.text:0000C05B
.text:0000C05B loc_C05B:                               ; CODE XREF: _term_out+2AFBj
.text:0000C05B                 mov     edx, [ebp+arg_0]
.text:0000C05E                 cmp     dword ptr [edx+1084h], 0
.text:0000C065                 jz      short loc_C097
.text:0000C067                 push    0
.text:0000C069                 mov     eax, [ebp+arg_0]
.text:0000C06C                 add     eax, 0A40h
.text:0000C071                 push    eax             ; Str
.text:0000C072                 call    _strlen
.text:0000C077                 add     esp, 4
.text:0000C07A                 push    eax
.text:0000C07B                 mov     ecx, [ebp+arg_0]
.text:0000C07E                 add     ecx, 0A40h
.text:0000C084                 push    ecx
.text:0000C085                 mov     edx, [ebp+arg_0]
.text:0000C088                 mov     eax, [edx+1084h]
.text:0000C08E                 push    eax
.text:0000C08F                 call    _ldisc_send
.text:0000C094                 add     esp, 10h
.text:0000C097
.text:0000C097 loc_C097:                               ; CODE XREF: _term_out+2B19j
.text:0000C097                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C09C ; ---------------------------------------------------------------------------
.text:0000C09C
.text:0000C09C $LN283:                                 ; CODE XREF: _term_out+21FEj
.text:0000C09C                                         ; DATA XREF: .text:$LN734o
.text:0000C09C                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 46
.text:0000C09F                 cmp     dword ptr [ecx+1084h], 0
.text:0000C0A6                 jz      loc_C134
.text:0000C0AC                 mov     edx, [ebp+arg_0]
.text:0000C0AF                 cmp     dword ptr [edx+1ACh], 6
.text:0000C0B6                 jnz     short loc_C10D
.text:0000C0B8                 mov     eax, [ebp+arg_0]
.text:0000C0BB                 mov     ecx, [eax+70h]
.text:0000C0BE                 add     ecx, 1
.text:0000C0C1                 push    ecx
.text:0000C0C2                 mov     edx, [ebp+arg_0]
.text:0000C0C5                 mov     eax, [edx+6Ch]
.text:0000C0C8                 add     eax, 1
.text:0000C0CB                 push    eax
.text:0000C0CC                 push    offset $SG87399 ; "\x1B[%d;%dR"
.text:0000C0D1                 lea     ecx, [ebp+Dest]
.text:0000C0D7                 push    ecx             ; Dest
.text:0000C0D8                 call    _sprintf
.text:0000C0DD                 add     esp, 10h
.text:0000C0E0                 push    0
.text:0000C0E2                 lea     edx, [ebp+Dest]
.text:0000C0E8                 push    edx             ; Str
.text:0000C0E9                 call    _strlen
.text:0000C0EE                 add     esp, 4
.text:0000C0F1                 push    eax
.text:0000C0F2                 lea     eax, [ebp+Dest]
.text:0000C0F8                 push    eax
.text:0000C0F9                 mov     ecx, [ebp+arg_0]
.text:0000C0FC                 mov     edx, [ecx+1084h]
.text:0000C102                 push    edx
.text:0000C103                 call    _ldisc_send
.text:0000C108                 add     esp, 10h
.text:0000C10B                 jmp     short loc_C134
.text:0000C10D ; ---------------------------------------------------------------------------
.text:0000C10D
.text:0000C10D loc_C10D:                               ; CODE XREF: _term_out+2B6Aj
.text:0000C10D                 mov     eax, [ebp+arg_0]
.text:0000C110                 cmp     dword ptr [eax+1ACh], 5
.text:0000C117                 jnz     short loc_C134
.text:0000C119                 push    0
.text:0000C11B                 push    4
.text:0000C11D                 push    offset $SG87402 ; "\x1B[0n"
.text:0000C122                 mov     ecx, [ebp+arg_0]
.text:0000C125                 mov     edx, [ecx+1084h]
.text:0000C12B                 push    edx
.text:0000C12C                 call    _ldisc_send
.text:0000C131                 add     esp, 10h
.text:0000C134
.text:0000C134 loc_C134:                               ; CODE XREF: _term_out+2B5Aj
.text:0000C134                                         ; _term_out+2BBFj ...
.text:0000C134                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C139 ; ---------------------------------------------------------------------------
.text:0000C139
.text:0000C139 $LN278:                                 ; CODE XREF: _term_out+21CFj
.text:0000C139                                         ; _term_out+21FEj
.text:0000C139                                         ; DATA XREF: ...
.text:0000C139                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A case 40
.text:0000C13C                 mov     ecx, [eax]
.text:0000C13E                 and     ecx, 2
.text:0000C141                 jnz     short loc_C155
.text:0000C143                 mov     edx, [ebp+arg_0]
.text:0000C146                 mov     dword ptr [edx+0E44h], 0
.text:0000C150                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C155 ; ---------------------------------------------------------------------------
.text:0000C155
.text:0000C155 loc_C155:                               ; CODE XREF: _term_out+2BF5j
.text:0000C155                 mov     [ebp+var_1DC], 0
.text:0000C15F                 jmp     short loc_C170
.text:0000C161 ; ---------------------------------------------------------------------------
.text:0000C161
.text:0000C161 loc_C161:                               ; CODE XREF: _term_out+2C5Ej
.text:0000C161                 mov     eax, [ebp+var_1DC]
.text:0000C167                 add     eax, 1
.text:0000C16A                 mov     [ebp+var_1DC], eax
.text:0000C170
.text:0000C170 loc_C170:                               ; CODE XREF: _term_out+2C13j
.text:0000C170                 mov     ecx, [ebp+arg_0]
.text:0000C173                 mov     edx, [ebp+var_1DC]
.text:0000C179                 cmp     edx, [ecx+22Ch]
.text:0000C17F                 jge     short loc_C1AC
.text:0000C181                 push    1
.text:0000C183                 mov     eax, [ebp+arg_0]
.text:0000C186                 mov     ecx, [eax+230h]
.text:0000C18C                 push    ecx
.text:0000C18D                 mov     edx, [ebp+var_1DC]
.text:0000C193                 mov     eax, [ebp+arg_0]
.text:0000C196                 mov     ecx, [eax+edx*4+1ACh]
.text:0000C19D                 push    ecx
.text:0000C19E                 mov     edx, [ebp+arg_0]
.text:0000C1A1                 push    edx
.text:0000C1A2                 call    _toggle_mode
.text:0000C1A7                 add     esp, 10h
.text:0000C1AA                 jmp     short loc_C161
.text:0000C1AC ; ---------------------------------------------------------------------------
.text:0000C1AC
.text:0000C1AC loc_C1AC:                               ; CODE XREF: _term_out+2C33j
.text:0000C1AC                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C1B1 ; ---------------------------------------------------------------------------
.text:0000C1B1
.text:0000C1B1 $LN273:                                 ; CODE XREF: _term_out+21FEj
.text:0000C1B1                                         ; _term_out+2247j
.text:0000C1B1                                         ; DATA XREF: ...
.text:0000C1B1                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A case 41
.text:0000C1B4                 mov     ecx, [eax]
.text:0000C1B6                 and     ecx, 2
.text:0000C1B9                 jnz     short loc_C1CD
.text:0000C1BB                 mov     edx, [ebp+arg_0]
.text:0000C1BE                 mov     dword ptr [edx+0E44h], 0
.text:0000C1C8                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C1CD ; ---------------------------------------------------------------------------
.text:0000C1CD
.text:0000C1CD loc_C1CD:                               ; CODE XREF: _term_out+2C6Dj
.text:0000C1CD                 mov     eax, [ebp+arg_0]
.text:0000C1D0                 cmp     dword ptr [eax+22Ch], 1
.text:0000C1D7                 jz      short loc_C1DE
.text:0000C1D9                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C1DE ; ---------------------------------------------------------------------------
.text:0000C1DE
.text:0000C1DE loc_C1DE:                               ; CODE XREF: _term_out+2C8Bj
.text:0000C1DE                 mov     ecx, [ebp+arg_0]
.text:0000C1E1                 cmp     dword ptr [ecx+1ACh], 5
.text:0000C1E8                 jnz     short loc_C258
.text:0000C1EA                 push    7Ch ; '|'
.text:0000C1EC                 mov     edx, [ebp+arg_0]
.text:0000C1EF                 mov     eax, [edx+1094h]
.text:0000C1F5                 push    eax
.text:0000C1F6                 call    _conf_get_str
.text:0000C1FB                 add     esp, 8
.text:0000C1FE                 mov     [ebp+var_1E0], eax
.text:0000C204                 mov     ecx, [ebp+var_1E0]
.text:0000C20A                 movsx   edx, byte ptr [ecx]
.text:0000C20D                 test    edx, edx
.text:0000C20F                 jz      short loc_C258
.text:0000C211                 mov     eax, [ebp+arg_0]
.text:0000C214                 mov     dword ptr [eax+0ECh], 1
.text:0000C21E                 mov     ecx, [ebp+arg_0]
.text:0000C221                 xor     edx, edx
.text:0000C223                 cmp     dword ptr [ecx+230h], 0
.text:0000C22A                 setz    dl
.text:0000C22D                 mov     eax, [ebp+arg_0]
.text:0000C230                 mov     [eax+0F0h], edx
.text:0000C236                 mov     ecx, [ebp+arg_0]
.text:0000C239                 mov     dword ptr [ecx+0F4h], 0
.text:0000C243                 mov     edx, [ebp+var_1E0]
.text:0000C249                 push    edx
.text:0000C24A                 mov     eax, [ebp+arg_0]
.text:0000C24D                 push    eax
.text:0000C24E                 call    _term_print_setup
.text:0000C253                 add     esp, 8
.text:0000C256                 jmp     short loc_C27C
.text:0000C258 ; ---------------------------------------------------------------------------
.text:0000C258
.text:0000C258 loc_C258:                               ; CODE XREF: _term_out+2C9Cj
.text:0000C258                                         ; _term_out+2CC3j
.text:0000C258                 mov     ecx, [ebp+arg_0]
.text:0000C25B                 cmp     dword ptr [ecx+1ACh], 4
.text:0000C262                 jnz     short loc_C27C
.text:0000C264                 mov     edx, [ebp+arg_0]
.text:0000C267                 cmp     dword ptr [edx+0ECh], 0
.text:0000C26E                 jz      short loc_C27C
.text:0000C270                 mov     eax, [ebp+arg_0]
.text:0000C273                 push    eax
.text:0000C274                 call    _term_print_finish
.text:0000C279                 add     esp, 4
.text:0000C27C
.text:0000C27C loc_C27C:                               ; CODE XREF: _term_out+2D0Aj
.text:0000C27C                                         ; _term_out+2D16j ...
.text:0000C27C                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C281 ; ---------------------------------------------------------------------------
.text:0000C281
.text:0000C281 $LN267:                                 ; CODE XREF: _term_out+21FEj
.text:0000C281                                         ; _term_out+2257j
.text:0000C281                                         ; DATA XREF: ...
.text:0000C281                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 44
.text:0000C284                 mov     edx, [ecx]
.text:0000C286                 and     edx, 2
.text:0000C289                 jnz     short loc_C29D
.text:0000C28B                 mov     eax, [ebp+arg_0]
.text:0000C28E                 mov     dword ptr [eax+0E44h], 0
.text:0000C298                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C29D ; ---------------------------------------------------------------------------
.text:0000C29D
.text:0000C29D loc_C29D:                               ; CODE XREF: _term_out+2D3Dj
.text:0000C29D                 mov     [ebp+var_1E4], 0
.text:0000C2A7                 jmp     short loc_C2B8
.text:0000C2A9 ; ---------------------------------------------------------------------------
.text:0000C2A9
.text:0000C2A9 loc_C2A9:                               ; CODE XREF: _term_out+2DA6j
.text:0000C2A9                 mov     ecx, [ebp+var_1E4]
.text:0000C2AF                 add     ecx, 1
.text:0000C2B2                 mov     [ebp+var_1E4], ecx
.text:0000C2B8
.text:0000C2B8 loc_C2B8:                               ; CODE XREF: _term_out+2D5Bj
.text:0000C2B8                 mov     edx, [ebp+arg_0]
.text:0000C2BB                 mov     eax, [ebp+var_1E4]
.text:0000C2C1                 cmp     eax, [edx+22Ch]
.text:0000C2C7                 jge     short loc_C2F4
.text:0000C2C9                 push    0
.text:0000C2CB                 mov     ecx, [ebp+arg_0]
.text:0000C2CE                 mov     edx, [ecx+230h]
.text:0000C2D4                 push    edx
.text:0000C2D5                 mov     eax, [ebp+var_1E4]
.text:0000C2DB                 mov     ecx, [ebp+arg_0]
.text:0000C2DE                 mov     edx, [ecx+eax*4+1ACh]
.text:0000C2E5                 push    edx
.text:0000C2E6                 mov     eax, [ebp+arg_0]
.text:0000C2E9                 push    eax
.text:0000C2EA                 call    _toggle_mode
.text:0000C2EF                 add     esp, 10h
.text:0000C2F2                 jmp     short loc_C2A9
.text:0000C2F4 ; ---------------------------------------------------------------------------
.text:0000C2F4
.text:0000C2F4 loc_C2F4:                               ; CODE XREF: _term_out+2D7Bj
.text:0000C2F4                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C2F9 ; ---------------------------------------------------------------------------
.text:0000C2F9
.text:0000C2F9 $LN262:                                 ; CODE XREF: _term_out+21FEj
.text:0000C2F9                                         ; DATA XREF: .text:$LN734o
.text:0000C2F9                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 39
.text:0000C2FC                 mov     edx, [ecx]
.text:0000C2FE                 and     edx, 2
.text:0000C301                 jnz     short loc_C315
.text:0000C303                 mov     eax, [ebp+arg_0]
.text:0000C306                 mov     dword ptr [eax+0E44h], 0
.text:0000C310                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C315 ; ---------------------------------------------------------------------------
.text:0000C315
.text:0000C315 loc_C315:                               ; CODE XREF: _term_out+2DB5j
.text:0000C315                 mov     ecx, [ebp+arg_0]
.text:0000C318                 cmp     dword ptr [ecx+22Ch], 1
.text:0000C31F                 jnz     short loc_C38F
.text:0000C321                 mov     edx, [ebp+arg_0]
.text:0000C324                 cmp     dword ptr [edx+1ACh], 0
.text:0000C32B                 jnz     short loc_C342
.text:0000C32D                 mov     eax, [ebp+arg_0]
.text:0000C330                 mov     ecx, [eax+0E40h]
.text:0000C336                 mov     edx, [ebp+arg_0]
.text:0000C339                 mov     eax, [edx+70h]
.text:0000C33C                 mov     byte ptr [ecx+eax], 0
.text:0000C340                 jmp     short loc_C38F
.text:0000C342 ; ---------------------------------------------------------------------------
.text:0000C342
.text:0000C342 loc_C342:                               ; CODE XREF: _term_out+2DDFj
.text:0000C342                 mov     ecx, [ebp+arg_0]
.text:0000C345                 cmp     dword ptr [ecx+1ACh], 3
.text:0000C34C                 jnz     short loc_C38F
.text:0000C34E                 mov     [ebp+var_1E8], 0
.text:0000C358                 jmp     short loc_C369
.text:0000C35A ; ---------------------------------------------------------------------------
.text:0000C35A
.text:0000C35A loc_C35A:                               ; CODE XREF: _term_out+2E41j
.text:0000C35A                 mov     edx, [ebp+var_1E8]
.text:0000C360                 add     edx, 1
.text:0000C363                 mov     [ebp+var_1E8], edx
.text:0000C369
.text:0000C369 loc_C369:                               ; CODE XREF: _term_out+2E0Cj
.text:0000C369                 mov     eax, [ebp+arg_0]
.text:0000C36C                 mov     ecx, [ebp+var_1E8]
.text:0000C372                 cmp     ecx, [eax+12Ch]
.text:0000C378                 jge     short loc_C38F
.text:0000C37A                 mov     edx, [ebp+arg_0]
.text:0000C37D                 mov     eax, [edx+0E40h]
.text:0000C383                 mov     ecx, [ebp+var_1E8]
.text:0000C389                 mov     byte ptr [eax+ecx], 0
.text:0000C38D                 jmp     short loc_C35A
.text:0000C38F ; ---------------------------------------------------------------------------
.text:0000C38F
.text:0000C38F loc_C38F:                               ; CODE XREF: _term_out+2DD3j
.text:0000C38F                                         ; _term_out+2DF4j ...
.text:0000C38F                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C394 ; ---------------------------------------------------------------------------
.text:0000C394
.text:0000C394 $LN253:                                 ; CODE XREF: _term_out+21FEj
.text:0000C394                                         ; DATA XREF: .text:$LN734o
.text:0000C394                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 50
.text:0000C397                 mov     eax, [edx]
.text:0000C399                 and     eax, 2
.text:0000C39C                 jnz     short loc_C3B0
.text:0000C39E                 mov     ecx, [ebp+arg_0]
.text:0000C3A1                 mov     dword ptr [ecx+0E44h], 0
.text:0000C3AB                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C3B0 ; ---------------------------------------------------------------------------
.text:0000C3B0
.text:0000C3B0 loc_C3B0:                               ; CODE XREF: _term_out+2E50j
.text:0000C3B0                 mov     edx, [ebp+arg_0]
.text:0000C3B3                 cmp     dword ptr [edx+22Ch], 2
.text:0000C3BA                 jg      loc_C4FA
.text:0000C3C0                 mov     eax, [ebp+arg_0]
.text:0000C3C3                 cmp     dword ptr [eax+1ACh], 0
.text:0000C3CA                 jnz     short loc_C3D8
.text:0000C3CC                 mov     [ebp+var_3AC], 1
.text:0000C3D6                 jmp     short loc_C3E7
.text:0000C3D8 ; ---------------------------------------------------------------------------
.text:0000C3D8
.text:0000C3D8 loc_C3D8:                               ; CODE XREF: _term_out+2E7Ej
.text:0000C3D8                 mov     ecx, [ebp+arg_0]
.text:0000C3DB                 mov     edx, [ecx+1ACh]
.text:0000C3E1                 mov     [ebp+var_3AC], edx
.text:0000C3E7
.text:0000C3E7 loc_C3E7:                               ; CODE XREF: _term_out+2E8Aj
.text:0000C3E7                 mov     eax, [ebp+var_3AC]
.text:0000C3ED                 sub     eax, 1
.text:0000C3F0                 mov     [ebp+var_1EC], eax
.text:0000C3F6                 mov     ecx, [ebp+arg_0]
.text:0000C3F9                 cmp     dword ptr [ecx+22Ch], 1
.text:0000C400                 jle     short loc_C448
.text:0000C402                 mov     edx, [ebp+arg_0]
.text:0000C405                 cmp     dword ptr [edx+1B0h], 0
.text:0000C40C                 jz      short loc_C448
.text:0000C40E                 mov     eax, [ebp+arg_0]
.text:0000C411                 cmp     dword ptr [eax+1B0h], 0
.text:0000C418                 jnz     short loc_C42B
.text:0000C41A                 mov     ecx, [ebp+arg_0]
.text:0000C41D                 mov     edx, [ecx+128h]
.text:0000C423                 mov     [ebp+var_3B0], edx
.text:0000C429                 jmp     short loc_C43A
.text:0000C42B ; ---------------------------------------------------------------------------
.text:0000C42B
.text:0000C42B loc_C42B:                               ; CODE XREF: _term_out+2ECCj
.text:0000C42B                 mov     eax, [ebp+arg_0]
.text:0000C42E                 mov     ecx, [eax+1B0h]
.text:0000C434                 mov     [ebp+var_3B0], ecx
.text:0000C43A
.text:0000C43A loc_C43A:                               ; CODE XREF: _term_out+2EDDj
.text:0000C43A                 mov     edx, [ebp+var_3B0]
.text:0000C440                 mov     [ebp+var_3B4], edx
.text:0000C446                 jmp     short loc_C457
.text:0000C448 ; ---------------------------------------------------------------------------
.text:0000C448
.text:0000C448 loc_C448:                               ; CODE XREF: _term_out+2EB4j
.text:0000C448                                         ; _term_out+2EC0j
.text:0000C448                 mov     eax, [ebp+arg_0]
.text:0000C44B                 mov     ecx, [eax+128h]
.text:0000C451                 mov     [ebp+var_3B4], ecx
.text:0000C457
.text:0000C457 loc_C457:                               ; CODE XREF: _term_out+2EFAj
.text:0000C457                 mov     edx, [ebp+var_3B4]
.text:0000C45D                 sub     edx, 1
.text:0000C460                 mov     [ebp+var_1F0], edx
.text:0000C466                 mov     eax, [ebp+arg_0]
.text:0000C469                 mov     ecx, [ebp+var_1F0]
.text:0000C46F                 cmp     ecx, [eax+128h]
.text:0000C475                 jl      short loc_C489
.text:0000C477                 mov     edx, [ebp+arg_0]
.text:0000C47A                 mov     eax, [edx+128h]
.text:0000C480                 sub     eax, 1
.text:0000C483                 mov     [ebp+var_1F0], eax
.text:0000C489
.text:0000C489 loc_C489:                               ; CODE XREF: _term_out+2F29j
.text:0000C489                 mov     ecx, [ebp+var_1F0]
.text:0000C48F                 sub     ecx, [ebp+var_1EC]
.text:0000C495                 test    ecx, ecx
.text:0000C497                 jle     short loc_C4FA
.text:0000C499                 mov     edx, [ebp+arg_0]
.text:0000C49C                 mov     eax, [ebp+var_1EC]
.text:0000C4A2                 mov     [edx+7Ch], eax
.text:0000C4A5                 mov     ecx, [ebp+arg_0]
.text:0000C4A8                 mov     edx, [ebp+var_1F0]
.text:0000C4AE                 mov     [ecx+80h], edx
.text:0000C4B4                 mov     eax, [ebp+arg_0]
.text:0000C4B7                 mov     dword ptr [eax+70h], 0
.text:0000C4BE                 mov     ecx, [ebp+arg_0]
.text:0000C4C1                 cmp     dword ptr [ecx+84h], 0
.text:0000C4C8                 jz      short loc_C4D8
.text:0000C4CA                 mov     edx, [ebp+arg_0]
.text:0000C4CD                 mov     eax, [edx+7Ch]
.text:0000C4D0                 mov     [ebp+var_3B8], eax
.text:0000C4D6                 jmp     short loc_C4E2
.text:0000C4D8 ; ---------------------------------------------------------------------------
.text:0000C4D8
.text:0000C4D8 loc_C4D8:                               ; CODE XREF: _term_out+2F7Cj
.text:0000C4D8                 mov     [ebp+var_3B8], 0
.text:0000C4E2
.text:0000C4E2 loc_C4E2:                               ; CODE XREF: _term_out+2F8Aj
.text:0000C4E2                 mov     ecx, [ebp+arg_0]
.text:0000C4E5                 mov     edx, [ebp+var_3B8]
.text:0000C4EB                 mov     [ecx+6Ch], edx
.text:0000C4EE                 mov     eax, [ebp+arg_0]
.text:0000C4F1                 push    eax
.text:0000C4F2                 call    _seen_disp_event
.text:0000C4F7                 add     esp, 4
.text:0000C4FA
.text:0000C4FA loc_C4FA:                               ; CODE XREF: _term_out+2E6Ej
.text:0000C4FA                                         ; _term_out+2F4Bj
.text:0000C4FA                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000C4FF ; ---------------------------------------------------------------------------
.text:0000C4FF
.text:0000C4FF $LN248:                                 ; CODE XREF: _term_out+21FEj
.text:0000C4FF                                         ; DATA XREF: .text:$LN734o
.text:0000C4FF                 mov     [ebp+var_1F4], 0 ; jumptable 0000B74A case 45
.text:0000C509                 jmp     short loc_C51A
.text:0000C50B ; ---------------------------------------------------------------------------
.text:0000C50B
.text:0000C50B loc_C50B:                               ; CODE XREF: _term_out:$LN243j
.text:0000C50B                 mov     ecx, [ebp+var_1F4]
.text:0000C511                 add     ecx, 1
.text:0000C514                 mov     [ebp+var_1F4], ecx
.text:0000C51A
.text:0000C51A loc_C51A:                               ; CODE XREF: _term_out+2FBDj
.text:0000C51A                 mov     edx, [ebp+arg_0]
.text:0000C51D                 mov     eax, [ebp+var_1F4]
.text:0000C523                 cmp     eax, [edx+22Ch]
.text:0000C529                 jge     loc_CA5F
.text:0000C52F                 mov     ecx, [ebp+var_1F4]
.text:0000C535                 mov     edx, [ebp+arg_0]
.text:0000C538                 cmp     dword ptr [edx+ecx*4+1ACh], 0
.text:0000C540                 jnz     short loc_C54E
.text:0000C542                 mov     [ebp+var_3BC], 0
.text:0000C54C                 jmp     short loc_C564
.text:0000C54E ; ---------------------------------------------------------------------------
.text:0000C54E
.text:0000C54E loc_C54E:                               ; CODE XREF: _term_out+2FF4j
.text:0000C54E                 mov     eax, [ebp+var_1F4]
.text:0000C554                 mov     ecx, [ebp+arg_0]
.text:0000C557                 mov     edx, [ecx+eax*4+1ACh]
.text:0000C55E                 mov     [ebp+var_3BC], edx
.text:0000C564
.text:0000C564 loc_C564:                               ; CODE XREF: _term_out+3000j
.text:0000C564                 mov     eax, [ebp+var_3BC]
.text:0000C56A                 mov     [ebp+var_3C0], eax
.text:0000C570                 cmp     [ebp+var_3C0], 6Bh ; 'k' ; switch 108 cases
.text:0000C577                 ja      $LN243          ; jumptable 0000C58A default case
.text:0000C57D                 mov     ecx, [ebp+var_3C0]
.text:0000C583                 movzx   edx, ds:$LN708[ecx]
.text:0000C58A                 jmp     ds:$LN736[edx*4] ; switch jump
.text:0000C591 ; ---------------------------------------------------------------------------
.text:0000C591
.text:0000C591 $LN242:                                 ; CODE XREF: _term_out+303Ej
.text:0000C591                                         ; DATA XREF: .text:$LN736o
.text:0000C591                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 0
.text:0000C594                 mov     ecx, [ebp+arg_0]
.text:0000C597                 mov     edx, [ecx+3Ch]
.text:0000C59A                 mov     [eax+40h], edx
.text:0000C59D                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C5A2 ; ---------------------------------------------------------------------------
.text:0000C5A2
.text:0000C5A2 $LN241:                                 ; CODE XREF: _term_out+303Ej
.text:0000C5A2                                         ; DATA XREF: .text:$LN736o
.text:0000C5A2                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 1
.text:0000C5A5                 mov     ecx, [eax]
.text:0000C5A7                 and     ecx, 4
.text:0000C5AA                 jnz     short loc_C5BE
.text:0000C5AC                 mov     edx, [ebp+arg_0]
.text:0000C5AF                 mov     dword ptr [edx+0E44h], 0
.text:0000C5B9                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C5BE ; ---------------------------------------------------------------------------
.text:0000C5BE
.text:0000C5BE loc_C5BE:                               ; CODE XREF: _term_out+305Ej
.text:0000C5BE                 mov     eax, [ebp+arg_0]
.text:0000C5C1                 mov     ecx, [eax+40h]
.text:0000C5C4                 or      ecx, 40000h
.text:0000C5CA                 mov     edx, [ebp+arg_0]
.text:0000C5CD                 mov     [edx+40h], ecx
.text:0000C5D0                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C5D5 ; ---------------------------------------------------------------------------
.text:0000C5D5
.text:0000C5D5 $LN239:                                 ; CODE XREF: _term_out+303Ej
.text:0000C5D5                                         ; DATA XREF: .text:$LN736o
.text:0000C5D5                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 21
.text:0000C5D8                 mov     ecx, [eax]
.text:0000C5DA                 and     ecx, 4000h
.text:0000C5E0                 jnz     short $LN237    ; jumptable 0000C58A case 4
.text:0000C5E2                 mov     edx, [ebp+arg_0]
.text:0000C5E5                 mov     dword ptr [edx+0E44h], 0
.text:0000C5EF                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C5F4 ; ---------------------------------------------------------------------------
.text:0000C5F4
.text:0000C5F4 $LN237:                                 ; CODE XREF: _term_out+303Ej
.text:0000C5F4                                         ; _term_out+3094j
.text:0000C5F4                                         ; DATA XREF: ...
.text:0000C5F4                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 4
.text:0000C5F7                 mov     ecx, [eax]
.text:0000C5F9                 and     ecx, 4
.text:0000C5FC                 jnz     short loc_C610
.text:0000C5FE                 mov     edx, [ebp+arg_0]
.text:0000C601                 mov     dword ptr [edx+0E44h], 0
.text:0000C60B                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C610 ; ---------------------------------------------------------------------------
.text:0000C610
.text:0000C610 loc_C610:                               ; CODE XREF: _term_out+30B0j
.text:0000C610                 mov     eax, [ebp+arg_0]
.text:0000C613                 mov     ecx, [eax+40h]
.text:0000C616                 or      ecx, 80000h
.text:0000C61C                 mov     edx, [ebp+arg_0]
.text:0000C61F                 mov     [edx+40h], ecx
.text:0000C622                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C627 ; ---------------------------------------------------------------------------
.text:0000C627
.text:0000C627 $LN235:                                 ; CODE XREF: _term_out+303Ej
.text:0000C627                                         ; DATA XREF: .text:$LN736o
.text:0000C627                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 5
.text:0000C62A                 mov     ecx, [eax]
.text:0000C62C                 and     ecx, 4
.text:0000C62F                 jnz     short loc_C643
.text:0000C631                 mov     edx, [ebp+arg_0]
.text:0000C634                 mov     dword ptr [edx+0E44h], 0
.text:0000C63E                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C643 ; ---------------------------------------------------------------------------
.text:0000C643
.text:0000C643 loc_C643:                               ; CODE XREF: _term_out+30E3j
.text:0000C643                 mov     eax, [ebp+arg_0]
.text:0000C646                 mov     ecx, [eax+40h]
.text:0000C649                 or      ecx, 200000h
.text:0000C64F                 mov     edx, [ebp+arg_0]
.text:0000C652                 mov     [edx+40h], ecx
.text:0000C655                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C65A ; ---------------------------------------------------------------------------
.text:0000C65A
.text:0000C65A $LN233:                                 ; CODE XREF: _term_out+303Ej
.text:0000C65A                                         ; DATA XREF: .text:$LN736o
.text:0000C65A                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 6
.text:0000C65D                 mov     ecx, [eax]
.text:0000C65F                 and     ecx, 1000h
.text:0000C665                 jnz     short loc_C679
.text:0000C667                 mov     edx, [ebp+arg_0]
.text:0000C66A                 mov     dword ptr [edx+0E44h], 0
.text:0000C674                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C679 ; ---------------------------------------------------------------------------
.text:0000C679
.text:0000C679 loc_C679:                               ; CODE XREF: _term_out+3119j
.text:0000C679                 mov     eax, [ebp+arg_0]
.text:0000C67C                 mov     dword ptr [eax+0C4h], 0
.text:0000C686                 mov     ecx, [ebp+arg_0]
.text:0000C689                 mov     edx, [ecx+40h]
.text:0000C68C                 or      edx, 200000h
.text:0000C692                 mov     eax, [ebp+arg_0]
.text:0000C695                 mov     [eax+40h], edx
.text:0000C698                 mov     ecx, [ebp+arg_0]
.text:0000C69B                 push    ecx
.text:0000C69C                 call    _term_schedule_tblink
.text:0000C6A1                 add     esp, 4
.text:0000C6A4                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C6A9 ; ---------------------------------------------------------------------------
.text:0000C6A9
.text:0000C6A9 $LN231:                                 ; CODE XREF: _term_out+303Ej
.text:0000C6A9                                         ; DATA XREF: .text:$LN736o
.text:0000C6A9                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A case 7
.text:0000C6AC                 mov     eax, [edx+40h]
.text:0000C6AF                 or      eax, 100000h
.text:0000C6B4                 mov     ecx, [ebp+arg_0]
.text:0000C6B7                 mov     [ecx+40h], eax
.text:0000C6BA                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C6BF ; ---------------------------------------------------------------------------
.text:0000C6BF
.text:0000C6BF $LN230:                                 ; CODE XREF: _term_out+303Ej
.text:0000C6BF                                         ; DATA XREF: .text:$LN736o
.text:0000C6BF                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A case 10
.text:0000C6C2                 mov     eax, [edx]
.text:0000C6C4                 and     eax, 1000h
.text:0000C6C9                 jnz     short loc_C6DD
.text:0000C6CB                 mov     ecx, [ebp+arg_0]
.text:0000C6CE                 mov     dword ptr [ecx+0E44h], 0
.text:0000C6D8                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C6DD ; ---------------------------------------------------------------------------
.text:0000C6DD
.text:0000C6DD loc_C6DD:                               ; CODE XREF: _term_out+317Dj
.text:0000C6DD                 mov     edx, [ebp+arg_0]
.text:0000C6E0                 cmp     dword ptr [edx+1148h], 0
.text:0000C6E7                 jz      short loc_C6EE
.text:0000C6E9                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C6EE ; ---------------------------------------------------------------------------
.text:0000C6EE
.text:0000C6EE loc_C6EE:                               ; CODE XREF: _term_out+319Bj
.text:0000C6EE                 mov     eax, [ebp+arg_0]
.text:0000C6F1                 mov     dword ptr [eax+0D0h], 0
.text:0000C6FB                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C700 ; ---------------------------------------------------------------------------
.text:0000C700
.text:0000C700 $LN227:                                 ; CODE XREF: _term_out+303Ej
.text:0000C700                                         ; DATA XREF: .text:$LN736o
.text:0000C700                 mov     ecx, [ebp+arg_0] ; jumptable 0000C58A case 11
.text:0000C703                 mov     edx, [ecx]
.text:0000C705                 and     edx, 1000h
.text:0000C70B                 jnz     short loc_C71F
.text:0000C70D                 mov     eax, [ebp+arg_0]
.text:0000C710                 mov     dword ptr [eax+0E44h], 0
.text:0000C71A                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C71F ; ---------------------------------------------------------------------------
.text:0000C71F
.text:0000C71F loc_C71F:                               ; CODE XREF: _term_out+31BFj
.text:0000C71F                 mov     ecx, [ebp+arg_0]
.text:0000C722                 cmp     dword ptr [ecx+1148h], 0
.text:0000C729                 jz      short loc_C730
.text:0000C72B                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C730 ; ---------------------------------------------------------------------------
.text:0000C730
.text:0000C730 loc_C730:                               ; CODE XREF: _term_out+31DDj
.text:0000C730                 mov     edx, [ebp+arg_0]
.text:0000C733                 mov     dword ptr [edx+0D0h], 1
.text:0000C73D                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C742 ; ---------------------------------------------------------------------------
.text:0000C742
.text:0000C742 $LN224:                                 ; CODE XREF: _term_out+303Ej
.text:0000C742                                         ; DATA XREF: .text:$LN736o
.text:0000C742                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 12
.text:0000C745                 mov     ecx, [eax]
.text:0000C747                 and     ecx, 1000h
.text:0000C74D                 jnz     short loc_C761
.text:0000C74F                 mov     edx, [ebp+arg_0]
.text:0000C752                 mov     dword ptr [edx+0E44h], 0
.text:0000C75C                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C761 ; ---------------------------------------------------------------------------
.text:0000C761
.text:0000C761 loc_C761:                               ; CODE XREF: _term_out+3201j
.text:0000C761                 mov     eax, [ebp+arg_0]
.text:0000C764                 cmp     dword ptr [eax+1148h], 0
.text:0000C76B                 jz      short loc_C772
.text:0000C76D                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C772 ; ---------------------------------------------------------------------------
.text:0000C772
.text:0000C772 loc_C772:                               ; CODE XREF: _term_out+321Fj
.text:0000C772                 mov     ecx, [ebp+arg_0]
.text:0000C775                 mov     dword ptr [ecx+0D0h], 2
.text:0000C77F                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C784 ; ---------------------------------------------------------------------------
.text:0000C784
.text:0000C784 $LN221:                                 ; CODE XREF: _term_out+303Ej
.text:0000C784                                         ; DATA XREF: .text:$LN736o
.text:0000C784                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A case 22
.text:0000C787                 mov     eax, [edx]
.text:0000C789                 and     eax, 4010h
.text:0000C78E                 jnz     short loc_C7A2
.text:0000C790                 mov     ecx, [ebp+arg_0]
.text:0000C793                 mov     dword ptr [ecx+0E44h], 0
.text:0000C79D                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C7A2 ; ---------------------------------------------------------------------------
.text:0000C7A2
.text:0000C7A2 loc_C7A2:                               ; CODE XREF: _term_out+3242j
.text:0000C7A2                 mov     edx, [ebp+arg_0]
.text:0000C7A5                 mov     eax, [edx+40h]
.text:0000C7A8                 and     eax, 0FFFBFFFFh
.text:0000C7AD                 mov     ecx, [ebp+arg_0]
.text:0000C7B0                 mov     [ecx+40h], eax
.text:0000C7B3                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C7B8 ; ---------------------------------------------------------------------------
.text:0000C7B8
.text:0000C7B8 $LN219:                                 ; CODE XREF: _term_out+303Ej
.text:0000C7B8                                         ; DATA XREF: .text:$LN736o
.text:0000C7B8                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A case 24
.text:0000C7BB                 mov     eax, [edx]
.text:0000C7BD                 and     eax, 4010h
.text:0000C7C2                 jnz     short loc_C7D6
.text:0000C7C4                 mov     ecx, [ebp+arg_0]
.text:0000C7C7                 mov     dword ptr [ecx+0E44h], 0
.text:0000C7D1                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C7D6 ; ---------------------------------------------------------------------------
.text:0000C7D6
.text:0000C7D6 loc_C7D6:                               ; CODE XREF: _term_out+3276j
.text:0000C7D6                 mov     edx, [ebp+arg_0]
.text:0000C7D9                 mov     eax, [edx+40h]
.text:0000C7DC                 and     eax, 0FFF7FFFFh
.text:0000C7E1                 mov     ecx, [ebp+arg_0]
.text:0000C7E4                 mov     [ecx+40h], eax
.text:0000C7E7                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C7EC ; ---------------------------------------------------------------------------
.text:0000C7EC
.text:0000C7EC $LN217:                                 ; CODE XREF: _term_out+303Ej
.text:0000C7EC                                         ; DATA XREF: .text:$LN736o
.text:0000C7EC                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A case 25
.text:0000C7EF                 mov     eax, [edx]
.text:0000C7F1                 and     eax, 4010h
.text:0000C7F6                 jnz     short loc_C80A
.text:0000C7F8                 mov     ecx, [ebp+arg_0]
.text:0000C7FB                 mov     dword ptr [ecx+0E44h], 0
.text:0000C805                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C80A ; ---------------------------------------------------------------------------
.text:0000C80A
.text:0000C80A loc_C80A:                               ; CODE XREF: _term_out+32AAj
.text:0000C80A                 mov     edx, [ebp+arg_0]
.text:0000C80D                 mov     eax, [edx+40h]
.text:0000C810                 and     eax, 0FFDFFFFFh
.text:0000C815                 mov     ecx, [ebp+arg_0]
.text:0000C818                 mov     [ecx+40h], eax
.text:0000C81B                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C820 ; ---------------------------------------------------------------------------
.text:0000C820
.text:0000C820 $LN215:                                 ; CODE XREF: _term_out+303Ej
.text:0000C820                                         ; DATA XREF: .text:$LN736o
.text:0000C820                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A case 27
.text:0000C823                 mov     eax, [edx]
.text:0000C825                 and     eax, 4010h
.text:0000C82A                 jnz     short loc_C83E
.text:0000C82C                 mov     ecx, [ebp+arg_0]
.text:0000C82F                 mov     dword ptr [ecx+0E44h], 0
.text:0000C839                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C83E ; ---------------------------------------------------------------------------
.text:0000C83E
.text:0000C83E loc_C83E:                               ; CODE XREF: _term_out+32DEj
.text:0000C83E                 mov     edx, [ebp+arg_0]
.text:0000C841                 mov     eax, [edx+40h]
.text:0000C844                 and     eax, 0FFEFFFFFh
.text:0000C849                 mov     ecx, [ebp+arg_0]
.text:0000C84C                 mov     [ecx+40h], eax
.text:0000C84F                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C854 ; ---------------------------------------------------------------------------
.text:0000C854
.text:0000C854 $LN213:                                 ; CODE XREF: _term_out+303Ej
.text:0000C854                                         ; DATA XREF: .text:$LN736o
.text:0000C854                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A cases 30-37
.text:0000C857                 mov     eax, [edx+40h]
.text:0000C85A                 and     eax, 0FFFFFE00h
.text:0000C85F                 mov     ecx, [ebp+arg_0]
.text:0000C862                 mov     [ecx+40h], eax
.text:0000C865                 mov     edx, [ebp+var_1F4]
.text:0000C86B                 mov     eax, [ebp+arg_0]
.text:0000C86E                 mov     ecx, [eax+edx*4+1ACh]
.text:0000C875                 sub     ecx, 1Eh
.text:0000C878                 mov     edx, [ebp+arg_0]
.text:0000C87B                 or      ecx, [edx+40h]
.text:0000C87E                 mov     eax, [ebp+arg_0]
.text:0000C881                 mov     [eax+40h], ecx
.text:0000C884                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C889 ; ---------------------------------------------------------------------------
.text:0000C889
.text:0000C889 $LN212:                                 ; CODE XREF: _term_out+303Ej
.text:0000C889                                         ; DATA XREF: .text:$LN736o
.text:0000C889                 mov     ecx, [ebp+arg_0] ; jumptable 0000C58A cases 90-97
.text:0000C88C                 mov     edx, [ecx+40h]
.text:0000C88F                 and     edx, 0FFFFFE00h
.text:0000C895                 mov     eax, [ebp+arg_0]
.text:0000C898                 mov     [eax+40h], edx
.text:0000C89B                 mov     ecx, [ebp+var_1F4]
.text:0000C8A1                 mov     edx, [ebp+arg_0]
.text:0000C8A4                 mov     eax, [edx+ecx*4+1ACh]
.text:0000C8AB                 sub     eax, 52h ; 'R'
.text:0000C8AE                 mov     ecx, [ebp+arg_0]
.text:0000C8B1                 or      eax, [ecx+40h]
.text:0000C8B4                 mov     edx, [ebp+arg_0]
.text:0000C8B7                 mov     [edx+40h], eax
.text:0000C8BA                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C8BF ; ---------------------------------------------------------------------------
.text:0000C8BF
.text:0000C8BF $LN211:                                 ; CODE XREF: _term_out+303Ej
.text:0000C8BF                                         ; DATA XREF: .text:$LN736o
.text:0000C8BF                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A case 39
.text:0000C8C2                 mov     ecx, [eax+40h]
.text:0000C8C5                 and     ecx, 0FFFFFE00h
.text:0000C8CB                 mov     edx, [ebp+arg_0]
.text:0000C8CE                 mov     [edx+40h], ecx
.text:0000C8D1                 mov     eax, [ebp+arg_0]
.text:0000C8D4                 mov     ecx, [eax+40h]
.text:0000C8D7                 or      ecx, 100h
.text:0000C8DD                 mov     edx, [ebp+arg_0]
.text:0000C8E0                 mov     [edx+40h], ecx
.text:0000C8E3                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C8E8 ; ---------------------------------------------------------------------------
.text:0000C8E8
.text:0000C8E8 $LN210:                                 ; CODE XREF: _term_out+303Ej
.text:0000C8E8                                         ; DATA XREF: .text:$LN736o
.text:0000C8E8                 mov     eax, [ebp+arg_0] ; jumptable 0000C58A cases 40-47
.text:0000C8EB                 mov     ecx, [eax+40h]
.text:0000C8EE                 and     ecx, 0FFFC01FFh
.text:0000C8F4                 mov     edx, [ebp+arg_0]
.text:0000C8F7                 mov     [edx+40h], ecx
.text:0000C8FA                 mov     eax, [ebp+var_1F4]
.text:0000C900                 mov     ecx, [ebp+arg_0]
.text:0000C903                 mov     edx, [ecx+eax*4+1ACh]
.text:0000C90A                 sub     edx, 28h ; '('
.text:0000C90D                 shl     edx, 9
.text:0000C910                 mov     eax, [ebp+arg_0]
.text:0000C913                 or      edx, [eax+40h]
.text:0000C916                 mov     ecx, [ebp+arg_0]
.text:0000C919                 mov     [ecx+40h], edx
.text:0000C91C                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C921 ; ---------------------------------------------------------------------------
.text:0000C921
.text:0000C921 $LN209:                                 ; CODE XREF: _term_out+303Ej
.text:0000C921                                         ; DATA XREF: .text:$LN736o
.text:0000C921                 mov     edx, [ebp+arg_0] ; jumptable 0000C58A cases 100-107
.text:0000C924                 mov     eax, [edx+40h]
.text:0000C927                 and     eax, 0FFFC01FFh
.text:0000C92C                 mov     ecx, [ebp+arg_0]
.text:0000C92F                 mov     [ecx+40h], eax
.text:0000C932                 mov     edx, [ebp+var_1F4]
.text:0000C938                 mov     eax, [ebp+arg_0]
.text:0000C93B                 mov     ecx, [eax+edx*4+1ACh]
.text:0000C942                 sub     ecx, 5Ch ; '\'
.text:0000C945                 shl     ecx, 9
.text:0000C948                 mov     edx, [ebp+arg_0]
.text:0000C94B                 or      ecx, [edx+40h]
.text:0000C94E                 mov     eax, [ebp+arg_0]
.text:0000C951                 mov     [eax+40h], ecx
.text:0000C954                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C959 ; ---------------------------------------------------------------------------
.text:0000C959
.text:0000C959 $LN208:                                 ; CODE XREF: _term_out+303Ej
.text:0000C959                                         ; DATA XREF: .text:$LN736o
.text:0000C959                 mov     ecx, [ebp+arg_0] ; jumptable 0000C58A case 49
.text:0000C95C                 mov     edx, [ecx+40h]
.text:0000C95F                 and     edx, 0FFFC01FFh
.text:0000C965                 mov     eax, [ebp+arg_0]
.text:0000C968                 mov     [eax+40h], edx
.text:0000C96B                 mov     ecx, [ebp+arg_0]
.text:0000C96E                 mov     edx, [ecx+40h]
.text:0000C971                 or      edx, 20400h
.text:0000C977                 mov     eax, [ebp+arg_0]
.text:0000C97A                 mov     [eax+40h], edx
.text:0000C97D                 jmp     $LN243          ; jumptable 0000C58A default case
.text:0000C982 ; ---------------------------------------------------------------------------
.text:0000C982
.text:0000C982 $LN207:                                 ; CODE XREF: _term_out+303Ej
.text:0000C982                                         ; DATA XREF: .text:$LN736o
.text:0000C982                 mov     ecx, [ebp+var_1F4] ; jumptable 0000C58A case 38
.text:0000C988                 add     ecx, 2
.text:0000C98B                 mov     edx, [ebp+arg_0]
.text:0000C98E                 cmp     ecx, [edx+22Ch]
.text:0000C994                 jge     short loc_C9EB
.text:0000C996                 mov     eax, [ebp+var_1F4]
.text:0000C99C                 mov     ecx, [ebp+arg_0]
.text:0000C99F                 cmp     dword ptr [ecx+eax*4+1B0h], 5
.text:0000C9A7                 jnz     short loc_C9EB
.text:0000C9A9                 mov     edx, [ebp+arg_0]
.text:0000C9AC                 mov     eax, [edx+40h]
.text:0000C9AF                 and     eax, 0FFFFFE00h
.text:0000C9B4                 mov     ecx, [ebp+arg_0]
.text:0000C9B7                 mov     [ecx+40h], eax
.text:0000C9BA                 mov     edx, [ebp+var_1F4]
.text:0000C9C0                 mov     eax, [ebp+arg_0]
.text:0000C9C3                 mov     ecx, [eax+edx*4+1B4h]
.text:0000C9CA                 and     ecx, 0FFh
.text:0000C9D0                 mov     edx, [ebp+arg_0]
.text:0000C9D3                 or      ecx, [edx+40h]
.text:0000C9D6                 mov     eax, [ebp+arg_0]
.text:0000C9D9                 mov     [eax+40h], ecx
.text:0000C9DC                 mov     ecx, [ebp+var_1F4]
.text:0000C9E2                 add     ecx, 2
.text:0000C9E5                 mov     [ebp+var_1F4], ecx
.text:0000C9EB
.text:0000C9EB loc_C9EB:                               ; CODE XREF: _term_out+3448j
.text:0000C9EB                                         ; _term_out+345Bj
.text:0000C9EB                 jmp     short $LN243    ; jumptable 0000C58A default case
.text:0000C9ED ; ---------------------------------------------------------------------------
.text:0000C9ED
.text:0000C9ED $LN205:                                 ; CODE XREF: _term_out+303Ej
.text:0000C9ED                                         ; DATA XREF: .text:$LN736o
.text:0000C9ED                 mov     edx, [ebp+var_1F4] ; jumptable 0000C58A case 48
.text:0000C9F3                 add     edx, 2
.text:0000C9F6                 mov     eax, [ebp+arg_0]
.text:0000C9F9                 cmp     edx, [eax+22Ch]
.text:0000C9FF                 jge     short $LN243    ; jumptable 0000C58A default case
.text:0000CA01                 mov     ecx, [ebp+var_1F4]
.text:0000CA07                 mov     edx, [ebp+arg_0]
.text:0000CA0A                 cmp     dword ptr [edx+ecx*4+1B0h], 5
.text:0000CA12                 jnz     short $LN243    ; jumptable 0000C58A default case
.text:0000CA14                 mov     eax, [ebp+arg_0]
.text:0000CA17                 mov     ecx, [eax+40h]
.text:0000CA1A                 and     ecx, 0FFFC01FFh
.text:0000CA20                 mov     edx, [ebp+arg_0]
.text:0000CA23                 mov     [edx+40h], ecx
.text:0000CA26                 mov     eax, [ebp+var_1F4]
.text:0000CA2C                 mov     ecx, [ebp+arg_0]
.text:0000CA2F                 mov     edx, [ecx+eax*4+1B4h]
.text:0000CA36                 and     edx, 0FFh
.text:0000CA3C                 shl     edx, 9
.text:0000CA3F                 mov     eax, [ebp+arg_0]
.text:0000CA42                 or      edx, [eax+40h]
.text:0000CA45                 mov     ecx, [ebp+arg_0]
.text:0000CA48                 mov     [ecx+40h], edx
.text:0000CA4B                 mov     edx, [ebp+var_1F4]
.text:0000CA51                 add     edx, 2
.text:0000CA54                 mov     [ebp+var_1F4], edx
.text:0000CA5A
.text:0000CA5A $LN243:                                 ; CODE XREF: _term_out+302Bj
.text:0000CA5A                                         ; _term_out+303Ej ...
.text:0000CA5A                 jmp     loc_C50B        ; jumptable 0000C58A default case
.text:0000CA5F ; ---------------------------------------------------------------------------
.text:0000CA5F
.text:0000CA5F loc_CA5F:                               ; CODE XREF: _term_out+2FDDj
.text:0000CA5F                 mov     eax, [ebp+arg_0]
.text:0000CA62                 push    eax
.text:0000CA63                 call    _set_erase_char
.text:0000CA68                 add     esp, 4
.text:0000CA6B                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000CA70 ; ---------------------------------------------------------------------------
.text:0000CA70
.text:0000CA70 $LN203:                                 ; CODE XREF: _term_out+21FEj
.text:0000CA70                                         ; DATA XREF: .text:$LN734o
.text:0000CA70                 push    1               ; jumptable 0000B74A case 51
.text:0000CA72                 mov     ecx, [ebp+arg_0]
.text:0000CA75                 push    ecx
.text:0000CA76                 call    _save_cursor
.text:0000CA7B                 add     esp, 8
.text:0000CA7E                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000CA83 ; ---------------------------------------------------------------------------
.text:0000CA83
.text:0000CA83 $LN202:                                 ; CODE XREF: _term_out+21FEj
.text:0000CA83                                         ; DATA XREF: .text:$LN734o
.text:0000CA83                 push    0               ; jumptable 0000B74A case 53
.text:0000CA85                 mov     edx, [ebp+arg_0]
.text:0000CA88                 push    edx
.text:0000CA89                 call    _save_cursor
.text:0000CA8E                 add     esp, 8
.text:0000CA91                 mov     eax, [ebp+arg_0]
.text:0000CA94                 push    eax
.text:0000CA95                 call    _seen_disp_event
.text:0000CA9A                 add     esp, 4
.text:0000CA9D                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000CAA2 ; ---------------------------------------------------------------------------
.text:0000CAA2
.text:0000CAA2 $LN201:                                 ; CODE XREF: _term_out+21FEj
.text:0000CAA2                                         ; DATA XREF: .text:$LN734o
.text:0000CAA2                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 52
.text:0000CAA5                 cmp     dword ptr [ecx+22Ch], 1
.text:0000CAAC                 jg      loc_CB54
.text:0000CAB2                 mov     edx, [ebp+arg_0]
.text:0000CAB5                 cmp     dword ptr [edx+1ACh], 1
.text:0000CABC                 jl      short loc_CACE
.text:0000CABE                 mov     eax, [ebp+arg_0]
.text:0000CAC1                 cmp     dword ptr [eax+1ACh], 18h
.text:0000CAC8                 jl      loc_CB54
.text:0000CACE
.text:0000CACE loc_CACE:                               ; CODE XREF: _term_out+3570j
.text:0000CACE                 mov     ecx, [ebp+arg_0]
.text:0000CAD1                 mov     edx, [ecx]
.text:0000CAD3                 and     edx, 100h
.text:0000CAD9                 jnz     short loc_CAED
.text:0000CADB                 mov     eax, [ebp+arg_0]
.text:0000CADE                 mov     dword ptr [eax+0E44h], 0
.text:0000CAE8                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000CAED ; ---------------------------------------------------------------------------
.text:0000CAED
.text:0000CAED loc_CAED:                               ; CODE XREF: _term_out+358Dj
.text:0000CAED                 mov     ecx, [ebp+arg_0]
.text:0000CAF0                 cmp     dword ptr [ecx+114Ch], 0
.text:0000CAF7                 jnz     short loc_CB43
.text:0000CAF9                 mov     edx, [ebp+arg_0]
.text:0000CAFC                 cmp     dword ptr [edx+1ACh], 0
.text:0000CB03                 jnz     short loc_CB11
.text:0000CB05                 mov     [ebp+var_3C4], 18h
.text:0000CB0F                 jmp     short loc_CB20
.text:0000CB11 ; ---------------------------------------------------------------------------
.text:0000CB11
.text:0000CB11 loc_CB11:                               ; CODE XREF: _term_out+35B7j
.text:0000CB11                 mov     eax, [ebp+arg_0]
.text:0000CB14                 mov     ecx, [eax+1ACh]
.text:0000CB1A                 mov     [ebp+var_3C4], ecx
.text:0000CB20
.text:0000CB20 loc_CB20:                               ; CODE XREF: _term_out+35C3j
.text:0000CB20                 mov     edx, [ebp+var_3C4]
.text:0000CB26                 push    edx
.text:0000CB27                 mov     eax, [ebp+arg_0]
.text:0000CB2A                 mov     ecx, [eax+12Ch]
.text:0000CB30                 push    ecx
.text:0000CB31                 mov     edx, [ebp+arg_0]
.text:0000CB34                 mov     eax, [edx+1088h]
.text:0000CB3A                 push    eax
.text:0000CB3B                 call    _request_resize
.text:0000CB40                 add     esp, 0Ch
.text:0000CB43
.text:0000CB43 loc_CB43:                               ; CODE XREF: _term_out+35ABj
.text:0000CB43                 mov     ecx, [ebp+arg_0]
.text:0000CB46                 push    ecx
.text:0000CB47                 call    _deselect
.text:0000CB4C                 add     esp, 4
.text:0000CB4F                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CB54 ; ---------------------------------------------------------------------------
.text:0000CB54
.text:0000CB54 loc_CB54:                               ; CODE XREF: _term_out+3560j
.text:0000CB54                                         ; _term_out+357Cj
.text:0000CB54                 mov     edx, [ebp+arg_0]
.text:0000CB57                 cmp     dword ptr [edx+22Ch], 1
.text:0000CB5E                 jl      $LN196          ; jumptable 0000CBD3 default case
.text:0000CB64                 mov     eax, [ebp+arg_0]
.text:0000CB67                 cmp     dword ptr [eax+1ACh], 1
.text:0000CB6E                 jl      $LN196          ; jumptable 0000CBD3 default case
.text:0000CB74                 mov     ecx, [ebp+arg_0]
.text:0000CB77                 cmp     dword ptr [ecx+1ACh], 18h
.text:0000CB7E                 jge     $LN196          ; jumptable 0000CBD3 default case
.text:0000CB84                 mov     edx, [ebp+arg_0]
.text:0000CB87                 mov     eax, [edx]
.text:0000CB89                 and     eax, 4000h
.text:0000CB8E                 jnz     short loc_CBA2
.text:0000CB90                 mov     ecx, [ebp+arg_0]
.text:0000CB93                 mov     dword ptr [ecx+0E44h], 0
.text:0000CB9D                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000CBA2 ; ---------------------------------------------------------------------------
.text:0000CBA2
.text:0000CBA2 loc_CBA2:                               ; CODE XREF: _term_out+3642j
.text:0000CBA2                 mov     edx, [ebp+arg_0]
.text:0000CBA5                 mov     eax, [edx+1ACh]
.text:0000CBAB                 mov     [ebp+var_3C8], eax
.text:0000CBB1                 mov     ecx, [ebp+var_3C8]
.text:0000CBB7                 sub     ecx, 1
.text:0000CBBA                 mov     [ebp+var_3C8], ecx
.text:0000CBC0                 cmp     [ebp+var_3C8], 14h ; switch 21 cases
.text:0000CBC7                 ja      $LN196          ; jumptable 0000CBD3 default case
.text:0000CBCD                 mov     edx, [ebp+var_3C8]
.text:0000CBD3                 jmp     ds:$LN737[edx*4] ; switch jump
.text:0000CBDA ; ---------------------------------------------------------------------------
.text:0000CBDA
.text:0000CBDA $LN191:                                 ; CODE XREF: _term_out+3687j
.text:0000CBDA                                         ; DATA XREF: .text:$LN737o
.text:0000CBDA                 push    0               ; jumptable 0000CBD3 case 0
.text:0000CBDC                 mov     eax, [ebp+arg_0]
.text:0000CBDF                 mov     ecx, [eax+1088h]
.text:0000CBE5                 push    ecx
.text:0000CBE6                 call    _set_iconic
.text:0000CBEB                 add     esp, 8
.text:0000CBEE                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CBF3 ; ---------------------------------------------------------------------------
.text:0000CBF3
.text:0000CBF3 $LN190:                                 ; CODE XREF: _term_out+3687j
.text:0000CBF3                                         ; DATA XREF: .text:$LN737o
.text:0000CBF3                 push    1               ; jumptable 0000CBD3 case 1
.text:0000CBF5                 mov     edx, [ebp+arg_0]
.text:0000CBF8                 mov     eax, [edx+1088h]
.text:0000CBFE                 push    eax
.text:0000CBFF                 call    _set_iconic
.text:0000CC04                 add     esp, 8
.text:0000CC07                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CC0C ; ---------------------------------------------------------------------------
.text:0000CC0C
.text:0000CC0C $LN189:                                 ; CODE XREF: _term_out+3687j
.text:0000CC0C                                         ; DATA XREF: .text:$LN737o
.text:0000CC0C                 mov     ecx, [ebp+arg_0] ; jumptable 0000CBD3 case 2
.text:0000CC0F                 cmp     dword ptr [ecx+22Ch], 3
.text:0000CC16                 jl      short loc_CC92
.text:0000CC18                 mov     edx, [ebp+arg_0]
.text:0000CC1B                 cmp     dword ptr [edx+114Ch], 0
.text:0000CC22                 jnz     short loc_CC92
.text:0000CC24                 mov     eax, [ebp+arg_0]
.text:0000CC27                 cmp     dword ptr [eax+1B4h], 0
.text:0000CC2E                 jnz     short loc_CC3C
.text:0000CC30                 mov     [ebp+var_3CC], 0
.text:0000CC3A                 jmp     short loc_CC4B
.text:0000CC3C ; ---------------------------------------------------------------------------
.text:0000CC3C
.text:0000CC3C loc_CC3C:                               ; CODE XREF: _term_out+36E2j
.text:0000CC3C                 mov     ecx, [ebp+arg_0]
.text:0000CC3F                 mov     edx, [ecx+1B4h]
.text:0000CC45                 mov     [ebp+var_3CC], edx
.text:0000CC4B
.text:0000CC4B loc_CC4B:                               ; CODE XREF: _term_out+36EEj
.text:0000CC4B                 mov     eax, [ebp+arg_0]
.text:0000CC4E                 cmp     dword ptr [eax+1B0h], 0
.text:0000CC55                 jnz     short loc_CC63
.text:0000CC57                 mov     [ebp+var_3D0], 0
.text:0000CC61                 jmp     short loc_CC72
.text:0000CC63 ; ---------------------------------------------------------------------------
.text:0000CC63
.text:0000CC63 loc_CC63:                               ; CODE XREF: _term_out+3709j
.text:0000CC63                 mov     ecx, [ebp+arg_0]
.text:0000CC66                 mov     edx, [ecx+1B0h]
.text:0000CC6C                 mov     [ebp+var_3D0], edx
.text:0000CC72
.text:0000CC72 loc_CC72:                               ; CODE XREF: _term_out+3715j
.text:0000CC72                 mov     eax, [ebp+var_3CC]
.text:0000CC78                 push    eax
.text:0000CC79                 mov     ecx, [ebp+var_3D0]
.text:0000CC7F                 push    ecx
.text:0000CC80                 mov     edx, [ebp+arg_0]
.text:0000CC83                 mov     eax, [edx+1088h]
.text:0000CC89                 push    eax
.text:0000CC8A                 call    _move_window
.text:0000CC8F                 add     esp, 0Ch
.text:0000CC92
.text:0000CC92 loc_CC92:                               ; CODE XREF: _term_out+36CAj
.text:0000CC92                                         ; _term_out+36D6j
.text:0000CC92                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CC97 ; ---------------------------------------------------------------------------
.text:0000CC97                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CC9C ; ---------------------------------------------------------------------------
.text:0000CC9C
.text:0000CC9C $LN185:                                 ; CODE XREF: _term_out+3687j
.text:0000CC9C                                         ; DATA XREF: .text:$LN737o
.text:0000CC9C                 push    1               ; jumptable 0000CBD3 case 4
.text:0000CC9E                 mov     ecx, [ebp+arg_0]
.text:0000CCA1                 mov     edx, [ecx+1088h]
.text:0000CCA7                 push    edx
.text:0000CCA8                 call    _set_zorder
.text:0000CCAD                 add     esp, 8
.text:0000CCB0                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CCB5 ; ---------------------------------------------------------------------------
.text:0000CCB5
.text:0000CCB5 $LN184:                                 ; CODE XREF: _term_out+3687j
.text:0000CCB5                                         ; DATA XREF: .text:$LN737o
.text:0000CCB5                 push    0               ; jumptable 0000CBD3 case 5
.text:0000CCB7                 mov     eax, [ebp+arg_0]
.text:0000CCBA                 mov     ecx, [eax+1088h]
.text:0000CCC0                 push    ecx
.text:0000CCC1                 call    _set_zorder
.text:0000CCC6                 add     esp, 8
.text:0000CCC9                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CCCE ; ---------------------------------------------------------------------------
.text:0000CCCE
.text:0000CCCE $LN183:                                 ; CODE XREF: _term_out+3687j
.text:0000CCCE                                         ; DATA XREF: .text:$LN737o
.text:0000CCCE                 mov     edx, [ebp+arg_0] ; jumptable 0000CBD3 case 6
.text:0000CCD1                 mov     eax, [edx+1088h]
.text:0000CCD7                 push    eax
.text:0000CCD8                 call    _refresh_window
.text:0000CCDD                 add     esp, 4
.text:0000CCE0                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CCE5 ; ---------------------------------------------------------------------------
.text:0000CCE5
.text:0000CCE5 $LN182:                                 ; CODE XREF: _term_out+3687j
.text:0000CCE5                                         ; DATA XREF: .text:$LN737o
.text:0000CCE5                 mov     ecx, [ebp+arg_0] ; jumptable 0000CBD3 case 7
.text:0000CCE8                 cmp     dword ptr [ecx+22Ch], 3
.text:0000CCEF                 jl      loc_CD79
.text:0000CCF5                 mov     edx, [ebp+arg_0]
.text:0000CCF8                 cmp     dword ptr [edx+114Ch], 0
.text:0000CCFF                 jnz     short loc_CD79
.text:0000CD01                 mov     eax, [ebp+arg_0]
.text:0000CD04                 cmp     dword ptr [eax+1B0h], 0
.text:0000CD0B                 jnz     short loc_CD1E
.text:0000CD0D                 mov     ecx, [ebp+arg_0]
.text:0000CD10                 mov     edx, [ecx+110Ch]
.text:0000CD16                 mov     [ebp+var_3D4], edx
.text:0000CD1C                 jmp     short loc_CD2D
.text:0000CD1E ; ---------------------------------------------------------------------------
.text:0000CD1E
.text:0000CD1E loc_CD1E:                               ; CODE XREF: _term_out+37BFj
.text:0000CD1E                 mov     eax, [ebp+arg_0]
.text:0000CD21                 mov     ecx, [eax+1B0h]
.text:0000CD27                 mov     [ebp+var_3D4], ecx
.text:0000CD2D
.text:0000CD2D loc_CD2D:                               ; CODE XREF: _term_out+37D0j
.text:0000CD2D                 mov     edx, [ebp+arg_0]
.text:0000CD30                 cmp     dword ptr [edx+1B4h], 0
.text:0000CD37                 jnz     short loc_CD4A
.text:0000CD39                 mov     eax, [ebp+arg_0]
.text:0000CD3C                 mov     ecx, [eax+1110h]
.text:0000CD42                 mov     [ebp+var_3D8], ecx
.text:0000CD48                 jmp     short loc_CD59
.text:0000CD4A ; ---------------------------------------------------------------------------
.text:0000CD4A
.text:0000CD4A loc_CD4A:                               ; CODE XREF: _term_out+37EBj
.text:0000CD4A                 mov     edx, [ebp+arg_0]
.text:0000CD4D                 mov     eax, [edx+1B4h]
.text:0000CD53                 mov     [ebp+var_3D8], eax
.text:0000CD59
.text:0000CD59 loc_CD59:                               ; CODE XREF: _term_out+37FCj
.text:0000CD59                 mov     ecx, [ebp+var_3D4]
.text:0000CD5F                 push    ecx
.text:0000CD60                 mov     edx, [ebp+var_3D8]
.text:0000CD66                 push    edx
.text:0000CD67                 mov     eax, [ebp+arg_0]
.text:0000CD6A                 mov     ecx, [eax+1088h]
.text:0000CD70                 push    ecx
.text:0000CD71                 call    _request_resize
.text:0000CD76                 add     esp, 0Ch
.text:0000CD79
.text:0000CD79 loc_CD79:                               ; CODE XREF: _term_out+37A3j
.text:0000CD79                                         ; _term_out+37B3j
.text:0000CD79                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CD7E ; ---------------------------------------------------------------------------
.text:0000CD7E
.text:0000CD7E $LN179:                                 ; CODE XREF: _term_out+3687j
.text:0000CD7E                                         ; DATA XREF: .text:$LN737o
.text:0000CD7E                 mov     edx, [ebp+arg_0] ; jumptable 0000CBD3 case 8
.text:0000CD81                 cmp     dword ptr [edx+22Ch], 2
.text:0000CD88                 jl      short loc_CDAC
.text:0000CD8A                 mov     eax, [ebp+arg_0]
.text:0000CD8D                 xor     ecx, ecx
.text:0000CD8F                 cmp     dword ptr [eax+1B0h], 0
.text:0000CD96                 setnz   cl
.text:0000CD99                 push    ecx
.text:0000CD9A                 mov     edx, [ebp+arg_0]
.text:0000CD9D                 mov     eax, [edx+1088h]
.text:0000CDA3                 push    eax
.text:0000CDA4                 call    _set_zoomed
.text:0000CDA9                 add     esp, 8
.text:0000CDAC
.text:0000CDAC loc_CDAC:                               ; CODE XREF: _term_out+383Cj
.text:0000CDAC                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CDB1 ; ---------------------------------------------------------------------------
.text:0000CDB1
.text:0000CDB1 $LN177:                                 ; CODE XREF: _term_out+3687j
.text:0000CDB1                                         ; DATA XREF: .text:$LN737o
.text:0000CDB1                 mov     ecx, [ebp+arg_0] ; jumptable 0000CBD3 case 10
.text:0000CDB4                 cmp     dword ptr [ecx+1084h], 0
.text:0000CDBB                 jz      short loc_CE06
.text:0000CDBD                 mov     edx, [ebp+arg_0]
.text:0000CDC0                 mov     eax, [edx+1088h]
.text:0000CDC6                 push    eax
.text:0000CDC7                 call    _is_iconic
.text:0000CDCC                 add     esp, 4
.text:0000CDCF                 test    eax, eax
.text:0000CDD1                 jz      short loc_CDDF
.text:0000CDD3                 mov     [ebp+var_3DC], offset $SG87522 ; "\x1B[2t"
.text:0000CDDD                 jmp     short loc_CDE9
.text:0000CDDF ; ---------------------------------------------------------------------------
.text:0000CDDF
.text:0000CDDF loc_CDDF:                               ; CODE XREF: _term_out+3885j
.text:0000CDDF                 mov     [ebp+var_3DC], offset $SG87523 ; "\x1B[1t"
.text:0000CDE9
.text:0000CDE9 loc_CDE9:                               ; CODE XREF: _term_out+3891j
.text:0000CDE9                 push    0
.text:0000CDEB                 push    4
.text:0000CDED                 mov     ecx, [ebp+var_3DC]
.text:0000CDF3                 push    ecx
.text:0000CDF4                 mov     edx, [ebp+arg_0]
.text:0000CDF7                 mov     eax, [edx+1084h]
.text:0000CDFD                 push    eax
.text:0000CDFE                 call    _ldisc_send
.text:0000CE03                 add     esp, 10h
.text:0000CE06
.text:0000CE06 loc_CE06:                               ; CODE XREF: _term_out+386Fj
.text:0000CE06                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CE0B ; ---------------------------------------------------------------------------
.text:0000CE0B
.text:0000CE0B $LN175:                                 ; CODE XREF: _term_out+3687j
.text:0000CE0B                                         ; DATA XREF: .text:$LN737o
.text:0000CE0B                 mov     ecx, [ebp+arg_0] ; jumptable 0000CBD3 case 12
.text:0000CE0E                 cmp     dword ptr [ecx+1084h], 0
.text:0000CE15                 jz      short loc_CE81
.text:0000CE17                 lea     edx, [ebp+var_208]
.text:0000CE1D                 push    edx
.text:0000CE1E                 lea     eax, [ebp+var_1FC]
.text:0000CE24                 push    eax
.text:0000CE25                 mov     ecx, [ebp+arg_0]
.text:0000CE28                 mov     edx, [ecx+1088h]
.text:0000CE2E                 push    edx
.text:0000CE2F                 call    _get_window_pos
.text:0000CE34                 add     esp, 0Ch
.text:0000CE37                 mov     eax, [ebp+var_208]
.text:0000CE3D                 push    eax
.text:0000CE3E                 mov     ecx, [ebp+var_1FC]
.text:0000CE44                 push    ecx
.text:0000CE45                 push    offset $SG87526 ; "\x1B[3;%d;%dt"
.text:0000CE4A                 lea     edx, [ebp+var_264]
.text:0000CE50                 push    edx             ; Dest
.text:0000CE51                 call    _sprintf
.text:0000CE56                 add     esp, 10h
.text:0000CE59                 mov     [ebp+var_210], eax
.text:0000CE5F                 push    0
.text:0000CE61                 mov     eax, [ebp+var_210]
.text:0000CE67                 push    eax
.text:0000CE68                 lea     ecx, [ebp+var_264]
.text:0000CE6E                 push    ecx
.text:0000CE6F                 mov     edx, [ebp+arg_0]
.text:0000CE72                 mov     eax, [edx+1084h]
.text:0000CE78                 push    eax
.text:0000CE79                 call    _ldisc_send
.text:0000CE7E                 add     esp, 10h
.text:0000CE81
.text:0000CE81 loc_CE81:                               ; CODE XREF: _term_out+38C9j
.text:0000CE81                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CE86 ; ---------------------------------------------------------------------------
.text:0000CE86
.text:0000CE86 $LN173:                                 ; CODE XREF: _term_out+3687j
.text:0000CE86                                         ; DATA XREF: .text:$LN737o
.text:0000CE86                 mov     ecx, [ebp+arg_0] ; jumptable 0000CBD3 case 13
.text:0000CE89                 cmp     dword ptr [ecx+1084h], 0
.text:0000CE90                 jz      short loc_CEFC
.text:0000CE92                 lea     edx, [ebp+var_208]
.text:0000CE98                 push    edx
.text:0000CE99                 lea     eax, [ebp+var_1FC]
.text:0000CE9F                 push    eax
.text:0000CEA0                 mov     ecx, [ebp+arg_0]
.text:0000CEA3                 mov     edx, [ecx+1088h]
.text:0000CEA9                 push    edx
.text:0000CEAA                 call    _get_window_pixels
.text:0000CEAF                 add     esp, 0Ch
.text:0000CEB2                 mov     eax, [ebp+var_1FC]
.text:0000CEB8                 push    eax
.text:0000CEB9                 mov     ecx, [ebp+var_208]
.text:0000CEBF                 push    ecx
.text:0000CEC0                 push    offset $SG87529 ; "\x1B[4;%d;%dt"
.text:0000CEC5                 lea     edx, [ebp+var_264]
.text:0000CECB                 push    edx             ; Dest
.text:0000CECC                 call    _sprintf
.text:0000CED1                 add     esp, 10h
.text:0000CED4                 mov     [ebp+var_210], eax
.text:0000CEDA                 push    0
.text:0000CEDC                 mov     eax, [ebp+var_210]
.text:0000CEE2                 push    eax
.text:0000CEE3                 lea     ecx, [ebp+var_264]
.text:0000CEE9                 push    ecx
.text:0000CEEA                 mov     edx, [ebp+arg_0]
.text:0000CEED                 mov     eax, [edx+1084h]
.text:0000CEF3                 push    eax
.text:0000CEF4                 call    _ldisc_send
.text:0000CEF9                 add     esp, 10h
.text:0000CEFC
.text:0000CEFC loc_CEFC:                               ; CODE XREF: _term_out+3944j
.text:0000CEFC                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CF01 ; ---------------------------------------------------------------------------
.text:0000CF01
.text:0000CF01 $LN171:                                 ; CODE XREF: _term_out+3687j
.text:0000CF01                                         ; DATA XREF: .text:$LN737o
.text:0000CF01                 mov     ecx, [ebp+arg_0] ; jumptable 0000CBD3 case 17
.text:0000CF04                 cmp     dword ptr [ecx+1084h], 0
.text:0000CF0B                 jz      short loc_CF5D
.text:0000CF0D                 mov     edx, [ebp+arg_0]
.text:0000CF10                 mov     eax, [edx+12Ch]
.text:0000CF16                 push    eax
.text:0000CF17                 mov     ecx, [ebp+arg_0]
.text:0000CF1A                 mov     edx, [ecx+128h]
.text:0000CF20                 push    edx
.text:0000CF21                 push    offset $SG87532 ; "\x1B[8;%d;%dt"
.text:0000CF26                 lea     eax, [ebp+var_264]
.text:0000CF2C                 push    eax             ; Dest
.text:0000CF2D                 call    _sprintf
.text:0000CF32                 add     esp, 10h
.text:0000CF35                 mov     [ebp+var_210], eax
.text:0000CF3B                 push    0
.text:0000CF3D                 mov     ecx, [ebp+var_210]
.text:0000CF43                 push    ecx
.text:0000CF44                 lea     edx, [ebp+var_264]
.text:0000CF4A                 push    edx
.text:0000CF4B                 mov     eax, [ebp+arg_0]
.text:0000CF4E                 mov     ecx, [eax+1084h]
.text:0000CF54                 push    ecx
.text:0000CF55                 call    _ldisc_send
.text:0000CF5A                 add     esp, 10h
.text:0000CF5D
.text:0000CF5D loc_CF5D:                               ; CODE XREF: _term_out+39BFj
.text:0000CF5D                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CF62 ; ---------------------------------------------------------------------------
.text:0000CF62                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000CF67 ; ---------------------------------------------------------------------------
.text:0000CF67
.text:0000CF67 $LN168:                                 ; CODE XREF: _term_out+3687j
.text:0000CF67                                         ; DATA XREF: .text:$LN737o
.text:0000CF67                 mov     edx, [ebp+arg_0] ; jumptable 0000CBD3 case 19
.text:0000CF6A                 cmp     dword ptr [edx+1084h], 0
.text:0000CF71                 jz      loc_D028
.text:0000CF77                 mov     eax, [ebp+arg_0]
.text:0000CF7A                 cmp     dword ptr [eax+115Ch], 0
.text:0000CF81                 jz      loc_D028
.text:0000CF87                 mov     ecx, [ebp+arg_0]
.text:0000CF8A                 cmp     dword ptr [ecx+115Ch], 2
.text:0000CF91                 jnz     short loc_CFAF
.text:0000CF93                 push    1
.text:0000CF95                 mov     edx, [ebp+arg_0]
.text:0000CF98                 mov     eax, [edx+1088h]
.text:0000CF9E                 push    eax
.text:0000CF9F                 call    _get_window_title
.text:0000CFA4                 add     esp, 8
.text:0000CFA7                 mov     [ebp+Str], eax
.text:0000CFAD                 jmp     short loc_CFBB
.text:0000CFAF ; ---------------------------------------------------------------------------
.text:0000CFAF
.text:0000CFAF loc_CFAF:                               ; CODE XREF: _term_out+3A45j
.text:0000CFAF                 mov     ecx, _EMPTY_WINDOW_TITLE
.text:0000CFB5                 mov     [ebp+Str], ecx
.text:0000CFBB
.text:0000CFBB loc_CFBB:                               ; CODE XREF: _term_out+3A61j
.text:0000CFBB                 mov     edx, [ebp+Str]
.text:0000CFC1                 push    edx             ; Str
.text:0000CFC2                 call    _strlen
.text:0000CFC7                 add     esp, 4
.text:0000CFCA                 mov     [ebp+var_210], eax
.text:0000CFD0                 push    0
.text:0000CFD2                 push    3
.text:0000CFD4                 push    offset $SG87538 ; "\x1B]L"
.text:0000CFD9                 mov     eax, [ebp+arg_0]
.text:0000CFDC                 mov     ecx, [eax+1084h]
.text:0000CFE2                 push    ecx
.text:0000CFE3                 call    _ldisc_send
.text:0000CFE8                 add     esp, 10h
.text:0000CFEB                 push    0
.text:0000CFED                 mov     edx, [ebp+var_210]
.text:0000CFF3                 push    edx
.text:0000CFF4                 mov     eax, [ebp+Str]
.text:0000CFFA                 push    eax
.text:0000CFFB                 mov     ecx, [ebp+arg_0]
.text:0000CFFE                 mov     edx, [ecx+1084h]
.text:0000D004                 push    edx
.text:0000D005                 call    _ldisc_send
.text:0000D00A                 add     esp, 10h
.text:0000D00D                 push    0
.text:0000D00F                 push    2
.text:0000D011                 push    offset $SG87539
.text:0000D016                 mov     eax, [ebp+arg_0]
.text:0000D019                 mov     ecx, [eax+1084h]
.text:0000D01F                 push    ecx
.text:0000D020                 call    _ldisc_send
.text:0000D025                 add     esp, 10h
.text:0000D028
.text:0000D028 loc_D028:                               ; CODE XREF: _term_out+3A25j
.text:0000D028                                         ; _term_out+3A35j
.text:0000D028                 jmp     $LN196          ; jumptable 0000CBD3 default case
.text:0000D02D ; ---------------------------------------------------------------------------
.text:0000D02D
.text:0000D02D $LN164:                                 ; CODE XREF: _term_out+3687j
.text:0000D02D                                         ; DATA XREF: .text:$LN737o
.text:0000D02D                 mov     edx, [ebp+arg_0] ; jumptable 0000CBD3 case 20
.text:0000D030                 cmp     dword ptr [edx+1084h], 0
.text:0000D037                 jz      $LN196          ; jumptable 0000CBD3 default case
.text:0000D03D                 mov     eax, [ebp+arg_0]
.text:0000D040                 cmp     dword ptr [eax+115Ch], 0
.text:0000D047                 jz      $LN196          ; jumptable 0000CBD3 default case
.text:0000D04D                 mov     ecx, [ebp+arg_0]
.text:0000D050                 cmp     dword ptr [ecx+115Ch], 2
.text:0000D057                 jnz     short loc_D075
.text:0000D059                 push    0
.text:0000D05B                 mov     edx, [ebp+arg_0]
.text:0000D05E                 mov     eax, [edx+1088h]
.text:0000D064                 push    eax
.text:0000D065                 call    _get_window_title
.text:0000D06A                 add     esp, 8
.text:0000D06D                 mov     [ebp+Str], eax
.text:0000D073                 jmp     short loc_D081
.text:0000D075 ; ---------------------------------------------------------------------------
.text:0000D075
.text:0000D075 loc_D075:                               ; CODE XREF: _term_out+3B0Bj
.text:0000D075                 mov     ecx, _EMPTY_WINDOW_TITLE
.text:0000D07B                 mov     [ebp+Str], ecx
.text:0000D081
.text:0000D081 loc_D081:                               ; CODE XREF: _term_out+3B27j
.text:0000D081                 mov     edx, [ebp+Str]
.text:0000D087                 push    edx             ; Str
.text:0000D088                 call    _strlen
.text:0000D08D                 add     esp, 4
.text:0000D090                 mov     [ebp+var_210], eax
.text:0000D096                 push    0
.text:0000D098                 push    3
.text:0000D09A                 push    offset $SG87544
.text:0000D09F                 mov     eax, [ebp+arg_0]
.text:0000D0A2                 mov     ecx, [eax+1084h]
.text:0000D0A8                 push    ecx
.text:0000D0A9                 call    _ldisc_send
.text:0000D0AE                 add     esp, 10h
.text:0000D0B1                 push    0
.text:0000D0B3                 mov     edx, [ebp+var_210]
.text:0000D0B9                 push    edx
.text:0000D0BA                 mov     eax, [ebp+Str]
.text:0000D0C0                 push    eax
.text:0000D0C1                 mov     ecx, [ebp+arg_0]
.text:0000D0C4                 mov     edx, [ecx+1084h]
.text:0000D0CA                 push    edx
.text:0000D0CB                 call    _ldisc_send
.text:0000D0D0                 add     esp, 10h
.text:0000D0D3                 push    0
.text:0000D0D5                 push    2
.text:0000D0D7                 push    offset $SG87545
.text:0000D0DC                 mov     eax, [ebp+arg_0]
.text:0000D0DF                 mov     ecx, [eax+1084h]
.text:0000D0E5                 push    ecx
.text:0000D0E6                 call    _ldisc_send
.text:0000D0EB                 add     esp, 10h
.text:0000D0EE
.text:0000D0EE $LN196:                                 ; CODE XREF: _term_out+3603j
.text:0000D0EE                                         ; _term_out+3612j ...
.text:0000D0EE                 jmp     $LN336          ; jumptable 0000CBD3 default case
.text:0000D0F3 ; ---------------------------------------------------------------------------
.text:0000D0F3
.text:0000D0F3 $LN160:                                 ; CODE XREF: _term_out+21FEj
.text:0000D0F3                                         ; DATA XREF: .text:$LN734o
.text:0000D0F3                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 19
.text:0000D0F6                 mov     eax, [edx]
.text:0000D0F8                 and     eax, 1000h
.text:0000D0FD                 jnz     short loc_D111
.text:0000D0FF                 mov     ecx, [ebp+arg_0]
.text:0000D102                 mov     dword ptr [ecx+0E44h], 0
.text:0000D10C                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D111 ; ---------------------------------------------------------------------------
.text:0000D111
.text:0000D111 loc_D111:                               ; CODE XREF: _term_out+3BB1j
.text:0000D111                 mov     edx, [ebp+arg_0]
.text:0000D114                 cmp     dword ptr [edx+1ACh], 0
.text:0000D11B                 jnz     short loc_D129
.text:0000D11D                 mov     [ebp+var_3E0], 1
.text:0000D127                 jmp     short loc_D138
.text:0000D129 ; ---------------------------------------------------------------------------
.text:0000D129
.text:0000D129 loc_D129:                               ; CODE XREF: _term_out+3BCFj
.text:0000D129                 mov     eax, [ebp+arg_0]
.text:0000D12C                 mov     ecx, [eax+1ACh]
.text:0000D132                 mov     [ebp+var_3E0], ecx
.text:0000D138
.text:0000D138 loc_D138:                               ; CODE XREF: _term_out+3BDBj
.text:0000D138                 push    1
.text:0000D13A                 mov     edx, [ebp+var_3E0]
.text:0000D140                 push    edx
.text:0000D141                 mov     eax, [ebp+arg_0]
.text:0000D144                 mov     ecx, [eax+80h]
.text:0000D14A                 push    ecx
.text:0000D14B                 mov     edx, [ebp+arg_0]
.text:0000D14E                 mov     eax, [edx+7Ch]
.text:0000D151                 push    eax
.text:0000D152                 mov     ecx, [ebp+arg_0]
.text:0000D155                 push    ecx
.text:0000D156                 call    _scroll
.text:0000D15B                 add     esp, 14h
.text:0000D15E                 mov     edx, [ebp+arg_0]
.text:0000D161                 mov     dword ptr [edx+8Ch], 0
.text:0000D16B                 mov     eax, [ebp+arg_0]
.text:0000D16E                 push    eax
.text:0000D16F                 call    _seen_disp_event
.text:0000D174                 add     esp, 4
.text:0000D177                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D17C ; ---------------------------------------------------------------------------
.text:0000D17C
.text:0000D17C $LN158:                                 ; CODE XREF: _term_out+21FEj
.text:0000D17C                                         ; DATA XREF: .text:$LN734o
.text:0000D17C                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 20
.text:0000D17F                 mov     edx, [ecx]
.text:0000D181                 and     edx, 1000h
.text:0000D187                 jnz     short loc_D19B
.text:0000D189                 mov     eax, [ebp+arg_0]
.text:0000D18C                 mov     dword ptr [eax+0E44h], 0
.text:0000D196                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D19B ; ---------------------------------------------------------------------------
.text:0000D19B
.text:0000D19B loc_D19B:                               ; CODE XREF: _term_out+3C3Bj
.text:0000D19B                 mov     ecx, [ebp+arg_0]
.text:0000D19E                 cmp     dword ptr [ecx+1ACh], 0
.text:0000D1A5                 jnz     short loc_D1B3
.text:0000D1A7                 mov     [ebp+var_3E4], 1
.text:0000D1B1                 jmp     short loc_D1C2
.text:0000D1B3 ; ---------------------------------------------------------------------------
.text:0000D1B3
.text:0000D1B3 loc_D1B3:                               ; CODE XREF: _term_out+3C59j
.text:0000D1B3                 mov     edx, [ebp+arg_0]
.text:0000D1B6                 mov     eax, [edx+1ACh]
.text:0000D1BC                 mov     [ebp+var_3E4], eax
.text:0000D1C2
.text:0000D1C2 loc_D1C2:                               ; CODE XREF: _term_out+3C65j
.text:0000D1C2                 push    1
.text:0000D1C4                 mov     ecx, [ebp+var_3E4]
.text:0000D1CA                 neg     ecx
.text:0000D1CC                 push    ecx
.text:0000D1CD                 mov     edx, [ebp+arg_0]
.text:0000D1D0                 mov     eax, [edx+80h]
.text:0000D1D6                 push    eax
.text:0000D1D7                 mov     ecx, [ebp+arg_0]
.text:0000D1DA                 mov     edx, [ecx+7Ch]
.text:0000D1DD                 push    edx
.text:0000D1DE                 mov     eax, [ebp+arg_0]
.text:0000D1E1                 push    eax
.text:0000D1E2                 call    _scroll
.text:0000D1E7                 add     esp, 14h
.text:0000D1EA                 mov     ecx, [ebp+arg_0]
.text:0000D1ED                 mov     dword ptr [ecx+8Ch], 0
.text:0000D1F7                 mov     edx, [ebp+arg_0]
.text:0000D1FA                 push    edx
.text:0000D1FB                 call    _seen_disp_event
.text:0000D200                 add     esp, 4
.text:0000D203                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D208 ; ---------------------------------------------------------------------------
.text:0000D208
.text:0000D208 loc_D208:                               ; CODE XREF: _term_out+227Cj
.text:0000D208                 mov     eax, [ebp+arg_0]
.text:0000D20B                 mov     ecx, [eax]
.text:0000D20D                 and     ecx, 40h
.text:0000D210                 jnz     short loc_D224
.text:0000D212                 mov     edx, [ebp+arg_0]
.text:0000D215                 mov     dword ptr [edx+0E44h], 0
.text:0000D21F                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D224 ; ---------------------------------------------------------------------------
.text:0000D224
.text:0000D224 loc_D224:                               ; CODE XREF: _term_out+3CC4j
.text:0000D224                 mov     eax, [ebp+arg_0]
.text:0000D227                 cmp     dword ptr [eax+22Ch], 1
.text:0000D22E                 jnz     short loc_D2A3
.text:0000D230                 mov     ecx, [ebp+arg_0]
.text:0000D233                 cmp     dword ptr [ecx+1ACh], 0
.text:0000D23A                 jle     short loc_D2A3
.text:0000D23C                 mov     edx, [ebp+arg_0]
.text:0000D23F                 cmp     dword ptr [edx+114Ch], 0
.text:0000D246                 jnz     short loc_D297
.text:0000D248                 mov     eax, [ebp+arg_0]
.text:0000D24B                 cmp     dword ptr [eax+1ACh], 0
.text:0000D252                 jnz     short loc_D265
.text:0000D254                 mov     ecx, [ebp+arg_0]
.text:0000D257                 mov     edx, [ecx+110Ch]
.text:0000D25D                 mov     [ebp+var_3E8], edx
.text:0000D263                 jmp     short loc_D274
.text:0000D265 ; ---------------------------------------------------------------------------
.text:0000D265
.text:0000D265 loc_D265:                               ; CODE XREF: _term_out+3D06j
.text:0000D265                 mov     eax, [ebp+arg_0]
.text:0000D268                 mov     ecx, [eax+1ACh]
.text:0000D26E                 mov     [ebp+var_3E8], ecx
.text:0000D274
.text:0000D274 loc_D274:                               ; CODE XREF: _term_out+3D17j
.text:0000D274                 mov     edx, [ebp+var_3E8]
.text:0000D27A                 push    edx
.text:0000D27B                 mov     eax, [ebp+arg_0]
.text:0000D27E                 mov     ecx, [eax+12Ch]
.text:0000D284                 push    ecx
.text:0000D285                 mov     edx, [ebp+arg_0]
.text:0000D288                 mov     eax, [edx+1088h]
.text:0000D28E                 push    eax
.text:0000D28F                 call    _request_resize
.text:0000D294                 add     esp, 0Ch
.text:0000D297
.text:0000D297 loc_D297:                               ; CODE XREF: _term_out+3CFAj
.text:0000D297                 mov     ecx, [ebp+arg_0]
.text:0000D29A                 push    ecx
.text:0000D29B                 call    _deselect
.text:0000D2A0                 add     esp, 4
.text:0000D2A3
.text:0000D2A3 loc_D2A3:                               ; CODE XREF: _term_out+3CE2j
.text:0000D2A3                                         ; _term_out+3CEEj
.text:0000D2A3                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D2A8 ; ---------------------------------------------------------------------------
.text:0000D2A8
.text:0000D2A8 loc_D2A8:                               ; CODE XREF: _term_out+226Cj
.text:0000D2A8                 mov     edx, [ebp+arg_0]
.text:0000D2AB                 mov     eax, [edx]
.text:0000D2AD                 and     eax, 100h
.text:0000D2B2                 jnz     short loc_D2C6
.text:0000D2B4                 mov     ecx, [ebp+arg_0]
.text:0000D2B7                 mov     dword ptr [ecx+0E44h], 0
.text:0000D2C1                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D2C6 ; ---------------------------------------------------------------------------
.text:0000D2C6
.text:0000D2C6 loc_D2C6:                               ; CODE XREF: _term_out+3D66j
.text:0000D2C6                 mov     edx, [ebp+arg_0]
.text:0000D2C9                 cmp     dword ptr [edx+22Ch], 1
.text:0000D2D0                 jg      short loc_D339
.text:0000D2D2                 mov     eax, [ebp+arg_0]
.text:0000D2D5                 cmp     dword ptr [eax+114Ch], 0
.text:0000D2DC                 jnz     short loc_D32D
.text:0000D2DE                 mov     ecx, [ebp+arg_0]
.text:0000D2E1                 cmp     dword ptr [ecx+1ACh], 0
.text:0000D2E8                 jnz     short loc_D2FB
.text:0000D2EA                 mov     edx, [ebp+arg_0]
.text:0000D2ED                 mov     eax, [edx+1110h]
.text:0000D2F3                 mov     [ebp+var_3EC], eax
.text:0000D2F9                 jmp     short loc_D30A
.text:0000D2FB ; ---------------------------------------------------------------------------
.text:0000D2FB
.text:0000D2FB loc_D2FB:                               ; CODE XREF: _term_out+3D9Cj
.text:0000D2FB                 mov     ecx, [ebp+arg_0]
.text:0000D2FE                 mov     edx, [ecx+1ACh]
.text:0000D304                 mov     [ebp+var_3EC], edx
.text:0000D30A
.text:0000D30A loc_D30A:                               ; CODE XREF: _term_out+3DADj
.text:0000D30A                 mov     eax, [ebp+arg_0]
.text:0000D30D                 mov     ecx, [eax+128h]
.text:0000D313                 push    ecx
.text:0000D314                 mov     edx, [ebp+var_3EC]
.text:0000D31A                 push    edx
.text:0000D31B                 mov     eax, [ebp+arg_0]
.text:0000D31E                 mov     ecx, [eax+1088h]
.text:0000D324                 push    ecx
.text:0000D325                 call    _request_resize
.text:0000D32A                 add     esp, 0Ch
.text:0000D32D
.text:0000D32D loc_D32D:                               ; CODE XREF: _term_out+3D90j
.text:0000D32D                 mov     edx, [ebp+arg_0]
.text:0000D330                 push    edx
.text:0000D331                 call    _deselect
.text:0000D336                 add     esp, 4
.text:0000D339
.text:0000D339 loc_D339:                               ; CODE XREF: _term_out+3D84j
.text:0000D339                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D33E ; ---------------------------------------------------------------------------
.text:0000D33E
.text:0000D33E $LN148:                                 ; CODE XREF: _term_out+21FEj
.text:0000D33E                                         ; DATA XREF: .text:$LN734o
.text:0000D33E                 mov     eax, [ebp+arg_0] ; jumptable 0000B74A case 24
.text:0000D341                 mov     ecx, [eax]
.text:0000D343                 and     ecx, 1
.text:0000D346                 jnz     short loc_D35A
.text:0000D348                 mov     edx, [ebp+arg_0]
.text:0000D34B                 mov     dword ptr [edx+0E44h], 0
.text:0000D355                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D35A ; ---------------------------------------------------------------------------
.text:0000D35A
.text:0000D35A loc_D35A:                               ; CODE XREF: _term_out+3DFAj
.text:0000D35A                 mov     eax, [ebp+arg_0]
.text:0000D35D                 cmp     dword ptr [eax+1ACh], 0
.text:0000D364                 jnz     short loc_D372
.text:0000D366                 mov     [ebp+var_3F0], 1
.text:0000D370                 jmp     short loc_D381
.text:0000D372 ; ---------------------------------------------------------------------------
.text:0000D372
.text:0000D372 loc_D372:                               ; CODE XREF: _term_out+3E18j
.text:0000D372                 mov     ecx, [ebp+arg_0]
.text:0000D375                 mov     edx, [ecx+1ACh]
.text:0000D37B                 mov     [ebp+var_3F0], edx
.text:0000D381
.text:0000D381 loc_D381:                               ; CODE XREF: _term_out+3E24j
.text:0000D381                 mov     eax, [ebp+var_3F0]
.text:0000D387                 mov     [ebp+var_270], eax
.text:0000D38D                 mov     ecx, [ebp+arg_0]
.text:0000D390                 mov     edx, [ecx+70h]
.text:0000D393                 mov     [ebp+var_284], edx
.text:0000D399                 push    1
.text:0000D39B                 push    1014h
.text:0000D3A0                 mov     eax, [ebp+arg_0]
.text:0000D3A3                 mov     ecx, [eax+6Ch]
.text:0000D3A6                 push    ecx
.text:0000D3A7                 mov     edx, [ebp+arg_0]
.text:0000D3AA                 push    edx
.text:0000D3AB                 call    _lineptr
.text:0000D3B0                 add     esp, 10h
.text:0000D3B3                 mov     [ebp+var_288], eax
.text:0000D3B9                 mov     eax, [ebp+arg_0]
.text:0000D3BC                 mov     ecx, [ebp+arg_0]
.text:0000D3BF                 mov     edx, [eax+12Ch]
.text:0000D3C5                 sub     edx, [ecx+70h]
.text:0000D3C8                 cmp     [ebp+var_270], edx
.text:0000D3CE                 jle     short loc_D3E5
.text:0000D3D0                 mov     eax, [ebp+arg_0]
.text:0000D3D3                 mov     ecx, [ebp+arg_0]
.text:0000D3D6                 mov     edx, [eax+12Ch]
.text:0000D3DC                 sub     edx, [ecx+70h]
.text:0000D3DF                 mov     [ebp+var_270], edx
.text:0000D3E5
.text:0000D3E5 loc_D3E5:                               ; CODE XREF: _term_out+3E82j
.text:0000D3E5                 mov     eax, [ebp+arg_0]
.text:0000D3E8                 mov     ecx, [eax+6Ch]
.text:0000D3EB                 mov     edx, [eax+70h]
.text:0000D3EE                 mov     [ebp+var_27C], ecx
.text:0000D3F4                 mov     [ebp+var_278], edx
.text:0000D3FA                 mov     eax, [ebp+var_278]
.text:0000D400                 add     eax, [ebp+var_270]
.text:0000D406                 mov     [ebp+var_278], eax
.text:0000D40C                 mov     ecx, [ebp+arg_0]
.text:0000D40F                 mov     edx, [ecx+6Ch]
.text:0000D412                 push    edx
.text:0000D413                 mov     eax, [ebp+arg_0]
.text:0000D416                 mov     ecx, [eax+70h]
.text:0000D419                 push    ecx
.text:0000D41A                 mov     edx, [ebp+arg_0]
.text:0000D41D                 push    edx
.text:0000D41E                 call    _check_boundary
.text:0000D423                 add     esp, 0Ch
.text:0000D426                 mov     eax, [ebp+arg_0]
.text:0000D429                 mov     ecx, [eax+6Ch]
.text:0000D42C                 push    ecx
.text:0000D42D                 mov     edx, [ebp+arg_0]
.text:0000D430                 mov     eax, [edx+70h]
.text:0000D433                 add     eax, [ebp+var_270]
.text:0000D439                 push    eax
.text:0000D43A                 mov     ecx, [ebp+arg_0]
.text:0000D43D                 push    ecx
.text:0000D43E                 call    _check_boundary
.text:0000D443                 add     esp, 0Ch
.text:0000D446                 mov     edx, [ebp+var_278]
.text:0000D44C                 push    edx
.text:0000D44D                 mov     eax, [ebp+var_27C]
.text:0000D453                 push    eax
.text:0000D454                 mov     ecx, [ebp+arg_0]
.text:0000D457                 mov     edx, [ecx+70h]
.text:0000D45A                 push    edx
.text:0000D45B                 mov     eax, [ecx+6Ch]
.text:0000D45E                 push    eax
.text:0000D45F                 mov     ecx, [ebp+arg_0]
.text:0000D462                 push    ecx
.text:0000D463                 call    _check_selection
.text:0000D468                 add     esp, 14h
.text:0000D46B
.text:0000D46B loc_D46B:                               ; CODE XREF: _term_out+3F7Bj
.text:0000D46B                 mov     edx, [ebp+var_270]
.text:0000D471                 mov     [ebp+var_3F4], edx
.text:0000D477                 mov     eax, [ebp+var_270]
.text:0000D47D                 sub     eax, 1
.text:0000D480                 mov     [ebp+var_270], eax
.text:0000D486                 cmp     [ebp+var_3F4], 0
.text:0000D48D                 jz      short loc_D4C9
.text:0000D48F                 mov     ecx, [ebp+var_284]
.text:0000D495                 mov     [ebp+var_3F8], ecx
.text:0000D49B                 mov     edx, [ebp+var_284]
.text:0000D4A1                 add     edx, 1
.text:0000D4A4                 mov     [ebp+var_284], edx
.text:0000D4AA                 mov     eax, [ebp+arg_0]
.text:0000D4AD                 add     eax, 54h ; 'T'
.text:0000D4B0                 push    eax
.text:0000D4B1                 mov     ecx, [ebp+var_3F8]
.text:0000D4B7                 push    ecx
.text:0000D4B8                 mov     edx, [ebp+var_288]
.text:0000D4BE                 push    edx
.text:0000D4BF                 call    _copy_termchar
.text:0000D4C4                 add     esp, 0Ch
.text:0000D4C7                 jmp     short loc_D46B
.text:0000D4C9 ; ---------------------------------------------------------------------------
.text:0000D4C9
.text:0000D4C9 loc_D4C9:                               ; CODE XREF: _term_out+3F41j
.text:0000D4C9                 mov     eax, [ebp+arg_0]
.text:0000D4CC                 push    eax
.text:0000D4CD                 call    _seen_disp_event
.text:0000D4D2                 add     esp, 4
.text:0000D4D5                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D4DA ; ---------------------------------------------------------------------------
.text:0000D4DA
.text:0000D4DA $LN143:                                 ; CODE XREF: _term_out+21FEj
.text:0000D4DA                                         ; DATA XREF: .text:$LN734o
.text:0000D4DA                 mov     ecx, [ebp+arg_0] ; jumptable 0000B74A case 56
.text:0000D4DD                 mov     edx, [ecx]
.text:0000D4DF                 and     edx, 2
.text:0000D4E2                 jnz     short loc_D4F6
.text:0000D4E4                 mov     eax, [ebp+arg_0]
.text:0000D4E7                 mov     dword ptr [eax+0E44h], 0
.text:0000D4F1                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D4F6 ; ---------------------------------------------------------------------------
.text:0000D4F6
.text:0000D4F6 loc_D4F6:                               ; CODE XREF: _term_out+3F96j
.text:0000D4F6                 mov     ecx, [ebp+arg_0]
.text:0000D4F9                 cmp     dword ptr [ecx+1084h], 0
.text:0000D500                 jz      loc_D58F
.text:0000D506                 mov     edx, [ebp+arg_0]
.text:0000D509                 cmp     dword ptr [edx+1ACh], 0
.text:0000D510                 jnz     short loc_D51E
.text:0000D512                 mov     [ebp+var_3FC], 0
.text:0000D51C                 jmp     short loc_D52D
.text:0000D51E ; ---------------------------------------------------------------------------
.text:0000D51E
.text:0000D51E loc_D51E:                               ; CODE XREF: _term_out+3FC4j
.text:0000D51E                 mov     eax, [ebp+arg_0]
.text:0000D521                 mov     ecx, [eax+1ACh]
.text:0000D527                 mov     [ebp+var_3FC], ecx
.text:0000D52D
.text:0000D52D loc_D52D:                               ; CODE XREF: _term_out+3FD0j
.text:0000D52D                 mov     edx, [ebp+var_3FC]
.text:0000D533                 mov     [ebp+var_2B4], edx
.text:0000D539                 cmp     [ebp+var_2B4], 0
.text:0000D540                 jz      short loc_D54B
.text:0000D542                 cmp     [ebp+var_2B4], 1
.text:0000D549                 jnz     short loc_D58F
.text:0000D54B
.text:0000D54B loc_D54B:                               ; CODE XREF: _term_out+3FF4j
.text:0000D54B                 push    offset $SG87575 ; "\x1B[2;1;1;112;112;1;0x"
.text:0000D550                 lea     eax, [ebp+var_2AC]
.text:0000D556                 push    eax             ; Dest
.text:0000D557                 call    _strcpy
.text:0000D55C                 add     esp, 8
.text:0000D55F                 movsx   ecx, [ebp+var_2AA]
.text:0000D566                 add     ecx, [ebp+var_2B4]
.text:0000D56C                 mov     [ebp+var_2AA], cl
.text:0000D572                 push    0
.text:0000D574                 push    14h
.text:0000D576                 lea     edx, [ebp+var_2AC]
.text:0000D57C                 push    edx
.text:0000D57D                 mov     eax, [ebp+arg_0]
.text:0000D580                 mov     ecx, [eax+1084h]
.text:0000D586                 push    ecx
.text:0000D587                 call    _ldisc_send
.text:0000D58C                 add     esp, 10h
.text:0000D58F
.text:0000D58F loc_D58F:                               ; CODE XREF: _term_out+3FB4j
.text:0000D58F                                         ; _term_out+3FFDj
.text:0000D58F                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D594 ; ---------------------------------------------------------------------------
.text:0000D594
.text:0000D594 $LN138:                                 ; CODE XREF: _term_out+21FEj
.text:0000D594                                         ; DATA XREF: .text:$LN734o
.text:0000D594                 mov     edx, [ebp+arg_0] ; jumptable 0000B74A case 26
.text:0000D597                 mov     eax, [edx]
.text:0000D599                 and     eax, 4000h
.text:0000D59E                 jnz     short loc_D5B2
.text:0000D5A0                 mov     ecx, [ebp+arg_0]
.text:0000D5A3                 mov     dword ptr [ecx+0E44h], 0
.text:0000D5AD                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D5B2 ; ---------------------------------------------------------------------------
.text:0000D5B2
.text:0000D5B2 loc_D5B2:                               ; CODE XREF: _term_out+4052j
.text:0000D5B2                 mov     edx, [ebp+arg_0]
.text:0000D5B5                 cmp     dword ptr [edx+1ACh], 0
.text:0000D5BC                 jnz     short loc_D5CA
.text:0000D5BE                 mov     [ebp+var_400], 1
.text:0000D5C8                 jmp     short loc_D5D9
.text:0000D5CA ; ---------------------------------------------------------------------------
.text:0000D5CA
.text:0000D5CA loc_D5CA:                               ; CODE XREF: _term_out+4070j
.text:0000D5CA                 mov     eax, [ebp+arg_0]
.text:0000D5CD                 mov     ecx, [eax+1ACh]
.text:0000D5D3                 mov     [ebp+var_400], ecx
.text:0000D5D9
.text:0000D5D9 loc_D5D9:                               ; CODE XREF: _term_out+407Cj
.text:0000D5D9                 mov     edx, [ebp+var_400]
.text:0000D5DF                 mov     [ebp+var_2B8], edx
.text:0000D5E5                 mov     eax, [ebp+arg_0]
.text:0000D5E8                 mov     ecx, [eax+6Ch]
.text:0000D5EB                 mov     edx, [eax+70h]
.text:0000D5EE                 mov     [ebp+var_2C4], ecx
.text:0000D5F4                 mov     [ebp+var_2C0], edx
.text:0000D5FA                 jmp     short loc_D60B
.text:0000D5FC ; ---------------------------------------------------------------------------
.text:0000D5FC
.text:0000D5FC loc_D5FC:                               ; CODE XREF: _term_out:loc_D64Cj
.text:0000D5FC                 mov     eax, [ebp+var_2B8]
.text:0000D602                 sub     eax, 1
.text:0000D605                 mov     [ebp+var_2B8], eax
.text:0000D60B
.text:0000D60B loc_D60B:                               ; CODE XREF: _term_out+40AEj
.text:0000D60B                 cmp     [ebp+var_2B8], 0
.text:0000D612                 jle     short loc_D64E
.text:0000D614                 mov     ecx, [ebp+arg_0]
.text:0000D617                 cmp     dword ptr [ecx+70h], 0
.text:0000D61B                 jle     short loc_D64E
.text:0000D61D
.text:0000D61D loc_D61D:                               ; CODE XREF: _term_out+40FEj
.text:0000D61D                 mov     edx, [ebp+arg_0]
.text:0000D620                 mov     eax, [edx+70h]
.text:0000D623                 sub     eax, 1
.text:0000D626                 mov     ecx, [ebp+arg_0]
.text:0000D629                 mov     [ecx+70h], eax
.text:0000D62C                 mov     edx, [ebp+arg_0]
.text:0000D62F                 cmp     dword ptr [edx+70h], 0
.text:0000D633                 jle     short loc_D64C
.text:0000D635                 mov     eax, [ebp+arg_0]
.text:0000D638                 mov     ecx, [eax+0E40h]
.text:0000D63E                 mov     edx, [ebp+arg_0]
.text:0000D641                 mov     eax, [edx+70h]
.text:0000D644                 movzx   ecx, byte ptr [ecx+eax]
.text:0000D648                 test    ecx, ecx
.text:0000D64A                 jz      short loc_D61D
.text:0000D64C
.text:0000D64C loc_D64C:                               ; CODE XREF: _term_out+40E7j
.text:0000D64C                 jmp     short loc_D5FC
.text:0000D64E ; ---------------------------------------------------------------------------
.text:0000D64E
.text:0000D64E loc_D64E:                               ; CODE XREF: _term_out+40C6j
.text:0000D64E                                         ; _term_out+40CFj
.text:0000D64E                 mov     edx, [ebp+arg_0]
.text:0000D651                 mov     eax, [edx+70h]
.text:0000D654                 push    eax
.text:0000D655                 mov     ecx, [edx+6Ch]
.text:0000D658                 push    ecx
.text:0000D659                 mov     edx, [ebp+var_2C0]
.text:0000D65F                 push    edx
.text:0000D660                 mov     eax, [ebp+var_2C4]
.text:0000D666                 push    eax
.text:0000D667                 mov     ecx, [ebp+arg_0]
.text:0000D66A                 push    ecx
.text:0000D66B                 call    _check_selection
.text:0000D670                 add     esp, 14h
.text:0000D673                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D678 ; ---------------------------------------------------------------------------
.text:0000D678
.text:0000D678 loc_D678:                               ; CODE XREF: _term_out+22D8j
.text:0000D678                 mov     edx, [ebp+arg_0]
.text:0000D67B                 mov     eax, [edx]
.text:0000D67D                 and     eax, 1000h
.text:0000D682                 jnz     short loc_D696
.text:0000D684                 mov     ecx, [ebp+arg_0]
.text:0000D687                 mov     dword ptr [ecx+0E44h], 0
.text:0000D691                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D696 ; ---------------------------------------------------------------------------
.text:0000D696
.text:0000D696 loc_D696:                               ; CODE XREF: _term_out+4136j
.text:0000D696                 mov     edx, [ebp+arg_0]
.text:0000D699                 mov     eax, [edx+1ACh]
.text:0000D69F                 mov     [ebp+var_404], eax
.text:0000D6A5                 cmp     [ebp+var_404], 0
.text:0000D6AC                 jz      short loc_D6C2
.text:0000D6AE                 cmp     [ebp+var_404], 1
.text:0000D6B5                 jz      short loc_D6D1
.text:0000D6B7                 cmp     [ebp+var_404], 2
.text:0000D6BE                 jz      short loc_D6ED
.text:0000D6C0                 jmp     short loc_D707
.text:0000D6C2 ; ---------------------------------------------------------------------------
.text:0000D6C2
.text:0000D6C2 loc_D6C2:                               ; CODE XREF: _term_out+4160j
.text:0000D6C2                 mov     ecx, [ebp+arg_0]
.text:0000D6C5                 mov     dword ptr [ecx+0B0h], 0
.text:0000D6CF                 jmp     short loc_D707
.text:0000D6D1 ; ---------------------------------------------------------------------------
.text:0000D6D1
.text:0000D6D1 loc_D6D1:                               ; CODE XREF: _term_out+4169j
.text:0000D6D1                 mov     edx, [ebp+arg_0]
.text:0000D6D4                 mov     dword ptr [edx+158h], 0
.text:0000D6DE                 mov     eax, [ebp+arg_0]
.text:0000D6E1                 mov     dword ptr [eax+0B0h], 1
.text:0000D6EB                 jmp     short loc_D707
.text:0000D6ED ; ---------------------------------------------------------------------------
.text:0000D6ED
.text:0000D6ED loc_D6ED:                               ; CODE XREF: _term_out+4172j
.text:0000D6ED                 mov     ecx, [ebp+arg_0]
.text:0000D6F0                 mov     dword ptr [ecx+158h], 1
.text:0000D6FA                 mov     edx, [ebp+arg_0]
.text:0000D6FD                 mov     dword ptr [edx+0B0h], 1
.text:0000D707
.text:0000D707 loc_D707:                               ; CODE XREF: _term_out+4174j
.text:0000D707                                         ; _term_out+4183j ...
.text:0000D707                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D70C ; ---------------------------------------------------------------------------
.text:0000D70C
.text:0000D70C loc_D70C:                               ; CODE XREF: _term_out+221Bj
.text:0000D70C                 mov     eax, [ebp+arg_0]
.text:0000D70F                 mov     ecx, [eax]
.text:0000D711                 and     ecx, 1000h
.text:0000D717                 jnz     short loc_D72B
.text:0000D719                 mov     edx, [ebp+arg_0]
.text:0000D71C                 mov     dword ptr [edx+0E44h], 0
.text:0000D726                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D72B ; ---------------------------------------------------------------------------
.text:0000D72B
.text:0000D72B loc_D72B:                               ; CODE XREF: _term_out+41CBj
.text:0000D72B                 mov     eax, [ebp+arg_0]
.text:0000D72E                 cmp     dword ptr [eax+22Ch], 2
.text:0000D735                 jl      short loc_D767
.text:0000D737                 mov     ecx, [ebp+arg_0]
.text:0000D73A                 mov     edx, [ebp+arg_0]
.text:0000D73D                 mov     eax, [ecx+1ACh]
.text:0000D743                 cmp     eax, [edx+1B0h]
.text:0000D749                 jle     short loc_D75A
.text:0000D74B                 mov     ecx, [ebp+arg_0]
.text:0000D74E                 mov     dword ptr [ecx+0B0h], 0
.text:0000D758                 jmp     short loc_D767
.text:0000D75A ; ---------------------------------------------------------------------------
.text:0000D75A
.text:0000D75A loc_D75A:                               ; CODE XREF: _term_out+41FDj
.text:0000D75A                 mov     edx, [ebp+arg_0]
.text:0000D75D                 mov     dword ptr [edx+0B0h], 1
.text:0000D767
.text:0000D767 loc_D767:                               ; CODE XREF: _term_out+41E9j
.text:0000D767                                         ; _term_out+420Cj
.text:0000D767                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D76C ; ---------------------------------------------------------------------------
.text:0000D76C
.text:0000D76C $LN117_0:                               ; CODE XREF: _term_out+22C7j
.text:0000D76C                                         ; DATA XREF: .text:$LN735o
.text:0000D76C                 mov     eax, [ebp+arg_0] ; jumptable 0000B813 case 0
.text:0000D76F                 mov     ecx, [eax]
.text:0000D771                 and     ecx, 1000h
.text:0000D777                 jnz     short loc_D78B
.text:0000D779                 mov     edx, [ebp+arg_0]
.text:0000D77C                 mov     dword ptr [edx+0E44h], 0
.text:0000D786                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D78B ; ---------------------------------------------------------------------------
.text:0000D78B
.text:0000D78B loc_D78B:                               ; CODE XREF: _term_out+422Bj
.text:0000D78B                 mov     eax, [ebp+arg_0]
.text:0000D78E                 mov     dword ptr [eax+0C4h], 0
.text:0000D798                 mov     ecx, [ebp+arg_0]
.text:0000D79B                 push    ecx
.text:0000D79C                 call    _term_schedule_tblink
.text:0000D7A1                 add     esp, 4
.text:0000D7A4                 mov     edx, [ebp+arg_0]
.text:0000D7A7                 cmp     dword ptr [edx+1ACh], 1
.text:0000D7AE                 jl      short loc_D7C4
.text:0000D7B0                 mov     eax, [ebp+arg_0]
.text:0000D7B3                 mov     ecx, [eax+40h]
.text:0000D7B6                 or      ecx, 200000h
.text:0000D7BC                 mov     edx, [ebp+arg_0]
.text:0000D7BF                 mov     [edx+40h], ecx
.text:0000D7C2                 jmp     short loc_D7D6
.text:0000D7C4 ; ---------------------------------------------------------------------------
.text:0000D7C4
.text:0000D7C4 loc_D7C4:                               ; CODE XREF: _term_out+4262j
.text:0000D7C4                 mov     eax, [ebp+arg_0]
.text:0000D7C7                 mov     ecx, [eax+40h]
.text:0000D7CA                 and     ecx, 0FFDFFFFFh
.text:0000D7D0                 mov     edx, [ebp+arg_0]
.text:0000D7D3                 mov     [edx+40h], ecx
.text:0000D7D6
.text:0000D7D6 loc_D7D6:                               ; CODE XREF: _term_out+4276j
.text:0000D7D6                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D7DB ; ---------------------------------------------------------------------------
.text:0000D7DB
.text:0000D7DB $LN113:                                 ; CODE XREF: _term_out+22C7j
.text:0000D7DB                                         ; DATA XREF: .text:$LN735o
.text:0000D7DB                 mov     eax, [ebp+arg_0] ; jumptable 0000B813 case 1
.text:0000D7DE                 mov     ecx, [eax]
.text:0000D7E0                 and     ecx, 1000h
.text:0000D7E6                 jnz     short loc_D7FA
.text:0000D7E8                 mov     edx, [ebp+arg_0]
.text:0000D7EB                 mov     dword ptr [edx+0E44h], 0
.text:0000D7F5                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D7FA ; ---------------------------------------------------------------------------
.text:0000D7FA
.text:0000D7FA loc_D7FA:                               ; CODE XREF: _term_out+429Aj
.text:0000D7FA                 mov     eax, [ebp+arg_0]
.text:0000D7FD                 xor     ecx, ecx
.text:0000D7FF                 cmp     dword ptr [eax+1ACh], 1
.text:0000D806                 setnl   cl
.text:0000D809                 mov     edx, [ebp+arg_0]
.text:0000D80C                 mov     [edx+0C4h], ecx
.text:0000D812                 mov     eax, [ebp+arg_0]
.text:0000D815                 push    eax
.text:0000D816                 call    _term_schedule_tblink
.text:0000D81B                 add     esp, 4
.text:0000D81E                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D823 ; ---------------------------------------------------------------------------
.text:0000D823
.text:0000D823 $LN111:                                 ; CODE XREF: _term_out+22C7j
.text:0000D823                                         ; DATA XREF: .text:$LN735o
.text:0000D823                 mov     ecx, [ebp+arg_0] ; jumptable 0000B813 case 2
.text:0000D826                 mov     edx, [ecx]
.text:0000D828                 and     edx, 1000h
.text:0000D82E                 jnz     short loc_D842
.text:0000D830                 mov     eax, [ebp+arg_0]
.text:0000D833                 mov     dword ptr [eax+0E44h], 0
.text:0000D83D                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D842 ; ---------------------------------------------------------------------------
.text:0000D842
.text:0000D842 loc_D842:                               ; CODE XREF: _term_out+42E2j
.text:0000D842                 mov     ecx, [ebp+arg_0]
.text:0000D845                 cmp     dword ptr [ecx+1ACh], 0
.text:0000D84C                 jl      loc_D8D7
.text:0000D852                 mov     edx, [ebp+arg_0]
.text:0000D855                 cmp     dword ptr [edx+1ACh], 10h
.text:0000D85C                 jge     short loc_D8D7
.text:0000D85E                 mov     eax, [ebp+arg_0]
.text:0000D861                 mov     ecx, [eax+1ACh]
.text:0000D867                 and     ecx, 7
.text:0000D86A                 movsx   edx, ds:_sco2ansicolour[ecx]
.text:0000D871                 mov     eax, [ebp+arg_0]
.text:0000D874                 mov     ecx, [eax+1ACh]
.text:0000D87A                 and     ecx, 8
.text:0000D87D                 or      edx, ecx
.text:0000D87F                 mov     [ebp+var_2CC], edx
.text:0000D885                 mov     edx, [ebp+arg_0]
.text:0000D888                 mov     eax, [edx+40h]
.text:0000D88B                 and     eax, 0FFFFFE00h
.text:0000D890                 mov     ecx, [ebp+arg_0]
.text:0000D893                 mov     [ecx+40h], eax
.text:0000D896                 mov     edx, [ebp+arg_0]
.text:0000D899                 mov     eax, [edx+40h]
.text:0000D89C                 or      eax, [ebp+var_2CC]
.text:0000D8A2                 mov     ecx, [ebp+arg_0]
.text:0000D8A5                 mov     [ecx+40h], eax
.text:0000D8A8                 mov     edx, [ebp+arg_0]
.text:0000D8AB                 mov     eax, [edx+3Ch]
.text:0000D8AE                 and     eax, 0FFFFFE00h
.text:0000D8B3                 mov     ecx, [ebp+arg_0]
.text:0000D8B6                 mov     [ecx+3Ch], eax
.text:0000D8B9                 mov     edx, [ebp+arg_0]
.text:0000D8BC                 mov     eax, [edx+3Ch]
.text:0000D8BF                 or      eax, [ebp+var_2CC]
.text:0000D8C5                 mov     ecx, [ebp+arg_0]
.text:0000D8C8                 mov     [ecx+3Ch], eax
.text:0000D8CB                 mov     edx, [ebp+arg_0]
.text:0000D8CE                 push    edx
.text:0000D8CF                 call    _set_erase_char
.text:0000D8D4                 add     esp, 4
.text:0000D8D7
.text:0000D8D7 loc_D8D7:                               ; CODE XREF: _term_out+4300j
.text:0000D8D7                                         ; _term_out+4310j
.text:0000D8D7                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D8DC ; ---------------------------------------------------------------------------
.text:0000D8DC
.text:0000D8DC $LN108:                                 ; CODE XREF: _term_out+22C7j
.text:0000D8DC                                         ; DATA XREF: .text:$LN735o
.text:0000D8DC                 mov     eax, [ebp+arg_0] ; jumptable 0000B813 case 3
.text:0000D8DF                 mov     ecx, [eax]
.text:0000D8E1                 and     ecx, 1000h
.text:0000D8E7                 jnz     short loc_D8FB
.text:0000D8E9                 mov     edx, [ebp+arg_0]
.text:0000D8EC                 mov     dword ptr [edx+0E44h], 0
.text:0000D8F6                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D8FB ; ---------------------------------------------------------------------------
.text:0000D8FB
.text:0000D8FB loc_D8FB:                               ; CODE XREF: _term_out+439Bj
.text:0000D8FB                 mov     eax, [ebp+arg_0]
.text:0000D8FE                 cmp     dword ptr [eax+1ACh], 0
.text:0000D905                 jl      loc_D995
.text:0000D90B                 mov     ecx, [ebp+arg_0]
.text:0000D90E                 cmp     dword ptr [ecx+1ACh], 10h
.text:0000D915                 jge     short loc_D995
.text:0000D917                 mov     edx, [ebp+arg_0]
.text:0000D91A                 mov     eax, [edx+1ACh]
.text:0000D920                 and     eax, 7
.text:0000D923                 movsx   ecx, ds:_sco2ansicolour[eax]
.text:0000D92A                 mov     edx, [ebp+arg_0]
.text:0000D92D                 mov     eax, [edx+1ACh]
.text:0000D933                 and     eax, 8
.text:0000D936                 or      ecx, eax
.text:0000D938                 shl     ecx, 9
.text:0000D93B                 mov     [ebp+var_2D0], ecx
.text:0000D941                 mov     ecx, [ebp+arg_0]
.text:0000D944                 mov     edx, [ecx+40h]
.text:0000D947                 and     edx, 0FFFC01FFh
.text:0000D94D                 mov     eax, [ebp+arg_0]
.text:0000D950                 mov     [eax+40h], edx
.text:0000D953                 mov     ecx, [ebp+arg_0]
.text:0000D956                 mov     edx, [ecx+40h]
.text:0000D959                 or      edx, [ebp+var_2D0]
.text:0000D95F                 mov     eax, [ebp+arg_0]
.text:0000D962                 mov     [eax+40h], edx
.text:0000D965                 mov     ecx, [ebp+arg_0]
.text:0000D968                 mov     edx, [ecx+3Ch]
.text:0000D96B                 and     edx, 0FFFC01FFh
.text:0000D971                 mov     eax, [ebp+arg_0]
.text:0000D974                 mov     [eax+3Ch], edx
.text:0000D977                 mov     ecx, [ebp+arg_0]
.text:0000D97A                 mov     edx, [ecx+3Ch]
.text:0000D97D                 or      edx, [ebp+var_2D0]
.text:0000D983                 mov     eax, [ebp+arg_0]
.text:0000D986                 mov     [eax+3Ch], edx
.text:0000D989                 mov     ecx, [ebp+arg_0]
.text:0000D98C                 push    ecx
.text:0000D98D                 call    _set_erase_char
.text:0000D992                 add     esp, 4
.text:0000D995
.text:0000D995 loc_D995:                               ; CODE XREF: _term_out+43B9j
.text:0000D995                                         ; _term_out+43C9j
.text:0000D995                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D99A ; ---------------------------------------------------------------------------
.text:0000D99A
.text:0000D99A loc_D99A:                               ; CODE XREF: _term_out+229Dj
.text:0000D99A                 mov     edx, [ebp+arg_0]
.text:0000D99D                 mov     eax, [edx]
.text:0000D99F                 and     eax, 1000h
.text:0000D9A4                 jnz     short loc_D9B8
.text:0000D9A6                 mov     ecx, [ebp+arg_0]
.text:0000D9A9                 mov     dword ptr [ecx+0E44h], 0
.text:0000D9B3                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D9B8 ; ---------------------------------------------------------------------------
.text:0000D9B8
.text:0000D9B8 loc_D9B8:                               ; CODE XREF: _term_out+4458j
.text:0000D9B8                 mov     edx, [ebp+arg_0]
.text:0000D9BB                 xor     eax, eax
.text:0000D9BD                 cmp     dword ptr [edx+1ACh], 0
.text:0000D9C4                 setle   al
.text:0000D9C7                 mov     ecx, [ebp+arg_0]
.text:0000D9CA                 mov     [ecx+0B8h], eax
.text:0000D9D0                 mov     edx, [ebp+arg_0]
.text:0000D9D3                 push    edx
.text:0000D9D4                 call    _set_erase_char
.text:0000D9D9                 add     esp, 4
.text:0000D9DC                 jmp     $LN336          ; jumptable 0000B74A default case
.text:0000D9E1 ; ---------------------------------------------------------------------------
.text:0000D9E1
.text:0000D9E1 loc_D9E1:                               ; CODE XREF: _term_out+2237j
.text:0000D9E1                 mov     eax, [ebp+arg_0]
.text:0000D9E4                 mov     ecx, [eax+1ACh]
.text:0000D9EA                 mov     [ebp+var_408], ecx
.text:0000D9F0                 cmp     [ebp+var_408], 3Eh ; '>' ; switch 63 cases
.text:0000D9F7                 ja      short $LN98_0   ; jumptable 0000DA06 default case
.text:0000D9F9                 mov     edx, [ebp+var_408]
.text:0000D9FF                 movzx   eax, ds:$LN709[edx]
.text:0000DA06                 jmp     ds:$LN738[eax*4] ; switch jump
.text:0000DA0D ; ---------------------------------------------------------------------------
.text:0000DA0D
.text:0000DA0D $LN100_0:                               ; CODE XREF: _term_out+44BAj
.text:0000DA0D                                         ; DATA XREF: .text:$LN738o
.text:0000DA0D                 mov     ecx, [ebp+arg_0] ; jumptable 0000DA06 case 61
.text:0000DA10                 mov     edx, [ecx]
.text:0000DA12                 and     edx, 0FFFFFE00h
.text:0000DA18                 mov     eax, [ebp+arg_0]
.text:0000DA1B                 mov     [eax], edx
.text:0000DA1D                 mov     ecx, [ebp+arg_0]
.text:0000DA20                 mov     edx, [ecx]
.text:0000DA22                 or      edx, 0Fh
.text:0000DA25                 mov     eax, [ebp+arg_0]
.text:0000DA28                 mov     [eax], edx
.text:0000DA2A                 jmp     short $LN101_0  ; jumptable 0000DA06 case 50
.text:0000DA2C ; ---------------------------------------------------------------------------
.text:0000DA2C
.text:0000DA2C $LN99_0:                                ; CODE XREF: _term_out+44BAj
.text:0000DA2C                                         ; DATA XREF: .text:$LN738o
.text:0000DA2C                 mov     ecx, [ebp+arg_0] ; jumptable 0000DA06 case 62
.text:0000DA2F                 mov     edx, [ecx]
.text:0000DA31                 and     edx, 0FFFFFE00h
.text:0000DA37                 mov     eax, [ebp+arg_0]
.text:0000DA3A                 mov     [eax], edx
.text:0000DA3C                 mov     ecx, [ebp+arg_0]
.text:0000DA3F                 mov     edx, [ecx]
.text:0000DA41                 or      edx, 1Fh
.text:0000DA44                 mov     eax, [ebp+arg_0]
.text:0000DA47                 mov     [eax], edx
.text:0000DA49                 jmp     short $LN101_0  ; jumptable 0000DA06 case 50
.text:0000DA4B ; ---------------------------------------------------------------------------
.text:0000DA4B
.text:0000DA4B $LN98_0:                                ; CODE XREF: _term_out+44ABj
.text:0000DA4B                                         ; _term_out+44BAj
.text:0000DA4B                                         ; DATA XREF: ...
.text:0000DA4B                 mov     ecx, [ebp+arg_0] ; jumptable 0000DA06 default case
.text:0000DA4E                 cmp     dword ptr [ecx+1ACh], 3Ch ; '<'
.text:0000DA55                 jle     short loc_DA73
.text:0000DA57                 mov     edx, [ebp+arg_0]
.text:0000DA5A                 cmp     dword ptr [edx+1ACh], 46h ; 'F'
.text:0000DA61                 jge     short loc_DA73
.text:0000DA63                 mov     eax, [ebp+arg_0]
.text:0000DA66                 mov     ecx, [eax]
.text:0000DA68                 or      ecx, 1FFh
.text:0000DA6E                 mov     edx, [ebp+arg_0]
.text:0000DA71                 mov     [edx], ecx
.text:0000DA73
.text:0000DA73 loc_DA73:                               ; CODE XREF: _term_out+4509j
.text:0000DA73                                         ; _term_out+4515j
.text:0000DA73                 jmp     short $LN101_0  ; jumptable 0000DA06 case 50
.text:0000DA75 ; ---------------------------------------------------------------------------
.text:0000DA75
.text:0000DA75 $LN96:                                  ; CODE XREF: _term_out+44BAj
.text:0000DA75                                         ; DATA XREF: .text:$LN738o
.text:0000DA75                 mov     eax, [ebp+arg_0] ; jumptable 0000DA06 case 40
.text:0000DA78                 mov     ecx, [eax]
.text:0000DA7A                 and     ecx, 1FFh
.text:0000DA80                 mov     edx, [ebp+arg_0]
.text:0000DA83                 mov     [edx], ecx
.text:0000DA85                 jmp     short $LN101_0  ; jumptable 0000DA06 case 50
.text:0000DA87 ; ---------------------------------------------------------------------------
.text:0000DA87
.text:0000DA87 $LN95:                                  ; CODE XREF: _term_out+44BAj
.text:0000DA87                                         ; DATA XREF: .text:$LN738o
.text:0000DA87                 mov     eax, [ebp+arg_0] ; jumptable 0000DA06 case 41
.text:0000DA8A                 mov     dword ptr [eax], 0FFFFh
.text:0000DA90                 jmp     short $LN101_0  ; jumptable 0000DA06 case 50
.text:0000DA92 ; ---------------------------------------------------------------------------
.text:0000DA92
.text:0000DA92 $LN94:                                  ; CODE XREF: _term_out+44BAj
.text:0000DA92                                         ; DATA XREF: .text:$LN738o
.text:0000DA92                 mov     ecx, [ebp+arg_0] ; jumptable 0000DA06 case 42
.text:0000DA95                 mov     dword ptr [ecx], 1001h
.text:0000DA9B                 jmp     short $LN101_0  ; jumptable 0000DA06 case 50
.text:0000DA9D ; ---------------------------------------------------------------------------
.text:0000DA9D
.text:0000DA9D $LN93:                                  ; CODE XREF: _term_out+44BAj
.text:0000DA9D                                         ; DATA XREF: .text:$LN738o
.text:0000DA9D                 mov     edx, [ebp+arg_0] ; jumptable 0000DA06 case 0
.text:0000DAA0                 mov     dword ptr [edx], 0FFFFh
.text:0000DAA6
.text:0000DAA6 $LN101_0:                               ; CODE XREF: _term_out+44BAj
.text:0000DAA6                                         ; _term_out+44DEj ...
.text:0000DAA6                 mov     eax, [ebp+arg_0] ; jumptable 0000DA06 case 50
.text:0000DAA9                 cmp     dword ptr [eax+1ACh], 32h ; '2'
.text:0000DAB0                 jnz     $LN336          ; jumptable 0000B74A default case
.text:0000DAB6                 push    offset $SG87634 ; "\x1B[?"
.text:0000DABB                 mov     ecx, [ebp+arg_0]
.text:0000DABE                 add     ecx, 0A40h
.text:0000DAC4                 push    ecx             ; Dest
.text:0000DAC5                 call    _strcpy
.text:0000DACA                 add     esp, 8
.text:0000DACD                 mov     [ebp+var_2D4], 1
.text:0000DAD7                 jmp     short loc_DAE8
.text:0000DAD9 ; ---------------------------------------------------------------------------
.text:0000DAD9
.text:0000DAD9 loc_DAD9:                               ; CODE XREF: _term_out+460Bj
.text:0000DAD9                 mov     edx, [ebp+var_2D4]
.text:0000DADF                 add     edx, 1
.text:0000DAE2                 mov     [ebp+var_2D4], edx
.text:0000DAE8
.text:0000DAE8 loc_DAE8:                               ; CODE XREF: _term_out+458Bj
.text:0000DAE8                 mov     eax, [ebp+arg_0]
.text:0000DAEB                 mov     ecx, [ebp+var_2D4]
.text:0000DAF1                 cmp     ecx, [eax+22Ch]
.text:0000DAF7                 jge     short loc_DB59
.text:0000DAF9                 cmp     [ebp+var_2D4], 1
.text:0000DB00                 jz      short loc_DB19
.text:0000DB02                 push    offset $SG87639 ; Source
.text:0000DB07                 mov     edx, [ebp+arg_0]
.text:0000DB0A                 add     edx, 0A40h
.text:0000DB10                 push    edx             ; Dest
.text:0000DB11                 call    _strcat
.text:0000DB16                 add     esp, 8
.text:0000DB19
.text:0000DB19 loc_DB19:                               ; CODE XREF: _term_out+45B4j
.text:0000DB19                 mov     eax, [ebp+var_2D4]
.text:0000DB1F                 mov     ecx, [ebp+arg_0]
.text:0000DB22                 mov     edx, [ecx+eax*4+1ACh]
.text:0000DB29                 push    edx
.text:0000DB2A                 push    offset $SG87640 ; Format
.text:0000DB2F                 lea     eax, [ebp+Source]
.text:0000DB35                 push    eax             ; Dest
.text:0000DB36                 call    _sprintf
.text:0000DB3B                 add     esp, 0Ch
.text:0000DB3E                 lea     ecx, [ebp+Source]
.text:0000DB44                 push    ecx             ; Source
.text:0000DB45                 mov     edx, [ebp+arg_0]
.text:0000DB48                 add     edx, 0A40h
.text:0000DB4E                 push    edx             ; Dest
.text:0000DB4F                 call    _strcat
.text:0000DB54                 add     esp, 8
.text:0000DB57                 jmp     short loc_DAD9
.text:0000DB59 ; ---------------------------------------------------------------------------
.text:0000DB59
.text:0000DB59 loc_DB59:                               ; CODE XREF: _term_out+45ABj
.text:0000DB59                 push    offset $SG87641 ; Source
.text:0000DB5E                 mov     eax, [ebp+arg_0]
.text:0000DB61                 add     eax, 0A40h
.text:0000DB66                 push    eax             ; Dest
.text:0000DB67                 call    _strcat
.text:0000DB6C                 add     esp, 8
.text:0000DB6F
.text:0000DB6F $LN336:                                 ; CODE XREF: _term_out+20FBj
.text:0000DB6F                                         ; _term_out+214Bj ...
.text:0000DB6F                 jmp     $LN526          ; jumptable 0000B74A default case
.text:0000DB74 ; ---------------------------------------------------------------------------
.text:0000DB74
.text:0000DB74 $LN86:                                  ; CODE XREF: _term_out+F47j
.text:0000DB74                                         ; DATA XREF: .text:$LN732o
.text:0000DB74                 mov     ecx, [ebp+arg_0] ; jumptable 0000A493 case 3
.text:0000DB77                 mov     dword ptr [ecx+0A3Ch], 0
.text:0000DB81                 mov     edx, [ebp+C]
.text:0000DB84                 mov     [ebp+var_40C], edx
.text:0000DB8A                 mov     eax, [ebp+var_40C]
.text:0000DB90                 sub     eax, 30h ; '0'
.text:0000DB93                 mov     [ebp+var_40C], eax
.text:0000DB99                 cmp     [ebp+var_40C], 27h ; ''' ; switch 40 cases
.text:0000DBA0                 ja      $LN77           ; jumptable 0000DBB3 default case
.text:0000DBA6                 mov     ecx, [ebp+var_40C]
.text:0000DBAC                 movzx   edx, ds:$LN710[ecx]
.text:0000DBB3                 jmp     ds:$LN739[edx*4] ; switch jump
.text:0000DBBA ; ---------------------------------------------------------------------------
.text:0000DBBA
.text:0000DBBA $LN83:                                  ; CODE XREF: _term_out+4667j
.text:0000DBBA                                         ; DATA XREF: .text:$LN739o
.text:0000DBBA                 mov     eax, [ebp+arg_0] ; jumptable 0000DBB3 case 32
.text:0000DBBD                 mov     dword ptr [eax+0E44h], 6
.text:0000DBC7                 mov     ecx, [ebp+arg_0]
.text:0000DBCA                 mov     dword ptr [ecx+234h], 0
.text:0000DBD4                 jmp     loc_DC75
.text:0000DBD9 ; ---------------------------------------------------------------------------
.text:0000DBD9
.text:0000DBD9 $LN82:                                  ; CODE XREF: _term_out+4667j
.text:0000DBD9                                         ; DATA XREF: .text:$LN739o
.text:0000DBD9                 mov     edx, [ebp+arg_0] ; jumptable 0000DBB3 case 34
.text:0000DBDC                 mov     eax, [edx+1088h]
.text:0000DBE2                 push    eax
.text:0000DBE3                 call    _palette_reset
.text:0000DBE8                 add     esp, 4
.text:0000DBEB                 mov     ecx, [ebp+arg_0]
.text:0000DBEE                 push    ecx
.text:0000DBEF                 call    _term_invalidate
.text:0000DBF4                 add     esp, 4
.text:0000DBF7                 mov     edx, [ebp+arg_0]
.text:0000DBFA                 mov     dword ptr [edx+0E44h], 0
.text:0000DC04                 jmp     short loc_DC75
.text:0000DC06 ; ---------------------------------------------------------------------------
.text:0000DC06
.text:0000DC06 $LN81:                                  ; CODE XREF: _term_out+4667j
.text:0000DC06                                         ; DATA XREF: .text:$LN739o
.text:0000DC06                 mov     eax, [ebp+arg_0] ; jumptable 0000DBB3 case 39
.text:0000DC09                 mov     dword ptr [eax+0E44h], 4
.text:0000DC13                 mov     ecx, [ebp+arg_0]
.text:0000DC16                 mov     dword ptr [ecx+0A3Ch], 1
.text:0000DC20                 jmp     short loc_DC75
.text:0000DC22 ; ---------------------------------------------------------------------------
.text:0000DC22
.text:0000DC22 $LN80:                                  ; CODE XREF: _term_out+4667j
.text:0000DC22                                         ; DATA XREF: .text:$LN739o
.text:0000DC22                 mov     edx, [ebp+arg_0] ; jumptable 0000DBB3 cases 0-9
.text:0000DC25                 mov     eax, [edx+1ACh]
.text:0000DC2B                 imul    eax, 0Ah
.text:0000DC2E                 mov     ecx, [ebp+C]
.text:0000DC31                 lea     edx, [eax+ecx-30h]
.text:0000DC35                 mov     eax, [ebp+arg_0]
.text:0000DC38                 mov     [eax+1ACh], edx
.text:0000DC3E                 jmp     short loc_DC75
.text:0000DC40 ; ---------------------------------------------------------------------------
.text:0000DC40
.text:0000DC40 $LN79:                                  ; CODE XREF: _term_out+4667j
.text:0000DC40                                         ; DATA XREF: .text:$LN739o
.text:0000DC40                 mov     ecx, [ebp+arg_0] ; jumptable 0000DBB3 case 28
.text:0000DC43                 cmp     dword ptr [ecx+1ACh], 2
.text:0000DC4A                 jnz     short $LN77     ; jumptable 0000DBB3 default case
.text:0000DC4C                 mov     edx, [ebp+arg_0]
.text:0000DC4F                 mov     dword ptr [edx+1ACh], 1
.text:0000DC59                 jmp     short loc_DC75
.text:0000DC5B ; ---------------------------------------------------------------------------
.text:0000DC5B
.text:0000DC5B $LN77:                                  ; CODE XREF: _term_out+4654j
.text:0000DC5B                                         ; _term_out+4667j ...
.text:0000DC5B                 mov     eax, [ebp+arg_0] ; jumptable 0000DBB3 default case
.text:0000DC5E                 mov     dword ptr [eax+0E44h], 7
.text:0000DC68                 mov     ecx, [ebp+arg_0]
.text:0000DC6B                 mov     dword ptr [ecx+234h], 0
.text:0000DC75
.text:0000DC75 loc_DC75:                               ; CODE XREF: _term_out+4688j
.text:0000DC75                                         ; _term_out+46B8j ...
.text:0000DC75                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000DC7A ; ---------------------------------------------------------------------------
.text:0000DC7A
.text:0000DC7A $LN76:                                  ; CODE XREF: _term_out+F47j
.text:0000DC7A                                         ; DATA XREF: .text:$LN732o
.text:0000DC7A                 cmp     [ebp+C], 0Ah    ; jumptable 0000A493 case 7
.text:0000DC7E                 jz      short loc_DC86
.text:0000DC80                 cmp     [ebp+C], 0Dh
.text:0000DC84                 jnz     short loc_DC95
.text:0000DC86
.text:0000DC86 loc_DC86:                               ; CODE XREF: _term_out+4732j
.text:0000DC86                 mov     edx, [ebp+arg_0]
.text:0000DC89                 mov     dword ptr [edx+0E44h], 0
.text:0000DC93                 jmp     short loc_DD0E
.text:0000DC95 ; ---------------------------------------------------------------------------
.text:0000DC95
.text:0000DC95 loc_DC95:                               ; CODE XREF: _term_out+4738j
.text:0000DC95                 cmp     [ebp+C], 9Ch ; '£'
.text:0000DC9C                 jz      short loc_DCA4
.text:0000DC9E                 cmp     [ebp+C], 7
.text:0000DCA2                 jnz     short loc_DCBF
.text:0000DCA4
.text:0000DCA4 loc_DCA4:                               ; CODE XREF: _term_out+4750j
.text:0000DCA4                 mov     eax, [ebp+arg_0]
.text:0000DCA7                 push    eax
.text:0000DCA8                 call    _do_osc
.text:0000DCAD                 add     esp, 4
.text:0000DCB0                 mov     ecx, [ebp+arg_0]
.text:0000DCB3                 mov     dword ptr [ecx+0E44h], 0
.text:0000DCBD                 jmp     short loc_DD0E
.text:0000DCBF ; ---------------------------------------------------------------------------
.text:0000DCBF
.text:0000DCBF loc_DCBF:                               ; CODE XREF: _term_out+4756j
.text:0000DCBF                 cmp     [ebp+C], 1Bh
.text:0000DCC3                 jnz     short loc_DCD4
.text:0000DCC5                 mov     edx, [ebp+arg_0]
.text:0000DCC8                 mov     dword ptr [edx+0E44h], 8
.text:0000DCD2                 jmp     short loc_DD0E
.text:0000DCD4 ; ---------------------------------------------------------------------------
.text:0000DCD4
.text:0000DCD4 loc_DCD4:                               ; CODE XREF: _term_out+4777j
.text:0000DCD4                 mov     eax, [ebp+arg_0]
.text:0000DCD7                 cmp     dword ptr [eax+234h], 800h
.text:0000DCE1                 jge     short loc_DD0E
.text:0000DCE3                 mov     ecx, [ebp+arg_0]
.text:0000DCE6                 mov     edx, [ecx+234h]
.text:0000DCEC                 mov     eax, [ebp+arg_0]
.text:0000DCEF                 mov     cl, byte ptr [ebp+C]
.text:0000DCF2                 mov     [eax+edx+238h], cl
.text:0000DCF9                 mov     edx, [ebp+arg_0]
.text:0000DCFC                 mov     eax, [edx+234h]
.text:0000DD02                 add     eax, 1
.text:0000DD05                 mov     ecx, [ebp+arg_0]
.text:0000DD08                 mov     [ecx+234h], eax
.text:0000DD0E
.text:0000DD0E loc_DD0E:                               ; CODE XREF: _term_out+4747j
.text:0000DD0E                                         ; _term_out+4771j ...
.text:0000DD0E                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000DD13 ; ---------------------------------------------------------------------------
.text:0000DD13
.text:0000DD13 $LN66:                                  ; CODE XREF: _term_out+F47j
.text:0000DD13                                         ; DATA XREF: .text:$LN732o
.text:0000DD13                 mov     edx, [ebp+arg_0] ; jumptable 0000A493 case 6
.text:0000DD16                 mov     eax, [edx+234h]
.text:0000DD1C                 neg     eax
.text:0000DD1E                 sbb     eax, eax
.text:0000DD20                 and     eax, 0FFFFFFFAh
.text:0000DD23                 add     eax, 15h
.text:0000DD26                 mov     [ebp+var_320], eax
.text:0000DD2C                 cmp     [ebp+C], 30h ; '0'
.text:0000DD30                 jl      short loc_DD46
.text:0000DD32                 cmp     [ebp+C], 39h ; '9'
.text:0000DD36                 jg      short loc_DD46
.text:0000DD38                 mov     ecx, [ebp+C]
.text:0000DD3B                 sub     ecx, 30h ; '0'
.text:0000DD3E                 mov     [ebp+var_324], ecx
.text:0000DD44                 jmp     short loc_DD9C
.text:0000DD46 ; ---------------------------------------------------------------------------
.text:0000DD46
.text:0000DD46 loc_DD46:                               ; CODE XREF: _term_out+47E4j
.text:0000DD46                                         ; _term_out+47EAj
.text:0000DD46                 cmp     [ebp+C], 41h ; 'A'
.text:0000DD4A                 jl      short loc_DD68
.text:0000DD4C                 mov     edx, [ebp+var_320]
.text:0000DD52                 add     edx, 37h ; '7'
.text:0000DD55                 cmp     [ebp+C], edx
.text:0000DD58                 jg      short loc_DD68
.text:0000DD5A                 mov     eax, [ebp+C]
.text:0000DD5D                 sub     eax, 37h ; '7'
.text:0000DD60                 mov     [ebp+var_324], eax
.text:0000DD66                 jmp     short loc_DD9C
.text:0000DD68 ; ---------------------------------------------------------------------------
.text:0000DD68
.text:0000DD68 loc_DD68:                               ; CODE XREF: _term_out+47FEj
.text:0000DD68                                         ; _term_out+480Cj
.text:0000DD68                 cmp     [ebp+C], 61h ; 'a'
.text:0000DD6C                 jl      short loc_DD8A
.text:0000DD6E                 mov     ecx, [ebp+var_320]
.text:0000DD74                 add     ecx, 57h ; 'W'
.text:0000DD77                 cmp     [ebp+C], ecx
.text:0000DD7A                 jg      short loc_DD8A
.text:0000DD7C                 mov     edx, [ebp+C]
.text:0000DD7F                 sub     edx, 57h ; 'W'
.text:0000DD82                 mov     [ebp+var_324], edx
.text:0000DD88                 jmp     short loc_DD9C
.text:0000DD8A ; ---------------------------------------------------------------------------
.text:0000DD8A
.text:0000DD8A loc_DD8A:                               ; CODE XREF: _term_out+4820j
.text:0000DD8A                                         ; _term_out+482Ej
.text:0000DD8A                 mov     eax, [ebp+arg_0]
.text:0000DD8D                 mov     dword ptr [eax+0E44h], 0
.text:0000DD97                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000DD9C ; ---------------------------------------------------------------------------
.text:0000DD9C
.text:0000DD9C loc_DD9C:                               ; CODE XREF: _term_out+47F8j
.text:0000DD9C                                         ; _term_out+481Aj ...
.text:0000DD9C                 mov     ecx, [ebp+arg_0]
.text:0000DD9F                 mov     edx, [ecx+234h]
.text:0000DDA5                 mov     eax, [ebp+arg_0]
.text:0000DDA8                 mov     cl, byte ptr [ebp+var_324]
.text:0000DDAE                 mov     [eax+edx+238h], cl
.text:0000DDB5                 mov     edx, [ebp+arg_0]
.text:0000DDB8                 mov     eax, [edx+234h]
.text:0000DDBE                 add     eax, 1
.text:0000DDC1                 mov     ecx, [ebp+arg_0]
.text:0000DDC4                 mov     [ecx+234h], eax
.text:0000DDCA                 mov     edx, [ebp+arg_0]
.text:0000DDCD                 cmp     dword ptr [edx+234h], 7
.text:0000DDD4                 jl      loc_DE5E
.text:0000DDDA                 mov     eax, [ebp+arg_0]
.text:0000DDDD                 movsx   ecx, byte ptr [eax+23Dh]
.text:0000DDE4                 shl     ecx, 4
.text:0000DDE7                 mov     edx, [ebp+arg_0]
.text:0000DDEA                 movsx   eax, byte ptr [edx+23Eh]
.text:0000DDF1                 add     ecx, eax
.text:0000DDF3                 push    ecx
.text:0000DDF4                 mov     ecx, [ebp+arg_0]
.text:0000DDF7                 movsx   edx, byte ptr [ecx+23Bh]
.text:0000DDFE                 shl     edx, 4
.text:0000DE01                 mov     eax, [ebp+arg_0]
.text:0000DE04                 movsx   ecx, byte ptr [eax+23Ch]
.text:0000DE0B                 add     edx, ecx
.text:0000DE0D                 push    edx
.text:0000DE0E                 mov     edx, [ebp+arg_0]
.text:0000DE11                 movsx   eax, byte ptr [edx+239h]
.text:0000DE18                 shl     eax, 4
.text:0000DE1B                 mov     ecx, [ebp+arg_0]
.text:0000DE1E                 movsx   edx, byte ptr [ecx+23Ah]
.text:0000DE25                 add     eax, edx
.text:0000DE27                 push    eax
.text:0000DE28                 mov     eax, [ebp+arg_0]
.text:0000DE2B                 movsx   ecx, byte ptr [eax+238h]
.text:0000DE32                 push    ecx
.text:0000DE33                 mov     edx, [ebp+arg_0]
.text:0000DE36                 mov     eax, [edx+1088h]
.text:0000DE3C                 push    eax
.text:0000DE3D                 call    _palette_set
.text:0000DE42                 add     esp, 14h
.text:0000DE45                 mov     ecx, [ebp+arg_0]
.text:0000DE48                 push    ecx
.text:0000DE49                 call    _term_invalidate
.text:0000DE4E                 add     esp, 4
.text:0000DE51                 mov     edx, [ebp+arg_0]
.text:0000DE54                 mov     dword ptr [edx+0E44h], 0
.text:0000DE5E
.text:0000DE5E loc_DE5E:                               ; CODE XREF: _term_out+4888j
.text:0000DE5E                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000DE63 ; ---------------------------------------------------------------------------
.text:0000DE63
.text:0000DE63 $LN58_1:                                ; CODE XREF: _term_out+F47j
.text:0000DE63                                         ; DATA XREF: .text:$LN732o
.text:0000DE63                 mov     eax, [ebp+C]    ; jumptable 0000A493 case 4
.text:0000DE66                 mov     [ebp+var_410], eax
.text:0000DE6C                 cmp     [ebp+var_410], 30h ; '0'
.text:0000DE73                 jb      short loc_DE9E
.text:0000DE75                 cmp     [ebp+var_410], 39h ; '9'
.text:0000DE7C                 jbe     short loc_DE80
.text:0000DE7E                 jmp     short loc_DE9E
.text:0000DE80 ; ---------------------------------------------------------------------------
.text:0000DE80
.text:0000DE80 loc_DE80:                               ; CODE XREF: _term_out+4930j
.text:0000DE80                 mov     ecx, [ebp+arg_0]
.text:0000DE83                 mov     edx, [ecx+1ACh]
.text:0000DE89                 imul    edx, 0Ah
.text:0000DE8C                 mov     eax, [ebp+C]
.text:0000DE8F                 lea     ecx, [edx+eax-30h]
.text:0000DE93                 mov     edx, [ebp+arg_0]
.text:0000DE96                 mov     [edx+1ACh], ecx
.text:0000DE9C                 jmp     short loc_DEB8
.text:0000DE9E ; ---------------------------------------------------------------------------
.text:0000DE9E
.text:0000DE9E loc_DE9E:                               ; CODE XREF: _term_out+4927j
.text:0000DE9E                                         ; _term_out+4932j
.text:0000DE9E                 mov     eax, [ebp+arg_0]
.text:0000DEA1                 mov     dword ptr [eax+0E44h], 7
.text:0000DEAB                 mov     ecx, [ebp+arg_0]
.text:0000DEAE                 mov     dword ptr [ecx+234h], 0
.text:0000DEB8
.text:0000DEB8 loc_DEB8:                               ; CODE XREF: _term_out+4950j
.text:0000DEB8                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000DEBD ; ---------------------------------------------------------------------------
.text:0000DEBD
.text:0000DEBD $LN53:                                  ; CODE XREF: _term_out+F47j
.text:0000DEBD                                         ; DATA XREF: .text:$LN732o
.text:0000DEBD                 mov     edx, [ebp+arg_0] ; jumptable 0000A493 case 9
.text:0000DEC0                 mov     dword ptr [edx+0E44h], 0
.text:0000DECA                 mov     eax, [ebp+arg_0]
.text:0000DECD                 push    eax
.text:0000DECE                 call    _seen_disp_event
.text:0000DED3                 add     esp, 4
.text:0000DED6                 mov     ecx, [ebp+C]
.text:0000DED9                 mov     [ebp+var_414], ecx
.text:0000DEDF                 mov     edx, [ebp+var_414]
.text:0000DEE5                 sub     edx, 3Ch ; '<'
.text:0000DEE8                 mov     [ebp+var_414], edx
.text:0000DEEE                 cmp     [ebp+var_414], 3Bh ; ';' ; switch 60 cases
.text:0000DEF5                 ja      $LN51           ; jumptable 0000DF08 default case
.text:0000DEFB                 mov     eax, [ebp+var_414]
.text:0000DF01                 movzx   ecx, ds:$LN711[eax]
.text:0000DF08                 jmp     ds:$LN740[ecx*4] ; switch jump
.text:0000DF0F ; ---------------------------------------------------------------------------
.text:0000DF0F
.text:0000DF0F $LN50:                                  ; CODE XREF: _term_out+49BCj
.text:0000DF0F                                         ; DATA XREF: .text:$LN740o
.text:0000DF0F                 push    1               ; jumptable 0000DF08 case 5
.text:0000DF11                 mov     edx, [ebp+arg_0]
.text:0000DF14                 mov     eax, [edx+6Ch]
.text:0000DF17                 sub     eax, 1
.text:0000DF1A                 push    eax
.text:0000DF1B                 mov     ecx, [ebp+arg_0]
.text:0000DF1E                 mov     edx, [ecx+70h]
.text:0000DF21                 push    edx
.text:0000DF22                 mov     eax, [ebp+arg_0]
.text:0000DF25                 push    eax
.text:0000DF26                 call    _move
.text:0000DF2B                 add     esp, 10h
.text:0000DF2E                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000DF33 ; ---------------------------------------------------------------------------
.text:0000DF33
.text:0000DF33 $LN49:                                  ; CODE XREF: _term_out+49BCj
.text:0000DF33                                         ; DATA XREF: .text:$LN740o
.text:0000DF33                 push    1               ; jumptable 0000DF08 case 6
.text:0000DF35                 mov     ecx, [ebp+arg_0]
.text:0000DF38                 mov     edx, [ecx+6Ch]
.text:0000DF3B                 add     edx, 1
.text:0000DF3E                 push    edx
.text:0000DF3F                 mov     eax, [ebp+arg_0]
.text:0000DF42                 mov     ecx, [eax+70h]
.text:0000DF45                 push    ecx
.text:0000DF46                 mov     edx, [ebp+arg_0]
.text:0000DF49                 push    edx
.text:0000DF4A                 call    _move
.text:0000DF4F                 add     esp, 10h
.text:0000DF52                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000DF57 ; ---------------------------------------------------------------------------
.text:0000DF57
.text:0000DF57 $LN48:                                  ; CODE XREF: _term_out+49BCj
.text:0000DF57                                         ; DATA XREF: .text:$LN740o
.text:0000DF57                 push    1               ; jumptable 0000DF08 case 7
.text:0000DF59                 mov     eax, [ebp+arg_0]
.text:0000DF5C                 mov     ecx, [eax+6Ch]
.text:0000DF5F                 push    ecx
.text:0000DF60                 mov     edx, [ebp+arg_0]
.text:0000DF63                 mov     eax, [edx+70h]
.text:0000DF66                 add     eax, 1
.text:0000DF69                 push    eax
.text:0000DF6A                 mov     ecx, [ebp+arg_0]
.text:0000DF6D                 push    ecx
.text:0000DF6E                 call    _move
.text:0000DF73                 add     esp, 10h
.text:0000DF76                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000DF7B ; ---------------------------------------------------------------------------
.text:0000DF7B
.text:0000DF7B $LN47:                                  ; CODE XREF: _term_out+49BCj
.text:0000DF7B                                         ; DATA XREF: .text:$LN740o
.text:0000DF7B                 push    1               ; jumptable 0000DF08 case 8
.text:0000DF7D                 mov     edx, [ebp+arg_0]
.text:0000DF80                 mov     eax, [edx+6Ch]
.text:0000DF83                 push    eax
.text:0000DF84                 mov     ecx, [ebp+arg_0]
.text:0000DF87                 mov     edx, [ecx+70h]
.text:0000DF8A                 sub     edx, 1
.text:0000DF8D                 push    edx
.text:0000DF8E                 mov     eax, [ebp+arg_0]
.text:0000DF91                 push    eax
.text:0000DF92                 call    _move
.text:0000DF97                 add     esp, 10h
.text:0000DF9A                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000DF9F ; ---------------------------------------------------------------------------
.text:0000DF9F
.text:0000DF9F $LN46:                                  ; CODE XREF: _term_out+49BCj
.text:0000DF9F                                         ; DATA XREF: .text:$LN740o
.text:0000DF9F                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 10
.text:0000DFA2                 mov     dword ptr [ecx+94h], 0
.text:0000DFAC                 mov     edx, 4
.text:0000DFB1                 imul    edx, 0
.text:0000DFB4                 mov     eax, [ebp+arg_0]
.text:0000DFB7                 mov     dword ptr [eax+edx+170h], 0D900h
.text:0000DFC2                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000DFC7 ; ---------------------------------------------------------------------------
.text:0000DFC7
.text:0000DFC7 $LN45:                                  ; CODE XREF: _term_out+49BCj
.text:0000DFC7                                         ; DATA XREF: .text:$LN740o
.text:0000DFC7                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 11
.text:0000DFCA                 mov     dword ptr [ecx+94h], 0
.text:0000DFD4                 mov     edx, 4
.text:0000DFD9                 imul    edx, 0
.text:0000DFDC                 mov     eax, [ebp+arg_0]
.text:0000DFDF                 mov     dword ptr [eax+edx+170h], 0D800h
.text:0000DFEA                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000DFEF ; ---------------------------------------------------------------------------
.text:0000DFEF
.text:0000DFEF $LN44:                                  ; CODE XREF: _term_out+49BCj
.text:0000DFEF                                         ; DATA XREF: .text:$LN740o
.text:0000DFEF                 push    0               ; jumptable 0000DF08 case 12
.text:0000DFF1                 push    0
.text:0000DFF3                 push    0
.text:0000DFF5                 mov     ecx, [ebp+arg_0]
.text:0000DFF8                 push    ecx
.text:0000DFF9                 call    _move
.text:0000DFFE                 add     esp, 10h
.text:0000E001                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E006 ; ---------------------------------------------------------------------------
.text:0000E006
.text:0000E006 $LN43:                                  ; CODE XREF: _term_out+49BCj
.text:0000E006                                         ; DATA XREF: .text:$LN740o
.text:0000E006                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 13
.text:0000E009                 cmp     dword ptr [edx+6Ch], 0
.text:0000E00D                 jnz     short loc_E030
.text:0000E00F                 push    1
.text:0000E011                 push    0FFFFFFFFh
.text:0000E013                 mov     eax, [ebp+arg_0]
.text:0000E016                 mov     ecx, [eax+128h]
.text:0000E01C                 sub     ecx, 1
.text:0000E01F                 push    ecx
.text:0000E020                 push    0
.text:0000E022                 mov     edx, [ebp+arg_0]
.text:0000E025                 push    edx
.text:0000E026                 call    _scroll
.text:0000E02B                 add     esp, 14h
.text:0000E02E                 jmp     short loc_E048
.text:0000E030 ; ---------------------------------------------------------------------------
.text:0000E030
.text:0000E030 loc_E030:                               ; CODE XREF: _term_out+4AC1j
.text:0000E030                 mov     eax, [ebp+arg_0]
.text:0000E033                 cmp     dword ptr [eax+6Ch], 0
.text:0000E037                 jle     short loc_E048
.text:0000E039                 mov     ecx, [ebp+arg_0]
.text:0000E03C                 mov     edx, [ecx+6Ch]
.text:0000E03F                 sub     edx, 1
.text:0000E042                 mov     eax, [ebp+arg_0]
.text:0000E045                 mov     [eax+6Ch], edx
.text:0000E048
.text:0000E048 loc_E048:                               ; CODE XREF: _term_out+4AE2j
.text:0000E048                                         ; _term_out+4AEBj
.text:0000E048                 mov     ecx, [ebp+arg_0]
.text:0000E04B                 mov     dword ptr [ecx+8Ch], 0
.text:0000E055                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E05A ; ---------------------------------------------------------------------------
.text:0000E05A
.text:0000E05A $LN39:                                  ; CODE XREF: _term_out+49BCj
.text:0000E05A                                         ; DATA XREF: .text:$LN740o
.text:0000E05A                 push    1               ; jumptable 0000DF08 case 14
.text:0000E05C                 push    0
.text:0000E05E                 push    0
.text:0000E060                 mov     edx, [ebp+arg_0]
.text:0000E063                 push    edx
.text:0000E064                 call    _erase_lots
.text:0000E069                 add     esp, 10h
.text:0000E06C                 mov     eax, [ebp+arg_0]
.text:0000E06F                 cmp     dword ptr [eax+1164h], 0
.text:0000E076                 jz      short loc_E082
.text:0000E078                 mov     ecx, [ebp+arg_0]
.text:0000E07B                 mov     dword ptr [ecx+10h], 0
.text:0000E082
.text:0000E082 loc_E082:                               ; CODE XREF: _term_out+4B2Aj
.text:0000E082                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E087 ; ---------------------------------------------------------------------------
.text:0000E087
.text:0000E087 $LN37:                                  ; CODE XREF: _term_out+49BCj
.text:0000E087                                         ; DATA XREF: .text:$LN740o
.text:0000E087                 push    1               ; jumptable 0000DF08 case 15
.text:0000E089                 push    0
.text:0000E08B                 push    1
.text:0000E08D                 mov     edx, [ebp+arg_0]
.text:0000E090                 push    edx
.text:0000E091                 call    _erase_lots
.text:0000E096                 add     esp, 10h
.text:0000E099                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E09E ; ---------------------------------------------------------------------------
.text:0000E09E
.text:0000E09E $LN36:                                  ; CODE XREF: _term_out+49BCj
.text:0000E09E                                         ; DATA XREF: .text:$LN740o
.text:0000E09E                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 29
.text:0000E0A1                 mov     dword ptr [eax+0E44h], 0Ah
.text:0000E0AB                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E0B0 ; ---------------------------------------------------------------------------
.text:0000E0B0
.text:0000E0B0 $LN35:                                  ; CODE XREF: _term_out+49BCj
.text:0000E0B0                                         ; DATA XREF: .text:$LN740o
.text:0000E0B0                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 30
.text:0000E0B3                 cmp     dword ptr [ecx+1084h], 0
.text:0000E0BA                 jz      short loc_E0D7
.text:0000E0BC                 push    0
.text:0000E0BE                 push    3
.text:0000E0C0                 push    offset $SG87710
.text:0000E0C5                 mov     edx, [ebp+arg_0]
.text:0000E0C8                 mov     eax, [edx+1084h]
.text:0000E0CE                 push    eax
.text:0000E0CF                 call    _ldisc_send
.text:0000E0D4                 add     esp, 10h
.text:0000E0D7
.text:0000E0D7 loc_E0D7:                               ; CODE XREF: _term_out+4B6Ej
.text:0000E0D7                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E0DC ; ---------------------------------------------------------------------------
.text:0000E0DC
.text:0000E0DC $LN33:                                  ; CODE XREF: _term_out+49BCj
.text:0000E0DC                                         ; DATA XREF: .text:$LN740o
.text:0000E0DC                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 1
.text:0000E0DF                 mov     dword ptr [ecx+144h], 1
.text:0000E0E9                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E0EE ; ---------------------------------------------------------------------------
.text:0000E0EE
.text:0000E0EE $LN32_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E0EE                                         ; DATA XREF: .text:$LN740o
.text:0000E0EE                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 2
.text:0000E0F1                 mov     dword ptr [edx+144h], 0
.text:0000E0FB                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E100 ; ---------------------------------------------------------------------------
.text:0000E100
.text:0000E100 $LN31_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E100                                         ; DATA XREF: .text:$LN740o
.text:0000E100                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 0
.text:0000E103                 mov     dword ptr [eax+148h], 0
.text:0000E10D                 mov     ecx, [ebp+arg_0]
.text:0000E110                 mov     edx, [ebp+arg_0]
.text:0000E113                 mov     eax, [edx+1104h]
.text:0000E119                 mov     [ecx+0C4h], eax
.text:0000E11F                 mov     ecx, [ebp+arg_0]
.text:0000E122                 push    ecx
.text:0000E123                 call    _term_schedule_tblink
.text:0000E128                 add     esp, 4
.text:0000E12B                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E130 ; ---------------------------------------------------------------------------
.text:0000E130
.text:0000E130 $LN30_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E130                                         ; DATA XREF: .text:$LN740o
.text:0000E130                 push    0               ; jumptable 0000DF08 case 9
.text:0000E132                 push    0
.text:0000E134                 push    0
.text:0000E136                 mov     edx, [ebp+arg_0]
.text:0000E139                 push    edx
.text:0000E13A                 call    _move
.text:0000E13F                 add     esp, 10h
.text:0000E142                 push    1
.text:0000E144                 push    0
.text:0000E146                 push    0
.text:0000E148                 mov     eax, [ebp+arg_0]
.text:0000E14B                 push    eax
.text:0000E14C                 call    _erase_lots
.text:0000E151                 add     esp, 10h
.text:0000E154                 mov     ecx, [ebp+arg_0]
.text:0000E157                 cmp     dword ptr [ecx+1164h], 0
.text:0000E15E                 jz      short loc_E16A
.text:0000E160                 mov     edx, [ebp+arg_0]
.text:0000E163                 mov     dword ptr [edx+10h], 0
.text:0000E16A
.text:0000E16A loc_E16A:                               ; CODE XREF: _term_out+4C12j
.text:0000E16A                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E16F ; ---------------------------------------------------------------------------
.text:0000E16F
.text:0000E16F $LN28_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E16F                                         ; DATA XREF: .text:$LN740o
.text:0000E16F                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 16
.text:0000E172                 mov     ecx, [ebp+arg_0]
.text:0000E175                 mov     edx, [eax+6Ch]
.text:0000E178                 cmp     edx, [ecx+80h]
.text:0000E17E                 jg      short loc_E1A1
.text:0000E180                 push    0
.text:0000E182                 push    0FFFFFFFFh
.text:0000E184                 mov     eax, [ebp+arg_0]
.text:0000E187                 mov     ecx, [eax+80h]
.text:0000E18D                 push    ecx
.text:0000E18E                 mov     edx, [ebp+arg_0]
.text:0000E191                 mov     eax, [edx+6Ch]
.text:0000E194                 push    eax
.text:0000E195                 mov     ecx, [ebp+arg_0]
.text:0000E198                 push    ecx
.text:0000E199                 call    _scroll
.text:0000E19E                 add     esp, 14h
.text:0000E1A1
.text:0000E1A1 loc_E1A1:                               ; CODE XREF: _term_out+4C32j
.text:0000E1A1                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E1A6 ; ---------------------------------------------------------------------------
.text:0000E1A6
.text:0000E1A6 $LN26_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E1A6                                         ; DATA XREF: .text:$LN740o
.text:0000E1A6                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 17
.text:0000E1A9                 mov     eax, [ebp+arg_0]
.text:0000E1AC                 mov     ecx, [edx+6Ch]
.text:0000E1AF                 cmp     ecx, [eax+80h]
.text:0000E1B5                 jg      short loc_E1D8
.text:0000E1B7                 push    1
.text:0000E1B9                 push    1
.text:0000E1BB                 mov     edx, [ebp+arg_0]
.text:0000E1BE                 mov     eax, [edx+80h]
.text:0000E1C4                 push    eax
.text:0000E1C5                 mov     ecx, [ebp+arg_0]
.text:0000E1C8                 mov     edx, [ecx+6Ch]
.text:0000E1CB                 push    edx
.text:0000E1CC                 mov     eax, [ebp+arg_0]
.text:0000E1CF                 push    eax
.text:0000E1D0                 call    _scroll
.text:0000E1D5                 add     esp, 14h
.text:0000E1D8
.text:0000E1D8 loc_E1D8:                               ; CODE XREF: _term_out+4C69j
.text:0000E1D8                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E1DD ; ---------------------------------------------------------------------------
.text:0000E1DD
.text:0000E1DD $LN24_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E1DD                                         ; DATA XREF: .text:$LN740o
.text:0000E1DD                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 38
.text:0000E1E0                 mov     dword ptr [ecx+0E44h], 0Ch
.text:0000E1EA                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E1EF ; ---------------------------------------------------------------------------
.text:0000E1EF
.text:0000E1EF $LN23:                                  ; CODE XREF: _term_out+49BCj
.text:0000E1EF                                         ; DATA XREF: .text:$LN740o
.text:0000E1EF                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 39
.text:0000E1F2                 mov     dword ptr [edx+0E44h], 0Dh
.text:0000E1FC                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E201 ; ---------------------------------------------------------------------------
.text:0000E201
.text:0000E201 $LN22_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E201                                         ; DATA XREF: .text:$LN740o
.text:0000E201                 push    0               ; jumptable 0000DF08 case 40
.text:0000E203                 push    1
.text:0000E205                 push    0
.text:0000E207                 mov     eax, [ebp+arg_0]
.text:0000E20A                 push    eax
.text:0000E20B                 call    _erase_lots
.text:0000E210                 add     esp, 10h
.text:0000E213                 mov     ecx, [ebp+arg_0]
.text:0000E216                 cmp     dword ptr [ecx+1164h], 0
.text:0000E21D                 jz      short loc_E229
.text:0000E21F                 mov     edx, [ebp+arg_0]
.text:0000E222                 mov     dword ptr [edx+10h], 0
.text:0000E229
.text:0000E229 loc_E229:                               ; CODE XREF: _term_out+4CD1j
.text:0000E229                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E22E ; ---------------------------------------------------------------------------
.text:0000E22E
.text:0000E22E $LN20_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E22E                                         ; DATA XREF: .text:$LN740o
.text:0000E22E                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 41
.text:0000E231                 mov     dword ptr [eax+0B0h], 1
.text:0000E23B                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E240 ; ---------------------------------------------------------------------------
.text:0000E240
.text:0000E240 $LN19_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E240                                         ; DATA XREF: .text:$LN740o
.text:0000E240                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 42
.text:0000E243                 mov     dword ptr [ecx+0B0h], 0
.text:0000E24D                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E252 ; ---------------------------------------------------------------------------
.text:0000E252
.text:0000E252 $LN18:                                  ; CODE XREF: _term_out+49BCj
.text:0000E252                                         ; DATA XREF: .text:$LN740o
.text:0000E252                 push    1               ; jumptable 0000DF08 case 48
.text:0000E254                 push    1
.text:0000E256                 push    1
.text:0000E258                 mov     edx, [ebp+arg_0]
.text:0000E25B                 push    edx
.text:0000E25C                 call    _erase_lots
.text:0000E261                 add     esp, 10h
.text:0000E264                 mov     eax, [ebp+arg_0]
.text:0000E267                 mov     dword ptr [eax+70h], 0
.text:0000E26E                 mov     ecx, [ebp+arg_0]
.text:0000E271                 mov     dword ptr [ecx+8Ch], 0
.text:0000E27B                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E280 ; ---------------------------------------------------------------------------
.text:0000E280
.text:0000E280 $LN17:                                  ; CODE XREF: _term_out+49BCj
.text:0000E280                                         ; DATA XREF: .text:$LN740o
.text:0000E280                 push    0               ; jumptable 0000DF08 case 51
.text:0000E282                 push    1
.text:0000E284                 push    1
.text:0000E286                 mov     edx, [ebp+arg_0]
.text:0000E289                 push    edx
.text:0000E28A                 call    _erase_lots
.text:0000E28F                 add     esp, 10h
.text:0000E292                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E297 ; ---------------------------------------------------------------------------
.text:0000E297
.text:0000E297 $LN16_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E297                                         ; DATA XREF: .text:$LN740o
.text:0000E297                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 52
.text:0000E29A                 mov     ecx, [eax+40h]
.text:0000E29D                 or      ecx, 100000h
.text:0000E2A3                 mov     edx, [ebp+arg_0]
.text:0000E2A6                 mov     [edx+40h], ecx
.text:0000E2A9                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E2AE ; ---------------------------------------------------------------------------
.text:0000E2AE
.text:0000E2AE $LN15_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E2AE                                         ; DATA XREF: .text:$LN740o
.text:0000E2AE                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 53
.text:0000E2B1                 mov     ecx, [eax+40h]
.text:0000E2B4                 and     ecx, 0FFEFFFFFh
.text:0000E2BA                 mov     edx, [ebp+arg_0]
.text:0000E2BD                 mov     [edx+40h], ecx
.text:0000E2C0                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E2C5 ; ---------------------------------------------------------------------------
.text:0000E2C5
.text:0000E2C5 $LN14_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E2C5                                         ; DATA XREF: .text:$LN740o
.text:0000E2C5                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 58
.text:0000E2C8                 mov     dword ptr [eax+88h], 1
.text:0000E2D2                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E2D7 ; ---------------------------------------------------------------------------
.text:0000E2D7
.text:0000E2D7 $LN13_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E2D7                                         ; DATA XREF: .text:$LN740o
.text:0000E2D7                 mov     ecx, [ebp+arg_0] ; jumptable 0000DF08 case 59
.text:0000E2DA                 mov     dword ptr [ecx+88h], 0
.text:0000E2E4                 jmp     $LN51           ; jumptable 0000DF08 default case
.text:0000E2E9 ; ---------------------------------------------------------------------------
.text:0000E2E9
.text:0000E2E9 $LN12_0:                                ; CODE XREF: _term_out+49BCj
.text:0000E2E9                                         ; DATA XREF: .text:$LN740o
.text:0000E2E9                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 22
.text:0000E2EC                 mov     dword ptr [edx+0D8h], 0
.text:0000E2F6                 mov     eax, [ebp+arg_0]
.text:0000E2F9                 mov     dword ptr [eax+40h], 20500h
.text:0000E300                 mov     ecx, [ebp+arg_0]
.text:0000E303                 push    ecx
.text:0000E304                 call    _set_erase_char
.text:0000E309                 add     esp, 4
.text:0000E30C                 jmp     short $LN51     ; jumptable 0000DF08 default case
.text:0000E30E ; ---------------------------------------------------------------------------
.text:0000E30E
.text:0000E30E $LN11_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E30E                                         ; DATA XREF: .text:$LN740o
.text:0000E30E                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 23
.text:0000E311                 mov     eax, [edx+40h]
.text:0000E314                 or      eax, 80000h
.text:0000E319                 mov     ecx, [ebp+arg_0]
.text:0000E31C                 mov     [ecx+40h], eax
.text:0000E31F                 jmp     short $LN51     ; jumptable 0000DF08 default case
.text:0000E321 ; ---------------------------------------------------------------------------
.text:0000E321
.text:0000E321 $LN10_1:                                ; CODE XREF: _term_out+49BCj
.text:0000E321                                         ; DATA XREF: .text:$LN740o
.text:0000E321                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 27
.text:0000E324                 mov     eax, [edx+40h]
.text:0000E327                 and     eax, 0FFF7FFFFh
.text:0000E32C                 mov     ecx, [ebp+arg_0]
.text:0000E32F                 mov     [ecx+40h], eax
.text:0000E332                 jmp     short $LN51     ; jumptable 0000DF08 default case
.text:0000E334 ; ---------------------------------------------------------------------------
.text:0000E334
.text:0000E334 $LN9_6:                                 ; CODE XREF: _term_out+49BCj
.text:0000E334                                         ; DATA XREF: .text:$LN740o
.text:0000E334                 mov     edx, [ebp+arg_0] ; jumptable 0000DF08 case 25
.text:0000E337                 mov     dword ptr [edx+0D8h], 1
.text:0000E341                 mov     eax, [ebp+arg_0]
.text:0000E344                 mov     ecx, [eax+40h]
.text:0000E347                 or      ecx, 40000h
.text:0000E34D                 mov     edx, [ebp+arg_0]
.text:0000E350                 mov     [edx+40h], ecx
.text:0000E353                 jmp     short $LN51     ; jumptable 0000DF08 default case
.text:0000E355 ; ---------------------------------------------------------------------------
.text:0000E355
.text:0000E355 $LN8_4:                                 ; CODE XREF: _term_out+49BCj
.text:0000E355                                         ; DATA XREF: .text:$LN740o
.text:0000E355                 mov     eax, [ebp+arg_0] ; jumptable 0000DF08 case 24
.text:0000E358                 mov     dword ptr [eax+0D8h], 0
.text:0000E362                 mov     ecx, [ebp+arg_0]
.text:0000E365                 mov     edx, [ecx+40h]
.text:0000E368                 and     edx, 0FFFBFFFFh
.text:0000E36E                 mov     eax, [ebp+arg_0]
.text:0000E371                 mov     [eax+40h], edx
.text:0000E374
.text:0000E374 $LN51:                                  ; CODE XREF: _term_out+49A9j
.text:0000E374                                         ; _term_out+49BCj ...
.text:0000E374                 jmp     $LN526          ; jumptable 0000DF08 default case
.text:0000E379 ; ---------------------------------------------------------------------------
.text:0000E379
.text:0000E379 $LN7_4:                                 ; CODE XREF: _term_out+F47j
.text:0000E379                                         ; DATA XREF: .text:$LN732o
.text:0000E379                 mov     ecx, [ebp+arg_0] ; jumptable 0000A493 case 10
.text:0000E37C                 mov     dword ptr [ecx+0E44h], 0Bh
.text:0000E386                 push    0
.text:0000E388                 mov     edx, [ebp+C]
.text:0000E38B                 sub     edx, 20h ; ' '
.text:0000E38E                 push    edx
.text:0000E38F                 mov     eax, [ebp+arg_0]
.text:0000E392                 mov     ecx, [eax+70h]
.text:0000E395                 push    ecx
.text:0000E396                 mov     edx, [ebp+arg_0]
.text:0000E399                 push    edx
.text:0000E39A                 call    _move
.text:0000E39F                 add     esp, 10h
.text:0000E3A2                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000E3A7 ; ---------------------------------------------------------------------------
.text:0000E3A7
.text:0000E3A7 $LN6_3:                                 ; CODE XREF: _term_out+F47j
.text:0000E3A7                                         ; DATA XREF: .text:$LN732o
.text:0000E3A7                 mov     eax, [ebp+arg_0] ; jumptable 0000A493 case 11
.text:0000E3AA                 mov     dword ptr [eax+0E44h], 0
.text:0000E3B4                 push    0
.text:0000E3B6                 mov     ecx, [ebp+arg_0]
.text:0000E3B9                 mov     edx, [ecx+6Ch]
.text:0000E3BC                 push    edx
.text:0000E3BD                 mov     eax, [ebp+C]
.text:0000E3C0                 sub     eax, 20h ; ' '
.text:0000E3C3                 push    eax
.text:0000E3C4                 mov     ecx, [ebp+arg_0]
.text:0000E3C7                 push    ecx
.text:0000E3C8                 call    _move
.text:0000E3CD                 add     esp, 10h
.text:0000E3D0                 jmp     $LN526          ; jumptable 0000A493 default case
.text:0000E3D5 ; ---------------------------------------------------------------------------
.text:0000E3D5
.text:0000E3D5 $LN5_0:                                 ; CODE XREF: _term_out+F47j
.text:0000E3D5                                         ; DATA XREF: .text:$LN732o
.text:0000E3D5                 mov     edx, [ebp+arg_0] ; jumptable 0000A493 case 12
.text:0000E3D8                 mov     dword ptr [edx+0E44h], 0
.text:0000E3E2                 mov     eax, [ebp+arg_0]
.text:0000E3E5                 mov     ecx, [eax+40h]
.text:0000E3E8                 and     ecx, 0FFFFFE00h
.text:0000E3EE                 mov     edx, [ebp+arg_0]
.text:0000E3F1                 mov     [edx+40h], ecx
.text:0000E3F4                 mov     eax, [ebp+arg_0]
.text:0000E3F7                 mov     ecx, [eax+40h]
.text:0000E3FA                 and     ecx, 0FFFBFFFFh
.text:0000E400                 mov     edx, [ebp+arg_0]
.text:0000E403                 mov     [edx+40h], ecx
.text:0000E406                 mov     eax, [ebp+C]
.text:0000E409                 and     eax, 0Fh
.text:0000E40C                 mov     ecx, [ebp+arg_0]
.text:0000E40F                 or      eax, [ecx+40h]
.text:0000E412                 mov     edx, [ebp+arg_0]
.text:0000E415                 mov     [edx+40h], eax
.text:0000E418                 mov     eax, [ebp+arg_0]
.text:0000E41B                 push    eax
.text:0000E41C                 call    _set_erase_char
.text:0000E421                 add     esp, 4
.text:0000E424                 jmp     short $LN526    ; jumptable 0000A493 default case
.text:0000E426 ; ---------------------------------------------------------------------------
.text:0000E426
.text:0000E426 $LN4_0:                                 ; CODE XREF: _term_out+F47j
.text:0000E426                                         ; DATA XREF: .text:$LN732o
.text:0000E426                 mov     ecx, [ebp+arg_0] ; jumptable 0000A493 case 13
.text:0000E429                 mov     dword ptr [ecx+0E44h], 0
.text:0000E433                 mov     edx, [ebp+arg_0]
.text:0000E436                 mov     eax, [edx+40h]
.text:0000E439                 and     eax, 0FFFC01FFh
.text:0000E43E                 mov     ecx, [ebp+arg_0]
.text:0000E441                 mov     [ecx+40h], eax
.text:0000E444                 mov     edx, [ebp+arg_0]
.text:0000E447                 mov     eax, [edx+40h]
.text:0000E44A                 and     eax, 0FFDFFFFFh
.text:0000E44F                 mov     ecx, [ebp+arg_0]
.text:0000E452                 mov     [ecx+40h], eax
.text:0000E455                 mov     edx, [ebp+C]
.text:0000E458                 and     edx, 0Fh
.text:0000E45B                 shl     edx, 9
.text:0000E45E                 mov     eax, [ebp+arg_0]
.text:0000E461                 or      edx, [eax+40h]
.text:0000E464                 mov     ecx, [ebp+arg_0]
.text:0000E467                 mov     [ecx+40h], edx
.text:0000E46A                 mov     edx, [ebp+arg_0]
.text:0000E46D                 push    edx
.text:0000E46E                 call    _set_erase_char
.text:0000E473                 add     esp, 4
.text:0000E476
.text:0000E476 $LN526:                                 ; CODE XREF: _term_out:loc_9DCCj
.text:0000E476                                         ; _term_out:$LN523j ...
.text:0000E476                 mov     eax, [ebp+arg_0] ; jumptable 0000A493 default case
.text:0000E479                 cmp     dword ptr [eax+0E48h], 0
.text:0000E480                 jz      loc_E50F
.text:0000E486                 mov     ecx, [ebp+arg_0]
.text:0000E489                 mov     edx, [ecx+6Ch]
.text:0000E48C                 mov     eax, [ecx+70h]
.text:0000E48F                 mov     [ebp+var_330], edx
.text:0000E495                 mov     [ebp+var_32C], eax
.text:0000E49B                 mov     ecx, [ebp+arg_0]
.text:0000E49E                 mov     edx, [ebp+var_32C]
.text:0000E4A4                 cmp     edx, [ecx+12Ch]
.text:0000E4AA                 jnz     short loc_E4D1
.text:0000E4AC                 mov     [ebp+var_32C], 0
.text:0000E4B6                 mov     eax, [ebp+var_330]
.text:0000E4BC                 add     eax, 1
.text:0000E4BF                 mov     [ebp+var_330], eax
.text:0000E4C5                 mov     [ebp+var_418], 1
.text:0000E4CF                 jmp     short loc_E4EA
.text:0000E4D1 ; ---------------------------------------------------------------------------
.text:0000E4D1
.text:0000E4D1 loc_E4D1:                               ; CODE XREF: _term_out+4F5Ej
.text:0000E4D1                 mov     ecx, [ebp+var_32C]
.text:0000E4D7                 add     ecx, 1
.text:0000E4DA                 mov     [ebp+var_32C], ecx
.text:0000E4E0                 mov     [ebp+var_418], 0
.text:0000E4EA
.text:0000E4EA loc_E4EA:                               ; CODE XREF: _term_out+4F83j
.text:0000E4EA                 mov     edx, [ebp+var_32C]
.text:0000E4F0                 push    edx
.text:0000E4F1                 mov     eax, [ebp+var_330]
.text:0000E4F7                 push    eax
.text:0000E4F8                 mov     ecx, [ebp+arg_0]
.text:0000E4FB                 mov     edx, [ecx+70h]
.text:0000E4FE                 push    edx
.text:0000E4FF                 mov     eax, [ecx+6Ch]
.text:0000E502                 push    eax
.text:0000E503                 mov     ecx, [ebp+arg_0]
.text:0000E506                 push    ecx
.text:0000E507                 call    _check_selection
.text:0000E50C                 add     esp, 14h
.text:0000E50F
.text:0000E50F loc_E50F:                               ; CODE XREF: _term_out+4F34j
.text:0000E50F                 jmp     loc_958E
.text:0000E514 ; ---------------------------------------------------------------------------
.text:0000E514
.text:0000E514 loc_E514:                               ; CODE XREF: _term_out+62j
.text:0000E514                 mov     edx, [ebp+arg_0]
.text:0000E517                 push    edx
.text:0000E518                 call    _term_print_flush
.text:0000E51D                 add     esp, 4
.text:0000E520                 mov     eax, [ebp+arg_0]
.text:0000E523                 cmp     dword ptr [eax+1124h], 0
.text:0000E52A                 jz      short loc_E53E
.text:0000E52C                 mov     ecx, [ebp+arg_0]
.text:0000E52F                 mov     edx, [ecx+108Ch]
.text:0000E535                 push    edx
.text:0000E536                 call    _logflush
.text:0000E53B                 add     esp, 4
.text:0000E53E
.text:0000E53E loc_E53E:                               ; CODE XREF: _term_out+4FDEj
.text:0000E53E                 push    edx
.text:0000E53F                 mov     ecx, ebp
.text:0000E541                 push    eax
.text:0000E542                 lea     edx, $LN730
.text:0000E548                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000E54D                 pop     eax
.text:0000E54E                 pop     edx
.text:0000E54F                 pop     edi
.text:0000E550                 pop     esi
.text:0000E551                 mov     ecx, [ebp+var_4]
.text:0000E554                 xor     ecx, ebp
.text:0000E556                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000E55B                 add     esp, 418h
.text:0000E561                 cmp     ebp, esp
.text:0000E563                 call    __RTC_CheckEsp
.text:0000E568                 mov     esp, ebp
.text:0000E56A                 pop     ebp
.text:0000E56B                 retn
.text:0000E56B _term_out       endp
.text:0000E56B
.text:0000E56B ; ---------------------------------------------------------------------------
.text:0000E56C $LN730          dd 11h                  ; DATA XREF: _term_out+4FF6o
.text:0000E570                 dd offset $LN729
.text:0000E574 $LN729          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000E570o
.text:0000E57C                 dd offset $LN712        ; "c"
.text:0000E580                 dd 0FFFFFEE8h, 100h
.text:0000E588                 dd offset $LN713        ; "localbuf"
.text:0000E58C                 dd 0FFFFFED8h, 4
.text:0000E594                 dd offset $LN714        ; "nchars"
.text:0000E598                 db 0CCh
.text:0000E599                 db 0FEh, 2 dup(0FFh)
.text:0000E59C                 dd 4
.text:0000E5A0                 dd offset $LN715        ; "ret"
.text:0000E5A4                 dd 0FFFFFEB0h, 8
.text:0000E5AC                 dd offset $LN716        ; "old_curs"
.text:0000E5B0                 dd 0FFFFFE94h, 8
.text:0000E5B8                 dd offset $LN717        ; "cursplus"
.text:0000E5BC                 dd 0FFFFFE74h, 8
.text:0000E5C4                 dd offset $LN718        ; "scrtop"
.text:0000E5C8                 dd 0FFFFFE64h, 8
.text:0000E5D0                 dd offset $LN719        ; "scrbot"
.text:0000E5D4                 dd 0FFFFFE2Ch, 20h
.text:0000E5DC                 dd offset $LN720        ; "buf"
.text:0000E5E0                 dd 0FFFFFE04h, 4
.text:0000E5E8                 dd offset $LN721        ; "x"
.text:0000E5EC                 dd 0FFFFFDF8h, 4
.text:0000E5F4                 dd offset $LN722        ; "y"
.text:0000E5F8                 dd 0FFFFFD9Ch, 50h
.text:0000E600                 dd offset $LN723        ; "buf"
.text:0000E604                 dd 0FFFFFD84h, 8
.text:0000E60C                 dd offset $LN724        ; "cursplus"
.text:0000E610                 dd 0FFFFFD54h, 20h
.text:0000E618                 dd offset $LN725        ; "buf"
.text:0000E61C                 dd 0FFFFFD3Ch, 8
.text:0000E624                 dd offset $LN726        ; "old_curs"
.text:0000E628                 dd 0FFFFFCE8h, 40h
.text:0000E630                 dd offset $LN727        ; "lbuf"
.text:0000E634                 dd 0FFFFFCD0h, 8
.text:0000E63C                 dd offset $LN728        ; "cursplus"
.text:0000E640 $LN728          db 'cursplus',0         ; DATA XREF: .text:0000E63Co
.text:0000E649 $LN727          db 'lbuf',0             ; DATA XREF: .text:0000E630o
.text:0000E64E $LN726          db 'old_curs',0         ; DATA XREF: .text:0000E624o
.text:0000E657 $LN725          db 'buf',0              ; DATA XREF: .text:0000E618o
.text:0000E65B $LN724          db 'cursplus',0         ; DATA XREF: .text:0000E60Co
.text:0000E664 $LN723          db 'buf',0              ; DATA XREF: .text:0000E600o
.text:0000E668 $LN722          db 'y',0                ; DATA XREF: .text:0000E5F4o
.text:0000E66A $LN721          db 'x',0                ; DATA XREF: .text:0000E5E8o
.text:0000E66C $LN720          db 'buf',0              ; DATA XREF: .text:0000E5DCo
.text:0000E670 $LN719          db 'scrbot',0           ; DATA XREF: .text:0000E5D0o
.text:0000E677 $LN718          db 'scrtop',0           ; DATA XREF: .text:0000E5C4o
.text:0000E67E $LN717          db 'cursplus',0         ; DATA XREF: .text:0000E5B8o
.text:0000E687 $LN716          db 'old_curs',0         ; DATA XREF: .text:0000E5ACo
.text:0000E690 $LN715          db 'ret',0              ; DATA XREF: .text:0000E5A0o
.text:0000E694 $LN714          db 'nchars',0           ; DATA XREF: .text:0000E594o
.text:0000E69B $LN713          db 'localbuf',0         ; DATA XREF: .text:0000E588o
.text:0000E6A4 $LN712          db 'c',0                ; DATA XREF: .text:0000E57Co
.text:0000E6A6                 align 4
.text:0000E6A8 $LN731          dd offset $LN522        ; DATA XREF: _term_out+8D3r
.text:0000E6A8                 dd offset $LN519        ; jump table for switch statement
.text:0000E6A8                 dd offset $LN506
.text:0000E6A8                 dd offset $LN473
.text:0000E6A8                 dd offset $LN479
.text:0000E6A8                 dd offset $LN481
.text:0000E6A8                 dd offset $LN484
.text:0000E6A8                 dd offset $LN490
.text:0000E6A8                 dd offset $LN498
.text:0000E6A8                 dd offset $LN496
.text:0000E6A8                 dd offset $LN494
.text:0000E6A8                 dd offset $LN523
.text:0000E6D8 $LN705          db      0,   0Bh,     1,     2 ; DATA XREF: _term_out+8CCr
.text:0000E6D8                 db      3,     4,     5,     6 ; indirect table for switch statement
.text:0000E6D8                 db      7,     8,     9,   0Bh
.text:0000E6D8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:0000E6D8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:0000E6D8                 db    0Bh,   0Bh,   0Ah
.text:0000E6EF                 align 10h
.text:0000E6F0 $LN732          dd offset $LN461        ; DATA XREF: _term_out+F47r
.text:0000E6F0                 dd offset $LN430        ; jump table for switch statement
.text:0000E6F0                 dd offset $LN340
.text:0000E6F0                 dd offset $LN86
.text:0000E6F0                 dd offset $LN58_1
.text:0000E6F0                 dd offset $LN526
.text:0000E6F0                 dd offset $LN66
.text:0000E6F0                 dd offset $LN76
.text:0000E6F0                 dd offset $LN432
.text:0000E6F0                 dd offset $LN53
.text:0000E6F0                 dd offset $LN7_4
.text:0000E6F0                 dd offset $LN6_3
.text:0000E6F0                 dd offset $LN5_0
.text:0000E6F0                 dd offset $LN4_0
.text:0000E728 $LN733          dd offset $LN421        ; DATA XREF: _term_out+16AEr
.text:0000E728                 dd offset $LN419        ; jump table for switch statement
.text:0000E728                 dd offset $LN417
.text:0000E728                 dd offset $LN415
.text:0000E728                 dd offset $LN413
.text:0000E728                 dd offset $LN408
.text:0000E728                 dd offset $LN389
.text:0000E728                 dd offset $LN403
.text:0000E728                 dd offset $LN398
.text:0000E728                 dd offset $LN424
.text:0000E728                 dd offset $LN423
.text:0000E728                 dd offset $LN395
.text:0000E728                 dd offset $LN425
.text:0000E75C $LN706          db      0,     1,   0Ch,   0Ch ; DATA XREF: _term_out+16A7r
.text:0000E75C                 db    0Ch,   0Ch,     2,     3 ; indirect table for switch statement
.text:0000E75C                 db    0Ch,   0Ch,   0Ch,   0Ch
.text:0000E75C                 db    0Ch,     4,     5,   0Ch
.text:0000E75C                 db    0Ch,     6,   0Ch,   0Ch
.text:0000E75C                 db    0Ch,   0Ch,     7,   0Ch
.text:0000E75C                 db    0Ch,   0Ch,   0Ch,   0Ch
.text:0000E75C                 db    0Ch,   0Ch,   0Ch,   0Ch
.text:0000E75C                 db    0Ch,   0Ch,   0Ch,     8
.text:0000E75C                 db      9,   0Ch,   0Ah,   0Ch
.text:0000E75C                 db    0Ch,   0Ch,   0Ch,   0Ch
.text:0000E75C                 db    0Bh
.text:0000E789                 align 4
.text:0000E78C $LN734          dd offset $LN290, offset $LN324, offset $LN321, offset $LN315
.text:0000E78C                                         ; DATA XREF: _term_out+21FEr
.text:0000E78C                 dd offset $LN314, offset $LN313, offset $LN311, offset $LN309 ; jump table for switch statement
.text:0000E78C                 dd offset $LN305, offset $LN303, offset $LN298, offset $LN296
.text:0000E78C                 dd offset $LN293, offset $LN288, offset $LN160, offset $LN158
.text:0000E78C                 dd offset $LN148, offset $LN138, offset $LN317, offset $LN286
.text:0000E78C                 dd offset $LN307, offset $LN323, offset $LN262, offset $LN278
.text:0000E78C                 dd offset $LN273, offset $LN267, offset $LN248, offset $LN283
.text:0000E78C                 dd offset $LN253, offset $LN203, offset $LN201, offset $LN202
.text:0000E78C                 dd offset $LN143, offset $LN336
.text:0000E814 $LN707          db      0,     1,     2,     3 ; DATA XREF: _term_out+21F7r
.text:0000E814                 db      4,     5,     6,     7 ; indirect table for switch statement
.text:0000E814                 db      8,   21h,     9,   0Ah
.text:0000E814                 db    0Bh,   0Ch,   21h,   21h
.text:0000E814                 db    0Dh,   21h,   21h,   0Eh
.text:0000E814                 db    0Fh,   21h,   21h,   21h
.text:0000E814                 db    10h,   21h,   11h,   21h
.text:0000E814                 db    21h,   21h,   21h,   21h
.text:0000E814                 db      7,   12h,   21h,   13h
.text:0000E814                 db    14h,   15h,     8,   16h
.text:0000E814                 db    17h,   18h,   21h,   21h
.text:0000E814                 db    19h,   1Ah,   1Bh,   21h
.text:0000E814                 db    21h,   21h,   1Ch,   1Dh
.text:0000E814                 db    1Eh,   1Fh,   21h,   21h
.text:0000E814                 db    20h
.text:0000E84D                 align 10h
.text:0000E850 $LN735          dd offset $LN117_0      ; DATA XREF: _term_out+22C7r
.text:0000E850                 dd offset $LN113        ; jump table for switch statement
.text:0000E850                 dd offset $LN111
.text:0000E850                 dd offset $LN108
.text:0000E860 $LN736          dd offset $LN242, offset $LN241, offset $LN237, offset $LN235
.text:0000E860                                         ; DATA XREF: _term_out+303Er
.text:0000E860                 dd offset $LN233, offset $LN231, offset $LN230, offset $LN227 ; jump table for switch statement
.text:0000E860                 dd offset $LN224, offset $LN239, offset $LN221, offset $LN219
.text:0000E860                 dd offset $LN217, offset $LN215, offset $LN213, offset $LN207
.text:0000E860                 dd offset $LN211, offset $LN210, offset $LN205, offset $LN208
.text:0000E860                 dd offset $LN212, offset $LN209, offset $LN243
.text:0000E8BC $LN708          db      0,     1,   16h,   16h ; DATA XREF: _term_out+3037r
.text:0000E8BC                 db      2,     3,     4,     5 ; indirect table for switch statement
.text:0000E8BC                 db    16h,   16h,     6,     7
.text:0000E8BC                 db      8,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,     9,   0Ah,   16h
.text:0000E8BC                 db    0Bh,   0Ch,   16h,   0Dh
.text:0000E8BC                 db    16h,   16h,   0Eh,   0Eh
.text:0000E8BC                 db    0Eh,   0Eh,   0Eh,   0Eh
.text:0000E8BC                 db    0Eh,   0Eh,   0Fh,   10h
.text:0000E8BC                 db    11h,   11h,   11h,   11h
.text:0000E8BC                 db    11h,   11h,   11h,   11h
.text:0000E8BC                 db    12h,   13h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   16h,   16h
.text:0000E8BC                 db    16h,   16h,   14h,   14h
.text:0000E8BC                 db    14h,   14h,   14h,   14h
.text:0000E8BC                 db    14h,   14h,   16h,   16h
.text:0000E8BC                 db    15h,   15h,   15h,   15h
.text:0000E8BC                 db    15h,   15h,   15h,   15h
.text:0000E928 $LN737          dd offset $LN191        ; DATA XREF: _term_out+3687r
.text:0000E928                 dd offset $LN190        ; jump table for switch statement
.text:0000E928                 dd offset $LN189
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN185
.text:0000E928                 dd offset $LN184
.text:0000E928                 dd offset $LN183
.text:0000E928                 dd offset $LN182
.text:0000E928                 dd offset $LN179
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN177
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN175
.text:0000E928                 dd offset $LN173
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN171
.text:0000E928                 dd offset $LN196
.text:0000E928                 dd offset $LN168
.text:0000E928                 dd offset $LN164
.text:0000E97C $LN738          dd offset $LN93, offset $LN96, offset $LN95, offset $LN94
.text:0000E97C                                         ; DATA XREF: _term_out+44BAr
.text:0000E97C                 dd offset $LN101_0, offset $LN100_0, offset $LN99_0, offset $LN98_0 ; jump table for switch statement
.text:0000E99C $LN709          db      0,     7,     7,     7 ; DATA XREF: _term_out+44B3r
.text:0000E99C                 db      7,     7,     7,     7 ; indirect table for switch statement
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      1,     2,     3,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     4,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     7,     7,     7
.text:0000E99C                 db      7,     5,     6
.text:0000E9DB                 align 4
.text:0000E9DC $LN739          dd offset $LN80         ; DATA XREF: _term_out+4667r
.text:0000E9DC                 dd offset $LN79         ; jump table for switch statement
.text:0000E9DC                 dd offset $LN83
.text:0000E9DC                 dd offset $LN82
.text:0000E9DC                 dd offset $LN81
.text:0000E9DC                 dd offset $LN77
.text:0000E9F4 $LN710          db      0,     0,     0,     0 ; DATA XREF: _term_out+4660r
.text:0000E9F4                 db      0,     0,     0,     0 ; indirect table for switch statement
.text:0000E9F4                 db      0,     0,     5,     5
.text:0000E9F4                 db      5,     5,     5,     5
.text:0000E9F4                 db      5,     5,     5,     5
.text:0000E9F4                 db      5,     5,     5,     5
.text:0000E9F4                 db      5,     5,     5,     5
.text:0000E9F4                 db      1,     5,     5,     5
.text:0000E9F4                 db      2,     5,     3,     5
.text:0000E9F4                 db      5,     5,     5,     4
.text:0000EA1C $LN740          dd offset $LN31_1, offset $LN33, offset $LN32_0, offset $LN50
.text:0000EA1C                                         ; DATA XREF: _term_out+49BCr
.text:0000EA1C                 dd offset $LN49, offset $LN48, offset $LN47, offset $LN30_1 ; jump table for switch statement
.text:0000EA1C                 dd offset $LN46, offset $LN45, offset $LN44, offset $LN43
.text:0000EA1C                 dd offset $LN39, offset $LN37, offset $LN28_0, offset $LN26_0
.text:0000EA1C                 dd offset $LN12_0, offset $LN11_1, offset $LN8_4, offset $LN9_6
.text:0000EA1C                 dd offset $LN10_1, offset $LN36, offset $LN35, offset $LN24_0
.text:0000EA1C                 dd offset $LN23, offset $LN22_0, offset $LN20_0, offset $LN19_0
.text:0000EA1C                 dd offset $LN18, offset $LN17, offset $LN16_0, offset $LN15_1
.text:0000EA1C                 dd offset $LN14_1, offset $LN13_1, offset $LN51
.text:0000EAA8 $LN711          db      0,     1,     2,   22h ; DATA XREF: _term_out+49B5r
.text:0000EAA8                 db    22h,     3,     4,     5 ; indirect table for switch statement
.text:0000EAA8                 db      6,     7,     8,     9
.text:0000EAA8                 db    0Ah,   0Bh,   0Ch,   0Dh
.text:0000EAA8                 db    0Eh,   0Fh,   22h,   22h
.text:0000EAA8                 db    22h,   22h,   10h,   11h
.text:0000EAA8                 db    12h,   13h,   22h,   14h
.text:0000EAA8                 db    22h,   15h,   16h,   22h
.text:0000EAA8                 db    22h,   22h,   22h,   22h
.text:0000EAA8                 db    22h,   22h,   17h,   18h
.text:0000EAA8                 db    19h,   1Ah,   1Bh,   22h
.text:0000EAA8                 db    22h,   22h,   22h,   22h
.text:0000EAA8                 db    1Ch,   22h,   22h,   1Dh
.text:0000EAA8                 db    1Eh,   1Fh,   22h,   22h
.text:0000EAA8                 db    22h,   22h,   20h,   21h
.text:0000EAE4                 db 8 dup(0CCh)
.text:0000EAEC
.text:0000EAEC ; =============== S U B R O U T I N E =======================================
.text:0000EAEC
.text:0000EAEC ; Attributes: bp-based frame
.text:0000EAEC
.text:0000EAEC _term_schedule_vbell proc near          ; CODE XREF: _term_out+AE5p
.text:0000EAEC                                         ; _toggle_mode+219p
.text:0000EAEC
.text:0000EAEC var_4           = dword ptr -4
.text:0000EAEC arg_0           = dword ptr  8
.text:0000EAEC arg_4           = dword ptr  0Ch
.text:0000EAEC arg_8           = dword ptr  10h
.text:0000EAEC
.text:0000EAEC                 push    ebp
.text:0000EAED                 mov     ebp, esp
.text:0000EAEF                 push    ecx
.text:0000EAF0                 push    esi
.text:0000EAF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EAF8                 cmp     [ebp+arg_4], 0
.text:0000EAFC                 jz      short loc_EB15
.text:0000EAFE                 mov     esi, esp
.text:0000EB00                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:0000EB06                 cmp     esi, esp
.text:0000EB08                 call    __RTC_CheckEsp
.text:0000EB0D                 sub     eax, [ebp+arg_8]
.text:0000EB10                 mov     [ebp+var_4], eax
.text:0000EB13                 jmp     short loc_EB1C
.text:0000EB15 ; ---------------------------------------------------------------------------
.text:0000EB15
.text:0000EB15 loc_EB15:                               ; CODE XREF: _term_schedule_vbell+10j
.text:0000EB15                 mov     [ebp+var_4], 0
.text:0000EB1C
.text:0000EB1C loc_EB1C:                               ; CODE XREF: _term_schedule_vbell+27j
.text:0000EB1C                 cmp     [ebp+var_4], 64h ; 'd'
.text:0000EB20                 jge     short loc_EB54
.text:0000EB22                 mov     eax, [ebp+arg_0]
.text:0000EB25                 mov     dword ptr [eax+138h], 1
.text:0000EB2F                 mov     ecx, [ebp+arg_0]
.text:0000EB32                 push    ecx
.text:0000EB33                 push    offset _term_timer
.text:0000EB38                 mov     edx, 64h ; 'd'
.text:0000EB3D                 sub     edx, [ebp+var_4]
.text:0000EB40                 push    edx
.text:0000EB41                 call    _schedule_timer
.text:0000EB46                 add     esp, 0Ch
.text:0000EB49                 mov     ecx, [ebp+arg_0]
.text:0000EB4C                 mov     [ecx+13Ch], eax
.text:0000EB52                 jmp     short loc_EB61
.text:0000EB54 ; ---------------------------------------------------------------------------
.text:0000EB54
.text:0000EB54 loc_EB54:                               ; CODE XREF: _term_schedule_vbell+34j
.text:0000EB54                 mov     edx, [ebp+arg_0]
.text:0000EB57                 mov     dword ptr [edx+138h], 0
.text:0000EB61
.text:0000EB61 loc_EB61:                               ; CODE XREF: _term_schedule_vbell+66j
.text:0000EB61                 pop     esi
.text:0000EB62                 add     esp, 4
.text:0000EB65                 cmp     ebp, esp
.text:0000EB67                 call    __RTC_CheckEsp
.text:0000EB6C                 mov     esp, ebp
.text:0000EB6E                 pop     ebp
.text:0000EB6F                 retn
.text:0000EB6F _term_schedule_vbell endp
.text:0000EB6F
.text:0000EB6F ; ---------------------------------------------------------------------------
.text:0000EB70                 db 0Ch dup(0CCh)
.text:0000EB7C
.text:0000EB7C ; =============== S U B R O U T I N E =======================================
.text:0000EB7C
.text:0000EB7C ; Attributes: bp-based frame
.text:0000EB7C
.text:0000EB7C _move           proc near               ; CODE XREF: _term_out+D06p
.text:0000EB7C                                         ; _term_out+2334p ...
.text:0000EB7C
.text:0000EB7C arg_0           = dword ptr  8
.text:0000EB7C arg_4           = dword ptr  0Ch
.text:0000EB7C arg_8           = dword ptr  10h
.text:0000EB7C arg_C           = dword ptr  14h
.text:0000EB7C
.text:0000EB7C                 push    ebp
.text:0000EB7D                 mov     ebp, esp
.text:0000EB7F                 cmp     [ebp+arg_4], 0
.text:0000EB83                 jge     short loc_EB8C
.text:0000EB85                 mov     [ebp+arg_4], 0
.text:0000EB8C
.text:0000EB8C loc_EB8C:                               ; CODE XREF: _move+7j
.text:0000EB8C                 mov     eax, [ebp+arg_0]
.text:0000EB8F                 mov     ecx, [ebp+arg_4]
.text:0000EB92                 cmp     ecx, [eax+12Ch]
.text:0000EB98                 jl      short loc_EBA9
.text:0000EB9A                 mov     edx, [ebp+arg_0]
.text:0000EB9D                 mov     eax, [edx+12Ch]
.text:0000EBA3                 sub     eax, 1
.text:0000EBA6                 mov     [ebp+arg_4], eax
.text:0000EBA9
.text:0000EBA9 loc_EBA9:                               ; CODE XREF: _move+1Cj
.text:0000EBA9                 cmp     [ebp+arg_C], 0
.text:0000EBAD                 jz      short loc_EC08
.text:0000EBAF                 mov     ecx, [ebp+arg_0]
.text:0000EBB2                 mov     edx, [ebp+arg_0]
.text:0000EBB5                 mov     eax, [ecx+6Ch]
.text:0000EBB8                 cmp     eax, [edx+7Ch]
.text:0000EBBB                 jge     short loc_EBC3
.text:0000EBBD                 cmp     [ebp+arg_C], 2
.text:0000EBC1                 jnz     short loc_EBD7
.text:0000EBC3
.text:0000EBC3 loc_EBC3:                               ; CODE XREF: _move+3Fj
.text:0000EBC3                 mov     ecx, [ebp+arg_0]
.text:0000EBC6                 mov     edx, [ebp+arg_8]
.text:0000EBC9                 cmp     edx, [ecx+7Ch]
.text:0000EBCC                 jge     short loc_EBD7
.text:0000EBCE                 mov     eax, [ebp+arg_0]
.text:0000EBD1                 mov     ecx, [eax+7Ch]
.text:0000EBD4                 mov     [ebp+arg_8], ecx
.text:0000EBD7
.text:0000EBD7 loc_EBD7:                               ; CODE XREF: _move+45j
.text:0000EBD7                                         ; _move+50j
.text:0000EBD7                 mov     edx, [ebp+arg_0]
.text:0000EBDA                 mov     eax, [ebp+arg_0]
.text:0000EBDD                 mov     ecx, [edx+6Ch]
.text:0000EBE0                 cmp     ecx, [eax+80h]
.text:0000EBE6                 jle     short loc_EBEE
.text:0000EBE8                 cmp     [ebp+arg_C], 2
.text:0000EBEC                 jnz     short loc_EC08
.text:0000EBEE
.text:0000EBEE loc_EBEE:                               ; CODE XREF: _move+6Aj
.text:0000EBEE                 mov     edx, [ebp+arg_0]
.text:0000EBF1                 mov     eax, [ebp+arg_8]
.text:0000EBF4                 cmp     eax, [edx+80h]
.text:0000EBFA                 jle     short loc_EC08
.text:0000EBFC                 mov     ecx, [ebp+arg_0]
.text:0000EBFF                 mov     edx, [ecx+80h]
.text:0000EC05                 mov     [ebp+arg_8], edx
.text:0000EC08
.text:0000EC08 loc_EC08:                               ; CODE XREF: _move+31j
.text:0000EC08                                         ; _move+70j ...
.text:0000EC08                 cmp     [ebp+arg_8], 0
.text:0000EC0C                 jge     short loc_EC15
.text:0000EC0E                 mov     [ebp+arg_8], 0
.text:0000EC15
.text:0000EC15 loc_EC15:                               ; CODE XREF: _move+90j
.text:0000EC15                 mov     eax, [ebp+arg_0]
.text:0000EC18                 mov     ecx, [ebp+arg_8]
.text:0000EC1B                 cmp     ecx, [eax+128h]
.text:0000EC21                 jl      short loc_EC32
.text:0000EC23                 mov     edx, [ebp+arg_0]
.text:0000EC26                 mov     eax, [edx+128h]
.text:0000EC2C                 sub     eax, 1
.text:0000EC2F                 mov     [ebp+arg_8], eax
.text:0000EC32
.text:0000EC32 loc_EC32:                               ; CODE XREF: _move+A5j
.text:0000EC32                 mov     ecx, [ebp+arg_0]
.text:0000EC35                 mov     edx, [ebp+arg_4]
.text:0000EC38                 mov     [ecx+70h], edx
.text:0000EC3B                 mov     eax, [ebp+arg_0]
.text:0000EC3E                 mov     ecx, [ebp+arg_8]
.text:0000EC41                 mov     [eax+6Ch], ecx
.text:0000EC44                 mov     edx, [ebp+arg_0]
.text:0000EC47                 mov     dword ptr [edx+8Ch], 0
.text:0000EC51                 pop     ebp
.text:0000EC52                 retn
.text:0000EC52 _move           endp
.text:0000EC52
.text:0000EC52 ; ---------------------------------------------------------------------------
.text:0000EC53                 db 9 dup(0CCh)
.text:0000EC5C
.text:0000EC5C ; =============== S U B R O U T I N E =======================================
.text:0000EC5C
.text:0000EC5C ; Attributes: bp-based frame
.text:0000EC5C
.text:0000EC5C _save_cursor    proc near               ; CODE XREF: _term_out+184Ap
.text:0000EC5C                                         ; _term_out+1879p ...
.text:0000EC5C
.text:0000EC5C arg_0           = dword ptr  8
.text:0000EC5C arg_4           = dword ptr  0Ch
.text:0000EC5C
.text:0000EC5C                 push    ebp
.text:0000EC5D                 mov     ebp, esp
.text:0000EC5F                 cmp     [ebp+arg_4], 0
.text:0000EC63                 jz      loc_ECF0
.text:0000EC69                 mov     eax, [ebp+arg_0]
.text:0000EC6C                 mov     ecx, [eax+6Ch]
.text:0000EC6F                 mov     edx, [eax+70h]
.text:0000EC72                 mov     eax, [ebp+arg_0]
.text:0000EC75                 mov     [eax+74h], ecx
.text:0000EC78                 mov     [eax+78h], edx
.text:0000EC7B                 mov     ecx, [ebp+arg_0]
.text:0000EC7E                 mov     edx, [ebp+arg_0]
.text:0000EC81                 mov     eax, [edx+40h]
.text:0000EC84                 mov     [ecx+44h], eax
.text:0000EC87                 mov     ecx, [ebp+arg_0]
.text:0000EC8A                 mov     edx, [ebp+arg_0]
.text:0000EC8D                 mov     eax, [edx+94h]
.text:0000EC93                 mov     [ecx+98h], eax
.text:0000EC99                 mov     ecx, [ebp+arg_0]
.text:0000EC9C                 mov     edx, [ebp+arg_0]
.text:0000EC9F                 mov     eax, [edx+0DCh]
.text:0000ECA5                 mov     [ecx+0A0h], eax
.text:0000ECAB                 mov     ecx, [ebp+arg_0]
.text:0000ECAE                 mov     edx, [ebp+arg_0]
.text:0000ECB1                 mov     eax, [edx+8Ch]
.text:0000ECB7                 mov     [ecx+0A4h], eax
.text:0000ECBD                 mov     ecx, [ebp+arg_0]
.text:0000ECC0                 mov     edx, [ecx+94h]
.text:0000ECC6                 mov     eax, [ebp+arg_0]
.text:0000ECC9                 mov     ecx, [ebp+arg_0]
.text:0000ECCC                 mov     edx, [ecx+edx*4+170h]
.text:0000ECD3                 mov     [eax+9Ch], edx
.text:0000ECD9                 mov     eax, [ebp+arg_0]
.text:0000ECDC                 mov     ecx, [ebp+arg_0]
.text:0000ECDF                 mov     edx, [ecx+0D0h]
.text:0000ECE5                 mov     [eax+0D4h], edx
.text:0000ECEB                 jmp     loc_EDF1
.text:0000ECF0 ; ---------------------------------------------------------------------------
.text:0000ECF0
.text:0000ECF0 loc_ECF0:                               ; CODE XREF: _save_cursor+7j
.text:0000ECF0                 mov     eax, [ebp+arg_0]
.text:0000ECF3                 mov     ecx, [eax+74h]
.text:0000ECF6                 mov     edx, [eax+78h]
.text:0000ECF9                 mov     eax, [ebp+arg_0]
.text:0000ECFC                 mov     [eax+6Ch], ecx
.text:0000ECFF                 mov     [eax+70h], edx
.text:0000ED02                 mov     ecx, [ebp+arg_0]
.text:0000ED05                 mov     edx, [ebp+arg_0]
.text:0000ED08                 mov     eax, [ecx+70h]
.text:0000ED0B                 cmp     eax, [edx+12Ch]
.text:0000ED11                 jl      short loc_ED25
.text:0000ED13                 mov     ecx, [ebp+arg_0]
.text:0000ED16                 mov     edx, [ecx+12Ch]
.text:0000ED1C                 sub     edx, 1
.text:0000ED1F                 mov     eax, [ebp+arg_0]
.text:0000ED22                 mov     [eax+70h], edx
.text:0000ED25
.text:0000ED25 loc_ED25:                               ; CODE XREF: _save_cursor+B5j
.text:0000ED25                 mov     ecx, [ebp+arg_0]
.text:0000ED28                 mov     edx, [ebp+arg_0]
.text:0000ED2B                 mov     eax, [ecx+6Ch]
.text:0000ED2E                 cmp     eax, [edx+128h]
.text:0000ED34                 jl      short loc_ED48
.text:0000ED36                 mov     ecx, [ebp+arg_0]
.text:0000ED39                 mov     edx, [ecx+128h]
.text:0000ED3F                 sub     edx, 1
.text:0000ED42                 mov     eax, [ebp+arg_0]
.text:0000ED45                 mov     [eax+6Ch], edx
.text:0000ED48
.text:0000ED48 loc_ED48:                               ; CODE XREF: _save_cursor+D8j
.text:0000ED48                 mov     ecx, [ebp+arg_0]
.text:0000ED4B                 mov     edx, [ebp+arg_0]
.text:0000ED4E                 mov     eax, [edx+44h]
.text:0000ED51                 mov     [ecx+40h], eax
.text:0000ED54                 mov     ecx, [ebp+arg_0]
.text:0000ED57                 mov     edx, [ebp+arg_0]
.text:0000ED5A                 mov     eax, [edx+98h]
.text:0000ED60                 mov     [ecx+94h], eax
.text:0000ED66                 mov     ecx, [ebp+arg_0]
.text:0000ED69                 mov     edx, [ebp+arg_0]
.text:0000ED6C                 mov     eax, [edx+0A0h]
.text:0000ED72                 mov     [ecx+0DCh], eax
.text:0000ED78                 mov     ecx, [ebp+arg_0]
.text:0000ED7B                 mov     edx, [ebp+arg_0]
.text:0000ED7E                 mov     eax, [edx+0A4h]
.text:0000ED84                 mov     [ecx+8Ch], eax
.text:0000ED8A                 mov     ecx, [ebp+arg_0]
.text:0000ED8D                 cmp     dword ptr [ecx+8Ch], 0
.text:0000ED94                 jz      short loc_EDB7
.text:0000ED96                 mov     edx, [ebp+arg_0]
.text:0000ED99                 mov     eax, [edx+12Ch]
.text:0000ED9F                 sub     eax, 1
.text:0000EDA2                 mov     ecx, [ebp+arg_0]
.text:0000EDA5                 cmp     [ecx+70h], eax
.text:0000EDA8                 jge     short loc_EDB7
.text:0000EDAA                 mov     edx, [ebp+arg_0]
.text:0000EDAD                 mov     dword ptr [edx+8Ch], 0
.text:0000EDB7
.text:0000EDB7 loc_EDB7:                               ; CODE XREF: _save_cursor+138j
.text:0000EDB7                                         ; _save_cursor+14Cj
.text:0000EDB7                 mov     eax, [ebp+arg_0]
.text:0000EDBA                 mov     ecx, [eax+94h]
.text:0000EDC0                 mov     edx, [ebp+arg_0]
.text:0000EDC3                 mov     eax, [ebp+arg_0]
.text:0000EDC6                 mov     eax, [eax+9Ch]
.text:0000EDCC                 mov     [edx+ecx*4+170h], eax
.text:0000EDD3                 mov     ecx, [ebp+arg_0]
.text:0000EDD6                 mov     edx, [ebp+arg_0]
.text:0000EDD9                 mov     eax, [edx+0D4h]
.text:0000EDDF                 mov     [ecx+0D0h], eax
.text:0000EDE5                 mov     ecx, [ebp+arg_0]
.text:0000EDE8                 push    ecx
.text:0000EDE9                 call    _set_erase_char
.text:0000EDEE                 add     esp, 4
.text:0000EDF1
.text:0000EDF1 loc_EDF1:                               ; CODE XREF: _save_cursor+8Fj
.text:0000EDF1                 cmp     ebp, esp
.text:0000EDF3                 call    __RTC_CheckEsp
.text:0000EDF8                 pop     ebp
.text:0000EDF9                 retn
.text:0000EDF9 _save_cursor    endp
.text:0000EDF9
.text:0000EDF9 ; ---------------------------------------------------------------------------
.text:0000EDFA                 align 4
.text:0000EDFC
.text:0000EDFC ; =============== S U B R O U T I N E =======================================
.text:0000EDFC
.text:0000EDFC ; Attributes: bp-based frame
.text:0000EDFC
.text:0000EDFC _insch          proc near               ; CODE XREF: _term_out+10C8p
.text:0000EDFC                                         ; _term_out+2A71p ...
.text:0000EDFC
.text:0000EDFC var_54          = dword ptr -54h
.text:0000EDFC var_50          = dword ptr -50h
.text:0000EDFC var_4C          = dword ptr -4Ch
.text:0000EDFC var_48          = dword ptr -48h
.text:0000EDFC var_44          = dword ptr -44h
.text:0000EDFC var_3C          = dword ptr -3Ch
.text:0000EDFC var_38          = dword ptr -38h
.text:0000EDFC var_2C          = dword ptr -2Ch
.text:0000EDFC var_28          = dword ptr -28h
.text:0000EDFC var_20          = dword ptr -20h
.text:0000EDFC var_18          = dword ptr -18h
.text:0000EDFC var_14          = dword ptr -14h
.text:0000EDFC var_C           = dword ptr -0Ch
.text:0000EDFC var_8           = dword ptr -8
.text:0000EDFC var_4           = dword ptr -4
.text:0000EDFC arg_0           = dword ptr  8
.text:0000EDFC arg_4           = dword ptr  0Ch
.text:0000EDFC
.text:0000EDFC                 push    ebp
.text:0000EDFD                 mov     ebp, esp
.text:0000EDFF                 sub     esp, 54h
.text:0000EE02                 push    edi
.text:0000EE03                 lea     edi, [ebp+var_54]
.text:0000EE06                 mov     ecx, 15h
.text:0000EE0B                 mov     eax, 0CCCCCCCCh
.text:0000EE10                 rep stosd
.text:0000EE12                 xor     eax, eax
.text:0000EE14                 cmp     [ebp+arg_4], 0
.text:0000EE18                 setnl   al
.text:0000EE1B                 lea     eax, [eax+eax-1]
.text:0000EE1F                 mov     [ebp+var_4], eax
.text:0000EE22                 cmp     [ebp+arg_4], 0
.text:0000EE26                 jge     short loc_EE32
.text:0000EE28                 mov     ecx, [ebp+arg_4]
.text:0000EE2B                 neg     ecx
.text:0000EE2D                 mov     [ebp+var_44], ecx
.text:0000EE30                 jmp     short loc_EE38
.text:0000EE32 ; ---------------------------------------------------------------------------
.text:0000EE32
.text:0000EE32 loc_EE32:                               ; CODE XREF: _insch+2Aj
.text:0000EE32                 mov     edx, [ebp+arg_4]
.text:0000EE35                 mov     [ebp+var_44], edx
.text:0000EE38
.text:0000EE38 loc_EE38:                               ; CODE XREF: _insch+34j
.text:0000EE38                 mov     eax, [ebp+var_44]
.text:0000EE3B                 mov     [ebp+arg_4], eax
.text:0000EE3E                 mov     ecx, [ebp+arg_0]
.text:0000EE41                 mov     edx, [ebp+arg_0]
.text:0000EE44                 mov     eax, [ecx+12Ch]
.text:0000EE4A                 sub     eax, [edx+70h]
.text:0000EE4D                 cmp     [ebp+arg_4], eax
.text:0000EE50                 jle     short loc_EE64
.text:0000EE52                 mov     ecx, [ebp+arg_0]
.text:0000EE55                 mov     edx, [ebp+arg_0]
.text:0000EE58                 mov     eax, [ecx+12Ch]
.text:0000EE5E                 sub     eax, [edx+70h]
.text:0000EE61                 mov     [ebp+arg_4], eax
.text:0000EE64
.text:0000EE64 loc_EE64:                               ; CODE XREF: _insch+54j
.text:0000EE64                 mov     ecx, [ebp+arg_0]
.text:0000EE67                 mov     edx, [ebp+arg_0]
.text:0000EE6A                 mov     eax, [ecx+12Ch]
.text:0000EE70                 sub     eax, [edx+70h]
.text:0000EE73                 sub     eax, [ebp+arg_4]
.text:0000EE76                 mov     [ebp+var_8], eax
.text:0000EE79                 mov     ecx, [ebp+arg_0]
.text:0000EE7C                 mov     edx, [ecx+6Ch]
.text:0000EE7F                 mov     [ebp+var_18], edx
.text:0000EE82                 mov     eax, [ebp+arg_0]
.text:0000EE85                 mov     ecx, [eax+12Ch]
.text:0000EE8B                 mov     [ebp+var_14], ecx
.text:0000EE8E                 mov     edx, [ebp+arg_0]
.text:0000EE91                 mov     eax, [ebp+arg_0]
.text:0000EE94                 mov     ecx, [edx+6Ch]
.text:0000EE97                 cmp     ecx, [eax+0E5Ch]
.text:0000EE9D                 jl      short loc_EEC9
.text:0000EE9F                 mov     edx, [ebp+arg_0]
.text:0000EEA2                 mov     eax, [ebp+arg_0]
.text:0000EEA5                 mov     ecx, [edx+6Ch]
.text:0000EEA8                 cmp     ecx, [eax+0E5Ch]
.text:0000EEAE                 jnz     loc_F07A
.text:0000EEB4                 mov     edx, [ebp+arg_0]
.text:0000EEB7                 mov     eax, [ebp+arg_0]
.text:0000EEBA                 mov     ecx, [edx+70h]
.text:0000EEBD                 cmp     ecx, [eax+0E60h]
.text:0000EEC3                 jge     loc_F07A
.text:0000EEC9
.text:0000EEC9 loc_EEC9:                               ; CODE XREF: _insch+A1j
.text:0000EEC9                 mov     edx, [ebp+arg_0]
.text:0000EECC                 mov     eax, [edx+0E54h]
.text:0000EED2                 cmp     eax, [ebp+var_18]
.text:0000EED5                 jl      short loc_EEFB
.text:0000EED7                 mov     ecx, [ebp+arg_0]
.text:0000EEDA                 mov     edx, [ecx+0E54h]
.text:0000EEE0                 cmp     edx, [ebp+var_18]
.text:0000EEE3                 jnz     loc_F07A
.text:0000EEE9                 mov     eax, [ebp+arg_0]
.text:0000EEEC                 mov     ecx, [eax+0E58h]
.text:0000EEF2                 cmp     ecx, [ebp+var_14]
.text:0000EEF5                 jge     loc_F07A
.text:0000EEFB
.text:0000EEFB loc_EEFB:                               ; CODE XREF: _insch+D9j
.text:0000EEFB                 mov     edx, [ebp+arg_0]
.text:0000EEFE                 mov     eax, [edx+6Ch]
.text:0000EF01                 mov     ecx, [edx+70h]
.text:0000EF04                 mov     [ebp+var_2C], eax
.text:0000EF07                 mov     [ebp+var_28], ecx
.text:0000EF0A                 mov     edx, [ebp+var_18]
.text:0000EF0D                 mov     [ebp+var_3C], edx
.text:0000EF10                 mov     eax, [ebp+var_14]
.text:0000EF13                 mov     [ebp+var_38], eax
.text:0000EF16                 cmp     [ebp+var_4], 0
.text:0000EF1A                 jle     short loc_EF27
.text:0000EF1C                 mov     ecx, [ebp+var_38]
.text:0000EF1F                 sub     ecx, [ebp+arg_4]
.text:0000EF22                 mov     [ebp+var_38], ecx
.text:0000EF25                 jmp     short loc_EF30
.text:0000EF27 ; ---------------------------------------------------------------------------
.text:0000EF27
.text:0000EF27 loc_EF27:                               ; CODE XREF: _insch+11Ej
.text:0000EF27                 mov     edx, [ebp+var_28]
.text:0000EF2A                 add     edx, [ebp+arg_4]
.text:0000EF2D                 mov     [ebp+var_28], edx
.text:0000EF30
.text:0000EF30 loc_EF30:                               ; CODE XREF: _insch+129j
.text:0000EF30                 mov     eax, [ebp+arg_0]
.text:0000EF33                 mov     ecx, [ebp+var_2C]
.text:0000EF36                 cmp     ecx, [eax+0E54h]
.text:0000EF3C                 jl      short loc_EF62
.text:0000EF3E                 mov     edx, [ebp+arg_0]
.text:0000EF41                 mov     eax, [ebp+var_2C]
.text:0000EF44                 cmp     eax, [edx+0E54h]
.text:0000EF4A                 jnz     loc_F06E
.text:0000EF50                 mov     ecx, [ebp+arg_0]
.text:0000EF53                 mov     edx, [ebp+var_28]
.text:0000EF56                 cmp     edx, [ecx+0E58h]
.text:0000EF5C                 jg      loc_F06E
.text:0000EF62
.text:0000EF62 loc_EF62:                               ; CODE XREF: _insch+140j
.text:0000EF62                 mov     eax, [ebp+arg_0]
.text:0000EF65                 mov     ecx, [eax+0E5Ch]
.text:0000EF6B                 cmp     ecx, [ebp+var_3C]
.text:0000EF6E                 jl      short loc_EF94
.text:0000EF70                 mov     edx, [ebp+arg_0]
.text:0000EF73                 mov     eax, [edx+0E5Ch]
.text:0000EF79                 cmp     eax, [ebp+var_3C]
.text:0000EF7C                 jnz     loc_F06E
.text:0000EF82                 mov     ecx, [ebp+arg_0]
.text:0000EF85                 mov     edx, [ecx+0E60h]
.text:0000EF8B                 cmp     edx, [ebp+var_38]
.text:0000EF8E                 jg      loc_F06E
.text:0000EF94
.text:0000EF94 loc_EF94:                               ; CODE XREF: _insch+172j
.text:0000EF94                 mov     eax, [ebp+var_4]
.text:0000EF97                 imul    eax, [ebp+arg_4]
.text:0000EF9B                 mov     ecx, [ebp+arg_0]
.text:0000EF9E                 add     eax, [ecx+0E58h]
.text:0000EFA4                 mov     edx, [ebp+arg_0]
.text:0000EFA7                 mov     [edx+0E58h], eax
.text:0000EFAD                 mov     eax, [ebp+var_4]
.text:0000EFB0                 imul    eax, [ebp+arg_4]
.text:0000EFB4                 mov     ecx, [ebp+arg_0]
.text:0000EFB7                 add     eax, [ecx+0E60h]
.text:0000EFBD                 mov     edx, [ebp+arg_0]
.text:0000EFC0                 mov     [edx+0E60h], eax
.text:0000EFC6                 mov     eax, [ebp+arg_0]
.text:0000EFC9                 mov     ecx, [ebp+arg_0]
.text:0000EFCC                 mov     edx, [eax+0E58h]
.text:0000EFD2                 cmp     edx, [ecx+70h]
.text:0000EFD5                 jge     short loc_EFEE
.text:0000EFD7                 push    9B5h            ; Line
.text:0000EFDC                 push    offset $SG86855 ; "..\\..\\..\\terminal.c"
.text:0000EFE1                 push    offset $SG86856 ; "term->selstart.x >= term->curs.x"
.text:0000EFE6                 call    __wassert
.text:0000EFEB ; ---------------------------------------------------------------------------
.text:0000EFEB                 add     esp, 0Ch
.text:0000EFEE
.text:0000EFEE loc_EFEE:                               ; CODE XREF: _insch+1D9j
.text:0000EFEE                 mov     ecx, [ebp+arg_0]
.text:0000EFF1                 mov     edx, [ebp+arg_0]
.text:0000EFF4                 mov     eax, [ecx+0E58h]
.text:0000EFFA                 cmp     eax, [edx+12Ch]
.text:0000F000                 jl      short loc_F019
.text:0000F002                 push    9B6h            ; Line
.text:0000F007                 push    offset $SG86858 ; "..\\..\\..\\terminal.c"
.text:0000F00C                 push    offset $SG86859 ; "term->selstart.x < term->cols"
.text:0000F011                 call    __wassert
.text:0000F016 ; ---------------------------------------------------------------------------
.text:0000F016                 add     esp, 0Ch
.text:0000F019
.text:0000F019 loc_F019:                               ; CODE XREF: _insch+204j
.text:0000F019                 mov     edx, [ebp+arg_0]
.text:0000F01C                 mov     eax, [ebp+arg_0]
.text:0000F01F                 mov     ecx, [edx+0E60h]
.text:0000F025                 cmp     ecx, [eax+70h]
.text:0000F028                 jg      short loc_F041
.text:0000F02A                 push    9B7h            ; Line
.text:0000F02F                 push    offset $SG86861 ; "..\\..\\..\\terminal.c"
.text:0000F034                 push    offset $SG86862 ; "term->selend.x > term->curs.x"
.text:0000F039                 call    __wassert
.text:0000F03E ; ---------------------------------------------------------------------------
.text:0000F03E                 add     esp, 0Ch
.text:0000F041
.text:0000F041 loc_F041:                               ; CODE XREF: _insch+22Cj
.text:0000F041                 mov     eax, [ebp+arg_0]
.text:0000F044                 mov     ecx, [ebp+arg_0]
.text:0000F047                 mov     edx, [eax+0E60h]
.text:0000F04D                 cmp     edx, [ecx+12Ch]
.text:0000F053                 jle     short loc_F06C
.text:0000F055                 push    9B8h            ; Line
.text:0000F05A                 push    offset $SG86864 ; "..\\..\\..\\terminal.c"
.text:0000F05F                 push    offset $SG86865 ; "term->selend.x <= term->cols"
.text:0000F064                 call    __wassert
.text:0000F069 ; ---------------------------------------------------------------------------
.text:0000F069                 add     esp, 0Ch
.text:0000F06C
.text:0000F06C loc_F06C:                               ; CODE XREF: _insch+257j
.text:0000F06C                 jmp     short loc_F07A
.text:0000F06E ; ---------------------------------------------------------------------------
.text:0000F06E
.text:0000F06E loc_F06E:                               ; CODE XREF: _insch+14Ej
.text:0000F06E                                         ; _insch+160j ...
.text:0000F06E                 mov     ecx, [ebp+arg_0]
.text:0000F071                 push    ecx
.text:0000F072                 call    _deselect
.text:0000F077                 add     esp, 4
.text:0000F07A
.text:0000F07A loc_F07A:                               ; CODE XREF: _insch+B2j
.text:0000F07A                                         ; _insch+C7j ...
.text:0000F07A                 mov     edx, [ebp+arg_0]
.text:0000F07D                 mov     eax, [edx+6Ch]
.text:0000F080                 push    eax
.text:0000F081                 mov     ecx, [ebp+arg_0]
.text:0000F084                 mov     edx, [ecx+70h]
.text:0000F087                 push    edx
.text:0000F088                 mov     eax, [ebp+arg_0]
.text:0000F08B                 push    eax
.text:0000F08C                 call    _check_boundary
.text:0000F091                 add     esp, 0Ch
.text:0000F094                 cmp     [ebp+var_4], 0
.text:0000F098                 jge     short loc_F0B7
.text:0000F09A                 mov     ecx, [ebp+arg_0]
.text:0000F09D                 mov     edx, [ecx+6Ch]
.text:0000F0A0                 push    edx
.text:0000F0A1                 mov     eax, [ebp+arg_0]
.text:0000F0A4                 mov     ecx, [eax+70h]
.text:0000F0A7                 add     ecx, [ebp+arg_4]
.text:0000F0AA                 push    ecx
.text:0000F0AB                 mov     edx, [ebp+arg_0]
.text:0000F0AE                 push    edx
.text:0000F0AF                 call    _check_boundary
.text:0000F0B4                 add     esp, 0Ch
.text:0000F0B7
.text:0000F0B7 loc_F0B7:                               ; CODE XREF: _insch+29Cj
.text:0000F0B7                 push    1
.text:0000F0B9                 push    9C3h
.text:0000F0BE                 mov     eax, [ebp+arg_0]
.text:0000F0C1                 mov     ecx, [eax+6Ch]
.text:0000F0C4                 push    ecx
.text:0000F0C5                 mov     edx, [ebp+arg_0]
.text:0000F0C8                 push    edx
.text:0000F0C9                 call    _lineptr
.text:0000F0CE                 add     esp, 10h
.text:0000F0D1                 mov     [ebp+var_20], eax
.text:0000F0D4                 cmp     [ebp+var_4], 0
.text:0000F0D8                 jge     loc_F18A
.text:0000F0DE                 mov     [ebp+var_C], 0
.text:0000F0E5                 jmp     short loc_F0F0
.text:0000F0E7 ; ---------------------------------------------------------------------------
.text:0000F0E7
.text:0000F0E7 loc_F0E7:                               ; CODE XREF: _insch+344j
.text:0000F0E7                 mov     eax, [ebp+var_C]
.text:0000F0EA                 add     eax, 1
.text:0000F0ED                 mov     [ebp+var_C], eax
.text:0000F0F0
.text:0000F0F0 loc_F0F0:                               ; CODE XREF: _insch+2E9j
.text:0000F0F0                 mov     ecx, [ebp+var_C]
.text:0000F0F3                 cmp     ecx, [ebp+var_8]
.text:0000F0F6                 jge     short loc_F142
.text:0000F0F8                 mov     edx, [ebp+arg_0]
.text:0000F0FB                 mov     eax, [edx+70h]
.text:0000F0FE                 imul    eax, 0Ch
.text:0000F101                 mov     ecx, [ebp+var_20]
.text:0000F104                 mov     edx, [ecx+14h]
.text:0000F107                 add     edx, eax
.text:0000F109                 mov     eax, [ebp+var_C]
.text:0000F10C                 imul    eax, 0Ch
.text:0000F10F                 add     edx, eax
.text:0000F111                 mov     ecx, [ebp+arg_4]
.text:0000F114                 imul    ecx, 0Ch
.text:0000F117                 add     edx, ecx
.text:0000F119                 push    edx
.text:0000F11A                 mov     edx, [ebp+arg_0]
.text:0000F11D                 mov     eax, [edx+70h]
.text:0000F120                 imul    eax, 0Ch
.text:0000F123                 mov     ecx, [ebp+var_20]
.text:0000F126                 mov     edx, [ecx+14h]
.text:0000F129                 add     edx, eax
.text:0000F12B                 mov     eax, [ebp+var_C]
.text:0000F12E                 imul    eax, 0Ch
.text:0000F131                 add     edx, eax
.text:0000F133                 push    edx
.text:0000F134                 mov     ecx, [ebp+var_20]
.text:0000F137                 push    ecx
.text:0000F138                 call    _move_termchar
.text:0000F13D                 add     esp, 0Ch
.text:0000F140                 jmp     short loc_F0E7
.text:0000F142 ; ---------------------------------------------------------------------------
.text:0000F142
.text:0000F142 loc_F142:                               ; CODE XREF: _insch+2FAj
.text:0000F142                                         ; _insch+387j
.text:0000F142                 mov     edx, [ebp+arg_4]
.text:0000F145                 mov     [ebp+var_48], edx
.text:0000F148                 mov     eax, [ebp+arg_4]
.text:0000F14B                 sub     eax, 1
.text:0000F14E                 mov     [ebp+arg_4], eax
.text:0000F151                 cmp     [ebp+var_48], 0
.text:0000F155                 jz      short loc_F185
.text:0000F157                 mov     ecx, [ebp+arg_0]
.text:0000F15A                 mov     edx, [ecx+70h]
.text:0000F15D                 add     edx, [ebp+var_8]
.text:0000F160                 mov     [ebp+var_4C], edx
.text:0000F163                 mov     eax, [ebp+var_8]
.text:0000F166                 add     eax, 1
.text:0000F169                 mov     [ebp+var_8], eax
.text:0000F16C                 mov     ecx, [ebp+arg_0]
.text:0000F16F                 add     ecx, 54h ; 'T'
.text:0000F172                 push    ecx
.text:0000F173                 mov     edx, [ebp+var_4C]
.text:0000F176                 push    edx
.text:0000F177                 mov     eax, [ebp+var_20]
.text:0000F17A                 push    eax
.text:0000F17B                 call    _copy_termchar
.text:0000F180                 add     esp, 0Ch
.text:0000F183                 jmp     short loc_F142
.text:0000F185 ; ---------------------------------------------------------------------------
.text:0000F185
.text:0000F185 loc_F185:                               ; CODE XREF: _insch+359j
.text:0000F185                 jmp     loc_F223
.text:0000F18A ; ---------------------------------------------------------------------------
.text:0000F18A
.text:0000F18A loc_F18A:                               ; CODE XREF: _insch+2DCj
.text:0000F18A                 mov     ecx, [ebp+var_8]
.text:0000F18D                 mov     [ebp+var_C], ecx
.text:0000F190
.text:0000F190 loc_F190:                               ; CODE XREF: _insch+3F1j
.text:0000F190                 mov     edx, [ebp+var_C]
.text:0000F193                 mov     [ebp+var_50], edx
.text:0000F196                 mov     eax, [ebp+var_C]
.text:0000F199                 sub     eax, 1
.text:0000F19C                 mov     [ebp+var_C], eax
.text:0000F19F                 cmp     [ebp+var_50], 0
.text:0000F1A3                 jz      short loc_F1EF
.text:0000F1A5                 mov     ecx, [ebp+arg_0]
.text:0000F1A8                 mov     edx, [ecx+70h]
.text:0000F1AB                 imul    edx, 0Ch
.text:0000F1AE                 mov     eax, [ebp+var_20]
.text:0000F1B1                 mov     ecx, [eax+14h]
.text:0000F1B4                 add     ecx, edx
.text:0000F1B6                 mov     edx, [ebp+var_C]
.text:0000F1B9                 imul    edx, 0Ch
.text:0000F1BC                 add     ecx, edx
.text:0000F1BE                 push    ecx
.text:0000F1BF                 mov     eax, [ebp+arg_0]
.text:0000F1C2                 mov     ecx, [eax+70h]
.text:0000F1C5                 imul    ecx, 0Ch
.text:0000F1C8                 mov     edx, [ebp+var_20]
.text:0000F1CB                 mov     eax, [edx+14h]
.text:0000F1CE                 add     eax, ecx
.text:0000F1D0                 mov     ecx, [ebp+var_C]
.text:0000F1D3                 imul    ecx, 0Ch
.text:0000F1D6                 add     eax, ecx
.text:0000F1D8                 mov     edx, [ebp+arg_4]
.text:0000F1DB                 imul    edx, 0Ch
.text:0000F1DE                 add     eax, edx
.text:0000F1E0                 push    eax
.text:0000F1E1                 mov     eax, [ebp+var_20]
.text:0000F1E4                 push    eax
.text:0000F1E5                 call    _move_termchar
.text:0000F1EA                 add     esp, 0Ch
.text:0000F1ED                 jmp     short loc_F190
.text:0000F1EF ; ---------------------------------------------------------------------------
.text:0000F1EF
.text:0000F1EF loc_F1EF:                               ; CODE XREF: _insch+3A7j
.text:0000F1EF                                         ; _insch+425j
.text:0000F1EF                 mov     ecx, [ebp+arg_4]
.text:0000F1F2                 mov     [ebp+var_54], ecx
.text:0000F1F5                 mov     edx, [ebp+arg_4]
.text:0000F1F8                 sub     edx, 1
.text:0000F1FB                 mov     [ebp+arg_4], edx
.text:0000F1FE                 cmp     [ebp+var_54], 0
.text:0000F202                 jz      short loc_F223
.text:0000F204                 mov     eax, [ebp+arg_0]
.text:0000F207                 add     eax, 54h ; 'T'
.text:0000F20A                 push    eax
.text:0000F20B                 mov     ecx, [ebp+arg_0]
.text:0000F20E                 mov     edx, [ecx+70h]
.text:0000F211                 add     edx, [ebp+arg_4]
.text:0000F214                 push    edx
.text:0000F215                 mov     eax, [ebp+var_20]
.text:0000F218                 push    eax
.text:0000F219                 call    _copy_termchar
.text:0000F21E                 add     esp, 0Ch
.text:0000F221                 jmp     short loc_F1EF
.text:0000F223 ; ---------------------------------------------------------------------------
.text:0000F223
.text:0000F223 loc_F223:                               ; CODE XREF: _insch:loc_F185j
.text:0000F223                                         ; _insch+406j
.text:0000F223                 push    edx
.text:0000F224                 mov     ecx, ebp
.text:0000F226                 push    eax
.text:0000F227                 lea     edx, $LN35_0
.text:0000F22D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000F232                 pop     eax
.text:0000F233                 pop     edx
.text:0000F234                 pop     edi
.text:0000F235                 add     esp, 54h
.text:0000F238                 cmp     ebp, esp
.text:0000F23A                 call    __RTC_CheckEsp
.text:0000F23F                 mov     esp, ebp
.text:0000F241                 pop     ebp
.text:0000F242                 retn
.text:0000F242 _insch          endp
.text:0000F242
.text:0000F242 ; ---------------------------------------------------------------------------
.text:0000F243                 align 4
.text:0000F244 $LN35_0         dd 3                    ; DATA XREF: _insch+42Bo
.text:0000F248                 dd offset $LN34
.text:0000F24C $LN34           dd 0FFFFFFE8h, 8        ; DATA XREF: .text:0000F248o
.text:0000F254                 dd offset $LN31_2       ; "eol"
.text:0000F258                 dd 0FFFFFFD4h, 8
.text:0000F260                 dd offset $LN32_1       ; "okstart"
.text:0000F264                 dd 0FFFFFFC4h, 8
.text:0000F26C                 dd offset $LN33_0       ; "okend"
.text:0000F270 $LN33_0         db 'okend',0            ; DATA XREF: .text:0000F26Co
.text:0000F276 $LN32_1         db 'okstart',0          ; DATA XREF: .text:0000F260o
.text:0000F27E $LN31_2         db 'eol',0              ; DATA XREF: .text:0000F254o
.text:0000F282                 db 0Ah dup(0CCh)
.text:0000F28C
.text:0000F28C ; =============== S U B R O U T I N E =======================================
.text:0000F28C
.text:0000F28C ; Attributes: bp-based frame
.text:0000F28C
.text:0000F28C _move_termchar  proc near               ; CODE XREF: _insch+33Cp
.text:0000F28C                                         ; _insch+3E9p
.text:0000F28C
.text:0000F28C arg_0           = dword ptr  8
.text:0000F28C arg_4           = dword ptr  0Ch
.text:0000F28C arg_8           = dword ptr  10h
.text:0000F28C
.text:0000F28C                 push    ebp
.text:0000F28D                 mov     ebp, esp
.text:0000F28F                 mov     eax, [ebp+arg_0]
.text:0000F292                 mov     ecx, [ebp+arg_4]
.text:0000F295                 sub     ecx, [eax+14h]
.text:0000F298                 mov     eax, ecx
.text:0000F29A                 cdq
.text:0000F29B                 mov     ecx, 0Ch
.text:0000F2A0                 idiv    ecx
.text:0000F2A2                 push    eax
.text:0000F2A3                 mov     edx, [ebp+arg_0]
.text:0000F2A6                 push    edx
.text:0000F2A7                 call    _clear_cc
.text:0000F2AC                 add     esp, 8
.text:0000F2AF                 mov     eax, [ebp+arg_8]
.text:0000F2B2                 mov     ecx, [ebp+arg_4]
.text:0000F2B5                 mov     edx, [eax]
.text:0000F2B7                 mov     [ecx], edx
.text:0000F2B9                 mov     edx, [eax+4]
.text:0000F2BC                 mov     [ecx+4], edx
.text:0000F2BF                 mov     eax, [eax+8]
.text:0000F2C2                 mov     [ecx+8], eax
.text:0000F2C5                 mov     ecx, [ebp+arg_8]
.text:0000F2C8                 cmp     dword ptr [ecx+8], 0
.text:0000F2CC                 jz      short loc_F2EA
.text:0000F2CE                 mov     eax, [ebp+arg_4]
.text:0000F2D1                 sub     eax, [ebp+arg_8]
.text:0000F2D4                 cdq
.text:0000F2D5                 mov     ecx, 0Ch
.text:0000F2DA                 idiv    ecx
.text:0000F2DC                 mov     edx, [ebp+arg_8]
.text:0000F2DF                 mov     ecx, [edx+8]
.text:0000F2E2                 sub     ecx, eax
.text:0000F2E4                 mov     edx, [ebp+arg_4]
.text:0000F2E7                 mov     [edx+8], ecx
.text:0000F2EA
.text:0000F2EA loc_F2EA:                               ; CODE XREF: _move_termchar+40j
.text:0000F2EA                 mov     eax, [ebp+arg_8]
.text:0000F2ED                 mov     dword ptr [eax+8], 0
.text:0000F2F4                 cmp     ebp, esp
.text:0000F2F6                 call    __RTC_CheckEsp
.text:0000F2FB                 pop     ebp
.text:0000F2FC                 retn
.text:0000F2FC _move_termchar  endp
.text:0000F2FC
.text:0000F2FC ; ---------------------------------------------------------------------------
.text:0000F2FD                 db 0Fh dup(0CCh)
.text:0000F30C
.text:0000F30C ; =============== S U B R O U T I N E =======================================
.text:0000F30C
.text:0000F30C ; Attributes: bp-based frame
.text:0000F30C
.text:0000F30C _toggle_mode    proc near               ; CODE XREF: _term_out+2C56p
.text:0000F30C                                         ; _term_out+2D9Ep
.text:0000F30C
.text:0000F30C var_C           = dword ptr -0Ch
.text:0000F30C var_8           = dword ptr -8
.text:0000F30C var_4           = dword ptr -4
.text:0000F30C arg_0           = dword ptr  8
.text:0000F30C arg_4           = dword ptr  0Ch
.text:0000F30C arg_8           = dword ptr  10h
.text:0000F30C arg_C           = dword ptr  14h
.text:0000F30C
.text:0000F30C                 push    ebp
.text:0000F30D                 mov     ebp, esp
.text:0000F30F                 sub     esp, 0Ch
.text:0000F312                 push    esi
.text:0000F313                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000F31A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000F321                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F328                 cmp     [ebp+arg_8], 0
.text:0000F32C                 jz      loc_F87D
.text:0000F332                 mov     eax, [ebp+arg_4]
.text:0000F335                 mov     [ebp+var_4], eax
.text:0000F338                 cmp     [ebp+var_4], 3E8h
.text:0000F33F                 jg      short loc_F372
.text:0000F341                 cmp     [ebp+var_4], 3E8h
.text:0000F348                 jz      loc_F689
.text:0000F34E                 mov     ecx, [ebp+var_4]
.text:0000F351                 sub     ecx, 1
.text:0000F354                 mov     [ebp+var_4], ecx
.text:0000F357                 cmp     [ebp+var_4], 2Eh ; '.' ; switch 47 cases
.text:0000F35B                 ja      $LN48_0         ; jumptable 0000F36B default case
.text:0000F361                 mov     edx, [ebp+var_4]
.text:0000F364                 movzx   eax, ds:$LN55[edx]
.text:0000F36B                 jmp     ds:$LN57_1[eax*4] ; switch jump
.text:0000F372 ; ---------------------------------------------------------------------------
.text:0000F372
.text:0000F372 loc_F372:                               ; CODE XREF: _toggle_mode+33j
.text:0000F372                 cmp     [ebp+var_4], 417h
.text:0000F379                 jg      short loc_F3B4
.text:0000F37B                 cmp     [ebp+var_4], 417h
.text:0000F382                 jz      loc_F712
.text:0000F388                 cmp     [ebp+var_4], 3EAh
.text:0000F38F                 jz      loc_F6B6
.text:0000F395                 cmp     [ebp+var_4], 3EEh
.text:0000F39C                 jz      loc_F6E4
.text:0000F3A2                 cmp     [ebp+var_4], 3F7h
.text:0000F3A9                 jz      loc_F6FB
.text:0000F3AF                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F3B4 ; ---------------------------------------------------------------------------
.text:0000F3B4
.text:0000F3B4 loc_F3B4:                               ; CODE XREF: _toggle_mode+6Dj
.text:0000F3B4                 cmp     [ebp+var_4], 418h
.text:0000F3BB                 jz      loc_F77B
.text:0000F3C1                 cmp     [ebp+var_4], 419h
.text:0000F3C8                 jz      loc_F7AE
.text:0000F3CE                 cmp     [ebp+var_4], 7D4h
.text:0000F3D5                 jz      loc_F866
.text:0000F3DB                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F3E0 ; ---------------------------------------------------------------------------
.text:0000F3E0
.text:0000F3E0 $LN47_0:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F3E0                                         ; DATA XREF: .text:$LN57_1o
.text:0000F3E0                 mov     ecx, [ebp+arg_0] ; jumptable 0000F36B case 0
.text:0000F3E3                 mov     edx, [ebp+arg_C]
.text:0000F3E6                 mov     [ecx+140h], edx
.text:0000F3EC                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F3F1 ; ---------------------------------------------------------------------------
.text:0000F3F1
.text:0000F3F1 $LN46_0:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F3F1                                         ; DATA XREF: .text:$LN57_1o
.text:0000F3F1                 xor     eax, eax        ; jumptable 0000F36B case 1
.text:0000F3F3                 cmp     [ebp+arg_C], 0
.text:0000F3F7                 setz    al
.text:0000F3FA                 mov     ecx, [ebp+arg_0]
.text:0000F3FD                 mov     [ecx+148h], eax
.text:0000F403                 mov     edx, [ebp+arg_0]
.text:0000F406                 cmp     dword ptr [edx+148h], 0
.text:0000F40D                 jz      short loc_F42B
.text:0000F40F                 mov     eax, [ebp+arg_0]
.text:0000F412                 mov     dword ptr [eax+0C4h], 0
.text:0000F41C                 mov     ecx, [ebp+arg_0]
.text:0000F41F                 mov     dword ptr [ecx+0D8h], 0
.text:0000F429                 jmp     short loc_F43D
.text:0000F42B ; ---------------------------------------------------------------------------
.text:0000F42B
.text:0000F42B loc_F42B:                               ; CODE XREF: _toggle_mode+101j
.text:0000F42B                 mov     edx, [ebp+arg_0]
.text:0000F42E                 mov     eax, [ebp+arg_0]
.text:0000F431                 mov     ecx, [eax+1104h]
.text:0000F437                 mov     [edx+0C4h], ecx
.text:0000F43D
.text:0000F43D loc_F43D:                               ; CODE XREF: _toggle_mode+11Dj
.text:0000F43D                 mov     edx, [ebp+arg_0]
.text:0000F440                 push    edx
.text:0000F441                 call    _term_schedule_tblink
.text:0000F446                 add     esp, 4
.text:0000F449                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F44E ; ---------------------------------------------------------------------------
.text:0000F44E
.text:0000F44E $LN43_0:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F44E                                         ; DATA XREF: .text:$LN57_1o
.text:0000F44E                 mov     eax, [ebp+arg_0] ; jumptable 0000F36B case 2
.text:0000F451                 push    eax
.text:0000F452                 call    _deselect
.text:0000F457                 add     esp, 4
.text:0000F45A                 mov     ecx, [ebp+arg_0]
.text:0000F45D                 cmp     dword ptr [ecx+114Ch], 0
.text:0000F464                 jnz     short loc_F490
.text:0000F466                 mov     edx, [ebp+arg_0]
.text:0000F469                 mov     eax, [edx+128h]
.text:0000F46F                 push    eax
.text:0000F470                 mov     ecx, [ebp+arg_C]
.text:0000F473                 neg     ecx
.text:0000F475                 sbb     ecx, ecx
.text:0000F477                 and     ecx, 34h
.text:0000F47A                 add     ecx, 50h ; 'P'
.text:0000F47D                 push    ecx
.text:0000F47E                 mov     edx, [ebp+arg_0]
.text:0000F481                 mov     eax, [edx+1088h]
.text:0000F487                 push    eax
.text:0000F488                 call    _request_resize
.text:0000F48D                 add     esp, 0Ch
.text:0000F490
.text:0000F490 loc_F490:                               ; CODE XREF: _toggle_mode+158j
.text:0000F490                 mov     ecx, [ebp+arg_0]
.text:0000F493                 mov     edx, [ebp+arg_C]
.text:0000F496                 mov     [ecx+0B4h], edx
.text:0000F49C                 mov     eax, [ebp+arg_0]
.text:0000F49F                 mov     dword ptr [eax+7Ch], 0
.text:0000F4A6                 mov     ecx, [ebp+arg_0]
.text:0000F4A9                 mov     dword ptr [ecx+19Ch], 0
.text:0000F4B3                 mov     edx, [ebp+arg_0]
.text:0000F4B6                 mov     eax, [edx+128h]
.text:0000F4BC                 sub     eax, 1
.text:0000F4BF                 mov     [ebp+var_8], eax
.text:0000F4C2                 mov     ecx, [ebp+arg_0]
.text:0000F4C5                 mov     edx, [ebp+var_8]
.text:0000F4C8                 mov     [ecx+80h], edx
.text:0000F4CE                 mov     eax, [ebp+arg_0]
.text:0000F4D1                 mov     ecx, [ebp+var_8]
.text:0000F4D4                 mov     [eax+1A0h], ecx
.text:0000F4DA                 push    0
.text:0000F4DC                 push    0
.text:0000F4DE                 push    0
.text:0000F4E0                 mov     edx, [ebp+arg_0]
.text:0000F4E3                 push    edx
.text:0000F4E4                 call    _move
.text:0000F4E9                 add     esp, 10h
.text:0000F4EC                 push    1
.text:0000F4EE                 push    1
.text:0000F4F0                 push    0
.text:0000F4F2                 mov     eax, [ebp+arg_0]
.text:0000F4F5                 push    eax
.text:0000F4F6                 call    _erase_lots
.text:0000F4FB                 add     esp, 10h
.text:0000F4FE                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F503 ; ---------------------------------------------------------------------------
.text:0000F503
.text:0000F503 $LN41:                                  ; CODE XREF: _toggle_mode+5Fj
.text:0000F503                                         ; DATA XREF: .text:$LN57_1o
.text:0000F503                 mov     ecx, [ebp+arg_0] ; jumptable 0000F36B case 4
.text:0000F506                 cmp     dword ptr [ecx+0A8h], 0
.text:0000F50D                 jz      short loc_F52F
.text:0000F50F                 cmp     [ebp+arg_C], 0
.text:0000F513                 jnz     short loc_F52F
.text:0000F515                 mov     edx, [ebp+arg_0]
.text:0000F518                 mov     eax, [edx+0ACh]
.text:0000F51E                 push    eax
.text:0000F51F                 push    1
.text:0000F521                 mov     ecx, [ebp+arg_0]
.text:0000F524                 push    ecx
.text:0000F525                 call    _term_schedule_vbell
.text:0000F52A                 add     esp, 0Ch
.text:0000F52D                 jmp     short loc_F559
.text:0000F52F ; ---------------------------------------------------------------------------
.text:0000F52F
.text:0000F52F loc_F52F:                               ; CODE XREF: _toggle_mode+201j
.text:0000F52F                                         ; _toggle_mode+207j
.text:0000F52F                 mov     edx, [ebp+arg_0]
.text:0000F532                 cmp     dword ptr [edx+0A8h], 0
.text:0000F539                 jnz     short loc_F559
.text:0000F53B                 cmp     [ebp+arg_C], 0
.text:0000F53F                 jz      short loc_F559
.text:0000F541                 mov     esi, esp
.text:0000F543                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:0000F549                 cmp     esi, esp
.text:0000F54B                 call    __RTC_CheckEsp
.text:0000F550                 mov     ecx, [ebp+arg_0]
.text:0000F553                 mov     [ecx+0ACh], eax
.text:0000F559
.text:0000F559 loc_F559:                               ; CODE XREF: _toggle_mode+221j
.text:0000F559                                         ; _toggle_mode+22Dj ...
.text:0000F559                 mov     edx, [ebp+arg_0]
.text:0000F55C                 mov     eax, [ebp+arg_C]
.text:0000F55F                 mov     [edx+0A8h], eax
.text:0000F565                 mov     ecx, [ebp+arg_0]
.text:0000F568                 push    ecx
.text:0000F569                 call    _seen_disp_event
.text:0000F56E                 add     esp, 4
.text:0000F571                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F576 ; ---------------------------------------------------------------------------
.text:0000F576
.text:0000F576 $LN37_0:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F576                                         ; DATA XREF: .text:$LN57_1o
.text:0000F576                 mov     edx, [ebp+arg_0] ; jumptable 0000F36B case 5
.text:0000F579                 mov     eax, [ebp+arg_C]
.text:0000F57C                 mov     [edx+84h], eax
.text:0000F582                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F587 ; ---------------------------------------------------------------------------
.text:0000F587
.text:0000F587 $LN36_0:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F587                                         ; DATA XREF: .text:$LN57_1o
.text:0000F587                 mov     ecx, [ebp+arg_0] ; jumptable 0000F36B case 6
.text:0000F58A                 mov     edx, [ebp+arg_C]
.text:0000F58D                 mov     [ecx+88h], edx
.text:0000F593                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F598 ; ---------------------------------------------------------------------------
.text:0000F598
.text:0000F598 $LN35_1:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F598                                         ; DATA XREF: .text:$LN57_1o
.text:0000F598                 xor     eax, eax        ; jumptable 0000F36B case 7
.text:0000F59A                 cmp     [ebp+arg_C], 0
.text:0000F59E                 setz    al
.text:0000F5A1                 mov     ecx, [ebp+arg_0]
.text:0000F5A4                 mov     [ecx+14Ch], eax
.text:0000F5AA                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F5AF ; ---------------------------------------------------------------------------
.text:0000F5AF
.text:0000F5AF $LN34_0:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F5AF                                         ; DATA XREF: .text:$LN57_1o
.text:0000F5AF                 mov     edx, [ebp+arg_0] ; jumptable 0000F36B case 9
.text:0000F5B2                 mov     eax, [ebp+arg_C]
.text:0000F5B5                 mov     [edx+0CCh], eax
.text:0000F5BB                 mov     ecx, [ebp+arg_0]
.text:0000F5BE                 cmp     dword ptr [ecx+1084h], 0
.text:0000F5C5                 jz      short loc_F5DF
.text:0000F5C7                 push    0
.text:0000F5C9                 push    0
.text:0000F5CB                 push    0
.text:0000F5CD                 mov     edx, [ebp+arg_0]
.text:0000F5D0                 mov     eax, [edx+1084h]
.text:0000F5D6                 push    eax
.text:0000F5D7                 call    _ldisc_send
.text:0000F5DC                 add     esp, 10h
.text:0000F5DF
.text:0000F5DF loc_F5DF:                               ; CODE XREF: _toggle_mode+2B9j
.text:0000F5DF                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F5E4 ; ---------------------------------------------------------------------------
.text:0000F5E4
.text:0000F5E4 $LN32_2:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F5E4                                         ; DATA XREF: .text:$LN57_1o
.text:0000F5E4                 mov     ecx, [ebp+arg_0] ; jumptable 0000F36B case 24
.text:0000F5E7                 mov     edx, [ecx]
.text:0000F5E9                 and     edx, 4010h
.text:0000F5EF                 jnz     short loc_F603
.text:0000F5F1                 mov     eax, [ebp+arg_0]
.text:0000F5F4                 mov     dword ptr [eax+0E44h], 0
.text:0000F5FE                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F603 ; ---------------------------------------------------------------------------
.text:0000F603
.text:0000F603 loc_F603:                               ; CODE XREF: _toggle_mode+2E3j
.text:0000F603                 mov     ecx, [ebp+arg_0]
.text:0000F606                 mov     edx, [ebp+arg_C]
.text:0000F609                 mov     [ecx+0B0h], edx
.text:0000F60F                 mov     eax, [ebp+arg_0]
.text:0000F612                 push    eax
.text:0000F613                 call    _seen_disp_event
.text:0000F618                 add     esp, 4
.text:0000F61B                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F620 ; ---------------------------------------------------------------------------
.text:0000F620
.text:0000F620 $LN30_2:                                ; CODE XREF: _toggle_mode+5Fj
.text:0000F620                                         ; DATA XREF: .text:$LN57_1o
.text:0000F620                 mov     ecx, [ebp+arg_0] ; jumptable 0000F36B case 46
.text:0000F623                 mov     edx, [ecx]
.text:0000F625                 and     edx, 4000h
.text:0000F62B                 jnz     short loc_F63F
.text:0000F62D                 mov     eax, [ebp+arg_0]
.text:0000F630                 mov     dword ptr [eax+0E44h], 0
.text:0000F63A                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F63F ; ---------------------------------------------------------------------------
.text:0000F63F
.text:0000F63F loc_F63F:                               ; CODE XREF: _toggle_mode+31Fj
.text:0000F63F                 mov     ecx, [ebp+arg_0]
.text:0000F642                 push    ecx
.text:0000F643                 call    _deselect
.text:0000F648                 add     esp, 4
.text:0000F64B                 push    0
.text:0000F64D                 push    0
.text:0000F64F                 mov     edx, [ebp+arg_0]
.text:0000F652                 mov     eax, [edx+1134h]
.text:0000F658                 neg     eax
.text:0000F65A                 sbb     eax, eax
.text:0000F65C                 not     eax
.text:0000F65E                 and     eax, [ebp+arg_C]
.text:0000F661                 push    eax
.text:0000F662                 mov     ecx, [ebp+arg_0]
.text:0000F665                 push    ecx
.text:0000F666                 call    _swap_screen
.text:0000F66B                 add     esp, 10h
.text:0000F66E                 mov     edx, [ebp+arg_0]
.text:0000F671                 cmp     dword ptr [edx+1164h], 0
.text:0000F678                 jz      short loc_F684
.text:0000F67A                 mov     eax, [ebp+arg_0]
.text:0000F67D                 mov     dword ptr [eax+10h], 0
.text:0000F684
.text:0000F684 loc_F684:                               ; CODE XREF: _toggle_mode+36Cj
.text:0000F684                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F689 ; ---------------------------------------------------------------------------
.text:0000F689
.text:0000F689 loc_F689:                               ; CODE XREF: _toggle_mode+3Cj
.text:0000F689                 xor     ecx, ecx
.text:0000F68B                 cmp     [ebp+arg_C], 0
.text:0000F68F                 setnz   cl
.text:0000F692                 mov     edx, [ebp+arg_0]
.text:0000F695                 mov     [edx+15Ch], ecx
.text:0000F69B                 mov     eax, [ebp+arg_C]
.text:0000F69E                 push    eax
.text:0000F69F                 mov     ecx, [ebp+arg_0]
.text:0000F6A2                 mov     edx, [ecx+1088h]
.text:0000F6A8                 push    edx
.text:0000F6A9                 call    _set_raw_mouse_mode
.text:0000F6AE                 add     esp, 8
.text:0000F6B1                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F6B6 ; ---------------------------------------------------------------------------
.text:0000F6B6
.text:0000F6B6 loc_F6B6:                               ; CODE XREF: _toggle_mode+83j
.text:0000F6B6                 mov     eax, [ebp+arg_C]
.text:0000F6B9                 neg     eax
.text:0000F6BB                 sbb     eax, eax
.text:0000F6BD                 and     eax, 2
.text:0000F6C0                 mov     ecx, [ebp+arg_0]
.text:0000F6C3                 mov     [ecx+15Ch], eax
.text:0000F6C9                 mov     edx, [ebp+arg_C]
.text:0000F6CC                 push    edx
.text:0000F6CD                 mov     eax, [ebp+arg_0]
.text:0000F6D0                 mov     ecx, [eax+1088h]
.text:0000F6D6                 push    ecx
.text:0000F6D7                 call    _set_raw_mouse_mode
.text:0000F6DC                 add     esp, 8
.text:0000F6DF                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F6E4 ; ---------------------------------------------------------------------------
.text:0000F6E4
.text:0000F6E4 loc_F6E4:                               ; CODE XREF: _toggle_mode+90j
.text:0000F6E4                 xor     edx, edx
.text:0000F6E6                 cmp     [ebp+arg_C], 0
.text:0000F6EA                 setnz   dl
.text:0000F6ED                 mov     eax, [ebp+arg_0]
.text:0000F6F0                 mov     [eax+160h], edx
.text:0000F6F6                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F6FB ; ---------------------------------------------------------------------------
.text:0000F6FB
.text:0000F6FB loc_F6FB:                               ; CODE XREF: _toggle_mode+9Dj
.text:0000F6FB                 xor     ecx, ecx
.text:0000F6FD                 cmp     [ebp+arg_C], 0
.text:0000F701                 setnz   cl
.text:0000F704                 mov     edx, [ebp+arg_0]
.text:0000F707                 mov     [edx+164h], ecx
.text:0000F70D                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F712 ; ---------------------------------------------------------------------------
.text:0000F712
.text:0000F712 loc_F712:                               ; CODE XREF: _toggle_mode+76j
.text:0000F712                 mov     eax, [ebp+arg_0]
.text:0000F715                 mov     ecx, [eax]
.text:0000F717                 and     ecx, 4000h
.text:0000F71D                 jnz     short loc_F731
.text:0000F71F                 mov     edx, [ebp+arg_0]
.text:0000F722                 mov     dword ptr [edx+0E44h], 0
.text:0000F72C                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F731 ; ---------------------------------------------------------------------------
.text:0000F731
.text:0000F731 loc_F731:                               ; CODE XREF: _toggle_mode+411j
.text:0000F731                 mov     eax, [ebp+arg_0]
.text:0000F734                 push    eax
.text:0000F735                 call    _deselect
.text:0000F73A                 add     esp, 4
.text:0000F73D                 push    1
.text:0000F73F                 push    1
.text:0000F741                 mov     ecx, [ebp+arg_0]
.text:0000F744                 mov     edx, [ecx+1134h]
.text:0000F74A                 neg     edx
.text:0000F74C                 sbb     edx, edx
.text:0000F74E                 not     edx
.text:0000F750                 and     edx, [ebp+arg_C]
.text:0000F753                 push    edx
.text:0000F754                 mov     eax, [ebp+arg_0]
.text:0000F757                 push    eax
.text:0000F758                 call    _swap_screen
.text:0000F75D                 add     esp, 10h
.text:0000F760                 mov     ecx, [ebp+arg_0]
.text:0000F763                 cmp     dword ptr [ecx+1164h], 0
.text:0000F76A                 jz      short loc_F776
.text:0000F76C                 mov     edx, [ebp+arg_0]
.text:0000F76F                 mov     dword ptr [edx+10h], 0
.text:0000F776
.text:0000F776 loc_F776:                               ; CODE XREF: _toggle_mode+45Ej
.text:0000F776                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F77B ; ---------------------------------------------------------------------------
.text:0000F77B
.text:0000F77B loc_F77B:                               ; CODE XREF: _toggle_mode+AFj
.text:0000F77B                 mov     eax, [ebp+arg_0]
.text:0000F77E                 cmp     dword ptr [eax+1134h], 0
.text:0000F785                 jnz     short loc_F797
.text:0000F787                 mov     ecx, [ebp+arg_C]
.text:0000F78A                 push    ecx
.text:0000F78B                 mov     edx, [ebp+arg_0]
.text:0000F78E                 push    edx
.text:0000F78F                 call    _save_cursor
.text:0000F794                 add     esp, 8
.text:0000F797
.text:0000F797 loc_F797:                               ; CODE XREF: _toggle_mode+479j
.text:0000F797                 cmp     [ebp+arg_C], 0
.text:0000F79B                 jnz     short loc_F7A9
.text:0000F79D                 mov     eax, [ebp+arg_0]
.text:0000F7A0                 push    eax
.text:0000F7A1                 call    _seen_disp_event
.text:0000F7A6                 add     esp, 4
.text:0000F7A9
.text:0000F7A9 loc_F7A9:                               ; CODE XREF: _toggle_mode+48Fj
.text:0000F7A9                 jmp     $LN48_0         ; jumptable 0000F36B default case
.text:0000F7AE ; ---------------------------------------------------------------------------
.text:0000F7AE
.text:0000F7AE loc_F7AE:                               ; CODE XREF: _toggle_mode+BCj
.text:0000F7AE                 cmp     [ebp+arg_C], 0
.text:0000F7B2                 jz      short loc_F7D0
.text:0000F7B4                 mov     ecx, [ebp+arg_0]
.text:0000F7B7                 cmp     dword ptr [ecx+1134h], 0
.text:0000F7BE                 jnz     short loc_F7D0
.text:0000F7C0                 mov     edx, [ebp+arg_C]
.text:0000F7C3                 push    edx
.text:0000F7C4                 mov     eax, [ebp+arg_0]
.text:0000F7C7                 push    eax
.text:0000F7C8                 call    _save_cursor
.text:0000F7CD                 add     esp, 8
.text:0000F7D0
.text:0000F7D0 loc_F7D0:                               ; CODE XREF: _toggle_mode+4A6j
.text:0000F7D0                                         ; _toggle_mode+4B2j
.text:0000F7D0                 cmp     [ebp+arg_C], 0
.text:0000F7D4                 jnz     short loc_F7E2
.text:0000F7D6                 mov     ecx, [ebp+arg_0]
.text:0000F7D9                 push    ecx
.text:0000F7DA                 call    _seen_disp_event
.text:0000F7DF                 add     esp, 4
.text:0000F7E2
.text:0000F7E2 loc_F7E2:                               ; CODE XREF: _toggle_mode+4C8j
.text:0000F7E2                 mov     edx, [ebp+arg_0]
.text:0000F7E5                 mov     eax, [edx]
.text:0000F7E7                 and     eax, 4000h
.text:0000F7EC                 jnz     short loc_F7FD
.text:0000F7EE                 mov     ecx, [ebp+arg_0]
.text:0000F7F1                 mov     dword ptr [ecx+0E44h], 0
.text:0000F7FB                 jmp     short $LN48_0   ; jumptable 0000F36B default case
.text:0000F7FD ; ---------------------------------------------------------------------------
.text:0000F7FD
.text:0000F7FD loc_F7FD:                               ; CODE XREF: _toggle_mode+4E0j
.text:0000F7FD                 mov     edx, [ebp+arg_0]
.text:0000F800                 push    edx
.text:0000F801                 call    _deselect
.text:0000F806                 add     esp, 4
.text:0000F809                 push    0
.text:0000F80B                 push    1
.text:0000F80D                 mov     eax, [ebp+arg_0]
.text:0000F810                 mov     ecx, [eax+1134h]
.text:0000F816                 neg     ecx
.text:0000F818                 sbb     ecx, ecx
.text:0000F81A                 not     ecx
.text:0000F81C                 and     ecx, [ebp+arg_C]
.text:0000F81F                 push    ecx
.text:0000F820                 mov     edx, [ebp+arg_0]
.text:0000F823                 push    edx
.text:0000F824                 call    _swap_screen
.text:0000F829                 add     esp, 10h
.text:0000F82C                 cmp     [ebp+arg_C], 0
.text:0000F830                 jnz     short loc_F84E
.text:0000F832                 mov     eax, [ebp+arg_0]
.text:0000F835                 cmp     dword ptr [eax+1134h], 0
.text:0000F83C                 jnz     short loc_F84E
.text:0000F83E                 mov     ecx, [ebp+arg_C]
.text:0000F841                 push    ecx
.text:0000F842                 mov     edx, [ebp+arg_0]
.text:0000F845                 push    edx
.text:0000F846                 call    _save_cursor
.text:0000F84B                 add     esp, 8
.text:0000F84E
.text:0000F84E loc_F84E:                               ; CODE XREF: _toggle_mode+524j
.text:0000F84E                                         ; _toggle_mode+530j
.text:0000F84E                 mov     eax, [ebp+arg_0]
.text:0000F851                 cmp     dword ptr [eax+1164h], 0
.text:0000F858                 jz      short loc_F864
.text:0000F85A                 mov     ecx, [ebp+arg_0]
.text:0000F85D                 mov     dword ptr [ecx+10h], 0
.text:0000F864
.text:0000F864 loc_F864:                               ; CODE XREF: _toggle_mode+54Cj
.text:0000F864                 jmp     short $LN48_0   ; jumptable 0000F36B default case
.text:0000F866 ; ---------------------------------------------------------------------------
.text:0000F866
.text:0000F866 loc_F866:                               ; CODE XREF: _toggle_mode+C9j
.text:0000F866                 xor     edx, edx
.text:0000F868                 cmp     [ebp+arg_C], 0
.text:0000F86C                 setnz   dl
.text:0000F86F                 mov     eax, [ebp+arg_0]
.text:0000F872                 mov     [eax+16Ch], edx
.text:0000F878
.text:0000F878 $LN48_0:                                ; CODE XREF: _toggle_mode+4Fj
.text:0000F878                                         ; _toggle_mode+5Fj ...
.text:0000F878                 jmp     $LN51_0         ; jumptable 0000F36B default case
.text:0000F87D ; ---------------------------------------------------------------------------
.text:0000F87D
.text:0000F87D loc_F87D:                               ; CODE XREF: _toggle_mode+20j
.text:0000F87D                 mov     ecx, [ebp+arg_4]
.text:0000F880                 mov     [ebp+var_C], ecx
.text:0000F883                 mov     edx, [ebp+var_C]
.text:0000F886                 sub     edx, 4
.text:0000F889                 mov     [ebp+var_C], edx
.text:0000F88C                 cmp     [ebp+var_C], 1Eh ; switch 31 cases
.text:0000F890                 ja      $LN51_0         ; jumptable 0000F8A0 default case
.text:0000F896                 mov     eax, [ebp+var_C]
.text:0000F899                 movzx   ecx, ds:$LN56_0[eax]
.text:0000F8A0                 jmp     ds:$LN58_2[ecx*4] ; switch jump
.text:0000F8A7 ; ---------------------------------------------------------------------------
.text:0000F8A7
.text:0000F8A7 $LN7_5:                                 ; CODE XREF: _toggle_mode+594j
.text:0000F8A7                                         ; DATA XREF: .text:$LN58_2o
.text:0000F8A7                 mov     edx, [ebp+arg_0] ; jumptable 0000F8A0 case 0
.text:0000F8AA                 mov     eax, [edx]
.text:0000F8AC                 and     eax, 8
.text:0000F8AF                 jnz     short loc_F8C3
.text:0000F8B1                 mov     ecx, [ebp+arg_0]
.text:0000F8B4                 mov     dword ptr [ecx+0E44h], 0
.text:0000F8BE                 jmp     $LN51_0         ; jumptable 0000F8A0 default case
.text:0000F8C3 ; ---------------------------------------------------------------------------
.text:0000F8C3
.text:0000F8C3 loc_F8C3:                               ; CODE XREF: _toggle_mode+5A3j
.text:0000F8C3                 mov     edx, [ebp+arg_0]
.text:0000F8C6                 mov     eax, [ebp+arg_C]
.text:0000F8C9                 mov     [edx+90h], eax
.text:0000F8CF                 jmp     short $LN51_0   ; jumptable 0000F8A0 default case
.text:0000F8D1 ; ---------------------------------------------------------------------------
.text:0000F8D1
.text:0000F8D1 $LN5_1:                                 ; CODE XREF: _toggle_mode+594j
.text:0000F8D1                                         ; DATA XREF: .text:$LN58_2o
.text:0000F8D1                 xor     ecx, ecx        ; jumptable 0000F8A0 case 8
.text:0000F8D3                 cmp     [ebp+arg_C], 0
.text:0000F8D7                 setz    cl
.text:0000F8DA                 mov     edx, [ebp+arg_0]
.text:0000F8DD                 mov     [edx+0C8h], ecx
.text:0000F8E3                 mov     eax, [ebp+arg_0]
.text:0000F8E6                 cmp     dword ptr [eax+1084h], 0
.text:0000F8ED                 jz      short loc_F907
.text:0000F8EF                 push    0
.text:0000F8F1                 push    0
.text:0000F8F3                 push    0
.text:0000F8F5                 mov     ecx, [ebp+arg_0]
.text:0000F8F8                 mov     edx, [ecx+1084h]
.text:0000F8FE                 push    edx
.text:0000F8FF                 call    _ldisc_send
.text:0000F904                 add     esp, 10h
.text:0000F907
.text:0000F907 loc_F907:                               ; CODE XREF: _toggle_mode+5E1j
.text:0000F907                 jmp     short $LN51_0   ; jumptable 0000F8A0 default case
.text:0000F909 ; ---------------------------------------------------------------------------
.text:0000F909
.text:0000F909 $LN3_0:                                 ; CODE XREF: _toggle_mode+594j
.text:0000F909                                         ; DATA XREF: .text:$LN58_2o
.text:0000F909                 mov     eax, [ebp+arg_0] ; jumptable 0000F8A0 case 16
.text:0000F90C                 mov     ecx, [ebp+arg_C]
.text:0000F90F                 mov     [eax+150h], ecx
.text:0000F915                 jmp     short $LN51_0   ; jumptable 0000F8A0 default case
.text:0000F917 ; ---------------------------------------------------------------------------
.text:0000F917
.text:0000F917 $LN2:                                   ; CODE XREF: _toggle_mode+594j
.text:0000F917                                         ; DATA XREF: .text:$LN58_2o
.text:0000F917                 mov     edx, [ebp+arg_0] ; jumptable 0000F8A0 case 30
.text:0000F91A                 mov     eax, [edx]
.text:0000F91C                 and     eax, 4010h
.text:0000F921                 jnz     short loc_F932
.text:0000F923                 mov     ecx, [ebp+arg_0]
.text:0000F926                 mov     dword ptr [ecx+0E44h], 0
.text:0000F930                 jmp     short $LN51_0   ; jumptable 0000F8A0 default case
.text:0000F932 ; ---------------------------------------------------------------------------
.text:0000F932
.text:0000F932 loc_F932:                               ; CODE XREF: _toggle_mode+615j
.text:0000F932                 xor     edx, edx
.text:0000F934                 cmp     [ebp+arg_C], 0
.text:0000F938                 setz    dl
.text:0000F93B                 mov     eax, [ebp+arg_0]
.text:0000F93E                 mov     [eax+158h], edx
.text:0000F944
.text:0000F944 $LN51_0:                                ; CODE XREF: _toggle_mode:$LN48_0j
.text:0000F944                                         ; _toggle_mode+584j ...
.text:0000F944                 pop     esi             ; jumptable 0000F8A0 default case
.text:0000F945                 add     esp, 0Ch
.text:0000F948                 cmp     ebp, esp
.text:0000F94A                 call    __RTC_CheckEsp
.text:0000F94F                 mov     esp, ebp
.text:0000F951                 pop     ebp
.text:0000F952                 retn
.text:0000F952 _toggle_mode    endp
.text:0000F952
.text:0000F952 ; ---------------------------------------------------------------------------
.text:0000F953                 align 4
.text:0000F954 $LN57_1         dd offset $LN47_0       ; DATA XREF: _toggle_mode+5Fr
.text:0000F954                 dd offset $LN46_0       ; jump table for switch statement
.text:0000F954                 dd offset $LN43_0
.text:0000F954                 dd offset $LN41
.text:0000F954                 dd offset $LN37_0
.text:0000F954                 dd offset $LN36_0
.text:0000F954                 dd offset $LN35_1
.text:0000F954                 dd offset $LN34_0
.text:0000F954                 dd offset $LN32_2
.text:0000F954                 dd offset $LN30_2
.text:0000F954                 dd offset $LN48_0
.text:0000F980 $LN55           db      0,     1,     2,   0Ah ; DATA XREF: _toggle_mode+58r
.text:0000F980                 db      3,     4,     5,     6 ; indirect table for switch statement
.text:0000F980                 db    0Ah,     7,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db      8,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:0000F980                 db    0Ah,   0Ah,     9
.text:0000F9AF                 align 10h
.text:0000F9B0 $LN58_2         dd offset $LN7_5        ; DATA XREF: _toggle_mode+594r
.text:0000F9B0                 dd offset $LN5_1        ; jump table for switch statement
.text:0000F9B0                 dd offset $LN3_0
.text:0000F9B0                 dd offset $LN2
.text:0000F9B0                 dd offset $LN51_0
.text:0000F9C4 $LN56_0         db      0,     4,     4,     4 ; DATA XREF: _toggle_mode+58Dr
.text:0000F9C4                 db      4,     4,     4,     4 ; indirect table for switch statement
.text:0000F9C4                 db      1,     4,     4,     4
.text:0000F9C4                 db      4,     4,     4,     4
.text:0000F9C4                 db      2,     4,     4,     4
.text:0000F9C4                 db      4,     4,     4,     4
.text:0000F9C4                 db      4,     4,     4,     4
.text:0000F9C4                 db      4,     4,     3
.text:0000F9E3                 db 9 dup(0CCh)
.text:0000F9EC
.text:0000F9EC ; =============== S U B R O U T I N E =======================================
.text:0000F9EC
.text:0000F9EC ; Attributes: bp-based frame
.text:0000F9EC
.text:0000F9EC _do_osc         proc near               ; CODE XREF: _term_out+15F5p
.text:0000F9EC                                         ; _term_out+475Cp
.text:0000F9EC
.text:0000F9EC var_8           = dword ptr -8
.text:0000F9EC var_4           = dword ptr -4
.text:0000F9EC arg_0           = dword ptr  8
.text:0000F9EC
.text:0000F9EC                 push    ebp
.text:0000F9ED                 mov     ebp, esp
.text:0000F9EF                 sub     esp, 8
.text:0000F9F2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000F9F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FA00                 mov     eax, [ebp+arg_0]
.text:0000FA03                 cmp     dword ptr [eax+0A3Ch], 0
.text:0000FA0A                 jz      short loc_FA63
.text:0000FA0C
.text:0000FA0C loc_FA0C:                               ; CODE XREF: _do_osc+70j
.text:0000FA0C                 mov     ecx, [ebp+arg_0]
.text:0000FA0F                 mov     edx, [ecx+234h]
.text:0000FA15                 mov     [ebp+var_4], edx
.text:0000FA18                 mov     eax, [ebp+arg_0]
.text:0000FA1B                 mov     ecx, [eax+234h]
.text:0000FA21                 sub     ecx, 1
.text:0000FA24                 mov     edx, [ebp+arg_0]
.text:0000FA27                 mov     [edx+234h], ecx
.text:0000FA2D                 cmp     [ebp+var_4], 0
.text:0000FA31                 jz      short loc_FA5E
.text:0000FA33                 mov     eax, [ebp+arg_0]
.text:0000FA36                 mov     ecx, [eax+234h]
.text:0000FA3C                 mov     edx, [ebp+arg_0]
.text:0000FA3F                 movzx   eax, byte ptr [edx+ecx+238h]
.text:0000FA47                 mov     ecx, [ebp+arg_0]
.text:0000FA4A                 mov     edx, [ebp+arg_0]
.text:0000FA4D                 mov     dx, [edx+1ACh]
.text:0000FA54                 mov     [ecx+eax*2+0E6Ch], dx
.text:0000FA5C                 jmp     short loc_FA0C
.text:0000FA5E ; ---------------------------------------------------------------------------
.text:0000FA5E
.text:0000FA5E loc_FA5E:                               ; CODE XREF: _do_osc+45j
.text:0000FA5E                 jmp     $LN12_1         ; jumptable 0000FA93 default case
.text:0000FA63 ; ---------------------------------------------------------------------------
.text:0000FA63
.text:0000FA63 loc_FA63:                               ; CODE XREF: _do_osc+1Ej
.text:0000FA63                 mov     eax, [ebp+arg_0]
.text:0000FA66                 mov     ecx, [eax+234h]
.text:0000FA6C                 mov     edx, [ebp+arg_0]
.text:0000FA6F                 mov     byte ptr [edx+ecx+238h], 0
.text:0000FA77                 mov     eax, [ebp+arg_0]
.text:0000FA7A                 mov     ecx, [eax+1ACh]
.text:0000FA80                 mov     [ebp+var_8], ecx
.text:0000FA83                 cmp     [ebp+var_8], 15h ; switch 22 cases
.text:0000FA87                 ja      short $LN12_1   ; jumptable 0000FA93 default case
.text:0000FA89                 mov     edx, [ebp+var_8]
.text:0000FA8C                 movzx   eax, ds:$LN14_2[edx]
.text:0000FA93                 jmp     ds:$LN15_2[eax*4] ; switch jump
.text:0000FA9A ; ---------------------------------------------------------------------------
.text:0000FA9A
.text:0000FA9A $LN5_2:                                 ; CODE XREF: _do_osc+A7j
.text:0000FA9A                                         ; DATA XREF: .text:$LN15_2o
.text:0000FA9A                 mov     ecx, [ebp+arg_0] ; jumptable 0000FA93 cases 0,1
.text:0000FA9D                 cmp     dword ptr [ecx+1150h], 0
.text:0000FAA4                 jnz     short loc_FAC2
.text:0000FAA6                 mov     edx, [ebp+arg_0]
.text:0000FAA9                 add     edx, 238h
.text:0000FAAF                 push    edx
.text:0000FAB0                 mov     eax, [ebp+arg_0]
.text:0000FAB3                 mov     ecx, [eax+1088h]
.text:0000FAB9                 push    ecx
.text:0000FABA                 call    _set_icon
.text:0000FABF                 add     esp, 8
.text:0000FAC2
.text:0000FAC2 loc_FAC2:                               ; CODE XREF: _do_osc+B8j
.text:0000FAC2                 mov     edx, [ebp+arg_0]
.text:0000FAC5                 cmp     dword ptr [edx+1ACh], 1
.text:0000FACC                 jnz     short $LN2_0    ; jumptable 0000FA93 cases 2,21
.text:0000FACE                 jmp     short $LN12_1   ; jumptable 0000FA93 default case
.text:0000FAD0 ; ---------------------------------------------------------------------------
.text:0000FAD0
.text:0000FAD0 $LN2_0:                                 ; CODE XREF: _do_osc+A7j
.text:0000FAD0                                         ; _do_osc+E0j
.text:0000FAD0                                         ; DATA XREF: ...
.text:0000FAD0                 mov     eax, [ebp+arg_0] ; jumptable 0000FA93 cases 2,21
.text:0000FAD3                 cmp     dword ptr [eax+1150h], 0
.text:0000FADA                 jnz     short $LN12_1   ; jumptable 0000FA93 default case
.text:0000FADC                 mov     ecx, [ebp+arg_0]
.text:0000FADF                 add     ecx, 238h
.text:0000FAE5                 push    ecx
.text:0000FAE6                 mov     edx, [ebp+arg_0]
.text:0000FAE9                 mov     eax, [edx+1088h]
.text:0000FAEF                 push    eax
.text:0000FAF0                 call    _set_title
.text:0000FAF5                 add     esp, 8
.text:0000FAF8
.text:0000FAF8 $LN12_1:                                ; CODE XREF: _do_osc:loc_FA5Ej
.text:0000FAF8                                         ; _do_osc+9Bj ...
.text:0000FAF8                 add     esp, 8          ; jumptable 0000FA93 default case
.text:0000FAFB                 cmp     ebp, esp
.text:0000FAFD                 call    __RTC_CheckEsp
.text:0000FB02                 mov     esp, ebp
.text:0000FB04                 pop     ebp
.text:0000FB05                 retn
.text:0000FB05 _do_osc         endp
.text:0000FB05
.text:0000FB05 ; ---------------------------------------------------------------------------
.text:0000FB06                 align 4
.text:0000FB08 $LN15_2         dd offset $LN5_2        ; DATA XREF: _do_osc+A7r
.text:0000FB08                 dd offset $LN2_0        ; jump table for switch statement
.text:0000FB08                 dd offset $LN12_1
.text:0000FB14 $LN14_2         db      0,     0,     1,     2 ; DATA XREF: _do_osc+A0r
.text:0000FB14                 db      2,     2,     2,     2 ; indirect table for switch statement
.text:0000FB14                 db      2,     2,     2,     2
.text:0000FB14                 db      2,     2,     2,     2
.text:0000FB14                 db      2,     2,     2,     2
.text:0000FB14                 db      2,     1
.text:0000FB2A                 align 4
.text:0000FB2C
.text:0000FB2C ; =============== S U B R O U T I N E =======================================
.text:0000FB2C
.text:0000FB2C ; Attributes: bp-based frame
.text:0000FB2C
.text:0000FB2C _term_print_setup proc near             ; CODE XREF: _term_out+2D02p
.text:0000FB2C
.text:0000FB2C arg_0           = dword ptr  8
.text:0000FB2C arg_4           = dword ptr  0Ch
.text:0000FB2C
.text:0000FB2C                 push    ebp
.text:0000FB2D                 mov     ebp, esp
.text:0000FB2F                 mov     eax, [ebp+arg_0]
.text:0000FB32                 add     eax, 0F8h ; '°'
.text:0000FB37                 push    eax
.text:0000FB38                 call    _bufchain_clear
.text:0000FB3D                 add     esp, 4
.text:0000FB40                 mov     ecx, [ebp+arg_4]
.text:0000FB43                 push    ecx
.text:0000FB44                 call    _printer_start_job
.text:0000FB49                 add     esp, 4
.text:0000FB4C                 mov     edx, [ebp+arg_0]
.text:0000FB4F                 mov     [edx+104h], eax
.text:0000FB55                 cmp     ebp, esp
.text:0000FB57                 call    __RTC_CheckEsp
.text:0000FB5C                 pop     ebp
.text:0000FB5D                 retn
.text:0000FB5D _term_print_setup endp
.text:0000FB5D
.text:0000FB5D ; ---------------------------------------------------------------------------
.text:0000FB5E                 db 0Eh dup(0CCh)
.text:0000FB6C
.text:0000FB6C ; =============== S U B R O U T I N E =======================================
.text:0000FB6C
.text:0000FB6C ; Attributes: bp-based frame
.text:0000FB6C
.text:0000FB6C _sel_spread     proc near               ; CODE XREF: _term_mouse+569p
.text:0000FB6C                                         ; _term_mouse+9FCp
.text:0000FB6C
.text:0000FB6C var_8           = dword ptr -8
.text:0000FB6C var_4           = dword ptr -4
.text:0000FB6C arg_0           = dword ptr  8
.text:0000FB6C
.text:0000FB6C                 push    ebp
.text:0000FB6D                 mov     ebp, esp
.text:0000FB6F                 sub     esp, 8
.text:0000FB72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000FB79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FB80                 mov     eax, [ebp+arg_0]
.text:0000FB83                 cmp     dword ptr [eax+0E4Ch], 0
.text:0000FB8A                 jnz     loc_FC9F
.text:0000FB90                 push    0FFFFFFFFh
.text:0000FB92                 mov     ecx, [ebp+arg_0]
.text:0000FB95                 mov     edx, [ecx+0E58h]
.text:0000FB9B                 push    edx
.text:0000FB9C                 mov     eax, [ecx+0E54h]
.text:0000FBA2                 push    eax
.text:0000FBA3                 mov     ecx, [ebp+arg_0]
.text:0000FBA6                 push    ecx
.text:0000FBA7                 call    _sel_spread_half
.text:0000FBAC                 add     esp, 10h
.text:0000FBAF                 mov     ecx, [ebp+arg_0]
.text:0000FBB2                 mov     [ecx+0E54h], eax
.text:0000FBB8                 mov     [ecx+0E58h], edx
.text:0000FBBE                 mov     edx, [ebp+arg_0]
.text:0000FBC1                 cmp     dword ptr [edx+0E60h], 0
.text:0000FBC8                 jnz     short loc_FBFA
.text:0000FBCA                 mov     eax, [ebp+arg_0]
.text:0000FBCD                 mov     ecx, [ebp+arg_0]
.text:0000FBD0                 mov     edx, [ecx+12Ch]
.text:0000FBD6                 mov     [eax+0E60h], edx
.text:0000FBDC                 mov     eax, [ebp+arg_0]
.text:0000FBDF                 mov     ecx, [eax+0E5Ch]
.text:0000FBE5                 sub     ecx, 1
.text:0000FBE8                 mov     edx, [ebp+arg_0]
.text:0000FBEB                 mov     [edx+0E5Ch], ecx
.text:0000FBF1                 mov     [ebp+var_4], 1
.text:0000FBF8                 jmp     short loc_FC16
.text:0000FBFA ; ---------------------------------------------------------------------------
.text:0000FBFA
.text:0000FBFA loc_FBFA:                               ; CODE XREF: _sel_spread+5Cj
.text:0000FBFA                 mov     eax, [ebp+arg_0]
.text:0000FBFD                 mov     ecx, [eax+0E60h]
.text:0000FC03                 sub     ecx, 1
.text:0000FC06                 mov     edx, [ebp+arg_0]
.text:0000FC09                 mov     [edx+0E60h], ecx
.text:0000FC0F                 mov     [ebp+var_4], 0
.text:0000FC16
.text:0000FC16 loc_FC16:                               ; CODE XREF: _sel_spread+8Cj
.text:0000FC16                 push    1
.text:0000FC18                 mov     eax, [ebp+arg_0]
.text:0000FC1B                 mov     ecx, [eax+0E60h]
.text:0000FC21                 push    ecx
.text:0000FC22                 mov     edx, [eax+0E5Ch]
.text:0000FC28                 push    edx
.text:0000FC29                 mov     eax, [ebp+arg_0]
.text:0000FC2C                 push    eax
.text:0000FC2D                 call    _sel_spread_half
.text:0000FC32                 add     esp, 10h
.text:0000FC35                 mov     ecx, [ebp+arg_0]
.text:0000FC38                 mov     [ecx+0E5Ch], eax
.text:0000FC3E                 mov     [ecx+0E60h], edx
.text:0000FC44                 mov     edx, [ebp+arg_0]
.text:0000FC47                 mov     eax, [ebp+arg_0]
.text:0000FC4A                 mov     ecx, [edx+0E60h]
.text:0000FC50                 cmp     ecx, [eax+12Ch]
.text:0000FC56                 jnz     short loc_FC83
.text:0000FC58                 mov     edx, [ebp+arg_0]
.text:0000FC5B                 mov     dword ptr [edx+0E60h], 0
.text:0000FC65                 mov     eax, [ebp+arg_0]
.text:0000FC68                 mov     ecx, [eax+0E5Ch]
.text:0000FC6E                 add     ecx, 1
.text:0000FC71                 mov     edx, [ebp+arg_0]
.text:0000FC74                 mov     [edx+0E5Ch], ecx
.text:0000FC7A                 mov     [ebp+var_8], 1
.text:0000FC81                 jmp     short loc_FC9F
.text:0000FC83 ; ---------------------------------------------------------------------------
.text:0000FC83
.text:0000FC83 loc_FC83:                               ; CODE XREF: _sel_spread+EAj
.text:0000FC83                 mov     eax, [ebp+arg_0]
.text:0000FC86                 mov     ecx, [eax+0E60h]
.text:0000FC8C                 add     ecx, 1
.text:0000FC8F                 mov     edx, [ebp+arg_0]
.text:0000FC92                 mov     [edx+0E60h], ecx
.text:0000FC98                 mov     [ebp+var_8], 0
.text:0000FC9F
.text:0000FC9F loc_FC9F:                               ; CODE XREF: _sel_spread+1Ej
.text:0000FC9F                                         ; _sel_spread+115j
.text:0000FC9F                 add     esp, 8
.text:0000FCA2                 cmp     ebp, esp
.text:0000FCA4                 call    __RTC_CheckEsp
.text:0000FCA9                 mov     esp, ebp
.text:0000FCAB                 pop     ebp
.text:0000FCAC                 retn
.text:0000FCAC _sel_spread     endp
.text:0000FCAC
.text:0000FCAC ; ---------------------------------------------------------------------------
.text:0000FCAD                 db 0Fh dup(0CCh)
.text:0000FCBC
.text:0000FCBC ; =============== S U B R O U T I N E =======================================
.text:0000FCBC
.text:0000FCBC ; Attributes: bp-based frame
.text:0000FCBC
.text:0000FCBC _sel_spread_half proc near              ; CODE XREF: _sel_spread+3Bp
.text:0000FCBC                                         ; _sel_spread+C1p
.text:0000FCBC
.text:0000FCBC var_44          = dword ptr -44h
.text:0000FCBC var_40          = dword ptr -40h
.text:0000FCBC var_3C          = dword ptr -3Ch
.text:0000FCBC var_38          = dword ptr -38h
.text:0000FCBC var_34          = dword ptr -34h
.text:0000FCBC var_30          = dword ptr -30h
.text:0000FCBC var_2C          = dword ptr -2Ch
.text:0000FCBC var_28          = dword ptr -28h
.text:0000FCBC var_24          = dword ptr -24h
.text:0000FCBC var_20          = dword ptr -20h
.text:0000FCBC var_1C          = dword ptr -1Ch
.text:0000FCBC var_18          = dword ptr -18h
.text:0000FCBC var_14          = dword ptr -14h
.text:0000FCBC var_10          = dword ptr -10h
.text:0000FCBC var_C           = dword ptr -0Ch
.text:0000FCBC var_8           = word ptr -8
.text:0000FCBC var_4           = dword ptr -4
.text:0000FCBC arg_0           = dword ptr  8
.text:0000FCBC arg_4           = dword ptr  0Ch
.text:0000FCBC arg_8           = dword ptr  10h
.text:0000FCBC arg_C           = dword ptr  14h
.text:0000FCBC
.text:0000FCBC                 push    ebp
.text:0000FCBD                 mov     ebp, esp
.text:0000FCBF                 sub     esp, 44h
.text:0000FCC2                 push    edi
.text:0000FCC3                 lea     edi, [ebp+var_44]
.text:0000FCC6                 mov     ecx, 11h
.text:0000FCCB                 mov     eax, 0CCCCCCCCh
.text:0000FCD0                 rep stosd
.text:0000FCD2                 mov     eax, [ebp+arg_0]
.text:0000FCD5                 push    eax
.text:0000FCD6                 call    _sblines
.text:0000FCDB                 add     esp, 4
.text:0000FCDE                 neg     eax
.text:0000FCE0                 mov     [ebp+var_C], eax
.text:0000FCE3                 push    0
.text:0000FCE5                 push    1654h
.text:0000FCEA                 mov     ecx, [ebp+arg_4]
.text:0000FCED                 push    ecx
.text:0000FCEE                 mov     edx, [ebp+arg_0]
.text:0000FCF1                 push    edx
.text:0000FCF2                 call    _lineptr
.text:0000FCF7                 add     esp, 10h
.text:0000FCFA                 mov     [ebp+var_4], eax
.text:0000FCFD                 mov     eax, [ebp+arg_0]
.text:0000FD00                 mov     ecx, [eax+0E50h]
.text:0000FD06                 mov     [ebp+var_24], ecx
.text:0000FD09                 cmp     [ebp+var_24], 0
.text:0000FD0D                 jz      short loc_FD28
.text:0000FD0F                 cmp     [ebp+var_24], 1
.text:0000FD13                 jz      loc_FE05
.text:0000FD19                 cmp     [ebp+var_24], 2
.text:0000FD1D                 jz      loc_10155
.text:0000FD23                 jmp     loc_10179
.text:0000FD28 ; ---------------------------------------------------------------------------
.text:0000FD28
.text:0000FD28 loc_FD28:                               ; CODE XREF: _sel_spread_half+51j
.text:0000FD28                 mov     edx, [ebp+var_4]
.text:0000FD2B                 movzx   eax, word ptr [edx]
.text:0000FD2E                 and     eax, 10h
.text:0000FD31                 jnz     loc_FE00
.text:0000FD37                 mov     ecx, [ebp+arg_0]
.text:0000FD3A                 mov     edx, [ecx+12Ch]
.text:0000FD40                 imul    edx, 0Ch
.text:0000FD43                 mov     eax, [ebp+var_4]
.text:0000FD46                 add     edx, [eax+14h]
.text:0000FD49                 mov     [ebp+var_10], edx
.text:0000FD4C
.text:0000FD4C loc_FD4C:                               ; CODE XREF: _sel_spread_half+DBj
.text:0000FD4C                 mov     ecx, [ebp+var_4]
.text:0000FD4F                 mov     edx, [ebp+var_10]
.text:0000FD52                 cmp     edx, [ecx+14h]
.text:0000FD55                 jbe     short loc_FD99
.text:0000FD57                 mov     eax, [ebp+var_10]
.text:0000FD5A                 cmp     dword ptr [eax-0Ch], 20h ; ' '
.text:0000FD5E                 jz      short loc_FD85
.text:0000FD60                 mov     ecx, [ebp+var_10]
.text:0000FD63                 mov     edx, [ecx-0Ch]
.text:0000FD66                 and     edx, 0FFFFFC00h
.text:0000FD6C                 cmp     edx, 0D800h
.text:0000FD72                 jnz     short loc_FD99
.text:0000FD74                 mov     eax, [ebp+var_10]
.text:0000FD77                 mov     ecx, [eax-0Ch]
.text:0000FD7A                 and     ecx, 0FFh
.text:0000FD80                 cmp     ecx, 20h ; ' '
.text:0000FD83                 jnz     short loc_FD99
.text:0000FD85
.text:0000FD85 loc_FD85:                               ; CODE XREF: _sel_spread_half+A2j
.text:0000FD85                 mov     edx, [ebp+var_10]
.text:0000FD88                 cmp     dword ptr [edx-4], 0
.text:0000FD8C                 jnz     short loc_FD99
.text:0000FD8E                 mov     eax, [ebp+var_10]
.text:0000FD91                 sub     eax, 0Ch
.text:0000FD94                 mov     [ebp+var_10], eax
.text:0000FD97                 jmp     short loc_FD4C
.text:0000FD99 ; ---------------------------------------------------------------------------
.text:0000FD99
.text:0000FD99 loc_FD99:                               ; CODE XREF: _sel_spread_half+99j
.text:0000FD99                                         ; _sel_spread_half+B6j ...
.text:0000FD99                 mov     ecx, [ebp+arg_0]
.text:0000FD9C                 mov     edx, [ecx+12Ch]
.text:0000FDA2                 imul    edx, 0Ch
.text:0000FDA5                 mov     eax, [ebp+var_4]
.text:0000FDA8                 add     edx, [eax+14h]
.text:0000FDAB                 cmp     [ebp+var_10], edx
.text:0000FDAE                 jnz     short loc_FDB9
.text:0000FDB0                 mov     ecx, [ebp+var_10]
.text:0000FDB3                 sub     ecx, 0Ch
.text:0000FDB6                 mov     [ebp+var_10], ecx
.text:0000FDB9
.text:0000FDB9 loc_FDB9:                               ; CODE XREF: _sel_spread_half+F2j
.text:0000FDB9                 mov     edx, [ebp+var_4]
.text:0000FDBC                 mov     eax, [ebp+var_10]
.text:0000FDBF                 sub     eax, [edx+14h]
.text:0000FDC2                 cdq
.text:0000FDC3                 mov     ecx, 0Ch
.text:0000FDC8                 idiv    ecx
.text:0000FDCA                 cmp     [ebp+arg_8], eax
.text:0000FDCD                 jl      short loc_FE00
.text:0000FDCF                 cmp     [ebp+arg_C], 0FFFFFFFFh
.text:0000FDD3                 jnz     short loc_FDEB
.text:0000FDD5                 mov     edx, [ebp+var_4]
.text:0000FDD8                 mov     eax, [ebp+var_10]
.text:0000FDDB                 sub     eax, [edx+14h]
.text:0000FDDE                 cdq
.text:0000FDDF                 mov     ecx, 0Ch
.text:0000FDE4                 idiv    ecx
.text:0000FDE6                 mov     [ebp+var_28], eax
.text:0000FDE9                 jmp     short loc_FDFA
.text:0000FDEB ; ---------------------------------------------------------------------------
.text:0000FDEB
.text:0000FDEB loc_FDEB:                               ; CODE XREF: _sel_spread_half+117j
.text:0000FDEB                 mov     edx, [ebp+arg_0]
.text:0000FDEE                 mov     eax, [edx+12Ch]
.text:0000FDF4                 sub     eax, 1
.text:0000FDF7                 mov     [ebp+var_28], eax
.text:0000FDFA
.text:0000FDFA loc_FDFA:                               ; CODE XREF: _sel_spread_half+12Dj
.text:0000FDFA                 mov     ecx, [ebp+var_28]
.text:0000FDFD                 mov     [ebp+arg_8], ecx
.text:0000FE00
.text:0000FE00 loc_FE00:                               ; CODE XREF: _sel_spread_half+75j
.text:0000FE00                                         ; _sel_spread_half+111j
.text:0000FE00                 jmp     loc_10179
.text:0000FE05 ; ---------------------------------------------------------------------------
.text:0000FE05
.text:0000FE05 loc_FE05:                               ; CODE XREF: _sel_spread_half+57j
.text:0000FE05                 cmp     [ebp+arg_8], 0
.text:0000FE09                 jle     short loc_FE37
.text:0000FE0B                 mov     edx, [ebp+arg_8]
.text:0000FE0E                 imul    edx, 0Ch
.text:0000FE11                 mov     eax, [ebp+var_4]
.text:0000FE14                 mov     ecx, [eax+14h]
.text:0000FE17                 cmp     dword ptr [edx+ecx], 0DFFFh
.text:0000FE1E                 jnz     short loc_FE37
.text:0000FE20                 mov     edx, [ebp+arg_8]
.text:0000FE23                 sub     edx, 1
.text:0000FE26                 imul    edx, 0Ch
.text:0000FE29                 mov     eax, [ebp+var_4]
.text:0000FE2C                 mov     ecx, [eax+14h]
.text:0000FE2F                 mov     edx, [edx+ecx]
.text:0000FE32                 mov     [ebp+var_2C], edx
.text:0000FE35                 jmp     short loc_FE49
.text:0000FE37 ; ---------------------------------------------------------------------------
.text:0000FE37
.text:0000FE37 loc_FE37:                               ; CODE XREF: _sel_spread_half+14Dj
.text:0000FE37                                         ; _sel_spread_half+162j
.text:0000FE37                 mov     eax, [ebp+arg_8]
.text:0000FE3A                 imul    eax, 0Ch
.text:0000FE3D                 mov     ecx, [ebp+var_4]
.text:0000FE40                 mov     edx, [ecx+14h]
.text:0000FE43                 mov     eax, [eax+edx]
.text:0000FE46                 mov     [ebp+var_2C], eax
.text:0000FE49
.text:0000FE49 loc_FE49:                               ; CODE XREF: _sel_spread_half+179j
.text:0000FE49                 mov     ecx, [ebp+var_2C]
.text:0000FE4C                 push    ecx
.text:0000FE4D                 mov     edx, [ebp+arg_0]
.text:0000FE50                 push    edx
.text:0000FE51                 call    _wordtype
.text:0000FE56                 add     esp, 8
.text:0000FE59                 mov     [ebp+var_8], ax
.text:0000FE5D                 cmp     [ebp+arg_C], 1
.text:0000FE61                 jnz     loc_FFBB
.text:0000FE67
.text:0000FE67 loc_FE67:                               ; CODE XREF: _sel_spread_half:loc_FFB1j
.text:0000FE67                 mov     eax, 1
.text:0000FE6C                 test    eax, eax
.text:0000FE6E                 jz      loc_FFB6
.text:0000FE74                 mov     ecx, [ebp+var_4]
.text:0000FE77                 movzx   edx, word ptr [ecx]
.text:0000FE7A                 and     edx, 20h
.text:0000FE7D                 jz      short loc_FE90
.text:0000FE7F                 mov     eax, [ebp+arg_0]
.text:0000FE82                 mov     ecx, [eax+12Ch]
.text:0000FE88                 sub     ecx, 1
.text:0000FE8B                 mov     [ebp+var_30], ecx
.text:0000FE8E                 jmp     short loc_FE9C
.text:0000FE90 ; ---------------------------------------------------------------------------
.text:0000FE90
.text:0000FE90 loc_FE90:                               ; CODE XREF: _sel_spread_half+1C1j
.text:0000FE90                 mov     edx, [ebp+arg_0]
.text:0000FE93                 mov     eax, [edx+12Ch]
.text:0000FE99                 mov     [ebp+var_30], eax
.text:0000FE9C
.text:0000FE9C loc_FE9C:                               ; CODE XREF: _sel_spread_half+1D2j
.text:0000FE9C                 mov     ecx, [ebp+var_30]
.text:0000FE9F                 mov     [ebp+var_14], ecx
.text:0000FEA2                 mov     edx, [ebp+var_14]
.text:0000FEA5                 sub     edx, 1
.text:0000FEA8                 cmp     [ebp+arg_8], edx
.text:0000FEAB                 jge     short loc_FF25
.text:0000FEAD                 mov     eax, [ebp+arg_8]
.text:0000FEB0                 add     eax, 1
.text:0000FEB3                 test    eax, eax
.text:0000FEB5                 jle     short loc_FEE3
.text:0000FEB7                 mov     ecx, [ebp+arg_8]
.text:0000FEBA                 add     ecx, 1
.text:0000FEBD                 imul    ecx, 0Ch
.text:0000FEC0                 mov     edx, [ebp+var_4]
.text:0000FEC3                 mov     eax, [edx+14h]
.text:0000FEC6                 cmp     dword ptr [ecx+eax], 0DFFFh
.text:0000FECD                 jnz     short loc_FEE3
.text:0000FECF                 mov     ecx, [ebp+arg_8]
.text:0000FED2                 imul    ecx, 0Ch
.text:0000FED5                 mov     edx, [ebp+var_4]
.text:0000FED8                 mov     eax, [edx+14h]
.text:0000FEDB                 mov     ecx, [ecx+eax]
.text:0000FEDE                 mov     [ebp+var_34], ecx
.text:0000FEE1                 jmp     short loc_FEF8
.text:0000FEE3 ; ---------------------------------------------------------------------------
.text:0000FEE3
.text:0000FEE3 loc_FEE3:                               ; CODE XREF: _sel_spread_half+1F9j
.text:0000FEE3                                         ; _sel_spread_half+211j
.text:0000FEE3                 mov     edx, [ebp+arg_8]
.text:0000FEE6                 add     edx, 1
.text:0000FEE9                 imul    edx, 0Ch
.text:0000FEEC                 mov     eax, [ebp+var_4]
.text:0000FEEF                 mov     ecx, [eax+14h]
.text:0000FEF2                 mov     edx, [edx+ecx]
.text:0000FEF5                 mov     [ebp+var_34], edx
.text:0000FEF8
.text:0000FEF8 loc_FEF8:                               ; CODE XREF: _sel_spread_half+225j
.text:0000FEF8                 mov     eax, [ebp+var_34]
.text:0000FEFB                 push    eax
.text:0000FEFC                 mov     ecx, [ebp+arg_0]
.text:0000FEFF                 push    ecx
.text:0000FF00                 call    _wordtype
.text:0000FF05                 add     esp, 8
.text:0000FF08                 movsx   edx, [ebp+var_8]
.text:0000FF0C                 cmp     eax, edx
.text:0000FF0E                 jnz     short loc_FF1B
.text:0000FF10                 mov     eax, [ebp+arg_8]
.text:0000FF13                 add     eax, 1
.text:0000FF16                 mov     [ebp+arg_8], eax
.text:0000FF19                 jmp     short loc_FF20
.text:0000FF1B ; ---------------------------------------------------------------------------
.text:0000FF1B
.text:0000FF1B loc_FF1B:                               ; CODE XREF: _sel_spread_half+252j
.text:0000FF1B                 jmp     loc_FFB6
.text:0000FF20 ; ---------------------------------------------------------------------------
.text:0000FF20
.text:0000FF20 loc_FF20:                               ; CODE XREF: _sel_spread_half+25Dj
.text:0000FF20                 jmp     loc_FFB1
.text:0000FF25 ; ---------------------------------------------------------------------------
.text:0000FF25
.text:0000FF25 loc_FF25:                               ; CODE XREF: _sel_spread_half+1EFj
.text:0000FF25                 mov     ecx, [ebp+arg_4]
.text:0000FF28                 add     ecx, 1
.text:0000FF2B                 mov     edx, [ebp+arg_0]
.text:0000FF2E                 cmp     ecx, [edx+128h]
.text:0000FF34                 jge     short loc_FFAF
.text:0000FF36                 mov     eax, [ebp+var_4]
.text:0000FF39                 movzx   ecx, word ptr [eax]
.text:0000FF3C                 and     ecx, 10h
.text:0000FF3F                 jz      short loc_FFAF
.text:0000FF41                 push    0
.text:0000FF43                 push    167Ah
.text:0000FF48                 mov     edx, [ebp+arg_4]
.text:0000FF4B                 add     edx, 1
.text:0000FF4E                 push    edx
.text:0000FF4F                 mov     eax, [ebp+arg_0]
.text:0000FF52                 push    eax
.text:0000FF53                 call    _lineptr
.text:0000FF58                 add     esp, 10h
.text:0000FF5B                 mov     [ebp+var_18], eax
.text:0000FF5E                 mov     ecx, [ebp+var_18]
.text:0000FF61                 mov     edx, [ecx+14h]
.text:0000FF64                 mov     eax, [edx]
.text:0000FF66                 push    eax
.text:0000FF67                 mov     ecx, [ebp+arg_0]
.text:0000FF6A                 push    ecx
.text:0000FF6B                 call    _wordtype
.text:0000FF70                 add     esp, 8
.text:0000FF73                 movsx   edx, [ebp+var_8]
.text:0000FF77                 cmp     eax, edx
.text:0000FF79                 jnz     short loc_FF9F
.text:0000FF7B                 mov     [ebp+arg_8], 0
.text:0000FF82                 mov     eax, [ebp+arg_4]
.text:0000FF85                 add     eax, 1
.text:0000FF88                 mov     [ebp+arg_4], eax
.text:0000FF8B                 mov     ecx, [ebp+var_4]
.text:0000FF8E                 push    ecx
.text:0000FF8F                 call    _unlineptr
.text:0000FF94                 add     esp, 4
.text:0000FF97                 mov     edx, [ebp+var_18]
.text:0000FF9A                 mov     [ebp+var_4], edx
.text:0000FF9D                 jmp     short loc_FFAD
.text:0000FF9F ; ---------------------------------------------------------------------------
.text:0000FF9F
.text:0000FF9F loc_FF9F:                               ; CODE XREF: _sel_spread_half+2BDj
.text:0000FF9F                 mov     eax, [ebp+var_18]
.text:0000FFA2                 push    eax
.text:0000FFA3                 call    _unlineptr
.text:0000FFA8                 add     esp, 4
.text:0000FFAB                 jmp     short loc_FFB6
.text:0000FFAD ; ---------------------------------------------------------------------------
.text:0000FFAD
.text:0000FFAD loc_FFAD:                               ; CODE XREF: _sel_spread_half+2E1j
.text:0000FFAD                 jmp     short loc_FFB1
.text:0000FFAF ; ---------------------------------------------------------------------------
.text:0000FFAF
.text:0000FFAF loc_FFAF:                               ; CODE XREF: _sel_spread_half+278j
.text:0000FFAF                                         ; _sel_spread_half+283j
.text:0000FFAF                 jmp     short loc_FFB6
.text:0000FFB1 ; ---------------------------------------------------------------------------
.text:0000FFB1
.text:0000FFB1 loc_FFB1:                               ; CODE XREF: _sel_spread_half:loc_FF20j
.text:0000FFB1                                         ; _sel_spread_half:loc_FFADj
.text:0000FFB1                 jmp     loc_FE67
.text:0000FFB6 ; ---------------------------------------------------------------------------
.text:0000FFB6
.text:0000FFB6 loc_FFB6:                               ; CODE XREF: _sel_spread_half+1B2j
.text:0000FFB6                                         ; _sel_spread_half:loc_FF1Bj ...
.text:0000FFB6                 jmp     loc_10153
.text:0000FFBB ; ---------------------------------------------------------------------------
.text:0000FFBB
.text:0000FFBB loc_FFBB:                               ; CODE XREF: _sel_spread_half+1A5j
.text:0000FFBB                                         ; _sel_spread_half:loc_1014Ej
.text:0000FFBB                 mov     ecx, 1
.text:0000FFC0                 test    ecx, ecx
.text:0000FFC2                 jz      loc_10153
.text:0000FFC8                 cmp     [ebp+arg_8], 0
.text:0000FFCC                 jle     short loc_10049
.text:0000FFCE                 mov     edx, [ebp+arg_8]
.text:0000FFD1                 sub     edx, 1
.text:0000FFD4                 test    edx, edx
.text:0000FFD6                 jle     short loc_10007
.text:0000FFD8                 mov     eax, [ebp+arg_8]
.text:0000FFDB                 sub     eax, 1
.text:0000FFDE                 imul    eax, 0Ch
.text:0000FFE1                 mov     ecx, [ebp+var_4]
.text:0000FFE4                 mov     edx, [ecx+14h]
.text:0000FFE7                 cmp     dword ptr [eax+edx], 0DFFFh
.text:0000FFEE                 jnz     short loc_10007
.text:0000FFF0                 mov     eax, [ebp+arg_8]
.text:0000FFF3                 sub     eax, 2
.text:0000FFF6                 imul    eax, 0Ch
.text:0000FFF9                 mov     ecx, [ebp+var_4]
.text:0000FFFC                 mov     edx, [ecx+14h]
.text:0000FFFF
.text:0000FFFF loc_FFFF:                               ; DATA XREF: _do_paint:loc_6A28o
.text:0000FFFF                                         ; _do_paint+C5Ao ...
.text:0000FFFF                 mov     eax, [eax+edx]
.text:00010002                 mov     [ebp+var_38], eax
.text:00010005                 jmp     short loc_1001C
.text:00010007 ; ---------------------------------------------------------------------------
.text:00010007
.text:00010007 loc_10007:                              ; CODE XREF: _sel_spread_half+31Aj
.text:00010007                                         ; _sel_spread_half+332j
.text:00010007                 mov     ecx, [ebp+arg_8]
.text:0001000A                 sub     ecx, 1
.text:0001000D                 imul    ecx, 0Ch
.text:00010010                 mov     edx, [ebp+var_4]
.text:00010013                 mov     eax, [edx+14h]
.text:00010016                 mov     ecx, [ecx+eax]
.text:00010019                 mov     [ebp+var_38], ecx
.text:0001001C
.text:0001001C loc_1001C:                              ; CODE XREF: _sel_spread_half+349j
.text:0001001C                 mov     edx, [ebp+var_38]
.text:0001001F                 push    edx
.text:00010020                 mov     eax, [ebp+arg_0]
.text:00010023                 push    eax
.text:00010024                 call    _wordtype
.text:00010029                 add     esp, 8
.text:0001002C                 movsx   ecx, [ebp+var_8]
.text:00010030                 cmp     eax, ecx
.text:00010032                 jnz     short loc_1003F
.text:00010034                 mov     edx, [ebp+arg_8]
.text:00010037                 sub     edx, 1
.text:0001003A                 mov     [ebp+arg_8], edx
.text:0001003D                 jmp     short loc_10044
.text:0001003F ; ---------------------------------------------------------------------------
.text:0001003F
.text:0001003F loc_1003F:                              ; CODE XREF: _sel_spread_half+376j
.text:0001003F                 jmp     loc_10153
.text:00010044 ; ---------------------------------------------------------------------------
.text:00010044
.text:00010044 loc_10044:                              ; CODE XREF: _sel_spread_half+381j
.text:00010044                 jmp     loc_1014E
.text:00010049 ; ---------------------------------------------------------------------------
.text:00010049
.text:00010049 loc_10049:                              ; CODE XREF: _sel_spread_half+310j
.text:00010049                 mov     eax, [ebp+arg_4]
.text:0001004C                 cmp     eax, [ebp+var_C]
.text:0001004F                 jg      short loc_10056
.text:00010051                 jmp     loc_10153
.text:00010056 ; ---------------------------------------------------------------------------
.text:00010056
.text:00010056 loc_10056:                              ; CODE XREF: _sel_spread_half+393j
.text:00010056                 push    0
.text:00010058                 push    1695h
.text:0001005D                 mov     ecx, [ebp+arg_4]
.text:00010060                 sub     ecx, 1
.text:00010063                 push    ecx
.text:00010064                 mov     edx, [ebp+arg_0]
.text:00010067                 push    edx
.text:00010068                 call    _lineptr
.text:0001006D                 add     esp, 10h
.text:00010070                 mov     [ebp+var_1C], eax
.text:00010073                 mov     eax, [ebp+var_1C]
.text:00010076                 movzx   ecx, word ptr [eax]
.text:00010079                 and     ecx, 20h
.text:0001007C                 jz      short loc_1008F
.text:0001007E                 mov     edx, [ebp+arg_0]
.text:00010081                 mov     eax, [edx+12Ch]
.text:00010087                 sub     eax, 1
.text:0001008A                 mov     [ebp+var_3C], eax
.text:0001008D                 jmp     short loc_1009B
.text:0001008F ; ---------------------------------------------------------------------------
.text:0001008F
.text:0001008F loc_1008F:                              ; CODE XREF: _sel_spread_half+3C0j
.text:0001008F                 mov     ecx, [ebp+arg_0]
.text:00010092                 mov     edx, [ecx+12Ch]
.text:00010098                 mov     [ebp+var_3C], edx
.text:0001009B
.text:0001009B loc_1009B:                              ; CODE XREF: _sel_spread_half+3D1j
.text:0001009B                 mov     eax, [ebp+var_3C]
.text:0001009E                 mov     [ebp+var_20], eax
.text:000100A1                 mov     ecx, [ebp+var_1C]
.text:000100A4                 movzx   edx, word ptr [ecx]
.text:000100A7                 and     edx, 10h
.text:000100AA                 jz      loc_1014C
.text:000100B0                 mov     eax, [ebp+var_20]
.text:000100B3                 sub     eax, 1
.text:000100B6                 test    eax, eax
.text:000100B8                 jle     short loc_100E9
.text:000100BA                 mov     ecx, [ebp+var_20]
.text:000100BD                 sub     ecx, 1
.text:000100C0                 imul    ecx, 0Ch
.text:000100C3                 mov     edx, [ebp+var_1C]
.text:000100C6                 mov     eax, [edx+14h]
.text:000100C9                 cmp     dword ptr [ecx+eax], 0DFFFh
.text:000100D0                 jnz     short loc_100E9
.text:000100D2                 mov     ecx, [ebp+var_20]
.text:000100D5                 sub     ecx, 2
.text:000100D8                 imul    ecx, 0Ch
.text:000100DB                 mov     edx, [ebp+var_1C]
.text:000100DE                 mov     eax, [edx+14h]
.text:000100E1                 mov     ecx, [ecx+eax]
.text:000100E4                 mov     [ebp+var_40], ecx
.text:000100E7                 jmp     short loc_100FE
.text:000100E9 ; ---------------------------------------------------------------------------
.text:000100E9
.text:000100E9 loc_100E9:                              ; CODE XREF: _sel_spread_half+3FCj
.text:000100E9                                         ; _sel_spread_half+414j
.text:000100E9                 mov     edx, [ebp+var_20]
.text:000100EC                 sub     edx, 1
.text:000100EF                 imul    edx, 0Ch
.text:000100F2                 mov     eax, [ebp+var_1C]
.text:000100F5                 mov     ecx, [eax+14h]
.text:000100F8                 mov     edx, [edx+ecx]
.text:000100FB                 mov     [ebp+var_40], edx
.text:000100FE
.text:000100FE loc_100FE:                              ; CODE XREF: _sel_spread_half+42Bj
.text:000100FE                 mov     eax, [ebp+var_40]
.text:00010101                 push    eax
.text:00010102                 mov     ecx, [ebp+arg_0]
.text:00010105                 push    ecx
.text:00010106                 call    _wordtype
.text:0001010B                 add     esp, 8
.text:0001010E                 movsx   edx, [ebp+var_8]
.text:00010112                 cmp     eax, edx
.text:00010114                 jnz     short loc_1013C
.text:00010116                 mov     eax, [ebp+var_20]
.text:00010119                 sub     eax, 1
.text:0001011C                 mov     [ebp+arg_8], eax
.text:0001011F                 mov     ecx, [ebp+arg_4]
.text:00010122                 sub     ecx, 1
.text:00010125                 mov     [ebp+arg_4], ecx
.text:00010128                 mov     edx, [ebp+var_4]
.text:0001012B                 push    edx
.text:0001012C                 call    _unlineptr
.text:00010131                 add     esp, 4
.text:00010134                 mov     eax, [ebp+var_1C]
.text:00010137                 mov     [ebp+var_4], eax
.text:0001013A                 jmp     short loc_1014A
.text:0001013C ; ---------------------------------------------------------------------------
.text:0001013C
.text:0001013C loc_1013C:                              ; CODE XREF: _sel_spread_half+458j
.text:0001013C                 mov     ecx, [ebp+var_1C]
.text:0001013F                 push    ecx
.text:00010140                 call    _unlineptr
.text:00010145                 add     esp, 4
.text:00010148                 jmp     short loc_10153
.text:0001014A ; ---------------------------------------------------------------------------
.text:0001014A
.text:0001014A loc_1014A:                              ; CODE XREF: _sel_spread_half+47Ej
.text:0001014A                 jmp     short loc_1014E
.text:0001014C ; ---------------------------------------------------------------------------
.text:0001014C
.text:0001014C loc_1014C:                              ; CODE XREF: _sel_spread_half+3EEj
.text:0001014C                 jmp     short loc_10153
.text:0001014E ; ---------------------------------------------------------------------------
.text:0001014E
.text:0001014E loc_1014E:                              ; CODE XREF: _sel_spread_half:loc_10044j
.text:0001014E                                         ; _sel_spread_half:loc_1014Aj
.text:0001014E                 jmp     loc_FFBB
.text:00010153 ; ---------------------------------------------------------------------------
.text:00010153
.text:00010153 loc_10153:                              ; CODE XREF: _sel_spread_half:loc_FFB6j
.text:00010153                                         ; _sel_spread_half+306j ...
.text:00010153                 jmp     short loc_10179
.text:00010155 ; ---------------------------------------------------------------------------
.text:00010155
.text:00010155 loc_10155:                              ; CODE XREF: _sel_spread_half+61j
.text:00010155                 cmp     [ebp+arg_C], 0FFFFFFFFh
.text:00010159                 jnz     short loc_10164
.text:0001015B                 mov     [ebp+var_44], 0
.text:00010162                 jmp     short loc_10173
.text:00010164 ; ---------------------------------------------------------------------------
.text:00010164
.text:00010164 loc_10164:                              ; CODE XREF: _sel_spread_half+49Dj
.text:00010164                 mov     edx, [ebp+arg_0]
.text:00010167                 mov     eax, [edx+12Ch]
.text:0001016D                 sub     eax, 1
.text:00010170                 mov     [ebp+var_44], eax
.text:00010173
.text:00010173 loc_10173:                              ; CODE XREF: _sel_spread_half+4A6j
.text:00010173                 mov     ecx, [ebp+var_44]
.text:00010176                 mov     [ebp+arg_8], ecx
.text:00010179
.text:00010179 loc_10179:                              ; CODE XREF: _sel_spread_half+67j
.text:00010179                                         ; _sel_spread_half:loc_FE00j ...
.text:00010179                 mov     edx, [ebp+var_4]
.text:0001017C                 push    edx
.text:0001017D                 call    _unlineptr
.text:00010182                 add     esp, 4
.text:00010185                 mov     eax, [ebp+arg_4]
.text:00010188                 mov     edx, [ebp+arg_8]
.text:0001018B                 pop     edi
.text:0001018C                 add     esp, 44h
.text:0001018F                 cmp     ebp, esp
.text:00010191                 call    __RTC_CheckEsp
.text:00010196                 mov     esp, ebp
.text:00010198                 pop     ebp
.text:00010199                 retn
.text:00010199 _sel_spread_half endp
.text:00010199
.text:00010199 ; ---------------------------------------------------------------------------
.text:0001019A                 align 4
.text:0001019C
.text:0001019C ; =============== S U B R O U T I N E =======================================
.text:0001019C
.text:0001019C ; Attributes: bp-based frame
.text:0001019C
.text:0001019C _wordtype       proc near               ; CODE XREF: _sel_spread_half+195p
.text:0001019C                                         ; _sel_spread_half+244p ...
.text:0001019C
.text:0001019C var_C           = dword ptr -0Ch
.text:0001019C var_8           = dword ptr -8
.text:0001019C var_4           = dword ptr -4
.text:0001019C arg_0           = dword ptr  8
.text:0001019C arg_4           = dword ptr  0Ch
.text:0001019C
.text:0001019C                 push    ebp
.text:0001019D                 mov     ebp, esp
.text:0001019F                 sub     esp, 0Ch
.text:000101A2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000101A9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000101B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000101B7                 mov     eax, [ebp+arg_4]
.text:000101BA                 and     eax, 0FFFFFF00h
.text:000101BF                 mov     [ebp+var_8], eax
.text:000101C2                 cmp     [ebp+var_8], 0D800h
.text:000101C9                 jz      short loc_101FD
.text:000101CB                 cmp     [ebp+var_8], 0D900h
.text:000101D2                 jz      short loc_101DF
.text:000101D4                 cmp     [ebp+var_8], 0DA00h
.text:000101DB                 jz      short loc_1021C
.text:000101DD                 jmp     short loc_10236
.text:000101DF ; ---------------------------------------------------------------------------
.text:000101DF
.text:000101DF loc_101DF:                              ; CODE XREF: _wordtype+36j
.text:000101DF                 mov     ecx, [ebp+arg_0]
.text:000101E2                 mov     edx, [ecx+1090h]
.text:000101E8                 mov     eax, [ebp+arg_4]
.text:000101EB                 and     eax, 0FFh
.text:000101F0                 movzx   ecx, word ptr [edx+eax*2+610h]
.text:000101F8                 mov     [ebp+arg_4], ecx
.text:000101FB                 jmp     short loc_10236
.text:000101FD ; ---------------------------------------------------------------------------
.text:000101FD
.text:000101FD loc_101FD:                              ; CODE XREF: _wordtype+2Dj
.text:000101FD                 mov     edx, [ebp+arg_0]
.text:00010200                 mov     eax, [edx+1090h]
.text:00010206                 mov     ecx, [ebp+arg_4]
.text:00010209                 and     ecx, 0FFh
.text:0001020F                 movzx   edx, word ptr [eax+ecx*2+210h]
.text:00010217                 mov     [ebp+arg_4], edx
.text:0001021A                 jmp     short loc_10236
.text:0001021C ; ---------------------------------------------------------------------------
.text:0001021C
.text:0001021C loc_1021C:                              ; CODE XREF: _wordtype+3Fj
.text:0001021C                 mov     eax, [ebp+arg_0]
.text:0001021F                 mov     ecx, [eax+1090h]
.text:00010225                 mov     edx, [ebp+arg_4]
.text:00010228                 and     edx, 0FFh
.text:0001022E                 movzx   eax, word ptr [ecx+edx*2+10h]
.text:00010233                 mov     [ebp+arg_4], eax
.text:00010236
.text:00010236 loc_10236:                              ; CODE XREF: _wordtype+41j
.text:00010236                                         ; _wordtype+5Fj ...
.text:00010236                 mov     ecx, [ebp+arg_4]
.text:00010239                 and     ecx, 0FFFFFF00h
.text:0001023F                 mov     [ebp+var_C], ecx
.text:00010242                 cmp     [ebp+var_C], 0F000h
.text:00010249                 jz      short loc_10275
.text:0001024B                 cmp     [ebp+var_C], 0F100h
.text:00010252                 jz      short loc_10256
.text:00010254                 jmp     short loc_10292
.text:00010256 ; ---------------------------------------------------------------------------
.text:00010256
.text:00010256 loc_10256:                              ; CODE XREF: _wordtype+B6j
.text:00010256                 mov     edx, [ebp+arg_0]
.text:00010259                 mov     eax, [edx+1090h]
.text:0001025F                 mov     ecx, [ebp+arg_4]
.text:00010262                 and     ecx, 0FFh
.text:00010268                 movzx   edx, word ptr [eax+ecx*2+410h]
.text:00010270                 mov     [ebp+arg_4], edx
.text:00010273                 jmp     short loc_10292
.text:00010275 ; ---------------------------------------------------------------------------
.text:00010275
.text:00010275 loc_10275:                              ; CODE XREF: _wordtype+ADj
.text:00010275                 mov     eax, [ebp+arg_0]
.text:00010278                 mov     ecx, [eax+1090h]
.text:0001027E                 mov     edx, [ebp+arg_4]
.text:00010281                 and     edx, 0FFh
.text:00010287                 movzx   eax, word ptr [ecx+edx*2+810h]
.text:0001028F                 mov     [ebp+arg_4], eax
.text:00010292
.text:00010292 loc_10292:                              ; CODE XREF: _wordtype+B8j
.text:00010292                                         ; _wordtype+D7j
.text:00010292                 mov     ecx, [ebp+arg_0]
.text:00010295                 mov     edx, [ecx+1090h]
.text:0001029B                 cmp     dword ptr [edx+4], 0
.text:0001029F                 jz      short loc_102C6
.text:000102A1                 mov     eax, [ebp+arg_0]
.text:000102A4                 mov     ecx, [eax+1090h]
.text:000102AA                 mov     edx, [ebp+arg_0]
.text:000102AD                 mov     eax, [edx+1090h]
.text:000102B3                 mov     ecx, [ecx+8]
.text:000102B6                 cmp     ecx, [eax+0Ch]
.text:000102B9                 jnz     short loc_102C6
.text:000102BB                 xor     eax, eax
.text:000102BD                 cmp     [ebp+arg_4], 20h ; ' '
.text:000102C1                 setnz   al
.text:000102C4                 jmp     short loc_1031D
.text:000102C6 ; ---------------------------------------------------------------------------
.text:000102C6
.text:000102C6 loc_102C6:                              ; CODE XREF: _wordtype+103j
.text:000102C6                                         ; _wordtype+11Dj
.text:000102C6                 cmp     [ebp+arg_4], 80h ; 'Ç'
.text:000102CD                 jge     short loc_102DF
.text:000102CF                 mov     edx, [ebp+arg_4]
.text:000102D2                 mov     eax, [ebp+arg_0]
.text:000102D5                 movsx   eax, word ptr [eax+edx*2+0E6Ch]
.text:000102DD                 jmp     short loc_1031D
.text:000102DF ; ---------------------------------------------------------------------------
.text:000102DF
.text:000102DF loc_102DF:                              ; CODE XREF: _wordtype+131j
.text:000102DF                 mov     [ebp+var_4], offset ?ucs_words@?1??wordtype@@9@9 ; `wordtype'::`2'::ucs_words
.text:000102E6                 jmp     short loc_102F1
.text:000102E8 ; ---------------------------------------------------------------------------
.text:000102E8
.text:000102E8 loc_102E8:                              ; CODE XREF: _wordtype:loc_10316j
.text:000102E8                 mov     ecx, [ebp+var_4]
.text:000102EB                 add     ecx, 0Ch
.text:000102EE                 mov     [ebp+var_4], ecx
.text:000102F1
.text:000102F1 loc_102F1:                              ; CODE XREF: _wordtype+14Aj
.text:000102F1                 mov     edx, [ebp+var_4]
.text:000102F4                 cmp     dword ptr [edx], 0
.text:000102F7                 jz      short loc_10318
.text:000102F9                 mov     eax, [ebp+var_4]
.text:000102FC                 mov     ecx, [ebp+arg_4]
.text:000102FF                 cmp     ecx, [eax]
.text:00010301                 jl      short loc_10316
.text:00010303                 mov     edx, [ebp+var_4]
.text:00010306                 mov     eax, [ebp+arg_4]
.text:00010309                 cmp     eax, [edx+4]
.text:0001030C                 jg      short loc_10316
.text:0001030E                 mov     ecx, [ebp+var_4]
.text:00010311                 mov     eax, [ecx+8]
.text:00010314                 jmp     short loc_1031D
.text:00010316 ; ---------------------------------------------------------------------------
.text:00010316
.text:00010316 loc_10316:                              ; CODE XREF: _wordtype+165j
.text:00010316                                         ; _wordtype+170j
.text:00010316                 jmp     short loc_102E8
.text:00010318 ; ---------------------------------------------------------------------------
.text:00010318
.text:00010318 loc_10318:                              ; CODE XREF: _wordtype+15Bj
.text:00010318                 mov     eax, 2
.text:0001031D
.text:0001031D loc_1031D:                              ; CODE XREF: _wordtype+128j
.text:0001031D                                         ; _wordtype+141j ...
.text:0001031D                 mov     esp, ebp
.text:0001031F                 pop     ebp
.text:00010320                 retn
.text:00010320 _wordtype       endp
.text:00010320
.text:00010320 ; ---------------------------------------------------------------------------
.text:00010321                 db 0Bh dup(0CCh)
.text:0001032C
.text:0001032C ; =============== S U B R O U T I N E =======================================
.text:0001032C
.text:0001032C ; Attributes: bp-based frame
.text:0001032C
.text:0001032C                 public _format_arrow_key
.text:0001032C _format_arrow_key proc near
.text:0001032C
.text:0001032C var_C           = dword ptr -0Ch
.text:0001032C var_8           = dword ptr -8
.text:0001032C Dest            = dword ptr -4
.text:0001032C arg_0           = dword ptr  8
.text:0001032C arg_4           = dword ptr  0Ch
.text:0001032C arg_8           = dword ptr  10h
.text:0001032C arg_C           = dword ptr  14h
.text:0001032C
.text:0001032C                 push    ebp
.text:0001032D                 mov     ebp, esp
.text:0001032F                 sub     esp, 0Ch
.text:00010332                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00010339                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00010340                 mov     [ebp+Dest], 0CCCCCCCCh
.text:00010347                 mov     eax, [ebp+arg_0]
.text:0001034A                 mov     [ebp+Dest], eax
.text:0001034D                 mov     ecx, [ebp+arg_4]
.text:00010350                 cmp     dword ptr [ecx+148h], 0
.text:00010357                 jz      short loc_10376
.text:00010359                 mov     edx, [ebp+arg_8]
.text:0001035C                 push    edx
.text:0001035D                 push    offset $SG88502 ; "\x1B%c"
.text:00010362                 mov     eax, [ebp+Dest]
.text:00010365                 push    eax             ; Dest
.text:00010366                 call    _sprintf
.text:0001036B                 add     esp, 0Ch
.text:0001036E                 add     eax, [ebp+Dest]
.text:00010371                 mov     [ebp+Dest], eax
.text:00010374                 jmp     short loc_103F4
.text:00010376 ; ---------------------------------------------------------------------------
.text:00010376
.text:00010376 loc_10376:                              ; CODE XREF: _format_arrow_key+2Bj
.text:00010376                 mov     ecx, [ebp+arg_4]
.text:00010379                 cmp     dword ptr [ecx+140h], 0
.text:00010380                 jz      short loc_10397
.text:00010382                 mov     edx, [ebp+arg_4]
.text:00010385                 cmp     dword ptr [edx+1138h], 0
.text:0001038C                 jnz     short loc_10397
.text:0001038E                 mov     [ebp+var_C], 1
.text:00010395                 jmp     short loc_1039E
.text:00010397 ; ---------------------------------------------------------------------------
.text:00010397
.text:00010397 loc_10397:                              ; CODE XREF: _format_arrow_key+54j
.text:00010397                                         ; _format_arrow_key+60j
.text:00010397                 mov     [ebp+var_C], 0
.text:0001039E
.text:0001039E loc_1039E:                              ; CODE XREF: _format_arrow_key+69j
.text:0001039E                 mov     eax, [ebp+var_C]
.text:000103A1                 mov     [ebp+var_8], eax
.text:000103A4                 cmp     [ebp+arg_C], 0
.text:000103A8                 jz      short loc_103B6
.text:000103AA                 xor     ecx, ecx
.text:000103AC                 cmp     [ebp+var_8], 0
.text:000103B0                 setz    cl
.text:000103B3                 mov     [ebp+var_8], ecx
.text:000103B6
.text:000103B6 loc_103B6:                              ; CODE XREF: _format_arrow_key+7Cj
.text:000103B6                 cmp     [ebp+var_8], 0
.text:000103BA                 jz      short loc_103D9
.text:000103BC                 mov     edx, [ebp+arg_8]
.text:000103BF                 push    edx
.text:000103C0                 push    offset $SG88508 ; "\x1BO%c"
.text:000103C5                 mov     eax, [ebp+Dest]
.text:000103C8                 push    eax             ; Dest
.text:000103C9                 call    _sprintf
.text:000103CE                 add     esp, 0Ch
.text:000103D1                 add     eax, [ebp+Dest]
.text:000103D4                 mov     [ebp+Dest], eax
.text:000103D7                 jmp     short loc_103F4
.text:000103D9 ; ---------------------------------------------------------------------------
.text:000103D9
.text:000103D9 loc_103D9:                              ; CODE XREF: _format_arrow_key+8Ej
.text:000103D9                 mov     ecx, [ebp+arg_8]
.text:000103DC                 push    ecx
.text:000103DD                 push    offset $SG88511 ; "\x1B[%c"
.text:000103E2                 mov     edx, [ebp+Dest]
.text:000103E5                 push    edx             ; Dest
.text:000103E6                 call    _sprintf
.text:000103EB                 add     esp, 0Ch
.text:000103EE                 add     eax, [ebp+Dest]
.text:000103F1                 mov     [ebp+Dest], eax
.text:000103F4
.text:000103F4 loc_103F4:                              ; CODE XREF: _format_arrow_key+48j
.text:000103F4                                         ; _format_arrow_key+ABj
.text:000103F4                 mov     eax, [ebp+Dest]
.text:000103F7                 sub     eax, [ebp+arg_0]
.text:000103FA                 add     esp, 0Ch
.text:000103FD                 cmp     ebp, esp
.text:000103FF                 call    __RTC_CheckEsp
.text:00010404                 mov     esp, ebp
.text:00010406                 pop     ebp
.text:00010407                 retn
.text:00010407 _format_arrow_key endp
.text:00010407
.text:00010407 ; ---------------------------------------------------------------------------
.text:00010408                 db 4 dup(0CCh)
.text:0001040C
.text:0001040C ; =============== S U B R O U T I N E =======================================
.text:0001040C
.text:0001040C ; Attributes: bp-based frame
.text:0001040C
.text:0001040C                 public _term_nopaste
.text:0001040C _term_nopaste   proc near
.text:0001040C
.text:0001040C arg_0           = dword ptr  8
.text:0001040C
.text:0001040C                 push    ebp
.text:0001040D                 mov     ebp, esp
.text:0001040F                 mov     eax, [ebp+arg_0]
.text:00010412                 cmp     dword ptr [eax+1074h], 0
.text:00010419                 jnz     short loc_1041D
.text:0001041B                 jmp     short loc_10449
.text:0001041D ; ---------------------------------------------------------------------------
.text:0001041D
.text:0001041D loc_1041D:                              ; CODE XREF: _term_nopaste+Dj
.text:0001041D                 mov     ecx, [ebp+arg_0]
.text:00010420                 mov     edx, [ecx+1070h]
.text:00010426                 push    edx
.text:00010427                 call    _safefree
.text:0001042C                 add     esp, 4
.text:0001042F                 mov     eax, [ebp+arg_0]
.text:00010432                 mov     dword ptr [eax+1070h], 0
.text:0001043C                 mov     ecx, [ebp+arg_0]
.text:0001043F                 mov     dword ptr [ecx+1074h], 0
.text:00010449
.text:00010449 loc_10449:                              ; CODE XREF: _term_nopaste+Fj
.text:00010449                 cmp     ebp, esp
.text:0001044B                 call    __RTC_CheckEsp
.text:00010450                 pop     ebp
.text:00010451                 retn
.text:00010451 _term_nopaste   endp
.text:00010451
.text:00010451 ; ---------------------------------------------------------------------------
.text:00010452                 db 0Ah dup(0CCh)
.text:0001045C
.text:0001045C ; =============== S U B R O U T I N E =======================================
.text:0001045C
.text:0001045C ; Attributes: bp-based frame
.text:0001045C
.text:0001045C _deselect       proc near               ; CODE XREF: _term_pwron+45p
.text:0001045C                                         ; _term_init+206p ...
.text:0001045C
.text:0001045C arg_0           = dword ptr  8
.text:0001045C
.text:0001045C                 push    ebp
.text:0001045D                 mov     ebp, esp
.text:0001045F                 mov     eax, [ebp+arg_0]
.text:00010462                 mov     dword ptr [eax+0E48h], 0
.text:0001046C                 mov     ecx, [ebp+arg_0]
.text:0001046F                 mov     dword ptr [ecx+0E5Ch], 0
.text:00010479                 mov     edx, [ebp+arg_0]
.text:0001047C                 mov     dword ptr [edx+0E60h], 0
.text:00010486                 mov     eax, [ebp+arg_0]
.text:00010489                 mov     dword ptr [eax+0E54h], 0
.text:00010493                 mov     ecx, [ebp+arg_0]
.text:00010496                 mov     dword ptr [ecx+0E58h], 0
.text:000104A0                 pop     ebp
.text:000104A1                 retn
.text:000104A1 _deselect       endp
.text:000104A1
.text:000104A1 ; ---------------------------------------------------------------------------
.text:000104A2                 db 0Ah dup(0CCh)
.text:000104AC
.text:000104AC ; =============== S U B R O U T I N E =======================================
.text:000104AC
.text:000104AC ; Attributes: bp-based frame
.text:000104AC
.text:000104AC                 public _term_deselect
.text:000104AC _term_deselect  proc near
.text:000104AC
.text:000104AC arg_0           = dword ptr  8
.text:000104AC
.text:000104AC                 push    ebp
.text:000104AD                 mov     ebp, esp
.text:000104AF                 mov     eax, [ebp+arg_0]
.text:000104B2                 push    eax
.text:000104B3                 call    _deselect
.text:000104B8                 add     esp, 4
.text:000104BB                 mov     ecx, [ebp+arg_0]
.text:000104BE                 push    ecx
.text:000104BF                 call    _term_update
.text:000104C4                 add     esp, 4
.text:000104C7                 mov     edx, [ebp+arg_0]
.text:000104CA                 cmp     dword ptr [edx+0E48h], 2
.text:000104D1                 jz      short loc_104DF
.text:000104D3                 mov     eax, [ebp+arg_0]
.text:000104D6                 push    eax
.text:000104D7                 call    _term_out
.text:000104DC                 add     esp, 4
.text:000104DF
.text:000104DF loc_104DF:                              ; CODE XREF: _term_deselect+25j
.text:000104DF                 cmp     ebp, esp
.text:000104E1                 call    __RTC_CheckEsp
.text:000104E6                 pop     ebp
.text:000104E7                 retn
.text:000104E7 _term_deselect  endp
.text:000104E7
.text:000104E7 ; ---------------------------------------------------------------------------
.text:000104E8                 db 4 dup(0CCh)
.text:000104EC
.text:000104EC ; =============== S U B R O U T I N E =======================================
.text:000104EC
.text:000104EC ; Attributes: bp-based frame
.text:000104EC
.text:000104EC                 public _term_ldisc
.text:000104EC _term_ldisc     proc near
.text:000104EC
.text:000104EC arg_0           = dword ptr  8
.text:000104EC arg_4           = dword ptr  0Ch
.text:000104EC
.text:000104EC                 push    ebp
.text:000104ED                 mov     ebp, esp
.text:000104EF                 cmp     [ebp+arg_4], 1
.text:000104F3                 jnz     short loc_10500
.text:000104F5                 mov     eax, [ebp+arg_0]
.text:000104F8                 mov     eax, [eax+0C8h]
.text:000104FE                 jmp     short loc_10513
.text:00010500 ; ---------------------------------------------------------------------------
.text:00010500
.text:00010500 loc_10500:                              ; CODE XREF: _term_ldisc+7j
.text:00010500                 cmp     [ebp+arg_4], 0
.text:00010504                 jnz     short loc_10511
.text:00010506                 mov     ecx, [ebp+arg_0]
.text:00010509                 mov     eax, [ecx+0CCh]
.text:0001050F                 jmp     short loc_10513
.text:00010511 ; ---------------------------------------------------------------------------
.text:00010511
.text:00010511 loc_10511:                              ; CODE XREF: _term_ldisc+18j
.text:00010511                 xor     eax, eax
.text:00010513
.text:00010513 loc_10513:                              ; CODE XREF: _term_ldisc+12j
.text:00010513                                         ; _term_ldisc+23j
.text:00010513                 pop     ebp
.text:00010514                 retn
.text:00010514 _term_ldisc     endp
.text:00010514
.text:00010514 ; ---------------------------------------------------------------------------
.text:00010515                 db 7 dup(0CCh)
.text:0001051C
.text:0001051C ; =============== S U B R O U T I N E =======================================
.text:0001051C
.text:0001051C ; Attributes: bp-based frame
.text:0001051C
.text:0001051C                 public _term_data
.text:0001051C _term_data      proc near               ; CODE XREF: _term_data_untrusted+40p
.text:0001051C                                         ; _term_data_untrusted+67p ...
.text:0001051C
.text:0001051C arg_0           = dword ptr  8
.text:0001051C arg_8           = dword ptr  10h
.text:0001051C arg_C           = dword ptr  14h
.text:0001051C
.text:0001051C                 push    ebp
.text:0001051D                 mov     ebp, esp
.text:0001051F                 mov     eax, [ebp+arg_C]
.text:00010522                 push    eax
.text:00010523                 mov     ecx, [ebp+arg_8]
.text:00010526                 push    ecx
.text:00010527                 mov     edx, [ebp+arg_0]
.text:0001052A                 add     edx, 60h ; '`'
.text:0001052D                 push    edx
.text:0001052E                 call    _bufchain_add
.text:00010533                 add     esp, 0Ch
.text:00010536                 mov     eax, [ebp+arg_0]
.text:00010539                 cmp     dword ptr [eax+1098h], 0
.text:00010540                 jnz     short loc_10580
.text:00010542                 mov     ecx, [ebp+arg_0]
.text:00010545                 mov     dword ptr [ecx+1098h], 1
.text:0001054F                 mov     edx, [ebp+arg_0]
.text:00010552                 push    edx
.text:00010553                 call    _term_reset_cblink
.text:00010558                 add     esp, 4
.text:0001055B                 mov     eax, [ebp+arg_0]
.text:0001055E                 cmp     dword ptr [eax+0E48h], 2
.text:00010565                 jz      short loc_10573
.text:00010567                 mov     ecx, [ebp+arg_0]
.text:0001056A                 push    ecx
.text:0001056B                 call    _term_out
.text:00010570                 add     esp, 4
.text:00010573
.text:00010573 loc_10573:                              ; CODE XREF: _term_data+49j
.text:00010573                 mov     edx, [ebp+arg_0]
.text:00010576                 mov     dword ptr [edx+1098h], 0
.text:00010580
.text:00010580 loc_10580:                              ; CODE XREF: _term_data+24j
.text:00010580                 xor     eax, eax
.text:00010582                 cmp     ebp, esp
.text:00010584                 call    __RTC_CheckEsp
.text:00010589                 pop     ebp
.text:0001058A                 retn
.text:0001058A _term_data      endp
.text:0001058A
.text:0001058A ; ---------------------------------------------------------------------------
.text:0001058B                 align 4
.text:0001058C
.text:0001058C ; =============== S U B R O U T I N E =======================================
.text:0001058C
.text:0001058C ; Attributes: bp-based frame
.text:0001058C
.text:0001058C _term_reset_cblink proc near            ; CODE XREF: _term_data+37p
.text:0001058C
.text:0001058C arg_0           = dword ptr  8
.text:0001058C
.text:0001058C                 push    ebp
.text:0001058D                 mov     ebp, esp
.text:0001058F                 mov     eax, [ebp+arg_0]
.text:00010592                 push    eax
.text:00010593                 call    _seen_disp_event
.text:00010598                 add     esp, 4
.text:0001059B                 mov     ecx, [ebp+arg_0]
.text:0001059E                 mov     dword ptr [ecx+0BCh], 1
.text:000105A8                 mov     edx, [ebp+arg_0]
.text:000105AB                 mov     dword ptr [edx+10A8h], 0
.text:000105B5                 mov     eax, [ebp+arg_0]
.text:000105B8                 push    eax
.text:000105B9                 call    _term_schedule_cblink
.text:000105BE                 add     esp, 4
.text:000105C1                 cmp     ebp, esp
.text:000105C3                 call    __RTC_CheckEsp
.text:000105C8                 pop     ebp
.text:000105C9                 retn
.text:000105C9 _term_reset_cblink endp
.text:000105C9
.text:000105C9 ; ---------------------------------------------------------------------------
.text:000105CA                 align 4
.text:000105CC
.text:000105CC ; =============== S U B R O U T I N E =======================================
.text:000105CC
.text:000105CC ; Attributes: bp-based frame
.text:000105CC
.text:000105CC                 public _term_data_untrusted
.text:000105CC _term_data_untrusted proc near          ; CODE XREF: _term_get_userpass_input+87p
.text:000105CC                                         ; _term_get_userpass_input+ADp ...
.text:000105CC
.text:000105CC var_4           = dword ptr -4
.text:000105CC arg_0           = dword ptr  8
.text:000105CC arg_4           = dword ptr  0Ch
.text:000105CC arg_8           = dword ptr  10h
.text:000105CC
.text:000105CC                 push    ebp
.text:000105CD                 mov     ebp, esp
.text:000105CF                 push    ecx
.text:000105D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000105D7                 mov     [ebp+var_4], 0
.text:000105DE                 jmp     short loc_105E9
.text:000105E0 ; ---------------------------------------------------------------------------
.text:000105E0
.text:000105E0 loc_105E0:                              ; CODE XREF: _term_data_untrusted:loc_1063Bj
.text:000105E0                 mov     eax, [ebp+var_4]
.text:000105E3                 add     eax, 1
.text:000105E6                 mov     [ebp+var_4], eax
.text:000105E9
.text:000105E9 loc_105E9:                              ; CODE XREF: _term_data_untrusted+12j
.text:000105E9                 mov     ecx, [ebp+var_4]
.text:000105EC                 cmp     ecx, [ebp+arg_8]
.text:000105EF                 jge     short loc_1063D
.text:000105F1                 mov     edx, [ebp+arg_4]
.text:000105F4                 add     edx, [ebp+var_4]
.text:000105F7                 movsx   eax, byte ptr [edx]
.text:000105FA                 cmp     eax, 0Ah
.text:000105FD                 jnz     short loc_10616
.text:000105FF                 push    2
.text:00010601                 push    offset $SG88554
.text:00010606                 push    1
.text:00010608                 mov     ecx, [ebp+arg_0]
.text:0001060B                 push    ecx
.text:0001060C                 call    _term_data
.text:00010611                 add     esp, 10h
.text:00010614                 jmp     short loc_1063B
.text:00010616 ; ---------------------------------------------------------------------------
.text:00010616
.text:00010616 loc_10616:                              ; CODE XREF: _term_data_untrusted+31j
.text:00010616                 mov     edx, [ebp+arg_4]
.text:00010619                 add     edx, [ebp+var_4]
.text:0001061C                 movsx   eax, byte ptr [edx]
.text:0001061F                 and     eax, 60h
.text:00010622                 jz      short loc_1063B
.text:00010624                 push    1
.text:00010626                 mov     ecx, [ebp+arg_4]
.text:00010629                 add     ecx, [ebp+var_4]
.text:0001062C                 push    ecx
.text:0001062D                 push    1
.text:0001062F                 mov     edx, [ebp+arg_0]
.text:00010632                 push    edx
.text:00010633                 call    _term_data
.text:00010638                 add     esp, 10h
.text:0001063B
.text:0001063B loc_1063B:                              ; CODE XREF: _term_data_untrusted+48j
.text:0001063B                                         ; _term_data_untrusted+56j
.text:0001063B                 jmp     short loc_105E0
.text:0001063D ; ---------------------------------------------------------------------------
.text:0001063D
.text:0001063D loc_1063D:                              ; CODE XREF: _term_data_untrusted+23j
.text:0001063D                 xor     eax, eax
.text:0001063F                 add     esp, 4
.text:00010642                 cmp     ebp, esp
.text:00010644                 call    __RTC_CheckEsp
.text:00010649                 mov     esp, ebp
.text:0001064B                 pop     ebp
.text:0001064C                 retn
.text:0001064C _term_data_untrusted endp
.text:0001064C
.text:0001064C ; ---------------------------------------------------------------------------
.text:0001064D                 db 0Fh dup(0CCh)
.text:0001065C
.text:0001065C ; =============== S U B R O U T I N E =======================================
.text:0001065C
.text:0001065C ; Attributes: bp-based frame
.text:0001065C
.text:0001065C                 public _term_provide_logctx
.text:0001065C _term_provide_logctx proc near
.text:0001065C
.text:0001065C arg_0           = dword ptr  8
.text:0001065C arg_4           = dword ptr  0Ch
.text:0001065C
.text:0001065C                 push    ebp
.text:0001065D                 mov     ebp, esp
.text:0001065F                 mov     eax, [ebp+arg_0]
.text:00010662                 mov     ecx, [ebp+arg_4]
.text:00010665                 mov     [eax+108Ch], ecx
.text:0001066B                 pop     ebp
.text:0001066C                 retn
.text:0001066C _term_provide_logctx endp
.text:0001066C
.text:0001066C ; ---------------------------------------------------------------------------
.text:0001066D                 db 0Fh dup(0CCh)
.text:0001067C
.text:0001067C ; =============== S U B R O U T I N E =======================================
.text:0001067C
.text:0001067C ; Attributes: bp-based frame
.text:0001067C
.text:0001067C                 public _term_set_focus
.text:0001067C _term_set_focus proc near
.text:0001067C
.text:0001067C arg_0           = dword ptr  8
.text:0001067C arg_4           = dword ptr  0Ch
.text:0001067C
.text:0001067C                 push    ebp
.text:0001067D                 mov     ebp, esp
.text:0001067F                 mov     eax, [ebp+arg_0]
.text:00010682                 mov     ecx, [ebp+arg_4]
.text:00010685                 mov     [eax+134h], ecx
.text:0001068B                 mov     edx, [ebp+arg_0]
.text:0001068E                 push    edx
.text:0001068F                 call    _term_schedule_cblink
.text:00010694                 add     esp, 4
.text:00010697                 cmp     ebp, esp
.text:00010699                 call    __RTC_CheckEsp
.text:0001069E                 pop     ebp
.text:0001069F                 retn
.text:0001069F _term_set_focus endp
.text:0001069F
.text:0001069F ; ---------------------------------------------------------------------------
.text:000106A0                 db 0Ch dup(0CCh)
.text:000106AC
.text:000106AC ; =============== S U B R O U T I N E =======================================
.text:000106AC
.text:000106AC ; Attributes: bp-based frame
.text:000106AC
.text:000106AC ; int __cdecl term_get_ttymode(int, char *Str1)
.text:000106AC                 public _term_get_ttymode
.text:000106AC _term_get_ttymode proc near
.text:000106AC
.text:000106AC var_8           = dword ptr -8
.text:000106AC var_4           = dword ptr -4
.text:000106AC arg_0           = dword ptr  8
.text:000106AC Str1            = dword ptr  0Ch
.text:000106AC
.text:000106AC                 push    ebp
.text:000106AD                 mov     ebp, esp
.text:000106AF                 sub     esp, 8
.text:000106B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000106B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000106C0                 mov     [ebp+var_4], 0
.text:000106C7                 push    offset $SG88575 ; "ERASE"
.text:000106CC                 mov     eax, [ebp+Str1]
.text:000106CF                 push    eax             ; Str1
.text:000106D0                 call    _strcmp
.text:000106D5                 add     esp, 8
.text:000106D8                 test    eax, eax
.text:000106DA                 jnz     short loc_106FE
.text:000106DC                 mov     ecx, [ebp+arg_0]
.text:000106DF                 cmp     dword ptr [ecx+10FCh], 0
.text:000106E6                 jz      short loc_106F1
.text:000106E8                 mov     [ebp+var_8], offset $SG88576
.text:000106EF                 jmp     short loc_106F8
.text:000106F1 ; ---------------------------------------------------------------------------
.text:000106F1
.text:000106F1 loc_106F1:                              ; CODE XREF: _term_get_ttymode+3Aj
.text:000106F1                 mov     [ebp+var_8], offset $SG88577
.text:000106F8
.text:000106F8 loc_106F8:                              ; CODE XREF: _term_get_ttymode+43j
.text:000106F8                 mov     edx, [ebp+var_8]
.text:000106FB                 mov     [ebp+var_4], edx
.text:000106FE
.text:000106FE loc_106FE:                              ; CODE XREF: _term_get_ttymode+2Ej
.text:000106FE                 mov     eax, [ebp+var_4]
.text:00010701                 push    eax
.text:00010702                 call    _dupstr
.text:00010707                 add     esp, 4
.text:0001070A                 add     esp, 8
.text:0001070D                 cmp     ebp, esp
.text:0001070F                 call    __RTC_CheckEsp
.text:00010714                 mov     esp, ebp
.text:00010716                 pop     ebp
.text:00010717                 retn
.text:00010717 _term_get_ttymode endp
.text:00010717
.text:00010717 ; ---------------------------------------------------------------------------
.text:00010718                 db 4 dup(0CCh)
.text:0001071C
.text:0001071C ; =============== S U B R O U T I N E =======================================
.text:0001071C
.text:0001071C ; Attributes: bp-based frame
.text:0001071C
.text:0001071C                 public _term_get_userpass_input
.text:0001071C _term_get_userpass_input proc near
.text:0001071C
.text:0001071C var_28          = dword ptr -28h
.text:0001071C var_1D          = byte ptr -1Dh
.text:0001071C var_18          = dword ptr -18h
.text:0001071C var_14          = dword ptr -14h
.text:0001071C var_10          = dword ptr -10h
.text:0001071C var_C           = dword ptr -0Ch
.text:0001071C var_8           = dword ptr -8
.text:0001071C var_4           = dword ptr -4
.text:0001071C arg_0           = dword ptr  8
.text:0001071C arg_4           = dword ptr  0Ch
.text:0001071C arg_8           = dword ptr  10h
.text:0001071C arg_C           = dword ptr  14h
.text:0001071C
.text:0001071C                 push    ebp
.text:0001071D                 mov     ebp, esp
.text:0001071F                 sub     esp, 28h
.text:00010722                 push    edi
.text:00010723                 lea     edi, [ebp+var_28]
.text:00010726                 mov     ecx, 0Ah
.text:0001072B                 mov     eax, 0CCCCCCCCh
.text:00010730                 rep stosd
.text:00010732                 mov     eax, [ebp+arg_4]
.text:00010735                 mov     ecx, [eax+20h]
.text:00010738                 mov     [ebp+var_4], ecx
.text:0001073B                 cmp     [ebp+var_4], 0
.text:0001073F                 jnz     loc_10862
.text:00010745                 push    0Ch
.text:00010747                 push    1
.text:00010749                 call    _safemalloc
.text:0001074E                 add     esp, 8
.text:00010751                 mov     [ebp+var_4], eax
.text:00010754                 mov     edx, [ebp+arg_4]
.text:00010757                 mov     eax, [ebp+var_4]
.text:0001075A                 mov     [edx+20h], eax
.text:0001075D                 mov     ecx, [ebp+var_4]
.text:00010760                 mov     dword ptr [ecx], 0
.text:00010766                 mov     edx, [ebp+var_4]
.text:00010769                 mov     dword ptr [edx+4], 0
.text:00010770                 mov     eax, [ebp+arg_4]
.text:00010773                 cmp     dword ptr [eax+8], 0
.text:00010777                 jz      short loc_107D1
.text:00010779                 mov     ecx, [ebp+arg_4]
.text:0001077C                 cmp     dword ptr [ecx+4], 0
.text:00010780                 jz      short loc_107D1
.text:00010782                 mov     edx, [ebp+arg_4]
.text:00010785                 mov     eax, [edx+4]
.text:00010788                 push    eax             ; Str
.text:00010789                 call    _strlen
.text:0001078E                 add     esp, 4
.text:00010791                 mov     [ebp+var_8], eax
.text:00010794                 mov     ecx, [ebp+var_8]
.text:00010797                 push    ecx
.text:00010798                 mov     edx, [ebp+arg_4]
.text:0001079B                 mov     eax, [edx+4]
.text:0001079E                 push    eax
.text:0001079F                 mov     ecx, [ebp+arg_0]
.text:000107A2                 push    ecx
.text:000107A3                 call    _term_data_untrusted
.text:000107A8                 add     esp, 0Ch
.text:000107AB                 mov     edx, [ebp+arg_4]
.text:000107AE                 mov     eax, [edx+4]
.text:000107B1                 mov     ecx, [ebp+var_8]
.text:000107B4                 movsx   edx, byte ptr [eax+ecx-1]
.text:000107B9                 cmp     edx, 0Ah
.text:000107BC                 jz      short loc_107D1
.text:000107BE                 push    1
.text:000107C0                 push    offset $SG88599
.text:000107C5                 mov     eax, [ebp+arg_0]
.text:000107C8                 push    eax
.text:000107C9                 call    _term_data_untrusted
.text:000107CE                 add     esp, 0Ch
.text:000107D1
.text:000107D1 loc_107D1:                              ; CODE XREF: _term_get_userpass_input+5Bj
.text:000107D1                                         ; _term_get_userpass_input+64j ...
.text:000107D1                 mov     ecx, [ebp+arg_4]
.text:000107D4                 cmp     dword ptr [ecx+0Ch], 0
.text:000107D8                 jz      short loc_10829
.text:000107DA                 mov     edx, [ebp+arg_4]
.text:000107DD                 mov     eax, [edx+0Ch]
.text:000107E0                 push    eax             ; Str
.text:000107E1                 call    _strlen
.text:000107E6                 add     esp, 4
.text:000107E9                 mov     [ebp+var_C], eax
.text:000107EC                 mov     ecx, [ebp+var_C]
.text:000107EF                 push    ecx
.text:000107F0                 mov     edx, [ebp+arg_4]
.text:000107F3                 mov     eax, [edx+0Ch]
.text:000107F6                 push    eax
.text:000107F7                 mov     ecx, [ebp+arg_0]
.text:000107FA                 push    ecx
.text:000107FB                 call    _term_data_untrusted
.text:00010800                 add     esp, 0Ch
.text:00010803                 mov     edx, [ebp+arg_4]
.text:00010806                 mov     eax, [edx+0Ch]
.text:00010809                 mov     ecx, [ebp+var_C]
.text:0001080C                 movsx   edx, byte ptr [eax+ecx-1]
.text:00010811                 cmp     edx, 0Ah
.text:00010814                 jz      short loc_10829
.text:00010816                 push    1
.text:00010818                 push    offset $SG88603
.text:0001081D                 mov     eax, [ebp+arg_0]
.text:00010820                 push    eax
.text:00010821                 call    _term_data_untrusted
.text:00010826                 add     esp, 0Ch
.text:00010829
.text:00010829 loc_10829:                              ; CODE XREF: _term_get_userpass_input+BCj
.text:00010829                                         ; _term_get_userpass_input+F8j
.text:00010829                 mov     [ebp+var_10], 0
.text:00010830                 jmp     short loc_1083B
.text:00010832 ; ---------------------------------------------------------------------------
.text:00010832
.text:00010832 loc_10832:                              ; CODE XREF: _term_get_userpass_input+144j
.text:00010832                 mov     ecx, [ebp+var_10]
.text:00010835                 add     ecx, 1
.text:00010838                 mov     [ebp+var_10], ecx
.text:0001083B
.text:0001083B loc_1083B:                              ; CODE XREF: _term_get_userpass_input+114j
.text:0001083B                 mov     edx, [ebp+arg_4]
.text:0001083E                 mov     eax, [ebp+var_10]
.text:00010841                 cmp     eax, [edx+14h]
.text:00010844                 jge     short loc_10862
.text:00010846                 push    offset $SG88609
.text:0001084B                 mov     ecx, [ebp+arg_4]
.text:0001084E                 mov     edx, [ecx+18h]
.text:00010851                 mov     eax, [ebp+var_10]
.text:00010854                 mov     ecx, [edx+eax*4]
.text:00010857                 push    ecx
.text:00010858                 call    _prompt_set_result
.text:0001085D                 add     esp, 8
.text:00010860                 jmp     short loc_10832
.text:00010862 ; ---------------------------------------------------------------------------
.text:00010862
.text:00010862 loc_10862:                              ; CODE XREF: _term_get_userpass_input+23j
.text:00010862                                         ; _term_get_userpass_input+128j ...
.text:00010862                 mov     edx, [ebp+var_4]
.text:00010865                 mov     eax, [ebp+arg_4]
.text:00010868                 mov     ecx, [edx]
.text:0001086A                 cmp     ecx, [eax+14h]
.text:0001086D                 jnb     loc_10AC0
.text:00010873                 mov     edx, [ebp+var_4]
.text:00010876                 mov     eax, [edx]
.text:00010878                 mov     ecx, [ebp+arg_4]
.text:0001087B                 mov     edx, [ecx+18h]
.text:0001087E                 mov     eax, [edx+eax*4]
.text:00010881                 mov     [ebp+var_14], eax
.text:00010884                 mov     [ebp+var_18], 0
.text:0001088B                 mov     ecx, [ebp+var_4]
.text:0001088E                 cmp     dword ptr [ecx+4], 0
.text:00010892                 jnz     short loc_108C9
.text:00010894                 mov     edx, [ebp+var_14]
.text:00010897                 mov     eax, [edx]
.text:00010899                 push    eax             ; Str
.text:0001089A                 call    _strlen
.text:0001089F                 add     esp, 4
.text:000108A2                 push    eax
.text:000108A3                 mov     ecx, [ebp+var_14]
.text:000108A6                 mov     edx, [ecx]
.text:000108A8                 push    edx
.text:000108A9                 mov     eax, [ebp+arg_0]
.text:000108AC                 push    eax
.text:000108AD                 call    _term_data_untrusted
.text:000108B2                 add     esp, 0Ch
.text:000108B5                 mov     ecx, [ebp+var_4]
.text:000108B8                 mov     dword ptr [ecx+4], 1
.text:000108BF                 mov     edx, [ebp+var_4]
.text:000108C2                 mov     dword ptr [edx+8], 0
.text:000108C9
.text:000108C9 loc_108C9:                              ; CODE XREF: _term_get_userpass_input+176j
.text:000108C9                 cmp     [ebp+arg_8], 0
.text:000108CD                 jz      short loc_108D5
.text:000108CF                 cmp     [ebp+arg_C], 0
.text:000108D3                 jnz     short loc_108DA
.text:000108D5
.text:000108D5 loc_108D5:                              ; CODE XREF: _term_get_userpass_input+1B1j
.text:000108D5                 jmp     loc_10AC0
.text:000108DA ; ---------------------------------------------------------------------------
.text:000108DA
.text:000108DA loc_108DA:                              ; CODE XREF: _term_get_userpass_input+1B7j
.text:000108DA                                         ; _term_get_userpass_input:loc_10AB6j
.text:000108DA                 cmp     [ebp+var_18], 0
.text:000108DE                 jnz     loc_10ABB
.text:000108E4                 cmp     [ebp+arg_C], 0
.text:000108E8                 jz      loc_10ABB
.text:000108EE                 mov     eax, [ebp+arg_8]
.text:000108F1                 mov     cl, [eax]
.text:000108F3                 mov     [ebp+var_1D], cl
.text:000108F6                 mov     edx, [ebp+arg_8]
.text:000108F9                 add     edx, 1
.text:000108FC                 mov     [ebp+arg_8], edx
.text:000108FF                 mov     eax, [ebp+arg_C]
.text:00010902                 sub     eax, 1
.text:00010905                 mov     [ebp+arg_C], eax
.text:00010908                 movsx   ecx, [ebp+var_1D]
.text:0001090C                 mov     [ebp+var_28], ecx
.text:0001090F                 mov     edx, [ebp+var_28]
.text:00010912                 sub     edx, 3
.text:00010915                 mov     [ebp+var_28], edx
.text:00010918                 cmp     [ebp+var_28], 7Ch ; '|' ; switch 125 cases
.text:0001091C                 ja      $LN7_6          ; jumptable 0001092C default case
.text:00010922                 mov     eax, [ebp+var_28]
.text:00010925                 movzx   ecx, ds:$LN36_1[eax]
.text:0001092C                 jmp     ds:$LN40[ecx*4] ; switch jump
.text:00010933 ; ---------------------------------------------------------------------------
.text:00010933
.text:00010933 $LN16_1:                                ; CODE XREF: _term_get_userpass_input+210j
.text:00010933                                         ; DATA XREF: .text:$LN40o
.text:00010933                 push    2               ; jumptable 0001092C cases 7,10
.text:00010935                 push    offset $SG88627
.text:0001093A                 push    0
.text:0001093C                 mov     edx, [ebp+arg_0]
.text:0001093F                 push    edx
.text:00010940                 call    _term_data
.text:00010945                 add     esp, 10h
.text:00010948                 mov     eax, [ebp+var_4]
.text:0001094B                 mov     ecx, [eax+8]
.text:0001094E                 add     ecx, 1
.text:00010951                 push    ecx
.text:00010952                 mov     edx, [ebp+var_14]
.text:00010955                 push    edx
.text:00010956                 call    _prompt_ensure_result_size
.text:0001095B                 add     esp, 8
.text:0001095E                 mov     eax, [ebp+var_14]
.text:00010961                 mov     ecx, [eax+8]
.text:00010964                 mov     edx, [ebp+var_4]
.text:00010967                 mov     eax, [edx+8]
.text:0001096A                 mov     byte ptr [ecx+eax], 0
.text:0001096E                 mov     ecx, [ebp+var_4]
.text:00010971                 mov     edx, [ecx]
.text:00010973                 add     edx, 1
.text:00010976                 mov     eax, [ebp+var_4]
.text:00010979                 mov     [eax], edx
.text:0001097B                 mov     ecx, [ebp+var_4]
.text:0001097E                 mov     dword ptr [ecx+4], 0
.text:00010985                 mov     [ebp+var_18], 1
.text:0001098C                 jmp     loc_10AB6
.text:00010991 ; ---------------------------------------------------------------------------
.text:00010991
.text:00010991 $LN15_3:                                ; CODE XREF: _term_get_userpass_input+210j
.text:00010991                                         ; DATA XREF: .text:$LN40o
.text:00010991                 mov     edx, [ebp+var_4] ; jumptable 0001092C cases 5,124
.text:00010994                 cmp     dword ptr [edx+8], 0
.text:00010998                 jbe     short loc_109C7
.text:0001099A                 mov     eax, [ebp+var_14]
.text:0001099D                 cmp     dword ptr [eax+4], 0
.text:000109A1                 jz      short loc_109B8
.text:000109A3                 push    3
.text:000109A5                 push    offset $SG88631
.text:000109AA                 push    0
.text:000109AC                 mov     ecx, [ebp+arg_0]
.text:000109AF                 push    ecx
.text:000109B0                 call    _term_data
.text:000109B5                 add     esp, 10h
.text:000109B8
.text:000109B8 loc_109B8:                              ; CODE XREF: _term_get_userpass_input+285j
.text:000109B8                 mov     edx, [ebp+var_4]
.text:000109BB                 mov     eax, [edx+8]
.text:000109BE                 sub     eax, 1
.text:000109C1                 mov     ecx, [ebp+var_4]
.text:000109C4                 mov     [ecx+8], eax
.text:000109C7
.text:000109C7 loc_109C7:                              ; CODE XREF: _term_get_userpass_input+27Cj
.text:000109C7                 jmp     loc_10AB6
.text:000109CC ; ---------------------------------------------------------------------------
.text:000109CC
.text:000109CC $LN11_2:                                ; CODE XREF: _term_get_userpass_input+210j
.text:000109CC                                         ; _term_get_userpass_input+2E6j
.text:000109CC                                         ; DATA XREF: ...
.text:000109CC                 mov     edx, [ebp+var_4] ; jumptable 0001092C cases 18,24
.text:000109CF                 cmp     dword ptr [edx+8], 0
.text:000109D3                 jbe     short loc_10A04
.text:000109D5                 mov     eax, [ebp+var_14]
.text:000109D8                 cmp     dword ptr [eax+4], 0
.text:000109DC                 jz      short loc_109F3
.text:000109DE                 push    3
.text:000109E0                 push    offset $SG88637
.text:000109E5                 push    0
.text:000109E7                 mov     ecx, [ebp+arg_0]
.text:000109EA                 push    ecx
.text:000109EB                 call    _term_data
.text:000109F0                 add     esp, 10h
.text:000109F3
.text:000109F3 loc_109F3:                              ; CODE XREF: _term_get_userpass_input+2C0j
.text:000109F3                 mov     edx, [ebp+var_4]
.text:000109F6                 mov     eax, [edx+8]
.text:000109F9                 sub     eax, 1
.text:000109FC                 mov     ecx, [ebp+var_4]
.text:000109FF                 mov     [ecx+8], eax
.text:00010A02                 jmp     short $LN11_2   ; jumptable 0001092C cases 18,24
.text:00010A04 ; ---------------------------------------------------------------------------
.text:00010A04
.text:00010A04 loc_10A04:                              ; CODE XREF: _term_get_userpass_input+2B7j
.text:00010A04                 jmp     loc_10AB6
.text:00010A09 ; ---------------------------------------------------------------------------
.text:00010A09
.text:00010A09 $LN8_5:                                 ; CODE XREF: _term_get_userpass_input+210j
.text:00010A09                                         ; DATA XREF: .text:$LN40o
.text:00010A09                 push    2               ; jumptable 0001092C cases 0,1
.text:00010A0B                 push    offset $SG88639
.text:00010A10                 push    0
.text:00010A12                 mov     edx, [ebp+arg_0]
.text:00010A15                 push    edx
.text:00010A16                 call    _term_data
.text:00010A1B                 add     esp, 10h
.text:00010A1E                 mov     eax, [ebp+var_4]
.text:00010A21                 push    eax
.text:00010A22                 call    _safefree
.text:00010A27                 add     esp, 4
.text:00010A2A                 mov     ecx, [ebp+arg_4]
.text:00010A2D                 mov     dword ptr [ecx+20h], 0
.text:00010A34                 xor     eax, eax
.text:00010A36                 jmp     loc_10AEF
.text:00010A3B ; ---------------------------------------------------------------------------
.text:00010A3B
.text:00010A3B $LN7_6:                                 ; CODE XREF: _term_get_userpass_input+200j
.text:00010A3B                                         ; _term_get_userpass_input+210j
.text:00010A3B                                         ; DATA XREF: ...
.text:00010A3B                 mov     edx, [ebp+var_14] ; jumptable 0001092C default case
.text:00010A3E                 cmp     dword ptr [edx+4], 0
.text:00010A42                 jz      short loc_10A62
.text:00010A44                 movsx   eax, [ebp+var_1D]
.text:00010A48                 cmp     eax, 20h ; ' '
.text:00010A4B                 jl      short loc_10A56
.text:00010A4D                 movsx   ecx, [ebp+var_1D]
.text:00010A51                 cmp     ecx, 7Eh ; '~'
.text:00010A54                 jle     short loc_10A62
.text:00010A56
.text:00010A56 loc_10A56:                              ; CODE XREF: _term_get_userpass_input+32Fj
.text:00010A56                 movzx   edx, [ebp+var_1D]
.text:00010A5A                 cmp     edx, 0A0h ; 'á'
.text:00010A60                 jl      short loc_10AB6
.text:00010A62
.text:00010A62 loc_10A62:                              ; CODE XREF: _term_get_userpass_input+326j
.text:00010A62                                         ; _term_get_userpass_input+338j
.text:00010A62                 mov     eax, [ebp+var_4]
.text:00010A65                 mov     ecx, [eax+8]
.text:00010A68                 add     ecx, 1
.text:00010A6B                 push    ecx
.text:00010A6C                 mov     edx, [ebp+var_14]
.text:00010A6F                 push    edx
.text:00010A70                 call    _prompt_ensure_result_size
.text:00010A75                 add     esp, 8
.text:00010A78                 mov     eax, [ebp+var_14]
.text:00010A7B                 mov     ecx, [eax+8]
.text:00010A7E                 mov     edx, [ebp+var_4]
.text:00010A81                 mov     eax, [edx+8]
.text:00010A84                 mov     dl, [ebp+var_1D]
.text:00010A87                 mov     [ecx+eax], dl
.text:00010A8A                 mov     eax, [ebp+var_4]
.text:00010A8D                 mov     ecx, [eax+8]
.text:00010A90                 add     ecx, 1
.text:00010A93                 mov     edx, [ebp+var_4]
.text:00010A96                 mov     [edx+8], ecx
.text:00010A99                 mov     eax, [ebp+var_14]
.text:00010A9C                 cmp     dword ptr [eax+4], 0
.text:00010AA0                 jz      short loc_10AB6
.text:00010AA2                 push    1
.text:00010AA4                 lea     ecx, [ebp+var_1D]
.text:00010AA7                 push    ecx
.text:00010AA8                 push    0
.text:00010AAA                 mov     edx, [ebp+arg_0]
.text:00010AAD                 push    edx
.text:00010AAE                 call    _term_data
.text:00010AB3                 add     esp, 10h
.text:00010AB6
.text:00010AB6 loc_10AB6:                              ; CODE XREF: _term_get_userpass_input+270j
.text:00010AB6                                         ; _term_get_userpass_input:loc_109C7j ...
.text:00010AB6                 jmp     loc_108DA
.text:00010ABB ; ---------------------------------------------------------------------------
.text:00010ABB
.text:00010ABB loc_10ABB:                              ; CODE XREF: _term_get_userpass_input+1C2j
.text:00010ABB                                         ; _term_get_userpass_input+1CCj
.text:00010ABB                 jmp     loc_10862
.text:00010AC0 ; ---------------------------------------------------------------------------
.text:00010AC0
.text:00010AC0 loc_10AC0:                              ; CODE XREF: _term_get_userpass_input+151j
.text:00010AC0                                         ; _term_get_userpass_input:loc_108D5j
.text:00010AC0                 mov     eax, [ebp+var_4]
.text:00010AC3                 mov     ecx, [ebp+arg_4]
.text:00010AC6                 mov     edx, [eax]
.text:00010AC8                 cmp     edx, [ecx+14h]
.text:00010ACB                 jnb     short loc_10AD4
.text:00010ACD                 or      eax, 0FFFFFFFFh
.text:00010AD0                 jmp     short loc_10AEF
.text:00010AD2 ; ---------------------------------------------------------------------------
.text:00010AD2                 jmp     short loc_10AEF
.text:00010AD4 ; ---------------------------------------------------------------------------
.text:00010AD4
.text:00010AD4 loc_10AD4:                              ; CODE XREF: _term_get_userpass_input+3AFj
.text:00010AD4                 mov     eax, [ebp+var_4]
.text:00010AD7                 push    eax
.text:00010AD8                 call    _safefree
.text:00010ADD                 add     esp, 4
.text:00010AE0                 mov     ecx, [ebp+arg_4]
.text:00010AE3                 mov     dword ptr [ecx+20h], 0
.text:00010AEA                 mov     eax, 1
.text:00010AEF
.text:00010AEF loc_10AEF:                              ; CODE XREF: _term_get_userpass_input+31Aj
.text:00010AEF                                         ; _term_get_userpass_input+3B4j ...
.text:00010AEF                 push    edx
.text:00010AF0                 mov     ecx, ebp
.text:00010AF2                 push    eax
.text:00010AF3                 lea     edx, $LN39_0
.text:00010AF9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00010AFE                 pop     eax
.text:00010AFF                 pop     edx
.text:00010B00                 pop     edi
.text:00010B01                 add     esp, 28h
.text:00010B04                 cmp     ebp, esp
.text:00010B06                 call    __RTC_CheckEsp
.text:00010B0B                 mov     esp, ebp
.text:00010B0D                 pop     ebp
.text:00010B0E                 retn
.text:00010B0E _term_get_userpass_input endp
.text:00010B0E
.text:00010B0E ; ---------------------------------------------------------------------------
.text:00010B0F                 align 10h
.text:00010B10 $LN39_0         dd 1                    ; DATA XREF: _term_get_userpass_input+3D7o
.text:00010B14                 dd offset $LN38
.text:00010B18 $LN38           dd 0FFFFFFE3h, 1        ; DATA XREF: .text:00010B14o
.text:00010B20                 dd offset $LN37_1
.text:00010B24 $LN37_1         dd 0FF8B0063h           ; DATA XREF: .text:00010B20o
.text:00010B28 $LN40           dd offset $LN8_5, offset $LN15_3, offset $LN16_1, offset $LN11_2
.text:00010B28                                         ; DATA XREF: _term_get_userpass_input+210r
.text:00010B28                 dd offset $LN7_6        ; jump table for switch statement
.text:00010B3C $LN36_1         db      0,     0,     4,     4
.text:00010B3C                                         ; DATA XREF: _term_get_userpass_input+209r
.text:00010B3C                 db      4,     1,     4,     2 ; indirect table for switch statement
.text:00010B3C                 db      4,     4,     2,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     3,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      3,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      4,     4,     4,     4
.text:00010B3C                 db      1
.text:00010BB9                 align 4
.text:00010BB9 _text           ends
.text:00010BB9
.rtc$TMZ:00010BBC ; ===========================================================================
.rtc$TMZ:00010BBC
.rtc$TMZ:00010BBC ; Segment type: Pure data
.rtc$TMZ:00010BBC ; Segment permissions: Read
.rtc$TMZ:00010BBC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00010BBC                 assume cs:_rtc$TMZ
.rtc$TMZ:00010BBC                 ;org 10BBCh
.rtc$TMZ:00010BBC ; COMDAT (pick any)
.rtc$TMZ:00010BBC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00010BBC _rtc$TMZ        ends
.rtc$TMZ:00010BBC
.rtc$IMZ:00010BC0 ; ===========================================================================
.rtc$IMZ:00010BC0
.rtc$IMZ:00010BC0 ; Segment type: Pure data
.rtc$IMZ:00010BC0 ; Segment permissions: Read
.rtc$IMZ:00010BC0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00010BC0                 assume cs:_rtc$IMZ
.rtc$IMZ:00010BC0                 ;org 10BC0h
.rtc$IMZ:00010BC0 ; COMDAT (pick any)
.rtc$IMZ:00010BC0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00010BC0 _rtc$IMZ        ends
.rtc$IMZ:00010BC0
UNDEF:00010BD0 ; ===========================================================================
UNDEF:00010BD0
UNDEF:00010BD0 ; Segment type: Externs
UNDEF:00010BD0 ; UNDEF
UNDEF:00010BD0                 extrn _free_ctx:near    ; CODE XREF: _term_update+D0p
UNDEF:00010BD4                 extrn _sys_cursor:near  ; CODE XREF: _term_update+C4p
UNDEF:00010BD8                 extrn _get_ctx:near     ; CODE XREF: _term_update+2Bp
UNDEF:00010BDC                 extrn __RTC_CheckEsp:near ; CODE XREF: _term_update+DDp
UNDEF:00010BDC                                         ; _term_seen_key_event+7Bp ...
UNDEF:00010BE0                 extrn __RTC_Shutdown:near
UNDEF:00010BE0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00010BE4                 extrn __RTC_InitBase:near
UNDEF:00010BE4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00010BE8                 extrn _safefree:near    ; CODE XREF: _term_seen_key_event+36p
UNDEF:00010BE8                                         ; _term_reconfig+1C9p ...
UNDEF:00010BEC                 extrn _schedule_timer:near
UNDEF:00010BEC                                         ; CODE XREF: _term_schedule_update+27p
UNDEF:00010BEC                                         ; _term_schedule_tblink+29p ...
UNDEF:00010BF0 ; UINT __stdcall GetCaretBlinkTime()
UNDEF:00010BF0                 extrn __imp__GetCaretBlinkTime@0:near
UNDEF:00010BF0                                         ; CODE XREF: _term_schedule_cblink+33p
UNDEF:00010BF0                                         ; DATA XREF: _term_schedule_cblink+33r
UNDEF:00010BF4                 extrn _ldisc_send:near  ; CODE XREF: _term_pwron+2Fp
UNDEF:00010BF4                                         ; _term_mouse+3D1p ...
UNDEF:00010BF8                 extrn _conf_get_int_int:near ; CODE XREF: _power_on+43Cp
UNDEF:00010BF8                                         ; _term_reconfig+111p ...
UNDEF:00010BFC                 extrn _set_raw_mouse_mode:near ; CODE XREF: _power_on+3F9p
UNDEF:00010BFC                                         ; _term_reconfig+3D6p ...
UNDEF:00010C00                 extrn _conf_get_int:near ; CODE XREF: _power_on+127p
UNDEF:00010C00                                         ; _power_on+1A4p ...
UNDEF:00010C04                 extrn _ctrlparse:near   ; CODE XREF: _term_copy_stuff_from_conf+4C0p
UNDEF:00010C08                 extrn _safemalloc:near  ; CODE XREF: _term_copy_stuff_from_conf+48Cp
UNDEF:00010C08                                         ; _decompressline+73p ...
UNDEF:00010C0C ; size_t __cdecl strlen(const char *Str)
UNDEF:00010C0C                 extrn _strlen:near      ; CODE XREF: _term_copy_stuff_from_conf+47Bp
UNDEF:00010C0C                                         ; _term_out+1AD1p ...
UNDEF:00010C10                 extrn _conf_get_str:near
UNDEF:00010C10                                         ; CODE XREF: _term_copy_stuff_from_conf+46Cp
UNDEF:00010C10                                         ; _term_reconfig+443p ...
UNDEF:00010C14 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00010C14                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00010C14                                         ; CODE XREF: _term_copy_stuff_from_conf+54Dp
UNDEF:00010C14                                         ; _decompressline+195p ...
UNDEF:00010C18                 extrn _conf_copy:near   ; CODE XREF: _term_reconfig+262p
UNDEF:00010C18                                         ; _term_init+39p
UNDEF:00010C1C                 extrn _conf_free:near   ; CODE XREF: _term_reconfig+256p
UNDEF:00010C1C                                         ; _term_free+2A1p
UNDEF:00010C20                 extrn _delpos234:near   ; CODE XREF: _term_clrsb+27p
UNDEF:00010C20                                         ; _term_free+24p ...
UNDEF:00010C24                 extrn _fatalbox:near    ; CODE XREF: _lineptr+193p
UNDEF:00010C28                 extrn _index234:near    ; CODE XREF: _lineptr+E0p
UNDEF:00010C28                                         ; _lineptr+106p ...
UNDEF:00010C2C                 extrn _count234:near    ; CODE XREF: _lineptr+A6p
UNDEF:00010C2C                                         ; _lineptr+134p ...
UNDEF:00010C30 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00010C30                 extrn __wassert:near    ; CODE XREF: _lineptr+51p
UNDEF:00010C30                                         ; _lineptr+1B0p ...
UNDEF:00010C34                 extrn ___security_cookie:near
UNDEF:00010C34                                         ; DATA XREF: _readliteral_cc+16r
UNDEF:00010C34                                         ; _makeliteral_cc+26r ...
UNDEF:00010C38 ; __fastcall __security_check_cookie(x)
UNDEF:00010C38                 extrn @__security_check_cookie@4:near
UNDEF:00010C38                                         ; CODE XREF: _readliteral_cc+9Dp
UNDEF:00010C38                                         ; _makeliteral_cc+BCp ...
UNDEF:00010C3C                 extrn _saferealloc:near ; CODE XREF: _add_cc+83p
UNDEF:00010C3C                                         ; _resizeline+B3p ...
UNDEF:00010C40 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00010C40                 extrn _memmove:near     ; CODE XREF: _resizeline+89p
UNDEF:00010C40                                         ; _resizeline+FCp ...
UNDEF:00010C44                 extrn _bufchain_init:near ; CODE XREF: _term_init+B2p
UNDEF:00010C44                                         ; _term_init+C4p
UNDEF:00010C48 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00010C48                 extrn _strcpy:near      ; CODE XREF: _term_init+6Fp
UNDEF:00010C48                                         ; _term_out+400Bp ...
UNDEF:00010C4C                 extrn _expire_timer_context:near ; CODE XREF: _term_free+28Fp
UNDEF:00010C50                 extrn _printer_finish_job:near ; CODE XREF: _term_free+15Fp
UNDEF:00010C50                                         ; _term_print_finish+E0p
UNDEF:00010C54                 extrn _bufchain_clear:near ; CODE XREF: _term_free+141p
UNDEF:00010C54                                         ; _term_free+170p ...
UNDEF:00010C58                 extrn _freetree234:near ; CODE XREF: _term_free+4Ap
UNDEF:00010C58                                         ; _term_free+81p ...
UNDEF:00010C5C                 extrn _addpos234:near   ; CODE XREF: _term_size+1F7p
UNDEF:00010C5C                                         ; _term_size+279p ...
UNDEF:00010C60                 extrn _newtree234:near  ; CODE XREF: _term_size+DCp
UNDEF:00010C60                                         ; _term_size+ECp ...
UNDEF:00010C64 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00010C64                 extrn _memcmp:near      ; CODE XREF: _makerle+EDp
UNDEF:00010C64                                         ; _makerle+27Dp ...
UNDEF:00010C68                 extrn _set_sbar:near    ; CODE XREF: _update_sbar+45p
UNDEF:00010C6C                 extrn _printer_job_data:near
UNDEF:00010C6C                                         ; CODE XREF: _term_print_finish+B5p
UNDEF:00010C6C                                         ; _term_print_flush+79p
UNDEF:00010C70                 extrn _bufchain_consume:near
UNDEF:00010C70                                         ; CODE XREF: _term_print_finish+99p
UNDEF:00010C70                                         ; _term_print_finish+C9p ...
UNDEF:00010C74                 extrn _bufchain_prefix:near
UNDEF:00010C74                                         ; CODE XREF: _term_print_finish+6Ap
UNDEF:00010C74                                         ; _term_print_flush+4Bp ...
UNDEF:00010C78                 extrn _bufchain_size:near ; CODE XREF: _term_print_finish+48p
UNDEF:00010C78                                         ; _term_print_flush+29p ...
UNDEF:00010C7C                 extrn _do_cursor:near   ; CODE XREF: _do_paint+B38p
UNDEF:00010C7C                                         ; _do_paint+1038p
UNDEF:00010C80                 extrn _do_text:near     ; CODE XREF: _do_paint+B07p
UNDEF:00010C80                                         ; _do_paint+1007p
UNDEF:00010C84                 extrn _char_width:near  ; CODE XREF: _do_paint+682p
UNDEF:00010C88 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00010C88                 extrn _memcpy:near      ; CODE XREF: _term_bidi_line+360p
UNDEF:00010C88                                         ; _term_bidi_cache_store+2B5p ...
UNDEF:00010C8C                 extrn _do_shape:near    ; CODE XREF: _term_bidi_line+2F6p
UNDEF:00010C90                 extrn _do_bidi:near     ; CODE XREF: _term_bidi_line+258p
UNDEF:00010C94 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00010C94                 extrn _memset:near      ; CODE XREF: _term_bidi_cache_store+301p
UNDEF:00010C94                                         ; _term_bidi_cache_store+326p
UNDEF:00010C98                 extrn _write_clip:near  ; CODE XREF: _clipme+648p
UNDEF:00010C9C                 extrn _mb_to_wc:near    ; CODE XREF: _clipme+4A0p
UNDEF:00010C9C                                         ; _clipme+4E3p
UNDEF:00010CA0                 extrn _is_dbcs_leadbyte:near ; CODE XREF: _clipme+44Cp
UNDEF:00010CA4                 extrn _queue_toplevel_callback:near
UNDEF:00010CA4                                         ; CODE XREF: _term_do_paste+2F7p
UNDEF:00010CA4                                         ; _term_paste_callback+115p
UNDEF:00010CA8                 extrn _luni_send:near   ; CODE XREF: _term_do_paste+28Bp
UNDEF:00010CA8                                         ; _term_paste_callback+DBp
UNDEF:00010CAC                 extrn _get_clip:near    ; CODE XREF: _term_do_paste+39p
UNDEF:00010CAC                                         ; _term_do_paste+2E6p
UNDEF:00010CB0                 extrn _request_paste:near ; CODE XREF: _term_mouse+AA7p
UNDEF:00010CB4 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:00010CB4                 extrn _sprintf:near     ; CODE XREF: _term_mouse+344p
UNDEF:00010CB4                                         ; _term_mouse+375p ...
UNDEF:00010CB8                 extrn _logflush:near    ; CODE XREF: _term_out+4FEAp
UNDEF:00010CBC                 extrn _palette_set:near ; CODE XREF: _term_out+48F1p
UNDEF:00010CC0                 extrn _palette_reset:near ; CODE XREF: _term_out+4697p
UNDEF:00010CC4 ; char *__cdecl strcat(char *Dest, const char *Source)
UNDEF:00010CC4                 extrn _strcat:near      ; CODE XREF: _term_out+45C5p
UNDEF:00010CC4                                         ; _term_out+4603p ...
UNDEF:00010CC8                 extrn _get_window_title:near ; CODE XREF: _term_out+3A53p
UNDEF:00010CC8                                         ; _term_out+3B19p
UNDEF:00010CCC                 extrn _get_window_pixels:near ; CODE XREF: _term_out+395Ep
UNDEF:00010CD0                 extrn _get_window_pos:near ; CODE XREF: _term_out+38E3p
UNDEF:00010CD4                 extrn _is_iconic:near   ; CODE XREF: _term_out+387Bp
UNDEF:00010CD8                 extrn _set_zoomed:near  ; CODE XREF: _term_out+3858p
UNDEF:00010CDC                 extrn _refresh_window:near ; CODE XREF: _term_out+378Cp
UNDEF:00010CE0                 extrn _set_zorder:near  ; CODE XREF: _term_out+375Cp
UNDEF:00010CE0                                         ; _term_out+3775p
UNDEF:00010CE4                 extrn _move_window:near ; CODE XREF: _term_out+373Ep
UNDEF:00010CE8                 extrn _set_iconic:near  ; CODE XREF: _term_out+369Ap
UNDEF:00010CE8                                         ; _term_out+36B3p
UNDEF:00010CEC ; int __cdecl isdigit(int C)
UNDEF:00010CEC                 extrn _isdigit:near     ; CODE XREF: _term_out+2079p
UNDEF:00010CF0                 extrn _request_resize:near ; CODE XREF: _term_out+1B77p
UNDEF:00010CF0                                         ; _term_out+35EFp ...
UNDEF:00010CF4                 extrn _mk_wcwidth:near  ; CODE XREF: _term_out+FBEp
UNDEF:00010CF8                 extrn _mk_wcwidth_cjk:near ; CODE XREF: _term_out+FAAp
UNDEF:00010CFC                 extrn _do_beep:near     ; CODE XREF: _term_out+AC9p
UNDEF:00010D00 ; DWORD __stdcall GetTickCount()
UNDEF:00010D00                 extrn __imp__GetTickCount@0:near ; CODE XREF: _term_out+933p
UNDEF:00010D00                                         ; _term_schedule_vbell+14p ...
UNDEF:00010D04                 extrn _lpage_send:near  ; CODE XREF: _term_out+924p
UNDEF:00010D08                 extrn _bufchain_add:near ; CODE XREF: _term_out+19Bp
UNDEF:00010D08                                         ; _term_data+12p
UNDEF:00010D0C                 extrn _logtraffic:near  ; CODE XREF: _term_out+164p
UNDEF:00010D0C                                         ; _term_out+CE3p ...
UNDEF:00010D10                 extrn _set_title:near   ; CODE XREF: _do_osc+104p
UNDEF:00010D14                 extrn _set_icon:near    ; CODE XREF: _do_osc+CEp
UNDEF:00010D18                 extrn _printer_start_job:near
UNDEF:00010D18                                         ; CODE XREF: _term_print_setup+18p
UNDEF:00010D1C                 extrn _dupstr:near      ; CODE XREF: _term_get_ttymode+56p
UNDEF:00010D20 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00010D20                 extrn _strcmp:near      ; CODE XREF: _term_get_ttymode+24p
UNDEF:00010D24                 extrn _prompt_ensure_result_size:near
UNDEF:00010D24                                         ; CODE XREF: _term_get_userpass_input+23Ap
UNDEF:00010D24                                         ; _term_get_userpass_input+354p
UNDEF:00010D28                 extrn _prompt_set_result:near
UNDEF:00010D28                                         ; CODE XREF: _term_get_userpass_input+13Cp
UNDEF:00010D28
UNDEF:00010D28
UNDEF:00010D28                 end