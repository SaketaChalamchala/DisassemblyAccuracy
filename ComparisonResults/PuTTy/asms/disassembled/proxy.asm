.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 763905A14311F768706D9E9ACD72E189
.rdata:00000000 ; Input CRC32 : B079966C
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\proxy.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; `new_connection'::`2'::socket_fn_table
.rdata:00000000 ?socket_fn_table@?1??new_connection@@9@9 dd offset _sk_proxy_plug
.rdata:00000000                                         ; DATA XREF: _new_connection+ACo
.rdata:00000004                 dd offset _sk_proxy_close
.rdata:00000008                 dd offset _sk_proxy_write
.rdata:0000000C                 dd offset _sk_proxy_write_oob
.rdata:00000010                 dd offset _sk_proxy_write_eof
.rdata:00000014                 dd offset _sk_proxy_flush
.rdata:00000018                 dd offset _sk_proxy_set_frozen
.rdata:0000001C                 dd offset _sk_proxy_socket_error
.rdata:00000020 ; `new_connection'::`2'::plug_fn_table
.rdata:00000020 ?plug_fn_table@?1??new_connection@@9@9 dd offset _plug_proxy_log
.rdata:00000020                                         ; DATA XREF: _new_connection+1CFo
.rdata:00000024                 dd offset _plug_proxy_closing
.rdata:00000028                 dd offset _plug_proxy_receive
.rdata:0000002C                 dd offset _plug_proxy_sent
.rdata:00000030                 dd offset _plug_proxy_accepting
.rdata:00000030 _rdata          ends
.rdata:00000030
.data:00000034 ; ===========================================================================
.data:00000034
.data:00000034 ; Segment type: Pure data
.data:00000034 ; Segment permissions: Read/Write
.data:00000034 ; Segment alignment 'qword' can not be represented in assembly
.data:00000034 _data           segment para public 'DATA' use32
.data:00000034                 assume cs:_data
.data:00000034                 ;org 34h
.data:00000034 $SG85889        db 'Proxy error: Unknown proxy method',0
.data:00000034                                         ; DATA XREF: _new_connection+1AEo
.data:00000056                 align 4
.data:00000058 $SG85895        db 'Proxy error: Unable to resolve proxy host name',0
.data:00000058                                         ; DATA XREF: _new_connection+21Eo
.data:00000087                 align 4
.data:00000088 $SG85938        db 'CONNECT %s:%i HTTP/1.1',0Dh,0Ah
.data:00000088                                         ; DATA XREF: _proxy_http_negotiate+6Bo
.data:00000088                 db 'Host: %s:%i',0Dh,0Ah,0
.data:000000AE                 align 10h
.data:000000B0 $SG85946        db '%s:%s',0            ; DATA XREF: _proxy_http_negotiate+112o
.data:000000B6                 align 4
.data:000000B8 ; char _SG85949[]
.data:000000B8 $SG85949        db 'Proxy-Authorization: Basic ',0
.data:000000B8                                         ; DATA XREF: _proxy_http_negotiate+15Fo
.data:000000D4 ; char _SG85954[]
.data:000000D4 $SG85954        dd offset loc_A0D       ; DATA XREF: _proxy_http_negotiate:loc_1AA5o
.data:000000D8 $SG85955        dd offset loc_A0D       ; DATA XREF: _proxy_http_negotiate+290o
.data:000000DC ; wchar_t _SG85969
.data:000000DC $SG85969:                               ; DATA XREF: _proxy_http_negotiate+384o
.data:000000DC                 unicode 0, <..\..\..\proxy.c>,0
.data:000000FE                 align 10h
.data:00000100 ; wchar_t _SG85970
.data:00000100 $SG85970:                               ; DATA XREF: _proxy_http_negotiate+389o
.data:00000100                 unicode 0, <len >
.data:00000100                 dw 3Eh
.data:00000100                 unicode 0, < 0>,0
.data:00000110 ; char _SG85977[]
.data:00000110 $SG85977        db 'HTTP/%i.%i %n',0    ; DATA XREF: _proxy_http_negotiate+439o
.data:0000011E                 align 10h
.data:00000120 $SG85978        db 'Proxy error: HTTP response was absent',0
.data:00000120                                         ; DATA XREF: _proxy_http_negotiate+464o
.data:00000146                 align 4
.data:00000148 $SG85985        db 'Proxy error: %s',0  ; DATA XREF: _proxy_http_negotiate+542o
.data:00000158 ; wchar_t _SG85988
.data:00000158 $SG85988:                               ; DATA XREF: _proxy_http_negotiate+5F4o
.data:00000158                 unicode 0, <..\..\..\proxy.c>,0
.data:0000017A                 align 4
.data:0000017C ; wchar_t _SG85989
.data:0000017C $SG85989:                               ; DATA XREF: _proxy_http_negotiate+5F9o
.data:0000017C                 unicode 0, <len >
.data:0000017C                 dw 3Eh
.data:0000017C                 unicode 0, < 0>,0
.data:0000018C $SG85997        db 'Proxy error: unexpected proxy error',0
.data:0000018C                                         ; DATA XREF: _proxy_http_negotiate+740o
.data:000001B0 $SG86012        db 'Proxy error: SOCKS version 4 does not support IPv6',0
.data:000001B0                                         ; DATA XREF: _proxy_socks4_negotiate+4Fo
.data:000001E3                 align 4
.data:000001E4 ; wchar_t _SG86017
.data:000001E4 $SG86017:                               ; DATA XREF: _proxy_socks4_negotiate+92o
.data:000001E4                 unicode 0, <..\..\..\proxy.c>,0
.data:00000206                 align 4
.data:00000208 ; wchar_t _SG86018
.data:00000208 $SG86018:                               ; DATA XREF: _proxy_socks4_negotiate+97o
.data:00000208                 unicode 0, <type == ADDRTYPE_NAME>,0
.data:00000234 $SG86031        db 'Proxy error: SOCKS proxy responded with unexpected reply code ver'
.data:00000234                                         ; DATA XREF: _proxy_socks4_negotiate+2F1o
.data:00000234                 db 'sion',0
.data:0000027A                 align 4
.data:0000027C $SG86038        db 'Proxy error: SOCKS server wanted IDENTD on client',0
.data:0000027C                                         ; DATA XREF: _proxy_socks4_negotiate+357o
.data:000002AE                 align 10h
.data:000002B0 $SG86040        db 'Proxy error: Username and IDENTD on client don',27h,'t agree',0
.data:000002B0                                         ; DATA XREF: _proxy_socks4_negotiate+385o
.data:000002E7                 align 4
.data:000002E8 $SG86042        db 'Proxy error: Error while communicating with proxy',0
.data:000002E8                                         ; DATA XREF: _proxy_socks4_negotiate+3B3o
.data:0000031A                 align 4
.data:0000031C $SG86043        db 'Proxy error: unexpected proxy error',0
.data:0000031C                                         ; DATA XREF: _proxy_socks4_negotiate+40Ao
.data:00000340 $SG86065        db 'Proxy error: SOCKS proxy returned unexpected version',0
.data:00000340                                         ; DATA XREF: _proxy_socks5_negotiate+1D5o
.data:00000375                 align 4
.data:00000378 $SG86074        db 'Proxy error: SOCKS proxy did not accept our authentication',0
.data:00000378                                         ; DATA XREF: _proxy_socks5_negotiate+25Eo
.data:000003B3                 align 4
.data:000003B4 $SG86079        db 'Proxy error: SOCKS password subnegotiation contained wrong versio'
.data:000003B4                                         ; DATA XREF: _proxy_socks5_negotiate+2EEo
.data:000003B4                 db 'n number',0
.data:000003FE                 align 10h
.data:00000400 $SG86081        db 'Proxy error: SOCKS proxy refused password authentication',0
.data:00000400                                         ; DATA XREF: _proxy_socks5_negotiate+32Co
.data:00000439                 align 4
.data:0000043C ; wchar_t _SG86094
.data:0000043C $SG86094:                               ; DATA XREF: _proxy_socks5_negotiate+431o
.data:0000043C                 unicode 0, <..\..\..\proxy.c>,0
.data:0000045E                 align 10h
.data:00000460 ; wchar_t _SG86095
.data:00000460 $SG86095:                               ; DATA XREF: _proxy_socks5_negotiate+436o
.data:00000460                 unicode 0, <type == ADDRTYPE_NAME>,0
.data:0000048C $SG86103        db 'Proxy error: SOCKS proxy returned wrong version number',0
.data:0000048C                                         ; DATA XREF: _proxy_socks5_negotiate+572o
.data:000004C3                 align 4
.data:000004C4 ; char _SG86106[]
.data:000004C4 $SG86106        db 'Proxy error: ',0    ; DATA XREF: _proxy_socks5_negotiate+5AEo
.data:000004D2                 align 4
.data:000004D4 ; char _SG86112[]
.data:000004D4 $SG86112        db 'General SOCKS server failure',0
.data:000004D4                                         ; DATA XREF: _proxy_socks5_negotiate:$LN27o
.data:000004F1                 align 4
.data:000004F4 ; char _SG86114[]
.data:000004F4 $SG86114        db 'Connection not allowed by ruleset',0
.data:000004F4                                         ; DATA XREF: _proxy_socks5_negotiate:$LN26_0o
.data:00000516                 align 4
.data:00000518 ; char _SG86116[]
.data:00000518 $SG86116        db 'Network unreachable',0
.data:00000518                                         ; DATA XREF: _proxy_socks5_negotiate:$LN25_0o
.data:0000052C ; char _SG86118[]
.data:0000052C $SG86118        db 'Host unreachable',0 ; DATA XREF: _proxy_socks5_negotiate:$LN24_0o
.data:0000053D                 align 10h
.data:00000540 ; char _SG86120[]
.data:00000540 $SG86120        db 'Connection refused',0
.data:00000540                                         ; DATA XREF: _proxy_socks5_negotiate:$LN23_0o
.data:00000553                 align 4
.data:00000554 ; char _SG86122[]
.data:00000554 $SG86122        db 'TTL expired',0      ; DATA XREF: _proxy_socks5_negotiate:$LN22_0o
.data:00000560 ; char _SG86124[]
.data:00000560 $SG86124        db 'Command not supported',0
.data:00000560                                         ; DATA XREF: _proxy_socks5_negotiate:$LN21o
.data:00000576                 align 4
.data:00000578 ; char _SG86126[]
.data:00000578 $SG86126        db 'Address type not supported',0
.data:00000578                                         ; DATA XREF: _proxy_socks5_negotiate:$LN20o
.data:00000593                 align 4
.data:00000594 ; char _SG86128[]
.data:00000594 $SG86128        db 'Unrecognised SOCKS error code %d',0
.data:00000594                                         ; DATA XREF: _proxy_socks5_negotiate+6BCo
.data:000005B5                 align 4
.data:000005B8 $SG86138        db 'Proxy error: SOCKS proxy returned unrecognised address format',0
.data:000005B8                                         ; DATA XREF: _proxy_socks5_negotiate+78Bo
.data:000005F6                 align 4
.data:000005F8 $SG86141        db 'Proxy error: We don',27h,'t support GSSAPI authentication',0
.data:000005F8                                         ; DATA XREF: _proxy_socks5_negotiate+817o
.data:0000062C $SG86155        db 'Proxy error: Server chose username/password authentication but we'
.data:0000062C                                         ; DATA XREF: _proxy_socks5_negotiate+9CDo
.data:0000062C                 db ' didn',27h,'t offer it!',0
.data:0000067F                 align 10h
.data:00000680 $SG86159        db 'Proxy error: Unexpected proxy error',0
.data:00000680                                         ; DATA XREF: _proxy_socks5_negotiate+A2Co
.data:000006A4 ; char _SG86281[]
.data:000006A4 $SG86281        db 'host',0             ; DATA XREF: _format_telnet_command+540o
.data:000006A9                 align 4
.data:000006AC ; char _SG86293[]
.data:000006AC $SG86293        db 'port',0             ; DATA XREF: _format_telnet_command+5FCo
.data:000006B1                 align 4
.data:000006B4 ; char _SG86296[]
.data:000006B4 $SG86296        db '%i',0               ; DATA XREF: _format_telnet_command+61Co
.data:000006B7                 align 4
.data:000006B8 ; char _SG86306[]
.data:000006B8 $SG86306        db 'user',0             ; DATA XREF: _format_telnet_command+6ADo
.data:000006BD                 align 10h
.data:000006C0 ; char _SG86318[]
.data:000006C0 $SG86318        db 'pass',0             ; DATA XREF: _format_telnet_command+765o
.data:000006C5                 align 4
.data:000006C8 ; char _SG86330[]
.data:000006C8 $SG86330        db 'proxyhost',0        ; DATA XREF: _format_telnet_command+81Do
.data:000006D2                 align 4
.data:000006D4 ; char _SG86342[]
.data:000006D4 $SG86342        db 'proxyport',0        ; DATA XREF: _format_telnet_command+8D5o
.data:000006DE                 align 10h
.data:000006E0 ; char _SG86346[]
.data:000006E0 $SG86346        db '%d',0               ; DATA XREF: _format_telnet_command+90Co
.data:000006E3                 align 4
.data:000006E4 $SG86388        db 'Proxy error: Unexpected proxy error',0
.data:000006E4                                         ; DATA XREF: _proxy_telnet_negotiate+128o
.data:000006E4 _data           ends
.data:000006E4
.text:00000708 ; ===========================================================================
.text:00000708
.text:00000708 ; Segment type: Pure code
.text:00000708 ; Segment permissions: Read/Execute
.text:00000708 _text           segment para public 'CODE' use32
.text:00000708                 assume cs:_text
.text:00000708                 ;org 708h
.text:00000708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000708
.text:00000708 ; =============== S U B R O U T I N E =======================================
.text:00000708
.text:00000708 ; Attributes: bp-based frame
.text:00000708
.text:00000708                 public _proxy_activate
.text:00000708 _proxy_activate proc near               ; CODE XREF: _proxy_http_negotiate+703p
.text:00000708                                         ; _proxy_socks4_negotiate+3F2p ...
.text:00000708
.text:00000708 var_20          = dword ptr -20h
.text:00000708 var_1C          = dword ptr -1Ch
.text:00000708 var_18          = dword ptr -18h
.text:00000708 var_14          = dword ptr -14h
.text:00000708 var_10          = dword ptr -10h
.text:00000708 var_C           = dword ptr -0Ch
.text:00000708 var_8           = dword ptr -8
.text:00000708 var_4           = dword ptr -4
.text:00000708 arg_0           = dword ptr  8
.text:00000708
.text:00000708                 push    ebp
.text:00000709                 mov     ebp, esp
.text:0000070B                 sub     esp, 20h
.text:0000070E                 push    esi
.text:0000070F                 mov     eax, 0CCCCCCCCh
.text:00000714                 mov     [ebp+var_20], eax
.text:00000717                 mov     [ebp+var_1C], eax
.text:0000071A                 mov     [ebp+var_18], eax
.text:0000071D                 mov     [ebp+var_14], eax
.text:00000720                 mov     [ebp+var_10], eax
.text:00000723                 mov     [ebp+var_C], eax
.text:00000726                 mov     [ebp+var_8], eax
.text:00000729                 mov     [ebp+var_4], eax
.text:0000072C                 mov     eax, [ebp+arg_0]
.text:0000072F                 mov     dword ptr [eax+44h], 0
.text:00000736                 mov     esi, esp
.text:00000738                 push    1
.text:0000073A                 mov     ecx, [ebp+arg_0]
.text:0000073D                 mov     edx, [ecx+8]
.text:00000740                 push    edx
.text:00000741                 mov     eax, [ebp+arg_0]
.text:00000744                 mov     ecx, [eax+8]
.text:00000747                 mov     edx, [ecx]
.text:00000749                 mov     eax, [edx+18h]
.text:0000074C                 call    eax
.text:0000074E                 add     esp, 8
.text:00000751                 cmp     esi, esp
.text:00000753                 call    __RTC_CheckEsp
.text:00000758                 mov     ecx, [ebp+arg_0]
.text:0000075B                 add     ecx, 24h ; '$'
.text:0000075E                 push    ecx
.text:0000075F                 call    _bufchain_size
.text:00000764                 add     esp, 4
.text:00000767                 mov     esi, eax
.text:00000769                 mov     edx, [ebp+arg_0]
.text:0000076C                 add     edx, 18h
.text:0000076F                 push    edx
.text:00000770                 call    _bufchain_size
.text:00000775                 add     esp, 4
.text:00000778                 add     esi, eax
.text:0000077A                 mov     [ebp+var_1C], esi
.text:0000077D                 mov     [ebp+var_20], 0
.text:00000784
.text:00000784 loc_784:                                ; CODE XREF: _proxy_activate+E7j
.text:00000784                 mov     eax, [ebp+arg_0]
.text:00000787                 add     eax, 24h ; '$'
.text:0000078A                 push    eax
.text:0000078B                 call    _bufchain_size
.text:00000790                 add     esp, 4
.text:00000793                 test    eax, eax
.text:00000795                 jle     short loc_7F1
.text:00000797                 lea     ecx, [ebp+var_14]
.text:0000079A                 push    ecx
.text:0000079B                 lea     edx, [ebp+var_8]
.text:0000079E                 push    edx
.text:0000079F                 mov     eax, [ebp+arg_0]
.text:000007A2                 add     eax, 24h ; '$'
.text:000007A5                 push    eax
.text:000007A6                 call    _bufchain_prefix
.text:000007AB                 add     esp, 0Ch
.text:000007AE                 mov     esi, esp
.text:000007B0                 mov     ecx, [ebp+var_14]
.text:000007B3                 push    ecx
.text:000007B4                 mov     edx, [ebp+var_8]
.text:000007B7                 push    edx
.text:000007B8                 mov     eax, [ebp+arg_0]
.text:000007BB                 mov     ecx, [eax+8]
.text:000007BE                 push    ecx
.text:000007BF                 mov     edx, [ebp+arg_0]
.text:000007C2                 mov     eax, [edx+8]
.text:000007C5                 mov     ecx, [eax]
.text:000007C7                 mov     edx, [ecx+0Ch]
.text:000007CA                 call    edx
.text:000007CC                 add     esp, 0Ch
.text:000007CF                 cmp     esi, esp
.text:000007D1                 call    __RTC_CheckEsp
.text:000007D6                 add     eax, [ebp+var_20]
.text:000007D9                 mov     [ebp+var_20], eax
.text:000007DC                 mov     eax, [ebp+var_14]
.text:000007DF                 push    eax
.text:000007E0                 mov     ecx, [ebp+arg_0]
.text:000007E3                 add     ecx, 24h ; '$'
.text:000007E6                 push    ecx
.text:000007E7                 call    _bufchain_consume
.text:000007EC                 add     esp, 8
.text:000007EF                 jmp     short loc_784
.text:000007F1 ; ---------------------------------------------------------------------------
.text:000007F1
.text:000007F1 loc_7F1:                                ; CODE XREF: _proxy_activate+8Dj
.text:000007F1                                         ; _proxy_activate+154j
.text:000007F1                 mov     edx, [ebp+arg_0]
.text:000007F4                 add     edx, 18h
.text:000007F7                 push    edx
.text:000007F8                 call    _bufchain_size
.text:000007FD                 add     esp, 4
.text:00000800                 test    eax, eax
.text:00000802                 jle     short loc_85E
.text:00000804                 lea     eax, [ebp+var_14]
.text:00000807                 push    eax
.text:00000808                 lea     ecx, [ebp+var_8]
.text:0000080B                 push    ecx
.text:0000080C                 mov     edx, [ebp+arg_0]
.text:0000080F                 add     edx, 18h
.text:00000812                 push    edx
.text:00000813                 call    _bufchain_prefix
.text:00000818                 add     esp, 0Ch
.text:0000081B                 mov     esi, esp
.text:0000081D                 mov     eax, [ebp+var_14]
.text:00000820                 push    eax
.text:00000821                 mov     ecx, [ebp+var_8]
.text:00000824                 push    ecx
.text:00000825                 mov     edx, [ebp+arg_0]
.text:00000828                 mov     eax, [edx+8]
.text:0000082B                 push    eax
.text:0000082C                 mov     ecx, [ebp+arg_0]
.text:0000082F                 mov     edx, [ecx+8]
.text:00000832                 mov     eax, [edx]
.text:00000834                 mov     ecx, [eax+8]
.text:00000837                 call    ecx
.text:00000839                 add     esp, 0Ch
.text:0000083C                 cmp     esi, esp
.text:0000083E                 call    __RTC_CheckEsp
.text:00000843                 add     eax, [ebp+var_20]
.text:00000846                 mov     [ebp+var_20], eax
.text:00000849                 mov     edx, [ebp+var_14]
.text:0000084C                 push    edx
.text:0000084D                 mov     eax, [ebp+arg_0]
.text:00000850                 add     eax, 18h
.text:00000853                 push    eax
.text:00000854                 call    _bufchain_consume
.text:00000859                 add     esp, 8
.text:0000085C                 jmp     short loc_7F1
.text:0000085E ; ---------------------------------------------------------------------------
.text:0000085E
.text:0000085E loc_85E:                                ; CODE XREF: _proxy_activate+FAj
.text:0000085E                 mov     ecx, [ebp+var_20]
.text:00000861                 cmp     ecx, [ebp+var_1C]
.text:00000864                 jge     short loc_88A
.text:00000866                 mov     esi, esp
.text:00000868                 mov     edx, [ebp+var_20]
.text:0000086B                 push    edx
.text:0000086C                 mov     eax, [ebp+arg_0]
.text:0000086F                 mov     ecx, [eax+0Ch]
.text:00000872                 push    ecx
.text:00000873                 mov     edx, [ebp+arg_0]
.text:00000876                 mov     eax, [edx+0Ch]
.text:00000879                 mov     ecx, [eax]
.text:0000087B                 mov     edx, [ecx+0Ch]
.text:0000087E                 call    edx
.text:00000880                 add     esp, 8
.text:00000883                 cmp     esi, esp
.text:00000885                 call    __RTC_CheckEsp
.text:0000088A
.text:0000088A loc_88A:                                ; CODE XREF: _proxy_activate+15Cj
.text:0000088A                 mov     eax, [ebp+arg_0]
.text:0000088D                 cmp     dword ptr [eax+30h], 0
.text:00000891                 jz      short loc_8B3
.text:00000893                 mov     esi, esp
.text:00000895                 mov     ecx, [ebp+arg_0]
.text:00000898                 mov     edx, [ecx+8]
.text:0000089B                 push    edx
.text:0000089C                 mov     eax, [ebp+arg_0]
.text:0000089F                 mov     ecx, [eax+8]
.text:000008A2                 mov     edx, [ecx]
.text:000008A4                 mov     eax, [edx+14h]
.text:000008A7                 call    eax
.text:000008A9                 add     esp, 4
.text:000008AC                 cmp     esi, esp
.text:000008AE                 call    __RTC_CheckEsp
.text:000008B3
.text:000008B3 loc_8B3:                                ; CODE XREF: _proxy_activate+189j
.text:000008B3                 mov     ecx, [ebp+arg_0]
.text:000008B6                 cmp     dword ptr [ecx+40h], 0
.text:000008BA                 jz      short loc_8DC
.text:000008BC                 mov     esi, esp
.text:000008BE                 mov     edx, [ebp+arg_0]
.text:000008C1                 mov     eax, [edx+8]
.text:000008C4                 push    eax
.text:000008C5                 mov     ecx, [ebp+arg_0]
.text:000008C8                 mov     edx, [ecx+8]
.text:000008CB                 mov     eax, [edx]
.text:000008CD                 mov     ecx, [eax+10h]
.text:000008D0                 call    ecx
.text:000008D2                 add     esp, 4
.text:000008D5                 cmp     esi, esp
.text:000008D7                 call    __RTC_CheckEsp
.text:000008DC
.text:000008DC loc_8DC:                                ; CODE XREF: _proxy_activate+1B2j
.text:000008DC                 mov     edx, [ebp+arg_0]
.text:000008DF                 cmp     dword ptr [edx+48h], 0
.text:000008E3                 jnz     short loc_901
.text:000008E5                 mov     esi, esp
.text:000008E7                 push    0
.text:000008E9                 mov     eax, [ebp+arg_0]
.text:000008EC                 push    eax
.text:000008ED                 mov     ecx, [ebp+arg_0]
.text:000008F0                 mov     edx, [ecx]
.text:000008F2                 mov     eax, [edx+18h]
.text:000008F5                 call    eax
.text:000008F7                 add     esp, 8
.text:000008FA                 cmp     esi, esp
.text:000008FC                 call    __RTC_CheckEsp
.text:00000901
.text:00000901 loc_901:                                ; CODE XREF: _proxy_activate+1DBj
.text:00000901                 push    edx
.text:00000902                 mov     ecx, ebp
.text:00000904                 push    eax
.text:00000905                 lea     edx, $LN14
.text:0000090B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000910                 pop     eax
.text:00000911                 pop     edx
.text:00000912                 pop     esi
.text:00000913                 add     esp, 20h
.text:00000916                 cmp     ebp, esp
.text:00000918                 call    __RTC_CheckEsp
.text:0000091D                 mov     esp, ebp
.text:0000091F                 pop     ebp
.text:00000920                 retn
.text:00000920 _proxy_activate endp
.text:00000920
.text:00000920 ; ---------------------------------------------------------------------------
.text:00000921                 align 4
.text:00000924 $LN14           dd 2                    ; DATA XREF: _proxy_activate+1FDo
.text:00000928                 dd offset $LN13
.text:0000092C $LN13           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000928o
.text:00000934                 dd offset $LN11         ; "data"
.text:00000938                 dd 0FFFFFFECh, 4
.text:00000940                 dd offset $LN12
.text:00000944 $LN12           dd 6E656Ch              ; DATA XREF: .text:00000940o
.text:00000948 $LN11           db 'data',0             ; DATA XREF: .text:00000934o
.text:0000094D                 db 0Bh dup(0CCh)
.text:00000958
.text:00000958 ; =============== S U B R O U T I N E =======================================
.text:00000958
.text:00000958 ; Attributes: bp-based frame
.text:00000958
.text:00000958 _sk_proxy_plug  proc near               ; DATA XREF: .rdata:`new_connection'::`2'::socket_fn_tableo
.text:00000958
.text:00000958 var_8           = dword ptr -8
.text:00000958 var_4           = dword ptr -4
.text:00000958 arg_0           = dword ptr  8
.text:00000958 arg_4           = dword ptr  0Ch
.text:00000958
.text:00000958                 push    ebp
.text:00000959                 mov     ebp, esp
.text:0000095B                 sub     esp, 8
.text:0000095E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000965                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000096C                 mov     eax, [ebp+arg_0]
.text:0000096F                 mov     [ebp+var_4], eax
.text:00000972                 mov     ecx, [ebp+var_4]
.text:00000975                 mov     edx, [ecx+0Ch]
.text:00000978                 mov     [ebp+var_8], edx
.text:0000097B                 cmp     [ebp+arg_4], 0
.text:0000097F                 jz      short loc_98A
.text:00000981                 mov     eax, [ebp+var_4]
.text:00000984                 mov     ecx, [ebp+arg_4]
.text:00000987                 mov     [eax+0Ch], ecx
.text:0000098A
.text:0000098A loc_98A:                                ; CODE XREF: _sk_proxy_plug+27j
.text:0000098A                 mov     eax, [ebp+var_8]
.text:0000098D                 mov     esp, ebp
.text:0000098F                 pop     ebp
.text:00000990                 retn
.text:00000990 _sk_proxy_plug  endp
.text:00000990
.text:00000990 ; ---------------------------------------------------------------------------
.text:00000991                 align 8
.text:00000998
.text:00000998 ; =============== S U B R O U T I N E =======================================
.text:00000998
.text:00000998 ; Attributes: bp-based frame
.text:00000998
.text:00000998 _sk_proxy_close proc near               ; DATA XREF: .rdata:00000004o
.text:00000998
.text:00000998 var_4           = dword ptr -4
.text:00000998 arg_0           = dword ptr  8
.text:00000998
.text:00000998                 push    ebp
.text:00000999                 mov     ebp, esp
.text:0000099B                 push    ecx
.text:0000099C                 push    esi
.text:0000099D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A4                 mov     eax, [ebp+arg_0]
.text:000009A7                 mov     [ebp+var_4], eax
.text:000009AA                 mov     esi, esp
.text:000009AC                 mov     ecx, [ebp+var_4]
.text:000009AF                 mov     edx, [ecx+8]
.text:000009B2                 push    edx
.text:000009B3                 mov     eax, [ebp+var_4]
.text:000009B6                 mov     ecx, [eax+8]
.text:000009B9                 mov     edx, [ecx]
.text:000009BB                 mov     eax, [edx+4]
.text:000009BE                 call    eax
.text:000009C0                 add     esp, 4
.text:000009C3                 cmp     esi, esp
.text:000009C5                 call    __RTC_CheckEsp
.text:000009CA                 mov     ecx, [ebp+var_4]
.text:000009CD                 mov     edx, [ecx+10h]
.text:000009D0                 push    edx
.text:000009D1                 call    _sk_addr_free
.text:000009D6                 add     esp, 4
.text:000009D9                 mov     eax, [ebp+var_4]
.text:000009DC                 push    eax
.text:000009DD                 call    _safefree
.text:000009E2                 add     esp, 4
.text:000009E5                 pop     esi
.text:000009E6                 add     esp, 4
.text:000009E9                 cmp     ebp, esp
.text:000009EB                 call    __RTC_CheckEsp
.text:000009F0                 mov     esp, ebp
.text:000009F2                 pop     ebp
.text:000009F3                 retn
.text:000009F3 _sk_proxy_close endp
.text:000009F3
.text:000009F3 ; ---------------------------------------------------------------------------
.text:000009F4                 align 8
.text:000009F8
.text:000009F8 ; =============== S U B R O U T I N E =======================================
.text:000009F8
.text:000009F8 ; Attributes: bp-based frame
.text:000009F8
.text:000009F8 _sk_proxy_write proc near               ; DATA XREF: .rdata:00000008o
.text:000009F8
.text:000009F8 var_4           = dword ptr -4
.text:000009F8 arg_0           = dword ptr  8
.text:000009F8 arg_4           = dword ptr  0Ch
.text:000009F8 arg_8           = dword ptr  10h
.text:000009F8
.text:000009F8                 push    ebp
.text:000009F9                 mov     ebp, esp
.text:000009FB                 push    ecx
.text:000009FC                 push    esi
.text:000009FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A04                 mov     eax, [ebp+arg_0]
.text:00000A07                 mov     [ebp+var_4], eax
.text:00000A0A                 mov     ecx, [ebp+var_4]
.text:00000A0D
.text:00000A0D loc_A0D:                                ; DATA XREF: .data:$SG85954o
.text:00000A0D                                         ; .data:$SG85955o
.text:00000A0D                 cmp     dword ptr [ecx+44h], 0
.text:00000A11                 jz      short loc_A3B
.text:00000A13                 mov     edx, [ebp+arg_8]
.text:00000A16                 push    edx
.text:00000A17                 mov     eax, [ebp+arg_4]
.text:00000A1A                 push    eax
.text:00000A1B                 mov     ecx, [ebp+var_4]
.text:00000A1E                 add     ecx, 18h
.text:00000A21                 push    ecx
.text:00000A22                 call    _bufchain_add
.text:00000A27                 add     esp, 0Ch
.text:00000A2A                 mov     edx, [ebp+var_4]
.text:00000A2D                 add     edx, 18h
.text:00000A30                 push    edx
.text:00000A31                 call    _bufchain_size
.text:00000A36                 add     esp, 4
.text:00000A39                 jmp     short loc_A63
.text:00000A3B ; ---------------------------------------------------------------------------
.text:00000A3B
.text:00000A3B loc_A3B:                                ; CODE XREF: _sk_proxy_write+19j
.text:00000A3B                 mov     esi, esp
.text:00000A3D                 mov     eax, [ebp+arg_8]
.text:00000A40                 push    eax
.text:00000A41                 mov     ecx, [ebp+arg_4]
.text:00000A44                 push    ecx
.text:00000A45                 mov     edx, [ebp+var_4]
.text:00000A48                 mov     eax, [edx+8]
.text:00000A4B                 push    eax
.text:00000A4C                 mov     ecx, [ebp+var_4]
.text:00000A4F                 mov     edx, [ecx+8]
.text:00000A52                 mov     eax, [edx]
.text:00000A54                 mov     ecx, [eax+8]
.text:00000A57                 call    ecx
.text:00000A59                 add     esp, 0Ch
.text:00000A5C                 cmp     esi, esp
.text:00000A5E                 call    __RTC_CheckEsp
.text:00000A63
.text:00000A63 loc_A63:                                ; CODE XREF: _sk_proxy_write+41j
.text:00000A63                 pop     esi
.text:00000A64                 add     esp, 4
.text:00000A67                 cmp     ebp, esp
.text:00000A69                 call    __RTC_CheckEsp
.text:00000A6E                 mov     esp, ebp
.text:00000A70                 pop     ebp
.text:00000A71                 retn
.text:00000A71 _sk_proxy_write endp
.text:00000A71
.text:00000A71 ; ---------------------------------------------------------------------------
.text:00000A72                 align 8
.text:00000A78
.text:00000A78 ; =============== S U B R O U T I N E =======================================
.text:00000A78
.text:00000A78 ; Attributes: bp-based frame
.text:00000A78
.text:00000A78 _sk_proxy_write_oob proc near           ; DATA XREF: .rdata:0000000Co
.text:00000A78
.text:00000A78 var_4           = dword ptr -4
.text:00000A78 arg_0           = dword ptr  8
.text:00000A78 arg_4           = dword ptr  0Ch
.text:00000A78 arg_8           = dword ptr  10h
.text:00000A78
.text:00000A78                 push    ebp
.text:00000A79                 mov     ebp, esp
.text:00000A7B                 push    ecx
.text:00000A7C                 push    esi
.text:00000A7D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A84                 mov     eax, [ebp+arg_0]
.text:00000A87                 mov     [ebp+var_4], eax
.text:00000A8A                 mov     ecx, [ebp+var_4]
.text:00000A8D                 cmp     dword ptr [ecx+44h], 0
.text:00000A91                 jz      short loc_ACD
.text:00000A93                 mov     edx, [ebp+var_4]
.text:00000A96                 add     edx, 18h
.text:00000A99                 push    edx
.text:00000A9A                 call    _bufchain_clear
.text:00000A9F                 add     esp, 4
.text:00000AA2                 mov     eax, [ebp+var_4]
.text:00000AA5                 add     eax, 24h ; '$'
.text:00000AA8                 push    eax
.text:00000AA9                 call    _bufchain_clear
.text:00000AAE                 add     esp, 4
.text:00000AB1                 mov     ecx, [ebp+arg_8]
.text:00000AB4                 push    ecx
.text:00000AB5                 mov     edx, [ebp+arg_4]
.text:00000AB8                 push    edx
.text:00000AB9                 mov     eax, [ebp+var_4]
.text:00000ABC                 add     eax, 24h ; '$'
.text:00000ABF                 push    eax
.text:00000AC0                 call    _bufchain_add
.text:00000AC5                 add     esp, 0Ch
.text:00000AC8                 mov     eax, [ebp+arg_8]
.text:00000ACB                 jmp     short loc_AF5
.text:00000ACD ; ---------------------------------------------------------------------------
.text:00000ACD
.text:00000ACD loc_ACD:                                ; CODE XREF: _sk_proxy_write_oob+19j
.text:00000ACD                 mov     esi, esp
.text:00000ACF                 mov     ecx, [ebp+arg_8]
.text:00000AD2                 push    ecx
.text:00000AD3                 mov     edx, [ebp+arg_4]
.text:00000AD6                 push    edx
.text:00000AD7                 mov     eax, [ebp+var_4]
.text:00000ADA                 mov     ecx, [eax+8]
.text:00000ADD                 push    ecx
.text:00000ADE                 mov     edx, [ebp+var_4]
.text:00000AE1                 mov     eax, [edx+8]
.text:00000AE4                 mov     ecx, [eax]
.text:00000AE6                 mov     edx, [ecx+0Ch]
.text:00000AE9                 call    edx
.text:00000AEB                 add     esp, 0Ch
.text:00000AEE                 cmp     esi, esp
.text:00000AF0                 call    __RTC_CheckEsp
.text:00000AF5
.text:00000AF5 loc_AF5:                                ; CODE XREF: _sk_proxy_write_oob+53j
.text:00000AF5                 pop     esi
.text:00000AF6                 add     esp, 4
.text:00000AF9                 cmp     ebp, esp
.text:00000AFB                 call    __RTC_CheckEsp
.text:00000B00                 mov     esp, ebp
.text:00000B02                 pop     ebp
.text:00000B03                 retn
.text:00000B03 _sk_proxy_write_oob endp
.text:00000B03
.text:00000B03 ; ---------------------------------------------------------------------------
.text:00000B04                 align 8
.text:00000B08
.text:00000B08 ; =============== S U B R O U T I N E =======================================
.text:00000B08
.text:00000B08 ; Attributes: bp-based frame
.text:00000B08
.text:00000B08 _sk_proxy_write_eof proc near           ; DATA XREF: .rdata:00000010o
.text:00000B08
.text:00000B08 var_4           = dword ptr -4
.text:00000B08 arg_0           = dword ptr  8
.text:00000B08
.text:00000B08                 push    ebp
.text:00000B09                 mov     ebp, esp
.text:00000B0B                 push    ecx
.text:00000B0C                 push    esi
.text:00000B0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B14                 mov     eax, [ebp+arg_0]
.text:00000B17                 mov     [ebp+var_4], eax
.text:00000B1A                 mov     ecx, [ebp+var_4]
.text:00000B1D                 cmp     dword ptr [ecx+44h], 0
.text:00000B21                 jz      short loc_B2F
.text:00000B23                 mov     edx, [ebp+var_4]
.text:00000B26                 mov     dword ptr [edx+40h], 1
.text:00000B2D                 jmp     short loc_B4F
.text:00000B2F ; ---------------------------------------------------------------------------
.text:00000B2F
.text:00000B2F loc_B2F:                                ; CODE XREF: _sk_proxy_write_eof+19j
.text:00000B2F                 mov     esi, esp
.text:00000B31                 mov     eax, [ebp+var_4]
.text:00000B34                 mov     ecx, [eax+8]
.text:00000B37                 push    ecx
.text:00000B38                 mov     edx, [ebp+var_4]
.text:00000B3B                 mov     eax, [edx+8]
.text:00000B3E                 mov     ecx, [eax]
.text:00000B40                 mov     edx, [ecx+10h]
.text:00000B43                 call    edx
.text:00000B45                 add     esp, 4
.text:00000B48                 cmp     esi, esp
.text:00000B4A                 call    __RTC_CheckEsp
.text:00000B4F
.text:00000B4F loc_B4F:                                ; CODE XREF: _sk_proxy_write_eof+25j
.text:00000B4F                 pop     esi
.text:00000B50                 add     esp, 4
.text:00000B53                 cmp     ebp, esp
.text:00000B55                 call    __RTC_CheckEsp
.text:00000B5A                 mov     esp, ebp
.text:00000B5C                 pop     ebp
.text:00000B5D                 retn
.text:00000B5D _sk_proxy_write_eof endp
.text:00000B5D
.text:00000B5D ; ---------------------------------------------------------------------------
.text:00000B5E                 db 0Ah dup(0CCh)
.text:00000B68
.text:00000B68 ; =============== S U B R O U T I N E =======================================
.text:00000B68
.text:00000B68 ; Attributes: bp-based frame
.text:00000B68
.text:00000B68 _sk_proxy_flush proc near               ; DATA XREF: .rdata:00000014o
.text:00000B68
.text:00000B68 var_4           = dword ptr -4
.text:00000B68 arg_0           = dword ptr  8
.text:00000B68
.text:00000B68                 push    ebp
.text:00000B69                 mov     ebp, esp
.text:00000B6B                 push    ecx
.text:00000B6C                 push    esi
.text:00000B6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B74                 mov     eax, [ebp+arg_0]
.text:00000B77                 mov     [ebp+var_4], eax
.text:00000B7A                 mov     ecx, [ebp+var_4]
.text:00000B7D                 cmp     dword ptr [ecx+44h], 0
.text:00000B81                 jz      short loc_B8F
.text:00000B83                 mov     edx, [ebp+var_4]
.text:00000B86                 mov     dword ptr [edx+30h], 1
.text:00000B8D                 jmp     short loc_BAF
.text:00000B8F ; ---------------------------------------------------------------------------
.text:00000B8F
.text:00000B8F loc_B8F:                                ; CODE XREF: _sk_proxy_flush+19j
.text:00000B8F                 mov     esi, esp
.text:00000B91                 mov     eax, [ebp+var_4]
.text:00000B94                 mov     ecx, [eax+8]
.text:00000B97                 push    ecx
.text:00000B98                 mov     edx, [ebp+var_4]
.text:00000B9B                 mov     eax, [edx+8]
.text:00000B9E                 mov     ecx, [eax]
.text:00000BA0                 mov     edx, [ecx+14h]
.text:00000BA3                 call    edx
.text:00000BA5                 add     esp, 4
.text:00000BA8                 cmp     esi, esp
.text:00000BAA                 call    __RTC_CheckEsp
.text:00000BAF
.text:00000BAF loc_BAF:                                ; CODE XREF: _sk_proxy_flush+25j
.text:00000BAF                 pop     esi
.text:00000BB0                 add     esp, 4
.text:00000BB3                 cmp     ebp, esp
.text:00000BB5                 call    __RTC_CheckEsp
.text:00000BBA                 mov     esp, ebp
.text:00000BBC                 pop     ebp
.text:00000BBD                 retn
.text:00000BBD _sk_proxy_flush endp
.text:00000BBD
.text:00000BBD ; ---------------------------------------------------------------------------
.text:00000BBE                 db 0Ah dup(0CCh)
.text:00000BC8
.text:00000BC8 ; =============== S U B R O U T I N E =======================================
.text:00000BC8
.text:00000BC8 ; Attributes: bp-based frame
.text:00000BC8
.text:00000BC8 _sk_proxy_set_frozen proc near          ; DATA XREF: .rdata:00000018o
.text:00000BC8
.text:00000BC8 var_228         = byte ptr -228h
.text:00000BC8 Size            = dword ptr -224h
.text:00000BC8 Dst             = byte ptr -218h
.text:00000BC8 Src             = dword ptr -10h
.text:00000BC8 var_8           = dword ptr -8
.text:00000BC8 var_4           = dword ptr -4
.text:00000BC8 arg_0           = dword ptr  8
.text:00000BC8 arg_4           = dword ptr  0Ch
.text:00000BC8
.text:00000BC8                 push    ebp
.text:00000BC9                 mov     ebp, esp
.text:00000BCB                 sub     esp, 228h
.text:00000BD1                 push    esi
.text:00000BD2                 push    edi
.text:00000BD3                 lea     edi, [ebp+var_228]
.text:00000BD9                 mov     ecx, 8Ah ; 'è'
.text:00000BDE                 mov     eax, 0CCCCCCCCh
.text:00000BE3                 rep stosd
.text:00000BE5                 mov     eax, dword ptr ds:___security_cookie
.text:00000BEA                 xor     eax, ebp
.text:00000BEC                 mov     [ebp+var_4], eax
.text:00000BEF                 mov     eax, [ebp+arg_0]
.text:00000BF2                 mov     [ebp+var_8], eax
.text:00000BF5                 mov     ecx, [ebp+var_8]
.text:00000BF8                 cmp     dword ptr [ecx+44h], 0
.text:00000BFC                 jz      short loc_C0C
.text:00000BFE                 mov     edx, [ebp+var_8]
.text:00000C01                 mov     eax, [ebp+arg_4]
.text:00000C04                 mov     [edx+48h], eax
.text:00000C07                 jmp     loc_D14
.text:00000C0C ; ---------------------------------------------------------------------------
.text:00000C0C
.text:00000C0C loc_C0C:                                ; CODE XREF: _sk_proxy_set_frozen+34j
.text:00000C0C                 mov     ecx, [ebp+var_8]
.text:00000C0F                 add     ecx, 34h ; '4'
.text:00000C12                 push    ecx
.text:00000C13                 call    _bufchain_size
.text:00000C18                 add     esp, 4
.text:00000C1B                 test    eax, eax
.text:00000C1D                 jle     loc_CF0
.text:00000C23                 mov     edx, [ebp+var_8]
.text:00000C26                 mov     eax, [ebp+arg_4]
.text:00000C29                 mov     [edx+48h], eax
.text:00000C2C
.text:00000C2C loc_C2C:                                ; CODE XREF: _sk_proxy_set_frozen+118j
.text:00000C2C                 mov     ecx, [ebp+var_8]
.text:00000C2F                 cmp     dword ptr [ecx+48h], 0
.text:00000C33                 jnz     loc_CE5
.text:00000C39                 mov     edx, [ebp+var_8]
.text:00000C3C                 add     edx, 34h ; '4'
.text:00000C3F                 push    edx
.text:00000C40                 call    _bufchain_size
.text:00000C45                 add     esp, 4
.text:00000C48                 test    eax, eax
.text:00000C4A                 jle     loc_CE5
.text:00000C50                 lea     eax, [ebp+Size]
.text:00000C56                 push    eax
.text:00000C57                 lea     ecx, [ebp+Src]
.text:00000C5A                 push    ecx
.text:00000C5B                 mov     edx, [ebp+var_8]
.text:00000C5E                 add     edx, 34h ; '4'
.text:00000C61                 push    edx
.text:00000C62                 call    _bufchain_prefix
.text:00000C67                 add     esp, 0Ch
.text:00000C6A                 cmp     [ebp+Size], 200h
.text:00000C74                 jbe     short loc_C80
.text:00000C76                 mov     [ebp+Size], 200h
.text:00000C80
.text:00000C80 loc_C80:                                ; CODE XREF: _sk_proxy_set_frozen+ACj
.text:00000C80                 mov     eax, [ebp+Size]
.text:00000C86                 push    eax             ; Size
.text:00000C87                 mov     ecx, [ebp+Src]
.text:00000C8A                 push    ecx             ; Src
.text:00000C8B                 lea     edx, [ebp+Dst]
.text:00000C91                 push    edx             ; Dst
.text:00000C92                 call    _memcpy
.text:00000C97                 add     esp, 0Ch
.text:00000C9A                 mov     eax, [ebp+Size]
.text:00000CA0                 push    eax
.text:00000CA1                 mov     ecx, [ebp+var_8]
.text:00000CA4                 add     ecx, 34h ; '4'
.text:00000CA7                 push    ecx
.text:00000CA8                 call    _bufchain_consume
.text:00000CAD                 add     esp, 8
.text:00000CB0                 mov     esi, esp
.text:00000CB2                 mov     edx, [ebp+Size]
.text:00000CB8                 push    edx
.text:00000CB9                 lea     eax, [ebp+Dst]
.text:00000CBF                 push    eax
.text:00000CC0                 push    0
.text:00000CC2                 mov     ecx, [ebp+var_8]
.text:00000CC5                 mov     edx, [ecx+0Ch]
.text:00000CC8                 push    edx
.text:00000CC9                 mov     eax, [ebp+var_8]
.text:00000CCC                 mov     ecx, [eax+0Ch]
.text:00000CCF                 mov     edx, [ecx]
.text:00000CD1                 mov     eax, [edx+8]
.text:00000CD4                 call    eax
.text:00000CD6                 add     esp, 10h
.text:00000CD9                 cmp     esi, esp
.text:00000CDB                 call    __RTC_CheckEsp
.text:00000CE0                 jmp     loc_C2C
.text:00000CE5 ; ---------------------------------------------------------------------------
.text:00000CE5
.text:00000CE5 loc_CE5:                                ; CODE XREF: _sk_proxy_set_frozen+6Bj
.text:00000CE5                                         ; _sk_proxy_set_frozen+82j
.text:00000CE5                 mov     ecx, [ebp+var_8]
.text:00000CE8                 cmp     dword ptr [ecx+48h], 0
.text:00000CEC                 jz      short loc_CF0
.text:00000CEE                 jmp     short loc_D14
.text:00000CF0 ; ---------------------------------------------------------------------------
.text:00000CF0
.text:00000CF0 loc_CF0:                                ; CODE XREF: _sk_proxy_set_frozen+55j
.text:00000CF0                                         ; _sk_proxy_set_frozen+124j
.text:00000CF0                 mov     esi, esp
.text:00000CF2                 mov     edx, [ebp+arg_4]
.text:00000CF5                 push    edx
.text:00000CF6                 mov     eax, [ebp+var_8]
.text:00000CF9                 mov     ecx, [eax+8]
.text:00000CFC                 push    ecx
.text:00000CFD                 mov     edx, [ebp+var_8]
.text:00000D00                 mov     eax, [edx+8]
.text:00000D03                 mov     ecx, [eax]
.text:00000D05                 mov     edx, [ecx+18h]
.text:00000D08                 call    edx
.text:00000D0A                 add     esp, 8
.text:00000D0D                 cmp     esi, esp
.text:00000D0F                 call    __RTC_CheckEsp
.text:00000D14
.text:00000D14 loc_D14:                                ; CODE XREF: _sk_proxy_set_frozen+3Fj
.text:00000D14                                         ; _sk_proxy_set_frozen+126j
.text:00000D14                 push    edx
.text:00000D15                 mov     ecx, ebp
.text:00000D17                 push    eax
.text:00000D18                 lea     edx, $LN13_0
.text:00000D1E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D23                 pop     eax
.text:00000D24                 pop     edx
.text:00000D25                 pop     edi
.text:00000D26                 pop     esi
.text:00000D27                 mov     ecx, [ebp+var_4]
.text:00000D2A                 xor     ecx, ebp
.text:00000D2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000D31                 add     esp, 228h
.text:00000D37                 cmp     ebp, esp
.text:00000D39                 call    __RTC_CheckEsp
.text:00000D3E                 mov     esp, ebp
.text:00000D40                 pop     ebp
.text:00000D41                 retn
.text:00000D41 _sk_proxy_set_frozen endp
.text:00000D41
.text:00000D41 ; ---------------------------------------------------------------------------
.text:00000D42                 align 4
.text:00000D44 $LN13_0         dd 3                    ; DATA XREF: _sk_proxy_set_frozen+150o
.text:00000D48                 dd offset $LN12_0
.text:00000D4C $LN12_0         dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00000D48o
.text:00000D54                 dd offset $LN9          ; "data"
.text:00000D58                 dd 0FFFFFDE8h, 200h
.text:00000D60                 dd offset $LN10         ; "databuf"
.text:00000D64                 dd 0FFFFFDDCh, 4
.text:00000D6C                 dd offset $LN11_0
.text:00000D70 $LN11_0         dd 6E656Ch              ; DATA XREF: .text:00000D6Co
.text:00000D74 $LN10           db 'databuf',0          ; DATA XREF: .text:00000D60o
.text:00000D7C $LN9            db 'data',0             ; DATA XREF: .text:00000D54o
.text:00000D81                 align 8
.text:00000D88
.text:00000D88 ; =============== S U B R O U T I N E =======================================
.text:00000D88
.text:00000D88 ; Attributes: bp-based frame
.text:00000D88
.text:00000D88 _sk_proxy_socket_error proc near        ; DATA XREF: .rdata:0000001Co
.text:00000D88
.text:00000D88 var_4           = dword ptr -4
.text:00000D88 arg_0           = dword ptr  8
.text:00000D88
.text:00000D88                 push    ebp
.text:00000D89                 mov     ebp, esp
.text:00000D8B                 push    ecx
.text:00000D8C                 push    esi
.text:00000D8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D94                 mov     eax, [ebp+arg_0]
.text:00000D97                 mov     [ebp+var_4], eax
.text:00000D9A                 mov     ecx, [ebp+var_4]
.text:00000D9D                 cmp     dword ptr [ecx+4], 0
.text:00000DA1                 jnz     short loc_DAC
.text:00000DA3                 mov     edx, [ebp+var_4]
.text:00000DA6                 cmp     dword ptr [edx+8], 0
.text:00000DAA                 jnz     short loc_DB4
.text:00000DAC
.text:00000DAC loc_DAC:                                ; CODE XREF: _sk_proxy_socket_error+19j
.text:00000DAC                 mov     eax, [ebp+var_4]
.text:00000DAF                 mov     eax, [eax+4]
.text:00000DB2                 jmp     short loc_DD4
.text:00000DB4 ; ---------------------------------------------------------------------------
.text:00000DB4
.text:00000DB4 loc_DB4:                                ; CODE XREF: _sk_proxy_socket_error+22j
.text:00000DB4                 mov     esi, esp
.text:00000DB6                 mov     ecx, [ebp+var_4]
.text:00000DB9                 mov     edx, [ecx+8]
.text:00000DBC                 push    edx
.text:00000DBD                 mov     eax, [ebp+var_4]
.text:00000DC0                 mov     ecx, [eax+8]
.text:00000DC3                 mov     edx, [ecx]
.text:00000DC5                 mov     eax, [edx+1Ch]
.text:00000DC8                 call    eax
.text:00000DCA                 add     esp, 4
.text:00000DCD                 cmp     esi, esp
.text:00000DCF                 call    __RTC_CheckEsp
.text:00000DD4
.text:00000DD4 loc_DD4:                                ; CODE XREF: _sk_proxy_socket_error+2Aj
.text:00000DD4                 pop     esi
.text:00000DD5                 add     esp, 4
.text:00000DD8                 cmp     ebp, esp
.text:00000DDA                 call    __RTC_CheckEsp
.text:00000DDF                 mov     esp, ebp
.text:00000DE1                 pop     ebp
.text:00000DE2                 retn
.text:00000DE2 _sk_proxy_socket_error endp
.text:00000DE2
.text:00000DE2 ; ---------------------------------------------------------------------------
.text:00000DE3                 align 8
.text:00000DE8
.text:00000DE8 ; =============== S U B R O U T I N E =======================================
.text:00000DE8
.text:00000DE8 ; Attributes: bp-based frame
.text:00000DE8
.text:00000DE8 _plug_proxy_log proc near               ; DATA XREF: .rdata:`new_connection'::`2'::plug_fn_tableo
.text:00000DE8
.text:00000DE8 var_8           = dword ptr -8
.text:00000DE8 var_4           = dword ptr -4
.text:00000DE8 arg_0           = dword ptr  8
.text:00000DE8 arg_4           = dword ptr  0Ch
.text:00000DE8 arg_8           = dword ptr  10h
.text:00000DE8 arg_C           = dword ptr  14h
.text:00000DE8 arg_10          = dword ptr  18h
.text:00000DE8 arg_14          = dword ptr  1Ch
.text:00000DE8
.text:00000DE8                 push    ebp
.text:00000DE9                 mov     ebp, esp
.text:00000DEB                 sub     esp, 8
.text:00000DEE                 push    esi
.text:00000DEF                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DF6                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DFD                 mov     eax, [ebp+arg_0]
.text:00000E00                 mov     [ebp+var_4], eax
.text:00000E03                 mov     ecx, [ebp+var_4]
.text:00000E06                 mov     edx, [ecx+4]
.text:00000E09                 mov     [ebp+var_8], edx
.text:00000E0C                 mov     esi, esp
.text:00000E0E                 mov     eax, [ebp+arg_14]
.text:00000E11                 push    eax
.text:00000E12                 mov     ecx, [ebp+arg_10]
.text:00000E15                 push    ecx
.text:00000E16                 mov     edx, [ebp+arg_C]
.text:00000E19                 push    edx
.text:00000E1A                 mov     eax, [ebp+arg_8]
.text:00000E1D                 push    eax
.text:00000E1E                 mov     ecx, [ebp+arg_4]
.text:00000E21                 push    ecx
.text:00000E22                 mov     edx, [ebp+var_8]
.text:00000E25                 mov     eax, [edx+0Ch]
.text:00000E28                 push    eax
.text:00000E29                 mov     ecx, [ebp+var_8]
.text:00000E2C                 mov     edx, [ecx+0Ch]
.text:00000E2F                 mov     eax, [edx]
.text:00000E31                 mov     ecx, [eax]
.text:00000E33                 call    ecx
.text:00000E35                 add     esp, 18h
.text:00000E38                 cmp     esi, esp
.text:00000E3A                 call    __RTC_CheckEsp
.text:00000E3F                 pop     esi
.text:00000E40                 add     esp, 8
.text:00000E43                 cmp     ebp, esp
.text:00000E45                 call    __RTC_CheckEsp
.text:00000E4A                 mov     esp, ebp
.text:00000E4C                 pop     ebp
.text:00000E4D                 retn
.text:00000E4D _plug_proxy_log endp
.text:00000E4D
.text:00000E4D ; ---------------------------------------------------------------------------
.text:00000E4E                 db 0Ah dup(0CCh)
.text:00000E58
.text:00000E58 ; =============== S U B R O U T I N E =======================================
.text:00000E58
.text:00000E58 ; Attributes: bp-based frame
.text:00000E58
.text:00000E58 _plug_proxy_closing proc near           ; DATA XREF: .rdata:00000024o
.text:00000E58
.text:00000E58 var_8           = dword ptr -8
.text:00000E58 var_4           = dword ptr -4
.text:00000E58 arg_0           = dword ptr  8
.text:00000E58 arg_4           = dword ptr  0Ch
.text:00000E58 arg_8           = dword ptr  10h
.text:00000E58 arg_C           = dword ptr  14h
.text:00000E58
.text:00000E58                 push    ebp
.text:00000E59                 mov     ebp, esp
.text:00000E5B                 sub     esp, 8
.text:00000E5E                 push    esi
.text:00000E5F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E66                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E6D                 mov     eax, [ebp+arg_0]
.text:00000E70                 mov     [ebp+var_4], eax
.text:00000E73                 mov     ecx, [ebp+var_4]
.text:00000E76                 mov     edx, [ecx+4]
.text:00000E79                 mov     [ebp+var_8], edx
.text:00000E7C                 mov     eax, [ebp+var_8]
.text:00000E7F                 cmp     dword ptr [eax+44h], 0
.text:00000E83                 jz      short loc_EBC
.text:00000E85                 mov     ecx, [ebp+var_8]
.text:00000E88                 mov     edx, [ebp+arg_4]
.text:00000E8B                 mov     [ecx+50h], edx
.text:00000E8E                 mov     eax, [ebp+var_8]
.text:00000E91                 mov     ecx, [ebp+arg_8]
.text:00000E94                 mov     [eax+54h], ecx
.text:00000E97                 mov     edx, [ebp+var_8]
.text:00000E9A                 mov     eax, [ebp+arg_C]
.text:00000E9D                 mov     [edx+58h], eax
.text:00000EA0                 mov     esi, esp
.text:00000EA2                 push    0
.text:00000EA4                 mov     ecx, [ebp+var_8]
.text:00000EA7                 push    ecx
.text:00000EA8                 mov     edx, [ebp+var_8]
.text:00000EAB                 mov     eax, [edx+4Ch]
.text:00000EAE                 call    eax
.text:00000EB0                 add     esp, 8
.text:00000EB3                 cmp     esi, esp
.text:00000EB5                 call    __RTC_CheckEsp
.text:00000EBA                 jmp     short loc_EE8
.text:00000EBC ; ---------------------------------------------------------------------------
.text:00000EBC
.text:00000EBC loc_EBC:                                ; CODE XREF: _plug_proxy_closing+2Bj
.text:00000EBC                 mov     esi, esp
.text:00000EBE                 mov     ecx, [ebp+arg_C]
.text:00000EC1                 push    ecx
.text:00000EC2                 mov     edx, [ebp+arg_8]
.text:00000EC5                 push    edx
.text:00000EC6                 mov     eax, [ebp+arg_4]
.text:00000EC9                 push    eax
.text:00000ECA                 mov     ecx, [ebp+var_8]
.text:00000ECD                 mov     edx, [ecx+0Ch]
.text:00000ED0                 push    edx
.text:00000ED1                 mov     eax, [ebp+var_8]
.text:00000ED4                 mov     ecx, [eax+0Ch]
.text:00000ED7                 mov     edx, [ecx]
.text:00000ED9                 mov     eax, [edx+4]
.text:00000EDC                 call    eax
.text:00000EDE                 add     esp, 10h
.text:00000EE1                 cmp     esi, esp
.text:00000EE3                 call    __RTC_CheckEsp
.text:00000EE8
.text:00000EE8 loc_EE8:                                ; CODE XREF: _plug_proxy_closing+62j
.text:00000EE8                 pop     esi
.text:00000EE9                 add     esp, 8
.text:00000EEC                 cmp     ebp, esp
.text:00000EEE                 call    __RTC_CheckEsp
.text:00000EF3                 mov     esp, ebp
.text:00000EF5                 pop     ebp
.text:00000EF6                 retn
.text:00000EF6 _plug_proxy_closing endp
.text:00000EF6
.text:00000EF6 ; ---------------------------------------------------------------------------
.text:00000EF7                 align 4
.text:00000EF8
.text:00000EF8 ; =============== S U B R O U T I N E =======================================
.text:00000EF8
.text:00000EF8 ; Attributes: bp-based frame
.text:00000EF8
.text:00000EF8 _plug_proxy_receive proc near           ; DATA XREF: .rdata:00000028o
.text:00000EF8
.text:00000EF8 var_8           = dword ptr -8
.text:00000EF8 var_4           = dword ptr -4
.text:00000EF8 arg_0           = dword ptr  8
.text:00000EF8 arg_4           = dword ptr  0Ch
.text:00000EF8 arg_8           = dword ptr  10h
.text:00000EF8 arg_C           = dword ptr  14h
.text:00000EF8
.text:00000EF8                 push    ebp
.text:00000EF9                 mov     ebp, esp
.text:00000EFB                 sub     esp, 8
.text:00000EFE                 push    esi
.text:00000EFF                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F06                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F0D                 mov     eax, [ebp+arg_0]
.text:00000F10                 mov     [ebp+var_4], eax
.text:00000F13                 mov     ecx, [ebp+var_4]
.text:00000F16                 mov     edx, [ecx+4]
.text:00000F19                 mov     [ebp+var_8], edx
.text:00000F1C                 mov     eax, [ebp+var_8]
.text:00000F1F                 cmp     dword ptr [eax+44h], 0
.text:00000F23                 jz      short loc_F73
.text:00000F25                 mov     ecx, [ebp+arg_C]
.text:00000F28                 push    ecx
.text:00000F29                 mov     edx, [ebp+arg_8]
.text:00000F2C                 push    edx
.text:00000F2D                 mov     eax, [ebp+var_8]
.text:00000F30                 add     eax, 34h ; '4'
.text:00000F33                 push    eax
.text:00000F34                 call    _bufchain_add
.text:00000F39                 add     esp, 0Ch
.text:00000F3C                 mov     ecx, [ebp+var_8]
.text:00000F3F                 mov     edx, [ebp+arg_4]
.text:00000F42                 mov     [ecx+5Ch], edx
.text:00000F45                 mov     eax, [ebp+var_8]
.text:00000F48                 mov     ecx, [ebp+arg_8]
.text:00000F4B                 mov     [eax+60h], ecx
.text:00000F4E                 mov     edx, [ebp+var_8]
.text:00000F51                 mov     eax, [ebp+arg_C]
.text:00000F54                 mov     [edx+64h], eax
.text:00000F57                 mov     esi, esp
.text:00000F59                 push    2
.text:00000F5B                 mov     ecx, [ebp+var_8]
.text:00000F5E                 push    ecx
.text:00000F5F                 mov     edx, [ebp+var_8]
.text:00000F62                 mov     eax, [edx+4Ch]
.text:00000F65                 call    eax
.text:00000F67                 add     esp, 8
.text:00000F6A                 cmp     esi, esp
.text:00000F6C                 call    __RTC_CheckEsp
.text:00000F71                 jmp     short loc_F9F
.text:00000F73 ; ---------------------------------------------------------------------------
.text:00000F73
.text:00000F73 loc_F73:                                ; CODE XREF: _plug_proxy_receive+2Bj
.text:00000F73                 mov     esi, esp
.text:00000F75                 mov     ecx, [ebp+arg_C]
.text:00000F78                 push    ecx
.text:00000F79                 mov     edx, [ebp+arg_8]
.text:00000F7C                 push    edx
.text:00000F7D                 mov     eax, [ebp+arg_4]
.text:00000F80                 push    eax
.text:00000F81                 mov     ecx, [ebp+var_8]
.text:00000F84                 mov     edx, [ecx+0Ch]
.text:00000F87                 push    edx
.text:00000F88                 mov     eax, [ebp+var_8]
.text:00000F8B                 mov     ecx, [eax+0Ch]
.text:00000F8E                 mov     edx, [ecx]
.text:00000F90                 mov     eax, [edx+8]
.text:00000F93                 call    eax
.text:00000F95                 add     esp, 10h
.text:00000F98                 cmp     esi, esp
.text:00000F9A                 call    __RTC_CheckEsp
.text:00000F9F
.text:00000F9F loc_F9F:                                ; CODE XREF: _plug_proxy_receive+79j
.text:00000F9F                 pop     esi
.text:00000FA0                 add     esp, 8
.text:00000FA3                 cmp     ebp, esp
.text:00000FA5                 call    __RTC_CheckEsp
.text:00000FAA                 mov     esp, ebp
.text:00000FAC                 pop     ebp
.text:00000FAD                 retn
.text:00000FAD _plug_proxy_receive endp
.text:00000FAD
.text:00000FAD ; ---------------------------------------------------------------------------
.text:00000FAE                 db 0Ah dup(0CCh)
.text:00000FB8
.text:00000FB8 ; =============== S U B R O U T I N E =======================================
.text:00000FB8
.text:00000FB8 ; Attributes: bp-based frame
.text:00000FB8
.text:00000FB8 _plug_proxy_sent proc near              ; DATA XREF: .rdata:0000002Co
.text:00000FB8
.text:00000FB8 var_8           = dword ptr -8
.text:00000FB8 var_4           = dword ptr -4
.text:00000FB8 arg_0           = dword ptr  8
.text:00000FB8 arg_4           = dword ptr  0Ch
.text:00000FB8
.text:00000FB8                 push    ebp
.text:00000FB9                 mov     ebp, esp
.text:00000FBB                 sub     esp, 8
.text:00000FBE                 push    esi
.text:00000FBF                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000FC6                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FCD                 mov     eax, [ebp+arg_0]
.text:00000FD0                 mov     [ebp+var_4], eax
.text:00000FD3                 mov     ecx, [ebp+var_4]
.text:00000FD6                 mov     edx, [ecx+4]
.text:00000FD9                 mov     [ebp+var_8], edx
.text:00000FDC                 mov     eax, [ebp+var_8]
.text:00000FDF                 cmp     dword ptr [eax+44h], 0
.text:00000FE3                 jz      short loc_100A
.text:00000FE5                 mov     ecx, [ebp+var_8]
.text:00000FE8                 mov     edx, [ebp+arg_4]
.text:00000FEB                 mov     [ecx+68h], edx
.text:00000FEE                 mov     esi, esp
.text:00000FF0                 push    1
.text:00000FF2                 mov     eax, [ebp+var_8]
.text:00000FF5                 push    eax
.text:00000FF6                 mov     ecx, [ebp+var_8]
.text:00000FF9                 mov     edx, [ecx+4Ch]
.text:00000FFC                 call    edx
.text:00000FFE                 add     esp, 8
.text:00001001                 cmp     esi, esp
.text:00001003                 call    __RTC_CheckEsp
.text:00001008                 jmp     short loc_102E
.text:0000100A ; ---------------------------------------------------------------------------
.text:0000100A
.text:0000100A loc_100A:                               ; CODE XREF: _plug_proxy_sent+2Bj
.text:0000100A                 mov     esi, esp
.text:0000100C                 mov     eax, [ebp+arg_4]
.text:0000100F                 push    eax
.text:00001010                 mov     ecx, [ebp+var_8]
.text:00001013                 mov     edx, [ecx+0Ch]
.text:00001016                 push    edx
.text:00001017                 mov     eax, [ebp+var_8]
.text:0000101A                 mov     ecx, [eax+0Ch]
.text:0000101D                 mov     edx, [ecx]
.text:0000101F                 mov     eax, [edx+0Ch]
.text:00001022                 call    eax
.text:00001024                 add     esp, 8
.text:00001027                 cmp     esi, esp
.text:00001029                 call    __RTC_CheckEsp
.text:0000102E
.text:0000102E loc_102E:                               ; CODE XREF: _plug_proxy_sent+50j
.text:0000102E                 pop     esi
.text:0000102F                 add     esp, 8
.text:00001032                 cmp     ebp, esp
.text:00001034                 call    __RTC_CheckEsp
.text:00001039                 mov     esp, ebp
.text:0000103B                 pop     ebp
.text:0000103C                 retn
.text:0000103C _plug_proxy_sent endp
.text:0000103C
.text:0000103C ; ---------------------------------------------------------------------------
.text:0000103D                 db 0Bh dup(0CCh)
.text:00001048
.text:00001048 ; =============== S U B R O U T I N E =======================================
.text:00001048
.text:00001048 ; Attributes: bp-based frame
.text:00001048
.text:00001048 _plug_proxy_accepting proc near         ; DATA XREF: .rdata:00000030o
.text:00001048
.text:00001048 var_8           = dword ptr -8
.text:00001048 var_4           = dword ptr -4
.text:00001048 arg_0           = dword ptr  8
.text:00001048 arg_4           = dword ptr  0Ch
.text:00001048 arg_8           = dword ptr  10h
.text:00001048
.text:00001048                 push    ebp
.text:00001049                 mov     ebp, esp
.text:0000104B                 sub     esp, 8
.text:0000104E                 push    esi
.text:0000104F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001056                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000105D                 mov     eax, [ebp+arg_0]
.text:00001060                 mov     [ebp+var_4], eax
.text:00001063                 mov     ecx, [ebp+var_4]
.text:00001066                 mov     edx, [ecx+4]
.text:00001069                 mov     [ebp+var_8], edx
.text:0000106C                 mov     eax, [ebp+var_8]
.text:0000106F                 cmp     dword ptr [eax+44h], 0
.text:00001073                 jz      short loc_10A3
.text:00001075                 mov     ecx, [ebp+var_8]
.text:00001078                 mov     edx, [ebp+arg_4]
.text:0000107B                 mov     [ecx+6Ch], edx
.text:0000107E                 mov     eax, [ebp+var_8]
.text:00001081                 mov     ecx, [ebp+arg_8]
.text:00001084                 mov     [eax+70h], ecx
.text:00001087                 mov     esi, esp
.text:00001089                 push    3
.text:0000108B                 mov     edx, [ebp+var_8]
.text:0000108E                 push    edx
.text:0000108F                 mov     eax, [ebp+var_8]
.text:00001092                 mov     ecx, [eax+4Ch]
.text:00001095                 call    ecx
.text:00001097                 add     esp, 8
.text:0000109A                 cmp     esi, esp
.text:0000109C                 call    __RTC_CheckEsp
.text:000010A1                 jmp     short loc_10CB
.text:000010A3 ; ---------------------------------------------------------------------------
.text:000010A3
.text:000010A3 loc_10A3:                               ; CODE XREF: _plug_proxy_accepting+2Bj
.text:000010A3                 mov     esi, esp
.text:000010A5                 mov     edx, [ebp+arg_8]
.text:000010A8                 push    edx
.text:000010A9                 mov     eax, [ebp+arg_4]
.text:000010AC                 push    eax
.text:000010AD                 mov     ecx, [ebp+var_8]
.text:000010B0                 mov     edx, [ecx+0Ch]
.text:000010B3                 push    edx
.text:000010B4                 mov     eax, [ebp+var_8]
.text:000010B7                 mov     ecx, [eax+0Ch]
.text:000010BA                 mov     edx, [ecx]
.text:000010BC                 mov     eax, [edx+10h]
.text:000010BF                 call    eax
.text:000010C1                 add     esp, 0Ch
.text:000010C4                 cmp     esi, esp
.text:000010C6                 call    __RTC_CheckEsp
.text:000010CB
.text:000010CB loc_10CB:                               ; CODE XREF: _plug_proxy_accepting+59j
.text:000010CB                 pop     esi
.text:000010CC                 add     esp, 8
.text:000010CF                 cmp     ebp, esp
.text:000010D1                 call    __RTC_CheckEsp
.text:000010D6                 mov     esp, ebp
.text:000010D8                 pop     ebp
.text:000010D9                 retn
.text:000010D9 _plug_proxy_accepting endp
.text:000010D9
.text:000010D9 ; ---------------------------------------------------------------------------
.text:000010DA                 db 0Eh dup(0CCh)
.text:000010E8
.text:000010E8 ; =============== S U B R O U T I N E =======================================
.text:000010E8
.text:000010E8 ; Attributes: bp-based frame
.text:000010E8
.text:000010E8 ; int __cdecl proxy_for_destination(int, char *Str1, int, int)
.text:000010E8                 public _proxy_for_destination
.text:000010E8 _proxy_for_destination proc near        ; CODE XREF: _name_lookup+5Bp
.text:000010E8                                         ; _new_connection+4Ap
.text:000010E8
.text:000010E8 var_60          = dword ptr -60h
.text:000010E8 var_5C          = dword ptr -5Ch
.text:000010E8 var_58          = dword ptr -58h
.text:000010E8 Str             = byte ptr -50h
.text:000010E8 var_C           = dword ptr -0Ch
.text:000010E8 var_8           = dword ptr -8
.text:000010E8 var_4           = dword ptr -4
.text:000010E8 arg_0           = dword ptr  8
.text:000010E8 Str1            = dword ptr  0Ch
.text:000010E8 arg_C           = dword ptr  14h
.text:000010E8
.text:000010E8                 push    ebp
.text:000010E9                 mov     ebp, esp
.text:000010EB                 sub     esp, 60h
.text:000010EE                 push    edi
.text:000010EF                 lea     edi, [ebp+var_60]
.text:000010F2                 mov     ecx, 18h
.text:000010F7                 mov     eax, 0CCCCCCCCh
.text:000010FC                 rep stosd
.text:000010FE                 mov     eax, dword ptr ds:___security_cookie
.text:00001103                 xor     eax, ebp
.text:00001105                 mov     [ebp+var_4], eax
.text:00001108                 mov     [ebp+var_8], 0
.text:0000110F                 mov     [ebp+var_C], 0
.text:00001116                 cmp     [ebp+arg_0], 0
.text:0000111A                 jz      short loc_1133
.text:0000111C                 mov     eax, [ebp+arg_0]
.text:0000111F                 push    eax
.text:00001120                 call    _sk_address_is_special_local
.text:00001125                 add     esp, 4
.text:00001128                 test    eax, eax
.text:0000112A                 jz      short loc_1133
.text:0000112C                 xor     eax, eax
.text:0000112E                 jmp     loc_13FC
.text:00001133 ; ---------------------------------------------------------------------------
.text:00001133
.text:00001133 loc_1133:                               ; CODE XREF: _proxy_for_destination+32j
.text:00001133                                         ; _proxy_for_destination+42j
.text:00001133                 push    0Ch
.text:00001135                 mov     ecx, [ebp+arg_C]
.text:00001138                 push    ecx
.text:00001139                 call    _conf_get_int
.text:0000113E                 add     esp, 8
.text:00001141                 test    eax, eax
.text:00001143                 jnz     short loc_1172
.text:00001145                 mov     edx, [ebp+Str1]
.text:00001148                 push    edx
.text:00001149                 call    _sk_hostname_is_local
.text:0000114E                 add     esp, 4
.text:00001151                 test    eax, eax
.text:00001153                 jnz     short loc_116B
.text:00001155                 cmp     [ebp+arg_0], 0
.text:00001159                 jz      short loc_1172
.text:0000115B                 mov     eax, [ebp+arg_0]
.text:0000115E                 push    eax
.text:0000115F                 call    _sk_address_is_local
.text:00001164                 add     esp, 4
.text:00001167                 test    eax, eax
.text:00001169                 jz      short loc_1172
.text:0000116B
.text:0000116B loc_116B:                               ; CODE XREF: _proxy_for_destination+6Bj
.text:0000116B                 xor     eax, eax
.text:0000116D                 jmp     loc_13FC
.text:00001172 ; ---------------------------------------------------------------------------
.text:00001172
.text:00001172 loc_1172:                               ; CODE XREF: _proxy_for_destination+5Bj
.text:00001172                                         ; _proxy_for_destination+71j ...
.text:00001172                 cmp     [ebp+arg_0], 0
.text:00001176                 jz      short loc_119B
.text:00001178                 push    40h ; '@'
.text:0000117A                 lea     ecx, [ebp+Str]
.text:0000117D                 push    ecx
.text:0000117E                 mov     edx, [ebp+arg_0]
.text:00001181                 push    edx
.text:00001182                 call    _sk_getaddr
.text:00001187                 add     esp, 0Ch
.text:0000118A                 lea     eax, [ebp+Str]
.text:0000118D                 push    eax             ; Str
.text:0000118E                 call    _strlen
.text:00001193                 add     esp, 4
.text:00001196                 mov     [ebp+var_58], eax
.text:00001199                 jmp     short loc_11A2
.text:0000119B ; ---------------------------------------------------------------------------
.text:0000119B
.text:0000119B loc_119B:                               ; CODE XREF: _proxy_for_destination+8Ej
.text:0000119B                 mov     [ebp+var_58], 0
.text:000011A2
.text:000011A2 loc_11A2:                               ; CODE XREF: _proxy_for_destination+B1j
.text:000011A2                 mov     ecx, [ebp+Str1]
.text:000011A5                 push    ecx             ; Str
.text:000011A6                 call    _strlen
.text:000011AB                 add     esp, 4
.text:000011AE                 mov     [ebp+var_5C], eax
.text:000011B1                 push    0Ah
.text:000011B3                 mov     edx, [ebp+arg_C]
.text:000011B6                 push    edx
.text:000011B7                 call    _conf_get_str
.text:000011BC                 add     esp, 8
.text:000011BF                 mov     [ebp+var_60], eax
.text:000011C2
.text:000011C2 loc_11C2:                               ; CODE XREF: _proxy_for_destination:loc_13F2j
.text:000011C2                 mov     eax, [ebp+var_60]
.text:000011C5                 add     eax, [ebp+var_8]
.text:000011C8                 movsx   ecx, byte ptr [eax]
.text:000011CB                 test    ecx, ecx
.text:000011CD                 jz      loc_13F7
.text:000011D3
.text:000011D3 loc_11D3:                               ; CODE XREF: _proxy_for_destination+125j
.text:000011D3                 mov     edx, [ebp+var_60]
.text:000011D6                 add     edx, [ebp+var_8]
.text:000011D9                 movsx   eax, byte ptr [edx]
.text:000011DC                 test    eax, eax
.text:000011DE                 jz      short loc_120F
.text:000011E0                 mov     ecx, [ebp+var_60]
.text:000011E3                 add     ecx, [ebp+var_8]
.text:000011E6                 movzx   edx, byte ptr [ecx]
.text:000011E9                 push    edx             ; C
.text:000011EA                 call    _isspace
.text:000011EF                 add     esp, 4
.text:000011F2                 test    eax, eax
.text:000011F4                 jnz     short loc_1204
.text:000011F6                 mov     eax, [ebp+var_60]
.text:000011F9                 add     eax, [ebp+var_8]
.text:000011FC                 movsx   ecx, byte ptr [eax]
.text:000011FF                 cmp     ecx, 2Ch ; ','
.text:00001202                 jnz     short loc_120F
.text:00001204
.text:00001204 loc_1204:                               ; CODE XREF: _proxy_for_destination+10Cj
.text:00001204                 mov     edx, [ebp+var_8]
.text:00001207                 add     edx, 1
.text:0000120A                 mov     [ebp+var_8], edx
.text:0000120D                 jmp     short loc_11D3
.text:0000120F ; ---------------------------------------------------------------------------
.text:0000120F
.text:0000120F loc_120F:                               ; CODE XREF: _proxy_for_destination+F6j
.text:0000120F                                         ; _proxy_for_destination+11Aj
.text:0000120F                 mov     eax, [ebp+var_60]
.text:00001212                 add     eax, [ebp+var_8]
.text:00001215                 movsx   ecx, byte ptr [eax]
.text:00001218                 test    ecx, ecx
.text:0000121A                 jnz     short loc_1221
.text:0000121C                 jmp     loc_13F7
.text:00001221 ; ---------------------------------------------------------------------------
.text:00001221
.text:00001221 loc_1221:                               ; CODE XREF: _proxy_for_destination+132j
.text:00001221                 mov     edx, [ebp+var_8]
.text:00001224                 mov     [ebp+var_C], edx
.text:00001227
.text:00001227 loc_1227:                               ; CODE XREF: _proxy_for_destination+195j
.text:00001227                 mov     eax, [ebp+var_60]
.text:0000122A                 add     eax, [ebp+var_C]
.text:0000122D                 movsx   ecx, byte ptr [eax]
.text:00001230                 test    ecx, ecx
.text:00001232                 jz      short loc_127F
.text:00001234                 mov     edx, [ebp+var_60]
.text:00001237                 add     edx, [ebp+var_C]
.text:0000123A                 movzx   eax, byte ptr [edx]
.text:0000123D                 push    eax             ; C
.text:0000123E                 call    _isalnum
.text:00001243                 add     esp, 4
.text:00001246                 test    eax, eax
.text:00001248                 jnz     short loc_1274
.text:0000124A                 mov     ecx, [ebp+var_60]
.text:0000124D                 add     ecx, [ebp+var_C]
.text:00001250                 movsx   edx, byte ptr [ecx]
.text:00001253                 cmp     edx, 2Dh ; '-'
.text:00001256                 jz      short loc_1274
.text:00001258                 mov     eax, [ebp+var_60]
.text:0000125B                 add     eax, [ebp+var_C]
.text:0000125E                 movsx   ecx, byte ptr [eax]
.text:00001261                 cmp     ecx, 2Eh ; '.'
.text:00001264                 jz      short loc_1274
.text:00001266                 mov     edx, [ebp+var_60]
.text:00001269                 add     edx, [ebp+var_C]
.text:0000126C                 movsx   eax, byte ptr [edx]
.text:0000126F                 cmp     eax, 2Ah ; '*'
.text:00001272                 jnz     short loc_127F
.text:00001274
.text:00001274 loc_1274:                               ; CODE XREF: _proxy_for_destination+160j
.text:00001274                                         ; _proxy_for_destination+16Ej ...
.text:00001274                 mov     ecx, [ebp+var_C]
.text:00001277                 add     ecx, 1
.text:0000127A                 mov     [ebp+var_C], ecx
.text:0000127D                 jmp     short loc_1227
.text:0000127F ; ---------------------------------------------------------------------------
.text:0000127F
.text:0000127F loc_127F:                               ; CODE XREF: _proxy_for_destination+14Aj
.text:0000127F                                         ; _proxy_for_destination+18Aj
.text:0000127F                 mov     edx, [ebp+var_60]
.text:00001282                 add     edx, [ebp+var_8]
.text:00001285                 movsx   eax, byte ptr [edx]
.text:00001288                 cmp     eax, 2Ah ; '*'
.text:0000128B                 jnz     short loc_1306
.text:0000128D                 cmp     [ebp+arg_0], 0
.text:00001291                 jz      short loc_12C7
.text:00001293                 mov     ecx, [ebp+var_C]
.text:00001296                 sub     ecx, [ebp+var_8]
.text:00001299                 sub     ecx, 1
.text:0000129C                 push    ecx             ; MaxCount
.text:0000129D                 mov     edx, [ebp+var_8]
.text:000012A0                 mov     eax, [ebp+var_60]
.text:000012A3                 lea     ecx, [eax+edx+1]
.text:000012A7                 push    ecx             ; Str
.text:000012A8                 mov     edx, [ebp+var_58]
.text:000012AB                 lea     eax, [ebp+edx+Str]
.text:000012AF                 mov     ecx, [ebp+var_C]
.text:000012B2                 sub     ecx, [ebp+var_8]
.text:000012B5                 sub     ecx, 1
.text:000012B8                 sub     eax, ecx
.text:000012BA                 push    eax             ; Str1
.text:000012BB                 call    _strnicmp
.text:000012C0                 add     esp, 0Ch
.text:000012C3                 test    eax, eax
.text:000012C5                 jz      short loc_12FA
.text:000012C7
.text:000012C7 loc_12C7:                               ; CODE XREF: _proxy_for_destination+1A9j
.text:000012C7                 mov     edx, [ebp+var_C]
.text:000012CA                 sub     edx, [ebp+var_8]
.text:000012CD                 sub     edx, 1
.text:000012D0                 push    edx             ; MaxCount
.text:000012D1                 mov     eax, [ebp+var_8]
.text:000012D4                 mov     ecx, [ebp+var_60]
.text:000012D7                 lea     edx, [ecx+eax+1]
.text:000012DB                 push    edx             ; Str
.text:000012DC                 mov     eax, [ebp+Str1]
.text:000012DF                 add     eax, [ebp+var_5C]
.text:000012E2                 mov     ecx, [ebp+var_C]
.text:000012E5                 sub     ecx, [ebp+var_8]
.text:000012E8                 sub     ecx, 1
.text:000012EB                 sub     eax, ecx
.text:000012ED                 push    eax             ; Str1
.text:000012EE                 call    _strnicmp
.text:000012F3                 add     esp, 0Ch
.text:000012F6                 test    eax, eax
.text:000012F8                 jnz     short loc_1301
.text:000012FA
.text:000012FA loc_12FA:                               ; CODE XREF: _proxy_for_destination+1DDj
.text:000012FA                 xor     eax, eax
.text:000012FC                 jmp     loc_13FC
.text:00001301 ; ---------------------------------------------------------------------------
.text:00001301
.text:00001301 loc_1301:                               ; CODE XREF: _proxy_for_destination+210j
.text:00001301                 jmp     loc_13B0
.text:00001306 ; ---------------------------------------------------------------------------
.text:00001306
.text:00001306 loc_1306:                               ; CODE XREF: _proxy_for_destination+1A3j
.text:00001306                 mov     edx, [ebp+var_60]
.text:00001309                 add     edx, [ebp+var_C]
.text:0000130C                 movsx   eax, byte ptr [edx-1]
.text:00001310                 cmp     eax, 2Ah ; '*'
.text:00001313                 jnz     short loc_1366
.text:00001315                 cmp     [ebp+arg_0], 0
.text:00001319                 jz      short loc_133C
.text:0000131B                 mov     ecx, [ebp+var_C]
.text:0000131E                 sub     ecx, [ebp+var_8]
.text:00001321                 sub     ecx, 1
.text:00001324                 push    ecx             ; MaxCount
.text:00001325                 mov     edx, [ebp+var_60]
.text:00001328                 add     edx, [ebp+var_8]
.text:0000132B                 push    edx             ; Str
.text:0000132C                 lea     eax, [ebp+Str]
.text:0000132F                 push    eax             ; Str1
.text:00001330                 call    _strnicmp
.text:00001335                 add     esp, 0Ch
.text:00001338                 test    eax, eax
.text:0000133A                 jz      short loc_135D
.text:0000133C
.text:0000133C loc_133C:                               ; CODE XREF: _proxy_for_destination+231j
.text:0000133C                 mov     ecx, [ebp+var_C]
.text:0000133F                 sub     ecx, [ebp+var_8]
.text:00001342                 sub     ecx, 1
.text:00001345                 push    ecx             ; MaxCount
.text:00001346                 mov     edx, [ebp+var_60]
.text:00001349                 add     edx, [ebp+var_8]
.text:0000134C                 push    edx             ; Str
.text:0000134D                 mov     eax, [ebp+Str1]
.text:00001350                 push    eax             ; Str1
.text:00001351                 call    _strnicmp
.text:00001356                 add     esp, 0Ch
.text:00001359                 test    eax, eax
.text:0000135B                 jnz     short loc_1364
.text:0000135D
.text:0000135D loc_135D:                               ; CODE XREF: _proxy_for_destination+252j
.text:0000135D                 xor     eax, eax
.text:0000135F                 jmp     loc_13FC
.text:00001364 ; ---------------------------------------------------------------------------
.text:00001364
.text:00001364 loc_1364:                               ; CODE XREF: _proxy_for_destination+273j
.text:00001364                 jmp     short loc_13B0
.text:00001366 ; ---------------------------------------------------------------------------
.text:00001366
.text:00001366 loc_1366:                               ; CODE XREF: _proxy_for_destination+22Bj
.text:00001366                 cmp     [ebp+arg_0], 0
.text:0000136A                 jz      short loc_138E
.text:0000136C                 mov     ecx, [ebp+var_C]
.text:0000136F                 sub     ecx, [ebp+var_8]
.text:00001372                 push    ecx             ; MaxCount
.text:00001373                 mov     edx, [ebp+var_60]
.text:00001376                 add     edx, [ebp+var_8]
.text:00001379                 push    edx             ; Str
.text:0000137A                 lea     eax, [ebp+Str]
.text:0000137D                 push    eax             ; Str1
.text:0000137E                 call    _strnicmp
.text:00001383                 add     esp, 0Ch
.text:00001386                 test    eax, eax
.text:00001388                 jnz     short loc_138E
.text:0000138A                 xor     eax, eax
.text:0000138C                 jmp     short loc_13FC
.text:0000138E ; ---------------------------------------------------------------------------
.text:0000138E
.text:0000138E loc_138E:                               ; CODE XREF: _proxy_for_destination+282j
.text:0000138E                                         ; _proxy_for_destination+2A0j
.text:0000138E                 mov     ecx, [ebp+var_C]
.text:00001391                 sub     ecx, [ebp+var_8]
.text:00001394                 push    ecx             ; MaxCount
.text:00001395                 mov     edx, [ebp+var_60]
.text:00001398                 add     edx, [ebp+var_8]
.text:0000139B                 push    edx             ; Str
.text:0000139C                 mov     eax, [ebp+Str1]
.text:0000139F                 push    eax             ; Str1
.text:000013A0                 call    _strnicmp
.text:000013A5                 add     esp, 0Ch
.text:000013A8                 test    eax, eax
.text:000013AA                 jnz     short loc_13B0
.text:000013AC                 xor     eax, eax
.text:000013AE                 jmp     short loc_13FC
.text:000013B0 ; ---------------------------------------------------------------------------
.text:000013B0
.text:000013B0 loc_13B0:                               ; CODE XREF: _proxy_for_destination:loc_1301j
.text:000013B0                                         ; _proxy_for_destination:loc_1364j ...
.text:000013B0                 mov     ecx, [ebp+var_C]
.text:000013B3                 mov     [ebp+var_8], ecx
.text:000013B6
.text:000013B6 loc_13B6:                               ; CODE XREF: _proxy_for_destination+308j
.text:000013B6                 mov     edx, [ebp+var_60]
.text:000013B9                 add     edx, [ebp+var_8]
.text:000013BC                 movsx   eax, byte ptr [edx]
.text:000013BF                 test    eax, eax
.text:000013C1                 jz      short loc_13F2
.text:000013C3                 mov     ecx, [ebp+var_60]
.text:000013C6                 add     ecx, [ebp+var_8]
.text:000013C9                 movzx   edx, byte ptr [ecx]
.text:000013CC                 push    edx             ; C
.text:000013CD                 call    _isspace
.text:000013D2                 add     esp, 4
.text:000013D5                 test    eax, eax
.text:000013D7                 jnz     short loc_13F2
.text:000013D9                 mov     eax, [ebp+var_60]
.text:000013DC                 add     eax, [ebp+var_8]
.text:000013DF                 movsx   ecx, byte ptr [eax]
.text:000013E2                 cmp     ecx, 2Ch ; ','
.text:000013E5                 jz      short loc_13F2
.text:000013E7                 mov     edx, [ebp+var_8]
.text:000013EA                 add     edx, 1
.text:000013ED                 mov     [ebp+var_8], edx
.text:000013F0                 jmp     short loc_13B6
.text:000013F2 ; ---------------------------------------------------------------------------
.text:000013F2
.text:000013F2 loc_13F2:                               ; CODE XREF: _proxy_for_destination+2D9j
.text:000013F2                                         ; _proxy_for_destination+2EFj ...
.text:000013F2                 jmp     loc_11C2
.text:000013F7 ; ---------------------------------------------------------------------------
.text:000013F7
.text:000013F7 loc_13F7:                               ; CODE XREF: _proxy_for_destination+E5j
.text:000013F7                                         ; _proxy_for_destination+134j
.text:000013F7                 mov     eax, 1
.text:000013FC
.text:000013FC loc_13FC:                               ; CODE XREF: _proxy_for_destination+46j
.text:000013FC                                         ; _proxy_for_destination+85j ...
.text:000013FC                 push    edx
.text:000013FD                 mov     ecx, ebp
.text:000013FF                 push    eax
.text:00001400                 lea     edx, $LN33
.text:00001406                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000140B                 pop     eax
.text:0000140C                 pop     edx
.text:0000140D                 pop     edi
.text:0000140E                 mov     ecx, [ebp+var_4]
.text:00001411                 xor     ecx, ebp
.text:00001413                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001418                 add     esp, 60h
.text:0000141B                 cmp     ebp, esp
.text:0000141D                 call    __RTC_CheckEsp
.text:00001422                 mov     esp, ebp
.text:00001424                 pop     ebp
.text:00001425                 retn
.text:00001425 _proxy_for_destination endp
.text:00001425
.text:00001425 ; ---------------------------------------------------------------------------
.text:00001426                 align 4
.text:00001428 $LN33           dd 1                    ; DATA XREF: _proxy_for_destination+318o
.text:0000142C                 dd offset $LN32
.text:00001430 $LN32           dd 0FFFFFFB0h, 40h      ; DATA XREF: .text:0000142Co
.text:00001438                 dd offset $LN31         ; "hostip"
.text:0000143C $LN31           db 'hostip',0           ; DATA XREF: .text:00001438o
.text:00001443                 align 8
.text:00001448
.text:00001448 ; =============== S U B R O U T I N E =======================================
.text:00001448
.text:00001448 ; Attributes: bp-based frame
.text:00001448
.text:00001448 ; int __cdecl name_lookup(char *Str1, int, int, int, int)
.text:00001448                 public _name_lookup
.text:00001448 _name_lookup    proc near
.text:00001448
.text:00001448 Str1            = dword ptr  8
.text:00001448 arg_4           = dword ptr  0Ch
.text:00001448 arg_8           = dword ptr  10h
.text:00001448 arg_C           = dword ptr  14h
.text:00001448 arg_10          = dword ptr  18h
.text:00001448
.text:00001448                 push    ebp
.text:00001449                 mov     ebp, esp
.text:0000144B                 push    0Dh
.text:0000144D                 mov     eax, [ebp+arg_C]
.text:00001450                 push    eax
.text:00001451                 call    _conf_get_int
.text:00001456                 add     esp, 8
.text:00001459                 test    eax, eax
.text:0000145B                 jz      short loc_14CE
.text:0000145D                 push    0Bh
.text:0000145F                 mov     ecx, [ebp+arg_C]
.text:00001462                 push    ecx
.text:00001463                 call    _conf_get_int
.text:00001468                 add     esp, 8
.text:0000146B                 test    eax, eax
.text:0000146D                 jz      short loc_1495
.text:0000146F                 push    0Bh
.text:00001471                 mov     edx, [ebp+arg_C]
.text:00001474                 push    edx
.text:00001475                 call    _conf_get_int
.text:0000147A                 add     esp, 8
.text:0000147D                 cmp     eax, 2
.text:00001480                 jnz     short loc_14CE
.text:00001482                 push    0Dh
.text:00001484                 mov     eax, [ebp+arg_C]
.text:00001487                 push    eax
.text:00001488                 call    _conf_get_int
.text:0000148D                 add     esp, 8
.text:00001490                 cmp     eax, 1
.text:00001493                 jz      short loc_14CE
.text:00001495
.text:00001495 loc_1495:                               ; CODE XREF: _name_lookup+25j
.text:00001495                 mov     ecx, [ebp+arg_C]
.text:00001498                 push    ecx             ; int
.text:00001499                 mov     edx, [ebp+arg_4]
.text:0000149C                 push    edx             ; int
.text:0000149D                 mov     eax, [ebp+Str1]
.text:000014A0                 push    eax             ; Str1
.text:000014A1                 push    0               ; int
.text:000014A3                 call    _proxy_for_destination
.text:000014A8                 add     esp, 10h
.text:000014AB                 test    eax, eax
.text:000014AD                 jz      short loc_14CE
.text:000014AF                 mov     ecx, [ebp+Str1]
.text:000014B2                 push    ecx
.text:000014B3                 call    _dupstr
.text:000014B8                 add     esp, 4
.text:000014BB                 mov     edx, [ebp+arg_8]
.text:000014BE                 mov     [edx], eax
.text:000014C0                 mov     eax, [ebp+Str1]
.text:000014C3                 push    eax
.text:000014C4                 call    _sk_nonamelookup
.text:000014C9                 add     esp, 4
.text:000014CC                 jmp     short loc_14E2
.text:000014CE ; ---------------------------------------------------------------------------
.text:000014CE
.text:000014CE loc_14CE:                               ; CODE XREF: _name_lookup+13j
.text:000014CE                                         ; _name_lookup+38j ...
.text:000014CE                 mov     ecx, [ebp+arg_10]
.text:000014D1                 push    ecx
.text:000014D2                 mov     edx, [ebp+arg_8]
.text:000014D5                 push    edx
.text:000014D6                 mov     eax, [ebp+Str1]
.text:000014D9                 push    eax
.text:000014DA                 call    _sk_namelookup
.text:000014DF                 add     esp, 0Ch
.text:000014E2
.text:000014E2 loc_14E2:                               ; CODE XREF: _name_lookup+84j
.text:000014E2                 cmp     ebp, esp
.text:000014E4                 call    __RTC_CheckEsp
.text:000014E9                 pop     ebp
.text:000014EA                 retn
.text:000014EA _name_lookup    endp
.text:000014EA
.text:000014EA ; ---------------------------------------------------------------------------
.text:000014EB                 db 0Dh dup(0CCh)
.text:000014F8
.text:000014F8 ; =============== S U B R O U T I N E =======================================
.text:000014F8
.text:000014F8 ; Attributes: bp-based frame
.text:000014F8
.text:000014F8 ; int __cdecl new_connection(int, char *Str1, int, int, int, int, int, int, int)
.text:000014F8                 public _new_connection
.text:000014F8 _new_connection proc near
.text:000014F8
.text:000014F8 var_20          = dword ptr -20h
.text:000014F8 var_1C          = dword ptr -1Ch
.text:000014F8 var_18          = dword ptr -18h
.text:000014F8 var_14          = dword ptr -14h
.text:000014F8 var_10          = dword ptr -10h
.text:000014F8 var_C           = dword ptr -0Ch
.text:000014F8 var_8           = dword ptr -8
.text:000014F8 var_4           = dword ptr -4
.text:000014F8 arg_0           = dword ptr  8
.text:000014F8 Str1            = dword ptr  0Ch
.text:000014F8 arg_8           = dword ptr  10h
.text:000014F8 arg_C           = dword ptr  14h
.text:000014F8 arg_10          = dword ptr  18h
.text:000014F8 arg_14          = dword ptr  1Ch
.text:000014F8 arg_18          = dword ptr  20h
.text:000014F8 arg_1C          = dword ptr  24h
.text:000014F8 arg_20          = dword ptr  28h
.text:000014F8
.text:000014F8                 push    ebp
.text:000014F9                 mov     ebp, esp
.text:000014FB                 sub     esp, 20h
.text:000014FE                 push    esi
.text:000014FF                 mov     eax, 0CCCCCCCCh
.text:00001504                 mov     [ebp+var_20], eax
.text:00001507                 mov     [ebp+var_1C], eax
.text:0000150A                 mov     [ebp+var_18], eax
.text:0000150D                 mov     [ebp+var_14], eax
.text:00001510                 mov     [ebp+var_10], eax
.text:00001513                 mov     [ebp+var_C], eax
.text:00001516                 mov     [ebp+var_8], eax
.text:00001519                 mov     [ebp+var_4], eax
.text:0000151C                 push    0Dh
.text:0000151E                 mov     eax, [ebp+arg_20]
.text:00001521                 push    eax
.text:00001522                 call    _conf_get_int
.text:00001527                 add     esp, 8
.text:0000152A                 test    eax, eax
.text:0000152C                 jz      loc_17E8
.text:00001532                 mov     ecx, [ebp+arg_20]
.text:00001535                 push    ecx             ; int
.text:00001536                 mov     edx, [ebp+arg_8]
.text:00001539                 push    edx             ; int
.text:0000153A                 mov     eax, [ebp+Str1]
.text:0000153D                 push    eax             ; Str1
.text:0000153E                 mov     ecx, [ebp+arg_0]
.text:00001541                 push    ecx             ; int
.text:00001542                 call    _proxy_for_destination
.text:00001547                 add     esp, 10h
.text:0000154A                 test    eax, eax
.text:0000154C                 jz      loc_17E8
.text:00001552                 mov     edx, [ebp+arg_20]
.text:00001555                 push    edx
.text:00001556                 mov     eax, [ebp+arg_1C]
.text:00001559                 push    eax
.text:0000155A                 mov     ecx, [ebp+arg_18]
.text:0000155D                 push    ecx
.text:0000155E                 mov     edx, [ebp+arg_14]
.text:00001561                 push    edx
.text:00001562                 mov     eax, [ebp+arg_10]
.text:00001565                 push    eax
.text:00001566                 mov     ecx, [ebp+arg_C]
.text:00001569                 push    ecx
.text:0000156A                 mov     edx, [ebp+arg_8]
.text:0000156D                 push    edx
.text:0000156E                 mov     eax, [ebp+Str1]
.text:00001571                 push    eax
.text:00001572                 mov     ecx, [ebp+arg_0]
.text:00001575                 push    ecx
.text:00001576                 call    _platform_new_connection
.text:0000157B                 add     esp, 24h
.text:0000157E                 mov     [ebp+var_1C], eax
.text:00001581                 cmp     [ebp+var_1C], 0
.text:00001585                 jz      short loc_158F
.text:00001587                 mov     eax, [ebp+var_1C]
.text:0000158A                 jmp     loc_180C
.text:0000158F ; ---------------------------------------------------------------------------
.text:0000158F
.text:0000158F loc_158F:                               ; CODE XREF: _new_connection+8Dj
.text:0000158F                 push    88h ; 'ê'
.text:00001594                 push    1
.text:00001596                 call    _safemalloc
.text:0000159B                 add     esp, 8
.text:0000159E                 mov     [ebp+var_4], eax
.text:000015A1                 mov     edx, [ebp+var_4]
.text:000015A4                 mov     dword ptr [edx], offset ?socket_fn_table@?1??new_connection@@9@9 ; `new_connection'::`2'::socket_fn_table
.text:000015AA                 mov     eax, [ebp+arg_20]
.text:000015AD                 push    eax
.text:000015AE                 call    _conf_copy
.text:000015B3                 add     esp, 4
.text:000015B6                 mov     ecx, [ebp+var_4]
.text:000015B9                 mov     [ecx+74h], eax
.text:000015BC                 mov     edx, [ebp+var_4]
.text:000015BF                 mov     eax, [ebp+arg_1C]
.text:000015C2                 mov     [edx+0Ch], eax
.text:000015C5                 mov     ecx, [ebp+var_4]
.text:000015C8                 mov     edx, [ebp+arg_0]
.text:000015CB                 mov     [ecx+10h], edx
.text:000015CE                 mov     eax, [ebp+var_4]
.text:000015D1                 mov     ecx, [ebp+arg_8]
.text:000015D4                 mov     [eax+14h], ecx
.text:000015D7                 mov     edx, [ebp+var_4]
.text:000015DA                 mov     dword ptr [edx+4], 0
.text:000015E1                 mov     eax, [ebp+var_4]
.text:000015E4                 mov     dword ptr [eax+30h], 0
.text:000015EB                 mov     ecx, [ebp+var_4]
.text:000015EE                 mov     dword ptr [ecx+40h], 0
.text:000015F5                 mov     edx, [ebp+var_4]
.text:000015F8                 mov     dword ptr [edx+48h], 0
.text:000015FF                 mov     eax, [ebp+var_4]
.text:00001602                 add     eax, 34h ; '4'
.text:00001605                 push    eax
.text:00001606                 call    _bufchain_init
.text:0000160B                 add     esp, 4
.text:0000160E                 mov     ecx, [ebp+var_4]
.text:00001611                 add     ecx, 18h
.text:00001614                 push    ecx
.text:00001615                 call    _bufchain_init
.text:0000161A                 add     esp, 4
.text:0000161D                 mov     edx, [ebp+var_4]
.text:00001620                 add     edx, 24h ; '$'
.text:00001623                 push    edx
.text:00001624                 call    _bufchain_init
.text:00001629                 add     esp, 4
.text:0000162C                 mov     eax, [ebp+var_4]
.text:0000162F                 mov     dword ptr [eax+8], 0
.text:00001636                 mov     ecx, [ebp+var_4]
.text:00001639                 mov     dword ptr [ecx+44h], 0FFFFFFFFh
.text:00001640                 mov     edx, [ebp+var_4]
.text:00001643                 mov     dword ptr [edx+4Ch], 0
.text:0000164A                 push    0Dh
.text:0000164C                 mov     eax, [ebp+arg_20]
.text:0000164F                 push    eax
.text:00001650                 call    _conf_get_int
.text:00001655                 add     esp, 8
.text:00001658                 mov     [ebp+var_20], eax
.text:0000165B                 cmp     [ebp+var_20], 3
.text:0000165F                 jnz     short loc_166D
.text:00001661                 mov     ecx, [ebp+var_4]
.text:00001664                 mov     dword ptr [ecx+4Ch], offset _proxy_http_negotiate
.text:0000166B                 jmp     short loc_16B5
.text:0000166D ; ---------------------------------------------------------------------------
.text:0000166D
.text:0000166D loc_166D:                               ; CODE XREF: _new_connection+167j
.text:0000166D                 cmp     [ebp+var_20], 1
.text:00001671                 jnz     short loc_167F
.text:00001673                 mov     edx, [ebp+var_4]
.text:00001676                 mov     dword ptr [edx+4Ch], offset _proxy_socks4_negotiate
.text:0000167D                 jmp     short loc_16B5
.text:0000167F ; ---------------------------------------------------------------------------
.text:0000167F
.text:0000167F loc_167F:                               ; CODE XREF: _new_connection+179j
.text:0000167F                 cmp     [ebp+var_20], 2
.text:00001683                 jnz     short loc_1691
.text:00001685                 mov     eax, [ebp+var_4]
.text:00001688                 mov     dword ptr [eax+4Ch], offset _proxy_socks5_negotiate
.text:0000168F                 jmp     short loc_16B5
.text:00001691 ; ---------------------------------------------------------------------------
.text:00001691
.text:00001691 loc_1691:                               ; CODE XREF: _new_connection+18Bj
.text:00001691                 cmp     [ebp+var_20], 4
.text:00001695                 jnz     short loc_16A3
.text:00001697                 mov     ecx, [ebp+var_4]
.text:0000169A                 mov     dword ptr [ecx+4Ch], offset _proxy_telnet_negotiate
.text:000016A1                 jmp     short loc_16B5
.text:000016A3 ; ---------------------------------------------------------------------------
.text:000016A3
.text:000016A3 loc_16A3:                               ; CODE XREF: _new_connection+19Dj
.text:000016A3                 mov     edx, [ebp+var_4]
.text:000016A6                 mov     dword ptr [edx+4], offset $SG85889 ; "Proxy error: Unknown proxy method"
.text:000016AD                 mov     eax, [ebp+var_4]
.text:000016B0                 jmp     loc_180C
.text:000016B5 ; ---------------------------------------------------------------------------
.text:000016B5
.text:000016B5 loc_16B5:                               ; CODE XREF: _new_connection+173j
.text:000016B5                                         ; _new_connection+185j ...
.text:000016B5                 push    8
.text:000016B7                 push    1
.text:000016B9                 call    _safemalloc
.text:000016BE                 add     esp, 8
.text:000016C1                 mov     [ebp+var_8], eax
.text:000016C4                 mov     eax, [ebp+var_8]
.text:000016C7                 mov     dword ptr [eax], offset ?plug_fn_table@?1??new_connection@@9@9 ; `new_connection'::`2'::plug_fn_table
.text:000016CD                 mov     ecx, [ebp+var_8]
.text:000016D0                 mov     edx, [ebp+var_4]
.text:000016D3                 mov     [ecx+4], edx
.text:000016D6                 push    3
.text:000016D8                 mov     eax, [ebp+arg_20]
.text:000016DB                 push    eax
.text:000016DC                 call    _conf_get_int
.text:000016E1                 add     esp, 8
.text:000016E4                 push    eax
.text:000016E5                 lea     ecx, [ebp+var_14]
.text:000016E8                 push    ecx
.text:000016E9                 push    0Eh
.text:000016EB                 mov     edx, [ebp+arg_20]
.text:000016EE                 push    edx
.text:000016EF                 call    _conf_get_str
.text:000016F4                 add     esp, 8
.text:000016F7                 push    eax
.text:000016F8                 call    _sk_namelookup
.text:000016FD                 add     esp, 0Ch
.text:00001700                 mov     [ebp+var_C], eax
.text:00001703                 mov     eax, [ebp+var_C]
.text:00001706                 push    eax
.text:00001707                 call    _sk_addr_error
.text:0000170C                 add     esp, 4
.text:0000170F                 test    eax, eax
.text:00001711                 jz      short loc_173D
.text:00001713                 mov     ecx, [ebp+var_4]
.text:00001716                 mov     dword ptr [ecx+4], offset $SG85895 ; "Proxy error: Unable to resolve proxy ho"...
.text:0000171D                 mov     edx, [ebp+var_8]
.text:00001720                 push    edx
.text:00001721                 call    _safefree
.text:00001726                 add     esp, 4
.text:00001729                 mov     eax, [ebp+var_C]
.text:0000172C                 push    eax
.text:0000172D                 call    _sk_addr_free
.text:00001732                 add     esp, 4
.text:00001735                 mov     eax, [ebp+var_4]
.text:00001738                 jmp     loc_180C
.text:0000173D ; ---------------------------------------------------------------------------
.text:0000173D
.text:0000173D loc_173D:                               ; CODE XREF: _new_connection+219j
.text:0000173D                 mov     ecx, [ebp+var_14]
.text:00001740                 push    ecx
.text:00001741                 call    _safefree
.text:00001746                 add     esp, 4
.text:00001749                 mov     edx, [ebp+var_8]
.text:0000174C                 push    edx
.text:0000174D                 mov     eax, [ebp+arg_18]
.text:00001750                 push    eax
.text:00001751                 mov     ecx, [ebp+arg_14]
.text:00001754                 push    ecx
.text:00001755                 mov     edx, [ebp+arg_10]
.text:00001758                 push    edx
.text:00001759                 mov     eax, [ebp+arg_C]
.text:0000175C                 push    eax
.text:0000175D                 push    0Fh
.text:0000175F                 mov     ecx, [ebp+arg_20]
.text:00001762                 push    ecx
.text:00001763                 call    _conf_get_int
.text:00001768                 add     esp, 8
.text:0000176B                 push    eax
.text:0000176C                 mov     edx, [ebp+var_C]
.text:0000176F                 push    edx
.text:00001770                 call    _sk_new
.text:00001775                 add     esp, 1Ch
.text:00001778                 mov     ecx, [ebp+var_4]
.text:0000177B                 mov     [ecx+8], eax
.text:0000177E                 mov     esi, esp
.text:00001780                 mov     edx, [ebp+var_4]
.text:00001783                 mov     eax, [edx+8]
.text:00001786                 push    eax
.text:00001787                 mov     ecx, [ebp+var_4]
.text:0000178A                 mov     edx, [ecx+8]
.text:0000178D                 mov     eax, [edx]
.text:0000178F                 mov     ecx, [eax+1Ch]
.text:00001792                 call    ecx
.text:00001794                 add     esp, 4
.text:00001797                 cmp     esi, esp
.text:00001799                 call    __RTC_CheckEsp
.text:0000179E                 test    eax, eax
.text:000017A0                 jz      short loc_17A7
.text:000017A2                 mov     eax, [ebp+var_4]
.text:000017A5                 jmp     short loc_180C
.text:000017A7 ; ---------------------------------------------------------------------------
.text:000017A7
.text:000017A7 loc_17A7:                               ; CODE XREF: _new_connection+2A8j
.text:000017A7                 mov     esi, esp
.text:000017A9                 push    0
.text:000017AB                 mov     edx, [ebp+var_4]
.text:000017AE                 mov     eax, [edx+8]
.text:000017B1                 push    eax
.text:000017B2                 mov     ecx, [ebp+var_4]
.text:000017B5                 mov     edx, [ecx+8]
.text:000017B8                 mov     eax, [edx]
.text:000017BA                 mov     ecx, [eax+18h]
.text:000017BD                 call    ecx
.text:000017BF                 add     esp, 8
.text:000017C2                 cmp     esi, esp
.text:000017C4                 call    __RTC_CheckEsp
.text:000017C9                 mov     esi, esp
.text:000017CB                 push    0FFFFFFFFh
.text:000017CD                 mov     edx, [ebp+var_4]
.text:000017D0                 push    edx
.text:000017D1                 mov     eax, [ebp+var_4]
.text:000017D4                 mov     ecx, [eax+4Ch]
.text:000017D7                 call    ecx
.text:000017D9                 add     esp, 8
.text:000017DC                 cmp     esi, esp
.text:000017DE                 call    __RTC_CheckEsp
.text:000017E3                 mov     eax, [ebp+var_4]
.text:000017E6                 jmp     short loc_180C
.text:000017E8 ; ---------------------------------------------------------------------------
.text:000017E8
.text:000017E8 loc_17E8:                               ; CODE XREF: _new_connection+34j
.text:000017E8                                         ; _new_connection+54j
.text:000017E8                 mov     edx, [ebp+arg_1C]
.text:000017EB                 push    edx
.text:000017EC                 mov     eax, [ebp+arg_18]
.text:000017EF                 push    eax
.text:000017F0                 mov     ecx, [ebp+arg_14]
.text:000017F3                 push    ecx
.text:000017F4                 mov     edx, [ebp+arg_10]
.text:000017F7                 push    edx
.text:000017F8                 mov     eax, [ebp+arg_C]
.text:000017FB                 push    eax
.text:000017FC                 mov     ecx, [ebp+arg_8]
.text:000017FF                 push    ecx
.text:00001800                 mov     edx, [ebp+arg_0]
.text:00001803                 push    edx
.text:00001804                 call    _sk_new
.text:00001809                 add     esp, 1Ch
.text:0000180C
.text:0000180C loc_180C:                               ; CODE XREF: _new_connection+92j
.text:0000180C                                         ; _new_connection+1B8j ...
.text:0000180C                 push    edx
.text:0000180D                 mov     ecx, ebp
.text:0000180F                 push    eax
.text:00001810                 lea     edx, $LN17
.text:00001816                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000181B                 pop     eax
.text:0000181C                 pop     edx
.text:0000181D                 pop     esi
.text:0000181E                 add     esp, 20h
.text:00001821                 cmp     ebp, esp
.text:00001823                 call    __RTC_CheckEsp
.text:00001828                 mov     esp, ebp
.text:0000182A                 pop     ebp
.text:0000182B                 retn
.text:0000182B _new_connection endp
.text:0000182B
.text:0000182B ; ---------------------------------------------------------------------------
.text:0000182C $LN17           dd 1                    ; DATA XREF: _new_connection+318o
.text:00001830                 dd offset $LN16
.text:00001834 $LN16           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00001830o
.text:0000183C                 dd offset $LN15         ; "proxy_canonical_name"
.text:00001840 $LN15           db 'proxy_canonical_name',0 ; DATA XREF: .text:0000183Co
.text:00001855                 align 4
.text:00001858
.text:00001858 ; =============== S U B R O U T I N E =======================================
.text:00001858
.text:00001858 ; Attributes: bp-based frame
.text:00001858
.text:00001858                 public _new_listener
.text:00001858 _new_listener   proc near
.text:00001858
.text:00001858 arg_0           = dword ptr  8
.text:00001858 arg_4           = dword ptr  0Ch
.text:00001858 arg_8           = dword ptr  10h
.text:00001858 arg_C           = dword ptr  14h
.text:00001858 arg_14          = dword ptr  1Ch
.text:00001858
.text:00001858                 push    ebp
.text:00001859                 mov     ebp, esp
.text:0000185B                 mov     eax, [ebp+arg_14]
.text:0000185E                 push    eax
.text:0000185F                 mov     ecx, [ebp+arg_C]
.text:00001862                 push    ecx
.text:00001863                 mov     edx, [ebp+arg_8]
.text:00001866                 push    edx
.text:00001867                 mov     eax, [ebp+arg_4]
.text:0000186A                 push    eax
.text:0000186B                 mov     ecx, [ebp+arg_0]
.text:0000186E                 push    ecx
.text:0000186F                 call    _sk_newlistener
.text:00001874                 add     esp, 14h
.text:00001877                 cmp     ebp, esp
.text:00001879                 call    __RTC_CheckEsp
.text:0000187E                 pop     ebp
.text:0000187F                 retn
.text:0000187F _new_listener   endp
.text:0000187F
.text:0000187F ; ---------------------------------------------------------------------------
.text:00001880                 db 8 dup(0CCh)
.text:00001888
.text:00001888 ; =============== S U B R O U T I N E =======================================
.text:00001888
.text:00001888 ; Attributes: bp-based frame
.text:00001888
.text:00001888                 public _proxy_http_negotiate
.text:00001888 _proxy_http_negotiate proc near         ; DATA XREF: _new_connection+16Co
.text:00001888
.text:00001888 var_268         = dword ptr -268h
.text:00001888 var_264         = dword ptr -264h
.text:00001888 var_25C         = dword ptr -25Ch
.text:00001888 var_250         = byte ptr -250h
.text:00001888 var_244         = byte ptr -244h
.text:00001888 var_23C         = dword ptr -23Ch
.text:00001888 var_238         = dword ptr -238h
.text:00001888 var_234         = dword ptr -234h
.text:00001888 Src             = dword ptr -230h
.text:00001888 var_22C         = dword ptr -22Ch
.text:00001888 var_228         = dword ptr -228h
.text:00001888 var_224         = dword ptr -224h
.text:00001888 Dest            = dword ptr -220h
.text:00001888 var_21C         = dword ptr -21Ch
.text:00001888 var_218         = dword ptr -218h
.text:00001888 var_214         = dword ptr -214h
.text:00001888 var_20C         = byte ptr -20Ch
.text:00001888 Str             = dword ptr -8
.text:00001888 var_4           = dword ptr -4
.text:00001888 arg_0           = dword ptr  8
.text:00001888 arg_4           = dword ptr  0Ch
.text:00001888
.text:00001888                 push    ebp
.text:00001889                 mov     ebp, esp
.text:0000188B                 sub     esp, 268h
.text:00001891                 push    esi
.text:00001892                 push    edi
.text:00001893                 lea     edi, [ebp+var_268]
.text:00001899                 mov     ecx, 9Ah ; 'Ü'
.text:0000189E                 mov     eax, 0CCCCCCCCh
.text:000018A3                 rep stosd
.text:000018A5                 mov     eax, dword ptr ds:___security_cookie
.text:000018AA                 xor     eax, ebp
.text:000018AC                 mov     [ebp+var_4], eax
.text:000018AF                 mov     eax, [ebp+arg_0]
.text:000018B2                 cmp     dword ptr [eax+44h], 0FFFFFFFFh
.text:000018B6                 jnz     loc_1B4C
.text:000018BC                 push    200h
.text:000018C1                 lea     ecx, [ebp+var_20C]
.text:000018C7                 push    ecx
.text:000018C8                 mov     edx, [ebp+arg_0]
.text:000018CB                 mov     eax, [edx+10h]
.text:000018CE                 push    eax
.text:000018CF                 call    _sk_getaddr
.text:000018D4                 add     esp, 0Ch
.text:000018D7                 mov     ecx, [ebp+arg_0]
.text:000018DA                 mov     edx, [ecx+14h]
.text:000018DD                 push    edx
.text:000018DE                 lea     eax, [ebp+var_20C]
.text:000018E4                 push    eax
.text:000018E5                 mov     ecx, [ebp+arg_0]
.text:000018E8                 mov     edx, [ecx+14h]
.text:000018EB                 push    edx
.text:000018EC                 lea     eax, [ebp+var_20C]
.text:000018F2                 push    eax
.text:000018F3                 push    offset $SG85938 ; "CONNECT %s:%i HTTP/1.1\r\nHost: %s:%i\r"...
.text:000018F8                 call    _dupprintf
.text:000018FD                 add     esp, 14h
.text:00001900                 mov     [ebp+Str], eax
.text:00001903                 mov     ecx, [ebp+Str]
.text:00001906                 push    ecx             ; Str
.text:00001907                 call    _strlen
.text:0000190C                 add     esp, 4
.text:0000190F                 mov     esi, esp
.text:00001911                 push    eax
.text:00001912                 mov     edx, [ebp+Str]
.text:00001915                 push    edx
.text:00001916                 mov     eax, [ebp+arg_0]
.text:00001919                 mov     ecx, [eax+8]
.text:0000191C                 push    ecx
.text:0000191D                 mov     edx, [ebp+arg_0]
.text:00001920                 mov     eax, [edx+8]
.text:00001923                 mov     ecx, [eax]
.text:00001925                 mov     edx, [ecx+8]
.text:00001928                 call    edx
.text:0000192A                 add     esp, 0Ch
.text:0000192D                 cmp     esi, esp
.text:0000192F                 call    __RTC_CheckEsp
.text:00001934                 mov     eax, [ebp+Str]
.text:00001937                 push    eax
.text:00001938                 call    _safefree
.text:0000193D                 add     esp, 4
.text:00001940                 push    10h
.text:00001942                 mov     ecx, [ebp+arg_0]
.text:00001945                 mov     edx, [ecx+74h]
.text:00001948                 push    edx
.text:00001949                 call    _conf_get_str
.text:0000194E                 add     esp, 8
.text:00001951                 mov     [ebp+var_214], eax
.text:00001957                 push    11h
.text:00001959                 mov     eax, [ebp+arg_0]
.text:0000195C                 mov     ecx, [eax+74h]
.text:0000195F                 push    ecx
.text:00001960                 call    _conf_get_str
.text:00001965                 add     esp, 8
.text:00001968                 mov     [ebp+var_218], eax
.text:0000196E                 mov     edx, [ebp+var_214]
.text:00001974                 movsx   eax, byte ptr [edx]
.text:00001977                 test    eax, eax
.text:00001979                 jnz     short loc_198C
.text:0000197B                 mov     ecx, [ebp+var_218]
.text:00001981                 movsx   edx, byte ptr [ecx]
.text:00001984                 test    edx, edx
.text:00001986                 jz      loc_1B14
.text:0000198C
.text:0000198C loc_198C:                               ; CODE XREF: _proxy_http_negotiate+F1j
.text:0000198C                 mov     eax, [ebp+var_218]
.text:00001992                 push    eax
.text:00001993                 mov     ecx, [ebp+var_214]
.text:00001999                 push    ecx
.text:0000199A                 push    offset $SG85946 ; "%s:%s"
.text:0000199F                 call    _dupprintf
.text:000019A4                 add     esp, 0Ch
.text:000019A7                 mov     [ebp+var_21C], eax
.text:000019AD                 mov     edx, [ebp+var_21C]
.text:000019B3                 push    edx             ; Str
.text:000019B4                 call    _strlen
.text:000019B9                 add     esp, 4
.text:000019BC                 mov     [ebp+var_22C], eax
.text:000019C2                 push    1
.text:000019C4                 mov     eax, [ebp+var_22C]
.text:000019CA                 shl     eax, 2
.text:000019CD                 cdq
.text:000019CE                 mov     ecx, 3
.text:000019D3                 idiv    ecx
.text:000019D5                 add     eax, 64h ; 'd'
.text:000019D8                 push    eax
.text:000019D9                 call    _safemalloc
.text:000019DE                 add     esp, 8
.text:000019E1                 mov     [ebp+Dest], eax
.text:000019E7                 push    offset $SG85949 ; "Proxy-Authorization: Basic "
.text:000019EC                 mov     edx, [ebp+Dest]
.text:000019F2                 push    edx             ; Dest
.text:000019F3                 call    _sprintf
.text:000019F8                 add     esp, 8
.text:000019FB                 mov     [ebp+var_224], 0
.text:00001A05                 mov     eax, [ebp+Dest]
.text:00001A0B                 push    eax             ; Str
.text:00001A0C                 call    _strlen
.text:00001A11                 add     esp, 4
.text:00001A14                 mov     [ebp+var_228], eax
.text:00001A1A                 jmp     short loc_1A3A
.text:00001A1C ; ---------------------------------------------------------------------------
.text:00001A1C
.text:00001A1C loc_1A1C:                               ; CODE XREF: _proxy_http_negotiate+218j
.text:00001A1C                 mov     ecx, [ebp+var_224]
.text:00001A22                 add     ecx, 3
.text:00001A25                 mov     [ebp+var_224], ecx
.text:00001A2B                 mov     edx, [ebp+var_228]
.text:00001A31                 add     edx, 4
.text:00001A34                 mov     [ebp+var_228], edx
.text:00001A3A
.text:00001A3A loc_1A3A:                               ; CODE XREF: _proxy_http_negotiate+192j
.text:00001A3A                 mov     eax, [ebp+var_224]
.text:00001A40                 cmp     eax, [ebp+var_22C]
.text:00001A46                 jge     short loc_1AA5
.text:00001A48                 mov     ecx, [ebp+var_22C]
.text:00001A4E                 sub     ecx, [ebp+var_224]
.text:00001A54                 cmp     ecx, 3
.text:00001A57                 jle     short loc_1A65
.text:00001A59                 mov     [ebp+var_268], 3
.text:00001A63                 jmp     short loc_1A77
.text:00001A65 ; ---------------------------------------------------------------------------
.text:00001A65
.text:00001A65 loc_1A65:                               ; CODE XREF: _proxy_http_negotiate+1CFj
.text:00001A65                 mov     edx, [ebp+var_22C]
.text:00001A6B                 sub     edx, [ebp+var_224]
.text:00001A71                 mov     [ebp+var_268], edx
.text:00001A77
.text:00001A77 loc_1A77:                               ; CODE XREF: _proxy_http_negotiate+1DBj
.text:00001A77                 mov     eax, [ebp+Dest]
.text:00001A7D                 add     eax, [ebp+var_228]
.text:00001A83                 push    eax
.text:00001A84                 mov     ecx, [ebp+var_268]
.text:00001A8A                 push    ecx
.text:00001A8B                 mov     edx, [ebp+var_21C]
.text:00001A91                 add     edx, [ebp+var_224]
.text:00001A97                 push    edx
.text:00001A98                 call    _base64_encode_atom
.text:00001A9D                 add     esp, 0Ch
.text:00001AA0                 jmp     loc_1A1C
.text:00001AA5 ; ---------------------------------------------------------------------------
.text:00001AA5
.text:00001AA5 loc_1AA5:                               ; CODE XREF: _proxy_http_negotiate+1BEj
.text:00001AA5                 push    offset $SG85954 ; Source
.text:00001AAA                 mov     eax, [ebp+Dest]
.text:00001AB0                 add     eax, [ebp+var_228]
.text:00001AB6                 push    eax             ; Dest
.text:00001AB7                 call    _strcpy
.text:00001ABC                 add     esp, 8
.text:00001ABF                 mov     ecx, [ebp+Dest]
.text:00001AC5                 push    ecx             ; Str
.text:00001AC6                 call    _strlen
.text:00001ACB                 add     esp, 4
.text:00001ACE                 mov     esi, esp
.text:00001AD0                 push    eax
.text:00001AD1                 mov     edx, [ebp+Dest]
.text:00001AD7                 push    edx
.text:00001AD8                 mov     eax, [ebp+arg_0]
.text:00001ADB                 mov     ecx, [eax+8]
.text:00001ADE                 push    ecx
.text:00001ADF                 mov     edx, [ebp+arg_0]
.text:00001AE2                 mov     eax, [edx+8]
.text:00001AE5                 mov     ecx, [eax]
.text:00001AE7                 mov     edx, [ecx+8]
.text:00001AEA                 call    edx
.text:00001AEC                 add     esp, 0Ch
.text:00001AEF                 cmp     esi, esp
.text:00001AF1                 call    __RTC_CheckEsp
.text:00001AF6                 mov     eax, [ebp+var_21C]
.text:00001AFC                 push    eax
.text:00001AFD                 call    _safefree
.text:00001B02                 add     esp, 4
.text:00001B05                 mov     ecx, [ebp+Dest]
.text:00001B0B                 push    ecx
.text:00001B0C                 call    _safefree
.text:00001B11                 add     esp, 4
.text:00001B14
.text:00001B14 loc_1B14:                               ; CODE XREF: _proxy_http_negotiate+FEj
.text:00001B14                 mov     esi, esp
.text:00001B16                 push    2
.text:00001B18                 push    offset $SG85955
.text:00001B1D                 mov     edx, [ebp+arg_0]
.text:00001B20                 mov     eax, [edx+8]
.text:00001B23                 push    eax
.text:00001B24                 mov     ecx, [ebp+arg_0]
.text:00001B27                 mov     edx, [ecx+8]
.text:00001B2A                 mov     eax, [edx]
.text:00001B2C                 mov     ecx, [eax+8]
.text:00001B2F                 call    ecx
.text:00001B31                 add     esp, 0Ch
.text:00001B34                 cmp     esi, esp
.text:00001B36                 call    __RTC_CheckEsp
.text:00001B3B                 mov     edx, [ebp+arg_0]
.text:00001B3E                 mov     dword ptr [edx+44h], 1
.text:00001B45                 xor     eax, eax
.text:00001B47                 jmp     loc_1FF0
.text:00001B4C ; ---------------------------------------------------------------------------
.text:00001B4C
.text:00001B4C loc_1B4C:                               ; CODE XREF: _proxy_http_negotiate+2Ej
.text:00001B4C                 cmp     [ebp+arg_4], 0
.text:00001B50                 jnz     short loc_1B8C
.text:00001B52                 mov     esi, esp
.text:00001B54                 mov     eax, [ebp+arg_0]
.text:00001B57                 mov     ecx, [eax+58h]
.text:00001B5A                 push    ecx
.text:00001B5B                 mov     edx, [ebp+arg_0]
.text:00001B5E                 mov     eax, [edx+54h]
.text:00001B61                 push    eax
.text:00001B62                 mov     ecx, [ebp+arg_0]
.text:00001B65                 mov     edx, [ecx+50h]
.text:00001B68                 push    edx
.text:00001B69                 mov     eax, [ebp+arg_0]
.text:00001B6C                 mov     ecx, [eax+0Ch]
.text:00001B6F                 push    ecx
.text:00001B70                 mov     edx, [ebp+arg_0]
.text:00001B73                 mov     eax, [edx+0Ch]
.text:00001B76                 mov     ecx, [eax]
.text:00001B78                 mov     edx, [ecx+4]
.text:00001B7B                 call    edx
.text:00001B7D                 add     esp, 10h
.text:00001B80                 cmp     esi, esp
.text:00001B82                 call    __RTC_CheckEsp
.text:00001B87                 jmp     loc_1FF0
.text:00001B8C ; ---------------------------------------------------------------------------
.text:00001B8C
.text:00001B8C loc_1B8C:                               ; CODE XREF: _proxy_http_negotiate+2C8j
.text:00001B8C                 cmp     [ebp+arg_4], 1
.text:00001B90                 jnz     short loc_1B99
.text:00001B92                 xor     eax, eax
.text:00001B94                 jmp     loc_1FF0
.text:00001B99 ; ---------------------------------------------------------------------------
.text:00001B99
.text:00001B99 loc_1B99:                               ; CODE XREF: _proxy_http_negotiate+308j
.text:00001B99                 cmp     [ebp+arg_4], 3
.text:00001B9D                 jnz     short loc_1BD2
.text:00001B9F                 mov     esi, esp
.text:00001BA1                 mov     eax, [ebp+arg_0]
.text:00001BA4                 mov     ecx, [eax+70h]
.text:00001BA7                 push    ecx
.text:00001BA8                 mov     edx, [ebp+arg_0]
.text:00001BAB                 mov     eax, [edx+6Ch]
.text:00001BAE                 push    eax
.text:00001BAF                 mov     ecx, [ebp+arg_0]
.text:00001BB2                 mov     edx, [ecx+0Ch]
.text:00001BB5                 push    edx
.text:00001BB6                 mov     eax, [ebp+arg_0]
.text:00001BB9                 mov     ecx, [eax+0Ch]
.text:00001BBC                 mov     edx, [ecx]
.text:00001BBE                 mov     eax, [edx+10h]
.text:00001BC1                 call    eax
.text:00001BC3                 add     esp, 0Ch
.text:00001BC6                 cmp     esi, esp
.text:00001BC8                 call    __RTC_CheckEsp
.text:00001BCD                 jmp     loc_1FF0
.text:00001BD2 ; ---------------------------------------------------------------------------
.text:00001BD2
.text:00001BD2 loc_1BD2:                               ; CODE XREF: _proxy_http_negotiate+315j
.text:00001BD2                 cmp     [ebp+arg_4], 2
.text:00001BD6                 jnz     loc_1FBF
.text:00001BDC                 mov     ecx, [ebp+arg_0]
.text:00001BDF                 cmp     dword ptr [ecx+44h], 1
.text:00001BE3                 jnz     loc_1E4C
.text:00001BE9                 mov     edx, [ebp+arg_0]
.text:00001BEC                 add     edx, 34h ; '4'
.text:00001BEF                 push    edx
.text:00001BF0                 call    _bufchain_size
.text:00001BF5                 add     esp, 4
.text:00001BF8                 mov     [ebp+var_238], eax
.text:00001BFE                 cmp     [ebp+var_238], 0
.text:00001C05                 jg      short loc_1C1E
.text:00001C07                 push    273h            ; Line
.text:00001C0C                 push    offset $SG85969 ; "..\\..\\..\\proxy.c"
.text:00001C11                 push    offset $SG85970 ; "len > 0"
.text:00001C16                 call    __wassert
.text:00001C1B ; ---------------------------------------------------------------------------
.text:00001C1B                 add     esp, 0Ch
.text:00001C1E
.text:00001C1E loc_1C1E:                               ; CODE XREF: _proxy_http_negotiate+37Dj
.text:00001C1E                 push    1
.text:00001C20                 mov     ecx, [ebp+var_238]
.text:00001C26                 add     ecx, 1
.text:00001C29                 push    ecx
.text:00001C2A                 call    _safemalloc
.text:00001C2F                 add     esp, 8
.text:00001C32                 mov     [ebp+Src], eax
.text:00001C38                 mov     edx, [ebp+var_238]
.text:00001C3E                 push    edx
.text:00001C3F                 mov     eax, [ebp+Src]
.text:00001C45                 push    eax
.text:00001C46                 mov     ecx, [ebp+arg_0]
.text:00001C49                 add     ecx, 34h ; '4'
.text:00001C4C                 push    ecx
.text:00001C4D                 call    _bufchain_fetch
.text:00001C52                 add     esp, 0Ch
.text:00001C55                 mov     edx, [ebp+Src]
.text:00001C5B                 add     edx, [ebp+var_238]
.text:00001C61                 mov     byte ptr [edx], 0
.text:00001C64                 mov     eax, [ebp+var_238]
.text:00001C6A                 push    eax
.text:00001C6B                 mov     ecx, [ebp+Src]
.text:00001C71                 push    ecx
.text:00001C72                 call    _get_line_end
.text:00001C77                 add     esp, 8
.text:00001C7A                 mov     [ebp+var_23C], eax
.text:00001C80                 cmp     [ebp+var_23C], 0
.text:00001C87                 jge     short loc_1CA2
.text:00001C89                 mov     edx, [ebp+Src]
.text:00001C8F                 push    edx
.text:00001C90                 call    _safefree
.text:00001C95                 add     esp, 4
.text:00001C98                 mov     eax, 1
.text:00001C9D                 jmp     loc_1FF0
.text:00001CA2 ; ---------------------------------------------------------------------------
.text:00001CA2
.text:00001CA2 loc_1CA2:                               ; CODE XREF: _proxy_http_negotiate+3FFj
.text:00001CA2                 mov     [ebp+var_25C], 0FFFFFFFFh
.text:00001CAC                 lea     eax, [ebp+var_25C]
.text:00001CB2                 push    eax
.text:00001CB3                 lea     ecx, [ebp+var_244]
.text:00001CB9                 push    ecx
.text:00001CBA                 lea     edx, [ebp+var_250]
.text:00001CC0                 push    edx
.text:00001CC1                 push    offset $SG85977 ; "HTTP/%i.%i %n"
.text:00001CC6                 mov     eax, [ebp+Src]
.text:00001CCC                 push    eax             ; Src
.text:00001CCD                 call    _sscanf
.text:00001CD2                 add     esp, 14h
.text:00001CD5                 cmp     eax, 2
.text:00001CD8                 jl      short loc_1CE3
.text:00001CDA                 cmp     [ebp+var_25C], 0FFFFFFFFh
.text:00001CE1                 jnz     short loc_1D28
.text:00001CE3
.text:00001CE3 loc_1CE3:                               ; CODE XREF: _proxy_http_negotiate+450j
.text:00001CE3                 mov     esi, esp
.text:00001CE5                 push    0
.text:00001CE7                 push    1F40h
.text:00001CEC                 push    offset $SG85978 ; "Proxy error: HTTP response was absent"
.text:00001CF1                 mov     ecx, [ebp+arg_0]
.text:00001CF4                 mov     edx, [ecx+0Ch]
.text:00001CF7                 push    edx
.text:00001CF8                 mov     eax, [ebp+arg_0]
.text:00001CFB                 mov     ecx, [eax+0Ch]
.text:00001CFE                 mov     edx, [ecx]
.text:00001D00                 mov     eax, [edx+4]
.text:00001D03                 call    eax
.text:00001D05                 add     esp, 10h
.text:00001D08                 cmp     esi, esp
.text:00001D0A                 call    __RTC_CheckEsp
.text:00001D0F                 mov     ecx, [ebp+Src]
.text:00001D15                 push    ecx
.text:00001D16                 call    _safefree
.text:00001D1B                 add     esp, 4
.text:00001D1E                 mov     eax, 1
.text:00001D23                 jmp     loc_1FF0
.text:00001D28 ; ---------------------------------------------------------------------------
.text:00001D28
.text:00001D28 loc_1D28:                               ; CODE XREF: _proxy_http_negotiate+459j
.text:00001D28                 mov     edx, [ebp+var_23C]
.text:00001D2E                 push    edx
.text:00001D2F                 mov     eax, [ebp+arg_0]
.text:00001D32                 add     eax, 34h ; '4'
.text:00001D35                 push    eax
.text:00001D36                 call    _bufchain_consume
.text:00001D3B                 add     esp, 8
.text:00001D3E                 mov     ecx, [ebp+Src]
.text:00001D44                 add     ecx, [ebp+var_25C]
.text:00001D4A                 movsx   edx, byte ptr [ecx]
.text:00001D4D                 cmp     edx, 32h ; '2'
.text:00001D50                 jz      loc_1E33
.text:00001D56                 mov     eax, [ebp+Src]
.text:00001D5C                 add     eax, [ebp+var_23C]
.text:00001D62                 mov     byte ptr [eax], 0
.text:00001D65
.text:00001D65 loc_1D65:                               ; CODE XREF: _proxy_http_negotiate+533j
.text:00001D65                 mov     ecx, [ebp+var_23C]
.text:00001D6B                 cmp     ecx, [ebp+var_25C]
.text:00001D71                 jle     short loc_1DBD
.text:00001D73                 mov     edx, [ebp+Src]
.text:00001D79                 add     edx, [ebp+var_23C]
.text:00001D7F                 movsx   eax, byte ptr [edx-1]
.text:00001D83                 cmp     eax, 0Dh
.text:00001D86                 jz      short loc_1D9D
.text:00001D88                 mov     ecx, [ebp+Src]
.text:00001D8E                 add     ecx, [ebp+var_23C]
.text:00001D94                 movsx   edx, byte ptr [ecx-1]
.text:00001D98                 cmp     edx, 0Ah
.text:00001D9B                 jnz     short loc_1DBD
.text:00001D9D
.text:00001D9D loc_1D9D:                               ; CODE XREF: _proxy_http_negotiate+4FEj
.text:00001D9D                 mov     eax, [ebp+var_23C]
.text:00001DA3                 sub     eax, 1
.text:00001DA6                 mov     [ebp+var_23C], eax
.text:00001DAC                 mov     ecx, [ebp+Src]
.text:00001DB2                 add     ecx, [ebp+var_23C]
.text:00001DB8                 mov     byte ptr [ecx], 0
.text:00001DBB                 jmp     short loc_1D65
.text:00001DBD ; ---------------------------------------------------------------------------
.text:00001DBD
.text:00001DBD loc_1DBD:                               ; CODE XREF: _proxy_http_negotiate+4E9j
.text:00001DBD                                         ; _proxy_http_negotiate+513j
.text:00001DBD                 mov     edx, [ebp+Src]
.text:00001DC3                 add     edx, [ebp+var_25C]
.text:00001DC9                 push    edx
.text:00001DCA                 push    offset $SG85985 ; "Proxy error: %s"
.text:00001DCF                 call    _dupprintf
.text:00001DD4                 add     esp, 8
.text:00001DD7                 mov     [ebp+var_264], eax
.text:00001DDD                 mov     esi, esp
.text:00001DDF                 push    0
.text:00001DE1                 push    1F40h
.text:00001DE6                 mov     eax, [ebp+var_264]
.text:00001DEC                 push    eax
.text:00001DED                 mov     ecx, [ebp+arg_0]
.text:00001DF0                 mov     edx, [ecx+0Ch]
.text:00001DF3                 push    edx
.text:00001DF4                 mov     eax, [ebp+arg_0]
.text:00001DF7                 mov     ecx, [eax+0Ch]
.text:00001DFA                 mov     edx, [ecx]
.text:00001DFC                 mov     eax, [edx+4]
.text:00001DFF                 call    eax
.text:00001E01                 add     esp, 10h
.text:00001E04                 cmp     esi, esp
.text:00001E06                 call    __RTC_CheckEsp
.text:00001E0B                 mov     ecx, [ebp+var_264]
.text:00001E11                 push    ecx
.text:00001E12                 call    _safefree
.text:00001E17                 add     esp, 4
.text:00001E1A                 mov     edx, [ebp+Src]
.text:00001E20                 push    edx
.text:00001E21                 call    _safefree
.text:00001E26                 add     esp, 4
.text:00001E29                 mov     eax, 1
.text:00001E2E                 jmp     loc_1FF0
.text:00001E33 ; ---------------------------------------------------------------------------
.text:00001E33
.text:00001E33 loc_1E33:                               ; CODE XREF: _proxy_http_negotiate+4C8j
.text:00001E33                 mov     eax, [ebp+Src]
.text:00001E39                 push    eax
.text:00001E3A                 call    _safefree
.text:00001E3F                 add     esp, 4
.text:00001E42                 mov     ecx, [ebp+arg_0]
.text:00001E45                 mov     dword ptr [ecx+44h], 2
.text:00001E4C
.text:00001E4C loc_1E4C:                               ; CODE XREF: _proxy_http_negotiate+35Bj
.text:00001E4C                 mov     edx, [ebp+arg_0]
.text:00001E4F                 cmp     dword ptr [edx+44h], 2
.text:00001E53                 jnz     loc_1FBF
.text:00001E59                 mov     eax, [ebp+arg_0]
.text:00001E5C                 add     eax, 34h ; '4'
.text:00001E5F                 push    eax
.text:00001E60                 call    _bufchain_size
.text:00001E65                 add     esp, 4
.text:00001E68                 mov     [ebp+var_238], eax
.text:00001E6E                 cmp     [ebp+var_238], 0
.text:00001E75                 jg      short loc_1E8E
.text:00001E77                 push    2A9h            ; Line
.text:00001E7C                 push    offset $SG85988 ; "..\\..\\..\\proxy.c"
.text:00001E81                 push    offset $SG85989 ; "len > 0"
.text:00001E86                 call    __wassert
.text:00001E8B ; ---------------------------------------------------------------------------
.text:00001E8B                 add     esp, 0Ch
.text:00001E8E
.text:00001E8E loc_1E8E:                               ; CODE XREF: _proxy_http_negotiate+5EDj
.text:00001E8E                 push    1
.text:00001E90                 mov     edx, [ebp+var_238]
.text:00001E96                 push    edx
.text:00001E97                 call    _safemalloc
.text:00001E9C                 add     esp, 8
.text:00001E9F                 mov     [ebp+Src], eax
.text:00001EA5                 mov     eax, [ebp+Src]
.text:00001EAB                 mov     [ebp+var_234], eax
.text:00001EB1                 mov     ecx, [ebp+var_238]
.text:00001EB7                 push    ecx
.text:00001EB8                 mov     edx, [ebp+Src]
.text:00001EBE                 push    edx
.text:00001EBF                 mov     eax, [ebp+arg_0]
.text:00001EC2                 add     eax, 34h ; '4'
.text:00001EC5                 push    eax
.text:00001EC6                 call    _bufchain_fetch
.text:00001ECB                 add     esp, 0Ch
.text:00001ECE                 mov     ecx, [ebp+var_238]
.text:00001ED4                 push    ecx
.text:00001ED5                 mov     edx, [ebp+var_234]
.text:00001EDB                 push    edx
.text:00001EDC                 call    _get_line_end
.text:00001EE1                 add     esp, 8
.text:00001EE4                 mov     [ebp+var_23C], eax
.text:00001EEA                 cmp     [ebp+var_23C], 0
.text:00001EF1                 jge     short loc_1F0C
.text:00001EF3                 mov     eax, [ebp+Src]
.text:00001EF9                 push    eax
.text:00001EFA                 call    _safefree
.text:00001EFF                 add     esp, 4
.text:00001F02                 mov     eax, 1
.text:00001F07                 jmp     loc_1FF0
.text:00001F0C ; ---------------------------------------------------------------------------
.text:00001F0C
.text:00001F0C loc_1F0C:                               ; CODE XREF: _proxy_http_negotiate+669j
.text:00001F0C                                         ; _proxy_http_negotiate+6E3j
.text:00001F0C                 cmp     [ebp+var_23C], 2
.text:00001F13                 jle     short loc_1F6D
.text:00001F15                 mov     ecx, [ebp+var_23C]
.text:00001F1B                 push    ecx
.text:00001F1C                 mov     edx, [ebp+arg_0]
.text:00001F1F                 add     edx, 34h ; '4'
.text:00001F22                 push    edx
.text:00001F23                 call    _bufchain_consume
.text:00001F28                 add     esp, 8
.text:00001F2B                 mov     eax, [ebp+var_234]
.text:00001F31                 add     eax, [ebp+var_23C]
.text:00001F37                 mov     [ebp+var_234], eax
.text:00001F3D                 mov     ecx, [ebp+var_238]
.text:00001F43                 sub     ecx, [ebp+var_23C]
.text:00001F49                 mov     [ebp+var_238], ecx
.text:00001F4F                 mov     edx, [ebp+var_238]
.text:00001F55                 push    edx
.text:00001F56                 mov     eax, [ebp+var_234]
.text:00001F5C                 push    eax
.text:00001F5D                 call    _get_line_end
.text:00001F62                 add     esp, 8
.text:00001F65                 mov     [ebp+var_23C], eax
.text:00001F6B                 jmp     short loc_1F0C
.text:00001F6D ; ---------------------------------------------------------------------------
.text:00001F6D
.text:00001F6D loc_1F6D:                               ; CODE XREF: _proxy_http_negotiate+68Bj
.text:00001F6D                 cmp     [ebp+var_23C], 2
.text:00001F74                 jnz     short loc_1FA9
.text:00001F76                 push    2
.text:00001F78                 mov     ecx, [ebp+arg_0]
.text:00001F7B                 add     ecx, 34h ; '4'
.text:00001F7E                 push    ecx
.text:00001F7F                 call    _bufchain_consume
.text:00001F84                 add     esp, 8
.text:00001F87                 mov     edx, [ebp+arg_0]
.text:00001F8A                 push    edx
.text:00001F8B                 call    _proxy_activate
.text:00001F90                 add     esp, 4
.text:00001F93                 mov     eax, [ebp+Src]
.text:00001F99                 push    eax
.text:00001F9A                 call    _safefree
.text:00001F9F                 add     esp, 4
.text:00001FA2                 mov     eax, 1
.text:00001FA7                 jmp     short loc_1FF0
.text:00001FA9 ; ---------------------------------------------------------------------------
.text:00001FA9
.text:00001FA9 loc_1FA9:                               ; CODE XREF: _proxy_http_negotiate+6ECj
.text:00001FA9                 mov     ecx, [ebp+Src]
.text:00001FAF                 push    ecx
.text:00001FB0                 call    _safefree
.text:00001FB5                 add     esp, 4
.text:00001FB8                 mov     eax, 1
.text:00001FBD                 jmp     short loc_1FF0
.text:00001FBF ; ---------------------------------------------------------------------------
.text:00001FBF
.text:00001FBF loc_1FBF:                               ; CODE XREF: _proxy_http_negotiate+34Ej
.text:00001FBF                                         ; _proxy_http_negotiate+5CBj
.text:00001FBF                 mov     esi, esp
.text:00001FC1                 push    0
.text:00001FC3                 push    1F41h
.text:00001FC8                 push    offset $SG85997 ; "Proxy error: unexpected proxy error"
.text:00001FCD                 mov     edx, [ebp+arg_0]
.text:00001FD0                 mov     eax, [edx+0Ch]
.text:00001FD3                 push    eax
.text:00001FD4                 mov     ecx, [ebp+arg_0]
.text:00001FD7                 mov     edx, [ecx+0Ch]
.text:00001FDA                 mov     eax, [edx]
.text:00001FDC                 mov     ecx, [eax+4]
.text:00001FDF                 call    ecx
.text:00001FE1                 add     esp, 10h
.text:00001FE4                 cmp     esi, esp
.text:00001FE6                 call    __RTC_CheckEsp
.text:00001FEB                 mov     eax, 1
.text:00001FF0
.text:00001FF0 loc_1FF0:                               ; CODE XREF: _proxy_http_negotiate+2BFj
.text:00001FF0                                         ; _proxy_http_negotiate+2FFj ...
.text:00001FF0                 push    edx
.text:00001FF1                 mov     ecx, ebp
.text:00001FF3                 push    eax
.text:00001FF4                 lea     edx, $LN35
.text:00001FFA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001FFF                 pop     eax
.text:00002000                 pop     edx
.text:00002001                 pop     edi
.text:00002002                 pop     esi
.text:00002003                 mov     ecx, [ebp+var_4]
.text:00002006                 xor     ecx, ebp
.text:00002008                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000200D                 add     esp, 268h
.text:00002013                 cmp     ebp, esp
.text:00002015                 call    __RTC_CheckEsp
.text:0000201A                 mov     esp, ebp
.text:0000201C                 pop     ebp
.text:0000201D                 retn
.text:0000201D _proxy_http_negotiate endp
.text:0000201D
.text:0000201D ; ---------------------------------------------------------------------------
.text:0000201E                 align 10h
.text:00002020 $LN35           dd 4                    ; DATA XREF: _proxy_http_negotiate+76Co
.text:00002024                 dd offset $LN34
.text:00002028 $LN34           dd 0FFFFFDF4h, 200h     ; DATA XREF: .text:00002024o
.text:00002030                 dd offset $LN30         ; "dest"
.text:00002034                 dd 0FFFFFDBCh, 4
.text:0000203C                 dd offset $LN31_0       ; "min_ver"
.text:00002040                 dd 0FFFFFDB0h, 4
.text:00002048                 dd offset $LN32_0       ; "maj_ver"
.text:0000204C                 dd 0FFFFFDA4h, 4
.text:00002054                 dd offset $LN33_0       ; "status"
.text:00002058 $LN33_0         db 'status',0           ; DATA XREF: .text:00002054o
.text:0000205F $LN32_0         db 'maj_ver',0          ; DATA XREF: .text:00002048o
.text:00002067 $LN31_0         db 'min_ver',0          ; DATA XREF: .text:0000203Co
.text:0000206F $LN30           db 'dest',0             ; DATA XREF: .text:00002030o
.text:00002074                 align 8
.text:00002078
.text:00002078 ; =============== S U B R O U T I N E =======================================
.text:00002078
.text:00002078 ; Attributes: bp-based frame
.text:00002078
.text:00002078 _get_line_end   proc near               ; CODE XREF: _proxy_http_negotiate+3EAp
.text:00002078                                         ; _proxy_http_negotiate+654p ...
.text:00002078
.text:00002078 var_4           = dword ptr -4
.text:00002078 arg_0           = dword ptr  8
.text:00002078 arg_4           = dword ptr  0Ch
.text:00002078
.text:00002078                 push    ebp
.text:00002079                 mov     ebp, esp
.text:0000207B                 push    ecx
.text:0000207C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002083                 mov     [ebp+var_4], 0
.text:0000208A
.text:0000208A loc_208A:                               ; CODE XREF: _get_line_end+7Cj
.text:0000208A                 mov     eax, [ebp+var_4]
.text:0000208D                 cmp     eax, [ebp+arg_4]
.text:00002090                 jge     short loc_20F6
.text:00002092                 mov     ecx, [ebp+arg_0]
.text:00002095                 add     ecx, [ebp+var_4]
.text:00002098                 movsx   edx, byte ptr [ecx]
.text:0000209B                 cmp     edx, 0Ah
.text:0000209E                 jnz     short loc_20EB
.text:000020A0                 mov     eax, [ebp+var_4]
.text:000020A3                 add     eax, 1
.text:000020A6                 mov     [ebp+var_4], eax
.text:000020A9                 cmp     [ebp+var_4], 2
.text:000020AD                 jg      short loc_20B4
.text:000020AF                 mov     eax, [ebp+var_4]
.text:000020B2                 jmp     short loc_20F9
.text:000020B4 ; ---------------------------------------------------------------------------
.text:000020B4
.text:000020B4 loc_20B4:                               ; CODE XREF: _get_line_end+35j
.text:000020B4                 mov     ecx, [ebp+var_4]
.text:000020B7                 add     ecx, 1
.text:000020BA                 cmp     ecx, [ebp+arg_4]
.text:000020BD                 jge     short loc_20E2
.text:000020BF                 mov     edx, [ebp+arg_0]
.text:000020C2                 add     edx, [ebp+var_4]
.text:000020C5                 movsx   eax, byte ptr [edx+1]
.text:000020C9                 cmp     eax, 20h ; ' '
.text:000020CC                 jz      short loc_20E2
.text:000020CE                 mov     ecx, [ebp+arg_0]
.text:000020D1                 add     ecx, [ebp+var_4]
.text:000020D4                 movsx   edx, byte ptr [ecx+1]
.text:000020D8                 cmp     edx, 9
.text:000020DB                 jz      short loc_20E2
.text:000020DD                 mov     eax, [ebp+var_4]
.text:000020E0                 jmp     short loc_20F9
.text:000020E2 ; ---------------------------------------------------------------------------
.text:000020E2
.text:000020E2 loc_20E2:                               ; CODE XREF: _get_line_end+45j
.text:000020E2                                         ; _get_line_end+54j ...
.text:000020E2                 mov     eax, [ebp+var_4]
.text:000020E5                 add     eax, 1
.text:000020E8                 mov     [ebp+var_4], eax
.text:000020EB
.text:000020EB loc_20EB:                               ; CODE XREF: _get_line_end+26j
.text:000020EB                 mov     ecx, [ebp+var_4]
.text:000020EE                 add     ecx, 1
.text:000020F1                 mov     [ebp+var_4], ecx
.text:000020F4                 jmp     short loc_208A
.text:000020F6 ; ---------------------------------------------------------------------------
.text:000020F6
.text:000020F6 loc_20F6:                               ; CODE XREF: _get_line_end+18j
.text:000020F6                 or      eax, 0FFFFFFFFh
.text:000020F9
.text:000020F9 loc_20F9:                               ; CODE XREF: _get_line_end+3Aj
.text:000020F9                                         ; _get_line_end+68j
.text:000020F9                 mov     esp, ebp
.text:000020FB                 pop     ebp
.text:000020FC                 retn
.text:000020FC _get_line_end   endp
.text:000020FC
.text:000020FC ; ---------------------------------------------------------------------------
.text:000020FD                 db 0Bh dup(0CCh)
.text:00002108
.text:00002108 ; =============== S U B R O U T I N E =======================================
.text:00002108
.text:00002108 ; Attributes: bp-based frame
.text:00002108
.text:00002108                 public _proxy_socks4_negotiate
.text:00002108 _proxy_socks4_negotiate proc near       ; DATA XREF: _new_connection+17Eo
.text:00002108
.text:00002108 var_240         = byte ptr -240h
.text:00002108 var_238         = byte ptr -238h
.text:00002108 var_237         = byte ptr -237h
.text:00002108 Source          = dword ptr -22Ch
.text:00002108 Str             = byte ptr -224h
.text:00002108 Src             = byte ptr -1Ch
.text:00002108 var_1B          = byte ptr -1Bh
.text:00002108 var_1A          = byte ptr -1Ah
.text:00002108 var_19          = byte ptr -19h
.text:00002108 var_14          = dword ptr -14h
.text:00002108 Size            = dword ptr -10h
.text:00002108 var_C           = dword ptr -0Ch
.text:00002108 var_8           = dword ptr -8
.text:00002108 var_4           = dword ptr -4
.text:00002108 arg_0           = dword ptr  8
.text:00002108 arg_4           = dword ptr  0Ch
.text:00002108
.text:00002108                 push    ebp
.text:00002109                 mov     ebp, esp
.text:0000210B                 sub     esp, 240h
.text:00002111                 push    esi
.text:00002112                 push    edi
.text:00002113                 lea     edi, [ebp+var_240]
.text:00002119                 mov     ecx, 90h ; 'É'
.text:0000211E                 mov     eax, 0CCCCCCCCh
.text:00002123                 rep stosd
.text:00002125                 mov     eax, dword ptr ds:___security_cookie
.text:0000212A                 xor     eax, ebp
.text:0000212C                 mov     [ebp+var_4], eax
.text:0000212F                 mov     eax, [ebp+arg_0]
.text:00002132                 cmp     dword ptr [eax+44h], 0FFFFFFFFh
.text:00002136                 jnz     loc_2312
.text:0000213C                 mov     ecx, [ebp+arg_0]
.text:0000213F                 mov     edx, [ecx+10h]
.text:00002142                 push    edx
.text:00002143                 call    _sk_addrtype
.text:00002148                 add     esp, 4
.text:0000214B                 mov     [ebp+var_C], eax
.text:0000214E                 cmp     [ebp+var_C], 2
.text:00002152                 jnz     short loc_216D
.text:00002154                 mov     eax, [ebp+arg_0]
.text:00002157                 mov     dword ptr [eax+4], offset $SG86012 ; "Proxy error: SOCKS version 4 does not s"...
.text:0000215E                 mov     eax, 1
.text:00002163                 jmp     loc_253A
.text:00002168 ; ---------------------------------------------------------------------------
.text:00002168                 jmp     loc_21F0
.text:0000216D ; ---------------------------------------------------------------------------
.text:0000216D
.text:0000216D loc_216D:                               ; CODE XREF: _proxy_socks4_negotiate+4Aj
.text:0000216D                 cmp     [ebp+var_C], 1
.text:00002171                 jnz     short loc_218F
.text:00002173                 mov     [ebp+Size], 0
.text:0000217A                 lea     ecx, [ebp+Src]
.text:0000217D                 push    ecx
.text:0000217E                 mov     edx, [ebp+arg_0]
.text:00002181                 mov     eax, [edx+10h]
.text:00002184                 push    eax
.text:00002185                 call    _sk_addrcopy
.text:0000218A                 add     esp, 8
.text:0000218D                 jmp     short loc_21F0
.text:0000218F ; ---------------------------------------------------------------------------
.text:0000218F
.text:0000218F loc_218F:                               ; CODE XREF: _proxy_socks4_negotiate+69j
.text:0000218F                 cmp     [ebp+var_C], 3
.text:00002193                 jz      short loc_21AC
.text:00002195                 push    2EEh            ; Line
.text:0000219A                 push    offset $SG86017 ; "..\\..\\..\\proxy.c"
.text:0000219F                 push    offset $SG86018 ; "type == ADDRTYPE_NAME"
.text:000021A4                 call    __wassert
.text:000021A9 ; ---------------------------------------------------------------------------
.text:000021A9                 add     esp, 0Ch
.text:000021AC
.text:000021AC loc_21AC:                               ; CODE XREF: _proxy_socks4_negotiate+8Bj
.text:000021AC                 push    200h
.text:000021B1                 lea     edx, [ebp+Str]
.text:000021B7                 push    edx
.text:000021B8                 mov     eax, [ebp+arg_0]
.text:000021BB                 mov     ecx, [eax+10h]
.text:000021BE                 push    ecx
.text:000021BF                 call    _sk_getaddr
.text:000021C4                 add     esp, 0Ch
.text:000021C7                 lea     edx, [ebp+Str]
.text:000021CD                 push    edx             ; Str
.text:000021CE                 call    _strlen
.text:000021D3                 add     esp, 4
.text:000021D6                 add     eax, 1
.text:000021D9                 mov     [ebp+Size], eax
.text:000021DC                 mov     [ebp+var_1A], 0
.text:000021E0                 mov     al, [ebp+var_1A]
.text:000021E3                 mov     [ebp+var_1B], al
.text:000021E6                 mov     cl, [ebp+var_1B]
.text:000021E9                 mov     [ebp+Src], cl
.text:000021EC                 mov     [ebp+var_19], 1
.text:000021F0
.text:000021F0 loc_21F0:                               ; CODE XREF: _proxy_socks4_negotiate+60j
.text:000021F0                                         ; _proxy_socks4_negotiate+85j
.text:000021F0                 push    10h
.text:000021F2                 mov     edx, [ebp+arg_0]
.text:000021F5                 mov     eax, [edx+74h]
.text:000021F8                 push    eax
.text:000021F9                 call    _conf_get_str
.text:000021FE                 add     esp, 8
.text:00002201                 mov     [ebp+Source], eax
.text:00002207                 mov     ecx, [ebp+Source]
.text:0000220D                 push    ecx             ; Str
.text:0000220E                 call    _strlen
.text:00002213                 add     esp, 4
.text:00002216                 mov     edx, [ebp+Size]
.text:00002219                 lea     eax, [eax+edx+9]
.text:0000221D                 mov     [ebp+var_8], eax
.text:00002220                 push    1
.text:00002222                 mov     ecx, [ebp+var_8]
.text:00002225                 push    ecx
.text:00002226                 call    _safemalloc
.text:0000222B                 add     esp, 8
.text:0000222E                 mov     [ebp+var_14], eax
.text:00002231                 mov     edx, [ebp+Source]
.text:00002237                 push    edx             ; Source
.text:00002238                 mov     eax, [ebp+var_14]
.text:0000223B                 add     eax, 8
.text:0000223E                 push    eax             ; Dest
.text:0000223F                 call    _strcpy
.text:00002244                 add     esp, 8
.text:00002247                 mov     ecx, [ebp+var_14]
.text:0000224A                 mov     byte ptr [ecx], 4
.text:0000224D                 mov     edx, [ebp+var_14]
.text:00002250                 mov     byte ptr [edx+1], 1
.text:00002254                 mov     eax, [ebp+arg_0]
.text:00002257                 mov     ecx, [eax+14h]
.text:0000225A                 sar     ecx, 8
.text:0000225D                 movsx   edx, cl
.text:00002260                 and     edx, 0FFh
.text:00002266                 mov     eax, [ebp+var_14]
.text:00002269                 mov     [eax+2], dl
.text:0000226C                 mov     ecx, [ebp+arg_0]
.text:0000226F                 movsx   edx, byte ptr [ecx+14h]
.text:00002273                 and     edx, 0FFh
.text:00002279                 mov     eax, [ebp+var_14]
.text:0000227C                 mov     [eax+3], dl
.text:0000227F                 push    4               ; Size
.text:00002281                 lea     ecx, [ebp+Src]
.text:00002284                 push    ecx             ; Src
.text:00002285                 mov     edx, [ebp+var_14]
.text:00002288                 add     edx, 4
.text:0000228B                 push    edx             ; Dst
.text:0000228C                 call    _memcpy
.text:00002291                 add     esp, 0Ch
.text:00002294                 mov     eax, [ebp+Size]
.text:00002297                 push    eax             ; Size
.text:00002298                 lea     ecx, [ebp+Str]
.text:0000229E                 push    ecx             ; Src
.text:0000229F                 mov     edx, [ebp+Source]
.text:000022A5                 push    edx             ; Str
.text:000022A6                 call    _strlen
.text:000022AB                 add     esp, 4
.text:000022AE                 mov     ecx, [ebp+var_14]
.text:000022B1                 lea     edx, [ecx+eax+9]
.text:000022B5                 push    edx             ; Dst
.text:000022B6                 call    _memcpy
.text:000022BB                 add     esp, 0Ch
.text:000022BE                 mov     esi, esp
.text:000022C0                 mov     eax, [ebp+var_8]
.text:000022C3                 push    eax
.text:000022C4                 mov     ecx, [ebp+var_14]
.text:000022C7                 push    ecx
.text:000022C8                 mov     edx, [ebp+arg_0]
.text:000022CB                 mov     eax, [edx+8]
.text:000022CE                 push    eax
.text:000022CF                 mov     ecx, [ebp+arg_0]
.text:000022D2                 mov     edx, [ecx+8]
.text:000022D5                 mov     eax, [edx]
.text:000022D7                 mov     ecx, [eax+8]
.text:000022DA                 call    ecx
.text:000022DC                 add     esp, 0Ch
.text:000022DF                 cmp     esi, esp
.text:000022E1                 call    __RTC_CheckEsp
.text:000022E6                 mov     edx, [ebp+Source]
.text:000022EC                 push    edx
.text:000022ED                 call    _safefree
.text:000022F2                 add     esp, 4
.text:000022F5                 mov     eax, [ebp+var_14]
.text:000022F8                 push    eax
.text:000022F9                 call    _safefree
.text:000022FE                 add     esp, 4
.text:00002301                 mov     ecx, [ebp+arg_0]
.text:00002304                 mov     dword ptr [ecx+44h], 1
.text:0000230B                 xor     eax, eax
.text:0000230D                 jmp     loc_253A
.text:00002312 ; ---------------------------------------------------------------------------
.text:00002312
.text:00002312 loc_2312:                               ; CODE XREF: _proxy_socks4_negotiate+2Ej
.text:00002312                 cmp     [ebp+arg_4], 0
.text:00002316                 jnz     short loc_2352
.text:00002318                 mov     esi, esp
.text:0000231A                 mov     edx, [ebp+arg_0]
.text:0000231D                 mov     eax, [edx+58h]
.text:00002320                 push    eax
.text:00002321                 mov     ecx, [ebp+arg_0]
.text:00002324                 mov     edx, [ecx+54h]
.text:00002327                 push    edx
.text:00002328                 mov     eax, [ebp+arg_0]
.text:0000232B                 mov     ecx, [eax+50h]
.text:0000232E                 push    ecx
.text:0000232F                 mov     edx, [ebp+arg_0]
.text:00002332                 mov     eax, [edx+0Ch]
.text:00002335                 push    eax
.text:00002336                 mov     ecx, [ebp+arg_0]
.text:00002339                 mov     edx, [ecx+0Ch]
.text:0000233C                 mov     eax, [edx]
.text:0000233E                 mov     ecx, [eax+4]
.text:00002341                 call    ecx
.text:00002343                 add     esp, 10h
.text:00002346                 cmp     esi, esp
.text:00002348                 call    __RTC_CheckEsp
.text:0000234D                 jmp     loc_253A
.text:00002352 ; ---------------------------------------------------------------------------
.text:00002352
.text:00002352 loc_2352:                               ; CODE XREF: _proxy_socks4_negotiate+20Ej
.text:00002352                 cmp     [ebp+arg_4], 1
.text:00002356                 jnz     short loc_235F
.text:00002358                 xor     eax, eax
.text:0000235A                 jmp     loc_253A
.text:0000235F ; ---------------------------------------------------------------------------
.text:0000235F
.text:0000235F loc_235F:                               ; CODE XREF: _proxy_socks4_negotiate+24Ej
.text:0000235F                 cmp     [ebp+arg_4], 3
.text:00002363                 jnz     short loc_2398
.text:00002365                 mov     esi, esp
.text:00002367                 mov     edx, [ebp+arg_0]
.text:0000236A                 mov     eax, [edx+70h]
.text:0000236D                 push    eax
.text:0000236E                 mov     ecx, [ebp+arg_0]
.text:00002371                 mov     edx, [ecx+6Ch]
.text:00002374                 push    edx
.text:00002375                 mov     eax, [ebp+arg_0]
.text:00002378                 mov     ecx, [eax+0Ch]
.text:0000237B                 push    ecx
.text:0000237C                 mov     edx, [ebp+arg_0]
.text:0000237F                 mov     eax, [edx+0Ch]
.text:00002382                 mov     ecx, [eax]
.text:00002384                 mov     edx, [ecx+10h]
.text:00002387                 call    edx
.text:00002389                 add     esp, 0Ch
.text:0000238C                 cmp     esi, esp
.text:0000238E                 call    __RTC_CheckEsp
.text:00002393                 jmp     loc_253A
.text:00002398 ; ---------------------------------------------------------------------------
.text:00002398
.text:00002398 loc_2398:                               ; CODE XREF: _proxy_socks4_negotiate+25Bj
.text:00002398                 cmp     [ebp+arg_4], 2
.text:0000239C                 jnz     loc_2509
.text:000023A2                 mov     eax, [ebp+arg_0]
.text:000023A5                 cmp     dword ptr [eax+44h], 1
.text:000023A9                 jnz     loc_2509
.text:000023AF                 mov     ecx, [ebp+arg_0]
.text:000023B2                 add     ecx, 34h ; '4'
.text:000023B5                 push    ecx
.text:000023B6                 call    _bufchain_size
.text:000023BB                 add     esp, 4
.text:000023BE                 cmp     eax, 8
.text:000023C1                 jge     short loc_23CD
.text:000023C3                 mov     eax, 1
.text:000023C8                 jmp     loc_253A
.text:000023CD ; ---------------------------------------------------------------------------
.text:000023CD
.text:000023CD loc_23CD:                               ; CODE XREF: _proxy_socks4_negotiate+2B9j
.text:000023CD                 push    8
.text:000023CF                 lea     edx, [ebp+var_238]
.text:000023D5                 push    edx
.text:000023D6                 mov     eax, [ebp+arg_0]
.text:000023D9                 add     eax, 34h ; '4'
.text:000023DC                 push    eax
.text:000023DD                 call    _bufchain_fetch
.text:000023E2                 add     esp, 0Ch
.text:000023E5                 movsx   ecx, [ebp+var_238]
.text:000023EC                 test    ecx, ecx
.text:000023EE                 jz      short loc_2426
.text:000023F0                 mov     esi, esp
.text:000023F2                 push    0
.text:000023F4                 push    1F40h
.text:000023F9                 push    offset $SG86031 ; "Proxy error: SOCKS proxy responded with"...
.text:000023FE                 mov     edx, [ebp+arg_0]
.text:00002401                 mov     eax, [edx+0Ch]
.text:00002404                 push    eax
.text:00002405                 mov     ecx, [ebp+arg_0]
.text:00002408                 mov     edx, [ecx+0Ch]
.text:0000240B                 mov     eax, [edx]
.text:0000240D                 mov     ecx, [eax+4]
.text:00002410                 call    ecx
.text:00002412                 add     esp, 10h
.text:00002415                 cmp     esi, esp
.text:00002417                 call    __RTC_CheckEsp
.text:0000241C                 mov     eax, 1
.text:00002421                 jmp     loc_253A
.text:00002426 ; ---------------------------------------------------------------------------
.text:00002426
.text:00002426 loc_2426:                               ; CODE XREF: _proxy_socks4_negotiate+2E6j
.text:00002426                 movsx   edx, [ebp+var_237]
.text:0000242D                 cmp     edx, 5Ah ; 'Z'
.text:00002430                 jz      loc_24E5
.text:00002436                 mov     al, [ebp+var_237]
.text:0000243C                 mov     [ebp+var_240], al
.text:00002442                 cmp     [ebp+var_240], 5Ch ; '\'
.text:00002449                 jz      short loc_2456
.text:0000244B                 cmp     [ebp+var_240], 5Dh ; ']'
.text:00002452                 jz      short loc_2484
.text:00002454                 jmp     short loc_24B2
.text:00002456 ; ---------------------------------------------------------------------------
.text:00002456
.text:00002456 loc_2456:                               ; CODE XREF: _proxy_socks4_negotiate+341j
.text:00002456                 mov     esi, esp
.text:00002458                 push    0
.text:0000245A                 push    1F40h
.text:0000245F                 push    offset $SG86038 ; "Proxy error: SOCKS server wanted IDENTD"...
.text:00002464                 mov     ecx, [ebp+arg_0]
.text:00002467                 mov     edx, [ecx+0Ch]
.text:0000246A                 push    edx
.text:0000246B                 mov     eax, [ebp+arg_0]
.text:0000246E                 mov     ecx, [eax+0Ch]
.text:00002471                 mov     edx, [ecx]
.text:00002473                 mov     eax, [edx+4]
.text:00002476                 call    eax
.text:00002478                 add     esp, 10h
.text:0000247B                 cmp     esi, esp
.text:0000247D                 call    __RTC_CheckEsp
.text:00002482                 jmp     short loc_24DE
.text:00002484 ; ---------------------------------------------------------------------------
.text:00002484
.text:00002484 loc_2484:                               ; CODE XREF: _proxy_socks4_negotiate+34Aj
.text:00002484                 mov     esi, esp
.text:00002486                 push    0
.text:00002488                 push    1F40h
.text:0000248D                 push    offset $SG86040 ; "Proxy error: Username and IDENTD on cli"...
.text:00002492                 mov     ecx, [ebp+arg_0]
.text:00002495                 mov     edx, [ecx+0Ch]
.text:00002498                 push    edx
.text:00002499                 mov     eax, [ebp+arg_0]
.text:0000249C                 mov     ecx, [eax+0Ch]
.text:0000249F                 mov     edx, [ecx]
.text:000024A1                 mov     eax, [edx+4]
.text:000024A4                 call    eax
.text:000024A6                 add     esp, 10h
.text:000024A9                 cmp     esi, esp
.text:000024AB                 call    __RTC_CheckEsp
.text:000024B0                 jmp     short loc_24DE
.text:000024B2 ; ---------------------------------------------------------------------------
.text:000024B2
.text:000024B2 loc_24B2:                               ; CODE XREF: _proxy_socks4_negotiate+34Cj
.text:000024B2                 mov     esi, esp
.text:000024B4                 push    0
.text:000024B6                 push    1F40h
.text:000024BB                 push    offset $SG86042 ; "Proxy error: Error while communicating "...
.text:000024C0                 mov     ecx, [ebp+arg_0]
.text:000024C3                 mov     edx, [ecx+0Ch]
.text:000024C6                 push    edx
.text:000024C7                 mov     eax, [ebp+arg_0]
.text:000024CA                 mov     ecx, [eax+0Ch]
.text:000024CD                 mov     edx, [ecx]
.text:000024CF                 mov     eax, [edx+4]
.text:000024D2                 call    eax
.text:000024D4                 add     esp, 10h
.text:000024D7                 cmp     esi, esp
.text:000024D9                 call    __RTC_CheckEsp
.text:000024DE
.text:000024DE loc_24DE:                               ; CODE XREF: _proxy_socks4_negotiate+37Aj
.text:000024DE                                         ; _proxy_socks4_negotiate+3A8j
.text:000024DE                 mov     eax, 1
.text:000024E3                 jmp     short loc_253A
.text:000024E5 ; ---------------------------------------------------------------------------
.text:000024E5
.text:000024E5 loc_24E5:                               ; CODE XREF: _proxy_socks4_negotiate+328j
.text:000024E5                 push    8
.text:000024E7                 mov     ecx, [ebp+arg_0]
.text:000024EA                 add     ecx, 34h ; '4'
.text:000024ED                 push    ecx
.text:000024EE                 call    _bufchain_consume
.text:000024F3                 add     esp, 8
.text:000024F6                 mov     edx, [ebp+arg_0]
.text:000024F9                 push    edx
.text:000024FA                 call    _proxy_activate
.text:000024FF                 add     esp, 4
.text:00002502                 mov     eax, 1
.text:00002507                 jmp     short loc_253A
.text:00002509 ; ---------------------------------------------------------------------------
.text:00002509
.text:00002509 loc_2509:                               ; CODE XREF: _proxy_socks4_negotiate+294j
.text:00002509                                         ; _proxy_socks4_negotiate+2A1j
.text:00002509                 mov     esi, esp
.text:0000250B                 push    0
.text:0000250D                 push    1F41h
.text:00002512                 push    offset $SG86043 ; "Proxy error: unexpected proxy error"
.text:00002517                 mov     eax, [ebp+arg_0]
.text:0000251A                 mov     ecx, [eax+0Ch]
.text:0000251D                 push    ecx
.text:0000251E                 mov     edx, [ebp+arg_0]
.text:00002521                 mov     eax, [edx+0Ch]
.text:00002524                 mov     ecx, [eax]
.text:00002526                 mov     edx, [ecx+4]
.text:00002529                 call    edx
.text:0000252B                 add     esp, 10h
.text:0000252E                 cmp     esi, esp
.text:00002530                 call    __RTC_CheckEsp
.text:00002535                 mov     eax, 1
.text:0000253A
.text:0000253A loc_253A:                               ; CODE XREF: _proxy_socks4_negotiate+5Bj
.text:0000253A                                         ; _proxy_socks4_negotiate+205j ...
.text:0000253A                 push    edx
.text:0000253B                 mov     ecx, ebp
.text:0000253D                 push    eax
.text:0000253E                 lea     edx, $LN26
.text:00002544                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002549                 pop     eax
.text:0000254A                 pop     edx
.text:0000254B                 pop     edi
.text:0000254C                 pop     esi
.text:0000254D                 mov     ecx, [ebp+var_4]
.text:00002550                 xor     ecx, ebp
.text:00002552                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002557                 add     esp, 240h
.text:0000255D                 cmp     ebp, esp
.text:0000255F                 call    __RTC_CheckEsp
.text:00002564                 mov     esp, ebp
.text:00002566                 pop     ebp
.text:00002567                 retn
.text:00002567 _proxy_socks4_negotiate endp
.text:00002567
.text:00002567 ; ---------------------------------------------------------------------------
.text:00002568 $LN26           dd 3                    ; DATA XREF: _proxy_socks4_negotiate+436o
.text:0000256C                 dd offset $LN25
.text:00002570 $LN25           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:0000256Co
.text:00002578                 dd offset $LN22         ; "addr"
.text:0000257C                 dd 0FFFFFDDCh, 200h
.text:00002584                 dd offset $LN23         ; "hostname"
.text:00002588                 dd 0FFFFFDC8h, 8
.text:00002590                 dd offset $LN24         ; "data"
.text:00002594 $LN24           db 'data',0             ; DATA XREF: .text:00002590o
.text:00002599 $LN23           db 'hostname',0         ; DATA XREF: .text:00002584o
.text:000025A2 $LN22           db 'addr',0             ; DATA XREF: .text:00002578o
.text:000025A7                 align 4
.text:000025A8
.text:000025A8 ; =============== S U B R O U T I N E =======================================
.text:000025A8
.text:000025A8 ; Attributes: bp-based frame
.text:000025A8
.text:000025A8                 public _proxy_socks5_negotiate
.text:000025A8 _proxy_socks5_negotiate proc near       ; DATA XREF: _new_connection+190o
.text:000025A8
.text:000025A8 var_598         = byte ptr -598h
.text:000025A8 var_594         = dword ptr -594h
.text:000025A8 var_590         = dword ptr -590h
.text:000025A8 var_58C         = dword ptr -58Ch
.text:000025A8 Size            = dword ptr -588h
.text:000025A8 var_580         = byte ptr -580h
.text:000025A8 var_57F         = byte ptr -57Fh
.text:000025A8 Dst             = byte ptr -57Eh
.text:000025A8 var_57D         = byte ptr -57Dh
.text:000025A8 var_378         = dword ptr -378h
.text:000025A8 var_374         = dword ptr -374h
.text:000025A8 Dest            = byte ptr -36Ch
.text:000025A8 var_268         = dword ptr -268h
.text:000025A8 var_260         = byte ptr -260h
.text:000025A8 var_25F         = byte ptr -25Fh
.text:000025A8 var_25D         = byte ptr -25Dh
.text:000025A8 var_25C         = byte ptr -25Ch
.text:000025A8 var_254         = dword ptr -254h
.text:000025A8 var_250         = dword ptr -250h
.text:000025A8 var_24A         = byte ptr -24Ah
.text:000025A8 var_249         = byte ptr -249h
.text:000025A8 var_248         = byte ptr -248h
.text:000025A8 var_247         = byte ptr -247h
.text:000025A8 var_246         = byte ptr -246h
.text:000025A8 var_245         = byte ptr -245h
.text:000025A8 var_244         = byte ptr -244h
.text:000025A8 Str             = byte ptr -243h
.text:000025A8 var_44          = dword ptr -44h
.text:000025A8 var_3C          = byte ptr -3Ch
.text:000025A8 var_3B          = byte ptr -3Bh
.text:000025A8 var_30          = byte ptr -30h
.text:000025A8 var_2F          = byte ptr -2Fh
.text:000025A8 var_24          = dword ptr -24h
.text:000025A8 var_1C          = dword ptr -1Ch
.text:000025A8 var_18          = dword ptr -18h
.text:000025A8 var_10          = byte ptr -10h
.text:000025A8 var_F           = byte ptr -0Fh
.text:000025A8 var_E           = byte ptr -0Eh
.text:000025A8 var_4           = dword ptr -4
.text:000025A8 arg_0           = dword ptr  8
.text:000025A8 arg_4           = dword ptr  0Ch
.text:000025A8
.text:000025A8                 push    ebp
.text:000025A9                 mov     ebp, esp
.text:000025AB                 sub     esp, 598h
.text:000025B1                 push    esi
.text:000025B2                 push    edi
.text:000025B3                 lea     edi, [ebp+var_598]
.text:000025B9                 mov     ecx, 166h
.text:000025BE                 mov     eax, 0CCCCCCCCh
.text:000025C3                 rep stosd
.text:000025C5                 mov     eax, dword ptr ds:___security_cookie
.text:000025CA                 xor     eax, ebp
.text:000025CC                 mov     [ebp+var_4], eax
.text:000025CF                 mov     eax, [ebp+arg_0]
.text:000025D2                 cmp     dword ptr [eax+44h], 0FFFFFFFFh
.text:000025D6                 jnz     loc_269B
.text:000025DC                 mov     [ebp+var_10], 5
.text:000025E0                 push    10h
.text:000025E2                 mov     ecx, [ebp+arg_0]
.text:000025E5                 mov     edx, [ecx+74h]
.text:000025E8                 push    edx
.text:000025E9                 call    _conf_get_str
.text:000025EE                 add     esp, 8
.text:000025F1                 mov     [ebp+var_18], eax
.text:000025F4                 push    11h
.text:000025F6                 mov     eax, [ebp+arg_0]
.text:000025F9                 mov     ecx, [eax+74h]
.text:000025FC                 push    ecx
.text:000025FD                 call    _conf_get_str
.text:00002602                 add     esp, 8
.text:00002605                 mov     [ebp+var_1C], eax
.text:00002608                 mov     edx, [ebp+var_18]
.text:0000260B                 movsx   eax, byte ptr [edx]
.text:0000260E                 test    eax, eax
.text:00002610                 jnz     short loc_261C
.text:00002612                 mov     ecx, [ebp+var_1C]
.text:00002615                 movsx   edx, byte ptr [ecx]
.text:00002618                 test    edx, edx
.text:0000261A                 jz      short loc_2653
.text:0000261C
.text:0000261C loc_261C:                               ; CODE XREF: _proxy_socks5_negotiate+68j
.text:0000261C                 mov     [ebp+var_E], 0
.text:00002620                 mov     [ebp+var_24], 3
.text:00002627                 lea     eax, [ebp+var_24]
.text:0000262A                 push    eax
.text:0000262B                 lea     ecx, [ebp+var_10]
.text:0000262E                 push    ecx
.text:0000262F                 call    _proxy_socks5_offerencryptedauth
.text:00002634                 add     esp, 8
.text:00002637                 mov     edx, [ebp+var_24]
.text:0000263A                 mov     [ebp+edx+var_10], 2
.text:0000263F                 mov     eax, [ebp+var_24]
.text:00002642                 add     eax, 1
.text:00002645                 mov     [ebp+var_24], eax
.text:00002648                 mov     ecx, [ebp+var_24]
.text:0000264B                 sub     ecx, 2
.text:0000264E                 mov     [ebp+var_F], cl
.text:00002651                 jmp     short loc_2662
.text:00002653 ; ---------------------------------------------------------------------------
.text:00002653
.text:00002653 loc_2653:                               ; CODE XREF: _proxy_socks5_negotiate+72j
.text:00002653                 mov     [ebp+var_F], 1
.text:00002657                 mov     [ebp+var_E], 0
.text:0000265B                 mov     [ebp+var_24], 3
.text:00002662
.text:00002662 loc_2662:                               ; CODE XREF: _proxy_socks5_negotiate+A9j
.text:00002662                 mov     esi, esp
.text:00002664                 mov     edx, [ebp+var_24]
.text:00002667                 push    edx
.text:00002668                 lea     eax, [ebp+var_10]
.text:0000266B                 push    eax
.text:0000266C                 mov     ecx, [ebp+arg_0]
.text:0000266F                 mov     edx, [ecx+8]
.text:00002672                 push    edx
.text:00002673                 mov     eax, [ebp+arg_0]
.text:00002676                 mov     ecx, [eax+8]
.text:00002679                 mov     edx, [ecx]
.text:0000267B                 mov     eax, [edx+8]
.text:0000267E                 call    eax
.text:00002680                 add     esp, 0Ch
.text:00002683                 cmp     esi, esp
.text:00002685                 call    __RTC_CheckEsp
.text:0000268A                 mov     ecx, [ebp+arg_0]
.text:0000268D                 mov     dword ptr [ecx+44h], 1
.text:00002694                 xor     eax, eax
.text:00002696                 jmp     loc_2FFC
.text:0000269B ; ---------------------------------------------------------------------------
.text:0000269B
.text:0000269B loc_269B:                               ; CODE XREF: _proxy_socks5_negotiate+2Ej
.text:0000269B                 cmp     [ebp+arg_4], 0
.text:0000269F                 jnz     short loc_26DB
.text:000026A1                 mov     esi, esp
.text:000026A3                 mov     edx, [ebp+arg_0]
.text:000026A6                 mov     eax, [edx+58h]
.text:000026A9                 push    eax
.text:000026AA                 mov     ecx, [ebp+arg_0]
.text:000026AD                 mov     edx, [ecx+54h]
.text:000026B0                 push    edx
.text:000026B1                 mov     eax, [ebp+arg_0]
.text:000026B4                 mov     ecx, [eax+50h]
.text:000026B7                 push    ecx
.text:000026B8                 mov     edx, [ebp+arg_0]
.text:000026BB                 mov     eax, [edx+0Ch]
.text:000026BE                 push    eax
.text:000026BF                 mov     ecx, [ebp+arg_0]
.text:000026C2                 mov     edx, [ecx+0Ch]
.text:000026C5                 mov     eax, [edx]
.text:000026C7                 mov     ecx, [eax+4]
.text:000026CA                 call    ecx
.text:000026CC                 add     esp, 10h
.text:000026CF                 cmp     esi, esp
.text:000026D1                 call    __RTC_CheckEsp
.text:000026D6                 jmp     loc_2FFC
.text:000026DB ; ---------------------------------------------------------------------------
.text:000026DB
.text:000026DB loc_26DB:                               ; CODE XREF: _proxy_socks5_negotiate+F7j
.text:000026DB                 cmp     [ebp+arg_4], 1
.text:000026DF                 jnz     short loc_26E8
.text:000026E1                 xor     eax, eax
.text:000026E3                 jmp     loc_2FFC
.text:000026E8 ; ---------------------------------------------------------------------------
.text:000026E8
.text:000026E8 loc_26E8:                               ; CODE XREF: _proxy_socks5_negotiate+137j
.text:000026E8                 cmp     [ebp+arg_4], 3
.text:000026EC                 jnz     short loc_2721
.text:000026EE                 mov     esi, esp
.text:000026F0                 mov     edx, [ebp+arg_0]
.text:000026F3                 mov     eax, [edx+70h]
.text:000026F6                 push    eax
.text:000026F7                 mov     ecx, [ebp+arg_0]
.text:000026FA                 mov     edx, [ecx+6Ch]
.text:000026FD                 push    edx
.text:000026FE                 mov     eax, [ebp+arg_0]
.text:00002701                 mov     ecx, [eax+0Ch]
.text:00002704                 push    ecx
.text:00002705                 mov     edx, [ebp+arg_0]
.text:00002708                 mov     eax, [edx+0Ch]
.text:0000270B                 mov     ecx, [eax]
.text:0000270D                 mov     edx, [ecx+10h]
.text:00002710                 call    edx
.text:00002712                 add     esp, 0Ch
.text:00002715                 cmp     esi, esp
.text:00002717                 call    __RTC_CheckEsp
.text:0000271C                 jmp     loc_2FFC
.text:00002721 ; ---------------------------------------------------------------------------
.text:00002721
.text:00002721 loc_2721:                               ; CODE XREF: _proxy_socks5_negotiate+144j
.text:00002721                 cmp     [ebp+arg_4], 2
.text:00002725                 jnz     loc_2FCB
.text:0000272B                 mov     eax, [ebp+arg_0]
.text:0000272E                 cmp     dword ptr [eax+44h], 1
.text:00002732                 jnz     loc_2844
.text:00002738                 mov     ecx, [ebp+arg_0]
.text:0000273B                 add     ecx, 34h ; '4'
.text:0000273E                 push    ecx
.text:0000273F                 call    _bufchain_size
.text:00002744                 add     esp, 4
.text:00002747                 cmp     eax, 2
.text:0000274A                 jge     short loc_2756
.text:0000274C                 mov     eax, 1
.text:00002751                 jmp     loc_2FFC
.text:00002756 ; ---------------------------------------------------------------------------
.text:00002756
.text:00002756 loc_2756:                               ; CODE XREF: _proxy_socks5_negotiate+1A2j
.text:00002756                 push    2
.text:00002758                 lea     edx, [ebp+var_30]
.text:0000275B                 push    edx
.text:0000275C                 mov     eax, [ebp+arg_0]
.text:0000275F                 add     eax, 34h ; '4'
.text:00002762                 push    eax
.text:00002763                 call    _bufchain_fetch
.text:00002768                 add     esp, 0Ch
.text:0000276B                 movsx   ecx, [ebp+var_30]
.text:0000276F                 cmp     ecx, 5
.text:00002772                 jz      short loc_27AA
.text:00002774                 mov     esi, esp
.text:00002776                 push    0
.text:00002778                 push    1F40h
.text:0000277D                 push    offset $SG86065 ; "Proxy error: SOCKS proxy returned unexp"...
.text:00002782                 mov     edx, [ebp+arg_0]
.text:00002785                 mov     eax, [edx+0Ch]
.text:00002788                 push    eax
.text:00002789                 mov     ecx, [ebp+arg_0]
.text:0000278C                 mov     edx, [ecx+0Ch]
.text:0000278F                 mov     eax, [edx]
.text:00002791                 mov     ecx, [eax+4]
.text:00002794                 call    ecx
.text:00002796                 add     esp, 10h
.text:00002799                 cmp     esi, esp
.text:0000279B                 call    __RTC_CheckEsp
.text:000027A0                 mov     eax, 1
.text:000027A5                 jmp     loc_2FFC
.text:000027AA ; ---------------------------------------------------------------------------
.text:000027AA
.text:000027AA loc_27AA:                               ; CODE XREF: _proxy_socks5_negotiate+1CAj
.text:000027AA                 movsx   edx, [ebp+var_2F]
.text:000027AE                 test    edx, edx
.text:000027B0                 jnz     short loc_27BE
.text:000027B2                 mov     eax, [ebp+arg_0]
.text:000027B5                 mov     dword ptr [eax+44h], 2
.text:000027BC                 jmp     short loc_2833
.text:000027BE ; ---------------------------------------------------------------------------
.text:000027BE
.text:000027BE loc_27BE:                               ; CODE XREF: _proxy_socks5_negotiate+208j
.text:000027BE                 movsx   ecx, [ebp+var_2F]
.text:000027C2                 cmp     ecx, 1
.text:000027C5                 jnz     short loc_27D3
.text:000027C7                 mov     edx, [ebp+arg_0]
.text:000027CA                 mov     dword ptr [edx+44h], 4
.text:000027D1                 jmp     short loc_2833
.text:000027D3 ; ---------------------------------------------------------------------------
.text:000027D3
.text:000027D3 loc_27D3:                               ; CODE XREF: _proxy_socks5_negotiate+21Dj
.text:000027D3                 movsx   eax, [ebp+var_2F]
.text:000027D7                 cmp     eax, 2
.text:000027DA                 jnz     short loc_27E8
.text:000027DC                 mov     ecx, [ebp+arg_0]
.text:000027DF                 mov     dword ptr [ecx+44h], 5
.text:000027E6                 jmp     short loc_2833
.text:000027E8 ; ---------------------------------------------------------------------------
.text:000027E8
.text:000027E8 loc_27E8:                               ; CODE XREF: _proxy_socks5_negotiate+232j
.text:000027E8                 movsx   edx, [ebp+var_2F]
.text:000027EC                 cmp     edx, 3
.text:000027EF                 jnz     short loc_27FD
.text:000027F1                 mov     eax, [ebp+arg_0]
.text:000027F4                 mov     dword ptr [eax+44h], 6
.text:000027FB                 jmp     short loc_2833
.text:000027FD ; ---------------------------------------------------------------------------
.text:000027FD
.text:000027FD loc_27FD:                               ; CODE XREF: _proxy_socks5_negotiate+247j
.text:000027FD                 mov     esi, esp
.text:000027FF                 push    0
.text:00002801                 push    1F40h
.text:00002806                 push    offset $SG86074 ; "Proxy error: SOCKS proxy did not accept"...
.text:0000280B                 mov     ecx, [ebp+arg_0]
.text:0000280E                 mov     edx, [ecx+0Ch]
.text:00002811                 push    edx
.text:00002812                 mov     eax, [ebp+arg_0]
.text:00002815                 mov     ecx, [eax+0Ch]
.text:00002818                 mov     edx, [ecx]
.text:0000281A                 mov     eax, [edx+4]
.text:0000281D                 call    eax
.text:0000281F                 add     esp, 10h
.text:00002822                 cmp     esi, esp
.text:00002824                 call    __RTC_CheckEsp
.text:00002829                 mov     eax, 1
.text:0000282E                 jmp     loc_2FFC
.text:00002833 ; ---------------------------------------------------------------------------
.text:00002833
.text:00002833 loc_2833:                               ; CODE XREF: _proxy_socks5_negotiate+214j
.text:00002833                                         ; _proxy_socks5_negotiate+229j ...
.text:00002833                 push    2
.text:00002835                 mov     ecx, [ebp+arg_0]
.text:00002838                 add     ecx, 34h ; '4'
.text:0000283B                 push    ecx
.text:0000283C                 call    _bufchain_consume
.text:00002841                 add     esp, 8
.text:00002844
.text:00002844 loc_2844:                               ; CODE XREF: _proxy_socks5_negotiate+18Aj
.text:00002844                 mov     edx, [ebp+arg_0]
.text:00002847                 cmp     dword ptr [edx+44h], 7
.text:0000284B                 jnz     loc_291C
.text:00002851                 mov     eax, [ebp+arg_0]
.text:00002854                 add     eax, 34h ; '4'
.text:00002857                 push    eax
.text:00002858                 call    _bufchain_size
.text:0000285D                 add     esp, 4
.text:00002860                 cmp     eax, 2
.text:00002863                 jge     short loc_286F
.text:00002865                 mov     eax, 1
.text:0000286A                 jmp     loc_2FFC
.text:0000286F ; ---------------------------------------------------------------------------
.text:0000286F
.text:0000286F loc_286F:                               ; CODE XREF: _proxy_socks5_negotiate+2BBj
.text:0000286F                 push    2
.text:00002871                 lea     ecx, [ebp+var_3C]
.text:00002874                 push    ecx
.text:00002875                 mov     edx, [ebp+arg_0]
.text:00002878                 add     edx, 34h ; '4'
.text:0000287B                 push    edx
.text:0000287C                 call    _bufchain_fetch
.text:00002881                 add     esp, 0Ch
.text:00002884                 movsx   eax, [ebp+var_3C]
.text:00002888                 cmp     eax, 1
.text:0000288B                 jz      short loc_28C3
.text:0000288D                 mov     esi, esp
.text:0000288F                 push    0
.text:00002891                 push    1F40h
.text:00002896                 push    offset $SG86079 ; "Proxy error: SOCKS password subnegotiat"...
.text:0000289B                 mov     ecx, [ebp+arg_0]
.text:0000289E                 mov     edx, [ecx+0Ch]
.text:000028A1                 push    edx
.text:000028A2                 mov     eax, [ebp+arg_0]
.text:000028A5                 mov     ecx, [eax+0Ch]
.text:000028A8                 mov     edx, [ecx]
.text:000028AA                 mov     eax, [edx+4]
.text:000028AD                 call    eax
.text:000028AF                 add     esp, 10h
.text:000028B2                 cmp     esi, esp
.text:000028B4                 call    __RTC_CheckEsp
.text:000028B9                 mov     eax, 1
.text:000028BE                 jmp     loc_2FFC
.text:000028C3 ; ---------------------------------------------------------------------------
.text:000028C3
.text:000028C3 loc_28C3:                               ; CODE XREF: _proxy_socks5_negotiate+2E3j
.text:000028C3                 movsx   ecx, [ebp+var_3B]
.text:000028C7                 test    ecx, ecx
.text:000028C9                 jz      short loc_2901
.text:000028CB                 mov     esi, esp
.text:000028CD                 push    0
.text:000028CF                 push    1F40h
.text:000028D4                 push    offset $SG86081 ; "Proxy error: SOCKS proxy refused passwo"...
.text:000028D9                 mov     edx, [ebp+arg_0]
.text:000028DC                 mov     eax, [edx+0Ch]
.text:000028DF                 push    eax
.text:000028E0                 mov     ecx, [ebp+arg_0]
.text:000028E3                 mov     edx, [ecx+0Ch]
.text:000028E6                 mov     eax, [edx]
.text:000028E8                 mov     ecx, [eax+4]
.text:000028EB                 call    ecx
.text:000028ED                 add     esp, 10h
.text:000028F0                 cmp     esi, esp
.text:000028F2                 call    __RTC_CheckEsp
.text:000028F7                 mov     eax, 1
.text:000028FC                 jmp     loc_2FFC
.text:00002901 ; ---------------------------------------------------------------------------
.text:00002901
.text:00002901 loc_2901:                               ; CODE XREF: _proxy_socks5_negotiate+321j
.text:00002901                 push    2
.text:00002903                 mov     edx, [ebp+arg_0]
.text:00002906                 add     edx, 34h ; '4'
.text:00002909                 push    edx
.text:0000290A                 call    _bufchain_consume
.text:0000290F                 add     esp, 8
.text:00002912                 mov     eax, [ebp+arg_0]
.text:00002915                 mov     dword ptr [eax+44h], 2
.text:0000291C
.text:0000291C loc_291C:                               ; CODE XREF: _proxy_socks5_negotiate+2A3j
.text:0000291C                 mov     ecx, [ebp+arg_0]
.text:0000291F                 cmp     dword ptr [ecx+44h], 8
.text:00002923                 jnz     short loc_2942
.text:00002925                 mov     edx, [ebp+arg_0]
.text:00002928                 push    edx
.text:00002929                 call    _proxy_socks5_handlechap
.text:0000292E                 add     esp, 4
.text:00002931                 mov     [ebp+var_44], eax
.text:00002934                 cmp     [ebp+var_44], 0
.text:00002938                 jz      short loc_2942
.text:0000293A                 mov     eax, [ebp+var_44]
.text:0000293D                 jmp     loc_2FFC
.text:00002942 ; ---------------------------------------------------------------------------
.text:00002942
.text:00002942 loc_2942:                               ; CODE XREF: _proxy_socks5_negotiate+37Bj
.text:00002942                                         ; _proxy_socks5_negotiate+390j
.text:00002942                 mov     eax, [ebp+arg_0]
.text:00002945                 cmp     dword ptr [eax+44h], 2
.text:00002949                 jnz     loc_2AC2
.text:0000294F                 mov     ecx, [ebp+arg_0]
.text:00002952                 mov     edx, [ecx+10h]
.text:00002955                 push    edx
.text:00002956                 call    _sk_addrtype
.text:0000295B                 add     esp, 4
.text:0000295E                 mov     [ebp+var_254], eax
.text:00002964                 cmp     [ebp+var_254], 1
.text:0000296B                 jnz     short loc_2999
.text:0000296D                 mov     [ebp+var_250], 0Ah
.text:00002977                 mov     [ebp+var_245], 1
.text:0000297E                 lea     eax, [ebp+var_244]
.text:00002984                 push    eax
.text:00002985                 mov     ecx, [ebp+arg_0]
.text:00002988                 mov     edx, [ecx+10h]
.text:0000298B                 push    edx
.text:0000298C                 call    _sk_addrcopy
.text:00002991                 add     esp, 8
.text:00002994                 jmp     loc_2A32
.text:00002999 ; ---------------------------------------------------------------------------
.text:00002999
.text:00002999 loc_2999:                               ; CODE XREF: _proxy_socks5_negotiate+3C3j
.text:00002999                 cmp     [ebp+var_254], 2
.text:000029A0                 jnz     short loc_29CB
.text:000029A2                 mov     [ebp+var_250], 16h
.text:000029AC                 mov     [ebp+var_245], 4
.text:000029B3                 lea     eax, [ebp+var_244]
.text:000029B9                 push    eax
.text:000029BA                 mov     ecx, [ebp+arg_0]
.text:000029BD                 mov     edx, [ecx+10h]
.text:000029C0                 push    edx
.text:000029C1                 call    _sk_addrcopy
.text:000029C6                 add     esp, 8
.text:000029C9                 jmp     short loc_2A32
.text:000029CB ; ---------------------------------------------------------------------------
.text:000029CB
.text:000029CB loc_29CB:                               ; CODE XREF: _proxy_socks5_negotiate+3F8j
.text:000029CB                 cmp     [ebp+var_254], 3
.text:000029D2                 jz      short loc_29EB
.text:000029D4                 push    42Eh            ; Line
.text:000029D9                 push    offset $SG86094 ; "..\\..\\..\\proxy.c"
.text:000029DE                 push    offset $SG86095 ; "type == ADDRTYPE_NAME"
.text:000029E3                 call    __wassert
.text:000029E8 ; ---------------------------------------------------------------------------
.text:000029E8                 add     esp, 0Ch
.text:000029EB
.text:000029EB loc_29EB:                               ; CODE XREF: _proxy_socks5_negotiate+42Aj
.text:000029EB                 mov     [ebp+var_245], 3
.text:000029F2                 push    100h
.text:000029F7                 lea     ecx, [ebp+Str]
.text:000029FD                 push    ecx
.text:000029FE                 mov     edx, [ebp+arg_0]
.text:00002A01                 mov     eax, [edx+10h]
.text:00002A04                 push    eax
.text:00002A05                 call    _sk_getaddr
.text:00002A0A                 add     esp, 0Ch
.text:00002A0D                 lea     ecx, [ebp+Str]
.text:00002A13                 push    ecx             ; Str
.text:00002A14                 call    _strlen
.text:00002A19                 add     esp, 4
.text:00002A1C                 mov     [ebp+var_244], al
.text:00002A22                 movsx   edx, [ebp+var_244]
.text:00002A29                 add     edx, 7
.text:00002A2C                 mov     [ebp+var_250], edx
.text:00002A32
.text:00002A32 loc_2A32:                               ; CODE XREF: _proxy_socks5_negotiate+3ECj
.text:00002A32                                         ; _proxy_socks5_negotiate+421j
.text:00002A32                 mov     [ebp+var_248], 5
.text:00002A39                 mov     [ebp+var_247], 1
.text:00002A40                 mov     [ebp+var_246], 0
.text:00002A47                 mov     eax, [ebp+arg_0]
.text:00002A4A                 mov     ecx, [eax+14h]
.text:00002A4D                 sar     ecx, 8
.text:00002A50                 movsx   edx, cl
.text:00002A53                 and     edx, 0FFh
.text:00002A59                 mov     eax, [ebp+var_250]
.text:00002A5F                 mov     [ebp+eax+var_24A], dl
.text:00002A66                 mov     ecx, [ebp+arg_0]
.text:00002A69                 movsx   edx, byte ptr [ecx+14h]
.text:00002A6D                 and     edx, 0FFh
.text:00002A73                 mov     eax, [ebp+var_250]
.text:00002A79                 mov     [ebp+eax+var_249], dl
.text:00002A80                 mov     esi, esp
.text:00002A82                 mov     ecx, [ebp+var_250]
.text:00002A88                 push    ecx
.text:00002A89                 lea     edx, [ebp+var_248]
.text:00002A8F                 push    edx
.text:00002A90                 mov     eax, [ebp+arg_0]
.text:00002A93                 mov     ecx, [eax+8]
.text:00002A96                 push    ecx
.text:00002A97                 mov     edx, [ebp+arg_0]
.text:00002A9A                 mov     eax, [edx+8]
.text:00002A9D                 mov     ecx, [eax]
.text:00002A9F                 mov     edx, [ecx+8]
.text:00002AA2                 call    edx
.text:00002AA4                 add     esp, 0Ch
.text:00002AA7                 cmp     esi, esp
.text:00002AA9                 call    __RTC_CheckEsp
.text:00002AAE                 mov     eax, [ebp+arg_0]
.text:00002AB1                 mov     dword ptr [eax+44h], 3
.text:00002AB8                 mov     eax, 1
.text:00002ABD                 jmp     loc_2FFC
.text:00002AC2 ; ---------------------------------------------------------------------------
.text:00002AC2
.text:00002AC2 loc_2AC2:                               ; CODE XREF: _proxy_socks5_negotiate+3A1j
.text:00002AC2                 mov     ecx, [ebp+arg_0]
.text:00002AC5                 cmp     dword ptr [ecx+44h], 3
.text:00002AC9                 jnz     loc_2DAD
.text:00002ACF                 mov     edx, [ebp+arg_0]
.text:00002AD2                 add     edx, 34h ; '4'
.text:00002AD5                 push    edx
.text:00002AD6                 call    _bufchain_size
.text:00002ADB                 add     esp, 4
.text:00002ADE                 cmp     eax, 5
.text:00002AE1                 jge     short loc_2AED
.text:00002AE3                 mov     eax, 1
.text:00002AE8                 jmp     loc_2FFC
.text:00002AED ; ---------------------------------------------------------------------------
.text:00002AED
.text:00002AED loc_2AED:                               ; CODE XREF: _proxy_socks5_negotiate+539j
.text:00002AED                 push    5
.text:00002AEF                 lea     eax, [ebp+var_260]
.text:00002AF5                 push    eax
.text:00002AF6                 mov     ecx, [ebp+arg_0]
.text:00002AF9                 add     ecx, 34h ; '4'
.text:00002AFC                 push    ecx
.text:00002AFD                 call    _bufchain_fetch
.text:00002B02                 add     esp, 0Ch
.text:00002B05                 movsx   edx, [ebp+var_260]
.text:00002B0C                 cmp     edx, 5
.text:00002B0F                 jz      short loc_2B47
.text:00002B11                 mov     esi, esp
.text:00002B13                 push    0
.text:00002B15                 push    1F40h
.text:00002B1A                 push    offset $SG86103 ; "Proxy error: SOCKS proxy returned wrong"...
.text:00002B1F                 mov     eax, [ebp+arg_0]
.text:00002B22                 mov     ecx, [eax+0Ch]
.text:00002B25                 push    ecx
.text:00002B26                 mov     edx, [ebp+arg_0]
.text:00002B29                 mov     eax, [edx+0Ch]
.text:00002B2C                 mov     ecx, [eax]
.text:00002B2E                 mov     edx, [ecx+4]
.text:00002B31                 call    edx
.text:00002B33                 add     esp, 10h
.text:00002B36                 cmp     esi, esp
.text:00002B38                 call    __RTC_CheckEsp
.text:00002B3D                 mov     eax, 1
.text:00002B42                 jmp     loc_2FFC
.text:00002B47 ; ---------------------------------------------------------------------------
.text:00002B47
.text:00002B47 loc_2B47:                               ; CODE XREF: _proxy_socks5_negotiate+567j
.text:00002B47                 movsx   eax, [ebp+var_25F]
.text:00002B4E                 test    eax, eax
.text:00002B50                 jz      loc_2CC0
.text:00002B56                 push    offset $SG86106 ; "Proxy error: "
.text:00002B5B                 lea     ecx, [ebp+Dest]
.text:00002B61                 push    ecx             ; Dest
.text:00002B62                 call    _strcpy
.text:00002B67                 add     esp, 8
.text:00002B6A                 movsx   edx, [ebp+var_25F]
.text:00002B71                 mov     [ebp+var_594], edx
.text:00002B77                 mov     eax, [ebp+var_594]
.text:00002B7D                 sub     eax, 1
.text:00002B80                 mov     [ebp+var_594], eax
.text:00002B86                 cmp     [ebp+var_594], 7 ; switch 8 cases
.text:00002B8D                 ja      loc_2C5C        ; jumptable 00002B99 default case
.text:00002B93                 mov     ecx, [ebp+var_594]
.text:00002B99                 jmp     ds:$LN77[ecx*4] ; switch jump
.text:00002BA0 ; ---------------------------------------------------------------------------
.text:00002BA0
.text:00002BA0 $LN27:                                  ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002BA0                                         ; DATA XREF: .text:$LN77o
.text:00002BA0                 push    offset $SG86112 ; jumptable 00002B99 case 0
.text:00002BA5                 lea     edx, [ebp+Dest]
.text:00002BAB                 push    edx             ; Dest
.text:00002BAC                 call    _strcat
.text:00002BB1                 add     esp, 8
.text:00002BB4                 jmp     loc_2C88
.text:00002BB9 ; ---------------------------------------------------------------------------
.text:00002BB9
.text:00002BB9 $LN26_0:                                ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002BB9                                         ; DATA XREF: .text:$LN77o
.text:00002BB9                 push    offset $SG86114 ; jumptable 00002B99 case 1
.text:00002BBE                 lea     eax, [ebp+Dest]
.text:00002BC4                 push    eax             ; Dest
.text:00002BC5                 call    _strcat
.text:00002BCA                 add     esp, 8
.text:00002BCD                 jmp     loc_2C88
.text:00002BD2 ; ---------------------------------------------------------------------------
.text:00002BD2
.text:00002BD2 $LN25_0:                                ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002BD2                                         ; DATA XREF: .text:$LN77o
.text:00002BD2                 push    offset $SG86116 ; jumptable 00002B99 case 2
.text:00002BD7                 lea     ecx, [ebp+Dest]
.text:00002BDD                 push    ecx             ; Dest
.text:00002BDE                 call    _strcat
.text:00002BE3                 add     esp, 8
.text:00002BE6                 jmp     loc_2C88
.text:00002BEB ; ---------------------------------------------------------------------------
.text:00002BEB
.text:00002BEB $LN24_0:                                ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002BEB                                         ; DATA XREF: .text:$LN77o
.text:00002BEB                 push    offset $SG86118 ; jumptable 00002B99 case 3
.text:00002BF0                 lea     edx, [ebp+Dest]
.text:00002BF6                 push    edx             ; Dest
.text:00002BF7                 call    _strcat
.text:00002BFC                 add     esp, 8
.text:00002BFF                 jmp     loc_2C88
.text:00002C04 ; ---------------------------------------------------------------------------
.text:00002C04
.text:00002C04 $LN23_0:                                ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002C04                                         ; DATA XREF: .text:$LN77o
.text:00002C04                 push    offset $SG86120 ; jumptable 00002B99 case 4
.text:00002C09                 lea     eax, [ebp+Dest]
.text:00002C0F                 push    eax             ; Dest
.text:00002C10                 call    _strcat
.text:00002C15                 add     esp, 8
.text:00002C18                 jmp     short loc_2C88
.text:00002C1A ; ---------------------------------------------------------------------------
.text:00002C1A
.text:00002C1A $LN22_0:                                ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002C1A                                         ; DATA XREF: .text:$LN77o
.text:00002C1A                 push    offset $SG86122 ; jumptable 00002B99 case 5
.text:00002C1F                 lea     ecx, [ebp+Dest]
.text:00002C25                 push    ecx             ; Dest
.text:00002C26                 call    _strcat
.text:00002C2B                 add     esp, 8
.text:00002C2E                 jmp     short loc_2C88
.text:00002C30 ; ---------------------------------------------------------------------------
.text:00002C30
.text:00002C30 $LN21:                                  ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002C30                                         ; DATA XREF: .text:$LN77o
.text:00002C30                 push    offset $SG86124 ; jumptable 00002B99 case 6
.text:00002C35                 lea     edx, [ebp+Dest]
.text:00002C3B                 push    edx             ; Dest
.text:00002C3C                 call    _strcat
.text:00002C41                 add     esp, 8
.text:00002C44                 jmp     short loc_2C88
.text:00002C46 ; ---------------------------------------------------------------------------
.text:00002C46
.text:00002C46 $LN20:                                  ; CODE XREF: _proxy_socks5_negotiate+5F1j
.text:00002C46                                         ; DATA XREF: .text:$LN77o
.text:00002C46                 push    offset $SG86126 ; jumptable 00002B99 case 7
.text:00002C4B                 lea     eax, [ebp+Dest]
.text:00002C51                 push    eax             ; Dest
.text:00002C52                 call    _strcat
.text:00002C57                 add     esp, 8
.text:00002C5A                 jmp     short loc_2C88
.text:00002C5C ; ---------------------------------------------------------------------------
.text:00002C5C
.text:00002C5C loc_2C5C:                               ; CODE XREF: _proxy_socks5_negotiate+5E5j
.text:00002C5C                 movsx   ecx, [ebp+var_25F] ; jumptable 00002B99 default case
.text:00002C63                 push    ecx
.text:00002C64                 push    offset $SG86128 ; "Unrecognised SOCKS error code %d"
.text:00002C69                 lea     edx, [ebp+Dest]
.text:00002C6F                 push    edx             ; Str
.text:00002C70                 call    _strlen
.text:00002C75                 add     esp, 4
.text:00002C78                 lea     eax, [ebp+eax+Dest]
.text:00002C7F                 push    eax             ; Dest
.text:00002C80                 call    _sprintf
.text:00002C85                 add     esp, 0Ch
.text:00002C88
.text:00002C88 loc_2C88:                               ; CODE XREF: _proxy_socks5_negotiate+60Cj
.text:00002C88                                         ; _proxy_socks5_negotiate+625j ...
.text:00002C88                 mov     esi, esp
.text:00002C8A                 push    0
.text:00002C8C                 push    1F40h
.text:00002C91                 lea     ecx, [ebp+Dest]
.text:00002C97                 push    ecx
.text:00002C98                 mov     edx, [ebp+arg_0]
.text:00002C9B                 mov     eax, [edx+0Ch]
.text:00002C9E                 push    eax
.text:00002C9F                 mov     ecx, [ebp+arg_0]
.text:00002CA2                 mov     edx, [ecx+0Ch]
.text:00002CA5                 mov     eax, [edx]
.text:00002CA7                 mov     ecx, [eax+4]
.text:00002CAA                 call    ecx
.text:00002CAC                 add     esp, 10h
.text:00002CAF                 cmp     esi, esp
.text:00002CB1                 call    __RTC_CheckEsp
.text:00002CB6                 mov     eax, 1
.text:00002CBB                 jmp     loc_2FFC
.text:00002CC0 ; ---------------------------------------------------------------------------
.text:00002CC0
.text:00002CC0 loc_2CC0:                               ; CODE XREF: _proxy_socks5_negotiate+5A8j
.text:00002CC0                 mov     [ebp+var_268], 6
.text:00002CCA                 mov     dl, [ebp+var_25D]
.text:00002CD0                 mov     [ebp+var_598], dl
.text:00002CD6                 cmp     [ebp+var_598], 1
.text:00002CDD                 jz      short loc_2CF3
.text:00002CDF                 cmp     [ebp+var_598], 3
.text:00002CE6                 jz      short loc_2D15
.text:00002CE8                 cmp     [ebp+var_598], 4
.text:00002CEF                 jz      short loc_2D04
.text:00002CF1                 jmp     short loc_2D2A
.text:00002CF3 ; ---------------------------------------------------------------------------
.text:00002CF3
.text:00002CF3 loc_2CF3:                               ; CODE XREF: _proxy_socks5_negotiate+735j
.text:00002CF3                 mov     eax, [ebp+var_268]
.text:00002CF9                 add     eax, 4
.text:00002CFC                 mov     [ebp+var_268], eax
.text:00002D02                 jmp     short loc_2D60
.text:00002D04 ; ---------------------------------------------------------------------------
.text:00002D04
.text:00002D04 loc_2D04:                               ; CODE XREF: _proxy_socks5_negotiate+747j
.text:00002D04                 mov     ecx, [ebp+var_268]
.text:00002D0A                 add     ecx, 10h
.text:00002D0D                 mov     [ebp+var_268], ecx
.text:00002D13                 jmp     short loc_2D60
.text:00002D15 ; ---------------------------------------------------------------------------
.text:00002D15
.text:00002D15 loc_2D15:                               ; CODE XREF: _proxy_socks5_negotiate+73Ej
.text:00002D15                 movzx   edx, [ebp+var_25C]
.text:00002D1C                 add     edx, [ebp+var_268]
.text:00002D22                 mov     [ebp+var_268], edx
.text:00002D28                 jmp     short loc_2D60
.text:00002D2A ; ---------------------------------------------------------------------------
.text:00002D2A
.text:00002D2A loc_2D2A:                               ; CODE XREF: _proxy_socks5_negotiate+749j
.text:00002D2A                 mov     esi, esp
.text:00002D2C                 push    0
.text:00002D2E                 push    1F40h
.text:00002D33                 push    offset $SG86138 ; "Proxy error: SOCKS proxy returned unrec"...
.text:00002D38                 mov     eax, [ebp+arg_0]
.text:00002D3B                 mov     ecx, [eax+0Ch]
.text:00002D3E                 push    ecx
.text:00002D3F                 mov     edx, [ebp+arg_0]
.text:00002D42                 mov     eax, [edx+0Ch]
.text:00002D45                 mov     ecx, [eax]
.text:00002D47                 mov     edx, [ecx+4]
.text:00002D4A                 call    edx
.text:00002D4C                 add     esp, 10h
.text:00002D4F                 cmp     esi, esp
.text:00002D51                 call    __RTC_CheckEsp
.text:00002D56                 mov     eax, 1
.text:00002D5B                 jmp     loc_2FFC
.text:00002D60 ; ---------------------------------------------------------------------------
.text:00002D60
.text:00002D60 loc_2D60:                               ; CODE XREF: _proxy_socks5_negotiate+75Aj
.text:00002D60                                         ; _proxy_socks5_negotiate+76Bj ...
.text:00002D60                 mov     eax, [ebp+arg_0]
.text:00002D63                 add     eax, 34h ; '4'
.text:00002D66                 push    eax
.text:00002D67                 call    _bufchain_size
.text:00002D6C                 add     esp, 4
.text:00002D6F                 cmp     eax, [ebp+var_268]
.text:00002D75                 jge     short loc_2D81
.text:00002D77                 mov     eax, 1
.text:00002D7C                 jmp     loc_2FFC
.text:00002D81 ; ---------------------------------------------------------------------------
.text:00002D81
.text:00002D81 loc_2D81:                               ; CODE XREF: _proxy_socks5_negotiate+7CDj
.text:00002D81                 mov     ecx, [ebp+var_268]
.text:00002D87                 push    ecx
.text:00002D88                 mov     edx, [ebp+arg_0]
.text:00002D8B                 add     edx, 34h ; '4'
.text:00002D8E                 push    edx
.text:00002D8F                 call    _bufchain_consume
.text:00002D94                 add     esp, 8
.text:00002D97                 mov     eax, [ebp+arg_0]
.text:00002D9A                 push    eax
.text:00002D9B                 call    _proxy_activate
.text:00002DA0                 add     esp, 4
.text:00002DA3                 mov     eax, 1
.text:00002DA8                 jmp     loc_2FFC
.text:00002DAD ; ---------------------------------------------------------------------------
.text:00002DAD
.text:00002DAD loc_2DAD:                               ; CODE XREF: _proxy_socks5_negotiate+521j
.text:00002DAD                 mov     ecx, [ebp+arg_0]
.text:00002DB0                 cmp     dword ptr [ecx+44h], 4
.text:00002DB4                 jnz     short loc_2DEC
.text:00002DB6                 mov     esi, esp
.text:00002DB8                 push    0
.text:00002DBA                 push    1F40h
.text:00002DBF                 push    offset $SG86141 ; "Proxy error: We don't support GSSAPI au"...
.text:00002DC4                 mov     edx, [ebp+arg_0]
.text:00002DC7                 mov     eax, [edx+0Ch]
.text:00002DCA                 push    eax
.text:00002DCB                 mov     ecx, [ebp+arg_0]
.text:00002DCE                 mov     edx, [ecx+0Ch]
.text:00002DD1                 mov     eax, [edx]
.text:00002DD3                 mov     ecx, [eax+4]
.text:00002DD6                 call    ecx
.text:00002DD8                 add     esp, 10h
.text:00002DDB                 cmp     esi, esp
.text:00002DDD                 call    __RTC_CheckEsp
.text:00002DE2                 mov     eax, 1
.text:00002DE7                 jmp     loc_2FFC
.text:00002DEC ; ---------------------------------------------------------------------------
.text:00002DEC
.text:00002DEC loc_2DEC:                               ; CODE XREF: _proxy_socks5_negotiate+80Cj
.text:00002DEC                 mov     edx, [ebp+arg_0]
.text:00002DEF                 cmp     dword ptr [edx+44h], 5
.text:00002DF3                 jnz     loc_2F9F
.text:00002DF9                 push    10h
.text:00002DFB                 mov     eax, [ebp+arg_0]
.text:00002DFE                 mov     ecx, [eax+74h]
.text:00002E01                 push    ecx
.text:00002E02                 call    _conf_get_str
.text:00002E07                 add     esp, 8
.text:00002E0A                 mov     [ebp+var_374], eax
.text:00002E10                 push    11h
.text:00002E12                 mov     edx, [ebp+arg_0]
.text:00002E15                 mov     eax, [edx+74h]
.text:00002E18                 push    eax
.text:00002E19                 call    _conf_get_str
.text:00002E1E                 add     esp, 8
.text:00002E21                 mov     [ebp+var_378], eax
.text:00002E27                 mov     ecx, [ebp+var_374]
.text:00002E2D                 movsx   edx, byte ptr [ecx]
.text:00002E30                 test    edx, edx
.text:00002E32                 jnz     short loc_2E45
.text:00002E34                 mov     eax, [ebp+var_378]
.text:00002E3A                 movsx   ecx, byte ptr [eax]
.text:00002E3D                 test    ecx, ecx
.text:00002E3F                 jz      loc_2F6C
.text:00002E45
.text:00002E45 loc_2E45:                               ; CODE XREF: _proxy_socks5_negotiate+88Aj
.text:00002E45                 mov     edx, [ebp+var_374]
.text:00002E4B                 push    edx             ; Str
.text:00002E4C                 call    _strlen
.text:00002E51                 add     esp, 4
.text:00002E54                 mov     [ebp+Size], eax
.text:00002E5A                 cmp     [ebp+Size], 0FFh
.text:00002E64                 jle     short loc_2E70
.text:00002E66                 mov     [ebp+Size], 0FFh
.text:00002E70
.text:00002E70 loc_2E70:                               ; CODE XREF: _proxy_socks5_negotiate+8BCj
.text:00002E70                 cmp     [ebp+Size], 1
.text:00002E77                 jge     short loc_2E83
.text:00002E79                 mov     [ebp+Size], 1
.text:00002E83
.text:00002E83 loc_2E83:                               ; CODE XREF: _proxy_socks5_negotiate+8CFj
.text:00002E83                 mov     eax, [ebp+var_378]
.text:00002E89                 push    eax             ; Str
.text:00002E8A                 call    _strlen
.text:00002E8F                 add     esp, 4
.text:00002E92                 mov     [ebp+var_58C], eax
.text:00002E98                 cmp     [ebp+var_58C], 0FFh
.text:00002EA2                 jle     short loc_2EAE
.text:00002EA4                 mov     [ebp+var_58C], 0FFh
.text:00002EAE
.text:00002EAE loc_2EAE:                               ; CODE XREF: _proxy_socks5_negotiate+8FAj
.text:00002EAE                 cmp     [ebp+var_58C], 1
.text:00002EB5                 jge     short loc_2EC1
.text:00002EB7                 mov     [ebp+var_58C], 1
.text:00002EC1
.text:00002EC1 loc_2EC1:                               ; CODE XREF: _proxy_socks5_negotiate+90Dj
.text:00002EC1                 mov     [ebp+var_580], 1
.text:00002EC8                 mov     cl, byte ptr [ebp+Size]
.text:00002ECE                 mov     [ebp+var_57F], cl
.text:00002ED4                 mov     edx, [ebp+Size]
.text:00002EDA                 push    edx             ; Size
.text:00002EDB                 mov     eax, [ebp+var_374]
.text:00002EE1                 push    eax             ; Src
.text:00002EE2                 lea     ecx, [ebp+Dst]
.text:00002EE8                 push    ecx             ; Dst
.text:00002EE9                 call    _memcpy
.text:00002EEE                 add     esp, 0Ch
.text:00002EF1                 mov     edx, [ebp+Size]
.text:00002EF7                 mov     al, byte ptr [ebp+var_58C]
.text:00002EFD                 mov     [ebp+edx+Dst], al
.text:00002F04                 mov     ecx, [ebp+var_58C]
.text:00002F0A                 push    ecx             ; Size
.text:00002F0B                 mov     edx, [ebp+var_378]
.text:00002F11                 push    edx             ; Src
.text:00002F12                 mov     eax, [ebp+Size]
.text:00002F18                 lea     ecx, [ebp+eax+var_57D]
.text:00002F1F                 push    ecx             ; Dst
.text:00002F20                 call    _memcpy
.text:00002F25                 add     esp, 0Ch
.text:00002F28                 mov     edx, [ebp+var_58C]
.text:00002F2E                 mov     eax, [ebp+Size]
.text:00002F34                 lea     ecx, [eax+edx+3]
.text:00002F38                 mov     esi, esp
.text:00002F3A                 push    ecx
.text:00002F3B                 lea     edx, [ebp+var_580]
.text:00002F41                 push    edx
.text:00002F42                 mov     eax, [ebp+arg_0]
.text:00002F45                 mov     ecx, [eax+8]
.text:00002F48                 push    ecx
.text:00002F49                 mov     edx, [ebp+arg_0]
.text:00002F4C                 mov     eax, [edx+8]
.text:00002F4F                 mov     ecx, [eax]
.text:00002F51                 mov     edx, [ecx+8]
.text:00002F54                 call    edx
.text:00002F56                 add     esp, 0Ch
.text:00002F59                 cmp     esi, esp
.text:00002F5B                 call    __RTC_CheckEsp
.text:00002F60                 mov     eax, [ebp+arg_0]
.text:00002F63                 mov     dword ptr [eax+44h], 7
.text:00002F6A                 jmp     short loc_2F98
.text:00002F6C ; ---------------------------------------------------------------------------
.text:00002F6C
.text:00002F6C loc_2F6C:                               ; CODE XREF: _proxy_socks5_negotiate+897j
.text:00002F6C                 mov     esi, esp
.text:00002F6E                 push    0
.text:00002F70                 push    1F40h
.text:00002F75                 push    offset $SG86155 ; "Proxy error: Server chose username/pass"...
.text:00002F7A                 mov     ecx, [ebp+arg_0]
.text:00002F7D                 mov     edx, [ecx+0Ch]
.text:00002F80                 push    edx
.text:00002F81                 mov     eax, [ebp+arg_0]
.text:00002F84                 mov     ecx, [eax+0Ch]
.text:00002F87                 mov     edx, [ecx]
.text:00002F89                 mov     eax, [edx+4]
.text:00002F8C                 call    eax
.text:00002F8E                 add     esp, 10h
.text:00002F91                 cmp     esi, esp
.text:00002F93                 call    __RTC_CheckEsp
.text:00002F98
.text:00002F98 loc_2F98:                               ; CODE XREF: _proxy_socks5_negotiate+9C2j
.text:00002F98                 mov     eax, 1
.text:00002F9D                 jmp     short loc_2FFC
.text:00002F9F ; ---------------------------------------------------------------------------
.text:00002F9F
.text:00002F9F loc_2F9F:                               ; CODE XREF: _proxy_socks5_negotiate+84Bj
.text:00002F9F                 mov     ecx, [ebp+arg_0]
.text:00002FA2                 cmp     dword ptr [ecx+44h], 6
.text:00002FA6                 jnz     short loc_2FCB
.text:00002FA8                 mov     edx, [ebp+arg_0]
.text:00002FAB                 push    edx
.text:00002FAC                 call    _proxy_socks5_selectchap
.text:00002FB1                 add     esp, 4
.text:00002FB4                 mov     [ebp+var_590], eax
.text:00002FBA                 cmp     [ebp+var_590], 0
.text:00002FC1                 jz      short loc_2FCB
.text:00002FC3                 mov     eax, [ebp+var_590]
.text:00002FC9                 jmp     short loc_2FFC
.text:00002FCB ; ---------------------------------------------------------------------------
.text:00002FCB
.text:00002FCB loc_2FCB:                               ; CODE XREF: _proxy_socks5_negotiate+17Dj
.text:00002FCB                                         ; _proxy_socks5_negotiate+9FEj ...
.text:00002FCB                 mov     esi, esp
.text:00002FCD                 push    0
.text:00002FCF                 push    1F41h
.text:00002FD4                 push    offset $SG86159 ; "Proxy error: Unexpected proxy error"
.text:00002FD9                 mov     eax, [ebp+arg_0]
.text:00002FDC                 mov     ecx, [eax+0Ch]
.text:00002FDF                 push    ecx
.text:00002FE0                 mov     edx, [ebp+arg_0]
.text:00002FE3                 mov     eax, [edx+0Ch]
.text:00002FE6                 mov     ecx, [eax]
.text:00002FE8                 mov     edx, [ecx+4]
.text:00002FEB                 call    edx
.text:00002FED                 add     esp, 10h
.text:00002FF0                 cmp     esi, esp
.text:00002FF2                 call    __RTC_CheckEsp
.text:00002FF7                 mov     eax, 1
.text:00002FFC
.text:00002FFC loc_2FFC:                               ; CODE XREF: _proxy_socks5_negotiate+EEj
.text:00002FFC                                         ; _proxy_socks5_negotiate+12Ej ...
.text:00002FFC                 push    edx
.text:00002FFD                 mov     ecx, ebp
.text:00002FFF                 push    eax
.text:00003000                 lea     edx, $LN76
.text:00003006                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000300B                 pop     eax
.text:0000300C                 pop     edx
.text:0000300D                 pop     edi
.text:0000300E                 pop     esi
.text:0000300F                 mov     ecx, [ebp+var_4]
.text:00003012                 xor     ecx, ebp
.text:00003014                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003019                 add     esp, 598h
.text:0000301F                 cmp     ebp, esp
.text:00003021                 call    __RTC_CheckEsp
.text:00003026                 mov     esp, ebp
.text:00003028                 pop     ebp
.text:00003029                 retn
.text:00003029 _proxy_socks5_negotiate endp
.text:00003029
.text:00003029 ; ---------------------------------------------------------------------------
.text:0000302A                 align 4
.text:0000302C $LN76           dd 8                    ; DATA XREF: _proxy_socks5_negotiate+A58o
.text:00003030                 dd offset $LN75
.text:00003034 $LN75           dd 0FFFFFFF0h, 5        ; DATA XREF: .text:00003030o
.text:0000303C                 dd offset $LN67         ; "command"
.text:00003040                 dd 0FFFFFFDCh, 4
.text:00003048                 dd offset $LN68         ; "len"
.text:0000304C                 dd 0FFFFFFD0h, 2
.text:00003054                 dd offset $LN69         ; "data"
.text:00003058                 dd 0FFFFFFC4h, 2
.text:00003060                 dd offset $LN70         ; "data"
.text:00003064                 dd 0FFFFFDB8h, 200h
.text:0000306C                 dd offset $LN71         ; "command"
.text:00003070                 dd 0FFFFFDA0h, 5
.text:00003078                 dd offset $LN72         ; "data"
.text:0000307C                 dd 0FFFFFC94h, 100h
.text:00003084                 dd offset $LN73         ; "buf"
.text:00003088                 dd 0FFFFFA80h, 201h
.text:00003090                 dd offset $LN74         ; "userpwbuf"
.text:00003094 $LN74           db 'userpwbuf',0        ; DATA XREF: .text:00003090o
.text:0000309E $LN73           db 'buf',0              ; DATA XREF: .text:00003084o
.text:000030A2 $LN72           db 'data',0             ; DATA XREF: .text:00003078o
.text:000030A7 $LN71           db 'command',0          ; DATA XREF: .text:0000306Co
.text:000030AF $LN70           db 'data',0             ; DATA XREF: .text:00003060o
.text:000030B4 $LN69           db 'data',0             ; DATA XREF: .text:00003054o
.text:000030B9 $LN68           db 'len',0              ; DATA XREF: .text:00003048o
.text:000030BD $LN67           db 'command',0          ; DATA XREF: .text:0000303Co
.text:000030C5                 align 4
.text:000030C8 $LN77           dd offset $LN27         ; DATA XREF: _proxy_socks5_negotiate+5F1r
.text:000030C8                 dd offset $LN26_0       ; jump table for switch statement
.text:000030C8                 dd offset $LN25_0
.text:000030C8                 dd offset $LN24_0
.text:000030C8                 dd offset $LN23_0
.text:000030C8                 dd offset $LN22_0
.text:000030C8                 dd offset $LN21
.text:000030C8                 dd offset $LN20
.text:000030E8
.text:000030E8 ; =============== S U B R O U T I N E =======================================
.text:000030E8
.text:000030E8 ; Attributes: bp-based frame
.text:000030E8
.text:000030E8                 public _format_telnet_command
.text:000030E8 _format_telnet_command proc near        ; CODE XREF: _proxy_telnet_negotiate+2Ap
.text:000030E8
.text:000030E8 var_2A4         = dword ptr -2A4h
.text:000030E8 var_2A0         = dword ptr -2A0h
.text:000030E8 Src             = byte ptr -298h
.text:000030E8 var_260         = dword ptr -260h
.text:000030E8 var_25C         = dword ptr -25Ch
.text:000030E8 var_258         = dword ptr -258h
.text:000030E8 var_254         = dword ptr -254h
.text:000030E8 var_250         = dword ptr -250h
.text:000030E8 var_24C         = dword ptr -24Ch
.text:000030E8 var_248         = dword ptr -248h
.text:000030E8 var_241         = byte ptr -241h
.text:000030E8 Dest            = byte ptr -23Ch
.text:000030E8 Size            = dword ptr -230h
.text:000030E8 Str             = byte ptr -228h
.text:000030E8 var_24          = dword ptr -24h
.text:000030E8 var_1D          = byte ptr -1Dh
.text:000030E8 var_1C          = dword ptr -1Ch
.text:000030E8 var_18          = dword ptr -18h
.text:000030E8 var_14          = dword ptr -14h
.text:000030E8 var_10          = dword ptr -10h
.text:000030E8 var_C           = dword ptr -0Ch
.text:000030E8 var_8           = dword ptr -8
.text:000030E8 var_4           = dword ptr -4
.text:000030E8 arg_0           = dword ptr  8
.text:000030E8 arg_4           = dword ptr  0Ch
.text:000030E8 arg_8           = dword ptr  10h
.text:000030E8
.text:000030E8                 push    ebp
.text:000030E9                 mov     ebp, esp
.text:000030EB                 sub     esp, 2A4h
.text:000030F1                 push    edi
.text:000030F2                 lea     edi, [ebp+var_2A4]
.text:000030F8                 mov     ecx, 0A9h ; '¬'
.text:000030FD                 mov     eax, 0CCCCCCCCh
.text:00003102                 rep stosd
.text:00003104                 mov     eax, dword ptr ds:___security_cookie
.text:00003109                 xor     eax, ebp
.text:0000310B                 mov     [ebp+var_4], eax
.text:0000310E                 push    12h
.text:00003110                 mov     eax, [ebp+arg_8]
.text:00003113                 push    eax
.text:00003114                 call    _conf_get_str
.text:00003119                 add     esp, 8
.text:0000311C                 mov     [ebp+var_8], eax
.text:0000311F                 mov     [ebp+var_C], 0
.text:00003126                 mov     [ebp+var_10], 0
.text:0000312D                 mov     [ebp+var_14], 0
.text:00003134                 mov     [ebp+var_18], 0
.text:0000313B                 mov     [ebp+var_1C], 0
.text:00003142
.text:00003142 loc_3142:                               ; CODE XREF: _format_telnet_command+9EBj
.text:00003142                 mov     ecx, [ebp+var_8]
.text:00003145                 add     ecx, [ebp+var_1C]
.text:00003148                 movsx   edx, byte ptr [ecx]
.text:0000314B                 test    edx, edx
.text:0000314D                 jz      loc_3AD8
.text:00003153
.text:00003153 loc_3153:                               ; CODE XREF: _format_telnet_command+9Dj
.text:00003153                 mov     eax, [ebp+var_8]
.text:00003156                 add     eax, [ebp+var_1C]
.text:00003159                 movsx   ecx, byte ptr [eax]
.text:0000315C                 test    ecx, ecx
.text:0000315E                 jz      short loc_3187
.text:00003160                 mov     edx, [ebp+var_8]
.text:00003163                 add     edx, [ebp+var_1C]
.text:00003166                 movsx   eax, byte ptr [edx]
.text:00003169                 cmp     eax, 25h ; '%'
.text:0000316C                 jz      short loc_3187
.text:0000316E                 mov     ecx, [ebp+var_8]
.text:00003171                 add     ecx, [ebp+var_1C]
.text:00003174                 movsx   edx, byte ptr [ecx]
.text:00003177                 cmp     edx, 5Ch ; '\'
.text:0000317A                 jz      short loc_3187
.text:0000317C                 mov     eax, [ebp+var_1C]
.text:0000317F                 add     eax, 1
.text:00003182                 mov     [ebp+var_1C], eax
.text:00003185                 jmp     short loc_3153
.text:00003187 ; ---------------------------------------------------------------------------
.text:00003187
.text:00003187 loc_3187:                               ; CODE XREF: _format_telnet_command+76j
.text:00003187                                         ; _format_telnet_command+84j ...
.text:00003187                 mov     ecx, [ebp+var_8]
.text:0000318A                 add     ecx, [ebp+var_1C]
.text:0000318D                 movsx   edx, byte ptr [ecx]
.text:00003190                 test    edx, edx
.text:00003192                 jnz     short loc_3199
.text:00003194                 jmp     loc_3AD8
.text:00003199 ; ---------------------------------------------------------------------------
.text:00003199
.text:00003199 loc_3199:                               ; CODE XREF: _format_telnet_command+AAj
.text:00003199                 mov     eax, [ebp+var_1C]
.text:0000319C                 cmp     eax, [ebp+var_18]
.text:0000319F                 jz      short loc_3203
.text:000031A1
.text:000031A1 loc_31A1:                               ; CODE XREF: _format_telnet_command+F0j
.text:000031A1                 mov     ecx, [ebp+var_10]
.text:000031A4                 add     ecx, [ebp+var_1C]
.text:000031A7                 sub     ecx, [ebp+var_18]
.text:000031AA                 cmp     [ebp+var_14], ecx
.text:000031AD                 jge     short loc_31D6
.text:000031AF                 mov     edx, [ebp+var_10]
.text:000031B2                 add     edx, [ebp+var_1C]
.text:000031B5                 sub     edx, [ebp+var_18]
.text:000031B8                 add     edx, 200h
.text:000031BE                 mov     [ebp+var_14], edx
.text:000031C1                 push    1
.text:000031C3                 mov     eax, [ebp+var_14]
.text:000031C6                 push    eax
.text:000031C7                 mov     ecx, [ebp+var_C]
.text:000031CA                 push    ecx
.text:000031CB                 call    _saferealloc
.text:000031D0                 add     esp, 0Ch
.text:000031D3                 mov     [ebp+var_C], eax
.text:000031D6
.text:000031D6 loc_31D6:                               ; CODE XREF: _format_telnet_command+C5j
.text:000031D6                 xor     edx, edx
.text:000031D8                 jnz     short loc_31A1
.text:000031DA                 mov     eax, [ebp+var_1C]
.text:000031DD                 sub     eax, [ebp+var_18]
.text:000031E0                 push    eax             ; Size
.text:000031E1                 mov     ecx, [ebp+var_8]
.text:000031E4                 add     ecx, [ebp+var_18]
.text:000031E7                 push    ecx             ; Src
.text:000031E8                 mov     edx, [ebp+var_C]
.text:000031EB                 add     edx, [ebp+var_10]
.text:000031EE                 push    edx             ; Dst
.text:000031EF                 call    _memcpy
.text:000031F4                 add     esp, 0Ch
.text:000031F7                 mov     eax, [ebp+var_1C]
.text:000031FA                 sub     eax, [ebp+var_18]
.text:000031FD                 add     eax, [ebp+var_10]
.text:00003200                 mov     [ebp+var_10], eax
.text:00003203
.text:00003203 loc_3203:                               ; CODE XREF: _format_telnet_command+B7j
.text:00003203                 mov     ecx, [ebp+var_1C]
.text:00003206                 mov     [ebp+var_18], ecx
.text:00003209                 mov     edx, [ebp+var_1C]
.text:0000320C                 add     edx, 1
.text:0000320F                 mov     [ebp+var_1C], edx
.text:00003212                 mov     eax, [ebp+var_8]
.text:00003215                 add     eax, [ebp+var_1C]
.text:00003218                 movsx   ecx, byte ptr [eax]
.text:0000321B                 test    ecx, ecx
.text:0000321D                 jnz     short loc_3224
.text:0000321F                 jmp     loc_3AD8
.text:00003224 ; ---------------------------------------------------------------------------
.text:00003224
.text:00003224 loc_3224:                               ; CODE XREF: _format_telnet_command+135j
.text:00003224                 mov     edx, [ebp+var_8]
.text:00003227                 add     edx, [ebp+var_18]
.text:0000322A                 movsx   eax, byte ptr [edx]
.text:0000322D                 cmp     eax, 5Ch ; '\'
.text:00003230                 jnz     loc_35C9
.text:00003236                 mov     ecx, [ebp+var_8]
.text:00003239                 add     ecx, [ebp+var_1C]
.text:0000323C                 movsx   edx, byte ptr [ecx]
.text:0000323F                 mov     [ebp+var_2A4], edx
.text:00003245                 mov     eax, [ebp+var_2A4]
.text:0000324B                 sub     eax, 25h ; '%'
.text:0000324E                 mov     [ebp+var_2A4], eax
.text:00003254                 cmp     [ebp+var_2A4], 53h ; 'S' ; switch 84 cases
.text:0000325B                 ja      $LN60           ; jumptable 0000326E default case
.text:00003261                 mov     ecx, [ebp+var_2A4]
.text:00003267                 movzx   edx, ds:$LN121[ecx]
.text:0000326E                 jmp     ds:$LN127[edx*4] ; switch jump
.text:00003275 ; ---------------------------------------------------------------------------
.text:00003275
.text:00003275 $LN103:                                 ; CODE XREF: _format_telnet_command+186j
.text:00003275                                         ; _format_telnet_command+1BBj
.text:00003275                                         ; DATA XREF: ...
.text:00003275                 mov     eax, [ebp+var_10] ; jumptable 0000326E case 55
.text:00003278                 add     eax, 1
.text:0000327B                 cmp     [ebp+var_14], eax
.text:0000327E                 jge     short loc_32A1
.text:00003280                 mov     ecx, [ebp+var_10]
.text:00003283                 add     ecx, 201h
.text:00003289                 mov     [ebp+var_14], ecx
.text:0000328C                 push    1
.text:0000328E                 mov     edx, [ebp+var_14]
.text:00003291                 push    edx
.text:00003292                 mov     eax, [ebp+var_C]
.text:00003295                 push    eax
.text:00003296                 call    _saferealloc
.text:0000329B                 add     esp, 0Ch
.text:0000329E                 mov     [ebp+var_C], eax
.text:000032A1
.text:000032A1 loc_32A1:                               ; CODE XREF: _format_telnet_command+196j
.text:000032A1                 xor     ecx, ecx
.text:000032A3                 jnz     short $LN103    ; jumptable 0000326E case 55
.text:000032A5                 mov     edx, [ebp+var_C]
.text:000032A8                 add     edx, [ebp+var_10]
.text:000032AB                 mov     byte ptr [edx], 5Ch ; '\'
.text:000032AE                 mov     eax, [ebp+var_10]
.text:000032B1                 add     eax, 1
.text:000032B4                 mov     [ebp+var_10], eax
.text:000032B7                 mov     ecx, [ebp+var_1C]
.text:000032BA                 add     ecx, 1
.text:000032BD                 mov     [ebp+var_1C], ecx
.text:000032C0                 jmp     loc_35C4
.text:000032C5 ; ---------------------------------------------------------------------------
.text:000032C5
.text:000032C5 $LN98:                                  ; CODE XREF: _format_telnet_command+186j
.text:000032C5                                         ; _format_telnet_command+20Aj
.text:000032C5                                         ; DATA XREF: ...
.text:000032C5                 mov     edx, [ebp+var_10] ; jumptable 0000326E case 0
.text:000032C8                 add     edx, 1
.text:000032CB                 cmp     [ebp+var_14], edx
.text:000032CE                 jge     short loc_32F0
.text:000032D0                 mov     eax, [ebp+var_10]
.text:000032D3                 add     eax, 201h
.text:000032D8                 mov     [ebp+var_14], eax
.text:000032DB                 push    1
.text:000032DD                 mov     ecx, [ebp+var_14]
.text:000032E0                 push    ecx
.text:000032E1                 mov     edx, [ebp+var_C]
.text:000032E4                 push    edx
.text:000032E5                 call    _saferealloc
.text:000032EA                 add     esp, 0Ch
.text:000032ED                 mov     [ebp+var_C], eax
.text:000032F0
.text:000032F0 loc_32F0:                               ; CODE XREF: _format_telnet_command+1E6j
.text:000032F0                 xor     eax, eax
.text:000032F2                 jnz     short $LN98     ; jumptable 0000326E case 0
.text:000032F4                 mov     ecx, [ebp+var_C]
.text:000032F7                 add     ecx, [ebp+var_10]
.text:000032FA                 mov     byte ptr [ecx], 25h ; '%'
.text:000032FD                 mov     edx, [ebp+var_10]
.text:00003300                 add     edx, 1
.text:00003303                 mov     [ebp+var_10], edx
.text:00003306                 mov     eax, [ebp+var_1C]
.text:00003309                 add     eax, 1
.text:0000330C                 mov     [ebp+var_1C], eax
.text:0000330F                 jmp     loc_35C4
.text:00003314 ; ---------------------------------------------------------------------------
.text:00003314
.text:00003314 $LN93:                                  ; CODE XREF: _format_telnet_command+186j
.text:00003314                                         ; _format_telnet_command+25Aj
.text:00003314                                         ; DATA XREF: ...
.text:00003314                 mov     ecx, [ebp+var_10] ; jumptable 0000326E case 77
.text:00003317                 add     ecx, 1
.text:0000331A                 cmp     [ebp+var_14], ecx
.text:0000331D                 jge     short loc_3340
.text:0000331F                 mov     edx, [ebp+var_10]
.text:00003322                 add     edx, 201h
.text:00003328                 mov     [ebp+var_14], edx
.text:0000332B                 push    1
.text:0000332D                 mov     eax, [ebp+var_14]
.text:00003330                 push    eax
.text:00003331                 mov     ecx, [ebp+var_C]
.text:00003334                 push    ecx
.text:00003335                 call    _saferealloc
.text:0000333A                 add     esp, 0Ch
.text:0000333D                 mov     [ebp+var_C], eax
.text:00003340
.text:00003340 loc_3340:                               ; CODE XREF: _format_telnet_command+235j
.text:00003340                 xor     edx, edx
.text:00003342                 jnz     short $LN93     ; jumptable 0000326E case 77
.text:00003344                 mov     eax, [ebp+var_C]
.text:00003347                 add     eax, [ebp+var_10]
.text:0000334A                 mov     byte ptr [eax], 0Dh
.text:0000334D                 mov     ecx, [ebp+var_10]
.text:00003350                 add     ecx, 1
.text:00003353                 mov     [ebp+var_10], ecx
.text:00003356                 mov     edx, [ebp+var_1C]
.text:00003359                 add     edx, 1
.text:0000335C                 mov     [ebp+var_1C], edx
.text:0000335F                 jmp     loc_35C4
.text:00003364 ; ---------------------------------------------------------------------------
.text:00003364
.text:00003364 $LN88:                                  ; CODE XREF: _format_telnet_command+186j
.text:00003364                                         ; _format_telnet_command+2AAj
.text:00003364                                         ; DATA XREF: ...
.text:00003364                 mov     eax, [ebp+var_10] ; jumptable 0000326E case 73
.text:00003367                 add     eax, 1
.text:0000336A                 cmp     [ebp+var_14], eax
.text:0000336D                 jge     short loc_3390
.text:0000336F                 mov     ecx, [ebp+var_10]
.text:00003372                 add     ecx, 201h
.text:00003378                 mov     [ebp+var_14], ecx
.text:0000337B                 push    1
.text:0000337D                 mov     edx, [ebp+var_14]
.text:00003380                 push    edx
.text:00003381                 mov     eax, [ebp+var_C]
.text:00003384                 push    eax
.text:00003385                 call    _saferealloc
.text:0000338A                 add     esp, 0Ch
.text:0000338D                 mov     [ebp+var_C], eax
.text:00003390
.text:00003390 loc_3390:                               ; CODE XREF: _format_telnet_command+285j
.text:00003390                 xor     ecx, ecx
.text:00003392                 jnz     short $LN88     ; jumptable 0000326E case 73
.text:00003394                 mov     edx, [ebp+var_C]
.text:00003397                 add     edx, [ebp+var_10]
.text:0000339A                 mov     byte ptr [edx], 0Ah
.text:0000339D                 mov     eax, [ebp+var_10]
.text:000033A0                 add     eax, 1
.text:000033A3                 mov     [ebp+var_10], eax
.text:000033A6                 mov     ecx, [ebp+var_1C]
.text:000033A9                 add     ecx, 1
.text:000033AC                 mov     [ebp+var_1C], ecx
.text:000033AF                 jmp     loc_35C4
.text:000033B4 ; ---------------------------------------------------------------------------
.text:000033B4
.text:000033B4 $LN83:                                  ; CODE XREF: _format_telnet_command+186j
.text:000033B4                                         ; _format_telnet_command+2F9j
.text:000033B4                                         ; DATA XREF: ...
.text:000033B4                 mov     edx, [ebp+var_10] ; jumptable 0000326E case 79
.text:000033B7                 add     edx, 1
.text:000033BA                 cmp     [ebp+var_14], edx
.text:000033BD                 jge     short loc_33DF
.text:000033BF                 mov     eax, [ebp+var_10]
.text:000033C2                 add     eax, 201h
.text:000033C7                 mov     [ebp+var_14], eax
.text:000033CA                 push    1
.text:000033CC                 mov     ecx, [ebp+var_14]
.text:000033CF                 push    ecx
.text:000033D0                 mov     edx, [ebp+var_C]
.text:000033D3                 push    edx
.text:000033D4                 call    _saferealloc
.text:000033D9                 add     esp, 0Ch
.text:000033DC                 mov     [ebp+var_C], eax
.text:000033DF
.text:000033DF loc_33DF:                               ; CODE XREF: _format_telnet_command+2D5j
.text:000033DF                 xor     eax, eax
.text:000033E1                 jnz     short $LN83     ; jumptable 0000326E case 79
.text:000033E3                 mov     ecx, [ebp+var_C]
.text:000033E6                 add     ecx, [ebp+var_10]
.text:000033E9                 mov     byte ptr [ecx], 9
.text:000033EC                 mov     edx, [ebp+var_10]
.text:000033EF                 add     edx, 1
.text:000033F2                 mov     [ebp+var_10], edx
.text:000033F5                 mov     eax, [ebp+var_1C]
.text:000033F8                 add     eax, 1
.text:000033FB                 mov     [ebp+var_1C], eax
.text:000033FE                 jmp     loc_35C4
.text:00003403 ; ---------------------------------------------------------------------------
.text:00003403
.text:00003403 $LN79:                                  ; CODE XREF: _format_telnet_command+186j
.text:00003403                                         ; DATA XREF: .text:$LN127o
.text:00003403                 mov     [ebp+var_1D], 0 ; jumptable 0000326E cases 51,83
.text:00003407                 mov     [ebp+var_24], 0
.text:0000340E
.text:0000340E loc_340E:                               ; CODE XREF: _format_telnet_command+47Bj
.text:0000340E                 mov     ecx, [ebp+var_1C]
.text:00003411                 add     ecx, 1
.text:00003414                 mov     [ebp+var_1C], ecx
.text:00003417                 mov     edx, [ebp+var_8]
.text:0000341A                 add     edx, [ebp+var_1C]
.text:0000341D                 movsx   eax, byte ptr [edx]
.text:00003420                 cmp     eax, 30h ; '0'
.text:00003423                 jl      short loc_344C
.text:00003425                 mov     ecx, [ebp+var_8]
.text:00003428                 add     ecx, [ebp+var_1C]
.text:0000342B                 movsx   edx, byte ptr [ecx]
.text:0000342E                 cmp     edx, 39h ; '9'
.text:00003431                 jg      short loc_344C
.text:00003433                 mov     eax, [ebp+var_8]
.text:00003436                 add     eax, [ebp+var_1C]
.text:00003439                 movsx   ecx, byte ptr [eax]
.text:0000343C                 movzx   edx, [ebp+var_1D]
.text:00003440                 lea     eax, [edx+ecx-30h]
.text:00003444                 mov     [ebp+var_1D], al
.text:00003447                 jmp     loc_34FC
.text:0000344C ; ---------------------------------------------------------------------------
.text:0000344C
.text:0000344C loc_344C:                               ; CODE XREF: _format_telnet_command+33Bj
.text:0000344C                                         ; _format_telnet_command+349j
.text:0000344C                 mov     ecx, [ebp+var_8]
.text:0000344F                 add     ecx, [ebp+var_1C]
.text:00003452                 movsx   edx, byte ptr [ecx]
.text:00003455                 cmp     edx, 61h ; 'a'
.text:00003458                 jl      short loc_347E
.text:0000345A                 mov     eax, [ebp+var_8]
.text:0000345D                 add     eax, [ebp+var_1C]
.text:00003460                 movsx   ecx, byte ptr [eax]
.text:00003463                 cmp     ecx, 66h ; 'f'
.text:00003466                 jg      short loc_347E
.text:00003468                 mov     edx, [ebp+var_8]
.text:0000346B                 add     edx, [ebp+var_1C]
.text:0000346E                 movsx   eax, byte ptr [edx]
.text:00003471                 movzx   ecx, [ebp+var_1D]
.text:00003475                 lea     edx, [ecx+eax-57h]
.text:00003479                 mov     [ebp+var_1D], dl
.text:0000347C                 jmp     short loc_34FC
.text:0000347E ; ---------------------------------------------------------------------------
.text:0000347E
.text:0000347E loc_347E:                               ; CODE XREF: _format_telnet_command+370j
.text:0000347E                                         ; _format_telnet_command+37Ej
.text:0000347E                 mov     eax, [ebp+var_8]
.text:00003481                 add     eax, [ebp+var_1C]
.text:00003484                 movsx   ecx, byte ptr [eax]
.text:00003487                 cmp     ecx, 41h ; 'A'
.text:0000348A                 jl      short loc_34B0
.text:0000348C                 mov     edx, [ebp+var_8]
.text:0000348F                 add     edx, [ebp+var_1C]
.text:00003492                 movsx   eax, byte ptr [edx]
.text:00003495                 cmp     eax, 46h ; 'F'
.text:00003498                 jg      short loc_34B0
.text:0000349A                 mov     ecx, [ebp+var_8]
.text:0000349D                 add     ecx, [ebp+var_1C]
.text:000034A0                 movsx   edx, byte ptr [ecx]
.text:000034A3                 movzx   eax, [ebp+var_1D]
.text:000034A7                 lea     ecx, [eax+edx-37h]
.text:000034AB                 mov     [ebp+var_1D], cl
.text:000034AE                 jmp     short loc_34FC
.text:000034B0 ; ---------------------------------------------------------------------------
.text:000034B0
.text:000034B0 loc_34B0:                               ; CODE XREF: _format_telnet_command+3A2j
.text:000034B0                                         ; _format_telnet_command+3B0j ...
.text:000034B0                 mov     edx, [ebp+var_10]
.text:000034B3                 add     edx, 1
.text:000034B6                 cmp     [ebp+var_14], edx
.text:000034B9                 jge     short loc_34DB
.text:000034BB                 mov     eax, [ebp+var_10]
.text:000034BE                 add     eax, 201h
.text:000034C3                 mov     [ebp+var_14], eax
.text:000034C6                 push    1
.text:000034C8                 mov     ecx, [ebp+var_14]
.text:000034CB                 push    ecx
.text:000034CC                 mov     edx, [ebp+var_C]
.text:000034CF                 push    edx
.text:000034D0                 call    _saferealloc
.text:000034D5                 add     esp, 0Ch
.text:000034D8                 mov     [ebp+var_C], eax
.text:000034DB
.text:000034DB loc_34DB:                               ; CODE XREF: _format_telnet_command+3D1j
.text:000034DB                 xor     eax, eax
.text:000034DD                 jnz     short loc_34B0
.text:000034DF                 mov     ecx, [ebp+var_C]
.text:000034E2                 add     ecx, [ebp+var_10]
.text:000034E5                 mov     byte ptr [ecx], 5Ch ; '\'
.text:000034E8                 mov     edx, [ebp+var_10]
.text:000034EB                 add     edx, 1
.text:000034EE                 mov     [ebp+var_10], edx
.text:000034F1                 mov     eax, [ebp+var_18]
.text:000034F4                 add     eax, 1
.text:000034F7                 mov     [ebp+var_1C], eax
.text:000034FA                 jmp     short loc_3568
.text:000034FC ; ---------------------------------------------------------------------------
.text:000034FC
.text:000034FC loc_34FC:                               ; CODE XREF: _format_telnet_command+35Fj
.text:000034FC                                         ; _format_telnet_command+394j ...
.text:000034FC                 cmp     [ebp+var_24], 1
.text:00003500                 jnz     short loc_3551
.text:00003502
.text:00003502 loc_3502:                               ; CODE XREF: _format_telnet_command+448j
.text:00003502                 mov     ecx, [ebp+var_10]
.text:00003505                 add     ecx, 1
.text:00003508                 cmp     [ebp+var_14], ecx
.text:0000350B                 jge     short loc_352E
.text:0000350D                 mov     edx, [ebp+var_10]
.text:00003510                 add     edx, 201h
.text:00003516                 mov     [ebp+var_14], edx
.text:00003519                 push    1
.text:0000351B                 mov     eax, [ebp+var_14]
.text:0000351E                 push    eax
.text:0000351F                 mov     ecx, [ebp+var_C]
.text:00003522                 push    ecx
.text:00003523                 call    _saferealloc
.text:00003528                 add     esp, 0Ch
.text:0000352B                 mov     [ebp+var_C], eax
.text:0000352E
.text:0000352E loc_352E:                               ; CODE XREF: _format_telnet_command+423j
.text:0000352E                 xor     edx, edx
.text:00003530                 jnz     short loc_3502
.text:00003532                 mov     eax, [ebp+var_C]
.text:00003535                 add     eax, [ebp+var_10]
.text:00003538                 mov     cl, [ebp+var_1D]
.text:0000353B                 mov     [eax], cl
.text:0000353D                 mov     edx, [ebp+var_10]
.text:00003540                 add     edx, 1
.text:00003543                 mov     [ebp+var_10], edx
.text:00003546                 mov     eax, [ebp+var_1C]
.text:00003549                 add     eax, 1
.text:0000354C                 mov     [ebp+var_1C], eax
.text:0000354F                 jmp     short loc_3568
.text:00003551 ; ---------------------------------------------------------------------------
.text:00003551
.text:00003551 loc_3551:                               ; CODE XREF: _format_telnet_command+418j
.text:00003551                 mov     ecx, [ebp+var_24]
.text:00003554                 add     ecx, 1
.text:00003557                 mov     [ebp+var_24], ecx
.text:0000355A                 mov     dl, [ebp+var_1D]
.text:0000355D                 shl     dl, 4
.text:00003560                 mov     [ebp+var_1D], dl
.text:00003563                 jmp     loc_340E
.text:00003568 ; ---------------------------------------------------------------------------
.text:00003568
.text:00003568 loc_3568:                               ; CODE XREF: _format_telnet_command+412j
.text:00003568                                         ; _format_telnet_command+467j
.text:00003568                 jmp     short loc_35C4
.text:0000356A ; ---------------------------------------------------------------------------
.text:0000356A
.text:0000356A $LN60:                                  ; CODE XREF: _format_telnet_command+173j
.text:0000356A                                         ; _format_telnet_command+186j ...
.text:0000356A                 mov     eax, [ebp+var_10] ; jumptable 0000326E default case
.text:0000356D                 add     eax, 2
.text:00003570                 cmp     [ebp+var_14], eax
.text:00003573                 jge     short loc_3596
.text:00003575                 mov     ecx, [ebp+var_10]
.text:00003578                 add     ecx, 202h
.text:0000357E                 mov     [ebp+var_14], ecx
.text:00003581                 push    1
.text:00003583                 mov     edx, [ebp+var_14]
.text:00003586                 push    edx
.text:00003587                 mov     eax, [ebp+var_C]
.text:0000358A                 push    eax
.text:0000358B                 call    _saferealloc
.text:00003590                 add     esp, 0Ch
.text:00003593                 mov     [ebp+var_C], eax
.text:00003596
.text:00003596 loc_3596:                               ; CODE XREF: _format_telnet_command+48Bj
.text:00003596                 xor     ecx, ecx
.text:00003598                 jnz     short $LN60     ; jumptable 0000326E default case
.text:0000359A                 push    2               ; Size
.text:0000359C                 mov     edx, [ebp+var_8]
.text:0000359F                 add     edx, [ebp+var_18]
.text:000035A2                 push    edx             ; Src
.text:000035A3                 mov     eax, [ebp+var_C]
.text:000035A6                 add     eax, [ebp+var_10]
.text:000035A9                 push    eax             ; Dst
.text:000035AA                 call    _memcpy
.text:000035AF                 add     esp, 0Ch
.text:000035B2                 mov     ecx, [ebp+var_10]
.text:000035B5                 add     ecx, 2
.text:000035B8                 mov     [ebp+var_10], ecx
.text:000035BB                 mov     edx, [ebp+var_1C]
.text:000035BE                 add     edx, 1
.text:000035C1                 mov     [ebp+var_1C], edx
.text:000035C4
.text:000035C4 loc_35C4:                               ; CODE XREF: _format_telnet_command+1D8j
.text:000035C4                                         ; _format_telnet_command+227j ...
.text:000035C4                 jmp     loc_3ACD
.text:000035C9 ; ---------------------------------------------------------------------------
.text:000035C9
.text:000035C9 loc_35C9:                               ; CODE XREF: _format_telnet_command+148j
.text:000035C9                 mov     eax, [ebp+var_8]
.text:000035CC                 add     eax, [ebp+var_1C]
.text:000035CF                 movsx   ecx, byte ptr [eax]
.text:000035D2                 cmp     ecx, 25h ; '%'
.text:000035D5                 jnz     short loc_3626
.text:000035D7
.text:000035D7 loc_35D7:                               ; CODE XREF: _format_telnet_command+51Cj
.text:000035D7                 mov     edx, [ebp+var_10]
.text:000035DA                 add     edx, 1
.text:000035DD                 cmp     [ebp+var_14], edx
.text:000035E0                 jge     short loc_3602
.text:000035E2                 mov     eax, [ebp+var_10]
.text:000035E5                 add     eax, 201h
.text:000035EA                 mov     [ebp+var_14], eax
.text:000035ED                 push    1
.text:000035EF                 mov     ecx, [ebp+var_14]
.text:000035F2                 push    ecx
.text:000035F3                 mov     edx, [ebp+var_C]
.text:000035F6                 push    edx
.text:000035F7                 call    _saferealloc
.text:000035FC                 add     esp, 0Ch
.text:000035FF                 mov     [ebp+var_C], eax
.text:00003602
.text:00003602 loc_3602:                               ; CODE XREF: _format_telnet_command+4F8j
.text:00003602                 xor     eax, eax
.text:00003604                 jnz     short loc_35D7
.text:00003606                 mov     ecx, [ebp+var_C]
.text:00003609                 add     ecx, [ebp+var_10]
.text:0000360C                 mov     byte ptr [ecx], 25h ; '%'
.text:0000360F                 mov     edx, [ebp+var_10]
.text:00003612                 add     edx, 1
.text:00003615                 mov     [ebp+var_10], edx
.text:00003618                 mov     eax, [ebp+var_1C]
.text:0000361B                 add     eax, 1
.text:0000361E                 mov     [ebp+var_1C], eax
.text:00003621                 jmp     loc_3ACD
.text:00003626 ; ---------------------------------------------------------------------------
.text:00003626
.text:00003626 loc_3626:                               ; CODE XREF: _format_telnet_command+4EDj
.text:00003626                 push    4               ; MaxCount
.text:00003628                 push    offset $SG86281 ; "host"
.text:0000362D                 mov     ecx, [ebp+var_8]
.text:00003630                 add     ecx, [ebp+var_1C]
.text:00003633                 push    ecx             ; Str1
.text:00003634                 call    _strnicmp
.text:00003639                 add     esp, 0Ch
.text:0000363C                 test    eax, eax
.text:0000363E                 jnz     loc_36E2
.text:00003644                 push    200h
.text:00003649                 lea     edx, [ebp+Str]
.text:0000364F                 push    edx
.text:00003650                 mov     eax, [ebp+arg_0]
.text:00003653                 push    eax
.text:00003654                 call    _sk_getaddr
.text:00003659                 add     esp, 0Ch
.text:0000365C                 lea     ecx, [ebp+Str]
.text:00003662                 push    ecx             ; Str
.text:00003663                 call    _strlen
.text:00003668                 add     esp, 4
.text:0000366B                 mov     [ebp+Size], eax
.text:00003671
.text:00003671 loc_3671:                               ; CODE XREF: _format_telnet_command+5C1j
.text:00003671                 mov     edx, [ebp+var_10]
.text:00003674                 add     edx, [ebp+Size]
.text:0000367A                 cmp     [ebp+var_14], edx
.text:0000367D                 jge     short loc_36A7
.text:0000367F                 mov     eax, [ebp+Size]
.text:00003685                 mov     ecx, [ebp+var_10]
.text:00003688                 lea     edx, [ecx+eax+200h]
.text:0000368F                 mov     [ebp+var_14], edx
.text:00003692                 push    1
.text:00003694                 mov     eax, [ebp+var_14]
.text:00003697                 push    eax
.text:00003698                 mov     ecx, [ebp+var_C]
.text:0000369B                 push    ecx
.text:0000369C                 call    _saferealloc
.text:000036A1                 add     esp, 0Ch
.text:000036A4                 mov     [ebp+var_C], eax
.text:000036A7
.text:000036A7 loc_36A7:                               ; CODE XREF: _format_telnet_command+595j
.text:000036A7                 xor     edx, edx
.text:000036A9                 jnz     short loc_3671
.text:000036AB                 mov     eax, [ebp+Size]
.text:000036B1                 push    eax             ; Size
.text:000036B2                 lea     ecx, [ebp+Str]
.text:000036B8                 push    ecx             ; Src
.text:000036B9                 mov     edx, [ebp+var_C]
.text:000036BC                 add     edx, [ebp+var_10]
.text:000036BF                 push    edx             ; Dst
.text:000036C0                 call    _memcpy
.text:000036C5                 add     esp, 0Ch
.text:000036C8                 mov     eax, [ebp+var_10]
.text:000036CB                 add     eax, [ebp+Size]
.text:000036D1                 mov     [ebp+var_10], eax
.text:000036D4                 mov     ecx, [ebp+var_1C]
.text:000036D7                 add     ecx, 4
.text:000036DA                 mov     [ebp+var_1C], ecx
.text:000036DD                 jmp     loc_3ACD
.text:000036E2 ; ---------------------------------------------------------------------------
.text:000036E2
.text:000036E2 loc_36E2:                               ; CODE XREF: _format_telnet_command+556j
.text:000036E2                 push    4               ; MaxCount
.text:000036E4                 push    offset $SG86293 ; "port"
.text:000036E9                 mov     edx, [ebp+var_8]
.text:000036EC                 add     edx, [ebp+var_1C]
.text:000036EF                 push    edx             ; Str1
.text:000036F0                 call    _strnicmp
.text:000036F5                 add     esp, 0Ch
.text:000036F8                 test    eax, eax
.text:000036FA                 jnz     loc_3793
.text:00003700                 mov     eax, [ebp+arg_4]
.text:00003703                 push    eax
.text:00003704                 push    offset $SG86296 ; "%i"
.text:00003709                 lea     ecx, [ebp+Dest]
.text:0000370F                 push    ecx             ; Dest
.text:00003710                 call    _sprintf
.text:00003715                 add     esp, 0Ch
.text:00003718                 mov     [ebp+var_241], al
.text:0000371E
.text:0000371E loc_371E:                               ; CODE XREF: _format_telnet_command+670j
.text:0000371E                 movsx   edx, [ebp+var_241]
.text:00003725                 add     edx, [ebp+var_10]
.text:00003728                 cmp     [ebp+var_14], edx
.text:0000372B                 jge     short loc_3756
.text:0000372D                 movsx   eax, [ebp+var_241]
.text:00003734                 mov     ecx, [ebp+var_10]
.text:00003737                 lea     edx, [ecx+eax+200h]
.text:0000373E                 mov     [ebp+var_14], edx
.text:00003741                 push    1
.text:00003743                 mov     eax, [ebp+var_14]
.text:00003746                 push    eax
.text:00003747                 mov     ecx, [ebp+var_C]
.text:0000374A                 push    ecx
.text:0000374B                 call    _saferealloc
.text:00003750                 add     esp, 0Ch
.text:00003753                 mov     [ebp+var_C], eax
.text:00003756
.text:00003756 loc_3756:                               ; CODE XREF: _format_telnet_command+643j
.text:00003756                 xor     edx, edx
.text:00003758                 jnz     short loc_371E
.text:0000375A                 movsx   eax, [ebp+var_241]
.text:00003761                 push    eax             ; Size
.text:00003762                 lea     ecx, [ebp+Dest]
.text:00003768                 push    ecx             ; Src
.text:00003769                 mov     edx, [ebp+var_C]
.text:0000376C                 add     edx, [ebp+var_10]
.text:0000376F                 push    edx             ; Dst
.text:00003770                 call    _memcpy
.text:00003775                 add     esp, 0Ch
.text:00003778                 movsx   eax, [ebp+var_241]
.text:0000377F                 add     eax, [ebp+var_10]
.text:00003782                 mov     [ebp+var_10], eax
.text:00003785                 mov     ecx, [ebp+var_1C]
.text:00003788                 add     ecx, 4
.text:0000378B                 mov     [ebp+var_1C], ecx
.text:0000378E                 jmp     loc_3ACD
.text:00003793 ; ---------------------------------------------------------------------------
.text:00003793
.text:00003793 loc_3793:                               ; CODE XREF: _format_telnet_command+612j
.text:00003793                 push    4               ; MaxCount
.text:00003795                 push    offset $SG86306 ; "user"
.text:0000379A                 mov     edx, [ebp+var_8]
.text:0000379D                 add     edx, [ebp+var_1C]
.text:000037A0                 push    edx             ; Str1
.text:000037A1                 call    _strnicmp
.text:000037A6                 add     esp, 0Ch
.text:000037A9                 test    eax, eax
.text:000037AB                 jnz     loc_384B
.text:000037B1                 push    10h
.text:000037B3                 mov     eax, [ebp+arg_8]
.text:000037B6                 push    eax
.text:000037B7                 call    _conf_get_str
.text:000037BC                 add     esp, 8
.text:000037BF                 mov     [ebp+var_248], eax
.text:000037C5                 mov     ecx, [ebp+var_248]
.text:000037CB                 push    ecx             ; Str
.text:000037CC                 call    _strlen
.text:000037D1                 add     esp, 4
.text:000037D4                 mov     [ebp+var_24C], eax
.text:000037DA
.text:000037DA loc_37DA:                               ; CODE XREF: _format_telnet_command+72Aj
.text:000037DA                 mov     edx, [ebp+var_10]
.text:000037DD                 add     edx, [ebp+var_24C]
.text:000037E3                 cmp     [ebp+var_14], edx
.text:000037E6                 jge     short loc_3810
.text:000037E8                 mov     eax, [ebp+var_24C]
.text:000037EE                 mov     ecx, [ebp+var_10]
.text:000037F1                 lea     edx, [ecx+eax+200h]
.text:000037F8                 mov     [ebp+var_14], edx
.text:000037FB                 push    1
.text:000037FD                 mov     eax, [ebp+var_14]
.text:00003800                 push    eax
.text:00003801                 mov     ecx, [ebp+var_C]
.text:00003804                 push    ecx
.text:00003805                 call    _saferealloc
.text:0000380A                 add     esp, 0Ch
.text:0000380D                 mov     [ebp+var_C], eax
.text:00003810
.text:00003810 loc_3810:                               ; CODE XREF: _format_telnet_command+6FEj
.text:00003810                 xor     edx, edx
.text:00003812                 jnz     short loc_37DA
.text:00003814                 mov     eax, [ebp+var_24C]
.text:0000381A                 push    eax             ; Size
.text:0000381B                 mov     ecx, [ebp+var_248]
.text:00003821                 push    ecx             ; Src
.text:00003822                 mov     edx, [ebp+var_C]
.text:00003825                 add     edx, [ebp+var_10]
.text:00003828                 push    edx             ; Dst
.text:00003829                 call    _memcpy
.text:0000382E                 add     esp, 0Ch
.text:00003831                 mov     eax, [ebp+var_10]
.text:00003834                 add     eax, [ebp+var_24C]
.text:0000383A                 mov     [ebp+var_10], eax
.text:0000383D                 mov     ecx, [ebp+var_1C]
.text:00003840                 add     ecx, 4
.text:00003843                 mov     [ebp+var_1C], ecx
.text:00003846                 jmp     loc_3ACD
.text:0000384B ; ---------------------------------------------------------------------------
.text:0000384B
.text:0000384B loc_384B:                               ; CODE XREF: _format_telnet_command+6C3j
.text:0000384B                 push    4               ; MaxCount
.text:0000384D                 push    offset $SG86318 ; "pass"
.text:00003852                 mov     edx, [ebp+var_8]
.text:00003855                 add     edx, [ebp+var_1C]
.text:00003858                 push    edx             ; Str1
.text:00003859                 call    _strnicmp
.text:0000385E                 add     esp, 0Ch
.text:00003861                 test    eax, eax
.text:00003863                 jnz     loc_3903
.text:00003869                 push    11h
.text:0000386B                 mov     eax, [ebp+arg_8]
.text:0000386E                 push    eax
.text:0000386F                 call    _conf_get_str
.text:00003874                 add     esp, 8
.text:00003877                 mov     [ebp+var_250], eax
.text:0000387D                 mov     ecx, [ebp+var_250]
.text:00003883                 push    ecx             ; Str
.text:00003884                 call    _strlen
.text:00003889                 add     esp, 4
.text:0000388C                 mov     [ebp+var_254], eax
.text:00003892
.text:00003892 loc_3892:                               ; CODE XREF: _format_telnet_command+7E2j
.text:00003892                 mov     edx, [ebp+var_10]
.text:00003895                 add     edx, [ebp+var_254]
.text:0000389B                 cmp     [ebp+var_14], edx
.text:0000389E                 jge     short loc_38C8
.text:000038A0                 mov     eax, [ebp+var_254]
.text:000038A6                 mov     ecx, [ebp+var_10]
.text:000038A9                 lea     edx, [ecx+eax+200h]
.text:000038B0                 mov     [ebp+var_14], edx
.text:000038B3                 push    1
.text:000038B5                 mov     eax, [ebp+var_14]
.text:000038B8                 push    eax
.text:000038B9                 mov     ecx, [ebp+var_C]
.text:000038BC                 push    ecx
.text:000038BD                 call    _saferealloc
.text:000038C2                 add     esp, 0Ch
.text:000038C5                 mov     [ebp+var_C], eax
.text:000038C8
.text:000038C8 loc_38C8:                               ; CODE XREF: _format_telnet_command+7B6j
.text:000038C8                 xor     edx, edx
.text:000038CA                 jnz     short loc_3892
.text:000038CC                 mov     eax, [ebp+var_254]
.text:000038D2                 push    eax             ; Size
.text:000038D3                 mov     ecx, [ebp+var_250]
.text:000038D9                 push    ecx             ; Src
.text:000038DA                 mov     edx, [ebp+var_C]
.text:000038DD                 add     edx, [ebp+var_10]
.text:000038E0                 push    edx             ; Dst
.text:000038E1                 call    _memcpy
.text:000038E6                 add     esp, 0Ch
.text:000038E9                 mov     eax, [ebp+var_10]
.text:000038EC                 add     eax, [ebp+var_254]
.text:000038F2                 mov     [ebp+var_10], eax
.text:000038F5                 mov     ecx, [ebp+var_1C]
.text:000038F8                 add     ecx, 4
.text:000038FB                 mov     [ebp+var_1C], ecx
.text:000038FE                 jmp     loc_3ACD
.text:00003903 ; ---------------------------------------------------------------------------
.text:00003903
.text:00003903 loc_3903:                               ; CODE XREF: _format_telnet_command+77Bj
.text:00003903                 push    9               ; MaxCount
.text:00003905                 push    offset $SG86330 ; "proxyhost"
.text:0000390A                 mov     edx, [ebp+var_8]
.text:0000390D                 add     edx, [ebp+var_1C]
.text:00003910                 push    edx             ; Str1
.text:00003911                 call    _strnicmp
.text:00003916                 add     esp, 0Ch
.text:00003919                 test    eax, eax
.text:0000391B                 jnz     loc_39BB
.text:00003921                 push    0Eh
.text:00003923                 mov     eax, [ebp+arg_8]
.text:00003926                 push    eax
.text:00003927                 call    _conf_get_str
.text:0000392C                 add     esp, 8
.text:0000392F                 mov     [ebp+var_258], eax
.text:00003935                 mov     ecx, [ebp+var_258]
.text:0000393B                 push    ecx             ; Str
.text:0000393C                 call    _strlen
.text:00003941                 add     esp, 4
.text:00003944                 mov     [ebp+var_25C], eax
.text:0000394A
.text:0000394A loc_394A:                               ; CODE XREF: _format_telnet_command+89Aj
.text:0000394A                 mov     edx, [ebp+var_10]
.text:0000394D                 add     edx, [ebp+var_25C]
.text:00003953                 cmp     [ebp+var_14], edx
.text:00003956                 jge     short loc_3980
.text:00003958                 mov     eax, [ebp+var_25C]
.text:0000395E                 mov     ecx, [ebp+var_10]
.text:00003961                 lea     edx, [ecx+eax+200h]
.text:00003968                 mov     [ebp+var_14], edx
.text:0000396B                 push    1
.text:0000396D                 mov     eax, [ebp+var_14]
.text:00003970                 push    eax
.text:00003971                 mov     ecx, [ebp+var_C]
.text:00003974                 push    ecx
.text:00003975                 call    _saferealloc
.text:0000397A                 add     esp, 0Ch
.text:0000397D                 mov     [ebp+var_C], eax
.text:00003980
.text:00003980 loc_3980:                               ; CODE XREF: _format_telnet_command+86Ej
.text:00003980                 xor     edx, edx
.text:00003982                 jnz     short loc_394A
.text:00003984                 mov     eax, [ebp+var_25C]
.text:0000398A                 push    eax             ; Size
.text:0000398B                 mov     ecx, [ebp+var_258]
.text:00003991                 push    ecx             ; Src
.text:00003992                 mov     edx, [ebp+var_C]
.text:00003995                 add     edx, [ebp+var_10]
.text:00003998                 push    edx             ; Dst
.text:00003999                 call    _memcpy
.text:0000399E                 add     esp, 0Ch
.text:000039A1                 mov     eax, [ebp+var_10]
.text:000039A4                 add     eax, [ebp+var_25C]
.text:000039AA                 mov     [ebp+var_10], eax
.text:000039AD                 mov     ecx, [ebp+var_1C]
.text:000039B0                 add     ecx, 9
.text:000039B3                 mov     [ebp+var_1C], ecx
.text:000039B6                 jmp     loc_3ACD
.text:000039BB ; ---------------------------------------------------------------------------
.text:000039BB
.text:000039BB loc_39BB:                               ; CODE XREF: _format_telnet_command+833j
.text:000039BB                 push    9               ; MaxCount
.text:000039BD                 push    offset $SG86342 ; "proxyport"
.text:000039C2                 mov     edx, [ebp+var_8]
.text:000039C5                 add     edx, [ebp+var_1C]
.text:000039C8                 push    edx             ; Str1
.text:000039C9                 call    _strnicmp
.text:000039CE                 add     esp, 0Ch
.text:000039D1                 test    eax, eax
.text:000039D3                 jnz     loc_3A8B
.text:000039D9                 push    0Fh
.text:000039DB                 mov     eax, [ebp+arg_8]
.text:000039DE                 push    eax
.text:000039DF                 call    _conf_get_int
.text:000039E4                 add     esp, 8
.text:000039E7                 mov     [ebp+var_260], eax
.text:000039ED                 mov     ecx, [ebp+var_260]
.text:000039F3                 push    ecx
.text:000039F4                 push    offset $SG86346 ; "%d"
.text:000039F9                 lea     edx, [ebp+Src]
.text:000039FF                 push    edx             ; Dest
.text:00003A00                 call    _sprintf
.text:00003A05                 add     esp, 0Ch
.text:00003A08                 lea     eax, [ebp+Src]
.text:00003A0E                 push    eax             ; Str
.text:00003A0F                 call    _strlen
.text:00003A14                 add     esp, 4
.text:00003A17                 mov     [ebp+var_2A0], eax
.text:00003A1D
.text:00003A1D loc_3A1D:                               ; CODE XREF: _format_telnet_command+96Dj
.text:00003A1D                 mov     ecx, [ebp+var_10]
.text:00003A20                 add     ecx, [ebp+var_2A0]
.text:00003A26                 cmp     [ebp+var_14], ecx
.text:00003A29                 jge     short loc_3A53
.text:00003A2B                 mov     edx, [ebp+var_2A0]
.text:00003A31                 mov     eax, [ebp+var_10]
.text:00003A34                 lea     ecx, [eax+edx+200h]
.text:00003A3B                 mov     [ebp+var_14], ecx
.text:00003A3E                 push    1
.text:00003A40                 mov     edx, [ebp+var_14]
.text:00003A43                 push    edx
.text:00003A44                 mov     eax, [ebp+var_C]
.text:00003A47                 push    eax
.text:00003A48                 call    _saferealloc
.text:00003A4D                 add     esp, 0Ch
.text:00003A50                 mov     [ebp+var_C], eax
.text:00003A53
.text:00003A53 loc_3A53:                               ; CODE XREF: _format_telnet_command+941j
.text:00003A53                 xor     ecx, ecx
.text:00003A55                 jnz     short loc_3A1D
.text:00003A57                 mov     edx, [ebp+var_2A0]
.text:00003A5D                 push    edx             ; Size
.text:00003A5E                 lea     eax, [ebp+Src]
.text:00003A64                 push    eax             ; Src
.text:00003A65                 mov     ecx, [ebp+var_C]
.text:00003A68                 add     ecx, [ebp+var_10]
.text:00003A6B                 push    ecx             ; Dst
.text:00003A6C                 call    _memcpy
.text:00003A71                 add     esp, 0Ch
.text:00003A74                 mov     edx, [ebp+var_10]
.text:00003A77                 add     edx, [ebp+var_2A0]
.text:00003A7D                 mov     [ebp+var_10], edx
.text:00003A80                 mov     eax, [ebp+var_1C]
.text:00003A83                 add     eax, 9
.text:00003A86                 mov     [ebp+var_1C], eax
.text:00003A89                 jmp     short loc_3ACD
.text:00003A8B ; ---------------------------------------------------------------------------
.text:00003A8B
.text:00003A8B loc_3A8B:                               ; CODE XREF: _format_telnet_command+8EBj
.text:00003A8B                                         ; _format_telnet_command+9D1j
.text:00003A8B                 mov     ecx, [ebp+var_10]
.text:00003A8E                 add     ecx, 1
.text:00003A91                 cmp     [ebp+var_14], ecx
.text:00003A94                 jge     short loc_3AB7
.text:00003A96                 mov     edx, [ebp+var_10]
.text:00003A99                 add     edx, 201h
.text:00003A9F                 mov     [ebp+var_14], edx
.text:00003AA2                 push    1
.text:00003AA4                 mov     eax, [ebp+var_14]
.text:00003AA7                 push    eax
.text:00003AA8                 mov     ecx, [ebp+var_C]
.text:00003AAB                 push    ecx
.text:00003AAC                 call    _saferealloc
.text:00003AB1                 add     esp, 0Ch
.text:00003AB4                 mov     [ebp+var_C], eax
.text:00003AB7
.text:00003AB7 loc_3AB7:                               ; CODE XREF: _format_telnet_command+9ACj
.text:00003AB7                 xor     edx, edx
.text:00003AB9                 jnz     short loc_3A8B
.text:00003ABB                 mov     eax, [ebp+var_C]
.text:00003ABE                 add     eax, [ebp+var_10]
.text:00003AC1                 mov     byte ptr [eax], 25h ; '%'
.text:00003AC4                 mov     ecx, [ebp+var_10]
.text:00003AC7                 add     ecx, 1
.text:00003ACA                 mov     [ebp+var_10], ecx
.text:00003ACD
.text:00003ACD loc_3ACD:                               ; CODE XREF: _format_telnet_command:loc_35C4j
.text:00003ACD                                         ; _format_telnet_command+539j ...
.text:00003ACD                 mov     edx, [ebp+var_1C]
.text:00003AD0                 mov     [ebp+var_18], edx
.text:00003AD3                 jmp     loc_3142
.text:00003AD8 ; ---------------------------------------------------------------------------
.text:00003AD8
.text:00003AD8 loc_3AD8:                               ; CODE XREF: _format_telnet_command+65j
.text:00003AD8                                         ; _format_telnet_command+ACj ...
.text:00003AD8                 mov     eax, [ebp+var_1C]
.text:00003ADB                 cmp     eax, [ebp+var_18]
.text:00003ADE                 jz      short loc_3B42
.text:00003AE0
.text:00003AE0 loc_3AE0:                               ; CODE XREF: _format_telnet_command+A2Fj
.text:00003AE0                 mov     ecx, [ebp+var_10]
.text:00003AE3                 add     ecx, [ebp+var_1C]
.text:00003AE6                 sub     ecx, [ebp+var_18]
.text:00003AE9                 cmp     [ebp+var_14], ecx
.text:00003AEC                 jge     short loc_3B15
.text:00003AEE                 mov     edx, [ebp+var_10]
.text:00003AF1                 add     edx, [ebp+var_1C]
.text:00003AF4                 sub     edx, [ebp+var_18]
.text:00003AF7                 add     edx, 200h
.text:00003AFD                 mov     [ebp+var_14], edx
.text:00003B00                 push    1
.text:00003B02                 mov     eax, [ebp+var_14]
.text:00003B05                 push    eax
.text:00003B06                 mov     ecx, [ebp+var_C]
.text:00003B09                 push    ecx
.text:00003B0A                 call    _saferealloc
.text:00003B0F                 add     esp, 0Ch
.text:00003B12                 mov     [ebp+var_C], eax
.text:00003B15
.text:00003B15 loc_3B15:                               ; CODE XREF: _format_telnet_command+A04j
.text:00003B15                 xor     edx, edx
.text:00003B17                 jnz     short loc_3AE0
.text:00003B19                 mov     eax, [ebp+var_1C]
.text:00003B1C                 sub     eax, [ebp+var_18]
.text:00003B1F                 push    eax             ; Size
.text:00003B20                 mov     ecx, [ebp+var_8]
.text:00003B23                 add     ecx, [ebp+var_18]
.text:00003B26                 push    ecx             ; Src
.text:00003B27                 mov     edx, [ebp+var_C]
.text:00003B2A                 add     edx, [ebp+var_10]
.text:00003B2D                 push    edx             ; Dst
.text:00003B2E                 call    _memcpy
.text:00003B33                 add     esp, 0Ch
.text:00003B36                 mov     eax, [ebp+var_1C]
.text:00003B39                 sub     eax, [ebp+var_18]
.text:00003B3C                 add     eax, [ebp+var_10]
.text:00003B3F                 mov     [ebp+var_10], eax
.text:00003B42
.text:00003B42 loc_3B42:                               ; CODE XREF: _format_telnet_command+9F6j
.text:00003B42                                         ; _format_telnet_command+A88j
.text:00003B42                 mov     ecx, [ebp+var_10]
.text:00003B45                 add     ecx, 1
.text:00003B48                 cmp     [ebp+var_14], ecx
.text:00003B4B                 jge     short loc_3B6E
.text:00003B4D                 mov     edx, [ebp+var_10]
.text:00003B50                 add     edx, 201h
.text:00003B56                 mov     [ebp+var_14], edx
.text:00003B59                 push    1
.text:00003B5B                 mov     eax, [ebp+var_14]
.text:00003B5E                 push    eax
.text:00003B5F                 mov     ecx, [ebp+var_C]
.text:00003B62                 push    ecx
.text:00003B63                 call    _saferealloc
.text:00003B68                 add     esp, 0Ch
.text:00003B6B                 mov     [ebp+var_C], eax
.text:00003B6E
.text:00003B6E loc_3B6E:                               ; CODE XREF: _format_telnet_command+A63j
.text:00003B6E                 xor     edx, edx
.text:00003B70                 jnz     short loc_3B42
.text:00003B72                 mov     eax, [ebp+var_C]
.text:00003B75                 add     eax, [ebp+var_10]
.text:00003B78                 mov     byte ptr [eax], 0
.text:00003B7B                 mov     eax, [ebp+var_C]
.text:00003B7E                 push    edx
.text:00003B7F                 mov     ecx, ebp
.text:00003B81                 push    eax
.text:00003B82                 lea     edx, $LN126
.text:00003B88                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003B8D                 pop     eax
.text:00003B8E                 pop     edx
.text:00003B8F                 pop     edi
.text:00003B90                 mov     ecx, [ebp+var_4]
.text:00003B93                 xor     ecx, ebp
.text:00003B95                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003B9A                 add     esp, 2A4h
.text:00003BA0                 cmp     ebp, esp
.text:00003BA2                 call    __RTC_CheckEsp
.text:00003BA7                 mov     esp, ebp
.text:00003BA9                 pop     ebp
.text:00003BAA                 retn
.text:00003BAA _format_telnet_command endp
.text:00003BAA
.text:00003BAA ; ---------------------------------------------------------------------------
.text:00003BAB                 align 4
.text:00003BAC $LN126          dd 3                    ; DATA XREF: _format_telnet_command+A9Ao
.text:00003BB0                 dd offset $LN125
.text:00003BB4 $LN125          dd 0FFFFFDD8h, 200h     ; DATA XREF: .text:00003BB0o
.text:00003BBC                 dd offset $LN122        ; "dest"
.text:00003BC0                 dd 0FFFFFDC4h, 8
.text:00003BC8                 dd offset $LN123        ; "portstr"
.text:00003BCC                 dd 0FFFFFD68h, 32h
.text:00003BD4                 dd offset $LN124        ; "pport"
.text:00003BD8 $LN124          db 'pport',0            ; DATA XREF: .text:00003BD4o
.text:00003BDE $LN123          db 'portstr',0          ; DATA XREF: .text:00003BC8o
.text:00003BE6 $LN122          db 'dest',0             ; DATA XREF: .text:00003BBCo
.text:00003BEB                 align 4
.text:00003BEC $LN127          dd offset $LN98, offset $LN79, offset $LN103, offset $LN88
.text:00003BEC                                         ; DATA XREF: _format_telnet_command+186r
.text:00003BEC                 dd offset $LN93, offset $LN83, offset $LN60 ; jump table for switch statement
.text:00003C08 $LN121          db      0,     6,     6,     6
.text:00003C08                                         ; DATA XREF: _format_telnet_command+17Fr
.text:00003C08                 db      6,     6,     6,     6 ; indirect table for switch statement
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     1
.text:00003C08                 db      6,     6,     6,     2
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     6,     6,     6
.text:00003C08                 db      6,     3,     6,     6
.text:00003C08                 db      6,     4,     6,     5
.text:00003C08                 db      6,     6,     6,     1
.text:00003C5C                 db 0Ch dup(0CCh)
.text:00003C68
.text:00003C68 ; =============== S U B R O U T I N E =======================================
.text:00003C68
.text:00003C68 ; Attributes: bp-based frame
.text:00003C68
.text:00003C68                 public _proxy_telnet_negotiate
.text:00003C68 _proxy_telnet_negotiate proc near       ; DATA XREF: _new_connection+1A2o
.text:00003C68
.text:00003C68 Str             = dword ptr -4
.text:00003C68 arg_0           = dword ptr  8
.text:00003C68 arg_4           = dword ptr  0Ch
.text:00003C68
.text:00003C68                 push    ebp
.text:00003C69                 mov     ebp, esp
.text:00003C6B                 push    ecx
.text:00003C6C                 push    esi
.text:00003C6D                 mov     [ebp+Str], 0CCCCCCCCh
.text:00003C74                 mov     eax, [ebp+arg_0]
.text:00003C77                 cmp     dword ptr [eax+44h], 0FFFFFFFFh
.text:00003C7B                 jnz     short loc_3CEB
.text:00003C7D                 mov     ecx, [ebp+arg_0]
.text:00003C80                 mov     edx, [ecx+74h]
.text:00003C83                 push    edx
.text:00003C84                 mov     eax, [ebp+arg_0]
.text:00003C87                 mov     ecx, [eax+14h]
.text:00003C8A                 push    ecx
.text:00003C8B                 mov     edx, [ebp+arg_0]
.text:00003C8E                 mov     eax, [edx+10h]
.text:00003C91                 push    eax
.text:00003C92                 call    _format_telnet_command
.text:00003C97                 add     esp, 0Ch
.text:00003C9A                 mov     [ebp+Str], eax
.text:00003C9D                 mov     ecx, [ebp+Str]
.text:00003CA0                 push    ecx             ; Str
.text:00003CA1                 call    _strlen
.text:00003CA6                 add     esp, 4
.text:00003CA9                 mov     esi, esp
.text:00003CAB                 push    eax
.text:00003CAC                 mov     edx, [ebp+Str]
.text:00003CAF                 push    edx
.text:00003CB0                 mov     eax, [ebp+arg_0]
.text:00003CB3                 mov     ecx, [eax+8]
.text:00003CB6                 push    ecx
.text:00003CB7                 mov     edx, [ebp+arg_0]
.text:00003CBA                 mov     eax, [edx+8]
.text:00003CBD                 mov     ecx, [eax]
.text:00003CBF                 mov     edx, [ecx+8]
.text:00003CC2                 call    edx
.text:00003CC4                 add     esp, 0Ch
.text:00003CC7                 cmp     esi, esp
.text:00003CC9                 call    __RTC_CheckEsp
.text:00003CCE                 mov     eax, [ebp+Str]
.text:00003CD1                 push    eax
.text:00003CD2                 call    _safefree
.text:00003CD7                 add     esp, 4
.text:00003CDA                 mov     ecx, [ebp+arg_0]
.text:00003CDD                 mov     dword ptr [ecx+44h], 1
.text:00003CE4                 xor     eax, eax
.text:00003CE6                 jmp     loc_3DB8
.text:00003CEB ; ---------------------------------------------------------------------------
.text:00003CEB
.text:00003CEB loc_3CEB:                               ; CODE XREF: _proxy_telnet_negotiate+13j
.text:00003CEB                 cmp     [ebp+arg_4], 0
.text:00003CEF                 jnz     short loc_3D2B
.text:00003CF1                 mov     esi, esp
.text:00003CF3                 mov     edx, [ebp+arg_0]
.text:00003CF6                 mov     eax, [edx+58h]
.text:00003CF9                 push    eax
.text:00003CFA                 mov     ecx, [ebp+arg_0]
.text:00003CFD                 mov     edx, [ecx+54h]
.text:00003D00                 push    edx
.text:00003D01                 mov     eax, [ebp+arg_0]
.text:00003D04                 mov     ecx, [eax+50h]
.text:00003D07                 push    ecx
.text:00003D08                 mov     edx, [ebp+arg_0]
.text:00003D0B                 mov     eax, [edx+0Ch]
.text:00003D0E                 push    eax
.text:00003D0F                 mov     ecx, [ebp+arg_0]
.text:00003D12                 mov     edx, [ecx+0Ch]
.text:00003D15                 mov     eax, [edx]
.text:00003D17                 mov     ecx, [eax+4]
.text:00003D1A                 call    ecx
.text:00003D1C                 add     esp, 10h
.text:00003D1F                 cmp     esi, esp
.text:00003D21                 call    __RTC_CheckEsp
.text:00003D26                 jmp     loc_3DB8
.text:00003D2B ; ---------------------------------------------------------------------------
.text:00003D2B
.text:00003D2B loc_3D2B:                               ; CODE XREF: _proxy_telnet_negotiate+87j
.text:00003D2B                 cmp     [ebp+arg_4], 1
.text:00003D2F                 jnz     short loc_3D38
.text:00003D31                 xor     eax, eax
.text:00003D33                 jmp     loc_3DB8
.text:00003D38 ; ---------------------------------------------------------------------------
.text:00003D38
.text:00003D38 loc_3D38:                               ; CODE XREF: _proxy_telnet_negotiate+C7j
.text:00003D38                 cmp     [ebp+arg_4], 3
.text:00003D3C                 jnz     short loc_3D6E
.text:00003D3E                 mov     esi, esp
.text:00003D40                 mov     edx, [ebp+arg_0]
.text:00003D43                 mov     eax, [edx+70h]
.text:00003D46                 push    eax
.text:00003D47                 mov     ecx, [ebp+arg_0]
.text:00003D4A                 mov     edx, [ecx+6Ch]
.text:00003D4D                 push    edx
.text:00003D4E                 mov     eax, [ebp+arg_0]
.text:00003D51                 mov     ecx, [eax+0Ch]
.text:00003D54                 push    ecx
.text:00003D55                 mov     edx, [ebp+arg_0]
.text:00003D58                 mov     eax, [edx+0Ch]
.text:00003D5B                 mov     ecx, [eax]
.text:00003D5D                 mov     edx, [ecx+10h]
.text:00003D60                 call    edx
.text:00003D62                 add     esp, 0Ch
.text:00003D65                 cmp     esi, esp
.text:00003D67                 call    __RTC_CheckEsp
.text:00003D6C                 jmp     short loc_3DB8
.text:00003D6E ; ---------------------------------------------------------------------------
.text:00003D6E
.text:00003D6E loc_3D6E:                               ; CODE XREF: _proxy_telnet_negotiate+D4j
.text:00003D6E                 cmp     [ebp+arg_4], 2
.text:00003D72                 jnz     short loc_3D87
.text:00003D74                 mov     eax, [ebp+arg_0]
.text:00003D77                 push    eax
.text:00003D78                 call    _proxy_activate
.text:00003D7D                 add     esp, 4
.text:00003D80                 mov     eax, 1
.text:00003D85                 jmp     short loc_3DB8
.text:00003D87 ; ---------------------------------------------------------------------------
.text:00003D87
.text:00003D87 loc_3D87:                               ; CODE XREF: _proxy_telnet_negotiate+10Aj
.text:00003D87                 mov     esi, esp
.text:00003D89                 push    0
.text:00003D8B                 push    1F41h
.text:00003D90                 push    offset $SG86388 ; "Proxy error: Unexpected proxy error"
.text:00003D95                 mov     ecx, [ebp+arg_0]
.text:00003D98                 mov     edx, [ecx+0Ch]
.text:00003D9B                 push    edx
.text:00003D9C                 mov     eax, [ebp+arg_0]
.text:00003D9F                 mov     ecx, [eax+0Ch]
.text:00003DA2                 mov     edx, [ecx]
.text:00003DA4                 mov     eax, [edx+4]
.text:00003DA7                 call    eax
.text:00003DA9                 add     esp, 10h
.text:00003DAC                 cmp     esi, esp
.text:00003DAE                 call    __RTC_CheckEsp
.text:00003DB3                 mov     eax, 1
.text:00003DB8
.text:00003DB8 loc_3DB8:                               ; CODE XREF: _proxy_telnet_negotiate+7Ej
.text:00003DB8                                         ; _proxy_telnet_negotiate+BEj ...
.text:00003DB8                 pop     esi
.text:00003DB9                 add     esp, 4
.text:00003DBC                 cmp     ebp, esp
.text:00003DBE                 call    __RTC_CheckEsp
.text:00003DC3                 mov     esp, ebp
.text:00003DC5                 pop     ebp
.text:00003DC6                 retn
.text:00003DC6 _proxy_telnet_negotiate endp
.text:00003DC6
.text:00003DC6 ; ---------------------------------------------------------------------------
.text:00003DC7                 align 4
.text:00003DC7 _text           ends
.text:00003DC7
.rtc$TMZ:00003DC8 ; ===========================================================================
.rtc$TMZ:00003DC8
.rtc$TMZ:00003DC8 ; Segment type: Pure data
.rtc$TMZ:00003DC8 ; Segment permissions: Read
.rtc$TMZ:00003DC8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003DC8                 assume cs:_rtc$TMZ
.rtc$TMZ:00003DC8                 ;org 3DC8h
.rtc$TMZ:00003DC8 ; COMDAT (pick any)
.rtc$TMZ:00003DC8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003DC8 _rtc$TMZ        ends
.rtc$TMZ:00003DC8
.rtc$IMZ:00003DCC ; ===========================================================================
.rtc$IMZ:00003DCC
.rtc$IMZ:00003DCC ; Segment type: Pure data
.rtc$IMZ:00003DCC ; Segment permissions: Read
.rtc$IMZ:00003DCC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003DCC                 assume cs:_rtc$IMZ
.rtc$IMZ:00003DCC                 ;org 3DCCh
.rtc$IMZ:00003DCC ; COMDAT (pick any)
.rtc$IMZ:00003DCC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003DCC _rtc$IMZ        ends
.rtc$IMZ:00003DCC
UNDEF:00003DD0 ; ===========================================================================
UNDEF:00003DD0
UNDEF:00003DD0 ; Segment type: Externs
UNDEF:00003DD0 ; UNDEF
UNDEF:00003DD0                 extrn _bufchain_consume:near ; CODE XREF: _proxy_activate+DFp
UNDEF:00003DD0                                         ; _proxy_activate+14Cp ...
UNDEF:00003DD4                 extrn _bufchain_prefix:near ; CODE XREF: _proxy_activate+9Ep
UNDEF:00003DD4                                         ; _proxy_activate+10Bp ...
UNDEF:00003DD8                 extrn _bufchain_size:near ; CODE XREF: _proxy_activate+57p
UNDEF:00003DD8                                         ; _proxy_activate+68p ...
UNDEF:00003DDC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003DDC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003DDC                                         ; CODE XREF: _proxy_activate+203p
UNDEF:00003DDC                                         ; _sk_proxy_set_frozen+156p ...
UNDEF:00003DE0                 extrn __RTC_CheckEsp:near ; CODE XREF: _proxy_activate+4Bp
UNDEF:00003DE0                                         ; _proxy_activate+C9p ...
UNDEF:00003DE4                 extrn __RTC_Shutdown:near
UNDEF:00003DE4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003DE8                 extrn __RTC_InitBase:near
UNDEF:00003DE8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003DEC                 extrn _safefree:near    ; CODE XREF: _sk_proxy_close+45p
UNDEF:00003DEC                                         ; _new_connection+229p ...
UNDEF:00003DF0                 extrn _sk_addr_free:near ; CODE XREF: _sk_proxy_close+39p
UNDEF:00003DF0                                         ; _new_connection+235p
UNDEF:00003DF4                 extrn _bufchain_add:near ; CODE XREF: _sk_proxy_write+2Ap
UNDEF:00003DF4                                         ; _sk_proxy_write_oob+48p ...
UNDEF:00003DF8                 extrn _bufchain_clear:near
UNDEF:00003DF8                                         ; CODE XREF: _sk_proxy_write_oob+22p
UNDEF:00003DF8                                         ; _sk_proxy_write_oob+31p
UNDEF:00003DFC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00003DFC                 extrn _memcpy:near      ; CODE XREF: _sk_proxy_set_frozen+CAp
UNDEF:00003DFC                                         ; _proxy_socks4_negotiate+184p ...
UNDEF:00003E00                 extrn ___security_cookie:near
UNDEF:00003E00                                         ; DATA XREF: _sk_proxy_set_frozen+1Dr
UNDEF:00003E00                                         ; _proxy_for_destination+16r ...
UNDEF:00003E04 ; __fastcall __security_check_cookie(x)
UNDEF:00003E04                 extrn @__security_check_cookie@4:near
UNDEF:00003E04                                         ; CODE XREF: _sk_proxy_set_frozen+164p
UNDEF:00003E04                                         ; _proxy_for_destination+32Bp ...
UNDEF:00003E08 ; int __cdecl strnicmp(const char *Str1, const char *Str, size_t MaxCount)
UNDEF:00003E08                 extrn _strnicmp:near    ; CODE XREF: _proxy_for_destination+1D3p
UNDEF:00003E08                                         ; _proxy_for_destination+206p ...
UNDEF:00003E0C ; int __cdecl isalnum(int C)
UNDEF:00003E0C                 extrn _isalnum:near     ; CODE XREF: _proxy_for_destination+156p
UNDEF:00003E10 ; int __cdecl isspace(int C)
UNDEF:00003E10                 extrn _isspace:near     ; CODE XREF: _proxy_for_destination+102p
UNDEF:00003E10                                         ; _proxy_for_destination+2E5p
UNDEF:00003E14                 extrn _conf_get_str:near
UNDEF:00003E14                                         ; CODE XREF: _proxy_for_destination+CFp
UNDEF:00003E14                                         ; _new_connection+1F7p ...
UNDEF:00003E18 ; size_t __cdecl strlen(const char *Str)
UNDEF:00003E18                 extrn _strlen:near      ; CODE XREF: _proxy_for_destination+A6p
UNDEF:00003E18                                         ; _proxy_for_destination+BEp ...
UNDEF:00003E1C                 extrn _sk_getaddr:near  ; CODE XREF: _proxy_for_destination+9Ap
UNDEF:00003E1C                                         ; _proxy_http_negotiate+47p ...
UNDEF:00003E20                 extrn _sk_address_is_local:near
UNDEF:00003E20                                         ; CODE XREF: _proxy_for_destination+77p
UNDEF:00003E24                 extrn _sk_hostname_is_local:near
UNDEF:00003E24                                         ; CODE XREF: _proxy_for_destination+61p
UNDEF:00003E28                 extrn _conf_get_int:near
UNDEF:00003E28                                         ; CODE XREF: _proxy_for_destination+51p
UNDEF:00003E28                                         ; _name_lookup+9p ...
UNDEF:00003E2C                 extrn _sk_address_is_special_local:near
UNDEF:00003E2C                                         ; CODE XREF: _proxy_for_destination+38p
UNDEF:00003E30                 extrn _sk_namelookup:near ; CODE XREF: _name_lookup+92p
UNDEF:00003E30                                         ; _new_connection+200p
UNDEF:00003E34                 extrn _sk_nonamelookup:near ; CODE XREF: _name_lookup+7Cp
UNDEF:00003E38                 extrn _dupstr:near      ; CODE XREF: _name_lookup+6Bp
UNDEF:00003E3C                 extrn _sk_new:near      ; CODE XREF: _new_connection+278p
UNDEF:00003E3C                                         ; _new_connection+30Cp
UNDEF:00003E40                 extrn _sk_addr_error:near ; CODE XREF: _new_connection+20Fp
UNDEF:00003E44                 extrn _bufchain_init:near ; CODE XREF: _new_connection+10Ep
UNDEF:00003E44                                         ; _new_connection+11Dp ...
UNDEF:00003E48                 extrn _conf_copy:near   ; CODE XREF: _new_connection+B6p
UNDEF:00003E4C                 extrn _safemalloc:near  ; CODE XREF: _new_connection+9Ep
UNDEF:00003E4C                                         ; _new_connection+1C1p ...
UNDEF:00003E50                 extrn _platform_new_connection:near
UNDEF:00003E50                                         ; CODE XREF: _new_connection+7Ep
UNDEF:00003E54                 extrn _sk_newlistener:near ; CODE XREF: _new_listener+17p
UNDEF:00003E58 ; int sscanf(const char *Src, const char *Format, ...)
UNDEF:00003E58                 extrn _sscanf:near      ; CODE XREF: _proxy_http_negotiate+445p
UNDEF:00003E5C                 extrn _bufchain_fetch:near
UNDEF:00003E5C                                         ; CODE XREF: _proxy_http_negotiate+3C5p
UNDEF:00003E5C                                         ; _proxy_http_negotiate+63Ep ...
UNDEF:00003E60 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00003E60                 extrn __wassert:near    ; CODE XREF: _proxy_http_negotiate+38Ep
UNDEF:00003E60                                         ; _proxy_http_negotiate+5FEp ...
UNDEF:00003E64 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00003E64                 extrn _strcpy:near      ; CODE XREF: _proxy_http_negotiate+22Fp
UNDEF:00003E64                                         ; _proxy_socks4_negotiate+137p ...
UNDEF:00003E68                 extrn _base64_encode_atom:near
UNDEF:00003E68                                         ; CODE XREF: _proxy_http_negotiate+210p
UNDEF:00003E6C ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:00003E6C                 extrn _sprintf:near     ; CODE XREF: _proxy_http_negotiate+16Bp
UNDEF:00003E6C                                         ; _proxy_socks5_negotiate+6D8p ...
UNDEF:00003E70                 extrn _dupprintf:near   ; CODE XREF: _proxy_http_negotiate+70p
UNDEF:00003E70                                         ; _proxy_http_negotiate+117p ...
UNDEF:00003E74                 extrn _sk_addrcopy:near ; CODE XREF: _proxy_socks4_negotiate+7Dp
UNDEF:00003E74                                         ; _proxy_socks5_negotiate+3E4p ...
UNDEF:00003E78                 extrn _sk_addrtype:near ; CODE XREF: _proxy_socks4_negotiate+3Bp
UNDEF:00003E78                                         ; _proxy_socks5_negotiate+3AEp
UNDEF:00003E7C                 extrn _proxy_socks5_selectchap:near
UNDEF:00003E7C                                         ; CODE XREF: _proxy_socks5_negotiate+A04p
UNDEF:00003E80 ; char *__cdecl strcat(char *Dest, const char *Source)
UNDEF:00003E80                 extrn _strcat:near      ; CODE XREF: _proxy_socks5_negotiate+604p
UNDEF:00003E80                                         ; _proxy_socks5_negotiate+61Dp ...
UNDEF:00003E84                 extrn _proxy_socks5_handlechap:near
UNDEF:00003E84                                         ; CODE XREF: _proxy_socks5_negotiate+381p
UNDEF:00003E88                 extrn _proxy_socks5_offerencryptedauth:near
UNDEF:00003E88                                         ; CODE XREF: _proxy_socks5_negotiate+87p
UNDEF:00003E8C                 extrn _saferealloc:near ; CODE XREF: _format_telnet_command+E3p
UNDEF:00003E8C                                         ; _format_telnet_command+1AEp ...
UNDEF:00003E8C
UNDEF:00003E8C
UNDEF:00003E8C                 end