.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 921ECD9CEF7DDE42F8007DB668765E5B
.data:00000000 ; Input CRC32 : 2166863D
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshsh256.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG6066         db 'SHA-256',0          ; DATA XREF: .rdata:00000138o
.data:00000008 $SG6172         db 'hmac-sha2-256',0    ; DATA XREF: .rdata:00000160o
.data:00000016                 align 4
.data:00000018 $SG6173         db 'HMAC-SHA-256',0     ; DATA XREF: .rdata:00000168o
.data:00000018                                         ; .rdata:00000134o ...
.data:00000025                 align 4
.data:00000025 _data           ends
.data:00000025
.rdata:00000028 ; ===========================================================================
.rdata:00000028
.rdata:00000028 ; Segment type: Pure data
.rdata:00000028 ; Segment permissions: Read
.rdata:00000028 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000028 _rdata          segment para public 'DATA' use32
.rdata:00000028                 assume cs:_rdata
.rdata:00000028                 ;org 28h
.rdata:00000028 ; `SHA256_Block'::`2'::k
.rdata:00000028 ?k@?1??SHA256_Block@@9@9 dd 428A2F98h   ; DATA XREF: _SHA256_Block+25Dr
.rdata:0000002C dword_2C        dd 71374491h            ; DATA XREF: _SHA256_Block+375r
.rdata:00000030 dword_30        dd 0B5C0FBCFh           ; DATA XREF: _SHA256_Block+48Dr
.rdata:00000034 dword_34        dd 0E9B5DBA5h           ; DATA XREF: _SHA256_Block+5A5r
.rdata:00000038 dword_38        dd 3956C25Bh            ; DATA XREF: _SHA256_Block+6BDr
.rdata:0000003C dword_3C        dd 59F111F1h            ; DATA XREF: _SHA256_Block+7D5r
.rdata:00000040 dword_40        dd 923F82A4h            ; DATA XREF: _SHA256_Block+8EDr
.rdata:00000044 dword_44        dd 0AB1C5ED5h           ; DATA XREF: _SHA256_Block+A05r
.rdata:00000048                 db  98h ; ÿ
.rdata:00000049                 db 0AAh ; ¬
.rdata:0000004A                 db    7
.rdata:0000004B                 db 0D8h ; +
.rdata:0000004C                 db    1
.rdata:0000004D                 db  5Bh ; [
.rdata:0000004E                 db  83h ; â
.rdata:0000004F                 db  12h
.rdata:00000050                 db 0BEh ; +
.rdata:00000051                 db  85h ; à
.rdata:00000052                 db  31h ; 1
.rdata:00000053                 db  24h ; $
.rdata:00000054                 db 0C3h ; +
.rdata:00000055                 db  7Dh ; }
.rdata:00000056                 db  0Ch
.rdata:00000057                 db  55h ; U
.rdata:00000058                 db  74h ; t
.rdata:00000059                 db  5Dh ; ]
.rdata:0000005A                 db 0BEh ; +
.rdata:0000005B                 db  72h ; r
.rdata:0000005C                 db 0FEh ; ¦
.rdata:0000005D                 db 0B1h ; ¦
.rdata:0000005E                 db 0DEh ; ¦
.rdata:0000005F                 db  80h ; Ç
.rdata:00000060                 db 0A7h ; º
.rdata:00000061                 db    6
.rdata:00000062                 db 0DCh ; _
.rdata:00000063                 db  9Bh ; ¢
.rdata:00000064                 db  74h ; t
.rdata:00000065                 db 0F1h ; ±
.rdata:00000066                 db  9Bh ; ¢
.rdata:00000067                 db 0C1h ; -
.rdata:00000068                 db 0C1h ; -
.rdata:00000069                 db  69h ; i
.rdata:0000006A                 db  9Bh ; ¢
.rdata:0000006B                 db 0E4h ; S
.rdata:0000006C unk_6C          db  86h ; å             ; DATA XREF: .text:00001590o
.rdata:0000006D                 db  47h ; G
.rdata:0000006E                 db 0BEh ; +
.rdata:0000006F                 db 0EFh ; n
.rdata:00000070                 db 0C6h ; ¦
.rdata:00000071                 db  9Dh ; ¥
.rdata:00000072                 db 0C1h ; -
.rdata:00000073                 db  0Fh
.rdata:00000074                 db 0CCh ; ¦
.rdata:00000075                 db 0A1h ; í
.rdata:00000076                 db  0Ch
.rdata:00000077                 db  24h ; $
.rdata:00000078                 db  6Fh ; o
.rdata:00000079                 db  2Ch ; ,
.rdata:0000007A                 db 0E9h ; T
.rdata:0000007B                 db  2Dh ; -
.rdata:0000007C                 db 0AAh ; ¬
.rdata:0000007D                 db  84h ; ä
.rdata:0000007E                 db  74h ; t
.rdata:0000007F                 db  4Ah ; J
.rdata:00000080                 db 0DCh ; _
.rdata:00000081                 db 0A9h ; ¬
.rdata:00000082                 db 0B0h ; ¦
.rdata:00000083                 db  5Ch ; \
.rdata:00000084                 db 0DAh ; +
.rdata:00000085                 db  88h ; ê
.rdata:00000086                 db 0F9h ; ·
.rdata:00000087                 db  76h ; v
.rdata:00000088                 db  52h ; R
.rdata:00000089                 db  51h ; Q
.rdata:0000008A                 db  3Eh ; >
.rdata:0000008B                 db  98h ; ÿ
.rdata:0000008C                 db  6Dh ; m
.rdata:0000008D                 db 0C6h ; ¦
.rdata:0000008E                 db  31h ; 1
.rdata:0000008F                 db 0A8h ; ¿
.rdata:00000090                 db 0C8h ; +
.rdata:00000091                 db  27h ; '
.rdata:00000092                 db    3
.rdata:00000093                 db 0B0h ; ¦
.rdata:00000094                 db 0C7h ; ¦
.rdata:00000095                 db  7Fh ; 
.rdata:00000096                 db  59h ; Y
.rdata:00000097                 db 0BFh ; +
.rdata:00000098                 db 0F3h ; =
.rdata:00000099                 db  0Bh
.rdata:0000009A                 db 0E0h ; a
.rdata:0000009B                 db 0C6h ; ¦
.rdata:0000009C                 db  47h ; G
.rdata:0000009D                 db  91h ; æ
.rdata:0000009E                 db 0A7h ; º
.rdata:0000009F                 db 0D5h ; +
.rdata:000000A0                 db  51h ; Q
.rdata:000000A1                 db  63h ; c
.rdata:000000A2                 db 0CAh ; -
.rdata:000000A3                 db    6
.rdata:000000A4                 db  67h ; g
.rdata:000000A5                 db  29h ; )
.rdata:000000A6                 db  29h ; )
.rdata:000000A7                 db  14h
.rdata:000000A8                 db  85h ; à
.rdata:000000A9                 db  0Ah
.rdata:000000AA                 db 0B7h ; +
.rdata:000000AB                 db  27h ; '
.rdata:000000AC                 db  38h ; 8
.rdata:000000AD                 db  21h ; !
.rdata:000000AE                 db  1Bh
.rdata:000000AF                 db  2Eh ; .
.rdata:000000B0                 db 0FCh ; n
.rdata:000000B1                 db  6Dh ; m
.rdata:000000B2                 db  2Ch ; ,
.rdata:000000B3                 db  4Dh ; M
.rdata:000000B4                 db  13h
.rdata:000000B5                 db  0Dh
.rdata:000000B6                 db  38h ; 8
.rdata:000000B7                 db  53h ; S
.rdata:000000B8                 db  54h ; T
.rdata:000000B9                 db  73h ; s
.rdata:000000BA                 db  0Ah
.rdata:000000BB                 db  65h ; e
.rdata:000000BC                 db 0BBh ; +
.rdata:000000BD                 db  0Ah
.rdata:000000BE                 db  6Ah ; j
.rdata:000000BF                 db  76h ; v
.rdata:000000C0                 db  2Eh ; .
.rdata:000000C1                 db 0C9h ; +
.rdata:000000C2                 db 0C2h ; -
.rdata:000000C3                 db  81h ; ü
.rdata:000000C4                 db  85h ; à
.rdata:000000C5                 db  2Ch ; ,
.rdata:000000C6                 db  72h ; r
.rdata:000000C7                 db  92h ; Æ
.rdata:000000C8                 db 0A1h ; í
.rdata:000000C9                 db 0E8h ; F
.rdata:000000CA                 db 0BFh ; +
.rdata:000000CB                 db 0A2h ; ó
.rdata:000000CC                 db  4Bh ; K
.rdata:000000CD                 db  66h ; f
.rdata:000000CE                 db  1Ah
.rdata:000000CF                 db 0A8h ; ¿
.rdata:000000D0                 db  70h ; p
.rdata:000000D1                 db  8Bh ; ï
.rdata:000000D2                 db  4Bh ; K
.rdata:000000D3                 db 0C2h ; -
.rdata:000000D4                 db 0A3h ; ú
.rdata:000000D5                 db  51h ; Q
.rdata:000000D6                 db  6Ch ; l
.rdata:000000D7                 db 0C7h ; ¦
.rdata:000000D8                 db  19h
.rdata:000000D9                 db 0E8h ; F
.rdata:000000DA                 db  92h ; Æ
.rdata:000000DB                 db 0D1h ; -
.rdata:000000DC                 db  24h ; $
.rdata:000000DD                 db    6
.rdata:000000DE                 db  99h ; Ö
.rdata:000000DF                 db 0D6h ; +
.rdata:000000E0                 db  85h ; à
.rdata:000000E1                 db  35h ; 5
.rdata:000000E2                 db  0Eh
.rdata:000000E3                 db 0F4h ; (
.rdata:000000E4                 db  70h ; p
.rdata:000000E5                 db 0A0h ; á
.rdata:000000E6                 db  6Ah ; j
.rdata:000000E7                 db  10h
.rdata:000000E8                 db  16h
.rdata:000000E9                 db 0C1h ; -
.rdata:000000EA                 db 0A4h ; ñ
.rdata:000000EB                 db  19h
.rdata:000000EC                 db    8
.rdata:000000ED                 db  6Ch ; l
.rdata:000000EE                 db  37h ; 7
.rdata:000000EF                 db  1Eh
.rdata:000000F0                 db  4Ch ; L
.rdata:000000F1                 db  77h ; w
.rdata:000000F2                 db  48h ; H
.rdata:000000F3                 db  27h ; '
.rdata:000000F4                 db 0B5h ; ¦
.rdata:000000F5                 db 0BCh ; +
.rdata:000000F6                 db 0B0h ; ¦
.rdata:000000F7                 db  34h ; 4
.rdata:000000F8                 db 0B3h ; ¦
.rdata:000000F9                 db  0Ch
.rdata:000000FA                 db  1Ch
.rdata:000000FB                 db  39h ; 9
.rdata:000000FC                 db  4Ah ; J
.rdata:000000FD                 db 0AAh ; ¬
.rdata:000000FE                 db 0D8h ; +
.rdata:000000FF                 db  4Eh ; N
.rdata:00000100                 db  4Fh ; O
.rdata:00000101                 db 0CAh ; -
.rdata:00000102                 db  9Ch ; £
.rdata:00000103                 db  5Bh ; [
.rdata:00000104                 db 0F3h ; =
.rdata:00000105                 db  6Fh ; o
.rdata:00000106                 db  2Eh ; .
.rdata:00000107                 db  68h ; h
.rdata:00000108                 db 0EEh ; e
.rdata:00000109                 db  82h ; é
.rdata:0000010A                 db  8Fh ; Å
.rdata:0000010B                 db  74h ; t
.rdata:0000010C                 db  6Fh ; o
.rdata:0000010D                 db  63h ; c
.rdata:0000010E                 db 0A5h ; Ñ
.rdata:0000010F                 db  78h ; x
.rdata:00000110                 db  14h
.rdata:00000111                 db  78h ; x
.rdata:00000112                 db 0C8h ; +
.rdata:00000113                 db  84h ; ä
.rdata:00000114                 db    8
.rdata:00000115                 db    2
.rdata:00000116                 db 0C7h ; ¦
.rdata:00000117                 db  8Ch ; î
.rdata:00000118                 db 0FAh ; ·
.rdata:00000119                 db 0FFh
.rdata:0000011A                 db 0BEh ; +
.rdata:0000011B                 db  90h ; É
.rdata:0000011C                 db 0EBh ; d
.rdata:0000011D                 db  6Ch ; l
.rdata:0000011E                 db  50h ; P
.rdata:0000011F                 db 0A4h ; ñ
.rdata:00000120                 db 0F7h ; ˜
.rdata:00000121                 db 0A3h ; ú
.rdata:00000122                 db 0F9h ; ·
.rdata:00000123                 db 0BEh ; +
.rdata:00000124                 db 0F2h ; =
.rdata:00000125                 db  78h ; x
.rdata:00000126                 db  71h ; q
.rdata:00000127                 db 0C6h ; ¦
.rdata:00000128                 public _ssh_sha256
.rdata:00000128 _ssh_sha256     dd offset _sha256_init
.rdata:0000012C                 dd offset _sha256_bytes
.rdata:00000130                 dd offset _sha256_final
.rdata:00000134                 dd offset $SG6173+8     ; "-256"
.rdata:00000138                 dd offset $SG6066       ; "SHA-256"
.rdata:0000013C                 public _ssh_hmac_sha256
.rdata:0000013C _ssh_hmac_sha256 dd offset _sha256_make_context
.rdata:00000140                 dd offset _sha256_free_context
.rdata:00000144                 dd offset _sha256_key
.rdata:00000148                 dd offset _sha256_generate
.rdata:0000014C                 dd offset _sha256_verify
.rdata:00000150                 dd offset _hmacsha256_start
.rdata:00000154                 dd offset _hmacsha256_bytes
.rdata:00000158                 dd offset _hmacsha256_genresult
.rdata:0000015C                 dd offset _hmacsha256_verresult
.rdata:00000160                 dd offset $SG6172       ; "hmac-sha2-256"
.rdata:00000164                 dd offset $SG6173+8     ; "-256"
.rdata:00000168                 dd offset $SG6173       ; "HMAC-SHA-256"
.rdata:00000168 _rdata          ends
.rdata:00000168
.text:0000016C ; ===========================================================================
.text:0000016C
.text:0000016C ; Segment type: Pure code
.text:0000016C ; Segment permissions: Read/Execute
.text:0000016C _text           segment para public 'CODE' use32
.text:0000016C                 assume cs:_text
.text:0000016C                 ;org 16Ch
.text:0000016C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000016C
.text:0000016C ; =============== S U B R O U T I N E =======================================
.text:0000016C
.text:0000016C ; Attributes: bp-based frame
.text:0000016C
.text:0000016C                 public _SHA256_Core_Init
.text:0000016C _SHA256_Core_Init proc near             ; CODE XREF: _SHA256_Init+7p
.text:0000016C
.text:0000016C arg_0           = dword ptr  8
.text:0000016C
.text:0000016C                 push    ebp
.text:0000016D                 mov     ebp, esp
.text:0000016F                 mov     eax, [ebp+arg_0]
.text:00000172                 mov     dword ptr [eax], 6A09E667h
.text:00000178                 mov     ecx, [ebp+arg_0]
.text:0000017B                 mov     dword ptr [ecx+4], 0BB67AE85h
.text:00000182                 mov     edx, [ebp+arg_0]
.text:00000185                 mov     dword ptr [edx+8], 3C6EF372h
.text:0000018C                 mov     eax, [ebp+arg_0]
.text:0000018F                 mov     dword ptr [eax+0Ch], 0A54FF53Ah
.text:00000196                 mov     ecx, [ebp+arg_0]
.text:00000199                 mov     dword ptr [ecx+10h], 510E527Fh
.text:000001A0                 mov     edx, [ebp+arg_0]
.text:000001A3                 mov     dword ptr [edx+14h], 9B05688Ch
.text:000001AA                 mov     eax, [ebp+arg_0]
.text:000001AD                 mov     dword ptr [eax+18h], 1F83D9ABh
.text:000001B4                 mov     ecx, [ebp+arg_0]
.text:000001B7                 mov     dword ptr [ecx+1Ch], 5BE0CD19h
.text:000001BE                 pop     ebp
.text:000001BF                 retn
.text:000001BF _SHA256_Core_Init endp
.text:000001BF
.text:000001BF ; ---------------------------------------------------------------------------
.text:000001C0                 db 0Ch dup(0CCh)
.text:000001CC
.text:000001CC ; =============== S U B R O U T I N E =======================================
.text:000001CC
.text:000001CC ; Attributes: bp-based frame
.text:000001CC
.text:000001CC                 public _SHA256_Block
.text:000001CC _SHA256_Block   proc near               ; CODE XREF: _SHA256_Bytes+15Dp
.text:000001CC
.text:000001CC var_188         = dword ptr -188h
.text:000001CC var_184         = dword ptr -184h
.text:000001CC var_178         = dword ptr -178h
.text:000001CC var_174         = dword ptr -174h
.text:000001CC var_170         = dword ptr -170h
.text:000001CC var_16C         = dword ptr -16Ch
.text:000001CC var_168         = dword ptr -168h
.text:000001CC var_164         = dword ptr -164h
.text:000001CC var_160         = dword ptr -160h
.text:000001CC var_15C         = dword ptr -15Ch
.text:000001CC var_158         = dword ptr -158h
.text:000001CC var_154         = dword ptr -154h
.text:000001CC var_150         = dword ptr -150h
.text:000001CC var_148         = dword ptr -148h
.text:000001CC var_144         = dword ptr -144h
.text:000001CC var_140         = dword ptr -140h
.text:000001CC var_13C         = dword ptr -13Ch
.text:000001CC var_138         = dword ptr -138h
.text:000001CC var_134         = dword ptr -134h
.text:000001CC var_130         = dword ptr -130h
.text:000001CC var_12C         = dword ptr -12Ch
.text:000001CC var_4           = dword ptr -4
.text:000001CC arg_0           = dword ptr  8
.text:000001CC arg_4           = dword ptr  0Ch
.text:000001CC
.text:000001CC                 push    ebp
.text:000001CD                 mov     ebp, esp
.text:000001CF                 sub     esp, 178h
.text:000001D5                 push    esi
.text:000001D6                 push    edi
.text:000001D7                 lea     edi, [ebp+var_178]
.text:000001DD                 mov     ecx, 5Eh ; '^'
.text:000001E2                 mov     eax, 0CCCCCCCCh
.text:000001E7                 rep stosd
.text:000001E9                 mov     eax, dword ptr ds:___security_cookie
.text:000001EE                 xor     eax, ebp
.text:000001F0                 mov     [ebp+var_4], eax
.text:000001F3                 mov     [ebp+var_170], 0
.text:000001FD                 jmp     short loc_20E
.text:000001FF ; ---------------------------------------------------------------------------
.text:000001FF
.text:000001FF loc_1FF:                                ; CODE XREF: _SHA256_Block+64j
.text:000001FF                 mov     eax, [ebp+var_170]
.text:00000205                 add     eax, 1
.text:00000208                 mov     [ebp+var_170], eax
.text:0000020E
.text:0000020E loc_20E:                                ; CODE XREF: _SHA256_Block+31j
.text:0000020E                 cmp     [ebp+var_170], 10h
.text:00000215                 jge     short loc_232
.text:00000217                 mov     ecx, [ebp+var_170]
.text:0000021D                 mov     edx, [ebp+var_170]
.text:00000223                 mov     eax, [ebp+arg_4]
.text:00000226                 mov     edx, [eax+edx*4]
.text:00000229                 mov     [ebp+ecx*4+var_148], edx
.text:00000230                 jmp     short loc_1FF
.text:00000232 ; ---------------------------------------------------------------------------
.text:00000232
.text:00000232 loc_232:                                ; CODE XREF: _SHA256_Block+49j
.text:00000232                 mov     [ebp+var_170], 10h
.text:0000023C                 jmp     short loc_24D
.text:0000023E ; ---------------------------------------------------------------------------
.text:0000023E
.text:0000023E loc_23E:                                ; CODE XREF: _SHA256_Block+167j
.text:0000023E                 mov     eax, [ebp+var_170]
.text:00000244                 add     eax, 1
.text:00000247                 mov     [ebp+var_170], eax
.text:0000024D
.text:0000024D loc_24D:                                ; CODE XREF: _SHA256_Block+70j
.text:0000024D                 cmp     [ebp+var_170], 40h ; '@'
.text:00000254                 jge     loc_338
.text:0000025A                 mov     ecx, [ebp+var_170]
.text:00000260                 mov     edx, [ebp+ecx*4+var_150]
.text:00000267                 shl     edx, 0Fh
.text:0000026A                 mov     eax, [ebp+var_170]
.text:00000270                 mov     ecx, [ebp+eax*4+var_150]
.text:00000277                 shr     ecx, 11h
.text:0000027A                 or      edx, ecx
.text:0000027C                 mov     eax, [ebp+var_170]
.text:00000282                 mov     ecx, [ebp+eax*4+var_150]
.text:00000289                 shl     ecx, 0Dh
.text:0000028C                 mov     eax, [ebp+var_170]
.text:00000292                 mov     eax, [ebp+eax*4+var_150]
.text:00000299                 shr     eax, 13h
.text:0000029C                 or      ecx, eax
.text:0000029E                 xor     edx, ecx
.text:000002A0                 mov     ecx, [ebp+var_170]
.text:000002A6                 mov     eax, [ebp+ecx*4+var_150]
.text:000002AD                 shr     eax, 0Ah
.text:000002B0                 xor     edx, eax
.text:000002B2                 mov     ecx, [ebp+var_170]
.text:000002B8                 add     edx, [ebp+ecx*4+var_164]
.text:000002BF                 mov     eax, [ebp+var_170]
.text:000002C5                 mov     ecx, [ebp+eax*4+var_184]
.text:000002CC                 shl     ecx, 19h
.text:000002CF                 mov     eax, [ebp+var_170]
.text:000002D5                 mov     eax, [ebp+eax*4+var_184]
.text:000002DC                 shr     eax, 7
.text:000002DF                 or      ecx, eax
.text:000002E1                 mov     eax, [ebp+var_170]
.text:000002E7                 mov     eax, [ebp+eax*4+var_184]
.text:000002EE                 shl     eax, 0Eh
.text:000002F1                 mov     esi, [ebp+var_170]
.text:000002F7                 mov     esi, [ebp+esi*4+var_184]
.text:000002FE                 shr     esi, 12h
.text:00000301                 or      eax, esi
.text:00000303                 xor     ecx, eax
.text:00000305                 mov     eax, [ebp+var_170]
.text:0000030B                 mov     eax, [ebp+eax*4+var_184]
.text:00000312                 shr     eax, 3
.text:00000315                 xor     ecx, eax
.text:00000317                 add     edx, ecx
.text:00000319                 mov     ecx, [ebp+var_170]
.text:0000031F                 add     edx, [ebp+ecx*4+var_188]
.text:00000326                 mov     eax, [ebp+var_170]
.text:0000032C                 mov     [ebp+eax*4+var_148], edx
.text:00000333                 jmp     loc_23E
.text:00000338 ; ---------------------------------------------------------------------------
.text:00000338
.text:00000338 loc_338:                                ; CODE XREF: _SHA256_Block+88j
.text:00000338                 mov     ecx, [ebp+arg_0]
.text:0000033B                 mov     edx, [ecx]
.text:0000033D                 mov     [ebp+var_150], edx
.text:00000343                 mov     eax, [ebp+arg_0]
.text:00000346                 mov     ecx, [eax+4]
.text:00000349                 mov     [ebp+var_154], ecx
.text:0000034F                 mov     edx, [ebp+arg_0]
.text:00000352                 mov     eax, [edx+8]
.text:00000355                 mov     [ebp+var_158], eax
.text:0000035B                 mov     ecx, [ebp+arg_0]
.text:0000035E                 mov     edx, [ecx+0Ch]
.text:00000361                 mov     [ebp+var_15C], edx
.text:00000367                 mov     eax, [ebp+arg_0]
.text:0000036A                 mov     ecx, [eax+10h]
.text:0000036D                 mov     [ebp+var_160], ecx
.text:00000373                 mov     edx, [ebp+arg_0]
.text:00000376                 mov     eax, [edx+14h]
.text:00000379                 mov     [ebp+var_164], eax
.text:0000037F                 mov     ecx, [ebp+arg_0]
.text:00000382                 mov     edx, [ecx+18h]
.text:00000385                 mov     [ebp+var_168], edx
.text:0000038B                 mov     eax, [ebp+arg_0]
.text:0000038E                 mov     ecx, [eax+1Ch]
.text:00000391                 mov     [ebp+var_16C], ecx
.text:00000397                 mov     [ebp+var_170], 0
.text:000003A1                 jmp     short loc_3B2
.text:000003A3 ; ---------------------------------------------------------------------------
.text:000003A3
.text:000003A3 loc_3A3:                                ; CODE XREF: _SHA256_Block+AB3j
.text:000003A3                 mov     edx, [ebp+var_170]
.text:000003A9                 add     edx, 8
.text:000003AC                 mov     [ebp+var_170], edx
.text:000003B2
.text:000003B2 loc_3B2:                                ; CODE XREF: _SHA256_Block+1D5j
.text:000003B2                 cmp     [ebp+var_170], 40h ; '@'
.text:000003B9                 jge     loc_C84
.text:000003BF                 mov     eax, [ebp+var_160]
.text:000003C5                 shl     eax, 1Ah
.text:000003C8                 mov     ecx, [ebp+var_160]
.text:000003CE                 shr     ecx, 6
.text:000003D1                 or      eax, ecx
.text:000003D3                 mov     edx, [ebp+var_160]
.text:000003D9                 shl     edx, 15h
.text:000003DC                 mov     ecx, [ebp+var_160]
.text:000003E2                 shr     ecx, 0Bh
.text:000003E5                 or      edx, ecx
.text:000003E7                 xor     eax, edx
.text:000003E9                 mov     edx, [ebp+var_160]
.text:000003EF                 shl     edx, 7
.text:000003F2                 mov     ecx, [ebp+var_160]
.text:000003F8                 shr     ecx, 19h
.text:000003FB                 or      edx, ecx
.text:000003FD                 xor     eax, edx
.text:000003FF                 add     eax, [ebp+var_16C]
.text:00000405                 mov     edx, [ebp+var_160]
.text:0000040B                 and     edx, [ebp+var_164]
.text:00000411                 mov     ecx, [ebp+var_160]
.text:00000417                 not     ecx
.text:00000419                 and     ecx, [ebp+var_168]
.text:0000041F                 xor     edx, ecx
.text:00000421                 add     eax, edx
.text:00000423                 mov     edx, [ebp+var_170]
.text:00000429                 add     eax, ds:?k@?1??SHA256_Block@@9@9[edx*4] ; `SHA256_Block'::`2'::k
.text:00000430                 mov     ecx, [ebp+var_170]
.text:00000436                 add     eax, [ebp+ecx*4+var_148]
.text:0000043D                 mov     [ebp+var_174], eax
.text:00000443                 mov     edx, [ebp+var_150]
.text:00000449                 shl     edx, 1Eh
.text:0000044C                 mov     eax, [ebp+var_150]
.text:00000452                 shr     eax, 2
.text:00000455                 or      edx, eax
.text:00000457                 mov     ecx, [ebp+var_150]
.text:0000045D                 shl     ecx, 13h
.text:00000460                 mov     eax, [ebp+var_150]
.text:00000466                 shr     eax, 0Dh
.text:00000469                 or      ecx, eax
.text:0000046B                 xor     edx, ecx
.text:0000046D                 mov     ecx, [ebp+var_150]
.text:00000473                 shl     ecx, 0Ah
.text:00000476                 mov     eax, [ebp+var_150]
.text:0000047C                 shr     eax, 16h
.text:0000047F                 or      ecx, eax
.text:00000481                 xor     edx, ecx
.text:00000483                 mov     ecx, [ebp+var_150]
.text:00000489                 and     ecx, [ebp+var_154]
.text:0000048F                 mov     eax, [ebp+var_150]
.text:00000495                 and     eax, [ebp+var_158]
.text:0000049B                 xor     ecx, eax
.text:0000049D                 mov     eax, [ebp+var_154]
.text:000004A3                 and     eax, [ebp+var_158]
.text:000004A9                 xor     ecx, eax
.text:000004AB                 add     edx, ecx
.text:000004AD                 mov     [ebp+var_178], edx
.text:000004B3                 mov     ecx, [ebp+var_15C]
.text:000004B9                 add     ecx, [ebp+var_174]
.text:000004BF                 mov     [ebp+var_15C], ecx
.text:000004C5                 mov     edx, [ebp+var_174]
.text:000004CB                 add     edx, [ebp+var_178]
.text:000004D1                 mov     [ebp+var_16C], edx
.text:000004D7                 mov     eax, [ebp+var_15C]
.text:000004DD                 shl     eax, 1Ah
.text:000004E0                 mov     ecx, [ebp+var_15C]
.text:000004E6                 shr     ecx, 6
.text:000004E9                 or      eax, ecx
.text:000004EB                 mov     edx, [ebp+var_15C]
.text:000004F1                 shl     edx, 15h
.text:000004F4                 mov     ecx, [ebp+var_15C]
.text:000004FA                 shr     ecx, 0Bh
.text:000004FD                 or      edx, ecx
.text:000004FF                 xor     eax, edx
.text:00000501                 mov     edx, [ebp+var_15C]
.text:00000507                 shl     edx, 7
.text:0000050A                 mov     ecx, [ebp+var_15C]
.text:00000510                 shr     ecx, 19h
.text:00000513                 or      edx, ecx
.text:00000515                 xor     eax, edx
.text:00000517                 add     eax, [ebp+var_168]
.text:0000051D                 mov     edx, [ebp+var_15C]
.text:00000523                 and     edx, [ebp+var_160]
.text:00000529                 mov     ecx, [ebp+var_15C]
.text:0000052F                 not     ecx
.text:00000531                 and     ecx, [ebp+var_164]
.text:00000537                 xor     edx, ecx
.text:00000539                 add     eax, edx
.text:0000053B                 mov     edx, [ebp+var_170]
.text:00000541                 add     eax, ds:dword_2C[edx*4]
.text:00000548                 mov     ecx, [ebp+var_170]
.text:0000054E                 add     eax, [ebp+ecx*4+var_144]
.text:00000555                 mov     [ebp+var_174], eax
.text:0000055B                 mov     edx, [ebp+var_16C]
.text:00000561                 shl     edx, 1Eh
.text:00000564                 mov     eax, [ebp+var_16C]
.text:0000056A                 shr     eax, 2
.text:0000056D                 or      edx, eax
.text:0000056F                 mov     ecx, [ebp+var_16C]
.text:00000575                 shl     ecx, 13h
.text:00000578                 mov     eax, [ebp+var_16C]
.text:0000057E                 shr     eax, 0Dh
.text:00000581                 or      ecx, eax
.text:00000583                 xor     edx, ecx
.text:00000585                 mov     ecx, [ebp+var_16C]
.text:0000058B                 shl     ecx, 0Ah
.text:0000058E                 mov     eax, [ebp+var_16C]
.text:00000594                 shr     eax, 16h
.text:00000597                 or      ecx, eax
.text:00000599                 xor     edx, ecx
.text:0000059B                 mov     ecx, [ebp+var_16C]
.text:000005A1                 and     ecx, [ebp+var_150]
.text:000005A7                 mov     eax, [ebp+var_16C]
.text:000005AD                 and     eax, [ebp+var_154]
.text:000005B3                 xor     ecx, eax
.text:000005B5                 mov     eax, [ebp+var_150]
.text:000005BB                 and     eax, [ebp+var_154]
.text:000005C1                 xor     ecx, eax
.text:000005C3                 add     edx, ecx
.text:000005C5                 mov     [ebp+var_178], edx
.text:000005CB                 mov     ecx, [ebp+var_158]
.text:000005D1                 add     ecx, [ebp+var_174]
.text:000005D7                 mov     [ebp+var_158], ecx
.text:000005DD                 mov     edx, [ebp+var_174]
.text:000005E3                 add     edx, [ebp+var_178]
.text:000005E9                 mov     [ebp+var_168], edx
.text:000005EF                 mov     eax, [ebp+var_158]
.text:000005F5                 shl     eax, 1Ah
.text:000005F8                 mov     ecx, [ebp+var_158]
.text:000005FE                 shr     ecx, 6
.text:00000601                 or      eax, ecx
.text:00000603                 mov     edx, [ebp+var_158]
.text:00000609                 shl     edx, 15h
.text:0000060C                 mov     ecx, [ebp+var_158]
.text:00000612                 shr     ecx, 0Bh
.text:00000615                 or      edx, ecx
.text:00000617                 xor     eax, edx
.text:00000619                 mov     edx, [ebp+var_158]
.text:0000061F                 shl     edx, 7
.text:00000622                 mov     ecx, [ebp+var_158]
.text:00000628                 shr     ecx, 19h
.text:0000062B                 or      edx, ecx
.text:0000062D                 xor     eax, edx
.text:0000062F                 add     eax, [ebp+var_164]
.text:00000635                 mov     edx, [ebp+var_158]
.text:0000063B                 and     edx, [ebp+var_15C]
.text:00000641                 mov     ecx, [ebp+var_158]
.text:00000647                 not     ecx
.text:00000649                 and     ecx, [ebp+var_160]
.text:0000064F                 xor     edx, ecx
.text:00000651                 add     eax, edx
.text:00000653                 mov     edx, [ebp+var_170]
.text:00000659                 add     eax, ds:dword_30[edx*4]
.text:00000660                 mov     ecx, [ebp+var_170]
.text:00000666                 add     eax, [ebp+ecx*4+var_140]
.text:0000066D                 mov     [ebp+var_174], eax
.text:00000673                 mov     edx, [ebp+var_168]
.text:00000679                 shl     edx, 1Eh
.text:0000067C                 mov     eax, [ebp+var_168]
.text:00000682                 shr     eax, 2
.text:00000685                 or      edx, eax
.text:00000687                 mov     ecx, [ebp+var_168]
.text:0000068D                 shl     ecx, 13h
.text:00000690                 mov     eax, [ebp+var_168]
.text:00000696                 shr     eax, 0Dh
.text:00000699                 or      ecx, eax
.text:0000069B                 xor     edx, ecx
.text:0000069D                 mov     ecx, [ebp+var_168]
.text:000006A3                 shl     ecx, 0Ah
.text:000006A6                 mov     eax, [ebp+var_168]
.text:000006AC                 shr     eax, 16h
.text:000006AF                 or      ecx, eax
.text:000006B1                 xor     edx, ecx
.text:000006B3                 mov     ecx, [ebp+var_168]
.text:000006B9                 and     ecx, [ebp+var_16C]
.text:000006BF                 mov     eax, [ebp+var_168]
.text:000006C5                 and     eax, [ebp+var_150]
.text:000006CB                 xor     ecx, eax
.text:000006CD                 mov     eax, [ebp+var_16C]
.text:000006D3                 and     eax, [ebp+var_150]
.text:000006D9                 xor     ecx, eax
.text:000006DB                 add     edx, ecx
.text:000006DD                 mov     [ebp+var_178], edx
.text:000006E3                 mov     ecx, [ebp+var_154]
.text:000006E9                 add     ecx, [ebp+var_174]
.text:000006EF                 mov     [ebp+var_154], ecx
.text:000006F5                 mov     edx, [ebp+var_174]
.text:000006FB                 add     edx, [ebp+var_178]
.text:00000701                 mov     [ebp+var_164], edx
.text:00000707                 mov     eax, [ebp+var_154]
.text:0000070D                 shl     eax, 1Ah
.text:00000710                 mov     ecx, [ebp+var_154]
.text:00000716                 shr     ecx, 6
.text:00000719                 or      eax, ecx
.text:0000071B                 mov     edx, [ebp+var_154]
.text:00000721                 shl     edx, 15h
.text:00000724                 mov     ecx, [ebp+var_154]
.text:0000072A                 shr     ecx, 0Bh
.text:0000072D                 or      edx, ecx
.text:0000072F                 xor     eax, edx
.text:00000731                 mov     edx, [ebp+var_154]
.text:00000737                 shl     edx, 7
.text:0000073A                 mov     ecx, [ebp+var_154]
.text:00000740                 shr     ecx, 19h
.text:00000743                 or      edx, ecx
.text:00000745                 xor     eax, edx
.text:00000747                 add     eax, [ebp+var_160]
.text:0000074D                 mov     edx, [ebp+var_154]
.text:00000753                 and     edx, [ebp+var_158]
.text:00000759                 mov     ecx, [ebp+var_154]
.text:0000075F                 not     ecx
.text:00000761                 and     ecx, [ebp+var_15C]
.text:00000767                 xor     edx, ecx
.text:00000769                 add     eax, edx
.text:0000076B                 mov     edx, [ebp+var_170]
.text:00000771                 add     eax, ds:dword_34[edx*4]
.text:00000778                 mov     ecx, [ebp+var_170]
.text:0000077E                 add     eax, [ebp+ecx*4+var_13C]
.text:00000785                 mov     [ebp+var_174], eax
.text:0000078B                 mov     edx, [ebp+var_164]
.text:00000791                 shl     edx, 1Eh
.text:00000794                 mov     eax, [ebp+var_164]
.text:0000079A                 shr     eax, 2
.text:0000079D                 or      edx, eax
.text:0000079F                 mov     ecx, [ebp+var_164]
.text:000007A5                 shl     ecx, 13h
.text:000007A8                 mov     eax, [ebp+var_164]
.text:000007AE                 shr     eax, 0Dh
.text:000007B1                 or      ecx, eax
.text:000007B3                 xor     edx, ecx
.text:000007B5                 mov     ecx, [ebp+var_164]
.text:000007BB                 shl     ecx, 0Ah
.text:000007BE                 mov     eax, [ebp+var_164]
.text:000007C4                 shr     eax, 16h
.text:000007C7                 or      ecx, eax
.text:000007C9                 xor     edx, ecx
.text:000007CB                 mov     ecx, [ebp+var_164]
.text:000007D1                 and     ecx, [ebp+var_168]
.text:000007D7                 mov     eax, [ebp+var_164]
.text:000007DD                 and     eax, [ebp+var_16C]
.text:000007E3                 xor     ecx, eax
.text:000007E5                 mov     eax, [ebp+var_168]
.text:000007EB                 and     eax, [ebp+var_16C]
.text:000007F1                 xor     ecx, eax
.text:000007F3                 add     edx, ecx
.text:000007F5                 mov     [ebp+var_178], edx
.text:000007FB                 mov     ecx, [ebp+var_150]
.text:00000801                 add     ecx, [ebp+var_174]
.text:00000807                 mov     [ebp+var_150], ecx
.text:0000080D                 mov     edx, [ebp+var_174]
.text:00000813                 add     edx, [ebp+var_178]
.text:00000819                 mov     [ebp+var_160], edx
.text:0000081F                 mov     eax, [ebp+var_150]
.text:00000825                 shl     eax, 1Ah
.text:00000828                 mov     ecx, [ebp+var_150]
.text:0000082E                 shr     ecx, 6
.text:00000831                 or      eax, ecx
.text:00000833                 mov     edx, [ebp+var_150]
.text:00000839                 shl     edx, 15h
.text:0000083C                 mov     ecx, [ebp+var_150]
.text:00000842                 shr     ecx, 0Bh
.text:00000845                 or      edx, ecx
.text:00000847                 xor     eax, edx
.text:00000849                 mov     edx, [ebp+var_150]
.text:0000084F                 shl     edx, 7
.text:00000852                 mov     ecx, [ebp+var_150]
.text:00000858                 shr     ecx, 19h
.text:0000085B                 or      edx, ecx
.text:0000085D                 xor     eax, edx
.text:0000085F                 add     eax, [ebp+var_15C]
.text:00000865                 mov     edx, [ebp+var_150]
.text:0000086B                 and     edx, [ebp+var_154]
.text:00000871                 mov     ecx, [ebp+var_150]
.text:00000877                 not     ecx
.text:00000879                 and     ecx, [ebp+var_158]
.text:0000087F                 xor     edx, ecx
.text:00000881                 add     eax, edx
.text:00000883                 mov     edx, [ebp+var_170]
.text:00000889                 add     eax, ds:dword_38[edx*4]
.text:00000890                 mov     ecx, [ebp+var_170]
.text:00000896                 add     eax, [ebp+ecx*4+var_138]
.text:0000089D                 mov     [ebp+var_174], eax
.text:000008A3                 mov     edx, [ebp+var_160]
.text:000008A9                 shl     edx, 1Eh
.text:000008AC                 mov     eax, [ebp+var_160]
.text:000008B2                 shr     eax, 2
.text:000008B5                 or      edx, eax
.text:000008B7                 mov     ecx, [ebp+var_160]
.text:000008BD                 shl     ecx, 13h
.text:000008C0                 mov     eax, [ebp+var_160]
.text:000008C6                 shr     eax, 0Dh
.text:000008C9                 or      ecx, eax
.text:000008CB                 xor     edx, ecx
.text:000008CD                 mov     ecx, [ebp+var_160]
.text:000008D3                 shl     ecx, 0Ah
.text:000008D6                 mov     eax, [ebp+var_160]
.text:000008DC                 shr     eax, 16h
.text:000008DF                 or      ecx, eax
.text:000008E1                 xor     edx, ecx
.text:000008E3                 mov     ecx, [ebp+var_160]
.text:000008E9                 and     ecx, [ebp+var_164]
.text:000008EF                 mov     eax, [ebp+var_160]
.text:000008F5                 and     eax, [ebp+var_168]
.text:000008FB                 xor     ecx, eax
.text:000008FD                 mov     eax, [ebp+var_164]
.text:00000903                 and     eax, [ebp+var_168]
.text:00000909                 xor     ecx, eax
.text:0000090B                 add     edx, ecx
.text:0000090D                 mov     [ebp+var_178], edx
.text:00000913                 mov     ecx, [ebp+var_16C]
.text:00000919                 add     ecx, [ebp+var_174]
.text:0000091F                 mov     [ebp+var_16C], ecx
.text:00000925                 mov     edx, [ebp+var_174]
.text:0000092B                 add     edx, [ebp+var_178]
.text:00000931                 mov     [ebp+var_15C], edx
.text:00000937                 mov     eax, [ebp+var_16C]
.text:0000093D                 shl     eax, 1Ah
.text:00000940                 mov     ecx, [ebp+var_16C]
.text:00000946                 shr     ecx, 6
.text:00000949                 or      eax, ecx
.text:0000094B                 mov     edx, [ebp+var_16C]
.text:00000951                 shl     edx, 15h
.text:00000954                 mov     ecx, [ebp+var_16C]
.text:0000095A                 shr     ecx, 0Bh
.text:0000095D                 or      edx, ecx
.text:0000095F                 xor     eax, edx
.text:00000961                 mov     edx, [ebp+var_16C]
.text:00000967                 shl     edx, 7
.text:0000096A                 mov     ecx, [ebp+var_16C]
.text:00000970                 shr     ecx, 19h
.text:00000973                 or      edx, ecx
.text:00000975                 xor     eax, edx
.text:00000977                 add     eax, [ebp+var_158]
.text:0000097D                 mov     edx, [ebp+var_16C]
.text:00000983                 and     edx, [ebp+var_150]
.text:00000989                 mov     ecx, [ebp+var_16C]
.text:0000098F                 not     ecx
.text:00000991                 and     ecx, [ebp+var_154]
.text:00000997                 xor     edx, ecx
.text:00000999                 add     eax, edx
.text:0000099B                 mov     edx, [ebp+var_170]
.text:000009A1                 add     eax, ds:dword_3C[edx*4]
.text:000009A8                 mov     ecx, [ebp+var_170]
.text:000009AE                 add     eax, [ebp+ecx*4+var_134]
.text:000009B5                 mov     [ebp+var_174], eax
.text:000009BB                 mov     edx, [ebp+var_15C]
.text:000009C1                 shl     edx, 1Eh
.text:000009C4                 mov     eax, [ebp+var_15C]
.text:000009CA                 shr     eax, 2
.text:000009CD                 or      edx, eax
.text:000009CF                 mov     ecx, [ebp+var_15C]
.text:000009D5                 shl     ecx, 13h
.text:000009D8                 mov     eax, [ebp+var_15C]
.text:000009DE                 shr     eax, 0Dh
.text:000009E1                 or      ecx, eax
.text:000009E3                 xor     edx, ecx
.text:000009E5                 mov     ecx, [ebp+var_15C]
.text:000009EB                 shl     ecx, 0Ah
.text:000009EE                 mov     eax, [ebp+var_15C]
.text:000009F4                 shr     eax, 16h
.text:000009F7                 or      ecx, eax
.text:000009F9                 xor     edx, ecx
.text:000009FB                 mov     ecx, [ebp+var_15C]
.text:00000A01                 and     ecx, [ebp+var_160]
.text:00000A07                 mov     eax, [ebp+var_15C]
.text:00000A0D                 and     eax, [ebp+var_164]
.text:00000A13                 xor     ecx, eax
.text:00000A15                 mov     eax, [ebp+var_160]
.text:00000A1B                 and     eax, [ebp+var_164]
.text:00000A21                 xor     ecx, eax
.text:00000A23                 add     edx, ecx
.text:00000A25                 mov     [ebp+var_178], edx
.text:00000A2B                 mov     ecx, [ebp+var_168]
.text:00000A31                 add     ecx, [ebp+var_174]
.text:00000A37                 mov     [ebp+var_168], ecx
.text:00000A3D                 mov     edx, [ebp+var_174]
.text:00000A43                 add     edx, [ebp+var_178]
.text:00000A49                 mov     [ebp+var_158], edx
.text:00000A4F                 mov     eax, [ebp+var_168]
.text:00000A55                 shl     eax, 1Ah
.text:00000A58                 mov     ecx, [ebp+var_168]
.text:00000A5E                 shr     ecx, 6
.text:00000A61                 or      eax, ecx
.text:00000A63                 mov     edx, [ebp+var_168]
.text:00000A69                 shl     edx, 15h
.text:00000A6C                 mov     ecx, [ebp+var_168]
.text:00000A72                 shr     ecx, 0Bh
.text:00000A75                 or      edx, ecx
.text:00000A77                 xor     eax, edx
.text:00000A79                 mov     edx, [ebp+var_168]
.text:00000A7F                 shl     edx, 7
.text:00000A82                 mov     ecx, [ebp+var_168]
.text:00000A88                 shr     ecx, 19h
.text:00000A8B                 or      edx, ecx
.text:00000A8D                 xor     eax, edx
.text:00000A8F                 add     eax, [ebp+var_154]
.text:00000A95                 mov     edx, [ebp+var_168]
.text:00000A9B                 and     edx, [ebp+var_16C]
.text:00000AA1                 mov     ecx, [ebp+var_168]
.text:00000AA7                 not     ecx
.text:00000AA9                 and     ecx, [ebp+var_150]
.text:00000AAF                 xor     edx, ecx
.text:00000AB1                 add     eax, edx
.text:00000AB3                 mov     edx, [ebp+var_170]
.text:00000AB9                 add     eax, ds:dword_40[edx*4]
.text:00000AC0                 mov     ecx, [ebp+var_170]
.text:00000AC6                 add     eax, [ebp+ecx*4+var_130]
.text:00000ACD                 mov     [ebp+var_174], eax
.text:00000AD3                 mov     edx, [ebp+var_158]
.text:00000AD9                 shl     edx, 1Eh
.text:00000ADC                 mov     eax, [ebp+var_158]
.text:00000AE2                 shr     eax, 2
.text:00000AE5                 or      edx, eax
.text:00000AE7                 mov     ecx, [ebp+var_158]
.text:00000AED                 shl     ecx, 13h
.text:00000AF0                 mov     eax, [ebp+var_158]
.text:00000AF6                 shr     eax, 0Dh
.text:00000AF9                 or      ecx, eax
.text:00000AFB                 xor     edx, ecx
.text:00000AFD                 mov     ecx, [ebp+var_158]
.text:00000B03                 shl     ecx, 0Ah
.text:00000B06                 mov     eax, [ebp+var_158]
.text:00000B0C                 shr     eax, 16h
.text:00000B0F                 or      ecx, eax
.text:00000B11                 xor     edx, ecx
.text:00000B13                 mov     ecx, [ebp+var_158]
.text:00000B19                 and     ecx, [ebp+var_15C]
.text:00000B1F                 mov     eax, [ebp+var_158]
.text:00000B25                 and     eax, [ebp+var_160]
.text:00000B2B                 xor     ecx, eax
.text:00000B2D                 mov     eax, [ebp+var_15C]
.text:00000B33                 and     eax, [ebp+var_160]
.text:00000B39                 xor     ecx, eax
.text:00000B3B                 add     edx, ecx
.text:00000B3D                 mov     [ebp+var_178], edx
.text:00000B43                 mov     ecx, [ebp+var_164]
.text:00000B49                 add     ecx, [ebp+var_174]
.text:00000B4F                 mov     [ebp+var_164], ecx
.text:00000B55                 mov     edx, [ebp+var_174]
.text:00000B5B                 add     edx, [ebp+var_178]
.text:00000B61                 mov     [ebp+var_154], edx
.text:00000B67                 mov     eax, [ebp+var_164]
.text:00000B6D                 shl     eax, 1Ah
.text:00000B70                 mov     ecx, [ebp+var_164]
.text:00000B76                 shr     ecx, 6
.text:00000B79                 or      eax, ecx
.text:00000B7B                 mov     edx, [ebp+var_164]
.text:00000B81                 shl     edx, 15h
.text:00000B84                 mov     ecx, [ebp+var_164]
.text:00000B8A                 shr     ecx, 0Bh
.text:00000B8D                 or      edx, ecx
.text:00000B8F                 xor     eax, edx
.text:00000B91                 mov     edx, [ebp+var_164]
.text:00000B97                 shl     edx, 7
.text:00000B9A                 mov     ecx, [ebp+var_164]
.text:00000BA0                 shr     ecx, 19h
.text:00000BA3                 or      edx, ecx
.text:00000BA5                 xor     eax, edx
.text:00000BA7                 add     eax, [ebp+var_150]
.text:00000BAD                 mov     edx, [ebp+var_164]
.text:00000BB3                 and     edx, [ebp+var_168]
.text:00000BB9                 mov     ecx, [ebp+var_164]
.text:00000BBF                 not     ecx
.text:00000BC1                 and     ecx, [ebp+var_16C]
.text:00000BC7                 xor     edx, ecx
.text:00000BC9                 add     eax, edx
.text:00000BCB                 mov     edx, [ebp+var_170]
.text:00000BD1                 add     eax, ds:dword_44[edx*4]
.text:00000BD8                 mov     ecx, [ebp+var_170]
.text:00000BDE                 add     eax, [ebp+ecx*4+var_12C]
.text:00000BE5                 mov     [ebp+var_174], eax
.text:00000BEB                 mov     edx, [ebp+var_154]
.text:00000BF1                 shl     edx, 1Eh
.text:00000BF4                 mov     eax, [ebp+var_154]
.text:00000BFA                 shr     eax, 2
.text:00000BFD                 or      edx, eax
.text:00000BFF                 mov     ecx, [ebp+var_154]
.text:00000C05                 shl     ecx, 13h
.text:00000C08                 mov     eax, [ebp+var_154]
.text:00000C0E                 shr     eax, 0Dh
.text:00000C11                 or      ecx, eax
.text:00000C13                 xor     edx, ecx
.text:00000C15                 mov     ecx, [ebp+var_154]
.text:00000C1B                 shl     ecx, 0Ah
.text:00000C1E                 mov     eax, [ebp+var_154]
.text:00000C24                 shr     eax, 16h
.text:00000C27                 or      ecx, eax
.text:00000C29                 xor     edx, ecx
.text:00000C2B                 mov     ecx, [ebp+var_154]
.text:00000C31                 and     ecx, [ebp+var_158]
.text:00000C37                 mov     eax, [ebp+var_154]
.text:00000C3D                 and     eax, [ebp+var_15C]
.text:00000C43                 xor     ecx, eax
.text:00000C45                 mov     eax, [ebp+var_158]
.text:00000C4B                 and     eax, [ebp+var_15C]
.text:00000C51                 xor     ecx, eax
.text:00000C53                 add     edx, ecx
.text:00000C55                 mov     [ebp+var_178], edx
.text:00000C5B                 mov     ecx, [ebp+var_160]
.text:00000C61                 add     ecx, [ebp+var_174]
.text:00000C67                 mov     [ebp+var_160], ecx
.text:00000C6D                 mov     edx, [ebp+var_174]
.text:00000C73                 add     edx, [ebp+var_178]
.text:00000C79                 mov     [ebp+var_150], edx
.text:00000C7F                 jmp     loc_3A3
.text:00000C84 ; ---------------------------------------------------------------------------
.text:00000C84
.text:00000C84 loc_C84:                                ; CODE XREF: _SHA256_Block+1EDj
.text:00000C84                 mov     eax, [ebp+arg_0]
.text:00000C87                 mov     ecx, [eax]
.text:00000C89                 add     ecx, [ebp+var_150]
.text:00000C8F                 mov     edx, [ebp+arg_0]
.text:00000C92                 mov     [edx], ecx
.text:00000C94                 mov     eax, [ebp+arg_0]
.text:00000C97                 mov     ecx, [eax+4]
.text:00000C9A                 add     ecx, [ebp+var_154]
.text:00000CA0                 mov     edx, [ebp+arg_0]
.text:00000CA3                 mov     [edx+4], ecx
.text:00000CA6                 mov     eax, [ebp+arg_0]
.text:00000CA9                 mov     ecx, [eax+8]
.text:00000CAC                 add     ecx, [ebp+var_158]
.text:00000CB2                 mov     edx, [ebp+arg_0]
.text:00000CB5                 mov     [edx+8], ecx
.text:00000CB8                 mov     eax, [ebp+arg_0]
.text:00000CBB                 mov     ecx, [eax+0Ch]
.text:00000CBE                 add     ecx, [ebp+var_15C]
.text:00000CC4                 mov     edx, [ebp+arg_0]
.text:00000CC7                 mov     [edx+0Ch], ecx
.text:00000CCA                 mov     eax, [ebp+arg_0]
.text:00000CCD                 mov     ecx, [eax+10h]
.text:00000CD0                 add     ecx, [ebp+var_160]
.text:00000CD6                 mov     edx, [ebp+arg_0]
.text:00000CD9                 mov     [edx+10h], ecx
.text:00000CDC                 mov     eax, [ebp+arg_0]
.text:00000CDF                 mov     ecx, [eax+14h]
.text:00000CE2                 add     ecx, [ebp+var_164]
.text:00000CE8                 mov     edx, [ebp+arg_0]
.text:00000CEB                 mov     [edx+14h], ecx
.text:00000CEE                 mov     eax, [ebp+arg_0]
.text:00000CF1                 mov     ecx, [eax+18h]
.text:00000CF4                 add     ecx, [ebp+var_168]
.text:00000CFA                 mov     edx, [ebp+arg_0]
.text:00000CFD                 mov     [edx+18h], ecx
.text:00000D00                 mov     eax, [ebp+arg_0]
.text:00000D03                 mov     ecx, [eax+1Ch]
.text:00000D06                 add     ecx, [ebp+var_16C]
.text:00000D0C                 mov     edx, [ebp+arg_0]
.text:00000D0F                 mov     [edx+1Ch], ecx
.text:00000D12                 push    edx
.text:00000D13                 mov     ecx, ebp
.text:00000D15                 push    eax
.text:00000D16                 lea     edx, $LN14
.text:00000D1C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D21                 pop     eax
.text:00000D22                 pop     edx
.text:00000D23                 pop     edi
.text:00000D24                 pop     esi
.text:00000D25                 mov     ecx, [ebp+var_4]
.text:00000D28                 xor     ecx, ebp
.text:00000D2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000D2F                 mov     esp, ebp
.text:00000D31                 pop     ebp
.text:00000D32                 retn
.text:00000D32 _SHA256_Block   endp
.text:00000D32
.text:00000D32 ; ---------------------------------------------------------------------------
.text:00000D33                 align 4
.text:00000D34 $LN14           dd 1                    ; DATA XREF: _SHA256_Block+B4Ao
.text:00000D38                 dd offset $LN13
.text:00000D3C $LN13           dd 0FFFFFEB8h, 140h     ; DATA XREF: .text:00000D38o
.text:00000D44                 dd offset $LN12
.text:00000D48 $LN12           dd 0CCCC0077h           ; DATA XREF: .text:00000D44o
.text:00000D4C
.text:00000D4C ; =============== S U B R O U T I N E =======================================
.text:00000D4C
.text:00000D4C ; Attributes: bp-based frame
.text:00000D4C
.text:00000D4C                 public _SHA256_Init
.text:00000D4C _SHA256_Init    proc near               ; CODE XREF: _SHA256_Simple+24p
.text:00000D4C                                         ; _sha256_init+1Ep ...
.text:00000D4C
.text:00000D4C arg_0           = dword ptr  8
.text:00000D4C
.text:00000D4C                 push    ebp
.text:00000D4D                 mov     ebp, esp
.text:00000D4F                 mov     eax, [ebp+arg_0]
.text:00000D52                 push    eax
.text:00000D53                 call    _SHA256_Core_Init
.text:00000D58                 add     esp, 4
.text:00000D5B                 mov     ecx, [ebp+arg_0]
.text:00000D5E                 mov     dword ptr [ecx+60h], 0
.text:00000D65                 mov     edx, [ebp+arg_0]
.text:00000D68                 mov     dword ptr [edx+68h], 0
.text:00000D6F                 mov     eax, [ebp+arg_0]
.text:00000D72                 mov     dword ptr [eax+64h], 0
.text:00000D79                 cmp     ebp, esp
.text:00000D7B                 call    __RTC_CheckEsp
.text:00000D80                 pop     ebp
.text:00000D81                 retn
.text:00000D81 _SHA256_Init    endp
.text:00000D81
.text:00000D81 ; ---------------------------------------------------------------------------
.text:00000D82                 db 0Ah dup(0CCh)
.text:00000D8C
.text:00000D8C ; =============== S U B R O U T I N E =======================================
.text:00000D8C
.text:00000D8C ; Attributes: bp-based frame
.text:00000D8C
.text:00000D8C ; int __cdecl SHA256_Bytes(int, int, size_t Size)
.text:00000D8C                 public _SHA256_Bytes
.text:00000D8C _SHA256_Bytes   proc near               ; CODE XREF: _SHA256_Final+8Cp
.text:00000D8C                                         ; _SHA256_Final+10Ep ...
.text:00000D8C
.text:00000D8C var_58          = dword ptr -58h
.text:00000D8C var_54          = dword ptr -54h
.text:00000D8C var_4C          = dword ptr -4Ch
.text:00000D8C Src             = dword ptr -8
.text:00000D8C var_4           = dword ptr -4
.text:00000D8C arg_0           = dword ptr  8
.text:00000D8C arg_4           = dword ptr  0Ch
.text:00000D8C Size            = dword ptr  10h
.text:00000D8C
.text:00000D8C                 push    ebp
.text:00000D8D                 mov     ebp, esp
.text:00000D8F                 sub     esp, 58h
.text:00000D92                 push    edi
.text:00000D93                 lea     edi, [ebp+var_58]
.text:00000D96                 mov     ecx, 16h
.text:00000D9B                 mov     eax, 0CCCCCCCCh
.text:00000DA0                 rep stosd
.text:00000DA2                 mov     eax, dword ptr ds:___security_cookie
.text:00000DA7                 xor     eax, ebp
.text:00000DA9                 mov     [ebp+var_4], eax
.text:00000DAC                 mov     eax, [ebp+arg_4]
.text:00000DAF                 mov     [ebp+Src], eax
.text:00000DB2                 mov     ecx, [ebp+Size]
.text:00000DB5                 mov     [ebp+var_54], ecx
.text:00000DB8                 mov     edx, [ebp+arg_0]
.text:00000DBB                 mov     eax, [edx+68h]
.text:00000DBE                 add     eax, [ebp+var_54]
.text:00000DC1                 mov     ecx, [ebp+arg_0]
.text:00000DC4                 mov     [ecx+68h], eax
.text:00000DC7                 mov     edx, [ebp+arg_0]
.text:00000DCA                 mov     eax, [edx+68h]
.text:00000DCD                 cmp     eax, [ebp+var_54]
.text:00000DD0                 sbb     ecx, ecx
.text:00000DD2                 neg     ecx
.text:00000DD4                 mov     edx, [ebp+arg_0]
.text:00000DD7                 add     ecx, [edx+64h]
.text:00000DDA                 mov     eax, [ebp+arg_0]
.text:00000DDD                 mov     [eax+64h], ecx
.text:00000DE0                 mov     ecx, [ebp+arg_0]
.text:00000DE3                 cmp     dword ptr [ecx+60h], 0
.text:00000DE7                 jz      short loc_E29
.text:00000DE9                 mov     edx, [ebp+arg_0]
.text:00000DEC                 mov     eax, [edx+60h]
.text:00000DEF                 add     eax, [ebp+Size]
.text:00000DF2                 cmp     eax, 40h ; '@'
.text:00000DF5                 jge     short loc_E29
.text:00000DF7                 mov     ecx, [ebp+Size]
.text:00000DFA                 push    ecx             ; Size
.text:00000DFB                 mov     edx, [ebp+Src]
.text:00000DFE                 push    edx             ; Src
.text:00000DFF                 mov     eax, [ebp+arg_0]
.text:00000E02                 mov     ecx, [eax+60h]
.text:00000E05                 mov     edx, [ebp+arg_0]
.text:00000E08                 lea     eax, [edx+ecx+20h]
.text:00000E0C                 push    eax             ; Dst
.text:00000E0D                 call    _memcpy
.text:00000E12                 add     esp, 0Ch
.text:00000E15                 mov     ecx, [ebp+arg_0]
.text:00000E18                 mov     edx, [ecx+60h]
.text:00000E1B                 add     edx, [ebp+Size]
.text:00000E1E                 mov     eax, [ebp+arg_0]
.text:00000E21                 mov     [eax+60h], edx
.text:00000E24                 jmp     loc_F20
.text:00000E29 ; ---------------------------------------------------------------------------
.text:00000E29
.text:00000E29 loc_E29:                                ; CODE XREF: _SHA256_Bytes+5Bj
.text:00000E29                                         ; _SHA256_Bytes+69j ...
.text:00000E29                 mov     ecx, [ebp+arg_0]
.text:00000E2C                 mov     edx, [ecx+60h]
.text:00000E2F                 add     edx, [ebp+Size]
.text:00000E32                 cmp     edx, 40h ; '@'
.text:00000E35                 jl      loc_F00
.text:00000E3B                 mov     eax, [ebp+arg_0]
.text:00000E3E                 mov     ecx, 40h ; '@'
.text:00000E43                 sub     ecx, [eax+60h]
.text:00000E46                 push    ecx             ; Size
.text:00000E47                 mov     edx, [ebp+Src]
.text:00000E4A                 push    edx             ; Src
.text:00000E4B                 mov     eax, [ebp+arg_0]
.text:00000E4E                 mov     ecx, [eax+60h]
.text:00000E51                 mov     edx, [ebp+arg_0]
.text:00000E54                 lea     eax, [edx+ecx+20h]
.text:00000E58                 push    eax             ; Dst
.text:00000E59                 call    _memcpy
.text:00000E5E                 add     esp, 0Ch
.text:00000E61                 mov     ecx, [ebp+arg_0]
.text:00000E64                 mov     edx, 40h ; '@'
.text:00000E69                 sub     edx, [ecx+60h]
.text:00000E6C                 add     edx, [ebp+Src]
.text:00000E6F                 mov     [ebp+Src], edx
.text:00000E72                 mov     eax, [ebp+arg_0]
.text:00000E75                 mov     ecx, 40h ; '@'
.text:00000E7A                 sub     ecx, [eax+60h]
.text:00000E7D                 mov     edx, [ebp+Size]
.text:00000E80                 sub     edx, ecx
.text:00000E82                 mov     [ebp+Size], edx
.text:00000E85                 mov     [ebp+var_58], 0
.text:00000E8C                 jmp     short loc_E97
.text:00000E8E ; ---------------------------------------------------------------------------
.text:00000E8E
.text:00000E8E loc_E8E:                                ; CODE XREF: _SHA256_Bytes+153j
.text:00000E8E                 mov     eax, [ebp+var_58]
.text:00000E91                 add     eax, 1
.text:00000E94                 mov     [ebp+var_58], eax
.text:00000E97
.text:00000E97 loc_E97:                                ; CODE XREF: _SHA256_Bytes+100j
.text:00000E97                 cmp     [ebp+var_58], 10h
.text:00000E9B                 jge     short loc_EE1
.text:00000E9D                 mov     ecx, [ebp+var_58]
.text:00000EA0                 mov     edx, [ebp+arg_0]
.text:00000EA3                 movzx   eax, byte ptr [edx+ecx*4+20h]
.text:00000EA8                 shl     eax, 18h
.text:00000EAB                 mov     ecx, [ebp+var_58]
.text:00000EAE                 mov     edx, [ebp+arg_0]
.text:00000EB1                 movzx   ecx, byte ptr [edx+ecx*4+21h]
.text:00000EB6                 shl     ecx, 10h
.text:00000EB9                 or      eax, ecx
.text:00000EBB                 mov     edx, [ebp+var_58]
.text:00000EBE                 mov     ecx, [ebp+arg_0]
.text:00000EC1                 movzx   edx, byte ptr [ecx+edx*4+22h]
.text:00000EC6                 shl     edx, 8
.text:00000EC9                 or      eax, edx
.text:00000ECB                 mov     ecx, [ebp+var_58]
.text:00000ECE                 mov     edx, [ebp+arg_0]
.text:00000ED1                 movzx   ecx, byte ptr [edx+ecx*4+23h]
.text:00000ED6                 or      eax, ecx
.text:00000ED8                 mov     edx, [ebp+var_58]
.text:00000EDB                 mov     [ebp+edx*4+var_4C], eax
.text:00000EDF                 jmp     short loc_E8E
.text:00000EE1 ; ---------------------------------------------------------------------------
.text:00000EE1
.text:00000EE1 loc_EE1:                                ; CODE XREF: _SHA256_Bytes+10Fj
.text:00000EE1                 lea     eax, [ebp+var_4C]
.text:00000EE4                 push    eax
.text:00000EE5                 mov     ecx, [ebp+arg_0]
.text:00000EE8                 push    ecx
.text:00000EE9                 call    _SHA256_Block
.text:00000EEE                 add     esp, 8
.text:00000EF1                 mov     edx, [ebp+arg_0]
.text:00000EF4                 mov     dword ptr [edx+60h], 0
.text:00000EFB                 jmp     loc_E29
.text:00000F00 ; ---------------------------------------------------------------------------
.text:00000F00
.text:00000F00 loc_F00:                                ; CODE XREF: _SHA256_Bytes+A9j
.text:00000F00                 mov     eax, [ebp+Size]
.text:00000F03                 push    eax             ; Size
.text:00000F04                 mov     ecx, [ebp+Src]
.text:00000F07                 push    ecx             ; Src
.text:00000F08                 mov     edx, [ebp+arg_0]
.text:00000F0B                 add     edx, 20h ; ' '
.text:00000F0E                 push    edx             ; Dst
.text:00000F0F                 call    _memcpy
.text:00000F14                 add     esp, 0Ch
.text:00000F17                 mov     eax, [ebp+arg_0]
.text:00000F1A                 mov     ecx, [ebp+Size]
.text:00000F1D                 mov     [eax+60h], ecx
.text:00000F20
.text:00000F20 loc_F20:                                ; CODE XREF: _SHA256_Bytes+98j
.text:00000F20                 push    edx
.text:00000F21                 mov     ecx, ebp
.text:00000F23                 push    eax
.text:00000F24                 lea     edx, $LN12_0
.text:00000F2A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F2F                 pop     eax
.text:00000F30                 pop     edx
.text:00000F31                 pop     edi
.text:00000F32                 mov     ecx, [ebp+var_4]
.text:00000F35                 xor     ecx, ebp
.text:00000F37                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000F3C                 add     esp, 58h
.text:00000F3F                 cmp     ebp, esp
.text:00000F41                 call    __RTC_CheckEsp
.text:00000F46                 mov     esp, ebp
.text:00000F48                 pop     ebp
.text:00000F49                 retn
.text:00000F49 _SHA256_Bytes   endp
.text:00000F49
.text:00000F49 ; ---------------------------------------------------------------------------
.text:00000F4A                 align 4
.text:00000F4C $LN12_0         dd 1                    ; DATA XREF: _SHA256_Bytes+198o
.text:00000F50                 dd offset $LN11
.text:00000F54 $LN11           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000F50o
.text:00000F5C                 dd offset $LN10         ; "wordblock"
.text:00000F60 $LN10           db 'wordblock',0        ; DATA XREF: .text:00000F5Co
.text:00000F6A                 align 4
.text:00000F6C
.text:00000F6C ; =============== S U B R O U T I N E =======================================
.text:00000F6C
.text:00000F6C ; Attributes: bp-based frame
.text:00000F6C
.text:00000F6C                 public _SHA256_Final
.text:00000F6C _SHA256_Final   proc near               ; CODE XREF: _SHA256_Simple+48p
.text:00000F6C                                         ; _sha256_final+19p ...
.text:00000F6C
.text:00000F6C var_5C          = dword ptr -5Ch
.text:00000F6C var_58          = dword ptr -58h
.text:00000F6C Dst             = byte ptr -50h
.text:00000F6C var_4F          = byte ptr -4Fh
.text:00000F6C var_4E          = byte ptr -4Eh
.text:00000F6C var_4D          = byte ptr -4Dh
.text:00000F6C var_4C          = byte ptr -4Ch
.text:00000F6C var_4B          = byte ptr -4Bh
.text:00000F6C var_4A          = byte ptr -4Ah
.text:00000F6C var_49          = byte ptr -49h
.text:00000F6C Size            = dword ptr -0Ch
.text:00000F6C var_8           = dword ptr -8
.text:00000F6C var_4           = dword ptr -4
.text:00000F6C arg_0           = dword ptr  8
.text:00000F6C arg_4           = dword ptr  0Ch
.text:00000F6C
.text:00000F6C                 push    ebp
.text:00000F6D                 mov     ebp, esp
.text:00000F6F                 sub     esp, 5Ch
.text:00000F72                 push    edi
.text:00000F73                 lea     edi, [ebp+var_5C]
.text:00000F76                 mov     ecx, 17h
.text:00000F7B                 mov     eax, 0CCCCCCCCh
.text:00000F80                 rep stosd
.text:00000F82                 mov     eax, dword ptr ds:___security_cookie
.text:00000F87                 xor     eax, ebp
.text:00000F89                 mov     [ebp+var_4], eax
.text:00000F8C                 mov     eax, [ebp+arg_0]
.text:00000F8F                 cmp     dword ptr [eax+60h], 38h ; '8'
.text:00000F93                 jl      short loc_FA5
.text:00000F95                 mov     ecx, [ebp+arg_0]
.text:00000F98                 mov     edx, 78h ; 'x'
.text:00000F9D                 sub     edx, [ecx+60h]
.text:00000FA0                 mov     [ebp+Size], edx
.text:00000FA3                 jmp     short loc_FB3
.text:00000FA5 ; ---------------------------------------------------------------------------
.text:00000FA5
.text:00000FA5 loc_FA5:                                ; CODE XREF: _SHA256_Final+27j
.text:00000FA5                 mov     eax, [ebp+arg_0]
.text:00000FA8                 mov     ecx, 38h ; '8'
.text:00000FAD                 sub     ecx, [eax+60h]
.text:00000FB0                 mov     [ebp+Size], ecx
.text:00000FB3
.text:00000FB3 loc_FB3:                                ; CODE XREF: _SHA256_Final+37j
.text:00000FB3                 mov     edx, [ebp+arg_0]
.text:00000FB6                 mov     eax, [edx+64h]
.text:00000FB9                 shl     eax, 3
.text:00000FBC                 mov     ecx, [ebp+arg_0]
.text:00000FBF                 mov     edx, [ecx+68h]
.text:00000FC2                 shr     edx, 1Dh
.text:00000FC5                 or      eax, edx
.text:00000FC7                 mov     [ebp+var_58], eax
.text:00000FCA                 mov     eax, [ebp+arg_0]
.text:00000FCD                 mov     ecx, [eax+68h]
.text:00000FD0                 shl     ecx, 3
.text:00000FD3                 mov     [ebp+var_5C], ecx
.text:00000FD6                 mov     edx, [ebp+Size]
.text:00000FD9                 push    edx             ; Size
.text:00000FDA                 push    0               ; Val
.text:00000FDC                 lea     eax, [ebp+Dst]
.text:00000FDF                 push    eax             ; Dst
.text:00000FE0                 call    _memset
.text:00000FE5                 add     esp, 0Ch
.text:00000FE8                 mov     [ebp+Dst], 80h ; 'Ç'
.text:00000FEC                 mov     ecx, [ebp+Size]
.text:00000FEF                 push    ecx             ; Size
.text:00000FF0                 lea     edx, [ebp+Dst]
.text:00000FF3                 push    edx             ; int
.text:00000FF4                 mov     eax, [ebp+arg_0]
.text:00000FF7                 push    eax             ; int
.text:00000FF8                 call    _SHA256_Bytes
.text:00000FFD                 add     esp, 0Ch
.text:00001000                 mov     ecx, [ebp+var_58]
.text:00001003                 shr     ecx, 18h
.text:00001006                 and     ecx, 0FFh
.text:0000100C                 mov     [ebp+Dst], cl
.text:0000100F                 mov     edx, [ebp+var_58]
.text:00001012                 shr     edx, 10h
.text:00001015                 and     edx, 0FFh
.text:0000101B                 mov     [ebp+var_4F], dl
.text:0000101E                 mov     eax, [ebp+var_58]
.text:00001021                 shr     eax, 8
.text:00001024                 and     eax, 0FFh
.text:00001029                 mov     [ebp+var_4E], al
.text:0000102C                 mov     ecx, [ebp+var_58]
.text:0000102F                 and     ecx, 0FFh
.text:00001035                 mov     [ebp+var_4D], cl
.text:00001038                 mov     edx, [ebp+var_5C]
.text:0000103B                 shr     edx, 18h
.text:0000103E                 and     edx, 0FFh
.text:00001044                 mov     [ebp+var_4C], dl
.text:00001047                 mov     eax, [ebp+var_5C]
.text:0000104A                 shr     eax, 10h
.text:0000104D                 and     eax, 0FFh
.text:00001052                 mov     [ebp+var_4B], al
.text:00001055                 mov     ecx, [ebp+var_5C]
.text:00001058                 shr     ecx, 8
.text:0000105B                 and     ecx, 0FFh
.text:00001061                 mov     [ebp+var_4A], cl
.text:00001064                 mov     edx, [ebp+var_5C]
.text:00001067                 and     edx, 0FFh
.text:0000106D                 mov     [ebp+var_49], dl
.text:00001070                 push    8               ; Size
.text:00001072                 lea     eax, [ebp+Dst]
.text:00001075                 push    eax             ; int
.text:00001076                 mov     ecx, [ebp+arg_0]
.text:00001079                 push    ecx             ; int
.text:0000107A                 call    _SHA256_Bytes
.text:0000107F                 add     esp, 0Ch
.text:00001082                 mov     [ebp+var_8], 0
.text:00001089                 jmp     short loc_1094
.text:0000108B ; ---------------------------------------------------------------------------
.text:0000108B
.text:0000108B loc_108B:                               ; CODE XREF: _SHA256_Final+199j
.text:0000108B                 mov     edx, [ebp+var_8]
.text:0000108E                 add     edx, 1
.text:00001091                 mov     [ebp+var_8], edx
.text:00001094
.text:00001094 loc_1094:                               ; CODE XREF: _SHA256_Final+11Dj
.text:00001094                 cmp     [ebp+var_8], 8
.text:00001098                 jge     short loc_1107
.text:0000109A                 mov     eax, [ebp+var_8]
.text:0000109D                 mov     ecx, [ebp+arg_0]
.text:000010A0                 mov     edx, [ecx+eax*4]
.text:000010A3                 shr     edx, 18h
.text:000010A6                 and     edx, 0FFh
.text:000010AC                 mov     eax, [ebp+var_8]
.text:000010AF                 mov     ecx, [ebp+arg_4]
.text:000010B2                 mov     [ecx+eax*4], dl
.text:000010B5                 mov     edx, [ebp+var_8]
.text:000010B8                 mov     eax, [ebp+arg_0]
.text:000010BB                 mov     ecx, [eax+edx*4]
.text:000010BE                 shr     ecx, 10h
.text:000010C1                 and     ecx, 0FFh
.text:000010C7                 mov     edx, [ebp+var_8]
.text:000010CA                 mov     eax, [ebp+arg_4]
.text:000010CD                 mov     [eax+edx*4+1], cl
.text:000010D1                 mov     ecx, [ebp+var_8]
.text:000010D4                 mov     edx, [ebp+arg_0]
.text:000010D7                 mov     eax, [edx+ecx*4]
.text:000010DA                 shr     eax, 8
.text:000010DD                 and     eax, 0FFh
.text:000010E2                 mov     ecx, [ebp+var_8]
.text:000010E5                 mov     edx, [ebp+arg_4]
.text:000010E8                 mov     [edx+ecx*4+2], al
.text:000010EC                 mov     eax, [ebp+var_8]
.text:000010EF                 mov     ecx, [ebp+arg_0]
.text:000010F2                 mov     edx, [ecx+eax*4]
.text:000010F5                 and     edx, 0FFh
.text:000010FB                 mov     eax, [ebp+var_8]
.text:000010FE                 mov     ecx, [ebp+arg_4]
.text:00001101                 mov     [ecx+eax*4+3], dl
.text:00001105                 jmp     short loc_108B
.text:00001107 ; ---------------------------------------------------------------------------
.text:00001107
.text:00001107 loc_1107:                               ; CODE XREF: _SHA256_Final+12Cj
.text:00001107                 push    edx
.text:00001108                 mov     ecx, ebp
.text:0000110A                 push    eax
.text:0000110B                 lea     edx, $LN10_0
.text:00001111                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001116                 pop     eax
.text:00001117                 pop     edx
.text:00001118                 pop     edi
.text:00001119                 mov     ecx, [ebp+var_4]
.text:0000111C                 xor     ecx, ebp
.text:0000111E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001123                 add     esp, 5Ch
.text:00001126                 cmp     ebp, esp
.text:00001128                 call    __RTC_CheckEsp
.text:0000112D                 mov     esp, ebp
.text:0000112F                 pop     ebp
.text:00001130                 retn
.text:00001130 _SHA256_Final   endp
.text:00001130
.text:00001130 ; ---------------------------------------------------------------------------
.text:00001131                 align 4
.text:00001134 $LN10_0         dd 1                    ; DATA XREF: _SHA256_Final+19Fo
.text:00001138                 dd offset $LN9
.text:0000113C $LN9            dd 0FFFFFFB0h, 40h      ; DATA XREF: .text:00001138o
.text:00001144                 dd offset $LN8
.text:00001148 $LN8            dd 0CCCC0063h           ; DATA XREF: .text:00001144o
.text:0000114C
.text:0000114C ; =============== S U B R O U T I N E =======================================
.text:0000114C
.text:0000114C ; Attributes: bp-based frame
.text:0000114C
.text:0000114C ; int __cdecl SHA256_Simple(int, size_t Size, int)
.text:0000114C                 public _SHA256_Simple
.text:0000114C _SHA256_Simple  proc near
.text:0000114C
.text:0000114C var_78          = byte ptr -78h
.text:0000114C var_74          = dword ptr -74h
.text:0000114C var_4           = dword ptr -4
.text:0000114C arg_0           = dword ptr  8
.text:0000114C Size            = dword ptr  0Ch
.text:0000114C arg_8           = dword ptr  10h
.text:0000114C
.text:0000114C                 push    ebp
.text:0000114D                 mov     ebp, esp
.text:0000114F                 sub     esp, 78h
.text:00001152                 push    edi
.text:00001153                 lea     edi, [ebp+var_78]
.text:00001156                 mov     ecx, 1Eh
.text:0000115B                 mov     eax, 0CCCCCCCCh
.text:00001160                 rep stosd
.text:00001162                 mov     eax, dword ptr ds:___security_cookie
.text:00001167                 xor     eax, ebp
.text:00001169                 mov     [ebp+var_4], eax
.text:0000116C                 lea     eax, [ebp+var_74]
.text:0000116F                 push    eax
.text:00001170                 call    _SHA256_Init
.text:00001175                 add     esp, 4
.text:00001178                 mov     ecx, [ebp+Size]
.text:0000117B                 push    ecx             ; Size
.text:0000117C                 mov     edx, [ebp+arg_0]
.text:0000117F                 push    edx             ; int
.text:00001180                 lea     eax, [ebp+var_74]
.text:00001183                 push    eax             ; int
.text:00001184                 call    _SHA256_Bytes
.text:00001189                 add     esp, 0Ch
.text:0000118C                 mov     ecx, [ebp+arg_8]
.text:0000118F                 push    ecx
.text:00001190                 lea     edx, [ebp+var_74]
.text:00001193                 push    edx
.text:00001194                 call    _SHA256_Final
.text:00001199                 add     esp, 8
.text:0000119C                 push    edx
.text:0000119D                 mov     ecx, ebp
.text:0000119F                 push    eax
.text:000011A0                 lea     edx, $LN5
.text:000011A6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000011AB                 pop     eax
.text:000011AC                 pop     edx
.text:000011AD                 pop     edi
.text:000011AE                 mov     ecx, [ebp+var_4]
.text:000011B1                 xor     ecx, ebp
.text:000011B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000011B8                 add     esp, 78h
.text:000011BB                 cmp     ebp, esp
.text:000011BD                 call    __RTC_CheckEsp
.text:000011C2                 mov     esp, ebp
.text:000011C4                 pop     ebp
.text:000011C5                 retn
.text:000011C5 _SHA256_Simple  endp
.text:000011C5
.text:000011C5 ; ---------------------------------------------------------------------------
.text:000011C6                 align 4
.text:000011C8 $LN5            dd 1                    ; DATA XREF: _SHA256_Simple+54o
.text:000011CC                 dd offset $LN4
.text:000011D0 $LN4            dd 0FFFFFF8Ch, 6Ch      ; DATA XREF: .text:000011CCo
.text:000011D8                 dd offset $LN3
.text:000011DC $LN3            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000011D8o
.text:000011EC
.text:000011EC ; =============== S U B R O U T I N E =======================================
.text:000011EC
.text:000011EC ; Attributes: bp-based frame
.text:000011EC
.text:000011EC _sha256_init    proc near               ; DATA XREF: .rdata:_ssh_sha256o
.text:000011EC
.text:000011EC var_4           = dword ptr -4
.text:000011EC
.text:000011EC                 push    ebp
.text:000011ED                 mov     ebp, esp
.text:000011EF                 push    ecx
.text:000011F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011F7                 push    6Ch ; 'l'
.text:000011F9                 push    1
.text:000011FB                 call    _safemalloc
.text:00001200                 add     esp, 8
.text:00001203                 mov     [ebp+var_4], eax
.text:00001206                 mov     eax, [ebp+var_4]
.text:00001209                 push    eax
.text:0000120A                 call    _SHA256_Init
.text:0000120F                 add     esp, 4
.text:00001212                 mov     eax, [ebp+var_4]
.text:00001215                 add     esp, 4
.text:00001218                 cmp     ebp, esp
.text:0000121A                 call    __RTC_CheckEsp
.text:0000121F                 mov     esp, ebp
.text:00001221                 pop     ebp
.text:00001222                 retn
.text:00001222 _sha256_init    endp
.text:00001222
.text:00001222 ; ---------------------------------------------------------------------------
.text:00001223                 db 9 dup(0CCh)
.text:0000122C
.text:0000122C ; =============== S U B R O U T I N E =======================================
.text:0000122C
.text:0000122C ; Attributes: bp-based frame
.text:0000122C
.text:0000122C ; int __cdecl sha256_bytes(int, int, size_t Size)
.text:0000122C _sha256_bytes   proc near               ; DATA XREF: .rdata:0000012Co
.text:0000122C
.text:0000122C var_4           = dword ptr -4
.text:0000122C arg_0           = dword ptr  8
.text:0000122C arg_4           = dword ptr  0Ch
.text:0000122C Size            = dword ptr  10h
.text:0000122C
.text:0000122C                 push    ebp
.text:0000122D                 mov     ebp, esp
.text:0000122F                 push    ecx
.text:00001230                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001237                 mov     eax, [ebp+arg_0]
.text:0000123A                 mov     [ebp+var_4], eax
.text:0000123D                 mov     ecx, [ebp+Size]
.text:00001240                 push    ecx             ; Size
.text:00001241                 mov     edx, [ebp+arg_4]
.text:00001244                 push    edx             ; int
.text:00001245                 mov     eax, [ebp+var_4]
.text:00001248                 push    eax             ; int
.text:00001249                 call    _SHA256_Bytes
.text:0000124E                 add     esp, 0Ch
.text:00001251                 add     esp, 4
.text:00001254                 cmp     ebp, esp
.text:00001256                 call    __RTC_CheckEsp
.text:0000125B                 mov     esp, ebp
.text:0000125D                 pop     ebp
.text:0000125E                 retn
.text:0000125E _sha256_bytes   endp
.text:0000125E
.text:0000125E ; ---------------------------------------------------------------------------
.text:0000125F                 db 0Dh dup(0CCh)
.text:0000126C
.text:0000126C ; =============== S U B R O U T I N E =======================================
.text:0000126C
.text:0000126C ; Attributes: bp-based frame
.text:0000126C
.text:0000126C _sha256_final   proc near               ; DATA XREF: .rdata:00000130o
.text:0000126C
.text:0000126C var_4           = dword ptr -4
.text:0000126C arg_0           = dword ptr  8
.text:0000126C arg_4           = dword ptr  0Ch
.text:0000126C
.text:0000126C                 push    ebp
.text:0000126D                 mov     ebp, esp
.text:0000126F                 push    ecx
.text:00001270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001277                 mov     eax, [ebp+arg_0]
.text:0000127A                 mov     [ebp+var_4], eax
.text:0000127D                 mov     ecx, [ebp+arg_4]
.text:00001280                 push    ecx
.text:00001281                 mov     edx, [ebp+var_4]
.text:00001284                 push    edx
.text:00001285                 call    _SHA256_Final
.text:0000128A                 add     esp, 8
.text:0000128D                 mov     eax, [ebp+var_4]
.text:00001290                 push    eax
.text:00001291                 call    _safefree
.text:00001296                 add     esp, 4
.text:00001299                 add     esp, 4
.text:0000129C                 cmp     ebp, esp
.text:0000129E                 call    __RTC_CheckEsp
.text:000012A3                 mov     esp, ebp
.text:000012A5                 pop     ebp
.text:000012A6                 retn
.text:000012A6 _sha256_final   endp
.text:000012A6
.text:000012A6 ; ---------------------------------------------------------------------------
.text:000012A7                 db 5 dup(0CCh)
.text:000012AC
.text:000012AC ; =============== S U B R O U T I N E =======================================
.text:000012AC
.text:000012AC ; Attributes: bp-based frame
.text:000012AC
.text:000012AC _sha256_make_context proc near          ; DATA XREF: .rdata:_ssh_hmac_sha256o
.text:000012AC                 push    ebp
.text:000012AD                 mov     ebp, esp
.text:000012AF                 push    6Ch ; 'l'
.text:000012B1                 push    3
.text:000012B3                 call    _safemalloc
.text:000012B8                 add     esp, 8
.text:000012BB                 cmp     ebp, esp
.text:000012BD                 call    __RTC_CheckEsp
.text:000012C2                 pop     ebp
.text:000012C3                 retn
.text:000012C3 _sha256_make_context endp
.text:000012C3
.text:000012C3 ; ---------------------------------------------------------------------------
.text:000012C4                 db 8 dup(0CCh)
.text:000012CC
.text:000012CC ; =============== S U B R O U T I N E =======================================
.text:000012CC
.text:000012CC ; Attributes: bp-based frame
.text:000012CC
.text:000012CC _sha256_free_context proc near          ; DATA XREF: .rdata:00000140o
.text:000012CC
.text:000012CC arg_0           = dword ptr  8
.text:000012CC
.text:000012CC                 push    ebp
.text:000012CD                 mov     ebp, esp
.text:000012CF                 mov     eax, [ebp+arg_0]
.text:000012D2                 push    eax
.text:000012D3                 call    _safefree
.text:000012D8                 add     esp, 4
.text:000012DB                 cmp     ebp, esp
.text:000012DD                 call    __RTC_CheckEsp
.text:000012E2                 pop     ebp
.text:000012E3                 retn
.text:000012E3 _sha256_free_context endp
.text:000012E3
.text:000012E3 ; ---------------------------------------------------------------------------
.text:000012E4                 db 8 dup(0CCh)
.text:000012EC
.text:000012EC ; =============== S U B R O U T I N E =======================================
.text:000012EC
.text:000012EC ; Attributes: bp-based frame
.text:000012EC
.text:000012EC _sha256_key     proc near               ; DATA XREF: .rdata:00000144o
.text:000012EC
.text:000012EC arg_0           = dword ptr  8
.text:000012EC arg_4           = dword ptr  0Ch
.text:000012EC
.text:000012EC                 push    ebp
.text:000012ED                 mov     ebp, esp
.text:000012EF                 push    20h ; ' '
.text:000012F1                 mov     eax, [ebp+arg_4]
.text:000012F4                 push    eax
.text:000012F5                 mov     ecx, [ebp+arg_0]
.text:000012F8                 push    ecx
.text:000012F9                 call    _sha256_key_internal
.text:000012FE                 add     esp, 0Ch
.text:00001301                 cmp     ebp, esp
.text:00001303                 call    __RTC_CheckEsp
.text:00001308                 pop     ebp
.text:00001309                 retn
.text:00001309 _sha256_key     endp
.text:00001309
.text:00001309 ; ---------------------------------------------------------------------------
.text:0000130A                 align 4
.text:0000130C
.text:0000130C ; =============== S U B R O U T I N E =======================================
.text:0000130C
.text:0000130C ; Attributes: bp-based frame
.text:0000130C
.text:0000130C _sha256_key_internal proc near          ; CODE XREF: _sha256_key+Dp
.text:0000130C
.text:0000130C var_54          = dword ptr -54h
.text:0000130C Dst             = byte ptr -4Ch
.text:0000130C var_8           = dword ptr -8
.text:0000130C var_4           = dword ptr -4
.text:0000130C arg_0           = dword ptr  8
.text:0000130C arg_4           = dword ptr  0Ch
.text:0000130C arg_8           = dword ptr  10h
.text:0000130C
.text:0000130C                 push    ebp
.text:0000130D                 mov     ebp, esp
.text:0000130F                 sub     esp, 54h
.text:00001312                 push    edi
.text:00001313                 lea     edi, [ebp+var_54]
.text:00001316                 mov     ecx, 15h
.text:0000131B                 mov     eax, 0CCCCCCCCh
.text:00001320                 rep stosd
.text:00001322                 mov     eax, dword ptr ds:___security_cookie
.text:00001327                 xor     eax, ebp
.text:00001329                 mov     [ebp+var_4], eax
.text:0000132C                 mov     eax, [ebp+arg_0]
.text:0000132F                 mov     [ebp+var_8], eax
.text:00001332                 push    40h ; '@'       ; Size
.text:00001334                 push    36h ; '6'       ; Val
.text:00001336                 lea     ecx, [ebp+Dst]
.text:00001339                 push    ecx             ; Dst
.text:0000133A                 call    _memset
.text:0000133F                 add     esp, 0Ch
.text:00001342                 mov     [ebp+var_54], 0
.text:00001349                 jmp     short loc_1354
.text:0000134B ; ---------------------------------------------------------------------------
.text:0000134B
.text:0000134B loc_134B:                               ; CODE XREF: _sha256_key_internal+70j
.text:0000134B                 mov     edx, [ebp+var_54]
.text:0000134E                 add     edx, 1
.text:00001351                 mov     [ebp+var_54], edx
.text:00001354
.text:00001354 loc_1354:                               ; CODE XREF: _sha256_key_internal+3Dj
.text:00001354                 mov     eax, [ebp+var_54]
.text:00001357                 cmp     eax, [ebp+arg_8]
.text:0000135A                 jge     short loc_137E
.text:0000135C                 cmp     [ebp+var_54], 40h ; '@'
.text:00001360                 jge     short loc_137E
.text:00001362                 mov     ecx, [ebp+arg_4]
.text:00001365                 add     ecx, [ebp+var_54]
.text:00001368                 movzx   edx, byte ptr [ecx]
.text:0000136B                 mov     eax, [ebp+var_54]
.text:0000136E                 movzx   ecx, [ebp+eax+Dst]
.text:00001373                 xor     ecx, edx
.text:00001375                 mov     edx, [ebp+var_54]
.text:00001378                 mov     [ebp+edx+Dst], cl
.text:0000137C                 jmp     short loc_134B
.text:0000137E ; ---------------------------------------------------------------------------
.text:0000137E
.text:0000137E loc_137E:                               ; CODE XREF: _sha256_key_internal+4Ej
.text:0000137E                                         ; _sha256_key_internal+54j
.text:0000137E                 mov     eax, [ebp+var_8]
.text:00001381                 push    eax
.text:00001382                 call    _SHA256_Init
.text:00001387                 add     esp, 4
.text:0000138A                 push    40h ; '@'       ; Size
.text:0000138C                 lea     ecx, [ebp+Dst]
.text:0000138F                 push    ecx             ; int
.text:00001390                 mov     edx, [ebp+var_8]
.text:00001393                 push    edx             ; int
.text:00001394                 call    _SHA256_Bytes
.text:00001399                 add     esp, 0Ch
.text:0000139C                 push    40h ; '@'       ; Size
.text:0000139E                 push    5Ch ; '\'       ; Val
.text:000013A0                 lea     eax, [ebp+Dst]
.text:000013A3                 push    eax             ; Dst
.text:000013A4                 call    _memset
.text:000013A9                 add     esp, 0Ch
.text:000013AC                 mov     [ebp+var_54], 0
.text:000013B3                 jmp     short loc_13BE
.text:000013B5 ; ---------------------------------------------------------------------------
.text:000013B5
.text:000013B5 loc_13B5:                               ; CODE XREF: _sha256_key_internal+DAj
.text:000013B5                 mov     ecx, [ebp+var_54]
.text:000013B8                 add     ecx, 1
.text:000013BB                 mov     [ebp+var_54], ecx
.text:000013BE
.text:000013BE loc_13BE:                               ; CODE XREF: _sha256_key_internal+A7j
.text:000013BE                 mov     edx, [ebp+var_54]
.text:000013C1                 cmp     edx, [ebp+arg_8]
.text:000013C4                 jge     short loc_13E8
.text:000013C6                 cmp     [ebp+var_54], 40h ; '@'
.text:000013CA                 jge     short loc_13E8
.text:000013CC                 mov     eax, [ebp+arg_4]
.text:000013CF                 add     eax, [ebp+var_54]
.text:000013D2                 movzx   ecx, byte ptr [eax]
.text:000013D5                 mov     edx, [ebp+var_54]
.text:000013D8                 movzx   eax, [ebp+edx+Dst]
.text:000013DD                 xor     eax, ecx
.text:000013DF                 mov     ecx, [ebp+var_54]
.text:000013E2                 mov     [ebp+ecx+Dst], al
.text:000013E6                 jmp     short loc_13B5
.text:000013E8 ; ---------------------------------------------------------------------------
.text:000013E8
.text:000013E8 loc_13E8:                               ; CODE XREF: _sha256_key_internal+B8j
.text:000013E8                                         ; _sha256_key_internal+BEj
.text:000013E8                 mov     edx, [ebp+var_8]
.text:000013EB                 add     edx, 6Ch ; 'l'
.text:000013EE                 push    edx
.text:000013EF                 call    _SHA256_Init
.text:000013F4                 add     esp, 4
.text:000013F7                 push    40h ; '@'       ; Size
.text:000013F9                 lea     eax, [ebp+Dst]
.text:000013FC                 push    eax             ; int
.text:000013FD                 mov     ecx, [ebp+var_8]
.text:00001400                 add     ecx, 6Ch ; 'l'
.text:00001403                 push    ecx             ; int
.text:00001404                 call    _SHA256_Bytes
.text:00001409                 add     esp, 0Ch
.text:0000140C                 push    40h ; '@'
.text:0000140E                 lea     edx, [ebp+Dst]
.text:00001411                 push    edx
.text:00001412                 call    _smemclr
.text:00001417                 add     esp, 8
.text:0000141A                 push    edx
.text:0000141B                 mov     ecx, ebp
.text:0000141D                 push    eax
.text:0000141E                 lea     edx, $LN11_0
.text:00001424                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001429                 pop     eax
.text:0000142A                 pop     edx
.text:0000142B                 pop     edi
.text:0000142C                 mov     ecx, [ebp+var_4]
.text:0000142F                 xor     ecx, ebp
.text:00001431                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001436                 add     esp, 54h
.text:00001439                 cmp     ebp, esp
.text:0000143B                 call    __RTC_CheckEsp
.text:00001440                 mov     esp, ebp
.text:00001442                 pop     ebp
.text:00001443                 retn
.text:00001443 _sha256_key_internal endp
.text:00001443
.text:00001443 ; ---------------------------------------------------------------------------
.text:00001444 $LN11_0         dd 1                    ; DATA XREF: _sha256_key_internal+112o
.text:00001448                 dd offset $LN10_1
.text:0000144C $LN10_1         dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00001448o
.text:00001454                 dd offset $LN9_0
.text:00001458 $LN9_0          dd 6F6F66h              ; DATA XREF: .text:00001454o
.text:0000145C
.text:0000145C ; =============== S U B R O U T I N E =======================================
.text:0000145C
.text:0000145C ; Attributes: bp-based frame
.text:0000145C
.text:0000145C _hmacsha256_start proc near             ; CODE XREF: _sha256_do_hmac+40p
.text:0000145C                                         ; DATA XREF: .rdata:00000150o
.text:0000145C
.text:0000145C var_4           = dword ptr -4
.text:0000145C arg_0           = dword ptr  8
.text:0000145C
.text:0000145C                 push    ebp
.text:0000145D                 mov     ebp, esp
.text:0000145F                 push    ecx
.text:00001460                 push    esi
.text:00001461                 push    edi
.text:00001462                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001469                 mov     eax, [ebp+arg_0]
.text:0000146C                 mov     [ebp+var_4], eax
.text:0000146F                 mov     esi, [ebp+var_4]
.text:00001472                 mov     edi, [ebp+var_4]
.text:00001475                 add     edi, 0D8h ; '+'
.text:0000147B                 mov     ecx, 1Bh
.text:00001480                 rep movsd
.text:00001482                 pop     edi
.text:00001483                 pop     esi
.text:00001484                 mov     esp, ebp
.text:00001486                 pop     ebp
.text:00001487                 retn
.text:00001487 _hmacsha256_start endp
.text:00001487
.text:00001487 ; ---------------------------------------------------------------------------
.text:00001488                 db 4 dup(0CCh)
.text:0000148C
.text:0000148C ; =============== S U B R O U T I N E =======================================
.text:0000148C
.text:0000148C ; Attributes: bp-based frame
.text:0000148C
.text:0000148C ; int __cdecl hmacsha256_bytes(int, int, size_t Size)
.text:0000148C _hmacsha256_bytes proc near             ; CODE XREF: _sha256_do_hmac+52p
.text:0000148C                                         ; _sha256_do_hmac+66p
.text:0000148C                                         ; DATA XREF: ...
.text:0000148C
.text:0000148C var_4           = dword ptr -4
.text:0000148C arg_0           = dword ptr  8
.text:0000148C arg_4           = dword ptr  0Ch
.text:0000148C Size            = dword ptr  10h
.text:0000148C
.text:0000148C                 push    ebp
.text:0000148D                 mov     ebp, esp
.text:0000148F                 push    ecx
.text:00001490                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001497                 mov     eax, [ebp+arg_0]
.text:0000149A                 mov     [ebp+var_4], eax
.text:0000149D                 mov     ecx, [ebp+Size]
.text:000014A0                 push    ecx             ; Size
.text:000014A1                 mov     edx, [ebp+arg_4]
.text:000014A4                 push    edx             ; int
.text:000014A5                 mov     eax, [ebp+var_4]
.text:000014A8                 add     eax, 0D8h ; '+'
.text:000014AD                 push    eax             ; int
.text:000014AE                 call    _SHA256_Bytes
.text:000014B3                 add     esp, 0Ch
.text:000014B6                 add     esp, 4
.text:000014B9                 cmp     ebp, esp
.text:000014BB                 call    __RTC_CheckEsp
.text:000014C0                 mov     esp, ebp
.text:000014C2                 pop     ebp
.text:000014C3                 retn
.text:000014C3 _hmacsha256_bytes endp
.text:000014C3
.text:000014C3 ; ---------------------------------------------------------------------------
.text:000014C4                 db 8 dup(0CCh)
.text:000014CC
.text:000014CC ; =============== S U B R O U T I N E =======================================
.text:000014CC
.text:000014CC ; Attributes: bp-based frame
.text:000014CC
.text:000014CC _hmacsha256_genresult proc near         ; CODE XREF: _sha256_do_hmac+76p
.text:000014CC                                         ; _hmacsha256_verresult+28p
.text:000014CC                                         ; DATA XREF: ...
.text:000014CC
.text:000014CC var_A4          = byte ptr -0A4h
.text:000014CC var_A0          = dword ptr -0A0h
.text:000014CC var_78          = dword ptr -78h
.text:000014CC var_8           = dword ptr -8
.text:000014CC var_4           = dword ptr -4
.text:000014CC arg_0           = dword ptr  8
.text:000014CC arg_4           = dword ptr  0Ch
.text:000014CC
.text:000014CC                 push    ebp
.text:000014CD                 mov     ebp, esp
.text:000014CF                 sub     esp, 0A4h
.text:000014D5                 push    esi
.text:000014D6                 push    edi
.text:000014D7                 lea     edi, [ebp+var_A4]
.text:000014DD                 mov     ecx, 29h ; ')'
.text:000014E2                 mov     eax, 0CCCCCCCCh
.text:000014E7                 rep stosd
.text:000014E9                 mov     eax, dword ptr ds:___security_cookie
.text:000014EE                 xor     eax, ebp
.text:000014F0                 mov     [ebp+var_4], eax
.text:000014F3                 mov     eax, [ebp+arg_0]
.text:000014F6                 mov     [ebp+var_8], eax
.text:000014F9                 mov     esi, [ebp+var_8]
.text:000014FC                 add     esi, 0D8h ; '+'
.text:00001502                 mov     ecx, 1Bh
.text:00001507                 lea     edi, [ebp+var_78]
.text:0000150A                 rep movsd
.text:0000150C                 lea     ecx, [ebp+var_A0]
.text:00001512                 push    ecx
.text:00001513                 lea     edx, [ebp+var_78]
.text:00001516                 push    edx
.text:00001517                 call    _SHA256_Final
.text:0000151C                 add     esp, 8
.text:0000151F                 mov     esi, [ebp+var_8]
.text:00001522                 add     esi, 6Ch ; 'l'
.text:00001525                 mov     ecx, 1Bh
.text:0000152A                 lea     edi, [ebp+var_78]
.text:0000152D                 rep movsd
.text:0000152F                 push    20h ; ' '       ; Size
.text:00001531                 lea     eax, [ebp+var_A0]
.text:00001537                 push    eax             ; int
.text:00001538                 lea     ecx, [ebp+var_78]
.text:0000153B                 push    ecx             ; int
.text:0000153C                 call    _SHA256_Bytes
.text:00001541                 add     esp, 0Ch
.text:00001544                 mov     edx, [ebp+arg_4]
.text:00001547                 push    edx
.text:00001548                 lea     eax, [ebp+var_78]
.text:0000154B                 push    eax
.text:0000154C                 call    _SHA256_Final
.text:00001551                 add     esp, 8
.text:00001554                 push    edx
.text:00001555                 mov     ecx, ebp
.text:00001557                 push    eax
.text:00001558                 lea     edx, $LN6
.text:0000155E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001563                 pop     eax
.text:00001564                 pop     edx
.text:00001565                 pop     edi
.text:00001566                 pop     esi
.text:00001567                 mov     ecx, [ebp+var_4]
.text:0000156A                 xor     ecx, ebp
.text:0000156C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001571                 add     esp, 0A4h
.text:00001577                 cmp     ebp, esp
.text:00001579                 call    __RTC_CheckEsp
.text:0000157E                 mov     esp, ebp
.text:00001580                 pop     ebp
.text:00001581                 retn
.text:00001581 _hmacsha256_genresult endp
.text:00001581
.text:00001581 ; ---------------------------------------------------------------------------
.text:00001582                 align 4
.text:00001584 $LN6            dd 2                    ; DATA XREF: _hmacsha256_genresult+8Co
.text:00001588                 dd offset $LN5_0
.text:0000158C $LN5_0          db 88h, 0FFh            ; DATA XREF: .text:00001588o
.text:0000158E                 dw 0FFFFh
.text:00001590                 dd offset unk_6C
.text:00001594                 dd offset $LN3_0        ; "s"
.text:00001598                 dd 0FFFFFF60h, 20h
.text:000015A0                 dd offset $LN4_0        ; "intermediate"
.text:000015A4 $LN4_0          db 'intermediate',0     ; DATA XREF: .text:000015A0o
.text:000015B1 $LN3_0          db 's',0                ; DATA XREF: .text:00001594o
.text:000015B3                 db 9 dup(0CCh)
.text:000015BC
.text:000015BC ; =============== S U B R O U T I N E =======================================
.text:000015BC
.text:000015BC ; Attributes: bp-based frame
.text:000015BC
.text:000015BC ; int __cdecl sha256_generate(int, int, size_t Size, int)
.text:000015BC _sha256_generate proc near              ; DATA XREF: .rdata:00000148o
.text:000015BC
.text:000015BC arg_0           = dword ptr  8
.text:000015BC arg_4           = dword ptr  0Ch
.text:000015BC Size            = dword ptr  10h
.text:000015BC arg_C           = dword ptr  14h
.text:000015BC
.text:000015BC                 push    ebp
.text:000015BD                 mov     ebp, esp
.text:000015BF                 mov     eax, [ebp+arg_4]
.text:000015C2                 add     eax, [ebp+Size]
.text:000015C5                 push    eax             ; int
.text:000015C6                 mov     ecx, [ebp+arg_C]
.text:000015C9                 push    ecx             ; int
.text:000015CA                 mov     edx, [ebp+Size]
.text:000015CD                 push    edx             ; Size
.text:000015CE                 mov     eax, [ebp+arg_4]
.text:000015D1                 push    eax             ; int
.text:000015D2                 mov     ecx, [ebp+arg_0]
.text:000015D5                 push    ecx             ; int
.text:000015D6                 call    _sha256_do_hmac
.text:000015DB                 add     esp, 14h
.text:000015DE                 cmp     ebp, esp
.text:000015E0                 call    __RTC_CheckEsp
.text:000015E5                 pop     ebp
.text:000015E6                 retn
.text:000015E6 _sha256_generate endp
.text:000015E6
.text:000015E6 ; ---------------------------------------------------------------------------
.text:000015E7                 db 5 dup(0CCh)
.text:000015EC
.text:000015EC ; =============== S U B R O U T I N E =======================================
.text:000015EC
.text:000015EC ; Attributes: bp-based frame
.text:000015EC
.text:000015EC ; int __cdecl sha256_do_hmac(int, int, size_t Size, int, int)
.text:000015EC _sha256_do_hmac proc near               ; CODE XREF: _sha256_generate+1Ap
.text:000015EC                                         ; _sha256_verify+34p
.text:000015EC
.text:000015EC var_C           = dword ptr -0Ch
.text:000015EC var_8           = dword ptr -8
.text:000015EC var_4           = dword ptr -4
.text:000015EC arg_0           = dword ptr  8
.text:000015EC arg_4           = dword ptr  0Ch
.text:000015EC Size            = dword ptr  10h
.text:000015EC arg_C           = dword ptr  14h
.text:000015EC arg_10          = dword ptr  18h
.text:000015EC
.text:000015EC                 push    ebp
.text:000015ED                 mov     ebp, esp
.text:000015EF                 sub     esp, 0Ch
.text:000015F2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000015F9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001600                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001607                 mov     eax, [ebp+arg_C]
.text:0000160A                 shr     eax, 18h
.text:0000160D                 mov     byte ptr [ebp+var_8], al
.text:00001610                 mov     ecx, [ebp+arg_C]
.text:00001613                 shr     ecx, 10h
.text:00001616                 mov     byte ptr [ebp+var_8+1], cl
.text:00001619                 mov     edx, [ebp+arg_C]
.text:0000161C                 shr     edx, 8
.text:0000161F                 mov     byte ptr [ebp+var_8+2], dl
.text:00001622                 mov     al, byte ptr [ebp+arg_C]
.text:00001625                 mov     byte ptr [ebp+var_8+3], al
.text:00001628                 mov     ecx, [ebp+arg_0]
.text:0000162B                 push    ecx
.text:0000162C                 call    _hmacsha256_start
.text:00001631                 add     esp, 4
.text:00001634                 push    4               ; Size
.text:00001636                 lea     edx, [ebp+var_8]
.text:00001639                 push    edx             ; int
.text:0000163A                 mov     eax, [ebp+arg_0]
.text:0000163D                 push    eax             ; int
.text:0000163E                 call    _hmacsha256_bytes
.text:00001643                 add     esp, 0Ch
.text:00001646                 mov     ecx, [ebp+Size]
.text:00001649                 push    ecx             ; Size
.text:0000164A                 mov     edx, [ebp+arg_4]
.text:0000164D                 push    edx             ; int
.text:0000164E                 mov     eax, [ebp+arg_0]
.text:00001651                 push    eax             ; int
.text:00001652                 call    _hmacsha256_bytes
.text:00001657                 add     esp, 0Ch
.text:0000165A                 mov     ecx, [ebp+arg_10]
.text:0000165D                 push    ecx
.text:0000165E                 mov     edx, [ebp+arg_0]
.text:00001661                 push    edx
.text:00001662                 call    _hmacsha256_genresult
.text:00001667                 add     esp, 8
.text:0000166A                 push    edx
.text:0000166B                 mov     ecx, ebp
.text:0000166D                 push    eax
.text:0000166E                 lea     edx, $LN5_1
.text:00001674                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001679                 pop     eax
.text:0000167A                 pop     edx
.text:0000167B                 add     esp, 0Ch
.text:0000167E                 cmp     ebp, esp
.text:00001680                 call    __RTC_CheckEsp
.text:00001685                 mov     esp, ebp
.text:00001687                 pop     ebp
.text:00001688                 retn
.text:00001688 _sha256_do_hmac endp
.text:00001688
.text:00001688 ; ---------------------------------------------------------------------------
.text:00001689                 align 4
.text:0000168C $LN5_1          dd 1                    ; DATA XREF: _sha256_do_hmac+82o
.text:00001690                 dd offset $LN4_1
.text:00001694 $LN4_1          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001690o
.text:0000169C                 dd offset $LN3_1        ; "seqbuf"
.text:000016A0 $LN3_1          db 'seqbuf',0           ; DATA XREF: .text:0000169Co
.text:000016A7                 db 5 dup(0CCh)
.text:000016AC
.text:000016AC ; =============== S U B R O U T I N E =======================================
.text:000016AC
.text:000016AC ; Attributes: bp-based frame
.text:000016AC
.text:000016AC ; int __cdecl hmacsha256_verresult(int, void *Buf2)
.text:000016AC _hmacsha256_verresult proc near         ; DATA XREF: .rdata:0000015Co
.text:000016AC
.text:000016AC var_2C          = byte ptr -2Ch
.text:000016AC Buf1            = byte ptr -28h
.text:000016AC var_4           = dword ptr -4
.text:000016AC arg_0           = dword ptr  8
.text:000016AC Buf2            = dword ptr  0Ch
.text:000016AC
.text:000016AC                 push    ebp
.text:000016AD                 mov     ebp, esp
.text:000016AF                 sub     esp, 2Ch
.text:000016B2                 push    edi
.text:000016B3                 lea     edi, [ebp+var_2C]
.text:000016B6                 mov     ecx, 0Bh
.text:000016BB                 mov     eax, 0CCCCCCCCh
.text:000016C0                 rep stosd
.text:000016C2                 mov     eax, dword ptr ds:___security_cookie
.text:000016C7                 xor     eax, ebp
.text:000016C9                 mov     [ebp+var_4], eax
.text:000016CC                 lea     eax, [ebp+Buf1]
.text:000016CF                 push    eax
.text:000016D0                 mov     ecx, [ebp+arg_0]
.text:000016D3                 push    ecx
.text:000016D4                 call    _hmacsha256_genresult
.text:000016D9                 add     esp, 8
.text:000016DC                 push    20h ; ' '       ; Size
.text:000016DE                 mov     edx, [ebp+Buf2]
.text:000016E1                 push    edx             ; Buf2
.text:000016E2                 lea     eax, [ebp+Buf1]
.text:000016E5                 push    eax             ; Buf1
.text:000016E6                 call    _memcmp
.text:000016EB                 add     esp, 0Ch
.text:000016EE                 neg     eax
.text:000016F0                 sbb     eax, eax
.text:000016F2                 add     eax, 1
.text:000016F5                 push    edx
.text:000016F6                 mov     ecx, ebp
.text:000016F8                 push    eax
.text:000016F9                 lea     edx, $LN5_2
.text:000016FF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001704                 pop     eax
.text:00001705                 pop     edx
.text:00001706                 pop     edi
.text:00001707                 mov     ecx, [ebp+var_4]
.text:0000170A                 xor     ecx, ebp
.text:0000170C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001711                 add     esp, 2Ch
.text:00001714                 cmp     ebp, esp
.text:00001716                 call    __RTC_CheckEsp
.text:0000171B                 mov     esp, ebp
.text:0000171D                 pop     ebp
.text:0000171E                 retn
.text:0000171E _hmacsha256_verresult endp
.text:0000171E
.text:0000171E ; ---------------------------------------------------------------------------
.text:0000171F                 align 10h
.text:00001720 $LN5_2          dd 1                    ; DATA XREF: _hmacsha256_verresult+4Do
.text:00001724                 dd offset $LN4_2
.text:00001728 $LN4_2          dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:00001724o
.text:00001730                 dd offset $LN3_2        ; "correct"
.text:00001734 $LN3_2          db 'correct',0          ; DATA XREF: .text:00001730o
.text:0000173C
.text:0000173C ; =============== S U B R O U T I N E =======================================
.text:0000173C
.text:0000173C ; Attributes: bp-based frame
.text:0000173C
.text:0000173C ; int __cdecl sha256_verify(int, int, size_t Size, int)
.text:0000173C _sha256_verify  proc near               ; DATA XREF: .rdata:0000014Co
.text:0000173C
.text:0000173C var_2C          = byte ptr -2Ch
.text:0000173C Buf1            = byte ptr -28h
.text:0000173C var_4           = dword ptr -4
.text:0000173C arg_0           = dword ptr  8
.text:0000173C arg_4           = dword ptr  0Ch
.text:0000173C Size            = dword ptr  10h
.text:0000173C arg_C           = dword ptr  14h
.text:0000173C
.text:0000173C                 push    ebp
.text:0000173D                 mov     ebp, esp
.text:0000173F                 sub     esp, 2Ch
.text:00001742                 push    edi
.text:00001743                 lea     edi, [ebp+var_2C]
.text:00001746                 mov     ecx, 0Bh
.text:0000174B                 mov     eax, 0CCCCCCCCh
.text:00001750                 rep stosd
.text:00001752                 mov     eax, dword ptr ds:___security_cookie
.text:00001757                 xor     eax, ebp
.text:00001759                 mov     [ebp+var_4], eax
.text:0000175C                 lea     eax, [ebp+Buf1]
.text:0000175F                 push    eax             ; int
.text:00001760                 mov     ecx, [ebp+arg_C]
.text:00001763                 push    ecx             ; int
.text:00001764                 mov     edx, [ebp+Size]
.text:00001767                 push    edx             ; Size
.text:00001768                 mov     eax, [ebp+arg_4]
.text:0000176B                 push    eax             ; int
.text:0000176C                 mov     ecx, [ebp+arg_0]
.text:0000176F                 push    ecx             ; int
.text:00001770                 call    _sha256_do_hmac
.text:00001775                 add     esp, 14h
.text:00001778                 push    20h ; ' '       ; Size
.text:0000177A                 mov     edx, [ebp+arg_4]
.text:0000177D                 add     edx, [ebp+Size]
.text:00001780                 push    edx             ; Buf2
.text:00001781                 lea     eax, [ebp+Buf1]
.text:00001784                 push    eax             ; Buf1
.text:00001785                 call    _memcmp
.text:0000178A                 add     esp, 0Ch
.text:0000178D                 neg     eax
.text:0000178F                 sbb     eax, eax
.text:00001791                 add     eax, 1
.text:00001794                 push    edx
.text:00001795                 mov     ecx, ebp
.text:00001797                 push    eax
.text:00001798                 lea     edx, $LN5_3
.text:0000179E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000017A3                 pop     eax
.text:000017A4                 pop     edx
.text:000017A5                 pop     edi
.text:000017A6                 mov     ecx, [ebp+var_4]
.text:000017A9                 xor     ecx, ebp
.text:000017AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000017B0                 add     esp, 2Ch
.text:000017B3                 cmp     ebp, esp
.text:000017B5                 call    __RTC_CheckEsp
.text:000017BA                 mov     esp, ebp
.text:000017BC                 pop     ebp
.text:000017BD                 retn
.text:000017BD _sha256_verify  endp
.text:000017BD
.text:000017BD ; ---------------------------------------------------------------------------
.text:000017BE                 align 10h
.text:000017C0 $LN5_3          dd 1                    ; DATA XREF: _sha256_verify+5Co
.text:000017C4                 dd offset $LN4_3
.text:000017C8 $LN4_3          dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:000017C4o
.text:000017D0                 dd offset $LN3_3        ; "correct"
.text:000017D4 $LN3_3          db 'correct',0          ; DATA XREF: .text:000017D0o
.text:000017D4 _text           ends
.text:000017D4
.rtc$TMZ:000017DC ; ===========================================================================
.rtc$TMZ:000017DC
.rtc$TMZ:000017DC ; Segment type: Pure data
.rtc$TMZ:000017DC ; Segment permissions: Read
.rtc$TMZ:000017DC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000017DC                 assume cs:_rtc$TMZ
.rtc$TMZ:000017DC                 ;org 17DCh
.rtc$TMZ:000017DC ; COMDAT (pick any)
.rtc$TMZ:000017DC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000017DC _rtc$TMZ        ends
.rtc$TMZ:000017DC
.rtc$IMZ:000017E0 ; ===========================================================================
.rtc$IMZ:000017E0
.rtc$IMZ:000017E0 ; Segment type: Pure data
.rtc$IMZ:000017E0 ; Segment permissions: Read
.rtc$IMZ:000017E0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000017E0                 assume cs:_rtc$IMZ
.rtc$IMZ:000017E0                 ;org 17E0h
.rtc$IMZ:000017E0 ; COMDAT (pick any)
.rtc$IMZ:000017E0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000017E0 _rtc$IMZ        ends
.rtc$IMZ:000017E0
UNDEF:000017F0 ; ===========================================================================
UNDEF:000017F0
UNDEF:000017F0 ; Segment type: Externs
UNDEF:000017F0 ; UNDEF
UNDEF:000017F0                 extrn __RTC_Shutdown:near
UNDEF:000017F0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000017F4                 extrn __RTC_InitBase:near
UNDEF:000017F4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000017F8                 extrn ___security_cookie:near ; DATA XREF: _SHA256_Block+1Dr
UNDEF:000017F8                                         ; _SHA256_Bytes+16r ...
UNDEF:000017FC ; __fastcall __security_check_cookie(x)
UNDEF:000017FC                 extrn @__security_check_cookie@4:near
UNDEF:000017FC                                         ; CODE XREF: _SHA256_Block+B5Ep
UNDEF:000017FC                                         ; _SHA256_Bytes+1ABp ...
UNDEF:00001800 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001800                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001800                                         ; CODE XREF: _SHA256_Block+B50p
UNDEF:00001800                                         ; _SHA256_Bytes+19Ep ...
UNDEF:00001804                 extrn __RTC_CheckEsp:near ; CODE XREF: _SHA256_Init+2Fp
UNDEF:00001804                                         ; _SHA256_Bytes+1B5p ...
UNDEF:00001808 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001808                 extrn _memcpy:near      ; CODE XREF: _SHA256_Bytes+81p
UNDEF:00001808                                         ; _SHA256_Bytes+CDp ...
UNDEF:0000180C ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000180C                 extrn _memset:near      ; CODE XREF: _SHA256_Final+74p
UNDEF:0000180C                                         ; _sha256_key_internal+2Ep ...
UNDEF:00001810                 extrn _safemalloc:near  ; CODE XREF: _sha256_init+Fp
UNDEF:00001810                                         ; _sha256_make_context+7p
UNDEF:00001814                 extrn _safefree:near    ; CODE XREF: _sha256_final+25p
UNDEF:00001814                                         ; _sha256_free_context+7p
UNDEF:00001818                 extrn _smemclr:near     ; CODE XREF: _sha256_key_internal+106p
UNDEF:0000181C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000181C                 extrn _memcmp:near      ; CODE XREF: _hmacsha256_verresult+3Ap
UNDEF:0000181C                                         ; _sha256_verify+49p
UNDEF:0000181C
UNDEF:0000181C
UNDEF:0000181C                 end