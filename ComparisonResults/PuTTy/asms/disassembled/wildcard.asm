.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 14611ECE47D9729E590DBAD54B0AF091
.data:00000000 ; Input CRC32 : 8C740862
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\wildcard.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85557        db 27h,27h,' occurred at end of string (expected another character)',0
.data:00000000                                         ; DATA XREF: _wc_error:loc_150o
.data:0000003A                 align 4
.data:0000003C $SG85559        db 'expected ',27h,']',27h,' to close character class',0
.data:0000003C                                         ; DATA XREF: _wc_error:loc_157o
.data:00000062                 align 4
.data:00000064 $SG85561        db 'character range was not terminated (',27h,']',27h,' just after ',27h,'-',27h,')'
.data:00000064                                         ; DATA XREF: _wc_error:loc_15Eo
.data:00000064                 db 0
.data:0000009C $SG85562        db 'INTERNAL ERROR: unrecognised wildcard error number',0
.data:0000009C                                         ; DATA XREF: _wc_error:loc_165o
.data:000000CF                 align 10h
.data:000000D0 $SG85620:                               ; DATA XREF: _wc_match+65o
.data:000000D0                 unicode 0, <..\..\..\wildcard.c>,0
.data:000000F8 $SG85621:                               ; DATA XREF: _wc_match+6Ao
.data:000000F8                 unicode 0, <*wildcard == >
.data:000000F8                 dw 27h
.data:000000F8                 unicode 0, <*>
.data:000000F8                 dw 27h, 0
.data:0000011A                 align 4
.data:0000011A _data           ends
.data:0000011A
.text:0000011C ; ===========================================================================
.text:0000011C
.text:0000011C ; Segment type: Pure code
.text:0000011C ; Segment permissions: Read/Execute
.text:0000011C _text           segment para public 'CODE' use32
.text:0000011C                 assume cs:_text
.text:0000011C                 ;org 11Ch
.text:0000011C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000011C
.text:0000011C ; =============== S U B R O U T I N E =======================================
.text:0000011C
.text:0000011C ; Attributes: bp-based frame
.text:0000011C
.text:0000011C                 public _wc_error
.text:0000011C _wc_error       proc near
.text:0000011C
.text:0000011C var_4           = dword ptr -4
.text:0000011C arg_0           = dword ptr  8
.text:0000011C
.text:0000011C                 push    ebp
.text:0000011D                 mov     ebp, esp
.text:0000011F                 push    ecx
.text:00000120                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000127                 mov     eax, [ebp+arg_0]
.text:0000012A                 push    eax             ; int
.text:0000012B                 call    _abs
.text:00000130                 add     esp, 4
.text:00000133                 mov     [ebp+arg_0], eax
.text:00000136                 mov     ecx, [ebp+arg_0]
.text:00000139                 mov     [ebp+var_4], ecx
.text:0000013C                 cmp     [ebp+var_4], 1
.text:00000140                 jz      short loc_150
.text:00000142                 cmp     [ebp+var_4], 2
.text:00000146                 jz      short loc_157
.text:00000148                 cmp     [ebp+var_4], 3
.text:0000014C                 jz      short loc_15E
.text:0000014E                 jmp     short loc_165
.text:00000150 ; ---------------------------------------------------------------------------
.text:00000150
.text:00000150 loc_150:                                ; CODE XREF: _wc_error+24j
.text:00000150                 mov     eax, offset $SG85557 ; "'' occurred at end of string (expected "...
.text:00000155                 jmp     short loc_16A
.text:00000157 ; ---------------------------------------------------------------------------
.text:00000157
.text:00000157 loc_157:                                ; CODE XREF: _wc_error+2Aj
.text:00000157                 mov     eax, offset $SG85559 ; "expected ']' to close character class"
.text:0000015C                 jmp     short loc_16A
.text:0000015E ; ---------------------------------------------------------------------------
.text:0000015E
.text:0000015E loc_15E:                                ; CODE XREF: _wc_error+30j
.text:0000015E                 mov     eax, offset $SG85561 ; "character range was not terminated (']'"...
.text:00000163                 jmp     short loc_16A
.text:00000165 ; ---------------------------------------------------------------------------
.text:00000165
.text:00000165 loc_165:                                ; CODE XREF: _wc_error+32j
.text:00000165                 mov     eax, offset $SG85562 ; "INTERNAL ERROR: unrecognised wildcard e"...
.text:0000016A
.text:0000016A loc_16A:                                ; CODE XREF: _wc_error+39j
.text:0000016A                                         ; _wc_error+40j ...
.text:0000016A                 add     esp, 4
.text:0000016D                 cmp     ebp, esp
.text:0000016F                 call    __RTC_CheckEsp
.text:00000174                 mov     esp, ebp
.text:00000176                 pop     ebp
.text:00000177                 retn
.text:00000177 _wc_error       endp
.text:00000177
.text:00000177 ; ---------------------------------------------------------------------------
.text:00000178                 db 4 dup(0CCh)
.text:0000017C
.text:0000017C ; =============== S U B R O U T I N E =======================================
.text:0000017C
.text:0000017C ; Attributes: bp-based frame
.text:0000017C
.text:0000017C                 public _wc_match
.text:0000017C _wc_match       proc near
.text:0000017C
.text:0000017C var_C           = dword ptr -0Ch
.text:0000017C var_8           = dword ptr -8
.text:0000017C var_4           = dword ptr -4
.text:0000017C arg_0           = dword ptr  8
.text:0000017C arg_4           = dword ptr  0Ch
.text:0000017C
.text:0000017C                 push    ebp
.text:0000017D                 mov     ebp, esp
.text:0000017F                 sub     esp, 0Ch
.text:00000182                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000189                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000190                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000197                 mov     eax, [ebp+arg_0]
.text:0000019A                 movsx   ecx, byte ptr [eax]
.text:0000019D                 cmp     ecx, 2Ah ; '*'
.text:000001A0                 jz      short loc_1C3
.text:000001A2                 lea     edx, [ebp+arg_4]
.text:000001A5                 push    edx
.text:000001A6                 lea     eax, [ebp+arg_0]
.text:000001A9                 push    eax
.text:000001AA                 call    _wc_match_fragment
.text:000001AF                 add     esp, 8
.text:000001B2                 mov     [ebp+var_4], eax
.text:000001B5                 cmp     [ebp+var_4], 0
.text:000001B9                 jg      short loc_1C3
.text:000001BB                 mov     eax, [ebp+var_4]
.text:000001BE                 jmp     loc_2E2
.text:000001C3 ; ---------------------------------------------------------------------------
.text:000001C3
.text:000001C3 loc_1C3:                                ; CODE XREF: _wc_match+24j
.text:000001C3                                         ; _wc_match+3Dj ...
.text:000001C3                 mov     ecx, [ebp+arg_0]
.text:000001C6                 movsx   edx, byte ptr [ecx]
.text:000001C9                 test    edx, edx
.text:000001CB                 jz      loc_2D5
.text:000001D1                 mov     eax, [ebp+arg_0]
.text:000001D4                 movsx   ecx, byte ptr [eax]
.text:000001D7                 cmp     ecx, 2Ah ; '*'
.text:000001DA                 jz      short loc_1F3
.text:000001DC                 push    0E1h ; 'ÃŸ'
.text:000001E1                 push    offset $SG85620 ; "..\\..\\..\\wildcard.c"
.text:000001E6                 push    offset $SG85621 ; "*wildcard == '*'"
.text:000001EB                 call    __wassert
.text:000001F0 ; ---------------------------------------------------------------------------
.text:000001F0                 add     esp, 0Ch
.text:000001F3
.text:000001F3 loc_1F3:                                ; CODE XREF: _wc_match+5Ej
.text:000001F3                                         ; _wc_match+8Bj
.text:000001F3                 mov     eax, [ebp+arg_0]
.text:000001F6                 movsx   ecx, byte ptr [eax]
.text:000001F9                 cmp     ecx, 2Ah ; '*'
.text:000001FC                 jnz     short loc_209
.text:000001FE                 mov     edx, [ebp+arg_0]
.text:00000201                 add     edx, 1
.text:00000204                 mov     [ebp+arg_0], edx
.text:00000207                 jmp     short loc_1F3
.text:00000209 ; ---------------------------------------------------------------------------
.text:00000209
.text:00000209 loc_209:                                ; CODE XREF: _wc_match+80j
.text:00000209                 mov     eax, [ebp+arg_0]
.text:0000020C                 movsx   ecx, byte ptr [eax]
.text:0000020F                 test    ecx, ecx
.text:00000211                 jnz     short loc_21D
.text:00000213                 mov     eax, 1
.text:00000218                 jmp     loc_2E2
.text:0000021D ; ---------------------------------------------------------------------------
.text:0000021D
.text:0000021D loc_21D:                                ; CODE XREF: _wc_match+95j
.text:0000021D                 mov     [ebp+var_4], 0
.text:00000224
.text:00000224 loc_224:                                ; CODE XREF: _wc_match+140j
.text:00000224                 mov     edx, [ebp+arg_4]
.text:00000227                 movsx   eax, byte ptr [edx]
.text:0000022A                 test    eax, eax
.text:0000022C                 jz      loc_2C1
.text:00000232                 mov     ecx, [ebp+arg_0]
.text:00000235                 mov     [ebp+var_8], ecx
.text:00000238                 mov     edx, [ebp+arg_4]
.text:0000023B                 mov     [ebp+var_C], edx
.text:0000023E                 lea     eax, [ebp+arg_4]
.text:00000241                 push    eax
.text:00000242                 lea     ecx, [ebp+arg_0]
.text:00000245                 push    ecx
.text:00000246                 call    _wc_match_fragment
.text:0000024B                 add     esp, 8
.text:0000024E                 mov     [ebp+var_4], eax
.text:00000251                 cmp     [ebp+var_4], 0
.text:00000255                 jge     short loc_25F
.text:00000257                 mov     eax, [ebp+var_4]
.text:0000025A                 jmp     loc_2E2
.text:0000025F ; ---------------------------------------------------------------------------
.text:0000025F
.text:0000025F loc_25F:                                ; CODE XREF: _wc_match+D9j
.text:0000025F                 cmp     [ebp+var_4], 0
.text:00000263                 jle     short loc_2AB
.text:00000265                 mov     edx, [ebp+arg_0]
.text:00000268                 movsx   eax, byte ptr [edx]
.text:0000026B                 test    eax, eax
.text:0000026D                 jnz     short loc_2AB
.text:0000026F                 mov     ecx, [ebp+arg_4]
.text:00000272                 movsx   edx, byte ptr [ecx]
.text:00000275                 test    edx, edx
.text:00000277                 jz      short loc_2AB
.text:00000279                 mov     eax, [ebp+var_C]
.text:0000027C                 push    eax             ; char *
.text:0000027D                 call    _strlen
.text:00000282                 add     esp, 4
.text:00000285                 add     eax, [ebp+var_C]
.text:00000288                 mov     ecx, [ebp+arg_4]
.text:0000028B                 sub     ecx, [ebp+var_C]
.text:0000028E                 sub     eax, ecx
.text:00000290                 mov     [ebp+arg_4], eax
.text:00000293                 mov     edx, [ebp+var_8]
.text:00000296                 mov     [ebp+arg_0], edx
.text:00000299                 lea     eax, [ebp+arg_4]
.text:0000029C                 push    eax
.text:0000029D                 lea     ecx, [ebp+arg_0]
.text:000002A0                 push    ecx
.text:000002A1                 call    _wc_match_fragment
.text:000002A6                 add     esp, 8
.text:000002A9                 jmp     short loc_2E2
.text:000002AB ; ---------------------------------------------------------------------------
.text:000002AB
.text:000002AB loc_2AB:                                ; CODE XREF: _wc_match+E7j
.text:000002AB                                         ; _wc_match+F1j ...
.text:000002AB                 cmp     [ebp+var_4], 0
.text:000002AF                 jle     short loc_2B3
.text:000002B1                 jmp     short loc_2C1
.text:000002B3 ; ---------------------------------------------------------------------------
.text:000002B3
.text:000002B3 loc_2B3:                                ; CODE XREF: _wc_match+133j
.text:000002B3                 mov     edx, [ebp+arg_4]
.text:000002B6                 add     edx, 1
.text:000002B9                 mov     [ebp+arg_4], edx
.text:000002BC                 jmp     loc_224
.text:000002C1 ; ---------------------------------------------------------------------------
.text:000002C1
.text:000002C1 loc_2C1:                                ; CODE XREF: _wc_match+B0j
.text:000002C1                                         ; _wc_match+135j
.text:000002C1                 cmp     [ebp+var_4], 0
.text:000002C5                 jle     short loc_2CC
.text:000002C7                 jmp     loc_1C3
.text:000002CC ; ---------------------------------------------------------------------------
.text:000002CC
.text:000002CC loc_2CC:                                ; CODE XREF: _wc_match+149j
.text:000002CC                 xor     eax, eax
.text:000002CE                 jmp     short loc_2E2
.text:000002D0 ; ---------------------------------------------------------------------------
.text:000002D0                 jmp     loc_1C3
.text:000002D5 ; ---------------------------------------------------------------------------
.text:000002D5
.text:000002D5 loc_2D5:                                ; CODE XREF: _wc_match+4Fj
.text:000002D5                 mov     eax, [ebp+arg_4]
.text:000002D8                 movsx   eax, byte ptr [eax]
.text:000002DB                 neg     eax
.text:000002DD                 sbb     eax, eax
.text:000002DF                 add     eax, 1
.text:000002E2
.text:000002E2 loc_2E2:                                ; CODE XREF: _wc_match+42j
.text:000002E2                                         ; _wc_match+9Cj ...
.text:000002E2                 add     esp, 0Ch
.text:000002E5                 cmp     ebp, esp
.text:000002E7                 call    __RTC_CheckEsp
.text:000002EC                 mov     esp, ebp
.text:000002EE                 pop     ebp
.text:000002EF                 retn
.text:000002EF _wc_match       endp
.text:000002EF
.text:000002EF ; ---------------------------------------------------------------------------
.text:000002F0                 db 0Ch dup(0CCh)
.text:000002FC
.text:000002FC ; =============== S U B R O U T I N E =======================================
.text:000002FC
.text:000002FC ; Attributes: bp-based frame
.text:000002FC
.text:000002FC _wc_match_fragment proc near            ; CODE XREF: _wc_match+2Ep
.text:000002FC                                         ; _wc_match+CAp ...
.text:000002FC
.text:000002FC var_24          = dword ptr -24h
.text:000002FC var_20          = dword ptr -20h
.text:000002FC var_1C          = dword ptr -1Ch
.text:000002FC var_18          = dword ptr -18h
.text:000002FC var_14          = dword ptr -14h
.text:000002FC var_10          = dword ptr -10h
.text:000002FC var_C           = dword ptr -0Ch
.text:000002FC var_8           = dword ptr -8
.text:000002FC var_4           = dword ptr -4
.text:000002FC arg_0           = dword ptr  8
.text:000002FC arg_4           = dword ptr  0Ch
.text:000002FC
.text:000002FC                 push    ebp
.text:000002FD                 mov     ebp, esp
.text:000002FF                 sub     esp, 24h
.text:00000302                 mov     eax, 0CCCCCCCCh
.text:00000307                 mov     [ebp+var_24], eax
.text:0000030A                 mov     [ebp+var_20], eax
.text:0000030D                 mov     [ebp+var_1C], eax
.text:00000310                 mov     [ebp+var_18], eax
.text:00000313                 mov     [ebp+var_14], eax
.text:00000316                 mov     [ebp+var_10], eax
.text:00000319                 mov     [ebp+var_C], eax
.text:0000031C                 mov     [ebp+var_8], eax
.text:0000031F                 mov     [ebp+var_4], eax
.text:00000322                 mov     eax, [ebp+arg_0]
.text:00000325                 mov     ecx, [eax]
.text:00000327                 mov     [ebp+var_4], ecx
.text:0000032A                 mov     edx, [ebp+arg_4]
.text:0000032D                 mov     eax, [edx]
.text:0000032F                 mov     [ebp+var_8], eax
.text:00000332
.text:00000332 loc_332:                                ; CODE XREF: _wc_match_fragment+260j
.text:00000332                 mov     ecx, [ebp+var_4]
.text:00000335                 movsx   edx, byte ptr [ecx]
.text:00000338                 test    edx, edx
.text:0000033A                 jz      loc_561
.text:00000340                 mov     eax, [ebp+var_4]
.text:00000343                 movsx   ecx, byte ptr [eax]
.text:00000346                 cmp     ecx, 2Ah ; '*'
.text:00000349                 jz      loc_561
.text:0000034F                 mov     edx, [ebp+var_8]
.text:00000352                 movsx   eax, byte ptr [edx]
.text:00000355                 test    eax, eax
.text:00000357                 jz      loc_561
.text:0000035D                 mov     ecx, [ebp+var_4]
.text:00000360                 movsx   edx, byte ptr [ecx]
.text:00000363                 cmp     edx, 5Ch ; '\'
.text:00000366                 jnz     short loc_3A1
.text:00000368                 mov     eax, [ebp+var_4]
.text:0000036B                 movsx   ecx, byte ptr [eax+1]
.text:0000036F                 test    ecx, ecx
.text:00000371                 jnz     short loc_37B
.text:00000373                 or      eax, 0FFFFFFFFh
.text:00000376                 jmp     loc_58F
.text:0000037B ; ---------------------------------------------------------------------------
.text:0000037B
.text:0000037B loc_37B:                                ; CODE XREF: _wc_match_fragment+75j
.text:0000037B                 mov     edx, [ebp+var_4]
.text:0000037E                 movsx   eax, byte ptr [edx+1]
.text:00000382                 mov     ecx, [ebp+var_8]
.text:00000385                 movsx   edx, byte ptr [ecx]
.text:00000388                 cmp     eax, edx
.text:0000038A                 jz      short loc_393
.text:0000038C                 xor     eax, eax
.text:0000038E                 jmp     loc_58F
.text:00000393 ; ---------------------------------------------------------------------------
.text:00000393
.text:00000393 loc_393:                                ; CODE XREF: _wc_match_fragment+8Ej
.text:00000393                 mov     eax, [ebp+var_4]
.text:00000396                 add     eax, 2
.text:00000399                 mov     [ebp+var_4], eax
.text:0000039C                 jmp     loc_553
.text:000003A1 ; ---------------------------------------------------------------------------
.text:000003A1
.text:000003A1 loc_3A1:                                ; CODE XREF: _wc_match_fragment+6Aj
.text:000003A1                 mov     ecx, [ebp+var_4]
.text:000003A4                 movsx   edx, byte ptr [ecx]
.text:000003A7                 cmp     edx, 3Fh ; '?'
.text:000003AA                 jnz     short loc_3BA
.text:000003AC                 mov     eax, [ebp+var_4]
.text:000003AF                 add     eax, 1
.text:000003B2                 mov     [ebp+var_4], eax
.text:000003B5                 jmp     loc_553
.text:000003BA ; ---------------------------------------------------------------------------
.text:000003BA
.text:000003BA loc_3BA:                                ; CODE XREF: _wc_match_fragment+AEj
.text:000003BA                 mov     ecx, [ebp+var_4]
.text:000003BD                 movsx   edx, byte ptr [ecx]
.text:000003C0                 cmp     edx, 5Bh ; '['
.text:000003C3                 jnz     loc_536
.text:000003C9                 mov     [ebp+var_C], 0
.text:000003D0                 mov     [ebp+var_10], 0
.text:000003D7                 mov     eax, [ebp+var_4]
.text:000003DA                 add     eax, 1
.text:000003DD                 mov     [ebp+var_4], eax
.text:000003E0                 mov     ecx, [ebp+var_4]
.text:000003E3                 movsx   edx, byte ptr [ecx]
.text:000003E6                 cmp     edx, 5Eh ; '^'
.text:000003E9                 jnz     short loc_3FB
.text:000003EB                 mov     [ebp+var_C], 1
.text:000003F2                 mov     eax, [ebp+var_4]
.text:000003F5                 add     eax, 1
.text:000003F8                 mov     [ebp+var_4], eax
.text:000003FB
.text:000003FB loc_3FB:                                ; CODE XREF: _wc_match_fragment+EDj
.text:000003FB                                         ; _wc_match_fragment:loc_51Aj
.text:000003FB                 mov     ecx, [ebp+var_4]
.text:000003FE                 movsx   edx, byte ptr [ecx]
.text:00000401                 cmp     edx, 5Dh ; ']'
.text:00000404                 jz      loc_51F
.text:0000040A                 mov     eax, [ebp+var_4]
.text:0000040D                 movsx   ecx, byte ptr [eax]
.text:00000410                 cmp     ecx, 5Ch ; '\'
.text:00000413                 jnz     short loc_41E
.text:00000415                 mov     edx, [ebp+var_4]
.text:00000418                 add     edx, 1
.text:0000041B                 mov     [ebp+var_4], edx
.text:0000041E
.text:0000041E loc_41E:                                ; CODE XREF: _wc_match_fragment+117j
.text:0000041E                 mov     eax, [ebp+var_4]
.text:00000421                 movsx   ecx, byte ptr [eax]
.text:00000424                 test    ecx, ecx
.text:00000426                 jnz     short loc_432
.text:00000428                 mov     eax, 0FFFFFFFEh
.text:0000042D                 jmp     loc_58F
.text:00000432 ; ---------------------------------------------------------------------------
.text:00000432
.text:00000432 loc_432:                                ; CODE XREF: _wc_match_fragment+12Aj
.text:00000432                 mov     edx, [ebp+var_4]
.text:00000435                 movsx   eax, byte ptr [edx+1]
.text:00000439                 cmp     eax, 2Dh ; '-'
.text:0000043C                 jnz     loc_4E8
.text:00000442                 mov     ecx, [ebp+var_4]
.text:00000445                 movzx   edx, byte ptr [ecx]
.text:00000448                 mov     [ebp+var_14], edx
.text:0000044B                 mov     eax, [ebp+var_4]
.text:0000044E                 add     eax, 1
.text:00000451                 mov     [ebp+var_4], eax
.text:00000454                 mov     ecx, [ebp+var_4]
.text:00000457                 add     ecx, 1
.text:0000045A                 mov     [ebp+var_4], ecx
.text:0000045D                 mov     edx, [ebp+var_4]
.text:00000460                 movsx   eax, byte ptr [edx]
.text:00000463                 cmp     eax, 5Dh ; ']'
.text:00000466                 jnz     short loc_472
.text:00000468                 mov     eax, 0FFFFFFFDh
.text:0000046D                 jmp     loc_58F
.text:00000472 ; ---------------------------------------------------------------------------
.text:00000472
.text:00000472 loc_472:                                ; CODE XREF: _wc_match_fragment+16Aj
.text:00000472                 mov     ecx, [ebp+var_4]
.text:00000475                 movsx   edx, byte ptr [ecx]
.text:00000478                 cmp     edx, 5Ch ; '\'
.text:0000047B                 jnz     short loc_486
.text:0000047D                 mov     eax, [ebp+var_4]
.text:00000480                 add     eax, 1
.text:00000483                 mov     [ebp+var_4], eax
.text:00000486
.text:00000486 loc_486:                                ; CODE XREF: _wc_match_fragment+17Fj
.text:00000486                 mov     ecx, [ebp+var_4]
.text:00000489                 movsx   edx, byte ptr [ecx]
.text:0000048C                 test    edx, edx
.text:0000048E                 jnz     short loc_49A
.text:00000490                 mov     eax, 0FFFFFFFEh
.text:00000495                 jmp     loc_58F
.text:0000049A ; ---------------------------------------------------------------------------
.text:0000049A
.text:0000049A loc_49A:                                ; CODE XREF: _wc_match_fragment+192j
.text:0000049A                 mov     eax, [ebp+var_4]
.text:0000049D                 movzx   ecx, byte ptr [eax]
.text:000004A0                 mov     [ebp+var_18], ecx
.text:000004A3                 mov     edx, [ebp+var_4]
.text:000004A6                 add     edx, 1
.text:000004A9                 mov     [ebp+var_4], edx
.text:000004AC                 mov     eax, [ebp+var_8]
.text:000004AF                 movzx   ecx, byte ptr [eax]
.text:000004B2                 mov     [ebp+var_1C], ecx
.text:000004B5                 mov     edx, [ebp+var_14]
.text:000004B8                 cmp     edx, [ebp+var_18]
.text:000004BB                 jle     short loc_4CF
.text:000004BD                 mov     eax, [ebp+var_14]
.text:000004C0                 mov     [ebp+var_20], eax
.text:000004C3                 mov     ecx, [ebp+var_18]
.text:000004C6                 mov     [ebp+var_14], ecx
.text:000004C9                 mov     edx, [ebp+var_20]
.text:000004CC                 mov     [ebp+var_18], edx
.text:000004CF
.text:000004CF loc_4CF:                                ; CODE XREF: _wc_match_fragment+1BFj
.text:000004CF                 mov     eax, [ebp+var_1C]
.text:000004D2                 cmp     eax, [ebp+var_14]
.text:000004D5                 jl      short loc_4E6
.text:000004D7                 mov     ecx, [ebp+var_1C]
.text:000004DA                 cmp     ecx, [ebp+var_18]
.text:000004DD                 jg      short loc_4E6
.text:000004DF                 mov     [ebp+var_10], 1
.text:000004E6
.text:000004E6 loc_4E6:                                ; CODE XREF: _wc_match_fragment+1D9j
.text:000004E6                                         ; _wc_match_fragment+1E1j
.text:000004E6                 jmp     short loc_51A
.text:000004E8 ; ---------------------------------------------------------------------------
.text:000004E8
.text:000004E8 loc_4E8:                                ; CODE XREF: _wc_match_fragment+140j
.text:000004E8                 mov     edx, [ebp+var_4]
.text:000004EB                 movsx   eax, byte ptr [edx]
.text:000004EE                 mov     ecx, [ebp+var_8]
.text:000004F1                 movsx   edx, byte ptr [ecx]
.text:000004F4                 mov     ecx, [ebp+var_4]
.text:000004F7                 add     ecx, 1
.text:000004FA                 mov     [ebp+var_4], ecx
.text:000004FD                 cmp     edx, eax
.text:000004FF                 jnz     short loc_50A
.text:00000501                 mov     [ebp+var_24], 1
.text:00000508                 jmp     short loc_511
.text:0000050A ; ---------------------------------------------------------------------------
.text:0000050A
.text:0000050A loc_50A:                                ; CODE XREF: _wc_match_fragment+203j
.text:0000050A                 mov     [ebp+var_24], 0
.text:00000511
.text:00000511 loc_511:                                ; CODE XREF: _wc_match_fragment+20Cj
.text:00000511                 mov     edx, [ebp+var_10]
.text:00000514                 or      edx, [ebp+var_24]
.text:00000517                 mov     [ebp+var_10], edx
.text:0000051A
.text:0000051A loc_51A:                                ; CODE XREF: _wc_match_fragment:loc_4E6j
.text:0000051A                 jmp     loc_3FB
.text:0000051F ; ---------------------------------------------------------------------------
.text:0000051F
.text:0000051F loc_51F:                                ; CODE XREF: _wc_match_fragment+108j
.text:0000051F                 mov     eax, [ebp+var_C]
.text:00000522                 cmp     eax, [ebp+var_10]
.text:00000525                 jnz     short loc_52B
.text:00000527                 xor     eax, eax
.text:00000529                 jmp     short loc_58F
.text:0000052B ; ---------------------------------------------------------------------------
.text:0000052B
.text:0000052B loc_52B:                                ; CODE XREF: _wc_match_fragment+229j
.text:0000052B                 mov     ecx, [ebp+var_4]
.text:0000052E                 add     ecx, 1
.text:00000531                 mov     [ebp+var_4], ecx
.text:00000534                 jmp     short loc_553
.text:00000536 ; ---------------------------------------------------------------------------
.text:00000536
.text:00000536 loc_536:                                ; CODE XREF: _wc_match_fragment+C7j
.text:00000536                 mov     edx, [ebp+var_4]
.text:00000539                 movsx   eax, byte ptr [edx]
.text:0000053C                 mov     ecx, [ebp+var_8]
.text:0000053F                 movsx   edx, byte ptr [ecx]
.text:00000542                 cmp     eax, edx
.text:00000544                 jz      short loc_54A
.text:00000546                 xor     eax, eax
.text:00000548                 jmp     short loc_58F
.text:0000054A ; ---------------------------------------------------------------------------
.text:0000054A
.text:0000054A loc_54A:                                ; CODE XREF: _wc_match_fragment+248j
.text:0000054A                 mov     eax, [ebp+var_4]
.text:0000054D                 add     eax, 1
.text:00000550                 mov     [ebp+var_4], eax
.text:00000553
.text:00000553 loc_553:                                ; CODE XREF: _wc_match_fragment+A0j
.text:00000553                                         ; _wc_match_fragment+B9j ...
.text:00000553                 mov     ecx, [ebp+var_8]
.text:00000556                 add     ecx, 1
.text:00000559                 mov     [ebp+var_8], ecx
.text:0000055C                 jmp     loc_332
.text:00000561 ; ---------------------------------------------------------------------------
.text:00000561
.text:00000561 loc_561:                                ; CODE XREF: _wc_match_fragment+3Ej
.text:00000561                                         ; _wc_match_fragment+4Dj ...
.text:00000561                 mov     edx, [ebp+var_4]
.text:00000564                 movsx   eax, byte ptr [edx]
.text:00000567                 test    eax, eax
.text:00000569                 jz      short loc_576
.text:0000056B                 mov     ecx, [ebp+var_4]
.text:0000056E                 movsx   edx, byte ptr [ecx]
.text:00000571                 cmp     edx, 2Ah ; '*'
.text:00000574                 jnz     short loc_58D
.text:00000576
.text:00000576 loc_576:                                ; CODE XREF: _wc_match_fragment+26Dj
.text:00000576                 mov     eax, [ebp+arg_0]
.text:00000579                 mov     ecx, [ebp+var_4]
.text:0000057C                 mov     [eax], ecx
.text:0000057E                 mov     edx, [ebp+arg_4]
.text:00000581                 mov     eax, [ebp+var_8]
.text:00000584                 mov     [edx], eax
.text:00000586                 mov     eax, 1
.text:0000058B                 jmp     short loc_58F
.text:0000058D ; ---------------------------------------------------------------------------
.text:0000058D
.text:0000058D loc_58D:                                ; CODE XREF: _wc_match_fragment+278j
.text:0000058D                 xor     eax, eax
.text:0000058F
.text:0000058F loc_58F:                                ; CODE XREF: _wc_match_fragment+7Aj
.text:0000058F                                         ; _wc_match_fragment+92j ...
.text:0000058F                 mov     esp, ebp
.text:00000591                 pop     ebp
.text:00000592                 retn
.text:00000592 _wc_match_fragment endp
.text:00000592
.text:00000592 ; ---------------------------------------------------------------------------
.text:00000593                 db 9 dup(0CCh)
.text:0000059C
.text:0000059C ; =============== S U B R O U T I N E =======================================
.text:0000059C
.text:0000059C ; Attributes: bp-based frame
.text:0000059C
.text:0000059C                 public _wc_unescape
.text:0000059C _wc_unescape    proc near
.text:0000059C
.text:0000059C arg_0           = dword ptr  8
.text:0000059C arg_4           = dword ptr  0Ch
.text:0000059C
.text:0000059C                 push    ebp
.text:0000059D                 mov     ebp, esp
.text:0000059F
.text:0000059F loc_59F:                                ; CODE XREF: _wc_unescape:loc_643j
.text:0000059F                 mov     eax, [ebp+arg_4]
.text:000005A2                 movsx   ecx, byte ptr [eax]
.text:000005A5                 test    ecx, ecx
.text:000005A7                 jz      loc_648
.text:000005AD                 mov     edx, [ebp+arg_4]
.text:000005B0                 movsx   eax, byte ptr [edx]
.text:000005B3                 cmp     eax, 5Ch ; '\'
.text:000005B6                 jnz     short loc_5EF
.text:000005B8                 mov     ecx, [ebp+arg_4]
.text:000005BB                 add     ecx, 1
.text:000005BE                 mov     [ebp+arg_4], ecx
.text:000005C1                 mov     edx, [ebp+arg_4]
.text:000005C4                 movsx   eax, byte ptr [edx]
.text:000005C7                 test    eax, eax
.text:000005C9                 jz      short loc_5ED
.text:000005CB                 cmp     [ebp+arg_0], 0
.text:000005CF                 jz      short loc_5E4
.text:000005D1                 mov     ecx, [ebp+arg_0]
.text:000005D4                 mov     edx, [ebp+arg_4]
.text:000005D7                 mov     al, [edx]
.text:000005D9                 mov     [ecx], al
.text:000005DB                 mov     ecx, [ebp+arg_0]
.text:000005DE                 add     ecx, 1
.text:000005E1                 mov     [ebp+arg_0], ecx
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: _wc_unescape+33j
.text:000005E4                 mov     edx, [ebp+arg_4]
.text:000005E7                 add     edx, 1
.text:000005EA                 mov     [ebp+arg_4], edx
.text:000005ED
.text:000005ED loc_5ED:                                ; CODE XREF: _wc_unescape+2Dj
.text:000005ED                 jmp     short loc_643
.text:000005EF ; ---------------------------------------------------------------------------
.text:000005EF
.text:000005EF loc_5EF:                                ; CODE XREF: _wc_unescape+1Aj
.text:000005EF                 mov     eax, [ebp+arg_4]
.text:000005F2                 movsx   ecx, byte ptr [eax]
.text:000005F5                 cmp     ecx, 2Ah ; '*'
.text:000005F8                 jz      short loc_61B
.text:000005FA                 mov     edx, [ebp+arg_4]
.text:000005FD                 movsx   eax, byte ptr [edx]
.text:00000600                 cmp     eax, 3Fh ; '?'
.text:00000603                 jz      short loc_61B
.text:00000605                 mov     ecx, [ebp+arg_4]
.text:00000608                 movsx   edx, byte ptr [ecx]
.text:0000060B                 cmp     edx, 5Bh ; '['
.text:0000060E                 jz      short loc_61B
.text:00000610                 mov     eax, [ebp+arg_4]
.text:00000613                 movsx   ecx, byte ptr [eax]
.text:00000616                 cmp     ecx, 5Dh ; ']'
.text:00000619                 jnz     short loc_621
.text:0000061B
.text:0000061B loc_61B:                                ; CODE XREF: _wc_unescape+5Cj
.text:0000061B                                         ; _wc_unescape+67j ...
.text:0000061B                 xor     eax, eax
.text:0000061D                 jmp     short loc_659
.text:0000061F ; ---------------------------------------------------------------------------
.text:0000061F                 jmp     short loc_643
.text:00000621 ; ---------------------------------------------------------------------------
.text:00000621
.text:00000621 loc_621:                                ; CODE XREF: _wc_unescape+7Dj
.text:00000621                 cmp     [ebp+arg_0], 0
.text:00000625                 jz      short loc_63A
.text:00000627                 mov     edx, [ebp+arg_0]
.text:0000062A                 mov     eax, [ebp+arg_4]
.text:0000062D                 mov     cl, [eax]
.text:0000062F                 mov     [edx], cl
.text:00000631                 mov     edx, [ebp+arg_0]
.text:00000634                 add     edx, 1
.text:00000637                 mov     [ebp+arg_0], edx
.text:0000063A
.text:0000063A loc_63A:                                ; CODE XREF: _wc_unescape+89j
.text:0000063A                 mov     eax, [ebp+arg_4]
.text:0000063D                 add     eax, 1
.text:00000640                 mov     [ebp+arg_4], eax
.text:00000643
.text:00000643 loc_643:                                ; CODE XREF: _wc_unescape:loc_5EDj
.text:00000643                                         ; _wc_unescape+83j
.text:00000643                 jmp     loc_59F
.text:00000648 ; ---------------------------------------------------------------------------
.text:00000648
.text:00000648 loc_648:                                ; CODE XREF: _wc_unescape+Bj
.text:00000648                 cmp     [ebp+arg_0], 0
.text:0000064C                 jz      short loc_654
.text:0000064E                 mov     ecx, [ebp+arg_0]
.text:00000651                 mov     byte ptr [ecx], 0
.text:00000654
.text:00000654 loc_654:                                ; CODE XREF: _wc_unescape+B0j
.text:00000654                 mov     eax, 1
.text:00000659
.text:00000659 loc_659:                                ; CODE XREF: _wc_unescape+81j
.text:00000659                 pop     ebp
.text:0000065A                 retn
.text:0000065A _wc_unescape    endp
.text:0000065A
.text:0000065A ; ---------------------------------------------------------------------------
.text:0000065B                 align 4
.text:0000065B _text           ends
.text:0000065B
.rtc$TMZ:0000065C ; ===========================================================================
.rtc$TMZ:0000065C
.rtc$TMZ:0000065C ; Segment type: Pure data
.rtc$TMZ:0000065C ; Segment permissions: Read
.rtc$TMZ:0000065C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000065C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000065C                 ;org 65Ch
.rtc$TMZ:0000065C ; COMDAT (pick any)
.rtc$TMZ:0000065C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000065C _rtc$TMZ        ends
.rtc$TMZ:0000065C
.rtc$IMZ:00000660 ; ===========================================================================
.rtc$IMZ:00000660
.rtc$IMZ:00000660 ; Segment type: Pure data
.rtc$IMZ:00000660 ; Segment permissions: Read
.rtc$IMZ:00000660 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000660                 assume cs:_rtc$IMZ
.rtc$IMZ:00000660                 ;org 660h
.rtc$IMZ:00000660 ; COMDAT (pick any)
.rtc$IMZ:00000660 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000660 _rtc$IMZ        ends
.rtc$IMZ:00000660
UNDEF:00000670 ; ===========================================================================
UNDEF:00000670
UNDEF:00000670 ; Segment type: Externs
UNDEF:00000670 ; UNDEF
UNDEF:00000670 ; int __cdecl abs(int)
UNDEF:00000670                 extrn _abs:near         ; CODE XREF: _wc_error+Fp
UNDEF:00000674                 extrn __RTC_CheckEsp:near ; CODE XREF: _wc_error+53p
UNDEF:00000674                                         ; _wc_match+16Bp
UNDEF:00000678                 extrn __RTC_Shutdown:near
UNDEF:00000678                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000067C                 extrn __RTC_InitBase:near
UNDEF:0000067C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000680 ; size_t __cdecl strlen(const char *)
UNDEF:00000680                 extrn _strlen:near      ; CODE XREF: _wc_match+101p
UNDEF:00000684                 extrn __wassert:near    ; CODE XREF: _wc_match+6Fp
UNDEF:00000684
UNDEF:00000684
UNDEF:00000684                 end