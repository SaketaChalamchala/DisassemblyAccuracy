.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 8F6800B4D23B502837F7870D6DC503B3
.data:00000000 ; Input CRC32 : A7F8A490
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshshare.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; wchar_t _SG87174
.data:00000000 $SG87174:                               ; DATA XREF: _share_find_unused_id+10Ao
.data:00000000                 unicode 0, <..\..\..\sshshare.c>,0
.data:00000028 ; wchar_t _SG87175
.data:00000028 $SG87175:                               ; DATA XREF: _share_find_unused_id+10Fo
.data:00000028                                         ; .data:$SG88388o
.data:00000028                 unicode 0, <NULL == find234(sharestate->
.data:00000028                 dw 3Eh
.data:00000028                 unicode 0, <connections, &dummy, NULL)>,0
.data:00000096                 align 4
.data:00000098 ; wchar_t _SG87377
.data:00000098 $SG87377:                               ; DATA XREF: _share_channel_set_server_id+20o
.data:00000098                 unicode 0, <..\..\..\sshshare.c>,0
.data:000000C0 ; wchar_t _SG87378
.data:000000C0 $SG87378:                               ; DATA XREF: _share_channel_set_server_id+25o
.data:000000C0                 unicode 0, <newstate != UNACKNOWLEDGED>,0
.data:000000F6                 align 4
.data:000000F8 $SG87555        db 'cleanup after downstream went away',0
.data:000000F8                                         ; DATA XREF: _share_try_cleanup+27Co
.data:0000011B                 align 4
.data:0000011C $SG87568        db 'cleanup after downstream went away',0
.data:0000011C                                         ; DATA XREF: _share_try_cleanup+37Co
.data:0000013F                 align 10h
.data:00000140 $SG87595        db 'cleanup after downstream went away',0
.data:00000140                                         ; DATA XREF: _share_try_cleanup+686o
.data:00000163                 align 4
.data:00000164 $SG87641        db '%s',0               ; DATA XREF: _share_closing+1Bo
.data:00000167                 align 4
.data:00000168 $SG87669        db '%.*s',0             ; DATA XREF: _getstring_inner+94o
.data:0000016D                 align 10h
.data:00000170 $SG87726        db 'downstream refused X channel open',0
.data:00000170                                         ; DATA XREF: _share_dead_xchannel_respond+C7o
.data:00000192                 align 4
.data:00000194 $SG87759        db 'window adjustment after downstream accepted X channel',0
.data:00000194                                         ; DATA XREF: _share_xchannel_confirmation+12Do
.data:000001CA                 align 4
.data:000001CC $SG87771        db 'downstream refused X channel open',0
.data:000001CC                                         ; DATA XREF: _share_xchannel_failure+48o
.data:000001EE                 align 10h
.data:000001F0 $SG87821        db 'x11',0              ; DATA XREF: _share_setup_x11_channel+163o
.data:000001F4 ; wchar_t _SG87881
.data:000001F4 $SG87881:                               ; DATA XREF: _share_got_pkt_from_server+145o
.data:000001F4                 unicode 0, <..\..\..\sshshare.c>,0
.data:0000021C ; wchar_t _SG87882
.data:0000021C $SG87882:                               ; DATA XREF: _share_got_pkt_from_server+14Ao
.data:0000021C                 unicode 0, <id_pos >
.data:0000021C                 dw 3Eh
.data:0000021C                 unicode 0, <= 0>,0
.data:00000234 ; wchar_t _SG87894
.data:00000234 $SG87894:                               ; DATA XREF: _share_got_pkt_from_server+1CAo
.data:00000234                 unicode 0, <..\..\..\sshshare.c>,0
.data:0000025C ; wchar_t _SG87895
.data:0000025C $SG87895:                               ; DATA XREF: _share_got_pkt_from_server+1CFo
.data:0000025C                 unicode 0, <pktlen >
.data:0000025C                 dw 3Eh
.data:0000025C                 unicode 0, <= 4>,0
.data:00000274 $SG87935        db 'This packet type should never have come from ssh.c',0
.data:00000274                                         ; DATA XREF: _share_got_pkt_from_server:$LN1o
.data:000002A7                 align 4
.data:000002A8 ; wchar_t _SG87936
.data:000002A8 $SG87936:                               ; DATA XREF: _share_got_pkt_from_server+3DFo
.data:000002A8                 unicode 0, <..\..\..\sshshare.c>,0
.data:000002D0 ; wchar_t _SG87937
.data:000002D0 $SG87937:                               ; DATA XREF: _share_got_pkt_from_server+3E4o
.data:000002D0                 unicode 0, <!"This packet type should never have come from ssh.c">,0
.data:0000033C $SG87968        db 'Truncated GLOBAL_REQUEST packet',0
.data:0000033C                                         ; DATA XREF: _share_got_pkt_from_downstream+86o
.data:0000035C ; char _SG87971[]
.data:0000035C $SG87971        db 'tcpip-forward',0    ; DATA XREF: _share_got_pkt_from_downstream:loc_2E97o
.data:0000036A                 align 4
.data:0000036C $SG87979        db 'Truncated GLOBAL_REQUEST packet',0
.data:0000036C                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_2EDDo
.data:0000038C $SG87982        db 'Truncated GLOBAL_REQUEST packet',0
.data:0000038C                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_2F3Eo
.data:000003AC ; wchar_t _SG87985
.data:000003AC $SG87985:                               ; DATA XREF: _share_got_pkt_from_downstream+184o
.data:000003AC                 unicode 0, <..\..\..\sshshare.c>,0
.data:000003D4 ; wchar_t _SG87986
.data:000003D4 $SG87986:                               ; DATA XREF: _share_got_pkt_from_downstream+189o
.data:000003D4                 unicode 0, <host != NULL>,0
.data:000003EE                 align 10h
.data:000003F0 $SG88002        db 'upstream added want_reply flag',0
.data:000003F0                                         ; DATA XREF: _share_got_pkt_from_downstream+236o
.data:0000040F                 align 10h
.data:00000410 ; char _SG88011[]
.data:00000410 $SG88011        db 'cancel-tcpip-forward',0
.data:00000410                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_30FEo
.data:00000425                 align 4
.data:00000428 $SG88019        db 'Truncated GLOBAL_REQUEST packet',0
.data:00000428                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_3144o
.data:00000448 $SG88022        db 'Truncated GLOBAL_REQUEST packet',0
.data:00000448                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_31A5o
.data:00000468 ; wchar_t _SG88025
.data:00000468 $SG88025:                               ; DATA XREF: _share_got_pkt_from_downstream+3EBo
.data:00000468                 unicode 0, <..\..\..\sshshare.c>,0
.data:00000490 ; wchar_t _SG88026
.data:00000490 $SG88026:                               ; DATA XREF: _share_got_pkt_from_downstream+3F0o
.data:00000490                 unicode 0, <host != NULL>,0
.data:000004AA                 align 4
.data:000004AC $SG88042        db 'upstream added want_reply flag',0
.data:000004AC                                         ; DATA XREF: _share_got_pkt_from_downstream+490o
.data:000004CB                 align 4
.data:000004CC $SG88047        db 'Truncated GLOBAL_REQUEST packet',0
.data:000004CC                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_3308o
.data:000004EC $SG88054        db 'Truncated CHANNEL_OPEN packet',0
.data:000004EC                                         ; DATA XREF: _share_got_pkt_from_downstream:loc_336Ao
.data:0000050A                 align 4
.data:0000050C $SG88078        db 'Truncated CHANNEL_OPEN_CONFIRMATION packet',0
.data:0000050C                                         ; DATA XREF: _share_got_pkt_from_downstream+68Fo
.data:00000537                 align 4
.data:00000538 $SG88104        db 'CHANNEL_OPEN_CONFIRMATION packet cited unknown channel %u',0
.data:00000538                                         ; DATA XREF: _share_got_pkt_from_downstream+77Ao
.data:00000572                 align 4
.data:00000574 ; char _SG88156[]
.data:00000574 $SG88156        db 'auth-agent-req@openssh.com',0
.data:00000574                                         ; DATA XREF: _share_got_pkt_from_downstream+9E2o
.data:0000058F                 align 10h
.data:00000590 $SG88131        db 'Initial window size for x11 channel must be at least 256 (got %u)'
.data:00000590                                         ; DATA XREF: _share_got_pkt_from_downstream+890o
.data:00000590                 db 0
.data:000005D2                 align 4
.data:000005D4 $SG88134        db 'Truncated CHANNEL_OPEN_FAILURE packet',0
.data:000005D4                                         ; DATA XREF: _share_got_pkt_from_downstream+8D8o
.data:000005FA                 align 4
.data:000005FC $SG88151        db 'CHANNEL_OPEN_FAILURE packet cited unknown channel %u',0
.data:000005FC                                         ; DATA XREF: _share_got_pkt_from_downstream+99Bo
.data:00000631                 align 4
.data:00000634 $SG88175        db 'Agent forwarding request for unrecognised channel %u',0
.data:00000634                                         ; DATA XREF: _share_got_pkt_from_downstream+AACo
.data:00000669                 align 4
.data:0000066C ; char _SG88177[]
.data:0000066C $SG88177        db 'x11-req',0          ; DATA XREF: _share_got_pkt_from_downstream:loc_38DEo
.data:00000674 $SG88198        db 'X11 forwarding request for unrecognised channel %u',0
.data:00000674                                         ; DATA XREF: _share_got_pkt_from_downstream+B51o
.data:000006A7                 align 4
.data:000006A8 $SG88200        db 'Truncated CHANNEL_REQUEST("x11") packet',0
.data:000006A8                                         ; DATA XREF: _share_got_pkt_from_downstream+B91o
.data:000006D0 $SG88202        db 'Truncated CHANNEL_REQUEST("x11") packet',0
.data:000006D0                                         ; DATA XREF: _share_got_pkt_from_downstream+C80o
.data:000006F8 $SG88228        db 'x11-req',0          ; DATA XREF: _share_got_pkt_from_downstream+E5Fo
.data:00000700 $SG88256        db 'Unexpected packet type %d',0Ah,0
.data:00000700                                         ; DATA XREF: _share_got_pkt_from_downstream+10DCo
.data:0000071B                 align 4
.data:0000071C ; wchar_t _SG88259
.data:0000071C $SG88259:                               ; DATA XREF: _share_got_pkt_from_downstream+10F7o
.data:0000071C                 unicode 0, <..\..\..\sshshare.c>,0
.data:00000744 ; wchar_t _SG88260
.data:00000744 $SG88260:                               ; DATA XREF: _share_got_pkt_from_downstream+10FCo
.data:00000744                 unicode 0, <err != NULL>,0
.data:0000075C $SG88296        db 'Version string far too long',0Ah,0
.data:0000075C                                         ; DATA XREF: _share_receive+E1o
.data:00000779                 align 4
.data:0000077C $SG88301        db 'Version string did not have expected prefix',0Ah,0
.data:0000077C                                         ; DATA XREF: _share_receive:loc_29E1o
.data:000007A9                 align 4
.data:000007AC $SG88303        db 'Downstream version string: %.*s',0
.data:000007AC                                         ; DATA XREF: _share_receive+1DEo
.data:000007CC $SG88330        db 'Bad packet length %u',0Ah,0
.data:000007CC                                         ; DATA XREF: _share_receive+2DEo
.data:000007E2                 align 4
.data:000007E4 $SG88361        db 'listening socket: %s',0
.data:000007E4                                         ; DATA XREF: _share_listen_closing+1Co
.data:000007F9                 align 4
.data:000007FC $SG88369        dd offset loc_A0C+1     ; DATA XREF: _share_send_verstring+Eo
.data:00000800 $SG88370        db 'SSHCONNECTION@putty.projects.tartarus.org-2.0-',0
.data:00000800                                         ; DATA XREF: _share_send_verstring+1Do
.data:0000082F                 align 10h
.data:00000830 ; char _SG88388[]
.data:00000830 $SG88388        dd offset $SG87175+5    ; DATA XREF: _share_activate+39o
.data:00000830                                         ; "䰀 㴀㴀 昀椀渀搀㈀㌀㐀⠀"...
.data:00000834 ; wchar_t _SG88396
.data:00000834 $SG88396:                               ; DATA XREF: _share_activate+B3o
.data:00000834                 unicode 0, <..\..\..\sshshare.c>,0
.data:0000085C ; wchar_t _SG88397
.data:0000085C $SG88397:                               ; DATA XREF: _share_activate+B8o
.data:0000085C                 unicode 0, <!cs->
.data:0000085C                 dw 3Eh
.data:0000085C                 unicode 0, <sent_verstring>,0
.data:00000884 $SG88458        db '%s@%s',0            ; DATA XREF: _ssh_connection_sharing_init+D0o
.data:0000088A                 align 4
.data:0000088C $SG88460        db '%s',0               ; DATA XREF: _ssh_connection_sharing_init+E6o
.data:0000088F                 align 10h
.data:00000890 $SG88463        db '%s@%s:%d',0         ; DATA XREF: _ssh_connection_sharing_init+10Ao
.data:00000899                 align 4
.data:0000089C $SG88465        db '%s:%d',0            ; DATA XREF: _ssh_connection_sharing_init+124o
.data:000008A2                 align 4
.data:000008A4 ; wchar_t _SG88480
.data:000008A4 $SG88480:                               ; DATA XREF: _ssh_connection_sharing_init+217o
.data:000008A4                 unicode 0, <..\..\..\sshshare.c>,0
.data:000008CC ; wchar_t _SG88481
.data:000008CC $SG88481:                               ; DATA XREF: _ssh_connection_sharing_init+21Co
.data:000008CC                 unicode 0, <sock == NULL>,0
.data:000008E6                 align 4
.data:000008E6 _data           ends
.data:000008E6
.rdata:000008E8 ; ===========================================================================
.rdata:000008E8
.rdata:000008E8 ; Segment type: Pure data
.rdata:000008E8 ; Segment permissions: Read
.rdata:000008E8 _rdata          segment dword public 'DATA' use32
.rdata:000008E8                 assume cs:_rdata
.rdata:000008E8                 ;org 8E8h
.rdata:000008E8 ; char `share_try_cleanup'::`3'::reason[]
.rdata:000008E8 ?reason@?2??share_try_cleanup@@9@9 db 'PuTTY downstream no longer available',0
.rdata:000008E8                                         ; DATA XREF: _share_try_cleanup+F8o
.rdata:000008E8                                         ; _share_try_cleanup+115o ...
.rdata:0000090D                 align 10h
.rdata:00000910 ; char `share_try_cleanup'::`3'::lang[]
.rdata:00000910 ?lang@?2??share_try_cleanup@@9@9 db 'en',0
.rdata:00000910                                         ; DATA XREF: _share_try_cleanup+1BAo
.rdata:00000910                                         ; _share_try_cleanup+1D7o ...
.rdata:00000913                 align 4
.rdata:00000914 ; char `share_try_cleanup'::`9'::request[]
.rdata:00000914 ?request@?8??share_try_cleanup@@9@9 db 'cancel-tcpip-forward',0
.rdata:00000914                                         ; DATA XREF: _share_try_cleanup+466o
.rdata:00000914                                         ; _share_try_cleanup+484o ...
.rdata:00000929                 align 4
.rdata:0000092C ; char `share_disconnect'::`2'::lang[]
.rdata:0000092C ?lang@?1??share_disconnect@@9@9 db 'en',0 ; DATA XREF: _share_disconnect+D9o
.rdata:0000092C                                         ; _share_disconnect+F1o ...
.rdata:0000092F                 align 10h
.rdata:00000930 ; `share_receive'::`2'::expected_verstring_prefix
.rdata:00000930 ?expected_verstring_prefix@?1??share_receive@@9@9 db 'SSHCONNECTION@putty.projects.tartarus.org-2.0-',0
.rdata:00000930                                         ; DATA XREF: _share_receive+14Do
.rdata:0000095F                 align 10h
.rdata:00000960 ; `share_listen_accepting'::`2'::connection_fn_table
.rdata:00000960 ?connection_fn_table@?1??share_listen_accepting@@9@9 db    0
.rdata:00000960                                         ; DATA XREF: _share_listen_accepting+36o
.rdata:00000961                 db    0
.rdata:00000962                 db    0
.rdata:00000963                 db    0
.rdata:00000964                 dd offset _share_closing
.rdata:00000968                 dd offset _share_receive
.rdata:0000096C                 dd offset _share_sent
.rdata:00000970                 db    0
.rdata:00000971                 db    0
.rdata:00000972                 db    0
.rdata:00000973                 db    0
.rdata:00000974 ; `ssh_connection_sharing_init'::`2'::listen_fn_table
.rdata:00000974 ?listen_fn_table@?1??ssh_connection_sharing_init@@9@9 db    0
.rdata:00000974                                         ; DATA XREF: _ssh_connection_sharing_init+152o
.rdata:00000975                 db    0
.rdata:00000976                 db    0
.rdata:00000977                 db    0
.rdata:00000978                 dd offset _share_listen_closing
.rdata:0000097C                 db    0
.rdata:0000097D                 db    0
.rdata:0000097E                 db    0
.rdata:0000097F                 db    0
.rdata:00000980                 db    0
.rdata:00000981                 db    0
.rdata:00000982                 db    0
.rdata:00000983                 db    0
.rdata:00000984                 dd offset _share_listen_accepting
.rdata:00000984 _rdata          ends
.rdata:00000984
.bss:00000988 ; ===========================================================================
.bss:00000988
.bss:00000988 ; Segment type: Uninitialized
.bss:00000988 ; Segment permissions: Read/Write
.bss:00000988 _bss            segment byte public 'BSS' use32
.bss:00000988                 assume cs:_bss
.bss:00000988                 ;org 988h
.bss:00000988                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000988 $SG87998        db    ? ;               ; DATA XREF: _share_got_pkt_from_downstream+200o
.bss:00000989 $SG88038        db    ? ;               ; DATA XREF: _share_got_pkt_from_downstream+45Do
.bss:0000098A $SG88050        db    ? ;               ; DATA XREF: _share_got_pkt_from_downstream+532o
.bss:0000098B                 align 4
.bss:0000098B _bss            ends
.bss:0000098B
.text:0000098C ; ===========================================================================
.text:0000098C
.text:0000098C ; Segment type: Pure code
.text:0000098C ; Segment permissions: Read/Execute
.text:0000098C _text           segment para public 'CODE' use32
.text:0000098C                 assume cs:_text
.text:0000098C                 ;org 98Ch
.text:0000098C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000098C
.text:0000098C ; =============== S U B R O U T I N E =======================================
.text:0000098C
.text:0000098C ; Attributes: bp-based frame
.text:0000098C
.text:0000098C                 public _sharestate_free
.text:0000098C _sharestate_free proc near
.text:0000098C
.text:0000098C var_8           = dword ptr -8
.text:0000098C var_4           = dword ptr -4
.text:0000098C arg_0           = dword ptr  8
.text:0000098C
.text:0000098C                 push    ebp
.text:0000098D                 mov     ebp, esp
.text:0000098F                 sub     esp, 8
.text:00000992                 push    esi
.text:00000993                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000099A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A1                 mov     eax, [ebp+arg_0]
.text:000009A4                 mov     [ebp+var_4], eax
.text:000009A7                 mov     ecx, [ebp+var_4]
.text:000009AA                 mov     edx, [ecx+4]
.text:000009AD                 push    edx
.text:000009AE                 call    _platform_ssh_share_cleanup
.text:000009B3                 add     esp, 4
.text:000009B6
.text:000009B6 loc_9B6:                                ; CODE XREF: _sharestate_free+50j
.text:000009B6                 push    0
.text:000009B8                 mov     eax, [ebp+var_4]
.text:000009BB                 mov     ecx, [eax+0Ch]
.text:000009BE                 push    ecx
.text:000009BF                 call    _delpos234
.text:000009C4                 add     esp, 8
.text:000009C7                 mov     [ebp+var_8], eax
.text:000009CA                 cmp     [ebp+var_8], 0
.text:000009CE                 jz      short loc_9DE
.text:000009D0                 mov     edx, [ebp+var_8]
.text:000009D3                 push    edx
.text:000009D4                 call    _share_connstate_free
.text:000009D9                 add     esp, 4
.text:000009DC                 jmp     short loc_9B6
.text:000009DE ; ---------------------------------------------------------------------------
.text:000009DE
.text:000009DE loc_9DE:                                ; CODE XREF: _sharestate_free+42j
.text:000009DE                 mov     eax, [ebp+var_4]
.text:000009E1                 mov     ecx, [eax+0Ch]
.text:000009E4                 push    ecx
.text:000009E5                 call    _freetree234
.text:000009EA                 add     esp, 4
.text:000009ED                 mov     edx, [ebp+var_4]
.text:000009F0                 cmp     dword ptr [edx+8], 0
.text:000009F4                 jz      short loc_A20
.text:000009F6                 mov     esi, esp
.text:000009F8                 mov     eax, [ebp+var_4]
.text:000009FB                 mov     ecx, [eax+8]
.text:000009FE                 push    ecx
.text:000009FF                 mov     edx, [ebp+var_4]
.text:00000A02                 mov     eax, [edx+8]
.text:00000A05                 mov     ecx, [eax]
.text:00000A07                 mov     edx, [ecx+4]
.text:00000A0A                 call    edx
.text:00000A0C
.text:00000A0C loc_A0C:                                ; DATA XREF: .data:$SG88369o
.text:00000A0C                 add     esp, 4
.text:00000A0F                 cmp     esi, esp
.text:00000A11                 call    __RTC_CheckEsp
.text:00000A16                 mov     eax, [ebp+var_4]
.text:00000A19                 mov     dword ptr [eax+8], 0
.text:00000A20
.text:00000A20 loc_A20:                                ; CODE XREF: _sharestate_free+68j
.text:00000A20                 mov     ecx, [ebp+var_4]
.text:00000A23                 mov     edx, [ecx+18h]
.text:00000A26                 push    edx
.text:00000A27                 call    _safefree
.text:00000A2C                 add     esp, 4
.text:00000A2F                 mov     eax, [ebp+var_4]
.text:00000A32                 mov     ecx, [eax+4]
.text:00000A35                 push    ecx
.text:00000A36                 call    _safefree
.text:00000A3B                 add     esp, 4
.text:00000A3E                 mov     edx, [ebp+var_4]
.text:00000A41                 push    edx
.text:00000A42                 call    _safefree
.text:00000A47                 add     esp, 4
.text:00000A4A                 pop     esi
.text:00000A4B                 add     esp, 8
.text:00000A4E                 cmp     ebp, esp
.text:00000A50                 call    __RTC_CheckEsp
.text:00000A55                 mov     esp, ebp
.text:00000A57                 pop     ebp
.text:00000A58                 retn
.text:00000A58 _sharestate_free endp
.text:00000A58
.text:00000A58 ; ---------------------------------------------------------------------------
.text:00000A59                 align 4
.text:00000A5C
.text:00000A5C ; =============== S U B R O U T I N E =======================================
.text:00000A5C
.text:00000A5C ; Attributes: bp-based frame
.text:00000A5C
.text:00000A5C _share_connstate_free proc near         ; CODE XREF: _sharestate_free+48p
.text:00000A5C                                         ; _share_try_cleanup+756p
.text:00000A5C
.text:00000A5C var_14          = dword ptr -14h
.text:00000A5C var_10          = dword ptr -10h
.text:00000A5C var_C           = dword ptr -0Ch
.text:00000A5C var_8           = dword ptr -8
.text:00000A5C var_4           = dword ptr -4
.text:00000A5C arg_0           = dword ptr  8
.text:00000A5C
.text:00000A5C                 push    ebp
.text:00000A5D                 mov     ebp, esp
.text:00000A5F                 sub     esp, 14h
.text:00000A62                 mov     eax, 0CCCCCCCCh
.text:00000A67                 mov     [ebp+var_14], eax
.text:00000A6A                 mov     [ebp+var_10], eax
.text:00000A6D                 mov     [ebp+var_C], eax
.text:00000A70                 mov     [ebp+var_8], eax
.text:00000A73                 mov     [ebp+var_4], eax
.text:00000A76
.text:00000A76 loc_A76:                                ; CODE XREF: _share_connstate_free+43j
.text:00000A76                 push    0
.text:00000A78                 mov     eax, [ebp+arg_0]
.text:00000A7B                 mov     ecx, [eax+4034h]
.text:00000A81                 push    ecx
.text:00000A82                 call    _delpos234
.text:00000A87                 add     esp, 8
.text:00000A8A                 mov     [ebp+var_4], eax
.text:00000A8D                 cmp     [ebp+var_4], 0
.text:00000A91                 jz      short loc_AA1
.text:00000A93                 mov     edx, [ebp+var_4]
.text:00000A96                 push    edx
.text:00000A97                 call    _safefree
.text:00000A9C                 add     esp, 4
.text:00000A9F                 jmp     short loc_A76
.text:00000AA1 ; ---------------------------------------------------------------------------
.text:00000AA1
.text:00000AA1 loc_AA1:                                ; CODE XREF: _share_connstate_free+35j
.text:00000AA1                 mov     eax, [ebp+arg_0]
.text:00000AA4                 mov     ecx, [eax+4034h]
.text:00000AAA                 push    ecx
.text:00000AAB                 call    _freetree234
.text:00000AB0                 add     esp, 4
.text:00000AB3                 mov     edx, [ebp+arg_0]
.text:00000AB6                 mov     eax, [edx+403Ch]
.text:00000ABC                 push    eax
.text:00000ABD                 call    _freetree234
.text:00000AC2                 add     esp, 4
.text:00000AC5
.text:00000AC5 loc_AC5:                                ; CODE XREF: _share_connstate_free+92j
.text:00000AC5                 push    0
.text:00000AC7                 mov     ecx, [ebp+arg_0]
.text:00000ACA                 mov     edx, [ecx+4038h]
.text:00000AD0                 push    edx
.text:00000AD1                 call    _delpos234
.text:00000AD6                 add     esp, 8
.text:00000AD9                 mov     [ebp+var_C], eax
.text:00000ADC                 cmp     [ebp+var_C], 0
.text:00000AE0                 jz      short loc_AF0
.text:00000AE2                 mov     eax, [ebp+var_C]
.text:00000AE5                 push    eax
.text:00000AE6                 call    _safefree
.text:00000AEB                 add     esp, 4
.text:00000AEE                 jmp     short loc_AC5
.text:00000AF0 ; ---------------------------------------------------------------------------
.text:00000AF0
.text:00000AF0 loc_AF0:                                ; CODE XREF: _share_connstate_free+84j
.text:00000AF0                 mov     ecx, [ebp+arg_0]
.text:00000AF3                 mov     edx, [ecx+4038h]
.text:00000AF9                 push    edx
.text:00000AFA                 call    _freetree234
.text:00000AFF                 add     esp, 4
.text:00000B02
.text:00000B02 loc_B02:                                ; CODE XREF: _share_connstate_free+CFj
.text:00000B02                 push    0
.text:00000B04                 mov     eax, [ebp+arg_0]
.text:00000B07                 mov     ecx, [eax+4040h]
.text:00000B0D                 push    ecx
.text:00000B0E                 call    _delpos234
.text:00000B13                 add     esp, 8
.text:00000B16                 mov     [ebp+var_8], eax
.text:00000B19                 cmp     [ebp+var_8], 0
.text:00000B1D                 jz      short loc_B2D
.text:00000B1F                 mov     edx, [ebp+var_8]
.text:00000B22                 push    edx
.text:00000B23                 call    _share_xchannel_free
.text:00000B28                 add     esp, 4
.text:00000B2B                 jmp     short loc_B02
.text:00000B2D ; ---------------------------------------------------------------------------
.text:00000B2D
.text:00000B2D loc_B2D:                                ; CODE XREF: _share_connstate_free+C1j
.text:00000B2D                 mov     eax, [ebp+arg_0]
.text:00000B30                 mov     ecx, [eax+4040h]
.text:00000B36                 push    ecx
.text:00000B37                 call    _freetree234
.text:00000B3C                 add     esp, 4
.text:00000B3F                 mov     edx, [ebp+arg_0]
.text:00000B42                 mov     eax, [edx+4044h]
.text:00000B48                 push    eax
.text:00000B49                 call    _freetree234
.text:00000B4E                 add     esp, 4
.text:00000B51
.text:00000B51 loc_B51:                                ; CODE XREF: _share_connstate_free+11Ej
.text:00000B51                 push    0
.text:00000B53                 mov     ecx, [ebp+arg_0]
.text:00000B56                 mov     edx, [ecx+4048h]
.text:00000B5C                 push    edx
.text:00000B5D                 call    _delpos234
.text:00000B62                 add     esp, 8
.text:00000B65                 mov     [ebp+var_10], eax
.text:00000B68                 cmp     [ebp+var_10], 0
.text:00000B6C                 jz      short loc_B7C
.text:00000B6E                 mov     eax, [ebp+var_10]
.text:00000B71                 push    eax
.text:00000B72                 call    _safefree
.text:00000B77                 add     esp, 4
.text:00000B7A                 jmp     short loc_B51
.text:00000B7C ; ---------------------------------------------------------------------------
.text:00000B7C
.text:00000B7C loc_B7C:                                ; CODE XREF: _share_connstate_free+110j
.text:00000B7C                 mov     ecx, [ebp+arg_0]
.text:00000B7F                 mov     edx, [ecx+4048h]
.text:00000B85                 push    edx
.text:00000B86                 call    _freetree234
.text:00000B8B                 add     esp, 4
.text:00000B8E
.text:00000B8E loc_B8E:                                ; CODE XREF: _share_connstate_free+16Aj
.text:00000B8E                 mov     eax, [ebp+arg_0]
.text:00000B91                 cmp     dword ptr [eax+404Ch], 0
.text:00000B98                 jz      short loc_BC8
.text:00000B9A                 mov     ecx, [ebp+arg_0]
.text:00000B9D                 mov     edx, [ecx+404Ch]
.text:00000BA3                 mov     [ebp+var_14], edx
.text:00000BA6                 mov     eax, [ebp+arg_0]
.text:00000BA9                 mov     ecx, [eax+404Ch]
.text:00000BAF                 mov     edx, [ebp+arg_0]
.text:00000BB2                 mov     eax, [ecx]
.text:00000BB4                 mov     [edx+404Ch], eax
.text:00000BBA                 mov     ecx, [ebp+var_14]
.text:00000BBD                 push    ecx
.text:00000BBE                 call    _safefree
.text:00000BC3                 add     esp, 4
.text:00000BC6                 jmp     short loc_B8E
.text:00000BC8 ; ---------------------------------------------------------------------------
.text:00000BC8
.text:00000BC8 loc_BC8:                                ; CODE XREF: _share_connstate_free+13Cj
.text:00000BC8                 mov     edx, [ebp+arg_0]
.text:00000BCB                 push    edx
.text:00000BCC                 call    _safefree
.text:00000BD1                 add     esp, 4
.text:00000BD4                 add     esp, 14h
.text:00000BD7                 cmp     ebp, esp
.text:00000BD9                 call    __RTC_CheckEsp
.text:00000BDE                 mov     esp, ebp
.text:00000BE0                 pop     ebp
.text:00000BE1                 retn
.text:00000BE1 _share_connstate_free endp
.text:00000BE1
.text:00000BE1 ; ---------------------------------------------------------------------------
.text:00000BE2                 db 0Ah dup(0CCh)
.text:00000BEC
.text:00000BEC ; =============== S U B R O U T I N E =======================================
.text:00000BEC
.text:00000BEC ; Attributes: bp-based frame
.text:00000BEC
.text:00000BEC _share_xchannel_free proc near          ; CODE XREF: _share_connstate_free+C7p
.text:00000BEC                                         ; _share_remove_xchannel+33p
.text:00000BEC
.text:00000BEC var_4           = dword ptr -4
.text:00000BEC arg_0           = dword ptr  8
.text:00000BEC
.text:00000BEC                 push    ebp
.text:00000BED                 mov     ebp, esp
.text:00000BEF                 push    ecx
.text:00000BF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BF7
.text:00000BF7 loc_BF7:                                ; CODE XREF: _share_xchannel_free+34j
.text:00000BF7                 mov     eax, [ebp+arg_0]
.text:00000BFA                 cmp     dword ptr [eax+10h], 0
.text:00000BFE                 jz      short loc_C22
.text:00000C00                 mov     ecx, [ebp+arg_0]
.text:00000C03                 mov     edx, [ecx+10h]
.text:00000C06                 mov     [ebp+var_4], edx
.text:00000C09                 mov     eax, [ebp+arg_0]
.text:00000C0C                 mov     ecx, [ebp+var_4]
.text:00000C0F                 mov     edx, [ecx]
.text:00000C11                 mov     [eax+10h], edx
.text:00000C14                 mov     eax, [ebp+var_4]
.text:00000C17                 push    eax
.text:00000C18                 call    _safefree
.text:00000C1D                 add     esp, 4
.text:00000C20                 jmp     short loc_BF7
.text:00000C22 ; ---------------------------------------------------------------------------
.text:00000C22
.text:00000C22 loc_C22:                                ; CODE XREF: _share_xchannel_free+12j
.text:00000C22                 mov     ecx, [ebp+arg_0]
.text:00000C25                 push    ecx
.text:00000C26                 call    _safefree
.text:00000C2B                 add     esp, 4
.text:00000C2E                 add     esp, 4
.text:00000C31                 cmp     ebp, esp
.text:00000C33                 call    __RTC_CheckEsp
.text:00000C38                 mov     esp, ebp
.text:00000C3A                 pop     ebp
.text:00000C3B                 retn
.text:00000C3B _share_xchannel_free endp
.text:00000C3B
.text:00000C3C
.text:00000C3C ; =============== S U B R O U T I N E =======================================
.text:00000C3C
.text:00000C3C ; Attributes: bp-based frame
.text:00000C3C
.text:00000C3C _share_closing  proc near               ; DATA XREF: .rdata:00000964o
.text:00000C3C
.text:00000C3C var_4           = dword ptr -4
.text:00000C3C arg_0           = dword ptr  8
.text:00000C3C arg_4           = dword ptr  0Ch
.text:00000C3C
.text:00000C3C                 push    ebp
.text:00000C3D                 mov     ebp, esp
.text:00000C3F                 push    ecx
.text:00000C40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C47                 mov     eax, [ebp+arg_0]
.text:00000C4A                 mov     [ebp+var_4], eax
.text:00000C4D                 cmp     [ebp+arg_4], 0
.text:00000C51                 jz      short loc_C75
.text:00000C53                 mov     ecx, [ebp+arg_4]
.text:00000C56                 push    ecx
.text:00000C57                 push    offset $SG87641 ; "%s"
.text:00000C5C                 mov     edx, [ebp+var_4]
.text:00000C5F                 mov     eax, [edx+4]
.text:00000C62                 push    eax
.text:00000C63                 mov     ecx, [ebp+var_4]
.text:00000C66                 mov     edx, [ecx+0Ch]
.text:00000C69                 mov     eax, [edx+14h]
.text:00000C6C                 push    eax
.text:00000C6D                 call    _ssh_sharing_logf
.text:00000C72                 add     esp, 10h
.text:00000C75
.text:00000C75 loc_C75:                                ; CODE XREF: _share_closing+15j
.text:00000C75                 mov     ecx, [ebp+var_4]
.text:00000C78                 push    ecx
.text:00000C79                 call    _share_begin_cleanup
.text:00000C7E                 add     esp, 4
.text:00000C81                 mov     eax, 1
.text:00000C86                 add     esp, 4
.text:00000C89                 cmp     ebp, esp
.text:00000C8B                 call    __RTC_CheckEsp
.text:00000C90                 mov     esp, ebp
.text:00000C92                 pop     ebp
.text:00000C93                 retn
.text:00000C93 _share_closing  endp
.text:00000C93
.text:00000C93 ; ---------------------------------------------------------------------------
.text:00000C94                 db 8 dup(0CCh)
.text:00000C9C
.text:00000C9C ; =============== S U B R O U T I N E =======================================
.text:00000C9C
.text:00000C9C ; Attributes: bp-based frame
.text:00000C9C
.text:00000C9C _share_begin_cleanup proc near          ; CODE XREF: _share_closing+3Dp
.text:00000C9C                                         ; _share_disconnect+193p ...
.text:00000C9C
.text:00000C9C arg_0           = dword ptr  8
.text:00000C9C
.text:00000C9C                 push    ebp
.text:00000C9D                 mov     ebp, esp
.text:00000C9F                 push    esi
.text:00000CA0                 mov     esi, esp
.text:00000CA2                 mov     eax, [ebp+arg_0]
.text:00000CA5                 mov     ecx, [eax+8]
.text:00000CA8                 push    ecx
.text:00000CA9                 mov     edx, [ebp+arg_0]
.text:00000CAC                 mov     eax, [edx+8]
.text:00000CAF                 mov     ecx, [eax]
.text:00000CB1                 mov     edx, [ecx+4]
.text:00000CB4                 call    edx
.text:00000CB6                 add     esp, 4
.text:00000CB9                 cmp     esi, esp
.text:00000CBB                 call    __RTC_CheckEsp
.text:00000CC0                 mov     eax, [ebp+arg_0]
.text:00000CC3                 mov     dword ptr [eax+8], 0
.text:00000CCA                 mov     ecx, [ebp+arg_0]
.text:00000CCD                 push    ecx
.text:00000CCE                 call    _share_try_cleanup
.text:00000CD3                 add     esp, 4
.text:00000CD6                 pop     esi
.text:00000CD7                 cmp     ebp, esp
.text:00000CD9                 call    __RTC_CheckEsp
.text:00000CDE                 pop     ebp
.text:00000CDF                 retn
.text:00000CDF _share_begin_cleanup endp
.text:00000CDF
.text:00000CDF ; ---------------------------------------------------------------------------
.text:00000CE0                 db 0Ch dup(0CCh)
.text:00000CEC
.text:00000CEC ; =============== S U B R O U T I N E =======================================
.text:00000CEC
.text:00000CEC ; Attributes: bp-based frame
.text:00000CEC
.text:00000CEC _share_try_cleanup proc near            ; CODE XREF: _share_begin_cleanup+32p
.text:00000CEC                                         ; _share_got_pkt_from_server+11Ap ...
.text:00000CEC
.text:00000CEC var_234         = dword ptr -234h
.text:00000CEC var_230         = dword ptr -230h
.text:00000CEC var_22C         = dword ptr -22Ch
.text:00000CEC var_224         = byte ptr -224h
.text:00000CEC var_223         = byte ptr -223h
.text:00000CEC var_222         = byte ptr -222h
.text:00000CEC var_221         = byte ptr -221h
.text:00000CEC var_120         = dword ptr -120h
.text:00000CEC Dst             = byte ptr -118h
.text:00000CEC var_117         = byte ptr -117h
.text:00000CEC var_116         = byte ptr -116h
.text:00000CEC var_115         = byte ptr -115h
.text:00000CEC var_14          = dword ptr -14h
.text:00000CEC var_10          = dword ptr -10h
.text:00000CEC var_C           = dword ptr -0Ch
.text:00000CEC var_8           = dword ptr -8
.text:00000CEC var_4           = dword ptr -4
.text:00000CEC arg_0           = dword ptr  8
.text:00000CEC
.text:00000CEC                 push    ebp
.text:00000CED                 mov     ebp, esp
.text:00000CEF                 sub     esp, 234h
.text:00000CF5                 push    edi
.text:00000CF6                 lea     edi, [ebp+var_234]
.text:00000CFC                 mov     ecx, 8Dh ; 'ì'
.text:00000D01                 mov     eax, 0CCCCCCCCh
.text:00000D06                 rep stosd
.text:00000D08                 mov     eax, dword ptr ds:___security_cookie
.text:00000D0D                 xor     eax, ebp
.text:00000D0F                 mov     [ebp+var_4], eax
.text:00000D12
.text:00000D12 loc_D12:                                ; CODE XREF: _share_try_cleanup+2BAj
.text:00000D12                 push    0
.text:00000D14                 mov     eax, [ebp+arg_0]
.text:00000D17                 mov     ecx, [eax+4034h]
.text:00000D1D                 push    ecx
.text:00000D1E                 call    _index234
.text:00000D23                 add     esp, 8
.text:00000D26                 mov     [ebp+var_C], eax
.text:00000D29                 cmp     [ebp+var_C], 0
.text:00000D2D                 jz      loc_FAB
.text:00000D33                 mov     [ebp+var_120], 0
.text:00000D3D                 mov     edx, [ebp+var_C]
.text:00000D40                 mov     eax, [edx]
.text:00000D42                 shr     eax, 18h
.text:00000D45                 mov     ecx, [ebp+var_120]
.text:00000D4B                 mov     [ebp+ecx+Dst], al
.text:00000D52                 mov     edx, [ebp+var_C]
.text:00000D55                 mov     eax, [edx]
.text:00000D57                 shr     eax, 10h
.text:00000D5A                 mov     ecx, [ebp+var_120]
.text:00000D60                 mov     [ebp+ecx+var_117], al
.text:00000D67                 mov     edx, [ebp+var_C]
.text:00000D6A                 mov     eax, [edx]
.text:00000D6C                 shr     eax, 8
.text:00000D6F                 mov     ecx, [ebp+var_120]
.text:00000D75                 mov     [ebp+ecx+var_116], al
.text:00000D7C                 mov     edx, [ebp+var_120]
.text:00000D82                 mov     eax, [ebp+var_C]
.text:00000D85                 mov     cl, [eax]
.text:00000D87                 mov     [ebp+edx+var_115], cl
.text:00000D8E                 mov     edx, [ebp+var_120]
.text:00000D94                 add     edx, 4
.text:00000D97                 mov     [ebp+var_120], edx
.text:00000D9D                 mov     eax, [ebp+var_120]
.text:00000DA3                 mov     [ebp+eax+Dst], 0
.text:00000DAB                 mov     ecx, [ebp+var_120]
.text:00000DB1                 mov     [ebp+ecx+var_117], 0
.text:00000DB9                 mov     edx, [ebp+var_120]
.text:00000DBF                 mov     [ebp+edx+var_116], 0
.text:00000DC7                 mov     eax, [ebp+var_120]
.text:00000DCD                 mov     [ebp+eax+var_115], 2
.text:00000DD5                 mov     ecx, [ebp+var_120]
.text:00000DDB                 add     ecx, 4
.text:00000DDE                 mov     [ebp+var_120], ecx
.text:00000DE4                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000DE9                 call    _strlen
.text:00000DEE                 add     esp, 4
.text:00000DF1                 shr     eax, 18h
.text:00000DF4                 mov     edx, [ebp+var_120]
.text:00000DFA                 mov     [ebp+edx+Dst], al
.text:00000E01                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000E06                 call    _strlen
.text:00000E0B                 add     esp, 4
.text:00000E0E                 shr     eax, 10h
.text:00000E11                 mov     ecx, [ebp+var_120]
.text:00000E17                 mov     [ebp+ecx+var_117], al
.text:00000E1E                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000E23                 call    _strlen
.text:00000E28                 add     esp, 4
.text:00000E2B                 shr     eax, 8
.text:00000E2E                 mov     edx, [ebp+var_120]
.text:00000E34                 mov     [ebp+edx+var_116], al
.text:00000E3B                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000E40                 call    _strlen
.text:00000E45                 add     esp, 4
.text:00000E48                 mov     ecx, [ebp+var_120]
.text:00000E4E                 mov     [ebp+ecx+var_115], al
.text:00000E55                 mov     edx, [ebp+var_120]
.text:00000E5B                 add     edx, 4
.text:00000E5E                 mov     [ebp+var_120], edx
.text:00000E64                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000E69                 call    _strlen
.text:00000E6E                 add     esp, 4
.text:00000E71                 push    eax             ; Size
.text:00000E72                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000E77                 mov     eax, [ebp+var_120]
.text:00000E7D                 lea     ecx, [ebp+eax+Dst]
.text:00000E84                 push    ecx             ; Dst
.text:00000E85                 call    _memcpy
.text:00000E8A                 add     esp, 0Ch
.text:00000E8D                 push    offset ?reason@?2??share_try_cleanup@@9@9 ; "PuTTY downstream no longer available"
.text:00000E92                 call    _strlen
.text:00000E97                 add     esp, 4
.text:00000E9A                 add     eax, [ebp+var_120]
.text:00000EA0                 mov     [ebp+var_120], eax
.text:00000EA6                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000EAB                 call    _strlen
.text:00000EB0                 add     esp, 4
.text:00000EB3                 shr     eax, 18h
.text:00000EB6                 mov     edx, [ebp+var_120]
.text:00000EBC                 mov     [ebp+edx+Dst], al
.text:00000EC3                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000EC8                 call    _strlen
.text:00000ECD                 add     esp, 4
.text:00000ED0                 shr     eax, 10h
.text:00000ED3                 mov     ecx, [ebp+var_120]
.text:00000ED9                 mov     [ebp+ecx+var_117], al
.text:00000EE0                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000EE5                 call    _strlen
.text:00000EEA                 add     esp, 4
.text:00000EED                 shr     eax, 8
.text:00000EF0                 mov     edx, [ebp+var_120]
.text:00000EF6                 mov     [ebp+edx+var_116], al
.text:00000EFD                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000F02                 call    _strlen
.text:00000F07                 add     esp, 4
.text:00000F0A                 mov     ecx, [ebp+var_120]
.text:00000F10                 mov     [ebp+ecx+var_115], al
.text:00000F17                 mov     edx, [ebp+var_120]
.text:00000F1D                 add     edx, 4
.text:00000F20                 mov     [ebp+var_120], edx
.text:00000F26                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000F2B                 call    _strlen
.text:00000F30                 add     esp, 4
.text:00000F33                 push    eax             ; Size
.text:00000F34                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000F39                 mov     eax, [ebp+var_120]
.text:00000F3F                 lea     ecx, [ebp+eax+Dst]
.text:00000F46                 push    ecx             ; Dst
.text:00000F47                 call    _memcpy
.text:00000F4C                 add     esp, 0Ch
.text:00000F4F                 push    offset ?lang@?2??share_try_cleanup@@9@9 ; "en"
.text:00000F54                 call    _strlen
.text:00000F59                 add     esp, 4
.text:00000F5C                 add     eax, [ebp+var_120]
.text:00000F62                 mov     [ebp+var_120], eax
.text:00000F68                 push    offset $SG87555 ; "cleanup after downstream went away"
.text:00000F6D                 mov     edx, [ebp+var_120]
.text:00000F73                 push    edx
.text:00000F74                 lea     eax, [ebp+Dst]
.text:00000F7A                 push    eax
.text:00000F7B                 push    5Ch ; '\'
.text:00000F7D                 mov     ecx, [ebp+arg_0]
.text:00000F80                 mov     edx, [ecx+4]
.text:00000F83                 push    edx
.text:00000F84                 mov     eax, [ebp+arg_0]
.text:00000F87                 mov     ecx, [eax+0Ch]
.text:00000F8A                 mov     edx, [ecx+14h]
.text:00000F8D                 push    edx
.text:00000F8E                 call    _ssh_send_packet_from_downstream
.text:00000F93                 add     esp, 18h
.text:00000F96                 mov     eax, [ebp+var_C]
.text:00000F99                 push    eax
.text:00000F9A                 mov     ecx, [ebp+arg_0]
.text:00000F9D                 push    ecx
.text:00000F9E                 call    _share_remove_halfchannel
.text:00000FA3                 add     esp, 8
.text:00000FA6                 jmp     loc_D12
.text:00000FAB ; ---------------------------------------------------------------------------
.text:00000FAB
.text:00000FAB loc_FAB:                                ; CODE XREF: _share_try_cleanup+41j
.text:00000FAB                 mov     [ebp+var_8], 0
.text:00000FB2                 jmp     short loc_FBD
.text:00000FB4 ; ---------------------------------------------------------------------------
.text:00000FB4
.text:00000FB4 loc_FB4:                                ; CODE XREF: _share_try_cleanup:loc_10DDj
.text:00000FB4                 mov     edx, [ebp+var_8]
.text:00000FB7                 add     edx, 1
.text:00000FBA                 mov     [ebp+var_8], edx
.text:00000FBD
.text:00000FBD loc_FBD:                                ; CODE XREF: _share_try_cleanup+2C6j
.text:00000FBD                 mov     eax, [ebp+var_8]
.text:00000FC0                 push    eax
.text:00000FC1                 mov     ecx, [ebp+arg_0]
.text:00000FC4                 mov     edx, [ecx+4038h]
.text:00000FCA                 push    edx
.text:00000FCB                 call    _index234
.text:00000FD0                 add     esp, 8
.text:00000FD3                 mov     [ebp+var_10], eax
.text:00000FD6                 cmp     [ebp+var_10], 0
.text:00000FDA                 jz      loc_10E2
.text:00000FE0                 mov     [ebp+var_22C], 0
.text:00000FEA                 mov     eax, [ebp+var_10]
.text:00000FED                 cmp     dword ptr [eax+10h], 1
.text:00000FF1                 jz      loc_10DD
.text:00000FF7                 mov     ecx, [ebp+var_10]
.text:00000FFA                 cmp     dword ptr [ecx+10h], 3
.text:00000FFE                 jz      loc_10DD
.text:00001004                 mov     edx, [ebp+var_10]
.text:00001007                 mov     eax, [edx+8]
.text:0000100A                 shr     eax, 18h
.text:0000100D                 mov     ecx, [ebp+var_22C]
.text:00001013                 mov     [ebp+ecx+var_224], al
.text:0000101A                 mov     edx, [ebp+var_10]
.text:0000101D                 mov     eax, [edx+8]
.text:00001020                 shr     eax, 10h
.text:00001023                 mov     ecx, [ebp+var_22C]
.text:00001029                 mov     [ebp+ecx+var_223], al
.text:00001030                 mov     edx, [ebp+var_10]
.text:00001033                 mov     eax, [edx+8]
.text:00001036                 shr     eax, 8
.text:00001039                 mov     ecx, [ebp+var_22C]
.text:0000103F                 mov     [ebp+ecx+var_222], al
.text:00001046                 mov     edx, [ebp+var_22C]
.text:0000104C                 mov     eax, [ebp+var_10]
.text:0000104F                 mov     cl, [eax+8]
.text:00001052                 mov     [ebp+edx+var_221], cl
.text:00001059                 mov     edx, [ebp+var_22C]
.text:0000105F                 add     edx, 4
.text:00001062                 mov     [ebp+var_22C], edx
.text:00001068                 push    offset $SG87568 ; "cleanup after downstream went away"
.text:0000106D                 mov     eax, [ebp+var_22C]
.text:00001073                 push    eax
.text:00001074                 lea     ecx, [ebp+var_224]
.text:0000107A                 push    ecx
.text:0000107B                 push    61h ; 'a'
.text:0000107D                 mov     edx, [ebp+arg_0]
.text:00001080                 mov     eax, [edx+4]
.text:00001083                 push    eax
.text:00001084                 mov     ecx, [ebp+arg_0]
.text:00001087                 mov     edx, [ecx+0Ch]
.text:0000108A                 mov     eax, [edx+14h]
.text:0000108D                 push    eax
.text:0000108E                 call    _ssh_send_packet_from_downstream
.text:00001093                 add     esp, 18h
.text:00001096                 mov     ecx, [ebp+var_10]
.text:00001099                 cmp     dword ptr [ecx+10h], 2
.text:0000109D                 jz      short loc_10AB
.text:0000109F                 mov     edx, [ebp+var_10]
.text:000010A2                 mov     dword ptr [edx+10h], 1
.text:000010A9                 jmp     short loc_10DD
.text:000010AB ; ---------------------------------------------------------------------------
.text:000010AB
.text:000010AB loc_10AB:                               ; CODE XREF: _share_try_cleanup+3B1j
.text:000010AB                 mov     eax, [ebp+var_10]
.text:000010AE                 mov     ecx, [eax+4]
.text:000010B1                 push    ecx
.text:000010B2                 mov     edx, [ebp+arg_0]
.text:000010B5                 mov     eax, [edx+0Ch]
.text:000010B8                 mov     ecx, [eax+14h]
.text:000010BB                 push    ecx
.text:000010BC                 call    _ssh_delete_sharing_channel
.text:000010C1                 add     esp, 8
.text:000010C4                 mov     edx, [ebp+var_10]
.text:000010C7                 push    edx
.text:000010C8                 mov     eax, [ebp+arg_0]
.text:000010CB                 push    eax
.text:000010CC                 call    _share_remove_channel
.text:000010D1                 add     esp, 8
.text:000010D4                 mov     ecx, [ebp+var_8]
.text:000010D7                 sub     ecx, 1
.text:000010DA                 mov     [ebp+var_8], ecx
.text:000010DD
.text:000010DD loc_10DD:                               ; CODE XREF: _share_try_cleanup+305j
.text:000010DD                                         ; _share_try_cleanup+312j ...
.text:000010DD                 jmp     loc_FB4
.text:000010E2 ; ---------------------------------------------------------------------------
.text:000010E2
.text:000010E2 loc_10E2:                               ; CODE XREF: _share_try_cleanup+2EEj
.text:000010E2                 mov     [ebp+var_8], 0
.text:000010E9                 jmp     short loc_10F4
.text:000010EB ; ---------------------------------------------------------------------------
.text:000010EB
.text:000010EB loc_10EB:                               ; CODE XREF: _share_try_cleanup:loc_13C8j
.text:000010EB                 mov     edx, [ebp+var_8]
.text:000010EE                 add     edx, 1
.text:000010F1                 mov     [ebp+var_8], edx
.text:000010F4
.text:000010F4 loc_10F4:                               ; CODE XREF: _share_try_cleanup+3FDj
.text:000010F4                 mov     eax, [ebp+var_8]
.text:000010F7                 push    eax
.text:000010F8                 mov     ecx, [ebp+arg_0]
.text:000010FB                 mov     edx, [ecx+4048h]
.text:00001101                 push    edx
.text:00001102                 call    _index234
.text:00001107                 add     esp, 8
.text:0000110A                 mov     [ebp+var_14], eax
.text:0000110D                 cmp     [ebp+var_14], 0
.text:00001111                 jz      loc_13CD
.text:00001117                 mov     eax, [ebp+var_14]
.text:0000111A                 cmp     dword ptr [eax+8], 0
.text:0000111E                 jz      loc_13C8
.text:00001124                 push    1
.text:00001126                 mov     ecx, [ebp+var_14]
.text:00001129                 mov     edx, [ecx]
.text:0000112B                 push    edx             ; Str
.text:0000112C                 call    _strlen
.text:00001131                 add     esp, 4
.text:00001134                 add     eax, 100h
.text:00001139                 push    eax
.text:0000113A                 call    _safemalloc
.text:0000113F                 add     esp, 8
.text:00001142                 mov     [ebp+var_230], eax
.text:00001148                 mov     [ebp+var_234], 0
.text:00001152                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:00001157                 call    _strlen
.text:0000115C                 add     esp, 4
.text:0000115F                 shr     eax, 18h
.text:00001162                 mov     ecx, [ebp+var_230]
.text:00001168                 add     ecx, [ebp+var_234]
.text:0000116E                 mov     [ecx], al
.text:00001170                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:00001175                 call    _strlen
.text:0000117A                 add     esp, 4
.text:0000117D                 shr     eax, 10h
.text:00001180                 mov     edx, [ebp+var_230]
.text:00001186                 add     edx, [ebp+var_234]
.text:0000118C                 mov     [edx+1], al
.text:0000118F                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:00001194                 call    _strlen
.text:00001199                 add     esp, 4
.text:0000119C                 shr     eax, 8
.text:0000119F                 mov     ecx, [ebp+var_230]
.text:000011A5                 add     ecx, [ebp+var_234]
.text:000011AB                 mov     [ecx+2], al
.text:000011AE                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:000011B3                 call    _strlen
.text:000011B8                 add     esp, 4
.text:000011BB                 mov     edx, [ebp+var_230]
.text:000011C1                 add     edx, [ebp+var_234]
.text:000011C7                 mov     [edx+3], al
.text:000011CA                 mov     eax, [ebp+var_234]
.text:000011D0                 add     eax, 4
.text:000011D3                 mov     [ebp+var_234], eax
.text:000011D9                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:000011DE                 call    _strlen
.text:000011E3                 add     esp, 4
.text:000011E6                 push    eax             ; Size
.text:000011E7                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:000011EC                 mov     ecx, [ebp+var_230]
.text:000011F2                 add     ecx, [ebp+var_234]
.text:000011F8                 push    ecx             ; Dst
.text:000011F9                 call    _memcpy
.text:000011FE                 add     esp, 0Ch
.text:00001201                 push    offset ?request@?8??share_try_cleanup@@9@9 ; "cancel-tcpip-forward"
.text:00001206                 call    _strlen
.text:0000120B                 add     esp, 4
.text:0000120E                 add     eax, [ebp+var_234]
.text:00001214                 mov     [ebp+var_234], eax
.text:0000121A                 mov     edx, [ebp+var_230]
.text:00001220                 add     edx, [ebp+var_234]
.text:00001226                 mov     byte ptr [edx], 0
.text:00001229                 mov     eax, [ebp+var_234]
.text:0000122F                 add     eax, 1
.text:00001232                 mov     [ebp+var_234], eax
.text:00001238                 mov     ecx, [ebp+var_14]
.text:0000123B                 mov     edx, [ecx]
.text:0000123D                 push    edx             ; Str
.text:0000123E                 call    _strlen
.text:00001243                 add     esp, 4
.text:00001246                 shr     eax, 18h
.text:00001249                 mov     ecx, [ebp+var_230]
.text:0000124F                 add     ecx, [ebp+var_234]
.text:00001255                 mov     [ecx], al
.text:00001257                 mov     edx, [ebp+var_14]
.text:0000125A                 mov     eax, [edx]
.text:0000125C                 push    eax             ; Str
.text:0000125D                 call    _strlen
.text:00001262                 add     esp, 4
.text:00001265                 shr     eax, 10h
.text:00001268                 mov     ecx, [ebp+var_230]
.text:0000126E                 add     ecx, [ebp+var_234]
.text:00001274                 mov     [ecx+1], al
.text:00001277                 mov     edx, [ebp+var_14]
.text:0000127A                 mov     eax, [edx]
.text:0000127C                 push    eax             ; Str
.text:0000127D                 call    _strlen
.text:00001282                 add     esp, 4
.text:00001285                 shr     eax, 8
.text:00001288                 mov     ecx, [ebp+var_230]
.text:0000128E                 add     ecx, [ebp+var_234]
.text:00001294                 mov     [ecx+2], al
.text:00001297                 mov     edx, [ebp+var_14]
.text:0000129A                 mov     eax, [edx]
.text:0000129C                 push    eax             ; Str
.text:0000129D                 call    _strlen
.text:000012A2                 add     esp, 4
.text:000012A5                 mov     ecx, [ebp+var_230]
.text:000012AB                 add     ecx, [ebp+var_234]
.text:000012B1                 mov     [ecx+3], al
.text:000012B4                 mov     edx, [ebp+var_234]
.text:000012BA                 add     edx, 4
.text:000012BD                 mov     [ebp+var_234], edx
.text:000012C3                 mov     eax, [ebp+var_14]
.text:000012C6                 mov     ecx, [eax]
.text:000012C8                 push    ecx             ; Str
.text:000012C9                 call    _strlen
.text:000012CE                 add     esp, 4
.text:000012D1                 push    eax             ; Size
.text:000012D2                 mov     edx, [ebp+var_14]
.text:000012D5                 mov     eax, [edx]
.text:000012D7                 push    eax             ; Src
.text:000012D8                 mov     ecx, [ebp+var_230]
.text:000012DE                 add     ecx, [ebp+var_234]
.text:000012E4                 push    ecx             ; Dst
.text:000012E5                 call    _memcpy
.text:000012EA                 add     esp, 0Ch
.text:000012ED                 mov     edx, [ebp+var_14]
.text:000012F0                 mov     eax, [edx]
.text:000012F2                 push    eax             ; Str
.text:000012F3                 call    _strlen
.text:000012F8                 add     esp, 4
.text:000012FB                 add     eax, [ebp+var_234]
.text:00001301                 mov     [ebp+var_234], eax
.text:00001307                 mov     ecx, [ebp+var_14]
.text:0000130A                 mov     edx, [ecx+4]
.text:0000130D                 sar     edx, 18h
.text:00001310                 mov     eax, [ebp+var_230]
.text:00001316                 add     eax, [ebp+var_234]
.text:0000131C                 mov     [eax], dl
.text:0000131E                 mov     ecx, [ebp+var_14]
.text:00001321                 mov     edx, [ecx+4]
.text:00001324                 sar     edx, 10h
.text:00001327                 mov     eax, [ebp+var_230]
.text:0000132D                 add     eax, [ebp+var_234]
.text:00001333                 mov     [eax+1], dl
.text:00001336                 mov     ecx, [ebp+var_14]
.text:00001339                 mov     edx, [ecx+4]
.text:0000133C                 sar     edx, 8
.text:0000133F                 mov     eax, [ebp+var_230]
.text:00001345                 add     eax, [ebp+var_234]
.text:0000134B                 mov     [eax+2], dl
.text:0000134E                 mov     ecx, [ebp+var_230]
.text:00001354                 add     ecx, [ebp+var_234]
.text:0000135A                 mov     edx, [ebp+var_14]
.text:0000135D                 mov     al, [edx+4]
.text:00001360                 mov     [ecx+3], al
.text:00001363                 mov     ecx, [ebp+var_234]
.text:00001369                 add     ecx, 4
.text:0000136C                 mov     [ebp+var_234], ecx
.text:00001372                 push    offset $SG87595 ; "cleanup after downstream went away"
.text:00001377                 mov     edx, [ebp+var_234]
.text:0000137D                 push    edx
.text:0000137E                 mov     eax, [ebp+var_230]
.text:00001384                 push    eax
.text:00001385                 push    50h ; 'P'
.text:00001387                 mov     ecx, [ebp+arg_0]
.text:0000138A                 mov     edx, [ecx+4]
.text:0000138D                 push    edx
.text:0000138E                 mov     eax, [ebp+arg_0]
.text:00001391                 mov     ecx, [eax+0Ch]
.text:00001394                 mov     edx, [ecx+14h]
.text:00001397                 push    edx
.text:00001398                 call    _ssh_send_packet_from_downstream
.text:0000139D                 add     esp, 18h
.text:000013A0                 mov     eax, [ebp+var_230]
.text:000013A6                 push    eax
.text:000013A7                 call    _safefree
.text:000013AC                 add     esp, 4
.text:000013AF                 mov     ecx, [ebp+var_14]
.text:000013B2                 push    ecx
.text:000013B3                 mov     edx, [ebp+arg_0]
.text:000013B6                 push    edx
.text:000013B7                 call    _share_remove_forwarding
.text:000013BC                 add     esp, 8
.text:000013BF                 mov     eax, [ebp+var_8]
.text:000013C2                 sub     eax, 1
.text:000013C5                 mov     [ebp+var_8], eax
.text:000013C8
.text:000013C8 loc_13C8:                               ; CODE XREF: _share_try_cleanup+432j
.text:000013C8                 jmp     loc_10EB
.text:000013CD ; ---------------------------------------------------------------------------
.text:000013CD
.text:000013CD loc_13CD:                               ; CODE XREF: _share_try_cleanup+425j
.text:000013CD                 mov     ecx, [ebp+arg_0]
.text:000013D0                 mov     edx, [ecx+4034h]
.text:000013D6                 push    edx
.text:000013D7                 call    _count234
.text:000013DC                 add     esp, 4
.text:000013DF                 test    eax, eax
.text:000013E1                 jnz     short loc_144A
.text:000013E3                 mov     eax, [ebp+arg_0]
.text:000013E6                 mov     ecx, [eax+4038h]
.text:000013EC                 push    ecx
.text:000013ED                 call    _count234
.text:000013F2                 add     esp, 4
.text:000013F5                 test    eax, eax
.text:000013F7                 jnz     short loc_144A
.text:000013F9                 mov     edx, [ebp+arg_0]
.text:000013FC                 mov     eax, [edx+4048h]
.text:00001402                 push    eax
.text:00001403                 call    _count234
.text:00001408                 add     esp, 4
.text:0000140B                 test    eax, eax
.text:0000140D                 jnz     short loc_144A
.text:0000140F                 mov     ecx, [ebp+arg_0]
.text:00001412                 push    ecx
.text:00001413                 mov     edx, [ebp+arg_0]
.text:00001416                 mov     eax, [edx+0Ch]
.text:00001419                 mov     ecx, [eax+0Ch]
.text:0000141C                 push    ecx
.text:0000141D                 call    _del234
.text:00001422                 add     esp, 8
.text:00001425                 mov     edx, [ebp+arg_0]
.text:00001428                 mov     eax, [edx+4]
.text:0000142B                 push    eax
.text:0000142C                 mov     ecx, [ebp+arg_0]
.text:0000142F                 mov     edx, [ecx+0Ch]
.text:00001432                 mov     eax, [edx+14h]
.text:00001435                 push    eax
.text:00001436                 call    _ssh_sharing_downstream_disconnected
.text:0000143B                 add     esp, 8
.text:0000143E                 mov     ecx, [ebp+arg_0]
.text:00001441                 push    ecx
.text:00001442                 call    _share_connstate_free
.text:00001447                 add     esp, 4
.text:0000144A
.text:0000144A loc_144A:                               ; CODE XREF: _share_try_cleanup+6F5j
.text:0000144A                                         ; _share_try_cleanup+70Bj ...
.text:0000144A                 push    edx
.text:0000144B                 mov     ecx, ebp
.text:0000144D                 push    eax
.text:0000144E                 lea     edx, $LN19
.text:00001454                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001459                 pop     eax
.text:0000145A                 pop     edx
.text:0000145B                 pop     edi
.text:0000145C                 mov     ecx, [ebp+var_4]
.text:0000145F                 xor     ecx, ebp
.text:00001461                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001466                 add     esp, 234h
.text:0000146C                 cmp     ebp, esp
.text:0000146E                 call    __RTC_CheckEsp
.text:00001473                 mov     esp, ebp
.text:00001475                 pop     ebp
.text:00001476                 retn
.text:00001476 _share_try_cleanup endp
.text:00001476
.text:00001476 ; ---------------------------------------------------------------------------
.text:00001477                 align 4
.text:00001478 $LN19           dd 2                    ; DATA XREF: _share_try_cleanup+762o
.text:0000147C                 dd offset $LN18
.text:00001480 $LN18           dd 0FFFFFEE8h, 100h     ; DATA XREF: .text:0000147Co
.text:00001488                 dd offset $LN16         ; "packet"
.text:0000148C                 dd 0FFFFFDDCh, 100h
.text:00001494                 dd offset $LN17         ; "packet"
.text:00001498 $LN17           db 'packet',0           ; DATA XREF: .text:00001494o
.text:0000149F $LN16           db 'packet',0           ; DATA XREF: .text:00001488o
.text:000014A6                 db 6 dup(0CCh)
.text:000014AC
.text:000014AC ; =============== S U B R O U T I N E =======================================
.text:000014AC
.text:000014AC ; Attributes: bp-based frame
.text:000014AC
.text:000014AC _share_remove_halfchannel proc near     ; CODE XREF: _share_try_cleanup+2B2p
.text:000014AC                                         ; _share_got_pkt_from_downstream+845p ...
.text:000014AC
.text:000014AC arg_0           = dword ptr  8
.text:000014AC arg_4           = dword ptr  0Ch
.text:000014AC
.text:000014AC                 push    ebp
.text:000014AD                 mov     ebp, esp
.text:000014AF                 mov     eax, [ebp+arg_4]
.text:000014B2                 push    eax
.text:000014B3                 mov     ecx, [ebp+arg_0]
.text:000014B6                 mov     edx, [ecx+4034h]
.text:000014BC                 push    edx
.text:000014BD                 call    _del234
.text:000014C2                 add     esp, 8
.text:000014C5                 mov     eax, [ebp+arg_4]
.text:000014C8                 push    eax
.text:000014C9                 call    _safefree
.text:000014CE                 add     esp, 4
.text:000014D1                 cmp     ebp, esp
.text:000014D3                 call    __RTC_CheckEsp
.text:000014D8                 pop     ebp
.text:000014D9                 retn
.text:000014D9 _share_remove_halfchannel endp
.text:000014D9
.text:000014D9 ; ---------------------------------------------------------------------------
.text:000014DA                 align 4
.text:000014DC
.text:000014DC ; =============== S U B R O U T I N E =======================================
.text:000014DC
.text:000014DC ; Attributes: bp-based frame
.text:000014DC
.text:000014DC _share_remove_channel proc near         ; CODE XREF: _share_try_cleanup+3E0p
.text:000014DC                                         ; _share_got_pkt_from_server+30Ap ...
.text:000014DC
.text:000014DC arg_0           = dword ptr  8
.text:000014DC arg_4           = dword ptr  0Ch
.text:000014DC
.text:000014DC                 push    ebp
.text:000014DD                 mov     ebp, esp
.text:000014DF                 mov     eax, [ebp+arg_4]
.text:000014E2                 push    eax
.text:000014E3                 mov     ecx, [ebp+arg_0]
.text:000014E6                 mov     edx, [ecx+4038h]
.text:000014EC                 push    edx
.text:000014ED                 call    _del234
.text:000014F2                 add     esp, 8
.text:000014F5                 mov     eax, [ebp+arg_4]
.text:000014F8                 push    eax
.text:000014F9                 mov     ecx, [ebp+arg_0]
.text:000014FC                 mov     edx, [ecx+403Ch]
.text:00001502                 push    edx
.text:00001503                 call    _del234
.text:00001508                 add     esp, 8
.text:0000150B                 mov     eax, [ebp+arg_4]
.text:0000150E                 cmp     dword ptr [eax+14h], 0
.text:00001512                 jz      short loc_152D
.text:00001514                 mov     ecx, [ebp+arg_4]
.text:00001517                 mov     edx, [ecx+14h]
.text:0000151A                 push    edx
.text:0000151B                 mov     eax, [ebp+arg_0]
.text:0000151E                 mov     ecx, [eax+0Ch]
.text:00001521                 mov     edx, [ecx+14h]
.text:00001524                 push    edx
.text:00001525                 call    _ssh_sharing_remove_x11_display
.text:0000152A                 add     esp, 8
.text:0000152D
.text:0000152D loc_152D:                               ; CODE XREF: _share_remove_channel+36j
.text:0000152D                 mov     eax, [ebp+arg_4]
.text:00001530                 mov     ecx, [eax+1Ch]
.text:00001533                 push    ecx
.text:00001534                 call    _safefree
.text:00001539                 add     esp, 4
.text:0000153C                 mov     edx, [ebp+arg_4]
.text:0000153F                 push    edx
.text:00001540                 call    _safefree
.text:00001545                 add     esp, 4
.text:00001548                 cmp     ebp, esp
.text:0000154A                 call    __RTC_CheckEsp
.text:0000154F                 pop     ebp
.text:00001550                 retn
.text:00001550 _share_remove_channel endp
.text:00001550
.text:00001550 ; ---------------------------------------------------------------------------
.text:00001551                 db 0Bh dup(0CCh)
.text:0000155C
.text:0000155C ; =============== S U B R O U T I N E =======================================
.text:0000155C
.text:0000155C ; Attributes: bp-based frame
.text:0000155C
.text:0000155C _share_remove_forwarding proc near      ; CODE XREF: _share_try_cleanup+6CBp
.text:0000155C                                         ; _share_got_pkt_from_server+7Cp ...
.text:0000155C
.text:0000155C arg_0           = dword ptr  8
.text:0000155C arg_4           = dword ptr  0Ch
.text:0000155C
.text:0000155C                 push    ebp
.text:0000155D                 mov     ebp, esp
.text:0000155F                 mov     eax, [ebp+arg_4]
.text:00001562                 push    eax
.text:00001563                 mov     ecx, [ebp+arg_0]
.text:00001566                 mov     edx, [ecx+4048h]
.text:0000156C                 push    edx
.text:0000156D                 call    _del234
.text:00001572                 add     esp, 8
.text:00001575                 mov     eax, [ebp+arg_4]
.text:00001578                 push    eax
.text:00001579                 call    _safefree
.text:0000157E                 add     esp, 4
.text:00001581                 cmp     ebp, esp
.text:00001583                 call    __RTC_CheckEsp
.text:00001588                 pop     ebp
.text:00001589                 retn
.text:00001589 _share_remove_forwarding endp
.text:00001589
.text:00001589 ; ---------------------------------------------------------------------------
.text:0000158A                 align 4
.text:0000158C
.text:0000158C ; =============== S U B R O U T I N E =======================================
.text:0000158C
.text:0000158C ; Attributes: bp-based frame
.text:0000158C
.text:0000158C                 public _share_xchannel_add_message
.text:0000158C _share_xchannel_add_message proc near   ; CODE XREF: _share_setup_x11_channel+83p
.text:0000158C                                         ; _share_got_pkt_from_server+394p
.text:0000158C
.text:0000158C var_8           = dword ptr -8
.text:0000158C var_4           = dword ptr -4
.text:0000158C arg_0           = dword ptr  8
.text:0000158C arg_4           = dword ptr  0Ch
.text:0000158C arg_8           = dword ptr  10h
.text:0000158C
.text:0000158C                 push    ebp
.text:0000158D                 mov     ebp, esp
.text:0000158F                 sub     esp, 8
.text:00001592                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001599                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015A0                 push    1
.text:000015A2                 mov     eax, [ebp+arg_8]
.text:000015A5                 add     eax, 10h
.text:000015A8                 push    eax
.text:000015A9                 call    _safemalloc
.text:000015AE                 add     esp, 8
.text:000015B1                 mov     [ebp+var_4], eax
.text:000015B4                 mov     ecx, [ebp+var_4]
.text:000015B7                 mov     [ebp+var_8], ecx
.text:000015BA                 mov     edx, [ebp+var_4]
.text:000015BD                 add     edx, 10h
.text:000015C0                 mov     eax, [ebp+var_8]
.text:000015C3                 mov     [eax+8], edx
.text:000015C6                 mov     ecx, [ebp+var_8]
.text:000015C9                 mov     edx, [ebp+arg_8]
.text:000015CC                 mov     [ecx+0Ch], edx
.text:000015CF                 mov     eax, [ebp+var_8]
.text:000015D2                 mov     ecx, [ebp+arg_4]
.text:000015D5                 mov     [eax+4], ecx
.text:000015D8                 mov     edx, [ebp+arg_0]
.text:000015DB                 cmp     dword ptr [edx+14h], 0
.text:000015DF                 jz      short loc_15EE
.text:000015E1                 mov     eax, [ebp+arg_0]
.text:000015E4                 mov     ecx, [eax+14h]
.text:000015E7                 mov     edx, [ebp+var_8]
.text:000015EA                 mov     [ecx], edx
.text:000015EC                 jmp     short loc_15F7
.text:000015EE ; ---------------------------------------------------------------------------
.text:000015EE
.text:000015EE loc_15EE:                               ; CODE XREF: _share_xchannel_add_message+53j
.text:000015EE                 mov     eax, [ebp+arg_0]
.text:000015F1                 mov     ecx, [ebp+var_8]
.text:000015F4                 mov     [eax+10h], ecx
.text:000015F7
.text:000015F7 loc_15F7:                               ; CODE XREF: _share_xchannel_add_message+60j
.text:000015F7                 mov     edx, [ebp+var_8]
.text:000015FA                 mov     dword ptr [edx], 0
.text:00001600                 mov     eax, [ebp+arg_0]
.text:00001603                 mov     ecx, [ebp+var_8]
.text:00001606                 mov     [eax+14h], ecx
.text:00001609                 mov     eax, [ebp+var_8]
.text:0000160C                 add     esp, 8
.text:0000160F                 cmp     ebp, esp
.text:00001611                 call    __RTC_CheckEsp
.text:00001616                 mov     esp, ebp
.text:00001618                 pop     ebp
.text:00001619                 retn
.text:00001619 _share_xchannel_add_message endp
.text:00001619
.text:00001619 ; ---------------------------------------------------------------------------
.text:0000161A                 align 4
.text:0000161C
.text:0000161C ; =============== S U B R O U T I N E =======================================
.text:0000161C
.text:0000161C ; Attributes: bp-based frame
.text:0000161C
.text:0000161C                 public _share_dead_xchannel_respond
.text:0000161C _share_dead_xchannel_respond proc near  ; CODE XREF: _share_xchannel_failure+80p
.text:0000161C                                         ; _share_got_pkt_from_server+3C7p
.text:0000161C
.text:0000161C var_18          = dword ptr -18h
.text:0000161C var_14          = dword ptr -14h
.text:0000161C var_10          = dword ptr -10h
.text:0000161C var_C           = dword ptr -0Ch
.text:0000161C var_8           = dword ptr -8
.text:0000161C var_4           = dword ptr -4
.text:0000161C arg_0           = dword ptr  8
.text:0000161C arg_4           = dword ptr  0Ch
.text:0000161C
.text:0000161C                 push    ebp
.text:0000161D                 mov     ebp, esp
.text:0000161F                 sub     esp, 18h
.text:00001622                 mov     eax, 0CCCCCCCCh
.text:00001627                 mov     [ebp+var_18], eax
.text:0000162A                 mov     [ebp+var_14], eax
.text:0000162D                 mov     [ebp+var_10], eax
.text:00001630                 mov     [ebp+var_C], eax
.text:00001633                 mov     [ebp+var_8], eax
.text:00001636                 mov     [ebp+var_4], eax
.text:00001639                 mov     [ebp+var_4], 0
.text:00001640
.text:00001640 loc_1640:                               ; CODE XREF: _share_dead_xchannel_respond+10Bj
.text:00001640                 mov     eax, [ebp+arg_4]
.text:00001643                 cmp     dword ptr [eax+10h], 0
.text:00001647                 jz      loc_172C
.text:0000164D                 mov     ecx, [ebp+arg_4]
.text:00001650                 mov     edx, [ecx+10h]
.text:00001653                 mov     [ebp+var_8], edx
.text:00001656                 mov     eax, [ebp+arg_4]
.text:00001659                 mov     ecx, [ebp+var_8]
.text:0000165C                 mov     edx, [ecx]
.text:0000165E                 mov     [eax+10h], edx
.text:00001661                 mov     eax, [ebp+var_8]
.text:00001664                 cmp     dword ptr [eax+4], 62h ; 'b'
.text:00001668                 jnz     loc_170B
.text:0000166E                 mov     ecx, [ebp+var_8]
.text:00001671                 cmp     dword ptr [ecx+0Ch], 4
.text:00001675                 jle     loc_170B
.text:0000167B                 mov     edx, [ebp+var_8]
.text:0000167E                 mov     eax, [edx+0Ch]
.text:00001681                 push    eax
.text:00001682                 mov     ecx, [ebp+var_8]
.text:00001685                 mov     edx, [ecx+8]
.text:00001688                 push    edx
.text:00001689                 call    _getstring_size
.text:0000168E                 add     esp, 8
.text:00001691                 mov     [ebp+var_C], eax
.text:00001694                 cmp     [ebp+var_C], 0
.text:00001698                 jle     short loc_1709
.text:0000169A                 mov     eax, [ebp+var_8]
.text:0000169D                 mov     ecx, [ebp+var_C]
.text:000016A0                 cmp     ecx, [eax+0Ch]
.text:000016A3                 jge     short loc_1709
.text:000016A5                 mov     edx, [ebp+var_8]
.text:000016A8                 mov     eax, [edx+8]
.text:000016AB                 mov     ecx, [ebp+var_C]
.text:000016AE                 movzx   edx, byte ptr [eax+ecx]
.text:000016B2                 test    edx, edx
.text:000016B4                 jz      short loc_1709
.text:000016B6                 mov     eax, [ebp+arg_4]
.text:000016B9                 mov     ecx, [eax+4]
.text:000016BC                 shr     ecx, 18h
.text:000016BF                 mov     byte ptr [ebp+var_14], cl
.text:000016C2                 mov     edx, [ebp+arg_4]
.text:000016C5                 mov     eax, [edx+4]
.text:000016C8                 shr     eax, 10h
.text:000016CB                 mov     byte ptr [ebp+var_14+1], al
.text:000016CE                 mov     ecx, [ebp+arg_4]
.text:000016D1                 mov     edx, [ecx+4]
.text:000016D4                 shr     edx, 8
.text:000016D7                 mov     byte ptr [ebp+var_14+2], dl
.text:000016DA                 mov     eax, [ebp+arg_4]
.text:000016DD                 mov     cl, [eax+4]
.text:000016E0                 mov     byte ptr [ebp+var_14+3], cl
.text:000016E3                 push    offset $SG87726 ; "downstream refused X channel open"
.text:000016E8                 push    4
.text:000016EA                 lea     edx, [ebp+var_14]
.text:000016ED                 push    edx
.text:000016EE                 push    64h ; 'd'
.text:000016F0                 mov     eax, [ebp+arg_0]
.text:000016F3                 mov     ecx, [eax+4]
.text:000016F6                 push    ecx
.text:000016F7                 mov     edx, [ebp+arg_0]
.text:000016FA                 mov     eax, [edx+0Ch]
.text:000016FD                 mov     ecx, [eax+14h]
.text:00001700                 push    ecx
.text:00001701                 call    _ssh_send_packet_from_downstream
.text:00001706                 add     esp, 18h
.text:00001709
.text:00001709 loc_1709:                               ; CODE XREF: _share_dead_xchannel_respond+7Cj
.text:00001709                                         ; _share_dead_xchannel_respond+87j ...
.text:00001709                 jmp     short loc_171B
.text:0000170B ; ---------------------------------------------------------------------------
.text:0000170B
.text:0000170B loc_170B:                               ; CODE XREF: _share_dead_xchannel_respond+4Cj
.text:0000170B                                         ; _share_dead_xchannel_respond+59j
.text:0000170B                 mov     edx, [ebp+var_8]
.text:0000170E                 cmp     dword ptr [edx+4], 61h ; 'a'
.text:00001712                 jnz     short loc_171B
.text:00001714                 mov     [ebp+var_4], 1
.text:0000171B
.text:0000171B loc_171B:                               ; CODE XREF: _share_dead_xchannel_respond:loc_1709j
.text:0000171B                                         ; _share_dead_xchannel_respond+F6j
.text:0000171B                 mov     eax, [ebp+var_8]
.text:0000171E                 push    eax
.text:0000171F                 call    _safefree
.text:00001724                 add     esp, 4
.text:00001727                 jmp     loc_1640
.text:0000172C ; ---------------------------------------------------------------------------
.text:0000172C
.text:0000172C loc_172C:                               ; CODE XREF: _share_dead_xchannel_respond+2Bj
.text:0000172C                 mov     ecx, [ebp+arg_4]
.text:0000172F                 mov     dword ptr [ecx+14h], 0
.text:00001736                 cmp     [ebp+var_4], 0
.text:0000173A                 jz      short loc_1764
.text:0000173C                 mov     edx, [ebp+arg_4]
.text:0000173F                 mov     eax, [edx]
.text:00001741                 push    eax
.text:00001742                 mov     ecx, [ebp+arg_0]
.text:00001745                 mov     edx, [ecx+0Ch]
.text:00001748                 mov     eax, [edx+14h]
.text:0000174B                 push    eax
.text:0000174C                 call    _ssh_delete_sharing_channel
.text:00001751                 add     esp, 8
.text:00001754                 mov     ecx, [ebp+arg_4]
.text:00001757                 push    ecx
.text:00001758                 mov     edx, [ebp+arg_0]
.text:0000175B                 push    edx
.text:0000175C                 call    _share_remove_xchannel
.text:00001761                 add     esp, 8
.text:00001764
.text:00001764 loc_1764:                               ; CODE XREF: _share_dead_xchannel_respond+11Ej
.text:00001764                 push    edx
.text:00001765                 mov     ecx, ebp
.text:00001767                 push    eax
.text:00001768                 lea     edx, $LN12
.text:0000176E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001773                 pop     eax
.text:00001774                 pop     edx
.text:00001775                 add     esp, 18h
.text:00001778                 cmp     ebp, esp
.text:0000177A                 call    __RTC_CheckEsp
.text:0000177F                 mov     esp, ebp
.text:00001781                 pop     ebp
.text:00001782                 retn
.text:00001782 _share_dead_xchannel_respond endp
.text:00001782
.text:00001782 ; ---------------------------------------------------------------------------
.text:00001783                 align 4
.text:00001784 $LN12           dd 1                    ; DATA XREF: _share_dead_xchannel_respond+14Co
.text:00001788                 dd offset $LN11
.text:0000178C $LN11           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00001788o
.text:00001794                 dd offset $LN10
.text:00001798 $LN10           dd 0CC006469h           ; DATA XREF: .text:00001794o
.text:0000179C
.text:0000179C ; =============== S U B R O U T I N E =======================================
.text:0000179C
.text:0000179C ; Attributes: bp-based frame
.text:0000179C
.text:0000179C _share_remove_xchannel proc near        ; CODE XREF: _share_dead_xchannel_respond+140p
.text:0000179C                                         ; _share_got_pkt_from_downstream+8C5p
.text:0000179C
.text:0000179C arg_0           = dword ptr  8
.text:0000179C arg_4           = dword ptr  0Ch
.text:0000179C
.text:0000179C                 push    ebp
.text:0000179D                 mov     ebp, esp
.text:0000179F                 mov     eax, [ebp+arg_4]
.text:000017A2                 push    eax
.text:000017A3                 mov     ecx, [ebp+arg_0]
.text:000017A6                 mov     edx, [ecx+4040h]
.text:000017AC                 push    edx
.text:000017AD                 call    _del234
.text:000017B2                 add     esp, 8
.text:000017B5                 mov     eax, [ebp+arg_4]
.text:000017B8                 push    eax
.text:000017B9                 mov     ecx, [ebp+arg_0]
.text:000017BC                 mov     edx, [ecx+4044h]
.text:000017C2                 push    edx
.text:000017C3                 call    _del234
.text:000017C8                 add     esp, 8
.text:000017CB                 mov     eax, [ebp+arg_4]
.text:000017CE                 push    eax
.text:000017CF                 call    _share_xchannel_free
.text:000017D4                 add     esp, 4
.text:000017D7                 cmp     ebp, esp
.text:000017D9                 call    __RTC_CheckEsp
.text:000017DE                 pop     ebp
.text:000017DF                 retn
.text:000017DF _share_remove_xchannel endp
.text:000017DF
.text:000017DF ; ---------------------------------------------------------------------------
.text:000017E0                 db 0Ch dup(0CCh)
.text:000017EC
.text:000017EC ; =============== S U B R O U T I N E =======================================
.text:000017EC
.text:000017EC ; Attributes: bp-based frame
.text:000017EC
.text:000017EC _getstring_size proc near               ; CODE XREF: _share_dead_xchannel_respond+6Dp
.text:000017EC                                         ; _share_got_pkt_from_server+12Fp ...
.text:000017EC
.text:000017EC var_C           = dword ptr -0Ch
.text:000017EC var_8           = dword ptr -8
.text:000017EC var_4           = dword ptr -4
.text:000017EC arg_0           = dword ptr  8
.text:000017EC arg_4           = dword ptr  0Ch
.text:000017EC
.text:000017EC                 push    ebp
.text:000017ED                 mov     ebp, esp
.text:000017EF                 sub     esp, 0Ch
.text:000017F2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000017F9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001800                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001807                 lea     eax, [ebp+var_8]
.text:0000180A                 push    eax
.text:0000180B                 push    0
.text:0000180D                 mov     ecx, [ebp+arg_4]
.text:00001810                 push    ecx
.text:00001811                 mov     edx, [ebp+arg_0]
.text:00001814                 push    edx
.text:00001815                 call    _getstring_inner
.text:0000181A                 add     esp, 10h
.text:0000181D                 test    eax, eax
.text:0000181F                 jz      short loc_1828
.text:00001821                 mov     eax, [ebp+var_8]
.text:00001824                 jmp     short loc_182B
.text:00001826 ; ---------------------------------------------------------------------------
.text:00001826                 jmp     short loc_182B
.text:00001828 ; ---------------------------------------------------------------------------
.text:00001828
.text:00001828 loc_1828:                               ; CODE XREF: _getstring_size+33j
.text:00001828                 or      eax, 0FFFFFFFFh
.text:0000182B
.text:0000182B loc_182B:                               ; CODE XREF: _getstring_size+38j
.text:0000182B                                         ; _getstring_size+3Aj
.text:0000182B                 push    edx
.text:0000182C                 mov     ecx, ebp
.text:0000182E                 push    eax
.text:0000182F                 lea     edx, $LN7
.text:00001835                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000183A                 pop     eax
.text:0000183B                 pop     edx
.text:0000183C                 add     esp, 0Ch
.text:0000183F                 cmp     ebp, esp
.text:00001841                 call    __RTC_CheckEsp
.text:00001846                 mov     esp, ebp
.text:00001848                 pop     ebp
.text:00001849                 retn
.text:00001849 _getstring_size endp
.text:00001849
.text:00001849 ; ---------------------------------------------------------------------------
.text:0000184A                 align 4
.text:0000184C $LN7            dd 1                    ; DATA XREF: _getstring_size+43o
.text:00001850                 dd offset $LN6
.text:00001854 $LN6            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001850o
.text:0000185C                 dd offset $LN5
.text:00001860 $LN5            dd 746572h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000185Co
.text:0000186C
.text:0000186C ; =============== S U B R O U T I N E =======================================
.text:0000186C
.text:0000186C ; Attributes: bp-based frame
.text:0000186C
.text:0000186C _getstring_inner proc near              ; CODE XREF: _getstring_size+29p
.text:0000186C                                         ; _getstring+29p
.text:0000186C
.text:0000186C var_8           = dword ptr -8
.text:0000186C var_4           = dword ptr -4
.text:0000186C arg_0           = dword ptr  8
.text:0000186C arg_4           = dword ptr  0Ch
.text:0000186C arg_8           = dword ptr  10h
.text:0000186C arg_C           = dword ptr  14h
.text:0000186C
.text:0000186C                 push    ebp
.text:0000186D                 mov     ebp, esp
.text:0000186F                 sub     esp, 8
.text:00001872                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001879                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001880                 mov     eax, [ebp+arg_0]
.text:00001883                 mov     [ebp+var_4], eax
.text:00001886                 cmp     [ebp+arg_4], 4
.text:0000188A                 jge     short loc_1893
.text:0000188C                 xor     eax, eax
.text:0000188E                 jmp     loc_1917
.text:00001893 ; ---------------------------------------------------------------------------
.text:00001893
.text:00001893 loc_1893:                               ; CODE XREF: _getstring_inner+1Ej
.text:00001893                 mov     ecx, [ebp+var_4]
.text:00001896                 movzx   edx, byte ptr [ecx]
.text:00001899                 shl     edx, 18h
.text:0000189C                 mov     eax, [ebp+var_4]
.text:0000189F                 movzx   ecx, byte ptr [eax+1]
.text:000018A3                 shl     ecx, 10h
.text:000018A6                 or      edx, ecx
.text:000018A8                 mov     eax, [ebp+var_4]
.text:000018AB                 movzx   ecx, byte ptr [eax+2]
.text:000018AF                 shl     ecx, 8
.text:000018B2                 or      edx, ecx
.text:000018B4                 mov     eax, [ebp+var_4]
.text:000018B7                 movzx   ecx, byte ptr [eax+3]
.text:000018BB                 or      edx, ecx
.text:000018BD                 push    edx
.text:000018BE                 call    _toint
.text:000018C3                 add     esp, 4
.text:000018C6                 mov     [ebp+var_8], eax
.text:000018C9                 cmp     [ebp+var_8], 0
.text:000018CD                 jl      short loc_18DA
.text:000018CF                 mov     edx, [ebp+arg_4]
.text:000018D2                 sub     edx, 4
.text:000018D5                 cmp     [ebp+var_8], edx
.text:000018D8                 jle     short loc_18DE
.text:000018DA
.text:000018DA loc_18DA:                               ; CODE XREF: _getstring_inner+61j
.text:000018DA                 xor     eax, eax
.text:000018DC                 jmp     short loc_1917
.text:000018DE ; ---------------------------------------------------------------------------
.text:000018DE
.text:000018DE loc_18DE:                               ; CODE XREF: _getstring_inner+6Cj
.text:000018DE                 cmp     [ebp+arg_C], 0
.text:000018E2                 jz      short loc_18EF
.text:000018E4                 mov     eax, [ebp+var_8]
.text:000018E7                 add     eax, 4
.text:000018EA                 mov     ecx, [ebp+arg_C]
.text:000018ED                 mov     [ecx], eax
.text:000018EF
.text:000018EF loc_18EF:                               ; CODE XREF: _getstring_inner+76j
.text:000018EF                 cmp     [ebp+arg_8], 0
.text:000018F3                 jz      short loc_1912
.text:000018F5                 mov     edx, [ebp+var_4]
.text:000018F8                 add     edx, 4
.text:000018FB                 push    edx
.text:000018FC                 mov     eax, [ebp+var_8]
.text:000018FF                 push    eax
.text:00001900                 push    offset $SG87669 ; "%.*s"
.text:00001905                 call    _dupprintf
.text:0000190A                 add     esp, 0Ch
.text:0000190D                 mov     ecx, [ebp+arg_8]
.text:00001910                 mov     [ecx], eax
.text:00001912
.text:00001912 loc_1912:                               ; CODE XREF: _getstring_inner+87j
.text:00001912                 mov     eax, 1
.text:00001917
.text:00001917 loc_1917:                               ; CODE XREF: _getstring_inner+22j
.text:00001917                                         ; _getstring_inner+70j
.text:00001917                 add     esp, 8
.text:0000191A                 cmp     ebp, esp
.text:0000191C                 call    __RTC_CheckEsp
.text:00001921                 mov     esp, ebp
.text:00001923                 pop     ebp
.text:00001924                 retn
.text:00001924 _getstring_inner endp
.text:00001924
.text:00001924 ; ---------------------------------------------------------------------------
.text:00001925                 db 7 dup(0CCh)
.text:0000192C
.text:0000192C ; =============== S U B R O U T I N E =======================================
.text:0000192C
.text:0000192C ; Attributes: bp-based frame
.text:0000192C
.text:0000192C                 public _share_xchannel_confirmation
.text:0000192C _share_xchannel_confirmation proc near  ; CODE XREF: _share_got_pkt_from_downstream+8B5p
.text:0000192C
.text:0000192C var_18          = dword ptr -18h
.text:0000192C var_14          = dword ptr -14h
.text:0000192C var_10          = dword ptr -10h
.text:0000192C var_C           = dword ptr -0Ch
.text:0000192C var_8           = dword ptr -8
.text:0000192C var_4           = dword ptr -4
.text:0000192C arg_0           = dword ptr  8
.text:0000192C arg_4           = dword ptr  0Ch
.text:0000192C arg_8           = dword ptr  10h
.text:0000192C arg_C           = dword ptr  14h
.text:0000192C
.text:0000192C                 push    ebp
.text:0000192D                 mov     ebp, esp
.text:0000192F                 sub     esp, 18h
.text:00001932                 mov     eax, 0CCCCCCCCh
.text:00001937                 mov     [ebp+var_18], eax
.text:0000193A                 mov     [ebp+var_14], eax
.text:0000193D                 mov     [ebp+var_10], eax
.text:00001940                 mov     [ebp+var_C], eax
.text:00001943                 mov     [ebp+var_8], eax
.text:00001946                 mov     [ebp+var_4], eax
.text:00001949                 mov     eax, dword ptr ds:___security_cookie
.text:0000194E                 xor     eax, ebp
.text:00001950                 mov     [ebp+var_4], eax
.text:00001953
.text:00001953 loc_1953:                               ; CODE XREF: _share_xchannel_confirmation+C2j
.text:00001953                 mov     eax, [ebp+arg_4]
.text:00001956                 cmp     dword ptr [eax+10h], 0
.text:0000195A                 jz      loc_19F3
.text:00001960                 mov     ecx, [ebp+arg_4]
.text:00001963                 mov     edx, [ecx+10h]
.text:00001966                 mov     [ebp+var_18], edx
.text:00001969                 mov     eax, [ebp+arg_4]
.text:0000196C                 mov     ecx, [ebp+var_18]
.text:0000196F                 mov     edx, [ecx]
.text:00001971                 mov     [eax+10h], edx
.text:00001974                 mov     eax, [ebp+var_18]
.text:00001977                 cmp     dword ptr [eax+0Ch], 4
.text:0000197B                 jl      short loc_19BD
.text:0000197D                 mov     ecx, [ebp+arg_8]
.text:00001980                 mov     edx, [ecx]
.text:00001982                 shr     edx, 18h
.text:00001985                 mov     eax, [ebp+var_18]
.text:00001988                 mov     ecx, [eax+8]
.text:0000198B                 mov     [ecx], dl
.text:0000198D                 mov     edx, [ebp+arg_8]
.text:00001990                 mov     eax, [edx]
.text:00001992                 shr     eax, 10h
.text:00001995                 mov     ecx, [ebp+var_18]
.text:00001998                 mov     edx, [ecx+8]
.text:0000199B                 mov     [edx+1], al
.text:0000199E                 mov     eax, [ebp+arg_8]
.text:000019A1                 mov     ecx, [eax]
.text:000019A3                 shr     ecx, 8
.text:000019A6                 mov     edx, [ebp+var_18]
.text:000019A9                 mov     eax, [edx+8]
.text:000019AC                 mov     [eax+2], cl
.text:000019AF                 mov     ecx, [ebp+var_18]
.text:000019B2                 mov     edx, [ecx+8]
.text:000019B5                 mov     eax, [ebp+arg_8]
.text:000019B8                 mov     cl, [eax]
.text:000019BA                 mov     [edx+3], cl
.text:000019BD
.text:000019BD loc_19BD:                               ; CODE XREF: _share_xchannel_confirmation+4Fj
.text:000019BD                 mov     edx, [ebp+arg_8]
.text:000019C0                 push    edx
.text:000019C1                 mov     eax, [ebp+var_18]
.text:000019C4                 mov     ecx, [eax+0Ch]
.text:000019C7                 push    ecx
.text:000019C8                 mov     edx, [ebp+var_18]
.text:000019CB                 mov     eax, [edx+8]
.text:000019CE                 push    eax
.text:000019CF                 mov     ecx, [ebp+var_18]
.text:000019D2                 mov     edx, [ecx+4]
.text:000019D5                 push    edx
.text:000019D6                 mov     eax, [ebp+arg_0]
.text:000019D9                 push    eax
.text:000019DA                 call    _send_packet_to_downstream
.text:000019DF                 add     esp, 14h
.text:000019E2                 mov     ecx, [ebp+var_18]
.text:000019E5                 push    ecx
.text:000019E6                 call    _safefree
.text:000019EB                 add     esp, 4
.text:000019EE                 jmp     loc_1953
.text:000019F3 ; ---------------------------------------------------------------------------
.text:000019F3
.text:000019F3 loc_19F3:                               ; CODE XREF: _share_xchannel_confirmation+2Ej
.text:000019F3                 mov     edx, [ebp+arg_4]
.text:000019F6                 mov     eax, [edx+4]
.text:000019F9                 shr     eax, 18h
.text:000019FC                 mov     byte ptr [ebp+var_10], al
.text:000019FF                 mov     ecx, [ebp+arg_4]
.text:00001A02                 mov     edx, [ecx+4]
.text:00001A05                 shr     edx, 10h
.text:00001A08                 mov     byte ptr [ebp+var_10+1], dl
.text:00001A0B                 mov     eax, [ebp+arg_4]
.text:00001A0E                 mov     ecx, [eax+4]
.text:00001A11                 shr     ecx, 8
.text:00001A14                 mov     byte ptr [ebp+var_10+2], cl
.text:00001A17                 mov     edx, [ebp+arg_4]
.text:00001A1A                 mov     al, [edx+4]
.text:00001A1D                 mov     byte ptr [ebp+var_10+3], al
.text:00001A20                 mov     ecx, [ebp+arg_4]
.text:00001A23                 mov     edx, [ebp+arg_C]
.text:00001A26                 sub     edx, [ecx+0Ch]
.text:00001A29                 shr     edx, 18h
.text:00001A2C                 mov     byte ptr [ebp+var_C], dl
.text:00001A2F                 mov     eax, [ebp+arg_4]
.text:00001A32                 mov     ecx, [ebp+arg_C]
.text:00001A35                 sub     ecx, [eax+0Ch]
.text:00001A38                 shr     ecx, 10h
.text:00001A3B                 mov     byte ptr [ebp+var_C+1], cl
.text:00001A3E                 mov     edx, [ebp+arg_4]
.text:00001A41                 mov     eax, [ebp+arg_C]
.text:00001A44                 sub     eax, [edx+0Ch]
.text:00001A47                 shr     eax, 8
.text:00001A4A                 mov     byte ptr [ebp+var_C+2], al
.text:00001A4D                 mov     ecx, [ebp+arg_4]
.text:00001A50                 mov     edx, [ebp+arg_C]
.text:00001A53                 sub     edx, [ecx+0Ch]
.text:00001A56                 mov     byte ptr [ebp+var_C+3], dl
.text:00001A59                 push    offset $SG87759 ; "window adjustment after downstream acce"...
.text:00001A5E                 push    8
.text:00001A60                 lea     eax, [ebp+var_10]
.text:00001A63                 push    eax
.text:00001A64                 push    5Dh ; ']'
.text:00001A66                 mov     ecx, [ebp+arg_0]
.text:00001A69                 mov     edx, [ecx+4]
.text:00001A6C                 push    edx
.text:00001A6D                 mov     eax, [ebp+arg_0]
.text:00001A70                 mov     ecx, [eax+0Ch]
.text:00001A73                 mov     edx, [ecx+14h]
.text:00001A76                 push    edx
.text:00001A77                 call    _ssh_send_packet_from_downstream
.text:00001A7C                 add     esp, 18h
.text:00001A7F                 push    edx
.text:00001A80                 mov     ecx, ebp
.text:00001A82                 push    eax
.text:00001A83                 lea     edx, $LN8
.text:00001A89                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A8E                 pop     eax
.text:00001A8F                 pop     edx
.text:00001A90                 mov     ecx, [ebp+var_4]
.text:00001A93                 xor     ecx, ebp
.text:00001A95                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001A9A                 add     esp, 18h
.text:00001A9D                 cmp     ebp, esp
.text:00001A9F                 call    __RTC_CheckEsp
.text:00001AA4                 mov     esp, ebp
.text:00001AA6                 pop     ebp
.text:00001AA7                 retn
.text:00001AA7 _share_xchannel_confirmation endp
.text:00001AA7
.text:00001AA7 ; ---------------------------------------------------------------------------
.text:00001AA8 $LN8            dd 1                    ; DATA XREF: _share_xchannel_confirmation+157o
.text:00001AAC                 dd offset $LN7_0
.text:00001AB0 $LN7_0          dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00001AACo
.text:00001AB8                 dd offset $LN6_0        ; "window_adjust"
.text:00001ABC $LN6_0          db 'window_adjust',0    ; DATA XREF: .text:00001AB8o
.text:00001ACA                 align 4
.text:00001ACC
.text:00001ACC ; =============== S U B R O U T I N E =======================================
.text:00001ACC
.text:00001ACC ; Attributes: bp-based frame
.text:00001ACC
.text:00001ACC _send_packet_to_downstream proc near    ; CODE XREF: _share_xchannel_confirmation+AEp
.text:00001ACC                                         ; _share_setup_x11_channel+2E0p ...
.text:00001ACC
.text:00001ACC var_40          = dword ptr -40h
.text:00001ACC var_38          = byte ptr -38h
.text:00001ACC var_37          = byte ptr -37h
.text:00001ACC var_36          = byte ptr -36h
.text:00001ACC var_35          = byte ptr -35h
.text:00001ACC var_34          = byte ptr -34h
.text:00001ACC var_28          = dword ptr -28h
.text:00001ACC var_24          = dword ptr -24h
.text:00001ACC var_1C          = byte ptr -1Ch
.text:00001ACC var_1B          = byte ptr -1Bh
.text:00001ACC var_1A          = byte ptr -1Ah
.text:00001ACC var_19          = byte ptr -19h
.text:00001ACC var_18          = byte ptr -18h
.text:00001ACC var_17          = byte ptr -17h
.text:00001ACC var_16          = byte ptr -16h
.text:00001ACC var_15          = byte ptr -15h
.text:00001ACC var_14          = byte ptr -14h
.text:00001ACC var_13          = byte ptr -13h
.text:00001ACC var_12          = byte ptr -12h
.text:00001ACC var_11          = byte ptr -11h
.text:00001ACC var_10          = byte ptr -10h
.text:00001ACC var_8           = dword ptr -8
.text:00001ACC var_4           = dword ptr -4
.text:00001ACC arg_0           = dword ptr  8
.text:00001ACC arg_4           = dword ptr  0Ch
.text:00001ACC arg_8           = dword ptr  10h
.text:00001ACC arg_C           = dword ptr  14h
.text:00001ACC arg_10          = dword ptr  18h
.text:00001ACC
.text:00001ACC                 push    ebp
.text:00001ACD                 mov     ebp, esp
.text:00001ACF                 sub     esp, 40h
.text:00001AD2                 push    esi
.text:00001AD3                 push    edi
.text:00001AD4                 lea     edi, [ebp+var_40]
.text:00001AD7                 mov     ecx, 10h
.text:00001ADC                 mov     eax, 0CCCCCCCCh
.text:00001AE1                 rep stosd
.text:00001AE3                 mov     eax, dword ptr ds:___security_cookie
.text:00001AE8                 xor     eax, ebp
.text:00001AEA                 mov     [ebp+var_4], eax
.text:00001AED                 mov     eax, [ebp+arg_0]
.text:00001AF0                 cmp     dword ptr [eax+8], 0
.text:00001AF4                 jnz     short loc_1AFB
.text:00001AF6                 jmp     loc_1CF4
.text:00001AFB ; ---------------------------------------------------------------------------
.text:00001AFB
.text:00001AFB loc_1AFB:                               ; CODE XREF: _send_packet_to_downstream+28j
.text:00001AFB                 cmp     [ebp+arg_4], 5Eh ; '^'
.text:00001AFF                 jnz     loc_1C73
.text:00001B05                 mov     ecx, [ebp+arg_8]
.text:00001B08                 mov     [ebp+var_8], ecx
.text:00001B0B                 mov     edx, [ebp+var_8]
.text:00001B0E                 movzx   eax, byte ptr [edx+4]
.text:00001B12                 shl     eax, 18h
.text:00001B15                 mov     ecx, [ebp+var_8]
.text:00001B18                 movzx   edx, byte ptr [ecx+5]
.text:00001B1C                 shl     edx, 10h
.text:00001B1F                 or      eax, edx
.text:00001B21                 mov     ecx, [ebp+var_8]
.text:00001B24                 movzx   edx, byte ptr [ecx+6]
.text:00001B28                 shl     edx, 8
.text:00001B2B                 or      eax, edx
.text:00001B2D                 mov     ecx, [ebp+var_8]
.text:00001B30                 movzx   edx, byte ptr [ecx+7]
.text:00001B34                 or      eax, edx
.text:00001B36                 push    eax
.text:00001B37                 call    _toint
.text:00001B3C                 add     esp, 4
.text:00001B3F                 mov     [ebp+var_24], eax
.text:00001B42                 mov     eax, [ebp+var_8]
.text:00001B45                 add     eax, 8
.text:00001B48                 mov     [ebp+var_8], eax
.text:00001B4B                 cmp     [ebp+var_24], 0
.text:00001B4F                 jl      short loc_1B5C
.text:00001B51                 mov     ecx, [ebp+arg_C]
.text:00001B54                 sub     ecx, 8
.text:00001B57                 cmp     [ebp+var_24], ecx
.text:00001B5A                 jle     short loc_1B65
.text:00001B5C
.text:00001B5C loc_1B5C:                               ; CODE XREF: _send_packet_to_downstream+83j
.text:00001B5C                 mov     edx, [ebp+arg_C]
.text:00001B5F                 sub     edx, 8
.text:00001B62                 mov     [ebp+var_24], edx
.text:00001B65
.text:00001B65 loc_1B65:                               ; CODE XREF: _send_packet_to_downstream+8Ej
.text:00001B65                                         ; _send_packet_to_downstream+19Cj
.text:00001B65                 mov     eax, [ebp+arg_10]
.text:00001B68                 mov     ecx, [ebp+var_24]
.text:00001B6B                 cmp     ecx, [eax+0Ch]
.text:00001B6E                 jle     short loc_1B7B
.text:00001B70                 mov     edx, [ebp+arg_10]
.text:00001B73                 mov     eax, [edx+0Ch]
.text:00001B76                 mov     [ebp+var_40], eax
.text:00001B79                 jmp     short loc_1B81
.text:00001B7B ; ---------------------------------------------------------------------------
.text:00001B7B
.text:00001B7B loc_1B7B:                               ; CODE XREF: _send_packet_to_downstream+A2j
.text:00001B7B                 mov     ecx, [ebp+var_24]
.text:00001B7E                 mov     [ebp+var_40], ecx
.text:00001B81
.text:00001B81 loc_1B81:                               ; CODE XREF: _send_packet_to_downstream+ADj
.text:00001B81                 mov     edx, [ebp+var_40]
.text:00001B84                 mov     [ebp+var_28], edx
.text:00001B87                 mov     eax, [ebp+var_28]
.text:00001B8A                 add     eax, 9
.text:00001B8D                 sar     eax, 18h
.text:00001B90                 mov     [ebp+var_1C], al
.text:00001B93                 mov     ecx, [ebp+var_28]
.text:00001B96                 add     ecx, 9
.text:00001B99                 sar     ecx, 10h
.text:00001B9C                 mov     [ebp+var_1B], cl
.text:00001B9F                 mov     edx, [ebp+var_28]
.text:00001BA2                 add     edx, 9
.text:00001BA5                 sar     edx, 8
.text:00001BA8                 mov     [ebp+var_1A], dl
.text:00001BAB                 mov     eax, [ebp+var_28]
.text:00001BAE                 add     eax, 9
.text:00001BB1                 mov     [ebp+var_19], al
.text:00001BB4                 mov     cl, byte ptr [ebp+arg_4]
.text:00001BB7                 mov     [ebp+var_18], cl
.text:00001BBA                 mov     edx, [ebp+arg_10]
.text:00001BBD                 mov     eax, [edx]
.text:00001BBF                 shr     eax, 18h
.text:00001BC2                 mov     [ebp+var_17], al
.text:00001BC5                 mov     ecx, [ebp+arg_10]
.text:00001BC8                 mov     edx, [ecx]
.text:00001BCA                 shr     edx, 10h
.text:00001BCD                 mov     [ebp+var_16], dl
.text:00001BD0                 mov     eax, [ebp+arg_10]
.text:00001BD3                 mov     ecx, [eax]
.text:00001BD5                 shr     ecx, 8
.text:00001BD8                 mov     [ebp+var_15], cl
.text:00001BDB                 mov     edx, [ebp+arg_10]
.text:00001BDE                 mov     al, [edx]
.text:00001BE0                 mov     [ebp+var_14], al
.text:00001BE3                 mov     ecx, [ebp+var_28]
.text:00001BE6                 sar     ecx, 18h
.text:00001BE9                 mov     [ebp+var_13], cl
.text:00001BEC                 mov     edx, [ebp+var_28]
.text:00001BEF                 sar     edx, 10h
.text:00001BF2                 mov     [ebp+var_12], dl
.text:00001BF5                 mov     eax, [ebp+var_28]
.text:00001BF8                 sar     eax, 8
.text:00001BFB                 mov     [ebp+var_11], al
.text:00001BFE                 mov     cl, byte ptr [ebp+var_28]
.text:00001C01                 mov     [ebp+var_10], cl
.text:00001C04                 mov     esi, esp
.text:00001C06                 push    0Dh
.text:00001C08                 lea     edx, [ebp+var_1C]
.text:00001C0B                 push    edx
.text:00001C0C                 mov     eax, [ebp+arg_0]
.text:00001C0F                 mov     ecx, [eax+8]
.text:00001C12                 push    ecx
.text:00001C13                 mov     edx, [ebp+arg_0]
.text:00001C16                 mov     eax, [edx+8]
.text:00001C19                 mov     ecx, [eax]
.text:00001C1B                 mov     edx, [ecx+8]
.text:00001C1E                 call    edx
.text:00001C20                 add     esp, 0Ch
.text:00001C23                 cmp     esi, esp
.text:00001C25                 call    __RTC_CheckEsp
.text:00001C2A                 mov     esi, esp
.text:00001C2C                 mov     eax, [ebp+var_28]
.text:00001C2F                 push    eax
.text:00001C30                 mov     ecx, [ebp+var_8]
.text:00001C33                 push    ecx
.text:00001C34                 mov     edx, [ebp+arg_0]
.text:00001C37                 mov     eax, [edx+8]
.text:00001C3A                 push    eax
.text:00001C3B                 mov     ecx, [ebp+arg_0]
.text:00001C3E                 mov     edx, [ecx+8]
.text:00001C41                 mov     eax, [edx]
.text:00001C43                 mov     ecx, [eax+8]
.text:00001C46                 call    ecx
.text:00001C48                 add     esp, 0Ch
.text:00001C4B                 cmp     esi, esp
.text:00001C4D                 call    __RTC_CheckEsp
.text:00001C52                 mov     edx, [ebp+var_24]
.text:00001C55                 sub     edx, [ebp+var_28]
.text:00001C58                 mov     [ebp+var_24], edx
.text:00001C5B                 mov     eax, [ebp+var_8]
.text:00001C5E                 add     eax, [ebp+var_28]
.text:00001C61                 mov     [ebp+var_8], eax
.text:00001C64                 cmp     [ebp+var_24], 0
.text:00001C68                 jg      loc_1B65
.text:00001C6E                 jmp     loc_1CF4
.text:00001C73 ; ---------------------------------------------------------------------------
.text:00001C73
.text:00001C73 loc_1C73:                               ; CODE XREF: _send_packet_to_downstream+33j
.text:00001C73                 mov     ecx, [ebp+arg_C]
.text:00001C76                 add     ecx, 1
.text:00001C79                 sar     ecx, 18h
.text:00001C7C                 mov     [ebp+var_38], cl
.text:00001C7F                 mov     edx, [ebp+arg_C]
.text:00001C82                 add     edx, 1
.text:00001C85                 sar     edx, 10h
.text:00001C88                 mov     [ebp+var_37], dl
.text:00001C8B                 mov     eax, [ebp+arg_C]
.text:00001C8E                 add     eax, 1
.text:00001C91                 sar     eax, 8
.text:00001C94                 mov     [ebp+var_36], al
.text:00001C97                 mov     ecx, [ebp+arg_C]
.text:00001C9A                 add     ecx, 1
.text:00001C9D                 mov     [ebp+var_35], cl
.text:00001CA0                 mov     dl, byte ptr [ebp+arg_4]
.text:00001CA3                 mov     [ebp+var_34], dl
.text:00001CA6                 mov     esi, esp
.text:00001CA8                 push    5
.text:00001CAA                 lea     eax, [ebp+var_38]
.text:00001CAD                 push    eax
.text:00001CAE                 mov     ecx, [ebp+arg_0]
.text:00001CB1                 mov     edx, [ecx+8]
.text:00001CB4                 push    edx
.text:00001CB5                 mov     eax, [ebp+arg_0]
.text:00001CB8                 mov     ecx, [eax+8]
.text:00001CBB                 mov     edx, [ecx]
.text:00001CBD                 mov     eax, [edx+8]
.text:00001CC0                 call    eax
.text:00001CC2                 add     esp, 0Ch
.text:00001CC5                 cmp     esi, esp
.text:00001CC7                 call    __RTC_CheckEsp
.text:00001CCC                 mov     esi, esp
.text:00001CCE                 mov     ecx, [ebp+arg_C]
.text:00001CD1                 push    ecx
.text:00001CD2                 mov     edx, [ebp+arg_8]
.text:00001CD5                 push    edx
.text:00001CD6                 mov     eax, [ebp+arg_0]
.text:00001CD9                 mov     ecx, [eax+8]
.text:00001CDC                 push    ecx
.text:00001CDD                 mov     edx, [ebp+arg_0]
.text:00001CE0                 mov     eax, [edx+8]
.text:00001CE3                 mov     ecx, [eax]
.text:00001CE5                 mov     edx, [ecx+8]
.text:00001CE8                 call    edx
.text:00001CEA                 add     esp, 0Ch
.text:00001CED                 cmp     esi, esp
.text:00001CEF                 call    __RTC_CheckEsp
.text:00001CF4
.text:00001CF4 loc_1CF4:                               ; CODE XREF: _send_packet_to_downstream+2Aj
.text:00001CF4                                         ; _send_packet_to_downstream+1A2j
.text:00001CF4                 push    edx
.text:00001CF5                 mov     ecx, ebp
.text:00001CF7                 push    eax
.text:00001CF8                 lea     edx, $LN16_0
.text:00001CFE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D03                 pop     eax
.text:00001D04                 pop     edx
.text:00001D05                 pop     edi
.text:00001D06                 pop     esi
.text:00001D07                 mov     ecx, [ebp+var_4]
.text:00001D0A                 xor     ecx, ebp
.text:00001D0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001D11                 add     esp, 40h
.text:00001D14                 cmp     ebp, esp
.text:00001D16                 call    __RTC_CheckEsp
.text:00001D1B                 mov     esp, ebp
.text:00001D1D                 pop     ebp
.text:00001D1E                 retn
.text:00001D1E _send_packet_to_downstream endp
.text:00001D1E
.text:00001D1E ; ---------------------------------------------------------------------------
.text:00001D1F                 align 10h
.text:00001D20 $LN16_0         dd 2                    ; DATA XREF: _send_packet_to_downstream+22Co
.text:00001D24                 dd offset $LN15
.text:00001D28 $LN15           dd 0FFFFFFE4h, 0Dh      ; DATA XREF: .text:00001D24o
.text:00001D30                 dd offset $LN13         ; "header"
.text:00001D34                 dd 0FFFFFFC8h, 9
.text:00001D3C                 dd offset $LN14         ; "header"
.text:00001D40 $LN14           db 'header',0           ; DATA XREF: .text:00001D3Co
.text:00001D47 $LN13           db 'header',0           ; DATA XREF: .text:00001D30o
.text:00001D4E                 db 0Eh dup(0CCh)
.text:00001D5C
.text:00001D5C ; =============== S U B R O U T I N E =======================================
.text:00001D5C
.text:00001D5C ; Attributes: bp-based frame
.text:00001D5C
.text:00001D5C                 public _share_xchannel_failure
.text:00001D5C _share_xchannel_failure proc near       ; CODE XREF: _share_got_pkt_from_downstream+98Dp
.text:00001D5C
.text:00001D5C var_C           = dword ptr -0Ch
.text:00001D5C var_8           = dword ptr -8
.text:00001D5C var_4           = dword ptr -4
.text:00001D5C arg_0           = dword ptr  8
.text:00001D5C arg_4           = dword ptr  0Ch
.text:00001D5C
.text:00001D5C                 push    ebp
.text:00001D5D                 mov     ebp, esp
.text:00001D5F                 sub     esp, 0Ch
.text:00001D62                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001D69                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D77                 mov     eax, [ebp+arg_4]
.text:00001D7A                 mov     ecx, [eax+4]
.text:00001D7D                 shr     ecx, 18h
.text:00001D80                 mov     byte ptr [ebp+var_8], cl
.text:00001D83                 mov     edx, [ebp+arg_4]
.text:00001D86                 mov     eax, [edx+4]
.text:00001D89                 shr     eax, 10h
.text:00001D8C                 mov     byte ptr [ebp+var_8+1], al
.text:00001D8F                 mov     ecx, [ebp+arg_4]
.text:00001D92                 mov     edx, [ecx+4]
.text:00001D95                 shr     edx, 8
.text:00001D98                 mov     byte ptr [ebp+var_8+2], dl
.text:00001D9B                 mov     eax, [ebp+arg_4]
.text:00001D9E                 mov     cl, [eax+4]
.text:00001DA1                 mov     byte ptr [ebp+var_8+3], cl
.text:00001DA4                 push    offset $SG87771 ; "downstream refused X channel open"
.text:00001DA9                 push    4
.text:00001DAB                 lea     edx, [ebp+var_8]
.text:00001DAE                 push    edx
.text:00001DAF                 push    61h ; 'a'
.text:00001DB1                 mov     eax, [ebp+arg_0]
.text:00001DB4                 mov     ecx, [eax+4]
.text:00001DB7                 push    ecx
.text:00001DB8                 mov     edx, [ebp+arg_0]
.text:00001DBB                 mov     eax, [edx+0Ch]
.text:00001DBE                 mov     ecx, [eax+14h]
.text:00001DC1                 push    ecx
.text:00001DC2                 call    _ssh_send_packet_from_downstream
.text:00001DC7                 add     esp, 18h
.text:00001DCA                 mov     edx, [ebp+arg_4]
.text:00001DCD                 mov     dword ptr [edx+8], 0
.text:00001DD4                 mov     eax, [ebp+arg_4]
.text:00001DD7                 push    eax
.text:00001DD8                 mov     ecx, [ebp+arg_0]
.text:00001DDB                 push    ecx
.text:00001DDC                 call    _share_dead_xchannel_respond
.text:00001DE1                 add     esp, 8
.text:00001DE4                 push    edx
.text:00001DE5                 mov     ecx, ebp
.text:00001DE7                 push    eax
.text:00001DE8                 lea     edx, $LN5_0
.text:00001DEE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001DF3                 pop     eax
.text:00001DF4                 pop     edx
.text:00001DF5                 add     esp, 0Ch
.text:00001DF8                 cmp     ebp, esp
.text:00001DFA                 call    __RTC_CheckEsp
.text:00001DFF                 mov     esp, ebp
.text:00001E01                 pop     ebp
.text:00001E02                 retn
.text:00001E02 _share_xchannel_failure endp
.text:00001E02
.text:00001E02 ; ---------------------------------------------------------------------------
.text:00001E03                 align 4
.text:00001E04 $LN5_0          dd 1                    ; DATA XREF: _share_xchannel_failure+8Co
.text:00001E08                 dd offset $LN4
.text:00001E0C $LN4            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001E08o
.text:00001E14                 dd offset $LN3
.text:00001E18 $LN3            dd 0CC006469h           ; DATA XREF: .text:00001E14o
.text:00001E1C
.text:00001E1C ; =============== S U B R O U T I N E =======================================
.text:00001E1C
.text:00001E1C ; Attributes: bp-based frame
.text:00001E1C
.text:00001E1C ; int __cdecl share_setup_x11_channel(int, int, int, int, int, int, int, char *Str, int, int, int, int, void *, size_t)
.text:00001E1C                 public _share_setup_x11_channel
.text:00001E1C _share_setup_x11_channel proc near
.text:00001E1C
.text:00001E1C var_28          = dword ptr -28h
.text:00001E1C var_24          = dword ptr -24h
.text:00001E1C Size            = dword ptr -1Ch
.text:00001E1C Src             = dword ptr -14h
.text:00001E1C var_10          = dword ptr -10h
.text:00001E1C var_C           = dword ptr -0Ch
.text:00001E1C var_8           = dword ptr -8
.text:00001E1C var_4           = dword ptr -4
.text:00001E1C arg_0           = dword ptr  8
.text:00001E1C arg_4           = dword ptr  0Ch
.text:00001E1C arg_8           = dword ptr  10h
.text:00001E1C arg_C           = dword ptr  14h
.text:00001E1C arg_10          = dword ptr  18h
.text:00001E1C arg_14          = dword ptr  1Ch
.text:00001E1C arg_18          = dword ptr  20h
.text:00001E1C Str             = dword ptr  24h
.text:00001E1C arg_20          = dword ptr  28h
.text:00001E1C arg_24          = dword ptr  2Ch
.text:00001E1C arg_28          = dword ptr  30h
.text:00001E1C arg_2C          = dword ptr  34h
.text:00001E1C arg_30          = dword ptr  38h
.text:00001E1C arg_34          = dword ptr  3Ch
.text:00001E1C
.text:00001E1C                 push    ebp
.text:00001E1D                 mov     ebp, esp
.text:00001E1F                 sub     esp, 28h
.text:00001E22                 push    ebx
.text:00001E23                 push    edi
.text:00001E24                 lea     edi, [ebp+var_28]
.text:00001E27                 mov     ecx, 0Ah
.text:00001E2C                 mov     eax, 0CCCCCCCCh
.text:00001E31                 rep stosd
.text:00001E33                 mov     eax, [ebp+arg_0]
.text:00001E36                 mov     [ebp+var_4], eax
.text:00001E39                 mov     ecx, [ebp+arg_4]
.text:00001E3C                 mov     [ebp+var_8], ecx
.text:00001E3F                 mov     edx, [ebp+arg_C]
.text:00001E42                 push    edx
.text:00001E43                 mov     eax, [ebp+arg_8]
.text:00001E46                 push    eax
.text:00001E47                 mov     ecx, [ebp+var_4]
.text:00001E4A                 push    ecx
.text:00001E4B                 call    _share_add_xchannel
.text:00001E50                 add     esp, 0Ch
.text:00001E53                 mov     [ebp+var_C], eax
.text:00001E56                 lea     edx, [ebp+Size]
.text:00001E59                 push    edx
.text:00001E5A                 mov     eax, [ebp+arg_20]
.text:00001E5D                 push    eax
.text:00001E5E                 mov     ecx, [ebp+Str]
.text:00001E61                 push    ecx
.text:00001E62                 mov     edx, [ebp+var_8]
.text:00001E65                 mov     eax, [edx+20h]
.text:00001E68                 push    eax
.text:00001E69                 mov     ecx, [ebp+var_8]
.text:00001E6C                 mov     edx, [ecx+1Ch]
.text:00001E6F                 push    edx
.text:00001E70                 mov     eax, [ebp+var_8]
.text:00001E73                 mov     ecx, [eax+18h]
.text:00001E76                 push    ecx
.text:00001E77                 mov     edx, [ebp+arg_2C]
.text:00001E7A                 push    edx
.text:00001E7B                 mov     eax, [ebp+arg_28]
.text:00001E7E                 push    eax
.text:00001E7F                 mov     ecx, [ebp+arg_24]
.text:00001E82                 push    ecx
.text:00001E83                 call    _x11_make_greeting
.text:00001E88                 add     esp, 24h
.text:00001E8B                 mov     [ebp+Src], eax
.text:00001E8E                 mov     edx, [ebp+arg_34]
.text:00001E91                 mov     eax, [ebp+Size]
.text:00001E94                 lea     ecx, [eax+edx+8]
.text:00001E98                 push    ecx
.text:00001E99                 push    5Eh ; '^'
.text:00001E9B                 mov     edx, [ebp+var_C]
.text:00001E9E                 push    edx
.text:00001E9F                 call    _share_xchannel_add_message
.text:00001EA4                 add     esp, 0Ch
.text:00001EA7                 mov     [ebp+var_10], eax
.text:00001EAA                 mov     eax, [ebp+Size]
.text:00001EAD                 add     eax, [ebp+arg_34]
.text:00001EB0                 sar     eax, 18h
.text:00001EB3                 mov     ecx, [ebp+var_10]
.text:00001EB6                 mov     edx, [ecx+8]
.text:00001EB9                 mov     [edx+4], al
.text:00001EBC                 mov     eax, [ebp+Size]
.text:00001EBF                 add     eax, [ebp+arg_34]
.text:00001EC2                 sar     eax, 10h
.text:00001EC5                 mov     ecx, [ebp+var_10]
.text:00001EC8                 mov     edx, [ecx+8]
.text:00001ECB                 mov     [edx+5], al
.text:00001ECE                 mov     eax, [ebp+Size]
.text:00001ED1                 add     eax, [ebp+arg_34]
.text:00001ED4                 sar     eax, 8
.text:00001ED7                 mov     ecx, [ebp+var_10]
.text:00001EDA                 mov     edx, [ecx+8]
.text:00001EDD                 mov     [edx+6], al
.text:00001EE0                 mov     eax, [ebp+Size]
.text:00001EE3                 add     eax, [ebp+arg_34]
.text:00001EE6                 mov     ecx, [ebp+var_10]
.text:00001EE9                 mov     edx, [ecx+8]
.text:00001EEC                 mov     [edx+7], al
.text:00001EEF                 mov     eax, [ebp+Size]
.text:00001EF2                 push    eax             ; Size
.text:00001EF3                 mov     ecx, [ebp+Src]
.text:00001EF6                 push    ecx             ; Src
.text:00001EF7                 mov     edx, [ebp+var_10]
.text:00001EFA                 mov     eax, [edx+8]
.text:00001EFD                 add     eax, 8
.text:00001F00                 push    eax             ; Dst
.text:00001F01                 call    _memcpy
.text:00001F06                 add     esp, 0Ch
.text:00001F09                 mov     ecx, [ebp+arg_34]
.text:00001F0C                 push    ecx             ; Size
.text:00001F0D                 mov     edx, [ebp+arg_30]
.text:00001F10                 push    edx             ; Src
.text:00001F11                 mov     eax, [ebp+var_10]
.text:00001F14                 mov     ecx, [eax+8]
.text:00001F17                 mov     edx, [ebp+Size]
.text:00001F1A                 lea     eax, [ecx+edx+8]
.text:00001F1E                 push    eax             ; Dst
.text:00001F1F                 call    _memcpy
.text:00001F24                 add     esp, 0Ch
.text:00001F27                 mov     ecx, [ebp+Src]
.text:00001F2A                 push    ecx
.text:00001F2B                 call    _safefree
.text:00001F30                 add     esp, 4
.text:00001F33                 mov     edx, [ebp+arg_18]
.text:00001F36                 add     edx, [ebp+Size]
.text:00001F39                 mov     eax, [ebp+var_C]
.text:00001F3C                 mov     [eax+0Ch], edx
.text:00001F3F                 mov     ecx, [ebp+Str]
.text:00001F42                 push    ecx             ; Str
.text:00001F43                 call    _strlen
.text:00001F48                 add     esp, 4
.text:00001F4B                 add     eax, 1Bh
.text:00001F4E                 mov     [ebp+var_28], eax
.text:00001F51                 push    1
.text:00001F53                 mov     edx, [ebp+var_28]
.text:00001F56                 push    edx
.text:00001F57                 call    _safemalloc
.text:00001F5C                 add     esp, 8
.text:00001F5F                 mov     [ebp+var_24], eax
.text:00001F62                 mov     eax, [ebp+var_24]
.text:00001F65                 mov     byte ptr [eax], 0
.text:00001F68                 mov     ecx, [ebp+var_24]
.text:00001F6B                 mov     byte ptr [ecx+1], 0
.text:00001F6F                 mov     edx, [ebp+var_24]
.text:00001F72                 mov     byte ptr [edx+2], 0
.text:00001F76                 mov     eax, [ebp+var_24]
.text:00001F79                 mov     byte ptr [eax+3], 3
.text:00001F7D                 push    3               ; Size
.text:00001F7F                 push    offset $SG87821 ; "x11"
.text:00001F84                 mov     ecx, [ebp+var_24]
.text:00001F87                 add     ecx, 4
.text:00001F8A                 push    ecx             ; Dst
.text:00001F8B                 call    _memcpy
.text:00001F90                 add     esp, 0Ch
.text:00001F93                 mov     edx, [ebp+arg_C]
.text:00001F96                 shr     edx, 18h
.text:00001F99                 mov     eax, [ebp+var_24]
.text:00001F9C                 mov     [eax+7], dl
.text:00001F9F                 mov     ecx, [ebp+arg_C]
.text:00001FA2                 shr     ecx, 10h
.text:00001FA5                 mov     edx, [ebp+var_24]
.text:00001FA8                 mov     [edx+8], cl
.text:00001FAB                 mov     eax, [ebp+arg_C]
.text:00001FAE                 shr     eax, 8
.text:00001FB1                 mov     ecx, [ebp+var_24]
.text:00001FB4                 mov     [ecx+9], al
.text:00001FB7                 mov     edx, [ebp+var_24]
.text:00001FBA                 mov     al, byte ptr [ebp+arg_C]
.text:00001FBD                 mov     [edx+0Ah], al
.text:00001FC0                 mov     ecx, [ebp+arg_10]
.text:00001FC3                 shr     ecx, 18h
.text:00001FC6                 mov     edx, [ebp+var_24]
.text:00001FC9                 mov     [edx+0Bh], cl
.text:00001FCC                 mov     eax, [ebp+arg_10]
.text:00001FCF                 shr     eax, 10h
.text:00001FD2                 mov     ecx, [ebp+var_24]
.text:00001FD5                 mov     [ecx+0Ch], al
.text:00001FD8                 mov     edx, [ebp+arg_10]
.text:00001FDB                 shr     edx, 8
.text:00001FDE                 mov     eax, [ebp+var_24]
.text:00001FE1                 mov     [eax+0Dh], dl
.text:00001FE4                 mov     ecx, [ebp+var_24]
.text:00001FE7                 mov     dl, byte ptr [ebp+arg_10]
.text:00001FEA                 mov     [ecx+0Eh], dl
.text:00001FED                 mov     eax, [ebp+arg_14]
.text:00001FF0                 shr     eax, 18h
.text:00001FF3                 mov     ecx, [ebp+var_24]
.text:00001FF6                 mov     [ecx+0Fh], al
.text:00001FF9                 mov     edx, [ebp+arg_14]
.text:00001FFC                 shr     edx, 10h
.text:00001FFF                 mov     eax, [ebp+var_24]
.text:00002002                 mov     [eax+10h], dl
.text:00002005                 mov     ecx, [ebp+arg_14]
.text:00002008                 shr     ecx, 8
.text:0000200B                 mov     edx, [ebp+var_24]
.text:0000200E                 mov     [edx+11h], cl
.text:00002011                 mov     eax, [ebp+var_24]
.text:00002014                 mov     cl, byte ptr [ebp+arg_14]
.text:00002017                 mov     [eax+12h], cl
.text:0000201A                 mov     edx, [ebp+Str]
.text:0000201D                 push    edx             ; Str
.text:0000201E                 call    _strlen
.text:00002023                 add     esp, 4
.text:00002026                 shr     eax, 18h
.text:00002029                 mov     ecx, [ebp+var_24]
.text:0000202C                 mov     [ecx+13h], al
.text:0000202F                 mov     edx, [ebp+Str]
.text:00002032                 push    edx             ; Str
.text:00002033                 call    _strlen
.text:00002038                 add     esp, 4
.text:0000203B                 shr     eax, 10h
.text:0000203E                 mov     ecx, [ebp+var_24]
.text:00002041                 mov     [ecx+14h], al
.text:00002044                 mov     edx, [ebp+Str]
.text:00002047                 push    edx             ; Str
.text:00002048                 call    _strlen
.text:0000204D                 add     esp, 4
.text:00002050                 shr     eax, 8
.text:00002053                 mov     ecx, [ebp+var_24]
.text:00002056                 mov     [ecx+15h], al
.text:00002059                 mov     edx, [ebp+Str]
.text:0000205C                 push    edx             ; Str
.text:0000205D                 call    _strlen
.text:00002062                 add     esp, 4
.text:00002065                 mov     ecx, [ebp+var_24]
.text:00002068                 mov     [ecx+16h], al
.text:0000206B                 mov     edx, [ebp+Str]
.text:0000206E                 push    edx             ; Str
.text:0000206F                 call    _strlen
.text:00002074                 add     esp, 4
.text:00002077                 push    eax             ; Size
.text:00002078                 mov     eax, [ebp+Str]
.text:0000207B                 push    eax             ; Src
.text:0000207C                 mov     ecx, [ebp+var_24]
.text:0000207F                 add     ecx, 17h
.text:00002082                 push    ecx             ; Dst
.text:00002083                 call    _memcpy
.text:00002088                 add     esp, 0Ch
.text:0000208B                 mov     ebx, [ebp+arg_20]
.text:0000208E                 sar     ebx, 18h
.text:00002091                 mov     edx, [ebp+Str]
.text:00002094                 push    edx             ; Str
.text:00002095                 call    _strlen
.text:0000209A                 add     esp, 4
.text:0000209D                 mov     ecx, [ebp+var_24]
.text:000020A0                 mov     [ecx+eax+17h], bl
.text:000020A4                 mov     ebx, [ebp+arg_20]
.text:000020A7                 sar     ebx, 10h
.text:000020AA                 mov     edx, [ebp+Str]
.text:000020AD                 push    edx             ; Str
.text:000020AE                 call    _strlen
.text:000020B3                 add     esp, 4
.text:000020B6                 mov     ecx, [ebp+var_24]
.text:000020B9                 mov     [ecx+eax+18h], bl
.text:000020BD                 mov     ebx, [ebp+arg_20]
.text:000020C0                 sar     ebx, 8
.text:000020C3                 mov     edx, [ebp+Str]
.text:000020C6                 push    edx             ; Str
.text:000020C7                 call    _strlen
.text:000020CC                 add     esp, 4
.text:000020CF                 mov     ecx, [ebp+var_24]
.text:000020D2                 mov     [ecx+eax+19h], bl
.text:000020D6                 mov     edx, [ebp+Str]
.text:000020D9                 push    edx             ; Str
.text:000020DA                 call    _strlen
.text:000020DF                 add     esp, 4
.text:000020E2                 mov     ecx, [ebp+var_24]
.text:000020E5                 mov     dl, byte ptr [ebp+arg_20]
.text:000020E8                 mov     [ecx+eax+1Ah], dl
.text:000020EC                 push    0
.text:000020EE                 mov     eax, [ebp+var_28]
.text:000020F1                 push    eax
.text:000020F2                 mov     ecx, [ebp+var_24]
.text:000020F5                 push    ecx
.text:000020F6                 push    5Ah ; 'Z'
.text:000020F8                 mov     edx, [ebp+var_4]
.text:000020FB                 push    edx
.text:000020FC                 call    _send_packet_to_downstream
.text:00002101                 add     esp, 14h
.text:00002104                 mov     eax, [ebp+var_24]
.text:00002107                 push    eax
.text:00002108                 call    _safefree
.text:0000210D                 add     esp, 4
.text:00002110                 mov     ecx, [ebp+var_8]
.text:00002113                 cmp     dword ptr [ecx+24h], 0
.text:00002117                 jz      short loc_2169
.text:00002119                 mov     edx, [ebp+var_8]
.text:0000211C                 mov     eax, [edx+14h]
.text:0000211F                 push    eax
.text:00002120                 mov     ecx, [ebp+var_4]
.text:00002123                 mov     edx, [ecx+0Ch]
.text:00002126                 mov     eax, [edx+14h]
.text:00002129                 push    eax
.text:0000212A                 call    _ssh_sharing_remove_x11_display
.text:0000212F                 add     esp, 8
.text:00002132                 mov     ecx, [ebp+var_8]
.text:00002135                 mov     dword ptr [ecx+14h], 0
.text:0000213C                 mov     edx, [ebp+var_8]
.text:0000213F                 mov     eax, [edx+1Ch]
.text:00002142                 push    eax
.text:00002143                 call    _safefree
.text:00002148                 add     esp, 4
.text:0000214B                 mov     ecx, [ebp+var_8]
.text:0000214E                 mov     dword ptr [ecx+18h], 0FFFFFFFFh
.text:00002155                 mov     edx, [ebp+var_8]
.text:00002158                 mov     dword ptr [edx+20h], 0
.text:0000215F                 mov     eax, [ebp+var_8]
.text:00002162                 mov     dword ptr [eax+24h], 0
.text:00002169
.text:00002169 loc_2169:                               ; CODE XREF: _share_setup_x11_channel+2FBj
.text:00002169                 push    edx
.text:0000216A                 mov     ecx, ebp
.text:0000216C                 push    eax
.text:0000216D                 lea     edx, $LN6_1
.text:00002173                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002178                 pop     eax
.text:00002179                 pop     edx
.text:0000217A                 pop     edi
.text:0000217B                 pop     ebx
.text:0000217C                 add     esp, 28h
.text:0000217F                 cmp     ebp, esp
.text:00002181                 call    __RTC_CheckEsp
.text:00002186                 mov     esp, ebp
.text:00002188                 pop     ebp
.text:00002189                 retn
.text:00002189 _share_setup_x11_channel endp
.text:00002189
.text:00002189 ; ---------------------------------------------------------------------------
.text:0000218A                 align 4
.text:0000218C $LN6_1          dd 1                    ; DATA XREF: _share_setup_x11_channel+351o
.text:00002190                 dd offset $LN5_1
.text:00002194 $LN5_1          dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00002190o
.text:0000219C                 dd offset $LN4_0        ; "greeting_len"
.text:000021A0 $LN4_0          db 'greeting_len',0     ; DATA XREF: .text:0000219Co
.text:000021AD                 db 0Fh dup(0CCh)
.text:000021BC
.text:000021BC ; =============== S U B R O U T I N E =======================================
.text:000021BC
.text:000021BC ; Attributes: bp-based frame
.text:000021BC
.text:000021BC _share_add_xchannel proc near           ; CODE XREF: _share_setup_x11_channel+2Fp
.text:000021BC
.text:000021BC var_4           = dword ptr -4
.text:000021BC arg_0           = dword ptr  8
.text:000021BC arg_4           = dword ptr  0Ch
.text:000021BC arg_8           = dword ptr  10h
.text:000021BC
.text:000021BC                 push    ebp
.text:000021BD                 mov     ebp, esp
.text:000021BF                 push    ecx
.text:000021C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021C7                 push    18h
.text:000021C9                 push    1
.text:000021CB                 call    _safemalloc
.text:000021D0                 add     esp, 8
.text:000021D3                 mov     [ebp+var_4], eax
.text:000021D6                 mov     eax, [ebp+var_4]
.text:000021D9                 mov     ecx, [ebp+arg_4]
.text:000021DC                 mov     [eax], ecx
.text:000021DE                 mov     edx, [ebp+var_4]
.text:000021E1                 mov     eax, [ebp+arg_8]
.text:000021E4                 mov     [edx+4], eax
.text:000021E7                 mov     ecx, [ebp+var_4]
.text:000021EA                 mov     dword ptr [ecx+8], 1
.text:000021F1                 mov     edx, [ebp+var_4]
.text:000021F4                 mov     dword ptr [edx+14h], 0
.text:000021FB                 mov     eax, [ebp+var_4]
.text:000021FE                 mov     dword ptr [eax+10h], 0
.text:00002205                 mov     ecx, [ebp+var_4]
.text:00002208                 push    ecx
.text:00002209                 mov     edx, [ebp+arg_0]
.text:0000220C                 mov     eax, [edx+4040h]
.text:00002212                 push    eax
.text:00002213                 call    _add234
.text:00002218                 add     esp, 8
.text:0000221B                 cmp     eax, [ebp+var_4]
.text:0000221E                 jz      short loc_2230
.text:00002220                 mov     ecx, [ebp+var_4]
.text:00002223                 push    ecx
.text:00002224                 call    _safefree
.text:00002229                 add     esp, 4
.text:0000222C                 xor     eax, eax
.text:0000222E                 jmp     short loc_2274
.text:00002230 ; ---------------------------------------------------------------------------
.text:00002230
.text:00002230 loc_2230:                               ; CODE XREF: _share_add_xchannel+62j
.text:00002230                 mov     edx, [ebp+var_4]
.text:00002233                 push    edx
.text:00002234                 mov     eax, [ebp+arg_0]
.text:00002237                 mov     ecx, [eax+4044h]
.text:0000223D                 push    ecx
.text:0000223E                 call    _add234
.text:00002243                 add     esp, 8
.text:00002246                 cmp     eax, [ebp+var_4]
.text:00002249                 jz      short loc_2271
.text:0000224B                 mov     edx, [ebp+var_4]
.text:0000224E                 push    edx
.text:0000224F                 mov     eax, [ebp+arg_0]
.text:00002252                 mov     ecx, [eax+4040h]
.text:00002258                 push    ecx
.text:00002259                 call    _del234
.text:0000225E                 add     esp, 8
.text:00002261                 mov     edx, [ebp+var_4]
.text:00002264                 push    edx
.text:00002265                 call    _safefree
.text:0000226A                 add     esp, 4
.text:0000226D                 xor     eax, eax
.text:0000226F                 jmp     short loc_2274
.text:00002271 ; ---------------------------------------------------------------------------
.text:00002271
.text:00002271 loc_2271:                               ; CODE XREF: _share_add_xchannel+8Dj
.text:00002271                 mov     eax, [ebp+var_4]
.text:00002274
.text:00002274 loc_2274:                               ; CODE XREF: _share_add_xchannel+72j
.text:00002274                                         ; _share_add_xchannel+B3j
.text:00002274                 add     esp, 4
.text:00002277                 cmp     ebp, esp
.text:00002279                 call    __RTC_CheckEsp
.text:0000227E                 mov     esp, ebp
.text:00002280                 pop     ebp
.text:00002281                 retn
.text:00002281 _share_add_xchannel endp
.text:00002281
.text:00002281 ; ---------------------------------------------------------------------------
.text:00002282                 db 0Ah dup(0CCh)
.text:0000228C
.text:0000228C ; =============== S U B R O U T I N E =======================================
.text:0000228C
.text:0000228C ; Attributes: bp-based frame
.text:0000228C
.text:0000228C ; int __cdecl share_got_pkt_from_server(int, int, void *Src, size_t Size)
.text:0000228C                 public _share_got_pkt_from_server
.text:0000228C _share_got_pkt_from_server proc near
.text:0000228C
.text:0000228C var_24          = dword ptr -24h
.text:0000228C var_20          = dword ptr -20h
.text:0000228C var_1C          = dword ptr -1Ch
.text:0000228C var_18          = dword ptr -18h
.text:0000228C var_14          = dword ptr -14h
.text:0000228C var_10          = dword ptr -10h
.text:0000228C var_C           = dword ptr -0Ch
.text:0000228C var_8           = dword ptr -8
.text:0000228C var_4           = dword ptr -4
.text:0000228C arg_0           = dword ptr  8
.text:0000228C arg_4           = dword ptr  0Ch
.text:0000228C Src             = dword ptr  10h
.text:0000228C Size            = dword ptr  14h
.text:0000228C
.text:0000228C                 push    ebp
.text:0000228D                 mov     ebp, esp
.text:0000228F                 sub     esp, 24h
.text:00002292                 mov     eax, 0CCCCCCCCh
.text:00002297                 mov     [ebp+var_24], eax
.text:0000229A                 mov     [ebp+var_20], eax
.text:0000229D                 mov     [ebp+var_1C], eax
.text:000022A0                 mov     [ebp+var_18], eax
.text:000022A3                 mov     [ebp+var_14], eax
.text:000022A6                 mov     [ebp+var_10], eax
.text:000022A9                 mov     [ebp+var_C], eax
.text:000022AC                 mov     [ebp+var_8], eax
.text:000022AF                 mov     [ebp+var_4], eax
.text:000022B2                 mov     eax, [ebp+arg_0]
.text:000022B5                 mov     [ebp+var_4], eax
.text:000022B8                 mov     ecx, [ebp+arg_4]
.text:000022BB                 mov     [ebp+var_24], ecx
.text:000022BE                 mov     edx, [ebp+var_24]
.text:000022C1                 sub     edx, 51h ; 'Q'
.text:000022C4                 mov     [ebp+var_24], edx
.text:000022C7                 cmp     [ebp+var_24], 13h ; switch 20 cases
.text:000022CB                 ja      $LN1            ; jumptable 000022DB default case
.text:000022D1                 mov     eax, [ebp+var_24]
.text:000022D4                 movzx   ecx, ds:$LN35[eax]
.text:000022DB                 jmp     ds:$LN36[ecx*4] ; switch jump
.text:000022E2 ; ---------------------------------------------------------------------------
.text:000022E2
.text:000022E2 $LN27:                                  ; CODE XREF: _share_got_pkt_from_server+4Fj
.text:000022E2                                         ; DATA XREF: .text:$LN36o
.text:000022E2                 mov     edx, [ebp+var_4] ; jumptable 000022DB cases 0,1
.text:000022E5                 mov     eax, [edx+404Ch]
.text:000022EB                 mov     [ebp+var_8], eax
.text:000022EE                 mov     ecx, [ebp+var_8]
.text:000022F1                 cmp     dword ptr [ecx+4], 0
.text:000022F5                 jnz     short loc_2321
.text:000022F7                 cmp     [ebp+arg_4], 52h ; 'R'
.text:000022FB                 jnz     short loc_2312
.text:000022FD                 mov     edx, [ebp+var_8]
.text:00002300                 mov     eax, [edx+0Ch]
.text:00002303                 push    eax
.text:00002304                 mov     ecx, [ebp+var_4]
.text:00002307                 push    ecx
.text:00002308                 call    _share_remove_forwarding
.text:0000230D                 add     esp, 8
.text:00002310                 jmp     short loc_231F
.text:00002312 ; ---------------------------------------------------------------------------
.text:00002312
.text:00002312 loc_2312:                               ; CODE XREF: _share_got_pkt_from_server+6Fj
.text:00002312                 mov     edx, [ebp+var_8]
.text:00002315                 mov     eax, [edx+0Ch]
.text:00002318                 mov     dword ptr [eax+8], 1
.text:0000231F
.text:0000231F loc_231F:                               ; CODE XREF: _share_got_pkt_from_server+84j
.text:0000231F                 jmp     short loc_2343
.text:00002321 ; ---------------------------------------------------------------------------
.text:00002321
.text:00002321 loc_2321:                               ; CODE XREF: _share_got_pkt_from_server+69j
.text:00002321                 mov     ecx, [ebp+var_8]
.text:00002324                 cmp     dword ptr [ecx+4], 1
.text:00002328                 jnz     short loc_2343
.text:0000232A                 cmp     [ebp+arg_4], 51h ; 'Q'
.text:0000232E                 jnz     short loc_2343
.text:00002330                 mov     edx, [ebp+var_8]
.text:00002333                 mov     eax, [edx+0Ch]
.text:00002336                 push    eax
.text:00002337                 mov     ecx, [ebp+var_4]
.text:0000233A                 push    ecx
.text:0000233B                 call    _share_remove_forwarding
.text:00002340                 add     esp, 8
.text:00002343
.text:00002343 loc_2343:                               ; CODE XREF: _share_got_pkt_from_server:loc_231Fj
.text:00002343                                         ; _share_got_pkt_from_server+9Cj ...
.text:00002343                 mov     edx, [ebp+var_8]
.text:00002346                 cmp     dword ptr [edx+8], 0
.text:0000234A                 jz      short loc_2366
.text:0000234C                 push    0
.text:0000234E                 mov     eax, [ebp+Size]
.text:00002351                 push    eax
.text:00002352                 mov     ecx, [ebp+Src]
.text:00002355                 push    ecx
.text:00002356                 mov     edx, [ebp+arg_4]
.text:00002359                 push    edx
.text:0000235A                 mov     eax, [ebp+var_4]
.text:0000235D                 push    eax
.text:0000235E                 call    _send_packet_to_downstream
.text:00002363                 add     esp, 14h
.text:00002366
.text:00002366 loc_2366:                               ; CODE XREF: _share_got_pkt_from_server+BEj
.text:00002366                 mov     ecx, [ebp+var_4]
.text:00002369                 mov     edx, [ebp+var_8]
.text:0000236C                 mov     eax, [edx]
.text:0000236E                 mov     [ecx+404Ch], eax
.text:00002374                 mov     ecx, [ebp+var_8]
.text:00002377                 push    ecx
.text:00002378                 call    _safefree
.text:0000237D                 add     esp, 4
.text:00002380                 mov     edx, [ebp+var_4]
.text:00002383                 cmp     dword ptr [edx+404Ch], 0
.text:0000238A                 jnz     short loc_2399
.text:0000238C                 mov     eax, [ebp+var_4]
.text:0000238F                 mov     dword ptr [eax+4050h], 0
.text:00002399
.text:00002399 loc_2399:                               ; CODE XREF: _share_got_pkt_from_server+FEj
.text:00002399                 mov     ecx, [ebp+var_4]
.text:0000239C                 cmp     dword ptr [ecx+8], 0
.text:000023A0                 jnz     short loc_23AE
.text:000023A2                 mov     edx, [ebp+var_4]
.text:000023A5                 push    edx
.text:000023A6                 call    _share_try_cleanup
.text:000023AB                 add     esp, 4
.text:000023AE
.text:000023AE loc_23AE:                               ; CODE XREF: _share_got_pkt_from_server+114j
.text:000023AE                 jmp     loc_267D
.text:000023B3 ; ---------------------------------------------------------------------------
.text:000023B3
.text:000023B3 $LN17_0:                                ; CODE XREF: _share_got_pkt_from_server+4Fj
.text:000023B3                                         ; DATA XREF: .text:$LN36o
.text:000023B3                 mov     eax, [ebp+Size] ; jumptable 000022DB case 9
.text:000023B6                 push    eax
.text:000023B7                 mov     ecx, [ebp+Src]
.text:000023BA                 push    ecx
.text:000023BB                 call    _getstring_size
.text:000023C0                 add     esp, 8
.text:000023C3                 mov     [ebp+var_C], eax
.text:000023C6                 cmp     [ebp+var_C], 0
.text:000023CA                 jge     short loc_23E3
.text:000023CC                 push    4B3h            ; Line
.text:000023D1                 push    offset $SG87881 ; "..\\..\\..\\sshshare.c"
.text:000023D6                 push    offset $SG87882 ; "id_pos >= 0"
.text:000023DB                 call    __wassert
.text:000023E0 ; ---------------------------------------------------------------------------
.text:000023E0                 add     esp, 0Ch
.text:000023E3
.text:000023E3 loc_23E3:                               ; CODE XREF: _share_got_pkt_from_server+13Ej
.text:000023E3                 mov     eax, [ebp+Src]
.text:000023E6                 add     eax, [ebp+var_C]
.text:000023E9                 movzx   ecx, byte ptr [eax]
.text:000023EC                 shl     ecx, 18h
.text:000023EF                 mov     edx, [ebp+Src]
.text:000023F2                 add     edx, [ebp+var_C]
.text:000023F5                 movzx   eax, byte ptr [edx+1]
.text:000023F9                 shl     eax, 10h
.text:000023FC                 or      ecx, eax
.text:000023FE                 mov     edx, [ebp+Src]
.text:00002401                 add     edx, [ebp+var_C]
.text:00002404                 movzx   eax, byte ptr [edx+2]
.text:00002408                 shl     eax, 8
.text:0000240B                 or      ecx, eax
.text:0000240D                 mov     edx, [ebp+Src]
.text:00002410                 add     edx, [ebp+var_C]
.text:00002413                 movzx   eax, byte ptr [edx+3]
.text:00002417                 or      ecx, eax
.text:00002419                 mov     [ebp+var_14], ecx
.text:0000241C                 mov     ecx, [ebp+var_14]
.text:0000241F                 push    ecx
.text:00002420                 mov     edx, [ebp+var_4]
.text:00002423                 push    edx
.text:00002424                 call    _share_add_halfchannel
.text:00002429                 add     esp, 8
.text:0000242C                 push    0
.text:0000242E                 mov     eax, [ebp+Size]
.text:00002431                 push    eax
.text:00002432                 mov     ecx, [ebp+Src]
.text:00002435                 push    ecx
.text:00002436                 mov     edx, [ebp+arg_4]
.text:00002439                 push    edx
.text:0000243A                 mov     eax, [ebp+var_4]
.text:0000243D                 push    eax
.text:0000243E                 call    _send_packet_to_downstream
.text:00002443                 add     esp, 14h
.text:00002446                 jmp     loc_267D
.text:0000244B ; ---------------------------------------------------------------------------
.text:0000244B
.text:0000244B $LN16_1:                                ; CODE XREF: _share_got_pkt_from_server+4Fj
.text:0000244B                                         ; DATA XREF: .text:$LN36o
.text:0000244B                 cmp     [ebp+Size], 4   ; jumptable 000022DB cases 10-19
.text:0000244F                 jge     short loc_2468
.text:00002451                 push    4C9h            ; Line
.text:00002456                 push    offset $SG87894 ; "..\\..\\..\\sshshare.c"
.text:0000245B                 push    offset $SG87895 ; "pktlen >= 4"
.text:00002460                 call    __wassert
.text:00002465 ; ---------------------------------------------------------------------------
.text:00002465                 add     esp, 0Ch
.text:00002468
.text:00002468 loc_2468:                               ; CODE XREF: _share_got_pkt_from_server+1C3j
.text:00002468                 mov     edx, [ebp+Src]
.text:0000246B                 movzx   eax, byte ptr [edx]
.text:0000246E                 shl     eax, 18h
.text:00002471                 mov     ecx, [ebp+Src]
.text:00002474                 movzx   edx, byte ptr [ecx+1]
.text:00002478                 shl     edx, 10h
.text:0000247B                 or      eax, edx
.text:0000247D                 mov     ecx, [ebp+Src]
.text:00002480                 movzx   edx, byte ptr [ecx+2]
.text:00002484                 shl     edx, 8
.text:00002487                 or      eax, edx
.text:00002489                 mov     ecx, [ebp+Src]
.text:0000248C                 movzx   edx, byte ptr [ecx+3]
.text:00002490                 or      eax, edx
.text:00002492                 mov     [ebp+var_10], eax
.text:00002495                 mov     eax, [ebp+var_10]
.text:00002498                 push    eax
.text:00002499                 mov     ecx, [ebp+var_4]
.text:0000249C                 push    ecx
.text:0000249D                 call    _share_find_channel_by_upstream
.text:000024A2                 add     esp, 8
.text:000024A5                 mov     [ebp+var_18], eax
.text:000024A8                 cmp     [ebp+var_18], 0
.text:000024AC                 jz      loc_25FB
.text:000024B2                 mov     edx, [ebp+var_18]
.text:000024B5                 mov     eax, [edx]
.text:000024B7                 shr     eax, 18h
.text:000024BA                 mov     ecx, [ebp+Src]
.text:000024BD                 mov     [ecx], al
.text:000024BF                 mov     edx, [ebp+var_18]
.text:000024C2                 mov     eax, [edx]
.text:000024C4                 shr     eax, 10h
.text:000024C7                 mov     ecx, [ebp+Src]
.text:000024CA                 mov     [ecx+1], al
.text:000024CD                 mov     edx, [ebp+var_18]
.text:000024D0                 mov     eax, [edx]
.text:000024D2                 shr     eax, 8
.text:000024D5                 mov     ecx, [ebp+Src]
.text:000024D8                 mov     [ecx+2], al
.text:000024DB                 mov     edx, [ebp+Src]
.text:000024DE                 mov     eax, [ebp+var_18]
.text:000024E1                 mov     cl, [eax]
.text:000024E3                 mov     [edx+3], cl
.text:000024E6                 mov     edx, [ebp+var_18]
.text:000024E9                 push    edx
.text:000024EA                 mov     eax, [ebp+Size]
.text:000024ED                 push    eax
.text:000024EE                 mov     ecx, [ebp+Src]
.text:000024F1                 push    ecx
.text:000024F2                 mov     edx, [ebp+arg_4]
.text:000024F5                 push    edx
.text:000024F6                 mov     eax, [ebp+var_4]
.text:000024F9                 push    eax
.text:000024FA                 call    _send_packet_to_downstream
.text:000024FF                 add     esp, 14h
.text:00002502                 cmp     [ebp+arg_4], 5Bh ; '['
.text:00002506                 jnz     short loc_256F
.text:00002508                 mov     ecx, [ebp+var_18]
.text:0000250B                 cmp     dword ptr [ecx+10h], 3
.text:0000250F                 jnz     short loc_256A
.text:00002511                 cmp     [ebp+Size], 8
.text:00002515                 jl      short loc_256A
.text:00002517                 push    0
.text:00002519                 mov     edx, [ebp+Src]
.text:0000251C                 movzx   eax, byte ptr [edx+4]
.text:00002520                 shl     eax, 18h
.text:00002523                 mov     ecx, [ebp+Src]
.text:00002526                 movzx   edx, byte ptr [ecx+5]
.text:0000252A                 shl     edx, 10h
.text:0000252D                 or      eax, edx
.text:0000252F                 mov     ecx, [ebp+Src]
.text:00002532                 movzx   edx, byte ptr [ecx+6]
.text:00002536                 shl     edx, 8
.text:00002539                 or      eax, edx
.text:0000253B                 mov     ecx, [ebp+Src]
.text:0000253E                 movzx   edx, byte ptr [ecx+7]
.text:00002542                 or      eax, edx
.text:00002544                 push    eax
.text:00002545                 mov     eax, [ebp+var_18]
.text:00002548                 push    eax
.text:00002549                 mov     ecx, [ebp+var_4]
.text:0000254C                 push    ecx
.text:0000254D                 call    _share_channel_set_server_id
.text:00002552                 add     esp, 10h
.text:00002555                 mov     edx, [ebp+var_4]
.text:00002558                 cmp     dword ptr [edx+8], 0
.text:0000255C                 jnz     short loc_256A
.text:0000255E                 mov     eax, [ebp+var_4]
.text:00002561                 push    eax
.text:00002562                 call    _share_try_cleanup
.text:00002567                 add     esp, 4
.text:0000256A
.text:0000256A loc_256A:                               ; CODE XREF: _share_got_pkt_from_server+283j
.text:0000256A                                         ; _share_got_pkt_from_server+289j ...
.text:0000256A                 jmp     loc_25F9
.text:0000256F ; ---------------------------------------------------------------------------
.text:0000256F
.text:0000256F loc_256F:                               ; CODE XREF: _share_got_pkt_from_server+27Aj
.text:0000256F                 cmp     [ebp+arg_4], 5Ch ; '\'
.text:00002573                 jnz     short loc_25A0
.text:00002575                 mov     ecx, [ebp+var_18]
.text:00002578                 mov     edx, [ecx+4]
.text:0000257B                 push    edx
.text:0000257C                 mov     eax, [ebp+var_4]
.text:0000257F                 mov     ecx, [eax+0Ch]
.text:00002582                 mov     edx, [ecx+14h]
.text:00002585                 push    edx
.text:00002586                 call    _ssh_delete_sharing_channel
.text:0000258B                 add     esp, 8
.text:0000258E                 mov     eax, [ebp+var_18]
.text:00002591                 push    eax
.text:00002592                 mov     ecx, [ebp+var_4]
.text:00002595                 push    ecx
.text:00002596                 call    _share_remove_channel
.text:0000259B                 add     esp, 8
.text:0000259E                 jmp     short loc_25F9
.text:000025A0 ; ---------------------------------------------------------------------------
.text:000025A0
.text:000025A0 loc_25A0:                               ; CODE XREF: _share_got_pkt_from_server+2E7j
.text:000025A0                 cmp     [ebp+arg_4], 61h ; 'a'
.text:000025A4                 jnz     short loc_25F9
.text:000025A6                 mov     edx, [ebp+var_18]
.text:000025A9                 cmp     dword ptr [edx+10h], 1
.text:000025AD                 jnz     short loc_25EF
.text:000025AF                 mov     eax, [ebp+var_18]
.text:000025B2                 mov     ecx, [eax+4]
.text:000025B5                 push    ecx
.text:000025B6                 mov     edx, [ebp+var_4]
.text:000025B9                 mov     eax, [edx+0Ch]
.text:000025BC                 mov     ecx, [eax+14h]
.text:000025BF                 push    ecx
.text:000025C0                 call    _ssh_delete_sharing_channel
.text:000025C5                 add     esp, 8
.text:000025C8                 mov     edx, [ebp+var_18]
.text:000025CB                 push    edx
.text:000025CC                 mov     eax, [ebp+var_4]
.text:000025CF                 push    eax
.text:000025D0                 call    _share_remove_channel
.text:000025D5                 add     esp, 8
.text:000025D8                 mov     ecx, [ebp+var_4]
.text:000025DB                 cmp     dword ptr [ecx+8], 0
.text:000025DF                 jnz     short loc_25ED
.text:000025E1                 mov     edx, [ebp+var_4]
.text:000025E4                 push    edx
.text:000025E5                 call    _share_try_cleanup
.text:000025EA                 add     esp, 4
.text:000025ED
.text:000025ED loc_25ED:                               ; CODE XREF: _share_got_pkt_from_server+353j
.text:000025ED                 jmp     short loc_25F9
.text:000025EF ; ---------------------------------------------------------------------------
.text:000025EF
.text:000025EF loc_25EF:                               ; CODE XREF: _share_got_pkt_from_server+321j
.text:000025EF                 mov     eax, [ebp+var_18]
.text:000025F2                 mov     dword ptr [eax+10h], 2
.text:000025F9
.text:000025F9 loc_25F9:                               ; CODE XREF: _share_got_pkt_from_server:loc_256Aj
.text:000025F9                                         ; _share_got_pkt_from_server+312j ...
.text:000025F9                 jmp     short loc_265B
.text:000025FB ; ---------------------------------------------------------------------------
.text:000025FB
.text:000025FB loc_25FB:                               ; CODE XREF: _share_got_pkt_from_server+220j
.text:000025FB                 mov     ecx, [ebp+var_10]
.text:000025FE                 push    ecx
.text:000025FF                 mov     edx, [ebp+var_4]
.text:00002602                 push    edx
.text:00002603                 call    _share_find_xchannel_by_upstream
.text:00002608                 add     esp, 8
.text:0000260B                 mov     [ebp+var_1C], eax
.text:0000260E                 cmp     [ebp+var_1C], 0
.text:00002612                 jz      short loc_265B
.text:00002614                 mov     eax, [ebp+Size]
.text:00002617                 push    eax
.text:00002618                 mov     ecx, [ebp+arg_4]
.text:0000261B                 push    ecx
.text:0000261C                 mov     edx, [ebp+var_1C]
.text:0000261F                 push    edx
.text:00002620                 call    _share_xchannel_add_message
.text:00002625                 add     esp, 0Ch
.text:00002628                 mov     [ebp+var_20], eax
.text:0000262B                 mov     eax, [ebp+Size]
.text:0000262E                 push    eax             ; Size
.text:0000262F                 mov     ecx, [ebp+Src]
.text:00002632                 push    ecx             ; Src
.text:00002633                 mov     edx, [ebp+var_20]
.text:00002636                 mov     eax, [edx+8]
.text:00002639                 push    eax             ; Dst
.text:0000263A                 call    _memcpy
.text:0000263F                 add     esp, 0Ch
.text:00002642                 mov     ecx, [ebp+var_1C]
.text:00002645                 cmp     dword ptr [ecx+8], 0
.text:00002649                 jnz     short loc_265B
.text:0000264B                 mov     edx, [ebp+var_1C]
.text:0000264E                 push    edx
.text:0000264F                 mov     eax, [ebp+var_4]
.text:00002652                 push    eax
.text:00002653                 call    _share_dead_xchannel_respond
.text:00002658                 add     esp, 8
.text:0000265B
.text:0000265B loc_265B:                               ; CODE XREF: _share_got_pkt_from_server:loc_25F9j
.text:0000265B                                         ; _share_got_pkt_from_server+386j ...
.text:0000265B                 jmp     short loc_267D
.text:0000265D ; ---------------------------------------------------------------------------
.text:0000265D
.text:0000265D $LN1:                                   ; CODE XREF: _share_got_pkt_from_server+3Fj
.text:0000265D                                         ; _share_got_pkt_from_server+4Fj
.text:0000265D                                         ; DATA XREF: ...
.text:0000265D                 mov     ecx, offset $SG87935 ; jumptable 000022DB default case
.text:00002662                 test    ecx, ecx
.text:00002664                 jz      short loc_267D
.text:00002666                 push    505h            ; Line
.text:0000266B                 push    offset $SG87936 ; "..\\..\\..\\sshshare.c"
.text:00002670                 push    offset $SG87937 ; "!\"This packet type should never have c"...
.text:00002675                 call    __wassert
.text:0000267A ; ---------------------------------------------------------------------------
.text:0000267A                 add     esp, 0Ch
.text:0000267D
.text:0000267D loc_267D:                               ; CODE XREF: _share_got_pkt_from_server:loc_23AEj
.text:0000267D                                         ; _share_got_pkt_from_server+1BAj ...
.text:0000267D                 add     esp, 24h
.text:00002680                 cmp     ebp, esp
.text:00002682                 call    __RTC_CheckEsp
.text:00002687                 mov     esp, ebp
.text:00002689                 pop     ebp
.text:0000268A                 retn
.text:0000268A _share_got_pkt_from_server endp
.text:0000268A
.text:0000268A ; ---------------------------------------------------------------------------
.text:0000268B                 align 4
.text:0000268C $LN36           dd offset $LN27         ; DATA XREF: _share_got_pkt_from_server+4Fr
.text:0000268C                 dd offset $LN17_0       ; jump table for switch statement
.text:0000268C                 dd offset $LN16_1
.text:0000268C                 dd offset $LN1
.text:0000269C $LN35           db      0,     0,     3,     3
.text:0000269C                                         ; DATA XREF: _share_got_pkt_from_server+48r
.text:0000269C                 db      3,     3,     3,     3 ; indirect table for switch statement
.text:0000269C                 db      3,     1,     2,     2
.text:0000269C                 db      2,     2,     2,     2
.text:0000269C                 db      2,     2,     2,     2
.text:000026B0                 db 0Ch dup(0CCh)
.text:000026BC
.text:000026BC ; =============== S U B R O U T I N E =======================================
.text:000026BC
.text:000026BC ; Attributes: bp-based frame
.text:000026BC
.text:000026BC _share_add_halfchannel proc near        ; CODE XREF: _share_got_pkt_from_server+198p
.text:000026BC
.text:000026BC var_4           = dword ptr -4
.text:000026BC arg_0           = dword ptr  8
.text:000026BC arg_4           = dword ptr  0Ch
.text:000026BC
.text:000026BC                 push    ebp
.text:000026BD                 mov     ebp, esp
.text:000026BF                 push    ecx
.text:000026C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026C7                 push    4
.text:000026C9                 push    1
.text:000026CB                 call    _safemalloc
.text:000026D0                 add     esp, 8
.text:000026D3                 mov     [ebp+var_4], eax
.text:000026D6                 mov     eax, [ebp+var_4]
.text:000026D9                 mov     ecx, [ebp+arg_4]
.text:000026DC                 mov     [eax], ecx
.text:000026DE                 mov     edx, [ebp+var_4]
.text:000026E1                 push    edx
.text:000026E2                 mov     eax, [ebp+arg_0]
.text:000026E5                 mov     ecx, [eax+4034h]
.text:000026EB                 push    ecx
.text:000026EC                 call    _add234
.text:000026F1                 add     esp, 8
.text:000026F4                 cmp     eax, [ebp+var_4]
.text:000026F7                 jz      short loc_270B
.text:000026F9                 mov     edx, [ebp+var_4]
.text:000026FC                 push    edx
.text:000026FD                 call    _safefree
.text:00002702                 add     esp, 4
.text:00002705                 xor     eax, eax
.text:00002707                 jmp     short loc_270E
.text:00002709 ; ---------------------------------------------------------------------------
.text:00002709                 jmp     short loc_270E
.text:0000270B ; ---------------------------------------------------------------------------
.text:0000270B
.text:0000270B loc_270B:                               ; CODE XREF: _share_add_halfchannel+3Bj
.text:0000270B                 mov     eax, [ebp+var_4]
.text:0000270E
.text:0000270E loc_270E:                               ; CODE XREF: _share_add_halfchannel+4Bj
.text:0000270E                                         ; _share_add_halfchannel+4Dj
.text:0000270E                 add     esp, 4
.text:00002711                 cmp     ebp, esp
.text:00002713                 call    __RTC_CheckEsp
.text:00002718                 mov     esp, ebp
.text:0000271A                 pop     ebp
.text:0000271B                 retn
.text:0000271B _share_add_halfchannel endp
.text:0000271B
.text:0000271C
.text:0000271C ; =============== S U B R O U T I N E =======================================
.text:0000271C
.text:0000271C ; Attributes: bp-based frame
.text:0000271C
.text:0000271C _share_channel_set_server_id proc near  ; CODE XREF: _share_got_pkt_from_server+2C1p
.text:0000271C
.text:0000271C arg_0           = dword ptr  8
.text:0000271C arg_4           = dword ptr  0Ch
.text:0000271C arg_8           = dword ptr  10h
.text:0000271C arg_C           = dword ptr  14h
.text:0000271C
.text:0000271C                 push    ebp
.text:0000271D                 mov     ebp, esp
.text:0000271F                 mov     eax, [ebp+arg_4]
.text:00002722                 mov     ecx, [ebp+arg_8]
.text:00002725                 mov     [eax+8], ecx
.text:00002728                 mov     edx, [ebp+arg_4]
.text:0000272B                 mov     eax, [ebp+arg_C]
.text:0000272E                 mov     [edx+10h], eax
.text:00002731                 cmp     [ebp+arg_C], 3
.text:00002735                 jnz     short loc_274E
.text:00002737                 push    251h            ; Line
.text:0000273C                 push    offset $SG87377 ; "..\\..\\..\\sshshare.c"
.text:00002741                 push    offset $SG87378 ; "newstate != UNACKNOWLEDGED"
.text:00002746                 call    __wassert
.text:0000274B ; ---------------------------------------------------------------------------
.text:0000274B                 add     esp, 0Ch
.text:0000274E
.text:0000274E loc_274E:                               ; CODE XREF: _share_channel_set_server_id+19j
.text:0000274E                 mov     edx, [ebp+arg_4]
.text:00002751                 push    edx
.text:00002752                 mov     eax, [ebp+arg_0]
.text:00002755                 mov     ecx, [eax+403Ch]
.text:0000275B                 push    ecx
.text:0000275C                 call    _add234
.text:00002761                 add     esp, 8
.text:00002764                 cmp     ebp, esp
.text:00002766                 call    __RTC_CheckEsp
.text:0000276B                 pop     ebp
.text:0000276C                 retn
.text:0000276C _share_channel_set_server_id endp
.text:0000276C
.text:0000276C ; ---------------------------------------------------------------------------
.text:0000276D                 db 0Fh dup(0CCh)
.text:0000277C
.text:0000277C ; =============== S U B R O U T I N E =======================================
.text:0000277C
.text:0000277C ; Attributes: bp-based frame
.text:0000277C
.text:0000277C _share_find_channel_by_upstream proc near
.text:0000277C                                         ; CODE XREF: _share_got_pkt_from_server+211p
.text:0000277C
.text:0000277C var_30          = byte ptr -30h
.text:0000277C var_2C          = byte ptr -2Ch
.text:0000277C var_28          = dword ptr -28h
.text:0000277C arg_0           = dword ptr  8
.text:0000277C arg_4           = dword ptr  0Ch
.text:0000277C
.text:0000277C                 push    ebp
.text:0000277D                 mov     ebp, esp
.text:0000277F                 sub     esp, 30h
.text:00002782                 push    edi
.text:00002783                 lea     edi, [ebp+var_30]
.text:00002786                 mov     ecx, 0Ch
.text:0000278B                 mov     eax, 0CCCCCCCCh
.text:00002790                 rep stosd
.text:00002792                 mov     eax, [ebp+arg_4]
.text:00002795                 mov     [ebp+var_28], eax
.text:00002798                 push    0
.text:0000279A                 lea     ecx, [ebp+var_2C]
.text:0000279D                 push    ecx
.text:0000279E                 mov     edx, [ebp+arg_0]
.text:000027A1                 mov     eax, [edx+4038h]
.text:000027A7                 push    eax
.text:000027A8                 call    _find234
.text:000027AD                 add     esp, 0Ch
.text:000027B0                 push    edx
.text:000027B1                 mov     ecx, ebp
.text:000027B3                 push    eax
.text:000027B4                 lea     edx, $LN5_2
.text:000027BA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000027BF                 pop     eax
.text:000027C0                 pop     edx
.text:000027C1                 pop     edi
.text:000027C2                 add     esp, 30h
.text:000027C5                 cmp     ebp, esp
.text:000027C7                 call    __RTC_CheckEsp
.text:000027CC                 mov     esp, ebp
.text:000027CE                 pop     ebp
.text:000027CF                 retn
.text:000027CF _share_find_channel_by_upstream endp
.text:000027CF
.text:000027CF ; ---------------------------------------------------------------------------
.text:000027D0 $LN5_2          dd 1                    ; DATA XREF: _share_find_channel_by_upstream+38o
.text:000027D4                 dd offset $LN4_1
.text:000027D8 $LN4_1          dd 0FFFFFFD4h, 28h      ; DATA XREF: .text:000027D4o
.text:000027E0                 dd offset $LN3_0        ; "dummychan"
.text:000027E4 $LN3_0          db 'dummychan',0        ; DATA XREF: .text:000027E0o
.text:000027EE                 db 0Eh dup(0CCh)
.text:000027FC
.text:000027FC ; =============== S U B R O U T I N E =======================================
.text:000027FC
.text:000027FC ; Attributes: bp-based frame
.text:000027FC
.text:000027FC _share_find_xchannel_by_upstream proc near
.text:000027FC                                         ; CODE XREF: _share_got_pkt_from_server+377p
.text:000027FC
.text:000027FC var_20          = dword ptr -20h
.text:000027FC var_1C          = dword ptr -1Ch
.text:000027FC var_18          = dword ptr -18h
.text:000027FC var_14          = dword ptr -14h
.text:000027FC var_10          = dword ptr -10h
.text:000027FC var_C           = dword ptr -0Ch
.text:000027FC var_8           = dword ptr -8
.text:000027FC var_4           = dword ptr -4
.text:000027FC arg_0           = dword ptr  8
.text:000027FC arg_4           = dword ptr  0Ch
.text:000027FC
.text:000027FC                 push    ebp
.text:000027FD                 mov     ebp, esp
.text:000027FF                 sub     esp, 20h
.text:00002802                 mov     eax, 0CCCCCCCCh
.text:00002807                 mov     [ebp+var_20], eax
.text:0000280A                 mov     [ebp+var_1C], eax
.text:0000280D                 mov     [ebp+var_18], eax
.text:00002810                 mov     [ebp+var_14], eax
.text:00002813                 mov     [ebp+var_10], eax
.text:00002816                 mov     [ebp+var_C], eax
.text:00002819                 mov     [ebp+var_8], eax
.text:0000281C                 mov     [ebp+var_4], eax
.text:0000281F                 mov     eax, [ebp+arg_4]
.text:00002822                 mov     [ebp+var_1C], eax
.text:00002825                 push    0
.text:00002827                 lea     ecx, [ebp+var_1C]
.text:0000282A                 push    ecx
.text:0000282B                 mov     edx, [ebp+arg_0]
.text:0000282E                 mov     eax, [edx+4040h]
.text:00002834                 push    eax
.text:00002835                 call    _find234
.text:0000283A                 add     esp, 0Ch
.text:0000283D                 push    edx
.text:0000283E                 mov     ecx, ebp
.text:00002840                 push    eax
.text:00002841                 lea     edx, $LN5_3
.text:00002847                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000284C                 pop     eax
.text:0000284D                 pop     edx
.text:0000284E                 add     esp, 20h
.text:00002851                 cmp     ebp, esp
.text:00002853                 call    __RTC_CheckEsp
.text:00002858                 mov     esp, ebp
.text:0000285A                 pop     ebp
.text:0000285B                 retn
.text:0000285B _share_find_xchannel_by_upstream endp
.text:0000285B
.text:0000285B ; ---------------------------------------------------------------------------
.text:0000285C $LN5_3          dd 1                    ; DATA XREF: _share_find_xchannel_by_upstream+45o
.text:00002860                 dd offset $LN4_2
.text:00002864 $LN4_2          dd 0FFFFFFE4h, 18h      ; DATA XREF: .text:00002860o
.text:0000286C                 dd offset $LN3_1        ; "dummyxc"
.text:00002870 $LN3_1          db 'dummyxc',0          ; DATA XREF: .text:0000286Co
.text:00002878                 db 4 dup(0CCh)
.text:0000287C
.text:0000287C ; =============== S U B R O U T I N E =======================================
.text:0000287C
.text:0000287C ; Attributes: bp-based frame
.text:0000287C
.text:0000287C _share_receive  proc near               ; DATA XREF: .rdata:00000968o
.text:0000287C
.text:0000287C var_1C          = dword ptr -1Ch
.text:0000287C var_18          = dword ptr -18h
.text:0000287C var_14          = dword ptr -14h
.text:0000287C Str             = dword ptr -10h
.text:0000287C var_C           = dword ptr -0Ch
.text:0000287C var_8           = dword ptr -8
.text:0000287C var_4           = dword ptr -4
.text:0000287C arg_0           = dword ptr  8
.text:0000287C arg_8           = dword ptr  10h
.text:0000287C arg_C           = dword ptr  14h
.text:0000287C
.text:0000287C                 push    ebp
.text:0000287D                 mov     ebp, esp
.text:0000287F                 sub     esp, 1Ch
.text:00002882                 mov     eax, 0CCCCCCCCh
.text:00002887                 mov     [ebp+var_1C], eax
.text:0000288A                 mov     [ebp+var_18], eax
.text:0000288D                 mov     [ebp+var_14], eax
.text:00002890                 mov     [ebp+Str], eax
.text:00002893                 mov     [ebp+var_C], eax
.text:00002896                 mov     [ebp+var_8], eax
.text:00002899                 mov     [ebp+var_4], eax
.text:0000289C                 mov     eax, [ebp+arg_0]
.text:0000289F                 mov     [ebp+var_4], eax
.text:000028A2                 mov     ecx, [ebp+var_4]
.text:000028A5                 add     ecx, 10h
.text:000028A8                 mov     [ebp+var_C], ecx
.text:000028AB                 mov     edx, [ebp+var_4]
.text:000028AE                 mov     eax, [edx+10h]
.text:000028B1                 mov     [ebp+var_1C], eax
.text:000028B4                 cmp     [ebp+var_1C], 719h
.text:000028BB                 jg      short loc_28DE
.text:000028BD                 cmp     [ebp+var_1C], 719h
.text:000028C4                 jz      loc_2AB7
.text:000028CA                 cmp     [ebp+var_1C], 0
.text:000028CE                 jz      short loc_28F0
.text:000028D0                 cmp     [ebp+var_1C], 6F5h
.text:000028D7                 jz      short loc_2923
.text:000028D9                 jmp     $dead$88297
.text:000028DE ; ---------------------------------------------------------------------------
.text:000028DE
.text:000028DE loc_28DE:                               ; CODE XREF: _share_receive+3Fj
.text:000028DE                 cmp     [ebp+var_1C], 726h
.text:000028E5                 jz      loc_2BB5
.text:000028EB                 jmp     $dead$88297
.text:000028F0 ; ---------------------------------------------------------------------------
.text:000028F0
.text:000028F0 loc_28F0:                               ; CODE XREF: _share_receive+52j
.text:000028F0                 mov     ecx, [ebp+var_4]
.text:000028F3                 mov     dword ptr [ecx+4030h], 0
.text:000028FD
.text:000028FD loc_28FD:                               ; CODE XREF: _share_receive+13Aj
.text:000028FD                 mov     edx, 1
.text:00002902                 test    edx, edx
.text:00002904                 jz      loc_29BB
.text:0000290A
.text:0000290A loc_290A:                               ; CODE XREF: _share_receive:loc_2923j
.text:0000290A                                         ; _share_receive+C5j
.text:0000290A                 cmp     [ebp+arg_C], 0
.text:0000290E                 jnz     short loc_2925
.text:00002910                 mov     eax, [ebp+var_C]
.text:00002913                 mov     dword ptr [eax], 6F5h
.text:00002919                 mov     eax, 1
.text:0000291E                 jmp     loc_2C3A
.text:00002923 ; ---------------------------------------------------------------------------
.text:00002923
.text:00002923 loc_2923:                               ; CODE XREF: _share_receive+5Bj
.text:00002923                 jmp     short loc_290A
.text:00002925 ; ---------------------------------------------------------------------------
.text:00002925
.text:00002925 loc_2925:                               ; CODE XREF: _share_receive+92j
.text:00002925                 mov     ecx, [ebp+arg_C]
.text:00002928                 sub     ecx, 1
.text:0000292B                 mov     [ebp+arg_C], ecx
.text:0000292E                 mov     edx, [ebp+arg_8]
.text:00002931                 mov     al, [edx]
.text:00002933                 mov     byte ptr [ebp+var_8+3], al
.text:00002936                 mov     ecx, [ebp+arg_8]
.text:00002939                 add     ecx, 1
.text:0000293C                 mov     [ebp+arg_8], ecx
.text:0000293F                 xor     edx, edx
.text:00002941                 jnz     short loc_290A
.text:00002943                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00002947                 cmp     eax, 0Ah
.text:0000294A                 jnz     short loc_294E
.text:0000294C                 jmp     short loc_29BB
.text:0000294E ; ---------------------------------------------------------------------------
.text:0000294E
.text:0000294E loc_294E:                               ; CODE XREF: _share_receive+CEj
.text:0000294E                 mov     ecx, [ebp+var_4]
.text:00002951                 cmp     dword ptr [ecx+4030h], 4010h
.text:0000295B                 jb      short loc_298E
.text:0000295D                 push    offset $SG88296 ; "Version string far too long\n"
.text:00002962                 call    _dupprintf
.text:00002967                 add     esp, 4
.text:0000296A                 mov     [ebp+Str], eax
.text:0000296D                 mov     edx, [ebp+Str]
.text:00002970                 push    edx             ; Str
.text:00002971                 mov     eax, [ebp+var_4]
.text:00002974                 push    eax             ; int
.text:00002975                 call    _share_disconnect
.text:0000297A                 add     esp, 8
.text:0000297D                 mov     ecx, [ebp+Str]
.text:00002980                 push    ecx
.text:00002981                 call    _safefree
.text:00002986                 add     esp, 4
.text:00002989                 jmp     $dead$88297
.text:0000298E ; ---------------------------------------------------------------------------
.text:0000298E
.text:0000298E loc_298E:                               ; CODE XREF: _share_receive+DFj
.text:0000298E                 mov     edx, [ebp+var_4]
.text:00002991                 mov     eax, [edx+4030h]
.text:00002997                 mov     ecx, [ebp+var_4]
.text:0000299A                 mov     dl, byte ptr [ebp+var_8+3]
.text:0000299D                 mov     [ecx+eax+20h], dl
.text:000029A1                 mov     eax, [ebp+var_4]
.text:000029A4                 mov     ecx, [eax+4030h]
.text:000029AA                 add     ecx, 1
.text:000029AD                 mov     edx, [ebp+var_4]
.text:000029B0                 mov     [edx+4030h], ecx
.text:000029B6                 jmp     loc_28FD
.text:000029BB ; ---------------------------------------------------------------------------
.text:000029BB
.text:000029BB loc_29BB:                               ; CODE XREF: _share_receive+88j
.text:000029BB                                         ; _share_receive+D0j
.text:000029BB                 mov     eax, [ebp+var_4]
.text:000029BE                 cmp     dword ptr [eax+4030h], 2Eh ; '.'
.text:000029C5                 jb      short loc_29E1
.text:000029C7                 push    2Eh ; '.'       ; Size
.text:000029C9                 push    offset ?expected_verstring_prefix@?1??share_receive@@9@9 ; "SSHCONNECTION@putty.projects.tartarus.o"...
.text:000029CE                 mov     ecx, [ebp+var_4]
.text:000029D1                 add     ecx, 20h ; ' '
.text:000029D4                 push    ecx             ; Buf1
.text:000029D5                 call    _memcmp
.text:000029DA                 add     esp, 0Ch
.text:000029DD                 test    eax, eax
.text:000029DF                 jz      short loc_2A12
.text:000029E1
.text:000029E1 loc_29E1:                               ; CODE XREF: _share_receive+149j
.text:000029E1                 push    offset $SG88301 ; "Version string did not have expected pr"...
.text:000029E6                 call    _dupprintf
.text:000029EB                 add     esp, 4
.text:000029EE                 mov     [ebp+var_14], eax
.text:000029F1                 mov     edx, [ebp+var_14]
.text:000029F4                 push    edx             ; Str
.text:000029F5                 mov     eax, [ebp+var_4]
.text:000029F8                 push    eax             ; int
.text:000029F9                 call    _share_disconnect
.text:000029FE                 add     esp, 8
.text:00002A01                 mov     ecx, [ebp+var_14]
.text:00002A04                 push    ecx
.text:00002A05                 call    _safefree
.text:00002A0A                 add     esp, 4
.text:00002A0D                 jmp     $dead$88297
.text:00002A12 ; ---------------------------------------------------------------------------
.text:00002A12
.text:00002A12 loc_2A12:                               ; CODE XREF: _share_receive+163j
.text:00002A12                 mov     edx, [ebp+var_4]
.text:00002A15                 cmp     dword ptr [edx+4030h], 0
.text:00002A1C                 jle     short loc_2A49
.text:00002A1E                 mov     eax, [ebp+var_4]
.text:00002A21                 mov     ecx, [eax+4030h]
.text:00002A27                 mov     edx, [ebp+var_4]
.text:00002A2A                 movzx   eax, byte ptr [edx+ecx+1Fh]
.text:00002A2F                 cmp     eax, 0Dh
.text:00002A32                 jnz     short loc_2A49
.text:00002A34                 mov     ecx, [ebp+var_4]
.text:00002A37                 mov     edx, [ecx+4030h]
.text:00002A3D                 sub     edx, 1
.text:00002A40                 mov     eax, [ebp+var_4]
.text:00002A43                 mov     [eax+4030h], edx
.text:00002A49
.text:00002A49 loc_2A49:                               ; CODE XREF: _share_receive+1A0j
.text:00002A49                                         ; _share_receive+1B6j
.text:00002A49                 mov     ecx, [ebp+var_4]
.text:00002A4C                 add     ecx, 20h ; ' '
.text:00002A4F                 push    ecx
.text:00002A50                 mov     edx, [ebp+var_4]
.text:00002A53                 mov     eax, [edx+4030h]
.text:00002A59                 push    eax
.text:00002A5A                 push    offset $SG88303 ; "Downstream version string: %.*s"
.text:00002A5F                 mov     ecx, [ebp+var_4]
.text:00002A62                 mov     edx, [ecx+4]
.text:00002A65                 push    edx
.text:00002A66                 mov     eax, [ebp+var_4]
.text:00002A69                 mov     ecx, [eax+0Ch]
.text:00002A6C                 mov     edx, [ecx+14h]
.text:00002A6F                 push    edx
.text:00002A70                 call    _ssh_sharing_logf
.text:00002A75                 add     esp, 14h
.text:00002A78
.text:00002A78 loc_2A78:                               ; CODE XREF: _share_receive+3ABj
.text:00002A78                 mov     eax, 1
.text:00002A7D                 test    eax, eax
.text:00002A7F                 jz      $dead$88297
.text:00002A85                 mov     ecx, [ebp+var_4]
.text:00002A88                 mov     dword ptr [ecx+4030h], 0
.text:00002A92
.text:00002A92 loc_2A92:                               ; CODE XREF: _share_receive+283j
.text:00002A92                 mov     edx, [ebp+var_4]
.text:00002A95                 cmp     dword ptr [edx+4030h], 4
.text:00002A9C                 jge     short loc_2B01
.text:00002A9E
.text:00002A9E loc_2A9E:                               ; CODE XREF: _share_receive:loc_2AB7j
.text:00002A9E                                         ; _share_receive+259j
.text:00002A9E                 cmp     [ebp+arg_C], 0
.text:00002AA2                 jnz     short loc_2AB9
.text:00002AA4                 mov     eax, [ebp+var_C]
.text:00002AA7                 mov     dword ptr [eax], 719h
.text:00002AAD                 mov     eax, 1
.text:00002AB2                 jmp     loc_2C3A
.text:00002AB7 ; ---------------------------------------------------------------------------
.text:00002AB7
.text:00002AB7 loc_2AB7:                               ; CODE XREF: _share_receive+48j
.text:00002AB7                 jmp     short loc_2A9E
.text:00002AB9 ; ---------------------------------------------------------------------------
.text:00002AB9
.text:00002AB9 loc_2AB9:                               ; CODE XREF: _share_receive+226j
.text:00002AB9                 mov     ecx, [ebp+arg_C]
.text:00002ABC                 sub     ecx, 1
.text:00002ABF                 mov     [ebp+arg_C], ecx
.text:00002AC2                 mov     edx, [ebp+arg_8]
.text:00002AC5                 mov     al, [edx]
.text:00002AC7                 mov     byte ptr [ebp+var_8+3], al
.text:00002ACA                 mov     ecx, [ebp+arg_8]
.text:00002ACD                 add     ecx, 1
.text:00002AD0                 mov     [ebp+arg_8], ecx
.text:00002AD3                 xor     edx, edx
.text:00002AD5                 jnz     short loc_2A9E
.text:00002AD7                 mov     eax, [ebp+var_4]
.text:00002ADA                 mov     ecx, [eax+4030h]
.text:00002AE0                 mov     edx, [ebp+var_4]
.text:00002AE3                 mov     al, byte ptr [ebp+var_8+3]
.text:00002AE6                 mov     [edx+ecx+20h], al
.text:00002AEA                 mov     ecx, [ebp+var_4]
.text:00002AED                 mov     edx, [ecx+4030h]
.text:00002AF3                 add     edx, 1
.text:00002AF6                 mov     eax, [ebp+var_4]
.text:00002AF9                 mov     [eax+4030h], edx
.text:00002AFF                 jmp     short loc_2A92
.text:00002B01 ; ---------------------------------------------------------------------------
.text:00002B01
.text:00002B01 loc_2B01:                               ; CODE XREF: _share_receive+220j
.text:00002B01                 mov     ecx, [ebp+var_4]
.text:00002B04                 movzx   edx, byte ptr [ecx+20h]
.text:00002B08                 shl     edx, 18h
.text:00002B0B                 mov     eax, [ebp+var_4]
.text:00002B0E                 movzx   ecx, byte ptr [eax+21h]
.text:00002B12                 shl     ecx, 10h
.text:00002B15                 or      edx, ecx
.text:00002B17                 mov     eax, [ebp+var_4]
.text:00002B1A                 movzx   ecx, byte ptr [eax+22h]
.text:00002B1E                 shl     ecx, 8
.text:00002B21                 or      edx, ecx
.text:00002B23                 mov     eax, [ebp+var_4]
.text:00002B26                 movzx   ecx, byte ptr [eax+23h]
.text:00002B2A                 or      edx, ecx
.text:00002B2C                 add     edx, 4
.text:00002B2F                 push    edx
.text:00002B30                 call    _toint
.text:00002B35                 add     esp, 4
.text:00002B38                 mov     edx, [ebp+var_4]
.text:00002B3B                 mov     [edx+1Ch], eax
.text:00002B3E                 mov     eax, [ebp+var_4]
.text:00002B41                 cmp     dword ptr [eax+1Ch], 5
.text:00002B45                 jl      short loc_2B53
.text:00002B47                 mov     ecx, [ebp+var_4]
.text:00002B4A                 cmp     dword ptr [ecx+1Ch], 4010h
.text:00002B51                 jbe     short loc_2B8B
.text:00002B53
.text:00002B53 loc_2B53:                               ; CODE XREF: _share_receive+2C9j
.text:00002B53                 mov     edx, [ebp+var_4]
.text:00002B56                 mov     eax, [edx+1Ch]
.text:00002B59                 push    eax
.text:00002B5A                 push    offset $SG88330 ; "Bad packet length %u\n"
.text:00002B5F                 call    _dupprintf
.text:00002B64                 add     esp, 8
.text:00002B67                 mov     [ebp+var_18], eax
.text:00002B6A                 mov     ecx, [ebp+var_18]
.text:00002B6D                 push    ecx             ; Str
.text:00002B6E                 mov     edx, [ebp+var_4]
.text:00002B71                 push    edx             ; int
.text:00002B72                 call    _share_disconnect
.text:00002B77                 add     esp, 8
.text:00002B7A                 mov     eax, [ebp+var_18]
.text:00002B7D                 push    eax
.text:00002B7E                 call    _safefree
.text:00002B83                 add     esp, 4
.text:00002B86                 jmp     $dead$88297
.text:00002B8B ; ---------------------------------------------------------------------------
.text:00002B8B
.text:00002B8B loc_2B8B:                               ; CODE XREF: _share_receive+2D5j
.text:00002B8B                                         ; _share_receive+381j
.text:00002B8B                 mov     ecx, [ebp+var_4]
.text:00002B8E                 mov     edx, [ebp+var_4]
.text:00002B91                 mov     eax, [ecx+4030h]
.text:00002B97                 cmp     eax, [edx+1Ch]
.text:00002B9A                 jge     short loc_2BFF
.text:00002B9C
.text:00002B9C loc_2B9C:                               ; CODE XREF: _share_receive:loc_2BB5j
.text:00002B9C                                         ; _share_receive+357j
.text:00002B9C                 cmp     [ebp+arg_C], 0
.text:00002BA0                 jnz     short loc_2BB7
.text:00002BA2                 mov     ecx, [ebp+var_C]
.text:00002BA5                 mov     dword ptr [ecx], 726h
.text:00002BAB                 mov     eax, 1
.text:00002BB0                 jmp     loc_2C3A
.text:00002BB5 ; ---------------------------------------------------------------------------
.text:00002BB5
.text:00002BB5 loc_2BB5:                               ; CODE XREF: _share_receive+69j
.text:00002BB5                 jmp     short loc_2B9C
.text:00002BB7 ; ---------------------------------------------------------------------------
.text:00002BB7
.text:00002BB7 loc_2BB7:                               ; CODE XREF: _share_receive+324j
.text:00002BB7                 mov     edx, [ebp+arg_C]
.text:00002BBA                 sub     edx, 1
.text:00002BBD                 mov     [ebp+arg_C], edx
.text:00002BC0                 mov     eax, [ebp+arg_8]
.text:00002BC3                 mov     cl, [eax]
.text:00002BC5                 mov     byte ptr [ebp+var_8+3], cl
.text:00002BC8                 mov     edx, [ebp+arg_8]
.text:00002BCB                 add     edx, 1
.text:00002BCE                 mov     [ebp+arg_8], edx
.text:00002BD1                 xor     eax, eax
.text:00002BD3                 jnz     short loc_2B9C
.text:00002BD5                 mov     ecx, [ebp+var_4]
.text:00002BD8                 mov     edx, [ecx+4030h]
.text:00002BDE                 mov     eax, [ebp+var_4]
.text:00002BE1                 mov     cl, byte ptr [ebp+var_8+3]
.text:00002BE4                 mov     [eax+edx+20h], cl
.text:00002BE8                 mov     edx, [ebp+var_4]
.text:00002BEB                 mov     eax, [edx+4030h]
.text:00002BF1                 add     eax, 1
.text:00002BF4                 mov     ecx, [ebp+var_4]
.text:00002BF7                 mov     [ecx+4030h], eax
.text:00002BFD                 jmp     short loc_2B8B
.text:00002BFF ; ---------------------------------------------------------------------------
.text:00002BFF
.text:00002BFF loc_2BFF:                               ; CODE XREF: _share_receive+31Ej
.text:00002BFF                 mov     edx, [ebp+var_4]
.text:00002C02                 mov     eax, [edx+4030h]
.text:00002C08                 sub     eax, 5
.text:00002C0B                 push    eax
.text:00002C0C                 mov     ecx, [ebp+var_4]
.text:00002C0F                 add     ecx, 25h ; '%'
.text:00002C12                 push    ecx
.text:00002C13                 mov     edx, [ebp+var_4]
.text:00002C16                 movzx   eax, byte ptr [edx+24h]
.text:00002C1A                 push    eax
.text:00002C1B                 mov     ecx, [ebp+var_4]
.text:00002C1E                 push    ecx
.text:00002C1F                 call    _share_got_pkt_from_downstream
.text:00002C24                 add     esp, 10h
.text:00002C27                 jmp     loc_2A78
.text:00002C2C ; ---------------------------------------------------------------------------
.text:00002C2C
.text:00002C2C $dead$88297:                            ; CODE XREF: _share_receive+5Dj
.text:00002C2C                                         ; _share_receive+6Fj ...
.text:00002C2C                 mov     edx, [ebp+var_C]
.text:00002C2F                 mov     dword ptr [edx], 0
.text:00002C35                 mov     eax, 1
.text:00002C3A
.text:00002C3A loc_2C3A:                               ; CODE XREF: _share_receive+A2j
.text:00002C3A                                         ; _share_receive+236j ...
.text:00002C3A                 add     esp, 1Ch
.text:00002C3D                 cmp     ebp, esp
.text:00002C3F                 call    __RTC_CheckEsp
.text:00002C44                 mov     esp, ebp
.text:00002C46                 pop     ebp
.text:00002C47                 retn
.text:00002C47 _share_receive  endp
.text:00002C47
.text:00002C47 ; ---------------------------------------------------------------------------
.text:00002C48                 db 4 dup(0CCh)
.text:00002C4C
.text:00002C4C ; =============== S U B R O U T I N E =======================================
.text:00002C4C
.text:00002C4C ; Attributes: bp-based frame
.text:00002C4C
.text:00002C4C ; int __cdecl share_disconnect(int, char *Str)
.text:00002C4C _share_disconnect proc near             ; CODE XREF: _share_receive+F9p
.text:00002C4C                                         ; _share_receive+17Dp ...
.text:00002C4C
.text:00002C4C var_C           = dword ptr -0Ch
.text:00002C4C var_8           = dword ptr -8
.text:00002C4C Size            = dword ptr -4
.text:00002C4C arg_0           = dword ptr  8
.text:00002C4C Str             = dword ptr  0Ch
.text:00002C4C
.text:00002C4C                 push    ebp
.text:00002C4D                 mov     ebp, esp
.text:00002C4F                 sub     esp, 0Ch
.text:00002C52                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002C59                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002C60                 mov     [ebp+Size], 0CCCCCCCCh
.text:00002C67                 mov     eax, [ebp+Str]
.text:00002C6A                 push    eax             ; Str
.text:00002C6B                 call    _strlen
.text:00002C70                 add     esp, 4
.text:00002C73                 mov     [ebp+Size], eax
.text:00002C76                 push    1
.text:00002C78                 mov     ecx, [ebp+Size]
.text:00002C7B                 add     ecx, 100h
.text:00002C81                 push    ecx
.text:00002C82                 call    _safemalloc
.text:00002C87                 add     esp, 8
.text:00002C8A                 mov     [ebp+var_8], eax
.text:00002C8D                 mov     [ebp+var_C], 0
.text:00002C94                 mov     edx, [ebp+var_8]
.text:00002C97                 add     edx, [ebp+var_C]
.text:00002C9A                 mov     byte ptr [edx], 0
.text:00002C9D                 mov     eax, [ebp+var_8]
.text:00002CA0                 add     eax, [ebp+var_C]
.text:00002CA3                 mov     byte ptr [eax+1], 0
.text:00002CA7                 mov     ecx, [ebp+var_8]
.text:00002CAA                 add     ecx, [ebp+var_C]
.text:00002CAD                 mov     byte ptr [ecx+2], 0
.text:00002CB1                 mov     edx, [ebp+var_8]
.text:00002CB4                 add     edx, [ebp+var_C]
.text:00002CB7                 mov     byte ptr [edx+3], 2
.text:00002CBB                 mov     eax, [ebp+var_C]
.text:00002CBE                 add     eax, 4
.text:00002CC1                 mov     [ebp+var_C], eax
.text:00002CC4                 mov     ecx, [ebp+Size]
.text:00002CC7                 sar     ecx, 18h
.text:00002CCA                 mov     edx, [ebp+var_8]
.text:00002CCD                 add     edx, [ebp+var_C]
.text:00002CD0                 mov     [edx], cl
.text:00002CD2                 mov     eax, [ebp+Size]
.text:00002CD5                 sar     eax, 10h
.text:00002CD8                 mov     ecx, [ebp+var_8]
.text:00002CDB                 add     ecx, [ebp+var_C]
.text:00002CDE                 mov     [ecx+1], al
.text:00002CE1                 mov     edx, [ebp+Size]
.text:00002CE4                 sar     edx, 8
.text:00002CE7                 mov     eax, [ebp+var_8]
.text:00002CEA                 add     eax, [ebp+var_C]
.text:00002CED                 mov     [eax+2], dl
.text:00002CF0                 mov     ecx, [ebp+var_8]
.text:00002CF3                 add     ecx, [ebp+var_C]
.text:00002CF6                 mov     dl, byte ptr [ebp+Size]
.text:00002CF9                 mov     [ecx+3], dl
.text:00002CFC                 mov     eax, [ebp+var_C]
.text:00002CFF                 add     eax, 4
.text:00002D02                 mov     [ebp+var_C], eax
.text:00002D05                 mov     ecx, [ebp+Size]
.text:00002D08                 push    ecx             ; Size
.text:00002D09                 mov     edx, [ebp+Str]
.text:00002D0C                 push    edx             ; Src
.text:00002D0D                 mov     eax, [ebp+var_8]
.text:00002D10                 add     eax, [ebp+var_C]
.text:00002D13                 push    eax             ; Dst
.text:00002D14                 call    _memcpy
.text:00002D19                 add     esp, 0Ch
.text:00002D1C                 mov     ecx, [ebp+var_C]
.text:00002D1F                 add     ecx, [ebp+Size]
.text:00002D22                 mov     [ebp+var_C], ecx
.text:00002D25                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002D2A                 call    _strlen
.text:00002D2F                 add     esp, 4
.text:00002D32                 shr     eax, 18h
.text:00002D35                 mov     edx, [ebp+var_8]
.text:00002D38                 add     edx, [ebp+var_C]
.text:00002D3B                 mov     [edx], al
.text:00002D3D                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002D42                 call    _strlen
.text:00002D47                 add     esp, 4
.text:00002D4A                 shr     eax, 10h
.text:00002D4D                 mov     ecx, [ebp+var_8]
.text:00002D50                 add     ecx, [ebp+var_C]
.text:00002D53                 mov     [ecx+1], al
.text:00002D56                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002D5B                 call    _strlen
.text:00002D60                 add     esp, 4
.text:00002D63                 shr     eax, 8
.text:00002D66                 mov     edx, [ebp+var_8]
.text:00002D69                 add     edx, [ebp+var_C]
.text:00002D6C                 mov     [edx+2], al
.text:00002D6F                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002D74                 call    _strlen
.text:00002D79                 add     esp, 4
.text:00002D7C                 mov     ecx, [ebp+var_8]
.text:00002D7F                 add     ecx, [ebp+var_C]
.text:00002D82                 mov     [ecx+3], al
.text:00002D85                 mov     edx, [ebp+var_C]
.text:00002D88                 add     edx, 4
.text:00002D8B                 mov     [ebp+var_C], edx
.text:00002D8E                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002D93                 call    _strlen
.text:00002D98                 add     esp, 4
.text:00002D9B                 push    eax             ; Size
.text:00002D9C                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002DA1                 mov     eax, [ebp+var_8]
.text:00002DA4                 add     eax, [ebp+var_C]
.text:00002DA7                 push    eax             ; Dst
.text:00002DA8                 call    _memcpy
.text:00002DAD                 add     esp, 0Ch
.text:00002DB0                 push    offset ?lang@?1??share_disconnect@@9@9 ; "en"
.text:00002DB5                 call    _strlen
.text:00002DBA                 add     esp, 4
.text:00002DBD                 add     eax, [ebp+var_C]
.text:00002DC0                 mov     [ebp+var_C], eax
.text:00002DC3                 push    0
.text:00002DC5                 mov     ecx, [ebp+var_C]
.text:00002DC8                 push    ecx
.text:00002DC9                 mov     edx, [ebp+var_8]
.text:00002DCC                 push    edx
.text:00002DCD                 push    1
.text:00002DCF                 mov     eax, [ebp+arg_0]
.text:00002DD2                 push    eax
.text:00002DD3                 call    _send_packet_to_downstream
.text:00002DD8                 add     esp, 14h
.text:00002DDB                 mov     ecx, [ebp+arg_0]
.text:00002DDE                 push    ecx
.text:00002DDF                 call    _share_begin_cleanup
.text:00002DE4                 add     esp, 4
.text:00002DE7                 add     esp, 0Ch
.text:00002DEA                 cmp     ebp, esp
.text:00002DEC                 call    __RTC_CheckEsp
.text:00002DF1                 mov     esp, ebp
.text:00002DF3                 pop     ebp
.text:00002DF4                 retn
.text:00002DF4 _share_disconnect endp
.text:00002DF4
.text:00002DF4 ; ---------------------------------------------------------------------------
.text:00002DF5                 db 7 dup(0CCh)
.text:00002DFC
.text:00002DFC ; =============== S U B R O U T I N E =======================================
.text:00002DFC
.text:00002DFC ; Attributes: bp-based frame
.text:00002DFC
.text:00002DFC _share_got_pkt_from_downstream proc near ; CODE XREF: _share_receive+3A3p
.text:00002DFC
.text:00002DFC var_B4          = dword ptr -0B4h
.text:00002DFC var_AC          = byte ptr -0ACh
.text:00002DFC var_AB          = byte ptr -0ABh
.text:00002DFC var_AA          = byte ptr -0AAh
.text:00002DFC var_A9          = byte ptr -0A9h
.text:00002DFC var_A4          = dword ptr -0A4h
.text:00002DFC var_A0          = dword ptr -0A0h
.text:00002DFC var_9C          = dword ptr -9Ch
.text:00002DFC Size            = dword ptr -98h
.text:00002DFC var_94          = dword ptr -94h
.text:00002DFC var_90          = dword ptr -90h
.text:00002DFC var_8C          = dword ptr -8Ch
.text:00002DFC var_88          = dword ptr -88h
.text:00002DFC var_84          = dword ptr -84h
.text:00002DFC var_80          = dword ptr -80h
.text:00002DFC var_7C          = dword ptr -7Ch
.text:00002DFC Str             = dword ptr -78h
.text:00002DFC var_70          = byte ptr -70h
.text:00002DFC var_6F          = byte ptr -6Fh
.text:00002DFC var_6E          = byte ptr -6Eh
.text:00002DFC var_6D          = byte ptr -6Dh
.text:00002DFC var_68          = dword ptr -68h
.text:00002DFC var_64          = dword ptr -64h
.text:00002DFC var_60          = dword ptr -60h
.text:00002DFC var_5C          = dword ptr -5Ch
.text:00002DFC var_58          = dword ptr -58h
.text:00002DFC var_54          = dword ptr -54h
.text:00002DFC var_50          = dword ptr -50h
.text:00002DFC var_4C          = dword ptr -4Ch
.text:00002DFC var_48          = dword ptr -48h
.text:00002DFC var_44          = dword ptr -44h
.text:00002DFC var_40          = dword ptr -40h
.text:00002DFC var_3C          = dword ptr -3Ch
.text:00002DFC var_38          = dword ptr -38h
.text:00002DFC var_34          = dword ptr -34h
.text:00002DFC var_30          = dword ptr -30h
.text:00002DFC var_2C          = dword ptr -2Ch
.text:00002DFC var_28          = dword ptr -28h
.text:00002DFC var_24          = dword ptr -24h
.text:00002DFC var_20          = dword ptr -20h
.text:00002DFC var_1C          = dword ptr -1Ch
.text:00002DFC var_18          = dword ptr -18h
.text:00002DFC var_14          = dword ptr -14h
.text:00002DFC var_10          = dword ptr -10h
.text:00002DFC var_C           = dword ptr -0Ch
.text:00002DFC var_8           = dword ptr -8
.text:00002DFC Str1            = dword ptr -4
.text:00002DFC arg_0           = dword ptr  8
.text:00002DFC arg_4           = dword ptr  0Ch
.text:00002DFC arg_8           = dword ptr  10h
.text:00002DFC arg_C           = dword ptr  14h
.text:00002DFC
.text:00002DFC                 push    ebp
.text:00002DFD                 mov     ebp, esp
.text:00002DFF                 sub     esp, 0B4h
.text:00002E05                 push    edi
.text:00002E06                 lea     edi, [ebp+var_B4]
.text:00002E0C                 mov     ecx, 2Dh ; '-'
.text:00002E11                 mov     eax, 0CCCCCCCCh
.text:00002E16                 rep stosd
.text:00002E18                 mov     [ebp+var_2C], 0
.text:00002E1F                 mov     eax, [ebp+arg_4]
.text:00002E22                 mov     [ebp+var_B4], eax
.text:00002E28                 mov     ecx, [ebp+var_B4]
.text:00002E2E                 sub     ecx, 1
.text:00002E31                 mov     [ebp+var_B4], ecx
.text:00002E37                 cmp     [ebp+var_B4], 63h ; 'c' ; switch 100 cases
.text:00002E3E                 ja      $LN1_0          ; jumptable 00002E51 default case
.text:00002E44                 mov     edx, [ebp+var_B4]
.text:00002E4A                 movzx   eax, ds:$LN69[edx]
.text:00002E51                 jmp     ds:$LN74[eax*4] ; switch jump
.text:00002E58 ; ---------------------------------------------------------------------------
.text:00002E58
.text:00002E58 $LN61:                                  ; CODE XREF: _share_got_pkt_from_downstream+55j
.text:00002E58                                         ; DATA XREF: .text:$LN74o
.text:00002E58                 mov     ecx, [ebp+arg_0] ; jumptable 00002E51 case 0
.text:00002E5B                 push    ecx
.text:00002E5C                 call    _share_begin_cleanup
.text:00002E61                 add     esp, 4
.text:00002E64                 jmp     loc_3F21
.text:00002E69 ; ---------------------------------------------------------------------------
.text:00002E69
.text:00002E69 $LN60:                                  ; CODE XREF: _share_got_pkt_from_downstream+55j
.text:00002E69                                         ; DATA XREF: .text:$LN74o
.text:00002E69                 mov     edx, [ebp+arg_C] ; jumptable 00002E51 case 79
.text:00002E6C                 push    edx
.text:00002E6D                 mov     eax, [ebp+arg_8]
.text:00002E70                 push    eax
.text:00002E71                 call    _getstring
.text:00002E76                 add     esp, 8
.text:00002E79                 mov     [ebp+Str1], eax
.text:00002E7C                 cmp     [ebp+Str1], 0
.text:00002E80                 jnz     short loc_2E97
.text:00002E82                 push    offset $SG87968 ; "Truncated GLOBAL_REQUEST packet"
.text:00002E87                 call    _dupprintf
.text:00002E8C                 add     esp, 4
.text:00002E8F                 mov     [ebp+var_2C], eax
.text:00002E92                 jmp     $confused$87969
.text:00002E97 ; ---------------------------------------------------------------------------
.text:00002E97
.text:00002E97 loc_2E97:                               ; CODE XREF: _share_got_pkt_from_downstream+84j
.text:00002E97                 push    offset $SG87971 ; "tcpip-forward"
.text:00002E9C                 mov     ecx, [ebp+Str1]
.text:00002E9F                 push    ecx             ; Str1
.text:00002EA0                 call    _strcmp
.text:00002EA5                 add     esp, 8
.text:00002EA8                 test    eax, eax
.text:00002EAA                 jnz     loc_30FE
.text:00002EB0                 mov     edx, [ebp+Str1]
.text:00002EB3                 push    edx
.text:00002EB4                 call    _safefree
.text:00002EB9                 add     esp, 4
.text:00002EBC                 mov     eax, [ebp+arg_C]
.text:00002EBF                 push    eax
.text:00002EC0                 mov     ecx, [ebp+arg_8]
.text:00002EC3                 push    ecx
.text:00002EC4                 call    _getstring_size
.text:00002EC9                 add     esp, 8
.text:00002ECC                 mov     [ebp+var_30], eax
.text:00002ECF                 cmp     [ebp+var_30], 0
.text:00002ED3                 jl      short loc_2EDD
.text:00002ED5                 mov     edx, [ebp+var_30]
.text:00002ED8                 cmp     edx, [ebp+arg_C]
.text:00002EDB                 jl      short loc_2EF2
.text:00002EDD
.text:00002EDD loc_2EDD:                               ; CODE XREF: _share_got_pkt_from_downstream+D7j
.text:00002EDD                 push    offset $SG87979 ; "Truncated GLOBAL_REQUEST packet"
.text:00002EE2                 call    _dupprintf
.text:00002EE7                 add     esp, 4
.text:00002EEA                 mov     [ebp+var_2C], eax
.text:00002EED                 jmp     $confused$87969
.text:00002EF2 ; ---------------------------------------------------------------------------
.text:00002EF2
.text:00002EF2 loc_2EF2:                               ; CODE XREF: _share_got_pkt_from_downstream+DFj
.text:00002EF2                 mov     eax, [ebp+arg_8]
.text:00002EF5                 add     eax, [ebp+var_30]
.text:00002EF8                 movzx   ecx, byte ptr [eax]
.text:00002EFB                 mov     [ebp+var_34], ecx
.text:00002EFE                 mov     edx, [ebp+var_30]
.text:00002F01                 add     edx, 1
.text:00002F04                 mov     eax, [ebp+arg_C]
.text:00002F07                 sub     eax, edx
.text:00002F09                 push    eax
.text:00002F0A                 mov     ecx, [ebp+var_30]
.text:00002F0D                 mov     edx, [ebp+arg_8]
.text:00002F10                 lea     eax, [edx+ecx+1]
.text:00002F14                 push    eax
.text:00002F15                 call    _getstring_size
.text:00002F1A                 add     esp, 8
.text:00002F1D                 mov     [ebp+var_38], eax
.text:00002F20                 mov     ecx, [ebp+var_30]
.text:00002F23                 mov     edx, [ebp+var_38]
.text:00002F26                 lea     eax, [edx+ecx+1]
.text:00002F2A                 mov     [ebp+var_38], eax
.text:00002F2D                 cmp     [ebp+var_38], 0
.text:00002F31                 jl      short loc_2F3E
.text:00002F33                 mov     ecx, [ebp+arg_C]
.text:00002F36                 sub     ecx, 4
.text:00002F39                 cmp     [ebp+var_38], ecx
.text:00002F3C                 jle     short loc_2F53
.text:00002F3E
.text:00002F3E loc_2F3E:                               ; CODE XREF: _share_got_pkt_from_downstream+135j
.text:00002F3E                 push    offset $SG87982 ; "Truncated GLOBAL_REQUEST packet"
.text:00002F43                 call    _dupprintf
.text:00002F48                 add     esp, 4
.text:00002F4B                 mov     [ebp+var_2C], eax
.text:00002F4E                 jmp     $confused$87969
.text:00002F53 ; ---------------------------------------------------------------------------
.text:00002F53
.text:00002F53 loc_2F53:                               ; CODE XREF: _share_got_pkt_from_downstream+140j
.text:00002F53                 mov     edx, [ebp+var_30]
.text:00002F56                 add     edx, 1
.text:00002F59                 mov     eax, [ebp+arg_C]
.text:00002F5C                 sub     eax, edx
.text:00002F5E                 push    eax
.text:00002F5F                 mov     ecx, [ebp+var_30]
.text:00002F62                 mov     edx, [ebp+arg_8]
.text:00002F65                 lea     eax, [edx+ecx+1]
.text:00002F69                 push    eax
.text:00002F6A                 call    _getstring
.text:00002F6F                 add     esp, 8
.text:00002F72                 mov     [ebp+var_40], eax
.text:00002F75                 cmp     [ebp+var_40], 0
.text:00002F79                 jnz     short loc_2F92
.text:00002F7B                 push    54Ah            ; Line
.text:00002F80                 push    offset $SG87985 ; "..\\..\\..\\sshshare.c"
.text:00002F85                 push    offset $SG87986 ; "host != NULL"
.text:00002F8A                 call    __wassert
.text:00002F8F ; ---------------------------------------------------------------------------
.text:00002F8F                 add     esp, 0Ch
.text:00002F92
.text:00002F92 loc_2F92:                               ; CODE XREF: _share_got_pkt_from_downstream+17Dj
.text:00002F92                 mov     edx, [ebp+arg_8]
.text:00002F95                 add     edx, [ebp+var_38]
.text:00002F98                 movzx   eax, byte ptr [edx]
.text:00002F9B                 shl     eax, 18h
.text:00002F9E                 mov     ecx, [ebp+arg_8]
.text:00002FA1                 add     ecx, [ebp+var_38]
.text:00002FA4                 movzx   edx, byte ptr [ecx+1]
.text:00002FA8                 shl     edx, 10h
.text:00002FAB                 or      eax, edx
.text:00002FAD                 mov     ecx, [ebp+arg_8]
.text:00002FB0                 add     ecx, [ebp+var_38]
.text:00002FB3                 movzx   edx, byte ptr [ecx+2]
.text:00002FB7                 shl     edx, 8
.text:00002FBA                 or      eax, edx
.text:00002FBC                 mov     ecx, [ebp+arg_8]
.text:00002FBF                 add     ecx, [ebp+var_38]
.text:00002FC2                 movzx   edx, byte ptr [ecx+3]
.text:00002FC6                 or      eax, edx
.text:00002FC8                 mov     [ebp+var_38], eax
.text:00002FCB                 mov     eax, [ebp+arg_0]
.text:00002FCE                 push    eax
.text:00002FCF                 mov     ecx, [ebp+var_38]
.text:00002FD2                 push    ecx
.text:00002FD3                 mov     edx, [ebp+var_40]
.text:00002FD6                 push    edx
.text:00002FD7                 mov     eax, [ebp+arg_0]
.text:00002FDA                 mov     ecx, [eax+0Ch]
.text:00002FDD                 mov     edx, [ecx+14h]
.text:00002FE0                 push    edx
.text:00002FE1                 call    _ssh_alloc_sharing_rportfwd
.text:00002FE6                 add     esp, 10h
.text:00002FE9                 mov     [ebp+var_3C], eax
.text:00002FEC                 cmp     [ebp+var_3C], 0
.text:00002FF0                 jnz     short loc_3014
.text:00002FF2                 cmp     [ebp+var_34], 0
.text:00002FF6                 jz      short loc_300F
.text:00002FF8                 push    0
.text:00002FFA                 push    0
.text:00002FFC                 push    offset $SG87998
.text:00003001                 push    52h ; 'R'
.text:00003003                 mov     eax, [ebp+arg_0]
.text:00003006                 push    eax
.text:00003007                 call    _send_packet_to_downstream
.text:0000300C                 add     esp, 14h
.text:0000300F
.text:0000300F loc_300F:                               ; CODE XREF: _share_got_pkt_from_downstream+1FAj
.text:0000300F                 jmp     loc_30ED
.text:00003014 ; ---------------------------------------------------------------------------
.text:00003014
.text:00003014 loc_3014:                               ; CODE XREF: _share_got_pkt_from_downstream+1F4j
.text:00003014                 mov     ecx, [ebp+arg_8]
.text:00003017                 add     ecx, [ebp+var_30]
.text:0000301A                 movzx   edx, byte ptr [ecx]
.text:0000301D                 mov     [ebp+var_44], edx
.text:00003020                 mov     eax, [ebp+arg_8]
.text:00003023                 add     eax, [ebp+var_30]
.text:00003026                 mov     byte ptr [eax], 1
.text:00003029                 mov     ecx, [ebp+var_44]
.text:0000302C                 neg     ecx
.text:0000302E                 sbb     ecx, ecx
.text:00003030                 not     ecx
.text:00003032                 and     ecx, offset $SG88002 ; "upstream added want_reply flag"
.text:00003038                 push    ecx
.text:00003039                 mov     edx, [ebp+arg_C]
.text:0000303C                 push    edx
.text:0000303D                 mov     eax, [ebp+arg_8]
.text:00003040                 push    eax
.text:00003041                 mov     ecx, [ebp+arg_4]
.text:00003044                 push    ecx
.text:00003045                 mov     edx, [ebp+arg_0]
.text:00003048                 mov     eax, [edx+4]
.text:0000304B                 push    eax
.text:0000304C                 mov     ecx, [ebp+arg_0]
.text:0000304F                 mov     edx, [ecx+0Ch]
.text:00003052                 mov     eax, [edx+14h]
.text:00003055                 push    eax
.text:00003056                 call    _ssh_send_packet_from_downstream
.text:0000305B                 add     esp, 18h
.text:0000305E                 mov     ecx, [ebp+var_38]
.text:00003061                 push    ecx
.text:00003062                 mov     edx, [ebp+var_40]
.text:00003065                 push    edx
.text:00003066                 mov     eax, [ebp+arg_0]
.text:00003069                 push    eax
.text:0000306A                 call    _share_add_forwarding
.text:0000306F                 add     esp, 0Ch
.text:00003072                 mov     [ebp+var_8], eax
.text:00003075                 mov     ecx, [ebp+arg_0]
.text:00003078                 push    ecx
.text:00003079                 mov     edx, [ebp+arg_0]
.text:0000307C                 mov     eax, [edx+0Ch]
.text:0000307F                 mov     ecx, [eax+14h]
.text:00003082                 push    ecx
.text:00003083                 call    _ssh_sharing_queue_global_request
.text:00003088                 add     esp, 8
.text:0000308B                 cmp     [ebp+var_8], 0
.text:0000308F                 jz      short loc_30ED
.text:00003091                 push    10h
.text:00003093                 push    1
.text:00003095                 call    _safemalloc
.text:0000309A                 add     esp, 8
.text:0000309D                 mov     [ebp+var_1C], eax
.text:000030A0                 mov     edx, [ebp+var_1C]
.text:000030A3                 mov     dword ptr [edx], 0
.text:000030A9                 mov     eax, [ebp+arg_0]
.text:000030AC                 cmp     dword ptr [eax+4050h], 0
.text:000030B3                 jz      short loc_30C5
.text:000030B5                 mov     ecx, [ebp+arg_0]
.text:000030B8                 mov     edx, [ecx+4050h]
.text:000030BE                 mov     eax, [ebp+var_1C]
.text:000030C1                 mov     [edx], eax
.text:000030C3                 jmp     short loc_30D1
.text:000030C5 ; ---------------------------------------------------------------------------
.text:000030C5
.text:000030C5 loc_30C5:                               ; CODE XREF: _share_got_pkt_from_downstream+2B7j
.text:000030C5                 mov     ecx, [ebp+arg_0]
.text:000030C8                 mov     edx, [ebp+var_1C]
.text:000030CB                 mov     [ecx+404Ch], edx
.text:000030D1
.text:000030D1 loc_30D1:                               ; CODE XREF: _share_got_pkt_from_downstream+2C7j
.text:000030D1                 mov     eax, [ebp+var_1C]
.text:000030D4                 mov     ecx, [ebp+var_8]
.text:000030D7                 mov     [eax+0Ch], ecx
.text:000030DA                 mov     edx, [ebp+var_1C]
.text:000030DD                 mov     eax, [ebp+var_34]
.text:000030E0                 mov     [edx+8], eax
.text:000030E3                 mov     ecx, [ebp+var_1C]
.text:000030E6                 mov     dword ptr [ecx+4], 0
.text:000030ED
.text:000030ED loc_30ED:                               ; CODE XREF: _share_got_pkt_from_downstream:loc_300Fj
.text:000030ED                                         ; _share_got_pkt_from_downstream+293j
.text:000030ED                 mov     edx, [ebp+var_40]
.text:000030F0                 push    edx
.text:000030F1                 call    _safefree
.text:000030F6                 add     esp, 4
.text:000030F9                 jmp     loc_3341
.text:000030FE ; ---------------------------------------------------------------------------
.text:000030FE
.text:000030FE loc_30FE:                               ; CODE XREF: _share_got_pkt_from_downstream+AEj
.text:000030FE                 push    offset $SG88011 ; "cancel-tcpip-forward"
.text:00003103                 mov     eax, [ebp+Str1]
.text:00003106                 push    eax             ; Str1
.text:00003107                 call    _strcmp
.text:0000310C                 add     esp, 8
.text:0000310F                 test    eax, eax
.text:00003111                 jnz     loc_32DB
.text:00003117                 mov     ecx, [ebp+Str1]
.text:0000311A                 push    ecx
.text:0000311B                 call    _safefree
.text:00003120                 add     esp, 4
.text:00003123                 mov     edx, [ebp+arg_C]
.text:00003126                 push    edx
.text:00003127                 mov     eax, [ebp+arg_8]
.text:0000312A                 push    eax
.text:0000312B                 call    _getstring_size
.text:00003130                 add     esp, 8
.text:00003133                 mov     [ebp+var_48], eax
.text:00003136                 cmp     [ebp+var_48], 0
.text:0000313A                 jl      short loc_3144
.text:0000313C                 mov     ecx, [ebp+var_48]
.text:0000313F                 cmp     ecx, [ebp+arg_C]
.text:00003142                 jl      short loc_3159
.text:00003144
.text:00003144 loc_3144:                               ; CODE XREF: _share_got_pkt_from_downstream+33Ej
.text:00003144                 push    offset $SG88019 ; "Truncated GLOBAL_REQUEST packet"
.text:00003149                 call    _dupprintf
.text:0000314E                 add     esp, 4
.text:00003151                 mov     [ebp+var_2C], eax
.text:00003154                 jmp     $confused$87969
.text:00003159 ; ---------------------------------------------------------------------------
.text:00003159
.text:00003159 loc_3159:                               ; CODE XREF: _share_got_pkt_from_downstream+346j
.text:00003159                 mov     edx, [ebp+arg_8]
.text:0000315C                 add     edx, [ebp+var_48]
.text:0000315F                 movzx   eax, byte ptr [edx]
.text:00003162                 mov     [ebp+var_4C], eax
.text:00003165                 mov     ecx, [ebp+var_48]
.text:00003168                 add     ecx, 1
.text:0000316B                 mov     edx, [ebp+arg_C]
.text:0000316E                 sub     edx, ecx
.text:00003170                 push    edx
.text:00003171                 mov     eax, [ebp+var_48]
.text:00003174                 mov     ecx, [ebp+arg_8]
.text:00003177                 lea     edx, [ecx+eax+1]
.text:0000317B                 push    edx
.text:0000317C                 call    _getstring_size
.text:00003181                 add     esp, 8
.text:00003184                 mov     [ebp+var_50], eax
.text:00003187                 mov     eax, [ebp+var_48]
.text:0000318A                 mov     ecx, [ebp+var_50]
.text:0000318D                 lea     edx, [ecx+eax+1]
.text:00003191                 mov     [ebp+var_50], edx
.text:00003194                 cmp     [ebp+var_50], 0
.text:00003198                 jl      short loc_31A5
.text:0000319A                 mov     eax, [ebp+arg_C]
.text:0000319D                 sub     eax, 4
.text:000031A0                 cmp     [ebp+var_50], eax
.text:000031A3                 jle     short loc_31BA
.text:000031A5
.text:000031A5 loc_31A5:                               ; CODE XREF: _share_got_pkt_from_downstream+39Cj
.text:000031A5                 push    offset $SG88022 ; "Truncated GLOBAL_REQUEST packet"
.text:000031AA                 call    _dupprintf
.text:000031AF                 add     esp, 4
.text:000031B2                 mov     [ebp+var_2C], eax
.text:000031B5                 jmp     $confused$87969
.text:000031BA ; ---------------------------------------------------------------------------
.text:000031BA
.text:000031BA loc_31BA:                               ; CODE XREF: _share_got_pkt_from_downstream+3A7j
.text:000031BA                 mov     ecx, [ebp+var_48]
.text:000031BD                 add     ecx, 1
.text:000031C0                 mov     edx, [ebp+arg_C]
.text:000031C3                 sub     edx, ecx
.text:000031C5                 push    edx
.text:000031C6                 mov     eax, [ebp+var_48]
.text:000031C9                 mov     ecx, [ebp+arg_8]
.text:000031CC                 lea     edx, [ecx+eax+1]
.text:000031D0                 push    edx
.text:000031D1                 call    _getstring
.text:000031D6                 add     esp, 8
.text:000031D9                 mov     [ebp+var_54], eax
.text:000031DC                 cmp     [ebp+var_54], 0
.text:000031E0                 jnz     short loc_31F9
.text:000031E2                 push    593h            ; Line
.text:000031E7                 push    offset $SG88025 ; "..\\..\\..\\sshshare.c"
.text:000031EC                 push    offset $SG88026 ; "host != NULL"
.text:000031F1                 call    __wassert
.text:000031F6 ; ---------------------------------------------------------------------------
.text:000031F6                 add     esp, 0Ch
.text:000031F9
.text:000031F9 loc_31F9:                               ; CODE XREF: _share_got_pkt_from_downstream+3E4j
.text:000031F9                 mov     ecx, [ebp+arg_8]
.text:000031FC                 add     ecx, [ebp+var_50]
.text:000031FF                 movzx   edx, byte ptr [ecx]
.text:00003202                 shl     edx, 18h
.text:00003205                 mov     eax, [ebp+arg_8]
.text:00003208                 add     eax, [ebp+var_50]
.text:0000320B                 movzx   ecx, byte ptr [eax+1]
.text:0000320F                 shl     ecx, 10h
.text:00003212                 or      edx, ecx
.text:00003214                 mov     eax, [ebp+arg_8]
.text:00003217                 add     eax, [ebp+var_50]
.text:0000321A                 movzx   ecx, byte ptr [eax+2]
.text:0000321E                 shl     ecx, 8
.text:00003221                 or      edx, ecx
.text:00003223                 mov     eax, [ebp+arg_8]
.text:00003226                 add     eax, [ebp+var_50]
.text:00003229                 movzx   ecx, byte ptr [eax+3]
.text:0000322D                 or      edx, ecx
.text:0000322F                 mov     [ebp+var_50], edx
.text:00003232                 mov     edx, [ebp+var_50]
.text:00003235                 push    edx
.text:00003236                 mov     eax, [ebp+var_54]
.text:00003239                 push    eax
.text:0000323A                 mov     ecx, [ebp+arg_0]
.text:0000323D                 push    ecx
.text:0000323E                 call    _share_find_forwarding
.text:00003243                 add     esp, 0Ch
.text:00003246                 mov     [ebp+var_58], eax
.text:00003249                 cmp     [ebp+var_58], 0
.text:0000324D                 jnz     short loc_326E
.text:0000324F                 cmp     [ebp+var_4C], 0
.text:00003253                 jz      short loc_326C
.text:00003255                 push    0
.text:00003257                 push    0
.text:00003259                 push    offset $SG88038
.text:0000325E                 push    52h ; 'R'
.text:00003260                 mov     edx, [ebp+arg_0]
.text:00003263                 push    edx
.text:00003264                 call    _send_packet_to_downstream
.text:00003269                 add     esp, 14h
.text:0000326C
.text:0000326C loc_326C:                               ; CODE XREF: _share_got_pkt_from_downstream+457j
.text:0000326C                 jmp     short loc_32CD
.text:0000326E ; ---------------------------------------------------------------------------
.text:0000326E
.text:0000326E loc_326E:                               ; CODE XREF: _share_got_pkt_from_downstream+451j
.text:0000326E                 mov     eax, [ebp+arg_8]
.text:00003271                 add     eax, [ebp+var_48]
.text:00003274                 movzx   ecx, byte ptr [eax]
.text:00003277                 mov     [ebp+var_5C], ecx
.text:0000327A                 mov     edx, [ebp+arg_8]
.text:0000327D                 add     edx, [ebp+var_48]
.text:00003280                 mov     byte ptr [edx], 1
.text:00003283                 mov     eax, [ebp+var_5C]
.text:00003286                 neg     eax
.text:00003288                 sbb     eax, eax
.text:0000328A                 not     eax
.text:0000328C                 and     eax, offset $SG88042 ; "upstream added want_reply flag"
.text:00003291                 push    eax
.text:00003292                 mov     ecx, [ebp+arg_C]
.text:00003295                 push    ecx
.text:00003296                 mov     edx, [ebp+arg_8]
.text:00003299                 push    edx
.text:0000329A                 mov     eax, [ebp+arg_4]
.text:0000329D                 push    eax
.text:0000329E                 mov     ecx, [ebp+arg_0]
.text:000032A1                 mov     edx, [ecx+4]
.text:000032A4                 push    edx
.text:000032A5                 mov     eax, [ebp+arg_0]
.text:000032A8                 mov     ecx, [eax+0Ch]
.text:000032AB                 mov     edx, [ecx+14h]
.text:000032AE                 push    edx
.text:000032AF                 call    _ssh_send_packet_from_downstream
.text:000032B4                 add     esp, 18h
.text:000032B7                 mov     eax, [ebp+arg_0]
.text:000032BA                 push    eax
.text:000032BB                 mov     ecx, [ebp+arg_0]
.text:000032BE                 mov     edx, [ecx+0Ch]
.text:000032C1                 mov     eax, [edx+14h]
.text:000032C4                 push    eax
.text:000032C5                 call    _ssh_sharing_queue_global_request
.text:000032CA                 add     esp, 8
.text:000032CD
.text:000032CD loc_32CD:                               ; CODE XREF: _share_got_pkt_from_downstream:loc_326Cj
.text:000032CD                 mov     ecx, [ebp+var_54]
.text:000032D0                 push    ecx
.text:000032D1                 call    _safefree
.text:000032D6                 add     esp, 4
.text:000032D9                 jmp     short loc_3341
.text:000032DB ; ---------------------------------------------------------------------------
.text:000032DB
.text:000032DB loc_32DB:                               ; CODE XREF: _share_got_pkt_from_downstream+315j
.text:000032DB                 mov     edx, [ebp+Str1]
.text:000032DE                 push    edx
.text:000032DF                 call    _safefree
.text:000032E4                 add     esp, 4
.text:000032E7                 mov     eax, [ebp+arg_C]
.text:000032EA                 push    eax
.text:000032EB                 mov     ecx, [ebp+arg_8]
.text:000032EE                 push    ecx
.text:000032EF                 call    _getstring_size
.text:000032F4                 add     esp, 8
.text:000032F7                 mov     [ebp+var_60], eax
.text:000032FA                 cmp     [ebp+var_60], 0
.text:000032FE                 jl      short loc_3308
.text:00003300                 mov     edx, [ebp+var_60]
.text:00003303                 cmp     edx, [ebp+arg_C]
.text:00003306                 jl      short loc_331D
.text:00003308
.text:00003308 loc_3308:                               ; CODE XREF: _share_got_pkt_from_downstream+502j
.text:00003308                 push    offset $SG88047 ; "Truncated GLOBAL_REQUEST packet"
.text:0000330D                 call    _dupprintf
.text:00003312                 add     esp, 4
.text:00003315                 mov     [ebp+var_2C], eax
.text:00003318                 jmp     $confused$87969
.text:0000331D ; ---------------------------------------------------------------------------
.text:0000331D
.text:0000331D loc_331D:                               ; CODE XREF: _share_got_pkt_from_downstream+50Aj
.text:0000331D                 mov     eax, [ebp+arg_8]
.text:00003320                 add     eax, [ebp+var_60]
.text:00003323                 movzx   ecx, byte ptr [eax]
.text:00003326                 test    ecx, ecx
.text:00003328                 jz      short loc_3341
.text:0000332A                 push    0
.text:0000332C                 push    0
.text:0000332E                 push    offset $SG88050
.text:00003333                 push    52h ; 'R'
.text:00003335                 mov     edx, [ebp+arg_0]
.text:00003338                 push    edx
.text:00003339                 call    _send_packet_to_downstream
.text:0000333E                 add     esp, 14h
.text:00003341
.text:00003341 loc_3341:                               ; CODE XREF: _share_got_pkt_from_downstream+2FDj
.text:00003341                                         ; _share_got_pkt_from_downstream+4DDj ...
.text:00003341                 jmp     loc_3F21
.text:00003346 ; ---------------------------------------------------------------------------
.text:00003346
.text:00003346 $LN34:                                  ; CODE XREF: _share_got_pkt_from_downstream+55j
.text:00003346                                         ; DATA XREF: .text:$LN74o
.text:00003346                 mov     eax, [ebp+arg_C] ; jumptable 00002E51 case 89
.text:00003349                 push    eax
.text:0000334A                 mov     ecx, [ebp+arg_8]
.text:0000334D                 push    ecx
.text:0000334E                 call    _getstring_size
.text:00003353                 add     esp, 8
.text:00003356                 mov     [ebp+var_C], eax
.text:00003359                 cmp     [ebp+var_C], 0
.text:0000335D                 jl      short loc_336A
.text:0000335F                 mov     edx, [ebp+arg_C]
.text:00003362                 sub     edx, 0Ch
.text:00003365                 cmp     [ebp+var_C], edx
.text:00003368                 jle     short loc_337F
.text:0000336A
.text:0000336A loc_336A:                               ; CODE XREF: _share_got_pkt_from_downstream+561j
.text:0000336A                 push    offset $SG88054 ; "Truncated CHANNEL_OPEN packet"
.text:0000336F                 call    _dupprintf
.text:00003374                 add     esp, 4
.text:00003377                 mov     [ebp+var_2C], eax
.text:0000337A                 jmp     $confused$87969
.text:0000337F ; ---------------------------------------------------------------------------
.text:0000337F
.text:0000337F loc_337F:                               ; CODE XREF: _share_got_pkt_from_downstream+56Cj
.text:0000337F                 mov     eax, [ebp+arg_8]
.text:00003382                 add     eax, [ebp+var_C]
.text:00003385                 movzx   ecx, byte ptr [eax]
.text:00003388                 shl     ecx, 18h
.text:0000338B                 mov     edx, [ebp+arg_8]
.text:0000338E                 add     edx, [ebp+var_C]
.text:00003391                 movzx   eax, byte ptr [edx+1]
.text:00003395                 shl     eax, 10h
.text:00003398                 or      ecx, eax
.text:0000339A                 mov     edx, [ebp+arg_8]
.text:0000339D                 add     edx, [ebp+var_C]
.text:000033A0                 movzx   eax, byte ptr [edx+2]
.text:000033A4                 shl     eax, 8
.text:000033A7                 or      ecx, eax
.text:000033A9                 mov     edx, [ebp+arg_8]
.text:000033AC                 add     edx, [ebp+var_C]
.text:000033AF                 movzx   eax, byte ptr [edx+3]
.text:000033B3                 or      ecx, eax
.text:000033B5                 mov     [ebp+var_10], ecx
.text:000033B8                 mov     ecx, [ebp+arg_0]
.text:000033BB                 push    ecx
.text:000033BC                 mov     edx, [ebp+arg_0]
.text:000033BF                 mov     eax, [edx+0Ch]
.text:000033C2                 mov     ecx, [eax+14h]
.text:000033C5                 push    ecx
.text:000033C6                 call    _ssh_alloc_sharing_channel
.text:000033CB                 add     esp, 8
.text:000033CE                 mov     [ebp+var_14], eax
.text:000033D1                 mov     edx, [ebp+arg_8]
.text:000033D4                 add     edx, [ebp+var_C]
.text:000033D7                 movzx   eax, byte ptr [edx+8]
.text:000033DB                 shl     eax, 18h
.text:000033DE                 mov     ecx, [ebp+arg_8]
.text:000033E1                 add     ecx, [ebp+var_C]
.text:000033E4                 movzx   edx, byte ptr [ecx+9]
.text:000033E8                 shl     edx, 10h
.text:000033EB                 or      eax, edx
.text:000033ED                 mov     ecx, [ebp+arg_8]
.text:000033F0                 add     ecx, [ebp+var_C]
.text:000033F3                 movzx   edx, byte ptr [ecx+0Ah]
.text:000033F7                 shl     edx, 8
.text:000033FA                 or      eax, edx
.text:000033FC                 mov     ecx, [ebp+arg_8]
.text:000033FF                 add     ecx, [ebp+var_C]
.text:00003402                 movzx   edx, byte ptr [ecx+0Bh]
.text:00003406                 or      eax, edx
.text:00003408                 push    eax
.text:00003409                 push    3
.text:0000340B                 push    0
.text:0000340D                 mov     eax, [ebp+var_14]
.text:00003410                 push    eax
.text:00003411                 mov     ecx, [ebp+var_10]
.text:00003414                 push    ecx
.text:00003415                 mov     edx, [ebp+arg_0]
.text:00003418                 push    edx
.text:00003419                 call    _share_add_channel
.text:0000341E                 add     esp, 18h
.text:00003421                 mov     eax, [ebp+var_14]
.text:00003424                 shr     eax, 18h
.text:00003427                 mov     ecx, [ebp+arg_8]
.text:0000342A                 add     ecx, [ebp+var_C]
.text:0000342D                 mov     [ecx], al
.text:0000342F                 mov     edx, [ebp+var_14]
.text:00003432                 shr     edx, 10h
.text:00003435                 mov     eax, [ebp+arg_8]
.text:00003438                 add     eax, [ebp+var_C]
.text:0000343B                 mov     [eax+1], dl
.text:0000343E                 mov     ecx, [ebp+var_14]
.text:00003441                 shr     ecx, 8
.text:00003444                 mov     edx, [ebp+arg_8]
.text:00003447                 add     edx, [ebp+var_C]
.text:0000344A                 mov     [edx+2], cl
.text:0000344D                 mov     eax, [ebp+arg_8]
.text:00003450                 add     eax, [ebp+var_C]
.text:00003453                 mov     cl, byte ptr [ebp+var_14]
.text:00003456                 mov     [eax+3], cl
.text:00003459                 push    0
.text:0000345B                 mov     edx, [ebp+arg_C]
.text:0000345E                 push    edx
.text:0000345F                 mov     eax, [ebp+arg_8]
.text:00003462                 push    eax
.text:00003463                 mov     ecx, [ebp+arg_4]
.text:00003466                 push    ecx
.text:00003467                 mov     edx, [ebp+arg_0]
.text:0000346A                 mov     eax, [edx+4]
.text:0000346D                 push    eax
.text:0000346E                 mov     ecx, [ebp+arg_0]
.text:00003471                 mov     edx, [ecx+0Ch]
.text:00003474                 mov     eax, [edx+14h]
.text:00003477                 push    eax
.text:00003478                 call    _ssh_send_packet_from_downstream
.text:0000347D                 add     esp, 18h
.text:00003480                 jmp     loc_3F21
.text:00003485 ; ---------------------------------------------------------------------------
.text:00003485
.text:00003485 $LN31:                                  ; CODE XREF: _share_got_pkt_from_downstream+55j
.text:00003485                                         ; DATA XREF: .text:$LN74o
.text:00003485                 cmp     [ebp+arg_C], 10h ; jumptable 00002E51 case 90
.text:00003489                 jge     short loc_34A0
.text:0000348B                 push    offset $SG88078 ; "Truncated CHANNEL_OPEN_CONFIRMATION pac"...
.text:00003490                 call    _dupprintf
.text:00003495                 add     esp, 4
.text:00003498                 mov     [ebp+var_2C], eax
.text:0000349B                 jmp     $confused$87969
.text:000034A0 ; ---------------------------------------------------------------------------
.text:000034A0
.text:000034A0 loc_34A0:                               ; CODE XREF: _share_got_pkt_from_downstream+68Dj
.text:000034A0                 mov     [ebp+var_C], 4
.text:000034A7                 mov     ecx, [ebp+arg_8]
.text:000034AA                 add     ecx, [ebp+var_C]
.text:000034AD                 movzx   edx, byte ptr [ecx]
.text:000034B0                 shl     edx, 18h
.text:000034B3                 mov     eax, [ebp+arg_8]
.text:000034B6                 add     eax, [ebp+var_C]
.text:000034B9                 movzx   ecx, byte ptr [eax+1]
.text:000034BD                 shl     ecx, 10h
.text:000034C0                 or      edx, ecx
.text:000034C2                 mov     eax, [ebp+arg_8]
.text:000034C5                 add     eax, [ebp+var_C]
.text:000034C8                 movzx   ecx, byte ptr [eax+2]
.text:000034CC                 shl     ecx, 8
.text:000034CF                 or      edx, ecx
.text:000034D1                 mov     eax, [ebp+arg_8]
.text:000034D4                 add     eax, [ebp+var_C]
.text:000034D7                 movzx   ecx, byte ptr [eax+3]
.text:000034DB                 or      edx, ecx
.text:000034DD                 mov     [ebp+var_10], edx
.text:000034E0                 mov     edx, [ebp+arg_8]
.text:000034E3                 movzx   eax, byte ptr [edx]
.text:000034E6                 shl     eax, 18h
.text:000034E9                 mov     ecx, [ebp+arg_8]
.text:000034EC                 movzx   edx, byte ptr [ecx+1]
.text:000034F0                 shl     edx, 10h
.text:000034F3                 or      eax, edx
.text:000034F5                 mov     ecx, [ebp+arg_8]
.text:000034F8                 movzx   edx, byte ptr [ecx+2]
.text:000034FC                 shl     edx, 8
.text:000034FF                 or      eax, edx
.text:00003501                 mov     ecx, [ebp+arg_8]
.text:00003504                 movzx   edx, byte ptr [ecx+3]
.text:00003508                 or      eax, edx
.text:0000350A                 mov     [ebp+var_18], eax
.text:0000350D                 mov     [ebp+var_24], 0
.text:00003514                 mov     [ebp+var_28], 0
.text:0000351B                 mov     eax, [ebp+var_18]
.text:0000351E                 push    eax
.text:0000351F                 mov     ecx, [ebp+arg_0]
.text:00003522                 push    ecx
.text:00003523                 call    _share_find_halfchannel
.text:00003528                 add     esp, 8
.text:0000352B                 mov     [ebp+var_24], eax
.text:0000352E                 cmp     [ebp+var_24], 0
.text:00003532                 jz      short loc_354F
.text:00003534                 mov     edx, [ebp+arg_0]
.text:00003537                 push    edx
.text:00003538                 mov     eax, [ebp+arg_0]
.text:0000353B                 mov     ecx, [eax+0Ch]
.text:0000353E                 mov     edx, [ecx+14h]
.text:00003541                 push    edx
.text:00003542                 call    _ssh_alloc_sharing_channel
.text:00003547                 add     esp, 8
.text:0000354A                 mov     [ebp+var_14], eax
.text:0000354D                 jmp     short loc_358B
.text:0000354F ; ---------------------------------------------------------------------------
.text:0000354F
.text:0000354F loc_354F:                               ; CODE XREF: _share_got_pkt_from_downstream+736j
.text:0000354F                 mov     eax, [ebp+var_18]
.text:00003552                 push    eax
.text:00003553                 mov     ecx, [ebp+arg_0]
.text:00003556                 push    ecx
.text:00003557                 call    _share_find_xchannel_by_server
.text:0000355C                 add     esp, 8
.text:0000355F                 mov     [ebp+var_28], eax
.text:00003562                 cmp     [ebp+var_28], 0
.text:00003566                 jz      short loc_3572
.text:00003568                 mov     edx, [ebp+var_28]
.text:0000356B                 mov     eax, [edx]
.text:0000356D                 mov     [ebp+var_14], eax
.text:00003570                 jmp     short loc_358B
.text:00003572 ; ---------------------------------------------------------------------------
.text:00003572
.text:00003572 loc_3572:                               ; CODE XREF: _share_got_pkt_from_downstream+76Aj
.text:00003572                 mov     ecx, [ebp+var_18]
.text:00003575                 push    ecx
.text:00003576                 push    offset $SG88104 ; "CHANNEL_OPEN_CONFIRMATION packet cited "...
.text:0000357B                 call    _dupprintf
.text:00003580                 add     esp, 8
.text:00003583                 mov     [ebp+var_2C], eax
.text:00003586                 jmp     $confused$87969
.text:0000358B ; ---------------------------------------------------------------------------
.text:0000358B
.text:0000358B loc_358B:                               ; CODE XREF: _share_got_pkt_from_downstream+751j
.text:0000358B                                         ; _share_got_pkt_from_downstream+774j
.text:0000358B                 mov     edx, [ebp+var_14]
.text:0000358E                 shr     edx, 18h
.text:00003591                 mov     eax, [ebp+arg_8]
.text:00003594                 add     eax, [ebp+var_C]
.text:00003597                 mov     [eax], dl
.text:00003599                 mov     ecx, [ebp+var_14]
.text:0000359C                 shr     ecx, 10h
.text:0000359F                 mov     edx, [ebp+arg_8]
.text:000035A2                 add     edx, [ebp+var_C]
.text:000035A5                 mov     [edx+1], cl
.text:000035A8                 mov     eax, [ebp+var_14]
.text:000035AB                 shr     eax, 8
.text:000035AE                 mov     ecx, [ebp+arg_8]
.text:000035B1                 add     ecx, [ebp+var_C]
.text:000035B4                 mov     [ecx+2], al
.text:000035B7                 mov     edx, [ebp+arg_8]
.text:000035BA                 add     edx, [ebp+var_C]
.text:000035BD                 mov     al, byte ptr [ebp+var_14]
.text:000035C0                 mov     [edx+3], al
.text:000035C3                 mov     ecx, [ebp+arg_8]
.text:000035C6                 movzx   edx, byte ptr [ecx+0Ch]
.text:000035CA                 shl     edx, 18h
.text:000035CD                 mov     eax, [ebp+arg_8]
.text:000035D0                 movzx   ecx, byte ptr [eax+0Dh]
.text:000035D4                 shl     ecx, 10h
.text:000035D7                 or      edx, ecx
.text:000035D9                 mov     eax, [ebp+arg_8]
.text:000035DC                 movzx   ecx, byte ptr [eax+0Eh]
.text:000035E0                 shl     ecx, 8
.text:000035E3                 or      edx, ecx
.text:000035E5                 mov     eax, [ebp+arg_8]
.text:000035E8                 movzx   ecx, byte ptr [eax+0Fh]
.text:000035EC                 or      edx, ecx
.text:000035EE                 push    edx
.text:000035EF                 push    0
.text:000035F1                 mov     edx, [ebp+var_18]
.text:000035F4                 push    edx
.text:000035F5                 mov     eax, [ebp+var_14]
.text:000035F8                 push    eax
.text:000035F9                 mov     ecx, [ebp+var_10]
.text:000035FC                 push    ecx
.text:000035FD                 mov     edx, [ebp+arg_0]
.text:00003600                 push    edx
.text:00003601                 call    _share_add_channel
.text:00003606                 add     esp, 18h
.text:00003609                 mov     [ebp+var_20], eax
.text:0000360C                 cmp     [ebp+var_24], 0
.text:00003610                 jz      short loc_364B
.text:00003612                 push    0
.text:00003614                 mov     eax, [ebp+arg_C]
.text:00003617                 push    eax
.text:00003618                 mov     ecx, [ebp+arg_8]
.text:0000361B                 push    ecx
.text:0000361C                 mov     edx, [ebp+arg_4]
.text:0000361F                 push    edx
.text:00003620                 mov     eax, [ebp+arg_0]
.text:00003623                 mov     ecx, [eax+4]
.text:00003626                 push    ecx
.text:00003627                 mov     edx, [ebp+arg_0]
.text:0000362A                 mov     eax, [edx+0Ch]
.text:0000362D                 mov     ecx, [eax+14h]
.text:00003630                 push    ecx
.text:00003631                 call    _ssh_send_packet_from_downstream
.text:00003636                 add     esp, 18h
.text:00003639                 mov     edx, [ebp+var_24]
.text:0000363C                 push    edx
.text:0000363D                 mov     eax, [ebp+arg_0]
.text:00003640                 push    eax
.text:00003641                 call    _share_remove_halfchannel
.text:00003646                 add     esp, 8
.text:00003649                 jmp     short loc_36C9
.text:0000364B ; ---------------------------------------------------------------------------
.text:0000364B
.text:0000364B loc_364B:                               ; CODE XREF: _share_got_pkt_from_downstream+814j
.text:0000364B                 cmp     [ebp+var_28], 0
.text:0000364F                 jz      short loc_36C9
.text:00003651                 mov     ecx, [ebp+arg_8]
.text:00003654                 movzx   edx, byte ptr [ecx+8]
.text:00003658                 shl     edx, 18h
.text:0000365B                 mov     eax, [ebp+arg_8]
.text:0000365E                 movzx   ecx, byte ptr [eax+9]
.text:00003662                 shl     ecx, 10h
.text:00003665                 or      edx, ecx
.text:00003667                 mov     eax, [ebp+arg_8]
.text:0000366A                 movzx   ecx, byte ptr [eax+0Ah]
.text:0000366E                 shl     ecx, 8
.text:00003671                 or      edx, ecx
.text:00003673                 mov     eax, [ebp+arg_8]
.text:00003676                 movzx   ecx, byte ptr [eax+0Bh]
.text:0000367A                 or      edx, ecx
.text:0000367C                 mov     [ebp+var_64], edx
.text:0000367F                 cmp     [ebp+var_64], 100h
.text:00003686                 jnb     short loc_36A1
.text:00003688                 mov     edx, [ebp+var_64]
.text:0000368B                 push    edx
.text:0000368C                 push    offset $SG88131 ; "Initial window size for x11 channel mus"...
.text:00003691                 call    _dupprintf
.text:00003696                 add     esp, 8
.text:00003699                 mov     [ebp+var_2C], eax
.text:0000369C                 jmp     $confused$87969
.text:000036A1 ; ---------------------------------------------------------------------------
.text:000036A1
.text:000036A1 loc_36A1:                               ; CODE XREF: _share_got_pkt_from_downstream+88Aj
.text:000036A1                 mov     eax, [ebp+var_64]
.text:000036A4                 push    eax
.text:000036A5                 mov     ecx, [ebp+var_20]
.text:000036A8                 push    ecx
.text:000036A9                 mov     edx, [ebp+var_28]
.text:000036AC                 push    edx
.text:000036AD                 mov     eax, [ebp+arg_0]
.text:000036B0                 push    eax
.text:000036B1                 call    _share_xchannel_confirmation
.text:000036B6                 add     esp, 10h
.text:000036B9                 mov     ecx, [ebp+var_28]
.text:000036BC                 push    ecx
.text:000036BD                 mov     edx, [ebp+arg_0]
.text:000036C0                 push    edx
.text:000036C1                 call    _share_remove_xchannel
.text:000036C6                 add     esp, 8
.text:000036C9
.text:000036C9 loc_36C9:                               ; CODE XREF: _share_got_pkt_from_downstream+84Dj
.text:000036C9                                         ; _share_got_pkt_from_downstream+853j
.text:000036C9                 jmp     loc_3F21
.text:000036CE ; ---------------------------------------------------------------------------
.text:000036CE
.text:000036CE $LN21:                                  ; CODE XREF: _share_got_pkt_from_downstream+55j
.text:000036CE                                         ; DATA XREF: .text:$LN74o
.text:000036CE                 cmp     [ebp+arg_C], 4  ; jumptable 00002E51 case 91
.text:000036D2                 jge     short loc_36E9
.text:000036D4                 push    offset $SG88134 ; "Truncated CHANNEL_OPEN_FAILURE packet"
.text:000036D9                 call    _dupprintf
.text:000036DE                 add     esp, 4
.text:000036E1                 mov     [ebp+var_2C], eax
.text:000036E4                 jmp     $confused$87969
.text:000036E9 ; ---------------------------------------------------------------------------
.text:000036E9
.text:000036E9 loc_36E9:                               ; CODE XREF: _share_got_pkt_from_downstream+8D6j
.text:000036E9                 mov     eax, [ebp+arg_8]
.text:000036EC                 movzx   ecx, byte ptr [eax]
.text:000036EF                 shl     ecx, 18h
.text:000036F2                 mov     edx, [ebp+arg_8]
.text:000036F5                 movzx   eax, byte ptr [edx+1]
.text:000036F9                 shl     eax, 10h
.text:000036FC                 or      ecx, eax
.text:000036FE                 mov     edx, [ebp+arg_8]
.text:00003701                 movzx   eax, byte ptr [edx+2]
.text:00003705                 shl     eax, 8
.text:00003708                 or      ecx, eax
.text:0000370A                 mov     edx, [ebp+arg_8]
.text:0000370D                 movzx   eax, byte ptr [edx+3]
.text:00003711                 or      ecx, eax
.text:00003713                 mov     [ebp+var_18], ecx
.text:00003716                 mov     ecx, [ebp+var_18]
.text:00003719                 push    ecx
.text:0000371A                 mov     edx, [ebp+arg_0]
.text:0000371D                 push    edx
.text:0000371E                 call    _share_find_halfchannel
.text:00003723                 add     esp, 8
.text:00003726                 mov     [ebp+var_24], eax
.text:00003729                 cmp     [ebp+var_24], 0
.text:0000372D                 jz      short loc_3768
.text:0000372F                 push    0
.text:00003731                 mov     eax, [ebp+arg_C]
.text:00003734                 push    eax
.text:00003735                 mov     ecx, [ebp+arg_8]
.text:00003738                 push    ecx
.text:00003739                 mov     edx, [ebp+arg_4]
.text:0000373C                 push    edx
.text:0000373D                 mov     eax, [ebp+arg_0]
.text:00003740                 mov     ecx, [eax+4]
.text:00003743                 push    ecx
.text:00003744                 mov     edx, [ebp+arg_0]
.text:00003747                 mov     eax, [edx+0Ch]
.text:0000374A                 mov     ecx, [eax+14h]
.text:0000374D                 push    ecx
.text:0000374E                 call    _ssh_send_packet_from_downstream
.text:00003753                 add     esp, 18h
.text:00003756                 mov     edx, [ebp+var_24]
.text:00003759                 push    edx
.text:0000375A                 mov     eax, [ebp+arg_0]
.text:0000375D                 push    eax
.text:0000375E                 call    _share_remove_halfchannel
.text:00003763                 add     esp, 8
.text:00003766                 jmp     short loc_37AC
.text:00003768 ; ---------------------------------------------------------------------------
.text:00003768
.text:00003768 loc_3768:                               ; CODE XREF: _share_got_pkt_from_downstream+931j
.text:00003768                 mov     ecx, [ebp+var_18]
.text:0000376B                 push    ecx
.text:0000376C                 mov     edx, [ebp+arg_0]
.text:0000376F                 push    edx
.text:00003770                 call    _share_find_xchannel_by_server
.text:00003775                 add     esp, 8
.text:00003778                 mov     [ebp+var_28], eax
.text:0000377B                 cmp     [ebp+var_28], 0
.text:0000377F                 jz      short loc_3793
.text:00003781                 mov     eax, [ebp+var_28]
.text:00003784                 push    eax
.text:00003785                 mov     ecx, [ebp+arg_0]
.text:00003788                 push    ecx
.text:00003789                 call    _share_xchannel_failure
.text:0000378E                 add     esp, 8
.text:00003791                 jmp     short loc_37AC
.text:00003793 ; ---------------------------------------------------------------------------
.text:00003793
.text:00003793 loc_3793:                               ; CODE XREF: _share_got_pkt_from_downstream+983j
.text:00003793                 mov     edx, [ebp+var_18]
.text:00003796                 push    edx
.text:00003797                 push    offset $SG88151 ; "CHANNEL_OPEN_FAILURE packet cited unkno"...
.text:0000379C                 call    _dupprintf
.text:000037A1                 add     esp, 8
.text:000037A4                 mov     [ebp+var_2C], eax
.text:000037A7                 jmp     $confused$87969
.text:000037AC ; ---------------------------------------------------------------------------
.text:000037AC
.text:000037AC loc_37AC:                               ; CODE XREF: _share_got_pkt_from_downstream+96Aj
.text:000037AC                                         ; _share_got_pkt_from_downstream+995j
.text:000037AC                 jmp     loc_3F21
.text:000037B1 ; ---------------------------------------------------------------------------
.text:000037B1
.text:000037B1 $LN15_0:                                ; CODE XREF: _share_got_pkt_from_downstream+55j
.text:000037B1                                         ; DATA XREF: .text:$LN74o
.text:000037B1                 cmp     [ebp+arg_4], 62h ; 'b' ; jumptable 00002E51 cases 1,3,92-99
.text:000037B5                 jnz     loc_3E13
.text:000037BB                 mov     eax, [ebp+arg_C]
.text:000037BE                 sub     eax, 4
.text:000037C1                 push    eax
.text:000037C2                 mov     ecx, [ebp+arg_8]
.text:000037C5                 add     ecx, 4
.text:000037C8                 push    ecx
.text:000037C9                 call    _getstring
.text:000037CE                 add     esp, 8
.text:000037D1                 mov     [ebp+Str1], eax
.text:000037D4                 cmp     [ebp+Str1], 0
.text:000037D8                 jz      loc_3E13
.text:000037DE                 push    offset $SG88156 ; "auth-agent-req@openssh.com"
.text:000037E3                 mov     edx, [ebp+Str1]
.text:000037E6                 push    edx             ; Str1
.text:000037E7                 call    _strcmp
.text:000037EC                 add     esp, 8
.text:000037EF                 test    eax, eax
.text:000037F1                 jnz     loc_38DE
.text:000037F7                 mov     eax, [ebp+arg_0]
.text:000037FA                 mov     ecx, [eax+0Ch]
.text:000037FD                 mov     edx, [ecx+14h]
.text:00003800                 push    edx
.text:00003801                 call    _ssh_agent_forwarding_permitted
.text:00003806                 add     esp, 4
.text:00003809                 test    eax, eax
.text:0000380B                 jnz     loc_38DE
.text:00003811                 mov     eax, [ebp+arg_8]
.text:00003814                 movzx   ecx, byte ptr [eax]
.text:00003817                 shl     ecx, 18h
.text:0000381A                 mov     edx, [ebp+arg_8]
.text:0000381D                 movzx   eax, byte ptr [edx+1]
.text:00003821                 shl     eax, 10h
.text:00003824                 or      ecx, eax
.text:00003826                 mov     edx, [ebp+arg_8]
.text:00003829                 movzx   eax, byte ptr [edx+2]
.text:0000382D                 shl     eax, 8
.text:00003830                 or      ecx, eax
.text:00003832                 mov     edx, [ebp+arg_8]
.text:00003835                 movzx   eax, byte ptr [edx+3]
.text:00003839                 or      ecx, eax
.text:0000383B                 mov     [ebp+var_68], ecx
.text:0000383E                 mov     ecx, [ebp+Str1]
.text:00003841                 push    ecx
.text:00003842                 call    _safefree
.text:00003847                 add     esp, 4
.text:0000384A                 mov     edx, [ebp+var_68]
.text:0000384D                 push    edx
.text:0000384E                 mov     eax, [ebp+arg_0]
.text:00003851                 push    eax
.text:00003852                 call    _share_find_channel_by_server
.text:00003857                 add     esp, 8
.text:0000385A                 mov     [ebp+var_20], eax
.text:0000385D                 cmp     [ebp+var_20], 0
.text:00003861                 jz      short loc_38A4
.text:00003863                 mov     ecx, [ebp+var_20]
.text:00003866                 mov     edx, [ecx]
.text:00003868                 shr     edx, 18h
.text:0000386B                 mov     [ebp+var_70], dl
.text:0000386E                 mov     eax, [ebp+var_20]
.text:00003871                 mov     ecx, [eax]
.text:00003873                 shr     ecx, 10h
.text:00003876                 mov     [ebp+var_6F], cl
.text:00003879                 mov     edx, [ebp+var_20]
.text:0000387C                 mov     eax, [edx]
.text:0000387E                 shr     eax, 8
.text:00003881                 mov     [ebp+var_6E], al
.text:00003884                 mov     ecx, [ebp+var_20]
.text:00003887                 mov     dl, [ecx]
.text:00003889                 mov     [ebp+var_6D], dl
.text:0000388C                 push    0
.text:0000388E                 push    4
.text:00003890                 lea     eax, [ebp+var_70]
.text:00003893                 push    eax
.text:00003894                 push    64h ; 'd'
.text:00003896                 mov     ecx, [ebp+arg_0]
.text:00003899                 push    ecx
.text:0000389A                 call    _send_packet_to_downstream
.text:0000389F                 add     esp, 14h
.text:000038A2                 jmp     short loc_38D9
.text:000038A4 ; ---------------------------------------------------------------------------
.text:000038A4
.text:000038A4 loc_38A4:                               ; CODE XREF: _share_got_pkt_from_downstream+A65j
.text:000038A4                 mov     edx, [ebp+var_68]
.text:000038A7                 push    edx
.text:000038A8                 push    offset $SG88175 ; "Agent forwarding request for unrecognis"...
.text:000038AD                 call    _dupprintf
.text:000038B2                 add     esp, 8
.text:000038B5                 mov     [ebp+Str], eax
.text:000038B8                 mov     eax, [ebp+Str]
.text:000038BB                 push    eax             ; Str
.text:000038BC                 mov     ecx, [ebp+arg_0]
.text:000038BF                 push    ecx             ; int
.text:000038C0                 call    _share_disconnect
.text:000038C5                 add     esp, 8
.text:000038C8                 mov     edx, [ebp+Str]
.text:000038CB                 push    edx
.text:000038CC                 call    _safefree
.text:000038D1                 add     esp, 4
.text:000038D4                 jmp     loc_3F21
.text:000038D9 ; ---------------------------------------------------------------------------
.text:000038D9
.text:000038D9 loc_38D9:                               ; CODE XREF: _share_got_pkt_from_downstream+AA6j
.text:000038D9                 jmp     loc_3F21
.text:000038DE ; ---------------------------------------------------------------------------
.text:000038DE
.text:000038DE loc_38DE:                               ; CODE XREF: _share_got_pkt_from_downstream+9F5j
.text:000038DE                                         ; _share_got_pkt_from_downstream+A0Fj
.text:000038DE                 push    offset $SG88177 ; "x11-req"
.text:000038E3                 mov     eax, [ebp+Str1]
.text:000038E6                 push    eax             ; Str1
.text:000038E7                 call    _strcmp
.text:000038EC                 add     esp, 8
.text:000038EF                 test    eax, eax
.text:000038F1                 jnz     loc_3E07
.text:000038F7                 mov     ecx, [ebp+arg_8]
.text:000038FA                 movzx   edx, byte ptr [ecx]
.text:000038FD                 shl     edx, 18h
.text:00003900                 mov     eax, [ebp+arg_8]
.text:00003903                 movzx   ecx, byte ptr [eax+1]
.text:00003907                 shl     ecx, 10h
.text:0000390A                 or      edx, ecx
.text:0000390C                 mov     eax, [ebp+arg_8]
.text:0000390F                 movzx   ecx, byte ptr [eax+2]
.text:00003913                 shl     ecx, 8
.text:00003916                 or      edx, ecx
.text:00003918                 mov     eax, [ebp+arg_8]
.text:0000391B                 movzx   ecx, byte ptr [eax+3]
.text:0000391F                 or      edx, ecx
.text:00003921                 mov     [ebp+var_7C], edx
.text:00003924                 mov     edx, [ebp+Str1]
.text:00003927                 push    edx
.text:00003928                 call    _safefree
.text:0000392D                 add     esp, 4
.text:00003930                 mov     eax, [ebp+var_7C]
.text:00003933                 push    eax
.text:00003934                 mov     ecx, [ebp+arg_0]
.text:00003937                 push    ecx
.text:00003938                 call    _share_find_channel_by_server
.text:0000393D                 add     esp, 8
.text:00003940                 mov     [ebp+var_20], eax
.text:00003943                 cmp     [ebp+var_20], 0
.text:00003947                 jnz     short loc_3987
.text:00003949                 mov     edx, [ebp+var_7C]
.text:0000394C                 push    edx
.text:0000394D                 push    offset $SG88198 ; "X11 forwarding request for unrecognised"...
.text:00003952                 call    _dupprintf
.text:00003957                 add     esp, 8
.text:0000395A                 mov     [ebp+var_A4], eax
.text:00003960                 mov     eax, [ebp+var_A4]
.text:00003966                 push    eax             ; Str
.text:00003967                 mov     ecx, [ebp+arg_0]
.text:0000396A                 push    ecx             ; int
.text:0000396B                 call    _share_disconnect
.text:00003970                 add     esp, 8
.text:00003973                 mov     edx, [ebp+var_A4]
.text:00003979                 push    edx
.text:0000397A                 call    _safefree
.text:0000397F                 add     esp, 4
.text:00003982                 jmp     loc_3F21
.text:00003987 ; ---------------------------------------------------------------------------
.text:00003987
.text:00003987 loc_3987:                               ; CODE XREF: _share_got_pkt_from_downstream+B4Bj
.text:00003987                 cmp     [ebp+arg_C], 11h
.text:0000398B                 jge     short loc_39A2
.text:0000398D                 push    offset $SG88200 ; "Truncated CHANNEL_REQUEST(\"x11\") pack"...
.text:00003992                 call    _dupprintf
.text:00003997                 add     esp, 4
.text:0000399A                 mov     [ebp+var_2C], eax
.text:0000399D                 jmp     $confused$87969
.text:000039A2 ; ---------------------------------------------------------------------------
.text:000039A2
.text:000039A2 loc_39A2:                               ; CODE XREF: _share_got_pkt_from_downstream+B8Fj
.text:000039A2                 mov     eax, [ebp+arg_8]
.text:000039A5                 movzx   ecx, byte ptr [eax+0Fh]
.text:000039A9                 neg     ecx
.text:000039AB                 sbb     ecx, ecx
.text:000039AD                 neg     ecx
.text:000039AF                 mov     [ebp+var_80], ecx
.text:000039B2                 mov     edx, [ebp+arg_8]
.text:000039B5                 movzx   eax, byte ptr [edx+10h]
.text:000039B9                 neg     eax
.text:000039BB                 sbb     eax, eax
.text:000039BD                 neg     eax
.text:000039BF                 mov     [ebp+var_84], eax
.text:000039C5                 mov     ecx, [ebp+arg_C]
.text:000039C8                 sub     ecx, 11h
.text:000039CB                 push    ecx
.text:000039CC                 mov     edx, [ebp+arg_8]
.text:000039CF                 add     edx, 11h
.text:000039D2                 push    edx
.text:000039D3                 call    _getstring
.text:000039D8                 add     esp, 8
.text:000039DB                 mov     [ebp+var_8C], eax
.text:000039E1                 mov     eax, [ebp+var_8C]
.text:000039E7                 push    eax
.text:000039E8                 call    _x11_identify_auth_proto
.text:000039ED                 add     esp, 4
.text:000039F0                 mov     [ebp+var_94], eax
.text:000039F6                 mov     ecx, [ebp+var_8C]
.text:000039FC                 push    ecx
.text:000039FD                 call    _safefree
.text:00003A02                 add     esp, 4
.text:00003A05                 mov     edx, [ebp+arg_C]
.text:00003A08                 sub     edx, 11h
.text:00003A0B                 push    edx
.text:00003A0C                 mov     eax, [ebp+arg_8]
.text:00003A0F                 add     eax, 11h
.text:00003A12                 push    eax
.text:00003A13                 call    _getstring_size
.text:00003A18                 add     esp, 8
.text:00003A1B                 add     eax, 11h
.text:00003A1E                 mov     [ebp+var_A0], eax
.text:00003A24                 mov     ecx, [ebp+arg_C]
.text:00003A27                 sub     ecx, [ebp+var_A0]
.text:00003A2D                 push    ecx
.text:00003A2E                 mov     edx, [ebp+arg_8]
.text:00003A31                 add     edx, [ebp+var_A0]
.text:00003A37                 push    edx
.text:00003A38                 call    _getstring
.text:00003A3D                 add     esp, 8
.text:00003A40                 mov     [ebp+var_90], eax
.text:00003A46                 mov     eax, [ebp+arg_C]
.text:00003A49                 sub     eax, [ebp+var_A0]
.text:00003A4F                 push    eax
.text:00003A50                 mov     ecx, [ebp+arg_8]
.text:00003A53                 add     ecx, [ebp+var_A0]
.text:00003A59                 push    ecx
.text:00003A5A                 call    _getstring_size
.text:00003A5F                 add     esp, 8
.text:00003A62                 add     eax, [ebp+var_A0]
.text:00003A68                 mov     [ebp+var_A0], eax
.text:00003A6E                 mov     edx, [ebp+var_A0]
.text:00003A74                 add     edx, 4
.text:00003A77                 cmp     [ebp+arg_C], edx
.text:00003A7A                 jge     short loc_3AA0
.text:00003A7C                 push    offset $SG88202 ; "Truncated CHANNEL_REQUEST(\"x11\") pack"...
.text:00003A81                 call    _dupprintf
.text:00003A86                 add     esp, 4
.text:00003A89                 mov     [ebp+var_2C], eax
.text:00003A8C                 mov     eax, [ebp+var_90]
.text:00003A92                 push    eax
.text:00003A93                 call    _safefree
.text:00003A98                 add     esp, 4
.text:00003A9B                 jmp     $confused$87969
.text:00003AA0 ; ---------------------------------------------------------------------------
.text:00003AA0
.text:00003AA0 loc_3AA0:                               ; CODE XREF: _share_got_pkt_from_downstream+C7Ej
.text:00003AA0                 mov     ecx, [ebp+arg_8]
.text:00003AA3                 add     ecx, [ebp+var_A0]
.text:00003AA9                 movzx   edx, byte ptr [ecx]
.text:00003AAC                 shl     edx, 18h
.text:00003AAF                 mov     eax, [ebp+arg_8]
.text:00003AB2                 add     eax, [ebp+var_A0]
.text:00003AB8                 movzx   ecx, byte ptr [eax+1]
.text:00003ABC                 shl     ecx, 10h
.text:00003ABF                 or      edx, ecx
.text:00003AC1                 mov     eax, [ebp+arg_8]
.text:00003AC4                 add     eax, [ebp+var_A0]
.text:00003ACA                 movzx   ecx, byte ptr [eax+2]
.text:00003ACE                 shl     ecx, 8
.text:00003AD1                 or      edx, ecx
.text:00003AD3                 mov     eax, [ebp+arg_8]
.text:00003AD6                 add     eax, [ebp+var_A0]
.text:00003ADC                 movzx   ecx, byte ptr [eax+3]
.text:00003AE0                 or      edx, ecx
.text:00003AE2                 mov     [ebp+var_88], edx
.text:00003AE8                 cmp     [ebp+var_94], 0
.text:00003AEF                 jge     short loc_3B53
.text:00003AF1                 mov     edx, [ebp+var_20]
.text:00003AF4                 mov     eax, [edx]
.text:00003AF6                 shr     eax, 18h
.text:00003AF9                 mov     [ebp+var_AC], al
.text:00003AFF                 mov     ecx, [ebp+var_20]
.text:00003B02                 mov     edx, [ecx]
.text:00003B04                 shr     edx, 10h
.text:00003B07                 mov     [ebp+var_AB], dl
.text:00003B0D                 mov     eax, [ebp+var_20]
.text:00003B10                 mov     ecx, [eax]
.text:00003B12                 shr     ecx, 8
.text:00003B15                 mov     [ebp+var_AA], cl
.text:00003B1B                 mov     edx, [ebp+var_20]
.text:00003B1E                 mov     al, [edx]
.text:00003B20                 mov     [ebp+var_A9], al
.text:00003B26                 push    0
.text:00003B28                 push    4
.text:00003B2A                 lea     ecx, [ebp+var_AC]
.text:00003B30                 push    ecx
.text:00003B31                 push    64h ; 'd'
.text:00003B33                 mov     edx, [ebp+arg_0]
.text:00003B36                 push    edx
.text:00003B37                 call    _send_packet_to_downstream
.text:00003B3C                 add     esp, 14h
.text:00003B3F                 mov     eax, [ebp+var_90]
.text:00003B45                 push    eax
.text:00003B46                 call    _safefree
.text:00003B4B                 add     esp, 4
.text:00003B4E                 jmp     loc_3F21
.text:00003B53 ; ---------------------------------------------------------------------------
.text:00003B53
.text:00003B53 loc_3B53:                               ; CODE XREF: _share_got_pkt_from_downstream+CF3j
.text:00003B53                 mov     ecx, [ebp+var_20]
.text:00003B56                 mov     edx, [ebp+var_94]
.text:00003B5C                 mov     [ecx+18h], edx
.text:00003B5F                 mov     eax, [ebp+var_20]
.text:00003B62                 add     eax, 20h ; ' '
.text:00003B65                 push    eax
.text:00003B66                 mov     ecx, [ebp+var_90]
.text:00003B6C                 push    ecx
.text:00003B6D                 call    _x11_dehexify
.text:00003B72                 add     esp, 8
.text:00003B75                 mov     edx, [ebp+var_20]
.text:00003B78                 mov     [edx+1Ch], eax
.text:00003B7B                 mov     eax, [ebp+var_90]
.text:00003B81                 push    eax
.text:00003B82                 call    _safefree
.text:00003B87                 add     esp, 4
.text:00003B8A                 mov     ecx, [ebp+var_20]
.text:00003B8D                 push    ecx
.text:00003B8E                 mov     edx, [ebp+arg_0]
.text:00003B91                 push    edx
.text:00003B92                 mov     eax, [ebp+var_94]
.text:00003B98                 push    eax
.text:00003B99                 mov     ecx, [ebp+arg_0]
.text:00003B9C                 mov     edx, [ecx+0Ch]
.text:00003B9F                 mov     eax, [edx+14h]
.text:00003BA2                 push    eax
.text:00003BA3                 call    _ssh_sharing_add_x11_display
.text:00003BA8                 add     esp, 10h
.text:00003BAB                 mov     ecx, [ebp+var_20]
.text:00003BAE                 mov     [ecx+14h], eax
.text:00003BB1                 mov     edx, [ebp+var_20]
.text:00003BB4                 mov     eax, [ebp+var_84]
.text:00003BBA                 mov     [edx+24h], eax
.text:00003BBD                 mov     ecx, [ebp+var_20]
.text:00003BC0                 mov     edx, [ecx+14h]
.text:00003BC3                 mov     eax, [edx+0Ch]
.text:00003BC6                 push    eax             ; Str
.text:00003BC7                 call    _strlen
.text:00003BCC                 add     esp, 4
.text:00003BCF                 mov     [ebp+Size], eax
.text:00003BD5                 mov     ecx, [ebp+var_20]
.text:00003BD8                 mov     edx, [ecx+14h]
.text:00003BDB                 mov     eax, [edx+10h]
.text:00003BDE                 push    eax             ; Str
.text:00003BDF                 call    _strlen
.text:00003BE4                 add     esp, 4
.text:00003BE7                 mov     [ebp+var_9C], eax
.text:00003BED                 mov     ecx, [ebp+var_9C]
.text:00003BF3                 mov     edx, [ebp+Size]
.text:00003BF9                 lea     eax, [edx+ecx+1Dh]
.text:00003BFD                 mov     [ebp+arg_C], eax
.text:00003C00                 push    1
.text:00003C02                 mov     ecx, [ebp+arg_C]
.text:00003C05                 push    ecx
.text:00003C06                 call    _safemalloc
.text:00003C0B                 add     esp, 8
.text:00003C0E                 mov     [ebp+arg_8], eax
.text:00003C11                 mov     edx, [ebp+var_7C]
.text:00003C14                 shr     edx, 18h
.text:00003C17                 mov     eax, [ebp+arg_8]
.text:00003C1A                 mov     [eax], dl
.text:00003C1C                 mov     ecx, [ebp+var_7C]
.text:00003C1F                 shr     ecx, 10h
.text:00003C22                 mov     edx, [ebp+arg_8]
.text:00003C25                 mov     [edx+1], cl
.text:00003C28                 mov     eax, [ebp+var_7C]
.text:00003C2B                 shr     eax, 8
.text:00003C2E                 mov     ecx, [ebp+arg_8]
.text:00003C31                 mov     [ecx+2], al
.text:00003C34                 mov     edx, [ebp+arg_8]
.text:00003C37                 mov     al, byte ptr [ebp+var_7C]
.text:00003C3A                 mov     [edx+3], al
.text:00003C3D                 mov     ecx, [ebp+arg_8]
.text:00003C40                 mov     byte ptr [ecx+4], 0
.text:00003C44                 mov     edx, [ebp+arg_8]
.text:00003C47                 mov     byte ptr [edx+5], 0
.text:00003C4B                 mov     eax, [ebp+arg_8]
.text:00003C4E                 mov     byte ptr [eax+6], 0
.text:00003C52                 mov     ecx, [ebp+arg_8]
.text:00003C55                 mov     byte ptr [ecx+7], 7
.text:00003C59                 push    7               ; Size
.text:00003C5B                 push    offset $SG88228 ; "x11-req"
.text:00003C60                 mov     edx, [ebp+arg_8]
.text:00003C63                 add     edx, 8
.text:00003C66                 push    edx             ; Dst
.text:00003C67                 call    _memcpy
.text:00003C6C                 add     esp, 0Ch
.text:00003C6F                 mov     eax, [ebp+arg_8]
.text:00003C72                 mov     cl, byte ptr [ebp+var_80]
.text:00003C75                 mov     [eax+0Fh], cl
.text:00003C78                 mov     edx, [ebp+arg_8]
.text:00003C7B                 mov     al, byte ptr [ebp+var_84]
.text:00003C81                 mov     [edx+10h], al
.text:00003C84                 mov     ecx, [ebp+Size]
.text:00003C8A                 sar     ecx, 18h
.text:00003C8D                 mov     edx, [ebp+arg_8]
.text:00003C90                 mov     [edx+11h], cl
.text:00003C93                 mov     eax, [ebp+Size]
.text:00003C99                 sar     eax, 10h
.text:00003C9C                 mov     ecx, [ebp+arg_8]
.text:00003C9F                 mov     [ecx+12h], al
.text:00003CA2                 mov     edx, [ebp+Size]
.text:00003CA8                 sar     edx, 8
.text:00003CAB                 mov     eax, [ebp+arg_8]
.text:00003CAE                 mov     [eax+13h], dl
.text:00003CB1                 mov     ecx, [ebp+arg_8]
.text:00003CB4                 mov     dl, byte ptr [ebp+Size]
.text:00003CBA                 mov     [ecx+14h], dl
.text:00003CBD                 mov     eax, [ebp+Size]
.text:00003CC3                 push    eax             ; Size
.text:00003CC4                 mov     ecx, [ebp+var_20]
.text:00003CC7                 mov     edx, [ecx+14h]
.text:00003CCA                 mov     eax, [edx+0Ch]
.text:00003CCD                 push    eax             ; Src
.text:00003CCE                 mov     ecx, [ebp+arg_8]
.text:00003CD1                 add     ecx, 15h
.text:00003CD4                 push    ecx             ; Dst
.text:00003CD5                 call    _memcpy
.text:00003CDA                 add     esp, 0Ch
.text:00003CDD                 mov     edx, [ebp+var_9C]
.text:00003CE3                 sar     edx, 18h
.text:00003CE6                 mov     eax, [ebp+arg_8]
.text:00003CE9                 add     eax, [ebp+Size]
.text:00003CEF                 mov     [eax+15h], dl
.text:00003CF2                 mov     ecx, [ebp+var_9C]
.text:00003CF8                 sar     ecx, 10h
.text:00003CFB                 mov     edx, [ebp+arg_8]
.text:00003CFE                 add     edx, [ebp+Size]
.text:00003D04                 mov     [edx+16h], cl
.text:00003D07                 mov     eax, [ebp+var_9C]
.text:00003D0D                 sar     eax, 8
.text:00003D10                 mov     ecx, [ebp+arg_8]
.text:00003D13                 add     ecx, [ebp+Size]
.text:00003D19                 mov     [ecx+17h], al
.text:00003D1C                 mov     edx, [ebp+arg_8]
.text:00003D1F                 add     edx, [ebp+Size]
.text:00003D25                 mov     al, byte ptr [ebp+var_9C]
.text:00003D2B                 mov     [edx+18h], al
.text:00003D2E                 mov     ecx, [ebp+var_9C]
.text:00003D34                 push    ecx             ; Size
.text:00003D35                 mov     edx, [ebp+var_20]
.text:00003D38                 mov     eax, [edx+14h]
.text:00003D3B                 mov     ecx, [eax+10h]
.text:00003D3E                 push    ecx             ; Src
.text:00003D3F                 mov     edx, [ebp+Size]
.text:00003D45                 mov     eax, [ebp+arg_8]
.text:00003D48                 lea     ecx, [eax+edx+19h]
.text:00003D4C                 push    ecx             ; Dst
.text:00003D4D                 call    _memcpy
.text:00003D52                 add     esp, 0Ch
.text:00003D55                 mov     edx, [ebp+var_88]
.text:00003D5B                 sar     edx, 18h
.text:00003D5E                 mov     eax, [ebp+Size]
.text:00003D64                 mov     ecx, [ebp+arg_8]
.text:00003D67                 lea     eax, [ecx+eax+19h]
.text:00003D6B                 mov     ecx, [ebp+var_9C]
.text:00003D71                 mov     [eax+ecx], dl
.text:00003D74                 mov     edx, [ebp+var_88]
.text:00003D7A                 sar     edx, 10h
.text:00003D7D                 mov     eax, [ebp+Size]
.text:00003D83                 mov     ecx, [ebp+arg_8]
.text:00003D86                 lea     eax, [ecx+eax+19h]
.text:00003D8A                 mov     ecx, [ebp+var_9C]
.text:00003D90                 mov     [eax+ecx+1], dl
.text:00003D94                 mov     edx, [ebp+var_88]
.text:00003D9A                 sar     edx, 8
.text:00003D9D                 mov     eax, [ebp+Size]
.text:00003DA3                 mov     ecx, [ebp+arg_8]
.text:00003DA6                 lea     eax, [ecx+eax+19h]
.text:00003DAA                 mov     ecx, [ebp+var_9C]
.text:00003DB0                 mov     [eax+ecx+2], dl
.text:00003DB4                 mov     edx, [ebp+Size]
.text:00003DBA                 mov     eax, [ebp+arg_8]
.text:00003DBD                 lea     ecx, [eax+edx+19h]
.text:00003DC1                 mov     edx, [ebp+var_9C]
.text:00003DC7                 mov     al, byte ptr [ebp+var_88]
.text:00003DCD                 mov     [ecx+edx+3], al
.text:00003DD1                 push    0
.text:00003DD3                 mov     ecx, [ebp+arg_C]
.text:00003DD6                 push    ecx
.text:00003DD7                 mov     edx, [ebp+arg_8]
.text:00003DDA                 push    edx
.text:00003DDB                 push    62h ; 'b'
.text:00003DDD                 mov     eax, [ebp+arg_0]
.text:00003DE0                 mov     ecx, [eax+4]
.text:00003DE3                 push    ecx
.text:00003DE4                 mov     edx, [ebp+arg_0]
.text:00003DE7                 mov     eax, [edx+0Ch]
.text:00003DEA                 mov     ecx, [eax+14h]
.text:00003DED                 push    ecx
.text:00003DEE                 call    _ssh_send_packet_from_downstream
.text:00003DF3                 add     esp, 18h
.text:00003DF6                 mov     edx, [ebp+arg_8]
.text:00003DF9                 push    edx
.text:00003DFA                 call    _safefree
.text:00003DFF                 add     esp, 4
.text:00003E02                 jmp     loc_3F21
.text:00003E07 ; ---------------------------------------------------------------------------
.text:00003E07
.text:00003E07 loc_3E07:                               ; CODE XREF: _share_got_pkt_from_downstream+AF5j
.text:00003E07                 mov     eax, [ebp+Str1]
.text:00003E0A                 push    eax
.text:00003E0B                 call    _safefree
.text:00003E10                 add     esp, 4
.text:00003E13
.text:00003E13 loc_3E13:                               ; CODE XREF: _share_got_pkt_from_downstream+9B9j
.text:00003E13                                         ; _share_got_pkt_from_downstream+9DCj
.text:00003E13                 push    0
.text:00003E15                 mov     ecx, [ebp+arg_C]
.text:00003E18                 push    ecx
.text:00003E19                 mov     edx, [ebp+arg_8]
.text:00003E1C                 push    edx
.text:00003E1D                 mov     eax, [ebp+arg_4]
.text:00003E20                 push    eax
.text:00003E21                 mov     ecx, [ebp+arg_0]
.text:00003E24                 mov     edx, [ecx+4]
.text:00003E27                 push    edx
.text:00003E28                 mov     eax, [ebp+arg_0]
.text:00003E2B                 mov     ecx, [eax+0Ch]
.text:00003E2E                 mov     edx, [ecx+14h]
.text:00003E31                 push    edx
.text:00003E32                 call    _ssh_send_packet_from_downstream
.text:00003E37                 add     esp, 18h
.text:00003E3A                 cmp     [ebp+arg_4], 61h ; 'a'
.text:00003E3E                 jnz     loc_3ED2
.text:00003E44                 cmp     [ebp+arg_C], 4
.text:00003E48                 jl      loc_3ED2
.text:00003E4E                 mov     eax, [ebp+arg_8]
.text:00003E51                 movzx   ecx, byte ptr [eax]
.text:00003E54                 shl     ecx, 18h
.text:00003E57                 mov     edx, [ebp+arg_8]
.text:00003E5A                 movzx   eax, byte ptr [edx+1]
.text:00003E5E                 shl     eax, 10h
.text:00003E61                 or      ecx, eax
.text:00003E63                 mov     edx, [ebp+arg_8]
.text:00003E66                 movzx   eax, byte ptr [edx+2]
.text:00003E6A                 shl     eax, 8
.text:00003E6D                 or      ecx, eax
.text:00003E6F                 mov     edx, [ebp+arg_8]
.text:00003E72                 movzx   eax, byte ptr [edx+3]
.text:00003E76                 or      ecx, eax
.text:00003E78                 mov     [ebp+var_18], ecx
.text:00003E7B                 mov     ecx, [ebp+var_18]
.text:00003E7E                 push    ecx
.text:00003E7F                 mov     edx, [ebp+arg_0]
.text:00003E82                 push    edx
.text:00003E83                 call    _share_find_channel_by_server
.text:00003E88                 add     esp, 8
.text:00003E8B                 mov     [ebp+var_20], eax
.text:00003E8E                 cmp     [ebp+var_20], 0
.text:00003E92                 jz      short loc_3ED2
.text:00003E94                 mov     eax, [ebp+var_20]
.text:00003E97                 cmp     dword ptr [eax+10h], 2
.text:00003E9B                 jnz     short loc_3EC8
.text:00003E9D                 mov     ecx, [ebp+var_20]
.text:00003EA0                 mov     edx, [ecx+4]
.text:00003EA3                 push    edx
.text:00003EA4                 mov     eax, [ebp+arg_0]
.text:00003EA7                 mov     ecx, [eax+0Ch]
.text:00003EAA                 mov     edx, [ecx+14h]
.text:00003EAD                 push    edx
.text:00003EAE                 call    _ssh_delete_sharing_channel
.text:00003EB3                 add     esp, 8
.text:00003EB6                 mov     eax, [ebp+var_20]
.text:00003EB9                 push    eax
.text:00003EBA                 mov     ecx, [ebp+arg_0]
.text:00003EBD                 push    ecx
.text:00003EBE                 call    _share_remove_channel
.text:00003EC3                 add     esp, 8
.text:00003EC6                 jmp     short loc_3ED2
.text:00003EC8 ; ---------------------------------------------------------------------------
.text:00003EC8
.text:00003EC8 loc_3EC8:                               ; CODE XREF: _share_got_pkt_from_downstream+109Fj
.text:00003EC8                 mov     edx, [ebp+var_20]
.text:00003ECB                 mov     dword ptr [edx+10h], 1
.text:00003ED2
.text:00003ED2 loc_3ED2:                               ; CODE XREF: _share_got_pkt_from_downstream+1042j
.text:00003ED2                                         ; _share_got_pkt_from_downstream+104Cj ...
.text:00003ED2                 jmp     short loc_3F21
.text:00003ED4 ; ---------------------------------------------------------------------------
.text:00003ED4
.text:00003ED4 $LN1_0:                                 ; CODE XREF: _share_got_pkt_from_downstream+42j
.text:00003ED4                                         ; _share_got_pkt_from_downstream+55j
.text:00003ED4                                         ; DATA XREF: ...
.text:00003ED4                 mov     eax, [ebp+arg_4] ; jumptable 00002E51 default case
.text:00003ED7                 push    eax
.text:00003ED8                 push    offset $SG88256 ; "Unexpected packet type %d\n"
.text:00003EDD                 call    _dupprintf
.text:00003EE2                 add     esp, 8
.text:00003EE5                 mov     [ebp+var_2C], eax
.text:00003EE8
.text:00003EE8 $confused$87969:                        ; CODE XREF: _share_got_pkt_from_downstream+96j
.text:00003EE8                                         ; _share_got_pkt_from_downstream+F1j ...
.text:00003EE8                 cmp     [ebp+var_2C], 0
.text:00003EEC                 jnz     short loc_3F05
.text:00003EEE                 push    6D2h            ; Line
.text:00003EF3                 push    offset $SG88259 ; "..\\..\\..\\sshshare.c"
.text:00003EF8                 push    offset $SG88260 ; "err != NULL"
.text:00003EFD                 call    __wassert
.text:00003F02 ; ---------------------------------------------------------------------------
.text:00003F02                 add     esp, 0Ch
.text:00003F05
.text:00003F05 loc_3F05:                               ; CODE XREF: _share_got_pkt_from_downstream+10F0j
.text:00003F05                 mov     edx, [ebp+var_2C]
.text:00003F08                 push    edx             ; Str
.text:00003F09                 mov     eax, [ebp+arg_0]
.text:00003F0C                 push    eax             ; int
.text:00003F0D                 call    _share_disconnect
.text:00003F12                 add     esp, 8
.text:00003F15                 mov     ecx, [ebp+var_2C]
.text:00003F18                 push    ecx
.text:00003F19                 call    _safefree
.text:00003F1E                 add     esp, 4
.text:00003F21
.text:00003F21 loc_3F21:                               ; CODE XREF: _share_got_pkt_from_downstream+68j
.text:00003F21                                         ; _share_got_pkt_from_downstream:loc_3341j ...
.text:00003F21                 push    edx
.text:00003F22                 mov     ecx, ebp
.text:00003F24                 push    eax
.text:00003F25                 lea     edx, $LN73
.text:00003F2B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003F30                 pop     eax
.text:00003F31                 pop     edx
.text:00003F32                 pop     edi
.text:00003F33                 add     esp, 0B4h
.text:00003F39                 cmp     ebp, esp
.text:00003F3B                 call    __RTC_CheckEsp
.text:00003F40                 mov     esp, ebp
.text:00003F42                 pop     ebp
.text:00003F43                 retn
.text:00003F43 _share_got_pkt_from_downstream endp
.text:00003F43
.text:00003F43 ; ---------------------------------------------------------------------------
.text:00003F44 $LN73           dd 2                    ; DATA XREF: _share_got_pkt_from_downstream+1129o
.text:00003F48                 dd offset $LN72
.text:00003F4C $LN72           db 90h                  ; DATA XREF: .text:00003F48o
.text:00003F4D                 db 3 dup(0FFh)
.text:00003F50                 dd 4
.text:00003F54                 dd offset $LN70         ; "recipient_id"
.text:00003F58                 dd 0FFFFFF54h, 4
.text:00003F60                 dd offset $LN71         ; "recipient_id"
.text:00003F64 $LN71           db 'recipient_id',0     ; DATA XREF: .text:00003F60o
.text:00003F71 $LN70           db 'recipient_id',0     ; DATA XREF: .text:00003F54o
.text:00003F7E                 align 10h
.text:00003F80 $LN74           dd offset $LN61, offset $LN15_0, offset $LN60, offset $LN34
.text:00003F80                                         ; DATA XREF: _share_got_pkt_from_downstream+55r
.text:00003F80                 dd offset $LN31, offset $LN21, offset $LN1_0 ; jump table for switch statement
.text:00003F9C $LN69           db      0,     1,     6,     1
.text:00003F9C                                         ; DATA XREF: _share_got_pkt_from_downstream+4Er
.text:00003F9C                 db      6,     6,     6,     6 ; indirect table for switch statement
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     2
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     6,     6,     6
.text:00003F9C                 db      6,     3,     4,     5
.text:00003F9C                 db      1,     1,     1,     1
.text:00003F9C                 db      1,     1,     1,     1
.text:00004000                 db 0Ch dup(0CCh)
.text:0000400C
.text:0000400C ; =============== S U B R O U T I N E =======================================
.text:0000400C
.text:0000400C ; Attributes: bp-based frame
.text:0000400C
.text:0000400C _share_find_halfchannel proc near       ; CODE XREF: _share_got_pkt_from_downstream+727p
.text:0000400C                                         ; _share_got_pkt_from_downstream+922p
.text:0000400C
.text:0000400C var_C           = dword ptr -0Ch
.text:0000400C var_8           = dword ptr -8
.text:0000400C var_4           = dword ptr -4
.text:0000400C arg_0           = dword ptr  8
.text:0000400C arg_4           = dword ptr  0Ch
.text:0000400C
.text:0000400C                 push    ebp
.text:0000400D                 mov     ebp, esp
.text:0000400F                 sub     esp, 0Ch
.text:00004012                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004019                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004020                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004027                 mov     eax, [ebp+arg_4]
.text:0000402A                 mov     [ebp+var_8], eax
.text:0000402D                 push    0
.text:0000402F                 lea     ecx, [ebp+var_8]
.text:00004032                 push    ecx
.text:00004033                 mov     edx, [ebp+arg_0]
.text:00004036                 mov     eax, [edx+4034h]
.text:0000403C                 push    eax
.text:0000403D                 call    _find234
.text:00004042                 add     esp, 0Ch
.text:00004045                 push    edx
.text:00004046                 mov     ecx, ebp
.text:00004048                 push    eax
.text:00004049                 lea     edx, $LN5_4
.text:0000404F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004054                 pop     eax
.text:00004055                 pop     edx
.text:00004056                 add     esp, 0Ch
.text:00004059                 cmp     ebp, esp
.text:0000405B                 call    __RTC_CheckEsp
.text:00004060                 mov     esp, ebp
.text:00004062                 pop     ebp
.text:00004063                 retn
.text:00004063 _share_find_halfchannel endp
.text:00004063
.text:00004063 ; ---------------------------------------------------------------------------
.text:00004064 $LN5_4          dd 1                    ; DATA XREF: _share_find_halfchannel+3Do
.text:00004068                 dd offset $LN4_3
.text:0000406C $LN4_3          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00004068o
.text:00004074                 dd offset $LN3_2        ; "dummyhc"
.text:00004078 $LN3_2          db 'dummyhc',0          ; DATA XREF: .text:00004074o
.text:00004080                 db 0Ch dup(0CCh)
.text:0000408C
.text:0000408C ; =============== S U B R O U T I N E =======================================
.text:0000408C
.text:0000408C ; Attributes: bp-based frame
.text:0000408C
.text:0000408C _share_add_channel proc near            ; CODE XREF: _share_got_pkt_from_downstream+61Dp
.text:0000408C                                         ; _share_got_pkt_from_downstream+805p
.text:0000408C
.text:0000408C var_4           = dword ptr -4
.text:0000408C arg_0           = dword ptr  8
.text:0000408C arg_4           = dword ptr  0Ch
.text:0000408C arg_8           = dword ptr  10h
.text:0000408C arg_C           = dword ptr  14h
.text:0000408C arg_10          = dword ptr  18h
.text:0000408C arg_14          = dword ptr  1Ch
.text:0000408C
.text:0000408C                 push    ebp
.text:0000408D                 mov     ebp, esp
.text:0000408F                 push    ecx
.text:00004090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004097                 push    28h ; '('
.text:00004099                 push    1
.text:0000409B                 call    _safemalloc
.text:000040A0                 add     esp, 8
.text:000040A3                 mov     [ebp+var_4], eax
.text:000040A6                 mov     eax, [ebp+var_4]
.text:000040A9                 mov     ecx, [ebp+arg_4]
.text:000040AC                 mov     [eax], ecx
.text:000040AE                 mov     edx, [ebp+var_4]
.text:000040B1                 mov     eax, [ebp+arg_8]
.text:000040B4                 mov     [edx+4], eax
.text:000040B7                 mov     ecx, [ebp+var_4]
.text:000040BA                 mov     edx, [ebp+arg_C]
.text:000040BD                 mov     [ecx+8], edx
.text:000040C0                 mov     eax, [ebp+var_4]
.text:000040C3                 mov     ecx, [ebp+arg_10]
.text:000040C6                 mov     [eax+10h], ecx
.text:000040C9                 mov     edx, [ebp+var_4]
.text:000040CC                 mov     eax, [ebp+arg_14]
.text:000040CF                 mov     [edx+0Ch], eax
.text:000040D2                 mov     ecx, [ebp+var_4]
.text:000040D5                 mov     dword ptr [ecx+14h], 0
.text:000040DC                 mov     edx, [ebp+var_4]
.text:000040DF                 mov     dword ptr [edx+1Ch], 0
.text:000040E6                 mov     eax, [ebp+var_4]
.text:000040E9                 mov     dword ptr [eax+18h], 0FFFFFFFFh
.text:000040F0                 mov     ecx, [ebp+var_4]
.text:000040F3                 mov     dword ptr [ecx+20h], 0
.text:000040FA                 mov     edx, [ebp+var_4]
.text:000040FD                 mov     dword ptr [edx+24h], 0
.text:00004104                 mov     eax, [ebp+var_4]
.text:00004107                 push    eax
.text:00004108                 mov     ecx, [ebp+arg_0]
.text:0000410B                 mov     edx, [ecx+4038h]
.text:00004111                 push    edx
.text:00004112                 call    _add234
.text:00004117                 add     esp, 8
.text:0000411A                 cmp     eax, [ebp+var_4]
.text:0000411D                 jz      short loc_412F
.text:0000411F                 mov     eax, [ebp+var_4]
.text:00004122                 push    eax
.text:00004123                 call    _safefree
.text:00004128                 add     esp, 4
.text:0000412B                 xor     eax, eax
.text:0000412D                 jmp     short loc_417C
.text:0000412F ; ---------------------------------------------------------------------------
.text:0000412F
.text:0000412F loc_412F:                               ; CODE XREF: _share_add_channel+91j
.text:0000412F                 mov     ecx, [ebp+var_4]
.text:00004132                 cmp     dword ptr [ecx+10h], 3
.text:00004136                 jz      short loc_4179
.text:00004138                 mov     edx, [ebp+var_4]
.text:0000413B                 push    edx
.text:0000413C                 mov     eax, [ebp+arg_0]
.text:0000413F                 mov     ecx, [eax+403Ch]
.text:00004145                 push    ecx
.text:00004146                 call    _add234
.text:0000414B                 add     esp, 8
.text:0000414E                 cmp     eax, [ebp+var_4]
.text:00004151                 jz      short loc_4179
.text:00004153                 mov     edx, [ebp+var_4]
.text:00004156                 push    edx
.text:00004157                 mov     eax, [ebp+arg_0]
.text:0000415A                 mov     ecx, [eax+4038h]
.text:00004160                 push    ecx
.text:00004161                 call    _del234
.text:00004166                 add     esp, 8
.text:00004169                 mov     edx, [ebp+var_4]
.text:0000416C                 push    edx
.text:0000416D                 call    _safefree
.text:00004172                 add     esp, 4
.text:00004175                 xor     eax, eax
.text:00004177                 jmp     short loc_417C
.text:00004179 ; ---------------------------------------------------------------------------
.text:00004179
.text:00004179 loc_4179:                               ; CODE XREF: _share_add_channel+AAj
.text:00004179                                         ; _share_add_channel+C5j
.text:00004179                 mov     eax, [ebp+var_4]
.text:0000417C
.text:0000417C loc_417C:                               ; CODE XREF: _share_add_channel+A1j
.text:0000417C                                         ; _share_add_channel+EBj
.text:0000417C                 add     esp, 4
.text:0000417F                 cmp     ebp, esp
.text:00004181                 call    __RTC_CheckEsp
.text:00004186                 mov     esp, ebp
.text:00004188                 pop     ebp
.text:00004189                 retn
.text:00004189 _share_add_channel endp
.text:00004189
.text:00004189 ; ---------------------------------------------------------------------------
.text:0000418A                 align 4
.text:0000418C
.text:0000418C ; =============== S U B R O U T I N E =======================================
.text:0000418C
.text:0000418C ; Attributes: bp-based frame
.text:0000418C
.text:0000418C _share_find_channel_by_server proc near ; CODE XREF: _share_got_pkt_from_downstream+A56p
.text:0000418C                                         ; _share_got_pkt_from_downstream+B3Cp ...
.text:0000418C
.text:0000418C var_30          = byte ptr -30h
.text:0000418C var_2C          = byte ptr -2Ch
.text:0000418C var_24          = dword ptr -24h
.text:0000418C arg_0           = dword ptr  8
.text:0000418C arg_4           = dword ptr  0Ch
.text:0000418C
.text:0000418C                 push    ebp
.text:0000418D                 mov     ebp, esp
.text:0000418F                 sub     esp, 30h
.text:00004192                 push    edi
.text:00004193                 lea     edi, [ebp+var_30]
.text:00004196                 mov     ecx, 0Ch
.text:0000419B                 mov     eax, 0CCCCCCCCh
.text:000041A0                 rep stosd
.text:000041A2                 mov     eax, [ebp+arg_4]
.text:000041A5                 mov     [ebp+var_24], eax
.text:000041A8                 push    0
.text:000041AA                 lea     ecx, [ebp+var_2C]
.text:000041AD                 push    ecx
.text:000041AE                 mov     edx, [ebp+arg_0]
.text:000041B1                 mov     eax, [edx+403Ch]
.text:000041B7                 push    eax
.text:000041B8                 call    _find234
.text:000041BD                 add     esp, 0Ch
.text:000041C0                 push    edx
.text:000041C1                 mov     ecx, ebp
.text:000041C3                 push    eax
.text:000041C4                 lea     edx, $LN5_5
.text:000041CA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000041CF                 pop     eax
.text:000041D0                 pop     edx
.text:000041D1                 pop     edi
.text:000041D2                 add     esp, 30h
.text:000041D5                 cmp     ebp, esp
.text:000041D7                 call    __RTC_CheckEsp
.text:000041DC                 mov     esp, ebp
.text:000041DE                 pop     ebp
.text:000041DF                 retn
.text:000041DF _share_find_channel_by_server endp
.text:000041DF
.text:000041DF ; ---------------------------------------------------------------------------
.text:000041E0 $LN5_5          dd 1                    ; DATA XREF: _share_find_channel_by_server+38o
.text:000041E4                 dd offset $LN4_4
.text:000041E8 $LN4_4          dd 0FFFFFFD4h, 28h      ; DATA XREF: .text:000041E4o
.text:000041F0                 dd offset $LN3_3        ; "dummychan"
.text:000041F4 $LN3_3          db 'dummychan',0        ; DATA XREF: .text:000041F0o
.text:000041FE                 db 0Eh dup(0CCh)
.text:0000420C
.text:0000420C ; =============== S U B R O U T I N E =======================================
.text:0000420C
.text:0000420C ; Attributes: bp-based frame
.text:0000420C
.text:0000420C _share_find_xchannel_by_server proc near
.text:0000420C                                         ; CODE XREF: _share_got_pkt_from_downstream+75Bp
.text:0000420C                                         ; _share_got_pkt_from_downstream+974p
.text:0000420C
.text:0000420C var_20          = dword ptr -20h
.text:0000420C var_1C          = dword ptr -1Ch
.text:0000420C var_18          = dword ptr -18h
.text:0000420C var_14          = dword ptr -14h
.text:0000420C var_10          = dword ptr -10h
.text:0000420C var_C           = dword ptr -0Ch
.text:0000420C var_8           = dword ptr -8
.text:0000420C var_4           = dword ptr -4
.text:0000420C arg_0           = dword ptr  8
.text:0000420C arg_4           = dword ptr  0Ch
.text:0000420C
.text:0000420C                 push    ebp
.text:0000420D                 mov     ebp, esp
.text:0000420F                 sub     esp, 20h
.text:00004212                 mov     eax, 0CCCCCCCCh
.text:00004217                 mov     [ebp+var_20], eax
.text:0000421A                 mov     [ebp+var_1C], eax
.text:0000421D                 mov     [ebp+var_18], eax
.text:00004220                 mov     [ebp+var_14], eax
.text:00004223                 mov     [ebp+var_10], eax
.text:00004226                 mov     [ebp+var_C], eax
.text:00004229                 mov     [ebp+var_8], eax
.text:0000422C                 mov     [ebp+var_4], eax
.text:0000422F                 mov     eax, [ebp+arg_4]
.text:00004232                 mov     [ebp+var_18], eax
.text:00004235                 push    0
.text:00004237                 lea     ecx, [ebp+var_1C]
.text:0000423A                 push    ecx
.text:0000423B                 mov     edx, [ebp+arg_0]
.text:0000423E                 mov     eax, [edx+4044h]
.text:00004244                 push    eax
.text:00004245                 call    _find234
.text:0000424A                 add     esp, 0Ch
.text:0000424D                 push    edx
.text:0000424E                 mov     ecx, ebp
.text:00004250                 push    eax
.text:00004251                 lea     edx, $LN5_6
.text:00004257                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000425C                 pop     eax
.text:0000425D                 pop     edx
.text:0000425E                 add     esp, 20h
.text:00004261                 cmp     ebp, esp
.text:00004263                 call    __RTC_CheckEsp
.text:00004268                 mov     esp, ebp
.text:0000426A                 pop     ebp
.text:0000426B                 retn
.text:0000426B _share_find_xchannel_by_server endp
.text:0000426B
.text:0000426B ; ---------------------------------------------------------------------------
.text:0000426C $LN5_6          dd 1                    ; DATA XREF: _share_find_xchannel_by_server+45o
.text:00004270                 dd offset $LN4_5
.text:00004274 $LN4_5          dd 0FFFFFFE4h, 18h      ; DATA XREF: .text:00004270o
.text:0000427C                 dd offset $LN3_4        ; "dummyxc"
.text:00004280 $LN3_4          db 'dummyxc',0          ; DATA XREF: .text:0000427Co
.text:00004288                 db 4 dup(0CCh)
.text:0000428C
.text:0000428C ; =============== S U B R O U T I N E =======================================
.text:0000428C
.text:0000428C ; Attributes: bp-based frame
.text:0000428C
.text:0000428C _share_add_forwarding proc near         ; CODE XREF: _share_got_pkt_from_downstream+26Ep
.text:0000428C
.text:0000428C var_4           = dword ptr -4
.text:0000428C arg_0           = dword ptr  8
.text:0000428C arg_4           = dword ptr  0Ch
.text:0000428C arg_8           = dword ptr  10h
.text:0000428C
.text:0000428C                 push    ebp
.text:0000428D                 mov     ebp, esp
.text:0000428F                 push    ecx
.text:00004290                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004297                 push    0Ch
.text:00004299                 push    1
.text:0000429B                 call    _safemalloc
.text:000042A0                 add     esp, 8
.text:000042A3                 mov     [ebp+var_4], eax
.text:000042A6                 mov     eax, [ebp+arg_4]
.text:000042A9                 push    eax
.text:000042AA                 call    _dupstr
.text:000042AF                 add     esp, 4
.text:000042B2                 mov     ecx, [ebp+var_4]
.text:000042B5                 mov     [ecx], eax
.text:000042B7                 mov     edx, [ebp+var_4]
.text:000042BA                 mov     eax, [ebp+arg_8]
.text:000042BD                 mov     [edx+4], eax
.text:000042C0                 mov     ecx, [ebp+var_4]
.text:000042C3                 mov     dword ptr [ecx+8], 0
.text:000042CA                 mov     edx, [ebp+var_4]
.text:000042CD                 push    edx
.text:000042CE                 mov     eax, [ebp+arg_0]
.text:000042D1                 mov     ecx, [eax+4048h]
.text:000042D7                 push    ecx
.text:000042D8                 call    _add234
.text:000042DD                 add     esp, 8
.text:000042E0                 cmp     eax, [ebp+var_4]
.text:000042E3                 jz      short loc_42F5
.text:000042E5                 mov     edx, [ebp+var_4]
.text:000042E8                 push    edx
.text:000042E9                 call    _safefree
.text:000042EE                 add     esp, 4
.text:000042F1                 xor     eax, eax
.text:000042F3                 jmp     short loc_42F8
.text:000042F5 ; ---------------------------------------------------------------------------
.text:000042F5
.text:000042F5 loc_42F5:                               ; CODE XREF: _share_add_forwarding+57j
.text:000042F5                 mov     eax, [ebp+var_4]
.text:000042F8
.text:000042F8 loc_42F8:                               ; CODE XREF: _share_add_forwarding+67j
.text:000042F8                 add     esp, 4
.text:000042FB                 cmp     ebp, esp
.text:000042FD                 call    __RTC_CheckEsp
.text:00004302                 mov     esp, ebp
.text:00004304                 pop     ebp
.text:00004305                 retn
.text:00004305 _share_add_forwarding endp
.text:00004305
.text:00004305 ; ---------------------------------------------------------------------------
.text:00004306                 db 6 dup(0CCh)
.text:0000430C
.text:0000430C ; =============== S U B R O U T I N E =======================================
.text:0000430C
.text:0000430C ; Attributes: bp-based frame
.text:0000430C
.text:0000430C _share_find_forwarding proc near        ; CODE XREF: _share_got_pkt_from_downstream+442p
.text:0000430C
.text:0000430C var_18          = dword ptr -18h
.text:0000430C var_14          = dword ptr -14h
.text:0000430C var_10          = dword ptr -10h
.text:0000430C var_C           = dword ptr -0Ch
.text:0000430C var_8           = dword ptr -8
.text:0000430C var_4           = dword ptr -4
.text:0000430C arg_0           = dword ptr  8
.text:0000430C arg_4           = dword ptr  0Ch
.text:0000430C arg_8           = dword ptr  10h
.text:0000430C
.text:0000430C                 push    ebp
.text:0000430D                 mov     ebp, esp
.text:0000430F                 sub     esp, 18h
.text:00004312                 mov     eax, 0CCCCCCCCh
.text:00004317                 mov     [ebp+var_18], eax
.text:0000431A                 mov     [ebp+var_14], eax
.text:0000431D                 mov     [ebp+var_10], eax
.text:00004320                 mov     [ebp+var_C], eax
.text:00004323                 mov     [ebp+var_8], eax
.text:00004326                 mov     [ebp+var_4], eax
.text:00004329                 mov     eax, [ebp+arg_4]
.text:0000432C                 push    eax
.text:0000432D                 call    _dupstr
.text:00004332                 add     esp, 4
.text:00004335                 mov     [ebp+var_10], eax
.text:00004338                 mov     ecx, [ebp+arg_8]
.text:0000433B                 mov     [ebp+var_C], ecx
.text:0000433E                 push    0
.text:00004340                 lea     edx, [ebp+var_10]
.text:00004343                 push    edx
.text:00004344                 mov     eax, [ebp+arg_0]
.text:00004347                 mov     ecx, [eax+4048h]
.text:0000434D                 push    ecx
.text:0000434E                 call    _find234
.text:00004353                 add     esp, 0Ch
.text:00004356                 mov     [ebp+var_18], eax
.text:00004359                 mov     edx, [ebp+var_10]
.text:0000435C                 push    edx
.text:0000435D                 call    _safefree
.text:00004362                 add     esp, 4
.text:00004365                 mov     eax, [ebp+var_18]
.text:00004368                 push    edx
.text:00004369                 mov     ecx, ebp
.text:0000436B                 push    eax
.text:0000436C                 lea     edx, $LN5_7
.text:00004372                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004377                 pop     eax
.text:00004378                 pop     edx
.text:00004379                 add     esp, 18h
.text:0000437C                 cmp     ebp, esp
.text:0000437E                 call    __RTC_CheckEsp
.text:00004383                 mov     esp, ebp
.text:00004385                 pop     ebp
.text:00004386                 retn
.text:00004386 _share_find_forwarding endp
.text:00004386
.text:00004386 ; ---------------------------------------------------------------------------
.text:00004387                 align 4
.text:00004388 $LN5_7          dd 1                    ; DATA XREF: _share_find_forwarding+60o
.text:0000438C                 dd offset $LN4_6
.text:00004390 $LN4_6          dd 0FFFFFFF0h, 0Ch      ; DATA XREF: .text:0000438Co
.text:00004398                 dd offset $LN3_5        ; "dummyfwd"
.text:0000439C $LN3_5          db 'dummyfwd',0         ; DATA XREF: .text:00004398o
.text:000043A5                 db 7 dup(0CCh)
.text:000043AC
.text:000043AC ; =============== S U B R O U T I N E =======================================
.text:000043AC
.text:000043AC ; Attributes: bp-based frame
.text:000043AC
.text:000043AC _getstring      proc near               ; CODE XREF: _share_got_pkt_from_downstream+75p
.text:000043AC                                         ; _share_got_pkt_from_downstream+16Ep ...
.text:000043AC
.text:000043AC var_C           = dword ptr -0Ch
.text:000043AC var_8           = dword ptr -8
.text:000043AC var_4           = dword ptr -4
.text:000043AC arg_0           = dword ptr  8
.text:000043AC arg_4           = dword ptr  0Ch
.text:000043AC
.text:000043AC                 push    ebp
.text:000043AD                 mov     ebp, esp
.text:000043AF                 sub     esp, 0Ch
.text:000043B2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000043B9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000043C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043C7                 push    0
.text:000043C9                 lea     eax, [ebp+var_8]
.text:000043CC                 push    eax
.text:000043CD                 mov     ecx, [ebp+arg_4]
.text:000043D0                 push    ecx
.text:000043D1                 mov     edx, [ebp+arg_0]
.text:000043D4                 push    edx
.text:000043D5                 call    _getstring_inner
.text:000043DA                 add     esp, 10h
.text:000043DD                 test    eax, eax
.text:000043DF                 jz      short loc_43E8
.text:000043E1                 mov     eax, [ebp+var_8]
.text:000043E4                 jmp     short loc_43EA
.text:000043E6 ; ---------------------------------------------------------------------------
.text:000043E6                 jmp     short loc_43EA
.text:000043E8 ; ---------------------------------------------------------------------------
.text:000043E8
.text:000043E8 loc_43E8:                               ; CODE XREF: _getstring+33j
.text:000043E8                 xor     eax, eax
.text:000043EA
.text:000043EA loc_43EA:                               ; CODE XREF: _getstring+38j
.text:000043EA                                         ; _getstring+3Aj
.text:000043EA                 push    edx
.text:000043EB                 mov     ecx, ebp
.text:000043ED                 push    eax
.text:000043EE                 lea     edx, $LN7_1
.text:000043F4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000043F9                 pop     eax
.text:000043FA                 pop     edx
.text:000043FB                 add     esp, 0Ch
.text:000043FE                 cmp     ebp, esp
.text:00004400                 call    __RTC_CheckEsp
.text:00004405                 mov     esp, ebp
.text:00004407                 pop     ebp
.text:00004408                 retn
.text:00004408 _getstring      endp
.text:00004408
.text:00004408 ; ---------------------------------------------------------------------------
.text:00004409                 align 4
.text:0000440C $LN7_1          dd 1                    ; DATA XREF: _getstring+42o
.text:00004410                 dd offset $LN6_2
.text:00004414 $LN6_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00004410o
.text:0000441C                 dd offset $LN5_8
.text:00004420 $LN5_8          dd 746572h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000441Co
.text:0000442C
.text:0000442C ; =============== S U B R O U T I N E =======================================
.text:0000442C
.text:0000442C ; Attributes: bp-based frame
.text:0000442C
.text:0000442C _share_sent     proc near               ; DATA XREF: .rdata:0000096Co
.text:0000442C                 push    ebp
.text:0000442D                 mov     ebp, esp
.text:0000442F                 pop     ebp
.text:00004430                 retn
.text:00004430 _share_sent     endp
.text:00004430
.text:00004430 ; ---------------------------------------------------------------------------
.text:00004431                 db 0Bh dup(0CCh)
.text:0000443C
.text:0000443C ; =============== S U B R O U T I N E =======================================
.text:0000443C
.text:0000443C ; Attributes: bp-based frame
.text:0000443C
.text:0000443C _share_listen_closing proc near         ; DATA XREF: .rdata:00000978o
.text:0000443C
.text:0000443C var_4           = dword ptr -4
.text:0000443C arg_0           = dword ptr  8
.text:0000443C arg_4           = dword ptr  0Ch
.text:0000443C
.text:0000443C                 push    ebp
.text:0000443D                 mov     ebp, esp
.text:0000443F                 push    ecx
.text:00004440                 push    esi
.text:00004441                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004448                 mov     eax, [ebp+arg_0]
.text:0000444B                 mov     [ebp+var_4], eax
.text:0000444E                 cmp     [ebp+arg_4], 0
.text:00004452                 jz      short loc_446E
.text:00004454                 mov     ecx, [ebp+arg_4]
.text:00004457                 push    ecx
.text:00004458                 push    offset $SG88361 ; "listening socket: %s"
.text:0000445D                 push    0
.text:0000445F                 mov     edx, [ebp+var_4]
.text:00004462                 mov     eax, [edx+14h]
.text:00004465                 push    eax
.text:00004466                 call    _ssh_sharing_logf
.text:0000446B                 add     esp, 10h
.text:0000446E
.text:0000446E loc_446E:                               ; CODE XREF: _share_listen_closing+16j
.text:0000446E                 mov     esi, esp
.text:00004470                 mov     ecx, [ebp+var_4]
.text:00004473                 mov     edx, [ecx+8]
.text:00004476                 push    edx
.text:00004477                 mov     eax, [ebp+var_4]
.text:0000447A                 mov     ecx, [eax+8]
.text:0000447D                 mov     edx, [ecx]
.text:0000447F                 mov     eax, [edx+4]
.text:00004482                 call    eax
.text:00004484                 add     esp, 4
.text:00004487                 cmp     esi, esp
.text:00004489                 call    __RTC_CheckEsp
.text:0000448E                 mov     ecx, [ebp+var_4]
.text:00004491                 mov     dword ptr [ecx+8], 0
.text:00004498                 mov     eax, 1
.text:0000449D                 pop     esi
.text:0000449E                 add     esp, 4
.text:000044A1                 cmp     ebp, esp
.text:000044A3                 call    __RTC_CheckEsp
.text:000044A8                 mov     esp, ebp
.text:000044AA                 pop     ebp
.text:000044AB                 retn
.text:000044AB _share_listen_closing endp
.text:000044AB
.text:000044AC
.text:000044AC ; =============== S U B R O U T I N E =======================================
.text:000044AC
.text:000044AC ; Attributes: bp-based frame
.text:000044AC
.text:000044AC                 public _share_ndownstreams
.text:000044AC _share_ndownstreams proc near
.text:000044AC
.text:000044AC var_4           = dword ptr -4
.text:000044AC arg_0           = dword ptr  8
.text:000044AC
.text:000044AC                 push    ebp
.text:000044AD                 mov     ebp, esp
.text:000044AF                 push    ecx
.text:000044B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044B7                 mov     eax, [ebp+arg_0]
.text:000044BA                 mov     [ebp+var_4], eax
.text:000044BD                 mov     ecx, [ebp+var_4]
.text:000044C0                 mov     edx, [ecx+0Ch]
.text:000044C3                 push    edx
.text:000044C4                 call    _count234
.text:000044C9                 add     esp, 4
.text:000044CC                 add     esp, 4
.text:000044CF                 cmp     ebp, esp
.text:000044D1                 call    __RTC_CheckEsp
.text:000044D6                 mov     esp, ebp
.text:000044D8                 pop     ebp
.text:000044D9                 retn
.text:000044D9 _share_ndownstreams endp
.text:000044D9
.text:000044D9 ; ---------------------------------------------------------------------------
.text:000044DA                 align 4
.text:000044DC
.text:000044DC ; =============== S U B R O U T I N E =======================================
.text:000044DC
.text:000044DC ; Attributes: bp-based frame
.text:000044DC
.text:000044DC ; int __cdecl share_activate(int, char *Str)
.text:000044DC                 public _share_activate
.text:000044DC _share_activate proc near
.text:000044DC
.text:000044DC var_C           = dword ptr -0Ch
.text:000044DC var_8           = dword ptr -8
.text:000044DC var_4           = dword ptr -4
.text:000044DC arg_0           = dword ptr  8
.text:000044DC Str             = dword ptr  0Ch
.text:000044DC
.text:000044DC                 push    ebp
.text:000044DD                 mov     ebp, esp
.text:000044DF                 sub     esp, 0Ch
.text:000044E2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000044E9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000044F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044F7                 mov     eax, [ebp+arg_0]
.text:000044FA                 mov     [ebp+var_4], eax
.text:000044FD                 mov     [ebp+var_C], 0
.text:00004504                 jmp     short loc_450F
.text:00004506 ; ---------------------------------------------------------------------------
.text:00004506
.text:00004506 loc_4506:                               ; CODE XREF: _share_activate:loc_453Fj
.text:00004506                 mov     ecx, [ebp+var_C]
.text:00004509                 add     ecx, 1
.text:0000450C                 mov     [ebp+var_C], ecx
.text:0000450F
.text:0000450F loc_450F:                               ; CODE XREF: _share_activate+28j
.text:0000450F                 cmp     [ebp+var_C], 2
.text:00004513                 jge     short loc_4541
.text:00004515                 push    offset $SG88388 ; Control
.text:0000451A                 mov     edx, [ebp+Str]
.text:0000451D                 push    edx             ; Str
.text:0000451E                 call    _strcspn
.text:00004523                 add     esp, 8
.text:00004526                 add     eax, [ebp+Str]
.text:00004529                 mov     [ebp+Str], eax
.text:0000452C                 mov     eax, [ebp+Str]
.text:0000452F                 movsx   ecx, byte ptr [eax]
.text:00004532                 test    ecx, ecx
.text:00004534                 jz      short loc_453F
.text:00004536                 mov     edx, [ebp+Str]
.text:00004539                 add     edx, 1
.text:0000453C                 mov     [ebp+Str], edx
.text:0000453F
.text:0000453F loc_453F:                               ; CODE XREF: _share_activate+58j
.text:0000453F                 jmp     short loc_4506
.text:00004541 ; ---------------------------------------------------------------------------
.text:00004541
.text:00004541 loc_4541:                               ; CODE XREF: _share_activate+37j
.text:00004541                 mov     eax, [ebp+Str]
.text:00004544                 push    eax
.text:00004545                 call    _dupstr
.text:0000454A                 add     esp, 4
.text:0000454D                 mov     ecx, [ebp+var_4]
.text:00004550                 mov     [ecx+18h], eax
.text:00004553                 mov     [ebp+var_C], 0
.text:0000455A                 jmp     short loc_4565
.text:0000455C ; ---------------------------------------------------------------------------
.text:0000455C
.text:0000455C loc_455C:                               ; CODE XREF: _share_activate+D1j
.text:0000455C                 mov     edx, [ebp+var_C]
.text:0000455F                 add     edx, 1
.text:00004562                 mov     [ebp+var_C], edx
.text:00004565
.text:00004565 loc_4565:                               ; CODE XREF: _share_activate+7Ej
.text:00004565                 mov     eax, [ebp+var_C]
.text:00004568                 push    eax
.text:00004569                 mov     ecx, [ebp+var_4]
.text:0000456C                 mov     edx, [ecx+0Ch]
.text:0000456F                 push    edx
.text:00004570                 call    _index234
.text:00004575                 add     esp, 8
.text:00004578                 mov     [ebp+var_8], eax
.text:0000457B                 cmp     [ebp+var_8], 0
.text:0000457F                 jz      short loc_45AF
.text:00004581                 mov     eax, [ebp+var_8]
.text:00004584                 cmp     dword ptr [eax+14h], 0
.text:00004588                 jz      short loc_45A1
.text:0000458A                 push    775h            ; Line
.text:0000458F                 push    offset $SG88396 ; "..\\..\\..\\sshshare.c"
.text:00004594                 push    offset $SG88397 ; "!cs->sent_verstring"
.text:00004599                 call    __wassert
.text:0000459E ; ---------------------------------------------------------------------------
.text:0000459E                 add     esp, 0Ch
.text:000045A1
.text:000045A1 loc_45A1:                               ; CODE XREF: _share_activate+ACj
.text:000045A1                 mov     edx, [ebp+var_8]
.text:000045A4                 push    edx
.text:000045A5                 call    _share_send_verstring
.text:000045AA                 add     esp, 4
.text:000045AD                 jmp     short loc_455C
.text:000045AF ; ---------------------------------------------------------------------------
.text:000045AF
.text:000045AF loc_45AF:                               ; CODE XREF: _share_activate+A3j
.text:000045AF                 add     esp, 0Ch
.text:000045B2                 cmp     ebp, esp
.text:000045B4                 call    __RTC_CheckEsp
.text:000045B9                 mov     esp, ebp
.text:000045BB                 pop     ebp
.text:000045BC                 retn
.text:000045BC _share_activate endp
.text:000045BC
.text:000045BC ; ---------------------------------------------------------------------------
.text:000045BD                 db 0Fh dup(0CCh)
.text:000045CC
.text:000045CC ; =============== S U B R O U T I N E =======================================
.text:000045CC
.text:000045CC ; Attributes: bp-based frame
.text:000045CC
.text:000045CC _share_send_verstring proc near         ; CODE XREF: _share_activate+C9p
.text:000045CC                                         ; _share_listen_accepting+176p
.text:000045CC
.text:000045CC Str             = dword ptr -4
.text:000045CC arg_0           = dword ptr  8
.text:000045CC
.text:000045CC                 push    ebp
.text:000045CD                 mov     ebp, esp
.text:000045CF                 push    ecx
.text:000045D0                 push    esi
.text:000045D1                 mov     [ebp+Str], 0CCCCCCCCh
.text:000045D8                 push    0
.text:000045DA                 push    offset $SG88369
.text:000045DF                 mov     eax, [ebp+arg_0]
.text:000045E2                 mov     ecx, [eax+0Ch]
.text:000045E5                 mov     edx, [ecx+18h]
.text:000045E8                 push    edx
.text:000045E9                 push    offset $SG88370 ; "SSHCONNECTION@putty.projects.tartarus.o"...
.text:000045EE                 call    _dupcat
.text:000045F3                 add     esp, 10h
.text:000045F6                 mov     [ebp+Str], eax
.text:000045F9                 mov     eax, [ebp+Str]
.text:000045FC                 push    eax             ; Str
.text:000045FD                 call    _strlen
.text:00004602                 add     esp, 4
.text:00004605                 mov     esi, esp
.text:00004607                 push    eax
.text:00004608                 mov     ecx, [ebp+Str]
.text:0000460B                 push    ecx
.text:0000460C                 mov     edx, [ebp+arg_0]
.text:0000460F                 mov     eax, [edx+8]
.text:00004612                 push    eax
.text:00004613                 mov     ecx, [ebp+arg_0]
.text:00004616                 mov     edx, [ecx+8]
.text:00004619                 mov     eax, [edx]
.text:0000461B                 mov     ecx, [eax+8]
.text:0000461E                 call    ecx
.text:00004620                 add     esp, 0Ch
.text:00004623                 cmp     esi, esp
.text:00004625                 call    __RTC_CheckEsp
.text:0000462A                 mov     edx, [ebp+Str]
.text:0000462D                 push    edx
.text:0000462E                 call    _safefree
.text:00004633                 add     esp, 4
.text:00004636                 mov     eax, [ebp+arg_0]
.text:00004639                 mov     dword ptr [eax+14h], 1
.text:00004640                 pop     esi
.text:00004641                 add     esp, 4
.text:00004644                 cmp     ebp, esp
.text:00004646                 call    __RTC_CheckEsp
.text:0000464B                 mov     esp, ebp
.text:0000464D                 pop     ebp
.text:0000464E                 retn
.text:0000464E _share_send_verstring endp
.text:0000464E
.text:0000464E ; ---------------------------------------------------------------------------
.text:0000464F                 db 0Dh dup(0CCh)
.text:0000465C
.text:0000465C ; =============== S U B R O U T I N E =======================================
.text:0000465C
.text:0000465C ; Attributes: bp-based frame
.text:0000465C
.text:0000465C _share_listen_accepting proc near       ; DATA XREF: .rdata:00000984o
.text:0000465C
.text:0000465C var_14          = dword ptr -14h
.text:0000465C var_10          = dword ptr -10h
.text:0000465C var_C           = dword ptr -0Ch
.text:0000465C var_8           = dword ptr -8
.text:0000465C var_4           = dword ptr -4
.text:0000465C arg_0           = dword ptr  8
.text:0000465C arg_4           = dword ptr  0Ch
.text:0000465C arg_8           = dword ptr  10h
.text:0000465C
.text:0000465C                 push    ebp
.text:0000465D                 mov     ebp, esp
.text:0000465F                 sub     esp, 14h
.text:00004662                 push    esi
.text:00004663                 mov     eax, 0CCCCCCCCh
.text:00004668                 mov     [ebp+var_14], eax
.text:0000466B                 mov     [ebp+var_10], eax
.text:0000466E                 mov     [ebp+var_C], eax
.text:00004671                 mov     [ebp+var_8], eax
.text:00004674                 mov     [ebp+var_4], eax
.text:00004677                 mov     eax, [ebp+arg_0]
.text:0000467A                 mov     [ebp+var_4], eax
.text:0000467D                 push    4054h
.text:00004682                 push    1
.text:00004684                 call    _safemalloc
.text:00004689                 add     esp, 8
.text:0000468C                 mov     [ebp+var_8], eax
.text:0000468F                 mov     ecx, [ebp+var_8]
.text:00004692                 mov     dword ptr [ecx], offset ?connection_fn_table@?1??share_listen_accepting@@9@9 ; `share_listen_accepting'::`2'::connection_fn_table
.text:00004698                 mov     edx, [ebp+var_8]
.text:0000469B                 mov     eax, [ebp+var_4]
.text:0000469E                 mov     [edx+0Ch], eax
.text:000046A1                 mov     ecx, [ebp+var_4]
.text:000046A4                 mov     edx, [ecx+10h]
.text:000046A7                 push    edx
.text:000046A8                 mov     eax, [ebp+var_4]
.text:000046AB                 push    eax
.text:000046AC                 call    _share_find_unused_id
.text:000046B1                 add     esp, 8
.text:000046B4                 mov     [ebp+var_10], eax
.text:000046B7                 mov     ecx, [ebp+var_8]
.text:000046BA                 mov     edx, [ebp+var_10]
.text:000046BD                 mov     [ecx+4], edx
.text:000046C0                 cmp     [ebp+var_10], 0
.text:000046C4                 jnz     short loc_46FC
.text:000046C6                 push    1
.text:000046C8                 mov     eax, [ebp+var_4]
.text:000046CB                 push    eax
.text:000046CC                 call    _share_find_unused_id
.text:000046D1                 add     esp, 8
.text:000046D4                 mov     [ebp+var_14], eax
.text:000046D7                 mov     ecx, [ebp+var_8]
.text:000046DA                 mov     edx, [ebp+var_14]
.text:000046DD                 mov     [ecx+4], edx
.text:000046E0                 cmp     [ebp+var_14], 0
.text:000046E4                 jnz     short loc_46FC
.text:000046E6                 mov     eax, [ebp+var_8]
.text:000046E9                 push    eax
.text:000046EA                 call    _safefree
.text:000046EF                 add     esp, 4
.text:000046F2                 mov     eax, 1
.text:000046F7                 jmp     loc_48B1
.text:000046FC ; ---------------------------------------------------------------------------
.text:000046FC
.text:000046FC loc_46FC:                               ; CODE XREF: _share_listen_accepting+68j
.text:000046FC                                         ; _share_listen_accepting+88j
.text:000046FC                 mov     ecx, [ebp+var_8]
.text:000046FF                 mov     edx, [ecx+4]
.text:00004702                 add     edx, 1
.text:00004705                 mov     eax, [ebp+var_4]
.text:00004708                 mov     [eax+10h], edx
.text:0000470B                 mov     ecx, [ebp+var_4]
.text:0000470E                 cmp     dword ptr [ecx+10h], 0
.text:00004712                 jnz     short loc_4723
.text:00004714                 mov     edx, [ebp+var_4]
.text:00004717                 mov     eax, [edx+10h]
.text:0000471A                 add     eax, 1
.text:0000471D                 mov     ecx, [ebp+var_4]
.text:00004720                 mov     [ecx+10h], eax
.text:00004723
.text:00004723 loc_4723:                               ; CODE XREF: _share_listen_accepting+B6j
.text:00004723                 mov     esi, esp
.text:00004725                 mov     edx, [ebp+var_8]
.text:00004728                 push    edx
.text:00004729                 mov     eax, [ebp+arg_8]
.text:0000472C                 push    eax
.text:0000472D                 call    [ebp+arg_4]
.text:00004730                 add     esp, 8
.text:00004733                 cmp     esi, esp
.text:00004735                 call    __RTC_CheckEsp
.text:0000473A                 mov     ecx, [ebp+var_8]
.text:0000473D                 mov     [ecx+8], eax
.text:00004740                 mov     esi, esp
.text:00004742                 mov     edx, [ebp+var_8]
.text:00004745                 mov     eax, [edx+8]
.text:00004748                 push    eax
.text:00004749                 mov     ecx, [ebp+var_8]
.text:0000474C                 mov     edx, [ecx+8]
.text:0000474F                 mov     eax, [edx]
.text:00004751                 mov     ecx, [eax+1Ch]
.text:00004754                 call    ecx
.text:00004756                 add     esp, 4
.text:00004759                 cmp     esi, esp
.text:0000475B                 call    __RTC_CheckEsp
.text:00004760                 mov     [ebp+var_C], eax
.text:00004763                 cmp     [ebp+var_C], 0
.text:00004767                 jz      short loc_4783
.text:00004769                 mov     edx, [ebp+var_8]
.text:0000476C                 push    edx
.text:0000476D                 call    _safefree
.text:00004772                 add     esp, 4
.text:00004775                 xor     eax, eax
.text:00004777                 cmp     [ebp+var_C], 0
.text:0000477B                 setnz   al
.text:0000477E                 jmp     loc_48B1
.text:00004783 ; ---------------------------------------------------------------------------
.text:00004783
.text:00004783 loc_4783:                               ; CODE XREF: _share_listen_accepting+10Bj
.text:00004783                 mov     esi, esp
.text:00004785                 push    0
.text:00004787                 mov     eax, [ebp+var_8]
.text:0000478A                 mov     ecx, [eax+8]
.text:0000478D                 push    ecx
.text:0000478E                 mov     edx, [ebp+var_8]
.text:00004791                 mov     eax, [edx+8]
.text:00004794                 mov     ecx, [eax]
.text:00004796                 mov     edx, [ecx+18h]
.text:00004799                 call    edx
.text:0000479B                 add     esp, 8
.text:0000479E                 cmp     esi, esp
.text:000047A0                 call    __RTC_CheckEsp
.text:000047A5                 mov     eax, [ebp+var_8]
.text:000047A8                 push    eax
.text:000047A9                 mov     ecx, [ebp+var_8]
.text:000047AC                 mov     edx, [ecx+0Ch]
.text:000047AF                 mov     eax, [edx+0Ch]
.text:000047B2                 push    eax
.text:000047B3                 call    _add234
.text:000047B8                 add     esp, 8
.text:000047BB                 mov     ecx, [ebp+var_8]
.text:000047BE                 mov     dword ptr [ecx+14h], 0
.text:000047C5                 mov     edx, [ebp+var_4]
.text:000047C8                 cmp     dword ptr [edx+18h], 0
.text:000047CC                 jz      short loc_47DA
.text:000047CE                 mov     eax, [ebp+var_8]
.text:000047D1                 push    eax
.text:000047D2                 call    _share_send_verstring
.text:000047D7                 add     esp, 4
.text:000047DA
.text:000047DA loc_47DA:                               ; CODE XREF: _share_listen_accepting+170j
.text:000047DA                 mov     ecx, [ebp+var_8]
.text:000047DD                 mov     dword ptr [ecx+18h], 0
.text:000047E4                 mov     edx, [ebp+var_8]
.text:000047E7                 mov     dword ptr [edx+4030h], 0
.text:000047F1                 mov     eax, [ebp+var_8]
.text:000047F4                 mov     dword ptr [eax+10h], 0
.text:000047FB                 push    offset _share_halfchannel_cmp
.text:00004800                 call    _newtree234
.text:00004805                 add     esp, 4
.text:00004808                 mov     ecx, [ebp+var_8]
.text:0000480B                 mov     [ecx+4034h], eax
.text:00004811                 push    offset _share_channel_us_cmp
.text:00004816                 call    _newtree234
.text:0000481B                 add     esp, 4
.text:0000481E                 mov     edx, [ebp+var_8]
.text:00004821                 mov     [edx+4038h], eax
.text:00004827                 push    offset _share_channel_server_cmp
.text:0000482C                 call    _newtree234
.text:00004831                 add     esp, 4
.text:00004834                 mov     ecx, [ebp+var_8]
.text:00004837                 mov     [ecx+403Ch], eax
.text:0000483D                 push    offset _share_xchannel_us_cmp
.text:00004842                 call    _newtree234
.text:00004847                 add     esp, 4
.text:0000484A                 mov     edx, [ebp+var_8]
.text:0000484D                 mov     [edx+4040h], eax
.text:00004853                 push    offset _share_xchannel_server_cmp
.text:00004858                 call    _newtree234
.text:0000485D                 add     esp, 4
.text:00004860                 mov     ecx, [ebp+var_8]
.text:00004863                 mov     [ecx+4044h], eax
.text:00004869                 push    offset _share_forwarding_cmp
.text:0000486E                 call    _newtree234
.text:00004873                 add     esp, 4
.text:00004876                 mov     edx, [ebp+var_8]
.text:00004879                 mov     [edx+4048h], eax
.text:0000487F                 mov     eax, [ebp+var_8]
.text:00004882                 mov     dword ptr [eax+4050h], 0
.text:0000488C                 mov     ecx, [ebp+var_8]
.text:0000488F                 mov     dword ptr [ecx+404Ch], 0
.text:00004899                 mov     edx, [ebp+var_8]
.text:0000489C                 mov     eax, [edx+4]
.text:0000489F                 push    eax
.text:000048A0                 mov     ecx, [ebp+var_4]
.text:000048A3                 mov     edx, [ecx+14h]
.text:000048A6                 push    edx
.text:000048A7                 call    _ssh_sharing_downstream_connected
.text:000048AC                 add     esp, 8
.text:000048AF                 xor     eax, eax
.text:000048B1
.text:000048B1 loc_48B1:                               ; CODE XREF: _share_listen_accepting+9Bj
.text:000048B1                                         ; _share_listen_accepting+122j
.text:000048B1                 pop     esi
.text:000048B2                 add     esp, 14h
.text:000048B5                 cmp     ebp, esp
.text:000048B7                 call    __RTC_CheckEsp
.text:000048BC                 mov     esp, ebp
.text:000048BE                 pop     ebp
.text:000048BF                 retn
.text:000048BF _share_listen_accepting endp
.text:000048BF
.text:000048BF ; ---------------------------------------------------------------------------
.text:000048C0                 db 0Ch dup(0CCh)
.text:000048CC
.text:000048CC ; =============== S U B R O U T I N E =======================================
.text:000048CC
.text:000048CC ; Attributes: bp-based frame
.text:000048CC
.text:000048CC _share_find_unused_id proc near         ; CODE XREF: _share_listen_accepting+50p
.text:000048CC                                         ; _share_listen_accepting+70p
.text:000048CC
.text:000048CC var_80E0        = byte ptr -80E0h
.text:000048CC var_80DC        = byte ptr -80DCh
.text:000048CC var_80D8        = dword ptr -80D8h
.text:000048CC var_4080        = byte ptr -4080h
.text:000048CC var_407C        = dword ptr -407Ch
.text:000048CC var_28          = dword ptr -28h
.text:000048CC var_24          = dword ptr -24h
.text:000048CC var_20          = dword ptr -20h
.text:000048CC var_1C          = dword ptr -1Ch
.text:000048CC var_18          = dword ptr -18h
.text:000048CC var_14          = dword ptr -14h
.text:000048CC var_C           = dword ptr -0Ch
.text:000048CC var_4           = dword ptr -4
.text:000048CC arg_0           = dword ptr  8
.text:000048CC arg_4           = dword ptr  0Ch
.text:000048CC
.text:000048CC                 push    ebp
.text:000048CD                 mov     ebp, esp
.text:000048CF                 mov     eax, 80E0h
.text:000048D4                 call    __chkstk
.text:000048D9                 push    edi
.text:000048DA                 lea     edi, [ebp+var_80E0]
.text:000048E0                 mov     ecx, 2038h
.text:000048E5                 mov     eax, 0CCCCCCCCh
.text:000048EA                 rep stosd
.text:000048EC                 mov     eax, dword ptr ds:___security_cookie
.text:000048F1                 xor     eax, ebp
.text:000048F3                 mov     [ebp+var_4], eax
.text:000048F6                 mov     eax, [ebp+arg_4]
.text:000048F9                 mov     [ebp+var_407C], eax
.text:000048FF                 lea     ecx, [ebp+var_C]
.text:00004902                 push    ecx
.text:00004903                 push    4
.text:00004905                 push    0
.text:00004907                 lea     edx, [ebp+var_4080]
.text:0000490D                 push    edx
.text:0000490E                 mov     eax, [ebp+arg_0]
.text:00004911                 mov     ecx, [eax+0Ch]
.text:00004914                 push    ecx
.text:00004915                 call    _findrelpos234
.text:0000491A                 add     esp, 14h
.text:0000491D                 mov     [ebp+var_24], eax
.text:00004920                 cmp     [ebp+var_24], 0
.text:00004924                 jnz     short loc_492E
.text:00004926                 mov     eax, [ebp+arg_4]
.text:00004929                 jmp     loc_49EB
.text:0000492E ; ---------------------------------------------------------------------------
.text:0000492E
.text:0000492E loc_492E:                               ; CODE XREF: _share_find_unused_id+58j
.text:0000492E                 mov     edx, [ebp+var_C]
.text:00004931                 mov     [ebp+var_14], edx
.text:00004934                 mov     eax, [ebp+arg_0]
.text:00004937                 mov     ecx, [eax+0Ch]
.text:0000493A                 push    ecx
.text:0000493B                 call    _count234
.text:00004940                 add     esp, 4
.text:00004943                 mov     [ebp+var_20], eax
.text:00004946                 mov     edx, [ebp+var_20]
.text:00004949                 mov     [ebp+var_1C], edx
.text:0000494C
.text:0000494C loc_494C:                               ; CODE XREF: _share_find_unused_id:loc_499Aj
.text:0000494C                 mov     eax, [ebp+var_1C]
.text:0000494F                 sub     eax, [ebp+var_14]
.text:00004952                 cmp     eax, 1
.text:00004955                 jle     short loc_499C
.text:00004957                 mov     eax, [ebp+var_1C]
.text:0000495A                 add     eax, [ebp+var_14]
.text:0000495D                 cdq
.text:0000495E                 sub     eax, edx
.text:00004960                 sar     eax, 1
.text:00004962                 mov     [ebp+var_18], eax
.text:00004965                 mov     ecx, [ebp+var_18]
.text:00004968                 push    ecx
.text:00004969                 mov     edx, [ebp+arg_0]
.text:0000496C                 mov     eax, [edx+0Ch]
.text:0000496F                 push    eax
.text:00004970                 call    _index234
.text:00004975                 add     esp, 8
.text:00004978                 mov     [ebp+var_24], eax
.text:0000497B                 mov     ecx, [ebp+var_18]
.text:0000497E                 sub     ecx, [ebp+var_C]
.text:00004981                 add     ecx, [ebp+arg_4]
.text:00004984                 mov     edx, [ebp+var_24]
.text:00004987                 cmp     [edx+4], ecx
.text:0000498A                 jnz     short loc_4994
.text:0000498C                 mov     eax, [ebp+var_18]
.text:0000498F                 mov     [ebp+var_14], eax
.text:00004992                 jmp     short loc_499A
.text:00004994 ; ---------------------------------------------------------------------------
.text:00004994
.text:00004994 loc_4994:                               ; CODE XREF: _share_find_unused_id+BEj
.text:00004994                 mov     ecx, [ebp+var_18]
.text:00004997                 mov     [ebp+var_1C], ecx
.text:0000499A
.text:0000499A loc_499A:                               ; CODE XREF: _share_find_unused_id+C6j
.text:0000499A                 jmp     short loc_494C
.text:0000499C ; ---------------------------------------------------------------------------
.text:0000499C
.text:0000499C loc_499C:                               ; CODE XREF: _share_find_unused_id+89j
.text:0000499C                 mov     edx, [ebp+var_14]
.text:0000499F                 sub     edx, [ebp+var_C]
.text:000049A2                 mov     eax, [ebp+arg_4]
.text:000049A5                 lea     ecx, [eax+edx+1]
.text:000049A9                 mov     [ebp+var_28], ecx
.text:000049AC                 mov     edx, [ebp+var_28]
.text:000049AF                 mov     [ebp+var_80D8], edx
.text:000049B5                 push    0
.text:000049B7                 lea     eax, [ebp+var_80DC]
.text:000049BD                 push    eax
.text:000049BE                 mov     ecx, [ebp+arg_0]
.text:000049C1                 mov     edx, [ecx+0Ch]
.text:000049C4                 push    edx
.text:000049C5                 call    _find234
.text:000049CA                 add     esp, 0Ch
.text:000049CD                 test    eax, eax
.text:000049CF                 jz      short loc_49E8
.text:000049D1                 push    171h            ; Line
.text:000049D6                 push    offset $SG87174 ; "..\\..\\..\\sshshare.c"
.text:000049DB                 push    offset $SG87175 ; "NULL == find234(sharestate->connections"...
.text:000049E0                 call    __wassert
.text:000049E5 ; ---------------------------------------------------------------------------
.text:000049E5                 add     esp, 0Ch
.text:000049E8
.text:000049E8 loc_49E8:                               ; CODE XREF: _share_find_unused_id+103j
.text:000049E8                 mov     eax, [ebp+var_28]
.text:000049EB
.text:000049EB loc_49EB:                               ; CODE XREF: _share_find_unused_id+5Dj
.text:000049EB                 push    edx
.text:000049EC                 mov     ecx, ebp
.text:000049EE                 push    eax
.text:000049EF                 lea     edx, $LN13_0
.text:000049F5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000049FA                 pop     eax
.text:000049FB                 pop     edx
.text:000049FC                 pop     edi
.text:000049FD                 mov     ecx, [ebp+var_4]
.text:00004A00                 xor     ecx, ebp
.text:00004A02                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004A07                 add     esp, 80E0h
.text:00004A0D                 cmp     ebp, esp
.text:00004A0F                 call    __RTC_CheckEsp
.text:00004A14                 mov     esp, ebp
.text:00004A16                 pop     ebp
.text:00004A17                 retn
.text:00004A17 _share_find_unused_id endp
.text:00004A17
.text:00004A17 ; ---------------------------------------------------------------------------
.text:00004A18 $LN13_0         dd 3                    ; DATA XREF: _share_find_unused_id+123o
.text:00004A1C                 dd offset $LN12_0
.text:00004A20 $LN12_0         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00004A1Co
.text:00004A28                 dd offset $LN9          ; "low_orig"
.text:00004A2C                 dd 0FFFFBF80h, 4054h
.text:00004A34                 dd offset $LN10_0       ; "dummy"
.text:00004A38                 dd 0FFFF7F24h, 4054h
.text:00004A40                 dd offset $LN11_0       ; "dummy"
.text:00004A44 $LN11_0         db 'dummy',0            ; DATA XREF: .text:00004A40o
.text:00004A4A $LN10_0         db 'dummy',0            ; DATA XREF: .text:00004A34o
.text:00004A50 $LN9            db 'low_orig',0         ; DATA XREF: .text:00004A28o
.text:00004A59                 align 4
.text:00004A5C
.text:00004A5C ; =============== S U B R O U T I N E =======================================
.text:00004A5C
.text:00004A5C ; Attributes: bp-based frame
.text:00004A5C
.text:00004A5C _share_halfchannel_cmp proc near        ; DATA XREF: _share_listen_accepting+19Fo
.text:00004A5C
.text:00004A5C var_8           = dword ptr -8
.text:00004A5C var_4           = dword ptr -4
.text:00004A5C arg_0           = dword ptr  8
.text:00004A5C arg_4           = dword ptr  0Ch
.text:00004A5C
.text:00004A5C                 push    ebp
.text:00004A5D                 mov     ebp, esp
.text:00004A5F                 sub     esp, 8
.text:00004A62                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A70                 mov     eax, [ebp+arg_0]
.text:00004A73                 mov     [ebp+var_4], eax
.text:00004A76                 mov     ecx, [ebp+arg_4]
.text:00004A79                 mov     [ebp+var_8], ecx
.text:00004A7C                 mov     edx, [ebp+var_4]
.text:00004A7F                 mov     eax, [ebp+var_8]
.text:00004A82                 mov     ecx, [edx]
.text:00004A84                 cmp     ecx, [eax]
.text:00004A86                 jnb     short loc_4A8F
.text:00004A88                 or      eax, 0FFFFFFFFh
.text:00004A8B                 jmp     short loc_4AA6
.text:00004A8D ; ---------------------------------------------------------------------------
.text:00004A8D                 jmp     short loc_4AA6
.text:00004A8F ; ---------------------------------------------------------------------------
.text:00004A8F
.text:00004A8F loc_4A8F:                               ; CODE XREF: _share_halfchannel_cmp+2Aj
.text:00004A8F                 mov     edx, [ebp+var_4]
.text:00004A92                 mov     eax, [ebp+var_8]
.text:00004A95                 mov     ecx, [edx]
.text:00004A97                 cmp     ecx, [eax]
.text:00004A99                 jbe     short loc_4AA4
.text:00004A9B                 mov     eax, 1
.text:00004AA0                 jmp     short loc_4AA6
.text:00004AA2 ; ---------------------------------------------------------------------------
.text:00004AA2                 jmp     short loc_4AA6
.text:00004AA4 ; ---------------------------------------------------------------------------
.text:00004AA4
.text:00004AA4 loc_4AA4:                               ; CODE XREF: _share_halfchannel_cmp+3Dj
.text:00004AA4                 xor     eax, eax
.text:00004AA6
.text:00004AA6 loc_4AA6:                               ; CODE XREF: _share_halfchannel_cmp+2Fj
.text:00004AA6                                         ; _share_halfchannel_cmp+31j ...
.text:00004AA6                 mov     esp, ebp
.text:00004AA8                 pop     ebp
.text:00004AA9                 retn
.text:00004AA9 _share_halfchannel_cmp endp
.text:00004AA9
.text:00004AA9 ; ---------------------------------------------------------------------------
.text:00004AAA                 align 4
.text:00004AAC
.text:00004AAC ; =============== S U B R O U T I N E =======================================
.text:00004AAC
.text:00004AAC ; Attributes: bp-based frame
.text:00004AAC
.text:00004AAC _share_channel_us_cmp proc near         ; DATA XREF: _share_listen_accepting+1B5o
.text:00004AAC
.text:00004AAC var_8           = dword ptr -8
.text:00004AAC var_4           = dword ptr -4
.text:00004AAC arg_0           = dword ptr  8
.text:00004AAC arg_4           = dword ptr  0Ch
.text:00004AAC
.text:00004AAC                 push    ebp
.text:00004AAD                 mov     ebp, esp
.text:00004AAF                 sub     esp, 8
.text:00004AB2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004AB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AC0                 mov     eax, [ebp+arg_0]
.text:00004AC3                 mov     [ebp+var_4], eax
.text:00004AC6                 mov     ecx, [ebp+arg_4]
.text:00004AC9                 mov     [ebp+var_8], ecx
.text:00004ACC                 mov     edx, [ebp+var_4]
.text:00004ACF                 mov     eax, [ebp+var_8]
.text:00004AD2                 mov     ecx, [edx+4]
.text:00004AD5                 cmp     ecx, [eax+4]
.text:00004AD8                 jnb     short loc_4AE1
.text:00004ADA                 or      eax, 0FFFFFFFFh
.text:00004ADD                 jmp     short loc_4AFA
.text:00004ADF ; ---------------------------------------------------------------------------
.text:00004ADF                 jmp     short loc_4AFA
.text:00004AE1 ; ---------------------------------------------------------------------------
.text:00004AE1
.text:00004AE1 loc_4AE1:                               ; CODE XREF: _share_channel_us_cmp+2Cj
.text:00004AE1                 mov     edx, [ebp+var_4]
.text:00004AE4                 mov     eax, [ebp+var_8]
.text:00004AE7                 mov     ecx, [edx+4]
.text:00004AEA                 cmp     ecx, [eax+4]
.text:00004AED                 jbe     short loc_4AF8
.text:00004AEF                 mov     eax, 1
.text:00004AF4                 jmp     short loc_4AFA
.text:00004AF6 ; ---------------------------------------------------------------------------
.text:00004AF6                 jmp     short loc_4AFA
.text:00004AF8 ; ---------------------------------------------------------------------------
.text:00004AF8
.text:00004AF8 loc_4AF8:                               ; CODE XREF: _share_channel_us_cmp+41j
.text:00004AF8                 xor     eax, eax
.text:00004AFA
.text:00004AFA loc_4AFA:                               ; CODE XREF: _share_channel_us_cmp+31j
.text:00004AFA                                         ; _share_channel_us_cmp+33j ...
.text:00004AFA                 mov     esp, ebp
.text:00004AFC                 pop     ebp
.text:00004AFD                 retn
.text:00004AFD _share_channel_us_cmp endp
.text:00004AFD
.text:00004AFD ; ---------------------------------------------------------------------------
.text:00004AFE                 db 0Eh dup(0CCh)
.text:00004B0C
.text:00004B0C ; =============== S U B R O U T I N E =======================================
.text:00004B0C
.text:00004B0C ; Attributes: bp-based frame
.text:00004B0C
.text:00004B0C _share_channel_server_cmp proc near     ; DATA XREF: _share_listen_accepting+1CBo
.text:00004B0C
.text:00004B0C var_8           = dword ptr -8
.text:00004B0C var_4           = dword ptr -4
.text:00004B0C arg_0           = dword ptr  8
.text:00004B0C arg_4           = dword ptr  0Ch
.text:00004B0C
.text:00004B0C                 push    ebp
.text:00004B0D                 mov     ebp, esp
.text:00004B0F                 sub     esp, 8
.text:00004B12                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B19                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B20                 mov     eax, [ebp+arg_0]
.text:00004B23                 mov     [ebp+var_4], eax
.text:00004B26                 mov     ecx, [ebp+arg_4]
.text:00004B29                 mov     [ebp+var_8], ecx
.text:00004B2C                 mov     edx, [ebp+var_4]
.text:00004B2F                 mov     eax, [ebp+var_8]
.text:00004B32                 mov     ecx, [edx+8]
.text:00004B35                 cmp     ecx, [eax+8]
.text:00004B38                 jnb     short loc_4B41
.text:00004B3A                 or      eax, 0FFFFFFFFh
.text:00004B3D                 jmp     short loc_4B5A
.text:00004B3F ; ---------------------------------------------------------------------------
.text:00004B3F                 jmp     short loc_4B5A
.text:00004B41 ; ---------------------------------------------------------------------------
.text:00004B41
.text:00004B41 loc_4B41:                               ; CODE XREF: _share_channel_server_cmp+2Cj
.text:00004B41                 mov     edx, [ebp+var_4]
.text:00004B44                 mov     eax, [ebp+var_8]
.text:00004B47                 mov     ecx, [edx+8]
.text:00004B4A                 cmp     ecx, [eax+8]
.text:00004B4D                 jbe     short loc_4B58
.text:00004B4F                 mov     eax, 1
.text:00004B54                 jmp     short loc_4B5A
.text:00004B56 ; ---------------------------------------------------------------------------
.text:00004B56                 jmp     short loc_4B5A
.text:00004B58 ; ---------------------------------------------------------------------------
.text:00004B58
.text:00004B58 loc_4B58:                               ; CODE XREF: _share_channel_server_cmp+41j
.text:00004B58                 xor     eax, eax
.text:00004B5A
.text:00004B5A loc_4B5A:                               ; CODE XREF: _share_channel_server_cmp+31j
.text:00004B5A                                         ; _share_channel_server_cmp+33j ...
.text:00004B5A                 mov     esp, ebp
.text:00004B5C                 pop     ebp
.text:00004B5D                 retn
.text:00004B5D _share_channel_server_cmp endp
.text:00004B5D
.text:00004B5D ; ---------------------------------------------------------------------------
.text:00004B5E                 db 0Eh dup(0CCh)
.text:00004B6C
.text:00004B6C ; =============== S U B R O U T I N E =======================================
.text:00004B6C
.text:00004B6C ; Attributes: bp-based frame
.text:00004B6C
.text:00004B6C _share_xchannel_us_cmp proc near        ; DATA XREF: _share_listen_accepting+1E1o
.text:00004B6C
.text:00004B6C var_8           = dword ptr -8
.text:00004B6C var_4           = dword ptr -4
.text:00004B6C arg_0           = dword ptr  8
.text:00004B6C arg_4           = dword ptr  0Ch
.text:00004B6C
.text:00004B6C                 push    ebp
.text:00004B6D                 mov     ebp, esp
.text:00004B6F                 sub     esp, 8
.text:00004B72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B80                 mov     eax, [ebp+arg_0]
.text:00004B83                 mov     [ebp+var_4], eax
.text:00004B86                 mov     ecx, [ebp+arg_4]
.text:00004B89                 mov     [ebp+var_8], ecx
.text:00004B8C                 mov     edx, [ebp+var_4]
.text:00004B8F                 mov     eax, [ebp+var_8]
.text:00004B92                 mov     ecx, [edx]
.text:00004B94                 cmp     ecx, [eax]
.text:00004B96                 jnb     short loc_4B9F
.text:00004B98                 or      eax, 0FFFFFFFFh
.text:00004B9B                 jmp     short loc_4BB6
.text:00004B9D ; ---------------------------------------------------------------------------
.text:00004B9D                 jmp     short loc_4BB6
.text:00004B9F ; ---------------------------------------------------------------------------
.text:00004B9F
.text:00004B9F loc_4B9F:                               ; CODE XREF: _share_xchannel_us_cmp+2Aj
.text:00004B9F                 mov     edx, [ebp+var_4]
.text:00004BA2                 mov     eax, [ebp+var_8]
.text:00004BA5                 mov     ecx, [edx]
.text:00004BA7                 cmp     ecx, [eax]
.text:00004BA9                 jbe     short loc_4BB4
.text:00004BAB                 mov     eax, 1
.text:00004BB0                 jmp     short loc_4BB6
.text:00004BB2 ; ---------------------------------------------------------------------------
.text:00004BB2                 jmp     short loc_4BB6
.text:00004BB4 ; ---------------------------------------------------------------------------
.text:00004BB4
.text:00004BB4 loc_4BB4:                               ; CODE XREF: _share_xchannel_us_cmp+3Dj
.text:00004BB4                 xor     eax, eax
.text:00004BB6
.text:00004BB6 loc_4BB6:                               ; CODE XREF: _share_xchannel_us_cmp+2Fj
.text:00004BB6                                         ; _share_xchannel_us_cmp+31j ...
.text:00004BB6                 mov     esp, ebp
.text:00004BB8                 pop     ebp
.text:00004BB9                 retn
.text:00004BB9 _share_xchannel_us_cmp endp
.text:00004BB9
.text:00004BB9 ; ---------------------------------------------------------------------------
.text:00004BBA                 align 4
.text:00004BBC
.text:00004BBC ; =============== S U B R O U T I N E =======================================
.text:00004BBC
.text:00004BBC ; Attributes: bp-based frame
.text:00004BBC
.text:00004BBC _share_xchannel_server_cmp proc near    ; DATA XREF: _share_listen_accepting+1F7o
.text:00004BBC
.text:00004BBC var_8           = dword ptr -8
.text:00004BBC var_4           = dword ptr -4
.text:00004BBC arg_0           = dword ptr  8
.text:00004BBC arg_4           = dword ptr  0Ch
.text:00004BBC
.text:00004BBC                 push    ebp
.text:00004BBD                 mov     ebp, esp
.text:00004BBF                 sub     esp, 8
.text:00004BC2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004BC9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BD0                 mov     eax, [ebp+arg_0]
.text:00004BD3                 mov     [ebp+var_4], eax
.text:00004BD6                 mov     ecx, [ebp+arg_4]
.text:00004BD9                 mov     [ebp+var_8], ecx
.text:00004BDC                 mov     edx, [ebp+var_4]
.text:00004BDF                 mov     eax, [ebp+var_8]
.text:00004BE2                 mov     ecx, [edx+4]
.text:00004BE5                 cmp     ecx, [eax+4]
.text:00004BE8                 jnb     short loc_4BF1
.text:00004BEA                 or      eax, 0FFFFFFFFh
.text:00004BED                 jmp     short loc_4C0A
.text:00004BEF ; ---------------------------------------------------------------------------
.text:00004BEF                 jmp     short loc_4C0A
.text:00004BF1 ; ---------------------------------------------------------------------------
.text:00004BF1
.text:00004BF1 loc_4BF1:                               ; CODE XREF: _share_xchannel_server_cmp+2Cj
.text:00004BF1                 mov     edx, [ebp+var_4]
.text:00004BF4                 mov     eax, [ebp+var_8]
.text:00004BF7                 mov     ecx, [edx+4]
.text:00004BFA                 cmp     ecx, [eax+4]
.text:00004BFD                 jbe     short loc_4C08
.text:00004BFF                 mov     eax, 1
.text:00004C04                 jmp     short loc_4C0A
.text:00004C06 ; ---------------------------------------------------------------------------
.text:00004C06                 jmp     short loc_4C0A
.text:00004C08 ; ---------------------------------------------------------------------------
.text:00004C08
.text:00004C08 loc_4C08:                               ; CODE XREF: _share_xchannel_server_cmp+41j
.text:00004C08                 xor     eax, eax
.text:00004C0A
.text:00004C0A loc_4C0A:                               ; CODE XREF: _share_xchannel_server_cmp+31j
.text:00004C0A                                         ; _share_xchannel_server_cmp+33j ...
.text:00004C0A                 mov     esp, ebp
.text:00004C0C                 pop     ebp
.text:00004C0D                 retn
.text:00004C0D _share_xchannel_server_cmp endp
.text:00004C0D
.text:00004C0D ; ---------------------------------------------------------------------------
.text:00004C0E                 db 0Eh dup(0CCh)
.text:00004C1C
.text:00004C1C ; =============== S U B R O U T I N E =======================================
.text:00004C1C
.text:00004C1C ; Attributes: bp-based frame
.text:00004C1C
.text:00004C1C _share_forwarding_cmp proc near         ; DATA XREF: _share_listen_accepting+20Do
.text:00004C1C
.text:00004C1C var_C           = dword ptr -0Ch
.text:00004C1C var_8           = dword ptr -8
.text:00004C1C var_4           = dword ptr -4
.text:00004C1C arg_0           = dword ptr  8
.text:00004C1C arg_4           = dword ptr  0Ch
.text:00004C1C
.text:00004C1C                 push    ebp
.text:00004C1D                 mov     ebp, esp
.text:00004C1F                 sub     esp, 0Ch
.text:00004C22                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004C29                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004C30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C37                 mov     eax, [ebp+arg_0]
.text:00004C3A                 mov     [ebp+var_4], eax
.text:00004C3D                 mov     ecx, [ebp+arg_4]
.text:00004C40                 mov     [ebp+var_8], ecx
.text:00004C43                 mov     edx, [ebp+var_8]
.text:00004C46                 mov     eax, [edx]
.text:00004C48                 push    eax             ; Str2
.text:00004C49                 mov     ecx, [ebp+var_4]
.text:00004C4C                 mov     edx, [ecx]
.text:00004C4E                 push    edx             ; Str1
.text:00004C4F                 call    _strcmp
.text:00004C54                 add     esp, 8
.text:00004C57                 mov     [ebp+var_C], eax
.text:00004C5A                 cmp     [ebp+var_C], 0
.text:00004C5E                 jz      short loc_4C67
.text:00004C60                 mov     eax, [ebp+var_C]
.text:00004C63                 jmp     short loc_4C95
.text:00004C65 ; ---------------------------------------------------------------------------
.text:00004C65                 jmp     short loc_4C95
.text:00004C67 ; ---------------------------------------------------------------------------
.text:00004C67
.text:00004C67 loc_4C67:                               ; CODE XREF: _share_forwarding_cmp+42j
.text:00004C67                 mov     eax, [ebp+var_4]
.text:00004C6A                 mov     ecx, [ebp+var_8]
.text:00004C6D                 mov     edx, [eax+4]
.text:00004C70                 cmp     edx, [ecx+4]
.text:00004C73                 jge     short loc_4C7C
.text:00004C75                 or      eax, 0FFFFFFFFh
.text:00004C78                 jmp     short loc_4C95
.text:00004C7A ; ---------------------------------------------------------------------------
.text:00004C7A                 jmp     short loc_4C95
.text:00004C7C ; ---------------------------------------------------------------------------
.text:00004C7C
.text:00004C7C loc_4C7C:                               ; CODE XREF: _share_forwarding_cmp+57j
.text:00004C7C                 mov     eax, [ebp+var_4]
.text:00004C7F                 mov     ecx, [ebp+var_8]
.text:00004C82                 mov     edx, [eax+4]
.text:00004C85                 cmp     edx, [ecx+4]
.text:00004C88                 jle     short loc_4C93
.text:00004C8A                 mov     eax, 1
.text:00004C8F                 jmp     short loc_4C95
.text:00004C91 ; ---------------------------------------------------------------------------
.text:00004C91                 jmp     short loc_4C95
.text:00004C93 ; ---------------------------------------------------------------------------
.text:00004C93
.text:00004C93 loc_4C93:                               ; CODE XREF: _share_forwarding_cmp+6Cj
.text:00004C93                 xor     eax, eax
.text:00004C95
.text:00004C95 loc_4C95:                               ; CODE XREF: _share_forwarding_cmp+47j
.text:00004C95                                         ; _share_forwarding_cmp+49j ...
.text:00004C95                 add     esp, 0Ch
.text:00004C98                 cmp     ebp, esp
.text:00004C9A                 call    __RTC_CheckEsp
.text:00004C9F                 mov     esp, ebp
.text:00004CA1                 pop     ebp
.text:00004CA2                 retn
.text:00004CA2 _share_forwarding_cmp endp
.text:00004CA2
.text:00004CA2 ; ---------------------------------------------------------------------------
.text:00004CA3                 db 9 dup(0CCh)
.text:00004CAC
.text:00004CAC ; =============== S U B R O U T I N E =======================================
.text:00004CAC
.text:00004CAC ; Attributes: bp-based frame
.text:00004CAC
.text:00004CAC                 public _ssh_connection_sharing_init
.text:00004CAC _ssh_connection_sharing_init proc near
.text:00004CAC
.text:00004CAC var_54          = dword ptr -54h
.text:00004CAC var_50          = dword ptr -50h
.text:00004CAC var_4C          = dword ptr -4Ch
.text:00004CAC var_48          = dword ptr -48h
.text:00004CAC var_44          = dword ptr -44h
.text:00004CAC var_3C          = dword ptr -3Ch
.text:00004CAC var_34          = dword ptr -34h
.text:00004CAC var_2C          = dword ptr -2Ch
.text:00004CAC var_20          = dword ptr -20h
.text:00004CAC var_14          = dword ptr -14h
.text:00004CAC var_C           = dword ptr -0Ch
.text:00004CAC var_8           = dword ptr -8
.text:00004CAC var_4           = dword ptr -4
.text:00004CAC arg_0           = dword ptr  8
.text:00004CAC arg_4           = dword ptr  0Ch
.text:00004CAC arg_8           = dword ptr  10h
.text:00004CAC arg_C           = dword ptr  14h
.text:00004CAC arg_10          = dword ptr  18h
.text:00004CAC
.text:00004CAC                 push    ebp
.text:00004CAD                 mov     ebp, esp
.text:00004CAF                 sub     esp, 54h
.text:00004CB2                 push    edi
.text:00004CB3                 lea     edi, [ebp+var_54]
.text:00004CB6                 mov     ecx, 15h
.text:00004CBB                 mov     eax, 0CCCCCCCCh
.text:00004CC0                 rep stosd
.text:00004CC2                 push    0A4h ; 'ñ'
.text:00004CC7                 mov     eax, [ebp+arg_8]
.text:00004CCA                 push    eax
.text:00004CCB                 call    _conf_get_int
.text:00004CD0                 add     esp, 8
.text:00004CD3                 test    eax, eax
.text:00004CD5                 jnz     short loc_4CDE
.text:00004CD7                 xor     eax, eax
.text:00004CD9                 jmp     loc_4F70
.text:00004CDE ; ---------------------------------------------------------------------------
.text:00004CDE
.text:00004CDE loc_4CDE:                               ; CODE XREF: _ssh_connection_sharing_init+29j
.text:00004CDE                 cmp     dword ptr ds:_share_can_be_upstream, 0
.text:00004CE5                 jz      short loc_4D05
.text:00004CE7                 push    0A5h ; 'Ñ'
.text:00004CEC                 mov     ecx, [ebp+arg_8]
.text:00004CEF                 push    ecx
.text:00004CF0                 call    _conf_get_int
.text:00004CF5                 add     esp, 8
.text:00004CF8                 test    eax, eax
.text:00004CFA                 jz      short loc_4D05
.text:00004CFC                 mov     [ebp+var_4C], 1
.text:00004D03                 jmp     short loc_4D0C
.text:00004D05 ; ---------------------------------------------------------------------------
.text:00004D05
.text:00004D05 loc_4D05:                               ; CODE XREF: _ssh_connection_sharing_init+39j
.text:00004D05                                         ; _ssh_connection_sharing_init+4Ej
.text:00004D05                 mov     [ebp+var_4C], 0
.text:00004D0C
.text:00004D0C loc_4D0C:                               ; CODE XREF: _ssh_connection_sharing_init+57j
.text:00004D0C                 mov     edx, [ebp+var_4C]
.text:00004D0F                 mov     [ebp+var_8], edx
.text:00004D12                 cmp     dword ptr ds:_share_can_be_downstream, 0
.text:00004D19                 jz      short loc_4D39
.text:00004D1B                 push    0A6h ; 'ª'
.text:00004D20                 mov     eax, [ebp+arg_8]
.text:00004D23                 push    eax
.text:00004D24                 call    _conf_get_int
.text:00004D29                 add     esp, 8
.text:00004D2C                 test    eax, eax
.text:00004D2E                 jz      short loc_4D39
.text:00004D30                 mov     [ebp+var_50], 1
.text:00004D37                 jmp     short loc_4D40
.text:00004D39 ; ---------------------------------------------------------------------------
.text:00004D39
.text:00004D39 loc_4D39:                               ; CODE XREF: _ssh_connection_sharing_init+6Dj
.text:00004D39                                         ; _ssh_connection_sharing_init+82j
.text:00004D39                 mov     [ebp+var_50], 0
.text:00004D40
.text:00004D40 loc_4D40:                               ; CODE XREF: _ssh_connection_sharing_init+8Bj
.text:00004D40                 mov     ecx, [ebp+var_50]
.text:00004D43                 mov     [ebp+var_C], ecx
.text:00004D46                 cmp     [ebp+var_8], 0
.text:00004D4A                 jnz     short loc_4D59
.text:00004D4C                 cmp     [ebp+var_C], 0
.text:00004D50                 jnz     short loc_4D59
.text:00004D52                 xor     eax, eax
.text:00004D54                 jmp     loc_4F70
.text:00004D59 ; ---------------------------------------------------------------------------
.text:00004D59
.text:00004D59 loc_4D59:                               ; CODE XREF: _ssh_connection_sharing_init+9Ej
.text:00004D59                                         ; _ssh_connection_sharing_init+A4j
.text:00004D59                 mov     edx, [ebp+arg_8]
.text:00004D5C                 push    edx
.text:00004D5D                 call    _get_remote_username
.text:00004D62                 add     esp, 4
.text:00004D65                 mov     [ebp+var_48], eax
.text:00004D68                 cmp     [ebp+arg_4], 16h
.text:00004D6C                 jnz     short loc_4DA4
.text:00004D6E                 cmp     [ebp+var_48], 0
.text:00004D72                 jz      short loc_4D8E
.text:00004D74                 mov     eax, [ebp+arg_0]
.text:00004D77                 push    eax
.text:00004D78                 mov     ecx, [ebp+var_48]
.text:00004D7B                 push    ecx
.text:00004D7C                 push    offset $SG88458 ; "%s@%s"
.text:00004D81                 call    _dupprintf
.text:00004D86                 add     esp, 0Ch
.text:00004D89                 mov     [ebp+var_34], eax
.text:00004D8C                 jmp     short loc_4DA2
.text:00004D8E ; ---------------------------------------------------------------------------
.text:00004D8E
.text:00004D8E loc_4D8E:                               ; CODE XREF: _ssh_connection_sharing_init+C6j
.text:00004D8E                 mov     edx, [ebp+arg_0]
.text:00004D91                 push    edx
.text:00004D92                 push    offset $SG88460 ; "%s"
.text:00004D97                 call    _dupprintf
.text:00004D9C                 add     esp, 8
.text:00004D9F                 mov     [ebp+var_34], eax
.text:00004DA2
.text:00004DA2 loc_4DA2:                               ; CODE XREF: _ssh_connection_sharing_init+E0j
.text:00004DA2                 jmp     short loc_4DE0
.text:00004DA4 ; ---------------------------------------------------------------------------
.text:00004DA4
.text:00004DA4 loc_4DA4:                               ; CODE XREF: _ssh_connection_sharing_init+C0j
.text:00004DA4                 cmp     [ebp+var_48], 0
.text:00004DA8                 jz      short loc_4DC8
.text:00004DAA                 mov     eax, [ebp+arg_4]
.text:00004DAD                 push    eax
.text:00004DAE                 mov     ecx, [ebp+arg_0]
.text:00004DB1                 push    ecx
.text:00004DB2                 mov     edx, [ebp+var_48]
.text:00004DB5                 push    edx
.text:00004DB6                 push    offset $SG88463 ; "%s@%s:%d"
.text:00004DBB                 call    _dupprintf
.text:00004DC0                 add     esp, 10h
.text:00004DC3                 mov     [ebp+var_34], eax
.text:00004DC6                 jmp     short loc_4DE0
.text:00004DC8 ; ---------------------------------------------------------------------------
.text:00004DC8
.text:00004DC8 loc_4DC8:                               ; CODE XREF: _ssh_connection_sharing_init+FCj
.text:00004DC8                 mov     eax, [ebp+arg_4]
.text:00004DCB                 push    eax
.text:00004DCC                 mov     ecx, [ebp+arg_0]
.text:00004DCF                 push    ecx
.text:00004DD0                 push    offset $SG88465 ; "%s:%d"
.text:00004DD5                 call    _dupprintf
.text:00004DDA                 add     esp, 0Ch
.text:00004DDD                 mov     [ebp+var_34], eax
.text:00004DE0
.text:00004DE0 loc_4DE0:                               ; CODE XREF: _ssh_connection_sharing_init:loc_4DA2j
.text:00004DE0                                         ; _ssh_connection_sharing_init+11Aj
.text:00004DE0                 mov     edx, [ebp+var_48]
.text:00004DE3                 push    edx
.text:00004DE4                 call    _safefree
.text:00004DE9                 add     esp, 4
.text:00004DEC                 push    1Ch
.text:00004DEE                 push    1
.text:00004DF0                 call    _safemalloc
.text:00004DF5                 add     esp, 8
.text:00004DF8                 mov     [ebp+var_44], eax
.text:00004DFB                 mov     eax, [ebp+var_44]
.text:00004DFE                 mov     dword ptr [eax], offset ?listen_fn_table@?1??ssh_connection_sharing_init@@9@9 ; `ssh_connection_sharing_init'::`2'::listen_fn_table
.text:00004E04                 mov     ecx, [ebp+var_44]
.text:00004E07                 mov     dword ptr [ecx+8], 0
.text:00004E0E                 mov     [ebp+var_3C], 0
.text:00004E15                 mov     [ebp+var_2C], 0
.text:00004E1C                 mov     edx, [ebp+var_2C]
.text:00004E1F                 mov     [ebp+var_20], edx
.text:00004E22                 mov     eax, [ebp+var_20]
.text:00004E25                 mov     [ebp+var_14], eax
.text:00004E28                 mov     ecx, [ebp+var_C]
.text:00004E2B                 push    ecx
.text:00004E2C                 mov     edx, [ebp+var_8]
.text:00004E2F                 push    edx
.text:00004E30                 lea     eax, [ebp+var_2C]
.text:00004E33                 push    eax
.text:00004E34                 lea     ecx, [ebp+var_20]
.text:00004E37                 push    ecx
.text:00004E38                 lea     edx, [ebp+var_14]
.text:00004E3B                 push    edx
.text:00004E3C                 lea     eax, [ebp+var_3C]
.text:00004E3F                 push    eax
.text:00004E40                 mov     ecx, [ebp+var_44]
.text:00004E43                 push    ecx
.text:00004E44                 mov     edx, [ebp+arg_C]
.text:00004E47                 push    edx
.text:00004E48                 mov     eax, [ebp+arg_8]
.text:00004E4B                 push    eax
.text:00004E4C                 mov     ecx, [ebp+var_34]
.text:00004E4F                 push    ecx
.text:00004E50                 call    _platform_ssh_share
.text:00004E55                 add     esp, 28h
.text:00004E58                 mov     [ebp+var_4], eax
.text:00004E5B                 mov     edx, [ebp+var_2C]
.text:00004E5E                 push    edx
.text:00004E5F                 mov     eax, [ebp+var_20]
.text:00004E62                 push    eax
.text:00004E63                 mov     ecx, [ebp+var_14]
.text:00004E66                 push    ecx
.text:00004E67                 mov     edx, [ebp+var_4]
.text:00004E6A                 push    edx
.text:00004E6B                 mov     eax, [ebp+arg_C]
.text:00004E6E                 push    eax
.text:00004E6F                 call    _ssh_connshare_log
.text:00004E74                 add     esp, 14h
.text:00004E77                 mov     ecx, [ebp+var_14]
.text:00004E7A                 push    ecx
.text:00004E7B                 call    _safefree
.text:00004E80                 add     esp, 4
.text:00004E83                 mov     edx, [ebp+var_20]
.text:00004E86                 push    edx
.text:00004E87                 call    _safefree
.text:00004E8C                 add     esp, 4
.text:00004E8F                 mov     eax, [ebp+var_2C]
.text:00004E92                 push    eax
.text:00004E93                 call    _safefree
.text:00004E98                 add     esp, 4
.text:00004E9B                 mov     ecx, [ebp+var_4]
.text:00004E9E                 mov     [ebp+var_54], ecx
.text:00004EA1                 cmp     [ebp+var_54], 0
.text:00004EA5                 jz      short loc_4EB8
.text:00004EA7                 cmp     [ebp+var_54], 1
.text:00004EAB                 jz      short loc_4EFA
.text:00004EAD                 cmp     [ebp+var_54], 2
.text:00004EB1                 jz      short loc_4F20
.text:00004EB3                 jmp     loc_4F6E
.text:00004EB8 ; ---------------------------------------------------------------------------
.text:00004EB8
.text:00004EB8 loc_4EB8:                               ; CODE XREF: _ssh_connection_sharing_init+1F9j
.text:00004EB8                 cmp     [ebp+var_3C], 0
.text:00004EBC                 jz      short loc_4ED5
.text:00004EBE                 push    828h            ; Line
.text:00004EC3                 push    offset $SG88480 ; "..\\..\\..\\sshshare.c"
.text:00004EC8                 push    offset $SG88481 ; "sock == NULL"
.text:00004ECD                 call    __wassert
.text:00004ED2 ; ---------------------------------------------------------------------------
.text:00004ED2                 add     esp, 0Ch
.text:00004ED5
.text:00004ED5 loc_4ED5:                               ; CODE XREF: _ssh_connection_sharing_init+210j
.text:00004ED5                 mov     eax, [ebp+arg_10]
.text:00004ED8                 mov     dword ptr [eax], 0
.text:00004EDE                 mov     ecx, [ebp+var_44]
.text:00004EE1                 push    ecx
.text:00004EE2                 call    _safefree
.text:00004EE7                 add     esp, 4
.text:00004EEA                 mov     edx, [ebp+var_34]
.text:00004EED                 push    edx
.text:00004EEE                 call    _safefree
.text:00004EF3                 add     esp, 4
.text:00004EF6                 xor     eax, eax
.text:00004EF8                 jmp     short loc_4F70
.text:00004EFA ; ---------------------------------------------------------------------------
.text:00004EFA
.text:00004EFA loc_4EFA:                               ; CODE XREF: _ssh_connection_sharing_init+1FFj
.text:00004EFA                 mov     eax, [ebp+arg_10]
.text:00004EFD                 mov     dword ptr [eax], 0
.text:00004F03                 mov     ecx, [ebp+var_44]
.text:00004F06                 push    ecx
.text:00004F07                 call    _safefree
.text:00004F0C                 add     esp, 4
.text:00004F0F                 mov     edx, [ebp+var_34]
.text:00004F12                 push    edx
.text:00004F13                 call    _safefree
.text:00004F18                 add     esp, 4
.text:00004F1B                 mov     eax, [ebp+var_3C]
.text:00004F1E                 jmp     short loc_4F70
.text:00004F20 ; ---------------------------------------------------------------------------
.text:00004F20
.text:00004F20 loc_4F20:                               ; CODE XREF: _ssh_connection_sharing_init+205j
.text:00004F20                 mov     eax, [ebp+arg_10]
.text:00004F23                 mov     ecx, [ebp+var_44]
.text:00004F26                 mov     [eax], ecx
.text:00004F28                 mov     edx, [ebp+var_44]
.text:00004F2B                 mov     eax, [ebp+var_3C]
.text:00004F2E                 mov     [edx+8], eax
.text:00004F31                 push    offset _share_connstate_cmp
.text:00004F36                 call    _newtree234
.text:00004F3B                 add     esp, 4
.text:00004F3E                 mov     ecx, [ebp+var_44]
.text:00004F41                 mov     [ecx+0Ch], eax
.text:00004F44                 mov     edx, [ebp+var_44]
.text:00004F47                 mov     eax, [ebp+arg_C]
.text:00004F4A                 mov     [edx+14h], eax
.text:00004F4D                 mov     ecx, [ebp+var_44]
.text:00004F50                 mov     dword ptr [ecx+18h], 0
.text:00004F57                 mov     edx, [ebp+var_44]
.text:00004F5A                 mov     eax, [ebp+var_34]
.text:00004F5D                 mov     [edx+4], eax
.text:00004F60                 mov     ecx, [ebp+var_44]
.text:00004F63                 mov     dword ptr [ecx+10h], 1
.text:00004F6A                 xor     eax, eax
.text:00004F6C                 jmp     short loc_4F70
.text:00004F6E ; ---------------------------------------------------------------------------
.text:00004F6E
.text:00004F6E loc_4F6E:                               ; CODE XREF: _ssh_connection_sharing_init+207j
.text:00004F6E                 xor     eax, eax
.text:00004F70
.text:00004F70 loc_4F70:                               ; CODE XREF: _ssh_connection_sharing_init+2Dj
.text:00004F70                                         ; _ssh_connection_sharing_init+A8j ...
.text:00004F70                 push    edx
.text:00004F71                 mov     ecx, ebp
.text:00004F73                 push    eax
.text:00004F74                 lea     edx, $LN26
.text:00004F7A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004F7F                 pop     eax
.text:00004F80                 pop     edx
.text:00004F81                 pop     edi
.text:00004F82                 add     esp, 54h
.text:00004F85                 cmp     ebp, esp
.text:00004F87                 call    __RTC_CheckEsp
.text:00004F8C                 mov     esp, ebp
.text:00004F8E                 pop     ebp
.text:00004F8F                 retn
.text:00004F8F _ssh_connection_sharing_init endp
.text:00004F8F
.text:00004F8F ; ---------------------------------------------------------------------------
.text:00004F90 $LN26           dd 4                    ; DATA XREF: _ssh_connection_sharing_init+2C8o
.text:00004F94                 dd offset $LN25
.text:00004F98 $LN25           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00004F94o
.text:00004FA0                 dd offset $LN21_0       ; "logtext"
.text:00004FA4                 dd 0FFFFFFE0h, 4
.text:00004FAC                 dd offset $LN22         ; "ds_err"
.text:00004FB0                 dd 0FFFFFFD4h, 4
.text:00004FB8                 dd offset $LN23         ; "us_err"
.text:00004FBC                 dd 0FFFFFFC4h, 4
.text:00004FC4                 dd offset $LN24         ; "sock"
.text:00004FC8 $LN24           db 'sock',0             ; DATA XREF: .text:00004FC4o
.text:00004FCD $LN23           db 'us_err',0           ; DATA XREF: .text:00004FB8o
.text:00004FD4 $LN22           db 'ds_err',0           ; DATA XREF: .text:00004FACo
.text:00004FDB $LN21_0         db 'logtext',0          ; DATA XREF: .text:00004FA0o
.text:00004FE3                 db 9 dup(0CCh)
.text:00004FEC
.text:00004FEC ; =============== S U B R O U T I N E =======================================
.text:00004FEC
.text:00004FEC ; Attributes: bp-based frame
.text:00004FEC
.text:00004FEC _share_connstate_cmp proc near          ; DATA XREF: _ssh_connection_sharing_init+285o
.text:00004FEC
.text:00004FEC var_8           = dword ptr -8
.text:00004FEC var_4           = dword ptr -4
.text:00004FEC arg_0           = dword ptr  8
.text:00004FEC arg_4           = dword ptr  0Ch
.text:00004FEC
.text:00004FEC                 push    ebp
.text:00004FED                 mov     ebp, esp
.text:00004FEF                 sub     esp, 8
.text:00004FF2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004FF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005000                 mov     eax, [ebp+arg_0]
.text:00005003                 mov     [ebp+var_4], eax
.text:00005006                 mov     ecx, [ebp+arg_4]
.text:00005009                 mov     [ebp+var_8], ecx
.text:0000500C                 mov     edx, [ebp+var_4]
.text:0000500F                 mov     eax, [ebp+var_8]
.text:00005012                 mov     ecx, [edx+4]
.text:00005015                 cmp     ecx, [eax+4]
.text:00005018                 jnb     short loc_5021
.text:0000501A                 or      eax, 0FFFFFFFFh
.text:0000501D                 jmp     short loc_503A
.text:0000501F ; ---------------------------------------------------------------------------
.text:0000501F                 jmp     short loc_503A
.text:00005021 ; ---------------------------------------------------------------------------
.text:00005021
.text:00005021 loc_5021:                               ; CODE XREF: _share_connstate_cmp+2Cj
.text:00005021                 mov     edx, [ebp+var_4]
.text:00005024                 mov     eax, [ebp+var_8]
.text:00005027                 mov     ecx, [edx+4]
.text:0000502A                 cmp     ecx, [eax+4]
.text:0000502D                 jbe     short loc_5038
.text:0000502F                 mov     eax, 1
.text:00005034                 jmp     short loc_503A
.text:00005036 ; ---------------------------------------------------------------------------
.text:00005036                 jmp     short loc_503A
.text:00005038 ; ---------------------------------------------------------------------------
.text:00005038
.text:00005038 loc_5038:                               ; CODE XREF: _share_connstate_cmp+41j
.text:00005038                 xor     eax, eax
.text:0000503A
.text:0000503A loc_503A:                               ; CODE XREF: _share_connstate_cmp+31j
.text:0000503A                                         ; _share_connstate_cmp+33j ...
.text:0000503A                 mov     esp, ebp
.text:0000503C                 pop     ebp
.text:0000503D                 retn
.text:0000503D _share_connstate_cmp endp
.text:0000503D
.text:0000503D ; ---------------------------------------------------------------------------
.text:0000503E                 align 10h
.text:0000503E _text           ends
.text:0000503E
.rtc$TMZ:00005040 ; ===========================================================================
.rtc$TMZ:00005040
.rtc$TMZ:00005040 ; Segment type: Pure data
.rtc$TMZ:00005040 ; Segment permissions: Read
.rtc$TMZ:00005040 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00005040                 assume cs:_rtc$TMZ
.rtc$TMZ:00005040                 ;org 5040h
.rtc$TMZ:00005040 ; COMDAT (pick any)
.rtc$TMZ:00005040 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00005040 _rtc$TMZ        ends
.rtc$TMZ:00005040
.rtc$IMZ:00005044 ; ===========================================================================
.rtc$IMZ:00005044
.rtc$IMZ:00005044 ; Segment type: Pure data
.rtc$IMZ:00005044 ; Segment permissions: Read
.rtc$IMZ:00005044 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00005044                 assume cs:_rtc$IMZ
.rtc$IMZ:00005044                 ;org 5044h
.rtc$IMZ:00005044 ; COMDAT (pick any)
.rtc$IMZ:00005044 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00005044 _rtc$IMZ        ends
.rtc$IMZ:00005044
UNDEF:00005050 ; ===========================================================================
UNDEF:00005050
UNDEF:00005050 ; Segment type: Externs
UNDEF:00005050 ; UNDEF
UNDEF:00005050                 extrn _safefree:near    ; CODE XREF: _sharestate_free+9Bp
UNDEF:00005050                                         ; _sharestate_free+AAp ...
UNDEF:00005054                 extrn _freetree234:near ; CODE XREF: _sharestate_free+59p
UNDEF:00005054                                         ; _share_connstate_free+4Fp ...
UNDEF:00005058                 extrn _delpos234:near   ; CODE XREF: _sharestate_free+33p
UNDEF:00005058                                         ; _share_connstate_free+26p ...
UNDEF:0000505C                 extrn _platform_ssh_share_cleanup:near
UNDEF:0000505C                                         ; CODE XREF: _sharestate_free+22p
UNDEF:00005060                 extrn __RTC_CheckEsp:near ; CODE XREF: _sharestate_free+85p
UNDEF:00005060                                         ; _sharestate_free+C4p ...
UNDEF:00005064                 extrn __RTC_Shutdown:near
UNDEF:00005064                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00005068                 extrn __RTC_InitBase:near
UNDEF:00005068                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000506C                 extrn _ssh_sharing_logf:near ; CODE XREF: _share_closing+31p
UNDEF:0000506C                                         ; _share_receive+1F4p ...
UNDEF:00005070                 extrn _ssh_sharing_downstream_disconnected:near
UNDEF:00005070                                         ; CODE XREF: _share_try_cleanup+74Ap
UNDEF:00005074                 extrn _del234:near      ; CODE XREF: _share_try_cleanup+731p
UNDEF:00005074                                         ; _share_remove_halfchannel+11p ...
UNDEF:00005078                 extrn _count234:near    ; CODE XREF: _share_try_cleanup+6EBp
UNDEF:00005078                                         ; _share_try_cleanup+701p ...
UNDEF:0000507C                 extrn _safemalloc:near  ; CODE XREF: _share_try_cleanup+44Ep
UNDEF:0000507C                                         ; _share_xchannel_add_message+1Dp ...
UNDEF:00005080                 extrn _ssh_delete_sharing_channel:near
UNDEF:00005080                                         ; CODE XREF: _share_try_cleanup+3D0p
UNDEF:00005080                                         ; _share_dead_xchannel_respond+130p ...
UNDEF:00005084                 extrn _ssh_send_packet_from_downstream:near
UNDEF:00005084                                         ; CODE XREF: _share_try_cleanup+2A2p
UNDEF:00005084                                         ; _share_try_cleanup+3A2p ...
UNDEF:00005088 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00005088                 extrn _memcpy:near      ; CODE XREF: _share_try_cleanup+199p
UNDEF:00005088                                         ; _share_try_cleanup+25Bp ...
UNDEF:0000508C ; size_t __cdecl strlen(const char *Str)
UNDEF:0000508C                 extrn _strlen:near      ; CODE XREF: _share_try_cleanup+FDp
UNDEF:0000508C                                         ; _share_try_cleanup+11Ap ...
UNDEF:00005090                 extrn _index234:near    ; CODE XREF: _share_try_cleanup+32p
UNDEF:00005090                                         ; _share_try_cleanup+2DFp ...
UNDEF:00005094                 extrn ___security_cookie:near
UNDEF:00005094                                         ; DATA XREF: _share_try_cleanup+1Cr
UNDEF:00005094                                         ; _share_xchannel_confirmation+1Dr ...
UNDEF:00005098 ; __fastcall __security_check_cookie(x)
UNDEF:00005098                 extrn @__security_check_cookie@4:near
UNDEF:00005098                                         ; CODE XREF: _share_try_cleanup+775p
UNDEF:00005098                                         ; _share_xchannel_confirmation+169p ...
UNDEF:0000509C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000509C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000509C                                         ; CODE XREF: _share_try_cleanup+768p
UNDEF:0000509C                                         ; _share_dead_xchannel_respond+152p ...
UNDEF:000050A0                 extrn _ssh_sharing_remove_x11_display:near
UNDEF:000050A0                                         ; CODE XREF: _share_remove_channel+49p
UNDEF:000050A0                                         ; _share_setup_x11_channel+30Ep
UNDEF:000050A4                 extrn _dupprintf:near   ; CODE XREF: _getstring_inner+99p
UNDEF:000050A4                                         ; _share_receive+E6p ...
UNDEF:000050A8                 extrn _toint:near       ; CODE XREF: _getstring_inner+52p
UNDEF:000050A8                                         ; _send_packet_to_downstream+6Bp ...
UNDEF:000050AC                 extrn _x11_make_greeting:near
UNDEF:000050AC                                         ; CODE XREF: _share_setup_x11_channel+67p
UNDEF:000050B0                 extrn _add234:near      ; CODE XREF: _share_add_xchannel+57p
UNDEF:000050B0                                         ; _share_add_xchannel+82p ...
UNDEF:000050B4 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000050B4                 extrn __wassert:near    ; CODE XREF: _share_got_pkt_from_server+14Fp
UNDEF:000050B4                                         ; _share_got_pkt_from_server+1D4p ...
UNDEF:000050B8                 extrn _find234:near     ; CODE XREF: _share_find_channel_by_upstream+2Cp
UNDEF:000050B8                                         ; _share_find_xchannel_by_upstream+39p ...
UNDEF:000050BC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000050BC                 extrn _memcmp:near      ; CODE XREF: _share_receive+159p
UNDEF:000050C0                 extrn _ssh_sharing_add_x11_display:near
UNDEF:000050C0                                         ; CODE XREF: _share_got_pkt_from_downstream+DA7p
UNDEF:000050C4                 extrn _x11_dehexify:near
UNDEF:000050C4                                         ; CODE XREF: _share_got_pkt_from_downstream+D71p
UNDEF:000050C8                 extrn _x11_identify_auth_proto:near
UNDEF:000050C8                                         ; CODE XREF: _share_got_pkt_from_downstream+BECp
UNDEF:000050CC                 extrn _ssh_agent_forwarding_permitted:near
UNDEF:000050CC                                         ; CODE XREF: _share_got_pkt_from_downstream+A05p
UNDEF:000050D0                 extrn _ssh_alloc_sharing_channel:near
UNDEF:000050D0                                         ; CODE XREF: _share_got_pkt_from_downstream+5CAp
UNDEF:000050D0                                         ; _share_got_pkt_from_downstream+746p
UNDEF:000050D4                 extrn _ssh_sharing_queue_global_request:near
UNDEF:000050D4                                         ; CODE XREF: _share_got_pkt_from_downstream+287p
UNDEF:000050D4                                         ; _share_got_pkt_from_downstream+4C9p
UNDEF:000050D8                 extrn _ssh_alloc_sharing_rportfwd:near
UNDEF:000050D8                                         ; CODE XREF: _share_got_pkt_from_downstream+1E5p
UNDEF:000050DC ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:000050DC                 extrn _strcmp:near      ; CODE XREF: _share_got_pkt_from_downstream+A4p
UNDEF:000050DC                                         ; _share_got_pkt_from_downstream+30Bp ...
UNDEF:000050E0                 extrn _dupstr:near      ; CODE XREF: _share_add_forwarding+1Ep
UNDEF:000050E0                                         ; _share_find_forwarding+21p ...
UNDEF:000050E4 ; size_t __cdecl strcspn(const char *Str, const char *Control)
UNDEF:000050E4                 extrn _strcspn:near     ; CODE XREF: _share_activate+42p
UNDEF:000050E8                 extrn _dupcat:near      ; CODE XREF: _share_send_verstring+22p
UNDEF:000050EC                 extrn _ssh_sharing_downstream_connected:near
UNDEF:000050EC                                         ; CODE XREF: _share_listen_accepting+24Bp
UNDEF:000050F0                 extrn _newtree234:near  ; CODE XREF: _share_listen_accepting+1A4p
UNDEF:000050F0                                         ; _share_listen_accepting+1BAp ...
UNDEF:000050F4                 extrn _findrelpos234:near
UNDEF:000050F4                                         ; CODE XREF: _share_find_unused_id+49p
UNDEF:000050F8                 extrn __chkstk:near     ; CODE XREF: _share_find_unused_id+8p
UNDEF:000050FC                 extrn _ssh_connshare_log:near
UNDEF:000050FC                                         ; CODE XREF: _ssh_connection_sharing_init+1C3p
UNDEF:00005100                 extrn _platform_ssh_share:near
UNDEF:00005100                                         ; CODE XREF: _ssh_connection_sharing_init+1A4p
UNDEF:00005104                 extrn _get_remote_username:near
UNDEF:00005104                                         ; CODE XREF: _ssh_connection_sharing_init+B1p
UNDEF:00005108                 extrn _share_can_be_downstream:near
UNDEF:00005108                                         ; DATA XREF: _ssh_connection_sharing_init+66r
UNDEF:0000510C                 extrn _share_can_be_upstream:near
UNDEF:0000510C                                         ; DATA XREF: _ssh_connection_sharing_init:loc_4CDEr
UNDEF:00005110                 extrn _conf_get_int:near
UNDEF:00005110                                         ; CODE XREF: _ssh_connection_sharing_init+1Fp
UNDEF:00005110                                         ; _ssh_connection_sharing_init+44p ...
UNDEF:00005110
UNDEF:00005110
UNDEF:00005110                 end