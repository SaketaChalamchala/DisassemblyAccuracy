.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : FDB2E3A2A9CF9D7BA7218D070AAFE907
.data:00000000 ; Input CRC32 : 7C8A2D96
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\rlogin.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85585        db 'Connecting to %s port %d',0 ; DATA XREF: _rlogin_log+55o
.data:00000019                 align 4
.data:0000001C $SG85587        db 'Failed to connect to %s: %s',0
.data:0000001C                                         ; DATA XREF: _rlogin_log+75o
.data:00000038 $SG85604        db '%s',0               ; DATA XREF: _rlogin_closing+81o
.data:0000003B                 align 4
.data:0000003C $SG85640        dd offset $SG85587+13h  ; DATA XREF: _rlogin_startup+14Do
.data:0000003C                                         ; "o %s: %s"
.data:00000040 ; char _SG85641[]
.data:00000040 $SG85641        db '0123456789',0       ; DATA XREF: _rlogin_startup+184o
.data:0000004B                 align 4
.data:0000004C $SG85674        db ' (IPv4)',0          ; DATA XREF: _rlogin_init+C3o
.data:00000054 $SG85675        db ' (IPv6)',0          ; DATA XREF: _rlogin_init+D2o
.data:0000005C $SG85677        db 'Looking up host "%s"%s',0 ; DATA XREF: _rlogin_init+F0o
.data:00000073                 align 4
.data:00000074 $SG85691        db 'Rlogin login name',0 ; DATA XREF: _rlogin_init+28Eo
.data:00000086                 align 4
.data:00000088 $SG85692        db 'rlogin username: ',0 ; DATA XREF: _rlogin_init+2A6o
.data:0000009A                 align 4
.data:0000009C $SG85809        db 'rlogin',0           ; DATA XREF: .data:000000E8o
.data:000000A3                 align 8
.data:000000A8                 public _rlogin_backend
.data:000000A8 _rlogin_backend dd offset _rlogin_init
.data:000000AC                 dd offset _rlogin_free
.data:000000B0                 dd offset _rlogin_reconfig
.data:000000B4                 dd offset _rlogin_send
.data:000000B8                 dd offset _rlogin_sendbuffer
.data:000000BC                 dd offset _rlogin_size
.data:000000C0                 dd offset _rlogin_special
.data:000000C4                 dd offset _rlogin_get_specials
.data:000000C8                 dd offset _rlogin_connected
.data:000000CC                 dd offset _rlogin_exitcode
.data:000000D0                 dd offset _rlogin_sendok
.data:000000D4                 dd offset _rlogin_ldisc
.data:000000D8                 dd offset _rlogin_provide_ldisc
.data:000000DC                 dd offset _rlogin_provide_logctx
.data:000000E0                 dd offset _rlogin_unthrottle
.data:000000E4                 dd offset _rlogin_cfg_info
.data:000000E8                 dd offset $SG85809      ; "rlogin"
.data:000000EC                 db    2
.data:000000ED                 db    0
.data:000000EE                 db    0
.data:000000EF                 db    0
.data:000000F0                 db    1
.data:000000F1                 db    2
.data:000000F2                 db    0
.data:000000F3                 db    0
.data:000000F3 _data           ends
.data:000000F3
.rdata:000000F4 ; ===========================================================================
.rdata:000000F4
.rdata:000000F4 ; Segment type: Pure data
.rdata:000000F4 ; Segment permissions: Read
.rdata:000000F4 _rdata          segment dword public 'DATA' use32
.rdata:000000F4                 assume cs:_rdata
.rdata:000000F4                 ;org 0F4h
.rdata:000000F4 ; `rlogin_init'::`2'::fn_table
.rdata:000000F4 ?fn_table@?1??rlogin_init@@9@9 dd offset _rlogin_log
.rdata:000000F4                                         ; DATA XREF: _rlogin_init+29o
.rdata:000000F8                 dd offset _rlogin_closing
.rdata:000000FC                 dd offset _rlogin_receive
.rdata:00000100                 dd offset _rlogin_sent
.rdata:00000104                 align 8
.rdata:00000104 _rdata          ends
.rdata:00000104
.bss:00000108 ; ===========================================================================
.bss:00000108
.bss:00000108 ; Segment type: Uninitialized
.bss:00000108 ; Segment permissions: Read/Write
.bss:00000108 _bss            segment byte public 'BSS' use32
.bss:00000108                 assume cs:_bss
.bss:00000108                 ;org 108h
.bss:00000108                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000108 $SG85676        db    ? ;               ; DATA XREF: _rlogin_init:loc_4F7o
.bss:00000109                 align 4
.bss:00000109 _bss            ends
.bss:00000109
.text:0000010C ; ===========================================================================
.text:0000010C
.text:0000010C ; Segment type: Pure code
.text:0000010C ; Segment permissions: Read/Execute
.text:0000010C _text           segment para public 'CODE' use32
.text:0000010C                 assume cs:_text
.text:0000010C                 ;org 10Ch
.text:0000010C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000010C
.text:0000010C ; =============== S U B R O U T I N E =======================================
.text:0000010C
.text:0000010C ; Attributes: bp-based frame
.text:0000010C
.text:0000010C _rlogin_log     proc near               ; DATA XREF: .rdata:`rlogin_init'::`2'::fn_tableo
.text:0000010C
.text:0000010C var_114         = dword ptr -114h
.text:0000010C var_10C         = byte ptr -10Ch
.text:0000010C var_8           = dword ptr -8
.text:0000010C var_4           = dword ptr -4
.text:0000010C arg_0           = dword ptr  8
.text:0000010C arg_4           = dword ptr  0Ch
.text:0000010C arg_8           = dword ptr  10h
.text:0000010C arg_C           = dword ptr  14h
.text:0000010C arg_10          = dword ptr  18h
.text:0000010C
.text:0000010C                 push    ebp
.text:0000010D                 mov     ebp, esp
.text:0000010F                 sub     esp, 114h
.text:00000115                 push    edi
.text:00000116                 lea     edi, [ebp+var_114]
.text:0000011C                 mov     ecx, 45h ; 'E'
.text:00000121                 mov     eax, 0CCCCCCCCh
.text:00000126                 rep stosd
.text:00000128                 mov     eax, dword ptr ds:___security_cookie
.text:0000012D                 xor     eax, ebp
.text:0000012F                 mov     [ebp+var_4], eax
.text:00000132                 mov     eax, [ebp+arg_0]
.text:00000135                 mov     [ebp+var_8], eax
.text:00000138                 push    100h
.text:0000013D                 lea     ecx, [ebp+var_10C]
.text:00000143                 push    ecx
.text:00000144                 mov     edx, [ebp+arg_8]
.text:00000147                 push    edx
.text:00000148                 call    _sk_getaddr
.text:0000014D                 add     esp, 0Ch
.text:00000150                 cmp     [ebp+arg_4], 0
.text:00000154                 jnz     short loc_176
.text:00000156                 mov     eax, [ebp+arg_C]
.text:00000159                 push    eax
.text:0000015A                 lea     ecx, [ebp+var_10C]
.text:00000160                 push    ecx
.text:00000161                 push    offset $SG85585 ; "Connecting to %s port %d"
.text:00000166                 call    _dupprintf
.text:0000016B                 add     esp, 0Ch
.text:0000016E                 mov     [ebp+var_114], eax
.text:00000174                 jmp     short loc_194
.text:00000176 ; ---------------------------------------------------------------------------
.text:00000176
.text:00000176 loc_176:                                ; CODE XREF: _rlogin_log+48j
.text:00000176                 mov     edx, [ebp+arg_10]
.text:00000179                 push    edx
.text:0000017A                 lea     eax, [ebp+var_10C]
.text:00000180                 push    eax
.text:00000181                 push    offset $SG85587 ; "Failed to connect to %s: %s"
.text:00000186                 call    _dupprintf
.text:0000018B                 add     esp, 0Ch
.text:0000018E                 mov     [ebp+var_114], eax
.text:00000194
.text:00000194 loc_194:                                ; CODE XREF: _rlogin_log+68j
.text:00000194                 mov     ecx, [ebp+var_114]
.text:0000019A                 push    ecx
.text:0000019B                 mov     edx, [ebp+var_8]
.text:0000019E                 mov     eax, [edx+20h]
.text:000001A1                 push    eax
.text:000001A2                 call    _logevent
.text:000001A7                 add     esp, 8
.text:000001AA                 mov     ecx, [ebp+var_114]
.text:000001B0                 push    ecx
.text:000001B1                 call    _safefree
.text:000001B6                 add     esp, 4
.text:000001B9                 push    edx
.text:000001BA                 mov     ecx, ebp
.text:000001BC                 push    eax
.text:000001BD                 lea     edx, $LN7
.text:000001C3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001C8                 pop     eax
.text:000001C9                 pop     edx
.text:000001CA                 pop     edi
.text:000001CB                 mov     ecx, [ebp+var_4]
.text:000001CE                 xor     ecx, ebp
.text:000001D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000001D5                 add     esp, 114h
.text:000001DB                 cmp     ebp, esp
.text:000001DD                 call    __RTC_CheckEsp
.text:000001E2                 mov     esp, ebp
.text:000001E4                 pop     ebp
.text:000001E5                 retn
.text:000001E5 _rlogin_log     endp
.text:000001E5
.text:000001E5 ; ---------------------------------------------------------------------------
.text:000001E6                 align 4
.text:000001E8 $LN7            dd 1                    ; DATA XREF: _rlogin_log+B1o
.text:000001EC                 dd offset $LN6
.text:000001F0 $LN6            dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:000001ECo
.text:000001F8                 dd offset $LN5          ; "addrbuf"
.text:000001FC $LN5            db 'addrbuf',0          ; DATA XREF: .text:000001F8o
.text:00000204                 db 8 dup(0CCh)
.text:0000020C
.text:0000020C ; =============== S U B R O U T I N E =======================================
.text:0000020C
.text:0000020C ; Attributes: bp-based frame
.text:0000020C
.text:0000020C _rlogin_closing proc near               ; DATA XREF: .rdata:000000F8o
.text:0000020C
.text:0000020C var_4           = dword ptr -4
.text:0000020C arg_0           = dword ptr  8
.text:0000020C arg_4           = dword ptr  0Ch
.text:0000020C
.text:0000020C                 push    ebp
.text:0000020D                 mov     ebp, esp
.text:0000020F                 push    ecx
.text:00000210                 push    esi
.text:00000211                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000218                 mov     eax, [ebp+arg_0]
.text:0000021B                 mov     [ebp+var_4], eax
.text:0000021E                 mov     ecx, [ebp+var_4]
.text:00000221                 cmp     dword ptr [ecx+4], 0
.text:00000225                 jz      short loc_270
.text:00000227                 mov     esi, esp
.text:00000229                 mov     edx, [ebp+var_4]
.text:0000022C                 mov     eax, [edx+4]
.text:0000022F                 push    eax
.text:00000230                 mov     ecx, [ebp+var_4]
.text:00000233                 mov     edx, [ecx+4]
.text:00000236                 mov     eax, [edx]
.text:00000238                 mov     ecx, [eax+4]
.text:0000023B                 call    ecx
.text:0000023D                 add     esp, 4
.text:00000240                 cmp     esi, esp
.text:00000242                 call    __RTC_CheckEsp
.text:00000247                 mov     edx, [ebp+var_4]
.text:0000024A                 mov     dword ptr [edx+4], 0
.text:00000251                 cmp     [ebp+arg_4], 0
.text:00000255                 jz      short loc_261
.text:00000257                 mov     eax, [ebp+var_4]
.text:0000025A                 mov     dword ptr [eax+8], 1
.text:00000261
.text:00000261 loc_261:                                ; CODE XREF: _rlogin_closing+49j
.text:00000261                 mov     ecx, [ebp+var_4]
.text:00000264                 mov     edx, [ecx+20h]
.text:00000267                 push    edx
.text:00000268                 call    _notify_remote_exit
.text:0000026D                 add     esp, 4
.text:00000270
.text:00000270 loc_270:                                ; CODE XREF: _rlogin_closing+19j
.text:00000270                 cmp     [ebp+arg_4], 0
.text:00000274                 jz      short loc_2A1
.text:00000276                 mov     eax, [ebp+arg_4]
.text:00000279                 push    eax
.text:0000027A                 mov     ecx, [ebp+var_4]
.text:0000027D                 mov     edx, [ecx+20h]
.text:00000280                 push    edx
.text:00000281                 call    _logevent
.text:00000286                 add     esp, 8
.text:00000289                 mov     eax, [ebp+arg_4]
.text:0000028C                 push    eax
.text:0000028D                 push    offset $SG85604 ; "%s"
.text:00000292                 mov     ecx, [ebp+var_4]
.text:00000295                 mov     edx, [ecx+20h]
.text:00000298                 push    edx
.text:00000299                 call    _connection_fatal
.text:0000029E                 add     esp, 0Ch
.text:000002A1
.text:000002A1 loc_2A1:                                ; CODE XREF: _rlogin_closing+68j
.text:000002A1                 xor     eax, eax
.text:000002A3                 pop     esi
.text:000002A4                 add     esp, 4
.text:000002A7                 cmp     ebp, esp
.text:000002A9                 call    __RTC_CheckEsp
.text:000002AE                 mov     esp, ebp
.text:000002B0                 pop     ebp
.text:000002B1                 retn
.text:000002B1 _rlogin_closing endp
.text:000002B1
.text:000002B1 ; ---------------------------------------------------------------------------
.text:000002B2                 db 0Ah dup(0CCh)
.text:000002BC
.text:000002BC ; =============== S U B R O U T I N E =======================================
.text:000002BC
.text:000002BC ; Attributes: bp-based frame
.text:000002BC
.text:000002BC _rlogin_receive proc near               ; DATA XREF: .rdata:000000FCo
.text:000002BC
.text:000002BC var_8           = dword ptr -8
.text:000002BC var_4           = dword ptr -4
.text:000002BC arg_0           = dword ptr  8
.text:000002BC arg_4           = dword ptr  0Ch
.text:000002BC arg_8           = dword ptr  10h
.text:000002BC arg_C           = dword ptr  14h
.text:000002BC
.text:000002BC                 push    ebp
.text:000002BD                 mov     ebp, esp
.text:000002BF                 sub     esp, 8
.text:000002C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002D0                 mov     eax, [ebp+arg_0]
.text:000002D3                 mov     [ebp+var_4], eax
.text:000002D6                 cmp     [ebp+arg_4], 2
.text:000002DA                 jnz     short loc_325
.text:000002DC                 mov     ecx, [ebp+arg_8]
.text:000002DF                 mov     dl, [ecx]
.text:000002E1                 mov     byte ptr [ebp+var_8+3], dl
.text:000002E4                 mov     eax, [ebp+arg_8]
.text:000002E7                 add     eax, 1
.text:000002EA                 mov     [ebp+arg_8], eax
.text:000002ED                 mov     ecx, [ebp+arg_C]
.text:000002F0                 sub     ecx, 1
.text:000002F3                 mov     [ebp+arg_C], ecx
.text:000002F6                 movsx   edx, byte ptr [ebp+var_8+3]
.text:000002FA                 cmp     edx, 0FFFFFF80h
.text:000002FD                 jnz     short loc_323
.text:000002FF                 mov     eax, [ebp+var_4]
.text:00000302                 mov     dword ptr [eax+14h], 1
.text:00000309                 mov     ecx, [ebp+var_4]
.text:0000030C                 mov     edx, [ecx+1Ch]
.text:0000030F                 push    edx
.text:00000310                 mov     eax, [ebp+var_4]
.text:00000313                 mov     ecx, [eax+18h]
.text:00000316                 push    ecx
.text:00000317                 mov     edx, [ebp+var_4]
.text:0000031A                 push    edx
.text:0000031B                 call    _rlogin_size
.text:00000320                 add     esp, 0Ch
.text:00000323
.text:00000323 loc_323:                                ; CODE XREF: _rlogin_receive+41j
.text:00000323                 jmp     short loc_36E
.text:00000325 ; ---------------------------------------------------------------------------
.text:00000325
.text:00000325 loc_325:                                ; CODE XREF: _rlogin_receive+1Ej
.text:00000325                 mov     eax, [ebp+var_4]
.text:00000328                 cmp     dword ptr [eax+10h], 0
.text:0000032C                 jz      short loc_354
.text:0000032E                 mov     ecx, [ebp+arg_8]
.text:00000331                 movsx   edx, byte ptr [ecx]
.text:00000334                 test    edx, edx
.text:00000336                 jnz     short loc_34A
.text:00000338                 mov     eax, [ebp+arg_8]
.text:0000033B                 add     eax, 1
.text:0000033E                 mov     [ebp+arg_8], eax
.text:00000341                 mov     ecx, [ebp+arg_C]
.text:00000344                 sub     ecx, 1
.text:00000347                 mov     [ebp+arg_C], ecx
.text:0000034A
.text:0000034A loc_34A:                                ; CODE XREF: _rlogin_receive+7Aj
.text:0000034A                 mov     edx, [ebp+var_4]
.text:0000034D                 mov     dword ptr [edx+10h], 0
.text:00000354
.text:00000354 loc_354:                                ; CODE XREF: _rlogin_receive+70j
.text:00000354                 cmp     [ebp+arg_C], 0
.text:00000358                 jle     short loc_36E
.text:0000035A                 mov     eax, [ebp+arg_C]
.text:0000035D                 push    eax
.text:0000035E                 mov     ecx, [ebp+arg_8]
.text:00000361                 push    ecx
.text:00000362                 mov     edx, [ebp+var_4]
.text:00000365                 push    edx
.text:00000366                 call    _c_write
.text:0000036B                 add     esp, 0Ch
.text:0000036E
.text:0000036E loc_36E:                                ; CODE XREF: _rlogin_receive:loc_323j
.text:0000036E                                         ; _rlogin_receive+9Cj
.text:0000036E                 mov     eax, 1
.text:00000373                 add     esp, 8
.text:00000376                 cmp     ebp, esp
.text:00000378                 call    __RTC_CheckEsp
.text:0000037D                 mov     esp, ebp
.text:0000037F                 pop     ebp
.text:00000380                 retn
.text:00000380 _rlogin_receive endp
.text:00000380
.text:00000380 ; ---------------------------------------------------------------------------
.text:00000381                 db 0Bh dup(0CCh)
.text:0000038C
.text:0000038C ; =============== S U B R O U T I N E =======================================
.text:0000038C
.text:0000038C ; Attributes: bp-based frame
.text:0000038C
.text:0000038C _c_write        proc near               ; CODE XREF: _rlogin_receive+AAp
.text:0000038C
.text:0000038C var_4           = dword ptr -4
.text:0000038C arg_0           = dword ptr  8
.text:0000038C arg_4           = dword ptr  0Ch
.text:0000038C arg_8           = dword ptr  10h
.text:0000038C
.text:0000038C                 push    ebp
.text:0000038D                 mov     ebp, esp
.text:0000038F                 push    ecx
.text:00000390                 push    esi
.text:00000391                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000398                 mov     eax, [ebp+arg_8]
.text:0000039B                 push    eax
.text:0000039C                 mov     ecx, [ebp+arg_4]
.text:0000039F                 push    ecx
.text:000003A0                 push    0
.text:000003A2                 mov     edx, [ebp+arg_0]
.text:000003A5                 mov     eax, [edx+20h]
.text:000003A8                 push    eax
.text:000003A9                 call    _from_backend
.text:000003AE                 add     esp, 10h
.text:000003B1                 mov     [ebp+var_4], eax
.text:000003B4                 xor     ecx, ecx
.text:000003B6                 cmp     [ebp+var_4], 1000h
.text:000003BD                 setnle  cl
.text:000003C0                 mov     esi, esp
.text:000003C2                 push    ecx
.text:000003C3                 mov     edx, [ebp+arg_0]
.text:000003C6                 mov     eax, [edx+4]
.text:000003C9                 push    eax
.text:000003CA                 mov     ecx, [ebp+arg_0]
.text:000003CD                 mov     edx, [ecx+4]
.text:000003D0                 mov     eax, [edx]
.text:000003D2                 mov     ecx, [eax+18h]
.text:000003D5                 call    ecx
.text:000003D7                 add     esp, 8
.text:000003DA                 cmp     esi, esp
.text:000003DC                 call    __RTC_CheckEsp
.text:000003E1                 pop     esi
.text:000003E2                 add     esp, 4
.text:000003E5                 cmp     ebp, esp
.text:000003E7                 call    __RTC_CheckEsp
.text:000003EC                 mov     esp, ebp
.text:000003EE                 pop     ebp
.text:000003EF                 retn
.text:000003EF _c_write        endp
.text:000003EF
.text:000003EF ; ---------------------------------------------------------------------------
.text:000003F0                 db 0Ch dup(0CCh)
.text:000003FC
.text:000003FC ; =============== S U B R O U T I N E =======================================
.text:000003FC
.text:000003FC ; Attributes: bp-based frame
.text:000003FC
.text:000003FC _rlogin_sent    proc near               ; DATA XREF: .rdata:00000100o
.text:000003FC
.text:000003FC var_4           = dword ptr -4
.text:000003FC arg_0           = dword ptr  8
.text:000003FC arg_4           = dword ptr  0Ch
.text:000003FC
.text:000003FC                 push    ebp
.text:000003FD                 mov     ebp, esp
.text:000003FF                 push    ecx
.text:00000400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000407                 mov     eax, [ebp+arg_0]
.text:0000040A                 mov     [ebp+var_4], eax
.text:0000040D                 mov     ecx, [ebp+var_4]
.text:00000410                 mov     edx, [ebp+arg_4]
.text:00000413                 mov     [ecx+0Ch], edx
.text:00000416                 mov     esp, ebp
.text:00000418                 pop     ebp
.text:00000419                 retn
.text:00000419 _rlogin_sent    endp
.text:00000419
.text:00000419 ; ---------------------------------------------------------------------------
.text:0000041A                 align 4
.text:0000041C
.text:0000041C ; =============== S U B R O U T I N E =======================================
.text:0000041C
.text:0000041C ; Attributes: bp-based frame
.text:0000041C
.text:0000041C _rlogin_init    proc near               ; DATA XREF: .data:_rlogin_backendo
.text:0000041C
.text:0000041C var_2C          = dword ptr -2Ch
.text:0000041C var_28          = dword ptr -28h
.text:0000041C var_24          = dword ptr -24h
.text:0000041C var_20          = dword ptr -20h
.text:0000041C var_1C          = dword ptr -1Ch
.text:0000041C var_18          = dword ptr -18h
.text:0000041C var_14          = dword ptr -14h
.text:0000041C var_10          = dword ptr -10h
.text:0000041C var_C           = dword ptr -0Ch
.text:0000041C var_8           = dword ptr -8
.text:0000041C var_4           = dword ptr -4
.text:0000041C arg_0           = dword ptr  8
.text:0000041C arg_4           = dword ptr  0Ch
.text:0000041C arg_8           = dword ptr  10h
.text:0000041C arg_C           = dword ptr  14h
.text:0000041C arg_10          = dword ptr  18h
.text:0000041C arg_14          = dword ptr  1Ch
.text:0000041C arg_18          = dword ptr  20h
.text:0000041C arg_1C          = dword ptr  24h
.text:0000041C
.text:0000041C                 push    ebp
.text:0000041D                 mov     ebp, esp
.text:0000041F                 sub     esp, 2Ch
.text:00000422                 push    esi
.text:00000423                 push    edi
.text:00000424                 lea     edi, [ebp+var_2C]
.text:00000427                 mov     ecx, 0Bh
.text:0000042C                 mov     eax, 0CCCCCCCCh
.text:00000431                 rep stosd
.text:00000433                 push    2Ch ; ','
.text:00000435                 push    1
.text:00000437                 call    _safemalloc
.text:0000043C                 add     esp, 8
.text:0000043F                 mov     [ebp+var_C], eax
.text:00000442                 mov     eax, [ebp+var_C]
.text:00000445                 mov     dword ptr [eax], offset ?fn_table@?1??rlogin_init@@9@9 ; `rlogin_init'::`2'::fn_table
.text:0000044B                 mov     ecx, [ebp+var_C]
.text:0000044E                 mov     dword ptr [ecx+4], 0
.text:00000455                 mov     edx, [ebp+var_C]
.text:00000458                 mov     dword ptr [edx+8], 0
.text:0000045F                 mov     eax, [ebp+var_C]
.text:00000462                 mov     ecx, [ebp+arg_0]
.text:00000465                 mov     [eax+20h], ecx
.text:00000468                 push    6Eh ; 'n'
.text:0000046A                 mov     edx, [ebp+arg_8]
.text:0000046D                 push    edx
.text:0000046E                 call    _conf_get_int
.text:00000473                 add     esp, 8
.text:00000476                 mov     ecx, [ebp+var_C]
.text:00000479                 mov     [ecx+18h], eax
.text:0000047C                 push    6Fh ; 'o'
.text:0000047E                 mov     edx, [ebp+arg_8]
.text:00000481                 push    edx
.text:00000482                 call    _conf_get_int
.text:00000487                 add     esp, 8
.text:0000048A                 mov     ecx, [ebp+var_C]
.text:0000048D                 mov     [ecx+1Ch], eax
.text:00000490                 mov     edx, [ebp+var_C]
.text:00000493                 mov     dword ptr [edx+10h], 1
.text:0000049A                 mov     eax, [ebp+var_C]
.text:0000049D                 mov     dword ptr [eax+14h], 0
.text:000004A4                 mov     ecx, [ebp+var_C]
.text:000004A7                 mov     dword ptr [ecx+28h], 0
.text:000004AE                 mov     edx, [ebp+arg_8]
.text:000004B1                 push    edx
.text:000004B2                 call    _conf_copy
.text:000004B7                 add     esp, 4
.text:000004BA                 mov     ecx, [ebp+var_C]
.text:000004BD                 mov     [ecx+24h], eax
.text:000004C0                 mov     edx, [ebp+arg_4]
.text:000004C3                 mov     eax, [ebp+var_C]
.text:000004C6                 mov     [edx], eax
.text:000004C8                 push    3
.text:000004CA                 mov     ecx, [ebp+arg_8]
.text:000004CD                 push    ecx
.text:000004CE                 call    _conf_get_int
.text:000004D3                 add     esp, 8
.text:000004D6                 mov     [ebp+var_14], eax
.text:000004D9                 cmp     [ebp+var_14], 1
.text:000004DD                 jnz     short loc_4E8
.text:000004DF                 mov     [ebp+var_28], offset $SG85674 ; " (IPv4)"
.text:000004E6                 jmp     short loc_504
.text:000004E8 ; ---------------------------------------------------------------------------
.text:000004E8
.text:000004E8 loc_4E8:                                ; CODE XREF: _rlogin_init+C1j
.text:000004E8                 cmp     [ebp+var_14], 2
.text:000004EC                 jnz     short loc_4F7
.text:000004EE                 mov     [ebp+var_2C], offset $SG85675 ; " (IPv6)"
.text:000004F5                 jmp     short loc_4FE
.text:000004F7 ; ---------------------------------------------------------------------------
.text:000004F7
.text:000004F7 loc_4F7:                                ; CODE XREF: _rlogin_init+D0j
.text:000004F7                 mov     [ebp+var_2C], offset $SG85676
.text:000004FE
.text:000004FE loc_4FE:                                ; CODE XREF: _rlogin_init+D9j
.text:000004FE                 mov     edx, [ebp+var_2C]
.text:00000501                 mov     [ebp+var_28], edx
.text:00000504
.text:00000504 loc_504:                                ; CODE XREF: _rlogin_init+CAj
.text:00000504                 mov     eax, [ebp+var_28]
.text:00000507                 push    eax
.text:00000508                 mov     ecx, [ebp+arg_C]
.text:0000050B                 push    ecx
.text:0000050C                 push    offset $SG85677 ; "Looking up host \"%s\"%s"
.text:00000511                 call    _dupprintf
.text:00000516                 add     esp, 0Ch
.text:00000519                 mov     [ebp+var_1C], eax
.text:0000051C                 mov     edx, [ebp+var_1C]
.text:0000051F                 push    edx
.text:00000520                 mov     eax, [ebp+var_C]
.text:00000523                 mov     ecx, [eax+20h]
.text:00000526                 push    ecx
.text:00000527                 call    _logevent
.text:0000052C                 add     esp, 8
.text:0000052F                 mov     edx, [ebp+var_1C]
.text:00000532                 push    edx
.text:00000533                 call    _safefree
.text:00000538                 add     esp, 4
.text:0000053B                 mov     eax, [ebp+var_14]
.text:0000053E                 push    eax
.text:0000053F                 mov     ecx, [ebp+arg_8]
.text:00000542                 push    ecx
.text:00000543                 mov     edx, [ebp+arg_14]
.text:00000546                 push    edx
.text:00000547                 mov     eax, [ebp+arg_10]
.text:0000054A                 push    eax
.text:0000054B                 mov     ecx, [ebp+arg_C]
.text:0000054E                 push    ecx
.text:0000054F                 call    _name_lookup
.text:00000554                 add     esp, 14h
.text:00000557                 mov     [ebp+var_4], eax
.text:0000055A                 mov     edx, [ebp+var_4]
.text:0000055D                 push    edx
.text:0000055E                 call    _sk_addr_error
.text:00000563                 add     esp, 4
.text:00000566                 mov     [ebp+var_8], eax
.text:00000569                 cmp     [ebp+var_8], 0
.text:0000056D                 jz      short loc_583
.text:0000056F                 mov     eax, [ebp+var_4]
.text:00000572                 push    eax
.text:00000573                 call    _sk_addr_free
.text:00000578                 add     esp, 4
.text:0000057B                 mov     eax, [ebp+var_8]
.text:0000057E                 jmp     loc_718
.text:00000583 ; ---------------------------------------------------------------------------
.text:00000583
.text:00000583 loc_583:                                ; CODE XREF: _rlogin_init+151j
.text:00000583                 cmp     [ebp+arg_10], 0
.text:00000587                 jge     short loc_590
.text:00000589                 mov     [ebp+arg_10], 201h
.text:00000590
.text:00000590 loc_590:                                ; CODE XREF: _rlogin_init+16Bj
.text:00000590                 mov     ecx, [ebp+arg_8]
.text:00000593                 push    ecx
.text:00000594                 mov     edx, [ebp+var_C]
.text:00000597                 push    edx
.text:00000598                 mov     eax, [ebp+arg_1C]
.text:0000059B                 push    eax
.text:0000059C                 mov     ecx, [ebp+arg_18]
.text:0000059F                 push    ecx
.text:000005A0                 push    0
.text:000005A2                 push    1
.text:000005A4                 mov     edx, [ebp+arg_10]
.text:000005A7                 push    edx
.text:000005A8                 mov     eax, [ebp+arg_14]
.text:000005AB                 mov     ecx, [eax]
.text:000005AD                 push    ecx
.text:000005AE                 mov     edx, [ebp+var_4]
.text:000005B1                 push    edx
.text:000005B2                 call    _new_connection
.text:000005B7                 add     esp, 24h
.text:000005BA                 mov     ecx, [ebp+var_C]
.text:000005BD                 mov     [ecx+4], eax
.text:000005C0                 mov     esi, esp
.text:000005C2                 mov     edx, [ebp+var_C]
.text:000005C5                 mov     eax, [edx+4]
.text:000005C8                 push    eax
.text:000005C9                 mov     ecx, [ebp+var_C]
.text:000005CC                 mov     edx, [ecx+4]
.text:000005CF                 mov     eax, [edx]
.text:000005D1                 mov     ecx, [eax+1Ch]
.text:000005D4                 call    ecx
.text:000005D6                 add     esp, 4
.text:000005D9                 cmp     esi, esp
.text:000005DB                 call    __RTC_CheckEsp
.text:000005E0                 mov     [ebp+var_8], eax
.text:000005E3                 cmp     [ebp+var_8], 0
.text:000005E7                 jz      short loc_5F1
.text:000005E9                 mov     eax, [ebp+var_8]
.text:000005EC                 jmp     loc_718
.text:000005F1 ; ---------------------------------------------------------------------------
.text:000005F1
.text:000005F1 loc_5F1:                                ; CODE XREF: _rlogin_init+1CBj
.text:000005F1                 push    9
.text:000005F3                 mov     edx, [ebp+arg_8]
.text:000005F6                 push    edx
.text:000005F7                 call    _conf_get_str
.text:000005FC                 add     esp, 8
.text:000005FF                 mov     [ebp+var_18], eax
.text:00000602                 mov     eax, [ebp+var_18]
.text:00000605                 movsx   ecx, byte ptr [eax]
.text:00000608                 test    ecx, ecx
.text:0000060A                 jz      short loc_653
.text:0000060C                 mov     edx, [ebp+arg_14]
.text:0000060F                 mov     eax, [edx]
.text:00000611                 push    eax
.text:00000612                 call    _safefree
.text:00000617                 add     esp, 4
.text:0000061A                 mov     ecx, [ebp+var_18]
.text:0000061D                 push    ecx
.text:0000061E                 call    _dupstr
.text:00000623                 add     esp, 4
.text:00000626                 mov     edx, [ebp+arg_14]
.text:00000629                 mov     [edx], eax
.text:0000062B                 push    3Ah ; ':'
.text:0000062D                 mov     eax, [ebp+arg_14]
.text:00000630                 mov     ecx, [eax]
.text:00000632                 push    ecx
.text:00000633                 call    _host_strrchr
.text:00000638                 add     esp, 8
.text:0000063B                 mov     [ebp+var_20], eax
.text:0000063E                 cmp     [ebp+var_20], 0
.text:00000642                 jz      short loc_653
.text:00000644                 mov     edx, [ebp+var_20]
.text:00000647                 mov     byte ptr [edx], 0
.text:0000064A                 mov     eax, [ebp+var_20]
.text:0000064D                 add     eax, 1
.text:00000650                 mov     [ebp+var_20], eax
.text:00000653
.text:00000653 loc_653:                                ; CODE XREF: _rlogin_init+1EEj
.text:00000653                                         ; _rlogin_init+226j
.text:00000653                 mov     ecx, [ebp+arg_8]
.text:00000656                 push    ecx
.text:00000657                 call    _get_remote_username
.text:0000065C                 add     esp, 4
.text:0000065F                 mov     [ebp+var_10], eax
.text:00000662                 cmp     [ebp+var_10], 0
.text:00000666                 jz      short loc_689
.text:00000668                 mov     edx, [ebp+var_10]
.text:0000066B                 push    edx             ; char *
.text:0000066C                 mov     eax, [ebp+var_C]
.text:0000066F                 push    eax             ; int
.text:00000670                 call    _rlogin_startup
.text:00000675                 add     esp, 8
.text:00000678                 mov     ecx, [ebp+var_10]
.text:0000067B                 push    ecx
.text:0000067C                 call    _safefree
.text:00000681                 add     esp, 4
.text:00000684                 jmp     loc_716
.text:00000689 ; ---------------------------------------------------------------------------
.text:00000689
.text:00000689 loc_689:                                ; CODE XREF: _rlogin_init+24Aj
.text:00000689                 mov     edx, [ebp+var_C]
.text:0000068C                 mov     eax, [edx+20h]
.text:0000068F                 push    eax
.text:00000690                 call    _new_prompts
.text:00000695                 add     esp, 4
.text:00000698                 mov     ecx, [ebp+var_C]
.text:0000069B                 mov     [ecx+28h], eax
.text:0000069E                 mov     edx, [ebp+var_C]
.text:000006A1                 mov     eax, [edx+28h]
.text:000006A4                 mov     dword ptr [eax], 1
.text:000006AA                 push    offset $SG85691 ; "Rlogin login name"
.text:000006AF                 call    _dupstr
.text:000006B4                 add     esp, 4
.text:000006B7                 mov     ecx, [ebp+var_C]
.text:000006BA                 mov     edx, [ecx+28h]
.text:000006BD                 mov     [edx+4], eax
.text:000006C0                 push    1
.text:000006C2                 push    offset $SG85692 ; "rlogin username: "
.text:000006C7                 call    _dupstr
.text:000006CC                 add     esp, 4
.text:000006CF                 push    eax
.text:000006D0                 mov     eax, [ebp+var_C]
.text:000006D3                 mov     ecx, [eax+28h]
.text:000006D6                 push    ecx
.text:000006D7                 call    _add_prompt
.text:000006DC                 add     esp, 0Ch
.text:000006DF                 push    0
.text:000006E1                 push    0
.text:000006E3                 mov     edx, [ebp+var_C]
.text:000006E6                 mov     eax, [edx+28h]
.text:000006E9                 push    eax
.text:000006EA                 call    _get_userpass_input
.text:000006EF                 add     esp, 0Ch
.text:000006F2                 mov     [ebp+var_24], eax
.text:000006F5                 cmp     [ebp+var_24], 0
.text:000006F9                 jl      short loc_716
.text:000006FB                 mov     ecx, [ebp+var_C]
.text:000006FE                 mov     edx, [ecx+28h]
.text:00000701                 mov     eax, [edx+18h]
.text:00000704                 mov     ecx, [eax]
.text:00000706                 mov     edx, [ecx+8]
.text:00000709                 push    edx             ; char *
.text:0000070A                 mov     eax, [ebp+var_C]
.text:0000070D                 push    eax             ; int
.text:0000070E                 call    _rlogin_startup
.text:00000713                 add     esp, 8
.text:00000716
.text:00000716 loc_716:                                ; CODE XREF: _rlogin_init+268j
.text:00000716                                         ; _rlogin_init+2DDj
.text:00000716                 xor     eax, eax
.text:00000718
.text:00000718 loc_718:                                ; CODE XREF: _rlogin_init+162j
.text:00000718                                         ; _rlogin_init+1D0j
.text:00000718                 pop     edi
.text:00000719                 pop     esi
.text:0000071A                 add     esp, 2Ch
.text:0000071D                 cmp     ebp, esp
.text:0000071F                 call    __RTC_CheckEsp
.text:00000724                 mov     esp, ebp
.text:00000726                 pop     ebp
.text:00000727                 retn
.text:00000727 _rlogin_init    endp
.text:00000727
.text:00000727 ; ---------------------------------------------------------------------------
.text:00000728                 db 4 dup(0CCh)
.text:0000072C
.text:0000072C ; =============== S U B R O U T I N E =======================================
.text:0000072C
.text:0000072C ; Attributes: bp-based frame
.text:0000072C
.text:0000072C ; int __cdecl rlogin_startup(int, char *)
.text:0000072C _rlogin_startup proc near               ; CODE XREF: _rlogin_init+254p
.text:0000072C                                         ; _rlogin_init+2F2p ...
.text:0000072C
.text:0000072C Str             = dword ptr -10h
.text:0000072C var_C           = dword ptr -0Ch
.text:0000072C var_8           = dword ptr -8
.text:0000072C var_4           = dword ptr -4
.text:0000072C arg_0           = dword ptr  8
.text:0000072C arg_4           = dword ptr  0Ch
.text:0000072C
.text:0000072C                 push    ebp
.text:0000072D                 mov     ebp, esp
.text:0000072F                 sub     esp, 10h
.text:00000732                 push    esi
.text:00000733                 mov     eax, 0CCCCCCCCh
.text:00000738                 mov     [ebp+Str], eax
.text:0000073B                 mov     [ebp+var_C], eax
.text:0000073E                 mov     [ebp+var_8], eax
.text:00000741                 mov     [ebp+var_4], eax
.text:00000744                 mov     byte ptr [ebp+var_8+3], 0
.text:00000748                 mov     esi, esp
.text:0000074A                 push    1
.text:0000074C                 lea     eax, [ebp+var_8+3]
.text:0000074F                 push    eax
.text:00000750                 mov     ecx, [ebp+arg_0]
.text:00000753                 mov     edx, [ecx+4]
.text:00000756                 push    edx
.text:00000757                 mov     eax, [ebp+arg_0]
.text:0000075A                 mov     ecx, [eax+4]
.text:0000075D                 mov     edx, [ecx]
.text:0000075F                 mov     eax, [edx+8]
.text:00000762                 call    eax
.text:00000764                 add     esp, 0Ch
.text:00000767                 cmp     esi, esp
.text:00000769                 call    __RTC_CheckEsp
.text:0000076E                 push    34h ; '4'
.text:00000770                 mov     ecx, [ebp+arg_0]
.text:00000773                 mov     edx, [ecx+24h]
.text:00000776                 push    edx
.text:00000777                 call    _conf_get_str
.text:0000077C                 add     esp, 8
.text:0000077F                 mov     [ebp+Str], eax
.text:00000782                 mov     eax, [ebp+Str]
.text:00000785                 push    eax             ; Str
.text:00000786                 call    _strlen
.text:0000078B                 add     esp, 4
.text:0000078E                 mov     esi, esp
.text:00000790                 push    eax
.text:00000791                 mov     ecx, [ebp+Str]
.text:00000794                 push    ecx
.text:00000795                 mov     edx, [ebp+arg_0]
.text:00000798                 mov     eax, [edx+4]
.text:0000079B                 push    eax
.text:0000079C                 mov     ecx, [ebp+arg_0]
.text:0000079F                 mov     edx, [ecx+4]
.text:000007A2                 mov     eax, [edx]
.text:000007A4                 mov     ecx, [eax+8]
.text:000007A7                 call    ecx
.text:000007A9                 add     esp, 0Ch
.text:000007AC                 cmp     esi, esp
.text:000007AE                 call    __RTC_CheckEsp
.text:000007B3                 mov     esi, esp
.text:000007B5                 push    1
.text:000007B7                 lea     edx, [ebp+var_8+3]
.text:000007BA                 push    edx
.text:000007BB                 mov     eax, [ebp+arg_0]
.text:000007BE                 mov     ecx, [eax+4]
.text:000007C1                 push    ecx
.text:000007C2                 mov     edx, [ebp+arg_0]
.text:000007C5                 mov     eax, [edx+4]
.text:000007C8                 mov     ecx, [eax]
.text:000007CA                 mov     edx, [ecx+8]
.text:000007CD                 call    edx
.text:000007CF                 add     esp, 0Ch
.text:000007D2                 cmp     esi, esp
.text:000007D4                 call    __RTC_CheckEsp
.text:000007D9                 mov     eax, [ebp+arg_4]
.text:000007DC                 push    eax             ; Str
.text:000007DD                 call    _strlen
.text:000007E2                 add     esp, 4
.text:000007E5                 mov     esi, esp
.text:000007E7                 push    eax
.text:000007E8                 mov     ecx, [ebp+arg_4]
.text:000007EB                 push    ecx
.text:000007EC                 mov     edx, [ebp+arg_0]
.text:000007EF                 mov     eax, [edx+4]
.text:000007F2                 push    eax
.text:000007F3                 mov     ecx, [ebp+arg_0]
.text:000007F6                 mov     edx, [ecx+4]
.text:000007F9                 mov     eax, [edx]
.text:000007FB                 mov     ecx, [eax+8]
.text:000007FE                 call    ecx
.text:00000800                 add     esp, 0Ch
.text:00000803                 cmp     esi, esp
.text:00000805                 call    __RTC_CheckEsp
.text:0000080A                 mov     esi, esp
.text:0000080C                 push    1
.text:0000080E                 lea     edx, [ebp+var_8+3]
.text:00000811                 push    edx
.text:00000812                 mov     eax, [ebp+arg_0]
.text:00000815                 mov     ecx, [eax+4]
.text:00000818                 push    ecx
.text:00000819                 mov     edx, [ebp+arg_0]
.text:0000081C                 mov     eax, [edx+4]
.text:0000081F                 mov     ecx, [eax]
.text:00000821                 mov     edx, [ecx+8]
.text:00000824                 call    edx
.text:00000826                 add     esp, 0Ch
.text:00000829                 cmp     esi, esp
.text:0000082B                 call    __RTC_CheckEsp
.text:00000830                 push    2Eh ; '.'
.text:00000832                 mov     eax, [ebp+arg_0]
.text:00000835                 mov     ecx, [eax+24h]
.text:00000838                 push    ecx
.text:00000839                 call    _conf_get_str
.text:0000083E                 add     esp, 8
.text:00000841                 mov     [ebp+Str], eax
.text:00000844                 mov     edx, [ebp+Str]
.text:00000847                 push    edx             ; Str
.text:00000848                 call    _strlen
.text:0000084D                 add     esp, 4
.text:00000850                 mov     esi, esp
.text:00000852                 push    eax
.text:00000853                 mov     eax, [ebp+Str]
.text:00000856                 push    eax
.text:00000857                 mov     ecx, [ebp+arg_0]
.text:0000085A                 mov     edx, [ecx+4]
.text:0000085D                 push    edx
.text:0000085E                 mov     eax, [ebp+arg_0]
.text:00000861                 mov     ecx, [eax+4]
.text:00000864                 mov     edx, [ecx]
.text:00000866                 mov     eax, [edx+8]
.text:00000869                 call    eax
.text:0000086B                 add     esp, 0Ch
.text:0000086E                 cmp     esi, esp
.text:00000870                 call    __RTC_CheckEsp
.text:00000875                 mov     esi, esp
.text:00000877                 push    1
.text:00000879                 push    offset $SG85640
.text:0000087E                 mov     ecx, [ebp+arg_0]
.text:00000881                 mov     edx, [ecx+4]
.text:00000884                 push    edx
.text:00000885                 mov     eax, [ebp+arg_0]
.text:00000888                 mov     ecx, [eax+4]
.text:0000088B                 mov     edx, [ecx]
.text:0000088D                 mov     eax, [edx+8]
.text:00000890                 call    eax
.text:00000892                 add     esp, 0Ch
.text:00000895                 cmp     esi, esp
.text:00000897                 call    __RTC_CheckEsp
.text:0000089C                 push    2Fh ; '/'
.text:0000089E                 mov     ecx, [ebp+arg_0]
.text:000008A1                 mov     edx, [ecx+24h]
.text:000008A4                 push    edx
.text:000008A5                 call    _conf_get_str
.text:000008AA                 add     esp, 8
.text:000008AD                 mov     [ebp+Str], eax
.text:000008B0                 push    offset $SG85641 ; "0123456789"
.text:000008B5                 mov     eax, [ebp+Str]
.text:000008B8                 push    eax             ; Str
.text:000008B9                 call    _strspn
.text:000008BE                 add     esp, 8
.text:000008C1                 mov     esi, esp
.text:000008C3                 push    eax
.text:000008C4                 mov     ecx, [ebp+Str]
.text:000008C7                 push    ecx
.text:000008C8                 mov     edx, [ebp+arg_0]
.text:000008CB                 mov     eax, [edx+4]
.text:000008CE                 push    eax
.text:000008CF                 mov     ecx, [ebp+arg_0]
.text:000008D2                 mov     edx, [ecx+4]
.text:000008D5                 mov     eax, [edx]
.text:000008D7                 mov     ecx, [eax+8]
.text:000008DA                 call    ecx
.text:000008DC                 add     esp, 0Ch
.text:000008DF                 cmp     esi, esp
.text:000008E1                 call    __RTC_CheckEsp
.text:000008E6                 mov     esi, esp
.text:000008E8                 push    1
.text:000008EA                 lea     edx, [ebp+var_8+3]
.text:000008ED                 push    edx
.text:000008EE                 mov     eax, [ebp+arg_0]
.text:000008F1                 mov     ecx, [eax+4]
.text:000008F4                 push    ecx
.text:000008F5                 mov     edx, [ebp+arg_0]
.text:000008F8                 mov     eax, [edx+4]
.text:000008FB                 mov     ecx, [eax]
.text:000008FD                 mov     edx, [ecx+8]
.text:00000900                 call    edx
.text:00000902                 add     esp, 0Ch
.text:00000905                 cmp     esi, esp
.text:00000907                 call    __RTC_CheckEsp
.text:0000090C                 mov     ecx, [ebp+arg_0]
.text:0000090F                 mov     [ecx+0Ch], eax
.text:00000912                 mov     edx, [ebp+arg_0]
.text:00000915                 mov     dword ptr [edx+28h], 0
.text:0000091C                 push    edx
.text:0000091D                 mov     ecx, ebp
.text:0000091F                 push    eax
.text:00000920                 lea     edx, $LN5_0
.text:00000926                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000092B                 pop     eax
.text:0000092C                 pop     edx
.text:0000092D                 pop     esi
.text:0000092E                 add     esp, 10h
.text:00000931                 cmp     ebp, esp
.text:00000933                 call    __RTC_CheckEsp
.text:00000938                 mov     esp, ebp
.text:0000093A                 pop     ebp
.text:0000093B                 retn
.text:0000093B _rlogin_startup endp
.text:0000093B
.text:0000093B ; ---------------------------------------------------------------------------
.text:0000093C $LN5_0          dd 1                    ; DATA XREF: _rlogin_startup+1F4o
.text:00000940                 dd offset $LN4
.text:00000944 $LN4            dd 0FFFFFFFBh, 1        ; DATA XREF: .text:00000940o
.text:0000094C                 dd offset $LN3
.text:00000950 $LN3            dd 0CCCC007Ah, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000094Co
.text:0000095C
.text:0000095C ; =============== S U B R O U T I N E =======================================
.text:0000095C
.text:0000095C ; Attributes: bp-based frame
.text:0000095C
.text:0000095C _rlogin_free    proc near               ; DATA XREF: .data:000000ACo
.text:0000095C
.text:0000095C var_4           = dword ptr -4
.text:0000095C arg_0           = dword ptr  8
.text:0000095C
.text:0000095C                 push    ebp
.text:0000095D                 mov     ebp, esp
.text:0000095F                 push    ecx
.text:00000960                 push    esi
.text:00000961                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000968                 mov     eax, [ebp+arg_0]
.text:0000096B                 mov     [ebp+var_4], eax
.text:0000096E                 mov     ecx, [ebp+var_4]
.text:00000971                 cmp     dword ptr [ecx+28h], 0
.text:00000975                 jz      short loc_986
.text:00000977                 mov     edx, [ebp+var_4]
.text:0000097A                 mov     eax, [edx+28h]
.text:0000097D                 push    eax
.text:0000097E                 call    _free_prompts
.text:00000983                 add     esp, 4
.text:00000986
.text:00000986 loc_986:                                ; CODE XREF: _rlogin_free+19j
.text:00000986                 mov     ecx, [ebp+var_4]
.text:00000989                 cmp     dword ptr [ecx+4], 0
.text:0000098D                 jz      short loc_9AF
.text:0000098F                 mov     esi, esp
.text:00000991                 mov     edx, [ebp+var_4]
.text:00000994                 mov     eax, [edx+4]
.text:00000997                 push    eax
.text:00000998                 mov     ecx, [ebp+var_4]
.text:0000099B                 mov     edx, [ecx+4]
.text:0000099E                 mov     eax, [edx]
.text:000009A0                 mov     ecx, [eax+4]
.text:000009A3                 call    ecx
.text:000009A5                 add     esp, 4
.text:000009A8                 cmp     esi, esp
.text:000009AA                 call    __RTC_CheckEsp
.text:000009AF
.text:000009AF loc_9AF:                                ; CODE XREF: _rlogin_free+31j
.text:000009AF                 mov     edx, [ebp+var_4]
.text:000009B2                 mov     eax, [edx+24h]
.text:000009B5                 push    eax
.text:000009B6                 call    _conf_free
.text:000009BB                 add     esp, 4
.text:000009BE                 mov     ecx, [ebp+var_4]
.text:000009C1                 push    ecx
.text:000009C2                 call    _safefree
.text:000009C7                 add     esp, 4
.text:000009CA                 pop     esi
.text:000009CB                 add     esp, 4
.text:000009CE                 cmp     ebp, esp
.text:000009D0                 call    __RTC_CheckEsp
.text:000009D5                 mov     esp, ebp
.text:000009D7                 pop     ebp
.text:000009D8                 retn
.text:000009D8 _rlogin_free    endp
.text:000009D8
.text:000009D8 ; ---------------------------------------------------------------------------
.text:000009D9                 align 4
.text:000009DC
.text:000009DC ; =============== S U B R O U T I N E =======================================
.text:000009DC
.text:000009DC ; Attributes: bp-based frame
.text:000009DC
.text:000009DC _rlogin_reconfig proc near              ; DATA XREF: .data:000000B0o
.text:000009DC                 push    ebp
.text:000009DD                 mov     ebp, esp
.text:000009DF                 pop     ebp
.text:000009E0                 retn
.text:000009E0 _rlogin_reconfig endp
.text:000009E0
.text:000009E0 ; ---------------------------------------------------------------------------
.text:000009E1                 db 0Bh dup(0CCh)
.text:000009EC
.text:000009EC ; =============== S U B R O U T I N E =======================================
.text:000009EC
.text:000009EC ; Attributes: bp-based frame
.text:000009EC
.text:000009EC _rlogin_send    proc near               ; DATA XREF: .data:000000B4o
.text:000009EC
.text:000009EC var_8           = dword ptr -8
.text:000009EC var_4           = dword ptr -4
.text:000009EC arg_0           = dword ptr  8
.text:000009EC arg_4           = dword ptr  0Ch
.text:000009EC arg_8           = dword ptr  10h
.text:000009EC
.text:000009EC                 push    ebp
.text:000009ED                 mov     ebp, esp
.text:000009EF                 sub     esp, 8
.text:000009F2                 push    esi
.text:000009F3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009FA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A01                 mov     eax, [ebp+arg_0]
.text:00000A04                 mov     [ebp+var_4], eax
.text:00000A07                 mov     ecx, [ebp+var_4]
.text:00000A0A                 cmp     dword ptr [ecx+4], 0
.text:00000A0E                 jnz     short loc_A14
.text:00000A10                 xor     eax, eax
.text:00000A12                 jmp     short loc_A8E
.text:00000A14 ; ---------------------------------------------------------------------------
.text:00000A14
.text:00000A14 loc_A14:                                ; CODE XREF: _rlogin_send+22j
.text:00000A14                 mov     edx, [ebp+var_4]
.text:00000A17                 cmp     dword ptr [edx+28h], 0
.text:00000A1B                 jz      short loc_A5A
.text:00000A1D                 mov     eax, [ebp+arg_8]
.text:00000A20                 push    eax
.text:00000A21                 mov     ecx, [ebp+arg_4]
.text:00000A24                 push    ecx
.text:00000A25                 mov     edx, [ebp+var_4]
.text:00000A28                 mov     eax, [edx+28h]
.text:00000A2B                 push    eax
.text:00000A2C                 call    _get_userpass_input
.text:00000A31                 add     esp, 0Ch
.text:00000A34                 mov     [ebp+var_8], eax
.text:00000A37                 cmp     [ebp+var_8], 0
.text:00000A3B                 jl      short loc_A58
.text:00000A3D                 mov     ecx, [ebp+var_4]
.text:00000A40                 mov     edx, [ecx+28h]
.text:00000A43                 mov     eax, [edx+18h]
.text:00000A46                 mov     ecx, [eax]
.text:00000A48                 mov     edx, [ecx+8]
.text:00000A4B                 push    edx             ; char *
.text:00000A4C                 mov     eax, [ebp+var_4]
.text:00000A4F                 push    eax             ; int
.text:00000A50                 call    _rlogin_startup
.text:00000A55                 add     esp, 8
.text:00000A58
.text:00000A58 loc_A58:                                ; CODE XREF: _rlogin_send+4Fj
.text:00000A58                 jmp     short loc_A88
.text:00000A5A ; ---------------------------------------------------------------------------
.text:00000A5A
.text:00000A5A loc_A5A:                                ; CODE XREF: _rlogin_send+2Fj
.text:00000A5A                 mov     esi, esp
.text:00000A5C                 mov     ecx, [ebp+arg_8]
.text:00000A5F                 push    ecx
.text:00000A60                 mov     edx, [ebp+arg_4]
.text:00000A63                 push    edx
.text:00000A64                 mov     eax, [ebp+var_4]
.text:00000A67                 mov     ecx, [eax+4]
.text:00000A6A                 push    ecx
.text:00000A6B                 mov     edx, [ebp+var_4]
.text:00000A6E                 mov     eax, [edx+4]
.text:00000A71                 mov     ecx, [eax]
.text:00000A73                 mov     edx, [ecx+8]
.text:00000A76                 call    edx
.text:00000A78                 add     esp, 0Ch
.text:00000A7B                 cmp     esi, esp
.text:00000A7D                 call    __RTC_CheckEsp
.text:00000A82                 mov     ecx, [ebp+var_4]
.text:00000A85                 mov     [ecx+0Ch], eax
.text:00000A88
.text:00000A88 loc_A88:                                ; CODE XREF: _rlogin_send:loc_A58j
.text:00000A88                 mov     edx, [ebp+var_4]
.text:00000A8B                 mov     eax, [edx+0Ch]
.text:00000A8E
.text:00000A8E loc_A8E:                                ; CODE XREF: _rlogin_send+26j
.text:00000A8E                 pop     esi
.text:00000A8F                 add     esp, 8
.text:00000A92                 cmp     ebp, esp
.text:00000A94                 call    __RTC_CheckEsp
.text:00000A99                 mov     esp, ebp
.text:00000A9B                 pop     ebp
.text:00000A9C                 retn
.text:00000A9C _rlogin_send    endp
.text:00000A9C
.text:00000A9C ; ---------------------------------------------------------------------------
.text:00000A9D                 db 0Fh dup(0CCh)
.text:00000AAC
.text:00000AAC ; =============== S U B R O U T I N E =======================================
.text:00000AAC
.text:00000AAC ; Attributes: bp-based frame
.text:00000AAC
.text:00000AAC _rlogin_sendbuffer proc near            ; DATA XREF: .data:000000B8o
.text:00000AAC
.text:00000AAC var_4           = dword ptr -4
.text:00000AAC arg_0           = dword ptr  8
.text:00000AAC
.text:00000AAC                 push    ebp
.text:00000AAD                 mov     ebp, esp
.text:00000AAF                 push    ecx
.text:00000AB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AB7                 mov     eax, [ebp+arg_0]
.text:00000ABA                 mov     [ebp+var_4], eax
.text:00000ABD                 mov     ecx, [ebp+var_4]
.text:00000AC0                 mov     eax, [ecx+0Ch]
.text:00000AC3                 mov     esp, ebp
.text:00000AC5                 pop     ebp
.text:00000AC6                 retn
.text:00000AC6 _rlogin_sendbuffer endp
.text:00000AC6
.text:00000AC6 ; ---------------------------------------------------------------------------
.text:00000AC7                 db 5 dup(0CCh)
.text:00000ACC
.text:00000ACC ; =============== S U B R O U T I N E =======================================
.text:00000ACC
.text:00000ACC ; Attributes: bp-based frame
.text:00000ACC
.text:00000ACC _rlogin_size    proc near               ; CODE XREF: _rlogin_receive+5Fp
.text:00000ACC                                         ; DATA XREF: .data:000000BCo
.text:00000ACC
.text:00000ACC var_1C          = dword ptr -1Ch
.text:00000ACC var_18          = dword ptr -18h
.text:00000ACC var_14          = dword ptr -14h
.text:00000ACC var_10          = dword ptr -10h
.text:00000ACC var_C           = dword ptr -0Ch
.text:00000ACC var_8           = dword ptr -8
.text:00000ACC var_4           = dword ptr -4
.text:00000ACC arg_0           = dword ptr  8
.text:00000ACC arg_4           = dword ptr  0Ch
.text:00000ACC arg_8           = dword ptr  10h
.text:00000ACC
.text:00000ACC                 push    ebp
.text:00000ACD                 mov     ebp, esp
.text:00000ACF                 sub     esp, 1Ch
.text:00000AD2                 push    esi
.text:00000AD3                 mov     eax, 0CCCCCCCCh
.text:00000AD8                 mov     [ebp+var_1C], eax
.text:00000ADB                 mov     [ebp+var_18], eax
.text:00000ADE                 mov     [ebp+var_14], eax
.text:00000AE1                 mov     [ebp+var_10], eax
.text:00000AE4                 mov     [ebp+var_C], eax
.text:00000AE7                 mov     [ebp+var_8], eax
.text:00000AEA                 mov     [ebp+var_4], eax
.text:00000AED                 mov     eax, dword ptr ds:___security_cookie
.text:00000AF2                 xor     eax, ebp
.text:00000AF4                 mov     [ebp+var_4], eax
.text:00000AF7                 mov     eax, [ebp+arg_0]
.text:00000AFA                 mov     [ebp+var_8], eax
.text:00000AFD                 mov     byte ptr [ebp+var_18], 0FFh
.text:00000B01                 mov     byte ptr [ebp+var_18+1], 0FFh
.text:00000B05                 mov     byte ptr [ebp+var_18+2], 73h ; 's'
.text:00000B09                 mov     byte ptr [ebp+var_18+3], 73h ; 's'
.text:00000B0D                 mov     byte ptr [ebp+var_14], 0
.text:00000B11                 mov     byte ptr [ebp+var_14+1], 0
.text:00000B15                 mov     byte ptr [ebp+var_14+2], 0
.text:00000B19                 mov     byte ptr [ebp+var_14+3], 0
.text:00000B1D                 mov     byte ptr [ebp+var_10], 0
.text:00000B21                 mov     byte ptr [ebp+var_10+1], 0
.text:00000B25                 mov     byte ptr [ebp+var_10+2], 0
.text:00000B29                 mov     byte ptr [ebp+var_10+3], 0
.text:00000B2D                 mov     ecx, [ebp+var_8]
.text:00000B30                 mov     edx, [ebp+arg_4]
.text:00000B33                 mov     [ecx+18h], edx
.text:00000B36                 mov     eax, [ebp+var_8]
.text:00000B39                 mov     ecx, [ebp+arg_8]
.text:00000B3C                 mov     [eax+1Ch], ecx
.text:00000B3F                 mov     edx, [ebp+var_8]
.text:00000B42                 cmp     dword ptr [edx+4], 0
.text:00000B46                 jz      short loc_B51
.text:00000B48                 mov     eax, [ebp+var_8]
.text:00000B4B                 cmp     dword ptr [eax+14h], 0
.text:00000B4F                 jnz     short loc_B53
.text:00000B51
.text:00000B51 loc_B51:                                ; CODE XREF: _rlogin_size+7Aj
.text:00000B51                 jmp     short loc_BB5
.text:00000B53 ; ---------------------------------------------------------------------------
.text:00000B53
.text:00000B53 loc_B53:                                ; CODE XREF: _rlogin_size+83j
.text:00000B53                 mov     ecx, [ebp+var_8]
.text:00000B56                 mov     edx, [ecx+18h]
.text:00000B59                 sar     edx, 8
.text:00000B5C                 mov     byte ptr [ebp+var_14+2], dl
.text:00000B5F                 mov     eax, [ebp+var_8]
.text:00000B62                 mov     ecx, [eax+18h]
.text:00000B65                 and     ecx, 0FFh
.text:00000B6B                 mov     byte ptr [ebp+var_14+3], cl
.text:00000B6E                 mov     edx, [ebp+var_8]
.text:00000B71                 mov     eax, [edx+1Ch]
.text:00000B74                 sar     eax, 8
.text:00000B77                 mov     byte ptr [ebp+var_14], al
.text:00000B7A                 mov     ecx, [ebp+var_8]
.text:00000B7D                 mov     edx, [ecx+1Ch]
.text:00000B80                 and     edx, 0FFh
.text:00000B86                 mov     byte ptr [ebp+var_14+1], dl
.text:00000B89                 mov     esi, esp
.text:00000B8B                 push    0Ch
.text:00000B8D                 lea     eax, [ebp+var_18]
.text:00000B90                 push    eax
.text:00000B91                 mov     ecx, [ebp+var_8]
.text:00000B94                 mov     edx, [ecx+4]
.text:00000B97                 push    edx
.text:00000B98                 mov     eax, [ebp+var_8]
.text:00000B9B                 mov     ecx, [eax+4]
.text:00000B9E                 mov     edx, [ecx]
.text:00000BA0                 mov     eax, [edx+8]
.text:00000BA3                 call    eax
.text:00000BA5                 add     esp, 0Ch
.text:00000BA8                 cmp     esi, esp
.text:00000BAA                 call    __RTC_CheckEsp
.text:00000BAF                 mov     ecx, [ebp+var_8]
.text:00000BB2                 mov     [ecx+0Ch], eax
.text:00000BB5
.text:00000BB5 loc_BB5:                                ; CODE XREF: _rlogin_size:loc_B51j
.text:00000BB5                 push    edx
.text:00000BB6                 mov     ecx, ebp
.text:00000BB8                 push    eax
.text:00000BB9                 lea     edx, $LN7_0
.text:00000BBF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BC4                 pop     eax
.text:00000BC5                 pop     edx
.text:00000BC6                 pop     esi
.text:00000BC7                 mov     ecx, [ebp+var_4]
.text:00000BCA                 xor     ecx, ebp
.text:00000BCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BD1                 add     esp, 1Ch
.text:00000BD4                 cmp     ebp, esp
.text:00000BD6                 call    __RTC_CheckEsp
.text:00000BDB                 mov     esp, ebp
.text:00000BDD                 pop     ebp
.text:00000BDE                 retn
.text:00000BDE _rlogin_size    endp
.text:00000BDE
.text:00000BDE ; ---------------------------------------------------------------------------
.text:00000BDF                 align 10h
.text:00000BE0 $LN7_0          dd 1                    ; DATA XREF: _rlogin_size+EDo
.text:00000BE4                 dd offset $LN6_0
.text:00000BE8 $LN6_0          dd 0FFFFFFE8h, 0Ch      ; DATA XREF: .text:00000BE4o
.text:00000BF0                 dd offset $LN5_1
.text:00000BF4 $LN5_1          dd 0CCCC0062h, 0CCCCCCCCh ; DATA XREF: .text:00000BF0o
.text:00000BFC
.text:00000BFC ; =============== S U B R O U T I N E =======================================
.text:00000BFC
.text:00000BFC ; Attributes: bp-based frame
.text:00000BFC
.text:00000BFC _rlogin_special proc near               ; DATA XREF: .data:000000C0o
.text:00000BFC                 push    ebp
.text:00000BFD                 mov     ebp, esp
.text:00000BFF                 pop     ebp
.text:00000C00                 retn
.text:00000C00 _rlogin_special endp
.text:00000C00
.text:00000C00 ; ---------------------------------------------------------------------------
.text:00000C01                 db 0Bh dup(0CCh)
.text:00000C0C
.text:00000C0C ; =============== S U B R O U T I N E =======================================
.text:00000C0C
.text:00000C0C ; Attributes: bp-based frame
.text:00000C0C
.text:00000C0C _rlogin_get_specials proc near          ; DATA XREF: .data:000000C4o
.text:00000C0C                 push    ebp
.text:00000C0D                 mov     ebp, esp
.text:00000C0F                 xor     eax, eax
.text:00000C11                 pop     ebp
.text:00000C12                 retn
.text:00000C12 _rlogin_get_specials endp
.text:00000C12
.text:00000C12 ; ---------------------------------------------------------------------------
.text:00000C13                 db 9 dup(0CCh)
.text:00000C1C
.text:00000C1C ; =============== S U B R O U T I N E =======================================
.text:00000C1C
.text:00000C1C ; Attributes: bp-based frame
.text:00000C1C
.text:00000C1C _rlogin_connected proc near             ; DATA XREF: .data:000000C8o
.text:00000C1C
.text:00000C1C var_4           = dword ptr -4
.text:00000C1C arg_0           = dword ptr  8
.text:00000C1C
.text:00000C1C                 push    ebp
.text:00000C1D                 mov     ebp, esp
.text:00000C1F                 push    ecx
.text:00000C20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C27                 mov     eax, [ebp+arg_0]
.text:00000C2A                 mov     [ebp+var_4], eax
.text:00000C2D                 mov     ecx, [ebp+var_4]
.text:00000C30                 xor     eax, eax
.text:00000C32                 cmp     dword ptr [ecx+4], 0
.text:00000C36                 setnz   al
.text:00000C39                 mov     esp, ebp
.text:00000C3B                 pop     ebp
.text:00000C3C                 retn
.text:00000C3C _rlogin_connected endp
.text:00000C3C
.text:00000C3C ; ---------------------------------------------------------------------------
.text:00000C3D                 db 0Fh dup(0CCh)
.text:00000C4C
.text:00000C4C ; =============== S U B R O U T I N E =======================================
.text:00000C4C
.text:00000C4C ; Attributes: bp-based frame
.text:00000C4C
.text:00000C4C _rlogin_sendok  proc near               ; DATA XREF: .data:000000D0o
.text:00000C4C                 push    ebp
.text:00000C4D                 mov     ebp, esp
.text:00000C4F                 mov     eax, 1
.text:00000C54                 pop     ebp
.text:00000C55                 retn
.text:00000C55 _rlogin_sendok  endp
.text:00000C55
.text:00000C55 ; ---------------------------------------------------------------------------
.text:00000C56                 db 6 dup(0CCh)
.text:00000C5C
.text:00000C5C ; =============== S U B R O U T I N E =======================================
.text:00000C5C
.text:00000C5C ; Attributes: bp-based frame
.text:00000C5C
.text:00000C5C _rlogin_unthrottle proc near            ; DATA XREF: .data:000000E0o
.text:00000C5C
.text:00000C5C var_4           = dword ptr -4
.text:00000C5C arg_0           = dword ptr  8
.text:00000C5C arg_4           = dword ptr  0Ch
.text:00000C5C
.text:00000C5C                 push    ebp
.text:00000C5D                 mov     ebp, esp
.text:00000C5F                 push    ecx
.text:00000C60                 push    esi
.text:00000C61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C68                 mov     eax, [ebp+arg_0]
.text:00000C6B                 mov     [ebp+var_4], eax
.text:00000C6E                 xor     ecx, ecx
.text:00000C70                 cmp     [ebp+arg_4], 1000h
.text:00000C77                 setnle  cl
.text:00000C7A                 mov     esi, esp
.text:00000C7C                 push    ecx
.text:00000C7D                 mov     edx, [ebp+var_4]
.text:00000C80                 mov     eax, [edx+4]
.text:00000C83                 push    eax
.text:00000C84                 mov     ecx, [ebp+var_4]
.text:00000C87                 mov     edx, [ecx+4]
.text:00000C8A                 mov     eax, [edx]
.text:00000C8C                 mov     ecx, [eax+18h]
.text:00000C8F                 call    ecx
.text:00000C91                 add     esp, 8
.text:00000C94                 cmp     esi, esp
.text:00000C96                 call    __RTC_CheckEsp
.text:00000C9B                 pop     esi
.text:00000C9C                 add     esp, 4
.text:00000C9F                 cmp     ebp, esp
.text:00000CA1                 call    __RTC_CheckEsp
.text:00000CA6                 mov     esp, ebp
.text:00000CA8                 pop     ebp
.text:00000CA9                 retn
.text:00000CA9 _rlogin_unthrottle endp
.text:00000CA9
.text:00000CA9 ; ---------------------------------------------------------------------------
.text:00000CAA                 align 4
.text:00000CAC
.text:00000CAC ; =============== S U B R O U T I N E =======================================
.text:00000CAC
.text:00000CAC ; Attributes: bp-based frame
.text:00000CAC
.text:00000CAC _rlogin_ldisc   proc near               ; DATA XREF: .data:000000D4o
.text:00000CAC                 push    ebp
.text:00000CAD                 mov     ebp, esp
.text:00000CAF                 xor     eax, eax
.text:00000CB1                 pop     ebp
.text:00000CB2                 retn
.text:00000CB2 _rlogin_ldisc   endp
.text:00000CB2
.text:00000CB2 ; ---------------------------------------------------------------------------
.text:00000CB3                 db 9 dup(0CCh)
.text:00000CBC
.text:00000CBC ; =============== S U B R O U T I N E =======================================
.text:00000CBC
.text:00000CBC ; Attributes: bp-based frame
.text:00000CBC
.text:00000CBC _rlogin_provide_ldisc proc near         ; DATA XREF: .data:000000D8o
.text:00000CBC                 push    ebp
.text:00000CBD                 mov     ebp, esp
.text:00000CBF                 pop     ebp
.text:00000CC0                 retn
.text:00000CC0 _rlogin_provide_ldisc endp
.text:00000CC0
.text:00000CC0 ; ---------------------------------------------------------------------------
.text:00000CC1                 db 0Bh dup(0CCh)
.text:00000CCC
.text:00000CCC ; =============== S U B R O U T I N E =======================================
.text:00000CCC
.text:00000CCC ; Attributes: bp-based frame
.text:00000CCC
.text:00000CCC _rlogin_provide_logctx proc near        ; DATA XREF: .data:000000DCo
.text:00000CCC                 push    ebp
.text:00000CCD                 mov     ebp, esp
.text:00000CCF                 pop     ebp
.text:00000CD0                 retn
.text:00000CD0 _rlogin_provide_logctx endp
.text:00000CD0
.text:00000CD0 ; ---------------------------------------------------------------------------
.text:00000CD1                 db 0Bh dup(0CCh)
.text:00000CDC
.text:00000CDC ; =============== S U B R O U T I N E =======================================
.text:00000CDC
.text:00000CDC ; Attributes: bp-based frame
.text:00000CDC
.text:00000CDC _rlogin_exitcode proc near              ; DATA XREF: .data:000000CCo
.text:00000CDC
.text:00000CDC var_4           = dword ptr -4
.text:00000CDC arg_0           = dword ptr  8
.text:00000CDC
.text:00000CDC                 push    ebp
.text:00000CDD                 mov     ebp, esp
.text:00000CDF                 push    ecx
.text:00000CE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CE7                 mov     eax, [ebp+arg_0]
.text:00000CEA                 mov     [ebp+var_4], eax
.text:00000CED                 mov     ecx, [ebp+var_4]
.text:00000CF0                 cmp     dword ptr [ecx+4], 0
.text:00000CF4                 jz      short loc_CFD
.text:00000CF6                 or      eax, 0FFFFFFFFh
.text:00000CF9                 jmp     short loc_D11
.text:00000CFB ; ---------------------------------------------------------------------------
.text:00000CFB                 jmp     short loc_D11
.text:00000CFD ; ---------------------------------------------------------------------------
.text:00000CFD
.text:00000CFD loc_CFD:                                ; CODE XREF: _rlogin_exitcode+18j
.text:00000CFD                 mov     edx, [ebp+var_4]
.text:00000D00                 cmp     dword ptr [edx+8], 0
.text:00000D04                 jz      short loc_D0F
.text:00000D06                 mov     eax, 7FFFFFFFh
.text:00000D0B                 jmp     short loc_D11
.text:00000D0D ; ---------------------------------------------------------------------------
.text:00000D0D                 jmp     short loc_D11
.text:00000D0F ; ---------------------------------------------------------------------------
.text:00000D0F
.text:00000D0F loc_D0F:                                ; CODE XREF: _rlogin_exitcode+28j
.text:00000D0F                 xor     eax, eax
.text:00000D11
.text:00000D11 loc_D11:                                ; CODE XREF: _rlogin_exitcode+1Dj
.text:00000D11                                         ; _rlogin_exitcode+1Fj ...
.text:00000D11                 mov     esp, ebp
.text:00000D13                 pop     ebp
.text:00000D14                 retn
.text:00000D14 _rlogin_exitcode endp
.text:00000D14
.text:00000D14 ; ---------------------------------------------------------------------------
.text:00000D15                 db 7 dup(0CCh)
.text:00000D1C
.text:00000D1C ; =============== S U B R O U T I N E =======================================
.text:00000D1C
.text:00000D1C ; Attributes: bp-based frame
.text:00000D1C
.text:00000D1C _rlogin_cfg_info proc near              ; DATA XREF: .data:000000E4o
.text:00000D1C                 push    ebp
.text:00000D1D                 mov     ebp, esp
.text:00000D1F                 xor     eax, eax
.text:00000D21                 pop     ebp
.text:00000D22                 retn
.text:00000D22 _rlogin_cfg_info endp
.text:00000D22
.text:00000D22 ; ---------------------------------------------------------------------------
.text:00000D23                 align 4
.text:00000D23 _text           ends
.text:00000D23
.rtc$TMZ:00000D24 ; ===========================================================================
.rtc$TMZ:00000D24
.rtc$TMZ:00000D24 ; Segment type: Pure data
.rtc$TMZ:00000D24 ; Segment permissions: Read
.rtc$TMZ:00000D24 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000D24                 assume cs:_rtc$TMZ
.rtc$TMZ:00000D24                 ;org 0D24h
.rtc$TMZ:00000D24 ; COMDAT (pick any)
.rtc$TMZ:00000D24 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000D24 _rtc$TMZ        ends
.rtc$TMZ:00000D24
.rtc$IMZ:00000D28 ; ===========================================================================
.rtc$IMZ:00000D28
.rtc$IMZ:00000D28 ; Segment type: Pure data
.rtc$IMZ:00000D28 ; Segment permissions: Read
.rtc$IMZ:00000D28 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000D28                 assume cs:_rtc$IMZ
.rtc$IMZ:00000D28                 ;org 0D28h
.rtc$IMZ:00000D28 ; COMDAT (pick any)
.rtc$IMZ:00000D28 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000D28 _rtc$IMZ        ends
.rtc$IMZ:00000D28
UNDEF:00000D30 ; ===========================================================================
UNDEF:00000D30
UNDEF:00000D30 ; Segment type: Externs
UNDEF:00000D30 ; UNDEF
UNDEF:00000D30                 extrn _safefree:near    ; CODE XREF: _rlogin_log+A5p
UNDEF:00000D30                                         ; _rlogin_init+117p ...
UNDEF:00000D34                 extrn _logevent:near    ; CODE XREF: _rlogin_log+96p
UNDEF:00000D34                                         ; _rlogin_closing+75p ...
UNDEF:00000D38                 extrn _dupprintf:near   ; CODE XREF: _rlogin_log+5Ap
UNDEF:00000D38                                         ; _rlogin_log+7Ap ...
UNDEF:00000D3C                 extrn _sk_getaddr:near  ; CODE XREF: _rlogin_log+3Cp
UNDEF:00000D40                 extrn ___security_cookie:near ; DATA XREF: _rlogin_log+1Cr
UNDEF:00000D40                                         ; _rlogin_size+21r
UNDEF:00000D44                 extrn __RTC_CheckEsp:near ; CODE XREF: _rlogin_log+D1p
UNDEF:00000D44                                         ; _rlogin_closing+36p ...
UNDEF:00000D48 ; __fastcall __security_check_cookie(x)
UNDEF:00000D48                 extrn @__security_check_cookie@4:near
UNDEF:00000D48                                         ; CODE XREF: _rlogin_log+C4p
UNDEF:00000D48                                         ; _rlogin_size+100p
UNDEF:00000D4C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000D4C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000D4C                                         ; CODE XREF: _rlogin_log+B7p
UNDEF:00000D4C                                         ; _rlogin_startup+1FAp ...
UNDEF:00000D50                 extrn __RTC_Shutdown:near
UNDEF:00000D50                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000D54                 extrn __RTC_InitBase:near
UNDEF:00000D54                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000D58                 extrn _connection_fatal:near ; CODE XREF: _rlogin_closing+8Dp
UNDEF:00000D5C                 extrn _notify_remote_exit:near
UNDEF:00000D5C                                         ; CODE XREF: _rlogin_closing+5Cp
UNDEF:00000D60                 extrn _from_backend:near ; CODE XREF: _c_write+1Dp
UNDEF:00000D64                 extrn _get_userpass_input:near ; CODE XREF: _rlogin_init+2CEp
UNDEF:00000D64                                         ; _rlogin_send+40p
UNDEF:00000D68                 extrn _add_prompt:near  ; CODE XREF: _rlogin_init+2BBp
UNDEF:00000D6C                 extrn _new_prompts:near ; CODE XREF: _rlogin_init+274p
UNDEF:00000D70                 extrn _get_remote_username:near
UNDEF:00000D70                                         ; CODE XREF: _rlogin_init+23Bp
UNDEF:00000D74                 extrn _host_strrchr:near ; CODE XREF: _rlogin_init+217p
UNDEF:00000D78                 extrn _dupstr:near      ; CODE XREF: _rlogin_init+202p
UNDEF:00000D78                                         ; _rlogin_init+293p ...
UNDEF:00000D7C                 extrn _conf_get_str:near ; CODE XREF: _rlogin_init+1DBp
UNDEF:00000D7C                                         ; _rlogin_startup+4Bp ...
UNDEF:00000D80                 extrn _new_connection:near ; CODE XREF: _rlogin_init+196p
UNDEF:00000D84                 extrn _sk_addr_free:near ; CODE XREF: _rlogin_init+157p
UNDEF:00000D88                 extrn _sk_addr_error:near ; CODE XREF: _rlogin_init+142p
UNDEF:00000D8C                 extrn _name_lookup:near ; CODE XREF: _rlogin_init+133p
UNDEF:00000D90                 extrn _conf_copy:near   ; CODE XREF: _rlogin_init+96p
UNDEF:00000D94                 extrn _conf_get_int:near ; CODE XREF: _rlogin_init+52p
UNDEF:00000D94                                         ; _rlogin_init+66p ...
UNDEF:00000D98                 extrn _safemalloc:near  ; CODE XREF: _rlogin_init+1Bp
UNDEF:00000D9C ; size_t __cdecl strspn(const char *Str, const char *Control)
UNDEF:00000D9C                 extrn _strspn:near      ; CODE XREF: _rlogin_startup+18Dp
UNDEF:00000DA0 ; size_t __cdecl strlen(const char *Str)
UNDEF:00000DA0                 extrn _strlen:near      ; CODE XREF: _rlogin_startup+5Ap
UNDEF:00000DA0                                         ; _rlogin_startup+B1p ...
UNDEF:00000DA4                 extrn _conf_free:near   ; CODE XREF: _rlogin_free+5Ap
UNDEF:00000DA8                 extrn _free_prompts:near ; CODE XREF: _rlogin_free+22p
UNDEF:00000DA8
UNDEF:00000DA8
UNDEF:00000DA8                 end