.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 65ED8A845894C836E5C159D7A0D6D972
.data:00000000 ; Input CRC32 : 92FA158A
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winutils.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85584        db 'errors.hostkey.absent:errors-hostkey-absent',0
.data:00000000                                         ; DATA XREF: message_box_help_callback(x)+1Bo
.data:0000002C $SG85589        db 'errors.hostkey.changed:errors-hostkey-wrong',0
.data:0000002C                                         ; DATA XREF: message_box_help_callback(x)+2Fo
.data:00000058 $SG85594        db 'errors.cantloadkey:errors-cant-load-key',0
.data:00000058                                         ; DATA XREF: message_box_help_callback(x)+43o
.data:00000080 $SG85599        db 'options.cleanup:using-cleanup',0
.data:00000080                                         ; DATA XREF: message_box_help_callback(x)+57o
.data:0000009E                 align 10h
.data:000000A0 $SG85604        db 'pgpfingerprints:pgpkeys',0
.data:000000A0                                         ; DATA XREF: message_box_help_callback(x)+6Bo
.data:000000B8 $SG85619        db 'PGP fingerprints',0 ; DATA XREF: _pgp_fingerprints+7o
.data:000000C9                 align 10h
.data:000000D0 $SG85620        db 'These are the fingerprints of the PuTTY PGP Master Keys. They can'
.data:000000D0                                         ; DATA XREF: _pgp_fingerprints+Co
.data:000000D0                 db 0Ah
.data:000000D0                 db 'be used to establish a trust path from this executable to another'
.data:000000D0                 db 0Ah
.data:000000D0                 db 'one. See the manual for more information.',0Ah
.data:000000D0                 db '(Note: these fingerprints have nothing to do with SSH!)',0Ah
.data:000000D0                 db 0Ah
.data:000000D0                 db 'PuTTY Master Key (RSA), 1024-bit:',0Ah
.data:000000D0                 db '  8F 15 97 DA 25 30 AB 0D  88 D1 92 54 11 CF 0C 4C',0Ah
.data:000000D0                 db 'PuTTY Master Key (DSA), 1024-bit:',0Ah
.data:000000D0                 db '  313C 3E76 4B74 C2C5 F2AE  83A8 4F5E 6DF5 6A93 B34E',0
.data:00000263                 align 4
.data:00000263 _data           ends
.data:00000263
.text:00000264 ; ===========================================================================
.text:00000264
.text:00000264 ; Segment type: Pure code
.text:00000264 ; Segment permissions: Read/Execute
.text:00000264 _text           segment para public 'CODE' use32
.text:00000264                 assume cs:_text
.text:00000264                 ;org 264h
.text:00000264                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000264
.text:00000264 ; =============== S U B R O U T I N E =======================================
.text:00000264
.text:00000264 ; Attributes: bp-based frame
.text:00000264
.text:00000264 ; int __cdecl request_file(LPSTR lpBuffer, LPOPENFILENAMEA, int, int)
.text:00000264                 public _request_file
.text:00000264 _request_file   proc near
.text:00000264
.text:00000264 var_124         = dword ptr -124h
.text:00000264 var_120         = dword ptr -120h
.text:00000264 var_11C         = dword ptr -11Ch
.text:00000264 var_118         = dword ptr -118h
.text:00000264 var_114         = dword ptr -114h
.text:00000264 Buffer          = byte ptr -10Ch
.text:00000264 var_4           = dword ptr -4
.text:00000264 lpBuffer        = dword ptr  8
.text:00000264 arg_4           = dword ptr  0Ch
.text:00000264 arg_8           = dword ptr  10h
.text:00000264 arg_C           = dword ptr  14h
.text:00000264
.text:00000264                 push    ebp
.text:00000265                 mov     ebp, esp
.text:00000267                 sub     esp, 124h
.text:0000026D                 push    esi
.text:0000026E                 push    edi
.text:0000026F                 lea     edi, [ebp+var_124]
.text:00000275                 mov     ecx, 49h ; 'I'
.text:0000027A                 mov     eax, 0CCCCCCCCh
.text:0000027F                 rep stosd
.text:00000281                 mov     eax, dword ptr ds:___security_cookie
.text:00000286                 xor     eax, ebp
.text:00000288                 mov     [ebp+var_4], eax
.text:0000028B                 cmp     [ebp+arg_8], 0
.text:0000028F                 jz      short loc_2CE
.text:00000291                 mov     esi, esp
.text:00000293                 lea     eax, [ebp+Buffer]
.text:00000299                 push    eax             ; lpBuffer
.text:0000029A                 push    104h            ; nBufferLength
.text:0000029F                 call    dword ptr ds:__imp__GetCurrentDirectoryA@8 ; GetCurrentDirectoryA(x,x)
.text:000002A5                 cmp     esi, esp
.text:000002A7                 call    __RTC_CheckEsp
.text:000002AC                 mov     [ebp+var_118], eax
.text:000002B2                 cmp     [ebp+var_118], 0
.text:000002B9                 jz      short loc_2C7
.text:000002BB                 cmp     [ebp+var_118], 104h
.text:000002C5                 jb      short loc_2CE
.text:000002C7
.text:000002C7 loc_2C7:                                ; CODE XREF: _request_file+55j
.text:000002C7                 mov     [ebp+arg_8], 0
.text:000002CE
.text:000002CE loc_2CE:                                ; CODE XREF: _request_file+2Bj
.text:000002CE                                         ; _request_file+61j
.text:000002CE                 mov     ecx, [ebp+arg_4]
.text:000002D1                 mov     dword ptr [ecx], 4Ch ; 'L'
.text:000002D7                 cmp     [ebp+lpBuffer], 0
.text:000002DB                 jz      short loc_2F2
.text:000002DD                 mov     edx, [ebp+lpBuffer]
.text:000002E0                 movsx   eax, byte ptr [edx]
.text:000002E3                 test    eax, eax
.text:000002E5                 jz      short loc_2F2
.text:000002E7                 mov     ecx, [ebp+lpBuffer]
.text:000002EA                 mov     [ebp+var_120], ecx
.text:000002F0                 jmp     short loc_2FC
.text:000002F2 ; ---------------------------------------------------------------------------
.text:000002F2
.text:000002F2 loc_2F2:                                ; CODE XREF: _request_file+77j
.text:000002F2                                         ; _request_file+81j
.text:000002F2                 mov     [ebp+var_120], 0
.text:000002FC
.text:000002FC loc_2FC:                                ; CODE XREF: _request_file+8Cj
.text:000002FC                 mov     edx, [ebp+arg_4]
.text:000002FF                 mov     eax, [ebp+var_120]
.text:00000305                 mov     [edx+2Ch], eax
.text:00000308                 cmp     [ebp+arg_C], 0
.text:0000030C                 jz      short loc_329
.text:0000030E                 mov     esi, esp
.text:00000310                 mov     ecx, [ebp+arg_4]
.text:00000313                 push    ecx             ; LPOPENFILENAMEA
.text:00000314                 call    dword ptr ds:__imp__GetSaveFileNameA@4 ; GetSaveFileNameA(x)
.text:0000031A                 cmp     esi, esp
.text:0000031C                 call    __RTC_CheckEsp
.text:00000321                 mov     [ebp+var_124], eax
.text:00000327                 jmp     short loc_342
.text:00000329 ; ---------------------------------------------------------------------------
.text:00000329
.text:00000329 loc_329:                                ; CODE XREF: _request_file+A8j
.text:00000329                 mov     esi, esp
.text:0000032B                 mov     edx, [ebp+arg_4]
.text:0000032E                 push    edx             ; LPOPENFILENAMEA
.text:0000032F                 call    dword ptr ds:__imp__GetOpenFileNameA@4 ; GetOpenFileNameA(x)
.text:00000335                 cmp     esi, esp
.text:00000337                 call    __RTC_CheckEsp
.text:0000033C                 mov     [ebp+var_124], eax
.text:00000342
.text:00000342 loc_342:                                ; CODE XREF: _request_file+C3j
.text:00000342                 mov     eax, [ebp+var_124]
.text:00000348                 mov     [ebp+var_114], eax
.text:0000034E                 cmp     [ebp+lpBuffer], 0
.text:00000352                 jz      short loc_38D
.text:00000354                 mov     esi, esp
.text:00000356                 mov     ecx, [ebp+lpBuffer]
.text:00000359                 push    ecx             ; lpBuffer
.text:0000035A                 push    104h            ; nBufferLength
.text:0000035F                 call    dword ptr ds:__imp__GetCurrentDirectoryA@8 ; GetCurrentDirectoryA(x,x)
.text:00000365                 cmp     esi, esp
.text:00000367                 call    __RTC_CheckEsp
.text:0000036C                 mov     [ebp+var_11C], eax
.text:00000372                 cmp     [ebp+var_11C], 0
.text:00000379                 jz      short loc_387
.text:0000037B                 cmp     [ebp+var_11C], 104h
.text:00000385                 jb      short loc_38D
.text:00000387
.text:00000387 loc_387:                                ; CODE XREF: _request_file+115j
.text:00000387                 mov     edx, [ebp+lpBuffer]
.text:0000038A                 mov     byte ptr [edx], 0
.text:0000038D
.text:0000038D loc_38D:                                ; CODE XREF: _request_file+EEj
.text:0000038D                                         ; _request_file+121j
.text:0000038D                 cmp     [ebp+arg_8], 0
.text:00000391                 jz      short loc_3A9
.text:00000393                 mov     esi, esp
.text:00000395                 lea     eax, [ebp+Buffer]
.text:0000039B                 push    eax             ; lpPathName
.text:0000039C                 call    dword ptr ds:__imp__SetCurrentDirectoryA@4 ; SetCurrentDirectoryA(x)
.text:000003A2                 cmp     esi, esp
.text:000003A4                 call    __RTC_CheckEsp
.text:000003A9
.text:000003A9 loc_3A9:                                ; CODE XREF: _request_file+12Dj
.text:000003A9                 mov     eax, [ebp+var_114]
.text:000003AF                 push    edx
.text:000003B0                 mov     ecx, ebp
.text:000003B2                 push    eax
.text:000003B3                 lea     edx, $LN16
.text:000003B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003BE                 pop     eax
.text:000003BF                 pop     edx
.text:000003C0                 pop     edi
.text:000003C1                 pop     esi
.text:000003C2                 mov     ecx, [ebp+var_4]
.text:000003C5                 xor     ecx, ebp
.text:000003C7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000003CC                 add     esp, 124h
.text:000003D2                 cmp     ebp, esp
.text:000003D4                 call    __RTC_CheckEsp
.text:000003D9                 mov     esp, ebp
.text:000003DB                 pop     ebp
.text:000003DC                 retn
.text:000003DC _request_file   endp
.text:000003DC
.text:000003DC ; ---------------------------------------------------------------------------
.text:000003DD                 align 10h
.text:000003E0 $LN16           dd 1                    ; DATA XREF: _request_file+14Fo
.text:000003E4                 dd offset $LN15
.text:000003E8 $LN15           dd 0FFFFFEF4h, 104h     ; DATA XREF: .text:000003E4o
.text:000003F0                 dd offset $LN14
.text:000003F4 $LN14           dd 647763h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000003F0o
.text:00000404
.text:00000404 ; =============== S U B R O U T I N E =======================================
.text:00000404
.text:00000404 ; Attributes: bp-based frame
.text:00000404
.text:00000404                 public _filereq_new
.text:00000404 _filereq_new    proc near
.text:00000404
.text:00000404 var_4           = dword ptr -4
.text:00000404
.text:00000404                 push    ebp
.text:00000405                 mov     ebp, esp
.text:00000407                 push    ecx
.text:00000408                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000040F                 push    104h
.text:00000414                 push    1
.text:00000416                 call    _safemalloc
.text:0000041B                 add     esp, 8
.text:0000041E                 mov     [ebp+var_4], eax
.text:00000421                 mov     eax, [ebp+var_4]
.text:00000424                 mov     byte ptr [eax], 0
.text:00000427                 mov     eax, [ebp+var_4]
.text:0000042A                 add     esp, 4
.text:0000042D                 cmp     ebp, esp
.text:0000042F                 call    __RTC_CheckEsp
.text:00000434                 mov     esp, ebp
.text:00000436                 pop     ebp
.text:00000437                 retn
.text:00000437 _filereq_new    endp
.text:00000437
.text:00000437 ; ---------------------------------------------------------------------------
.text:00000438                 db 0Ch dup(0CCh)
.text:00000444
.text:00000444 ; =============== S U B R O U T I N E =======================================
.text:00000444
.text:00000444 ; Attributes: bp-based frame
.text:00000444
.text:00000444                 public _filereq_free
.text:00000444 _filereq_free   proc near
.text:00000444
.text:00000444 arg_0           = dword ptr  8
.text:00000444
.text:00000444                 push    ebp
.text:00000445                 mov     ebp, esp
.text:00000447                 mov     eax, [ebp+arg_0]
.text:0000044A                 push    eax
.text:0000044B                 call    _safefree
.text:00000450                 add     esp, 4
.text:00000453                 cmp     ebp, esp
.text:00000455                 call    __RTC_CheckEsp
.text:0000045A                 pop     ebp
.text:0000045B                 retn
.text:0000045B _filereq_free   endp
.text:0000045B
.text:0000045B ; ---------------------------------------------------------------------------
.text:0000045C                 db 8 dup(0CCh)
.text:00000464
.text:00000464 ; =============== S U B R O U T I N E =======================================
.text:00000464
.text:00000464 ; Attributes: bp-based frame
.text:00000464
.text:00000464                 public _message_box
.text:00000464 _message_box    proc near               ; CODE XREF: _pgp_fingerprints+11p
.text:00000464
.text:00000464 var_30          = byte ptr -30h
.text:00000464 mbp             = MSGBOXPARAMSA ptr -2Ch
.text:00000464 arg_0           = dword ptr  8
.text:00000464 arg_4           = dword ptr  0Ch
.text:00000464 arg_8           = dword ptr  10h
.text:00000464 arg_C           = dword ptr  14h
.text:00000464
.text:00000464                 push    ebp
.text:00000465                 mov     ebp, esp
.text:00000467                 sub     esp, 30h
.text:0000046A                 push    esi
.text:0000046B                 push    edi
.text:0000046C                 lea     edi, [ebp+var_30]
.text:0000046F                 mov     ecx, 0Ch
.text:00000474                 mov     eax, 0CCCCCCCCh
.text:00000479                 rep stosd
.text:0000047B                 mov     [ebp+mbp.cbSize], 28h ; '('
.text:00000482                 mov     eax, dword ptr ds:_hinst
.text:00000487                 mov     [ebp+mbp.hInstance], eax
.text:0000048A                 mov     ecx, dword ptr ds:_hwnd
.text:00000490                 mov     [ebp+mbp.hwndOwner], ecx
.text:00000493                 mov     [ebp+mbp.lpfnMsgBoxCallback], offset _message_box_help_callback@4 ; message_box_help_callback(x)
.text:0000049A                 mov     [ebp+mbp.dwLanguageId], 0
.text:000004A1                 mov     edx, [ebp+arg_0]
.text:000004A4                 mov     [ebp+mbp.lpszText], edx
.text:000004A7                 mov     eax, [ebp+arg_4]
.text:000004AA                 mov     [ebp+mbp.lpszCaption], eax
.text:000004AD                 mov     ecx, [ebp+arg_C]
.text:000004B0                 mov     [ebp+mbp.dwContextHelpId], ecx
.text:000004B3                 mov     edx, [ebp+arg_8]
.text:000004B6                 mov     [ebp+mbp.dwStyle], edx
.text:000004B9                 cmp     [ebp+arg_C], 0
.text:000004BD                 jz      short loc_4D3
.text:000004BF                 call    _has_help
.text:000004C4                 test    eax, eax
.text:000004C6                 jz      short loc_4D3
.text:000004C8                 mov     eax, [ebp+mbp.dwStyle]
.text:000004CB                 or      eax, 4000h
.text:000004D0                 mov     [ebp+mbp.dwStyle], eax
.text:000004D3
.text:000004D3 loc_4D3:                                ; CODE XREF: _message_box+59j
.text:000004D3                                         ; _message_box+62j
.text:000004D3                 mov     esi, esp
.text:000004D5                 lea     ecx, [ebp+mbp]
.text:000004D8                 push    ecx             ; lpmbp
.text:000004D9                 call    dword ptr ds:__imp__MessageBoxIndirectA@4 ; MessageBoxIndirectA(x)
.text:000004DF                 cmp     esi, esp
.text:000004E1                 call    __RTC_CheckEsp
.text:000004E6                 push    edx
.text:000004E7                 mov     ecx, ebp
.text:000004E9                 push    eax
.text:000004EA                 lea     edx, $LN6
.text:000004F0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004F5                 pop     eax
.text:000004F6                 pop     edx
.text:000004F7                 pop     edi
.text:000004F8                 pop     esi
.text:000004F9                 add     esp, 30h
.text:000004FC                 cmp     ebp, esp
.text:000004FE                 call    __RTC_CheckEsp
.text:00000503                 mov     esp, ebp
.text:00000505                 pop     ebp
.text:00000506                 retn
.text:00000506 _message_box    endp
.text:00000506
.text:00000506 ; ---------------------------------------------------------------------------
.text:00000507                 align 4
.text:00000508 $LN6            dd 1                    ; DATA XREF: _message_box+86o
.text:0000050C                 dd offset $LN5
.text:00000510 $LN5            dd 0FFFFFFD4h, 28h      ; DATA XREF: .text:0000050Co
.text:00000518                 dd offset $LN4          ; "mbox"
.text:0000051C $LN4            db 'mbox',0             ; DATA XREF: .text:00000518o
.text:00000521                 align 4
.text:00000524
.text:00000524 ; =============== S U B R O U T I N E =======================================
.text:00000524
.text:00000524 ; Attributes: bp-based frame
.text:00000524
.text:00000524 ; __stdcall message_box_help_callback(x)
.text:00000524 _message_box_help_callback@4 proc near  ; DATA XREF: _message_box+2Fo
.text:00000524
.text:00000524 var_4           = dword ptr -4
.text:00000524 arg_0           = dword ptr  8
.text:00000524
.text:00000524                 push    ebp
.text:00000525                 mov     ebp, esp
.text:00000527                 push    ecx
.text:00000528                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000052F                 mov     [ebp+var_4], 0
.text:00000536
.text:00000536 loc_536:                                ; CODE XREF: message_box_help_callback(x)+24j
.text:00000536                 mov     eax, [ebp+arg_0]
.text:00000539                 cmp     dword ptr [eax+10h], 1
.text:0000053D                 jnz     short loc_546
.text:0000053F                 mov     [ebp+var_4], offset $SG85584 ; "errors.hostkey.absent:errors-hostkey-ab"...
.text:00000546
.text:00000546 loc_546:                                ; CODE XREF: message_box_help_callback(x)+19j
.text:00000546                 xor     ecx, ecx
.text:00000548                 jnz     short loc_536
.text:0000054A
.text:0000054A loc_54A:                                ; CODE XREF: message_box_help_callback(x)+38j
.text:0000054A                 mov     edx, [ebp+arg_0]
.text:0000054D                 cmp     dword ptr [edx+10h], 2
.text:00000551                 jnz     short loc_55A
.text:00000553                 mov     [ebp+var_4], offset $SG85589 ; "errors.hostkey.changed:errors-hostkey-w"...
.text:0000055A
.text:0000055A loc_55A:                                ; CODE XREF: message_box_help_callback(x)+2Dj
.text:0000055A                 xor     eax, eax
.text:0000055C                 jnz     short loc_54A
.text:0000055E
.text:0000055E loc_55E:                                ; CODE XREF: message_box_help_callback(x)+4Cj
.text:0000055E                 mov     ecx, [ebp+arg_0]
.text:00000561                 cmp     dword ptr [ecx+10h], 3
.text:00000565                 jnz     short loc_56E
.text:00000567                 mov     [ebp+var_4], offset $SG85594 ; "errors.cantloadkey:errors-cant-load-key"
.text:0000056E
.text:0000056E loc_56E:                                ; CODE XREF: message_box_help_callback(x)+41j
.text:0000056E                 xor     edx, edx
.text:00000570                 jnz     short loc_55E
.text:00000572
.text:00000572 loc_572:                                ; CODE XREF: message_box_help_callback(x)+60j
.text:00000572                 mov     eax, [ebp+arg_0]
.text:00000575                 cmp     dword ptr [eax+10h], 4
.text:00000579                 jnz     short loc_582
.text:0000057B                 mov     [ebp+var_4], offset $SG85599 ; "options.cleanup:using-cleanup"
.text:00000582
.text:00000582 loc_582:                                ; CODE XREF: message_box_help_callback(x)+55j
.text:00000582                 xor     ecx, ecx
.text:00000584                 jnz     short loc_572
.text:00000586
.text:00000586 loc_586:                                ; CODE XREF: message_box_help_callback(x)+74j
.text:00000586                 mov     edx, [ebp+arg_0]
.text:00000589                 cmp     dword ptr [edx+10h], 5
.text:0000058D                 jnz     short loc_596
.text:0000058F                 mov     [ebp+var_4], offset $SG85604 ; "pgpfingerprints:pgpkeys"
.text:00000596
.text:00000596 loc_596:                                ; CODE XREF: message_box_help_callback(x)+69j
.text:00000596                 xor     eax, eax
.text:00000598                 jnz     short loc_586
.text:0000059A                 cmp     [ebp+var_4], 0
.text:0000059E                 jz      short loc_5B3
.text:000005A0                 mov     ecx, [ebp+var_4]
.text:000005A3                 push    ecx
.text:000005A4                 mov     edx, dword ptr ds:_hwnd
.text:000005AA                 push    edx
.text:000005AB                 call    _launch_help
.text:000005B0                 add     esp, 8
.text:000005B3
.text:000005B3 loc_5B3:                                ; CODE XREF: message_box_help_callback(x)+7Aj
.text:000005B3                 add     esp, 4
.text:000005B6                 cmp     ebp, esp
.text:000005B8                 call    __RTC_CheckEsp
.text:000005BD                 mov     esp, ebp
.text:000005BF                 pop     ebp
.text:000005C0                 retn    4
.text:000005C0 _message_box_help_callback@4 endp
.text:000005C0
.text:000005C0 ; ---------------------------------------------------------------------------
.text:000005C3                 align 4
.text:000005C4
.text:000005C4 ; =============== S U B R O U T I N E =======================================
.text:000005C4
.text:000005C4 ; Attributes: bp-based frame
.text:000005C4
.text:000005C4                 public _pgp_fingerprints
.text:000005C4 _pgp_fingerprints proc near
.text:000005C4                 push    ebp
.text:000005C5                 mov     ebp, esp
.text:000005C7                 push    5
.text:000005C9                 push    40h ; '@'
.text:000005CB                 push    offset $SG85619 ; "PGP fingerprints"
.text:000005D0                 push    offset $SG85620 ; "These are the fingerprints of the PuTTY"...
.text:000005D5                 call    _message_box
.text:000005DA                 add     esp, 10h
.text:000005DD                 cmp     ebp, esp
.text:000005DF                 call    __RTC_CheckEsp
.text:000005E4                 pop     ebp
.text:000005E5                 retn
.text:000005E5 _pgp_fingerprints endp
.text:000005E5
.text:000005E5 ; ---------------------------------------------------------------------------
.text:000005E6                 db 0Eh dup(0CCh)
.text:000005F4
.text:000005F4 ; =============== S U B R O U T I N E =======================================
.text:000005F4
.text:000005F4 ; Attributes: bp-based frame
.text:000005F4
.text:000005F4 ; int __cdecl GetDlgItemText_alloc(HWND hDlg, int nIDDlgItem)
.text:000005F4                 public _GetDlgItemText_alloc
.text:000005F4 _GetDlgItemText_alloc proc near
.text:000005F4
.text:000005F4 cchMax          = dword ptr -8
.text:000005F4 lpString        = dword ptr -4
.text:000005F4 hDlg            = dword ptr  8
.text:000005F4 nIDDlgItem      = dword ptr  0Ch
.text:000005F4
.text:000005F4                 push    ebp
.text:000005F5                 mov     ebp, esp
.text:000005F7                 sub     esp, 8
.text:000005FA                 push    esi
.text:000005FB                 mov     [ebp+cchMax], 0CCCCCCCCh
.text:00000602                 mov     [ebp+lpString], 0CCCCCCCCh
.text:00000609                 mov     [ebp+lpString], 0
.text:00000610                 mov     [ebp+cchMax], 0
.text:00000617
.text:00000617 loc_617:                                ; CODE XREF: _GetDlgItemText_alloc+84j
.text:00000617                 mov     eax, [ebp+cchMax]
.text:0000061A                 shl     eax, 2
.text:0000061D                 cdq
.text:0000061E                 mov     ecx, 3
.text:00000623                 idiv    ecx
.text:00000625                 add     eax, 200h
.text:0000062A                 mov     [ebp+cchMax], eax
.text:0000062D                 push    1
.text:0000062F                 mov     edx, [ebp+cchMax]
.text:00000632                 push    edx
.text:00000633                 mov     eax, [ebp+lpString]
.text:00000636                 push    eax
.text:00000637                 call    _saferealloc
.text:0000063C                 add     esp, 0Ch
.text:0000063F                 mov     [ebp+lpString], eax
.text:00000642                 mov     esi, esp
.text:00000644                 mov     ecx, [ebp+cchMax]
.text:00000647                 push    ecx             ; cchMax
.text:00000648                 mov     edx, [ebp+lpString]
.text:0000064B                 push    edx             ; lpString
.text:0000064C                 mov     eax, [ebp+nIDDlgItem]
.text:0000064F                 push    eax             ; nIDDlgItem
.text:00000650                 mov     ecx, [ebp+hDlg]
.text:00000653                 push    ecx             ; hDlg
.text:00000654                 call    dword ptr ds:__imp__GetDlgItemTextA@16 ; GetDlgItemTextA(x,x,x,x)
.text:0000065A                 cmp     esi, esp
.text:0000065C                 call    __RTC_CheckEsp
.text:00000661                 mov     edx, [ebp+cchMax]
.text:00000664                 sub     edx, 1
.text:00000667                 push    edx             ; MaxCount
.text:00000668                 push    0               ; Val
.text:0000066A                 mov     eax, [ebp+lpString]
.text:0000066D                 push    eax             ; Buf
.text:0000066E                 call    _memchr
.text:00000673                 add     esp, 0Ch
.text:00000676                 test    eax, eax
.text:00000678                 jz      short loc_617
.text:0000067A                 mov     eax, [ebp+lpString]
.text:0000067D                 pop     esi
.text:0000067E                 add     esp, 8
.text:00000681                 cmp     ebp, esp
.text:00000683                 call    __RTC_CheckEsp
.text:00000688                 mov     esp, ebp
.text:0000068A                 pop     ebp
.text:0000068B                 retn
.text:0000068B _GetDlgItemText_alloc endp
.text:0000068B
.text:0000068B ; ---------------------------------------------------------------------------
.text:0000068C                 db 8 dup(0CCh)
.text:00000694
.text:00000694 ; =============== S U B R O U T I N E =======================================
.text:00000694
.text:00000694 ; Attributes: bp-based frame
.text:00000694
.text:00000694 ; int __cdecl split_into_argv(char *Str, int, int, int)
.text:00000694                 public _split_into_argv
.text:00000694 _split_into_argv proc near
.text:00000694
.text:00000694 var_2C          = dword ptr -2Ch
.text:00000694 var_28          = dword ptr -28h
.text:00000694 var_24          = dword ptr -24h
.text:00000694 var_20          = dword ptr -20h
.text:00000694 var_1C          = dword ptr -1Ch
.text:00000694 var_18          = dword ptr -18h
.text:00000694 var_14          = dword ptr -14h
.text:00000694 var_10          = dword ptr -10h
.text:00000694 var_C           = dword ptr -0Ch
.text:00000694 var_8           = dword ptr -8
.text:00000694 var_4           = dword ptr -4
.text:00000694 Str             = dword ptr  8
.text:00000694 arg_4           = dword ptr  0Ch
.text:00000694 arg_8           = dword ptr  10h
.text:00000694 arg_C           = dword ptr  14h
.text:00000694
.text:00000694                 push    ebp
.text:00000695                 mov     ebp, esp
.text:00000697                 sub     esp, 2Ch
.text:0000069A                 push    edi
.text:0000069B                 lea     edi, [ebp+var_2C]
.text:0000069E                 mov     ecx, 0Bh
.text:000006A3                 mov     eax, 0CCCCCCCCh
.text:000006A8                 rep stosd
.text:000006AA
.text:000006AA loc_6AA:                                ; CODE XREF: _split_into_argv+3Cj
.text:000006AA                 mov     eax, [ebp+Str]
.text:000006AD                 movsx   ecx, byte ptr [eax]
.text:000006B0                 test    ecx, ecx
.text:000006B2                 jz      short loc_6D2
.text:000006B4                 mov     edx, [ebp+Str]
.text:000006B7                 movsx   eax, byte ptr [edx]
.text:000006BA                 push    eax             ; C
.text:000006BB                 call    _isspace
.text:000006C0                 add     esp, 4
.text:000006C3                 test    eax, eax
.text:000006C5                 jz      short loc_6D2
.text:000006C7                 mov     ecx, [ebp+Str]
.text:000006CA                 add     ecx, 1
.text:000006CD                 mov     [ebp+Str], ecx
.text:000006D0                 jmp     short loc_6AA
.text:000006D2 ; ---------------------------------------------------------------------------
.text:000006D2
.text:000006D2 loc_6D2:                                ; CODE XREF: _split_into_argv+1Ej
.text:000006D2                                         ; _split_into_argv+31j
.text:000006D2                 mov     edx, [ebp+Str]
.text:000006D5                 movsx   eax, byte ptr [edx]
.text:000006D8                 test    eax, eax
.text:000006DA                 jnz     short loc_70E
.text:000006DC                 cmp     [ebp+arg_4], 0
.text:000006E0                 jz      short loc_6EB
.text:000006E2                 mov     ecx, [ebp+arg_4]
.text:000006E5                 mov     dword ptr [ecx], 0
.text:000006EB
.text:000006EB loc_6EB:                                ; CODE XREF: _split_into_argv+4Cj
.text:000006EB                 cmp     [ebp+arg_8], 0
.text:000006EF                 jz      short loc_6FA
.text:000006F1                 mov     edx, [ebp+arg_8]
.text:000006F4                 mov     dword ptr [edx], 0
.text:000006FA
.text:000006FA loc_6FA:                                ; CODE XREF: _split_into_argv+5Bj
.text:000006FA                 cmp     [ebp+arg_C], 0
.text:000006FE                 jz      short loc_709
.text:00000700                 mov     eax, [ebp+arg_C]
.text:00000703                 mov     dword ptr [eax], 0
.text:00000709
.text:00000709 loc_709:                                ; CODE XREF: _split_into_argv+6Aj
.text:00000709                 jmp     loc_9E6
.text:0000070E ; ---------------------------------------------------------------------------
.text:0000070E
.text:0000070E loc_70E:                                ; CODE XREF: _split_into_argv+46j
.text:0000070E                 push    1
.text:00000710                 mov     ecx, [ebp+Str]
.text:00000713                 push    ecx             ; Str
.text:00000714                 call    _strlen
.text:00000719                 add     esp, 4
.text:0000071C                 add     eax, 1
.text:0000071F                 push    eax
.text:00000720                 call    _safemalloc
.text:00000725                 add     esp, 8
.text:00000728                 mov     [ebp+var_8], eax
.text:0000072B                 push    4
.text:0000072D                 mov     edx, [ebp+Str]
.text:00000730                 push    edx             ; Str
.text:00000731                 call    _strlen
.text:00000736                 add     esp, 4
.text:00000739                 push    eax
.text:0000073A                 call    _safemalloc
.text:0000073F                 add     esp, 8
.text:00000742                 mov     [ebp+var_10], eax
.text:00000745                 push    4
.text:00000747                 mov     eax, [ebp+Str]
.text:0000074A                 push    eax             ; Str
.text:0000074B                 call    _strlen
.text:00000750                 add     esp, 4
.text:00000753                 push    eax
.text:00000754                 call    _safemalloc
.text:00000759                 add     esp, 8
.text:0000075C                 mov     [ebp+var_14], eax
.text:0000075F                 mov     ecx, [ebp+Str]
.text:00000762                 mov     [ebp+var_4], ecx
.text:00000765                 mov     edx, [ebp+var_8]
.text:00000768                 mov     [ebp+var_C], edx
.text:0000076B                 mov     [ebp+var_18], 0
.text:00000772
.text:00000772 loc_772:                                ; CODE XREF: _split_into_argv+2DDj
.text:00000772                 mov     eax, [ebp+var_4]
.text:00000775                 movsx   ecx, byte ptr [eax]
.text:00000778                 test    ecx, ecx
.text:0000077A                 jz      loc_976
.text:00000780
.text:00000780 loc_780:                                ; CODE XREF: _split_into_argv+112j
.text:00000780                 mov     edx, [ebp+var_4]
.text:00000783                 movsx   eax, byte ptr [edx]
.text:00000786                 test    eax, eax
.text:00000788                 jz      short loc_7A8
.text:0000078A                 mov     ecx, [ebp+var_4]
.text:0000078D                 movsx   edx, byte ptr [ecx]
.text:00000790                 push    edx             ; C
.text:00000791                 call    _isspace
.text:00000796                 add     esp, 4
.text:00000799                 test    eax, eax
.text:0000079B                 jz      short loc_7A8
.text:0000079D                 mov     eax, [ebp+var_4]
.text:000007A0                 add     eax, 1
.text:000007A3                 mov     [ebp+var_4], eax
.text:000007A6                 jmp     short loc_780
.text:000007A8 ; ---------------------------------------------------------------------------
.text:000007A8
.text:000007A8 loc_7A8:                                ; CODE XREF: _split_into_argv+F4j
.text:000007A8                                         ; _split_into_argv+107j
.text:000007A8                 mov     ecx, [ebp+var_4]
.text:000007AB                 movsx   edx, byte ptr [ecx]
.text:000007AE                 test    edx, edx
.text:000007B0                 jnz     short loc_7B7
.text:000007B2                 jmp     loc_976
.text:000007B7 ; ---------------------------------------------------------------------------
.text:000007B7
.text:000007B7 loc_7B7:                                ; CODE XREF: _split_into_argv+11Cj
.text:000007B7                 mov     eax, [ebp+var_18]
.text:000007BA                 mov     ecx, [ebp+var_10]
.text:000007BD                 mov     edx, [ebp+var_C]
.text:000007C0                 mov     [ecx+eax*4], edx
.text:000007C3                 mov     eax, [ebp+var_18]
.text:000007C6                 mov     ecx, [ebp+var_14]
.text:000007C9                 mov     edx, [ebp+var_4]
.text:000007CC                 mov     [ecx+eax*4], edx
.text:000007CF                 mov     eax, [ebp+var_18]
.text:000007D2                 add     eax, 1
.text:000007D5                 mov     [ebp+var_18], eax
.text:000007D8                 mov     [ebp+var_1C], 0
.text:000007DF
.text:000007DF loc_7DF:                                ; CODE XREF: _split_into_argv:loc_95Dj
.text:000007DF                 mov     ecx, [ebp+var_4]
.text:000007E2                 movsx   edx, byte ptr [ecx]
.text:000007E5                 test    edx, edx
.text:000007E7                 jz      loc_962
.text:000007ED                 cmp     [ebp+var_1C], 0
.text:000007F1                 jnz     short loc_80B
.text:000007F3                 mov     eax, [ebp+var_4]
.text:000007F6                 movsx   ecx, byte ptr [eax]
.text:000007F9                 push    ecx             ; C
.text:000007FA                 call    _isspace
.text:000007FF                 add     esp, 4
.text:00000802                 test    eax, eax
.text:00000804                 jz      short loc_80B
.text:00000806                 jmp     loc_962
.text:0000080B ; ---------------------------------------------------------------------------
.text:0000080B
.text:0000080B loc_80B:                                ; CODE XREF: _split_into_argv+15Dj
.text:0000080B                                         ; _split_into_argv+170j
.text:0000080B                 mov     edx, [ebp+var_4]
.text:0000080E                 movsx   eax, byte ptr [edx]
.text:00000811                 cmp     eax, 22h ; '"'
.text:00000814                 jz      short loc_825
.text:00000816                 mov     ecx, [ebp+var_4]
.text:00000819                 movsx   edx, byte ptr [ecx]
.text:0000081C                 cmp     edx, 5Ch ; '\'
.text:0000081F                 jnz     loc_941
.text:00000825
.text:00000825 loc_825:                                ; CODE XREF: _split_into_argv+180j
.text:00000825                 mov     [ebp+var_24], 0
.text:0000082C                 mov     [ebp+var_28], 0
.text:00000833
.text:00000833 loc_833:                                ; CODE XREF: _split_into_argv+1BCj
.text:00000833                 mov     eax, [ebp+var_4]
.text:00000836                 movsx   ecx, byte ptr [eax]
.text:00000839                 cmp     ecx, 5Ch ; '\'
.text:0000083C                 jnz     short loc_852
.text:0000083E                 mov     edx, [ebp+var_24]
.text:00000841                 add     edx, 1
.text:00000844                 mov     [ebp+var_24], edx
.text:00000847                 mov     eax, [ebp+var_4]
.text:0000084A                 add     eax, 1
.text:0000084D                 mov     [ebp+var_4], eax
.text:00000850                 jmp     short loc_833
.text:00000852 ; ---------------------------------------------------------------------------
.text:00000852
.text:00000852 loc_852:                                ; CODE XREF: _split_into_argv+1A8j
.text:00000852                                         ; _split_into_argv+1DBj
.text:00000852                 mov     ecx, [ebp+var_4]
.text:00000855                 movsx   edx, byte ptr [ecx]
.text:00000858                 cmp     edx, 22h ; '"'
.text:0000085B                 jnz     short loc_871
.text:0000085D                 mov     eax, [ebp+var_28]
.text:00000860                 add     eax, 1
.text:00000863                 mov     [ebp+var_28], eax
.text:00000866                 mov     ecx, [ebp+var_4]
.text:00000869                 add     ecx, 1
.text:0000086C                 mov     [ebp+var_4], ecx
.text:0000086F                 jmp     short loc_852
.text:00000871 ; ---------------------------------------------------------------------------
.text:00000871
.text:00000871 loc_871:                                ; CODE XREF: _split_into_argv+1C7j
.text:00000871                 cmp     [ebp+var_28], 0
.text:00000875                 jnz     short loc_8A2
.text:00000877
.text:00000877 loc_877:                                ; CODE XREF: _split_into_argv+207j
.text:00000877                 mov     edx, [ebp+var_24]
.text:0000087A                 mov     [ebp+var_2C], edx
.text:0000087D                 mov     eax, [ebp+var_24]
.text:00000880                 sub     eax, 1
.text:00000883                 mov     [ebp+var_24], eax
.text:00000886                 cmp     [ebp+var_2C], 0
.text:0000088A                 jz      short loc_89D
.text:0000088C                 mov     ecx, [ebp+var_C]
.text:0000088F                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00000892                 mov     edx, [ebp+var_C]
.text:00000895                 add     edx, 1
.text:00000898                 mov     [ebp+var_C], edx
.text:0000089B                 jmp     short loc_877
.text:0000089D ; ---------------------------------------------------------------------------
.text:0000089D
.text:0000089D loc_89D:                                ; CODE XREF: _split_into_argv+1F6j
.text:0000089D                 jmp     loc_93F
.text:000008A2 ; ---------------------------------------------------------------------------
.text:000008A2
.text:000008A2 loc_8A2:                                ; CODE XREF: _split_into_argv+1E1j
.text:000008A2                                         ; _split_into_argv+22Cj
.text:000008A2                 cmp     [ebp+var_24], 2
.text:000008A6                 jl      short loc_8C2
.text:000008A8                 mov     eax, [ebp+var_24]
.text:000008AB                 sub     eax, 2
.text:000008AE                 mov     [ebp+var_24], eax
.text:000008B1                 mov     ecx, [ebp+var_C]
.text:000008B4                 mov     byte ptr [ecx], 5Ch ; '\'
.text:000008B7                 mov     edx, [ebp+var_C]
.text:000008BA                 add     edx, 1
.text:000008BD                 mov     [ebp+var_C], edx
.text:000008C0                 jmp     short loc_8A2
.text:000008C2 ; ---------------------------------------------------------------------------
.text:000008C2
.text:000008C2 loc_8C2:                                ; CODE XREF: _split_into_argv+212j
.text:000008C2                 cmp     [ebp+var_24], 0
.text:000008C6                 jz      short loc_8E0
.text:000008C8                 mov     eax, [ebp+var_28]
.text:000008CB                 sub     eax, 1
.text:000008CE                 mov     [ebp+var_28], eax
.text:000008D1                 mov     ecx, [ebp+var_C]
.text:000008D4                 mov     byte ptr [ecx], 22h ; '"'
.text:000008D7                 mov     edx, [ebp+var_C]
.text:000008DA                 add     edx, 1
.text:000008DD                 mov     [ebp+var_C], edx
.text:000008E0
.text:000008E0 loc_8E0:                                ; CODE XREF: _split_into_argv+232j
.text:000008E0                 cmp     [ebp+var_28], 0
.text:000008E4                 jle     short loc_93F
.text:000008E6                 cmp     [ebp+var_1C], 0
.text:000008EA                 jnz     short loc_8FC
.text:000008EC                 mov     eax, [ebp+var_28]
.text:000008EF                 sub     eax, 1
.text:000008F2                 mov     [ebp+var_28], eax
.text:000008F5                 mov     [ebp+var_1C], 1
.text:000008FC
.text:000008FC loc_8FC:                                ; CODE XREF: _split_into_argv+256j
.text:000008FC                 mov     [ebp+var_20], 3
.text:00000903                 jmp     short loc_90E
.text:00000905 ; ---------------------------------------------------------------------------
.text:00000905
.text:00000905 loc_905:                                ; CODE XREF: _split_into_argv+294j
.text:00000905                 mov     ecx, [ebp+var_20]
.text:00000908                 add     ecx, 3
.text:0000090B                 mov     [ebp+var_20], ecx
.text:0000090E
.text:0000090E loc_90E:                                ; CODE XREF: _split_into_argv+26Fj
.text:0000090E                 mov     edx, [ebp+var_28]
.text:00000911                 add     edx, 1
.text:00000914                 cmp     [ebp+var_20], edx
.text:00000917                 jg      short loc_92A
.text:00000919                 mov     eax, [ebp+var_C]
.text:0000091C                 mov     byte ptr [eax], 22h ; '"'
.text:0000091F                 mov     ecx, [ebp+var_C]
.text:00000922                 add     ecx, 1
.text:00000925                 mov     [ebp+var_C], ecx
.text:00000928                 jmp     short loc_905
.text:0000092A ; ---------------------------------------------------------------------------
.text:0000092A
.text:0000092A loc_92A:                                ; CODE XREF: _split_into_argv+283j
.text:0000092A                 mov     eax, [ebp+var_28]
.text:0000092D                 cdq
.text:0000092E                 mov     ecx, 3
.text:00000933                 idiv    ecx
.text:00000935                 neg     edx
.text:00000937                 sbb     edx, edx
.text:00000939                 add     edx, 1
.text:0000093C                 mov     [ebp+var_1C], edx
.text:0000093F
.text:0000093F loc_93F:                                ; CODE XREF: _split_into_argv:loc_89Dj
.text:0000093F                                         ; _split_into_argv+250j
.text:0000093F                 jmp     short loc_95D
.text:00000941 ; ---------------------------------------------------------------------------
.text:00000941
.text:00000941 loc_941:                                ; CODE XREF: _split_into_argv+18Bj
.text:00000941                 mov     edx, [ebp+var_C]
.text:00000944                 mov     eax, [ebp+var_4]
.text:00000947                 mov     cl, [eax]
.text:00000949                 mov     [edx], cl
.text:0000094B                 mov     edx, [ebp+var_C]
.text:0000094E                 add     edx, 1
.text:00000951                 mov     [ebp+var_C], edx
.text:00000954                 mov     eax, [ebp+var_4]
.text:00000957                 add     eax, 1
.text:0000095A                 mov     [ebp+var_4], eax
.text:0000095D
.text:0000095D loc_95D:                                ; CODE XREF: _split_into_argv:loc_93Fj
.text:0000095D                 jmp     loc_7DF
.text:00000962 ; ---------------------------------------------------------------------------
.text:00000962
.text:00000962 loc_962:                                ; CODE XREF: _split_into_argv+153j
.text:00000962                                         ; _split_into_argv+172j
.text:00000962                 mov     ecx, [ebp+var_C]
.text:00000965                 mov     byte ptr [ecx], 0
.text:00000968                 mov     edx, [ebp+var_C]
.text:0000096B                 add     edx, 1
.text:0000096E                 mov     [ebp+var_C], edx
.text:00000971                 jmp     loc_772
.text:00000976 ; ---------------------------------------------------------------------------
.text:00000976
.text:00000976 loc_976:                                ; CODE XREF: _split_into_argv+E6j
.text:00000976                                         ; _split_into_argv+11Ej
.text:00000976                 push    4
.text:00000978                 mov     eax, [ebp+var_18]
.text:0000097B                 push    eax
.text:0000097C                 mov     ecx, [ebp+var_10]
.text:0000097F                 push    ecx
.text:00000980                 call    _saferealloc
.text:00000985                 add     esp, 0Ch
.text:00000988                 mov     [ebp+var_10], eax
.text:0000098B                 push    4
.text:0000098D                 mov     edx, [ebp+var_18]
.text:00000990                 push    edx
.text:00000991                 mov     eax, [ebp+var_14]
.text:00000994                 push    eax
.text:00000995                 call    _saferealloc
.text:0000099A                 add     esp, 0Ch
.text:0000099D                 mov     [ebp+var_14], eax
.text:000009A0                 cmp     [ebp+arg_4], 0
.text:000009A4                 jz      short loc_9AE
.text:000009A6                 mov     ecx, [ebp+arg_4]
.text:000009A9                 mov     edx, [ebp+var_18]
.text:000009AC                 mov     [ecx], edx
.text:000009AE
.text:000009AE loc_9AE:                                ; CODE XREF: _split_into_argv+310j
.text:000009AE                 cmp     [ebp+arg_8], 0
.text:000009B2                 jz      short loc_9BE
.text:000009B4                 mov     eax, [ebp+arg_8]
.text:000009B7                 mov     ecx, [ebp+var_10]
.text:000009BA                 mov     [eax], ecx
.text:000009BC                 jmp     short loc_9CA
.text:000009BE ; ---------------------------------------------------------------------------
.text:000009BE
.text:000009BE loc_9BE:                                ; CODE XREF: _split_into_argv+31Ej
.text:000009BE                 mov     edx, [ebp+var_10]
.text:000009C1                 push    edx
.text:000009C2                 call    _safefree
.text:000009C7                 add     esp, 4
.text:000009CA
.text:000009CA loc_9CA:                                ; CODE XREF: _split_into_argv+328j
.text:000009CA                 cmp     [ebp+arg_C], 0
.text:000009CE                 jz      short loc_9DA
.text:000009D0                 mov     eax, [ebp+arg_C]
.text:000009D3                 mov     ecx, [ebp+var_14]
.text:000009D6                 mov     [eax], ecx
.text:000009D8                 jmp     short loc_9E6
.text:000009DA ; ---------------------------------------------------------------------------
.text:000009DA
.text:000009DA loc_9DA:                                ; CODE XREF: _split_into_argv+33Aj
.text:000009DA                 mov     edx, [ebp+var_14]
.text:000009DD                 push    edx
.text:000009DE                 call    _safefree
.text:000009E3                 add     esp, 4
.text:000009E6
.text:000009E6 loc_9E6:                                ; CODE XREF: _split_into_argv:loc_709j
.text:000009E6                                         ; _split_into_argv+344j
.text:000009E6                 pop     edi
.text:000009E7                 add     esp, 2Ch
.text:000009EA                 cmp     ebp, esp
.text:000009EC                 call    __RTC_CheckEsp
.text:000009F1                 mov     esp, ebp
.text:000009F3                 pop     ebp
.text:000009F4                 retn
.text:000009F4 _split_into_argv endp
.text:000009F4
.text:000009F4 ; ---------------------------------------------------------------------------
.text:000009F5                 align 4
.text:000009F5 _text           ends
.text:000009F5
.rtc$TMZ:000009F8 ; ===========================================================================
.rtc$TMZ:000009F8
.rtc$TMZ:000009F8 ; Segment type: Pure data
.rtc$TMZ:000009F8 ; Segment permissions: Read
.rtc$TMZ:000009F8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000009F8                 assume cs:_rtc$TMZ
.rtc$TMZ:000009F8                 ;org 9F8h
.rtc$TMZ:000009F8 ; COMDAT (pick any)
.rtc$TMZ:000009F8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000009F8 _rtc$TMZ        ends
.rtc$TMZ:000009F8
.rtc$IMZ:000009FC ; ===========================================================================
.rtc$IMZ:000009FC
.rtc$IMZ:000009FC ; Segment type: Pure data
.rtc$IMZ:000009FC ; Segment permissions: Read
.rtc$IMZ:000009FC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000009FC                 assume cs:_rtc$IMZ
.rtc$IMZ:000009FC                 ;org 9FCh
.rtc$IMZ:000009FC ; COMDAT (pick any)
.rtc$IMZ:000009FC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000009FC _rtc$IMZ        ends
.rtc$IMZ:000009FC
UNDEF:00000A00 ; ===========================================================================
UNDEF:00000A00
UNDEF:00000A00 ; Segment type: Externs
UNDEF:00000A00 ; UNDEF
UNDEF:00000A00 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
UNDEF:00000A00                 extrn __imp__SetCurrentDirectoryA@4:near
UNDEF:00000A00                                         ; CODE XREF: _request_file+138p
UNDEF:00000A00                                         ; DATA XREF: _request_file+138r
UNDEF:00000A04 ; BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA)
UNDEF:00000A04                 extrn __imp__GetOpenFileNameA@4:near
UNDEF:00000A04                                         ; CODE XREF: _request_file+CBp
UNDEF:00000A04                                         ; DATA XREF: _request_file+CBr
UNDEF:00000A08 ; BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA)
UNDEF:00000A08                 extrn __imp__GetSaveFileNameA@4:near
UNDEF:00000A08                                         ; CODE XREF: _request_file+B0p
UNDEF:00000A08                                         ; DATA XREF: _request_file+B0r
UNDEF:00000A0C ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
UNDEF:00000A0C                 extrn __imp__GetCurrentDirectoryA@8:near
UNDEF:00000A0C                                         ; CODE XREF: _request_file+3Bp
UNDEF:00000A0C                                         ; _request_file+FBp
UNDEF:00000A0C                                         ; DATA XREF: ...
UNDEF:00000A10                 extrn ___security_cookie:near ; DATA XREF: _request_file+1Dr
UNDEF:00000A14 ; __fastcall __security_check_cookie(x)
UNDEF:00000A14                 extrn @__security_check_cookie@4:near
UNDEF:00000A14                                         ; CODE XREF: _request_file+163p
UNDEF:00000A18 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000A18                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000A18                                         ; CODE XREF: _request_file+155p
UNDEF:00000A18                                         ; _message_box+8Cp
UNDEF:00000A1C                 extrn __RTC_CheckEsp:near ; CODE XREF: _request_file+43p
UNDEF:00000A1C                                         ; _request_file+B8p ...
UNDEF:00000A20                 extrn __RTC_Shutdown:near
UNDEF:00000A20                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A24                 extrn __RTC_InitBase:near
UNDEF:00000A24                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A28                 extrn _safemalloc:near  ; CODE XREF: _filereq_new+12p
UNDEF:00000A28                                         ; _split_into_argv+8Cp ...
UNDEF:00000A2C                 extrn _safefree:near    ; CODE XREF: _filereq_free+7p
UNDEF:00000A2C                                         ; _split_into_argv+32Ep ...
UNDEF:00000A30 ; int __stdcall MessageBoxIndirectA(const MSGBOXPARAMSA *lpmbp)
UNDEF:00000A30                 extrn __imp__MessageBoxIndirectA@4:near
UNDEF:00000A30                                         ; CODE XREF: _message_box+75p
UNDEF:00000A30                                         ; DATA XREF: _message_box+75r
UNDEF:00000A34                 extrn _has_help:near    ; CODE XREF: _message_box+5Bp
UNDEF:00000A38                 extrn _hwnd:near        ; DATA XREF: _message_box+26r
UNDEF:00000A38                                         ; message_box_help_callback(x)+80r
UNDEF:00000A3C                 extrn _hinst:near       ; DATA XREF: _message_box+1Er
UNDEF:00000A40                 extrn _launch_help:near ; CODE XREF: message_box_help_callback(x)+87p
UNDEF:00000A44 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
UNDEF:00000A44                 extrn _memchr:near      ; CODE XREF: _GetDlgItemText_alloc+7Ap
UNDEF:00000A48 ; UINT __stdcall GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax)
UNDEF:00000A48                 extrn __imp__GetDlgItemTextA@16:near
UNDEF:00000A48                                         ; CODE XREF: _GetDlgItemText_alloc+60p
UNDEF:00000A48                                         ; DATA XREF: _GetDlgItemText_alloc+60r
UNDEF:00000A4C                 extrn _saferealloc:near ; CODE XREF: _GetDlgItemText_alloc+43p
UNDEF:00000A4C                                         ; _split_into_argv+2ECp ...
UNDEF:00000A50 ; size_t __cdecl strlen(const char *Str)
UNDEF:00000A50                 extrn _strlen:near      ; CODE XREF: _split_into_argv+80p
UNDEF:00000A50                                         ; _split_into_argv+9Dp ...
UNDEF:00000A54 ; int __cdecl isspace(int C)
UNDEF:00000A54                 extrn _isspace:near     ; CODE XREF: _split_into_argv+27p
UNDEF:00000A54                                         ; _split_into_argv+FDp ...
UNDEF:00000A54
UNDEF:00000A54
UNDEF:00000A54                 end