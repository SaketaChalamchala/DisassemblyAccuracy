.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 22E441098115C50FF17A163B478237DA
.data:00000000 ; Input CRC32 : 6A80615B
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshgssc.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85756        db 'host@',0            ; DATA XREF: _ssh_gssapi_import_name+26o
.data:00000006                 align 4
.data:00000006 _data           ends
.data:00000006
.text:00000008 ; ===========================================================================
.text:00000008
.text:00000008 ; Segment type: Pure code
.text:00000008 ; Segment permissions: Read/Execute
.text:00000008 _text           segment para public 'CODE' use32
.text:00000008                 assume cs:_text
.text:00000008                 ;org 8
.text:00000008                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000008
.text:00000008 ; =============== S U B R O U T I N E =======================================
.text:00000008
.text:00000008 ; Attributes: bp-based frame
.text:00000008
.text:00000008                 public _ssh_gssapi_bind_fns
.text:00000008 _ssh_gssapi_bind_fns proc near
.text:00000008
.text:00000008 arg_0           = dword ptr  8
.text:00000008
.text:00000008                 push    ebp
.text:00000009                 mov     ebp, esp
.text:0000000B                 mov     eax, [ebp+arg_0]
.text:0000000E                 mov     dword ptr [eax+8], offset _ssh_gssapi_indicate_mech
.text:00000015                 mov     ecx, [ebp+arg_0]
.text:00000018                 mov     dword ptr [ecx+0Ch], offset _ssh_gssapi_import_name
.text:0000001F                 mov     edx, [ebp+arg_0]
.text:00000022                 mov     dword ptr [edx+10h], offset _ssh_gssapi_release_name
.text:00000029                 mov     eax, [ebp+arg_0]
.text:0000002C                 mov     dword ptr [eax+14h], offset _ssh_gssapi_init_sec_context
.text:00000033                 mov     ecx, [ebp+arg_0]
.text:00000036                 mov     dword ptr [ecx+18h], offset _ssh_gssapi_free_tok
.text:0000003D                 mov     edx, [ebp+arg_0]
.text:00000040                 mov     dword ptr [edx+1Ch], offset _ssh_gssapi_acquire_cred
.text:00000047                 mov     eax, [ebp+arg_0]
.text:0000004A                 mov     dword ptr [eax+20h], offset _ssh_gssapi_release_cred
.text:00000051                 mov     ecx, [ebp+arg_0]
.text:00000054                 mov     dword ptr [ecx+24h], offset _ssh_gssapi_get_mic
.text:0000005B                 mov     edx, [ebp+arg_0]
.text:0000005E                 mov     dword ptr [edx+28h], offset _ssh_gssapi_free_mic
.text:00000065                 mov     eax, [ebp+arg_0]
.text:00000068                 mov     dword ptr [eax+2Ch], offset _ssh_gssapi_display_status
.text:0000006F                 pop     ebp
.text:00000070                 retn
.text:00000070 _ssh_gssapi_bind_fns endp
.text:00000070
.text:00000070 ; ---------------------------------------------------------------------------
.text:00000071                 align 8
.text:00000078
.text:00000078 ; =============== S U B R O U T I N E =======================================
.text:00000078
.text:00000078 ; Attributes: bp-based frame
.text:00000078
.text:00000078 _ssh_gssapi_indicate_mech proc near     ; DATA XREF: _ssh_gssapi_bind_fns+6o
.text:00000078
.text:00000078 arg_4           = dword ptr  0Ch
.text:00000078
.text:00000078                 push    ebp
.text:00000079                 mov     ebp, esp
.text:0000007B                 mov     eax, [ebp+arg_4]
.text:0000007E                 mov     ecx, dword ptr ds:_GSS_MECH_KRB5
.text:00000084                 mov     edx, [ecx]
.text:00000086                 mov     [eax], edx
.text:00000088                 mov     eax, [ebp+arg_4]
.text:0000008B                 mov     ecx, dword ptr ds:_GSS_MECH_KRB5
.text:00000091                 mov     edx, [ecx+4]
.text:00000094                 mov     [eax+4], edx
.text:00000097                 xor     eax, eax
.text:00000099                 pop     ebp
.text:0000009A                 retn
.text:0000009A _ssh_gssapi_indicate_mech endp
.text:0000009A
.text:0000009A ; ---------------------------------------------------------------------------
.text:0000009B                 db 0Dh dup(0CCh)
.text:000000A8
.text:000000A8 ; =============== S U B R O U T I N E =======================================
.text:000000A8
.text:000000A8 ; Attributes: bp-based frame
.text:000000A8
.text:000000A8 _ssh_gssapi_import_name proc near       ; DATA XREF: _ssh_gssapi_bind_fns+10o
.text:000000A8
.text:000000A8 var_28          = dword ptr -28h
.text:000000A8 var_20          = dword ptr -20h
.text:000000A8 var_1C          = dword ptr -1Ch
.text:000000A8 var_14          = dword ptr -14h
.text:000000A8 var_C           = byte ptr -0Ch
.text:000000A8 var_4           = dword ptr -4
.text:000000A8 arg_0           = dword ptr  8
.text:000000A8 arg_4           = dword ptr  0Ch
.text:000000A8 arg_8           = dword ptr  10h
.text:000000A8
.text:000000A8                 push    ebp
.text:000000A9                 mov     ebp, esp
.text:000000AB                 sub     esp, 28h
.text:000000AE                 push    esi
.text:000000AF                 push    edi
.text:000000B0                 lea     edi, [ebp+var_28]
.text:000000B3                 mov     ecx, 0Ah
.text:000000B8                 mov     eax, 0CCCCCCCCh
.text:000000BD                 rep stosd
.text:000000BF                 mov     eax, [ebp+arg_0]
.text:000000C2                 add     eax, 30h ; '0'
.text:000000C5                 mov     [ebp+var_4], eax
.text:000000C8                 push    0
.text:000000CA                 mov     ecx, [ebp+arg_4]
.text:000000CD                 push    ecx
.text:000000CE                 push    offset $SG85756 ; "host@"
.text:000000D3                 call    _dupcat
.text:000000D8                 add     esp, 0Ch
.text:000000DB                 mov     [ebp+var_28], eax
.text:000000DE                 mov     edx, [ebp+var_28]
.text:000000E1                 mov     [ebp+var_1C], edx
.text:000000E4                 mov     eax, [ebp+var_28]
.text:000000E7                 push    eax             ; char *
.text:000000E8                 call    _strlen
.text:000000ED                 add     esp, 4
.text:000000F0                 mov     [ebp+var_20], eax
.text:000000F3                 mov     esi, esp
.text:000000F5                 mov     ecx, [ebp+arg_8]
.text:000000F8                 push    ecx
.text:000000F9                 mov     edx, dword ptr ds:_GSS_C_NT_HOSTBASED_SERVICE
.text:000000FF                 push    edx
.text:00000100                 lea     eax, [ebp+var_20]
.text:00000103                 push    eax
.text:00000104                 lea     ecx, [ebp+var_C]
.text:00000107                 push    ecx
.text:00000108                 mov     edx, [ebp+var_4]
.text:0000010B                 mov     eax, [edx+0Ch]
.text:0000010E                 call    eax
.text:00000110                 cmp     esi, esp
.text:00000112                 call    __RTC_CheckEsp
.text:00000117                 mov     [ebp+var_14], eax
.text:0000011A                 mov     ecx, [ebp+var_28]
.text:0000011D                 push    ecx
.text:0000011E                 call    _safefree
.text:00000123                 add     esp, 4
.text:00000126                 cmp     [ebp+var_14], 0
.text:0000012A                 jnz     short loc_130
.text:0000012C                 xor     eax, eax
.text:0000012E                 jmp     short loc_135
.text:00000130 ; ---------------------------------------------------------------------------
.text:00000130
.text:00000130 loc_130:                                ; CODE XREF: _ssh_gssapi_import_name+82j
.text:00000130                 mov     eax, 4
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: _ssh_gssapi_import_name+86j
.text:00000135                 push    edx
.text:00000136                 mov     ecx, ebp
.text:00000138                 push    eax
.text:00000139                 lea     edx, $LN7
.text:0000013F                 call    @_RTC_CheckStackVars@8
.text:00000144                 pop     eax
.text:00000145                 pop     edx
.text:00000146                 pop     edi
.text:00000147                 pop     esi
.text:00000148                 add     esp, 28h
.text:0000014B                 cmp     ebp, esp
.text:0000014D                 call    __RTC_CheckEsp
.text:00000152                 mov     esp, ebp
.text:00000154                 pop     ebp
.text:00000155                 retn
.text:00000155 _ssh_gssapi_import_name endp
.text:00000155
.text:00000155 ; ---------------------------------------------------------------------------
.text:00000156                 align 4
.text:00000158 $LN7            dd 2                    ; DATA XREF: _ssh_gssapi_import_name+91o
.text:0000015C                 dd offset $LN6
.text:00000160 $LN6            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000015Co
.text:00000168                 dd offset $LN4          ; "min_stat"
.text:0000016C                 dd 0FFFFFFE0h, 8
.text:00000174                 dd offset $LN5          ; "host_buf"
.text:00000178 $LN5            db 'host_buf',0         ; DATA XREF: .text:00000174o
.text:00000181 $LN4            db 'min_stat',0         ; DATA XREF: .text:00000168o
.text:0000018A                 db 0Eh dup(0CCh)
.text:00000198
.text:00000198 ; =============== S U B R O U T I N E =======================================
.text:00000198
.text:00000198 ; Attributes: bp-based frame
.text:00000198
.text:00000198 _ssh_gssapi_acquire_cred proc near      ; DATA XREF: _ssh_gssapi_bind_fns+38o
.text:00000198
.text:00000198 var_4           = dword ptr -4
.text:00000198 arg_4           = dword ptr  0Ch
.text:00000198
.text:00000198                 push    ebp
.text:00000199                 mov     ebp, esp
.text:0000019B                 push    ecx
.text:0000019C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001A3                 push    0Ch
.text:000001A5                 push    1
.text:000001A7                 call    _safemalloc
.text:000001AC                 add     esp, 8
.text:000001AF                 mov     [ebp+var_4], eax
.text:000001B2                 mov     eax, [ebp+var_4]
.text:000001B5                 mov     dword ptr [eax+4], 0
.text:000001BC                 mov     ecx, [ebp+var_4]
.text:000001BF                 mov     dword ptr [ecx], 0
.text:000001C5                 mov     edx, [ebp+var_4]
.text:000001C8                 mov     dword ptr [edx+8], 0
.text:000001CF                 mov     eax, [ebp+arg_4]
.text:000001D2                 mov     ecx, [ebp+var_4]
.text:000001D5                 mov     [eax], ecx
.text:000001D7                 xor     eax, eax
.text:000001D9                 add     esp, 4
.text:000001DC                 cmp     ebp, esp
.text:000001DE                 call    __RTC_CheckEsp
.text:000001E3                 mov     esp, ebp
.text:000001E5                 pop     ebp
.text:000001E6                 retn
.text:000001E6 _ssh_gssapi_acquire_cred endp
.text:000001E6
.text:000001E6 ; ---------------------------------------------------------------------------
.text:000001E7                 align 4
.text:000001E8
.text:000001E8 ; =============== S U B R O U T I N E =======================================
.text:000001E8
.text:000001E8 ; Attributes: bp-based frame
.text:000001E8
.text:000001E8 _ssh_gssapi_init_sec_context proc near  ; DATA XREF: _ssh_gssapi_bind_fns+24o
.text:000001E8
.text:000001E8 var_14          = dword ptr -14h
.text:000001E8 var_10          = dword ptr -10h
.text:000001E8 var_C           = dword ptr -0Ch
.text:000001E8 var_8           = dword ptr -8
.text:000001E8 var_4           = dword ptr -4
.text:000001E8 arg_0           = dword ptr  8
.text:000001E8 arg_4           = dword ptr  0Ch
.text:000001E8 arg_8           = dword ptr  10h
.text:000001E8 arg_C           = dword ptr  14h
.text:000001E8 arg_10          = dword ptr  18h
.text:000001E8 arg_14          = dword ptr  1Ch
.text:000001E8
.text:000001E8                 push    ebp
.text:000001E9                 mov     ebp, esp
.text:000001EB                 sub     esp, 14h
.text:000001EE                 push    esi
.text:000001EF                 mov     eax, 0CCCCCCCCh
.text:000001F4                 mov     [ebp+var_14], eax
.text:000001F7                 mov     [ebp+var_10], eax
.text:000001FA                 mov     [ebp+var_C], eax
.text:000001FD                 mov     [ebp+var_8], eax
.text:00000200                 mov     [ebp+var_4], eax
.text:00000203                 mov     eax, [ebp+arg_0]
.text:00000206                 add     eax, 30h ; '0'
.text:00000209                 mov     [ebp+var_4], eax
.text:0000020C                 mov     ecx, [ebp+arg_4]
.text:0000020F                 mov     edx, [ecx]
.text:00000211                 mov     [ebp+var_8], edx
.text:00000214                 cmp     [ebp+arg_C], 0
.text:00000218                 jz      short loc_221
.text:0000021A                 mov     [ebp+arg_C], 1
.text:00000221
.text:00000221 loc_221:                                ; CODE XREF: _ssh_gssapi_init_sec_context+30j
.text:00000221                 mov     esi, esp
.text:00000223                 push    0
.text:00000225                 lea     eax, [ebp+var_10]
.text:00000228                 push    eax
.text:00000229                 mov     ecx, [ebp+arg_14]
.text:0000022C                 push    ecx
.text:0000022D                 push    0
.text:0000022F                 mov     edx, [ebp+arg_10]
.text:00000232                 push    edx
.text:00000233                 push    0
.text:00000235                 push    0
.text:00000237                 mov     eax, [ebp+arg_C]
.text:0000023A                 or      eax, 22h
.text:0000023D                 push    eax
.text:0000023E                 mov     ecx, dword ptr ds:_GSS_MECH_KRB5
.text:00000244                 push    ecx
.text:00000245                 mov     edx, [ebp+arg_8]
.text:00000248                 push    edx
.text:00000249                 mov     eax, [ebp+var_8]
.text:0000024C                 add     eax, 8
.text:0000024F                 push    eax
.text:00000250                 push    0
.text:00000252                 mov     ecx, [ebp+var_8]
.text:00000255                 add     ecx, 4
.text:00000258                 push    ecx
.text:00000259                 mov     edx, [ebp+var_4]
.text:0000025C                 mov     eax, [edx+10h]
.text:0000025F                 call    eax
.text:00000261                 cmp     esi, esp
.text:00000263                 call    __RTC_CheckEsp
.text:00000268                 mov     ecx, [ebp+var_8]
.text:0000026B                 mov     [ecx], eax
.text:0000026D                 mov     edx, [ebp+var_8]
.text:00000270                 cmp     dword ptr [edx], 0
.text:00000273                 jnz     short loc_279
.text:00000275                 xor     eax, eax
.text:00000277                 jmp     short loc_28D
.text:00000279 ; ---------------------------------------------------------------------------
.text:00000279
.text:00000279 loc_279:                                ; CODE XREF: _ssh_gssapi_init_sec_context+8Bj
.text:00000279                 mov     eax, [ebp+var_8]
.text:0000027C                 cmp     dword ptr [eax], 1
.text:0000027F                 jnz     short loc_288
.text:00000281                 mov     eax, 1
.text:00000286                 jmp     short loc_28D
.text:00000288 ; ---------------------------------------------------------------------------
.text:00000288
.text:00000288 loc_288:                                ; CODE XREF: _ssh_gssapi_init_sec_context+97j
.text:00000288                 mov     eax, 4
.text:0000028D
.text:0000028D loc_28D:                                ; CODE XREF: _ssh_gssapi_init_sec_context+8Fj
.text:0000028D                                         ; _ssh_gssapi_init_sec_context+9Ej
.text:0000028D                 push    edx
.text:0000028E                 mov     ecx, ebp
.text:00000290                 push    eax
.text:00000291                 lea     edx, $LN8
.text:00000297                 call    @_RTC_CheckStackVars@8
.text:0000029C                 pop     eax
.text:0000029D                 pop     edx
.text:0000029E                 pop     esi
.text:0000029F                 add     esp, 14h
.text:000002A2                 cmp     ebp, esp
.text:000002A4                 call    __RTC_CheckEsp
.text:000002A9                 mov     esp, ebp
.text:000002AB                 pop     ebp
.text:000002AC                 retn
.text:000002AC _ssh_gssapi_init_sec_context endp
.text:000002AC
.text:000002AC ; ---------------------------------------------------------------------------
.text:000002AD                 align 10h
.text:000002B0 $LN8            dd 1                    ; DATA XREF: _ssh_gssapi_init_sec_context+A9o
.text:000002B4                 dd offset $LN7_0
.text:000002B8 $LN7_0          dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000002B4o
.text:000002C0                 dd offset $LN6_0        ; "ret_flags"
.text:000002C4 $LN6_0          db 'ret_flags',0        ; DATA XREF: .text:000002C0o
.text:000002CE                 db 0Ah dup(0CCh)
.text:000002D8
.text:000002D8 ; =============== S U B R O U T I N E =======================================
.text:000002D8
.text:000002D8 ; Attributes: bp-based frame
.text:000002D8
.text:000002D8 _ssh_gssapi_display_status proc near    ; DATA XREF: _ssh_gssapi_bind_fns+60o
.text:000002D8
.text:000002D8 var_44          = byte ptr -44h
.text:000002D8 var_40          = dword ptr -40h
.text:000002D8 var_3C          = dword ptr -3Ch
.text:000002D8 var_30          = dword ptr -30h
.text:000002D8 var_2C          = dword ptr -2Ch
.text:000002D8 var_20          = dword ptr -20h
.text:000002D8 var_18          = dword ptr -18h
.text:000002D8 var_10          = byte ptr -10h
.text:000002D8 var_8           = dword ptr -8
.text:000002D8 var_4           = dword ptr -4
.text:000002D8 arg_0           = dword ptr  8
.text:000002D8 arg_4           = dword ptr  0Ch
.text:000002D8 arg_8           = dword ptr  10h
.text:000002D8
.text:000002D8                 push    ebp
.text:000002D9                 mov     ebp, esp
.text:000002DB                 sub     esp, 44h
.text:000002DE                 push    esi
.text:000002DF                 push    edi
.text:000002E0                 lea     edi, [ebp+var_44]
.text:000002E3                 mov     ecx, 11h
.text:000002E8                 mov     eax, 0CCCCCCCCh
.text:000002ED                 rep stosd
.text:000002EF                 mov     eax, [ebp+arg_0]
.text:000002F2                 add     eax, 30h ; '0'
.text:000002F5                 mov     [ebp+var_4], eax
.text:000002F8                 mov     ecx, [ebp+arg_4]
.text:000002FB                 mov     [ebp+var_8], ecx
.text:000002FE                 mov     [ebp+var_30], 0
.text:00000305                 mov     [ebp+var_2C], 0
.text:0000030C                 mov     [ebp+var_40], 0
.text:00000313                 mov     [ebp+var_3C], 0
.text:0000031A
.text:0000031A loc_31A:                                ; CODE XREF: _ssh_gssapi_display_status+57j
.text:0000031A                 mov     edx, [ebp+arg_8]
.text:0000031D                 mov     dword ptr [edx], 0
.text:00000323                 mov     eax, [ebp+arg_8]
.text:00000326                 mov     dword ptr [eax+4], 0
.text:0000032D                 xor     ecx, ecx
.text:0000032F                 jnz     short loc_31A
.text:00000331                 mov     [ebp+var_20], 0
.text:00000338                 mov     esi, esp
.text:0000033A                 lea     edx, [ebp+var_30]
.text:0000033D                 push    edx
.text:0000033E                 lea     eax, [ebp+var_20]
.text:00000341                 push    eax
.text:00000342                 mov     ecx, dword ptr ds:_GSS_MECH_KRB5
.text:00000348                 push    ecx
.text:00000349                 push    1
.text:0000034B                 mov     edx, [ebp+var_8]
.text:0000034E                 mov     eax, [edx]
.text:00000350                 push    eax
.text:00000351                 lea     ecx, [ebp+var_10]
.text:00000354                 push    ecx
.text:00000355                 mov     edx, [ebp+var_4]
.text:00000358                 mov     eax, [edx+4]
.text:0000035B                 call    eax
.text:0000035D                 cmp     esi, esp
.text:0000035F                 call    __RTC_CheckEsp
.text:00000364                 mov     [ebp+var_18], eax
.text:00000367                 cmp     [ebp+var_18], 0
.text:0000036B                 jz      short loc_377
.text:0000036D                 mov     eax, 4
.text:00000372                 jmp     loc_483
.text:00000377 ; ---------------------------------------------------------------------------
.text:00000377
.text:00000377 loc_377:                                ; CODE XREF: _ssh_gssapi_display_status+93j
.text:00000377                 mov     [ebp+var_20], 0
.text:0000037E                 mov     esi, esp
.text:00000380                 lea     ecx, [ebp+var_40]
.text:00000383                 push    ecx
.text:00000384                 lea     edx, [ebp+var_20]
.text:00000387                 push    edx
.text:00000388                 mov     eax, dword ptr ds:_GSS_MECH_KRB5
.text:0000038D                 push    eax
.text:0000038E                 push    2
.text:00000390                 mov     ecx, [ebp+var_8]
.text:00000393                 mov     edx, [ecx+4]
.text:00000396                 push    edx
.text:00000397                 lea     eax, [ebp+var_10]
.text:0000039A                 push    eax
.text:0000039B                 mov     ecx, [ebp+var_4]
.text:0000039E                 mov     edx, [ecx+4]
.text:000003A1                 call    edx
.text:000003A3                 cmp     esi, esp
.text:000003A5                 call    __RTC_CheckEsp
.text:000003AA                 mov     [ebp+var_18], eax
.text:000003AD                 cmp     [ebp+var_18], 0
.text:000003B1                 jz      short loc_3D6
.text:000003B3                 mov     esi, esp
.text:000003B5                 lea     eax, [ebp+var_30]
.text:000003B8                 push    eax
.text:000003B9                 lea     ecx, [ebp+var_10]
.text:000003BC                 push    ecx
.text:000003BD                 mov     edx, [ebp+var_4]
.text:000003C0                 mov     eax, [edx+14h]
.text:000003C3                 call    eax
.text:000003C5                 cmp     esi, esp
.text:000003C7                 call    __RTC_CheckEsp
.text:000003CC                 mov     eax, 4
.text:000003D1                 jmp     loc_483
.text:000003D6 ; ---------------------------------------------------------------------------
.text:000003D6
.text:000003D6 loc_3D6:                                ; CODE XREF: _ssh_gssapi_display_status+D9j
.text:000003D6                 mov     ecx, [ebp+var_40]
.text:000003D9                 mov     edx, [ebp+var_30]
.text:000003DC                 lea     eax, [edx+ecx+1]
.text:000003E0                 mov     ecx, [ebp+arg_8]
.text:000003E3                 mov     [ecx], eax
.text:000003E5                 push    1
.text:000003E7                 mov     edx, [ebp+arg_8]
.text:000003EA                 mov     eax, [edx]
.text:000003EC                 add     eax, 1
.text:000003EF                 push    eax
.text:000003F0                 call    _safemalloc
.text:000003F5                 add     esp, 8
.text:000003F8                 mov     ecx, [ebp+arg_8]
.text:000003FB                 mov     [ecx+4], eax
.text:000003FE                 mov     edx, [ebp+var_30]
.text:00000401                 push    edx             ; size_t
.text:00000402                 mov     eax, [ebp+var_2C]
.text:00000405                 push    eax             ; void *
.text:00000406                 mov     ecx, [ebp+arg_8]
.text:00000409                 mov     edx, [ecx+4]
.text:0000040C                 push    edx             ; void *
.text:0000040D                 call    _memcpy
.text:00000412                 add     esp, 0Ch
.text:00000415                 mov     eax, [ebp+arg_8]
.text:00000418                 mov     ecx, [eax+4]
.text:0000041B                 mov     edx, [ebp+var_30]
.text:0000041E                 mov     byte ptr [ecx+edx], 20h ; ' '
.text:00000422                 mov     eax, [ebp+var_40]
.text:00000425                 push    eax             ; size_t
.text:00000426                 mov     ecx, [ebp+var_3C]
.text:00000429                 push    ecx             ; void *
.text:0000042A                 mov     edx, [ebp+arg_8]
.text:0000042D                 mov     eax, [edx+4]
.text:00000430                 mov     ecx, [ebp+var_30]
.text:00000433                 lea     edx, [eax+ecx+1]
.text:00000437                 push    edx             ; void *
.text:00000438                 call    _memcpy
.text:0000043D                 add     esp, 0Ch
.text:00000440                 mov     eax, [ebp+arg_8]
.text:00000443                 mov     ecx, [eax+4]
.text:00000446                 mov     edx, [ebp+arg_8]
.text:00000449                 mov     eax, [edx]
.text:0000044B                 mov     byte ptr [ecx+eax], 0
.text:0000044F                 mov     esi, esp
.text:00000451                 lea     ecx, [ebp+var_30]
.text:00000454                 push    ecx
.text:00000455                 lea     edx, [ebp+var_10]
.text:00000458                 push    edx
.text:00000459                 mov     eax, [ebp+var_4]
.text:0000045C                 mov     ecx, [eax+14h]
.text:0000045F                 call    ecx
.text:00000461                 cmp     esi, esp
.text:00000463                 call    __RTC_CheckEsp
.text:00000468                 mov     esi, esp
.text:0000046A                 lea     edx, [ebp+var_40]
.text:0000046D                 push    edx
.text:0000046E                 lea     eax, [ebp+var_10]
.text:00000471                 push    eax
.text:00000472                 mov     ecx, [ebp+var_4]
.text:00000475                 mov     edx, [ecx+14h]
.text:00000478                 call    edx
.text:0000047A                 cmp     esi, esp
.text:0000047C                 call    __RTC_CheckEsp
.text:00000481                 xor     eax, eax
.text:00000483
.text:00000483 loc_483:                                ; CODE XREF: _ssh_gssapi_display_status+9Aj
.text:00000483                                         ; _ssh_gssapi_display_status+F9j
.text:00000483                 push    edx
.text:00000484                 mov     ecx, ebp
.text:00000486                 push    eax
.text:00000487                 lea     edx, $LN13
.text:0000048D                 call    @_RTC_CheckStackVars@8
.text:00000492                 pop     eax
.text:00000493                 pop     edx
.text:00000494                 pop     edi
.text:00000495                 pop     esi
.text:00000496                 add     esp, 44h
.text:00000499                 cmp     ebp, esp
.text:0000049B                 call    __RTC_CheckEsp
.text:000004A0                 mov     esp, ebp
.text:000004A2                 pop     ebp
.text:000004A3                 retn
.text:000004A3 _ssh_gssapi_display_status endp
.text:000004A3
.text:000004A3 ; ---------------------------------------------------------------------------
.text:000004A4 $LN13           dd 4                    ; DATA XREF: _ssh_gssapi_display_status+1AFo
.text:000004A8                 dd offset $LN12
.text:000004AC $LN12           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000004A8o
.text:000004B4                 dd offset $LN8_0        ; "lmin"
.text:000004B8                 dd 0FFFFFFE0h, 4
.text:000004C0                 dd offset $LN9          ; "ccc"
.text:000004C4                 dd 0FFFFFFD0h, 8
.text:000004CC                 dd offset $LN10         ; "msg_maj"
.text:000004D0                 dd 0FFFFFFC0h, 8
.text:000004D8                 dd offset $LN11         ; "msg_min"
.text:000004DC $LN11           db 'msg_min',0          ; DATA XREF: .text:000004D8o
.text:000004E4 $LN10           db 'msg_maj',0          ; DATA XREF: .text:000004CCo
.text:000004EC $LN9            db 'ccc',0              ; DATA XREF: .text:000004C0o
.text:000004F0 $LN8_0          db 'lmin',0             ; DATA XREF: .text:000004B4o
.text:000004F5                 align 4
.text:000004F8
.text:000004F8 ; =============== S U B R O U T I N E =======================================
.text:000004F8
.text:000004F8 ; Attributes: bp-based frame
.text:000004F8
.text:000004F8 _ssh_gssapi_free_tok proc near          ; CODE XREF: _ssh_gssapi_free_mic+Bp
.text:000004F8                                         ; DATA XREF: _ssh_gssapi_bind_fns+2Eo
.text:000004F8
.text:000004F8 var_14          = dword ptr -14h
.text:000004F8 var_10          = dword ptr -10h
.text:000004F8 var_C           = dword ptr -0Ch
.text:000004F8 var_8           = dword ptr -8
.text:000004F8 var_4           = dword ptr -4
.text:000004F8 arg_0           = dword ptr  8
.text:000004F8 arg_4           = dword ptr  0Ch
.text:000004F8
.text:000004F8                 push    ebp
.text:000004F9                 mov     ebp, esp
.text:000004FB                 sub     esp, 14h
.text:000004FE                 push    esi
.text:000004FF                 mov     eax, 0CCCCCCCCh
.text:00000504                 mov     [ebp+var_14], eax
.text:00000507                 mov     [ebp+var_10], eax
.text:0000050A                 mov     [ebp+var_C], eax
.text:0000050D                 mov     [ebp+var_8], eax
.text:00000510                 mov     [ebp+var_4], eax
.text:00000513                 mov     eax, [ebp+arg_0]
.text:00000516                 add     eax, 30h ; '0'
.text:00000519                 mov     [ebp+var_4], eax
.text:0000051C                 mov     esi, esp
.text:0000051E                 mov     ecx, [ebp+arg_4]
.text:00000521                 push    ecx
.text:00000522                 lea     edx, [ebp+var_C]
.text:00000525                 push    edx
.text:00000526                 mov     eax, [ebp+var_4]
.text:00000529                 mov     ecx, [eax+14h]
.text:0000052C                 call    ecx
.text:0000052E                 cmp     esi, esp
.text:00000530                 call    __RTC_CheckEsp
.text:00000535                 mov     [ebp+var_14], eax
.text:00000538                 cmp     [ebp+var_14], 0
.text:0000053C                 jnz     short loc_542
.text:0000053E                 xor     eax, eax
.text:00000540                 jmp     short loc_547
.text:00000542 ; ---------------------------------------------------------------------------
.text:00000542
.text:00000542 loc_542:                                ; CODE XREF: _ssh_gssapi_free_tok+44j
.text:00000542                 mov     eax, 4
.text:00000547
.text:00000547 loc_547:                                ; CODE XREF: _ssh_gssapi_free_tok+48j
.text:00000547                 push    edx
.text:00000548                 mov     ecx, ebp
.text:0000054A                 push    eax
.text:0000054B                 lea     edx, $LN6_1
.text:00000551                 call    @_RTC_CheckStackVars@8
.text:00000556                 pop     eax
.text:00000557                 pop     edx
.text:00000558                 pop     esi
.text:00000559                 add     esp, 14h
.text:0000055C                 cmp     ebp, esp
.text:0000055E                 call    __RTC_CheckEsp
.text:00000563                 mov     esp, ebp
.text:00000565                 pop     ebp
.text:00000566                 retn
.text:00000566 _ssh_gssapi_free_tok endp
.text:00000566
.text:00000566 ; ---------------------------------------------------------------------------
.text:00000567                 align 4
.text:00000568 $LN6_1          dd 1                    ; DATA XREF: _ssh_gssapi_free_tok+53o
.text:0000056C                 dd offset $LN5_0
.text:00000570 $LN5_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000056Co
.text:00000578                 dd offset $LN4_0        ; "min_stat"
.text:0000057C $LN4_0          db 'min_stat',0         ; DATA XREF: .text:00000578o
.text:00000585                 align 4
.text:00000588
.text:00000588 ; =============== S U B R O U T I N E =======================================
.text:00000588
.text:00000588 ; Attributes: bp-based frame
.text:00000588
.text:00000588 _ssh_gssapi_release_cred proc near      ; DATA XREF: _ssh_gssapi_bind_fns+42o
.text:00000588
.text:00000588 var_18          = dword ptr -18h
.text:00000588 var_14          = dword ptr -14h
.text:00000588 var_10          = dword ptr -10h
.text:00000588 var_C           = dword ptr -0Ch
.text:00000588 var_8           = dword ptr -8
.text:00000588 var_4           = dword ptr -4
.text:00000588 arg_0           = dword ptr  8
.text:00000588 arg_4           = dword ptr  0Ch
.text:00000588
.text:00000588                 push    ebp
.text:00000589                 mov     ebp, esp
.text:0000058B                 sub     esp, 18h
.text:0000058E                 push    esi
.text:0000058F                 mov     eax, 0CCCCCCCCh
.text:00000594                 mov     [ebp+var_18], eax
.text:00000597                 mov     [ebp+var_14], eax
.text:0000059A                 mov     [ebp+var_10], eax
.text:0000059D                 mov     [ebp+var_C], eax
.text:000005A0                 mov     [ebp+var_8], eax
.text:000005A3                 mov     [ebp+var_4], eax
.text:000005A6                 mov     eax, [ebp+arg_0]
.text:000005A9                 add     eax, 30h ; '0'
.text:000005AC                 mov     [ebp+var_4], eax
.text:000005AF                 mov     ecx, [ebp+arg_4]
.text:000005B2                 mov     edx, [ecx]
.text:000005B4                 mov     [ebp+var_8], edx
.text:000005B7                 mov     [ebp+var_18], 0
.text:000005BE                 cmp     [ebp+var_8], 0
.text:000005C2                 jnz     short loc_5CB
.text:000005C4                 mov     eax, 4
.text:000005C9                 jmp     short loc_60F
.text:000005CB ; ---------------------------------------------------------------------------
.text:000005CB
.text:000005CB loc_5CB:                                ; CODE XREF: _ssh_gssapi_release_cred+3Aj
.text:000005CB                 mov     eax, [ebp+var_8]
.text:000005CE                 cmp     dword ptr [eax+8], 0
.text:000005D2                 jz      short loc_5F4
.text:000005D4                 mov     esi, esp
.text:000005D6                 push    0
.text:000005D8                 mov     ecx, [ebp+var_8]
.text:000005DB                 add     ecx, 8
.text:000005DE                 push    ecx
.text:000005DF                 lea     edx, [ebp+var_10]
.text:000005E2                 push    edx
.text:000005E3                 mov     eax, [ebp+var_4]
.text:000005E6                 mov     ecx, [eax]
.text:000005E8                 call    ecx
.text:000005EA                 cmp     esi, esp
.text:000005EC                 call    __RTC_CheckEsp
.text:000005F1                 mov     [ebp+var_18], eax
.text:000005F4
.text:000005F4 loc_5F4:                                ; CODE XREF: _ssh_gssapi_release_cred+4Aj
.text:000005F4                 mov     edx, [ebp+var_8]
.text:000005F7                 push    edx
.text:000005F8                 call    _safefree
.text:000005FD                 add     esp, 4
.text:00000600                 cmp     [ebp+var_18], 0
.text:00000604                 jnz     short loc_60A
.text:00000606                 xor     eax, eax
.text:00000608                 jmp     short loc_60F
.text:0000060A ; ---------------------------------------------------------------------------
.text:0000060A
.text:0000060A loc_60A:                                ; CODE XREF: _ssh_gssapi_release_cred+7Cj
.text:0000060A                 mov     eax, 4
.text:0000060F
.text:0000060F loc_60F:                                ; CODE XREF: _ssh_gssapi_release_cred+41j
.text:0000060F                                         ; _ssh_gssapi_release_cred+80j
.text:0000060F                 push    edx
.text:00000610                 mov     ecx, ebp
.text:00000612                 push    eax
.text:00000613                 lea     edx, $LN8_1
.text:00000619                 call    @_RTC_CheckStackVars@8
.text:0000061E                 pop     eax
.text:0000061F                 pop     edx
.text:00000620                 pop     esi
.text:00000621                 add     esp, 18h
.text:00000624                 cmp     ebp, esp
.text:00000626                 call    __RTC_CheckEsp
.text:0000062B                 mov     esp, ebp
.text:0000062D                 pop     ebp
.text:0000062E                 retn
.text:0000062E _ssh_gssapi_release_cred endp
.text:0000062E
.text:0000062E ; ---------------------------------------------------------------------------
.text:0000062F                 align 10h
.text:00000630 $LN8_1          dd 1                    ; DATA XREF: _ssh_gssapi_release_cred+8Bo
.text:00000634                 dd offset $LN7_1
.text:00000638 $LN7_1          dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00000634o
.text:00000640                 dd offset $LN6_2        ; "min_stat"
.text:00000644 $LN6_2          db 'min_stat',0         ; DATA XREF: .text:00000640o
.text:0000064D                 db 0Bh dup(0CCh)
.text:00000658
.text:00000658 ; =============== S U B R O U T I N E =======================================
.text:00000658
.text:00000658 ; Attributes: bp-based frame
.text:00000658
.text:00000658 _ssh_gssapi_release_name proc near      ; DATA XREF: _ssh_gssapi_bind_fns+1Ao
.text:00000658
.text:00000658 var_14          = dword ptr -14h
.text:00000658 var_10          = dword ptr -10h
.text:00000658 var_C           = dword ptr -0Ch
.text:00000658 var_8           = dword ptr -8
.text:00000658 var_4           = dword ptr -4
.text:00000658 arg_0           = dword ptr  8
.text:00000658 arg_4           = dword ptr  0Ch
.text:00000658
.text:00000658                 push    ebp
.text:00000659                 mov     ebp, esp
.text:0000065B                 sub     esp, 14h
.text:0000065E                 push    esi
.text:0000065F                 mov     eax, 0CCCCCCCCh
.text:00000664                 mov     [ebp+var_14], eax
.text:00000667                 mov     [ebp+var_10], eax
.text:0000066A                 mov     [ebp+var_C], eax
.text:0000066D                 mov     [ebp+var_8], eax
.text:00000670                 mov     [ebp+var_4], eax
.text:00000673                 mov     eax, [ebp+arg_0]
.text:00000676                 add     eax, 30h ; '0'
.text:00000679                 mov     [ebp+var_4], eax
.text:0000067C                 mov     esi, esp
.text:0000067E                 mov     ecx, [ebp+arg_4]
.text:00000681                 push    ecx
.text:00000682                 lea     edx, [ebp+var_C]
.text:00000685                 push    edx
.text:00000686                 mov     eax, [ebp+var_4]
.text:00000689                 mov     ecx, [eax+1Ch]
.text:0000068C                 call    ecx
.text:0000068E                 cmp     esi, esp
.text:00000690                 call    __RTC_CheckEsp
.text:00000695                 mov     [ebp+var_14], eax
.text:00000698                 cmp     [ebp+var_14], 0
.text:0000069C                 jnz     short loc_6A2
.text:0000069E                 xor     eax, eax
.text:000006A0                 jmp     short loc_6A7
.text:000006A2 ; ---------------------------------------------------------------------------
.text:000006A2
.text:000006A2 loc_6A2:                                ; CODE XREF: _ssh_gssapi_release_name+44j
.text:000006A2                 mov     eax, 4
.text:000006A7
.text:000006A7 loc_6A7:                                ; CODE XREF: _ssh_gssapi_release_name+48j
.text:000006A7                 push    edx
.text:000006A8                 mov     ecx, ebp
.text:000006AA                 push    eax
.text:000006AB                 lea     edx, $LN6_3
.text:000006B1                 call    @_RTC_CheckStackVars@8
.text:000006B6                 pop     eax
.text:000006B7                 pop     edx
.text:000006B8                 pop     esi
.text:000006B9                 add     esp, 14h
.text:000006BC                 cmp     ebp, esp
.text:000006BE                 call    __RTC_CheckEsp
.text:000006C3                 mov     esp, ebp
.text:000006C5                 pop     ebp
.text:000006C6                 retn
.text:000006C6 _ssh_gssapi_release_name endp
.text:000006C6
.text:000006C6 ; ---------------------------------------------------------------------------
.text:000006C7                 align 4
.text:000006C8 $LN6_3          dd 1                    ; DATA XREF: _ssh_gssapi_release_name+53o
.text:000006CC                 dd offset $LN5_1
.text:000006D0 $LN5_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000006CCo
.text:000006D8                 dd offset $LN4_1        ; "min_stat"
.text:000006DC $LN4_1          db 'min_stat',0         ; DATA XREF: .text:000006D8o
.text:000006E5                 align 4
.text:000006E8
.text:000006E8 ; =============== S U B R O U T I N E =======================================
.text:000006E8
.text:000006E8 ; Attributes: bp-based frame
.text:000006E8
.text:000006E8 _ssh_gssapi_get_mic proc near           ; DATA XREF: _ssh_gssapi_bind_fns+4Co
.text:000006E8
.text:000006E8 var_8           = dword ptr -8
.text:000006E8 var_4           = dword ptr -4
.text:000006E8 arg_0           = dword ptr  8
.text:000006E8 arg_4           = dword ptr  0Ch
.text:000006E8 arg_8           = dword ptr  10h
.text:000006E8 arg_C           = dword ptr  14h
.text:000006E8
.text:000006E8                 push    ebp
.text:000006E9                 mov     ebp, esp
.text:000006EB                 sub     esp, 8
.text:000006EE                 push    esi
.text:000006EF                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000006F6                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006FD                 mov     eax, [ebp+arg_0]
.text:00000700                 add     eax, 30h ; '0'
.text:00000703                 mov     [ebp+var_4], eax
.text:00000706                 mov     ecx, [ebp+arg_4]
.text:00000709                 mov     [ebp+var_8], ecx
.text:0000070C                 cmp     [ebp+var_8], 0
.text:00000710                 jnz     short loc_719
.text:00000712                 mov     eax, 4
.text:00000717                 jmp     short loc_742
.text:00000719 ; ---------------------------------------------------------------------------
.text:00000719
.text:00000719 loc_719:                                ; CODE XREF: _ssh_gssapi_get_mic+28j
.text:00000719                 mov     esi, esp
.text:0000071B                 mov     edx, [ebp+arg_C]
.text:0000071E                 push    edx
.text:0000071F                 mov     eax, [ebp+arg_8]
.text:00000722                 push    eax
.text:00000723                 push    0
.text:00000725                 mov     ecx, [ebp+var_8]
.text:00000728                 mov     edx, [ecx+8]
.text:0000072B                 push    edx
.text:0000072C                 mov     eax, [ebp+var_8]
.text:0000072F                 add     eax, 4
.text:00000732                 push    eax
.text:00000733                 mov     ecx, [ebp+var_4]
.text:00000736                 mov     edx, [ecx+8]
.text:00000739                 call    edx
.text:0000073B                 cmp     esi, esp
.text:0000073D                 call    __RTC_CheckEsp
.text:00000742
.text:00000742 loc_742:                                ; CODE XREF: _ssh_gssapi_get_mic+2Fj
.text:00000742                 pop     esi
.text:00000743                 add     esp, 8
.text:00000746                 cmp     ebp, esp
.text:00000748                 call    __RTC_CheckEsp
.text:0000074D                 mov     esp, ebp
.text:0000074F                 pop     ebp
.text:00000750                 retn
.text:00000750 _ssh_gssapi_get_mic endp
.text:00000750
.text:00000750 ; ---------------------------------------------------------------------------
.text:00000751                 align 8
.text:00000758
.text:00000758 ; =============== S U B R O U T I N E =======================================
.text:00000758
.text:00000758 ; Attributes: bp-based frame
.text:00000758
.text:00000758 _ssh_gssapi_free_mic proc near          ; DATA XREF: _ssh_gssapi_bind_fns+56o
.text:00000758
.text:00000758 arg_0           = dword ptr  8
.text:00000758 arg_4           = dword ptr  0Ch
.text:00000758
.text:00000758                 push    ebp
.text:00000759                 mov     ebp, esp
.text:0000075B                 mov     eax, [ebp+arg_4]
.text:0000075E                 push    eax
.text:0000075F                 mov     ecx, [ebp+arg_0]
.text:00000762                 push    ecx
.text:00000763                 call    _ssh_gssapi_free_tok
.text:00000768                 add     esp, 8
.text:0000076B                 cmp     ebp, esp
.text:0000076D                 call    __RTC_CheckEsp
.text:00000772                 pop     ebp
.text:00000773                 retn
.text:00000773 _ssh_gssapi_free_mic endp
.text:00000773
.text:00000773 _text           ends
.text:00000773
.rtc$TMZ:00000774 ; ===========================================================================
.rtc$TMZ:00000774
.rtc$TMZ:00000774 ; Segment type: Pure data
.rtc$TMZ:00000774 ; Segment permissions: Read
.rtc$TMZ:00000774 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000774                 assume cs:_rtc$TMZ
.rtc$TMZ:00000774                 ;org 774h
.rtc$TMZ:00000774 ; COMDAT (pick any)
.rtc$TMZ:00000774 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000774 _rtc$TMZ        ends
.rtc$TMZ:00000774
.rtc$IMZ:00000778 ; ===========================================================================
.rtc$IMZ:00000778
.rtc$IMZ:00000778 ; Segment type: Pure data
.rtc$IMZ:00000778 ; Segment permissions: Read
.rtc$IMZ:00000778 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000778                 assume cs:_rtc$IMZ
.rtc$IMZ:00000778                 ;org 778h
.rtc$IMZ:00000778 ; COMDAT (pick any)
.rtc$IMZ:00000778 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000778 _rtc$IMZ        ends
.rtc$IMZ:00000778
UNDEF:00000780 ; ===========================================================================
UNDEF:00000780
UNDEF:00000780 ; Segment type: Externs
UNDEF:00000780 ; UNDEF
UNDEF:00000780                 extrn __RTC_Shutdown:near
UNDEF:00000780                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000784                 extrn __RTC_InitBase:near
UNDEF:00000784                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000788                 extrn _GSS_MECH_KRB5:near
UNDEF:00000788                                         ; DATA XREF: _ssh_gssapi_indicate_mech+6r
UNDEF:00000788                                         ; _ssh_gssapi_indicate_mech+13r ...
UNDEF:0000078C                 extrn _safefree:near    ; CODE XREF: _ssh_gssapi_import_name+76p
UNDEF:0000078C                                         ; _ssh_gssapi_release_cred+70p
UNDEF:00000790                 extrn _GSS_C_NT_HOSTBASED_SERVICE:near
UNDEF:00000790                                         ; DATA XREF: _ssh_gssapi_import_name+51r
UNDEF:00000794 ; size_t __cdecl strlen(const char *)
UNDEF:00000794                 extrn _strlen:near      ; CODE XREF: _ssh_gssapi_import_name+40p
UNDEF:00000798                 extrn _dupcat:near      ; CODE XREF: _ssh_gssapi_import_name+2Bp
UNDEF:0000079C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000079C                                         ; CODE XREF: _ssh_gssapi_import_name+97p
UNDEF:0000079C                                         ; _ssh_gssapi_init_sec_context+AFp ...
UNDEF:000007A0                 extrn __RTC_CheckEsp:near
UNDEF:000007A0                                         ; CODE XREF: _ssh_gssapi_import_name+6Ap
UNDEF:000007A0                                         ; _ssh_gssapi_import_name+A5p ...
UNDEF:000007A4                 extrn _safemalloc:near  ; CODE XREF: _ssh_gssapi_acquire_cred+Fp
UNDEF:000007A4                                         ; _ssh_gssapi_display_status+118p
UNDEF:000007A8 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:000007A8                 extrn _memcpy:near      ; CODE XREF: _ssh_gssapi_display_status+135p
UNDEF:000007A8                                         ; _ssh_gssapi_display_status+160p
UNDEF:000007A8
UNDEF:000007A8
UNDEF:000007A8                 end