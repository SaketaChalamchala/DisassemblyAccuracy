.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : E646E220F171E89A79A756E0367E6C07
.data:00000000 ; Input CRC32 : 858742FC
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\misc.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG85650[]
.data:00000000 $SG85650        db '%.*s',0             ; DATA XREF: _host_strduptrim+AFo
.data:00000005                 align 4
.data:00000008 ; wchar_t _SG85911
.data:00000008 $SG85911:                               ; DATA XREF: _bufchain_consume+24o
.data:00000008                 unicode 0, <..\..\..\misc.c>,0
.data:00000028 ; wchar_t _SG85912
.data:00000028 $SG85912:                               ; DATA XREF: _bufchain_consume+29o
.data:00000028                 unicode 0, <ch->
.data:00000028                 dw 3Eh
.data:00000028                 unicode 0, <buffersize >
.data:00000028                 dw 3Eh
.data:00000028                 unicode 0, <= len>,0
.data:00000054 ; wchar_t _SG85919
.data:00000054 $SG85919:                               ; DATA XREF: _bufchain_consume+53o
.data:00000054                 unicode 0, <..\..\..\misc.c>,0
.data:00000074 ; wchar_t _SG85920
.data:00000074 $SG85920:                               ; DATA XREF: _bufchain_consume+58o
.data:00000074                 unicode 0, <ch->
.data:00000074                 dw 3Eh
.data:00000074                 unicode 0, <head != NULL>,0
.data:00000096                 align 4
.data:00000098 ; wchar_t _SG85943
.data:00000098 $SG85943:                               ; DATA XREF: _bufchain_fetch+39o
.data:00000098                 unicode 0, <..\..\..\misc.c>,0
.data:000000B8 ; wchar_t _SG85944
.data:000000B8 $SG85944:                               ; DATA XREF: _bufchain_fetch+3Eo
.data:000000B8                 unicode 0, <ch->
.data:000000B8                 dw 3Eh
.data:000000B8                 unicode 0, <buffersize >
.data:000000B8                 dw 3Eh
.data:000000B8                 unicode 0, <= len>,0
.data:000000E4 ; wchar_t _SG85951
.data:000000E4 $SG85951:                               ; DATA XREF: _bufchain_fetch+62o
.data:000000E4                 unicode 0, <..\..\..\misc.c>,0
.data:00000104 ; wchar_t _SG85952
.data:00000104 $SG85952:                               ; DATA XREF: _bufchain_fetch+67o
.data:00000104                 unicode 0, <tmp != NULL>,0
.data:0000011C ; char _SG85966[]
.data:0000011C $SG85966        db 'Out of memory!',0   ; DATA XREF: _safemalloc+6Ao
.data:0000012B                 align 4
.data:0000012C ; char _SG85982[]
.data:0000012C $SG85982        db 'Out of memory!',0   ; DATA XREF: _saferealloc+78o
.data:0000013B                 align 4
.data:0000013C ; char _SG86007[]
.data:0000013C $SG86007        dd offset loc_91E+2     ; DATA XREF: _validate_manual_hostkey:loc_177Eo
.data:00000140 ; char _SG86008[]
.data:00000140 $SG86008        dd offset loc_91E+2     ; DATA XREF: _validate_manual_hostkey+51o
.data:00000144 ; char _SG86011[]
.data:00000144 $SG86011        db '0123456789abcdefABCDEF:',0
.data:00000144                                         ; DATA XREF: _validate_manual_hostkey+96o
.data:0000015C                 align 10h
.data:00000160 ; char _SG86031[]
.data:00000160 $SG86031        db '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/='
.data:00000160                                         ; DATA XREF: _validate_manual_hostkey+1EFo
.data:00000160                 db 0
.data:000001A2                 align 4
.data:000001A2 _data           ends
.data:000001A2
.rdata:000001A4 ; ===========================================================================
.rdata:000001A4
.rdata:000001A4 ; Segment type: Pure data
.rdata:000001A4 ; Segment permissions: Read
.rdata:000001A4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000001A4 _rdata          segment para public 'DATA' use32
.rdata:000001A4                 assume cs:_rdata
.rdata:000001A4                 ;org 1A4h
.rdata:000001A4 ; `base64_encode_atom'::`2'::base64_chars
.rdata:000001A4 ?base64_chars@?1??base64_encode_atom@@9@9 db 41h
.rdata:000001A4                                         ; DATA XREF: _base64_encode_atom+4Cr
.rdata:000001A4                                         ; _base64_encode_atom+60r ...
.rdata:000001A5 aBcdefghijklmno db 'BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',0
.rdata:000001E5                 align 4
.rdata:000001E5 _rdata          ends
.rdata:000001E5
.text:000001E8 ; ===========================================================================
.text:000001E8
.text:000001E8 ; Segment type: Pure code
.text:000001E8 ; Segment permissions: Read/Execute
.text:000001E8 _text           segment para public 'CODE' use32
.text:000001E8                 assume cs:_text
.text:000001E8                 ;org 1E8h
.text:000001E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000001E8
.text:000001E8 ; =============== S U B R O U T I N E =======================================
.text:000001E8
.text:000001E8 ; Attributes: bp-based frame
.text:000001E8
.text:000001E8 ; int __cdecl parse_blocksize(char *Str)
.text:000001E8                 public _parse_blocksize
.text:000001E8 _parse_blocksize proc near
.text:000001E8
.text:000001E8 var_14          = dword ptr -14h
.text:000001E8 var_10          = dword ptr -10h
.text:000001E8 var_C           = dword ptr -0Ch
.text:000001E8 EndPtr          = dword ptr -8
.text:000001E8 var_4           = dword ptr -4
.text:000001E8 Str             = dword ptr  8
.text:000001E8
.text:000001E8                 push    ebp
.text:000001E9                 mov     ebp, esp
.text:000001EB                 sub     esp, 14h
.text:000001EE                 mov     eax, 0CCCCCCCCh
.text:000001F3                 mov     [ebp+var_14], eax
.text:000001F6                 mov     [ebp+var_10], eax
.text:000001F9                 mov     [ebp+var_C], eax
.text:000001FC                 mov     [ebp+EndPtr], eax
.text:000001FF                 mov     [ebp+var_4], eax
.text:00000202                 push    0Ah             ; Radix
.text:00000204                 lea     eax, [ebp+EndPtr]
.text:00000207                 push    eax             ; EndPtr
.text:00000208                 mov     ecx, [ebp+Str]
.text:0000020B                 push    ecx             ; Str
.text:0000020C                 call    _strtoul
.text:00000211                 add     esp, 0Ch
.text:00000214                 mov     [ebp+var_10], eax
.text:00000217                 mov     edx, [ebp+EndPtr]
.text:0000021A                 movsx   eax, byte ptr [edx]
.text:0000021D                 test    eax, eax
.text:0000021F                 jz      short $LN9      ; jumptable 0000026B default case
.text:00000221
.text:00000221 loc_221:                                ; CODE XREF: _parse_blocksize+5Fj
.text:00000221                 mov     ecx, [ebp+EndPtr]
.text:00000224                 movsx   edx, byte ptr [ecx]
.text:00000227                 test    edx, edx
.text:00000229                 jz      short loc_249
.text:0000022B                 mov     eax, [ebp+EndPtr]
.text:0000022E                 movzx   ecx, byte ptr [eax]
.text:00000231                 push    ecx             ; C
.text:00000232                 call    _isspace
.text:00000237                 add     esp, 4
.text:0000023A                 test    eax, eax
.text:0000023C                 jz      short loc_249
.text:0000023E                 mov     edx, [ebp+EndPtr]
.text:00000241                 add     edx, 1
.text:00000244                 mov     [ebp+EndPtr], edx
.text:00000247                 jmp     short loc_221
.text:00000249 ; ---------------------------------------------------------------------------
.text:00000249
.text:00000249 loc_249:                                ; CODE XREF: _parse_blocksize+41j
.text:00000249                                         ; _parse_blocksize+54j
.text:00000249                 mov     eax, [ebp+EndPtr]
.text:0000024C                 movsx   ecx, byte ptr [eax]
.text:0000024F                 mov     [ebp+var_14], ecx
.text:00000252                 mov     edx, [ebp+var_14]
.text:00000255                 sub     edx, 47h ; 'G'
.text:00000258                 mov     [ebp+var_14], edx
.text:0000025B                 cmp     [ebp+var_14], 26h ; '&' ; switch 39 cases
.text:0000025F                 ja      short $LN9      ; jumptable 0000026B default case
.text:00000261                 mov     eax, [ebp+var_14]
.text:00000264                 movzx   ecx, ds:$LN12[eax]
.text:0000026B                 jmp     ds:$LN16[ecx*4] ; switch jump
.text:00000272 ; ---------------------------------------------------------------------------
.text:00000272
.text:00000272 $LN4:                                   ; CODE XREF: _parse_blocksize+83j
.text:00000272                                         ; DATA XREF: .text:$LN16o
.text:00000272                 mov     edx, [ebp+var_10] ; jumptable 0000026B cases 4,36
.text:00000275                 shl     edx, 0Ah
.text:00000278                 mov     [ebp+var_10], edx
.text:0000027B                 jmp     short $LN9      ; jumptable 0000026B default case
.text:0000027D ; ---------------------------------------------------------------------------
.text:0000027D
.text:0000027D $LN3:                                   ; CODE XREF: _parse_blocksize+83j
.text:0000027D                                         ; DATA XREF: .text:$LN16o
.text:0000027D                 mov     eax, [ebp+var_10] ; jumptable 0000026B cases 6,38
.text:00000280                 shl     eax, 14h
.text:00000283                 mov     [ebp+var_10], eax
.text:00000286                 jmp     short $LN9      ; jumptable 0000026B default case
.text:00000288 ; ---------------------------------------------------------------------------
.text:00000288
.text:00000288 $LN2:                                   ; CODE XREF: _parse_blocksize+83j
.text:00000288                                         ; DATA XREF: .text:$LN16o
.text:00000288                 mov     ecx, [ebp+var_10] ; jumptable 0000026B cases 0,32
.text:0000028B                 shl     ecx, 1Eh
.text:0000028E                 mov     [ebp+var_10], ecx
.text:00000291
.text:00000291 $LN9:                                   ; CODE XREF: _parse_blocksize+37j
.text:00000291                                         ; _parse_blocksize+77j ...
.text:00000291                 mov     eax, [ebp+var_10] ; jumptable 0000026B default case
.text:00000294                 push    edx
.text:00000295                 mov     ecx, ebp
.text:00000297                 push    eax
.text:00000298                 lea     edx, $LN15
.text:0000029E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002A3                 pop     eax
.text:000002A4                 pop     edx
.text:000002A5                 add     esp, 14h
.text:000002A8                 cmp     ebp, esp
.text:000002AA                 call    __RTC_CheckEsp
.text:000002AF                 mov     esp, ebp
.text:000002B1                 pop     ebp
.text:000002B2                 retn
.text:000002B2 _parse_blocksize endp
.text:000002B2
.text:000002B2 ; ---------------------------------------------------------------------------
.text:000002B3                 align 4
.text:000002B4 $LN15           dd 1                    ; DATA XREF: _parse_blocksize+B0o
.text:000002B8                 dd offset $LN14
.text:000002BC $LN14           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000002B8o
.text:000002C4                 dd offset $LN13
.text:000002C8 $LN13           dd 667573h              ; DATA XREF: .text:000002C4o
.text:000002CC $LN16           dd offset $LN2          ; DATA XREF: _parse_blocksize+83r
.text:000002CC                 dd offset $LN4          ; jump table for switch statement
.text:000002CC                 dd offset $LN3
.text:000002CC                 dd offset $LN9
.text:000002DC $LN12           db      0,     3,     3,     3
.text:000002DC                                         ; DATA XREF: _parse_blocksize+7Cr
.text:000002DC                 db      1,     3,     2,     3 ; indirect table for switch statement
.text:000002DC                 db      3,     3,     3,     3
.text:000002DC                 db      3,     3,     3,     3
.text:000002DC                 db      3,     3,     3,     3
.text:000002DC                 db      3,     3,     3,     3
.text:000002DC                 db      3,     3,     3,     3
.text:000002DC                 db      3,     3,     3,     3
.text:000002DC                 db      0,     3,     3,     3
.text:000002DC                 db      1,     3,     2
.text:00000303                 align 8
.text:00000308
.text:00000308 ; =============== S U B R O U T I N E =======================================
.text:00000308
.text:00000308 ; Attributes: bp-based frame
.text:00000308
.text:00000308 ; int __cdecl ctrlparse(char *Str, char **EndPtr)
.text:00000308                 public _ctrlparse
.text:00000308 _ctrlparse      proc near
.text:00000308
.text:00000308 var_4           = dword ptr -4
.text:00000308 Str             = dword ptr  8
.text:00000308 EndPtr          = dword ptr  0Ch
.text:00000308
.text:00000308                 push    ebp
.text:00000309                 mov     ebp, esp
.text:0000030B                 push    ecx
.text:0000030C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000313                 mov     byte ptr [ebp+var_4+3], 0
.text:00000317                 mov     eax, [ebp+Str]
.text:0000031A                 movsx   ecx, byte ptr [eax]
.text:0000031D                 cmp     ecx, 5Eh ; '^'
.text:00000320                 jz      short loc_330
.text:00000322                 mov     edx, [ebp+EndPtr]
.text:00000325                 mov     dword ptr [edx], 0
.text:0000032B                 jmp     loc_442
.text:00000330 ; ---------------------------------------------------------------------------
.text:00000330
.text:00000330 loc_330:                                ; CODE XREF: _ctrlparse+18j
.text:00000330                 mov     eax, [ebp+Str]
.text:00000333                 add     eax, 1
.text:00000336                 mov     [ebp+Str], eax
.text:00000339                 mov     ecx, [ebp+Str]
.text:0000033C                 movsx   edx, byte ptr [ecx]
.text:0000033F                 test    edx, edx
.text:00000341                 jnz     short loc_351
.text:00000343                 mov     eax, [ebp+EndPtr]
.text:00000346                 mov     dword ptr [eax], 0
.text:0000034C                 jmp     loc_442
.text:00000351 ; ---------------------------------------------------------------------------
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: _ctrlparse+39j
.text:00000351                 mov     ecx, [ebp+Str]
.text:00000354                 movsx   edx, byte ptr [ecx]
.text:00000357                 cmp     edx, 3Ch ; '<'
.text:0000035A                 jnz     short loc_3B2
.text:0000035C                 mov     eax, [ebp+Str]
.text:0000035F                 add     eax, 1
.text:00000362                 mov     [ebp+Str], eax
.text:00000365                 push    0               ; Radix
.text:00000367                 mov     ecx, [ebp+EndPtr]
.text:0000036A                 push    ecx             ; EndPtr
.text:0000036B                 mov     edx, [ebp+Str]
.text:0000036E                 push    edx             ; Str
.text:0000036F                 call    _strtol
.text:00000374                 add     esp, 0Ch
.text:00000377                 mov     byte ptr [ebp+var_4+3], al
.text:0000037A                 mov     eax, [ebp+EndPtr]
.text:0000037D                 mov     ecx, [eax]
.text:0000037F                 cmp     ecx, [ebp+Str]
.text:00000382                 jz      short loc_391
.text:00000384                 mov     edx, [ebp+EndPtr]
.text:00000387                 mov     eax, [edx]
.text:00000389                 movsx   ecx, byte ptr [eax]
.text:0000038C                 cmp     ecx, 3Eh ; '>'
.text:0000038F                 jz      short loc_3A0
.text:00000391
.text:00000391 loc_391:                                ; CODE XREF: _ctrlparse+7Aj
.text:00000391                 mov     byte ptr [ebp+var_4+3], 0
.text:00000395                 mov     edx, [ebp+EndPtr]
.text:00000398                 mov     dword ptr [edx], 0
.text:0000039E                 jmp     short loc_3AD
.text:000003A0 ; ---------------------------------------------------------------------------
.text:000003A0
.text:000003A0 loc_3A0:                                ; CODE XREF: _ctrlparse+87j
.text:000003A0                 mov     eax, [ebp+EndPtr]
.text:000003A3                 mov     ecx, [eax]
.text:000003A5                 add     ecx, 1
.text:000003A8                 mov     edx, [ebp+EndPtr]
.text:000003AB                 mov     [edx], ecx
.text:000003AD
.text:000003AD loc_3AD:                                ; CODE XREF: _ctrlparse+96j
.text:000003AD                 jmp     loc_442
.text:000003B2 ; ---------------------------------------------------------------------------
.text:000003B2
.text:000003B2 loc_3B2:                                ; CODE XREF: _ctrlparse+52j
.text:000003B2                 mov     eax, [ebp+Str]
.text:000003B5                 movsx   ecx, byte ptr [eax]
.text:000003B8                 cmp     ecx, 61h ; 'a'
.text:000003BB                 jl      short loc_3E1
.text:000003BD                 mov     edx, [ebp+Str]
.text:000003C0                 movsx   eax, byte ptr [edx]
.text:000003C3                 cmp     eax, 7Ah ; 'z'
.text:000003C6                 jg      short loc_3E1
.text:000003C8                 mov     ecx, [ebp+Str]
.text:000003CB                 movsx   edx, byte ptr [ecx]
.text:000003CE                 sub     edx, 60h ; '`'
.text:000003D1                 mov     byte ptr [ebp+var_4+3], dl
.text:000003D4                 mov     eax, [ebp+Str]
.text:000003D7                 add     eax, 1
.text:000003DA                 mov     ecx, [ebp+EndPtr]
.text:000003DD                 mov     [ecx], eax
.text:000003DF                 jmp     short loc_442
.text:000003E1 ; ---------------------------------------------------------------------------
.text:000003E1
.text:000003E1 loc_3E1:                                ; CODE XREF: _ctrlparse+B3j
.text:000003E1                                         ; _ctrlparse+BEj
.text:000003E1                 mov     edx, [ebp+Str]
.text:000003E4                 movsx   eax, byte ptr [edx]
.text:000003E7                 cmp     eax, 40h ; '@'
.text:000003EA                 jl      short loc_3F7
.text:000003EC                 mov     ecx, [ebp+Str]
.text:000003EF                 movsx   edx, byte ptr [ecx]
.text:000003F2                 cmp     edx, 5Fh ; '_'
.text:000003F5                 jle     short loc_40F
.text:000003F7
.text:000003F7 loc_3F7:                                ; CODE XREF: _ctrlparse+E2j
.text:000003F7                 mov     eax, [ebp+Str]
.text:000003FA                 movsx   ecx, byte ptr [eax]
.text:000003FD                 cmp     ecx, 3Fh ; '?'
.text:00000400                 jz      short loc_40F
.text:00000402                 mov     edx, [ebp+Str]
.text:00000405                 movsx   eax, byte ptr [edx]
.text:00000408                 and     eax, 80h
.text:0000040D                 jz      short loc_428
.text:0000040F
.text:0000040F loc_40F:                                ; CODE XREF: _ctrlparse+EDj
.text:0000040F                                         ; _ctrlparse+F8j
.text:0000040F                 mov     ecx, [ebp+Str]
.text:00000412                 movsx   edx, byte ptr [ecx]
.text:00000415                 xor     edx, 40h
.text:00000418                 mov     byte ptr [ebp+var_4+3], dl
.text:0000041B                 mov     eax, [ebp+Str]
.text:0000041E                 add     eax, 1
.text:00000421                 mov     ecx, [ebp+EndPtr]
.text:00000424                 mov     [ecx], eax
.text:00000426                 jmp     short loc_442
.text:00000428 ; ---------------------------------------------------------------------------
.text:00000428
.text:00000428 loc_428:                                ; CODE XREF: _ctrlparse+105j
.text:00000428                 mov     edx, [ebp+Str]
.text:0000042B                 movsx   eax, byte ptr [edx]
.text:0000042E                 cmp     eax, 7Eh ; '~'
.text:00000431                 jnz     short loc_442
.text:00000433                 mov     byte ptr [ebp+var_4+3], 5Eh ; '^'
.text:00000437                 mov     ecx, [ebp+Str]
.text:0000043A                 add     ecx, 1
.text:0000043D                 mov     edx, [ebp+EndPtr]
.text:00000440                 mov     [edx], ecx
.text:00000442
.text:00000442 loc_442:                                ; CODE XREF: _ctrlparse+23j
.text:00000442                                         ; _ctrlparse+44j ...
.text:00000442                 mov     al, byte ptr [ebp+var_4+3]
.text:00000445                 add     esp, 4
.text:00000448                 cmp     ebp, esp
.text:0000044A                 call    __RTC_CheckEsp
.text:0000044F                 mov     esp, ebp
.text:00000451                 pop     ebp
.text:00000452                 retn
.text:00000452 _ctrlparse      endp
.text:00000452
.text:00000452 ; ---------------------------------------------------------------------------
.text:00000453                 align 8
.text:00000458
.text:00000458 ; =============== S U B R O U T I N E =======================================
.text:00000458
.text:00000458 ; Attributes: bp-based frame
.text:00000458
.text:00000458 ; int __cdecl host_strcspn(char *Str, char *)
.text:00000458                 public _host_strcspn
.text:00000458 _host_strcspn   proc near
.text:00000458
.text:00000458 var_4           = dword ptr -4
.text:00000458 Str             = dword ptr  8
.text:00000458 arg_4           = dword ptr  0Ch
.text:00000458
.text:00000458                 push    ebp
.text:00000459                 mov     ebp, esp
.text:0000045B                 push    ecx
.text:0000045C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000463                 push    1               ; int
.text:00000465                 mov     eax, [ebp+arg_4]
.text:00000468                 push    eax             ; Str
.text:00000469                 mov     ecx, [ebp+Str]
.text:0000046C                 push    ecx             ; int
.text:0000046D                 call    _host_strchr_internal
.text:00000472                 add     esp, 0Ch
.text:00000475                 mov     [ebp+var_4], eax
.text:00000478                 cmp     [ebp+var_4], 0
.text:0000047C                 jz      short loc_488
.text:0000047E                 mov     eax, [ebp+var_4]
.text:00000481                 sub     eax, [ebp+Str]
.text:00000484                 jmp     short loc_494
.text:00000486 ; ---------------------------------------------------------------------------
.text:00000486                 jmp     short loc_494
.text:00000488 ; ---------------------------------------------------------------------------
.text:00000488
.text:00000488 loc_488:                                ; CODE XREF: _host_strcspn+24j
.text:00000488                 mov     edx, [ebp+Str]
.text:0000048B                 push    edx             ; Str
.text:0000048C                 call    _strlen
.text:00000491                 add     esp, 4
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: _host_strcspn+2Cj
.text:00000494                                         ; _host_strcspn+2Ej
.text:00000494                 add     esp, 4
.text:00000497                 cmp     ebp, esp
.text:00000499                 call    __RTC_CheckEsp
.text:0000049E                 mov     esp, ebp
.text:000004A0                 pop     ebp
.text:000004A1                 retn
.text:000004A1 _host_strcspn   endp
.text:000004A1
.text:000004A1 ; ---------------------------------------------------------------------------
.text:000004A2                 align 8
.text:000004A8
.text:000004A8 ; =============== S U B R O U T I N E =======================================
.text:000004A8
.text:000004A8 ; Attributes: bp-based frame
.text:000004A8
.text:000004A8 ; int __cdecl host_strchr_internal(int, char *Str, int)
.text:000004A8 _host_strchr_internal proc near         ; CODE XREF: _host_strcspn+15p
.text:000004A8                                         ; _host_strchr+2Fp ...
.text:000004A8
.text:000004A8 var_8           = dword ptr -8
.text:000004A8 var_4           = dword ptr -4
.text:000004A8 arg_0           = dword ptr  8
.text:000004A8 Str             = dword ptr  0Ch
.text:000004A8 arg_8           = dword ptr  10h
.text:000004A8
.text:000004A8                 push    ebp
.text:000004A9                 mov     ebp, esp
.text:000004AB                 sub     esp, 8
.text:000004AE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004BC                 mov     [ebp+var_4], 0
.text:000004C3                 mov     [ebp+var_8], 0
.text:000004CA
.text:000004CA loc_4CA:                                ; CODE XREF: _host_strchr_internal+B4j
.text:000004CA                 mov     eax, 1
.text:000004CF                 test    eax, eax
.text:000004D1                 jz      loc_561
.text:000004D7                 mov     ecx, [ebp+arg_0]
.text:000004DA                 movsx   edx, byte ptr [ecx]
.text:000004DD                 test    edx, edx
.text:000004DF                 jnz     short loc_4E6
.text:000004E1                 mov     eax, [ebp+var_8]
.text:000004E4                 jmp     short loc_561
.text:000004E6 ; ---------------------------------------------------------------------------
.text:000004E6
.text:000004E6 loc_4E6:                                ; CODE XREF: _host_strchr_internal+37j
.text:000004E6                 mov     eax, [ebp+arg_0]
.text:000004E9                 movsx   ecx, byte ptr [eax]
.text:000004EC                 cmp     ecx, 5Bh ; '['
.text:000004EF                 jnz     short loc_4FC
.text:000004F1                 mov     edx, [ebp+var_4]
.text:000004F4                 add     edx, 1
.text:000004F7                 mov     [ebp+var_4], edx
.text:000004FA                 jmp     short loc_553
.text:000004FC ; ---------------------------------------------------------------------------
.text:000004FC
.text:000004FC loc_4FC:                                ; CODE XREF: _host_strchr_internal+47j
.text:000004FC                 mov     eax, [ebp+arg_0]
.text:000004FF                 movsx   ecx, byte ptr [eax]
.text:00000502                 cmp     ecx, 5Dh ; ']'
.text:00000505                 jnz     short loc_518
.text:00000507                 cmp     [ebp+var_4], 0
.text:0000050B                 jle     short loc_518
.text:0000050D                 mov     edx, [ebp+var_4]
.text:00000510                 sub     edx, 1
.text:00000513                 mov     [ebp+var_4], edx
.text:00000516                 jmp     short loc_553
.text:00000518 ; ---------------------------------------------------------------------------
.text:00000518
.text:00000518 loc_518:                                ; CODE XREF: _host_strchr_internal+5Dj
.text:00000518                                         ; _host_strchr_internal+63j
.text:00000518                 cmp     [ebp+var_4], 0
.text:0000051C                 jz      short loc_52B
.text:0000051E                 mov     eax, [ebp+arg_0]
.text:00000521                 movsx   ecx, byte ptr [eax]
.text:00000524                 cmp     ecx, 3Ah ; ':'
.text:00000527                 jnz     short loc_52B
.text:00000529                 jmp     short loc_553
.text:0000052B ; ---------------------------------------------------------------------------
.text:0000052B
.text:0000052B loc_52B:                                ; CODE XREF: _host_strchr_internal+74j
.text:0000052B                                         ; _host_strchr_internal+7Fj
.text:0000052B                 mov     edx, [ebp+arg_0]
.text:0000052E                 movsx   eax, byte ptr [edx]
.text:00000531                 push    eax             ; Val
.text:00000532                 mov     ecx, [ebp+Str]
.text:00000535                 push    ecx             ; Str
.text:00000536                 call    _strchr
.text:0000053B                 add     esp, 8
.text:0000053E                 test    eax, eax
.text:00000540                 jz      short loc_553
.text:00000542                 mov     edx, [ebp+arg_0]
.text:00000545                 mov     [ebp+var_8], edx
.text:00000548                 cmp     [ebp+arg_8], 0
.text:0000054C                 jz      short loc_553
.text:0000054E                 mov     eax, [ebp+var_8]
.text:00000551                 jmp     short loc_561
.text:00000553 ; ---------------------------------------------------------------------------
.text:00000553
.text:00000553 loc_553:                                ; CODE XREF: _host_strchr_internal+52j
.text:00000553                                         ; _host_strchr_internal+6Ej ...
.text:00000553                 mov     eax, [ebp+arg_0]
.text:00000556                 add     eax, 1
.text:00000559                 mov     [ebp+arg_0], eax
.text:0000055C                 jmp     loc_4CA
.text:00000561 ; ---------------------------------------------------------------------------
.text:00000561
.text:00000561 loc_561:                                ; CODE XREF: _host_strchr_internal+29j
.text:00000561                                         ; _host_strchr_internal+3Cj ...
.text:00000561                 add     esp, 8
.text:00000564                 cmp     ebp, esp
.text:00000566                 call    __RTC_CheckEsp
.text:0000056B                 mov     esp, ebp
.text:0000056D                 pop     ebp
.text:0000056E                 retn
.text:0000056E _host_strchr_internal endp
.text:0000056E
.text:0000056E ; ---------------------------------------------------------------------------
.text:0000056F                 db 9 dup(0CCh)
.text:00000578
.text:00000578 ; =============== S U B R O U T I N E =======================================
.text:00000578
.text:00000578 ; Attributes: bp-based frame
.text:00000578
.text:00000578                 public _host_strchr
.text:00000578 _host_strchr    proc near
.text:00000578
.text:00000578 var_C           = dword ptr -0Ch
.text:00000578 Str             = byte ptr -8
.text:00000578 var_4           = dword ptr -4
.text:00000578 arg_0           = dword ptr  8
.text:00000578 arg_4           = byte ptr  0Ch
.text:00000578
.text:00000578                 push    ebp
.text:00000579                 mov     ebp, esp
.text:0000057B                 sub     esp, 0Ch
.text:0000057E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000585                 mov     dword ptr [ebp+Str], 0CCCCCCCCh
.text:0000058C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000593                 mov     al, [ebp+arg_4]
.text:00000596                 mov     [ebp+Str], al
.text:00000599                 mov     [ebp+Str+1], 0
.text:0000059D                 push    1               ; int
.text:0000059F                 lea     ecx, [ebp+Str]
.text:000005A2                 push    ecx             ; Str
.text:000005A3                 mov     edx, [ebp+arg_0]
.text:000005A6                 push    edx             ; int
.text:000005A7                 call    _host_strchr_internal
.text:000005AC                 add     esp, 0Ch
.text:000005AF                 push    edx
.text:000005B0                 mov     ecx, ebp
.text:000005B2                 push    eax
.text:000005B3                 lea     edx, $LN5
.text:000005B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005BE                 pop     eax
.text:000005BF                 pop     edx
.text:000005C0                 add     esp, 0Ch
.text:000005C3                 cmp     ebp, esp
.text:000005C5                 call    __RTC_CheckEsp
.text:000005CA                 mov     esp, ebp
.text:000005CC                 pop     ebp
.text:000005CD                 retn
.text:000005CD _host_strchr    endp
.text:000005CD
.text:000005CD ; ---------------------------------------------------------------------------
.text:000005CE                 align 10h
.text:000005D0 $LN5            dd 1                    ; DATA XREF: _host_strchr+3Bo
.text:000005D4                 dd offset $LN4_0
.text:000005D8 $LN4_0          dd 0FFFFFFF8h, 2        ; DATA XREF: .text:000005D4o
.text:000005E0                 dd offset $LN3_0
.text:000005E4 $LN3_0          dd 746573h              ; DATA XREF: .text:000005E0o
.text:000005E8
.text:000005E8 ; =============== S U B R O U T I N E =======================================
.text:000005E8
.text:000005E8 ; Attributes: bp-based frame
.text:000005E8
.text:000005E8                 public _host_strrchr
.text:000005E8 _host_strrchr   proc near
.text:000005E8
.text:000005E8 var_C           = dword ptr -0Ch
.text:000005E8 Str             = byte ptr -8
.text:000005E8 var_4           = dword ptr -4
.text:000005E8 arg_0           = dword ptr  8
.text:000005E8 arg_4           = byte ptr  0Ch
.text:000005E8
.text:000005E8                 push    ebp
.text:000005E9                 mov     ebp, esp
.text:000005EB                 sub     esp, 0Ch
.text:000005EE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000005F5                 mov     dword ptr [ebp+Str], 0CCCCCCCCh
.text:000005FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000603                 mov     al, [ebp+arg_4]
.text:00000606                 mov     [ebp+Str], al
.text:00000609                 mov     [ebp+Str+1], 0
.text:0000060D                 push    0               ; int
.text:0000060F                 lea     ecx, [ebp+Str]
.text:00000612                 push    ecx             ; Str
.text:00000613                 mov     edx, [ebp+arg_0]
.text:00000616                 push    edx             ; int
.text:00000617                 call    _host_strchr_internal
.text:0000061C                 add     esp, 0Ch
.text:0000061F                 push    edx
.text:00000620                 mov     ecx, ebp
.text:00000622                 push    eax
.text:00000623                 lea     edx, $LN5_0
.text:00000629                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000062E                 pop     eax
.text:0000062F                 pop     edx
.text:00000630                 add     esp, 0Ch
.text:00000633                 cmp     ebp, esp
.text:00000635                 call    __RTC_CheckEsp
.text:0000063A                 mov     esp, ebp
.text:0000063C                 pop     ebp
.text:0000063D                 retn
.text:0000063D _host_strrchr   endp
.text:0000063D
.text:0000063D ; ---------------------------------------------------------------------------
.text:0000063E                 align 10h
.text:00000640 $LN5_0          dd 1                    ; DATA XREF: _host_strrchr+3Bo
.text:00000644                 dd offset $LN4_1
.text:00000648 $LN4_1          dd 0FFFFFFF8h, 2        ; DATA XREF: .text:00000644o
.text:00000650                 dd offset $LN3_1
.text:00000654 ; ---------------------------------------------------------------------------
.text:00000654
.text:00000654 $LN3_1:                                 ; DATA XREF: .text:00000650o
.text:00000654                 jnb     short loc_6BB
.text:00000656                 jz      short $+2
.text:00000658
.text:00000658 ; =============== S U B R O U T I N E =======================================
.text:00000658
.text:00000658 ; Attributes: bp-based frame
.text:00000658
.text:00000658 ; int __cdecl host_strduptrim(char *Str)
.text:00000658                 public _host_strduptrim
.text:00000658 _host_strduptrim proc near              ; CODE XREF: .text:00000656j
.text:00000658
.text:00000658 var_8           = dword ptr -8
.text:00000658 var_4           = dword ptr -4
.text:00000658 Str             = dword ptr  8
.text:00000658
.text:00000658                 push    ebp
.text:00000659                 mov     ebp, esp
.text:0000065B                 sub     esp, 8
.text:0000065E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000665                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000066C                 mov     eax, [ebp+Str]
.text:0000066F                 movsx   ecx, byte ptr [eax]
.text:00000672                 cmp     ecx, 5Bh ; '['
.text:00000675                 jnz     loc_716
.text:0000067B                 mov     edx, [ebp+Str]
.text:0000067E                 add     edx, 1
.text:00000681                 mov     [ebp+var_4], edx
.text:00000684                 mov     [ebp+var_8], 0
.text:0000068B
.text:0000068B loc_68B:                                ; CODE XREF: _host_strduptrim+7Ej
.text:0000068B                 mov     eax, [ebp+var_4]
.text:0000068E                 movsx   ecx, byte ptr [eax]
.text:00000691                 test    ecx, ecx
.text:00000693                 jz      short loc_6D8
.text:00000695                 mov     edx, [ebp+var_4]
.text:00000698                 movsx   eax, byte ptr [edx]
.text:0000069B                 cmp     eax, 5Dh ; ']'
.text:0000069E                 jz      short loc_6D8
.text:000006A0                 mov     ecx, [ebp+var_4]
.text:000006A3                 movzx   edx, byte ptr [ecx]
.text:000006A6                 push    edx             ; C
.text:000006A7                 call    _isxdigit
.text:000006AC                 add     esp, 4
.text:000006AF                 test    eax, eax
.text:000006B1                 jz      short loc_6B5
.text:000006B3                 jmp     short loc_6CD
.text:000006B5 ; ---------------------------------------------------------------------------
.text:000006B5
.text:000006B5 loc_6B5:                                ; CODE XREF: _host_strduptrim+59j
.text:000006B5                 mov     eax, [ebp+var_4]
.text:000006B8                 movsx   ecx, byte ptr [eax]
.text:000006BB
.text:000006BB loc_6BB:                                ; CODE XREF: .text:$LN3_1j
.text:000006BB                 cmp     ecx, 3Ah ; ':'
.text:000006BE                 jnz     short loc_6CB
.text:000006C0                 mov     edx, [ebp+var_8]
.text:000006C3                 add     edx, 1
.text:000006C6                 mov     [ebp+var_8], edx
.text:000006C9                 jmp     short loc_6CD
.text:000006CB ; ---------------------------------------------------------------------------
.text:000006CB
.text:000006CB loc_6CB:                                ; CODE XREF: _host_strduptrim+66j
.text:000006CB                 jmp     short loc_6D8
.text:000006CD ; ---------------------------------------------------------------------------
.text:000006CD
.text:000006CD loc_6CD:                                ; CODE XREF: _host_strduptrim+5Bj
.text:000006CD                                         ; _host_strduptrim+71j
.text:000006CD                 mov     eax, [ebp+var_4]
.text:000006D0                 add     eax, 1
.text:000006D3                 mov     [ebp+var_4], eax
.text:000006D6                 jmp     short loc_68B
.text:000006D8 ; ---------------------------------------------------------------------------
.text:000006D8
.text:000006D8 loc_6D8:                                ; CODE XREF: _host_strduptrim+3Bj
.text:000006D8                                         ; _host_strduptrim+46j ...
.text:000006D8                 mov     ecx, [ebp+var_4]
.text:000006DB                 movsx   edx, byte ptr [ecx]
.text:000006DE                 cmp     edx, 5Dh ; ']'
.text:000006E1                 jnz     short loc_716
.text:000006E3                 mov     eax, [ebp+var_4]
.text:000006E6                 movsx   ecx, byte ptr [eax+1]
.text:000006EA                 test    ecx, ecx
.text:000006EC                 jnz     short loc_716
.text:000006EE                 cmp     [ebp+var_8], 1
.text:000006F2                 jle     short loc_716
.text:000006F4                 mov     edx, [ebp+Str]
.text:000006F7                 add     edx, 1
.text:000006FA                 push    edx
.text:000006FB                 mov     eax, [ebp+Str]
.text:000006FE                 add     eax, 1
.text:00000701                 mov     ecx, [ebp+var_4]
.text:00000704                 sub     ecx, eax
.text:00000706                 push    ecx             ; char
.text:00000707                 push    offset $SG85650 ; "%.*s"
.text:0000070C                 call    _dupprintf
.text:00000711                 add     esp, 0Ch
.text:00000714                 jmp     short loc_722
.text:00000716 ; ---------------------------------------------------------------------------
.text:00000716
.text:00000716 loc_716:                                ; CODE XREF: _host_strduptrim+1Dj
.text:00000716                                         ; _host_strduptrim+89j ...
.text:00000716                 mov     edx, [ebp+Str]
.text:00000719                 push    edx             ; Str
.text:0000071A                 call    _dupstr
.text:0000071F                 add     esp, 4
.text:00000722
.text:00000722 loc_722:                                ; CODE XREF: _host_strduptrim+BCj
.text:00000722                 add     esp, 8
.text:00000725                 cmp     ebp, esp
.text:00000727                 call    __RTC_CheckEsp
.text:0000072C                 mov     esp, ebp
.text:0000072E                 pop     ebp
.text:0000072F                 retn
.text:0000072F _host_strduptrim endp
.text:0000072F
.text:0000072F ; ---------------------------------------------------------------------------
.text:00000730                 db 8 dup(0CCh)
.text:00000738
.text:00000738 ; =============== S U B R O U T I N E =======================================
.text:00000738
.text:00000738 ; Attributes: bp-based frame
.text:00000738
.text:00000738                 public _new_prompts
.text:00000738 _new_prompts    proc near
.text:00000738
.text:00000738 var_4           = dword ptr -4
.text:00000738 arg_0           = dword ptr  8
.text:00000738
.text:00000738                 push    ebp
.text:00000739                 mov     ebp, esp
.text:0000073B                 push    ecx
.text:0000073C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000743                 push    24h ; '$'       ; Size
.text:00000745                 push    1               ; int
.text:00000747                 call    _safemalloc
.text:0000074C                 add     esp, 8
.text:0000074F                 mov     [ebp+var_4], eax
.text:00000752                 mov     eax, [ebp+var_4]
.text:00000755                 mov     dword ptr [eax+18h], 0
.text:0000075C                 mov     ecx, [ebp+var_4]
.text:0000075F                 mov     dword ptr [ecx+14h], 0
.text:00000766                 mov     edx, [ebp+var_4]
.text:00000769                 mov     eax, [ebp+arg_0]
.text:0000076C                 mov     [edx+1Ch], eax
.text:0000076F                 mov     ecx, [ebp+var_4]
.text:00000772                 mov     dword ptr [ecx+20h], 0
.text:00000779                 mov     edx, [ebp+var_4]
.text:0000077C                 mov     dword ptr [edx], 1
.text:00000782                 mov     eax, [ebp+var_4]
.text:00000785                 mov     dword ptr [eax+0Ch], 0
.text:0000078C                 mov     ecx, [ebp+var_4]
.text:0000078F                 mov     dword ptr [ecx+4], 0
.text:00000796                 mov     edx, [ebp+var_4]
.text:00000799                 mov     dword ptr [edx+10h], 0
.text:000007A0                 mov     eax, [ebp+var_4]
.text:000007A3                 mov     dword ptr [eax+8], 0
.text:000007AA                 mov     eax, [ebp+var_4]
.text:000007AD                 add     esp, 4
.text:000007B0                 cmp     ebp, esp
.text:000007B2                 call    __RTC_CheckEsp
.text:000007B7                 mov     esp, ebp
.text:000007B9                 pop     ebp
.text:000007BA                 retn
.text:000007BA _new_prompts    endp
.text:000007BA
.text:000007BA ; ---------------------------------------------------------------------------
.text:000007BB                 db 0Dh dup(0CCh)
.text:000007C8
.text:000007C8 ; =============== S U B R O U T I N E =======================================
.text:000007C8
.text:000007C8 ; Attributes: bp-based frame
.text:000007C8
.text:000007C8                 public _add_prompt
.text:000007C8 _add_prompt     proc near
.text:000007C8
.text:000007C8 var_4           = dword ptr -4
.text:000007C8 arg_0           = dword ptr  8
.text:000007C8 arg_4           = dword ptr  0Ch
.text:000007C8 arg_8           = dword ptr  10h
.text:000007C8
.text:000007C8                 push    ebp
.text:000007C9                 mov     ebp, esp
.text:000007CB                 push    ecx
.text:000007CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007D3                 push    10h             ; Size
.text:000007D5                 push    1               ; int
.text:000007D7                 call    _safemalloc
.text:000007DC                 add     esp, 8
.text:000007DF                 mov     [ebp+var_4], eax
.text:000007E2                 mov     eax, [ebp+var_4]
.text:000007E5                 mov     ecx, [ebp+arg_4]
.text:000007E8                 mov     [eax], ecx
.text:000007EA                 mov     edx, [ebp+var_4]
.text:000007ED                 mov     eax, [ebp+arg_8]
.text:000007F0                 mov     [edx+4], eax
.text:000007F3                 mov     ecx, [ebp+var_4]
.text:000007F6                 mov     dword ptr [ecx+8], 0
.text:000007FD                 mov     edx, [ebp+var_4]
.text:00000800                 mov     dword ptr [edx+0Ch], 0
.text:00000807                 mov     eax, [ebp+arg_0]
.text:0000080A                 mov     ecx, [eax+14h]
.text:0000080D                 add     ecx, 1
.text:00000810                 mov     edx, [ebp+arg_0]
.text:00000813                 mov     [edx+14h], ecx
.text:00000816                 push    4               ; Size
.text:00000818                 mov     eax, [ebp+arg_0]
.text:0000081B                 mov     ecx, [eax+14h]
.text:0000081E                 push    ecx             ; int
.text:0000081F                 mov     edx, [ebp+arg_0]
.text:00000822                 mov     eax, [edx+18h]
.text:00000825                 push    eax             ; Memory
.text:00000826                 call    _saferealloc
.text:0000082B                 add     esp, 0Ch
.text:0000082E                 mov     ecx, [ebp+arg_0]
.text:00000831                 mov     [ecx+18h], eax
.text:00000834                 mov     edx, [ebp+arg_0]
.text:00000837                 mov     eax, [edx+14h]
.text:0000083A                 mov     ecx, [ebp+arg_0]
.text:0000083D                 mov     edx, [ecx+18h]
.text:00000840                 mov     ecx, [ebp+var_4]
.text:00000843                 mov     [edx+eax*4-4], ecx
.text:00000847                 add     esp, 4
.text:0000084A                 cmp     ebp, esp
.text:0000084C                 call    __RTC_CheckEsp
.text:00000851                 mov     esp, ebp
.text:00000853                 pop     ebp
.text:00000854                 retn
.text:00000854 _add_prompt     endp
.text:00000854
.text:00000854 ; ---------------------------------------------------------------------------
.text:00000855                 align 4
.text:00000858
.text:00000858 ; =============== S U B R O U T I N E =======================================
.text:00000858
.text:00000858 ; Attributes: bp-based frame
.text:00000858
.text:00000858                 public _prompt_ensure_result_size
.text:00000858 _prompt_ensure_result_size proc near    ; CODE XREF: _prompt_set_result+17p
.text:00000858
.text:00000858 Dst             = dword ptr -4
.text:00000858 arg_0           = dword ptr  8
.text:00000858 arg_4           = dword ptr  0Ch
.text:00000858
.text:00000858                 push    ebp
.text:00000859                 mov     ebp, esp
.text:0000085B                 push    ecx
.text:0000085C                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00000863                 mov     eax, [ebp+arg_0]
.text:00000866                 mov     ecx, [eax+0Ch]
.text:00000869                 cmp     ecx, [ebp+arg_4]
.text:0000086C                 jge     short loc_8E7
.text:0000086E                 mov     eax, [ebp+arg_4]
.text:00000871                 imul    eax, 5
.text:00000874                 cdq
.text:00000875                 and     edx, 3
.text:00000878                 add     eax, edx
.text:0000087A                 sar     eax, 2
.text:0000087D                 add     eax, 200h
.text:00000882                 mov     [ebp+arg_4], eax
.text:00000885                 push    1               ; Size
.text:00000887                 mov     edx, [ebp+arg_4]
.text:0000088A                 push    edx             ; int
.text:0000088B                 call    _safemalloc
.text:00000890                 add     esp, 8
.text:00000893                 mov     [ebp+Dst], eax
.text:00000896                 mov     eax, [ebp+arg_0]
.text:00000899                 mov     ecx, [eax+0Ch]
.text:0000089C                 push    ecx             ; Size
.text:0000089D                 mov     edx, [ebp+arg_0]
.text:000008A0                 mov     eax, [edx+8]
.text:000008A3                 push    eax             ; Src
.text:000008A4                 mov     ecx, [ebp+Dst]
.text:000008A7                 push    ecx             ; Dst
.text:000008A8                 call    _memcpy
.text:000008AD                 add     esp, 0Ch
.text:000008B0                 mov     edx, [ebp+arg_0]
.text:000008B3                 mov     eax, [edx+0Ch]
.text:000008B6                 push    eax
.text:000008B7                 mov     ecx, [ebp+arg_0]
.text:000008BA                 mov     edx, [ecx+8]
.text:000008BD                 push    edx
.text:000008BE                 call    _smemclr
.text:000008C3                 add     esp, 8
.text:000008C6                 mov     eax, [ebp+arg_0]
.text:000008C9                 mov     ecx, [eax+8]
.text:000008CC                 push    ecx             ; Memory
.text:000008CD                 call    _safefree
.text:000008D2                 add     esp, 4
.text:000008D5                 mov     edx, [ebp+arg_0]
.text:000008D8                 mov     eax, [ebp+Dst]
.text:000008DB                 mov     [edx+8], eax
.text:000008DE                 mov     ecx, [ebp+arg_0]
.text:000008E1                 mov     edx, [ebp+arg_4]
.text:000008E4                 mov     [ecx+0Ch], edx
.text:000008E7
.text:000008E7 loc_8E7:                                ; CODE XREF: _prompt_ensure_result_size+14j
.text:000008E7                 add     esp, 4
.text:000008EA                 cmp     ebp, esp
.text:000008EC                 call    __RTC_CheckEsp
.text:000008F1                 mov     esp, ebp
.text:000008F3                 pop     ebp
.text:000008F4                 retn
.text:000008F4 _prompt_ensure_result_size endp
.text:000008F4
.text:000008F4 ; ---------------------------------------------------------------------------
.text:000008F5                 align 4
.text:000008F8
.text:000008F8 ; =============== S U B R O U T I N E =======================================
.text:000008F8
.text:000008F8 ; Attributes: bp-based frame
.text:000008F8
.text:000008F8 ; int __cdecl prompt_set_result(int, char *Str)
.text:000008F8                 public _prompt_set_result
.text:000008F8 _prompt_set_result proc near
.text:000008F8
.text:000008F8 arg_0           = dword ptr  8
.text:000008F8 Str             = dword ptr  0Ch
.text:000008F8
.text:000008F8                 push    ebp
.text:000008F9                 mov     ebp, esp
.text:000008FB                 mov     eax, [ebp+Str]
.text:000008FE                 push    eax             ; Str
.text:000008FF                 call    _strlen
.text:00000904                 add     esp, 4
.text:00000907                 add     eax, 1
.text:0000090A                 push    eax
.text:0000090B                 mov     ecx, [ebp+arg_0]
.text:0000090E                 push    ecx
.text:0000090F                 call    _prompt_ensure_result_size
.text:00000914                 add     esp, 8
.text:00000917                 mov     edx, [ebp+Str]
.text:0000091A                 push    edx             ; Source
.text:0000091B                 mov     eax, [ebp+arg_0]
.text:0000091E
.text:0000091E loc_91E:                                ; DATA XREF: .data:$SG86007o
.text:0000091E                                         ; .data:$SG86008o
.text:0000091E                 mov     ecx, [eax+8]
.text:00000921                 push    ecx             ; Dest
.text:00000922                 call    _strcpy
.text:00000927                 add     esp, 8
.text:0000092A                 cmp     ebp, esp
.text:0000092C                 call    __RTC_CheckEsp
.text:00000931                 pop     ebp
.text:00000932                 retn
.text:00000932 _prompt_set_result endp
.text:00000932
.text:00000932 ; ---------------------------------------------------------------------------
.text:00000933                 align 8
.text:00000938
.text:00000938 ; =============== S U B R O U T I N E =======================================
.text:00000938
.text:00000938 ; Attributes: bp-based frame
.text:00000938
.text:00000938 ; int __cdecl free_prompts(void *)
.text:00000938                 public _free_prompts
.text:00000938 _free_prompts   proc near
.text:00000938
.text:00000938 Memory          = dword ptr -8
.text:00000938 var_4           = dword ptr -4
.text:00000938 arg_0           = dword ptr  8
.text:00000938
.text:00000938                 push    ebp
.text:00000939                 mov     ebp, esp
.text:0000093B                 sub     esp, 8
.text:0000093E                 mov     [ebp+Memory], 0CCCCCCCCh
.text:00000945                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000094C                 mov     [ebp+var_4], 0
.text:00000953                 jmp     short loc_95E
.text:00000955 ; ---------------------------------------------------------------------------
.text:00000955
.text:00000955 loc_955:                                ; CODE XREF: _free_prompts+7Fj
.text:00000955                 mov     eax, [ebp+var_4]
.text:00000958                 add     eax, 1
.text:0000095B                 mov     [ebp+var_4], eax
.text:0000095E
.text:0000095E loc_95E:                                ; CODE XREF: _free_prompts+1Bj
.text:0000095E                 mov     ecx, [ebp+arg_0]
.text:00000961                 mov     edx, [ebp+var_4]
.text:00000964                 cmp     edx, [ecx+14h]
.text:00000967                 jnb     short loc_9B9
.text:00000969                 mov     eax, [ebp+arg_0]
.text:0000096C                 mov     ecx, [eax+18h]
.text:0000096F                 mov     edx, [ebp+var_4]
.text:00000972                 mov     eax, [ecx+edx*4]
.text:00000975                 mov     [ebp+Memory], eax
.text:00000978                 mov     ecx, [ebp+Memory]
.text:0000097B                 mov     edx, [ecx+0Ch]
.text:0000097E                 push    edx
.text:0000097F                 mov     eax, [ebp+Memory]
.text:00000982                 mov     ecx, [eax+8]
.text:00000985                 push    ecx
.text:00000986                 call    _smemclr
.text:0000098B                 add     esp, 8
.text:0000098E                 mov     edx, [ebp+Memory]
.text:00000991                 mov     eax, [edx+8]
.text:00000994                 push    eax             ; Memory
.text:00000995                 call    _safefree
.text:0000099A                 add     esp, 4
.text:0000099D                 mov     ecx, [ebp+Memory]
.text:000009A0                 mov     edx, [ecx]
.text:000009A2                 push    edx             ; Memory
.text:000009A3                 call    _safefree
.text:000009A8                 add     esp, 4
.text:000009AB                 mov     eax, [ebp+Memory]
.text:000009AE                 push    eax             ; Memory
.text:000009AF                 call    _safefree
.text:000009B4                 add     esp, 4
.text:000009B7                 jmp     short loc_955
.text:000009B9 ; ---------------------------------------------------------------------------
.text:000009B9
.text:000009B9 loc_9B9:                                ; CODE XREF: _free_prompts+2Fj
.text:000009B9                 mov     ecx, [ebp+arg_0]
.text:000009BC                 mov     edx, [ecx+18h]
.text:000009BF                 push    edx             ; Memory
.text:000009C0                 call    _safefree
.text:000009C5                 add     esp, 4
.text:000009C8                 mov     eax, [ebp+arg_0]
.text:000009CB                 mov     ecx, [eax+4]
.text:000009CE                 push    ecx             ; Memory
.text:000009CF                 call    _safefree
.text:000009D4                 add     esp, 4
.text:000009D7                 mov     edx, [ebp+arg_0]
.text:000009DA                 mov     eax, [edx+0Ch]
.text:000009DD                 push    eax             ; Memory
.text:000009DE                 call    _safefree
.text:000009E3                 add     esp, 4
.text:000009E6                 mov     ecx, [ebp+arg_0]
.text:000009E9                 push    ecx             ; Memory
.text:000009EA                 call    _safefree
.text:000009EF                 add     esp, 4
.text:000009F2                 add     esp, 8
.text:000009F5                 cmp     ebp, esp
.text:000009F7                 call    __RTC_CheckEsp
.text:000009FC                 mov     esp, ebp
.text:000009FE                 pop     ebp
.text:000009FF                 retn
.text:000009FF _free_prompts   endp
.text:000009FF
.text:000009FF ; ---------------------------------------------------------------------------
.text:00000A00                 db 8 dup(0CCh)
.text:00000A08
.text:00000A08 ; =============== S U B R O U T I N E =======================================
.text:00000A08
.text:00000A08 ; Attributes: bp-based frame
.text:00000A08
.text:00000A08 ; int __cdecl dupstr(char *Str)
.text:00000A08                 public _dupstr
.text:00000A08 _dupstr         proc near               ; CODE XREF: _host_strduptrim+C2p
.text:00000A08
.text:00000A08 var_8           = dword ptr -8
.text:00000A08 Dest            = dword ptr -4
.text:00000A08 Str             = dword ptr  8
.text:00000A08
.text:00000A08                 push    ebp
.text:00000A09                 mov     ebp, esp
.text:00000A0B                 sub     esp, 8
.text:00000A0E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A15                 mov     [ebp+Dest], 0CCCCCCCCh
.text:00000A1C                 mov     [ebp+Dest], 0
.text:00000A23                 cmp     [ebp+Str], 0
.text:00000A27                 jz      short loc_A5C
.text:00000A29                 mov     eax, [ebp+Str]
.text:00000A2C                 push    eax             ; Str
.text:00000A2D                 call    _strlen
.text:00000A32                 add     esp, 4
.text:00000A35                 mov     [ebp+var_8], eax
.text:00000A38                 push    1               ; Size
.text:00000A3A                 mov     ecx, [ebp+var_8]
.text:00000A3D                 add     ecx, 1
.text:00000A40                 push    ecx             ; int
.text:00000A41                 call    _safemalloc
.text:00000A46                 add     esp, 8
.text:00000A49                 mov     [ebp+Dest], eax
.text:00000A4C                 mov     edx, [ebp+Str]
.text:00000A4F                 push    edx             ; Source
.text:00000A50                 mov     eax, [ebp+Dest]
.text:00000A53                 push    eax             ; Dest
.text:00000A54                 call    _strcpy
.text:00000A59                 add     esp, 8
.text:00000A5C
.text:00000A5C loc_A5C:                                ; CODE XREF: _dupstr+1Fj
.text:00000A5C                 mov     eax, [ebp+Dest]
.text:00000A5F                 add     esp, 8
.text:00000A62                 cmp     ebp, esp
.text:00000A64                 call    __RTC_CheckEsp
.text:00000A69                 mov     esp, ebp
.text:00000A6B                 pop     ebp
.text:00000A6C                 retn
.text:00000A6C _dupstr         endp
.text:00000A6C
.text:00000A6C ; ---------------------------------------------------------------------------
.text:00000A6D                 db 0Bh dup(0CCh)
.text:00000A78
.text:00000A78 ; =============== S U B R O U T I N E =======================================
.text:00000A78
.text:00000A78 ; Attributes: bp-based frame
.text:00000A78
.text:00000A78 ; int __cdecl dupcat(char *Str, char)
.text:00000A78                 public _dupcat
.text:00000A78 _dupcat         proc near
.text:00000A78
.text:00000A78 var_14          = dword ptr -14h
.text:00000A78 Source          = dword ptr -10h
.text:00000A78 var_C           = dword ptr -0Ch
.text:00000A78 Dest            = dword ptr -8
.text:00000A78 var_4           = dword ptr -4
.text:00000A78 Str             = dword ptr  8
.text:00000A78 arg_4           = byte ptr  0Ch
.text:00000A78
.text:00000A78                 push    ebp
.text:00000A79                 mov     ebp, esp
.text:00000A7B                 sub     esp, 14h
.text:00000A7E                 mov     eax, 0CCCCCCCCh
.text:00000A83                 mov     [ebp+var_14], eax
.text:00000A86                 mov     [ebp+Source], eax
.text:00000A89                 mov     [ebp+var_C], eax
.text:00000A8C                 mov     [ebp+Dest], eax
.text:00000A8F                 mov     [ebp+var_4], eax
.text:00000A92                 mov     eax, [ebp+Str]
.text:00000A95                 push    eax             ; Str
.text:00000A96                 call    _strlen
.text:00000A9B                 add     esp, 4
.text:00000A9E                 mov     [ebp+var_4], eax
.text:00000AA1                 lea     ecx, [ebp+arg_4]
.text:00000AA4                 mov     [ebp+var_14], ecx
.text:00000AA7
.text:00000AA7 loc_AA7:                                ; CODE XREF: _dupcat+64j
.text:00000AA7                 mov     edx, 1
.text:00000AAC                 test    edx, edx
.text:00000AAE                 jz      short loc_ADE
.text:00000AB0                 mov     eax, [ebp+var_14]
.text:00000AB3                 add     eax, 4
.text:00000AB6                 mov     [ebp+var_14], eax
.text:00000AB9                 mov     ecx, [ebp+var_14]
.text:00000ABC                 mov     edx, [ecx-4]
.text:00000ABF                 mov     [ebp+Source], edx
.text:00000AC2                 cmp     [ebp+Source], 0
.text:00000AC6                 jnz     short loc_ACA
.text:00000AC8                 jmp     short loc_ADE
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACA
.text:00000ACA loc_ACA:                                ; CODE XREF: _dupcat+4Ej
.text:00000ACA                 mov     eax, [ebp+Source]
.text:00000ACD                 push    eax             ; Str
.text:00000ACE                 call    _strlen
.text:00000AD3                 add     esp, 4
.text:00000AD6                 add     eax, [ebp+var_4]
.text:00000AD9                 mov     [ebp+var_4], eax
.text:00000ADC                 jmp     short loc_AA7
.text:00000ADE ; ---------------------------------------------------------------------------
.text:00000ADE
.text:00000ADE loc_ADE:                                ; CODE XREF: _dupcat+36j
.text:00000ADE                                         ; _dupcat+50j
.text:00000ADE                 mov     [ebp+var_14], 0
.text:00000AE5                 push    1               ; Size
.text:00000AE7                 mov     ecx, [ebp+var_4]
.text:00000AEA                 add     ecx, 1
.text:00000AED                 push    ecx             ; int
.text:00000AEE                 call    _safemalloc
.text:00000AF3                 add     esp, 8
.text:00000AF6                 mov     [ebp+Dest], eax
.text:00000AF9                 mov     edx, [ebp+Str]
.text:00000AFC                 push    edx             ; Source
.text:00000AFD                 mov     eax, [ebp+Dest]
.text:00000B00                 push    eax             ; Dest
.text:00000B01                 call    _strcpy
.text:00000B06                 add     esp, 8
.text:00000B09                 mov     ecx, [ebp+Dest]
.text:00000B0C                 push    ecx             ; Str
.text:00000B0D                 call    _strlen
.text:00000B12                 add     esp, 4
.text:00000B15                 add     eax, [ebp+Dest]
.text:00000B18                 mov     [ebp+var_C], eax
.text:00000B1B                 lea     edx, [ebp+arg_4]
.text:00000B1E                 mov     [ebp+var_14], edx
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: _dupcat+EEj
.text:00000B21                 mov     eax, 1
.text:00000B26                 test    eax, eax
.text:00000B28                 jz      short loc_B68
.text:00000B2A                 mov     ecx, [ebp+var_14]
.text:00000B2D                 add     ecx, 4
.text:00000B30                 mov     [ebp+var_14], ecx
.text:00000B33                 mov     edx, [ebp+var_14]
.text:00000B36                 mov     eax, [edx-4]
.text:00000B39                 mov     [ebp+Source], eax
.text:00000B3C                 cmp     [ebp+Source], 0
.text:00000B40                 jnz     short loc_B44
.text:00000B42                 jmp     short loc_B68
.text:00000B44 ; ---------------------------------------------------------------------------
.text:00000B44
.text:00000B44 loc_B44:                                ; CODE XREF: _dupcat+C8j
.text:00000B44                 mov     ecx, [ebp+Source]
.text:00000B47                 push    ecx             ; Source
.text:00000B48                 mov     edx, [ebp+var_C]
.text:00000B4B                 push    edx             ; Dest
.text:00000B4C                 call    _strcpy
.text:00000B51                 add     esp, 8
.text:00000B54                 mov     eax, [ebp+var_C]
.text:00000B57                 push    eax             ; Str
.text:00000B58                 call    _strlen
.text:00000B5D                 add     esp, 4
.text:00000B60                 add     eax, [ebp+var_C]
.text:00000B63                 mov     [ebp+var_C], eax
.text:00000B66                 jmp     short loc_B21
.text:00000B68 ; ---------------------------------------------------------------------------
.text:00000B68
.text:00000B68 loc_B68:                                ; CODE XREF: _dupcat+B0j
.text:00000B68                                         ; _dupcat+CAj
.text:00000B68                 mov     [ebp+var_14], 0
.text:00000B6F                 mov     eax, [ebp+Dest]
.text:00000B72                 add     esp, 14h
.text:00000B75                 cmp     ebp, esp
.text:00000B77                 call    __RTC_CheckEsp
.text:00000B7C                 mov     esp, ebp
.text:00000B7E                 pop     ebp
.text:00000B7F                 retn
.text:00000B7F _dupcat         endp
.text:00000B7F
.text:00000B7F ; ---------------------------------------------------------------------------
.text:00000B80                 db 8 dup(0CCh)
.text:00000B88
.text:00000B88 ; =============== S U B R O U T I N E =======================================
.text:00000B88
.text:00000B88 ; Attributes: bp-based frame
.text:00000B88
.text:00000B88 ; int __cdecl burnstr(char *Str)
.text:00000B88                 public _burnstr
.text:00000B88 _burnstr        proc near
.text:00000B88
.text:00000B88 Str             = dword ptr  8
.text:00000B88
.text:00000B88                 push    ebp
.text:00000B89                 mov     ebp, esp
.text:00000B8B                 cmp     [ebp+Str], 0
.text:00000B8F                 jz      short loc_BB6
.text:00000B91                 mov     eax, [ebp+Str]
.text:00000B94                 push    eax             ; Str
.text:00000B95                 call    _strlen
.text:00000B9A                 add     esp, 4
.text:00000B9D                 push    eax
.text:00000B9E                 mov     ecx, [ebp+Str]
.text:00000BA1                 push    ecx
.text:00000BA2                 call    _smemclr
.text:00000BA7                 add     esp, 8
.text:00000BAA                 mov     edx, [ebp+Str]
.text:00000BAD                 push    edx             ; Memory
.text:00000BAE                 call    _safefree
.text:00000BB3                 add     esp, 4
.text:00000BB6
.text:00000BB6 loc_BB6:                                ; CODE XREF: _burnstr+7j
.text:00000BB6                 cmp     ebp, esp
.text:00000BB8                 call    __RTC_CheckEsp
.text:00000BBD                 pop     ebp
.text:00000BBE                 retn
.text:00000BBE _burnstr        endp
.text:00000BBE
.text:00000BBE ; ---------------------------------------------------------------------------
.text:00000BBF                 db 9 dup(0CCh)
.text:00000BC8
.text:00000BC8 ; =============== S U B R O U T I N E =======================================
.text:00000BC8
.text:00000BC8 ; Attributes: bp-based frame
.text:00000BC8
.text:00000BC8                 public _toint
.text:00000BC8 _toint          proc near
.text:00000BC8
.text:00000BC8 arg_0           = dword ptr  8
.text:00000BC8
.text:00000BC8                 push    ebp
.text:00000BC9                 mov     ebp, esp
.text:00000BCB                 cmp     [ebp+arg_0], 7FFFFFFFh
.text:00000BD2                 ja      short loc_BDB
.text:00000BD4                 mov     eax, [ebp+arg_0]
.text:00000BD7                 jmp     short loc_BF0
.text:00000BD9 ; ---------------------------------------------------------------------------
.text:00000BD9                 jmp     short loc_BF0
.text:00000BDB ; ---------------------------------------------------------------------------
.text:00000BDB
.text:00000BDB loc_BDB:                                ; CODE XREF: _toint+Aj
.text:00000BDB                 cmp     [ebp+arg_0], 80000000h
.text:00000BE2                 jb      short loc_BEB
.text:00000BE4                 mov     eax, [ebp+arg_0]
.text:00000BE7                 jmp     short loc_BF0
.text:00000BE9 ; ---------------------------------------------------------------------------
.text:00000BE9                 jmp     short loc_BF0
.text:00000BEB ; ---------------------------------------------------------------------------
.text:00000BEB
.text:00000BEB loc_BEB:                                ; CODE XREF: _toint+1Aj
.text:00000BEB                 mov     eax, 80000000h
.text:00000BF0
.text:00000BF0 loc_BF0:                                ; CODE XREF: _toint+Fj
.text:00000BF0                                         ; _toint+11j ...
.text:00000BF0                 pop     ebp
.text:00000BF1                 retn
.text:00000BF1 _toint          endp
.text:00000BF1
.text:00000BF1 ; ---------------------------------------------------------------------------
.text:00000BF2                 align 8
.text:00000BF8
.text:00000BF8 ; =============== S U B R O U T I N E =======================================
.text:00000BF8
.text:00000BF8 ; Attributes: bp-based frame
.text:00000BF8
.text:00000BF8 ; int __cdecl dupprintf(char *Format, char)
.text:00000BF8                 public _dupprintf
.text:00000BF8 _dupprintf      proc near               ; CODE XREF: _host_strduptrim+B4p
.text:00000BF8
.text:00000BF8 Args            = dword ptr -8
.text:00000BF8 var_4           = dword ptr -4
.text:00000BF8 Format          = dword ptr  8
.text:00000BF8 arg_4           = byte ptr  0Ch
.text:00000BF8
.text:00000BF8                 push    ebp
.text:00000BF9                 mov     ebp, esp
.text:00000BFB                 sub     esp, 8
.text:00000BFE                 mov     [ebp+Args], 0CCCCCCCCh
.text:00000C05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C0C                 lea     eax, [ebp+arg_4]
.text:00000C0F                 mov     [ebp+Args], eax
.text:00000C12                 mov     ecx, [ebp+Args]
.text:00000C15                 push    ecx             ; Args
.text:00000C16                 mov     edx, [ebp+Format]
.text:00000C19                 push    edx             ; Format
.text:00000C1A                 call    _dupvprintf
.text:00000C1F                 add     esp, 8
.text:00000C22                 mov     [ebp+var_4], eax
.text:00000C25                 mov     [ebp+Args], 0
.text:00000C2C                 mov     eax, [ebp+var_4]
.text:00000C2F                 add     esp, 8
.text:00000C32                 cmp     ebp, esp
.text:00000C34                 call    __RTC_CheckEsp
.text:00000C39                 mov     esp, ebp
.text:00000C3B                 pop     ebp
.text:00000C3C                 retn
.text:00000C3C _dupprintf      endp
.text:00000C3C
.text:00000C3C ; ---------------------------------------------------------------------------
.text:00000C3D                 db 0Bh dup(0CCh)
.text:00000C48
.text:00000C48 ; =============== S U B R O U T I N E =======================================
.text:00000C48
.text:00000C48 ; Attributes: bp-based frame
.text:00000C48
.text:00000C48 ; int __cdecl dupvprintf(char *Format, va_list Args)
.text:00000C48                 public _dupvprintf
.text:00000C48 _dupvprintf     proc near               ; CODE XREF: _dupprintf+22p
.text:00000C48
.text:00000C48 Count           = dword ptr -0Ch
.text:00000C48 var_8           = dword ptr -8
.text:00000C48 Dest            = dword ptr -4
.text:00000C48 Format          = dword ptr  8
.text:00000C48 Args            = dword ptr  0Ch
.text:00000C48
.text:00000C48                 push    ebp
.text:00000C49                 mov     ebp, esp
.text:00000C4B                 sub     esp, 0Ch
.text:00000C4E                 mov     [ebp+Count], 0CCCCCCCCh
.text:00000C55                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000C5C                 mov     [ebp+Dest], 0CCCCCCCCh
.text:00000C63                 push    1               ; Size
.text:00000C65                 push    200h            ; int
.text:00000C6A                 call    _safemalloc
.text:00000C6F                 add     esp, 8
.text:00000C72                 mov     [ebp+Dest], eax
.text:00000C75                 mov     [ebp+Count], 200h
.text:00000C7C
.text:00000C7C loc_C7C:                                ; CODE XREF: _dupvprintf+9Fj
.text:00000C7C                 mov     eax, 1
.text:00000C81                 test    eax, eax
.text:00000C83                 jz      short loc_CE9
.text:00000C85                 mov     ecx, [ebp+Args]
.text:00000C88                 push    ecx             ; Args
.text:00000C89                 mov     edx, [ebp+Format]
.text:00000C8C                 push    edx             ; Format
.text:00000C8D                 mov     eax, [ebp+Count]
.text:00000C90                 push    eax             ; Count
.text:00000C91                 mov     ecx, [ebp+Dest]
.text:00000C94                 push    ecx             ; Dest
.text:00000C95                 call    __vsnprintf
.text:00000C9A                 add     esp, 10h
.text:00000C9D                 mov     [ebp+var_8], eax
.text:00000CA0                 cmp     [ebp+var_8], 0
.text:00000CA4                 jl      short loc_CB5
.text:00000CA6                 mov     edx, [ebp+var_8]
.text:00000CA9                 cmp     edx, [ebp+Count]
.text:00000CAC                 jge     short loc_CB5
.text:00000CAE                 mov     eax, [ebp+Dest]
.text:00000CB1                 jmp     short loc_CE9
.text:00000CB3 ; ---------------------------------------------------------------------------
.text:00000CB3                 jmp     short loc_CD2
.text:00000CB5 ; ---------------------------------------------------------------------------
.text:00000CB5
.text:00000CB5 loc_CB5:                                ; CODE XREF: _dupvprintf+5Cj
.text:00000CB5                                         ; _dupvprintf+64j
.text:00000CB5                 cmp     [ebp+var_8], 0
.text:00000CB9                 jle     short loc_CC6
.text:00000CBB                 mov     eax, [ebp+var_8]
.text:00000CBE                 add     eax, 1
.text:00000CC1                 mov     [ebp+Count], eax
.text:00000CC4                 jmp     short loc_CD2
.text:00000CC6 ; ---------------------------------------------------------------------------
.text:00000CC6
.text:00000CC6 loc_CC6:                                ; CODE XREF: _dupvprintf+71j
.text:00000CC6                 mov     ecx, [ebp+Count]
.text:00000CC9                 add     ecx, 200h
.text:00000CCF                 mov     [ebp+Count], ecx
.text:00000CD2
.text:00000CD2 loc_CD2:                                ; CODE XREF: _dupvprintf+6Bj
.text:00000CD2                                         ; _dupvprintf+7Cj
.text:00000CD2                 push    1               ; Size
.text:00000CD4                 mov     edx, [ebp+Count]
.text:00000CD7                 push    edx             ; int
.text:00000CD8                 mov     eax, [ebp+Dest]
.text:00000CDB                 push    eax             ; Memory
.text:00000CDC                 call    _saferealloc
.text:00000CE1                 add     esp, 0Ch
.text:00000CE4                 mov     [ebp+Dest], eax
.text:00000CE7                 jmp     short loc_C7C
.text:00000CE9 ; ---------------------------------------------------------------------------
.text:00000CE9
.text:00000CE9 loc_CE9:                                ; CODE XREF: _dupvprintf+3Bj
.text:00000CE9                                         ; _dupvprintf+69j
.text:00000CE9                 add     esp, 0Ch
.text:00000CEC                 cmp     ebp, esp
.text:00000CEE                 call    __RTC_CheckEsp
.text:00000CF3                 mov     esp, ebp
.text:00000CF5                 pop     ebp
.text:00000CF6                 retn
.text:00000CF6 _dupvprintf     endp
.text:00000CF6
.text:00000CF6 ; ---------------------------------------------------------------------------
.text:00000CF7                 align 4
.text:00000CF8
.text:00000CF8 ; =============== S U B R O U T I N E =======================================
.text:00000CF8
.text:00000CF8 ; Attributes: bp-based frame
.text:00000CF8
.text:00000CF8 ; int __cdecl fgetline(FILE *File)
.text:00000CF8                 public _fgetline
.text:00000CF8 _fgetline       proc near
.text:00000CF8
.text:00000CF8 var_C           = dword ptr -0Ch
.text:00000CF8 var_8           = dword ptr -8
.text:00000CF8 Memory          = dword ptr -4
.text:00000CF8 File            = dword ptr  8
.text:00000CF8
.text:00000CF8                 push    ebp
.text:00000CF9                 mov     ebp, esp
.text:00000CFB                 sub     esp, 0Ch
.text:00000CFE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000D05                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D0C                 mov     [ebp+Memory], 0CCCCCCCCh
.text:00000D13                 push    1               ; Size
.text:00000D15                 push    200h            ; int
.text:00000D1A                 call    _safemalloc
.text:00000D1F                 add     esp, 8
.text:00000D22                 mov     [ebp+Memory], eax
.text:00000D25                 mov     [ebp+var_8], 200h
.text:00000D2C                 mov     [ebp+var_C], 0
.text:00000D33
.text:00000D33 loc_D33:                                ; CODE XREF: _fgetline+9Fj
.text:00000D33                 mov     eax, [ebp+File]
.text:00000D36                 push    eax             ; File
.text:00000D37                 mov     ecx, [ebp+var_8]
.text:00000D3A                 sub     ecx, [ebp+var_C]
.text:00000D3D                 push    ecx             ; MaxCount
.text:00000D3E                 mov     edx, [ebp+Memory]
.text:00000D41                 add     edx, [ebp+var_C]
.text:00000D44                 push    edx             ; Buf
.text:00000D45                 call    _fgets
.text:00000D4A                 add     esp, 0Ch
.text:00000D4D                 test    eax, eax
.text:00000D4F                 jz      short loc_D99
.text:00000D51                 mov     eax, [ebp+Memory]
.text:00000D54                 add     eax, [ebp+var_C]
.text:00000D57                 push    eax             ; Str
.text:00000D58                 call    _strlen
.text:00000D5D                 add     esp, 4
.text:00000D60                 add     eax, [ebp+var_C]
.text:00000D63                 mov     [ebp+var_C], eax
.text:00000D66                 mov     ecx, [ebp+Memory]
.text:00000D69                 add     ecx, [ebp+var_C]
.text:00000D6C                 movsx   edx, byte ptr [ecx-1]
.text:00000D70                 cmp     edx, 0Ah
.text:00000D73                 jnz     short loc_D77
.text:00000D75                 jmp     short loc_D99
.text:00000D77 ; ---------------------------------------------------------------------------
.text:00000D77
.text:00000D77 loc_D77:                                ; CODE XREF: _fgetline+7Bj
.text:00000D77                 mov     eax, [ebp+var_C]
.text:00000D7A                 add     eax, 200h
.text:00000D7F                 mov     [ebp+var_8], eax
.text:00000D82                 push    1               ; Size
.text:00000D84                 mov     ecx, [ebp+var_8]
.text:00000D87                 push    ecx             ; int
.text:00000D88                 mov     edx, [ebp+Memory]
.text:00000D8B                 push    edx             ; Memory
.text:00000D8C                 call    _saferealloc
.text:00000D91                 add     esp, 0Ch
.text:00000D94                 mov     [ebp+Memory], eax
.text:00000D97                 jmp     short loc_D33
.text:00000D99 ; ---------------------------------------------------------------------------
.text:00000D99
.text:00000D99 loc_D99:                                ; CODE XREF: _fgetline+57j
.text:00000D99                                         ; _fgetline+7Dj
.text:00000D99                 cmp     [ebp+var_C], 0
.text:00000D9D                 jnz     short loc_DAF
.text:00000D9F                 mov     eax, [ebp+Memory]
.text:00000DA2                 push    eax             ; Memory
.text:00000DA3                 call    _safefree
.text:00000DA8                 add     esp, 4
.text:00000DAB                 xor     eax, eax
.text:00000DAD                 jmp     short loc_DBB
.text:00000DAF ; ---------------------------------------------------------------------------
.text:00000DAF
.text:00000DAF loc_DAF:                                ; CODE XREF: _fgetline+A5j
.text:00000DAF                 mov     ecx, [ebp+Memory]
.text:00000DB2                 add     ecx, [ebp+var_C]
.text:00000DB5                 mov     byte ptr [ecx], 0
.text:00000DB8                 mov     eax, [ebp+Memory]
.text:00000DBB
.text:00000DBB loc_DBB:                                ; CODE XREF: _fgetline+B5j
.text:00000DBB                 add     esp, 0Ch
.text:00000DBE                 cmp     ebp, esp
.text:00000DC0                 call    __RTC_CheckEsp
.text:00000DC5                 mov     esp, ebp
.text:00000DC7                 pop     ebp
.text:00000DC8                 retn
.text:00000DC8 _fgetline       endp
.text:00000DC8
.text:00000DC8 ; ---------------------------------------------------------------------------
.text:00000DC9                 db 0Fh dup(0CCh)
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8                 public _base64_encode_atom
.text:00000DD8 _base64_encode_atom proc near
.text:00000DD8
.text:00000DD8 var_4           = dword ptr -4
.text:00000DD8 arg_0           = dword ptr  8
.text:00000DD8 arg_4           = dword ptr  0Ch
.text:00000DD8 arg_8           = dword ptr  10h
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 push    ecx
.text:00000DDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DE3                 mov     eax, [ebp+arg_0]
.text:00000DE6                 movzx   ecx, byte ptr [eax]
.text:00000DE9                 shl     ecx, 10h
.text:00000DEC                 mov     [ebp+var_4], ecx
.text:00000DEF                 cmp     [ebp+arg_4], 1
.text:00000DF3                 jle     short loc_E05
.text:00000DF5                 mov     edx, [ebp+arg_0]
.text:00000DF8                 movzx   eax, byte ptr [edx+1]
.text:00000DFC                 shl     eax, 8
.text:00000DFF                 or      eax, [ebp+var_4]
.text:00000E02                 mov     [ebp+var_4], eax
.text:00000E05
.text:00000E05 loc_E05:                                ; CODE XREF: _base64_encode_atom+1Bj
.text:00000E05                 cmp     [ebp+arg_4], 2
.text:00000E09                 jle     short loc_E18
.text:00000E0B                 mov     ecx, [ebp+arg_0]
.text:00000E0E                 movzx   edx, byte ptr [ecx+2]
.text:00000E12                 or      edx, [ebp+var_4]
.text:00000E15                 mov     [ebp+var_4], edx
.text:00000E18
.text:00000E18 loc_E18:                                ; CODE XREF: _base64_encode_atom+31j
.text:00000E18                 mov     eax, [ebp+var_4]
.text:00000E1B                 shr     eax, 12h
.text:00000E1E                 and     eax, 3Fh
.text:00000E21                 mov     ecx, [ebp+arg_8]
.text:00000E24                 mov     dl, ds:?base64_chars@?1??base64_encode_atom@@9@9[eax] ; `base64_encode_atom'::`2'::base64_chars
.text:00000E2A                 mov     [ecx], dl
.text:00000E2C                 mov     eax, [ebp+var_4]
.text:00000E2F                 shr     eax, 0Ch
.text:00000E32                 and     eax, 3Fh
.text:00000E35                 mov     ecx, [ebp+arg_8]
.text:00000E38                 mov     dl, ds:?base64_chars@?1??base64_encode_atom@@9@9[eax] ; `base64_encode_atom'::`2'::base64_chars
.text:00000E3E                 mov     [ecx+1], dl
.text:00000E41                 cmp     [ebp+arg_4], 1
.text:00000E45                 jle     short loc_E5E
.text:00000E47                 mov     eax, [ebp+var_4]
.text:00000E4A                 shr     eax, 6
.text:00000E4D                 and     eax, 3Fh
.text:00000E50                 mov     ecx, [ebp+arg_8]
.text:00000E53                 mov     dl, ds:?base64_chars@?1??base64_encode_atom@@9@9[eax] ; `base64_encode_atom'::`2'::base64_chars
.text:00000E59                 mov     [ecx+2], dl
.text:00000E5C                 jmp     short loc_E65
.text:00000E5E ; ---------------------------------------------------------------------------
.text:00000E5E
.text:00000E5E loc_E5E:                                ; CODE XREF: _base64_encode_atom+6Dj
.text:00000E5E                 mov     eax, [ebp+arg_8]
.text:00000E61                 mov     byte ptr [eax+2], 3Dh ; '='
.text:00000E65
.text:00000E65 loc_E65:                                ; CODE XREF: _base64_encode_atom+84j
.text:00000E65                 cmp     [ebp+arg_4], 2
.text:00000E69                 jle     short loc_E7F
.text:00000E6B                 mov     ecx, [ebp+var_4]
.text:00000E6E                 and     ecx, 3Fh
.text:00000E71                 mov     edx, [ebp+arg_8]
.text:00000E74                 mov     al, ds:?base64_chars@?1??base64_encode_atom@@9@9[ecx] ; `base64_encode_atom'::`2'::base64_chars
.text:00000E7A                 mov     [edx+3], al
.text:00000E7D                 jmp     short loc_E86
.text:00000E7F ; ---------------------------------------------------------------------------
.text:00000E7F
.text:00000E7F loc_E7F:                                ; CODE XREF: _base64_encode_atom+91j
.text:00000E7F                 mov     ecx, [ebp+arg_8]
.text:00000E82                 mov     byte ptr [ecx+3], 3Dh ; '='
.text:00000E86
.text:00000E86 loc_E86:                                ; CODE XREF: _base64_encode_atom+A5j
.text:00000E86                 mov     esp, ebp
.text:00000E88                 pop     ebp
.text:00000E89                 retn
.text:00000E89 _base64_encode_atom endp
.text:00000E89
.text:00000E89 ; ---------------------------------------------------------------------------
.text:00000E8A                 db 0Eh dup(0CCh)
.text:00000E98
.text:00000E98 ; =============== S U B R O U T I N E =======================================
.text:00000E98
.text:00000E98 ; Attributes: bp-based frame
.text:00000E98
.text:00000E98                 public _base64_decode_atom
.text:00000E98 _base64_decode_atom proc near           ; CODE XREF: _validate_manual_hostkey+222p
.text:00000E98                                         ; _validate_manual_hostkey+24Ap
.text:00000E98
.text:00000E98 var_30          = byte ptr -30h
.text:00000E98 var_2D          = byte ptr -2Dh
.text:00000E98 var_2C          = dword ptr -2Ch
.text:00000E98 var_28          = dword ptr -28h
.text:00000E98 var_24          = dword ptr -24h
.text:00000E98 var_20          = dword ptr -20h
.text:00000E98 var_18          = dword ptr -18h
.text:00000E98 var_14          = dword ptr -14h
.text:00000E98 var_10          = dword ptr -10h
.text:00000E98 var_C           = dword ptr -0Ch
.text:00000E98 var_4           = dword ptr -4
.text:00000E98 arg_0           = dword ptr  8
.text:00000E98 arg_4           = dword ptr  0Ch
.text:00000E98
.text:00000E98                 push    ebp
.text:00000E99                 mov     ebp, esp
.text:00000E9B                 sub     esp, 30h
.text:00000E9E                 push    edi
.text:00000E9F                 lea     edi, [ebp+var_30]
.text:00000EA2                 mov     ecx, 0Ch
.text:00000EA7                 mov     eax, 0CCCCCCCCh
.text:00000EAC                 rep stosd
.text:00000EAE                 mov     eax, dword ptr ds:___security_cookie
.text:00000EB3                 xor     eax, ebp
.text:00000EB5                 mov     [ebp+var_4], eax
.text:00000EB8                 mov     [ebp+var_20], 0
.text:00000EBF                 jmp     short loc_ECA
.text:00000EC1 ; ---------------------------------------------------------------------------
.text:00000EC1
.text:00000EC1 loc_EC1:                                ; CODE XREF: _base64_decode_atom+E8j
.text:00000EC1                 mov     eax, [ebp+var_20]
.text:00000EC4                 add     eax, 1
.text:00000EC7                 mov     [ebp+var_20], eax
.text:00000ECA
.text:00000ECA loc_ECA:                                ; CODE XREF: _base64_decode_atom+27j
.text:00000ECA                 cmp     [ebp+var_20], 4
.text:00000ECE                 jge     loc_F85
.text:00000ED4                 mov     ecx, [ebp+arg_0]
.text:00000ED7                 add     ecx, [ebp+var_20]
.text:00000EDA                 mov     dl, [ecx]
.text:00000EDC                 mov     [ebp+var_2D], dl
.text:00000EDF                 movsx   eax, [ebp+var_2D]
.text:00000EE3                 cmp     eax, 41h ; 'A'
.text:00000EE6                 jl      short loc_EFD
.text:00000EE8                 movsx   ecx, [ebp+var_2D]
.text:00000EEC                 cmp     ecx, 5Ah ; 'Z'
.text:00000EEF                 jg      short loc_EFD
.text:00000EF1                 movsx   edx, [ebp+var_2D]
.text:00000EF5                 sub     edx, 41h ; 'A'
.text:00000EF8                 mov     [ebp+var_24], edx
.text:00000EFB                 jmp     short loc_F76
.text:00000EFD ; ---------------------------------------------------------------------------
.text:00000EFD
.text:00000EFD loc_EFD:                                ; CODE XREF: _base64_decode_atom+4Ej
.text:00000EFD                                         ; _base64_decode_atom+57j
.text:00000EFD                 movsx   eax, [ebp+var_2D]
.text:00000F01                 cmp     eax, 61h ; 'a'
.text:00000F04                 jl      short loc_F1B
.text:00000F06                 movsx   ecx, [ebp+var_2D]
.text:00000F0A                 cmp     ecx, 7Ah ; 'z'
.text:00000F0D                 jg      short loc_F1B
.text:00000F0F                 movsx   edx, [ebp+var_2D]
.text:00000F13                 sub     edx, 47h ; 'G'
.text:00000F16                 mov     [ebp+var_24], edx
.text:00000F19                 jmp     short loc_F76
.text:00000F1B ; ---------------------------------------------------------------------------
.text:00000F1B
.text:00000F1B loc_F1B:                                ; CODE XREF: _base64_decode_atom+6Cj
.text:00000F1B                                         ; _base64_decode_atom+75j
.text:00000F1B                 movsx   eax, [ebp+var_2D]
.text:00000F1F                 cmp     eax, 30h ; '0'
.text:00000F22                 jl      short loc_F39
.text:00000F24                 movsx   ecx, [ebp+var_2D]
.text:00000F28                 cmp     ecx, 39h ; '9'
.text:00000F2B                 jg      short loc_F39
.text:00000F2D                 movsx   edx, [ebp+var_2D]
.text:00000F31                 add     edx, 4
.text:00000F34                 mov     [ebp+var_24], edx
.text:00000F37                 jmp     short loc_F76
.text:00000F39 ; ---------------------------------------------------------------------------
.text:00000F39
.text:00000F39 loc_F39:                                ; CODE XREF: _base64_decode_atom+8Aj
.text:00000F39                                         ; _base64_decode_atom+93j
.text:00000F39                 movsx   eax, [ebp+var_2D]
.text:00000F3D                 cmp     eax, 2Bh ; '+'
.text:00000F40                 jnz     short loc_F4B
.text:00000F42                 mov     [ebp+var_24], 3Eh ; '>'
.text:00000F49                 jmp     short loc_F76
.text:00000F4B ; ---------------------------------------------------------------------------
.text:00000F4B
.text:00000F4B loc_F4B:                                ; CODE XREF: _base64_decode_atom+A8j
.text:00000F4B                 movsx   ecx, [ebp+var_2D]
.text:00000F4F                 cmp     ecx, 2Fh ; '/'
.text:00000F52                 jnz     short loc_F5D
.text:00000F54                 mov     [ebp+var_24], 3Fh ; '?'
.text:00000F5B                 jmp     short loc_F76
.text:00000F5D ; ---------------------------------------------------------------------------
.text:00000F5D
.text:00000F5D loc_F5D:                                ; CODE XREF: _base64_decode_atom+BAj
.text:00000F5D                 movsx   edx, [ebp+var_2D]
.text:00000F61                 cmp     edx, 3Dh ; '='
.text:00000F64                 jnz     short loc_F6F
.text:00000F66                 mov     [ebp+var_24], 0FFFFFFFFh
.text:00000F6D                 jmp     short loc_F76
.text:00000F6F ; ---------------------------------------------------------------------------
.text:00000F6F
.text:00000F6F loc_F6F:                                ; CODE XREF: _base64_decode_atom+CCj
.text:00000F6F                 xor     eax, eax
.text:00000F71                 jmp     loc_1034
.text:00000F76 ; ---------------------------------------------------------------------------
.text:00000F76
.text:00000F76 loc_F76:                                ; CODE XREF: _base64_decode_atom+63j
.text:00000F76                                         ; _base64_decode_atom+81j ...
.text:00000F76                 mov     eax, [ebp+var_20]
.text:00000F79                 mov     ecx, [ebp+var_24]
.text:00000F7C                 mov     [ebp+eax*4+var_18], ecx
.text:00000F80                 jmp     loc_EC1
.text:00000F85 ; ---------------------------------------------------------------------------
.text:00000F85
.text:00000F85 loc_F85:                                ; CODE XREF: _base64_decode_atom+36j
.text:00000F85                 cmp     [ebp+var_18], 0FFFFFFFFh
.text:00000F89                 jz      short loc_F91
.text:00000F8B                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:00000F8F                 jnz     short loc_F98
.text:00000F91
.text:00000F91 loc_F91:                                ; CODE XREF: _base64_decode_atom+F1j
.text:00000F91                 xor     eax, eax
.text:00000F93                 jmp     loc_1034
.text:00000F98 ; ---------------------------------------------------------------------------
.text:00000F98
.text:00000F98 loc_F98:                                ; CODE XREF: _base64_decode_atom+F7j
.text:00000F98                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00000F9C                 jnz     short loc_FAB
.text:00000F9E                 cmp     [ebp+var_C], 0FFFFFFFFh
.text:00000FA2                 jz      short loc_FAB
.text:00000FA4                 xor     eax, eax
.text:00000FA6                 jmp     loc_1034
.text:00000FAB ; ---------------------------------------------------------------------------
.text:00000FAB
.text:00000FAB loc_FAB:                                ; CODE XREF: _base64_decode_atom+104j
.text:00000FAB                                         ; _base64_decode_atom+10Aj
.text:00000FAB                 cmp     [ebp+var_C], 0FFFFFFFFh
.text:00000FAF                 jz      short loc_FBA
.text:00000FB1                 mov     [ebp+var_28], 3
.text:00000FB8                 jmp     short loc_FD0
.text:00000FBA ; ---------------------------------------------------------------------------
.text:00000FBA
.text:00000FBA loc_FBA:                                ; CODE XREF: _base64_decode_atom+117j
.text:00000FBA                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00000FBE                 jz      short loc_FC9
.text:00000FC0                 mov     [ebp+var_28], 2
.text:00000FC7                 jmp     short loc_FD0
.text:00000FC9 ; ---------------------------------------------------------------------------
.text:00000FC9
.text:00000FC9 loc_FC9:                                ; CODE XREF: _base64_decode_atom+126j
.text:00000FC9                 mov     [ebp+var_28], 1
.text:00000FD0
.text:00000FD0 loc_FD0:                                ; CODE XREF: _base64_decode_atom+120j
.text:00000FD0                                         ; _base64_decode_atom+12Fj
.text:00000FD0                 mov     edx, [ebp+var_18]
.text:00000FD3                 shl     edx, 12h
.text:00000FD6                 mov     eax, [ebp+var_14]
.text:00000FD9                 shl     eax, 0Ch
.text:00000FDC                 or      edx, eax
.text:00000FDE                 mov     ecx, [ebp+var_10]
.text:00000FE1                 and     ecx, 3Fh
.text:00000FE4                 shl     ecx, 6
.text:00000FE7                 or      edx, ecx
.text:00000FE9                 mov     eax, [ebp+var_C]
.text:00000FEC                 and     eax, 3Fh
.text:00000FEF                 or      edx, eax
.text:00000FF1                 mov     [ebp+var_2C], edx
.text:00000FF4                 mov     ecx, [ebp+var_2C]
.text:00000FF7                 shr     ecx, 10h
.text:00000FFA                 and     ecx, 0FFh
.text:00001000                 mov     edx, [ebp+arg_4]
.text:00001003                 mov     [edx], cl
.text:00001005                 cmp     [ebp+var_28], 1
.text:00001009                 jle     short loc_101C
.text:0000100B                 mov     eax, [ebp+var_2C]
.text:0000100E                 shr     eax, 8
.text:00001011                 and     eax, 0FFh
.text:00001016                 mov     ecx, [ebp+arg_4]
.text:00001019                 mov     [ecx+1], al
.text:0000101C
.text:0000101C loc_101C:                               ; CODE XREF: _base64_decode_atom+171j
.text:0000101C                 cmp     [ebp+var_28], 2
.text:00001020                 jle     short loc_1031
.text:00001022                 mov     edx, [ebp+var_2C]
.text:00001025                 and     edx, 0FFh
.text:0000102B                 mov     eax, [ebp+arg_4]
.text:0000102E                 mov     [eax+2], dl
.text:00001031
.text:00001031 loc_1031:                               ; CODE XREF: _base64_decode_atom+188j
.text:00001031                 mov     eax, [ebp+var_28]
.text:00001034
.text:00001034 loc_1034:                               ; CODE XREF: _base64_decode_atom+D9j
.text:00001034                                         ; _base64_decode_atom+FBj ...
.text:00001034                 push    edx
.text:00001035                 mov     ecx, ebp
.text:00001037                 push    eax
.text:00001038                 lea     edx, $LN29
.text:0000103E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001043                 pop     eax
.text:00001044                 pop     edx
.text:00001045                 pop     edi
.text:00001046                 mov     ecx, [ebp+var_4]
.text:00001049                 xor     ecx, ebp
.text:0000104B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001050                 mov     esp, ebp
.text:00001052                 pop     ebp
.text:00001053                 retn
.text:00001053 _base64_decode_atom endp
.text:00001053
.text:00001053 ; ---------------------------------------------------------------------------
.text:00001054 $LN29           dd 1                    ; DATA XREF: _base64_decode_atom+1A0o
.text:00001058                 dd offset $LN28
.text:0000105C $LN28           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001058o
.text:00001064                 dd offset $LN27         ; "vals"
.text:00001068 $LN27           db 'vals',0             ; DATA XREF: .text:00001064o
.text:0000106D                 db 0Bh dup(0CCh)
.text:00001078
.text:00001078 ; =============== S U B R O U T I N E =======================================
.text:00001078
.text:00001078 ; Attributes: bp-based frame
.text:00001078
.text:00001078                 public _bufchain_init
.text:00001078 _bufchain_init  proc near
.text:00001078
.text:00001078 arg_0           = dword ptr  8
.text:00001078
.text:00001078                 push    ebp
.text:00001079                 mov     ebp, esp
.text:0000107B                 mov     eax, [ebp+arg_0]
.text:0000107E                 mov     dword ptr [eax+4], 0
.text:00001085                 mov     ecx, [ebp+arg_0]
.text:00001088                 mov     dword ptr [ecx], 0
.text:0000108E                 mov     edx, [ebp+arg_0]
.text:00001091                 mov     dword ptr [edx+8], 0
.text:00001098                 pop     ebp
.text:00001099                 retn
.text:00001099 _bufchain_init  endp
.text:00001099
.text:00001099 ; ---------------------------------------------------------------------------
.text:0000109A                 db 0Eh dup(0CCh)
.text:000010A8
.text:000010A8 ; =============== S U B R O U T I N E =======================================
.text:000010A8
.text:000010A8 ; Attributes: bp-based frame
.text:000010A8
.text:000010A8                 public _bufchain_clear
.text:000010A8 _bufchain_clear proc near
.text:000010A8
.text:000010A8 Memory          = dword ptr -4
.text:000010A8 arg_0           = dword ptr  8
.text:000010A8
.text:000010A8                 push    ebp
.text:000010A9                 mov     ebp, esp
.text:000010AB                 push    ecx
.text:000010AC                 mov     [ebp+Memory], 0CCCCCCCCh
.text:000010B3
.text:000010B3 loc_10B3:                               ; CODE XREF: _bufchain_clear+33j
.text:000010B3                 mov     eax, [ebp+arg_0]
.text:000010B6                 cmp     dword ptr [eax], 0
.text:000010B9                 jz      short loc_10DD
.text:000010BB                 mov     ecx, [ebp+arg_0]
.text:000010BE                 mov     edx, [ecx]
.text:000010C0                 mov     [ebp+Memory], edx
.text:000010C3                 mov     eax, [ebp+arg_0]
.text:000010C6                 mov     ecx, [eax]
.text:000010C8                 mov     edx, [ebp+arg_0]
.text:000010CB                 mov     eax, [ecx]
.text:000010CD                 mov     [edx], eax
.text:000010CF                 mov     ecx, [ebp+Memory]
.text:000010D2                 push    ecx             ; Memory
.text:000010D3                 call    _safefree
.text:000010D8                 add     esp, 4
.text:000010DB                 jmp     short loc_10B3
.text:000010DD ; ---------------------------------------------------------------------------
.text:000010DD
.text:000010DD loc_10DD:                               ; CODE XREF: _bufchain_clear+11j
.text:000010DD                 mov     edx, [ebp+arg_0]
.text:000010E0                 mov     dword ptr [edx+4], 0
.text:000010E7                 mov     eax, [ebp+arg_0]
.text:000010EA                 mov     dword ptr [eax+8], 0
.text:000010F1                 add     esp, 4
.text:000010F4                 cmp     ebp, esp
.text:000010F6                 call    __RTC_CheckEsp
.text:000010FB                 mov     esp, ebp
.text:000010FD                 pop     ebp
.text:000010FE                 retn
.text:000010FE _bufchain_clear endp
.text:000010FE
.text:000010FE ; ---------------------------------------------------------------------------
.text:000010FF                 db 9 dup(0CCh)
.text:00001108
.text:00001108 ; =============== S U B R O U T I N E =======================================
.text:00001108
.text:00001108 ; Attributes: bp-based frame
.text:00001108
.text:00001108                 public _bufchain_size
.text:00001108 _bufchain_size  proc near
.text:00001108
.text:00001108 arg_0           = dword ptr  8
.text:00001108
.text:00001108                 push    ebp
.text:00001109                 mov     ebp, esp
.text:0000110B                 mov     eax, [ebp+arg_0]
.text:0000110E                 mov     eax, [eax+8]
.text:00001111                 pop     ebp
.text:00001112                 retn
.text:00001112 _bufchain_size  endp
.text:00001112
.text:00001112 ; ---------------------------------------------------------------------------
.text:00001113                 align 8
.text:00001118
.text:00001118 ; =============== S U B R O U T I N E =======================================
.text:00001118
.text:00001118 ; Attributes: bp-based frame
.text:00001118
.text:00001118                 public _bufchain_add
.text:00001118 _bufchain_add   proc near
.text:00001118
.text:00001118 var_1C          = dword ptr -1Ch
.text:00001118 var_18          = dword ptr -18h
.text:00001118 var_14          = dword ptr -14h
.text:00001118 var_10          = dword ptr -10h
.text:00001118 var_C           = dword ptr -0Ch
.text:00001118 Size            = dword ptr -8
.text:00001118 Src             = dword ptr -4
.text:00001118 arg_0           = dword ptr  8
.text:00001118 arg_4           = dword ptr  0Ch
.text:00001118 arg_8           = dword ptr  10h
.text:00001118
.text:00001118                 push    ebp
.text:00001119                 mov     ebp, esp
.text:0000111B                 sub     esp, 1Ch
.text:0000111E                 mov     eax, 0CCCCCCCCh
.text:00001123                 mov     [ebp+var_1C], eax
.text:00001126                 mov     [ebp+var_18], eax
.text:00001129                 mov     [ebp+var_14], eax
.text:0000112C                 mov     [ebp+var_10], eax
.text:0000112F                 mov     [ebp+var_C], eax
.text:00001132                 mov     [ebp+Size], eax
.text:00001135                 mov     [ebp+Src], eax
.text:00001138                 mov     eax, [ebp+arg_4]
.text:0000113B                 mov     [ebp+Src], eax
.text:0000113E                 cmp     [ebp+arg_8], 0
.text:00001142                 jnz     short loc_1149
.text:00001144                 jmp     loc_129B
.text:00001149 ; ---------------------------------------------------------------------------
.text:00001149
.text:00001149 loc_1149:                               ; CODE XREF: _bufchain_add+2Aj
.text:00001149                 mov     ecx, [ebp+arg_0]
.text:0000114C                 mov     edx, [ecx+8]
.text:0000114F                 add     edx, [ebp+arg_8]
.text:00001152                 mov     eax, [ebp+arg_0]
.text:00001155                 mov     [eax+8], edx
.text:00001158
.text:00001158 loc_1158:                               ; CODE XREF: _bufchain_add:loc_1296j
.text:00001158                 cmp     [ebp+arg_8], 0
.text:0000115C                 jle     loc_129B
.text:00001162                 mov     ecx, [ebp+arg_0]
.text:00001165                 cmp     dword ptr [ecx+4], 0
.text:00001169                 jz      loc_11FE
.text:0000116F                 mov     edx, [ebp+arg_0]
.text:00001172                 mov     eax, [edx+4]
.text:00001175                 mov     ecx, [ebp+arg_0]
.text:00001178                 mov     edx, [ecx+4]
.text:0000117B                 mov     eax, [eax+8]
.text:0000117E                 cmp     eax, [edx+0Ch]
.text:00001181                 jnb     short loc_11FE
.text:00001183                 mov     ecx, [ebp+arg_0]
.text:00001186                 mov     edx, [ecx+4]
.text:00001189                 mov     eax, [ebp+arg_0]
.text:0000118C                 mov     ecx, [eax+4]
.text:0000118F                 mov     edx, [edx+0Ch]
.text:00001192                 sub     edx, [ecx+8]
.text:00001195                 cmp     [ebp+arg_8], edx
.text:00001198                 jge     short loc_11A2
.text:0000119A                 mov     eax, [ebp+arg_8]
.text:0000119D                 mov     [ebp+var_14], eax
.text:000011A0                 jmp     short loc_11B7
.text:000011A2 ; ---------------------------------------------------------------------------
.text:000011A2
.text:000011A2 loc_11A2:                               ; CODE XREF: _bufchain_add+80j
.text:000011A2                 mov     ecx, [ebp+arg_0]
.text:000011A5                 mov     edx, [ecx+4]
.text:000011A8                 mov     eax, [ebp+arg_0]
.text:000011AB                 mov     ecx, [eax+4]
.text:000011AE                 mov     edx, [edx+0Ch]
.text:000011B1                 sub     edx, [ecx+8]
.text:000011B4                 mov     [ebp+var_14], edx
.text:000011B7
.text:000011B7 loc_11B7:                               ; CODE XREF: _bufchain_add+88j
.text:000011B7                 mov     eax, [ebp+var_14]
.text:000011BA                 mov     [ebp+Size], eax
.text:000011BD                 mov     ecx, [ebp+Size]
.text:000011C0                 push    ecx             ; Size
.text:000011C1                 mov     edx, [ebp+Src]
.text:000011C4                 push    edx             ; Src
.text:000011C5                 mov     eax, [ebp+arg_0]
.text:000011C8                 mov     ecx, [eax+4]
.text:000011CB                 mov     edx, [ecx+8]
.text:000011CE                 push    edx             ; Dst
.text:000011CF                 call    _memcpy
.text:000011D4                 add     esp, 0Ch
.text:000011D7                 mov     eax, [ebp+Src]
.text:000011DA                 add     eax, [ebp+Size]
.text:000011DD                 mov     [ebp+Src], eax
.text:000011E0                 mov     ecx, [ebp+arg_8]
.text:000011E3                 sub     ecx, [ebp+Size]
.text:000011E6                 mov     [ebp+arg_8], ecx
.text:000011E9                 mov     edx, [ebp+arg_0]
.text:000011EC                 mov     eax, [edx+4]
.text:000011EF                 mov     ecx, [eax+8]
.text:000011F2                 add     ecx, [ebp+Size]
.text:000011F5                 mov     edx, [ebp+arg_0]
.text:000011F8                 mov     eax, [edx+4]
.text:000011FB                 mov     [eax+8], ecx
.text:000011FE
.text:000011FE loc_11FE:                               ; CODE XREF: _bufchain_add+51j
.text:000011FE                                         ; _bufchain_add+69j
.text:000011FE                 cmp     [ebp+arg_8], 0
.text:00001202                 jle     loc_1296
.text:00001208                 mov     ecx, [ebp+arg_8]
.text:0000120B                 add     ecx, 10h
.text:0000120E                 cmp     ecx, 200h
.text:00001214                 jbe     short loc_1221
.text:00001216                 mov     edx, [ebp+arg_8]
.text:00001219                 add     edx, 10h
.text:0000121C                 mov     [ebp+var_18], edx
.text:0000121F                 jmp     short loc_1228
.text:00001221 ; ---------------------------------------------------------------------------
.text:00001221
.text:00001221 loc_1221:                               ; CODE XREF: _bufchain_add+FCj
.text:00001221                 mov     [ebp+var_18], 200h
.text:00001228
.text:00001228 loc_1228:                               ; CODE XREF: _bufchain_add+107j
.text:00001228                 mov     eax, [ebp+var_18]
.text:0000122B                 mov     [ebp+var_C], eax
.text:0000122E                 push    1               ; Size
.text:00001230                 mov     ecx, [ebp+var_C]
.text:00001233                 push    ecx             ; int
.text:00001234                 call    _safemalloc
.text:00001239                 add     esp, 8
.text:0000123C                 mov     [ebp+var_10], eax
.text:0000123F                 mov     edx, [ebp+var_10]
.text:00001242                 add     edx, 10h
.text:00001245                 mov     [ebp+var_1C], edx
.text:00001248                 mov     eax, [ebp+var_10]
.text:0000124B                 mov     ecx, [ebp+var_1C]
.text:0000124E                 mov     [eax+8], ecx
.text:00001251                 mov     edx, [ebp+var_10]
.text:00001254                 mov     eax, [ebp+var_1C]
.text:00001257                 mov     [edx+4], eax
.text:0000125A                 mov     ecx, [ebp+var_10]
.text:0000125D                 add     ecx, [ebp+var_C]
.text:00001260                 mov     edx, [ebp+var_10]
.text:00001263                 mov     [edx+0Ch], ecx
.text:00001266                 mov     eax, [ebp+var_10]
.text:00001269                 mov     dword ptr [eax], 0
.text:0000126F                 mov     ecx, [ebp+arg_0]
.text:00001272                 cmp     dword ptr [ecx+4], 0
.text:00001276                 jz      short loc_1285
.text:00001278                 mov     edx, [ebp+arg_0]
.text:0000127B                 mov     eax, [edx+4]
.text:0000127E                 mov     ecx, [ebp+var_10]
.text:00001281                 mov     [eax], ecx
.text:00001283                 jmp     short loc_128D
.text:00001285 ; ---------------------------------------------------------------------------
.text:00001285
.text:00001285 loc_1285:                               ; CODE XREF: _bufchain_add+15Ej
.text:00001285                 mov     edx, [ebp+arg_0]
.text:00001288                 mov     eax, [ebp+var_10]
.text:0000128B                 mov     [edx], eax
.text:0000128D
.text:0000128D loc_128D:                               ; CODE XREF: _bufchain_add+16Bj
.text:0000128D                 mov     ecx, [ebp+arg_0]
.text:00001290                 mov     edx, [ebp+var_10]
.text:00001293                 mov     [ecx+4], edx
.text:00001296
.text:00001296 loc_1296:                               ; CODE XREF: _bufchain_add+EAj
.text:00001296                 jmp     loc_1158
.text:0000129B ; ---------------------------------------------------------------------------
.text:0000129B
.text:0000129B loc_129B:                               ; CODE XREF: _bufchain_add+2Cj
.text:0000129B                                         ; _bufchain_add+44j
.text:0000129B                 add     esp, 1Ch
.text:0000129E                 cmp     ebp, esp
.text:000012A0                 call    __RTC_CheckEsp
.text:000012A5                 mov     esp, ebp
.text:000012A7                 pop     ebp
.text:000012A8                 retn
.text:000012A8 _bufchain_add   endp
.text:000012A8
.text:000012A8 ; ---------------------------------------------------------------------------
.text:000012A9                 db 0Fh dup(0CCh)
.text:000012B8
.text:000012B8 ; =============== S U B R O U T I N E =======================================
.text:000012B8
.text:000012B8 ; Attributes: bp-based frame
.text:000012B8
.text:000012B8                 public _bufchain_consume
.text:000012B8 _bufchain_consume proc near
.text:000012B8
.text:000012B8 var_8           = dword ptr -8
.text:000012B8 Memory          = dword ptr -4
.text:000012B8 arg_0           = dword ptr  8
.text:000012B8 arg_4           = dword ptr  0Ch
.text:000012B8
.text:000012B8                 push    ebp
.text:000012B9                 mov     ebp, esp
.text:000012BB                 sub     esp, 8
.text:000012BE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000012C5                 mov     [ebp+Memory], 0CCCCCCCCh
.text:000012CC                 mov     eax, [ebp+arg_0]
.text:000012CF                 mov     ecx, [eax+8]
.text:000012D2                 cmp     ecx, [ebp+arg_4]
.text:000012D5                 jge     short loc_12EE
.text:000012D7                 push    278h            ; Line
.text:000012DC                 push    offset $SG85911 ; "..\\..\\..\\misc.c"
.text:000012E1                 push    offset $SG85912 ; "ch->buffersize >= len"
.text:000012E6                 call    __wassert
.text:000012EB ; ---------------------------------------------------------------------------
.text:000012EB                 add     esp, 0Ch
.text:000012EE
.text:000012EE loc_12EE:                               ; CODE XREF: _bufchain_consume+1Dj
.text:000012EE                                         ; _bufchain_consume+EAj
.text:000012EE                 cmp     [ebp+arg_4], 0
.text:000012F2                 jle     loc_13A7
.text:000012F8                 mov     eax, [ebp+arg_4]
.text:000012FB                 mov     [ebp+var_8], eax
.text:000012FE                 mov     ecx, [ebp+arg_0]
.text:00001301                 cmp     dword ptr [ecx], 0
.text:00001304                 jnz     short loc_131D
.text:00001306                 push    27Bh            ; Line
.text:0000130B                 push    offset $SG85919 ; "..\\..\\..\\misc.c"
.text:00001310                 push    offset $SG85920 ; "ch->head != NULL"
.text:00001315                 call    __wassert
.text:0000131A ; ---------------------------------------------------------------------------
.text:0000131A                 add     esp, 0Ch
.text:0000131D
.text:0000131D loc_131D:                               ; CODE XREF: _bufchain_consume+4Cj
.text:0000131D                 mov     eax, [ebp+arg_0]
.text:00001320                 mov     ecx, [eax]
.text:00001322                 mov     edx, [ebp+arg_0]
.text:00001325                 mov     eax, [edx]
.text:00001327                 mov     ecx, [ecx+8]
.text:0000132A                 sub     ecx, [eax+4]
.text:0000132D                 cmp     [ebp+var_8], ecx
.text:00001330                 jl      short loc_1377
.text:00001332                 mov     edx, [ebp+arg_0]
.text:00001335                 mov     eax, [edx]
.text:00001337                 mov     ecx, [ebp+arg_0]
.text:0000133A                 mov     edx, [ecx]
.text:0000133C                 mov     eax, [eax+8]
.text:0000133F                 sub     eax, [edx+4]
.text:00001342                 mov     [ebp+var_8], eax
.text:00001345                 mov     ecx, [ebp+arg_0]
.text:00001348                 mov     edx, [ecx]
.text:0000134A                 mov     [ebp+Memory], edx
.text:0000134D                 mov     eax, [ebp+arg_0]
.text:00001350                 mov     ecx, [ebp+Memory]
.text:00001353                 mov     edx, [ecx]
.text:00001355                 mov     [eax], edx
.text:00001357                 mov     eax, [ebp+arg_0]
.text:0000135A                 cmp     dword ptr [eax], 0
.text:0000135D                 jnz     short loc_1369
.text:0000135F                 mov     ecx, [ebp+arg_0]
.text:00001362                 mov     dword ptr [ecx+4], 0
.text:00001369
.text:00001369 loc_1369:                               ; CODE XREF: _bufchain_consume+A5j
.text:00001369                 mov     edx, [ebp+Memory]
.text:0000136C                 push    edx             ; Memory
.text:0000136D                 call    _safefree
.text:00001372                 add     esp, 4
.text:00001375                 jmp     short loc_138A
.text:00001377 ; ---------------------------------------------------------------------------
.text:00001377
.text:00001377 loc_1377:                               ; CODE XREF: _bufchain_consume+78j
.text:00001377                 mov     eax, [ebp+arg_0]
.text:0000137A                 mov     ecx, [eax]
.text:0000137C                 mov     edx, [ecx+4]
.text:0000137F                 add     edx, [ebp+var_8]
.text:00001382                 mov     eax, [ebp+arg_0]
.text:00001385                 mov     ecx, [eax]
.text:00001387                 mov     [ecx+4], edx
.text:0000138A
.text:0000138A loc_138A:                               ; CODE XREF: _bufchain_consume+BDj
.text:0000138A                 mov     edx, [ebp+arg_0]
.text:0000138D                 mov     eax, [edx+8]
.text:00001390                 sub     eax, [ebp+var_8]
.text:00001393                 mov     ecx, [ebp+arg_0]
.text:00001396                 mov     [ecx+8], eax
.text:00001399                 mov     edx, [ebp+arg_4]
.text:0000139C                 sub     edx, [ebp+var_8]
.text:0000139F                 mov     [ebp+arg_4], edx
.text:000013A2                 jmp     loc_12EE
.text:000013A7 ; ---------------------------------------------------------------------------
.text:000013A7
.text:000013A7 loc_13A7:                               ; CODE XREF: _bufchain_consume+3Aj
.text:000013A7                 add     esp, 8
.text:000013AA                 cmp     ebp, esp
.text:000013AC                 call    __RTC_CheckEsp
.text:000013B1                 mov     esp, ebp
.text:000013B3                 pop     ebp
.text:000013B4                 retn
.text:000013B4 _bufchain_consume endp
.text:000013B4
.text:000013B4 ; ---------------------------------------------------------------------------
.text:000013B5                 align 4
.text:000013B8
.text:000013B8 ; =============== S U B R O U T I N E =======================================
.text:000013B8
.text:000013B8 ; Attributes: bp-based frame
.text:000013B8
.text:000013B8                 public _bufchain_prefix
.text:000013B8 _bufchain_prefix proc near
.text:000013B8
.text:000013B8 arg_0           = dword ptr  8
.text:000013B8 arg_4           = dword ptr  0Ch
.text:000013B8 arg_8           = dword ptr  10h
.text:000013B8
.text:000013B8                 push    ebp
.text:000013B9                 mov     ebp, esp
.text:000013BB                 mov     eax, [ebp+arg_0]
.text:000013BE                 mov     ecx, [eax]
.text:000013C0                 mov     edx, [ebp+arg_0]
.text:000013C3                 mov     eax, [edx]
.text:000013C5                 mov     ecx, [ecx+8]
.text:000013C8                 sub     ecx, [eax+4]
.text:000013CB                 mov     edx, [ebp+arg_8]
.text:000013CE                 mov     [edx], ecx
.text:000013D0                 mov     eax, [ebp+arg_0]
.text:000013D3                 mov     ecx, [eax]
.text:000013D5                 mov     edx, [ebp+arg_4]
.text:000013D8                 mov     eax, [ecx+4]
.text:000013DB                 mov     [edx], eax
.text:000013DD                 pop     ebp
.text:000013DE                 retn
.text:000013DE _bufchain_prefix endp
.text:000013DE
.text:000013DE ; ---------------------------------------------------------------------------
.text:000013DF                 db 9 dup(0CCh)
.text:000013E8
.text:000013E8 ; =============== S U B R O U T I N E =======================================
.text:000013E8
.text:000013E8 ; Attributes: bp-based frame
.text:000013E8
.text:000013E8                 public _bufchain_fetch
.text:000013E8 _bufchain_fetch proc near
.text:000013E8
.text:000013E8 Size            = dword ptr -0Ch
.text:000013E8 Dst             = dword ptr -8
.text:000013E8 var_4           = dword ptr -4
.text:000013E8 arg_0           = dword ptr  8
.text:000013E8 arg_4           = dword ptr  0Ch
.text:000013E8 arg_8           = dword ptr  10h
.text:000013E8
.text:000013E8                 push    ebp
.text:000013E9                 mov     ebp, esp
.text:000013EB                 sub     esp, 0Ch
.text:000013EE                 mov     [ebp+Size], 0CCCCCCCCh
.text:000013F5                 mov     [ebp+Dst], 0CCCCCCCCh
.text:000013FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001403                 mov     eax, [ebp+arg_4]
.text:00001406                 mov     [ebp+Dst], eax
.text:00001409                 mov     ecx, [ebp+arg_0]
.text:0000140C                 mov     edx, [ecx]
.text:0000140E                 mov     [ebp+var_4], edx
.text:00001411                 mov     eax, [ebp+arg_0]
.text:00001414                 mov     ecx, [eax+8]
.text:00001417                 cmp     ecx, [ebp+arg_8]
.text:0000141A                 jge     short loc_1433
.text:0000141C                 push    297h            ; Line
.text:00001421                 push    offset $SG85943 ; "..\\..\\..\\misc.c"
.text:00001426                 push    offset $SG85944 ; "ch->buffersize >= len"
.text:0000142B                 call    __wassert
.text:00001430 ; ---------------------------------------------------------------------------
.text:00001430                 add     esp, 0Ch
.text:00001433
.text:00001433 loc_1433:                               ; CODE XREF: _bufchain_fetch+32j
.text:00001433                                         ; _bufchain_fetch+C5j
.text:00001433                 cmp     [ebp+arg_8], 0
.text:00001437                 jle     short loc_14AF
.text:00001439                 mov     eax, [ebp+arg_8]
.text:0000143C                 mov     [ebp+Size], eax
.text:0000143F                 cmp     [ebp+var_4], 0
.text:00001443                 jnz     short loc_145C
.text:00001445                 push    29Bh            ; Line
.text:0000144A                 push    offset $SG85951 ; "..\\..\\..\\misc.c"
.text:0000144F                 push    offset $SG85952 ; "tmp != NULL"
.text:00001454                 call    __wassert
.text:00001459 ; ---------------------------------------------------------------------------
.text:00001459                 add     esp, 0Ch
.text:0000145C
.text:0000145C loc_145C:                               ; CODE XREF: _bufchain_fetch+5Bj
.text:0000145C                 mov     edx, [ebp+var_4]
.text:0000145F                 mov     eax, [ebp+var_4]
.text:00001462                 mov     ecx, [edx+8]
.text:00001465                 sub     ecx, [eax+4]
.text:00001468                 cmp     [ebp+Size], ecx
.text:0000146B                 jl      short loc_147C
.text:0000146D                 mov     edx, [ebp+var_4]
.text:00001470                 mov     eax, [ebp+var_4]
.text:00001473                 mov     ecx, [edx+8]
.text:00001476                 sub     ecx, [eax+4]
.text:00001479                 mov     [ebp+Size], ecx
.text:0000147C
.text:0000147C loc_147C:                               ; CODE XREF: _bufchain_fetch+83j
.text:0000147C                 mov     edx, [ebp+Size]
.text:0000147F                 push    edx             ; Size
.text:00001480                 mov     eax, [ebp+var_4]
.text:00001483                 mov     ecx, [eax+4]
.text:00001486                 push    ecx             ; Src
.text:00001487                 mov     edx, [ebp+Dst]
.text:0000148A                 push    edx             ; Dst
.text:0000148B                 call    _memcpy
.text:00001490                 add     esp, 0Ch
.text:00001493                 mov     eax, [ebp+var_4]
.text:00001496                 mov     ecx, [eax]
.text:00001498                 mov     [ebp+var_4], ecx
.text:0000149B                 mov     edx, [ebp+arg_8]
.text:0000149E                 sub     edx, [ebp+Size]
.text:000014A1                 mov     [ebp+arg_8], edx
.text:000014A4                 mov     eax, [ebp+Dst]
.text:000014A7                 add     eax, [ebp+Size]
.text:000014AA                 mov     [ebp+Dst], eax
.text:000014AD                 jmp     short loc_1433
.text:000014AF ; ---------------------------------------------------------------------------
.text:000014AF
.text:000014AF loc_14AF:                               ; CODE XREF: _bufchain_fetch+4Fj
.text:000014AF                 add     esp, 0Ch
.text:000014B2                 cmp     ebp, esp
.text:000014B4                 call    __RTC_CheckEsp
.text:000014B9                 mov     esp, ebp
.text:000014BB                 pop     ebp
.text:000014BC                 retn
.text:000014BC _bufchain_fetch endp
.text:000014BC
.text:000014BC ; ---------------------------------------------------------------------------
.text:000014BD                 db 0Bh dup(0CCh)
.text:000014C8
.text:000014C8 ; =============== S U B R O U T I N E =======================================
.text:000014C8
.text:000014C8 ; Attributes: bp-based frame
.text:000014C8
.text:000014C8 ; int __cdecl safemalloc(int, size_t Size)
.text:000014C8                 public _safemalloc
.text:000014C8 _safemalloc     proc near               ; CODE XREF: _new_prompts+Fp
.text:000014C8                                         ; _add_prompt+Fp ...
.text:000014C8
.text:000014C8 var_D8          = byte ptr -0D8h
.text:000014C8 Dest            = byte ptr -0D4h
.text:000014C8 var_8           = dword ptr -8
.text:000014C8 var_4           = dword ptr -4
.text:000014C8 arg_0           = dword ptr  8
.text:000014C8 Size            = dword ptr  0Ch
.text:000014C8
.text:000014C8                 push    ebp
.text:000014C9                 mov     ebp, esp
.text:000014CB                 sub     esp, 0D8h
.text:000014D1                 push    edi
.text:000014D2                 lea     edi, [ebp+var_D8]
.text:000014D8                 mov     ecx, 36h ; '6'
.text:000014DD                 mov     eax, 0CCCCCCCCh
.text:000014E2                 rep stosd
.text:000014E4                 mov     eax, dword ptr ds:___security_cookie
.text:000014E9                 xor     eax, ebp
.text:000014EB                 mov     [ebp+var_4], eax
.text:000014EE                 mov     eax, 7FFFFFFFh
.text:000014F3                 xor     edx, edx
.text:000014F5                 div     [ebp+Size]
.text:000014F8                 cmp     [ebp+arg_0], eax
.text:000014FB                 jbe     short loc_1506
.text:000014FD                 mov     [ebp+var_8], 0
.text:00001504                 jmp     short loc_152C
.text:00001506 ; ---------------------------------------------------------------------------
.text:00001506
.text:00001506 loc_1506:                               ; CODE XREF: _safemalloc+33j
.text:00001506                 mov     eax, [ebp+Size]
.text:00001509                 imul    eax, [ebp+arg_0]
.text:0000150D                 mov     [ebp+Size], eax
.text:00001510                 cmp     [ebp+Size], 0
.text:00001514                 jnz     short loc_151D
.text:00001516                 mov     [ebp+Size], 1
.text:0000151D
.text:0000151D loc_151D:                               ; CODE XREF: _safemalloc+4Cj
.text:0000151D                 mov     ecx, [ebp+Size]
.text:00001520                 push    ecx             ; Size
.text:00001521                 call    _malloc
.text:00001526                 add     esp, 4
.text:00001529                 mov     [ebp+var_8], eax
.text:0000152C
.text:0000152C loc_152C:                               ; CODE XREF: _safemalloc+3Cj
.text:0000152C                 cmp     [ebp+var_8], 0
.text:00001530                 jnz     short loc_1555
.text:00001532                 push    offset $SG85966 ; "Out of memory!"
.text:00001537                 lea     edx, [ebp+Dest]
.text:0000153D                 push    edx             ; Dest
.text:0000153E                 call    _strcpy
.text:00001543                 add     esp, 8
.text:00001546                 lea     eax, [ebp+Dest]
.text:0000154C                 push    eax
.text:0000154D                 call    _modalfatalbox
.text:00001552                 add     esp, 4
.text:00001555
.text:00001555 loc_1555:                               ; CODE XREF: _safemalloc+68j
.text:00001555                 mov     eax, [ebp+var_8]
.text:00001558                 push    edx
.text:00001559                 mov     ecx, ebp
.text:0000155B                 push    eax
.text:0000155C                 lea     edx, $LN9_0
.text:00001562                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001567                 pop     eax
.text:00001568                 pop     edx
.text:00001569                 pop     edi
.text:0000156A                 mov     ecx, [ebp+var_4]
.text:0000156D                 xor     ecx, ebp
.text:0000156F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001574                 add     esp, 0D8h
.text:0000157A                 cmp     ebp, esp
.text:0000157C                 call    __RTC_CheckEsp
.text:00001581                 mov     esp, ebp
.text:00001583                 pop     ebp
.text:00001584                 retn
.text:00001584 _safemalloc     endp
.text:00001584
.text:00001584 ; ---------------------------------------------------------------------------
.text:00001585                 align 4
.text:00001588 $LN9_0          dd 1                    ; DATA XREF: _safemalloc+94o
.text:0000158C                 dd offset $LN8
.text:00001590 $LN8            dd 0FFFFFF2Ch, 0C8h     ; DATA XREF: .text:0000158Co
.text:00001598                 dd offset $LN7
.text:0000159C $LN7            dd 727473h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001598o
.text:000015A8
.text:000015A8 ; =============== S U B R O U T I N E =======================================
.text:000015A8
.text:000015A8 ; Attributes: bp-based frame
.text:000015A8
.text:000015A8 ; int __cdecl saferealloc(void *Memory, int, size_t Size)
.text:000015A8                 public _saferealloc
.text:000015A8 _saferealloc    proc near               ; CODE XREF: _add_prompt+5Ep
.text:000015A8                                         ; _dupvprintf+94p ...
.text:000015A8
.text:000015A8 var_D8          = byte ptr -0D8h
.text:000015A8 Dest            = byte ptr -0D4h
.text:000015A8 var_8           = dword ptr -8
.text:000015A8 var_4           = dword ptr -4
.text:000015A8 Memory          = dword ptr  8
.text:000015A8 arg_4           = dword ptr  0Ch
.text:000015A8 Size            = dword ptr  10h
.text:000015A8
.text:000015A8                 push    ebp
.text:000015A9                 mov     ebp, esp
.text:000015AB                 sub     esp, 0D8h
.text:000015B1                 push    edi
.text:000015B2                 lea     edi, [ebp+var_D8]
.text:000015B8                 mov     ecx, 36h ; '6'
.text:000015BD                 mov     eax, 0CCCCCCCCh
.text:000015C2                 rep stosd
.text:000015C4                 mov     eax, dword ptr ds:___security_cookie
.text:000015C9                 xor     eax, ebp
.text:000015CB                 mov     [ebp+var_4], eax
.text:000015CE                 mov     eax, 7FFFFFFFh
.text:000015D3                 xor     edx, edx
.text:000015D5                 div     [ebp+Size]
.text:000015D8                 cmp     [ebp+arg_4], eax
.text:000015DB                 jbe     short loc_15E6
.text:000015DD                 mov     [ebp+var_8], 0
.text:000015E4                 jmp     short loc_161A
.text:000015E6 ; ---------------------------------------------------------------------------
.text:000015E6
.text:000015E6 loc_15E6:                               ; CODE XREF: _saferealloc+33j
.text:000015E6                 mov     eax, [ebp+Size]
.text:000015E9                 imul    eax, [ebp+arg_4]
.text:000015ED                 mov     [ebp+Size], eax
.text:000015F0                 cmp     [ebp+Memory], 0
.text:000015F4                 jnz     short loc_1607
.text:000015F6                 mov     ecx, [ebp+Size]
.text:000015F9                 push    ecx             ; Size
.text:000015FA                 call    _malloc
.text:000015FF                 add     esp, 4
.text:00001602                 mov     [ebp+var_8], eax
.text:00001605                 jmp     short loc_161A
.text:00001607 ; ---------------------------------------------------------------------------
.text:00001607
.text:00001607 loc_1607:                               ; CODE XREF: _saferealloc+4Cj
.text:00001607                 mov     edx, [ebp+Size]
.text:0000160A                 push    edx             ; NewSize
.text:0000160B                 mov     eax, [ebp+Memory]
.text:0000160E                 push    eax             ; Memory
.text:0000160F                 call    _realloc
.text:00001614                 add     esp, 8
.text:00001617                 mov     [ebp+var_8], eax
.text:0000161A
.text:0000161A loc_161A:                               ; CODE XREF: _saferealloc+3Cj
.text:0000161A                                         ; _saferealloc+5Dj
.text:0000161A                 cmp     [ebp+var_8], 0
.text:0000161E                 jnz     short loc_1643
.text:00001620                 push    offset $SG85982 ; "Out of memory!"
.text:00001625                 lea     ecx, [ebp+Dest]
.text:0000162B                 push    ecx             ; Dest
.text:0000162C                 call    _strcpy
.text:00001631                 add     esp, 8
.text:00001634                 lea     edx, [ebp+Dest]
.text:0000163A                 push    edx
.text:0000163B                 call    _modalfatalbox
.text:00001640                 add     esp, 4
.text:00001643
.text:00001643 loc_1643:                               ; CODE XREF: _saferealloc+76j
.text:00001643                 mov     eax, [ebp+var_8]
.text:00001646                 push    edx
.text:00001647                 mov     ecx, ebp
.text:00001649                 push    eax
.text:0000164A                 lea     edx, $LN10
.text:00001650                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001655                 pop     eax
.text:00001656                 pop     edx
.text:00001657                 pop     edi
.text:00001658                 mov     ecx, [ebp+var_4]
.text:0000165B                 xor     ecx, ebp
.text:0000165D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001662                 add     esp, 0D8h
.text:00001668                 cmp     ebp, esp
.text:0000166A                 call    __RTC_CheckEsp
.text:0000166F                 mov     esp, ebp
.text:00001671                 pop     ebp
.text:00001672                 retn
.text:00001672 _saferealloc    endp
.text:00001672
.text:00001672 ; ---------------------------------------------------------------------------
.text:00001673                 align 4
.text:00001674 $LN10           dd 1                    ; DATA XREF: _saferealloc+A2o
.text:00001678                 dd offset $LN9_1
.text:0000167C $LN9_1          dd 0FFFFFF2Ch, 0C8h     ; DATA XREF: .text:00001678o
.text:00001684                 dd offset $LN8_0
.text:00001688 $LN8_0          dd 727473h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00001684o
.text:00001698
.text:00001698 ; =============== S U B R O U T I N E =======================================
.text:00001698
.text:00001698 ; Attributes: bp-based frame
.text:00001698
.text:00001698 ; int __cdecl safefree(void *Memory)
.text:00001698                 public _safefree
.text:00001698 _safefree       proc near               ; CODE XREF: _prompt_ensure_result_size+75p
.text:00001698                                         ; _free_prompts+5Dp ...
.text:00001698
.text:00001698 Memory          = dword ptr  8
.text:00001698
.text:00001698                 push    ebp
.text:00001699                 mov     ebp, esp
.text:0000169B                 cmp     [ebp+Memory], 0
.text:0000169F                 jz      short loc_16AD
.text:000016A1                 mov     eax, [ebp+Memory]
.text:000016A4                 push    eax             ; Memory
.text:000016A5                 call    _free
.text:000016AA                 add     esp, 4
.text:000016AD
.text:000016AD loc_16AD:                               ; CODE XREF: _safefree+7j
.text:000016AD                 cmp     ebp, esp
.text:000016AF                 call    __RTC_CheckEsp
.text:000016B4                 pop     ebp
.text:000016B5                 retn
.text:000016B5 _safefree       endp
.text:000016B5
.text:000016B5 ; ---------------------------------------------------------------------------
.text:000016B6                 align 4
.text:000016B8
.text:000016B8 ; =============== S U B R O U T I N E =======================================
.text:000016B8
.text:000016B8 ; Attributes: bp-based frame
.text:000016B8
.text:000016B8                 public _conf_launchable
.text:000016B8 _conf_launchable proc near
.text:000016B8
.text:000016B8 arg_0           = dword ptr  8
.text:000016B8
.text:000016B8                 push    ebp
.text:000016B9                 mov     ebp, esp
.text:000016BB                 push    2
.text:000016BD                 mov     eax, [ebp+arg_0]
.text:000016C0                 push    eax
.text:000016C1                 call    _conf_get_int
.text:000016C6                 add     esp, 8
.text:000016C9                 cmp     eax, 4
.text:000016CC                 jnz     short loc_16E9
.text:000016CE                 push    37h ; '7'
.text:000016D0                 mov     ecx, [ebp+arg_0]
.text:000016D3                 push    ecx
.text:000016D4                 call    _conf_get_str
.text:000016D9                 add     esp, 8
.text:000016DC                 movsx   eax, byte ptr [eax]
.text:000016DF                 neg     eax
.text:000016E1                 sbb     eax, eax
.text:000016E3                 neg     eax
.text:000016E5                 jmp     short loc_1700
.text:000016E7 ; ---------------------------------------------------------------------------
.text:000016E7                 jmp     short loc_1700
.text:000016E9 ; ---------------------------------------------------------------------------
.text:000016E9
.text:000016E9 loc_16E9:                               ; CODE XREF: _conf_launchable+14j
.text:000016E9                 push    0
.text:000016EB                 mov     edx, [ebp+arg_0]
.text:000016EE                 push    edx
.text:000016EF                 call    _conf_get_str
.text:000016F4                 add     esp, 8
.text:000016F7                 movsx   eax, byte ptr [eax]
.text:000016FA                 neg     eax
.text:000016FC                 sbb     eax, eax
.text:000016FE                 neg     eax
.text:00001700
.text:00001700 loc_1700:                               ; CODE XREF: _conf_launchable+2Dj
.text:00001700                                         ; _conf_launchable+2Fj
.text:00001700                 cmp     ebp, esp
.text:00001702                 call    __RTC_CheckEsp
.text:00001707                 pop     ebp
.text:00001708                 retn
.text:00001708 _conf_launchable endp
.text:00001708
.text:00001708 ; ---------------------------------------------------------------------------
.text:00001709                 db 0Fh dup(0CCh)
.text:00001718
.text:00001718 ; =============== S U B R O U T I N E =======================================
.text:00001718
.text:00001718 ; Attributes: bp-based frame
.text:00001718
.text:00001718                 public _conf_dest
.text:00001718 _conf_dest      proc near
.text:00001718
.text:00001718 arg_0           = dword ptr  8
.text:00001718
.text:00001718                 push    ebp
.text:00001719                 mov     ebp, esp
.text:0000171B                 push    2
.text:0000171D                 mov     eax, [ebp+arg_0]
.text:00001720                 push    eax
.text:00001721                 call    _conf_get_int
.text:00001726                 add     esp, 8
.text:00001729                 cmp     eax, 4
.text:0000172C                 jnz     short loc_1740
.text:0000172E                 push    37h ; '7'
.text:00001730                 mov     ecx, [ebp+arg_0]
.text:00001733                 push    ecx
.text:00001734                 call    _conf_get_str
.text:00001739                 add     esp, 8
.text:0000173C                 jmp     short loc_174E
.text:0000173E ; ---------------------------------------------------------------------------
.text:0000173E                 jmp     short loc_174E
.text:00001740 ; ---------------------------------------------------------------------------
.text:00001740
.text:00001740 loc_1740:                               ; CODE XREF: _conf_dest+14j
.text:00001740                 push    0
.text:00001742                 mov     edx, [ebp+arg_0]
.text:00001745                 push    edx
.text:00001746                 call    _conf_get_str
.text:0000174B                 add     esp, 8
.text:0000174E
.text:0000174E loc_174E:                               ; CODE XREF: _conf_dest+24j
.text:0000174E                                         ; _conf_dest+26j
.text:0000174E                 cmp     ebp, esp
.text:00001750                 call    __RTC_CheckEsp
.text:00001755                 pop     ebp
.text:00001756                 retn
.text:00001756 _conf_dest      endp
.text:00001756
.text:00001756 ; ---------------------------------------------------------------------------
.text:00001757                 align 4
.text:00001758
.text:00001758 ; =============== S U B R O U T I N E =======================================
.text:00001758
.text:00001758 ; Attributes: bp-based frame
.text:00001758
.text:00001758 ; int __cdecl validate_manual_hostkey(char *Dest)
.text:00001758                 public _validate_manual_hostkey
.text:00001758 _validate_manual_hostkey proc near
.text:00001758
.text:00001758 var_34          = dword ptr -34h
.text:00001758 var_30          = dword ptr -30h
.text:00001758 var_2C          = dword ptr -2Ch
.text:00001758 var_24          = byte ptr -24h
.text:00001758 var_23          = byte ptr -23h
.text:00001758 var_22          = byte ptr -22h
.text:00001758 var_21          = byte ptr -21h
.text:00001758 var_18          = dword ptr -18h
.text:00001758 var_14          = dword ptr -14h
.text:00001758 var_10          = dword ptr -10h
.text:00001758 Source          = dword ptr -0Ch
.text:00001758 Str             = dword ptr -8
.text:00001758 var_4           = dword ptr -4
.text:00001758 Dest            = dword ptr  8
.text:00001758
.text:00001758                 push    ebp
.text:00001759                 mov     ebp, esp
.text:0000175B                 sub     esp, 34h
.text:0000175E                 push    edi
.text:0000175F                 lea     edi, [ebp+var_34]
.text:00001762                 mov     ecx, 0Dh
.text:00001767                 mov     eax, 0CCCCCCCCh
.text:0000176C                 rep stosd
.text:0000176E                 mov     eax, dword ptr ds:___security_cookie
.text:00001773                 xor     eax, ebp
.text:00001775                 mov     [ebp+var_4], eax
.text:00001778                 mov     eax, [ebp+Dest]
.text:0000177B                 mov     [ebp+Str], eax
.text:0000177E
.text:0000177E loc_177E:                               ; CODE XREF: _validate_manual_hostkey:$not_ssh2_blob$86037j
.text:0000177E                 push    offset $SG86007 ; Control
.text:00001783                 mov     ecx, [ebp+Str]
.text:00001786                 push    ecx             ; Str
.text:00001787                 call    _strspn
.text:0000178C                 add     esp, 8
.text:0000178F                 add     eax, [ebp+Str]
.text:00001792                 mov     [ebp+Str], eax
.text:00001795                 mov     edx, [ebp+Str]
.text:00001798                 movsx   eax, byte ptr [edx]
.text:0000179B                 test    eax, eax
.text:0000179D                 jz      loc_1A23
.text:000017A3                 mov     ecx, [ebp+Str]
.text:000017A6                 mov     [ebp+Source], ecx
.text:000017A9                 push    offset $SG86008 ; Control
.text:000017AE                 mov     edx, [ebp+Str]
.text:000017B1                 push    edx             ; Str
.text:000017B2                 call    _strcspn
.text:000017B7                 add     esp, 8
.text:000017BA                 add     eax, [ebp+Str]
.text:000017BD                 mov     [ebp+Str], eax
.text:000017C0                 mov     eax, [ebp+Str]
.text:000017C3                 movsx   ecx, byte ptr [eax]
.text:000017C6                 test    ecx, ecx
.text:000017C8                 jz      short loc_17D9
.text:000017CA                 mov     edx, [ebp+Str]
.text:000017CD                 mov     byte ptr [edx], 0
.text:000017D0                 mov     eax, [ebp+Str]
.text:000017D3                 add     eax, 1
.text:000017D6                 mov     [ebp+Str], eax
.text:000017D9
.text:000017D9 loc_17D9:                               ; CODE XREF: _validate_manual_hostkey+70j
.text:000017D9                 mov     ecx, [ebp+Source]
.text:000017DC                 push    ecx             ; Str
.text:000017DD                 call    _strlen
.text:000017E2                 add     esp, 4
.text:000017E5                 cmp     eax, 2Fh ; '/'
.text:000017E8                 jnz     $not_fingerprint$86018
.text:000017EE                 push    offset $SG86011 ; "0123456789abcdefABCDEF:"
.text:000017F3                 mov     edx, [ebp+Source]
.text:000017F6                 push    edx             ; Str
.text:000017F7                 call    _strspn
.text:000017FC                 add     esp, 8
.text:000017FF                 mov     ecx, [ebp+Source]
.text:00001802                 movsx   edx, byte ptr [ecx+eax]
.text:00001806                 test    edx, edx
.text:00001808                 jnz     $not_fingerprint$86018
.text:0000180E                 mov     [ebp+var_18], 0
.text:00001815                 jmp     short loc_1820
.text:00001817 ; ---------------------------------------------------------------------------
.text:00001817
.text:00001817 loc_1817:                               ; CODE XREF: _validate_manual_hostkey:loc_184Dj
.text:00001817                 mov     eax, [ebp+var_18]
.text:0000181A                 add     eax, 1
.text:0000181D                 mov     [ebp+var_18], eax
.text:00001820
.text:00001820 loc_1820:                               ; CODE XREF: _validate_manual_hostkey+BDj
.text:00001820                 cmp     [ebp+var_18], 10h
.text:00001824                 jge     short loc_184F
.text:00001826                 mov     ecx, [ebp+var_18]
.text:00001829                 imul    ecx, 3
.text:0000182C                 mov     edx, [ebp+Source]
.text:0000182F                 movsx   eax, byte ptr [edx+ecx]
.text:00001833                 cmp     eax, 3Ah ; ':'
.text:00001836                 jz      short loc_184B
.text:00001838                 mov     ecx, [ebp+var_18]
.text:0000183B                 imul    ecx, 3
.text:0000183E                 mov     edx, [ebp+Source]
.text:00001841                 movsx   eax, byte ptr [edx+ecx+1]
.text:00001846                 cmp     eax, 3Ah ; ':'
.text:00001849                 jnz     short loc_184D
.text:0000184B
.text:0000184B loc_184B:                               ; CODE XREF: _validate_manual_hostkey+DEj
.text:0000184B                 jmp     short $not_fingerprint$86018
.text:0000184D ; ---------------------------------------------------------------------------
.text:0000184D
.text:0000184D loc_184D:                               ; CODE XREF: _validate_manual_hostkey+F1j
.text:0000184D                 jmp     short loc_1817
.text:0000184F ; ---------------------------------------------------------------------------
.text:0000184F
.text:0000184F loc_184F:                               ; CODE XREF: _validate_manual_hostkey+CCj
.text:0000184F                 mov     [ebp+var_18], 0
.text:00001856                 jmp     short loc_1861
.text:00001858 ; ---------------------------------------------------------------------------
.text:00001858
.text:00001858 loc_1858:                               ; CODE XREF: _validate_manual_hostkey:loc_187Cj
.text:00001858                 mov     ecx, [ebp+var_18]
.text:0000185B                 add     ecx, 1
.text:0000185E                 mov     [ebp+var_18], ecx
.text:00001861
.text:00001861 loc_1861:                               ; CODE XREF: _validate_manual_hostkey+FEj
.text:00001861                 cmp     [ebp+var_18], 0Fh
.text:00001865                 jge     short loc_187E
.text:00001867                 mov     edx, [ebp+var_18]
.text:0000186A                 imul    edx, 3
.text:0000186D                 mov     eax, [ebp+Source]
.text:00001870                 movsx   ecx, byte ptr [eax+edx+2]
.text:00001875                 cmp     ecx, 3Ah ; ':'
.text:00001878                 jz      short loc_187C
.text:0000187A                 jmp     short $not_fingerprint$86018
.text:0000187C ; ---------------------------------------------------------------------------
.text:0000187C
.text:0000187C loc_187C:                               ; CODE XREF: _validate_manual_hostkey+120j
.text:0000187C                 jmp     short loc_1858
.text:0000187E ; ---------------------------------------------------------------------------
.text:0000187E
.text:0000187E loc_187E:                               ; CODE XREF: _validate_manual_hostkey+10Dj
.text:0000187E                 mov     [ebp+var_18], 0
.text:00001885                 jmp     short loc_1890
.text:00001887 ; ---------------------------------------------------------------------------
.text:00001887
.text:00001887 loc_1887:                               ; CODE XREF: _validate_manual_hostkey+158j
.text:00001887                 mov     edx, [ebp+var_18]
.text:0000188A                 add     edx, 1
.text:0000188D                 mov     [ebp+var_18], edx
.text:00001890
.text:00001890 loc_1890:                               ; CODE XREF: _validate_manual_hostkey+12Dj
.text:00001890                 cmp     [ebp+var_18], 2Fh ; '/'
.text:00001894                 jge     short loc_18B2
.text:00001896                 mov     eax, [ebp+Source]
.text:00001899                 add     eax, [ebp+var_18]
.text:0000189C                 movsx   ecx, byte ptr [eax]
.text:0000189F                 push    ecx             ; C
.text:000018A0                 call    _tolower
.text:000018A5                 add     esp, 4
.text:000018A8                 mov     edx, [ebp+Dest]
.text:000018AB                 add     edx, [ebp+var_18]
.text:000018AE                 mov     [edx], al
.text:000018B0                 jmp     short loc_1887
.text:000018B2 ; ---------------------------------------------------------------------------
.text:000018B2
.text:000018B2 loc_18B2:                               ; CODE XREF: _validate_manual_hostkey+13Cj
.text:000018B2                 mov     eax, [ebp+Dest]
.text:000018B5                 mov     byte ptr [eax+2Fh], 0
.text:000018B9                 mov     eax, 1
.text:000018BE                 jmp     loc_1A25
.text:000018C3 ; ---------------------------------------------------------------------------
.text:000018C3
.text:000018C3 $not_fingerprint$86018:                 ; CODE XREF: _validate_manual_hostkey+90j
.text:000018C3                                         ; _validate_manual_hostkey+B0j ...
.text:000018C3                 mov     ecx, [ebp+Source]
.text:000018C6                 mov     [ebp+var_14], ecx
.text:000018C9                 mov     edx, [ebp+var_14]
.text:000018CC                 mov     [ebp+var_10], edx
.text:000018CF                 jmp     short loc_18DA
.text:000018D1 ; ---------------------------------------------------------------------------
.text:000018D1
.text:000018D1 loc_18D1:                               ; CODE XREF: _validate_manual_hostkey:loc_190Dj
.text:000018D1                 mov     eax, [ebp+var_10]
.text:000018D4                 add     eax, 1
.text:000018D7                 mov     [ebp+var_10], eax
.text:000018DA
.text:000018DA loc_18DA:                               ; CODE XREF: _validate_manual_hostkey+177j
.text:000018DA                 mov     ecx, [ebp+var_10]
.text:000018DD                 movsx   edx, byte ptr [ecx]
.text:000018E0                 test    edx, edx
.text:000018E2                 jz      short loc_190F
.text:000018E4                 mov     eax, [ebp+var_10]
.text:000018E7                 movsx   ecx, byte ptr [eax]
.text:000018EA                 cmp     ecx, 0Ah
.text:000018ED                 jz      short loc_190D
.text:000018EF                 mov     edx, [ebp+var_10]
.text:000018F2                 movsx   eax, byte ptr [edx]
.text:000018F5                 cmp     eax, 0Dh
.text:000018F8                 jz      short loc_190D
.text:000018FA                 mov     ecx, [ebp+var_14]
.text:000018FD                 mov     edx, [ebp+var_10]
.text:00001900                 mov     al, [edx]
.text:00001902                 mov     [ecx], al
.text:00001904                 mov     ecx, [ebp+var_14]
.text:00001907                 add     ecx, 1
.text:0000190A                 mov     [ebp+var_14], ecx
.text:0000190D
.text:0000190D loc_190D:                               ; CODE XREF: _validate_manual_hostkey+195j
.text:0000190D                                         ; _validate_manual_hostkey+1A0j
.text:0000190D                 jmp     short loc_18D1
.text:0000190F ; ---------------------------------------------------------------------------
.text:0000190F
.text:0000190F loc_190F:                               ; CODE XREF: _validate_manual_hostkey+18Aj
.text:0000190F                 mov     edx, [ebp+var_14]
.text:00001912                 mov     byte ptr [edx], 0
.text:00001915                 mov     eax, [ebp+Source]
.text:00001918                 push    eax             ; Str
.text:00001919                 call    _strlen
.text:0000191E                 add     esp, 4
.text:00001921                 xor     edx, edx
.text:00001923                 mov     ecx, 4
.text:00001928                 div     ecx
.text:0000192A                 test    edx, edx
.text:0000192C                 jnz     $not_ssh2_blob$86037
.text:00001932                 mov     edx, [ebp+Source]
.text:00001935                 push    edx             ; Str
.text:00001936                 call    _strlen
.text:0000193B                 add     esp, 4
.text:0000193E                 cmp     eax, 8
.text:00001941                 jbe     $not_ssh2_blob$86037
.text:00001947                 push    offset $SG86031 ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"...
.text:0000194C                 mov     eax, [ebp+Source]
.text:0000194F                 push    eax             ; Str
.text:00001950                 call    _strspn
.text:00001955                 add     esp, 8
.text:00001958                 mov     ecx, [ebp+Source]
.text:0000195B                 movsx   edx, byte ptr [ecx+eax]
.text:0000195F                 test    edx, edx
.text:00001961                 jnz     $not_ssh2_blob$86037
.text:00001967                 mov     [ebp+var_34], 0
.text:0000196E                 mov     eax, [ebp+var_34]
.text:00001971                 lea     ecx, [ebp+eax+var_24]
.text:00001975                 push    ecx
.text:00001976                 mov     edx, [ebp+Source]
.text:00001979                 push    edx
.text:0000197A                 call    _base64_decode_atom
.text:0000197F                 add     esp, 8
.text:00001982                 add     eax, [ebp+var_34]
.text:00001985                 mov     [ebp+var_34], eax
.text:00001988                 cmp     [ebp+var_34], 3
.text:0000198C                 jge     short loc_1993
.text:0000198E                 jmp     $not_ssh2_blob$86037
.text:00001993 ; ---------------------------------------------------------------------------
.text:00001993
.text:00001993 loc_1993:                               ; CODE XREF: _validate_manual_hostkey+234j
.text:00001993                 mov     eax, [ebp+var_34]
.text:00001996                 lea     ecx, [ebp+eax+var_24]
.text:0000199A                 push    ecx
.text:0000199B                 mov     edx, [ebp+Source]
.text:0000199E                 add     edx, 4
.text:000019A1                 push    edx
.text:000019A2                 call    _base64_decode_atom
.text:000019A7                 add     esp, 8
.text:000019AA                 add     eax, [ebp+var_34]
.text:000019AD                 mov     [ebp+var_34], eax
.text:000019B0                 cmp     [ebp+var_34], 4
.text:000019B4                 jge     short loc_19B8
.text:000019B6                 jmp     short $not_ssh2_blob$86037
.text:000019B8 ; ---------------------------------------------------------------------------
.text:000019B8
.text:000019B8 loc_19B8:                               ; CODE XREF: _validate_manual_hostkey+25Cj
.text:000019B8                 movzx   eax, [ebp+var_24]
.text:000019BC                 shl     eax, 18h
.text:000019BF                 movzx   ecx, [ebp+var_23]
.text:000019C3                 shl     ecx, 10h
.text:000019C6                 or      eax, ecx
.text:000019C8                 movzx   edx, [ebp+var_22]
.text:000019CC                 shl     edx, 8
.text:000019CF                 or      eax, edx
.text:000019D1                 movzx   ecx, [ebp+var_21]
.text:000019D5                 or      eax, ecx
.text:000019D7                 mov     [ebp+var_2C], eax
.text:000019DA                 cmp     [ebp+var_2C], 40h ; '@'
.text:000019DE                 jbe     short loc_19E2
.text:000019E0                 jmp     short $not_ssh2_blob$86037
.text:000019E2 ; ---------------------------------------------------------------------------
.text:000019E2
.text:000019E2 loc_19E2:                               ; CODE XREF: _validate_manual_hostkey+286j
.text:000019E2                 mov     eax, [ebp+var_2C]
.text:000019E5                 add     eax, 6
.text:000019E8                 xor     edx, edx
.text:000019EA                 mov     ecx, 3
.text:000019EF                 div     ecx
.text:000019F1                 mov     [ebp+var_30], eax
.text:000019F4                 mov     edx, [ebp+Source]
.text:000019F7                 push    edx             ; Str
.text:000019F8                 call    _strlen
.text:000019FD                 add     esp, 4
.text:00001A00                 cmp     eax, [ebp+var_30]
.text:00001A03                 jnb     short loc_1A07
.text:00001A05                 jmp     short $not_ssh2_blob$86037
.text:00001A07 ; ---------------------------------------------------------------------------
.text:00001A07
.text:00001A07 loc_1A07:                               ; CODE XREF: _validate_manual_hostkey+2ABj
.text:00001A07                 mov     eax, [ebp+Source]
.text:00001A0A                 push    eax             ; Source
.text:00001A0B                 mov     ecx, [ebp+Dest]
.text:00001A0E                 push    ecx             ; Dest
.text:00001A0F                 call    _strcpy
.text:00001A14                 add     esp, 8
.text:00001A17                 mov     eax, 1
.text:00001A1C                 jmp     short loc_1A25
.text:00001A1E ; ---------------------------------------------------------------------------
.text:00001A1E
.text:00001A1E $not_ssh2_blob$86037:                   ; CODE XREF: _validate_manual_hostkey+1D4j
.text:00001A1E                                         ; _validate_manual_hostkey+1E9j ...
.text:00001A1E                 jmp     loc_177E
.text:00001A23 ; ---------------------------------------------------------------------------
.text:00001A23
.text:00001A23 loc_1A23:                               ; CODE XREF: _validate_manual_hostkey+45j
.text:00001A23                 xor     eax, eax
.text:00001A25
.text:00001A25 loc_1A25:                               ; CODE XREF: _validate_manual_hostkey+166j
.text:00001A25                                         ; _validate_manual_hostkey+2C4j
.text:00001A25                 push    edx
.text:00001A26                 mov     ecx, ebp
.text:00001A28                 push    eax
.text:00001A29                 lea     edx, $LN30
.text:00001A2F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A34                 pop     eax
.text:00001A35                 pop     edx
.text:00001A36                 pop     edi
.text:00001A37                 mov     ecx, [ebp+var_4]
.text:00001A3A                 xor     ecx, ebp
.text:00001A3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001A41                 add     esp, 34h
.text:00001A44                 cmp     ebp, esp
.text:00001A46                 call    __RTC_CheckEsp
.text:00001A4B                 mov     esp, ebp
.text:00001A4D                 pop     ebp
.text:00001A4E                 retn
.text:00001A4E _validate_manual_hostkey endp
.text:00001A4E
.text:00001A4E ; ---------------------------------------------------------------------------
.text:00001A4F                 align 10h
.text:00001A50 $LN30           dd 1                    ; DATA XREF: _validate_manual_hostkey+2D1o
.text:00001A54                 dd offset $LN29_0
.text:00001A58 $LN29_0         dd 0FFFFFFDCh, 6        ; DATA XREF: .text:00001A54o
.text:00001A60                 dd offset $LN28_0       ; "decoded"
.text:00001A64 $LN28_0         db 'decoded',0          ; DATA XREF: .text:00001A60o
.text:00001A64 _text           ends
.text:00001A64
.rtc$TMZ:00001A6C ; ===========================================================================
.rtc$TMZ:00001A6C
.rtc$TMZ:00001A6C ; Segment type: Pure data
.rtc$TMZ:00001A6C ; Segment permissions: Read
.rtc$TMZ:00001A6C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001A6C                 assume cs:_rtc$TMZ
.rtc$TMZ:00001A6C                 ;org 1A6Ch
.rtc$TMZ:00001A6C ; COMDAT (pick any)
.rtc$TMZ:00001A6C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001A6C _rtc$TMZ        ends
.rtc$TMZ:00001A6C
.rtc$IMZ:00001A70 ; ===========================================================================
.rtc$IMZ:00001A70
.rtc$IMZ:00001A70 ; Segment type: Pure data
.rtc$IMZ:00001A70 ; Segment permissions: Read
.rtc$IMZ:00001A70 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001A70                 assume cs:_rtc$IMZ
.rtc$IMZ:00001A70                 ;org 1A70h
.rtc$IMZ:00001A70 ; COMDAT (pick any)
.rtc$IMZ:00001A70 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001A70 _rtc$IMZ        ends
.rtc$IMZ:00001A70
UNDEF:00001A80 ; ===========================================================================
UNDEF:00001A80
UNDEF:00001A80 ; Segment type: Externs
UNDEF:00001A80 ; UNDEF
UNDEF:00001A80 ; int __cdecl isspace(int C)
UNDEF:00001A80                 extrn _isspace:near     ; CODE XREF: _parse_blocksize+4Ap
UNDEF:00001A84 ; unsigned __int32 __cdecl strtoul(const char *Str, char **EndPtr, int Radix)
UNDEF:00001A84                 extrn _strtoul:near     ; CODE XREF: _parse_blocksize+24p
UNDEF:00001A88                 extrn __RTC_CheckEsp:near ; CODE XREF: _parse_blocksize+C2p
UNDEF:00001A88                                         ; _ctrlparse+142p ...
UNDEF:00001A8C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001A8C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001A8C                                         ; CODE XREF: _parse_blocksize+B6p
UNDEF:00001A8C                                         ; _host_strchr+41p ...
UNDEF:00001A90                 extrn __RTC_Shutdown:near
UNDEF:00001A90                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001A94                 extrn __RTC_InitBase:near
UNDEF:00001A94                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001A98 ; __int32 __cdecl strtol(const char *Str, char **EndPtr, int Radix)
UNDEF:00001A98                 extrn _strtol:near      ; CODE XREF: _ctrlparse+67p
UNDEF:00001A9C ; size_t __cdecl strlen(const char *Str)
UNDEF:00001A9C                 extrn _strlen:near      ; CODE XREF: _host_strcspn+34p
UNDEF:00001A9C                                         ; _prompt_set_result+7p ...
UNDEF:00001AA0 ; char *__cdecl strchr(const char *Str, int Val)
UNDEF:00001AA0                 extrn _strchr:near      ; CODE XREF: _host_strchr_internal+8Ep
UNDEF:00001AA4 ; int __cdecl isxdigit(int C)
UNDEF:00001AA4                 extrn _isxdigit:near    ; CODE XREF: _host_strduptrim+4Fp
UNDEF:00001AA8                 extrn _smemclr:near     ; CODE XREF: _prompt_ensure_result_size+66p
UNDEF:00001AA8                                         ; _free_prompts+4Ep ...
UNDEF:00001AAC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001AAC                 extrn _memcpy:near      ; CODE XREF: _prompt_ensure_result_size+50p
UNDEF:00001AAC                                         ; _bufchain_add+B7p ...
UNDEF:00001AB0 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00001AB0                 extrn _strcpy:near      ; CODE XREF: _prompt_set_result+2Ap
UNDEF:00001AB0                                         ; _dupstr+4Cp ...
UNDEF:00001AB4 ; int __cdecl _vsnprintf(char *Dest, size_t Count, const char *Format, va_list Args)
UNDEF:00001AB4                 extrn __vsnprintf:near  ; CODE XREF: _dupvprintf+4Dp
UNDEF:00001AB8 ; char *__cdecl fgets(char *Buf, int MaxCount, FILE *File)
UNDEF:00001AB8                 extrn _fgets:near       ; CODE XREF: _fgetline+4Dp
UNDEF:00001ABC                 extrn ___security_cookie:near
UNDEF:00001ABC                                         ; DATA XREF: _base64_decode_atom+16r
UNDEF:00001ABC                                         ; _safemalloc+1Cr ...
UNDEF:00001AC0 ; __fastcall __security_check_cookie(x)
UNDEF:00001AC0                 extrn @__security_check_cookie@4:near
UNDEF:00001AC0                                         ; CODE XREF: _base64_decode_atom+1B3p
UNDEF:00001AC0                                         ; _safemalloc+A7p ...
UNDEF:00001AC4 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00001AC4                 extrn __wassert:near    ; CODE XREF: _bufchain_consume+2Ep
UNDEF:00001AC4                                         ; _bufchain_consume+5Dp ...
UNDEF:00001AC8                 extrn _modalfatalbox:near ; CODE XREF: _safemalloc+85p
UNDEF:00001AC8                                         ; _saferealloc+93p
UNDEF:00001ACC ; void *__cdecl malloc(size_t Size)
UNDEF:00001ACC                 extrn _malloc:near      ; CODE XREF: _safemalloc+59p
UNDEF:00001ACC                                         ; _saferealloc+52p
UNDEF:00001AD0 ; void *__cdecl realloc(void *Memory, size_t NewSize)
UNDEF:00001AD0                 extrn _realloc:near     ; CODE XREF: _saferealloc+67p
UNDEF:00001AD4 ; void __cdecl free(void *Memory)
UNDEF:00001AD4                 extrn _free:near        ; CODE XREF: _safefree+Dp
UNDEF:00001AD8                 extrn _conf_get_str:near ; CODE XREF: _conf_launchable+1Cp
UNDEF:00001AD8                                         ; _conf_launchable+37p ...
UNDEF:00001ADC                 extrn _conf_get_int:near ; CODE XREF: _conf_launchable+9p
UNDEF:00001ADC                                         ; _conf_dest+9p
UNDEF:00001AE0 ; int __cdecl tolower(int C)
UNDEF:00001AE0                 extrn _tolower:near     ; CODE XREF: _validate_manual_hostkey+148p
UNDEF:00001AE4 ; size_t __cdecl strcspn(const char *Str, const char *Control)
UNDEF:00001AE4                 extrn _strcspn:near     ; CODE XREF: _validate_manual_hostkey+5Ap
UNDEF:00001AE8 ; size_t __cdecl strspn(const char *Str, const char *Control)
UNDEF:00001AE8                 extrn _strspn:near      ; CODE XREF: _validate_manual_hostkey+2Fp
UNDEF:00001AE8                                         ; _validate_manual_hostkey+9Fp ...
UNDEF:00001AE8
UNDEF:00001AE8
UNDEF:00001AE8                 end