.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 1C3C1AB1968663951DA5996FD72B2E94
.data:00000000 ; Input CRC32 : BAC134B7
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winprint.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85632        db 'PuTTY remote printer output',0
.data:00000000                                         ; DATA XREF: _printer_start_job:loc_3BEo
.data:0000001C $SG85634        db 'RAW',0              ; DATA XREF: _printer_start_job+6Co
.data:0000001C _data           ends
.data:0000001C
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020                 public _printer_start_enum
.text:00000020 _printer_start_enum proc near
.text:00000020
.text:00000020 var_14          = dword ptr -14h
.text:00000020 var_10          = dword ptr -10h
.text:00000020 var_C           = dword ptr -0Ch
.text:00000020 var_8           = dword ptr -8
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 sub     esp, 14h
.text:00000026                 mov     eax, 0CCCCCCCCh
.text:0000002B                 mov     [ebp+var_14], eax
.text:0000002E                 mov     [ebp+var_10], eax
.text:00000031                 mov     [ebp+var_C], eax
.text:00000034                 mov     [ebp+var_8], eax
.text:00000037                 mov     [ebp+var_4], eax
.text:0000003A                 push    0Ch
.text:0000003C                 push    1
.text:0000003E                 call    _safemalloc
.text:00000043                 add     esp, 8
.text:00000046                 mov     [ebp+var_4], eax
.text:00000049                 mov     [ebp+var_C], 0
.text:00000050                 mov     eax, [ebp+arg_0]
.text:00000053                 mov     dword ptr [eax], 0
.text:00000059                 push    1
.text:0000005B                 push    200h
.text:00000060                 call    _safemalloc
.text:00000065                 add     esp, 8
.text:00000068                 mov     [ebp+var_C], eax
.text:0000006B                 cmp     dword ptr ds:_osVersion+10h, 2
.text:00000072                 jz      short loc_80
.text:00000074                 mov     ecx, [ebp+var_4]
.text:00000077                 mov     dword ptr [ecx+4], 5
.text:0000007E                 jmp     short loc_8A
.text:00000080 ; ---------------------------------------------------------------------------
.text:00000080
.text:00000080 loc_80:                                 ; CODE XREF: _printer_start_enum+52j
.text:00000080                 mov     edx, [ebp+var_4]
.text:00000083                 mov     dword ptr [edx+4], 4
.text:0000008A
.text:0000008A loc_8A:                                 ; CODE XREF: _printer_start_enum+5Ej
.text:0000008A                 mov     eax, [ebp+arg_0]
.text:0000008D                 push    eax             ; int
.text:0000008E                 push    0               ; int
.text:00000090                 lea     ecx, [ebp+var_C]
.text:00000093                 push    ecx             ; int
.text:00000094                 mov     edx, [ebp+var_4]
.text:00000097                 mov     eax, [edx+4]
.text:0000009A                 push    eax             ; Level
.text:0000009B                 push    6               ; Flags
.text:0000009D                 call    _printer_add_enum
.text:000000A2                 add     esp, 14h
.text:000000A5                 test    eax, eax
.text:000000A7                 jnz     short loc_AB
.text:000000A9                 jmp     short $error$85581
.text:000000AB ; ---------------------------------------------------------------------------
.text:000000AB
.text:000000AB loc_AB:                                 ; CODE XREF: _printer_start_enum+87j
.text:000000AB                 mov     ecx, [ebp+var_4]
.text:000000AE                 mov     edx, [ecx+4]
.text:000000B1                 mov     [ebp+var_14], edx
.text:000000B4                 cmp     [ebp+var_14], 4
.text:000000B8                 jz      short loc_C2
.text:000000BA                 cmp     [ebp+var_14], 5
.text:000000BE                 jz      short loc_CD
.text:000000C0                 jmp     short loc_D6
.text:000000C2 ; ---------------------------------------------------------------------------
.text:000000C2
.text:000000C2 loc_C2:                                 ; CODE XREF: _printer_start_enum+98j
.text:000000C2                 mov     eax, [ebp+var_4]
.text:000000C5                 mov     ecx, [ebp+var_C]
.text:000000C8                 mov     [eax+8], ecx
.text:000000CB                 jmp     short loc_D6
.text:000000CD ; ---------------------------------------------------------------------------
.text:000000CD
.text:000000CD loc_CD:                                 ; CODE XREF: _printer_start_enum+9Ej
.text:000000CD                 mov     edx, [ebp+var_4]
.text:000000D0                 mov     eax, [ebp+var_C]
.text:000000D3                 mov     [edx+8], eax
.text:000000D6
.text:000000D6 loc_D6:                                 ; CODE XREF: _printer_start_enum+A0j
.text:000000D6                                         ; _printer_start_enum+ABj
.text:000000D6                 mov     ecx, [ebp+var_4]
.text:000000D9                 mov     edx, [ebp+arg_0]
.text:000000DC                 mov     eax, [edx]
.text:000000DE                 mov     [ecx], eax
.text:000000E0                 mov     eax, [ebp+var_4]
.text:000000E3                 jmp     short loc_108
.text:000000E5 ; ---------------------------------------------------------------------------
.text:000000E5
.text:000000E5 $error$85581:                           ; CODE XREF: _printer_start_enum+89j
.text:000000E5                 mov     ecx, [ebp+var_C]
.text:000000E8                 push    ecx
.text:000000E9                 call    _safefree
.text:000000EE                 add     esp, 4
.text:000000F1                 mov     edx, [ebp+var_4]
.text:000000F4                 push    edx
.text:000000F5                 call    _safefree
.text:000000FA                 add     esp, 4
.text:000000FD                 mov     eax, [ebp+arg_0]
.text:00000100                 mov     dword ptr [eax], 0
.text:00000106                 xor     eax, eax
.text:00000108
.text:00000108 loc_108:                                ; CODE XREF: _printer_start_enum+C3j
.text:00000108                 push    edx
.text:00000109                 mov     ecx, ebp
.text:0000010B                 push    eax
.text:0000010C                 lea     edx, $LN12
.text:00000112                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000117                 pop     eax
.text:00000118                 pop     edx
.text:00000119                 add     esp, 14h
.text:0000011C                 cmp     ebp, esp
.text:0000011E                 call    __RTC_CheckEsp
.text:00000123                 mov     esp, ebp
.text:00000125                 pop     ebp
.text:00000126                 retn
.text:00000126 _printer_start_enum endp
.text:00000126
.text:00000126 ; ---------------------------------------------------------------------------
.text:00000127                 align 4
.text:00000128 $LN12           dd 1                    ; DATA XREF: _printer_start_enum+ECo
.text:0000012C                 dd offset $LN11
.text:00000130 $LN11           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000012Co
.text:00000138                 dd offset $LN10         ; "buffer"
.text:0000013C $LN10           db 'buffer',0           ; DATA XREF: .text:00000138o
.text:00000143                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; int __cdecl printer_add_enum(DWORD Flags, DWORD Level, int, int, int)
.text:00000150 _printer_add_enum proc near             ; CODE XREF: _printer_start_enum+7Dp
.text:00000150
.text:00000150 var_18          = dword ptr -18h
.text:00000150 pcReturned      = dword ptr -14h
.text:00000150 var_10          = dword ptr -10h
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 pcbNeeded       = dword ptr -8
.text:00000150 var_4           = dword ptr -4
.text:00000150 Flags           = dword ptr  8
.text:00000150 Level           = dword ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150 arg_C           = dword ptr  14h
.text:00000150 arg_10          = dword ptr  18h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 18h
.text:00000156                 mov     eax, 0CCCCCCCCh
.text:0000015B                 mov     [ebp+var_18], eax
.text:0000015E                 mov     [ebp+pcReturned], eax
.text:00000161                 mov     [ebp+var_10], eax
.text:00000164                 mov     [ebp+var_C], eax
.text:00000167                 mov     [ebp+pcbNeeded], eax
.text:0000016A                 mov     [ebp+var_4], eax
.text:0000016D                 mov     [ebp+pcbNeeded], 0
.text:00000174                 mov     [ebp+pcReturned], 0
.text:0000017B                 push    1
.text:0000017D                 mov     eax, [ebp+arg_C]
.text:00000180                 add     eax, 200h
.text:00000185                 push    eax
.text:00000186                 mov     ecx, [ebp+arg_8]
.text:00000189                 mov     edx, [ecx]
.text:0000018B                 push    edx
.text:0000018C                 call    _saferealloc
.text:00000191                 add     esp, 0Ch
.text:00000194                 mov     ecx, [ebp+arg_8]
.text:00000197                 mov     [ecx], eax
.text:00000199                 lea     edx, [ebp+pcReturned]
.text:0000019C                 push    edx             ; pcReturned
.text:0000019D                 lea     eax, [ebp+pcbNeeded]
.text:000001A0                 push    eax             ; pcbNeeded
.text:000001A1                 push    200h            ; cbBuf
.text:000001A6                 mov     ecx, [ebp+arg_8]
.text:000001A9                 mov     edx, [ecx]
.text:000001AB                 add     edx, [ebp+arg_C]
.text:000001AE                 push    edx             ; pPrinterEnum
.text:000001AF                 mov     eax, [ebp+Level]
.text:000001B2                 push    eax             ; Level
.text:000001B3                 push    0               ; Name
.text:000001B5                 mov     ecx, [ebp+Flags]
.text:000001B8                 push    ecx             ; Flags
.text:000001B9                 call    _EnumPrintersA@28 ; EnumPrintersA(x,x,x,x,x,x,x)
.text:000001BE                 cmp     [ebp+pcbNeeded], 200h
.text:000001C5                 jnb     short loc_1CE
.text:000001C7                 mov     [ebp+pcbNeeded], 200h
.text:000001CE
.text:000001CE loc_1CE:                                ; CODE XREF: _printer_add_enum+75j
.text:000001CE                 push    1
.text:000001D0                 mov     edx, [ebp+arg_C]
.text:000001D3                 add     edx, [ebp+pcbNeeded]
.text:000001D6                 push    edx
.text:000001D7                 mov     eax, [ebp+arg_8]
.text:000001DA                 mov     ecx, [eax]
.text:000001DC                 push    ecx
.text:000001DD                 call    _saferealloc
.text:000001E2                 add     esp, 0Ch
.text:000001E5                 mov     edx, [ebp+arg_8]
.text:000001E8                 mov     [edx], eax
.text:000001EA                 lea     eax, [ebp+pcReturned]
.text:000001ED                 push    eax             ; pcReturned
.text:000001EE                 lea     ecx, [ebp+pcbNeeded]
.text:000001F1                 push    ecx             ; pcbNeeded
.text:000001F2                 mov     edx, [ebp+pcbNeeded]
.text:000001F5                 push    edx             ; cbBuf
.text:000001F6                 mov     eax, [ebp+arg_8]
.text:000001F9                 mov     ecx, [eax]
.text:000001FB                 add     ecx, [ebp+arg_C]
.text:000001FE                 push    ecx             ; pPrinterEnum
.text:000001FF                 mov     edx, [ebp+Level]
.text:00000202                 push    edx             ; Level
.text:00000203                 push    0               ; Name
.text:00000205                 mov     eax, [ebp+Flags]
.text:00000208                 push    eax             ; Flags
.text:00000209                 call    _EnumPrintersA@28 ; EnumPrintersA(x,x,x,x,x,x,x)
.text:0000020E                 test    eax, eax
.text:00000210                 jnz     short loc_216
.text:00000212                 xor     eax, eax
.text:00000214                 jmp     short loc_228
.text:00000216 ; ---------------------------------------------------------------------------
.text:00000216
.text:00000216 loc_216:                                ; CODE XREF: _printer_add_enum+C0j
.text:00000216                 mov     ecx, [ebp+arg_10]
.text:00000219                 mov     edx, [ecx]
.text:0000021B                 add     edx, [ebp+pcReturned]
.text:0000021E                 mov     eax, [ebp+arg_10]
.text:00000221                 mov     [eax], edx
.text:00000223                 mov     eax, 1
.text:00000228
.text:00000228 loc_228:                                ; CODE XREF: _printer_add_enum+C4j
.text:00000228                 push    edx
.text:00000229                 mov     ecx, ebp
.text:0000022B                 push    eax
.text:0000022C                 lea     edx, $LN8
.text:00000232                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000237                 pop     eax
.text:00000238                 pop     edx
.text:00000239                 add     esp, 18h
.text:0000023C                 cmp     ebp, esp
.text:0000023E                 call    __RTC_CheckEsp
.text:00000243                 mov     esp, ebp
.text:00000245                 pop     ebp
.text:00000246                 retn
.text:00000246 _printer_add_enum endp
.text:00000246
.text:00000246 ; ---------------------------------------------------------------------------
.text:00000247                 align 4
.text:00000248 $LN8            dd 2                    ; DATA XREF: _printer_add_enum+DCo
.text:0000024C                 dd offset $LN7
.text:00000250 $LN7            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000024Co
.text:00000258                 dd offset $LN5          ; "needed"
.text:0000025C                 dd 0FFFFFFECh, 4
.text:00000264                 dd offset $LN6          ; "nprinters"
.text:00000268 $LN6            db 'nprinters',0        ; DATA XREF: .text:00000264o
.text:00000272 $LN5            db 'needed',0           ; DATA XREF: .text:00000258o
.text:00000279                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280                 public _printer_get_name
.text:00000280 _printer_get_name proc near
.text:00000280
.text:00000280 var_4           = dword ptr -4
.text:00000280 arg_0           = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 push    ecx
.text:00000284                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000028B                 cmp     [ebp+arg_0], 0
.text:0000028F                 jnz     short loc_295
.text:00000291                 xor     eax, eax
.text:00000293                 jmp     short loc_2E4
.text:00000295 ; ---------------------------------------------------------------------------
.text:00000295
.text:00000295 loc_295:                                ; CODE XREF: _printer_get_name+Fj
.text:00000295                 cmp     [ebp+arg_4], 0
.text:00000299                 jl      short loc_2A5
.text:0000029B                 mov     eax, [ebp+arg_0]
.text:0000029E                 mov     ecx, [ebp+arg_4]
.text:000002A1                 cmp     ecx, [eax]
.text:000002A3                 jl      short loc_2A9
.text:000002A5
.text:000002A5 loc_2A5:                                ; CODE XREF: _printer_get_name+19j
.text:000002A5                 xor     eax, eax
.text:000002A7                 jmp     short loc_2E4
.text:000002A9 ; ---------------------------------------------------------------------------
.text:000002A9
.text:000002A9 loc_2A9:                                ; CODE XREF: _printer_get_name+23j
.text:000002A9                 mov     edx, [ebp+arg_0]
.text:000002AC                 mov     eax, [edx+4]
.text:000002AF                 mov     [ebp+var_4], eax
.text:000002B2                 cmp     [ebp+var_4], 4
.text:000002B6                 jz      short loc_2C0
.text:000002B8                 cmp     [ebp+var_4], 5
.text:000002BC                 jz      short loc_2D1
.text:000002BE                 jmp     short loc_2E2
.text:000002C0 ; ---------------------------------------------------------------------------
.text:000002C0
.text:000002C0 loc_2C0:                                ; CODE XREF: _printer_get_name+36j
.text:000002C0                 mov     ecx, [ebp+arg_4]
.text:000002C3                 imul    ecx, 0Ch
.text:000002C6                 mov     edx, [ebp+arg_0]
.text:000002C9                 mov     eax, [edx+8]
.text:000002CC                 mov     eax, [ecx+eax]
.text:000002CF                 jmp     short loc_2E4
.text:000002D1 ; ---------------------------------------------------------------------------
.text:000002D1
.text:000002D1 loc_2D1:                                ; CODE XREF: _printer_get_name+3Cj
.text:000002D1                 mov     ecx, [ebp+arg_4]
.text:000002D4                 imul    ecx, 14h
.text:000002D7                 mov     edx, [ebp+arg_0]
.text:000002DA                 mov     eax, [edx+8]
.text:000002DD                 mov     eax, [ecx+eax]
.text:000002E0                 jmp     short loc_2E4
.text:000002E2 ; ---------------------------------------------------------------------------
.text:000002E2
.text:000002E2 loc_2E2:                                ; CODE XREF: _printer_get_name+3Ej
.text:000002E2                 xor     eax, eax
.text:000002E4
.text:000002E4 loc_2E4:                                ; CODE XREF: _printer_get_name+13j
.text:000002E4                                         ; _printer_get_name+27j ...
.text:000002E4                 mov     esp, ebp
.text:000002E6                 pop     ebp
.text:000002E7                 retn
.text:000002E7 _printer_get_name endp
.text:000002E7
.text:000002E7 ; ---------------------------------------------------------------------------
.text:000002E8                 align 10h
.text:000002F0
.text:000002F0 ; =============== S U B R O U T I N E =======================================
.text:000002F0
.text:000002F0 ; Attributes: bp-based frame
.text:000002F0
.text:000002F0                 public _printer_finish_enum
.text:000002F0 _printer_finish_enum proc near
.text:000002F0
.text:000002F0 var_4           = dword ptr -4
.text:000002F0 arg_0           = dword ptr  8
.text:000002F0
.text:000002F0                 push    ebp
.text:000002F1                 mov     ebp, esp
.text:000002F3                 push    ecx
.text:000002F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002FB                 cmp     [ebp+arg_0], 0
.text:000002FF                 jnz     short loc_303
.text:00000301                 jmp     short loc_346
.text:00000303 ; ---------------------------------------------------------------------------
.text:00000303
.text:00000303 loc_303:                                ; CODE XREF: _printer_finish_enum+Fj
.text:00000303                 mov     eax, [ebp+arg_0]
.text:00000306                 mov     ecx, [eax+4]
.text:00000309                 mov     [ebp+var_4], ecx
.text:0000030C                 cmp     [ebp+var_4], 4
.text:00000310                 jz      short loc_31A
.text:00000312                 cmp     [ebp+var_4], 5
.text:00000316                 jz      short loc_32B
.text:00000318                 jmp     short loc_33A
.text:0000031A ; ---------------------------------------------------------------------------
.text:0000031A
.text:0000031A loc_31A:                                ; CODE XREF: _printer_finish_enum+20j
.text:0000031A                 mov     edx, [ebp+arg_0]
.text:0000031D                 mov     eax, [edx+8]
.text:00000320                 push    eax
.text:00000321                 call    _safefree
.text:00000326                 add     esp, 4
.text:00000329                 jmp     short loc_33A
.text:0000032B ; ---------------------------------------------------------------------------
.text:0000032B
.text:0000032B loc_32B:                                ; CODE XREF: _printer_finish_enum+26j
.text:0000032B                 mov     ecx, [ebp+arg_0]
.text:0000032E                 mov     edx, [ecx+8]
.text:00000331                 push    edx
.text:00000332                 call    _safefree
.text:00000337                 add     esp, 4
.text:0000033A
.text:0000033A loc_33A:                                ; CODE XREF: _printer_finish_enum+28j
.text:0000033A                                         ; _printer_finish_enum+39j
.text:0000033A                 mov     eax, [ebp+arg_0]
.text:0000033D                 push    eax
.text:0000033E                 call    _safefree
.text:00000343                 add     esp, 4
.text:00000346
.text:00000346 loc_346:                                ; CODE XREF: _printer_finish_enum+11j
.text:00000346                 add     esp, 4
.text:00000349                 cmp     ebp, esp
.text:0000034B                 call    __RTC_CheckEsp
.text:00000350                 mov     esp, ebp
.text:00000352                 pop     ebp
.text:00000353                 retn
.text:00000353 _printer_finish_enum endp
.text:00000353
.text:00000353 ; ---------------------------------------------------------------------------
.text:00000354                 align 10h
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; int __cdecl printer_start_job(LPSTR pPrinterName)
.text:00000360                 public _printer_start_job
.text:00000360 _printer_start_job proc near
.text:00000360
.text:00000360 var_20          = dword ptr -20h
.text:00000360 var_1C          = dword ptr -1Ch
.text:00000360 var_18          = dword ptr -18h
.text:00000360 pDocInfo        = byte ptr -14h
.text:00000360 var_10          = dword ptr -10h
.text:00000360 var_C           = dword ptr -0Ch
.text:00000360 var_8           = dword ptr -8
.text:00000360 phPrinter       = dword ptr -4
.text:00000360 pPrinterName    = dword ptr  8
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 sub     esp, 20h
.text:00000366                 mov     eax, 0CCCCCCCCh
.text:0000036B                 mov     [ebp+var_20], eax
.text:0000036E                 mov     [ebp+var_1C], eax
.text:00000371                 mov     [ebp+var_18], eax
.text:00000374                 mov     dword ptr [ebp+pDocInfo], eax
.text:00000377                 mov     [ebp+var_10], eax
.text:0000037A                 mov     [ebp+var_C], eax
.text:0000037D                 mov     [ebp+var_8], eax
.text:00000380                 mov     [ebp+phPrinter], eax
.text:00000383                 push    4
.text:00000385                 push    1
.text:00000387                 call    _safemalloc
.text:0000038C                 add     esp, 8
.text:0000038F                 mov     [ebp+phPrinter], eax
.text:00000392                 mov     [ebp+var_1C], 0
.text:00000399                 mov     [ebp+var_20], 0
.text:000003A0                 mov     eax, [ebp+phPrinter]
.text:000003A3                 mov     dword ptr [eax], 0
.text:000003A9                 push    0               ; pDefault
.text:000003AB                 mov     ecx, [ebp+phPrinter]
.text:000003AE                 push    ecx             ; phPrinter
.text:000003AF                 mov     edx, [ebp+pPrinterName]
.text:000003B2                 push    edx             ; pPrinterName
.text:000003B3                 call    _OpenPrinterA@12 ; OpenPrinterA(x,x,x)
.text:000003B8                 test    eax, eax
.text:000003BA                 jnz     short loc_3BE
.text:000003BC                 jmp     short $error$85631
.text:000003BE ; ---------------------------------------------------------------------------
.text:000003BE
.text:000003BE loc_3BE:                                ; CODE XREF: _printer_start_job+5Aj
.text:000003BE                 mov     dword ptr [ebp+pDocInfo], offset $SG85632 ; "PuTTY remote printer output"
.text:000003C5                 mov     [ebp+var_10], 0
.text:000003CC                 mov     [ebp+var_C], offset $SG85634 ; "RAW"
.text:000003D3                 lea     eax, [ebp+pDocInfo]
.text:000003D6                 push    eax             ; pDocInfo
.text:000003D7                 push    1               ; Level
.text:000003D9                 mov     ecx, [ebp+phPrinter]
.text:000003DC                 mov     edx, [ecx]
.text:000003DE                 push    edx             ; hPrinter
.text:000003DF                 call    _StartDocPrinterA@12 ; StartDocPrinterA(x,x,x)
.text:000003E4                 test    eax, eax
.text:000003E6                 jnz     short loc_3EA
.text:000003E8                 jmp     short $error$85631
.text:000003EA ; ---------------------------------------------------------------------------
.text:000003EA
.text:000003EA loc_3EA:                                ; CODE XREF: _printer_start_job+86j
.text:000003EA                 mov     [ebp+var_1C], 1
.text:000003F1                 mov     eax, [ebp+phPrinter]
.text:000003F4                 mov     ecx, [eax]
.text:000003F6                 push    ecx             ; hPrinter
.text:000003F7                 call    _StartPagePrinter@4 ; StartPagePrinter(x)
.text:000003FC                 test    eax, eax
.text:000003FE                 jnz     short loc_402
.text:00000400                 jmp     short $error$85631
.text:00000402 ; ---------------------------------------------------------------------------
.text:00000402
.text:00000402 loc_402:                                ; CODE XREF: _printer_start_job+9Ej
.text:00000402                 mov     [ebp+var_20], 1
.text:00000409                 mov     eax, [ebp+phPrinter]
.text:0000040C                 jmp     short loc_451
.text:0000040E ; ---------------------------------------------------------------------------
.text:0000040E
.text:0000040E $error$85631:                           ; CODE XREF: _printer_start_job+5Cj
.text:0000040E                                         ; _printer_start_job+88j ...
.text:0000040E                 cmp     [ebp+var_20], 0
.text:00000412                 jz      short loc_41F
.text:00000414                 mov     edx, [ebp+phPrinter]
.text:00000417                 mov     eax, [edx]
.text:00000419                 push    eax             ; hPrinter
.text:0000041A                 call    _EndPagePrinter@4 ; EndPagePrinter(x)
.text:0000041F
.text:0000041F loc_41F:                                ; CODE XREF: _printer_start_job+B2j
.text:0000041F                 cmp     [ebp+var_1C], 0
.text:00000423                 jz      short loc_430
.text:00000425                 mov     ecx, [ebp+phPrinter]
.text:00000428                 mov     edx, [ecx]
.text:0000042A                 push    edx             ; hPrinter
.text:0000042B                 call    _EndDocPrinter@4 ; EndDocPrinter(x)
.text:00000430
.text:00000430 loc_430:                                ; CODE XREF: _printer_start_job+C3j
.text:00000430                 mov     eax, [ebp+phPrinter]
.text:00000433                 cmp     dword ptr [eax], 0
.text:00000436                 jz      short loc_443
.text:00000438                 mov     ecx, [ebp+phPrinter]
.text:0000043B                 mov     edx, [ecx]
.text:0000043D                 push    edx             ; hPrinter
.text:0000043E                 call    _ClosePrinter@4 ; ClosePrinter(x)
.text:00000443
.text:00000443 loc_443:                                ; CODE XREF: _printer_start_job+D6j
.text:00000443                 mov     eax, [ebp+phPrinter]
.text:00000446                 push    eax
.text:00000447                 call    _safefree
.text:0000044C                 add     esp, 4
.text:0000044F                 xor     eax, eax
.text:00000451
.text:00000451 loc_451:                                ; CODE XREF: _printer_start_job+ACj
.text:00000451                 push    edx
.text:00000452                 mov     ecx, ebp
.text:00000454                 push    eax
.text:00000455                 lea     edx, $LN11_0
.text:0000045B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000460                 pop     eax
.text:00000461                 pop     edx
.text:00000462                 add     esp, 20h
.text:00000465                 cmp     ebp, esp
.text:00000467                 call    __RTC_CheckEsp
.text:0000046C                 mov     esp, ebp
.text:0000046E                 pop     ebp
.text:0000046F                 retn
.text:0000046F _printer_start_job endp
.text:0000046F
.text:0000046F ; ---------------------------------------------------------------------------
.text:00000470 $LN11_0         dd 1                    ; DATA XREF: _printer_start_job+F5o
.text:00000474                 dd offset $LN10_0
.text:00000478 $LN10_0         dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:00000474o
.text:00000480                 dd offset $LN9          ; "docinfo"
.text:00000484 $LN9            db 'docinfo',0          ; DATA XREF: .text:00000480o
.text:0000048C                 align 10h
.text:00000490
.text:00000490 ; =============== S U B R O U T I N E =======================================
.text:00000490
.text:00000490 ; Attributes: bp-based frame
.text:00000490
.text:00000490 ; int __cdecl printer_job_data(int, LPVOID pBuf, DWORD cbBuf)
.text:00000490                 public _printer_job_data
.text:00000490 _printer_job_data proc near
.text:00000490
.text:00000490 var_C           = dword ptr -0Ch
.text:00000490 pcWritten       = dword ptr -8
.text:00000490 var_4           = dword ptr -4
.text:00000490 arg_0           = dword ptr  8
.text:00000490 pBuf            = dword ptr  0Ch
.text:00000490 cbBuf           = dword ptr  10h
.text:00000490
.text:00000490                 push    ebp
.text:00000491                 mov     ebp, esp
.text:00000493                 sub     esp, 0Ch
.text:00000496                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000049D                 mov     [ebp+pcWritten], 0CCCCCCCCh
.text:000004A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004AB                 cmp     [ebp+arg_0], 0
.text:000004AF                 jnz     short loc_4B3
.text:000004B1                 jmp     short loc_4CA
.text:000004B3 ; ---------------------------------------------------------------------------
.text:000004B3
.text:000004B3 loc_4B3:                                ; CODE XREF: _printer_job_data+1Fj
.text:000004B3                 lea     eax, [ebp+pcWritten]
.text:000004B6                 push    eax             ; pcWritten
.text:000004B7                 mov     ecx, [ebp+cbBuf]
.text:000004BA                 push    ecx             ; cbBuf
.text:000004BB                 mov     edx, [ebp+pBuf]
.text:000004BE                 push    edx             ; pBuf
.text:000004BF                 mov     eax, [ebp+arg_0]
.text:000004C2                 mov     ecx, [eax]
.text:000004C4                 push    ecx             ; hPrinter
.text:000004C5                 call    _WritePrinter@16 ; WritePrinter(x,x,x,x)
.text:000004CA
.text:000004CA loc_4CA:                                ; CODE XREF: _printer_job_data+21j
.text:000004CA                 push    edx
.text:000004CB                 mov     ecx, ebp
.text:000004CD                 push    eax
.text:000004CE                 lea     edx, $LN6_0
.text:000004D4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004D9                 pop     eax
.text:000004DA                 pop     edx
.text:000004DB                 add     esp, 0Ch
.text:000004DE                 cmp     ebp, esp
.text:000004E0                 call    __RTC_CheckEsp
.text:000004E5                 mov     esp, ebp
.text:000004E7                 pop     ebp
.text:000004E8                 retn
.text:000004E8 _printer_job_data endp
.text:000004E8
.text:000004E8 ; ---------------------------------------------------------------------------
.text:000004E9                 align 4
.text:000004EC $LN6_0          dd 1                    ; DATA XREF: _printer_job_data+3Eo
.text:000004F0                 dd offset $LN5_0
.text:000004F4 $LN5_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000004F0o
.text:000004FC                 dd offset $LN4          ; "written"
.text:00000500 $LN4            db 'written',0          ; DATA XREF: .text:000004FCo
.text:00000508                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510                 public _printer_finish_job
.text:00000510 _printer_finish_job proc near
.text:00000510
.text:00000510 arg_0           = dword ptr  8
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 cmp     [ebp+arg_0], 0
.text:00000517                 jnz     short loc_51B
.text:00000519                 jmp     short loc_548
.text:0000051B ; ---------------------------------------------------------------------------
.text:0000051B
.text:0000051B loc_51B:                                ; CODE XREF: _printer_finish_job+7j
.text:0000051B                 mov     eax, [ebp+arg_0]
.text:0000051E                 mov     ecx, [eax]
.text:00000520                 push    ecx             ; hPrinter
.text:00000521                 call    _EndPagePrinter@4 ; EndPagePrinter(x)
.text:00000526                 mov     edx, [ebp+arg_0]
.text:00000529                 mov     eax, [edx]
.text:0000052B                 push    eax             ; hPrinter
.text:0000052C                 call    _EndDocPrinter@4 ; EndDocPrinter(x)
.text:00000531                 mov     ecx, [ebp+arg_0]
.text:00000534                 mov     edx, [ecx]
.text:00000536                 push    edx             ; hPrinter
.text:00000537                 call    _ClosePrinter@4 ; ClosePrinter(x)
.text:0000053C                 mov     eax, [ebp+arg_0]
.text:0000053F                 push    eax
.text:00000540                 call    _safefree
.text:00000545                 add     esp, 4
.text:00000548
.text:00000548 loc_548:                                ; CODE XREF: _printer_finish_job+9j
.text:00000548                 cmp     ebp, esp
.text:0000054A                 call    __RTC_CheckEsp
.text:0000054F                 pop     ebp
.text:00000550                 retn
.text:00000550 _printer_finish_job endp
.text:00000550
.text:00000550 ; ---------------------------------------------------------------------------
.text:00000551                 align 4
.text:00000551 _text           ends
.text:00000551
.rtc$TMZ:00000554 ; ===========================================================================
.rtc$TMZ:00000554
.rtc$TMZ:00000554 ; Segment type: Pure data
.rtc$TMZ:00000554 ; Segment permissions: Read
.rtc$TMZ:00000554 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000554                 assume cs:_rtc$TMZ
.rtc$TMZ:00000554                 ;org 554h
.rtc$TMZ:00000554 ; COMDAT (pick any)
.rtc$TMZ:00000554 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000554 _rtc$TMZ        ends
.rtc$TMZ:00000554
.rtc$IMZ:00000558 ; ===========================================================================
.rtc$IMZ:00000558
.rtc$IMZ:00000558 ; Segment type: Pure data
.rtc$IMZ:00000558 ; Segment permissions: Read
.rtc$IMZ:00000558 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000558                 assume cs:_rtc$IMZ
.rtc$IMZ:00000558                 ;org 558h
.rtc$IMZ:00000558 ; COMDAT (pick any)
.rtc$IMZ:00000558 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000558 _rtc$IMZ        ends
.rtc$IMZ:00000558
UNDEF:00000560 ; ===========================================================================
UNDEF:00000560
UNDEF:00000560 ; Segment type: Externs
UNDEF:00000560 ; UNDEF
UNDEF:00000560                 extrn _safefree:near    ; CODE XREF: _printer_start_enum+C9p
UNDEF:00000560                                         ; _printer_start_enum+D5p ...
UNDEF:00000564                 extrn _osVersion:near   ; DATA XREF: _printer_start_enum+4Br
UNDEF:00000568                 extrn _safemalloc:near  ; CODE XREF: _printer_start_enum+1Ep
UNDEF:00000568                                         ; _printer_start_enum+40p ...
UNDEF:0000056C                 extrn __RTC_CheckEsp:near
UNDEF:0000056C                                         ; CODE XREF: _printer_start_enum+FEp
UNDEF:0000056C                                         ; _printer_add_enum+EEp ...
UNDEF:00000570 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000570                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000570                                         ; CODE XREF: _printer_start_enum+F2p
UNDEF:00000570                                         ; _printer_add_enum+E2p ...
UNDEF:00000574                 extrn __RTC_Shutdown:near
UNDEF:00000574                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000578                 extrn __RTC_InitBase:near
UNDEF:00000578                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000057C ; BOOL __stdcall EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
UNDEF:0000057C                 extrn _EnumPrintersA@28:near
UNDEF:0000057C                                         ; CODE XREF: _printer_add_enum+69p
UNDEF:0000057C                                         ; _printer_add_enum+B9p
UNDEF:00000580                 extrn _saferealloc:near ; CODE XREF: _printer_add_enum+3Cp
UNDEF:00000580                                         ; _printer_add_enum+8Dp
UNDEF:00000584 ; BOOL __stdcall ClosePrinter(HANDLE hPrinter)
UNDEF:00000584                 extrn _ClosePrinter@4:near
UNDEF:00000584                                         ; CODE XREF: _printer_start_job+DEp
UNDEF:00000584                                         ; _printer_finish_job+27p
UNDEF:00000588 ; BOOL __stdcall EndDocPrinter(HANDLE hPrinter)
UNDEF:00000588                 extrn _EndDocPrinter@4:near
UNDEF:00000588                                         ; CODE XREF: _printer_start_job+CBp
UNDEF:00000588                                         ; _printer_finish_job+1Cp
UNDEF:0000058C ; BOOL __stdcall EndPagePrinter(HANDLE hPrinter)
UNDEF:0000058C                 extrn _EndPagePrinter@4:near
UNDEF:0000058C                                         ; CODE XREF: _printer_start_job+BAp
UNDEF:0000058C                                         ; _printer_finish_job+11p
UNDEF:00000590 ; BOOL __stdcall StartPagePrinter(HANDLE hPrinter)
UNDEF:00000590                 extrn _StartPagePrinter@4:near
UNDEF:00000590                                         ; CODE XREF: _printer_start_job+97p
UNDEF:00000594 ; DWORD __stdcall StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
UNDEF:00000594                 extrn _StartDocPrinterA@12:near
UNDEF:00000594                                         ; CODE XREF: _printer_start_job+7Fp
UNDEF:00000598 ; BOOL __stdcall OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
UNDEF:00000598                 extrn _OpenPrinterA@12:near
UNDEF:00000598                                         ; CODE XREF: _printer_start_job+53p
UNDEF:0000059C ; BOOL __stdcall WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
UNDEF:0000059C                 extrn _WritePrinter@16:near
UNDEF:0000059C                                         ; CODE XREF: _printer_job_data+35p
UNDEF:0000059C
UNDEF:0000059C
UNDEF:0000059C                 end