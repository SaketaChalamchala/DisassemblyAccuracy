.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 7D345CB1BA72FC04295B80636BB21B6E
.rdata:00000000 ; Input CRC32 : 68BA777B
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winnet.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000                 public _in6addr_any
.rdata:00000000 ; const IN6_ADDR in6addr_any
.rdata:00000000 _in6addr_any    IN6_ADDR <0>            ; DATA XREF: _sk_newlistener:loc_3E21r
.rdata:00000000                                         ; _sk_newlistener+1DEr ...
.rdata:00000010                 public _in6addr_loopback
.rdata:00000010 ; const IN6_ADDR in6addr_loopback
.rdata:00000010 _in6addr_loopback db 0Fh dup(0), 1        ; u.Byte
.rdata:00000010                                         ; DATA XREF: _sk_newlistener+1B0r
.rdata:00000010                                         ; _sk_newlistener+1B9r ...
.rdata:00000020 ; `sk_tcp_accept'::`2'::fn_table
.rdata:00000020 ?fn_table@?1??sk_tcp_accept@@9@9 dd offset _sk_tcp_plug
.rdata:00000020                                         ; DATA XREF: _sk_tcp_accept+2Eo
.rdata:00000024                 dd offset _sk_tcp_close
.rdata:00000028                 dd offset _sk_tcp_write
.rdata:0000002C                 dd offset _sk_tcp_write_oob
.rdata:00000030                 dd offset _sk_tcp_write_eof
.rdata:00000034                 dd offset _sk_tcp_flush
.rdata:00000038                 dd offset _sk_tcp_set_frozen
.rdata:0000003C                 dd offset _sk_tcp_socket_error
.rdata:00000040 ; `sk_new'::`2'::fn_table
.rdata:00000040 ?fn_table@?1??sk_new@@9@9 dd offset _sk_tcp_plug ; DATA XREF: _sk_new+26o
.rdata:00000044                 dd offset _sk_tcp_close
.rdata:00000048                 dd offset _sk_tcp_write
.rdata:0000004C                 dd offset _sk_tcp_write_oob
.rdata:00000050                 dd offset _sk_tcp_write_eof
.rdata:00000054                 dd offset _sk_tcp_flush
.rdata:00000058                 dd offset _sk_tcp_set_frozen
.rdata:0000005C                 dd offset _sk_tcp_socket_error
.rdata:00000060 ; `sk_newlistener'::`2'::fn_table
.rdata:00000060 ?fn_table@?1??sk_newlistener@@9@9 dd offset _sk_tcp_plug
.rdata:00000060                                         ; DATA XREF: _sk_newlistener+40o
.rdata:00000064                 dd offset _sk_tcp_close
.rdata:00000068                 dd offset _sk_tcp_write
.rdata:0000006C                 dd offset _sk_tcp_write_oob
.rdata:00000070                 dd offset _sk_tcp_write_eof
.rdata:00000074                 dd offset _sk_tcp_flush
.rdata:00000078                 dd offset _sk_tcp_set_frozen
.rdata:0000007C                 dd offset _sk_tcp_socket_error
.rdata:0000007C _rdata          ends
.rdata:0000007C
.bss:00000080 ; ===========================================================================
.bss:00000080
.bss:00000080 ; Segment type: Uninitialized
.bss:00000080 ; Segment permissions: Read/Write
.bss:00000080 ; Segment alignment 'qword' can not be represented in assembly
.bss:00000080 _bss            segment para public 'BSS' use32
.bss:00000080                 assume cs:_bss
.bss:00000080                 ;org 80h
.bss:00000080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000080 _p_bind         dd ?                    ; DATA XREF: _sk_init+6D5w
.bss:00000080                                         ; _try_connect+293r ...
.bss:00000084 _p_shutdown     dd ?                    ; DATA XREF: _sk_init+7F7w
.bss:00000084                                         ; _try_send+1E8r
.bss:00000088 _p_freeaddrinfo dd ?                    ; DATA XREF: _sk_init+F8w
.bss:00000088                                         ; _sk_init+1FDw ...
.bss:0000008C _p_WSAStartup   dd ?                    ; DATA XREF: _sk_startup+38r
.bss:0000008C                                         ; _sk_init+3F8w
.bss:00000090 _p_gethostbyname dd ?                   ; DATA XREF: _sk_init+5BBw
.bss:00000090                                         ; _sk_namelookup+1A7r
.bss:00000094 _p_send         dd ?                    ; DATA XREF: _sk_init+7B6w
.bss:00000094                                         ; _try_send+8Er
.bss:00000098 _p_recv         dd ?                    ; DATA XREF: _sk_init+8BBw
.bss:00000098                                         ; _select_result+28Br ...
.bss:0000009C _p_connect      dd ?                    ; DATA XREF: _sk_init+69Cw
.bss:0000009C                                         ; _try_connect+4A3r
.bss:000000A0 _p_inet_addr    dd ?                    ; DATA XREF: _sk_init+62Cw
.bss:000000A0                                         ; _sk_namelookup+C1r ...
.bss:000000A4 _p_WSAIoctl     dd ?                    ; DATA XREF: _sk_init+8FDw
.bss:000000A4                                         ; _ipv4_is_local_addr+68r ...
.bss:000000A8 _p_ntohs        dd ?                    ; DATA XREF: _sk_init+54Aw
.bss:000000A8                                         ; _net_service_lookup+34r
.bss:000000AC _p_ntohl        dd ?                    ; DATA XREF: _sk_init+4A1w
.bss:000000AC                                         ; _sk_namelookup+435r ...
.bss:000000B0 _p_listen       dd ?                    ; DATA XREF: _sk_init+77Ew
.bss:000000B0                                         ; _sk_newlistener+43Ar
.bss:000000B4 _p_accept       dd ?                    ; DATA XREF: _sk_init+87Aw
.bss:000000B4                                         ; _select_result+66Br
.bss:000000B8 _wsadata        dw ?                    ; DATA XREF: _sk_startup+2Eo
.bss:000000B8                                         ; _sk_startup:loc_1519r
.bss:000000BA                 db    ? ;
.bss:000000BB                 db    ? ;
.bss:000000BC                 db    ? ;
.bss:000000BD                 db    ? ;
.bss:000000BE                 db    ? ;
.bss:000000BF                 db    ? ;
.bss:000000C0                 db    ? ;
.bss:000000C1                 db    ? ;
.bss:000000C2                 db    ? ;
.bss:000000C3                 db    ? ;
.bss:000000C4                 db    ? ;
.bss:000000C5                 db    ? ;
.bss:000000C6                 db    ? ;
.bss:000000C7                 db    ? ;
.bss:000000C8                 db    ? ;
.bss:000000C9                 db    ? ;
.bss:000000CA                 db    ? ;
.bss:000000CB                 db    ? ;
.bss:000000CC                 db    ? ;
.bss:000000CD                 db    ? ;
.bss:000000CE                 db    ? ;
.bss:000000CF                 db    ? ;
.bss:000000D0                 db    ? ;
.bss:000000D1                 db    ? ;
.bss:000000D2                 db    ? ;
.bss:000000D3                 db    ? ;
.bss:000000D4                 db    ? ;
.bss:000000D5                 db    ? ;
.bss:000000D6                 db    ? ;
.bss:000000D7                 db    ? ;
.bss:000000D8                 db    ? ;
.bss:000000D9                 db    ? ;
.bss:000000DA                 db    ? ;
.bss:000000DB                 db    ? ;
.bss:000000DC                 db    ? ;
.bss:000000DD                 db    ? ;
.bss:000000DE                 db    ? ;
.bss:000000DF                 db    ? ;
.bss:000000E0                 db    ? ;
.bss:000000E1                 db    ? ;
.bss:000000E2                 db    ? ;
.bss:000000E3                 db    ? ;
.bss:000000E4                 db    ? ;
.bss:000000E5                 db    ? ;
.bss:000000E6                 db    ? ;
.bss:000000E7                 db    ? ;
.bss:000000E8                 db    ? ;
.bss:000000E9                 db    ? ;
.bss:000000EA                 db    ? ;
.bss:000000EB                 db    ? ;
.bss:000000EC                 db    ? ;
.bss:000000ED                 db    ? ;
.bss:000000EE                 db    ? ;
.bss:000000EF                 db    ? ;
.bss:000000F0                 db    ? ;
.bss:000000F1                 db    ? ;
.bss:000000F2                 db    ? ;
.bss:000000F3                 db    ? ;
.bss:000000F4                 db    ? ;
.bss:000000F5                 db    ? ;
.bss:000000F6                 db    ? ;
.bss:000000F7                 db    ? ;
.bss:000000F8                 db    ? ;
.bss:000000F9                 db    ? ;
.bss:000000FA                 db    ? ;
.bss:000000FB                 db    ? ;
.bss:000000FC                 db    ? ;
.bss:000000FD                 db    ? ;
.bss:000000FE                 db    ? ;
.bss:000000FF                 db    ? ;
.bss:00000100                 db    ? ;
.bss:00000101                 db    ? ;
.bss:00000102                 db    ? ;
.bss:00000103                 db    ? ;
.bss:00000104                 db    ? ;
.bss:00000105                 db    ? ;
.bss:00000106                 db    ? ;
.bss:00000107                 db    ? ;
.bss:00000108                 db    ? ;
.bss:00000109                 db    ? ;
.bss:0000010A                 db    ? ;
.bss:0000010B                 db    ? ;
.bss:0000010C                 db    ? ;
.bss:0000010D                 db    ? ;
.bss:0000010E                 db    ? ;
.bss:0000010F                 db    ? ;
.bss:00000110                 db    ? ;
.bss:00000111                 db    ? ;
.bss:00000112                 db    ? ;
.bss:00000113                 db    ? ;
.bss:00000114                 db    ? ;
.bss:00000115                 db    ? ;
.bss:00000116                 db    ? ;
.bss:00000117                 db    ? ;
.bss:00000118                 db    ? ;
.bss:00000119                 db    ? ;
.bss:0000011A                 db    ? ;
.bss:0000011B                 db    ? ;
.bss:0000011C                 db    ? ;
.bss:0000011D                 db    ? ;
.bss:0000011E                 db    ? ;
.bss:0000011F                 db    ? ;
.bss:00000120                 db    ? ;
.bss:00000121                 db    ? ;
.bss:00000122                 db    ? ;
.bss:00000123                 db    ? ;
.bss:00000124                 db    ? ;
.bss:00000125                 db    ? ;
.bss:00000126                 db    ? ;
.bss:00000127                 db    ? ;
.bss:00000128                 db    ? ;
.bss:00000129                 db    ? ;
.bss:0000012A                 db    ? ;
.bss:0000012B                 db    ? ;
.bss:0000012C                 db    ? ;
.bss:0000012D                 db    ? ;
.bss:0000012E                 db    ? ;
.bss:0000012F                 db    ? ;
.bss:00000130                 db    ? ;
.bss:00000131                 db    ? ;
.bss:00000132                 db    ? ;
.bss:00000133                 db    ? ;
.bss:00000134                 db    ? ;
.bss:00000135                 db    ? ;
.bss:00000136                 db    ? ;
.bss:00000137                 db    ? ;
.bss:00000138                 db    ? ;
.bss:00000139                 db    ? ;
.bss:0000013A                 db    ? ;
.bss:0000013B                 db    ? ;
.bss:0000013C                 db    ? ;
.bss:0000013D                 db    ? ;
.bss:0000013E                 db    ? ;
.bss:0000013F                 db    ? ;
.bss:00000140                 db    ? ;
.bss:00000141                 db    ? ;
.bss:00000142                 db    ? ;
.bss:00000143                 db    ? ;
.bss:00000144                 db    ? ;
.bss:00000145                 db    ? ;
.bss:00000146                 db    ? ;
.bss:00000147                 db    ? ;
.bss:00000148                 db    ? ;
.bss:00000149                 db    ? ;
.bss:0000014A                 db    ? ;
.bss:0000014B                 db    ? ;
.bss:0000014C                 db    ? ;
.bss:0000014D                 db    ? ;
.bss:0000014E                 db    ? ;
.bss:0000014F                 db    ? ;
.bss:00000150                 db    ? ;
.bss:00000151                 db    ? ;
.bss:00000152                 db    ? ;
.bss:00000153                 db    ? ;
.bss:00000154                 db    ? ;
.bss:00000155                 db    ? ;
.bss:00000156                 db    ? ;
.bss:00000157                 db    ? ;
.bss:00000158                 db    ? ;
.bss:00000159                 db    ? ;
.bss:0000015A                 db    ? ;
.bss:0000015B                 db    ? ;
.bss:0000015C                 db    ? ;
.bss:0000015D                 db    ? ;
.bss:0000015E                 db    ? ;
.bss:0000015F                 db    ? ;
.bss:00000160                 db    ? ;
.bss:00000161                 db    ? ;
.bss:00000162                 db    ? ;
.bss:00000163                 db    ? ;
.bss:00000164                 db    ? ;
.bss:00000165                 db    ? ;
.bss:00000166                 db    ? ;
.bss:00000167                 db    ? ;
.bss:00000168                 db    ? ;
.bss:00000169                 db    ? ;
.bss:0000016A                 db    ? ;
.bss:0000016B                 db    ? ;
.bss:0000016C                 db    ? ;
.bss:0000016D                 db    ? ;
.bss:0000016E                 db    ? ;
.bss:0000016F                 db    ? ;
.bss:00000170                 db    ? ;
.bss:00000171                 db    ? ;
.bss:00000172                 db    ? ;
.bss:00000173                 db    ? ;
.bss:00000174                 db    ? ;
.bss:00000175                 db    ? ;
.bss:00000176                 db    ? ;
.bss:00000177                 db    ? ;
.bss:00000178                 db    ? ;
.bss:00000179                 db    ? ;
.bss:0000017A                 db    ? ;
.bss:0000017B                 db    ? ;
.bss:0000017C                 db    ? ;
.bss:0000017D                 db    ? ;
.bss:0000017E                 db    ? ;
.bss:0000017F                 db    ? ;
.bss:00000180                 db    ? ;
.bss:00000181                 db    ? ;
.bss:00000182                 db    ? ;
.bss:00000183                 db    ? ;
.bss:00000184                 db    ? ;
.bss:00000185                 db    ? ;
.bss:00000186                 db    ? ;
.bss:00000187                 db    ? ;
.bss:00000188                 db    ? ;
.bss:00000189                 db    ? ;
.bss:0000018A                 db    ? ;
.bss:0000018B                 db    ? ;
.bss:0000018C                 db    ? ;
.bss:0000018D                 db    ? ;
.bss:0000018E                 db    ? ;
.bss:0000018F                 db    ? ;
.bss:00000190                 db    ? ;
.bss:00000191                 db    ? ;
.bss:00000192                 db    ? ;
.bss:00000193                 db    ? ;
.bss:00000194                 db    ? ;
.bss:00000195                 db    ? ;
.bss:00000196                 db    ? ;
.bss:00000197                 db    ? ;
.bss:00000198                 db    ? ;
.bss:00000199                 db    ? ;
.bss:0000019A                 db    ? ;
.bss:0000019B                 db    ? ;
.bss:0000019C                 db    ? ;
.bss:0000019D                 db    ? ;
.bss:0000019E                 db    ? ;
.bss:0000019F                 db    ? ;
.bss:000001A0                 db    ? ;
.bss:000001A1                 db    ? ;
.bss:000001A2                 db    ? ;
.bss:000001A3                 db    ? ;
.bss:000001A4                 db    ? ;
.bss:000001A5                 db    ? ;
.bss:000001A6                 db    ? ;
.bss:000001A7                 db    ? ;
.bss:000001A8                 db    ? ;
.bss:000001A9                 db    ? ;
.bss:000001AA                 db    ? ;
.bss:000001AB                 db    ? ;
.bss:000001AC                 db    ? ;
.bss:000001AD                 db    ? ;
.bss:000001AE                 db    ? ;
.bss:000001AF                 db    ? ;
.bss:000001B0                 db    ? ;
.bss:000001B1                 db    ? ;
.bss:000001B2                 db    ? ;
.bss:000001B3                 db    ? ;
.bss:000001B4                 db    ? ;
.bss:000001B5                 db    ? ;
.bss:000001B6                 db    ? ;
.bss:000001B7                 db    ? ;
.bss:000001B8                 db    ? ;
.bss:000001B9                 db    ? ;
.bss:000001BA                 db    ? ;
.bss:000001BB                 db    ? ;
.bss:000001BC                 db    ? ;
.bss:000001BD                 db    ? ;
.bss:000001BE                 db    ? ;
.bss:000001BF                 db    ? ;
.bss:000001C0                 db    ? ;
.bss:000001C1                 db    ? ;
.bss:000001C2                 db    ? ;
.bss:000001C3                 db    ? ;
.bss:000001C4                 db    ? ;
.bss:000001C5                 db    ? ;
.bss:000001C6                 db    ? ;
.bss:000001C7                 db    ? ;
.bss:000001C8                 db    ? ;
.bss:000001C9                 db    ? ;
.bss:000001CA                 db    ? ;
.bss:000001CB                 db    ? ;
.bss:000001CC                 db    ? ;
.bss:000001CD                 db    ? ;
.bss:000001CE                 db    ? ;
.bss:000001CF                 db    ? ;
.bss:000001D0                 db    ? ;
.bss:000001D1                 db    ? ;
.bss:000001D2                 db    ? ;
.bss:000001D3                 db    ? ;
.bss:000001D4                 db    ? ;
.bss:000001D5                 db    ? ;
.bss:000001D6                 db    ? ;
.bss:000001D7                 db    ? ;
.bss:000001D8                 db    ? ;
.bss:000001D9                 db    ? ;
.bss:000001DA                 db    ? ;
.bss:000001DB                 db    ? ;
.bss:000001DC                 db    ? ;
.bss:000001DD                 db    ? ;
.bss:000001DE                 db    ? ;
.bss:000001DF                 db    ? ;
.bss:000001E0                 db    ? ;
.bss:000001E1                 db    ? ;
.bss:000001E2                 db    ? ;
.bss:000001E3                 db    ? ;
.bss:000001E4                 db    ? ;
.bss:000001E5                 db    ? ;
.bss:000001E6                 db    ? ;
.bss:000001E7                 db    ? ;
.bss:000001E8                 db    ? ;
.bss:000001E9                 db    ? ;
.bss:000001EA                 db    ? ;
.bss:000001EB                 db    ? ;
.bss:000001EC                 db    ? ;
.bss:000001ED                 db    ? ;
.bss:000001EE                 db    ? ;
.bss:000001EF                 db    ? ;
.bss:000001F0                 db    ? ;
.bss:000001F1                 db    ? ;
.bss:000001F2                 db    ? ;
.bss:000001F3                 db    ? ;
.bss:000001F4                 db    ? ;
.bss:000001F5                 db    ? ;
.bss:000001F6                 db    ? ;
.bss:000001F7                 db    ? ;
.bss:000001F8                 db    ? ;
.bss:000001F9                 db    ? ;
.bss:000001FA                 db    ? ;
.bss:000001FB                 db    ? ;
.bss:000001FC                 db    ? ;
.bss:000001FD                 db    ? ;
.bss:000001FE                 db    ? ;
.bss:000001FF                 db    ? ;
.bss:00000200                 db    ? ;
.bss:00000201                 db    ? ;
.bss:00000202                 db    ? ;
.bss:00000203                 db    ? ;
.bss:00000204                 db    ? ;
.bss:00000205                 db    ? ;
.bss:00000206                 db    ? ;
.bss:00000207                 db    ? ;
.bss:00000208                 db    ? ;
.bss:00000209                 db    ? ;
.bss:0000020A                 db    ? ;
.bss:0000020B                 db    ? ;
.bss:0000020C                 db    ? ;
.bss:0000020D                 db    ? ;
.bss:0000020E                 db    ? ;
.bss:0000020F                 db    ? ;
.bss:00000210                 db    ? ;
.bss:00000211                 db    ? ;
.bss:00000212                 db    ? ;
.bss:00000213                 db    ? ;
.bss:00000214                 db    ? ;
.bss:00000215                 db    ? ;
.bss:00000216                 db    ? ;
.bss:00000217                 db    ? ;
.bss:00000218                 db    ? ;
.bss:00000219                 db    ? ;
.bss:0000021A                 db    ? ;
.bss:0000021B                 db    ? ;
.bss:0000021C                 db    ? ;
.bss:0000021D                 db    ? ;
.bss:0000021E                 db    ? ;
.bss:0000021F                 db    ? ;
.bss:00000220                 db    ? ;
.bss:00000221                 db    ? ;
.bss:00000222                 db    ? ;
.bss:00000223                 db    ? ;
.bss:00000224                 db    ? ;
.bss:00000225                 db    ? ;
.bss:00000226                 db    ? ;
.bss:00000227                 db    ? ;
.bss:00000228                 db    ? ;
.bss:00000229                 db    ? ;
.bss:0000022A                 db    ? ;
.bss:0000022B                 db    ? ;
.bss:0000022C                 db    ? ;
.bss:0000022D                 db    ? ;
.bss:0000022E                 db    ? ;
.bss:0000022F                 db    ? ;
.bss:00000230                 db    ? ;
.bss:00000231                 db    ? ;
.bss:00000232                 db    ? ;
.bss:00000233                 db    ? ;
.bss:00000234                 db    ? ;
.bss:00000235                 db    ? ;
.bss:00000236                 db    ? ;
.bss:00000237                 db    ? ;
.bss:00000238                 db    ? ;
.bss:00000239                 db    ? ;
.bss:0000023A                 db    ? ;
.bss:0000023B                 db    ? ;
.bss:0000023C                 db    ? ;
.bss:0000023D                 db    ? ;
.bss:0000023E                 db    ? ;
.bss:0000023F                 db    ? ;
.bss:00000240                 db    ? ;
.bss:00000241                 db    ? ;
.bss:00000242                 db    ? ;
.bss:00000243                 db    ? ;
.bss:00000244                 db    ? ;
.bss:00000245                 db    ? ;
.bss:00000246                 db    ? ;
.bss:00000247                 db    ? ;
.bss:00000248 _p_setsockopt   dd ?                    ; DATA XREF: _sk_init+70Dw
.bss:00000248                                         ; _try_connect+15Cr ...
.bss:0000024C _p_inet_ntoa    dd ?                    ; DATA XREF: _sk_init+664w
.bss:0000024C                                         ; _sk_getaddr+14Fr
.bss:00000250 _local_interfaces db    ? ;             ; DATA XREF: _ipv4_is_local_addr+80o
.bss:00000251                 db    ? ;
.bss:00000252                 db    ? ;
.bss:00000253                 db    ? ;
.bss:00000254 unk_254         db    ? ;               ; DATA XREF: _ipv4_is_local_addr+F1o
.bss:00000255                 db    ? ;
.bss:00000256                 db    ? ;
.bss:00000257                 db    ? ;
.bss:00000258                 db    ? ;
.bss:00000259                 db    ? ;
.bss:0000025A                 db    ? ;
.bss:0000025B                 db    ? ;
.bss:0000025C                 db    ? ;
.bss:0000025D                 db    ? ;
.bss:0000025E                 db    ? ;
.bss:0000025F                 db    ? ;
.bss:00000260                 db    ? ;
.bss:00000261                 db    ? ;
.bss:00000262                 db    ? ;
.bss:00000263                 db    ? ;
.bss:00000264                 db    ? ;
.bss:00000265                 db    ? ;
.bss:00000266                 db    ? ;
.bss:00000267                 db    ? ;
.bss:00000268                 db    ? ;
.bss:00000269                 db    ? ;
.bss:0000026A                 db    ? ;
.bss:0000026B                 db    ? ;
.bss:0000026C                 db    ? ;
.bss:0000026D                 db    ? ;
.bss:0000026E                 db    ? ;
.bss:0000026F                 db    ? ;
.bss:00000270                 db    ? ;
.bss:00000271                 db    ? ;
.bss:00000272                 db    ? ;
.bss:00000273                 db    ? ;
.bss:00000274                 db    ? ;
.bss:00000275                 db    ? ;
.bss:00000276                 db    ? ;
.bss:00000277                 db    ? ;
.bss:00000278                 db    ? ;
.bss:00000279                 db    ? ;
.bss:0000027A                 db    ? ;
.bss:0000027B                 db    ? ;
.bss:0000027C                 db    ? ;
.bss:0000027D                 db    ? ;
.bss:0000027E                 db    ? ;
.bss:0000027F                 db    ? ;
.bss:00000280                 db    ? ;
.bss:00000281                 db    ? ;
.bss:00000282                 db    ? ;
.bss:00000283                 db    ? ;
.bss:00000284                 db    ? ;
.bss:00000285                 db    ? ;
.bss:00000286                 db    ? ;
.bss:00000287                 db    ? ;
.bss:00000288                 db    ? ;
.bss:00000289                 db    ? ;
.bss:0000028A                 db    ? ;
.bss:0000028B                 db    ? ;
.bss:0000028C                 db    ? ;
.bss:0000028D                 db    ? ;
.bss:0000028E                 db    ? ;
.bss:0000028F                 db    ? ;
.bss:00000290                 db    ? ;
.bss:00000291                 db    ? ;
.bss:00000292                 db    ? ;
.bss:00000293                 db    ? ;
.bss:00000294                 db    ? ;
.bss:00000295                 db    ? ;
.bss:00000296                 db    ? ;
.bss:00000297                 db    ? ;
.bss:00000298                 db    ? ;
.bss:00000299                 db    ? ;
.bss:0000029A                 db    ? ;
.bss:0000029B                 db    ? ;
.bss:0000029C                 db    ? ;
.bss:0000029D                 db    ? ;
.bss:0000029E                 db    ? ;
.bss:0000029F                 db    ? ;
.bss:000002A0                 db    ? ;
.bss:000002A1                 db    ? ;
.bss:000002A2                 db    ? ;
.bss:000002A3                 db    ? ;
.bss:000002A4                 db    ? ;
.bss:000002A5                 db    ? ;
.bss:000002A6                 db    ? ;
.bss:000002A7                 db    ? ;
.bss:000002A8                 db    ? ;
.bss:000002A9                 db    ? ;
.bss:000002AA                 db    ? ;
.bss:000002AB                 db    ? ;
.bss:000002AC                 db    ? ;
.bss:000002AD                 db    ? ;
.bss:000002AE                 db    ? ;
.bss:000002AF                 db    ? ;
.bss:000002B0                 db    ? ;
.bss:000002B1                 db    ? ;
.bss:000002B2                 db    ? ;
.bss:000002B3                 db    ? ;
.bss:000002B4                 db    ? ;
.bss:000002B5                 db    ? ;
.bss:000002B6                 db    ? ;
.bss:000002B7                 db    ? ;
.bss:000002B8                 db    ? ;
.bss:000002B9                 db    ? ;
.bss:000002BA                 db    ? ;
.bss:000002BB                 db    ? ;
.bss:000002BC                 db    ? ;
.bss:000002BD                 db    ? ;
.bss:000002BE                 db    ? ;
.bss:000002BF                 db    ? ;
.bss:000002C0                 db    ? ;
.bss:000002C1                 db    ? ;
.bss:000002C2                 db    ? ;
.bss:000002C3                 db    ? ;
.bss:000002C4                 db    ? ;
.bss:000002C5                 db    ? ;
.bss:000002C6                 db    ? ;
.bss:000002C7                 db    ? ;
.bss:000002C8                 db    ? ;
.bss:000002C9                 db    ? ;
.bss:000002CA                 db    ? ;
.bss:000002CB                 db    ? ;
.bss:000002CC                 db    ? ;
.bss:000002CD                 db    ? ;
.bss:000002CE                 db    ? ;
.bss:000002CF                 db    ? ;
.bss:000002D0                 db    ? ;
.bss:000002D1                 db    ? ;
.bss:000002D2                 db    ? ;
.bss:000002D3                 db    ? ;
.bss:000002D4                 db    ? ;
.bss:000002D5                 db    ? ;
.bss:000002D6                 db    ? ;
.bss:000002D7                 db    ? ;
.bss:000002D8                 db    ? ;
.bss:000002D9                 db    ? ;
.bss:000002DA                 db    ? ;
.bss:000002DB                 db    ? ;
.bss:000002DC                 db    ? ;
.bss:000002DD                 db    ? ;
.bss:000002DE                 db    ? ;
.bss:000002DF                 db    ? ;
.bss:000002E0                 db    ? ;
.bss:000002E1                 db    ? ;
.bss:000002E2                 db    ? ;
.bss:000002E3                 db    ? ;
.bss:000002E4                 db    ? ;
.bss:000002E5                 db    ? ;
.bss:000002E6                 db    ? ;
.bss:000002E7                 db    ? ;
.bss:000002E8                 db    ? ;
.bss:000002E9                 db    ? ;
.bss:000002EA                 db    ? ;
.bss:000002EB                 db    ? ;
.bss:000002EC                 db    ? ;
.bss:000002ED                 db    ? ;
.bss:000002EE                 db    ? ;
.bss:000002EF                 db    ? ;
.bss:000002F0                 db    ? ;
.bss:000002F1                 db    ? ;
.bss:000002F2                 db    ? ;
.bss:000002F3                 db    ? ;
.bss:000002F4                 db    ? ;
.bss:000002F5                 db    ? ;
.bss:000002F6                 db    ? ;
.bss:000002F7                 db    ? ;
.bss:000002F8                 db    ? ;
.bss:000002F9                 db    ? ;
.bss:000002FA                 db    ? ;
.bss:000002FB                 db    ? ;
.bss:000002FC                 db    ? ;
.bss:000002FD                 db    ? ;
.bss:000002FE                 db    ? ;
.bss:000002FF                 db    ? ;
.bss:00000300                 db    ? ;
.bss:00000301                 db    ? ;
.bss:00000302                 db    ? ;
.bss:00000303                 db    ? ;
.bss:00000304                 db    ? ;
.bss:00000305                 db    ? ;
.bss:00000306                 db    ? ;
.bss:00000307                 db    ? ;
.bss:00000308                 db    ? ;
.bss:00000309                 db    ? ;
.bss:0000030A                 db    ? ;
.bss:0000030B                 db    ? ;
.bss:0000030C                 db    ? ;
.bss:0000030D                 db    ? ;
.bss:0000030E                 db    ? ;
.bss:0000030F                 db    ? ;
.bss:00000310                 db    ? ;
.bss:00000311                 db    ? ;
.bss:00000312                 db    ? ;
.bss:00000313                 db    ? ;
.bss:00000314                 db    ? ;
.bss:00000315                 db    ? ;
.bss:00000316                 db    ? ;
.bss:00000317                 db    ? ;
.bss:00000318                 db    ? ;
.bss:00000319                 db    ? ;
.bss:0000031A                 db    ? ;
.bss:0000031B                 db    ? ;
.bss:0000031C                 db    ? ;
.bss:0000031D                 db    ? ;
.bss:0000031E                 db    ? ;
.bss:0000031F                 db    ? ;
.bss:00000320                 db    ? ;
.bss:00000321                 db    ? ;
.bss:00000322                 db    ? ;
.bss:00000323                 db    ? ;
.bss:00000324                 db    ? ;
.bss:00000325                 db    ? ;
.bss:00000326                 db    ? ;
.bss:00000327                 db    ? ;
.bss:00000328                 db    ? ;
.bss:00000329                 db    ? ;
.bss:0000032A                 db    ? ;
.bss:0000032B                 db    ? ;
.bss:0000032C                 db    ? ;
.bss:0000032D                 db    ? ;
.bss:0000032E                 db    ? ;
.bss:0000032F                 db    ? ;
.bss:00000330                 db    ? ;
.bss:00000331                 db    ? ;
.bss:00000332                 db    ? ;
.bss:00000333                 db    ? ;
.bss:00000334                 db    ? ;
.bss:00000335                 db    ? ;
.bss:00000336                 db    ? ;
.bss:00000337                 db    ? ;
.bss:00000338                 db    ? ;
.bss:00000339                 db    ? ;
.bss:0000033A                 db    ? ;
.bss:0000033B                 db    ? ;
.bss:0000033C                 db    ? ;
.bss:0000033D                 db    ? ;
.bss:0000033E                 db    ? ;
.bss:0000033F                 db    ? ;
.bss:00000340                 db    ? ;
.bss:00000341                 db    ? ;
.bss:00000342                 db    ? ;
.bss:00000343                 db    ? ;
.bss:00000344                 db    ? ;
.bss:00000345                 db    ? ;
.bss:00000346                 db    ? ;
.bss:00000347                 db    ? ;
.bss:00000348                 db    ? ;
.bss:00000349                 db    ? ;
.bss:0000034A                 db    ? ;
.bss:0000034B                 db    ? ;
.bss:0000034C                 db    ? ;
.bss:0000034D                 db    ? ;
.bss:0000034E                 db    ? ;
.bss:0000034F                 db    ? ;
.bss:00000350                 db    ? ;
.bss:00000351                 db    ? ;
.bss:00000352                 db    ? ;
.bss:00000353                 db    ? ;
.bss:00000354                 db    ? ;
.bss:00000355                 db    ? ;
.bss:00000356                 db    ? ;
.bss:00000357                 db    ? ;
.bss:00000358                 db    ? ;
.bss:00000359                 db    ? ;
.bss:0000035A                 db    ? ;
.bss:0000035B                 db    ? ;
.bss:0000035C                 db    ? ;
.bss:0000035D                 db    ? ;
.bss:0000035E                 db    ? ;
.bss:0000035F                 db    ? ;
.bss:00000360                 db    ? ;
.bss:00000361                 db    ? ;
.bss:00000362                 db    ? ;
.bss:00000363                 db    ? ;
.bss:00000364                 db    ? ;
.bss:00000365                 db    ? ;
.bss:00000366                 db    ? ;
.bss:00000367                 db    ? ;
.bss:00000368                 db    ? ;
.bss:00000369                 db    ? ;
.bss:0000036A                 db    ? ;
.bss:0000036B                 db    ? ;
.bss:0000036C                 db    ? ;
.bss:0000036D                 db    ? ;
.bss:0000036E                 db    ? ;
.bss:0000036F                 db    ? ;
.bss:00000370                 db    ? ;
.bss:00000371                 db    ? ;
.bss:00000372                 db    ? ;
.bss:00000373                 db    ? ;
.bss:00000374                 db    ? ;
.bss:00000375                 db    ? ;
.bss:00000376                 db    ? ;
.bss:00000377                 db    ? ;
.bss:00000378                 db    ? ;
.bss:00000379                 db    ? ;
.bss:0000037A                 db    ? ;
.bss:0000037B                 db    ? ;
.bss:0000037C                 db    ? ;
.bss:0000037D                 db    ? ;
.bss:0000037E                 db    ? ;
.bss:0000037F                 db    ? ;
.bss:00000380                 db    ? ;
.bss:00000381                 db    ? ;
.bss:00000382                 db    ? ;
.bss:00000383                 db    ? ;
.bss:00000384                 db    ? ;
.bss:00000385                 db    ? ;
.bss:00000386                 db    ? ;
.bss:00000387                 db    ? ;
.bss:00000388                 db    ? ;
.bss:00000389                 db    ? ;
.bss:0000038A                 db    ? ;
.bss:0000038B                 db    ? ;
.bss:0000038C                 db    ? ;
.bss:0000038D                 db    ? ;
.bss:0000038E                 db    ? ;
.bss:0000038F                 db    ? ;
.bss:00000390                 db    ? ;
.bss:00000391                 db    ? ;
.bss:00000392                 db    ? ;
.bss:00000393                 db    ? ;
.bss:00000394                 db    ? ;
.bss:00000395                 db    ? ;
.bss:00000396                 db    ? ;
.bss:00000397                 db    ? ;
.bss:00000398                 db    ? ;
.bss:00000399                 db    ? ;
.bss:0000039A                 db    ? ;
.bss:0000039B                 db    ? ;
.bss:0000039C                 db    ? ;
.bss:0000039D                 db    ? ;
.bss:0000039E                 db    ? ;
.bss:0000039F                 db    ? ;
.bss:000003A0                 db    ? ;
.bss:000003A1                 db    ? ;
.bss:000003A2                 db    ? ;
.bss:000003A3                 db    ? ;
.bss:000003A4                 db    ? ;
.bss:000003A5                 db    ? ;
.bss:000003A6                 db    ? ;
.bss:000003A7                 db    ? ;
.bss:000003A8                 db    ? ;
.bss:000003A9                 db    ? ;
.bss:000003AA                 db    ? ;
.bss:000003AB                 db    ? ;
.bss:000003AC                 db    ? ;
.bss:000003AD                 db    ? ;
.bss:000003AE                 db    ? ;
.bss:000003AF                 db    ? ;
.bss:000003B0                 db    ? ;
.bss:000003B1                 db    ? ;
.bss:000003B2                 db    ? ;
.bss:000003B3                 db    ? ;
.bss:000003B4                 db    ? ;
.bss:000003B5                 db    ? ;
.bss:000003B6                 db    ? ;
.bss:000003B7                 db    ? ;
.bss:000003B8                 db    ? ;
.bss:000003B9                 db    ? ;
.bss:000003BA                 db    ? ;
.bss:000003BB                 db    ? ;
.bss:000003BC                 db    ? ;
.bss:000003BD                 db    ? ;
.bss:000003BE                 db    ? ;
.bss:000003BF                 db    ? ;
.bss:000003C0                 db    ? ;
.bss:000003C1                 db    ? ;
.bss:000003C2                 db    ? ;
.bss:000003C3                 db    ? ;
.bss:000003C4                 db    ? ;
.bss:000003C5                 db    ? ;
.bss:000003C6                 db    ? ;
.bss:000003C7                 db    ? ;
.bss:000003C8                 db    ? ;
.bss:000003C9                 db    ? ;
.bss:000003CA                 db    ? ;
.bss:000003CB                 db    ? ;
.bss:000003CC                 db    ? ;
.bss:000003CD                 db    ? ;
.bss:000003CE                 db    ? ;
.bss:000003CF                 db    ? ;
.bss:000003D0                 db    ? ;
.bss:000003D1                 db    ? ;
.bss:000003D2                 db    ? ;
.bss:000003D3                 db    ? ;
.bss:000003D4                 db    ? ;
.bss:000003D5                 db    ? ;
.bss:000003D6                 db    ? ;
.bss:000003D7                 db    ? ;
.bss:000003D8                 db    ? ;
.bss:000003D9                 db    ? ;
.bss:000003DA                 db    ? ;
.bss:000003DB                 db    ? ;
.bss:000003DC                 db    ? ;
.bss:000003DD                 db    ? ;
.bss:000003DE                 db    ? ;
.bss:000003DF                 db    ? ;
.bss:000003E0                 db    ? ;
.bss:000003E1                 db    ? ;
.bss:000003E2                 db    ? ;
.bss:000003E3                 db    ? ;
.bss:000003E4                 db    ? ;
.bss:000003E5                 db    ? ;
.bss:000003E6                 db    ? ;
.bss:000003E7                 db    ? ;
.bss:000003E8                 db    ? ;
.bss:000003E9                 db    ? ;
.bss:000003EA                 db    ? ;
.bss:000003EB                 db    ? ;
.bss:000003EC                 db    ? ;
.bss:000003ED                 db    ? ;
.bss:000003EE                 db    ? ;
.bss:000003EF                 db    ? ;
.bss:000003F0                 db    ? ;
.bss:000003F1                 db    ? ;
.bss:000003F2                 db    ? ;
.bss:000003F3                 db    ? ;
.bss:000003F4                 db    ? ;
.bss:000003F5                 db    ? ;
.bss:000003F6                 db    ? ;
.bss:000003F7                 db    ? ;
.bss:000003F8                 db    ? ;
.bss:000003F9                 db    ? ;
.bss:000003FA                 db    ? ;
.bss:000003FB                 db    ? ;
.bss:000003FC                 db    ? ;
.bss:000003FD                 db    ? ;
.bss:000003FE                 db    ? ;
.bss:000003FF                 db    ? ;
.bss:00000400                 db    ? ;
.bss:00000401                 db    ? ;
.bss:00000402                 db    ? ;
.bss:00000403                 db    ? ;
.bss:00000404                 db    ? ;
.bss:00000405                 db    ? ;
.bss:00000406                 db    ? ;
.bss:00000407                 db    ? ;
.bss:00000408                 db    ? ;
.bss:00000409                 db    ? ;
.bss:0000040A                 db    ? ;
.bss:0000040B                 db    ? ;
.bss:0000040C                 db    ? ;
.bss:0000040D                 db    ? ;
.bss:0000040E                 db    ? ;
.bss:0000040F                 db    ? ;
.bss:00000410                 db    ? ;
.bss:00000411                 db    ? ;
.bss:00000412                 db    ? ;
.bss:00000413                 db    ? ;
.bss:00000414                 db    ? ;
.bss:00000415                 db    ? ;
.bss:00000416                 db    ? ;
.bss:00000417                 db    ? ;
.bss:00000418                 db    ? ;
.bss:00000419                 db    ? ;
.bss:0000041A                 db    ? ;
.bss:0000041B                 db    ? ;
.bss:0000041C                 db    ? ;
.bss:0000041D                 db    ? ;
.bss:0000041E                 db    ? ;
.bss:0000041F                 db    ? ;
.bss:00000420                 db    ? ;
.bss:00000421                 db    ? ;
.bss:00000422                 db    ? ;
.bss:00000423                 db    ? ;
.bss:00000424                 db    ? ;
.bss:00000425                 db    ? ;
.bss:00000426                 db    ? ;
.bss:00000427                 db    ? ;
.bss:00000428                 db    ? ;
.bss:00000429                 db    ? ;
.bss:0000042A                 db    ? ;
.bss:0000042B                 db    ? ;
.bss:0000042C                 db    ? ;
.bss:0000042D                 db    ? ;
.bss:0000042E                 db    ? ;
.bss:0000042F                 db    ? ;
.bss:00000430                 db    ? ;
.bss:00000431                 db    ? ;
.bss:00000432                 db    ? ;
.bss:00000433                 db    ? ;
.bss:00000434                 db    ? ;
.bss:00000435                 db    ? ;
.bss:00000436                 db    ? ;
.bss:00000437                 db    ? ;
.bss:00000438                 db    ? ;
.bss:00000439                 db    ? ;
.bss:0000043A                 db    ? ;
.bss:0000043B                 db    ? ;
.bss:0000043C                 db    ? ;
.bss:0000043D                 db    ? ;
.bss:0000043E                 db    ? ;
.bss:0000043F                 db    ? ;
.bss:00000440                 db    ? ;
.bss:00000441                 db    ? ;
.bss:00000442                 db    ? ;
.bss:00000443                 db    ? ;
.bss:00000444                 db    ? ;
.bss:00000445                 db    ? ;
.bss:00000446                 db    ? ;
.bss:00000447                 db    ? ;
.bss:00000448                 db    ? ;
.bss:00000449                 db    ? ;
.bss:0000044A                 db    ? ;
.bss:0000044B                 db    ? ;
.bss:0000044C                 db    ? ;
.bss:0000044D                 db    ? ;
.bss:0000044E                 db    ? ;
.bss:0000044F                 db    ? ;
.bss:00000450                 db    ? ;
.bss:00000451                 db    ? ;
.bss:00000452                 db    ? ;
.bss:00000453                 db    ? ;
.bss:00000454                 db    ? ;
.bss:00000455                 db    ? ;
.bss:00000456                 db    ? ;
.bss:00000457                 db    ? ;
.bss:00000458                 db    ? ;
.bss:00000459                 db    ? ;
.bss:0000045A                 db    ? ;
.bss:0000045B                 db    ? ;
.bss:0000045C                 db    ? ;
.bss:0000045D                 db    ? ;
.bss:0000045E                 db    ? ;
.bss:0000045F                 db    ? ;
.bss:00000460                 db    ? ;
.bss:00000461                 db    ? ;
.bss:00000462                 db    ? ;
.bss:00000463                 db    ? ;
.bss:00000464                 db    ? ;
.bss:00000465                 db    ? ;
.bss:00000466                 db    ? ;
.bss:00000467                 db    ? ;
.bss:00000468                 db    ? ;
.bss:00000469                 db    ? ;
.bss:0000046A                 db    ? ;
.bss:0000046B                 db    ? ;
.bss:0000046C                 db    ? ;
.bss:0000046D                 db    ? ;
.bss:0000046E                 db    ? ;
.bss:0000046F                 db    ? ;
.bss:00000470                 db    ? ;
.bss:00000471                 db    ? ;
.bss:00000472                 db    ? ;
.bss:00000473                 db    ? ;
.bss:00000474                 db    ? ;
.bss:00000475                 db    ? ;
.bss:00000476                 db    ? ;
.bss:00000477                 db    ? ;
.bss:00000478                 db    ? ;
.bss:00000479                 db    ? ;
.bss:0000047A                 db    ? ;
.bss:0000047B                 db    ? ;
.bss:0000047C                 db    ? ;
.bss:0000047D                 db    ? ;
.bss:0000047E                 db    ? ;
.bss:0000047F                 db    ? ;
.bss:00000480                 db    ? ;
.bss:00000481                 db    ? ;
.bss:00000482                 db    ? ;
.bss:00000483                 db    ? ;
.bss:00000484                 db    ? ;
.bss:00000485                 db    ? ;
.bss:00000486                 db    ? ;
.bss:00000487                 db    ? ;
.bss:00000488                 db    ? ;
.bss:00000489                 db    ? ;
.bss:0000048A                 db    ? ;
.bss:0000048B                 db    ? ;
.bss:0000048C                 db    ? ;
.bss:0000048D                 db    ? ;
.bss:0000048E                 db    ? ;
.bss:0000048F                 db    ? ;
.bss:00000490                 db    ? ;
.bss:00000491                 db    ? ;
.bss:00000492                 db    ? ;
.bss:00000493                 db    ? ;
.bss:00000494                 db    ? ;
.bss:00000495                 db    ? ;
.bss:00000496                 db    ? ;
.bss:00000497                 db    ? ;
.bss:00000498                 db    ? ;
.bss:00000499                 db    ? ;
.bss:0000049A                 db    ? ;
.bss:0000049B                 db    ? ;
.bss:0000049C                 db    ? ;
.bss:0000049D                 db    ? ;
.bss:0000049E                 db    ? ;
.bss:0000049F                 db    ? ;
.bss:000004A0                 db    ? ;
.bss:000004A1                 db    ? ;
.bss:000004A2                 db    ? ;
.bss:000004A3                 db    ? ;
.bss:000004A4                 db    ? ;
.bss:000004A5                 db    ? ;
.bss:000004A6                 db    ? ;
.bss:000004A7                 db    ? ;
.bss:000004A8                 db    ? ;
.bss:000004A9                 db    ? ;
.bss:000004AA                 db    ? ;
.bss:000004AB                 db    ? ;
.bss:000004AC                 db    ? ;
.bss:000004AD                 db    ? ;
.bss:000004AE                 db    ? ;
.bss:000004AF                 db    ? ;
.bss:000004B0                 db    ? ;
.bss:000004B1                 db    ? ;
.bss:000004B2                 db    ? ;
.bss:000004B3                 db    ? ;
.bss:000004B4                 db    ? ;
.bss:000004B5                 db    ? ;
.bss:000004B6                 db    ? ;
.bss:000004B7                 db    ? ;
.bss:000004B8                 db    ? ;
.bss:000004B9                 db    ? ;
.bss:000004BA                 db    ? ;
.bss:000004BB                 db    ? ;
.bss:000004BC                 db    ? ;
.bss:000004BD                 db    ? ;
.bss:000004BE                 db    ? ;
.bss:000004BF                 db    ? ;
.bss:000004C0                 db    ? ;
.bss:000004C1                 db    ? ;
.bss:000004C2                 db    ? ;
.bss:000004C3                 db    ? ;
.bss:000004C4                 db    ? ;
.bss:000004C5                 db    ? ;
.bss:000004C6                 db    ? ;
.bss:000004C7                 db    ? ;
.bss:000004C8                 db    ? ;
.bss:000004C9                 db    ? ;
.bss:000004CA                 db    ? ;
.bss:000004CB                 db    ? ;
.bss:000004CC                 db    ? ;
.bss:000004CD                 db    ? ;
.bss:000004CE                 db    ? ;
.bss:000004CF                 db    ? ;
.bss:000004D0                 db    ? ;
.bss:000004D1                 db    ? ;
.bss:000004D2                 db    ? ;
.bss:000004D3                 db    ? ;
.bss:000004D4                 db    ? ;
.bss:000004D5                 db    ? ;
.bss:000004D6                 db    ? ;
.bss:000004D7                 db    ? ;
.bss:000004D8                 db    ? ;
.bss:000004D9                 db    ? ;
.bss:000004DA                 db    ? ;
.bss:000004DB                 db    ? ;
.bss:000004DC                 db    ? ;
.bss:000004DD                 db    ? ;
.bss:000004DE                 db    ? ;
.bss:000004DF                 db    ? ;
.bss:000004E0                 db    ? ;
.bss:000004E1                 db    ? ;
.bss:000004E2                 db    ? ;
.bss:000004E3                 db    ? ;
.bss:000004E4                 db    ? ;
.bss:000004E5                 db    ? ;
.bss:000004E6                 db    ? ;
.bss:000004E7                 db    ? ;
.bss:000004E8                 db    ? ;
.bss:000004E9                 db    ? ;
.bss:000004EA                 db    ? ;
.bss:000004EB                 db    ? ;
.bss:000004EC                 db    ? ;
.bss:000004ED                 db    ? ;
.bss:000004EE                 db    ? ;
.bss:000004EF                 db    ? ;
.bss:000004F0                 db    ? ;
.bss:000004F1                 db    ? ;
.bss:000004F2                 db    ? ;
.bss:000004F3                 db    ? ;
.bss:000004F4                 db    ? ;
.bss:000004F5                 db    ? ;
.bss:000004F6                 db    ? ;
.bss:000004F7                 db    ? ;
.bss:000004F8                 db    ? ;
.bss:000004F9                 db    ? ;
.bss:000004FA                 db    ? ;
.bss:000004FB                 db    ? ;
.bss:000004FC                 db    ? ;
.bss:000004FD                 db    ? ;
.bss:000004FE                 db    ? ;
.bss:000004FF                 db    ? ;
.bss:00000500                 db    ? ;
.bss:00000501                 db    ? ;
.bss:00000502                 db    ? ;
.bss:00000503                 db    ? ;
.bss:00000504                 db    ? ;
.bss:00000505                 db    ? ;
.bss:00000506                 db    ? ;
.bss:00000507                 db    ? ;
.bss:00000508                 db    ? ;
.bss:00000509                 db    ? ;
.bss:0000050A                 db    ? ;
.bss:0000050B                 db    ? ;
.bss:0000050C                 db    ? ;
.bss:0000050D                 db    ? ;
.bss:0000050E                 db    ? ;
.bss:0000050F                 db    ? ;
.bss:00000510                 db    ? ;
.bss:00000511                 db    ? ;
.bss:00000512                 db    ? ;
.bss:00000513                 db    ? ;
.bss:00000514                 db    ? ;
.bss:00000515                 db    ? ;
.bss:00000516                 db    ? ;
.bss:00000517                 db    ? ;
.bss:00000518                 db    ? ;
.bss:00000519                 db    ? ;
.bss:0000051A                 db    ? ;
.bss:0000051B                 db    ? ;
.bss:0000051C                 db    ? ;
.bss:0000051D                 db    ? ;
.bss:0000051E                 db    ? ;
.bss:0000051F                 db    ? ;
.bss:00000520                 db    ? ;
.bss:00000521                 db    ? ;
.bss:00000522                 db    ? ;
.bss:00000523                 db    ? ;
.bss:00000524                 db    ? ;
.bss:00000525                 db    ? ;
.bss:00000526                 db    ? ;
.bss:00000527                 db    ? ;
.bss:00000528                 db    ? ;
.bss:00000529                 db    ? ;
.bss:0000052A                 db    ? ;
.bss:0000052B                 db    ? ;
.bss:0000052C                 db    ? ;
.bss:0000052D                 db    ? ;
.bss:0000052E                 db    ? ;
.bss:0000052F                 db    ? ;
.bss:00000530                 db    ? ;
.bss:00000531                 db    ? ;
.bss:00000532                 db    ? ;
.bss:00000533                 db    ? ;
.bss:00000534                 db    ? ;
.bss:00000535                 db    ? ;
.bss:00000536                 db    ? ;
.bss:00000537                 db    ? ;
.bss:00000538                 db    ? ;
.bss:00000539                 db    ? ;
.bss:0000053A                 db    ? ;
.bss:0000053B                 db    ? ;
.bss:0000053C                 db    ? ;
.bss:0000053D                 db    ? ;
.bss:0000053E                 db    ? ;
.bss:0000053F                 db    ? ;
.bss:00000540                 db    ? ;
.bss:00000541                 db    ? ;
.bss:00000542                 db    ? ;
.bss:00000543                 db    ? ;
.bss:00000544                 db    ? ;
.bss:00000545                 db    ? ;
.bss:00000546                 db    ? ;
.bss:00000547                 db    ? ;
.bss:00000548                 db    ? ;
.bss:00000549                 db    ? ;
.bss:0000054A                 db    ? ;
.bss:0000054B                 db    ? ;
.bss:0000054C                 db    ? ;
.bss:0000054D                 db    ? ;
.bss:0000054E                 db    ? ;
.bss:0000054F                 db    ? ;
.bss:00000550                 db    ? ;
.bss:00000551                 db    ? ;
.bss:00000552                 db    ? ;
.bss:00000553                 db    ? ;
.bss:00000554                 db    ? ;
.bss:00000555                 db    ? ;
.bss:00000556                 db    ? ;
.bss:00000557                 db    ? ;
.bss:00000558                 db    ? ;
.bss:00000559                 db    ? ;
.bss:0000055A                 db    ? ;
.bss:0000055B                 db    ? ;
.bss:0000055C                 db    ? ;
.bss:0000055D                 db    ? ;
.bss:0000055E                 db    ? ;
.bss:0000055F                 db    ? ;
.bss:00000560                 db    ? ;
.bss:00000561                 db    ? ;
.bss:00000562                 db    ? ;
.bss:00000563                 db    ? ;
.bss:00000564                 db    ? ;
.bss:00000565                 db    ? ;
.bss:00000566                 db    ? ;
.bss:00000567                 db    ? ;
.bss:00000568                 db    ? ;
.bss:00000569                 db    ? ;
.bss:0000056A                 db    ? ;
.bss:0000056B                 db    ? ;
.bss:0000056C                 db    ? ;
.bss:0000056D                 db    ? ;
.bss:0000056E                 db    ? ;
.bss:0000056F                 db    ? ;
.bss:00000570                 db    ? ;
.bss:00000571                 db    ? ;
.bss:00000572                 db    ? ;
.bss:00000573                 db    ? ;
.bss:00000574                 db    ? ;
.bss:00000575                 db    ? ;
.bss:00000576                 db    ? ;
.bss:00000577                 db    ? ;
.bss:00000578                 db    ? ;
.bss:00000579                 db    ? ;
.bss:0000057A                 db    ? ;
.bss:0000057B                 db    ? ;
.bss:0000057C                 db    ? ;
.bss:0000057D                 db    ? ;
.bss:0000057E                 db    ? ;
.bss:0000057F                 db    ? ;
.bss:00000580                 db    ? ;
.bss:00000581                 db    ? ;
.bss:00000582                 db    ? ;
.bss:00000583                 db    ? ;
.bss:00000584                 db    ? ;
.bss:00000585                 db    ? ;
.bss:00000586                 db    ? ;
.bss:00000587                 db    ? ;
.bss:00000588                 db    ? ;
.bss:00000589                 db    ? ;
.bss:0000058A                 db    ? ;
.bss:0000058B                 db    ? ;
.bss:0000058C                 db    ? ;
.bss:0000058D                 db    ? ;
.bss:0000058E                 db    ? ;
.bss:0000058F                 db    ? ;
.bss:00000590                 db    ? ;
.bss:00000591                 db    ? ;
.bss:00000592                 db    ? ;
.bss:00000593                 db    ? ;
.bss:00000594                 db    ? ;
.bss:00000595                 db    ? ;
.bss:00000596                 db    ? ;
.bss:00000597                 db    ? ;
.bss:00000598                 db    ? ;
.bss:00000599                 db    ? ;
.bss:0000059A                 db    ? ;
.bss:0000059B                 db    ? ;
.bss:0000059C                 db    ? ;
.bss:0000059D                 db    ? ;
.bss:0000059E                 db    ? ;
.bss:0000059F                 db    ? ;
.bss:000005A0                 db    ? ;
.bss:000005A1                 db    ? ;
.bss:000005A2                 db    ? ;
.bss:000005A3                 db    ? ;
.bss:000005A4                 db    ? ;
.bss:000005A5                 db    ? ;
.bss:000005A6                 db    ? ;
.bss:000005A7                 db    ? ;
.bss:000005A8                 db    ? ;
.bss:000005A9                 db    ? ;
.bss:000005AA                 db    ? ;
.bss:000005AB                 db    ? ;
.bss:000005AC                 db    ? ;
.bss:000005AD                 db    ? ;
.bss:000005AE                 db    ? ;
.bss:000005AF                 db    ? ;
.bss:000005B0                 db    ? ;
.bss:000005B1                 db    ? ;
.bss:000005B2                 db    ? ;
.bss:000005B3                 db    ? ;
.bss:000005B4                 db    ? ;
.bss:000005B5                 db    ? ;
.bss:000005B6                 db    ? ;
.bss:000005B7                 db    ? ;
.bss:000005B8                 db    ? ;
.bss:000005B9                 db    ? ;
.bss:000005BA                 db    ? ;
.bss:000005BB                 db    ? ;
.bss:000005BC                 db    ? ;
.bss:000005BD                 db    ? ;
.bss:000005BE                 db    ? ;
.bss:000005BF                 db    ? ;
.bss:000005C0                 db    ? ;
.bss:000005C1                 db    ? ;
.bss:000005C2                 db    ? ;
.bss:000005C3                 db    ? ;
.bss:000005C4                 db    ? ;
.bss:000005C5                 db    ? ;
.bss:000005C6                 db    ? ;
.bss:000005C7                 db    ? ;
.bss:000005C8                 db    ? ;
.bss:000005C9                 db    ? ;
.bss:000005CA                 db    ? ;
.bss:000005CB                 db    ? ;
.bss:000005CC                 db    ? ;
.bss:000005CD                 db    ? ;
.bss:000005CE                 db    ? ;
.bss:000005CF                 db    ? ;
.bss:000005D0                 db    ? ;
.bss:000005D1                 db    ? ;
.bss:000005D2                 db    ? ;
.bss:000005D3                 db    ? ;
.bss:000005D4                 db    ? ;
.bss:000005D5                 db    ? ;
.bss:000005D6                 db    ? ;
.bss:000005D7                 db    ? ;
.bss:000005D8                 db    ? ;
.bss:000005D9                 db    ? ;
.bss:000005DA                 db    ? ;
.bss:000005DB                 db    ? ;
.bss:000005DC                 db    ? ;
.bss:000005DD                 db    ? ;
.bss:000005DE                 db    ? ;
.bss:000005DF                 db    ? ;
.bss:000005E0                 db    ? ;
.bss:000005E1                 db    ? ;
.bss:000005E2                 db    ? ;
.bss:000005E3                 db    ? ;
.bss:000005E4                 db    ? ;
.bss:000005E5                 db    ? ;
.bss:000005E6                 db    ? ;
.bss:000005E7                 db    ? ;
.bss:000005E8                 db    ? ;
.bss:000005E9                 db    ? ;
.bss:000005EA                 db    ? ;
.bss:000005EB                 db    ? ;
.bss:000005EC                 db    ? ;
.bss:000005ED                 db    ? ;
.bss:000005EE                 db    ? ;
.bss:000005EF                 db    ? ;
.bss:000005F0                 db    ? ;
.bss:000005F1                 db    ? ;
.bss:000005F2                 db    ? ;
.bss:000005F3                 db    ? ;
.bss:000005F4                 db    ? ;
.bss:000005F5                 db    ? ;
.bss:000005F6                 db    ? ;
.bss:000005F7                 db    ? ;
.bss:000005F8                 db    ? ;
.bss:000005F9                 db    ? ;
.bss:000005FA                 db    ? ;
.bss:000005FB                 db    ? ;
.bss:000005FC                 db    ? ;
.bss:000005FD                 db    ? ;
.bss:000005FE                 db    ? ;
.bss:000005FF                 db    ? ;
.bss:00000600                 db    ? ;
.bss:00000601                 db    ? ;
.bss:00000602                 db    ? ;
.bss:00000603                 db    ? ;
.bss:00000604                 db    ? ;
.bss:00000605                 db    ? ;
.bss:00000606                 db    ? ;
.bss:00000607                 db    ? ;
.bss:00000608                 db    ? ;
.bss:00000609                 db    ? ;
.bss:0000060A                 db    ? ;
.bss:0000060B                 db    ? ;
.bss:0000060C                 db    ? ;
.bss:0000060D                 db    ? ;
.bss:0000060E                 db    ? ;
.bss:0000060F                 db    ? ;
.bss:00000610                 db    ? ;
.bss:00000611                 db    ? ;
.bss:00000612                 db    ? ;
.bss:00000613                 db    ? ;
.bss:00000614                 db    ? ;
.bss:00000615                 db    ? ;
.bss:00000616                 db    ? ;
.bss:00000617                 db    ? ;
.bss:00000618                 db    ? ;
.bss:00000619                 db    ? ;
.bss:0000061A                 db    ? ;
.bss:0000061B                 db    ? ;
.bss:0000061C                 db    ? ;
.bss:0000061D                 db    ? ;
.bss:0000061E                 db    ? ;
.bss:0000061F                 db    ? ;
.bss:00000620                 db    ? ;
.bss:00000621                 db    ? ;
.bss:00000622                 db    ? ;
.bss:00000623                 db    ? ;
.bss:00000624                 db    ? ;
.bss:00000625                 db    ? ;
.bss:00000626                 db    ? ;
.bss:00000627                 db    ? ;
.bss:00000628                 db    ? ;
.bss:00000629                 db    ? ;
.bss:0000062A                 db    ? ;
.bss:0000062B                 db    ? ;
.bss:0000062C                 db    ? ;
.bss:0000062D                 db    ? ;
.bss:0000062E                 db    ? ;
.bss:0000062F                 db    ? ;
.bss:00000630                 db    ? ;
.bss:00000631                 db    ? ;
.bss:00000632                 db    ? ;
.bss:00000633                 db    ? ;
.bss:00000634                 db    ? ;
.bss:00000635                 db    ? ;
.bss:00000636                 db    ? ;
.bss:00000637                 db    ? ;
.bss:00000638                 db    ? ;
.bss:00000639                 db    ? ;
.bss:0000063A                 db    ? ;
.bss:0000063B                 db    ? ;
.bss:0000063C                 db    ? ;
.bss:0000063D                 db    ? ;
.bss:0000063E                 db    ? ;
.bss:0000063F                 db    ? ;
.bss:00000640                 db    ? ;
.bss:00000641                 db    ? ;
.bss:00000642                 db    ? ;
.bss:00000643                 db    ? ;
.bss:00000644                 db    ? ;
.bss:00000645                 db    ? ;
.bss:00000646                 db    ? ;
.bss:00000647                 db    ? ;
.bss:00000648                 db    ? ;
.bss:00000649                 db    ? ;
.bss:0000064A                 db    ? ;
.bss:0000064B                 db    ? ;
.bss:0000064C                 db    ? ;
.bss:0000064D                 db    ? ;
.bss:0000064E                 db    ? ;
.bss:0000064F                 db    ? ;
.bss:00000650                 db    ? ;
.bss:00000651                 db    ? ;
.bss:00000652                 db    ? ;
.bss:00000653                 db    ? ;
.bss:00000654                 db    ? ;
.bss:00000655                 db    ? ;
.bss:00000656                 db    ? ;
.bss:00000657                 db    ? ;
.bss:00000658                 db    ? ;
.bss:00000659                 db    ? ;
.bss:0000065A                 db    ? ;
.bss:0000065B                 db    ? ;
.bss:0000065C                 db    ? ;
.bss:0000065D                 db    ? ;
.bss:0000065E                 db    ? ;
.bss:0000065F                 db    ? ;
.bss:00000660                 db    ? ;
.bss:00000661                 db    ? ;
.bss:00000662                 db    ? ;
.bss:00000663                 db    ? ;
.bss:00000664                 db    ? ;
.bss:00000665                 db    ? ;
.bss:00000666                 db    ? ;
.bss:00000667                 db    ? ;
.bss:00000668                 db    ? ;
.bss:00000669                 db    ? ;
.bss:0000066A                 db    ? ;
.bss:0000066B                 db    ? ;
.bss:0000066C                 db    ? ;
.bss:0000066D                 db    ? ;
.bss:0000066E                 db    ? ;
.bss:0000066F                 db    ? ;
.bss:00000670                 db    ? ;
.bss:00000671                 db    ? ;
.bss:00000672                 db    ? ;
.bss:00000673                 db    ? ;
.bss:00000674                 db    ? ;
.bss:00000675                 db    ? ;
.bss:00000676                 db    ? ;
.bss:00000677                 db    ? ;
.bss:00000678                 db    ? ;
.bss:00000679                 db    ? ;
.bss:0000067A                 db    ? ;
.bss:0000067B                 db    ? ;
.bss:0000067C                 db    ? ;
.bss:0000067D                 db    ? ;
.bss:0000067E                 db    ? ;
.bss:0000067F                 db    ? ;
.bss:00000680                 db    ? ;
.bss:00000681                 db    ? ;
.bss:00000682                 db    ? ;
.bss:00000683                 db    ? ;
.bss:00000684                 db    ? ;
.bss:00000685                 db    ? ;
.bss:00000686                 db    ? ;
.bss:00000687                 db    ? ;
.bss:00000688                 db    ? ;
.bss:00000689                 db    ? ;
.bss:0000068A                 db    ? ;
.bss:0000068B                 db    ? ;
.bss:0000068C                 db    ? ;
.bss:0000068D                 db    ? ;
.bss:0000068E                 db    ? ;
.bss:0000068F                 db    ? ;
.bss:00000690                 db    ? ;
.bss:00000691                 db    ? ;
.bss:00000692                 db    ? ;
.bss:00000693                 db    ? ;
.bss:00000694                 db    ? ;
.bss:00000695                 db    ? ;
.bss:00000696                 db    ? ;
.bss:00000697                 db    ? ;
.bss:00000698                 db    ? ;
.bss:00000699                 db    ? ;
.bss:0000069A                 db    ? ;
.bss:0000069B                 db    ? ;
.bss:0000069C                 db    ? ;
.bss:0000069D                 db    ? ;
.bss:0000069E                 db    ? ;
.bss:0000069F                 db    ? ;
.bss:000006A0                 db    ? ;
.bss:000006A1                 db    ? ;
.bss:000006A2                 db    ? ;
.bss:000006A3                 db    ? ;
.bss:000006A4                 db    ? ;
.bss:000006A5                 db    ? ;
.bss:000006A6                 db    ? ;
.bss:000006A7                 db    ? ;
.bss:000006A8                 db    ? ;
.bss:000006A9                 db    ? ;
.bss:000006AA                 db    ? ;
.bss:000006AB                 db    ? ;
.bss:000006AC                 db    ? ;
.bss:000006AD                 db    ? ;
.bss:000006AE                 db    ? ;
.bss:000006AF                 db    ? ;
.bss:000006B0                 db    ? ;
.bss:000006B1                 db    ? ;
.bss:000006B2                 db    ? ;
.bss:000006B3                 db    ? ;
.bss:000006B4                 db    ? ;
.bss:000006B5                 db    ? ;
.bss:000006B6                 db    ? ;
.bss:000006B7                 db    ? ;
.bss:000006B8                 db    ? ;
.bss:000006B9                 db    ? ;
.bss:000006BA                 db    ? ;
.bss:000006BB                 db    ? ;
.bss:000006BC                 db    ? ;
.bss:000006BD                 db    ? ;
.bss:000006BE                 db    ? ;
.bss:000006BF                 db    ? ;
.bss:000006C0                 db    ? ;
.bss:000006C1                 db    ? ;
.bss:000006C2                 db    ? ;
.bss:000006C3                 db    ? ;
.bss:000006C4                 db    ? ;
.bss:000006C5                 db    ? ;
.bss:000006C6                 db    ? ;
.bss:000006C7                 db    ? ;
.bss:000006C8                 db    ? ;
.bss:000006C9                 db    ? ;
.bss:000006CA                 db    ? ;
.bss:000006CB                 db    ? ;
.bss:000006CC                 db    ? ;
.bss:000006CD                 db    ? ;
.bss:000006CE                 db    ? ;
.bss:000006CF                 db    ? ;
.bss:000006D0                 db    ? ;
.bss:000006D1                 db    ? ;
.bss:000006D2                 db    ? ;
.bss:000006D3                 db    ? ;
.bss:000006D4                 db    ? ;
.bss:000006D5                 db    ? ;
.bss:000006D6                 db    ? ;
.bss:000006D7                 db    ? ;
.bss:000006D8                 db    ? ;
.bss:000006D9                 db    ? ;
.bss:000006DA                 db    ? ;
.bss:000006DB                 db    ? ;
.bss:000006DC                 db    ? ;
.bss:000006DD                 db    ? ;
.bss:000006DE                 db    ? ;
.bss:000006DF                 db    ? ;
.bss:000006E0                 db    ? ;
.bss:000006E1                 db    ? ;
.bss:000006E2                 db    ? ;
.bss:000006E3                 db    ? ;
.bss:000006E4                 db    ? ;
.bss:000006E5                 db    ? ;
.bss:000006E6                 db    ? ;
.bss:000006E7                 db    ? ;
.bss:000006E8                 db    ? ;
.bss:000006E9                 db    ? ;
.bss:000006EA                 db    ? ;
.bss:000006EB                 db    ? ;
.bss:000006EC                 db    ? ;
.bss:000006ED                 db    ? ;
.bss:000006EE                 db    ? ;
.bss:000006EF                 db    ? ;
.bss:000006F0                 db    ? ;
.bss:000006F1                 db    ? ;
.bss:000006F2                 db    ? ;
.bss:000006F3                 db    ? ;
.bss:000006F4                 db    ? ;
.bss:000006F5                 db    ? ;
.bss:000006F6                 db    ? ;
.bss:000006F7                 db    ? ;
.bss:000006F8                 db    ? ;
.bss:000006F9                 db    ? ;
.bss:000006FA                 db    ? ;
.bss:000006FB                 db    ? ;
.bss:000006FC                 db    ? ;
.bss:000006FD                 db    ? ;
.bss:000006FE                 db    ? ;
.bss:000006FF                 db    ? ;
.bss:00000700                 db    ? ;
.bss:00000701                 db    ? ;
.bss:00000702                 db    ? ;
.bss:00000703                 db    ? ;
.bss:00000704                 db    ? ;
.bss:00000705                 db    ? ;
.bss:00000706                 db    ? ;
.bss:00000707                 db    ? ;
.bss:00000708                 db    ? ;
.bss:00000709                 db    ? ;
.bss:0000070A                 db    ? ;
.bss:0000070B                 db    ? ;
.bss:0000070C                 db    ? ;
.bss:0000070D                 db    ? ;
.bss:0000070E                 db    ? ;
.bss:0000070F                 db    ? ;
.bss:00000710 _p_getnameinfo  dd ?                    ; DATA XREF: _sk_init+130w
.bss:00000710                                         ; _sk_init+236w
.bss:00000714 _n_local_interfaces dd ?                ; DATA XREF: _ipv4_is_local_addr:loc_30C3r
.bss:00000714                                         ; _ipv4_is_local_addr+AFw ...
.bss:00000718 _p_gai_strerror dd ?                    ; DATA XREF: _sk_init+169w
.bss:00000718                                         ; _sk_init+26Ew ...
.bss:0000071C _p_htons        dd ?                    ; DATA XREF: _sk_init+512w
.bss:0000071C                                         ; _try_connect+213r ...
.bss:00000720 _p_gethostname  dd ?                    ; DATA XREF: _sk_init+583w
.bss:00000720                                         ; _get_hostname+4Ar
.bss:00000724 _p_getaddrinfo  dd ?                    ; DATA XREF: _sk_init+C0w
.bss:00000724                                         ; _sk_init+1C5w ...
.bss:00000728 _p_getservbyname dd ?                   ; DATA XREF: _sk_init+5F3w
.bss:00000728                                         ; _net_service_lookup+14r
.bss:0000072C _p_htonl        dd ?                    ; DATA XREF: _sk_init+4DAw
.bss:0000072C                                         ; _sk_getaddr+135r ...
.bss:00000730 _p_closesocket  dd ?                    ; DATA XREF: _sk_init+469w
.bss:00000730                                         ; _sk_cleanup+55r ...
.bss:00000734 _p_WSAAddressToStringA dd ?             ; DATA XREF: _sk_init+2A6w
.bss:00000734                                         ; _sk_getaddr+38r ...
.bss:00000738 _p_WSACleanup   dd ?                    ; DATA XREF: _sk_init+431w
.bss:00000738                                         ; _sk_cleanup:loc_1FC9r ...
.bss:0000073C _p_ioctlsocket  dd ?                    ; DATA XREF: _sk_init+839w
.bss:0000073C                                         ; _select_result+258r
.bss:00000740 _p_socket       dd ?                    ; DATA XREF: _sk_init+745w
.bss:00000740                                         ; _ipv4_is_local_addr+58r ...
.bss:00000744 _sktree         dd ?                    ; DATA XREF: _sk_init+94Cw
.bss:00000744                                         ; _sk_cleanup+15r ...
.bss:00000748 ; HMODULE winsock_module
.bss:00000748 _winsock_module dd ?                    ; DATA XREF: _sk_init+2Aw
.bss:00000748                                         ; _sk_init+2Fr ...
.bss:0000074C ; HMODULE winsock2_module
.bss:0000074C _winsock2_module dd ?                   ; DATA XREF: _sk_init+34w
.bss:0000074C                                         ; _sk_init:loc_17D0r ...
.bss:00000750 ; HMODULE wship6_module
.bss:00000750 _wship6_module  dd ?                    ; DATA XREF: _sk_init+180w
.bss:00000750                                         ; _sk_init+185r ...
.bss:00000754 _errstrings     dd ?                    ; DATA XREF: _winsock_error_string:$LN41r
.bss:00000754                                         ; _winsock_error_string+1E4w ...
.bss:00000754 _bss            ends
.bss:00000754
.data:00000758 ; ===========================================================================
.data:00000758
.data:00000758 ; Segment type: Pure data
.data:00000758 ; Segment permissions: Read/Write
.data:00000758 ; Segment alignment 'qword' can not be represented in assembly
.data:00000758 _data           segment para public 'DATA' use32
.data:00000758                 assume cs:_data
.data:00000758                 ;org 758h
.data:00000758 $SG86468        db 'ws2_32.dll',0       ; DATA XREF: _sk_init+1Do
.data:00000763                 align 4
.data:00000764 $SG86470        db 'wsock32.dll',0      ; DATA XREF: _sk_init+42o
.data:00000770 $SG86472        db 'Unable to load any WinSock library',0
.data:00000770                                         ; DATA XREF: _sk_init+5Do
.data:00000793                 align 4
.data:00000794 ; CHAR _SG86475[]
.data:00000794 $SG86475        db 'getaddrinfo',0      ; DATA XREF: _sk_init+6Co
.data:000007A0 ; CHAR _SG86478[]
.data:000007A0 $SG86478        db 'getaddrinfo',0      ; DATA XREF: _sk_init+98o
.data:000007AC ; CHAR _SG86481[]
.data:000007AC $SG86481        db 'freeaddrinfo',0     ; DATA XREF: _sk_init+D0o
.data:000007B9                 align 4
.data:000007BC ; CHAR _SG86484[]
.data:000007BC $SG86484        db 'getnameinfo',0      ; DATA XREF: _sk_init+109o
.data:000007C8 ; CHAR _SG86487[]
.data:000007C8 $SG86487        db 'gai_strerror',0     ; DATA XREF: _sk_init+141o
.data:000007D5                 align 4
.data:000007D8 $SG86489        db 'wship6.dll',0       ; DATA XREF: _sk_init:loc_16CFo
.data:000007E3                 align 4
.data:000007E4 ; CHAR _SG86493[]
.data:000007E4 $SG86493        db 'getaddrinfo',0      ; DATA XREF: _sk_init+19Do
.data:000007F0 ; CHAR _SG86496[]
.data:000007F0 $SG86496        db 'freeaddrinfo',0     ; DATA XREF: _sk_init+1D6o
.data:000007FD                 align 10h
.data:00000800 ; CHAR _SG86499[]
.data:00000800 $SG86499        db 'getnameinfo',0      ; DATA XREF: _sk_init+20Eo
.data:0000080C ; CHAR _SG86502[]
.data:0000080C $SG86502        db 'gai_strerror',0     ; DATA XREF: _sk_init+246o
.data:00000819                 align 4
.data:0000081C ; CHAR _SG86506[]
.data:0000081C $SG86506        db 'WSAAddressToStringA',0 ; DATA XREF: _sk_init+27Fo
.data:00000830 ; CHAR _SG86509[]
.data:00000830 $SG86509        db 'WSAAsyncSelect',0   ; DATA XREF: _sk_init+2B7o
.data:0000083F                 align 10h
.data:00000840 ; CHAR _SG86512[]
.data:00000840 $SG86512        db 'WSAEventSelect',0   ; DATA XREF: _sk_init+2EFo
.data:0000084F                 align 10h
.data:00000850 ; CHAR _SG86515[]
.data:00000850 $SG86515        db 'select',0           ; DATA XREF: _sk_init+328o
.data:00000857                 align 4
.data:00000858 ; CHAR _SG86518[]
.data:00000858 $SG86518        db 'WSAGetLastError',0  ; DATA XREF: _sk_init+360o
.data:00000868 ; CHAR _SG86521[]
.data:00000868 $SG86521        db 'WSAEnumNetworkEvents',0 ; DATA XREF: _sk_init+398o
.data:0000087D                 align 10h
.data:00000880 ; CHAR _SG86524[]
.data:00000880 $SG86524        db 'WSAStartup',0       ; DATA XREF: _sk_init+3D1o
.data:0000088B                 align 4
.data:0000088C ; CHAR _SG86527[]
.data:0000088C $SG86527        db 'WSACleanup',0       ; DATA XREF: _sk_init+409o
.data:00000897                 align 4
.data:00000898 ; CHAR _SG86530[]
.data:00000898 $SG86530        db 'closesocket',0      ; DATA XREF: _sk_init+441o
.data:000008A4 ; CHAR _SG86533[]
.data:000008A4 $SG86533        db 'ntohl',0            ; DATA XREF: _sk_init+47Ao
.data:000008AA                 align 4
.data:000008AC ; CHAR _SG86536[]
.data:000008AC $SG86536        db 'htonl',0            ; DATA XREF: _sk_init+4B2o
.data:000008B2                 align 4
.data:000008B4 ; CHAR _SG86539[]
.data:000008B4 $SG86539        db 'htons',0            ; DATA XREF: _sk_init+4EAo
.data:000008BA                 align 4
.data:000008BC ; CHAR _SG86542[]
.data:000008BC $SG86542        db 'ntohs',0            ; DATA XREF: _sk_init+523o
.data:000008C2                 align 4
.data:000008C4 ; CHAR _SG86545[]
.data:000008C4 $SG86545        db 'gethostname',0      ; DATA XREF: _sk_init+55Bo
.data:000008D0 ; CHAR _SG86548[]
.data:000008D0 $SG86548        db 'gethostbyname',0    ; DATA XREF: _sk_init+593o
.data:000008DE                 align 10h
.data:000008E0 ; CHAR _SG86551[]
.data:000008E0 $SG86551        db 'getservbyname',0    ; DATA XREF: _sk_init+5CCo
.data:000008EE                 align 10h
.data:000008F0 ; CHAR _SG86554[]
.data:000008F0 $SG86554        db 'inet_addr',0        ; DATA XREF: _sk_init+604o
.data:000008FA                 align 4
.data:000008FC ; CHAR _SG86557[]
.data:000008FC $SG86557        db 'inet_ntoa',0        ; DATA XREF: _sk_init+63Co
.data:00000906                 align 4
.data:00000908 ; CHAR _SG86560[]
.data:00000908 $SG86560        db 'connect',0          ; DATA XREF: _sk_init+675o
.data:00000910 ; CHAR _SG86563[]
.data:00000910 $SG86563        db 'bind',0             ; DATA XREF: _sk_init+6ADo
.data:00000915                 align 4
.data:00000918 ; CHAR _SG86566[]
.data:00000918 $SG86566        db 'setsockopt',0       ; DATA XREF: _sk_init+6E5o
.data:00000923                 align 4
.data:00000924 ; CHAR _SG86569[]
.data:00000924 $SG86569        db 'socket',0           ; DATA XREF: _sk_init+71Eo
.data:0000092B                 align 4
.data:0000092C ; CHAR _SG86572[]
.data:0000092C $SG86572        db 'listen',0           ; DATA XREF: _sk_init+756o
.data:00000933                 align 4
.data:00000934 ; CHAR _SG86575[]
.data:00000934 $SG86575        db 'send',0             ; DATA XREF: _sk_init+78Eo
.data:00000939                 align 4
.data:0000093C ; CHAR _SG86578[]
.data:0000093C $SG86578        db 'shutdown',0         ; DATA XREF: _sk_init+7C7o
.data:00000945                 align 4
.data:00000948 ; CHAR _SG86581[]
.data:00000948 $SG86581        db 'ioctlsocket',0      ; DATA XREF: _sk_init+808o
.data:00000954 ; CHAR _SG86584[]
.data:00000954 $SG86584        db 'accept',0           ; DATA XREF: _sk_init+849o
.data:0000095B                 align 4
.data:0000095C ; CHAR _SG86587[]
.data:0000095C $SG86587        db 'recv',0             ; DATA XREF: _sk_init+88Bo
.data:00000961                 align 4
.data:00000964 ; CHAR _SG86590[]
.data:00000964 $SG86590        db 'WSAIoctl',0         ; DATA XREF: _sk_init+8CCo
.data:0000096D                 align 10h
.data:00000970 $SG86592        db 'Unable to initialise WinSock',0
.data:00000970                                         ; DATA XREF: _sk_init+932o
.data:0000098D                 align 10h
.data:00000990 $SG86636        dd 7774654Eh            ; DATA XREF: _winsock_error_string+21r
.data:00000994 dword_994       dd 206B726Fh            ; DATA XREF: _winsock_error_string+29r
.data:00000998 dword_998       dd 6F727265h            ; DATA XREF: _winsock_error_string+32r
.data:0000099C dword_99C       dd 203A72h              ; DATA XREF: _winsock_error_string+3Br
.data:000009A0 $SG86643        db 'Network error: Permission denied',0
.data:000009A0                                         ; DATA XREF: _winsock_error_string:$LN40o
.data:000009C1                 align 4
.data:000009C4 $SG86645        db 'Network error: Address already in use',0
.data:000009C4                                         ; DATA XREF: _winsock_error_string:$LN39o
.data:000009EA                 align 4
.data:000009EC $SG86647        db 'Network error: Cannot assign requested address',0
.data:000009EC                                         ; DATA XREF: _winsock_error_string:$LN38o
.data:00000A1B                 align 4
.data:00000A1C $SG86649        db 'Network error: Address family not supported by protocol family',0
.data:00000A1C                                         ; DATA XREF: _winsock_error_string:$LN37o
.data:00000A5B                 align 4
.data:00000A5C $SG86651        db 'Network error: Operation already in progress',0
.data:00000A5C                                         ; DATA XREF: _winsock_error_string:$LN36o
.data:00000A89                 align 4
.data:00000A8C $SG86653        db 'Network error: Software caused connection abort',0
.data:00000A8C                                         ; DATA XREF: _winsock_error_string:$LN35o
.data:00000ABC $SG86655        db 'Network error: Connection refused',0
.data:00000ABC                                         ; DATA XREF: _winsock_error_string:$LN34o
.data:00000ADE                 align 10h
.data:00000AE0 $SG86657        db 'Network error: Connection reset by peer',0
.data:00000AE0                                         ; DATA XREF: _winsock_error_string:$LN33o
.data:00000B08 $SG86659        db 'Network error: Destination address required',0
.data:00000B08                                         ; DATA XREF: _winsock_error_string:$LN32o
.data:00000B34 $SG86661        db 'Network error: Bad address',0
.data:00000B34                                         ; DATA XREF: _winsock_error_string:$LN31o
.data:00000B4F                 align 10h
.data:00000B50 $SG86663        db 'Network error: Host is down',0
.data:00000B50                                         ; DATA XREF: _winsock_error_string:$LN30o
.data:00000B6C $SG86665        db 'Network error: No route to host',0
.data:00000B6C                                         ; DATA XREF: _winsock_error_string:$LN29o
.data:00000B8C $SG86667        db 'Network error: Operation now in progress',0
.data:00000B8C                                         ; DATA XREF: _winsock_error_string:$LN28o
.data:00000BB5                 align 4
.data:00000BB8 $SG86669        db 'Network error: Interrupted function call',0
.data:00000BB8                                         ; DATA XREF: _winsock_error_string:$LN27o
.data:00000BE1                 align 4
.data:00000BE4 $SG86671        db 'Network error: Invalid argument',0
.data:00000BE4                                         ; DATA XREF: _winsock_error_string:$LN26o
.data:00000C04 $SG86673        db 'Network error: Socket is already connected',0
.data:00000C04                                         ; DATA XREF: _winsock_error_string:$LN25o
.data:00000C2F                 align 10h
.data:00000C30 $SG86675        db 'Network error: Too many open files',0
.data:00000C30                                         ; DATA XREF: _winsock_error_string:$LN24o
.data:00000C53                 align 4
.data:00000C54 $SG86677        db 'Network error: Message too long',0
.data:00000C54                                         ; DATA XREF: _winsock_error_string:$LN23o
.data:00000C74 $SG86679        db 'Network error: Network is down',0
.data:00000C74                                         ; DATA XREF: _winsock_error_string:$LN22o
.data:00000C93                 align 4
.data:00000C94 $SG86681        db 'Network error: Network dropped connection on reset',0
.data:00000C94                                         ; DATA XREF: _winsock_error_string:$LN21o
.data:00000CC7                 align 4
.data:00000CC8 $SG86683        db 'Network error: Network is unreachable',0
.data:00000CC8                                         ; DATA XREF: _winsock_error_string:$LN20o
.data:00000CEE                 align 10h
.data:00000CF0 $SG86685        db 'Network error: No buffer space available',0
.data:00000CF0                                         ; DATA XREF: _winsock_error_string:$LN19o
.data:00000D19                 align 4
.data:00000D1C $SG86687        db 'Network error: Bad protocol option',0
.data:00000D1C                                         ; DATA XREF: _winsock_error_string:$LN18o
.data:00000D3F                 align 10h
.data:00000D40 $SG86689        db 'Network error: Socket is not connected',0
.data:00000D40                                         ; DATA XREF: _winsock_error_string:$LN17o
.data:00000D67                 align 4
.data:00000D68 $SG86691        db 'Network error: Socket operation on non-socket',0
.data:00000D68                                         ; DATA XREF: _winsock_error_string:$LN16o
.data:00000D96                 align 4
.data:00000D98 $SG86693        db 'Network error: Operation not supported',0
.data:00000D98                                         ; DATA XREF: _winsock_error_string:$LN15o
.data:00000DBF                 align 10h
.data:00000DC0 $SG86695        db 'Network error: Protocol family not supported',0
.data:00000DC0                                         ; DATA XREF: _winsock_error_string:$LN14o
.data:00000DED                 align 10h
.data:00000DF0 $SG86697        db 'Network error: Too many processes',0
.data:00000DF0                                         ; DATA XREF: _winsock_error_string:$LN13o
.data:00000E12                 align 4
.data:00000E14 $SG86699        db 'Network error: Protocol not supported',0
.data:00000E14                                         ; DATA XREF: _winsock_error_string:$LN12o
.data:00000E3A                 align 4
.data:00000E3C $SG86701        db 'Network error: Protocol wrong type for socket',0
.data:00000E3C                                         ; DATA XREF: _winsock_error_string:$LN11o
.data:00000E6A                 align 4
.data:00000E6C $SG86703        db 'Network error: Cannot send after socket shutdown',0
.data:00000E6C                                         ; DATA XREF: _winsock_error_string:$LN10o
.data:00000E9D                 align 10h
.data:00000EA0 $SG86705        db 'Network error: Socket type not supported',0
.data:00000EA0                                         ; DATA XREF: _winsock_error_string:$LN9o
.data:00000EC9                 align 4
.data:00000ECC $SG86707        db 'Network error: Connection timed out',0
.data:00000ECC                                         ; DATA XREF: _winsock_error_string:$LN8o
.data:00000EF0 $SG86709        db 'Network error: Resource temporarily unavailable',0
.data:00000EF0                                         ; DATA XREF: _winsock_error_string:$LN7o
.data:00000F20 $SG86711        db 'Network error: Graceful shutdown in progress',0
.data:00000F20                                         ; DATA XREF: _winsock_error_string:$LN6o
.data:00000F4D                 align 10h
.data:00000F50 ; char _SG86725[]
.data:00000F50 $SG86725        db 'Windows error code %d (and FormatMessage returned %d)',0
.data:00000F50                                         ; DATA XREF: _winsock_error_string+2AEo
.data:00000F86                 align 4
.data:00000F88 $SG86762        db 'Network is down',0  ; DATA XREF: _sk_namelookup+21Ao
.data:00000F98 $SG86763        db 'Host does not exist',0 ; DATA XREF: _sk_namelookup+24Bo
.data:00000FAC $SG86764        db 'Host not found',0   ; DATA XREF: _sk_namelookup+27Co
.data:00000FBB                 align 4
.data:00000FBC $SG86765        db 'gethostbyname: unknown error',0
.data:00000FBC                                         ; DATA XREF: _sk_namelookup:loc_280Ao
.data:00000FD9                 align 4
.data:00000FDC ; char _SG86835[]
.data:00000FDC $SG86835        db '<unknown>',0        ; DATA XREF: _sk_getaddr+A5o
.data:00000FE6                 align 4
.data:00000FE8 ; wchar_t _SG86840
.data:00000FE8 $SG86840:                               ; DATA XREF: _sk_getaddr+114o
.data:00000FE8                 unicode 0, <..\..\winnet.c>,0
.data:00001006                 align 4
.data:00001008 ; wchar_t _SG86841
.data:00001008 $SG86841:                               ; DATA XREF: _sk_getaddr+119o
.data:00001008                 unicode 0, <addr->
.data:00001008                 dw 3Eh
.data:00001008                 unicode 0, <addresses && step.curraddr >
.data:00001008                 dw 3Ch
.data:00001008                 unicode 0, < addr->
.data:00001008                 dw 3Eh
.data:00001008                 unicode 0, <naddresses>,0
.data:00001070 ; char _SG86849[]
.data:00001070 $SG86849        db 'localhost',0        ; DATA XREF: _sk_hostname_is_local+Bo
.data:0000107A                 align 4
.data:0000107C ; char _SG86850[]
.data:0000107C $SG86850        db '::1',0              ; DATA XREF: _sk_hostname_is_local+20o
.data:00001080 ; char _SG86851[]
.data:00001080 $SG86851        db '127.',0             ; DATA XREF: _sk_hostname_is_local+37o
.data:00001085                 align 4
.data:00001088 $SG86871        db 'Unable to get list of local IP addresses',0
.data:00001088                                         ; DATA XREF: _ipv4_is_local_addr:loc_3132o
.data:000010B1                 align 4
.data:000010B4 ; wchar_t _SG86894
.data:000010B4 $SG86894:                               ; DATA XREF: _sk_address_is_local+BDo
.data:000010B4                 unicode 0, <..\..\winnet.c>,0
.data:000010D2                 align 4
.data:000010D4 ; wchar_t _SG86899
.data:000010D4 $SG86899:                               ; DATA XREF: _sk_address_is_local+10Eo
.data:000010D4                 unicode 0, <family == AF_UNSPEC>,0
.data:000010FC ; wchar_t _SG86929
.data:000010FC $SG86929:                               ; DATA XREF: _sk_addrcopy+CEo
.data:000010FC                 unicode 0, <FALSE>,0
.data:00001108 ; wchar_t _SG86895
.data:00001108 $SG86895:                               ; DATA XREF: _sk_address_is_local+C2o
.data:00001108                 unicode 0, <addr->
.data:00001108                 dw 3Eh
.data:00001108                 unicode 0, <addresses && step.curraddr >
.data:00001108                 dw 3Ch
.data:00001108                 unicode 0, < addr->
.data:00001108                 dw 3Eh
.data:00001108                 unicode 0, <naddresses>,0
.data:00001170 ; wchar_t _SG86898
.data:00001170 $SG86898:                               ; DATA XREF: _sk_address_is_local+109o
.data:00001170                 unicode 0, <..\..\winnet.c>,0
.data:0000118E                 align 10h
.data:00001190 ; wchar_t _SG86916
.data:00001190 $SG86916:                               ; DATA XREF: _sk_addrcopy+68o
.data:00001190                 unicode 0, <..\..\winnet.c>,0
.data:000011AE                 align 10h
.data:000011B0 ; wchar_t _SG86917
.data:000011B0 $SG86917:                               ; DATA XREF: _sk_addrcopy+6Do
.data:000011B0                 unicode 0, <family != AF_UNSPEC>,0
.data:000011D8 ; wchar_t _SG86928
.data:000011D8 $SG86928:                               ; DATA XREF: _sk_addrcopy+C9o
.data:000011D8                 unicode 0, <..\..\winnet.c>,0
.data:000011F6                 align 4
.data:000011F8 ; wchar_t _SG86934
.data:000011F8 $SG86934:                               ; DATA XREF: _sk_addrcopy+FCo
.data:000011F8                 unicode 0, <..\..\winnet.c>,0
.data:00001216                 align 4
.data:00001218 ; wchar_t _SG86935
.data:00001218 $SG86935:                               ; DATA XREF: _sk_addrcopy+101o
.data:00001218                 unicode 0, <addr->
.data:00001218                 dw 3Eh
.data:00001218                 unicode 0, <addresses && step.curraddr >
.data:00001218                 dw 3Ch
.data:00001218                 unicode 0, < addr->
.data:00001218                 dw 3Eh
.data:00001218                 unicode 0, <naddresses>,0
.data:00001280 ; wchar_t _SG87070
.data:00001280 $SG87070:                               ; DATA XREF: _try_connect+3E4o
.data:00001280                 unicode 0, <..\..\winnet.c>,0
.data:0000129E                 align 10h
.data:000012A0 ; wchar_t _SG87071
.data:000012A0 $SG87071:                               ; DATA XREF: _try_connect+3E9o
.data:000012A0                 unicode 0, <sock->
.data:000012A0                 dw 3Eh
.data:000012A0                 unicode 0, <addr->
.data:000012A0                 dw 3Eh
.data:000012A0                 unicode 0, <addresses && sock->
.data:000012A0                 dw 3Eh
.data:000012A0                 unicode 0, <step.curraddr >
.data:000012A0                 dw 3Ch
.data:000012A0                 unicode 0, < sock->
.data:000012A0                 dw 3Eh
.data:000012A0                 unicode 0, <addr->
.data:000012A0                 dw 3Eh
.data:000012A0                 unicode 0, <naddresses>,0
.data:0000132C $SG87225        db '%s',0               ; DATA XREF: _try_send+161o
.data:0000132F                 align 10h
.data:00001330 ; wchar_t _SG87242
.data:00001330 $SG87242:                               ; DATA XREF: _sk_tcp_write+1Fo
.data:00001330                 unicode 0, <..\..\winnet.c>,0
.data:0000134E                 align 10h
.data:00001350 ; wchar_t _SG87243
.data:00001350 $SG87243:                               ; DATA XREF: _sk_tcp_write+24o
.data:00001350                 unicode 0, <s->
.data:00001350                 dw 3Eh
.data:00001350                 unicode 0, <outgoingeof == EOF_NO>,0
.data:00001382                 align 4
.data:00001384 ; wchar_t _SG87255
.data:00001384 $SG87255:                               ; DATA XREF: _sk_tcp_write_oob+1Fo
.data:00001384                 unicode 0, <..\..\winnet.c>,0
.data:000013A2                 align 4
.data:000013A4 ; wchar_t _SG87256
.data:000013A4 $SG87256:                               ; DATA XREF: _sk_tcp_write_oob+24o
.data:000013A4                 unicode 0, <s->
.data:000013A4                 dw 3Eh
.data:000013A4                 unicode 0, <outgoingeof == EOF_NO>,0
.data:000013D6                 align 4
.data:000013D8 ; wchar_t _SG87258
.data:000013D8 $SG87258:                               ; DATA XREF: _sk_tcp_write_oob+4Bo
.data:000013D8                 unicode 0, <..\..\winnet.c>,0
.data:000013F6                 align 4
.data:000013F8 ; wchar_t _SG87259
.data:000013F8 $SG87259:                               ; DATA XREF: _sk_tcp_write_oob+50o
.data:000013F8                 unicode 0, <len >
.data:000013F8                 dw 3Ch
.data:000013F8                 unicode 0, <= sizeof(s->
.data:000013F8                 dw 3Eh
.data:000013F8                 unicode 0, <oobdata)>,0
.data:0000142C ; wchar_t _SG87267
.data:0000142C $SG87267:                               ; DATA XREF: _sk_tcp_write_eof+1Fo
.data:0000142C                 unicode 0, <..\..\winnet.c>,0
.data:0000144A                 align 4
.data:0000144C ; wchar_t _SG87268
.data:0000144C $SG87268:                               ; DATA XREF: _sk_tcp_write_eof+24o
.data:0000144C                 unicode 0, <s->
.data:0000144C                 dw 3Eh
.data:0000144C                 unicode 0, <outgoingeof == EOF_NO>,0
.data:0000147E                 align 10h
.data:00001480 $SG87318        db 'Internal networking trouble',0
.data:00001480                                         ; DATA XREF: _select_result+3D6o
.data:0000149C $SG87320        db '%s',0               ; DATA XREF: _select_result+424o
.data:0000149F                 align 10h
.data:000014A0 $SG87431        db 'unix sockets not supported on this platform',0
.data:000014A0                                         ; DATA XREF: _platform_get_x11_unix_address+33o
.data:000014A0 _data           ends
.data:000014A0
.text:000014CC ; ===========================================================================
.text:000014CC
.text:000014CC ; Segment type: Pure code
.text:000014CC ; Segment permissions: Read/Execute
.text:000014CC _text           segment para public 'CODE' use32
.text:000014CC                 assume cs:_text
.text:000014CC                 ;org 14CCh
.text:000014CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014CC
.text:000014CC ; =============== S U B R O U T I N E =======================================
.text:000014CC
.text:000014CC ; Attributes: bp-based frame
.text:000014CC
.text:000014CC                 public _sk_startup
.text:000014CC _sk_startup     proc near               ; CODE XREF: _sk_init+906p
.text:000014CC                                         ; _sk_init+916p ...
.text:000014CC
.text:000014CC var_4           = dword ptr -4
.text:000014CC arg_0           = dword ptr  8
.text:000014CC arg_4           = dword ptr  0Ch
.text:000014CC
.text:000014CC                 push    ebp
.text:000014CD                 mov     ebp, esp
.text:000014CF                 push    ecx
.text:000014D0                 push    esi
.text:000014D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014D8                 mov     eax, [ebp+arg_0]
.text:000014DB                 and     eax, 0FFh
.text:000014E0                 movzx   ecx, al
.text:000014E3                 mov     edx, [ebp+arg_4]
.text:000014E6                 and     edx, 0FFh
.text:000014EC                 movzx   eax, dl
.text:000014EF                 shl     eax, 8
.text:000014F2                 or      ecx, eax
.text:000014F4                 mov     word ptr [ebp+var_4], cx
.text:000014F8                 mov     esi, esp
.text:000014FA                 push    offset _wsadata
.text:000014FF                 movzx   ecx, word ptr [ebp+var_4]
.text:00001503                 push    ecx
.text:00001504                 call    ds:_p_WSAStartup
.text:0000150A                 cmp     esi, esp
.text:0000150C                 call    __RTC_CheckEsp
.text:00001511                 test    eax, eax
.text:00001513                 jz      short loc_1519
.text:00001515                 xor     eax, eax
.text:00001517                 jmp     short loc_1543
.text:00001519 ; ---------------------------------------------------------------------------
.text:00001519
.text:00001519 loc_1519:                               ; CODE XREF: _sk_startup+47j
.text:00001519                 movzx   edx, ds:_wsadata
.text:00001520                 and     edx, 0FFh
.text:00001526                 movzx   eax, dl
.text:00001529                 movzx   ecx, word ptr [ebp+var_4]
.text:0000152D                 and     ecx, 0FFh
.text:00001533                 movzx   edx, cl
.text:00001536                 cmp     eax, edx
.text:00001538                 jz      short loc_153E
.text:0000153A                 xor     eax, eax
.text:0000153C                 jmp     short loc_1543
.text:0000153E ; ---------------------------------------------------------------------------
.text:0000153E
.text:0000153E loc_153E:                               ; CODE XREF: _sk_startup+6Cj
.text:0000153E                 mov     eax, 1
.text:00001543
.text:00001543 loc_1543:                               ; CODE XREF: _sk_startup+4Bj
.text:00001543                                         ; _sk_startup+70j
.text:00001543                 pop     esi
.text:00001544                 add     esp, 4
.text:00001547                 cmp     ebp, esp
.text:00001549                 call    __RTC_CheckEsp
.text:0000154E                 mov     esp, ebp
.text:00001550                 pop     ebp
.text:00001551                 retn
.text:00001551 _sk_startup     endp
.text:00001551
.text:00001551 ; ---------------------------------------------------------------------------
.text:00001552                 db 0Ah dup(0CCh)
.text:0000155C
.text:0000155C ; =============== S U B R O U T I N E =======================================
.text:0000155C
.text:0000155C ; Attributes: bp-based frame
.text:0000155C
.text:0000155C                 public _sk_init
.text:0000155C _sk_init        proc near
.text:0000155C
.text:0000155C var_94          = dword ptr -94h
.text:0000155C var_90          = dword ptr -90h
.text:0000155C var_8C          = dword ptr -8Ch
.text:0000155C var_88          = dword ptr -88h
.text:0000155C var_84          = dword ptr -84h
.text:0000155C var_80          = dword ptr -80h
.text:0000155C var_7C          = dword ptr -7Ch
.text:0000155C var_78          = dword ptr -78h
.text:0000155C var_74          = dword ptr -74h
.text:0000155C var_70          = dword ptr -70h
.text:0000155C var_6C          = dword ptr -6Ch
.text:0000155C var_68          = dword ptr -68h
.text:0000155C var_64          = dword ptr -64h
.text:0000155C var_60          = dword ptr -60h
.text:0000155C var_5C          = dword ptr -5Ch
.text:0000155C var_58          = dword ptr -58h
.text:0000155C var_54          = dword ptr -54h
.text:0000155C var_50          = dword ptr -50h
.text:0000155C var_4C          = dword ptr -4Ch
.text:0000155C var_48          = dword ptr -48h
.text:0000155C var_44          = dword ptr -44h
.text:0000155C var_40          = dword ptr -40h
.text:0000155C var_3C          = dword ptr -3Ch
.text:0000155C var_38          = dword ptr -38h
.text:0000155C var_34          = dword ptr -34h
.text:0000155C var_30          = dword ptr -30h
.text:0000155C var_2C          = dword ptr -2Ch
.text:0000155C var_28          = dword ptr -28h
.text:0000155C var_24          = dword ptr -24h
.text:0000155C var_20          = dword ptr -20h
.text:0000155C var_1C          = dword ptr -1Ch
.text:0000155C var_18          = dword ptr -18h
.text:0000155C var_14          = dword ptr -14h
.text:0000155C var_10          = dword ptr -10h
.text:0000155C var_C           = dword ptr -0Ch
.text:0000155C var_8           = dword ptr -8
.text:0000155C var_4           = dword ptr -4
.text:0000155C
.text:0000155C                 push    ebp
.text:0000155D                 mov     ebp, esp
.text:0000155F                 sub     esp, 94h
.text:00001565                 push    esi
.text:00001566                 push    edi
.text:00001567                 lea     edi, [ebp+var_94]
.text:0000156D                 mov     ecx, 25h ; '%'
.text:00001572                 mov     eax, 0CCCCCCCCh
.text:00001577                 rep stosd
.text:00001579                 push    offset $SG86468 ; "ws2_32.dll"
.text:0000157E                 call    _load_system32_dll
.text:00001583                 add     esp, 4
.text:00001586                 mov     ds:_winsock_module, eax
.text:0000158B                 mov     eax, ds:_winsock_module
.text:00001590                 mov     ds:_winsock2_module, eax
.text:00001595                 cmp     ds:_winsock_module, 0
.text:0000159C                 jnz     short loc_15B0
.text:0000159E                 push    offset $SG86470 ; "wsock32.dll"
.text:000015A3                 call    _load_system32_dll
.text:000015A8                 add     esp, 4
.text:000015AB                 mov     ds:_winsock_module, eax
.text:000015B0
.text:000015B0 loc_15B0:                               ; CODE XREF: _sk_init+40j
.text:000015B0                 cmp     ds:_winsock_module, 0
.text:000015B7                 jnz     short loc_15C6
.text:000015B9                 push    offset $SG86472 ; "Unable to load any WinSock library"
.text:000015BE                 call    _fatalbox
.text:000015C3                 add     esp, 4
.text:000015C6
.text:000015C6 loc_15C6:                               ; CODE XREF: _sk_init+5Bj
.text:000015C6                 mov     esi, esp
.text:000015C8                 push    offset $SG86475 ; "getaddrinfo"
.text:000015CD                 mov     ecx, ds:_winsock_module
.text:000015D3                 push    ecx             ; hModule
.text:000015D4                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000015DA                 cmp     esi, esp
.text:000015DC                 call    __RTC_CheckEsp
.text:000015E1                 test    eax, eax
.text:000015E3                 jz      loc_16CF
.text:000015E9                 cmp     ds:_winsock_module, 0
.text:000015F0                 jz      short loc_1612
.text:000015F2                 mov     esi, esp
.text:000015F4                 push    offset $SG86478 ; "getaddrinfo"
.text:000015F9                 mov     edx, ds:_winsock_module
.text:000015FF                 push    edx             ; hModule
.text:00001600                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001606                 cmp     esi, esp
.text:00001608                 call    __RTC_CheckEsp
.text:0000160D                 mov     [ebp+var_4], eax
.text:00001610                 jmp     short loc_1619
.text:00001612 ; ---------------------------------------------------------------------------
.text:00001612
.text:00001612 loc_1612:                               ; CODE XREF: _sk_init+94j
.text:00001612                 mov     [ebp+var_4], 0
.text:00001619
.text:00001619 loc_1619:                               ; CODE XREF: _sk_init+B4j
.text:00001619                 mov     eax, [ebp+var_4]
.text:0000161C                 mov     ds:_p_getaddrinfo, eax
.text:00001621                 cmp     ds:_winsock_module, 0
.text:00001628                 jz      short loc_164A
.text:0000162A                 mov     esi, esp
.text:0000162C                 push    offset $SG86481 ; "freeaddrinfo"
.text:00001631                 mov     ecx, ds:_winsock_module
.text:00001637                 push    ecx             ; hModule
.text:00001638                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000163E                 cmp     esi, esp
.text:00001640                 call    __RTC_CheckEsp
.text:00001645                 mov     [ebp+var_8], eax
.text:00001648                 jmp     short loc_1651
.text:0000164A ; ---------------------------------------------------------------------------
.text:0000164A
.text:0000164A loc_164A:                               ; CODE XREF: _sk_init+CCj
.text:0000164A                 mov     [ebp+var_8], 0
.text:00001651
.text:00001651 loc_1651:                               ; CODE XREF: _sk_init+ECj
.text:00001651                 mov     edx, [ebp+var_8]
.text:00001654                 mov     ds:_p_freeaddrinfo, edx
.text:0000165A                 cmp     ds:_winsock_module, 0
.text:00001661                 jz      short loc_1682
.text:00001663                 mov     esi, esp
.text:00001665                 push    offset $SG86484 ; "getnameinfo"
.text:0000166A                 mov     eax, ds:_winsock_module
.text:0000166F                 push    eax             ; hModule
.text:00001670                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001676                 cmp     esi, esp
.text:00001678                 call    __RTC_CheckEsp
.text:0000167D                 mov     [ebp+var_C], eax
.text:00001680                 jmp     short loc_1689
.text:00001682 ; ---------------------------------------------------------------------------
.text:00001682
.text:00001682 loc_1682:                               ; CODE XREF: _sk_init+105j
.text:00001682                 mov     [ebp+var_C], 0
.text:00001689
.text:00001689 loc_1689:                               ; CODE XREF: _sk_init+124j
.text:00001689                 mov     ecx, [ebp+var_C]
.text:0000168C                 mov     ds:_p_getnameinfo, ecx
.text:00001692                 cmp     ds:_winsock_module, 0
.text:00001699                 jz      short loc_16BB
.text:0000169B                 mov     esi, esp
.text:0000169D                 push    offset $SG86487 ; "gai_strerror"
.text:000016A2                 mov     edx, ds:_winsock_module
.text:000016A8                 push    edx             ; hModule
.text:000016A9                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000016AF                 cmp     esi, esp
.text:000016B1                 call    __RTC_CheckEsp
.text:000016B6                 mov     [ebp+var_10], eax
.text:000016B9                 jmp     short loc_16C2
.text:000016BB ; ---------------------------------------------------------------------------
.text:000016BB
.text:000016BB loc_16BB:                               ; CODE XREF: _sk_init+13Dj
.text:000016BB                 mov     [ebp+var_10], 0
.text:000016C2
.text:000016C2 loc_16C2:                               ; CODE XREF: _sk_init+15Dj
.text:000016C2                 mov     eax, [ebp+var_10]
.text:000016C5                 mov     ds:_p_gai_strerror, eax
.text:000016CA                 jmp     loc_17D0
.text:000016CF ; ---------------------------------------------------------------------------
.text:000016CF
.text:000016CF loc_16CF:                               ; CODE XREF: _sk_init+87j
.text:000016CF                 push    offset $SG86489 ; "wship6.dll"
.text:000016D4                 call    _load_system32_dll
.text:000016D9                 add     esp, 4
.text:000016DC                 mov     ds:_wship6_module, eax
.text:000016E1                 cmp     ds:_wship6_module, 0
.text:000016E8                 jz      loc_17D0
.text:000016EE                 cmp     ds:_wship6_module, 0
.text:000016F5                 jz      short loc_1717
.text:000016F7                 mov     esi, esp
.text:000016F9                 push    offset $SG86493 ; "getaddrinfo"
.text:000016FE                 mov     ecx, ds:_wship6_module
.text:00001704                 push    ecx             ; hModule
.text:00001705                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000170B                 cmp     esi, esp
.text:0000170D                 call    __RTC_CheckEsp
.text:00001712                 mov     [ebp+var_14], eax
.text:00001715                 jmp     short loc_171E
.text:00001717 ; ---------------------------------------------------------------------------
.text:00001717
.text:00001717 loc_1717:                               ; CODE XREF: _sk_init+199j
.text:00001717                 mov     [ebp+var_14], 0
.text:0000171E
.text:0000171E loc_171E:                               ; CODE XREF: _sk_init+1B9j
.text:0000171E                 mov     edx, [ebp+var_14]
.text:00001721                 mov     ds:_p_getaddrinfo, edx
.text:00001727                 cmp     ds:_wship6_module, 0
.text:0000172E                 jz      short loc_174F
.text:00001730                 mov     esi, esp
.text:00001732                 push    offset $SG86496 ; "freeaddrinfo"
.text:00001737                 mov     eax, ds:_wship6_module
.text:0000173C                 push    eax             ; hModule
.text:0000173D                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001743                 cmp     esi, esp
.text:00001745                 call    __RTC_CheckEsp
.text:0000174A                 mov     [ebp+var_18], eax
.text:0000174D                 jmp     short loc_1756
.text:0000174F ; ---------------------------------------------------------------------------
.text:0000174F
.text:0000174F loc_174F:                               ; CODE XREF: _sk_init+1D2j
.text:0000174F                 mov     [ebp+var_18], 0
.text:00001756
.text:00001756 loc_1756:                               ; CODE XREF: _sk_init+1F1j
.text:00001756                 mov     ecx, [ebp+var_18]
.text:00001759                 mov     ds:_p_freeaddrinfo, ecx
.text:0000175F                 cmp     ds:_wship6_module, 0
.text:00001766                 jz      short loc_1788
.text:00001768                 mov     esi, esp
.text:0000176A                 push    offset $SG86499 ; "getnameinfo"
.text:0000176F                 mov     edx, ds:_wship6_module
.text:00001775                 push    edx             ; hModule
.text:00001776                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000177C                 cmp     esi, esp
.text:0000177E                 call    __RTC_CheckEsp
.text:00001783                 mov     [ebp+var_1C], eax
.text:00001786                 jmp     short loc_178F
.text:00001788 ; ---------------------------------------------------------------------------
.text:00001788
.text:00001788 loc_1788:                               ; CODE XREF: _sk_init+20Aj
.text:00001788                 mov     [ebp+var_1C], 0
.text:0000178F
.text:0000178F loc_178F:                               ; CODE XREF: _sk_init+22Aj
.text:0000178F                 mov     eax, [ebp+var_1C]
.text:00001792                 mov     ds:_p_getnameinfo, eax
.text:00001797                 cmp     ds:_wship6_module, 0
.text:0000179E                 jz      short loc_17C0
.text:000017A0                 mov     esi, esp
.text:000017A2                 push    offset $SG86502 ; "gai_strerror"
.text:000017A7                 mov     ecx, ds:_wship6_module
.text:000017AD                 push    ecx             ; hModule
.text:000017AE                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000017B4                 cmp     esi, esp
.text:000017B6                 call    __RTC_CheckEsp
.text:000017BB                 mov     [ebp+var_20], eax
.text:000017BE                 jmp     short loc_17C7
.text:000017C0 ; ---------------------------------------------------------------------------
.text:000017C0
.text:000017C0 loc_17C0:                               ; CODE XREF: _sk_init+242j
.text:000017C0                 mov     [ebp+var_20], 0
.text:000017C7
.text:000017C7 loc_17C7:                               ; CODE XREF: _sk_init+262j
.text:000017C7                 mov     edx, [ebp+var_20]
.text:000017CA                 mov     ds:_p_gai_strerror, edx
.text:000017D0
.text:000017D0 loc_17D0:                               ; CODE XREF: _sk_init+16Ej
.text:000017D0                                         ; _sk_init+18Cj
.text:000017D0                 cmp     ds:_winsock2_module, 0
.text:000017D7                 jz      short loc_17F8
.text:000017D9                 mov     esi, esp
.text:000017DB                 push    offset $SG86506 ; "WSAAddressToStringA"
.text:000017E0                 mov     eax, ds:_winsock2_module
.text:000017E5                 push    eax             ; hModule
.text:000017E6                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000017EC                 cmp     esi, esp
.text:000017EE                 call    __RTC_CheckEsp
.text:000017F3                 mov     [ebp+var_24], eax
.text:000017F6                 jmp     short loc_17FF
.text:000017F8 ; ---------------------------------------------------------------------------
.text:000017F8
.text:000017F8 loc_17F8:                               ; CODE XREF: _sk_init+27Bj
.text:000017F8                 mov     [ebp+var_24], 0
.text:000017FF
.text:000017FF loc_17FF:                               ; CODE XREF: _sk_init+29Aj
.text:000017FF                 mov     ecx, [ebp+var_24]
.text:00001802                 mov     ds:_p_WSAAddressToStringA, ecx
.text:00001808                 cmp     ds:_winsock_module, 0
.text:0000180F                 jz      short loc_1831
.text:00001811                 mov     esi, esp
.text:00001813                 push    offset $SG86509 ; "WSAAsyncSelect"
.text:00001818                 mov     edx, ds:_winsock_module
.text:0000181E                 push    edx             ; hModule
.text:0000181F                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001825                 cmp     esi, esp
.text:00001827                 call    __RTC_CheckEsp
.text:0000182C                 mov     [ebp+var_28], eax
.text:0000182F                 jmp     short loc_1838
.text:00001831 ; ---------------------------------------------------------------------------
.text:00001831
.text:00001831 loc_1831:                               ; CODE XREF: _sk_init+2B3j
.text:00001831                 mov     [ebp+var_28], 0
.text:00001838
.text:00001838 loc_1838:                               ; CODE XREF: _sk_init+2D3j
.text:00001838                 mov     eax, [ebp+var_28]
.text:0000183B                 mov     dword ptr ds:_p_WSAAsyncSelect, eax
.text:00001840                 cmp     ds:_winsock_module, 0
.text:00001847                 jz      short loc_1869
.text:00001849                 mov     esi, esp
.text:0000184B                 push    offset $SG86512 ; "WSAEventSelect"
.text:00001850                 mov     ecx, ds:_winsock_module
.text:00001856                 push    ecx             ; hModule
.text:00001857                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000185D                 cmp     esi, esp
.text:0000185F                 call    __RTC_CheckEsp
.text:00001864                 mov     [ebp+var_2C], eax
.text:00001867                 jmp     short loc_1870
.text:00001869 ; ---------------------------------------------------------------------------
.text:00001869
.text:00001869 loc_1869:                               ; CODE XREF: _sk_init+2EBj
.text:00001869                 mov     [ebp+var_2C], 0
.text:00001870
.text:00001870 loc_1870:                               ; CODE XREF: _sk_init+30Bj
.text:00001870                 mov     edx, [ebp+var_2C]
.text:00001873                 mov     dword ptr ds:_p_WSAEventSelect, edx
.text:00001879                 cmp     ds:_winsock_module, 0
.text:00001880                 jz      short loc_18A1
.text:00001882                 mov     esi, esp
.text:00001884                 push    offset $SG86515 ; "select"
.text:00001889                 mov     eax, ds:_winsock_module
.text:0000188E                 push    eax             ; hModule
.text:0000188F                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001895                 cmp     esi, esp
.text:00001897                 call    __RTC_CheckEsp
.text:0000189C                 mov     [ebp+var_30], eax
.text:0000189F                 jmp     short loc_18A8
.text:000018A1 ; ---------------------------------------------------------------------------
.text:000018A1
.text:000018A1 loc_18A1:                               ; CODE XREF: _sk_init+324j
.text:000018A1                 mov     [ebp+var_30], 0
.text:000018A8
.text:000018A8 loc_18A8:                               ; CODE XREF: _sk_init+343j
.text:000018A8                 mov     ecx, [ebp+var_30]
.text:000018AB                 mov     dword ptr ds:_p_select, ecx
.text:000018B1                 cmp     ds:_winsock_module, 0
.text:000018B8                 jz      short loc_18DA
.text:000018BA                 mov     esi, esp
.text:000018BC                 push    offset $SG86518 ; "WSAGetLastError"
.text:000018C1                 mov     edx, ds:_winsock_module
.text:000018C7                 push    edx             ; hModule
.text:000018C8                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000018CE                 cmp     esi, esp
.text:000018D0                 call    __RTC_CheckEsp
.text:000018D5                 mov     [ebp+var_34], eax
.text:000018D8                 jmp     short loc_18E1
.text:000018DA ; ---------------------------------------------------------------------------
.text:000018DA
.text:000018DA loc_18DA:                               ; CODE XREF: _sk_init+35Cj
.text:000018DA                 mov     [ebp+var_34], 0
.text:000018E1
.text:000018E1 loc_18E1:                               ; CODE XREF: _sk_init+37Cj
.text:000018E1                 mov     eax, [ebp+var_34]
.text:000018E4                 mov     dword ptr ds:_p_WSAGetLastError, eax
.text:000018E9                 cmp     ds:_winsock_module, 0
.text:000018F0                 jz      short loc_1912
.text:000018F2                 mov     esi, esp
.text:000018F4                 push    offset $SG86521 ; "WSAEnumNetworkEvents"
.text:000018F9                 mov     ecx, ds:_winsock_module
.text:000018FF                 push    ecx             ; hModule
.text:00001900                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001906                 cmp     esi, esp
.text:00001908                 call    __RTC_CheckEsp
.text:0000190D                 mov     [ebp+var_38], eax
.text:00001910                 jmp     short loc_1919
.text:00001912 ; ---------------------------------------------------------------------------
.text:00001912
.text:00001912 loc_1912:                               ; CODE XREF: _sk_init+394j
.text:00001912                 mov     [ebp+var_38], 0
.text:00001919
.text:00001919 loc_1919:                               ; CODE XREF: _sk_init+3B4j
.text:00001919                 mov     edx, [ebp+var_38]
.text:0000191C                 mov     dword ptr ds:_p_WSAEnumNetworkEvents, edx
.text:00001922                 cmp     ds:_winsock_module, 0
.text:00001929                 jz      short loc_194A
.text:0000192B                 mov     esi, esp
.text:0000192D                 push    offset $SG86524 ; "WSAStartup"
.text:00001932                 mov     eax, ds:_winsock_module
.text:00001937                 push    eax             ; hModule
.text:00001938                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000193E                 cmp     esi, esp
.text:00001940                 call    __RTC_CheckEsp
.text:00001945                 mov     [ebp+var_3C], eax
.text:00001948                 jmp     short loc_1951
.text:0000194A ; ---------------------------------------------------------------------------
.text:0000194A
.text:0000194A loc_194A:                               ; CODE XREF: _sk_init+3CDj
.text:0000194A                 mov     [ebp+var_3C], 0
.text:00001951
.text:00001951 loc_1951:                               ; CODE XREF: _sk_init+3ECj
.text:00001951                 mov     ecx, [ebp+var_3C]
.text:00001954                 mov     ds:_p_WSAStartup, ecx
.text:0000195A                 cmp     ds:_winsock_module, 0
.text:00001961                 jz      short loc_1983
.text:00001963                 mov     esi, esp
.text:00001965                 push    offset $SG86527 ; "WSACleanup"
.text:0000196A                 mov     edx, ds:_winsock_module
.text:00001970                 push    edx             ; hModule
.text:00001971                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001977                 cmp     esi, esp
.text:00001979                 call    __RTC_CheckEsp
.text:0000197E                 mov     [ebp+var_40], eax
.text:00001981                 jmp     short loc_198A
.text:00001983 ; ---------------------------------------------------------------------------
.text:00001983
.text:00001983 loc_1983:                               ; CODE XREF: _sk_init+405j
.text:00001983                 mov     [ebp+var_40], 0
.text:0000198A
.text:0000198A loc_198A:                               ; CODE XREF: _sk_init+425j
.text:0000198A                 mov     eax, [ebp+var_40]
.text:0000198D                 mov     ds:_p_WSACleanup, eax
.text:00001992                 cmp     ds:_winsock_module, 0
.text:00001999                 jz      short loc_19BB
.text:0000199B                 mov     esi, esp
.text:0000199D                 push    offset $SG86530 ; "closesocket"
.text:000019A2                 mov     ecx, ds:_winsock_module
.text:000019A8                 push    ecx             ; hModule
.text:000019A9                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000019AF                 cmp     esi, esp
.text:000019B1                 call    __RTC_CheckEsp
.text:000019B6                 mov     [ebp+var_44], eax
.text:000019B9                 jmp     short loc_19C2
.text:000019BB ; ---------------------------------------------------------------------------
.text:000019BB
.text:000019BB loc_19BB:                               ; CODE XREF: _sk_init+43Dj
.text:000019BB                 mov     [ebp+var_44], 0
.text:000019C2
.text:000019C2 loc_19C2:                               ; CODE XREF: _sk_init+45Dj
.text:000019C2                 mov     edx, [ebp+var_44]
.text:000019C5                 mov     ds:_p_closesocket, edx
.text:000019CB                 cmp     ds:_winsock_module, 0
.text:000019D2                 jz      short loc_19F3
.text:000019D4                 mov     esi, esp
.text:000019D6                 push    offset $SG86533 ; "ntohl"
.text:000019DB                 mov     eax, ds:_winsock_module
.text:000019E0                 push    eax             ; hModule
.text:000019E1                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000019E7                 cmp     esi, esp
.text:000019E9                 call    __RTC_CheckEsp
.text:000019EE                 mov     [ebp+var_48], eax
.text:000019F1                 jmp     short loc_19FA
.text:000019F3 ; ---------------------------------------------------------------------------
.text:000019F3
.text:000019F3 loc_19F3:                               ; CODE XREF: _sk_init+476j
.text:000019F3                 mov     [ebp+var_48], 0
.text:000019FA
.text:000019FA loc_19FA:                               ; CODE XREF: _sk_init+495j
.text:000019FA                 mov     ecx, [ebp+var_48]
.text:000019FD                 mov     ds:_p_ntohl, ecx
.text:00001A03                 cmp     ds:_winsock_module, 0
.text:00001A0A                 jz      short loc_1A2C
.text:00001A0C                 mov     esi, esp
.text:00001A0E                 push    offset $SG86536 ; "htonl"
.text:00001A13                 mov     edx, ds:_winsock_module
.text:00001A19                 push    edx             ; hModule
.text:00001A1A                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001A20                 cmp     esi, esp
.text:00001A22                 call    __RTC_CheckEsp
.text:00001A27                 mov     [ebp+var_4C], eax
.text:00001A2A                 jmp     short loc_1A33
.text:00001A2C ; ---------------------------------------------------------------------------
.text:00001A2C
.text:00001A2C loc_1A2C:                               ; CODE XREF: _sk_init+4AEj
.text:00001A2C                 mov     [ebp+var_4C], 0
.text:00001A33
.text:00001A33 loc_1A33:                               ; CODE XREF: _sk_init+4CEj
.text:00001A33                 mov     eax, [ebp+var_4C]
.text:00001A36                 mov     ds:_p_htonl, eax
.text:00001A3B                 cmp     ds:_winsock_module, 0
.text:00001A42                 jz      short loc_1A64
.text:00001A44                 mov     esi, esp
.text:00001A46                 push    offset $SG86539 ; "htons"
.text:00001A4B                 mov     ecx, ds:_winsock_module
.text:00001A51                 push    ecx             ; hModule
.text:00001A52                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001A58                 cmp     esi, esp
.text:00001A5A                 call    __RTC_CheckEsp
.text:00001A5F                 mov     [ebp+var_50], eax
.text:00001A62                 jmp     short loc_1A6B
.text:00001A64 ; ---------------------------------------------------------------------------
.text:00001A64
.text:00001A64 loc_1A64:                               ; CODE XREF: _sk_init+4E6j
.text:00001A64                 mov     [ebp+var_50], 0
.text:00001A6B
.text:00001A6B loc_1A6B:                               ; CODE XREF: _sk_init+506j
.text:00001A6B                 mov     edx, [ebp+var_50]
.text:00001A6E                 mov     ds:_p_htons, edx
.text:00001A74                 cmp     ds:_winsock_module, 0
.text:00001A7B                 jz      short loc_1A9C
.text:00001A7D                 mov     esi, esp
.text:00001A7F                 push    offset $SG86542 ; "ntohs"
.text:00001A84                 mov     eax, ds:_winsock_module
.text:00001A89                 push    eax             ; hModule
.text:00001A8A                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001A90                 cmp     esi, esp
.text:00001A92                 call    __RTC_CheckEsp
.text:00001A97                 mov     [ebp+var_54], eax
.text:00001A9A                 jmp     short loc_1AA3
.text:00001A9C ; ---------------------------------------------------------------------------
.text:00001A9C
.text:00001A9C loc_1A9C:                               ; CODE XREF: _sk_init+51Fj
.text:00001A9C                 mov     [ebp+var_54], 0
.text:00001AA3
.text:00001AA3 loc_1AA3:                               ; CODE XREF: _sk_init+53Ej
.text:00001AA3                 mov     ecx, [ebp+var_54]
.text:00001AA6                 mov     ds:_p_ntohs, ecx
.text:00001AAC                 cmp     ds:_winsock_module, 0
.text:00001AB3                 jz      short loc_1AD5
.text:00001AB5                 mov     esi, esp
.text:00001AB7                 push    offset $SG86545 ; "gethostname"
.text:00001ABC                 mov     edx, ds:_winsock_module
.text:00001AC2                 push    edx             ; hModule
.text:00001AC3                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001AC9                 cmp     esi, esp
.text:00001ACB                 call    __RTC_CheckEsp
.text:00001AD0                 mov     [ebp+var_58], eax
.text:00001AD3                 jmp     short loc_1ADC
.text:00001AD5 ; ---------------------------------------------------------------------------
.text:00001AD5
.text:00001AD5 loc_1AD5:                               ; CODE XREF: _sk_init+557j
.text:00001AD5                 mov     [ebp+var_58], 0
.text:00001ADC
.text:00001ADC loc_1ADC:                               ; CODE XREF: _sk_init+577j
.text:00001ADC                 mov     eax, [ebp+var_58]
.text:00001ADF                 mov     ds:_p_gethostname, eax
.text:00001AE4                 cmp     ds:_winsock_module, 0
.text:00001AEB                 jz      short loc_1B0D
.text:00001AED                 mov     esi, esp
.text:00001AEF                 push    offset $SG86548 ; "gethostbyname"
.text:00001AF4                 mov     ecx, ds:_winsock_module
.text:00001AFA                 push    ecx             ; hModule
.text:00001AFB                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001B01                 cmp     esi, esp
.text:00001B03                 call    __RTC_CheckEsp
.text:00001B08                 mov     [ebp+var_5C], eax
.text:00001B0B                 jmp     short loc_1B14
.text:00001B0D ; ---------------------------------------------------------------------------
.text:00001B0D
.text:00001B0D loc_1B0D:                               ; CODE XREF: _sk_init+58Fj
.text:00001B0D                 mov     [ebp+var_5C], 0
.text:00001B14
.text:00001B14 loc_1B14:                               ; CODE XREF: _sk_init+5AFj
.text:00001B14                 mov     edx, [ebp+var_5C]
.text:00001B17                 mov     ds:_p_gethostbyname, edx
.text:00001B1D                 cmp     ds:_winsock_module, 0
.text:00001B24                 jz      short loc_1B45
.text:00001B26                 mov     esi, esp
.text:00001B28                 push    offset $SG86551 ; "getservbyname"
.text:00001B2D                 mov     eax, ds:_winsock_module
.text:00001B32                 push    eax             ; hModule
.text:00001B33                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001B39                 cmp     esi, esp
.text:00001B3B                 call    __RTC_CheckEsp
.text:00001B40                 mov     [ebp+var_60], eax
.text:00001B43                 jmp     short loc_1B4C
.text:00001B45 ; ---------------------------------------------------------------------------
.text:00001B45
.text:00001B45 loc_1B45:                               ; CODE XREF: _sk_init+5C8j
.text:00001B45                 mov     [ebp+var_60], 0
.text:00001B4C
.text:00001B4C loc_1B4C:                               ; CODE XREF: _sk_init+5E7j
.text:00001B4C                 mov     ecx, [ebp+var_60]
.text:00001B4F                 mov     ds:_p_getservbyname, ecx
.text:00001B55                 cmp     ds:_winsock_module, 0
.text:00001B5C                 jz      short loc_1B7E
.text:00001B5E                 mov     esi, esp
.text:00001B60                 push    offset $SG86554 ; "inet_addr"
.text:00001B65                 mov     edx, ds:_winsock_module
.text:00001B6B                 push    edx             ; hModule
.text:00001B6C                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001B72                 cmp     esi, esp
.text:00001B74                 call    __RTC_CheckEsp
.text:00001B79                 mov     [ebp+var_64], eax
.text:00001B7C                 jmp     short loc_1B85
.text:00001B7E ; ---------------------------------------------------------------------------
.text:00001B7E
.text:00001B7E loc_1B7E:                               ; CODE XREF: _sk_init+600j
.text:00001B7E                 mov     [ebp+var_64], 0
.text:00001B85
.text:00001B85 loc_1B85:                               ; CODE XREF: _sk_init+620j
.text:00001B85                 mov     eax, [ebp+var_64]
.text:00001B88                 mov     ds:_p_inet_addr, eax
.text:00001B8D                 cmp     ds:_winsock_module, 0
.text:00001B94                 jz      short loc_1BB6
.text:00001B96                 mov     esi, esp
.text:00001B98                 push    offset $SG86557 ; "inet_ntoa"
.text:00001B9D                 mov     ecx, ds:_winsock_module
.text:00001BA3                 push    ecx             ; hModule
.text:00001BA4                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001BAA                 cmp     esi, esp
.text:00001BAC                 call    __RTC_CheckEsp
.text:00001BB1                 mov     [ebp+var_68], eax
.text:00001BB4                 jmp     short loc_1BBD
.text:00001BB6 ; ---------------------------------------------------------------------------
.text:00001BB6
.text:00001BB6 loc_1BB6:                               ; CODE XREF: _sk_init+638j
.text:00001BB6                 mov     [ebp+var_68], 0
.text:00001BBD
.text:00001BBD loc_1BBD:                               ; CODE XREF: _sk_init+658j
.text:00001BBD                 mov     edx, [ebp+var_68]
.text:00001BC0                 mov     ds:_p_inet_ntoa, edx
.text:00001BC6                 cmp     ds:_winsock_module, 0
.text:00001BCD                 jz      short loc_1BEE
.text:00001BCF                 mov     esi, esp
.text:00001BD1                 push    offset $SG86560 ; "connect"
.text:00001BD6                 mov     eax, ds:_winsock_module
.text:00001BDB                 push    eax             ; hModule
.text:00001BDC                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001BE2                 cmp     esi, esp
.text:00001BE4                 call    __RTC_CheckEsp
.text:00001BE9                 mov     [ebp+var_6C], eax
.text:00001BEC                 jmp     short loc_1BF5
.text:00001BEE ; ---------------------------------------------------------------------------
.text:00001BEE
.text:00001BEE loc_1BEE:                               ; CODE XREF: _sk_init+671j
.text:00001BEE                 mov     [ebp+var_6C], 0
.text:00001BF5
.text:00001BF5 loc_1BF5:                               ; CODE XREF: _sk_init+690j
.text:00001BF5                 mov     ecx, [ebp+var_6C]
.text:00001BF8                 mov     ds:_p_connect, ecx
.text:00001BFE                 cmp     ds:_winsock_module, 0
.text:00001C05                 jz      short loc_1C27
.text:00001C07                 mov     esi, esp
.text:00001C09                 push    offset $SG86563 ; "bind"
.text:00001C0E                 mov     edx, ds:_winsock_module
.text:00001C14                 push    edx             ; hModule
.text:00001C15                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001C1B                 cmp     esi, esp
.text:00001C1D                 call    __RTC_CheckEsp
.text:00001C22                 mov     [ebp+var_70], eax
.text:00001C25                 jmp     short loc_1C2E
.text:00001C27 ; ---------------------------------------------------------------------------
.text:00001C27
.text:00001C27 loc_1C27:                               ; CODE XREF: _sk_init+6A9j
.text:00001C27                 mov     [ebp+var_70], 0
.text:00001C2E
.text:00001C2E loc_1C2E:                               ; CODE XREF: _sk_init+6C9j
.text:00001C2E                 mov     eax, [ebp+var_70]
.text:00001C31                 mov     ds:_p_bind, eax
.text:00001C36                 cmp     ds:_winsock_module, 0
.text:00001C3D                 jz      short loc_1C5F
.text:00001C3F                 mov     esi, esp
.text:00001C41                 push    offset $SG86566 ; "setsockopt"
.text:00001C46                 mov     ecx, ds:_winsock_module
.text:00001C4C                 push    ecx             ; hModule
.text:00001C4D                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001C53                 cmp     esi, esp
.text:00001C55                 call    __RTC_CheckEsp
.text:00001C5A                 mov     [ebp+var_74], eax
.text:00001C5D                 jmp     short loc_1C66
.text:00001C5F ; ---------------------------------------------------------------------------
.text:00001C5F
.text:00001C5F loc_1C5F:                               ; CODE XREF: _sk_init+6E1j
.text:00001C5F                 mov     [ebp+var_74], 0
.text:00001C66
.text:00001C66 loc_1C66:                               ; CODE XREF: _sk_init+701j
.text:00001C66                 mov     edx, [ebp+var_74]
.text:00001C69                 mov     ds:_p_setsockopt, edx
.text:00001C6F                 cmp     ds:_winsock_module, 0
.text:00001C76                 jz      short loc_1C97
.text:00001C78                 mov     esi, esp
.text:00001C7A                 push    offset $SG86569 ; "socket"
.text:00001C7F                 mov     eax, ds:_winsock_module
.text:00001C84                 push    eax             ; hModule
.text:00001C85                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001C8B                 cmp     esi, esp
.text:00001C8D                 call    __RTC_CheckEsp
.text:00001C92                 mov     [ebp+var_78], eax
.text:00001C95                 jmp     short loc_1C9E
.text:00001C97 ; ---------------------------------------------------------------------------
.text:00001C97
.text:00001C97 loc_1C97:                               ; CODE XREF: _sk_init+71Aj
.text:00001C97                 mov     [ebp+var_78], 0
.text:00001C9E
.text:00001C9E loc_1C9E:                               ; CODE XREF: _sk_init+739j
.text:00001C9E                 mov     ecx, [ebp+var_78]
.text:00001CA1                 mov     ds:_p_socket, ecx
.text:00001CA7                 cmp     ds:_winsock_module, 0
.text:00001CAE                 jz      short loc_1CD0
.text:00001CB0                 mov     esi, esp
.text:00001CB2                 push    offset $SG86572 ; "listen"
.text:00001CB7                 mov     edx, ds:_winsock_module
.text:00001CBD                 push    edx             ; hModule
.text:00001CBE                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001CC4                 cmp     esi, esp
.text:00001CC6                 call    __RTC_CheckEsp
.text:00001CCB                 mov     [ebp+var_7C], eax
.text:00001CCE                 jmp     short loc_1CD7
.text:00001CD0 ; ---------------------------------------------------------------------------
.text:00001CD0
.text:00001CD0 loc_1CD0:                               ; CODE XREF: _sk_init+752j
.text:00001CD0                 mov     [ebp+var_7C], 0
.text:00001CD7
.text:00001CD7 loc_1CD7:                               ; CODE XREF: _sk_init+772j
.text:00001CD7                 mov     eax, [ebp+var_7C]
.text:00001CDA                 mov     ds:_p_listen, eax
.text:00001CDF                 cmp     ds:_winsock_module, 0
.text:00001CE6                 jz      short loc_1D08
.text:00001CE8                 mov     esi, esp
.text:00001CEA                 push    offset $SG86575 ; "send"
.text:00001CEF                 mov     ecx, ds:_winsock_module
.text:00001CF5                 push    ecx             ; hModule
.text:00001CF6                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001CFC                 cmp     esi, esp
.text:00001CFE                 call    __RTC_CheckEsp
.text:00001D03                 mov     [ebp+var_80], eax
.text:00001D06                 jmp     short loc_1D0F
.text:00001D08 ; ---------------------------------------------------------------------------
.text:00001D08
.text:00001D08 loc_1D08:                               ; CODE XREF: _sk_init+78Aj
.text:00001D08                 mov     [ebp+var_80], 0
.text:00001D0F
.text:00001D0F loc_1D0F:                               ; CODE XREF: _sk_init+7AAj
.text:00001D0F                 mov     edx, [ebp+var_80]
.text:00001D12                 mov     ds:_p_send, edx
.text:00001D18                 cmp     ds:_winsock_module, 0
.text:00001D1F                 jz      short loc_1D43
.text:00001D21                 mov     esi, esp
.text:00001D23                 push    offset $SG86578 ; "shutdown"
.text:00001D28                 mov     eax, ds:_winsock_module
.text:00001D2D                 push    eax             ; hModule
.text:00001D2E                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001D34                 cmp     esi, esp
.text:00001D36                 call    __RTC_CheckEsp
.text:00001D3B                 mov     [ebp+var_84], eax
.text:00001D41                 jmp     short loc_1D4D
.text:00001D43 ; ---------------------------------------------------------------------------
.text:00001D43
.text:00001D43 loc_1D43:                               ; CODE XREF: _sk_init+7C3j
.text:00001D43                 mov     [ebp+var_84], 0
.text:00001D4D
.text:00001D4D loc_1D4D:                               ; CODE XREF: _sk_init+7E5j
.text:00001D4D                 mov     ecx, [ebp+var_84]
.text:00001D53                 mov     ds:_p_shutdown, ecx
.text:00001D59                 cmp     ds:_winsock_module, 0
.text:00001D60                 jz      short loc_1D85
.text:00001D62                 mov     esi, esp
.text:00001D64                 push    offset $SG86581 ; "ioctlsocket"
.text:00001D69                 mov     edx, ds:_winsock_module
.text:00001D6F                 push    edx             ; hModule
.text:00001D70                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001D76                 cmp     esi, esp
.text:00001D78                 call    __RTC_CheckEsp
.text:00001D7D                 mov     [ebp+var_88], eax
.text:00001D83                 jmp     short loc_1D8F
.text:00001D85 ; ---------------------------------------------------------------------------
.text:00001D85
.text:00001D85 loc_1D85:                               ; CODE XREF: _sk_init+804j
.text:00001D85                 mov     [ebp+var_88], 0
.text:00001D8F
.text:00001D8F loc_1D8F:                               ; CODE XREF: _sk_init+827j
.text:00001D8F                 mov     eax, [ebp+var_88]
.text:00001D95                 mov     ds:_p_ioctlsocket, eax
.text:00001D9A                 cmp     ds:_winsock_module, 0
.text:00001DA1                 jz      short loc_1DC6
.text:00001DA3                 mov     esi, esp
.text:00001DA5                 push    offset $SG86584 ; "accept"
.text:00001DAA                 mov     ecx, ds:_winsock_module
.text:00001DB0                 push    ecx             ; hModule
.text:00001DB1                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001DB7                 cmp     esi, esp
.text:00001DB9                 call    __RTC_CheckEsp
.text:00001DBE                 mov     [ebp+var_8C], eax
.text:00001DC4                 jmp     short loc_1DD0
.text:00001DC6 ; ---------------------------------------------------------------------------
.text:00001DC6
.text:00001DC6 loc_1DC6:                               ; CODE XREF: _sk_init+845j
.text:00001DC6                 mov     [ebp+var_8C], 0
.text:00001DD0
.text:00001DD0 loc_1DD0:                               ; CODE XREF: _sk_init+868j
.text:00001DD0                 mov     edx, [ebp+var_8C]
.text:00001DD6                 mov     ds:_p_accept, edx
.text:00001DDC                 cmp     ds:_winsock_module, 0
.text:00001DE3                 jz      short loc_1E07
.text:00001DE5                 mov     esi, esp
.text:00001DE7                 push    offset $SG86587 ; "recv"
.text:00001DEC                 mov     eax, ds:_winsock_module
.text:00001DF1                 push    eax             ; hModule
.text:00001DF2                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001DF8                 cmp     esi, esp
.text:00001DFA                 call    __RTC_CheckEsp
.text:00001DFF                 mov     [ebp+var_90], eax
.text:00001E05                 jmp     short loc_1E11
.text:00001E07 ; ---------------------------------------------------------------------------
.text:00001E07
.text:00001E07 loc_1E07:                               ; CODE XREF: _sk_init+887j
.text:00001E07                 mov     [ebp+var_90], 0
.text:00001E11
.text:00001E11 loc_1E11:                               ; CODE XREF: _sk_init+8A9j
.text:00001E11                 mov     ecx, [ebp+var_90]
.text:00001E17                 mov     ds:_p_recv, ecx
.text:00001E1D                 cmp     ds:_winsock_module, 0
.text:00001E24                 jz      short loc_1E49
.text:00001E26                 mov     esi, esp
.text:00001E28                 push    offset $SG86590 ; "WSAIoctl"
.text:00001E2D                 mov     edx, ds:_winsock_module
.text:00001E33                 push    edx             ; hModule
.text:00001E34                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00001E3A                 cmp     esi, esp
.text:00001E3C                 call    __RTC_CheckEsp
.text:00001E41                 mov     [ebp+var_94], eax
.text:00001E47                 jmp     short loc_1E53
.text:00001E49 ; ---------------------------------------------------------------------------
.text:00001E49
.text:00001E49 loc_1E49:                               ; CODE XREF: _sk_init+8C8j
.text:00001E49                 mov     [ebp+var_94], 0
.text:00001E53
.text:00001E53 loc_1E53:                               ; CODE XREF: _sk_init+8EBj
.text:00001E53                 mov     eax, [ebp+var_94]
.text:00001E59                 mov     ds:_p_WSAIoctl, eax
.text:00001E5E                 push    2
.text:00001E60                 push    2
.text:00001E62                 call    _sk_startup
.text:00001E67                 add     esp, 8
.text:00001E6A                 test    eax, eax
.text:00001E6C                 jnz     short loc_1E9B
.text:00001E6E                 push    0
.text:00001E70                 push    2
.text:00001E72                 call    _sk_startup
.text:00001E77                 add     esp, 8
.text:00001E7A                 test    eax, eax
.text:00001E7C                 jnz     short loc_1E9B
.text:00001E7E                 push    1
.text:00001E80                 push    1
.text:00001E82                 call    _sk_startup
.text:00001E87                 add     esp, 8
.text:00001E8A                 test    eax, eax
.text:00001E8C                 jnz     short loc_1E9B
.text:00001E8E                 push    offset $SG86592 ; "Unable to initialise WinSock"
.text:00001E93                 call    _fatalbox
.text:00001E98                 add     esp, 4
.text:00001E9B
.text:00001E9B loc_1E9B:                               ; CODE XREF: _sk_init+910j
.text:00001E9B                                         ; _sk_init+920j ...
.text:00001E9B                 push    offset _cmpfortree
.text:00001EA0                 call    _newtree234
.text:00001EA5                 add     esp, 4
.text:00001EA8                 mov     ds:_sktree, eax
.text:00001EAD                 pop     edi
.text:00001EAE                 pop     esi
.text:00001EAF                 add     esp, 94h
.text:00001EB5                 cmp     ebp, esp
.text:00001EB7                 call    __RTC_CheckEsp
.text:00001EBC                 mov     esp, ebp
.text:00001EBE                 pop     ebp
.text:00001EBF                 retn
.text:00001EBF _sk_init        endp
.text:00001EBF
.text:00001EBF ; ---------------------------------------------------------------------------
.text:00001EC0                 db 0Ch dup(0CCh)
.text:00001ECC
.text:00001ECC ; =============== S U B R O U T I N E =======================================
.text:00001ECC
.text:00001ECC ; Attributes: bp-based frame
.text:00001ECC
.text:00001ECC _cmpfortree     proc near               ; DATA XREF: _sk_init:loc_1E9Bo
.text:00001ECC
.text:00001ECC var_10          = dword ptr -10h
.text:00001ECC var_C           = dword ptr -0Ch
.text:00001ECC var_8           = dword ptr -8
.text:00001ECC var_4           = dword ptr -4
.text:00001ECC arg_0           = dword ptr  8
.text:00001ECC arg_4           = dword ptr  0Ch
.text:00001ECC
.text:00001ECC                 push    ebp
.text:00001ECD                 mov     ebp, esp
.text:00001ECF                 sub     esp, 10h
.text:00001ED2                 mov     eax, 0CCCCCCCCh
.text:00001ED7                 mov     [ebp+var_10], eax
.text:00001EDA                 mov     [ebp+var_C], eax
.text:00001EDD                 mov     [ebp+var_8], eax
.text:00001EE0                 mov     [ebp+var_4], eax
.text:00001EE3                 mov     eax, [ebp+arg_0]
.text:00001EE6                 mov     [ebp+var_4], eax
.text:00001EE9                 mov     ecx, [ebp+arg_4]
.text:00001EEC                 mov     [ebp+var_8], ecx
.text:00001EEF                 mov     edx, [ebp+var_4]
.text:00001EF2                 mov     eax, [edx+8]
.text:00001EF5                 mov     [ebp+var_C], eax
.text:00001EF8                 mov     ecx, [ebp+var_8]
.text:00001EFB                 mov     edx, [ecx+8]
.text:00001EFE                 mov     [ebp+var_10], edx
.text:00001F01                 mov     eax, [ebp+var_C]
.text:00001F04                 cmp     eax, [ebp+var_10]
.text:00001F07                 jnb     short loc_1F0E
.text:00001F09                 or      eax, 0FFFFFFFFh
.text:00001F0C                 jmp     short loc_1F3B
.text:00001F0E ; ---------------------------------------------------------------------------
.text:00001F0E
.text:00001F0E loc_1F0E:                               ; CODE XREF: _cmpfortree+3Bj
.text:00001F0E                 mov     ecx, [ebp+var_C]
.text:00001F11                 cmp     ecx, [ebp+var_10]
.text:00001F14                 jbe     short loc_1F1D
.text:00001F16                 mov     eax, 1
.text:00001F1B                 jmp     short loc_1F3B
.text:00001F1D ; ---------------------------------------------------------------------------
.text:00001F1D
.text:00001F1D loc_1F1D:                               ; CODE XREF: _cmpfortree+48j
.text:00001F1D                 mov     edx, [ebp+var_4]
.text:00001F20                 cmp     edx, [ebp+var_8]
.text:00001F23                 jnb     short loc_1F2A
.text:00001F25                 or      eax, 0FFFFFFFFh
.text:00001F28                 jmp     short loc_1F3B
.text:00001F2A ; ---------------------------------------------------------------------------
.text:00001F2A
.text:00001F2A loc_1F2A:                               ; CODE XREF: _cmpfortree+57j
.text:00001F2A                 mov     eax, [ebp+var_4]
.text:00001F2D                 cmp     eax, [ebp+var_8]
.text:00001F30                 jbe     short loc_1F39
.text:00001F32                 mov     eax, 1
.text:00001F37                 jmp     short loc_1F3B
.text:00001F39 ; ---------------------------------------------------------------------------
.text:00001F39
.text:00001F39 loc_1F39:                               ; CODE XREF: _cmpfortree+64j
.text:00001F39                 xor     eax, eax
.text:00001F3B
.text:00001F3B loc_1F3B:                               ; CODE XREF: _cmpfortree+40j
.text:00001F3B                                         ; _cmpfortree+4Fj ...
.text:00001F3B                 mov     esp, ebp
.text:00001F3D                 pop     ebp
.text:00001F3E                 retn
.text:00001F3E _cmpfortree     endp
.text:00001F3E
.text:00001F3E ; ---------------------------------------------------------------------------
.text:00001F3F                 db 0Dh dup(0CCh)
.text:00001F4C
.text:00001F4C ; =============== S U B R O U T I N E =======================================
.text:00001F4C
.text:00001F4C ; Attributes: bp-based frame
.text:00001F4C
.text:00001F4C                 public _sk_cleanup
.text:00001F4C _sk_cleanup     proc near
.text:00001F4C
.text:00001F4C var_8           = dword ptr -8
.text:00001F4C var_4           = dword ptr -4
.text:00001F4C
.text:00001F4C                 push    ebp
.text:00001F4D                 mov     ebp, esp
.text:00001F4F                 sub     esp, 8
.text:00001F52                 push    esi
.text:00001F53                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001F5A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F61                 cmp     ds:_sktree, 0
.text:00001F68                 jz      short loc_1FC9
.text:00001F6A                 mov     [ebp+var_8], 0
.text:00001F71                 jmp     short loc_1F7C
.text:00001F73 ; ---------------------------------------------------------------------------
.text:00001F73
.text:00001F73 loc_1F73:                               ; CODE XREF: _sk_cleanup+62j
.text:00001F73                 mov     eax, [ebp+var_8]
.text:00001F76                 add     eax, 1
.text:00001F79                 mov     [ebp+var_8], eax
.text:00001F7C
.text:00001F7C loc_1F7C:                               ; CODE XREF: _sk_cleanup+25j
.text:00001F7C                 mov     ecx, [ebp+var_8]
.text:00001F7F                 push    ecx
.text:00001F80                 mov     edx, ds:_sktree
.text:00001F86                 push    edx
.text:00001F87                 call    _index234
.text:00001F8C                 add     esp, 8
.text:00001F8F                 mov     [ebp+var_4], eax
.text:00001F92                 cmp     [ebp+var_4], 0
.text:00001F96                 jz      short loc_1FB0
.text:00001F98                 mov     esi, esp
.text:00001F9A                 mov     eax, [ebp+var_4]
.text:00001F9D                 mov     ecx, [eax+8]
.text:00001FA0                 push    ecx
.text:00001FA1                 call    ds:_p_closesocket
.text:00001FA7                 cmp     esi, esp
.text:00001FA9                 call    __RTC_CheckEsp
.text:00001FAE                 jmp     short loc_1F73
.text:00001FB0 ; ---------------------------------------------------------------------------
.text:00001FB0
.text:00001FB0 loc_1FB0:                               ; CODE XREF: _sk_cleanup+4Aj
.text:00001FB0                 mov     edx, ds:_sktree
.text:00001FB6                 push    edx
.text:00001FB7                 call    _freetree234
.text:00001FBC                 add     esp, 4
.text:00001FBF                 mov     ds:_sktree, 0
.text:00001FC9
.text:00001FC9 loc_1FC9:                               ; CODE XREF: _sk_cleanup+1Cj
.text:00001FC9                 cmp     ds:_p_WSACleanup, 0
.text:00001FD0                 jz      short loc_1FE1
.text:00001FD2                 mov     esi, esp
.text:00001FD4                 call    ds:_p_WSACleanup
.text:00001FDA                 cmp     esi, esp
.text:00001FDC                 call    __RTC_CheckEsp
.text:00001FE1
.text:00001FE1 loc_1FE1:                               ; CODE XREF: _sk_cleanup+84j
.text:00001FE1                 cmp     ds:_winsock_module, 0
.text:00001FE8                 jz      short loc_1FFF
.text:00001FEA                 mov     esi, esp
.text:00001FEC                 mov     eax, ds:_winsock_module
.text:00001FF1                 push    eax             ; hLibModule
.text:00001FF2                 call    dword ptr ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
.text:00001FF8                 cmp     esi, esp
.text:00001FFA                 call    __RTC_CheckEsp
.text:00001FFF
.text:00001FFF loc_1FFF:                               ; CODE XREF: _sk_cleanup+9Cj
.text:00001FFF                 cmp     ds:_wship6_module, 0
.text:00002006                 jz      short loc_201E
.text:00002008                 mov     esi, esp
.text:0000200A                 mov     ecx, ds:_wship6_module
.text:00002010                 push    ecx             ; hLibModule
.text:00002011                 call    dword ptr ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
.text:00002017                 cmp     esi, esp
.text:00002019                 call    __RTC_CheckEsp
.text:0000201E
.text:0000201E loc_201E:                               ; CODE XREF: _sk_cleanup+BAj
.text:0000201E                 pop     esi
.text:0000201F                 add     esp, 8
.text:00002022                 cmp     ebp, esp
.text:00002024                 call    __RTC_CheckEsp
.text:00002029                 mov     esp, ebp
.text:0000202B                 pop     ebp
.text:0000202C                 retn
.text:0000202C _sk_cleanup     endp
.text:0000202C
.text:0000202C ; ---------------------------------------------------------------------------
.text:0000202D                 db 0Fh dup(0CCh)
.text:0000203C
.text:0000203C ; =============== S U B R O U T I N E =======================================
.text:0000203C
.text:0000203C ; Attributes: bp-based frame
.text:0000203C
.text:0000203C ; int __cdecl winsock_error_string(DWORD dwMessageId)
.text:0000203C                 public _winsock_error_string
.text:0000203C _winsock_error_string proc near         ; CODE XREF: _try_connect+123p
.text:0000203C                                         ; _try_connect+300p ...
.text:0000203C
.text:0000203C var_30          = dword ptr -30h
.text:0000203C var_2C          = dword ptr -2Ch
.text:0000203C var_28          = dword ptr -28h
.text:0000203C var_24          = dword ptr -24h
.text:0000203C var_20          = dword ptr -20h
.text:0000203C Source          = byte ptr -18h
.text:0000203C var_14          = dword ptr -14h
.text:0000203C var_10          = dword ptr -10h
.text:0000203C var_C           = dword ptr -0Ch
.text:0000203C var_4           = dword ptr -4
.text:0000203C dwMessageId     = dword ptr  8
.text:0000203C
.text:0000203C                 push    ebp
.text:0000203D                 mov     ebp, esp
.text:0000203F                 sub     esp, 30h
.text:00002042                 push    esi
.text:00002043                 push    edi
.text:00002044                 lea     edi, [ebp+var_30]
.text:00002047                 mov     ecx, 0Ch
.text:0000204C                 mov     eax, 0CCCCCCCCh
.text:00002051                 rep stosd
.text:00002053                 mov     eax, dword ptr ds:___security_cookie
.text:00002058                 xor     eax, ebp
.text:0000205A                 mov     [ebp+var_4], eax
.text:0000205D                 mov     eax, ds:$SG86636
.text:00002062                 mov     dword ptr [ebp+Source], eax
.text:00002065                 mov     ecx, ds:dword_994
.text:0000206B                 mov     [ebp+var_14], ecx
.text:0000206E                 mov     edx, ds:dword_998
.text:00002074                 mov     [ebp+var_10], edx
.text:00002077                 mov     eax, ds:dword_99C
.text:0000207C                 mov     [ebp+var_C], eax
.text:0000207F                 mov     ecx, [ebp+dwMessageId]
.text:00002082                 mov     [ebp+var_30], ecx
.text:00002085                 mov     edx, [ebp+var_30]
.text:00002088                 sub     edx, 2714h
.text:0000208E                 mov     [ebp+var_30], edx
.text:00002091                 cmp     [ebp+var_30], 61h ; 'a' ; switch 98 cases
.text:00002095                 ja      $LN41           ; jumptable 000020A5 default case
.text:0000209B                 mov     eax, [ebp+var_30]
.text:0000209E                 movzx   ecx, ds:$LN45[eax]
.text:000020A5                 jmp     ds:$LN49[ecx*4] ; switch jump
.text:000020AC ; ---------------------------------------------------------------------------
.text:000020AC
.text:000020AC $LN40:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020AC                                         ; DATA XREF: .text:$LN49o
.text:000020AC                 mov     eax, offset $SG86643 ; jumptable 000020A5 case 9
.text:000020B1                 jmp     loc_237E
.text:000020B6 ; ---------------------------------------------------------------------------
.text:000020B6
.text:000020B6 $LN39:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020B6                                         ; DATA XREF: .text:$LN49o
.text:000020B6                 mov     eax, offset $SG86645 ; jumptable 000020A5 case 44
.text:000020BB                 jmp     loc_237E
.text:000020C0 ; ---------------------------------------------------------------------------
.text:000020C0
.text:000020C0 $LN38:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020C0                                         ; DATA XREF: .text:$LN49o
.text:000020C0                 mov     eax, offset $SG86647 ; jumptable 000020A5 case 45
.text:000020C5                 jmp     loc_237E
.text:000020CA ; ---------------------------------------------------------------------------
.text:000020CA
.text:000020CA $LN37:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020CA                                         ; DATA XREF: .text:$LN49o
.text:000020CA                 mov     eax, offset $SG86649 ; jumptable 000020A5 case 43
.text:000020CF                 jmp     loc_237E
.text:000020D4 ; ---------------------------------------------------------------------------
.text:000020D4
.text:000020D4 $LN36:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020D4                                         ; DATA XREF: .text:$LN49o
.text:000020D4                 mov     eax, offset $SG86651 ; jumptable 000020A5 case 33
.text:000020D9                 jmp     loc_237E
.text:000020DE ; ---------------------------------------------------------------------------
.text:000020DE
.text:000020DE $LN35:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020DE                                         ; DATA XREF: .text:$LN49o
.text:000020DE                 mov     eax, offset $SG86653 ; jumptable 000020A5 case 49
.text:000020E3                 jmp     loc_237E
.text:000020E8 ; ---------------------------------------------------------------------------
.text:000020E8
.text:000020E8 $LN34:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020E8                                         ; DATA XREF: .text:$LN49o
.text:000020E8                 mov     eax, offset $SG86655 ; jumptable 000020A5 case 57
.text:000020ED                 jmp     loc_237E
.text:000020F2 ; ---------------------------------------------------------------------------
.text:000020F2
.text:000020F2 $LN33:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020F2                                         ; DATA XREF: .text:$LN49o
.text:000020F2                 mov     eax, offset $SG86657 ; jumptable 000020A5 case 50
.text:000020F7                 jmp     loc_237E
.text:000020FC ; ---------------------------------------------------------------------------
.text:000020FC
.text:000020FC $LN32:                                  ; CODE XREF: _winsock_error_string+69j
.text:000020FC                                         ; DATA XREF: .text:$LN49o
.text:000020FC                 mov     eax, offset $SG86659 ; jumptable 000020A5 case 35
.text:00002101                 jmp     loc_237E
.text:00002106 ; ---------------------------------------------------------------------------
.text:00002106
.text:00002106 $LN31:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002106                                         ; DATA XREF: .text:$LN49o
.text:00002106                 mov     eax, offset $SG86661 ; jumptable 000020A5 case 10
.text:0000210B                 jmp     loc_237E
.text:00002110 ; ---------------------------------------------------------------------------
.text:00002110
.text:00002110 $LN30:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002110                                         ; DATA XREF: .text:$LN49o
.text:00002110                 mov     eax, offset $SG86663 ; jumptable 000020A5 case 60
.text:00002115                 jmp     loc_237E
.text:0000211A ; ---------------------------------------------------------------------------
.text:0000211A
.text:0000211A $LN29:                                  ; CODE XREF: _winsock_error_string+69j
.text:0000211A                                         ; DATA XREF: .text:$LN49o
.text:0000211A                 mov     eax, offset $SG86665 ; jumptable 000020A5 case 61
.text:0000211F                 jmp     loc_237E
.text:00002124 ; ---------------------------------------------------------------------------
.text:00002124
.text:00002124 $LN28:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002124                                         ; DATA XREF: .text:$LN49o
.text:00002124                 mov     eax, offset $SG86667 ; jumptable 000020A5 case 32
.text:00002129                 jmp     loc_237E
.text:0000212E ; ---------------------------------------------------------------------------
.text:0000212E
.text:0000212E $LN27:                                  ; CODE XREF: _winsock_error_string+69j
.text:0000212E                                         ; DATA XREF: .text:$LN49o
.text:0000212E                 mov     eax, offset $SG86669 ; jumptable 000020A5 case 0
.text:00002133                 jmp     loc_237E
.text:00002138 ; ---------------------------------------------------------------------------
.text:00002138
.text:00002138 $LN26:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002138                                         ; DATA XREF: .text:$LN49o
.text:00002138                 mov     eax, offset $SG86671 ; jumptable 000020A5 case 18
.text:0000213D                 jmp     loc_237E
.text:00002142 ; ---------------------------------------------------------------------------
.text:00002142
.text:00002142 $LN25:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002142                                         ; DATA XREF: .text:$LN49o
.text:00002142                 mov     eax, offset $SG86673 ; jumptable 000020A5 case 52
.text:00002147                 jmp     loc_237E
.text:0000214C ; ---------------------------------------------------------------------------
.text:0000214C
.text:0000214C $LN24:                                  ; CODE XREF: _winsock_error_string+69j
.text:0000214C                                         ; DATA XREF: .text:$LN49o
.text:0000214C                 mov     eax, offset $SG86675 ; jumptable 000020A5 case 20
.text:00002151                 jmp     loc_237E
.text:00002156 ; ---------------------------------------------------------------------------
.text:00002156
.text:00002156 $LN23:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002156                                         ; DATA XREF: .text:$LN49o
.text:00002156                 mov     eax, offset $SG86677 ; jumptable 000020A5 case 36
.text:0000215B                 jmp     loc_237E
.text:00002160 ; ---------------------------------------------------------------------------
.text:00002160
.text:00002160 $LN22:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002160                                         ; DATA XREF: .text:$LN49o
.text:00002160                 mov     eax, offset $SG86679 ; jumptable 000020A5 case 46
.text:00002165                 jmp     loc_237E
.text:0000216A ; ---------------------------------------------------------------------------
.text:0000216A
.text:0000216A $LN21:                                  ; CODE XREF: _winsock_error_string+69j
.text:0000216A                                         ; DATA XREF: .text:$LN49o
.text:0000216A                 mov     eax, offset $SG86681 ; jumptable 000020A5 case 48
.text:0000216F                 jmp     loc_237E
.text:00002174 ; ---------------------------------------------------------------------------
.text:00002174
.text:00002174 $LN20:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002174                                         ; DATA XREF: .text:$LN49o
.text:00002174                 mov     eax, offset $SG86683 ; jumptable 000020A5 case 47
.text:00002179                 jmp     loc_237E
.text:0000217E ; ---------------------------------------------------------------------------
.text:0000217E
.text:0000217E $LN19:                                  ; CODE XREF: _winsock_error_string+69j
.text:0000217E                                         ; DATA XREF: .text:$LN49o
.text:0000217E                 mov     eax, offset $SG86685 ; jumptable 000020A5 case 51
.text:00002183                 jmp     loc_237E
.text:00002188 ; ---------------------------------------------------------------------------
.text:00002188
.text:00002188 $LN18:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002188                                         ; DATA XREF: .text:$LN49o
.text:00002188                 mov     eax, offset $SG86687 ; jumptable 000020A5 case 38
.text:0000218D                 jmp     loc_237E
.text:00002192 ; ---------------------------------------------------------------------------
.text:00002192
.text:00002192 $LN17:                                  ; CODE XREF: _winsock_error_string+69j
.text:00002192                                         ; DATA XREF: .text:$LN49o
.text:00002192                 mov     eax, offset $SG86689 ; jumptable 000020A5 case 53
.text:00002197                 jmp     loc_237E
.text:0000219C ; ---------------------------------------------------------------------------
.text:0000219C
.text:0000219C $LN16:                                  ; CODE XREF: _winsock_error_string+69j
.text:0000219C                                         ; DATA XREF: .text:$LN49o
.text:0000219C                 mov     eax, offset $SG86691 ; jumptable 000020A5 case 34
.text:000021A1                 jmp     loc_237E
.text:000021A6 ; ---------------------------------------------------------------------------
.text:000021A6
.text:000021A6 $LN15:                                  ; CODE XREF: _winsock_error_string+69j
.text:000021A6                                         ; DATA XREF: .text:$LN49o
.text:000021A6                 mov     eax, offset $SG86693 ; jumptable 000020A5 case 41
.text:000021AB                 jmp     loc_237E
.text:000021B0 ; ---------------------------------------------------------------------------
.text:000021B0
.text:000021B0 $LN14:                                  ; CODE XREF: _winsock_error_string+69j
.text:000021B0                                         ; DATA XREF: .text:$LN49o
.text:000021B0                 mov     eax, offset $SG86695 ; jumptable 000020A5 case 42
.text:000021B5                 jmp     loc_237E
.text:000021BA ; ---------------------------------------------------------------------------
.text:000021BA
.text:000021BA $LN13:                                  ; CODE XREF: _winsock_error_string+69j
.text:000021BA                                         ; DATA XREF: .text:$LN49o
.text:000021BA                 mov     eax, offset $SG86697 ; jumptable 000020A5 case 63
.text:000021BF                 jmp     loc_237E
.text:000021C4 ; ---------------------------------------------------------------------------
.text:000021C4
.text:000021C4 $LN12:                                  ; CODE XREF: _winsock_error_string+69j
.text:000021C4                                         ; DATA XREF: .text:$LN49o
.text:000021C4                 mov     eax, offset $SG86699 ; jumptable 000020A5 case 39
.text:000021C9                 jmp     loc_237E
.text:000021CE ; ---------------------------------------------------------------------------
.text:000021CE
.text:000021CE $LN11:                                  ; CODE XREF: _winsock_error_string+69j
.text:000021CE                                         ; DATA XREF: .text:$LN49o
.text:000021CE                 mov     eax, offset $SG86701 ; jumptable 000020A5 case 37
.text:000021D3                 jmp     loc_237E
.text:000021D8 ; ---------------------------------------------------------------------------
.text:000021D8
.text:000021D8 $LN10:                                  ; CODE XREF: _winsock_error_string+69j
.text:000021D8                                         ; DATA XREF: .text:$LN49o
.text:000021D8                 mov     eax, offset $SG86703 ; jumptable 000020A5 case 54
.text:000021DD                 jmp     loc_237E
.text:000021E2 ; ---------------------------------------------------------------------------
.text:000021E2
.text:000021E2 $LN9:                                   ; CODE XREF: _winsock_error_string+69j
.text:000021E2                                         ; DATA XREF: .text:$LN49o
.text:000021E2                 mov     eax, offset $SG86705 ; jumptable 000020A5 case 40
.text:000021E7                 jmp     loc_237E
.text:000021EC ; ---------------------------------------------------------------------------
.text:000021EC
.text:000021EC $LN8:                                   ; CODE XREF: _winsock_error_string+69j
.text:000021EC                                         ; DATA XREF: .text:$LN49o
.text:000021EC                 mov     eax, offset $SG86707 ; jumptable 000020A5 case 56
.text:000021F1                 jmp     loc_237E
.text:000021F6 ; ---------------------------------------------------------------------------
.text:000021F6
.text:000021F6 $LN7:                                   ; CODE XREF: _winsock_error_string+69j
.text:000021F6                                         ; DATA XREF: .text:$LN49o
.text:000021F6                 mov     eax, offset $SG86709 ; jumptable 000020A5 case 31
.text:000021FB                 jmp     loc_237E
.text:00002200 ; ---------------------------------------------------------------------------
.text:00002200
.text:00002200 $LN6:                                   ; CODE XREF: _winsock_error_string+69j
.text:00002200                                         ; DATA XREF: .text:$LN49o
.text:00002200                 mov     eax, offset $SG86711 ; jumptable 000020A5 case 97
.text:00002205                 jmp     loc_237E
.text:0000220A ; ---------------------------------------------------------------------------
.text:0000220A
.text:0000220A $LN41:                                  ; CODE XREF: _winsock_error_string+59j
.text:0000220A                                         ; _winsock_error_string+69j
.text:0000220A                                         ; DATA XREF: ...
.text:0000220A                 cmp     ds:_errstrings, 0 ; jumptable 000020A5 default case
.text:00002211                 jnz     short loc_2225
.text:00002213                 push    offset _errstring_compare
.text:00002218                 call    _newtree234
.text:0000221D                 add     esp, 4
.text:00002220                 mov     ds:_errstrings, eax
.text:00002225
.text:00002225 loc_2225:                               ; CODE XREF: _winsock_error_string+1D5j
.text:00002225                 push    offset _errstring_find
.text:0000222A                 lea     edx, [ebp+dwMessageId]
.text:0000222D                 push    edx
.text:0000222E                 mov     eax, ds:_errstrings
.text:00002233                 push    eax
.text:00002234                 call    _find234
.text:00002239                 add     esp, 0Ch
.text:0000223C                 mov     [ebp+var_20], eax
.text:0000223F                 cmp     [ebp+var_20], 0
.text:00002243                 jnz     loc_2378
.text:00002249                 push    8
.text:0000224B                 push    1
.text:0000224D                 call    _safemalloc
.text:00002252                 add     esp, 8
.text:00002255                 mov     [ebp+var_20], eax
.text:00002258                 mov     ecx, [ebp+var_20]
.text:0000225B                 mov     edx, [ebp+dwMessageId]
.text:0000225E                 mov     [ecx], edx
.text:00002260                 mov     [ebp+var_24], 1000Fh
.text:00002267                 push    1
.text:00002269                 mov     eax, [ebp+var_24]
.text:0000226C                 push    eax
.text:0000226D                 call    _safemalloc
.text:00002272                 add     esp, 8
.text:00002275                 mov     ecx, [ebp+var_20]
.text:00002278                 mov     [ecx+4], eax
.text:0000227B                 lea     edx, [ebp+Source]
.text:0000227E                 push    edx             ; Source
.text:0000227F                 mov     eax, [ebp+var_20]
.text:00002282                 mov     ecx, [eax+4]
.text:00002285                 push    ecx             ; Dest
.text:00002286                 call    _strcpy
.text:0000228B                 add     esp, 8
.text:0000228E                 mov     edx, [ebp+var_20]
.text:00002291                 mov     eax, [edx+4]
.text:00002294                 push    eax             ; Str
.text:00002295                 call    _strlen
.text:0000229A                 add     esp, 4
.text:0000229D                 mov     [ebp+var_28], eax
.text:000022A0                 mov     esi, esp
.text:000022A2                 push    0               ; Arguments
.text:000022A4                 mov     ecx, [ebp+var_24]
.text:000022A7                 sub     ecx, [ebp+var_28]
.text:000022AA                 push    ecx             ; nSize
.text:000022AB                 mov     edx, [ebp+var_20]
.text:000022AE                 mov     eax, [edx+4]
.text:000022B1                 add     eax, [ebp+var_28]
.text:000022B4                 push    eax             ; lpBuffer
.text:000022B5                 push    400h            ; dwLanguageId
.text:000022BA                 mov     ecx, [ebp+dwMessageId]
.text:000022BD                 push    ecx             ; dwMessageId
.text:000022BE                 push    0               ; lpSource
.text:000022C0                 push    1200h           ; dwFlags
.text:000022C5                 call    dword ptr ds:__imp__FormatMessageA@28 ; FormatMessageA(x,x,x,x,x,x,x)
.text:000022CB                 cmp     esi, esp
.text:000022CD                 call    __RTC_CheckEsp
.text:000022D2                 test    eax, eax
.text:000022D4                 jnz     short loc_2303
.text:000022D6                 mov     esi, esp
.text:000022D8                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000022DE                 cmp     esi, esp
.text:000022E0                 call    __RTC_CheckEsp
.text:000022E5                 push    eax
.text:000022E6                 mov     edx, [ebp+dwMessageId]
.text:000022E9                 push    edx
.text:000022EA                 push    offset $SG86725 ; "Windows error code %d (and FormatMessag"...
.text:000022EF                 mov     eax, [ebp+var_20]
.text:000022F2                 mov     ecx, [eax+4]
.text:000022F5                 add     ecx, [ebp+var_28]
.text:000022F8                 push    ecx             ; Dest
.text:000022F9                 call    _sprintf
.text:000022FE                 add     esp, 10h
.text:00002301                 jmp     short loc_233C
.text:00002303 ; ---------------------------------------------------------------------------
.text:00002303
.text:00002303 loc_2303:                               ; CODE XREF: _winsock_error_string+298j
.text:00002303                 mov     edx, [ebp+var_20]
.text:00002306                 mov     eax, [edx+4]
.text:00002309                 push    eax             ; Str
.text:0000230A                 call    _strlen
.text:0000230F                 add     esp, 4
.text:00002312                 mov     [ebp+var_2C], eax
.text:00002315                 cmp     [ebp+var_2C], 0
.text:00002319                 jle     short loc_233C
.text:0000231B                 mov     ecx, [ebp+var_20]
.text:0000231E                 mov     edx, [ecx+4]
.text:00002321                 mov     eax, [ebp+var_2C]
.text:00002324                 movsx   ecx, byte ptr [edx+eax-1]
.text:00002329                 cmp     ecx, 0Ah
.text:0000232C                 jnz     short loc_233C
.text:0000232E                 mov     edx, [ebp+var_20]
.text:00002331                 mov     eax, [edx+4]
.text:00002334                 mov     ecx, [ebp+var_2C]
.text:00002337                 mov     byte ptr [ecx+eax-1], 0
.text:0000233C
.text:0000233C loc_233C:                               ; CODE XREF: _winsock_error_string+2C5j
.text:0000233C                                         ; _winsock_error_string+2DDj ...
.text:0000233C                 push    1
.text:0000233E                 mov     edx, [ebp+var_20]
.text:00002341                 mov     eax, [edx+4]
.text:00002344                 push    eax             ; Str
.text:00002345                 call    _strlen
.text:0000234A                 add     esp, 4
.text:0000234D                 add     eax, 1
.text:00002350                 push    eax
.text:00002351                 mov     ecx, [ebp+var_20]
.text:00002354                 mov     edx, [ecx+4]
.text:00002357                 push    edx
.text:00002358                 call    _saferealloc
.text:0000235D                 add     esp, 0Ch
.text:00002360                 mov     ecx, [ebp+var_20]
.text:00002363                 mov     [ecx+4], eax
.text:00002366                 mov     edx, [ebp+var_20]
.text:00002369                 push    edx
.text:0000236A                 mov     eax, ds:_errstrings
.text:0000236F                 push    eax
.text:00002370                 call    _add234
.text:00002375                 add     esp, 8
.text:00002378
.text:00002378 loc_2378:                               ; CODE XREF: _winsock_error_string+207j
.text:00002378                 mov     ecx, [ebp+var_20]
.text:0000237B                 mov     eax, [ecx+4]
.text:0000237E
.text:0000237E loc_237E:                               ; CODE XREF: _winsock_error_string+75j
.text:0000237E                                         ; _winsock_error_string+7Fj ...
.text:0000237E                 push    edx
.text:0000237F                 mov     ecx, ebp
.text:00002381                 push    eax
.text:00002382                 lea     edx, $LN48
.text:00002388                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000238D                 pop     eax
.text:0000238E                 pop     edx
.text:0000238F                 pop     edi
.text:00002390                 pop     esi
.text:00002391                 mov     ecx, [ebp+var_4]
.text:00002394                 xor     ecx, ebp
.text:00002396                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000239B                 add     esp, 30h
.text:0000239E                 cmp     ebp, esp
.text:000023A0                 call    __RTC_CheckEsp
.text:000023A5                 mov     esp, ebp
.text:000023A7                 pop     ebp
.text:000023A8                 retn
.text:000023A8 _winsock_error_string endp
.text:000023A8
.text:000023A8 ; ---------------------------------------------------------------------------
.text:000023A9                 align 4
.text:000023AC $LN48           dd 1                    ; DATA XREF: _winsock_error_string+346o
.text:000023B0                 dd offset $LN47
.text:000023B4 $LN47           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000023B0o
.text:000023BC                 dd offset $LN46         ; "prefix"
.text:000023C0 $LN46           db 'prefix',0           ; DATA XREF: .text:000023BCo
.text:000023C7                 align 4
.text:000023C8 $LN49           dd offset $LN27, offset $LN40, offset $LN31, offset $LN26
.text:000023C8                                         ; DATA XREF: _winsock_error_string+69r
.text:000023C8                 dd offset $LN24, offset $LN7, offset $LN28, offset $LN36 ; jump table for switch statement
.text:000023C8                 dd offset $LN16, offset $LN32, offset $LN23, offset $LN11
.text:000023C8                 dd offset $LN18, offset $LN12, offset $LN9, offset $LN15
.text:000023C8                 dd offset $LN14, offset $LN37, offset $LN39, offset $LN38
.text:000023C8                 dd offset $LN22, offset $LN20, offset $LN21, offset $LN35
.text:000023C8                 dd offset $LN33, offset $LN19, offset $LN25, offset $LN17
.text:000023C8                 dd offset $LN10, offset $LN8, offset $LN34, offset $LN30
.text:000023C8                 dd offset $LN29, offset $LN13, offset $LN6, offset $LN41
.text:00002458 $LN45           db      0,   23h,   23h,   23h
.text:00002458                                         ; DATA XREF: _winsock_error_string+62r
.text:00002458                 db    23h,   23h,   23h,   23h ; indirect table for switch statement
.text:00002458                 db    23h,     1,     2,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,     3,   23h
.text:00002458                 db      4,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,     5
.text:00002458                 db      6,     7,     8,     9
.text:00002458                 db    0Ah,   0Bh,   0Ch,   0Dh
.text:00002458                 db    0Eh,   0Fh,   10h,   11h
.text:00002458                 db    12h,   13h,   14h,   15h
.text:00002458                 db    16h,   17h,   18h,   19h
.text:00002458                 db    1Ah,   1Bh,   1Ch,   23h
.text:00002458                 db    1Dh,   1Eh,   23h,   23h
.text:00002458                 db    1Fh,   20h,   23h,   21h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   23h,   23h,   23h
.text:00002458                 db    23h,   22h
.text:000024BA                 align 4
.text:000024BC
.text:000024BC ; =============== S U B R O U T I N E =======================================
.text:000024BC
.text:000024BC ; Attributes: bp-based frame
.text:000024BC
.text:000024BC _errstring_find proc near               ; CODE XREF: _errstring_compare+19p
.text:000024BC                                         ; DATA XREF: _winsock_error_string:loc_2225o
.text:000024BC
.text:000024BC var_8           = dword ptr -8
.text:000024BC var_4           = dword ptr -4
.text:000024BC arg_0           = dword ptr  8
.text:000024BC arg_4           = dword ptr  0Ch
.text:000024BC
.text:000024BC                 push    ebp
.text:000024BD                 mov     ebp, esp
.text:000024BF                 sub     esp, 8
.text:000024C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000024C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024D0                 mov     eax, [ebp+arg_0]
.text:000024D3                 mov     [ebp+var_4], eax
.text:000024D6                 mov     ecx, [ebp+arg_4]
.text:000024D9                 mov     [ebp+var_8], ecx
.text:000024DC                 mov     edx, [ebp+var_4]
.text:000024DF                 mov     eax, [ebp+var_8]
.text:000024E2                 mov     ecx, [edx]
.text:000024E4                 cmp     ecx, [eax]
.text:000024E6                 jge     short loc_24ED
.text:000024E8                 or      eax, 0FFFFFFFFh
.text:000024EB                 jmp     short loc_2502
.text:000024ED ; ---------------------------------------------------------------------------
.text:000024ED
.text:000024ED loc_24ED:                               ; CODE XREF: _errstring_find+2Aj
.text:000024ED                 mov     edx, [ebp+var_4]
.text:000024F0                 mov     eax, [ebp+var_8]
.text:000024F3                 mov     ecx, [edx]
.text:000024F5                 cmp     ecx, [eax]
.text:000024F7                 jle     short loc_2500
.text:000024F9                 mov     eax, 1
.text:000024FE                 jmp     short loc_2502
.text:00002500 ; ---------------------------------------------------------------------------
.text:00002500
.text:00002500 loc_2500:                               ; CODE XREF: _errstring_find+3Bj
.text:00002500                 xor     eax, eax
.text:00002502
.text:00002502 loc_2502:                               ; CODE XREF: _errstring_find+2Fj
.text:00002502                                         ; _errstring_find+42j
.text:00002502                 mov     esp, ebp
.text:00002504                 pop     ebp
.text:00002505                 retn
.text:00002505 _errstring_find endp
.text:00002505
.text:00002505 ; ---------------------------------------------------------------------------
.text:00002506                 db 6 dup(0CCh)
.text:0000250C
.text:0000250C ; =============== S U B R O U T I N E =======================================
.text:0000250C
.text:0000250C ; Attributes: bp-based frame
.text:0000250C
.text:0000250C _errstring_compare proc near            ; DATA XREF: _winsock_error_string+1D7o
.text:0000250C
.text:0000250C var_4           = dword ptr -4
.text:0000250C arg_0           = dword ptr  8
.text:0000250C arg_4           = dword ptr  0Ch
.text:0000250C
.text:0000250C                 push    ebp
.text:0000250D                 mov     ebp, esp
.text:0000250F                 push    ecx
.text:00002510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002517                 mov     eax, [ebp+arg_0]
.text:0000251A                 mov     [ebp+var_4], eax
.text:0000251D                 mov     ecx, [ebp+arg_4]
.text:00002520                 push    ecx
.text:00002521                 mov     edx, [ebp+var_4]
.text:00002524                 push    edx
.text:00002525                 call    _errstring_find
.text:0000252A                 add     esp, 8
.text:0000252D                 add     esp, 4
.text:00002530                 cmp     ebp, esp
.text:00002532                 call    __RTC_CheckEsp
.text:00002537                 mov     esp, ebp
.text:00002539                 pop     ebp
.text:0000253A                 retn
.text:0000253A _errstring_compare endp
.text:0000253A
.text:0000253A ; ---------------------------------------------------------------------------
.text:0000253B                 align 4
.text:0000253C
.text:0000253C ; =============== S U B R O U T I N E =======================================
.text:0000253C
.text:0000253C ; Attributes: bp-based frame
.text:0000253C
.text:0000253C ; int __cdecl sk_namelookup(char *Source, int, int)
.text:0000253C                 public _sk_namelookup
.text:0000253C _sk_namelookup  proc near
.text:0000253C
.text:0000253C var_2070        = dword ptr -2070h
.text:0000253C var_206C        = dword ptr -206Ch
.text:0000253C var_2068        = dword ptr -2068h
.text:0000253C var_2064        = dword ptr -2064h
.text:0000253C var_2060        = dword ptr -2060h
.text:0000253C var_2059        = byte ptr -2059h
.text:0000253C var_2058        = dword ptr -2058h
.text:0000253C var_2054        = dword ptr -2054h
.text:0000253C var_204C        = dword ptr -204Ch
.text:0000253C var_2048        = dword ptr -2048h
.text:0000253C var_2028        = dword ptr -2028h
.text:0000253C var_2024        = dword ptr -2024h
.text:0000253C var_2020        = dword ptr -2020h
.text:0000253C Dest            = byte ptr -2018h
.text:0000253C var_19          = byte ptr -19h
.text:0000253C var_10          = dword ptr -10h
.text:0000253C Dst             = dword ptr -8
.text:0000253C var_4           = dword ptr -4
.text:0000253C Source          = dword ptr  8
.text:0000253C arg_4           = dword ptr  0Ch
.text:0000253C arg_8           = dword ptr  10h
.text:0000253C
.text:0000253C                 push    ebp
.text:0000253D                 mov     ebp, esp
.text:0000253F                 mov     eax, 2070h
.text:00002544                 call    __chkstk
.text:00002549                 push    esi
.text:0000254A                 push    edi
.text:0000254B                 lea     edi, [ebp+var_2070]
.text:00002551                 mov     ecx, 81Ch
.text:00002556                 mov     eax, 0CCCCCCCCh
.text:0000255B                 rep stosd
.text:0000255D                 mov     eax, dword ptr ds:___security_cookie
.text:00002562                 xor     eax, ebp
.text:00002564                 mov     [ebp+var_4], eax
.text:00002567                 push    21Ch
.text:0000256C                 push    1
.text:0000256E                 call    _safemalloc
.text:00002573                 add     esp, 8
.text:00002576                 mov     [ebp+Dst], eax
.text:00002579                 cmp     [ebp+arg_8], 1
.text:0000257D                 jnz     short loc_258B
.text:0000257F                 mov     [ebp+var_2060], 2
.text:00002589                 jmp     short loc_25A0
.text:0000258B ; ---------------------------------------------------------------------------
.text:0000258B
.text:0000258B loc_258B:                               ; CODE XREF: _sk_namelookup+41j
.text:0000258B                 xor     eax, eax
.text:0000258D                 cmp     [ebp+arg_8], 2
.text:00002591                 setnz   al
.text:00002594                 sub     eax, 1
.text:00002597                 and     eax, 17h
.text:0000259A                 mov     [ebp+var_2060], eax
.text:000025A0
.text:000025A0 loc_25A0:                               ; CODE XREF: _sk_namelookup+4Dj
.text:000025A0                 mov     ecx, [ebp+var_2060]
.text:000025A6                 mov     [ebp+var_2020], ecx
.text:000025AC                 push    21Ch            ; Size
.text:000025B1                 push    0               ; Val
.text:000025B3                 mov     edx, [ebp+Dst]
.text:000025B6                 push    edx             ; Dst
.text:000025B7                 call    _memset
.text:000025BC                 add     esp, 0Ch
.text:000025BF                 mov     eax, [ebp+Dst]
.text:000025C2                 mov     dword ptr [eax+10h], 0
.text:000025C9                 mov     ecx, [ebp+Dst]
.text:000025CC                 mov     dword ptr [ecx+0Ch], 0
.text:000025D3                 mov     edx, [ebp+Dst]
.text:000025D6                 mov     dword ptr [edx+14h], 0
.text:000025DD                 mov     eax, [ebp+Dst]
.text:000025E0                 mov     dword ptr [eax+8], 0
.text:000025E7                 mov     ecx, [ebp+Dst]
.text:000025EA                 mov     dword ptr [ecx], 1
.text:000025F0                 mov     [ebp+Dest], 0
.text:000025F7                 mov     esi, esp
.text:000025F9                 mov     edx, [ebp+Source]
.text:000025FC                 push    edx
.text:000025FD                 call    ds:_p_inet_addr
.text:00002603                 cmp     esi, esp
.text:00002605                 call    __RTC_CheckEsp
.text:0000260A                 mov     [ebp+var_10], eax
.text:0000260D                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00002611                 jnz     loc_29C8
.text:00002617                 mov     [ebp+var_2059], 0
.text:0000261E                 mov     [ebp+var_2024], 0
.text:00002628                 cmp     ds:_p_getaddrinfo, 0
.text:0000262F                 jz      loc_26DD
.text:00002635                 push    20h ; ' '       ; Size
.text:00002637                 push    0               ; Val
.text:00002639                 lea     eax, [ebp+var_204C]
.text:0000263F                 push    eax             ; Dst
.text:00002640                 call    _memset
.text:00002645                 add     esp, 0Ch
.text:00002648                 mov     ecx, [ebp+var_2020]
.text:0000264E                 mov     [ebp+var_2048], ecx
.text:00002654                 mov     [ebp+var_204C], 2
.text:0000265E                 mov     edx, [ebp+Source]
.text:00002661                 push    edx
.text:00002662                 call    _host_strduptrim
.text:00002667                 add     esp, 4
.text:0000266A                 mov     [ebp+var_2054], eax
.text:00002670                 mov     eax, [ebp+Dst]
.text:00002673                 add     eax, 10h
.text:00002676                 mov     esi, esp
.text:00002678                 push    eax
.text:00002679                 lea     ecx, [ebp+var_204C]
.text:0000267F                 push    ecx
.text:00002680                 push    0
.text:00002682                 mov     edx, [ebp+var_2054]
.text:00002688                 push    edx
.text:00002689                 call    ds:_p_getaddrinfo
.text:0000268F                 cmp     esi, esp
.text:00002691                 call    __RTC_CheckEsp
.text:00002696                 mov     [ebp+var_2059], 1
.text:0000269D                 mov     [ebp+var_2028], eax
.text:000026A3                 mov     eax, [ebp+var_2054]
.text:000026A9                 push    eax
.text:000026AA                 call    _safefree
.text:000026AF                 add     esp, 4
.text:000026B2                 cmp     [ebp+var_2059], 0
.text:000026B9                 jnz     short loc_26C8
.text:000026BB                 push    offset $LN34_0  ; "err"
.text:000026C0                 call    __RTC_UninitUse
.text:000026C5                 add     esp, 4
.text:000026C8
.text:000026C8 loc_26C8:                               ; CODE XREF: _sk_namelookup+17Dj
.text:000026C8                 cmp     [ebp+var_2028], 0
.text:000026CF                 jnz     short loc_26DB
.text:000026D1                 mov     ecx, [ebp+Dst]
.text:000026D4                 mov     dword ptr [ecx+8], 1
.text:000026DB
.text:000026DB loc_26DB:                               ; CODE XREF: _sk_namelookup+193j
.text:000026DB                 jmp     short loc_2727
.text:000026DD ; ---------------------------------------------------------------------------
.text:000026DD
.text:000026DD loc_26DD:                               ; CODE XREF: _sk_namelookup+F3j
.text:000026DD                 mov     esi, esp
.text:000026DF                 mov     edx, [ebp+Source]
.text:000026E2                 push    edx
.text:000026E3                 call    ds:_p_gethostbyname
.text:000026E9                 cmp     esi, esp
.text:000026EB                 call    __RTC_CheckEsp
.text:000026F0                 mov     [ebp+var_2024], eax
.text:000026F6                 cmp     [ebp+var_2024], 0
.text:000026FD                 jz      short loc_270B
.text:000026FF                 mov     eax, [ebp+Dst]
.text:00002702                 mov     dword ptr [eax+8], 1
.text:00002709                 jmp     short loc_2727
.text:0000270B ; ---------------------------------------------------------------------------
.text:0000270B
.text:0000270B loc_270B:                               ; CODE XREF: _sk_namelookup+1C1j
.text:0000270B                 mov     esi, esp
.text:0000270D                 call    dword ptr ds:_p_WSAGetLastError
.text:00002713                 cmp     esi, esp
.text:00002715                 call    __RTC_CheckEsp
.text:0000271A                 mov     [ebp+var_2059], 1
.text:00002721                 mov     [ebp+var_2028], eax
.text:00002727
.text:00002727 loc_2727:                               ; CODE XREF: _sk_namelookup:loc_26DBj
.text:00002727                                         ; _sk_namelookup+1CDj
.text:00002727                 mov     ecx, [ebp+Dst]
.text:0000272A                 cmp     dword ptr [ecx+8], 0
.text:0000272E                 jnz     loc_2849
.text:00002734                 cmp     [ebp+var_2059], 0
.text:0000273B                 jnz     short loc_274A
.text:0000273D                 push    offset $LN34_0  ; "err"
.text:00002742                 call    __RTC_UninitUse
.text:00002747                 add     esp, 4
.text:0000274A
.text:0000274A loc_274A:                               ; CODE XREF: _sk_namelookup+1FFj
.text:0000274A                 cmp     [ebp+var_2028], 2742h
.text:00002754                 jnz     short loc_2765
.text:00002756                 mov     [ebp+var_2064], offset $SG86762 ; "Network is down"
.text:00002760                 jmp     loc_2838
.text:00002765 ; ---------------------------------------------------------------------------
.text:00002765
.text:00002765 loc_2765:                               ; CODE XREF: _sk_namelookup+218j
.text:00002765                 cmp     [ebp+var_2059], 0
.text:0000276C                 jnz     short loc_277B
.text:0000276E                 push    offset $LN34_0  ; "err"
.text:00002773                 call    __RTC_UninitUse
.text:00002778                 add     esp, 4
.text:0000277B
.text:0000277B loc_277B:                               ; CODE XREF: _sk_namelookup+230j
.text:0000277B                 cmp     [ebp+var_2028], 2AF9h
.text:00002785                 jnz     short loc_2796
.text:00002787                 mov     [ebp+var_2068], offset $SG86763 ; "Host does not exist"
.text:00002791                 jmp     loc_282C
.text:00002796 ; ---------------------------------------------------------------------------
.text:00002796
.text:00002796 loc_2796:                               ; CODE XREF: _sk_namelookup+249j
.text:00002796                 cmp     [ebp+var_2059], 0
.text:0000279D                 jnz     short loc_27AC
.text:0000279F                 push    offset $LN34_0  ; "err"
.text:000027A4                 call    __RTC_UninitUse
.text:000027A9                 add     esp, 4
.text:000027AC
.text:000027AC loc_27AC:                               ; CODE XREF: _sk_namelookup+261j
.text:000027AC                 cmp     [ebp+var_2028], 2AFAh
.text:000027B6                 jnz     short loc_27C4
.text:000027B8                 mov     [ebp+var_206C], offset $SG86764 ; "Host not found"
.text:000027C2                 jmp     short loc_2820
.text:000027C4 ; ---------------------------------------------------------------------------
.text:000027C4
.text:000027C4 loc_27C4:                               ; CODE XREF: _sk_namelookup+27Aj
.text:000027C4                 cmp     ds:_p_getaddrinfo, 0
.text:000027CB                 jz      short loc_280A
.text:000027CD                 cmp     ds:_p_gai_strerror, 0
.text:000027D4                 jz      short loc_280A
.text:000027D6                 cmp     [ebp+var_2059], 0
.text:000027DD                 jnz     short loc_27EC
.text:000027DF                 push    offset $LN34_0  ; "err"
.text:000027E4                 call    __RTC_UninitUse
.text:000027E9                 add     esp, 4
.text:000027EC
.text:000027EC loc_27EC:                               ; CODE XREF: _sk_namelookup+2A1j
.text:000027EC                 mov     esi, esp
.text:000027EE                 mov     edx, [ebp+var_2028]
.text:000027F4                 push    edx
.text:000027F5                 call    ds:_p_gai_strerror
.text:000027FB                 cmp     esi, esp
.text:000027FD                 call    __RTC_CheckEsp
.text:00002802                 mov     [ebp+var_2070], eax
.text:00002808                 jmp     short loc_2814
.text:0000280A ; ---------------------------------------------------------------------------
.text:0000280A
.text:0000280A loc_280A:                               ; CODE XREF: _sk_namelookup+28Fj
.text:0000280A                                         ; _sk_namelookup+298j
.text:0000280A                 mov     [ebp+var_2070], offset $SG86765 ; "gethostbyname: unknown error"
.text:00002814
.text:00002814 loc_2814:                               ; CODE XREF: _sk_namelookup+2CCj
.text:00002814                 mov     eax, [ebp+var_2070]
.text:0000281A                 mov     [ebp+var_206C], eax
.text:00002820
.text:00002820 loc_2820:                               ; CODE XREF: _sk_namelookup+286j
.text:00002820                 mov     ecx, [ebp+var_206C]
.text:00002826                 mov     [ebp+var_2068], ecx
.text:0000282C
.text:0000282C loc_282C:                               ; CODE XREF: _sk_namelookup+255j
.text:0000282C                 mov     edx, [ebp+var_2068]
.text:00002832                 mov     [ebp+var_2064], edx
.text:00002838
.text:00002838 loc_2838:                               ; CODE XREF: _sk_namelookup+224j
.text:00002838                 mov     eax, [ebp+Dst]
.text:0000283B                 mov     ecx, [ebp+var_2064]
.text:00002841                 mov     [eax+4], ecx
.text:00002844                 jmp     loc_29C6
.text:00002849 ; ---------------------------------------------------------------------------
.text:00002849
.text:00002849 loc_2849:                               ; CODE XREF: _sk_namelookup+1F2j
.text:00002849                 mov     edx, [ebp+Dst]
.text:0000284C                 mov     dword ptr [edx+4], 0
.text:00002853                 mov     eax, [ebp+Dst]
.text:00002856                 cmp     dword ptr [eax+10h], 0
.text:0000285A                 jz      short loc_28CC
.text:0000285C                 mov     ecx, [ebp+Dst]
.text:0000285F                 mov     edx, [ecx+10h]
.text:00002862                 cmp     dword ptr [edx+4], 2
.text:00002866                 jnz     short loc_2883
.text:00002868                 push    4               ; Size
.text:0000286A                 mov     eax, [ebp+Dst]
.text:0000286D                 mov     ecx, [eax+10h]
.text:00002870                 mov     edx, [ecx+18h]
.text:00002873                 add     edx, 4
.text:00002876                 push    edx             ; Src
.text:00002877                 lea     eax, [ebp+var_10]
.text:0000287A                 push    eax             ; Dst
.text:0000287B                 call    _memcpy
.text:00002880                 add     esp, 0Ch
.text:00002883
.text:00002883 loc_2883:                               ; CODE XREF: _sk_namelookup+32Aj
.text:00002883                 mov     ecx, [ebp+Dst]
.text:00002886                 mov     edx, [ecx+10h]
.text:00002889                 cmp     dword ptr [edx+14h], 0
.text:0000288D                 jz      short loc_28AF
.text:0000288F                 push    2000h           ; Count
.text:00002894                 mov     eax, [ebp+Dst]
.text:00002897                 mov     ecx, [eax+10h]
.text:0000289A                 mov     edx, [ecx+14h]
.text:0000289D                 push    edx             ; Source
.text:0000289E                 lea     eax, [ebp+Dest]
.text:000028A4                 push    eax             ; Dest
.text:000028A5                 call    _strncpy
.text:000028AA                 add     esp, 0Ch
.text:000028AD                 jmp     short loc_28C7
.text:000028AF ; ---------------------------------------------------------------------------
.text:000028AF
.text:000028AF loc_28AF:                               ; CODE XREF: _sk_namelookup+351j
.text:000028AF                 push    2000h           ; Count
.text:000028B4                 mov     ecx, [ebp+Source]
.text:000028B7                 push    ecx             ; Source
.text:000028B8                 lea     edx, [ebp+Dest]
.text:000028BE                 push    edx             ; Dest
.text:000028BF                 call    _strncpy
.text:000028C4                 add     esp, 0Ch
.text:000028C7
.text:000028C7 loc_28C7:                               ; CODE XREF: _sk_namelookup+371j
.text:000028C7                 jmp     loc_29C6
.text:000028CC ; ---------------------------------------------------------------------------
.text:000028CC
.text:000028CC loc_28CC:                               ; CODE XREF: _sk_namelookup+31Ej
.text:000028CC                 mov     [ebp+var_2058], 0
.text:000028D6                 jmp     short loc_28E7
.text:000028D8 ; ---------------------------------------------------------------------------
.text:000028D8
.text:000028D8 loc_28D8:                               ; CODE XREF: _sk_namelookup+3C0j
.text:000028D8                 mov     eax, [ebp+var_2058]
.text:000028DE                 add     eax, 1
.text:000028E1                 mov     [ebp+var_2058], eax
.text:000028E7
.text:000028E7 loc_28E7:                               ; CODE XREF: _sk_namelookup+39Aj
.text:000028E7                 mov     ecx, [ebp+var_2024]
.text:000028ED                 mov     edx, [ecx+0Ch]
.text:000028F0                 mov     eax, [ebp+var_2058]
.text:000028F6                 cmp     dword ptr [edx+eax*4], 0
.text:000028FA                 jz      short loc_28FE
.text:000028FC                 jmp     short loc_28D8
.text:000028FE ; ---------------------------------------------------------------------------
.text:000028FE
.text:000028FE loc_28FE:                               ; CODE XREF: _sk_namelookup+3BEj
.text:000028FE                 push    4
.text:00002900                 mov     ecx, [ebp+var_2058]
.text:00002906                 push    ecx
.text:00002907                 call    _safemalloc
.text:0000290C                 add     esp, 8
.text:0000290F                 mov     edx, [ebp+Dst]
.text:00002912                 mov     [edx+14h], eax
.text:00002915                 mov     eax, [ebp+Dst]
.text:00002918                 mov     ecx, [ebp+var_2058]
.text:0000291E                 mov     [eax+18h], ecx
.text:00002921                 mov     [ebp+var_2058], 0
.text:0000292B                 jmp     short loc_293C
.text:0000292D ; ---------------------------------------------------------------------------
.text:0000292D
.text:0000292D loc_292D:                               ; CODE XREF: _sk_namelookup+451j
.text:0000292D                 mov     edx, [ebp+var_2058]
.text:00002933                 add     edx, 1
.text:00002936                 mov     [ebp+var_2058], edx
.text:0000293C
.text:0000293C loc_293C:                               ; CODE XREF: _sk_namelookup+3EFj
.text:0000293C                 mov     eax, [ebp+Dst]
.text:0000293F                 mov     ecx, [ebp+var_2058]
.text:00002945                 cmp     ecx, [eax+18h]
.text:00002948                 jge     short loc_298F
.text:0000294A                 push    4               ; Size
.text:0000294C                 mov     edx, [ebp+var_2024]
.text:00002952                 mov     eax, [edx+0Ch]
.text:00002955                 mov     ecx, [ebp+var_2058]
.text:0000295B                 mov     edx, [eax+ecx*4]
.text:0000295E                 push    edx             ; Src
.text:0000295F                 lea     eax, [ebp+var_10]
.text:00002962                 push    eax             ; Dst
.text:00002963                 call    _memcpy
.text:00002968                 add     esp, 0Ch
.text:0000296B                 mov     esi, esp
.text:0000296D                 mov     ecx, [ebp+var_10]
.text:00002970                 push    ecx
.text:00002971                 call    ds:_p_ntohl
.text:00002977                 cmp     esi, esp
.text:00002979                 call    __RTC_CheckEsp
.text:0000297E                 mov     edx, [ebp+Dst]
.text:00002981                 mov     ecx, [edx+14h]
.text:00002984                 mov     edx, [ebp+var_2058]
.text:0000298A                 mov     [ecx+edx*4], eax
.text:0000298D                 jmp     short loc_292D
.text:0000298F ; ---------------------------------------------------------------------------
.text:0000298F
.text:0000298F loc_298F:                               ; CODE XREF: _sk_namelookup+40Cj
.text:0000298F                 push    4               ; Size
.text:00002991                 mov     eax, [ebp+var_2024]
.text:00002997                 mov     ecx, [eax+0Ch]
.text:0000299A                 mov     edx, [ecx]
.text:0000299C                 push    edx             ; Src
.text:0000299D                 lea     eax, [ebp+var_10]
.text:000029A0                 push    eax             ; Dst
.text:000029A1                 call    _memcpy
.text:000029A6                 add     esp, 0Ch
.text:000029A9                 push    2000h           ; Count
.text:000029AE                 mov     ecx, [ebp+var_2024]
.text:000029B4                 mov     edx, [ecx]
.text:000029B6                 push    edx             ; Source
.text:000029B7                 lea     eax, [ebp+Dest]
.text:000029BD                 push    eax             ; Dest
.text:000029BE                 call    _strncpy
.text:000029C3                 add     esp, 0Ch
.text:000029C6
.text:000029C6 loc_29C6:                               ; CODE XREF: _sk_namelookup+308j
.text:000029C6                                         ; _sk_namelookup:loc_28C7j
.text:000029C6                 jmp     short loc_2A21
.text:000029C8 ; ---------------------------------------------------------------------------
.text:000029C8
.text:000029C8 loc_29C8:                               ; CODE XREF: _sk_namelookup+D5j
.text:000029C8                 push    4
.text:000029CA                 push    1
.text:000029CC                 call    _safemalloc
.text:000029D1                 add     esp, 8
.text:000029D4                 mov     ecx, [ebp+Dst]
.text:000029D7                 mov     [ecx+14h], eax
.text:000029DA                 mov     edx, [ebp+Dst]
.text:000029DD                 mov     dword ptr [edx+18h], 1
.text:000029E4                 mov     esi, esp
.text:000029E6                 mov     eax, [ebp+var_10]
.text:000029E9                 push    eax
.text:000029EA                 call    ds:_p_ntohl
.text:000029F0                 cmp     esi, esp
.text:000029F2                 call    __RTC_CheckEsp
.text:000029F7                 mov     ecx, [ebp+Dst]
.text:000029FA                 mov     edx, [ecx+14h]
.text:000029FD                 mov     [edx], eax
.text:000029FF                 mov     eax, [ebp+Dst]
.text:00002A02                 mov     dword ptr [eax+8], 1
.text:00002A09                 push    2000h           ; Count
.text:00002A0E                 mov     ecx, [ebp+Source]
.text:00002A11                 push    ecx             ; Source
.text:00002A12                 lea     edx, [ebp+Dest]
.text:00002A18                 push    edx             ; Dest
.text:00002A19                 call    _strncpy
.text:00002A1E                 add     esp, 0Ch
.text:00002A21
.text:00002A21 loc_2A21:                               ; CODE XREF: _sk_namelookup:loc_29C6j
.text:00002A21                 mov     [ebp+var_19], 0
.text:00002A25                 push    1
.text:00002A27                 lea     eax, [ebp+Dest]
.text:00002A2D                 push    eax             ; Str
.text:00002A2E                 call    _strlen
.text:00002A33                 add     esp, 4
.text:00002A36                 add     eax, 1
.text:00002A39                 push    eax
.text:00002A3A                 call    _safemalloc
.text:00002A3F                 add     esp, 8
.text:00002A42                 mov     ecx, [ebp+arg_4]
.text:00002A45                 mov     [ecx], eax
.text:00002A47                 lea     edx, [ebp+Dest]
.text:00002A4D                 push    edx             ; Source
.text:00002A4E                 mov     eax, [ebp+arg_4]
.text:00002A51                 mov     ecx, [eax]
.text:00002A53                 push    ecx             ; Dest
.text:00002A54                 call    _strcpy
.text:00002A59                 add     esp, 8
.text:00002A5C                 mov     eax, [ebp+Dst]
.text:00002A5F                 push    edx
.text:00002A60                 mov     ecx, ebp
.text:00002A62                 push    eax
.text:00002A63                 lea     edx, $LN43
.text:00002A69                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002A6E                 pop     eax
.text:00002A6F                 pop     edx
.text:00002A70                 pop     edi
.text:00002A71                 pop     esi
.text:00002A72                 mov     ecx, [ebp+var_4]
.text:00002A75                 xor     ecx, ebp
.text:00002A77                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002A7C                 add     esp, 2070h
.text:00002A82                 cmp     ebp, esp
.text:00002A84                 call    __RTC_CheckEsp
.text:00002A89                 mov     esp, ebp
.text:00002A8B                 pop     ebp
.text:00002A8C                 retn
.text:00002A8C _sk_namelookup  endp
.text:00002A8C
.text:00002A8C ; ---------------------------------------------------------------------------
.text:00002A8D                 align 10h
.text:00002A90 $LN43           dd 3                    ; DATA XREF: _sk_namelookup+527o
.text:00002A94                 dd offset $LN42
.text:00002A98 $LN42           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00002A94o
.text:00002AA0                 dd offset $LN39_0       ; "a"
.text:00002AA4                 dd 0FFFFDFE8h, 2000h
.text:00002AAC                 dd offset $LN40_0       ; "realhost"
.text:00002AB0                 dd 0FFFFDFB4h, 20h
.text:00002AB8                 dd offset $LN41_0       ; "hints"
.text:00002ABC $LN41_0         db 'hints',0            ; DATA XREF: .text:00002AB8o
.text:00002AC2 $LN40_0         db 'realhost',0         ; DATA XREF: .text:00002AACo
.text:00002ACB $LN39_0         db 'a',0                ; DATA XREF: .text:00002AA0o
.text:00002ACD $LN34_0         db 'err',0              ; DATA XREF: _sk_namelookup+17Fo
.text:00002ACD                                         ; _sk_namelookup+201o ...
.text:00002AD1                 db 0Bh dup(0CCh)
.text:00002ADC
.text:00002ADC ; =============== S U B R O U T I N E =======================================
.text:00002ADC
.text:00002ADC ; Attributes: bp-based frame
.text:00002ADC
.text:00002ADC ; int __cdecl sk_nonamelookup(char *Source)
.text:00002ADC                 public _sk_nonamelookup
.text:00002ADC _sk_nonamelookup proc near
.text:00002ADC
.text:00002ADC var_4           = dword ptr -4
.text:00002ADC Source          = dword ptr  8
.text:00002ADC
.text:00002ADC                 push    ebp
.text:00002ADD                 mov     ebp, esp
.text:00002ADF                 push    ecx
.text:00002AE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AE7                 push    21Ch
.text:00002AEC                 push    1
.text:00002AEE                 call    _safemalloc
.text:00002AF3                 add     esp, 8
.text:00002AF6                 mov     [ebp+var_4], eax
.text:00002AF9                 mov     eax, [ebp+var_4]
.text:00002AFC                 mov     dword ptr [eax+4], 0
.text:00002B03                 mov     ecx, [ebp+var_4]
.text:00002B06                 mov     dword ptr [ecx+8], 0
.text:00002B0D                 mov     edx, [ebp+var_4]
.text:00002B10                 mov     dword ptr [edx+10h], 0
.text:00002B17                 mov     eax, [ebp+var_4]
.text:00002B1A                 mov     dword ptr [eax+0Ch], 0
.text:00002B21                 mov     ecx, [ebp+var_4]
.text:00002B24                 mov     dword ptr [ecx+14h], 0
.text:00002B2B                 mov     edx, [ebp+var_4]
.text:00002B2E                 mov     dword ptr [edx+18h], 0
.text:00002B35                 mov     eax, [ebp+var_4]
.text:00002B38                 mov     dword ptr [eax], 1
.text:00002B3E                 push    200h            ; Count
.text:00002B43                 mov     ecx, [ebp+Source]
.text:00002B46                 push    ecx             ; Source
.text:00002B47                 mov     edx, [ebp+var_4]
.text:00002B4A                 add     edx, 1Ch
.text:00002B4D                 push    edx             ; Dest
.text:00002B4E                 call    _strncpy
.text:00002B53                 add     esp, 0Ch
.text:00002B56                 mov     eax, [ebp+var_4]
.text:00002B59                 mov     byte ptr [eax+21Bh], 0
.text:00002B60                 mov     eax, [ebp+var_4]
.text:00002B63                 add     esp, 4
.text:00002B66                 cmp     ebp, esp
.text:00002B68                 call    __RTC_CheckEsp
.text:00002B6D                 mov     esp, ebp
.text:00002B6F                 pop     ebp
.text:00002B70                 retn
.text:00002B70 _sk_nonamelookup endp
.text:00002B70
.text:00002B70 ; ---------------------------------------------------------------------------
.text:00002B71                 db 0Bh dup(0CCh)
.text:00002B7C
.text:00002B7C ; =============== S U B R O U T I N E =======================================
.text:00002B7C
.text:00002B7C ; Attributes: bp-based frame
.text:00002B7C
.text:00002B7C ; int __cdecl sk_namedpipe_addr(char *Source)
.text:00002B7C                 public _sk_namedpipe_addr
.text:00002B7C _sk_namedpipe_addr proc near
.text:00002B7C
.text:00002B7C var_4           = dword ptr -4
.text:00002B7C Source          = dword ptr  8
.text:00002B7C
.text:00002B7C                 push    ebp
.text:00002B7D                 mov     ebp, esp
.text:00002B7F                 push    ecx
.text:00002B80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B87                 push    21Ch
.text:00002B8C                 push    1
.text:00002B8E                 call    _safemalloc
.text:00002B93                 add     esp, 8
.text:00002B96                 mov     [ebp+var_4], eax
.text:00002B99                 mov     eax, [ebp+var_4]
.text:00002B9C                 mov     dword ptr [eax+4], 0
.text:00002BA3                 mov     ecx, [ebp+var_4]
.text:00002BA6                 mov     dword ptr [ecx+8], 0
.text:00002BAD                 mov     edx, [ebp+var_4]
.text:00002BB0                 mov     dword ptr [edx+10h], 0
.text:00002BB7                 mov     eax, [ebp+var_4]
.text:00002BBA                 mov     dword ptr [eax+0Ch], 1
.text:00002BC1                 mov     ecx, [ebp+var_4]
.text:00002BC4                 mov     dword ptr [ecx+14h], 0
.text:00002BCB                 mov     edx, [ebp+var_4]
.text:00002BCE                 mov     dword ptr [edx+18h], 0
.text:00002BD5                 mov     eax, [ebp+var_4]
.text:00002BD8                 mov     dword ptr [eax], 1
.text:00002BDE                 push    200h            ; Count
.text:00002BE3                 mov     ecx, [ebp+Source]
.text:00002BE6                 push    ecx             ; Source
.text:00002BE7                 mov     edx, [ebp+var_4]
.text:00002BEA                 add     edx, 1Ch
.text:00002BED                 push    edx             ; Dest
.text:00002BEE                 call    _strncpy
.text:00002BF3                 add     esp, 0Ch
.text:00002BF6                 mov     eax, [ebp+var_4]
.text:00002BF9                 mov     byte ptr [eax+21Bh], 0
.text:00002C00                 mov     eax, [ebp+var_4]
.text:00002C03                 add     esp, 4
.text:00002C06                 cmp     ebp, esp
.text:00002C08                 call    __RTC_CheckEsp
.text:00002C0D                 mov     esp, ebp
.text:00002C0F                 pop     ebp
.text:00002C10                 retn
.text:00002C10 _sk_namedpipe_addr endp
.text:00002C10
.text:00002C10 ; ---------------------------------------------------------------------------
.text:00002C11                 db 0Bh dup(0CCh)
.text:00002C1C
.text:00002C1C ; =============== S U B R O U T I N E =======================================
.text:00002C1C
.text:00002C1C ; Attributes: bp-based frame
.text:00002C1C
.text:00002C1C                 public _sk_nextaddr
.text:00002C1C _sk_nextaddr    proc near               ; CODE XREF: _sk_new+135p
.text:00002C1C                                         ; _select_result+104p
.text:00002C1C
.text:00002C1C arg_0           = dword ptr  8
.text:00002C1C arg_4           = dword ptr  0Ch
.text:00002C1C
.text:00002C1C                 push    ebp
.text:00002C1D                 mov     ebp, esp
.text:00002C1F                 mov     eax, [ebp+arg_4]
.text:00002C22                 cmp     dword ptr [eax], 0
.text:00002C25                 jz      short loc_2C4C
.text:00002C27                 mov     ecx, [ebp+arg_4]
.text:00002C2A                 mov     edx, [ecx]
.text:00002C2C                 cmp     dword ptr [edx+1Ch], 0
.text:00002C30                 jz      short loc_2C48
.text:00002C32                 mov     eax, [ebp+arg_4]
.text:00002C35                 mov     ecx, [eax]
.text:00002C37                 mov     edx, [ebp+arg_4]
.text:00002C3A                 mov     eax, [ecx+1Ch]
.text:00002C3D                 mov     [edx], eax
.text:00002C3F                 mov     eax, 1
.text:00002C44                 jmp     short loc_2C77
.text:00002C46 ; ---------------------------------------------------------------------------
.text:00002C46                 jmp     short loc_2C4C
.text:00002C48 ; ---------------------------------------------------------------------------
.text:00002C48
.text:00002C48 loc_2C48:                               ; CODE XREF: _sk_nextaddr+14j
.text:00002C48                 xor     eax, eax
.text:00002C4A                 jmp     short loc_2C77
.text:00002C4C ; ---------------------------------------------------------------------------
.text:00002C4C
.text:00002C4C loc_2C4C:                               ; CODE XREF: _sk_nextaddr+9j
.text:00002C4C                                         ; _sk_nextaddr+2Aj
.text:00002C4C                 mov     ecx, [ebp+arg_4]
.text:00002C4F                 mov     edx, [ecx+4]
.text:00002C52                 add     edx, 1
.text:00002C55                 mov     eax, [ebp+arg_0]
.text:00002C58                 cmp     edx, [eax+18h]
.text:00002C5B                 jge     short loc_2C75
.text:00002C5D                 mov     ecx, [ebp+arg_4]
.text:00002C60                 mov     edx, [ecx+4]
.text:00002C63                 add     edx, 1
.text:00002C66                 mov     eax, [ebp+arg_4]
.text:00002C69                 mov     [eax+4], edx
.text:00002C6C                 mov     eax, 1
.text:00002C71                 jmp     short loc_2C77
.text:00002C73 ; ---------------------------------------------------------------------------
.text:00002C73                 jmp     short loc_2C77
.text:00002C75 ; ---------------------------------------------------------------------------
.text:00002C75
.text:00002C75 loc_2C75:                               ; CODE XREF: _sk_nextaddr+3Fj
.text:00002C75                 xor     eax, eax
.text:00002C77
.text:00002C77 loc_2C77:                               ; CODE XREF: _sk_nextaddr+28j
.text:00002C77                                         ; _sk_nextaddr+2Ej ...
.text:00002C77                 pop     ebp
.text:00002C78                 retn
.text:00002C78 _sk_nextaddr    endp
.text:00002C78
.text:00002C78 ; ---------------------------------------------------------------------------
.text:00002C79                 align 4
.text:00002C7C
.text:00002C7C ; =============== S U B R O U T I N E =======================================
.text:00002C7C
.text:00002C7C ; Attributes: bp-based frame
.text:00002C7C
.text:00002C7C ; int __cdecl sk_getaddr(int, char *Dest, size_t Count)
.text:00002C7C                 public _sk_getaddr
.text:00002C7C _sk_getaddr     proc near
.text:00002C7C
.text:00002C7C var_34          = dword ptr -34h
.text:00002C7C var_30          = dword ptr -30h
.text:00002C7C var_28          = dword ptr -28h
.text:00002C7C var_1C          = dword ptr -1Ch
.text:00002C7C var_14          = dword ptr -14h
.text:00002C7C var_C           = dword ptr -0Ch
.text:00002C7C var_8           = dword ptr -8
.text:00002C7C arg_0           = dword ptr  8
.text:00002C7C Dest            = dword ptr  0Ch
.text:00002C7C Count           = dword ptr  10h
.text:00002C7C
.text:00002C7C                 push    ebp
.text:00002C7D                 mov     ebp, esp
.text:00002C7F                 sub     esp, 34h
.text:00002C82                 push    esi
.text:00002C83                 push    edi
.text:00002C84                 lea     edi, [ebp+var_34]
.text:00002C87                 mov     ecx, 0Dh
.text:00002C8C                 mov     eax, 0CCCCCCCCh
.text:00002C91                 rep stosd
.text:00002C93                 mov     eax, [ebp+arg_0]
.text:00002C96                 mov     ecx, [eax+10h]
.text:00002C99                 mov     [ebp+var_C], ecx
.text:00002C9C                 mov     [ebp+var_8], 0
.text:00002CA3                 cmp     [ebp+var_C], 0
.text:00002CA7                 jz      loc_2D41
.text:00002CAD                 mov     [ebp+var_14], 0
.text:00002CB4                 cmp     ds:_p_WSAAddressToStringA, 0
.text:00002CBB                 jz      short loc_2CEF
.text:00002CBD                 mov     edx, [ebp+Count]
.text:00002CC0                 mov     [ebp+var_1C], edx
.text:00002CC3                 mov     esi, esp
.text:00002CC5                 lea     eax, [ebp+var_1C]
.text:00002CC8                 push    eax
.text:00002CC9                 mov     ecx, [ebp+Dest]
.text:00002CCC                 push    ecx
.text:00002CCD                 push    0
.text:00002CCF                 mov     edx, [ebp+var_C]
.text:00002CD2                 mov     eax, [edx+10h]
.text:00002CD5                 push    eax
.text:00002CD6                 mov     ecx, [ebp+var_C]
.text:00002CD9                 mov     edx, [ecx+18h]
.text:00002CDC                 push    edx
.text:00002CDD                 call    ds:_p_WSAAddressToStringA
.text:00002CE3                 cmp     esi, esp
.text:00002CE5                 call    __RTC_CheckEsp
.text:00002CEA                 mov     [ebp+var_14], eax
.text:00002CED                 jmp     short loc_2CF6
.text:00002CEF ; ---------------------------------------------------------------------------
.text:00002CEF
.text:00002CEF loc_2CEF:                               ; CODE XREF: _sk_getaddr+3Fj
.text:00002CEF                 mov     [ebp+var_14], 0FFFFFFFFh
.text:00002CF6
.text:00002CF6 loc_2CF6:                               ; CODE XREF: _sk_getaddr+71j
.text:00002CF6                 cmp     [ebp+var_14], 0
.text:00002CFA                 jz      short loc_2D3C
.text:00002CFC                 mov     eax, [ebp+Count]
.text:00002CFF                 push    eax             ; Count
.text:00002D00                 mov     ecx, [ebp+arg_0]
.text:00002D03                 add     ecx, 1Ch
.text:00002D06                 push    ecx             ; Source
.text:00002D07                 mov     edx, [ebp+Dest]
.text:00002D0A                 push    edx             ; Dest
.text:00002D0B                 call    _strncpy
.text:00002D10                 add     esp, 0Ch
.text:00002D13                 mov     eax, [ebp+Dest]
.text:00002D16                 movsx   ecx, byte ptr [eax]
.text:00002D19                 test    ecx, ecx
.text:00002D1B                 jnz     short loc_2D32
.text:00002D1D                 mov     edx, [ebp+Count]
.text:00002D20                 push    edx             ; Count
.text:00002D21                 push    offset $SG86835 ; "<unknown>"
.text:00002D26                 mov     eax, [ebp+Dest]
.text:00002D29                 push    eax             ; Dest
.text:00002D2A                 call    _strncpy
.text:00002D2F                 add     esp, 0Ch
.text:00002D32
.text:00002D32 loc_2D32:                               ; CODE XREF: _sk_getaddr+9Fj
.text:00002D32                 mov     ecx, [ebp+Dest]
.text:00002D35                 add     ecx, [ebp+Count]
.text:00002D38                 mov     byte ptr [ecx-1], 0
.text:00002D3C
.text:00002D3C loc_2D3C:                               ; CODE XREF: _sk_getaddr+7Ej
.text:00002D3C                 jmp     loc_2E12
.text:00002D41 ; ---------------------------------------------------------------------------
.text:00002D41
.text:00002D41 loc_2D41:                               ; CODE XREF: _sk_getaddr+2Bj
.text:00002D41                 mov     edx, [ebp+arg_0]
.text:00002D44                 cmp     dword ptr [edx+8], 0
.text:00002D48                 jnz     short loc_2D53
.text:00002D4A                 mov     [ebp+var_30], 0
.text:00002D51                 jmp     short loc_2D71
.text:00002D53 ; ---------------------------------------------------------------------------
.text:00002D53
.text:00002D53 loc_2D53:                               ; CODE XREF: _sk_getaddr+CCj
.text:00002D53                 cmp     [ebp+var_C], 0
.text:00002D57                 jz      short loc_2D64
.text:00002D59                 mov     eax, [ebp+var_C]
.text:00002D5C                 mov     ecx, [eax+4]
.text:00002D5F                 mov     [ebp+var_34], ecx
.text:00002D62                 jmp     short loc_2D6B
.text:00002D64 ; ---------------------------------------------------------------------------
.text:00002D64
.text:00002D64 loc_2D64:                               ; CODE XREF: _sk_getaddr+DBj
.text:00002D64                 mov     [ebp+var_34], 2
.text:00002D6B
.text:00002D6B loc_2D6B:                               ; CODE XREF: _sk_getaddr+E6j
.text:00002D6B                 mov     edx, [ebp+var_34]
.text:00002D6E                 mov     [ebp+var_30], edx
.text:00002D71
.text:00002D71 loc_2D71:                               ; CODE XREF: _sk_getaddr+D5j
.text:00002D71                 cmp     [ebp+var_30], 2
.text:00002D75                 jnz     short loc_2DF1
.text:00002D77                 mov     eax, [ebp+arg_0]
.text:00002D7A                 cmp     dword ptr [eax+14h], 0
.text:00002D7E                 jz      short loc_2D8B
.text:00002D80                 mov     ecx, [ebp+arg_0]
.text:00002D83                 mov     edx, [ebp+var_8]
.text:00002D86                 cmp     edx, [ecx+18h]
.text:00002D89                 jl      short loc_2DA2
.text:00002D8B
.text:00002D8B loc_2D8B:                               ; CODE XREF: _sk_getaddr+102j
.text:00002D8B                 push    2B3h            ; Line
.text:00002D90                 push    offset $SG86840 ; "..\\..\\winnet.c"
.text:00002D95                 push    offset $SG86841 ; "addr->addresses && step.curraddr < addr"...
.text:00002D9A                 call    __wassert
.text:00002D9F ; ---------------------------------------------------------------------------
.text:00002D9F                 add     esp, 0Ch
.text:00002DA2
.text:00002DA2 loc_2DA2:                               ; CODE XREF: _sk_getaddr+10Dj
.text:00002DA2                 mov     ecx, [ebp+arg_0]
.text:00002DA5                 mov     edx, [ecx+14h]
.text:00002DA8                 mov     esi, esp
.text:00002DAA                 mov     eax, [ebp+var_8]
.text:00002DAD                 mov     ecx, [edx+eax*4]
.text:00002DB0                 push    ecx             ; Count
.text:00002DB1                 call    ds:_p_htonl
.text:00002DB7                 cmp     esi, esp
.text:00002DB9                 call    __RTC_CheckEsp
.text:00002DBE                 mov     [ebp+var_28], eax
.text:00002DC1                 mov     edx, [ebp+Count]
.text:00002DC4                 push    edx
.text:00002DC5                 mov     esi, esp
.text:00002DC7                 mov     eax, [ebp+var_28]
.text:00002DCA                 push    eax
.text:00002DCB                 call    ds:_p_inet_ntoa
.text:00002DD1                 cmp     esi, esp
.text:00002DD3                 call    __RTC_CheckEsp
.text:00002DD8                 push    eax             ; Source
.text:00002DD9                 mov     ecx, [ebp+Dest]
.text:00002DDC                 push    ecx             ; Dest
.text:00002DDD                 call    _strncpy
.text:00002DE2                 add     esp, 0Ch
.text:00002DE5                 mov     edx, [ebp+Dest]
.text:00002DE8                 add     edx, [ebp+Count]
.text:00002DEB                 mov     byte ptr [edx-1], 0
.text:00002DEF                 jmp     short loc_2E12
.text:00002DF1 ; ---------------------------------------------------------------------------
.text:00002DF1
.text:00002DF1 loc_2DF1:                               ; CODE XREF: _sk_getaddr+F9j
.text:00002DF1                 mov     eax, [ebp+Count]
.text:00002DF4                 push    eax             ; Count
.text:00002DF5                 mov     ecx, [ebp+arg_0]
.text:00002DF8                 add     ecx, 1Ch
.text:00002DFB                 push    ecx             ; Source
.text:00002DFC                 mov     edx, [ebp+Dest]
.text:00002DFF                 push    edx             ; Dest
.text:00002E00                 call    _strncpy
.text:00002E05                 add     esp, 0Ch
.text:00002E08                 mov     eax, [ebp+Dest]
.text:00002E0B                 add     eax, [ebp+Count]
.text:00002E0E                 mov     byte ptr [eax-1], 0
.text:00002E12
.text:00002E12 loc_2E12:                               ; CODE XREF: _sk_getaddr:loc_2D3Cj
.text:00002E12                                         ; _sk_getaddr+173j
.text:00002E12                 push    edx
.text:00002E13                 mov     ecx, ebp
.text:00002E15                 push    eax
.text:00002E16                 lea     edx, $LN21_0
.text:00002E1C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002E21                 pop     eax
.text:00002E22                 pop     edx
.text:00002E23                 pop     edi
.text:00002E24                 pop     esi
.text:00002E25                 add     esp, 34h
.text:00002E28                 cmp     ebp, esp
.text:00002E2A                 call    __RTC_CheckEsp
.text:00002E2F                 mov     esp, ebp
.text:00002E31                 pop     ebp
.text:00002E32                 retn
.text:00002E32 _sk_getaddr     endp
.text:00002E32
.text:00002E32 ; ---------------------------------------------------------------------------
.text:00002E33                 align 4
.text:00002E34 $LN21_0         dd 3                    ; DATA XREF: _sk_getaddr+19Ao
.text:00002E38                 dd offset $LN20_0
.text:00002E3C $LN20_0         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00002E38o
.text:00002E44                 dd offset $LN17_0       ; "step"
.text:00002E48                 dd 0FFFFFFE4h, 4
.text:00002E50                 dd offset $LN18_0       ; "dwbuflen"
.text:00002E54                 dd 0FFFFFFD8h, 4
.text:00002E5C                 dd offset $LN19_0
.text:00002E60 $LN19_0         db 61h, 0               ; DATA XREF: .text:00002E5Co
.text:00002E62 $LN18_0         db 'dwbuflen',0         ; DATA XREF: .text:00002E50o
.text:00002E6B $LN17_0         db 'step',0             ; DATA XREF: .text:00002E44o
.text:00002E70                 db 0Ch dup(0CCh)
.text:00002E7C
.text:00002E7C ; =============== S U B R O U T I N E =======================================
.text:00002E7C
.text:00002E7C ; Attributes: bp-based frame
.text:00002E7C
.text:00002E7C                 public _sk_addr_needs_port
.text:00002E7C _sk_addr_needs_port proc near
.text:00002E7C
.text:00002E7C arg_0           = dword ptr  8
.text:00002E7C
.text:00002E7C                 push    ebp
.text:00002E7D                 mov     ebp, esp
.text:00002E7F                 mov     eax, [ebp+arg_0]
.text:00002E82                 xor     ecx, ecx
.text:00002E84                 cmp     dword ptr [eax+0Ch], 0
.text:00002E88                 setz    cl
.text:00002E8B                 mov     eax, ecx
.text:00002E8D                 pop     ebp
.text:00002E8E                 retn
.text:00002E8E _sk_addr_needs_port endp
.text:00002E8E
.text:00002E8E ; ---------------------------------------------------------------------------
.text:00002E8F                 db 0Dh dup(0CCh)
.text:00002E9C
.text:00002E9C ; =============== S U B R O U T I N E =======================================
.text:00002E9C
.text:00002E9C ; Attributes: bp-based frame
.text:00002E9C
.text:00002E9C ; int __cdecl sk_hostname_is_local(char *Str1)
.text:00002E9C                 public _sk_hostname_is_local
.text:00002E9C _sk_hostname_is_local proc near
.text:00002E9C
.text:00002E9C var_4           = dword ptr -4
.text:00002E9C Str1            = dword ptr  8
.text:00002E9C
.text:00002E9C                 push    ebp
.text:00002E9D                 mov     ebp, esp
.text:00002E9F                 push    ecx
.text:00002EA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EA7                 push    offset $SG86849 ; "localhost"
.text:00002EAC                 mov     eax, [ebp+Str1]
.text:00002EAF                 push    eax             ; Str1
.text:00002EB0                 call    _strcmp
.text:00002EB5                 add     esp, 8
.text:00002EB8                 test    eax, eax
.text:00002EBA                 jz      short loc_2EF1
.text:00002EBC                 push    offset $SG86850 ; "::1"
.text:00002EC1                 mov     ecx, [ebp+Str1]
.text:00002EC4                 push    ecx             ; Str1
.text:00002EC5                 call    _strcmp
.text:00002ECA                 add     esp, 8
.text:00002ECD                 test    eax, eax
.text:00002ECF                 jz      short loc_2EF1
.text:00002ED1                 push    4               ; MaxCount
.text:00002ED3                 push    offset $SG86851 ; "127."
.text:00002ED8                 mov     edx, [ebp+Str1]
.text:00002EDB                 push    edx             ; Str1
.text:00002EDC                 call    _strncmp
.text:00002EE1                 add     esp, 0Ch
.text:00002EE4                 test    eax, eax
.text:00002EE6                 jz      short loc_2EF1
.text:00002EE8                 mov     [ebp+var_4], 0
.text:00002EEF                 jmp     short loc_2EF8
.text:00002EF1 ; ---------------------------------------------------------------------------
.text:00002EF1
.text:00002EF1 loc_2EF1:                               ; CODE XREF: _sk_hostname_is_local+1Ej
.text:00002EF1                                         ; _sk_hostname_is_local+33j ...
.text:00002EF1                 mov     [ebp+var_4], 1
.text:00002EF8
.text:00002EF8 loc_2EF8:                               ; CODE XREF: _sk_hostname_is_local+53j
.text:00002EF8                 mov     eax, [ebp+var_4]
.text:00002EFB                 add     esp, 4
.text:00002EFE                 cmp     ebp, esp
.text:00002F00                 call    __RTC_CheckEsp
.text:00002F05                 mov     esp, ebp
.text:00002F07                 pop     ebp
.text:00002F08                 retn
.text:00002F08 _sk_hostname_is_local endp
.text:00002F08
.text:00002F08 ; ---------------------------------------------------------------------------
.text:00002F09                 align 4
.text:00002F0C
.text:00002F0C ; =============== S U B R O U T I N E =======================================
.text:00002F0C
.text:00002F0C ; Attributes: bp-based frame
.text:00002F0C
.text:00002F0C                 public _sk_address_is_local
.text:00002F0C _sk_address_is_local proc near
.text:00002F0C
.text:00002F0C var_28          = dword ptr -28h
.text:00002F0C var_24          = dword ptr -24h
.text:00002F0C var_1C          = dword ptr -1Ch
.text:00002F0C var_14          = dword ptr -14h
.text:00002F0C var_C           = dword ptr -0Ch
.text:00002F0C var_8           = dword ptr -8
.text:00002F0C arg_0           = dword ptr  8
.text:00002F0C
.text:00002F0C                 push    ebp
.text:00002F0D                 mov     ebp, esp
.text:00002F0F                 sub     esp, 28h
.text:00002F12                 push    esi
.text:00002F13                 push    edi
.text:00002F14                 lea     edi, [ebp+var_28]
.text:00002F17                 mov     ecx, 0Ah
.text:00002F1C                 mov     eax, 0CCCCCCCCh
.text:00002F21                 rep stosd
.text:00002F23                 mov     eax, [ebp+arg_0]
.text:00002F26                 mov     ecx, [eax+10h]
.text:00002F29                 mov     [ebp+var_C], ecx
.text:00002F2C                 mov     [ebp+var_8], 0
.text:00002F33                 mov     edx, [ebp+arg_0]
.text:00002F36                 cmp     dword ptr [edx+8], 0
.text:00002F3A                 jnz     short loc_2F45
.text:00002F3C                 mov     [ebp+var_24], 0
.text:00002F43                 jmp     short loc_2F63
.text:00002F45 ; ---------------------------------------------------------------------------
.text:00002F45
.text:00002F45 loc_2F45:                               ; CODE XREF: _sk_address_is_local+2Ej
.text:00002F45                 cmp     [ebp+var_C], 0
.text:00002F49                 jz      short loc_2F56
.text:00002F4B                 mov     eax, [ebp+var_C]
.text:00002F4E                 mov     ecx, [eax+4]
.text:00002F51                 mov     [ebp+var_28], ecx
.text:00002F54                 jmp     short loc_2F5D
.text:00002F56 ; ---------------------------------------------------------------------------
.text:00002F56
.text:00002F56 loc_2F56:                               ; CODE XREF: _sk_address_is_local+3Dj
.text:00002F56                 mov     [ebp+var_28], 2
.text:00002F5D
.text:00002F5D loc_2F5D:                               ; CODE XREF: _sk_address_is_local+48j
.text:00002F5D                 mov     edx, [ebp+var_28]
.text:00002F60                 mov     [ebp+var_24], edx
.text:00002F63
.text:00002F63 loc_2F63:                               ; CODE XREF: _sk_address_is_local+37j
.text:00002F63                 mov     eax, [ebp+var_24]
.text:00002F66                 mov     [ebp+var_14], eax
.text:00002F69                 cmp     [ebp+var_14], 17h
.text:00002F6D                 jnz     short loc_2F8E
.text:00002F6F                 mov     ecx, [ebp+var_C]
.text:00002F72                 mov     edx, [ecx+18h]
.text:00002F75                 add     edx, 8
.text:00002F78                 push    edx             ; a
.text:00002F79                 call    _IN6_IS_ADDR_LOOPBACK
.text:00002F7E                 add     esp, 4
.text:00002F81                 movzx   eax, al
.text:00002F84                 jmp     loc_3029
.text:00002F89 ; ---------------------------------------------------------------------------
.text:00002F89                 jmp     loc_3029
.text:00002F8E ; ---------------------------------------------------------------------------
.text:00002F8E
.text:00002F8E loc_2F8E:                               ; CODE XREF: _sk_address_is_local+61j
.text:00002F8E                 cmp     [ebp+var_14], 2
.text:00002F92                 jnz     short loc_300A
.text:00002F94                 cmp     [ebp+var_C], 0
.text:00002F98                 jz      short loc_2FB0
.text:00002F9A                 mov     eax, [ebp+var_C]
.text:00002F9D                 mov     ecx, [eax+18h]
.text:00002FA0                 mov     edx, [ecx+4]
.text:00002FA3                 push    edx
.text:00002FA4                 call    _ipv4_is_local_addr
.text:00002FA9                 add     esp, 4
.text:00002FAC                 jmp     short loc_3029
.text:00002FAE ; ---------------------------------------------------------------------------
.text:00002FAE                 jmp     short loc_3008
.text:00002FB0 ; ---------------------------------------------------------------------------
.text:00002FB0
.text:00002FB0 loc_2FB0:                               ; CODE XREF: _sk_address_is_local+8Cj
.text:00002FB0                 mov     eax, [ebp+arg_0]
.text:00002FB3                 cmp     dword ptr [eax+14h], 0
.text:00002FB7                 jz      short loc_2FC4
.text:00002FB9                 mov     ecx, [ebp+arg_0]
.text:00002FBC                 mov     edx, [ebp+var_8]
.text:00002FBF                 cmp     edx, [ecx+18h]
.text:00002FC2                 jl      short loc_2FDB
.text:00002FC4
.text:00002FC4 loc_2FC4:                               ; CODE XREF: _sk_address_is_local+ABj
.text:00002FC4                 push    2FDh            ; Line
.text:00002FC9                 push    offset $SG86894 ; "..\\..\\winnet.c"
.text:00002FCE                 push    offset $SG86895 ; "addr->addresses && step.curraddr < addr"...
.text:00002FD3                 call    __wassert
.text:00002FD8 ; ---------------------------------------------------------------------------
.text:00002FD8                 add     esp, 0Ch
.text:00002FDB
.text:00002FDB loc_2FDB:                               ; CODE XREF: _sk_address_is_local+B6j
.text:00002FDB                 mov     ecx, [ebp+arg_0]
.text:00002FDE                 mov     edx, [ecx+14h]
.text:00002FE1                 mov     esi, esp
.text:00002FE3                 mov     eax, [ebp+var_8]
.text:00002FE6                 mov     ecx, [edx+eax*4]
.text:00002FE9                 push    ecx
.text:00002FEA                 call    ds:_p_htonl
.text:00002FF0                 cmp     esi, esp
.text:00002FF2                 call    __RTC_CheckEsp
.text:00002FF7                 mov     [ebp+var_1C], eax
.text:00002FFA                 mov     edx, [ebp+var_1C]
.text:00002FFD                 push    edx
.text:00002FFE                 call    _ipv4_is_local_addr
.text:00003003                 add     esp, 4
.text:00003006                 jmp     short loc_3029
.text:00003008 ; ---------------------------------------------------------------------------
.text:00003008
.text:00003008 loc_3008:                               ; CODE XREF: _sk_address_is_local+A2j
.text:00003008                 jmp     short loc_3029
.text:0000300A ; ---------------------------------------------------------------------------
.text:0000300A
.text:0000300A loc_300A:                               ; CODE XREF: _sk_address_is_local+86j
.text:0000300A                 cmp     [ebp+var_14], 0
.text:0000300E                 jz      short loc_3027
.text:00003010                 push    302h            ; Line
.text:00003015                 push    offset $SG86898 ; "..\\..\\winnet.c"
.text:0000301A                 push    offset $SG86899 ; "family == AF_UNSPEC"
.text:0000301F                 call    __wassert
.text:00003024 ; ---------------------------------------------------------------------------
.text:00003024                 add     esp, 0Ch
.text:00003027
.text:00003027 loc_3027:                               ; CODE XREF: _sk_address_is_local+102j
.text:00003027                 xor     eax, eax
.text:00003029
.text:00003029 loc_3029:                               ; CODE XREF: _sk_address_is_local+78j
.text:00003029                                         ; _sk_address_is_local+7Dj ...
.text:00003029                 push    edx
.text:0000302A                 mov     ecx, ebp
.text:0000302C                 push    eax
.text:0000302D                 lea     edx, $LN19_1
.text:00003033                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003038                 pop     eax
.text:00003039                 pop     edx
.text:0000303A                 pop     edi
.text:0000303B                 pop     esi
.text:0000303C                 add     esp, 28h
.text:0000303F                 cmp     ebp, esp
.text:00003041                 call    __RTC_CheckEsp
.text:00003046                 mov     esp, ebp
.text:00003048                 pop     ebp
.text:00003049                 retn
.text:00003049 _sk_address_is_local endp
.text:00003049
.text:00003049 ; ---------------------------------------------------------------------------
.text:0000304A                 align 4
.text:0000304C $LN19_1         dd 2                    ; DATA XREF: _sk_address_is_local+121o
.text:00003050                 dd offset $LN18_1
.text:00003054 $LN18_1         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00003050o
.text:0000305C                 dd offset $LN16_0       ; "step"
.text:00003060                 dd 0FFFFFFE4h, 4
.text:00003068                 dd offset $LN17_1
.text:0000306C $LN17_1         db 61h, 0               ; DATA XREF: .text:00003068o
.text:0000306E $LN16_0         db 'step',0             ; DATA XREF: .text:0000305Co
.text:00003073                 db 9 dup(0CCh)
.text:0000307C
.text:0000307C ; =============== S U B R O U T I N E =======================================
.text:0000307C
.text:0000307C ; Attributes: bp-based frame
.text:0000307C
.text:0000307C _ipv4_is_local_addr proc near           ; CODE XREF: _sk_address_is_local+98p
.text:0000307C                                         ; _sk_address_is_local+F2p ...
.text:0000307C
.text:0000307C var_18          = dword ptr -18h
.text:0000307C var_14          = dword ptr -14h
.text:0000307C var_10          = dword ptr -10h
.text:0000307C var_C           = dword ptr -0Ch
.text:0000307C var_8           = dword ptr -8
.text:0000307C var_4           = dword ptr -4
.text:0000307C arg_0           = dword ptr  8
.text:0000307C
.text:0000307C                 push    ebp
.text:0000307D                 mov     ebp, esp
.text:0000307F                 sub     esp, 18h
.text:00003082                 push    esi
.text:00003083                 mov     eax, 0CCCCCCCCh
.text:00003088                 mov     [ebp+var_18], eax
.text:0000308B                 mov     [ebp+var_14], eax
.text:0000308E                 mov     [ebp+var_10], eax
.text:00003091                 mov     [ebp+var_C], eax
.text:00003094                 mov     [ebp+var_8], eax
.text:00003097                 mov     [ebp+var_4], eax
.text:0000309A                 mov     esi, esp
.text:0000309C                 mov     eax, [ebp+arg_0]
.text:0000309F                 push    eax
.text:000030A0                 call    ds:_p_ntohl
.text:000030A6                 cmp     esi, esp
.text:000030A8                 call    __RTC_CheckEsp
.text:000030AD                 and     eax, 0FF000000h
.text:000030B2                 cmp     eax, 7F000000h
.text:000030B7                 jnz     short loc_30C3
.text:000030B9                 mov     eax, 1
.text:000030BE                 jmp     loc_318C
.text:000030C3 ; ---------------------------------------------------------------------------
.text:000030C3
.text:000030C3 loc_30C3:                               ; CODE XREF: _ipv4_is_local_addr+3Bj
.text:000030C3                 cmp     ds:_n_local_interfaces, 0
.text:000030CA                 jnz     short loc_3141
.text:000030CC                 mov     esi, esp
.text:000030CE                 push    0
.text:000030D0                 push    2
.text:000030D2                 push    2
.text:000030D4                 call    ds:_p_socket
.text:000030DA                 cmp     esi, esp
.text:000030DC                 call    __RTC_CheckEsp
.text:000030E1                 mov     [ebp+var_4], eax
.text:000030E4                 cmp     ds:_p_WSAIoctl, 0
.text:000030EB                 jz      short loc_3132
.text:000030ED                 mov     esi, esp
.text:000030EF                 push    0
.text:000030F1                 push    0
.text:000030F3                 lea     ecx, [ebp+var_C]
.text:000030F6                 push    ecx
.text:000030F7                 push    4C0h
.text:000030FC                 push    offset _local_interfaces
.text:00003101                 push    0
.text:00003103                 push    0
.text:00003105                 push    4004747Fh
.text:0000310A                 mov     edx, [ebp+var_4]
.text:0000310D                 push    edx
.text:0000310E                 call    ds:_p_WSAIoctl
.text:00003114                 cmp     esi, esp
.text:00003116                 call    __RTC_CheckEsp
.text:0000311B                 test    eax, eax
.text:0000311D                 jnz     short loc_3132
.text:0000311F                 mov     eax, [ebp+var_C]
.text:00003122                 xor     edx, edx
.text:00003124                 mov     ecx, 4Ch ; 'L'
.text:00003129                 div     ecx
.text:0000312B                 mov     ds:_n_local_interfaces, eax
.text:00003130                 jmp     short loc_3141
.text:00003132 ; ---------------------------------------------------------------------------
.text:00003132
.text:00003132 loc_3132:                               ; CODE XREF: _ipv4_is_local_addr+6Fj
.text:00003132                                         ; _ipv4_is_local_addr+A1j
.text:00003132                 push    offset $SG86871 ; "Unable to get list of local IP addresse"...
.text:00003137                 push    0
.text:00003139                 call    _logevent
.text:0000313E                 add     esp, 8
.text:00003141
.text:00003141 loc_3141:                               ; CODE XREF: _ipv4_is_local_addr+4Ej
.text:00003141                                         ; _ipv4_is_local_addr+B4j
.text:00003141                 cmp     ds:_n_local_interfaces, 0
.text:00003148                 jle     short loc_318A
.text:0000314A                 mov     [ebp+var_14], 0
.text:00003151                 jmp     short loc_315C
.text:00003153 ; ---------------------------------------------------------------------------
.text:00003153
.text:00003153 loc_3153:                               ; CODE XREF: _ipv4_is_local_addr:loc_3188j
.text:00003153                 mov     edx, [ebp+var_14]
.text:00003156                 add     edx, 1
.text:00003159                 mov     [ebp+var_14], edx
.text:0000315C
.text:0000315C loc_315C:                               ; CODE XREF: _ipv4_is_local_addr+D5j
.text:0000315C                 mov     eax, [ebp+var_14]
.text:0000315F                 cmp     eax, ds:_n_local_interfaces
.text:00003165                 jge     short loc_318A
.text:00003167                 mov     ecx, [ebp+var_14]
.text:0000316A                 imul    ecx, 4Ch
.text:0000316D                 add     ecx, offset unk_254
.text:00003173                 mov     [ebp+var_18], ecx
.text:00003176                 mov     edx, [ebp+var_18]
.text:00003179                 mov     eax, [edx+4]
.text:0000317C                 cmp     eax, [ebp+arg_0]
.text:0000317F                 jnz     short loc_3188
.text:00003181                 mov     eax, 1
.text:00003186                 jmp     short loc_318C
.text:00003188 ; ---------------------------------------------------------------------------
.text:00003188
.text:00003188 loc_3188:                               ; CODE XREF: _ipv4_is_local_addr+103j
.text:00003188                 jmp     short loc_3153
.text:0000318A ; ---------------------------------------------------------------------------
.text:0000318A
.text:0000318A loc_318A:                               ; CODE XREF: _ipv4_is_local_addr+CCj
.text:0000318A                                         ; _ipv4_is_local_addr+E9j
.text:0000318A                 xor     eax, eax
.text:0000318C
.text:0000318C loc_318C:                               ; CODE XREF: _ipv4_is_local_addr+42j
.text:0000318C                                         ; _ipv4_is_local_addr+10Aj
.text:0000318C                 push    edx
.text:0000318D                 mov     ecx, ebp
.text:0000318F                 push    eax
.text:00003190                 lea     edx, $LN14_0
.text:00003196                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000319B                 pop     eax
.text:0000319C                 pop     edx
.text:0000319D                 pop     esi
.text:0000319E                 add     esp, 18h
.text:000031A1                 cmp     ebp, esp
.text:000031A3                 call    __RTC_CheckEsp
.text:000031A8                 mov     esp, ebp
.text:000031AA                 pop     ebp
.text:000031AB                 retn
.text:000031AB _ipv4_is_local_addr endp
.text:000031AB
.text:000031AB ; ---------------------------------------------------------------------------
.text:000031AC $LN14_0         dd 1                    ; DATA XREF: _ipv4_is_local_addr+114o
.text:000031B0                 dd offset $LN13_0
.text:000031B4 $LN13_0         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000031B0o
.text:000031BC                 dd offset $LN12_0       ; "retbytes"
.text:000031C0 $LN12_0         db 'retbytes',0         ; DATA XREF: .text:000031BCo
.text:000031C9                 align 4
.text:000031CC
.text:000031CC ; =============== S U B R O U T I N E =======================================
.text:000031CC
.text:000031CC ; Attributes: bp-based frame
.text:000031CC
.text:000031CC                 public _sk_address_is_special_local
.text:000031CC _sk_address_is_special_local proc near
.text:000031CC                 push    ebp
.text:000031CD                 mov     ebp, esp
.text:000031CF                 xor     eax, eax
.text:000031D1                 pop     ebp
.text:000031D2                 retn
.text:000031D2 _sk_address_is_special_local endp
.text:000031D2
.text:000031D2 ; ---------------------------------------------------------------------------
.text:000031D3                 db 9 dup(0CCh)
.text:000031DC
.text:000031DC ; =============== S U B R O U T I N E =======================================
.text:000031DC
.text:000031DC ; Attributes: bp-based frame
.text:000031DC
.text:000031DC                 public _sk_addrtype
.text:000031DC _sk_addrtype    proc near
.text:000031DC
.text:000031DC var_20          = dword ptr -20h
.text:000031DC var_1C          = dword ptr -1Ch
.text:000031DC var_18          = dword ptr -18h
.text:000031DC var_14          = dword ptr -14h
.text:000031DC var_10          = dword ptr -10h
.text:000031DC var_C           = dword ptr -0Ch
.text:000031DC var_8           = dword ptr -8
.text:000031DC var_4           = dword ptr -4
.text:000031DC arg_0           = dword ptr  8
.text:000031DC
.text:000031DC                 push    ebp
.text:000031DD                 mov     ebp, esp
.text:000031DF                 sub     esp, 20h
.text:000031E2                 mov     eax, 0CCCCCCCCh
.text:000031E7                 mov     [ebp+var_20], eax
.text:000031EA                 mov     [ebp+var_1C], eax
.text:000031ED                 mov     [ebp+var_18], eax
.text:000031F0                 mov     [ebp+var_14], eax
.text:000031F3                 mov     [ebp+var_10], eax
.text:000031F6                 mov     [ebp+var_C], eax
.text:000031F9                 mov     [ebp+var_8], eax
.text:000031FC                 mov     [ebp+var_4], eax
.text:000031FF                 mov     eax, [ebp+arg_0]
.text:00003202                 mov     ecx, [eax+10h]
.text:00003205                 mov     [ebp+var_C], ecx
.text:00003208                 mov     [ebp+var_8], 0
.text:0000320F                 mov     edx, [ebp+arg_0]
.text:00003212                 cmp     dword ptr [edx+8], 0
.text:00003216                 jnz     short loc_3221
.text:00003218                 mov     [ebp+var_18], 0
.text:0000321F                 jmp     short loc_323F
.text:00003221 ; ---------------------------------------------------------------------------
.text:00003221
.text:00003221 loc_3221:                               ; CODE XREF: _sk_addrtype+3Aj
.text:00003221                 cmp     [ebp+var_C], 0
.text:00003225                 jz      short loc_3232
.text:00003227                 mov     eax, [ebp+var_C]
.text:0000322A                 mov     ecx, [eax+4]
.text:0000322D                 mov     [ebp+var_1C], ecx
.text:00003230                 jmp     short loc_3239
.text:00003232 ; ---------------------------------------------------------------------------
.text:00003232
.text:00003232 loc_3232:                               ; CODE XREF: _sk_addrtype+49j
.text:00003232                 mov     [ebp+var_1C], 2
.text:00003239
.text:00003239 loc_3239:                               ; CODE XREF: _sk_addrtype+54j
.text:00003239                 mov     edx, [ebp+var_1C]
.text:0000323C                 mov     [ebp+var_18], edx
.text:0000323F
.text:0000323F loc_323F:                               ; CODE XREF: _sk_addrtype+43j
.text:0000323F                 mov     eax, [ebp+var_18]
.text:00003242                 mov     [ebp+var_14], eax
.text:00003245                 cmp     [ebp+var_14], 2
.text:00003249                 jnz     short loc_3254
.text:0000324B                 mov     [ebp+var_20], 1
.text:00003252                 jmp     short loc_3263
.text:00003254 ; ---------------------------------------------------------------------------
.text:00003254
.text:00003254 loc_3254:                               ; CODE XREF: _sk_addrtype+6Dj
.text:00003254                 xor     ecx, ecx
.text:00003256                 cmp     [ebp+var_14], 17h
.text:0000325A                 setnz   cl
.text:0000325D                 add     ecx, 2
.text:00003260                 mov     [ebp+var_20], ecx
.text:00003263
.text:00003263 loc_3263:                               ; CODE XREF: _sk_addrtype+76j
.text:00003263                 mov     eax, [ebp+var_20]
.text:00003266                 push    edx
.text:00003267                 mov     ecx, ebp
.text:00003269                 push    eax
.text:0000326A                 lea     edx, $LN11_0
.text:00003270                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003275                 pop     eax
.text:00003276                 pop     edx
.text:00003277                 mov     esp, ebp
.text:00003279                 pop     ebp
.text:0000327A                 retn
.text:0000327A _sk_addrtype    endp
.text:0000327A
.text:0000327A ; ---------------------------------------------------------------------------
.text:0000327B                 align 4
.text:0000327C $LN11_0         dd 1                    ; DATA XREF: _sk_addrtype+8Eo
.text:00003280                 dd offset $LN10_0
.text:00003284 $LN10_0         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00003280o
.text:0000328C                 dd offset $LN9_0        ; "step"
.text:00003290 $LN9_0          db 'step',0             ; DATA XREF: .text:0000328Co
.text:00003295                 db 7 dup(0CCh)
.text:0000329C
.text:0000329C ; =============== S U B R O U T I N E =======================================
.text:0000329C
.text:0000329C ; Attributes: bp-based frame
.text:0000329C
.text:0000329C ; int __cdecl sk_addrcopy(int, void *Dst)
.text:0000329C                 public _sk_addrcopy
.text:0000329C _sk_addrcopy    proc near
.text:0000329C
.text:0000329C var_28          = dword ptr -28h
.text:0000329C var_24          = dword ptr -24h
.text:0000329C Src             = dword ptr -1Ch
.text:0000329C var_14          = dword ptr -14h
.text:0000329C var_C           = dword ptr -0Ch
.text:0000329C var_8           = dword ptr -8
.text:0000329C arg_0           = dword ptr  8
.text:0000329C Dst             = dword ptr  0Ch
.text:0000329C
.text:0000329C                 push    ebp
.text:0000329D                 mov     ebp, esp
.text:0000329F                 sub     esp, 28h
.text:000032A2                 push    esi
.text:000032A3                 push    edi
.text:000032A4                 lea     edi, [ebp+var_28]
.text:000032A7                 mov     ecx, 0Ah
.text:000032AC                 mov     eax, 0CCCCCCCCh
.text:000032B1                 rep stosd
.text:000032B3                 mov     eax, [ebp+arg_0]
.text:000032B6                 mov     ecx, [eax+10h]
.text:000032B9                 mov     [ebp+var_C], ecx
.text:000032BC                 mov     [ebp+var_8], 0
.text:000032C3                 mov     edx, [ebp+arg_0]
.text:000032C6                 cmp     dword ptr [edx+8], 0
.text:000032CA                 jnz     short loc_32D5
.text:000032CC                 mov     [ebp+var_24], 0
.text:000032D3                 jmp     short loc_32F3
.text:000032D5 ; ---------------------------------------------------------------------------
.text:000032D5
.text:000032D5 loc_32D5:                               ; CODE XREF: _sk_addrcopy+2Ej
.text:000032D5                 cmp     [ebp+var_C], 0
.text:000032D9                 jz      short loc_32E6
.text:000032DB                 mov     eax, [ebp+var_C]
.text:000032DE                 mov     ecx, [eax+4]
.text:000032E1                 mov     [ebp+var_28], ecx
.text:000032E4                 jmp     short loc_32ED
.text:000032E6 ; ---------------------------------------------------------------------------
.text:000032E6
.text:000032E6 loc_32E6:                               ; CODE XREF: _sk_addrcopy+3Dj
.text:000032E6                 mov     [ebp+var_28], 2
.text:000032ED
.text:000032ED loc_32ED:                               ; CODE XREF: _sk_addrcopy+48j
.text:000032ED                 mov     edx, [ebp+var_28]
.text:000032F0                 mov     [ebp+var_24], edx
.text:000032F3
.text:000032F3 loc_32F3:                               ; CODE XREF: _sk_addrcopy+37j
.text:000032F3                 mov     eax, [ebp+var_24]
.text:000032F6                 mov     [ebp+var_14], eax
.text:000032F9                 cmp     [ebp+var_14], 0
.text:000032FD                 jnz     short loc_3316
.text:000032FF                 push    321h            ; Line
.text:00003304                 push    offset $SG86916 ; "..\\..\\winnet.c"
.text:00003309                 push    offset $SG86917 ; "family != AF_UNSPEC"
.text:0000330E                 call    __wassert
.text:00003313 ; ---------------------------------------------------------------------------
.text:00003313                 add     esp, 0Ch
.text:00003316
.text:00003316 loc_3316:                               ; CODE XREF: _sk_addrcopy+61j
.text:00003316                 cmp     [ebp+var_C], 0
.text:0000331A                 jz      short loc_3379
.text:0000331C                 cmp     [ebp+var_14], 2
.text:00003320                 jnz     short loc_333C
.text:00003322                 push    4               ; Size
.text:00003324                 mov     edx, [ebp+var_C]
.text:00003327                 mov     eax, [edx+18h]
.text:0000332A                 add     eax, 4
.text:0000332D                 push    eax             ; Src
.text:0000332E                 mov     ecx, [ebp+Dst]
.text:00003331                 push    ecx             ; Dst
.text:00003332                 call    _memcpy
.text:00003337                 add     esp, 0Ch
.text:0000333A                 jmp     short loc_3377
.text:0000333C ; ---------------------------------------------------------------------------
.text:0000333C
.text:0000333C loc_333C:                               ; CODE XREF: _sk_addrcopy+84j
.text:0000333C                 cmp     [ebp+var_14], 17h
.text:00003340                 jnz     short loc_335C
.text:00003342                 push    10h             ; Size
.text:00003344                 mov     edx, [ebp+var_C]
.text:00003347                 mov     eax, [edx+18h]
.text:0000334A                 add     eax, 8
.text:0000334D                 push    eax             ; Src
.text:0000334E                 mov     ecx, [ebp+Dst]
.text:00003351                 push    ecx             ; Dst
.text:00003352                 call    _memcpy
.text:00003357                 add     esp, 0Ch
.text:0000335A                 jmp     short loc_3377
.text:0000335C ; ---------------------------------------------------------------------------
.text:0000335C
.text:0000335C loc_335C:                               ; CODE XREF: _sk_addrcopy+A4j
.text:0000335C                 xor     edx, edx
.text:0000335E                 jnz     short loc_3377
.text:00003360                 push    32Bh            ; Line
.text:00003365                 push    offset $SG86928 ; "..\\..\\winnet.c"
.text:0000336A                 push    offset $SG86929 ; "FALSE"
.text:0000336F                 call    __wassert
.text:00003374 ; ---------------------------------------------------------------------------
.text:00003374                 add     esp, 0Ch
.text:00003377
.text:00003377 loc_3377:                               ; CODE XREF: _sk_addrcopy+9Ej
.text:00003377                                         ; _sk_addrcopy+BEj ...
.text:00003377                 jmp     short loc_33DB
.text:00003379 ; ---------------------------------------------------------------------------
.text:00003379
.text:00003379 loc_3379:                               ; CODE XREF: _sk_addrcopy+7Ej
.text:00003379                 cmp     [ebp+var_14], 2
.text:0000337D                 jnz     short loc_33DB
.text:0000337F                 mov     ecx, [ebp+arg_0]
.text:00003382                 cmp     dword ptr [ecx+14h], 0
.text:00003386                 jz      short loc_3393
.text:00003388                 mov     edx, [ebp+arg_0]
.text:0000338B                 mov     eax, [ebp+var_8]
.text:0000338E                 cmp     eax, [edx+18h]
.text:00003391                 jl      short loc_33AA
.text:00003393
.text:00003393 loc_3393:                               ; CODE XREF: _sk_addrcopy+EAj
.text:00003393                 push    330h            ; Line
.text:00003398                 push    offset $SG86934 ; "..\\..\\winnet.c"
.text:0000339D                 push    offset $SG86935 ; "addr->addresses && step.curraddr < addr"...
.text:000033A2                 call    __wassert
.text:000033A7 ; ---------------------------------------------------------------------------
.text:000033A7                 add     esp, 0Ch
.text:000033AA
.text:000033AA loc_33AA:                               ; CODE XREF: _sk_addrcopy+F5j
.text:000033AA                 mov     edx, [ebp+arg_0]
.text:000033AD                 mov     eax, [edx+14h]
.text:000033B0                 mov     esi, esp
.text:000033B2                 mov     ecx, [ebp+var_8]
.text:000033B5                 mov     edx, [eax+ecx*4]
.text:000033B8                 push    edx
.text:000033B9                 call    ds:_p_htonl
.text:000033BF                 cmp     esi, esp
.text:000033C1                 call    __RTC_CheckEsp
.text:000033C6                 mov     [ebp+Src], eax
.text:000033C9                 push    4               ; Size
.text:000033CB                 lea     eax, [ebp+Src]
.text:000033CE                 push    eax             ; Src
.text:000033CF                 mov     ecx, [ebp+Dst]
.text:000033D2                 push    ecx             ; Dst
.text:000033D3                 call    _memcpy
.text:000033D8                 add     esp, 0Ch
.text:000033DB
.text:000033DB loc_33DB:                               ; CODE XREF: _sk_addrcopy:loc_3377j
.text:000033DB                                         ; _sk_addrcopy+E1j
.text:000033DB                 push    edx
.text:000033DC                 mov     ecx, ebp
.text:000033DE                 push    eax
.text:000033DF                 lea     edx, $LN21_1
.text:000033E5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000033EA                 pop     eax
.text:000033EB                 pop     edx
.text:000033EC                 pop     edi
.text:000033ED                 pop     esi
.text:000033EE                 add     esp, 28h
.text:000033F1                 cmp     ebp, esp
.text:000033F3                 call    __RTC_CheckEsp
.text:000033F8                 mov     esp, ebp
.text:000033FA                 pop     ebp
.text:000033FB                 retn
.text:000033FB _sk_addrcopy    endp
.text:000033FB
.text:000033FB ; ---------------------------------------------------------------------------
.text:000033FC $LN21_1         dd 2                    ; DATA XREF: _sk_addrcopy+143o
.text:00003400                 dd offset $LN20_1
.text:00003404 $LN20_1         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00003400o
.text:0000340C                 dd offset $LN18_2       ; "step"
.text:00003410                 dd 0FFFFFFE4h, 4
.text:00003418                 dd offset $LN19_2
.text:0000341C $LN19_2         db 61h, 0               ; DATA XREF: .text:00003418o
.text:0000341E $LN18_2         db 'step',0             ; DATA XREF: .text:0000340Co
.text:00003423                 db 9 dup(0CCh)
.text:0000342C
.text:0000342C ; =============== S U B R O U T I N E =======================================
.text:0000342C
.text:0000342C ; Attributes: bp-based frame
.text:0000342C
.text:0000342C                 public _sk_addr_free
.text:0000342C _sk_addr_free   proc near               ; CODE XREF: _sk_tcp_close+74p
.text:0000342C                                         ; _select_result+1F2p
.text:0000342C
.text:0000342C arg_0           = dword ptr  8
.text:0000342C
.text:0000342C                 push    ebp
.text:0000342D                 mov     ebp, esp
.text:0000342F                 push    esi
.text:00003430                 mov     eax, [ebp+arg_0]
.text:00003433                 mov     ecx, [eax]
.text:00003435                 sub     ecx, 1
.text:00003438                 mov     edx, [ebp+arg_0]
.text:0000343B                 mov     [edx], ecx
.text:0000343D                 mov     eax, [ebp+arg_0]
.text:00003440                 cmp     dword ptr [eax], 0
.text:00003443                 jle     short loc_3447
.text:00003445                 jmp     short loc_3493
.text:00003447 ; ---------------------------------------------------------------------------
.text:00003447
.text:00003447 loc_3447:                               ; CODE XREF: _sk_addr_free+17j
.text:00003447                 mov     ecx, [ebp+arg_0]
.text:0000344A                 cmp     dword ptr [ecx+10h], 0
.text:0000344E                 jz      short loc_346F
.text:00003450                 cmp     ds:_p_freeaddrinfo, 0
.text:00003457                 jz      short loc_346F
.text:00003459                 mov     esi, esp
.text:0000345B                 mov     edx, [ebp+arg_0]
.text:0000345E                 mov     eax, [edx+10h]
.text:00003461                 push    eax
.text:00003462                 call    ds:_p_freeaddrinfo
.text:00003468                 cmp     esi, esp
.text:0000346A                 call    __RTC_CheckEsp
.text:0000346F
.text:0000346F loc_346F:                               ; CODE XREF: _sk_addr_free+22j
.text:0000346F                                         ; _sk_addr_free+2Bj
.text:0000346F                 mov     ecx, [ebp+arg_0]
.text:00003472                 cmp     dword ptr [ecx+14h], 0
.text:00003476                 jz      short loc_3487
.text:00003478                 mov     edx, [ebp+arg_0]
.text:0000347B                 mov     eax, [edx+14h]
.text:0000347E                 push    eax
.text:0000347F                 call    _safefree
.text:00003484                 add     esp, 4
.text:00003487
.text:00003487 loc_3487:                               ; CODE XREF: _sk_addr_free+4Aj
.text:00003487                 mov     ecx, [ebp+arg_0]
.text:0000348A                 push    ecx
.text:0000348B                 call    _safefree
.text:00003490                 add     esp, 4
.text:00003493
.text:00003493 loc_3493:                               ; CODE XREF: _sk_addr_free+19j
.text:00003493                 pop     esi
.text:00003494                 cmp     ebp, esp
.text:00003496                 call    __RTC_CheckEsp
.text:0000349B                 pop     ebp
.text:0000349C                 retn
.text:0000349C _sk_addr_free   endp
.text:0000349C
.text:0000349C ; ---------------------------------------------------------------------------
.text:0000349D                 db 0Fh dup(0CCh)
.text:000034AC
.text:000034AC ; =============== S U B R O U T I N E =======================================
.text:000034AC
.text:000034AC ; Attributes: bp-based frame
.text:000034AC
.text:000034AC                 public _sk_addr_dup
.text:000034AC _sk_addr_dup    proc near
.text:000034AC
.text:000034AC arg_0           = dword ptr  8
.text:000034AC
.text:000034AC                 push    ebp
.text:000034AD                 mov     ebp, esp
.text:000034AF                 mov     eax, [ebp+arg_0]
.text:000034B2                 mov     ecx, [eax]
.text:000034B4                 add     ecx, 1
.text:000034B7                 mov     edx, [ebp+arg_0]
.text:000034BA                 mov     [edx], ecx
.text:000034BC                 mov     eax, [ebp+arg_0]
.text:000034BF                 pop     ebp
.text:000034C0                 retn
.text:000034C0 _sk_addr_dup    endp
.text:000034C0
.text:000034C0 ; ---------------------------------------------------------------------------
.text:000034C1                 db 0Bh dup(0CCh)
.text:000034CC
.text:000034CC ; =============== S U B R O U T I N E =======================================
.text:000034CC
.text:000034CC ; Attributes: bp-based frame
.text:000034CC
.text:000034CC _sk_tcp_plug    proc near               ; DATA XREF: .rdata:`sk_tcp_accept'::`2'::fn_tableo
.text:000034CC                                         ; .rdata:`sk_new'::`2'::fn_tableo ...
.text:000034CC
.text:000034CC var_8           = dword ptr -8
.text:000034CC var_4           = dword ptr -4
.text:000034CC arg_0           = dword ptr  8
.text:000034CC arg_4           = dword ptr  0Ch
.text:000034CC
.text:000034CC                 push    ebp
.text:000034CD                 mov     ebp, esp
.text:000034CF                 sub     esp, 8
.text:000034D2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000034D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034E0                 mov     eax, [ebp+arg_0]
.text:000034E3                 mov     [ebp+var_4], eax
.text:000034E6                 mov     ecx, [ebp+var_4]
.text:000034E9                 mov     edx, [ecx+0Ch]
.text:000034EC                 mov     [ebp+var_8], edx
.text:000034EF                 cmp     [ebp+arg_4], 0
.text:000034F3                 jz      short loc_34FE
.text:000034F5                 mov     eax, [ebp+var_4]
.text:000034F8                 mov     ecx, [ebp+arg_4]
.text:000034FB                 mov     [eax+0Ch], ecx
.text:000034FE
.text:000034FE loc_34FE:                               ; CODE XREF: _sk_tcp_plug+27j
.text:000034FE                 mov     eax, [ebp+var_8]
.text:00003501                 mov     esp, ebp
.text:00003503                 pop     ebp
.text:00003504                 retn
.text:00003504 _sk_tcp_plug    endp
.text:00003504
.text:00003504 ; ---------------------------------------------------------------------------
.text:00003505                 db 7 dup(0CCh)
.text:0000350C
.text:0000350C ; =============== S U B R O U T I N E =======================================
.text:0000350C
.text:0000350C ; Attributes: bp-based frame
.text:0000350C
.text:0000350C _sk_tcp_flush   proc near               ; DATA XREF: .rdata:00000034o
.text:0000350C                                         ; .rdata:00000054o ...
.text:0000350C                 push    ebp
.text:0000350D                 mov     ebp, esp
.text:0000350F                 pop     ebp
.text:00003510                 retn
.text:00003510 _sk_tcp_flush   endp
.text:00003510
.text:00003510 ; ---------------------------------------------------------------------------
.text:00003511                 db 0Bh dup(0CCh)
.text:0000351C
.text:0000351C ; =============== S U B R O U T I N E =======================================
.text:0000351C
.text:0000351C ; Attributes: bp-based frame
.text:0000351C
.text:0000351C                 public _sk_new
.text:0000351C _sk_new         proc near
.text:0000351C
.text:0000351C var_8           = dword ptr -8
.text:0000351C var_4           = dword ptr -4
.text:0000351C arg_0           = dword ptr  8
.text:0000351C arg_4           = dword ptr  0Ch
.text:0000351C arg_8           = dword ptr  10h
.text:0000351C arg_C           = dword ptr  14h
.text:0000351C arg_10          = dword ptr  18h
.text:0000351C arg_14          = dword ptr  1Ch
.text:0000351C arg_18          = dword ptr  20h
.text:0000351C
.text:0000351C                 push    ebp
.text:0000351D                 mov     ebp, esp
.text:0000351F                 sub     esp, 8
.text:00003522                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003529                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003530                 push    68h ; 'h'
.text:00003532                 push    1
.text:00003534                 call    _safemalloc
.text:00003539                 add     esp, 8
.text:0000353C                 mov     [ebp+var_4], eax
.text:0000353F                 mov     eax, [ebp+var_4]
.text:00003542                 mov     dword ptr [eax], offset ?fn_table@?1??sk_new@@9@9 ; `sk_new'::`2'::fn_table
.text:00003548                 mov     ecx, [ebp+var_4]
.text:0000354B                 mov     dword ptr [ecx+4], 0
.text:00003552                 mov     edx, [ebp+var_4]
.text:00003555                 mov     eax, [ebp+arg_18]
.text:00003558                 mov     [edx+0Ch], eax
.text:0000355B                 mov     ecx, [ebp+var_4]
.text:0000355E                 add     ecx, 10h
.text:00003561                 push    ecx
.text:00003562                 call    _bufchain_init
.text:00003567                 add     esp, 4
.text:0000356A                 mov     edx, [ebp+var_4]
.text:0000356D                 mov     dword ptr [edx+1Ch], 0
.text:00003574                 mov     eax, [ebp+var_4]
.text:00003577                 mov     dword ptr [eax+20h], 0
.text:0000357E                 mov     ecx, [ebp+var_4]
.text:00003581                 mov     dword ptr [ecx+34h], 0
.text:00003588                 mov     edx, [ebp+var_4]
.text:0000358B                 mov     dword ptr [edx+48h], 0
.text:00003592                 mov     eax, [ebp+var_4]
.text:00003595                 mov     dword ptr [eax+24h], 0
.text:0000359C                 mov     ecx, [ebp+var_4]
.text:0000359F                 mov     dword ptr [ecx+28h], 0
.text:000035A6                 mov     edx, [ebp+var_4]
.text:000035A9                 mov     dword ptr [edx+2Ch], 0
.text:000035B0                 mov     eax, [ebp+var_4]
.text:000035B3                 mov     dword ptr [eax+5Ch], 0
.text:000035BA                 mov     ecx, [ebp+var_4]
.text:000035BD                 mov     dword ptr [ecx+64h], 0
.text:000035C4                 mov     edx, [ebp+var_4]
.text:000035C7                 mov     dword ptr [edx+60h], 0
.text:000035CE                 mov     eax, [ebp+var_4]
.text:000035D1                 mov     ecx, [ebp+arg_C]
.text:000035D4                 mov     [eax+38h], ecx
.text:000035D7                 mov     edx, [ebp+var_4]
.text:000035DA                 mov     eax, [ebp+arg_10]
.text:000035DD                 mov     [edx+3Ch], eax
.text:000035E0                 mov     ecx, [ebp+var_4]
.text:000035E3                 mov     edx, [ebp+arg_14]
.text:000035E6                 mov     [ecx+40h], edx
.text:000035E9                 mov     eax, [ebp+var_4]
.text:000035EC                 mov     ecx, [ebp+arg_8]
.text:000035EF                 mov     [eax+44h], ecx
.text:000035F2                 mov     edx, [ebp+var_4]
.text:000035F5                 mov     eax, [ebp+arg_4]
.text:000035F8                 mov     [edx+58h], eax
.text:000035FB                 mov     ecx, [ebp+var_4]
.text:000035FE                 mov     edx, [ebp+arg_0]
.text:00003601                 mov     [ecx+4Ch], edx
.text:00003604                 mov     eax, [ebp+var_4]
.text:00003607                 mov     ecx, [eax+4Ch]
.text:0000360A                 mov     edx, [ebp+var_4]
.text:0000360D                 mov     eax, [ecx+10h]
.text:00003610                 mov     [edx+50h], eax
.text:00003613                 mov     ecx, [ebp+var_4]
.text:00003616                 mov     dword ptr [ecx+54h], 0
.text:0000361D                 mov     edx, [ebp+var_4]
.text:00003620                 mov     dword ptr [edx+8], 0FFFFFFFFh
.text:00003627                 mov     [ebp+var_8], 0
.text:0000362E
.text:0000362E loc_362E:                               ; CODE XREF: _sk_new+13Fj
.text:0000362E                 mov     eax, [ebp+var_4]
.text:00003631                 push    eax
.text:00003632                 call    _try_connect
.text:00003637                 add     esp, 4
.text:0000363A                 mov     [ebp+var_8], eax
.text:0000363D                 cmp     [ebp+var_8], 0
.text:00003641                 jz      short loc_365D
.text:00003643                 mov     ecx, [ebp+var_4]
.text:00003646                 add     ecx, 50h ; 'P'
.text:00003649                 push    ecx
.text:0000364A                 mov     edx, [ebp+var_4]
.text:0000364D                 mov     eax, [edx+4Ch]
.text:00003650                 push    eax
.text:00003651                 call    _sk_nextaddr
.text:00003656                 add     esp, 8
.text:00003659                 test    eax, eax
.text:0000365B                 jnz     short loc_362E
.text:0000365D
.text:0000365D loc_365D:                               ; CODE XREF: _sk_new+125j
.text:0000365D                 mov     eax, [ebp+var_4]
.text:00003660                 add     esp, 8
.text:00003663                 cmp     ebp, esp
.text:00003665                 call    __RTC_CheckEsp
.text:0000366A                 mov     esp, ebp
.text:0000366C                 pop     ebp
.text:0000366D                 retn
.text:0000366D _sk_new         endp
.text:0000366D
.text:0000366D ; ---------------------------------------------------------------------------
.text:0000366E                 db 0Eh dup(0CCh)
.text:0000367C
.text:0000367C ; =============== S U B R O U T I N E =======================================
.text:0000367C
.text:0000367C ; Attributes: bp-based frame
.text:0000367C
.text:0000367C _try_connect    proc near               ; CODE XREF: _sk_new+116p
.text:0000367C                                         ; _select_result+117p
.text:0000367C
.text:0000367C var_8C          = dword ptr -8Ch
.text:0000367C var_88          = dword ptr -88h
.text:0000367C var_84          = dword ptr -84h
.text:0000367C var_80          = dword ptr -80h
.text:0000367C var_7C          = dword ptr -7Ch
.text:0000367C var_74          = dword ptr -74h
.text:0000367C var_68          = dword ptr -68h
.text:0000367C var_5C          = dword ptr -5Ch
.text:0000367C var_54          = dword ptr -54h
.text:0000367C var_50          = word ptr -50h
.text:0000367C var_4C          = dword ptr -4Ch
.text:0000367C dwMessageId     = dword ptr -48h
.text:0000367C var_40          = word ptr -40h
.text:0000367C var_3E          = word ptr -3Eh
.text:0000367C var_3C          = dword ptr -3Ch
.text:0000367C Dst             = word ptr -28h
.text:0000367C var_26          = word ptr -26h
.text:0000367C var_24          = dword ptr -24h
.text:0000367C var_20          = dword ptr -20h
.text:0000367C var_1C          = dword ptr -1Ch
.text:0000367C var_18          = dword ptr -18h
.text:0000367C var_14          = dword ptr -14h
.text:0000367C var_10          = dword ptr -10h
.text:0000367C var_8           = dword ptr -8
.text:0000367C var_4           = dword ptr -4
.text:0000367C arg_0           = dword ptr  8
.text:0000367C
.text:0000367C                 push    ebp
.text:0000367D                 mov     ebp, esp
.text:0000367F                 sub     esp, 8Ch
.text:00003685                 push    esi
.text:00003686                 push    edi
.text:00003687                 lea     edi, [ebp+var_8C]
.text:0000368D                 mov     ecx, 23h ; '#'
.text:00003692                 mov     eax, 0CCCCCCCCh
.text:00003697                 rep stosd
.text:00003699                 mov     eax, dword ptr ds:___security_cookie
.text:0000369E                 xor     eax, ebp
.text:000036A0                 mov     [ebp+var_4], eax
.text:000036A3                 mov     eax, [ebp+arg_0]
.text:000036A6                 cmp     dword ptr [eax+8], 0FFFFFFFFh
.text:000036AA                 jz      short loc_36D3
.text:000036AC                 push    0
.text:000036AE                 mov     ecx, [ebp+arg_0]
.text:000036B1                 mov     edx, [ecx+8]
.text:000036B4                 push    edx
.text:000036B5                 call    _do_select
.text:000036BA                 add     esp, 8
.text:000036BD                 mov     esi, esp
.text:000036BF                 mov     eax, [ebp+arg_0]
.text:000036C2                 mov     ecx, [eax+8]
.text:000036C5                 push    ecx
.text:000036C6                 call    ds:_p_closesocket
.text:000036CC                 cmp     esi, esp
.text:000036CE                 call    __RTC_CheckEsp
.text:000036D3
.text:000036D3 loc_36D3:                               ; CODE XREF: _try_connect+2Ej
.text:000036D3                 mov     esi, esp
.text:000036D5                 push    0
.text:000036D7                 push    0
.text:000036D9                 mov     edx, [ebp+arg_0]
.text:000036DC                 mov     eax, [edx+58h]
.text:000036DF                 push    eax
.text:000036E0                 mov     ecx, [ebp+arg_0]
.text:000036E3                 mov     edx, [ecx+4Ch]
.text:000036E6                 push    edx
.text:000036E7                 push    0
.text:000036E9                 mov     eax, [ebp+arg_0]
.text:000036EC                 mov     ecx, [eax+0Ch]
.text:000036EF                 push    ecx
.text:000036F0                 mov     edx, [ebp+arg_0]
.text:000036F3                 mov     eax, [edx+0Ch]
.text:000036F6                 mov     ecx, [eax]
.text:000036F8                 mov     edx, [ecx]
.text:000036FA                 call    edx
.text:000036FC                 add     esp, 18h
.text:000036FF                 cmp     esi, esp
.text:00003701                 call    __RTC_CheckEsp
.text:00003706                 mov     eax, [ebp+arg_0]
.text:00003709                 mov     ecx, [eax+4Ch]
.text:0000370C                 cmp     dword ptr [ecx+8], 0
.text:00003710                 jnz     short loc_371B
.text:00003712                 mov     [ebp+var_80], 0
.text:00003719                 jmp     short loc_3748
.text:0000371B ; ---------------------------------------------------------------------------
.text:0000371B
.text:0000371B loc_371B:                               ; CODE XREF: _try_connect+94j
.text:0000371B                 mov     edx, [ebp+arg_0]
.text:0000371E                 cmp     dword ptr [edx+50h], 0
.text:00003722                 jz      short loc_3735
.text:00003724                 mov     eax, [ebp+arg_0]
.text:00003727                 mov     ecx, [eax+50h]
.text:0000372A                 mov     edx, [ecx+4]
.text:0000372D                 mov     [ebp+var_84], edx
.text:00003733                 jmp     short loc_373F
.text:00003735 ; ---------------------------------------------------------------------------
.text:00003735
.text:00003735 loc_3735:                               ; CODE XREF: _try_connect+A6j
.text:00003735                 mov     [ebp+var_84], 2
.text:0000373F
.text:0000373F loc_373F:                               ; CODE XREF: _try_connect+B7j
.text:0000373F                 mov     eax, [ebp+var_84]
.text:00003745                 mov     [ebp+var_80], eax
.text:00003748
.text:00003748 loc_3748:                               ; CODE XREF: _try_connect+9Dj
.text:00003748                 mov     ecx, [ebp+var_80]
.text:0000374B                 mov     [ebp+var_54], ecx
.text:0000374E                 mov     edx, [ebp+arg_0]
.text:00003751                 push    edx
.text:00003752                 mov     eax, ds:_sktree
.text:00003757                 push    eax
.text:00003758                 call    _del234
.text:0000375D                 add     esp, 8
.text:00003760                 mov     esi, esp
.text:00003762                 push    0
.text:00003764                 push    1
.text:00003766                 mov     ecx, [ebp+var_54]
.text:00003769                 push    ecx
.text:0000376A                 call    ds:_p_socket
.text:00003770                 cmp     esi, esp
.text:00003772                 call    __RTC_CheckEsp
.text:00003777                 mov     [ebp+var_8], eax
.text:0000377A                 mov     edx, [ebp+arg_0]
.text:0000377D                 mov     eax, [ebp+var_8]
.text:00003780                 mov     [edx+8], eax
.text:00003783                 cmp     [ebp+var_8], 0FFFFFFFFh
.text:00003787                 jnz     short loc_37B2
.text:00003789                 mov     esi, esp
.text:0000378B                 call    dword ptr ds:_p_WSAGetLastError
.text:00003791                 cmp     esi, esp
.text:00003793                 call    __RTC_CheckEsp
.text:00003798                 mov     [ebp+dwMessageId], eax
.text:0000379B                 mov     ecx, [ebp+dwMessageId]
.text:0000379E                 push    ecx             ; dwMessageId
.text:0000379F                 call    _winsock_error_string
.text:000037A4                 add     esp, 4
.text:000037A7                 mov     edx, [ebp+arg_0]
.text:000037AA                 mov     [edx+4], eax
.text:000037AD                 jmp     $ret$87032
.text:000037B2 ; ---------------------------------------------------------------------------
.text:000037B2
.text:000037B2 loc_37B2:                               ; CODE XREF: _try_connect+10Bj
.text:000037B2                 mov     eax, [ebp+arg_0]
.text:000037B5                 cmp     dword ptr [eax+38h], 0
.text:000037B9                 jz      short loc_37E5
.text:000037BB                 mov     [ebp+var_5C], 1
.text:000037C2                 mov     esi, esp
.text:000037C4                 push    4
.text:000037C6                 lea     ecx, [ebp+var_5C]
.text:000037C9                 push    ecx
.text:000037CA                 push    100h
.text:000037CF                 push    0FFFFh
.text:000037D4                 mov     edx, [ebp+var_8]
.text:000037D7                 push    edx
.text:000037D8                 call    ds:_p_setsockopt
.text:000037DE                 cmp     esi, esp
.text:000037E0                 call    __RTC_CheckEsp
.text:000037E5
.text:000037E5 loc_37E5:                               ; CODE XREF: _try_connect+13Dj
.text:000037E5                 mov     eax, [ebp+arg_0]
.text:000037E8                 cmp     dword ptr [eax+3Ch], 0
.text:000037EC                 jz      short loc_3812
.text:000037EE                 mov     [ebp+var_68], 1
.text:000037F5                 mov     esi, esp
.text:000037F7                 push    4
.text:000037F9                 lea     ecx, [ebp+var_68]
.text:000037FC                 push    ecx
.text:000037FD                 push    1
.text:000037FF                 push    6
.text:00003801                 mov     edx, [ebp+var_8]
.text:00003804                 push    edx
.text:00003805                 call    ds:_p_setsockopt
.text:0000380B                 cmp     esi, esp
.text:0000380D                 call    __RTC_CheckEsp
.text:00003812
.text:00003812 loc_3812:                               ; CODE XREF: _try_connect+170j
.text:00003812                 mov     eax, [ebp+arg_0]
.text:00003815                 cmp     dword ptr [eax+40h], 0
.text:00003819                 jz      short loc_3842
.text:0000381B                 mov     [ebp+var_74], 1
.text:00003822                 mov     esi, esp
.text:00003824                 push    4
.text:00003826                 lea     ecx, [ebp+var_74]
.text:00003829                 push    ecx
.text:0000382A                 push    8
.text:0000382C                 push    0FFFFh
.text:00003831                 mov     edx, [ebp+var_8]
.text:00003834                 push    edx
.text:00003835                 call    ds:_p_setsockopt
.text:0000383B                 cmp     esi, esp
.text:0000383D                 call    __RTC_CheckEsp
.text:00003842
.text:00003842 loc_3842:                               ; CODE XREF: _try_connect+19Dj
.text:00003842                 mov     eax, [ebp+arg_0]
.text:00003845                 cmp     dword ptr [eax+44h], 0
.text:00003849                 jz      short loc_3856
.text:0000384B                 mov     ecx, 3FFh
.text:00003850                 mov     [ebp+var_50], cx
.text:00003854                 jmp     short loc_385C
.text:00003856 ; ---------------------------------------------------------------------------
.text:00003856
.text:00003856 loc_3856:                               ; CODE XREF: _try_connect+1CDj
.text:00003856                 xor     edx, edx
.text:00003858                 mov     [ebp+var_50], dx
.text:0000385C
.text:0000385C loc_385C:                               ; CODE XREF: _try_connect+1D8j
.text:0000385C                                         ; _try_connect:loc_396Dj
.text:0000385C                 mov     eax, 1
.text:00003861                 test    eax, eax
.text:00003863                 jz      loc_3972
.text:00003869                 cmp     [ebp+var_54], 17h
.text:0000386D                 jnz     short loc_38A2
.text:0000386F                 push    1Ch             ; Size
.text:00003871                 push    0               ; Val
.text:00003873                 lea     ecx, [ebp+Dst]
.text:00003876                 push    ecx             ; Dst
.text:00003877                 call    _memset
.text:0000387C                 add     esp, 0Ch
.text:0000387F                 mov     edx, 17h
.text:00003884                 mov     [ebp+Dst], dx
.text:00003888                 mov     esi, esp
.text:0000388A                 movzx   eax, [ebp+var_50]
.text:0000388E                 push    eax
.text:0000388F                 call    ds:_p_htons
.text:00003895                 cmp     esi, esp
.text:00003897                 call    __RTC_CheckEsp
.text:0000389C                 mov     [ebp+var_26], ax
.text:000038A0                 jmp     short loc_38D7
.text:000038A2 ; ---------------------------------------------------------------------------
.text:000038A2
.text:000038A2 loc_38A2:                               ; CODE XREF: _try_connect+1F1j
.text:000038A2                 mov     ecx, 2
.text:000038A7                 mov     [ebp+var_40], cx
.text:000038AB                 mov     esi, esp
.text:000038AD                 push    0
.text:000038AF                 call    ds:_p_htonl
.text:000038B5                 cmp     esi, esp
.text:000038B7                 call    __RTC_CheckEsp
.text:000038BC                 mov     [ebp+var_3C], eax
.text:000038BF                 mov     esi, esp
.text:000038C1                 movzx   edx, [ebp+var_50]
.text:000038C5                 push    edx
.text:000038C6                 call    ds:_p_htons
.text:000038CC                 cmp     esi, esp
.text:000038CE                 call    __RTC_CheckEsp
.text:000038D3                 mov     [ebp+var_3E], ax
.text:000038D7
.text:000038D7 loc_38D7:                               ; CODE XREF: _try_connect+224j
.text:000038D7                 cmp     [ebp+var_54], 17h
.text:000038DB                 jnz     short loc_38E8
.text:000038DD                 lea     eax, [ebp+Dst]
.text:000038E0                 mov     [ebp+var_88], eax
.text:000038E6                 jmp     short loc_38F1
.text:000038E8 ; ---------------------------------------------------------------------------
.text:000038E8
.text:000038E8 loc_38E8:                               ; CODE XREF: _try_connect+25Fj
.text:000038E8                 lea     ecx, [ebp+var_40]
.text:000038EB                 mov     [ebp+var_88], ecx
.text:000038F1
.text:000038F1 loc_38F1:                               ; CODE XREF: _try_connect+26Aj
.text:000038F1                 mov     edx, [ebp+var_54]
.text:000038F4                 sub     edx, 17h
.text:000038F7                 neg     edx
.text:000038F9                 sbb     edx, edx
.text:000038FB                 and     edx, 0FFFFFFF4h
.text:000038FE                 add     edx, 1Ch
.text:00003901                 mov     esi, esp
.text:00003903                 push    edx
.text:00003904                 mov     eax, [ebp+var_88]
.text:0000390A                 push    eax
.text:0000390B                 mov     ecx, [ebp+var_8]
.text:0000390E                 push    ecx
.text:0000390F                 call    ds:_p_bind
.text:00003915                 cmp     esi, esp
.text:00003917                 call    __RTC_CheckEsp
.text:0000391C                 mov     [ebp+var_7C], eax
.text:0000391F                 cmp     [ebp+var_7C], 0FFFFFFFFh
.text:00003923                 jz      short loc_3930
.text:00003925                 mov     [ebp+dwMessageId], 0
.text:0000392C                 jmp     short loc_3972
.text:0000392E ; ---------------------------------------------------------------------------
.text:0000392E                 jmp     short loc_394D
.text:00003930 ; ---------------------------------------------------------------------------
.text:00003930
.text:00003930 loc_3930:                               ; CODE XREF: _try_connect+2A7j
.text:00003930                 mov     esi, esp
.text:00003932                 call    dword ptr ds:_p_WSAGetLastError
.text:00003938                 cmp     esi, esp
.text:0000393A                 call    __RTC_CheckEsp
.text:0000393F                 mov     [ebp+dwMessageId], eax
.text:00003942                 cmp     [ebp+dwMessageId], 2740h
.text:00003949                 jz      short loc_394D
.text:0000394B                 jmp     short loc_3972
.text:0000394D ; ---------------------------------------------------------------------------
.text:0000394D
.text:0000394D loc_394D:                               ; CODE XREF: _try_connect+2B2j
.text:0000394D                                         ; _try_connect+2CDj
.text:0000394D                 movsx   edx, [ebp+var_50]
.text:00003951                 test    edx, edx
.text:00003953                 jnz     short loc_3957
.text:00003955                 jmp     short loc_3972
.text:00003957 ; ---------------------------------------------------------------------------
.text:00003957
.text:00003957 loc_3957:                               ; CODE XREF: _try_connect+2D7j
.text:00003957                 mov     ax, [ebp+var_50]
.text:0000395B                 sub     ax, 1
.text:0000395F                 mov     [ebp+var_50], ax
.text:00003963                 movsx   ecx, [ebp+var_50]
.text:00003967                 test    ecx, ecx
.text:00003969                 jnz     short loc_396D
.text:0000396B                 jmp     short loc_3972
.text:0000396D ; ---------------------------------------------------------------------------
.text:0000396D
.text:0000396D loc_396D:                               ; CODE XREF: _try_connect+2EDj
.text:0000396D                 jmp     loc_385C
.text:00003972 ; ---------------------------------------------------------------------------
.text:00003972
.text:00003972 loc_3972:                               ; CODE XREF: _try_connect+1E7j
.text:00003972                                         ; _try_connect+2B0j ...
.text:00003972                 cmp     [ebp+dwMessageId], 0
.text:00003976                 jz      short loc_398F
.text:00003978                 mov     edx, [ebp+dwMessageId]
.text:0000397B                 push    edx             ; dwMessageId
.text:0000397C                 call    _winsock_error_string
.text:00003981                 add     esp, 4
.text:00003984                 mov     ecx, [ebp+arg_0]
.text:00003987                 mov     [ecx+4], eax
.text:0000398A                 jmp     $ret$87032
.text:0000398F ; ---------------------------------------------------------------------------
.text:0000398F
.text:0000398F loc_398F:                               ; CODE XREF: _try_connect+2FAj
.text:0000398F                 mov     edx, [ebp+arg_0]
.text:00003992                 cmp     dword ptr [edx+50h], 0
.text:00003996                 jz      loc_3A3E
.text:0000399C                 cmp     [ebp+var_54], 17h
.text:000039A0                 jnz     short loc_3A09
.text:000039A2                 mov     eax, 17h
.text:000039A7                 mov     [ebp+Dst], ax
.text:000039AB                 mov     esi, esp
.text:000039AD                 mov     ecx, [ebp+arg_0]
.text:000039B0                 movzx   edx, word ptr [ecx+58h]
.text:000039B4                 push    edx
.text:000039B5                 call    ds:_p_htons
.text:000039BB                 cmp     esi, esp
.text:000039BD                 call    __RTC_CheckEsp
.text:000039C2                 mov     [ebp+var_26], ax
.text:000039C6                 mov     eax, [ebp+arg_0]
.text:000039C9                 mov     ecx, [eax+50h]
.text:000039CC                 mov     edx, [ecx+18h]
.text:000039CF                 add     edx, 8
.text:000039D2                 mov     eax, [edx]
.text:000039D4                 mov     [ebp+var_20], eax
.text:000039D7                 mov     ecx, [edx+4]
.text:000039DA                 mov     [ebp+var_1C], ecx
.text:000039DD                 mov     eax, [edx+8]
.text:000039E0                 mov     [ebp+var_18], eax
.text:000039E3                 mov     ecx, [edx+0Ch]
.text:000039E6                 mov     [ebp+var_14], ecx
.text:000039E9                 mov     edx, [ebp+arg_0]
.text:000039EC                 mov     eax, [edx+50h]
.text:000039EF                 mov     ecx, [eax+18h]
.text:000039F2                 mov     edx, [ecx+4]
.text:000039F5                 mov     [ebp+var_24], edx
.text:000039F8                 mov     eax, [ebp+arg_0]
.text:000039FB                 mov     ecx, [eax+50h]
.text:000039FE                 mov     edx, [ecx+18h]
.text:00003A01                 mov     eax, [edx+18h]
.text:00003A04                 mov     [ebp+var_10], eax
.text:00003A07                 jmp     short loc_3A3C
.text:00003A09 ; ---------------------------------------------------------------------------
.text:00003A09
.text:00003A09 loc_3A09:                               ; CODE XREF: _try_connect+324j
.text:00003A09                 mov     ecx, 2
.text:00003A0E                 mov     [ebp+var_40], cx
.text:00003A12                 mov     edx, [ebp+arg_0]
.text:00003A15                 mov     eax, [edx+50h]
.text:00003A18                 mov     ecx, [eax+18h]
.text:00003A1B                 mov     edx, [ecx+4]
.text:00003A1E                 mov     [ebp+var_3C], edx
.text:00003A21                 mov     esi, esp
.text:00003A23                 mov     eax, [ebp+arg_0]
.text:00003A26                 movzx   ecx, word ptr [eax+58h]
.text:00003A2A                 push    ecx
.text:00003A2B                 call    ds:_p_htons
.text:00003A31                 cmp     esi, esp
.text:00003A33                 call    __RTC_CheckEsp
.text:00003A38                 mov     [ebp+var_3E], ax
.text:00003A3C
.text:00003A3C loc_3A3C:                               ; CODE XREF: _try_connect+38Bj
.text:00003A3C                 jmp     short loc_3ABB
.text:00003A3E ; ---------------------------------------------------------------------------
.text:00003A3E
.text:00003A3E loc_3A3E:                               ; CODE XREF: _try_connect+31Aj
.text:00003A3E                 mov     edx, [ebp+arg_0]
.text:00003A41                 mov     eax, [edx+4Ch]
.text:00003A44                 cmp     dword ptr [eax+14h], 0
.text:00003A48                 jz      short loc_3A5B
.text:00003A4A                 mov     ecx, [ebp+arg_0]
.text:00003A4D                 mov     edx, [ecx+4Ch]
.text:00003A50                 mov     eax, [ebp+arg_0]
.text:00003A53                 mov     ecx, [eax+54h]
.text:00003A56                 cmp     ecx, [edx+18h]
.text:00003A59                 jl      short loc_3A72
.text:00003A5B
.text:00003A5B loc_3A5B:                               ; CODE XREF: _try_connect+3CCj
.text:00003A5B                 push    420h            ; Line
.text:00003A60                 push    offset $SG87070 ; "..\\..\\winnet.c"
.text:00003A65                 push    offset $SG87071 ; "sock->addr->addresses && sock->step.cur"...
.text:00003A6A                 call    __wassert
.text:00003A6F ; ---------------------------------------------------------------------------
.text:00003A6F                 add     esp, 0Ch
.text:00003A72
.text:00003A72 loc_3A72:                               ; CODE XREF: _try_connect+3DDj
.text:00003A72                 mov     eax, 2
.text:00003A77                 mov     [ebp+var_40], ax
.text:00003A7B                 mov     ecx, [ebp+arg_0]
.text:00003A7E                 mov     edx, [ecx+4Ch]
.text:00003A81                 mov     eax, [ebp+arg_0]
.text:00003A84                 mov     ecx, [eax+54h]
.text:00003A87                 mov     edx, [edx+14h]
.text:00003A8A                 mov     esi, esp
.text:00003A8C                 mov     eax, [edx+ecx*4]
.text:00003A8F                 push    eax
.text:00003A90                 call    ds:_p_htonl
.text:00003A96                 cmp     esi, esp
.text:00003A98                 call    __RTC_CheckEsp
.text:00003A9D                 mov     [ebp+var_3C], eax
.text:00003AA0                 mov     esi, esp
.text:00003AA2                 mov     ecx, [ebp+arg_0]
.text:00003AA5                 movzx   edx, word ptr [ecx+58h]
.text:00003AA9                 push    edx
.text:00003AAA                 call    ds:_p_htons
.text:00003AB0                 cmp     esi, esp
.text:00003AB2                 call    __RTC_CheckEsp
.text:00003AB7                 mov     [ebp+var_3E], ax
.text:00003ABB
.text:00003ABB loc_3ABB:                               ; CODE XREF: _try_connect:loc_3A3Cj
.text:00003ABB                 push    1
.text:00003ABD                 mov     eax, [ebp+var_8]
.text:00003AC0                 push    eax
.text:00003AC1                 call    _do_select
.text:00003AC6                 add     esp, 8
.text:00003AC9                 mov     [ebp+var_4C], eax
.text:00003ACC                 cmp     [ebp+var_4C], 0
.text:00003AD0                 jz      short loc_3AE7
.text:00003AD2                 mov     ecx, [ebp+arg_0]
.text:00003AD5                 mov     edx, [ebp+var_4C]
.text:00003AD8                 mov     [ecx+4], edx
.text:00003ADB                 mov     [ebp+dwMessageId], 1
.text:00003AE2                 jmp     $ret$87032
.text:00003AE7 ; ---------------------------------------------------------------------------
.text:00003AE7
.text:00003AE7 loc_3AE7:                               ; CODE XREF: _try_connect+454j
.text:00003AE7                 cmp     [ebp+var_54], 17h
.text:00003AEB                 jnz     short loc_3AF8
.text:00003AED                 lea     eax, [ebp+Dst]
.text:00003AF0                 mov     [ebp+var_8C], eax
.text:00003AF6                 jmp     short loc_3B01
.text:00003AF8 ; ---------------------------------------------------------------------------
.text:00003AF8
.text:00003AF8 loc_3AF8:                               ; CODE XREF: _try_connect+46Fj
.text:00003AF8                 lea     ecx, [ebp+var_40]
.text:00003AFB                 mov     [ebp+var_8C], ecx
.text:00003B01
.text:00003B01 loc_3B01:                               ; CODE XREF: _try_connect+47Aj
.text:00003B01                 mov     edx, [ebp+var_54]
.text:00003B04                 sub     edx, 17h
.text:00003B07                 neg     edx
.text:00003B09                 sbb     edx, edx
.text:00003B0B                 and     edx, 0FFFFFFF4h
.text:00003B0E                 add     edx, 1Ch
.text:00003B11                 mov     esi, esp
.text:00003B13                 push    edx
.text:00003B14                 mov     eax, [ebp+var_8C]
.text:00003B1A                 push    eax
.text:00003B1B                 mov     ecx, [ebp+var_8]
.text:00003B1E                 push    ecx
.text:00003B1F                 call    ds:_p_connect
.text:00003B25                 cmp     esi, esp
.text:00003B27                 call    __RTC_CheckEsp
.text:00003B2C                 cmp     eax, 0FFFFFFFFh
.text:00003B2F                 jnz     short loc_3B62
.text:00003B31                 mov     esi, esp
.text:00003B33                 call    dword ptr ds:_p_WSAGetLastError
.text:00003B39                 cmp     esi, esp
.text:00003B3B                 call    __RTC_CheckEsp
.text:00003B40                 mov     [ebp+dwMessageId], eax
.text:00003B43                 cmp     [ebp+dwMessageId], 2733h
.text:00003B4A                 jz      short loc_3B60
.text:00003B4C                 mov     edx, [ebp+dwMessageId]
.text:00003B4F                 push    edx             ; dwMessageId
.text:00003B50                 call    _winsock_error_string
.text:00003B55                 add     esp, 4
.text:00003B58                 mov     ecx, [ebp+arg_0]
.text:00003B5B                 mov     [ecx+4], eax
.text:00003B5E                 jmp     short $ret$87032
.text:00003B60 ; ---------------------------------------------------------------------------
.text:00003B60
.text:00003B60 loc_3B60:                               ; CODE XREF: _try_connect+4CEj
.text:00003B60                 jmp     short loc_3B6C
.text:00003B62 ; ---------------------------------------------------------------------------
.text:00003B62
.text:00003B62 loc_3B62:                               ; CODE XREF: _try_connect+4B3j
.text:00003B62                 mov     edx, [ebp+arg_0]
.text:00003B65                 mov     dword ptr [edx+20h], 1
.text:00003B6C
.text:00003B6C loc_3B6C:                               ; CODE XREF: _try_connect:loc_3B60j
.text:00003B6C                 mov     [ebp+dwMessageId], 0
.text:00003B73
.text:00003B73 $ret$87032:                             ; CODE XREF: _try_connect+131j
.text:00003B73                                         ; _try_connect+30Ej ...
.text:00003B73                 mov     eax, [ebp+arg_0]
.text:00003B76                 push    eax
.text:00003B77                 mov     ecx, ds:_sktree
.text:00003B7D                 push    ecx
.text:00003B7E                 call    _add234
.text:00003B83                 add     esp, 8
.text:00003B86                 cmp     [ebp+dwMessageId], 0
.text:00003B8A                 jz      short loc_3BC6
.text:00003B8C                 mov     esi, esp
.text:00003B8E                 mov     edx, [ebp+dwMessageId]
.text:00003B91                 push    edx
.text:00003B92                 mov     eax, [ebp+arg_0]
.text:00003B95                 mov     ecx, [eax+4]
.text:00003B98                 push    ecx
.text:00003B99                 mov     edx, [ebp+arg_0]
.text:00003B9C                 mov     eax, [edx+58h]
.text:00003B9F                 push    eax
.text:00003BA0                 mov     ecx, [ebp+arg_0]
.text:00003BA3                 mov     edx, [ecx+4Ch]
.text:00003BA6                 push    edx
.text:00003BA7                 push    1
.text:00003BA9                 mov     eax, [ebp+arg_0]
.text:00003BAC                 mov     ecx, [eax+0Ch]
.text:00003BAF                 push    ecx
.text:00003BB0                 mov     edx, [ebp+arg_0]
.text:00003BB3                 mov     eax, [edx+0Ch]
.text:00003BB6                 mov     ecx, [eax]
.text:00003BB8                 mov     edx, [ecx]
.text:00003BBA                 call    edx
.text:00003BBC                 add     esp, 18h
.text:00003BBF                 cmp     esi, esp
.text:00003BC1                 call    __RTC_CheckEsp
.text:00003BC6
.text:00003BC6 loc_3BC6:                               ; CODE XREF: _try_connect+50Ej
.text:00003BC6                 mov     eax, [ebp+dwMessageId]
.text:00003BC9                 push    edx
.text:00003BCA                 mov     ecx, ebp
.text:00003BCC                 push    eax
.text:00003BCD                 lea     edx, $LN45_0
.text:00003BD3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003BD8                 pop     eax
.text:00003BD9                 pop     edx
.text:00003BDA                 pop     edi
.text:00003BDB                 pop     esi
.text:00003BDC                 mov     ecx, [ebp+var_4]
.text:00003BDF                 xor     ecx, ebp
.text:00003BE1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003BE6                 add     esp, 8Ch
.text:00003BEC                 cmp     ebp, esp
.text:00003BEE                 call    __RTC_CheckEsp
.text:00003BF3                 mov     esp, ebp
.text:00003BF5                 pop     ebp
.text:00003BF6                 retn
.text:00003BF6 _try_connect    endp
.text:00003BF6
.text:00003BF6 ; ---------------------------------------------------------------------------
.text:00003BF7                 align 4
.text:00003BF8 $LN45_0         db 5, 3 dup(0)          ; DATA XREF: _try_connect+551o
.text:00003BFC                 dd offset $LN44
.text:00003C00 $LN44           dd 0FFFFFFD8h, 1Ch      ; DATA XREF: .text:00003BFCo
.text:00003C08                 dd offset $LN39_1
.text:00003C0C                 dd 0FFFFFFC0h, 10h
.text:00003C14                 dd offset $LN40_1
.text:00003C18                 dd 0FFFFFFA4h, 4
.text:00003C20                 dd offset $LN41_1
.text:00003C24                 dd 0FFFFFF98h, 4
.text:00003C2C                 dd offset $LN42_0
.text:00003C30                 dd 0FFFFFF8Ch, 4
.text:00003C38                 dd offset $LN43_0
.text:00003C3C $LN43_0         db  62h ; b             ; DATA XREF: .text:00003C38o
.text:00003C3D                 align 2
.text:00003C3E $LN42_0         dw 62h                  ; DATA XREF: .text:00003C2Co
.text:00003C40 $LN41_1         db 62h, 0               ; DATA XREF: .text:00003C20o
.text:00003C42 $LN40_1         dw 61h                  ; DATA XREF: .text:00003C14o
.text:00003C44 $LN39_1         dd 0CC003661h, 0CCCCCCCCh ; DATA XREF: .text:00003C08o
.text:00003C4C
.text:00003C4C ; =============== S U B R O U T I N E =======================================
.text:00003C4C
.text:00003C4C ; Attributes: bp-based frame
.text:00003C4C
.text:00003C4C                 public _sk_newlistener
.text:00003C4C _sk_newlistener proc near               ; CODE XREF: _sk_newlistener+4F1p
.text:00003C4C
.text:00003C4C var_B0          = dword ptr -0B0h
.text:00003C4C var_AC          = dword ptr -0ACh
.text:00003C4C var_A8          = dword ptr -0A8h
.text:00003C4C var_A4          = dword ptr -0A4h
.text:00003C4C var_A0          = dword ptr -0A0h
.text:00003C4C var_9C          = dword ptr -9Ch
.text:00003C4C var_94          = dword ptr -94h
.text:00003C4C var_88          = dword ptr -88h
.text:00003C4C var_84          = dword ptr -84h
.text:00003C4C var_64          = dword ptr -64h
.text:00003C4C var_5C          = dword ptr -5Ch
.text:00003C4C var_54          = dword ptr -54h
.text:00003C4C var_50          = dword ptr -50h
.text:00003C4C var_4C          = dword ptr -4Ch
.text:00003C4C dwMessageId     = dword ptr -48h
.text:00003C4C var_40          = word ptr -40h
.text:00003C4C var_3E          = word ptr -3Eh
.text:00003C4C var_3C          = dword ptr -3Ch
.text:00003C4C Dst             = word ptr -28h
.text:00003C4C var_26          = word ptr -26h
.text:00003C4C var_20          = dword ptr -20h
.text:00003C4C var_1C          = dword ptr -1Ch
.text:00003C4C var_18          = dword ptr -18h
.text:00003C4C var_14          = dword ptr -14h
.text:00003C4C var_8           = dword ptr -8
.text:00003C4C var_4           = dword ptr -4
.text:00003C4C arg_0           = dword ptr  8
.text:00003C4C arg_4           = dword ptr  0Ch
.text:00003C4C arg_8           = dword ptr  10h
.text:00003C4C arg_C           = dword ptr  14h
.text:00003C4C arg_10          = dword ptr  18h
.text:00003C4C
.text:00003C4C                 push    ebp
.text:00003C4D                 mov     ebp, esp
.text:00003C4F                 sub     esp, 0B0h
.text:00003C55                 push    esi
.text:00003C56                 push    edi
.text:00003C57                 lea     edi, [ebp+var_B0]
.text:00003C5D                 mov     ecx, 2Ch ; ','
.text:00003C62                 mov     eax, 0CCCCCCCCh
.text:00003C67                 rep stosd
.text:00003C69                 mov     eax, dword ptr ds:___security_cookie
.text:00003C6E                 xor     eax, ebp
.text:00003C70                 mov     [ebp+var_4], eax
.text:00003C73                 mov     [ebp+var_5C], 1
.text:00003C7A                 push    68h ; 'h'
.text:00003C7C                 push    1
.text:00003C7E                 call    _safemalloc
.text:00003C83                 add     esp, 8
.text:00003C86                 mov     [ebp+var_50], eax
.text:00003C89                 mov     eax, [ebp+var_50]
.text:00003C8C                 mov     dword ptr [eax], offset ?fn_table@?1??sk_newlistener@@9@9 ; `sk_newlistener'::`2'::fn_table
.text:00003C92                 mov     ecx, [ebp+var_50]
.text:00003C95                 mov     dword ptr [ecx+4], 0
.text:00003C9C                 mov     edx, [ebp+var_50]
.text:00003C9F                 mov     eax, [ebp+arg_8]
.text:00003CA2                 mov     [edx+0Ch], eax
.text:00003CA5                 mov     ecx, [ebp+var_50]
.text:00003CA8                 add     ecx, 10h
.text:00003CAB                 push    ecx
.text:00003CAC                 call    _bufchain_init
.text:00003CB1                 add     esp, 4
.text:00003CB4                 mov     edx, [ebp+var_50]
.text:00003CB7                 mov     dword ptr [edx+20h], 0
.text:00003CBE                 mov     eax, [ebp+var_50]
.text:00003CC1                 mov     dword ptr [eax+34h], 0
.text:00003CC8                 mov     ecx, [ebp+var_50]
.text:00003CCB                 mov     dword ptr [ecx+48h], 0
.text:00003CD2                 mov     edx, [ebp+var_50]
.text:00003CD5                 mov     dword ptr [edx+24h], 0
.text:00003CDC                 mov     eax, [ebp+var_50]
.text:00003CDF                 mov     dword ptr [eax+28h], 0
.text:00003CE6                 mov     ecx, [ebp+var_50]
.text:00003CE9                 mov     edx, [ebp+arg_C]
.text:00003CEC                 mov     [ecx+2Ch], edx
.text:00003CEF                 mov     eax, [ebp+var_50]
.text:00003CF2                 mov     dword ptr [eax+5Ch], 0
.text:00003CF9                 mov     ecx, [ebp+var_50]
.text:00003CFC                 mov     dword ptr [ecx+64h], 0
.text:00003D03                 mov     edx, [ebp+var_50]
.text:00003D06                 mov     dword ptr [edx+60h], 0
.text:00003D0D                 mov     eax, [ebp+var_50]
.text:00003D10                 mov     dword ptr [eax+4Ch], 0
.text:00003D17                 cmp     [ebp+arg_10], 1
.text:00003D1B                 jnz     short loc_3D29
.text:00003D1D                 mov     [ebp+var_AC], 2
.text:00003D27                 jmp     short loc_3D3E
.text:00003D29 ; ---------------------------------------------------------------------------
.text:00003D29
.text:00003D29 loc_3D29:                               ; CODE XREF: _sk_newlistener+CFj
.text:00003D29                 xor     ecx, ecx
.text:00003D2B                 cmp     [ebp+arg_10], 2
.text:00003D2F                 setnz   cl
.text:00003D32                 sub     ecx, 1
.text:00003D35                 and     ecx, 17h
.text:00003D38                 mov     [ebp+var_AC], ecx
.text:00003D3E
.text:00003D3E loc_3D3E:                               ; CODE XREF: _sk_newlistener+DBj
.text:00003D3E                 mov     edx, [ebp+var_AC]
.text:00003D44                 mov     [ebp+var_64], edx
.text:00003D47                 cmp     [ebp+var_64], 0
.text:00003D4B                 jnz     short loc_3D54
.text:00003D4D                 mov     [ebp+var_64], 2
.text:00003D54
.text:00003D54 loc_3D54:                               ; CODE XREF: _sk_newlistener+FFj
.text:00003D54                 mov     esi, esp
.text:00003D56                 push    0
.text:00003D58                 push    1
.text:00003D5A                 mov     eax, [ebp+var_64]
.text:00003D5D                 push    eax
.text:00003D5E                 call    ds:_p_socket
.text:00003D64                 cmp     esi, esp
.text:00003D66                 call    __RTC_CheckEsp
.text:00003D6B                 mov     [ebp+var_8], eax
.text:00003D6E                 mov     ecx, [ebp+var_50]
.text:00003D71                 mov     edx, [ebp+var_8]
.text:00003D74                 mov     [ecx+8], edx
.text:00003D77                 cmp     [ebp+var_8], 0FFFFFFFFh
.text:00003D7B                 jnz     short loc_3DA9
.text:00003D7D                 mov     esi, esp
.text:00003D7F                 call    dword ptr ds:_p_WSAGetLastError
.text:00003D85                 cmp     esi, esp
.text:00003D87                 call    __RTC_CheckEsp
.text:00003D8C                 mov     [ebp+dwMessageId], eax
.text:00003D8F                 mov     eax, [ebp+dwMessageId]
.text:00003D92                 push    eax             ; dwMessageId
.text:00003D93                 call    _winsock_error_string
.text:00003D98                 add     esp, 4
.text:00003D9B                 mov     ecx, [ebp+var_50]
.text:00003D9E                 mov     [ecx+4], eax
.text:00003DA1                 mov     eax, [ebp+var_50]
.text:00003DA4                 jmp     loc_418C
.text:00003DA9 ; ---------------------------------------------------------------------------
.text:00003DA9
.text:00003DA9 loc_3DA9:                               ; CODE XREF: _sk_newlistener+12Fj
.text:00003DA9                 mov     edx, [ebp+var_50]
.text:00003DAC                 mov     dword ptr [edx+38h], 0
.text:00003DB3                 mov     esi, esp
.text:00003DB5                 push    4
.text:00003DB7                 lea     eax, [ebp+var_5C]
.text:00003DBA                 push    eax
.text:00003DBB                 push    4
.text:00003DBD                 push    0FFFFh
.text:00003DC2                 mov     ecx, [ebp+var_8]
.text:00003DC5                 push    ecx
.text:00003DC6                 call    ds:_p_setsockopt
.text:00003DCC                 cmp     esi, esp
.text:00003DCE                 call    __RTC_CheckEsp
.text:00003DD3                 cmp     [ebp+var_64], 17h
.text:00003DD7                 jnz     loc_3F24
.text:00003DDD                 push    1Ch             ; Size
.text:00003DDF                 push    0               ; Val
.text:00003DE1                 lea     edx, [ebp+Dst]
.text:00003DE4                 push    edx             ; Dst
.text:00003DE5                 call    _memset
.text:00003DEA                 add     esp, 0Ch
.text:00003DED                 mov     eax, 17h
.text:00003DF2                 mov     [ebp+Dst], ax
.text:00003DF6                 cmp     [ebp+arg_C], 0
.text:00003DFA                 jz      short loc_3E21
.text:00003DFC                 mov     ecx, dword ptr _in6addr_loopback.u
.text:00003E02                 mov     [ebp+var_20], ecx
.text:00003E05                 mov     edx, dword ptr _in6addr_loopback.u+4
.text:00003E0B                 mov     [ebp+var_1C], edx
.text:00003E0E                 mov     eax, dword ptr _in6addr_loopback.u+8
.text:00003E13                 mov     [ebp+var_18], eax
.text:00003E16                 mov     ecx, dword ptr _in6addr_loopback.u+0Ch
.text:00003E1C                 mov     [ebp+var_14], ecx
.text:00003E1F                 jmp     short loc_3E44
.text:00003E21 ; ---------------------------------------------------------------------------
.text:00003E21
.text:00003E21 loc_3E21:                               ; CODE XREF: _sk_newlistener+1AEj
.text:00003E21                 mov     edx, dword ptr _in6addr_any.u
.text:00003E27                 mov     [ebp+var_20], edx
.text:00003E2A                 mov     eax, dword ptr _in6addr_any.u+4
.text:00003E2F                 mov     [ebp+var_1C], eax
.text:00003E32                 mov     ecx, dword ptr _in6addr_any.u+8
.text:00003E38                 mov     [ebp+var_18], ecx
.text:00003E3B                 mov     edx, dword ptr _in6addr_any.u+0Ch
.text:00003E41                 mov     [ebp+var_14], edx
.text:00003E44
.text:00003E44 loc_3E44:                               ; CODE XREF: _sk_newlistener+1D3j
.text:00003E44                 cmp     [ebp+arg_0], 0
.text:00003E48                 jz      loc_3F07
.text:00003E4E                 cmp     ds:_p_getaddrinfo, 0
.text:00003E55                 jz      loc_3F07
.text:00003E5B                 push    20h ; ' '       ; Size
.text:00003E5D                 push    0               ; Val
.text:00003E5F                 lea     eax, [ebp+var_88]
.text:00003E65                 push    eax             ; Dst
.text:00003E66                 call    _memset
.text:00003E6B                 add     esp, 0Ch
.text:00003E6E                 mov     [ebp+var_84], 17h
.text:00003E78                 mov     [ebp+var_88], 0
.text:00003E82                 mov     ecx, [ebp+arg_0]
.text:00003E85                 push    ecx
.text:00003E86                 call    _host_strduptrim
.text:00003E8B                 add     esp, 4
.text:00003E8E                 mov     [ebp+var_A0], eax
.text:00003E94                 mov     esi, esp
.text:00003E96                 lea     edx, [ebp+var_94]
.text:00003E9C                 push    edx
.text:00003E9D                 lea     eax, [ebp+var_88]
.text:00003EA3                 push    eax
.text:00003EA4                 push    0
.text:00003EA6                 mov     ecx, [ebp+var_A0]
.text:00003EAC                 push    ecx
.text:00003EAD                 call    ds:_p_getaddrinfo
.text:00003EB3                 cmp     esi, esp
.text:00003EB5                 call    __RTC_CheckEsp
.text:00003EBA                 mov     [ebp+var_9C], eax
.text:00003EC0                 mov     edx, [ebp+var_A0]
.text:00003EC6                 push    edx
.text:00003EC7                 call    _safefree
.text:00003ECC                 add     esp, 4
.text:00003ECF                 cmp     [ebp+var_9C], 0
.text:00003ED6                 jnz     short loc_3F07
.text:00003ED8                 mov     eax, [ebp+var_94]
.text:00003EDE                 cmp     dword ptr [eax+4], 17h
.text:00003EE2                 jnz     short loc_3F07
.text:00003EE4                 mov     ecx, [ebp+var_94]
.text:00003EEA                 mov     edx, [ecx+18h]
.text:00003EED                 add     edx, 8
.text:00003EF0                 mov     eax, [edx]
.text:00003EF2                 mov     [ebp+var_20], eax
.text:00003EF5                 mov     ecx, [edx+4]
.text:00003EF8                 mov     [ebp+var_1C], ecx
.text:00003EFB                 mov     eax, [edx+8]
.text:00003EFE                 mov     [ebp+var_18], eax
.text:00003F01                 mov     ecx, [edx+0Ch]
.text:00003F04                 mov     [ebp+var_14], ecx
.text:00003F07
.text:00003F07 loc_3F07:                               ; CODE XREF: _sk_newlistener+1FCj
.text:00003F07                                         ; _sk_newlistener+209j ...
.text:00003F07                 mov     esi, esp
.text:00003F09                 movzx   edx, word ptr [ebp+arg_4]
.text:00003F0D                 push    edx
.text:00003F0E                 call    ds:_p_htons
.text:00003F14                 cmp     esi, esp
.text:00003F16                 call    __RTC_CheckEsp
.text:00003F1B                 mov     [ebp+var_26], ax
.text:00003F1F                 jmp     loc_3FDF
.text:00003F24 ; ---------------------------------------------------------------------------
.text:00003F24
.text:00003F24 loc_3F24:                               ; CODE XREF: _sk_newlistener+18Bj
.text:00003F24                 mov     [ebp+var_A4], 0
.text:00003F2E                 mov     eax, 2
.text:00003F33                 mov     [ebp+var_40], ax
.text:00003F37                 cmp     [ebp+arg_0], 0
.text:00003F3B                 jz      short loc_3F8B
.text:00003F3D                 mov     esi, esp
.text:00003F3F                 mov     ecx, [ebp+arg_0]
.text:00003F42                 push    ecx
.text:00003F43                 call    ds:_p_inet_addr
.text:00003F49                 cmp     esi, esp
.text:00003F4B                 call    __RTC_CheckEsp
.text:00003F50                 mov     [ebp+var_3C], eax
.text:00003F53                 cmp     [ebp+var_3C], 0FFFFFFFFh
.text:00003F57                 jz      short loc_3F8B
.text:00003F59                 mov     esi, esp
.text:00003F5B                 mov     edx, [ebp+var_3C]
.text:00003F5E                 push    edx
.text:00003F5F                 call    ds:_p_ntohl
.text:00003F65                 cmp     esi, esp
.text:00003F67                 call    __RTC_CheckEsp
.text:00003F6C                 and     eax, 0FF000000h
.text:00003F71                 xor     ecx, ecx
.text:00003F73                 cmp     eax, 7F000000h
.text:00003F78                 setz    cl
.text:00003F7B                 mov     edx, [ebp+var_50]
.text:00003F7E                 mov     [edx+2Ch], ecx
.text:00003F81                 mov     [ebp+var_A4], 1
.text:00003F8B
.text:00003F8B loc_3F8B:                               ; CODE XREF: _sk_newlistener+2EFj
.text:00003F8B                                         ; _sk_newlistener+30Bj
.text:00003F8B                 cmp     [ebp+var_A4], 0
.text:00003F92                 jnz     short loc_3FC7
.text:00003F94                 cmp     [ebp+arg_C], 0
.text:00003F98                 jz      short loc_3FB3
.text:00003F9A                 mov     esi, esp
.text:00003F9C                 push    7F000001h
.text:00003FA1                 call    ds:_p_htonl
.text:00003FA7                 cmp     esi, esp
.text:00003FA9                 call    __RTC_CheckEsp
.text:00003FAE                 mov     [ebp+var_3C], eax
.text:00003FB1                 jmp     short loc_3FC7
.text:00003FB3 ; ---------------------------------------------------------------------------
.text:00003FB3
.text:00003FB3 loc_3FB3:                               ; CODE XREF: _sk_newlistener+34Cj
.text:00003FB3                 mov     esi, esp
.text:00003FB5                 push    0
.text:00003FB7                 call    ds:_p_htonl
.text:00003FBD                 cmp     esi, esp
.text:00003FBF                 call    __RTC_CheckEsp
.text:00003FC4                 mov     [ebp+var_3C], eax
.text:00003FC7
.text:00003FC7 loc_3FC7:                               ; CODE XREF: _sk_newlistener+346j
.text:00003FC7                                         ; _sk_newlistener+365j
.text:00003FC7                 mov     esi, esp
.text:00003FC9                 movzx   eax, word ptr [ebp+arg_4]
.text:00003FCD                 push    eax
.text:00003FCE                 call    ds:_p_htons
.text:00003FD4                 cmp     esi, esp
.text:00003FD6                 call    __RTC_CheckEsp
.text:00003FDB                 mov     [ebp+var_3E], ax
.text:00003FDF
.text:00003FDF loc_3FDF:                               ; CODE XREF: _sk_newlistener+2D3j
.text:00003FDF                 cmp     [ebp+var_64], 17h
.text:00003FE3                 jnz     short loc_3FF0
.text:00003FE5                 lea     ecx, [ebp+Dst]
.text:00003FE8                 mov     [ebp+var_B0], ecx
.text:00003FEE                 jmp     short loc_3FF9
.text:00003FF0 ; ---------------------------------------------------------------------------
.text:00003FF0
.text:00003FF0 loc_3FF0:                               ; CODE XREF: _sk_newlistener+397j
.text:00003FF0                 lea     edx, [ebp+var_40]
.text:00003FF3                 mov     [ebp+var_B0], edx
.text:00003FF9
.text:00003FF9 loc_3FF9:                               ; CODE XREF: _sk_newlistener+3A2j
.text:00003FF9                 mov     eax, [ebp+var_64]
.text:00003FFC                 sub     eax, 17h
.text:00003FFF                 neg     eax
.text:00004001                 sbb     eax, eax
.text:00004003                 and     eax, 0FFFFFFF4h
.text:00004006                 add     eax, 1Ch
.text:00004009                 mov     esi, esp
.text:0000400B                 push    eax
.text:0000400C                 mov     ecx, [ebp+var_B0]
.text:00004012                 push    ecx
.text:00004013                 mov     edx, [ebp+var_8]
.text:00004016                 push    edx
.text:00004017                 call    ds:_p_bind
.text:0000401D                 cmp     esi, esp
.text:0000401F                 call    __RTC_CheckEsp
.text:00004024                 mov     [ebp+var_54], eax
.text:00004027                 cmp     [ebp+var_54], 0FFFFFFFFh
.text:0000402B                 jz      short loc_4036
.text:0000402D                 mov     [ebp+dwMessageId], 0
.text:00004034                 jmp     short loc_4048
.text:00004036 ; ---------------------------------------------------------------------------
.text:00004036
.text:00004036 loc_4036:                               ; CODE XREF: _sk_newlistener+3DFj
.text:00004036                 mov     esi, esp
.text:00004038                 call    dword ptr ds:_p_WSAGetLastError
.text:0000403E                 cmp     esi, esp
.text:00004040                 call    __RTC_CheckEsp
.text:00004045                 mov     [ebp+dwMessageId], eax
.text:00004048
.text:00004048 loc_4048:                               ; CODE XREF: _sk_newlistener+3E8j
.text:00004048                 cmp     [ebp+dwMessageId], 0
.text:0000404C                 jz      short loc_407B
.text:0000404E                 mov     esi, esp
.text:00004050                 mov     eax, [ebp+var_8]
.text:00004053                 push    eax
.text:00004054                 call    ds:_p_closesocket
.text:0000405A                 cmp     esi, esp
.text:0000405C                 call    __RTC_CheckEsp
.text:00004061                 mov     ecx, [ebp+dwMessageId]
.text:00004064                 push    ecx             ; dwMessageId
.text:00004065                 call    _winsock_error_string
.text:0000406A                 add     esp, 4
.text:0000406D                 mov     edx, [ebp+var_50]
.text:00004070                 mov     [edx+4], eax
.text:00004073                 mov     eax, [ebp+var_50]
.text:00004076                 jmp     loc_418C
.text:0000407B ; ---------------------------------------------------------------------------
.text:0000407B
.text:0000407B loc_407B:                               ; CODE XREF: _sk_newlistener+400j
.text:0000407B                 mov     esi, esp
.text:0000407D                 push    7FFFFFFFh
.text:00004082                 mov     eax, [ebp+var_8]
.text:00004085                 push    eax
.text:00004086                 call    ds:_p_listen
.text:0000408C                 cmp     esi, esp
.text:0000408E                 call    __RTC_CheckEsp
.text:00004093                 cmp     eax, 0FFFFFFFFh
.text:00004096                 jnz     short loc_40D1
.text:00004098                 mov     esi, esp
.text:0000409A                 mov     ecx, [ebp+var_8]
.text:0000409D                 push    ecx
.text:0000409E                 call    ds:_p_closesocket
.text:000040A4                 cmp     esi, esp
.text:000040A6                 call    __RTC_CheckEsp
.text:000040AB                 mov     esi, esp
.text:000040AD                 call    dword ptr ds:_p_WSAGetLastError
.text:000040B3                 cmp     esi, esp
.text:000040B5                 call    __RTC_CheckEsp
.text:000040BA                 push    eax             ; dwMessageId
.text:000040BB                 call    _winsock_error_string
.text:000040C0                 add     esp, 4
.text:000040C3                 mov     edx, [ebp+var_50]
.text:000040C6                 mov     [edx+4], eax
.text:000040C9                 mov     eax, [ebp+var_50]
.text:000040CC                 jmp     loc_418C
.text:000040D1 ; ---------------------------------------------------------------------------
.text:000040D1
.text:000040D1 loc_40D1:                               ; CODE XREF: _sk_newlistener+44Aj
.text:000040D1                 push    1
.text:000040D3                 mov     eax, [ebp+var_8]
.text:000040D6                 push    eax
.text:000040D7                 call    _do_select
.text:000040DC                 add     esp, 8
.text:000040DF                 mov     [ebp+var_4C], eax
.text:000040E2                 cmp     [ebp+var_4C], 0
.text:000040E6                 jz      short loc_410C
.text:000040E8                 mov     esi, esp
.text:000040EA                 mov     ecx, [ebp+var_8]
.text:000040ED                 push    ecx
.text:000040EE                 call    ds:_p_closesocket
.text:000040F4                 cmp     esi, esp
.text:000040F6                 call    __RTC_CheckEsp
.text:000040FB                 mov     edx, [ebp+var_50]
.text:000040FE                 mov     eax, [ebp+var_4C]
.text:00004101                 mov     [edx+4], eax
.text:00004104                 mov     eax, [ebp+var_50]
.text:00004107                 jmp     loc_418C
.text:0000410C ; ---------------------------------------------------------------------------
.text:0000410C
.text:0000410C loc_410C:                               ; CODE XREF: _sk_newlistener+49Aj
.text:0000410C                 mov     ecx, [ebp+var_50]
.text:0000410F                 push    ecx
.text:00004110                 mov     edx, ds:_sktree
.text:00004116                 push    edx
.text:00004117                 call    _add234
.text:0000411C                 add     esp, 8
.text:0000411F                 cmp     [ebp+var_64], 2
.text:00004123                 jnz     short loc_4189
.text:00004125                 cmp     [ebp+arg_10], 0
.text:00004129                 jnz     short loc_4189
.text:0000412B                 push    2
.text:0000412D                 mov     eax, [ebp+arg_C]
.text:00004130                 push    eax
.text:00004131                 mov     ecx, [ebp+arg_8]
.text:00004134                 push    ecx
.text:00004135                 mov     edx, [ebp+arg_4]
.text:00004138                 push    edx
.text:00004139                 mov     eax, [ebp+arg_0]
.text:0000413C                 push    eax
.text:0000413D                 call    _sk_newlistener
.text:00004142                 add     esp, 14h
.text:00004145                 mov     [ebp+var_A8], eax
.text:0000414B                 cmp     [ebp+var_A8], 0
.text:00004152                 jz      short loc_4189
.text:00004154                 mov     ecx, [ebp+var_A8]
.text:0000415A                 cmp     dword ptr [ecx+4], 0
.text:0000415E                 jnz     short loc_417A
.text:00004160                 mov     edx, [ebp+var_A8]
.text:00004166                 mov     eax, [ebp+var_50]
.text:00004169                 mov     [edx+60h], eax
.text:0000416C                 mov     ecx, [ebp+var_50]
.text:0000416F                 mov     edx, [ebp+var_A8]
.text:00004175                 mov     [ecx+64h], edx
.text:00004178                 jmp     short loc_4189
.text:0000417A ; ---------------------------------------------------------------------------
.text:0000417A
.text:0000417A loc_417A:                               ; CODE XREF: _sk_newlistener+512j
.text:0000417A                 mov     eax, [ebp+var_A8]
.text:00004180                 push    eax
.text:00004181                 call    _safefree
.text:00004186                 add     esp, 4
.text:00004189
.text:00004189 loc_4189:                               ; CODE XREF: _sk_newlistener+4D7j
.text:00004189                                         ; _sk_newlistener+4DDj ...
.text:00004189                 mov     eax, [ebp+var_50]
.text:0000418C
.text:0000418C loc_418C:                               ; CODE XREF: _sk_newlistener+158j
.text:0000418C                                         ; _sk_newlistener+42Aj ...
.text:0000418C                 push    edx
.text:0000418D                 mov     ecx, ebp
.text:0000418F                 push    eax
.text:00004190                 lea     edx, $LN35_0
.text:00004196                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000419B                 pop     eax
.text:0000419C                 pop     edx
.text:0000419D                 pop     edi
.text:0000419E                 pop     esi
.text:0000419F                 mov     ecx, [ebp+var_4]
.text:000041A2                 xor     ecx, ebp
.text:000041A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000041A9                 add     esp, 0B0h
.text:000041AF                 cmp     ebp, esp
.text:000041B1                 call    __RTC_CheckEsp
.text:000041B6                 mov     esp, ebp
.text:000041B8                 pop     ebp
.text:000041B9                 retn
.text:000041B9 _sk_newlistener endp
.text:000041B9
.text:000041B9 ; ---------------------------------------------------------------------------
.text:000041BA                 align 4
.text:000041BC $LN35_0         dd 5                    ; DATA XREF: _sk_newlistener+544o
.text:000041C0                 dd offset $LN34_1
.text:000041C4 $LN34_1         dd 0FFFFFFD8h, 1Ch      ; DATA XREF: .text:000041C0o
.text:000041CC                 dd offset $LN29_0       ; "a6"
.text:000041D0                 dd 0FFFFFFC0h, 10h
.text:000041D8                 dd offset $LN30_0       ; "a"
.text:000041DC                 dd 0FFFFFFA4h, 4
.text:000041E4                 dd offset $LN31_0       ; "on"
.text:000041E8                 dd 0FFFFFF78h, 20h
.text:000041F0                 dd offset $LN32_0       ; "hints"
.text:000041F4                 dd 0FFFFFF6Ch, 4
.text:000041FC                 dd offset $LN33_0
.text:00004200 $LN33_0         db 61h, 69h, 0          ; DATA XREF: .text:000041FCo
.text:00004203 $LN32_0         db 'hints',0            ; DATA XREF: .text:000041F0o
.text:00004209 $LN31_0         db 'on',0               ; DATA XREF: .text:000041E4o
.text:0000420C $LN30_0         db 'a',0                ; DATA XREF: .text:000041D8o
.text:0000420E $LN29_0         db 'a6',0               ; DATA XREF: .text:000041CCo
.text:00004211                 db 0Bh dup(0CCh)
.text:0000421C
.text:0000421C ; =============== S U B R O U T I N E =======================================
.text:0000421C
.text:0000421C ; Attributes: bp-based frame
.text:0000421C
.text:0000421C _sk_tcp_close   proc near               ; CODE XREF: _sk_tcp_close+22p
.text:0000421C                                         ; DATA XREF: .rdata:00000024o ...
.text:0000421C
.text:0000421C var_4           = dword ptr -4
.text:0000421C arg_0           = dword ptr  8
.text:0000421C
.text:0000421C                 push    ebp
.text:0000421D                 mov     ebp, esp
.text:0000421F                 push    ecx
.text:00004220                 push    esi
.text:00004221                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004228                 mov     eax, [ebp+arg_0]
.text:0000422B                 mov     [ebp+var_4], eax
.text:0000422E                 mov     ecx, [ebp+var_4]
.text:00004231                 cmp     dword ptr [ecx+64h], 0
.text:00004235                 jz      short loc_4246
.text:00004237                 mov     edx, [ebp+var_4]
.text:0000423A                 mov     eax, [edx+64h]
.text:0000423D                 push    eax
.text:0000423E                 call    _sk_tcp_close
.text:00004243                 add     esp, 4
.text:00004246
.text:00004246 loc_4246:                               ; CODE XREF: _sk_tcp_close+19j
.text:00004246                 mov     ecx, [ebp+var_4]
.text:00004249                 push    ecx
.text:0000424A                 mov     edx, ds:_sktree
.text:00004250                 push    edx
.text:00004251                 call    _del234
.text:00004256                 add     esp, 8
.text:00004259                 push    0
.text:0000425B                 mov     eax, [ebp+var_4]
.text:0000425E                 mov     ecx, [eax+8]
.text:00004261                 push    ecx
.text:00004262                 call    _do_select
.text:00004267                 add     esp, 8
.text:0000426A                 mov     esi, esp
.text:0000426C                 mov     edx, [ebp+var_4]
.text:0000426F                 mov     eax, [edx+8]
.text:00004272                 push    eax
.text:00004273                 call    ds:_p_closesocket
.text:00004279                 cmp     esi, esp
.text:0000427B                 call    __RTC_CheckEsp
.text:00004280                 mov     ecx, [ebp+var_4]
.text:00004283                 cmp     dword ptr [ecx+4Ch], 0
.text:00004287                 jz      short loc_4298
.text:00004289                 mov     edx, [ebp+var_4]
.text:0000428C                 mov     eax, [edx+4Ch]
.text:0000428F                 push    eax
.text:00004290                 call    _sk_addr_free
.text:00004295                 add     esp, 4
.text:00004298
.text:00004298 loc_4298:                               ; CODE XREF: _sk_tcp_close+6Bj
.text:00004298                 mov     ecx, [ebp+var_4]
.text:0000429B                 push    ecx
.text:0000429C                 call    _safefree
.text:000042A1                 add     esp, 4
.text:000042A4                 pop     esi
.text:000042A5                 add     esp, 4
.text:000042A8                 cmp     ebp, esp
.text:000042AA                 call    __RTC_CheckEsp
.text:000042AF                 mov     esp, ebp
.text:000042B1                 pop     ebp
.text:000042B2                 retn
.text:000042B2 _sk_tcp_close   endp
.text:000042B2
.text:000042B2 ; ---------------------------------------------------------------------------
.text:000042B3                 db 9 dup(0CCh)
.text:000042BC
.text:000042BC ; =============== S U B R O U T I N E =======================================
.text:000042BC
.text:000042BC ; Attributes: bp-based frame
.text:000042BC
.text:000042BC                 public _try_send
.text:000042BC _try_send       proc near               ; CODE XREF: _sk_tcp_write+55p
.text:000042BC                                         ; _sk_tcp_write_oob+8Ap ...
.text:000042BC
.text:000042BC var_28          = dword ptr -28h
.text:000042BC var_24          = dword ptr -24h
.text:000042BC var_1C          = dword ptr -1Ch
.text:000042BC var_10          = dword ptr -10h
.text:000042BC dwMessageId     = dword ptr -8
.text:000042BC var_4           = dword ptr -4
.text:000042BC arg_0           = dword ptr  8
.text:000042BC
.text:000042BC                 push    ebp
.text:000042BD                 mov     ebp, esp
.text:000042BF                 sub     esp, 28h
.text:000042C2                 push    esi
.text:000042C3                 push    edi
.text:000042C4                 lea     edi, [ebp+var_28]
.text:000042C7                 mov     ecx, 0Ah
.text:000042CC                 mov     eax, 0CCCCCCCCh
.text:000042D1                 rep stosd
.text:000042D3
.text:000042D3 loc_42D3:                               ; CODE XREF: _try_send:loc_448Bj
.text:000042D3                 mov     eax, [ebp+arg_0]
.text:000042D6                 cmp     dword ptr [eax+34h], 0
.text:000042DA                 jnz     short loc_42F3
.text:000042DC                 mov     ecx, [ebp+arg_0]
.text:000042DF                 add     ecx, 10h
.text:000042E2                 push    ecx
.text:000042E3                 call    _bufchain_size
.text:000042E8                 add     esp, 4
.text:000042EB                 test    eax, eax
.text:000042ED                 jle     loc_4490
.text:000042F3
.text:000042F3 loc_42F3:                               ; CODE XREF: _try_send+1Ej
.text:000042F3                 mov     edx, [ebp+arg_0]
.text:000042F6                 cmp     dword ptr [edx+34h], 0
.text:000042FA                 jz      short loc_4317
.text:000042FC                 mov     [ebp+var_24], 1
.text:00004303                 mov     eax, [ebp+arg_0]
.text:00004306                 mov     ecx, [eax+34h]
.text:00004309                 mov     [ebp+var_1C], ecx
.text:0000430C                 mov     edx, [ebp+arg_0]
.text:0000430F                 add     edx, 30h ; '0'
.text:00004312                 mov     [ebp+var_10], edx
.text:00004315                 jmp     short loc_4335
.text:00004317 ; ---------------------------------------------------------------------------
.text:00004317
.text:00004317 loc_4317:                               ; CODE XREF: _try_send+3Ej
.text:00004317                 mov     [ebp+var_24], 0
.text:0000431E                 lea     eax, [ebp+var_1C]
.text:00004321                 push    eax
.text:00004322                 lea     ecx, [ebp+var_10]
.text:00004325                 push    ecx
.text:00004326                 mov     edx, [ebp+arg_0]
.text:00004329                 add     edx, 10h
.text:0000432C                 push    edx
.text:0000432D                 call    _bufchain_prefix
.text:00004332                 add     esp, 0Ch
.text:00004335
.text:00004335 loc_4335:                               ; CODE XREF: _try_send+59j
.text:00004335                 mov     esi, esp
.text:00004337                 mov     eax, [ebp+var_24]
.text:0000433A                 push    eax
.text:0000433B                 mov     ecx, [ebp+var_1C]
.text:0000433E                 push    ecx
.text:0000433F                 mov     edx, [ebp+var_10]
.text:00004342                 push    edx
.text:00004343                 mov     eax, [ebp+arg_0]
.text:00004346                 mov     ecx, [eax+8]
.text:00004349                 push    ecx
.text:0000434A                 call    ds:_p_send
.text:00004350                 cmp     esi, esp
.text:00004352                 call    __RTC_CheckEsp
.text:00004357                 mov     [ebp+var_4], eax
.text:0000435A                 mov     edx, [ebp+var_4]
.text:0000435D                 push    edx
.text:0000435E                 call    _noise_ultralight
.text:00004363                 add     esp, 4
.text:00004366                 cmp     [ebp+var_4], 0
.text:0000436A                 jg      loc_442C
.text:00004370                 cmp     [ebp+var_4], 0
.text:00004374                 jge     short loc_438A
.text:00004376                 mov     esi, esp
.text:00004378                 call    dword ptr ds:_p_WSAGetLastError
.text:0000437E                 cmp     esi, esp
.text:00004380                 call    __RTC_CheckEsp
.text:00004385                 mov     [ebp+var_28], eax
.text:00004388                 jmp     short loc_4391
.text:0000438A ; ---------------------------------------------------------------------------
.text:0000438A
.text:0000438A loc_438A:                               ; CODE XREF: _try_send+B8j
.text:0000438A                 mov     [ebp+var_28], 0
.text:00004391
.text:00004391 loc_4391:                               ; CODE XREF: _try_send+CCj
.text:00004391                 mov     eax, [ebp+var_28]
.text:00004394                 mov     [ebp+dwMessageId], eax
.text:00004397                 cmp     [ebp+dwMessageId], 2710h
.text:0000439E                 jnb     short loc_43A6
.text:000043A0                 cmp     [ebp+var_4], 0
.text:000043A4                 jl      short loc_43AF
.text:000043A6
.text:000043A6 loc_43A6:                               ; CODE XREF: _try_send+E2j
.text:000043A6                 cmp     [ebp+dwMessageId], 2733h
.text:000043AD                 jnz     short loc_43C0
.text:000043AF
.text:000043AF loc_43AF:                               ; CODE XREF: _try_send+E8j
.text:000043AF                 mov     ecx, [ebp+arg_0]
.text:000043B2                 mov     dword ptr [ecx+20h], 0
.text:000043B9                 jmp     loc_44BB
.text:000043BE ; ---------------------------------------------------------------------------
.text:000043BE                 jmp     short loc_442A
.text:000043C0 ; ---------------------------------------------------------------------------
.text:000043C0
.text:000043C0 loc_43C0:                               ; CODE XREF: _try_send+F1j
.text:000043C0                 cmp     [ebp+var_4], 0
.text:000043C4                 jz      short loc_43D8
.text:000043C6                 cmp     [ebp+dwMessageId], 2745h
.text:000043CD                 jz      short loc_43D8
.text:000043CF                 cmp     [ebp+dwMessageId], 2746h
.text:000043D6                 jnz     short loc_43F9
.text:000043D8
.text:000043D8 loc_43D8:                               ; CODE XREF: _try_send+108j
.text:000043D8                                         ; _try_send+111j
.text:000043D8                 mov     edx, [ebp+arg_0]
.text:000043DB                 mov     eax, [ebp+dwMessageId]
.text:000043DE                 mov     [edx+5Ch], eax
.text:000043E1                 mov     ecx, [ebp+arg_0]
.text:000043E4                 push    ecx
.text:000043E5                 push    offset _socket_error_callback
.text:000043EA                 call    _queue_toplevel_callback
.text:000043EF                 add     esp, 8
.text:000043F2                 jmp     loc_44BB
.text:000043F7 ; ---------------------------------------------------------------------------
.text:000043F7                 jmp     short loc_442A
.text:000043F9 ; ---------------------------------------------------------------------------
.text:000043F9
.text:000043F9 loc_43F9:                               ; CODE XREF: _try_send+11Aj
.text:000043F9                 mov     edx, [ebp+dwMessageId]
.text:000043FC                 push    edx             ; dwMessageId
.text:000043FD                 call    _winsock_error_string
.text:00004402                 add     esp, 4
.text:00004405                 push    eax
.text:00004406                 push    0
.text:00004408                 call    _logevent
.text:0000440D                 add     esp, 8
.text:00004410                 mov     eax, [ebp+dwMessageId]
.text:00004413                 push    eax             ; dwMessageId
.text:00004414                 call    _winsock_error_string
.text:00004419                 add     esp, 4
.text:0000441C                 push    eax
.text:0000441D                 push    offset $SG87225 ; "%s"
.text:00004422                 call    _fatalbox
.text:00004427                 add     esp, 8
.text:0000442A
.text:0000442A loc_442A:                               ; CODE XREF: _try_send+102j
.text:0000442A                                         ; _try_send+13Bj
.text:0000442A                 jmp     short loc_448B
.text:0000442C ; ---------------------------------------------------------------------------
.text:0000442C
.text:0000442C loc_442C:                               ; CODE XREF: _try_send+AEj
.text:0000442C                 mov     ecx, [ebp+arg_0]
.text:0000442F                 cmp     dword ptr [ecx+34h], 0
.text:00004433                 jz      short loc_4478
.text:00004435                 mov     edx, [ebp+var_4]
.text:00004438                 cmp     edx, [ebp+var_1C]
.text:0000443B                 jge     short loc_446C
.text:0000443D                 mov     eax, [ebp+var_1C]
.text:00004440                 sub     eax, [ebp+var_4]
.text:00004443                 push    eax             ; Size
.text:00004444                 mov     ecx, [ebp+var_4]
.text:00004447                 mov     edx, [ebp+arg_0]
.text:0000444A                 lea     eax, [edx+ecx+30h]
.text:0000444E                 push    eax             ; Src
.text:0000444F                 mov     ecx, [ebp+arg_0]
.text:00004452                 add     ecx, 30h ; '0'
.text:00004455                 push    ecx             ; Dst
.text:00004456                 call    _memmove
.text:0000445B                 add     esp, 0Ch
.text:0000445E                 mov     edx, [ebp+var_1C]
.text:00004461                 sub     edx, [ebp+var_4]
.text:00004464                 mov     eax, [ebp+arg_0]
.text:00004467                 mov     [eax+34h], edx
.text:0000446A                 jmp     short loc_4476
.text:0000446C ; ---------------------------------------------------------------------------
.text:0000446C
.text:0000446C loc_446C:                               ; CODE XREF: _try_send+17Fj
.text:0000446C                 mov     ecx, [ebp+arg_0]
.text:0000446F                 mov     dword ptr [ecx+34h], 0
.text:00004476
.text:00004476 loc_4476:                               ; CODE XREF: _try_send+1AEj
.text:00004476                 jmp     short loc_448B
.text:00004478 ; ---------------------------------------------------------------------------
.text:00004478
.text:00004478 loc_4478:                               ; CODE XREF: _try_send+177j
.text:00004478                 mov     edx, [ebp+var_4]
.text:0000447B                 push    edx
.text:0000447C                 mov     eax, [ebp+arg_0]
.text:0000447F                 add     eax, 10h
.text:00004482                 push    eax
.text:00004483                 call    _bufchain_consume
.text:00004488                 add     esp, 8
.text:0000448B
.text:0000448B loc_448B:                               ; CODE XREF: _try_send:loc_442Aj
.text:0000448B                                         ; _try_send:loc_4476j
.text:0000448B                 jmp     loc_42D3
.text:00004490 ; ---------------------------------------------------------------------------
.text:00004490
.text:00004490 loc_4490:                               ; CODE XREF: _try_send+31j
.text:00004490                 mov     ecx, [ebp+arg_0]
.text:00004493                 cmp     dword ptr [ecx+48h], 1
.text:00004497                 jnz     short loc_44BB
.text:00004499                 mov     esi, esp
.text:0000449B                 push    1
.text:0000449D                 mov     edx, [ebp+arg_0]
.text:000044A0                 mov     eax, [edx+8]
.text:000044A3                 push    eax
.text:000044A4                 call    ds:_p_shutdown
.text:000044AA                 cmp     esi, esp
.text:000044AC                 call    __RTC_CheckEsp
.text:000044B1                 mov     ecx, [ebp+arg_0]
.text:000044B4                 mov     dword ptr [ecx+48h], 2
.text:000044BB
.text:000044BB loc_44BB:                               ; CODE XREF: _try_send+FDj
.text:000044BB                                         ; _try_send+136j ...
.text:000044BB                 push    edx
.text:000044BC                 mov     ecx, ebp
.text:000044BE                 push    eax
.text:000044BF                 lea     edx, $LN27_0
.text:000044C5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000044CA                 pop     eax
.text:000044CB                 pop     edx
.text:000044CC                 pop     edi
.text:000044CD                 pop     esi
.text:000044CE                 add     esp, 28h
.text:000044D1                 cmp     ebp, esp
.text:000044D3                 call    __RTC_CheckEsp
.text:000044D8                 mov     esp, ebp
.text:000044DA                 pop     ebp
.text:000044DB                 retn
.text:000044DB _try_send       endp
.text:000044DB
.text:000044DB ; ---------------------------------------------------------------------------
.text:000044DC $LN27_0         dd 2                    ; DATA XREF: _try_send+203o
.text:000044E0                 dd offset $LN26_0
.text:000044E4 $LN26_0         dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000044E0o
.text:000044EC                 dd offset $LN24_0       ; "data"
.text:000044F0                 dd 0FFFFFFE4h, 4
.text:000044F8                 dd offset $LN25_0
.text:000044FC $LN25_0         dd 6E656Ch              ; DATA XREF: .text:000044F8o
.text:00004500 $LN24_0         db 'data',0             ; DATA XREF: .text:000044ECo
.text:00004505                 db 7 dup(0CCh)
.text:0000450C
.text:0000450C ; =============== S U B R O U T I N E =======================================
.text:0000450C
.text:0000450C ; Attributes: bp-based frame
.text:0000450C
.text:0000450C _socket_error_callback proc near        ; DATA XREF: _try_send+129o
.text:0000450C
.text:0000450C var_4           = dword ptr -4
.text:0000450C arg_0           = dword ptr  8
.text:0000450C
.text:0000450C                 push    ebp
.text:0000450D                 mov     ebp, esp
.text:0000450F                 push    ecx
.text:00004510                 push    esi
.text:00004511                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004518                 mov     eax, [ebp+arg_0]
.text:0000451B                 mov     [ebp+var_4], eax
.text:0000451E                 push    0
.text:00004520                 mov     ecx, [ebp+var_4]
.text:00004523                 push    ecx
.text:00004524                 mov     edx, ds:_sktree
.text:0000452A                 push    edx
.text:0000452B                 call    _find234
.text:00004530                 add     esp, 0Ch
.text:00004533                 test    eax, eax
.text:00004535                 jz      short loc_4540
.text:00004537                 mov     eax, [ebp+var_4]
.text:0000453A                 cmp     dword ptr [eax+5Ch], 0
.text:0000453E                 jnz     short loc_4542
.text:00004540
.text:00004540 loc_4540:                               ; CODE XREF: _socket_error_callback+29j
.text:00004540                 jmp     short loc_457B
.text:00004542 ; ---------------------------------------------------------------------------
.text:00004542
.text:00004542 loc_4542:                               ; CODE XREF: _socket_error_callback+32j
.text:00004542                 mov     esi, esp
.text:00004544                 push    0
.text:00004546                 mov     ecx, [ebp+var_4]
.text:00004549                 mov     edx, [ecx+5Ch]
.text:0000454C                 push    edx
.text:0000454D                 mov     eax, [ebp+var_4]
.text:00004550                 mov     ecx, [eax+5Ch]
.text:00004553                 push    ecx             ; dwMessageId
.text:00004554                 call    _winsock_error_string
.text:00004559                 add     esp, 4
.text:0000455C                 push    eax
.text:0000455D                 mov     edx, [ebp+var_4]
.text:00004560                 mov     eax, [edx+0Ch]
.text:00004563                 push    eax
.text:00004564                 mov     ecx, [ebp+var_4]
.text:00004567                 mov     edx, [ecx+0Ch]
.text:0000456A                 mov     eax, [edx]
.text:0000456C                 mov     ecx, [eax+4]
.text:0000456F                 call    ecx
.text:00004571                 add     esp, 10h
.text:00004574                 cmp     esi, esp
.text:00004576                 call    __RTC_CheckEsp
.text:0000457B
.text:0000457B loc_457B:                               ; CODE XREF: _socket_error_callback:loc_4540j
.text:0000457B                 pop     esi
.text:0000457C                 add     esp, 4
.text:0000457F                 cmp     ebp, esp
.text:00004581                 call    __RTC_CheckEsp
.text:00004586                 mov     esp, ebp
.text:00004588                 pop     ebp
.text:00004589                 retn
.text:00004589 _socket_error_callback endp
.text:00004589
.text:00004589 ; ---------------------------------------------------------------------------
.text:0000458A                 align 4
.text:0000458C
.text:0000458C ; =============== S U B R O U T I N E =======================================
.text:0000458C
.text:0000458C ; Attributes: bp-based frame
.text:0000458C
.text:0000458C _sk_tcp_write   proc near               ; DATA XREF: .rdata:00000028o
.text:0000458C                                         ; .rdata:00000048o ...
.text:0000458C
.text:0000458C var_4           = dword ptr -4
.text:0000458C arg_0           = dword ptr  8
.text:0000458C arg_4           = dword ptr  0Ch
.text:0000458C arg_8           = dword ptr  10h
.text:0000458C
.text:0000458C                 push    ebp
.text:0000458D                 mov     ebp, esp
.text:0000458F                 push    ecx
.text:00004590                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004597                 mov     eax, [ebp+arg_0]
.text:0000459A                 mov     [ebp+var_4], eax
.text:0000459D                 mov     ecx, [ebp+var_4]
.text:000045A0                 cmp     dword ptr [ecx+48h], 0
.text:000045A4                 jz      short loc_45BD
.text:000045A6                 push    5D3h            ; Line
.text:000045AB                 push    offset $SG87242 ; "..\\..\\winnet.c"
.text:000045B0                 push    offset $SG87243 ; "s->outgoingeof == EOF_NO"
.text:000045B5                 call    __wassert
.text:000045BA ; ---------------------------------------------------------------------------
.text:000045BA                 add     esp, 0Ch
.text:000045BD
.text:000045BD loc_45BD:                               ; CODE XREF: _sk_tcp_write+18j
.text:000045BD                 mov     eax, [ebp+arg_8]
.text:000045C0                 push    eax
.text:000045C1                 mov     ecx, [ebp+arg_4]
.text:000045C4                 push    ecx
.text:000045C5                 mov     edx, [ebp+var_4]
.text:000045C8                 add     edx, 10h
.text:000045CB                 push    edx
.text:000045CC                 call    _bufchain_add
.text:000045D1                 add     esp, 0Ch
.text:000045D4                 mov     eax, [ebp+var_4]
.text:000045D7                 cmp     dword ptr [eax+20h], 0
.text:000045DB                 jz      short loc_45E9
.text:000045DD                 mov     ecx, [ebp+var_4]
.text:000045E0                 push    ecx
.text:000045E1                 call    _try_send
.text:000045E6                 add     esp, 4
.text:000045E9
.text:000045E9 loc_45E9:                               ; CODE XREF: _sk_tcp_write+4Fj
.text:000045E9                 mov     edx, [ebp+var_4]
.text:000045EC                 add     edx, 10h
.text:000045EF                 push    edx
.text:000045F0                 call    _bufchain_size
.text:000045F5                 add     esp, 4
.text:000045F8                 add     esp, 4
.text:000045FB                 cmp     ebp, esp
.text:000045FD                 call    __RTC_CheckEsp
.text:00004602                 mov     esp, ebp
.text:00004604                 pop     ebp
.text:00004605                 retn
.text:00004605 _sk_tcp_write   endp
.text:00004605
.text:00004605 ; ---------------------------------------------------------------------------
.text:00004606                 db 6 dup(0CCh)
.text:0000460C
.text:0000460C ; =============== S U B R O U T I N E =======================================
.text:0000460C
.text:0000460C ; Attributes: bp-based frame
.text:0000460C
.text:0000460C ; int __cdecl sk_tcp_write_oob(int, void *Src, size_t Size)
.text:0000460C _sk_tcp_write_oob proc near             ; DATA XREF: .rdata:0000002Co
.text:0000460C                                         ; .rdata:0000004Co ...
.text:0000460C
.text:0000460C var_4           = dword ptr -4
.text:0000460C arg_0           = dword ptr  8
.text:0000460C Src             = dword ptr  0Ch
.text:0000460C Size            = dword ptr  10h
.text:0000460C
.text:0000460C                 push    ebp
.text:0000460D                 mov     ebp, esp
.text:0000460F                 push    ecx
.text:00004610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004617                 mov     eax, [ebp+arg_0]
.text:0000461A                 mov     [ebp+var_4], eax
.text:0000461D                 mov     ecx, [ebp+var_4]
.text:00004620                 cmp     dword ptr [ecx+48h], 0
.text:00004624                 jz      short loc_463D
.text:00004626                 push    5E7h            ; Line
.text:0000462B                 push    offset $SG87255 ; "..\\..\\winnet.c"
.text:00004630                 push    offset $SG87256 ; "s->outgoingeof == EOF_NO"
.text:00004635                 call    __wassert
.text:0000463A ; ---------------------------------------------------------------------------
.text:0000463A                 add     esp, 0Ch
.text:0000463D
.text:0000463D loc_463D:                               ; CODE XREF: _sk_tcp_write_oob+18j
.text:0000463D                 mov     eax, [ebp+var_4]
.text:00004640                 add     eax, 10h
.text:00004643                 push    eax
.text:00004644                 call    _bufchain_clear
.text:00004649                 add     esp, 4
.text:0000464C                 cmp     [ebp+Size], 1
.text:00004650                 jbe     short loc_4669
.text:00004652                 push    5EDh            ; Line
.text:00004657                 push    offset $SG87258 ; "..\\..\\winnet.c"
.text:0000465C                 push    offset $SG87259 ; "len <= sizeof(s->oobdata)"
.text:00004661                 call    __wassert
.text:00004666 ; ---------------------------------------------------------------------------
.text:00004666                 add     esp, 0Ch
.text:00004669
.text:00004669 loc_4669:                               ; CODE XREF: _sk_tcp_write_oob+44j
.text:00004669                 mov     edx, [ebp+Size]
.text:0000466C                 push    edx             ; Size
.text:0000466D                 mov     eax, [ebp+Src]
.text:00004670                 push    eax             ; Src
.text:00004671                 mov     ecx, [ebp+var_4]
.text:00004674                 add     ecx, 30h ; '0'
.text:00004677                 push    ecx             ; Dst
.text:00004678                 call    _memcpy
.text:0000467D                 add     esp, 0Ch
.text:00004680                 mov     edx, [ebp+var_4]
.text:00004683                 mov     eax, [ebp+Size]
.text:00004686                 mov     [edx+34h], eax
.text:00004689                 mov     ecx, [ebp+var_4]
.text:0000468C                 cmp     dword ptr [ecx+20h], 0
.text:00004690                 jz      short loc_469E
.text:00004692                 mov     edx, [ebp+var_4]
.text:00004695                 push    edx
.text:00004696                 call    _try_send
.text:0000469B                 add     esp, 4
.text:0000469E
.text:0000469E loc_469E:                               ; CODE XREF: _sk_tcp_write_oob+84j
.text:0000469E                 mov     eax, [ebp+var_4]
.text:000046A1                 mov     eax, [eax+34h]
.text:000046A4                 add     esp, 4
.text:000046A7                 cmp     ebp, esp
.text:000046A9                 call    __RTC_CheckEsp
.text:000046AE                 mov     esp, ebp
.text:000046B0                 pop     ebp
.text:000046B1                 retn
.text:000046B1 _sk_tcp_write_oob endp
.text:000046B1
.text:000046B1 ; ---------------------------------------------------------------------------
.text:000046B2                 db 0Ah dup(0CCh)
.text:000046BC
.text:000046BC ; =============== S U B R O U T I N E =======================================
.text:000046BC
.text:000046BC ; Attributes: bp-based frame
.text:000046BC
.text:000046BC _sk_tcp_write_eof proc near             ; DATA XREF: .rdata:00000030o
.text:000046BC                                         ; .rdata:00000050o ...
.text:000046BC
.text:000046BC var_4           = dword ptr -4
.text:000046BC arg_0           = dword ptr  8
.text:000046BC
.text:000046BC                 push    ebp
.text:000046BD                 mov     ebp, esp
.text:000046BF                 push    ecx
.text:000046C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046C7                 mov     eax, [ebp+arg_0]
.text:000046CA                 mov     [ebp+var_4], eax
.text:000046CD                 mov     ecx, [ebp+var_4]
.text:000046D0                 cmp     dword ptr [ecx+48h], 0
.text:000046D4                 jz      short loc_46ED
.text:000046D6                 push    5FEh            ; Line
.text:000046DB                 push    offset $SG87267 ; "..\\..\\winnet.c"
.text:000046E0                 push    offset $SG87268 ; "s->outgoingeof == EOF_NO"
.text:000046E5                 call    __wassert
.text:000046EA ; ---------------------------------------------------------------------------
.text:000046EA                 add     esp, 0Ch
.text:000046ED
.text:000046ED loc_46ED:                               ; CODE XREF: _sk_tcp_write_eof+18j
.text:000046ED                 mov     eax, [ebp+var_4]
.text:000046F0                 mov     dword ptr [eax+48h], 1
.text:000046F7                 mov     ecx, [ebp+var_4]
.text:000046FA                 cmp     dword ptr [ecx+20h], 0
.text:000046FE                 jz      short loc_470C
.text:00004700                 mov     edx, [ebp+var_4]
.text:00004703                 push    edx
.text:00004704                 call    _try_send
.text:00004709                 add     esp, 4
.text:0000470C
.text:0000470C loc_470C:                               ; CODE XREF: _sk_tcp_write_eof+42j
.text:0000470C                 add     esp, 4
.text:0000470F                 cmp     ebp, esp
.text:00004711                 call    __RTC_CheckEsp
.text:00004716                 mov     esp, ebp
.text:00004718                 pop     ebp
.text:00004719                 retn
.text:00004719 _sk_tcp_write_eof endp
.text:00004719
.text:00004719 ; ---------------------------------------------------------------------------
.text:0000471A                 align 4
.text:0000471C
.text:0000471C ; =============== S U B R O U T I N E =======================================
.text:0000471C
.text:0000471C ; Attributes: bp-based frame
.text:0000471C
.text:0000471C                 public _select_result
.text:0000471C _select_result  proc near
.text:0000471C
.text:0000471C var_50E0        = dword ptr -50E0h
.text:0000471C var_50DC        = dword ptr -50DCh
.text:0000471C var_50D4        = dword ptr -50D4h
.text:0000471C var_50CC        = dword ptr -50CCh
.text:0000471C var_50C4        = dword ptr -50C4h
.text:0000471C Dst             = word ptr -50B8h
.text:0000471C var_50B4        = dword ptr -50B4h
.text:0000471C var_5034        = dword ptr -5034h
.text:0000471C var_5030        = dword ptr -5030h
.text:0000471C var_502C        = dword ptr -502Ch
.text:0000471C var_5024        = dword ptr -5024h
.text:0000471C var_501C        = dword ptr -501Ch
.text:0000471C var_5014        = byte ptr -5014h
.text:0000471C dwMessageId     = dword ptr -10h
.text:0000471C var_C           = dword ptr -0Ch
.text:0000471C var_8           = dword ptr -8
.text:0000471C var_4           = dword ptr -4
.text:0000471C arg_0           = dword ptr  8
.text:0000471C arg_4           = dword ptr  0Ch
.text:0000471C
.text:0000471C                 push    ebp
.text:0000471D                 mov     ebp, esp
.text:0000471F                 mov     eax, 50E0h
.text:00004724                 call    __chkstk
.text:00004729                 push    esi
.text:0000472A                 push    edi
.text:0000472B                 lea     edi, [ebp+var_50E0]
.text:00004731                 mov     ecx, 1438h
.text:00004736                 mov     eax, 0CCCCCCCCh
.text:0000473B                 rep stosd
.text:0000473D                 mov     eax, dword ptr ds:___security_cookie
.text:00004742                 xor     eax, ebp
.text:00004744                 mov     [ebp+var_4], eax
.text:00004747                 cmp     [ebp+arg_0], 0
.text:0000474B                 jnz     short loc_4757
.text:0000474D                 mov     eax, 1
.text:00004752                 jmp     loc_4E63
.text:00004757 ; ---------------------------------------------------------------------------
.text:00004757
.text:00004757 loc_4757:                               ; CODE XREF: _select_result+2Fj
.text:00004757                 push    offset _cmpforsearch
.text:0000475C                 mov     eax, [ebp+arg_0]
.text:0000475F                 push    eax
.text:00004760                 mov     ecx, ds:_sktree
.text:00004766                 push    ecx
.text:00004767                 call    _find234
.text:0000476C                 add     esp, 0Ch
.text:0000476F                 mov     [ebp+var_501C], eax
.text:00004775                 cmp     [ebp+var_501C], 0
.text:0000477C                 jnz     short loc_4788
.text:0000477E                 mov     eax, 1
.text:00004783                 jmp     loc_4E63
.text:00004788 ; ---------------------------------------------------------------------------
.text:00004788
.text:00004788 loc_4788:                               ; CODE XREF: _select_result+60j
.text:00004788                 mov     edx, [ebp+arg_4]
.text:0000478B                 shr     edx, 10h
.text:0000478E                 and     edx, 0FFFFh
.text:00004794                 movzx   eax, dx
.text:00004797                 mov     [ebp+dwMessageId], eax
.text:0000479A                 cmp     [ebp+dwMessageId], 0
.text:0000479E                 jz      loc_4890
.text:000047A4                 mov     ecx, [ebp+var_501C]
.text:000047AA                 cmp     dword ptr [ecx+4Ch], 0
.text:000047AE                 jz      loc_4840
.text:000047B4                 mov     esi, esp
.text:000047B6                 mov     edx, [ebp+dwMessageId]
.text:000047B9                 push    edx
.text:000047BA                 mov     eax, [ebp+dwMessageId]
.text:000047BD                 push    eax             ; dwMessageId
.text:000047BE                 call    _winsock_error_string
.text:000047C3                 add     esp, 4
.text:000047C6                 push    eax
.text:000047C7                 mov     ecx, [ebp+var_501C]
.text:000047CD                 mov     edx, [ecx+58h]
.text:000047D0                 push    edx
.text:000047D1                 mov     eax, [ebp+var_501C]
.text:000047D7                 mov     ecx, [eax+4Ch]
.text:000047DA                 push    ecx
.text:000047DB                 push    1
.text:000047DD                 mov     edx, [ebp+var_501C]
.text:000047E3                 mov     eax, [edx+0Ch]
.text:000047E6                 push    eax
.text:000047E7                 mov     ecx, [ebp+var_501C]
.text:000047ED                 mov     edx, [ecx+0Ch]
.text:000047F0                 mov     eax, [edx]
.text:000047F2                 mov     ecx, [eax]
.text:000047F4                 call    ecx
.text:000047F6                 add     esp, 18h
.text:000047F9                 cmp     esi, esp
.text:000047FB                 call    __RTC_CheckEsp
.text:00004800
.text:00004800 loc_4800:                               ; CODE XREF: _select_result+122j
.text:00004800                 mov     edx, [ebp+var_501C]
.text:00004806                 cmp     dword ptr [edx+4Ch], 0
.text:0000480A                 jz      short loc_4840
.text:0000480C                 mov     eax, [ebp+var_501C]
.text:00004812                 add     eax, 50h ; 'P'
.text:00004815                 push    eax
.text:00004816                 mov     ecx, [ebp+var_501C]
.text:0000481C                 mov     edx, [ecx+4Ch]
.text:0000481F                 push    edx
.text:00004820                 call    _sk_nextaddr
.text:00004825                 add     esp, 8
.text:00004828                 test    eax, eax
.text:0000482A                 jz      short loc_4840
.text:0000482C                 mov     eax, [ebp+var_501C]
.text:00004832                 push    eax
.text:00004833                 call    _try_connect
.text:00004838                 add     esp, 4
.text:0000483B                 mov     [ebp+dwMessageId], eax
.text:0000483E                 jmp     short loc_4800
.text:00004840 ; ---------------------------------------------------------------------------
.text:00004840
.text:00004840 loc_4840:                               ; CODE XREF: _select_result+92j
.text:00004840                                         ; _select_result+EEj ...
.text:00004840                 cmp     [ebp+dwMessageId], 0
.text:00004844                 jz      short loc_4886
.text:00004846                 mov     esi, esp
.text:00004848                 push    0
.text:0000484A                 mov     ecx, [ebp+dwMessageId]
.text:0000484D                 push    ecx
.text:0000484E                 mov     edx, [ebp+dwMessageId]
.text:00004851                 push    edx             ; dwMessageId
.text:00004852                 call    _winsock_error_string
.text:00004857                 add     esp, 4
.text:0000485A                 push    eax
.text:0000485B                 mov     eax, [ebp+var_501C]
.text:00004861                 mov     ecx, [eax+0Ch]
.text:00004864                 push    ecx
.text:00004865                 mov     edx, [ebp+var_501C]
.text:0000486B                 mov     eax, [edx+0Ch]
.text:0000486E                 mov     ecx, [eax]
.text:00004870                 mov     edx, [ecx+4]
.text:00004873                 call    edx
.text:00004875                 add     esp, 10h
.text:00004878                 cmp     esi, esp
.text:0000487A                 call    __RTC_CheckEsp
.text:0000487F                 jmp     loc_4E63
.text:00004884 ; ---------------------------------------------------------------------------
.text:00004884                 jmp     short loc_4890
.text:00004886 ; ---------------------------------------------------------------------------
.text:00004886
.text:00004886 loc_4886:                               ; CODE XREF: _select_result+128j
.text:00004886                 mov     eax, 1
.text:0000488B                 jmp     loc_4E63
.text:00004890 ; ---------------------------------------------------------------------------
.text:00004890
.text:00004890 loc_4890:                               ; CODE XREF: _select_result+82j
.text:00004890                                         ; _select_result+168j
.text:00004890                 mov     eax, [ebp+arg_4]
.text:00004893                 push    eax
.text:00004894                 call    _noise_ultralight
.text:00004899                 add     esp, 4
.text:0000489C                 mov     ecx, [ebp+arg_4]
.text:0000489F                 and     ecx, 0FFFFh
.text:000048A5                 movzx   edx, cx
.text:000048A8                 mov     [ebp+var_50DC], edx
.text:000048AE                 mov     eax, [ebp+var_50DC]
.text:000048B4                 sub     eax, 1
.text:000048B7                 mov     [ebp+var_50DC], eax
.text:000048BD                 cmp     [ebp+var_50DC], 1Fh ; switch 32 cases
.text:000048C4                 ja      $LN33_1         ; jumptable 000048D7 default case
.text:000048CA                 mov     ecx, [ebp+var_50DC]
.text:000048D0                 movzx   edx, ds:$LN47_0[ecx]
.text:000048D7                 jmp     ds:$LN55[edx*4] ; switch jump
.text:000048DE ; ---------------------------------------------------------------------------
.text:000048DE
.text:000048DE $LN32_1:                                ; CODE XREF: _select_result+1BBj
.text:000048DE                                         ; DATA XREF: .text:$LN55o
.text:000048DE                 mov     eax, [ebp+var_501C] ; jumptable 000048D7 case 15
.text:000048E4                 mov     dword ptr [eax+20h], 1
.text:000048EB                 mov     ecx, [ebp+var_501C]
.text:000048F1                 mov     dword ptr [ecx+1Ch], 1
.text:000048F8                 mov     edx, [ebp+var_501C]
.text:000048FE                 cmp     dword ptr [edx+4Ch], 0
.text:00004902                 jz      short loc_4923
.text:00004904                 mov     eax, [ebp+var_501C]
.text:0000490A                 mov     ecx, [eax+4Ch]
.text:0000490D                 push    ecx
.text:0000490E                 call    _sk_addr_free
.text:00004913                 add     esp, 4
.text:00004916                 mov     edx, [ebp+var_501C]
.text:0000491C                 mov     dword ptr [edx+4Ch], 0
.text:00004923
.text:00004923 loc_4923:                               ; CODE XREF: _select_result+1E6j
.text:00004923                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:00004928 ; ---------------------------------------------------------------------------
.text:00004928
.text:00004928 $LN30_1:                                ; CODE XREF: _select_result+1BBj
.text:00004928                                         ; DATA XREF: .text:$LN55o
.text:00004928                 mov     eax, [ebp+var_501C] ; jumptable 000048D7 case 0
.text:0000492E                 cmp     dword ptr [eax+24h], 0
.text:00004932                 jz      short loc_4946
.text:00004934                 mov     ecx, [ebp+var_501C]
.text:0000493A                 mov     dword ptr [ecx+28h], 1
.text:00004941                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:00004946 ; ---------------------------------------------------------------------------
.text:00004946
.text:00004946 loc_4946:                               ; CODE XREF: _select_result+216j
.text:00004946                 mov     edx, [ebp+var_501C]
.text:0000494C                 cmp     dword ptr [edx+38h], 0
.text:00004950                 jz      short loc_4983
.text:00004952                 mov     [ebp+var_5024], 1
.text:0000495C                 mov     esi, esp
.text:0000495E                 lea     eax, [ebp+var_5024]
.text:00004964                 push    eax
.text:00004965                 push    40047307h
.text:0000496A                 mov     ecx, [ebp+var_501C]
.text:00004970                 mov     edx, [ecx+8]
.text:00004973                 push    edx
.text:00004974                 call    ds:_p_ioctlsocket
.text:0000497A                 cmp     esi, esp
.text:0000497C                 call    __RTC_CheckEsp
.text:00004981                 jmp     short loc_498D
.text:00004983 ; ---------------------------------------------------------------------------
.text:00004983
.text:00004983 loc_4983:                               ; CODE XREF: _select_result+234j
.text:00004983                 mov     [ebp+var_5024], 1
.text:0000498D
.text:0000498D loc_498D:                               ; CODE XREF: _select_result+265j
.text:0000498D                 mov     esi, esp
.text:0000498F                 push    0
.text:00004991                 push    5000h
.text:00004996                 lea     eax, [ebp+var_5014]
.text:0000499C                 push    eax
.text:0000499D                 mov     ecx, [ebp+var_501C]
.text:000049A3                 mov     edx, [ecx+8]
.text:000049A6                 push    edx
.text:000049A7                 call    ds:_p_recv
.text:000049AD                 cmp     esi, esp
.text:000049AF                 call    __RTC_CheckEsp
.text:000049B4                 mov     [ebp+var_8], eax
.text:000049B7                 mov     eax, [ebp+var_8]
.text:000049BA                 push    eax
.text:000049BB                 call    _noise_ultralight
.text:000049C0                 add     esp, 4
.text:000049C3                 cmp     [ebp+var_8], 0
.text:000049C7                 jge     short loc_49E9
.text:000049C9                 mov     esi, esp
.text:000049CB                 call    dword ptr ds:_p_WSAGetLastError
.text:000049D1                 cmp     esi, esp
.text:000049D3                 call    __RTC_CheckEsp
.text:000049D8                 mov     [ebp+dwMessageId], eax
.text:000049DB                 cmp     [ebp+dwMessageId], 2733h
.text:000049E2                 jnz     short loc_49E9
.text:000049E4                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:000049E9 ; ---------------------------------------------------------------------------
.text:000049E9
.text:000049E9 loc_49E9:                               ; CODE XREF: _select_result+2ABj
.text:000049E9                                         ; _select_result+2C6j
.text:000049E9                 cmp     [ebp+var_8], 0
.text:000049ED                 jge     short loc_4A2F
.text:000049EF                 mov     esi, esp
.text:000049F1                 push    0
.text:000049F3                 mov     ecx, [ebp+dwMessageId]
.text:000049F6                 push    ecx
.text:000049F7                 mov     edx, [ebp+dwMessageId]
.text:000049FA                 push    edx             ; dwMessageId
.text:000049FB                 call    _winsock_error_string
.text:00004A00                 add     esp, 4
.text:00004A03                 push    eax
.text:00004A04                 mov     eax, [ebp+var_501C]
.text:00004A0A                 mov     ecx, [eax+0Ch]
.text:00004A0D                 push    ecx
.text:00004A0E                 mov     edx, [ebp+var_501C]
.text:00004A14                 mov     eax, [edx+0Ch]
.text:00004A17                 mov     ecx, [eax]
.text:00004A19                 mov     edx, [ecx+4]
.text:00004A1C                 call    edx
.text:00004A1E                 add     esp, 10h
.text:00004A21                 cmp     esi, esp
.text:00004A23                 call    __RTC_CheckEsp
.text:00004A28                 jmp     loc_4E63
.text:00004A2D ; ---------------------------------------------------------------------------
.text:00004A2D                 jmp     short loc_4AAB
.text:00004A2F ; ---------------------------------------------------------------------------
.text:00004A2F
.text:00004A2F loc_4A2F:                               ; CODE XREF: _select_result+2D1j
.text:00004A2F                 cmp     [ebp+var_8], 0
.text:00004A33                 jnz     short loc_4A68
.text:00004A35                 mov     esi, esp
.text:00004A37                 push    0
.text:00004A39                 push    0
.text:00004A3B                 push    0
.text:00004A3D                 mov     eax, [ebp+var_501C]
.text:00004A43                 mov     ecx, [eax+0Ch]
.text:00004A46                 push    ecx
.text:00004A47                 mov     edx, [ebp+var_501C]
.text:00004A4D                 mov     eax, [edx+0Ch]
.text:00004A50                 mov     ecx, [eax]
.text:00004A52                 mov     edx, [ecx+4]
.text:00004A55                 call    edx
.text:00004A57                 add     esp, 10h
.text:00004A5A                 cmp     esi, esp
.text:00004A5C                 call    __RTC_CheckEsp
.text:00004A61                 jmp     loc_4E63
.text:00004A66 ; ---------------------------------------------------------------------------
.text:00004A66                 jmp     short loc_4AAB
.text:00004A68 ; ---------------------------------------------------------------------------
.text:00004A68
.text:00004A68 loc_4A68:                               ; CODE XREF: _select_result+317j
.text:00004A68                 mov     esi, esp
.text:00004A6A                 mov     eax, [ebp+var_8]
.text:00004A6D                 push    eax
.text:00004A6E                 lea     ecx, [ebp+var_5014]
.text:00004A74                 push    ecx
.text:00004A75                 xor     edx, edx
.text:00004A77                 cmp     [ebp+var_5024], 0
.text:00004A7E                 setz    dl
.text:00004A81                 push    edx
.text:00004A82                 mov     eax, [ebp+var_501C]
.text:00004A88                 mov     ecx, [eax+0Ch]
.text:00004A8B                 push    ecx
.text:00004A8C                 mov     edx, [ebp+var_501C]
.text:00004A92                 mov     eax, [edx+0Ch]
.text:00004A95                 mov     ecx, [eax]
.text:00004A97                 mov     edx, [ecx+8]
.text:00004A9A                 call    edx
.text:00004A9C                 add     esp, 10h
.text:00004A9F                 cmp     esi, esp
.text:00004AA1                 call    __RTC_CheckEsp
.text:00004AA6                 jmp     loc_4E63
.text:00004AAB ; ---------------------------------------------------------------------------
.text:00004AAB
.text:00004AAB loc_4AAB:                               ; CODE XREF: _select_result+311j
.text:00004AAB                                         ; _select_result+34Aj
.text:00004AAB                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:00004AB0 ; ---------------------------------------------------------------------------
.text:00004AB0
.text:00004AB0 $LN20_2:                                ; CODE XREF: _select_result+1BBj
.text:00004AB0                                         ; DATA XREF: .text:$LN55o
.text:00004AB0                 mov     esi, esp        ; jumptable 000048D7 case 3
.text:00004AB2                 push    1
.text:00004AB4                 push    5000h
.text:00004AB9                 lea     eax, [ebp+var_5014]
.text:00004ABF                 push    eax
.text:00004AC0                 mov     ecx, [ebp+var_501C]
.text:00004AC6                 mov     edx, [ecx+8]
.text:00004AC9                 push    edx
.text:00004ACA                 call    ds:_p_recv
.text:00004AD0                 cmp     esi, esp
.text:00004AD2                 call    __RTC_CheckEsp
.text:00004AD7                 mov     [ebp+var_8], eax
.text:00004ADA                 mov     eax, [ebp+var_8]
.text:00004ADD                 push    eax
.text:00004ADE                 call    _noise_ultralight
.text:00004AE3                 add     esp, 4
.text:00004AE6                 cmp     [ebp+var_8], 0
.text:00004AEA                 jg      short loc_4B4F
.text:00004AEC                 cmp     [ebp+var_8], 0
.text:00004AF0                 jnz     short loc_4AFE
.text:00004AF2                 mov     [ebp+var_50E0], offset $SG87318 ; "Internal networking trouble"
.text:00004AFC                 jmp     short loc_4B1C
.text:00004AFE ; ---------------------------------------------------------------------------
.text:00004AFE
.text:00004AFE loc_4AFE:                               ; CODE XREF: _select_result+3D4j
.text:00004AFE                 mov     esi, esp
.text:00004B00                 call    dword ptr ds:_p_WSAGetLastError
.text:00004B06                 cmp     esi, esp
.text:00004B08                 call    __RTC_CheckEsp
.text:00004B0D                 push    eax             ; dwMessageId
.text:00004B0E                 call    _winsock_error_string
.text:00004B13                 add     esp, 4
.text:00004B16                 mov     [ebp+var_50E0], eax
.text:00004B1C
.text:00004B1C loc_4B1C:                               ; CODE XREF: _select_result+3E0j
.text:00004B1C                 mov     ecx, [ebp+var_50E0]
.text:00004B22                 mov     [ebp+var_502C], ecx
.text:00004B28                 mov     edx, [ebp+var_502C]
.text:00004B2E                 push    edx
.text:00004B2F                 push    0
.text:00004B31                 call    _logevent
.text:00004B36                 add     esp, 8
.text:00004B39                 mov     eax, [ebp+var_502C]
.text:00004B3F                 push    eax
.text:00004B40                 push    offset $SG87320 ; "%s"
.text:00004B45                 call    _fatalbox
.text:00004B4A                 add     esp, 8
.text:00004B4D                 jmp     short loc_4B87
.text:00004B4F ; ---------------------------------------------------------------------------
.text:00004B4F
.text:00004B4F loc_4B4F:                               ; CODE XREF: _select_result+3CEj
.text:00004B4F                 mov     esi, esp
.text:00004B51                 mov     ecx, [ebp+var_8]
.text:00004B54                 push    ecx
.text:00004B55                 lea     edx, [ebp+var_5014]
.text:00004B5B                 push    edx
.text:00004B5C                 push    2
.text:00004B5E                 mov     eax, [ebp+var_501C]
.text:00004B64                 mov     ecx, [eax+0Ch]
.text:00004B67                 push    ecx
.text:00004B68                 mov     edx, [ebp+var_501C]
.text:00004B6E                 mov     eax, [edx+0Ch]
.text:00004B71                 mov     ecx, [eax]
.text:00004B73                 mov     edx, [ecx+8]
.text:00004B76                 call    edx
.text:00004B78                 add     esp, 10h
.text:00004B7B                 cmp     esi, esp
.text:00004B7D                 call    __RTC_CheckEsp
.text:00004B82                 jmp     loc_4E63
.text:00004B87 ; ---------------------------------------------------------------------------
.text:00004B87
.text:00004B87 loc_4B87:                               ; CODE XREF: _select_result+431j
.text:00004B87                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:00004B8C ; ---------------------------------------------------------------------------
.text:00004B8C
.text:00004B8C $LN17_2:                                ; CODE XREF: _select_result+1BBj
.text:00004B8C                                         ; DATA XREF: .text:$LN55o
.text:00004B8C                 mov     eax, [ebp+var_501C] ; jumptable 000048D7 case 1
.text:00004B92                 mov     dword ptr [eax+20h], 1
.text:00004B99                 mov     ecx, [ebp+var_501C]
.text:00004B9F                 add     ecx, 10h
.text:00004BA2                 push    ecx
.text:00004BA3                 call    _bufchain_size
.text:00004BA8                 add     esp, 4
.text:00004BAB                 mov     edx, [ebp+var_501C]
.text:00004BB1                 add     eax, [edx+34h]
.text:00004BB4                 mov     [ebp+var_5030], eax
.text:00004BBA                 mov     eax, [ebp+var_501C]
.text:00004BC0                 push    eax
.text:00004BC1                 call    _try_send
.text:00004BC6                 add     esp, 4
.text:00004BC9                 mov     ecx, [ebp+var_501C]
.text:00004BCF                 add     ecx, 10h
.text:00004BD2                 push    ecx
.text:00004BD3                 call    _bufchain_size
.text:00004BD8                 add     esp, 4
.text:00004BDB                 mov     edx, [ebp+var_501C]
.text:00004BE1                 add     eax, [edx+34h]
.text:00004BE4                 mov     [ebp+var_5034], eax
.text:00004BEA                 mov     eax, [ebp+var_5034]
.text:00004BF0                 cmp     eax, [ebp+var_5030]
.text:00004BF6                 jge     short loc_4C25
.text:00004BF8                 mov     esi, esp
.text:00004BFA                 mov     ecx, [ebp+var_5034]
.text:00004C00                 push    ecx
.text:00004C01                 mov     edx, [ebp+var_501C]
.text:00004C07                 mov     eax, [edx+0Ch]
.text:00004C0A                 push    eax
.text:00004C0B                 mov     ecx, [ebp+var_501C]
.text:00004C11                 mov     edx, [ecx+0Ch]
.text:00004C14                 mov     eax, [edx]
.text:00004C16                 mov     ecx, [eax+0Ch]
.text:00004C19                 call    ecx
.text:00004C1B                 add     esp, 8
.text:00004C1E                 cmp     esi, esp
.text:00004C20                 call    __RTC_CheckEsp
.text:00004C25
.text:00004C25 loc_4C25:                               ; CODE XREF: _select_result+4DAj
.text:00004C25                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:00004C2A ; ---------------------------------------------------------------------------
.text:00004C2A
.text:00004C2A $LN15_0:                                ; CODE XREF: _select_result+1BBj
.text:00004C2A                                         ; DATA XREF: .text:$LN55o
.text:00004C2A                 mov     [ebp+var_C], 1  ; jumptable 000048D7 case 31
.text:00004C31
.text:00004C31 loc_4C31:                               ; CODE XREF: _select_result+61Cj
.text:00004C31                 mov     esi, esp
.text:00004C33                 push    0
.text:00004C35                 push    5000h
.text:00004C3A                 lea     edx, [ebp+var_5014]
.text:00004C40                 push    edx
.text:00004C41                 mov     eax, [ebp+var_501C]
.text:00004C47                 mov     ecx, [eax+8]
.text:00004C4A                 push    ecx
.text:00004C4B                 call    ds:_p_recv
.text:00004C51                 cmp     esi, esp
.text:00004C53                 call    __RTC_CheckEsp
.text:00004C58                 mov     [ebp+var_8], eax
.text:00004C5B                 cmp     [ebp+var_8], 0
.text:00004C5F                 jge     short loc_4CC1
.text:00004C61                 mov     esi, esp
.text:00004C63                 call    dword ptr ds:_p_WSAGetLastError
.text:00004C69                 cmp     esi, esp
.text:00004C6B                 call    __RTC_CheckEsp
.text:00004C70                 mov     [ebp+dwMessageId], eax
.text:00004C73                 cmp     [ebp+dwMessageId], 2733h
.text:00004C7A                 jnz     short loc_4C81
.text:00004C7C                 jmp     loc_4D3E
.text:00004C81 ; ---------------------------------------------------------------------------
.text:00004C81
.text:00004C81 loc_4C81:                               ; CODE XREF: _select_result+55Ej
.text:00004C81                 mov     esi, esp
.text:00004C83                 push    0
.text:00004C85                 mov     edx, [ebp+dwMessageId]
.text:00004C88                 push    edx
.text:00004C89                 mov     eax, [ebp+dwMessageId]
.text:00004C8C                 push    eax             ; dwMessageId
.text:00004C8D                 call    _winsock_error_string
.text:00004C92                 add     esp, 4
.text:00004C95                 push    eax
.text:00004C96                 mov     ecx, [ebp+var_501C]
.text:00004C9C                 mov     edx, [ecx+0Ch]
.text:00004C9F                 push    edx
.text:00004CA0                 mov     eax, [ebp+var_501C]
.text:00004CA6                 mov     ecx, [eax+0Ch]
.text:00004CA9                 mov     edx, [ecx]
.text:00004CAB                 mov     eax, [edx+4]
.text:00004CAE                 call    eax
.text:00004CB0                 add     esp, 10h
.text:00004CB3                 cmp     esi, esp
.text:00004CB5                 call    __RTC_CheckEsp
.text:00004CBA                 jmp     loc_4E63
.text:00004CBF ; ---------------------------------------------------------------------------
.text:00004CBF                 jmp     short loc_4D34
.text:00004CC1 ; ---------------------------------------------------------------------------
.text:00004CC1
.text:00004CC1 loc_4CC1:                               ; CODE XREF: _select_result+543j
.text:00004CC1                 cmp     [ebp+var_8], 0
.text:00004CC5                 jz      short loc_4D02
.text:00004CC7                 mov     esi, esp
.text:00004CC9                 mov     ecx, [ebp+var_8]
.text:00004CCC                 push    ecx
.text:00004CCD                 lea     edx, [ebp+var_5014]
.text:00004CD3                 push    edx
.text:00004CD4                 push    0
.text:00004CD6                 mov     eax, [ebp+var_501C]
.text:00004CDC                 mov     ecx, [eax+0Ch]
.text:00004CDF                 push    ecx
.text:00004CE0                 mov     edx, [ebp+var_501C]
.text:00004CE6                 mov     eax, [edx+0Ch]
.text:00004CE9                 mov     ecx, [eax]
.text:00004CEB                 mov     edx, [ecx+8]
.text:00004CEE                 call    edx
.text:00004CF0                 add     esp, 10h
.text:00004CF3                 cmp     esi, esp
.text:00004CF5                 call    __RTC_CheckEsp
.text:00004CFA                 and     eax, [ebp+var_C]
.text:00004CFD                 mov     [ebp+var_C], eax
.text:00004D00                 jmp     short loc_4D34
.text:00004D02 ; ---------------------------------------------------------------------------
.text:00004D02
.text:00004D02 loc_4D02:                               ; CODE XREF: _select_result+5A9j
.text:00004D02                 mov     esi, esp
.text:00004D04                 push    0
.text:00004D06                 push    0
.text:00004D08                 push    0
.text:00004D0A                 mov     eax, [ebp+var_501C]
.text:00004D10                 mov     ecx, [eax+0Ch]
.text:00004D13                 push    ecx
.text:00004D14                 mov     edx, [ebp+var_501C]
.text:00004D1A                 mov     eax, [edx+0Ch]
.text:00004D1D                 mov     ecx, [eax]
.text:00004D1F                 mov     edx, [ecx+4]
.text:00004D22                 call    edx
.text:00004D24                 add     esp, 10h
.text:00004D27                 cmp     esi, esp
.text:00004D29                 call    __RTC_CheckEsp
.text:00004D2E                 and     eax, [ebp+var_C]
.text:00004D31                 mov     [ebp+var_C], eax
.text:00004D34
.text:00004D34 loc_4D34:                               ; CODE XREF: _select_result+5A3j
.text:00004D34                                         ; _select_result+5E4j
.text:00004D34                 cmp     [ebp+var_8], 0
.text:00004D38                 jg      loc_4C31
.text:00004D3E
.text:00004D3E loc_4D3E:                               ; CODE XREF: _select_result+560j
.text:00004D3E                 mov     eax, [ebp+var_C]
.text:00004D41                 jmp     loc_4E63
.text:00004D46 ; ---------------------------------------------------------------------------
.text:00004D46
.text:00004D46 $LN6_0:                                 ; CODE XREF: _select_result+1BBj
.text:00004D46                                         ; DATA XREF: .text:$LN55o
.text:00004D46                 mov     [ebp+var_50C4], 80h ; 'Ç' ; jumptable 000048D7 case 7
.text:00004D50                 push    80h ; 'Ç'       ; Size
.text:00004D55                 push    0               ; Val
.text:00004D57                 lea     eax, [ebp+Dst]
.text:00004D5D                 push    eax             ; Dst
.text:00004D5E                 call    _memset
.text:00004D63                 add     esp, 0Ch
.text:00004D66                 mov     [ebp+dwMessageId], 0
.text:00004D6D                 mov     esi, esp
.text:00004D6F                 lea     ecx, [ebp+var_50C4]
.text:00004D75                 push    ecx
.text:00004D76                 lea     edx, [ebp+Dst]
.text:00004D7C                 push    edx
.text:00004D7D                 mov     eax, [ebp+var_501C]
.text:00004D83                 mov     ecx, [eax+8]
.text:00004D86                 push    ecx
.text:00004D87                 call    ds:_p_accept
.text:00004D8D                 cmp     esi, esp
.text:00004D8F                 call    __RTC_CheckEsp
.text:00004D94                 mov     [ebp+var_50CC], eax
.text:00004D9A                 cmp     [ebp+var_50CC], 0FFFFFFFFh
.text:00004DA1                 jnz     short loc_4DC3
.text:00004DA3                 mov     esi, esp
.text:00004DA5                 call    dword ptr ds:_p_WSAGetLastError
.text:00004DAB                 cmp     esi, esp
.text:00004DAD                 call    __RTC_CheckEsp
.text:00004DB2                 mov     [ebp+dwMessageId], eax
.text:00004DB5                 cmp     [ebp+dwMessageId], 2AFAh
.text:00004DBC                 jnz     short loc_4DC3
.text:00004DBE                 jmp     $LN33_1         ; jumptable 000048D7 default case
.text:00004DC3 ; ---------------------------------------------------------------------------
.text:00004DC3
.text:00004DC3 loc_4DC3:                               ; CODE XREF: _select_result+685j
.text:00004DC3                                         ; _select_result+6A0j
.text:00004DC3                 mov     edx, [ebp+var_50CC]
.text:00004DC9                 mov     [ebp+var_50D4], edx
.text:00004DCF                 movzx   eax, [ebp+Dst]
.text:00004DD6                 cmp     eax, 2
.text:00004DD9                 jnz     short loc_4E12
.text:00004DDB                 mov     ecx, [ebp+var_501C]
.text:00004DE1                 cmp     dword ptr [ecx+2Ch], 0
.text:00004DE5                 jz      short loc_4E12
.text:00004DE7                 mov     edx, [ebp+var_50B4]
.text:00004DED                 push    edx
.text:00004DEE                 call    _ipv4_is_local_addr
.text:00004DF3                 add     esp, 4
.text:00004DF6                 test    eax, eax
.text:00004DF8                 jnz     short loc_4E12
.text:00004DFA                 mov     esi, esp
.text:00004DFC                 mov     eax, [ebp+var_50CC]
.text:00004E02                 push    eax
.text:00004E03                 call    ds:_p_closesocket
.text:00004E09                 cmp     esi, esp
.text:00004E0B                 call    __RTC_CheckEsp
.text:00004E10                 jmp     short $LN33_1   ; jumptable 000048D7 default case
.text:00004E12 ; ---------------------------------------------------------------------------
.text:00004E12
.text:00004E12 loc_4E12:                               ; CODE XREF: _select_result+6BDj
.text:00004E12                                         ; _select_result+6C9j ...
.text:00004E12                 mov     esi, esp
.text:00004E14                 mov     ecx, [ebp+var_50D4]
.text:00004E1A                 push    ecx
.text:00004E1B                 push    offset _sk_tcp_accept
.text:00004E20                 mov     edx, [ebp+var_501C]
.text:00004E26                 mov     eax, [edx+0Ch]
.text:00004E29                 push    eax
.text:00004E2A                 mov     ecx, [ebp+var_501C]
.text:00004E30                 mov     edx, [ecx+0Ch]
.text:00004E33                 mov     eax, [edx]
.text:00004E35                 mov     ecx, [eax+10h]
.text:00004E38                 call    ecx
.text:00004E3A                 add     esp, 0Ch
.text:00004E3D                 cmp     esi, esp
.text:00004E3F                 call    __RTC_CheckEsp
.text:00004E44                 test    eax, eax
.text:00004E46                 jz      short $LN33_1   ; jumptable 000048D7 default case
.text:00004E48                 mov     esi, esp
.text:00004E4A                 mov     edx, [ebp+var_50CC]
.text:00004E50                 push    edx
.text:00004E51                 call    ds:_p_closesocket
.text:00004E57                 cmp     esi, esp
.text:00004E59                 call    __RTC_CheckEsp
.text:00004E5E
.text:00004E5E $LN33_1:                                ; CODE XREF: _select_result+1A8j
.text:00004E5E                                         ; _select_result+1BBj ...
.text:00004E5E                 mov     eax, 1          ; jumptable 000048D7 default case
.text:00004E63
.text:00004E63 loc_4E63:                               ; CODE XREF: _select_result+36j
.text:00004E63                                         ; _select_result+67j ...
.text:00004E63                 push    edx
.text:00004E64                 mov     ecx, ebp
.text:00004E66                 push    eax
.text:00004E67                 lea     edx, $LN54
.text:00004E6D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004E72                 pop     eax
.text:00004E73                 pop     edx
.text:00004E74                 pop     edi
.text:00004E75                 pop     esi
.text:00004E76                 mov     ecx, [ebp+var_4]
.text:00004E79                 xor     ecx, ebp
.text:00004E7B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004E80                 add     esp, 50E0h
.text:00004E86                 cmp     ebp, esp
.text:00004E88                 call    __RTC_CheckEsp
.text:00004E8D                 mov     esp, ebp
.text:00004E8F                 pop     ebp
.text:00004E90                 retn
.text:00004E90 _select_result  endp
.text:00004E90
.text:00004E90 ; ---------------------------------------------------------------------------
.text:00004E91                 align 4
.text:00004E94 $LN54           dd 5                    ; DATA XREF: _select_result+74Bo
.text:00004E98                 dd offset $LN53
.text:00004E9C $LN53           dd 0FFFFAFECh, 5000h    ; DATA XREF: .text:00004E98o
.text:00004EA4                 dd offset $LN48_0       ; "buf"
.text:00004EA8                 dd 0FFFFAFDCh, 4
.text:00004EB0                 dd offset $LN49_0       ; "atmark"
.text:00004EB4                 dd 0FFFFAF48h, 80h
.text:00004EBC                 dd offset $LN50         ; "isa"
.text:00004EC0                 dd 0FFFFAF3Ch, 4
.text:00004EC8                 dd offset $LN51         ; "addrlen"
.text:00004ECC                 dd 0FFFFAF2Ch, 4
.text:00004ED4                 dd offset $LN52         ; "actx"
.text:00004ED8 $LN52           db 'actx',0             ; DATA XREF: .text:00004ED4o
.text:00004EDD $LN51           db 'addrlen',0          ; DATA XREF: .text:00004EC8o
.text:00004EE5 $LN50           db 'isa',0              ; DATA XREF: .text:00004EBCo
.text:00004EE9 $LN49_0         db 'atmark',0           ; DATA XREF: .text:00004EB0o
.text:00004EF0 $LN48_0         db 'buf',0              ; DATA XREF: .text:00004EA4o
.text:00004EF4 $LN55           dd offset $LN30_1       ; DATA XREF: _select_result+1BBr
.text:00004EF4                 dd offset $LN17_2       ; jump table for switch statement
.text:00004EF4                 dd offset $LN20_2
.text:00004EF4                 dd offset $LN6_0
.text:00004EF4                 dd offset $LN32_1
.text:00004EF4                 dd offset $LN15_0
.text:00004EF4                 dd offset $LN33_1
.text:00004F10 $LN47_0         db      0,     1,     6,     2
.text:00004F10                                         ; DATA XREF: _select_result+1B4r
.text:00004F10                 db      6,     6,     6,     3 ; indirect table for switch statement
.text:00004F10                 db      6,     6,     6,     6
.text:00004F10                 db      6,     6,     6,     4
.text:00004F10                 db      6,     6,     6,     6
.text:00004F10                 db      6,     6,     6,     6
.text:00004F10                 db      6,     6,     6,     6
.text:00004F10                 db      6,     6,     6,     5
.text:00004F30                 db 0Ch dup(0CCh)
.text:00004F3C
.text:00004F3C ; =============== S U B R O U T I N E =======================================
.text:00004F3C
.text:00004F3C ; Attributes: bp-based frame
.text:00004F3C
.text:00004F3C _cmpforsearch   proc near               ; DATA XREF: _select_result:loc_4757o
.text:00004F3C                                         ; _socket_writable+Bo
.text:00004F3C
.text:00004F3C var_C           = dword ptr -0Ch
.text:00004F3C var_8           = dword ptr -8
.text:00004F3C var_4           = dword ptr -4
.text:00004F3C arg_0           = dword ptr  8
.text:00004F3C arg_4           = dword ptr  0Ch
.text:00004F3C
.text:00004F3C                 push    ebp
.text:00004F3D                 mov     ebp, esp
.text:00004F3F                 sub     esp, 0Ch
.text:00004F42                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004F49                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004F50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F57                 mov     eax, [ebp+arg_4]
.text:00004F5A                 mov     [ebp+var_4], eax
.text:00004F5D                 mov     ecx, [ebp+arg_0]
.text:00004F60                 mov     [ebp+var_8], ecx
.text:00004F63                 mov     edx, [ebp+var_4]
.text:00004F66                 mov     eax, [edx+8]
.text:00004F69                 mov     [ebp+var_C], eax
.text:00004F6C                 mov     ecx, [ebp+var_8]
.text:00004F6F                 cmp     ecx, [ebp+var_C]
.text:00004F72                 jnb     short loc_4F79
.text:00004F74                 or      eax, 0FFFFFFFFh
.text:00004F77                 jmp     short loc_4F8A
.text:00004F79 ; ---------------------------------------------------------------------------
.text:00004F79
.text:00004F79 loc_4F79:                               ; CODE XREF: _cmpforsearch+36j
.text:00004F79                 mov     edx, [ebp+var_8]
.text:00004F7C                 cmp     edx, [ebp+var_C]
.text:00004F7F                 jbe     short loc_4F88
.text:00004F81                 mov     eax, 1
.text:00004F86                 jmp     short loc_4F8A
.text:00004F88 ; ---------------------------------------------------------------------------
.text:00004F88
.text:00004F88 loc_4F88:                               ; CODE XREF: _cmpforsearch+43j
.text:00004F88                 xor     eax, eax
.text:00004F8A
.text:00004F8A loc_4F8A:                               ; CODE XREF: _cmpforsearch+3Bj
.text:00004F8A                                         ; _cmpforsearch+4Aj
.text:00004F8A                 mov     esp, ebp
.text:00004F8C                 pop     ebp
.text:00004F8D                 retn
.text:00004F8D _cmpforsearch   endp
.text:00004F8D
.text:00004F8D ; ---------------------------------------------------------------------------
.text:00004F8E                 db 0Eh dup(0CCh)
.text:00004F9C
.text:00004F9C ; =============== S U B R O U T I N E =======================================
.text:00004F9C
.text:00004F9C ; Attributes: bp-based frame
.text:00004F9C
.text:00004F9C _sk_tcp_accept  proc near               ; DATA XREF: _select_result+6FFo
.text:00004F9C
.text:00004F9C var_C           = dword ptr -0Ch
.text:00004F9C var_8           = dword ptr -8
.text:00004F9C dwMessageId     = dword ptr -4
.text:00004F9C arg_0           = dword ptr  8
.text:00004F9C arg_4           = dword ptr  0Ch
.text:00004F9C
.text:00004F9C                 push    ebp
.text:00004F9D                 mov     ebp, esp
.text:00004F9F                 sub     esp, 0Ch
.text:00004FA2                 push    esi
.text:00004FA3                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004FAA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004FB1                 mov     [ebp+dwMessageId], 0CCCCCCCCh
.text:00004FB8                 push    68h ; 'h'
.text:00004FBA                 push    1
.text:00004FBC                 call    _safemalloc
.text:00004FC1                 add     esp, 8
.text:00004FC4                 mov     [ebp+var_C], eax
.text:00004FC7                 mov     eax, [ebp+var_C]
.text:00004FCA                 mov     dword ptr [eax], offset ?fn_table@?1??sk_tcp_accept@@9@9 ; `sk_tcp_accept'::`2'::fn_table
.text:00004FD0                 mov     ecx, [ebp+var_C]
.text:00004FD3                 mov     dword ptr [ecx+4], 0
.text:00004FDA                 mov     edx, [ebp+var_C]
.text:00004FDD                 mov     eax, [ebp+arg_4]
.text:00004FE0                 mov     [edx+0Ch], eax
.text:00004FE3                 mov     ecx, [ebp+var_C]
.text:00004FE6                 add     ecx, 10h
.text:00004FE9                 push    ecx
.text:00004FEA                 call    _bufchain_init
.text:00004FEF                 add     esp, 4
.text:00004FF2                 mov     edx, [ebp+var_C]
.text:00004FF5                 mov     dword ptr [edx+20h], 1
.text:00004FFC                 mov     eax, [ebp+var_C]
.text:00004FFF                 mov     dword ptr [eax+34h], 0
.text:00005006                 mov     ecx, [ebp+var_C]
.text:00005009                 mov     dword ptr [ecx+48h], 0
.text:00005010                 mov     edx, [ebp+var_C]
.text:00005013                 mov     dword ptr [edx+24h], 1
.text:0000501A                 mov     eax, [ebp+var_C]
.text:0000501D                 mov     dword ptr [eax+28h], 0
.text:00005024                 mov     ecx, [ebp+var_C]
.text:00005027                 mov     dword ptr [ecx+2Ch], 0
.text:0000502E                 mov     edx, [ebp+var_C]
.text:00005031                 mov     dword ptr [edx+5Ch], 0
.text:00005038                 mov     eax, [ebp+var_C]
.text:0000503B                 mov     dword ptr [eax+64h], 0
.text:00005042                 mov     ecx, [ebp+var_C]
.text:00005045                 mov     dword ptr [ecx+60h], 0
.text:0000504C                 mov     edx, [ebp+var_C]
.text:0000504F                 mov     dword ptr [edx+4Ch], 0
.text:00005056                 mov     eax, [ebp+var_C]
.text:00005059                 mov     ecx, [ebp+arg_0]
.text:0000505C                 mov     [eax+8], ecx
.text:0000505F                 mov     edx, [ebp+var_C]
.text:00005062                 cmp     dword ptr [edx+8], 0FFFFFFFFh
.text:00005066                 jnz     short loc_5091
.text:00005068                 mov     esi, esp
.text:0000506A                 call    dword ptr ds:_p_WSAGetLastError
.text:00005070                 cmp     esi, esp
.text:00005072                 call    __RTC_CheckEsp
.text:00005077                 mov     [ebp+dwMessageId], eax
.text:0000507A                 mov     eax, [ebp+dwMessageId]
.text:0000507D                 push    eax             ; dwMessageId
.text:0000507E                 call    _winsock_error_string
.text:00005083                 add     esp, 4
.text:00005086                 mov     ecx, [ebp+var_C]
.text:00005089                 mov     [ecx+4], eax
.text:0000508C                 mov     eax, [ebp+var_C]
.text:0000508F                 jmp     short loc_50D9
.text:00005091 ; ---------------------------------------------------------------------------
.text:00005091
.text:00005091 loc_5091:                               ; CODE XREF: _sk_tcp_accept+CAj
.text:00005091                 mov     edx, [ebp+var_C]
.text:00005094                 mov     dword ptr [edx+38h], 0
.text:0000509B                 push    1
.text:0000509D                 mov     eax, [ebp+var_C]
.text:000050A0                 mov     ecx, [eax+8]
.text:000050A3                 push    ecx
.text:000050A4                 call    _do_select
.text:000050A9                 add     esp, 8
.text:000050AC                 mov     [ebp+var_8], eax
.text:000050AF                 cmp     [ebp+var_8], 0
.text:000050B3                 jz      short loc_50C3
.text:000050B5                 mov     edx, [ebp+var_C]
.text:000050B8                 mov     eax, [ebp+var_8]
.text:000050BB                 mov     [edx+4], eax
.text:000050BE                 mov     eax, [ebp+var_C]
.text:000050C1                 jmp     short loc_50D9
.text:000050C3 ; ---------------------------------------------------------------------------
.text:000050C3
.text:000050C3 loc_50C3:                               ; CODE XREF: _sk_tcp_accept+117j
.text:000050C3                 mov     ecx, [ebp+var_C]
.text:000050C6                 push    ecx
.text:000050C7                 mov     edx, ds:_sktree
.text:000050CD                 push    edx
.text:000050CE                 call    _add234
.text:000050D3                 add     esp, 8
.text:000050D6                 mov     eax, [ebp+var_C]
.text:000050D9
.text:000050D9 loc_50D9:                               ; CODE XREF: _sk_tcp_accept+F3j
.text:000050D9                                         ; _sk_tcp_accept+125j
.text:000050D9                 pop     esi
.text:000050DA                 add     esp, 0Ch
.text:000050DD                 cmp     ebp, esp
.text:000050DF                 call    __RTC_CheckEsp
.text:000050E4                 mov     esp, ebp
.text:000050E6                 pop     ebp
.text:000050E7                 retn
.text:000050E7 _sk_tcp_accept  endp
.text:000050E7
.text:000050E7 ; ---------------------------------------------------------------------------
.text:000050E8                 db 4 dup(0CCh)
.text:000050EC
.text:000050EC ; =============== S U B R O U T I N E =======================================
.text:000050EC
.text:000050EC ; Attributes: bp-based frame
.text:000050EC
.text:000050EC                 public _sk_addr_error
.text:000050EC _sk_addr_error  proc near
.text:000050EC
.text:000050EC arg_0           = dword ptr  8
.text:000050EC
.text:000050EC                 push    ebp
.text:000050ED                 mov     ebp, esp
.text:000050EF                 mov     eax, [ebp+arg_0]
.text:000050F2                 mov     eax, [eax+4]
.text:000050F5                 pop     ebp
.text:000050F6                 retn
.text:000050F6 _sk_addr_error  endp
.text:000050F6
.text:000050F6 ; ---------------------------------------------------------------------------
.text:000050F7                 db 5 dup(0CCh)
.text:000050FC
.text:000050FC ; =============== S U B R O U T I N E =======================================
.text:000050FC
.text:000050FC ; Attributes: bp-based frame
.text:000050FC
.text:000050FC _sk_tcp_socket_error proc near          ; DATA XREF: .rdata:0000003Co
.text:000050FC                                         ; .rdata:0000005Co ...
.text:000050FC
.text:000050FC var_4           = dword ptr -4
.text:000050FC arg_0           = dword ptr  8
.text:000050FC
.text:000050FC                 push    ebp
.text:000050FD                 mov     ebp, esp
.text:000050FF                 push    ecx
.text:00005100                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005107                 mov     eax, [ebp+arg_0]
.text:0000510A                 mov     [ebp+var_4], eax
.text:0000510D                 mov     ecx, [ebp+var_4]
.text:00005110                 mov     eax, [ecx+4]
.text:00005113                 mov     esp, ebp
.text:00005115                 pop     ebp
.text:00005116                 retn
.text:00005116 _sk_tcp_socket_error endp
.text:00005116
.text:00005116 ; ---------------------------------------------------------------------------
.text:00005117                 db 5 dup(0CCh)
.text:0000511C
.text:0000511C ; =============== S U B R O U T I N E =======================================
.text:0000511C
.text:0000511C ; Attributes: bp-based frame
.text:0000511C
.text:0000511C _sk_tcp_set_frozen proc near            ; DATA XREF: .rdata:00000038o
.text:0000511C                                         ; .rdata:00000058o ...
.text:0000511C
.text:0000511C var_10          = dword ptr -10h
.text:0000511C var_C           = dword ptr -0Ch
.text:0000511C var_8           = dword ptr -8
.text:0000511C var_4           = dword ptr -4
.text:0000511C arg_0           = dword ptr  8
.text:0000511C arg_4           = dword ptr  0Ch
.text:0000511C
.text:0000511C                 push    ebp
.text:0000511D                 mov     ebp, esp
.text:0000511F                 sub     esp, 10h
.text:00005122                 push    esi
.text:00005123                 mov     eax, 0CCCCCCCCh
.text:00005128                 mov     [ebp+var_10], eax
.text:0000512B                 mov     [ebp+var_C], eax
.text:0000512E                 mov     [ebp+var_8], eax
.text:00005131                 mov     [ebp+var_4], eax
.text:00005134                 mov     eax, [ebp+arg_0]
.text:00005137                 mov     [ebp+var_4], eax
.text:0000513A                 mov     ecx, [ebp+var_4]
.text:0000513D                 mov     edx, [ecx+24h]
.text:00005140                 cmp     edx, [ebp+arg_4]
.text:00005143                 jnz     short loc_5147
.text:00005145                 jmp     short loc_5198
.text:00005147 ; ---------------------------------------------------------------------------
.text:00005147
.text:00005147 loc_5147:                               ; CODE XREF: _sk_tcp_set_frozen+27j
.text:00005147                 mov     eax, [ebp+var_4]
.text:0000514A                 mov     ecx, [ebp+arg_4]
.text:0000514D                 mov     [eax+24h], ecx
.text:00005150                 cmp     [ebp+arg_4], 0
.text:00005154                 jnz     short loc_518E
.text:00005156                 push    1
.text:00005158                 mov     edx, [ebp+var_4]
.text:0000515B                 mov     eax, [edx+8]
.text:0000515E                 push    eax
.text:0000515F                 call    _do_select
.text:00005164                 add     esp, 8
.text:00005167                 mov     ecx, [ebp+var_4]
.text:0000516A                 cmp     dword ptr [ecx+28h], 0
.text:0000516E                 jz      short loc_518E
.text:00005170                 mov     esi, esp
.text:00005172                 push    2
.text:00005174                 push    1
.text:00005176                 lea     edx, [ebp+var_C+3]
.text:00005179                 push    edx
.text:0000517A                 mov     eax, [ebp+var_4]
.text:0000517D                 mov     ecx, [eax+8]
.text:00005180                 push    ecx
.text:00005181                 call    ds:_p_recv
.text:00005187                 cmp     esi, esp
.text:00005189                 call    __RTC_CheckEsp
.text:0000518E
.text:0000518E loc_518E:                               ; CODE XREF: _sk_tcp_set_frozen+38j
.text:0000518E                                         ; _sk_tcp_set_frozen+52j
.text:0000518E                 mov     edx, [ebp+var_4]
.text:00005191                 mov     dword ptr [edx+28h], 0
.text:00005198
.text:00005198 loc_5198:                               ; CODE XREF: _sk_tcp_set_frozen+29j
.text:00005198                 push    edx
.text:00005199                 mov     ecx, ebp
.text:0000519B                 push    eax
.text:0000519C                 lea     edx, $LN8_0
.text:000051A2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000051A7                 pop     eax
.text:000051A8                 pop     edx
.text:000051A9                 pop     esi
.text:000051AA                 add     esp, 10h
.text:000051AD                 cmp     ebp, esp
.text:000051AF                 call    __RTC_CheckEsp
.text:000051B4                 mov     esp, ebp
.text:000051B6                 pop     ebp
.text:000051B7                 retn
.text:000051B7 _sk_tcp_set_frozen endp
.text:000051B7
.text:000051B7 ; ---------------------------------------------------------------------------
.text:000051B8 $LN8_0          dd 1                    ; DATA XREF: _sk_tcp_set_frozen+80o
.text:000051BC                 dd offset $LN7_0
.text:000051C0 $LN7_0          dd 0FFFFFFF7h, 1        ; DATA XREF: .text:000051BCo
.text:000051C8                 dd offset $LN6_1
.text:000051CC $LN6_1          dd 0CCCC0063h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000051C8o
.text:000051DC
.text:000051DC ; =============== S U B R O U T I N E =======================================
.text:000051DC
.text:000051DC ; Attributes: bp-based frame
.text:000051DC
.text:000051DC                 public _socket_reselect_all
.text:000051DC _socket_reselect_all proc near
.text:000051DC
.text:000051DC var_8           = dword ptr -8
.text:000051DC var_4           = dword ptr -4
.text:000051DC
.text:000051DC                 push    ebp
.text:000051DD                 mov     ebp, esp
.text:000051DF                 sub     esp, 8
.text:000051E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000051E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051F0                 mov     [ebp+var_8], 0
.text:000051F7                 jmp     short loc_5202
.text:000051F9 ; ---------------------------------------------------------------------------
.text:000051F9
.text:000051F9 loc_51F9:                               ; CODE XREF: _socket_reselect_all:loc_5238j
.text:000051F9                 mov     eax, [ebp+var_8]
.text:000051FC                 add     eax, 1
.text:000051FF                 mov     [ebp+var_8], eax
.text:00005202
.text:00005202 loc_5202:                               ; CODE XREF: _socket_reselect_all+1Bj
.text:00005202                 mov     ecx, [ebp+var_8]
.text:00005205                 push    ecx
.text:00005206                 mov     edx, ds:_sktree
.text:0000520C                 push    edx
.text:0000520D                 call    _index234
.text:00005212                 add     esp, 8
.text:00005215                 mov     [ebp+var_4], eax
.text:00005218                 cmp     [ebp+var_4], 0
.text:0000521C                 jz      short loc_523A
.text:0000521E                 mov     eax, [ebp+var_4]
.text:00005221                 cmp     dword ptr [eax+24h], 0
.text:00005225                 jnz     short loc_5238
.text:00005227                 push    1
.text:00005229                 mov     ecx, [ebp+var_4]
.text:0000522C                 mov     edx, [ecx+8]
.text:0000522F                 push    edx
.text:00005230                 call    _do_select
.text:00005235                 add     esp, 8
.text:00005238
.text:00005238 loc_5238:                               ; CODE XREF: _socket_reselect_all+49j
.text:00005238                 jmp     short loc_51F9
.text:0000523A ; ---------------------------------------------------------------------------
.text:0000523A
.text:0000523A loc_523A:                               ; CODE XREF: _socket_reselect_all+40j
.text:0000523A                 add     esp, 8
.text:0000523D                 cmp     ebp, esp
.text:0000523F                 call    __RTC_CheckEsp
.text:00005244                 mov     esp, ebp
.text:00005246                 pop     ebp
.text:00005247                 retn
.text:00005247 _socket_reselect_all endp
.text:00005247
.text:00005247 ; ---------------------------------------------------------------------------
.text:00005248                 db 4 dup(0CCh)
.text:0000524C
.text:0000524C ; =============== S U B R O U T I N E =======================================
.text:0000524C
.text:0000524C ; Attributes: bp-based frame
.text:0000524C
.text:0000524C                 public _first_socket
.text:0000524C _first_socket   proc near
.text:0000524C
.text:0000524C var_C           = dword ptr -0Ch
.text:0000524C var_8           = dword ptr -8
.text:0000524C var_4           = dword ptr -4
.text:0000524C arg_0           = dword ptr  8
.text:0000524C
.text:0000524C                 push    ebp
.text:0000524D                 mov     ebp, esp
.text:0000524F                 sub     esp, 0Ch
.text:00005252                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005259                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005260                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005267                 mov     eax, [ebp+arg_0]
.text:0000526A                 mov     dword ptr [eax], 0
.text:00005270                 mov     ecx, [ebp+arg_0]
.text:00005273                 mov     edx, [ecx]
.text:00005275                 mov     [ebp+var_8], edx
.text:00005278                 mov     eax, [ebp+arg_0]
.text:0000527B                 mov     ecx, [eax]
.text:0000527D                 add     ecx, 1
.text:00005280                 mov     edx, [ebp+arg_0]
.text:00005283                 mov     [edx], ecx
.text:00005285                 mov     eax, [ebp+var_8]
.text:00005288                 push    eax
.text:00005289                 mov     ecx, ds:_sktree
.text:0000528F                 push    ecx
.text:00005290                 call    _index234
.text:00005295                 add     esp, 8
.text:00005298                 mov     [ebp+var_4], eax
.text:0000529B                 cmp     [ebp+var_4], 0
.text:0000529F                 jz      short loc_52AC
.text:000052A1                 mov     edx, [ebp+var_4]
.text:000052A4                 mov     eax, [edx+8]
.text:000052A7                 mov     [ebp+var_C], eax
.text:000052AA                 jmp     short loc_52B3
.text:000052AC ; ---------------------------------------------------------------------------
.text:000052AC
.text:000052AC loc_52AC:                               ; CODE XREF: _first_socket+53j
.text:000052AC                 mov     [ebp+var_C], 0FFFFFFFFh
.text:000052B3
.text:000052B3 loc_52B3:                               ; CODE XREF: _first_socket+5Ej
.text:000052B3                 mov     eax, [ebp+var_C]
.text:000052B6                 add     esp, 0Ch
.text:000052B9                 cmp     ebp, esp
.text:000052BB                 call    __RTC_CheckEsp
.text:000052C0                 mov     esp, ebp
.text:000052C2                 pop     ebp
.text:000052C3                 retn
.text:000052C3 _first_socket   endp
.text:000052C3
.text:000052C3 ; ---------------------------------------------------------------------------
.text:000052C4                 db 8 dup(0CCh)
.text:000052CC
.text:000052CC ; =============== S U B R O U T I N E =======================================
.text:000052CC
.text:000052CC ; Attributes: bp-based frame
.text:000052CC
.text:000052CC                 public _next_socket
.text:000052CC _next_socket    proc near
.text:000052CC
.text:000052CC var_C           = dword ptr -0Ch
.text:000052CC var_8           = dword ptr -8
.text:000052CC var_4           = dword ptr -4
.text:000052CC arg_0           = dword ptr  8
.text:000052CC
.text:000052CC                 push    ebp
.text:000052CD                 mov     ebp, esp
.text:000052CF                 sub     esp, 0Ch
.text:000052D2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000052D9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000052E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052E7                 mov     eax, [ebp+arg_0]
.text:000052EA                 mov     ecx, [eax]
.text:000052EC                 mov     [ebp+var_8], ecx
.text:000052EF                 mov     edx, [ebp+arg_0]
.text:000052F2                 mov     eax, [edx]
.text:000052F4                 add     eax, 1
.text:000052F7                 mov     ecx, [ebp+arg_0]
.text:000052FA                 mov     [ecx], eax
.text:000052FC                 mov     edx, [ebp+var_8]
.text:000052FF                 push    edx
.text:00005300                 mov     eax, ds:_sktree
.text:00005305                 push    eax
.text:00005306                 call    _index234
.text:0000530B                 add     esp, 8
.text:0000530E                 mov     [ebp+var_4], eax
.text:00005311                 cmp     [ebp+var_4], 0
.text:00005315                 jz      short loc_5322
.text:00005317                 mov     ecx, [ebp+var_4]
.text:0000531A                 mov     edx, [ecx+8]
.text:0000531D                 mov     [ebp+var_C], edx
.text:00005320                 jmp     short loc_5329
.text:00005322 ; ---------------------------------------------------------------------------
.text:00005322
.text:00005322 loc_5322:                               ; CODE XREF: _next_socket+49j
.text:00005322                 mov     [ebp+var_C], 0FFFFFFFFh
.text:00005329
.text:00005329 loc_5329:                               ; CODE XREF: _next_socket+54j
.text:00005329                 mov     eax, [ebp+var_C]
.text:0000532C                 add     esp, 0Ch
.text:0000532F                 cmp     ebp, esp
.text:00005331                 call    __RTC_CheckEsp
.text:00005336                 mov     esp, ebp
.text:00005338                 pop     ebp
.text:00005339                 retn
.text:00005339 _next_socket    endp
.text:00005339
.text:00005339 ; ---------------------------------------------------------------------------
.text:0000533A                 align 4
.text:0000533C
.text:0000533C ; =============== S U B R O U T I N E =======================================
.text:0000533C
.text:0000533C ; Attributes: bp-based frame
.text:0000533C
.text:0000533C                 public _socket_writable
.text:0000533C _socket_writable proc near
.text:0000533C
.text:0000533C var_4           = dword ptr -4
.text:0000533C arg_0           = dword ptr  8
.text:0000533C
.text:0000533C                 push    ebp
.text:0000533D                 mov     ebp, esp
.text:0000533F                 push    ecx
.text:00005340                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005347                 push    offset _cmpforsearch
.text:0000534C                 mov     eax, [ebp+arg_0]
.text:0000534F                 push    eax
.text:00005350                 mov     ecx, ds:_sktree
.text:00005356                 push    ecx
.text:00005357                 call    _find234
.text:0000535C                 add     esp, 0Ch
.text:0000535F                 mov     [ebp+var_4], eax
.text:00005362                 cmp     [ebp+var_4], 0
.text:00005366                 jz      short loc_5384
.text:00005368                 mov     edx, [ebp+var_4]
.text:0000536B                 add     edx, 10h
.text:0000536E                 push    edx
.text:0000536F                 call    _bufchain_size
.text:00005374                 add     esp, 4
.text:00005377                 xor     ecx, ecx
.text:00005379                 test    eax, eax
.text:0000537B                 setnle  cl
.text:0000537E                 mov     eax, ecx
.text:00005380                 jmp     short loc_5386
.text:00005382 ; ---------------------------------------------------------------------------
.text:00005382                 jmp     short loc_5386
.text:00005384 ; ---------------------------------------------------------------------------
.text:00005384
.text:00005384 loc_5384:                               ; CODE XREF: _socket_writable+2Aj
.text:00005384                 xor     eax, eax
.text:00005386
.text:00005386 loc_5386:                               ; CODE XREF: _socket_writable+44j
.text:00005386                                         ; _socket_writable+46j
.text:00005386                 add     esp, 4
.text:00005389                 cmp     ebp, esp
.text:0000538B                 call    __RTC_CheckEsp
.text:00005390                 mov     esp, ebp
.text:00005392                 pop     ebp
.text:00005393                 retn
.text:00005393 _socket_writable endp
.text:00005393
.text:00005393 ; ---------------------------------------------------------------------------
.text:00005394                 db 8 dup(0CCh)
.text:0000539C
.text:0000539C ; =============== S U B R O U T I N E =======================================
.text:0000539C
.text:0000539C ; Attributes: bp-based frame
.text:0000539C
.text:0000539C                 public _net_service_lookup
.text:0000539C _net_service_lookup proc near
.text:0000539C
.text:0000539C var_4           = dword ptr -4
.text:0000539C arg_0           = dword ptr  8
.text:0000539C
.text:0000539C                 push    ebp
.text:0000539D                 mov     ebp, esp
.text:0000539F                 push    ecx
.text:000053A0                 push    esi
.text:000053A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053A8                 mov     esi, esp
.text:000053AA                 push    0
.text:000053AC                 mov     eax, [ebp+arg_0]
.text:000053AF                 push    eax
.text:000053B0                 call    ds:_p_getservbyname
.text:000053B6                 cmp     esi, esp
.text:000053B8                 call    __RTC_CheckEsp
.text:000053BD                 mov     [ebp+var_4], eax
.text:000053C0                 cmp     [ebp+var_4], 0
.text:000053C4                 jz      short loc_53E4
.text:000053C6                 mov     esi, esp
.text:000053C8                 mov     ecx, [ebp+var_4]
.text:000053CB                 movzx   edx, word ptr [ecx+8]
.text:000053CF                 push    edx
.text:000053D0                 call    ds:_p_ntohs
.text:000053D6                 cmp     esi, esp
.text:000053D8                 call    __RTC_CheckEsp
.text:000053DD                 movzx   eax, ax
.text:000053E0                 jmp     short loc_53E6
.text:000053E2 ; ---------------------------------------------------------------------------
.text:000053E2                 jmp     short loc_53E6
.text:000053E4 ; ---------------------------------------------------------------------------
.text:000053E4
.text:000053E4 loc_53E4:                               ; CODE XREF: _net_service_lookup+28j
.text:000053E4                 xor     eax, eax
.text:000053E6
.text:000053E6 loc_53E6:                               ; CODE XREF: _net_service_lookup+44j
.text:000053E6                                         ; _net_service_lookup+46j
.text:000053E6                 pop     esi
.text:000053E7                 add     esp, 4
.text:000053EA                 cmp     ebp, esp
.text:000053EC                 call    __RTC_CheckEsp
.text:000053F1                 mov     esp, ebp
.text:000053F3                 pop     ebp
.text:000053F4                 retn
.text:000053F4 _net_service_lookup endp
.text:000053F4
.text:000053F4 ; ---------------------------------------------------------------------------
.text:000053F5                 db 7 dup(0CCh)
.text:000053FC
.text:000053FC ; =============== S U B R O U T I N E =======================================
.text:000053FC
.text:000053FC ; Attributes: bp-based frame
.text:000053FC
.text:000053FC                 public _get_hostname
.text:000053FC _get_hostname   proc near
.text:000053FC
.text:000053FC Str             = dword ptr -8
.text:000053FC var_4           = dword ptr -4
.text:000053FC
.text:000053FC                 push    ebp
.text:000053FD                 mov     ebp, esp
.text:000053FF                 sub     esp, 8
.text:00005402                 push    esi
.text:00005403                 mov     [ebp+Str], 0CCCCCCCCh
.text:0000540A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005411                 mov     [ebp+var_4], 80h ; 'Ç'
.text:00005418                 mov     [ebp+Str], 0
.text:0000541F
.text:0000541F loc_541F:                               ; CODE XREF: _get_hostname+84j
.text:0000541F                 mov     eax, [ebp+var_4]
.text:00005422                 shl     eax, 1
.text:00005424                 mov     [ebp+var_4], eax
.text:00005427                 push    1
.text:00005429                 mov     ecx, [ebp+var_4]
.text:0000542C                 push    ecx
.text:0000542D                 mov     edx, [ebp+Str]
.text:00005430                 push    edx
.text:00005431                 call    _saferealloc
.text:00005436                 add     esp, 0Ch
.text:00005439                 mov     [ebp+Str], eax
.text:0000543C                 mov     esi, esp
.text:0000543E                 mov     eax, [ebp+var_4]
.text:00005441                 push    eax
.text:00005442                 mov     ecx, [ebp+Str]
.text:00005445                 push    ecx
.text:00005446                 call    ds:_p_gethostname
.text:0000544C                 cmp     esi, esp
.text:0000544E                 call    __RTC_CheckEsp
.text:00005453                 test    eax, eax
.text:00005455                 jge     short loc_546C
.text:00005457                 mov     edx, [ebp+Str]
.text:0000545A                 push    edx
.text:0000545B                 call    _safefree
.text:00005460                 add     esp, 4
.text:00005463                 mov     [ebp+Str], 0
.text:0000546A                 jmp     short loc_5482
.text:0000546C ; ---------------------------------------------------------------------------
.text:0000546C
.text:0000546C loc_546C:                               ; CODE XREF: _get_hostname+59j
.text:0000546C                 mov     eax, [ebp+Str]
.text:0000546F                 push    eax             ; Str
.text:00005470                 call    _strlen
.text:00005475                 add     esp, 4
.text:00005478                 mov     ecx, [ebp+var_4]
.text:0000547B                 sub     ecx, 1
.text:0000547E                 cmp     eax, ecx
.text:00005480                 jnb     short loc_541F
.text:00005482
.text:00005482 loc_5482:                               ; CODE XREF: _get_hostname+6Ej
.text:00005482                 mov     eax, [ebp+Str]
.text:00005485                 pop     esi
.text:00005486                 add     esp, 8
.text:00005489                 cmp     ebp, esp
.text:0000548B                 call    __RTC_CheckEsp
.text:00005490                 mov     esp, ebp
.text:00005492                 pop     ebp
.text:00005493                 retn
.text:00005493 _get_hostname   endp
.text:00005493
.text:00005493 ; ---------------------------------------------------------------------------
.text:00005494                 db 8 dup(0CCh)
.text:0000549C
.text:0000549C ; =============== S U B R O U T I N E =======================================
.text:0000549C
.text:0000549C ; Attributes: bp-based frame
.text:0000549C
.text:0000549C                 public _platform_get_x11_unix_address
.text:0000549C _platform_get_x11_unix_address proc near
.text:0000549C
.text:0000549C Dst             = dword ptr -4
.text:0000549C
.text:0000549C                 push    ebp
.text:0000549D                 mov     ebp, esp
.text:0000549F                 push    ecx
.text:000054A0                 mov     [ebp+Dst], 0CCCCCCCCh
.text:000054A7                 push    21Ch
.text:000054AC                 push    1
.text:000054AE                 call    _safemalloc
.text:000054B3                 add     esp, 8
.text:000054B6                 mov     [ebp+Dst], eax
.text:000054B9                 push    21Ch            ; Size
.text:000054BE                 push    0               ; Val
.text:000054C0                 mov     eax, [ebp+Dst]
.text:000054C3                 push    eax             ; Dst
.text:000054C4                 call    _memset
.text:000054C9                 add     esp, 0Ch
.text:000054CC                 mov     ecx, [ebp+Dst]
.text:000054CF                 mov     dword ptr [ecx+4], offset $SG87431 ; "unix sockets not supported on this plat"...
.text:000054D6                 mov     edx, [ebp+Dst]
.text:000054D9                 mov     dword ptr [edx], 1
.text:000054DF                 mov     eax, [ebp+Dst]
.text:000054E2                 add     esp, 4
.text:000054E5                 cmp     ebp, esp
.text:000054E7                 call    __RTC_CheckEsp
.text:000054EC                 mov     esp, ebp
.text:000054EE                 pop     ebp
.text:000054EF                 retn
.text:000054EF _platform_get_x11_unix_address endp
.text:000054EF
.text:000054EF _text           ends
.text:000054EF
.rtc$TMZ:000054F0 ; ===========================================================================
.rtc$TMZ:000054F0
.rtc$TMZ:000054F0 ; Segment type: Pure data
.rtc$TMZ:000054F0 ; Segment permissions: Read
.rtc$TMZ:000054F0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000054F0                 assume cs:_rtc$TMZ
.rtc$TMZ:000054F0                 ;org 54F0h
.rtc$TMZ:000054F0 ; COMDAT (pick any)
.rtc$TMZ:000054F0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000054F0 _rtc$TMZ        ends
.rtc$TMZ:000054F0
.rtc$IMZ:000054F4 ; ===========================================================================
.rtc$IMZ:000054F4
.rtc$IMZ:000054F4 ; Segment type: Pure data
.rtc$IMZ:000054F4 ; Segment permissions: Read
.rtc$IMZ:000054F4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000054F4                 assume cs:_rtc$IMZ
.rtc$IMZ:000054F4                 ;org 54F4h
.rtc$IMZ:000054F4 ; COMDAT (pick any)
.rtc$IMZ:000054F4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000054F4 _rtc$IMZ        ends
.rtc$IMZ:000054F4
.text:000054F8 ; ===========================================================================
.text:000054F8
.text:000054F8 ; Segment type: Pure code
.text:000054F8 ; Segment permissions: Read/Execute
.text:000054F8 _text           segment para public 'CODE' use32
.text:000054F8                 assume cs:_text
.text:000054F8                 ;org 54F8h
.text:000054F8 ; COMDAT (pick any)
.text:000054F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054F8
.text:000054F8 ; =============== S U B R O U T I N E =======================================
.text:000054F8
.text:000054F8 ; Attributes: bp-based frame
.text:000054F8
.text:000054F8 ; BOOLEAN IN6_IS_ADDR_LOOPBACK(const IN6_ADDR *a)
.text:000054F8                 public _IN6_IS_ADDR_LOOPBACK
.text:000054F8 _IN6_IS_ADDR_LOOPBACK proc near         ; CODE XREF: _sk_address_is_local+6Dp
.text:000054F8
.text:000054F8 var_4           = dword ptr -4
.text:000054F8 a               = dword ptr  8
.text:000054F8
.text:000054F8                 push    ebp
.text:000054F9                 mov     ebp, esp
.text:000054FB                 push    ecx
.text:000054FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005503                 mov     eax, [ebp+a]
.text:00005506                 movzx   ecx, word ptr [eax]
.text:00005509                 test    ecx, ecx
.text:0000550B                 jnz     short loc_5563
.text:0000550D                 mov     edx, [ebp+a]
.text:00005510                 movzx   eax, word ptr [edx+2]
.text:00005514                 test    eax, eax
.text:00005516                 jnz     short loc_5563
.text:00005518                 mov     ecx, [ebp+a]
.text:0000551B                 movzx   edx, word ptr [ecx+4]
.text:0000551F                 test    edx, edx
.text:00005521                 jnz     short loc_5563
.text:00005523                 mov     eax, [ebp+a]
.text:00005526                 movzx   ecx, word ptr [eax+6]
.text:0000552A                 test    ecx, ecx
.text:0000552C                 jnz     short loc_5563
.text:0000552E                 mov     edx, [ebp+a]
.text:00005531                 movzx   eax, word ptr [edx+8]
.text:00005535                 test    eax, eax
.text:00005537                 jnz     short loc_5563
.text:00005539                 mov     ecx, [ebp+a]
.text:0000553C                 movzx   edx, word ptr [ecx+0Ah]
.text:00005540                 test    edx, edx
.text:00005542                 jnz     short loc_5563
.text:00005544                 mov     eax, [ebp+a]
.text:00005547                 movzx   ecx, word ptr [eax+0Ch]
.text:0000554B                 test    ecx, ecx
.text:0000554D                 jnz     short loc_5563
.text:0000554F                 mov     edx, [ebp+a]
.text:00005552                 movzx   eax, word ptr [edx+0Eh]
.text:00005556                 cmp     eax, 100h
.text:0000555B                 jnz     short loc_5563
.text:0000555D                 mov     byte ptr [ebp+var_4+3], 1
.text:00005561                 jmp     short loc_5567
.text:00005563 ; ---------------------------------------------------------------------------
.text:00005563
.text:00005563 loc_5563:                               ; CODE XREF: _IN6_IS_ADDR_LOOPBACK+13j
.text:00005563                                         ; _IN6_IS_ADDR_LOOPBACK+1Ej ...
.text:00005563                 mov     byte ptr [ebp+var_4+3], 0
.text:00005567
.text:00005567 loc_5567:                               ; CODE XREF: _IN6_IS_ADDR_LOOPBACK+69j
.text:00005567                 mov     al, byte ptr [ebp+var_4+3]
.text:0000556A                 mov     esp, ebp
.text:0000556C                 pop     ebp
.text:0000556D                 retn
.text:0000556D _IN6_IS_ADDR_LOOPBACK endp
.text:0000556D
.text:0000556D _text           ends
.text:0000556D
UNDEF:00005570 ; ===========================================================================
UNDEF:00005570
UNDEF:00005570 ; Segment type: Externs
UNDEF:00005570 ; UNDEF
UNDEF:00005570                 extrn __RTC_CheckEsp:near ; CODE XREF: _sk_startup+40p
UNDEF:00005570                                         ; _sk_startup+7Dp ...
UNDEF:00005574                 extrn __RTC_Shutdown:near
UNDEF:00005574                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00005578                 extrn __RTC_InitBase:near
UNDEF:00005578                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000557C                 extrn _newtree234:near  ; CODE XREF: _sk_init+944p
UNDEF:0000557C                                         ; _winsock_error_string+1DCp
UNDEF:00005580                 extrn _p_WSAEnumNetworkEvents:near ; DATA XREF: _sk_init+3C0w
UNDEF:00005584                 extrn _p_WSAGetLastError:near
UNDEF:00005584                                         ; CODE XREF: _sk_namelookup+1D1p
UNDEF:00005584                                         ; _try_connect+10Fp ...
UNDEF:00005588                 extrn _p_select:near    ; DATA XREF: _sk_init+34Fw
UNDEF:0000558C                 extrn _p_WSAEventSelect:near ; DATA XREF: _sk_init+317w
UNDEF:00005590                 extrn _p_WSAAsyncSelect:near ; DATA XREF: _sk_init+2DFw
UNDEF:00005594 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00005594                 extrn __imp__GetProcAddress@8:near ; CODE XREF: _sk_init+78p
UNDEF:00005594                                         ; _sk_init+A4p ...
UNDEF:00005598                 extrn _fatalbox:near    ; CODE XREF: _sk_init+62p
UNDEF:00005598                                         ; _sk_init+937p ...
UNDEF:0000559C                 extrn _load_system32_dll:near ; CODE XREF: _sk_init+22p
UNDEF:0000559C                                         ; _sk_init+47p ...
UNDEF:000055A0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
UNDEF:000055A0                 extrn __imp__FreeLibrary@4:near ; CODE XREF: _sk_cleanup+A6p
UNDEF:000055A0                                         ; _sk_cleanup+C5p
UNDEF:000055A0                                         ; DATA XREF: ...
UNDEF:000055A4                 extrn _freetree234:near ; CODE XREF: _sk_cleanup+6Bp
UNDEF:000055A8                 extrn _index234:near    ; CODE XREF: _sk_cleanup+3Bp
UNDEF:000055A8                                         ; _socket_reselect_all+31p ...
UNDEF:000055AC                 extrn _add234:near      ; CODE XREF: _winsock_error_string+334p
UNDEF:000055AC                                         ; _try_connect+502p ...
UNDEF:000055B0                 extrn _saferealloc:near ; CODE XREF: _winsock_error_string+31Cp
UNDEF:000055B0                                         ; _get_hostname+35p
UNDEF:000055B4 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:000055B4                 extrn _sprintf:near     ; CODE XREF: _winsock_error_string+2BDp
UNDEF:000055B8 ; DWORD __stdcall GetLastError()
UNDEF:000055B8                 extrn __imp__GetLastError@0:near
UNDEF:000055B8                                         ; CODE XREF: _winsock_error_string+29Cp
UNDEF:000055B8                                         ; DATA XREF: _winsock_error_string+29Cr
UNDEF:000055BC ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
UNDEF:000055BC                 extrn __imp__FormatMessageA@28:near
UNDEF:000055BC                                         ; CODE XREF: _winsock_error_string+289p
UNDEF:000055BC                                         ; DATA XREF: _winsock_error_string+289r
UNDEF:000055C0 ; size_t __cdecl strlen(const char *Str)
UNDEF:000055C0                 extrn _strlen:near      ; CODE XREF: _winsock_error_string+259p
UNDEF:000055C0                                         ; _winsock_error_string+2CEp ...
UNDEF:000055C4 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:000055C4                 extrn _strcpy:near      ; CODE XREF: _winsock_error_string+24Ap
UNDEF:000055C4                                         ; _sk_namelookup+518p
UNDEF:000055C8                 extrn _safemalloc:near  ; CODE XREF: _winsock_error_string+211p
UNDEF:000055C8                                         ; _winsock_error_string+231p ...
UNDEF:000055CC                 extrn _find234:near     ; CODE XREF: _winsock_error_string+1F8p
UNDEF:000055CC                                         ; _socket_error_callback+1Fp ...
UNDEF:000055D0                 extrn ___security_cookie:near
UNDEF:000055D0                                         ; DATA XREF: _winsock_error_string+17r
UNDEF:000055D0                                         ; _sk_namelookup+21r ...
UNDEF:000055D4 ; __fastcall __security_check_cookie(x)
UNDEF:000055D4                 extrn @__security_check_cookie@4:near
UNDEF:000055D4                                         ; CODE XREF: _winsock_error_string+35Ap
UNDEF:000055D4                                         ; _sk_namelookup+53Bp ...
UNDEF:000055D8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000055D8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000055D8                                         ; CODE XREF: _winsock_error_string+34Cp
UNDEF:000055D8                                         ; _sk_namelookup+52Dp ...
UNDEF:000055DC ; char *__cdecl strncpy(char *Dest, const char *Source, size_t Count)
UNDEF:000055DC                 extrn _strncpy:near     ; CODE XREF: _sk_namelookup+369p
UNDEF:000055DC                                         ; _sk_namelookup+383p ...
UNDEF:000055E0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000055E0                 extrn _memcpy:near      ; CODE XREF: _sk_namelookup+33Fp
UNDEF:000055E0                                         ; _sk_namelookup+427p ...
UNDEF:000055E4                 extrn _safefree:near    ; CODE XREF: _sk_namelookup+16Ep
UNDEF:000055E4                                         ; _sk_addr_free+53p ...
UNDEF:000055E8                 extrn _host_strduptrim:near ; CODE XREF: _sk_namelookup+126p
UNDEF:000055E8                                         ; _sk_newlistener+23Ap
UNDEF:000055EC ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000055EC                 extrn _memset:near      ; CODE XREF: _sk_namelookup+7Bp
UNDEF:000055EC                                         ; _sk_namelookup+104p ...
UNDEF:000055F0                 extrn __chkstk:near     ; CODE XREF: _sk_namelookup+8p
UNDEF:000055F0                                         ; _select_result+8p
UNDEF:000055F4                 extrn __RTC_UninitUse:near ; CODE XREF: _sk_namelookup+184p
UNDEF:000055F4                                         ; _sk_namelookup+206p ...
UNDEF:000055F8 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000055F8                 extrn __wassert:near    ; CODE XREF: _sk_getaddr+11Ep
UNDEF:000055F8                                         ; _sk_address_is_local+C7p ...
UNDEF:000055FC ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
UNDEF:000055FC                 extrn _strncmp:near     ; CODE XREF: _sk_hostname_is_local+40p
UNDEF:00005600 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00005600                 extrn _strcmp:near      ; CODE XREF: _sk_hostname_is_local+14p
UNDEF:00005600                                         ; _sk_hostname_is_local+29p
UNDEF:00005604                 extrn _logevent:near    ; CODE XREF: _ipv4_is_local_addr+BDp
UNDEF:00005604                                         ; _try_send+14Cp ...
UNDEF:00005608                 extrn _bufchain_init:near ; CODE XREF: _sk_new+46p
UNDEF:00005608                                         ; _sk_newlistener+60p ...
UNDEF:0000560C                 extrn _del234:near      ; CODE XREF: _try_connect+DCp
UNDEF:0000560C                                         ; _sk_tcp_close+35p
UNDEF:00005610                 extrn _do_select:near   ; CODE XREF: _try_connect+39p
UNDEF:00005610                                         ; _try_connect+445p ...
UNDEF:00005614                 extrn _bufchain_consume:near ; CODE XREF: _try_send+1C7p
UNDEF:00005618 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00005618                 extrn _memmove:near     ; CODE XREF: _try_send+19Ap
UNDEF:0000561C                 extrn _queue_toplevel_callback:near
UNDEF:0000561C                                         ; CODE XREF: _try_send+12Ep
UNDEF:00005620                 extrn _noise_ultralight:near ; CODE XREF: _try_send+A2p
UNDEF:00005620                                         ; _select_result+178p ...
UNDEF:00005624                 extrn _bufchain_prefix:near ; CODE XREF: _try_send+71p
UNDEF:00005628                 extrn _bufchain_size:near ; CODE XREF: _try_send+27p
UNDEF:00005628                                         ; _sk_tcp_write+64p ...
UNDEF:0000562C                 extrn _bufchain_add:near ; CODE XREF: _sk_tcp_write+40p
UNDEF:00005630                 extrn _bufchain_clear:near ; CODE XREF: _sk_tcp_write_oob+38p
UNDEF:00005630
UNDEF:00005630
UNDEF:00005630                 end