.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 9DB7E230CC980DE360FE97AF581E38A9
.bss:00000000 ; Input CRC32 : 52A50E9C
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\timing.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000 .intel_syntax noprefix
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:00000000 _timers         dd ?                    ; DATA XREF: _schedule_timer+91r
.bss:00000000                                         ; _schedule_timer+CAr ...
.bss:00000004 _timer_contexts dd ?                    ; DATA XREF: _schedule_timer+B9r
.bss:00000004                                         ; _init_timers+2Cw ...
.bss:00000008 _now            dd ?                    ; DATA XREF: _schedule_timer+30w
.bss:00000008                                         ; _schedule_timer+38r ...
.bss:00000008 _bss            ends
.bss:00000008
.text:0000000C ; ===========================================================================
.text:0000000C
.text:0000000C ; Segment type: Pure code
.text:0000000C ; Segment permissions: Read/Execute
.text:0000000C _text           segment para public 'CODE' use32
.text:0000000C                 assume cs:_text
.text:0000000C                 ;org 0Ch
.text:0000000C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000000C
.text:0000000C ; =============== S U B R O U T I N E =======================================
.text:0000000C
.text:0000000C ; Attributes: bp-based frame
.text:0000000C
.text:0000000C                 public _schedule_timer
.text:0000000C _schedule_timer proc near
.text:0000000C
.text:0000000C var_C           = dword ptr -0Ch
.text:0000000C var_8           = dword ptr -8
.text:0000000C var_4           = dword ptr -4
.text:0000000C arg_0           = dword ptr  8
.text:0000000C arg_4           = dword ptr  0Ch
.text:0000000C arg_8           = dword ptr  10h
.text:0000000C
.text:0000000C                 push    ebp
.text:0000000D                 mov     ebp, esp
.text:0000000F                 sub     esp, 0Ch
.text:00000012                 push    esi
.text:00000013                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000001A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000021                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000028                 call    _init_timers
.text:0000002D                 mov     esi, esp
.text:0000002F                 call    dword ptr ds:__imp__GetTickCount@0
.text:00000035                 cmp     esi, esp
.text:00000037                 call    __RTC_CheckEsp
.text:0000003C                 mov     ds:_now, eax
.text:00000041                 mov     eax, [ebp+arg_0]
.text:00000044                 add     eax, ds:_now
.text:0000004A                 mov     [ebp+var_4], eax
.text:0000004D                 mov     ecx, [ebp+var_4]
.text:00000050                 sub     ecx, ds:_now
.text:00000056                 jnz     short loc_64
.text:00000058                 mov     edx, ds:_now
.text:0000005E                 add     edx, 1
.text:00000061                 mov     [ebp+var_4], edx
.text:00000064
.text:00000064 loc_64:                                 ; CODE XREF: _schedule_timer+4Aj
.text:00000064                 push    10h
.text:00000066                 push    1
.text:00000068                 call    _safemalloc
.text:0000006D                 add     esp, 8
.text:00000070                 mov     [ebp+var_8], eax
.text:00000073                 mov     eax, [ebp+var_8]
.text:00000076                 mov     ecx, [ebp+arg_4]
.text:00000079                 mov     [eax], ecx
.text:0000007B                 mov     edx, [ebp+var_8]
.text:0000007E                 mov     eax, [ebp+arg_8]
.text:00000081                 mov     [edx+4], eax
.text:00000084                 mov     ecx, [ebp+var_8]
.text:00000087                 mov     edx, [ebp+var_4]
.text:0000008A                 mov     [ecx+8], edx
.text:0000008D                 mov     eax, [ebp+var_8]
.text:00000090                 mov     ecx, ds:_now
.text:00000096                 mov     [eax+0Ch], ecx
.text:00000099                 mov     edx, [ebp+var_8]
.text:0000009C                 push    edx
.text:0000009D                 mov     eax, ds:_timers
.text:000000A2                 push    eax
.text:000000A3                 call    _add234
.text:000000A8                 add     esp, 8
.text:000000AB                 cmp     [ebp+var_8], eax
.text:000000AE                 jz      short loc_BE
.text:000000B0                 mov     ecx, [ebp+var_8]
.text:000000B3                 push    ecx
.text:000000B4                 call    _safefree
.text:000000B9                 add     esp, 4
.text:000000BC                 jmp     short loc_D4
.text:000000BE ; ---------------------------------------------------------------------------
.text:000000BE
.text:000000BE loc_BE:                                 ; CODE XREF: _schedule_timer+A2j
.text:000000BE                 mov     edx, [ebp+var_8]
.text:000000C1                 mov     eax, [edx+4]
.text:000000C4                 push    eax
.text:000000C5                 mov     ecx, ds:_timer_contexts
.text:000000CB                 push    ecx
.text:000000CC                 call    _add234
.text:000000D1                 add     esp, 8
.text:000000D4
.text:000000D4 loc_D4:                                 ; CODE XREF: _schedule_timer+B0j
.text:000000D4                 push    0
.text:000000D6                 mov     edx, ds:_timers
.text:000000DC                 push    edx
.text:000000DD                 call    _index234
.text:000000E2                 add     esp, 8
.text:000000E5                 mov     [ebp+var_C], eax
.text:000000E8                 mov     eax, [ebp+var_C]
.text:000000EB                 cmp     eax, [ebp+var_8]
.text:000000EE                 jnz     short loc_FF
.text:000000F0                 mov     ecx, [ebp+var_C]
.text:000000F3                 mov     edx, [ecx+8]
.text:000000F6                 push    edx
.text:000000F7                 call    _timer_change_notify
.text:000000FC                 add     esp, 4
.text:000000FF
.text:000000FF loc_FF:                                 ; CODE XREF: _schedule_timer+E2j
.text:000000FF                 mov     eax, [ebp+var_4]
.text:00000102                 pop     esi
.text:00000103                 add     esp, 0Ch
.text:00000106                 cmp     ebp, esp
.text:00000108                 call    __RTC_CheckEsp
.text:0000010D                 mov     esp, ebp
.text:0000010F                 pop     ebp
.text:00000110                 retn
.text:00000110 _schedule_timer endp
.text:00000110
.text:00000110 ; ---------------------------------------------------------------------------
.text:00000111                 db 0Bh dup(0CCh)
.text:0000011C
.text:0000011C ; =============== S U B R O U T I N E =======================================
.text:0000011C
.text:0000011C ; Attributes: bp-based frame
.text:0000011C
.text:0000011C _init_timers    proc near               ; CODE XREF: _schedule_timer+1Cp
.text:0000011C                                         ; _run_timers+Cp ...
.text:0000011C                 push    ebp
.text:0000011D                 mov     ebp, esp
.text:0000011F                 push    esi
.text:00000120                 cmp     ds:_timers, 0
.text:00000127                 jnz     short loc_161
.text:00000129                 push    offset _compare_timers
.text:0000012E                 call    _newtree234
.text:00000133                 add     esp, 4
.text:00000136                 mov     ds:_timers, eax
.text:0000013B                 push    offset _compare_timer_contexts
.text:00000140                 call    _newtree234
.text:00000145                 add     esp, 4
.text:00000148                 mov     ds:_timer_contexts, eax
.text:0000014D                 mov     esi, esp
.text:0000014F                 call    dword ptr ds:__imp__GetTickCount@0
.text:00000155                 cmp     esi, esp
.text:00000157                 call    __RTC_CheckEsp
.text:0000015C                 mov     ds:_now, eax
.text:00000161
.text:00000161 loc_161:                                ; CODE XREF: _init_timers+Bj
.text:00000161                 pop     esi
.text:00000162                 cmp     ebp, esp
.text:00000164                 call    __RTC_CheckEsp
.text:00000169                 pop     ebp
.text:0000016A                 retn
.text:0000016A _init_timers    endp
.text:0000016A
.text:0000016A ; ---------------------------------------------------------------------------
.text:0000016B                 align 4
.text:0000016C
.text:0000016C ; =============== S U B R O U T I N E =======================================
.text:0000016C
.text:0000016C ; Attributes: bp-based frame
.text:0000016C
.text:0000016C _compare_timers proc near               ; DATA XREF: _init_timers+Do
.text:0000016C
.text:0000016C var_10          = dword ptr -10h
.text:0000016C var_C           = dword ptr -0Ch
.text:0000016C var_8           = dword ptr -8
.text:0000016C var_4           = dword ptr -4
.text:0000016C arg_0           = dword ptr  8
.text:0000016C arg_4           = dword ptr  0Ch
.text:0000016C
.text:0000016C                 push    ebp
.text:0000016D                 mov     ebp, esp
.text:0000016F                 sub     esp, 10h
.text:00000172                 mov     eax, 0CCCCCCCCh
.text:00000177                 mov     [ebp+var_10], eax
.text:0000017A                 mov     [ebp+var_C], eax
.text:0000017D                 mov     [ebp+var_8], eax
.text:00000180                 mov     [ebp+var_4], eax
.text:00000183                 mov     eax, [ebp+arg_0]
.text:00000186                 mov     [ebp+var_4], eax
.text:00000189                 mov     ecx, [ebp+arg_4]
.text:0000018C                 mov     [ebp+var_8], ecx
.text:0000018F                 mov     edx, [ebp+var_4]
.text:00000192                 mov     eax, [edx+8]
.text:00000195                 sub     eax, ds:_now
.text:0000019B                 mov     [ebp+var_C], eax
.text:0000019E                 mov     ecx, [ebp+var_8]
.text:000001A1                 mov     edx, [ecx+8]
.text:000001A4                 sub     edx, ds:_now
.text:000001AA                 mov     [ebp+var_10], edx
.text:000001AD                 mov     eax, [ebp+var_C]
.text:000001B0                 cmp     eax, [ebp+var_10]
.text:000001B3                 jge     short loc_1BC
.text:000001B5                 or      eax, 0FFFFFFFFh
.text:000001B8                 jmp     short loc_21D
.text:000001BA ; ---------------------------------------------------------------------------
.text:000001BA                 jmp     short loc_1CB
.text:000001BC ; ---------------------------------------------------------------------------
.text:000001BC
.text:000001BC loc_1BC:                                ; CODE XREF: _compare_timers+47j
.text:000001BC                 mov     ecx, [ebp+var_C]
.text:000001BF                 cmp     ecx, [ebp+var_10]
.text:000001C2                 jle     short loc_1CB
.text:000001C4                 mov     eax, 1
.text:000001C9                 jmp     short loc_21D
.text:000001CB ; ---------------------------------------------------------------------------
.text:000001CB
.text:000001CB loc_1CB:                                ; CODE XREF: _compare_timers+4Ej
.text:000001CB                                         ; _compare_timers+56j
.text:000001CB                 mov     edx, [ebp+var_4]
.text:000001CE                 mov     eax, [ebp+var_8]
.text:000001D1                 mov     ecx, [edx]
.text:000001D3                 cmp     ecx, [eax]
.text:000001D5                 jnb     short loc_1DE
.text:000001D7                 or      eax, 0FFFFFFFFh
.text:000001DA                 jmp     short loc_21D
.text:000001DC ; ---------------------------------------------------------------------------
.text:000001DC                 jmp     short loc_1F1
.text:000001DE ; ---------------------------------------------------------------------------
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: _compare_timers+69j
.text:000001DE                 mov     edx, [ebp+var_4]
.text:000001E1                 mov     eax, [ebp+var_8]
.text:000001E4                 mov     ecx, [edx]
.text:000001E6                 cmp     ecx, [eax]
.text:000001E8                 jbe     short loc_1F1
.text:000001EA                 mov     eax, 1
.text:000001EF                 jmp     short loc_21D
.text:000001F1 ; ---------------------------------------------------------------------------
.text:000001F1
.text:000001F1 loc_1F1:                                ; CODE XREF: _compare_timers+70j
.text:000001F1                                         ; _compare_timers+7Cj
.text:000001F1                 mov     edx, [ebp+var_4]
.text:000001F4                 mov     eax, [ebp+var_8]
.text:000001F7                 mov     ecx, [edx+4]
.text:000001FA                 cmp     ecx, [eax+4]
.text:000001FD                 jnb     short loc_206
.text:000001FF                 or      eax, 0FFFFFFFFh
.text:00000202                 jmp     short loc_21D
.text:00000204 ; ---------------------------------------------------------------------------
.text:00000204                 jmp     short loc_21B
.text:00000206 ; ---------------------------------------------------------------------------
.text:00000206
.text:00000206 loc_206:                                ; CODE XREF: _compare_timers+91j
.text:00000206                 mov     edx, [ebp+var_4]
.text:00000209                 mov     eax, [ebp+var_8]
.text:0000020C                 mov     ecx, [edx+4]
.text:0000020F                 cmp     ecx, [eax+4]
.text:00000212                 jbe     short loc_21B
.text:00000214                 mov     eax, 1
.text:00000219                 jmp     short loc_21D
.text:0000021B ; ---------------------------------------------------------------------------
.text:0000021B
.text:0000021B loc_21B:                                ; CODE XREF: _compare_timers+98j
.text:0000021B                                         ; _compare_timers+A6j
.text:0000021B                 xor     eax, eax
.text:0000021D
.text:0000021D loc_21D:                                ; CODE XREF: _compare_timers+4Cj
.text:0000021D                                         ; _compare_timers+5Dj ...
.text:0000021D                 mov     esp, ebp
.text:0000021F                 pop     ebp
.text:00000220                 retn
.text:00000220 _compare_timers endp
.text:00000220
.text:00000220 ; ---------------------------------------------------------------------------
.text:00000221                 db 0Bh dup(0CCh)
.text:0000022C
.text:0000022C ; =============== S U B R O U T I N E =======================================
.text:0000022C
.text:0000022C ; Attributes: bp-based frame
.text:0000022C
.text:0000022C _compare_timer_contexts proc near       ; DATA XREF: _init_timers+1Fo
.text:0000022C
.text:0000022C var_8           = dword ptr -8
.text:0000022C var_4           = dword ptr -4
.text:0000022C arg_0           = dword ptr  8
.text:0000022C arg_4           = dword ptr  0Ch
.text:0000022C
.text:0000022C                 push    ebp
.text:0000022D                 mov     ebp, esp
.text:0000022F                 sub     esp, 8
.text:00000232                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000239                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000240                 mov     eax, [ebp+arg_0]
.text:00000243                 mov     [ebp+var_4], eax
.text:00000246                 mov     ecx, [ebp+arg_4]
.text:00000249                 mov     [ebp+var_8], ecx
.text:0000024C                 mov     edx, [ebp+var_4]
.text:0000024F                 cmp     edx, [ebp+var_8]
.text:00000252                 jnb     short loc_25B
.text:00000254                 or      eax, 0FFFFFFFFh
.text:00000257                 jmp     short loc_26C
.text:00000259 ; ---------------------------------------------------------------------------
.text:00000259                 jmp     short loc_26A
.text:0000025B ; ---------------------------------------------------------------------------
.text:0000025B
.text:0000025B loc_25B:                                ; CODE XREF: _compare_timer_contexts+26j
.text:0000025B                 mov     eax, [ebp+var_4]
.text:0000025E                 cmp     eax, [ebp+var_8]
.text:00000261                 jbe     short loc_26A
.text:00000263                 mov     eax, 1
.text:00000268                 jmp     short loc_26C
.text:0000026A ; ---------------------------------------------------------------------------
.text:0000026A
.text:0000026A loc_26A:                                ; CODE XREF: _compare_timer_contexts+2Dj
.text:0000026A                                         ; _compare_timer_contexts+35j
.text:0000026A                 xor     eax, eax
.text:0000026C
.text:0000026C loc_26C:                                ; CODE XREF: _compare_timer_contexts+2Bj
.text:0000026C                                         ; _compare_timer_contexts+3Cj
.text:0000026C                 mov     esp, ebp
.text:0000026E                 pop     ebp
.text:0000026F                 retn
.text:0000026F _compare_timer_contexts endp
.text:0000026F
.text:0000026F ; ---------------------------------------------------------------------------
.text:00000270                 db 0Ch dup(0CCh)
.text:0000027C
.text:0000027C ; =============== S U B R O U T I N E =======================================
.text:0000027C
.text:0000027C ; Attributes: bp-based frame
.text:0000027C
.text:0000027C                 public _run_timers
.text:0000027C _run_timers     proc near
.text:0000027C
.text:0000027C var_4           = dword ptr -4
.text:0000027C arg_4           = dword ptr  0Ch
.text:0000027C
.text:0000027C                 push    ebp
.text:0000027D                 mov     ebp, esp
.text:0000027F                 push    ecx
.text:00000280                 push    esi
.text:00000281                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000288                 call    _init_timers
.text:0000028D                 mov     esi, esp
.text:0000028F                 call    dword ptr ds:__imp__GetTickCount@0
.text:00000295                 cmp     esi, esp
.text:00000297                 call    __RTC_CheckEsp
.text:0000029C                 mov     ds:_now, eax
.text:000002A1
.text:000002A1 loc_2A1:                                ; CODE XREF: _run_timers:loc_381j
.text:000002A1                 mov     eax, 1
.text:000002A6                 test    eax, eax
.text:000002A8                 jz      loc_386
.text:000002AE                 push    0
.text:000002B0                 mov     ecx, ds:_timers
.text:000002B6                 push    ecx
.text:000002B7                 call    _index234
.text:000002BC                 add     esp, 8
.text:000002BF                 mov     [ebp+var_4], eax
.text:000002C2                 cmp     [ebp+var_4], 0
.text:000002C6                 jnz     short loc_2CF
.text:000002C8                 xor     eax, eax
.text:000002CA                 jmp     loc_386
.text:000002CF ; ---------------------------------------------------------------------------
.text:000002CF
.text:000002CF loc_2CF:                                ; CODE XREF: _run_timers+4Aj
.text:000002CF                 push    0
.text:000002D1                 mov     edx, [ebp+var_4]
.text:000002D4                 mov     eax, [edx+4]
.text:000002D7                 push    eax
.text:000002D8                 mov     ecx, ds:_timer_contexts
.text:000002DE                 push    ecx
.text:000002DF                 call    _find234
.text:000002E4                 add     esp, 0Ch
.text:000002E7                 test    eax, eax
.text:000002E9                 jnz     short loc_30A
.text:000002EB                 push    0
.text:000002ED                 mov     edx, ds:_timers
.text:000002F3                 push    edx
.text:000002F4                 call    _delpos234
.text:000002F9                 add     esp, 8
.text:000002FC                 mov     eax, [ebp+var_4]
.text:000002FF                 push    eax
.text:00000300                 call    _safefree
.text:00000305                 add     esp, 4
.text:00000308                 jmp     short loc_381
.text:0000030A ; ---------------------------------------------------------------------------
.text:0000030A
.text:0000030A loc_30A:                                ; CODE XREF: _run_timers+6Dj
.text:0000030A                 mov     ecx, [ebp+var_4]
.text:0000030D                 mov     edx, [ecx+0Ch]
.text:00000310                 sub     edx, 0Ah
.text:00000313                 mov     eax, ds:_now
.text:00000318                 sub     eax, edx
.text:0000031A                 mov     ecx, [ebp+var_4]
.text:0000031D                 mov     edx, [ecx+0Ch]
.text:00000320                 sub     edx, 0Ah
.text:00000323                 mov     ecx, [ebp+var_4]
.text:00000326                 mov     ecx, [ecx+8]
.text:00000329                 sub     ecx, edx
.text:0000032B                 cmp     eax, ecx
.text:0000032D                 jbe     short loc_36F
.text:0000032F                 push    0
.text:00000331                 mov     edx, ds:_timers
.text:00000337                 push    edx
.text:00000338                 call    _delpos234
.text:0000033D                 add     esp, 8
.text:00000340                 mov     esi, esp
.text:00000342                 mov     eax, [ebp+var_4]
.text:00000345                 mov     ecx, [eax+8]
.text:00000348                 push    ecx
.text:00000349                 mov     edx, [ebp+var_4]
.text:0000034C                 mov     eax, [edx+4]
.text:0000034F                 push    eax
.text:00000350                 mov     ecx, [ebp+var_4]
.text:00000353                 mov     edx, [ecx]
.text:00000355                 call    edx
.text:00000357                 add     esp, 8
.text:0000035A                 cmp     esi, esp
.text:0000035C                 call    __RTC_CheckEsp
.text:00000361                 mov     eax, [ebp+var_4]
.text:00000364                 push    eax
.text:00000365                 call    _safefree
.text:0000036A                 add     esp, 4
.text:0000036D                 jmp     short loc_381
.text:0000036F ; ---------------------------------------------------------------------------
.text:0000036F
.text:0000036F loc_36F:                                ; CODE XREF: _run_timers+B1j
.text:0000036F                 mov     ecx, [ebp+arg_4]
.text:00000372                 mov     edx, [ebp+var_4]
.text:00000375                 mov     eax, [edx+8]
.text:00000378                 mov     [ecx], eax
.text:0000037A                 mov     eax, 1
.text:0000037F                 jmp     short loc_386
.text:00000381 ; ---------------------------------------------------------------------------
.text:00000381
.text:00000381 loc_381:                                ; CODE XREF: _run_timers+8Cj
.text:00000381                                         ; _run_timers+F1j
.text:00000381                 jmp     loc_2A1
.text:00000386 ; ---------------------------------------------------------------------------
.text:00000386
.text:00000386 loc_386:                                ; CODE XREF: _run_timers+2Cj
.text:00000386                                         ; _run_timers+4Ej ...
.text:00000386                 pop     esi
.text:00000387                 add     esp, 4
.text:0000038A                 cmp     ebp, esp
.text:0000038C                 call    __RTC_CheckEsp
.text:00000391                 mov     esp, ebp
.text:00000393                 pop     ebp
.text:00000394                 retn
.text:00000394 _run_timers     endp
.text:00000394
.text:00000394 ; ---------------------------------------------------------------------------
.text:00000395                 db 7 dup(0CCh)
.text:0000039C
.text:0000039C ; =============== S U B R O U T I N E =======================================
.text:0000039C
.text:0000039C ; Attributes: bp-based frame
.text:0000039C
.text:0000039C                 public _expire_timer_context
.text:0000039C _expire_timer_context proc near
.text:0000039C
.text:0000039C arg_0           = dword ptr  8
.text:0000039C
.text:0000039C                 push    ebp
.text:0000039D                 mov     ebp, esp
.text:0000039F                 call    _init_timers
.text:000003A4                 mov     eax, [ebp+arg_0]
.text:000003A7                 push    eax
.text:000003A8                 mov     ecx, ds:_timer_contexts
.text:000003AE                 push    ecx
.text:000003AF                 call    _del234
.text:000003B4                 add     esp, 8
.text:000003B7                 cmp     ebp, esp
.text:000003B9                 call    __RTC_CheckEsp
.text:000003BE                 pop     ebp
.text:000003BF                 retn
.text:000003BF _expire_timer_context endp
.text:000003BF
.text:000003BF _text           ends
.text:000003BF
.rtc$TMZ:000003C0 ; ===========================================================================
.rtc$TMZ:000003C0
.rtc$TMZ:000003C0 ; Segment type: Pure data
.rtc$TMZ:000003C0 ; Segment permissions: Read
.rtc$TMZ:000003C0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000003C0                 assume cs:_rtc$TMZ
.rtc$TMZ:000003C0                 ;org 3C0h
.rtc$TMZ:000003C0 ; COMDAT (pick any)
.rtc$TMZ:000003C0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000003C0 _rtc$TMZ        ends
.rtc$TMZ:000003C0
.rtc$IMZ:000003C4 ; ===========================================================================
.rtc$IMZ:000003C4
.rtc$IMZ:000003C4 ; Segment type: Pure data
.rtc$IMZ:000003C4 ; Segment permissions: Read
.rtc$IMZ:000003C4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000003C4                 assume cs:_rtc$IMZ
.rtc$IMZ:000003C4                 ;org 3C4h
.rtc$IMZ:000003C4 ; COMDAT (pick any)
.rtc$IMZ:000003C4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000003C4 _rtc$IMZ        ends
.rtc$IMZ:000003C4
UNDEF:000003D0 ; ===========================================================================
UNDEF:000003D0
UNDEF:000003D0 ; Segment type: Externs
UNDEF:000003D0 ; UNDEF
UNDEF:000003D0                 extrn _timer_change_notify:near
UNDEF:000003D0                                         ; CODE XREF: _schedule_timer+EBp
UNDEF:000003D4                 extrn _index234:near    ; CODE XREF: _schedule_timer+D1p
UNDEF:000003D4                                         ; _run_timers+3Bp
UNDEF:000003D8                 extrn _safefree:near    ; CODE XREF: _schedule_timer+A8p
UNDEF:000003D8                                         ; _run_timers+84p ...
UNDEF:000003DC                 extrn _add234:near      ; CODE XREF: _schedule_timer+97p
UNDEF:000003DC                                         ; _schedule_timer+C0p
UNDEF:000003E0                 extrn _safemalloc:near  ; CODE XREF: _schedule_timer+5Cp
UNDEF:000003E4 ; DWORD __stdcall _GetTickCount_0()
UNDEF:000003E4                 extrn __imp__GetTickCount@0:near
UNDEF:000003E4                                         ; CODE XREF: _schedule_timer+23p
UNDEF:000003E4                                         ; _init_timers+33p ...
UNDEF:000003E8                 extrn __RTC_CheckEsp:near ; CODE XREF: _schedule_timer+2Bp
UNDEF:000003E8                                         ; _schedule_timer+FCp ...
UNDEF:000003EC                 extrn __RTC_Shutdown:near
UNDEF:000003EC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000003F0                 extrn __RTC_InitBase:near
UNDEF:000003F0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000003F4                 extrn _newtree234:near  ; CODE XREF: _init_timers+12p
UNDEF:000003F4                                         ; _init_timers+24p
UNDEF:000003F8                 extrn _delpos234:near   ; CODE XREF: _run_timers+78p
UNDEF:000003F8                                         ; _run_timers+BCp
UNDEF:000003FC                 extrn _find234:near     ; CODE XREF: _run_timers+63p
UNDEF:00000400                 extrn _del234:near      ; CODE XREF: _expire_timer_context+13p
UNDEF:00000400
UNDEF:00000400
UNDEF:00000400                 end