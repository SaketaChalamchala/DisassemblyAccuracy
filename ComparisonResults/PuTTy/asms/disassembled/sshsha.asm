.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 9A1D28AE8245E660FE5451153650D317
.data:00000000 ; Input CRC32 : F1D3EA1C
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshsha.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG6027         db 'SHA-1',0            ; DATA XREF: .rdata:000000A4o
.data:00000006                 align 4
.data:00000008 $SG6188         db 'hmac-sha1',0        ; DATA XREF: .rdata:000000CCo
.data:00000012                 align 4
.data:00000014 $SG6189         db 'HMAC-SHA1',0        ; DATA XREF: .rdata:000000D4o
.data:0000001E                 align 10h
.data:00000020 $SG6190         db 'hmac-sha1-96',0     ; DATA XREF: .rdata:000000FCo
.data:0000002D                 align 10h
.data:00000030 $SG6191         db 'HMAC-SHA1-96',0     ; DATA XREF: .rdata:00000104o
.data:0000003D                 align 10h
.data:00000040 $SG6192         db 'hmac-sha1',0        ; DATA XREF: .rdata:0000012Co
.data:0000004A                 align 4
.data:0000004C $SG6193         db 'bug-compatible HMAC-SHA1',0 ; DATA XREF: .rdata:00000134o
.data:00000065                 align 4
.data:00000068 $SG6194         db 'hmac-sha1-96',0     ; DATA XREF: .rdata:0000015Co
.data:00000075                 align 4
.data:00000078 $SG6195         db 'bug-compatible HMAC-SHA1-96',0
.data:00000078                                         ; DATA XREF: .rdata:00000164o
.data:00000078 _data           ends
.data:00000078
.rdata:00000094 ; ===========================================================================
.rdata:00000094
.rdata:00000094 ; Segment type: Pure data
.rdata:00000094 ; Segment permissions: Read
.rdata:00000094 _rdata          segment dword public 'DATA' use32
.rdata:00000094                 assume cs:_rdata
.rdata:00000094                 ;org 94h
.rdata:00000094                 public _ssh_sha1
.rdata:00000094 _ssh_sha1       dd offset _sha1_init
.rdata:00000098                 dd offset _sha1_bytes
.rdata:0000009C                 dd offset _sha1_final
.rdata:000000A0                 db  14h
.rdata:000000A1                 db    0
.rdata:000000A2                 db    0
.rdata:000000A3                 db    0
.rdata:000000A4                 dd offset $SG6027       ; "SHA-1"
.rdata:000000A8                 public _ssh_hmac_sha1
.rdata:000000A8 _ssh_hmac_sha1  dd offset _sha1_make_context
.rdata:000000AC                 dd offset _sha1_free_context
.rdata:000000B0                 dd offset _sha1_key
.rdata:000000B4                 dd offset _sha1_generate
.rdata:000000B8                 dd offset _sha1_verify
.rdata:000000BC                 dd offset _hmacsha1_start
.rdata:000000C0                 dd offset _hmacsha1_bytes
.rdata:000000C4                 dd offset _hmacsha1_genresult
.rdata:000000C8                 dd offset _hmacsha1_verresult
.rdata:000000CC                 dd offset $SG6188       ; "hmac-sha1"
.rdata:000000D0                 db  14h
.rdata:000000D1                 db    0
.rdata:000000D2                 db    0
.rdata:000000D3                 db    0
.rdata:000000D4                 dd offset $SG6189       ; "HMAC-SHA1"
.rdata:000000D8                 public _ssh_hmac_sha1_96
.rdata:000000D8 _ssh_hmac_sha1_96 dd offset _sha1_make_context
.rdata:000000DC                 dd offset _sha1_free_context
.rdata:000000E0                 dd offset _sha1_key
.rdata:000000E4                 dd offset _sha1_96_generate
.rdata:000000E8                 dd offset _sha1_96_verify
.rdata:000000EC                 dd offset _hmacsha1_start
.rdata:000000F0                 dd offset _hmacsha1_bytes
.rdata:000000F4                 dd offset _hmacsha1_96_genresult
.rdata:000000F8                 dd offset _hmacsha1_96_verresult
.rdata:000000FC                 dd offset $SG6190       ; "hmac-sha1-96"
.rdata:00000100                 db  0Ch
.rdata:00000101                 db    0
.rdata:00000102                 db    0
.rdata:00000103                 db    0
.rdata:00000104                 dd offset $SG6191       ; "HMAC-SHA1-96"
.rdata:00000108                 public _ssh_hmac_sha1_buggy
.rdata:00000108 _ssh_hmac_sha1_buggy dd offset _sha1_make_context
.rdata:0000010C                 dd offset _sha1_free_context
.rdata:00000110                 dd offset _sha1_key_buggy
.rdata:00000114                 dd offset _sha1_generate
.rdata:00000118                 dd offset _sha1_verify
.rdata:0000011C                 dd offset _hmacsha1_start
.rdata:00000120                 dd offset _hmacsha1_bytes
.rdata:00000124                 dd offset _hmacsha1_genresult
.rdata:00000128                 dd offset _hmacsha1_verresult
.rdata:0000012C                 dd offset $SG6192       ; "hmac-sha1"
.rdata:00000130                 db  14h
.rdata:00000131                 db    0
.rdata:00000132                 db    0
.rdata:00000133                 db    0
.rdata:00000134                 dd offset $SG6193       ; "bug-compatible HMAC-SHA1"
.rdata:00000138                 public _ssh_hmac_sha1_96_buggy
.rdata:00000138 _ssh_hmac_sha1_96_buggy dd offset _sha1_make_context
.rdata:0000013C                 dd offset _sha1_free_context
.rdata:00000140                 dd offset _sha1_key_buggy
.rdata:00000144                 dd offset _sha1_96_generate
.rdata:00000148                 dd offset _sha1_96_verify
.rdata:0000014C                 dd offset _hmacsha1_start
.rdata:00000150                 dd offset _hmacsha1_bytes
.rdata:00000154                 dd offset _hmacsha1_96_genresult
.rdata:00000158                 dd offset _hmacsha1_96_verresult
.rdata:0000015C                 dd offset $SG6194       ; "hmac-sha1-96"
.rdata:00000160                 db  0Ch
.rdata:00000161                 db    0
.rdata:00000162                 db    0
.rdata:00000163                 db    0
.rdata:00000164                 dd offset $SG6195       ; "bug-compatible HMAC-SHA1-96"
.rdata:00000164 _rdata          ends
.rdata:00000164
.text:00000168 ; ===========================================================================
.text:00000168
.text:00000168 ; Segment type: Pure code
.text:00000168 ; Segment permissions: Read/Execute
.text:00000168 _text           segment para public 'CODE' use32
.text:00000168                 assume cs:_text
.text:00000168                 ;org 168h
.text:00000168                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000168
.text:00000168 ; =============== S U B R O U T I N E =======================================
.text:00000168
.text:00000168 ; Attributes: bp-based frame
.text:00000168
.text:00000168                 public _SHATransform
.text:00000168 _SHATransform   proc near               ; CODE XREF: _SHA_Bytes+15Dp
.text:00000168
.text:00000168 var_188         = dword ptr -188h
.text:00000168 var_180         = dword ptr -180h
.text:00000168 var_178         = dword ptr -178h
.text:00000168 var_174         = dword ptr -174h
.text:00000168 var_170         = dword ptr -170h
.text:00000168 var_16C         = dword ptr -16Ch
.text:00000168 var_168         = dword ptr -168h
.text:00000168 var_164         = dword ptr -164h
.text:00000168 var_160         = dword ptr -160h
.text:00000168 var_15C         = dword ptr -15Ch
.text:00000168 var_158         = dword ptr -158h
.text:00000168 var_154         = dword ptr -154h
.text:00000168 var_150         = dword ptr -150h
.text:00000168 var_148         = dword ptr -148h
.text:00000168 var_4           = dword ptr -4
.text:00000168 arg_0           = dword ptr  8
.text:00000168 arg_4           = dword ptr  0Ch
.text:00000168
.text:00000168                 push    ebp
.text:00000169                 mov     ebp, esp
.text:0000016B                 sub     esp, 178h
.text:00000171                 push    edi
.text:00000172                 lea     edi, [ebp+var_178]
.text:00000178                 mov     ecx, 5Eh ; '^'
.text:0000017D                 mov     eax, 0CCCCCCCCh
.text:00000182                 rep stosd
.text:00000184                 mov     eax, dword ptr ds:___security_cookie
.text:00000189                 xor     eax, ebp
.text:0000018B                 mov     [ebp+var_4], eax
.text:0000018E                 mov     [ebp+var_164], 0
.text:00000198                 jmp     short loc_1A9
.text:0000019A ; ---------------------------------------------------------------------------
.text:0000019A
.text:0000019A loc_19A:                                ; CODE XREF: _SHATransform+63j
.text:0000019A                 mov     eax, [ebp+var_164]
.text:000001A0                 add     eax, 1
.text:000001A3                 mov     [ebp+var_164], eax
.text:000001A9
.text:000001A9 loc_1A9:                                ; CODE XREF: _SHATransform+30j
.text:000001A9                 cmp     [ebp+var_164], 10h
.text:000001B0                 jge     short loc_1CD
.text:000001B2                 mov     ecx, [ebp+var_164]
.text:000001B8                 mov     edx, [ebp+var_164]
.text:000001BE                 mov     eax, [ebp+arg_4]
.text:000001C1                 mov     edx, [eax+edx*4]
.text:000001C4                 mov     [ebp+ecx*4+var_148], edx
.text:000001CB                 jmp     short loc_19A
.text:000001CD ; ---------------------------------------------------------------------------
.text:000001CD
.text:000001CD loc_1CD:                                ; CODE XREF: _SHATransform+48j
.text:000001CD                 mov     [ebp+var_164], 10h
.text:000001D7                 jmp     short loc_1E8
.text:000001D9 ; ---------------------------------------------------------------------------
.text:000001D9
.text:000001D9 loc_1D9:                                ; CODE XREF: _SHATransform+E3j
.text:000001D9                 mov     eax, [ebp+var_164]
.text:000001DF                 add     eax, 1
.text:000001E2                 mov     [ebp+var_164], eax
.text:000001E8
.text:000001E8 loc_1E8:                                ; CODE XREF: _SHATransform+6Fj
.text:000001E8                 cmp     [ebp+var_164], 50h ; 'P'
.text:000001EF                 jge     short loc_24D
.text:000001F1                 mov     ecx, [ebp+var_164]
.text:000001F7                 mov     edx, [ebp+var_164]
.text:000001FD                 mov     eax, [ebp+ecx*4+var_154]
.text:00000204                 xor     eax, [ebp+edx*4+var_168]
.text:0000020B                 mov     ecx, [ebp+var_164]
.text:00000211                 xor     eax, [ebp+ecx*4+var_180]
.text:00000218                 mov     edx, [ebp+var_164]
.text:0000021E                 xor     eax, [ebp+edx*4+var_188]
.text:00000225                 mov     [ebp+var_168], eax
.text:0000022B                 mov     eax, [ebp+var_168]
.text:00000231                 shl     eax, 1
.text:00000233                 mov     ecx, [ebp+var_168]
.text:00000239                 shr     ecx, 1Fh
.text:0000023C                 or      eax, ecx
.text:0000023E                 mov     edx, [ebp+var_164]
.text:00000244                 mov     [ebp+edx*4+var_148], eax
.text:0000024B                 jmp     short loc_1D9
.text:0000024D ; ---------------------------------------------------------------------------
.text:0000024D
.text:0000024D loc_24D:                                ; CODE XREF: _SHATransform+87j
.text:0000024D                 mov     eax, [ebp+arg_0]
.text:00000250                 mov     ecx, [eax]
.text:00000252                 mov     [ebp+var_150], ecx
.text:00000258                 mov     edx, [ebp+arg_0]
.text:0000025B                 mov     eax, [edx+4]
.text:0000025E                 mov     [ebp+var_154], eax
.text:00000264                 mov     ecx, [ebp+arg_0]
.text:00000267                 mov     edx, [ecx+8]
.text:0000026A                 mov     [ebp+var_158], edx
.text:00000270                 mov     eax, [ebp+arg_0]
.text:00000273                 mov     ecx, [eax+0Ch]
.text:00000276                 mov     [ebp+var_15C], ecx
.text:0000027C                 mov     edx, [ebp+arg_0]
.text:0000027F                 mov     eax, [edx+10h]
.text:00000282                 mov     [ebp+var_160], eax
.text:00000288                 mov     [ebp+var_164], 0
.text:00000292                 jmp     short loc_2A3
.text:00000294 ; ---------------------------------------------------------------------------
.text:00000294
.text:00000294 loc_294:                                ; CODE XREF: _SHATransform+1E4j
.text:00000294                 mov     ecx, [ebp+var_164]
.text:0000029A                 add     ecx, 1
.text:0000029D                 mov     [ebp+var_164], ecx
.text:000002A3
.text:000002A3 loc_2A3:                                ; CODE XREF: _SHATransform+12Aj
.text:000002A3                 cmp     [ebp+var_164], 14h
.text:000002AA                 jge     loc_351
.text:000002B0                 mov     edx, [ebp+var_150]
.text:000002B6                 shl     edx, 5
.text:000002B9                 mov     eax, [ebp+var_150]
.text:000002BF                 shr     eax, 1Bh
.text:000002C2                 or      edx, eax
.text:000002C4                 mov     ecx, [ebp+var_154]
.text:000002CA                 and     ecx, [ebp+var_158]
.text:000002D0                 mov     eax, [ebp+var_154]
.text:000002D6                 not     eax
.text:000002D8                 and     eax, [ebp+var_15C]
.text:000002DE                 or      ecx, eax
.text:000002E0                 add     edx, [ebp+var_160]
.text:000002E6                 add     ecx, edx
.text:000002E8                 mov     edx, [ebp+var_164]
.text:000002EE                 mov     eax, [ebp+edx*4+var_148]
.text:000002F5                 lea     ecx, [ecx+eax+5A827999h]
.text:000002FC                 mov     [ebp+var_16C], ecx
.text:00000302                 mov     edx, [ebp+var_15C]
.text:00000308                 mov     [ebp+var_160], edx
.text:0000030E                 mov     eax, [ebp+var_158]
.text:00000314                 mov     [ebp+var_15C], eax
.text:0000031A                 mov     ecx, [ebp+var_154]
.text:00000320                 shl     ecx, 1Eh
.text:00000323                 mov     edx, [ebp+var_154]
.text:00000329                 shr     edx, 2
.text:0000032C                 or      ecx, edx
.text:0000032E                 mov     [ebp+var_158], ecx
.text:00000334                 mov     eax, [ebp+var_150]
.text:0000033A                 mov     [ebp+var_154], eax
.text:00000340                 mov     ecx, [ebp+var_16C]
.text:00000346                 mov     [ebp+var_150], ecx
.text:0000034C                 jmp     loc_294
.text:00000351 ; ---------------------------------------------------------------------------
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: _SHATransform+142j
.text:00000351                 mov     [ebp+var_164], 14h
.text:0000035B                 jmp     short loc_36C
.text:0000035D ; ---------------------------------------------------------------------------
.text:0000035D
.text:0000035D loc_35D:                                ; CODE XREF: _SHATransform+2A3j
.text:0000035D                 mov     edx, [ebp+var_164]
.text:00000363                 add     edx, 1
.text:00000366                 mov     [ebp+var_164], edx
.text:0000036C
.text:0000036C loc_36C:                                ; CODE XREF: _SHATransform+1F3j
.text:0000036C                 cmp     [ebp+var_164], 28h ; '('
.text:00000373                 jge     loc_410
.text:00000379                 mov     eax, [ebp+var_150]
.text:0000037F                 shl     eax, 5
.text:00000382                 mov     ecx, [ebp+var_150]
.text:00000388                 shr     ecx, 1Bh
.text:0000038B                 or      eax, ecx
.text:0000038D                 mov     edx, [ebp+var_154]
.text:00000393                 xor     edx, [ebp+var_158]
.text:00000399                 xor     edx, [ebp+var_15C]
.text:0000039F                 add     eax, [ebp+var_160]
.text:000003A5                 add     edx, eax
.text:000003A7                 mov     eax, [ebp+var_164]
.text:000003AD                 mov     ecx, [ebp+eax*4+var_148]
.text:000003B4                 lea     edx, [edx+ecx+6ED9EBA1h]
.text:000003BB                 mov     [ebp+var_170], edx
.text:000003C1                 mov     eax, [ebp+var_15C]
.text:000003C7                 mov     [ebp+var_160], eax
.text:000003CD                 mov     ecx, [ebp+var_158]
.text:000003D3                 mov     [ebp+var_15C], ecx
.text:000003D9                 mov     edx, [ebp+var_154]
.text:000003DF                 shl     edx, 1Eh
.text:000003E2                 mov     eax, [ebp+var_154]
.text:000003E8                 shr     eax, 2
.text:000003EB                 or      edx, eax
.text:000003ED                 mov     [ebp+var_158], edx
.text:000003F3                 mov     ecx, [ebp+var_150]
.text:000003F9                 mov     [ebp+var_154], ecx
.text:000003FF                 mov     edx, [ebp+var_170]
.text:00000405                 mov     [ebp+var_150], edx
.text:0000040B                 jmp     loc_35D
.text:00000410 ; ---------------------------------------------------------------------------
.text:00000410
.text:00000410 loc_410:                                ; CODE XREF: _SHATransform+20Bj
.text:00000410                 mov     [ebp+var_164], 28h ; '('
.text:0000041A                 jmp     short loc_42B
.text:0000041C ; ---------------------------------------------------------------------------
.text:0000041C
.text:0000041C loc_41C:                                ; CODE XREF: _SHATransform+378j
.text:0000041C                 mov     eax, [ebp+var_164]
.text:00000422                 add     eax, 1
.text:00000425                 mov     [ebp+var_164], eax
.text:0000042B
.text:0000042B loc_42B:                                ; CODE XREF: _SHATransform+2B2j
.text:0000042B                 cmp     [ebp+var_164], 3Ch ; '<'
.text:00000432                 jge     loc_4E5
.text:00000438                 mov     ecx, [ebp+var_150]
.text:0000043E                 shl     ecx, 5
.text:00000441                 mov     edx, [ebp+var_150]
.text:00000447                 shr     edx, 1Bh
.text:0000044A                 or      ecx, edx
.text:0000044C                 mov     eax, [ebp+var_154]
.text:00000452                 and     eax, [ebp+var_158]
.text:00000458                 mov     edx, [ebp+var_154]
.text:0000045E                 and     edx, [ebp+var_15C]
.text:00000464                 or      eax, edx
.text:00000466                 mov     edx, [ebp+var_158]
.text:0000046C                 and     edx, [ebp+var_15C]
.text:00000472                 or      eax, edx
.text:00000474                 add     ecx, [ebp+var_160]
.text:0000047A                 add     eax, ecx
.text:0000047C                 mov     ecx, [ebp+var_164]
.text:00000482                 mov     edx, [ebp+ecx*4+var_148]
.text:00000489                 lea     eax, [eax+edx-70E44324h]
.text:00000490                 mov     [ebp+var_174], eax
.text:00000496                 mov     ecx, [ebp+var_15C]
.text:0000049C                 mov     [ebp+var_160], ecx
.text:000004A2                 mov     edx, [ebp+var_158]
.text:000004A8                 mov     [ebp+var_15C], edx
.text:000004AE                 mov     eax, [ebp+var_154]
.text:000004B4                 shl     eax, 1Eh
.text:000004B7                 mov     ecx, [ebp+var_154]
.text:000004BD                 shr     ecx, 2
.text:000004C0                 or      eax, ecx
.text:000004C2                 mov     [ebp+var_158], eax
.text:000004C8                 mov     edx, [ebp+var_150]
.text:000004CE                 mov     [ebp+var_154], edx
.text:000004D4                 mov     eax, [ebp+var_174]
.text:000004DA                 mov     [ebp+var_150], eax
.text:000004E0                 jmp     loc_41C
.text:000004E5 ; ---------------------------------------------------------------------------
.text:000004E5
.text:000004E5 loc_4E5:                                ; CODE XREF: _SHATransform+2CAj
.text:000004E5                 mov     [ebp+var_164], 3Ch ; '<'
.text:000004EF                 jmp     short loc_500
.text:000004F1 ; ---------------------------------------------------------------------------
.text:000004F1
.text:000004F1 loc_4F1:                                ; CODE XREF: _SHATransform+437j
.text:000004F1                 mov     ecx, [ebp+var_164]
.text:000004F7                 add     ecx, 1
.text:000004FA                 mov     [ebp+var_164], ecx
.text:00000500
.text:00000500 loc_500:                                ; CODE XREF: _SHATransform+387j
.text:00000500                 cmp     [ebp+var_164], 50h ; 'P'
.text:00000507                 jge     loc_5A4
.text:0000050D                 mov     edx, [ebp+var_150]
.text:00000513                 shl     edx, 5
.text:00000516                 mov     eax, [ebp+var_150]
.text:0000051C                 shr     eax, 1Bh
.text:0000051F                 or      edx, eax
.text:00000521                 mov     ecx, [ebp+var_154]
.text:00000527                 xor     ecx, [ebp+var_158]
.text:0000052D                 xor     ecx, [ebp+var_15C]
.text:00000533                 add     edx, [ebp+var_160]
.text:00000539                 add     ecx, edx
.text:0000053B                 mov     edx, [ebp+var_164]
.text:00000541                 mov     eax, [ebp+edx*4+var_148]
.text:00000548                 lea     ecx, [ecx+eax-359D3E2Ah]
.text:0000054F                 mov     [ebp+var_178], ecx
.text:00000555                 mov     edx, [ebp+var_15C]
.text:0000055B                 mov     [ebp+var_160], edx
.text:00000561                 mov     eax, [ebp+var_158]
.text:00000567                 mov     [ebp+var_15C], eax
.text:0000056D                 mov     ecx, [ebp+var_154]
.text:00000573                 shl     ecx, 1Eh
.text:00000576                 mov     edx, [ebp+var_154]
.text:0000057C                 shr     edx, 2
.text:0000057F                 or      ecx, edx
.text:00000581                 mov     [ebp+var_158], ecx
.text:00000587                 mov     eax, [ebp+var_150]
.text:0000058D                 mov     [ebp+var_154], eax
.text:00000593                 mov     ecx, [ebp+var_178]
.text:00000599                 mov     [ebp+var_150], ecx
.text:0000059F                 jmp     loc_4F1
.text:000005A4 ; ---------------------------------------------------------------------------
.text:000005A4
.text:000005A4 loc_5A4:                                ; CODE XREF: _SHATransform+39Fj
.text:000005A4                 mov     edx, [ebp+arg_0]
.text:000005A7                 mov     eax, [edx]
.text:000005A9                 add     eax, [ebp+var_150]
.text:000005AF                 mov     ecx, [ebp+arg_0]
.text:000005B2                 mov     [ecx], eax
.text:000005B4                 mov     edx, [ebp+arg_0]
.text:000005B7                 mov     eax, [edx+4]
.text:000005BA                 add     eax, [ebp+var_154]
.text:000005C0                 mov     ecx, [ebp+arg_0]
.text:000005C3                 mov     [ecx+4], eax
.text:000005C6                 mov     edx, [ebp+arg_0]
.text:000005C9                 mov     eax, [edx+8]
.text:000005CC                 add     eax, [ebp+var_158]
.text:000005D2                 mov     ecx, [ebp+arg_0]
.text:000005D5                 mov     [ecx+8], eax
.text:000005D8                 mov     edx, [ebp+arg_0]
.text:000005DB                 mov     eax, [edx+0Ch]
.text:000005DE                 add     eax, [ebp+var_15C]
.text:000005E4                 mov     ecx, [ebp+arg_0]
.text:000005E7                 mov     [ecx+0Ch], eax
.text:000005EA                 mov     edx, [ebp+arg_0]
.text:000005ED                 mov     eax, [edx+10h]
.text:000005F0                 add     eax, [ebp+var_160]
.text:000005F6                 mov     ecx, [ebp+arg_0]
.text:000005F9                 mov     [ecx+10h], eax
.text:000005FC                 push    edx
.text:000005FD                 mov     ecx, ebp
.text:000005FF                 push    eax
.text:00000600                 lea     edx, $LN23
.text:00000606                 call    @_RTC_CheckStackVars@8
.text:0000060B                 pop     eax
.text:0000060C                 pop     edx
.text:0000060D                 pop     edi
.text:0000060E                 mov     ecx, [ebp+var_4]
.text:00000611                 xor     ecx, ebp
.text:00000613                 call    @__security_check_cookie@4
.text:00000618                 mov     esp, ebp
.text:0000061A                 pop     ebp
.text:0000061B                 retn
.text:0000061B _SHATransform   endp
.text:0000061B
.text:0000061B ; ---------------------------------------------------------------------------
.text:0000061C $LN23           dd 1                    ; DATA XREF: _SHATransform+498o
.text:00000620                 dd offset $LN22
.text:00000624 $LN22           dd 0FFFFFEB8h, 140h     ; DATA XREF: .text:00000620o
.text:0000062C                 dd offset $LN21
.text:00000630 $LN21           dd 0CCCC0077h, 0CCCCCCCCh ; DATA XREF: .text:0000062Co
.text:00000638
.text:00000638 ; =============== S U B R O U T I N E =======================================
.text:00000638
.text:00000638 ; Attributes: bp-based frame
.text:00000638
.text:00000638                 public _SHA_Init
.text:00000638 _SHA_Init       proc near               ; CODE XREF: _SHA_Simple+24p
.text:00000638                                         ; _sha1_init+1Ep ...
.text:00000638
.text:00000638 arg_0           = dword ptr  8
.text:00000638
.text:00000638                 push    ebp
.text:00000639                 mov     ebp, esp
.text:0000063B                 mov     eax, [ebp+arg_0]
.text:0000063E                 push    eax
.text:0000063F                 call    _SHA_Core_Init
.text:00000644                 add     esp, 4
.text:00000647                 mov     ecx, [ebp+arg_0]
.text:0000064A                 mov     dword ptr [ecx+54h], 0
.text:00000651                 mov     edx, [ebp+arg_0]
.text:00000654                 mov     dword ptr [edx+5Ch], 0
.text:0000065B                 mov     eax, [ebp+arg_0]
.text:0000065E                 mov     dword ptr [eax+58h], 0
.text:00000665                 cmp     ebp, esp
.text:00000667                 call    __RTC_CheckEsp
.text:0000066C                 pop     ebp
.text:0000066D                 retn
.text:0000066D _SHA_Init       endp
.text:0000066D
.text:0000066D ; ---------------------------------------------------------------------------
.text:0000066E                 db 0Ah dup(0CCh)
.text:00000678
.text:00000678 ; =============== S U B R O U T I N E =======================================
.text:00000678
.text:00000678 ; Attributes: bp-based frame
.text:00000678
.text:00000678 _SHA_Core_Init  proc near               ; CODE XREF: _SHA_Init+7p
.text:00000678
.text:00000678 arg_0           = dword ptr  8
.text:00000678
.text:00000678                 push    ebp
.text:00000679                 mov     ebp, esp
.text:0000067B                 mov     eax, [ebp+arg_0]
.text:0000067E                 mov     dword ptr [eax], 67452301h
.text:00000684                 mov     ecx, [ebp+arg_0]
.text:00000687                 mov     dword ptr [ecx+4], 0EFCDAB89h
.text:0000068E                 mov     edx, [ebp+arg_0]
.text:00000691                 mov     dword ptr [edx+8], 98BADCFEh
.text:00000698                 mov     eax, [ebp+arg_0]
.text:0000069B                 mov     dword ptr [eax+0Ch], 10325476h
.text:000006A2                 mov     ecx, [ebp+arg_0]
.text:000006A5                 mov     dword ptr [ecx+10h], 0C3D2E1F0h
.text:000006AC                 pop     ebp
.text:000006AD                 retn
.text:000006AD _SHA_Core_Init  endp
.text:000006AD
.text:000006AD ; ---------------------------------------------------------------------------
.text:000006AE                 db 0Ah dup(0CCh)
.text:000006B8
.text:000006B8 ; =============== S U B R O U T I N E =======================================
.text:000006B8
.text:000006B8 ; Attributes: bp-based frame
.text:000006B8
.text:000006B8 ; int __cdecl SHA_Bytes(int, int, size_t)
.text:000006B8                 public _SHA_Bytes
.text:000006B8 _SHA_Bytes      proc near               ; CODE XREF: _SHA_Final+8Cp
.text:000006B8                                         ; _SHA_Final+10Ep ...
.text:000006B8
.text:000006B8 var_58          = dword ptr -58h
.text:000006B8 var_54          = dword ptr -54h
.text:000006B8 var_4C          = dword ptr -4Ch
.text:000006B8 var_8           = dword ptr -8
.text:000006B8 var_4           = dword ptr -4
.text:000006B8 arg_0           = dword ptr  8
.text:000006B8 arg_4           = dword ptr  0Ch
.text:000006B8 arg_8           = dword ptr  10h
.text:000006B8
.text:000006B8                 push    ebp
.text:000006B9                 mov     ebp, esp
.text:000006BB                 sub     esp, 58h
.text:000006BE                 push    edi
.text:000006BF                 lea     edi, [ebp+var_58]
.text:000006C2                 mov     ecx, 16h
.text:000006C7                 mov     eax, 0CCCCCCCCh
.text:000006CC                 rep stosd
.text:000006CE                 mov     eax, dword ptr ds:___security_cookie
.text:000006D3                 xor     eax, ebp
.text:000006D5                 mov     [ebp+var_4], eax
.text:000006D8                 mov     eax, [ebp+arg_4]
.text:000006DB                 mov     [ebp+var_8], eax
.text:000006DE                 mov     ecx, [ebp+arg_8]
.text:000006E1                 mov     [ebp+var_54], ecx
.text:000006E4                 mov     edx, [ebp+arg_0]
.text:000006E7                 mov     eax, [edx+5Ch]
.text:000006EA                 add     eax, [ebp+var_54]
.text:000006ED                 mov     ecx, [ebp+arg_0]
.text:000006F0                 mov     [ecx+5Ch], eax
.text:000006F3                 mov     edx, [ebp+arg_0]
.text:000006F6                 mov     eax, [edx+5Ch]
.text:000006F9                 cmp     eax, [ebp+var_54]
.text:000006FC                 sbb     ecx, ecx
.text:000006FE                 neg     ecx
.text:00000700                 mov     edx, [ebp+arg_0]
.text:00000703                 add     ecx, [edx+58h]
.text:00000706                 mov     eax, [ebp+arg_0]
.text:00000709                 mov     [eax+58h], ecx
.text:0000070C                 mov     ecx, [ebp+arg_0]
.text:0000070F                 cmp     dword ptr [ecx+54h], 0
.text:00000713                 jz      short loc_755
.text:00000715                 mov     edx, [ebp+arg_0]
.text:00000718                 mov     eax, [edx+54h]
.text:0000071B                 add     eax, [ebp+arg_8]
.text:0000071E                 cmp     eax, 40h ; '@'
.text:00000721                 jge     short loc_755
.text:00000723                 mov     ecx, [ebp+arg_8]
.text:00000726                 push    ecx             ; size_t
.text:00000727                 mov     edx, [ebp+var_8]
.text:0000072A                 push    edx             ; void *
.text:0000072B                 mov     eax, [ebp+arg_0]
.text:0000072E                 mov     ecx, [eax+54h]
.text:00000731                 mov     edx, [ebp+arg_0]
.text:00000734                 lea     eax, [edx+ecx+14h]
.text:00000738                 push    eax             ; void *
.text:00000739                 call    _memcpy
.text:0000073E                 add     esp, 0Ch
.text:00000741                 mov     ecx, [ebp+arg_0]
.text:00000744                 mov     edx, [ecx+54h]
.text:00000747                 add     edx, [ebp+arg_8]
.text:0000074A                 mov     eax, [ebp+arg_0]
.text:0000074D                 mov     [eax+54h], edx
.text:00000750                 jmp     loc_84C
.text:00000755 ; ---------------------------------------------------------------------------
.text:00000755
.text:00000755 loc_755:                                ; CODE XREF: _SHA_Bytes+5Bj
.text:00000755                                         ; _SHA_Bytes+69j ...
.text:00000755                 mov     ecx, [ebp+arg_0]
.text:00000758                 mov     edx, [ecx+54h]
.text:0000075B                 add     edx, [ebp+arg_8]
.text:0000075E                 cmp     edx, 40h ; '@'
.text:00000761                 jl      loc_82C
.text:00000767                 mov     eax, [ebp+arg_0]
.text:0000076A                 mov     ecx, 40h ; '@'
.text:0000076F                 sub     ecx, [eax+54h]
.text:00000772                 push    ecx             ; size_t
.text:00000773                 mov     edx, [ebp+var_8]
.text:00000776                 push    edx             ; void *
.text:00000777                 mov     eax, [ebp+arg_0]
.text:0000077A                 mov     ecx, [eax+54h]
.text:0000077D                 mov     edx, [ebp+arg_0]
.text:00000780                 lea     eax, [edx+ecx+14h]
.text:00000784                 push    eax             ; void *
.text:00000785                 call    _memcpy
.text:0000078A                 add     esp, 0Ch
.text:0000078D                 mov     ecx, [ebp+arg_0]
.text:00000790                 mov     edx, 40h ; '@'
.text:00000795                 sub     edx, [ecx+54h]
.text:00000798                 add     edx, [ebp+var_8]
.text:0000079B                 mov     [ebp+var_8], edx
.text:0000079E                 mov     eax, [ebp+arg_0]
.text:000007A1                 mov     ecx, 40h ; '@'
.text:000007A6                 sub     ecx, [eax+54h]
.text:000007A9                 mov     edx, [ebp+arg_8]
.text:000007AC                 sub     edx, ecx
.text:000007AE                 mov     [ebp+arg_8], edx
.text:000007B1                 mov     [ebp+var_58], 0
.text:000007B8                 jmp     short loc_7C3
.text:000007BA ; ---------------------------------------------------------------------------
.text:000007BA
.text:000007BA loc_7BA:                                ; CODE XREF: _SHA_Bytes+153j
.text:000007BA                 mov     eax, [ebp+var_58]
.text:000007BD                 add     eax, 1
.text:000007C0                 mov     [ebp+var_58], eax
.text:000007C3
.text:000007C3 loc_7C3:                                ; CODE XREF: _SHA_Bytes+100j
.text:000007C3                 cmp     [ebp+var_58], 10h
.text:000007C7                 jge     short loc_80D
.text:000007C9                 mov     ecx, [ebp+var_58]
.text:000007CC                 mov     edx, [ebp+arg_0]
.text:000007CF                 movzx   eax, byte ptr [edx+ecx*4+14h]
.text:000007D4                 shl     eax, 18h
.text:000007D7                 mov     ecx, [ebp+var_58]
.text:000007DA                 mov     edx, [ebp+arg_0]
.text:000007DD                 movzx   ecx, byte ptr [edx+ecx*4+15h]
.text:000007E2                 shl     ecx, 10h
.text:000007E5                 or      eax, ecx
.text:000007E7                 mov     edx, [ebp+var_58]
.text:000007EA                 mov     ecx, [ebp+arg_0]
.text:000007ED                 movzx   edx, byte ptr [ecx+edx*4+16h]
.text:000007F2                 shl     edx, 8
.text:000007F5                 or      eax, edx
.text:000007F7                 mov     ecx, [ebp+var_58]
.text:000007FA                 mov     edx, [ebp+arg_0]
.text:000007FD                 movzx   ecx, byte ptr [edx+ecx*4+17h]
.text:00000802                 or      eax, ecx
.text:00000804                 mov     edx, [ebp+var_58]
.text:00000807                 mov     [ebp+edx*4+var_4C], eax
.text:0000080B                 jmp     short loc_7BA
.text:0000080D ; ---------------------------------------------------------------------------
.text:0000080D
.text:0000080D loc_80D:                                ; CODE XREF: _SHA_Bytes+10Fj
.text:0000080D                 lea     eax, [ebp+var_4C]
.text:00000810                 push    eax
.text:00000811                 mov     ecx, [ebp+arg_0]
.text:00000814                 push    ecx
.text:00000815                 call    _SHATransform
.text:0000081A                 add     esp, 8
.text:0000081D                 mov     edx, [ebp+arg_0]
.text:00000820                 mov     dword ptr [edx+54h], 0
.text:00000827                 jmp     loc_755
.text:0000082C ; ---------------------------------------------------------------------------
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: _SHA_Bytes+A9j
.text:0000082C                 mov     eax, [ebp+arg_8]
.text:0000082F                 push    eax             ; size_t
.text:00000830                 mov     ecx, [ebp+var_8]
.text:00000833                 push    ecx             ; void *
.text:00000834                 mov     edx, [ebp+arg_0]
.text:00000837                 add     edx, 14h
.text:0000083A                 push    edx             ; void *
.text:0000083B                 call    _memcpy
.text:00000840                 add     esp, 0Ch
.text:00000843                 mov     eax, [ebp+arg_0]
.text:00000846                 mov     ecx, [ebp+arg_8]
.text:00000849                 mov     [eax+54h], ecx
.text:0000084C
.text:0000084C loc_84C:                                ; CODE XREF: _SHA_Bytes+98j
.text:0000084C                 push    edx
.text:0000084D                 mov     ecx, ebp
.text:0000084F                 push    eax
.text:00000850                 lea     edx, $LN12
.text:00000856                 call    @_RTC_CheckStackVars@8
.text:0000085B                 pop     eax
.text:0000085C                 pop     edx
.text:0000085D                 pop     edi
.text:0000085E                 mov     ecx, [ebp+var_4]
.text:00000861                 xor     ecx, ebp
.text:00000863                 call    @__security_check_cookie@4
.text:00000868                 add     esp, 58h
.text:0000086B                 cmp     ebp, esp
.text:0000086D                 call    __RTC_CheckEsp
.text:00000872                 mov     esp, ebp
.text:00000874                 pop     ebp
.text:00000875                 retn
.text:00000875 _SHA_Bytes      endp
.text:00000875
.text:00000875 ; ---------------------------------------------------------------------------
.text:00000876                 align 4
.text:00000878 $LN12           dd 1                    ; DATA XREF: _SHA_Bytes+198o
.text:0000087C                 dd offset $LN11
.text:00000880 $LN11           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:0000087Co
.text:00000888                 dd offset $LN10         ; "wordblock"
.text:0000088C $LN10           db 'wordblock',0        ; DATA XREF: .text:00000888o
.text:00000896                 align 4
.text:00000898
.text:00000898 ; =============== S U B R O U T I N E =======================================
.text:00000898
.text:00000898 ; Attributes: bp-based frame
.text:00000898
.text:00000898                 public _SHA_Final
.text:00000898 _SHA_Final      proc near               ; CODE XREF: _SHA_Simple+48p
.text:00000898                                         ; _sha1_final+19p ...
.text:00000898
.text:00000898 var_5C          = dword ptr -5Ch
.text:00000898 var_58          = dword ptr -58h
.text:00000898 var_50          = dword ptr -50h
.text:00000898 var_4C          = byte ptr -4Ch
.text:00000898 var_4B          = byte ptr -4Bh
.text:00000898 var_4A          = byte ptr -4Ah
.text:00000898 var_49          = byte ptr -49h
.text:00000898 var_C           = dword ptr -0Ch
.text:00000898 var_8           = dword ptr -8
.text:00000898 var_4           = dword ptr -4
.text:00000898 arg_0           = dword ptr  8
.text:00000898 arg_4           = dword ptr  0Ch
.text:00000898
.text:00000898                 push    ebp
.text:00000899                 mov     ebp, esp
.text:0000089B                 sub     esp, 5Ch
.text:0000089E                 push    edi
.text:0000089F                 lea     edi, [ebp+var_5C]
.text:000008A2                 mov     ecx, 17h
.text:000008A7                 mov     eax, 0CCCCCCCCh
.text:000008AC                 rep stosd
.text:000008AE                 mov     eax, dword ptr ds:___security_cookie
.text:000008B3                 xor     eax, ebp
.text:000008B5                 mov     [ebp+var_4], eax
.text:000008B8                 mov     eax, [ebp+arg_0]
.text:000008BB                 cmp     dword ptr [eax+54h], 38h ; '8'
.text:000008BF                 jl      short loc_8D1
.text:000008C1                 mov     ecx, [ebp+arg_0]
.text:000008C4                 mov     edx, 78h ; 'x'
.text:000008C9                 sub     edx, [ecx+54h]
.text:000008CC                 mov     [ebp+var_C], edx
.text:000008CF                 jmp     short loc_8DF
.text:000008D1 ; ---------------------------------------------------------------------------
.text:000008D1
.text:000008D1 loc_8D1:                                ; CODE XREF: _SHA_Final+27j
.text:000008D1                 mov     eax, [ebp+arg_0]
.text:000008D4                 mov     ecx, 38h ; '8'
.text:000008D9                 sub     ecx, [eax+54h]
.text:000008DC                 mov     [ebp+var_C], ecx
.text:000008DF
.text:000008DF loc_8DF:                                ; CODE XREF: _SHA_Final+37j
.text:000008DF                 mov     edx, [ebp+arg_0]
.text:000008E2                 mov     eax, [edx+58h]
.text:000008E5                 shl     eax, 3
.text:000008E8                 mov     ecx, [ebp+arg_0]
.text:000008EB                 mov     edx, [ecx+5Ch]
.text:000008EE                 shr     edx, 1Dh
.text:000008F1                 or      eax, edx
.text:000008F3                 mov     [ebp+var_58], eax
.text:000008F6                 mov     eax, [ebp+arg_0]
.text:000008F9                 mov     ecx, [eax+5Ch]
.text:000008FC                 shl     ecx, 3
.text:000008FF                 mov     [ebp+var_5C], ecx
.text:00000902                 mov     edx, [ebp+var_C]
.text:00000905                 push    edx             ; size_t
.text:00000906                 push    0               ; int
.text:00000908                 lea     eax, [ebp+var_50]
.text:0000090B                 push    eax             ; void *
.text:0000090C                 call    _memset
.text:00000911                 add     esp, 0Ch
.text:00000914                 mov     byte ptr [ebp+var_50], 80h ; 'Ç'
.text:00000918                 mov     ecx, [ebp+var_C]
.text:0000091B                 push    ecx             ; size_t
.text:0000091C                 lea     edx, [ebp+var_50]
.text:0000091F                 push    edx             ; int
.text:00000920                 mov     eax, [ebp+arg_0]
.text:00000923                 push    eax             ; int
.text:00000924                 call    _SHA_Bytes
.text:00000929                 add     esp, 0Ch
.text:0000092C                 mov     ecx, [ebp+var_58]
.text:0000092F                 shr     ecx, 18h
.text:00000932                 and     ecx, 0FFh
.text:00000938                 mov     byte ptr [ebp+var_50], cl
.text:0000093B                 mov     edx, [ebp+var_58]
.text:0000093E                 shr     edx, 10h
.text:00000941                 and     edx, 0FFh
.text:00000947                 mov     byte ptr [ebp+var_50+1], dl
.text:0000094A                 mov     eax, [ebp+var_58]
.text:0000094D                 shr     eax, 8
.text:00000950                 and     eax, 0FFh
.text:00000955                 mov     byte ptr [ebp+var_50+2], al
.text:00000958                 mov     ecx, [ebp+var_58]
.text:0000095B                 and     ecx, 0FFh
.text:00000961                 mov     byte ptr [ebp+var_50+3], cl
.text:00000964                 mov     edx, [ebp+var_5C]
.text:00000967                 shr     edx, 18h
.text:0000096A                 and     edx, 0FFh
.text:00000970                 mov     [ebp+var_4C], dl
.text:00000973                 mov     eax, [ebp+var_5C]
.text:00000976                 shr     eax, 10h
.text:00000979                 and     eax, 0FFh
.text:0000097E                 mov     [ebp+var_4B], al
.text:00000981                 mov     ecx, [ebp+var_5C]
.text:00000984                 shr     ecx, 8
.text:00000987                 and     ecx, 0FFh
.text:0000098D                 mov     [ebp+var_4A], cl
.text:00000990                 mov     edx, [ebp+var_5C]
.text:00000993                 and     edx, 0FFh
.text:00000999                 mov     [ebp+var_49], dl
.text:0000099C                 push    8               ; size_t
.text:0000099E                 lea     eax, [ebp+var_50]
.text:000009A1                 push    eax             ; int
.text:000009A2                 mov     ecx, [ebp+arg_0]
.text:000009A5                 push    ecx             ; int
.text:000009A6                 call    _SHA_Bytes
.text:000009AB                 add     esp, 0Ch
.text:000009AE                 mov     [ebp+var_8], 0
.text:000009B5                 jmp     short loc_9C0
.text:000009B7 ; ---------------------------------------------------------------------------
.text:000009B7
.text:000009B7 loc_9B7:                                ; CODE XREF: _SHA_Final+199j
.text:000009B7                 mov     edx, [ebp+var_8]
.text:000009BA                 add     edx, 1
.text:000009BD                 mov     [ebp+var_8], edx
.text:000009C0
.text:000009C0 loc_9C0:                                ; CODE XREF: _SHA_Final+11Dj
.text:000009C0                 cmp     [ebp+var_8], 5
.text:000009C4                 jge     short loc_A33
.text:000009C6                 mov     eax, [ebp+var_8]
.text:000009C9                 mov     ecx, [ebp+arg_0]
.text:000009CC                 mov     edx, [ecx+eax*4]
.text:000009CF                 shr     edx, 18h
.text:000009D2                 and     edx, 0FFh
.text:000009D8                 mov     eax, [ebp+var_8]
.text:000009DB                 mov     ecx, [ebp+arg_4]
.text:000009DE                 mov     [ecx+eax*4], dl
.text:000009E1                 mov     edx, [ebp+var_8]
.text:000009E4                 mov     eax, [ebp+arg_0]
.text:000009E7                 mov     ecx, [eax+edx*4]
.text:000009EA                 shr     ecx, 10h
.text:000009ED                 and     ecx, 0FFh
.text:000009F3                 mov     edx, [ebp+var_8]
.text:000009F6                 mov     eax, [ebp+arg_4]
.text:000009F9                 mov     [eax+edx*4+1], cl
.text:000009FD                 mov     ecx, [ebp+var_8]
.text:00000A00                 mov     edx, [ebp+arg_0]
.text:00000A03                 mov     eax, [edx+ecx*4]
.text:00000A06                 shr     eax, 8
.text:00000A09                 and     eax, 0FFh
.text:00000A0E                 mov     ecx, [ebp+var_8]
.text:00000A11                 mov     edx, [ebp+arg_4]
.text:00000A14                 mov     [edx+ecx*4+2], al
.text:00000A18                 mov     eax, [ebp+var_8]
.text:00000A1B                 mov     ecx, [ebp+arg_0]
.text:00000A1E                 mov     edx, [ecx+eax*4]
.text:00000A21                 and     edx, 0FFh
.text:00000A27                 mov     eax, [ebp+var_8]
.text:00000A2A                 mov     ecx, [ebp+arg_4]
.text:00000A2D                 mov     [ecx+eax*4+3], dl
.text:00000A31                 jmp     short loc_9B7
.text:00000A33 ; ---------------------------------------------------------------------------
.text:00000A33
.text:00000A33 loc_A33:                                ; CODE XREF: _SHA_Final+12Cj
.text:00000A33                 push    edx
.text:00000A34                 mov     ecx, ebp
.text:00000A36                 push    eax
.text:00000A37                 lea     edx, $LN10_0
.text:00000A3D                 call    @_RTC_CheckStackVars@8
.text:00000A42                 pop     eax
.text:00000A43                 pop     edx
.text:00000A44                 pop     edi
.text:00000A45                 mov     ecx, [ebp+var_4]
.text:00000A48                 xor     ecx, ebp
.text:00000A4A                 call    @__security_check_cookie@4
.text:00000A4F                 add     esp, 5Ch
.text:00000A52                 cmp     ebp, esp
.text:00000A54                 call    __RTC_CheckEsp
.text:00000A59                 mov     esp, ebp
.text:00000A5B                 pop     ebp
.text:00000A5C                 retn
.text:00000A5C _SHA_Final      endp
.text:00000A5C
.text:00000A5C ; ---------------------------------------------------------------------------
.text:00000A5D                 align 10h
.text:00000A60 $LN10_0         dd 1                    ; DATA XREF: _SHA_Final+19Fo
.text:00000A64                 dd offset $LN9
.text:00000A68 $LN9            dd 0FFFFFFB0h, 40h      ; DATA XREF: .text:00000A64o
.text:00000A70                 dd offset $LN8
.text:00000A74 $LN8            dd 0CCCC0063h           ; DATA XREF: .text:00000A70o
.text:00000A78
.text:00000A78 ; =============== S U B R O U T I N E =======================================
.text:00000A78
.text:00000A78 ; Attributes: bp-based frame
.text:00000A78
.text:00000A78 ; int __cdecl SHA_Simple(int, size_t, int)
.text:00000A78                 public _SHA_Simple
.text:00000A78 _SHA_Simple     proc near
.text:00000A78
.text:00000A78 var_6C          = byte ptr -6Ch
.text:00000A78 var_68          = dword ptr -68h
.text:00000A78 var_4           = dword ptr -4
.text:00000A78 arg_0           = dword ptr  8
.text:00000A78 arg_4           = dword ptr  0Ch
.text:00000A78 arg_8           = dword ptr  10h
.text:00000A78
.text:00000A78                 push    ebp
.text:00000A79                 mov     ebp, esp
.text:00000A7B                 sub     esp, 6Ch
.text:00000A7E                 push    edi
.text:00000A7F                 lea     edi, [ebp+var_6C]
.text:00000A82                 mov     ecx, 1Bh
.text:00000A87                 mov     eax, 0CCCCCCCCh
.text:00000A8C                 rep stosd
.text:00000A8E                 mov     eax, dword ptr ds:___security_cookie
.text:00000A93                 xor     eax, ebp
.text:00000A95                 mov     [ebp+var_4], eax
.text:00000A98                 lea     eax, [ebp+var_68]
.text:00000A9B                 push    eax
.text:00000A9C                 call    _SHA_Init
.text:00000AA1                 add     esp, 4
.text:00000AA4                 mov     ecx, [ebp+arg_4]
.text:00000AA7                 push    ecx             ; size_t
.text:00000AA8                 mov     edx, [ebp+arg_0]
.text:00000AAB                 push    edx             ; int
.text:00000AAC                 lea     eax, [ebp+var_68]
.text:00000AAF                 push    eax             ; int
.text:00000AB0                 call    _SHA_Bytes
.text:00000AB5                 add     esp, 0Ch
.text:00000AB8                 mov     ecx, [ebp+arg_8]
.text:00000ABB                 push    ecx
.text:00000ABC                 lea     edx, [ebp+var_68]
.text:00000ABF                 push    edx
.text:00000AC0                 call    _SHA_Final
.text:00000AC5                 add     esp, 8
.text:00000AC8                 push    edx
.text:00000AC9                 mov     ecx, ebp
.text:00000ACB                 push    eax
.text:00000ACC                 lea     edx, $LN5
.text:00000AD2                 call    @_RTC_CheckStackVars@8
.text:00000AD7                 pop     eax
.text:00000AD8                 pop     edx
.text:00000AD9                 pop     edi
.text:00000ADA                 mov     ecx, [ebp+var_4]
.text:00000ADD                 xor     ecx, ebp
.text:00000ADF                 call    @__security_check_cookie@4
.text:00000AE4                 add     esp, 6Ch
.text:00000AE7                 cmp     ebp, esp
.text:00000AE9                 call    __RTC_CheckEsp
.text:00000AEE                 mov     esp, ebp
.text:00000AF0                 pop     ebp
.text:00000AF1                 retn
.text:00000AF1 _SHA_Simple     endp
.text:00000AF1
.text:00000AF1 ; ---------------------------------------------------------------------------
.text:00000AF2                 align 4
.text:00000AF4 $LN5            dd 1                    ; DATA XREF: _SHA_Simple+54o
.text:00000AF8                 dd offset $LN4
.text:00000AFC $LN4            dd 0FFFFFF98h, 60h      ; DATA XREF: .text:00000AF8o
.text:00000B04                 dd offset $LN3
.text:00000B08 $LN3            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000B04o
.text:00000B18
.text:00000B18 ; =============== S U B R O U T I N E =======================================
.text:00000B18
.text:00000B18 ; Attributes: bp-based frame
.text:00000B18
.text:00000B18 _sha1_init      proc near               ; DATA XREF: .rdata:_ssh_sha1o
.text:00000B18
.text:00000B18 var_4           = dword ptr -4
.text:00000B18
.text:00000B18                 push    ebp
.text:00000B19                 mov     ebp, esp
.text:00000B1B                 push    ecx
.text:00000B1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B23                 push    60h ; '`'
.text:00000B25                 push    1
.text:00000B27                 call    _safemalloc
.text:00000B2C                 add     esp, 8
.text:00000B2F                 mov     [ebp+var_4], eax
.text:00000B32                 mov     eax, [ebp+var_4]
.text:00000B35                 push    eax
.text:00000B36                 call    _SHA_Init
.text:00000B3B                 add     esp, 4
.text:00000B3E                 mov     eax, [ebp+var_4]
.text:00000B41                 add     esp, 4
.text:00000B44                 cmp     ebp, esp
.text:00000B46                 call    __RTC_CheckEsp
.text:00000B4B                 mov     esp, ebp
.text:00000B4D                 pop     ebp
.text:00000B4E                 retn
.text:00000B4E _sha1_init      endp
.text:00000B4E
.text:00000B4E ; ---------------------------------------------------------------------------
.text:00000B4F                 db 9 dup(0CCh)
.text:00000B58
.text:00000B58 ; =============== S U B R O U T I N E =======================================
.text:00000B58
.text:00000B58 ; Attributes: bp-based frame
.text:00000B58
.text:00000B58 ; int __cdecl sha1_bytes(int, int, size_t)
.text:00000B58 _sha1_bytes     proc near               ; DATA XREF: .rdata:00000098o
.text:00000B58
.text:00000B58 var_4           = dword ptr -4
.text:00000B58 arg_0           = dword ptr  8
.text:00000B58 arg_4           = dword ptr  0Ch
.text:00000B58 arg_8           = dword ptr  10h
.text:00000B58
.text:00000B58                 push    ebp
.text:00000B59                 mov     ebp, esp
.text:00000B5B                 push    ecx
.text:00000B5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B63                 mov     eax, [ebp+arg_0]
.text:00000B66                 mov     [ebp+var_4], eax
.text:00000B69                 mov     ecx, [ebp+arg_8]
.text:00000B6C                 push    ecx             ; size_t
.text:00000B6D                 mov     edx, [ebp+arg_4]
.text:00000B70                 push    edx             ; int
.text:00000B71                 mov     eax, [ebp+var_4]
.text:00000B74                 push    eax             ; int
.text:00000B75                 call    _SHA_Bytes
.text:00000B7A                 add     esp, 0Ch
.text:00000B7D                 add     esp, 4
.text:00000B80                 cmp     ebp, esp
.text:00000B82                 call    __RTC_CheckEsp
.text:00000B87                 mov     esp, ebp
.text:00000B89                 pop     ebp
.text:00000B8A                 retn
.text:00000B8A _sha1_bytes     endp
.text:00000B8A
.text:00000B8A ; ---------------------------------------------------------------------------
.text:00000B8B                 db 0Dh dup(0CCh)
.text:00000B98
.text:00000B98 ; =============== S U B R O U T I N E =======================================
.text:00000B98
.text:00000B98 ; Attributes: bp-based frame
.text:00000B98
.text:00000B98 _sha1_final     proc near               ; DATA XREF: .rdata:0000009Co
.text:00000B98
.text:00000B98 var_4           = dword ptr -4
.text:00000B98 arg_0           = dword ptr  8
.text:00000B98 arg_4           = dword ptr  0Ch
.text:00000B98
.text:00000B98                 push    ebp
.text:00000B99                 mov     ebp, esp
.text:00000B9B                 push    ecx
.text:00000B9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BA3                 mov     eax, [ebp+arg_0]
.text:00000BA6                 mov     [ebp+var_4], eax
.text:00000BA9                 mov     ecx, [ebp+arg_4]
.text:00000BAC                 push    ecx
.text:00000BAD                 mov     edx, [ebp+var_4]
.text:00000BB0                 push    edx
.text:00000BB1                 call    _SHA_Final
.text:00000BB6                 add     esp, 8
.text:00000BB9                 mov     eax, [ebp+var_4]
.text:00000BBC                 push    eax
.text:00000BBD                 call    _safefree
.text:00000BC2                 add     esp, 4
.text:00000BC5                 add     esp, 4
.text:00000BC8                 cmp     ebp, esp
.text:00000BCA                 call    __RTC_CheckEsp
.text:00000BCF                 mov     esp, ebp
.text:00000BD1                 pop     ebp
.text:00000BD2                 retn
.text:00000BD2 _sha1_final     endp
.text:00000BD2
.text:00000BD2 ; ---------------------------------------------------------------------------
.text:00000BD3                 align 8
.text:00000BD8
.text:00000BD8 ; =============== S U B R O U T I N E =======================================
.text:00000BD8
.text:00000BD8 ; Attributes: bp-based frame
.text:00000BD8
.text:00000BD8 _sha1_make_context proc near            ; DATA XREF: .rdata:_ssh_hmac_sha1o
.text:00000BD8                                         ; .rdata:_ssh_hmac_sha1_96o ...
.text:00000BD8                 push    ebp
.text:00000BD9                 mov     ebp, esp
.text:00000BDB                 push    60h ; '`'
.text:00000BDD                 push    3
.text:00000BDF                 call    _safemalloc
.text:00000BE4                 add     esp, 8
.text:00000BE7                 cmp     ebp, esp
.text:00000BE9                 call    __RTC_CheckEsp
.text:00000BEE                 pop     ebp
.text:00000BEF                 retn
.text:00000BEF _sha1_make_context endp
.text:00000BEF
.text:00000BEF ; ---------------------------------------------------------------------------
.text:00000BF0                 db 8 dup(0CCh)
.text:00000BF8
.text:00000BF8 ; =============== S U B R O U T I N E =======================================
.text:00000BF8
.text:00000BF8 ; Attributes: bp-based frame
.text:00000BF8
.text:00000BF8 _sha1_free_context proc near            ; DATA XREF: .rdata:000000ACo
.text:00000BF8                                         ; .rdata:000000DCo ...
.text:00000BF8
.text:00000BF8 arg_0           = dword ptr  8
.text:00000BF8
.text:00000BF8                 push    ebp
.text:00000BF9                 mov     ebp, esp
.text:00000BFB                 mov     eax, [ebp+arg_0]
.text:00000BFE                 push    eax
.text:00000BFF                 call    _safefree
.text:00000C04                 add     esp, 4
.text:00000C07                 cmp     ebp, esp
.text:00000C09                 call    __RTC_CheckEsp
.text:00000C0E                 pop     ebp
.text:00000C0F                 retn
.text:00000C0F _sha1_free_context endp
.text:00000C0F
.text:00000C0F ; ---------------------------------------------------------------------------
.text:00000C10                 db 8 dup(0CCh)
.text:00000C18
.text:00000C18 ; =============== S U B R O U T I N E =======================================
.text:00000C18
.text:00000C18 ; Attributes: bp-based frame
.text:00000C18
.text:00000C18 _sha1_key       proc near               ; DATA XREF: .rdata:000000B0o
.text:00000C18                                         ; .rdata:000000E0o
.text:00000C18
.text:00000C18 arg_0           = dword ptr  8
.text:00000C18 arg_4           = dword ptr  0Ch
.text:00000C18
.text:00000C18                 push    ebp
.text:00000C19                 mov     ebp, esp
.text:00000C1B                 push    14h
.text:00000C1D                 mov     eax, [ebp+arg_4]
.text:00000C20                 push    eax
.text:00000C21                 mov     ecx, [ebp+arg_0]
.text:00000C24                 push    ecx
.text:00000C25                 call    _sha1_key_internal
.text:00000C2A                 add     esp, 0Ch
.text:00000C2D                 cmp     ebp, esp
.text:00000C2F                 call    __RTC_CheckEsp
.text:00000C34                 pop     ebp
.text:00000C35                 retn
.text:00000C35 _sha1_key       endp
.text:00000C35
.text:00000C35 ; ---------------------------------------------------------------------------
.text:00000C36                 align 4
.text:00000C38
.text:00000C38 ; =============== S U B R O U T I N E =======================================
.text:00000C38
.text:00000C38 ; Attributes: bp-based frame
.text:00000C38
.text:00000C38 _sha1_key_internal proc near            ; CODE XREF: _sha1_key+Dp
.text:00000C38                                         ; _sha1_key_buggy+Dp ...
.text:00000C38
.text:00000C38 var_54          = dword ptr -54h
.text:00000C38 var_4C          = dword ptr -4Ch
.text:00000C38 var_8           = dword ptr -8
.text:00000C38 var_4           = dword ptr -4
.text:00000C38 arg_0           = dword ptr  8
.text:00000C38 arg_4           = dword ptr  0Ch
.text:00000C38 arg_8           = dword ptr  10h
.text:00000C38
.text:00000C38                 push    ebp
.text:00000C39                 mov     ebp, esp
.text:00000C3B                 sub     esp, 54h
.text:00000C3E                 push    edi
.text:00000C3F                 lea     edi, [ebp+var_54]
.text:00000C42                 mov     ecx, 15h
.text:00000C47                 mov     eax, 0CCCCCCCCh
.text:00000C4C                 rep stosd
.text:00000C4E                 mov     eax, dword ptr ds:___security_cookie
.text:00000C53                 xor     eax, ebp
.text:00000C55                 mov     [ebp+var_4], eax
.text:00000C58                 mov     eax, [ebp+arg_0]
.text:00000C5B                 mov     [ebp+var_8], eax
.text:00000C5E                 push    40h ; '@'       ; size_t
.text:00000C60                 push    36h ; '6'       ; int
.text:00000C62                 lea     ecx, [ebp+var_4C]
.text:00000C65                 push    ecx             ; void *
.text:00000C66                 call    _memset
.text:00000C6B                 add     esp, 0Ch
.text:00000C6E                 mov     [ebp+var_54], 0
.text:00000C75                 jmp     short loc_C80
.text:00000C77 ; ---------------------------------------------------------------------------
.text:00000C77
.text:00000C77 loc_C77:                                ; CODE XREF: _sha1_key_internal+70j
.text:00000C77                 mov     edx, [ebp+var_54]
.text:00000C7A                 add     edx, 1
.text:00000C7D                 mov     [ebp+var_54], edx
.text:00000C80
.text:00000C80 loc_C80:                                ; CODE XREF: _sha1_key_internal+3Dj
.text:00000C80                 mov     eax, [ebp+var_54]
.text:00000C83                 cmp     eax, [ebp+arg_8]
.text:00000C86                 jge     short loc_CAA
.text:00000C88                 cmp     [ebp+var_54], 40h ; '@'
.text:00000C8C                 jge     short loc_CAA
.text:00000C8E                 mov     ecx, [ebp+arg_4]
.text:00000C91                 add     ecx, [ebp+var_54]
.text:00000C94                 movzx   edx, byte ptr [ecx]
.text:00000C97                 mov     eax, [ebp+var_54]
.text:00000C9A                 movzx   ecx, byte ptr [ebp+eax+var_4C]
.text:00000C9F                 xor     ecx, edx
.text:00000CA1                 mov     edx, [ebp+var_54]
.text:00000CA4                 mov     byte ptr [ebp+edx+var_4C], cl
.text:00000CA8                 jmp     short loc_C77
.text:00000CAA ; ---------------------------------------------------------------------------
.text:00000CAA
.text:00000CAA loc_CAA:                                ; CODE XREF: _sha1_key_internal+4Ej
.text:00000CAA                                         ; _sha1_key_internal+54j
.text:00000CAA                 mov     eax, [ebp+var_8]
.text:00000CAD                 push    eax
.text:00000CAE                 call    _SHA_Init
.text:00000CB3                 add     esp, 4
.text:00000CB6                 push    40h ; '@'       ; size_t
.text:00000CB8                 lea     ecx, [ebp+var_4C]
.text:00000CBB                 push    ecx             ; int
.text:00000CBC                 mov     edx, [ebp+var_8]
.text:00000CBF                 push    edx             ; int
.text:00000CC0                 call    _SHA_Bytes
.text:00000CC5                 add     esp, 0Ch
.text:00000CC8                 push    40h ; '@'       ; size_t
.text:00000CCA                 push    5Ch ; '\'       ; int
.text:00000CCC                 lea     eax, [ebp+var_4C]
.text:00000CCF                 push    eax             ; void *
.text:00000CD0                 call    _memset
.text:00000CD5                 add     esp, 0Ch
.text:00000CD8                 mov     [ebp+var_54], 0
.text:00000CDF                 jmp     short loc_CEA
.text:00000CE1 ; ---------------------------------------------------------------------------
.text:00000CE1
.text:00000CE1 loc_CE1:                                ; CODE XREF: _sha1_key_internal+DAj
.text:00000CE1                 mov     ecx, [ebp+var_54]
.text:00000CE4                 add     ecx, 1
.text:00000CE7                 mov     [ebp+var_54], ecx
.text:00000CEA
.text:00000CEA loc_CEA:                                ; CODE XREF: _sha1_key_internal+A7j
.text:00000CEA                 mov     edx, [ebp+var_54]
.text:00000CED                 cmp     edx, [ebp+arg_8]
.text:00000CF0                 jge     short loc_D14
.text:00000CF2                 cmp     [ebp+var_54], 40h ; '@'
.text:00000CF6                 jge     short loc_D14
.text:00000CF8                 mov     eax, [ebp+arg_4]
.text:00000CFB                 add     eax, [ebp+var_54]
.text:00000CFE                 movzx   ecx, byte ptr [eax]
.text:00000D01                 mov     edx, [ebp+var_54]
.text:00000D04                 movzx   eax, byte ptr [ebp+edx+var_4C]
.text:00000D09                 xor     eax, ecx
.text:00000D0B                 mov     ecx, [ebp+var_54]
.text:00000D0E                 mov     byte ptr [ebp+ecx+var_4C], al
.text:00000D12                 jmp     short loc_CE1
.text:00000D14 ; ---------------------------------------------------------------------------
.text:00000D14
.text:00000D14 loc_D14:                                ; CODE XREF: _sha1_key_internal+B8j
.text:00000D14                                         ; _sha1_key_internal+BEj
.text:00000D14                 mov     edx, [ebp+var_8]
.text:00000D17                 add     edx, 60h ; '`'
.text:00000D1A                 push    edx
.text:00000D1B                 call    _SHA_Init
.text:00000D20                 add     esp, 4
.text:00000D23                 push    40h ; '@'       ; size_t
.text:00000D25                 lea     eax, [ebp+var_4C]
.text:00000D28                 push    eax             ; int
.text:00000D29                 mov     ecx, [ebp+var_8]
.text:00000D2C                 add     ecx, 60h ; '`'
.text:00000D2F                 push    ecx             ; int
.text:00000D30                 call    _SHA_Bytes
.text:00000D35                 add     esp, 0Ch
.text:00000D38                 push    40h ; '@'
.text:00000D3A                 lea     edx, [ebp+var_4C]
.text:00000D3D                 push    edx
.text:00000D3E                 call    _smemclr
.text:00000D43                 add     esp, 8
.text:00000D46                 push    edx
.text:00000D47                 mov     ecx, ebp
.text:00000D49                 push    eax
.text:00000D4A                 lea     edx, $LN11_0
.text:00000D50                 call    @_RTC_CheckStackVars@8
.text:00000D55                 pop     eax
.text:00000D56                 pop     edx
.text:00000D57                 pop     edi
.text:00000D58                 mov     ecx, [ebp+var_4]
.text:00000D5B                 xor     ecx, ebp
.text:00000D5D                 call    @__security_check_cookie@4
.text:00000D62                 add     esp, 54h
.text:00000D65                 cmp     ebp, esp
.text:00000D67                 call    __RTC_CheckEsp
.text:00000D6C                 mov     esp, ebp
.text:00000D6E                 pop     ebp
.text:00000D6F                 retn
.text:00000D6F _sha1_key_internal endp
.text:00000D6F
.text:00000D6F ; ---------------------------------------------------------------------------
.text:00000D70 $LN11_0         dd 1                    ; DATA XREF: _sha1_key_internal+112o
.text:00000D74                 dd offset $LN10_1
.text:00000D78 $LN10_1         dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000D74o
.text:00000D80                 dd offset $LN9_0
.text:00000D84 $LN9_0          dd 6F6F66h              ; DATA XREF: .text:00000D80o
.text:00000D88
.text:00000D88 ; =============== S U B R O U T I N E =======================================
.text:00000D88
.text:00000D88 ; Attributes: bp-based frame
.text:00000D88
.text:00000D88 _sha1_key_buggy proc near               ; DATA XREF: .rdata:00000110o
.text:00000D88                                         ; .rdata:00000140o
.text:00000D88
.text:00000D88 arg_0           = dword ptr  8
.text:00000D88 arg_4           = dword ptr  0Ch
.text:00000D88
.text:00000D88                 push    ebp
.text:00000D89                 mov     ebp, esp
.text:00000D8B                 push    10h
.text:00000D8D                 mov     eax, [ebp+arg_4]
.text:00000D90                 push    eax
.text:00000D91                 mov     ecx, [ebp+arg_0]
.text:00000D94                 push    ecx
.text:00000D95                 call    _sha1_key_internal
.text:00000D9A                 add     esp, 0Ch
.text:00000D9D                 cmp     ebp, esp
.text:00000D9F                 call    __RTC_CheckEsp
.text:00000DA4                 pop     ebp
.text:00000DA5                 retn
.text:00000DA5 _sha1_key_buggy endp
.text:00000DA5
.text:00000DA5 ; ---------------------------------------------------------------------------
.text:00000DA6                 align 4
.text:00000DA8
.text:00000DA8 ; =============== S U B R O U T I N E =======================================
.text:00000DA8
.text:00000DA8 ; Attributes: bp-based frame
.text:00000DA8
.text:00000DA8 _hmacsha1_start proc near               ; CODE XREF: _sha1_do_hmac+40p
.text:00000DA8                                         ; DATA XREF: .rdata:000000BCo ...
.text:00000DA8
.text:00000DA8 var_4           = dword ptr -4
.text:00000DA8 arg_0           = dword ptr  8
.text:00000DA8
.text:00000DA8                 push    ebp
.text:00000DA9                 mov     ebp, esp
.text:00000DAB                 push    ecx
.text:00000DAC                 push    esi
.text:00000DAD                 push    edi
.text:00000DAE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DB5                 mov     eax, [ebp+arg_0]
.text:00000DB8                 mov     [ebp+var_4], eax
.text:00000DBB                 mov     esi, [ebp+var_4]
.text:00000DBE                 mov     edi, [ebp+var_4]
.text:00000DC1                 add     edi, 0C0h ; '+'
.text:00000DC7                 mov     ecx, 18h
.text:00000DCC                 rep movsd
.text:00000DCE                 pop     edi
.text:00000DCF                 pop     esi
.text:00000DD0                 mov     esp, ebp
.text:00000DD2                 pop     ebp
.text:00000DD3                 retn
.text:00000DD3 _hmacsha1_start endp
.text:00000DD3
.text:00000DD3 ; ---------------------------------------------------------------------------
.text:00000DD4                 align 8
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8 ; int __cdecl hmacsha1_bytes(int, int, size_t)
.text:00000DD8 _hmacsha1_bytes proc near               ; CODE XREF: _sha1_do_hmac+52p
.text:00000DD8                                         ; _sha1_do_hmac+66p
.text:00000DD8                                         ; DATA XREF: ...
.text:00000DD8
.text:00000DD8 var_4           = dword ptr -4
.text:00000DD8 arg_0           = dword ptr  8
.text:00000DD8 arg_4           = dword ptr  0Ch
.text:00000DD8 arg_8           = dword ptr  10h
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 push    ecx
.text:00000DDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DE3                 mov     eax, [ebp+arg_0]
.text:00000DE6                 mov     [ebp+var_4], eax
.text:00000DE9                 mov     ecx, [ebp+arg_8]
.text:00000DEC                 push    ecx             ; size_t
.text:00000DED                 mov     edx, [ebp+arg_4]
.text:00000DF0                 push    edx             ; int
.text:00000DF1                 mov     eax, [ebp+var_4]
.text:00000DF4                 add     eax, 0C0h ; '+'
.text:00000DF9                 push    eax             ; int
.text:00000DFA                 call    _SHA_Bytes
.text:00000DFF                 add     esp, 0Ch
.text:00000E02                 add     esp, 4
.text:00000E05                 cmp     ebp, esp
.text:00000E07                 call    __RTC_CheckEsp
.text:00000E0C                 mov     esp, ebp
.text:00000E0E                 pop     ebp
.text:00000E0F                 retn
.text:00000E0F _hmacsha1_bytes endp
.text:00000E0F
.text:00000E0F ; ---------------------------------------------------------------------------
.text:00000E10                 db 8 dup(0CCh)
.text:00000E18
.text:00000E18 ; =============== S U B R O U T I N E =======================================
.text:00000E18
.text:00000E18 ; Attributes: bp-based frame
.text:00000E18
.text:00000E18 _hmacsha1_genresult proc near           ; CODE XREF: _sha1_do_hmac+76p
.text:00000E18                                         ; _hmacsha1_verresult+35p ...
.text:00000E18
.text:00000E18 var_8C          = byte ptr -8Ch
.text:00000E18 var_88          = dword ptr -88h
.text:00000E18 var_6C          = dword ptr -6Ch
.text:00000E18 var_8           = dword ptr -8
.text:00000E18 var_4           = dword ptr -4
.text:00000E18 arg_0           = dword ptr  8
.text:00000E18 arg_4           = dword ptr  0Ch
.text:00000E18
.text:00000E18                 push    ebp
.text:00000E19                 mov     ebp, esp
.text:00000E1B                 sub     esp, 8Ch
.text:00000E21                 push    esi
.text:00000E22                 push    edi
.text:00000E23                 lea     edi, [ebp+var_8C]
.text:00000E29                 mov     ecx, 23h ; '#'
.text:00000E2E                 mov     eax, 0CCCCCCCCh
.text:00000E33                 rep stosd
.text:00000E35                 mov     eax, dword ptr ds:___security_cookie
.text:00000E3A                 xor     eax, ebp
.text:00000E3C                 mov     [ebp+var_4], eax
.text:00000E3F                 mov     eax, [ebp+arg_0]
.text:00000E42                 mov     [ebp+var_8], eax
.text:00000E45                 mov     esi, [ebp+var_8]
.text:00000E48                 add     esi, 0C0h ; '+'
.text:00000E4E                 mov     ecx, 18h
.text:00000E53                 lea     edi, [ebp+var_6C]
.text:00000E56                 rep movsd
.text:00000E58                 lea     ecx, [ebp+var_88]
.text:00000E5E                 push    ecx
.text:00000E5F                 lea     edx, [ebp+var_6C]
.text:00000E62                 push    edx
.text:00000E63                 call    _SHA_Final
.text:00000E68                 add     esp, 8
.text:00000E6B                 mov     esi, [ebp+var_8]
.text:00000E6E                 add     esi, 60h ; '`'
.text:00000E71                 mov     ecx, 18h
.text:00000E76                 lea     edi, [ebp+var_6C]
.text:00000E79                 rep movsd
.text:00000E7B                 push    14h             ; size_t
.text:00000E7D                 lea     eax, [ebp+var_88]
.text:00000E83                 push    eax             ; int
.text:00000E84                 lea     ecx, [ebp+var_6C]
.text:00000E87                 push    ecx             ; int
.text:00000E88                 call    _SHA_Bytes
.text:00000E8D                 add     esp, 0Ch
.text:00000E90                 mov     edx, [ebp+arg_4]
.text:00000E93                 push    edx
.text:00000E94                 lea     eax, [ebp+var_6C]
.text:00000E97                 push    eax
.text:00000E98                 call    _SHA_Final
.text:00000E9D                 add     esp, 8
.text:00000EA0                 push    edx
.text:00000EA1                 mov     ecx, ebp
.text:00000EA3                 push    eax
.text:00000EA4                 lea     edx, $LN6
.text:00000EAA                 call    @_RTC_CheckStackVars@8
.text:00000EAF                 pop     eax
.text:00000EB0                 pop     edx
.text:00000EB1                 pop     edi
.text:00000EB2                 pop     esi
.text:00000EB3                 mov     ecx, [ebp+var_4]
.text:00000EB6                 xor     ecx, ebp
.text:00000EB8                 call    @__security_check_cookie@4
.text:00000EBD                 add     esp, 8Ch
.text:00000EC3                 cmp     ebp, esp
.text:00000EC5                 call    __RTC_CheckEsp
.text:00000ECA                 mov     esp, ebp
.text:00000ECC                 pop     ebp
.text:00000ECD                 retn
.text:00000ECD _hmacsha1_genresult endp
.text:00000ECD
.text:00000ECD ; ---------------------------------------------------------------------------
.text:00000ECE                 align 10h
.text:00000ED0 $LN6            dd 2                    ; DATA XREF: _hmacsha1_genresult+8Co
.text:00000ED4                 dd offset $LN5_0
.text:00000ED8 $LN5_0          dd 0FFFFFF94h, 60h      ; DATA XREF: .text:00000ED4o
.text:00000EE0                 dd offset $LN3_0        ; "s"
.text:00000EE4                 dd 0FFFFFF78h, 14h
.text:00000EEC                 dd offset $LN4_0        ; "intermediate"
.text:00000EF0 $LN4_0          db 'intermediate',0     ; DATA XREF: .text:00000EECo
.text:00000EFD $LN3_0          db 's',0                ; DATA XREF: .text:00000EE0o
.text:00000EFF                 db 9 dup(0CCh)
.text:00000F08
.text:00000F08 ; =============== S U B R O U T I N E =======================================
.text:00000F08
.text:00000F08 ; Attributes: bp-based frame
.text:00000F08
.text:00000F08 ; int __cdecl sha1_generate(int, int, size_t, int)
.text:00000F08 _sha1_generate  proc near               ; DATA XREF: .rdata:000000B4o
.text:00000F08                                         ; .rdata:00000114o
.text:00000F08
.text:00000F08 arg_0           = dword ptr  8
.text:00000F08 arg_4           = dword ptr  0Ch
.text:00000F08 arg_8           = dword ptr  10h
.text:00000F08 arg_C           = dword ptr  14h
.text:00000F08
.text:00000F08                 push    ebp
.text:00000F09                 mov     ebp, esp
.text:00000F0B                 mov     eax, [ebp+arg_4]
.text:00000F0E                 add     eax, [ebp+arg_8]
.text:00000F11                 push    eax             ; int
.text:00000F12                 mov     ecx, [ebp+arg_C]
.text:00000F15                 push    ecx             ; int
.text:00000F16                 mov     edx, [ebp+arg_8]
.text:00000F19                 push    edx             ; size_t
.text:00000F1A                 mov     eax, [ebp+arg_4]
.text:00000F1D                 push    eax             ; int
.text:00000F1E                 mov     ecx, [ebp+arg_0]
.text:00000F21                 push    ecx             ; int
.text:00000F22                 call    _sha1_do_hmac
.text:00000F27                 add     esp, 14h
.text:00000F2A                 cmp     ebp, esp
.text:00000F2C                 call    __RTC_CheckEsp
.text:00000F31                 pop     ebp
.text:00000F32                 retn
.text:00000F32 _sha1_generate  endp
.text:00000F32
.text:00000F32 ; ---------------------------------------------------------------------------
.text:00000F33                 align 8
.text:00000F38
.text:00000F38 ; =============== S U B R O U T I N E =======================================
.text:00000F38
.text:00000F38 ; Attributes: bp-based frame
.text:00000F38
.text:00000F38 ; int __cdecl sha1_do_hmac(int, int, size_t, int, int)
.text:00000F38 _sha1_do_hmac   proc near               ; CODE XREF: _sha1_generate+1Ap
.text:00000F38                                         ; _sha1_verify+41p ...
.text:00000F38
.text:00000F38 var_C           = dword ptr -0Ch
.text:00000F38 var_8           = dword ptr -8
.text:00000F38 var_4           = dword ptr -4
.text:00000F38 arg_0           = dword ptr  8
.text:00000F38 arg_4           = dword ptr  0Ch
.text:00000F38 arg_8           = dword ptr  10h
.text:00000F38 arg_C           = dword ptr  14h
.text:00000F38 arg_10          = dword ptr  18h
.text:00000F38
.text:00000F38                 push    ebp
.text:00000F39                 mov     ebp, esp
.text:00000F3B                 sub     esp, 0Ch
.text:00000F3E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000F45                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F53                 mov     eax, [ebp+arg_C]
.text:00000F56                 shr     eax, 18h
.text:00000F59                 mov     byte ptr [ebp+var_8], al
.text:00000F5C                 mov     ecx, [ebp+arg_C]
.text:00000F5F                 shr     ecx, 10h
.text:00000F62                 mov     byte ptr [ebp+var_8+1], cl
.text:00000F65                 mov     edx, [ebp+arg_C]
.text:00000F68                 shr     edx, 8
.text:00000F6B                 mov     byte ptr [ebp+var_8+2], dl
.text:00000F6E                 mov     al, byte ptr [ebp+arg_C]
.text:00000F71                 mov     byte ptr [ebp+var_8+3], al
.text:00000F74                 mov     ecx, [ebp+arg_0]
.text:00000F77                 push    ecx
.text:00000F78                 call    _hmacsha1_start
.text:00000F7D                 add     esp, 4
.text:00000F80                 push    4               ; size_t
.text:00000F82                 lea     edx, [ebp+var_8]
.text:00000F85                 push    edx             ; int
.text:00000F86                 mov     eax, [ebp+arg_0]
.text:00000F89                 push    eax             ; int
.text:00000F8A                 call    _hmacsha1_bytes
.text:00000F8F                 add     esp, 0Ch
.text:00000F92                 mov     ecx, [ebp+arg_8]
.text:00000F95                 push    ecx             ; size_t
.text:00000F96                 mov     edx, [ebp+arg_4]
.text:00000F99                 push    edx             ; int
.text:00000F9A                 mov     eax, [ebp+arg_0]
.text:00000F9D                 push    eax             ; int
.text:00000F9E                 call    _hmacsha1_bytes
.text:00000FA3                 add     esp, 0Ch
.text:00000FA6                 mov     ecx, [ebp+arg_10]
.text:00000FA9                 push    ecx
.text:00000FAA                 mov     edx, [ebp+arg_0]
.text:00000FAD                 push    edx
.text:00000FAE                 call    _hmacsha1_genresult
.text:00000FB3                 add     esp, 8
.text:00000FB6                 push    edx
.text:00000FB7                 mov     ecx, ebp
.text:00000FB9                 push    eax
.text:00000FBA                 lea     edx, $LN5_1
.text:00000FC0                 call    @_RTC_CheckStackVars@8
.text:00000FC5                 pop     eax
.text:00000FC6                 pop     edx
.text:00000FC7                 add     esp, 0Ch
.text:00000FCA                 cmp     ebp, esp
.text:00000FCC                 call    __RTC_CheckEsp
.text:00000FD1                 mov     esp, ebp
.text:00000FD3                 pop     ebp
.text:00000FD4                 retn
.text:00000FD4 _sha1_do_hmac   endp
.text:00000FD4
.text:00000FD4 ; ---------------------------------------------------------------------------
.text:00000FD5                 align 4
.text:00000FD8 $LN5_1          dd 1                    ; DATA XREF: _sha1_do_hmac+82o
.text:00000FDC                 dd offset $LN4_1
.text:00000FE0 $LN4_1          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000FDCo
.text:00000FE8                 dd offset $LN3_1        ; "seqbuf"
.text:00000FEC $LN3_1          db 'seqbuf',0           ; DATA XREF: .text:00000FE8o
.text:00000FF3                 align 8
.text:00000FF8
.text:00000FF8 ; =============== S U B R O U T I N E =======================================
.text:00000FF8
.text:00000FF8 ; Attributes: bp-based frame
.text:00000FF8
.text:00000FF8 ; int __cdecl hmacsha1_verresult(int, void *)
.text:00000FF8 _hmacsha1_verresult proc near           ; DATA XREF: .rdata:000000C8o
.text:00000FF8                                         ; .rdata:00000128o
.text:00000FF8
.text:00000FF8 var_20          = dword ptr -20h
.text:00000FF8 var_1C          = dword ptr -1Ch
.text:00000FF8 var_18          = dword ptr -18h
.text:00000FF8 var_14          = dword ptr -14h
.text:00000FF8 var_10          = dword ptr -10h
.text:00000FF8 var_C           = dword ptr -0Ch
.text:00000FF8 var_8           = dword ptr -8
.text:00000FF8 var_4           = dword ptr -4
.text:00000FF8 arg_0           = dword ptr  8
.text:00000FF8 arg_4           = dword ptr  0Ch
.text:00000FF8
.text:00000FF8                 push    ebp
.text:00000FF9                 mov     ebp, esp
.text:00000FFB                 sub     esp, 20h
.text:00000FFE                 mov     eax, 0CCCCCCCCh
.text:00001003                 mov     [ebp+var_20], eax
.text:00001006                 mov     [ebp+var_1C], eax
.text:00001009                 mov     [ebp+var_18], eax
.text:0000100C                 mov     [ebp+var_14], eax
.text:0000100F                 mov     [ebp+var_10], eax
.text:00001012                 mov     [ebp+var_C], eax
.text:00001015                 mov     [ebp+var_8], eax
.text:00001018                 mov     [ebp+var_4], eax
.text:0000101B                 mov     eax, dword ptr ds:___security_cookie
.text:00001020                 xor     eax, ebp
.text:00001022                 mov     [ebp+var_4], eax
.text:00001025                 lea     eax, [ebp+var_1C]
.text:00001028                 push    eax
.text:00001029                 mov     ecx, [ebp+arg_0]
.text:0000102C                 push    ecx
.text:0000102D                 call    _hmacsha1_genresult
.text:00001032                 add     esp, 8
.text:00001035                 push    14h             ; size_t
.text:00001037                 mov     edx, [ebp+arg_4]
.text:0000103A                 push    edx             ; void *
.text:0000103B                 lea     eax, [ebp+var_1C]
.text:0000103E                 push    eax             ; void *
.text:0000103F                 call    _memcmp
.text:00001044                 add     esp, 0Ch
.text:00001047                 neg     eax
.text:00001049                 sbb     eax, eax
.text:0000104B                 add     eax, 1
.text:0000104E                 push    edx
.text:0000104F                 mov     ecx, ebp
.text:00001051                 push    eax
.text:00001052                 lea     edx, $LN5_2
.text:00001058                 call    @_RTC_CheckStackVars@8
.text:0000105D                 pop     eax
.text:0000105E                 pop     edx
.text:0000105F                 mov     ecx, [ebp+var_4]
.text:00001062                 xor     ecx, ebp
.text:00001064                 call    @__security_check_cookie@4
.text:00001069                 add     esp, 20h
.text:0000106C                 cmp     ebp, esp
.text:0000106E                 call    __RTC_CheckEsp
.text:00001073                 mov     esp, ebp
.text:00001075                 pop     ebp
.text:00001076                 retn
.text:00001076 _hmacsha1_verresult endp
.text:00001076
.text:00001076 ; ---------------------------------------------------------------------------
.text:00001077                 align 4
.text:00001078 $LN5_2          dd 1                    ; DATA XREF: _hmacsha1_verresult+5Ao
.text:0000107C                 dd offset $LN4_2
.text:00001080 $LN4_2          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:0000107Co
.text:00001088                 dd offset $LN3_2        ; "correct"
.text:0000108C $LN3_2          db 'correct',0          ; DATA XREF: .text:00001088o
.text:00001094                 align 8
.text:00001098
.text:00001098 ; =============== S U B R O U T I N E =======================================
.text:00001098
.text:00001098 ; Attributes: bp-based frame
.text:00001098
.text:00001098 ; int __cdecl sha1_verify(int, int, size_t, int)
.text:00001098 _sha1_verify    proc near               ; DATA XREF: .rdata:000000B8o
.text:00001098                                         ; .rdata:00000118o
.text:00001098
.text:00001098 var_20          = dword ptr -20h
.text:00001098 var_1C          = dword ptr -1Ch
.text:00001098 var_18          = dword ptr -18h
.text:00001098 var_14          = dword ptr -14h
.text:00001098 var_10          = dword ptr -10h
.text:00001098 var_C           = dword ptr -0Ch
.text:00001098 var_8           = dword ptr -8
.text:00001098 var_4           = dword ptr -4
.text:00001098 arg_0           = dword ptr  8
.text:00001098 arg_4           = dword ptr  0Ch
.text:00001098 arg_8           = dword ptr  10h
.text:00001098 arg_C           = dword ptr  14h
.text:00001098
.text:00001098                 push    ebp
.text:00001099                 mov     ebp, esp
.text:0000109B                 sub     esp, 20h
.text:0000109E                 mov     eax, 0CCCCCCCCh
.text:000010A3                 mov     [ebp+var_20], eax
.text:000010A6                 mov     [ebp+var_1C], eax
.text:000010A9                 mov     [ebp+var_18], eax
.text:000010AC                 mov     [ebp+var_14], eax
.text:000010AF                 mov     [ebp+var_10], eax
.text:000010B2                 mov     [ebp+var_C], eax
.text:000010B5                 mov     [ebp+var_8], eax
.text:000010B8                 mov     [ebp+var_4], eax
.text:000010BB                 mov     eax, dword ptr ds:___security_cookie
.text:000010C0                 xor     eax, ebp
.text:000010C2                 mov     [ebp+var_4], eax
.text:000010C5                 lea     eax, [ebp+var_1C]
.text:000010C8                 push    eax             ; int
.text:000010C9                 mov     ecx, [ebp+arg_C]
.text:000010CC                 push    ecx             ; int
.text:000010CD                 mov     edx, [ebp+arg_8]
.text:000010D0                 push    edx             ; size_t
.text:000010D1                 mov     eax, [ebp+arg_4]
.text:000010D4                 push    eax             ; int
.text:000010D5                 mov     ecx, [ebp+arg_0]
.text:000010D8                 push    ecx             ; int
.text:000010D9                 call    _sha1_do_hmac
.text:000010DE                 add     esp, 14h
.text:000010E1                 push    14h             ; size_t
.text:000010E3                 mov     edx, [ebp+arg_4]
.text:000010E6                 add     edx, [ebp+arg_8]
.text:000010E9                 push    edx             ; void *
.text:000010EA                 lea     eax, [ebp+var_1C]
.text:000010ED                 push    eax             ; void *
.text:000010EE                 call    _memcmp
.text:000010F3                 add     esp, 0Ch
.text:000010F6                 neg     eax
.text:000010F8                 sbb     eax, eax
.text:000010FA                 add     eax, 1
.text:000010FD                 push    edx
.text:000010FE                 mov     ecx, ebp
.text:00001100                 push    eax
.text:00001101                 lea     edx, $LN5_3
.text:00001107                 call    @_RTC_CheckStackVars@8
.text:0000110C                 pop     eax
.text:0000110D                 pop     edx
.text:0000110E                 mov     ecx, [ebp+var_4]
.text:00001111                 xor     ecx, ebp
.text:00001113                 call    @__security_check_cookie@4
.text:00001118                 add     esp, 20h
.text:0000111B                 cmp     ebp, esp
.text:0000111D                 call    __RTC_CheckEsp
.text:00001122                 mov     esp, ebp
.text:00001124                 pop     ebp
.text:00001125                 retn
.text:00001125 _sha1_verify    endp
.text:00001125
.text:00001125 ; ---------------------------------------------------------------------------
.text:00001126                 align 4
.text:00001128 $LN5_3          dd 1                    ; DATA XREF: _sha1_verify+69o
.text:0000112C                 dd offset $LN4_3
.text:00001130 $LN4_3          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:0000112Co
.text:00001138                 dd offset $LN3_3        ; "correct"
.text:0000113C $LN3_3          db 'correct',0          ; DATA XREF: .text:00001138o
.text:00001144                 align 8
.text:00001148
.text:00001148 ; =============== S U B R O U T I N E =======================================
.text:00001148
.text:00001148 ; Attributes: bp-based frame
.text:00001148
.text:00001148 ; int __cdecl hmacsha1_96_genresult(int, void *)
.text:00001148 _hmacsha1_96_genresult proc near        ; DATA XREF: .rdata:000000F4o
.text:00001148                                         ; .rdata:00000154o
.text:00001148
.text:00001148 var_20          = dword ptr -20h
.text:00001148 var_1C          = dword ptr -1Ch
.text:00001148 var_18          = dword ptr -18h
.text:00001148 var_14          = dword ptr -14h
.text:00001148 var_10          = dword ptr -10h
.text:00001148 var_C           = dword ptr -0Ch
.text:00001148 var_8           = dword ptr -8
.text:00001148 var_4           = dword ptr -4
.text:00001148 arg_0           = dword ptr  8
.text:00001148 arg_4           = dword ptr  0Ch
.text:00001148
.text:00001148                 push    ebp
.text:00001149                 mov     ebp, esp
.text:0000114B                 sub     esp, 20h
.text:0000114E                 mov     eax, 0CCCCCCCCh
.text:00001153                 mov     [ebp+var_20], eax
.text:00001156                 mov     [ebp+var_1C], eax
.text:00001159                 mov     [ebp+var_18], eax
.text:0000115C                 mov     [ebp+var_14], eax
.text:0000115F                 mov     [ebp+var_10], eax
.text:00001162                 mov     [ebp+var_C], eax
.text:00001165                 mov     [ebp+var_8], eax
.text:00001168                 mov     [ebp+var_4], eax
.text:0000116B                 mov     eax, dword ptr ds:___security_cookie
.text:00001170                 xor     eax, ebp
.text:00001172                 mov     [ebp+var_4], eax
.text:00001175                 lea     eax, [ebp+var_1C]
.text:00001178                 push    eax
.text:00001179                 mov     ecx, [ebp+arg_0]
.text:0000117C                 push    ecx
.text:0000117D                 call    _hmacsha1_genresult
.text:00001182                 add     esp, 8
.text:00001185                 push    0Ch             ; size_t
.text:00001187                 lea     edx, [ebp+var_1C]
.text:0000118A                 push    edx             ; void *
.text:0000118B                 mov     eax, [ebp+arg_4]
.text:0000118E                 push    eax             ; void *
.text:0000118F                 call    _memcpy
.text:00001194                 add     esp, 0Ch
.text:00001197                 push    edx
.text:00001198                 mov     ecx, ebp
.text:0000119A                 push    eax
.text:0000119B                 lea     edx, $LN5_4
.text:000011A1                 call    @_RTC_CheckStackVars@8
.text:000011A6                 pop     eax
.text:000011A7                 pop     edx
.text:000011A8                 mov     ecx, [ebp+var_4]
.text:000011AB                 xor     ecx, ebp
.text:000011AD                 call    @__security_check_cookie@4
.text:000011B2                 add     esp, 20h
.text:000011B5                 cmp     ebp, esp
.text:000011B7                 call    __RTC_CheckEsp
.text:000011BC                 mov     esp, ebp
.text:000011BE                 pop     ebp
.text:000011BF                 retn
.text:000011BF _hmacsha1_96_genresult endp
.text:000011BF
.text:000011BF ; ---------------------------------------------------------------------------
.text:000011C0 $LN5_4          dd 1                    ; DATA XREF: _hmacsha1_96_genresult+53o
.text:000011C4                 dd offset $LN4_4
.text:000011C8 $LN4_4          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:000011C4o
.text:000011D0                 dd offset $LN3_4        ; "full"
.text:000011D4 $LN3_4          db 'full',0             ; DATA XREF: .text:000011D0o
.text:000011D9                 db 0Fh dup(0CCh)
.text:000011E8
.text:000011E8 ; =============== S U B R O U T I N E =======================================
.text:000011E8
.text:000011E8 ; Attributes: bp-based frame
.text:000011E8
.text:000011E8 ; int __cdecl sha1_96_generate(int, int, size_t, int)
.text:000011E8 _sha1_96_generate proc near             ; DATA XREF: .rdata:000000E4o
.text:000011E8                                         ; .rdata:00000144o
.text:000011E8
.text:000011E8 var_20          = dword ptr -20h
.text:000011E8 var_1C          = dword ptr -1Ch
.text:000011E8 var_18          = dword ptr -18h
.text:000011E8 var_14          = dword ptr -14h
.text:000011E8 var_10          = dword ptr -10h
.text:000011E8 var_C           = dword ptr -0Ch
.text:000011E8 var_8           = dword ptr -8
.text:000011E8 var_4           = dword ptr -4
.text:000011E8 arg_0           = dword ptr  8
.text:000011E8 arg_4           = dword ptr  0Ch
.text:000011E8 arg_8           = dword ptr  10h
.text:000011E8 arg_C           = dword ptr  14h
.text:000011E8
.text:000011E8                 push    ebp
.text:000011E9                 mov     ebp, esp
.text:000011EB                 sub     esp, 20h
.text:000011EE                 mov     eax, 0CCCCCCCCh
.text:000011F3                 mov     [ebp+var_20], eax
.text:000011F6                 mov     [ebp+var_1C], eax
.text:000011F9                 mov     [ebp+var_18], eax
.text:000011FC                 mov     [ebp+var_14], eax
.text:000011FF                 mov     [ebp+var_10], eax
.text:00001202                 mov     [ebp+var_C], eax
.text:00001205                 mov     [ebp+var_8], eax
.text:00001208                 mov     [ebp+var_4], eax
.text:0000120B                 mov     eax, dword ptr ds:___security_cookie
.text:00001210                 xor     eax, ebp
.text:00001212                 mov     [ebp+var_4], eax
.text:00001215                 lea     eax, [ebp+var_1C]
.text:00001218                 push    eax             ; int
.text:00001219                 mov     ecx, [ebp+arg_C]
.text:0000121C                 push    ecx             ; int
.text:0000121D                 mov     edx, [ebp+arg_8]
.text:00001220                 push    edx             ; size_t
.text:00001221                 mov     eax, [ebp+arg_4]
.text:00001224                 push    eax             ; int
.text:00001225                 mov     ecx, [ebp+arg_0]
.text:00001228                 push    ecx             ; int
.text:00001229                 call    _sha1_do_hmac
.text:0000122E                 add     esp, 14h
.text:00001231                 push    0Ch             ; size_t
.text:00001233                 lea     edx, [ebp+var_1C]
.text:00001236                 push    edx             ; void *
.text:00001237                 mov     eax, [ebp+arg_4]
.text:0000123A                 add     eax, [ebp+arg_8]
.text:0000123D                 push    eax             ; void *
.text:0000123E                 call    _memcpy
.text:00001243                 add     esp, 0Ch
.text:00001246                 push    edx
.text:00001247                 mov     ecx, ebp
.text:00001249                 push    eax
.text:0000124A                 lea     edx, $LN5_5
.text:00001250                 call    @_RTC_CheckStackVars@8
.text:00001255                 pop     eax
.text:00001256                 pop     edx
.text:00001257                 mov     ecx, [ebp+var_4]
.text:0000125A                 xor     ecx, ebp
.text:0000125C                 call    @__security_check_cookie@4
.text:00001261                 add     esp, 20h
.text:00001264                 cmp     ebp, esp
.text:00001266                 call    __RTC_CheckEsp
.text:0000126B                 mov     esp, ebp
.text:0000126D                 pop     ebp
.text:0000126E                 retn
.text:0000126E _sha1_96_generate endp
.text:0000126E
.text:0000126E ; ---------------------------------------------------------------------------
.text:0000126F                 align 10h
.text:00001270 $LN5_5          dd 1                    ; DATA XREF: _sha1_96_generate+62o
.text:00001274                 dd offset $LN4_5
.text:00001278 $LN4_5          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:00001274o
.text:00001280                 dd offset $LN3_5        ; "full"
.text:00001284 $LN3_5          db 'full',0             ; DATA XREF: .text:00001280o
.text:00001289                 db 0Fh dup(0CCh)
.text:00001298
.text:00001298 ; =============== S U B R O U T I N E =======================================
.text:00001298
.text:00001298 ; Attributes: bp-based frame
.text:00001298
.text:00001298 ; int __cdecl hmacsha1_96_verresult(int, void *)
.text:00001298 _hmacsha1_96_verresult proc near        ; DATA XREF: .rdata:000000F8o
.text:00001298                                         ; .rdata:00000158o
.text:00001298
.text:00001298 var_20          = dword ptr -20h
.text:00001298 var_1C          = dword ptr -1Ch
.text:00001298 var_18          = dword ptr -18h
.text:00001298 var_14          = dword ptr -14h
.text:00001298 var_10          = dword ptr -10h
.text:00001298 var_C           = dword ptr -0Ch
.text:00001298 var_8           = dword ptr -8
.text:00001298 var_4           = dword ptr -4
.text:00001298 arg_0           = dword ptr  8
.text:00001298 arg_4           = dword ptr  0Ch
.text:00001298
.text:00001298                 push    ebp
.text:00001299                 mov     ebp, esp
.text:0000129B                 sub     esp, 20h
.text:0000129E                 mov     eax, 0CCCCCCCCh
.text:000012A3                 mov     [ebp+var_20], eax
.text:000012A6                 mov     [ebp+var_1C], eax
.text:000012A9                 mov     [ebp+var_18], eax
.text:000012AC                 mov     [ebp+var_14], eax
.text:000012AF                 mov     [ebp+var_10], eax
.text:000012B2                 mov     [ebp+var_C], eax
.text:000012B5                 mov     [ebp+var_8], eax
.text:000012B8                 mov     [ebp+var_4], eax
.text:000012BB                 mov     eax, dword ptr ds:___security_cookie
.text:000012C0                 xor     eax, ebp
.text:000012C2                 mov     [ebp+var_4], eax
.text:000012C5                 lea     eax, [ebp+var_1C]
.text:000012C8                 push    eax
.text:000012C9                 mov     ecx, [ebp+arg_0]
.text:000012CC                 push    ecx
.text:000012CD                 call    _hmacsha1_genresult
.text:000012D2                 add     esp, 8
.text:000012D5                 push    0Ch             ; size_t
.text:000012D7                 mov     edx, [ebp+arg_4]
.text:000012DA                 push    edx             ; void *
.text:000012DB                 lea     eax, [ebp+var_1C]
.text:000012DE                 push    eax             ; void *
.text:000012DF                 call    _memcmp
.text:000012E4                 add     esp, 0Ch
.text:000012E7                 neg     eax
.text:000012E9                 sbb     eax, eax
.text:000012EB                 add     eax, 1
.text:000012EE                 push    edx
.text:000012EF                 mov     ecx, ebp
.text:000012F1                 push    eax
.text:000012F2                 lea     edx, $LN5_6
.text:000012F8                 call    @_RTC_CheckStackVars@8
.text:000012FD                 pop     eax
.text:000012FE                 pop     edx
.text:000012FF                 mov     ecx, [ebp+var_4]
.text:00001302                 xor     ecx, ebp
.text:00001304                 call    @__security_check_cookie@4
.text:00001309                 add     esp, 20h
.text:0000130C                 cmp     ebp, esp
.text:0000130E                 call    __RTC_CheckEsp
.text:00001313                 mov     esp, ebp
.text:00001315                 pop     ebp
.text:00001316                 retn
.text:00001316 _hmacsha1_96_verresult endp
.text:00001316
.text:00001316 ; ---------------------------------------------------------------------------
.text:00001317                 align 4
.text:00001318 $LN5_6          dd 1                    ; DATA XREF: _hmacsha1_96_verresult+5Ao
.text:0000131C                 dd offset $LN4_6
.text:00001320 $LN4_6          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:0000131Co
.text:00001328                 dd offset $LN3_6        ; "correct"
.text:0000132C $LN3_6          db 'correct',0          ; DATA XREF: .text:00001328o
.text:00001334                 align 8
.text:00001338
.text:00001338 ; =============== S U B R O U T I N E =======================================
.text:00001338
.text:00001338 ; Attributes: bp-based frame
.text:00001338
.text:00001338 ; int __cdecl sha1_96_verify(int, int, size_t, int)
.text:00001338 _sha1_96_verify proc near               ; DATA XREF: .rdata:000000E8o
.text:00001338                                         ; .rdata:00000148o
.text:00001338
.text:00001338 var_20          = dword ptr -20h
.text:00001338 var_1C          = dword ptr -1Ch
.text:00001338 var_18          = dword ptr -18h
.text:00001338 var_14          = dword ptr -14h
.text:00001338 var_10          = dword ptr -10h
.text:00001338 var_C           = dword ptr -0Ch
.text:00001338 var_8           = dword ptr -8
.text:00001338 var_4           = dword ptr -4
.text:00001338 arg_0           = dword ptr  8
.text:00001338 arg_4           = dword ptr  0Ch
.text:00001338 arg_8           = dword ptr  10h
.text:00001338 arg_C           = dword ptr  14h
.text:00001338
.text:00001338                 push    ebp
.text:00001339                 mov     ebp, esp
.text:0000133B                 sub     esp, 20h
.text:0000133E                 mov     eax, 0CCCCCCCCh
.text:00001343                 mov     [ebp+var_20], eax
.text:00001346                 mov     [ebp+var_1C], eax
.text:00001349                 mov     [ebp+var_18], eax
.text:0000134C                 mov     [ebp+var_14], eax
.text:0000134F                 mov     [ebp+var_10], eax
.text:00001352                 mov     [ebp+var_C], eax
.text:00001355                 mov     [ebp+var_8], eax
.text:00001358                 mov     [ebp+var_4], eax
.text:0000135B                 mov     eax, dword ptr ds:___security_cookie
.text:00001360                 xor     eax, ebp
.text:00001362                 mov     [ebp+var_4], eax
.text:00001365                 lea     eax, [ebp+var_1C]
.text:00001368                 push    eax             ; int
.text:00001369                 mov     ecx, [ebp+arg_C]
.text:0000136C                 push    ecx             ; int
.text:0000136D                 mov     edx, [ebp+arg_8]
.text:00001370                 push    edx             ; size_t
.text:00001371                 mov     eax, [ebp+arg_4]
.text:00001374                 push    eax             ; int
.text:00001375                 mov     ecx, [ebp+arg_0]
.text:00001378                 push    ecx             ; int
.text:00001379                 call    _sha1_do_hmac
.text:0000137E                 add     esp, 14h
.text:00001381                 push    0Ch             ; size_t
.text:00001383                 mov     edx, [ebp+arg_4]
.text:00001386                 add     edx, [ebp+arg_8]
.text:00001389                 push    edx             ; void *
.text:0000138A                 lea     eax, [ebp+var_1C]
.text:0000138D                 push    eax             ; void *
.text:0000138E                 call    _memcmp
.text:00001393                 add     esp, 0Ch
.text:00001396                 neg     eax
.text:00001398                 sbb     eax, eax
.text:0000139A                 add     eax, 1
.text:0000139D                 push    edx
.text:0000139E                 mov     ecx, ebp
.text:000013A0                 push    eax
.text:000013A1                 lea     edx, $LN5_7
.text:000013A7                 call    @_RTC_CheckStackVars@8
.text:000013AC                 pop     eax
.text:000013AD                 pop     edx
.text:000013AE                 mov     ecx, [ebp+var_4]
.text:000013B1                 xor     ecx, ebp
.text:000013B3                 call    @__security_check_cookie@4
.text:000013B8                 add     esp, 20h
.text:000013BB                 cmp     ebp, esp
.text:000013BD                 call    __RTC_CheckEsp
.text:000013C2                 mov     esp, ebp
.text:000013C4                 pop     ebp
.text:000013C5                 retn
.text:000013C5 _sha1_96_verify endp
.text:000013C5
.text:000013C5 ; ---------------------------------------------------------------------------
.text:000013C6                 align 4
.text:000013C8 $LN5_7          dd 1                    ; DATA XREF: _sha1_96_verify+69o
.text:000013CC                 dd offset $LN4_7
.text:000013D0 $LN4_7          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:000013CCo
.text:000013D8                 dd offset $LN3_7        ; "correct"
.text:000013DC $LN3_7          db 'correct',0          ; DATA XREF: .text:000013D8o
.text:000013E4                 align 8
.text:000013E8
.text:000013E8 ; =============== S U B R O U T I N E =======================================
.text:000013E8
.text:000013E8 ; Attributes: bp-based frame
.text:000013E8
.text:000013E8 ; int __cdecl hmac_sha1_simple(int, int, int, size_t, int)
.text:000013E8                 public _hmac_sha1_simple
.text:000013E8 _hmac_sha1_simple proc near
.text:000013E8
.text:000013E8 var_E8          = byte ptr -0E8h
.text:000013E8 var_E4          = dword ptr -0E4h
.text:000013E8 var_C8          = dword ptr -0C8h
.text:000013E8 var_68          = dword ptr -68h
.text:000013E8 var_4           = dword ptr -4
.text:000013E8 arg_0           = dword ptr  8
.text:000013E8 arg_4           = dword ptr  0Ch
.text:000013E8 arg_8           = dword ptr  10h
.text:000013E8 arg_C           = dword ptr  14h
.text:000013E8 arg_10          = dword ptr  18h
.text:000013E8
.text:000013E8                 push    ebp
.text:000013E9                 mov     ebp, esp
.text:000013EB                 sub     esp, 0E8h
.text:000013F1                 push    edi
.text:000013F2                 lea     edi, [ebp+var_E8]
.text:000013F8                 mov     ecx, 3Ah ; ':'
.text:000013FD                 mov     eax, 0CCCCCCCCh
.text:00001402                 rep stosd
.text:00001404                 mov     eax, dword ptr ds:___security_cookie
.text:00001409                 xor     eax, ebp
.text:0000140B                 mov     [ebp+var_4], eax
.text:0000140E                 mov     eax, [ebp+arg_4]
.text:00001411                 push    eax
.text:00001412                 mov     ecx, [ebp+arg_0]
.text:00001415                 push    ecx
.text:00001416                 lea     edx, [ebp+var_C8]
.text:0000141C                 push    edx
.text:0000141D                 call    _sha1_key_internal
.text:00001422                 add     esp, 0Ch
.text:00001425                 mov     eax, [ebp+arg_C]
.text:00001428                 push    eax             ; size_t
.text:00001429                 mov     ecx, [ebp+arg_8]
.text:0000142C                 push    ecx             ; int
.text:0000142D                 lea     edx, [ebp+var_C8]
.text:00001433                 push    edx             ; int
.text:00001434                 call    _SHA_Bytes
.text:00001439                 add     esp, 0Ch
.text:0000143C                 lea     eax, [ebp+var_E4]
.text:00001442                 push    eax
.text:00001443                 lea     ecx, [ebp+var_C8]
.text:00001449                 push    ecx
.text:0000144A                 call    _SHA_Final
.text:0000144F                 add     esp, 8
.text:00001452                 push    14h             ; size_t
.text:00001454                 lea     edx, [ebp+var_E4]
.text:0000145A                 push    edx             ; int
.text:0000145B                 lea     eax, [ebp+var_68]
.text:0000145E                 push    eax             ; int
.text:0000145F                 call    _SHA_Bytes
.text:00001464                 add     esp, 0Ch
.text:00001467                 mov     ecx, [ebp+arg_10]
.text:0000146A                 push    ecx
.text:0000146B                 lea     edx, [ebp+var_68]
.text:0000146E                 push    edx
.text:0000146F                 call    _SHA_Final
.text:00001474                 add     esp, 8
.text:00001477                 push    edx
.text:00001478                 mov     ecx, ebp
.text:0000147A                 push    eax
.text:0000147B                 lea     edx, $LN6_0
.text:00001481                 call    @_RTC_CheckStackVars@8
.text:00001486                 pop     eax
.text:00001487                 pop     edx
.text:00001488                 pop     edi
.text:00001489                 mov     ecx, [ebp+var_4]
.text:0000148C                 xor     ecx, ebp
.text:0000148E                 call    @__security_check_cookie@4
.text:00001493                 add     esp, 0E8h
.text:00001499                 cmp     ebp, esp
.text:0000149B                 call    __RTC_CheckEsp
.text:000014A0                 mov     esp, ebp
.text:000014A2                 pop     ebp
.text:000014A3                 retn
.text:000014A3 _hmac_sha1_simple endp
.text:000014A3
.text:000014A3 ; ---------------------------------------------------------------------------
.text:000014A4 $LN6_0          dd 2                    ; DATA XREF: _hmac_sha1_simple+93o
.text:000014A8                 dd offset $LN5_8
.text:000014AC $LN5_8          dd 0FFFFFF38h, 0C0h     ; DATA XREF: .text:000014A8o
.text:000014B4                 dd offset $LN3_8        ; "states"
.text:000014B8                 dd 0FFFFFF1Ch, 14h
.text:000014C0                 dd offset $LN4_8        ; "intermediate"
.text:000014C4 $LN4_8          db 'intermediate',0     ; DATA XREF: .text:000014C0o
.text:000014D1 $LN3_8          db 'states',0           ; DATA XREF: .text:000014B4o
.text:000014D1 _text           ends
.text:000014D1
.rtc$TMZ:000014D8 ; ===========================================================================
.rtc$TMZ:000014D8
.rtc$TMZ:000014D8 ; Segment type: Pure data
.rtc$TMZ:000014D8 ; Segment permissions: Read
.rtc$TMZ:000014D8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000014D8                 assume cs:_rtc$TMZ
.rtc$TMZ:000014D8                 ;org 14D8h
.rtc$TMZ:000014D8 ; COMDAT (pick any)
.rtc$TMZ:000014D8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000014D8 _rtc$TMZ        ends
.rtc$TMZ:000014D8
.rtc$IMZ:000014DC ; ===========================================================================
.rtc$IMZ:000014DC
.rtc$IMZ:000014DC ; Segment type: Pure data
.rtc$IMZ:000014DC ; Segment permissions: Read
.rtc$IMZ:000014DC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000014DC                 assume cs:_rtc$IMZ
.rtc$IMZ:000014DC                 ;org 14DCh
.rtc$IMZ:000014DC ; COMDAT (pick any)
.rtc$IMZ:000014DC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000014DC _rtc$IMZ        ends
.rtc$IMZ:000014DC
UNDEF:000014E0 ; ===========================================================================
UNDEF:000014E0
UNDEF:000014E0 ; Segment type: Externs
UNDEF:000014E0 ; UNDEF
UNDEF:000014E0                 extrn ___security_cookie:near ; DATA XREF: _SHATransform+1Cr
UNDEF:000014E0                                         ; _SHA_Bytes+16r ...
UNDEF:000014E4                 extrn @__security_check_cookie@4:near
UNDEF:000014E4                                         ; CODE XREF: _SHATransform+4ABp
UNDEF:000014E4                                         ; _SHA_Bytes+1ABp ...
UNDEF:000014E8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000014E8                                         ; CODE XREF: _SHATransform+49Ep
UNDEF:000014E8                                         ; _SHA_Bytes+19Ep ...
UNDEF:000014EC                 extrn __RTC_Shutdown:near
UNDEF:000014EC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000014F0                 extrn __RTC_InitBase:near
UNDEF:000014F0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000014F4                 extrn __RTC_CheckEsp:near ; CODE XREF: _SHA_Init+2Fp
UNDEF:000014F4                                         ; _SHA_Bytes+1B5p ...
UNDEF:000014F8 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:000014F8                 extrn _memcpy:near      ; CODE XREF: _SHA_Bytes+81p
UNDEF:000014F8                                         ; _SHA_Bytes+CDp ...
UNDEF:000014FC ; void *__cdecl memset(void *, int, size_t)
UNDEF:000014FC                 extrn _memset:near      ; CODE XREF: _SHA_Final+74p
UNDEF:000014FC                                         ; _sha1_key_internal+2Ep ...
UNDEF:00001500                 extrn _safemalloc:near  ; CODE XREF: _sha1_init+Fp
UNDEF:00001500                                         ; _sha1_make_context+7p
UNDEF:00001504                 extrn _safefree:near    ; CODE XREF: _sha1_final+25p
UNDEF:00001504                                         ; _sha1_free_context+7p
UNDEF:00001508                 extrn _smemclr:near     ; CODE XREF: _sha1_key_internal+106p
UNDEF:0000150C ; int __cdecl memcmp(const void *, const void *, size_t)
UNDEF:0000150C                 extrn _memcmp:near      ; CODE XREF: _hmacsha1_verresult+47p
UNDEF:0000150C                                         ; _sha1_verify+56p ...
UNDEF:0000150C
UNDEF:0000150C
UNDEF:0000150C                 end