.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 9FCBDE54ECB32CA71BF37E6B1352C44F
.bss:00000000 ; Input CRC32 : E5E47E72
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winsecur.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000 ; PSID `make_private_security_descriptor'::`2'::usersid
.bss:00000000 ?usersid@?1??make_private_security_descriptor@@9@9 dd ?
.bss:00000000                                         ; DATA XREF: _make_private_security_descriptor:loc_810r
.bss:00000000                                         ; _make_private_security_descriptor+AAw ...
.bss:00000004 ; HMODULE `got_advapi'::`2'::advapi
.bss:00000004 ?advapi@?1??got_advapi@@9@9 dd ?        ; DATA XREF: _got_advapi+45w
.bss:00000004                                         ; _got_advapi+4Ar ...
.bss:00000008 ; `got_advapi'::`2'::successful
.bss:00000008 ?successful@?1??got_advapi@@9@9 dd ?    ; DATA XREF: _got_advapi+202w
.bss:00000008                                         ; _got_advapi:loc_46Br
.bss:0000000C ; HMODULE `got_crypt'::`2'::crypt
.bss:0000000C ?crypt@?1??got_crypt@@9@9 dd ?          ; DATA XREF: _got_crypt+35w
.bss:0000000C                                         ; _got_crypt+3Ar ...
.bss:00000010 ; PSID `make_private_security_descriptor'::`2'::worldsid
.bss:00000010 ?worldsid@?1??make_private_security_descriptor@@9@9 dd ?
.bss:00000010                                         ; DATA XREF: _make_private_security_descriptor:loc_85Cr
.bss:00000010                                         ; _make_private_security_descriptor+F3o ...
.bss:00000014 ; PSID `make_private_security_descriptor'::`2'::networksid
.bss:00000014 ?networksid@?1??make_private_security_descriptor@@9@9 dd ?
.bss:00000014                                         ; DATA XREF: _make_private_security_descriptor:loc_8C3r
.bss:00000014                                         ; _make_private_security_descriptor+15Ao ...
.bss:00000018 ; `got_crypt'::`2'::successful
.bss:00000018 ?successful@?1??got_crypt@@9@9 dd ?     ; DATA XREF: _got_crypt+97w
.bss:00000018                                         ; _got_crypt:loc_521r
.bss:0000001C ; `got_advapi'::`2'::attempted
.bss:0000001C ?attempted@?1??got_advapi@@9@9 dd ?     ; DATA XREF: _got_advapi+21r
.bss:0000001C                                         ; _got_advapi+2Ew
.bss:00000020 ; `got_crypt'::`2'::attempted
.bss:00000020 ?attempted@?1??got_crypt@@9@9 dd ?      ; DATA XREF: _got_crypt+15r
.bss:00000020                                         ; _got_crypt+1Ew
.bss:00000020 _bss            ends
.bss:00000020
.data:00000024 ; ===========================================================================
.data:00000024
.data:00000024 ; Segment type: Pure data
.data:00000024 ; Segment permissions: Read/Write
.data:00000024 _data           segment dword public 'DATA' use32
.data:00000024                 assume cs:_data
.data:00000024                 ;org 24h
.data:00000024 $SG86400        db 'advapi32.dll',0     ; DATA XREF: _got_advapi+38o
.data:00000031                 align 4
.data:00000034 ; CHAR _SG86413[]
.data:00000034 $SG86413        db 'GetSecurityInfo',0  ; DATA XREF: _got_advapi+62o
.data:00000044 ; CHAR _SG86414[]
.data:00000044 $SG86414        db 'OpenProcessToken',0 ; DATA XREF: _got_advapi+A7o
.data:00000055                 align 4
.data:00000058 ; CHAR _SG86415[]
.data:00000058 $SG86415        db 'GetTokenInformation',0 ; DATA XREF: _got_advapi+ECo
.data:0000006C ; CHAR _SG86416[]
.data:0000006C $SG86416        db 'InitializeSecurityDescriptor',0
.data:0000006C                                         ; DATA XREF: _got_advapi+132o
.data:00000089                 align 4
.data:0000008C ; CHAR _SG86417[]
.data:0000008C $SG86417        db 'SetSecurityDescriptorOwner',0
.data:0000008C                                         ; DATA XREF: _got_advapi+177o
.data:000000A7                 align 4
.data:000000A8 ; CHAR _SG86418[]
.data:000000A8 $SG86418        db 'SetEntriesInAclA',0 ; DATA XREF: _got_advapi+1B8o
.data:000000B9                 align 4
.data:000000BC $SG86428        db 'crypt32.dll',0      ; DATA XREF: _got_crypt+28o
.data:000000C8 ; CHAR _SG86431[]
.data:000000C8 $SG86431        db 'CryptProtectMemory',0 ; DATA XREF: _got_crypt+4Eo
.data:000000DB                 align 4
.data:000000DC $SG86492        db 'unable to load advapi32.dll',0
.data:000000DC                                         ; DATA XREF: _make_private_security_descriptor+85o
.data:000000F8 $SG86497        db 'unable to construct SID for current user: %s',0
.data:000000F8                                         ; DATA XREF: _make_private_security_descriptor+D1o
.data:00000125                 align 4
.data:00000128 $SG86500        db 'unable to construct SID for world: %s',0
.data:00000128                                         ; DATA XREF: _make_private_security_descriptor+138o
.data:0000014E                 align 10h
.data:00000150 $SG86503        db 'unable to construct SID for local same-user access only: %s',0
.data:00000150                                         ; DATA XREF: _make_private_security_descriptor+19Fo
.data:0000018C $SG86511        db 'unable to construct ACL: %s',0
.data:0000018C                                         ; DATA XREF: _make_private_security_descriptor+27Fo
.data:000001A8 $SG86515        db 'unable to allocate security descriptor: %s',0
.data:000001A8                                         ; DATA XREF: _make_private_security_descriptor+2CFo
.data:000001D3                 align 4
.data:000001D4 $SG86517        db 'unable to initialise security descriptor: %s',0
.data:000001D4                                         ; DATA XREF: _make_private_security_descriptor+31Ao
.data:00000201                 align 4
.data:00000204 $SG86519        db 'unable to set owner in security descriptor: %s',0
.data:00000204                                         ; DATA XREF: _make_private_security_descriptor+36Co
.data:00000233                 align 4
.data:00000234 $SG86521        db 'unable to set DACL in security descriptor: %s',0
.data:00000234                                         ; DATA XREF: _make_private_security_descriptor+3BCo
.data:00000262                 align 4
.data:00000262 _data           ends
.data:00000262
.text:00000264 ; ===========================================================================
.text:00000264
.text:00000264 ; Segment type: Pure code
.text:00000264 ; Segment permissions: Read/Execute
.text:00000264 _text           segment para public 'CODE' use32
.text:00000264                 assume cs:_text
.text:00000264                 ;org 264h
.text:00000264                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000264
.text:00000264 ; =============== S U B R O U T I N E =======================================
.text:00000264
.text:00000264 ; Attributes: bp-based frame
.text:00000264
.text:00000264                 public _got_advapi
.text:00000264 _got_advapi     proc near               ; CODE XREF: _get_user_sid+3Ap
.text:00000264                                         ; _make_private_security_descriptor+7Cp
.text:00000264
.text:00000264 var_1C          = dword ptr -1Ch
.text:00000264 var_18          = dword ptr -18h
.text:00000264 var_14          = dword ptr -14h
.text:00000264 var_10          = dword ptr -10h
.text:00000264 var_C           = dword ptr -0Ch
.text:00000264 var_8           = dword ptr -8
.text:00000264 var_4           = dword ptr -4
.text:00000264
.text:00000264                 push    ebp
.text:00000265                 mov     ebp, esp
.text:00000267                 sub     esp, 1Ch
.text:0000026A                 push    esi
.text:0000026B                 mov     eax, 0CCCCCCCCh
.text:00000270                 mov     [ebp+var_1C], eax
.text:00000273                 mov     [ebp+var_18], eax
.text:00000276                 mov     [ebp+var_14], eax
.text:00000279                 mov     [ebp+var_10], eax
.text:0000027C                 mov     [ebp+var_C], eax
.text:0000027F                 mov     [ebp+var_8], eax
.text:00000282                 mov     [ebp+var_4], eax
.text:00000285                 cmp     ds:?attempted@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::attempted
.text:0000028C                 jnz     loc_46B
.text:00000292                 mov     ds:?attempted@?1??got_advapi@@9@9, 1 ; `got_advapi'::`2'::attempted
.text:0000029C                 push    offset $SG86400 ; "advapi32.dll"
.text:000002A1                 call    _load_system32_dll
.text:000002A6                 add     esp, 4
.text:000002A9                 mov     ds:?advapi@?1??got_advapi@@9@9, eax ; `got_advapi'::`2'::advapi
.text:000002AE                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:000002B5                 jz      loc_45C
.text:000002BB                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:000002C2                 jz      short loc_2E3
.text:000002C4                 mov     esi, esp
.text:000002C6                 push    offset $SG86413 ; "GetSecurityInfo"
.text:000002CB                 mov     eax, ds:?advapi@?1??got_advapi@@9@9 ; `got_advapi'::`2'::advapi
.text:000002D0                 push    eax             ; hModule
.text:000002D1                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000002D7                 cmp     esi, esp
.text:000002D9                 call    __RTC_CheckEsp
.text:000002DE                 mov     [ebp+var_4], eax
.text:000002E1                 jmp     short loc_2EA
.text:000002E3 ; ---------------------------------------------------------------------------
.text:000002E3
.text:000002E3 loc_2E3:                                ; CODE XREF: _got_advapi+5Ej
.text:000002E3                 mov     [ebp+var_4], 0
.text:000002EA
.text:000002EA loc_2EA:                                ; CODE XREF: _got_advapi+7Dj
.text:000002EA                 mov     ecx, [ebp+var_4]
.text:000002ED                 mov     dword ptr ds:_p_GetSecurityInfo, ecx
.text:000002F3                 cmp     dword ptr ds:_p_GetSecurityInfo, 0
.text:000002FA                 jz      loc_45C
.text:00000300                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:00000307                 jz      short loc_329
.text:00000309                 mov     esi, esp
.text:0000030B                 push    offset $SG86414 ; "OpenProcessToken"
.text:00000310                 mov     edx, ds:?advapi@?1??got_advapi@@9@9 ; `got_advapi'::`2'::advapi
.text:00000316                 push    edx             ; hModule
.text:00000317                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000031D                 cmp     esi, esp
.text:0000031F                 call    __RTC_CheckEsp
.text:00000324                 mov     [ebp+var_8], eax
.text:00000327                 jmp     short loc_330
.text:00000329 ; ---------------------------------------------------------------------------
.text:00000329
.text:00000329 loc_329:                                ; CODE XREF: _got_advapi+A3j
.text:00000329                 mov     [ebp+var_8], 0
.text:00000330
.text:00000330 loc_330:                                ; CODE XREF: _got_advapi+C3j
.text:00000330                 mov     eax, [ebp+var_8]
.text:00000333                 mov     dword ptr ds:_p_OpenProcessToken, eax
.text:00000338                 cmp     dword ptr ds:_p_OpenProcessToken, 0
.text:0000033F                 jz      loc_45C
.text:00000345                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:0000034C                 jz      short loc_36E
.text:0000034E                 mov     esi, esp
.text:00000350                 push    offset $SG86415 ; "GetTokenInformation"
.text:00000355                 mov     ecx, ds:?advapi@?1??got_advapi@@9@9 ; `got_advapi'::`2'::advapi
.text:0000035B                 push    ecx             ; hModule
.text:0000035C                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00000362                 cmp     esi, esp
.text:00000364                 call    __RTC_CheckEsp
.text:00000369                 mov     [ebp+var_C], eax
.text:0000036C                 jmp     short loc_375
.text:0000036E ; ---------------------------------------------------------------------------
.text:0000036E
.text:0000036E loc_36E:                                ; CODE XREF: _got_advapi+E8j
.text:0000036E                 mov     [ebp+var_C], 0
.text:00000375
.text:00000375 loc_375:                                ; CODE XREF: _got_advapi+108j
.text:00000375                 mov     edx, [ebp+var_C]
.text:00000378                 mov     dword ptr ds:_p_GetTokenInformation, edx
.text:0000037E                 cmp     dword ptr ds:_p_GetTokenInformation, 0
.text:00000385                 jz      loc_45C
.text:0000038B                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:00000392                 jz      short loc_3B3
.text:00000394                 mov     esi, esp
.text:00000396                 push    offset $SG86416 ; "InitializeSecurityDescriptor"
.text:0000039B                 mov     eax, ds:?advapi@?1??got_advapi@@9@9 ; `got_advapi'::`2'::advapi
.text:000003A0                 push    eax             ; hModule
.text:000003A1                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000003A7                 cmp     esi, esp
.text:000003A9                 call    __RTC_CheckEsp
.text:000003AE                 mov     [ebp+var_10], eax
.text:000003B1                 jmp     short loc_3BA
.text:000003B3 ; ---------------------------------------------------------------------------
.text:000003B3
.text:000003B3 loc_3B3:                                ; CODE XREF: _got_advapi+12Ej
.text:000003B3                 mov     [ebp+var_10], 0
.text:000003BA
.text:000003BA loc_3BA:                                ; CODE XREF: _got_advapi+14Dj
.text:000003BA                 mov     ecx, [ebp+var_10]
.text:000003BD                 mov     dword ptr ds:_p_InitializeSecurityDescriptor, ecx
.text:000003C3                 cmp     dword ptr ds:_p_InitializeSecurityDescriptor, 0
.text:000003CA                 jz      loc_45C
.text:000003D0                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:000003D7                 jz      short loc_3F9
.text:000003D9                 mov     esi, esp
.text:000003DB                 push    offset $SG86417 ; "SetSecurityDescriptorOwner"
.text:000003E0                 mov     edx, ds:?advapi@?1??got_advapi@@9@9 ; `got_advapi'::`2'::advapi
.text:000003E6                 push    edx             ; hModule
.text:000003E7                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000003ED                 cmp     esi, esp
.text:000003EF                 call    __RTC_CheckEsp
.text:000003F4                 mov     [ebp+var_14], eax
.text:000003F7                 jmp     short loc_400
.text:000003F9 ; ---------------------------------------------------------------------------
.text:000003F9
.text:000003F9 loc_3F9:                                ; CODE XREF: _got_advapi+173j
.text:000003F9                 mov     [ebp+var_14], 0
.text:00000400
.text:00000400 loc_400:                                ; CODE XREF: _got_advapi+193j
.text:00000400                 mov     eax, [ebp+var_14]
.text:00000403                 mov     dword ptr ds:_p_SetSecurityDescriptorOwner, eax
.text:00000408                 cmp     dword ptr ds:_p_SetSecurityDescriptorOwner, 0
.text:0000040F                 jz      short loc_45C
.text:00000411                 cmp     ds:?advapi@?1??got_advapi@@9@9, 0 ; `got_advapi'::`2'::advapi
.text:00000418                 jz      short loc_43A
.text:0000041A                 mov     esi, esp
.text:0000041C                 push    offset $SG86418 ; "SetEntriesInAclA"
.text:00000421                 mov     ecx, ds:?advapi@?1??got_advapi@@9@9 ; `got_advapi'::`2'::advapi
.text:00000427                 push    ecx             ; hModule
.text:00000428                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000042E                 cmp     esi, esp
.text:00000430                 call    __RTC_CheckEsp
.text:00000435                 mov     [ebp+var_18], eax
.text:00000438                 jmp     short loc_441
.text:0000043A ; ---------------------------------------------------------------------------
.text:0000043A
.text:0000043A loc_43A:                                ; CODE XREF: _got_advapi+1B4j
.text:0000043A                 mov     [ebp+var_18], 0
.text:00000441
.text:00000441 loc_441:                                ; CODE XREF: _got_advapi+1D4j
.text:00000441                 mov     edx, [ebp+var_18]
.text:00000444                 mov     dword ptr ds:_p_SetEntriesInAclA, edx
.text:0000044A                 cmp     dword ptr ds:_p_SetEntriesInAclA, 0
.text:00000451                 jz      short loc_45C
.text:00000453                 mov     [ebp+var_1C], 1
.text:0000045A                 jmp     short loc_463
.text:0000045C ; ---------------------------------------------------------------------------
.text:0000045C
.text:0000045C loc_45C:                                ; CODE XREF: _got_advapi+51j
.text:0000045C                                         ; _got_advapi+96j ...
.text:0000045C                 mov     [ebp+var_1C], 0
.text:00000463
.text:00000463 loc_463:                                ; CODE XREF: _got_advapi+1F6j
.text:00000463                 mov     eax, [ebp+var_1C]
.text:00000466                 mov     ds:?successful@?1??got_advapi@@9@9, eax ; `got_advapi'::`2'::successful
.text:0000046B
.text:0000046B loc_46B:                                ; CODE XREF: _got_advapi+28j
.text:0000046B                 mov     eax, ds:?successful@?1??got_advapi@@9@9 ; `got_advapi'::`2'::successful
.text:00000470                 pop     esi
.text:00000471                 add     esp, 1Ch
.text:00000474                 cmp     ebp, esp
.text:00000476                 call    __RTC_CheckEsp
.text:0000047B                 mov     esp, ebp
.text:0000047D                 pop     ebp
.text:0000047E                 retn
.text:0000047E _got_advapi     endp
.text:0000047E
.text:0000047E ; ---------------------------------------------------------------------------
.text:0000047F                 db 5 dup(0CCh)
.text:00000484
.text:00000484 ; =============== S U B R O U T I N E =======================================
.text:00000484
.text:00000484 ; Attributes: bp-based frame
.text:00000484
.text:00000484                 public _got_crypt
.text:00000484 _got_crypt      proc near
.text:00000484
.text:00000484 var_8           = dword ptr -8
.text:00000484 var_4           = dword ptr -4
.text:00000484
.text:00000484                 push    ebp
.text:00000485                 mov     ebp, esp
.text:00000487                 sub     esp, 8
.text:0000048A                 push    esi
.text:0000048B                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000492                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000499                 cmp     ds:?attempted@?1??got_crypt@@9@9, 0 ; `got_crypt'::`2'::attempted
.text:000004A0                 jnz     short loc_521
.text:000004A2                 mov     ds:?attempted@?1??got_crypt@@9@9, 1 ; `got_crypt'::`2'::attempted
.text:000004AC                 push    offset $SG86428 ; "crypt32.dll"
.text:000004B1                 call    _load_system32_dll
.text:000004B6                 add     esp, 4
.text:000004B9                 mov     ds:?crypt@?1??got_crypt@@9@9, eax ; `got_crypt'::`2'::crypt
.text:000004BE                 cmp     ds:?crypt@?1??got_crypt@@9@9, 0 ; `got_crypt'::`2'::crypt
.text:000004C5                 jz      short loc_511
.text:000004C7                 cmp     ds:?crypt@?1??got_crypt@@9@9, 0 ; `got_crypt'::`2'::crypt
.text:000004CE                 jz      short loc_4EF
.text:000004D0                 mov     esi, esp
.text:000004D2                 push    offset $SG86431 ; "CryptProtectMemory"
.text:000004D7                 mov     eax, ds:?crypt@?1??got_crypt@@9@9 ; `got_crypt'::`2'::crypt
.text:000004DC                 push    eax             ; hModule
.text:000004DD                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000004E3                 cmp     esi, esp
.text:000004E5                 call    __RTC_CheckEsp
.text:000004EA                 mov     [ebp+var_4], eax
.text:000004ED                 jmp     short loc_4F6
.text:000004EF ; ---------------------------------------------------------------------------
.text:000004EF
.text:000004EF loc_4EF:                                ; CODE XREF: _got_crypt+4Aj
.text:000004EF                 mov     [ebp+var_4], 0
.text:000004F6
.text:000004F6 loc_4F6:                                ; CODE XREF: _got_crypt+69j
.text:000004F6                 mov     ecx, [ebp+var_4]
.text:000004F9                 mov     dword ptr ds:_p_CryptProtectMemory, ecx
.text:000004FF                 cmp     dword ptr ds:_p_CryptProtectMemory, 0
.text:00000506                 jz      short loc_511
.text:00000508                 mov     [ebp+var_8], 1
.text:0000050F                 jmp     short loc_518
.text:00000511 ; ---------------------------------------------------------------------------
.text:00000511
.text:00000511 loc_511:                                ; CODE XREF: _got_crypt+41j
.text:00000511                                         ; _got_crypt+82j
.text:00000511                 mov     [ebp+var_8], 0
.text:00000518
.text:00000518 loc_518:                                ; CODE XREF: _got_crypt+8Bj
.text:00000518                 mov     edx, [ebp+var_8]
.text:0000051B                 mov     ds:?successful@?1??got_crypt@@9@9, edx ; `got_crypt'::`2'::successful
.text:00000521
.text:00000521 loc_521:                                ; CODE XREF: _got_crypt+1Cj
.text:00000521                 mov     eax, ds:?successful@?1??got_crypt@@9@9 ; `got_crypt'::`2'::successful
.text:00000526                 pop     esi
.text:00000527                 add     esp, 8
.text:0000052A                 cmp     ebp, esp
.text:0000052C                 call    __RTC_CheckEsp
.text:00000531                 mov     esp, ebp
.text:00000533                 pop     ebp
.text:00000534                 retn
.text:00000534 _got_crypt      endp
.text:00000534
.text:00000534 ; ---------------------------------------------------------------------------
.text:00000535                 db 0Fh dup(0CCh)
.text:00000544
.text:00000544 ; =============== S U B R O U T I N E =======================================
.text:00000544
.text:00000544 ; Attributes: bp-based frame
.text:00000544
.text:00000544                 public _get_user_sid
.text:00000544 _get_user_sid   proc near               ; CODE XREF: _make_private_security_descriptor+A5p
.text:00000544
.text:00000544 var_2C          = dword ptr -2Ch
.text:00000544 pDestinationSid = dword ptr -28h
.text:00000544 nDestinationSidLength= dword ptr -24h
.text:00000544 uBytes          = dword ptr -1Ch
.text:00000544 hMem            = dword ptr -14h
.text:00000544 var_C           = dword ptr -0Ch
.text:00000544 hObject         = dword ptr -4
.text:00000544
.text:00000544                 push    ebp
.text:00000545                 mov     ebp, esp
.text:00000547                 sub     esp, 2Ch
.text:0000054A                 push    esi
.text:0000054B                 push    edi
.text:0000054C                 lea     edi, [ebp+var_2C]
.text:0000054F                 mov     ecx, 0Bh
.text:00000554                 mov     eax, 0CCCCCCCCh
.text:00000559                 rep stosd
.text:0000055B                 mov     [ebp+hObject], 0
.text:00000562                 mov     [ebp+var_C], 0
.text:00000569                 mov     [ebp+hMem], 0
.text:00000570                 mov     [ebp+pDestinationSid], 0
.text:00000577                 mov     [ebp+var_2C], 0
.text:0000057E                 call    _got_advapi
.text:00000583                 test    eax, eax
.text:00000585                 jnz     short loc_58C
.text:00000587                 jmp     $cleanup$86447
.text:0000058C ; ---------------------------------------------------------------------------
.text:0000058C
.text:0000058C loc_58C:                                ; CODE XREF: _get_user_sid+41j
.text:0000058C                 mov     esi, esp
.text:0000058E                 call    dword ptr ds:__imp__GetCurrentProcessId@0 ; GetCurrentProcessId()
.text:00000594                 cmp     esi, esp
.text:00000596                 call    __RTC_CheckEsp
.text:0000059B                 mov     esi, esp
.text:0000059D                 push    eax             ; dwProcessId
.text:0000059E                 push    0               ; bInheritHandle
.text:000005A0                 push    2000000h        ; dwDesiredAccess
.text:000005A5                 call    dword ptr ds:__imp__OpenProcess@12 ; OpenProcess(x,x,x)
.text:000005AB                 cmp     esi, esp
.text:000005AD                 call    __RTC_CheckEsp
.text:000005B2                 mov     [ebp+hObject], eax
.text:000005B5                 cmp     [ebp+hObject], 0
.text:000005B9                 jnz     short loc_5C0
.text:000005BB                 jmp     $cleanup$86447
.text:000005C0 ; ---------------------------------------------------------------------------
.text:000005C0
.text:000005C0 loc_5C0:                                ; CODE XREF: _get_user_sid+75j
.text:000005C0                 mov     esi, esp
.text:000005C2                 lea     eax, [ebp+var_C]
.text:000005C5                 push    eax
.text:000005C6                 push    8
.text:000005C8                 mov     ecx, [ebp+hObject]
.text:000005CB                 push    ecx
.text:000005CC                 call    dword ptr ds:_p_OpenProcessToken
.text:000005D2                 cmp     esi, esp
.text:000005D4                 call    __RTC_CheckEsp
.text:000005D9                 test    eax, eax
.text:000005DB                 jnz     short loc_5E2
.text:000005DD                 jmp     $cleanup$86447
.text:000005E2 ; ---------------------------------------------------------------------------
.text:000005E2
.text:000005E2 loc_5E2:                                ; CODE XREF: _get_user_sid+97j
.text:000005E2                 mov     esi, esp
.text:000005E4                 lea     edx, [ebp+uBytes]
.text:000005E7                 push    edx
.text:000005E8                 push    0
.text:000005EA                 push    0
.text:000005EC                 push    1
.text:000005EE                 mov     eax, [ebp+var_C]
.text:000005F1                 push    eax
.text:000005F2                 call    dword ptr ds:_p_GetTokenInformation
.text:000005F8                 cmp     esi, esp
.text:000005FA                 call    __RTC_CheckEsp
.text:000005FF                 test    eax, eax
.text:00000601                 jnz     short loc_61C
.text:00000603                 mov     esi, esp
.text:00000605                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000060B                 cmp     esi, esp
.text:0000060D                 call    __RTC_CheckEsp
.text:00000612                 cmp     eax, 7Ah ; 'z'
.text:00000615                 jz      short loc_61C
.text:00000617                 jmp     $cleanup$86447
.text:0000061C ; ---------------------------------------------------------------------------
.text:0000061C
.text:0000061C loc_61C:                                ; CODE XREF: _get_user_sid+BDj
.text:0000061C                                         ; _get_user_sid+D1j
.text:0000061C                 mov     esi, esp
.text:0000061E                 mov     ecx, [ebp+uBytes]
.text:00000621                 push    ecx             ; uBytes
.text:00000622                 push    40h ; '@'       ; uFlags
.text:00000624                 call    dword ptr ds:__imp__LocalAlloc@8 ; LocalAlloc(x,x)
.text:0000062A                 cmp     esi, esp
.text:0000062C                 call    __RTC_CheckEsp
.text:00000631                 mov     [ebp+hMem], eax
.text:00000634                 cmp     [ebp+hMem], 0
.text:00000638                 jnz     short loc_63F
.text:0000063A                 jmp     $cleanup$86447
.text:0000063F ; ---------------------------------------------------------------------------
.text:0000063F
.text:0000063F loc_63F:                                ; CODE XREF: _get_user_sid+F4j
.text:0000063F                 mov     esi, esp
.text:00000641                 lea     edx, [ebp+uBytes]
.text:00000644                 push    edx
.text:00000645                 mov     eax, [ebp+uBytes]
.text:00000648                 push    eax
.text:00000649                 mov     ecx, [ebp+hMem]
.text:0000064C                 push    ecx
.text:0000064D                 push    1
.text:0000064F                 mov     edx, [ebp+var_C]
.text:00000652                 push    edx
.text:00000653                 call    dword ptr ds:_p_GetTokenInformation
.text:00000659                 cmp     esi, esp
.text:0000065B                 call    __RTC_CheckEsp
.text:00000660                 test    eax, eax
.text:00000662                 jnz     short loc_666
.text:00000664                 jmp     short $cleanup$86447
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000666
.text:00000666 loc_666:                                ; CODE XREF: _get_user_sid+11Ej
.text:00000666                 mov     esi, esp
.text:00000668                 mov     eax, [ebp+hMem]
.text:0000066B                 mov     ecx, [eax]
.text:0000066D                 push    ecx             ; pSid
.text:0000066E                 call    dword ptr ds:__imp__GetLengthSid@4 ; GetLengthSid(x)
.text:00000674                 cmp     esi, esp
.text:00000676                 call    __RTC_CheckEsp
.text:0000067B                 mov     [ebp+nDestinationSidLength], eax
.text:0000067E                 push    1
.text:00000680                 mov     edx, [ebp+nDestinationSidLength]
.text:00000683                 push    edx
.text:00000684                 call    _safemalloc
.text:00000689                 add     esp, 8
.text:0000068C                 mov     [ebp+pDestinationSid], eax
.text:0000068F                 mov     esi, esp
.text:00000691                 mov     eax, [ebp+hMem]
.text:00000694                 mov     ecx, [eax]
.text:00000696                 push    ecx             ; pSourceSid
.text:00000697                 mov     edx, [ebp+pDestinationSid]
.text:0000069A                 push    edx             ; pDestinationSid
.text:0000069B                 mov     eax, [ebp+nDestinationSidLength]
.text:0000069E                 push    eax             ; nDestinationSidLength
.text:0000069F                 call    dword ptr ds:__imp__CopySid@12 ; CopySid(x,x,x)
.text:000006A5                 cmp     esi, esp
.text:000006A7                 call    __RTC_CheckEsp
.text:000006AC                 test    eax, eax
.text:000006AE                 jnz     short loc_6B2
.text:000006B0                 jmp     short $cleanup$86447
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: _get_user_sid+16Aj
.text:000006B2                 mov     ecx, [ebp+pDestinationSid]
.text:000006B5                 mov     [ebp+var_2C], ecx
.text:000006B8                 mov     [ebp+pDestinationSid], 0
.text:000006BF
.text:000006BF $cleanup$86447:                         ; CODE XREF: _get_user_sid+43j
.text:000006BF                                         ; _get_user_sid+77j ...
.text:000006BF                 cmp     [ebp+hObject], 0
.text:000006C3                 jz      short loc_6D8
.text:000006C5                 mov     esi, esp
.text:000006C7                 mov     edx, [ebp+hObject]
.text:000006CA                 push    edx             ; hObject
.text:000006CB                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000006D1                 cmp     esi, esp
.text:000006D3                 call    __RTC_CheckEsp
.text:000006D8
.text:000006D8 loc_6D8:                                ; CODE XREF: _get_user_sid+17Fj
.text:000006D8                 cmp     [ebp+var_C], 0
.text:000006DC                 jz      short loc_6F1
.text:000006DE                 mov     esi, esp
.text:000006E0                 mov     eax, [ebp+var_C]
.text:000006E3                 push    eax             ; hObject
.text:000006E4                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000006EA                 cmp     esi, esp
.text:000006EC                 call    __RTC_CheckEsp
.text:000006F1
.text:000006F1 loc_6F1:                                ; CODE XREF: _get_user_sid+198j
.text:000006F1                 cmp     [ebp+hMem], 0
.text:000006F5                 jz      short loc_70A
.text:000006F7                 mov     esi, esp
.text:000006F9                 mov     ecx, [ebp+hMem]
.text:000006FC                 push    ecx             ; hMem
.text:000006FD                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000703                 cmp     esi, esp
.text:00000705                 call    __RTC_CheckEsp
.text:0000070A
.text:0000070A loc_70A:                                ; CODE XREF: _get_user_sid+1B1j
.text:0000070A                 cmp     [ebp+pDestinationSid], 0
.text:0000070E                 jz      short loc_71C
.text:00000710                 mov     edx, [ebp+pDestinationSid]
.text:00000713                 push    edx
.text:00000714                 call    _safefree
.text:00000719                 add     esp, 4
.text:0000071C
.text:0000071C loc_71C:                                ; CODE XREF: _get_user_sid+1CAj
.text:0000071C                 mov     eax, [ebp+var_2C]
.text:0000071F                 push    edx
.text:00000720                 mov     ecx, ebp
.text:00000722                 push    eax
.text:00000723                 lea     edx, $LN17
.text:00000729                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000072E                 pop     eax
.text:0000072F                 pop     edx
.text:00000730                 pop     edi
.text:00000731                 pop     esi
.text:00000732                 add     esp, 2Ch
.text:00000735                 cmp     ebp, esp
.text:00000737                 call    __RTC_CheckEsp
.text:0000073C                 mov     esp, ebp
.text:0000073E                 pop     ebp
.text:0000073F                 retn
.text:0000073F _get_user_sid   endp
.text:0000073F
.text:0000073F ; ---------------------------------------------------------------------------
.text:00000740 $LN17           dd 2                    ; DATA XREF: _get_user_sid+1DFo
.text:00000744                 dd offset $LN16
.text:00000748 $LN16           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000744o
.text:00000750                 dd offset $LN14         ; "tok"
.text:00000754                 dd 0FFFFFFE4h, 4
.text:0000075C                 dd offset $LN15         ; "toklen"
.text:00000760 $LN15           db 'toklen',0           ; DATA XREF: .text:0000075Co
.text:00000767 $LN14           db 'tok',0              ; DATA XREF: .text:00000750o
.text:0000076B                 db 9 dup(0CCh)
.text:00000774
.text:00000774 ; =============== S U B R O U T I N E =======================================
.text:00000774
.text:00000774 ; Attributes: bp-based frame
.text:00000774
.text:00000774                 public _make_private_security_descriptor
.text:00000774 _make_private_security_descriptor proc near
.text:00000774
.text:00000774 var_94          = dword ptr -94h
.text:00000774 var_90          = dword ptr -90h
.text:00000774 Dst             = dword ptr -88h
.text:00000774 var_84          = dword ptr -84h
.text:00000774 var_80          = dword ptr -80h
.text:00000774 var_74          = dword ptr -74h
.text:00000774 var_6C          = dword ptr -6Ch
.text:00000774 var_68          = dword ptr -68h
.text:00000774 var_64          = dword ptr -64h
.text:00000774 var_60          = dword ptr -60h
.text:00000774 var_54          = dword ptr -54h
.text:00000774 var_4C          = dword ptr -4Ch
.text:00000774 var_48          = dword ptr -48h
.text:00000774 var_44          = dword ptr -44h
.text:00000774 var_40          = dword ptr -40h
.text:00000774 var_34          = dword ptr -34h
.text:00000774 var_2C          = dword ptr -2Ch
.text:00000774 var_20          = _SID_IDENTIFIER_AUTHORITY ptr -20h
.text:00000774 pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY ptr -10h
.text:00000774 var_4           = dword ptr -4
.text:00000774 arg_0           = dword ptr  8
.text:00000774 arg_4           = dword ptr  0Ch
.text:00000774 arg_8           = dword ptr  10h
.text:00000774 arg_C           = dword ptr  14h
.text:00000774
.text:00000774                 push    ebp
.text:00000775                 mov     ebp, esp
.text:00000777                 sub     esp, 94h
.text:0000077D                 push    esi
.text:0000077E                 push    edi
.text:0000077F                 lea     edi, [ebp+var_94]
.text:00000785                 mov     ecx, 25h ; '%'
.text:0000078A                 mov     eax, 0CCCCCCCCh
.text:0000078F                 rep stosd
.text:00000791                 mov     eax, dword ptr ds:___security_cookie
.text:00000796                 xor     eax, ebp
.text:00000798                 mov     [ebp+var_4], eax
.text:0000079B                 mov     [ebp+pIdentifierAuthority.Value], 0
.text:0000079F                 mov     [ebp+pIdentifierAuthority.Value+1], 0
.text:000007A3                 mov     [ebp+pIdentifierAuthority.Value+2], 0
.text:000007A7                 mov     [ebp+pIdentifierAuthority.Value+3], 0
.text:000007AB                 mov     [ebp+pIdentifierAuthority.Value+4], 0
.text:000007AF                 mov     [ebp+pIdentifierAuthority.Value+5], 1
.text:000007B3                 mov     [ebp+var_20.Value], 0
.text:000007B7                 mov     [ebp+var_20.Value+1], 0
.text:000007BB                 mov     [ebp+var_20.Value+2], 0
.text:000007BF                 mov     [ebp+var_20.Value+3], 0
.text:000007C3                 mov     [ebp+var_20.Value+4], 0
.text:000007C7                 mov     [ebp+var_20.Value+5], 5
.text:000007CB                 mov     [ebp+var_94], 0
.text:000007D5                 mov     eax, [ebp+arg_4]
.text:000007D8                 mov     dword ptr [eax], 0
.text:000007DE                 mov     ecx, [ebp+arg_8]
.text:000007E1                 mov     dword ptr [ecx], 0
.text:000007E7                 mov     edx, [ebp+arg_C]
.text:000007EA                 mov     dword ptr [edx], 0
.text:000007F0                 call    _got_advapi
.text:000007F5                 test    eax, eax
.text:000007F7                 jnz     short loc_810
.text:000007F9                 push    offset $SG86492 ; "unable to load advapi32.dll"
.text:000007FE                 call    _dupprintf
.text:00000803                 add     esp, 4
.text:00000806                 mov     ecx, [ebp+arg_C]
.text:00000809                 mov     [ecx], eax
.text:0000080B                 jmp     $cleanup$86493
.text:00000810 ; ---------------------------------------------------------------------------
.text:00000810
.text:00000810 loc_810:                                ; CODE XREF: _make_private_security_descriptor+83j
.text:00000810                 cmp     ds:?usersid@?1??make_private_security_descriptor@@9@9, 0 ; `make_private_security_descriptor'::`2'::usersid
.text:00000817                 jnz     short loc_85C
.text:00000819                 call    _get_user_sid
.text:0000081E                 mov     ds:?usersid@?1??make_private_security_descriptor@@9@9, eax ; `make_private_security_descriptor'::`2'::usersid
.text:00000823                 cmp     ds:?usersid@?1??make_private_security_descriptor@@9@9, 0 ; `make_private_security_descriptor'::`2'::usersid
.text:0000082A                 jnz     short loc_85C
.text:0000082C                 mov     esi, esp
.text:0000082E                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000834                 cmp     esi, esp
.text:00000836                 call    __RTC_CheckEsp
.text:0000083B                 push    eax
.text:0000083C                 call    _win_strerror
.text:00000841                 add     esp, 4
.text:00000844                 push    eax
.text:00000845                 push    offset $SG86497 ; "unable to construct SID for current use"...
.text:0000084A                 call    _dupprintf
.text:0000084F                 add     esp, 8
.text:00000852                 mov     edx, [ebp+arg_C]
.text:00000855                 mov     [edx], eax
.text:00000857                 jmp     $cleanup$86493
.text:0000085C ; ---------------------------------------------------------------------------
.text:0000085C
.text:0000085C loc_85C:                                ; CODE XREF: _make_private_security_descriptor+A3j
.text:0000085C                                         ; _make_private_security_descriptor+B6j
.text:0000085C                 cmp     ds:?worldsid@?1??make_private_security_descriptor@@9@9, 0 ; `make_private_security_descriptor'::`2'::worldsid
.text:00000863                 jnz     short loc_8C3
.text:00000865                 mov     esi, esp
.text:00000867                 push    offset ?worldsid@?1??make_private_security_descriptor@@9@9 ; pSid
.text:0000086C                 push    0               ; nSubAuthority7
.text:0000086E                 push    0               ; nSubAuthority6
.text:00000870                 push    0               ; nSubAuthority5
.text:00000872                 push    0               ; nSubAuthority4
.text:00000874                 push    0               ; nSubAuthority3
.text:00000876                 push    0               ; nSubAuthority2
.text:00000878                 push    0               ; nSubAuthority1
.text:0000087A                 push    0               ; nSubAuthority0
.text:0000087C                 push    1               ; nSubAuthorityCount
.text:0000087E                 lea     eax, [ebp+pIdentifierAuthority]
.text:00000881                 push    eax             ; pIdentifierAuthority
.text:00000882                 call    dword ptr ds:__imp__AllocateAndInitializeSid@44 ; AllocateAndInitializeSid(x,x,x,x,x,x,x,x,x,x,x)
.text:00000888                 cmp     esi, esp
.text:0000088A                 call    __RTC_CheckEsp
.text:0000088F                 test    eax, eax
.text:00000891                 jnz     short loc_8C3
.text:00000893                 mov     esi, esp
.text:00000895                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000089B                 cmp     esi, esp
.text:0000089D                 call    __RTC_CheckEsp
.text:000008A2                 push    eax
.text:000008A3                 call    _win_strerror
.text:000008A8                 add     esp, 4
.text:000008AB                 push    eax
.text:000008AC                 push    offset $SG86500 ; "unable to construct SID for world: %s"
.text:000008B1                 call    _dupprintf
.text:000008B6                 add     esp, 8
.text:000008B9                 mov     ecx, [ebp+arg_C]
.text:000008BC                 mov     [ecx], eax
.text:000008BE                 jmp     $cleanup$86493
.text:000008C3 ; ---------------------------------------------------------------------------
.text:000008C3
.text:000008C3 loc_8C3:                                ; CODE XREF: _make_private_security_descriptor+EFj
.text:000008C3                                         ; _make_private_security_descriptor+11Dj
.text:000008C3                 cmp     ds:?networksid@?1??make_private_security_descriptor@@9@9, 0 ; `make_private_security_descriptor'::`2'::networksid
.text:000008CA                 jnz     short loc_92A
.text:000008CC                 mov     esi, esp
.text:000008CE                 push    offset ?networksid@?1??make_private_security_descriptor@@9@9 ; pSid
.text:000008D3                 push    0               ; nSubAuthority7
.text:000008D5                 push    0               ; nSubAuthority6
.text:000008D7                 push    0               ; nSubAuthority5
.text:000008D9                 push    0               ; nSubAuthority4
.text:000008DB                 push    0               ; nSubAuthority3
.text:000008DD                 push    0               ; nSubAuthority2
.text:000008DF                 push    0               ; nSubAuthority1
.text:000008E1                 push    2               ; nSubAuthority0
.text:000008E3                 push    1               ; nSubAuthorityCount
.text:000008E5                 lea     edx, [ebp+var_20]
.text:000008E8                 push    edx             ; pIdentifierAuthority
.text:000008E9                 call    dword ptr ds:__imp__AllocateAndInitializeSid@44 ; AllocateAndInitializeSid(x,x,x,x,x,x,x,x,x,x,x)
.text:000008EF                 cmp     esi, esp
.text:000008F1                 call    __RTC_CheckEsp
.text:000008F6                 test    eax, eax
.text:000008F8                 jnz     short loc_92A
.text:000008FA                 mov     esi, esp
.text:000008FC                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000902                 cmp     esi, esp
.text:00000904                 call    __RTC_CheckEsp
.text:00000909                 push    eax
.text:0000090A                 call    _win_strerror
.text:0000090F                 add     esp, 4
.text:00000912                 push    eax
.text:00000913                 push    offset $SG86503 ; "unable to construct SID for local same-"...
.text:00000918                 call    _dupprintf
.text:0000091D                 add     esp, 8
.text:00000920                 mov     ecx, [ebp+arg_C]
.text:00000923                 mov     [ecx], eax
.text:00000925                 jmp     $cleanup$86493
.text:0000092A ; ---------------------------------------------------------------------------
.text:0000092A
.text:0000092A loc_92A:                                ; CODE XREF: _make_private_security_descriptor+156j
.text:0000092A                                         ; _make_private_security_descriptor+184j
.text:0000092A                 push    60h ; '`'       ; Size
.text:0000092C                 push    0               ; Val
.text:0000092E                 lea     edx, [ebp+Dst]
.text:00000934                 push    edx             ; Dst
.text:00000935                 call    _memset
.text:0000093A                 add     esp, 0Ch
.text:0000093D                 mov     eax, [ebp+arg_0]
.text:00000940                 mov     [ebp+Dst], eax
.text:00000946                 mov     [ebp+var_84], 4
.text:00000950                 mov     [ebp+var_80], 0
.text:00000957                 mov     [ebp+var_74], 0
.text:0000095E                 mov     ecx, ds:?worldsid@?1??make_private_security_descriptor@@9@9 ; `make_private_security_descriptor'::`2'::worldsid
.text:00000964                 mov     [ebp+var_6C], ecx
.text:00000967                 mov     edx, [ebp+arg_0]
.text:0000096A                 mov     [ebp+var_68], edx
.text:0000096D                 mov     [ebp+var_64], 1
.text:00000974                 mov     [ebp+var_60], 0
.text:0000097B                 mov     [ebp+var_54], 0
.text:00000982                 mov     eax, ds:?usersid@?1??make_private_security_descriptor@@9@9 ; `make_private_security_descriptor'::`2'::usersid
.text:00000987                 mov     [ebp+var_4C], eax
.text:0000098A                 mov     ecx, [ebp+arg_0]
.text:0000098D                 mov     [ebp+var_48], ecx
.text:00000990                 mov     [ebp+var_44], 4
.text:00000997                 mov     [ebp+var_40], 0
.text:0000099E                 mov     [ebp+var_34], 0
.text:000009A5                 mov     edx, ds:?networksid@?1??make_private_security_descriptor@@9@9 ; `make_private_security_descriptor'::`2'::networksid
.text:000009AB                 mov     [ebp+var_2C], edx
.text:000009AE                 mov     esi, esp
.text:000009B0                 mov     eax, [ebp+arg_8]
.text:000009B3                 push    eax
.text:000009B4                 push    0
.text:000009B6                 lea     ecx, [ebp+Dst]
.text:000009BC                 push    ecx
.text:000009BD                 push    3
.text:000009BF                 call    dword ptr ds:_p_SetEntriesInAclA
.text:000009C5                 cmp     esi, esp
.text:000009C7                 call    __RTC_CheckEsp
.text:000009CC                 mov     [ebp+var_90], eax
.text:000009D2                 cmp     [ebp+var_90], 0
.text:000009D9                 jnz     short loc_9E3
.text:000009DB                 mov     edx, [ebp+arg_8]
.text:000009DE                 cmp     dword ptr [edx], 0
.text:000009E1                 jnz     short loc_A0A
.text:000009E3
.text:000009E3 loc_9E3:                                ; CODE XREF: _make_private_security_descriptor+265j
.text:000009E3                 mov     eax, [ebp+var_90]
.text:000009E9                 push    eax
.text:000009EA                 call    _win_strerror
.text:000009EF                 add     esp, 4
.text:000009F2                 push    eax
.text:000009F3                 push    offset $SG86511 ; "unable to construct ACL: %s"
.text:000009F8                 call    _dupprintf
.text:000009FD                 add     esp, 8
.text:00000A00                 mov     ecx, [ebp+arg_C]
.text:00000A03                 mov     [ecx], eax
.text:00000A05                 jmp     $cleanup$86493
.text:00000A0A ; ---------------------------------------------------------------------------
.text:00000A0A
.text:00000A0A loc_A0A:                                ; CODE XREF: _make_private_security_descriptor+26Dj
.text:00000A0A                 mov     esi, esp
.text:00000A0C                 push    14h             ; uBytes
.text:00000A0E                 push    40h ; '@'       ; uFlags
.text:00000A10                 call    dword ptr ds:__imp__LocalAlloc@8 ; LocalAlloc(x,x)
.text:00000A16                 cmp     esi, esp
.text:00000A18                 call    __RTC_CheckEsp
.text:00000A1D                 mov     edx, [ebp+arg_4]
.text:00000A20                 mov     [edx], eax
.text:00000A22                 mov     eax, [ebp+arg_4]
.text:00000A25                 cmp     dword ptr [eax], 0
.text:00000A28                 jnz     short loc_A5A
.text:00000A2A                 mov     esi, esp
.text:00000A2C                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000A32                 cmp     esi, esp
.text:00000A34                 call    __RTC_CheckEsp
.text:00000A39                 push    eax
.text:00000A3A                 call    _win_strerror
.text:00000A3F                 add     esp, 4
.text:00000A42                 push    eax
.text:00000A43                 push    offset $SG86515 ; "unable to allocate security descriptor:"...
.text:00000A48                 call    _dupprintf
.text:00000A4D                 add     esp, 8
.text:00000A50                 mov     ecx, [ebp+arg_C]
.text:00000A53                 mov     [ecx], eax
.text:00000A55                 jmp     $cleanup$86493
.text:00000A5A ; ---------------------------------------------------------------------------
.text:00000A5A
.text:00000A5A loc_A5A:                                ; CODE XREF: _make_private_security_descriptor+2B4j
.text:00000A5A                 mov     esi, esp
.text:00000A5C                 push    1               ; dwRevision
.text:00000A5E                 mov     edx, [ebp+arg_4]
.text:00000A61                 mov     eax, [edx]
.text:00000A63                 push    eax             ; pSecurityDescriptor
.text:00000A64                 call    dword ptr ds:__imp__InitializeSecurityDescriptor@8 ; InitializeSecurityDescriptor(x,x)
.text:00000A6A                 cmp     esi, esp
.text:00000A6C                 call    __RTC_CheckEsp
.text:00000A71                 test    eax, eax
.text:00000A73                 jnz     short loc_AA5
.text:00000A75                 mov     esi, esp
.text:00000A77                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000A7D                 cmp     esi, esp
.text:00000A7F                 call    __RTC_CheckEsp
.text:00000A84                 push    eax
.text:00000A85                 call    _win_strerror
.text:00000A8A                 add     esp, 4
.text:00000A8D                 push    eax
.text:00000A8E                 push    offset $SG86517 ; "unable to initialise security descripto"...
.text:00000A93                 call    _dupprintf
.text:00000A98                 add     esp, 8
.text:00000A9B                 mov     ecx, [ebp+arg_C]
.text:00000A9E                 mov     [ecx], eax
.text:00000AA0                 jmp     $cleanup$86493
.text:00000AA5 ; ---------------------------------------------------------------------------
.text:00000AA5
.text:00000AA5 loc_AA5:                                ; CODE XREF: _make_private_security_descriptor+2FFj
.text:00000AA5                 mov     esi, esp
.text:00000AA7                 push    0               ; bOwnerDefaulted
.text:00000AA9                 mov     edx, ds:?usersid@?1??make_private_security_descriptor@@9@9 ; `make_private_security_descriptor'::`2'::usersid
.text:00000AAF                 push    edx             ; pOwner
.text:00000AB0                 mov     eax, [ebp+arg_4]
.text:00000AB3                 mov     ecx, [eax]
.text:00000AB5                 push    ecx             ; pSecurityDescriptor
.text:00000AB6                 call    dword ptr ds:__imp__SetSecurityDescriptorOwner@12 ; SetSecurityDescriptorOwner(x,x,x)
.text:00000ABC                 cmp     esi, esp
.text:00000ABE                 call    __RTC_CheckEsp
.text:00000AC3                 test    eax, eax
.text:00000AC5                 jnz     short loc_AF4
.text:00000AC7                 mov     esi, esp
.text:00000AC9                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000ACF                 cmp     esi, esp
.text:00000AD1                 call    __RTC_CheckEsp
.text:00000AD6                 push    eax
.text:00000AD7                 call    _win_strerror
.text:00000ADC                 add     esp, 4
.text:00000ADF                 push    eax
.text:00000AE0                 push    offset $SG86519 ; "unable to set owner in security descrip"...
.text:00000AE5                 call    _dupprintf
.text:00000AEA                 add     esp, 8
.text:00000AED                 mov     edx, [ebp+arg_C]
.text:00000AF0                 mov     [edx], eax
.text:00000AF2                 jmp     short $cleanup$86493
.text:00000AF4 ; ---------------------------------------------------------------------------
.text:00000AF4
.text:00000AF4 loc_AF4:                                ; CODE XREF: _make_private_security_descriptor+351j
.text:00000AF4                 mov     esi, esp
.text:00000AF6                 push    0               ; bDaclDefaulted
.text:00000AF8                 mov     eax, [ebp+arg_8]
.text:00000AFB                 mov     ecx, [eax]
.text:00000AFD                 push    ecx             ; pDacl
.text:00000AFE                 push    1               ; bDaclPresent
.text:00000B00                 mov     edx, [ebp+arg_4]
.text:00000B03                 mov     eax, [edx]
.text:00000B05                 push    eax             ; pSecurityDescriptor
.text:00000B06                 call    dword ptr ds:__imp__SetSecurityDescriptorDacl@16 ; SetSecurityDescriptorDacl(x,x,x,x)
.text:00000B0C                 cmp     esi, esp
.text:00000B0E                 call    __RTC_CheckEsp
.text:00000B13                 test    eax, eax
.text:00000B15                 jnz     short loc_B44
.text:00000B17                 mov     esi, esp
.text:00000B19                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000B1F                 cmp     esi, esp
.text:00000B21                 call    __RTC_CheckEsp
.text:00000B26                 push    eax
.text:00000B27                 call    _win_strerror
.text:00000B2C                 add     esp, 4
.text:00000B2F                 push    eax
.text:00000B30                 push    offset $SG86521 ; "unable to set DACL in security descript"...
.text:00000B35                 call    _dupprintf
.text:00000B3A                 add     esp, 8
.text:00000B3D                 mov     ecx, [ebp+arg_C]
.text:00000B40                 mov     [ecx], eax
.text:00000B42                 jmp     short $cleanup$86493
.text:00000B44 ; ---------------------------------------------------------------------------
.text:00000B44
.text:00000B44 loc_B44:                                ; CODE XREF: _make_private_security_descriptor+3A1j
.text:00000B44                 mov     [ebp+var_94], 1
.text:00000B4E
.text:00000B4E $cleanup$86493:                         ; CODE XREF: _make_private_security_descriptor+97j
.text:00000B4E                                         ; _make_private_security_descriptor+E3j ...
.text:00000B4E                 cmp     [ebp+var_94], 0
.text:00000B55                 jnz     short loc_BA5
.text:00000B57                 mov     edx, [ebp+arg_4]
.text:00000B5A                 cmp     dword ptr [edx], 0
.text:00000B5D                 jz      short loc_B7D
.text:00000B5F                 mov     esi, esp
.text:00000B61                 mov     eax, [ebp+arg_4]
.text:00000B64                 mov     ecx, [eax]
.text:00000B66                 push    ecx             ; hMem
.text:00000B67                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000B6D                 cmp     esi, esp
.text:00000B6F                 call    __RTC_CheckEsp
.text:00000B74                 mov     edx, [ebp+arg_4]
.text:00000B77                 mov     dword ptr [edx], 0
.text:00000B7D
.text:00000B7D loc_B7D:                                ; CODE XREF: _make_private_security_descriptor+3E9j
.text:00000B7D                 mov     eax, [ebp+arg_8]
.text:00000B80                 cmp     dword ptr [eax], 0
.text:00000B83                 jz      short loc_BA3
.text:00000B85                 mov     esi, esp
.text:00000B87                 mov     ecx, [ebp+arg_8]
.text:00000B8A                 mov     edx, [ecx]
.text:00000B8C                 push    edx             ; hMem
.text:00000B8D                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000B93                 cmp     esi, esp
.text:00000B95                 call    __RTC_CheckEsp
.text:00000B9A                 mov     eax, [ebp+arg_8]
.text:00000B9D                 mov     dword ptr [eax], 0
.text:00000BA3
.text:00000BA3 loc_BA3:                                ; CODE XREF: _make_private_security_descriptor+40Fj
.text:00000BA3                 jmp     short loc_BBC
.text:00000BA5 ; ---------------------------------------------------------------------------
.text:00000BA5
.text:00000BA5 loc_BA5:                                ; CODE XREF: _make_private_security_descriptor+3E1j
.text:00000BA5                 mov     ecx, [ebp+arg_C]
.text:00000BA8                 mov     edx, [ecx]
.text:00000BAA                 push    edx
.text:00000BAB                 call    _safefree
.text:00000BB0                 add     esp, 4
.text:00000BB3                 mov     eax, [ebp+arg_C]
.text:00000BB6                 mov     dword ptr [eax], 0
.text:00000BBC
.text:00000BBC loc_BBC:                                ; CODE XREF: _make_private_security_descriptor:loc_BA3j
.text:00000BBC                 mov     eax, [ebp+var_94]
.text:00000BC2                 push    edx
.text:00000BC3                 mov     ecx, ebp
.text:00000BC5                 push    eax
.text:00000BC6                 lea     edx, $LN24
.text:00000BCC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BD1                 pop     eax
.text:00000BD2                 pop     edx
.text:00000BD3                 pop     edi
.text:00000BD4                 pop     esi
.text:00000BD5                 mov     ecx, [ebp+var_4]
.text:00000BD8                 xor     ecx, ebp
.text:00000BDA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BDF                 add     esp, 94h
.text:00000BE5                 cmp     ebp, esp
.text:00000BE7                 call    __RTC_CheckEsp
.text:00000BEC                 mov     esp, ebp
.text:00000BEE                 pop     ebp
.text:00000BEF                 retn
.text:00000BEF _make_private_security_descriptor endp
.text:00000BEF
.text:00000BEF ; ---------------------------------------------------------------------------
.text:00000BF0 $LN24           dd 3                    ; DATA XREF: _make_private_security_descriptor+452o
.text:00000BF4                 dd offset $LN23
.text:00000BF8 $LN23           dd 0FFFFFFF0h, 6        ; DATA XREF: .text:00000BF4o
.text:00000C00                 dd offset $LN20         ; "world_auth"
.text:00000C04                 dd 0FFFFFFE0h, 6
.text:00000C0C                 dd offset $LN21         ; "nt_auth"
.text:00000C10                 dd 0FFFFFF78h, 60h
.text:00000C18                 dd offset $LN22
.text:00000C1C $LN22           db 65h, 61h, 0          ; DATA XREF: .text:00000C18o
.text:00000C1F $LN21           db 'nt_auth',0          ; DATA XREF: .text:00000C0Co
.text:00000C27 $LN20           db 'world_auth',0       ; DATA XREF: .text:00000C00o
.text:00000C32                 align 4
.text:00000C32 _text           ends
.text:00000C32
.rtc$TMZ:00000C34 ; ===========================================================================
.rtc$TMZ:00000C34
.rtc$TMZ:00000C34 ; Segment type: Pure data
.rtc$TMZ:00000C34 ; Segment permissions: Read
.rtc$TMZ:00000C34 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000C34                 assume cs:_rtc$TMZ
.rtc$TMZ:00000C34                 ;org 0C34h
.rtc$TMZ:00000C34 ; COMDAT (pick any)
.rtc$TMZ:00000C34 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000C34 _rtc$TMZ        ends
.rtc$TMZ:00000C34
.rtc$IMZ:00000C38 ; ===========================================================================
.rtc$IMZ:00000C38
.rtc$IMZ:00000C38 ; Segment type: Pure data
.rtc$IMZ:00000C38 ; Segment permissions: Read
.rtc$IMZ:00000C38 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000C38                 assume cs:_rtc$IMZ
.rtc$IMZ:00000C38                 ;org 0C38h
.rtc$IMZ:00000C38 ; COMDAT (pick any)
.rtc$IMZ:00000C38 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000C38 _rtc$IMZ        ends
.rtc$IMZ:00000C38
UNDEF:00000C40 ; ===========================================================================
UNDEF:00000C40
UNDEF:00000C40 ; Segment type: Externs
UNDEF:00000C40 ; UNDEF
UNDEF:00000C40                 extrn _p_CryptProtectMemory:near ; DATA XREF: _got_crypt+75w
UNDEF:00000C40                                         ; _got_crypt+7Br
UNDEF:00000C44                 extrn _p_InitializeSecurityDescriptor:near
UNDEF:00000C44                                         ; DATA XREF: _got_advapi+159w
UNDEF:00000C44                                         ; _got_advapi+15Fr
UNDEF:00000C48                 extrn _p_GetTokenInformation:near
UNDEF:00000C48                                         ; CODE XREF: _get_user_sid+AEp
UNDEF:00000C48                                         ; _get_user_sid+10Fp
UNDEF:00000C48                                         ; DATA XREF: ...
UNDEF:00000C4C                 extrn _p_OpenProcessToken:near ; CODE XREF: _get_user_sid+88p
UNDEF:00000C4C                                         ; DATA XREF: _got_advapi+CFw ...
UNDEF:00000C50                 extrn _p_GetSecurityInfo:near ; DATA XREF: _got_advapi+89w
UNDEF:00000C50                                         ; _got_advapi+8Fr
UNDEF:00000C54                 extrn _p_SetSecurityDescriptorOwner:near
UNDEF:00000C54                                         ; DATA XREF: _got_advapi+19Fw
UNDEF:00000C54                                         ; _got_advapi+1A4r
UNDEF:00000C58                 extrn _p_SetEntriesInAclA:near
UNDEF:00000C58                                         ; CODE XREF: _make_private_security_descriptor+24Bp
UNDEF:00000C58                                         ; DATA XREF: _got_advapi+1E0w ...
UNDEF:00000C5C ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00000C5C                 extrn __imp__GetProcAddress@8:near
UNDEF:00000C5C                                         ; CODE XREF: _got_advapi+6Dp
UNDEF:00000C5C                                         ; _got_advapi+B3p ...
UNDEF:00000C60                 extrn _load_system32_dll:near ; CODE XREF: _got_advapi+3Dp
UNDEF:00000C60                                         ; _got_crypt+2Dp
UNDEF:00000C64                 extrn __RTC_CheckEsp:near ; CODE XREF: _got_advapi+75p
UNDEF:00000C64                                         ; _got_advapi+BBp ...
UNDEF:00000C68                 extrn __RTC_Shutdown:near
UNDEF:00000C68                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000C6C                 extrn __RTC_InitBase:near
UNDEF:00000C6C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000C70                 extrn _safefree:near    ; CODE XREF: _get_user_sid+1D0p
UNDEF:00000C70                                         ; _make_private_security_descriptor+437p
UNDEF:00000C74 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
UNDEF:00000C74                 extrn __imp__LocalFree@4:near ; CODE XREF: _get_user_sid+1B9p
UNDEF:00000C74                                         ; _make_private_security_descriptor+3F3p ...
UNDEF:00000C78 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:00000C78                 extrn __imp__CloseHandle@4:near
UNDEF:00000C78                                         ; CODE XREF: _get_user_sid+187p
UNDEF:00000C78                                         ; _get_user_sid+1A0p
UNDEF:00000C78                                         ; DATA XREF: ...
UNDEF:00000C7C ; BOOL __stdcall CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid)
UNDEF:00000C7C                 extrn __imp__CopySid@12:near ; CODE XREF: _get_user_sid+15Bp
UNDEF:00000C7C                                         ; DATA XREF: _get_user_sid+15Br
UNDEF:00000C80                 extrn _safemalloc:near  ; CODE XREF: _get_user_sid+140p
UNDEF:00000C84 ; DWORD __stdcall GetLengthSid(PSID pSid)
UNDEF:00000C84                 extrn __imp__GetLengthSid@4:near
UNDEF:00000C84                                         ; CODE XREF: _get_user_sid+12Ap
UNDEF:00000C84                                         ; DATA XREF: _get_user_sid+12Ar
UNDEF:00000C88 ; HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes)
UNDEF:00000C88                 extrn __imp__LocalAlloc@8:near ; CODE XREF: _get_user_sid+E0p
UNDEF:00000C88                                         ; _make_private_security_descriptor+29Cp
UNDEF:00000C88                                         ; DATA XREF: ...
UNDEF:00000C8C ; DWORD __stdcall GetLastError()
UNDEF:00000C8C                 extrn __imp__GetLastError@0:near
UNDEF:00000C8C                                         ; CODE XREF: _get_user_sid+C1p
UNDEF:00000C8C                                         ; _make_private_security_descriptor+BAp ...
UNDEF:00000C90 ; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
UNDEF:00000C90                 extrn __imp__OpenProcess@12:near
UNDEF:00000C90                                         ; CODE XREF: _get_user_sid+61p
UNDEF:00000C90                                         ; DATA XREF: _get_user_sid+61r
UNDEF:00000C94 ; DWORD __stdcall GetCurrentProcessId()
UNDEF:00000C94                 extrn __imp__GetCurrentProcessId@0:near
UNDEF:00000C94                                         ; CODE XREF: _get_user_sid+4Ap
UNDEF:00000C94                                         ; DATA XREF: _get_user_sid+4Ar
UNDEF:00000C98 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000C98                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000C98                                         ; CODE XREF: _get_user_sid+1E5p
UNDEF:00000C98                                         ; _make_private_security_descriptor+458p
UNDEF:00000C9C ; BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted)
UNDEF:00000C9C                 extrn __imp__SetSecurityDescriptorDacl@16:near
UNDEF:00000C9C                                         ; CODE XREF: _make_private_security_descriptor+392p
UNDEF:00000C9C                                         ; DATA XREF: _make_private_security_descriptor+392r
UNDEF:00000CA0 ; BOOL __stdcall SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted)
UNDEF:00000CA0                 extrn __imp__SetSecurityDescriptorOwner@12:near
UNDEF:00000CA0                                         ; CODE XREF: _make_private_security_descriptor+342p
UNDEF:00000CA0                                         ; DATA XREF: _make_private_security_descriptor+342r
UNDEF:00000CA4 ; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision)
UNDEF:00000CA4                 extrn __imp__InitializeSecurityDescriptor@8:near
UNDEF:00000CA4                                         ; CODE XREF: _make_private_security_descriptor+2F0p
UNDEF:00000CA4                                         ; DATA XREF: _make_private_security_descriptor+2F0r
UNDEF:00000CA8 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00000CA8                 extrn _memset:near      ; CODE XREF: _make_private_security_descriptor+1C1p
UNDEF:00000CAC ; BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid)
UNDEF:00000CAC                 extrn __imp__AllocateAndInitializeSid@44:near
UNDEF:00000CAC                                         ; CODE XREF: _make_private_security_descriptor+10Ep
UNDEF:00000CAC                                         ; _make_private_security_descriptor+175p
UNDEF:00000CAC                                         ; DATA XREF: ...
UNDEF:00000CB0                 extrn _win_strerror:near
UNDEF:00000CB0                                         ; CODE XREF: _make_private_security_descriptor+C8p
UNDEF:00000CB0                                         ; _make_private_security_descriptor+12Fp ...
UNDEF:00000CB4                 extrn _dupprintf:near   ; CODE XREF: _make_private_security_descriptor+8Ap
UNDEF:00000CB4                                         ; _make_private_security_descriptor+D6p ...
UNDEF:00000CB8                 extrn ___security_cookie:near
UNDEF:00000CB8                                         ; DATA XREF: _make_private_security_descriptor+1Dr
UNDEF:00000CBC ; __fastcall __security_check_cookie(x)
UNDEF:00000CBC                 extrn @__security_check_cookie@4:near
UNDEF:00000CBC                                         ; CODE XREF: _make_private_security_descriptor+466p
UNDEF:00000CBC
UNDEF:00000CBC
UNDEF:00000CBC                 end